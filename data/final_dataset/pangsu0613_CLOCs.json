{"home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.get_pos_to_kw_map": [[11, 20], ["inspect.signature", "inspect.signature.parameters.items"], "function", ["None"], ["def", "get_pos_to_kw_map", "(", "func", ")", ":", "\n", "    ", "pos_to_kw", "=", "{", "}", "\n", "fsig", "=", "inspect", ".", "signature", "(", "func", ")", "\n", "pos", "=", "0", "\n", "for", "name", ",", "info", "in", "fsig", ".", "parameters", ".", "items", "(", ")", ":", "\n", "        ", "if", "info", ".", "kind", "is", "info", ".", "POSITIONAL_OR_KEYWORD", ":", "\n", "            ", "pos_to_kw", "[", "pos", "]", "=", "name", "\n", "", "pos", "+=", "1", "\n", "", "return", "pos_to_kw", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.get_kw_to_default_map": [[22, 30], ["inspect.signature", "inspect.signature.parameters.items"], "function", ["None"], ["", "def", "get_kw_to_default_map", "(", "func", ")", ":", "\n", "    ", "kw_to_default", "=", "{", "}", "\n", "fsig", "=", "inspect", ".", "signature", "(", "func", ")", "\n", "for", "name", ",", "info", "in", "fsig", ".", "parameters", ".", "items", "(", ")", ":", "\n", "        ", "if", "info", ".", "kind", "is", "info", ".", "POSITIONAL_OR_KEYWORD", ":", "\n", "            ", "if", "info", ".", "default", "is", "not", "info", ".", "empty", ":", "\n", "                ", "kw_to_default", "[", "name", "]", "=", "info", ".", "default", "\n", "", "", "", "return", "kw_to_default", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args": [[32, 47], ["tools.get_pos_to_kw_map", "kwargs.items", "super().__init__", "get_pos_to_kw_map.items", "len"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.get_pos_to_kw_map", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["", "def", "change_default_args", "(", "**", "kwargs", ")", ":", "\n", "    ", "def", "layer_wrapper", "(", "layer_class", ")", ":", "\n", "        ", "class", "DefaultArgLayer", "(", "layer_class", ")", ":", "\n", "            ", "layer_name", "=", "layer_class", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kw", ")", ":", "\n", "                ", "pos_to_kw", "=", "get_pos_to_kw_map", "(", "layer_class", ".", "__init__", ")", "\n", "kw_to_pos", "=", "{", "kw", ":", "pos", "for", "pos", ",", "kw", "in", "pos_to_kw", ".", "items", "(", ")", "}", "\n", "for", "key", ",", "val", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                    ", "if", "key", "not", "in", "kw", "and", "kw_to_pos", "[", "key", "]", ">", "len", "(", "args", ")", ":", "\n", "                        ", "kw", "[", "key", "]", "=", "val", "\n", "", "", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kw", ")", "\n", "\n", "", "", "return", "DefaultArgLayer", "\n", "\n", "", "return", "layer_wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.torch_to_np_dtype": [[48, 58], ["numpy.dtype", "numpy.dtype", "numpy.dtype", "numpy.dtype", "numpy.dtype", "numpy.dtype"], "function", ["None"], ["", "def", "torch_to_np_dtype", "(", "ttype", ")", ":", "\n", "    ", "type_map", "=", "{", "\n", "torch", ".", "float16", ":", "np", ".", "dtype", "(", "np", ".", "float16", ")", ",", "\n", "torch", ".", "float32", ":", "np", ".", "dtype", "(", "np", ".", "float32", ")", ",", "\n", "torch", ".", "float16", ":", "np", ".", "dtype", "(", "np", ".", "float64", ")", ",", "\n", "torch", ".", "int32", ":", "np", ".", "dtype", "(", "np", ".", "int32", ")", ",", "\n", "torch", ".", "int64", ":", "np", ".", "dtype", "(", "np", ".", "int64", ")", ",", "\n", "torch", ".", "uint8", ":", "np", ".", "dtype", "(", "np", ".", "uint8", ")", ",", "\n", "}", "\n", "return", "type_map", "[", "ttype", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.Scalar.__init__": [[8, 12], ["torch.nn.Module.__init__", "metrics.Scalar.register_buffer", "metrics.Scalar.register_buffer", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'total'", ",", "torch", ".", "FloatTensor", "(", "[", "0.0", "]", ")", ")", "\n", "self", ".", "register_buffer", "(", "'count'", ",", "torch", ".", "FloatTensor", "(", "[", "0.0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.Scalar.forward": [[13, 18], ["metrics.Scalar.value.cpu", "scalar.eq", "scalar.data.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "scalar", ")", ":", "\n", "        ", "if", "not", "scalar", ".", "eq", "(", "0.0", ")", ":", "\n", "            ", "self", ".", "count", "+=", "1", "\n", "self", ".", "total", "+=", "scalar", ".", "data", ".", "float", "(", ")", "\n", "", "return", "self", ".", "value", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.Scalar.value": [[19, 22], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.Scalar.clear": [[23, 26], ["metrics.Scalar.total.zero_", "metrics.Scalar.count.zero_"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "total", ".", "zero_", "(", ")", "\n", "self", ".", "count", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.Accuracy.__init__": [[28, 40], ["torch.nn.Module.__init__", "metrics.Accuracy.register_buffer", "metrics.Accuracy.register_buffer", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dim", "=", "1", ",", "\n", "ignore_idx", "=", "-", "1", ",", "\n", "threshold", "=", "0.5", ",", "\n", "encode_background_as_zeros", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'total'", ",", "torch", ".", "FloatTensor", "(", "[", "0.0", "]", ")", ")", "\n", "self", ".", "register_buffer", "(", "'count'", ",", "torch", ".", "FloatTensor", "(", "[", "0.0", "]", ")", ")", "\n", "self", ".", "_ignore_idx", "=", "ignore_idx", "\n", "self", ".", "_dim", "=", "dim", "\n", "self", ".", "_threshold", "=", "threshold", "\n", "self", ".", "_encode_background_as_zeros", "=", "encode_background_as_zeros", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.Accuracy.forward": [[41, 66], ["labels.view.view.view", "torch.where.view", "torch.where.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp().float", "torch.clamp().float", "torch.clamp().float", "torch.clamp().float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "metrics.Accuracy.value.cpu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.where", "torch.where", "torch.where", "torch.where", "int", "int", "weights.float.float.float", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.max", "torch.max", "torch.max", "torch.max", "numpy.prod", "numpy.prod", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.max", "torch.max", "torch.max", "torch.max", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "labels.view.view.long"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "labels", ",", "preds", ",", "weights", "=", "None", ")", ":", "\n", "# labels: [N, ...]", "\n", "# preds: [N, C, ...]", "\n", "        ", "if", "self", ".", "_encode_background_as_zeros", ":", "\n", "            ", "scores", "=", "torch", ".", "sigmoid", "(", "preds", ")", "\n", "labels_pred", "=", "torch", ".", "max", "(", "preds", ",", "dim", "=", "self", ".", "_dim", ")", "[", "1", "]", "+", "1", "\n", "pred_labels", "=", "torch", ".", "where", "(", "(", "scores", ">", "self", ".", "_threshold", ")", ".", "any", "(", "self", ".", "_dim", ")", ",", "\n", "labels_pred", ",", "\n", "torch", ".", "tensor", "(", "0", ")", ".", "type_as", "(", "labels_pred", ")", ")", "\n", "", "else", ":", "\n", "            ", "pred_labels", "=", "torch", ".", "max", "(", "preds", ",", "dim", "=", "self", ".", "_dim", ")", "[", "1", "]", "\n", "", "N", ",", "*", "Ds", "=", "labels", ".", "shape", "\n", "labels", "=", "labels", ".", "view", "(", "N", ",", "int", "(", "np", ".", "prod", "(", "Ds", ")", ")", ")", "\n", "pred_labels", "=", "pred_labels", ".", "view", "(", "N", ",", "int", "(", "np", ".", "prod", "(", "Ds", ")", ")", ")", "\n", "if", "weights", "is", "None", ":", "\n", "            ", "weights", "=", "(", "labels", "!=", "self", ".", "_ignore_idx", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "weights", "=", "weights", ".", "float", "(", ")", "\n", "\n", "", "num_examples", "=", "torch", ".", "sum", "(", "weights", ")", "\n", "num_examples", "=", "torch", ".", "clamp", "(", "num_examples", ",", "min", "=", "1.0", ")", ".", "float", "(", ")", "\n", "total", "=", "torch", ".", "sum", "(", "(", "pred_labels", "==", "labels", ".", "long", "(", ")", ")", ".", "float", "(", ")", ")", "\n", "self", ".", "count", "+=", "num_examples", "\n", "self", ".", "total", "+=", "total", "\n", "return", "self", ".", "value", ".", "cpu", "(", ")", "\n", "# return (total /  num_examples.data).cpu()", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.Accuracy.value": [[67, 70], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.Accuracy.clear": [[71, 74], ["metrics.Accuracy.total.zero_", "metrics.Accuracy.count.zero_"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "total", ".", "zero_", "(", ")", "\n", "self", ".", "count", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.Precision.__init__": [[77, 84], ["torch.nn.Module.__init__", "metrics.Precision.register_buffer", "metrics.Precision.register_buffer", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "1", ",", "ignore_idx", "=", "-", "1", ",", "threshold", "=", "0.5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'total'", ",", "torch", ".", "FloatTensor", "(", "[", "0.0", "]", ")", ")", "\n", "self", ".", "register_buffer", "(", "'count'", ",", "torch", ".", "FloatTensor", "(", "[", "0.0", "]", ")", ")", "\n", "self", ".", "_ignore_idx", "=", "ignore_idx", "\n", "self", ".", "_dim", "=", "dim", "\n", "self", ".", "_threshold", "=", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.Precision.forward": [[85, 117], ["labels.view.view.view", "pred_labels.view.view.view", "metrics.Precision.value.cpu", "int", "int", "weights.float.float.float", "torch.max", "torch.max", "torch.max", "torch.max", "numpy.prod", "numpy.prod", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "labels", ",", "preds", ",", "weights", "=", "None", ")", ":", "\n", "# labels: [N, ...]", "\n", "# preds: [N, C, ...]", "\n", "        ", "if", "preds", ".", "shape", "[", "self", ".", "_dim", "]", "==", "1", ":", "# BCE", "\n", "            ", "pred_labels", "=", "(", "torch", ".", "sigmoid", "(", "preds", ")", ">", "\n", "self", ".", "_threshold", ")", ".", "long", "(", ")", ".", "squeeze", "(", "self", ".", "_dim", ")", "\n", "", "else", ":", "\n", "            ", "assert", "preds", ".", "shape", "[", "\n", "self", ".", "_dim", "]", "==", "2", ",", "\"precision only support 2 class\"", "\n", "pred_labels", "=", "torch", ".", "max", "(", "preds", ",", "dim", "=", "self", ".", "_dim", ")", "[", "1", "]", "\n", "", "N", ",", "*", "Ds", "=", "labels", ".", "shape", "\n", "labels", "=", "labels", ".", "view", "(", "N", ",", "int", "(", "np", ".", "prod", "(", "Ds", ")", ")", ")", "\n", "pred_labels", "=", "pred_labels", ".", "view", "(", "N", ",", "int", "(", "np", ".", "prod", "(", "Ds", ")", ")", ")", "\n", "if", "weights", "is", "None", ":", "\n", "            ", "weights", "=", "(", "labels", "!=", "self", ".", "_ignore_idx", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "weights", "=", "weights", ".", "float", "(", ")", "\n", "\n", "", "pred_trues", "=", "pred_labels", ">", "0", "\n", "pred_falses", "=", "pred_labels", "==", "0", "\n", "trues", "=", "labels", ">", "0", "\n", "falses", "=", "labels", "==", "0", "\n", "true_positives", "=", "(", "weights", "*", "(", "trues", "&", "pred_trues", ")", ".", "float", "(", ")", ")", ".", "sum", "(", ")", "\n", "true_negatives", "=", "(", "weights", "*", "(", "falses", "&", "pred_falses", ")", ".", "float", "(", ")", ")", ".", "sum", "(", ")", "\n", "false_positives", "=", "(", "weights", "*", "(", "falses", "&", "pred_trues", ")", ".", "float", "(", ")", ")", ".", "sum", "(", ")", "\n", "false_negatives", "=", "(", "weights", "*", "(", "trues", "&", "pred_falses", ")", ".", "float", "(", ")", ")", ".", "sum", "(", ")", "\n", "count", "=", "true_positives", "+", "false_positives", "\n", "# print(count, true_positives)", "\n", "if", "count", ">", "0", ":", "\n", "            ", "self", ".", "count", "+=", "count", "\n", "self", ".", "total", "+=", "true_positives", "\n", "", "return", "self", ".", "value", ".", "cpu", "(", ")", "\n", "# return (total /  num_examples.data).cpu()", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.Precision.value": [[118, 121], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "", "def", "clear", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.Precision.clear": [[121, 124], ["metrics.Precision.total.zero_", "metrics.Precision.count.zero_"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "total", ".", "zero_", "(", ")", "\n", "self", ".", "count", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.Recall.__init__": [[127, 134], ["torch.nn.Module.__init__", "metrics.Recall.register_buffer", "metrics.Recall.register_buffer", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "1", ",", "ignore_idx", "=", "-", "1", ",", "threshold", "=", "0.5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'total'", ",", "torch", ".", "FloatTensor", "(", "[", "0.0", "]", ")", ")", "\n", "self", ".", "register_buffer", "(", "'count'", ",", "torch", ".", "FloatTensor", "(", "[", "0.0", "]", ")", ")", "\n", "self", ".", "_ignore_idx", "=", "ignore_idx", "\n", "self", ".", "_dim", "=", "dim", "\n", "self", ".", "_threshold", "=", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.Recall.forward": [[135, 165], ["labels.view.view.view", "pred_labels.view.view.view", "metrics.Recall.value.cpu", "int", "int", "weights.float.float.float", "torch.max", "torch.max", "torch.max", "torch.max", "numpy.prod", "numpy.prod", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "labels", ",", "preds", ",", "weights", "=", "None", ")", ":", "\n", "# labels: [N, ...]", "\n", "# preds: [N, C, ...]", "\n", "        ", "if", "preds", ".", "shape", "[", "self", ".", "_dim", "]", "==", "1", ":", "# BCE", "\n", "            ", "pred_labels", "=", "(", "torch", ".", "sigmoid", "(", "preds", ")", ">", "\n", "self", ".", "_threshold", ")", ".", "long", "(", ")", ".", "squeeze", "(", "self", ".", "_dim", ")", "\n", "", "else", ":", "\n", "            ", "assert", "preds", ".", "shape", "[", "\n", "self", ".", "_dim", "]", "==", "2", ",", "\"precision only support 2 class\"", "\n", "pred_labels", "=", "torch", ".", "max", "(", "preds", ",", "dim", "=", "self", ".", "_dim", ")", "[", "1", "]", "\n", "", "N", ",", "*", "Ds", "=", "labels", ".", "shape", "\n", "labels", "=", "labels", ".", "view", "(", "N", ",", "int", "(", "np", ".", "prod", "(", "Ds", ")", ")", ")", "\n", "pred_labels", "=", "pred_labels", ".", "view", "(", "N", ",", "int", "(", "np", ".", "prod", "(", "Ds", ")", ")", ")", "\n", "if", "weights", "is", "None", ":", "\n", "            ", "weights", "=", "(", "labels", "!=", "self", ".", "_ignore_idx", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "weights", "=", "weights", ".", "float", "(", ")", "\n", "", "pred_trues", "=", "pred_labels", "==", "1", "\n", "pred_falses", "=", "pred_labels", "==", "0", "\n", "trues", "=", "labels", "==", "1", "\n", "falses", "=", "labels", "==", "0", "\n", "true_positives", "=", "(", "weights", "*", "(", "trues", "&", "pred_trues", ")", ".", "float", "(", ")", ")", ".", "sum", "(", ")", "\n", "true_negatives", "=", "(", "weights", "*", "(", "falses", "&", "pred_falses", ")", ".", "float", "(", ")", ")", ".", "sum", "(", ")", "\n", "false_positives", "=", "(", "weights", "*", "(", "falses", "&", "pred_trues", ")", ".", "float", "(", ")", ")", ".", "sum", "(", ")", "\n", "false_negatives", "=", "(", "weights", "*", "(", "trues", "&", "pred_falses", ")", ".", "float", "(", ")", ")", ".", "sum", "(", ")", "\n", "count", "=", "true_positives", "+", "false_negatives", "\n", "if", "count", ">", "0", ":", "\n", "            ", "self", ".", "count", "+=", "count", "\n", "self", ".", "total", "+=", "true_positives", "\n", "", "return", "self", ".", "value", ".", "cpu", "(", ")", "\n", "# return (total /  num_examples.data).cpu()", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.Recall.value": [[166, 169], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "", "def", "clear", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.Recall.clear": [[169, 172], ["metrics.Recall.total.zero_", "metrics.Recall.count.zero_"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "total", ".", "zero_", "(", ")", "\n", "self", ".", "count", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.PrecisionRecall.__init__": [[196, 220], ["torch.nn.Module.__init__", "metrics.PrecisionRecall.register_buffer", "metrics.PrecisionRecall.register_buffer", "metrics.PrecisionRecall.register_buffer", "metrics.PrecisionRecall.register_buffer", "isinstance", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dim", "=", "1", ",", "\n", "ignore_idx", "=", "-", "1", ",", "\n", "thresholds", "=", "0.5", ",", "\n", "use_sigmoid_score", "=", "False", ",", "\n", "encode_background_as_zeros", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "thresholds", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "thresholds", "=", "[", "thresholds", "]", "\n", "\n", "", "self", ".", "register_buffer", "(", "'prec_total'", ",", "\n", "torch", ".", "FloatTensor", "(", "len", "(", "thresholds", ")", ")", ".", "zero_", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'prec_count'", ",", "\n", "torch", ".", "FloatTensor", "(", "len", "(", "thresholds", ")", ")", ".", "zero_", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'rec_total'", ",", "\n", "torch", ".", "FloatTensor", "(", "len", "(", "thresholds", ")", ")", ".", "zero_", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'rec_count'", ",", "\n", "torch", ".", "FloatTensor", "(", "len", "(", "thresholds", ")", ")", ".", "zero_", "(", ")", ")", "\n", "\n", "self", ".", "_ignore_idx", "=", "ignore_idx", "\n", "self", ".", "_dim", "=", "dim", "\n", "self", ".", "_thresholds", "=", "thresholds", "\n", "self", ".", "_use_sigmoid_score", "=", "use_sigmoid_score", "\n", "self", ".", "_encode_background_as_zeros", "=", "encode_background_as_zeros", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.PrecisionRecall.forward": [[221, 265], ["enumerate", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.max", "torch.max", "torch.max", "torch.max", "weights.float.float.float", "metrics._calc_binary_metrics", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics._calc_binary_metrics"], ["", "def", "forward", "(", "self", ",", "labels", ",", "preds", ",", "weights", "=", "None", ")", ":", "\n", "# labels: [N, ...]", "\n", "# preds: [N, ..., C]", "\n", "        ", "if", "self", ".", "_encode_background_as_zeros", ":", "\n", "# this don't support softmax", "\n", "            ", "assert", "self", ".", "_use_sigmoid_score", "is", "True", "\n", "total_scores", "=", "torch", ".", "sigmoid", "(", "preds", ")", "\n", "# scores, label_preds = torch.max(total_scores, dim=1)", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "_use_sigmoid_score", ":", "\n", "                ", "total_scores", "=", "torch", ".", "sigmoid", "(", "preds", ")", "[", "...", ",", "1", ":", "]", "\n", "", "else", ":", "\n", "                ", "total_scores", "=", "F", ".", "softmax", "(", "preds", ",", "dim", "=", "-", "1", ")", "[", "...", ",", "1", ":", "]", "\n", "", "", "\"\"\"\n        if preds.shape[self._dim] == 1:  # BCE\n            scores = torch.sigmoid(preds)\n        else:\n            # assert preds.shape[\n            #     self._dim] == 2, \"precision only support 2 class\"\n            # TODO: add support for [N, C, ...] format.\n            # TODO: add multiclass support\n            if self._use_sigmoid_score:\n                scores = torch.sigmoid(preds)[:, ..., 1:].sum(-1)\n            else:\n                scores = F.softmax(preds, dim=self._dim)[:, ..., 1:].sum(-1)\n        \"\"\"", "\n", "scores", "=", "torch", ".", "max", "(", "total_scores", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "if", "weights", "is", "None", ":", "\n", "            ", "weights", "=", "(", "labels", "!=", "self", ".", "_ignore_idx", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "weights", "=", "weights", ".", "float", "(", ")", "\n", "", "for", "i", ",", "thresh", "in", "enumerate", "(", "self", ".", "_thresholds", ")", ":", "\n", "            ", "tp", ",", "tn", ",", "fp", ",", "fn", "=", "_calc_binary_metrics", "(", "labels", ",", "scores", ",", "weights", ",", "\n", "self", ".", "_ignore_idx", ",", "thresh", ")", "\n", "rec_count", "=", "tp", "+", "fn", "\n", "prec_count", "=", "tp", "+", "fp", "\n", "if", "rec_count", ">", "0", ":", "\n", "                ", "self", ".", "rec_count", "[", "i", "]", "+=", "rec_count", "\n", "self", ".", "rec_total", "[", "i", "]", "+=", "tp", "\n", "", "if", "prec_count", ">", "0", ":", "\n", "                ", "self", ".", "prec_count", "[", "i", "]", "+=", "prec_count", "\n", "self", ".", "prec_total", "[", "i", "]", "+=", "tp", "\n", "\n", "", "", "return", "self", ".", "value", "\n", "# return (total /  num_examples.data).cpu()", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.PrecisionRecall.value": [[266, 272], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "prec_count", "=", "torch", ".", "clamp", "(", "self", ".", "prec_count", ",", "min", "=", "1.0", ")", "\n", "rec_count", "=", "torch", ".", "clamp", "(", "self", ".", "rec_count", ",", "min", "=", "1.0", ")", "\n", "return", "(", "(", "self", ".", "prec_total", "/", "prec_count", ")", ".", "cpu", "(", ")", ",", "\n", "(", "self", ".", "rec_total", "/", "rec_count", ")", ".", "cpu", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.PrecisionRecall.thresholds": [[273, 276], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "thresholds", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.PrecisionRecall.clear": [[277, 282], ["metrics.PrecisionRecall.rec_count.zero_", "metrics.PrecisionRecall.prec_count.zero_", "metrics.PrecisionRecall.prec_total.zero_", "metrics.PrecisionRecall.rec_total.zero_"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "rec_count", ".", "zero_", "(", ")", "\n", "self", ".", "prec_count", ".", "zero_", "(", ")", "\n", "self", ".", "prec_total", ".", "zero_", "(", ")", "\n", "self", ".", "rec_total", ".", "zero_", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics._calc_binary_metrics": [[174, 193], ["labels.view.view", "pred_labels.view.view", "int", "int", "numpy.prod", "numpy.prod"], "function", ["None"], ["", "", "def", "_calc_binary_metrics", "(", "labels", ",", "\n", "scores", ",", "\n", "weights", "=", "None", ",", "\n", "ignore_idx", "=", "-", "1", ",", "\n", "threshold", "=", "0.5", ")", ":", "\n", "\n", "    ", "pred_labels", "=", "(", "scores", ">", "threshold", ")", ".", "long", "(", ")", "\n", "N", ",", "*", "Ds", "=", "labels", ".", "shape", "\n", "labels", "=", "labels", ".", "view", "(", "N", ",", "int", "(", "np", ".", "prod", "(", "Ds", ")", ")", ")", "\n", "pred_labels", "=", "pred_labels", ".", "view", "(", "N", ",", "int", "(", "np", ".", "prod", "(", "Ds", ")", ")", ")", "\n", "pred_trues", "=", "pred_labels", ">", "0", "\n", "pred_falses", "=", "pred_labels", "==", "0", "\n", "trues", "=", "labels", ">", "0", "\n", "falses", "=", "labels", "==", "0", "\n", "true_positives", "=", "(", "weights", "*", "(", "trues", "&", "pred_trues", ")", ".", "float", "(", ")", ")", ".", "sum", "(", ")", "\n", "true_negatives", "=", "(", "weights", "*", "(", "falses", "&", "pred_falses", ")", ".", "float", "(", ")", ")", ".", "sum", "(", ")", "\n", "false_positives", "=", "(", "weights", "*", "(", "falses", "&", "pred_trues", ")", ".", "float", "(", ")", ")", ".", "sum", "(", ")", "\n", "false_negatives", "=", "(", "weights", "*", "(", "trues", "&", "pred_falses", ")", ".", "float", "(", ")", ")", ".", "sum", "(", ")", "\n", "return", "true_positives", ",", "true_negatives", ",", "false_positives", ",", "false_negatives", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.nn.functional.one_hot": [[3, 8], ["torch.zeros", "torch.zeros.scatter_", "tensor.unsqueeze().long", "list", "tensor.unsqueeze"], "function", ["None"], ["def", "one_hot", "(", "tensor", ",", "depth", ",", "dim", "=", "-", "1", ",", "on_value", "=", "1.0", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "    ", "tensor_onehot", "=", "torch", ".", "zeros", "(", "\n", "*", "list", "(", "tensor", ".", "shape", ")", ",", "depth", ",", "dtype", "=", "dtype", ",", "device", "=", "tensor", ".", "device", ")", "\n", "tensor_onehot", ".", "scatter_", "(", "dim", ",", "tensor", ".", "unsqueeze", "(", "dim", ")", ".", "long", "(", ")", ",", "on_value", ")", "\n", "return", "tensor_onehot", "\n", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.normalization.GroupNorm.__init__": [[5, 11], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_channels", ",", "num_groups", ",", "eps", "=", "1e-5", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "num_groups", "=", "num_groups", ",", "\n", "num_channels", "=", "num_channels", ",", "\n", "eps", "=", "eps", ",", "\n", "affine", "=", "affine", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Empty.__init__": [[8, 10], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Empty", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Empty.forward": [[11, 17], ["len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "args", ")", "==", "1", ":", "\n", "            ", "return", "args", "[", "0", "]", "\n", "", "elif", "len", "(", "args", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.__init__": [[50, 64], ["super().__init__", "kwargs.items", "isinstance", "args[].items", "enumerate", "common.Sequential.add_module", "len", "common.Sequential.add_module", "common.Sequential.add_module", "ValueError", "ValueError", "str"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Sequential", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "len", "(", "args", ")", "==", "1", "and", "isinstance", "(", "args", "[", "0", "]", ",", "OrderedDict", ")", ":", "\n", "            ", "for", "key", ",", "module", "in", "args", "[", "0", "]", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "add_module", "(", "key", ",", "module", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "idx", ",", "module", "in", "enumerate", "(", "args", ")", ":", "\n", "                ", "self", ".", "add_module", "(", "str", "(", "idx", ")", ",", "module", ")", "\n", "", "", "for", "name", ",", "module", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "sys", ".", "version_info", "<", "(", "3", ",", "6", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"kwargs only supported in py36+\"", ")", "\n", "", "if", "name", "in", "self", ".", "_modules", ":", "\n", "                ", "raise", "ValueError", "(", "\"name exists.\"", ")", "\n", "", "self", ".", "add_module", "(", "name", ",", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.__getitem__": [[65, 74], ["iter", "range", "next", "IndexError", "len", "common.Sequential._modules.values", "next", "len", "len"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "not", "(", "-", "len", "(", "self", ")", "<=", "idx", "<", "len", "(", "self", ")", ")", ":", "\n", "            ", "raise", "IndexError", "(", "'index {} is out of range'", ".", "format", "(", "idx", ")", ")", "\n", "", "if", "idx", "<", "0", ":", "\n", "            ", "idx", "+=", "len", "(", "self", ")", "\n", "", "it", "=", "iter", "(", "self", ".", "_modules", ".", "values", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "idx", ")", ":", "\n", "            ", "next", "(", "it", ")", "\n", "", "return", "next", "(", "it", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.__len__": [[75, 77], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add": [[78, 84], ["common.Sequential.add_module", "str", "len", "KeyError"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "module", ",", "name", "=", "None", ")", ":", "\n", "        ", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "str", "(", "len", "(", "self", ".", "_modules", ")", ")", "\n", "if", "name", "in", "self", ".", "_modules", ":", "\n", "                ", "raise", "KeyError", "(", "\"name exists\"", ")", "\n", "", "", "self", ".", "add_module", "(", "name", ",", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.forward": [[85, 92], ["common.Sequential._modules.values", "module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# i = 0", "\n", "        ", "for", "module", "in", "self", ".", "_modules", ".", "values", "(", ")", ":", "\n", "# print(i)", "\n", "            ", "input", "=", "module", "(", "input", ")", "\n", "# i += 1", "\n", "", "return", "input", "", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.ops.array_ops.scatter_nd": [[7, 22], ["torch.zeros", "indices.view", "updates.view", "list", "range"], "function", ["None"], ["def", "scatter_nd", "(", "indices", ",", "updates", ",", "shape", ")", ":", "\n", "    ", "\"\"\"pytorch edition of tensorflow scatter_nd.\n    this function don't contain except handle code. so use this carefully\n    when indice repeats, don't support repeat add which is supported\n    in tensorflow.\n    \"\"\"", "\n", "ret", "=", "torch", ".", "zeros", "(", "*", "shape", ",", "dtype", "=", "updates", ".", "dtype", ",", "device", "=", "updates", ".", "device", ")", "\n", "ndim", "=", "indices", ".", "shape", "[", "-", "1", "]", "\n", "output_shape", "=", "list", "(", "indices", ".", "shape", "[", ":", "-", "1", "]", ")", "+", "shape", "[", "indices", ".", "shape", "[", "-", "1", "]", ":", "]", "\n", "flatted_indices", "=", "indices", ".", "view", "(", "-", "1", ",", "ndim", ")", "\n", "slices", "=", "[", "flatted_indices", "[", ":", ",", "i", "]", "for", "i", "in", "range", "(", "ndim", ")", "]", "\n", "slices", "+=", "[", "Ellipsis", "]", "\n", "#print(\"!!!!!output_shape:\",output_shape)", "\n", "ret", "[", "slices", "]", "=", "updates", ".", "view", "(", "*", "output_shape", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.ops.array_ops.gather_nd": [[24, 32], ["indices.view", "params[].view", "list", "list", "range"], "function", ["None"], ["", "def", "gather_nd", "(", "params", ",", "indices", ")", ":", "\n", "# this function has a limit that MAX_ADVINDEX_CALC_DIMS=5", "\n", "    ", "ndim", "=", "indices", ".", "shape", "[", "-", "1", "]", "\n", "output_shape", "=", "list", "(", "indices", ".", "shape", "[", ":", "-", "1", "]", ")", "+", "list", "(", "params", ".", "shape", "[", "indices", ".", "shape", "[", "-", "1", "]", ":", "]", ")", "\n", "flatted_indices", "=", "indices", ".", "view", "(", "-", "1", ",", "ndim", ")", "\n", "slices", "=", "[", "flatted_indices", "[", ":", ",", "i", "]", "for", "i", "in", "range", "(", "ndim", ")", "]", "\n", "slices", "+=", "[", "Ellipsis", "]", "\n", "return", "params", "[", "slices", "]", ".", "view", "(", "*", "output_shape", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.common.create_folder": [[5, 24], ["os.makedirs", "os.path.exists", "os.makedirs", "datetime.datetime.now().strftime", "os.path.exists", "shutil.rmtree", "shutil.rmtree", "datetime.datetime.now"], "function", ["None"], ["from", "torch", ".", "nn", "import", "functional", "as", "F", "\n", "\n", "class", "Empty", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Empty", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "args", ")", "==", "1", ":", "\n", "            ", "return", "args", "[", "0", "]", "\n", "", "elif", "len", "(", "args", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "return", "args", "\n", "\n", "", "", "class", "Sequential", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules._LRSchedulerStep.__init__": [[7, 26], ["list", "learning_schedules._LRSchedulerStep.step", "isinstance", "TypeError", "enumerate", "map", "group.setdefault", "KeyError", "type"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules_fastai.LRSchedulerStep.step"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "last_step", "=", "-", "1", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "optimizer", ",", "Optimizer", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'{} is not an Optimizer'", ".", "format", "(", "\n", "type", "(", "optimizer", ")", ".", "__name__", ")", ")", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "if", "last_step", "==", "-", "1", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", ".", "setdefault", "(", "'initial_lr'", ",", "group", "[", "'lr'", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", ",", "group", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "if", "'initial_lr'", "not", "in", "group", ":", "\n", "                    ", "raise", "KeyError", "(", "\n", "\"param 'initial_lr' is not specified \"", "\n", "\"in param_groups[{}] when resuming an optimizer\"", ".", "\n", "format", "(", "i", ")", ")", "\n", "", "", "", "self", ".", "base_lrs", "=", "list", "(", "\n", "map", "(", "lambda", "group", ":", "group", "[", "'initial_lr'", "]", ",", "optimizer", ".", "param_groups", ")", ")", "\n", "self", ".", "step", "(", "last_step", "+", "1", ")", "\n", "self", ".", "last_step", "=", "last_step", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules._LRSchedulerStep.get_lr": [[32, 35], ["learning_schedules._LRSchedulerStep._get_lr_per_group"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules.CosineDecayWithWarmup._get_lr_per_group"], ["def", "get_lr", "(", "self", ")", ":", "\n", "        ", "ret", "=", "[", "self", ".", "_get_lr_per_group", "(", "base_lr", ")", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules._LRSchedulerStep._get_lr_per_group": [[36, 38], ["None"], "methods", ["None"], ["", "def", "_get_lr_per_group", "(", "self", ",", "base_lr", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules._LRSchedulerStep.step": [[39, 45], ["zip", "learning_schedules._LRSchedulerStep.get_lr"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules._LRSchedulerStep.get_lr"], ["", "def", "step", "(", "self", ",", "step", "=", "None", ")", ":", "\n", "        ", "if", "step", "is", "None", ":", "\n", "            ", "step", "=", "self", ".", "last_step", "+", "1", "\n", "", "self", ".", "last_step", "=", "step", "\n", "for", "param_group", ",", "lr", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "self", ".", "get_lr", "(", ")", ")", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules.Constant.__init__": [[48, 50], ["learning_schedules._LRSchedulerStep.__init__"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "last_step", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules.Constant._get_lr_per_group": [[51, 53], ["None"], "methods", ["None"], ["", "def", "_get_lr_per_group", "(", "self", ",", "base_lr", ")", ":", "\n", "        ", "return", "base_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules.ManualStepping.__init__": [[60, 78], ["len", "any", "any", "learning_schedules._LRSchedulerStep.__init__", "any", "any", "ValueError", "ValueError", "ValueError", "len", "ValueError", "len", "zip", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "boundaries", ",", "rates", ",", "last_step", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "_boundaries", "=", "boundaries", "\n", "self", ".", "_num_boundaries", "=", "len", "(", "boundaries", ")", "\n", "self", ".", "_learning_rates", "=", "rates", "\n", "\n", "if", "any", "(", "[", "b", "<", "0", "for", "b", "in", "boundaries", "]", ")", "or", "any", "(", "\n", "[", "not", "isinstance", "(", "b", ",", "int", ")", "for", "b", "in", "boundaries", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'boundaries must be a list of positive integers'", ")", "\n", "", "if", "any", "(", "\n", "[", "bnext", "<=", "b", "for", "bnext", ",", "b", "in", "zip", "(", "boundaries", "[", "1", ":", "]", ",", "boundaries", "[", ":", "-", "1", "]", ")", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Entries in boundaries must be strictly increasing.'", ")", "\n", "", "if", "any", "(", "[", "not", "isinstance", "(", "r", ",", "float", ")", "for", "r", "in", "rates", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Learning rates must be floats'", ")", "\n", "", "if", "len", "(", "rates", ")", "!=", "len", "(", "boundaries", ")", "+", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'Number of provided learning rates must exceed '", "\n", "'number of boundary points by exactly 1.'", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules.ManualStepping._get_lr_per_group": [[79, 88], ["enumerate"], "methods", ["None"], ["", "def", "_get_lr_per_group", "(", "self", ",", "base_lr", ")", ":", "\n", "        ", "step", "=", "self", ".", "last_step", "\n", "ret", "=", "None", "\n", "for", "i", ",", "bound", "in", "enumerate", "(", "self", ".", "_boundaries", ")", ":", "\n", "            ", "if", "step", ">", "bound", ":", "\n", "                ", "ret", "=", "self", ".", "_learning_rates", "[", "i", "+", "1", "]", "\n", "", "", "if", "ret", "is", "not", "None", ":", "\n", "            ", "return", "ret", "\n", "", "return", "self", ".", "_learning_rates", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules.ExponentialDecayWithBurnin.__init__": [[94, 107], ["learning_schedules._LRSchedulerStep.__init__"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "optimizer", ",", "\n", "learning_rate_decay_steps", ",", "\n", "learning_rate_decay_factor", ",", "\n", "burnin_learning_rate", ",", "\n", "burnin_steps", ",", "\n", "last_step", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "_decay_steps", "=", "learning_rate_decay_steps", "\n", "self", ".", "_decay_factor", "=", "learning_rate_decay_factor", "\n", "self", ".", "_burnin_learning_rate", "=", "burnin_learning_rate", "\n", "self", ".", "_burnin_steps", "=", "burnin_steps", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules.ExponentialDecayWithBurnin._get_lr_per_group": [[108, 118], ["None"], "methods", ["None"], ["", "def", "_get_lr_per_group", "(", "self", ",", "base_lr", ")", ":", "\n", "        ", "if", "self", ".", "_burnin_learning_rate", "==", "0", ":", "\n", "            ", "burnin_learning_rate", "=", "base_lr", "\n", "", "step", "=", "self", ".", "last_step", "\n", "post_burnin_learning_rate", "=", "(", "base_lr", "*", "self", ".", "_decay_factor", "^", "\n", "(", "step", "//", "self", ".", "_decay_steps", ")", ")", "\n", "if", "step", "<", "self", ".", "_burnin_steps", ":", "\n", "            ", "return", "burnin_learning_rate", "\n", "", "else", ":", "\n", "            ", "return", "post_burnin_learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules.ExponentialDecay.__init__": [[121, 132], ["learning_schedules._LRSchedulerStep.__init__"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "optimizer", ",", "\n", "learning_rate_decay_steps", ",", "\n", "learning_rate_decay_factor", ",", "\n", "staircase", "=", "True", ",", "\n", "last_step", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "_decay_steps", "=", "learning_rate_decay_steps", "\n", "self", ".", "_decay_factor", "=", "learning_rate_decay_factor", "\n", "self", ".", "_staircase", "=", "staircase", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules.ExponentialDecay._get_lr_per_group": [[133, 143], ["pow", "pow"], "methods", ["None"], ["", "def", "_get_lr_per_group", "(", "self", ",", "base_lr", ")", ":", "\n", "        ", "step", "=", "self", ".", "last_step", "\n", "if", "self", ".", "_staircase", ":", "\n", "            ", "post_burnin_learning_rate", "=", "base_lr", "*", "pow", "(", "self", ".", "_decay_factor", ",", "\n", "(", "step", "//", "self", ".", "_decay_steps", ")", ")", "\n", "", "else", ":", "\n", "            ", "post_burnin_learning_rate", "=", "base_lr", "*", "pow", "(", "self", ".", "_decay_factor", ",", "\n", "(", "step", "/", "self", ".", "_decay_steps", ")", ")", "\n", "\n", "", "return", "post_burnin_learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules.CosineDecayWithWarmup.__init__": [[146, 160], ["learning_schedules._LRSchedulerStep.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "optimizer", ",", "\n", "total_steps", ",", "\n", "warmup_learning_rate", ",", "\n", "warmup_steps", ",", "\n", "last_step", "=", "-", "1", ")", ":", "\n", "        ", "if", "total_steps", "<", "warmup_steps", ":", "\n", "            ", "raise", "ValueError", "(", "'total_steps must be larger or equal to '", "\n", "'warmup_steps.'", ")", "\n", "", "self", ".", "_total_steps", "=", "total_steps", "\n", "self", ".", "_warmup_learning_rate", "=", "warmup_learning_rate", "\n", "self", ".", "_warmup_steps", "=", "warmup_steps", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules.CosineDecayWithWarmup._get_lr_per_group": [[161, 179], ["ValueError", "numpy.cos", "float", "float", "float"], "methods", ["None"], ["", "def", "_get_lr_per_group", "(", "self", ",", "base_lr", ")", ":", "\n", "        ", "if", "base_lr", "<", "self", ".", "_warmup_learning_rate", ":", "\n", "            ", "raise", "ValueError", "(", "'learning_rate_base must be larger '", "\n", "'or equal to warmup_learning_rate.'", ")", "\n", "\n", "", "step", "=", "self", ".", "last_step", "\n", "learning_rate", "=", "0.5", "*", "base_lr", "*", "(", "\n", "1", "+", "np", ".", "cos", "(", "np", ".", "pi", "*", "\n", "(", "float", "(", "step", ")", "-", "self", ".", "_warmup_steps", "\n", ")", "/", "float", "(", "self", ".", "_total_steps", "-", "self", ".", "_warmup_steps", ")", ")", ")", "\n", "if", "self", ".", "_warmup_steps", ">", "0", ":", "\n", "            ", "slope", "=", "(", "base_lr", "-", "self", ".", "_warmup_learning_rate", ")", "/", "self", ".", "_warmup_steps", "\n", "pre_cosine_learning_rate", "=", "slope", "*", "float", "(", "\n", "step", ")", "+", "self", ".", "_warmup_learning_rate", "\n", "if", "step", "<", "self", ".", "_warmup_steps", ":", "\n", "                ", "return", "pre_cosine_learning_rate", "\n", "", "else", ":", "\n", "                ", "return", "learning_rate", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.optim.MixedPrecisionWrapper.__init__": [[42, 69], ["hasattr", "enumerate", "isinstance", "ValueError", "optim.param_fp32_copy", "param_groups_copy.append", "group.items"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.optim.param_fp32_copy"], ["def", "__init__", "(", "self", ",", "\n", "optimizer", ",", "\n", "scale", "=", "None", ",", "\n", "auto_scale", "=", "True", ",", "\n", "inc_factor", "=", "2.0", ",", "\n", "dec_factor", "=", "0.5", ",", "\n", "num_iters_be_stable", "=", "500", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "optimizer", ",", "torch", ".", "optim", ".", "Optimizer", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"must provide a torch.optim.Optimizer\"", ")", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "if", "hasattr", "(", "self", ".", "optimizer", ",", "'name'", ")", ":", "\n", "            ", "self", ".", "name", "=", "self", ".", "optimizer", ".", "name", "# for ckpt system", "\n", "", "param_groups_copy", "=", "[", "]", "\n", "for", "i", ",", "group", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "            ", "group_copy", "=", "{", "n", ":", "v", "for", "n", ",", "v", "in", "group", ".", "items", "(", ")", "if", "n", "!=", "'params'", "}", "\n", "group_copy", "[", "'params'", "]", "=", "param_fp32_copy", "(", "group", "[", "'params'", "]", ")", "\n", "param_groups_copy", ".", "append", "(", "group_copy", ")", "\n", "\n", "# switch param_groups, may be dangerous", "\n", "", "self", ".", "param_groups", "=", "optimizer", ".", "param_groups", "\n", "optimizer", ".", "param_groups", "=", "param_groups_copy", "\n", "self", ".", "grad_scale", "=", "scale", "\n", "self", ".", "auto_scale", "=", "auto_scale", "\n", "self", ".", "inc_factor", "=", "inc_factor", "\n", "self", ".", "dec_factor", "=", "dec_factor", "\n", "self", ".", "stable_iter_count", "=", "0", "\n", "self", ".", "num_iters_be_stable", "=", "num_iters_be_stable", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.optim.MixedPrecisionWrapper.__getstate__": [[70, 72], ["optim.MixedPrecisionWrapper.optimizer.__getstate__"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.optim.MixedPrecisionWrapper.__getstate__"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "optimizer", ".", "__getstate__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.optim.MixedPrecisionWrapper.__setstate__": [[73, 75], ["optim.MixedPrecisionWrapper.optimizer.__setstate__"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.optim.MixedPrecisionWrapper.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "self", ".", "optimizer", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.optim.MixedPrecisionWrapper.__repr__": [[76, 78], ["optim.MixedPrecisionWrapper.optimizer.__repr__"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "optimizer", ".", "__repr__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.optim.MixedPrecisionWrapper.state_dict": [[79, 81], ["optim.MixedPrecisionWrapper.optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.optim.MixedPrecisionWrapper.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.optim.MixedPrecisionWrapper.load_state_dict": [[82, 84], ["optim.MixedPrecisionWrapper.optimizer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.optim.MixedPrecisionWrapper.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "return", "self", ".", "optimizer", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.optim.MixedPrecisionWrapper.zero_grad": [[85, 87], ["optim.MixedPrecisionWrapper.optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.zero_grad"], ["", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.optim.MixedPrecisionWrapper.step": [[88, 111], ["zip", "zip", "optim.set_grad", "optim.MixedPrecisionWrapper.optimizer.step", "optim.MixedPrecisionWrapper.optimizer.step", "zip", "print", "p.data.copy_", "ValueError"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.optim.set_grad", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules_fastai.LRSchedulerStep.step", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules_fastai.LRSchedulerStep.step"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "for", "g", ",", "g_copy", "in", "zip", "(", "self", ".", "param_groups", ",", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "            ", "invalid", "=", "set_grad", "(", "g_copy", "[", "'params'", "]", ",", "g", "[", "'params'", "]", ",", "self", ".", "grad_scale", ")", "\n", "if", "invalid", ":", "\n", "                ", "if", "self", ".", "grad_scale", "is", "None", "or", "self", ".", "auto_scale", "is", "False", ":", "\n", "                    ", "raise", "ValueError", "(", "\"nan/inf detected but auto_scale disabled.\"", ")", "\n", "", "self", ".", "grad_scale", "*=", "self", ".", "dec_factor", "\n", "print", "(", "'scale decay to {}'", ".", "format", "(", "self", ".", "grad_scale", ")", ")", "\n", "return", "\n", "", "", "if", "self", ".", "auto_scale", "is", "True", ":", "\n", "            ", "self", ".", "stable_iter_count", "+=", "1", "\n", "if", "self", ".", "stable_iter_count", ">", "self", ".", "num_iters_be_stable", ":", "\n", "                ", "if", "self", ".", "grad_scale", "is", "not", "None", ":", "\n", "                    ", "self", ".", "grad_scale", "*=", "self", ".", "inc_factor", "\n", "", "self", ".", "stable_iter_count", "=", "0", "\n", "\n", "", "", "if", "closure", "is", "None", ":", "\n", "            ", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", ".", "step", "(", "closure", ")", "\n", "", "for", "g", ",", "g_copy", "in", "zip", "(", "self", ".", "param_groups", ",", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "            ", "for", "p_copy", ",", "p", "in", "zip", "(", "g_copy", "[", "'params'", "]", ",", "g", "[", "'params'", "]", ")", ":", "\n", "                ", "p", ".", "data", ".", "copy_", "(", "p_copy", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.optim.param_fp32_copy": [[10, 17], ["param.clone().type().detach", "param.clone().type", "param.clone"], "function", ["None"], ["def", "param_fp32_copy", "(", "params", ")", ":", "\n", "    ", "param_copy", "=", "[", "\n", "param", ".", "clone", "(", ")", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "detach", "(", ")", "for", "param", "in", "params", "\n", "]", "\n", "for", "param", "in", "param_copy", ":", "\n", "        ", "param", ".", "requires_grad", "=", "True", "\n", "", "return", "param_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.optim.set_grad": [[18, 30], ["zip", "param.grad.data.copy_", "torch.nn.Parameter", "torch.isnan().any", "torch.isinf().any", "param.data.new().resize_", "torch.isnan", "torch.isinf", "param.data.new", "param.data.size"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.new"], ["", "def", "set_grad", "(", "params", ",", "params_with_grad", ",", "scale", "=", "1.0", ")", ":", "\n", "    ", "for", "param", ",", "param_w_grad", "in", "zip", "(", "params", ",", "params_with_grad", ")", ":", "\n", "        ", "if", "param", ".", "grad", "is", "None", ":", "\n", "            ", "param", ".", "grad", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "param", ".", "data", ".", "new", "(", ")", ".", "resize_", "(", "*", "param", ".", "data", ".", "size", "(", ")", ")", ")", "\n", "", "grad", "=", "param_w_grad", ".", "grad", ".", "data", "\n", "if", "scale", "is", "not", "None", ":", "\n", "            ", "grad", "/=", "scale", "\n", "", "if", "torch", ".", "isnan", "(", "grad", ")", ".", "any", "(", ")", "or", "torch", ".", "isinf", "(", "grad", ")", ".", "any", "(", ")", ":", "\n", "            ", "return", "True", "# invalid grad", "\n", "", "param", ".", "grad", ".", "data", ".", "copy_", "(", "grad", ")", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint.DelayedKeyboardInterrupt.__enter__": [[11, 14], ["signal.signal"], "methods", ["None"], ["    ", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "signal_received", "=", "False", "\n", "self", ".", "old_handler", "=", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "self", ".", "handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint.DelayedKeyboardInterrupt.handler": [[15, 18], ["logging.debug"], "methods", ["None"], ["", "def", "handler", "(", "self", ",", "sig", ",", "frame", ")", ":", "\n", "        ", "self", ".", "signal_received", "=", "(", "sig", ",", "frame", ")", "\n", "logging", ".", "debug", "(", "'SIGINT received. Delaying KeyboardInterrupt.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint.DelayedKeyboardInterrupt.__exit__": [[19, 23], ["signal.signal", "checkpoint.DelayedKeyboardInterrupt.old_handler"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n", "        ", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "self", ".", "old_handler", ")", "\n", "if", "self", ".", "signal_received", ":", "\n", "            ", "self", ".", "old_handler", "(", "*", "self", ".", "signal_received", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint.latest_checkpoint": [[25, 47], ["str", "pathlib.Path", "ckpt_info_path.is_file", "open", "json.loads", "pathlib.Path", "ckpt_file_name.is_file", "f.read"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.loads"], ["", "", "", "def", "latest_checkpoint", "(", "model_dir", ",", "model_name", ")", ":", "\n", "    ", "\"\"\"return path of latest checkpoint in a model_dir\n    Args:\n        model_dir: string, indicate your model dir(save ckpts, summarys,\n            logs, etc).\n        model_name: name of your model. we find ckpts by name\n    Returns:\n        path: None if isn't exist or latest checkpoint path.\n    \"\"\"", "\n", "ckpt_info_path", "=", "Path", "(", "model_dir", ")", "/", "\"checkpoints.json\"", "\n", "if", "not", "ckpt_info_path", ".", "is_file", "(", ")", ":", "\n", "        ", "return", "None", "\n", "", "with", "open", "(", "ckpt_info_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "ckpt_dict", "=", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ")", "\n", "", "if", "model_name", "not", "in", "ckpt_dict", "[", "'latest_ckpt'", "]", ":", "\n", "        ", "return", "None", "\n", "", "latest_ckpt", "=", "ckpt_dict", "[", "'latest_ckpt'", "]", "[", "model_name", "]", "\n", "ckpt_file_name", "=", "Path", "(", "model_dir", ")", "/", "latest_ckpt", "\n", "if", "not", "ckpt_file_name", ".", "is_file", "(", ")", ":", "\n", "        ", "return", "None", "\n", "\n", "", "return", "str", "(", "ckpt_file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint._ordered_unique": [[48, 51], ["set", "set.add"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.set", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add"], ["", "def", "_ordered_unique", "(", "seq", ")", ":", "\n", "    ", "seen", "=", "set", "(", ")", "\n", "return", "[", "x", "for", "x", "in", "seq", "if", "not", "(", "x", "in", "seen", "or", "seen", ".", "add", "(", "x", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint.save": [[52, 112], ["checkpoint.DelayedKeyboardInterrupt", "torch.save", "checkpoint._ordered_unique", "pathlib.Path", "pathlib.Path", "ckpt_info_path.is_file", "[].append", "model.state_dict", "ckpt_path_uncheck.is_file", "len", "os.remove", "open", "f.write", "open", "json.loads", "pathlib.Path", "all_ckpts_checked.append", "all_ckpts.pop", "min", "all_ckpts.remove", "str", "json.dumps", "f.read", "str", "int", "pathlib.Path", "get_step", "pathlib.Path", "[].split", "name.split"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.Settings.save", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint._ordered_unique", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.optim.MixedPrecisionWrapper.state_dict", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.remove", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.loads", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.remove", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.dumps"], ["", "def", "save", "(", "model_dir", ",", "\n", "model", ",", "\n", "model_name", ",", "\n", "global_step", ",", "\n", "max_to_keep", "=", "8", ",", "\n", "keep_latest", "=", "True", ")", ":", "\n", "    ", "\"\"\"save a model into model_dir.\n    Args:\n        model_dir: string, indicate your model dir(save ckpts, summarys,\n            logs, etc).\n        model: torch.nn.Module instance.\n        model_name: name of your model. we find ckpts by name\n        global_step: int, indicate current global step.\n        max_to_keep: int, maximum checkpoints to keep.\n        keep_latest: bool, if True and there are too much ckpts,\n            will delete oldest ckpt. else will delete ckpt which has\n            smallest global step.\n    Returns:\n        path: None if isn't exist or latest checkpoint path.\n    \"\"\"", "\n", "\n", "# prevent save incomplete checkpoint due to key interrupt", "\n", "with", "DelayedKeyboardInterrupt", "(", ")", ":", "\n", "        ", "ckpt_info_path", "=", "Path", "(", "model_dir", ")", "/", "\"checkpoints.json\"", "\n", "ckpt_filename", "=", "\"{}-{}.tckpt\"", ".", "format", "(", "model_name", ",", "global_step", ")", "\n", "ckpt_path", "=", "Path", "(", "model_dir", ")", "/", "ckpt_filename", "\n", "if", "not", "ckpt_info_path", ".", "is_file", "(", ")", ":", "\n", "            ", "ckpt_info_dict", "=", "{", "'latest_ckpt'", ":", "{", "}", ",", "'all_ckpts'", ":", "{", "}", "}", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "ckpt_info_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "ckpt_info_dict", "=", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ")", "\n", "", "", "ckpt_info_dict", "[", "'latest_ckpt'", "]", "[", "model_name", "]", "=", "ckpt_filename", "\n", "if", "model_name", "in", "ckpt_info_dict", "[", "'all_ckpts'", "]", ":", "\n", "            ", "ckpt_info_dict", "[", "'all_ckpts'", "]", "[", "model_name", "]", ".", "append", "(", "ckpt_filename", ")", "\n", "", "else", ":", "\n", "            ", "ckpt_info_dict", "[", "'all_ckpts'", "]", "[", "model_name", "]", "=", "[", "ckpt_filename", "]", "\n", "", "all_ckpts", "=", "ckpt_info_dict", "[", "'all_ckpts'", "]", "[", "model_name", "]", "\n", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_path", ")", "\n", "# check ckpt in all_ckpts is exist, if not, delete it from all_ckpts", "\n", "all_ckpts_checked", "=", "[", "]", "\n", "for", "ckpt", "in", "all_ckpts", ":", "\n", "            ", "ckpt_path_uncheck", "=", "Path", "(", "model_dir", ")", "/", "ckpt", "\n", "if", "ckpt_path_uncheck", ".", "is_file", "(", ")", ":", "\n", "                ", "all_ckpts_checked", ".", "append", "(", "str", "(", "ckpt_path_uncheck", ")", ")", "\n", "", "", "all_ckpts", "=", "all_ckpts_checked", "\n", "if", "len", "(", "all_ckpts", ")", ">", "max_to_keep", ":", "\n", "            ", "if", "keep_latest", ":", "\n", "                ", "ckpt_to_delete", "=", "all_ckpts", ".", "pop", "(", "0", ")", "\n", "", "else", ":", "\n", "# delete smallest step", "\n", "                ", "get_step", "=", "lambda", "name", ":", "int", "(", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "min_step", "=", "min", "(", "[", "get_step", "(", "name", ")", "for", "name", "in", "all_ckpts", "]", ")", "\n", "ckpt_to_delete", "=", "\"{}-{}.tckpt\"", ".", "format", "(", "model_name", ",", "min_step", ")", "\n", "all_ckpts", ".", "remove", "(", "ckpt_to_delete", ")", "\n", "", "os", ".", "remove", "(", "str", "(", "Path", "(", "model_dir", ")", "/", "ckpt_to_delete", ")", ")", "\n", "", "all_ckpts_filename", "=", "_ordered_unique", "(", "[", "Path", "(", "f", ")", ".", "name", "for", "f", "in", "all_ckpts", "]", ")", "\n", "ckpt_info_dict", "[", "'all_ckpts'", "]", "[", "model_name", "]", "=", "all_ckpts_filename", "\n", "with", "open", "(", "ckpt_info_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "ckpt_info_dict", ",", "indent", "=", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint.restore": [[114, 119], ["model.load_state_dict", "print", "pathlib.Path().is_file", "ValueError", "torch.load", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.optim.MixedPrecisionWrapper.load_state_dict", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.Settings.load"], ["", "", "", "def", "restore", "(", "ckpt_path", ",", "model", ")", ":", "\n", "    ", "if", "not", "Path", "(", "ckpt_path", ")", ".", "is_file", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"checkpoint {} not exist.\"", ".", "format", "(", "ckpt_path", ")", ")", "\n", "", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "ckpt_path", ")", ")", "\n", "print", "(", "\"Restoring parameters from {}\"", ".", "format", "(", "ckpt_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint._check_model_names": [[121, 130], ["model_names.append", "len", "len", "ValueError", "hasattr", "ValueError", "set"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.set"], ["", "def", "_check_model_names", "(", "models", ")", ":", "\n", "    ", "model_names", "=", "[", "]", "\n", "for", "model", "in", "models", ":", "\n", "        ", "if", "not", "hasattr", "(", "model", ",", "\"name\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"models must have name attr\"", ")", "\n", "", "model_names", ".", "append", "(", "model", ".", "name", ")", "\n", "", "if", "len", "(", "model_names", ")", "!=", "len", "(", "set", "(", "model_names", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"models must have unique name: {}\"", ".", "format", "(", "\n", "\", \"", ".", "join", "(", "model_names", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint._get_name_to_model_map": [[132, 139], ["isinstance", "checkpoint._check_model_names", "models.items"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint._check_model_names"], ["", "", "def", "_get_name_to_model_map", "(", "models", ")", ":", "\n", "    ", "if", "isinstance", "(", "models", ",", "dict", ")", ":", "\n", "        ", "name_to_model", "=", "{", "name", ":", "m", "for", "name", ",", "m", "in", "models", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "        ", "_check_model_names", "(", "models", ")", "\n", "name_to_model", "=", "{", "m", ".", "name", ":", "m", "for", "m", "in", "models", "}", "\n", "", "return", "name_to_model", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint.try_restore_latest_checkpoints": [[141, 147], ["checkpoint._get_name_to_model_map", "_get_name_to_model_map.items", "checkpoint.latest_checkpoint", "checkpoint.restore"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint._get_name_to_model_map", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint.latest_checkpoint", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.restore"], ["", "def", "try_restore_latest_checkpoints", "(", "model_dir", ",", "models", ")", ":", "\n", "    ", "name_to_model", "=", "_get_name_to_model_map", "(", "models", ")", "\n", "for", "name", ",", "model", "in", "name_to_model", ".", "items", "(", ")", ":", "\n", "        ", "latest_ckpt", "=", "latest_checkpoint", "(", "model_dir", ",", "name", ")", "\n", "if", "latest_ckpt", "is", "not", "None", ":", "\n", "            ", "restore", "(", "latest_ckpt", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint.restore_latest_checkpoints": [[148, 156], ["checkpoint._get_name_to_model_map", "_get_name_to_model_map.items", "checkpoint.latest_checkpoint", "checkpoint.restore", "ValueError"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint._get_name_to_model_map", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint.latest_checkpoint", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.restore"], ["", "", "", "def", "restore_latest_checkpoints", "(", "model_dir", ",", "models", ")", ":", "\n", "    ", "name_to_model", "=", "_get_name_to_model_map", "(", "models", ")", "\n", "for", "name", ",", "model", "in", "name_to_model", ".", "items", "(", ")", ":", "\n", "        ", "latest_ckpt", "=", "latest_checkpoint", "(", "model_dir", ",", "name", ")", "\n", "if", "latest_ckpt", "is", "not", "None", ":", "\n", "            ", "restore", "(", "latest_ckpt", ",", "model", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"model {}\\'s ckpt isn't exist\"", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint.restore_models": [[157, 163], ["checkpoint._get_name_to_model_map", "_get_name_to_model_map.items", "checkpoint.restore"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint._get_name_to_model_map", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.restore"], ["", "", "", "def", "restore_models", "(", "model_dir", ",", "models", ",", "global_step", ")", ":", "\n", "    ", "name_to_model", "=", "_get_name_to_model_map", "(", "models", ")", "\n", "for", "name", ",", "model", "in", "name_to_model", ".", "items", "(", ")", ":", "\n", "        ", "ckpt_filename", "=", "\"{}-{}.tckpt\"", ".", "format", "(", "name", ",", "global_step", ")", "\n", "ckpt_path", "=", "model_dir", "+", "\"/\"", "+", "ckpt_filename", "\n", "restore", "(", "ckpt_path", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint.save_models": [[165, 174], ["checkpoint.DelayedKeyboardInterrupt", "checkpoint._get_name_to_model_map", "_get_name_to_model_map.items", "checkpoint.save"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint._get_name_to_model_map", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.Settings.save"], ["", "", "def", "save_models", "(", "model_dir", ",", "\n", "models", ",", "\n", "global_step", ",", "\n", "max_to_keep", "=", "1000", ",", "\n", "keep_latest", "=", "True", ")", ":", "\n", "    ", "with", "DelayedKeyboardInterrupt", "(", ")", ":", "\n", "        ", "name_to_model", "=", "_get_name_to_model_map", "(", "models", ")", "\n", "for", "name", ",", "model", "in", "name_to_model", ".", "items", "(", ")", ":", "\n", "            ", "save", "(", "model_dir", ",", "model", ",", "name", ",", "global_step", ",", "max_to_keep", ",", "keep_latest", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.__init__": [[91, 97], ["list", "fastai_optim.OptimWrapper.opt_keys.remove", "fastai_optim.OptimWrapper.read_defaults", "fastai_optim.OptimWrapper.opt.param_groups[].keys"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.remove", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.read_defaults"], ["def", "__init__", "(", "self", ",", "opt", ",", "wd", ",", "true_wd", ":", "bool", "=", "False", ",", "bn_wd", ":", "bool", "=", "True", ")", ":", "\n", "        ", "self", ".", "opt", ",", "self", ".", "true_wd", ",", "self", ".", "bn_wd", "=", "opt", ",", "true_wd", ",", "bn_wd", "\n", "self", ".", "opt_keys", "=", "list", "(", "self", ".", "opt", ".", "param_groups", "[", "0", "]", ".", "keys", "(", ")", ")", "\n", "self", ".", "opt_keys", ".", "remove", "(", "'params'", ")", "\n", "self", ".", "read_defaults", "(", ")", "\n", "self", ".", "wd", "=", "wd", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.create": [[98, 107], ["fastai_optim.split_bn_bias", "opt_func", "cls", "fastai_optim.listify", "fastai_optim.trainable_params"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.split_bn_bias", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.listify", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.trainable_params"], ["", "@", "classmethod", "\n", "def", "create", "(", "cls", ",", "opt_func", ",", "lr", ",", "\n", "layer_groups", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"Create an `optim.Optimizer` from `opt_func` with `lr`. Set lr on `layer_groups`.\"", "\n", "split_groups", "=", "split_bn_bias", "(", "layer_groups", ")", "\n", "opt", "=", "opt_func", "(", "[", "{", "'params'", ":", "trainable_params", "(", "l", ")", ",", "'lr'", ":", "0", "}", "for", "l", "in", "split_groups", "]", ")", "\n", "opt", "=", "cls", "(", "opt", ",", "**", "kwargs", ")", "\n", "opt", ".", "lr", ",", "opt", ".", "opt_func", "=", "listify", "(", "lr", ",", "layer_groups", ")", ",", "opt_func", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.new": [[108, 114], ["getattr", "fastai_optim.split_bn_bias", "getattr.", "fastai_optim.OptimWrapper.create", "fastai_optim.trainable_params"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.split_bn_bias", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.FastAIMixedOptim.create", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.trainable_params"], ["", "def", "new", "(", "self", ",", "layer_groups", ")", ":", "\n", "        ", "\"Create a new `OptimWrapper` from `self` with another `layer_groups` but the same hyper-parameters.\"", "\n", "opt_func", "=", "getattr", "(", "self", ",", "'opt_func'", ",", "self", ".", "opt", ".", "__class__", ")", "\n", "split_groups", "=", "split_bn_bias", "(", "layer_groups", ")", "\n", "opt", "=", "opt_func", "(", "[", "{", "'params'", ":", "trainable_params", "(", "l", ")", ",", "'lr'", ":", "0", "}", "for", "l", "in", "split_groups", "]", ")", "\n", "return", "self", ".", "create", "(", "opt_func", ",", "self", ".", "lr", ",", "layer_groups", ",", "wd", "=", "self", ".", "wd", ",", "true_wd", "=", "self", ".", "true_wd", ",", "bn_wd", "=", "self", ".", "bn_wd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.__repr__": [[115, 117], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f'OptimWrapper over {repr(self.opt)}.\\nTrue weight decay: {self.true_wd}'", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.step": [[119, 129], ["fastai_optim.OptimWrapper.opt.step", "zip", "fastai_optim.OptimWrapper.set_val", "fastai_optim.listify", "p.data.mul_", "p.data.mul_"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules_fastai.LRSchedulerStep.step", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.listify"], ["", "def", "step", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"Set weight decay and step optimizer.\"", "\n", "# weight decay outside of optimizer step (AdamW)", "\n", "if", "self", ".", "true_wd", ":", "\n", "            ", "for", "lr", ",", "wd", ",", "pg1", ",", "pg2", "in", "zip", "(", "self", ".", "_lr", ",", "self", ".", "_wd", ",", "self", ".", "opt", ".", "param_groups", "[", ":", ":", "2", "]", ",", "self", ".", "opt", ".", "param_groups", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "                ", "for", "p", "in", "pg1", "[", "'params'", "]", ":", "p", ".", "data", ".", "mul_", "(", "1", "-", "wd", "*", "lr", ")", "\n", "if", "self", ".", "bn_wd", ":", "\n", "                    ", "for", "p", "in", "pg2", "[", "'params'", "]", ":", "p", ".", "data", ".", "mul_", "(", "1", "-", "wd", "*", "lr", ")", "\n", "", "", "self", ".", "set_val", "(", "'weight_decay'", ",", "listify", "(", "0", ",", "self", ".", "_wd", ")", ")", "\n", "", "self", ".", "opt", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.zero_grad": [[130, 133], ["fastai_optim.OptimWrapper.opt.zero_grad"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.zero_grad"], ["", "def", "zero_grad", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"Clear optimizer gradients.\"", "\n", "self", ".", "opt", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.__getattr__": [[135, 136], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "k", ":", "str", ")", ":", "return", "getattr", "(", "self", ".", "opt", ",", "k", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.clear": [[137, 142], ["fastai_optim.OptimWrapper.state_dict", "fastai_optim.OptimWrapper.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.optim.MixedPrecisionWrapper.state_dict", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.optim.MixedPrecisionWrapper.load_state_dict"], ["def", "clear", "(", "self", ")", ":", "\n", "        ", "\"Reset the state of the inner optimizer.\"", "\n", "sd", "=", "self", ".", "state_dict", "(", ")", "\n", "sd", "[", "'state'", "]", "=", "{", "}", "\n", "self", ".", "load_state_dict", "(", "sd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.lr": [[146, 149], ["fastai_optim.OptimWrapper.set_val", "fastai_optim.listify"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.listify"], ["@", "lr", ".", "setter", "\n", "def", "lr", "(", "self", ",", "val", ":", "float", ")", "->", "None", ":", "\n", "        ", "self", ".", "_lr", "=", "self", ".", "set_val", "(", "'lr'", ",", "listify", "(", "val", ",", "self", ".", "_lr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.mom": [[152, 157], ["fastai_optim.listify", "fastai_optim.OptimWrapper.set_val", "fastai_optim.listify", "fastai_optim.OptimWrapper.set_val", "fastai_optim.listify"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.listify", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.listify", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.listify"], ["@", "mom", ".", "setter", "\n", "def", "mom", "(", "self", ",", "val", ":", "float", ")", "->", "None", ":", "\n", "        ", "if", "'momentum'", "in", "self", ".", "opt_keys", ":", "self", ".", "set_val", "(", "'momentum'", ",", "listify", "(", "val", ",", "self", ".", "_mom", ")", ")", "\n", "elif", "'betas'", "in", "self", ".", "opt_keys", ":", "self", ".", "set_val", "(", "'betas'", ",", "(", "listify", "(", "val", ",", "self", ".", "_mom", ")", ",", "self", ".", "_beta", ")", ")", "\n", "self", ".", "_mom", "=", "listify", "(", "val", ",", "self", ".", "_mom", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.beta": [[160, 167], ["fastai_optim.listify", "fastai_optim.OptimWrapper.set_val", "fastai_optim.OptimWrapper.set_val", "fastai_optim.listify", "fastai_optim.listify"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.listify", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.listify", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.listify"], ["@", "beta", ".", "setter", "\n", "def", "beta", "(", "self", ",", "val", ":", "float", ")", "->", "None", ":", "\n", "        ", "\"Set beta (or alpha as makes sense for given optimizer).\"", "\n", "if", "val", "is", "None", ":", "return", "\n", "if", "'betas'", "in", "self", ".", "opt_keys", ":", "self", ".", "set_val", "(", "'betas'", ",", "(", "self", ".", "_mom", ",", "listify", "(", "val", ",", "self", ".", "_beta", ")", ")", ")", "\n", "elif", "'alpha'", "in", "self", ".", "opt_keys", ":", "self", ".", "set_val", "(", "'alpha'", ",", "listify", "(", "val", ",", "self", ".", "_beta", ")", ")", "\n", "self", ".", "_beta", "=", "listify", "(", "val", ",", "self", ".", "_beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.wd": [[170, 175], ["fastai_optim.listify", "fastai_optim.OptimWrapper.set_val", "fastai_optim.listify"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.listify", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.listify"], ["@", "wd", ".", "setter", "\n", "def", "wd", "(", "self", ",", "val", ":", "float", ")", "->", "None", ":", "\n", "        ", "\"Set weight decay.\"", "\n", "if", "not", "self", ".", "true_wd", ":", "self", ".", "set_val", "(", "'weight_decay'", ",", "listify", "(", "val", ",", "self", ".", "_wd", ")", ",", "bn_groups", "=", "self", ".", "bn_wd", ")", "\n", "self", ".", "_wd", "=", "listify", "(", "val", ",", "self", ".", "_wd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.read_defaults": [[177, 185], ["fastai_optim.OptimWrapper.read_val", "fastai_optim.OptimWrapper.read_val", "fastai_optim.OptimWrapper.read_val", "fastai_optim.OptimWrapper.read_val", "fastai_optim.OptimWrapper.read_val"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.read_val", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.read_val", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.read_val", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.read_val", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.read_val"], ["", "def", "read_defaults", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"Read the values inside the optimizer for the hyper-parameters.\"", "\n", "self", ".", "_beta", "=", "None", "\n", "if", "'lr'", "in", "self", ".", "opt_keys", ":", "self", ".", "_lr", "=", "self", ".", "read_val", "(", "'lr'", ")", "\n", "if", "'momentum'", "in", "self", ".", "opt_keys", ":", "self", ".", "_mom", "=", "self", ".", "read_val", "(", "'momentum'", ")", "\n", "if", "'alpha'", "in", "self", ".", "opt_keys", ":", "self", ".", "_beta", "=", "self", ".", "read_val", "(", "'alpha'", ")", "\n", "if", "'betas'", "in", "self", ".", "opt_keys", ":", "self", ".", "_mom", ",", "self", ".", "_beta", "=", "self", ".", "read_val", "(", "'betas'", ")", "\n", "if", "'weight_decay'", "in", "self", ".", "opt_keys", ":", "self", ".", "_wd", "=", "self", ".", "read_val", "(", "'weight_decay'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.set_val": [[186, 193], ["fastai_optim.is_tuple", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.is_tuple"], ["", "def", "set_val", "(", "self", ",", "key", ":", "str", ",", "val", ",", "bn_groups", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"Set `val` inside the optimizer dictionary at `key`.\"", "\n", "if", "is_tuple", "(", "val", ")", ":", "val", "=", "[", "(", "v1", ",", "v2", ")", "for", "v1", ",", "v2", "in", "zip", "(", "*", "val", ")", "]", "\n", "for", "v", ",", "pg1", ",", "pg2", "in", "zip", "(", "val", ",", "self", ".", "opt", ".", "param_groups", "[", ":", ":", "2", "]", ",", "self", ".", "opt", ".", "param_groups", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "            ", "pg1", "[", "key", "]", "=", "v", "\n", "if", "bn_groups", ":", "pg2", "[", "key", "]", "=", "v", "\n", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.read_val": [[194, 199], ["fastai_optim.is_tuple"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.is_tuple"], ["", "def", "read_val", "(", "self", ",", "key", ":", "str", ")", ":", "\n", "        ", "\"Read a hyperparameter `key` in the optimizer dictionary.\"", "\n", "val", "=", "[", "pg", "[", "key", "]", "for", "pg", "in", "self", ".", "opt", ".", "param_groups", "[", ":", ":", "2", "]", "]", "\n", "if", "is_tuple", "(", "val", "[", "0", "]", ")", ":", "val", "=", "[", "o", "[", "0", "]", "for", "o", "in", "val", "]", ",", "[", "o", "[", "1", "]", "for", "o", "in", "val", "]", "\n", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.FastAIMixedOptim.create": [[202, 219], ["fastai_optim.OptimWrapper.create", "fastai_optim.get_master", "opt_func", "range", "zip"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.FastAIMixedOptim.create", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.get_master"], ["    ", "@", "classmethod", "\n", "def", "create", "(", "cls", ",", "opt_func", ",", "lr", ",", "\n", "layer_groups", ",", "model", ",", "flat_master", "=", "False", ",", "loss_scale", "=", "512.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"Create an `optim.Optimizer` from `opt_func` with `lr`. Set lr on `layer_groups`.\"", "\n", "opt", "=", "OptimWrapper", ".", "create", "(", "opt_func", ",", "lr", ",", "layer_groups", ",", "**", "kwargs", ")", "\n", "opt", ".", "model_params", ",", "opt", ".", "master_params", "=", "get_master", "(", "layer_groups", ",", "flat_master", ")", "\n", "opt", ".", "flat_master", "=", "flat_master", "\n", "opt", ".", "loss_scale", "=", "loss_scale", "\n", "opt", ".", "model", "=", "model", "\n", "#Changes the optimizer so that the optimization step is done in FP32.", "\n", "# opt = self.learn.opt", "\n", "mom", ",", "wd", ",", "beta", "=", "opt", ".", "mom", ",", "opt", ".", "wd", ",", "opt", ".", "beta", "\n", "lrs", "=", "[", "lr", "for", "lr", "in", "opt", ".", "_lr", "for", "_", "in", "range", "(", "2", ")", "]", "\n", "opt_params", "=", "[", "{", "'params'", ":", "mp", ",", "'lr'", ":", "lr", "}", "for", "mp", ",", "lr", "in", "zip", "(", "opt", ".", "master_params", ",", "lrs", ")", "]", "\n", "opt", ".", "opt", "=", "opt_func", "(", "opt_params", ")", "\n", "opt", ".", "mom", ",", "opt", ".", "wd", ",", "opt", ".", "beta", "=", "mom", ",", "wd", ",", "beta", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.FastAIMixedOptim.step": [[220, 228], ["fastai_optim.model_g2master_g", "fastai_optim.OptimWrapper.step", "fastai_optim.FastAIMixedOptim.model.zero_grad", "fastai_optim.master2model", "param.grad.div_"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.model_g2master_g", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules_fastai.LRSchedulerStep.step", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.zero_grad", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.master2model"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "model_g2master_g", "(", "self", ".", "model_params", ",", "self", ".", "master_params", ",", "self", ".", "flat_master", ")", "\n", "for", "group", "in", "self", ".", "master_params", ":", "\n", "            ", "for", "param", "in", "group", ":", "param", ".", "grad", ".", "div_", "(", "self", ".", "loss_scale", ")", "\n", "", "super", "(", "FastAIMixedOptim", ",", "self", ")", ".", "step", "(", ")", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "#Update the params from master to model.", "\n", "master2model", "(", "self", ".", "model_params", ",", "self", ".", "master_params", ",", "self", ".", "flat_master", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.split_bn_bias": [[13, 23], ["l.children", "isinstance", "torch.nn.Sequential", "torch.nn.Sequential", "l2.append", "l1.append"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.optimizer_builder.children"], ["def", "split_bn_bias", "(", "layer_groups", ")", ":", "\n", "    ", "\"Split the layers in `layer_groups` into batchnorm (`bn_types`) and non-batchnorm groups.\"", "\n", "split_groups", "=", "[", "]", "\n", "for", "l", "in", "layer_groups", ":", "\n", "        ", "l1", ",", "l2", "=", "[", "]", ",", "[", "]", "\n", "for", "c", "in", "l", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "c", ",", "bn_types", ")", ":", "l2", ".", "append", "(", "c", ")", "\n", "else", ":", "l1", ".", "append", "(", "c", ")", "\n", "", "split_groups", "+=", "[", "nn", ".", "Sequential", "(", "*", "l1", ")", ",", "nn", ".", "Sequential", "(", "*", "l2", ")", "]", "\n", "", "return", "split_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.get_master": [[25, 44], ["fastai_optim.split_bn_bias", "lg.parameters", "len", "torch.nn.utils.parameters_to_vector", "torch.nn.Parameter", "master_params.append", "master_params.append", "param.clone().float().detach", "torch.nn.Parameter.new", "param.data.float", "param.clone().float", "torch.nn.Parameter.size", "param.clone"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.split_bn_bias", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.new"], ["", "def", "get_master", "(", "layer_groups", ",", "flat_master", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"Return two lists, one for the model parameters in FP16 and one for the master parameters in FP32.\"", "\n", "split_groups", "=", "split_bn_bias", "(", "layer_groups", ")", "\n", "model_params", "=", "[", "[", "param", "for", "param", "in", "lg", ".", "parameters", "(", ")", "if", "param", ".", "requires_grad", "]", "for", "lg", "in", "split_groups", "]", "\n", "if", "flat_master", ":", "\n", "        ", "master_params", "=", "[", "]", "\n", "for", "lg", "in", "model_params", ":", "\n", "            ", "if", "len", "(", "lg", ")", "!=", "0", ":", "\n", "                ", "mp", "=", "parameters_to_vector", "(", "[", "param", ".", "data", ".", "float", "(", ")", "for", "param", "in", "lg", "]", ")", "\n", "mp", "=", "torch", ".", "nn", ".", "Parameter", "(", "mp", ",", "requires_grad", "=", "True", ")", "\n", "if", "mp", ".", "grad", "is", "None", ":", "mp", ".", "grad", "=", "mp", ".", "new", "(", "*", "mp", ".", "size", "(", ")", ")", "\n", "master_params", ".", "append", "(", "[", "mp", "]", ")", "\n", "", "else", ":", "master_params", ".", "append", "(", "[", "]", ")", "\n", "", "return", "model_params", ",", "master_params", "\n", "", "else", ":", "\n", "        ", "master_params", "=", "[", "[", "param", ".", "clone", "(", ")", ".", "float", "(", ")", ".", "detach", "(", ")", "for", "param", "in", "lg", "]", "for", "lg", "in", "model_params", "]", "\n", "for", "mp", "in", "master_params", ":", "\n", "            ", "for", "param", "in", "mp", ":", "param", ".", "requires_grad", "=", "True", "\n", "", "return", "model_params", ",", "master_params", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.model_g2master_g": [[45, 58], ["zip", "zip", "zip", "len", "master_group[].grad.data.copy_", "torch.nn.utils.parameters_to_vector", "master.grad.data.copy_", "master.data.new", "p.grad.data.float", "master.data.size"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.new"], ["", "", "def", "model_g2master_g", "(", "model_params", ",", "master_params", ",", "flat_master", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "    ", "\"Copy the `model_params` gradients to `master_params` for the optimizer step.\"", "\n", "if", "flat_master", ":", "\n", "        ", "for", "model_group", ",", "master_group", "in", "zip", "(", "model_params", ",", "master_params", ")", ":", "\n", "            ", "if", "len", "(", "master_group", ")", "!=", "0", ":", "\n", "                ", "master_group", "[", "0", "]", ".", "grad", ".", "data", ".", "copy_", "(", "parameters_to_vector", "(", "[", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "for", "p", "in", "model_group", "]", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "for", "model_group", ",", "master_group", "in", "zip", "(", "model_params", ",", "master_params", ")", ":", "\n", "            ", "for", "model", ",", "master", "in", "zip", "(", "model_group", ",", "master_group", ")", ":", "\n", "                ", "if", "model", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "if", "master", ".", "grad", "is", "None", ":", "master", ".", "grad", "=", "master", ".", "data", ".", "new", "(", "*", "master", ".", "data", ".", "size", "(", ")", ")", "\n", "master", ".", "grad", ".", "data", ".", "copy_", "(", "model", ".", "grad", ".", "data", ")", "\n", "", "else", ":", "master", ".", "grad", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.master2model": [[59, 69], ["zip", "zip", "zip", "len", "zip", "model.data.copy_", "torch._utils._unflatten_dense_tensors", "model.data.copy_"], "function", ["None"], ["", "", "", "", "def", "master2model", "(", "model_params", ",", "master_params", ",", "flat_master", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "    ", "\"Copy `master_params` to `model_params`.\"", "\n", "if", "flat_master", ":", "\n", "        ", "for", "model_group", ",", "master_group", "in", "zip", "(", "model_params", ",", "master_params", ")", ":", "\n", "            ", "if", "len", "(", "model_group", ")", "!=", "0", ":", "\n", "                ", "for", "model", ",", "master", "in", "zip", "(", "model_group", ",", "_unflatten_dense_tensors", "(", "master_group", "[", "0", "]", ".", "data", ",", "model_group", ")", ")", ":", "\n", "                    ", "model", ".", "data", ".", "copy_", "(", "master", ")", "\n", "", "", "", "", "else", ":", "\n", "        ", "for", "model_group", ",", "master_group", "in", "zip", "(", "model_params", ",", "master_params", ")", ":", "\n", "            ", "for", "model", ",", "master", "in", "zip", "(", "model_group", ",", "master_group", ")", ":", "model", ".", "data", ".", "copy_", "(", "master", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.listify": [[70, 79], ["list", "isinstance", "len", "len", "type", "len", "len", "len", "isinstance"], "function", ["None"], ["", "", "", "def", "listify", "(", "p", "=", "None", ",", "q", "=", "None", ")", ":", "\n", "    ", "\"Make `p` listy and the same length as `q`.\"", "\n", "if", "p", "is", "None", ":", "p", "=", "[", "]", "\n", "elif", "isinstance", "(", "p", ",", "str", ")", ":", "p", "=", "[", "p", "]", "\n", "elif", "not", "isinstance", "(", "p", ",", "Iterable", ")", ":", "p", "=", "[", "p", "]", "\n", "n", "=", "q", "if", "type", "(", "q", ")", "==", "int", "else", "len", "(", "p", ")", "if", "q", "is", "None", "else", "len", "(", "q", ")", "\n", "if", "len", "(", "p", ")", "==", "1", ":", "p", "=", "p", "*", "n", "\n", "assert", "len", "(", "p", ")", "==", "n", ",", "f'List len mismatch ({len(p)} vs {n})'", "\n", "return", "list", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.trainable_params": [[81, 85], ["filter", "m.parameters"], "function", ["None"], ["", "def", "trainable_params", "(", "m", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "\"Return list of trainable params in `m`.\"", "\n", "res", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "m", ".", "parameters", "(", ")", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.is_tuple": [[86, 87], ["isinstance"], "function", ["None"], ["", "def", "is_tuple", "(", "x", ")", "->", "bool", ":", "return", "isinstance", "(", "x", ",", "tuple", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules_fastai.LRSchedulerStep.__init__": [[9, 39], ["enumerate", "enumerate", "isinstance", "isinstance", "len", "eval", "learning_schedules_fastai.LRSchedulerStep.lr_phases.append", "learning_schedules_fastai.LRSchedulerStep.lr_phases.append", "len", "eval", "learning_schedules_fastai.LRSchedulerStep.mom_phases.append", "learning_schedules_fastai.LRSchedulerStep.mom_phases.append", "len", "len", "int", "int", "int", "int", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fai_optimizer", ":", "OptimWrapper", ",", "total_step", ",", "lr_phases", ",", "\n", "mom_phases", ")", ":", "\n", "# if not isinstance(fai_optimizer, OptimWrapper):", "\n", "#     raise TypeError('{} is not a fastai OptimWrapper'.format(", "\n", "#         type(fai_optimizer).__name__))", "\n", "        ", "self", ".", "optimizer", "=", "fai_optimizer", "\n", "self", ".", "total_step", "=", "total_step", "\n", "self", ".", "lr_phases", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "start", ",", "lambda_func", ")", "in", "enumerate", "(", "lr_phases", ")", ":", "\n", "            ", "if", "len", "(", "self", ".", "lr_phases", ")", "!=", "0", ":", "\n", "                ", "assert", "self", ".", "lr_phases", "[", "-", "1", "]", "[", "0", "]", "<", "start", "\n", "", "if", "isinstance", "(", "lambda_func", ",", "str", ")", ":", "\n", "                ", "lambda_func", "=", "eval", "(", "lambda_func", ")", "\n", "", "if", "i", "<", "len", "(", "lr_phases", ")", "-", "1", ":", "\n", "                ", "self", ".", "lr_phases", ".", "append", "(", "(", "int", "(", "start", "*", "total_step", ")", ",", "int", "(", "lr_phases", "[", "i", "+", "1", "]", "[", "0", "]", "*", "total_step", ")", ",", "lambda_func", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "lr_phases", ".", "append", "(", "(", "int", "(", "start", "*", "total_step", ")", ",", "total_step", ",", "lambda_func", ")", ")", "\n", "", "", "assert", "self", ".", "lr_phases", "[", "0", "]", "[", "0", "]", "==", "0", "\n", "self", ".", "mom_phases", "=", "[", "]", "\n", "for", "i", ",", "(", "start", ",", "lambda_func", ")", "in", "enumerate", "(", "mom_phases", ")", ":", "\n", "            ", "if", "len", "(", "self", ".", "mom_phases", ")", "!=", "0", ":", "\n", "                ", "assert", "self", ".", "mom_phases", "[", "-", "1", "]", "[", "0", "]", "<", "start", "\n", "", "if", "isinstance", "(", "lambda_func", ",", "str", ")", ":", "\n", "                ", "lambda_func", "=", "eval", "(", "lambda_func", ")", "\n", "", "if", "i", "<", "len", "(", "mom_phases", ")", "-", "1", ":", "\n", "                ", "self", ".", "mom_phases", ".", "append", "(", "(", "int", "(", "start", "*", "total_step", ")", ",", "int", "(", "mom_phases", "[", "i", "+", "1", "]", "[", "0", "]", "*", "total_step", ")", ",", "lambda_func", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "mom_phases", ".", "append", "(", "(", "int", "(", "start", "*", "total_step", ")", ",", "total_step", ",", "lambda_func", ")", ")", "\n", "", "", "assert", "self", ".", "mom_phases", "[", "0", "]", "[", "0", "]", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules_fastai.LRSchedulerStep.step": [[40, 47], ["func", "func"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "step", ")", ":", "\n", "        ", "for", "start", ",", "end", ",", "func", "in", "self", ".", "lr_phases", ":", "\n", "            ", "if", "step", ">=", "start", ":", "\n", "                ", "self", ".", "optimizer", ".", "lr", "=", "func", "(", "(", "step", "-", "start", ")", "/", "(", "end", "-", "start", ")", ")", "\n", "", "", "for", "start", ",", "end", ",", "func", "in", "self", ".", "mom_phases", ":", "\n", "            ", "if", "step", ">=", "start", ":", "\n", "                ", "self", ".", "optimizer", ".", "mom", "=", "func", "(", "(", "step", "-", "start", ")", "/", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules_fastai.OneCycle.__init__": [[56, 73], ["int", "learning_schedules_fastai.LRSchedulerStep.__init__", "functools.partial", "functools.partial", "functools.partial", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fai_optimizer", ",", "total_step", ",", "lr_max", ",", "moms", ",", "div_factor", ",", "\n", "pct_start", ")", ":", "\n", "        ", "self", ".", "lr_max", "=", "lr_max", "\n", "self", ".", "moms", "=", "moms", "\n", "self", ".", "div_factor", "=", "div_factor", "\n", "self", ".", "pct_start", "=", "pct_start", "\n", "a1", "=", "int", "(", "total_step", "*", "self", ".", "pct_start", ")", "\n", "a2", "=", "total_step", "-", "a1", "\n", "low_lr", "=", "self", ".", "lr_max", "/", "self", ".", "div_factor", "\n", "lr_phases", "=", "(", "(", "0", ",", "partial", "(", "annealing_cos", ",", "low_lr", ",", "self", ".", "lr_max", ")", ")", ",", "\n", "(", "self", ".", "pct_start", ",", "\n", "partial", "(", "annealing_cos", ",", "self", ".", "lr_max", ",", "low_lr", "/", "1e4", ")", ")", ")", "\n", "mom_phases", "=", "(", "(", "0", ",", "partial", "(", "annealing_cos", ",", "*", "self", ".", "moms", ")", ")", ",", "\n", "(", "self", ".", "pct_start", ",", "partial", "(", "annealing_cos", ",", "\n", "*", "self", ".", "moms", "[", ":", ":", "-", "1", "]", ")", ")", ")", "\n", "fai_optimizer", ".", "lr", ",", "fai_optimizer", ".", "mom", "=", "low_lr", ",", "self", ".", "moms", "[", "0", "]", "\n", "super", "(", ")", ".", "__init__", "(", "fai_optimizer", ",", "total_step", ",", "lr_phases", ",", "mom_phases", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules_fastai.FakeOptim.__init__": [[75, 78], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "lr", "=", "0", "\n", "self", ".", "mom", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules_fastai.annealing_cos": [[49, 54], ["numpy.cos"], "function", ["None"], ["", "", "", "", "def", "annealing_cos", "(", "start", ",", "end", ",", "pct", ")", ":", "\n", "# print(pct, start, end)", "\n", "    ", "\"Cosine anneal from `start` to `end` as pct goes from 0.0 to 1.0.\"", "\n", "cos_out", "=", "np", ".", "cos", "(", "np", ".", "pi", "*", "pct", ")", "+", "1", "\n", "return", "end", "+", "(", "start", "-", "end", ")", "/", "2", "*", "cos_out", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data._read_imageset_file": [[15, 19], ["open", "f.readlines", "int"], "function", ["None"], ["def", "_read_imageset_file", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "return", "[", "int", "(", "line", ")", "for", "line", "in", "lines", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data._calculate_num_points_in_gt": [[21, 53], ["numpy.fromfile().reshape", "len", "numpy.concatenate", "second.core.box_np_ops.box_camera_to_lidar", "second.core.box_np_ops.points_in_rbbox", "box_np_ops.points_in_rbbox.sum", "numpy.concatenate", "np.concatenate.astype", "str", "second.core.box_np_ops.remove_outside_points", "len", "numpy.fromfile", "pathlib.Path", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box_camera_to_lidar", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.points_in_rbbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.remove_outside_points"], ["", "def", "_calculate_num_points_in_gt", "(", "data_path", ",", "infos", ",", "relative_path", ",", "remove_outside", "=", "True", ",", "num_features", "=", "4", ")", ":", "\n", "    ", "for", "info", "in", "infos", ":", "\n", "        ", "if", "relative_path", ":", "\n", "            ", "v_path", "=", "str", "(", "pathlib", ".", "Path", "(", "data_path", ")", "/", "info", "[", "\"velodyne_path\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "v_path", "=", "info", "[", "\"velodyne_path\"", "]", "\n", "", "points_v", "=", "np", ".", "fromfile", "(", "\n", "v_path", ",", "dtype", "=", "np", ".", "float32", ",", "count", "=", "-", "1", ")", ".", "reshape", "(", "[", "-", "1", ",", "num_features", "]", ")", "\n", "rect", "=", "info", "[", "'calib/R0_rect'", "]", "\n", "Trv2c", "=", "info", "[", "'calib/Tr_velo_to_cam'", "]", "\n", "P2", "=", "info", "[", "'calib/P2'", "]", "\n", "if", "remove_outside", ":", "\n", "            ", "points_v", "=", "box_np_ops", ".", "remove_outside_points", "(", "points_v", ",", "rect", ",", "Trv2c", ",", "P2", ",", "\n", "info", "[", "\"img_shape\"", "]", ")", "\n", "\n", "# points_v = points_v[points_v[:, 0] > 0]", "\n", "", "annos", "=", "info", "[", "'annos'", "]", "\n", "num_obj", "=", "len", "(", "[", "n", "for", "n", "in", "annos", "[", "'name'", "]", "if", "n", "!=", "'DontCare'", "]", ")", "\n", "# annos = kitti.filter_kitti_anno(annos, ['DontCare'])", "\n", "dims", "=", "annos", "[", "'dimensions'", "]", "[", ":", "num_obj", "]", "\n", "loc", "=", "annos", "[", "'location'", "]", "[", ":", "num_obj", "]", "\n", "rots", "=", "annos", "[", "'rotation_y'", "]", "[", ":", "num_obj", "]", "\n", "gt_boxes_camera", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "gt_boxes_lidar", "=", "box_np_ops", ".", "box_camera_to_lidar", "(", "\n", "gt_boxes_camera", ",", "rect", ",", "Trv2c", ")", "\n", "indices", "=", "box_np_ops", ".", "points_in_rbbox", "(", "points_v", "[", ":", ",", ":", "3", "]", ",", "gt_boxes_lidar", ")", "\n", "num_points_in_gt", "=", "indices", ".", "sum", "(", "0", ")", "\n", "num_ignored", "=", "len", "(", "annos", "[", "'dimensions'", "]", ")", "-", "num_obj", "\n", "num_points_in_gt", "=", "np", ".", "concatenate", "(", "\n", "[", "num_points_in_gt", ",", "-", "np", ".", "ones", "(", "[", "num_ignored", "]", ")", "]", ")", "\n", "annos", "[", "\"num_points_in_gt\"", "]", "=", "num_points_in_gt", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data.create_kitti_info_file": [[55, 110], ["create_data._read_imageset_file", "create_data._read_imageset_file", "create_data._read_imageset_file", "create_data._read_imageset_file", "print", "second.data.kitti_common.get_kitti_image_info", "create_data._calculate_num_points_in_gt", "print", "second.data.kitti_common.get_kitti_image_info", "create_data._calculate_num_points_in_gt", "print", "print", "second.data.kitti_common.get_kitti_image_info", "print", "pathlib.Path", "pathlib.Path", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data._read_imageset_file", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data._read_imageset_file", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data._read_imageset_file", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data._read_imageset_file", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_kitti_image_info", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data._calculate_num_points_in_gt", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_kitti_image_info", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data._calculate_num_points_in_gt", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_kitti_image_info"], ["", "", "def", "create_kitti_info_file", "(", "data_path", ",", "\n", "save_path", "=", "None", ",", "\n", "create_trainval", "=", "False", ",", "\n", "relative_path", "=", "True", ")", ":", "\n", "    ", "train_img_ids", "=", "_read_imageset_file", "(", "\"./data/ImageSets/train.txt\"", ")", "\n", "val_img_ids", "=", "_read_imageset_file", "(", "\"./data/ImageSets/val.txt\"", ")", "\n", "trainval_img_ids", "=", "_read_imageset_file", "(", "\"./data/ImageSets/trainval.txt\"", ")", "\n", "test_img_ids", "=", "_read_imageset_file", "(", "\"./data/ImageSets/test.txt\"", ")", "\n", "\n", "print", "(", "\"Generate info. this may take several minutes.\"", ")", "\n", "if", "save_path", "is", "None", ":", "\n", "        ", "save_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "\n", "", "else", ":", "\n", "        ", "save_path", "=", "pathlib", ".", "Path", "(", "save_path", ")", "\n", "", "kitti_infos_train", "=", "kitti", ".", "get_kitti_image_info", "(", "\n", "data_path", ",", "\n", "training", "=", "True", ",", "\n", "velodyne", "=", "True", ",", "\n", "calib", "=", "True", ",", "\n", "image_ids", "=", "train_img_ids", ",", "\n", "relative_path", "=", "relative_path", ")", "\n", "_calculate_num_points_in_gt", "(", "data_path", ",", "kitti_infos_train", ",", "relative_path", ")", "\n", "filename", "=", "save_path", "/", "'kitti_infos_train.pkl'", "\n", "print", "(", "f\"Kitti info train file is saved to {filename}\"", ")", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "kitti_infos_train", ",", "f", ")", "\n", "", "kitti_infos_val", "=", "kitti", ".", "get_kitti_image_info", "(", "\n", "data_path", ",", "\n", "training", "=", "True", ",", "\n", "velodyne", "=", "True", ",", "\n", "calib", "=", "True", ",", "\n", "image_ids", "=", "val_img_ids", ",", "\n", "relative_path", "=", "relative_path", ")", "\n", "_calculate_num_points_in_gt", "(", "data_path", ",", "kitti_infos_val", ",", "relative_path", ")", "\n", "filename", "=", "save_path", "/", "'kitti_infos_val.pkl'", "\n", "print", "(", "f\"Kitti info val file is saved to {filename}\"", ")", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "kitti_infos_val", ",", "f", ")", "\n", "", "filename", "=", "save_path", "/", "'kitti_infos_trainval.pkl'", "\n", "print", "(", "f\"Kitti info trainval file is saved to {filename}\"", ")", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "kitti_infos_train", "+", "kitti_infos_val", ",", "f", ")", "\n", "\n", "", "kitti_infos_test", "=", "kitti", ".", "get_kitti_image_info", "(", "\n", "data_path", ",", "\n", "training", "=", "False", ",", "\n", "label_info", "=", "False", ",", "\n", "velodyne", "=", "True", ",", "\n", "calib", "=", "True", ",", "\n", "image_ids", "=", "test_img_ids", ",", "\n", "relative_path", "=", "relative_path", ")", "\n", "filename", "=", "save_path", "/", "'kitti_infos_test.pkl'", "\n", "print", "(", "f\"Kitti info test file is saved to {filename}\"", ")", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "kitti_infos_test", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data.create_kitti_info_file_only_test": [[111, 134], ["create_data._read_imageset_file", "print", "second.data.kitti_common.get_kitti_image_info", "print", "pathlib.Path", "pathlib.Path", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data._read_imageset_file", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_kitti_image_info"], ["", "", "def", "create_kitti_info_file_only_test", "(", "data_path", ",", "\n", "save_path", "=", "None", ",", "\n", "create_trainval", "=", "False", ",", "\n", "relative_path", "=", "True", ")", ":", "\n", "    ", "test_img_ids", "=", "_read_imageset_file", "(", "\"./data/ImageSets/test.txt\"", ")", "\n", "\n", "print", "(", "\"Generate info. this may take several minutes.\"", ")", "\n", "if", "save_path", "is", "None", ":", "\n", "        ", "save_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "\n", "", "else", ":", "\n", "        ", "save_path", "=", "pathlib", ".", "Path", "(", "save_path", ")", "\n", "", "kitti_infos_test", "=", "kitti", ".", "get_kitti_image_info", "(", "\n", "data_path", ",", "\n", "training", "=", "False", ",", "\n", "label_info", "=", "False", ",", "\n", "velodyne", "=", "True", ",", "\n", "calib", "=", "True", ",", "\n", "image_ids", "=", "test_img_ids", ",", "\n", "relative_path", "=", "relative_path", ")", "\n", "filename", "=", "save_path", "/", "'kitti_infos_test.pkl'", "\n", "print", "(", "f\"Kitti info test file is saved to {filename}\"", ")", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "kitti_infos_test", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data._create_reduced_point_cloud": [[135, 169], ["second.utils.progress_bar.list_bar", "open", "pickle.load", "numpy.fromfile().reshape", "second.core.box_np_ops.remove_outside_points", "pathlib.Path", "str", "open", "box_np_ops.remove_outside_points.tofile", "numpy.fromfile", "str", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.Settings.load", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.remove_outside_points"], ["", "", "def", "_create_reduced_point_cloud", "(", "data_path", ",", "\n", "info_path", ",", "\n", "save_path", "=", "None", ",", "\n", "back", "=", "False", ")", ":", "\n", "    ", "with", "open", "(", "info_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "kitti_infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "for", "info", "in", "prog_bar", "(", "kitti_infos", ")", ":", "\n", "        ", "v_path", "=", "info", "[", "'velodyne_path'", "]", "\n", "v_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "/", "v_path", "\n", "points_v", "=", "np", ".", "fromfile", "(", "\n", "str", "(", "v_path", ")", ",", "dtype", "=", "np", ".", "float32", ",", "count", "=", "-", "1", ")", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "\n", "rect", "=", "info", "[", "'calib/R0_rect'", "]", "\n", "P2", "=", "info", "[", "'calib/P2'", "]", "\n", "Trv2c", "=", "info", "[", "'calib/Tr_velo_to_cam'", "]", "\n", "# first remove z < 0 points", "\n", "# keep = points_v[:, -1] > 0", "\n", "# points_v = points_v[keep]", "\n", "# then remove outside.", "\n", "if", "back", ":", "\n", "            ", "points_v", "[", ":", ",", "0", "]", "=", "-", "points_v", "[", ":", ",", "0", "]", "\n", "", "points_v", "=", "box_np_ops", ".", "remove_outside_points", "(", "points_v", ",", "rect", ",", "Trv2c", ",", "P2", ",", "\n", "info", "[", "\"img_shape\"", "]", ")", "\n", "\n", "if", "save_path", "is", "None", ":", "\n", "            ", "save_filename", "=", "v_path", ".", "parent", ".", "parent", "/", "(", "v_path", ".", "parent", ".", "stem", "+", "\"_reduced\"", ")", "/", "v_path", ".", "name", "\n", "# save_filename = str(v_path) + '_reduced'", "\n", "if", "back", ":", "\n", "                ", "save_filename", "+=", "\"_back\"", "\n", "", "", "else", ":", "\n", "            ", "save_filename", "=", "str", "(", "pathlib", ".", "Path", "(", "save_path", ")", "/", "v_path", ".", "name", ")", "\n", "if", "back", ":", "\n", "                ", "save_filename", "+=", "\"_back\"", "\n", "", "", "with", "open", "(", "save_filename", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "points_v", ".", "tofile", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data._create_noised_point_cloud": [[171, 213], ["second.utils.progress_bar.list_bar", "open", "pickle.load", "numpy.fromfile().reshape", "enumerate", "pathlib.Path", "random.uniform", "math.atan2", "math.atan2", "str", "open", "np.fromfile().reshape.tofile", "numpy.fromfile", "math.sqrt", "str", "math.sin", "math.sin", "math.cos", "pathlib.Path", "math.cos", "math.cos"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.Settings.load"], ["", "", "", "def", "_create_noised_point_cloud", "(", "data_path", ",", "\n", "info_path", ",", "\n", "save_path", "=", "None", ",", "\n", "back", "=", "False", ")", ":", "\n", "    ", "with", "open", "(", "info_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "kitti_infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "for", "info", "in", "prog_bar", "(", "kitti_infos", ")", ":", "\n", "        ", "v_path", "=", "info", "[", "'velodyne_path'", "]", "\n", "v_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "/", "v_path", "\n", "points_v", "=", "np", ".", "fromfile", "(", "\n", "str", "(", "v_path", ")", ",", "dtype", "=", "np", ".", "float32", ",", "count", "=", "-", "1", ")", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "\n", "#rect = info['calib/R0_rect']", "\n", "#P2 = info['calib/P2']", "\n", "#Trv2c = info['calib/Tr_velo_to_cam']", "\n", "# first remove z < 0 points", "\n", "# keep = points_v[:, -1] > 0", "\n", "# points_v = points_v[keep]", "\n", "# then remove outside.", "\n", "if", "back", ":", "\n", "            ", "points_v", "[", ":", ",", "0", "]", "=", "-", "points_v", "[", ":", ",", "0", "]", "\n", "#points_v = box_np_ops.remove_outside_points(points_v, rect, Trv2c, P2,", "\n", "#info[\"img_shape\"])", "\n", "", "for", "i", ",", "p", "in", "enumerate", "(", "points_v", "[", ":", ",", ":", "3", "]", ")", ":", "\n", "#print(i,p)", "\n", "            ", "noise", "=", "random", ".", "uniform", "(", "-", "0.05", ",", "0.05", ")", "\n", "alpha", "=", "atan2", "(", "p", "[", "2", "]", ",", "sqrt", "(", "p", "[", "0", "]", "**", "2", "+", "p", "[", "1", "]", "**", "2", ")", ")", "\n", "beta", "=", "atan2", "(", "p", "[", "1", "]", ",", "p", "[", "0", "]", ")", "\n", "p", "[", "2", "]", "=", "p", "[", "2", "]", "+", "noise", "*", "sin", "(", "alpha", ")", "\n", "p", "[", "1", "]", "=", "p", "[", "1", "]", "+", "noise", "*", "cos", "(", "alpha", ")", "*", "sin", "(", "beta", ")", "\n", "p", "[", "0", "]", "=", "p", "[", "0", "]", "+", "noise", "*", "cos", "(", "alpha", ")", "*", "cos", "(", "beta", ")", "\n", "points_v", "[", "i", ",", ":", "3", "]", "=", "p", "[", ":", "3", "]", "\n", "", "if", "save_path", "is", "None", ":", "\n", "            ", "save_filename", "=", "v_path", ".", "parent", ".", "parent", "/", "(", "v_path", ".", "parent", ".", "stem", "+", "\"_noised\"", ")", "/", "v_path", ".", "name", "\n", "# save_filename = str(v_path) + '_reduced'", "\n", "if", "back", ":", "\n", "                ", "save_filename", "+=", "\"_back\"", "\n", "", "", "else", ":", "\n", "            ", "save_filename", "=", "str", "(", "pathlib", ".", "Path", "(", "save_path", ")", "/", "v_path", ".", "name", ")", "\n", "if", "back", ":", "\n", "                ", "save_filename", "+=", "\"_back\"", "\n", "", "", "with", "open", "(", "save_filename", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "points_v", ".", "tofile", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data.create_noised_point_cloud": [[214, 236], ["create_data._create_noised_point_cloud", "create_data._create_noised_point_cloud", "create_data._create_noised_point_cloud", "create_data._create_noised_point_cloud", "pathlib.Path", "pathlib.Path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data._create_noised_point_cloud", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data._create_noised_point_cloud", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data._create_noised_point_cloud", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data._create_noised_point_cloud"], ["", "", "", "def", "create_noised_point_cloud", "(", "data_path", ",", "\n", "train_info_path", "=", "None", ",", "\n", "val_info_path", "=", "None", ",", "\n", "test_info_path", "=", "None", ",", "\n", "save_path", "=", "None", ",", "\n", "with_back", "=", "False", ")", ":", "\n", "    ", "if", "train_info_path", "is", "None", ":", "\n", "        ", "train_info_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "/", "'kitti_infos_train.pkl'", "\n", "", "if", "val_info_path", "is", "None", ":", "\n", "        ", "val_info_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "/", "'kitti_infos_val.pkl'", "\n", "", "if", "test_info_path", "is", "None", ":", "\n", "        ", "test_info_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "/", "'kitti_infos_test.pkl'", "\n", "\n", "", "_create_noised_point_cloud", "(", "data_path", ",", "train_info_path", ",", "save_path", ")", "\n", "_create_noised_point_cloud", "(", "data_path", ",", "val_info_path", ",", "save_path", ")", "\n", "#_create_noised_point_cloud(data_path, test_info_path, save_path)", "\n", "\n", "if", "with_back", ":", "\n", "        ", "_create_noised_point_cloud", "(", "\n", "data_path", ",", "train_info_path", ",", "save_path", ",", "back", "=", "True", ")", "\n", "_create_noised_point_cloud", "(", "\n", "data_path", ",", "val_info_path", ",", "save_path", ",", "back", "=", "True", ")", "\n", "#_create_noised_point_cloud(", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data.create_reduced_point_cloud": [[240, 263], ["create_data._create_reduced_point_cloud", "create_data._create_reduced_point_cloud", "create_data._create_reduced_point_cloud", "create_data._create_reduced_point_cloud", "create_data._create_reduced_point_cloud", "create_data._create_reduced_point_cloud", "pathlib.Path", "pathlib.Path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data._create_reduced_point_cloud", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data._create_reduced_point_cloud", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data._create_reduced_point_cloud", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data._create_reduced_point_cloud", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data._create_reduced_point_cloud", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data._create_reduced_point_cloud"], ["", "", "def", "create_reduced_point_cloud", "(", "data_path", ",", "\n", "train_info_path", "=", "None", ",", "\n", "val_info_path", "=", "None", ",", "\n", "test_info_path", "=", "None", ",", "\n", "save_path", "=", "None", ",", "\n", "with_back", "=", "False", ")", ":", "\n", "    ", "if", "train_info_path", "is", "None", ":", "\n", "        ", "train_info_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "/", "'kitti_infos_train.pkl'", "\n", "", "if", "val_info_path", "is", "None", ":", "\n", "        ", "val_info_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "/", "'kitti_infos_val.pkl'", "\n", "", "if", "test_info_path", "is", "None", ":", "\n", "        ", "test_info_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "/", "'kitti_infos_test.pkl'", "\n", "\n", "", "_create_reduced_point_cloud", "(", "data_path", ",", "train_info_path", ",", "save_path", ")", "\n", "_create_reduced_point_cloud", "(", "data_path", ",", "val_info_path", ",", "save_path", ")", "\n", "_create_reduced_point_cloud", "(", "data_path", ",", "test_info_path", ",", "save_path", ")", "\n", "if", "with_back", ":", "\n", "        ", "_create_reduced_point_cloud", "(", "\n", "data_path", ",", "train_info_path", ",", "save_path", ",", "back", "=", "True", ")", "\n", "_create_reduced_point_cloud", "(", "\n", "data_path", ",", "val_info_path", ",", "save_path", ",", "back", "=", "True", ")", "\n", "_create_reduced_point_cloud", "(", "\n", "data_path", ",", "test_info_path", ",", "save_path", ",", "back", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data.create_reduced_point_cloud_only_test": [[264, 272], ["create_data._create_reduced_point_cloud", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data._create_reduced_point_cloud"], ["", "", "def", "create_reduced_point_cloud_only_test", "(", "data_path", ",", "\n", "train_info_path", "=", "None", ",", "\n", "val_info_path", "=", "None", ",", "\n", "test_info_path", "=", "None", ",", "\n", "save_path", "=", "None", ",", "\n", "with_back", "=", "False", ")", ":", "\n", "    ", "test_info_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "/", "'kitti_infos_test.pkl'", "\n", "_create_reduced_point_cloud", "(", "data_path", ",", "test_info_path", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.second.create_data.create_groundtruth_database": [[274, 380], ["pathlib.Path", "pathlib.Path.mkdir", "second.utils.progress_bar.list_bar", "all_db_infos.items", "pathlib.Path", "open", "pickle.load", "list", "list.pop", "numpy.fromfile().reshape", "numpy.sum", "second.core.box_np_ops.box_camera_to_lidar", "numpy.full", "second.core.box_np_ops.points_in_rbbox", "range", "print", "open", "pickle.dump", "second.data.kitti_common.get_classes", "list.index", "str", "second.core.box_np_ops.remove_outside_points", "second.data.kitti_common.anno_to_rbboxes", "numpy.arange", "numpy.fromfile", "open", "gt_points.tofile", "all_db_infos[].append", "str", "str", "len"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.Settings.load", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box_camera_to_lidar", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.points_in_rbbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_classes", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.remove_outside_points", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.anno_to_rbboxes"], ["", "def", "create_groundtruth_database", "(", "data_path", ",", "\n", "info_path", "=", "None", ",", "\n", "used_classes", "=", "None", ",", "\n", "database_save_path", "=", "None", ",", "\n", "db_info_save_path", "=", "None", ",", "\n", "relative_path", "=", "True", ",", "\n", "lidar_only", "=", "False", ",", "\n", "bev_only", "=", "False", ",", "\n", "coors_range", "=", "None", ")", ":", "\n", "    ", "root_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "\n", "if", "info_path", "is", "None", ":", "\n", "        ", "info_path", "=", "root_path", "/", "'kitti_infos_train.pkl'", "\n", "", "if", "database_save_path", "is", "None", ":", "\n", "        ", "database_save_path", "=", "root_path", "/", "'gt_database'", "\n", "", "else", ":", "\n", "        ", "database_save_path", "=", "pathlib", ".", "Path", "(", "database_save_path", ")", "\n", "", "if", "db_info_save_path", "is", "None", ":", "\n", "        ", "db_info_save_path", "=", "root_path", "/", "\"kitti_dbinfos_train.pkl\"", "\n", "", "database_save_path", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "info_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "kitti_infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "all_db_infos", "=", "{", "}", "\n", "if", "used_classes", "is", "None", ":", "\n", "        ", "used_classes", "=", "list", "(", "kitti", ".", "get_classes", "(", ")", ")", "\n", "used_classes", ".", "pop", "(", "used_classes", ".", "index", "(", "'DontCare'", ")", ")", "\n", "", "for", "name", "in", "used_classes", ":", "\n", "        ", "all_db_infos", "[", "name", "]", "=", "[", "]", "\n", "", "group_counter", "=", "0", "\n", "for", "info", "in", "prog_bar", "(", "kitti_infos", ")", ":", "\n", "        ", "velodyne_path", "=", "info", "[", "'velodyne_path'", "]", "\n", "if", "relative_path", ":", "\n", "# velodyne_path = str(root_path / velodyne_path) + \"_reduced\"", "\n", "            ", "velodyne_path", "=", "str", "(", "root_path", "/", "velodyne_path", ")", "\n", "", "num_features", "=", "4", "\n", "if", "'pointcloud_num_features'", "in", "info", ":", "\n", "            ", "num_features", "=", "info", "[", "'pointcloud_num_features'", "]", "\n", "", "points", "=", "np", ".", "fromfile", "(", "\n", "velodyne_path", ",", "dtype", "=", "np", ".", "float32", ",", "count", "=", "-", "1", ")", ".", "reshape", "(", "[", "-", "1", ",", "num_features", "]", ")", "\n", "\n", "image_idx", "=", "info", "[", "\"image_idx\"", "]", "\n", "rect", "=", "info", "[", "'calib/R0_rect'", "]", "\n", "P2", "=", "info", "[", "'calib/P2'", "]", "\n", "Trv2c", "=", "info", "[", "'calib/Tr_velo_to_cam'", "]", "\n", "if", "not", "lidar_only", ":", "\n", "            ", "points", "=", "box_np_ops", ".", "remove_outside_points", "(", "points", ",", "rect", ",", "Trv2c", ",", "P2", ",", "\n", "info", "[", "\"img_shape\"", "]", ")", "\n", "\n", "", "annos", "=", "info", "[", "\"annos\"", "]", "\n", "names", "=", "annos", "[", "\"name\"", "]", "\n", "bboxes", "=", "annos", "[", "\"bbox\"", "]", "\n", "difficulty", "=", "annos", "[", "\"difficulty\"", "]", "\n", "gt_idxes", "=", "annos", "[", "\"index\"", "]", "\n", "num_obj", "=", "np", ".", "sum", "(", "annos", "[", "\"index\"", "]", ">=", "0", ")", "\n", "rbbox_cam", "=", "kitti", ".", "anno_to_rbboxes", "(", "annos", ")", "[", ":", "num_obj", "]", "\n", "rbbox_lidar", "=", "box_np_ops", ".", "box_camera_to_lidar", "(", "rbbox_cam", ",", "rect", ",", "Trv2c", ")", "\n", "if", "bev_only", ":", "# set z and h to limits", "\n", "            ", "assert", "coors_range", "is", "not", "None", "\n", "rbbox_lidar", "[", ":", ",", "2", "]", "=", "coors_range", "[", "2", "]", "\n", "rbbox_lidar", "[", ":", ",", "5", "]", "=", "coors_range", "[", "5", "]", "-", "coors_range", "[", "2", "]", "\n", "\n", "", "group_dict", "=", "{", "}", "\n", "group_ids", "=", "np", ".", "full", "(", "[", "bboxes", ".", "shape", "[", "0", "]", "]", ",", "-", "1", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "if", "\"group_ids\"", "in", "annos", ":", "\n", "            ", "group_ids", "=", "annos", "[", "\"group_ids\"", "]", "\n", "", "else", ":", "\n", "            ", "group_ids", "=", "np", ".", "arange", "(", "bboxes", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "", "point_indices", "=", "box_np_ops", ".", "points_in_rbbox", "(", "points", ",", "rbbox_lidar", ")", "\n", "for", "i", "in", "range", "(", "num_obj", ")", ":", "\n", "            ", "filename", "=", "f\"{image_idx}_{names[i]}_{gt_idxes[i]}.bin\"", "\n", "filepath", "=", "database_save_path", "/", "filename", "\n", "gt_points", "=", "points", "[", "point_indices", "[", ":", ",", "i", "]", "]", "\n", "\n", "gt_points", "[", ":", ",", ":", "3", "]", "-=", "rbbox_lidar", "[", "i", ",", ":", "3", "]", "\n", "with", "open", "(", "filepath", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "gt_points", ".", "tofile", "(", "f", ")", "\n", "", "if", "names", "[", "i", "]", "in", "used_classes", ":", "\n", "                ", "if", "relative_path", ":", "\n", "                    ", "db_path", "=", "str", "(", "database_save_path", ".", "stem", "+", "\"/\"", "+", "filename", ")", "\n", "", "else", ":", "\n", "                    ", "db_path", "=", "str", "(", "filepath", ")", "\n", "", "db_info", "=", "{", "\n", "\"name\"", ":", "names", "[", "i", "]", ",", "\n", "\"path\"", ":", "db_path", ",", "\n", "\"image_idx\"", ":", "image_idx", ",", "\n", "\"gt_idx\"", ":", "gt_idxes", "[", "i", "]", ",", "\n", "\"box3d_lidar\"", ":", "rbbox_lidar", "[", "i", "]", ",", "\n", "\"num_points_in_gt\"", ":", "gt_points", ".", "shape", "[", "0", "]", ",", "\n", "\"difficulty\"", ":", "difficulty", "[", "i", "]", ",", "\n", "# \"group_id\": -1,", "\n", "# \"bbox\": bboxes[i],", "\n", "}", "\n", "\n", "local_group_id", "=", "group_ids", "[", "i", "]", "\n", "# if local_group_id >= 0:", "\n", "if", "local_group_id", "not", "in", "group_dict", ":", "\n", "                    ", "group_dict", "[", "local_group_id", "]", "=", "group_counter", "\n", "group_counter", "+=", "1", "\n", "", "db_info", "[", "\"group_id\"", "]", "=", "group_dict", "[", "local_group_id", "]", "\n", "if", "\"score\"", "in", "annos", ":", "\n", "                    ", "db_info", "[", "\"score\"", "]", "=", "annos", "[", "\"score\"", "]", "[", "i", "]", "\n", "", "all_db_infos", "[", "names", "[", "i", "]", "]", ".", "append", "(", "db_info", ")", "\n", "", "", "", "for", "k", ",", "v", "in", "all_db_infos", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "f\"load {len(v)} {k} database infos\"", ")", "\n", "\n", "", "with", "open", "(", "db_info_save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "all_db_infos", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.ProgressBar.__init__": [[124, 136], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "width", "=", "20", ",", "\n", "with_ptg", "=", "True", ",", "\n", "step_time_average", "=", "50", ",", "\n", "speed_unit", "=", "Unit", ".", "Iter", ")", ":", "\n", "        ", "self", ".", "_width", "=", "width", "\n", "self", ".", "_with_ptg", "=", "with_ptg", "\n", "self", ".", "_step_time_average", "=", "step_time_average", "\n", "self", ".", "_step_times", "=", "[", "]", "\n", "self", ".", "_start_time", "=", "0.0", "\n", "self", ".", "_total_size", "=", "None", "\n", "self", ".", "_speed_unit", "=", "speed_unit", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.ProgressBar.start": [[137, 145], ["time.time"], "methods", ["None"], ["", "def", "start", "(", "self", ",", "total_size", ")", ":", "\n", "        ", "self", ".", "_start", "=", "True", "\n", "self", ".", "_step_times", "=", "[", "]", "\n", "self", ".", "_finished_sizes", "=", "[", "]", "\n", "self", ".", "_time_elapsed", "=", "0.0", "\n", "self", ".", "_current_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_total_size", "=", "total_size", "\n", "self", ".", "_progress", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.ProgressBar.print_bar": [[146, 181], ["progress_bar.ProgressBar._step_times.append", "progress_bar.ProgressBar._finished_sizes.append", "progress_bar.second_to_time_str", "numpy.array", "numpy.array", "progress_bar.second_to_time_str", "progress_bar.progress_str", "time.time", "numpy.mean", "print", "print", "time.time", "progress_bar.convert_size", "ValueError"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.second_to_time_str", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.second_to_time_str", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.progress_str", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.convert_size"], ["", "def", "print_bar", "(", "self", ",", "finished_size", "=", "1", ",", "pre_string", "=", "None", ",", "post_string", "=", "None", ")", ":", "\n", "        ", "self", ".", "_step_times", ".", "append", "(", "time", ".", "time", "(", ")", "-", "self", ".", "_current_time", ")", "\n", "self", ".", "_finished_sizes", ".", "append", "(", "finished_size", ")", "\n", "self", ".", "_time_elapsed", "+=", "self", ".", "_step_times", "[", "-", "1", "]", "\n", "start_time_str", "=", "second_to_time_str", "(", "self", ".", "_time_elapsed", ")", "\n", "time_per_size", "=", "np", ".", "array", "(", "self", ".", "_step_times", "[", "-", "self", ".", "_step_time_average", ":", "]", ")", "\n", "time_per_size", "/=", "np", ".", "array", "(", "\n", "self", ".", "_finished_sizes", "[", "-", "self", ".", "_step_time_average", ":", "]", ")", "\n", "average_step_time", "=", "np", ".", "mean", "(", "time_per_size", ")", "+", "1e-6", "\n", "if", "self", ".", "_speed_unit", "==", "Unit", ".", "Iter", ":", "\n", "            ", "speed_str", "=", "\"{:.2f}it/s\"", ".", "format", "(", "1", "/", "average_step_time", ")", "\n", "", "elif", "self", ".", "_speed_unit", "==", "Unit", ".", "Byte", ":", "\n", "            ", "size", ",", "size_unit", "=", "convert_size", "(", "1", "/", "average_step_time", ")", "\n", "speed_str", "=", "\"{:.2f}{}/s\"", ".", "format", "(", "size", ",", "size_unit", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"unknown speed unit\"", ")", "\n", "", "remain_time", "=", "(", "self", ".", "_total_size", "-", "self", ".", "_progress", ")", "*", "average_step_time", "\n", "remain_time_str", "=", "second_to_time_str", "(", "remain_time", ")", "\n", "time_str", "=", "start_time_str", "+", "'>'", "+", "remain_time_str", "\n", "prog_str", "=", "progress_str", "(", "\n", "(", "self", ".", "_progress", "+", "1", ")", "/", "self", ".", "_total_size", ",", "\n", "speed_str", ",", "\n", "time_str", ",", "\n", "width", "=", "self", ".", "_width", ",", "\n", "with_ptg", "=", "self", ".", "_with_ptg", ")", "\n", "self", ".", "_progress", "+=", "finished_size", "\n", "if", "pre_string", "is", "not", "None", ":", "\n", "            ", "prog_str", "=", "pre_string", "+", "prog_str", "\n", "", "if", "post_string", "is", "not", "None", ":", "\n", "            ", "prog_str", "+=", "post_string", "\n", "", "if", "self", ".", "_progress", ">=", "self", ".", "_total_size", ":", "\n", "            ", "print", "(", "prog_str", "+", "'   '", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "prog_str", "+", "'   '", ",", "end", "=", "'\\r'", ")", "\n", "", "self", ".", "_current_time", "=", "time", ".", "time", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.progress_str": [[9, 27], ["max", "range", "min", "round", "progress_bar.max_point_str"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.max_point_str"], ["def", "progress_str", "(", "val", ",", "*", "args", ",", "width", "=", "20", ",", "with_ptg", "=", "True", ")", ":", "\n", "    ", "val", "=", "max", "(", "0.", ",", "min", "(", "val", ",", "1.", ")", ")", "\n", "assert", "width", ">", "1", "\n", "pos", "=", "round", "(", "width", "*", "val", ")", "-", "1", "\n", "if", "with_ptg", "is", "True", ":", "\n", "        ", "log", "=", "'[{}%]'", ".", "format", "(", "max_point_str", "(", "val", "*", "100.0", ",", "4", ")", ")", "\n", "", "log", "+=", "'['", "\n", "for", "i", "in", "range", "(", "width", ")", ":", "\n", "        ", "if", "i", "<", "pos", ":", "\n", "            ", "log", "+=", "'='", "\n", "", "elif", "i", "==", "pos", ":", "\n", "            ", "log", "+=", "'>'", "\n", "", "else", ":", "\n", "            ", "log", "+=", "'.'", "\n", "", "", "log", "+=", "']'", "\n", "for", "arg", "in", "args", ":", "\n", "        ", "log", "+=", "'[{}]'", ".", "format", "(", "arg", ")", "\n", "", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.second_to_time_str": [[29, 37], ["int", "divmod", "divmod"], "function", ["None"], ["", "def", "second_to_time_str", "(", "second", ",", "omit_hours_if_possible", "=", "True", ")", ":", "\n", "    ", "second", "=", "int", "(", "second", ")", "\n", "m", ",", "s", "=", "divmod", "(", "second", ",", "60", ")", "\n", "h", ",", "m", "=", "divmod", "(", "m", ",", "60", ")", "\n", "if", "omit_hours_if_possible", ":", "\n", "        ", "if", "h", "==", "0", ":", "\n", "            ", "return", "'{:02d}:{:02d}'", ".", "format", "(", "m", ",", "s", ")", "\n", "", "", "return", "'{:02d}:{:02d}:{:02d}'", ".", "format", "(", "h", ",", "m", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.progress_bar_iter": [[39, 63], ["len", "enumerate", "print", "time.time", "step_times.append", "progress_bar.second_to_time_str", "progress_bar.second_to_time_str", "progress_bar.progress_str", "print", "numpy.mean", "time.time"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.second_to_time_str", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.second_to_time_str", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.progress_str"], ["", "def", "progress_bar_iter", "(", "task_list", ",", "width", "=", "20", ",", "with_ptg", "=", "True", ",", "step_time_average", "=", "50", ",", "name", "=", "None", ")", ":", "\n", "    ", "total_step", "=", "len", "(", "task_list", ")", "\n", "step_times", "=", "[", "]", "\n", "start_time", "=", "0.0", "\n", "name", "=", "''", "if", "name", "is", "None", "else", "f\"[{name}]\"", "\n", "for", "i", ",", "task", "in", "enumerate", "(", "task_list", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "yield", "task", "\n", "step_times", ".", "append", "(", "time", ".", "time", "(", ")", "-", "t", ")", "\n", "start_time", "+=", "step_times", "[", "-", "1", "]", "\n", "start_time_str", "=", "second_to_time_str", "(", "start_time", ")", "\n", "average_step_time", "=", "np", ".", "mean", "(", "step_times", "[", "-", "step_time_average", ":", "]", ")", "+", "1e-6", "\n", "speed_str", "=", "\"{:.2f}it/s\"", ".", "format", "(", "1", "/", "average_step_time", ")", "\n", "remain_time", "=", "(", "total_step", "-", "i", ")", "*", "average_step_time", "\n", "remain_time_str", "=", "second_to_time_str", "(", "remain_time", ")", "\n", "time_str", "=", "start_time_str", "+", "'>'", "+", "remain_time_str", "\n", "prog_str", "=", "progress_str", "(", "\n", "(", "i", "+", "1", ")", "/", "total_step", ",", "\n", "speed_str", ",", "\n", "time_str", ",", "\n", "width", "=", "width", ",", "\n", "with_ptg", "=", "with_ptg", ")", "\n", "print", "(", "name", "+", "prog_str", "+", "'   '", ",", "end", "=", "'\\r'", ")", "\n", "", "print", "(", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.enumerate_bar": [[67, 91], ["len", "enumerate", "print", "time.time", "step_times.append", "progress_bar.second_to_time_str", "progress_bar.second_to_time_str", "progress_bar.progress_str", "print", "numpy.mean", "time.time"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.second_to_time_str", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.second_to_time_str", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.progress_str"], ["def", "enumerate_bar", "(", "task_list", ",", "width", "=", "20", ",", "with_ptg", "=", "True", ",", "step_time_average", "=", "50", ",", "name", "=", "None", ")", ":", "\n", "    ", "total_step", "=", "len", "(", "task_list", ")", "\n", "step_times", "=", "[", "]", "\n", "start_time", "=", "0.0", "\n", "name", "=", "''", "if", "name", "is", "None", "else", "f\"[{name}]\"", "\n", "for", "i", ",", "task", "in", "enumerate", "(", "task_list", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "yield", "i", ",", "task", "\n", "step_times", ".", "append", "(", "time", ".", "time", "(", ")", "-", "t", ")", "\n", "start_time", "+=", "step_times", "[", "-", "1", "]", "\n", "start_time_str", "=", "second_to_time_str", "(", "start_time", ")", "\n", "average_step_time", "=", "np", ".", "mean", "(", "step_times", "[", "-", "step_time_average", ":", "]", ")", "+", "1e-6", "\n", "speed_str", "=", "\"{:.2f}it/s\"", ".", "format", "(", "1", "/", "average_step_time", ")", "\n", "remain_time", "=", "(", "total_step", "-", "i", ")", "*", "average_step_time", "\n", "remain_time_str", "=", "second_to_time_str", "(", "remain_time", ")", "\n", "time_str", "=", "start_time_str", "+", "'>'", "+", "remain_time_str", "\n", "prog_str", "=", "progress_str", "(", "\n", "(", "i", "+", "1", ")", "/", "total_step", ",", "\n", "speed_str", ",", "\n", "time_str", ",", "\n", "width", "=", "width", ",", "\n", "with_ptg", "=", "with_ptg", ")", "\n", "print", "(", "name", "+", "prog_str", "+", "'   '", ",", "end", "=", "'\\r'", ")", "\n", "", "print", "(", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.max_point_str": [[93, 105], ["bool", "numpy.abs", "fmt.format", "fmt.format", "max", "str", "int", "max", "numpy.log10"], "function", ["None"], ["", "def", "max_point_str", "(", "val", ",", "max_point", ")", ":", "\n", "    ", "positive", "=", "bool", "(", "val", ">=", "0.0", ")", "\n", "val", "=", "np", ".", "abs", "(", "val", ")", "\n", "if", "val", "==", "0", ":", "\n", "        ", "point", "=", "1", "\n", "", "else", ":", "\n", "        ", "point", "=", "max", "(", "int", "(", "np", ".", "log10", "(", "val", ")", ")", ",", "0", ")", "+", "1", "\n", "", "fmt", "=", "\"{:.\"", "+", "str", "(", "max", "(", "max_point", "-", "point", ",", "0", ")", ")", "+", "\"f}\"", "\n", "if", "positive", "is", "True", ":", "\n", "        ", "return", "fmt", ".", "format", "(", "val", ")", "\n", "", "else", ":", "\n", "        ", "return", "fmt", ".", "format", "(", "-", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.convert_size": [[112, 121], ["int", "math.pow", "round", "math.floor", "math.log"], "function", ["None"], ["", "def", "convert_size", "(", "size_bytes", ")", ":", "\n", "# from https://stackoverflow.com/questions/5194057/better-way-to-convert-file-sizes-in-python", "\n", "    ", "if", "size_bytes", "==", "0", ":", "\n", "        ", "return", "\"0B\"", "\n", "", "size_name", "=", "(", "\"B\"", ",", "\"KB\"", ",", "\"MB\"", ",", "\"GB\"", ",", "\"TB\"", ",", "\"PB\"", ",", "\"EB\"", ",", "\"ZB\"", ",", "\"YB\"", ")", "\n", "i", "=", "int", "(", "math", ".", "floor", "(", "math", ".", "log", "(", "size_bytes", ",", "1024", ")", ")", ")", "\n", "p", "=", "math", ".", "pow", "(", "1024", ",", "i", ")", "\n", "s", "=", "round", "(", "size_bytes", "/", "p", ",", "2", ")", "\n", "return", "s", ",", "size_name", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_mAP": [[11, 16], ["range", "len"], "function", ["None"], ["def", "get_mAP", "(", "prec", ")", ":", "\n", "    ", "sums", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "prec", ")", ",", "4", ")", ":", "\n", "        ", "sums", "+=", "prec", "[", "i", "]", "\n", "", "return", "sums", "/", "11", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_thresholds": [[18, 37], ["scores.sort", "enumerate", "thresholds.append", "len", "len"], "function", ["None"], ["", "@", "numba", ".", "jit", "\n", "def", "get_thresholds", "(", "scores", ":", "np", ".", "ndarray", ",", "num_gt", ",", "num_sample_pts", "=", "41", ")", ":", "\n", "    ", "scores", ".", "sort", "(", ")", "\n", "scores", "=", "scores", "[", ":", ":", "-", "1", "]", "\n", "current_recall", "=", "0", "\n", "thresholds", "=", "[", "]", "\n", "for", "i", ",", "score", "in", "enumerate", "(", "scores", ")", ":", "\n", "        ", "l_recall", "=", "(", "i", "+", "1", ")", "/", "num_gt", "\n", "if", "i", "<", "(", "len", "(", "scores", ")", "-", "1", ")", ":", "\n", "            ", "r_recall", "=", "(", "i", "+", "2", ")", "/", "num_gt", "\n", "", "else", ":", "\n", "            ", "r_recall", "=", "l_recall", "\n", "", "if", "(", "(", "(", "r_recall", "-", "current_recall", ")", "<", "(", "current_recall", "-", "l_recall", ")", ")", "\n", "and", "(", "i", "<", "(", "len", "(", "scores", ")", "-", "1", ")", ")", ")", ":", "\n", "            ", "continue", "\n", "# recall = l_recall", "\n", "", "thresholds", ".", "append", "(", "score", ")", "\n", "current_recall", "+=", "1", "/", "(", "num_sample_pts", "-", "1.0", ")", "\n", "", "return", "thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.clean_data": [[39, 93], ["CLASS_NAMES[].lower", "len", "len", "range", "range", "[].lower", "abs", "ignored_gt.append", "dc_bboxes.append", "[].lower", "ignored_dt.append", "ignored_gt.append", "ignored_gt.append", "ignored_dt.append", "ignored_dt.append"], "function", ["None"], ["", "def", "clean_data", "(", "gt_anno", ",", "dt_anno", ",", "current_class", ",", "difficulty", ")", ":", "\n", "    ", "CLASS_NAMES", "=", "[", "'car'", ",", "'pedestrian'", ",", "'cyclist'", ",", "'van'", ",", "'person_sitting'", ",", "'car'", ",", "'tractor'", ",", "'trailer'", "]", "\n", "MIN_HEIGHT", "=", "[", "40", ",", "25", ",", "25", "]", "\n", "MAX_OCCLUSION", "=", "[", "0", ",", "1", ",", "2", "]", "\n", "MAX_TRUNCATION", "=", "[", "0.15", ",", "0.3", ",", "0.5", "]", "\n", "dc_bboxes", ",", "ignored_gt", ",", "ignored_dt", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "current_cls_name", "=", "CLASS_NAMES", "[", "current_class", "]", ".", "lower", "(", ")", "\n", "num_gt", "=", "len", "(", "gt_anno", "[", "\"name\"", "]", ")", "\n", "num_dt", "=", "len", "(", "dt_anno", "[", "\"name\"", "]", ")", "\n", "num_valid_gt", "=", "0", "\n", "for", "i", "in", "range", "(", "num_gt", ")", ":", "\n", "        ", "bbox", "=", "gt_anno", "[", "\"bbox\"", "]", "[", "i", "]", "\n", "gt_name", "=", "gt_anno", "[", "\"name\"", "]", "[", "i", "]", ".", "lower", "(", ")", "\n", "height", "=", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "\n", "valid_class", "=", "-", "1", "\n", "if", "(", "gt_name", "==", "current_cls_name", ")", ":", "\n", "            ", "valid_class", "=", "1", "\n", "", "elif", "(", "current_cls_name", "==", "\"Pedestrian\"", ".", "lower", "(", ")", "\n", "and", "\"Person_sitting\"", ".", "lower", "(", ")", "==", "gt_name", ")", ":", "\n", "            ", "valid_class", "=", "0", "\n", "", "elif", "(", "current_cls_name", "==", "\"Car\"", ".", "lower", "(", ")", "and", "\"Van\"", ".", "lower", "(", ")", "==", "gt_name", ")", ":", "\n", "            ", "valid_class", "=", "0", "\n", "", "else", ":", "\n", "            ", "valid_class", "=", "-", "1", "\n", "", "ignore", "=", "False", "\n", "if", "(", "(", "gt_anno", "[", "\"occluded\"", "]", "[", "i", "]", ">", "MAX_OCCLUSION", "[", "difficulty", "]", ")", "\n", "or", "(", "gt_anno", "[", "\"truncated\"", "]", "[", "i", "]", ">", "MAX_TRUNCATION", "[", "difficulty", "]", ")", "\n", "or", "(", "height", "<=", "MIN_HEIGHT", "[", "difficulty", "]", ")", ")", ":", "\n", "# if gt_anno[\"difficulty\"][i] > difficulty or gt_anno[\"difficulty\"][i] == -1:", "\n", "            ", "ignore", "=", "True", "\n", "", "if", "valid_class", "==", "1", "and", "not", "ignore", ":", "\n", "            ", "ignored_gt", ".", "append", "(", "0", ")", "\n", "num_valid_gt", "+=", "1", "\n", "", "elif", "(", "valid_class", "==", "0", "or", "(", "ignore", "and", "(", "valid_class", "==", "1", ")", ")", ")", ":", "\n", "            ", "ignored_gt", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "ignored_gt", ".", "append", "(", "-", "1", ")", "\n", "# for i in range(num_gt):", "\n", "", "if", "gt_anno", "[", "\"name\"", "]", "[", "i", "]", "==", "\"DontCare\"", ":", "\n", "            ", "dc_bboxes", ".", "append", "(", "gt_anno", "[", "\"bbox\"", "]", "[", "i", "]", ")", "\n", "", "", "for", "i", "in", "range", "(", "num_dt", ")", ":", "\n", "        ", "if", "(", "dt_anno", "[", "\"name\"", "]", "[", "i", "]", ".", "lower", "(", ")", "==", "current_cls_name", ")", ":", "\n", "            ", "valid_class", "=", "1", "\n", "", "else", ":", "\n", "            ", "valid_class", "=", "-", "1", "\n", "", "height", "=", "abs", "(", "dt_anno", "[", "\"bbox\"", "]", "[", "i", ",", "3", "]", "-", "dt_anno", "[", "\"bbox\"", "]", "[", "i", ",", "1", "]", ")", "\n", "if", "height", "<", "MIN_HEIGHT", "[", "difficulty", "]", ":", "\n", "            ", "ignored_dt", ".", "append", "(", "1", ")", "\n", "", "elif", "valid_class", "==", "1", ":", "\n", "            ", "ignored_dt", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "ignored_dt", ".", "append", "(", "-", "1", ")", "\n", "\n", "", "", "return", "num_valid_gt", ",", "ignored_gt", ",", "ignored_dt", ",", "dc_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.image_box_overlap": [[95, 123], ["numba.jit", "numpy.zeros", "range", "range", "min", "max", "min", "max"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "image_box_overlap", "(", "boxes", ",", "query_boxes", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "N", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "K", "=", "query_boxes", ".", "shape", "[", "0", "]", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "N", ",", "K", ")", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "qbox_area", "=", "(", "(", "query_boxes", "[", "k", ",", "2", "]", "-", "query_boxes", "[", "k", ",", "0", "]", ")", "*", "\n", "(", "query_boxes", "[", "k", ",", "3", "]", "-", "query_boxes", "[", "k", ",", "1", "]", ")", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "            ", "iw", "=", "(", "min", "(", "boxes", "[", "n", ",", "2", "]", ",", "query_boxes", "[", "k", ",", "2", "]", ")", "-", "\n", "max", "(", "boxes", "[", "n", ",", "0", "]", ",", "query_boxes", "[", "k", ",", "0", "]", ")", ")", "\n", "if", "iw", ">", "0", ":", "\n", "                ", "ih", "=", "(", "min", "(", "boxes", "[", "n", ",", "3", "]", ",", "query_boxes", "[", "k", ",", "3", "]", ")", "-", "\n", "max", "(", "boxes", "[", "n", ",", "1", "]", ",", "query_boxes", "[", "k", ",", "1", "]", ")", ")", "\n", "if", "ih", ">", "0", ":", "\n", "                    ", "if", "criterion", "==", "-", "1", ":", "\n", "                        ", "ua", "=", "(", "\n", "(", "boxes", "[", "n", ",", "2", "]", "-", "boxes", "[", "n", ",", "0", "]", ")", "*", "\n", "(", "boxes", "[", "n", ",", "3", "]", "-", "boxes", "[", "n", ",", "1", "]", ")", "+", "qbox_area", "-", "iw", "*", "ih", ")", "\n", "", "elif", "criterion", "==", "0", ":", "\n", "                        ", "ua", "=", "(", "(", "boxes", "[", "n", ",", "2", "]", "-", "boxes", "[", "n", ",", "0", "]", ")", "*", "\n", "(", "boxes", "[", "n", ",", "3", "]", "-", "boxes", "[", "n", ",", "1", "]", ")", ")", "\n", "", "elif", "criterion", "==", "1", ":", "\n", "                        ", "ua", "=", "qbox_area", "\n", "", "else", ":", "\n", "                        ", "ua", "=", "1.0", "\n", "", "overlaps", "[", "n", ",", "k", "]", "=", "iw", "*", "ih", "/", "ua", "\n", "", "", "", "", "return", "overlaps", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.build_stage2_training": [[126, 181], ["numba.jit", "range", "range", "min", "max", "min", "max"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ",", "parallel", "=", "True", ")", "\n", "def", "build_stage2_training", "(", "boxes", ",", "query_boxes", ",", "criterion", ",", "scores_3d", ",", "scores_2d", ",", "dis_to_lidar_3d", ",", "overlaps", ",", "tensor_index", ")", ":", "\n", "    ", "N", "=", "boxes", ".", "shape", "[", "0", "]", "#70400", "\n", "K", "=", "query_boxes", ".", "shape", "[", "0", "]", "#30", "\n", "max_num", "=", "900000", "\n", "ind", "=", "0", "\n", "ind_max", "=", "ind", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "qbox_area", "=", "(", "(", "query_boxes", "[", "k", ",", "2", "]", "-", "query_boxes", "[", "k", ",", "0", "]", ")", "*", "\n", "(", "query_boxes", "[", "k", ",", "3", "]", "-", "query_boxes", "[", "k", ",", "1", "]", ")", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "            ", "iw", "=", "(", "min", "(", "boxes", "[", "n", ",", "2", "]", ",", "query_boxes", "[", "k", ",", "2", "]", ")", "-", "\n", "max", "(", "boxes", "[", "n", ",", "0", "]", ",", "query_boxes", "[", "k", ",", "0", "]", ")", ")", "\n", "if", "iw", ">", "0", ":", "\n", "                ", "ih", "=", "(", "min", "(", "boxes", "[", "n", ",", "3", "]", ",", "query_boxes", "[", "k", ",", "3", "]", ")", "-", "\n", "max", "(", "boxes", "[", "n", ",", "1", "]", ",", "query_boxes", "[", "k", ",", "1", "]", ")", ")", "\n", "if", "ih", ">", "0", ":", "\n", "                    ", "if", "criterion", "==", "-", "1", ":", "\n", "                        ", "ua", "=", "(", "\n", "(", "boxes", "[", "n", ",", "2", "]", "-", "boxes", "[", "n", ",", "0", "]", ")", "*", "\n", "(", "boxes", "[", "n", ",", "3", "]", "-", "boxes", "[", "n", ",", "1", "]", ")", "+", "qbox_area", "-", "iw", "*", "ih", ")", "\n", "", "elif", "criterion", "==", "0", ":", "\n", "                        ", "ua", "=", "(", "(", "boxes", "[", "n", ",", "2", "]", "-", "boxes", "[", "n", ",", "0", "]", ")", "*", "\n", "(", "boxes", "[", "n", ",", "3", "]", "-", "boxes", "[", "n", ",", "1", "]", ")", ")", "\n", "", "elif", "criterion", "==", "1", ":", "\n", "                        ", "ua", "=", "qbox_area", "\n", "", "else", ":", "\n", "                        ", "ua", "=", "1.0", "\n", "", "overlaps", "[", "ind", ",", "0", "]", "=", "iw", "*", "ih", "/", "ua", "\n", "overlaps", "[", "ind", ",", "1", "]", "=", "scores_3d", "[", "n", ",", "0", "]", "\n", "overlaps", "[", "ind", ",", "2", "]", "=", "scores_2d", "[", "k", ",", "0", "]", "\n", "overlaps", "[", "ind", ",", "3", "]", "=", "dis_to_lidar_3d", "[", "n", ",", "0", "]", "\n", "tensor_index", "[", "ind", ",", "0", "]", "=", "k", "\n", "tensor_index", "[", "ind", ",", "1", "]", "=", "n", "\n", "ind", "=", "ind", "+", "1", "\n", "\n", "", "elif", "k", "==", "K", "-", "1", ":", "\n", "                    ", "overlaps", "[", "ind", ",", "0", "]", "=", "-", "10", "\n", "overlaps", "[", "ind", ",", "1", "]", "=", "scores_3d", "[", "n", ",", "0", "]", "\n", "overlaps", "[", "ind", ",", "2", "]", "=", "-", "10", "\n", "overlaps", "[", "ind", ",", "3", "]", "=", "dis_to_lidar_3d", "[", "n", ",", "0", "]", "\n", "tensor_index", "[", "ind", ",", "0", "]", "=", "k", "\n", "tensor_index", "[", "ind", ",", "1", "]", "=", "n", "\n", "ind", "=", "ind", "+", "1", "\n", "", "", "elif", "k", "==", "K", "-", "1", ":", "\n", "                ", "overlaps", "[", "ind", ",", "0", "]", "=", "-", "10", "\n", "overlaps", "[", "ind", ",", "1", "]", "=", "scores_3d", "[", "n", ",", "0", "]", "\n", "overlaps", "[", "ind", ",", "2", "]", "=", "-", "10", "\n", "overlaps", "[", "ind", ",", "3", "]", "=", "dis_to_lidar_3d", "[", "n", ",", "0", "]", "\n", "tensor_index", "[", "ind", ",", "0", "]", "=", "k", "\n", "tensor_index", "[", "ind", ",", "1", "]", "=", "n", "\n", "ind", "=", "ind", "+", "1", "\n", "", "", "", "if", "ind", ">", "ind_max", ":", "\n", "        ", "ind_max", "=", "ind", "\n", "", "return", "overlaps", ",", "tensor_index", ",", "ind", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.build_stage2_training_2": [[184, 222], ["numba.jit", "numpy.zeros", "range", "range", "min", "max", "min", "max"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ",", "parallel", "=", "True", ")", "\n", "def", "build_stage2_training_2", "(", "boxes", ",", "query_boxes", ",", "box_2d_corner", ")", ":", "\n", "    ", "N", "=", "boxes", ".", "shape", "[", "0", "]", "#3D_projected", "\n", "K", "=", "query_boxes", ".", "shape", "[", "0", "]", "#2D", "\n", "overlaps_2", "=", "np", ".", "zeros", "(", "(", "N", ",", "K", ",", "24", ")", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "qbox_area", "=", "(", "(", "query_boxes", "[", "k", ",", "2", "]", "-", "query_boxes", "[", "k", ",", "0", "]", ")", "*", "\n", "(", "query_boxes", "[", "k", ",", "5", "]", "-", "query_boxes", "[", "k", ",", "1", "]", ")", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "            ", "iw", "=", "(", "min", "(", "boxes", "[", "n", ",", "2", "]", ",", "query_boxes", "[", "k", ",", "2", "]", ")", "-", "\n", "max", "(", "boxes", "[", "n", ",", "0", "]", ",", "query_boxes", "[", "k", ",", "0", "]", ")", ")", "\n", "if", "iw", ">", "0", ":", "\n", "                ", "ih", "=", "(", "min", "(", "boxes", "[", "n", ",", "3", "]", ",", "query_boxes", "[", "k", ",", "5", "]", ")", "-", "\n", "max", "(", "boxes", "[", "n", ",", "1", "]", ",", "query_boxes", "[", "k", ",", "1", "]", ")", ")", "\n", "if", "ih", ">", "0", ":", "\n", "                    ", "overlaps_2", "[", "n", ",", "k", ",", "0", ":", "8", "]", "=", "query_boxes", "[", "k", ",", ":", "]", "\n", "overlaps_2", "[", "n", ",", "k", ",", "8", ":", "]", "=", "box_2d_corner", "[", "n", ",", ":", "]", "\n", "'''\n                    overlaps_2[n, k, 0] = query_boxes[k,0]\n                    overlaps_2[n, k, 1] = query_boxes[k,1]\n                    overlaps_2[n, k, 2] = query_boxes[k,2]\n                    overlaps_2[n, k, 3] = query_boxes[k,3]\n                    overlaps_2[n, k, 4] = box_2d_corner[n,0]\n                    overlaps_2[n, k, 5] = box_2d_corner[n,1]\n                    overlaps_2[n, k, 6] = box_2d_corner[n,2]\n                    overlaps_2[n, k, 7] = box_2d_corner[n,3]\n                    overlaps_2[n, k, 8] = box_2d_corner[n,4]\n                    overlaps_2[n, k, 9] = box_2d_corner[n,5]\n                    overlaps_2[n, k, 10] = box_2d_corner[n,6]\n                    overlaps_2[n, k, 11] = box_2d_corner[n,7]\n                    '''", "\n", "", "", "'''\n            elif scores_3d[n,0] >= 0.1:\n                overlaps[n, k, 0] = 0\n                overlaps[n, k, 1] = scores_3d[n,0]\n                overlaps[n, k, 2] = 0\n                overlaps[n, k, 3] = dis_to_lidar_3d[n,0]'''", "\n", "", "", "return", "overlaps_2", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.bev_box_overlap": [[225, 228], ["second.core.non_max_suppression.nms_gpu.rotate_iou_gpu_eval"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.rotate_iou_gpu_eval"], ["", "def", "bev_box_overlap", "(", "boxes", ",", "qboxes", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "riou", "=", "rotate_iou_gpu_eval", "(", "boxes", ",", "qboxes", ",", "criterion", ")", "\n", "return", "riou", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.d3_box_overlap_kernel": [[230, 255], ["numba.jit", "range", "range", "min", "max"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ",", "parallel", "=", "True", ")", "\n", "def", "d3_box_overlap_kernel", "(", "boxes", ",", "qboxes", ",", "rinc", ",", "criterion", "=", "-", "1", ")", ":", "\n", "# ONLY support overlap in CAMERA, not lider.", "\n", "    ", "N", ",", "K", "=", "boxes", ".", "shape", "[", "0", "]", ",", "qboxes", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "            ", "if", "rinc", "[", "i", ",", "j", "]", ">", "0", ":", "\n", "                ", "iw", "=", "(", "min", "(", "boxes", "[", "i", ",", "1", "]", ",", "qboxes", "[", "j", ",", "1", "]", ")", "-", "max", "(", "\n", "boxes", "[", "i", ",", "1", "]", "-", "boxes", "[", "i", ",", "4", "]", ",", "qboxes", "[", "j", ",", "1", "]", "-", "qboxes", "[", "j", ",", "4", "]", ")", ")", "\n", "\n", "if", "iw", ">", "0", ":", "\n", "                    ", "area1", "=", "boxes", "[", "i", ",", "3", "]", "*", "boxes", "[", "i", ",", "4", "]", "*", "boxes", "[", "i", ",", "5", "]", "\n", "area2", "=", "qboxes", "[", "j", ",", "3", "]", "*", "qboxes", "[", "j", ",", "4", "]", "*", "qboxes", "[", "j", ",", "5", "]", "\n", "inc", "=", "iw", "*", "rinc", "[", "i", ",", "j", "]", "\n", "if", "criterion", "==", "-", "1", ":", "\n", "                        ", "ua", "=", "(", "area1", "+", "area2", "-", "inc", ")", "\n", "", "elif", "criterion", "==", "0", ":", "\n", "                        ", "ua", "=", "area1", "\n", "", "elif", "criterion", "==", "1", ":", "\n", "                        ", "ua", "=", "area2", "\n", "", "else", ":", "\n", "                        ", "ua", "=", "1.0", "\n", "", "rinc", "[", "i", ",", "j", "]", "=", "inc", "/", "ua", "\n", "", "else", ":", "\n", "                    ", "rinc", "[", "i", ",", "j", "]", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.d3_box_overlap": [[257, 262], ["second.core.non_max_suppression.nms_gpu.rotate_iou_gpu_eval", "eval.d3_box_overlap_kernel"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.rotate_iou_gpu_eval", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.d3_box_overlap_kernel"], ["", "", "", "", "", "def", "d3_box_overlap", "(", "boxes", ",", "qboxes", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "rinc", "=", "rotate_iou_gpu_eval", "(", "boxes", "[", ":", ",", "[", "0", ",", "2", ",", "3", ",", "5", ",", "6", "]", "]", ",", "\n", "qboxes", "[", ":", ",", "[", "0", ",", "2", ",", "3", ",", "5", ",", "6", "]", "]", ",", "2", ")", "\n", "d3_box_overlap_kernel", "(", "boxes", ",", "qboxes", ",", "rinc", ",", "criterion", ")", "\n", "return", "rinc", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.compute_statistics_jit": [[264, 384], ["numba.jit", "numpy.zeros", "numpy.zeros", "range", "range", "range", "range", "eval.image_box_overlap", "range", "numpy.zeros", "range", "range", "numpy.sum", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.image_box_overlap"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "compute_statistics_jit", "(", "overlaps", ",", "\n", "gt_datas", ",", "\n", "dt_datas", ",", "\n", "ignored_gt", ",", "\n", "ignored_det", ",", "\n", "dc_bboxes", ",", "\n", "metric", ",", "\n", "min_overlap", ",", "\n", "thresh", "=", "0", ",", "\n", "compute_fp", "=", "False", ",", "\n", "compute_aos", "=", "False", ")", ":", "\n", "\n", "    ", "det_size", "=", "dt_datas", ".", "shape", "[", "0", "]", "\n", "gt_size", "=", "gt_datas", ".", "shape", "[", "0", "]", "\n", "dt_scores", "=", "dt_datas", "[", ":", ",", "-", "1", "]", "\n", "dt_alphas", "=", "dt_datas", "[", ":", ",", "4", "]", "\n", "gt_alphas", "=", "gt_datas", "[", ":", ",", "4", "]", "\n", "dt_bboxes", "=", "dt_datas", "[", ":", ",", ":", "4", "]", "\n", "# gt_bboxes = gt_datas[:, :4]", "\n", "\n", "assigned_detection", "=", "[", "False", "]", "*", "det_size", "\n", "ignored_threshold", "=", "[", "False", "]", "*", "det_size", "\n", "if", "compute_fp", ":", "\n", "        ", "for", "i", "in", "range", "(", "det_size", ")", ":", "\n", "            ", "if", "(", "dt_scores", "[", "i", "]", "<", "thresh", ")", ":", "\n", "                ", "ignored_threshold", "[", "i", "]", "=", "True", "\n", "", "", "", "NO_DETECTION", "=", "-", "10000000", "\n", "tp", ",", "fp", ",", "fn", ",", "similarity", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "# thresholds = [0.0]", "\n", "# delta = [0.0]", "\n", "thresholds", "=", "np", ".", "zeros", "(", "(", "gt_size", ",", ")", ")", "\n", "thresh_idx", "=", "0", "\n", "delta", "=", "np", ".", "zeros", "(", "(", "gt_size", ",", ")", ")", "\n", "delta_idx", "=", "0", "\n", "for", "i", "in", "range", "(", "gt_size", ")", ":", "\n", "        ", "if", "ignored_gt", "[", "i", "]", "==", "-", "1", ":", "\n", "            ", "continue", "\n", "", "det_idx", "=", "-", "1", "\n", "valid_detection", "=", "NO_DETECTION", "\n", "max_overlap", "=", "0", "\n", "assigned_ignored_det", "=", "False", "\n", "\n", "for", "j", "in", "range", "(", "det_size", ")", ":", "\n", "            ", "if", "(", "ignored_det", "[", "j", "]", "==", "-", "1", ")", ":", "\n", "                ", "continue", "\n", "", "if", "(", "assigned_detection", "[", "j", "]", ")", ":", "\n", "                ", "continue", "\n", "", "if", "(", "ignored_threshold", "[", "j", "]", ")", ":", "\n", "                ", "continue", "\n", "", "overlap", "=", "overlaps", "[", "j", ",", "i", "]", "\n", "dt_score", "=", "dt_scores", "[", "j", "]", "\n", "if", "(", "not", "compute_fp", "and", "(", "overlap", ">", "min_overlap", ")", "\n", "and", "dt_score", ">", "valid_detection", ")", ":", "\n", "                ", "det_idx", "=", "j", "\n", "valid_detection", "=", "dt_score", "\n", "", "elif", "(", "compute_fp", "and", "(", "overlap", ">", "min_overlap", ")", "\n", "and", "(", "overlap", ">", "max_overlap", "or", "assigned_ignored_det", ")", "\n", "and", "ignored_det", "[", "j", "]", "==", "0", ")", ":", "\n", "                ", "max_overlap", "=", "overlap", "\n", "det_idx", "=", "j", "\n", "valid_detection", "=", "1", "\n", "assigned_ignored_det", "=", "False", "\n", "", "elif", "(", "compute_fp", "and", "(", "overlap", ">", "min_overlap", ")", "\n", "and", "(", "valid_detection", "==", "NO_DETECTION", ")", "\n", "and", "ignored_det", "[", "j", "]", "==", "1", ")", ":", "\n", "                ", "det_idx", "=", "j", "\n", "valid_detection", "=", "1", "\n", "assigned_ignored_det", "=", "True", "\n", "\n", "", "", "if", "(", "valid_detection", "==", "NO_DETECTION", ")", "and", "ignored_gt", "[", "i", "]", "==", "0", ":", "\n", "            ", "fn", "+=", "1", "\n", "", "elif", "(", "(", "valid_detection", "!=", "NO_DETECTION", ")", "\n", "and", "(", "ignored_gt", "[", "i", "]", "==", "1", "or", "ignored_det", "[", "det_idx", "]", "==", "1", ")", ")", ":", "\n", "            ", "assigned_detection", "[", "det_idx", "]", "=", "True", "\n", "", "elif", "valid_detection", "!=", "NO_DETECTION", ":", "\n", "# only a tp add a threshold.", "\n", "            ", "tp", "+=", "1", "\n", "# thresholds.append(dt_scores[det_idx])", "\n", "thresholds", "[", "thresh_idx", "]", "=", "dt_scores", "[", "det_idx", "]", "\n", "thresh_idx", "+=", "1", "\n", "if", "compute_aos", ":", "\n", "# delta.append(gt_alphas[i] - dt_alphas[det_idx])", "\n", "                ", "delta", "[", "delta_idx", "]", "=", "gt_alphas", "[", "i", "]", "-", "dt_alphas", "[", "det_idx", "]", "\n", "delta_idx", "+=", "1", "\n", "\n", "", "assigned_detection", "[", "det_idx", "]", "=", "True", "\n", "", "", "if", "compute_fp", ":", "\n", "        ", "for", "i", "in", "range", "(", "det_size", ")", ":", "\n", "            ", "if", "(", "not", "(", "assigned_detection", "[", "i", "]", "or", "ignored_det", "[", "i", "]", "==", "-", "1", "\n", "or", "ignored_det", "[", "i", "]", "==", "1", "or", "ignored_threshold", "[", "i", "]", ")", ")", ":", "\n", "                ", "fp", "+=", "1", "\n", "", "", "nstuff", "=", "0", "\n", "if", "metric", "==", "0", ":", "\n", "            ", "overlaps_dt_dc", "=", "image_box_overlap", "(", "dt_bboxes", ",", "dc_bboxes", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "dc_bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "det_size", ")", ":", "\n", "                    ", "if", "(", "assigned_detection", "[", "j", "]", ")", ":", "\n", "                        ", "continue", "\n", "", "if", "(", "ignored_det", "[", "j", "]", "==", "-", "1", "or", "ignored_det", "[", "j", "]", "==", "1", ")", ":", "\n", "                        ", "continue", "\n", "", "if", "(", "ignored_threshold", "[", "j", "]", ")", ":", "\n", "                        ", "continue", "\n", "", "if", "overlaps_dt_dc", "[", "j", ",", "i", "]", ">", "min_overlap", ":", "\n", "                        ", "assigned_detection", "[", "j", "]", "=", "True", "\n", "nstuff", "+=", "1", "\n", "", "", "", "", "fp", "-=", "nstuff", "\n", "if", "compute_aos", ":", "\n", "            ", "tmp", "=", "np", ".", "zeros", "(", "(", "fp", "+", "delta_idx", ",", ")", ")", "\n", "# tmp = [0] * fp", "\n", "for", "i", "in", "range", "(", "delta_idx", ")", ":", "\n", "                ", "tmp", "[", "i", "+", "fp", "]", "=", "(", "1.0", "+", "np", ".", "cos", "(", "delta", "[", "i", "]", ")", ")", "/", "2.0", "\n", "# tmp.append((1.0 + np.cos(delta[i])) / 2.0)", "\n", "# assert len(tmp) == fp + tp", "\n", "# assert len(delta) == tp", "\n", "", "if", "tp", ">", "0", "or", "fp", ">", "0", ":", "\n", "                ", "similarity", "=", "np", ".", "sum", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                ", "similarity", "=", "-", "1", "\n", "", "", "", "return", "tp", ",", "fp", ",", "fn", ",", "similarity", ",", "thresholds", "[", ":", "thresh_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_split_parts": [[386, 393], ["None"], "function", ["None"], ["", "def", "get_split_parts", "(", "num", ",", "num_part", ")", ":", "\n", "    ", "same_part", "=", "num", "//", "num_part", "\n", "remain_num", "=", "num", "%", "num_part", "\n", "if", "remain_num", "==", "0", ":", "\n", "        ", "return", "[", "same_part", "]", "*", "num_part", "\n", "", "else", ":", "\n", "        ", "return", "[", "same_part", "]", "*", "num_part", "+", "[", "remain_num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.fused_compute_statistics": [[395, 443], ["numba.jit", "range", "enumerate", "eval.compute_statistics_jit"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.compute_statistics_jit"], ["", "", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "fused_compute_statistics", "(", "overlaps", ",", "\n", "pr", ",", "\n", "gt_nums", ",", "\n", "dt_nums", ",", "\n", "dc_nums", ",", "\n", "gt_datas", ",", "\n", "dt_datas", ",", "\n", "dontcares", ",", "\n", "ignored_gts", ",", "\n", "ignored_dets", ",", "\n", "metric", ",", "\n", "min_overlap", ",", "\n", "thresholds", ",", "\n", "compute_aos", "=", "False", ")", ":", "\n", "    ", "gt_num", "=", "0", "\n", "dt_num", "=", "0", "\n", "dc_num", "=", "0", "\n", "for", "i", "in", "range", "(", "gt_nums", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "t", ",", "thresh", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "overlap", "=", "overlaps", "[", "dt_num", ":", "dt_num", "+", "dt_nums", "[", "i", "]", ",", "gt_num", ":", "\n", "gt_num", "+", "gt_nums", "[", "i", "]", "]", "\n", "\n", "gt_data", "=", "gt_datas", "[", "gt_num", ":", "gt_num", "+", "gt_nums", "[", "i", "]", "]", "\n", "dt_data", "=", "dt_datas", "[", "dt_num", ":", "dt_num", "+", "dt_nums", "[", "i", "]", "]", "\n", "ignored_gt", "=", "ignored_gts", "[", "gt_num", ":", "gt_num", "+", "gt_nums", "[", "i", "]", "]", "\n", "ignored_det", "=", "ignored_dets", "[", "dt_num", ":", "dt_num", "+", "dt_nums", "[", "i", "]", "]", "\n", "dontcare", "=", "dontcares", "[", "dc_num", ":", "dc_num", "+", "dc_nums", "[", "i", "]", "]", "\n", "tp", ",", "fp", ",", "fn", ",", "similarity", ",", "_", "=", "compute_statistics_jit", "(", "\n", "overlap", ",", "\n", "gt_data", ",", "\n", "dt_data", ",", "\n", "ignored_gt", ",", "\n", "ignored_det", ",", "\n", "dontcare", ",", "\n", "metric", ",", "\n", "min_overlap", "=", "min_overlap", ",", "\n", "thresh", "=", "thresh", ",", "\n", "compute_fp", "=", "True", ",", "\n", "compute_aos", "=", "compute_aos", ")", "\n", "pr", "[", "t", ",", "0", "]", "+=", "tp", "\n", "pr", "[", "t", ",", "1", "]", "+=", "fp", "\n", "pr", "[", "t", ",", "2", "]", "+=", "fn", "\n", "if", "similarity", "!=", "-", "1", ":", "\n", "                ", "pr", "[", "t", ",", "3", "]", "+=", "similarity", "\n", "", "", "gt_num", "+=", "gt_nums", "[", "i", "]", "\n", "dt_num", "+=", "dt_nums", "[", "i", "]", "\n", "dc_num", "+=", "dc_nums", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.calculate_iou_partly": [[445, 520], ["numpy.stack", "numpy.stack", "len", "eval.get_split_parts", "enumerate", "len", "len", "parted_overlaps.append", "range", "len", "len", "numpy.concatenate", "numpy.concatenate", "eval.image_box_overlap", "overlaps.append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "bev_box_overlap().astype", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "d3_box_overlap().astype", "ValueError", "eval.bev_box_overlap", "eval.d3_box_overlap"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_split_parts", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.image_box_overlap", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.bev_box_overlap", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.d3_box_overlap"], ["", "", "def", "calculate_iou_partly", "(", "gt_annos", ",", "dt_annos", ",", "metric", ",", "num_parts", "=", "50", ")", ":", "\n", "    ", "\"\"\"fast iou algorithm. this function can be used independently to\n    do result analysis. Must be used in CAMERA coordinate system.\n    Args:\n        gt_annos: dict, must from get_label_annos() in kitti_common.py\n        dt_annos: dict, must from get_label_annos() in kitti_common.py\n        metric: eval type. 0: bbox, 1: bev, 2: 3d\n        num_parts: int. a parameter for fast calculate algorithm\n    \"\"\"", "\n", "assert", "len", "(", "gt_annos", ")", "==", "len", "(", "dt_annos", ")", "\n", "total_dt_num", "=", "np", ".", "stack", "(", "[", "len", "(", "a", "[", "\"name\"", "]", ")", "for", "a", "in", "dt_annos", "]", ",", "0", ")", "\n", "total_gt_num", "=", "np", ".", "stack", "(", "[", "len", "(", "a", "[", "\"name\"", "]", ")", "for", "a", "in", "gt_annos", "]", ",", "0", ")", "\n", "num_examples", "=", "len", "(", "gt_annos", ")", "\n", "split_parts", "=", "get_split_parts", "(", "num_examples", ",", "num_parts", ")", "\n", "parted_overlaps", "=", "[", "]", "\n", "example_idx", "=", "0", "\n", "\n", "for", "num_part", "in", "split_parts", ":", "\n", "        ", "gt_annos_part", "=", "gt_annos", "[", "example_idx", ":", "example_idx", "+", "num_part", "]", "\n", "dt_annos_part", "=", "dt_annos", "[", "example_idx", ":", "example_idx", "+", "num_part", "]", "\n", "if", "metric", "==", "0", ":", "\n", "            ", "gt_boxes", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"bbox\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "dt_boxes", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"bbox\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "overlap_part", "=", "image_box_overlap", "(", "gt_boxes", ",", "dt_boxes", ")", "\n", "", "elif", "metric", "==", "1", ":", "\n", "            ", "loc", "=", "np", ".", "concatenate", "(", "\n", "[", "a", "[", "\"location\"", "]", "[", ":", ",", "[", "0", ",", "2", "]", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "dims", "=", "np", ".", "concatenate", "(", "\n", "[", "a", "[", "\"dimensions\"", "]", "[", ":", ",", "[", "0", ",", "2", "]", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "rots", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"rotation_y\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "gt_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "loc", "=", "np", ".", "concatenate", "(", "\n", "[", "a", "[", "\"location\"", "]", "[", ":", ",", "[", "0", ",", "2", "]", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "dims", "=", "np", ".", "concatenate", "(", "\n", "[", "a", "[", "\"dimensions\"", "]", "[", ":", ",", "[", "0", ",", "2", "]", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "rots", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"rotation_y\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "dt_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "overlap_part", "=", "bev_box_overlap", "(", "gt_boxes", ",", "dt_boxes", ")", ".", "astype", "(", "\n", "np", ".", "float64", ")", "\n", "", "elif", "metric", "==", "2", ":", "\n", "            ", "loc", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"location\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "dims", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"dimensions\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "rots", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"rotation_y\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "gt_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "loc", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"location\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "dims", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"dimensions\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "rots", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"rotation_y\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "dt_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "overlap_part", "=", "d3_box_overlap", "(", "gt_boxes", ",", "dt_boxes", ")", ".", "astype", "(", "\n", "np", ".", "float64", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"unknown metric\"", ")", "\n", "", "parted_overlaps", ".", "append", "(", "overlap_part", ")", "\n", "example_idx", "+=", "num_part", "\n", "", "overlaps", "=", "[", "]", "\n", "example_idx", "=", "0", "\n", "for", "j", ",", "num_part", "in", "enumerate", "(", "split_parts", ")", ":", "\n", "        ", "gt_annos_part", "=", "gt_annos", "[", "example_idx", ":", "example_idx", "+", "num_part", "]", "\n", "dt_annos_part", "=", "dt_annos", "[", "example_idx", ":", "example_idx", "+", "num_part", "]", "\n", "gt_num_idx", ",", "dt_num_idx", "=", "0", ",", "0", "\n", "for", "i", "in", "range", "(", "num_part", ")", ":", "\n", "            ", "gt_box_num", "=", "total_gt_num", "[", "example_idx", "+", "i", "]", "\n", "dt_box_num", "=", "total_dt_num", "[", "example_idx", "+", "i", "]", "\n", "overlaps", ".", "append", "(", "\n", "parted_overlaps", "[", "j", "]", "[", "gt_num_idx", ":", "gt_num_idx", "+", "gt_box_num", ",", "\n", "dt_num_idx", ":", "dt_num_idx", "+", "dt_box_num", "]", ")", "\n", "gt_num_idx", "+=", "gt_box_num", "\n", "dt_num_idx", "+=", "dt_box_num", "\n", "", "example_idx", "+=", "num_part", "\n", "\n", "", "return", "overlaps", ",", "parted_overlaps", ",", "total_gt_num", ",", "total_dt_num", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval._prepare_data": [[522, 551], ["range", "numpy.stack", "len", "eval.clean_data", "ignored_gts.append", "ignored_dets.append", "np.stack.append", "dontcares.append", "numpy.concatenate", "numpy.concatenate", "gt_datas_list.append", "dt_datas_list.append", "numpy.array", "numpy.array", "len", "numpy.zeros().astype", "numpy.stack().astype", "numpy.zeros", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.clean_data"], ["", "def", "_prepare_data", "(", "gt_annos", ",", "dt_annos", ",", "current_class", ",", "difficulty", ")", ":", "\n", "    ", "gt_datas_list", "=", "[", "]", "\n", "dt_datas_list", "=", "[", "]", "\n", "total_dc_num", "=", "[", "]", "\n", "ignored_gts", ",", "ignored_dets", ",", "dontcares", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "total_num_valid_gt", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_annos", ")", ")", ":", "\n", "        ", "rets", "=", "clean_data", "(", "gt_annos", "[", "i", "]", ",", "dt_annos", "[", "i", "]", ",", "current_class", ",", "difficulty", ")", "\n", "num_valid_gt", ",", "ignored_gt", ",", "ignored_det", ",", "dc_bboxes", "=", "rets", "\n", "ignored_gts", ".", "append", "(", "np", ".", "array", "(", "ignored_gt", ",", "dtype", "=", "np", ".", "int64", ")", ")", "\n", "ignored_dets", ".", "append", "(", "np", ".", "array", "(", "ignored_det", ",", "dtype", "=", "np", ".", "int64", ")", ")", "\n", "if", "len", "(", "dc_bboxes", ")", "==", "0", ":", "\n", "            ", "dc_bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "", "else", ":", "\n", "            ", "dc_bboxes", "=", "np", ".", "stack", "(", "dc_bboxes", ",", "0", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "", "total_dc_num", ".", "append", "(", "dc_bboxes", ".", "shape", "[", "0", "]", ")", "\n", "dontcares", ".", "append", "(", "dc_bboxes", ")", "\n", "total_num_valid_gt", "+=", "num_valid_gt", "\n", "gt_datas", "=", "np", ".", "concatenate", "(", "\n", "[", "gt_annos", "[", "i", "]", "[", "\"bbox\"", "]", ",", "gt_annos", "[", "i", "]", "[", "\"alpha\"", "]", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "1", ")", "\n", "dt_datas", "=", "np", ".", "concatenate", "(", "[", "\n", "dt_annos", "[", "i", "]", "[", "\"bbox\"", "]", ",", "dt_annos", "[", "i", "]", "[", "\"alpha\"", "]", "[", "...", ",", "np", ".", "newaxis", "]", ",", "\n", "dt_annos", "[", "i", "]", "[", "\"score\"", "]", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "]", ",", "1", ")", "\n", "gt_datas_list", ".", "append", "(", "gt_datas", ")", "\n", "dt_datas_list", ".", "append", "(", "dt_datas", ")", "\n", "", "total_dc_num", "=", "np", ".", "stack", "(", "total_dc_num", ",", "axis", "=", "0", ")", "\n", "return", "(", "gt_datas_list", ",", "dt_datas_list", ",", "ignored_gts", ",", "ignored_dets", ",", "dontcares", ",", "\n", "total_dc_num", ",", "total_num_valid_gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.eval_class": [[553, 647], ["len", "eval.get_split_parts", "eval.calculate_iou_partly", "eval._prepare_data", "range", "numpy.array", "eval.get_thresholds", "numpy.array", "numpy.zeros", "enumerate", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "range", "len", "len", "len", "eval.compute_statistics_jit", "np.array.tolist", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "eval.fused_compute_statistics", "len", "len", "numpy.max", "numpy.max", "len", "numpy.max"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_split_parts", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.calculate_iou_partly", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval._prepare_data", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_thresholds", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.compute_statistics_jit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.fused_compute_statistics"], ["", "def", "eval_class", "(", "gt_annos", ",", "\n", "dt_annos", ",", "\n", "current_class", ",", "\n", "difficulty", ",", "\n", "metric", ",", "\n", "min_overlap", ",", "\n", "compute_aos", "=", "False", ",", "\n", "num_parts", "=", "50", ")", ":", "\n", "    ", "\"\"\"Kitti eval. Only support 2d/bev/3d/aos eval for now.\n    Args:\n        gt_annos: dict, must from get_label_annos() in kitti_common.py\n        dt_annos: dict, must from get_label_annos() in kitti_common.py\n        current_class: int, 0: car, 1: pedestrian, 2: cyclist\n        difficulty: int. eval difficulty, 0: easy, 1: normal, 2: hard\n        metric: eval type. 0: bbox, 1: bev, 2: 3d\n        min_overlap: float, min overlap. official:\n            [[0.7, 0.5, 0.5], [0.7, 0.5, 0.5], [0.7, 0.5, 0.5]]\n            format: [metric, class]. choose one from matrix above.\n        num_parts: int. a parameter for fast calculate algorithm\n\n    Returns:\n        dict of recall, precision and aos\n    \"\"\"", "\n", "assert", "len", "(", "gt_annos", ")", "==", "len", "(", "dt_annos", ")", "\n", "num_examples", "=", "len", "(", "gt_annos", ")", "\n", "split_parts", "=", "get_split_parts", "(", "num_examples", ",", "num_parts", ")", "\n", "thresholdss", "=", "[", "]", "\n", "rets", "=", "calculate_iou_partly", "(", "dt_annos", ",", "gt_annos", ",", "metric", ",", "num_parts", ")", "\n", "overlaps", ",", "parted_overlaps", ",", "total_dt_num", ",", "total_gt_num", "=", "rets", "\n", "rets", "=", "_prepare_data", "(", "gt_annos", ",", "dt_annos", ",", "current_class", ",", "difficulty", ")", "\n", "(", "gt_datas_list", ",", "dt_datas_list", ",", "ignored_gts", ",", "ignored_dets", ",", "dontcares", ",", "\n", "total_dc_num", ",", "total_num_valid_gt", ")", "=", "rets", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_annos", ")", ")", ":", "\n", "        ", "rets", "=", "compute_statistics_jit", "(", "\n", "overlaps", "[", "i", "]", ",", "\n", "gt_datas_list", "[", "i", "]", ",", "\n", "dt_datas_list", "[", "i", "]", ",", "\n", "ignored_gts", "[", "i", "]", ",", "\n", "ignored_dets", "[", "i", "]", ",", "\n", "dontcares", "[", "i", "]", ",", "\n", "metric", ",", "\n", "min_overlap", "=", "min_overlap", ",", "\n", "thresh", "=", "0.0", ",", "\n", "compute_fp", "=", "False", ")", "\n", "tp", ",", "fp", ",", "fn", ",", "similarity", ",", "thresholds", "=", "rets", "\n", "thresholdss", "+=", "thresholds", ".", "tolist", "(", ")", "\n", "", "thresholdss", "=", "np", ".", "array", "(", "thresholdss", ")", "\n", "thresholds", "=", "get_thresholds", "(", "thresholdss", ",", "total_num_valid_gt", ")", "\n", "thresholds", "=", "np", ".", "array", "(", "thresholds", ")", "\n", "pr", "=", "np", ".", "zeros", "(", "[", "len", "(", "thresholds", ")", ",", "4", "]", ")", "\n", "idx", "=", "0", "\n", "for", "j", ",", "num_part", "in", "enumerate", "(", "split_parts", ")", ":", "\n", "        ", "gt_datas_part", "=", "np", ".", "concatenate", "(", "gt_datas_list", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "dt_datas_part", "=", "np", ".", "concatenate", "(", "dt_datas_list", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "dc_datas_part", "=", "np", ".", "concatenate", "(", "dontcares", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "ignored_dets_part", "=", "np", ".", "concatenate", "(", "ignored_dets", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "ignored_gts_part", "=", "np", ".", "concatenate", "(", "ignored_gts", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "fused_compute_statistics", "(", "\n", "parted_overlaps", "[", "j", "]", ",", "\n", "pr", ",", "\n", "total_gt_num", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "\n", "total_dt_num", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "\n", "total_dc_num", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "\n", "gt_datas_part", ",", "\n", "dt_datas_part", ",", "\n", "dc_datas_part", ",", "\n", "ignored_gts_part", ",", "\n", "ignored_dets_part", ",", "\n", "metric", ",", "\n", "min_overlap", "=", "min_overlap", ",", "\n", "thresholds", "=", "thresholds", ",", "\n", "compute_aos", "=", "compute_aos", ")", "\n", "idx", "+=", "num_part", "\n", "", "N_SAMPLE_PTS", "=", "41", "\n", "precision", "=", "np", ".", "zeros", "(", "[", "N_SAMPLE_PTS", "]", ")", "\n", "recall", "=", "np", ".", "zeros", "(", "[", "N_SAMPLE_PTS", "]", ")", "\n", "aos", "=", "np", ".", "zeros", "(", "[", "N_SAMPLE_PTS", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "thresholds", ")", ")", ":", "\n", "        ", "recall", "[", "i", "]", "=", "pr", "[", "i", ",", "0", "]", "/", "(", "pr", "[", "i", ",", "0", "]", "+", "pr", "[", "i", ",", "2", "]", ")", "\n", "precision", "[", "i", "]", "=", "pr", "[", "i", ",", "0", "]", "/", "(", "pr", "[", "i", ",", "0", "]", "+", "pr", "[", "i", ",", "1", "]", ")", "\n", "if", "compute_aos", ":", "\n", "            ", "aos", "[", "i", "]", "=", "pr", "[", "i", ",", "3", "]", "/", "(", "pr", "[", "i", ",", "0", "]", "+", "pr", "[", "i", ",", "1", "]", ")", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "thresholds", ")", ")", ":", "\n", "        ", "precision", "[", "i", "]", "=", "np", ".", "max", "(", "precision", "[", "i", ":", "]", ")", "\n", "recall", "[", "i", "]", "=", "np", ".", "max", "(", "recall", "[", "i", ":", "]", ")", "\n", "if", "compute_aos", ":", "\n", "            ", "aos", "[", "i", "]", "=", "np", ".", "max", "(", "aos", "[", "i", ":", "]", ")", "\n", "", "", "ret_dict", "=", "{", "\n", "\"recall\"", ":", "recall", ",", "\n", "\"precision\"", ":", "precision", ",", "\n", "\"orientation\"", ":", "aos", ",", "\n", "}", "\n", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.eval_class_v3": [[649, 757], ["len", "eval.get_split_parts", "eval.calculate_iou_partly", "len", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "len", "len", "enumerate", "eval._prepare_data", "enumerate", "range", "numpy.array", "eval.get_thresholds", "numpy.array", "numpy.zeros", "enumerate", "range", "range", "len", "eval.compute_statistics_jit", "np.array.tolist", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "eval.fused_compute_statistics", "len", "len", "numpy.max", "numpy.max", "len", "numpy.max"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_split_parts", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.calculate_iou_partly", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval._prepare_data", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_thresholds", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.compute_statistics_jit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.fused_compute_statistics"], ["", "def", "eval_class_v3", "(", "gt_annos", ",", "\n", "dt_annos", ",", "\n", "current_classes", ",", "\n", "difficultys", ",", "\n", "metric", ",", "\n", "min_overlaps", ",", "\n", "compute_aos", "=", "False", ",", "\n", "num_parts", "=", "50", ")", ":", "\n", "    ", "\"\"\"Kitti eval. support 2d/bev/3d/aos eval. support 0.5:0.05:0.95 coco AP.\n    Args:\n        gt_annos: dict, must from get_label_annos() in kitti_common.py\n        dt_annos: dict, must from get_label_annos() in kitti_common.py\n        current_class: int, 0: car, 1: pedestrian, 2: cyclist\n        difficulty: int. eval difficulty, 0: easy, 1: normal, 2: hard\n        metric: eval type. 0: bbox, 1: bev, 2: 3d\n        min_overlap: float, min overlap. official:\n            [[0.7, 0.5, 0.5], [0.7, 0.5, 0.5], [0.7, 0.5, 0.5]]\n            format: [metric, class]. choose one from matrix above.\n        num_parts: int. a parameter for fast calculate algorithm\n\n    Returns:\n        dict of recall, precision and aos\n    \"\"\"", "\n", "assert", "len", "(", "gt_annos", ")", "==", "len", "(", "dt_annos", ")", "\n", "num_examples", "=", "len", "(", "gt_annos", ")", "\n", "split_parts", "=", "get_split_parts", "(", "num_examples", ",", "num_parts", ")", "\n", "\n", "rets", "=", "calculate_iou_partly", "(", "dt_annos", ",", "gt_annos", ",", "metric", ",", "num_parts", ")", "\n", "overlaps", ",", "parted_overlaps", ",", "total_dt_num", ",", "total_gt_num", "=", "rets", "\n", "N_SAMPLE_PTS", "=", "41", "\n", "num_minoverlap", "=", "len", "(", "min_overlaps", ")", "\n", "num_class", "=", "len", "(", "current_classes", ")", "\n", "num_difficulty", "=", "len", "(", "difficultys", ")", "\n", "precision", "=", "np", ".", "zeros", "(", "\n", "[", "num_class", ",", "num_difficulty", ",", "num_minoverlap", ",", "N_SAMPLE_PTS", "]", ")", "\n", "recall", "=", "np", ".", "zeros", "(", "\n", "[", "num_class", ",", "num_difficulty", ",", "num_minoverlap", ",", "N_SAMPLE_PTS", "]", ")", "\n", "aos", "=", "np", ".", "zeros", "(", "[", "num_class", ",", "num_difficulty", ",", "num_minoverlap", ",", "N_SAMPLE_PTS", "]", ")", "\n", "for", "m", ",", "current_class", "in", "enumerate", "(", "current_classes", ")", ":", "\n", "        ", "for", "l", ",", "difficulty", "in", "enumerate", "(", "difficultys", ")", ":", "\n", "            ", "rets", "=", "_prepare_data", "(", "gt_annos", ",", "dt_annos", ",", "current_class", ",", "difficulty", ")", "\n", "(", "gt_datas_list", ",", "dt_datas_list", ",", "ignored_gts", ",", "ignored_dets", ",", "\n", "dontcares", ",", "total_dc_num", ",", "total_num_valid_gt", ")", "=", "rets", "\n", "for", "k", ",", "min_overlap", "in", "enumerate", "(", "min_overlaps", "[", ":", ",", "metric", ",", "m", "]", ")", ":", "\n", "                ", "thresholdss", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_annos", ")", ")", ":", "\n", "                    ", "rets", "=", "compute_statistics_jit", "(", "\n", "overlaps", "[", "i", "]", ",", "\n", "gt_datas_list", "[", "i", "]", ",", "\n", "dt_datas_list", "[", "i", "]", ",", "\n", "ignored_gts", "[", "i", "]", ",", "\n", "ignored_dets", "[", "i", "]", ",", "\n", "dontcares", "[", "i", "]", ",", "\n", "metric", ",", "\n", "min_overlap", "=", "min_overlap", ",", "\n", "thresh", "=", "0.0", ",", "\n", "compute_fp", "=", "False", ")", "\n", "tp", ",", "fp", ",", "fn", ",", "similarity", ",", "thresholds", "=", "rets", "\n", "thresholdss", "+=", "thresholds", ".", "tolist", "(", ")", "\n", "", "thresholdss", "=", "np", ".", "array", "(", "thresholdss", ")", "\n", "thresholds", "=", "get_thresholds", "(", "thresholdss", ",", "total_num_valid_gt", ")", "\n", "thresholds", "=", "np", ".", "array", "(", "thresholds", ")", "\n", "pr", "=", "np", ".", "zeros", "(", "[", "len", "(", "thresholds", ")", ",", "4", "]", ")", "\n", "idx", "=", "0", "\n", "for", "j", ",", "num_part", "in", "enumerate", "(", "split_parts", ")", ":", "\n", "                    ", "gt_datas_part", "=", "np", ".", "concatenate", "(", "\n", "gt_datas_list", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "dt_datas_part", "=", "np", ".", "concatenate", "(", "\n", "dt_datas_list", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "dc_datas_part", "=", "np", ".", "concatenate", "(", "\n", "dontcares", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "ignored_dets_part", "=", "np", ".", "concatenate", "(", "\n", "ignored_dets", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "ignored_gts_part", "=", "np", ".", "concatenate", "(", "\n", "ignored_gts", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "fused_compute_statistics", "(", "\n", "parted_overlaps", "[", "j", "]", ",", "\n", "pr", ",", "\n", "total_gt_num", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "\n", "total_dt_num", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "\n", "total_dc_num", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "\n", "gt_datas_part", ",", "\n", "dt_datas_part", ",", "\n", "dc_datas_part", ",", "\n", "ignored_gts_part", ",", "\n", "ignored_dets_part", ",", "\n", "metric", ",", "\n", "min_overlap", "=", "min_overlap", ",", "\n", "thresholds", "=", "thresholds", ",", "\n", "compute_aos", "=", "compute_aos", ")", "\n", "idx", "+=", "num_part", "\n", "", "for", "i", "in", "range", "(", "len", "(", "thresholds", ")", ")", ":", "\n", "                    ", "recall", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "pr", "[", "i", ",", "0", "]", "/", "(", "pr", "[", "i", ",", "0", "]", "+", "pr", "[", "i", ",", "2", "]", ")", "\n", "precision", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "pr", "[", "i", ",", "0", "]", "/", "(", "pr", "[", "i", ",", "0", "]", "+", "pr", "[", "i", ",", "1", "]", ")", "\n", "if", "compute_aos", ":", "\n", "                        ", "aos", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "pr", "[", "i", ",", "3", "]", "/", "(", "pr", "[", "i", ",", "0", "]", "+", "pr", "[", "i", ",", "1", "]", ")", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "thresholds", ")", ")", ":", "\n", "                    ", "precision", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "np", ".", "max", "(", "\n", "precision", "[", "m", ",", "l", ",", "k", ",", "i", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "recall", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "np", ".", "max", "(", "recall", "[", "m", ",", "l", ",", "k", ",", "i", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "if", "compute_aos", ":", "\n", "                        ", "aos", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "np", ".", "max", "(", "aos", "[", "m", ",", "l", ",", "k", ",", "i", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "", "", "", "", "ret_dict", "=", "{", "\n", "\"recall\"", ":", "recall", ",", "\n", "\"precision\"", ":", "precision", ",", "\n", "\"orientation\"", ":", "aos", ",", "\n", "}", "\n", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.do_eval": [[759, 781], ["range", "range", "range", "eval.eval_class", "mAP_bbox.append", "eval.eval_class", "mAP_bev.append", "eval.eval_class", "mAP_3d.append", "eval.get_mAP", "mAP_aos.append", "eval.get_mAP", "eval.get_mAP", "eval.get_mAP"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.eval_class", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.eval_class", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.eval_class", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_mAP", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_mAP", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_mAP", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_mAP"], ["", "def", "do_eval", "(", "gt_annos", ",", "dt_annos", ",", "current_class", ",", "min_overlaps", ",", "\n", "compute_aos", "=", "False", ")", ":", "\n", "\n", "    ", "mAP_bbox", "=", "[", "]", "\n", "mAP_aos", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "# i=difficulty", "\n", "        ", "ret", "=", "eval_class", "(", "gt_annos", ",", "dt_annos", ",", "current_class", ",", "i", ",", "0", ",", "\n", "min_overlaps", "[", "0", "]", ",", "compute_aos", ")", "\n", "mAP_bbox", ".", "append", "(", "get_mAP", "(", "ret", "[", "\"precision\"", "]", ")", ")", "\n", "if", "compute_aos", ":", "\n", "            ", "mAP_aos", ".", "append", "(", "get_mAP", "(", "ret", "[", "\"orientation\"", "]", ")", ")", "\n", "", "", "mAP_bev", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "ret", "=", "eval_class", "(", "gt_annos", ",", "dt_annos", ",", "current_class", ",", "i", ",", "1", ",", "\n", "min_overlaps", "[", "1", "]", ")", "\n", "mAP_bev", ".", "append", "(", "get_mAP", "(", "ret", "[", "\"precision\"", "]", ")", ")", "\n", "", "mAP_3d", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "ret", "=", "eval_class", "(", "gt_annos", ",", "dt_annos", ",", "current_class", ",", "i", ",", "2", ",", "\n", "min_overlaps", "[", "2", "]", ")", "\n", "mAP_3d", ".", "append", "(", "get_mAP", "(", "ret", "[", "\"precision\"", "]", ")", ")", "\n", "", "return", "mAP_bbox", ",", "mAP_bev", ",", "mAP_3d", ",", "mAP_aos", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_mAP_v2": [[791, 796], ["range"], "function", ["None"], ["def", "get_mAP_v2", "(", "prec", ")", ":", "\n", "    ", "sums", "=", "0", "\n", "for", "i", "in", "range", "(", "1", ",", "prec", ".", "shape", "[", "-", "1", "]", ",", "1", ")", ":", "\n", "        ", "sums", "=", "sums", "+", "prec", "[", "...", ",", "i", "]", "\n", "", "return", "sums", "/", "40", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.do_eval_v2": [[797, 820], ["eval.eval_class_v3", "eval.get_mAP_v2", "eval.eval_class_v3", "eval.get_mAP_v2", "eval.eval_class_v3", "eval.get_mAP_v2", "eval.get_mAP_v2"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.eval_class_v3", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_mAP_v2", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.eval_class_v3", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_mAP_v2", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.eval_class_v3", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_mAP_v2", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_mAP_v2"], ["", "def", "do_eval_v2", "(", "gt_annos", ",", "\n", "dt_annos", ",", "\n", "current_classes", ",", "\n", "min_overlaps", ",", "\n", "compute_aos", "=", "False", ",", "\n", "difficultys", "=", "[", "0", ",", "1", ",", "2", "]", ")", ":", "\n", "# min_overlaps: [num_minoverlap, metric, num_class]", "\n", "    ", "ret", "=", "eval_class_v3", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "difficultys", ",", "0", ",", "\n", "min_overlaps", ",", "compute_aos", ")", "\n", "# ret: [num_class, num_diff, num_minoverlap, num_sample_points]", "\n", "mAP_bbox", "=", "get_mAP_v2", "(", "ret", "[", "\"precision\"", "]", ")", "\n", "#print('precision',ret[\"precision\"])", "\n", "#print('recall',ret[\"recall\"])", "\n", "mAP_aos", "=", "None", "\n", "if", "compute_aos", ":", "\n", "        ", "mAP_aos", "=", "get_mAP_v2", "(", "ret", "[", "\"orientation\"", "]", ")", "\n", "", "ret", "=", "eval_class_v3", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "difficultys", ",", "1", ",", "\n", "min_overlaps", ")", "\n", "mAP_bev", "=", "get_mAP_v2", "(", "ret", "[", "\"precision\"", "]", ")", "\n", "ret", "=", "eval_class_v3", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "difficultys", ",", "2", ",", "\n", "min_overlaps", ")", "\n", "mAP_3d", "=", "get_mAP_v2", "(", "ret", "[", "\"precision\"", "]", ")", "\n", "return", "mAP_bbox", ",", "mAP_bev", ",", "mAP_3d", ",", "mAP_aos", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.do_coco_style_eval": [[822, 838], ["numpy.zeros", "range", "eval.do_eval_v2", "mAP_bbox.mean.mean", "mAP_bev.mean.mean", "mAP_3d.mean.mean", "range", "mAP_aos.mean.mean", "numpy.linspace"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.do_eval_v2"], ["", "def", "do_coco_style_eval", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "overlap_ranges", ",", "\n", "compute_aos", ")", ":", "\n", "# overlap_ranges: [range, metric, num_class]", "\n", "    ", "min_overlaps", "=", "np", ".", "zeros", "(", "[", "10", ",", "*", "overlap_ranges", ".", "shape", "[", "1", ":", "]", "]", ")", "\n", "for", "i", "in", "range", "(", "overlap_ranges", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "overlap_ranges", ".", "shape", "[", "2", "]", ")", ":", "\n", "            ", "min_overlaps", "[", ":", ",", "i", ",", "j", "]", "=", "np", ".", "linspace", "(", "*", "overlap_ranges", "[", ":", ",", "i", ",", "j", "]", ")", "\n", "", "", "mAP_bbox", ",", "mAP_bev", ",", "mAP_3d", ",", "mAP_aos", "=", "do_eval_v2", "(", "\n", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "min_overlaps", ",", "compute_aos", ")", "\n", "# ret: [num_class, num_diff, num_minoverlap]", "\n", "mAP_bbox", "=", "mAP_bbox", ".", "mean", "(", "-", "1", ")", "\n", "mAP_bev", "=", "mAP_bev", ".", "mean", "(", "-", "1", ")", "\n", "mAP_3d", "=", "mAP_3d", ".", "mean", "(", "-", "1", ")", "\n", "if", "mAP_aos", "is", "not", "None", ":", "\n", "        ", "mAP_aos", "=", "mAP_aos", ".", "mean", "(", "-", "1", ")", "\n", "", "return", "mAP_bbox", ",", "mAP_bev", ",", "mAP_3d", ",", "mAP_aos", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.print_str": [[840, 847], ["sysio.StringIO.truncate", "sysio.StringIO.seek", "print", "sysio.StringIO.getvalue", "io.StringIO"], "function", ["None"], ["", "def", "print_str", "(", "value", ",", "*", "arg", ",", "sstream", "=", "None", ")", ":", "\n", "    ", "if", "sstream", "is", "None", ":", "\n", "        ", "sstream", "=", "sysio", ".", "StringIO", "(", ")", "\n", "", "sstream", ".", "truncate", "(", "0", ")", "\n", "sstream", ".", "seek", "(", "0", ")", "\n", "print", "(", "value", ",", "*", "arg", ",", "file", "=", "sstream", ")", "\n", "return", "sstream", ".", "getvalue", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_official_eval_result_v1": [[849, 898], ["numpy.array", "numpy.array", "isinstance", "eval.do_eval", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str", "class_to_name.items", "eval.print_str"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.do_eval", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.print_str", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.print_str", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.print_str", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.print_str", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.print_str"], ["", "def", "get_official_eval_result_v1", "(", "gt_annos", ",", "dt_annos", ",", "current_class", ")", ":", "\n", "    ", "mAP_0_7", "=", "np", ".", "array", "(", "[", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "0.5", "]", ",", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "0.5", "]", ",", "\n", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "0.5", "]", "]", ")", "\n", "mAP_0_5", "=", "np", ".", "array", "(", "[", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "\n", "0.5", "]", ",", "[", "0.5", ",", "0.25", ",", "0.25", ",", "0.5", ",", "0.25", "]", ",", "\n", "[", "0.5", ",", "0.25", ",", "0.25", ",", "0.5", ",", "0.25", "]", "]", ")", "\n", "mAP_list", "=", "[", "mAP_0_7", ",", "mAP_0_5", "]", "\n", "class_to_name", "=", "{", "\n", "0", ":", "'Car'", ",", "\n", "1", ":", "'Pedestrian'", ",", "\n", "2", ":", "'Cyclist'", ",", "\n", "3", ":", "'Van'", ",", "\n", "4", ":", "'Person_sitting'", ",", "\n", "}", "\n", "name_to_class", "=", "{", "v", ":", "n", "for", "n", ",", "v", "in", "class_to_name", ".", "items", "(", ")", "}", "\n", "if", "isinstance", "(", "current_class", ",", "str", ")", ":", "\n", "        ", "current_class", "=", "name_to_class", "[", "current_class", "]", "\n", "", "result", "=", "''", "\n", "# check whether alpha is valid", "\n", "compute_aos", "=", "False", "\n", "for", "anno", "in", "dt_annos", ":", "\n", "        ", "if", "anno", "[", "'alpha'", "]", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "            ", "if", "anno", "[", "'alpha'", "]", "[", "0", "]", "!=", "-", "10", ":", "\n", "                ", "compute_aos", "=", "True", "\n", "", "break", "\n", "", "", "for", "mAP", "in", "mAP_list", ":", "\n", "# mAP threshold matrix: [num_minoverlap, metric, class]", "\n", "        ", "mAPbbox", ",", "mAPbev", ",", "mAP3d", ",", "mAPaos", "=", "do_eval", "(", "\n", "gt_annos", ",", "dt_annos", ",", "current_class", ",", "mAP", "[", ":", ",", "current_class", "]", ",", "\n", "compute_aos", ")", "\n", "# mAP: [num_class, num_diff, num_minoverlap]", "\n", "result", "+=", "print_str", "(", "\n", "(", "f\"{class_to_name[current_class]} \"", "\n", "\"AP@{:.2f}, {:.2f}, {:.2f}:\"", ".", "format", "(", "*", "mAP", "[", ":", ",", "current_class", "]", ")", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bbox AP:{mAPbbox[0]:.2f}, \"", "\n", "f\"{mAPbbox[1]:.2f}, \"", "\n", "f\"{mAPbbox[2]:.2f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bev  AP:{mAPbev[0]:.2f}, \"", "\n", "f\"{mAPbev[1]:.2f}, \"", "\n", "f\"{mAPbev[2]:.2f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"3d   AP:{mAP3d[0]:.2f}, \"", "\n", "f\"{mAP3d[1]:.2f}, \"", "\n", "f\"{mAP3d[2]:.2f}\"", ")", ")", "\n", "if", "compute_aos", ":", "\n", "            ", "result", "+=", "print_str", "(", "(", "f\"aos  AP:{mAPaos[0]:.2f}, \"", "\n", "f\"{mAPaos[1]:.2f}, \"", "\n", "f\"{mAPaos[2]:.2f}\"", ")", ")", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_official_eval_result": [[900, 961], ["numpy.array", "numpy.array", "numpy.stack", "eval.do_eval_v2", "enumerate", "isinstance", "isinstance", "range", "class_to_name.items", "current_classes_int.append", "current_classes_int.append", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.do_eval_v2", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.print_str", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.print_str", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.print_str", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.print_str", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.print_str"], ["", "def", "get_official_eval_result", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "difficultys", "=", "[", "0", ",", "1", ",", "2", "]", ")", ":", "\n", "    ", "overlap_0_7", "=", "np", ".", "array", "(", "[", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "\n", "0.5", ",", "0.7", ",", "0.7", ",", "0.7", "]", ",", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "0.5", ",", "0.7", ",", "0.7", ",", "0.7", "]", ",", "\n", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "0.5", ",", "0.7", ",", "0.7", ",", "0.7", "]", "]", ")", "\n", "overlap_0_5", "=", "np", ".", "array", "(", "[", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "\n", "0.5", ",", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.25", ",", "0.25", ",", "0.5", ",", "0.25", ",", "0.5", ",", "0.5", ",", "0.5", "]", ",", "\n", "[", "0.5", ",", "0.25", ",", "0.25", ",", "0.5", ",", "0.25", ",", "0.5", ",", "0.5", ",", "0.5", "]", "]", ")", "\n", "min_overlaps", "=", "np", ".", "stack", "(", "[", "overlap_0_7", ",", "overlap_0_5", "]", ",", "axis", "=", "0", ")", "# [2, 3, 5]", "\n", "class_to_name", "=", "{", "\n", "0", ":", "'Car'", ",", "\n", "1", ":", "'Pedestrian'", ",", "\n", "2", ":", "'Cyclist'", ",", "\n", "3", ":", "'Van'", ",", "\n", "4", ":", "'Person_sitting'", ",", "\n", "5", ":", "'car'", ",", "\n", "6", ":", "'tractor'", ",", "\n", "7", ":", "'trailer'", ",", "\n", "}", "\n", "name_to_class", "=", "{", "v", ":", "n", "for", "n", ",", "v", "in", "class_to_name", ".", "items", "(", ")", "}", "\n", "if", "not", "isinstance", "(", "current_classes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "current_classes", "=", "[", "current_classes", "]", "\n", "", "current_classes_int", "=", "[", "]", "\n", "for", "curcls", "in", "current_classes", ":", "\n", "        ", "if", "isinstance", "(", "curcls", ",", "str", ")", ":", "\n", "            ", "current_classes_int", ".", "append", "(", "name_to_class", "[", "curcls", "]", ")", "\n", "", "else", ":", "\n", "            ", "current_classes_int", ".", "append", "(", "curcls", ")", "\n", "", "", "current_classes", "=", "current_classes_int", "\n", "min_overlaps", "=", "min_overlaps", "[", ":", ",", ":", ",", "current_classes", "]", "\n", "result", "=", "''", "\n", "# check whether alpha is valid", "\n", "compute_aos", "=", "False", "\n", "for", "anno", "in", "dt_annos", ":", "\n", "        ", "if", "anno", "[", "'alpha'", "]", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "            ", "if", "anno", "[", "'alpha'", "]", "[", "0", "]", "!=", "-", "10", ":", "\n", "                ", "compute_aos", "=", "True", "\n", "", "break", "\n", "", "", "mAPbbox", ",", "mAPbev", ",", "mAP3d", ",", "mAPaos", "=", "do_eval_v2", "(", "\n", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "min_overlaps", ",", "compute_aos", ",", "difficultys", ")", "\n", "for", "j", ",", "curcls", "in", "enumerate", "(", "current_classes", ")", ":", "\n", "# mAP threshold array: [num_minoverlap, metric, class]", "\n", "# mAP result: [num_class, num_diff, num_minoverlap]", "\n", "        ", "for", "i", "in", "range", "(", "min_overlaps", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "result", "+=", "print_str", "(", "\n", "(", "f\"{class_to_name[curcls]} \"", "\n", "\"AP@{:.2f}, {:.2f}, {:.2f}:\"", ".", "format", "(", "*", "min_overlaps", "[", "i", ",", ":", ",", "j", "]", ")", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bbox AP:{mAPbbox[j, 0, i]:.2f}, \"", "\n", "f\"{mAPbbox[j, 1, i]:.2f}, \"", "\n", "f\"{mAPbbox[j, 2, i]:.2f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bev  AP:{mAPbev[j, 0, i]:.2f}, \"", "\n", "f\"{mAPbev[j, 1, i]:.2f}, \"", "\n", "f\"{mAPbev[j, 2, i]:.2f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"3d   AP:{mAP3d[j, 0, i]:.2f}, \"", "\n", "f\"{mAP3d[j, 1, i]:.2f}, \"", "\n", "f\"{mAP3d[j, 2, i]:.2f}\"", ")", ")", "\n", "if", "compute_aos", ":", "\n", "                ", "result", "+=", "print_str", "(", "(", "f\"aos  AP:{mAPaos[j, 0, i]:.2f}, \"", "\n", "f\"{mAPaos[j, 1, i]:.2f}, \"", "\n", "f\"{mAPaos[j, 2, i]:.2f}\"", ")", ")", "\n", "\n", "", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_coco_eval_result": [[962, 1040], ["numpy.zeros", "enumerate", "eval.do_coco_style_eval", "enumerate", "isinstance", "isinstance", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str", "class_to_name.items", "current_classes_int.append", "current_classes_int.append", "len", "numpy.array", "numpy.array", "eval.print_str"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.do_coco_style_eval", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.print_str", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.print_str", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.print_str", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.print_str", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.print_str"], ["", "def", "get_coco_eval_result", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ")", ":", "\n", "    ", "class_to_name", "=", "{", "\n", "0", ":", "'Car'", ",", "\n", "1", ":", "'Pedestrian'", ",", "\n", "2", ":", "'Cyclist'", ",", "\n", "3", ":", "'Van'", ",", "\n", "4", ":", "'Person_sitting'", ",", "\n", "5", ":", "'car'", ",", "\n", "6", ":", "'tractor'", ",", "\n", "7", ":", "'trailer'", ",", "\n", "}", "\n", "class_to_range", "=", "{", "\n", "0", ":", "[", "0.5", ",", "1.0", ",", "0.05", "]", ",", "\n", "1", ":", "[", "0.25", ",", "0.75", ",", "0.05", "]", ",", "\n", "2", ":", "[", "0.25", ",", "0.75", ",", "0.05", "]", ",", "\n", "3", ":", "[", "0.5", ",", "1.0", ",", "0.05", "]", ",", "\n", "4", ":", "[", "0.25", ",", "0.75", ",", "0.05", "]", ",", "\n", "5", ":", "[", "0.5", ",", "1.0", ",", "0.05", "]", ",", "\n", "6", ":", "[", "0.5", ",", "1.0", ",", "0.05", "]", ",", "\n", "7", ":", "[", "0.5", ",", "1.0", ",", "0.05", "]", ",", "\n", "}", "\n", "class_to_range", "=", "{", "\n", "0", ":", "[", "0.5", ",", "0.95", ",", "10", "]", ",", "\n", "1", ":", "[", "0.25", ",", "0.7", ",", "10", "]", ",", "\n", "2", ":", "[", "0.25", ",", "0.7", ",", "10", "]", ",", "\n", "3", ":", "[", "0.5", ",", "0.95", ",", "10", "]", ",", "\n", "4", ":", "[", "0.25", ",", "0.7", ",", "10", "]", ",", "\n", "5", ":", "[", "0.5", ",", "0.95", ",", "10", "]", ",", "\n", "6", ":", "[", "0.5", ",", "0.95", ",", "10", "]", ",", "\n", "7", ":", "[", "0.5", ",", "0.95", ",", "10", "]", ",", "\n", "\n", "}", "\n", "\n", "name_to_class", "=", "{", "v", ":", "n", "for", "n", ",", "v", "in", "class_to_name", ".", "items", "(", ")", "}", "\n", "if", "not", "isinstance", "(", "current_classes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "current_classes", "=", "[", "current_classes", "]", "\n", "", "current_classes_int", "=", "[", "]", "\n", "for", "curcls", "in", "current_classes", ":", "\n", "        ", "if", "isinstance", "(", "curcls", ",", "str", ")", ":", "\n", "            ", "current_classes_int", ".", "append", "(", "name_to_class", "[", "curcls", "]", ")", "\n", "", "else", ":", "\n", "            ", "current_classes_int", ".", "append", "(", "curcls", ")", "\n", "", "", "current_classes", "=", "current_classes_int", "\n", "overlap_ranges", "=", "np", ".", "zeros", "(", "[", "3", ",", "3", ",", "len", "(", "current_classes", ")", "]", ")", "\n", "for", "i", ",", "curcls", "in", "enumerate", "(", "current_classes", ")", ":", "\n", "        ", "overlap_ranges", "[", ":", ",", ":", ",", "i", "]", "=", "np", ".", "array", "(", "class_to_range", "[", "curcls", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "", "result", "=", "''", "\n", "# check whether alpha is valid", "\n", "compute_aos", "=", "False", "\n", "for", "anno", "in", "dt_annos", ":", "\n", "        ", "if", "anno", "[", "'alpha'", "]", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "            ", "if", "anno", "[", "'alpha'", "]", "[", "0", "]", "!=", "-", "10", ":", "\n", "                ", "compute_aos", "=", "True", "\n", "", "break", "\n", "", "", "mAPbbox", ",", "mAPbev", ",", "mAP3d", ",", "mAPaos", "=", "do_coco_style_eval", "(", "\n", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "overlap_ranges", ",", "compute_aos", ")", "\n", "for", "j", ",", "curcls", "in", "enumerate", "(", "current_classes", ")", ":", "\n", "# mAP threshold array: [num_minoverlap, metric, class]", "\n", "# mAP result: [num_class, num_diff, num_minoverlap]", "\n", "        ", "o_range", "=", "np", ".", "array", "(", "class_to_range", "[", "curcls", "]", ")", "[", "[", "0", ",", "2", ",", "1", "]", "]", "\n", "o_range", "[", "1", "]", "=", "(", "o_range", "[", "2", "]", "-", "o_range", "[", "0", "]", ")", "/", "(", "o_range", "[", "1", "]", "-", "1", ")", "\n", "result", "+=", "print_str", "(", "\n", "(", "f\"{class_to_name[curcls]} \"", "\n", "\"coco AP@{:.2f}:{:.2f}:{:.2f}:\"", ".", "format", "(", "*", "o_range", ")", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bbox AP:{mAPbbox[j, 0]:.2f}, \"", "\n", "f\"{mAPbbox[j, 1]:.2f}, \"", "\n", "f\"{mAPbbox[j, 2]:.2f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bev  AP:{mAPbev[j, 0]:.2f}, \"", "\n", "f\"{mAPbev[j, 1]:.2f}, \"", "\n", "f\"{mAPbev[j, 2]:.2f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"3d   AP:{mAP3d[j, 0]:.2f}, \"", "\n", "f\"{mAP3d[j, 1]:.2f}, \"", "\n", "f\"{mAP3d[j, 2]:.2f}\"", ")", ")", "\n", "if", "compute_aos", ":", "\n", "            ", "result", "+=", "print_str", "(", "(", "f\"aos  AP:{mAPaos[j, 0]:.2f}, \"", "\n", "f\"{mAPaos[j, 1]:.2f}, \"", "\n", "f\"{mAPaos[j, 2]:.2f}\"", ")", ")", "\n", "", "", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.find._get_info_from_anaconda_info": [[12, 26], ["info.strip().replace.strip().replace", "info.strip().replace.splitlines", "info.strip().replace.strip", "line.split", "info_dict[].append", "isinstance"], "function", ["None"], ["def", "_get_info_from_anaconda_info", "(", "info", ",", "split", "=", "\":\"", ")", ":", "\n", "    ", "info", "=", "info", ".", "strip", "(", "\"\\n\"", ")", ".", "replace", "(", "\" \"", ",", "\"\"", ")", "\n", "info_dict", "=", "{", "}", "\n", "latest_key", "=", "\"\"", "\n", "for", "line", "in", "info", ".", "splitlines", "(", ")", ":", "\n", "        ", "if", "split", "in", "line", ":", "\n", "            ", "pair", "=", "line", ".", "split", "(", "split", ")", "\n", "info_dict", "[", "pair", "[", "0", "]", "]", "=", "pair", "[", "1", "]", "\n", "latest_key", "=", "pair", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "if", "not", "isinstance", "(", "info_dict", "[", "latest_key", "]", ",", "list", ")", ":", "\n", "                ", "info_dict", "[", "latest_key", "]", "=", "[", "info_dict", "[", "latest_key", "]", "]", "\n", "", "info_dict", "[", "latest_key", "]", ".", "append", "(", "line", ")", "\n", "", "", "return", "info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.find.find_anaconda": [[28, 41], ["path.exists", "pathlib.Path.home", "subprocess.check_output().decode", "find._get_info_from_anaconda_info", "RuntimeError", "subprocess.check_output"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BoxCoder.decode", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.find._get_info_from_anaconda_info"], ["", "def", "find_anaconda", "(", ")", ":", "\n", "# try find in default path", "\n", "    ", "path", "=", "Path", ".", "home", "(", ")", "/", "\"anaconda3\"", "\n", "if", "path", ".", "exists", "(", ")", ":", "\n", "        ", "return", "path", "\n", "# try conda in cmd", "\n", "", "try", ":", "\n", "        ", "info", "=", "subprocess", ".", "check_output", "(", "\n", "\"conda info\"", ",", "shell", "=", "True", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "info_dict", "=", "_get_info_from_anaconda_info", "(", "info", ")", "\n", "return", "info_dict", "[", "\"activeenvlocation\"", "]", "\n", "", "except", "subprocess", ".", "CalledProcessError", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"find anadonda failed\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.find.find_cuda": [[43, 71], ["os.environ.get", "os.environ.get", "RuntimeError", "glob.glob", "os.path.exists", "len", "subprocess.check_output().decode().rstrip", "os.path.dirname", "os.path.dirname", "subprocess.check_output().decode", "subprocess.check_output"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BoxCoder.decode"], ["", "", "def", "find_cuda", "(", ")", ":", "\n", "    ", "'''Finds the CUDA install path.'''", "\n", "# Guess #1", "\n", "cuda_home", "=", "os", ".", "environ", ".", "get", "(", "'CUDA_HOME'", ")", "or", "os", ".", "environ", ".", "get", "(", "'CUDA_PATH'", ")", "\n", "if", "cuda_home", "is", "None", ":", "\n", "# Guess #2", "\n", "        ", "if", "sys", ".", "platform", "==", "'win32'", ":", "\n", "            ", "cuda_homes", "=", "glob", ".", "glob", "(", "\n", "'C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v*.*'", ")", "\n", "if", "len", "(", "cuda_homes", ")", "==", "0", ":", "\n", "                ", "cuda_home", "=", "''", "\n", "", "else", ":", "\n", "                ", "cuda_home", "=", "cuda_homes", "[", "0", "]", "\n", "", "", "else", ":", "\n", "            ", "cuda_home", "=", "'/usr/local/cuda'", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "cuda_home", ")", ":", "\n", "# Guess #3", "\n", "            ", "try", ":", "\n", "                ", "which", "=", "'where'", "if", "sys", ".", "platform", "==", "'win32'", "else", "'which'", "\n", "nvcc", "=", "subprocess", ".", "check_output", "(", "\n", "[", "which", ",", "'nvcc'", "]", ")", ".", "decode", "(", ")", ".", "rstrip", "(", "'\\r\\n'", ")", "\n", "cuda_home", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "dirname", "(", "nvcc", ")", ")", "\n", "", "except", "Exception", ":", "\n", "                ", "cuda_home", "=", "None", "\n", "", "", "", "if", "cuda_home", "is", "None", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"No CUDA runtime is found, using CUDA_HOME='{}'\"", ".", "format", "(", "cuda_home", ")", ")", "\n", "", "return", "cuda_home", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.find.find_cuda_device_arch": [[73, 146], ["find.find_cuda", "pathlib.Path", "device_query_path.exists", "int", "tempfile.NamedTemporaryFile", "pathlib.Path", "f.write", "f.flush", "subprocess.check_output().decode().rstrip().split", "arch.split", "subprocess.check_output", "print", "subprocess.check_output", "subprocess.check_output().decode().rstrip().split", "str", "len", "subprocess.check_output().decode().rstrip", "e.output.decode", "subprocess.check_output().decode().rstrip", "e.output.decode", "RuntimeError", "subprocess.check_output().decode", "subprocess.check_output().decode", "subprocess.check_output", "subprocess.check_output"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.find.find_cuda", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BoxCoder.decode", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BoxCoder.decode", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BoxCoder.decode", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BoxCoder.decode"], ["", "def", "find_cuda_device_arch", "(", ")", ":", "\n", "    ", "if", "sys", ".", "platform", "==", "'win32'", ":", "\n", "# TODO: add windows support", "\n", "        ", "return", "None", "\n", "", "cuda_home", "=", "find_cuda", "(", ")", "\n", "if", "cuda_home", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "cuda_home", "=", "Path", "(", "cuda_home", ")", "\n", "try", ":", "\n", "        ", "device_query_path", "=", "cuda_home", "/", "'extras/demo_suite/deviceQuery'", "\n", "if", "not", "device_query_path", ".", "exists", "(", ")", ":", "\n", "            ", "source", "=", "\"\"\"\n            #include <cuda_runtime.h>\n            #include <iostream>\n            int main(){\n                int nDevices;\n                cudaGetDeviceCount(&nDevices);\n                for (int i = 0; i < nDevices; i++) {\n                    cudaDeviceProp prop;\n                    cudaGetDeviceProperties(&prop, i);\n                    std::cout << prop.major << \".\" << prop.minor << std::endl;\n                }\n                return 0;\n            }\n            \"\"\"", "\n", "with", "tempfile", ".", "NamedTemporaryFile", "(", "'w'", ",", "suffix", "=", "'.cc'", ")", "as", "f", ":", "\n", "                ", "f_path", "=", "Path", "(", "f", ".", "name", ")", "\n", "f", ".", "write", "(", "source", ")", "\n", "f", ".", "flush", "(", ")", "\n", "try", ":", "\n", "# TODO: add windows support", "\n", "                    ", "cmd", "=", "(", "\n", "f\"g++ {f.name} -o {f_path.stem}\"", "\n", "f\" -I{cuda_home / 'include'} -L{cuda_home / 'lib64'} -lcudart\"", "\n", ")", "\n", "print", "(", "cmd", ")", "\n", "subprocess", ".", "check_output", "(", "cmd", ",", "shell", "=", "True", ",", "cwd", "=", "f_path", ".", "parent", ")", "\n", "cmd", "=", "f\"./{f_path.stem}\"", "\n", "arches", "=", "subprocess", ".", "check_output", "(", "\n", "cmd", ",", "shell", "=", "True", ",", "\n", "cwd", "=", "f_path", ".", "parent", ")", ".", "decode", "(", ")", ".", "rstrip", "(", "'\\r\\n'", ")", ".", "split", "(", "\"\\n\"", ")", "\n", "if", "len", "(", "arches", ")", "<", "1", ":", "\n", "                        ", "return", "None", "\n", "", "arch", "=", "arches", "[", "0", "]", "\n", "", "except", ":", "\n", "                    ", "return", "None", "\n", "", "", "", "else", ":", "\n", "            ", "cmd", "=", "f\"{str(device_query_path)} | grep 'CUDA Capability'\"", "\n", "arch", "=", "subprocess", ".", "check_output", "(", "\n", "cmd", ",", "shell", "=", "True", ")", ".", "decode", "(", ")", ".", "rstrip", "(", "'\\r\\n'", ")", ".", "split", "(", "\" \"", ")", "[", "-", "1", "]", "\n", "# assert len(arch) == 2", "\n", "", "arch_list", "=", "[", "int", "(", "s", ")", "for", "s", "in", "arch", ".", "split", "(", "\".\"", ")", "]", "\n", "arch_int", "=", "arch_list", "[", "0", "]", "*", "10", "+", "arch_list", "[", "1", "]", "\n", "find_work_arch", "=", "False", "\n", "while", "arch_int", ">", "10", ":", "\n", "            ", "try", ":", "\n", "                ", "res", "=", "subprocess", ".", "check_output", "(", "\"nvcc -arch=sm_{}\"", ".", "format", "(", "arch_int", ")", ",", "shell", "=", "True", ",", "stderr", "=", "subprocess", ".", "STDOUT", ")", "\n", "", "except", "subprocess", ".", "CalledProcessError", "as", "e", ":", "\n", "                ", "if", "\"No input files specified\"", "in", "e", ".", "output", ".", "decode", "(", ")", ":", "\n", "                    ", "find_work_arch", "=", "True", "\n", "break", "\n", "", "elif", "\"is not defined for option 'gpu-architecture'\"", "in", "e", ".", "output", ".", "decode", "(", ")", ":", "\n", "                    ", "arch_int", "-=", "1", "\n", "", "else", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\"unknown error\"", ")", "\n", "", "", "", "if", "find_work_arch", ":", "\n", "            ", "arch", "=", "f\"sm_{arch_int}\"", "\n", "", "else", ":", "\n", "            ", "arch", "=", "None", "\n", "\n", "", "", "except", "Exception", ":", "\n", "        ", "arch", "=", "None", "\n", "", "return", "arch", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.find.get_gpu_memory_usage": [[148, 195], ["find.find_cuda", "pathlib.Path", "tempfile.NamedTemporaryFile", "pathlib.Path", "f.write", "f.flush", "print", "subprocess.check_output", "subprocess.check_output().decode", "json.loads", "subprocess.check_output"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.find.find_cuda", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BoxCoder.decode", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.loads"], ["", "def", "get_gpu_memory_usage", "(", ")", ":", "\n", "    ", "if", "sys", ".", "platform", "==", "'win32'", ":", "\n", "# TODO: add windows support", "\n", "        ", "return", "None", "\n", "", "cuda_home", "=", "find_cuda", "(", ")", "\n", "if", "cuda_home", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "cuda_home", "=", "Path", "(", "cuda_home", ")", "\n", "source", "=", "\"\"\"\n    #include <cuda_runtime.h>\n    #include <iostream>\n    int main(){\n        int nDevices;\n        cudaGetDeviceCount(&nDevices);\n        size_t free_m, total_m;\n        // output json format.\n        std::cout << \"[\";\n        for (int i = 0; i < nDevices; i++) {\n            cudaSetDevice(i);\n            cudaMemGetInfo(&free_m, &total_m);\n            std::cout << \"[\" << free_m << \",\" << total_m << \"]\";\n            if (i != nDevices - 1)\n                std::cout << \",\" << std::endl;\n        }\n        std::cout << \"]\" << std::endl;\n        return 0;\n    }\n    \"\"\"", "\n", "with", "tempfile", ".", "NamedTemporaryFile", "(", "'w'", ",", "suffix", "=", "'.cc'", ")", "as", "f", ":", "\n", "        ", "f_path", "=", "Path", "(", "f", ".", "name", ")", "\n", "f", ".", "write", "(", "source", ")", "\n", "f", ".", "flush", "(", ")", "\n", "try", ":", "\n", "# TODO: add windows support", "\n", "            ", "cmd", "=", "(", "\n", "f\"g++ {f.name} -o {f_path.stem} -std=c++11\"", "\n", "f\" -I{cuda_home / 'include'} -L{cuda_home / 'lib64'} -lcudart\"", ")", "\n", "print", "(", "cmd", ")", "\n", "subprocess", ".", "check_output", "(", "cmd", ",", "shell", "=", "True", ",", "cwd", "=", "f_path", ".", "parent", ")", "\n", "cmd", "=", "f\"./{f_path.stem}\"", "\n", "usages", "=", "subprocess", ".", "check_output", "(", "\n", "cmd", ",", "shell", "=", "True", ",", "cwd", "=", "f_path", ".", "parent", ")", ".", "decode", "(", ")", "\n", "usages", "=", "json", ".", "loads", "(", "usages", ")", "\n", "return", "usages", "\n", "", "except", ":", "\n", "            ", "return", "None", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.check.is_array_like": [[3, 5], ["isinstance"], "function", ["None"], ["def", "is_array_like", "(", "x", ")", ":", "\n", "    ", "return", "isinstance", "(", "x", ",", "(", "list", ",", "tuple", ",", "np", ".", "ndarray", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.check.shape_mergeable": [[6, 16], ["check.is_array_like", "check.is_array_like", "numpy.array", "len", "len", "zip"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.check.is_array_like", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.check.is_array_like"], ["", "def", "shape_mergeable", "(", "x", ",", "expected_shape", ")", ":", "\n", "    ", "mergeable", "=", "True", "\n", "if", "is_array_like", "(", "x", ")", "and", "is_array_like", "(", "expected_shape", ")", ":", "\n", "        ", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "if", "len", "(", "x", ".", "shape", ")", "==", "len", "(", "expected_shape", ")", ":", "\n", "            ", "for", "s", ",", "s_ex", "in", "zip", "(", "x", ".", "shape", ",", "expected_shape", ")", ":", "\n", "                ", "if", "s_ex", "is", "not", "None", "and", "s", "!=", "s_ex", ":", "\n", "                    ", "mergeable", "=", "False", "\n", "break", "\n", "", "", "", "", "return", "mergeable", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.GLTextItem.__init__": [[174, 183], ["pyqtgraph.opengl.GLGraphicsItem.GLGraphicsItem.__init__"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "X", "=", "None", ",", "Y", "=", "None", ",", "Z", "=", "None", ",", "text", "=", "None", ",", "color", "=", "None", ")", ":", "\n", "        ", "GLGraphicsItem", ".", "__init__", "(", "self", ")", "\n", "self", ".", "color", "=", "color", "\n", "if", "color", "is", "None", ":", "\n", "            ", "self", ".", "color", "=", "QtCore", ".", "Qt", ".", "white", "\n", "", "self", ".", "text", "=", "text", "\n", "self", ".", "X", "=", "X", "\n", "self", ".", "Y", "=", "Y", "\n", "self", ".", "Z", "=", "Z", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.GLTextItem.setGLViewWidget": [[184, 186], ["None"], "methods", ["None"], ["", "def", "setGLViewWidget", "(", "self", ",", "GLViewWidget", ")", ":", "\n", "        ", "self", ".", "GLViewWidget", "=", "GLViewWidget", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.GLTextItem.setText": [[187, 190], ["bbox_plot.GLTextItem.update"], "methods", ["None"], ["", "def", "setText", "(", "self", ",", "text", ")", ":", "\n", "        ", "self", ".", "text", "=", "text", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.GLTextItem.setX": [[191, 194], ["bbox_plot.GLTextItem.update"], "methods", ["None"], ["", "def", "setX", "(", "self", ",", "X", ")", ":", "\n", "        ", "self", ".", "X", "=", "X", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.GLTextItem.setY": [[195, 198], ["bbox_plot.GLTextItem.update"], "methods", ["None"], ["", "def", "setY", "(", "self", ",", "Y", ")", ":", "\n", "        ", "self", ".", "Y", "=", "Y", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.GLTextItem.setZ": [[199, 202], ["bbox_plot.GLTextItem.update"], "methods", ["None"], ["", "def", "setZ", "(", "self", ",", "Z", ")", ":", "\n", "        ", "self", ".", "Z", "=", "Z", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.GLTextItem.paint": [[203, 206], ["bbox_plot.GLTextItem.GLViewWidget.qglColor", "bbox_plot.GLTextItem.GLViewWidget.renderText"], "methods", ["None"], ["", "def", "paint", "(", "self", ")", ":", "\n", "        ", "self", ".", "GLViewWidget", ".", "qglColor", "(", "self", ".", "color", ")", "\n", "self", ".", "GLViewWidget", ".", "renderText", "(", "self", ".", "X", ",", "self", ".", "Y", ",", "self", ".", "Z", ",", "self", ".", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.GLLabelItem.__init__": [[209, 218], ["pyqtgraph.Qt.QtGui.QFont", "pyqtgraph.opengl.GLGraphicsItem.GLGraphicsItem.__init__", "bbox_plot.GLLabelItem.font.setPointSizeF"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pos", "=", "None", ",", "text", "=", "None", ",", "color", "=", "None", ",", "font", "=", "QtGui", ".", "QFont", "(", ")", ")", ":", "\n", "        ", "GLGraphicsItem", ".", "__init__", "(", "self", ")", "\n", "self", ".", "color", "=", "color", "\n", "if", "color", "is", "None", ":", "\n", "            ", "self", ".", "color", "=", "QtCore", ".", "Qt", ".", "white", "\n", "", "self", ".", "text", "=", "text", "\n", "self", ".", "pos", "=", "pos", "\n", "self", ".", "font", "=", "font", "\n", "self", ".", "font", ".", "setPointSizeF", "(", "20", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.GLLabelItem.setGLViewWidget": [[219, 221], ["None"], "methods", ["None"], ["", "def", "setGLViewWidget", "(", "self", ",", "GLViewWidget", ")", ":", "\n", "        ", "self", ".", "GLViewWidget", "=", "GLViewWidget", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.GLLabelItem.setData": [[222, 227], ["bbox_plot.GLLabelItem.update"], "methods", ["None"], ["", "def", "setData", "(", "self", ",", "pos", ",", "text", ",", "color", ")", ":", "\n", "        ", "self", ".", "text", "=", "text", "\n", "self", ".", "pos", "=", "pos", "\n", "self", ".", "color", "=", "color", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.GLLabelItem.paint": [[228, 236], ["bbox_plot.GLLabelItem.GLViewWidget.qglColor", "isinstance", "zip", "bbox_plot.GLLabelItem.GLViewWidget.renderText", "bbox_plot.GLLabelItem.GLViewWidget.renderText"], "methods", ["None"], ["", "def", "paint", "(", "self", ")", ":", "\n", "        ", "self", ".", "GLViewWidget", ".", "qglColor", "(", "self", ".", "color", ")", "\n", "if", "self", ".", "pos", "is", "not", "None", "and", "self", ".", "text", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "pos", ",", "(", "list", ",", "tuple", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "                ", "for", "p", ",", "text", "in", "zip", "(", "self", ".", "pos", ",", "self", ".", "text", ")", ":", "\n", "                    ", "self", ".", "GLViewWidget", ".", "renderText", "(", "*", "p", ",", "text", ",", "self", ".", "font", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "GLViewWidget", ".", "renderText", "(", "*", "self", ".", "pos", ",", "self", ".", "text", ",", "self", ".", "font", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.gl_color": [[37, 39], ["None"], "function", ["None"], ["", "def", "gl_color", "(", "color", ",", "alpha", "=", "1.0", ")", ":", "\n", "    ", "return", "(", "*", "color", ".", "value", ",", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.corner_to_length": [[41, 47], ["numpy.concatenate", "len", "bboxes.reshape.reshape"], "function", ["None"], ["", "def", "corner_to_length", "(", "bboxes", ")", ":", "\n", "    ", "if", "len", "(", "bboxes", ".", "shape", ")", "==", "1", ":", "\n", "        ", "bboxes", "=", "bboxes", ".", "reshape", "(", "[", "1", ",", "-", "1", "]", ")", "\n", "", "ndim", "=", "bboxes", ".", "shape", "[", "1", "]", "//", "2", "\n", "return", "np", ".", "concatenate", "(", "\n", "[", "bboxes", "[", ":", ",", ":", "ndim", "]", ",", "bboxes", "[", ":", ",", "ndim", ":", "]", "-", "bboxes", "[", ":", ",", ":", "ndim", "]", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.draw_bbox_in_ax": [[49, 90], ["zip", "numpy.zeros", "isinstance", "bbox_plot.corner_to_length", "matplotlib.Rectangle", "ax.add_patch", "ax.text", "range", "len"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.corner_to_length"], ["", "def", "draw_bbox_in_ax", "(", "ax", ",", "\n", "bboxes", ",", "\n", "rotations", "=", "None", ",", "\n", "fmt", "=", "FORMAT", ".", "Corner", ",", "\n", "labels", "=", "None", ",", "\n", "label_size", "=", "'small'", ",", "\n", "edgecolors", "=", "'r'", ",", "\n", "linestyle", "=", "'dashed'", ",", "\n", "alpha", "=", "0.5", ")", ":", "\n", "    ", "if", "rotations", "is", "None", ":", "\n", "        ", "rotations", "=", "np", ".", "zeros", "(", "[", "bboxes", ".", "shape", "[", "0", "]", "]", ")", "\n", "", "else", ":", "\n", "        ", "rotations", "=", "rotations", "/", "np", ".", "pi", "*", "180", "\n", "", "if", "labels", "is", "None", ":", "\n", "        ", "labels", "=", "[", "None", "]", "*", "bboxes", ".", "shape", "[", "0", "]", "\n", "", "if", "not", "isinstance", "(", "edgecolors", ",", "list", ")", ":", "\n", "        ", "edgecolors", "=", "[", "edgecolors", "for", "i", "in", "range", "(", "len", "(", "bboxes", ")", ")", "]", "\n", "", "if", "fmt", "==", "FORMAT", ".", "Corner", ":", "\n", "        ", "bboxes", "=", "corner_to_length", "(", "bboxes", ")", "\n", "", "for", "bbox", ",", "rot", ",", "e_color", ",", "label", "in", "zip", "(", "bboxes", ",", "rotations", ",", "edgecolors", ",", "\n", "labels", ")", ":", "\n", "        ", "rect_p", "=", "patches", ".", "Rectangle", "(", "\n", "bbox", "[", ":", "2", "]", ",", "\n", "bbox", "[", "2", "]", ",", "\n", "bbox", "[", "3", "]", ",", "\n", "rot", ",", "\n", "fill", "=", "False", ",", "\n", "edgecolor", "=", "e_color", ",", "\n", "linestyle", "=", "linestyle", ",", "\n", "alpha", "=", "alpha", ")", "\n", "ax", ".", "add_patch", "(", "rect_p", ")", "\n", "if", "label", "is", "not", "None", ":", "\n", "            ", "t", "=", "ax", ".", "text", "(", "\n", "bbox", "[", "0", "]", ",", "\n", "bbox", "[", "1", "]", ",", "\n", "label", ",", "\n", "ha", "=", "\"left\"", ",", "\n", "va", "=", "\"bottom\"", ",", "\n", "color", "=", "e_color", ",", "\n", "size", "=", "label_size", ")", "\n", "", "", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.draw_3d_bbox_in_ax": [[93, 109], ["zip", "isinstance", "zip", "zip", "zip", "matplotlib.Rectangle", "ax.set_clip_path", "ax.plot", "ax.plot", "ax.plot", "range", "len"], "function", ["None"], ["", "def", "draw_3d_bbox_in_ax", "(", "ax", ",", "bboxes", ",", "colors", "=", "'r'", ",", "alpha", "=", "0.5", ",", "image_shape", "=", "None", ")", ":", "\n", "# assume bboxes has right format.", "\n", "    ", "if", "not", "isinstance", "(", "colors", ",", "list", ")", ":", "\n", "        ", "colors", "=", "[", "colors", "for", "i", "in", "range", "(", "len", "(", "bboxes", ")", ")", "]", "\n", "", "for", "box", ",", "color", "in", "zip", "(", "bboxes", ",", "colors", ")", ":", "\n", "        ", "box_a", ",", "box_b", "=", "box", "[", ":", "4", "]", ",", "box", "[", "4", ":", "]", "\n", "for", "pa", ",", "pb", "in", "zip", "(", "box_a", ",", "box_a", "[", "[", "1", ",", "2", ",", "3", ",", "0", "]", "]", ")", ":", "\n", "            ", "ax", ".", "plot", "(", "[", "pa", "[", "0", "]", ",", "pb", "[", "0", "]", "]", ",", "[", "pa", "[", "1", "]", ",", "pb", "[", "1", "]", "]", ",", "color", "=", "color", ",", "alpha", "=", "alpha", ")", "\n", "", "for", "pa", ",", "pb", "in", "zip", "(", "box_b", ",", "box_b", "[", "[", "1", ",", "2", ",", "3", ",", "0", "]", "]", ")", ":", "\n", "            ", "ax", ".", "plot", "(", "[", "pa", "[", "0", "]", ",", "pb", "[", "0", "]", "]", ",", "[", "pa", "[", "1", "]", ",", "pb", "[", "1", "]", "]", ",", "color", "=", "color", ",", "alpha", "=", "alpha", ")", "\n", "", "for", "pa", ",", "pb", "in", "zip", "(", "box_a", ",", "box_b", ")", ":", "\n", "            ", "ax", ".", "plot", "(", "[", "pa", "[", "0", "]", ",", "pb", "[", "0", "]", "]", ",", "[", "pa", "[", "1", "]", ",", "pb", "[", "1", "]", "]", ",", "color", "=", "color", ",", "alpha", "=", "alpha", ")", "\n", "", "", "if", "image_shape", "is", "not", "None", ":", "\n", "        ", "patch", "=", "patches", ".", "Rectangle", "(", "[", "0", ",", "0", "]", ",", "image_shape", "[", "1", "]", ",", "image_shape", "[", "0", "]", ")", "\n", "ax", ".", "set_clip_path", "(", "patch", ")", "\n", "", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.draw_2d_bbox_in_ax": [[111, 142], ["zip", "isinstance", "zip", "ax.plot", "numpy.mean", "numpy.mean", "numpy.mean", "ax.arrow", "range", "numpy.concatenate", "numpy.concatenate", "len", "range"], "function", ["None"], ["", "def", "draw_2d_bbox_in_ax", "(", "ax", ",", "\n", "bboxes", ",", "\n", "colors", "=", "'r'", ",", "\n", "alpha", "=", "0.5", ",", "\n", "with_arrow", "=", "True", ",", "\n", "behind_axes", "=", "[", "0", ",", "1", "]", ")", ":", "\n", "# assume bboxes has right format. [N, 4, 2]", "\n", "    ", "if", "not", "isinstance", "(", "colors", ",", "list", ")", ":", "\n", "        ", "colors", "=", "[", "colors", "for", "i", "in", "range", "(", "len", "(", "bboxes", ")", ")", "]", "\n", "", "for", "box", ",", "color", "in", "zip", "(", "bboxes", ",", "colors", ")", ":", "\n", "        ", "for", "pa", ",", "pb", "in", "zip", "(", "box", ",", "box", "[", "[", "1", ",", "2", ",", "3", ",", "0", "]", "]", ")", ":", "\n", "            ", "ax", ".", "plot", "(", "[", "pa", "[", "0", "]", ",", "pb", "[", "0", "]", "]", ",", "[", "pa", "[", "1", "]", ",", "pb", "[", "1", "]", "]", ",", "color", "=", "color", ",", "alpha", "=", "alpha", ")", "\n", "", "if", "with_arrow", ":", "\n", "            ", "center", "=", "np", ".", "mean", "(", "box", ",", "axis", "=", "0", ")", "\n", "start", "=", "np", ".", "mean", "(", "\n", "np", ".", "concatenate", "(", "[", "center", "[", "np", ".", "newaxis", ",", "...", "]", ",", "box", "[", "behind_axes", "]", "]", ")", ",", "\n", "axis", "=", "0", ")", "\n", "front_axes", "=", "[", "i", "for", "i", "in", "range", "(", "4", ")", "if", "i", "not", "in", "behind_axes", "]", "\n", "end", "=", "np", ".", "mean", "(", "\n", "np", ".", "concatenate", "(", "[", "center", "[", "np", ".", "newaxis", ",", "...", "]", ",", "box", "[", "front_axes", "]", "]", ")", ",", "\n", "axis", "=", "0", ")", "\n", "ax", ".", "arrow", "(", "\n", "start", "[", "0", "]", ",", "\n", "start", "[", "1", "]", ",", "\n", "end", "[", "0", "]", "-", "start", "[", "0", "]", ",", "\n", "end", "[", "1", "]", "-", "start", "[", "1", "]", ",", "\n", "head_width", "=", "0.2", ",", "\n", "head_length", "=", "0.2", ",", "\n", "fc", "=", "color", ",", "\n", "ec", "=", "color", ")", "\n", "", "", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.draw_3d_bbox_in_3dax": [[144, 171], ["zip", "isinstance", "isinstance", "ax.scatter3D", "numpy.array", "mpl_toolkits.mplot3d.art3d.Poly3DCollection", "mpl_toolkits.mplot3d.art3d.Poly3DCollection.set_facecolor", "mpl_toolkits.mplot3d.art3d.Poly3DCollection.set_edgecolor", "mpl_toolkits.mplot3d.art3d.Poly3DCollection.set_alpha", "ax.add_collection3d", "range", "range", "len", "len"], "function", ["None"], ["", "def", "draw_3d_bbox_in_3dax", "(", "ax", ",", "bboxes", ",", "colors", "=", "'r'", ",", "alpha", "=", "0.25", ",", "facecolors", "=", "None", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "colors", ",", "list", ")", ":", "\n", "        ", "colors", "=", "[", "colors", "for", "i", "in", "range", "(", "len", "(", "bboxes", ")", ")", "]", "\n", "", "if", "not", "isinstance", "(", "facecolors", ",", "list", ")", ":", "\n", "        ", "facecolors", "=", "[", "facecolors", "for", "i", "in", "range", "(", "len", "(", "bboxes", ")", ")", "]", "\n", "\n", "", "for", "box", ",", "color", ",", "facecolor", "in", "zip", "(", "bboxes", ",", "colors", ",", "facecolors", ")", ":", "\n", "        ", "ax", ".", "scatter3D", "(", "box", "[", ":", ",", "0", "]", ",", "box", "[", ":", ",", "1", "]", ",", "box", "[", ":", ",", "2", "]", ",", "marker", "=", "'.'", ",", "color", "=", "color", ")", "\n", "verts", "=", "np", ".", "array", "(", "[", "\n", "[", "box", "[", "0", "]", ",", "box", "[", "1", "]", ",", "box", "[", "2", "]", ",", "box", "[", "3", "]", "]", ",", "\n", "[", "box", "[", "4", "]", ",", "box", "[", "5", "]", ",", "box", "[", "6", "]", ",", "box", "[", "7", "]", "]", ",", "\n", "[", "box", "[", "0", "]", ",", "box", "[", "3", "]", ",", "box", "[", "7", "]", ",", "box", "[", "4", "]", "]", ",", "\n", "[", "box", "[", "1", "]", ",", "box", "[", "2", "]", ",", "box", "[", "6", "]", ",", "box", "[", "5", "]", "]", ",", "\n", "[", "box", "[", "0", "]", ",", "box", "[", "1", "]", ",", "box", "[", "5", "]", ",", "box", "[", "4", "]", "]", ",", "\n", "[", "box", "[", "3", "]", ",", "box", "[", "2", "]", ",", "box", "[", "6", "]", ",", "box", "[", "7", "]", "]", ",", "\n", "]", ")", "\n", "mp3dcoll", "=", "Poly3DCollection", "(", "\n", "verts", ",", "\n", "linewidths", "=", "1", ",", "\n", "edgecolors", "=", "color", ",", "\n", "alpha", "=", "alpha", ",", "\n", "facecolors", "=", "facecolor", ")", "\n", "mp3dcoll", ".", "set_facecolor", "(", "facecolor", ")", "\n", "mp3dcoll", ".", "set_edgecolor", "(", "color", ")", "\n", "mp3dcoll", ".", "set_alpha", "(", "alpha", ")", "\n", "ax", ".", "add_collection3d", "(", "mp3dcoll", ")", "\n", "", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot._pltcolor_to_qtcolor": [[238, 250], ["None"], "function", ["None"], ["", "", "", "", "def", "_pltcolor_to_qtcolor", "(", "color", ")", ":", "\n", "    ", "color_map", "=", "{", "\n", "'r'", ":", "QtCore", ".", "Qt", ".", "red", ",", "\n", "'g'", ":", "QtCore", ".", "Qt", ".", "green", ",", "\n", "'b'", ":", "QtCore", ".", "Qt", ".", "blue", ",", "\n", "'k'", ":", "QtCore", ".", "Qt", ".", "black", ",", "\n", "'w'", ":", "QtCore", ".", "Qt", ".", "white", ",", "\n", "'y'", ":", "QtCore", ".", "Qt", ".", "yellow", ",", "\n", "'c'", ":", "QtCore", ".", "Qt", ".", "cyan", ",", "\n", "'m'", ":", "QtCore", ".", "Qt", ".", "magenta", ",", "\n", "}", "\n", "return", "color_map", "[", "color", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.draw_bounding_box": [[255, 258], ["second.core.box_np_ops.minmax_to_corner_3d", "bbox_plot.draw_3d_bboxlines_in_pyqt"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.minmax_to_corner_3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.draw_3d_bboxlines_in_pyqt"], ["def", "draw_bounding_box", "(", "widget", ",", "box_minmax", ",", "color", ")", ":", "\n", "    ", "bbox", "=", "minmax_to_corner_3d", "(", "box_minmax", ")", "\n", "return", "draw_3d_bboxlines_in_pyqt", "(", "widget", ",", "bbox", ",", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.draw_3d_bboxlines_in_pyqt": [[260, 332], ["zip", "bbox_plot._pltcolor_to_qtcolor", "numpy.zeros", "isinstance", "isinstance", "isinstance", "numpy.array", "np.concatenate.append", "numpy.array", "np.concatenate.append", "numpy.concatenate", "numpy.concatenate", "pyqtgraph.GLLinePlotItem", "widget.addItem", "gl.GLLinePlotItem.setData", "bbox_plot.gl_color", "bbox_plot.GLLabelItem", "bbox_plot.GLLabelItem.setGLViewWidget", "widget.addItem", "bbox_plot.GLLabelItem.setData", "range", "range", "list", "len", "len", "range", "len"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget._pltcolor_to_qtcolor", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.GLLabelItem.setData", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.GLLabelItem.setGLViewWidget", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.GLLabelItem.setData"], ["", "def", "draw_3d_bboxlines_in_pyqt", "(", "widget", ",", "\n", "bboxes", ",", "\n", "colors", "=", "GLColor", ".", "Green", ",", "\n", "width", "=", "1.0", ",", "\n", "labels", "=", "None", ",", "\n", "alpha", "=", "1.0", ",", "\n", "label_color", "=", "'r'", ",", "\n", "line_item", "=", "None", ",", "\n", "label_item", "=", "None", ")", ":", "\n", "    ", "if", "bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "bboxes", "=", "np", ".", "zeros", "(", "[", "0", ",", "8", ",", "3", "]", ")", "\n", "", "if", "not", "isinstance", "(", "colors", ",", "(", "list", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "colors", ",", "GLColor", ")", ":", "\n", "            ", "colors", "=", "gl_color", "(", "colors", ",", "alpha", ")", "\n", "", "colors", "=", "[", "colors", "for", "i", "in", "range", "(", "len", "(", "bboxes", ")", ")", "]", "\n", "", "if", "not", "isinstance", "(", "labels", ",", "(", "list", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "        ", "labels", "=", "[", "labels", "for", "i", "in", "range", "(", "len", "(", "bboxes", ")", ")", "]", "\n", "", "total_lines", "=", "[", "]", "\n", "total_colors", "=", "[", "]", "\n", "for", "box", ",", "facecolor", "in", "zip", "(", "bboxes", ",", "colors", ")", ":", "\n", "        ", "lines", "=", "np", ".", "array", "(", "[", "\n", "box", "[", "0", "]", ",", "box", "[", "1", "]", ",", "box", "[", "1", "]", ",", "box", "[", "2", "]", ",", "box", "[", "2", "]", ",", "box", "[", "3", "]", ",", "box", "[", "3", "]", ",", "box", "[", "0", "]", ",", "\n", "box", "[", "1", "]", ",", "box", "[", "5", "]", ",", "box", "[", "5", "]", ",", "box", "[", "4", "]", ",", "box", "[", "4", "]", ",", "box", "[", "0", "]", ",", "box", "[", "2", "]", ",", "box", "[", "6", "]", ",", "\n", "box", "[", "6", "]", ",", "box", "[", "7", "]", ",", "box", "[", "7", "]", ",", "box", "[", "3", "]", ",", "box", "[", "5", "]", ",", "box", "[", "6", "]", ",", "box", "[", "4", "]", ",", "box", "[", "7", "]", "\n", "]", ")", "\n", "total_lines", ".", "append", "(", "lines", ")", "\n", "color", "=", "np", ".", "array", "(", "[", "list", "(", "facecolor", ")", "for", "i", "in", "range", "(", "len", "(", "lines", ")", ")", "]", ")", "\n", "total_colors", ".", "append", "(", "color", ")", "\n", "", "if", "bboxes", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "        ", "total_lines", "=", "np", ".", "concatenate", "(", "total_lines", ",", "axis", "=", "0", ")", "\n", "total_colors", "=", "np", ".", "concatenate", "(", "total_colors", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "total_lines", "=", "None", "\n", "total_colors", "=", "None", "\n", "", "if", "line_item", "is", "None", ":", "\n", "        ", "line_item", "=", "gl", ".", "GLLinePlotItem", "(", "\n", "pos", "=", "total_lines", ",", "\n", "color", "=", "total_colors", ",", "\n", "width", "=", "width", ",", "\n", "antialias", "=", "True", ",", "\n", "mode", "=", "'lines'", ")", "\n", "widget", ".", "addItem", "(", "line_item", ")", "\n", "", "else", ":", "\n", "        ", "line_item", ".", "setData", "(", "\n", "pos", "=", "total_lines", ",", "\n", "color", "=", "total_colors", ",", "\n", "width", "=", "width", ",", "\n", "antialias", "=", "True", ",", "\n", "mode", "=", "'lines'", ")", "\n", "", "label_color_qt", "=", "_pltcolor_to_qtcolor", "(", "label_color", ")", "\n", "if", "labels", "is", "not", "None", ":", "\n", "        ", "if", "label_item", "is", "None", ":", "\n", "            ", "label_item", "=", "GLLabelItem", "(", "bboxes", "[", ":", ",", "0", ",", ":", "]", ",", "labels", ",", "label_color_qt", ")", "\n", "label_item", ".", "setGLViewWidget", "(", "widget", ")", "\n", "widget", ".", "addItem", "(", "label_item", ")", "\n", "", "else", ":", "\n", "            ", "label_item", ".", "setData", "(", "\n", "pos", "=", "bboxes", "[", ":", ",", "0", ",", ":", "]", ",", "text", "=", "labels", ",", "color", "=", "label_color_qt", ")", "\n", "", "", "\"\"\"\n    for box, label in zip(bboxes, labels):\n        if label is not None:\n            label_color_qt = _pltcolor_to_qtcolor(label_color)\n            t = GLTextItem(\n                X=box[0, 0],\n                Y=box[0, 1],\n                Z=box[0, 2],\n                text=label,\n                color=label_color_qt)\n            t.setGLViewWidget(widget)\n            widget.addItem(t)\n    \"\"\"", "\n", "return", "line_item", ",", "label_item", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.draw_bboxlines_in_pyqt": [[334, 387], ["zip", "numpy.concatenate", "numpy.concatenate", "bbox_plot._pltcolor_to_qtcolor", "isinstance", "isinstance", "isinstance", "numpy.array", "np.concatenate.append", "numpy.array", "np.concatenate.append", "pyqtgraph.GLLinePlotItem", "widget.addItem", "gl.GLLinePlotItem.setData", "bbox_plot.gl_color", "bbox_plot.GLLabelItem", "bbox_plot.GLLabelItem.setGLViewWidget", "widget.addItem", "bbox_plot.GLLabelItem.setData", "range", "range", "list", "len", "len", "range", "len"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget._pltcolor_to_qtcolor", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.GLLabelItem.setData", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.GLLabelItem.setGLViewWidget", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.GLLabelItem.setData"], ["", "def", "draw_bboxlines_in_pyqt", "(", "widget", ",", "\n", "bboxes", ",", "\n", "colors", "=", "GLColor", ".", "Green", ",", "\n", "width", "=", "1.0", ",", "\n", "labels", "=", "None", ",", "\n", "alpha", "=", "1.0", ",", "\n", "label_color", "=", "'r'", ",", "\n", "line_item", "=", "None", ",", "\n", "label_item", "=", "None", ")", ":", "\n", "    ", "if", "bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "return", "\n", "", "if", "not", "isinstance", "(", "colors", ",", "list", ")", ":", "\n", "        ", "if", "isinstance", "(", "colors", ",", "GLColor", ")", ":", "\n", "            ", "colors", "=", "gl_color", "(", "colors", ",", "alpha", ")", "\n", "", "colors", "=", "[", "colors", "for", "i", "in", "range", "(", "len", "(", "bboxes", ")", ")", "]", "\n", "", "if", "not", "isinstance", "(", "labels", ",", "list", ")", ":", "\n", "        ", "labels", "=", "[", "labels", "for", "i", "in", "range", "(", "len", "(", "bboxes", ")", ")", "]", "\n", "", "total_lines", "=", "[", "]", "\n", "total_colors", "=", "[", "]", "\n", "for", "box", ",", "facecolor", "in", "zip", "(", "bboxes", ",", "colors", ")", ":", "\n", "        ", "lines", "=", "np", ".", "array", "(", "\n", "[", "box", "[", "0", "]", ",", "box", "[", "1", "]", ",", "box", "[", "1", "]", ",", "box", "[", "2", "]", ",", "box", "[", "2", "]", ",", "box", "[", "3", "]", ",", "box", "[", "3", "]", ",", "box", "[", "0", "]", "]", ")", "\n", "total_lines", ".", "append", "(", "lines", ")", "\n", "color", "=", "np", ".", "array", "(", "[", "list", "(", "facecolor", ")", "for", "i", "in", "range", "(", "len", "(", "lines", ")", ")", "]", ")", "\n", "total_colors", ".", "append", "(", "color", ")", "\n", "", "total_lines", "=", "np", ".", "concatenate", "(", "total_lines", ",", "axis", "=", "0", ")", "\n", "total_colors", "=", "np", ".", "concatenate", "(", "total_colors", ",", "axis", "=", "0", ")", "\n", "if", "line_item", "is", "None", ":", "\n", "        ", "line_item", "=", "gl", ".", "GLLinePlotItem", "(", "\n", "pos", "=", "total_lines", ",", "\n", "color", "=", "total_colors", ",", "\n", "width", "=", "width", ",", "\n", "antialias", "=", "True", ",", "\n", "mode", "=", "'lines'", ")", "\n", "widget", ".", "addItem", "(", "line_item", ")", "\n", "", "else", ":", "\n", "        ", "line_item", ".", "setData", "(", "\n", "pos", "=", "total_lines", ",", "\n", "color", "=", "total_colors", ",", "\n", "width", "=", "width", ",", "\n", "antialias", "=", "True", ",", "\n", "mode", "=", "'lines'", ")", "\n", "", "label_color_qt", "=", "_pltcolor_to_qtcolor", "(", "label_color", ")", "\n", "if", "labels", "is", "not", "None", ":", "\n", "        ", "if", "label_item", "is", "None", ":", "\n", "            ", "label_item", "=", "GLLabelItem", "(", "bboxes", "[", ":", ",", "0", ",", ":", "]", ",", "labels", ",", "label_color_qt", ")", "\n", "label_item", ".", "setGLViewWidget", "(", "widget", ")", "\n", "widget", ".", "addItem", "(", "label_item", ")", "\n", "", "else", ":", "\n", "            ", "label_item", ".", "setData", "(", "\n", "pos", "=", "bboxes", "[", ":", ",", "0", ",", ":", "]", ",", "text", "=", "labels", ",", "color", "=", "label_color_qt", ")", "\n", "\n", "", "", "return", "line_item", ",", "label_item", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot._3d_bbox_to_mesh": [[389, 413], ["numpy.array", "enumerate", "numpy.concatenate", "numpy.concatenate", "verts_list.append", "faces_list.append"], "function", ["None"], ["", "def", "_3d_bbox_to_mesh", "(", "bboxes", ")", ":", "\n", "    ", "bbox_faces", "=", "np", ".", "array", "(", "[", "\n", "[", "0", ",", "1", ",", "2", "]", ",", "\n", "[", "0", ",", "2", ",", "3", "]", ",", "\n", "[", "4", ",", "5", ",", "6", "]", ",", "\n", "[", "4", ",", "6", ",", "7", "]", ",", "\n", "[", "0", ",", "4", ",", "7", "]", ",", "\n", "[", "0", ",", "7", ",", "3", "]", ",", "\n", "[", "1", ",", "5", ",", "6", "]", ",", "\n", "[", "1", ",", "6", ",", "2", "]", ",", "\n", "[", "3", ",", "2", ",", "6", "]", ",", "\n", "[", "3", ",", "6", ",", "7", "]", ",", "\n", "[", "0", ",", "1", ",", "5", "]", ",", "\n", "[", "0", ",", "5", ",", "4", "]", ",", "\n", "]", ")", "\n", "verts_list", "=", "[", "]", "\n", "faces_list", "=", "[", "]", "\n", "for", "i", ",", "bbox", "in", "enumerate", "(", "bboxes", ")", ":", "\n", "# bbox: [8, 3]", "\n", "        ", "verts_list", ".", "append", "(", "bbox", ")", "\n", "faces_list", ".", "append", "(", "bbox_faces", "+", "8", "*", "i", ")", "\n", "", "verts", "=", "np", ".", "concatenate", "(", "verts_list", ",", "axis", "=", "0", ")", "\n", "faces", "=", "np", ".", "concatenate", "(", "faces_list", ",", "axis", "=", "0", ")", "\n", "return", "verts", ",", "faces", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.draw_3d_bbox_meshes_in_pyqt": [[415, 430], ["bbox_plot._3d_bbox_to_mesh", "pyqtgraph.GLMeshItem", "gl.GLMeshItem.setGLOptions", "widget.addItem", "isinstance", "isinstance", "numpy.array", "bbox_plot.gl_color", "range", "len"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot._3d_bbox_to_mesh", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color"], ["", "def", "draw_3d_bbox_meshes_in_pyqt", "(", "widget", ",", "\n", "bboxes", ",", "\n", "colors", "=", "GLColor", ".", "Gray", ",", "\n", "alpha", "=", "1.0", ",", "\n", "edgecolors", "=", "None", ")", ":", "\n", "    ", "verts", ",", "faces", "=", "_3d_bbox_to_mesh", "(", "bboxes", ")", "\n", "if", "not", "isinstance", "(", "colors", ",", "list", ")", ":", "\n", "        ", "if", "isinstance", "(", "colors", ",", "GLColor", ")", ":", "\n", "            ", "colors", "=", "gl_color", "(", "colors", ",", "alpha", ")", "\n", "", "colors", "=", "np", ".", "array", "(", "[", "colors", "for", "i", "in", "range", "(", "len", "(", "verts", ")", ")", "]", ")", "\n", "", "m1", "=", "gl", ".", "GLMeshItem", "(", "\n", "vertexes", "=", "verts", ",", "faces", "=", "faces", ",", "faceColors", "=", "colors", ",", "smooth", "=", "False", ")", "\n", "m1", ".", "setGLOptions", "(", "'additive'", ")", "\n", "widget", ".", "addItem", "(", "m1", ")", "\n", "return", "widget", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.draw_3d_bboxlines_in_pyqt_v1": [[432, 464], ["zip", "isinstance", "isinstance", "numpy.array", "numpy.array", "pyqtgraph.GLLinePlotItem", "widget.addItem", "bbox_plot._pltcolor_to_qtcolor", "bbox_plot.GLTextItem", "bbox_plot.GLTextItem.setGLViewWidget", "widget.addItem", "range", "range", "list", "len", "len", "range", "len"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget._pltcolor_to_qtcolor", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.GLLabelItem.setGLViewWidget"], ["", "def", "draw_3d_bboxlines_in_pyqt_v1", "(", "widget", ",", "\n", "bboxes", ",", "\n", "colors", "=", "(", "0.0", ",", "1.0", ",", "0.0", ",", "1.0", ")", ",", "\n", "width", "=", "1.0", ",", "\n", "labels", "=", "None", ",", "\n", "label_color", "=", "'r'", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "colors", ",", "list", ")", ":", "\n", "        ", "colors", "=", "[", "colors", "for", "i", "in", "range", "(", "len", "(", "bboxes", ")", ")", "]", "\n", "", "if", "not", "isinstance", "(", "labels", ",", "list", ")", ":", "\n", "        ", "labels", "=", "[", "labels", "for", "i", "in", "range", "(", "len", "(", "bboxes", ")", ")", "]", "\n", "", "for", "box", ",", "facecolor", ",", "label", "in", "zip", "(", "bboxes", ",", "colors", ",", "labels", ")", ":", "\n", "        ", "lines", "=", "np", ".", "array", "(", "[", "\n", "box", "[", "0", "]", ",", "box", "[", "1", "]", ",", "box", "[", "1", "]", ",", "box", "[", "2", "]", ",", "box", "[", "2", "]", ",", "box", "[", "3", "]", ",", "box", "[", "3", "]", ",", "box", "[", "0", "]", ",", "\n", "box", "[", "1", "]", ",", "box", "[", "5", "]", ",", "box", "[", "5", "]", ",", "box", "[", "4", "]", ",", "box", "[", "4", "]", ",", "box", "[", "0", "]", ",", "box", "[", "2", "]", ",", "box", "[", "6", "]", ",", "\n", "box", "[", "6", "]", ",", "box", "[", "7", "]", ",", "box", "[", "7", "]", ",", "box", "[", "3", "]", ",", "box", "[", "5", "]", ",", "box", "[", "6", "]", ",", "box", "[", "4", "]", ",", "box", "[", "7", "]", "\n", "]", ")", "\n", "color", "=", "np", ".", "array", "(", "[", "list", "(", "facecolor", ")", "for", "i", "in", "range", "(", "len", "(", "lines", ")", ")", "]", ")", "\n", "plt", "=", "gl", ".", "GLLinePlotItem", "(", "\n", "pos", "=", "lines", ",", "color", "=", "color", ",", "width", "=", "width", ",", "antialias", "=", "True", ",", "mode", "=", "'lines'", ")", "\n", "widget", ".", "addItem", "(", "plt", ")", "\n", "if", "label", "is", "not", "None", ":", "\n", "            ", "label_color_qt", "=", "_pltcolor_to_qtcolor", "(", "label_color", ")", "\n", "t", "=", "GLTextItem", "(", "\n", "X", "=", "box", "[", "0", ",", "0", "]", ",", "\n", "Y", "=", "box", "[", "0", ",", "1", "]", ",", "\n", "Z", "=", "box", "[", "0", ",", "2", "]", ",", "\n", "text", "=", "label", ",", "\n", "color", "=", "label_color_qt", ")", "\n", "t", ".", "setGLViewWidget", "(", "widget", ")", "\n", "widget", ".", "addItem", "(", "t", ")", "\n", "\n", "", "", "return", "widget", "\n", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.loader._get_possible_module_path": [[11, 20], ["pathlib.Path", "pathlib.Path.glob", "path.is_dir", "path.stem.isidentifier", "ret.append"], "function", ["None"], ["def", "_get_possible_module_path", "(", "paths", ")", ":", "\n", "    ", "ret", "=", "[", "]", "\n", "for", "p", "in", "paths", ":", "\n", "        ", "p", "=", "Path", "(", "p", ")", "\n", "for", "path", "in", "p", ".", "glob", "(", "\"*\"", ")", ":", "\n", "            ", "if", "path", ".", "suffix", "in", "[", "\"py\"", ",", "\".so\"", "]", "or", "(", "path", ".", "is_dir", "(", ")", ")", ":", "\n", "                ", "if", "path", ".", "stem", ".", "isidentifier", "(", ")", ":", "\n", "                    ", "ret", ".", "append", "(", "path", ")", "\n", "", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.loader._get_regular_import_name": [[22, 36], ["pathlib.Path", "pathlib.Path", "pathlib.Path.relative_to", "list", "pathlib.Path"], "function", ["None"], ["", "def", "_get_regular_import_name", "(", "path", ",", "module_paths", ")", ":", "\n", "    ", "path", "=", "Path", "(", "path", ")", "\n", "for", "mp", "in", "module_paths", ":", "\n", "        ", "mp", "=", "Path", "(", "mp", ")", "\n", "if", "mp", "==", "path", ":", "\n", "            ", "return", "path", ".", "stem", "\n", "", "try", ":", "\n", "            ", "relative_path", "=", "path", ".", "relative_to", "(", "Path", "(", "mp", ")", ")", "\n", "parts", "=", "list", "(", "(", "relative_path", ".", "parent", "/", "relative_path", ".", "stem", ")", ".", "parts", ")", "\n", "module_name", "=", "'.'", ".", "join", "(", "[", "mp", ".", "stem", "]", "+", "parts", ")", "\n", "return", "module_name", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.loader.import_file": [[38, 73], ["pathlib.Path", "loader._get_possible_module_path", "loader._get_regular_import_name", "importlib.util.spec_from_file_location", "importlib.util.module_from_spec", "importlib.util.spec_from_file_location.loader.exec_module", "os.environ[].split", "loader.import_name", "logger.warning", "ValueError"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.loader._get_possible_module_path", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.loader._get_regular_import_name", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.loader.import_name", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.warning"], ["", "def", "import_file", "(", "path", ",", "name", ":", "str", "=", "None", ",", "add_to_sys", "=", "True", ",", "\n", "disable_warning", "=", "False", ")", ":", "\n", "    ", "global", "CUSTOM_LOADED_MODULES", "\n", "path", "=", "Path", "(", "path", ")", "\n", "module_name", "=", "path", ".", "stem", "\n", "try", ":", "\n", "        ", "user_paths", "=", "os", ".", "environ", "[", "'PYTHONPATH'", "]", ".", "split", "(", "os", ".", "pathsep", ")", "\n", "", "except", "KeyError", ":", "\n", "        ", "user_paths", "=", "[", "]", "\n", "", "possible_paths", "=", "_get_possible_module_path", "(", "user_paths", ")", "\n", "model_import_name", "=", "_get_regular_import_name", "(", "path", ",", "possible_paths", ")", "\n", "if", "model_import_name", "is", "not", "None", ":", "\n", "        ", "return", "import_name", "(", "model_import_name", ")", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "        ", "module_name", "=", "name", "\n", "", "spec", "=", "importlib", ".", "util", ".", "spec_from_file_location", "(", "module_name", ",", "path", ")", "\n", "module", "=", "importlib", ".", "util", ".", "module_from_spec", "(", "spec", ")", "\n", "spec", ".", "loader", ".", "exec_module", "(", "module", ")", "\n", "if", "not", "disable_warning", ":", "\n", "        ", "logger", ".", "warning", "(", "(", "\n", "f\"Failed to perform regular import for file {path}. \"", "\n", "\"this means this file isn't in any folder in PYTHONPATH \"", "\n", "\"or don't have __init__.py in that project. \"", "\n", "\"directly file import may fail and some reflecting features are \"", "\n", "\"disabled even if import succeed. please add your project to PYTHONPATH \"", "\n", "\"or add __init__.py to ensure this file can be regularly imported. \"", "\n", ")", ")", "\n", "\n", "", "if", "add_to_sys", ":", "# this will enable find objects defined in a file.", "\n", "# avoid replace system modules.", "\n", "        ", "if", "module_name", "in", "sys", ".", "modules", "and", "module_name", "not", "in", "CUSTOM_LOADED_MODULES", ":", "\n", "            ", "raise", "ValueError", "(", "f\"{module_name} exists in system.\"", ")", "\n", "", "CUSTOM_LOADED_MODULES", "[", "module_name", "]", "=", "module", "\n", "sys", ".", "modules", "[", "module_name", "]", "=", "module", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.loader.import_name": [[75, 78], ["importlib.import_module"], "function", ["None"], ["", "def", "import_name", "(", "name", ",", "package", "=", "None", ")", ":", "\n", "    ", "module", "=", "importlib", ".", "import_module", "(", "name", ",", "package", ")", "\n", "return", "module", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.inference.TorchInferenceContext.__init__": [[16, 20], ["second.core.inference.InferenceContext.__init__"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "None", "\n", "self", ".", "anchor_cache", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.inference.TorchInferenceContext._build": [[21, 70], ["second.builder.voxel_builder.build", "list", "second.pytorch.builder.box_coder_builder.build", "second.builder.target_assigner_builder.build", "int", "second.pytorch.builder.second_builder.build", "inference.TorchInferenceContext.net.cuda().eval", "second.builder.target_assigner_builder.build.generate_anchors", "second.builder.target_assigner_builder.build.generate_anchors_dict", "anchors.reshape.reshape.reshape", "second.core.box_np_ops.rbbox2d_to_near_bbox", "inference.TorchInferenceContext.net.half", "inference.TorchInferenceContext.net.metrics_to_float", "inference.TorchInferenceContext.net.convert_norm_to_float", "inference.TorchInferenceContext.net.cuda"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.generate_anchors", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.generate_anchors_dict", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rbbox2d_to_near_bbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.metrics_to_float", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.convert_norm_to_float"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "config", "=", "self", ".", "config", "\n", "input_cfg", "=", "config", ".", "eval_input_reader", "\n", "model_cfg", "=", "config", ".", "model", ".", "second", "\n", "train_cfg", "=", "config", ".", "train_config", "\n", "batch_size", "=", "1", "\n", "voxel_generator", "=", "voxel_builder", ".", "build", "(", "model_cfg", ".", "voxel_generator", ")", "\n", "bv_range", "=", "voxel_generator", ".", "point_cloud_range", "[", "[", "0", ",", "1", ",", "3", ",", "4", "]", "]", "\n", "grid_size", "=", "voxel_generator", ".", "grid_size", "\n", "self", ".", "voxel_generator", "=", "voxel_generator", "\n", "vfe_num_filters", "=", "list", "(", "model_cfg", ".", "voxel_feature_extractor", ".", "num_filters", ")", "\n", "\n", "box_coder", "=", "box_coder_builder", ".", "build", "(", "model_cfg", ".", "box_coder", ")", "\n", "target_assigner_cfg", "=", "model_cfg", ".", "target_assigner", "\n", "target_assigner", "=", "target_assigner_builder", ".", "build", "(", "\n", "target_assigner_cfg", ",", "bv_range", ",", "box_coder", ")", "\n", "self", ".", "target_assigner", "=", "target_assigner", "\n", "out_size_factor", "=", "model_cfg", ".", "rpn", ".", "layer_strides", "[", "0", "]", "/", "model_cfg", ".", "rpn", ".", "upsample_strides", "[", "0", "]", "\n", "out_size_factor", "*=", "model_cfg", ".", "middle_feature_extractor", ".", "downsample_factor", "\n", "out_size_factor", "=", "int", "(", "out_size_factor", ")", "\n", "assert", "out_size_factor", ">", "0", "\n", "self", ".", "net", "=", "second_builder", ".", "build", "(", "model_cfg", ",", "voxel_generator", ",", "\n", "target_assigner", ")", "\n", "self", ".", "net", ".", "cuda", "(", ")", ".", "eval", "(", ")", "\n", "if", "train_cfg", ".", "enable_mixed_precision", ":", "\n", "            ", "self", ".", "net", ".", "half", "(", ")", "\n", "self", ".", "net", ".", "metrics_to_float", "(", ")", "\n", "self", ".", "net", ".", "convert_norm_to_float", "(", "self", ".", "net", ")", "\n", "", "feature_map_size", "=", "grid_size", "[", ":", "2", "]", "//", "out_size_factor", "\n", "feature_map_size", "=", "[", "*", "feature_map_size", ",", "1", "]", "[", ":", ":", "-", "1", "]", "\n", "ret", "=", "target_assigner", ".", "generate_anchors", "(", "feature_map_size", ")", "\n", "anchors_dict", "=", "target_assigner", ".", "generate_anchors_dict", "(", "feature_map_size", ")", "\n", "#print(\"feature_map_size is \",feature_map_size)", "\n", "#print(\"generated_anchors shape is\",ret['anchors'].shape)", "\n", "anchors", "=", "ret", "[", "\"anchors\"", "]", "\n", "#print(\"\",ret['anchors'][0,79,79,1,:])", "\n", "anchors", "=", "anchors", ".", "reshape", "(", "[", "-", "1", ",", "7", "]", ")", "\n", "#anchors_reshape = anchors.reshape([1,200,176,14])", "\n", "#print(\"\",anchors_reshape[0,79,79,7:])", "\n", "matched_thresholds", "=", "ret", "[", "\"matched_thresholds\"", "]", "\n", "unmatched_thresholds", "=", "ret", "[", "\"unmatched_thresholds\"", "]", "\n", "anchors_bv", "=", "box_np_ops", ".", "rbbox2d_to_near_bbox", "(", "\n", "anchors", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", ")", "\n", "self", ".", "anchor_cache", "=", "{", "\n", "\"anchors\"", ":", "anchors", ",", "\n", "\"anchors_bv\"", ":", "anchors_bv", ",", "\n", "\"matched_thresholds\"", ":", "matched_thresholds", ",", "\n", "\"unmatched_thresholds\"", ":", "unmatched_thresholds", ",", "\n", "\"anchors_dict\"", ":", "anchors_dict", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.inference.TorchInferenceContext._restore": [[72, 76], ["pathlib.Path", "torchplus.train.restore", "str"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.restore"], ["", "def", "_restore", "(", "self", ",", "ckpt_path", ")", ":", "\n", "        ", "ckpt_path", "=", "Path", "(", "ckpt_path", ")", "\n", "assert", "ckpt_path", ".", "suffix", "==", "\".tckpt\"", "\n", "torchplus", ".", "train", ".", "restore", "(", "str", "(", "ckpt_path", ")", ",", "self", ".", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.inference.TorchInferenceContext._inference": [[77, 91], ["second.pytorch.train.example_convert_to_torch", "second.pytorch.train.predict_kitti_to_anno", "list"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.train.example_convert_to_torch", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.train.predict_kitti_to_anno"], ["", "def", "_inference", "(", "self", ",", "example", ")", ":", "\n", "        ", "train_cfg", "=", "self", ".", "config", ".", "train_config", "\n", "input_cfg", "=", "self", ".", "config", ".", "eval_input_reader", "\n", "model_cfg", "=", "self", ".", "config", ".", "model", ".", "second", "\n", "if", "train_cfg", ".", "enable_mixed_precision", ":", "\n", "            ", "float_dtype", "=", "torch", ".", "half", "\n", "", "else", ":", "\n", "            ", "float_dtype", "=", "torch", ".", "float32", "\n", "", "example_torch", "=", "example_convert_to_torch", "(", "example", ",", "float_dtype", ")", "\n", "result_annos", "=", "predict_kitti_to_anno", "(", "\n", "self", ".", "net", ",", "example_torch", ",", "list", "(", "\n", "self", ".", "target_assigner", ".", "classes", ")", ",", "\n", "model_cfg", ".", "post_center_limit_range", ",", "model_cfg", ".", "lidar_input", ")", "\n", "return", "result_annos", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.inference.TorchInferenceContext._ctx": [[92, 94], ["None"], "methods", ["None"], ["", "def", "_ctx", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.train.example_convert_to_torch": [[29, 50], ["example.items", "torch.device", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["def", "example_convert_to_torch", "(", "example", ",", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "None", ")", "->", "dict", ":", "\n", "    ", "device", "=", "device", "or", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "example_torch", "=", "{", "}", "\n", "float_names", "=", "[", "\n", "\"voxels\"", ",", "\"anchors\"", ",", "\"reg_targets\"", ",", "\"reg_weights\"", ",", "\"bev_map\"", ",", "\"rect\"", ",", "\n", "\"Trv2c\"", ",", "\"P2\"", ",", "\"d3_gt_boxes\"", ",", "\"gt_2d_boxes\"", "\n", "]", "\n", "\n", "for", "k", ",", "v", "in", "example", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "in", "float_names", ":", "\n", "            ", "example_torch", "[", "k", "]", "=", "torch", ".", "tensor", "(", "v", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", ".", "to", "(", "dtype", ")", "\n", "", "elif", "k", "in", "[", "\"coordinates\"", ",", "\"labels\"", ",", "\"num_points\"", "]", ":", "\n", "            ", "example_torch", "[", "k", "]", "=", "torch", ".", "tensor", "(", "\n", "v", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "device", ")", "\n", "", "elif", "k", "in", "[", "\"anchors_mask\"", "]", ":", "\n", "            ", "example_torch", "[", "k", "]", "=", "torch", ".", "tensor", "(", "\n", "v", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "            ", "example_torch", "[", "k", "]", "=", "v", "\n", "", "", "return", "example_torch", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.train.build_inference_net": [[51, 96], ["pathlib.Path", "second.protos.pipeline_pb2.TrainEvalPipelineConfig", "second.builder.voxel_builder.build", "second.pytorch.builder.box_coder_builder.build", "second.builder.target_assigner_builder.build", "second.pytorch.builder.second_builder.build", "second_builder.build.cuda", "second_builder.build.eval", "pathlib.Path", "open", "f.read", "google.protobuf.text_format.Merge", "print", "torchplus.train.try_restore_latest_checkpoints", "torchplus.train.restore"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint.try_restore_latest_checkpoints", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.restore"], ["", "def", "build_inference_net", "(", "config_path", ",", "\n", "model_dir", ",", "\n", "result_path", "=", "None", ",", "\n", "predict_test", "=", "False", ",", "\n", "ckpt_path", "=", "None", ",", "\n", "ref_detfile", "=", "None", ",", "\n", "pickle_result", "=", "True", ",", "\n", "measure_time", "=", "False", ",", "\n", "batch_size", "=", "1", ")", ":", "\n", "    ", "model_dir", "=", "pathlib", ".", "Path", "(", "model_dir", ")", "\n", "if", "predict_test", ":", "\n", "        ", "result_name", "=", "'predict_test'", "\n", "", "else", ":", "\n", "        ", "result_name", "=", "'eval_results'", "\n", "", "if", "result_path", "is", "None", ":", "\n", "        ", "result_path", "=", "model_dir", "/", "result_name", "\n", "", "else", ":", "\n", "        ", "result_path", "=", "pathlib", ".", "Path", "(", "result_path", ")", "\n", "", "config", "=", "pipeline_pb2", ".", "TrainEvalPipelineConfig", "(", ")", "\n", "with", "open", "(", "config_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "proto_str", "=", "f", ".", "read", "(", ")", "\n", "text_format", ".", "Merge", "(", "proto_str", ",", "config", ")", "\n", "\n", "", "model_cfg", "=", "config", ".", "model", ".", "second", "\n", "detection_2d_path", "=", "config", ".", "train_config", ".", "detection_2d_path", "\n", "center_limit_range", "=", "model_cfg", ".", "post_center_limit_range", "\n", "voxel_generator", "=", "voxel_builder", ".", "build", "(", "model_cfg", ".", "voxel_generator", ")", "\n", "bv_range", "=", "voxel_generator", ".", "point_cloud_range", "[", "[", "0", ",", "1", ",", "3", ",", "4", "]", "]", "\n", "box_coder", "=", "box_coder_builder", ".", "build", "(", "model_cfg", ".", "box_coder", ")", "\n", "target_assigner_cfg", "=", "model_cfg", ".", "target_assigner", "\n", "target_assigner", "=", "target_assigner_builder", ".", "build", "(", "target_assigner_cfg", ",", "\n", "bv_range", ",", "box_coder", ")", "\n", "class_names", "=", "target_assigner", ".", "classes", "\n", "net", "=", "second_builder", ".", "build", "(", "model_cfg", ",", "voxel_generator", ",", "target_assigner", ",", "measure_time", "=", "measure_time", ")", "\n", "net", ".", "cuda", "(", ")", "\n", "\n", "if", "ckpt_path", "is", "None", ":", "\n", "        ", "print", "(", "\"load existing model\"", ")", "\n", "torchplus", ".", "train", ".", "try_restore_latest_checkpoints", "(", "model_dir", ",", "[", "net", "]", ")", "\n", "", "else", ":", "\n", "        ", "torchplus", ".", "train", ".", "restore", "(", "ckpt_path", ",", "net", ")", "\n", "", "batch_size", "=", "batch_size", "or", "input_cfg", ".", "batch_size", "\n", "#batch_size = 1", "\n", "net", ".", "eval", "(", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.train.train": [[97, 378], ["torch.manual_seed", "numpy.random.seed", "pathlib.Path", "torchplus.train.create_folder.mkdir", "second.protos.pipeline_pb2.TrainEvalPipelineConfig", "print", "second.builder.voxel_builder.build", "second.pytorch.builder.box_coder_builder.build", "second.builder.target_assigner_builder.build", "train.build_inference_net", "second.pytorch.models.fusion.fusion", "fusion.fusion.cuda", "second.pytorch.builder.optimizer_builder.build", "torchplus.train.try_restore_latest_checkpoints", "second.pytorch.builder.lr_scheduler_builder.build", "second.pytorch.builder.input_reader_builder.build", "second.pytorch.builder.input_reader_builder.build", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "iter", "second.pytorch.core.losses.SigmoidFocalClassificationLoss", "training_detail_path.exists", "open", "open.write", "open.write", "summary_dir.mkdir", "tensorboardX.SummaryWriter", "time.time", "build_inference_net.set_global_step", "optimizer_builder.build.zero_grad", "torchplus.train.save_models", "open.close", "pathlib.Path().exists", "open", "f.read", "google.protobuf.text_format.Merge", "build_inference_net.half", "build_inference_net.metrics_to_float", "build_inference_net.convert_norm_to_float", "numpy.array", "numpy.random.seed", "print", "str", "build_inference_net.get_global_step", "torch.tensor", "range", "build_inference_net.get_global_step", "torchplus.train.create_folder", "time.time", "open", "json.load", "range", "torchplus.train.save_models", "fusion.fusion.eval", "build_inference_net.eval", "result_path_step.mkdir", "print", "print", "print", "print", "print", "print", "print", "print", "time.time", "second.utils.progress_bar.ProgressBar", "build_inference_net.clear_timer", "second.utils.progress_bar.ProgressBar.start", "iter", "print", "print", "print", "print", "second.utils.eval.get_official_eval_result", "print", "print", "tensorboardX.SummaryWriter.add_text", "second.utils.eval.get_coco_eval_result", "print", "print", "tensorboardX.SummaryWriter.add_text", "fusion.fusion.train", "torchplus.train.save_models", "open.close", "pathlib.Path", "lr_scheduler_builder.build.step", "train.example_convert_to_torch", "build_inference_net.", "fusion.fusion.", "torch.from_numpy().type().cuda", "torch.from_numpy().type().cuda.sum().type", "torch.clamp", "build_inference_net.update_global_step", "time.time", "build_inference_net.get_global_step", "build_inference_net.get_global_step", "train.example_convert_to_torch", "second.utils.progress_bar.ProgressBar.print_bar", "len", "second.get_label_annos", "json.dumps", "build_inference_net.get_global_step", "numpy.random.get_state", "build_inference_net.get_global_step", "next", "numpy.zeros", "torch.zeros().type().cuda", "torch.zeros().type().cuda", "second.pytorch.core.box_torch_ops.box_lidar_to_camera", "second.utils.eval.d3_box_overlap", "numpy.amax", "torch.from_numpy().type().cuda", "torch.from_numpy().type().cuda", "fusion_input.cuda", "tensor_index.cuda", "torch.from_numpy().type().cuda.type", "second.pytorch.core.losses.SigmoidFocalClassificationLoss._compute_loss", "cls_losses_reduced.backward", "optimizer_builder.build.step", "optimizer_builder.build.zero_grad", "time.time", "print", "print", "time.time", "torchplus.train.save_models", "time.time", "train.predict_kitti_to_anno", "train._predict_kitti_to_file", "time.time", "len", "len", "open", "pickle.dump", "print", "iter", "next", "box_torch_ops.box_lidar_to_camera.detach().cpu().numpy", "pred_3d_box.squeeze().detach().cpu().numpy", "torch.from_numpy().type", "torch.from_numpy().type().cuda.type", "torch.from_numpy().type().cuda.sum", "cls_weights.cuda", "focal_loss._compute_loss.sum", "float", "float", "build_inference_net.get_global_step", "build_inference_net.get_global_step", "build_inference_net.clear_metrics", "torch.zeros().type", "torch.zeros().type", "torch.from_numpy().type", "torch.from_numpy().type", "len", "box_torch_ops.box_lidar_to_camera.detach().cpu", "pred_3d_box.squeeze().detach().cpu", "torch.from_numpy", "torch.zeros", "torch.zeros", "torch.from_numpy", "torch.from_numpy", "box_torch_ops.box_lidar_to_camera.detach", "pred_3d_box.squeeze().detach", "pred_3d_box.squeeze"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.train.build_inference_net", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint.try_restore_latest_checkpoints", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.set_global_step", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.zero_grad", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint.save_models", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.metrics_to_float", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.convert_norm_to_float", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.get_global_step", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.get_global_step", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.common.create_folder", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.Settings.load", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint.save_models", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.clear_timer", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.ProgressBar.start", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_official_eval_result", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_coco_eval_result", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.train.train", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint.save_models", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules_fastai.LRSchedulerStep.step", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.train.example_convert_to_torch", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.update_global_step", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.get_global_step", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.get_global_step", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.train.example_convert_to_torch", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.ProgressBar.print_bar", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_label_annos", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.dumps", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.get_global_step", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.get_global_step", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box_lidar_to_camera", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.d3_box_overlap", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses.BootstrappedSigmoidClassificationLoss._compute_loss", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.learning_schedules_fastai.LRSchedulerStep.step", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.zero_grad", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint.save_models", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.train.predict_kitti_to_anno", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.train._predict_kitti_to_file", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.get_global_step", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.get_global_step", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.clear_metrics"], ["", "def", "train", "(", "config_path", ",", "\n", "model_dir", ",", "\n", "result_path", "=", "None", ",", "\n", "create_folder", "=", "False", ",", "\n", "display_step", "=", "50", ",", "\n", "summary_step", "=", "5", ",", "\n", "pickle_result", "=", "True", ",", "\n", "patchs", "=", "None", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "3", ")", "\n", "np", ".", "random", ".", "seed", "(", "3", ")", "\n", "if", "create_folder", ":", "\n", "        ", "if", "pathlib", ".", "Path", "(", "model_dir", ")", ".", "exists", "(", ")", ":", "\n", "            ", "model_dir", "=", "torchplus", ".", "train", ".", "create_folder", "(", "model_dir", ")", "\n", "", "", "patchs", "=", "patchs", "or", "[", "]", "\n", "model_dir", "=", "pathlib", ".", "Path", "(", "model_dir", ")", "\n", "model_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "if", "result_path", "is", "None", ":", "\n", "        ", "result_path", "=", "model_dir", "/", "'results'", "\n", "", "config", "=", "pipeline_pb2", ".", "TrainEvalPipelineConfig", "(", ")", "\n", "with", "open", "(", "config_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "proto_str", "=", "f", ".", "read", "(", ")", "\n", "text_format", ".", "Merge", "(", "proto_str", ",", "config", ")", "\n", "", "input_cfg", "=", "config", ".", "train_input_reader", "\n", "eval_input_cfg", "=", "config", ".", "eval_input_reader", "\n", "model_cfg", "=", "config", ".", "model", ".", "second", "\n", "train_cfg", "=", "config", ".", "train_config", "\n", "detection_2d_path", "=", "config", ".", "train_config", ".", "detection_2d_path", "\n", "print", "(", "\"2d detection path:\"", ",", "detection_2d_path", ")", "\n", "center_limit_range", "=", "model_cfg", ".", "post_center_limit_range", "\n", "voxel_generator", "=", "voxel_builder", ".", "build", "(", "model_cfg", ".", "voxel_generator", ")", "\n", "bv_range", "=", "voxel_generator", ".", "point_cloud_range", "[", "[", "0", ",", "1", ",", "3", ",", "4", "]", "]", "\n", "box_coder", "=", "box_coder_builder", ".", "build", "(", "model_cfg", ".", "box_coder", ")", "\n", "target_assigner_cfg", "=", "model_cfg", ".", "target_assigner", "\n", "target_assigner", "=", "target_assigner_builder", ".", "build", "(", "target_assigner_cfg", ",", "\n", "bv_range", ",", "box_coder", ")", "\n", "class_names", "=", "target_assigner", ".", "classes", "\n", "net", "=", "build_inference_net", "(", "'./configs/car.fhd.config'", ",", "'../model_dir'", ")", "\n", "fusion_layer", "=", "fusion", ".", "fusion", "(", ")", "\n", "fusion_layer", ".", "cuda", "(", ")", "\n", "optimizer_cfg", "=", "train_cfg", ".", "optimizer", "\n", "if", "train_cfg", ".", "enable_mixed_precision", ":", "\n", "        ", "net", ".", "half", "(", ")", "\n", "net", ".", "metrics_to_float", "(", ")", "\n", "net", ".", "convert_norm_to_float", "(", "net", ")", "\n", "", "loss_scale", "=", "train_cfg", ".", "loss_scale_factor", "\n", "mixed_optimizer", "=", "optimizer_builder", ".", "build", "(", "optimizer_cfg", ",", "fusion_layer", ",", "mixed", "=", "train_cfg", ".", "enable_mixed_precision", ",", "loss_scale", "=", "loss_scale", ")", "\n", "optimizer", "=", "mixed_optimizer", "\n", "# must restore optimizer AFTER using MixedPrecisionWrapper", "\n", "torchplus", ".", "train", ".", "try_restore_latest_checkpoints", "(", "model_dir", ",", "\n", "[", "mixed_optimizer", "]", ")", "\n", "lr_scheduler", "=", "lr_scheduler_builder", ".", "build", "(", "optimizer_cfg", ",", "optimizer", ",", "train_cfg", ".", "steps", ")", "\n", "if", "train_cfg", ".", "enable_mixed_precision", ":", "\n", "        ", "float_dtype", "=", "torch", ".", "float16", "\n", "", "else", ":", "\n", "        ", "float_dtype", "=", "torch", ".", "float32", "\n", "######################", "\n", "# PREPARE INPUT", "\n", "######################", "\n", "\n", "", "dataset", "=", "input_reader_builder", ".", "build", "(", "\n", "input_cfg", ",", "\n", "model_cfg", ",", "\n", "training", "=", "True", ",", "\n", "voxel_generator", "=", "voxel_generator", ",", "\n", "target_assigner", "=", "target_assigner", ")", "\n", "eval_dataset", "=", "input_reader_builder", ".", "build", "(", "\n", "eval_input_cfg", ",", "\n", "model_cfg", ",", "\n", "training", "=", "True", ",", "#if rhnning for test, here it needs to be False", "\n", "voxel_generator", "=", "voxel_generator", ",", "\n", "target_assigner", "=", "target_assigner", ")", "\n", "def", "_worker_init_fn", "(", "worker_id", ")", ":", "\n", "        ", "time_seed", "=", "np", ".", "array", "(", "time", ".", "time", "(", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "np", ".", "random", ".", "seed", "(", "time_seed", "+", "worker_id", ")", "\n", "print", "(", "f\"WORKER {worker_id} seed:\"", ",", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", "[", "0", "]", ")", "\n", "\n", "", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "input_cfg", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "input_cfg", ".", "num_workers", ",", "\n", "pin_memory", "=", "False", ",", "\n", "collate_fn", "=", "merge_second_batch", ",", "\n", "worker_init_fn", "=", "_worker_init_fn", ")", "\n", "\n", "eval_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "eval_dataset", ",", "\n", "batch_size", "=", "eval_input_cfg", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "eval_input_cfg", ".", "num_workers", ",", "\n", "pin_memory", "=", "False", ",", "\n", "collate_fn", "=", "merge_second_batch", ")", "\n", "\n", "\n", "data_iter", "=", "iter", "(", "dataloader", ")", "\n", "\n", "######################", "\n", "# TRAINING", "\n", "######################", "\n", "focal_loss", "=", "SigmoidFocalClassificationLoss", "(", ")", "\n", "cls_loss_sum", "=", "0", "\n", "training_detail", "=", "[", "]", "\n", "log_path", "=", "model_dir", "/", "'log.txt'", "\n", "training_detail_path", "=", "model_dir", "/", "'log.json'", "\n", "if", "training_detail_path", ".", "exists", "(", ")", ":", "\n", "        ", "with", "open", "(", "training_detail_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "training_detail", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "logf", "=", "open", "(", "log_path", ",", "'a'", ")", "\n", "logf", ".", "write", "(", "proto_str", ")", "\n", "logf", ".", "write", "(", "\"\\n\"", ")", "\n", "summary_dir", "=", "model_dir", "/", "'summary'", "\n", "summary_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "writer", "=", "SummaryWriter", "(", "str", "(", "summary_dir", ")", ")", "\n", "total_step_elapsed", "=", "0", "\n", "remain_steps", "=", "train_cfg", ".", "steps", "-", "net", ".", "get_global_step", "(", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "ckpt_start_time", "=", "t", "\n", "total_loop", "=", "train_cfg", ".", "steps", "//", "train_cfg", ".", "steps_per_eval", "+", "1", "\n", "#print(\"steps, steps_per_eval, total_loop:\", train_cfg.steps, train_cfg.steps_per_eval, total_loop)", "\n", "# total_loop = remain_steps // train_cfg.steps_per_eval + 1", "\n", "clear_metrics_every_epoch", "=", "train_cfg", ".", "clear_metrics_every_epoch", "\n", "net", ".", "set_global_step", "(", "torch", ".", "tensor", "(", "[", "0", "]", ")", ")", "\n", "if", "train_cfg", ".", "steps", "%", "train_cfg", ".", "steps_per_eval", "==", "0", ":", "\n", "        ", "total_loop", "-=", "1", "\n", "", "mixed_optimizer", ".", "zero_grad", "(", ")", "\n", "try", ":", "\n", "        ", "for", "_", "in", "range", "(", "total_loop", ")", ":", "\n", "            ", "if", "total_step_elapsed", "+", "train_cfg", ".", "steps_per_eval", ">", "train_cfg", ".", "steps", ":", "\n", "                ", "steps", "=", "train_cfg", ".", "steps", "%", "train_cfg", ".", "steps_per_eval", "\n", "", "else", ":", "\n", "                ", "steps", "=", "train_cfg", ".", "steps_per_eval", "\n", "", "for", "step", "in", "range", "(", "steps", ")", ":", "\n", "                ", "lr_scheduler", ".", "step", "(", "net", ".", "get_global_step", "(", ")", ")", "\n", "try", ":", "\n", "                    ", "example", "=", "next", "(", "data_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "print", "(", "\"end epoch\"", ")", "\n", "if", "clear_metrics_every_epoch", ":", "\n", "                        ", "net", ".", "clear_metrics", "(", ")", "\n", "", "data_iter", "=", "iter", "(", "dataloader", ")", "\n", "example", "=", "next", "(", "data_iter", ")", "\n", "", "example_torch", "=", "example_convert_to_torch", "(", "example", ",", "float_dtype", ")", "\n", "batch_size", "=", "example", "[", "\"anchors\"", "]", ".", "shape", "[", "0", "]", "\n", "all_3d_output_camera_dict", ",", "all_3d_output", ",", "top_predictions", ",", "fusion_input", ",", "tensor_index", "=", "net", "(", "example_torch", ",", "detection_2d_path", ")", "\n", "d3_gt_boxes", "=", "example_torch", "[", "\"d3_gt_boxes\"", "]", "[", "0", ",", ":", ",", ":", "]", "\n", "if", "d3_gt_boxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                    ", "target_for_fusion", "=", "np", ".", "zeros", "(", "(", "1", ",", "70400", ",", "1", ")", ")", "\n", "positives", "=", "torch", ".", "zeros", "(", "1", ",", "70400", ")", ".", "type", "(", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "negatives", "=", "torch", ".", "zeros", "(", "1", ",", "70400", ")", ".", "type", "(", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "negatives", "[", ":", ",", ":", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "d3_gt_boxes_camera", "=", "box_torch_ops", ".", "box_lidar_to_camera", "(", "\n", "d3_gt_boxes", ",", "example_torch", "[", "'rect'", "]", "[", "0", ",", ":", "]", ",", "example_torch", "[", "'Trv2c'", "]", "[", "0", ",", ":", "]", ")", "\n", "d3_gt_boxes_camera_bev", "=", "d3_gt_boxes_camera", "[", ":", ",", "[", "0", ",", "2", ",", "3", ",", "5", ",", "6", "]", "]", "\n", "###### predicted bev boxes", "\n", "pred_3d_box", "=", "all_3d_output_camera_dict", "[", "0", "]", "[", "\"box3d_camera\"", "]", "\n", "pred_bev_box", "=", "pred_3d_box", "[", ":", ",", "[", "0", ",", "2", ",", "3", ",", "5", ",", "6", "]", "]", "\n", "#iou_bev = bev_box_overlap(d3_gt_boxes_camera_bev.detach().cpu().numpy(), pred_bev_box.detach().cpu().numpy(), criterion=-1)", "\n", "iou_bev", "=", "d3_box_overlap", "(", "d3_gt_boxes_camera", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "pred_3d_box", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "criterion", "=", "-", "1", ")", "\n", "iou_bev_max", "=", "np", ".", "amax", "(", "iou_bev", ",", "axis", "=", "0", ")", "\n", "#print(np.max(iou_bev_max))", "\n", "target_for_fusion", "=", "(", "(", "iou_bev_max", ">=", "0.7", ")", "*", "1", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "\n", "\n", "positive_index", "=", "(", "(", "iou_bev_max", ">=", "0.7", ")", "*", "1", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "positives", "=", "torch", ".", "from_numpy", "(", "positive_index", ")", ".", "type", "(", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "negative_index", "=", "(", "(", "iou_bev_max", "<=", "0.5", ")", "*", "1", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "negatives", "=", "torch", ".", "from_numpy", "(", "negative_index", ")", ".", "type", "(", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "\n", "", "cls_preds", ",", "flag", "=", "fusion_layer", "(", "fusion_input", ".", "cuda", "(", ")", ",", "tensor_index", ".", "cuda", "(", ")", ")", "\n", "one_hot_targets", "=", "torch", ".", "from_numpy", "(", "target_for_fusion", ")", ".", "type", "(", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "\n", "negative_cls_weights", "=", "negatives", ".", "type", "(", "torch", ".", "float32", ")", "*", "1.0", "\n", "cls_weights", "=", "negative_cls_weights", "+", "1.0", "*", "positives", ".", "type", "(", "torch", ".", "float32", ")", "\n", "pos_normalizer", "=", "positives", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "cls_weights", "/=", "torch", ".", "clamp", "(", "pos_normalizer", ",", "min", "=", "1.0", ")", "\n", "if", "flag", "==", "1", ":", "\n", "                    ", "cls_losses", "=", "focal_loss", ".", "_compute_loss", "(", "cls_preds", ",", "one_hot_targets", ",", "cls_weights", ".", "cuda", "(", ")", ")", "# [N, M]", "\n", "cls_losses_reduced", "=", "cls_losses", ".", "sum", "(", ")", "/", "example_torch", "[", "'labels'", "]", ".", "shape", "[", "0", "]", "\n", "cls_loss_sum", "=", "cls_loss_sum", "+", "cls_losses_reduced", "\n", "if", "train_cfg", ".", "enable_mixed_precision", ":", "\n", "                        ", "loss", "*=", "loss_scale", "\n", "", "cls_losses_reduced", ".", "backward", "(", ")", "\n", "mixed_optimizer", ".", "step", "(", ")", "\n", "mixed_optimizer", ".", "zero_grad", "(", ")", "\n", "", "net", ".", "update_global_step", "(", ")", "\n", "step_time", "=", "(", "time", ".", "time", "(", ")", "-", "t", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "metrics", "=", "{", "}", "\n", "global_step", "=", "net", ".", "get_global_step", "(", ")", "\n", "if", "global_step", "%", "display_step", "==", "0", ":", "\n", "                    ", "print", "(", "\"now it is\"", ",", "global_step", ",", "\"steps\"", ",", "\" and the cls_loss is :\"", ",", "cls_loss_sum", "/", "display_step", ",", "\n", "\"learning_rate: \"", ",", "float", "(", "optimizer", ".", "lr", ")", ",", "file", "=", "logf", ")", "\n", "print", "(", "\"now it is\"", ",", "global_step", ",", "\"steps\"", ",", "\" and the cls_loss is :\"", ",", "cls_loss_sum", "/", "display_step", ",", "\n", "\"learning_rate: \"", ",", "float", "(", "optimizer", ".", "lr", ")", ")", "\n", "cls_loss_sum", "=", "0", "\n", "\n", "", "ckpt_elasped_time", "=", "time", ".", "time", "(", ")", "-", "ckpt_start_time", "\n", "\n", "if", "ckpt_elasped_time", ">", "train_cfg", ".", "save_checkpoints_secs", ":", "\n", "                    ", "torchplus", ".", "train", ".", "save_models", "(", "model_dir", ",", "[", "fusion_layer", ",", "optimizer", "]", ",", "\n", "net", ".", "get_global_step", "(", ")", ")", "\n", "\n", "ckpt_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "total_step_elapsed", "+=", "steps", "\n", "\n", "torchplus", ".", "train", ".", "save_models", "(", "model_dir", ",", "[", "fusion_layer", ",", "optimizer", "]", ",", "\n", "net", ".", "get_global_step", "(", ")", ")", "\n", "\n", "fusion_layer", ".", "eval", "(", ")", "\n", "net", ".", "eval", "(", ")", "\n", "result_path_step", "=", "result_path", "/", "f\"step_{net.get_global_step()}\"", "\n", "result_path_step", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "print", "(", "\"#################################\"", ")", "\n", "print", "(", "\"#################################\"", ",", "file", "=", "logf", ")", "\n", "print", "(", "\"# EVAL\"", ")", "\n", "print", "(", "\"# EVAL\"", ",", "file", "=", "logf", ")", "\n", "print", "(", "\"#################################\"", ")", "\n", "print", "(", "\"#################################\"", ",", "file", "=", "logf", ")", "\n", "print", "(", "\"Generate output labels...\"", ")", "\n", "print", "(", "\"Generate output labels...\"", ",", "file", "=", "logf", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "dt_annos", "=", "[", "]", "\n", "prog_bar", "=", "ProgressBar", "(", ")", "\n", "net", ".", "clear_timer", "(", ")", "\n", "prog_bar", ".", "start", "(", "(", "len", "(", "eval_dataset", ")", "+", "eval_input_cfg", ".", "batch_size", "-", "1", ")", "//", "eval_input_cfg", ".", "batch_size", ")", "\n", "val_loss_final", "=", "0", "\n", "for", "example", "in", "iter", "(", "eval_dataloader", ")", ":", "\n", "                ", "example", "=", "example_convert_to_torch", "(", "example", ",", "float_dtype", ")", "\n", "if", "pickle_result", ":", "\n", "                    ", "dt_annos_i", ",", "val_losses", "=", "predict_kitti_to_anno", "(", "\n", "net", ",", "detection_2d_path", ",", "fusion_layer", ",", "example", ",", "class_names", ",", "center_limit_range", ",", "\n", "model_cfg", ".", "lidar_input", ")", "\n", "dt_annos", "+=", "dt_annos_i", "\n", "val_loss_final", "=", "val_loss_final", "+", "val_losses", "\n", "", "else", ":", "\n", "                    ", "_predict_kitti_to_file", "(", "net", ",", "detection_2d_path", ",", "example", ",", "result_path_step", ",", "\n", "class_names", ",", "center_limit_range", ",", "\n", "model_cfg", ".", "lidar_input", ")", "\n", "\n", "", "prog_bar", ".", "print_bar", "(", ")", "\n", "\n", "", "sec_per_ex", "=", "len", "(", "eval_dataset", ")", "/", "(", "time", ".", "time", "(", ")", "-", "t", ")", "\n", "print", "(", "\"validation_loss:\"", ",", "val_loss_final", "/", "len", "(", "eval_dataloader", ")", ")", "\n", "print", "(", "\"validation_loss:\"", ",", "val_loss_final", "/", "len", "(", "eval_dataloader", ")", ",", "file", "=", "logf", ")", "\n", "print", "(", "f'generate label finished({sec_per_ex:.2f}/s). start eval:'", ")", "\n", "print", "(", "\n", "f'generate label finished({sec_per_ex:.2f}/s). start eval:'", ",", "\n", "file", "=", "logf", ")", "\n", "gt_annos", "=", "[", "\n", "info", "[", "\"annos\"", "]", "for", "info", "in", "eval_dataset", ".", "dataset", ".", "kitti_infos", "\n", "]", "\n", "if", "not", "pickle_result", ":", "\n", "                ", "dt_annos", "=", "kitti", ".", "get_label_annos", "(", "result_path_step", ")", "\n", "# result = get_official_eval_result_v2(gt_annos, dt_annos, class_names)", "\n", "", "result", "=", "get_official_eval_result", "(", "gt_annos", ",", "dt_annos", ",", "class_names", ")", "\n", "print", "(", "result", ",", "file", "=", "logf", ")", "\n", "print", "(", "result", ")", "\n", "writer", ".", "add_text", "(", "'eval_result'", ",", "json", ".", "dumps", "(", "result", ",", "indent", "=", "2", ")", ",", "global_step", ")", "\n", "result", "=", "get_coco_eval_result", "(", "gt_annos", ",", "dt_annos", ",", "class_names", ")", "\n", "print", "(", "result", ",", "file", "=", "logf", ")", "\n", "print", "(", "result", ")", "\n", "if", "pickle_result", ":", "\n", "                ", "with", "open", "(", "result_path_step", "/", "\"result.pkl\"", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "dt_annos", ",", "f", ")", "\n", "", "", "writer", ".", "add_text", "(", "'eval_result'", ",", "result", ",", "global_step", ")", "\n", "#net.train()", "\n", "fusion_layer", ".", "train", "(", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "\n", "        ", "torchplus", ".", "train", ".", "save_models", "(", "model_dir", ",", "[", "fusion_layer", ",", "optimizer", "]", ",", "\n", "net", ".", "get_global_step", "(", ")", ")", "\n", "\n", "logf", ".", "close", "(", ")", "\n", "raise", "e", "\n", "# save model before exit", "\n", "\n", "", "torchplus", ".", "train", ".", "save_models", "(", "model_dir", ",", "[", "fusion_layer", ",", "optimizer", "]", ",", "\n", "net", ".", "get_global_step", "(", ")", ")", "\n", "\n", "logf", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.train._predict_kitti_to_file": [[380, 447], ["net", "time.time", "fusion_layer", "time.time", "fusion_cls_preds.reshape", "all_3d_output.update", "train.predict_v2", "enumerate", "fusion_input.cuda", "torch_index.cuda", "preds_dict[].size.numel", "preds_dict[].data.cpu().numpy", "preds_dict[].data.cpu().numpy", "preds_dict[].data.cpu().numpy", "preds_dict[].data.cpu().numpy", "preds_dict[].data.cpu().numpy", "zip", "open", "f.write", "numpy.minimum", "numpy.maximum", "second.kitti_result_line", "result_lines.append", "second.get_image_index_str", "preds_dict[].data.cpu", "preds_dict[].data.cpu", "preds_dict[].data.cpu", "preds_dict[].data.cpu", "preds_dict[].data.cpu", "numpy.array", "numpy.any", "numpy.any", "int", "numpy.arctan2"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.train.predict_v2", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.kitti_result_line", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_image_index_str"], ["", "def", "_predict_kitti_to_file", "(", "net", ",", "\n", "detection_2d_path", ",", "\n", "fusion_layer", ",", "\n", "example", ",", "\n", "result_save_path", ",", "\n", "class_names", ",", "\n", "center_limit_range", "=", "None", ",", "\n", "lidar_input", "=", "False", ")", ":", "\n", "    ", "batch_image_shape", "=", "example", "[", "'image_shape'", "]", "\n", "batch_imgidx", "=", "example", "[", "'image_idx'", "]", "\n", "all_3d_output_camera_dict", ",", "all_3d_output", ",", "top_predictions", ",", "fusion_input", ",", "torch_index", "=", "net", "(", "example", ",", "detection_2d_path", ")", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "fusion_cls_preds", ",", "flag", "=", "fusion_layer", "(", "fusion_input", ".", "cuda", "(", ")", ",", "torch_index", ".", "cuda", "(", ")", ")", "\n", "t_end", "=", "time", ".", "time", "(", ")", "\n", "t_fusion", "=", "t_end", "-", "t_start", "\n", "fusion_cls_preds_reshape", "=", "fusion_cls_preds", ".", "reshape", "(", "1", ",", "200", ",", "176", ",", "2", ")", "\n", "all_3d_output", ".", "update", "(", "{", "'cls_preds'", ":", "fusion_cls_preds_reshape", "}", ")", "\n", "predictions_dicts", "=", "predict_v2", "(", "net", ",", "example", ",", "all_3d_output", ")", "\n", "\n", "\n", "for", "i", ",", "preds_dict", "in", "enumerate", "(", "predictions_dicts", ")", ":", "\n", "        ", "image_shape", "=", "batch_image_shape", "[", "i", "]", "\n", "img_idx", "=", "preds_dict", "[", "\"image_idx\"", "]", "\n", "if", "preds_dict", "[", "\"bbox\"", "]", "is", "not", "None", "or", "preds_dict", "[", "\"bbox\"", "]", ".", "size", ".", "numel", "(", ")", ":", "\n", "            ", "box_2d_preds", "=", "preds_dict", "[", "\"bbox\"", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "box_preds", "=", "preds_dict", "[", "\"box3d_camera\"", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "scores", "=", "preds_dict", "[", "\"scores\"", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "box_preds_lidar", "=", "preds_dict", "[", "\"box3d_lidar\"", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# write pred to file", "\n", "box_preds", "=", "box_preds", "[", ":", ",", "[", "0", ",", "1", ",", "2", ",", "4", ",", "5", ",", "3", ",", "\n", "6", "]", "]", "# lhw->hwl(label file format)", "\n", "label_preds", "=", "preds_dict", "[", "\"label_preds\"", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# label_preds = np.zeros([box_2d_preds.shape[0]], dtype=np.int32)", "\n", "result_lines", "=", "[", "]", "\n", "for", "box", ",", "box_lidar", ",", "bbox", ",", "score", ",", "label", "in", "zip", "(", "\n", "box_preds", ",", "box_preds_lidar", ",", "box_2d_preds", ",", "scores", ",", "\n", "label_preds", ")", ":", "\n", "                ", "if", "not", "lidar_input", ":", "\n", "                    ", "if", "bbox", "[", "0", "]", ">", "image_shape", "[", "1", "]", "or", "bbox", "[", "1", "]", ">", "image_shape", "[", "0", "]", ":", "\n", "                        ", "continue", "\n", "", "if", "bbox", "[", "2", "]", "<", "0", "or", "bbox", "[", "3", "]", "<", "0", ":", "\n", "                        ", "continue", "\n", "# print(img_shape)", "\n", "", "", "if", "center_limit_range", "is", "not", "None", ":", "\n", "                    ", "limit_range", "=", "np", ".", "array", "(", "center_limit_range", ")", "\n", "if", "(", "np", ".", "any", "(", "box_lidar", "[", ":", "3", "]", "<", "limit_range", "[", ":", "3", "]", ")", "\n", "or", "np", ".", "any", "(", "box_lidar", "[", ":", "3", "]", ">", "limit_range", "[", "3", ":", "]", ")", ")", ":", "\n", "                        ", "continue", "\n", "", "", "bbox", "[", "2", ":", "]", "=", "np", ".", "minimum", "(", "bbox", "[", "2", ":", "]", ",", "image_shape", "[", ":", ":", "-", "1", "]", ")", "\n", "bbox", "[", ":", "2", "]", "=", "np", ".", "maximum", "(", "bbox", "[", ":", "2", "]", ",", "[", "0", ",", "0", "]", ")", "\n", "result_dict", "=", "{", "\n", "'name'", ":", "class_names", "[", "int", "(", "label", ")", "]", ",", "\n", "'alpha'", ":", "-", "np", ".", "arctan2", "(", "-", "box_lidar", "[", "1", "]", ",", "box_lidar", "[", "0", "]", ")", "+", "box", "[", "6", "]", ",", "\n", "'bbox'", ":", "bbox", ",", "\n", "'location'", ":", "box", "[", ":", "3", "]", ",", "\n", "'dimensions'", ":", "box", "[", "3", ":", "6", "]", ",", "\n", "'rotation_y'", ":", "box", "[", "6", "]", ",", "\n", "'score'", ":", "score", ",", "\n", "}", "\n", "result_line", "=", "kitti", ".", "kitti_result_line", "(", "result_dict", ")", "\n", "result_lines", ".", "append", "(", "result_line", ")", "\n", "", "", "else", ":", "\n", "            ", "result_lines", "=", "[", "]", "\n", "", "result_file", "=", "f\"{result_save_path}/{kitti.get_image_index_str(img_idx)}.txt\"", "\n", "result_str", "=", "'\\n'", ".", "join", "(", "result_lines", ")", "\n", "with", "open", "(", "result_file", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "result_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.train.predict_kitti_to_anno": [[449, 566], ["second.pytorch.core.losses.SigmoidFocalClassificationLoss", "net", "time.time", "fusion_layer", "time.time", "fusion_cls_preds.reshape", "all_3d_output.update", "train.predict_v2", "enumerate", "fusion_input.cuda", "torch_index.cuda", "torch.from_numpy().type().cuda", "torch.from_numpy().type().cuda.sum().type", "torch.clamp", "second.pytorch.core.losses.SigmoidFocalClassificationLoss._compute_loss", "cls_losses_reduced.detach().cpu().numpy.detach().cpu().numpy", "numpy.array", "numpy.zeros", "torch.zeros().type().cuda", "torch.zeros().type().cuda", "second.pytorch.core.box_torch_ops.box_lidar_to_camera", "second.utils.eval.d3_box_overlap", "numpy.amax", "torch.from_numpy().type().cuda", "torch.from_numpy().type().cuda", "torch.from_numpy().type().cuda.type", "cls_weights.cuda", "focal_loss_val._compute_loss.sum", "preds_dict[].detach().cpu().numpy", "preds_dict[].detach().cpu().numpy", "preds_dict[].detach().cpu().numpy", "preds_dict[].detach().cpu().numpy", "preds_dict[].detach().cpu().numpy", "second.get_start_result_anno", "zip", "annos.append", "box_torch_ops.box_lidar_to_camera.detach().cpu().numpy", "pred_3d_box.squeeze().detach().cpu().numpy", "torch.from_numpy().type", "torch.from_numpy().type().cuda.type", "torch.from_numpy().type().cuda.sum", "cls_losses_reduced.detach().cpu().numpy.detach().cpu", "preds_dict[].size.numel", "numpy.minimum", "numpy.maximum", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "annos.append", "annos.append", "second.empty_result_anno", "torch.zeros().type", "torch.zeros().type", "torch.from_numpy().type", "torch.from_numpy().type", "preds_dict[].detach().cpu", "preds_dict[].detach().cpu", "preds_dict[].detach().cpu", "preds_dict[].detach().cpu", "preds_dict[].detach().cpu", "numpy.array", "range", "numpy.stack", "second.empty_result_anno", "box_torch_ops.box_lidar_to_camera.detach().cpu", "pred_3d_box.squeeze().detach().cpu", "torch.from_numpy", "cls_losses_reduced.detach().cpu().numpy.detach", "numpy.any", "numpy.any", "kitti.get_start_result_anno.items", "torch.zeros", "torch.zeros", "torch.from_numpy", "torch.from_numpy", "preds_dict[].detach", "preds_dict[].detach", "preds_dict[].detach", "preds_dict[].detach", "preds_dict[].detach", "int", "numpy.arctan2", "global_set.add", "box_torch_ops.box_lidar_to_camera.detach", "pred_3d_box.squeeze().detach", "pred_3d_box.squeeze"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.train.predict_v2", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses.BootstrappedSigmoidClassificationLoss._compute_loss", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box_lidar_to_camera", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.d3_box_overlap", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_start_result_anno", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.empty_result_anno", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.empty_result_anno", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add"], ["", "", "", "def", "predict_kitti_to_anno", "(", "net", ",", "\n", "detection_2d_path", ",", "\n", "fusion_layer", ",", "\n", "example", ",", "\n", "class_names", ",", "\n", "center_limit_range", "=", "None", ",", "\n", "lidar_input", "=", "False", ",", "\n", "global_set", "=", "None", ")", ":", "\n", "    ", "focal_loss_val", "=", "SigmoidFocalClassificationLoss", "(", ")", "\n", "batch_image_shape", "=", "example", "[", "'image_shape'", "]", "\n", "batch_imgidx", "=", "example", "[", "'image_idx'", "]", "\n", "all_3d_output_camera_dict", ",", "all_3d_output", ",", "top_predictions", ",", "fusion_input", ",", "torch_index", "=", "net", "(", "example", ",", "detection_2d_path", ")", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "fusion_cls_preds", ",", "flag", "=", "fusion_layer", "(", "fusion_input", ".", "cuda", "(", ")", ",", "torch_index", ".", "cuda", "(", ")", ")", "\n", "t_end", "=", "time", ".", "time", "(", ")", "\n", "t_fusion", "=", "t_end", "-", "t_start", "\n", "fusion_cls_preds_reshape", "=", "fusion_cls_preds", ".", "reshape", "(", "1", ",", "200", ",", "176", ",", "2", ")", "\n", "all_3d_output", ".", "update", "(", "{", "'cls_preds'", ":", "fusion_cls_preds_reshape", "}", ")", "###########################################!!!!!!!!!!!!!", "\n", "predictions_dicts", "=", "predict_v2", "(", "net", ",", "example", ",", "all_3d_output", ")", "\n", "test_mode", "=", "False", "\n", "if", "test_mode", "==", "False", ":", "\n", "        ", "d3_gt_boxes", "=", "example", "[", "\"d3_gt_boxes\"", "]", "[", "0", ",", ":", ",", ":", "]", "\n", "if", "d3_gt_boxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "target_for_fusion", "=", "np", ".", "zeros", "(", "(", "1", ",", "70400", ",", "1", ")", ")", "\n", "positives", "=", "torch", ".", "zeros", "(", "1", ",", "70400", ")", ".", "type", "(", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "negatives", "=", "torch", ".", "zeros", "(", "1", ",", "70400", ")", ".", "type", "(", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "negatives", "[", ":", ",", ":", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "d3_gt_boxes_camera", "=", "box_torch_ops", ".", "box_lidar_to_camera", "(", "\n", "d3_gt_boxes", ",", "example", "[", "'rect'", "]", "[", "0", ",", ":", "]", ",", "example", "[", "'Trv2c'", "]", "[", "0", ",", ":", "]", ")", "\n", "d3_gt_boxes_camera_bev", "=", "d3_gt_boxes_camera", "[", ":", ",", "[", "0", ",", "2", ",", "3", ",", "5", ",", "6", "]", "]", "\n", "###### predicted bev boxes", "\n", "pred_3d_box", "=", "all_3d_output_camera_dict", "[", "0", "]", "[", "\"box3d_camera\"", "]", "\n", "pred_bev_box", "=", "pred_3d_box", "[", ":", ",", "[", "0", ",", "2", ",", "3", ",", "5", ",", "6", "]", "]", "\n", "#iou_bev = bev_box_overlap(d3_gt_boxes_camera_bev.detach().cpu().numpy(), pred_bev_box.detach().cpu().numpy(), criterion=-1)", "\n", "iou_bev", "=", "d3_box_overlap", "(", "d3_gt_boxes_camera", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "pred_3d_box", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "criterion", "=", "-", "1", ")", "\n", "iou_bev_max", "=", "np", ".", "amax", "(", "iou_bev", ",", "axis", "=", "0", ")", "\n", "target_for_fusion", "=", "(", "(", "iou_bev_max", ">=", "0.7", ")", "*", "1", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "\n", "positive_index", "=", "(", "(", "iou_bev_max", ">=", "0.7", ")", "*", "1", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "positives", "=", "torch", ".", "from_numpy", "(", "positive_index", ")", ".", "type", "(", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "negative_index", "=", "(", "(", "iou_bev_max", "<=", "0.5", ")", "*", "1", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "negatives", "=", "torch", ".", "from_numpy", "(", "negative_index", ")", ".", "type", "(", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "\n", "", "cls_preds", "=", "fusion_cls_preds", "\n", "one_hot_targets", "=", "torch", ".", "from_numpy", "(", "target_for_fusion", ")", ".", "type", "(", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "\n", "negative_cls_weights", "=", "negatives", ".", "type", "(", "torch", ".", "float32", ")", "*", "1.0", "\n", "cls_weights", "=", "negative_cls_weights", "+", "1.0", "*", "positives", ".", "type", "(", "torch", ".", "float32", ")", "\n", "pos_normalizer", "=", "positives", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "cls_weights", "/=", "torch", ".", "clamp", "(", "pos_normalizer", ",", "min", "=", "1.0", ")", "\n", "cls_losses", "=", "focal_loss_val", ".", "_compute_loss", "(", "cls_preds", ",", "one_hot_targets", ",", "cls_weights", ".", "cuda", "(", ")", ")", "# [N, M]", "\n", "\n", "cls_losses_reduced", "=", "cls_losses", ".", "sum", "(", ")", "/", "example", "[", "'labels'", "]", ".", "shape", "[", "0", "]", "\n", "cls_losses_reduced", "=", "cls_losses_reduced", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "cls_losses_reduced", "=", "1000", "\n", "", "annos", "=", "[", "]", "\n", "for", "i", ",", "preds_dict", "in", "enumerate", "(", "predictions_dicts", ")", ":", "\n", "        ", "image_shape", "=", "batch_image_shape", "[", "i", "]", "\n", "img_idx", "=", "preds_dict", "[", "\"image_idx\"", "]", "\n", "if", "preds_dict", "[", "\"bbox\"", "]", "is", "not", "None", "or", "preds_dict", "[", "\"bbox\"", "]", ".", "size", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "box_2d_preds", "=", "preds_dict", "[", "\"bbox\"", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "box_preds", "=", "preds_dict", "[", "\"box3d_camera\"", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "scores", "=", "preds_dict", "[", "\"scores\"", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "box_preds_lidar", "=", "preds_dict", "[", "\"box3d_lidar\"", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# write pred to file", "\n", "label_preds", "=", "preds_dict", "[", "\"label_preds\"", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# label_preds = np.zeros([box_2d_preds.shape[0]], dtype=np.int32)", "\n", "anno", "=", "kitti", ".", "get_start_result_anno", "(", ")", "\n", "num_example", "=", "0", "\n", "for", "box", ",", "box_lidar", ",", "bbox", ",", "score", ",", "label", "in", "zip", "(", "\n", "box_preds", ",", "box_preds_lidar", ",", "box_2d_preds", ",", "scores", ",", "\n", "label_preds", ")", ":", "\n", "                ", "if", "not", "lidar_input", ":", "\n", "                    ", "if", "bbox", "[", "0", "]", ">", "image_shape", "[", "1", "]", "or", "bbox", "[", "1", "]", ">", "image_shape", "[", "0", "]", ":", "\n", "                        ", "continue", "\n", "", "if", "bbox", "[", "2", "]", "<", "0", "or", "bbox", "[", "3", "]", "<", "0", ":", "\n", "                        ", "continue", "\n", "# print(img_shape)", "\n", "", "", "if", "center_limit_range", "is", "not", "None", ":", "\n", "                    ", "limit_range", "=", "np", ".", "array", "(", "center_limit_range", ")", "\n", "if", "(", "np", ".", "any", "(", "box_lidar", "[", ":", "3", "]", "<", "limit_range", "[", ":", "3", "]", ")", "\n", "or", "np", ".", "any", "(", "box_lidar", "[", ":", "3", "]", ">", "limit_range", "[", "3", ":", "]", ")", ")", ":", "\n", "                        ", "continue", "\n", "", "", "bbox", "[", "2", ":", "]", "=", "np", ".", "minimum", "(", "bbox", "[", "2", ":", "]", ",", "image_shape", "[", ":", ":", "-", "1", "]", ")", "\n", "bbox", "[", ":", "2", "]", "=", "np", ".", "maximum", "(", "bbox", "[", ":", "2", "]", ",", "[", "0", ",", "0", "]", ")", "\n", "anno", "[", "\"name\"", "]", ".", "append", "(", "class_names", "[", "int", "(", "label", ")", "]", ")", "\n", "anno", "[", "\"truncated\"", "]", ".", "append", "(", "0.0", ")", "\n", "anno", "[", "\"occluded\"", "]", ".", "append", "(", "0", ")", "\n", "anno", "[", "\"alpha\"", "]", ".", "append", "(", "-", "np", ".", "arctan2", "(", "-", "box_lidar", "[", "1", "]", ",", "box_lidar", "[", "0", "]", ")", "+", "\n", "box", "[", "6", "]", ")", "\n", "anno", "[", "\"bbox\"", "]", ".", "append", "(", "bbox", ")", "\n", "anno", "[", "\"dimensions\"", "]", ".", "append", "(", "box", "[", "3", ":", "6", "]", ")", "\n", "anno", "[", "\"location\"", "]", ".", "append", "(", "box", "[", ":", "3", "]", ")", "\n", "anno", "[", "\"rotation_y\"", "]", ".", "append", "(", "box", "[", "6", "]", ")", "\n", "if", "global_set", "is", "not", "None", ":", "\n", "                    ", "for", "i", "in", "range", "(", "100000", ")", ":", "\n", "                        ", "if", "score", "in", "global_set", ":", "\n", "                            ", "score", "-=", "1", "/", "100000", "\n", "", "else", ":", "\n", "                            ", "global_set", ".", "add", "(", "score", ")", "\n", "break", "\n", "", "", "", "anno", "[", "\"score\"", "]", ".", "append", "(", "score", ")", "\n", "\n", "num_example", "+=", "1", "\n", "", "if", "num_example", "!=", "0", ":", "\n", "                ", "anno", "=", "{", "n", ":", "np", ".", "stack", "(", "v", ")", "for", "n", ",", "v", "in", "anno", ".", "items", "(", ")", "}", "\n", "annos", ".", "append", "(", "anno", ")", "\n", "", "else", ":", "\n", "                ", "annos", ".", "append", "(", "kitti", ".", "empty_result_anno", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "annos", ".", "append", "(", "kitti", ".", "empty_result_anno", "(", ")", ")", "\n", "", "num_example", "=", "annos", "[", "-", "1", "]", "[", "\"name\"", "]", ".", "shape", "[", "0", "]", "\n", "annos", "[", "-", "1", "]", "[", "\"image_idx\"", "]", "=", "np", ".", "array", "(", "\n", "[", "img_idx", "]", "*", "num_example", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "#cls_losses_reduced=100", "\n", "", "return", "annos", ",", "cls_losses_reduced", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.train.evaluate": [[568, 703], ["pathlib.Path", "print", "second.protos.pipeline_pb2.TrainEvalPipelineConfig", "second.builder.voxel_builder.build", "second.pytorch.builder.box_coder_builder.build", "second.builder.target_assigner_builder.build", "train.build_inference_net", "second.pytorch.models.fusion.fusion", "fusion.fusion.cuda", "build_inference_net.cuda", "second.pytorch.builder.input_reader_builder.build", "torch.utils.data.DataLoader", "build_inference_net.eval", "fusion.fusion.eval", "result_path_step.mkdir", "time.time", "print", "second.utils.progress_bar.ProgressBar", "second.utils.progress_bar.ProgressBar.start", "time.time", "iter", "print", "print", "build_inference_net.get_avg_time_dict().items", "pathlib.Path", "open", "f.read", "google.protobuf.text_format.Merge", "print", "torchplus.train.try_restore_latest_checkpoints", "torchplus.train.restore", "build_inference_net.half", "build_inference_net.metrics_to_float", "build_inference_net.convert_norm_to_float", "train.example_convert_to_torch", "second.utils.progress_bar.ProgressBar.print_bar", "len", "print", "print", "print", "second.utils.eval.get_official_eval_result", "print", "second.utils.eval.get_coco_eval_result", "print", "prep_times.append", "time.time", "torch.cuda.synchronize", "torch.cuda.synchronize", "prep_example_times.append", "train.predict_kitti_to_anno", "train._predict_kitti_to_file", "time.time", "time.time", "len", "build_inference_net.get_avg_time_dict", "second.get_label_annos", "build_inference_net.get_global_step", "open", "pickle.dump", "open", "pickle.dump", "len", "time.time", "time.time", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.train.build_inference_net", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.ProgressBar.start", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.checkpoint.try_restore_latest_checkpoints", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.restore", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.metrics_to_float", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.convert_norm_to_float", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.train.example_convert_to_torch", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.ProgressBar.print_bar", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_official_eval_result", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_coco_eval_result", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.train.predict_kitti_to_anno", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.train._predict_kitti_to_file", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.get_avg_time_dict", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_label_annos", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.get_global_step"], ["", "def", "evaluate", "(", "config_path", ",", "\n", "model_dir", ",", "\n", "result_path", "=", "None", ",", "\n", "predict_test", "=", "False", ",", "\n", "ckpt_path", "=", "None", ",", "\n", "ref_detfile", "=", "None", ",", "\n", "pickle_result", "=", "True", ",", "\n", "measure_time", "=", "False", ",", "\n", "batch_size", "=", "None", ")", ":", "\n", "    ", "model_dir", "=", "pathlib", ".", "Path", "(", "model_dir", ")", "\n", "print", "(", "\"Predict_test: \"", ",", "predict_test", ")", "\n", "if", "predict_test", ":", "\n", "        ", "result_name", "=", "'predict_test'", "\n", "", "else", ":", "\n", "        ", "result_name", "=", "'eval_results'", "\n", "", "if", "result_path", "is", "None", ":", "\n", "        ", "result_path", "=", "model_dir", "/", "result_name", "\n", "", "else", ":", "\n", "        ", "result_path", "=", "pathlib", ".", "Path", "(", "result_path", ")", "\n", "", "config", "=", "pipeline_pb2", ".", "TrainEvalPipelineConfig", "(", ")", "\n", "with", "open", "(", "config_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "proto_str", "=", "f", ".", "read", "(", ")", "\n", "text_format", ".", "Merge", "(", "proto_str", ",", "config", ")", "\n", "\n", "", "input_cfg", "=", "config", ".", "eval_input_reader", "\n", "model_cfg", "=", "config", ".", "model", ".", "second", "\n", "train_cfg", "=", "config", ".", "train_config", "\n", "detection_2d_path", "=", "config", ".", "train_config", ".", "detection_2d_path", "\n", "center_limit_range", "=", "model_cfg", ".", "post_center_limit_range", "\n", "######################", "\n", "# BUILD VOXEL GENERATOR", "\n", "######################", "\n", "voxel_generator", "=", "voxel_builder", ".", "build", "(", "model_cfg", ".", "voxel_generator", ")", "\n", "bv_range", "=", "voxel_generator", ".", "point_cloud_range", "[", "[", "0", ",", "1", ",", "3", ",", "4", "]", "]", "\n", "box_coder", "=", "box_coder_builder", ".", "build", "(", "model_cfg", ".", "box_coder", ")", "\n", "target_assigner_cfg", "=", "model_cfg", ".", "target_assigner", "\n", "target_assigner", "=", "target_assigner_builder", ".", "build", "(", "target_assigner_cfg", ",", "\n", "bv_range", ",", "box_coder", ")", "\n", "class_names", "=", "target_assigner", ".", "classes", "\n", "# this one is used for training car detector", "\n", "net", "=", "build_inference_net", "(", "'./configs/car.fhd.config'", ",", "'../model_dir'", ")", "\n", "fusion_layer", "=", "fusion", ".", "fusion", "(", ")", "\n", "fusion_layer", ".", "cuda", "(", ")", "\n", "net", ".", "cuda", "(", ")", "\n", "############ restore parameters for fusion layer", "\n", "if", "ckpt_path", "is", "None", ":", "\n", "        ", "print", "(", "\"load existing model for fusion layer\"", ")", "\n", "torchplus", ".", "train", ".", "try_restore_latest_checkpoints", "(", "model_dir", ",", "[", "fusion_layer", "]", ")", "\n", "", "else", ":", "\n", "        ", "torchplus", ".", "train", ".", "restore", "(", "ckpt_path", ",", "fusion_layer", ")", "\n", "", "if", "train_cfg", ".", "enable_mixed_precision", ":", "\n", "        ", "net", ".", "half", "(", ")", "\n", "net", ".", "metrics_to_float", "(", ")", "\n", "net", ".", "convert_norm_to_float", "(", "net", ")", "\n", "", "batch_size", "=", "batch_size", "or", "input_cfg", ".", "batch_size", "\n", "eval_dataset", "=", "input_reader_builder", ".", "build", "(", "\n", "input_cfg", ",", "\n", "model_cfg", ",", "\n", "training", "=", "not", "predict_test", ",", "\n", "voxel_generator", "=", "voxel_generator", ",", "\n", "target_assigner", "=", "target_assigner", ")", "\n", "eval_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "eval_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "0", ",", "# input_cfg.num_workers,", "\n", "pin_memory", "=", "False", ",", "\n", "collate_fn", "=", "merge_second_batch", ")", "\n", "\n", "if", "train_cfg", ".", "enable_mixed_precision", ":", "\n", "        ", "float_dtype", "=", "torch", ".", "float16", "\n", "", "else", ":", "\n", "        ", "float_dtype", "=", "torch", ".", "float32", "\n", "\n", "", "net", ".", "eval", "(", ")", "\n", "fusion_layer", ".", "eval", "(", ")", "\n", "result_path_step", "=", "result_path", "/", "f\"step_{net.get_global_step()}\"", "\n", "result_path_step", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "dt_annos", "=", "[", "]", "\n", "global_set", "=", "None", "\n", "print", "(", "\"Generate output labels...\"", ")", "\n", "bar", "=", "ProgressBar", "(", ")", "\n", "bar", ".", "start", "(", "(", "len", "(", "eval_dataset", ")", "+", "batch_size", "-", "1", ")", "//", "batch_size", ")", "\n", "prep_example_times", "=", "[", "]", "\n", "prep_times", "=", "[", "]", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "val_loss_final", "=", "0", "\n", "for", "example", "in", "iter", "(", "eval_dataloader", ")", ":", "\n", "        ", "if", "measure_time", ":", "\n", "            ", "prep_times", ".", "append", "(", "time", ".", "time", "(", ")", "-", "t2", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "", "example", "=", "example_convert_to_torch", "(", "example", ",", "float_dtype", ")", "\n", "if", "measure_time", ":", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "prep_example_times", ".", "append", "(", "time", ".", "time", "(", ")", "-", "t1", ")", "\n", "\n", "", "if", "pickle_result", ":", "\n", "            ", "dt_annos_i", ",", "val_losses", "=", "predict_kitti_to_anno", "(", "\n", "net", ",", "detection_2d_path", ",", "fusion_layer", ",", "example", ",", "class_names", ",", "center_limit_range", ",", "\n", "model_cfg", ".", "lidar_input", ",", "global_set", ")", "\n", "dt_annos", "+=", "dt_annos_i", "\n", "val_loss_final", "=", "val_loss_final", "+", "val_losses", "\n", "", "else", ":", "\n", "            ", "_predict_kitti_to_file", "(", "net", ",", "detection_2d_path", ",", "fusion_layer", ",", "example", ",", "result_path_step", ",", "class_names", ",", "\n", "center_limit_range", ",", "model_cfg", ".", "lidar_input", ")", "\n", "", "bar", ".", "print_bar", "(", ")", "\n", "if", "measure_time", ":", "\n", "            ", "t2", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "sec_per_example", "=", "len", "(", "eval_dataset", ")", "/", "(", "time", ".", "time", "(", ")", "-", "t", ")", "\n", "print", "(", "f'generate label finished({sec_per_example:.2f}/s). start eval:'", ")", "\n", "print", "(", "\"validation_loss:\"", ",", "val_loss_final", "/", "len", "(", "eval_dataloader", ")", ")", "\n", "if", "measure_time", ":", "\n", "        ", "print", "(", "f\"avg example to torch time: {np.mean(prep_example_times) * 1000:.3f} ms\"", ")", "\n", "print", "(", "f\"avg prep time: {np.mean(prep_times) * 1000:.3f} ms\"", ")", "\n", "", "for", "name", ",", "val", "in", "net", ".", "get_avg_time_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "f\"avg {name} time = {val * 1000:.3f} ms\"", ")", "\n", "", "if", "not", "predict_test", ":", "\n", "        ", "gt_annos", "=", "[", "info", "[", "\"annos\"", "]", "for", "info", "in", "eval_dataset", ".", "dataset", ".", "kitti_infos", "]", "\n", "if", "not", "pickle_result", ":", "\n", "            ", "dt_annos", "=", "kitti", ".", "get_label_annos", "(", "result_path_step", ")", "\n", "", "result", "=", "get_official_eval_result", "(", "gt_annos", ",", "dt_annos", ",", "class_names", ")", "\n", "# print(json.dumps(result, indent=2))", "\n", "print", "(", "result", ")", "\n", "result", "=", "get_coco_eval_result", "(", "gt_annos", ",", "dt_annos", ",", "class_names", ")", "\n", "print", "(", "result", ")", "\n", "if", "pickle_result", ":", "\n", "            ", "with", "open", "(", "result_path_step", "/", "\"result.pkl\"", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "dt_annos", ",", "f", ")", "\n", "", "", "", "else", ":", "\n", "        ", "if", "pickle_result", ":", "\n", "            ", "with", "open", "(", "result_path_step", "/", "\"result.pkl\"", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "dt_annos", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.train.save_config": [[705, 713], ["second.protos.pipeline_pb2.TrainEvalPipelineConfig", "google.protobuf.text_format.MessageToString", "open", "f.read", "google.protobuf.text_format.Merge", "open", "f.write"], "function", ["None"], ["", "", "", "", "def", "save_config", "(", "config_path", ",", "save_path", ")", ":", "\n", "    ", "config", "=", "pipeline_pb2", ".", "TrainEvalPipelineConfig", "(", ")", "\n", "with", "open", "(", "config_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "proto_str", "=", "f", ".", "read", "(", ")", "\n", "text_format", ".", "Merge", "(", "proto_str", ",", "config", ")", "\n", "", "ret", "=", "text_format", ".", "MessageToString", "(", "config", ",", "indent", "=", "2", ")", "\n", "with", "open", "(", "save_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.pytorch.train.predict_v2": [[714, 916], ["time.time", "example[].view", "time.time", "net._box_coder.decode_torch.view", "batch_cls_preds.view.view", "net._box_coder.decode_torch", "zip", "example[].view", "batch_dir_preds.view.view", "box_preds.float.float", "cls_preds.float.float", "rect.float.float", "Trv2c.float.float", "P2.float.float", "predictions_dicts.append", "torch.sigmoid", "box_torch_ops.corner_to_standup_nd.unsqueeze", "second.pytorch.core.box_torch_ops.multiclass_nms", "enumerate", "torch.cat", "torch.cat", "torch.cat", "second.pytorch.core.box_torch_ops.box_lidar_to_camera", "second.pytorch.core.box_torch_ops.center_to_corner_box3d", "second.pytorch.core.box_torch_ops.project_to_image", "torch.cat", "torch.max", "second.pytorch.core.box_torch_ops.center_to_corner_box2d", "second.pytorch.core.box_torch_ops.corner_to_standup_nd", "torch.cat", "torch.sigmoid.squeeze", "torch.zeros", "torch.max", "torch.tensor().type_as", "top_scores.masked_select.masked_select", "nms_func", "torch.where", "torch.min", "torch.max", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sigmoid", "F.softmax", "torch.cat.append", "torch.cat.append", "torch.cat.append", "second.pytorch.core.box_torch_ops.center_to_corner_box2d", "second.pytorch.core.box_torch_ops.corner_to_standup_nd", "dir_labels.byte", "torch.tensor().type_as", "torch.tensor().type_as", "torch.full", "torch.cat.append", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BevBoxCoderTorch.decode_torch", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_torch_ops.multiclass_nms", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box_lidar_to_camera", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.project_to_image", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box2d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corner_to_standup_nd", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box2d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corner_to_standup_nd"], ["", "", "def", "predict_v2", "(", "net", ",", "example", ",", "preds_dict", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "batch_size", "=", "example", "[", "'anchors'", "]", ".", "shape", "[", "0", "]", "\n", "batch_anchors", "=", "example", "[", "\"anchors\"", "]", ".", "view", "(", "batch_size", ",", "-", "1", ",", "7", ")", "\n", "batch_rect", "=", "example", "[", "\"rect\"", "]", "\n", "batch_Trv2c", "=", "example", "[", "\"Trv2c\"", "]", "\n", "batch_P2", "=", "example", "[", "\"P2\"", "]", "\n", "if", "\"anchors_mask\"", "not", "in", "example", ":", "\n", "        ", "batch_anchors_mask", "=", "[", "None", "]", "*", "batch_size", "\n", "", "else", ":", "\n", "        ", "batch_anchors_mask", "=", "example", "[", "\"anchors_mask\"", "]", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "", "batch_imgidx", "=", "example", "[", "'image_idx'", "]", "\n", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "batch_box_preds", "=", "preds_dict", "[", "\"box_preds\"", "]", "\n", "batch_cls_preds", "=", "preds_dict", "[", "\"cls_preds\"", "]", "\n", "batch_box_preds", "=", "batch_box_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "\n", "net", ".", "_box_coder", ".", "code_size", ")", "\n", "num_class_with_bg", "=", "net", ".", "_num_class", "\n", "if", "not", "net", ".", "_encode_background_as_zeros", ":", "\n", "        ", "num_class_with_bg", "=", "net", ".", "_num_class", "+", "1", "\n", "", "batch_cls_preds", "=", "batch_cls_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "\n", "num_class_with_bg", ")", "\n", "batch_box_preds", "=", "net", ".", "_box_coder", ".", "decode_torch", "(", "batch_box_preds", ",", "\n", "batch_anchors", ")", "\n", "if", "net", ".", "_use_direction_classifier", ":", "\n", "        ", "batch_dir_preds", "=", "preds_dict", "[", "\"dir_cls_preds\"", "]", "\n", "batch_dir_preds", "=", "batch_dir_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "batch_dir_preds", "=", "[", "None", "]", "*", "batch_size", "\n", "\n", "", "predictions_dicts", "=", "[", "]", "\n", "for", "box_preds", ",", "cls_preds", ",", "dir_preds", ",", "rect", ",", "Trv2c", ",", "P2", ",", "img_idx", ",", "a_mask", "in", "zip", "(", "\n", "batch_box_preds", ",", "batch_cls_preds", ",", "batch_dir_preds", ",", "batch_rect", ",", "\n", "batch_Trv2c", ",", "batch_P2", ",", "batch_imgidx", ",", "batch_anchors_mask", ")", ":", "\n", "        ", "if", "a_mask", "is", "not", "None", ":", "\n", "            ", "box_preds", "=", "box_preds", "[", "a_mask", "]", "\n", "cls_preds", "=", "cls_preds", "[", "a_mask", "]", "\n", "", "box_preds", "=", "box_preds", ".", "float", "(", ")", "\n", "cls_preds", "=", "cls_preds", ".", "float", "(", ")", "\n", "rect", "=", "rect", ".", "float", "(", ")", "\n", "Trv2c", "=", "Trv2c", ".", "float", "(", ")", "\n", "P2", "=", "P2", ".", "float", "(", ")", "\n", "if", "net", ".", "_use_direction_classifier", ":", "\n", "            ", "if", "a_mask", "is", "not", "None", ":", "\n", "                ", "dir_preds", "=", "dir_preds", "[", "a_mask", "]", "\n", "", "dir_labels", "=", "torch", ".", "max", "(", "dir_preds", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "", "if", "net", ".", "_encode_background_as_zeros", ":", "\n", "# this don't support softmax", "\n", "            ", "assert", "net", ".", "_use_sigmoid_score", "is", "True", "\n", "total_scores", "=", "torch", ".", "sigmoid", "(", "cls_preds", ")", "\n", "", "else", ":", "\n", "# encode background as first element in one-hot vector", "\n", "            ", "if", "net", ".", "_use_sigmoid_score", ":", "\n", "                ", "total_scores", "=", "torch", ".", "sigmoid", "(", "cls_preds", ")", "[", "...", ",", "1", ":", "]", "\n", "", "else", ":", "\n", "                ", "total_scores", "=", "F", ".", "softmax", "(", "cls_preds", ",", "dim", "=", "-", "1", ")", "[", "...", ",", "1", ":", "]", "\n", "# Apply NMS in birdeye view", "\n", "", "", "if", "net", ".", "_use_rotate_nms", ":", "\n", "            ", "nms_func", "=", "box_torch_ops", ".", "rotate_nms", "\n", "", "else", ":", "\n", "            ", "nms_func", "=", "box_torch_ops", ".", "nms", "\n", "\n", "", "if", "net", ".", "_multiclass_nms", ":", "\n", "# curently only support class-agnostic boxes.", "\n", "            ", "boxes_for_nms", "=", "box_preds", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n", "if", "not", "net", ".", "_use_rotate_nms", ":", "\n", "                ", "box_preds_corners", "=", "box_torch_ops", ".", "center_to_corner_box2d", "(", "\n", "boxes_for_nms", "[", ":", ",", ":", "2", "]", ",", "boxes_for_nms", "[", ":", ",", "2", ":", "4", "]", ",", "\n", "boxes_for_nms", "[", ":", ",", "4", "]", ")", "\n", "boxes_for_nms", "=", "box_torch_ops", ".", "corner_to_standup_nd", "(", "\n", "box_preds_corners", ")", "\n", "", "boxes_for_mcnms", "=", "boxes_for_nms", ".", "unsqueeze", "(", "1", ")", "\n", "selected_per_class", "=", "box_torch_ops", ".", "multiclass_nms", "(", "\n", "nms_func", "=", "nms_func", ",", "\n", "boxes", "=", "boxes_for_mcnms", ",", "\n", "scores", "=", "total_scores", ",", "\n", "num_class", "=", "net", ".", "_num_class", ",", "\n", "pre_max_size", "=", "net", ".", "_nms_pre_max_size", ",", "\n", "post_max_size", "=", "net", ".", "_nms_post_max_size", ",", "\n", "iou_threshold", "=", "net", ".", "_nms_iou_threshold", ",", "\n", "score_thresh", "=", "net", ".", "_nms_score_threshold", ",", "\n", ")", "\n", "selected_boxes", ",", "selected_labels", ",", "selected_scores", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "selected_dir_labels", "=", "[", "]", "\n", "for", "i", ",", "selected", "in", "enumerate", "(", "selected_per_class", ")", ":", "\n", "                ", "if", "selected", "is", "not", "None", ":", "\n", "                    ", "num_dets", "=", "selected", ".", "shape", "[", "0", "]", "\n", "selected_boxes", ".", "append", "(", "box_preds", "[", "selected", "]", ")", "\n", "selected_labels", ".", "append", "(", "\n", "torch", ".", "full", "(", "[", "num_dets", "]", ",", "i", ",", "dtype", "=", "torch", ".", "int64", ")", ")", "\n", "if", "net", ".", "_use_direction_classifier", ":", "\n", "                        ", "selected_dir_labels", ".", "append", "(", "dir_labels", "[", "selected", "]", ")", "\n", "", "selected_scores", ".", "append", "(", "total_scores", "[", "selected", ",", "i", "]", ")", "\n", "", "", "selected_boxes", "=", "torch", ".", "cat", "(", "selected_boxes", ",", "dim", "=", "0", ")", "\n", "selected_labels", "=", "torch", ".", "cat", "(", "selected_labels", ",", "dim", "=", "0", ")", "\n", "selected_scores", "=", "torch", ".", "cat", "(", "selected_scores", ",", "dim", "=", "0", ")", "\n", "if", "net", ".", "_use_direction_classifier", ":", "\n", "                ", "selected_dir_labels", "=", "torch", ".", "cat", "(", "\n", "selected_dir_labels", ",", "dim", "=", "0", ")", "\n", "", "", "else", ":", "\n", "# get highest score per prediction, than apply nms", "\n", "# to remove overlapped box.", "\n", "            ", "if", "num_class_with_bg", "==", "1", ":", "\n", "                ", "top_scores", "=", "total_scores", ".", "squeeze", "(", "-", "1", ")", "\n", "top_labels", "=", "torch", ".", "zeros", "(", "\n", "total_scores", ".", "shape", "[", "0", "]", ",", "\n", "device", "=", "total_scores", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "", "else", ":", "\n", "                ", "top_scores", ",", "top_labels", "=", "torch", ".", "max", "(", "total_scores", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "if", "net", ".", "_nms_score_threshold", ">", "0.0", ":", "\n", "                ", "thresh", "=", "torch", ".", "tensor", "(", "\n", "[", "net", ".", "_nms_score_threshold", "]", ",", "\n", "device", "=", "total_scores", ".", "device", ")", ".", "type_as", "(", "total_scores", ")", "\n", "top_scores_keep", "=", "(", "top_scores", ">=", "thresh", ")", "\n", "top_scores", "=", "top_scores", ".", "masked_select", "(", "top_scores_keep", ")", "\n", "\n", "", "if", "top_scores", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "                ", "if", "net", ".", "_nms_score_threshold", ">", "0.0", ":", "\n", "                    ", "box_preds", "=", "box_preds", "[", "top_scores_keep", "]", "\n", "if", "net", ".", "_use_direction_classifier", ":", "\n", "                        ", "dir_labels", "=", "dir_labels", "[", "top_scores_keep", "]", "\n", "", "top_labels", "=", "top_labels", "[", "top_scores_keep", "]", "\n", "", "boxes_for_nms", "=", "box_preds", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n", "if", "not", "net", ".", "_use_rotate_nms", ":", "\n", "                    ", "box_preds_corners", "=", "box_torch_ops", ".", "center_to_corner_box2d", "(", "\n", "boxes_for_nms", "[", ":", ",", ":", "2", "]", ",", "boxes_for_nms", "[", ":", ",", "2", ":", "4", "]", ",", "\n", "boxes_for_nms", "[", ":", ",", "4", "]", ")", "\n", "boxes_for_nms", "=", "box_torch_ops", ".", "corner_to_standup_nd", "(", "\n", "box_preds_corners", ")", "\n", "# the nms in 3d detection just remove overlap boxes.", "\n", "", "selected", "=", "nms_func", "(", "\n", "boxes_for_nms", ",", "\n", "top_scores", ",", "\n", "pre_max_size", "=", "net", ".", "_nms_pre_max_size", ",", "\n", "post_max_size", "=", "net", ".", "_nms_post_max_size", ",", "\n", "iou_threshold", "=", "net", ".", "_nms_iou_threshold", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "                ", "selected", "=", "[", "]", "\n", "# if selected is not None:", "\n", "", "selected_boxes", "=", "box_preds", "[", "selected", "]", "\n", "if", "net", ".", "_use_direction_classifier", ":", "\n", "                ", "selected_dir_labels", "=", "dir_labels", "[", "selected", "]", "\n", "", "selected_labels", "=", "top_labels", "[", "selected", "]", "\n", "selected_scores", "=", "top_scores", "[", "selected", "]", "\n", "# finally generate predictions.", "\n", "", "if", "selected_boxes", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "            ", "box_preds", "=", "selected_boxes", "\n", "scores", "=", "selected_scores", "\n", "label_preds", "=", "selected_labels", "\n", "if", "net", ".", "_use_direction_classifier", ":", "\n", "                ", "dir_labels", "=", "selected_dir_labels", "\n", "#print(\"dir_labels shape is:\",dir_labels.shape,\"the values are: \",dir_labels)", "\n", "opp_labels", "=", "(", "box_preds", "[", "...", ",", "-", "1", "]", ">", "0", ")", "^", "dir_labels", ".", "byte", "(", ")", "\n", "box_preds", "[", "...", ",", "-", "1", "]", "+=", "torch", ".", "where", "(", "\n", "opp_labels", ",", "\n", "torch", ".", "tensor", "(", "np", ".", "pi", ")", ".", "type_as", "(", "box_preds", ")", ",", "\n", "torch", ".", "tensor", "(", "0.0", ")", ".", "type_as", "(", "box_preds", ")", ")", "\n", "", "final_box_preds", "=", "box_preds", "\n", "final_scores", "=", "scores", "\n", "final_labels", "=", "label_preds", "\n", "final_box_preds_camera", "=", "box_torch_ops", ".", "box_lidar_to_camera", "(", "\n", "final_box_preds", ",", "rect", ",", "Trv2c", ")", "\n", "locs", "=", "final_box_preds_camera", "[", ":", ",", ":", "3", "]", "\n", "dims", "=", "final_box_preds_camera", "[", ":", ",", "3", ":", "6", "]", "\n", "angles", "=", "final_box_preds_camera", "[", ":", ",", "6", "]", "\n", "camera_box_origin", "=", "[", "0.5", ",", "1.0", ",", "0.5", "]", "\n", "box_corners", "=", "box_torch_ops", ".", "center_to_corner_box3d", "(", "\n", "locs", ",", "dims", ",", "angles", ",", "camera_box_origin", ",", "axis", "=", "1", ")", "\n", "\n", "box_corners_in_image", "=", "box_torch_ops", ".", "project_to_image", "(", "\n", "box_corners", ",", "P2", ")", "\n", "# box_corners_in_image: [N, 8, 2]", "\n", "minxy", "=", "torch", ".", "min", "(", "box_corners_in_image", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "maxxy", "=", "torch", ".", "max", "(", "box_corners_in_image", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "box_2d_preds", "=", "torch", ".", "cat", "(", "[", "minxy", ",", "maxxy", "]", ",", "dim", "=", "1", ")", "\n", "# predictions", "\n", "predictions_dict", "=", "{", "\n", "\"bbox\"", ":", "box_2d_preds", ",", "\n", "\"box3d_camera\"", ":", "final_box_preds_camera", ",", "\n", "\"box3d_lidar\"", ":", "final_box_preds", ",", "\n", "\"scores\"", ":", "final_scores", ",", "\n", "\"label_preds\"", ":", "label_preds", ",", "\n", "\"image_idx\"", ":", "img_idx", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "dtype", "=", "batch_box_preds", ".", "dtype", "\n", "device", "=", "batch_box_preds", ".", "device", "\n", "predictions_dict", "=", "{", "\n", "\"bbox\"", ":", "torch", ".", "zeros", "(", "[", "0", ",", "4", "]", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", ",", "\n", "\"box3d_camera\"", ":", "torch", ".", "zeros", "(", "[", "0", ",", "7", "]", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", ",", "\n", "\"box3d_lidar\"", ":", "torch", ".", "zeros", "(", "[", "0", ",", "7", "]", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", ",", "\n", "\"scores\"", ":", "torch", ".", "zeros", "(", "[", "0", "]", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", ",", "\n", "\"label_preds\"", ":", "torch", ".", "zeros", "(", "[", "0", ",", "4", "]", ",", "dtype", "=", "top_labels", ".", "dtype", ",", "device", "=", "device", ")", ",", "\n", "\"image_idx\"", ":", "img_idx", ",", "\n", "}", "\n", "", "predictions_dicts", ".", "append", "(", "predictions_dict", ")", "\n", "", "return", "predictions_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.rpn.RPN.__init__": [[15, 160], ["torch.nn.Module.__init__", "range", "all", "torchplus.nn.Sequential", "range", "torchplus.nn.Sequential", "torchplus.nn.Sequential", "range", "torchplus.nn.Sequential", "torchplus.nn.Sequential", "range", "torchplus.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "factors.append", "torchplus.nn.Sequential", "torch.nn.ZeroPad2d", "Conv2d", "BatchNorm2d", "torch.nn.ReLU", "rpn.RPN.block1.add", "rpn.RPN.block1.add", "rpn.RPN.block1.add", "ConvTranspose2d", "BatchNorm2d", "torch.nn.ReLU", "torch.nn.ZeroPad2d", "Conv2d", "BatchNorm2d", "torch.nn.ReLU", "rpn.RPN.block2.add", "rpn.RPN.block2.add", "rpn.RPN.block2.add", "ConvTranspose2d", "BatchNorm2d", "torch.nn.ReLU", "torch.nn.ZeroPad2d", "Conv2d", "BatchNorm2d", "torch.nn.ReLU", "rpn.RPN.block3.add", "rpn.RPN.block3.add", "rpn.RPN.block3.add", "ConvTranspose2d", "BatchNorm2d", "torch.nn.ReLU", "sum", "sum", "torch.nn.Conv2d", "torch.nn.Conv2d", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "Conv2d", "BatchNorm2d", "torch.nn.ReLU", "Conv2d", "BatchNorm2d", "torch.nn.ReLU", "torch.nn.MaxPool2d", "Conv2d", "BatchNorm2d", "torch.nn.ReLU", "Conv2d", "BatchNorm2d", "torch.nn.ReLU", "Conv2d", "BatchNorm2d", "torch.nn.ReLU", "sum", "sum", "int", "numpy.prod", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args"], ["    ", "def", "__init__", "(", "self", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_class", "=", "2", ",", "\n", "layer_nums", "=", "[", "3", ",", "5", ",", "5", "]", ",", "\n", "layer_strides", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "num_filters", "=", "[", "128", ",", "128", ",", "256", "]", ",", "\n", "upsample_strides", "=", "[", "1", ",", "2", ",", "4", "]", ",", "\n", "num_upsample_filters", "=", "[", "256", ",", "256", ",", "256", "]", ",", "\n", "num_input_features", "=", "128", ",", "\n", "num_anchor_per_loc", "=", "2", ",", "\n", "encode_background_as_zeros", "=", "True", ",", "\n", "use_direction_classifier", "=", "True", ",", "\n", "use_groupnorm", "=", "False", ",", "\n", "num_groups", "=", "32", ",", "\n", "use_bev", "=", "False", ",", "\n", "box_code_size", "=", "7", ",", "\n", "use_rc_net", "=", "False", ",", "\n", "name", "=", "'rpn'", ")", ":", "\n", "        ", "super", "(", "RPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_num_anchor_per_loc", "=", "num_anchor_per_loc", "\n", "self", ".", "_use_direction_classifier", "=", "use_direction_classifier", "\n", "self", ".", "_use_bev", "=", "use_bev", "\n", "self", ".", "_use_rc_net", "=", "use_rc_net", "\n", "assert", "len", "(", "layer_nums", ")", "==", "3", "\n", "assert", "len", "(", "layer_strides", ")", "==", "len", "(", "layer_nums", ")", "\n", "assert", "len", "(", "num_filters", ")", "==", "len", "(", "layer_nums", ")", "\n", "assert", "len", "(", "upsample_strides", ")", "==", "len", "(", "layer_nums", ")", "\n", "assert", "len", "(", "num_upsample_filters", ")", "==", "len", "(", "layer_nums", ")", "\n", "factors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "layer_nums", ")", ")", ":", "\n", "            ", "assert", "int", "(", "np", ".", "prod", "(", "layer_strides", "[", ":", "i", "+", "1", "]", ")", ")", "%", "upsample_strides", "[", "i", "]", "==", "0", "\n", "factors", ".", "append", "(", "np", ".", "prod", "(", "layer_strides", "[", ":", "i", "+", "1", "]", ")", "//", "upsample_strides", "[", "i", "]", ")", "\n", "", "assert", "all", "(", "[", "x", "==", "factors", "[", "0", "]", "for", "x", "in", "factors", "]", ")", "\n", "if", "use_norm", ":", "\n", "            ", "if", "use_groupnorm", ":", "\n", "                ", "BatchNorm2d", "=", "change_default_args", "(", "\n", "num_groups", "=", "num_groups", ",", "eps", "=", "1e-3", ")", "(", "GroupNorm", ")", "\n", "", "else", ":", "\n", "                ", "BatchNorm2d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm2d", ")", "\n", "", "Conv2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Conv2d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm2d", "=", "Empty", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Conv2d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "\n", "# note that when stride > 1, conv2d with same padding isn't", "\n", "# equal to pad-conv2d. we should use pad-conv2d.", "\n", "", "block2_input_filters", "=", "num_filters", "[", "0", "]", "\n", "if", "use_bev", ":", "\n", "            ", "self", ".", "bev_extractor", "=", "Sequential", "(", "\n", "Conv2d", "(", "6", ",", "32", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.MaxPool2d(2, 2),", "\n", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", ")", "\n", "block2_input_filters", "+=", "64", "\n", "\n", "", "self", ".", "block1", "=", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "1", ")", ",", "\n", "Conv2d", "(", "\n", "num_input_features", ",", "num_filters", "[", "0", "]", ",", "3", ",", "stride", "=", "layer_strides", "[", "0", "]", ")", ",", "\n", "BatchNorm2d", "(", "num_filters", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "layer_nums", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "block1", ".", "add", "(", "\n", "Conv2d", "(", "num_filters", "[", "0", "]", ",", "num_filters", "[", "0", "]", ",", "3", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "block1", ".", "add", "(", "BatchNorm2d", "(", "num_filters", "[", "0", "]", ")", ")", "\n", "self", ".", "block1", ".", "add", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "self", ".", "deconv1", "=", "Sequential", "(", "\n", "ConvTranspose2d", "(", "\n", "num_filters", "[", "0", "]", ",", "\n", "num_upsample_filters", "[", "0", "]", ",", "\n", "upsample_strides", "[", "0", "]", ",", "\n", "stride", "=", "upsample_strides", "[", "0", "]", ")", ",", "\n", "BatchNorm2d", "(", "num_upsample_filters", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "block2", "=", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "1", ")", ",", "\n", "Conv2d", "(", "\n", "block2_input_filters", ",", "\n", "num_filters", "[", "1", "]", ",", "\n", "3", ",", "\n", "stride", "=", "layer_strides", "[", "1", "]", ")", ",", "\n", "BatchNorm2d", "(", "num_filters", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "layer_nums", "[", "1", "]", ")", ":", "\n", "            ", "self", ".", "block2", ".", "add", "(", "\n", "Conv2d", "(", "num_filters", "[", "1", "]", ",", "num_filters", "[", "1", "]", ",", "3", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "block2", ".", "add", "(", "BatchNorm2d", "(", "num_filters", "[", "1", "]", ")", ")", "\n", "self", ".", "block2", ".", "add", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "self", ".", "deconv2", "=", "Sequential", "(", "\n", "ConvTranspose2d", "(", "\n", "num_filters", "[", "1", "]", ",", "\n", "num_upsample_filters", "[", "1", "]", ",", "\n", "upsample_strides", "[", "1", "]", ",", "\n", "stride", "=", "upsample_strides", "[", "1", "]", ")", ",", "\n", "BatchNorm2d", "(", "num_upsample_filters", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "block3", "=", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "1", ")", ",", "\n", "Conv2d", "(", "num_filters", "[", "1", "]", ",", "num_filters", "[", "2", "]", ",", "3", ",", "stride", "=", "layer_strides", "[", "2", "]", ")", ",", "\n", "BatchNorm2d", "(", "num_filters", "[", "2", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "layer_nums", "[", "2", "]", ")", ":", "\n", "            ", "self", ".", "block3", ".", "add", "(", "\n", "Conv2d", "(", "num_filters", "[", "2", "]", ",", "num_filters", "[", "2", "]", ",", "3", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "block3", ".", "add", "(", "BatchNorm2d", "(", "num_filters", "[", "2", "]", ")", ")", "\n", "self", ".", "block3", ".", "add", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "self", ".", "deconv3", "=", "Sequential", "(", "\n", "ConvTranspose2d", "(", "\n", "num_filters", "[", "2", "]", ",", "\n", "num_upsample_filters", "[", "2", "]", ",", "\n", "upsample_strides", "[", "2", "]", ",", "\n", "stride", "=", "upsample_strides", "[", "2", "]", ")", ",", "\n", "BatchNorm2d", "(", "num_upsample_filters", "[", "2", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "if", "encode_background_as_zeros", ":", "\n", "            ", "num_cls", "=", "num_anchor_per_loc", "*", "num_class", "\n", "", "else", ":", "\n", "            ", "num_cls", "=", "num_anchor_per_loc", "*", "(", "num_class", "+", "1", ")", "\n", "", "self", ".", "conv_cls", "=", "nn", ".", "Conv2d", "(", "sum", "(", "num_upsample_filters", ")", ",", "num_cls", ",", "1", ")", "\n", "self", ".", "conv_box", "=", "nn", ".", "Conv2d", "(", "\n", "sum", "(", "num_upsample_filters", ")", ",", "num_anchor_per_loc", "*", "box_code_size", ",", "1", ")", "\n", "if", "use_direction_classifier", ":", "\n", "            ", "self", ".", "conv_dir_cls", "=", "nn", ".", "Conv2d", "(", "\n", "sum", "(", "num_upsample_filters", ")", ",", "num_anchor_per_loc", "*", "2", ",", "1", ")", "\n", "\n", "", "if", "self", ".", "_use_rc_net", ":", "\n", "            ", "self", ".", "conv_rc", "=", "nn", ".", "Conv2d", "(", "\n", "sum", "(", "num_upsample_filters", ")", ",", "num_anchor_per_loc", "*", "box_code_size", ",", "\n", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.rpn.RPN.forward": [[161, 198], ["rpn.RPN.block1", "rpn.RPN.deconv1", "rpn.RPN.block2", "rpn.RPN.deconv2", "rpn.RPN.block3", "rpn.RPN.deconv3", "torch.cat", "rpn.RPN.conv_box", "rpn.RPN.conv_cls", "box_preds.permute().contiguous.permute().contiguous.permute().contiguous", "cls_preds.permute().contiguous.permute().contiguous.permute().contiguous", "torch.clamp", "torch.cat", "rpn.RPN.conv_dir_cls", "dir_cls_preds.permute().contiguous.permute().contiguous.permute().contiguous", "rpn.RPN.conv_rc", "rc_preds.permute().contiguous.permute().contiguous.permute().contiguous", "box_preds.permute().contiguous.permute().contiguous.permute", "cls_preds.permute().contiguous.permute().contiguous.permute", "torch.log", "numpy.log", "rpn.RPN.bev_extractor", "dir_cls_preds.permute().contiguous.permute().contiguous.permute", "rc_preds.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "bev", "=", "None", ")", ":", "\n", "# t = time.time()", "\n", "# torch.cuda.synchronize()", "\n", "\n", "        ", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "up1", "=", "self", ".", "deconv1", "(", "x", ")", "\n", "if", "self", ".", "_use_bev", ":", "\n", "            ", "bev", "[", ":", ",", "-", "1", "]", "=", "torch", ".", "clamp", "(", "\n", "torch", ".", "log", "(", "1", "+", "bev", "[", ":", ",", "-", "1", "]", ")", "/", "np", ".", "log", "(", "16.0", ")", ",", "max", "=", "1.0", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "self", ".", "bev_extractor", "(", "bev", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "up2", "=", "self", ".", "deconv2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "up3", "=", "self", ".", "deconv3", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "up1", ",", "up2", ",", "up3", "]", ",", "dim", "=", "1", ")", "\n", "box_preds", "=", "self", ".", "conv_box", "(", "x", ")", "\n", "cls_preds", "=", "self", ".", "conv_cls", "(", "x", ")", "\n", "\n", "# [N, C, y(H), x(W)]", "\n", "box_preds", "=", "box_preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "cls_preds", "=", "cls_preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "ret_dict", "=", "{", "\n", "\"box_preds\"", ":", "box_preds", ",", "\n", "\"cls_preds\"", ":", "cls_preds", ",", "\n", "}", "\n", "if", "self", ".", "_use_direction_classifier", ":", "\n", "            ", "dir_cls_preds", "=", "self", ".", "conv_dir_cls", "(", "x", ")", "\n", "dir_cls_preds", "=", "dir_cls_preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "ret_dict", "[", "\"dir_cls_preds\"", "]", "=", "dir_cls_preds", "\n", "", "if", "self", ".", "_use_rc_net", ":", "\n", "            ", "rc_preds", "=", "self", ".", "conv_rc", "(", "x", ")", "\n", "rc_preds", "=", "rc_preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "ret_dict", "[", "\"rc_preds\"", "]", "=", "rc_preds", "\n", "# torch.cuda.synchronize()", "\n", "# print(\"rpn forward time\", time.time() - t)", "\n", "\n", "", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.rpn.RPNV2.__init__": [[202, 302], ["torch.nn.Module.__init__", "enumerate", "torch.nn.ModuleList", "torch.nn.ModuleList", "print", "torch.nn.Conv2d", "torch.nn.Conv2d", "len", "len", "len", "len", "len", "len", "len", "len", "torchplus.nn.Sequential", "range", "blocks.append", "torchplus.nn.Sequential", "deblocks.append", "sum", "sum", "torch.nn.Conv2d", "torch.nn.Conv2d", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torch.nn.ZeroPad2d", "Conv2d", "BatchNorm2d", "torch.nn.ReLU", "torchplus.nn.Sequential.add", "torchplus.nn.Sequential.add", "torchplus.nn.Sequential.add", "ConvTranspose2d", "BatchNorm2d", "torch.nn.ReLU", "sum", "sum", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "Conv2d", "BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args"], ["def", "__init__", "(", "self", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_class", "=", "2", ",", "\n", "layer_nums", "=", "[", "3", ",", "5", ",", "5", "]", ",", "\n", "layer_strides", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "num_filters", "=", "[", "128", ",", "128", ",", "256", "]", ",", "\n", "upsample_strides", "=", "[", "1", ",", "2", ",", "4", "]", ",", "\n", "num_upsample_filters", "=", "[", "256", ",", "256", ",", "256", "]", ",", "\n", "num_input_features", "=", "128", ",", "\n", "num_anchor_per_loc", "=", "2", ",", "\n", "encode_background_as_zeros", "=", "True", ",", "\n", "use_direction_classifier", "=", "True", ",", "\n", "use_groupnorm", "=", "False", ",", "\n", "num_groups", "=", "32", ",", "\n", "use_bev", "=", "False", ",", "\n", "box_code_size", "=", "7", ",", "\n", "use_rc_net", "=", "False", ",", "\n", "name", "=", "'rpn'", ")", ":", "\n", "        ", "super", "(", "RPNV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_num_anchor_per_loc", "=", "num_anchor_per_loc", "\n", "self", ".", "_use_direction_classifier", "=", "use_direction_classifier", "\n", "self", ".", "_use_bev", "=", "use_bev", "\n", "self", ".", "_use_rc_net", "=", "use_rc_net", "\n", "# assert len(layer_nums) == 3", "\n", "assert", "len", "(", "layer_strides", ")", "==", "len", "(", "layer_nums", ")", "\n", "assert", "len", "(", "num_filters", ")", "==", "len", "(", "layer_nums", ")", "\n", "assert", "len", "(", "upsample_strides", ")", "==", "len", "(", "layer_nums", ")", "\n", "assert", "len", "(", "num_upsample_filters", ")", "==", "len", "(", "layer_nums", ")", "\n", "\"\"\"\n        factors = []\n        for i in range(len(layer_nums)):\n            assert int(np.prod(layer_strides[:i + 1])) % upsample_strides[i] == 0\n            factors.append(np.prod(layer_strides[:i + 1]) // upsample_strides[i])\n        assert all([x == factors[0] for x in factors])\n        \"\"\"", "\n", "if", "use_norm", ":", "\n", "            ", "if", "use_groupnorm", ":", "\n", "                ", "BatchNorm2d", "=", "change_default_args", "(", "\n", "num_groups", "=", "num_groups", ",", "eps", "=", "1e-3", ")", "(", "GroupNorm", ")", "\n", "", "else", ":", "\n", "                ", "BatchNorm2d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm2d", ")", "\n", "", "Conv2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Conv2d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm2d", "=", "Empty", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Conv2d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "\n", "", "in_filters", "=", "[", "num_input_features", ",", "*", "num_filters", "[", ":", "-", "1", "]", "]", "\n", "# note that when stride > 1, conv2d with same padding isn't", "\n", "# equal to pad-conv2d. we should use pad-conv2d.", "\n", "blocks", "=", "[", "]", "\n", "deblocks", "=", "[", "]", "\n", "\n", "for", "i", ",", "layer_num", "in", "enumerate", "(", "layer_nums", ")", ":", "\n", "            ", "block", "=", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "1", ")", ",", "\n", "Conv2d", "(", "\n", "in_filters", "[", "i", "]", ",", "num_filters", "[", "i", "]", ",", "3", ",", "stride", "=", "layer_strides", "[", "i", "]", ")", ",", "\n", "BatchNorm2d", "(", "num_filters", "[", "i", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "for", "j", "in", "range", "(", "layer_num", ")", ":", "\n", "#print(\"#### j is \",j)", "\n", "                ", "block", ".", "add", "(", "\n", "Conv2d", "(", "num_filters", "[", "i", "]", ",", "num_filters", "[", "i", "]", ",", "3", ",", "padding", "=", "1", ")", ")", "\n", "block", ".", "add", "(", "BatchNorm2d", "(", "num_filters", "[", "i", "]", ")", ")", "\n", "block", ".", "add", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "blocks", ".", "append", "(", "block", ")", "\n", "deblock", "=", "Sequential", "(", "\n", "ConvTranspose2d", "(", "\n", "num_filters", "[", "i", "]", ",", "\n", "num_upsample_filters", "[", "i", "]", ",", "\n", "upsample_strides", "[", "i", "]", ",", "\n", "stride", "=", "upsample_strides", "[", "i", "]", ")", ",", "\n", "BatchNorm2d", "(", "num_upsample_filters", "[", "i", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "deblocks", ".", "append", "(", "deblock", ")", "\n", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "blocks", ")", "\n", "self", ".", "deblocks", "=", "nn", ".", "ModuleList", "(", "deblocks", ")", "\n", "if", "encode_background_as_zeros", ":", "\n", "            ", "num_cls", "=", "num_anchor_per_loc", "*", "num_class", "\n", "", "else", ":", "\n", "            ", "num_cls", "=", "num_anchor_per_loc", "*", "(", "num_class", "+", "1", ")", "\n", "", "print", "(", "\"num_class is :\"", ",", "num_class", ")", "\n", "self", ".", "conv_cls", "=", "nn", ".", "Conv2d", "(", "sum", "(", "num_upsample_filters", ")", ",", "num_cls", ",", "1", ")", "\n", "self", ".", "conv_box", "=", "nn", ".", "Conv2d", "(", "\n", "sum", "(", "num_upsample_filters", ")", ",", "num_anchor_per_loc", "*", "box_code_size", ",", "1", ")", "\n", "if", "use_direction_classifier", ":", "\n", "            ", "self", ".", "conv_dir_cls", "=", "nn", ".", "Conv2d", "(", "\n", "sum", "(", "num_upsample_filters", ")", ",", "num_anchor_per_loc", "*", "2", ",", "1", ")", "\n", "\n", "", "if", "self", ".", "_use_rc_net", ":", "\n", "            ", "self", ".", "conv_rc", "=", "nn", ".", "Conv2d", "(", "\n", "sum", "(", "num_upsample_filters", ")", ",", "num_anchor_per_loc", "*", "box_code_size", ",", "\n", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.rpn.RPNV2.forward": [[303, 348], ["range", "rpn.RPNV2.conv_box", "rpn.RPNV2.conv_cls", "box_preds.permute().contiguous.permute().contiguous.permute().contiguous", "cls_preds.permute().contiguous.permute().contiguous.permute().contiguous", "len", "ups.append", "len", "torch.cat", "rpn.RPNV2.conv_dir_cls", "dir_cls_preds.permute().contiguous.permute().contiguous.permute().contiguous", "rpn.RPNV2.conv_rc", "rc_preds.permute().contiguous.permute().contiguous.permute().contiguous", "box_preds.permute().contiguous.permute().contiguous.permute", "cls_preds.permute().contiguous.permute().contiguous.permute", "dir_cls_preds.permute().contiguous.permute().contiguous.permute", "rc_preds.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "bev", "=", "None", ")", ":", "\n", "# t = time.time()", "\n", "# torch.cuda.synchronize()", "\n", "        ", "ups", "=", "[", "]", "\n", "#print(\"$$$$$ len(self.blocks) is: \",len(self.blocks))", "\n", "#print(\"%%%%% The content of self.blocks is \",self.blocks)", "\n", "#print(\"$$$$$ len(self.deblocks) is: \",len(self.deblocks))", "\n", "#print(\"%%%%% The content of self.deblocks is \",self.deblocks)", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "blocks", "[", "i", "]", "(", "x", ")", "\n", "#print(\"^^^^^^ the shape of x before cat is :\",x.shape,\"i is:\",i)", "\n", "ups", ".", "append", "(", "self", ".", "deblocks", "[", "i", "]", "(", "x", ")", ")", "\n", "#print(\"^^^^^^ the shape of ups before cat is :\",ups[i].shape,\"i is:\",i)", "\n", "#print(\"@@@@@@ len ups is:\",len(ups))", "\n", "#print(\"^^^^^^ the shape of x before cat is :\",x.shape)", "\n", "", "if", "len", "(", "ups", ")", ">", "1", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "ups", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "ups", "[", "0", "]", "\n", "#print(\"$$$$$$ the shape of x after cat is :\",x.shape)", "\n", "", "box_preds", "=", "self", ".", "conv_box", "(", "x", ")", "\n", "#print(\"%%%% box_preds is: \",box_preds.shape)", "\n", "cls_preds", "=", "self", ".", "conv_cls", "(", "x", ")", "\n", "#print(\"&&&& cls_preds is: \",cls_preds.shape)", "\n", "# [N, C, y(H), x(W)]", "\n", "box_preds", "=", "box_preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "cls_preds", "=", "cls_preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "#print(\"%%%% box_preds is: \",box_preds.shape)", "\n", "#print(\"&&&& cls_preds is: \",cls_preds.shape)", "\n", "ret_dict", "=", "{", "\n", "\"box_preds\"", ":", "box_preds", ",", "\n", "\"cls_preds\"", ":", "cls_preds", ",", "\n", "}", "\n", "if", "self", ".", "_use_direction_classifier", ":", "\n", "            ", "dir_cls_preds", "=", "self", ".", "conv_dir_cls", "(", "x", ")", "\n", "dir_cls_preds", "=", "dir_cls_preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "ret_dict", "[", "\"dir_cls_preds\"", "]", "=", "dir_cls_preds", "\n", "#print(\"shape of dir_cls_preds:\",dir_cls_preds.shape)", "\n", "", "if", "self", ".", "_use_rc_net", ":", "\n", "            ", "rc_preds", "=", "self", ".", "conv_rc", "(", "x", ")", "\n", "rc_preds", "=", "rc_preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "ret_dict", "[", "\"rc_preds\"", "]", "=", "rc_preds", "\n", "# torch.cuda.synchronize()", "\n", "# print(\"rpn forward time\", time.time() - t)", "\n", "", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.rpn.Squeeze.forward": [[351, 353], ["x.squeeze"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "squeeze", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.rpn.SparseRPN.__init__": [[357, 518], ["torch.nn.Module.__init__", "print", "spconv.SparseSequential", "range", "spconv.SparseSequential", "spconv.SparseSequential", "range", "spconv.SparseSequential", "spconv.SparseSequential", "range", "torchplus.nn.Sequential", "torchplus.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "numpy.array", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "rpn.SparseRPN.block1.add", "rpn.SparseRPN.block1.add", "rpn.SparseRPN.block1.add", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "spconv.ToDense", "rpn.Squeeze", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "rpn.SparseRPN.block2.add", "rpn.SparseRPN.block2.add", "rpn.SparseRPN.block2.add", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "spconv.ToDense", "rpn.Squeeze", "ConvTranspose2d", "BatchNorm2d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "rpn.SparseRPN.block3.add", "rpn.SparseRPN.block3.add", "rpn.SparseRPN.block3.add", "spconv.ToDense", "rpn.Squeeze", "ConvTranspose2d", "BatchNorm2d", "torch.nn.ReLU", "Conv2d", "BatchNorm2d", "torch.nn.ReLU", "Conv2d", "BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "sum"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.modules.common.Sequential.add", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args"], ["def", "__init__", "(", "self", ",", "\n", "output_shape", ",", "\n", "num_input_features", "=", "128", ",", "\n", "num_filters_down1", "=", "[", "64", "]", ",", "\n", "num_filters_down2", "=", "[", "64", ",", "64", "]", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_class", "=", "2", ",", "\n", "layer_nums", "=", "[", "3", ",", "5", ",", "5", "]", ",", "\n", "layer_strides", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "num_filters", "=", "[", "128", ",", "128", ",", "256", "]", ",", "\n", "upsample_strides", "=", "[", "1", ",", "2", ",", "4", "]", ",", "\n", "num_upsample_filters", "=", "[", "256", ",", "256", ",", "256", "]", ",", "\n", "num_anchor_per_loc", "=", "2", ",", "\n", "encode_background_as_zeros", "=", "True", ",", "\n", "use_direction_classifier", "=", "True", ",", "\n", "use_groupnorm", "=", "False", ",", "\n", "num_groups", "=", "32", ",", "\n", "use_bev", "=", "False", ",", "\n", "box_code_size", "=", "7", ",", "\n", "use_rc_net", "=", "False", ",", "\n", "name", "=", "'sparse_rpn'", ")", ":", "\n", "        ", "super", "(", "SparseRPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_num_anchor_per_loc", "=", "num_anchor_per_loc", "\n", "self", ".", "_use_direction_classifier", "=", "use_direction_classifier", "\n", "self", ".", "name", "=", "name", "\n", "if", "use_norm", ":", "\n", "            ", "BatchNorm2d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm2d", ")", "\n", "BatchNorm1d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm1d", ")", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm2d", "=", "Empty", "\n", "BatchNorm1d", "=", "Empty", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "sparse_shape", "=", "np", ".", "array", "(", "output_shape", "[", "1", ":", "4", "]", ")", "+", "[", "1", ",", "0", ",", "0", "]", "\n", "# sparse_shape[0] = 11", "\n", "print", "(", "sparse_shape", ")", "\n", "self", ".", "sparse_shape", "=", "sparse_shape", "\n", "self", ".", "voxel_output_shape", "=", "output_shape", "\n", "# [11, 400, 352]", "\n", "self", ".", "block1", "=", "spconv", ".", "SparseSequential", "(", "\n", "SpConv3d", "(", "\n", "num_input_features", ",", "num_filters", "[", "0", "]", ",", "3", ",", "stride", "=", "[", "2", ",", "layer_strides", "[", "0", "]", ",", "layer_strides", "[", "0", "]", "]", ",", "padding", "=", "[", "0", ",", "1", ",", "1", "]", ")", ",", "\n", "BatchNorm1d", "(", "num_filters", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "# [5, 200, 176]", "\n", "for", "i", "in", "range", "(", "layer_nums", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "block1", ".", "add", "(", "SubMConv3d", "(", "\n", "num_filters", "[", "0", "]", ",", "num_filters", "[", "0", "]", ",", "3", ",", "padding", "=", "1", ",", "indice_key", "=", "\"subm0\"", ")", ")", "\n", "self", ".", "block1", ".", "add", "(", "BatchNorm1d", "(", "num_filters", "[", "0", "]", ")", ")", "\n", "self", ".", "block1", ".", "add", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "self", ".", "deconv1", "=", "spconv", ".", "SparseSequential", "(", "\n", "SpConv3d", "(", "\n", "num_filters", "[", "0", "]", ",", "num_filters", "[", "0", "]", ",", "(", "3", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ")", ",", "\n", "BatchNorm1d", "(", "num_filters", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "\n", "num_filters", "[", "0", "]", ",", "num_upsample_filters", "[", "0", "]", ",", "(", "2", ",", "1", ",", "1", ")", ",", "stride", "=", "1", ")", ",", "\n", "BatchNorm1d", "(", "num_upsample_filters", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "spconv", ".", "ToDense", "(", ")", ",", "\n", "Squeeze", "(", ")", "\n", ")", "# [1, 200, 176]", "\n", "\n", "# [5, 200, 176]", "\n", "self", ".", "block2", "=", "spconv", ".", "SparseSequential", "(", "\n", "SpConv3d", "(", "\n", "num_filters", "[", "0", "]", ",", "num_filters", "[", "1", "]", ",", "3", ",", "stride", "=", "[", "2", ",", "layer_strides", "[", "1", "]", ",", "layer_strides", "[", "1", "]", "]", ",", "padding", "=", "[", "0", ",", "1", ",", "1", "]", ")", ",", "\n", "BatchNorm1d", "(", "num_filters", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "layer_nums", "[", "1", "]", ")", ":", "\n", "            ", "self", ".", "block2", ".", "add", "(", "SubMConv3d", "(", "\n", "num_filters", "[", "1", "]", ",", "num_filters", "[", "1", "]", ",", "3", ",", "padding", "=", "1", ",", "indice_key", "=", "\"subm1\"", ")", ")", "\n", "self", ".", "block2", ".", "add", "(", "BatchNorm1d", "(", "num_filters", "[", "1", "]", ")", ")", "\n", "self", ".", "block2", ".", "add", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "# [2, 100, 88]", "\n", "", "self", ".", "deconv2", "=", "spconv", ".", "SparseSequential", "(", "\n", "SpConv3d", "(", "\n", "num_filters", "[", "1", "]", ",", "num_filters", "[", "1", "]", ",", "(", "2", ",", "1", ",", "1", ")", ",", "stride", "=", "1", ")", ",", "\n", "BatchNorm1d", "(", "num_filters", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "spconv", ".", "ToDense", "(", ")", ",", "\n", "Squeeze", "(", ")", ",", "\n", "ConvTranspose2d", "(", "\n", "num_filters", "[", "1", "]", ",", "\n", "num_upsample_filters", "[", "1", "]", ",", "\n", "upsample_strides", "[", "1", "]", ",", "\n", "stride", "=", "upsample_strides", "[", "1", "]", ")", ",", "\n", "BatchNorm2d", "(", "num_upsample_filters", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "# [1, 200, 176]", "\n", "\n", "self", ".", "block3", "=", "spconv", ".", "SparseSequential", "(", "\n", "SpConv3d", "(", "\n", "num_filters", "[", "1", "]", ",", "num_filters", "[", "2", "]", ",", "[", "2", ",", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "layer_strides", "[", "2", "]", ",", "layer_strides", "[", "2", "]", "]", ",", "padding", "=", "[", "0", ",", "1", ",", "1", "]", ")", ",", "\n", "BatchNorm1d", "(", "num_filters", "[", "2", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "layer_nums", "[", "2", "]", ")", ":", "\n", "            ", "self", ".", "block3", ".", "add", "(", "SubMConv3d", "(", "\n", "num_filters", "[", "2", "]", ",", "num_filters", "[", "2", "]", ",", "3", ",", "padding", "=", "1", ",", "indice_key", "=", "\"subm2\"", ")", ")", "\n", "self", ".", "block3", ".", "add", "(", "BatchNorm1d", "(", "num_filters", "[", "2", "]", ")", ")", "\n", "self", ".", "block3", ".", "add", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "\n", "", "self", ".", "deconv3", "=", "Sequential", "(", "\n", "spconv", ".", "ToDense", "(", ")", ",", "\n", "Squeeze", "(", ")", ",", "\n", "ConvTranspose2d", "(", "\n", "num_filters", "[", "2", "]", ",", "\n", "num_upsample_filters", "[", "2", "]", ",", "\n", "upsample_strides", "[", "2", "]", ",", "\n", "stride", "=", "upsample_strides", "[", "2", "]", ")", ",", "\n", "BatchNorm2d", "(", "num_upsample_filters", "[", "2", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "# [1, 200, 176]", "\n", "self", ".", "post", "=", "Sequential", "(", "\n", "Conv2d", "(", "\n", "sum", "(", "num_upsample_filters", ")", ",", "\n", "128", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "Conv2d", "(", "\n", "128", ",", "\n", "64", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", ")", "# [1, 200, 176]", "\n", "if", "encode_background_as_zeros", ":", "\n", "            ", "num_cls", "=", "num_anchor_per_loc", "*", "num_class", "\n", "", "else", ":", "\n", "            ", "num_cls", "=", "num_anchor_per_loc", "*", "(", "num_class", "+", "1", ")", "\n", "", "'''self.conv_cls = nn.Conv2d(sum(num_upsample_filters), num_cls, 1)\n        self.conv_box = nn.Conv2d(\n            sum(num_upsample_filters), num_anchor_per_loc * box_code_size, 1)\n        if use_direction_classifier:\n            self.conv_dir_cls = nn.Conv2d(\n                sum(num_upsample_filters), num_anchor_per_loc * 2, 1)\n        '''", "\n", "self", ".", "conv_cls", "=", "nn", ".", "Conv2d", "(", "64", ",", "num_cls", ",", "1", ")", "\n", "self", ".", "conv_box", "=", "nn", ".", "Conv2d", "(", "\n", "64", ",", "num_anchor_per_loc", "*", "box_code_size", ",", "1", ")", "\n", "if", "use_direction_classifier", ":", "\n", "            ", "self", ".", "conv_dir_cls", "=", "nn", ".", "Conv2d", "(", "\n", "64", ",", "num_anchor_per_loc", "*", "2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.rpn.SparseRPN.forward": [[520, 548], ["coors.int.int.int", "spconv.SparseConvTensor", "rpn.SparseRPN.block1", "rpn.SparseRPN.block2", "rpn.SparseRPN.block3", "rpn.SparseRPN.deconv1", "rpn.SparseRPN.deconv2", "rpn.SparseRPN.deconv3", "torch.cat", "rpn.SparseRPN.post", "rpn.SparseRPN.conv_box", "rpn.SparseRPN.conv_cls", "box_preds.permute().contiguous.permute().contiguous.permute().contiguous", "cls_preds.permute().contiguous.permute().contiguous.permute().contiguous", "rpn.SparseRPN.conv_dir_cls", "dir_cls_preds.permute().contiguous.permute().contiguous.permute().contiguous", "box_preds.permute().contiguous.permute().contiguous.permute", "cls_preds.permute().contiguous.permute().contiguous.permute", "dir_cls_preds.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "voxel_features", ",", "coors", ",", "batch_size", ")", ":", "\n", "        ", "coors", "=", "coors", ".", "int", "(", ")", "\n", "sx", "=", "spconv", ".", "SparseConvTensor", "(", "voxel_features", ",", "coors", ",", "self", ".", "sparse_shape", ",", "batch_size", ")", "\n", "b1", "=", "self", ".", "block1", "(", "sx", ")", "\n", "b2", "=", "self", ".", "block2", "(", "b1", ")", "\n", "b3", "=", "self", ".", "block3", "(", "b2", ")", "\n", "# print(b1.sparity, b2.sparity, b3.sparity)", "\n", "up1", "=", "self", ".", "deconv1", "(", "b1", ")", "\n", "up2", "=", "self", ".", "deconv2", "(", "b2", ")", "\n", "up3", "=", "self", ".", "deconv3", "(", "b3", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "up1", ",", "up2", ",", "up3", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "post", "(", "x", ")", "\n", "# out = self.to_dense(out).squeeze(2)", "\n", "# print(\"debug1\")", "\n", "box_preds", "=", "self", ".", "conv_box", "(", "x", ")", "\n", "cls_preds", "=", "self", ".", "conv_cls", "(", "x", ")", "\n", "box_preds", "=", "box_preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "cls_preds", "=", "cls_preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "ret_dict", "=", "{", "\n", "\"box_preds\"", ":", "box_preds", ",", "\n", "\"cls_preds\"", ":", "cls_preds", ",", "\n", "}", "\n", "if", "self", ".", "_use_direction_classifier", ":", "\n", "            ", "dir_cls_preds", "=", "self", ".", "conv_dir_cls", "(", "x", ")", "\n", "dir_cls_preds", "=", "dir_cls_preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "ret_dict", "[", "\"dir_cls_preds\"", "]", "=", "dir_cls_preds", "\n", "\n", "", "return", "ret_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.fusion.fusion.__init__": [[14, 37], ["torch.nn.Module.__init__", "torchplus.nn.Sequential", "torchplus.nn.Sequential", "torchplus.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "fusion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "'fusion_layer'", "\n", "self", ".", "corner_points_feature", "=", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "24", ",", "48", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "48", ",", "96", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "96", ",", "96", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "96", ",", "4", ",", "1", ")", ",", "\n", ")", "\n", "self", ".", "fuse_2d_3d", "=", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "4", ",", "18", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "18", ",", "36", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "36", ",", "36", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "36", ",", "1", ",", "1", ")", ",", "\n", ")", "\n", "self", ".", "maxpool", "=", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "[", "200", ",", "1", "]", ",", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.fusion.fusion.forward": [[40, 56], ["fusion.fusion.maxpool", "fusion.fusion.squeeze().reshape", "torch.zeros", "fusion.fusion.fuse_2d_3d", "torch.zeros", "fusion.fusion.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_1", ",", "tensor_index", ")", ":", "\n", "        ", "flag", "=", "-", "1", "\n", "if", "tensor_index", "[", "0", ",", "0", "]", "==", "-", "1", ":", "\n", "            ", "out_1", "=", "torch", ".", "zeros", "(", "1", ",", "200", ",", "70400", ",", "dtype", "=", "input_1", ".", "dtype", ",", "device", "=", "input_1", ".", "device", ")", "\n", "out_1", "[", ":", ",", ":", ",", ":", "]", "=", "-", "9999999", "\n", "flag", "=", "0", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "fuse_2d_3d", "(", "input_1", ")", "\n", "out_1", "=", "torch", ".", "zeros", "(", "1", ",", "200", ",", "70400", ",", "dtype", "=", "input_1", ".", "dtype", ",", "device", "=", "input_1", ".", "device", ")", "\n", "out_1", "[", ":", ",", ":", ",", ":", "]", "=", "-", "9999999", "\n", "out_1", "[", ":", ",", "tensor_index", "[", ":", ",", "0", "]", ",", "tensor_index", "[", ":", ",", "1", "]", "]", "=", "x", "[", "0", ",", ":", ",", "0", ",", ":", "]", "\n", "flag", "=", "1", "\n", "", "x", "=", "self", ".", "maxpool", "(", "out_1", ")", "\n", "#x, _ = torch.max(out_1,1)", "\n", "x", "=", "x", ".", "squeeze", "(", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "\n", "return", "x", ",", "flag", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxel_encoder.VFELayer.__init__": [[37, 50], ["torch.nn.Module.__init__", "int", "Linear", "BatchNorm1d", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "use_norm", "=", "True", ",", "name", "=", "'vfe'", ")", ":", "\n", "        ", "super", "(", "VFELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "units", "=", "int", "(", "out_channels", "/", "2", ")", "\n", "if", "use_norm", ":", "\n", "            ", "BatchNorm1d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm1d", ")", "\n", "Linear", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Linear", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm1d", "=", "Empty", "\n", "Linear", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Linear", ")", "\n", "", "self", ".", "linear", "=", "Linear", "(", "in_channels", ",", "self", ".", "units", ")", "\n", "self", ".", "norm", "=", "BatchNorm1d", "(", "self", ".", "units", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxel_encoder.VFELayer.forward": [[51, 67], ["voxel_encoder.VFELayer.linear", "voxel_encoder.VFELayer.norm().permute().contiguous", "torch.nn.functional.relu", "aggregated.repeat", "torch.cat", "torch.max", "voxel_encoder.VFELayer.norm().permute", "voxel_encoder.VFELayer.norm", "voxel_encoder.VFELayer.permute().contiguous", "voxel_encoder.VFELayer.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# [K, T, 7] tensordot [7, units] = [K, T, units]", "\n", "        ", "voxel_count", "=", "inputs", ".", "shape", "[", "1", "]", "\n", "x", "=", "self", ".", "linear", "(", "inputs", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "\n", "1", ")", ".", "contiguous", "(", ")", "\n", "pointwise", "=", "F", ".", "relu", "(", "x", ")", "\n", "# [K, T, units]", "\n", "\n", "aggregated", "=", "torch", ".", "max", "(", "pointwise", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "# [K, 1, units]", "\n", "repeated", "=", "aggregated", ".", "repeat", "(", "1", ",", "voxel_count", ",", "1", ")", "\n", "\n", "concatenated", "=", "torch", ".", "cat", "(", "[", "pointwise", ",", "repeated", "]", ",", "dim", "=", "2", ")", "\n", "# [K, T, 2 * units]", "\n", "return", "concatenated", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxel_encoder.VoxelFeatureExtractor.__init__": [[69, 95], ["torch.nn.Module.__init__", "voxel_encoder.VFELayer", "voxel_encoder.VFELayer", "Linear", "BatchNorm1d", "len", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_input_features", "=", "4", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_filters", "=", "[", "32", ",", "128", "]", ",", "\n", "with_distance", "=", "False", ",", "\n", "name", "=", "'VoxelFeatureExtractor'", ")", ":", "\n", "        ", "super", "(", "VoxelFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "if", "use_norm", ":", "\n", "            ", "BatchNorm1d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm1d", ")", "\n", "Linear", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Linear", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm1d", "=", "Empty", "\n", "Linear", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Linear", ")", "\n", "", "assert", "len", "(", "num_filters", ")", "==", "2", "\n", "num_input_features", "+=", "3", "# add mean features", "\n", "if", "with_distance", ":", "\n", "            ", "num_input_features", "+=", "1", "\n", "", "self", ".", "_with_distance", "=", "with_distance", "\n", "self", ".", "vfe1", "=", "VFELayer", "(", "num_input_features", ",", "num_filters", "[", "0", "]", ",", "use_norm", ")", "\n", "self", ".", "vfe2", "=", "VFELayer", "(", "num_filters", "[", "0", "]", ",", "num_filters", "[", "1", "]", ",", "use_norm", ")", "\n", "self", ".", "linear", "=", "Linear", "(", "num_filters", "[", "1", "]", ",", "num_filters", "[", "1", "]", ")", "\n", "# var_torch_init(self.linear.weight)", "\n", "# var_torch_init(self.linear.bias)", "\n", "self", ".", "norm", "=", "BatchNorm1d", "(", "num_filters", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxel_encoder.VoxelFeatureExtractor.forward": [[96, 130], ["voxel_encoder.get_paddings_indicator", "torch.unsqueeze().type_as", "voxel_encoder.VoxelFeatureExtractor.vfe1", "voxel_encoder.VoxelFeatureExtractor.vfe2", "voxel_encoder.VoxelFeatureExtractor.linear", "voxel_encoder.VoxelFeatureExtractor.norm().permute().contiguous", "torch.nn.functional.relu", "features[].sum", "num_voxels.type_as().view", "torch.norm", "torch.cat", "torch.cat", "torch.max", "torch.unsqueeze", "voxel_encoder.VoxelFeatureExtractor.norm().permute", "num_voxels.type_as", "voxel_encoder.VoxelFeatureExtractor.norm", "torch.nn.functional.relu.permute().contiguous", "torch.nn.functional.relu.permute"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxel_encoder.get_paddings_indicator"], ["", "def", "forward", "(", "self", ",", "features", ",", "num_voxels", ")", ":", "\n", "# features: [concated_num_points, num_voxel_size, 3(4)]", "\n", "# num_voxels: [concated_num_points]", "\n", "# t = time.time()", "\n", "# torch.cuda.synchronize()", "\n", "\n", "        ", "points_mean", "=", "features", "[", ":", ",", ":", ",", ":", "3", "]", ".", "sum", "(", "\n", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "/", "num_voxels", ".", "type_as", "(", "features", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "features_relative", "=", "features", "[", ":", ",", ":", ",", ":", "3", "]", "-", "points_mean", "\n", "if", "self", ".", "_with_distance", ":", "\n", "            ", "points_dist", "=", "torch", ".", "norm", "(", "features", "[", ":", ",", ":", ",", ":", "3", "]", ",", "2", ",", "2", ",", "keepdim", "=", "True", ")", "\n", "features", "=", "torch", ".", "cat", "(", "\n", "[", "features", ",", "features_relative", ",", "points_dist", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "features", "=", "torch", ".", "cat", "(", "[", "features", ",", "features_relative", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "voxel_count", "=", "features", ".", "shape", "[", "1", "]", "\n", "mask", "=", "get_paddings_indicator", "(", "num_voxels", ",", "voxel_count", ",", "axis", "=", "0", ")", "\n", "mask", "=", "torch", ".", "unsqueeze", "(", "mask", ",", "-", "1", ")", ".", "type_as", "(", "features", ")", "\n", "# mask = features.max(dim=2, keepdim=True)[0] != 0", "\n", "\n", "# torch.cuda.synchronize()", "\n", "# print(\"vfe prep forward time\", time.time() - t)", "\n", "x", "=", "self", ".", "vfe1", "(", "features", ")", "\n", "x", "*=", "mask", "\n", "x", "=", "self", ".", "vfe2", "(", "x", ")", "\n", "x", "*=", "mask", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "\n", "1", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "*=", "mask", "\n", "# x: [concated_num_points, num_voxel_size, 128]", "\n", "voxelwise", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "return", "voxelwise", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxel_encoder.VoxelFeatureExtractorV2.__init__": [[133, 163], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "Linear", "BatchNorm1d", "len", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "range", "voxel_encoder.VFELayer", "len"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_input_features", "=", "4", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_filters", "=", "[", "32", ",", "128", "]", ",", "\n", "with_distance", "=", "False", ",", "\n", "name", "=", "'VoxelFeatureExtractor'", ")", ":", "\n", "        ", "super", "(", "VoxelFeatureExtractorV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "if", "use_norm", ":", "\n", "            ", "BatchNorm1d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm1d", ")", "\n", "Linear", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Linear", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm1d", "=", "Empty", "\n", "Linear", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Linear", ")", "\n", "", "assert", "len", "(", "num_filters", ")", ">", "0", "\n", "num_input_features", "+=", "3", "\n", "if", "with_distance", ":", "\n", "            ", "num_input_features", "+=", "1", "\n", "", "self", ".", "_with_distance", "=", "with_distance", "\n", "\n", "num_filters", "=", "[", "num_input_features", "]", "+", "num_filters", "\n", "filters_pairs", "=", "[", "[", "num_filters", "[", "i", "]", ",", "num_filters", "[", "i", "+", "1", "]", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "num_filters", ")", "-", "1", ")", "]", "\n", "self", ".", "vfe_layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "VFELayer", "(", "i", ",", "o", ",", "use_norm", ")", "for", "i", ",", "o", "in", "filters_pairs", "]", ")", "\n", "self", ".", "linear", "=", "Linear", "(", "num_filters", "[", "-", "1", "]", ",", "num_filters", "[", "-", "1", "]", ")", "\n", "# var_torch_init(self.linear.weight)", "\n", "# var_torch_init(self.linear.bias)", "\n", "self", ".", "norm", "=", "BatchNorm1d", "(", "num_filters", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxel_encoder.VoxelFeatureExtractorV2.forward": [[164, 190], ["voxel_encoder.get_paddings_indicator", "torch.unsqueeze().type_as", "voxel_encoder.VoxelFeatureExtractorV2.linear", "voxel_encoder.VoxelFeatureExtractorV2.norm().permute().contiguous", "torch.nn.functional.relu", "features[].sum", "num_voxels.type_as().view", "torch.norm", "torch.cat", "torch.cat", "vfe", "torch.max", "torch.unsqueeze", "voxel_encoder.VoxelFeatureExtractorV2.norm().permute", "num_voxels.type_as", "voxel_encoder.VoxelFeatureExtractorV2.norm", "vfe.permute().contiguous", "vfe.permute"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxel_encoder.get_paddings_indicator"], ["", "def", "forward", "(", "self", ",", "features", ",", "num_voxels", ")", ":", "\n", "# features: [concated_num_points, num_voxel_size, 3(4)]", "\n", "# num_voxels: [concated_num_points]", "\n", "        ", "points_mean", "=", "features", "[", ":", ",", ":", ",", ":", "3", "]", ".", "sum", "(", "\n", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "/", "num_voxels", ".", "type_as", "(", "features", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "features_relative", "=", "features", "[", ":", ",", ":", ",", ":", "3", "]", "-", "points_mean", "\n", "if", "self", ".", "_with_distance", ":", "\n", "            ", "points_dist", "=", "torch", ".", "norm", "(", "features", "[", ":", ",", ":", ",", ":", "3", "]", ",", "2", ",", "2", ",", "keepdim", "=", "True", ")", "\n", "features", "=", "torch", ".", "cat", "(", "\n", "[", "features", ",", "features_relative", ",", "points_dist", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "features", "=", "torch", ".", "cat", "(", "[", "features", ",", "features_relative", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "voxel_count", "=", "features", ".", "shape", "[", "1", "]", "\n", "mask", "=", "get_paddings_indicator", "(", "num_voxels", ",", "voxel_count", ",", "axis", "=", "0", ")", "\n", "mask", "=", "torch", ".", "unsqueeze", "(", "mask", ",", "-", "1", ")", ".", "type_as", "(", "features", ")", "\n", "for", "vfe", "in", "self", ".", "vfe_layers", ":", "\n", "            ", "features", "=", "vfe", "(", "features", ")", "\n", "features", "*=", "mask", "\n", "", "features", "=", "self", ".", "linear", "(", "features", ")", "\n", "features", "=", "self", ".", "norm", "(", "features", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", ".", "permute", "(", "\n", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "features", "=", "F", ".", "relu", "(", "features", ")", "\n", "features", "*=", "mask", "\n", "# x: [concated_num_points, num_voxel_size, 128]", "\n", "voxelwise", "=", "torch", ".", "max", "(", "features", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "return", "voxelwise", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxel_encoder.VoxelFeatureExtractorV3.__init__": [[192, 200], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_input_features", "=", "4", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_filters", "=", "[", "32", ",", "128", "]", ",", "\n", "with_distance", "=", "False", ",", "\n", "name", "=", "'VoxelFeatureExtractor'", ")", ":", "\n", "        ", "super", "(", "VoxelFeatureExtractorV3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxel_encoder.VoxelFeatureExtractorV3.forward": [[201, 207], ["points_mean.contiguous", "features[].sum", "num_voxels.type_as().view", "num_voxels.type_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "num_voxels", ")", ":", "\n", "# features: [concated_num_points, num_voxel_size, 3(4)]", "\n", "# num_voxels: [concated_num_points]", "\n", "        ", "points_mean", "=", "features", "[", ":", ",", ":", ",", ":", "4", "]", ".", "sum", "(", "\n", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "/", "num_voxels", ".", "type_as", "(", "features", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "return", "points_mean", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxel_encoder.SimpleVoxel.__init__": [[211, 220], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_input_features", "=", "4", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_filters", "=", "[", "32", ",", "128", "]", ",", "\n", "with_distance", "=", "False", ",", "\n", "name", "=", "'SimpleVoxel'", ")", ":", "\n", "\n", "        ", "super", "(", "SimpleVoxel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxel_encoder.SimpleVoxel.forward": [[221, 230], ["points_mean.contiguous", "features[].sum", "num_voxels.type_as().view", "num_voxels.type_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "num_voxels", ")", ":", "\n", "# features: [concated_num_points, num_voxel_size, 3(4)]", "\n", "# num_voxels: [concated_num_points]", "\n", "        ", "points_mean", "=", "features", "[", ":", ",", ":", ",", ":", "4", "]", ".", "sum", "(", "\n", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "/", "num_voxels", ".", "type_as", "(", "features", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "#feature = torch.norm(points_mean[:, :2], p=2, dim=1, keepdim=True)", "\n", "# z is important for z position regression, but x, y is not.", "\n", "#return torch.cat([feature, points_mean[:, 2:4]], dim=1)", "\n", "return", "points_mean", ".", "contiguous", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxel_encoder.get_paddings_indicator": [[12, 34], ["torch.unsqueeze", "torch.arange().view", "len", "torch.unsqueeze.int", "torch.arange"], "function", ["None"], ["def", "get_paddings_indicator", "(", "actual_num", ",", "max_num", ",", "axis", "=", "0", ")", ":", "\n", "    ", "\"\"\"Create boolean mask by actually number of a padded tensor.\n\n    Args:\n        actual_num ([type]): [description]\n        max_num ([type]): [description]\n\n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "\n", "actual_num", "=", "torch", ".", "unsqueeze", "(", "actual_num", ",", "axis", "+", "1", ")", "\n", "# tiled_actual_num: [N, M, 1]", "\n", "max_num_shape", "=", "[", "1", "]", "*", "len", "(", "actual_num", ".", "shape", ")", "\n", "max_num_shape", "[", "axis", "+", "1", "]", "=", "-", "1", "\n", "max_num", "=", "torch", ".", "arange", "(", "\n", "max_num", ",", "dtype", "=", "torch", ".", "int", ",", "device", "=", "actual_num", ".", "device", ")", ".", "view", "(", "max_num_shape", ")", "\n", "# tiled_actual_num: [[3,3,3,3,3], [4,4,4,4,4], [2,2,2,2,2]]", "\n", "# tiled_max_num: [[0,1,2,3,4], [0,1,2,3,4], [0,1,2,3,4]]", "\n", "paddings_indicator", "=", "actual_num", ".", "int", "(", ")", ">", "max_num", "\n", "# paddings_indicator shape: [batch_size, max_num]", "\n", "return", "paddings_indicator", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SparseMiddleExtractor.__init__": [[17, 76], ["torch.nn.Module.__init__", "print", "middle_layers.append", "middle_layers.append", "middle_layers.append", "middle_layers.append", "middle_layers.append", "middle_layers.append", "spconv.SparseSequential", "numpy.array", "middle_layers.append", "middle_layers.append", "middle_layers.append", "spconv.SparseConv3d", "BatchNorm1d", "torch.nn.ReLU", "len", "middle_layers.append", "middle_layers.append", "middle_layers.append", "spconv.SparseConv3d", "BatchNorm1d", "torch.nn.ReLU", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "range", "spconv.SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "range", "spconv.SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "len", "len"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args"], ["    ", "def", "__init__", "(", "self", ",", "\n", "output_shape", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_input_features", "=", "128", ",", "\n", "num_filters_down1", "=", "[", "64", "]", ",", "\n", "num_filters_down2", "=", "[", "64", ",", "64", "]", ",", "\n", "name", "=", "'SparseMiddleExtractor'", ")", ":", "\n", "        ", "super", "(", "SparseMiddleExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "if", "use_norm", ":", "\n", "            ", "BatchNorm1d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm1d", ")", "\n", "Linear", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Linear", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm1d", "=", "Empty", "\n", "Linear", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Linear", ")", "\n", "", "sparse_shape", "=", "np", ".", "array", "(", "output_shape", "[", "1", ":", "4", "]", ")", "+", "[", "1", ",", "0", ",", "0", "]", "\n", "# sparse_shape[0] = 11", "\n", "print", "(", "sparse_shape", ")", "\n", "self", ".", "sparse_shape", "=", "sparse_shape", "\n", "#self.scn_input = scn.InputLayer(3, sparse_shape.tolist())", "\n", "self", ".", "voxel_output_shape", "=", "output_shape", "\n", "middle_layers", "=", "[", "]", "\n", "\n", "num_filters", "=", "[", "num_input_features", "]", "+", "num_filters_down1", "\n", "# num_filters = [64] + num_filters_down1", "\n", "filters_pairs_d1", "=", "[", "[", "num_filters", "[", "i", "]", ",", "num_filters", "[", "i", "+", "1", "]", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "num_filters", ")", "-", "1", ")", "]", "\n", "\n", "for", "i", ",", "o", "in", "filters_pairs_d1", ":", "\n", "            ", "middle_layers", ".", "append", "(", "spconv", ".", "SubMConv3d", "(", "i", ",", "o", ",", "3", ",", "bias", "=", "False", ",", "indice_key", "=", "\"subm0\"", ")", ")", "\n", "middle_layers", ".", "append", "(", "BatchNorm1d", "(", "o", ")", ")", "\n", "middle_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "middle_layers", ".", "append", "(", "\n", "spconv", ".", "SparseConv3d", "(", "\n", "num_filters", "[", "-", "1", "]", ",", "\n", "num_filters", "[", "-", "1", "]", ",", "(", "3", ",", "1", ",", "1", ")", ",", "(", "2", ",", "1", ",", "1", ")", ",", "\n", "bias", "=", "False", ")", ")", "\n", "middle_layers", ".", "append", "(", "BatchNorm1d", "(", "num_filters", "[", "-", "1", "]", ")", ")", "\n", "middle_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "# assert len(num_filters_down2) > 0", "\n", "if", "len", "(", "num_filters_down1", ")", "==", "0", ":", "\n", "            ", "num_filters", "=", "[", "num_filters", "[", "-", "1", "]", "]", "+", "num_filters_down2", "\n", "", "else", ":", "\n", "            ", "num_filters", "=", "[", "num_filters_down1", "[", "-", "1", "]", "]", "+", "num_filters_down2", "\n", "", "filters_pairs_d2", "=", "[", "[", "num_filters", "[", "i", "]", ",", "num_filters", "[", "i", "+", "1", "]", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "num_filters", ")", "-", "1", ")", "]", "\n", "for", "i", ",", "o", "in", "filters_pairs_d2", ":", "\n", "            ", "middle_layers", ".", "append", "(", "spconv", ".", "SubMConv3d", "(", "i", ",", "o", ",", "3", ",", "bias", "=", "False", ",", "indice_key", "=", "\"subm1\"", ")", ")", "\n", "middle_layers", ".", "append", "(", "BatchNorm1d", "(", "o", ")", ")", "\n", "middle_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "middle_layers", ".", "append", "(", "\n", "spconv", ".", "SparseConv3d", "(", "\n", "num_filters", "[", "-", "1", "]", ",", "\n", "num_filters", "[", "-", "1", "]", ",", "(", "3", ",", "1", ",", "1", ")", ",", "(", "2", ",", "1", ",", "1", ")", ",", "\n", "bias", "=", "False", ")", ")", "\n", "middle_layers", ".", "append", "(", "BatchNorm1d", "(", "num_filters", "[", "-", "1", "]", ")", ")", "\n", "middle_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "middle_conv", "=", "spconv", ".", "SparseSequential", "(", "*", "middle_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SparseMiddleExtractor.forward": [[77, 90], ["coors.int.int.int", "spconv.SparseConvTensor", "middle.SparseMiddleExtractor.middle_conv", "ret.view.view.dense", "ret.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "voxel_features", ",", "coors", ",", "batch_size", ")", ":", "\n", "# coors[:, 1] += 1", "\n", "        ", "coors", "=", "coors", ".", "int", "(", ")", "\n", "ret", "=", "spconv", ".", "SparseConvTensor", "(", "voxel_features", ",", "coors", ",", "self", ".", "sparse_shape", ",", "batch_size", ")", "\n", "# t = time.time()", "\n", "# torch.cuda.synchronize()", "\n", "ret", "=", "self", ".", "middle_conv", "(", "ret", ")", "\n", "# torch.cuda.synchronize()", "\n", "# print(\"spconv forward time\", time.time() - t)", "\n", "ret", "=", "ret", ".", "dense", "(", ")", "\n", "N", ",", "C", ",", "D", ",", "H", ",", "W", "=", "ret", ".", "shape", "\n", "ret", "=", "ret", ".", "view", "(", "N", ",", "C", "*", "D", ",", "H", ",", "W", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SpMiddleD4HD.__init__": [[92, 159], ["torch.nn.Module.__init__", "print", "spconv.SparseSequential", "numpy.array", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args"], ["    ", "def", "__init__", "(", "self", ",", "\n", "output_shape", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_input_features", "=", "128", ",", "\n", "num_filters_down1", "=", "[", "64", "]", ",", "\n", "num_filters_down2", "=", "[", "64", ",", "64", "]", ",", "\n", "name", "=", "'SpMiddleD4HD'", ")", ":", "\n", "        ", "super", "(", "SpMiddleD4HD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "if", "use_norm", ":", "\n", "            ", "BatchNorm2d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm2d", ")", "\n", "BatchNorm1d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm1d", ")", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm2d", "=", "Empty", "\n", "BatchNorm1d", "=", "Empty", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "sparse_shape", "=", "np", ".", "array", "(", "output_shape", "[", "1", ":", "4", "]", ")", "+", "[", "1", ",", "0", ",", "0", "]", "\n", "# sparse_shape[0] = 11", "\n", "print", "(", "sparse_shape", ")", "\n", "self", ".", "sparse_shape", "=", "sparse_shape", "\n", "self", ".", "voxel_output_shape", "=", "output_shape", "\n", "# num_input_features = 4", "\n", "self", ".", "middle_conv", "=", "spconv", ".", "SparseSequential", "(", "\n", "SubMConv3d", "(", "num_input_features", ",", "32", ",", "3", ",", "indice_key", "=", "\"subm0\"", ")", ",", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "32", ",", "32", ",", "3", ",", "indice_key", "=", "\"subm0\"", ")", ",", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "32", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "# [800, 600, 21] -> [400, 300, 11]", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm1\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm1\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm1\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "64", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "[", "0", ",", "1", ",", "1", "]", ")", ",", "# [400, 300, 11] -> [200, 150, 5]", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm2\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm2\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm2\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "64", ",", "64", ",", "(", "3", ",", "1", ",", "1", ")", ",", "(", "2", ",", "1", ",", "1", ")", ")", ",", "# [200, 150, 5] -> [200, 150, 2]", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SpMiddleD4HD.forward": [[161, 174], ["coors.int.int.int", "spconv.SparseConvTensor", "middle.SpMiddleD4HD.middle_conv", "ret.view.view.dense", "ret.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "voxel_features", ",", "coors", ",", "batch_size", ")", ":", "\n", "# coors[:, 1] += 1", "\n", "        ", "coors", "=", "coors", ".", "int", "(", ")", "\n", "ret", "=", "spconv", ".", "SparseConvTensor", "(", "voxel_features", ",", "coors", ",", "self", ".", "sparse_shape", ",", "batch_size", ")", "\n", "# t = time.time()", "\n", "# torch.cuda.synchronize()", "\n", "ret", "=", "self", ".", "middle_conv", "(", "ret", ")", "\n", "# torch.cuda.synchronize()", "\n", "# print(\"spconv forward time\", time.time() - t)", "\n", "ret", "=", "ret", ".", "dense", "(", ")", "\n", "N", ",", "C", ",", "D", ",", "H", ",", "W", "=", "ret", ".", "shape", "\n", "ret", "=", "ret", ".", "view", "(", "N", ",", "C", "*", "D", ",", "H", ",", "W", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SpResNetD4HD.__init__": [[176, 228], ["torch.nn.Module.__init__", "print", "spconv.SparseSequential", "numpy.array", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "second.pytorch.models.resnet.SparseBasicBlock", "second.pytorch.models.resnet.SparseBasicBlock", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "second.pytorch.models.resnet.SparseBasicBlock", "second.pytorch.models.resnet.SparseBasicBlock", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "second.pytorch.models.resnet.SparseBasicBlock", "second.pytorch.models.resnet.SparseBasicBlock", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args"], ["    ", "def", "__init__", "(", "self", ",", "\n", "output_shape", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_input_features", "=", "128", ",", "\n", "num_filters_down1", "=", "[", "64", "]", ",", "\n", "num_filters_down2", "=", "[", "64", ",", "64", "]", ",", "\n", "name", "=", "'SpResNetD4HD'", ")", ":", "\n", "        ", "super", "(", "SpResNetD4HD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "if", "use_norm", ":", "\n", "            ", "BatchNorm2d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm2d", ")", "\n", "BatchNorm1d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm1d", ")", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm2d", "=", "Empty", "\n", "BatchNorm1d", "=", "Empty", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "sparse_shape", "=", "np", ".", "array", "(", "output_shape", "[", "1", ":", "4", "]", ")", "+", "[", "1", ",", "0", ",", "0", "]", "\n", "# sparse_shape[0] = 11", "\n", "print", "(", "sparse_shape", ")", "\n", "self", ".", "sparse_shape", "=", "sparse_shape", "\n", "self", ".", "voxel_output_shape", "=", "output_shape", "\n", "# num_input_features = 4", "\n", "self", ".", "middle_conv", "=", "spconv", ".", "SparseSequential", "(", "\n", "SubMConv3d", "(", "num_input_features", ",", "32", ",", "3", ",", "indice_key", "=", "\"res0\"", ")", ",", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SparseBasicBlock", "(", "32", ",", "32", ",", "indice_key", "=", "\"res0\"", ")", ",", "\n", "SparseBasicBlock", "(", "32", ",", "32", ",", "indice_key", "=", "\"res0\"", ")", ",", "\n", "SpConv3d", "(", "32", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "# [800, 600, 21] -> [400, 300, 11]", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SparseBasicBlock", "(", "64", ",", "64", ",", "indice_key", "=", "\"res1\"", ")", ",", "\n", "SparseBasicBlock", "(", "64", ",", "64", ",", "indice_key", "=", "\"res1\"", ")", ",", "\n", "SpConv3d", "(", "64", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "[", "0", ",", "1", ",", "1", "]", ")", ",", "# [400, 300, 11] -> [200, 150, 5]", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SparseBasicBlock", "(", "64", ",", "64", ",", "indice_key", "=", "\"res2\"", ")", ",", "\n", "SparseBasicBlock", "(", "64", ",", "64", ",", "indice_key", "=", "\"res2\"", ")", ",", "\n", "SpConv3d", "(", "64", ",", "64", ",", "(", "3", ",", "1", ",", "1", ")", ",", "(", "2", ",", "1", ",", "1", ")", ")", ",", "# [200, 150, 5] -> [200, 150, 2]", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SpResNetD4HD.forward": [[230, 244], ["coors.int.int.int", "spconv.SparseConvTensor", "middle.SpResNetD4HD.middle_conv", "ret.view.view.dense", "ret.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "voxel_features", ",", "coors", ",", "batch_size", ")", ":", "\n", "# coors[:, 1] += 1", "\n", "        ", "coors", "=", "coors", ".", "int", "(", ")", "\n", "ret", "=", "spconv", ".", "SparseConvTensor", "(", "voxel_features", ",", "coors", ",", "self", ".", "sparse_shape", ",", "batch_size", ")", "\n", "# t = time.time()", "\n", "# torch.cuda.synchronize()", "\n", "ret", "=", "self", ".", "middle_conv", "(", "ret", ")", "\n", "# torch.cuda.synchronize()", "\n", "# print(\"spconv forward time\", time.time() - t)", "\n", "ret", "=", "ret", ".", "dense", "(", ")", "\n", "\n", "N", ",", "C", ",", "D", ",", "H", ",", "W", "=", "ret", ".", "shape", "\n", "ret", "=", "ret", ".", "view", "(", "N", ",", "C", "*", "D", ",", "H", ",", "W", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SpMiddleD4HDLite.__init__": [[247, 314], ["torch.nn.Module.__init__", "print", "spconv.SparseSequential", "numpy.array", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args"], ["    ", "def", "__init__", "(", "self", ",", "\n", "output_shape", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_input_features", "=", "128", ",", "\n", "num_filters_down1", "=", "[", "64", "]", ",", "\n", "num_filters_down2", "=", "[", "64", ",", "64", "]", ",", "\n", "name", "=", "'SpMiddleD4HDLite'", ")", ":", "\n", "        ", "super", "(", "SpMiddleD4HDLite", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "if", "use_norm", ":", "\n", "            ", "BatchNorm2d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm2d", ")", "\n", "BatchNorm1d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm1d", ")", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm2d", "=", "Empty", "\n", "BatchNorm1d", "=", "Empty", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "sparse_shape", "=", "np", ".", "array", "(", "output_shape", "[", "1", ":", "4", "]", ")", "+", "[", "1", ",", "0", ",", "0", "]", "\n", "# sparse_shape[0] = 11", "\n", "print", "(", "sparse_shape", ")", "\n", "self", ".", "sparse_shape", "=", "sparse_shape", "\n", "self", ".", "voxel_output_shape", "=", "output_shape", "\n", "# num_input_features = 4", "\n", "self", ".", "middle_conv", "=", "spconv", ".", "SparseSequential", "(", "\n", "SubMConv3d", "(", "num_input_features", ",", "16", ",", "3", ",", "indice_key", "=", "\"subm0\"", ")", ",", "\n", "BatchNorm1d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "16", ",", "16", ",", "3", ",", "indice_key", "=", "\"subm0\"", ")", ",", "\n", "BatchNorm1d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "16", ",", "32", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "# [800, 600, 21] -> [400, 300, 11]", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "32", ",", "32", ",", "3", ",", "indice_key", "=", "\"subm1\"", ")", ",", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "32", ",", "32", ",", "3", ",", "indice_key", "=", "\"subm1\"", ")", ",", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "32", ",", "32", ",", "3", ",", "indice_key", "=", "\"subm1\"", ")", ",", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "32", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "[", "0", ",", "1", ",", "1", "]", ")", ",", "# [400, 300, 11] -> [200, 150, 5]", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm2\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm2\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm2\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "64", ",", "64", ",", "(", "3", ",", "1", ",", "1", ")", ",", "(", "2", ",", "1", ",", "1", ")", ")", ",", "# [200, 150, 5] -> [200, 150, 2]", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SpMiddleD4HDLite.forward": [[316, 330], ["coors.int.int.int", "spconv.SparseConvTensor", "middle.SpMiddleD4HDLite.middle_conv", "ret.view.view.dense", "ret.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "voxel_features", ",", "coors", ",", "batch_size", ")", ":", "\n", "# coors[:, 1] += 1", "\n", "        ", "coors", "=", "coors", ".", "int", "(", ")", "\n", "ret", "=", "spconv", ".", "SparseConvTensor", "(", "voxel_features", ",", "coors", ",", "self", ".", "sparse_shape", ",", "batch_size", ")", "\n", "# t = time.time()", "\n", "# torch.cuda.synchronize()", "\n", "ret", "=", "self", ".", "middle_conv", "(", "ret", ")", "\n", "# torch.cuda.synchronize()", "\n", "# print(\"spconv forward time\", time.time() - t)", "\n", "ret", "=", "ret", ".", "dense", "(", ")", "\n", "\n", "N", ",", "C", ",", "D", ",", "H", ",", "W", "=", "ret", ".", "shape", "\n", "ret", "=", "ret", ".", "view", "(", "N", ",", "C", "*", "D", ",", "H", ",", "W", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SpMiddleD8HD.__init__": [[333, 411], ["torch.nn.Module.__init__", "print", "spconv.SparseSequential", "numpy.array", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args"], ["    ", "def", "__init__", "(", "self", ",", "\n", "output_shape", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_input_features", "=", "128", ",", "\n", "num_filters_down1", "=", "[", "64", "]", ",", "\n", "num_filters_down2", "=", "[", "64", ",", "64", "]", ",", "\n", "name", "=", "'SpMiddleD8HD'", ")", ":", "\n", "        ", "super", "(", "SpMiddleD8HD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "if", "use_norm", ":", "\n", "            ", "BatchNorm2d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm2d", ")", "\n", "BatchNorm1d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm1d", ")", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm2d", "=", "Empty", "\n", "BatchNorm1d", "=", "Empty", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "sparse_shape", "=", "np", ".", "array", "(", "output_shape", "[", "1", ":", "4", "]", ")", "+", "[", "1", ",", "0", ",", "0", "]", "\n", "# sparse_shape[0] = 11", "\n", "print", "(", "sparse_shape", ")", "\n", "self", ".", "sparse_shape", "=", "sparse_shape", "\n", "self", ".", "voxel_output_shape", "=", "output_shape", "\n", "self", ".", "middle_conv", "=", "spconv", ".", "SparseSequential", "(", "\n", "SubMConv3d", "(", "num_input_features", ",", "16", ",", "3", ",", "indice_key", "=", "\"subm0\"", ")", ",", "\n", "BatchNorm1d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "16", ",", "16", ",", "3", ",", "indice_key", "=", "\"subm0\"", ")", ",", "\n", "BatchNorm1d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "16", ",", "32", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "# [800, 600, 41] -> [400, 300, 21], original stride is 2", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "32", ",", "32", ",", "3", ",", "indice_key", "=", "\"subm1\"", ")", ",", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "32", ",", "32", ",", "3", ",", "indice_key", "=", "\"subm1\"", ")", ",", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "32", ",", "32", ",", "3", ",", "indice_key", "=", "\"subm1\"", ")", ",", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "32", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "# [400, 300, 21] -> [200, 150, 11], original stride is 2", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm2\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm2\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm2\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "64", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "[", "0", ",", "1", ",", "1", "]", ")", ",", "# [200, 150, 11] -> [100, 75, 5]", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm3\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm3\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm3\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "64", ",", "64", ",", "(", "3", ",", "1", ",", "1", ")", ",", "(", "2", ",", "1", ",", "1", ")", ")", ",", "# [100, 75, 5] -> [100, 75, 2]", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SpMiddleD8HD.forward": [[413, 427], ["coors.int.int.int", "spconv.SparseConvTensor", "middle.SpMiddleD8HD.middle_conv", "ret.view.view.dense", "ret.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "voxel_features", ",", "coors", ",", "batch_size", ")", ":", "\n", "# coors[:, 1] += 1", "\n", "        ", "coors", "=", "coors", ".", "int", "(", ")", "\n", "ret", "=", "spconv", ".", "SparseConvTensor", "(", "voxel_features", ",", "coors", ",", "self", ".", "sparse_shape", ",", "batch_size", ")", "\n", "# t = time.time()", "\n", "# torch.cuda.synchronize()", "\n", "ret", "=", "self", ".", "middle_conv", "(", "ret", ")", "\n", "# torch.cuda.synchronize()", "\n", "# print(\"spconv forward time\", time.time() - t)", "\n", "ret", "=", "ret", ".", "dense", "(", ")", "\n", "\n", "N", ",", "C", ",", "D", ",", "H", ",", "W", "=", "ret", ".", "shape", "\n", "ret", "=", "ret", ".", "view", "(", "N", ",", "C", "*", "D", ",", "H", ",", "W", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SpMiddleFHD.__init__": [[430, 536], ["torch.nn.Module.__init__", "print", "spconv.SparseSequential", "numpy.array", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args"], ["    ", "def", "__init__", "(", "self", ",", "\n", "output_shape", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_input_features", "=", "128", ",", "\n", "num_filters_down1", "=", "[", "64", "]", ",", "\n", "num_filters_down2", "=", "[", "64", ",", "64", "]", ",", "\n", "name", "=", "'SpMiddleFHD'", ")", ":", "\n", "        ", "super", "(", "SpMiddleFHD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "if", "use_norm", ":", "\n", "            ", "BatchNorm2d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm2d", ")", "\n", "BatchNorm1d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm1d", ")", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm2d", "=", "Empty", "\n", "BatchNorm1d", "=", "Empty", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "sparse_shape", "=", "np", ".", "array", "(", "output_shape", "[", "1", ":", "4", "]", ")", "+", "[", "1", ",", "0", ",", "0", "]", "\n", "# sparse_shape[0] = 11", "\n", "print", "(", "\"sparse_shape:\"", ",", "sparse_shape", ")", "\n", "self", ".", "sparse_shape", "=", "sparse_shape", "\n", "self", ".", "voxel_output_shape", "=", "output_shape", "\n", "# input: # [1600, 1200, 41]", "\n", "self", ".", "middle_conv", "=", "spconv", ".", "SparseSequential", "(", "\n", "# num_input_features, 16, 3 \"subm0\"", "\n", "SubMConv3d", "(", "num_input_features", ",", "16", ",", "3", ",", "indice_key", "=", "\"subm0\"", ")", ",", "\n", "# 16", "\n", "BatchNorm1d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#16, 16, 3  \"subm0\"", "\n", "SubMConv3d", "(", "16", ",", "16", ",", "3", ",", "indice_key", "=", "\"subm0\"", ")", ",", "\n", "#16", "\n", "BatchNorm1d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#16, 32, 3, 2, padding = 1", "\n", "SpConv3d", "(", "16", ",", "32", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "# [1600, 1200, 41] -> [800, 600, 21], original stride is 2, large_voxel 1", "\n", "#32", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#32, 32, 3   \"subm1\"", "\n", "SubMConv3d", "(", "32", ",", "32", ",", "3", ",", "indice_key", "=", "\"subm1\"", ")", ",", "\n", "#32", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#32, 32, 3   \"subm1\"", "\n", "SubMConv3d", "(", "32", ",", "32", ",", "3", ",", "indice_key", "=", "\"subm1\"", ")", ",", "\n", "#32", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#32, 64, 3, 2", "\n", "SpConv3d", "(", "32", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "# [800, 600, 21] -> [400, 300, 11], original stride is 2, large_voxel 1", "\n", "#64", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#64, 64, 3   subm2", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm2\"", ")", ",", "\n", "#64", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#64, 64, 3   subm2", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm2\"", ")", ",", "\n", "#64", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#64, 64, 3   subm2", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm2\"", ")", ",", "\n", "#64", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#64, 64, 3, 2", "\n", "SpConv3d", "(", "64", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "[", "0", ",", "1", ",", "1", "]", ")", ",", "# [400, 300, 11] -> [200, 150, 5]", "\n", "#64", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#64, 64, 3   subm3", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm3\"", ")", ",", "\n", "#64", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#64, 64, 3   subm3", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm3\"", ")", ",", "\n", "#64", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#64, 64, 3   subm3", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm3\"", ")", ",", "\n", "#64", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#64, 64, (3,1,1), (2,1,1)", "\n", "SpConv3d", "(", "64", ",", "64", ",", "(", "3", ",", "1", ",", "1", ")", ",", "(", "2", ",", "1", ",", "1", ")", ")", ",", "# [200, 150, 5] -> [200, 150, 2]", "\n", "#64", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "max_batch_size", "=", "6", "\n", "# self.grid = torch.full([self.max_batch_size, *sparse_shape], -1, dtype=torch.int32).cuda()", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SpMiddleFHD.forward": [[538, 553], ["coors.int.int.int", "spconv.SparseConvTensor", "middle.SpMiddleFHD.middle_conv", "ret.view.view.dense", "ret.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "voxel_features", ",", "coors", ",", "batch_size", ")", ":", "\n", "# coors[:, 1] += 1", "\n", "        ", "coors", "=", "coors", ".", "int", "(", ")", "\n", "ret", "=", "spconv", ".", "SparseConvTensor", "(", "voxel_features", ",", "coors", ",", "self", ".", "sparse_shape", ",", "batch_size", ")", "\n", "\n", "# t = time.time()", "\n", "# torch.cuda.synchronize()", "\n", "ret", "=", "self", ".", "middle_conv", "(", "ret", ")", "\n", "# torch.cuda.synchronize()", "\n", "# print(\"spconv forward time\", time.time() - t)", "\n", "ret", "=", "ret", ".", "dense", "(", ")", "\n", "\n", "N", ",", "C", ",", "D", ",", "H", ",", "W", "=", "ret", ".", "shape", "\n", "ret", "=", "ret", ".", "view", "(", "N", ",", "C", "*", "D", ",", "H", ",", "W", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SpMiddleVision.__init__": [[555, 603], ["torch.nn.Module.__init__", "print", "spconv.SparseSequential", "numpy.array", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args"], ["    ", "def", "__init__", "(", "self", ",", "\n", "output_shape", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_input_features", "=", "256", ",", "\n", "num_filters_down1", "=", "[", "64", "]", ",", "\n", "num_filters_down2", "=", "[", "64", ",", "64", "]", ",", "\n", "name", "=", "'SpMiddleVision'", ")", ":", "\n", "        ", "super", "(", "SpMiddleVision", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "if", "use_norm", ":", "\n", "            ", "BatchNorm2d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm2d", ")", "\n", "BatchNorm1d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm1d", ")", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm2d", "=", "Empty", "\n", "BatchNorm1d", "=", "Empty", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "sparse_shape", "=", "np", ".", "array", "(", "output_shape", "[", "1", ":", "4", "]", ")", "+", "[", "1", ",", "0", ",", "0", "]", "\n", "# sparse_shape[0] = 11", "\n", "print", "(", "\"sparse_shape:\"", ",", "sparse_shape", ")", "\n", "self", ".", "sparse_shape", "=", "sparse_shape", "\n", "self", ".", "voxel_output_shape", "=", "output_shape", "\n", "# input: # [1600, 1200, 41]", "\n", "self", ".", "middle_conv", "=", "spconv", ".", "SparseSequential", "(", "\n", "SpConv3d", "(", "num_input_features", ",", "256", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "# [1600, 1200, 41] -> [800, 600, 21], original stride is 2, large_voxel 1", "\n", "#32", "\n", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "256", ",", "256", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "# [800, 600, 21] -> [400, 300, 11], original stride is 2, large_voxel 1", "\n", "#64", "\n", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "256", ",", "256", ",", "3", ",", "2", ",", "padding", "=", "[", "0", ",", "1", ",", "1", "]", ")", ",", "# [400, 300, 11] -> [200, 150, 5]", "\n", "#64", "\n", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "max_batch_size", "=", "6", "\n", "# self.grid = torch.full([self.max_batch_size, *sparse_shape], -1, dtype=torch.int32).cuda()", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SpMiddleVision.forward": [[605, 618], ["coors.int.int.int", "spconv.SparseConvTensor", "middle.SpMiddleVision.middle_conv", "ret.dense.dense.dense"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "voxel_features", ",", "coors", ",", "batch_size", ")", ":", "\n", "# coors[:, 1] += 1", "\n", "        ", "coors", "=", "coors", ".", "int", "(", ")", "\n", "ret", "=", "spconv", ".", "SparseConvTensor", "(", "voxel_features", ",", "coors", ",", "self", ".", "sparse_shape", ",", "batch_size", ")", "\n", "\n", "# t = time.time()", "\n", "# torch.cuda.synchronize()", "\n", "ret", "=", "self", ".", "middle_conv", "(", "ret", ")", "\n", "# torch.cuda.synchronize()", "\n", "# print(\"spconv forward time\", time.time() - t)", "\n", "ret", "=", "ret", ".", "dense", "(", ")", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SpMiddleFHDV2.__init__": [[624, 704], ["torch.nn.Module.__init__", "print", "spconv.SparseSequential", "torch.full().cuda", "numpy.array", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "spconv.SparseMaxPool3d", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torch.full"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args"], ["    ", "def", "__init__", "(", "self", ",", "\n", "output_shape", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_input_features", "=", "128", ",", "\n", "num_filters_down1", "=", "[", "64", "]", ",", "\n", "num_filters_down2", "=", "[", "64", ",", "64", "]", ",", "\n", "name", "=", "'SpMiddleFHDV2'", ")", ":", "\n", "        ", "super", "(", "SpMiddleFHDV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "if", "use_norm", ":", "\n", "            ", "BatchNorm2d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm2d", ")", "\n", "BatchNorm1d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm1d", ")", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm2d", "=", "Empty", "\n", "BatchNorm1d", "=", "Empty", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "sparse_shape", "=", "np", ".", "array", "(", "output_shape", "[", "1", ":", "4", "]", ")", "+", "[", "1", ",", "0", ",", "0", "]", "\n", "# sparse_shape[0] = 11", "\n", "print", "(", "sparse_shape", ")", "\n", "self", ".", "sparse_shape", "=", "sparse_shape", "\n", "self", ".", "voxel_output_shape", "=", "output_shape", "\n", "# input: # [1600, 1200, 41]", "\n", "self", ".", "middle_conv", "=", "spconv", ".", "SparseSequential", "(", "\n", "SubMConv3d", "(", "num_input_features", ",", "16", ",", "3", ",", "indice_key", "=", "\"subm0\"", ")", ",", "\n", "BatchNorm1d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "16", ",", "16", ",", "3", ",", "indice_key", "=", "\"subm0\"", ")", ",", "\n", "BatchNorm1d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "16", ",", "32", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "# [1600, 1200, 41] -> [800, 600, 21]", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "32", ",", "32", ",", "3", ",", "indice_key", "=", "\"subm1\"", ")", ",", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "32", ",", "32", ",", "3", ",", "indice_key", "=", "\"subm1\"", ")", ",", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "32", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "# [800, 600, 21] -> [400, 300, 11]", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm2\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm2\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm2\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "64", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "[", "0", ",", "1", ",", "1", "]", ")", ",", "# [400, 300, 11] -> [200, 150, 5]", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm3\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm3\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm3\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "64", ",", "64", ",", "(", "3", ",", "1", ",", "1", ")", ",", "(", "2", ",", "1", ",", "1", ")", ")", ",", "# [200, 150, 5] -> [200, 150, 2]", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "spconv", ".", "SparseMaxPool3d", "(", "[", "2", ",", "1", ",", "1", "]", ")", ",", "\n", ")", "\n", "self", ".", "max_batch_size", "=", "6", "\n", "self", ".", "grid", "=", "torch", ".", "full", "(", "[", "self", ".", "max_batch_size", ",", "*", "sparse_shape", "]", ",", "-", "1", ",", "dtype", "=", "torch", ".", "int32", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SpMiddleFHDV2.forward": [[705, 719], ["coors.int.int.int", "spconv.SparseConvTensor", "middle.SpMiddleFHDV2.middle_conv", "ret.view.view.dense", "ret.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "voxel_features", ",", "coors", ",", "batch_size", ")", ":", "\n", "# coors[:, 1] += 1", "\n", "        ", "coors", "=", "coors", ".", "int", "(", ")", "\n", "ret", "=", "spconv", ".", "SparseConvTensor", "(", "voxel_features", ",", "coors", ",", "self", ".", "sparse_shape", ",", "batch_size", ",", "self", ".", "grid", ")", "\n", "# t = time.time()", "\n", "# torch.cuda.synchronize()", "\n", "ret", "=", "self", ".", "middle_conv", "(", "ret", ")", "\n", "# torch.cuda.synchronize()", "\n", "# print(\"spconv forward time\", time.time() - t)", "\n", "ret", "=", "ret", ".", "dense", "(", ")", "\n", "\n", "N", ",", "C", ",", "D", ",", "H", ",", "W", "=", "ret", ".", "shape", "\n", "ret", "=", "ret", ".", "view", "(", "N", ",", "C", "*", "D", ",", "H", ",", "W", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SpMiddle2K.__init__": [[721, 809], ["torch.nn.Module.__init__", "print", "spconv.SparseSequential", "torch.full().cuda", "numpy.array", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torch.full"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args"], ["    ", "def", "__init__", "(", "self", ",", "\n", "output_shape", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_input_features", "=", "128", ",", "\n", "num_filters_down1", "=", "[", "64", "]", ",", "\n", "num_filters_down2", "=", "[", "64", ",", "64", "]", ",", "\n", "name", "=", "'SpMiddle2K'", ")", ":", "\n", "        ", "super", "(", "SpMiddle2K", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "if", "use_norm", ":", "\n", "            ", "BatchNorm2d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm2d", ")", "\n", "BatchNorm1d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm1d", ")", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm2d", "=", "Empty", "\n", "BatchNorm1d", "=", "Empty", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "sparse_shape", "=", "np", ".", "array", "(", "output_shape", "[", "1", ":", "4", "]", ")", "+", "[", "1", ",", "0", ",", "0", "]", "\n", "# sparse_shape[0] = 11", "\n", "print", "(", "sparse_shape", ")", "\n", "self", ".", "sparse_shape", "=", "sparse_shape", "\n", "self", ".", "voxel_output_shape", "=", "output_shape", "\n", "# input: # [1600, 1200, 41]", "\n", "self", ".", "middle_conv", "=", "spconv", ".", "SparseSequential", "(", "\n", "SubMConv3d", "(", "num_input_features", ",", "8", ",", "3", ",", "indice_key", "=", "\"subm0\"", ")", ",", "# [3200, 2400, 81] -> [1600, 1200, 41]", "\n", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "8", ",", "8", ",", "3", ",", "indice_key", "=", "\"subm0\"", ")", ",", "\n", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "8", ",", "16", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "# [1600, 1200, 41] -> [800, 600, 21]", "\n", "BatchNorm1d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "16", ",", "16", ",", "3", ",", "indice_key", "=", "\"subm1\"", ")", ",", "\n", "BatchNorm1d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "16", ",", "16", ",", "3", ",", "indice_key", "=", "\"subm1\"", ")", ",", "\n", "BatchNorm1d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "16", ",", "32", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "# [1600, 1200, 41] -> [800, 600, 21]", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "32", ",", "32", ",", "3", ",", "indice_key", "=", "\"subm2\"", ")", ",", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "32", ",", "32", ",", "3", ",", "indice_key", "=", "\"subm2\"", ")", ",", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "32", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "# [800, 600, 21] -> [400, 300, 11]", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm3\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm3\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm3\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "64", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "[", "0", ",", "1", ",", "1", "]", ")", ",", "# [400, 300, 11] -> [200, 150, 5]", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm4\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm4\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm4\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "64", ",", "64", ",", "(", "3", ",", "1", ",", "1", ")", ",", "(", "2", ",", "1", ",", "1", ")", ")", ",", "# [200, 150, 5] -> [200, 150, 2]", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "max_batch_size", "=", "3", "\n", "self", ".", "grid", "=", "torch", ".", "full", "(", "[", "self", ".", "max_batch_size", ",", "*", "sparse_shape", "]", ",", "-", "1", ",", "dtype", "=", "torch", ".", "int32", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SpMiddle2K.forward": [[810, 824], ["coors.int.int.int", "spconv.SparseConvTensor", "middle.SpMiddle2K.middle_conv", "ret.view.view.dense", "ret.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "voxel_features", ",", "coors", ",", "batch_size", ")", ":", "\n", "# coors[:, 1] += 1", "\n", "        ", "coors", "=", "coors", ".", "int", "(", ")", "\n", "ret", "=", "spconv", ".", "SparseConvTensor", "(", "voxel_features", ",", "coors", ",", "self", ".", "sparse_shape", ",", "batch_size", ",", "self", ".", "grid", ")", "\n", "# t = time.time()", "\n", "# torch.cuda.synchronize()", "\n", "ret", "=", "self", ".", "middle_conv", "(", "ret", ")", "\n", "# torch.cuda.synchronize()", "\n", "# print(\"spconv forward time\", time.time() - t)", "\n", "ret", "=", "ret", ".", "dense", "(", ")", "\n", "\n", "N", ",", "C", ",", "D", ",", "H", ",", "W", "=", "ret", ".", "shape", "\n", "ret", "=", "ret", ".", "view", "(", "N", ",", "C", "*", "D", ",", "H", ",", "W", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SpMiddleFHDLite.__init__": [[826, 872], ["torch.nn.Module.__init__", "print", "spconv.SparseSequential", "numpy.array", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args"], ["    ", "def", "__init__", "(", "self", ",", "\n", "output_shape", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_input_features", "=", "128", ",", "\n", "num_filters_down1", "=", "[", "64", "]", ",", "\n", "num_filters_down2", "=", "[", "64", ",", "64", "]", ",", "\n", "name", "=", "'SpMiddleFHDLite'", ")", ":", "\n", "        ", "super", "(", "SpMiddleFHDLite", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "if", "use_norm", ":", "\n", "            ", "BatchNorm2d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm2d", ")", "\n", "BatchNorm1d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm1d", ")", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm2d", "=", "Empty", "\n", "BatchNorm1d", "=", "Empty", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "sparse_shape", "=", "np", ".", "array", "(", "output_shape", "[", "1", ":", "4", "]", ")", "+", "[", "1", ",", "0", ",", "0", "]", "\n", "# sparse_shape[0] = 11", "\n", "print", "(", "sparse_shape", ")", "\n", "self", ".", "sparse_shape", "=", "sparse_shape", "\n", "self", ".", "voxel_output_shape", "=", "output_shape", "\n", "# input: # [1600, 1200, 41]", "\n", "self", ".", "middle_conv", "=", "spconv", ".", "SparseSequential", "(", "\n", "SpConv3d", "(", "num_input_features", ",", "16", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "# [1600, 1200, 41] -> [800, 600, 21]", "\n", "BatchNorm1d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "16", ",", "32", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "# [800, 600, 21] -> [400, 300, 11]", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "32", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "[", "0", ",", "1", ",", "1", "]", ")", ",", "# [400, 300, 11] -> [200, 150, 5]", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "64", ",", "64", ",", "(", "3", ",", "1", ",", "1", ")", ",", "(", "2", ",", "1", ",", "1", ")", ")", ",", "# [200, 150, 5] -> [200, 150, 2]", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SpMiddleFHDLite.forward": [[874, 888], ["coors.int.int.int", "spconv.SparseConvTensor", "middle.SpMiddleFHDLite.middle_conv", "ret.view.view.dense", "ret.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "voxel_features", ",", "coors", ",", "batch_size", ")", ":", "\n", "# coors[:, 1] += 1", "\n", "        ", "coors", "=", "coors", ".", "int", "(", ")", "\n", "ret", "=", "spconv", ".", "SparseConvTensor", "(", "voxel_features", ",", "coors", ",", "self", ".", "sparse_shape", ",", "batch_size", ")", "\n", "# t = time.time()", "\n", "# torch.cuda.synchronize()", "\n", "ret", "=", "self", ".", "middle_conv", "(", "ret", ")", "\n", "# torch.cuda.synchronize()", "\n", "# print(\"spconv forward time\", time.time() - t)", "\n", "ret", "=", "ret", ".", "dense", "(", ")", "\n", "\n", "N", ",", "C", ",", "D", ",", "H", ",", "W", "=", "ret", ".", "shape", "\n", "ret", "=", "ret", ".", "view", "(", "N", ",", "C", "*", "D", ",", "H", ",", "W", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SpMiddleResNetFHD.__init__": [[891, 948], ["torch.nn.Module.__init__", "print", "spconv.SparseSequential", "numpy.array", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "second.pytorch.models.resnet.SparseBasicBlock", "second.pytorch.models.resnet.SparseBasicBlock", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "second.pytorch.models.resnet.SparseBasicBlock", "second.pytorch.models.resnet.SparseBasicBlock", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "second.pytorch.models.resnet.SparseBasicBlock", "second.pytorch.models.resnet.SparseBasicBlock", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "second.pytorch.models.resnet.SparseBasicBlock", "second.pytorch.models.resnet.SparseBasicBlock", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args"], ["    ", "def", "__init__", "(", "self", ",", "\n", "output_shape", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_input_features", "=", "128", ",", "\n", "num_filters_down1", "=", "[", "64", "]", ",", "\n", "num_filters_down2", "=", "[", "64", ",", "64", "]", ",", "\n", "name", "=", "'SpMiddleResNetFHD'", ")", ":", "\n", "        ", "super", "(", "SpMiddleResNetFHD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "if", "use_norm", ":", "\n", "            ", "BatchNorm2d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm2d", ")", "\n", "BatchNorm1d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm1d", ")", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm2d", "=", "Empty", "\n", "BatchNorm1d", "=", "Empty", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "sparse_shape", "=", "np", ".", "array", "(", "output_shape", "[", "1", ":", "4", "]", ")", "+", "[", "1", ",", "0", ",", "0", "]", "\n", "# sparse_shape[0] = 11", "\n", "print", "(", "sparse_shape", ")", "\n", "self", ".", "sparse_shape", "=", "sparse_shape", "\n", "self", ".", "voxel_output_shape", "=", "output_shape", "\n", "# input: # [1600, 1200, 41]", "\n", "self", ".", "middle_conv", "=", "spconv", ".", "SparseSequential", "(", "\n", "SubMConv3d", "(", "num_input_features", ",", "16", ",", "3", ",", "indice_key", "=", "\"res0\"", ")", ",", "\n", "BatchNorm1d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SparseBasicBlock", "(", "16", ",", "16", ",", "indice_key", "=", "\"res0\"", ")", ",", "\n", "SparseBasicBlock", "(", "16", ",", "16", ",", "indice_key", "=", "\"res0\"", ")", ",", "\n", "SpConv3d", "(", "16", ",", "32", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "# [1600, 1200, 41] -> [800, 600, 21]", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SparseBasicBlock", "(", "32", ",", "32", ",", "indice_key", "=", "\"res1\"", ")", ",", "\n", "SparseBasicBlock", "(", "32", ",", "32", ",", "indice_key", "=", "\"res1\"", ")", ",", "\n", "SpConv3d", "(", "32", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "# [800, 600, 21] -> [400, 300, 11]", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SparseBasicBlock", "(", "64", ",", "64", ",", "indice_key", "=", "\"res2\"", ")", ",", "\n", "SparseBasicBlock", "(", "64", ",", "64", ",", "indice_key", "=", "\"res2\"", ")", ",", "\n", "SpConv3d", "(", "64", ",", "128", ",", "3", ",", "2", ",", "padding", "=", "[", "0", ",", "1", ",", "1", "]", ")", ",", "# [400, 300, 11] -> [200, 150, 5]", "\n", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SparseBasicBlock", "(", "128", ",", "128", ",", "indice_key", "=", "\"res3\"", ")", ",", "\n", "SparseBasicBlock", "(", "128", ",", "128", ",", "indice_key", "=", "\"res3\"", ")", ",", "\n", "SpConv3d", "(", "128", ",", "128", ",", "(", "3", ",", "1", ",", "1", ")", ",", "(", "2", ",", "1", ",", "1", ")", ")", ",", "# [200, 150, 5] -> [200, 150, 2]", "\n", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SpMiddleResNetFHD.forward": [[950, 964], ["coors.int.int.int", "spconv.SparseConvTensor", "middle.SpMiddleResNetFHD.middle_conv", "ret.view.view.dense", "ret.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "voxel_features", ",", "coors", ",", "batch_size", ")", ":", "\n", "# coors[:, 1] += 1", "\n", "        ", "coors", "=", "coors", ".", "int", "(", ")", "\n", "ret", "=", "spconv", ".", "SparseConvTensor", "(", "voxel_features", ",", "coors", ",", "self", ".", "sparse_shape", ",", "batch_size", ")", "\n", "# t = time.time()", "\n", "# torch.cuda.synchronize()", "\n", "ret", "=", "self", ".", "middle_conv", "(", "ret", ")", "\n", "# torch.cuda.synchronize()", "\n", "# print(\"spconv forward time\", time.time() - t)", "\n", "ret", "=", "ret", ".", "dense", "(", ")", "\n", "\n", "N", ",", "C", ",", "D", ",", "H", ",", "W", "=", "ret", ".", "shape", "\n", "ret", "=", "ret", ".", "view", "(", "N", ",", "C", "*", "D", ",", "H", ",", "W", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SpMiddleFHDLarge.__init__": [[967, 1043], ["torch.nn.Module.__init__", "print", "spconv.SparseSequential", "numpy.array", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SubMConv3d", "BatchNorm1d", "torch.nn.ReLU", "SpConv3d", "BatchNorm1d", "torch.nn.ReLU", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args"], ["    ", "def", "__init__", "(", "self", ",", "\n", "output_shape", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_input_features", "=", "128", ",", "\n", "num_filters_down1", "=", "[", "64", "]", ",", "\n", "num_filters_down2", "=", "[", "64", ",", "64", "]", ",", "\n", "name", "=", "'SpMiddleFHDLarge'", ")", ":", "\n", "        ", "super", "(", "SpMiddleFHDLarge", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "if", "use_norm", ":", "\n", "            ", "BatchNorm2d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm2d", ")", "\n", "BatchNorm1d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm1d", ")", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm2d", "=", "Empty", "\n", "BatchNorm1d", "=", "Empty", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Conv2d", ")", "\n", "SpConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SparseConv3d", ")", "\n", "SubMConv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "spconv", ".", "SubMConv3d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "sparse_shape", "=", "np", ".", "array", "(", "output_shape", "[", "1", ":", "4", "]", ")", "+", "[", "1", ",", "0", ",", "0", "]", "\n", "# sparse_shape[0] = 11", "\n", "print", "(", "sparse_shape", ")", "\n", "self", ".", "sparse_shape", "=", "sparse_shape", "\n", "self", ".", "voxel_output_shape", "=", "output_shape", "\n", "# input: # [1600, 1200, 41]", "\n", "self", ".", "middle_conv", "=", "spconv", ".", "SparseSequential", "(", "\n", "SubMConv3d", "(", "num_input_features", ",", "16", ",", "3", ",", "indice_key", "=", "\"subm0\"", ")", ",", "\n", "BatchNorm1d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "16", ",", "16", ",", "3", ",", "indice_key", "=", "\"subm0\"", ")", ",", "\n", "BatchNorm1d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "16", ",", "32", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "# [1600, 1200, 41] -> [800, 600, 21]", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "32", ",", "32", ",", "3", ",", "indice_key", "=", "\"subm1\"", ")", ",", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "32", ",", "32", ",", "3", ",", "indice_key", "=", "\"subm1\"", ")", ",", "\n", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "32", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "# [800, 600, 21] -> [400, 300, 11]", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm2\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm2\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "64", ",", "64", ",", "3", ",", "indice_key", "=", "\"subm2\"", ")", ",", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "64", ",", "128", ",", "3", ",", "2", ",", "padding", "=", "[", "0", ",", "1", ",", "1", "]", ")", ",", "# [400, 300, 11] -> [200, 150, 5]", "\n", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "128", ",", "128", ",", "3", ",", "indice_key", "=", "\"subm3\"", ")", ",", "\n", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "128", ",", "128", ",", "3", ",", "indice_key", "=", "\"subm3\"", ")", ",", "\n", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SubMConv3d", "(", "128", ",", "128", ",", "3", ",", "indice_key", "=", "\"subm3\"", ")", ",", "\n", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SpConv3d", "(", "128", ",", "128", ",", "(", "3", ",", "1", ",", "1", ")", ",", "(", "2", ",", "1", ",", "1", ")", ")", ",", "# [200, 150, 5] -> [200, 150, 2]", "\n", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.SpMiddleFHDLarge.forward": [[1045, 1059], ["coors.int.int.int", "spconv.SparseConvTensor", "middle.SpMiddleFHDLarge.middle_conv", "ret.view.view.dense", "ret.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "voxel_features", ",", "coors", ",", "batch_size", ")", ":", "\n", "# coors[:, 1] += 1", "\n", "        ", "coors", "=", "coors", ".", "int", "(", ")", "\n", "ret", "=", "spconv", ".", "SparseConvTensor", "(", "voxel_features", ",", "coors", ",", "self", ".", "sparse_shape", ",", "batch_size", ")", "\n", "# t = time.time()", "\n", "# torch.cuda.synchronize()", "\n", "ret", "=", "self", ".", "middle_conv", "(", "ret", ")", "\n", "# torch.cuda.synchronize()", "\n", "# print(\"spconv forward time\", time.time() - t)", "\n", "ret", "=", "ret", ".", "dense", "(", ")", "\n", "\n", "N", ",", "C", ",", "D", ",", "H", ",", "W", "=", "ret", ".", "shape", "\n", "ret", "=", "ret", ".", "view", "(", "N", ",", "C", "*", "D", ",", "H", ",", "W", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.MiddleExtractor.__init__": [[1061, 1096], ["torch.nn.Module.__init__", "torchplus.nn.Sequential", "middle.ZeroPad3d", "Conv3d", "BatchNorm3d", "torch.nn.ReLU", "middle.ZeroPad3d", "Conv3d", "BatchNorm3d", "torch.nn.ReLU", "middle.ZeroPad3d", "Conv3d", "BatchNorm3d", "torch.nn.ReLU", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args", "torchplus.tools.change_default_args"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.change_default_args"], ["    ", "def", "__init__", "(", "self", ",", "\n", "output_shape", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_input_features", "=", "260", ",", "\n", "num_filters_down1", "=", "[", "64", "]", ",", "\n", "num_filters_down2", "=", "[", "64", ",", "64", "]", ",", "\n", "name", "=", "'MiddleExtractor'", ")", ":", "\n", "        ", "super", "(", "MiddleExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "if", "use_norm", ":", "\n", "            ", "BatchNorm3d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm3d", ")", "\n", "# BatchNorm3d = change_default_args(", "\n", "#     group=32, eps=1e-3, momentum=0.01)(GroupBatchNorm3d)", "\n", "Conv3d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Conv3d", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm3d", "=", "Empty", "\n", "Conv3d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Conv3d", ")", "\n", "", "self", ".", "voxel_output_shape", "=", "output_shape", "\n", "self", ".", "middle_conv", "=", "Sequential", "(", "\n", "ZeroPad3d", "(", "1", ")", ",", "\n", "#   num_input_features, 260, 3, stride=(2, 1, 1)", "\n", "Conv3d", "(", "num_input_features", ",", "64", ",", "3", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ")", ",", "\n", "BatchNorm3d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "ZeroPad3d", "(", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", ")", ",", "\n", "# 260, 128, 3, stride=1", "\n", "Conv3d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ")", ",", "\n", "BatchNorm3d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "ZeroPad3d", "(", "1", ")", ",", "\n", "# 128, 64, 3, stride=(2, 1, 1)", "\n", "Conv3d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "2", ")", ",", "\n", "BatchNorm3d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.MiddleExtractor.forward": [[1098, 1110], ["torchplus.ops.array_ops.scatter_nd", "ret.view.view.permute", "middle.MiddleExtractor.middle_conv", "ret.view.view.view", "coors.long"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.ops.array_ops.scatter_nd"], ["", "def", "forward", "(", "self", ",", "voxel_features", ",", "coors", ",", "batch_size", ")", ":", "\n", "        ", "output_shape", "=", "[", "batch_size", "]", "+", "self", ".", "voxel_output_shape", "[", "1", ":", "]", "\n", "output_shape", "[", "4", "]", "=", "320", "\n", "ret", "=", "scatter_nd", "(", "coors", ".", "long", "(", ")", ",", "voxel_features", ",", "output_shape", ")", "\n", "#ret = ret.dense()", "\n", "# print('scatter_nd fw:', time.time() - t)", "\n", "ret", "=", "ret", ".", "permute", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", "\n", "ret", "=", "self", ".", "middle_conv", "(", "ret", ")", "\n", "N", ",", "C", ",", "D", ",", "H", ",", "W", "=", "ret", ".", "shape", "\n", "ret", "=", "ret", ".", "view", "(", "N", ",", "C", "*", "D", ",", "H", ",", "W", ")", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.middle.ZeroPad3d.__init__": [[1112, 1114], ["torch.nn.ConstantPad3d.__init__"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "padding", ")", ":", "\n", "        ", "super", "(", "ZeroPad3d", ",", "self", ")", ".", "__init__", "(", "padding", ",", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.resnet.SparseBasicBlock.__init__": [[21, 30], ["spconv.SparseModule.__init__", "resnet.conv3x3", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "resnet.conv3x3", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.resnet.conv3x3", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "indice_key", "=", "None", ")", ":", "\n", "        ", "super", "(", "SparseBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ",", "indice_key", "=", "indice_key", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "indice_key", "=", "indice_key", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.resnet.SparseBasicBlock.forward": [[31, 48], ["resnet.SparseBasicBlock.conv1", "resnet.SparseBasicBlock.bn1", "resnet.SparseBasicBlock.relu", "resnet.SparseBasicBlock.conv2", "resnet.SparseBasicBlock.bn2", "resnet.SparseBasicBlock.relu", "resnet.SparseBasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", ".", "features", "=", "self", ".", "bn1", "(", "out", ".", "features", ")", "\n", "out", ".", "features", "=", "self", ".", "relu", "(", "out", ".", "features", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", ".", "features", "=", "self", ".", "bn2", "(", "out", ".", "features", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", ".", "features", "+=", "identity", ".", "features", "\n", "out", ".", "features", "=", "self", ".", "relu", "(", "out", ".", "features", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.resnet.SparseBottleneck.__init__": [[52, 63], ["spconv.SparseModule.__init__", "resnet.conv1x1", "torch.nn.BatchNorm1d", "resnet.conv3x3", "torch.nn.BatchNorm1d", "resnet.conv1x1", "torch.nn.BatchNorm1d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.resnet.conv1x1", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.resnet.conv3x3", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "indice_key", "=", "None", ")", ":", "\n", "        ", "super", "(", "SparseBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ",", "indice_key", "=", "indice_key", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ",", "indice_key", "=", "indice_key", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "indice_key", "=", "indice_key", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.resnet.SparseBottleneck.forward": [[64, 85], ["resnet.SparseBottleneck.conv1", "resnet.SparseBottleneck.bn1", "resnet.SparseBottleneck.relu", "resnet.SparseBottleneck.conv2", "resnet.SparseBottleneck.bn2", "resnet.SparseBottleneck.relu", "resnet.SparseBottleneck.conv3", "resnet.SparseBottleneck.bn3", "resnet.SparseBottleneck.relu", "resnet.SparseBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", ".", "features", "=", "self", ".", "bn1", "(", "out", ".", "features", ")", "\n", "out", ".", "features", "=", "self", ".", "relu", "(", "out", ".", "features", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", ".", "features", "=", "self", ".", "bn2", "(", "out", ".", "features", ")", "\n", "out", ".", "features", "=", "self", ".", "relu", "(", "out", ".", "features", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", ".", "features", "=", "self", ".", "bn3", "(", "out", ".", "features", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", ".", "features", "=", "self", ".", "relu", "(", "out", ".", "features", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.resnet.conv3x3": [[6, 10], ["spconv.SubMConv3d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "indice_key", "=", "None", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "spconv", ".", "SubMConv3d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ",", "indice_key", "=", "indice_key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.resnet.conv1x1": [[12, 16], ["spconv.SubMConv3d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "indice_key", "=", "None", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "spconv", ".", "SubMConv3d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ",", "indice_key", "=", "indice_key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.__init__": [[55, 236], ["torch.nn.Module.__init__", "second.pytorch.core.losses.WeightedSoftmaxClassificationLoss", "second.pytorch.core.losses.WeightedSoftmaxClassificationLoss", "vfe_class", "torchplus.metrics.Accuracy", "torchplus.metrics.Precision", "torchplus.metrics.Recall", "torchplus.metrics.PrecisionRecall", "torchplus.metrics.Scalar", "torchplus.metrics.Scalar", "torchplus.metrics.Scalar", "voxelnet.VoxelNet.register_buffer", "len", "second.pytorch.models.rpn.SparseRPN", "second.pytorch.models.rpn.SparseRPN", "mid_class", "rpn_class", "torch.LongTensor().zero_", "len", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "output_shape", ",", "\n", "num_class", "=", "2", ",", "\n", "num_input_features", "=", "4", ",", "\n", "vfe_class_name", "=", "\"VoxelFeatureExtractor\"", ",", "\n", "vfe_num_filters", "=", "[", "32", ",", "128", "]", ",", "\n", "with_distance", "=", "False", ",", "\n", "middle_class_name", "=", "\"SparseMiddleExtractor\"", ",", "\n", "middle_num_input_features", "=", "-", "1", ",", "\n", "middle_num_filters_d1", "=", "[", "64", "]", ",", "\n", "middle_num_filters_d2", "=", "[", "64", ",", "64", "]", ",", "\n", "rpn_class_name", "=", "\"RPN\"", ",", "\n", "rpn_num_input_features", "=", "-", "1", ",", "\n", "rpn_layer_nums", "=", "[", "3", ",", "5", ",", "5", "]", ",", "\n", "rpn_layer_strides", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "rpn_num_filters", "=", "[", "128", ",", "128", ",", "256", "]", ",", "\n", "rpn_upsample_strides", "=", "[", "1", ",", "2", ",", "4", "]", ",", "\n", "rpn_num_upsample_filters", "=", "[", "256", ",", "256", ",", "256", "]", ",", "\n", "use_norm", "=", "True", ",", "\n", "use_groupnorm", "=", "False", ",", "\n", "num_groups", "=", "32", ",", "\n", "use_sparse_rpn", "=", "False", ",", "\n", "use_voxel_classifier", "=", "False", ",", "\n", "use_direction_classifier", "=", "True", ",", "\n", "use_sigmoid_score", "=", "False", ",", "\n", "encode_background_as_zeros", "=", "True", ",", "\n", "use_rotate_nms", "=", "True", ",", "\n", "multiclass_nms", "=", "False", ",", "\n", "nms_score_threshold", "=", "0.5", ",", "\n", "nms_pre_max_size", "=", "1000", ",", "\n", "nms_post_max_size", "=", "20", ",", "\n", "nms_iou_threshold", "=", "0.1", ",", "\n", "target_assigner", "=", "None", ",", "\n", "use_bev", "=", "False", ",", "\n", "use_rc_net", "=", "False", ",", "\n", "lidar_only", "=", "False", ",", "\n", "cls_loss_weight", "=", "1.0", ",", "\n", "loc_loss_weight", "=", "1.0", ",", "\n", "pos_cls_weight", "=", "1.0", ",", "\n", "neg_cls_weight", "=", "1.0", ",", "\n", "direction_loss_weight", "=", "1.0", ",", "\n", "loss_norm_type", "=", "LossNormType", ".", "NormByNumPositives", ",", "\n", "encode_rad_error_by_sin", "=", "False", ",", "\n", "loc_loss_ftor", "=", "None", ",", "\n", "cls_loss_ftor", "=", "None", ",", "\n", "measure_time", "=", "False", ",", "\n", "name", "=", "'voxelnet'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "_num_class", "=", "num_class", "\n", "self", ".", "_use_rotate_nms", "=", "use_rotate_nms", "\n", "self", ".", "_multiclass_nms", "=", "multiclass_nms", "\n", "self", ".", "_nms_score_threshold", "=", "nms_score_threshold", "\n", "self", ".", "_nms_pre_max_size", "=", "nms_pre_max_size", "\n", "self", ".", "_nms_post_max_size", "=", "nms_post_max_size", "\n", "self", ".", "_nms_iou_threshold", "=", "nms_iou_threshold", "\n", "self", ".", "_use_sigmoid_score", "=", "use_sigmoid_score", "\n", "self", ".", "_encode_background_as_zeros", "=", "encode_background_as_zeros", "\n", "self", ".", "_use_sparse_rpn", "=", "use_sparse_rpn", "\n", "self", ".", "_use_direction_classifier", "=", "use_direction_classifier", "\n", "self", ".", "_use_bev", "=", "use_bev", "\n", "self", ".", "_num_input_features", "=", "num_input_features", "\n", "self", ".", "_box_coder", "=", "target_assigner", ".", "box_coder", "\n", "self", ".", "_lidar_only", "=", "lidar_only", "\n", "self", ".", "target_assigner", "=", "target_assigner", "\n", "self", ".", "_pos_cls_weight", "=", "pos_cls_weight", "\n", "self", ".", "_neg_cls_weight", "=", "neg_cls_weight", "\n", "self", ".", "_encode_rad_error_by_sin", "=", "encode_rad_error_by_sin", "\n", "self", ".", "_loss_norm_type", "=", "loss_norm_type", "\n", "self", ".", "_dir_loss_ftor", "=", "WeightedSoftmaxClassificationLoss", "(", ")", "\n", "\n", "self", ".", "_loc_loss_ftor", "=", "loc_loss_ftor", "\n", "self", ".", "_cls_loss_ftor", "=", "cls_loss_ftor", "\n", "self", ".", "_direction_loss_weight", "=", "direction_loss_weight", "\n", "self", ".", "_cls_loss_weight", "=", "cls_loss_weight", "\n", "self", ".", "_loc_loss_weight", "=", "loc_loss_weight", "\n", "self", ".", "measure_time", "=", "measure_time", "\n", "vfe_class_dict", "=", "{", "\n", "\"VoxelFeatureExtractor\"", ":", "voxel_encoder", ".", "VoxelFeatureExtractor", ",", "\n", "\"VoxelFeatureExtractorV2\"", ":", "voxel_encoder", ".", "VoxelFeatureExtractorV2", ",", "\n", "\"VoxelFeatureExtractorV3\"", ":", "voxel_encoder", ".", "VoxelFeatureExtractorV3", ",", "\n", "\"SimpleVoxel\"", ":", "voxel_encoder", ".", "SimpleVoxel", "\n", "}", "\n", "vfe_class", "=", "vfe_class_dict", "[", "vfe_class_name", "]", "\n", "self", ".", "voxel_feature_extractor", "=", "vfe_class", "(", "\n", "num_input_features", ",", "\n", "use_norm", ",", "\n", "num_filters", "=", "vfe_num_filters", ",", "\n", "with_distance", "=", "with_distance", ")", "\n", "if", "len", "(", "middle_num_filters_d2", ")", "==", "0", ":", "\n", "            ", "if", "len", "(", "middle_num_filters_d1", ")", "==", "0", ":", "\n", "                ", "num_rpn_input_filters", "=", "vfe_num_filters", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "num_rpn_input_filters", "=", "middle_num_filters_d1", "[", "-", "1", "]", "\n", "", "", "else", ":", "\n", "            ", "num_rpn_input_filters", "=", "middle_num_filters_d2", "[", "-", "1", "]", "\n", "\n", "", "if", "use_sparse_rpn", ":", "# don't use this. just for fun.", "\n", "            ", "self", ".", "sparse_rpn", "=", "rpn", ".", "SparseRPN", "(", "\n", "output_shape", ",", "\n", "# num_input_features=vfe_num_filters[-1],", "\n", "num_filters_down1", "=", "middle_num_filters_d1", ",", "\n", "num_filters_down2", "=", "middle_num_filters_d2", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_class", "=", "num_class", ",", "\n", "layer_nums", "=", "rpn_layer_nums", ",", "\n", "layer_strides", "=", "rpn_layer_strides", ",", "\n", "num_filters", "=", "rpn_num_filters", ",", "\n", "upsample_strides", "=", "rpn_upsample_strides", ",", "\n", "num_upsample_filters", "=", "rpn_num_upsample_filters", ",", "\n", "num_input_features", "=", "num_rpn_input_filters", "*", "2", ",", "\n", "num_anchor_per_loc", "=", "target_assigner", ".", "num_anchors_per_location", ",", "\n", "encode_background_as_zeros", "=", "encode_background_as_zeros", ",", "\n", "use_direction_classifier", "=", "use_direction_classifier", ",", "\n", "use_bev", "=", "use_bev", ",", "\n", "use_groupnorm", "=", "use_groupnorm", ",", "\n", "num_groups", "=", "num_groups", ",", "\n", "box_code_size", "=", "target_assigner", ".", "box_coder", ".", "code_size", ")", "\n", "", "else", ":", "\n", "            ", "mid_class_dict", "=", "{", "\n", "\"SparseMiddleExtractor\"", ":", "middle", ".", "SparseMiddleExtractor", ",", "\n", "\"SpMiddleD4HD\"", ":", "middle", ".", "SpMiddleD4HD", ",", "\n", "\"SpMiddleD8HD\"", ":", "middle", ".", "SpMiddleD8HD", ",", "\n", "\"SpMiddleFHD\"", ":", "middle", ".", "SpMiddleFHD", ",", "\n", "\"SpMiddleFHDV2\"", ":", "middle", ".", "SpMiddleFHDV2", ",", "\n", "\"SpMiddleFHDLarge\"", ":", "middle", ".", "SpMiddleFHDLarge", ",", "\n", "\"SpMiddleResNetFHD\"", ":", "middle", ".", "SpMiddleResNetFHD", ",", "\n", "\"SpMiddleD4HDLite\"", ":", "middle", ".", "SpMiddleD4HDLite", ",", "\n", "\"SpMiddleFHDLite\"", ":", "middle", ".", "SpMiddleFHDLite", ",", "\n", "\"SpMiddle2K\"", ":", "middle", ".", "SpMiddle2K", ",", "\n", "\"MiddleExtractor\"", ":", "middle", ".", "MiddleExtractor", ",", "\n", "\"SpMiddleVision\"", ":", "middle", ".", "SpMiddleVision", "\n", "}", "\n", "mid_class", "=", "mid_class_dict", "[", "middle_class_name", "]", "\n", "mid_class_vision", "=", "mid_class_dict", "[", "'SpMiddleVision'", "]", "\n", "self", ".", "middle_feature_extractor", "=", "mid_class", "(", "\n", "output_shape", ",", "\n", "use_norm", ",", "\n", "num_input_features", "=", "middle_num_input_features", ",", "\n", "num_filters_down1", "=", "middle_num_filters_d1", ",", "\n", "num_filters_down2", "=", "middle_num_filters_d2", ")", "\n", "rpn_class_dict", "=", "{", "\n", "\"RPN\"", ":", "rpn", ".", "RPN", ",", "\n", "\"RPNV2\"", ":", "rpn", ".", "RPNV2", ",", "\n", "}", "\n", "rpn_class", "=", "rpn_class_dict", "[", "rpn_class_name", "]", "\n", "self", ".", "rpn", "=", "rpn_class", "(", "\n", "use_norm", "=", "True", ",", "\n", "num_class", "=", "num_class", ",", "\n", "layer_nums", "=", "rpn_layer_nums", ",", "\n", "layer_strides", "=", "rpn_layer_strides", ",", "\n", "num_filters", "=", "rpn_num_filters", ",", "\n", "upsample_strides", "=", "rpn_upsample_strides", ",", "\n", "num_upsample_filters", "=", "rpn_num_upsample_filters", ",", "\n", "num_input_features", "=", "rpn_num_input_features", ",", "\n", "num_anchor_per_loc", "=", "target_assigner", ".", "num_anchors_per_location", ",", "\n", "encode_background_as_zeros", "=", "encode_background_as_zeros", ",", "\n", "use_direction_classifier", "=", "use_direction_classifier", ",", "\n", "use_bev", "=", "use_bev", ",", "\n", "use_groupnorm", "=", "use_groupnorm", ",", "\n", "num_groups", "=", "num_groups", ",", "\n", "box_code_size", "=", "target_assigner", ".", "box_coder", ".", "code_size", ")", "\n", "\n", "", "self", ".", "rpn_acc", "=", "metrics", ".", "Accuracy", "(", "\n", "dim", "=", "-", "1", ",", "encode_background_as_zeros", "=", "encode_background_as_zeros", ")", "\n", "self", ".", "rpn_precision", "=", "metrics", ".", "Precision", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "rpn_recall", "=", "metrics", ".", "Recall", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "rpn_metrics", "=", "metrics", ".", "PrecisionRecall", "(", "\n", "dim", "=", "-", "1", ",", "\n", "thresholds", "=", "[", "0.1", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.8", ",", "0.9", ",", "0.95", "]", ",", "\n", "use_sigmoid_score", "=", "use_sigmoid_score", ",", "\n", "encode_background_as_zeros", "=", "encode_background_as_zeros", ")", "\n", "\n", "self", ".", "rpn_cls_loss", "=", "metrics", ".", "Scalar", "(", ")", "\n", "self", ".", "rpn_loc_loss", "=", "metrics", ".", "Scalar", "(", ")", "\n", "self", ".", "rpn_total_loss", "=", "metrics", ".", "Scalar", "(", ")", "\n", "self", ".", "register_buffer", "(", "\"global_step\"", ",", "torch", ".", "LongTensor", "(", "1", ")", ".", "zero_", "(", ")", ")", "\n", "\n", "self", ".", "_time_dict", "=", "{", "}", "\n", "self", ".", "_time_total_dict", "=", "{", "}", "\n", "self", ".", "_time_count_dict", "=", "{", "}", "\n", "", "def", "start_timer", "(", "self", ",", "*", "names", ")", ":", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.start_timer": [[236, 242], ["torch.cuda.synchronize", "time.time"], "methods", ["None"], ["", "def", "start_timer", "(", "self", ",", "*", "names", ")", ":", "\n", "        ", "if", "not", "self", ".", "measure_time", ":", "\n", "            ", "return", "\n", "", "for", "name", "in", "names", ":", "\n", "            ", "self", ".", "_time_dict", "[", "name", "]", "=", "time", ".", "time", "(", ")", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.end_timer": [[243, 255], ["torch.cuda.synchronize", "time.time"], "methods", ["None"], ["", "def", "end_timer", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "not", "self", ".", "measure_time", ":", "\n", "            ", "return", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "self", ".", "_time_dict", "[", "name", "]", "\n", "if", "name", "not", "in", "self", ".", "_time_count_dict", ":", "\n", "            ", "self", ".", "_time_count_dict", "[", "name", "]", "=", "1", "\n", "self", ".", "_time_total_dict", "[", "name", "]", "=", "time_elapsed", "\n", "", "else", ":", "\n", "            ", "self", ".", "_time_count_dict", "[", "name", "]", "+=", "1", "\n", "self", ".", "_time_total_dict", "[", "name", "]", "+=", "time_elapsed", "\n", "", "self", ".", "_time_dict", "[", "name", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.clear_timer": [[256, 260], ["voxelnet.VoxelNet._time_count_dict.clear", "voxelnet.VoxelNet._time_dict.clear", "voxelnet.VoxelNet._time_total_dict.clear"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.clear", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.clear", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.clear"], ["", "def", "clear_timer", "(", "self", ")", ":", "\n", "        ", "self", ".", "_time_count_dict", ".", "clear", "(", ")", "\n", "self", ".", "_time_dict", ".", "clear", "(", ")", "\n", "self", ".", "_time_total_dict", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.get_avg_time_dict": [[261, 267], ["voxelnet.VoxelNet._time_total_dict.items", "max"], "methods", ["None"], ["", "def", "get_avg_time_dict", "(", "self", ")", ":", "\n", "        ", "ret", "=", "{", "}", "\n", "for", "name", ",", "val", "in", "self", ".", "_time_total_dict", ".", "items", "(", ")", ":", "\n", "            ", "count", "=", "self", ".", "_time_count_dict", "[", "name", "]", "\n", "ret", "[", "name", "]", "=", "val", "/", "max", "(", "1", ",", "count", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.set_global_step": [[268, 270], ["None"], "methods", ["None"], ["", "def", "set_global_step", "(", "self", ",", "step_value", ")", ":", "\n", "        ", "self", ".", "global_step", "=", "step_value", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.update_global_step": [[271, 273], ["None"], "methods", ["None"], ["", "def", "update_global_step", "(", "self", ")", ":", "\n", "        ", "self", ".", "global_step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.get_global_step": [[274, 276], ["int", "voxelnet.VoxelNet.global_step.cpu().numpy", "voxelnet.VoxelNet.global_step.cpu"], "methods", ["None"], ["", "def", "get_global_step", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "global_step", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.forward": [[277, 403], ["time.time", "voxelnet.VoxelNet.start_timer", "voxelnet.VoxelNet.voxel_feature_extractor", "voxelnet.VoxelNet.end_timer", "voxelnet.VoxelNet.sparse_rpn", "voxelnet.VoxelNet.start_timer", "voxelnet.VoxelNet.middle_feature_extractor", "voxelnet.VoxelNet.end_timer", "voxelnet.VoxelNet.start_timer", "voxelnet.VoxelNet.end_timer", "voxelnet.prepare_loss_weights", "cls_targets.unsqueeze.unsqueeze.unsqueeze", "voxelnet.create_loss", "voxelnet._get_pos_neg_loss", "voxelnet.VoxelNet.start_timer", "pathlib.Path", "numpy.array", "numpy.where", "numpy.array().reshape", "numpy.array", "numpy.append", "f_detection_result[].reshape", "voxelnet.VoxelNet.train_stage_2", "voxelnet.VoxelNet.end_timer", "voxelnet.VoxelNet.rpn", "voxelnet.VoxelNet.rpn", "cared.type_as", "loc_loss.sum", "cls_loss.sum", "voxelnet.get_direction_target", "preds_dict[].view", "torch.clamp", "voxelnet.VoxelNet._dir_loss_ftor", "open", "f.readlines", "line.strip().split", "numpy.array.reshape", "weights.sum", "voxelnet.VoxelNet.sum", "second.get_image_index_str", "second.get_image_index_str", "numpy.array", "float", "numpy.where", "line.strip", "float"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.start_timer", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.end_timer", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.start_timer", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.end_timer", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.start_timer", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.end_timer", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.prepare_loss_weights", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.create_loss", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet._get_pos_neg_loss", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.start_timer", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.train_stage_2", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.end_timer", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.get_direction_target", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_image_index_str", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_image_index_str"], ["", "def", "forward", "(", "self", ",", "example", ",", "detection_2d_path", ")", ":", "\n", "        ", "\"\"\"module's forward should always accept dict and return loss.\n        \"\"\"", "\n", "voxels", "=", "example", "[", "\"voxels\"", "]", "\n", "num_points", "=", "example", "[", "\"num_points\"", "]", "\n", "coors", "=", "example", "[", "\"coordinates\"", "]", "\n", "batch_anchors", "=", "example", "[", "\"anchors\"", "]", "\n", "#images = example[\"images\"]", "\n", "batch_size_dev", "=", "batch_anchors", ".", "shape", "[", "0", "]", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "# features: [num_voxels, max_num_points_per_voxel, 7]", "\n", "# num_points: [num_voxels]", "\n", "# coors: [num_voxels, 4]", "\n", "# t = time.time()", "\n", "self", ".", "start_timer", "(", "\"voxel_feature_extractor\"", ")", "\n", "voxel_features", "=", "self", ".", "voxel_feature_extractor", "(", "voxels", ",", "num_points", ")", "\n", "self", ".", "end_timer", "(", "\"voxel_feature_extractor\"", ")", "\n", "# torch.cuda.synchronize()", "\n", "# print(\"vfe time\", time.time() - t)", "\n", "batch_P2", "=", "example", "[", "\"P2\"", "]", "\n", "batch_rect", "=", "example", "[", "\"rect\"", "]", "\n", "batch_Trv2c", "=", "example", "[", "\"Trv2c\"", "]", "\n", "if", "self", ".", "_use_sparse_rpn", ":", "\n", "            ", "preds_dict", "=", "self", ".", "sparse_rpn", "(", "voxel_features", ",", "coors", ",", "batch_size_dev", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "start_timer", "(", "\"middle forward\"", ")", "\n", "spatial_features", "=", "self", ".", "middle_feature_extractor", "(", "\n", "voxel_features", ",", "coors", ",", "batch_size_dev", ")", "\n", "self", ".", "end_timer", "(", "\"middle forward\"", ")", "\n", "self", ".", "start_timer", "(", "\"rpn forward\"", ")", "\n", "if", "self", ".", "_use_bev", ":", "\n", "                ", "preds_dict", "=", "self", ".", "rpn", "(", "spatial_features", ",", "example", "[", "\"bev_map\"", "]", ")", "\n", "", "else", ":", "\n", "                ", "preds_dict", "=", "self", ".", "rpn", "(", "spatial_features", ")", "\n", "", "self", ".", "end_timer", "(", "\"rpn forward\"", ")", "\n", "", "box_preds", "=", "preds_dict", "[", "\"box_preds\"", "]", "\n", "cls_preds", "=", "preds_dict", "[", "\"cls_preds\"", "]", "\n", "# cls_preds shape [batch_size,200,176,2]", "\n", "if", "self", ".", "training", ":", "\n", "            ", "labels", "=", "example", "[", "'labels'", "]", "\n", "# labels shape: [batch_size,70400]", "\n", "# here label = 1 means positive, label = 0 means negative, label = -1 means dont care", "\n", "reg_targets", "=", "example", "[", "'reg_targets'", "]", "\n", "# reg_targets is the", "\n", "# reg_targets shape: [batch,70400,7]", "\n", "cls_weights", ",", "reg_weights", ",", "cared", "=", "prepare_loss_weights", "(", "\n", "labels", ",", "\n", "pos_cls_weight", "=", "self", ".", "_pos_cls_weight", ",", "\n", "neg_cls_weight", "=", "self", ".", "_neg_cls_weight", ",", "\n", "loss_norm_type", "=", "self", ".", "_loss_norm_type", ",", "\n", "dtype", "=", "voxels", ".", "dtype", ")", "\n", "# pos_cls_weight and net_clas_weight are all 1.0", "\n", "# _loss_norm_type is: LossNormType.NormByNumPositives", "\n", "cls_targets", "=", "labels", "*", "cared", ".", "type_as", "(", "labels", ")", "\n", "cls_targets", "=", "cls_targets", ".", "unsqueeze", "(", "-", "1", ")", "\n", "#here unsqueeze(-1) means adding another dimention at the end,eg:[1,70400] ---> [1,70400,1]", "\n", "# cls_preds shape: [batch,200,176,2]", "\n", "# cls_targets shape : [batch,70400,1]", "\n", "loc_loss", ",", "cls_loss", "=", "create_loss", "(", "\n", "self", ".", "_loc_loss_ftor", ",", "\n", "self", ".", "_cls_loss_ftor", ",", "\n", "box_preds", "=", "box_preds", ",", "\n", "cls_preds", "=", "cls_preds", ",", "\n", "cls_targets", "=", "cls_targets", ",", "\n", "cls_weights", "=", "cls_weights", ",", "\n", "reg_targets", "=", "reg_targets", ",", "\n", "reg_weights", "=", "reg_weights", ",", "\n", "num_class", "=", "self", ".", "_num_class", ",", "\n", "encode_rad_error_by_sin", "=", "self", ".", "_encode_rad_error_by_sin", ",", "\n", "encode_background_as_zeros", "=", "self", ".", "_encode_background_as_zeros", ",", "\n", "box_code_size", "=", "self", ".", "_box_coder", ".", "code_size", ",", "\n", ")", "\n", "# loc_loss shape: [batch,70400,7]", "\n", "# cls_loss shape: [batch,70400,1]", "\n", "loc_loss_reduced", "=", "loc_loss", ".", "sum", "(", ")", "/", "batch_size_dev", "\n", "# this self._loc_loss_weight is the beta2 in the paper, the constant coefficient for localization loss", "\n", "loc_loss_reduced", "*=", "self", ".", "_loc_loss_weight", "\n", "cls_pos_loss", ",", "cls_neg_loss", "=", "_get_pos_neg_loss", "(", "cls_loss", ",", "labels", ")", "\n", "cls_pos_loss", "/=", "self", ".", "_pos_cls_weight", "\n", "cls_neg_loss", "/=", "self", ".", "_neg_cls_weight", "\n", "cls_loss_reduced", "=", "cls_loss", ".", "sum", "(", ")", "/", "batch_size_dev", "\n", "cls_loss_reduced", "*=", "self", ".", "_cls_loss_weight", "\n", "loss", "=", "loc_loss_reduced", "+", "cls_loss_reduced", "\n", "# here the loss is just a number in tensor format", "\n", "if", "self", ".", "_use_direction_classifier", ":", "\n", "                ", "dir_targets", "=", "get_direction_target", "(", "example", "[", "'anchors'", "]", ",", "\n", "reg_targets", ")", "\n", "dir_logits", "=", "preds_dict", "[", "\"dir_cls_preds\"", "]", ".", "view", "(", "\n", "batch_size_dev", ",", "-", "1", ",", "2", ")", "\n", "weights", "=", "(", "labels", ">", "0", ")", ".", "type_as", "(", "dir_logits", ")", "\n", "weights", "/=", "torch", ".", "clamp", "(", "weights", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", ",", "min", "=", "1.0", ")", "\n", "dir_loss", "=", "self", ".", "_dir_loss_ftor", "(", "\n", "dir_logits", ",", "dir_targets", ",", "weights", "=", "weights", ")", "\n", "dir_loss", "=", "dir_loss", ".", "sum", "(", ")", "/", "batch_size_dev", "\n", "loss", "+=", "dir_loss", "*", "self", ".", "_direction_loss_weight", "\n", "", "return", "{", "\n", "\"loss\"", ":", "loss", ",", "\n", "\"cls_loss\"", ":", "cls_loss", ",", "\n", "\"loc_loss\"", ":", "loc_loss", ",", "\n", "\"cls_pos_loss\"", ":", "cls_pos_loss", ",", "\n", "\"cls_neg_loss\"", ":", "cls_neg_loss", ",", "\n", "\"cls_preds\"", ":", "cls_preds", ",", "\n", "\"dir_loss_reduced\"", ":", "dir_loss", ",", "\n", "\"cls_loss_reduced\"", ":", "cls_loss_reduced", ",", "\n", "\"loc_loss_reduced\"", ":", "loc_loss_reduced", ",", "\n", "\"cared\"", ":", "cared", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "start_timer", "(", "\"predict\"", ")", "\n", "img_idx", "=", "example", "[", "'image_idx'", "]", "[", "0", "]", "\n", "detection_2d_result_path", "=", "pathlib", ".", "Path", "(", "detection_2d_path", ")", "\n", "detection_2d_file_name", "=", "f\"{detection_2d_result_path}/{kitti.get_image_index_str(img_idx)}.txt\"", "\n", "with", "open", "(", "detection_2d_file_name", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "content", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "for", "line", "in", "lines", "]", "\n", "predicted_class", "=", "np", ".", "array", "(", "[", "x", "[", "0", "]", "for", "x", "in", "content", "]", ",", "dtype", "=", "'object'", ")", "\n", "predicted_class_index", "=", "np", ".", "where", "(", "predicted_class", "==", "'Car'", ")", "\n", "detection_result", "=", "np", ".", "array", "(", "[", "[", "float", "(", "info", ")", "for", "info", "in", "x", "[", "4", ":", "8", "]", "]", "for", "x", "in", "content", "]", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "score", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "15", "]", ")", "for", "x", "in", "content", "]", ")", "# 1000 is the score scale!!!", "\n", "f_detection_result", "=", "np", ".", "append", "(", "detection_result", ",", "score", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "middle_predictions", "=", "f_detection_result", "[", "predicted_class_index", ",", ":", "]", ".", "reshape", "(", "-", "1", ",", "5", ")", "\n", "top_predictions", "=", "middle_predictions", "[", "np", ".", "where", "(", "middle_predictions", "[", ":", ",", "4", "]", ">=", "-", "100", ")", "]", "\n", "res", ",", "iou_test", ",", "tensor_index", "=", "self", ".", "train_stage_2", "(", "example", ",", "preds_dict", ",", "top_predictions", ")", "\n", "self", ".", "end_timer", "(", "\"predict\"", ")", "\n", "\n", "return", "res", ",", "preds_dict", ",", "top_predictions", ",", "iou_test", ",", "tensor_index", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.train_stage_2": [[405, 533], ["time.time", "example[].view", "example[].view.reshape", "time.time", "voxelnet.VoxelNet.view", "batch_cls_preds.view.view.view", "voxelnet.VoxelNet._box_coder.decode_torch", "zip", "example[].view", "batch_dir_preds.view.view.view", "box_preds.float.float.float", "cls_preds.float.float.float", "rect.float.float.float", "Trv2c.float.float.float", "P2.float.float.float", "second.pytorch.core.box_torch_ops.box_lidar_to_camera", "second.pytorch.core.box_torch_ops.box_lidar_to_camera", "second.pytorch.core.box_torch_ops.center_to_corner_box3d", "second.pytorch.core.box_torch_ops.center_to_corner_box3d", "second.pytorch.core.box_torch_ops.project_to_image", "second.pytorch.core.box_torch_ops.project_to_image", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cat", "predictions_dicts.append", "numpy.zeros", "top_predictions[].reshape", "time.time", "numpy.zeros", "numpy.zeros", "second.build_stage2_training", "second.build_stage2_training", "time.time", "torch.FloatTensor", "torch.LongTensor", "iou_test_tensor.reshape.reshape.permute", "iou_test_tensor.reshape.reshape.reshape", "tensor_index_tensor.reshape.reshape.reshape", "torch.sigmoid", "torch.min", "torch.max", "torch.norm", "torch.cat.detach().cpu().numpy", "final_scores.detach().cpu().numpy", "dis_to_lidar.detach().cpu().numpy", "torch.zeros", "torch.zeros", "torch.sigmoid", "torch.nn.functional.softmax", "torch.cat.detach().cpu().numpy", "torch.cat.detach().cpu().numpy", "torch.cat.detach().cpu", "final_scores.detach().cpu", "dis_to_lidar.detach().cpu", "torch.cat.detach().cpu", "torch.cat.detach().cpu", "torch.cat.detach", "final_scores.detach", "dis_to_lidar.detach", "torch.cat.detach", "torch.cat.detach"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BevBoxCoderTorch.decode_torch", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box_lidar_to_camera", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box_lidar_to_camera", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.project_to_image", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.project_to_image", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.build_stage2_training", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.build_stage2_training"], ["", "", "def", "train_stage_2", "(", "self", ",", "example", ",", "preds_dict", ",", "top_predictions", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "batch_size", "=", "example", "[", "'anchors'", "]", ".", "shape", "[", "0", "]", "\n", "batch_anchors", "=", "example", "[", "\"anchors\"", "]", ".", "view", "(", "batch_size", ",", "-", "1", ",", "7", ")", "\n", "batch_anchors_reshape", "=", "batch_anchors", ".", "reshape", "(", "1", ",", "200", ",", "176", ",", "14", ")", "\n", "batch_rect", "=", "example", "[", "\"rect\"", "]", "\n", "batch_Trv2c", "=", "example", "[", "\"Trv2c\"", "]", "\n", "batch_P2", "=", "example", "[", "\"P2\"", "]", "\n", "batch_image_shape", "=", "example", "[", "\"image_shape\"", "]", "\n", "if", "\"anchors_mask\"", "not", "in", "example", ":", "\n", "            ", "batch_anchors_mask", "=", "[", "None", "]", "*", "batch_size", "\n", "", "else", ":", "\n", "            ", "batch_anchors_mask", "=", "example", "[", "\"anchors_mask\"", "]", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "", "batch_imgidx", "=", "example", "[", "'image_idx'", "]", "\n", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "batch_box_preds", "=", "preds_dict", "[", "\"box_preds\"", "]", "\n", "batch_cls_preds", "=", "preds_dict", "[", "\"cls_preds\"", "]", "\n", "batch_box_preds", "=", "batch_box_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "\n", "self", ".", "_box_coder", ".", "code_size", ")", "\n", "num_class_with_bg", "=", "self", ".", "_num_class", "\n", "if", "not", "self", ".", "_encode_background_as_zeros", ":", "\n", "            ", "num_class_with_bg", "=", "self", ".", "_num_class", "+", "1", "\n", "", "batch_cls_preds", "=", "batch_cls_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "\n", "num_class_with_bg", ")", "\n", "batch_box_preds", "=", "self", ".", "_box_coder", ".", "decode_torch", "(", "batch_box_preds", ",", "\n", "batch_anchors", ")", "\n", "if", "self", ".", "_use_direction_classifier", ":", "\n", "            ", "batch_dir_preds", "=", "preds_dict", "[", "\"dir_cls_preds\"", "]", "\n", "batch_dir_preds", "=", "batch_dir_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "batch_dir_preds", "=", "[", "None", "]", "*", "batch_size", "\n", "\n", "", "predictions_dicts", "=", "[", "]", "\n", "for", "box_preds", ",", "cls_preds", ",", "dir_preds", ",", "rect", ",", "Trv2c", ",", "P2", ",", "img_idx", ",", "a_mask", "in", "zip", "(", "\n", "batch_box_preds", ",", "batch_cls_preds", ",", "batch_dir_preds", ",", "batch_rect", ",", "\n", "batch_Trv2c", ",", "batch_P2", ",", "batch_imgidx", ",", "batch_anchors_mask", ")", ":", "\n", "            ", "if", "a_mask", "is", "not", "None", ":", "\n", "                ", "box_preds", "=", "box_preds", "[", "a_mask", "]", "\n", "cls_preds", "=", "cls_preds", "[", "a_mask", "]", "\n", "", "box_preds", "=", "box_preds", ".", "float", "(", ")", "\n", "cls_preds", "=", "cls_preds", ".", "float", "(", ")", "\n", "rect", "=", "rect", ".", "float", "(", ")", "\n", "Trv2c", "=", "Trv2c", ".", "float", "(", ")", "\n", "P2", "=", "P2", ".", "float", "(", ")", "\n", "\n", "if", "self", ".", "_encode_background_as_zeros", ":", "\n", "# this don't support softmax", "\n", "                ", "assert", "self", ".", "_use_sigmoid_score", "is", "True", "\n", "total_scores", "=", "torch", ".", "sigmoid", "(", "cls_preds", ")", "\n", "#total_scores = cls_preds   # use this if you want to fuse raw log score", "\n", "", "else", ":", "\n", "# encode background as first element in one-hot vector", "\n", "                ", "if", "self", ".", "_use_sigmoid_score", ":", "\n", "                    ", "total_scores", "=", "torch", ".", "sigmoid", "(", "cls_preds", ")", "[", "...", ",", "1", ":", "]", "\n", "", "else", ":", "\n", "                    ", "total_scores", "=", "F", ".", "softmax", "(", "cls_preds", ",", "dim", "=", "-", "1", ")", "[", "...", ",", "1", ":", "]", "\n", "\n", "# finally generate predictions.", "\n", "", "", "final_box_preds", "=", "box_preds", "\n", "final_scores", "=", "total_scores", "\n", "final_box_preds_camera", "=", "box_torch_ops", ".", "box_lidar_to_camera", "(", "\n", "final_box_preds", ",", "rect", ",", "Trv2c", ")", "\n", "locs", "=", "final_box_preds_camera", "[", ":", ",", ":", "3", "]", "\n", "dims", "=", "final_box_preds_camera", "[", ":", ",", "3", ":", "6", "]", "\n", "angles", "=", "final_box_preds_camera", "[", ":", ",", "6", "]", "\n", "camera_box_origin", "=", "[", "0.5", ",", "1.0", ",", "0.5", "]", "\n", "box_corners", "=", "box_torch_ops", ".", "center_to_corner_box3d", "(", "\n", "locs", ",", "dims", ",", "angles", ",", "camera_box_origin", ",", "axis", "=", "1", ")", "\n", "\n", "box_corners_in_image", "=", "box_torch_ops", ".", "project_to_image", "(", "\n", "box_corners", ",", "P2", ")", "\n", "# box_corners_in_image: [N, 8, 2]", "\n", "minxy", "=", "torch", ".", "min", "(", "box_corners_in_image", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "maxxy", "=", "torch", ".", "max", "(", "box_corners_in_image", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "img_height", "=", "batch_image_shape", "[", "0", ",", "0", "]", "\n", "img_width", "=", "batch_image_shape", "[", "0", ",", "1", "]", "\n", "minxy", "[", ":", ",", "0", "]", "=", "torch", ".", "clamp", "(", "minxy", "[", ":", ",", "0", "]", ",", "min", "=", "0", ",", "max", "=", "img_width", ")", "\n", "minxy", "[", ":", ",", "1", "]", "=", "torch", ".", "clamp", "(", "minxy", "[", ":", ",", "1", "]", ",", "min", "=", "0", ",", "max", "=", "img_height", ")", "\n", "maxxy", "[", ":", ",", "0", "]", "=", "torch", ".", "clamp", "(", "maxxy", "[", ":", ",", "0", "]", ",", "min", "=", "0", ",", "max", "=", "img_width", ")", "\n", "maxxy", "[", ":", ",", "1", "]", "=", "torch", ".", "clamp", "(", "maxxy", "[", ":", ",", "1", "]", ",", "min", "=", "0", ",", "max", "=", "img_height", ")", "\n", "box_2d_preds", "=", "torch", ".", "cat", "(", "[", "minxy", ",", "maxxy", "]", ",", "dim", "=", "1", ")", "\n", "# predictions", "\n", "predictions_dict", "=", "{", "\n", "\"bbox\"", ":", "box_2d_preds", ",", "\n", "\"box3d_camera\"", ":", "final_box_preds_camera", ",", "\n", "\"box3d_lidar\"", ":", "final_box_preds", ",", "\n", "\"scores\"", ":", "final_scores", ",", "\n", "#\"label_preds\": label_preds,", "\n", "\"image_idx\"", ":", "img_idx", ",", "\n", "}", "\n", "predictions_dicts", ".", "append", "(", "predictions_dict", ")", "\n", "dis_to_lidar", "=", "torch", ".", "norm", "(", "box_preds", "[", ":", ",", ":", "2", "]", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "/", "82.0", "\n", "box_2d_detector", "=", "np", ".", "zeros", "(", "(", "200", ",", "4", ")", ")", "\n", "box_2d_detector", "[", "0", ":", "top_predictions", ".", "shape", "[", "0", "]", ",", ":", "]", "=", "top_predictions", "[", ":", ",", ":", "4", "]", "\n", "box_2d_detector", "=", "top_predictions", "[", ":", ",", ":", "4", "]", "\n", "box_2d_scores", "=", "top_predictions", "[", ":", ",", "4", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "time_iou_build_start", "=", "time", ".", "time", "(", ")", "\n", "overlaps1", "=", "np", ".", "zeros", "(", "(", "900000", ",", "4", ")", ",", "dtype", "=", "box_2d_preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "dtype", ")", "\n", "tensor_index1", "=", "np", ".", "zeros", "(", "(", "900000", ",", "2", ")", ",", "dtype", "=", "box_2d_preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "dtype", ")", "\n", "overlaps1", "[", ":", ",", ":", "]", "=", "-", "1", "\n", "tensor_index1", "[", ":", ",", ":", "]", "=", "-", "1", "\n", "#final_scores[final_scores<0.1] = 0", "\n", "#box_2d_preds[(final_scores<0.1).reshape(-1),:] = 0 ", "\n", "iou_test", ",", "tensor_index", ",", "max_num", "=", "se", ".", "build_stage2_training", "(", "box_2d_preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "box_2d_detector", ",", "\n", "-", "1", ",", "\n", "final_scores", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "box_2d_scores", ",", "\n", "dis_to_lidar", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "overlaps1", ",", "\n", "tensor_index1", ")", "\n", "time_iou_build_end", "=", "time", ".", "time", "(", ")", "\n", "iou_test_tensor", "=", "torch", ".", "FloatTensor", "(", "iou_test", ")", "#iou_test_tensor shape: [160000,4]", "\n", "tensor_index_tensor", "=", "torch", ".", "LongTensor", "(", "tensor_index", ")", "\n", "iou_test_tensor", "=", "iou_test_tensor", ".", "permute", "(", "1", ",", "0", ")", "\n", "iou_test_tensor", "=", "iou_test_tensor", ".", "reshape", "(", "1", ",", "4", ",", "1", ",", "900000", ")", "\n", "tensor_index_tensor", "=", "tensor_index_tensor", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "if", "max_num", "==", "0", ":", "\n", "                ", "non_empty_iou_test_tensor", "=", "torch", ".", "zeros", "(", "1", ",", "4", ",", "1", ",", "2", ")", "\n", "non_empty_iou_test_tensor", "[", ":", ",", ":", ",", ":", ",", ":", "]", "=", "-", "1", "\n", "non_empty_tensor_index_tensor", "=", "torch", ".", "zeros", "(", "2", ",", "2", ")", "\n", "non_empty_tensor_index_tensor", "[", ":", ",", ":", "]", "=", "-", "1", "\n", "", "else", ":", "\n", "                ", "non_empty_iou_test_tensor", "=", "iou_test_tensor", "[", ":", ",", ":", ",", ":", ",", ":", "max_num", "]", "\n", "non_empty_tensor_index_tensor", "=", "tensor_index_tensor", "[", ":", "max_num", ",", ":", "]", "\n", "\n", "", "", "return", "predictions_dicts", ",", "non_empty_iou_test_tensor", ",", "non_empty_tensor_index_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.metrics_to_float": [[535, 541], ["voxelnet.VoxelNet.rpn_acc.float", "voxelnet.VoxelNet.rpn_metrics.float", "voxelnet.VoxelNet.rpn_cls_loss.float", "voxelnet.VoxelNet.rpn_loc_loss.float", "voxelnet.VoxelNet.rpn_total_loss.float"], "methods", ["None"], ["", "def", "metrics_to_float", "(", "self", ")", ":", "\n", "        ", "self", ".", "rpn_acc", ".", "float", "(", ")", "\n", "self", ".", "rpn_metrics", ".", "float", "(", ")", "\n", "self", ".", "rpn_cls_loss", ".", "float", "(", ")", "\n", "self", ".", "rpn_loc_loss", ".", "float", "(", ")", "\n", "self", ".", "rpn_total_loss", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.update_metrics": [[542, 573], ["cls_preds.view.view.view", "voxelnet.VoxelNet.rpn_metrics", "prec.numpy.numpy.numpy", "recall.numpy.numpy.numpy", "enumerate", "voxelnet.VoxelNet.rpn_acc().numpy", "voxelnet.VoxelNet.rpn_cls_loss().numpy", "voxelnet.VoxelNet.rpn_loc_loss().numpy", "float", "float", "float", "float", "float", "float", "float", "cls_loss.data.cpu().numpy", "loc_loss.data.cpu().numpy", "voxelnet.VoxelNet.rpn_acc", "voxelnet.VoxelNet.rpn_cls_loss", "voxelnet.VoxelNet.rpn_loc_loss", "cls_loss.data.cpu", "loc_loss.data.cpu", "int", "int"], "methods", ["None"], ["", "def", "update_metrics", "(", "self", ",", "\n", "cls_loss", ",", "\n", "loc_loss", ",", "\n", "cls_preds", ",", "\n", "labels", ",", "\n", "sampled", ",", "\n", "vox_preds", "=", "None", ",", "\n", "vox_labels", "=", "None", ",", "\n", "vox_weights", "=", "None", ")", ":", "\n", "        ", "batch_size", "=", "cls_preds", ".", "shape", "[", "0", "]", "\n", "num_class", "=", "self", ".", "_num_class", "\n", "if", "not", "self", ".", "_encode_background_as_zeros", ":", "\n", "            ", "num_class", "+=", "1", "\n", "", "cls_preds", "=", "cls_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "num_class", ")", "\n", "rpn_acc", "=", "self", ".", "rpn_acc", "(", "labels", ",", "cls_preds", ",", "sampled", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "prec", ",", "recall", "=", "self", ".", "rpn_metrics", "(", "labels", ",", "cls_preds", ",", "sampled", ")", "\n", "prec", "=", "prec", ".", "numpy", "(", ")", "\n", "recall", "=", "recall", ".", "numpy", "(", ")", "\n", "rpn_cls_loss", "=", "self", ".", "rpn_cls_loss", "(", "cls_loss", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "rpn_loc_loss", "=", "self", ".", "rpn_loc_loss", "(", "loc_loss", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "ret", "=", "{", "\n", "\"cls_loss\"", ":", "float", "(", "rpn_cls_loss", ")", ",", "\n", "\"cls_loss_rt\"", ":", "float", "(", "cls_loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "'loc_loss'", ":", "float", "(", "rpn_loc_loss", ")", ",", "\n", "\"loc_loss_rt\"", ":", "float", "(", "loc_loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "\"rpn_acc\"", ":", "float", "(", "rpn_acc", ")", ",", "\n", "}", "\n", "for", "i", ",", "thresh", "in", "enumerate", "(", "self", ".", "rpn_metrics", ".", "thresholds", ")", ":", "\n", "            ", "ret", "[", "f\"prec@{int(thresh*100)}\"", "]", "=", "float", "(", "prec", "[", "i", "]", ")", "\n", "ret", "[", "f\"rec@{int(thresh*100)}\"", "]", "=", "float", "(", "recall", "[", "i", "]", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.clear_metrics": [[574, 580], ["voxelnet.VoxelNet.rpn_acc.clear", "voxelnet.VoxelNet.rpn_metrics.clear", "voxelnet.VoxelNet.rpn_cls_loss.clear", "voxelnet.VoxelNet.rpn_loc_loss.clear", "voxelnet.VoxelNet.rpn_total_loss.clear"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.clear", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.clear", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.clear", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.clear", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.clear"], ["", "def", "clear_metrics", "(", "self", ")", ":", "\n", "        ", "self", ".", "rpn_acc", ".", "clear", "(", ")", "\n", "self", ".", "rpn_metrics", ".", "clear", "(", ")", "\n", "self", ".", "rpn_cls_loss", ".", "clear", "(", ")", "\n", "self", ".", "rpn_loc_loss", ".", "clear", "(", ")", "\n", "self", ".", "rpn_total_loss", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.convert_norm_to_float": [[581, 595], ["isinstance", "net.children", "net.float", "voxelnet.VoxelNet.convert_norm_to_float"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.optimizer_builder.children", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.VoxelNet.convert_norm_to_float"], ["", "@", "staticmethod", "\n", "def", "convert_norm_to_float", "(", "net", ")", ":", "\n", "        ", "'''\n        BatchNorm layers to have parameters in single precision.\n        Find all layers and convert them back to float. This can't\n        be done with built in .apply as that function will apply\n        fn to all modules, parameters, and buffers. Thus we wouldn't\n        be able to guard the float conversion based on the module type.\n        '''", "\n", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "net", ".", "float", "(", ")", "\n", "", "for", "child", "in", "net", ".", "children", "(", ")", ":", "\n", "            ", "VoxelNet", ".", "convert_norm_to_float", "(", "child", ")", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet._get_pos_neg_loss": [[30, 46], ["len", "cls_loss.view", "cls_loss.view", "cls_pos_loss.sum", "cls_neg_loss.sum", "cls_loss[].sum", "cls_loss[].sum"], "function", ["None"], ["def", "_get_pos_neg_loss", "(", "cls_loss", ",", "labels", ")", ":", "\n", "# cls_loss: [N, num_anchors, num_class]", "\n", "# labels: [N, num_anchors]", "\n", "    ", "batch_size", "=", "cls_loss", ".", "shape", "[", "0", "]", "\n", "if", "cls_loss", ".", "shape", "[", "-", "1", "]", "==", "1", "or", "len", "(", "cls_loss", ".", "shape", ")", "==", "2", ":", "\n", "# this part is acutually running", "\n", "        ", "cls_pos_loss", "=", "(", "labels", ">", "0", ")", ".", "type_as", "(", "cls_loss", ")", "*", "cls_loss", ".", "view", "(", "\n", "batch_size", ",", "-", "1", ")", "\n", "cls_neg_loss", "=", "(", "labels", "==", "0", ")", ".", "type_as", "(", "cls_loss", ")", "*", "cls_loss", ".", "view", "(", "\n", "batch_size", ",", "-", "1", ")", "\n", "cls_pos_loss", "=", "cls_pos_loss", ".", "sum", "(", ")", "/", "batch_size", "\n", "cls_neg_loss", "=", "cls_neg_loss", ".", "sum", "(", ")", "/", "batch_size", "\n", "", "else", ":", "\n", "        ", "cls_pos_loss", "=", "cls_loss", "[", "...", ",", "1", ":", "]", ".", "sum", "(", ")", "/", "batch_size", "\n", "cls_neg_loss", "=", "cls_loss", "[", "...", ",", "0", "]", ".", "sum", "(", ")", "/", "batch_size", "\n", "", "return", "cls_pos_loss", ",", "cls_neg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.add_sin_difference": [[597, 604], ["torch.cat", "torch.cat", "torch.sin", "torch.cos", "torch.cos", "torch.sin"], "function", ["None"], ["", "", "def", "add_sin_difference", "(", "boxes1", ",", "boxes2", ")", ":", "\n", "    ", "rad_pred_encoding", "=", "torch", ".", "sin", "(", "boxes1", "[", "...", ",", "-", "1", ":", "]", ")", "*", "torch", ".", "cos", "(", "\n", "boxes2", "[", "...", ",", "-", "1", ":", "]", ")", "\n", "rad_tg_encoding", "=", "torch", ".", "cos", "(", "boxes1", "[", "...", ",", "-", "1", ":", "]", ")", "*", "torch", ".", "sin", "(", "boxes2", "[", "...", ",", "-", "1", ":", "]", ")", "\n", "boxes1", "=", "torch", ".", "cat", "(", "[", "boxes1", "[", "...", ",", ":", "-", "1", "]", ",", "rad_pred_encoding", "]", ",", "dim", "=", "-", "1", ")", "\n", "boxes2", "=", "torch", ".", "cat", "(", "[", "boxes2", "[", "...", ",", ":", "-", "1", "]", ",", "rad_tg_encoding", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "boxes1", ",", "boxes2", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.create_loss": [[606, 643], ["int", "box_preds.view.view", "cls_targets.squeeze.squeeze", "torchplus.nn.one_hot", "loc_loss_ftor", "cls_loss_ftor", "cls_preds.view.view", "cls_preds.view.view", "voxelnet.add_sin_difference"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.nn.functional.one_hot", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.add_sin_difference"], ["", "def", "create_loss", "(", "loc_loss_ftor", ",", "\n", "cls_loss_ftor", ",", "\n", "box_preds", ",", "\n", "cls_preds", ",", "\n", "cls_targets", ",", "\n", "cls_weights", ",", "\n", "reg_targets", ",", "\n", "reg_weights", ",", "\n", "num_class", ",", "\n", "encode_background_as_zeros", "=", "True", ",", "\n", "encode_rad_error_by_sin", "=", "True", ",", "\n", "box_code_size", "=", "7", ")", ":", "\n", "    ", "batch_size", "=", "int", "(", "box_preds", ".", "shape", "[", "0", "]", ")", "\n", "box_preds", "=", "box_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "box_code_size", ")", "\n", "# cls_preds before here is in shape of [batch,200,176,2]", "\n", "if", "encode_background_as_zeros", ":", "\n", "# we do encode background as zeros", "\n", "        ", "cls_preds", "=", "cls_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "num_class", ")", "\n", "", "else", ":", "\n", "        ", "cls_preds", "=", "cls_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "num_class", "+", "1", ")", "\n", "# cls_preds here is in shape of [batch,70400,1]", "\n", "", "cls_targets", "=", "cls_targets", ".", "squeeze", "(", "-", "1", ")", "\n", "# the shape of cls_targets after squeeze is [batch,70400]", "\n", "one_hot_targets", "=", "torchplus", ".", "nn", ".", "one_hot", "(", "\n", "cls_targets", ",", "depth", "=", "num_class", "+", "1", ",", "dtype", "=", "box_preds", ".", "dtype", ")", "\n", "# shape of one_hot_targets here is [batch, 70400, 2]", "\n", "if", "encode_background_as_zeros", ":", "\n", "        ", "one_hot_targets", "=", "one_hot_targets", "[", "...", ",", "1", ":", "]", "\n", "", "if", "encode_rad_error_by_sin", ":", "\n", "# sin(a - b) = sinacosb-cosasinb", "\n", "        ", "box_preds", ",", "reg_targets", "=", "add_sin_difference", "(", "box_preds", ",", "reg_targets", ")", "\n", "", "loc_losses", "=", "loc_loss_ftor", "(", "\n", "box_preds", ",", "reg_targets", ",", "weights", "=", "reg_weights", ")", "# [N, M]", "\n", "cls_losses", "=", "cls_loss_ftor", "(", "\n", "cls_preds", ",", "one_hot_targets", ",", "weights", "=", "cls_weights", ")", "# [N, M]", "\n", "# noted that for this focal loss function, alpha = 0.25, gamma = 2.0", "\n", "return", "loc_losses", ",", "cls_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.prepare_loss_weights": [[645, 686], ["positives.type", "negatives.type", "cared.type().sum", "torch.clamp", "positives.sum().type", "torch.clamp", "positives.type", "positives.sum().type", "torch.clamp", "torch.clamp", "cared.type", "positives.sum", "torch.stack().type", "torch.stack().type.sum", "torch.clamp", "torch.clamp", "ValueError", "positives.sum", "torch.stack", "list"], "function", ["None"], ["", "def", "prepare_loss_weights", "(", "labels", ",", "\n", "pos_cls_weight", "=", "1.0", ",", "\n", "neg_cls_weight", "=", "1.0", ",", "\n", "loss_norm_type", "=", "LossNormType", ".", "NormByNumPositives", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "    ", "\"\"\"get cls_weights and reg_weights from labels.\n    \"\"\"", "\n", "cared", "=", "labels", ">=", "0", "#becaues labels=-1 means dont't care", "\n", "# cared: [batch,70400]", "\n", "# cared: [N, num_anchors]", "\n", "positives", "=", "labels", ">", "0", "#because labels=1 means positive", "\n", "negatives", "=", "labels", "==", "0", "#because labels=0 means negative", "\n", "negative_cls_weights", "=", "negatives", ".", "type", "(", "dtype", ")", "*", "neg_cls_weight", "\n", "cls_weights", "=", "negative_cls_weights", "+", "pos_cls_weight", "*", "positives", ".", "type", "(", "dtype", ")", "\n", "reg_weights", "=", "positives", ".", "type", "(", "dtype", ")", "\n", "#because only positive regressions are included in the localization loss", "\n", "#for classification loss, both positive and negative are included", "\n", "if", "loss_norm_type", "==", "LossNormType", ".", "NormByNumExamples", ":", "\n", "        ", "num_examples", "=", "cared", ".", "type", "(", "dtype", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "num_examples", "=", "torch", ".", "clamp", "(", "num_examples", ",", "min", "=", "1.0", ")", "\n", "cls_weights", "/=", "num_examples", "\n", "bbox_normalizer", "=", "positives", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "type", "(", "dtype", ")", "\n", "reg_weights", "/=", "torch", ".", "clamp", "(", "bbox_normalizer", ",", "min", "=", "1.0", ")", "\n", "", "elif", "loss_norm_type", "==", "LossNormType", ".", "NormByNumPositives", ":", "# for focal loss", "\n", "        ", "pos_normalizer", "=", "positives", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "type", "(", "dtype", ")", "\n", "# pos_normalizer shape: [batch,1]", "\n", "reg_weights", "/=", "torch", ".", "clamp", "(", "pos_normalizer", ",", "min", "=", "1.0", ")", "\n", "cls_weights", "/=", "torch", ".", "clamp", "(", "pos_normalizer", ",", "min", "=", "1.0", ")", "\n", "", "elif", "loss_norm_type", "==", "LossNormType", ".", "NormByNumPosNeg", ":", "\n", "        ", "pos_neg", "=", "torch", ".", "stack", "(", "[", "positives", ",", "negatives", "]", ",", "dim", "=", "-", "1", ")", ".", "type", "(", "dtype", ")", "\n", "normalizer", "=", "pos_neg", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "# [N, 1, 2]", "\n", "cls_normalizer", "=", "(", "pos_neg", "*", "normalizer", ")", ".", "sum", "(", "-", "1", ")", "# [N, M]", "\n", "cls_normalizer", "=", "torch", ".", "clamp", "(", "cls_normalizer", ",", "min", "=", "1.0", ")", "\n", "# cls_normalizer will be pos_or_neg_weight/num_pos_or_neg", "\n", "normalizer", "=", "torch", ".", "clamp", "(", "normalizer", ",", "min", "=", "1.0", ")", "\n", "reg_weights", "/=", "normalizer", "[", ":", ",", "0", ":", "1", ",", "0", "]", "\n", "cls_weights", "/=", "cls_normalizer", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"unknown loss norm type. available: {list(LossNormType)}\"", ")", "\n", "", "return", "cls_weights", ",", "reg_weights", ",", "cared", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.assign_weight_to_each_class": [[688, 702], ["torch.zeros", "positives.sum", "torch.clamp"], "function", ["None"], ["", "def", "assign_weight_to_each_class", "(", "labels", ",", "\n", "weight_per_class", ",", "\n", "norm_by_num", "=", "True", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "    ", "weights", "=", "torch", ".", "zeros", "(", "labels", ".", "shape", ",", "dtype", "=", "dtype", ",", "device", "=", "labels", ".", "device", ")", "\n", "for", "label", ",", "weight", "in", "weight_per_class", ":", "\n", "        ", "positives", "=", "(", "labels", "==", "label", ")", ".", "type", "(", "dtype", ")", "\n", "weight_class", "=", "weight", "*", "positives", "\n", "if", "norm_by_num", ":", "\n", "            ", "normalizer", "=", "positives", ".", "sum", "(", ")", "\n", "normalizer", "=", "torch", ".", "clamp", "(", "normalizer", ",", "min", "=", "1.0", ")", "\n", "weight_class", "/=", "normalizer", "\n", "", "weights", "+=", "weight_class", "\n", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.models.voxelnet.get_direction_target": [[704, 719], ["anchors.view.view", "torchplus.nn.one_hot"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.nn.functional.one_hot"], ["", "def", "get_direction_target", "(", "anchors", ",", "reg_targets", ",", "one_hot", "=", "True", ")", ":", "\n", "    ", "batch_size", "=", "reg_targets", ".", "shape", "[", "0", "]", "\n", "#print(\"++++++++++++ anchors shape is\",anchors.shape)", "\n", "#print(\"++++++++++++ reg_targets shape is\",reg_targets.shape)", "\n", "anchors", "=", "anchors", ".", "view", "(", "batch_size", ",", "-", "1", ",", "7", ")", "\n", "# reg_targets[...,-1] is theta_g -theta_a, anchors[...,-1] is theta_a, so plus them together will give you theta_g", "\n", "rot_gt", "=", "reg_targets", "[", "...", ",", "-", "1", "]", "+", "anchors", "[", "...", ",", "-", "1", "]", "\n", "#print(\"+++++++ rog_gt shape is:\",rot_gt.shape)", "\n", "dir_cls_targets", "=", "(", "rot_gt", ">", "0", ")", ".", "long", "(", ")", "\n", "#print(\"+++++++ dir_cls_targets shape is\",dir_cls_targets.shape,\"number of ones: \",dir_cls_targets.sum())", "\n", "if", "one_hot", ":", "\n", "        ", "dir_cls_targets", "=", "torchplus", ".", "nn", ".", "one_hot", "(", "\n", "dir_cls_targets", ",", "2", ",", "dtype", "=", "anchors", ".", "dtype", ")", "\n", "#print(\"+++++++ the final dir_cls_targets shape is\",dir_cls_targets.shape,\"number of ones: \",dir_cls_targets.sum())", "\n", "", "return", "dir_cls_targets", "\n", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.box_coder_builder.build": [[8, 29], ["box_coder_config.WhichOneof", "second.pytorch.core.box_coders.GroundBox3dCoderTorch", "second.pytorch.core.box_coders.BevBoxCoderTorch", "ValueError"], "function", ["None"], ["def", "build", "(", "box_coder_config", ")", ":", "\n", "    ", "\"\"\"Create optimizer based on config.\n\n    Args:\n        optimizer_config: A Optimizer proto message.\n\n    Returns:\n        An optimizer and a list of variables for summary.\n\n    Raises:\n        ValueError: when using an unsupported input data type.\n    \"\"\"", "\n", "box_coder_type", "=", "box_coder_config", ".", "WhichOneof", "(", "'box_coder'", ")", "\n", "if", "box_coder_type", "==", "'ground_box3d_coder'", ":", "\n", "        ", "cfg", "=", "box_coder_config", ".", "ground_box3d_coder", "\n", "return", "GroundBox3dCoderTorch", "(", "cfg", ".", "linear_dim", ",", "cfg", ".", "encode_angle_vector", ")", "\n", "", "elif", "box_coder_type", "==", "'bev_box_coder'", ":", "\n", "        ", "cfg", "=", "box_coder_config", ".", "bev_box_coder", "\n", "return", "BevBoxCoderTorch", "(", "cfg", ".", "linear_dim", ",", "cfg", ".", "encode_angle_vector", ",", "cfg", ".", "z_fixed", ",", "cfg", ".", "h_fixed", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"unknown box_coder type\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.input_reader_builder.DatasetWrapper.__init__": [[11, 13], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "self", ".", "_dataset", "=", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.input_reader_builder.DatasetWrapper.__len__": [[14, 16], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.input_reader_builder.DatasetWrapper.__getitem__": [[17, 19], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "_dataset", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.input_reader_builder.DatasetWrapper.dataset": [[20, 23], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dataset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.input_reader_builder.build": [[25, 49], ["second.builder.dataset_builder.build", "input_reader_builder.DatasetWrapper", "isinstance", "ValueError"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build"], ["", "", "def", "build", "(", "input_reader_config", ",", "\n", "model_config", ",", "\n", "training", ",", "\n", "voxel_generator", ",", "\n", "target_assigner", "=", "None", ")", "->", "DatasetWrapper", ":", "\n", "    ", "\"\"\"Builds a tensor dictionary based on the InputReader config.\n\n    Args:\n        input_reader_config: A input_reader_pb2.InputReader object.\n\n    Returns:\n        A tensor dict based on the input_reader_config.\n\n    Raises:\n        ValueError: On invalid input reader proto.\n        ValueError: If no input paths are specified.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "input_reader_config", ",", "input_reader_pb2", ".", "InputReader", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'input_reader_config not of type '", "\n", "'input_reader_pb2.InputReader.'", ")", "\n", "", "dataset", "=", "dataset_builder", ".", "build", "(", "input_reader_config", ",", "model_config", ",", "\n", "training", ",", "voxel_generator", ",", "target_assigner", ")", "\n", "dataset", "=", "DatasetWrapper", "(", "dataset", ")", "\n", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.losses_builder.build": [[22, 53], ["losses_builder._build_classification_loss", "losses_builder._build_localization_loss", "loss_config.HasField", "ValueError"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.losses_builder._build_classification_loss", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.losses_builder._build_localization_loss"], ["def", "build", "(", "loss_config", ")", ":", "\n", "  ", "\"\"\"Build losses based on the config.\n\n  Builds classification, localization losses and optionally a hard example miner\n  based on the config.\n\n  Args:\n    loss_config: A losses_pb2.Loss object.\n\n  Returns:\n    classification_loss: Classification loss object.\n    localization_loss: Localization loss object.\n    classification_weight: Classification loss weight.\n    localization_weight: Localization loss weight.\n    hard_example_miner: Hard example miner object.\n\n  Raises:\n    ValueError: If hard_example_miner is used with sigmoid_focal_loss.\n  \"\"\"", "\n", "classification_loss", "=", "_build_classification_loss", "(", "\n", "loss_config", ".", "classification_loss", ")", "\n", "localization_loss", "=", "_build_localization_loss", "(", "\n", "loss_config", ".", "localization_loss", ")", "\n", "classification_weight", "=", "loss_config", ".", "classification_weight", "\n", "localization_weight", "=", "loss_config", ".", "localization_weight", "\n", "hard_example_miner", "=", "None", "\n", "if", "loss_config", ".", "HasField", "(", "'hard_example_miner'", ")", ":", "\n", "    ", "raise", "ValueError", "(", "'Pytorch don\\'t support HardExampleMiner'", ")", "\n", "", "return", "(", "classification_loss", ",", "localization_loss", ",", "\n", "classification_weight", ",", "\n", "localization_weight", ",", "hard_example_miner", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.losses_builder.build_faster_rcnn_classification_loss": [[54, 83], ["loss_config.WhichOneof", "second.pytorch.core.losses.WeightedSoftmaxClassificationLoss", "isinstance", "ValueError", "second.pytorch.core.losses.WeightedSigmoidClassificationLoss", "second.pytorch.core.losses.WeightedSoftmaxClassificationLoss"], "function", ["None"], ["", "def", "build_faster_rcnn_classification_loss", "(", "loss_config", ")", ":", "\n", "  ", "\"\"\"Builds a classification loss for Faster RCNN based on the loss config.\n\n  Args:\n    loss_config: A losses_pb2.ClassificationLoss object.\n\n  Returns:\n    Loss based on the config.\n\n  Raises:\n    ValueError: On invalid loss_config.\n  \"\"\"", "\n", "if", "not", "isinstance", "(", "loss_config", ",", "losses_pb2", ".", "ClassificationLoss", ")", ":", "\n", "    ", "raise", "ValueError", "(", "'loss_config not of type losses_pb2.ClassificationLoss.'", ")", "\n", "\n", "", "loss_type", "=", "loss_config", ".", "WhichOneof", "(", "'classification_loss'", ")", "\n", "\n", "if", "loss_type", "==", "'weighted_sigmoid'", ":", "\n", "    ", "return", "losses", ".", "WeightedSigmoidClassificationLoss", "(", ")", "\n", "", "if", "loss_type", "==", "'weighted_softmax'", ":", "\n", "    ", "config", "=", "loss_config", ".", "weighted_softmax", "\n", "return", "losses", ".", "WeightedSoftmaxClassificationLoss", "(", "\n", "logit_scale", "=", "config", ".", "logit_scale", ")", "\n", "\n", "# By default, Faster RCNN second stage classifier uses Softmax loss", "\n", "# with anchor-wise outputs.", "\n", "", "config", "=", "loss_config", ".", "weighted_softmax", "\n", "return", "losses", ".", "WeightedSoftmaxClassificationLoss", "(", "\n", "logit_scale", "=", "config", ".", "logit_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.losses_builder._build_localization_loss": [[85, 119], ["loss_config.WhichOneof", "ValueError", "isinstance", "ValueError", "second.pytorch.core.losses.WeightedL2LocalizationLoss", "second.pytorch.core.losses.WeightedSmoothL1LocalizationLoss", "len", "len"], "function", ["None"], ["", "def", "_build_localization_loss", "(", "loss_config", ")", ":", "\n", "  ", "\"\"\"Builds a localization loss based on the loss config.\n\n  Args:\n    loss_config: A losses_pb2.LocalizationLoss object.\n\n  Returns:\n    Loss based on the config.\n\n  Raises:\n    ValueError: On invalid loss_config.\n  \"\"\"", "\n", "if", "not", "isinstance", "(", "loss_config", ",", "losses_pb2", ".", "LocalizationLoss", ")", ":", "\n", "    ", "raise", "ValueError", "(", "'loss_config not of type losses_pb2.LocalizationLoss.'", ")", "\n", "\n", "", "loss_type", "=", "loss_config", ".", "WhichOneof", "(", "'localization_loss'", ")", "\n", "\n", "if", "loss_type", "==", "'weighted_l2'", ":", "\n", "    ", "config", "=", "loss_config", ".", "weighted_l2", "\n", "if", "len", "(", "config", ".", "code_weight", ")", "==", "0", ":", "\n", "      ", "code_weight", "=", "None", "\n", "", "else", ":", "\n", "      ", "code_weight", "=", "config", ".", "code_weight", "\n", "", "return", "losses", ".", "WeightedL2LocalizationLoss", "(", "code_weight", ")", "\n", "\n", "", "if", "loss_type", "==", "'weighted_smooth_l1'", ":", "\n", "    ", "config", "=", "loss_config", ".", "weighted_smooth_l1", "\n", "if", "len", "(", "config", ".", "code_weight", ")", "==", "0", ":", "\n", "      ", "code_weight", "=", "None", "\n", "", "else", ":", "\n", "      ", "code_weight", "=", "config", ".", "code_weight", "\n", "", "return", "losses", ".", "WeightedSmoothL1LocalizationLoss", "(", "config", ".", "sigma", ",", "code_weight", ")", "\n", "\n", "", "raise", "ValueError", "(", "'Empty loss config.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.losses_builder._build_classification_loss": [[121, 178], ["loss_config.WhichOneof", "ValueError", "isinstance", "ValueError", "second.pytorch.core.losses.WeightedSigmoidClassificationLoss", "second.pytorch.core.losses.SigmoidFocalClassificationLoss", "second.pytorch.core.losses.SoftmaxFocalClassificationLoss", "second.pytorch.core.losses.WeightedSoftmaxClassificationLoss", "second.pytorch.core.losses.BootstrappedSigmoidClassificationLoss"], "function", ["None"], ["", "def", "_build_classification_loss", "(", "loss_config", ")", ":", "\n", "  ", "\"\"\"Builds a classification loss based on the loss config.\n\n  Args:\n    loss_config: A losses_pb2.ClassificationLoss object.\n\n  Returns:\n    Loss based on the config.\n\n  Raises:\n    ValueError: On invalid loss_config.\n  \"\"\"", "\n", "if", "not", "isinstance", "(", "loss_config", ",", "losses_pb2", ".", "ClassificationLoss", ")", ":", "\n", "    ", "raise", "ValueError", "(", "'loss_config not of type losses_pb2.ClassificationLoss.'", ")", "\n", "\n", "", "loss_type", "=", "loss_config", ".", "WhichOneof", "(", "'classification_loss'", ")", "\n", "\n", "if", "loss_type", "==", "'weighted_sigmoid'", ":", "\n", "    ", "return", "losses", ".", "WeightedSigmoidClassificationLoss", "(", ")", "\n", "\n", "", "if", "loss_type", "==", "'weighted_sigmoid_focal'", ":", "\n", "    ", "config", "=", "loss_config", ".", "weighted_sigmoid_focal", "\n", "# alpha = None", "\n", "# if config.HasField('alpha'):", "\n", "#   alpha = config.alpha", "\n", "if", "config", ".", "alpha", ">", "0", ":", "\n", "      ", "alpha", "=", "config", ".", "alpha", "\n", "", "else", ":", "\n", "      ", "alpha", "=", "None", "\n", "", "return", "losses", ".", "SigmoidFocalClassificationLoss", "(", "\n", "gamma", "=", "config", ".", "gamma", ",", "\n", "alpha", "=", "alpha", ")", "\n", "", "if", "loss_type", "==", "'weighted_softmax_focal'", ":", "\n", "    ", "config", "=", "loss_config", ".", "weighted_softmax_focal", "\n", "# alpha = None", "\n", "# if config.HasField('alpha'):", "\n", "#   alpha = config.alpha", "\n", "if", "config", ".", "alpha", ">", "0", ":", "\n", "      ", "alpha", "=", "config", ".", "alpha", "\n", "", "else", ":", "\n", "      ", "alpha", "=", "None", "\n", "", "return", "losses", ".", "SoftmaxFocalClassificationLoss", "(", "\n", "gamma", "=", "config", ".", "gamma", ",", "\n", "alpha", "=", "alpha", ")", "\n", "\n", "", "if", "loss_type", "==", "'weighted_softmax'", ":", "\n", "    ", "config", "=", "loss_config", ".", "weighted_softmax", "\n", "return", "losses", ".", "WeightedSoftmaxClassificationLoss", "(", "\n", "logit_scale", "=", "config", ".", "logit_scale", ")", "\n", "\n", "", "if", "loss_type", "==", "'bootstrapped_sigmoid'", ":", "\n", "    ", "config", "=", "loss_config", ".", "bootstrapped_sigmoid", "\n", "return", "losses", ".", "BootstrappedSigmoidClassificationLoss", "(", "\n", "alpha", "=", "config", ".", "alpha", ",", "\n", "bootstrap_type", "=", "(", "'hard'", "if", "config", ".", "hard_bootstrap", "else", "'soft'", ")", ")", "\n", "\n", "", "raise", "ValueError", "(", "'Empty loss config.'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.optimizer_builder.children": [[11, 14], ["list", "m.children"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.optimizer_builder.children"], ["def", "children", "(", "m", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "\"Get children of `m`.\"", "\n", "return", "list", "(", "m", ".", "children", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.optimizer_builder.num_children": [[16, 19], ["len", "optimizer_builder.children"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.optimizer_builder.children"], ["", "def", "num_children", "(", "m", ":", "nn", ".", "Module", ")", "->", "int", ":", "\n", "    ", "\"Get number of children modules in `m`.\"", "\n", "return", "len", "(", "children", "(", "m", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.optimizer_builder.build": [[25, 93], ["optimizer_config.WhichOneof", "functools.partial", "functools.partial", "functools.partial", "torchplus.train.fastai_optim.FastAIMixedOptim.create", "torchplus.train.fastai_optim.OptimWrapper.create", "ValueError", "ValueError", "get_layer_groups", "get_layer_groups"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.FastAIMixedOptim.create", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.FastAIMixedOptim.create"], ["def", "build", "(", "optimizer_config", ",", "net", ",", "name", "=", "None", ",", "mixed", "=", "False", ",", "loss_scale", "=", "512.0", ")", ":", "\n", "    ", "\"\"\"Create optimizer based on config.\n\n  Args:\n    optimizer_config: A Optimizer proto message.\n\n  Returns:\n    An optimizer and a list of variables for summary.\n\n  Raises:\n    ValueError: when using an unsupported input data type.\n  \"\"\"", "\n", "optimizer_type", "=", "optimizer_config", ".", "WhichOneof", "(", "'optimizer'", ")", "\n", "optimizer", "=", "None", "\n", "\n", "if", "optimizer_type", "==", "'rms_prop_optimizer'", ":", "\n", "        ", "config", "=", "optimizer_config", ".", "rms_prop_optimizer", "\n", "optimizer_func", "=", "partial", "(", "\n", "torch", ".", "optim", ".", "RMSprop", ",", "\n", "alpha", "=", "config", ".", "decay", ",", "\n", "momentum", "=", "config", ".", "momentum_optimizer_value", ",", "\n", "eps", "=", "config", ".", "epsilon", ")", "\n", "\n", "", "if", "optimizer_type", "==", "'momentum_optimizer'", ":", "\n", "        ", "config", "=", "optimizer_config", ".", "momentum_optimizer", "\n", "optimizer_func", "=", "partial", "(", "\n", "torch", ".", "optim", ".", "SGD", ",", "\n", "momentum", "=", "config", ".", "momentum_optimizer_value", ",", "\n", "eps", "=", "config", ".", "epsilon", ")", "\n", "#eps=1e-08)", "\n", "\n", "", "if", "optimizer_type", "==", "'adam_optimizer'", ":", "\n", "# attention!! this is the optimizer that is used in training, not the mixed one", "\n", "        ", "config", "=", "optimizer_config", ".", "adam_optimizer", "\n", "optimizer_func", "=", "partial", "(", "\n", "torch", ".", "optim", ".", "Adam", ",", "betas", "=", "(", "0.9", ",", "0.99", ")", ",", "amsgrad", "=", "config", ".", "amsgrad", ")", "\n", "\n", "# optimizer = OptimWrapper(optimizer, true_wd=optimizer_config.fixed_weight_decay, wd=config.weight_decay)", "\n", "", "if", "mixed", ":", "\n", "        ", "optimizer", "=", "FastAIMixedOptim", ".", "create", "(", "\n", "optimizer_func", ",", "\n", "3e-3", ",", "\n", "get_layer_groups", "(", "net", ")", ",", "\n", "net", ",", "\n", "loss_scale", "=", "loss_scale", ",", "\n", "wd", "=", "config", ".", "weight_decay", ",", "\n", "true_wd", "=", "optimizer_config", ".", "fixed_weight_decay", ",", "\n", "bn_wd", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "optimizer", "=", "OptimWrapper", ".", "create", "(", "\n", "optimizer_func", ",", "\n", "3e-3", ",", "\n", "get_layer_groups", "(", "net", ")", ",", "\n", "wd", "=", "config", ".", "weight_decay", ",", "\n", "true_wd", "=", "optimizer_config", ".", "fixed_weight_decay", ",", "\n", "bn_wd", "=", "True", ")", "\n", "\n", "", "if", "optimizer", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'Optimizer %s not supported.'", "%", "optimizer_type", ")", "\n", "\n", "", "if", "optimizer_config", ".", "use_moving_average", ":", "\n", "        ", "raise", "ValueError", "(", "'torch don\\'t support moving average'", ")", "\n", "", "if", "name", "is", "None", ":", "\n", "# assign a name to optimizer for checkpoint system", "\n", "        ", "optimizer", ".", "name", "=", "optimizer_type", "\n", "", "else", ":", "\n", "        ", "optimizer", ".", "name", "=", "name", "\n", "", "return", "optimizer", "\n", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.lr_scheduler_builder.build": [[4, 35], ["optimizer_config.WhichOneof", "lr_scheduler_builder._create_learning_rate_scheduler", "lr_scheduler_builder._create_learning_rate_scheduler", "lr_scheduler_builder._create_learning_rate_scheduler"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.lr_scheduler_builder._create_learning_rate_scheduler", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.lr_scheduler_builder._create_learning_rate_scheduler", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.lr_scheduler_builder._create_learning_rate_scheduler"], ["def", "build", "(", "optimizer_config", ",", "optimizer", ",", "total_step", ")", ":", "\n", "  ", "\"\"\"Create lr scheduler based on config. note that\n  lr_scheduler must accept a optimizer that has been restored.\n\n  Args:\n    optimizer_config: A Optimizer proto message.\n\n  Returns:\n    An optimizer and a list of variables for summary.\n\n  Raises:\n    ValueError: when using an unsupported input data type.\n  \"\"\"", "\n", "optimizer_type", "=", "optimizer_config", ".", "WhichOneof", "(", "'optimizer'", ")", "\n", "\n", "if", "optimizer_type", "==", "'rms_prop_optimizer'", ":", "\n", "    ", "config", "=", "optimizer_config", ".", "rms_prop_optimizer", "\n", "lr_scheduler", "=", "_create_learning_rate_scheduler", "(", "\n", "config", ".", "learning_rate", ",", "optimizer", ",", "total_step", "=", "total_step", ")", "\n", "\n", "", "if", "optimizer_type", "==", "'momentum_optimizer'", ":", "\n", "    ", "config", "=", "optimizer_config", ".", "momentum_optimizer", "\n", "lr_scheduler", "=", "_create_learning_rate_scheduler", "(", "\n", "config", ".", "learning_rate", ",", "optimizer", ",", "total_step", "=", "total_step", ")", "\n", "\n", "", "if", "optimizer_type", "==", "'adam_optimizer'", ":", "\n", "    ", "config", "=", "optimizer_config", ".", "adam_optimizer", "\n", "lr_scheduler", "=", "_create_learning_rate_scheduler", "(", "\n", "config", ".", "learning_rate", ",", "optimizer", ",", "total_step", "=", "total_step", ")", "\n", "\n", "", "return", "lr_scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.lr_scheduler_builder._create_learning_rate_scheduler": [[36, 69], ["learning_rate_config.WhichOneof", "torchplus.train.learning_schedules_fastai.LRSchedulerStep", "torchplus.train.learning_schedules_fastai.OneCycle", "ValueError", "lr_phases.append", "mom_phases.append", "list"], "function", ["None"], ["", "def", "_create_learning_rate_scheduler", "(", "learning_rate_config", ",", "optimizer", ",", "total_step", ")", ":", "\n", "  ", "\"\"\"Create optimizer learning rate scheduler based on config.\n\n  Args:\n    learning_rate_config: A LearningRate proto message.\n\n  Returns:\n    A learning rate.\n\n  Raises:\n    ValueError: when using an unsupported input data type.\n  \"\"\"", "\n", "lr_scheduler", "=", "None", "\n", "learning_rate_type", "=", "learning_rate_config", ".", "WhichOneof", "(", "'learning_rate'", ")", "\n", "if", "learning_rate_type", "==", "'multi_phase'", ":", "\n", "    ", "config", "=", "learning_rate_config", ".", "multi_phase", "\n", "lr_phases", "=", "[", "]", "\n", "mom_phases", "=", "[", "]", "\n", "for", "phase_cfg", "in", "config", ".", "phases", ":", "\n", "      ", "lr_phases", ".", "append", "(", "(", "phase_cfg", ".", "start", ",", "phase_cfg", ".", "lambda_func", ")", ")", "\n", "mom_phases", ".", "append", "(", "(", "phase_cfg", ".", "start", ",", "phase_cfg", ".", "momentum_lambda_func", ")", ")", "\n", "", "lr_scheduler", "=", "lsf", ".", "LRSchedulerStep", "(", "\n", "optimizer", ",", "total_step", ",", "lr_phases", ",", "mom_phases", ")", "\n", "\n", "", "if", "learning_rate_type", "==", "'one_cycle'", ":", "\n", "    ", "config", "=", "learning_rate_config", ".", "one_cycle", "\n", "lr_scheduler", "=", "lsf", ".", "OneCycle", "(", "\n", "optimizer", ",", "total_step", ",", "config", ".", "lr_max", ",", "list", "(", "config", ".", "moms", ")", ",", "config", ".", "div_factor", ",", "config", ".", "pct_start", ")", "\n", "\n", "", "if", "lr_scheduler", "is", "None", ":", "\n", "    ", "raise", "ValueError", "(", "'Learning_rate %s not supported.'", "%", "learning_rate_type", ")", "\n", "\n", "", "return", "lr_scheduler", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.second_builder.build": [[9, 86], ["list", "len", "second.pytorch.builder.losses_builder.build", "second.pytorch.models.voxelnet.VoxelNet", "isinstance", "ValueError", "grid_size[].tolist", "list", "list", "list", "list", "list", "list", "list"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build"], ["def", "build", "(", "model_cfg", ":", "second_pb2", ".", "VoxelNet", ",", "voxel_generator", ",", "\n", "target_assigner", ",", "measure_time", "=", "False", ")", "->", "VoxelNet", ":", "\n", "    ", "\"\"\"build second pytorch instance.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "model_cfg", ",", "second_pb2", ".", "VoxelNet", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'model_cfg not of type '", "'second_pb2.VoxelNet.'", ")", "\n", "", "vfe_num_filters", "=", "list", "(", "model_cfg", ".", "voxel_feature_extractor", ".", "num_filters", ")", "\n", "vfe_with_distance", "=", "model_cfg", ".", "voxel_feature_extractor", ".", "with_distance", "\n", "grid_size", "=", "voxel_generator", ".", "grid_size", "\n", "dense_shape", "=", "[", "1", "]", "+", "grid_size", "[", ":", ":", "-", "1", "]", ".", "tolist", "(", ")", "+", "[", "vfe_num_filters", "[", "-", "1", "]", "]", "\n", "num_class", "=", "len", "(", "target_assigner", ".", "classes", ")", "\n", "\n", "num_input_features", "=", "model_cfg", ".", "num_point_features", "\n", "if", "model_cfg", ".", "without_reflectivity", ":", "\n", "        ", "num_input_features", "=", "3", "\n", "", "loss_norm_type_dict", "=", "{", "\n", "0", ":", "LossNormType", ".", "NormByNumExamples", ",", "\n", "1", ":", "LossNormType", ".", "NormByNumPositives", ",", "\n", "2", ":", "LossNormType", ".", "NormByNumPosNeg", ",", "\n", "}", "\n", "loss_norm_type", "=", "loss_norm_type_dict", "[", "model_cfg", ".", "loss_norm_type", "]", "\n", "\n", "losses", "=", "losses_builder", ".", "build", "(", "model_cfg", ".", "loss", ")", "\n", "encode_rad_error_by_sin", "=", "model_cfg", ".", "encode_rad_error_by_sin", "\n", "cls_loss_ftor", ",", "loc_loss_ftor", ",", "cls_weight", ",", "loc_weight", ",", "_", "=", "losses", "\n", "pos_cls_weight", "=", "model_cfg", ".", "pos_class_weight", "\n", "neg_cls_weight", "=", "model_cfg", ".", "neg_class_weight", "\n", "direction_loss_weight", "=", "model_cfg", ".", "direction_loss_weight", "\n", "\n", "net", "=", "VoxelNet", "(", "\n", "dense_shape", ",", "\n", "num_class", "=", "num_class", ",", "\n", "vfe_class_name", "=", "model_cfg", ".", "voxel_feature_extractor", ".", "module_class_name", ",", "\n", "vfe_num_filters", "=", "vfe_num_filters", ",", "\n", "middle_class_name", "=", "model_cfg", ".", "middle_feature_extractor", ".", "module_class_name", ",", "\n", "middle_num_input_features", "=", "model_cfg", ".", "middle_feature_extractor", ".", "num_input_features", ",", "\n", "middle_num_filters_d1", "=", "list", "(", "\n", "model_cfg", ".", "middle_feature_extractor", ".", "num_filters_down1", ")", ",", "\n", "middle_num_filters_d2", "=", "list", "(", "\n", "model_cfg", ".", "middle_feature_extractor", ".", "num_filters_down2", ")", ",", "\n", "rpn_class_name", "=", "model_cfg", ".", "rpn", ".", "module_class_name", ",", "\n", "rpn_num_input_features", "=", "model_cfg", ".", "rpn", ".", "num_input_features", ",", "\n", "rpn_layer_nums", "=", "list", "(", "model_cfg", ".", "rpn", ".", "layer_nums", ")", ",", "\n", "rpn_layer_strides", "=", "list", "(", "model_cfg", ".", "rpn", ".", "layer_strides", ")", ",", "\n", "rpn_num_filters", "=", "list", "(", "model_cfg", ".", "rpn", ".", "num_filters", ")", ",", "\n", "rpn_upsample_strides", "=", "list", "(", "model_cfg", ".", "rpn", ".", "upsample_strides", ")", ",", "\n", "rpn_num_upsample_filters", "=", "list", "(", "model_cfg", ".", "rpn", ".", "num_upsample_filters", ")", ",", "\n", "use_norm", "=", "True", ",", "\n", "use_voxel_classifier", "=", "model_cfg", ".", "use_aux_classifier", ",", "\n", "use_rotate_nms", "=", "model_cfg", ".", "use_rotate_nms", ",", "\n", "multiclass_nms", "=", "model_cfg", ".", "use_multi_class_nms", ",", "\n", "nms_score_threshold", "=", "model_cfg", ".", "nms_score_threshold", ",", "\n", "nms_pre_max_size", "=", "model_cfg", ".", "nms_pre_max_size", ",", "\n", "nms_post_max_size", "=", "model_cfg", ".", "nms_post_max_size", ",", "\n", "nms_iou_threshold", "=", "model_cfg", ".", "nms_iou_threshold", ",", "\n", "use_sigmoid_score", "=", "model_cfg", ".", "use_sigmoid_score", ",", "\n", "use_sparse_rpn", "=", "False", ",", "\n", "encode_background_as_zeros", "=", "model_cfg", ".", "encode_background_as_zeros", ",", "\n", "use_direction_classifier", "=", "model_cfg", ".", "use_direction_classifier", ",", "\n", "use_bev", "=", "model_cfg", ".", "use_bev", ",", "\n", "num_input_features", "=", "num_input_features", ",", "\n", "num_groups", "=", "model_cfg", ".", "rpn", ".", "num_groups", ",", "\n", "use_groupnorm", "=", "model_cfg", ".", "rpn", ".", "use_groupnorm", ",", "\n", "with_distance", "=", "vfe_with_distance", ",", "\n", "cls_loss_weight", "=", "cls_weight", ",", "\n", "loc_loss_weight", "=", "loc_weight", ",", "\n", "pos_cls_weight", "=", "pos_cls_weight", ",", "\n", "neg_cls_weight", "=", "neg_cls_weight", ",", "\n", "direction_loss_weight", "=", "direction_loss_weight", ",", "\n", "loss_norm_type", "=", "loss_norm_type", ",", "\n", "encode_rad_error_by_sin", "=", "encode_rad_error_by_sin", ",", "\n", "loc_loss_ftor", "=", "loc_loss_ftor", ",", "\n", "cls_loss_ftor", "=", "cls_loss_ftor", ",", "\n", "target_assigner", "=", "target_assigner", ",", "\n", "measure_time", "=", "measure_time", ",", "\n", ")", "\n", "return", "net", "\n", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.similarity_calculator_builder.build": [[7, 32], ["similarity_config.WhichOneof", "second.core.region_similarity.RotateIouSimilarity", "second.core.region_similarity.NearestIouSimilarity", "second.core.region_similarity.DistanceSimilarity", "ValueError"], "function", ["None"], ["def", "build", "(", "similarity_config", ")", ":", "\n", "    ", "\"\"\"Create optimizer based on config.\n\n    Args:\n        optimizer_config: A Optimizer proto message.\n\n    Returns:\n        An optimizer and a list of variables for summary.\n\n    Raises:\n        ValueError: when using an unsupported input data type.\n    \"\"\"", "\n", "similarity_type", "=", "similarity_config", ".", "WhichOneof", "(", "'region_similarity'", ")", "\n", "if", "similarity_type", "==", "'rotate_iou_similarity'", ":", "\n", "        ", "return", "region_similarity", ".", "RotateIouSimilarity", "(", ")", "\n", "", "elif", "similarity_type", "==", "'nearest_iou_similarity'", ":", "\n", "        ", "return", "region_similarity", ".", "NearestIouSimilarity", "(", ")", "\n", "", "elif", "similarity_type", "==", "'distance_similarity'", ":", "\n", "        ", "cfg", "=", "similarity_config", ".", "distance_similarity", "\n", "return", "region_similarity", ".", "DistanceSimilarity", "(", "\n", "distance_norm", "=", "cfg", ".", "distance_norm", ",", "\n", "with_rotation", "=", "cfg", ".", "with_rotation", ",", "\n", "rotation_alpha", "=", "cfg", ".", "rotation_alpha", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"unknown similarity type\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.voxel_builder.build": [[7, 29], ["spconv.utils.VoxelGenerator", "isinstance", "ValueError", "list", "list"], "function", ["None"], ["def", "build", "(", "voxel_config", ")", ":", "\n", "    ", "\"\"\"Builds a tensor dictionary based on the InputReader config.\n\n    Args:\n        input_reader_config: A input_reader_pb2.InputReader object.\n\n    Returns:\n        A tensor dict based on the input_reader_config.\n\n    Raises:\n        ValueError: On invalid input reader proto.\n        ValueError: If no input paths are specified.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "voxel_config", ",", "(", "voxel_generator_pb2", ".", "VoxelGenerator", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'input_reader_config not of type '", "\n", "'input_reader_pb2.InputReader.'", ")", "\n", "", "voxel_generator", "=", "VoxelGenerator", "(", "\n", "voxel_size", "=", "list", "(", "voxel_config", ".", "voxel_size", ")", ",", "\n", "point_cloud_range", "=", "list", "(", "voxel_config", ".", "point_cloud_range", ")", ",", "\n", "max_num_points", "=", "voxel_config", ".", "max_number_of_points_per_voxel", ",", "\n", "max_voxels", "=", "20000", ")", "\n", "return", "voxel_generator", "\n", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.target_assigner_builder.build": [[8, 41], ["second.builder.similarity_calculator_builder.build", "second.core.target_assigner.TargetAssigner", "isinstance", "ValueError", "second.builder.anchor_generator_builder.build", "anchor_generators.append"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build"], ["def", "build", "(", "target_assigner_config", ",", "bv_range", ",", "box_coder", ")", ":", "\n", "    ", "\"\"\"Builds a tensor dictionary based on the InputReader config.\n\n    Args:\n        input_reader_config: A input_reader_pb2.InputReader object.\n\n    Returns:\n        A tensor dict based on the input_reader_config.\n\n    Raises:\n        ValueError: On invalid input reader proto.\n        ValueError: If no input paths are specified.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "target_assigner_config", ",", "(", "target_pb2", ".", "TargetAssigner", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'input_reader_config not of type '", "\n", "'input_reader_pb2.InputReader.'", ")", "\n", "", "anchor_cfg", "=", "target_assigner_config", ".", "anchor_generators", "\n", "anchor_generators", "=", "[", "]", "\n", "for", "a_cfg", "in", "anchor_cfg", ":", "\n", "        ", "anchor_generator", "=", "anchor_generator_builder", ".", "build", "(", "a_cfg", ")", "\n", "anchor_generators", ".", "append", "(", "anchor_generator", ")", "\n", "", "similarity_calc", "=", "similarity_calculator_builder", ".", "build", "(", "\n", "target_assigner_config", ".", "region_similarity_calculator", ")", "\n", "positive_fraction", "=", "target_assigner_config", ".", "sample_positive_fraction", "\n", "if", "positive_fraction", "<", "0", ":", "\n", "        ", "positive_fraction", "=", "None", "\n", "", "target_assigner", "=", "TargetAssigner", "(", "\n", "box_coder", "=", "box_coder", ",", "\n", "anchor_generators", "=", "anchor_generators", ",", "\n", "region_similarity_calculator", "=", "similarity_calc", ",", "\n", "positive_fraction", "=", "positive_fraction", ",", "\n", "sample_size", "=", "target_assigner_config", ".", "sample_size", ")", "\n", "return", "target_assigner", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.dataset_builder.build": [[9, 90], ["int", "all", "functools.partial", "second.data.dataset.KittiDataset", "isinstance", "ValueError", "len", "second.builder.dbsampler_builder.build", "len", "second.builder.dbsampler_builder.build", "list", "list", "list", "list", "list"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build"], ["def", "build", "(", "input_reader_config", ",", "\n", "model_config", ",", "\n", "training", ",", "\n", "voxel_generator", ",", "\n", "target_assigner", "=", "None", ")", ":", "\n", "    ", "\"\"\"Builds a tensor dictionary based on the InputReader config.\n\n    Args:\n        input_reader_config: A input_reader_pb2.InputReader object.\n\n    Returns:\n        A tensor dict based on the input_reader_config.\n\n    Raises:\n        ValueError: On invalid input reader proto.\n        ValueError: If no input paths are specified.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "input_reader_config", ",", "input_reader_pb2", ".", "InputReader", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'input_reader_config not of type '", "\n", "'input_reader_pb2.InputReader.'", ")", "\n", "", "generate_bev", "=", "model_config", ".", "use_bev", "\n", "without_reflectivity", "=", "model_config", ".", "without_reflectivity", "\n", "num_point_features", "=", "model_config", ".", "num_point_features", "\n", "out_size_factor", "=", "model_config", ".", "rpn", ".", "layer_strides", "[", "0", "]", "/", "model_config", ".", "rpn", ".", "upsample_strides", "[", "0", "]", "\n", "out_size_factor", "*=", "model_config", ".", "middle_feature_extractor", ".", "downsample_factor", "\n", "out_size_factor", "=", "int", "(", "out_size_factor", ")", "\n", "assert", "out_size_factor", ">", "0", "\n", "\n", "cfg", "=", "input_reader_config", "\n", "db_sampler_cfg", "=", "input_reader_config", ".", "database_sampler", "\n", "db_sampler", "=", "None", "\n", "if", "len", "(", "db_sampler_cfg", ".", "sample_groups", ")", ">", "0", ":", "# enable sample", "\n", "        ", "db_sampler", "=", "dbsampler_builder", ".", "build", "(", "db_sampler_cfg", ")", "\n", "", "u_db_sampler_cfg", "=", "input_reader_config", ".", "unlabeled_database_sampler", "\n", "u_db_sampler", "=", "None", "\n", "if", "len", "(", "u_db_sampler_cfg", ".", "sample_groups", ")", ">", "0", ":", "# enable sample", "\n", "        ", "u_db_sampler", "=", "dbsampler_builder", ".", "build", "(", "u_db_sampler_cfg", ")", "\n", "", "grid_size", "=", "voxel_generator", ".", "grid_size", "\n", "# [352, 400]", "\n", "feature_map_size", "=", "grid_size", "[", ":", "2", "]", "//", "out_size_factor", "\n", "feature_map_size", "=", "[", "*", "feature_map_size", ",", "1", "]", "[", ":", ":", "-", "1", "]", "\n", "assert", "all", "(", "[", "n", "!=", "''", "for", "n", "in", "target_assigner", ".", "classes", "]", ")", ",", "\"you must specify class_name in anchor_generators.\"", "\n", "prep_func", "=", "partial", "(", "\n", "prep_pointcloud", ",", "\n", "root_path", "=", "cfg", ".", "kitti_root_path", ",", "\n", "class_names", "=", "target_assigner", ".", "classes", ",", "\n", "voxel_generator", "=", "voxel_generator", ",", "\n", "target_assigner", "=", "target_assigner", ",", "\n", "training", "=", "training", ",", "\n", "max_voxels", "=", "cfg", ".", "max_number_of_voxels", ",", "\n", "remove_outside_points", "=", "False", ",", "\n", "remove_unknown", "=", "cfg", ".", "remove_unknown_examples", ",", "\n", "create_targets", "=", "training", ",", "\n", "shuffle_points", "=", "cfg", ".", "shuffle_points", ",", "\n", "gt_rotation_noise", "=", "list", "(", "cfg", ".", "groundtruth_rotation_uniform_noise", ")", ",", "\n", "gt_loc_noise_std", "=", "list", "(", "cfg", ".", "groundtruth_localization_noise_std", ")", ",", "\n", "global_rotation_noise", "=", "list", "(", "cfg", ".", "global_rotation_uniform_noise", ")", ",", "\n", "global_scaling_noise", "=", "list", "(", "cfg", ".", "global_scaling_uniform_noise", ")", ",", "\n", "global_random_rot_range", "=", "list", "(", "\n", "cfg", ".", "global_random_rotation_range_per_object", ")", ",", "\n", "db_sampler", "=", "db_sampler", ",", "\n", "unlabeled_db_sampler", "=", "u_db_sampler", ",", "\n", "generate_bev", "=", "generate_bev", ",", "\n", "without_reflectivity", "=", "without_reflectivity", ",", "\n", "num_point_features", "=", "num_point_features", ",", "\n", "anchor_area_threshold", "=", "cfg", ".", "anchor_area_threshold", ",", "\n", "gt_points_drop", "=", "cfg", ".", "groundtruth_points_drop_percentage", ",", "\n", "gt_drop_max_keep", "=", "cfg", ".", "groundtruth_drop_max_keep_points", ",", "\n", "remove_points_after_sample", "=", "cfg", ".", "remove_points_after_sample", ",", "\n", "remove_environment", "=", "cfg", ".", "remove_environment", ",", "\n", "use_group_id", "=", "cfg", ".", "use_group_id", ",", "\n", "out_size_factor", "=", "out_size_factor", ")", "\n", "dataset", "=", "KittiDataset", "(", "\n", "info_path", "=", "cfg", ".", "kitti_info_path", ",", "\n", "root_path", "=", "cfg", ".", "kitti_root_path", ",", "\n", "num_point_features", "=", "num_point_features", ",", "\n", "target_assigner", "=", "target_assigner", ",", "\n", "feature_map_size", "=", "feature_map_size", ",", "\n", "prep_func", "=", "prep_func", ")", "\n", "\n", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.anchor_generator_builder.build": [[8, 45], ["anchor_config.WhichOneof", "second.core.anchor_generator.AnchorGeneratorStride", "second.core.anchor_generator.AnchorGeneratorRange", "ValueError", "list", "list", "list", "list", "list", "list", "list"], "function", ["None"], ["def", "build", "(", "anchor_config", ")", ":", "\n", "    ", "\"\"\"Create optimizer based on config.\n\n  Args:\n    optimizer_config: A Optimizer proto message.\n\n  Returns:\n    An optimizer and a list of variables for summary.\n\n  Raises:\n    ValueError: when using an unsupported input data type.\n  \"\"\"", "\n", "ag_type", "=", "anchor_config", ".", "WhichOneof", "(", "'anchor_generator'", ")", "\n", "\n", "if", "ag_type", "==", "'anchor_generator_stride'", ":", "\n", "        ", "config", "=", "anchor_config", ".", "anchor_generator_stride", "\n", "ag", "=", "AnchorGeneratorStride", "(", "\n", "sizes", "=", "list", "(", "config", ".", "sizes", ")", ",", "\n", "anchor_strides", "=", "list", "(", "config", ".", "strides", ")", ",", "\n", "anchor_offsets", "=", "list", "(", "config", ".", "offsets", ")", ",", "\n", "rotations", "=", "list", "(", "config", ".", "rotations", ")", ",", "\n", "match_threshold", "=", "config", ".", "matched_threshold", ",", "\n", "unmatch_threshold", "=", "config", ".", "unmatched_threshold", ",", "\n", "class_name", "=", "config", ".", "class_name", ")", "\n", "return", "ag", "\n", "", "elif", "ag_type", "==", "'anchor_generator_range'", ":", "\n", "        ", "config", "=", "anchor_config", ".", "anchor_generator_range", "\n", "ag", "=", "AnchorGeneratorRange", "(", "\n", "sizes", "=", "list", "(", "config", ".", "sizes", ")", ",", "\n", "anchor_ranges", "=", "list", "(", "config", ".", "anchor_ranges", ")", ",", "\n", "rotations", "=", "list", "(", "config", ".", "rotations", ")", ",", "\n", "match_threshold", "=", "config", ".", "matched_threshold", ",", "\n", "unmatch_threshold", "=", "config", ".", "unmatched_threshold", ",", "\n", "class_name", "=", "config", ".", "class_name", ")", "\n", "return", "ag", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\" unknown anchor generator type\"", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.dbsampler_builder.build": [[9, 28], ["list", "second.core.preprocess.DataBasePreprocessor", "list", "second.core.sample_ops.DataBaseSamplerV2", "second.builder.preprocess_builder.build_db_preprocess", "dict", "open", "pickle.load", "len"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.preprocess_builder.build_db_preprocess", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.Settings.load"], ["def", "build", "(", "sampler_config", ")", ":", "\n", "    ", "cfg", "=", "sampler_config", "\n", "groups", "=", "list", "(", "cfg", ".", "sample_groups", ")", "\n", "prepors", "=", "[", "\n", "preprocess_builder", ".", "build_db_preprocess", "(", "c", ")", "\n", "for", "c", "in", "cfg", ".", "database_prep_steps", "\n", "]", "\n", "db_prepor", "=", "DataBasePreprocessor", "(", "prepors", ")", "\n", "rate", "=", "cfg", ".", "rate", "\n", "grot_range", "=", "cfg", ".", "global_random_rotation_range_per_object", "\n", "groups", "=", "[", "dict", "(", "g", ".", "name_to_max_num", ")", "for", "g", "in", "groups", "]", "\n", "info_path", "=", "cfg", ".", "database_info_path", "\n", "with", "open", "(", "info_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "db_infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "grot_range", "=", "list", "(", "grot_range", ")", "\n", "if", "len", "(", "grot_range", ")", "==", "0", ":", "\n", "        ", "grot_range", "=", "None", "\n", "", "sampler", "=", "DataBaseSamplerV2", "(", "db_infos", ",", "groups", ",", "db_prepor", ",", "rate", ",", "grot_range", ")", "\n", "return", "sampler", "\n", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.builder.preprocess_builder.build_db_preprocess": [[3, 14], ["db_prep_config.WhichOneof", "second.DBFilterByDifficulty", "list", "second.DBFilterByMinNumPoint", "ValueError", "dict"], "function", ["None"], ["def", "build_db_preprocess", "(", "db_prep_config", ")", ":", "\n", "    ", "prep_type", "=", "db_prep_config", ".", "WhichOneof", "(", "'database_preprocessing_step'", ")", "\n", "\n", "if", "prep_type", "==", "'filter_by_difficulty'", ":", "\n", "        ", "cfg", "=", "db_prep_config", ".", "filter_by_difficulty", "\n", "return", "prep", ".", "DBFilterByDifficulty", "(", "list", "(", "cfg", ".", "removed_difficulties", ")", ")", "\n", "", "elif", "prep_type", "==", "'filter_by_min_num_points'", ":", "\n", "        ", "cfg", "=", "db_prep_config", ".", "filter_by_min_num_points", "\n", "return", "prep", ".", "DBFilterByMinNumPoint", "(", "dict", "(", "cfg", ".", "min_num_point_pairs", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"unknown database prep type\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.GroundBox3dCoderTorch.encode_torch": [[9, 11], ["second.pytorch.core.box_torch_ops.second_box_encode"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.second_box_encode"], ["    ", "def", "encode_torch", "(", "self", ",", "boxes", ",", "anchors", ")", ":", "\n", "        ", "return", "box_torch_ops", ".", "second_box_encode", "(", "boxes", ",", "anchors", ",", "self", ".", "vec_encode", ",", "self", ".", "linear_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.GroundBox3dCoderTorch.decode_torch": [[12, 14], ["second.pytorch.core.box_torch_ops.second_box_decode"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.second_box_decode"], ["", "def", "decode_torch", "(", "self", ",", "boxes", ",", "anchors", ")", ":", "\n", "        ", "return", "box_torch_ops", ".", "second_box_decode", "(", "boxes", ",", "anchors", ",", "self", ".", "vec_encode", ",", "self", ".", "linear_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BevBoxCoderTorch.encode_torch": [[18, 22], ["second.pytorch.core.box_torch_ops.bev_box_encode"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.bev_box_encode"], ["    ", "def", "encode_torch", "(", "self", ",", "boxes", ",", "anchors", ")", ":", "\n", "        ", "anchors", "=", "anchors", "[", "...", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n", "boxes", "=", "boxes", "[", "...", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n", "return", "box_torch_ops", ".", "bev_box_encode", "(", "boxes", ",", "anchors", ",", "self", ".", "vec_encode", ",", "self", ".", "linear_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BevBoxCoderTorch.decode_torch": [[23, 29], ["second.pytorch.core.box_torch_ops.bev_box_decode", "torch.full", "torch.full", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.bev_box_decode"], ["", "def", "decode_torch", "(", "self", ",", "encodings", ",", "anchors", ")", ":", "\n", "        ", "anchors", "=", "anchors", "[", "...", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n", "ret", "=", "box_torch_ops", ".", "bev_box_decode", "(", "encodings", ",", "anchors", ",", "self", ".", "vec_encode", ",", "self", ".", "linear_dim", ")", "\n", "z_fixed", "=", "torch", ".", "full", "(", "[", "*", "ret", ".", "shape", "[", ":", "-", "1", "]", ",", "1", "]", ",", "self", ".", "z_fixed", ",", "dtype", "=", "ret", ".", "dtype", ",", "device", "=", "ret", ".", "device", ")", "\n", "h_fixed", "=", "torch", ".", "full", "(", "[", "*", "ret", ".", "shape", "[", ":", "-", "1", "]", ",", "1", "]", ",", "self", ".", "h_fixed", ",", "dtype", "=", "ret", ".", "dtype", ",", "device", "=", "ret", ".", "device", ")", "\n", "return", "torch", ".", "cat", "(", "[", "ret", "[", "...", ",", ":", "2", "]", ",", "z_fixed", ",", "ret", "[", "...", ",", "2", ":", "4", "]", ",", "h_fixed", ",", "ret", "[", "...", ",", "4", ":", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_torch_ops.second_box_encode": [[15, 48], ["torch.split", "torch.split", "torch.sqrt", "torch.log", "torch.log", "torch.log", "torch.cos", "torch.sin", "torch.cos", "torch.sin", "torch.cat", "torch.cat"], "function", ["None"], ["def", "second_box_encode", "(", "boxes", ",", "anchors", ",", "encode_angle_to_vector", "=", "False", ",", "smooth_dim", "=", "False", ")", ":", "\n", "    ", "\"\"\"box encode for VoxelNet\n    Args:\n        boxes ([N, 7] Tensor): normal boxes: x, y, z, l, w, h, r\n        anchors ([N, 7] Tensor): anchors\n    \"\"\"", "\n", "xa", ",", "ya", ",", "za", ",", "wa", ",", "la", ",", "ha", ",", "ra", "=", "torch", ".", "split", "(", "anchors", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "xg", ",", "yg", ",", "zg", ",", "wg", ",", "lg", ",", "hg", ",", "rg", "=", "torch", ".", "split", "(", "boxes", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "za", "=", "za", "+", "ha", "/", "2", "\n", "zg", "=", "zg", "+", "hg", "/", "2", "\n", "diagonal", "=", "torch", ".", "sqrt", "(", "la", "**", "2", "+", "wa", "**", "2", ")", "\n", "xt", "=", "(", "xg", "-", "xa", ")", "/", "diagonal", "\n", "yt", "=", "(", "yg", "-", "ya", ")", "/", "diagonal", "\n", "zt", "=", "(", "zg", "-", "za", ")", "/", "ha", "\n", "if", "smooth_dim", ":", "\n", "        ", "lt", "=", "lg", "/", "la", "-", "1", "\n", "wt", "=", "wg", "/", "wa", "-", "1", "\n", "ht", "=", "hg", "/", "ha", "-", "1", "\n", "", "else", ":", "\n", "        ", "lt", "=", "torch", ".", "log", "(", "lg", "/", "la", ")", "\n", "wt", "=", "torch", ".", "log", "(", "wg", "/", "wa", ")", "\n", "ht", "=", "torch", ".", "log", "(", "hg", "/", "ha", ")", "\n", "", "if", "encode_angle_to_vector", ":", "\n", "        ", "rgx", "=", "torch", ".", "cos", "(", "rg", ")", "\n", "rgy", "=", "torch", ".", "sin", "(", "rg", ")", "\n", "rax", "=", "torch", ".", "cos", "(", "ra", ")", "\n", "ray", "=", "torch", ".", "sin", "(", "ra", ")", "\n", "rtx", "=", "rgx", "-", "rax", "\n", "rty", "=", "rgy", "-", "ray", "\n", "return", "torch", ".", "cat", "(", "[", "xt", ",", "yt", ",", "zt", ",", "wt", ",", "lt", ",", "ht", ",", "rtx", ",", "rty", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "rt", "=", "rg", "-", "ra", "\n", "return", "torch", ".", "cat", "(", "[", "xt", ",", "yt", ",", "zt", ",", "wt", ",", "lt", ",", "ht", ",", "rt", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_torch_ops.second_box_decode": [[53, 92], ["torch.split", "torch.sqrt", "torch.cat", "torch.split", "torch.split", "torch.cos", "torch.sin", "torch.atan2", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["", "", "def", "second_box_decode", "(", "box_encodings", ",", "anchors", ",", "encode_angle_to_vector", "=", "False", ",", "smooth_dim", "=", "False", ")", ":", "\n", "    ", "\"\"\"box decode for VoxelNet in lidar\n    Args:\n        boxes ([N, 7] Tensor): normal boxes: x, y, z, w, l, h, r\n        anchors ([N, 7] Tensor): anchors\n    \"\"\"", "\n", "xa", ",", "ya", ",", "za", ",", "wa", ",", "la", ",", "ha", ",", "ra", "=", "torch", ".", "split", "(", "anchors", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "if", "encode_angle_to_vector", ":", "\n", "        ", "xt", ",", "yt", ",", "zt", ",", "wt", ",", "lt", ",", "ht", ",", "rtx", ",", "rty", "=", "torch", ".", "split", "(", "\n", "box_encodings", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "else", ":", "\n", "        ", "xt", ",", "yt", ",", "zt", ",", "wt", ",", "lt", ",", "ht", ",", "rt", "=", "torch", ".", "split", "(", "box_encodings", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# xt, yt, zt, wt, lt, ht, rt = torch.split(box_encodings, 1, dim=-1)", "\n", "", "za", "=", "za", "+", "ha", "/", "2", "\n", "diagonal", "=", "torch", ".", "sqrt", "(", "la", "**", "2", "+", "wa", "**", "2", ")", "\n", "xg", "=", "xt", "*", "diagonal", "+", "xa", "\n", "yg", "=", "yt", "*", "diagonal", "+", "ya", "\n", "zg", "=", "zt", "*", "ha", "+", "za", "\n", "if", "smooth_dim", ":", "\n", "        ", "lg", "=", "(", "lt", "+", "1", ")", "*", "la", "\n", "wg", "=", "(", "wt", "+", "1", ")", "*", "wa", "\n", "hg", "=", "(", "ht", "+", "1", ")", "*", "ha", "\n", "", "else", ":", "\n", "\n", "        ", "lg", "=", "torch", ".", "exp", "(", "lt", ")", "*", "la", "\n", "wg", "=", "torch", ".", "exp", "(", "wt", ")", "*", "wa", "\n", "hg", "=", "torch", ".", "exp", "(", "ht", ")", "*", "ha", "\n", "", "if", "encode_angle_to_vector", ":", "\n", "        ", "rax", "=", "torch", ".", "cos", "(", "ra", ")", "\n", "ray", "=", "torch", ".", "sin", "(", "ra", ")", "\n", "rgx", "=", "rtx", "+", "rax", "\n", "rgy", "=", "rty", "+", "ray", "\n", "rg", "=", "torch", ".", "atan2", "(", "rgy", ",", "rgx", ")", "\n", "", "else", ":", "\n", "        ", "rg", "=", "rt", "+", "ra", "\n", "", "zg", "=", "zg", "-", "hg", "/", "2", "\n", "return", "torch", ".", "cat", "(", "[", "xg", ",", "yg", ",", "zg", ",", "wg", ",", "lg", ",", "hg", ",", "rg", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_torch_ops.bev_box_encode": [[93, 121], ["torch.split", "torch.split", "torch.sqrt", "torch.log", "torch.log", "torch.cos", "torch.sin", "torch.cos", "torch.sin", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "bev_box_encode", "(", "boxes", ",", "anchors", ",", "encode_angle_to_vector", "=", "False", ",", "smooth_dim", "=", "False", ")", ":", "\n", "    ", "\"\"\"box encode for VoxelNet\n    Args:\n        boxes ([N, 7] Tensor): normal boxes: x, y, z, l, w, h, r\n        anchors ([N, 7] Tensor): anchors\n    \"\"\"", "\n", "xa", ",", "ya", ",", "wa", ",", "la", ",", "ra", "=", "torch", ".", "split", "(", "anchors", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "xg", ",", "yg", ",", "wg", ",", "lg", ",", "rg", "=", "torch", ".", "split", "(", "boxes", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "diagonal", "=", "torch", ".", "sqrt", "(", "la", "**", "2", "+", "wa", "**", "2", ")", "\n", "xt", "=", "(", "xg", "-", "xa", ")", "/", "diagonal", "\n", "yt", "=", "(", "yg", "-", "ya", ")", "/", "diagonal", "\n", "if", "smooth_dim", ":", "\n", "        ", "lt", "=", "lg", "/", "la", "-", "1", "\n", "wt", "=", "wg", "/", "wa", "-", "1", "\n", "", "else", ":", "\n", "        ", "lt", "=", "torch", ".", "log", "(", "lg", "/", "la", ")", "\n", "wt", "=", "torch", ".", "log", "(", "wg", "/", "wa", ")", "\n", "", "if", "encode_angle_to_vector", ":", "\n", "        ", "rgx", "=", "torch", ".", "cos", "(", "rg", ")", "\n", "rgy", "=", "torch", ".", "sin", "(", "rg", ")", "\n", "rax", "=", "torch", ".", "cos", "(", "ra", ")", "\n", "ray", "=", "torch", ".", "sin", "(", "ra", ")", "\n", "rtx", "=", "rgx", "-", "rax", "\n", "rty", "=", "rgy", "-", "ray", "\n", "return", "torch", ".", "cat", "(", "[", "xt", ",", "yt", ",", "wt", ",", "lt", ",", "rtx", ",", "rty", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "rt", "=", "rg", "-", "ra", "\n", "return", "torch", ".", "cat", "(", "[", "xt", ",", "yt", ",", "wt", ",", "lt", ",", "rt", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_torch_ops.bev_box_decode": [[126, 159], ["torch.split", "torch.sqrt", "torch.cat", "torch.split", "torch.split", "torch.cos", "torch.sin", "torch.atan2", "torch.exp", "torch.exp"], "function", ["None"], ["", "", "def", "bev_box_decode", "(", "box_encodings", ",", "anchors", ",", "encode_angle_to_vector", "=", "False", ",", "smooth_dim", "=", "False", ")", ":", "\n", "    ", "\"\"\"box decode for VoxelNet in lidar\n    Args:\n        boxes ([N, 7] Tensor): normal boxes: x, y, z, w, l, h, r\n        anchors ([N, 7] Tensor): anchors\n    \"\"\"", "\n", "xa", ",", "ya", ",", "wa", ",", "la", ",", "ra", "=", "torch", ".", "split", "(", "anchors", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "if", "encode_angle_to_vector", ":", "\n", "        ", "xt", ",", "yt", ",", "wt", ",", "lt", ",", "rtx", ",", "rty", "=", "torch", ".", "split", "(", "\n", "box_encodings", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "else", ":", "\n", "        ", "xt", ",", "yt", ",", "wt", ",", "lt", ",", "rt", "=", "torch", ".", "split", "(", "box_encodings", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# xt, yt, zt, wt, lt, ht, rt = torch.split(box_encodings, 1, dim=-1)", "\n", "", "diagonal", "=", "torch", ".", "sqrt", "(", "la", "**", "2", "+", "wa", "**", "2", ")", "\n", "xg", "=", "xt", "*", "diagonal", "+", "xa", "\n", "yg", "=", "yt", "*", "diagonal", "+", "ya", "\n", "if", "smooth_dim", ":", "\n", "        ", "lg", "=", "(", "lt", "+", "1", ")", "*", "la", "\n", "wg", "=", "(", "wt", "+", "1", ")", "*", "wa", "\n", "", "else", ":", "\n", "        ", "lg", "=", "torch", ".", "exp", "(", "lt", ")", "*", "la", "\n", "wg", "=", "torch", ".", "exp", "(", "wt", ")", "*", "wa", "\n", "", "if", "encode_angle_to_vector", ":", "\n", "        ", "rax", "=", "torch", ".", "cos", "(", "ra", ")", "\n", "ray", "=", "torch", ".", "sin", "(", "ra", ")", "\n", "rgx", "=", "rtx", "+", "rax", "\n", "rgy", "=", "rty", "+", "ray", "\n", "rg", "=", "torch", ".", "atan2", "(", "rgy", ",", "rgx", ")", "\n", "", "else", ":", "\n", "        ", "rg", "=", "rt", "+", "ra", "\n", "", "return", "torch", ".", "cat", "(", "[", "xg", ",", "yg", ",", "wg", ",", "lg", ",", "rg", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_torch_ops.corners_nd": [[161, 196], ["int", "torchplus.tools.torch_to_np_dtype", "isinstance", "numpy.stack().astype", "torch.from_numpy().type_as", "numpy.array", "dims.view", "torch.from_numpy().type_as.view", "numpy.stack", "torch.from_numpy", "numpy.unravel_index", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.tools.torch_to_np_dtype"], ["", "def", "corners_nd", "(", "dims", ",", "origin", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"generate relative box corners based on length per dim and\n    origin point.\n\n    Args:\n        dims (float array, shape=[N, ndim]): array of length per dim\n        origin (list or array or float): origin point relate to smallest point.\n        dtype (output dtype, optional): Defaults to np.float32\n\n    Returns:\n        float array, shape=[N, 2 ** ndim, ndim]: returned corners.\n        point layout example: (2d) x0y0, x0y1, x1y0, x1y1;\n            (3d) x0y0z0, x0y0z1, x0y1z0, x0y1z1, x1y0z0, x1y0z1, x1y1z0, x1y1z1\n            where x0 < x1, y0 < y1, z0 < z1\n    \"\"\"", "\n", "ndim", "=", "int", "(", "dims", ".", "shape", "[", "1", "]", ")", "\n", "dtype", "=", "torch_to_np_dtype", "(", "dims", ".", "dtype", ")", "\n", "if", "isinstance", "(", "origin", ",", "float", ")", ":", "\n", "        ", "origin", "=", "[", "origin", "]", "*", "ndim", "\n", "", "corners_norm", "=", "np", ".", "stack", "(", "\n", "np", ".", "unravel_index", "(", "np", ".", "arange", "(", "2", "**", "ndim", ")", ",", "[", "2", "]", "*", "ndim", ")", ",", "axis", "=", "1", ")", ".", "astype", "(", "dtype", ")", "\n", "# now corners_norm has format: (2d) x0y0, x0y1, x1y0, x1y1", "\n", "# (3d) x0y0z0, x0y0z1, x0y1z0, x0y1z1, x1y0z0, x1y0z1, x1y1z0, x1y1z1", "\n", "# so need to convert to a format which is convenient to do other computing.", "\n", "# for 2d boxes, format is clockwise start from minimum point", "\n", "# for 3d boxes, please draw them by your hand.", "\n", "if", "ndim", "==", "2", ":", "\n", "# generate clockwise box corners", "\n", "        ", "corners_norm", "=", "corners_norm", "[", "[", "0", ",", "1", ",", "3", ",", "2", "]", "]", "\n", "", "elif", "ndim", "==", "3", ":", "\n", "        ", "corners_norm", "=", "corners_norm", "[", "[", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ",", "7", ",", "6", "]", "]", "\n", "", "corners_norm", "=", "corners_norm", "-", "np", ".", "array", "(", "origin", ",", "dtype", "=", "dtype", ")", "\n", "corners_norm", "=", "torch", ".", "from_numpy", "(", "corners_norm", ")", ".", "type_as", "(", "dims", ")", "\n", "corners", "=", "dims", ".", "view", "(", "-", "1", ",", "1", ",", "ndim", ")", "*", "corners_norm", ".", "view", "(", "1", ",", "2", "**", "ndim", ",", "ndim", ")", "\n", "return", "corners", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_torch_ops.corners_2d": [[198, 212], ["box_torch_ops.corners_nd"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corners_nd"], ["", "def", "corners_2d", "(", "dims", ",", "origin", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"generate relative 2d box corners based on length per dim and\n    origin point.\n\n    Args:\n        dims (float array, shape=[N, 2]): array of length per dim\n        origin (list or array or float): origin point relate to smallest point.\n        dtype (output dtype, optional): Defaults to np.float32\n\n    Returns:\n        float array, shape=[N, 4, 2]: returned corners.\n        point layout: x0y0, x0y1, x1y1, x1y0\n    \"\"\"", "\n", "return", "corners_nd", "(", "dims", ",", "origin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_torch_ops.corner_to_standup_nd": [[214, 222], ["range", "range", "torch.stack", "standup_boxes.append", "standup_boxes.append", "torch.min", "torch.max"], "function", ["None"], ["", "def", "corner_to_standup_nd", "(", "boxes_corner", ")", ":", "\n", "    ", "ndim", "=", "boxes_corner", ".", "shape", "[", "2", "]", "\n", "standup_boxes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "ndim", ")", ":", "\n", "        ", "standup_boxes", ".", "append", "(", "torch", ".", "min", "(", "boxes_corner", "[", ":", ",", ":", ",", "i", "]", ",", "dim", "=", "1", ")", "[", "0", "]", ")", "\n", "", "for", "i", "in", "range", "(", "ndim", ")", ":", "\n", "        ", "standup_boxes", ".", "append", "(", "torch", ".", "max", "(", "boxes_corner", "[", ":", ",", ":", ",", "i", "]", ",", "dim", "=", "1", ")", "[", "0", "]", ")", "\n", "", "return", "torch", ".", "stack", "(", "standup_boxes", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_torch_ops.rotation_3d_in_axis": [[224, 253], ["torch.sin", "torch.cos", "torch.ones_like", "torch.zeros_like", "torch.einsum", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "ValueError", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "rotation_3d_in_axis", "(", "points", ",", "angles", ",", "axis", "=", "0", ")", ":", "\n", "# points: [N, point_size, 3]", "\n", "# angles: [N]", "\n", "    ", "rot_sin", "=", "torch", ".", "sin", "(", "angles", ")", "\n", "rot_cos", "=", "torch", ".", "cos", "(", "angles", ")", "\n", "ones", "=", "torch", ".", "ones_like", "(", "rot_cos", ")", "\n", "zeros", "=", "torch", ".", "zeros_like", "(", "rot_cos", ")", "\n", "if", "axis", "==", "1", ":", "\n", "        ", "rot_mat_T", "=", "tstack", "(", "[", "\n", "tstack", "(", "[", "rot_cos", ",", "zeros", ",", "-", "rot_sin", "]", ")", ",", "\n", "tstack", "(", "[", "zeros", ",", "ones", ",", "zeros", "]", ")", ",", "\n", "tstack", "(", "[", "rot_sin", ",", "zeros", ",", "rot_cos", "]", ")", "\n", "]", ")", "\n", "", "elif", "axis", "==", "2", "or", "axis", "==", "-", "1", ":", "\n", "        ", "rot_mat_T", "=", "tstack", "(", "[", "\n", "tstack", "(", "[", "rot_cos", ",", "-", "rot_sin", ",", "zeros", "]", ")", ",", "\n", "tstack", "(", "[", "rot_sin", ",", "rot_cos", ",", "zeros", "]", ")", ",", "\n", "tstack", "(", "[", "zeros", ",", "zeros", ",", "ones", "]", ")", "\n", "]", ")", "\n", "", "elif", "axis", "==", "0", ":", "\n", "        ", "rot_mat_T", "=", "tstack", "(", "[", "\n", "tstack", "(", "[", "zeros", ",", "rot_cos", ",", "-", "rot_sin", "]", ")", ",", "\n", "tstack", "(", "[", "zeros", ",", "rot_sin", ",", "rot_cos", "]", ")", ",", "\n", "tstack", "(", "[", "ones", ",", "zeros", ",", "zeros", "]", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"axis should in range\"", ")", "\n", "\n", "", "return", "torch", ".", "einsum", "(", "'aij,jka->aik'", ",", "(", "points", ",", "rot_mat_T", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_torch_ops.rotation_points_single_angle": [[255, 281], ["math.sin", "math.cos", "torchplus.get_tensor_class", "torch.stack", "torch.stack", "torch.tensor", "torch.tensor", "torch.tensor", "torch.stack", "ValueError", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "rotation_points_single_angle", "(", "points", ",", "angle", ",", "axis", "=", "0", ")", ":", "\n", "# points: [N, 3]", "\n", "    ", "rot_sin", "=", "math", ".", "sin", "(", "angle", ")", "\n", "rot_cos", "=", "math", ".", "cos", "(", "angle", ")", "\n", "point_type", "=", "torchplus", ".", "get_tensor_class", "(", "points", ")", "\n", "if", "axis", "==", "1", ":", "\n", "        ", "rot_mat_T", "=", "torch", ".", "stack", "(", "[", "\n", "torch", ".", "tensor", "(", "[", "rot_cos", ",", "0", ",", "-", "rot_sin", "]", ",", "dtype", "=", "points", ".", "dtype", ",", "device", "=", "points", ".", "device", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "0", ",", "1", ",", "0", "]", ",", "dtype", "=", "points", ".", "dtype", ",", "device", "=", "points", ".", "device", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "rot_sin", ",", "0", ",", "rot_cos", "]", ",", "dtype", "=", "points", ".", "dtype", ",", "device", "=", "points", ".", "device", ")", "\n", "]", ")", "\n", "", "elif", "axis", "==", "2", "or", "axis", "==", "-", "1", ":", "\n", "        ", "rot_mat_T", "=", "torch", ".", "stack", "(", "[", "\n", "torch", ".", "tensor", "(", "[", "rot_cos", ",", "-", "rot_sin", ",", "0", "]", ",", "dtype", "=", "points", ".", "dtype", ",", "device", "=", "points", ".", "device", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "rot_sin", ",", "rot_cos", ",", "0", "]", ",", "dtype", "=", "points", ".", "dtype", ",", "device", "=", "points", ".", "device", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "0", ",", "0", ",", "1", "]", ",", "dtype", "=", "points", ".", "dtype", ",", "device", "=", "points", ".", "device", ")", "\n", "]", ")", "\n", "", "elif", "axis", "==", "0", ":", "\n", "        ", "rot_mat_T", "=", "torch", ".", "stack", "(", "[", "\n", "torch", ".", "tensor", "(", "[", "1", ",", "0", ",", "0", "]", ",", "dtype", "=", "points", ".", "dtype", ",", "device", "=", "points", ".", "device", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "0", ",", "rot_cos", ",", "-", "rot_sin", "]", ",", "dtype", "=", "points", ".", "dtype", ",", "device", "=", "points", ".", "device", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "0", ",", "rot_sin", ",", "rot_cos", "]", ",", "dtype", "=", "points", ".", "dtype", ",", "device", "=", "points", ".", "device", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"axis should in range\"", ")", "\n", "", "return", "points", "@", "rot_mat_T", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_torch_ops.rotation_2d": [[283, 299], ["torch.sin", "torch.cos", "torch.stack", "torch.einsum", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "rotation_2d", "(", "points", ",", "angles", ")", ":", "\n", "    ", "\"\"\"rotation 2d points based on origin point clockwise when angle positive.\n\n    Args:\n        points (float array, shape=[N, point_size, 2]): points to be rotated.\n        angles (float array, shape=[N]): rotation angle.\n\n    Returns:\n        float array: same shape as points\n    \"\"\"", "\n", "rot_sin", "=", "torch", ".", "sin", "(", "angles", ")", "\n", "rot_cos", "=", "torch", ".", "cos", "(", "angles", ")", "\n", "rot_mat_T", "=", "torch", ".", "stack", "(", "\n", "[", "tstack", "(", "[", "rot_cos", ",", "-", "rot_sin", "]", ")", ",", "\n", "tstack", "(", "[", "rot_sin", ",", "rot_cos", "]", ")", "]", ")", "\n", "return", "torch", ".", "einsum", "(", "'aij,jka->aik'", ",", "(", "points", ",", "rot_mat_T", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_torch_ops.center_to_corner_box3d": [[301, 326], ["box_torch_ops.corners_nd", "box_torch_ops.rotation_3d_in_axis", "centers.view"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corners_nd", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rotation_3d_in_axis"], ["", "def", "center_to_corner_box3d", "(", "centers", ",", "\n", "dims", ",", "\n", "angles", ",", "\n", "origin", "=", "[", "0.5", ",", "1.0", ",", "0.5", "]", ",", "\n", "axis", "=", "1", ")", ":", "\n", "    ", "\"\"\"convert kitti locations, dimensions and angles to corners\n\n    Args:\n        centers (float array, shape=[N, 3]): locations in kitti label file.\n        dims (float array, shape=[N, 3]): dimensions in kitti label file.\n        angles (float array, shape=[N]): rotation_y in kitti label file.\n        origin (list or array or float): origin point relate to smallest point.\n            use [0.5, 1.0, 0.5] in camera and [0.5, 0.5, 0] in lidar.\n        axis (int): rotation axis. 1 for camera and 2 for lidar.\n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "# 'length' in kitti format is in x axis.", "\n", "# yzx(hwl)(kitti label file)<->xyz(lhw)(camera)<->z(-x)(-y)(wlh)(lidar)", "\n", "# center in kitti format is [0.5, 1.0, 0.5] in xyz.", "\n", "corners", "=", "corners_nd", "(", "dims", ",", "origin", "=", "origin", ")", "\n", "# corners: [N, 8, 3]", "\n", "corners", "=", "rotation_3d_in_axis", "(", "corners", ",", "angles", ",", "axis", "=", "axis", ")", "\n", "corners", "+=", "centers", ".", "view", "(", "-", "1", ",", "1", ",", "3", ")", "\n", "return", "corners", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_torch_ops.center_to_corner_box2d": [[328, 348], ["box_torch_ops.corners_nd", "centers.view", "box_torch_ops.rotation_2d"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corners_nd", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rotation_2d"], ["", "def", "center_to_corner_box2d", "(", "centers", ",", "dims", ",", "angles", "=", "None", ",", "origin", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"convert kitti locations, dimensions and angles to corners\n\n    Args:\n        centers (float array, shape=[N, 2]): locations in kitti label file.\n        dims (float array, shape=[N, 2]): dimensions in kitti label file.\n        angles (float array, shape=[N]): rotation_y in kitti label file.\n\n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "# 'length' in kitti format is in x axis.", "\n", "# xyz(hwl)(kitti label file)<->xyz(lhw)(camera)<->z(-x)(-y)(wlh)(lidar)", "\n", "# center in kitti format is [0.5, 1.0, 0.5] in xyz.", "\n", "corners", "=", "corners_nd", "(", "dims", ",", "origin", "=", "origin", ")", "\n", "# corners: [N, 4, 2]", "\n", "if", "angles", "is", "not", "None", ":", "\n", "        ", "corners", "=", "rotation_2d", "(", "corners", ",", "angles", ")", "\n", "", "corners", "+=", "centers", ".", "view", "(", "-", "1", ",", "1", ",", "2", ")", "\n", "return", "corners", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_torch_ops.project_to_image": [[350, 360], ["numpy.concatenate().tolist", "torch.cat", "torch.matmul", "list", "proj_mat.t", "numpy.concatenate", "torch.zeros().type_as", "torch.zeros"], "function", ["None"], ["", "def", "project_to_image", "(", "points_3d", ",", "proj_mat", ")", ":", "\n", "#print(\"!!!!!!!!!!this information is from project_to_image:\",points_3d.type(),proj_mat.type(),points_3d.shape,proj_mat.shape)", "\n", "    ", "points_num", "=", "list", "(", "points_3d", ".", "shape", ")", "[", ":", "-", "1", "]", "\n", "points_shape", "=", "np", ".", "concatenate", "(", "[", "points_num", ",", "[", "1", "]", "]", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "points_4", "=", "torch", ".", "cat", "(", "\n", "[", "points_3d", ",", "torch", ".", "zeros", "(", "*", "points_shape", ")", ".", "type_as", "(", "points_3d", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "# point_2d = points_4 @ tf.transpose(proj_mat, [1, 0])", "\n", "point_2d", "=", "torch", ".", "matmul", "(", "points_4", ",", "proj_mat", ".", "t", "(", ")", ")", "\n", "point_2d_res", "=", "point_2d", "[", "...", ",", ":", "2", "]", "/", "point_2d", "[", "...", ",", "2", ":", "3", "]", "\n", "return", "point_2d_res", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_torch_ops.camera_to_lidar": [[362, 368], ["torch.cat", "torch.inverse", "torch.ones().type_as", "torch.ones"], "function", ["None"], ["", "def", "camera_to_lidar", "(", "points", ",", "r_rect", ",", "velo2cam", ")", ":", "\n", "    ", "num_points", "=", "points", ".", "shape", "[", "0", "]", "\n", "points", "=", "torch", ".", "cat", "(", "\n", "[", "points", ",", "torch", ".", "ones", "(", "num_points", ",", "1", ")", ".", "type_as", "(", "points", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "lidar_points", "=", "points", "@", "torch", ".", "inverse", "(", "(", "r_rect", "@", "velo2cam", ")", ".", "t", "(", ")", ")", "\n", "return", "lidar_points", "[", "...", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_torch_ops.lidar_to_camera": [[370, 376], ["torch.cat", "torch.ones().type_as", "torch.ones"], "function", ["None"], ["", "def", "lidar_to_camera", "(", "points", ",", "r_rect", ",", "velo2cam", ")", ":", "\n", "    ", "num_points", "=", "points", ".", "shape", "[", "0", "]", "\n", "points", "=", "torch", ".", "cat", "(", "\n", "[", "points", ",", "torch", ".", "ones", "(", "num_points", ",", "1", ")", ".", "type_as", "(", "points", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "camera_points", "=", "points", "@", "(", "r_rect", "@", "velo2cam", ")", ".", "t", "(", ")", "\n", "return", "camera_points", "[", "...", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_torch_ops.box_camera_to_lidar": [[378, 384], ["box_torch_ops.camera_to_lidar", "torch.cat"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.camera_to_lidar"], ["", "def", "box_camera_to_lidar", "(", "data", ",", "r_rect", ",", "velo2cam", ")", ":", "\n", "    ", "xyz", "=", "data", "[", "...", ",", "0", ":", "3", "]", "\n", "l", ",", "h", ",", "w", "=", "data", "[", "...", ",", "3", ":", "4", "]", ",", "data", "[", "...", ",", "4", ":", "5", "]", ",", "data", "[", "...", ",", "5", ":", "6", "]", "\n", "r", "=", "data", "[", "...", ",", "6", ":", "7", "]", "\n", "xyz_lidar", "=", "camera_to_lidar", "(", "xyz", ",", "r_rect", ",", "velo2cam", ")", "\n", "return", "torch", ".", "cat", "(", "[", "xyz_lidar", ",", "w", ",", "l", ",", "h", ",", "r", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_torch_ops.box_lidar_to_camera": [[386, 392], ["box_torch_ops.lidar_to_camera", "torch.cat"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.lidar_to_camera"], ["", "def", "box_lidar_to_camera", "(", "data", ",", "r_rect", ",", "velo2cam", ")", ":", "\n", "    ", "xyz_lidar", "=", "data", "[", "...", ",", "0", ":", "3", "]", "\n", "w", ",", "l", ",", "h", "=", "data", "[", "...", ",", "3", ":", "4", "]", ",", "data", "[", "...", ",", "4", ":", "5", "]", ",", "data", "[", "...", ",", "5", ":", "6", "]", "\n", "r", "=", "data", "[", "...", ",", "6", ":", "7", "]", "\n", "xyz", "=", "lidar_to_camera", "(", "xyz_lidar", ",", "r_rect", ",", "velo2cam", ")", "\n", "return", "torch", ".", "cat", "(", "[", "xyz", ",", "l", ",", "h", ",", "w", ",", "r", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_torch_ops.multiclass_nms": [[394, 442], ["zip", "len", "len", "ValueError", "range", "range", "torch.nonzero", "nms_func", "selected_per_class.append", "selected_per_class.append", "selected_per_class.append", "selected_per_class.append", "selected_per_class.append"], "function", ["None"], ["", "def", "multiclass_nms", "(", "nms_func", ",", "\n", "boxes", ",", "\n", "scores", ",", "\n", "num_class", ",", "\n", "pre_max_size", "=", "None", ",", "\n", "post_max_size", "=", "None", ",", "\n", "score_thresh", "=", "0.0", ",", "\n", "iou_threshold", "=", "0.5", ")", ":", "\n", "# only output [selected] * num_class, please slice by your self", "\n", "    ", "selected_per_class", "=", "[", "]", "\n", "assert", "len", "(", "boxes", ".", "shape", ")", "==", "3", ",", "\"bbox must have shape [N, num_cls, 7]\"", "\n", "assert", "len", "(", "scores", ".", "shape", ")", "==", "2", ",", "\"score must have shape [N, num_cls]\"", "\n", "num_class", "=", "scores", ".", "shape", "[", "1", "]", "\n", "if", "not", "(", "boxes", ".", "shape", "[", "1", "]", "==", "scores", ".", "shape", "[", "1", "]", "or", "boxes", ".", "shape", "[", "1", "]", "==", "1", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'second dimension of boxes must be either 1 or equal '", "\n", "'to the second dimension of scores'", ")", "\n", "", "num_boxes", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "num_scores", "=", "scores", ".", "shape", "[", "0", "]", "\n", "num_classes", "=", "scores", ".", "shape", "[", "1", "]", "\n", "boxes_ids", "=", "(", "range", "(", "num_classes", ")", "\n", "if", "boxes", ".", "shape", "[", "1", "]", ">", "1", "else", "[", "0", "]", "*", "num_classes", ")", "\n", "for", "class_idx", ",", "boxes_idx", "in", "zip", "(", "range", "(", "num_classes", ")", ",", "boxes_ids", ")", ":", "\n", "# for class_idx in range(1, num_class):", "\n", "        ", "class_scores", "=", "scores", "[", ":", ",", "class_idx", "]", "\n", "class_boxes", "=", "boxes", "[", ":", ",", "boxes_idx", "]", "\n", "if", "score_thresh", ">", "0.0", ":", "\n", "            ", "class_scores_keep", "=", "torch", ".", "nonzero", "(", "class_scores", ">=", "score_thresh", ")", "\n", "if", "class_scores_keep", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "                ", "class_scores_keep", "=", "class_scores_keep", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "                ", "selected_per_class", ".", "append", "(", "None", ")", "\n", "continue", "\n", "", "class_scores", "=", "class_scores", "[", "class_scores_keep", "]", "\n", "", "if", "class_scores", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "            ", "if", "score_thresh", ">", "0.0", ":", "\n", "                ", "class_boxes", "=", "class_boxes", "[", "class_scores_keep", "]", "\n", "", "keep", "=", "nms_func", "(", "class_boxes", ",", "class_scores", ",", "pre_max_size", ",", "\n", "post_max_size", ",", "iou_threshold", ")", "\n", "if", "keep", "is", "not", "None", ":", "\n", "                ", "if", "score_thresh", ">", "0.0", ":", "\n", "                    ", "selected_per_class", ".", "append", "(", "class_scores_keep", "[", "keep", "]", ")", "\n", "", "else", ":", "\n", "                    ", "selected_per_class", ".", "append", "(", "keep", ")", "\n", "", "", "else", ":", "\n", "                ", "selected_per_class", ".", "append", "(", "None", ")", "\n", "", "", "else", ":", "\n", "            ", "selected_per_class", ".", "append", "(", "None", ")", "\n", "", "", "return", "selected_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_torch_ops.nms": [[443, 467], ["torch.cat", "torch.cat.data.cpu().numpy", "min", "torch.topk", "len", "numpy.array", "numpy.array", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "scores.unsqueeze", "torch.cat.data.cpu", "second.core.non_max_suppression.nms_gpu.nms_gpu", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.nms_gpu"], ["", "def", "nms", "(", "bboxes", ",", "\n", "scores", ",", "\n", "pre_max_size", "=", "None", ",", "\n", "post_max_size", "=", "None", ",", "\n", "iou_threshold", "=", "0.5", ")", ":", "\n", "    ", "if", "pre_max_size", "is", "not", "None", ":", "\n", "        ", "num_keeped_scores", "=", "scores", ".", "shape", "[", "0", "]", "\n", "pre_max_size", "=", "min", "(", "num_keeped_scores", ",", "pre_max_size", ")", "\n", "scores", ",", "indices", "=", "torch", ".", "topk", "(", "scores", ",", "k", "=", "pre_max_size", ")", "\n", "bboxes", "=", "bboxes", "[", "indices", "]", "\n", "", "dets", "=", "torch", ".", "cat", "(", "[", "bboxes", ",", "scores", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "dets_np", "=", "dets", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "len", "(", "dets_np", ")", "==", "0", ":", "\n", "        ", "keep", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "", "else", ":", "\n", "        ", "ret", "=", "np", ".", "array", "(", "nms_gpu", "(", "dets_np", ",", "iou_threshold", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "keep", "=", "ret", "[", ":", "post_max_size", "]", "\n", "", "if", "keep", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "if", "pre_max_size", "is", "not", "None", ":", "\n", "        ", "keep", "=", "torch", ".", "from_numpy", "(", "keep", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "return", "indices", "[", "keep", "]", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "keep", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_torch_ops.rotate_nms": [[469, 493], ["torch.cat", "torch.cat.data.cpu().numpy", "min", "torch.topk", "len", "numpy.array", "numpy.array", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "scores.unsqueeze", "torch.cat.data.cpu", "second.core.non_max_suppression.nms_cpu.rotate_nms_cc", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_cpu.rotate_nms_cc"], ["", "", "def", "rotate_nms", "(", "rbboxes", ",", "\n", "scores", ",", "\n", "pre_max_size", "=", "None", ",", "\n", "post_max_size", "=", "None", ",", "\n", "iou_threshold", "=", "0.5", ")", ":", "\n", "    ", "if", "pre_max_size", "is", "not", "None", ":", "\n", "        ", "num_keeped_scores", "=", "scores", ".", "shape", "[", "0", "]", "\n", "pre_max_size", "=", "min", "(", "num_keeped_scores", ",", "pre_max_size", ")", "\n", "scores", ",", "indices", "=", "torch", ".", "topk", "(", "scores", ",", "k", "=", "pre_max_size", ")", "\n", "rbboxes", "=", "rbboxes", "[", "indices", "]", "\n", "", "dets", "=", "torch", ".", "cat", "(", "[", "rbboxes", ",", "scores", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "dets_np", "=", "dets", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "len", "(", "dets_np", ")", "==", "0", ":", "\n", "        ", "keep", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "", "else", ":", "\n", "        ", "ret", "=", "np", ".", "array", "(", "rotate_nms_cc", "(", "dets_np", ",", "iou_threshold", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "keep", "=", "ret", "[", ":", "post_max_size", "]", "\n", "", "if", "keep", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "if", "pre_max_size", "is", "not", "None", ":", "\n", "        ", "keep", "=", "torch", ".", "from_numpy", "(", "keep", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "return", "indices", "[", "keep", "]", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "keep", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses.Loss.__call__": [[69, 97], ["losses.Loss._compute_loss", "torch.where", "torch.isnan"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses.BootstrappedSigmoidClassificationLoss._compute_loss"], ["def", "__call__", "(", "self", ",", "\n", "prediction_tensor", ",", "\n", "target_tensor", ",", "\n", "ignore_nan_targets", "=", "False", ",", "\n", "scope", "=", "None", ",", "\n", "**", "params", ")", ":", "\n", "    ", "\"\"\"Call the loss function.\n\n    Args:\n      prediction_tensor: an N-d tensor of shape [batch, anchors, ...]\n        representing predicted quantities.\n      target_tensor: an N-d tensor of shape [batch, anchors, ...] representing\n        regression or classification targets.\n      ignore_nan_targets: whether to ignore nan targets in the loss computation.\n        E.g. can be used if the target tensor is missing groundtruth data that\n        shouldn't be factored into the loss.\n      scope: Op scope name. Defaults to 'Loss' if None.\n      **params: Additional keyword arguments for specific implementations of\n              the Loss.\n\n    Returns:\n      loss: a tensor representing the value of the loss function.\n    \"\"\"", "\n", "if", "ignore_nan_targets", ":", "\n", "      ", "target_tensor", "=", "torch", ".", "where", "(", "torch", ".", "isnan", "(", "target_tensor", ")", ",", "\n", "prediction_tensor", ",", "\n", "target_tensor", ")", "\n", "", "return", "self", ".", "_compute_loss", "(", "prediction_tensor", ",", "target_tensor", ",", "**", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses.Loss._compute_loss": [[98, 113], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_compute_loss", "(", "self", ",", "prediction_tensor", ",", "target_tensor", ",", "**", "params", ")", ":", "\n", "    ", "\"\"\"Method to be overridden by implementations.\n\n    Args:\n      prediction_tensor: a tensor representing predicted quantities\n      target_tensor: a tensor representing regression or classification targets\n      **params: Additional keyword arguments for specific implementations of\n              the Loss.\n\n    Returns:\n      loss: an N-d tensor of shape [batch, anchors, ...] containing the loss per\n        anchor\n    \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses.WeightedL2LocalizationLoss.__init__": [[119, 126], ["object.__init__", "numpy.array", "torch.autograd.Variable", "torch.from_numpy().cuda", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["def", "__init__", "(", "self", ",", "code_weights", "=", "None", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "code_weights", "is", "not", "None", ":", "\n", "      ", "self", ".", "_code_weights", "=", "np", ".", "array", "(", "code_weights", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "_code_weights", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "self", ".", "_code_weights", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "_code_weights", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses.WeightedL2LocalizationLoss._compute_loss": [[127, 149], ["square_diff.sum", "losses.WeightedL2LocalizationLoss._code_weights.type_as", "losses.WeightedL2LocalizationLoss._code_weights.view", "weights.unsqueeze"], "methods", ["None"], ["", "", "def", "_compute_loss", "(", "self", ",", "prediction_tensor", ",", "target_tensor", ",", "weights", ")", ":", "\n", "    ", "\"\"\"Compute loss function.\n\n    Args:\n      prediction_tensor: A float tensor of shape [batch_size, num_anchors,\n        code_size] representing the (encoded) predicted locations of objects.\n      target_tensor: A float tensor of shape [batch_size, num_anchors,\n        code_size] representing the regression targets\n      weights: a float tensor of shape [batch_size, num_anchors]\n\n    Returns:\n      loss: a float tensor of shape [batch_size, num_anchors] tensor\n        representing the value of the loss function.\n    \"\"\"", "\n", "diff", "=", "prediction_tensor", "-", "target_tensor", "\n", "if", "self", ".", "_code_weights", "is", "not", "None", ":", "\n", "      ", "self", ".", "_code_weights", "=", "self", ".", "_code_weights", ".", "type_as", "(", "prediction_tensor", ")", "\n", "self", ".", "_code_weights", "=", "self", ".", "_code_weights", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "diff", "=", "self", ".", "_code_weights", "*", "diff", "\n", "", "weighted_diff", "=", "diff", "*", "weights", ".", "unsqueeze", "(", "-", "1", ")", "\n", "square_diff", "=", "0.5", "*", "weighted_diff", "*", "weighted_diff", "\n", "return", "square_diff", ".", "sum", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses.WeightedSmoothL1LocalizationLoss.__init__": [[158, 167], ["object.__init__", "numpy.array", "torch.autograd.Variable", "torch.from_numpy().cuda", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["def", "__init__", "(", "self", ",", "sigma", "=", "3.0", ",", "code_weights", "=", "None", ",", "codewise", "=", "True", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_sigma", "=", "sigma", "\n", "if", "code_weights", "is", "not", "None", ":", "\n", "      ", "self", ".", "_code_weights", "=", "np", ".", "array", "(", "code_weights", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "_code_weights", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "self", ".", "_code_weights", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "_code_weights", "=", "None", "\n", "", "self", ".", "_codewise", "=", "codewise", "\n", "", "def", "_compute_loss", "(", "self", ",", "prediction_tensor", ",", "target_tensor", ",", "weights", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses.WeightedSmoothL1LocalizationLoss._compute_loss": [[167, 198], ["torch.abs", "torch.le().type_as", "losses.WeightedSmoothL1LocalizationLoss._code_weights.type_as", "torch.sum", "losses.WeightedSmoothL1LocalizationLoss.view", "torch.le", "torch.pow", "weights.unsqueeze"], "methods", ["None"], ["", "def", "_compute_loss", "(", "self", ",", "prediction_tensor", ",", "target_tensor", ",", "weights", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute loss function.\n\n    Args:\n      prediction_tensor: A float tensor of shape [batch_size, num_anchors,\n        code_size] representing the (encoded) predicted locations of objects.\n      target_tensor: A float tensor of shape [batch_size, num_anchors,\n        code_size] representing the regression targets\n      weights: a float tensor of shape [batch_size, num_anchors]\n\n    Returns:\n      loss: a float tensor of shape [batch_size, num_anchors] tensor\n        representing the value of the loss function.\n    \"\"\"", "\n", "diff", "=", "prediction_tensor", "-", "target_tensor", "\n", "if", "self", ".", "_code_weights", "is", "not", "None", ":", "\n", "      ", "code_weights", "=", "self", ".", "_code_weights", ".", "type_as", "(", "prediction_tensor", ")", "\n", "diff", "=", "code_weights", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "*", "diff", "\n", "", "abs_diff", "=", "torch", ".", "abs", "(", "diff", ")", "\n", "abs_diff_lt_1", "=", "torch", ".", "le", "(", "abs_diff", ",", "1", "/", "(", "self", ".", "_sigma", "**", "2", ")", ")", ".", "type_as", "(", "abs_diff", ")", "\n", "loss", "=", "abs_diff_lt_1", "*", "0.5", "*", "torch", ".", "pow", "(", "abs_diff", "*", "self", ".", "_sigma", ",", "2", ")", "+", "(", "abs_diff", "-", "0.5", "/", "(", "self", ".", "_sigma", "**", "2", ")", ")", "*", "(", "1.", "-", "abs_diff_lt_1", ")", "\n", "if", "self", ".", "_codewise", ":", "\n", "      ", "anchorwise_smooth_l1norm", "=", "loss", "\n", "if", "weights", "is", "not", "None", ":", "\n", "        ", "anchorwise_smooth_l1norm", "*=", "weights", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "", "else", ":", "\n", "      ", "anchorwise_smooth_l1norm", "=", "torch", ".", "sum", "(", "loss", ",", "2", ")", "#  * weights", "\n", "if", "weights", "is", "not", "None", ":", "\n", "        ", "anchorwise_smooth_l1norm", "*=", "weights", "\n", "", "", "return", "anchorwise_smooth_l1norm", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses.WeightedSigmoidClassificationLoss._compute_loss": [[225, 252], ["weights.unsqueeze.unsqueeze.unsqueeze", "losses._sigmoid_cross_entropy_with_logits", "indices_to_dense_vector().view().type_as", "indices_to_dense_vector().view", "losses.indices_to_dense_vector"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses._sigmoid_cross_entropy_with_logits", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses.indices_to_dense_vector"], ["def", "_compute_loss", "(", "self", ",", "\n", "prediction_tensor", ",", "\n", "target_tensor", ",", "\n", "weights", ",", "\n", "class_indices", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute loss function.\n\n    Args:\n      prediction_tensor: A float tensor of shape [batch_size, num_anchors,\n        num_classes] representing the predicted logits for each class\n      target_tensor: A float tensor of shape [batch_size, num_anchors,\n        num_classes] representing one-hot encoded classification targets\n      weights: a float tensor of shape [batch_size, num_anchors]\n      class_indices: (Optional) A 1-D integer tensor of class indices.\n        If provided, computes loss only for the specified class indices.\n\n    Returns:\n      loss: a float tensor of shape [batch_size, num_anchors, num_classes]\n        representing the value of the loss function.\n    \"\"\"", "\n", "weights", "=", "weights", ".", "unsqueeze", "(", "-", "1", ")", "\n", "if", "class_indices", "is", "not", "None", ":", "\n", "      ", "weights", "*=", "indices_to_dense_vector", "(", "class_indices", ",", "\n", "prediction_tensor", ".", "shape", "[", "2", "]", ")", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", ".", "type_as", "(", "prediction_tensor", ")", "\n", "", "per_entry_cross_ent", "=", "(", "_sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "target_tensor", ",", "logits", "=", "prediction_tensor", ")", ")", "\n", "return", "per_entry_cross_ent", "*", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses.SigmoidFocalClassificationLoss.__init__": [[261, 272], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "gamma", "=", "2.0", ",", "alpha", "=", "0.25", ")", ":", "\n", "    ", "\"\"\"Constructor.\n\n    Args:\n      gamma: exponent of the modulating factor (1 - p_t) ^ gamma.\n      alpha: optional alpha weighting factor to balance positives vs negatives.\n      all_zero_negative: bool. if True, will treat all zero as background.\n        else, will treat first label as background. only affect alpha.\n    \"\"\"", "\n", "self", ".", "_alpha", "=", "alpha", "\n", "self", ".", "_gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses.SigmoidFocalClassificationLoss._compute_loss": [[273, 311], ["weights.unsqueeze.unsqueeze.unsqueeze", "losses._sigmoid_cross_entropy_with_logits", "torch.sigmoid", "indices_to_dense_vector().view().type_as", "torch.pow", "indices_to_dense_vector().view", "losses.indices_to_dense_vector"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses._sigmoid_cross_entropy_with_logits", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses.indices_to_dense_vector"], ["", "def", "_compute_loss", "(", "self", ",", "\n", "prediction_tensor", ",", "\n", "target_tensor", ",", "\n", "weights", ",", "\n", "class_indices", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute loss function.\n\n    Args:\n      prediction_tensor: A float tensor of shape [batch_size, num_anchors,\n        num_classes] representing the predicted logits for each class\n      target_tensor: A float tensor of shape [batch_size, num_anchors,\n        num_classes] representing one-hot encoded classification targets\n      weights: a float tensor of shape [batch_size, num_anchors]\n      class_indices: (Optional) A 1-D integer tensor of class indices.\n        If provided, computes loss only for the specified class indices.\n\n    Returns:\n      loss: a float tensor of shape [batch_size, num_anchors, num_classes]\n        representing the value of the loss function.\n    \"\"\"", "\n", "weights", "=", "weights", ".", "unsqueeze", "(", "2", ")", "\n", "if", "class_indices", "is", "not", "None", ":", "\n", "      ", "weights", "*=", "indices_to_dense_vector", "(", "class_indices", ",", "\n", "prediction_tensor", ".", "shape", "[", "2", "]", ")", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", ".", "type_as", "(", "prediction_tensor", ")", "\n", "", "per_entry_cross_ent", "=", "(", "_sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "target_tensor", ",", "logits", "=", "prediction_tensor", ")", ")", "\n", "prediction_probabilities", "=", "torch", ".", "sigmoid", "(", "prediction_tensor", ")", "\n", "p_t", "=", "(", "(", "target_tensor", "*", "prediction_probabilities", ")", "+", "\n", "(", "(", "1", "-", "target_tensor", ")", "*", "(", "1", "-", "prediction_probabilities", ")", ")", ")", "\n", "modulating_factor", "=", "1.0", "\n", "if", "self", ".", "_gamma", ":", "\n", "      ", "modulating_factor", "=", "torch", ".", "pow", "(", "1.0", "-", "p_t", ",", "self", ".", "_gamma", ")", "\n", "", "alpha_weight_factor", "=", "1.0", "\n", "if", "self", ".", "_alpha", "is", "not", "None", ":", "\n", "      ", "alpha_weight_factor", "=", "(", "target_tensor", "*", "self", ".", "_alpha", "+", "\n", "(", "1", "-", "target_tensor", ")", "*", "(", "1", "-", "self", ".", "_alpha", ")", ")", "\n", "", "focal_cross_entropy_loss", "=", "(", "modulating_factor", "*", "alpha_weight_factor", "*", "per_entry_cross_ent", ")", "\n", "return", "focal_cross_entropy_loss", "*", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses.SoftmaxFocalClassificationLoss.__init__": [[320, 329], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "gamma", "=", "2.0", ",", "alpha", "=", "0.25", ")", ":", "\n", "    ", "\"\"\"Constructor.\n\n    Args:\n      gamma: exponent of the modulating factor (1 - p_t) ^ gamma.\n      alpha: optional alpha weighting factor to balance positives vs negatives.\n    \"\"\"", "\n", "self", ".", "_alpha", "=", "alpha", "\n", "self", ".", "_gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses.SoftmaxFocalClassificationLoss._compute_loss": [[330, 372], ["weights.unsqueeze.unsqueeze.unsqueeze", "losses._softmax_cross_entropy_with_logits", "torch.nn.functional.softmax", "indices_to_dense_vector().view().type_as", "_softmax_cross_entropy_with_logits.unsqueeze", "torch.pow", "torch.where", "torch.tensor().type_as", "torch.tensor().type_as", "indices_to_dense_vector().view", "torch.tensor", "torch.tensor", "losses.indices_to_dense_vector"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses._softmax_cross_entropy_with_logits", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses.indices_to_dense_vector"], ["", "def", "_compute_loss", "(", "self", ",", "\n", "prediction_tensor", ",", "\n", "target_tensor", ",", "\n", "weights", ",", "\n", "class_indices", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute loss function.\n\n    Args:\n      prediction_tensor: A float tensor of shape [batch_size, num_anchors,\n        num_classes] representing the predicted logits for each class\n      target_tensor: A float tensor of shape [batch_size, num_anchors,\n        num_classes] representing one-hot encoded classification targets\n      weights: a float tensor of shape [batch_size, num_anchors]\n      class_indices: (Optional) A 1-D integer tensor of class indices.\n        If provided, computes loss only for the specified class indices.\n\n    Returns:\n      loss: a float tensor of shape [batch_size, num_anchors, num_classes]\n        representing the value of the loss function.\n    \"\"\"", "\n", "weights", "=", "weights", ".", "unsqueeze", "(", "2", ")", "\n", "if", "class_indices", "is", "not", "None", ":", "\n", "      ", "weights", "*=", "indices_to_dense_vector", "(", "class_indices", ",", "\n", "prediction_tensor", ".", "shape", "[", "2", "]", ")", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", ".", "type_as", "(", "prediction_tensor", ")", "\n", "", "per_entry_cross_ent", "=", "(", "_softmax_cross_entropy_with_logits", "(", "\n", "labels", "=", "target_tensor", ",", "logits", "=", "prediction_tensor", ")", ")", "\n", "# convert [N, num_anchors] to [N, num_anchors, num_classes]", "\n", "per_entry_cross_ent", "=", "per_entry_cross_ent", ".", "unsqueeze", "(", "-", "1", ")", "*", "target_tensor", "\n", "prediction_probabilities", "=", "F", ".", "softmax", "(", "prediction_tensor", ",", "dim", "=", "-", "1", ")", "\n", "p_t", "=", "(", "(", "target_tensor", "*", "prediction_probabilities", ")", "+", "\n", "(", "(", "1", "-", "target_tensor", ")", "*", "(", "1", "-", "prediction_probabilities", ")", ")", ")", "\n", "modulating_factor", "=", "1.0", "\n", "if", "self", ".", "_gamma", ":", "\n", "      ", "modulating_factor", "=", "torch", ".", "pow", "(", "1.0", "-", "p_t", ",", "self", ".", "_gamma", ")", "\n", "", "alpha_weight_factor", "=", "1.0", "\n", "if", "self", ".", "_alpha", "is", "not", "None", ":", "\n", "      ", "alpha_weight_factor", "=", "torch", ".", "where", "(", "target_tensor", "[", "...", ",", "0", "]", "==", "1", ",", "\n", "torch", ".", "tensor", "(", "1", "-", "self", ".", "_alpha", ")", ".", "type_as", "(", "per_entry_cross_ent", ")", ",", "\n", "torch", ".", "tensor", "(", "self", ".", "_alpha", ")", ".", "type_as", "(", "per_entry_cross_ent", ")", ")", "\n", "", "focal_cross_entropy_loss", "=", "(", "modulating_factor", "*", "alpha_weight_factor", "*", "\n", "per_entry_cross_ent", ")", "\n", "return", "focal_cross_entropy_loss", "*", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses.WeightedSoftmaxClassificationLoss.__init__": [[377, 387], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "logit_scale", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Constructor.\n\n    Args:\n      logit_scale: When this value is high, the prediction is \"diffused\" and\n                   when this value is low, the prediction is made peakier.\n                   (default 1.0)\n\n    \"\"\"", "\n", "self", ".", "_logit_scale", "=", "logit_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses.WeightedSoftmaxClassificationLoss._compute_loss": [[388, 409], ["torch.div", "losses._softmax_cross_entropy_with_logits", "_softmax_cross_entropy_with_logits.view", "target_tensor.view", "torch.div.view"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses._softmax_cross_entropy_with_logits"], ["", "def", "_compute_loss", "(", "self", ",", "prediction_tensor", ",", "target_tensor", ",", "weights", ")", ":", "\n", "    ", "\"\"\"Compute loss function.\n\n    Args:\n      prediction_tensor: A float tensor of shape [batch_size, num_anchors,\n        num_classes] representing the predicted logits for each class\n      target_tensor: A float tensor of shape [batch_size, num_anchors,\n        num_classes] representing one-hot encoded classification targets\n      weights: a float tensor of shape [batch_size, num_anchors]\n\n    Returns:\n      loss: a float tensor of shape [batch_size, num_anchors]\n        representing the value of the loss function.\n    \"\"\"", "\n", "num_classes", "=", "prediction_tensor", ".", "shape", "[", "-", "1", "]", "\n", "prediction_tensor", "=", "torch", ".", "div", "(", "\n", "prediction_tensor", ",", "self", ".", "_logit_scale", ")", "\n", "per_row_cross_ent", "=", "(", "_softmax_cross_entropy_with_logits", "(", "\n", "labels", "=", "target_tensor", ".", "view", "(", "-", "1", ",", "num_classes", ")", ",", "\n", "logits", "=", "prediction_tensor", ".", "view", "(", "-", "1", ",", "num_classes", ")", ")", ")", "\n", "return", "per_row_cross_ent", ".", "view", "(", "weights", ".", "shape", ")", "*", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses.BootstrappedSigmoidClassificationLoss.__init__": [[428, 444], ["ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alpha", ",", "bootstrap_type", "=", "'soft'", ")", ":", "\n", "    ", "\"\"\"Constructor.\n\n    Args:\n      alpha: a float32 scalar tensor between 0 and 1 representing interpolation\n        weight\n      bootstrap_type: set to either 'hard' or 'soft' (default)\n\n    Raises:\n      ValueError: if bootstrap_type is not either 'hard' or 'soft'\n    \"\"\"", "\n", "if", "bootstrap_type", "!=", "'hard'", "and", "bootstrap_type", "!=", "'soft'", ":", "\n", "      ", "raise", "ValueError", "(", "'Unrecognized bootstrap_type: must be one of '", "\n", "'\\'hard\\' or \\'soft.\\''", ")", "\n", "", "self", ".", "_alpha", "=", "alpha", "\n", "self", ".", "_bootstrap_type", "=", "bootstrap_type", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses.BootstrappedSigmoidClassificationLoss._compute_loss": [[445, 468], ["losses._sigmoid_cross_entropy_with_logits", "weights.unsqueeze", "torch.sigmoid", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses._sigmoid_cross_entropy_with_logits"], ["", "def", "_compute_loss", "(", "self", ",", "prediction_tensor", ",", "target_tensor", ",", "weights", ")", ":", "\n", "    ", "\"\"\"Compute loss function.\n\n    Args:\n      prediction_tensor: A float tensor of shape [batch_size, num_anchors,\n        num_classes] representing the predicted logits for each class\n      target_tensor: A float tensor of shape [batch_size, num_anchors,\n        num_classes] representing one-hot encoded classification targets\n      weights: a float tensor of shape [batch_size, num_anchors]\n\n    Returns:\n      loss: a float tensor of shape [batch_size, num_anchors, num_classes]\n        representing the value of the loss function.\n    \"\"\"", "\n", "if", "self", ".", "_bootstrap_type", "==", "'soft'", ":", "\n", "      ", "bootstrap_target_tensor", "=", "self", ".", "_alpha", "*", "target_tensor", "+", "(", "\n", "1.0", "-", "self", ".", "_alpha", ")", "*", "torch", ".", "sigmoid", "(", "prediction_tensor", ")", "\n", "", "else", ":", "\n", "      ", "bootstrap_target_tensor", "=", "self", ".", "_alpha", "*", "target_tensor", "+", "(", "\n", "1.0", "-", "self", ".", "_alpha", ")", "*", "(", "torch", ".", "sigmoid", "(", "prediction_tensor", ")", ">", "0.5", ")", ".", "float", "(", ")", "\n", "", "per_entry_cross_ent", "=", "(", "_sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "bootstrap_target_tensor", ",", "logits", "=", "prediction_tensor", ")", ")", "\n", "return", "per_entry_cross_ent", "*", "weights", ".", "unsqueeze", "(", "2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses.indices_to_dense_vector": [[36, 64], ["torch.zeros().fill_", "torch.zeros"], "function", ["None"], ["def", "indices_to_dense_vector", "(", "indices", ",", "\n", "size", ",", "\n", "indices_value", "=", "1.", ",", "\n", "default_value", "=", "0", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "  ", "\"\"\"Creates dense vector with indices set to specific value and rest to zeros.\n\n  This function exists because it is unclear if it is safe to use\n    tf.sparse_to_dense(indices, [size], 1, validate_indices=False)\n  with indices which are not ordered.\n  This function accepts a dynamic size (e.g. tf.shape(tensor)[0])\n\n  Args:\n    indices: 1d Tensor with integer indices which are to be set to\n        indices_values.\n    size: scalar with size (integer) of output Tensor.\n    indices_value: values of elements specified by indices in the output vector\n    default_value: values of other elements in the output vector.\n    dtype: data type.\n\n  Returns:\n    dense 1D Tensor of shape [size] with indices set to indices_values and the\n        rest set to default_value.\n  \"\"\"", "\n", "dense", "=", "torch", ".", "zeros", "(", "size", ")", ".", "fill_", "(", "default_value", ")", "\n", "dense", "[", "indices", "]", "=", "indices_value", "\n", "\n", "return", "dense", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses._sigmoid_cross_entropy_with_logits": [[199, 212], ["torch.log1p", "loss_mask.type().cuda.type().cuda", "torch.clamp", "torch.exp", "labels.type_as", "loss_mask.type().cuda.type", "torch.abs"], "function", ["None"], ["", "", "def", "_sigmoid_cross_entropy_with_logits", "(", "logits", ",", "labels", ")", ":", "\n", "# to be compatible with tensorflow, we don't use ignore_idx", "\n", "  ", "loss", "=", "torch", ".", "clamp", "(", "logits", ",", "min", "=", "0", ")", "-", "logits", "*", "labels", ".", "type_as", "(", "logits", ")", "# this is the original", "\n", "#loss = torch.clamp(logits, min=0) - torch.exp(logits) * labels.type_as(logits)", "\n", "loss", "+=", "torch", ".", "log1p", "(", "torch", ".", "exp", "(", "-", "torch", ".", "abs", "(", "logits", ")", ")", ")", "\n", "loss_mask", "=", "(", "loss", "<", "10000", ")", "\n", "loss_mask", "=", "loss_mask", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "cuda", "(", ")", "\n", "loss", "=", "loss", "*", "loss_mask", "\n", "# transpose_param = [0] + [param[-1]] + param[1:-1]", "\n", "# logits = logits.permute(*transpose_param)", "\n", "# loss_ftor = nn.NLLLoss(reduce=False)", "\n", "# loss = loss_ftor(F.logsigmoid(logits), labels)", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.losses._softmax_cross_entropy_with_logits": [[213, 220], ["list", "logits.permute.permute", "torch.nn.CrossEntropyLoss", "nn.CrossEntropyLoss.", "range", "len", "labels.max"], "function", ["None"], ["", "def", "_softmax_cross_entropy_with_logits", "(", "logits", ",", "labels", ")", ":", "\n", "  ", "param", "=", "list", "(", "range", "(", "len", "(", "logits", ".", "shape", ")", ")", ")", "\n", "transpose_param", "=", "[", "0", "]", "+", "[", "param", "[", "-", "1", "]", "]", "+", "param", "[", "1", ":", "-", "1", "]", "\n", "logits", "=", "logits", ".", "permute", "(", "*", "transpose_param", ")", "# [N, ..., C] -> [N, C, ...]", "\n", "loss_ftor", "=", "nn", ".", "CrossEntropyLoss", "(", "reduce", "=", "False", ")", "\n", "loss", "=", "loss_ftor", "(", "logits", ",", "labels", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "1", "]", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_ops.unmap": [[12, 27], ["len", "len", "numpy.empty", "np.empty.fill", "numpy.empty", "np.empty.fill"], "function", ["None"], ["def", "unmap", "(", "data", ",", "count", ",", "inds", ",", "fill", "=", "0", ")", ":", "\n", "    ", "\"\"\"Unmap a subset of item (data) back to the original set of items (of\n    size count)\"\"\"", "\n", "if", "count", "==", "len", "(", "inds", ")", ":", "\n", "        ", "return", "data", "\n", "\n", "", "if", "len", "(", "data", ".", "shape", ")", "==", "1", ":", "\n", "        ", "ret", "=", "np", ".", "empty", "(", "(", "count", ",", ")", ",", "dtype", "=", "data", ".", "dtype", ")", "\n", "ret", ".", "fill", "(", "fill", ")", "\n", "ret", "[", "inds", "]", "=", "data", "\n", "", "else", ":", "\n", "        ", "ret", "=", "np", ".", "empty", "(", "(", "count", ",", ")", "+", "data", ".", "shape", "[", "1", ":", "]", ",", "dtype", "=", "data", ".", "dtype", ")", "\n", "ret", ".", "fill", "(", "fill", ")", "\n", "ret", "[", "inds", ",", ":", "]", "=", "data", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_ops.create_target_np": [[31, 215], ["logger.debug", "logger.debug", "logger.debug", "numpy.empty", "numpy.empty", "unmap.fill", "np.empty.fill", "numpy.zeros", "numpy.zeros", "prune_anchor_fn", "len", "numpy.ones", "similarity_fn", "similarity_fn.argmax", "similarity_fn.argmax", "numpy.arange", "numpy.where", "int", "box_encoding_fn", "numpy.sum", "numpy.maximum", "target_ops.unmap", "target_ops.unmap", "target_ops.unmap", "isinstance", "isinstance", "len", "numpy.where", "numpy.where", "len", "len", "numpy.choice", "numpy.sum", "len", "numpy.where", "len", "numpy.where", "len", "numpy.arange", "numpy.arange", "numpy.randint", "len", "len"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_ops.unmap", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_ops.unmap", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_ops.unmap"], ["", "def", "create_target_np", "(", "all_anchors", ",", "\n", "gt_boxes", ",", "\n", "similarity_fn", ",", "\n", "box_encoding_fn", ",", "\n", "prune_anchor_fn", "=", "None", ",", "\n", "gt_classes", "=", "None", ",", "\n", "matched_threshold", "=", "0.6", ",", "\n", "unmatched_threshold", "=", "0.45", ",", "\n", "bbox_inside_weight", "=", "None", ",", "\n", "positive_fraction", "=", "None", ",", "\n", "rpn_batch_size", "=", "300", ",", "\n", "norm_by_num_examples", "=", "False", ",", "\n", "box_code_size", "=", "7", ")", ":", "\n", "    ", "\"\"\"Modified from FAIR detectron.\n    Args:\n        all_anchors: [num_of_anchors, box_ndim] float tensor.\n        gt_boxes: [num_gt_boxes, box_ndim] float tensor.\n        similarity_fn: a function, accept anchors and gt_boxes, return\n            similarity matrix(such as IoU).\n        box_encoding_fn: a function, accept gt_boxes and anchors, return\n            box encodings(offsets).\n        prune_anchor_fn: a function, accept anchors, return indices that\n            indicate valid anchors.\n        gt_classes: [num_gt_boxes] int tensor. indicate gt classes, must\n            start with 1.\n        matched_threshold: float, iou greater than matched_threshold will\n            be treated as positives.\n        unmatched_threshold: float, iou smaller than unmatched_threshold will\n            be treated as negatives.\n        bbox_inside_weight: unused\n        positive_fraction: [0-1] float or None. if not None, we will try to\n            keep ratio of pos/neg equal to positive_fraction when sample.\n            if there is not enough positives, it fills the rest with negatives\n        rpn_batch_size: int. sample size\n        norm_by_num_examples: bool. norm box_weight by number of examples, but\n            I recommend to do this outside.\n    Returns:\n        labels, bbox_targets, bbox_outside_weights\n    \"\"\"", "\n", "total_anchors", "=", "all_anchors", ".", "shape", "[", "0", "]", "\n", "if", "prune_anchor_fn", "is", "not", "None", ":", "\n", "        ", "inds_inside", "=", "prune_anchor_fn", "(", "all_anchors", ")", "\n", "anchors", "=", "all_anchors", "[", "inds_inside", ",", ":", "]", "\n", "if", "not", "isinstance", "(", "matched_threshold", ",", "float", ")", ":", "\n", "            ", "matched_threshold", "=", "matched_threshold", "[", "inds_inside", "]", "\n", "", "if", "not", "isinstance", "(", "unmatched_threshold", ",", "float", ")", ":", "\n", "            ", "unmatched_threshold", "=", "unmatched_threshold", "[", "inds_inside", "]", "\n", "", "", "else", ":", "\n", "        ", "anchors", "=", "all_anchors", "\n", "inds_inside", "=", "None", "\n", "", "num_inside", "=", "len", "(", "inds_inside", ")", "if", "inds_inside", "is", "not", "None", "else", "total_anchors", "\n", "box_ndim", "=", "all_anchors", ".", "shape", "[", "1", "]", "\n", "logger", ".", "debug", "(", "'total_anchors: {}'", ".", "format", "(", "total_anchors", ")", ")", "\n", "logger", ".", "debug", "(", "'inds_inside: {}'", ".", "format", "(", "num_inside", ")", ")", "\n", "logger", ".", "debug", "(", "'anchors.shape: {}'", ".", "format", "(", "anchors", ".", "shape", ")", ")", "\n", "if", "gt_classes", "is", "None", ":", "\n", "        ", "gt_classes", "=", "np", ".", "ones", "(", "[", "gt_boxes", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# Compute anchor labels:", "\n", "# label=1 is positive, 0 is negative, -1 is don't care (ignore)", "\n", "", "labels", "=", "np", ".", "empty", "(", "(", "num_inside", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "gt_ids", "=", "np", ".", "empty", "(", "(", "num_inside", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "labels", ".", "fill", "(", "-", "1", ")", "\n", "gt_ids", ".", "fill", "(", "-", "1", ")", "\n", "if", "len", "(", "gt_boxes", ")", ">", "0", "and", "anchors", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "# Compute overlaps between the anchors and the gt boxes overlaps", "\n", "        ", "anchor_by_gt_overlap", "=", "similarity_fn", "(", "anchors", ",", "gt_boxes", ")", "\n", "# Map from anchor to gt box that has highest overlap", "\n", "anchor_to_gt_argmax", "=", "anchor_by_gt_overlap", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "# For each anchor, amount of overlap with most overlapping gt box", "\n", "anchor_to_gt_max", "=", "anchor_by_gt_overlap", "[", "np", ".", "arange", "(", "num_inside", ")", ",", "\n", "anchor_to_gt_argmax", "]", "#", "\n", "# Map from gt box to an anchor that has highest overlap", "\n", "gt_to_anchor_argmax", "=", "anchor_by_gt_overlap", ".", "argmax", "(", "axis", "=", "0", ")", "\n", "# For each gt box, amount of overlap with most overlapping anchor", "\n", "gt_to_anchor_max", "=", "anchor_by_gt_overlap", "[", "\n", "gt_to_anchor_argmax", ",", "\n", "np", ".", "arange", "(", "anchor_by_gt_overlap", ".", "shape", "[", "1", "]", ")", "]", "\n", "# must remove gt which doesn't match any anchor.", "\n", "empty_gt_mask", "=", "gt_to_anchor_max", "==", "0", "\n", "gt_to_anchor_max", "[", "empty_gt_mask", "]", "=", "-", "1", "\n", "# Find all anchors that share the max overlap amount", "\n", "# (this includes many ties)", "\n", "anchors_with_max_overlap", "=", "np", ".", "where", "(", "\n", "anchor_by_gt_overlap", "==", "gt_to_anchor_max", ")", "[", "0", "]", "\n", "# Fg label: for each gt use anchors with highest overlap", "\n", "# (including ties)", "\n", "gt_inds_force", "=", "anchor_to_gt_argmax", "[", "anchors_with_max_overlap", "]", "\n", "labels", "[", "anchors_with_max_overlap", "]", "=", "gt_classes", "[", "gt_inds_force", "]", "\n", "gt_ids", "[", "anchors_with_max_overlap", "]", "=", "gt_inds_force", "\n", "# Fg label: above threshold IOU", "\n", "pos_inds", "=", "anchor_to_gt_max", ">=", "matched_threshold", "\n", "gt_inds", "=", "anchor_to_gt_argmax", "[", "pos_inds", "]", "\n", "labels", "[", "pos_inds", "]", "=", "gt_classes", "[", "gt_inds", "]", "\n", "gt_ids", "[", "pos_inds", "]", "=", "gt_inds", "\n", "bg_inds", "=", "np", ".", "where", "(", "anchor_to_gt_max", "<", "unmatched_threshold", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "# labels[:] = 0", "\n", "        ", "bg_inds", "=", "np", ".", "arange", "(", "num_inside", ")", "\n", "", "fg_inds", "=", "np", ".", "where", "(", "labels", ">", "0", ")", "[", "0", "]", "\n", "fg_max_overlap", "=", "None", "\n", "if", "len", "(", "gt_boxes", ")", ">", "0", "and", "anchors", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "        ", "fg_max_overlap", "=", "anchor_to_gt_max", "[", "fg_inds", "]", "\n", "", "gt_pos_ids", "=", "gt_ids", "[", "fg_inds", "]", "\n", "# bg_inds = np.where(anchor_to_gt_max < unmatched_threshold)[0]", "\n", "# bg_inds = np.where(labels == 0)[0]", "\n", "# subsample positive labels if we have too many", "\n", "if", "positive_fraction", "is", "not", "None", ":", "\n", "        ", "num_fg", "=", "int", "(", "positive_fraction", "*", "rpn_batch_size", ")", "\n", "if", "len", "(", "fg_inds", ")", ">", "num_fg", ":", "\n", "            ", "disable_inds", "=", "npr", ".", "choice", "(", "\n", "fg_inds", ",", "size", "=", "(", "len", "(", "fg_inds", ")", "-", "num_fg", ")", ",", "replace", "=", "False", ")", "\n", "labels", "[", "disable_inds", "]", "=", "-", "1", "\n", "fg_inds", "=", "np", ".", "where", "(", "labels", ">", "0", ")", "[", "0", "]", "\n", "\n", "# subsample negative labels if we have too many", "\n", "# (samples with replacement, but since the set of bg inds is large most", "\n", "# samples will not have repeats)", "\n", "", "num_bg", "=", "rpn_batch_size", "-", "np", ".", "sum", "(", "labels", ">", "0", ")", "\n", "# print(num_fg, num_bg, len(bg_inds) )", "\n", "if", "len", "(", "bg_inds", ")", ">", "num_bg", ":", "\n", "            ", "enable_inds", "=", "bg_inds", "[", "npr", ".", "randint", "(", "len", "(", "bg_inds", ")", ",", "size", "=", "num_bg", ")", "]", "\n", "labels", "[", "enable_inds", "]", "=", "0", "\n", "", "bg_inds", "=", "np", ".", "where", "(", "labels", "==", "0", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "if", "len", "(", "gt_boxes", ")", "==", "0", "or", "anchors", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "labels", "[", ":", "]", "=", "0", "\n", "", "else", ":", "\n", "            ", "labels", "[", "bg_inds", "]", "=", "0", "\n", "# re-enable anchors_with_max_overlap", "\n", "labels", "[", "anchors_with_max_overlap", "]", "=", "gt_classes", "[", "gt_inds_force", "]", "\n", "", "", "bbox_targets", "=", "np", ".", "zeros", "(", "\n", "(", "num_inside", ",", "box_code_size", ")", ",", "dtype", "=", "all_anchors", ".", "dtype", ")", "\n", "if", "len", "(", "gt_boxes", ")", ">", "0", "and", "anchors", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "# print(anchors[fg_inds, :].shape, gt_boxes[anchor_to_gt_argmax[fg_inds], :].shape)", "\n", "# bbox_targets[fg_inds, :] = box_encoding_fn(", "\n", "#     anchors[fg_inds, :], gt_boxes[anchor_to_gt_argmax[fg_inds], :])", "\n", "        ", "bbox_targets", "[", "fg_inds", ",", ":", "]", "=", "box_encoding_fn", "(", "\n", "gt_boxes", "[", "anchor_to_gt_argmax", "[", "fg_inds", "]", ",", ":", "]", ",", "anchors", "[", "fg_inds", ",", ":", "]", ")", "\n", "# Bbox regression loss has the form:", "\n", "#   loss(x) = weight_outside * L(weight_inside * x)", "\n", "# Inside weights allow us to set zero loss on an element-wise basis", "\n", "# Bbox regression is only trained on positive examples so we set their", "\n", "# weights to 1.0 (or otherwise if config is different) and 0 otherwise", "\n", "# NOTE: we don't need bbox_inside_weights, remove it.", "\n", "# bbox_inside_weights = np.zeros((num_inside, box_ndim), dtype=np.float32)", "\n", "# bbox_inside_weights[labels == 1, :] = [1.0] * box_ndim", "\n", "\n", "# The bbox regression loss only averages by the number of images in the", "\n", "# mini-batch, whereas we need to average by the total number of example", "\n", "# anchors selected", "\n", "# Outside weights are used to scale each element-wise loss so the final", "\n", "# average over the mini-batch is correct", "\n", "# bbox_outside_weights = np.zeros((num_inside, box_ndim), dtype=np.float32)", "\n", "", "bbox_outside_weights", "=", "np", ".", "zeros", "(", "(", "num_inside", ",", ")", ",", "dtype", "=", "all_anchors", ".", "dtype", ")", "\n", "# uniform weighting of examples (given non-uniform sampling)", "\n", "if", "norm_by_num_examples", ":", "\n", "        ", "num_examples", "=", "np", ".", "sum", "(", "labels", ">=", "0", ")", "# neg + pos", "\n", "num_examples", "=", "np", ".", "maximum", "(", "1.0", ",", "num_examples", ")", "\n", "bbox_outside_weights", "[", "labels", ">", "0", "]", "=", "1.0", "/", "num_examples", "\n", "", "else", ":", "\n", "        ", "bbox_outside_weights", "[", "labels", ">", "0", "]", "=", "1.0", "\n", "# bbox_outside_weights[labels == 0, :] = 1.0 / num_examples", "\n", "\n", "# Map up to original set of anchors", "\n", "", "if", "inds_inside", "is", "not", "None", ":", "\n", "        ", "labels", "=", "unmap", "(", "labels", ",", "total_anchors", ",", "inds_inside", ",", "fill", "=", "-", "1", ")", "\n", "bbox_targets", "=", "unmap", "(", "bbox_targets", ",", "total_anchors", ",", "inds_inside", ",", "fill", "=", "0", ")", "\n", "# bbox_inside_weights = unmap(", "\n", "#     bbox_inside_weights, total_anchors, inds_inside, fill=0)", "\n", "bbox_outside_weights", "=", "unmap", "(", "\n", "bbox_outside_weights", ",", "total_anchors", ",", "inds_inside", ",", "fill", "=", "0", ")", "\n", "# return labels, bbox_targets, bbox_outside_weights", "\n", "", "ret", "=", "{", "\n", "\"labels\"", ":", "labels", ",", "\n", "\"bbox_targets\"", ":", "bbox_targets", ",", "\n", "\"bbox_outside_weights\"", ":", "bbox_outside_weights", ",", "\n", "\"assigned_anchors_overlap\"", ":", "fg_max_overlap", ",", "\n", "\"positive_gt_id\"", ":", "gt_pos_ids", ",", "\n", "}", "\n", "if", "inds_inside", "is", "not", "None", ":", "\n", "        ", "ret", "[", "\"assigned_anchors_inds\"", "]", "=", "inds_inside", "[", "fg_inds", "]", "\n", "", "else", ":", "\n", "        ", "ret", "[", "\"assigned_anchors_inds\"", "]", "=", "fg_inds", "\n", "", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.riou_cc": [[9, 21], ["box_np_ops.center_to_corner_box2d", "box_np_ops.corner_to_standup_nd", "box_np_ops.center_to_corner_box2d", "box_np_ops.corner_to_standup_nd", "box_np_ops.iou_jit", "spconv.utils.rbbox_iou"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box2d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corner_to_standup_nd", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box2d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corner_to_standup_nd", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.iou_jit"], ["def", "riou_cc", "(", "rbboxes", ",", "qrbboxes", ",", "standup_thresh", "=", "0.0", ")", ":", "\n", "# less than 50ms when used in second one thread. 10x slower than gpu", "\n", "    ", "boxes_corners", "=", "center_to_corner_box2d", "(", "rbboxes", "[", ":", ",", ":", "2", "]", ",", "rbboxes", "[", ":", ",", "2", ":", "4", "]", ",", "\n", "rbboxes", "[", ":", ",", "4", "]", ")", "\n", "boxes_standup", "=", "corner_to_standup_nd", "(", "boxes_corners", ")", "\n", "qboxes_corners", "=", "center_to_corner_box2d", "(", "qrbboxes", "[", ":", ",", ":", "2", "]", ",", "qrbboxes", "[", ":", ",", "2", ":", "4", "]", ",", "\n", "qrbboxes", "[", ":", ",", "4", "]", ")", "\n", "qboxes_standup", "=", "corner_to_standup_nd", "(", "qboxes_corners", ")", "\n", "# if standup box not overlapped, rbbox not overlapped too.", "\n", "standup_iou", "=", "iou_jit", "(", "boxes_standup", ",", "qboxes_standup", ",", "eps", "=", "0.0", ")", "\n", "return", "rbbox_iou", "(", "boxes_corners", ",", "qboxes_corners", ",", "standup_iou", ",", "\n", "standup_thresh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.second_box_encode": [[23, 60], ["numpy.split", "numpy.split", "numpy.sqrt", "numpy.log", "numpy.log", "numpy.log", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.concatenate", "numpy.concatenate"], "function", ["None"], ["", "def", "second_box_encode", "(", "boxes", ",", "anchors", ",", "encode_angle_to_vector", "=", "False", ",", "smooth_dim", "=", "False", ")", ":", "\n", "    ", "\"\"\"box encode for VoxelNet in lidar\n    Args:\n        boxes ([N, 7] Tensor): normal boxes: x, y, z, w, l, h, r\n        anchors ([N, 7] Tensor): anchors\n        encode_angle_to_vector: bool. increase aos performance,\n            decrease other performance.\n    \"\"\"", "\n", "# need to convert boxes to z-center format", "\n", "xa", ",", "ya", ",", "za", ",", "wa", ",", "la", ",", "ha", ",", "ra", "=", "np", ".", "split", "(", "anchors", ",", "7", ",", "axis", "=", "-", "1", ")", "\n", "xg", ",", "yg", ",", "zg", ",", "wg", ",", "lg", ",", "hg", ",", "rg", "=", "np", ".", "split", "(", "boxes", ",", "7", ",", "axis", "=", "-", "1", ")", "\n", "zg", "=", "zg", "+", "hg", "/", "2", "\n", "za", "=", "za", "+", "ha", "/", "2", "\n", "diagonal", "=", "np", ".", "sqrt", "(", "la", "**", "2", "+", "wa", "**", "2", ")", "# 4.3", "\n", "xt", "=", "(", "xg", "-", "xa", ")", "/", "diagonal", "\n", "yt", "=", "(", "yg", "-", "ya", ")", "/", "diagonal", "\n", "\n", "zt", "=", "(", "zg", "-", "za", ")", "/", "ha", "# 1.6", "\n", "if", "smooth_dim", ":", "\n", "        ", "lt", "=", "lg", "/", "la", "-", "1", "\n", "wt", "=", "wg", "/", "wa", "-", "1", "\n", "ht", "=", "hg", "/", "ha", "-", "1", "\n", "", "else", ":", "\n", "        ", "lt", "=", "np", ".", "log", "(", "lg", "/", "la", ")", "\n", "wt", "=", "np", ".", "log", "(", "wg", "/", "wa", ")", "\n", "ht", "=", "np", ".", "log", "(", "hg", "/", "ha", ")", "\n", "", "if", "encode_angle_to_vector", ":", "\n", "        ", "rgx", "=", "np", ".", "cos", "(", "rg", ")", "\n", "rgy", "=", "np", ".", "sin", "(", "rg", ")", "\n", "rax", "=", "np", ".", "cos", "(", "ra", ")", "\n", "ray", "=", "np", ".", "sin", "(", "ra", ")", "\n", "rtx", "=", "rgx", "-", "rax", "\n", "rty", "=", "rgy", "-", "ray", "\n", "return", "np", ".", "concatenate", "(", "[", "xt", ",", "yt", ",", "zt", ",", "wt", ",", "lt", ",", "ht", ",", "rtx", ",", "rty", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "rt", "=", "rg", "-", "ra", "\n", "return", "np", ".", "concatenate", "(", "[", "xt", ",", "yt", ",", "zt", ",", "wt", ",", "lt", ",", "ht", ",", "rt", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.second_box_decode": [[62, 98], ["numpy.split", "numpy.sqrt", "numpy.concatenate", "numpy.split", "numpy.split", "numpy.cos", "numpy.sin", "numpy.arctan2", "numpy.exp", "numpy.exp", "numpy.exp"], "function", ["None"], ["", "", "def", "second_box_decode", "(", "box_encodings", ",", "anchors", ",", "encode_angle_to_vector", "=", "False", ",", "smooth_dim", "=", "False", ")", ":", "\n", "    ", "\"\"\"box decode for VoxelNet in lidar\n    Args:\n        boxes ([N, 7] Tensor): normal boxes: x, y, z, w, l, h, r\n        anchors ([N, 7] Tensor): anchors\n    \"\"\"", "\n", "# need to convert box_encodings to z-bottom format", "\n", "xa", ",", "ya", ",", "za", ",", "wa", ",", "la", ",", "ha", ",", "ra", "=", "np", ".", "split", "(", "anchors", ",", "7", ",", "axis", "=", "-", "1", ")", "\n", "if", "encode_angle_to_vector", ":", "\n", "        ", "xt", ",", "yt", ",", "zt", ",", "wt", ",", "lt", ",", "ht", ",", "rtx", ",", "rty", "=", "np", ".", "split", "(", "box_encodings", ",", "8", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "xt", ",", "yt", ",", "zt", ",", "wt", ",", "lt", ",", "ht", ",", "rt", "=", "np", ".", "split", "(", "box_encodings", ",", "7", ",", "axis", "=", "-", "1", ")", "\n", "", "za", "=", "za", "+", "ha", "/", "2", "\n", "diagonal", "=", "np", ".", "sqrt", "(", "la", "**", "2", "+", "wa", "**", "2", ")", "\n", "xg", "=", "xt", "*", "diagonal", "+", "xa", "\n", "yg", "=", "yt", "*", "diagonal", "+", "ya", "\n", "\n", "zg", "=", "zt", "*", "ha", "+", "za", "\n", "if", "smooth_dim", ":", "\n", "        ", "lg", "=", "(", "lt", "+", "1", ")", "*", "la", "\n", "wg", "=", "(", "wt", "+", "1", ")", "*", "wa", "\n", "hg", "=", "(", "ht", "+", "1", ")", "*", "ha", "\n", "", "else", ":", "\n", "        ", "lg", "=", "np", ".", "exp", "(", "lt", ")", "*", "la", "\n", "wg", "=", "np", ".", "exp", "(", "wt", ")", "*", "wa", "\n", "hg", "=", "np", ".", "exp", "(", "ht", ")", "*", "ha", "\n", "", "if", "encode_angle_to_vector", ":", "\n", "        ", "rax", "=", "np", ".", "cos", "(", "ra", ")", "\n", "ray", "=", "np", ".", "sin", "(", "ra", ")", "\n", "rgx", "=", "rtx", "+", "rax", "\n", "rgy", "=", "rty", "+", "ray", "\n", "rg", "=", "np", ".", "arctan2", "(", "rgy", ",", "rgx", ")", "\n", "", "else", ":", "\n", "        ", "rg", "=", "rt", "+", "ra", "\n", "", "zg", "=", "zg", "-", "hg", "/", "2", "\n", "return", "np", ".", "concatenate", "(", "[", "xg", ",", "yg", ",", "zg", ",", "wg", ",", "lg", ",", "hg", ",", "rg", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.bev_box_encode": [[99, 130], ["numpy.split", "numpy.split", "numpy.sqrt", "numpy.log", "numpy.log", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.concatenate", "numpy.concatenate"], "function", ["None"], ["", "def", "bev_box_encode", "(", "boxes", ",", "anchors", ",", "encode_angle_to_vector", "=", "False", ",", "smooth_dim", "=", "False", ")", ":", "\n", "    ", "\"\"\"box encode for VoxelNet in lidar\n    Args:\n        boxes ([N, 7] Tensor): normal boxes: x, y, z, w, l, h, r\n        anchors ([N, 7] Tensor): anchors\n        encode_angle_to_vector: bool. increase aos performance,\n            decrease other performance.\n    \"\"\"", "\n", "# need to convert boxes to z-center format", "\n", "xa", ",", "ya", ",", "wa", ",", "la", ",", "ra", "=", "np", ".", "split", "(", "anchors", ",", "5", ",", "axis", "=", "-", "1", ")", "\n", "xg", ",", "yg", ",", "wg", ",", "lg", ",", "rg", "=", "np", ".", "split", "(", "boxes", ",", "5", ",", "axis", "=", "-", "1", ")", "\n", "diagonal", "=", "np", ".", "sqrt", "(", "la", "**", "2", "+", "wa", "**", "2", ")", "# 4.3", "\n", "xt", "=", "(", "xg", "-", "xa", ")", "/", "diagonal", "\n", "yt", "=", "(", "yg", "-", "ya", ")", "/", "diagonal", "\n", "if", "smooth_dim", ":", "\n", "        ", "lt", "=", "lg", "/", "la", "-", "1", "\n", "wt", "=", "wg", "/", "wa", "-", "1", "\n", "", "else", ":", "\n", "        ", "lt", "=", "np", ".", "log", "(", "lg", "/", "la", ")", "\n", "wt", "=", "np", ".", "log", "(", "wg", "/", "wa", ")", "\n", "", "if", "encode_angle_to_vector", ":", "\n", "        ", "rgx", "=", "np", ".", "cos", "(", "rg", ")", "\n", "rgy", "=", "np", ".", "sin", "(", "rg", ")", "\n", "rax", "=", "np", ".", "cos", "(", "ra", ")", "\n", "ray", "=", "np", ".", "sin", "(", "ra", ")", "\n", "rtx", "=", "rgx", "-", "rax", "\n", "rty", "=", "rgy", "-", "ray", "\n", "return", "np", ".", "concatenate", "(", "[", "xt", ",", "yt", ",", "wt", ",", "lt", ",", "rtx", ",", "rty", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "rt", "=", "rg", "-", "ra", "\n", "return", "np", ".", "concatenate", "(", "[", "xt", ",", "yt", ",", "wt", ",", "lt", ",", "rt", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.bev_box_decode": [[132, 162], ["numpy.split", "numpy.sqrt", "numpy.concatenate", "numpy.split", "numpy.split", "numpy.cos", "numpy.sin", "numpy.arctan2", "numpy.exp", "numpy.exp"], "function", ["None"], ["", "", "def", "bev_box_decode", "(", "box_encodings", ",", "anchors", ",", "encode_angle_to_vector", "=", "False", ",", "smooth_dim", "=", "False", ")", ":", "\n", "    ", "\"\"\"box decode for VoxelNet in lidar\n    Args:\n        boxes ([N, 7] Tensor): normal boxes: x, y, z, w, l, h, r\n        anchors ([N, 7] Tensor): anchors\n    \"\"\"", "\n", "# need to convert box_encodings to z-bottom format", "\n", "xa", ",", "ya", ",", "wa", ",", "la", ",", "ra", "=", "np", ".", "split", "(", "anchors", ",", "5", ",", "axis", "=", "-", "1", ")", "\n", "if", "encode_angle_to_vector", ":", "\n", "        ", "xt", ",", "yt", ",", "wt", ",", "lt", ",", "rtx", ",", "rty", "=", "np", ".", "split", "(", "box_encodings", ",", "6", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "xt", ",", "yt", ",", "wt", ",", "lt", ",", "rt", "=", "np", ".", "split", "(", "box_encodings", ",", "5", ",", "axis", "=", "-", "1", ")", "\n", "", "diagonal", "=", "np", ".", "sqrt", "(", "la", "**", "2", "+", "wa", "**", "2", ")", "\n", "xg", "=", "xt", "*", "diagonal", "+", "xa", "\n", "yg", "=", "yt", "*", "diagonal", "+", "ya", "\n", "if", "smooth_dim", ":", "\n", "        ", "lg", "=", "(", "lt", "+", "1", ")", "*", "la", "\n", "wg", "=", "(", "wt", "+", "1", ")", "*", "wa", "\n", "", "else", ":", "\n", "        ", "lg", "=", "np", ".", "exp", "(", "lt", ")", "*", "la", "\n", "wg", "=", "np", ".", "exp", "(", "wt", ")", "*", "wa", "\n", "", "if", "encode_angle_to_vector", ":", "\n", "        ", "rax", "=", "np", ".", "cos", "(", "ra", ")", "\n", "ray", "=", "np", ".", "sin", "(", "ra", ")", "\n", "rgx", "=", "rtx", "+", "rax", "\n", "rgy", "=", "rty", "+", "ray", "\n", "rg", "=", "np", ".", "arctan2", "(", "rgy", ",", "rgx", ")", "\n", "", "else", ":", "\n", "        ", "rg", "=", "rt", "+", "ra", "\n", "", "return", "np", ".", "concatenate", "(", "[", "xg", ",", "yg", ",", "wg", ",", "lg", ",", "rg", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corners_nd": [[163, 195], ["int", "numpy.stack().astype", "numpy.array", "dims.reshape", "np.stack().astype.reshape", "numpy.stack", "numpy.unravel_index", "numpy.arange"], "function", ["None"], ["", "def", "corners_nd", "(", "dims", ",", "origin", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"generate relative box corners based on length per dim and\n    origin point.\n\n    Args:\n        dims (float array, shape=[N, ndim]): array of length per dim\n        origin (list or array or float): origin point relate to smallest point.\n\n    Returns:\n        float array, shape=[N, 2 ** ndim, ndim]: returned corners.\n        point layout example: (2d) x0y0, x0y1, x1y0, x1y1;\n            (3d) x0y0z0, x0y0z1, x0y1z0, x0y1z1, x1y0z0, x1y0z1, x1y1z0, x1y1z1\n            where x0 < x1, y0 < y1, z0 < z1\n    \"\"\"", "\n", "ndim", "=", "int", "(", "dims", ".", "shape", "[", "1", "]", ")", "\n", "corners_norm", "=", "np", ".", "stack", "(", "\n", "np", ".", "unravel_index", "(", "np", ".", "arange", "(", "2", "**", "ndim", ")", ",", "[", "2", "]", "*", "ndim", ")", ",", "axis", "=", "1", ")", ".", "astype", "(", "\n", "dims", ".", "dtype", ")", "\n", "# now corners_norm has format: (2d) x0y0, x0y1, x1y0, x1y1", "\n", "# (3d) x0y0z0, x0y0z1, x0y1z0, x0y1z1, x1y0z0, x1y0z1, x1y1z0, x1y1z1", "\n", "# so need to convert to a format which is convenient to do other computing.", "\n", "# for 2d boxes, format is clockwise start with minimum point", "\n", "# for 3d boxes, please draw lines by your hand.", "\n", "if", "ndim", "==", "2", ":", "\n", "# generate clockwise box corners", "\n", "        ", "corners_norm", "=", "corners_norm", "[", "[", "0", ",", "1", ",", "3", ",", "2", "]", "]", "\n", "", "elif", "ndim", "==", "3", ":", "\n", "        ", "corners_norm", "=", "corners_norm", "[", "[", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ",", "7", ",", "6", "]", "]", "\n", "", "corners_norm", "=", "corners_norm", "-", "np", ".", "array", "(", "origin", ",", "dtype", "=", "dims", ".", "dtype", ")", "\n", "corners", "=", "dims", ".", "reshape", "(", "[", "-", "1", ",", "1", ",", "ndim", "]", ")", "*", "corners_norm", ".", "reshape", "(", "\n", "[", "1", ",", "2", "**", "ndim", ",", "ndim", "]", ")", "\n", "return", "corners", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corners_2d_jit": [[197, 205], ["numpy.array", "numpy.array", "dims.reshape", "np.array.reshape"], "function", ["None"], ["", "@", "numba", ".", "njit", "\n", "def", "corners_2d_jit", "(", "dims", ",", "origin", "=", "0.5", ")", ":", "\n", "    ", "ndim", "=", "2", "\n", "corners_norm", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "0", "]", "]", ",", "dtype", "=", "dims", ".", "dtype", ")", "\n", "corners_norm", "=", "corners_norm", "-", "np", ".", "array", "(", "origin", ",", "dtype", "=", "dims", ".", "dtype", ")", "\n", "corners", "=", "dims", ".", "reshape", "(", "(", "-", "1", ",", "1", ",", "ndim", ")", ")", "*", "corners_norm", ".", "reshape", "(", "\n", "(", "1", ",", "2", "**", "ndim", ",", "ndim", ")", ")", "\n", "return", "corners", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corners_3d_jit": [[206, 215], ["numpy.array().reshape", "numpy.array", "dims.reshape", "np.array().reshape.reshape", "numpy.array"], "function", ["None"], ["", "@", "numba", ".", "njit", "\n", "def", "corners_3d_jit", "(", "dims", ",", "origin", "=", "0.5", ")", ":", "\n", "    ", "ndim", "=", "3", "\n", "corners_norm", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", "]", ",", "dtype", "=", "dims", ".", "dtype", ")", ".", "reshape", "(", "(", "8", ",", "3", ")", ")", "\n", "corners_norm", "=", "corners_norm", "[", "[", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ",", "7", ",", "6", "]", "]", "\n", "corners_norm", "=", "corners_norm", "-", "np", ".", "array", "(", "origin", ",", "dtype", "=", "dims", ".", "dtype", ")", "\n", "corners", "=", "dims", ".", "reshape", "(", "(", "-", "1", ",", "1", ",", "ndim", ")", ")", "*", "corners_norm", ".", "reshape", "(", "\n", "(", "1", ",", "2", "**", "ndim", ",", "ndim", ")", ")", "\n", "return", "corners", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corner_to_standup_nd_jit": [[216, 227], ["numpy.zeros", "range", "range", "range", "numpy.min", "numpy.max"], "function", ["None"], ["", "@", "numba", ".", "njit", "\n", "def", "corner_to_standup_nd_jit", "(", "boxes_corner", ")", ":", "\n", "    ", "num_boxes", "=", "boxes_corner", ".", "shape", "[", "0", "]", "\n", "ndim", "=", "boxes_corner", ".", "shape", "[", "-", "1", "]", "\n", "result", "=", "np", ".", "zeros", "(", "(", "num_boxes", ",", "ndim", "*", "2", ")", ",", "dtype", "=", "boxes_corner", ".", "dtype", ")", "\n", "for", "i", "in", "range", "(", "num_boxes", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "ndim", ")", ":", "\n", "            ", "result", "[", "i", ",", "j", "]", "=", "np", ".", "min", "(", "boxes_corner", "[", "i", ",", ":", ",", "j", "]", ")", "\n", "", "for", "j", "in", "range", "(", "ndim", ")", ":", "\n", "            ", "result", "[", "i", ",", "j", "+", "ndim", "]", "=", "np", ".", "max", "(", "boxes_corner", "[", "i", ",", ":", ",", "j", "]", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corner_to_standup_nd": [[229, 235], ["standup_boxes.append", "standup_boxes.append", "numpy.concatenate", "len", "numpy.min", "numpy.max"], "function", ["None"], ["", "def", "corner_to_standup_nd", "(", "boxes_corner", ")", ":", "\n", "    ", "assert", "len", "(", "boxes_corner", ".", "shape", ")", "==", "3", "\n", "standup_boxes", "=", "[", "]", "\n", "standup_boxes", ".", "append", "(", "np", ".", "min", "(", "boxes_corner", ",", "axis", "=", "1", ")", ")", "\n", "standup_boxes", ".", "append", "(", "np", ".", "max", "(", "boxes_corner", ",", "axis", "=", "1", ")", ")", "\n", "return", "np", ".", "concatenate", "(", "standup_boxes", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rbbox2d_to_near_bbox": [[237, 250], ["numpy.abs", "numpy.where", "box_np_ops.center_to_minmax_2d", "box_np_ops.limit_period"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_minmax_2d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.limit_period"], ["", "def", "rbbox2d_to_near_bbox", "(", "rbboxes", ")", ":", "\n", "    ", "\"\"\"convert rotated bbox to nearest 'standing' or 'lying' bbox.\n    Args:\n        rbboxes: [N, 5(x, y, xdim, ydim, rad)] rotated bboxes\n    Returns:\n        bboxes: [N, 4(xmin, ymin, xmax, ymax)] bboxes\n    \"\"\"", "\n", "rots", "=", "rbboxes", "[", "...", ",", "-", "1", "]", "\n", "rots_0_pi_div_2", "=", "np", ".", "abs", "(", "limit_period", "(", "rots", ",", "0.5", ",", "np", ".", "pi", ")", ")", "\n", "cond", "=", "(", "rots_0_pi_div_2", ">", "np", ".", "pi", "/", "4", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "bboxes_center", "=", "np", ".", "where", "(", "cond", ",", "rbboxes", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "2", "]", "]", ",", "rbboxes", "[", ":", ",", ":", "4", "]", ")", "\n", "bboxes", "=", "center_to_minmax_2d", "(", "bboxes_center", "[", ":", ",", ":", "2", "]", ",", "bboxes_center", "[", ":", ",", "2", ":", "]", ")", "\n", "return", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rotation_3d_in_axis": [[252, 271], ["numpy.sin", "numpy.cos", "numpy.ones_like", "numpy.zeros_like", "numpy.einsum", "numpy.stack", "numpy.stack", "numpy.stack", "ValueError"], "function", ["None"], ["", "def", "rotation_3d_in_axis", "(", "points", ",", "angles", ",", "axis", "=", "0", ")", ":", "\n", "# points: [N, point_size, 3]", "\n", "    ", "rot_sin", "=", "np", ".", "sin", "(", "angles", ")", "\n", "rot_cos", "=", "np", ".", "cos", "(", "angles", ")", "\n", "ones", "=", "np", ".", "ones_like", "(", "rot_cos", ")", "\n", "zeros", "=", "np", ".", "zeros_like", "(", "rot_cos", ")", "\n", "if", "axis", "==", "1", ":", "\n", "        ", "rot_mat_T", "=", "np", ".", "stack", "(", "[", "[", "rot_cos", ",", "zeros", ",", "-", "rot_sin", "]", ",", "[", "zeros", ",", "ones", ",", "zeros", "]", ",", "\n", "[", "rot_sin", ",", "zeros", ",", "rot_cos", "]", "]", ")", "\n", "", "elif", "axis", "==", "2", "or", "axis", "==", "-", "1", ":", "\n", "        ", "rot_mat_T", "=", "np", ".", "stack", "(", "[", "[", "rot_cos", ",", "-", "rot_sin", ",", "zeros", "]", ",", "\n", "[", "rot_sin", ",", "rot_cos", ",", "zeros", "]", ",", "[", "zeros", ",", "zeros", ",", "ones", "]", "]", ")", "\n", "", "elif", "axis", "==", "0", ":", "\n", "        ", "rot_mat_T", "=", "np", ".", "stack", "(", "[", "[", "zeros", ",", "rot_cos", ",", "-", "rot_sin", "]", ",", "\n", "[", "zeros", ",", "rot_sin", ",", "rot_cos", "]", ",", "[", "ones", ",", "zeros", ",", "zeros", "]", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"axis should in range\"", ")", "\n", "\n", "", "return", "np", ".", "einsum", "(", "'aij,jka->aik'", ",", "points", ",", "rot_mat_T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rotation_points_single_angle": [[273, 293], ["numpy.sin", "numpy.cos", "numpy.array", "numpy.array", "numpy.array", "ValueError"], "function", ["None"], ["", "def", "rotation_points_single_angle", "(", "points", ",", "angle", ",", "axis", "=", "0", ")", ":", "\n", "# points: [N, 3]", "\n", "    ", "rot_sin", "=", "np", ".", "sin", "(", "angle", ")", "\n", "rot_cos", "=", "np", ".", "cos", "(", "angle", ")", "\n", "if", "axis", "==", "1", ":", "\n", "        ", "rot_mat_T", "=", "np", ".", "array", "(", "\n", "[", "[", "rot_cos", ",", "0", ",", "-", "rot_sin", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "rot_sin", ",", "0", ",", "rot_cos", "]", "]", ",", "\n", "dtype", "=", "points", ".", "dtype", ")", "\n", "", "elif", "axis", "==", "2", "or", "axis", "==", "-", "1", ":", "\n", "        ", "rot_mat_T", "=", "np", ".", "array", "(", "\n", "[", "[", "rot_cos", ",", "-", "rot_sin", ",", "0", "]", ",", "[", "rot_sin", ",", "rot_cos", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ",", "\n", "dtype", "=", "points", ".", "dtype", ")", "\n", "", "elif", "axis", "==", "0", ":", "\n", "        ", "rot_mat_T", "=", "np", ".", "array", "(", "\n", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "rot_cos", ",", "-", "rot_sin", "]", ",", "[", "0", ",", "rot_sin", ",", "rot_cos", "]", "]", ",", "\n", "dtype", "=", "points", ".", "dtype", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"axis should in range\"", ")", "\n", "\n", "", "return", "points", "@", "rot_mat_T", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rotation_2d": [[295, 309], ["numpy.sin", "numpy.cos", "numpy.stack", "numpy.einsum"], "function", ["None"], ["", "def", "rotation_2d", "(", "points", ",", "angles", ")", ":", "\n", "    ", "\"\"\"rotation 2d points based on origin point clockwise when angle positive.\n\n    Args:\n        points (float array, shape=[N, point_size, 2]): points to be rotated.\n        angles (float array, shape=[N]): rotation angle.\n\n    Returns:\n        float array: same shape as points\n    \"\"\"", "\n", "rot_sin", "=", "np", ".", "sin", "(", "angles", ")", "\n", "rot_cos", "=", "np", ".", "cos", "(", "angles", ")", "\n", "rot_mat_T", "=", "np", ".", "stack", "(", "[", "[", "rot_cos", ",", "-", "rot_sin", "]", ",", "[", "rot_sin", ",", "rot_cos", "]", "]", ")", "\n", "return", "np", ".", "einsum", "(", "'aij,jka->aik'", ",", "points", ",", "rot_mat_T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rotation_box": [[311, 326], ["numpy.sin", "numpy.cos", "numpy.array"], "function", ["None"], ["", "def", "rotation_box", "(", "box_corners", ",", "angle", ")", ":", "\n", "    ", "\"\"\"rotation 2d points based on origin point clockwise when angle positive.\n\n    Args:\n        points (float array, shape=[N, point_size, 2]): points to be rotated.\n        angle (float): rotation angle.\n\n    Returns:\n        float array: same shape as points\n    \"\"\"", "\n", "rot_sin", "=", "np", ".", "sin", "(", "angle", ")", "\n", "rot_cos", "=", "np", ".", "cos", "(", "angle", ")", "\n", "rot_mat_T", "=", "np", ".", "array", "(", "\n", "[", "[", "rot_cos", ",", "-", "rot_sin", "]", ",", "[", "rot_sin", ",", "rot_cos", "]", "]", ",", "dtype", "=", "box_corners", ".", "dtype", ")", "\n", "return", "box_corners", "@", "rot_mat_T", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box3d": [[328, 354], ["box_np_ops.corners_nd", "centers.reshape", "box_np_ops.rotation_3d_in_axis"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corners_nd", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rotation_3d_in_axis"], ["", "def", "center_to_corner_box3d", "(", "centers", ",", "\n", "dims", ",", "\n", "angles", "=", "None", ",", "\n", "origin", "=", "[", "0.5", ",", "1.0", ",", "0.5", "]", ",", "\n", "axis", "=", "1", ")", ":", "\n", "    ", "\"\"\"convert kitti locations, dimensions and angles to corners\n\n    Args:\n        centers (float array, shape=[N, 3]): locations in kitti label file.\n        dims (float array, shape=[N, 3]): dimensions in kitti label file.\n        angles (float array, shape=[N]): rotation_y in kitti label file.\n        origin (list or array or float): origin point relate to smallest point.\n            use [0.5, 1.0, 0.5] in camera and [0.5, 0.5, 0] in lidar.\n        axis (int): rotation axis. 1 for camera and 2 for lidar.\n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "# 'length' in kitti format is in x axis.", "\n", "# yzx(hwl)(kitti label file)<->xyz(lhw)(camera)<->z(-x)(-y)(wlh)(lidar)", "\n", "# center in kitti format is [0.5, 1.0, 0.5] in xyz.", "\n", "corners", "=", "corners_nd", "(", "dims", ",", "origin", "=", "origin", ")", "\n", "# corners: [N, 8, 3]", "\n", "if", "angles", "is", "not", "None", ":", "\n", "        ", "corners", "=", "rotation_3d_in_axis", "(", "corners", ",", "angles", ",", "axis", "=", "axis", ")", "\n", "", "corners", "+=", "centers", ".", "reshape", "(", "[", "-", "1", ",", "1", ",", "3", "]", ")", "\n", "return", "corners", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box2d": [[356, 377], ["box_np_ops.corners_nd", "centers.reshape", "box_np_ops.rotation_2d"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corners_nd", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rotation_2d"], ["", "def", "center_to_corner_box2d", "(", "centers", ",", "dims", ",", "angles", "=", "None", ",", "origin", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"convert kitti locations, dimensions and angles to corners.\n    format: center(xy), dims(xy), angles(clockwise when positive)\n\n    Args:\n        centers (float array, shape=[N, 2]): locations in kitti label file.\n        dims (float array, shape=[N, 2]): dimensions in kitti label file.\n        angles (float array, shape=[N]): rotation_y in kitti label file.\n\n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "# 'length' in kitti format is in x axis.", "\n", "# xyz(hwl)(kitti label file)<->xyz(lhw)(camera)<->z(-x)(-y)(wlh)(lidar)", "\n", "# center in kitti format is [0.5, 1.0, 0.5] in xyz.", "\n", "corners", "=", "corners_nd", "(", "dims", ",", "origin", "=", "origin", ")", "\n", "# corners: [N, 4, 2]", "\n", "if", "angles", "is", "not", "None", ":", "\n", "        ", "corners", "=", "rotation_2d", "(", "corners", ",", "angles", ")", "\n", "", "corners", "+=", "centers", ".", "reshape", "(", "[", "-", "1", ",", "1", ",", "2", "]", ")", "\n", "return", "corners", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box2d_to_corner_jit": [[379, 400], ["numba.jit", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.zeros", "range", "np.zeros.reshape", "numpy.sin", "numpy.cos", "boxes.reshape"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "box2d_to_corner_jit", "(", "boxes", ")", ":", "\n", "    ", "num_box", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "corners_norm", "=", "np", ".", "zeros", "(", "(", "4", ",", "2", ")", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "corners_norm", "[", "1", ",", "1", "]", "=", "1.0", "\n", "corners_norm", "[", "2", "]", "=", "1.0", "\n", "corners_norm", "[", "3", ",", "0", "]", "=", "1.0", "\n", "corners_norm", "-=", "np", ".", "array", "(", "[", "0.5", ",", "0.5", "]", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "corners", "=", "boxes", ".", "reshape", "(", "num_box", ",", "1", ",", "5", ")", "[", ":", ",", ":", ",", "2", ":", "4", "]", "*", "corners_norm", ".", "reshape", "(", "\n", "1", ",", "4", ",", "2", ")", "\n", "rot_mat_T", "=", "np", ".", "zeros", "(", "(", "2", ",", "2", ")", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "box_corners", "=", "np", ".", "zeros", "(", "(", "num_box", ",", "4", ",", "2", ")", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "for", "i", "in", "range", "(", "num_box", ")", ":", "\n", "        ", "rot_sin", "=", "np", ".", "sin", "(", "boxes", "[", "i", ",", "-", "1", "]", ")", "\n", "rot_cos", "=", "np", ".", "cos", "(", "boxes", "[", "i", ",", "-", "1", "]", ")", "\n", "rot_mat_T", "[", "0", ",", "0", "]", "=", "rot_cos", "\n", "rot_mat_T", "[", "0", ",", "1", "]", "=", "-", "rot_sin", "\n", "rot_mat_T", "[", "1", ",", "0", "]", "=", "rot_sin", "\n", "rot_mat_T", "[", "1", ",", "1", "]", "=", "rot_cos", "\n", "box_corners", "[", "i", "]", "=", "corners", "[", "i", "]", "@", "rot_mat_T", "+", "boxes", "[", "i", ",", ":", "2", "]", "\n", "", "return", "box_corners", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rbbox3d_to_corners": [[402, 409], ["box_np_ops.center_to_corner_box3d"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box3d"], ["", "def", "rbbox3d_to_corners", "(", "rbboxes", ",", "origin", "=", "[", "0.5", ",", "0.5", ",", "0.0", "]", ",", "axis", "=", "2", ")", ":", "\n", "    ", "return", "center_to_corner_box3d", "(", "\n", "rbboxes", "[", "...", ",", ":", "3", "]", ",", "\n", "rbboxes", "[", "...", ",", "3", ":", "6", "]", ",", "\n", "rbboxes", "[", "...", ",", "6", "]", ",", "\n", "origin", ",", "\n", "axis", "=", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rbbox3d_to_bev_corners": [[411, 414], ["box_np_ops.center_to_corner_box2d"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box2d"], ["", "def", "rbbox3d_to_bev_corners", "(", "rbboxes", ",", "origin", "=", "0.5", ")", ":", "\n", "    ", "return", "center_to_corner_box2d", "(", "rbboxes", "[", "...", ",", ":", "2", "]", ",", "rbboxes", "[", "...", ",", "3", ":", "5", "]", ",", "\n", "rbboxes", "[", "...", ",", "6", "]", ",", "origin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.minmax_to_corner_2d": [[416, 421], ["box_np_ops.center_to_corner_box2d"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box2d"], ["", "def", "minmax_to_corner_2d", "(", "minmax_box", ")", ":", "\n", "    ", "ndim", "=", "minmax_box", ".", "shape", "[", "-", "1", "]", "//", "2", "\n", "center", "=", "minmax_box", "[", "...", ",", ":", "ndim", "]", "\n", "dims", "=", "minmax_box", "[", "...", ",", "ndim", ":", "]", "-", "center", "\n", "return", "center_to_corner_box2d", "(", "center", ",", "dims", ",", "origin", "=", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.minmax_to_corner_2d_v2": [[423, 426], ["minmax_box[].reshape"], "function", ["None"], ["", "def", "minmax_to_corner_2d_v2", "(", "minmax_box", ")", ":", "\n", "# N, 4 -> N 4 2", "\n", "    ", "return", "minmax_box", "[", "...", ",", "[", "0", ",", "1", ",", "0", ",", "3", ",", "2", ",", "3", ",", "2", ",", "1", "]", "]", ".", "reshape", "(", "-", "1", ",", "4", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.minmax_to_corner_3d": [[428, 433], ["box_np_ops.center_to_corner_box3d"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box3d"], ["", "def", "minmax_to_corner_3d", "(", "minmax_box", ")", ":", "\n", "    ", "ndim", "=", "minmax_box", ".", "shape", "[", "-", "1", "]", "//", "2", "\n", "center", "=", "minmax_box", "[", "...", ",", ":", "ndim", "]", "\n", "dims", "=", "minmax_box", "[", "...", ",", "ndim", ":", "]", "-", "center", "\n", "return", "center_to_corner_box3d", "(", "center", ",", "dims", ",", "origin", "=", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.minmax_to_center_2d": [[435, 441], ["numpy.concatenate"], "function", ["None"], ["", "def", "minmax_to_center_2d", "(", "minmax_box", ")", ":", "\n", "    ", "ndim", "=", "minmax_box", ".", "shape", "[", "-", "1", "]", "//", "2", "\n", "center_min", "=", "minmax_box", "[", "...", ",", ":", "ndim", "]", "\n", "dims", "=", "minmax_box", "[", "...", ",", "ndim", ":", "]", "-", "center_min", "\n", "center", "=", "center_min", "+", "0.5", "*", "dims", "\n", "return", "np", ".", "concatenate", "(", "[", "center", ",", "dims", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_minmax_2d_0_5": [[443, 445], ["numpy.concatenate"], "function", ["None"], ["", "def", "center_to_minmax_2d_0_5", "(", "centers", ",", "dims", ")", ":", "\n", "    ", "return", "np", ".", "concatenate", "(", "[", "centers", "-", "dims", "/", "2", ",", "centers", "+", "dims", "/", "2", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_minmax_2d": [[447, 452], ["box_np_ops.center_to_corner_box2d", "corners[].reshape", "box_np_ops.center_to_minmax_2d_0_5"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box2d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_minmax_2d_0_5"], ["", "def", "center_to_minmax_2d", "(", "centers", ",", "dims", ",", "origin", "=", "0.5", ")", ":", "\n", "    ", "if", "origin", "==", "0.5", ":", "\n", "        ", "return", "center_to_minmax_2d_0_5", "(", "centers", ",", "dims", ")", "\n", "", "corners", "=", "center_to_corner_box2d", "(", "centers", ",", "dims", ",", "origin", "=", "origin", ")", "\n", "return", "corners", "[", ":", ",", "[", "0", ",", "2", "]", "]", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.limit_period": [[454, 456], ["numpy.floor", "numpy.np.pi"], "function", ["None"], ["", "def", "limit_period", "(", "val", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", ")", ":", "\n", "    ", "return", "val", "-", "np", ".", "floor", "(", "val", "/", "period", "+", "offset", ")", "*", "period", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.projection_matrix_to_CRT_kitti": [[458, 470], ["numpy.linalg.inv", "numpy.linalg.qr", "numpy.linalg.inv", "numpy.linalg.inv"], "function", ["None"], ["", "def", "projection_matrix_to_CRT_kitti", "(", "proj", ")", ":", "\n", "# P = C @ [R|T]", "\n", "# C is upper triangular matrix, so we need to inverse CR and use QR", "\n", "# stable for all kitti camera projection matrix", "\n", "    ", "CR", "=", "proj", "[", "0", ":", "3", ",", "0", ":", "3", "]", "\n", "CT", "=", "proj", "[", "0", ":", "3", ",", "3", "]", "\n", "RinvCinv", "=", "np", ".", "linalg", ".", "inv", "(", "CR", ")", "\n", "Rinv", ",", "Cinv", "=", "np", ".", "linalg", ".", "qr", "(", "RinvCinv", ")", "\n", "C", "=", "np", ".", "linalg", ".", "inv", "(", "Cinv", ")", "\n", "R", "=", "np", ".", "linalg", ".", "inv", "(", "Rinv", ")", "\n", "T", "=", "Cinv", "@", "CT", "\n", "return", "C", ",", "R", ",", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.get_frustum": [[472, 490], ["numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "get_frustum", "(", "bbox_image", ",", "C", ",", "near_clip", "=", "0.001", ",", "far_clip", "=", "100", ")", ":", "\n", "    ", "fku", "=", "C", "[", "0", ",", "0", "]", "\n", "fkv", "=", "-", "C", "[", "1", ",", "1", "]", "\n", "u0v0", "=", "C", "[", "0", ":", "2", ",", "2", "]", "\n", "z_points", "=", "np", ".", "array", "(", "\n", "[", "near_clip", "]", "*", "4", "+", "[", "far_clip", "]", "*", "4", ",", "dtype", "=", "C", ".", "dtype", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "b", "=", "bbox_image", "\n", "box_corners", "=", "np", ".", "array", "(", "\n", "[", "[", "b", "[", "0", "]", ",", "b", "[", "1", "]", "]", ",", "[", "b", "[", "0", "]", ",", "b", "[", "3", "]", "]", ",", "[", "b", "[", "2", "]", ",", "b", "[", "3", "]", "]", ",", "[", "b", "[", "2", "]", ",", "b", "[", "1", "]", "]", "]", ",", "\n", "dtype", "=", "C", ".", "dtype", ")", "\n", "near_box_corners", "=", "(", "box_corners", "-", "u0v0", ")", "/", "np", ".", "array", "(", "\n", "[", "fku", "/", "near_clip", ",", "-", "fkv", "/", "near_clip", "]", ",", "dtype", "=", "C", ".", "dtype", ")", "\n", "far_box_corners", "=", "(", "box_corners", "-", "u0v0", ")", "/", "np", ".", "array", "(", "\n", "[", "fku", "/", "far_clip", ",", "-", "fkv", "/", "far_clip", "]", ",", "dtype", "=", "C", ".", "dtype", ")", "\n", "ret_xy", "=", "np", ".", "concatenate", "(", "\n", "[", "near_box_corners", ",", "far_box_corners", "]", ",", "axis", "=", "0", ")", "# [8, 2]", "\n", "ret_xyz", "=", "np", ".", "concatenate", "(", "[", "ret_xy", ",", "z_points", "]", ",", "axis", "=", "1", ")", "\n", "return", "ret_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.get_frustum_v2": [[492, 510], ["numpy.tile", "box_np_ops.minmax_to_corner_2d_v2", "numpy.concatenate", "numpy.concatenate", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.minmax_to_corner_2d_v2"], ["", "def", "get_frustum_v2", "(", "bboxes", ",", "C", ",", "near_clip", "=", "0.001", ",", "far_clip", "=", "100", ")", ":", "\n", "    ", "fku", "=", "C", "[", "0", ",", "0", "]", "\n", "fkv", "=", "-", "C", "[", "1", ",", "1", "]", "\n", "u0v0", "=", "C", "[", "0", ":", "2", ",", "2", "]", "\n", "num_box", "=", "bboxes", ".", "shape", "[", "0", "]", "\n", "z_points", "=", "np", ".", "array", "(", "\n", "[", "near_clip", "]", "*", "4", "+", "[", "far_clip", "]", "*", "4", ",", "\n", "dtype", "=", "C", ".", "dtype", ")", "[", "np", ".", "newaxis", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "z_points", "=", "np", ".", "tile", "(", "z_points", ",", "[", "num_box", ",", "1", ",", "1", "]", ")", "\n", "box_corners", "=", "minmax_to_corner_2d_v2", "(", "bboxes", ")", "\n", "near_box_corners", "=", "(", "box_corners", "-", "u0v0", ")", "/", "np", ".", "array", "(", "\n", "[", "fku", "/", "near_clip", ",", "-", "fkv", "/", "near_clip", "]", ",", "dtype", "=", "C", ".", "dtype", ")", "\n", "far_box_corners", "=", "(", "box_corners", "-", "u0v0", ")", "/", "np", ".", "array", "(", "\n", "[", "fku", "/", "far_clip", ",", "-", "fkv", "/", "far_clip", "]", ",", "dtype", "=", "C", ".", "dtype", ")", "\n", "ret_xy", "=", "np", ".", "concatenate", "(", "\n", "[", "near_box_corners", ",", "far_box_corners", "]", ",", "axis", "=", "1", ")", "# [8, 2]", "\n", "ret_xyz", "=", "np", ".", "concatenate", "(", "[", "ret_xy", ",", "z_points", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "ret_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.create_anchors_3d_stride": [[512, 551], ["numpy.arange", "numpy.arange", "numpy.arange", "numpy.reshape", "numpy.array", "numpy.meshgrid", "int", "range", "numpy.reshape", "list", "numpy.tile", "np.meshgrid.insert", "numpy.concatenate", "numpy.transpose", "numpy.array", "len", "numpy.tile"], "function", ["None"], ["", "def", "create_anchors_3d_stride", "(", "feature_size", ",", "\n", "sizes", "=", "[", "1.6", ",", "3.9", ",", "1.56", "]", ",", "\n", "anchor_strides", "=", "[", "0.4", ",", "0.4", ",", "0.0", "]", ",", "\n", "anchor_offsets", "=", "[", "0.2", ",", "-", "39.8", ",", "-", "1.78", "]", ",", "\n", "rotations", "=", "[", "0", ",", "np", ".", "pi", "/", "2", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        feature_size: list [D, H, W](zyx)\n        sizes: [N, 3] list of list or array, size of anchors, xyz\n\n    Returns:\n        anchors: [*feature_size, num_sizes, num_rots, 7] tensor.\n    \"\"\"", "\n", "# almost 2x faster than v1", "\n", "x_stride", ",", "y_stride", ",", "z_stride", "=", "anchor_strides", "\n", "x_offset", ",", "y_offset", ",", "z_offset", "=", "anchor_offsets", "\n", "z_centers", "=", "np", ".", "arange", "(", "feature_size", "[", "0", "]", ",", "dtype", "=", "dtype", ")", "\n", "y_centers", "=", "np", ".", "arange", "(", "feature_size", "[", "1", "]", ",", "dtype", "=", "dtype", ")", "\n", "x_centers", "=", "np", ".", "arange", "(", "feature_size", "[", "2", "]", ",", "dtype", "=", "dtype", ")", "\n", "z_centers", "=", "z_centers", "*", "z_stride", "+", "z_offset", "\n", "y_centers", "=", "y_centers", "*", "y_stride", "+", "y_offset", "\n", "x_centers", "=", "x_centers", "*", "x_stride", "+", "x_offset", "\n", "sizes", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "sizes", ",", "dtype", "=", "dtype", ")", ",", "[", "-", "1", ",", "3", "]", ")", "\n", "rotations", "=", "np", ".", "array", "(", "rotations", ",", "dtype", "=", "dtype", ")", "\n", "rets", "=", "np", ".", "meshgrid", "(", "\n", "x_centers", ",", "y_centers", ",", "z_centers", ",", "rotations", ",", "indexing", "=", "'ij'", ")", "\n", "tile_shape", "=", "[", "1", "]", "*", "5", "\n", "tile_shape", "[", "-", "2", "]", "=", "int", "(", "sizes", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "rets", ")", ")", ":", "\n", "        ", "rets", "[", "i", "]", "=", "np", ".", "tile", "(", "rets", "[", "i", "]", "[", "...", ",", "np", ".", "newaxis", ",", ":", "]", ",", "tile_shape", ")", "\n", "rets", "[", "i", "]", "=", "rets", "[", "i", "]", "[", "...", ",", "np", ".", "newaxis", "]", "# for concat", "\n", "", "sizes", "=", "np", ".", "reshape", "(", "sizes", ",", "[", "1", ",", "1", ",", "1", ",", "-", "1", ",", "1", ",", "3", "]", ")", "\n", "tile_size_shape", "=", "list", "(", "rets", "[", "0", "]", ".", "shape", ")", "\n", "tile_size_shape", "[", "3", "]", "=", "1", "\n", "sizes", "=", "np", ".", "tile", "(", "sizes", ",", "tile_size_shape", ")", "\n", "rets", ".", "insert", "(", "3", ",", "sizes", ")", "\n", "ret", "=", "np", ".", "concatenate", "(", "rets", ",", "axis", "=", "-", "1", ")", "\n", "return", "np", ".", "transpose", "(", "ret", ",", "[", "2", ",", "1", ",", "0", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.create_anchors_3d_range": [[553, 590], ["numpy.array", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.reshape", "numpy.array", "numpy.meshgrid", "int", "range", "numpy.reshape", "list", "numpy.tile", "np.meshgrid.insert", "numpy.concatenate", "numpy.transpose", "numpy.transpose", "numpy.array", "len", "numpy.tile"], "function", ["None"], ["", "def", "create_anchors_3d_range", "(", "feature_size", ",", "\n", "anchor_range", ",", "\n", "sizes", "=", "[", "1.6", ",", "3.9", ",", "1.56", "]", ",", "\n", "rotations", "=", "[", "0", ",", "np", ".", "pi", "/", "2", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        feature_size: list [D, H, W](zyx)\n        sizes: [N, 3] list of list or array, size of anchors, xyz\n\n    Returns:\n        anchors: [*feature_size, num_sizes, num_rots, 7] tensor.\n    \"\"\"", "\n", "anchor_range", "=", "np", ".", "array", "(", "anchor_range", ",", "dtype", ")", "\n", "z_centers", "=", "np", ".", "linspace", "(", "\n", "anchor_range", "[", "2", "]", ",", "anchor_range", "[", "5", "]", ",", "feature_size", "[", "0", "]", ",", "dtype", "=", "dtype", ")", "\n", "y_centers", "=", "np", ".", "linspace", "(", "\n", "anchor_range", "[", "1", "]", ",", "anchor_range", "[", "4", "]", ",", "feature_size", "[", "1", "]", ",", "dtype", "=", "dtype", ")", "\n", "x_centers", "=", "np", ".", "linspace", "(", "\n", "anchor_range", "[", "0", "]", ",", "anchor_range", "[", "3", "]", ",", "feature_size", "[", "2", "]", ",", "dtype", "=", "dtype", ")", "\n", "sizes", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "sizes", ",", "dtype", "=", "dtype", ")", ",", "[", "-", "1", ",", "3", "]", ")", "\n", "rotations", "=", "np", ".", "array", "(", "rotations", ",", "dtype", "=", "dtype", ")", "\n", "rets", "=", "np", ".", "meshgrid", "(", "\n", "x_centers", ",", "y_centers", ",", "z_centers", ",", "rotations", ",", "indexing", "=", "'ij'", ")", "\n", "tile_shape", "=", "[", "1", "]", "*", "5", "\n", "tile_shape", "[", "-", "2", "]", "=", "int", "(", "sizes", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "rets", ")", ")", ":", "\n", "        ", "rets", "[", "i", "]", "=", "np", ".", "tile", "(", "rets", "[", "i", "]", "[", "...", ",", "np", ".", "newaxis", ",", ":", "]", ",", "tile_shape", ")", "\n", "rets", "[", "i", "]", "=", "rets", "[", "i", "]", "[", "...", ",", "np", ".", "newaxis", "]", "# for concat", "\n", "", "sizes", "=", "np", ".", "reshape", "(", "sizes", ",", "[", "1", ",", "1", ",", "1", ",", "-", "1", ",", "1", ",", "3", "]", ")", "\n", "tile_size_shape", "=", "list", "(", "rets", "[", "0", "]", ".", "shape", ")", "\n", "tile_size_shape", "[", "3", "]", "=", "1", "\n", "sizes", "=", "np", ".", "tile", "(", "sizes", ",", "tile_size_shape", ")", "\n", "rets", ".", "insert", "(", "3", ",", "sizes", ")", "\n", "ret", "=", "np", ".", "concatenate", "(", "rets", ",", "axis", "=", "-", "1", ")", "\n", "anchor_example", "=", "np", ".", "transpose", "(", "ret", ",", "[", "2", ",", "1", ",", "0", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "return", "np", ".", "transpose", "(", "ret", ",", "[", "2", ",", "1", ",", "0", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.project_to_image": [[592, 599], ["list", "numpy.concatenate", "numpy.zeros"], "function", ["None"], ["", "def", "project_to_image", "(", "points_3d", ",", "proj_mat", ")", ":", "\n", "    ", "points_shape", "=", "list", "(", "points_3d", ".", "shape", ")", "\n", "points_shape", "[", "-", "1", "]", "=", "1", "\n", "points_4", "=", "np", ".", "concatenate", "(", "[", "points_3d", ",", "np", ".", "zeros", "(", "points_shape", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "point_2d", "=", "points_4", "@", "proj_mat", ".", "T", "\n", "point_2d_res", "=", "point_2d", "[", "...", ",", ":", "2", "]", "/", "point_2d", "[", "...", ",", "2", ":", "3", "]", "\n", "return", "point_2d_res", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.camera_to_lidar": [[601, 607], ["list", "numpy.concatenate", "numpy.linalg.inv", "numpy.ones"], "function", ["None"], ["", "def", "camera_to_lidar", "(", "points", ",", "r_rect", ",", "velo2cam", ")", ":", "\n", "    ", "points_shape", "=", "list", "(", "points", ".", "shape", "[", "0", ":", "-", "1", "]", ")", "\n", "if", "points", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "\n", "        ", "points", "=", "np", ".", "concatenate", "(", "[", "points", ",", "np", ".", "ones", "(", "points_shape", "+", "[", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "lidar_points", "=", "points", "@", "np", ".", "linalg", ".", "inv", "(", "(", "r_rect", "@", "velo2cam", ")", ".", "T", ")", "\n", "return", "lidar_points", "[", "...", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.lidar_to_camera": [[609, 615], ["list", "numpy.concatenate", "numpy.ones"], "function", ["None"], ["", "def", "lidar_to_camera", "(", "points", ",", "r_rect", ",", "velo2cam", ")", ":", "\n", "    ", "points_shape", "=", "list", "(", "points", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "if", "points", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "\n", "        ", "points", "=", "np", ".", "concatenate", "(", "[", "points", ",", "np", ".", "ones", "(", "points_shape", "+", "[", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "camera_points", "=", "points", "@", "(", "r_rect", "@", "velo2cam", ")", ".", "T", "\n", "return", "camera_points", "[", "...", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box_camera_to_lidar": [[617, 623], ["box_np_ops.camera_to_lidar", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.camera_to_lidar"], ["", "def", "box_camera_to_lidar", "(", "data", ",", "r_rect", ",", "velo2cam", ")", ":", "\n", "    ", "xyz", "=", "data", "[", ":", ",", "0", ":", "3", "]", "\n", "l", ",", "h", ",", "w", "=", "data", "[", ":", ",", "3", ":", "4", "]", ",", "data", "[", ":", ",", "4", ":", "5", "]", ",", "data", "[", ":", ",", "5", ":", "6", "]", "\n", "r", "=", "data", "[", ":", ",", "6", ":", "7", "]", "\n", "xyz_lidar", "=", "camera_to_lidar", "(", "xyz", ",", "r_rect", ",", "velo2cam", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "xyz_lidar", ",", "w", ",", "l", ",", "h", ",", "r", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box_lidar_to_camera": [[625, 631], ["box_np_ops.lidar_to_camera", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.lidar_to_camera"], ["", "def", "box_lidar_to_camera", "(", "data", ",", "r_rect", ",", "velo2cam", ")", ":", "\n", "    ", "xyz_lidar", "=", "data", "[", ":", ",", "0", ":", "3", "]", "\n", "w", ",", "l", ",", "h", "=", "data", "[", ":", ",", "3", ":", "4", "]", ",", "data", "[", ":", ",", "4", ":", "5", "]", ",", "data", "[", ":", ",", "5", ":", "6", "]", "\n", "r", "=", "data", "[", ":", ",", "6", ":", "7", "]", "\n", "xyz", "=", "lidar_to_camera", "(", "xyz_lidar", ",", "r_rect", ",", "velo2cam", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "xyz", ",", "l", ",", "h", ",", "w", ",", "r", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.remove_outside_points": [[633, 645], ["box_np_ops.projection_matrix_to_CRT_kitti", "box_np_ops.get_frustum", "box_np_ops.camera_to_lidar", "box_np_ops.corner_to_surfaces_3d_jit", "second.core.geometry.points_in_convex_polygon_3d_jit", "numpy.linalg.inv", "second.core.geometry.points_in_convex_polygon_3d_jit.reshape"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.projection_matrix_to_CRT_kitti", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.get_frustum", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.camera_to_lidar", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corner_to_surfaces_3d_jit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry.points_in_convex_polygon_3d_jit"], ["", "def", "remove_outside_points", "(", "points", ",", "rect", ",", "Trv2c", ",", "P2", ",", "image_shape", ")", ":", "\n", "# 5x faster than remove_outside_points_v1(2ms vs 10ms)", "\n", "    ", "C", ",", "R", ",", "T", "=", "projection_matrix_to_CRT_kitti", "(", "P2", ")", "\n", "image_bbox", "=", "[", "0", ",", "0", ",", "image_shape", "[", "1", "]", ",", "image_shape", "[", "0", "]", "]", "\n", "frustum", "=", "get_frustum", "(", "image_bbox", ",", "C", ")", "\n", "frustum", "-=", "T", "\n", "frustum", "=", "np", ".", "linalg", ".", "inv", "(", "R", ")", "@", "frustum", ".", "T", "\n", "frustum", "=", "camera_to_lidar", "(", "frustum", ".", "T", ",", "rect", ",", "Trv2c", ")", "\n", "frustum_surfaces", "=", "corner_to_surfaces_3d_jit", "(", "frustum", "[", "np", ".", "newaxis", ",", "...", "]", ")", "\n", "indices", "=", "points_in_convex_polygon_3d_jit", "(", "points", "[", ":", ",", ":", "3", "]", ",", "frustum_surfaces", ")", "\n", "points", "=", "points", "[", "indices", ".", "reshape", "(", "[", "-", "1", "]", ")", "]", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.iou_jit": [[647, 677], ["numba.jit", "numpy.zeros", "range", "range", "min", "max", "min", "max"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "iou_jit", "(", "boxes", ",", "query_boxes", ",", "eps", "=", "0.0", ")", ":", "\n", "    ", "\"\"\"calculate box iou. note that jit version runs 2x faster than cython in\n    my machine!\n    Parameters\n    ----------\n    boxes: (N, 4) ndarray of float\n    query_boxes: (K, 4) ndarray of float\n    Returns\n    -------\n    overlaps: (N, K) ndarray of overlap between boxes and query_boxes\n    \"\"\"", "\n", "N", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "K", "=", "query_boxes", ".", "shape", "[", "0", "]", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "N", ",", "K", ")", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "box_area", "=", "(", "(", "query_boxes", "[", "k", ",", "2", "]", "-", "query_boxes", "[", "k", ",", "0", "]", "+", "eps", ")", "*", "\n", "(", "query_boxes", "[", "k", ",", "3", "]", "-", "query_boxes", "[", "k", ",", "1", "]", "+", "eps", ")", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "            ", "iw", "=", "(", "min", "(", "boxes", "[", "n", ",", "2", "]", ",", "query_boxes", "[", "k", ",", "2", "]", ")", "-", "\n", "max", "(", "boxes", "[", "n", ",", "0", "]", ",", "query_boxes", "[", "k", ",", "0", "]", ")", "+", "eps", ")", "\n", "if", "iw", ">", "0", ":", "\n", "                ", "ih", "=", "(", "min", "(", "boxes", "[", "n", ",", "3", "]", ",", "query_boxes", "[", "k", ",", "3", "]", ")", "-", "\n", "max", "(", "boxes", "[", "n", ",", "1", "]", ",", "query_boxes", "[", "k", ",", "1", "]", ")", "+", "eps", ")", "\n", "if", "ih", ">", "0", ":", "\n", "                    ", "ua", "=", "(", "\n", "(", "boxes", "[", "n", ",", "2", "]", "-", "boxes", "[", "n", ",", "0", "]", "+", "eps", ")", "*", "\n", "(", "boxes", "[", "n", ",", "3", "]", "-", "boxes", "[", "n", ",", "1", "]", "+", "eps", ")", "+", "box_area", "-", "iw", "*", "ih", ")", "\n", "overlaps", "[", "n", ",", "k", "]", "=", "iw", "*", "ih", "/", "ua", "\n", "", "", "", "", "return", "overlaps", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.points_in_rbbox": [[679, 691], ["box_np_ops.center_to_corner_box3d", "box_np_ops.corner_to_surfaces_3d", "second.core.geometry.points_in_convex_polygon_3d_jit"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corner_to_surfaces_3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry.points_in_convex_polygon_3d_jit"], ["", "def", "points_in_rbbox", "(", "points", ",", "rbbox", ",", "lidar", "=", "True", ")", ":", "\n", "    ", "if", "lidar", ":", "\n", "        ", "h_axis", "=", "2", "\n", "origin", "=", "[", "0.5", ",", "0.5", ",", "0", "]", "\n", "", "else", ":", "\n", "        ", "origin", "=", "[", "0.5", ",", "1.0", ",", "0.5", "]", "\n", "h_axis", "=", "1", "\n", "", "rbbox_corners", "=", "center_to_corner_box3d", "(", "\n", "rbbox", "[", ":", ",", ":", "3", "]", ",", "rbbox", "[", ":", ",", "3", ":", "6", "]", ",", "rbbox", "[", ":", ",", "6", "]", ",", "origin", "=", "origin", ",", "axis", "=", "h_axis", ")", "\n", "surfaces", "=", "corner_to_surfaces_3d", "(", "rbbox_corners", ")", "\n", "indices", "=", "points_in_convex_polygon_3d_jit", "(", "points", "[", ":", ",", ":", "3", "]", ",", "surfaces", ")", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corner_to_surfaces_3d": [[693, 712], ["numpy.array().transpose", "numpy.array"], "function", ["None"], ["", "def", "corner_to_surfaces_3d", "(", "corners", ")", ":", "\n", "    ", "\"\"\"convert 3d box corners from corner function above\n    to surfaces that normal vectors all direct to internal.\n\n    Args:\n        corners (float array, [N, 8, 3]): 3d box corners.\n    Returns:\n        surfaces (float array, [N, 6, 4, 3]):\n    \"\"\"", "\n", "# box_corners: [N, 8, 3], must from corner functions in this module", "\n", "surfaces", "=", "np", ".", "array", "(", "[", "\n", "[", "corners", "[", ":", ",", "0", "]", ",", "corners", "[", ":", ",", "1", "]", ",", "corners", "[", ":", ",", "2", "]", ",", "corners", "[", ":", ",", "3", "]", "]", ",", "\n", "[", "corners", "[", ":", ",", "7", "]", ",", "corners", "[", ":", ",", "6", "]", ",", "corners", "[", ":", ",", "5", "]", ",", "corners", "[", ":", ",", "4", "]", "]", ",", "\n", "[", "corners", "[", ":", ",", "0", "]", ",", "corners", "[", ":", ",", "3", "]", ",", "corners", "[", ":", ",", "7", "]", ",", "corners", "[", ":", ",", "4", "]", "]", ",", "\n", "[", "corners", "[", ":", ",", "1", "]", ",", "corners", "[", ":", ",", "5", "]", ",", "corners", "[", ":", ",", "6", "]", ",", "corners", "[", ":", ",", "2", "]", "]", ",", "\n", "[", "corners", "[", ":", ",", "0", "]", ",", "corners", "[", ":", ",", "4", "]", ",", "corners", "[", ":", ",", "5", "]", ",", "corners", "[", ":", ",", "1", "]", "]", ",", "\n", "[", "corners", "[", ":", ",", "3", "]", ",", "corners", "[", ":", ",", "2", "]", ",", "corners", "[", ":", ",", "6", "]", ",", "corners", "[", ":", ",", "7", "]", "]", ",", "\n", "]", ")", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", ",", "3", "]", ")", "\n", "return", "surfaces", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corner_to_surfaces_3d_jit": [[714, 735], ["numba.jit", "numpy.zeros", "numpy.array().reshape", "range", "range", "numpy.array", "range"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "corner_to_surfaces_3d_jit", "(", "corners", ")", ":", "\n", "    ", "\"\"\"convert 3d box corners from corner function above\n    to surfaces that normal vectors all direct to internal.\n\n    Args:\n        corners (float array, [N, 8, 3]): 3d box corners.\n    Returns:\n        surfaces (float array, [N, 6, 4, 3]):\n    \"\"\"", "\n", "# box_corners: [N, 8, 3], must from corner functions in this module", "\n", "num_boxes", "=", "corners", ".", "shape", "[", "0", "]", "\n", "surfaces", "=", "np", ".", "zeros", "(", "(", "num_boxes", ",", "6", ",", "4", ",", "3", ")", ",", "dtype", "=", "corners", ".", "dtype", ")", "\n", "corner_idxes", "=", "np", ".", "array", "(", "[", "\n", "0", ",", "1", ",", "2", ",", "3", ",", "7", ",", "6", ",", "5", ",", "4", ",", "0", ",", "3", ",", "7", ",", "4", ",", "1", ",", "5", ",", "6", ",", "2", ",", "0", ",", "4", ",", "5", ",", "1", ",", "3", ",", "2", ",", "6", ",", "7", "\n", "]", ")", ".", "reshape", "(", "6", ",", "4", ")", "\n", "for", "i", "in", "range", "(", "num_boxes", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "6", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "4", ")", ":", "\n", "                ", "surfaces", "[", "i", ",", "j", ",", "k", "]", "=", "corners", "[", "i", ",", "corner_idxes", "[", "j", ",", "k", "]", "]", "\n", "", "", "", "return", "surfaces", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.image_box_region_area": [[737, 762], ["numpy.zeros"], "function", ["None"], ["", "def", "image_box_region_area", "(", "img_cumsum", ",", "bbox", ")", ":", "\n", "    ", "\"\"\"check a 2d voxel is contained by a box. used to filter empty\n    anchors.\n    Summed-area table algorithm:\n    ==> W\n    ------------------\n    |      |         |\n    |------A---------B\n    |      |         |\n    |      |         |\n    |----- C---------D\n    Iabcd = ID-IB-IC+IA\n    Args:\n        img_cumsum: [M, H, W](yx) cumsumed image.\n        bbox: [N, 4](xyxy) bounding box,\n    \"\"\"", "\n", "N", "=", "bbox", ".", "shape", "[", "0", "]", "\n", "M", "=", "img_cumsum", ".", "shape", "[", "0", "]", "\n", "ret", "=", "np", ".", "zeros", "(", "[", "N", ",", "M", "]", ",", "dtype", "=", "img_cumsum", ".", "dtype", ")", "\n", "ID", "=", "img_cumsum", "[", ":", ",", "bbox", "[", ":", ",", "3", "]", ",", "bbox", "[", ":", ",", "2", "]", "]", "\n", "IA", "=", "img_cumsum", "[", ":", ",", "bbox", "[", ":", ",", "1", "]", ",", "bbox", "[", ":", ",", "0", "]", "]", "\n", "IB", "=", "img_cumsum", "[", ":", ",", "bbox", "[", ":", ",", "3", "]", ",", "bbox", "[", ":", ",", "0", "]", "]", "\n", "IC", "=", "img_cumsum", "[", ":", ",", "bbox", "[", ":", ",", "1", "]", ",", "bbox", "[", ":", ",", "2", "]", "]", "\n", "ret", "=", "ID", "-", "IB", "-", "IC", "+", "IA", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.sparse_sum_for_anchors_mask": [[764, 770], ["numba.jit", "numpy.zeros", "range"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "sparse_sum_for_anchors_mask", "(", "coors", ",", "shape", ")", ":", "\n", "    ", "ret", "=", "np", ".", "zeros", "(", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "coors", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ret", "[", "coors", "[", "i", ",", "1", "]", ",", "coors", "[", "i", ",", "2", "]", "]", "+=", "1", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.fused_get_anchors_area": [[772, 799], ["numba.jit", "numpy.zeros", "numpy.zeros", "range", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "max", "max", "min", "min"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "fused_get_anchors_area", "(", "dense_map", ",", "anchors_bv", ",", "stride", ",", "offset", ",", "\n", "grid_size", ")", ":", "\n", "    ", "anchor_coor", "=", "np", ".", "zeros", "(", "anchors_bv", ".", "shape", "[", "1", ":", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "grid_size_x", "=", "grid_size", "[", "0", "]", "-", "1", "\n", "grid_size_y", "=", "grid_size", "[", "1", "]", "-", "1", "\n", "N", "=", "anchors_bv", ".", "shape", "[", "0", "]", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "N", ")", ",", "dtype", "=", "dense_map", ".", "dtype", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "anchor_coor", "[", "0", "]", "=", "np", ".", "floor", "(", "\n", "(", "anchors_bv", "[", "i", ",", "0", "]", "-", "offset", "[", "0", "]", ")", "/", "stride", "[", "0", "]", ")", "\n", "anchor_coor", "[", "1", "]", "=", "np", ".", "floor", "(", "\n", "(", "anchors_bv", "[", "i", ",", "1", "]", "-", "offset", "[", "1", "]", ")", "/", "stride", "[", "1", "]", ")", "\n", "anchor_coor", "[", "2", "]", "=", "np", ".", "floor", "(", "\n", "(", "anchors_bv", "[", "i", ",", "2", "]", "-", "offset", "[", "0", "]", ")", "/", "stride", "[", "0", "]", ")", "\n", "anchor_coor", "[", "3", "]", "=", "np", ".", "floor", "(", "\n", "(", "anchors_bv", "[", "i", ",", "3", "]", "-", "offset", "[", "1", "]", ")", "/", "stride", "[", "1", "]", ")", "\n", "anchor_coor", "[", "0", "]", "=", "max", "(", "anchor_coor", "[", "0", "]", ",", "0", ")", "\n", "anchor_coor", "[", "1", "]", "=", "max", "(", "anchor_coor", "[", "1", "]", ",", "0", ")", "\n", "anchor_coor", "[", "2", "]", "=", "min", "(", "anchor_coor", "[", "2", "]", ",", "grid_size_x", ")", "\n", "anchor_coor", "[", "3", "]", "=", "min", "(", "anchor_coor", "[", "3", "]", ",", "grid_size_y", ")", "\n", "ID", "=", "dense_map", "[", "anchor_coor", "[", "3", "]", ",", "anchor_coor", "[", "2", "]", "]", "\n", "IA", "=", "dense_map", "[", "anchor_coor", "[", "1", "]", ",", "anchor_coor", "[", "0", "]", "]", "\n", "IB", "=", "dense_map", "[", "anchor_coor", "[", "3", "]", ",", "anchor_coor", "[", "0", "]", "]", "\n", "IC", "=", "dense_map", "[", "anchor_coor", "[", "1", "]", ",", "anchor_coor", "[", "2", "]", "]", "\n", "ret", "[", "i", "]", "=", "ID", "-", "IB", "-", "IC", "+", "IA", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.distance_similarity": [[801, 826], ["numba.jit", "numpy.zeros", "range", "range", "numpy.abs", "numpy.abs", "numpy.sum", "min", "numpy.abs", "numpy.sin"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "distance_similarity", "(", "points", ",", "\n", "qpoints", ",", "\n", "dist_norm", ",", "\n", "with_rotation", "=", "False", ",", "\n", "rot_alpha", "=", "0.5", ")", ":", "\n", "    ", "N", "=", "points", ".", "shape", "[", "0", "]", "\n", "K", "=", "qpoints", ".", "shape", "[", "0", "]", "\n", "dists", "=", "np", ".", "zeros", "(", "(", "N", ",", "K", ")", ",", "dtype", "=", "points", ".", "dtype", ")", "\n", "rot_alpha_1", "=", "1", "-", "rot_alpha", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "            ", "if", "np", ".", "abs", "(", "points", "[", "n", ",", "0", "]", "-", "qpoints", "[", "k", ",", "0", "]", ")", "<=", "dist_norm", ":", "\n", "                ", "if", "np", ".", "abs", "(", "points", "[", "n", ",", "1", "]", "-", "qpoints", "[", "k", ",", "1", "]", ")", "<=", "dist_norm", ":", "\n", "                    ", "dist", "=", "np", ".", "sum", "(", "(", "points", "[", "n", ",", ":", "2", "]", "-", "qpoints", "[", "k", ",", ":", "2", "]", ")", "**", "2", ")", "\n", "dist_normed", "=", "min", "(", "dist", "/", "dist_norm", ",", "dist_norm", ")", "\n", "if", "with_rotation", ":", "\n", "                        ", "dist_rot", "=", "np", ".", "abs", "(", "\n", "np", ".", "sin", "(", "points", "[", "n", ",", "-", "1", "]", "-", "qpoints", "[", "k", ",", "-", "1", "]", ")", ")", "\n", "dists", "[", "\n", "n", ",", "\n", "k", "]", "=", "1", "-", "rot_alpha_1", "*", "dist_normed", "-", "rot_alpha", "*", "dist_rot", "\n", "", "else", ":", "\n", "                        ", "dists", "[", "n", ",", "k", "]", "=", "1", "-", "dist_normed", "\n", "", "", "", "", "", "return", "dists", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box3d_to_bbox": [[828, 837], ["box_np_ops.center_to_corner_box3d", "box_np_ops.project_to_image", "numpy.min", "numpy.max", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.project_to_image"], ["", "def", "box3d_to_bbox", "(", "box3d", ",", "rect", ",", "Trv2c", ",", "P2", ")", ":", "\n", "    ", "box_corners", "=", "center_to_corner_box3d", "(", "box3d", "[", ":", ",", ":", "3", "]", ",", "box3d", "[", ":", ",", "3", ":", "6", "]", ",", "box3d", "[", ":", ",", "6", "]", ",", "[", "0.5", ",", "1.0", ",", "0.5", "]", ",", "axis", "=", "1", ")", "\n", "box_corners_in_image", "=", "project_to_image", "(", "\n", "box_corners", ",", "P2", ")", "\n", "# box_corners_in_image: [N, 8, 2]", "\n", "minxy", "=", "np", ".", "min", "(", "box_corners_in_image", ",", "axis", "=", "1", ")", "\n", "maxxy", "=", "np", ".", "max", "(", "box_corners_in_image", ",", "axis", "=", "1", ")", "\n", "bbox", "=", "np", ".", "concatenate", "(", "[", "minxy", ",", "maxxy", "]", ",", "axis", "=", "1", ")", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.assign_label_to_voxel": [[838, 856], ["numpy.array", "numpy.array", "box_np_ops.center_to_corner_box3d", "box_np_ops.corner_to_surfaces_3d", "second.core.geometry.points_in_convex_polygon_3d_jit", "numpy.any().astype", "numpy.any"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corner_to_surfaces_3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry.points_in_convex_polygon_3d_jit"], ["", "def", "assign_label_to_voxel", "(", "gt_boxes", ",", "coors", ",", "voxel_size", ",", "coors_range", ")", ":", "\n", "    ", "\"\"\"assign a 0/1 label to each voxel based on whether\n    the center of voxel is in gt_box. LIDAR.\n    \"\"\"", "\n", "voxel_size", "=", "np", ".", "array", "(", "voxel_size", ",", "dtype", "=", "gt_boxes", ".", "dtype", ")", "\n", "coors_range", "=", "np", ".", "array", "(", "coors_range", ",", "dtype", "=", "gt_boxes", ".", "dtype", ")", "\n", "shift", "=", "coors_range", "[", ":", "3", "]", "\n", "voxel_origins", "=", "coors", "[", ":", ",", ":", ":", "-", "1", "]", "*", "voxel_size", "+", "shift", "\n", "voxel_centers", "=", "voxel_origins", "+", "voxel_size", "*", "0.5", "\n", "gt_box_corners", "=", "center_to_corner_box3d", "(", "\n", "gt_boxes", "[", ":", ",", ":", "3", "]", "-", "voxel_size", "*", "0.5", ",", "\n", "gt_boxes", "[", ":", ",", "3", ":", "6", "]", "+", "voxel_size", ",", "\n", "gt_boxes", "[", ":", ",", "6", "]", ",", "\n", "origin", "=", "[", "0.5", ",", "0.5", ",", "0", "]", ",", "\n", "axis", "=", "2", ")", "\n", "gt_surfaces", "=", "corner_to_surfaces_3d", "(", "gt_box_corners", ")", "\n", "ret", "=", "points_in_convex_polygon_3d_jit", "(", "voxel_centers", ",", "gt_surfaces", ")", "\n", "return", "np", ".", "any", "(", "ret", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.change_box3d_center_": [[857, 861], ["numpy.array", "numpy.array"], "function", ["None"], ["", "def", "change_box3d_center_", "(", "box3d", ",", "src", ",", "dst", ")", ":", "\n", "    ", "dst", "=", "np", ".", "array", "(", "dst", ",", "dtype", "=", "box3d", ".", "dtype", ")", "\n", "src", "=", "np", ".", "array", "(", "src", ",", "dtype", "=", "box3d", ".", "dtype", ")", "\n", "box3d", "[", "...", ",", ":", "3", "]", "+=", "box3d", "[", "...", ",", "3", ":", "6", "]", "*", "(", "dst", "-", "src", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.anchor_generator.AnchorGeneratorStride.__init__": [[6, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "sizes", "=", "[", "1.6", ",", "3.9", ",", "1.56", "]", ",", "\n", "anchor_strides", "=", "[", "0.4", ",", "0.4", ",", "1.0", "]", ",", "\n", "anchor_offsets", "=", "[", "0.2", ",", "-", "39.8", ",", "-", "1.78", "]", ",", "\n", "rotations", "=", "[", "0", ",", "np", ".", "pi", "/", "2", "]", ",", "\n", "class_name", "=", "None", ",", "\n", "match_threshold", "=", "-", "1", ",", "\n", "unmatch_threshold", "=", "-", "1", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "        ", "self", ".", "_sizes", "=", "sizes", "\n", "self", ".", "_anchor_strides", "=", "anchor_strides", "\n", "self", ".", "_anchor_offsets", "=", "anchor_offsets", "\n", "self", ".", "_rotations", "=", "rotations", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "self", ".", "_class_name", "=", "class_name", "\n", "self", ".", "_match_threshold", "=", "match_threshold", "\n", "self", ".", "_unmatch_threshold", "=", "unmatch_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.anchor_generator.AnchorGeneratorStride.class_name": [[24, 27], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "class_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_class_name", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.anchor_generator.AnchorGeneratorStride.match_threshold": [[28, 31], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "match_threshold", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_match_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.anchor_generator.AnchorGeneratorStride.unmatch_threshold": [[32, 35], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "unmatch_threshold", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_unmatch_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.anchor_generator.AnchorGeneratorStride.num_anchors_per_localization": [[36, 41], ["len", "numpy.array().reshape", "numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_anchors_per_localization", "(", "self", ")", ":", "\n", "        ", "num_rot", "=", "len", "(", "self", ".", "_rotations", ")", "\n", "num_size", "=", "np", ".", "array", "(", "self", ".", "_sizes", ")", ".", "reshape", "(", "[", "-", "1", ",", "3", "]", ")", ".", "shape", "[", "0", "]", "\n", "return", "num_rot", "*", "num_size", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.anchor_generator.AnchorGeneratorStride.generate": [[42, 46], ["second.core.box_np_ops.create_anchors_3d_stride"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.create_anchors_3d_stride"], ["", "def", "generate", "(", "self", ",", "feature_map_size", ")", ":", "\n", "        ", "return", "box_np_ops", ".", "create_anchors_3d_stride", "(", "\n", "feature_map_size", ",", "self", ".", "_sizes", ",", "self", ".", "_anchor_strides", ",", "\n", "self", ".", "_anchor_offsets", ",", "self", ".", "_rotations", ",", "self", ".", "_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.anchor_generator.AnchorGeneratorRange.__init__": [[48, 63], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "anchor_ranges", ",", "\n", "sizes", "=", "[", "1.6", ",", "3.9", ",", "1.56", "]", ",", "\n", "rotations", "=", "[", "0", ",", "np", ".", "pi", "/", "2", "]", ",", "\n", "class_name", "=", "None", ",", "\n", "match_threshold", "=", "-", "1", ",", "\n", "unmatch_threshold", "=", "-", "1", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "        ", "self", ".", "_sizes", "=", "sizes", "\n", "self", ".", "_anchor_ranges", "=", "anchor_ranges", "\n", "self", ".", "_rotations", "=", "rotations", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "self", ".", "_class_name", "=", "class_name", "\n", "self", ".", "_match_threshold", "=", "match_threshold", "\n", "self", ".", "_unmatch_threshold", "=", "unmatch_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.anchor_generator.AnchorGeneratorRange.class_name": [[64, 67], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "class_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_class_name", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.anchor_generator.AnchorGeneratorRange.match_threshold": [[68, 71], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "match_threshold", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_match_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.anchor_generator.AnchorGeneratorRange.unmatch_threshold": [[72, 75], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "unmatch_threshold", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_unmatch_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.anchor_generator.AnchorGeneratorRange.num_anchors_per_localization": [[76, 81], ["len", "numpy.array().reshape", "numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_anchors_per_localization", "(", "self", ")", ":", "\n", "        ", "num_rot", "=", "len", "(", "self", ".", "_rotations", ")", "\n", "num_size", "=", "np", ".", "array", "(", "self", ".", "_sizes", ")", ".", "reshape", "(", "[", "-", "1", ",", "3", "]", ")", ".", "shape", "[", "0", "]", "\n", "return", "num_rot", "*", "num_size", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.anchor_generator.AnchorGeneratorRange.generate": [[82, 86], ["second.core.box_np_ops.create_anchors_3d_range"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.create_anchors_3d_range"], ["", "def", "generate", "(", "self", ",", "feature_map_size", ")", ":", "\n", "        ", "return", "box_np_ops", ".", "create_anchors_3d_range", "(", "\n", "feature_map_size", ",", "self", ".", "_anchor_ranges", ",", "self", ".", "_sizes", ",", "\n", "self", ".", "_rotations", ",", "self", ".", "_dtype", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.__init__": [[14, 21], ["None"], "methods", ["None"], ["\n", "class", "TorchInferenceContext", "(", "InferenceContext", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "None", "\n", "self", ".", "anchor_cache", "=", "None", "\n", "\n", "", "def", "_build", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.get_inference_input_dict": [[22, 82], ["torchvision.ToTensor", "PIL.Image.open().convert", "second.data.preprocess.prep_pointcloud", "second.data.preprocess.merge_second_batch", "numpy.array", "numpy.array", "example[].astype", "PIL.Image.open", "str", "str"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.preprocess.prep_pointcloud", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.preprocess.merge_second_batch"], ["        ", "config", "=", "self", ".", "config", "\n", "input_cfg", "=", "config", ".", "eval_input_reader", "\n", "model_cfg", "=", "config", ".", "model", ".", "second", "\n", "train_cfg", "=", "config", ".", "train_config", "\n", "batch_size", "=", "1", "\n", "voxel_generator", "=", "voxel_builder", ".", "build", "(", "model_cfg", ".", "voxel_generator", ")", "\n", "bv_range", "=", "voxel_generator", ".", "point_cloud_range", "[", "[", "0", ",", "1", ",", "3", ",", "4", "]", "]", "\n", "grid_size", "=", "voxel_generator", ".", "grid_size", "\n", "self", ".", "voxel_generator", "=", "voxel_generator", "\n", "vfe_num_filters", "=", "list", "(", "model_cfg", ".", "voxel_feature_extractor", ".", "num_filters", ")", "\n", "\n", "box_coder", "=", "box_coder_builder", ".", "build", "(", "model_cfg", ".", "box_coder", ")", "\n", "target_assigner_cfg", "=", "model_cfg", ".", "target_assigner", "\n", "target_assigner", "=", "target_assigner_builder", ".", "build", "(", "\n", "target_assigner_cfg", ",", "bv_range", ",", "box_coder", ")", "\n", "self", ".", "target_assigner", "=", "target_assigner", "\n", "out_size_factor", "=", "model_cfg", ".", "rpn", ".", "layer_strides", "[", "0", "]", "/", "model_cfg", ".", "rpn", ".", "upsample_strides", "[", "0", "]", "\n", "out_size_factor", "*=", "model_cfg", ".", "middle_feature_extractor", ".", "downsample_factor", "\n", "out_size_factor", "=", "int", "(", "out_size_factor", ")", "\n", "assert", "out_size_factor", ">", "0", "\n", "self", ".", "net", "=", "second_builder", ".", "build", "(", "model_cfg", ",", "voxel_generator", ",", "\n", "target_assigner", ")", "\n", "self", ".", "net", ".", "cuda", "(", ")", ".", "eval", "(", ")", "\n", "if", "train_cfg", ".", "enable_mixed_precision", ":", "\n", "            ", "self", ".", "net", ".", "half", "(", ")", "\n", "self", ".", "net", ".", "metrics_to_float", "(", ")", "\n", "self", ".", "net", ".", "convert_norm_to_float", "(", "self", ".", "net", ")", "\n", "", "feature_map_size", "=", "grid_size", "[", ":", "2", "]", "//", "out_size_factor", "\n", "feature_map_size", "=", "[", "*", "feature_map_size", ",", "1", "]", "[", ":", ":", "-", "1", "]", "\n", "ret", "=", "target_assigner", ".", "generate_anchors", "(", "feature_map_size", ")", "\n", "anchors_dict", "=", "target_assigner", ".", "generate_anchors_dict", "(", "feature_map_size", ")", "\n", "#print(\"feature_map_size is \",feature_map_size)", "\n", "#print(\"generated_anchors shape is\",ret['anchors'].shape)", "\n", "anchors", "=", "ret", "[", "\"anchors\"", "]", "\n", "#print(\"\",ret['anchors'][0,79,79,1,:])", "\n", "anchors", "=", "anchors", ".", "reshape", "(", "[", "-", "1", ",", "7", "]", ")", "\n", "#anchors_reshape = anchors.reshape([1,200,176,14])", "\n", "#print(\"\",anchors_reshape[0,79,79,7:])", "\n", "matched_thresholds", "=", "ret", "[", "\"matched_thresholds\"", "]", "\n", "unmatched_thresholds", "=", "ret", "[", "\"unmatched_thresholds\"", "]", "\n", "anchors_bv", "=", "box_np_ops", ".", "rbbox2d_to_near_bbox", "(", "\n", "anchors", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", ")", "\n", "self", ".", "anchor_cache", "=", "{", "\n", "\"anchors\"", ":", "anchors", ",", "\n", "\"anchors_bv\"", ":", "anchors_bv", ",", "\n", "\"matched_thresholds\"", ":", "matched_thresholds", ",", "\n", "\"unmatched_thresholds\"", ":", "unmatched_thresholds", ",", "\n", "\"anchors_dict\"", ":", "anchors_dict", ",", "\n", "}", "\n", "\n", "", "def", "_restore", "(", "self", ",", "ckpt_path", ")", ":", "\n", "        ", "ckpt_path", "=", "Path", "(", "ckpt_path", ")", "\n", "assert", "ckpt_path", ".", "suffix", "==", "\".tckpt\"", "\n", "torchplus", ".", "train", ".", "restore", "(", "str", "(", "ckpt_path", ")", ",", "self", ".", "net", ")", "\n", "\n", "", "def", "_inference", "(", "self", ",", "example", ")", ":", "\n", "        ", "train_cfg", "=", "self", ".", "config", ".", "train_config", "\n", "input_cfg", "=", "self", ".", "config", ".", "eval_input_reader", "\n", "model_cfg", "=", "self", ".", "config", ".", "model", ".", "second", "\n", "if", "train_cfg", ".", "enable_mixed_precision", ":", "\n", "            ", "float_dtype", "=", "torch", ".", "half", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.get_config": [[83, 89], ["second.protos.pipeline_pb2.TrainEvalPipelineConfig", "open", "f.read", "google.protobuf.text_format.Merge"], "methods", ["None"], ["", "else", ":", "\n", "            ", "float_dtype", "=", "torch", ".", "float32", "\n", "", "example_torch", "=", "example_convert_to_torch", "(", "example", ",", "float_dtype", ")", "\n", "result_annos", "=", "predict_kitti_to_anno", "(", "\n", "self", ".", "net", ",", "example_torch", ",", "list", "(", "\n", "self", ".", "target_assigner", ".", "classes", ")", ",", "\n", "model_cfg", ".", "post_center_limit_range", ",", "model_cfg", ".", "lidar_input", ")", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext._build": [[90, 93], ["NotImplementedError"], "methods", ["None"], ["return", "result_annos", "\n", "\n", "", "def", "_ctx", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build": [[94, 99], ["inference.InferenceContext.get_config", "inference.InferenceContext._build"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.get_config", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext._build"], ["", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext._inference": [[100, 103], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.inference": [[104, 106], ["inference.InferenceContext._inference"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext._inference"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext._restore": [[107, 110], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.restore": [[111, 113], ["inference.InferenceContext._restore"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext._restore"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext._ctx": [[114, 117], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.ctx": [[118, 121], ["inference.InferenceContext._ctx"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext._ctx"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.__init__": [[7, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "box_coder", ",", "\n", "anchor_generators", ",", "\n", "region_similarity_calculator", "=", "None", ",", "\n", "positive_fraction", "=", "None", ",", "\n", "sample_size", "=", "512", ")", ":", "\n", "        ", "self", ".", "_region_similarity_calculator", "=", "region_similarity_calculator", "\n", "self", ".", "_box_coder", "=", "box_coder", "\n", "self", ".", "_anchor_generators", "=", "anchor_generators", "\n", "self", ".", "_positive_fraction", "=", "positive_fraction", "\n", "self", ".", "_sample_size", "=", "sample_size", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.box_coder": [[19, 22], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "box_coder", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_box_coder", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.classes": [[23, 26], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "        ", "return", "[", "a", ".", "class_name", "for", "a", "in", "self", ".", "_anchor_generators", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.assign": [[27, 60], ["second.core.target_ops.create_target_np", "target_assigner.TargetAssigner._region_similarity_calculator.compare", "target_assigner.TargetAssigner._box_coder.encode", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_ops.create_target_np", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.region_similarity.RegionSimilarityCalculator.compare", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BoxCoder.encode"], ["", "def", "assign", "(", "self", ",", "\n", "anchors", ",", "\n", "gt_boxes", ",", "\n", "anchors_mask", "=", "None", ",", "\n", "gt_classes", "=", "None", ",", "\n", "matched_thresholds", "=", "None", ",", "\n", "unmatched_thresholds", "=", "None", ")", ":", "\n", "        ", "if", "anchors_mask", "is", "not", "None", ":", "\n", "            ", "prune_anchor_fn", "=", "lambda", "_", ":", "np", ".", "where", "(", "anchors_mask", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "prune_anchor_fn", "=", "None", "\n", "\n", "", "def", "similarity_fn", "(", "anchors", ",", "gt_boxes", ")", ":", "\n", "            ", "anchors_rbv", "=", "anchors", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n", "gt_boxes_rbv", "=", "gt_boxes", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n", "return", "self", ".", "_region_similarity_calculator", ".", "compare", "(", "\n", "anchors_rbv", ",", "gt_boxes_rbv", ")", "\n", "\n", "", "def", "box_encoding_fn", "(", "boxes", ",", "anchors", ")", ":", "\n", "            ", "return", "self", ".", "_box_coder", ".", "encode", "(", "boxes", ",", "anchors", ")", "\n", "", "return", "create_target_np", "(", "\n", "anchors", ",", "\n", "gt_boxes", "[", "gt_classes", "==", "class_name", "]", ",", "\n", "similarity_fn", ",", "\n", "box_encoding_fn", ",", "\n", "prune_anchor_fn", "=", "prune_anchor_fn", ",", "\n", "gt_classes", "=", "gt_classes", "[", "gt_classes", "==", "class_name", "]", ",", "\n", "matched_threshold", "=", "matched_thresholds", ",", "\n", "unmatched_threshold", "=", "unmatched_thresholds", ",", "\n", "positive_fraction", "=", "self", ".", "_positive_fraction", ",", "\n", "rpn_batch_size", "=", "self", ".", "_sample_size", ",", "\n", "norm_by_num_examples", "=", "False", ",", "\n", "box_code_size", "=", "self", ".", "box_coder", ".", "code_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.assign_v2": [[61, 113], ["anchors_dict.items", "numpy.concatenate", "targets_dict[].reshape", "numpy.concatenate", "numpy.concatenate", "targets_dict[].reshape", "targets_dict[].reshape", "target_assigner.TargetAssigner._region_similarity_calculator.compare", "target_assigner.TargetAssigner._box_coder.encode", "numpy.array", "second.core.target_ops.create_target_np", "targets_list.append", "anchor_dict[].reshape", "v.reshape", "v.reshape", "v.reshape", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.region_similarity.RegionSimilarityCalculator.compare", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BoxCoder.encode", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_ops.create_target_np"], ["", "def", "assign_v2", "(", "self", ",", "\n", "anchors_dict", ",", "\n", "gt_boxes", ",", "\n", "anchors_mask", "=", "None", ",", "\n", "gt_classes", "=", "None", ",", "\n", "gt_names", "=", "None", ")", ":", "\n", "\n", "        ", "if", "anchors_mask", "is", "not", "None", ":", "\n", "            ", "prune_anchor_fn", "=", "lambda", "_", ":", "np", ".", "where", "(", "anchors_mask", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "prune_anchor_fn", "=", "None", "\n", "\n", "", "def", "similarity_fn", "(", "anchors", ",", "gt_boxes", ")", ":", "\n", "            ", "anchors_rbv", "=", "anchors", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n", "gt_boxes_rbv", "=", "gt_boxes", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n", "return", "self", ".", "_region_similarity_calculator", ".", "compare", "(", "\n", "anchors_rbv", ",", "gt_boxes_rbv", ")", "\n", "\n", "", "def", "box_encoding_fn", "(", "boxes", ",", "anchors", ")", ":", "\n", "            ", "return", "self", ".", "_box_coder", ".", "encode", "(", "boxes", ",", "anchors", ")", "\n", "\n", "", "targets_list", "=", "[", "]", "\n", "for", "class_name", ",", "anchor_dict", "in", "anchors_dict", ".", "items", "(", ")", ":", "\n", "            ", "mask", "=", "np", ".", "array", "(", "[", "c", "==", "class_name", "for", "c", "in", "gt_names", "]", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "targets", "=", "create_target_np", "(", "\n", "anchor_dict", "[", "\"anchors\"", "]", ".", "reshape", "(", "-", "1", ",", "self", ".", "box_coder", ".", "code_size", ")", ",", "\n", "gt_boxes", "[", "mask", "]", ",", "\n", "similarity_fn", ",", "\n", "box_encoding_fn", ",", "\n", "prune_anchor_fn", "=", "prune_anchor_fn", ",", "\n", "gt_classes", "=", "gt_classes", "[", "mask", "]", ",", "\n", "matched_threshold", "=", "anchor_dict", "[", "\"matched_thresholds\"", "]", ",", "\n", "unmatched_threshold", "=", "anchor_dict", "[", "\"unmatched_thresholds\"", "]", ",", "\n", "positive_fraction", "=", "self", ".", "_positive_fraction", ",", "\n", "rpn_batch_size", "=", "self", ".", "_sample_size", ",", "\n", "norm_by_num_examples", "=", "False", ",", "\n", "box_code_size", "=", "self", ".", "box_coder", ".", "code_size", ")", "\n", "targets_list", ".", "append", "(", "targets", ")", "\n", "feature_map_size", "=", "anchor_dict", "[", "\"anchors\"", "]", ".", "shape", "[", ":", "3", "]", "\n", "", "targets_dict", "=", "{", "\n", "\"labels\"", ":", "[", "t", "[", "\"labels\"", "]", "for", "t", "in", "targets_list", "]", ",", "\n", "\"bbox_targets\"", ":", "[", "t", "[", "\"bbox_targets\"", "]", "for", "t", "in", "targets_list", "]", ",", "\n", "\"bbox_outside_weights\"", ":", "[", "t", "[", "\"bbox_outside_weights\"", "]", "for", "t", "in", "targets_list", "]", ",", "\n", "}", "\n", "targets_dict", "[", "\"bbox_targets\"", "]", "=", "np", ".", "concatenate", "(", "[", "v", ".", "reshape", "(", "*", "feature_map_size", ",", "-", "1", ",", "self", ".", "box_coder", ".", "code_size", ")", "for", "v", "in", "targets_dict", "[", "\"bbox_targets\"", "]", "]", ",", "axis", "=", "-", "2", ")", "\n", "targets_dict", "[", "\"bbox_targets\"", "]", "=", "targets_dict", "[", "\"bbox_targets\"", "]", ".", "reshape", "(", "-", "1", ",", "self", ".", "box_coder", ".", "code_size", ")", "\n", "targets_dict", "[", "\"labels\"", "]", "=", "np", ".", "concatenate", "(", "[", "v", ".", "reshape", "(", "*", "feature_map_size", ",", "-", "1", ")", "for", "v", "in", "targets_dict", "[", "\"labels\"", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "targets_dict", "[", "\"bbox_outside_weights\"", "]", "=", "np", ".", "concatenate", "(", "[", "v", ".", "reshape", "(", "*", "feature_map_size", ",", "-", "1", ")", "for", "v", "in", "targets_dict", "[", "\"bbox_outside_weights\"", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "targets_dict", "[", "\"labels\"", "]", "=", "targets_dict", "[", "\"labels\"", "]", ".", "reshape", "(", "-", "1", ")", "\n", "targets_dict", "[", "\"bbox_outside_weights\"", "]", "=", "targets_dict", "[", "\"bbox_outside_weights\"", "]", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "return", "targets_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.generate_anchors": [[115, 146], ["zip", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "anchor_generator.generate", "anchors.reshape.reshape.reshape", "anchors_list.append", "numpy.prod", "match_list.append", "unmatch_list.append", "numpy.full", "numpy.full"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.anchor_generator.AnchorGeneratorRange.generate"], ["", "def", "generate_anchors", "(", "self", ",", "feature_map_size", ")", ":", "\n", "        ", "anchors_list", "=", "[", "]", "\n", "matched_thresholds", "=", "[", "\n", "a", ".", "match_threshold", "for", "a", "in", "self", ".", "_anchor_generators", "\n", "]", "\n", "unmatched_thresholds", "=", "[", "\n", "a", ".", "unmatch_threshold", "for", "a", "in", "self", ".", "_anchor_generators", "\n", "]", "\n", "match_list", ",", "unmatch_list", "=", "[", "]", ",", "[", "]", "\n", "#print(\"~~~~~~~~~~~~~match thresholds\",matched_thresholds,unmatched_thresholds)", "\n", "#print(\" the feature_map_size for target_assigner is :\",feature_map_size)", "\n", "for", "anchor_generator", ",", "match_thresh", ",", "unmatch_thresh", "in", "zip", "(", "\n", "self", ".", "_anchor_generators", ",", "matched_thresholds", ",", "\n", "unmatched_thresholds", ")", ":", "\n", "            ", "anchors", "=", "anchor_generator", ".", "generate", "(", "feature_map_size", ")", "\n", "#print(\"anchors before reshape\",anchors.shape)", "\n", "anchors", "=", "anchors", ".", "reshape", "(", "[", "*", "anchors", ".", "shape", "[", ":", "3", "]", ",", "-", "1", ",", "7", "]", ")", "\n", "#print(\"anchors after reshape\",anchors[0,100,100,:,:])", "\n", "anchors_list", ".", "append", "(", "anchors", ")", "\n", "num_anchors", "=", "np", ".", "prod", "(", "anchors", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "match_list", ".", "append", "(", "\n", "np", ".", "full", "(", "[", "num_anchors", "]", ",", "match_thresh", ",", "anchors", ".", "dtype", ")", ")", "\n", "unmatch_list", ".", "append", "(", "\n", "np", ".", "full", "(", "[", "num_anchors", "]", ",", "unmatch_thresh", ",", "anchors", ".", "dtype", ")", ")", "\n", "", "anchors", "=", "np", ".", "concatenate", "(", "anchors_list", ",", "axis", "=", "-", "2", ")", "\n", "matched_thresholds", "=", "np", ".", "concatenate", "(", "match_list", ",", "axis", "=", "0", ")", "\n", "unmatched_thresholds", "=", "np", ".", "concatenate", "(", "unmatch_list", ",", "axis", "=", "0", ")", "\n", "return", "{", "\n", "\"anchors\"", ":", "anchors", ",", "\n", "\"matched_thresholds\"", ":", "matched_thresholds", ",", "\n", "\"unmatched_thresholds\"", ":", "unmatched_thresholds", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.generate_anchors_dict": [[148, 174], ["zip", "anchor_generator.generate", "anchors.reshape.reshape.reshape", "anchors_list.append", "numpy.prod", "match_list.append", "unmatch_list.append", "numpy.full", "numpy.full"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.anchor_generator.AnchorGeneratorRange.generate"], ["", "def", "generate_anchors_dict", "(", "self", ",", "feature_map_size", ")", ":", "\n", "        ", "anchors_list", "=", "[", "]", "\n", "matched_thresholds", "=", "[", "\n", "a", ".", "match_threshold", "for", "a", "in", "self", ".", "_anchor_generators", "\n", "]", "\n", "unmatched_thresholds", "=", "[", "\n", "a", ".", "unmatch_threshold", "for", "a", "in", "self", ".", "_anchor_generators", "\n", "]", "\n", "match_list", ",", "unmatch_list", "=", "[", "]", ",", "[", "]", "\n", "anchors_dict", "=", "{", "a", ".", "class_name", ":", "{", "}", "for", "a", "in", "self", ".", "_anchor_generators", "}", "\n", "for", "anchor_generator", ",", "match_thresh", ",", "unmatch_thresh", "in", "zip", "(", "\n", "self", ".", "_anchor_generators", ",", "matched_thresholds", ",", "\n", "unmatched_thresholds", ")", ":", "\n", "            ", "anchors", "=", "anchor_generator", ".", "generate", "(", "feature_map_size", ")", "\n", "anchors", "=", "anchors", ".", "reshape", "(", "[", "*", "anchors", ".", "shape", "[", ":", "3", "]", ",", "-", "1", ",", "7", "]", ")", "\n", "anchors_list", ".", "append", "(", "anchors", ")", "\n", "num_anchors", "=", "np", ".", "prod", "(", "anchors", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "match_list", ".", "append", "(", "\n", "np", ".", "full", "(", "[", "num_anchors", "]", ",", "match_thresh", ",", "anchors", ".", "dtype", ")", ")", "\n", "unmatch_list", ".", "append", "(", "\n", "np", ".", "full", "(", "[", "num_anchors", "]", ",", "unmatch_thresh", ",", "anchors", ".", "dtype", ")", ")", "\n", "class_name", "=", "anchor_generator", ".", "class_name", "\n", "anchors_dict", "[", "class_name", "]", "[", "\"anchors\"", "]", "=", "anchors", "\n", "anchors_dict", "[", "class_name", "]", "[", "\"matched_thresholds\"", "]", "=", "match_list", "[", "-", "1", "]", "\n", "anchors_dict", "[", "class_name", "]", "[", "\"unmatched_thresholds\"", "]", "=", "unmatch_list", "[", "-", "1", "]", "\n", "", "return", "anchors_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.num_anchors_per_location": [[176, 182], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_anchors_per_location", "(", "self", ")", ":", "\n", "        ", "num", "=", "0", "\n", "for", "a_generator", "in", "self", ".", "_anchor_generators", ":", "\n", "            ", "num", "+=", "a_generator", ".", "num_anchors_per_localization", "\n", "", "return", "num", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.sample_ops.DataBaseSamplerV2.__init__": [[17, 90], ["db_prepor.items", "any", "sample_ops.DataBaseSamplerV2._group_db_infos.items", "print", "db_prepor", "print", "db_prepor.items", "second.core.preprocess.BatchSampler", "print", "list", "list", "list", "list", "sample_ops.DataBaseSamplerV2._group_name_to_names.append", "list", "print", "isinstance", "second.utils.check.shape_mergeable", "numpy.abs", "len", "group_info.keys", "group_info.values", "group_info.keys", "group_info.values", "ValueError", "group_dict.values", "len", "len", "sorted", "len"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.check.shape_mergeable"], ["    ", "def", "__init__", "(", "self", ",", "db_infos", ",", "groups", ",", "db_prepor", "=", "None", ",", "\n", "rate", "=", "1.0", ",", "global_rot_range", "=", "None", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "db_infos", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "f\"load {len(v)} {k} database infos\"", ")", "\n", "\n", "", "if", "db_prepor", "is", "not", "None", ":", "\n", "            ", "db_infos", "=", "db_prepor", "(", "db_infos", ")", "\n", "print", "(", "\"After filter database:\"", ")", "\n", "for", "k", ",", "v", "in", "db_infos", ".", "items", "(", ")", ":", "\n", "                ", "print", "(", "f\"load {len(v)} {k} database infos\"", ")", "\n", "\n", "", "", "self", ".", "db_infos", "=", "db_infos", "\n", "self", ".", "_rate", "=", "rate", "\n", "self", ".", "_groups", "=", "groups", "\n", "self", ".", "_group_db_infos", "=", "{", "}", "\n", "self", ".", "_group_name_to_names", "=", "[", "]", "\n", "self", ".", "_sample_classes", "=", "[", "]", "\n", "self", ".", "_sample_max_nums", "=", "[", "]", "\n", "self", ".", "_use_group_sampling", "=", "False", "# slower", "\n", "if", "any", "(", "[", "len", "(", "g", ")", ">", "1", "for", "g", "in", "groups", "]", ")", ":", "\n", "            ", "self", ".", "_use_group_sampling", "=", "True", "\n", "", "if", "not", "self", ".", "_use_group_sampling", ":", "\n", "            ", "self", ".", "_group_db_infos", "=", "self", ".", "db_infos", "# just use db_infos", "\n", "for", "group_info", "in", "groups", ":", "\n", "                ", "group_names", "=", "list", "(", "group_info", ".", "keys", "(", ")", ")", "\n", "self", ".", "_sample_classes", "+=", "group_names", "\n", "self", ".", "_sample_max_nums", "+=", "list", "(", "group_info", ".", "values", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "group_info", "in", "groups", ":", "\n", "                ", "group_dict", "=", "{", "}", "\n", "group_names", "=", "list", "(", "group_info", ".", "keys", "(", ")", ")", "\n", "group_name", "=", "\", \"", ".", "join", "(", "group_names", ")", "\n", "self", ".", "_sample_classes", "+=", "group_names", "\n", "self", ".", "_sample_max_nums", "+=", "list", "(", "group_info", ".", "values", "(", ")", ")", "\n", "self", ".", "_group_name_to_names", ".", "append", "(", "(", "group_name", ",", "group_names", ")", ")", "\n", "# self._group_name_to_names[group_name] = group_names", "\n", "for", "name", "in", "group_names", ":", "\n", "                    ", "for", "item", "in", "db_infos", "[", "name", "]", ":", "\n", "                        ", "gid", "=", "item", "[", "\"group_id\"", "]", "\n", "if", "gid", "not", "in", "group_dict", ":", "\n", "                            ", "group_dict", "[", "gid", "]", "=", "[", "item", "]", "\n", "", "else", ":", "\n", "                            ", "group_dict", "[", "gid", "]", "+=", "[", "item", "]", "\n", "", "", "", "if", "group_name", "in", "self", ".", "_group_db_infos", ":", "\n", "                    ", "raise", "ValueError", "(", "\"group must be unique\"", ")", "\n", "", "group_data", "=", "list", "(", "group_dict", ".", "values", "(", ")", ")", "\n", "self", ".", "_group_db_infos", "[", "group_name", "]", "=", "group_data", "\n", "info_dict", "=", "{", "}", "\n", "if", "len", "(", "group_info", ")", ">", "1", ":", "\n", "                    ", "for", "group", "in", "group_data", ":", "\n", "                        ", "names", "=", "[", "item", "[", "\"name\"", "]", "for", "item", "in", "group", "]", "\n", "names", "=", "sorted", "(", "names", ")", "\n", "group_name", "=", "\", \"", ".", "join", "(", "names", ")", "\n", "if", "group_name", "in", "info_dict", ":", "\n", "                            ", "info_dict", "[", "group_name", "]", "+=", "1", "\n", "", "else", ":", "\n", "                            ", "info_dict", "[", "group_name", "]", "=", "1", "\n", "", "", "", "print", "(", "info_dict", ")", "\n", "\n", "\n", "", "", "self", ".", "_sampler_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "_group_db_infos", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_sampler_dict", "[", "k", "]", "=", "prep", ".", "BatchSampler", "(", "v", ",", "k", ")", "\n", "", "self", ".", "_enable_global_rot", "=", "False", "\n", "if", "global_rot_range", "is", "not", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "global_rot_range", ",", "(", "list", ",", "tuple", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "                ", "global_rot_range", "=", "[", "-", "global_rot_range", ",", "global_rot_range", "]", "\n", "", "else", ":", "\n", "                ", "assert", "shape_mergeable", "(", "global_rot_range", ",", "[", "2", "]", ")", "\n", "", "if", "np", ".", "abs", "(", "global_rot_range", "[", "0", "]", "-", "\n", "global_rot_range", "[", "1", "]", ")", ">=", "1e-3", ":", "\n", "                ", "self", ".", "_enable_global_rot", "=", "True", "\n", "", "", "self", ".", "_global_rot_range", "=", "global_rot_range", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.sample_ops.DataBaseSamplerV2.use_group_sampling": [[91, 94], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "use_group_sampling", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_use_group_sampling", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.sample_ops.DataBaseSamplerV2.sample_all": [[95, 212], ["zip", "zip", "int", "numpy.round().astype", "sample_num_per_class.append", "len", "numpy.concatenate", "len", "numpy.max", "sample_num_per_class.append", "sampled_groups.append", "numpy.fromfile", "s_points.reshape.reshape.reshape", "s_points_list.append", "second.core.box_np_ops.box3d_to_bbox", "second.core.preprocess.random_crop_frustum", "range", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.ones", "numpy.array", "numpy.arange", "numpy.sum", "numpy.round", "sample_ops.DataBaseSamplerV2.sample_group", "sample_ops.DataBaseSamplerV2.sample_class_v2", "len", "numpy.concatenate", "str", "second.core.box_np_ops.rotation_points_single_angle", "second.core.preprocess.mask_points_in_corners().reshape", "numpy.sum", "s_points_list_new.append", "len", "numpy.stack", "numpy.concatenate", "len", "len", "numpy.stack", "pathlib.Path", "second.core.preprocess.mask_points_in_corners", "numpy.array", "numpy.logical_not"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box3d_to_bbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.random_crop_frustum", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.sample_ops.DataBaseSamplerV2.sample_group", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.sample_ops.DataBaseSamplerV2.sample_class_v2", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rotation_points_single_angle", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.mask_points_in_corners"], ["", "def", "sample_all", "(", "self", ",", "\n", "root_path", ",", "\n", "gt_boxes", ",", "\n", "gt_names", ",", "\n", "num_point_features", ",", "\n", "random_crop", "=", "False", ",", "\n", "gt_group_ids", "=", "None", ",", "\n", "rect", "=", "None", ",", "\n", "Trv2c", "=", "None", ",", "\n", "P2", "=", "None", ")", ":", "\n", "        ", "sampled_num_dict", "=", "{", "}", "\n", "sample_num_per_class", "=", "[", "]", "\n", "for", "class_name", ",", "max_sample_num", "in", "zip", "(", "self", ".", "_sample_classes", ",", "\n", "self", ".", "_sample_max_nums", ")", ":", "\n", "            ", "sampled_num", "=", "int", "(", "max_sample_num", "-", "\n", "np", ".", "sum", "(", "[", "n", "==", "class_name", "for", "n", "in", "gt_names", "]", ")", ")", "\n", "sampled_num", "=", "np", ".", "round", "(", "self", ".", "_rate", "*", "sampled_num", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "sampled_num_dict", "[", "class_name", "]", "=", "sampled_num", "\n", "sample_num_per_class", ".", "append", "(", "sampled_num", ")", "\n", "\n", "", "sampled_groups", "=", "self", ".", "_sample_classes", "\n", "if", "self", ".", "_use_group_sampling", ":", "\n", "            ", "assert", "gt_group_ids", "is", "not", "None", "\n", "sampled_groups", "=", "[", "]", "\n", "sample_num_per_class", "=", "[", "]", "\n", "for", "group_name", ",", "class_names", "in", "self", ".", "_group_name_to_names", ":", "\n", "                ", "sampled_nums_group", "=", "[", "sampled_num_dict", "[", "n", "]", "for", "n", "in", "class_names", "]", "\n", "sampled_num", "=", "np", ".", "max", "(", "sampled_nums_group", ")", "\n", "sample_num_per_class", ".", "append", "(", "sampled_num", ")", "\n", "sampled_groups", ".", "append", "(", "group_name", ")", "\n", "", "total_group_ids", "=", "gt_group_ids", "\n", "", "sampled", "=", "[", "]", "\n", "sampled_gt_boxes", "=", "[", "]", "\n", "avoid_coll_boxes", "=", "gt_boxes", "\n", "\n", "for", "class_name", ",", "sampled_num", "in", "zip", "(", "sampled_groups", ",", "\n", "sample_num_per_class", ")", ":", "\n", "            ", "if", "sampled_num", ">", "0", ":", "\n", "                ", "if", "self", ".", "_use_group_sampling", ":", "\n", "                    ", "sampled_cls", "=", "self", ".", "sample_group", "(", "class_name", ",", "sampled_num", ",", "\n", "avoid_coll_boxes", ",", "total_group_ids", ")", "\n", "", "else", ":", "\n", "                    ", "sampled_cls", "=", "self", ".", "sample_class_v2", "(", "class_name", ",", "sampled_num", ",", "\n", "avoid_coll_boxes", ")", "\n", "\n", "", "sampled", "+=", "sampled_cls", "\n", "if", "len", "(", "sampled_cls", ")", ">", "0", ":", "\n", "                    ", "if", "len", "(", "sampled_cls", ")", "==", "1", ":", "\n", "                        ", "sampled_gt_box", "=", "sampled_cls", "[", "0", "]", "[", "\"box3d_lidar\"", "]", "[", "\n", "np", ".", "newaxis", ",", "...", "]", "\n", "", "else", ":", "\n", "                        ", "sampled_gt_box", "=", "np", ".", "stack", "(", "\n", "[", "s", "[", "\"box3d_lidar\"", "]", "for", "s", "in", "sampled_cls", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "sampled_gt_boxes", "+=", "[", "sampled_gt_box", "]", "\n", "avoid_coll_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "avoid_coll_boxes", ",", "sampled_gt_box", "]", ",", "axis", "=", "0", ")", "\n", "if", "self", ".", "_use_group_sampling", ":", "\n", "                        ", "if", "len", "(", "sampled_cls", ")", "==", "1", ":", "\n", "                            ", "sampled_group_ids", "=", "np", ".", "array", "(", "sampled_cls", "[", "0", "]", "[", "\"group_id\"", "]", ")", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "", "else", ":", "\n", "                            ", "sampled_group_ids", "=", "np", ".", "stack", "(", "\n", "[", "s", "[", "\"group_id\"", "]", "for", "s", "in", "sampled_cls", "]", ",", "axis", "=", "0", ")", "\n", "", "total_group_ids", "=", "np", ".", "concatenate", "(", "\n", "[", "total_group_ids", ",", "sampled_group_ids", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "", "if", "len", "(", "sampled", ")", ">", "0", ":", "\n", "            ", "sampled_gt_boxes", "=", "np", ".", "concatenate", "(", "sampled_gt_boxes", ",", "axis", "=", "0", ")", "\n", "num_sampled", "=", "len", "(", "sampled", ")", "\n", "s_points_list", "=", "[", "]", "\n", "for", "info", "in", "sampled", ":", "\n", "                ", "s_points", "=", "np", ".", "fromfile", "(", "\n", "str", "(", "pathlib", ".", "Path", "(", "root_path", ")", "/", "info", "[", "\"path\"", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "s_points", "=", "s_points", ".", "reshape", "(", "[", "-", "1", ",", "num_point_features", "]", ")", "\n", "# if not add_rgb_to_points:", "\n", "#     s_points = s_points[:, :4]", "\n", "if", "\"rot_transform\"", "in", "info", ":", "\n", "                    ", "rot", "=", "info", "[", "\"rot_transform\"", "]", "\n", "s_points", "[", ":", ",", ":", "3", "]", "=", "box_np_ops", ".", "rotation_points_single_angle", "(", "\n", "s_points", "[", ":", ",", ":", "3", "]", ",", "rot", ",", "axis", "=", "2", ")", "\n", "", "s_points", "[", ":", ",", ":", "3", "]", "+=", "info", "[", "\"box3d_lidar\"", "]", "[", ":", "3", "]", "\n", "s_points_list", ".", "append", "(", "s_points", ")", "\n", "# print(pathlib.Path(info[\"path\"]).stem)", "\n", "# gt_bboxes = np.stack([s[\"bbox\"] for s in sampled], axis=0)", "\n", "# if np.random.choice([False, True], replace=False, p=[0.3, 0.7]):", "\n", "# do random crop.", "\n", "", "if", "random_crop", ":", "\n", "                ", "s_points_list_new", "=", "[", "]", "\n", "gt_bboxes", "=", "box_np_ops", ".", "box3d_to_bbox", "(", "sampled_gt_boxes", ",", "rect", ",", "\n", "Trv2c", ",", "P2", ")", "\n", "crop_frustums", "=", "prep", ".", "random_crop_frustum", "(", "\n", "gt_bboxes", ",", "rect", ",", "Trv2c", ",", "P2", ")", "\n", "for", "i", "in", "range", "(", "crop_frustums", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "s_points", "=", "s_points_list", "[", "i", "]", "\n", "mask", "=", "prep", ".", "mask_points_in_corners", "(", "\n", "s_points", ",", "crop_frustums", "[", "i", ":", "i", "+", "1", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "num_remove", "=", "np", ".", "sum", "(", "mask", ")", "\n", "if", "num_remove", ">", "0", "and", "(", "\n", "s_points", ".", "shape", "[", "0", "]", "-", "num_remove", ")", ">", "15", ":", "\n", "                        ", "s_points", "=", "s_points", "[", "np", ".", "logical_not", "(", "mask", ")", "]", "\n", "", "s_points_list_new", ".", "append", "(", "s_points", ")", "\n", "", "s_points_list", "=", "s_points_list_new", "\n", "", "ret", "=", "{", "\n", "\"gt_names\"", ":", "np", ".", "array", "(", "[", "s", "[", "\"name\"", "]", "for", "s", "in", "sampled", "]", ")", ",", "\n", "\"difficulty\"", ":", "np", ".", "array", "(", "[", "s", "[", "\"difficulty\"", "]", "for", "s", "in", "sampled", "]", ")", ",", "\n", "\"gt_boxes\"", ":", "sampled_gt_boxes", ",", "\n", "\"points\"", ":", "np", ".", "concatenate", "(", "s_points_list", ",", "axis", "=", "0", ")", ",", "\n", "\"gt_masks\"", ":", "np", ".", "ones", "(", "(", "num_sampled", ",", ")", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "}", "\n", "if", "self", ".", "_use_group_sampling", ":", "\n", "                ", "ret", "[", "\"group_ids\"", "]", "=", "np", ".", "array", "(", "[", "s", "[", "\"group_id\"", "]", "for", "s", "in", "sampled", "]", ")", "\n", "", "else", ":", "\n", "                ", "ret", "[", "\"group_ids\"", "]", "=", "np", ".", "arange", "(", "gt_boxes", ".", "shape", "[", "0", "]", ",", "gt_boxes", ".", "shape", "[", "0", "]", "+", "len", "(", "sampled", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "ret", "=", "None", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.sample_ops.DataBaseSamplerV2.sample": [[213, 222], ["sample_ops.DataBaseSamplerV2._sampler_dict[].sample", "sample_ops.DataBaseSamplerV2._sampler_dict[].sample", "len", "functools.reduce", "numpy.ones", "len"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.BatchSampler.sample", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.BatchSampler.sample"], ["", "def", "sample", "(", "self", ",", "name", ",", "num", ")", ":", "\n", "        ", "if", "self", ".", "_use_group_sampling", ":", "\n", "            ", "group_name", "=", "name", "\n", "ret", "=", "self", ".", "_sampler_dict", "[", "group_name", "]", ".", "sample", "(", "num", ")", "\n", "groups_num", "=", "[", "len", "(", "l", ")", "for", "l", "in", "ret", "]", "\n", "return", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "ret", ")", ",", "groups_num", "\n", "", "else", ":", "\n", "            ", "ret", "=", "self", ".", "_sampler_dict", "[", "name", "]", ".", "sample", "(", "num", ")", "\n", "return", "ret", ",", "np", ".", "ones", "(", "(", "len", "(", "ret", ")", ",", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.sample_ops.DataBaseSamplerV2.sample_v1": [[223, 232], ["isinstance", "sample_ops.DataBaseSamplerV2._sampler_dict[].sample", "sample_ops.DataBaseSamplerV2._sampler_dict[].sample", "len", "functools.reduce", "numpy.ones", "len"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.BatchSampler.sample", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.BatchSampler.sample"], ["", "", "def", "sample_v1", "(", "self", ",", "name", ",", "num", ")", ":", "\n", "        ", "if", "isinstance", "(", "name", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "group_name", "=", "\", \"", ".", "join", "(", "name", ")", "\n", "ret", "=", "self", ".", "_sampler_dict", "[", "group_name", "]", ".", "sample", "(", "num", ")", "\n", "groups_num", "=", "[", "len", "(", "l", ")", "for", "l", "in", "ret", "]", "\n", "return", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "ret", ")", ",", "groups_num", "\n", "", "else", ":", "\n", "            ", "ret", "=", "self", ".", "_sampler_dict", "[", "name", "]", ".", "sample", "(", "num", ")", "\n", "return", "ret", ",", "np", ".", "ones", "(", "(", "len", "(", "ret", ")", ",", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.sample_ops.DataBaseSamplerV2.sample_class_v2": [[234, 282], ["sample_ops.DataBaseSamplerV2._sampler_dict[].sample", "copy.deepcopy", "len", "second.core.box_np_ops.center_to_corner_box2d", "numpy.stack", "numpy.zeros", "numpy.concatenate", "numpy.concatenate().copy", "second.core.box_np_ops.center_to_corner_box2d", "numpy.concatenate", "second.core.preprocess.box_collision_test", "numpy.arange", "range", "second.core.preprocess.noise_per_object_v3_", "coll_mat[].any", "numpy.ones", "numpy.concatenate", "valid_samples.append"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.BatchSampler.sample", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box2d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box2d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.box_collision_test", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.noise_per_object_v3_"], ["", "", "def", "sample_class_v2", "(", "self", ",", "name", ",", "num", ",", "gt_boxes", ")", ":", "\n", "        ", "sampled", "=", "self", ".", "_sampler_dict", "[", "name", "]", ".", "sample", "(", "num", ")", "\n", "sampled", "=", "copy", ".", "deepcopy", "(", "sampled", ")", "\n", "num_gt", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "num_sampled", "=", "len", "(", "sampled", ")", "\n", "gt_boxes_bv", "=", "box_np_ops", ".", "center_to_corner_box2d", "(", "\n", "gt_boxes", "[", ":", ",", "0", ":", "2", "]", ",", "gt_boxes", "[", ":", ",", "3", ":", "5", "]", ",", "gt_boxes", "[", ":", ",", "6", "]", ")", "\n", "\n", "sp_boxes", "=", "np", ".", "stack", "(", "[", "i", "[", "\"box3d_lidar\"", "]", "for", "i", "in", "sampled", "]", ",", "axis", "=", "0", ")", "\n", "\n", "valid_mask", "=", "np", ".", "zeros", "(", "[", "gt_boxes", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "valid_mask", "=", "np", ".", "concatenate", "(", "\n", "[", "valid_mask", ",", "\n", "np", ".", "ones", "(", "[", "sp_boxes", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "bool_", ")", "]", ",", "axis", "=", "0", ")", "\n", "boxes", "=", "np", ".", "concatenate", "(", "[", "gt_boxes", ",", "sp_boxes", "]", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", "\n", "if", "self", ".", "_enable_global_rot", ":", "\n", "# place samples to any place in a circle.", "\n", "            ", "prep", ".", "noise_per_object_v3_", "(", "\n", "boxes", ",", "\n", "None", ",", "\n", "valid_mask", ",", "\n", "0", ",", "\n", "0", ",", "\n", "self", ".", "_global_rot_range", ",", "\n", "num_try", "=", "100", ")", "\n", "", "sp_boxes_new", "=", "boxes", "[", "gt_boxes", ".", "shape", "[", "0", "]", ":", "]", "\n", "sp_boxes_bv", "=", "box_np_ops", ".", "center_to_corner_box2d", "(", "\n", "sp_boxes_new", "[", ":", ",", "0", ":", "2", "]", ",", "sp_boxes_new", "[", ":", ",", "3", ":", "5", "]", ",", "sp_boxes_new", "[", ":", ",", "6", "]", ")", "\n", "\n", "total_bv", "=", "np", ".", "concatenate", "(", "[", "gt_boxes_bv", ",", "sp_boxes_bv", "]", ",", "axis", "=", "0", ")", "\n", "# coll_mat = collision_test_allbox(total_bv)", "\n", "coll_mat", "=", "prep", ".", "box_collision_test", "(", "total_bv", ",", "total_bv", ")", "\n", "diag", "=", "np", ".", "arange", "(", "total_bv", ".", "shape", "[", "0", "]", ")", "\n", "coll_mat", "[", "diag", ",", "diag", "]", "=", "False", "\n", "\n", "valid_samples", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_gt", ",", "num_gt", "+", "num_sampled", ")", ":", "\n", "            ", "if", "coll_mat", "[", "i", "]", ".", "any", "(", ")", ":", "\n", "                ", "coll_mat", "[", "i", "]", "=", "False", "\n", "coll_mat", "[", ":", ",", "i", "]", "=", "False", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "_enable_global_rot", ":", "\n", "                    ", "sampled", "[", "i", "-", "num_gt", "]", "[", "\"box3d_lidar\"", "]", "[", ":", "2", "]", "=", "boxes", "[", "i", ",", ":", "2", "]", "\n", "sampled", "[", "i", "-", "num_gt", "]", "[", "\"box3d_lidar\"", "]", "[", "-", "1", "]", "=", "boxes", "[", "i", ",", "-", "1", "]", "\n", "sampled", "[", "i", "-", "num_gt", "]", "[", "\"rot_transform\"", "]", "=", "(", "\n", "boxes", "[", "i", ",", "-", "1", "]", "-", "sp_boxes", "[", "i", "-", "num_gt", ",", "-", "1", "]", ")", "\n", "", "valid_samples", ".", "append", "(", "sampled", "[", "i", "-", "num_gt", "]", ")", "\n", "", "", "return", "valid_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.sample_ops.DataBaseSamplerV2.sample_group": [[283, 347], ["sample_ops.DataBaseSamplerV2.sample", "copy.deepcopy", "numpy.max", "second.core.box_np_ops.center_to_corner_box2d", "numpy.stack", "numpy.stack", "numpy.zeros", "numpy.concatenate", "numpy.concatenate().copy", "numpy.concatenate", "second.core.box_np_ops.center_to_corner_box2d", "numpy.concatenate", "second.core.preprocess.box_collision_test", "numpy.arange", "second.core.preprocess.noise_per_object_v3_", "coll_mat[].any", "numpy.ones", "numpy.concatenate", "range", "valid_samples.append"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.BatchSampler.sample", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box2d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box2d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.box_collision_test", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.noise_per_object_v3_"], ["", "def", "sample_group", "(", "self", ",", "name", ",", "num", ",", "gt_boxes", ",", "gt_group_ids", ")", ":", "\n", "        ", "sampled", ",", "group_num", "=", "self", ".", "sample", "(", "name", ",", "num", ")", "\n", "sampled", "=", "copy", ".", "deepcopy", "(", "sampled", ")", "\n", "# rewrite sampled group id to avoid duplicated with gt group ids", "\n", "gid_map", "=", "{", "}", "\n", "max_gt_gid", "=", "np", ".", "max", "(", "gt_group_ids", ")", "\n", "sampled_gid", "=", "max_gt_gid", "+", "1", "\n", "for", "s", "in", "sampled", ":", "\n", "            ", "gid", "=", "s", "[", "\"group_id\"", "]", "\n", "if", "gid", "in", "gid_map", ":", "\n", "                ", "s", "[", "\"group_id\"", "]", "=", "gid_map", "[", "gid", "]", "\n", "", "else", ":", "\n", "                ", "gid_map", "[", "gid", "]", "=", "sampled_gid", "\n", "s", "[", "\"group_id\"", "]", "=", "sampled_gid", "\n", "sampled_gid", "+=", "1", "\n", "\n", "", "", "num_gt", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "gt_boxes_bv", "=", "box_np_ops", ".", "center_to_corner_box2d", "(", "\n", "gt_boxes", "[", ":", ",", "0", ":", "2", "]", ",", "gt_boxes", "[", ":", ",", "3", ":", "5", "]", ",", "gt_boxes", "[", ":", ",", "6", "]", ")", "\n", "\n", "sp_boxes", "=", "np", ".", "stack", "(", "[", "i", "[", "\"box3d_lidar\"", "]", "for", "i", "in", "sampled", "]", ",", "axis", "=", "0", ")", "\n", "sp_group_ids", "=", "np", ".", "stack", "(", "[", "i", "[", "\"group_id\"", "]", "for", "i", "in", "sampled", "]", ",", "axis", "=", "0", ")", "\n", "valid_mask", "=", "np", ".", "zeros", "(", "[", "gt_boxes", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "valid_mask", "=", "np", ".", "concatenate", "(", "\n", "[", "valid_mask", ",", "\n", "np", ".", "ones", "(", "[", "sp_boxes", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "bool_", ")", "]", ",", "axis", "=", "0", ")", "\n", "boxes", "=", "np", ".", "concatenate", "(", "[", "gt_boxes", ",", "sp_boxes", "]", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", "\n", "group_ids", "=", "np", ".", "concatenate", "(", "[", "gt_group_ids", ",", "sp_group_ids", "]", ",", "axis", "=", "0", ")", "\n", "if", "self", ".", "_enable_global_rot", ":", "\n", "# place samples to any place in a circle.", "\n", "            ", "prep", ".", "noise_per_object_v3_", "(", "\n", "boxes", ",", "\n", "None", ",", "\n", "valid_mask", ",", "\n", "0", ",", "\n", "0", ",", "\n", "self", ".", "_global_rot_range", ",", "\n", "group_ids", "=", "group_ids", ",", "\n", "num_try", "=", "100", ")", "\n", "", "sp_boxes_new", "=", "boxes", "[", "gt_boxes", ".", "shape", "[", "0", "]", ":", "]", "\n", "sp_boxes_bv", "=", "box_np_ops", ".", "center_to_corner_box2d", "(", "\n", "sp_boxes_new", "[", ":", ",", "0", ":", "2", "]", ",", "sp_boxes_new", "[", ":", ",", "3", ":", "5", "]", ",", "sp_boxes_new", "[", ":", ",", "6", "]", ")", "\n", "total_bv", "=", "np", ".", "concatenate", "(", "[", "gt_boxes_bv", ",", "sp_boxes_bv", "]", ",", "axis", "=", "0", ")", "\n", "# coll_mat = collision_test_allbox(total_bv)", "\n", "coll_mat", "=", "prep", ".", "box_collision_test", "(", "total_bv", ",", "total_bv", ")", "\n", "diag", "=", "np", ".", "arange", "(", "total_bv", ".", "shape", "[", "0", "]", ")", "\n", "coll_mat", "[", "diag", ",", "diag", "]", "=", "False", "\n", "valid_samples", "=", "[", "]", "\n", "idx", "=", "num_gt", "\n", "for", "num", "in", "group_num", ":", "\n", "            ", "if", "coll_mat", "[", "idx", ":", "idx", "+", "num", "]", ".", "any", "(", ")", ":", "\n", "                ", "coll_mat", "[", "idx", ":", "idx", "+", "num", "]", "=", "False", "\n", "coll_mat", "[", ":", ",", "idx", ":", "idx", "+", "num", "]", "=", "False", "\n", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "                    ", "if", "self", ".", "_enable_global_rot", ":", "\n", "                        ", "sampled", "[", "idx", "-", "num_gt", "+", "i", "]", "[", "\"box3d_lidar\"", "]", "[", ":", "2", "]", "=", "boxes", "[", "idx", "+", "i", ",", ":", "2", "]", "\n", "sampled", "[", "idx", "-", "num_gt", "+", "i", "]", "[", "\"box3d_lidar\"", "]", "[", "-", "1", "]", "=", "boxes", "[", "idx", "+", "i", ",", "-", "1", "]", "\n", "sampled", "[", "idx", "-", "num_gt", "+", "i", "]", "[", "\"rot_transform\"", "]", "=", "(", "\n", "boxes", "[", "idx", "+", "i", ",", "-", "1", "]", "-", "sp_boxes", "[", "idx", "+", "i", "-", "num_gt", ",", "-", "1", "]", ")", "\n", "\n", "", "valid_samples", ".", "append", "(", "sampled", "[", "idx", "-", "num_gt", "+", "i", "]", ")", "\n", "", "", "idx", "+=", "num", "\n", "", "return", "valid_samples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.BatchSampler.__init__": [[18, 30], ["numpy.arange", "len", "len", "numpy.random.shuffle"], "methods", ["None"], ["    ", "sys", ".", "path", ".", "remove", "(", "'/opt/ros/kinetic/lib/python2.7/dist-packages'", ")", "\n", "", "import", "cv2", "\n", "\n", "def", "merge_second_batch", "(", "batch_list", ",", "_unused", "=", "False", ")", ":", "\n", "#print(\"~~~~~~~~what's in the batch_list\",batch_list[2])", "\n", "    ", "example_merged", "=", "defaultdict", "(", "list", ")", "\n", "count", "=", "0", "\n", "for", "example", "in", "batch_list", ":", "\n", "        ", "count", "=", "count", "+", "1", "\n", "for", "k", ",", "v", "in", "example", ".", "items", "(", ")", ":", "\n", "            ", "example_merged", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "", "", "count", "=", "0", "\n", "ret", "=", "{", "}", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.BatchSampler._sample": [[31, 39], ["preprocess.BatchSampler._indices[].copy", "preprocess.BatchSampler._reset"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.BatchSampler._reset"], ["example_merged", ".", "pop", "(", "\"num_voxels\"", ")", "\n", "for", "key", ",", "elems", "in", "example_merged", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "in", "[", "\n", "'voxels'", ",", "'num_points'", ",", "'num_gt'", ",", "'gt_boxes'", ",", "'voxel_labels'", ",", "\n", "'match_indices'", "\n", "]", ":", "\n", "            ", "ret", "[", "key", "]", "=", "np", ".", "concatenate", "(", "elems", ",", "axis", "=", "0", ")", "\n", "", "elif", "key", "==", "'match_indices_num'", ":", "\n", "            ", "ret", "[", "key", "]", "=", "np", ".", "concatenate", "(", "elems", ",", "axis", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.BatchSampler._reset": [[40, 46], ["print", "numpy.random.shuffle"], "methods", ["None"], ["", "elif", "key", "==", "'images'", ":", "\n", "            ", "ret", "[", "key", "]", "=", "elems", "[", "0", "]", "\n", "", "elif", "key", "==", "'coordinates'", ":", "\n", "            ", "coors", "=", "[", "]", "\n", "for", "i", ",", "coor", "in", "enumerate", "(", "elems", ")", ":", "\n", "#print(\"@@@@@@@@@@@@@ the shape of coor\",coor.shape)", "\n", "                ", "coor_pad", "=", "np", ".", "pad", "(", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.BatchSampler.sample": [[47, 50], ["preprocess.BatchSampler._sample"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.BatchSampler._sample"], ["coor", ",", "(", "(", "0", ",", "0", ")", ",", "(", "1", ",", "0", ")", ")", ",", "\n", "mode", "=", "'constant'", ",", "\n", "constant_values", "=", "i", ")", "\n", "coors", ".", "append", "(", "coor_pad", ")", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.DataBasePreprocessing.__call__": [[54, 56], ["preprocess.DataBasePreprocessing._preprocess"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.DBFilterByMinNumPoint._preprocess"], ["", "", "return", "ret", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.DataBasePreprocessing._preprocess": [[57, 60], ["None"], "methods", ["None"], ["", "def", "prep_pointcloud", "(", "input_dict", ",", "\n", "root_path", ",", "\n", "voxel_generator", ",", "\n", "target_assigner", ",", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.DBFilterByDifficulty.__init__": [[63, 66], ["print"], "methods", ["None"], ["class_names", "=", "[", "'Car'", "]", ",", "\n", "remove_outside_points", "=", "False", ",", "\n", "training", "=", "True", ",", "\n", "create_targets", "=", "True", ",", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.DBFilterByDifficulty._preprocess": [[67, 75], ["db_infos.items"], "methods", ["None"], ["shuffle_points", "=", "False", ",", "\n", "reduce_valid_area", "=", "False", ",", "\n", "remove_unknown", "=", "False", ",", "\n", "gt_rotation_noise", "=", "[", "-", "np", ".", "pi", "/", "3", ",", "np", ".", "pi", "/", "3", "]", ",", "\n", "gt_loc_noise_std", "=", "[", "1.0", ",", "1.0", ",", "1.0", "]", ",", "\n", "global_rotation_noise", "=", "[", "-", "np", ".", "pi", "/", "4", ",", "np", ".", "pi", "/", "4", "]", ",", "\n", "global_scaling_noise", "=", "[", "0.95", ",", "1.05", "]", ",", "\n", "global_random_rot_range", "=", "[", "0.78", ",", "2.35", "]", ",", "\n", "generate_bev", "=", "False", ",", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.DBFilterByMinNumPoint.__init__": [[78, 81], ["print"], "methods", ["None"], ["anchor_area_threshold", "=", "1", ",", "\n", "gt_points_drop", "=", "0.0", ",", "\n", "gt_drop_max_keep", "=", "10", ",", "\n", "remove_points_after_sample", "=", "True", ",", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.DBFilterByMinNumPoint._preprocess": [[82, 91], ["preprocess.DBFilterByMinNumPoint._min_gt_point_dict.items", "filtered_infos.append"], "methods", ["None"], ["anchor_cache", "=", "None", ",", "\n", "remove_environment", "=", "False", ",", "\n", "random_crop", "=", "False", ",", "\n", "reference_detections", "=", "None", ",", "\n", "add_rgb_to_points", "=", "False", ",", "\n", "lidar_input", "=", "False", ",", "\n", "unlabeled_db_sampler", "=", "None", ",", "\n", "out_size_factor", "=", "2", ",", "\n", "min_gt_point_dict", "=", "None", ",", "\n", "bev_only", "=", "False", ",", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.DataBasePreprocessor.__init__": [[94, 96], ["None"], "methods", ["None"], ["    ", "\"\"\"convert point cloud to voxels, create targets if ground truths\n    exists.\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.DataBasePreprocessor.__call__": [[97, 101], ["prepor"], "methods", ["None"], ["points", "=", "input_dict", "[", "\"points\"", "]", "\n", "images", "=", "input_dict", "[", "\"images\"", "]", "\n", "if", "training", ":", "\n", "        ", "gt_boxes", "=", "input_dict", "[", "\"gt_boxes\"", "]", "\n", "gt_2d_boxes", "=", "input_dict", "[", "\"gt_2d_bbox\"", "]", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.random_crop_frustum": [[103, 129], ["numpy.random.uniform", "numpy.ones", "numpy.concatenate", "numpy.random.choice", "numpy.tile", "numpy.tile", "second.core.box_np_ops.projection_matrix_to_CRT_kitti", "second.core.box_np_ops.get_frustum_v2", "numpy.einsum", "second.core.box_np_ops.camera_to_lidar", "numpy.linalg.inv"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.projection_matrix_to_CRT_kitti", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.get_frustum_v2", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.camera_to_lidar"], ["difficulty", "=", "input_dict", "[", "\"difficulty\"", "]", "\n", "group_ids", "=", "None", "\n", "if", "use_group_id", "and", "\"group_ids\"", "in", "input_dict", ":", "\n", "            ", "group_ids", "=", "input_dict", "[", "\"group_ids\"", "]", "\n", "", "", "rect", "=", "input_dict", "[", "\"rect\"", "]", "\n", "Trv2c", "=", "input_dict", "[", "\"Trv2c\"", "]", "\n", "P2", "=", "input_dict", "[", "\"P2\"", "]", "\n", "unlabeled_training", "=", "unlabeled_db_sampler", "is", "not", "None", "\n", "image_idx", "=", "input_dict", "[", "\"image_idx\"", "]", "\n", "'''\n    image_shape = input_dict[\"image_shape\"]    #pang added\n    points = box_np_ops.remove_outside_points(points, rect, Trv2c, P2,\n                                              image_shape) #pang added\n                                              '''", "\n", "if", "reference_detections", "is", "not", "None", ":", "\n", "        ", "C", ",", "R", ",", "T", "=", "box_np_ops", ".", "projection_matrix_to_CRT_kitti", "(", "P2", ")", "\n", "frustums", "=", "box_np_ops", ".", "get_frustum_v2", "(", "reference_detections", ",", "C", ")", "\n", "frustums", "-=", "T", "\n", "# frustums = np.linalg.inv(R) @ frustums.T", "\n", "frustums", "=", "np", ".", "einsum", "(", "'ij, akj->aki'", ",", "np", ".", "linalg", ".", "inv", "(", "R", ")", ",", "frustums", ")", "\n", "frustums", "=", "box_np_ops", ".", "camera_to_lidar", "(", "frustums", ",", "rect", ",", "Trv2c", ")", "\n", "surfaces", "=", "box_np_ops", ".", "corner_to_surfaces_3d_jit", "(", "frustums", ")", "\n", "masks", "=", "points_in_convex_polygon_3d_jit", "(", "points", ",", "surfaces", ")", "\n", "points", "=", "points", "[", "masks", ".", "any", "(", "-", "1", ")", "]", "\n", "\n", "", "if", "remove_outside_points", "and", "not", "lidar_input", ":", "\n", "        ", "image_shape", "=", "input_dict", "[", "\"image_shape\"", "]", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.filter_gt_box_outside_range": [[131, 145], ["second.core.box_np_ops.center_to_corner_box2d", "second.core.box_np_ops.minmax_to_corner_2d", "second.core.geometry.points_in_convex_polygon_jit", "numpy.any", "box_np_ops.center_to_corner_box2d.reshape", "second.core.geometry.points_in_convex_polygon_jit.reshape", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box2d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.minmax_to_corner_2d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry.points_in_convex_polygon_jit"], ["image_shape", ")", "\n", "", "if", "remove_environment", "is", "True", "and", "training", ":", "\n", "        ", "selected", "=", "kitti", ".", "keep_arrays_by_name", "(", "gt_names", ",", "class_names", ")", "\n", "gt_boxes", "=", "gt_boxes", "[", "selected", "]", "\n", "gt_2d_boxes", "=", "gt_2d_boxes", "[", "selected", "]", "\n", "gt_names", "=", "gt_names", "[", "selected", "]", "\n", "difficulty", "=", "difficulty", "[", "selected", "]", "\n", "if", "group_ids", "is", "not", "None", ":", "\n", "            ", "group_ids", "=", "group_ids", "[", "selected", "]", "\n", "", "points", "=", "prep", ".", "remove_points_outside_boxes", "(", "points", ",", "gt_boxes", ")", "\n", "\n", "", "if", "training", ":", "\n", "        ", "selected", "=", "kitti", ".", "drop_arrays_by_name", "(", "gt_names", ",", "[", "\"DontCare\"", "]", ")", "\n", "gt_boxes", "=", "gt_boxes", "[", "selected", "]", "\n", "gt_2d_boxes", "=", "gt_2d_boxes", "[", "selected", "]", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.filter_gt_box_outside_range_by_center": [[147, 159], ["second.core.box_np_ops.minmax_to_corner_2d", "second.core.geometry.points_in_convex_polygon_jit", "second.core.geometry.points_in_convex_polygon_jit.reshape", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.minmax_to_corner_2d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry.points_in_convex_polygon_jit"], ["difficulty", "=", "difficulty", "[", "selected", "]", "\n", "if", "group_ids", "is", "not", "None", ":", "\n", "            ", "group_ids", "=", "group_ids", "[", "selected", "]", "\n", "\n", "", "gt_boxes", "=", "box_np_ops", ".", "box_camera_to_lidar", "(", "gt_boxes", ",", "rect", ",", "Trv2c", ")", "\n", "if", "remove_unknown", ":", "\n", "            ", "remove_mask", "=", "difficulty", "==", "-", "1", "\n", "keep_mask", "=", "np", ".", "logical_not", "(", "remove_mask", ")", "\n", "gt_boxes", "=", "gt_boxes", "[", "keep_mask", "]", "\n", "gt_2d_boxes", "=", "gt_2d_boxes", "[", "keep_mask", "]", "\n", "gt_names", "=", "gt_names", "[", "keep_mask", "]", "\n", "difficulty", "=", "difficulty", "[", "keep_mask", "]", "\n", "if", "group_ids", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.filter_gt_low_points": [[161, 174], ["numpy.ones", "numpy.ones", "enumerate", "second.core.box_np_ops.points_in_rbbox", "masks.reshape.reshape", "numpy.logical_not"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.points_in_rbbox"], ["", "", "gt_boxes_mask", "=", "np", ".", "array", "(", "\n", "[", "n", "in", "class_names", "for", "n", "in", "gt_names", "]", ",", "dtype", "=", "np", ".", "bool_", ")", "# this part generate masks that can filter out unrelated classes", "\n", "if", "without_reflectivity", ":", "\n", "            ", "used_point_axes", "=", "list", "(", "range", "(", "num_point_features", ")", ")", "\n", "used_point_axes", ".", "pop", "(", "3", ")", "\n", "points", "=", "points", "[", ":", ",", "used_point_axes", "]", "\n", "", "pc_range", "=", "voxel_generator", ".", "point_cloud_range", "\n", "if", "bev_only", ":", "# set z and h to limits", "\n", "            ", "gt_boxes", "[", ":", ",", "2", "]", "=", "pc_range", "[", "2", "]", "\n", "gt_boxes", "[", ":", ",", "5", "]", "=", "pc_range", "[", "5", "]", "-", "pc_range", "[", "2", "]", "\n", "#gt_names = gt_names[gt_boxes_mask]", "\n", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.remove_points_in_boxes": [[176, 180], ["second.core.box_np_ops.points_in_rbbox", "numpy.logical_not", "box_np_ops.points_in_rbbox.any"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.points_in_rbbox"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.remove_points_outside_boxes": [[182, 186], ["second.core.box_np_ops.points_in_rbbox", "box_np_ops.points_in_rbbox.any"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.points_in_rbbox"], ["\n", "# should remove unrelated objects after noise per object", "\n", "\n", "gt_boxes", "=", "gt_boxes", "[", "gt_boxes_mask", "]", "\n", "gt_2d_boxes", "=", "gt_2d_boxes", "[", "gt_boxes_mask", "]", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.mask_points_in_corners": [[188, 192], ["second.core.box_np_ops.corner_to_surfaces_3d", "second.core.geometry.points_in_convex_polygon_3d_jit"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corner_to_surfaces_3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry.points_in_convex_polygon_3d_jit"], ["#print(\"gt_names after some process:\",gt_names)   #here it has finished sampling and filtering", "\n", "if", "group_ids", "is", "not", "None", ":", "\n", "            ", "group_ids", "=", "group_ids", "[", "gt_boxes_mask", "]", "\n", "", "gt_classes", "=", "np", ".", "array", "(", "\n", "[", "class_names", ".", "index", "(", "n", ")", "+", "1", "for", "n", "in", "gt_names", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess._rotation_matrix_3d_": [[194, 214], ["numpy.sin", "numpy.cos", "numpy.eye"], "function", ["None"], ["\n", "bv_range", "=", "voxel_generator", ".", "point_cloud_range", "[", "[", "0", ",", "1", ",", "3", ",", "4", "]", "]", "\n", "mask", "=", "prep", ".", "filter_gt_box_outside_range", "(", "gt_boxes", ",", "bv_range", ")", "\n", "gt_boxes", "=", "gt_boxes", "[", "mask", "]", "\n", "gt_2d_boxes", "=", "gt_2d_boxes", "[", "mask", "]", "\n", "gt_classes", "=", "gt_classes", "[", "mask", "]", "\n", "gt_names", "=", "gt_names", "[", "mask", "]", "\n", "if", "group_ids", "is", "not", "None", ":", "\n", "            ", "group_ids", "=", "group_ids", "[", "mask", "]", "\n", "\n", "# limit rad to [-pi, pi]", "\n", "", "'''\n        gt_boxes[:, 6] = box_np_ops.limit_period(\n            gt_boxes[:, 6], offset=0.5, period=2 * np.pi)\n            '''", "\n", "", "if", "shuffle_points", ":", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess._rotation_box2d_jit_": [[216, 225], ["numpy.sin", "numpy.cos"], "function", ["None"], ["        ", "np", ".", "random", ".", "shuffle", "(", "points", ")", "\n", "\n", "# [0, -40, -3, 70.4, 40, 1]", "\n", "", "voxel_size", "=", "voxel_generator", ".", "voxel_size", "\n", "pc_range", "=", "voxel_generator", ".", "point_cloud_range", "\n", "grid_size", "=", "voxel_generator", ".", "grid_size", "\n", "# [352, 400]", "\n", "\n", "voxels", ",", "coordinates", ",", "num_points", "=", "voxel_generator", ".", "generate", "(", "\n", "points", ",", "max_voxels", ")", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess._box_single_to_corner_jit": [[227, 248], ["numba.jit", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.zeros", "range", "np.zeros.reshape", "numpy.sin", "numpy.cos", "boxes.reshape"], "function", ["None"], ["        ", "example", "=", "{", "\n", "'voxels'", ":", "voxels", ",", "\n", "'num_points'", ":", "num_points", ",", "\n", "'coordinates'", ":", "coordinates", ",", "\n", "\"num_voxels\"", ":", "np", ".", "array", "(", "[", "voxels", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "int64", ")", ",", "\n", "\"d3_gt_boxes\"", ":", "gt_boxes", "\n", "}", "\n", "", "else", ":", "\n", "        ", "example", "=", "{", "\n", "'voxels'", ":", "voxels", ",", "\n", "'num_points'", ":", "num_points", ",", "\n", "'coordinates'", ":", "coordinates", ",", "\n", "\"num_voxels\"", ":", "np", ".", "array", "(", "[", "voxels", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "int64", ")", ",", "\n", "}", "\n", "", "example", ".", "update", "(", "{", "\n", "'rect'", ":", "rect", ",", "\n", "'Trv2c'", ":", "Trv2c", ",", "\n", "'P2'", ":", "P2", ",", "\n", "}", ")", "\n", "# if not lidar_input:", "\n", "feature_map_size", "=", "grid_size", "[", ":", "2", "]", "//", "out_size_factor", "\n", "feature_map_size", "=", "[", "*", "feature_map_size", ",", "1", "]", "[", ":", ":", "-", "1", "]", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.noise_per_box": [[250, 280], ["second.core.box_np_ops.box2d_to_corner_jit", "numpy.zeros", "numpy.zeros", "range", "numpy.ones", "range", "preprocess._rotation_box2d_jit_", "preprocess.box_collision_test", "np.zeros.reshape", "box_collision_test.any"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box2d_to_corner_jit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess._rotation_box2d_jit_", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.box_collision_test"], ["        ", "anchors", "=", "anchor_cache", "[", "\"anchors\"", "]", "\n", "anchors_bv", "=", "anchor_cache", "[", "\"anchors_bv\"", "]", "\n", "matched_thresholds", "=", "anchor_cache", "[", "\"matched_thresholds\"", "]", "\n", "unmatched_thresholds", "=", "anchor_cache", "[", "\"unmatched_thresholds\"", "]", "\n", "anchors_dict", "=", "anchor_cache", "[", "\"anchors_dict\"", "]", "\n", "", "else", ":", "\n", "        ", "ret", "=", "target_assigner", ".", "generate_anchors", "(", "feature_map_size", ")", "\n", "anchors", "=", "ret", "[", "\"anchors\"", "]", "\n", "anchors", "=", "anchors", ".", "reshape", "(", "[", "-", "1", ",", "7", "]", ")", "\n", "matched_thresholds", "=", "ret", "[", "\"matched_thresholds\"", "]", "\n", "unmatched_thresholds", "=", "ret", "[", "\"unmatched_thresholds\"", "]", "\n", "anchors_dict", "=", "target_assigner", ".", "generate_anchors_dict", "(", "feature_map_size", ")", "\n", "anchors_bv", "=", "box_np_ops", ".", "rbbox2d_to_near_bbox", "(", "\n", "anchors", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", ")", "\n", "", "example", "[", "\"anchors\"", "]", "=", "anchors", "\n", "example", "[", "\"images\"", "]", "=", "images", "\n", "# anchors_bv = anchors_bv.reshape([-1, 4])", "\n", "anchors_mask", "=", "None", "\n", "if", "anchor_area_threshold", ">=", "0", ":", "\n", "        ", "coors", "=", "coordinates", "\n", "dense_voxel_map", "=", "box_np_ops", ".", "sparse_sum_for_anchors_mask", "(", "\n", "coors", ",", "tuple", "(", "grid_size", "[", ":", ":", "-", "1", "]", "[", "1", ":", "]", ")", ")", "\n", "dense_voxel_map", "=", "dense_voxel_map", ".", "cumsum", "(", "0", ")", "\n", "dense_voxel_map", "=", "dense_voxel_map", ".", "cumsum", "(", "1", ")", "\n", "anchors_area", "=", "box_np_ops", ".", "fused_get_anchors_area", "(", "\n", "dense_voxel_map", ",", "anchors_bv", ",", "voxel_size", ",", "pc_range", ",", "grid_size", ")", "\n", "anchors_mask", "=", "anchors_area", ">", "anchor_area_threshold", "\n", "# example['anchors_mask'] = anchors_mask.astype(np.uint8)", "\n", "example", "[", "'anchors_mask'", "]", "=", "anchors_mask", "\n", "#if training:", "\n", "#return example", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.noise_per_box_group": [[282, 320], ["second.core.box_np_ops.box2d_to_corner_jit", "group_nums.max", "numpy.zeros", "numpy.zeros", "numpy.ones", "range", "range", "preprocess.box_collision_test", "range", "preprocess._rotation_box2d_jit_", "current_corners[].reshape", "box_collision_test.any", "range"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box2d_to_corner_jit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.box_collision_test", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess._rotation_box2d_jit_"], ["        ", "return", "example", "\n", "", "if", "create_targets", ":", "\n", "        ", "targets_dict", "=", "target_assigner", ".", "assign_v2", "(", "\n", "anchors_dict", ",", "\n", "gt_boxes", ",", "\n", "anchors_mask", ",", "\n", "gt_classes", "=", "gt_classes", ",", "\n", "gt_names", "=", "gt_names", ")", "\n", "example", ".", "update", "(", "{", "\n", "'labels'", ":", "targets_dict", "[", "'labels'", "]", ",", "\n", "'reg_targets'", ":", "targets_dict", "[", "'bbox_targets'", "]", ",", "\n", "'reg_weights'", ":", "targets_dict", "[", "'bbox_outside_weights'", "]", ",", "\n", "'gt_2d_boxes'", ":", "gt_2d_boxes", "\n", "}", ")", "\n", "", "reg_targets_1", "=", "targets_dict", "[", "'bbox_targets'", "]", "\n", "reg_targets_labels", "=", "targets_dict", "[", "'labels'", "]", "\n", "index_1", "=", "np", ".", "nonzero", "(", "reg_targets_labels", ")", "\n", "return", "example", "\n", "\n", "\n", "", "def", "_read_and_prep_v9", "(", "info", ",", "root_path", ",", "num_point_features", ",", "prep_func", ")", ":", "\n", "    ", "\"\"\"read data from KITTI-format infos, then call prep function.\n    \"\"\"", "\n", "# velodyne_path = str(pathlib.Path(root_path) / info['velodyne_path'])", "\n", "# velodyne_path += '_reduced'", "\n", "v_path", "=", "pathlib", ".", "Path", "(", "root_path", ")", "/", "info", "[", "'velodyne_path'", "]", "\n", "v_path", "=", "v_path", ".", "parent", ".", "parent", "/", "(", "\n", "v_path", ".", "parent", ".", "stem", "+", "\"_reduced\"", ")", "/", "v_path", ".", "name", "\n", "i_path", "=", "pathlib", ".", "Path", "(", "root_path", ")", "/", "info", "[", "'img_path'", "]", "\n", "points", "=", "np", ".", "fromfile", "(", "\n", "str", "(", "v_path", ")", ",", "dtype", "=", "np", ".", "float32", ",", "\n", "count", "=", "-", "1", ")", ".", "reshape", "(", "[", "-", "1", ",", "num_point_features", "]", ")", "\n", "image_idx", "=", "info", "[", "'image_idx'", "]", "\n", "rect", "=", "info", "[", "'calib/R0_rect'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "Trv2c", "=", "info", "[", "'calib/Tr_velo_to_cam'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "P2", "=", "info", "[", "'calib/P2'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "#image_pang_bgr = cv2.imread(str(i_path))", "\n", "#image_pang = image_pang_bgr[..., :: -1]", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.noise_per_box_group_v2_": [[322, 399], ["second.core.box_np_ops.box2d_to_corner_jit", "group_nums.max", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array", "corners_norm.reshape.reshape", "numpy.ones", "range", "range", "preprocess.box_collision_test", "range", "numpy.sqrt", "numpy.arctan2", "numpy.sin", "numpy.cos", "preprocess._rotation_box2d_jit_", "current_corners[].reshape", "box_collision_test.any", "range", "numpy.sin", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box2d_to_corner_jit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.box_collision_test", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess._rotation_box2d_jit_"], ["\n", "image_pang", "=", "None", "\n", "#image_pang = pil2tensor(image_pang_bgr)", "\n", "input_dict", "=", "{", "\n", "'points'", ":", "points", ",", "\n", "'rect'", ":", "rect", ",", "\n", "'Trv2c'", ":", "Trv2c", ",", "\n", "'P2'", ":", "P2", ",", "\n", "'image_shape'", ":", "np", ".", "array", "(", "info", "[", "\"img_shape\"", "]", ",", "dtype", "=", "np", ".", "int32", ")", ",", "\n", "'image_idx'", ":", "image_idx", ",", "\n", "'image_path'", ":", "info", "[", "'img_path'", "]", ",", "\n", "'images'", ":", "image_pang", ",", "\n", "#'gt_2d_bbox': gt_2d_box", "\n", "# 'pointcloud_num_features': num_point_features,", "\n", "}", "\n", "\n", "if", "'annos'", "in", "info", ":", "\n", "        ", "annos", "=", "info", "[", "'annos'", "]", "\n", "# we need other objects to avoid collision when sample", "\n", "annos", "=", "kitti", ".", "remove_dontcare", "(", "annos", ")", "\n", "loc", "=", "annos", "[", "\"location\"", "]", "\n", "dims", "=", "annos", "[", "\"dimensions\"", "]", "\n", "rots", "=", "annos", "[", "\"rotation_y\"", "]", "\n", "gt_names", "=", "annos", "[", "\"name\"", "]", "\n", "gt_2d_box", "=", "annos", "[", "\"bbox\"", "]", "\n", "# print(gt_names, len(loc))", "\n", "gt_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# gt_boxes = box_np_ops.box_camera_to_lidar(gt_boxes, rect, Trv2c)", "\n", "difficulty", "=", "annos", "[", "\"difficulty\"", "]", "\n", "input_dict", ".", "update", "(", "{", "\n", "'gt_boxes'", ":", "gt_boxes", ",", "\n", "'gt_names'", ":", "gt_names", ",", "\n", "'difficulty'", ":", "difficulty", ",", "\n", "'gt_2d_bbox'", ":", "gt_2d_box", ",", "\n", "}", ")", "\n", "if", "'group_ids'", "in", "annos", ":", "\n", "            ", "input_dict", "[", "'group_ids'", "]", "=", "annos", "[", "\"group_ids\"", "]", "\n", "", "", "example", "=", "prep_func", "(", "input_dict", "=", "input_dict", ")", "\n", "example", "[", "\"image_idx\"", "]", "=", "image_idx", "\n", "example", "[", "\"image_shape\"", "]", "=", "input_dict", "[", "\"image_shape\"", "]", "\n", "#example[\"gt_2d_bbox\"] = gt_2d_box", "\n", "#example[\"images\"] = input_dict[\"image\"]", "\n", "if", "\"anchors_mask\"", "in", "example", ":", "\n", "        ", "example", "[", "\"anchors_mask\"", "]", "=", "example", "[", "\"anchors_mask\"", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "return", "example", "\n", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.noise_per_box_v2_": [[401, 457], ["second.core.box_np_ops.box2d_to_corner_jit", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array", "corners_norm.reshape.reshape", "range", "numpy.ones", "range", "numpy.sqrt", "numpy.arctan2", "numpy.sin", "numpy.cos", "preprocess._rotation_box2d_jit_", "preprocess.box_collision_test", "numpy.sin", "numpy.cos", "np.zeros.reshape", "box_collision_test.any"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box2d_to_corner_jit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess._rotation_box2d_jit_", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.box_collision_test"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.points_transform_": [[459, 476], ["numpy.zeros", "range", "range", "preprocess._rotation_matrix_3d_", "range"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess._rotation_matrix_3d_"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.box3d_transform_": [[478, 485], ["range"], "function", ["None"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess._select_transform": [[487, 494], ["numpy.zeros", "range"], "function", ["None"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.group_transform_": [[496, 519], ["range", "numpy.sqrt", "numpy.arctan2", "range", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.cos"], "function", ["None"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.group_transform_v2_": [[521, 546], ["range", "numpy.sqrt", "numpy.arctan2", "range", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.cos"], "function", ["None"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.set_group_noise_same_": [[548, 556], ["enumerate", "range"], "function", ["None"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.set_group_noise_same_v2_": [[558, 567], ["enumerate", "range"], "function", ["None"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.get_group_center": [[569, 589], ["numpy.zeros_like", "numpy.zeros_like", "collections.OrderedDict", "enumerate", "enumerate"], "function", ["None"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.noise_per_object_v3_": [[592, 686], ["numpy.array", "numpy.random.normal", "numpy.random.uniform", "numpy.arctan2", "numpy.random.uniform", "second.core.box_np_ops.center_to_corner_box3d", "preprocess._select_transform", "preprocess._select_transform", "second.core.box_np_ops.corner_to_surfaces_3d_jit", "preprocess.box3d_transform_", "isinstance", "isinstance", "numpy.abs", "isinstance", "numpy.ones", "preprocess.get_group_center", "numpy.array", "second.core.geometry.points_in_convex_polygon_3d_jit", "preprocess.points_transform_", "preprocess.set_group_noise_same_v2_", "preprocess.set_group_noise_same_", "preprocess.group_transform_v2_", "preprocess.group_transform_", "list", "preprocess.noise_per_box_group", "preprocess.noise_per_box_group_v2_", "preprocess.noise_per_box", "preprocess.noise_per_box_v2_", "group_id_num_dict.values"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess._select_transform", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess._select_transform", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corner_to_surfaces_3d_jit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.box3d_transform_", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.get_group_center", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry.points_in_convex_polygon_3d_jit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.points_transform_", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.set_group_noise_same_v2_", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.set_group_noise_same_", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.group_transform_v2_", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.group_transform_", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.noise_per_box_group", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.noise_per_box_group_v2_", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.noise_per_box", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.noise_per_box_v2_"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.noise_per_object_v2_": [[688, 754], ["numpy.array", "numpy.random.normal", "numpy.random.uniform", "numpy.arctan2", "numpy.random.uniform", "second.core.box_np_ops.center_to_corner_box3d", "preprocess._select_transform", "preprocess._select_transform", "preprocess.box3d_transform_", "isinstance", "isinstance", "isinstance", "numpy.ones", "numpy.abs", "preprocess.noise_per_box", "preprocess.noise_per_box_v2_", "second.core.box_np_ops.corner_to_surfaces_3d_jit", "second.core.geometry.points_in_convex_polygon_3d_jit", "preprocess.points_transform_"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess._select_transform", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess._select_transform", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.box3d_transform_", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.noise_per_box", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.noise_per_box_v2_", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corner_to_surfaces_3d_jit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry.points_in_convex_polygon_3d_jit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.points_transform_"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.global_scaling": [[756, 763], ["numpy.random.uniform", "isinstance"], "function", ["None"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.global_rotation": [[765, 775], ["numpy.random.uniform", "second.core.box_np_ops.rotation_points_single_angle", "second.core.box_np_ops.rotation_points_single_angle", "isinstance"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rotation_points_single_angle", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rotation_points_single_angle"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.random_flip": [[777, 785], ["numpy.random.choice"], "function", ["None"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.global_scaling_v2": [[787, 792], ["numpy.random.uniform"], "function", ["None"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.global_rotation_v2": [[794, 803], ["numpy.random.uniform", "second.core.box_np_ops.rotation_points_single_angle", "second.core.box_np_ops.rotation_points_single_angle"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rotation_points_single_angle", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rotation_points_single_angle"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.box_collision_test": [[806, 887], ["numba.jit", "numpy.zeros", "numpy.array", "numpy.stack", "numpy.stack", "second.core.box_np_ops.corner_to_standup_nd_jit", "second.core.box_np_ops.corner_to_standup_nd_jit", "range", "range", "min", "max", "min", "max", "range", "range", "range", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corner_to_standup_nd_jit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corner_to_standup_nd_jit"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry.is_line_segment_intersection_jit": [[5, 35], ["numpy.zeros", "range", "range"], "function", ["None"], ["@", "numba", ".", "njit", "\n", "def", "is_line_segment_intersection_jit", "(", "lines1", ",", "lines2", ")", ":", "\n", "    ", "\"\"\"check if line segments1 and line segments2 have cross point\n    \n    Args:\n        lines1 (float, [N, 2, 2]): [description]\n        lines2 (float, [M, 2, 2]): [description]\n    \n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "\n", "# Return true if line segments AB and CD intersect", "\n", "N", "=", "lines1", ".", "shape", "[", "0", "]", "\n", "M", "=", "lines2", ".", "shape", "[", "0", "]", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "N", ",", "M", ")", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "M", ")", ":", "\n", "            ", "A", "=", "lines1", "[", "i", ",", "0", "]", "\n", "B", "=", "lines1", "[", "i", ",", "1", "]", "\n", "C", "=", "lines2", "[", "j", ",", "0", "]", "\n", "D", "=", "lines2", "[", "j", ",", "1", "]", "\n", "acd", "=", "(", "D", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "C", "[", "0", "]", "-", "A", "[", "0", "]", ")", ">", "(", "C", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "D", "[", "0", "]", "-", "A", "[", "0", "]", ")", "\n", "bcd", "=", "(", "D", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "C", "[", "0", "]", "-", "B", "[", "0", "]", ")", ">", "(", "C", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "D", "[", "0", "]", "-", "B", "[", "0", "]", ")", "\n", "if", "acd", "!=", "bcd", ":", "\n", "                ", "abc", "=", "(", "C", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "B", "[", "0", "]", "-", "A", "[", "0", "]", ")", ">", "(", "B", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "C", "[", "0", "]", "-", "A", "[", "0", "]", ")", "\n", "abd", "=", "(", "D", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "B", "[", "0", "]", "-", "A", "[", "0", "]", ")", ">", "(", "B", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "D", "[", "0", "]", "-", "A", "[", "0", "]", ")", "\n", "if", "abc", "!=", "abd", ":", "\n", "                    ", "ret", "[", "i", ",", "j", "]", "=", "True", "\n", "", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry.line_segment_intersection": [[36, 63], ["None"], "function", ["None"], ["", "@", "numba", ".", "njit", "\n", "def", "line_segment_intersection", "(", "line1", ",", "line2", ",", "intersection", ")", ":", "\n", "    ", "A", "=", "line1", "[", "0", "]", "\n", "B", "=", "line1", "[", "1", "]", "\n", "C", "=", "line2", "[", "0", "]", "\n", "D", "=", "line2", "[", "1", "]", "\n", "BA0", "=", "B", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "BA1", "=", "B", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "DA0", "=", "D", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "CA0", "=", "C", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "DA1", "=", "D", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "CA1", "=", "C", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "acd", "=", "DA1", "*", "CA0", ">", "CA1", "*", "DA0", "\n", "bcd", "=", "(", "D", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "C", "[", "0", "]", "-", "B", "[", "0", "]", ")", ">", "(", "C", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "D", "[", "0", "]", "-", "B", "[", "0", "]", ")", "\n", "if", "acd", "!=", "bcd", ":", "\n", "        ", "abc", "=", "CA1", "*", "BA0", ">", "BA1", "*", "CA0", "\n", "abd", "=", "DA1", "*", "BA0", ">", "BA1", "*", "DA0", "\n", "if", "abc", "!=", "abd", ":", "\n", "            ", "DC0", "=", "D", "[", "0", "]", "-", "C", "[", "0", "]", "\n", "DC1", "=", "D", "[", "1", "]", "-", "C", "[", "1", "]", "\n", "ABBA", "=", "A", "[", "0", "]", "*", "B", "[", "1", "]", "-", "B", "[", "0", "]", "*", "A", "[", "1", "]", "\n", "CDDC", "=", "C", "[", "0", "]", "*", "D", "[", "1", "]", "-", "D", "[", "0", "]", "*", "C", "[", "1", "]", "\n", "DH", "=", "BA1", "*", "DC0", "-", "BA0", "*", "DC1", "\n", "intersection", "[", "0", "]", "=", "(", "ABBA", "*", "DC0", "-", "BA0", "*", "CDDC", ")", "/", "DH", "\n", "intersection", "[", "1", "]", "=", "(", "ABBA", "*", "DC1", "-", "BA1", "*", "CDDC", ")", "/", "DH", "\n", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry._ccw": [[66, 69], ["None"], "function", ["None"], ["", "def", "_ccw", "(", "A", ",", "B", ",", "C", ")", ":", "\n", "    ", "return", "(", "C", "[", "...", ",", "1", "]", "-", "A", "[", "...", ",", "1", "]", ")", "*", "(", "B", "[", "...", ",", "0", "]", "-", "A", "[", "...", ",", "0", "]", ")", ">", "(", "\n", "B", "[", "...", ",", "1", "]", "-", "A", "[", "...", ",", "1", "]", ")", "*", "(", "C", "[", "...", ",", "0", "]", "-", "A", "[", "...", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry.is_line_segment_cross": [[71, 82], ["numpy.logical_and", "geometry._ccw", "geometry._ccw", "geometry._ccw", "geometry._ccw"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry._ccw", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry._ccw", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry._ccw", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry._ccw"], ["", "def", "is_line_segment_cross", "(", "lines1", ",", "lines2", ")", ":", "\n", "# 10x slower than jit version with 1000-1000 random lines input.", "\n", "# lines1, [N, 2, 2]", "\n", "# lines2, [M, 2, 2]", "\n", "    ", "A", "=", "lines1", "[", ":", ",", "0", ",", ":", "]", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "\n", "B", "=", "lines1", "[", ":", ",", "1", ",", ":", "]", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "\n", "C", "=", "lines2", "[", ":", ",", "0", ",", ":", "]", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "D", "=", "lines2", "[", ":", ",", "1", ",", ":", "]", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "return", "np", ".", "logical_and", "(", "\n", "_ccw", "(", "A", ",", "C", ",", "D", ")", "!=", "_ccw", "(", "B", ",", "C", ",", "D", ")", ",", "\n", "_ccw", "(", "A", ",", "B", ",", "C", ")", "!=", "_ccw", "(", "A", ",", "B", ",", "D", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry.surface_equ_3d": [[84, 94], ["numpy.cross", "numpy.einsum"], "function", ["None"], ["", "def", "surface_equ_3d", "(", "polygon_surfaces", ")", ":", "\n", "# return [a, b, c], d in ax+by+cz+d=0", "\n", "# polygon_surfaces: [num_polygon, num_surfaces, num_points_of_polygon, 3]", "\n", "    ", "surface_vec", "=", "polygon_surfaces", "[", ":", ",", ":", ",", ":", "2", ",", ":", "]", "-", "polygon_surfaces", "[", ":", ",", ":", ",", "1", ":", "3", ",", ":", "]", "\n", "# normal_vec: [..., 3]", "\n", "normal_vec", "=", "np", ".", "cross", "(", "surface_vec", "[", ":", ",", ":", ",", "0", ",", ":", "]", ",", "surface_vec", "[", ":", ",", ":", ",", "1", ",", ":", "]", ")", "\n", "# print(normal_vec.shape, points[..., 0, :].shape)", "\n", "# d = -np.inner(normal_vec, points[..., 0, :])", "\n", "d", "=", "np", ".", "einsum", "(", "'aij, aij->ai'", ",", "normal_vec", ",", "polygon_surfaces", "[", ":", ",", ":", ",", "0", ",", ":", "]", ")", "\n", "return", "normal_vec", ",", "-", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry.points_in_convex_polygon_3d_jit": [[96, 120], ["geometry.surface_equ_3d", "geometry._points_in_convex_polygon_3d_jit", "numpy.full"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry.surface_equ_3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry._points_in_convex_polygon_3d_jit"], ["", "def", "points_in_convex_polygon_3d_jit", "(", "points", ",", "\n", "polygon_surfaces", ",", "\n", "num_surfaces", "=", "None", ")", ":", "\n", "    ", "\"\"\"check points is in 3d convex polygons.\n    Args:\n        points: [num_points, 3] array.\n        polygon_surfaces: [num_polygon, max_num_surfaces, \n            max_num_points_of_surface, 3] \n            array. all surfaces' normal vector must direct to internal.\n            max_num_points_of_surface must at least 3.\n        num_surfaces: [num_polygon] array. indicate how many surfaces \n            a polygon contain\n    Returns:\n        [num_points, num_polygon] bool array.\n    \"\"\"", "\n", "max_num_surfaces", ",", "max_num_points_of_surface", "=", "polygon_surfaces", ".", "shape", "[", "1", ":", "3", "]", "\n", "num_points", "=", "points", ".", "shape", "[", "0", "]", "\n", "num_polygons", "=", "polygon_surfaces", ".", "shape", "[", "0", "]", "\n", "if", "num_surfaces", "is", "None", ":", "\n", "        ", "num_surfaces", "=", "np", ".", "full", "(", "(", "num_polygons", ",", ")", ",", "9999999", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "", "normal_vec", ",", "d", "=", "surface_equ_3d", "(", "polygon_surfaces", "[", ":", ",", ":", ",", ":", "3", ",", ":", "]", ")", "\n", "# normal_vec: [num_polygon, max_num_surfaces, 3]", "\n", "# d: [num_polygon, max_num_surfaces]", "\n", "return", "_points_in_convex_polygon_3d_jit", "(", "points", ",", "polygon_surfaces", ",", "normal_vec", ",", "d", ",", "num_surfaces", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry._points_in_convex_polygon_3d_jit": [[122, 144], ["numpy.ones", "range", "range", "range"], "function", ["None"], ["", "@", "numba", ".", "njit", "\n", "def", "_points_in_convex_polygon_3d_jit", "(", "points", ",", "\n", "polygon_surfaces", ",", "\n", "normal_vec", ",", "d", ",", "\n", "num_surfaces", ")", ":", "\n", "    ", "max_num_surfaces", ",", "max_num_points_of_surface", "=", "polygon_surfaces", ".", "shape", "[", "1", ":", "3", "]", "\n", "num_points", "=", "points", ".", "shape", "[", "0", "]", "\n", "num_polygons", "=", "polygon_surfaces", ".", "shape", "[", "0", "]", "\n", "ret", "=", "np", ".", "ones", "(", "(", "num_points", ",", "num_polygons", ")", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "sign", "=", "0.0", "\n", "for", "i", "in", "range", "(", "num_points", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_polygons", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "max_num_surfaces", ")", ":", "\n", "                ", "if", "k", ">", "num_surfaces", "[", "j", "]", ":", "\n", "                    ", "break", "\n", "", "sign", "=", "points", "[", "i", ",", "0", "]", "*", "normal_vec", "[", "j", ",", "k", ",", "0", "]", "+", "points", "[", "i", ",", "1", "]", "*", "normal_vec", "[", "j", ",", "k", ",", "1", "]", "+", "points", "[", "i", ",", "2", "]", "*", "normal_vec", "[", "j", ",", "k", ",", "2", "]", "+", "d", "[", "j", ",", "k", "]", "\n", "if", "sign", ">=", "0", ":", "\n", "                    ", "ret", "[", "i", ",", "j", "]", "=", "False", "\n", "break", "\n", "", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry.points_in_convex_polygon_jit": [[146, 181], ["numpy.zeros", "range", "range", "range", "list", "list", "range", "range"], "function", ["None"], ["", "@", "numba", ".", "jit", "\n", "def", "points_in_convex_polygon_jit", "(", "points", ",", "polygon", ",", "clockwise", "=", "True", ")", ":", "\n", "    ", "\"\"\"check points is in 2d convex polygons. True when point in polygon\n    Args:\n        points: [num_points, 2] array.\n        polygon: [num_polygon, num_points_of_polygon, 2] array.\n        clockwise: bool. indicate polygon is clockwise.\n    Returns:\n        [num_points, num_polygon] bool array.\n    \"\"\"", "\n", "# first convert polygon to directed lines", "\n", "num_points_of_polygon", "=", "polygon", ".", "shape", "[", "1", "]", "\n", "num_points", "=", "points", ".", "shape", "[", "0", "]", "\n", "num_polygons", "=", "polygon", ".", "shape", "[", "0", "]", "\n", "if", "clockwise", ":", "\n", "        ", "vec1", "=", "polygon", "-", "polygon", "[", ":", ",", "[", "num_points_of_polygon", "-", "1", "]", "+", "\n", "list", "(", "range", "(", "num_points_of_polygon", "-", "1", ")", ")", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "vec1", "=", "polygon", "[", ":", ",", "[", "num_points_of_polygon", "-", "1", "]", "+", "\n", "list", "(", "range", "(", "num_points_of_polygon", "-", "1", ")", ")", ",", ":", "]", "-", "polygon", "\n", "# vec1: [num_polygon, num_points_of_polygon, 2]", "\n", "", "ret", "=", "np", ".", "zeros", "(", "(", "num_points", ",", "num_polygons", ")", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "success", "=", "True", "\n", "cross", "=", "0.0", "\n", "for", "i", "in", "range", "(", "num_points", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_polygons", ")", ":", "\n", "            ", "success", "=", "True", "\n", "for", "k", "in", "range", "(", "num_points_of_polygon", ")", ":", "\n", "                ", "cross", "=", "vec1", "[", "j", ",", "k", ",", "1", "]", "*", "(", "polygon", "[", "j", ",", "k", ",", "0", "]", "-", "points", "[", "i", ",", "0", "]", ")", "\n", "cross", "-=", "vec1", "[", "j", ",", "k", ",", "0", "]", "*", "(", "polygon", "[", "j", ",", "k", ",", "1", "]", "-", "points", "[", "i", ",", "1", "]", ")", "\n", "if", "cross", ">=", "0", ":", "\n", "                    ", "success", "=", "False", "\n", "break", "\n", "", "", "ret", "[", "i", ",", "j", "]", "=", "success", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry.points_in_convex_polygon": [[182, 203], ["numpy.cross", "numpy.all", "list", "range"], "function", ["None"], ["", "def", "points_in_convex_polygon", "(", "points", ",", "polygon", ",", "clockwise", "=", "True", ")", ":", "\n", "    ", "\"\"\"check points is in convex polygons. may run 2x faster when write in\n    cython(don't need to calculate all cross-product between edge and point)\n    Args:\n        points: [num_points, 2] array.\n        polygon: [num_polygon, num_points_of_polygon, 2] array.\n        clockwise: bool. indicate polygon is clockwise.\n    Returns:\n        [num_points, num_polygon] bool array.\n    \"\"\"", "\n", "# first convert polygon to directed lines", "\n", "num_lines", "=", "polygon", ".", "shape", "[", "1", "]", "\n", "polygon_next", "=", "polygon", "[", ":", ",", "[", "num_lines", "-", "1", "]", "+", "list", "(", "range", "(", "num_lines", "-", "1", ")", ")", ",", ":", "]", "\n", "if", "clockwise", ":", "\n", "        ", "vec1", "=", "(", "polygon", "-", "polygon_next", ")", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "", "else", ":", "\n", "        ", "vec1", "=", "(", "polygon_next", "-", "polygon", ")", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "", "vec2", "=", "polygon", "[", "np", ".", "newaxis", ",", "...", "]", "-", "points", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", "]", "\n", "# [num_points, num_polygon, num_points_of_polygon, 2]", "\n", "cross", "=", "np", ".", "cross", "(", "vec1", ",", "vec2", ")", "\n", "return", "np", ".", "all", "(", "cross", ">", "0", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BoxCoder.code_size": [[11, 14], ["None"], "methods", ["None"], ["\n", "", "def", "decode_torch", "(", "self", ",", "boxes", ",", "anchors", ")", ":", "\n", "        ", "return", "box_torch_ops", ".", "second_box_decode", "(", "boxes", ",", "anchors", ",", "self", ".", "vec_encode", ",", "self", ".", "linear_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BoxCoder.encode": [[15, 17], ["box_coders.BoxCoder._encode"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BevBoxCoder._encode"], ["\n", "\n", "", "", "class", "BevBoxCoderTorch", "(", "BevBoxCoder", ")", ":", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BoxCoder.decode": [[18, 20], ["box_coders.BoxCoder._decode"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BevBoxCoder._decode"], ["    ", "def", "encode_torch", "(", "self", ",", "boxes", ",", "anchors", ")", ":", "\n", "        ", "anchors", "=", "anchors", "[", "...", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n", "boxes", "=", "boxes", "[", "...", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BoxCoder._encode": [[21, 24], ["None"], "methods", ["None"], ["return", "box_torch_ops", ".", "bev_box_encode", "(", "boxes", ",", "anchors", ",", "self", ".", "vec_encode", ",", "self", ".", "linear_dim", ")", "\n", "\n", "", "def", "decode_torch", "(", "self", ",", "encodings", ",", "anchors", ")", ":", "\n", "        ", "anchors", "=", "anchors", "[", "...", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BoxCoder._decode": [[25, 28], ["None"], "methods", ["None"], ["ret", "=", "box_torch_ops", ".", "bev_box_decode", "(", "encodings", ",", "anchors", ",", "self", ".", "vec_encode", ",", "self", ".", "linear_dim", ")", "\n", "z_fixed", "=", "torch", ".", "full", "(", "[", "*", "ret", ".", "shape", "[", ":", "-", "1", "]", ",", "1", "]", ",", "self", ".", "z_fixed", ",", "dtype", "=", "ret", ".", "dtype", ",", "device", "=", "ret", ".", "device", ")", "\n", "h_fixed", "=", "torch", ".", "full", "(", "[", "*", "ret", ".", "shape", "[", ":", "-", "1", "]", ",", "1", "]", ",", "self", ".", "h_fixed", ",", "dtype", "=", "ret", ".", "dtype", ",", "device", "=", "ret", ".", "device", ")", "\n", "return", "torch", ".", "cat", "(", "[", "ret", "[", "...", ",", ":", "2", "]", ",", "z_fixed", ",", "ret", "[", "...", ",", "2", ":", "4", "]", ",", "h_fixed", ",", "ret", "[", "...", ",", "4", ":", "]", "]", ",", "dim", "=", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.GroundBox3dCoder.__init__": [[31, 35], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.GroundBox3dCoder.code_size": [[36, 39], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.GroundBox3dCoder._encode": [[40, 42], ["second.core.box_np_ops.second_box_encode"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.second_box_encode"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.GroundBox3dCoder._decode": [[43, 45], ["second.core.box_np_ops.second_box_decode"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.second_box_decode"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BevBoxCoder.__init__": [[51, 57], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BevBoxCoder.code_size": [[58, 61], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BevBoxCoder._encode": [[62, 66], ["second.core.box_np_ops.bev_box_encode"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.bev_box_encode"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BevBoxCoder._decode": [[67, 73], ["second.core.box_np_ops.bev_box_decode", "numpy.full", "numpy.full", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.bev_box_decode"], []], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.region_similarity.RegionSimilarityCalculator.compare": [[30, 47], ["region_similarity.RegionSimilarityCalculator._compare"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.region_similarity.DistanceSimilarity._compare"], ["def", "compare", "(", "self", ",", "boxes1", ",", "boxes2", ")", ":", "\n", "    ", "\"\"\"Computes matrix of pairwise similarity between BoxLists.\n\n    This op (to be overriden) computes a measure of pairwise similarity between\n    the boxes in the given BoxLists. Higher values indicate more similarity.\n\n    Note that this method simply measures similarity and does not explicitly\n    perform a matching.\n\n    Args:\n      boxes1: [N, 5] [x,y,w,l,r] tensor.\n      boxes2: [M, 5] [x,y,w,l,r] tensor.\n\n    Returns:\n      a (float32) tensor of shape [N, M] with pairwise similarity score.\n    \"\"\"", "\n", "return", "self", ".", "_compare", "(", "boxes1", ",", "boxes2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.region_similarity.RegionSimilarityCalculator._compare": [[48, 51], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_compare", "(", "self", ",", "boxes1", ",", "boxes2", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.region_similarity.RotateIouSimilarity._compare": [[59, 71], ["second.core.box_np_ops.riou_cc"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.riou_cc"], ["def", "_compare", "(", "self", ",", "boxes1", ",", "boxes2", ")", ":", "\n", "    ", "\"\"\"Compute pairwise IOU similarity between the two BoxLists.\n\n    Args:\n      boxlist1: BoxList holding N boxes.\n      boxlist2: BoxList holding M boxes.\n\n    Returns:\n      A tensor with shape [N, M] representing pairwise iou scores.\n    \"\"\"", "\n", "\n", "return", "box_np_ops", ".", "riou_cc", "(", "boxes1", ",", "boxes2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.region_similarity.NearestIouSimilarity._compare": [[80, 94], ["second.core.box_np_ops.rbbox2d_to_near_bbox", "second.core.box_np_ops.rbbox2d_to_near_bbox", "second.core.box_np_ops.iou_jit"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rbbox2d_to_near_bbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rbbox2d_to_near_bbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.iou_jit"], ["def", "_compare", "(", "self", ",", "boxes1", ",", "boxes2", ")", ":", "\n", "    ", "\"\"\"Compute matrix of (negated) sq distances.\n\n    Args:\n      boxlist1: BoxList holding N boxes.\n      boxlist2: BoxList holding M boxes.\n\n    Returns:\n      A tensor with shape [N, M] representing negated pairwise squared distance.\n    \"\"\"", "\n", "boxes1_bv", "=", "box_np_ops", ".", "rbbox2d_to_near_bbox", "(", "boxes1", ")", "\n", "boxes2_bv", "=", "box_np_ops", ".", "rbbox2d_to_near_bbox", "(", "boxes2", ")", "\n", "ret", "=", "box_np_ops", ".", "iou_jit", "(", "boxes1_bv", ",", "boxes2_bv", ",", "eps", "=", "0.0", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.region_similarity.DistanceSimilarity.__init__": [[102, 106], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "distance_norm", ",", "with_rotation", "=", "False", ",", "rotation_alpha", "=", "0.5", ")", ":", "\n", "      ", "self", ".", "_distance_norm", "=", "distance_norm", "\n", "self", ".", "_with_rotation", "=", "with_rotation", "\n", "self", ".", "_rotation_alpha", "=", "rotation_alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.region_similarity.DistanceSimilarity._compare": [[107, 123], ["second.core.box_np_ops.distance_similarity"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.distance_similarity"], ["", "def", "_compare", "(", "self", ",", "boxes1", ",", "boxes2", ")", ":", "\n", "    ", "\"\"\"Compute matrix of (negated) sq distances.\n\n    Args:\n      boxlist1: BoxList holding N boxes.\n      boxlist2: BoxList holding M boxes.\n\n    Returns:\n      A tensor with shape [N, M] representing negated pairwise squared distance.\n    \"\"\"", "\n", "return", "box_np_ops", ".", "distance_similarity", "(", "\n", "boxes1", "[", "...", ",", "[", "0", ",", "1", ",", "-", "1", "]", "]", ",", "\n", "boxes2", "[", "...", ",", "[", "0", ",", "1", ",", "-", "1", "]", "]", ",", "\n", "dist_norm", "=", "self", ".", "_distance_norm", ",", "\n", "with_rotation", "=", "self", ".", "_with_rotation", ",", "\n", "rot_alpha", "=", "self", ".", "_rotation_alpha", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiDrawControl.__init__": [[57, 124], ["second.ControlPanel.__init__", "viewer.KittiDrawControl.setWindowTitle", "viewer.KittiDrawControl.tab", "viewer.KittiDrawControl.tab", "viewer.KittiDrawControl.tab", "viewer.KittiDrawControl.tab", "viewer.KittiDrawControl.column", "viewer.KittiDrawControl.add_listedit", "viewer.KittiDrawControl.add_fspinbox", "viewer.KittiDrawControl.add_fspinbox", "viewer.KittiDrawControl.add_colorbutton", "viewer.KittiDrawControl.add_fspinbox", "viewer.KittiDrawControl.add_fspinbox", "viewer.KittiDrawControl.add_colorbutton", "viewer.KittiDrawControl.add_checkbox", "viewer.KittiDrawControl.add_checkbox", "viewer.KittiDrawControl.add_checkbox", "viewer.KittiDrawControl.add_colorbutton", "viewer.KittiDrawControl.add_fspinbox", "viewer.KittiDrawControl.add_checkbox", "viewer.KittiDrawControl.add_checkbox", "viewer.KittiDrawControl.add_checkbox", "viewer.KittiDrawControl.add_fspinbox", "viewer.KittiDrawControl.add_colorbutton", "viewer.KittiDrawControl.add_fspinbox", "viewer.KittiDrawControl.add_fspinbox", "viewer.KittiDrawControl.column", "viewer.KittiDrawControl.add_arrayedit", "viewer.KittiDrawControl.add_arrayedit", "viewer.KittiDrawControl.add_checkbox", "viewer.KittiDrawControl.add_colorbutton", "viewer.KittiDrawControl.add_fspinbox", "viewer.KittiDrawControl.add_colorbutton", "viewer.KittiDrawControl.add_fspinbox", "viewer.KittiDrawControl.add_checkbox", "viewer.KittiDrawControl.add_checkbox", "viewer.KittiDrawControl.column", "viewer.KittiDrawControl.add_checkbox", "viewer.KittiDrawControl.column", "viewer.KittiDrawControl.add_checkbox", "viewer.KittiDrawControl.add_arrayedit", "viewer.KittiDrawControl.add_arrayedit", "viewer.KittiDrawControl.add_arrayedit", "viewer.KittiDrawControl.add_fspinbox", "viewer.KittiDrawControl.add_fspinbox", "viewer.KittiDrawControl.add_combobox", "viewer.KittiDrawControl.column", "viewer.KittiDrawControl.add_checkbox", "viewer.KittiDrawControl.add_jsonedit", "viewer.KittiDrawControl.add_arrayedit", "viewer.KittiDrawControl.column", "viewer.KittiDrawControl.add_checkbox", "viewer.KittiDrawControl.add_checkbox", "second.utils.bbox_plot.gl_color", "second.utils.bbox_plot.gl_color", "second.utils.bbox_plot.gl_color", "second.utils.bbox_plot.gl_color", "second.utils.bbox_plot.gl_color", "second.utils.bbox_plot.gl_color", "second.utils.bbox_plot.gl_color", "second.utils.bbox_plot.gl_color", "second.utils.bbox_plot.gl_color", "second.utils.bbox_plot.gl_color", "second.utils.bbox_plot.gl_color", "second.utils.bbox_plot.gl_color", "second.utils.bbox_plot.gl_color", "second.utils.bbox_plot.gl_color", "second.utils.bbox_plot.gl_color", "second.utils.bbox_plot.gl_color", "second.utils.bbox_plot.gl_color", "second.utils.bbox_plot.gl_color"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.tab", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.tab", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.tab", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.tab", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.column", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_listedit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_fspinbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_fspinbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_colorbutton", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_fspinbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_fspinbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_colorbutton", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_checkbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_checkbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_checkbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_colorbutton", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_fspinbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_checkbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_checkbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_checkbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_fspinbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_colorbutton", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_fspinbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_fspinbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.column", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_arrayedit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_arrayedit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_checkbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_colorbutton", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_fspinbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_colorbutton", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_fspinbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_checkbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_checkbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.column", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_checkbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.column", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_checkbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_arrayedit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_arrayedit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_arrayedit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_fspinbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_fspinbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_combobox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.column", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_checkbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_jsonedit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_arrayedit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.column", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_checkbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_checkbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color"], ["    ", "def", "__init__", "(", "self", ",", "title", ",", "parent", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "column_nums", "=", "[", "2", ",", "1", ",", "1", ",", "2", "]", ",", "tab_num", "=", "4", ",", "parent", "=", "parent", ")", "\n", "self", ".", "setWindowTitle", "(", "title", ")", "\n", "with", "self", ".", "tab", "(", "0", ",", "\"common\"", ")", ":", "\n", "            ", "with", "self", ".", "column", "(", "0", ")", ":", "\n", "                ", "self", ".", "add_listedit", "(", "\"UsedClass\"", ",", "str", ")", "\n", "self", ".", "add_fspinbox", "(", "\"PointSize\"", ",", "0.01", ",", "0.5", ",", "0.01", ",", "0.05", ")", "\n", "self", ".", "add_fspinbox", "(", "\"PointAlpha\"", ",", "0.0", ",", "1.0", ",", "0.05", ",", "0.5", ")", "\n", "self", ".", "add_colorbutton", "(", "\"PointColor\"", ",", "\n", "bbox_plot", ".", "gl_color", "(", "GLColor", ".", "Gray", ")", ")", "\n", "self", ".", "add_fspinbox", "(", "\"GTPointSize\"", ",", "0.01", ",", "0.5", ",", "0.01", ",", "0.2", ")", "\n", "self", ".", "add_fspinbox", "(", "\"GTPointAlpha\"", ",", "0.0", ",", "1.0", ",", "0.05", ",", "0.5", ")", "\n", "self", ".", "add_colorbutton", "(", "\"GTPointColor\"", ",", "\n", "bbox_plot", ".", "gl_color", "(", "GLColor", ".", "Purple", ")", ")", "\n", "self", ".", "add_checkbox", "(", "\"WithReflectivity\"", ")", "\n", "self", ".", "add_checkbox", "(", "\"DrawGTBoxes\"", ")", "\n", "self", ".", "add_checkbox", "(", "\"DrawGTLabels\"", ")", "\n", "self", ".", "add_colorbutton", "(", "\"GTBoxColor\"", ",", "\n", "bbox_plot", ".", "gl_color", "(", "GLColor", ".", "Green", ")", ")", "\n", "self", ".", "add_fspinbox", "(", "\"GTBoxAlpha\"", ",", "0.0", ",", "1.0", ",", "0.05", ",", "0.5", ")", "\n", "self", ".", "add_checkbox", "(", "\"DrawDTBoxes\"", ")", "\n", "\n", "self", ".", "add_checkbox", "(", "\"DrawDTLabels\"", ")", "\n", "self", ".", "add_checkbox", "(", "\"DTScoreAsAlpha\"", ")", "\n", "self", ".", "add_fspinbox", "(", "\"DTScoreThreshold\"", ",", "0.0", ",", "1.0", ",", "0.01", ",", "0.3", ")", "\n", "self", ".", "add_colorbutton", "(", "\"DTBoxColor\"", ",", "\n", "bbox_plot", ".", "gl_color", "(", "GLColor", ".", "Blue", ")", ")", "\n", "self", ".", "add_fspinbox", "(", "\"DTBoxAlpha\"", ",", "0.0", ",", "1.0", ",", "0.05", ",", "0.5", ")", "\n", "self", ".", "add_fspinbox", "(", "\"DTBoxLineWidth\"", ",", "0.25", ",", "10.0", ",", "0.25", ",", "1.0", ")", "\n", "", "with", "self", ".", "column", "(", "1", ")", ":", "\n", "                ", "self", ".", "add_arrayedit", "(", "\"CoorsRange\"", ",", "np", ".", "float64", ",", "\n", "[", "-", "40", ",", "-", "40", ",", "-", "2", ",", "40", ",", "40", ",", "4", "]", ",", "[", "6", "]", ")", "\n", "self", ".", "add_arrayedit", "(", "\"VoxelSize\"", ",", "np", ".", "float64", ",", "[", "0.2", ",", "0.2", ",", "0.4", "]", ",", "\n", "[", "3", "]", ")", "\n", "self", ".", "add_checkbox", "(", "\"DrawVoxels\"", ")", "\n", "self", ".", "add_colorbutton", "(", "\"PosVoxelColor\"", ",", "\n", "bbox_plot", ".", "gl_color", "(", "GLColor", ".", "Yellow", ")", ")", "\n", "self", ".", "add_fspinbox", "(", "\"PosVoxelAlpha\"", ",", "0.0", ",", "1.0", ",", "0.05", ",", "0.5", ")", "\n", "self", ".", "add_colorbutton", "(", "\"NegVoxelColor\"", ",", "\n", "bbox_plot", ".", "gl_color", "(", "GLColor", ".", "Purple", ")", ")", "\n", "self", ".", "add_fspinbox", "(", "\"NegVoxelAlpha\"", ",", "0.0", ",", "1.0", ",", "0.05", ",", "0.5", ")", "\n", "self", ".", "add_checkbox", "(", "\"DrawPositiveVoxelsOnly\"", ")", "\n", "self", ".", "add_checkbox", "(", "\"RemoveOutsidePoint\"", ")", "\n", "", "", "with", "self", ".", "tab", "(", "1", ",", "\"inference\"", ")", ":", "\n", "            ", "with", "self", ".", "column", "(", "0", ")", ":", "\n", "                ", "self", ".", "add_checkbox", "(", "\"TensorflowInference\"", ")", "\n", "", "", "with", "self", ".", "tab", "(", "2", ",", "\"anchors\"", ")", ":", "\n", "            ", "with", "self", ".", "column", "(", "0", ")", ":", "\n", "                ", "self", ".", "add_checkbox", "(", "\"DrawAnchors\"", ")", "\n", "self", ".", "add_arrayedit", "(", "\"AnchorSize\"", ",", "np", ".", "float64", ",", "[", "1.6", ",", "3.9", ",", "1.56", "]", ",", "\n", "[", "3", "]", ")", "\n", "self", ".", "add_arrayedit", "(", "\"AnchorOffset\"", ",", "np", ".", "float64", ",", "\n", "[", "0", ",", "-", "39.8", ",", "-", "1.0", "]", ",", "[", "3", "]", ")", "\n", "self", ".", "add_arrayedit", "(", "\"AnchorStride\"", ",", "np", ".", "float64", ",", "[", "0.4", ",", "0.4", ",", "0.0", "]", ",", "\n", "[", "3", "]", ")", "\n", "self", ".", "add_fspinbox", "(", "\"MatchThreshold\"", ",", "0.0", ",", "1.0", ",", "0.1", ")", "\n", "self", ".", "add_fspinbox", "(", "\"UnMatchThreshold\"", ",", "0.0", ",", "1.0", ",", "0.1", ")", "\n", "self", ".", "add_combobox", "(", "\"IoUMethod\"", ",", "[", "\"RotateIoU\"", ",", "\"NearestIoU\"", "]", ")", "\n", "", "", "with", "self", ".", "tab", "(", "3", ",", "\"sample and augmentation\"", ")", ":", "\n", "            ", "with", "self", ".", "column", "(", "0", ")", ":", "\n", "                ", "self", ".", "add_checkbox", "(", "\"EnableSample\"", ")", "\n", "self", ".", "add_jsonedit", "(", "\"SampleGroups\"", ")", "\n", "self", ".", "add_arrayedit", "(", "\"SampleGlobleRotRange\"", ",", "np", ".", "float64", ",", "[", "0.78", ",", "2.35", "]", ",", "\n", "[", "2", "]", ")", "\n", "", "with", "self", ".", "column", "(", "1", ")", ":", "\n", "                ", "self", ".", "add_checkbox", "(", "\"EnableAugmentation\"", ")", "\n", "self", ".", "add_checkbox", "(", "\"GroupNoisePerObject\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.Settings.__init__": [[127, 137], ["pathlib.Path().exists", "open", "f.write", "open", "json.loads", "pathlib.Path", "json.dumps", "f.read"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.loads", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.dumps"], ["    ", "def", "__init__", "(", "self", ",", "cfg_path", ")", ":", "\n", "        ", "self", ".", "_cfg_path", "=", "cfg_path", "\n", "self", ".", "_settings", "=", "{", "}", "\n", "self", ".", "_setting_defaultvalue", "=", "{", "}", "\n", "if", "not", "Path", "(", "self", ".", "_cfg_path", ")", ".", "exists", "(", ")", ":", "\n", "            ", "with", "open", "(", "self", ".", "_cfg_path", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "json", ".", "dumps", "(", "self", ".", "_settings", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "self", ".", "_cfg_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "_settings", "=", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.Settings.set": [[138, 142], ["open", "f.write", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.dumps"], ["", "", "", "def", "set", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "self", ".", "_settings", "[", "name", "]", "=", "value", "\n", "with", "open", "(", "self", ".", "_cfg_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "self", ".", "_settings", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.Settings.get": [[143, 149], ["ValueError"], "methods", ["None"], ["", "", "def", "get", "(", "self", ",", "name", ",", "default_value", "=", "None", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "_settings", ":", "\n", "            ", "return", "self", ".", "_settings", "[", "name", "]", "\n", "", "if", "default_value", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"name not exist\"", ")", "\n", "", "return", "default_value", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.Settings.save": [[150, 153], ["open", "f.write", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.dumps"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "self", ".", "_settings", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.Settings.load": [[154, 157], ["open", "json.loads", "f.read"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.loads"], ["", "", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "_cfg_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "_settings", "=", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.MatPlotLibView.__init__": [[209, 222], ["matplotlib.figure.Figure", "viewer.MatPlotLibView.fig.add_subplot", "matplotlib.backends.backend_qt5agg.FigureCanvasQTAgg.__init__", "viewer.MatPlotLibView.setParent", "matplotlib.backends.backend_qt5agg.FigureCanvasQTAgg.setSizePolicy", "matplotlib.backends.backend_qt5agg.FigureCanvasQTAgg.updateGeometry", "viewer.MatPlotLibView.draw"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "parent", "=", "None", ",", "rect", "=", "[", "5", ",", "4", "]", ",", "dpi", "=", "100", ")", ":", "\n", "# super().__init__()", "\n", "        ", "self", ".", "fig", "=", "Figure", "(", "figsize", "=", "(", "rect", "[", "0", "]", ",", "rect", "[", "1", "]", ")", ",", "dpi", "=", "dpi", ")", "\n", "self", ".", "ax", "=", "self", ".", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "# self.ax.axis('off')", "\n", "FigureCanvas", ".", "__init__", "(", "self", ",", "self", ".", "fig", ")", "\n", "self", ".", "setParent", "(", "parent", ")", "\n", "#self.axes.set_ylim([-1,1])", "\n", "#self.axes.set_xlim([0,31.4159*2])", "\n", "FigureCanvas", ".", "setSizePolicy", "(", "self", ",", "QSizePolicy", ".", "Expanding", ",", "\n", "QSizePolicy", ".", "Expanding", ")", "\n", "FigureCanvas", ".", "updateGeometry", "(", "self", ")", "\n", "self", ".", "draw", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.MatPlotLibView.reset_plot": [[223, 226], ["viewer.MatPlotLibView.fig.clf", "viewer.MatPlotLibView.fig.add_subplot"], "methods", ["None"], ["", "def", "reset_plot", "(", "self", ")", ":", "\n", "        ", "self", ".", "fig", ".", "clf", "(", ")", "\n", "self", ".", "ax", "=", "self", ".", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.MatPlotLibViewTab.__init__": [[229, 242], ["matplotlib.figure.Figure", "viewer.MatPlotLibViewTab.fig.add_subplot", "matplotlib.backends.backend_qt5agg.FigureCanvasQTAgg.__init__", "viewer.MatPlotLibViewTab.setParent", "matplotlib.backends.backend_qt5agg.FigureCanvasQTAgg.setSizePolicy", "matplotlib.backends.backend_qt5agg.FigureCanvasQTAgg.updateGeometry", "viewer.MatPlotLibViewTab.draw"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_rect", "=", "[", "5", ",", "4", "]", ",", "dpi", "=", "100", ",", "parent", "=", "None", ")", ":", "\n", "# super().__init__()", "\n", "        ", "self", ".", "fig", "=", "Figure", "(", "figsize", "=", "(", "rect", "[", "0", "]", ",", "rect", "[", "1", "]", ")", ",", "dpi", "=", "dpi", ")", "\n", "self", ".", "ax", "=", "self", ".", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "# self.ax.axis('off')", "\n", "FigureCanvas", ".", "__init__", "(", "self", ",", "self", ".", "fig", ")", "\n", "self", ".", "setParent", "(", "parent", ")", "\n", "#self.axes.set_ylim([-1,1])", "\n", "#self.axes.set_xlim([0,31.4159*2])", "\n", "FigureCanvas", ".", "setSizePolicy", "(", "self", ",", "QSizePolicy", ".", "Expanding", ",", "\n", "QSizePolicy", ".", "Expanding", ")", "\n", "FigureCanvas", ".", "updateGeometry", "(", "self", ")", "\n", "self", ".", "draw", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.MatPlotLibViewTab.reset_plot": [[243, 246], ["viewer.MatPlotLibViewTab.fig.clf", "viewer.MatPlotLibViewTab.fig.add_subplot"], "methods", ["None"], ["", "def", "reset_plot", "(", "self", ")", ":", "\n", "        ", "self", ".", "fig", ".", "clf", "(", ")", "\n", "self", ".", "ax", "=", "self", ".", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.MatPlotLibWidget.__init__": [[249, 255], ["viewer.MatPlotLibView", "matplotlib.backends.backend_qt5agg.NavigationToolbar2QT", "PyQt5.QtWidgets.QVBoxLayout", "PyQt5.QtWidgets.QVBoxLayout.addWidget", "PyQt5.QtWidgets.QVBoxLayout.addWidget"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "parent", "=", "None", ",", "rect", "=", "[", "5", ",", "4", "]", ",", "dpi", "=", "100", ")", ":", "\n", "        ", "self", ".", "w_plot", "=", "MatPlotLibView", "(", "self", ",", "rect", ",", "dpi", ")", "\n", "self", ".", "w_plt_toolbar", "=", "NavigationToolbar", "(", "self", ".", "w_plot", ",", "self", ")", "\n", "plt_layout", "=", "QVBoxLayout", "(", ")", "\n", "plt_layout", ".", "addWidget", "(", "self", ".", "w_plot", ")", "\n", "plt_layout", ".", "addWidget", "(", "self", ".", "w_plt_toolbar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.MatPlotLibWidget.reset_plot": [[256, 258], ["viewer.MatPlotLibWidget.w_plot.reset_plot"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.MatPlotLibWidget.reset_plot"], ["", "def", "reset_plot", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "w_plot", ".", "reset_plot", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.MatPlotLibWidget.axis": [[259, 262], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "axis", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "w_plot", ".", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiPointCloudView.__init__": [[265, 288], ["second.kittiviewer.glwidget.KittiGLViewWidget.__init__", "list", "viewer.KittiPointCloudView.mousePressed.connect", "viewer.KittiPointCloudView.setCameraPosition", "int"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "config", ",", "\n", "parent", "=", "None", ",", "\n", "voxel_size", "=", "None", ",", "\n", "coors_range", "=", "None", ",", "\n", "max_voxels", "=", "50000", ",", "\n", "max_num_points", "=", "35", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "parent", "=", "parent", ")", "\n", "if", "voxel_size", "is", "None", ":", "\n", "            ", "voxel_size", "=", "[", "0.2", ",", "0.2", ",", "0.4", "]", "\n", "", "if", "coors_range", "is", "None", ":", "\n", "            ", "coors_range", "=", "[", "0", ",", "-", "40", ",", "-", "3", ",", "70.4", ",", "40", ",", "1", "]", "\n", "", "self", ".", "w_config", "=", "config", "\n", "self", ".", "_voxel_size", "=", "voxel_size", "\n", "self", ".", "_coors_range", "=", "coors_range", "\n", "self", ".", "_max_voxels", "=", "max_voxels", "\n", "self", ".", "_max_num_points", "=", "max_num_points", "\n", "bk_color", "=", "(", "0.8", ",", "0.8", ",", "0.8", ",", "1.0", ")", "\n", "bk_color", "=", "list", "(", "[", "int", "(", "v", "*", "255", ")", "for", "v", "in", "bk_color", "]", ")", "\n", "# self.setBackgroundColor(*bk_color)", "\n", "# self.w_gl_widget.setBackgroundColor('w')", "\n", "self", ".", "mousePressed", ".", "connect", "(", "self", ".", "on_mousePressed", ")", "\n", "self", ".", "setCameraPosition", "(", "distance", "=", "20", ",", "azimuth", "=", "-", "180", ",", "elevation", "=", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiPointCloudView.on_mousePressed": [[289, 291], ["None"], "methods", ["None"], ["", "def", "on_mousePressed", "(", "self", ",", "pos", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiPointCloudView.reset_camera": [[292, 296], ["viewer.KittiPointCloudView.set_camera_position", "viewer.KittiPointCloudView.update"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.set_camera_position"], ["", "def", "reset_camera", "(", "self", ")", ":", "\n", "        ", "self", ".", "set_camera_position", "(", "\n", "center", "=", "(", "5", ",", "0", ",", "0", ")", ",", "distance", "=", "20", ",", "azimuth", "=", "-", "180", ",", "elevation", "=", "30", ")", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiPointCloudView.draw_frustum": [[297, 308], ["second.projection_matrix_to_CRT_kitti", "second.projection_matrix_to_CRT_kitti", "second.projection_matrix_to_CRT_kitti", "second.get_frustum_v2", "second.get_frustum_v2", "second.get_frustum_v2", "numpy.einsum", "second.camera_to_lidar", "second.camera_to_lidar", "second.camera_to_lidar", "viewer.KittiPointCloudView.boxes3d", "numpy.linalg.inv"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.projection_matrix_to_CRT_kitti", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.projection_matrix_to_CRT_kitti", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.projection_matrix_to_CRT_kitti", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.get_frustum_v2", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.get_frustum_v2", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.get_frustum_v2", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.camera_to_lidar", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.camera_to_lidar", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.camera_to_lidar", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.boxes3d"], ["", "def", "draw_frustum", "(", "self", ",", "bboxes", ",", "rect", ",", "Trv2c", ",", "P2", ")", ":", "\n", "# Y = C(R @ (rect @ Trv2c @ X) + T)", "\n", "# uv = [Y0/Y2, Y1/Y2]", "\n", "        ", "frustums", "=", "[", "]", "\n", "C", ",", "R", ",", "T", "=", "box_np_ops", ".", "projection_matrix_to_CRT_kitti", "(", "P2", ")", "\n", "frustums", "=", "box_np_ops", ".", "get_frustum_v2", "(", "bboxes", ",", "C", ")", "\n", "frustums", "-=", "T", "\n", "# frustums = np.linalg.inv(R) @ frustums.T", "\n", "frustums", "=", "np", ".", "einsum", "(", "'ij, akj->aki'", ",", "np", ".", "linalg", ".", "inv", "(", "R", ")", ",", "frustums", ")", "\n", "frustums", "=", "box_np_ops", ".", "camera_to_lidar", "(", "frustums", ",", "rect", ",", "Trv2c", ")", "\n", "self", ".", "boxes3d", "(", "'frustums'", ",", "frustums", ",", "colors", "=", "GLColor", ".", "Write", ",", "alpha", "=", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiPointCloudView.draw_cropped_frustum": [[309, 317], ["viewer.KittiPointCloudView.boxes3d", "second.random_crop_frustum", "second.random_crop_frustum", "second.random_crop_frustum"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.boxes3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.random_crop_frustum", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.random_crop_frustum", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.random_crop_frustum"], ["", "def", "draw_cropped_frustum", "(", "self", ",", "bboxes", ",", "rect", ",", "Trv2c", ",", "P2", ")", ":", "\n", "# Y = C(R @ (rect @ Trv2c @ X) + T)", "\n", "# uv = [Y0/Y2, Y1/Y2]", "\n", "        ", "self", ".", "boxes3d", "(", "\n", "'cropped_frustums'", ",", "\n", "prep", ".", "random_crop_frustum", "(", "bboxes", ",", "rect", ",", "Trv2c", ",", "P2", ")", ",", "\n", "colors", "=", "GLColor", ".", "Write", ",", "\n", "alpha", "=", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiPointCloudView.draw_anchors": [[318, 436], ["numpy.array", "numpy.array", "numpy.round().astype", "second.core.anchor_generator.AnchorGeneratorStride", "second.core.anchor_generator.AnchorGeneratorStride", "second.core.anchor_generator.AnchorGeneratorStride", "second.core.anchor_generator.AnchorGeneratorStride", "second.core.anchor_generator.AnchorGeneratorStride", "second.core.anchor_generator.AnchorGeneratorStride", "second.core.anchor_generator.AnchorGeneratorStride", "second.core.anchor_generator.AnchorGeneratorStride", "second.core.anchor_generator.AnchorGeneratorStride", "second.core.box_coders.GroundBox3dCoder", "second.core.box_coders.GroundBox3dCoder", "second.core.box_coders.GroundBox3dCoder", "second.core.region_similarity.NearestIouSimilarity", "second.core.region_similarity.NearestIouSimilarity", "second.core.region_similarity.NearestIouSimilarity", "second.core.target_assigner.TargetAssigner", "second.core.target_assigner.TargetAssigner", "second.core.target_assigner.TargetAssigner", "time.time", "print", "second.core.target_assigner.TargetAssigner.generate_anchors", "second.core.target_assigner.TargetAssigner.generate_anchors", "second.core.target_assigner.TargetAssigner.generate_anchors", "anchors.reshape.reshape.reshape", "second.rbbox2d_to_near_bbox", "second.rbbox2d_to_near_bbox", "second.rbbox2d_to_near_bbox", "print", "print", "numpy.array", "time.time", "second.core.target_assigner.TargetAssigner.assign", "second.core.target_assigner.TargetAssigner.assign", "second.core.target_assigner.TargetAssigner.assign", "print", "print", "numpy.zeros", "second.utils.bbox_plot.gl_color", "second.utils.bbox_plot.gl_color", "second.utils.bbox_plot.gl_color", "second.utils.bbox_plot.gl_color", "second.utils.bbox_plot.gl_color", "second.utils.bbox_plot.gl_color", "numpy.logical_and", "viewer.KittiPointCloudView.boxes3d", "second.core.point_cloud.point_cloud_ops.points_to_voxel", "second.core.point_cloud.point_cloud_ops.points_to_voxel", "second.core.point_cloud.point_cloud_ops.points_to_voxel", "second.sparse_sum_for_anchors_mask", "second.sparse_sum_for_anchors_mask", "second.sparse_sum_for_anchors_mask", "dense_voxel_map.cumsum.cumsum.cumsum", "dense_voxel_map.cumsum.cumsum.cumsum", "numpy.sum", "second.rbbox3d_to_corners", "second.rbbox3d_to_corners", "second.rbbox3d_to_corners", "numpy.round", "tuple", "second.fused_get_anchors_area", "second.fused_get_anchors_area", "second.fused_get_anchors_area", "time.time", "len", "class_names.index", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.generate_anchors", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.generate_anchors", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.generate_anchors", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rbbox2d_to_near_bbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rbbox2d_to_near_bbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rbbox2d_to_near_bbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.assign", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.assign", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.assign", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.boxes3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.sparse_sum_for_anchors_mask", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.sparse_sum_for_anchors_mask", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.sparse_sum_for_anchors_mask", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rbbox3d_to_corners", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rbbox3d_to_corners", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rbbox3d_to_corners", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.fused_get_anchors_area", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.fused_get_anchors_area", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.fused_get_anchors_area"], ["", "def", "draw_anchors", "(", "self", ",", "\n", "gt_boxes_lidar", ",", "\n", "points", "=", "None", ",", "\n", "image_idx", "=", "0", ",", "\n", "gt_names", "=", "None", ")", ":", "\n", "# print(gt_names)", "\n", "        ", "voxel_size", "=", "np", ".", "array", "(", "self", ".", "_voxel_size", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# voxel_size = np.array([0.2, 0.2, 0.4], dtype=np.float32)", "\n", "coors_range", "=", "np", ".", "array", "(", "self", ".", "_coors_range", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# coors_range = np.array([0, -40, -3, 70.4, 40, 1], dtype=np.float32)", "\n", "grid_size", "=", "(", "coors_range", "[", "3", ":", "]", "-", "coors_range", "[", ":", "3", "]", ")", "/", "voxel_size", "\n", "grid_size", "=", "np", ".", "round", "(", "grid_size", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "# print(grid_size)", "\n", "bv_range", "=", "coors_range", "[", "[", "0", ",", "1", ",", "3", ",", "4", "]", "]", "\n", "anchor_generator", "=", "AnchorGeneratorStride", "(", "\n", "# sizes=[0.6, 0.8, 1.73, 0.6, 1.76, 1.73],", "\n", "sizes", "=", "[", "0.6", ",", "1.76", ",", "1.73", "]", ",", "\n", "anchor_strides", "=", "[", "0.4", ",", "0.4", ",", "0.0", "]", ",", "\n", "anchor_offsets", "=", "[", "0.2", ",", "-", "39.8", ",", "-", "1.465", "]", ",", "\n", "rotations", "=", "[", "0", ",", "1.5707963267948966", "]", ",", "\n", "match_threshold", "=", "0.5", ",", "\n", "unmatch_threshold", "=", "0.35", ",", "\n", ")", "\n", "anchor_generator1", "=", "AnchorGeneratorStride", "(", "\n", "# sizes=[0.6, 0.8, 1.73, 0.6, 1.76, 1.73],", "\n", "sizes", "=", "[", "0.6", ",", "0.8", ",", "1.73", "]", ",", "\n", "anchor_strides", "=", "[", "0.4", ",", "0.4", ",", "0.0", "]", ",", "\n", "anchor_offsets", "=", "[", "0.2", ",", "-", "39.8", ",", "-", "1.465", "]", ",", "\n", "rotations", "=", "[", "0", ",", "1.5707963267948966", "]", ",", "\n", "match_threshold", "=", "0.5", ",", "\n", "unmatch_threshold", "=", "0.35", ",", "\n", ")", "\n", "anchor_generator2", "=", "AnchorGeneratorStride", "(", "\n", "# sizes=[0.6, 0.8, 1.73, 0.6, 1.76, 1.73],", "\n", "sizes", "=", "[", "1.6", ",", "3.9", ",", "1.56", "]", ",", "\n", "anchor_strides", "=", "[", "0.4", ",", "0.4", ",", "0.0", "]", ",", "\n", "anchor_offsets", "=", "[", "0.2", ",", "-", "39.8", ",", "-", "1.55442884", "]", ",", "\n", "rotations", "=", "[", "0", ",", "1.5707963267948966", "]", ",", "\n", "# rotations=[0],", "\n", "match_threshold", "=", "0.6", ",", "\n", "unmatch_threshold", "=", "0.45", ",", "\n", ")", "\n", "anchor_generators", "=", "[", "anchor_generator2", "]", "\n", "box_coder", "=", "GroundBox3dCoder", "(", ")", "\n", "# similarity_calc = DistanceSimilarity(1.0)", "\n", "similarity_calc", "=", "NearestIouSimilarity", "(", ")", "\n", "target_assigner", "=", "TargetAssigner", "(", "box_coder", ",", "anchor_generators", ",", "\n", "similarity_calc", ")", "\n", "# anchors = box_np_ops.create_anchors_v2(", "\n", "#     bv_range, grid_size[:2] // 2, sizes=anchor_dims)", "\n", "# matched_thresholds = [0.45, 0.45, 0.6]", "\n", "# unmatched_thresholds = [0.3, 0.3, 0.45]", "\n", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "feature_map_size", "=", "grid_size", "[", ":", "2", "]", "//", "2", "\n", "feature_map_size", "=", "[", "*", "feature_map_size", ",", "1", "]", "[", ":", ":", "-", "1", "]", "\n", "print", "(", "feature_map_size", ")", "\n", "# \"\"\"", "\n", "ret", "=", "target_assigner", ".", "generate_anchors", "(", "feature_map_size", ")", "\n", "anchors", "=", "ret", "[", "\"anchors\"", "]", "\n", "anchors", "=", "anchors", ".", "reshape", "(", "[", "-", "1", ",", "7", "]", ")", "\n", "anchors_bv", "=", "box_np_ops", ".", "rbbox2d_to_near_bbox", "(", "\n", "anchors", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", ")", "\n", "matched_thresholds", "=", "ret", "[", "\"matched_thresholds\"", "]", "\n", "unmatched_thresholds", "=", "ret", "[", "\"unmatched_thresholds\"", "]", "\n", "print", "(", "f\"num_anchors_ {len(anchors)}\"", ")", "\n", "if", "points", "is", "not", "None", ":", "\n", "            ", "voxels", ",", "coors", ",", "num_points", "=", "points_to_voxel", "(", "\n", "points", ",", "\n", "self", ".", "_voxel_size", ",", "\n", "# self._coors_range,", "\n", "coors_range", ",", "\n", "self", ".", "_max_num_points", ",", "\n", "reverse_index", "=", "True", ",", "\n", "max_voxels", "=", "self", ".", "_max_voxels", ")", "\n", "\n", "# print(np.min(coors, 0), np.max(coors, 0))", "\n", "dense_voxel_map", "=", "box_np_ops", ".", "sparse_sum_for_anchors_mask", "(", "\n", "coors", ",", "tuple", "(", "grid_size", "[", ":", ":", "-", "1", "]", "[", "1", ":", "]", ")", ")", "\n", "dense_voxel_map", "=", "dense_voxel_map", ".", "cumsum", "(", "0", ")", "\n", "dense_voxel_map", "=", "dense_voxel_map", ".", "cumsum", "(", "1", ")", "\n", "anchors_mask", "=", "box_np_ops", ".", "fused_get_anchors_area", "(", "\n", "dense_voxel_map", ",", "anchors_bv", ",", "voxel_size", ",", "coors_range", ",", "\n", "grid_size", ")", ">", "1", "\n", "", "print", "(", "np", ".", "sum", "(", "anchors_mask", ")", ",", "anchors_mask", ".", "shape", ")", "\n", "class_names", "=", "[", "\n", "'Car'", ",", "\"Pedestrian\"", ",", "\"Cyclist\"", ",", "'Van'", ",", "'Truck'", ",", "\"Tram\"", ",", "'Misc'", ",", "\n", "'Person_sitting'", "\n", "]", "\n", "gt_classes", "=", "np", ".", "array", "(", "\n", "[", "class_names", ".", "index", "(", "n", ")", "+", "1", "for", "n", "in", "gt_names", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "target_dict", "=", "target_assigner", ".", "assign", "(", "\n", "anchors", ",", "\n", "gt_boxes_lidar", ",", "\n", "anchors_mask", ",", "\n", "gt_classes", "=", "gt_classes", ",", "\n", "matched_thresholds", "=", "matched_thresholds", ",", "\n", "unmatched_thresholds", "=", "unmatched_thresholds", ")", "\n", "labels", "=", "target_dict", "[", "\"labels\"", "]", "\n", "reg_targets", "=", "target_dict", "[", "\"bbox_targets\"", "]", "\n", "reg_weights", "=", "target_dict", "[", "\"bbox_outside_weights\"", "]", "\n", "# print(labels[labels > 0])", "\n", "# decoded_reg_targets = box_np_ops.second_box_decode(reg_targets, anchors)", "\n", "# print(decoded_reg_targets.reshape(-1, 7)[labels > 0])", "\n", "print", "(", "\"target time\"", ",", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "print", "(", "f\"num_pos={np.sum(labels > 0)}\"", ")", "\n", "colors", "=", "np", ".", "zeros", "(", "[", "anchors", ".", "shape", "[", "0", "]", ",", "4", "]", ")", "\n", "ignored_color", "=", "bbox_plot", ".", "gl_color", "(", "GLColor", ".", "Gray", ",", "0.5", ")", "\n", "pos_color", "=", "bbox_plot", ".", "gl_color", "(", "GLColor", ".", "Cyan", ",", "0.5", ")", "\n", "\n", "colors", "[", "labels", "==", "-", "1", "]", "=", "ignored_color", "\n", "colors", "[", "labels", ">", "0", "]", "=", "pos_color", "\n", "cared_anchors_mask", "=", "np", ".", "logical_and", "(", "labels", "!=", "0", ",", "anchors_mask", ")", "\n", "colors", "=", "colors", "[", "cared_anchors_mask", "]", "\n", "anchors_not_neg", "=", "box_np_ops", ".", "rbbox3d_to_corners", "(", "anchors", ")", "[", "\n", "cared_anchors_mask", "]", "\n", "self", ".", "boxes3d", "(", "\"anchors\"", ",", "anchors_not_neg", ",", "colors", "=", "colors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiPointCloudView.draw_bounding_box": [[438, 441], ["second.minmax_to_corner_3d", "second.minmax_to_corner_3d", "second.minmax_to_corner_3d", "viewer.KittiPointCloudView.boxes3d", "numpy.array", "viewer.KittiPointCloudView.w_config.get"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.minmax_to_corner_3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.minmax_to_corner_3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.minmax_to_corner_3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.boxes3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get"], ["", "def", "draw_bounding_box", "(", "self", ")", ":", "\n", "        ", "bbox", "=", "box_np_ops", ".", "minmax_to_corner_3d", "(", "np", ".", "array", "(", "[", "self", ".", "w_config", ".", "get", "(", "\"CoorsRange\"", ")", "]", ")", ")", "\n", "self", ".", "boxes3d", "(", "\"bound\"", ",", "bbox", ",", "GLColor", ".", "Green", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiPointCloudView.draw_voxels": [[442, 496], ["numpy.array", "numpy.array", "second.core.point_cloud.point_cloud_ops.points_to_voxel", "second.core.point_cloud.point_cloud_ops.points_to_voxel", "second.core.point_cloud.point_cloud_ops.points_to_voxel", "numpy.round().astype", "numpy.concatenate", "second.minmax_to_corner_3d", "second.minmax_to_corner_3d", "second.minmax_to_corner_3d", "viewer.KittiPointCloudView.w_config.get", "viewer.KittiPointCloudView.boxes3d", "viewer.KittiPointCloudView.w_config.get", "viewer.KittiPointCloudView.w_config.get", "viewer.KittiPointCloudView.w_config.get", "viewer.KittiPointCloudView.w_config.get", "viewer.KittiPointCloudView.w_config.get", "viewer.KittiPointCloudView.w_config.get", "second.assign_label_to_voxel().astype", "second.assign_label_to_voxel().astype", "second.assign_label_to_voxel().astype", "numpy.zeros", "numpy.round", "numpy.zeros", "numpy.zeros", "numpy.zeros", "second.assign_label_to_voxel", "second.assign_label_to_voxel", "second.assign_label_to_voxel", "numpy.logical_not"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.minmax_to_corner_3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.minmax_to_corner_3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.minmax_to_corner_3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.boxes3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.assign_label_to_voxel", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.assign_label_to_voxel", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.assign_label_to_voxel"], ["", "def", "draw_voxels", "(", "self", ",", "points", ",", "gt_boxes", "=", "None", ")", ":", "\n", "        ", "pos_color", "=", "self", ".", "w_config", ".", "get", "(", "\"PosVoxelColor\"", ")", "[", ":", "3", "]", "\n", "pos_color", "=", "(", "*", "pos_color", ",", "self", ".", "w_config", ".", "get", "(", "\"PosVoxelAlpha\"", ")", ")", "\n", "neg_color", "=", "self", ".", "w_config", ".", "get", "(", "\"NegVoxelColor\"", ")", "[", ":", "3", "]", "\n", "neg_color", "=", "(", "*", "neg_color", ",", "self", ".", "w_config", ".", "get", "(", "\"NegVoxelAlpha\"", ")", ")", "\n", "\n", "voxel_size", "=", "np", ".", "array", "(", "self", ".", "w_config", ".", "get", "(", "\"VoxelSize\"", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "coors_range", "=", "np", ".", "array", "(", "\n", "self", ".", "w_config", ".", "get", "(", "\"CoorsRange\"", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "voxels", ",", "coors", ",", "num_points", "=", "points_to_voxel", "(", "\n", "points", ",", "\n", "voxel_size", ",", "\n", "coors_range", ",", "\n", "self", ".", "_max_num_points", ",", "\n", "reverse_index", "=", "True", ",", "\n", "max_voxels", "=", "self", ".", "_max_voxels", ")", "\n", "# print(\"num_voxels\", num_points.shape[0])", "\n", "\"\"\"\n        total_num_points = 0\n        for i in range(self._max_num_points):\n            num = np.sum(num_points.astype(np.int64) == i)\n            total_num_points += num * i\n            if num > 0:\n                print(f\"num={i} have {num} voxels\")\n        print(\"total_num_points\", points.shape[0], total_num_points)\n        \"\"\"", "\n", "grid_size", "=", "(", "coors_range", "[", "3", ":", "]", "-", "coors_range", "[", ":", "3", "]", ")", "/", "voxel_size", "\n", "grid_size", "=", "np", ".", "round", "(", "grid_size", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n", "shift", "=", "coors_range", "[", ":", "3", "]", "\n", "voxel_origins", "=", "coors", "[", ":", ",", ":", ":", "-", "1", "]", "*", "voxel_size", "+", "shift", "\n", "voxel_maxs", "=", "voxel_origins", "+", "voxel_size", "\n", "voxel_boxes", "=", "np", ".", "concatenate", "(", "[", "voxel_origins", ",", "voxel_maxs", "]", ",", "axis", "=", "1", ")", "\n", "voxel_box_corners", "=", "box_np_ops", ".", "minmax_to_corner_3d", "(", "voxel_boxes", ")", "\n", "pos_only", "=", "self", ".", "w_config", ".", "get", "(", "\"DrawPositiveVoxelsOnly\"", ")", "\n", "if", "gt_boxes", "is", "not", "None", ":", "\n", "            ", "labels", "=", "box_np_ops", ".", "assign_label_to_voxel", "(", "\n", "gt_boxes", ",", "coors", ",", "voxel_size", ",", "coors_range", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "if", "pos_only", ":", "\n", "                ", "voxel_box_corners", "=", "voxel_box_corners", "[", "labels", "]", "\n", "", "colors", "=", "np", ".", "zeros", "(", "[", "voxel_box_corners", ".", "shape", "[", "0", "]", ",", "4", "]", ")", "\n", "if", "pos_only", ":", "\n", "                ", "colors", "[", ":", "]", "=", "pos_color", "\n", "", "else", ":", "\n", "                ", "colors", "[", "np", ".", "logical_not", "(", "labels", ")", "]", "=", "neg_color", "\n", "colors", "[", "labels", "]", "=", "pos_color", "\n", "", "", "else", ":", "\n", "            ", "if", "not", "pos_only", ":", "\n", "                ", "colors", "=", "np", ".", "zeros", "(", "[", "voxel_box_corners", ".", "shape", "[", "0", "]", ",", "4", "]", ")", "\n", "colors", "[", ":", "]", "=", "neg_color", "\n", "", "else", ":", "\n", "                ", "voxel_box_corners", "=", "np", ".", "zeros", "(", "(", "0", ",", "8", ",", "3", ")", ")", "\n", "colors", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "", "", "self", ".", "boxes3d", "(", "\"voxels\"", ",", "voxel_box_corners", ",", "colors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.__init__": [[499, 520], ["PyQt5.QtWidgets.QMainWindow.__init__", "io.StringIO", "skimage.io.StringIO", "viewer.Settings", "viewer.KittiViewer.init_ui", "str", "pathlib.Path.home"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.init_ui"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "title", "=", "'KittiViewer'", "\n", "self", ".", "bbox_window", "=", "[", "10", ",", "10", ",", "1600", ",", "900", "]", "\n", "self", ".", "sstream", "=", "sysio", ".", "StringIO", "(", ")", "\n", "self", ".", "json_setting", "=", "Settings", "(", "str", "(", "Path", ".", "home", "(", ")", "/", "\".kittiviewerrc\"", ")", ")", "\n", "self", ".", "kitti_infos", "=", "None", "\n", "self", ".", "detection_annos", "=", "None", "\n", "self", ".", "image_idxes", "=", "None", "\n", "self", ".", "root_path", "=", "None", "\n", "self", ".", "current_idx", "=", "0", "\n", "self", ".", "dt_image_idxes", "=", "None", "\n", "self", ".", "current_image", "=", "None", "\n", "self", ".", "init_ui", "(", ")", "\n", "self", ".", "kitti_info", "=", "None", "\n", "self", ".", "points", "=", "None", "\n", "self", ".", "gt_boxes", "=", "None", "\n", "self", ".", "gt_names", "=", "None", "\n", "self", ".", "difficulty", "=", "None", "\n", "self", ".", "group_ids", "=", "None", "\n", "self", ".", "inference_ctx", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.init_ui": [[521, 685], ["viewer.KittiViewer.setWindowTitle", "viewer.KittiViewer.setGeometry", "PyQt5.QtWidgets.QVBoxLayout", "viewer.KittiViewer.json_setting.get", "PyQt5.QtWidgets.QLineEdit", "viewer.KittiViewer.json_setting.get", "PyQt5.QtWidgets.QLineEdit", "viewer.KittiViewer.json_setting.get", "PyQt5.QtWidgets.QLineEdit", "viewer.KittiViewer.json_setting.get", "PyQt5.QtWidgets.QLineEdit", "PyQt5.QtWidgets.QPushButton", "viewer.KittiViewer.w_load.clicked.connect", "PyQt5.QtWidgets.QPushButton", "viewer.KittiViewer.w_load_det.clicked.connect", "viewer.KittiDrawControl", "viewer.KittiViewer.json_setting.get", "viewer.KittiViewer.w_config.configChanged.connect", "PyQt5.QtWidgets.QPushButton", "viewer.KittiViewer.w_plot.clicked.connect", "PyQt5.QtWidgets.QPushButton", "viewer.KittiViewer.w_show_panel.clicked.connect", "PyQt5.QtWidgets.QWidget", "PyQt5.QtWidgets.QTextEdit", "PyQt5.QtWidgets.QGroupBox", "PyQt5.QtWidgets.QFormLayout", "PyQt5.QtWidgets.QHBoxLayout.addRow", "PyQt5.QtWidgets.QHBoxLayout.addRow", "PyQt5.QtWidgets.QHBoxLayout.addRow", "PyQt5.QtWidgets.QHBoxLayout.addRow", "viewer.KittiViewer.w_config_gbox.setLayout", "viewer.MatPlotLibView", "matplotlib.backends.backend_qt5agg.NavigationToolbar2QT", "PyQt5.QtWidgets.QVBoxLayout", "PyQt5.QtWidgets.QVBoxLayout.addWidget", "PyQt5.QtWidgets.QVBoxLayout.addWidget", "PyQt5.QtWidgets.QVBoxLayout.addWidget", "PyQt5.QtWidgets.QHBoxLayout", "PyQt5.QtWidgets.QHBoxLayout.addWidget", "PyQt5.QtWidgets.QHBoxLayout.addWidget", "PyQt5.QtWidgets.QVBoxLayout.addLayout", "PyQt5.QtWidgets.QHBoxLayout", "PyQt5.QtWidgets.QHBoxLayout.addWidget", "PyQt5.QtWidgets.QVBoxLayout.addLayout", "PyQt5.QtWidgets.QVBoxLayout.addWidget", "viewer.KittiViewer.json_setting.get", "PyQt5.QtWidgets.QLineEdit", "viewer.KittiViewer.json_setting.get", "PyQt5.QtWidgets.QLineEdit", "PyQt5.QtWidgets.QFormLayout", "PyQt5.QtWidgets.QHBoxLayout.addRow", "PyQt5.QtWidgets.QHBoxLayout.addRow", "PyQt5.QtWidgets.QVBoxLayout.addLayout", "PyQt5.QtWidgets.QPushButton", "viewer.KittiViewer.w_build_net.clicked.connect", "PyQt5.QtWidgets.QPushButton", "viewer.KittiViewer.w_load_ckpt.clicked.connect", "PyQt5.QtWidgets.QHBoxLayout", "PyQt5.QtWidgets.QHBoxLayout.addWidget", "PyQt5.QtWidgets.QHBoxLayout.addWidget", "PyQt5.QtWidgets.QVBoxLayout.addLayout", "PyQt5.QtWidgets.QPushButton", "viewer.KittiViewer.w_inference.clicked.connect", "PyQt5.QtWidgets.QVBoxLayout.addWidget", "PyQt5.QtWidgets.QPushButton", "viewer.KittiViewer.w_load_infer.clicked.connect", "PyQt5.QtWidgets.QVBoxLayout.addWidget", "PyQt5.QtWidgets.QFormLayout", "PyQt5.QtWidgets.QCheckBox", "viewer.KittiViewer.w_cb_gt_curcls.setChecked", "viewer.KittiViewer.w_cb_gt_curcls.stateChanged.connect", "PyQt5.QtWidgets.QComboBox", "viewer.KittiViewer.gt_combobox.addItem", "second.data.kitti_common.get_classes", "second.data.kitti_common.get_classes", "second.data.kitti_common.get_classes", "viewer.KittiViewer.gt_combobox.currentTextChanged.connect", "PyQt5.QtWidgets.QHBoxLayout.addRow", "PyQt5.QtWidgets.QCheckBox", "viewer.KittiViewer.w_cb_dt_curcls.setChecked", "viewer.KittiViewer.w_cb_dt_curcls.stateChanged.connect", "PyQt5.QtWidgets.QComboBox", "viewer.KittiViewer.dt_combobox.addItem", "viewer.KittiViewer.dt_combobox.currentTextChanged.connect", "PyQt5.QtWidgets.QHBoxLayout.addRow", "PyQt5.QtWidgets.QVBoxLayout.addLayout", "PyQt5.QtWidgets.QPushButton", "viewer.KittiViewer.w_next.clicked.connect", "PyQt5.QtWidgets.QPushButton", "viewer.KittiViewer.w_prev.clicked.connect", "PyQt5.QtWidgets.QHBoxLayout", "PyQt5.QtWidgets.QHBoxLayout.addWidget", "PyQt5.QtWidgets.QHBoxLayout.addWidget", "PyQt5.QtWidgets.QVBoxLayout.addLayout", "PyQt5.QtWidgets.QPushButton", "viewer.KittiViewer.w_next.clicked.connect", "PyQt5.QtWidgets.QPushButton", "viewer.KittiViewer.w_prev.clicked.connect", "PyQt5.QtWidgets.QHBoxLayout", "PyQt5.QtWidgets.QHBoxLayout.addWidget", "PyQt5.QtWidgets.QHBoxLayout.addWidget", "PyQt5.QtWidgets.QVBoxLayout.addLayout", "PyQt5.QtWidgets.QVBoxLayout.addLayout", "viewer.KittiViewer.json_setting.get", "PyQt5.QtWidgets.QLineEdit", "PyQt5.QtWidgets.QPushButton", "viewer.KittiViewer.w_save_image.clicked.connect", "PyQt5.QtWidgets.QVBoxLayout.addWidget", "PyQt5.QtWidgets.QVBoxLayout.addWidget", "PyQt5.QtWidgets.QVBoxLayout.addWidget", "PyQt5.QtWidgets.QHBoxLayout", "viewer.KittiPointCloudView", "viewer.KittiViewer.center_layout.addWidget", "viewer.KittiViewer.center_layout.addLayout", "viewer.KittiViewer.center_layout.setStretch", "viewer.KittiViewer.center_layout.setStretch", "PyQt5.QtWidgets.QWidget.setLayout", "viewer.KittiViewer.setCentralWidget", "viewer.KittiViewer.show", "viewer.KittiViewer.w_config.loads", "PyQt5.QtWidgets.QLabel", "PyQt5.QtWidgets.QLabel", "PyQt5.QtWidgets.QLabel", "PyQt5.QtWidgets.QLabel", "PyQt5.QtWidgets.QLabel", "PyQt5.QtWidgets.QLabel", "viewer.KittiViewer.gt_combobox.addItem", "functools.partial", "functools.partial", "functools.partial", "functools.partial", "viewer.KittiViewer.w_config.get"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_classes", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_classes", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_classes", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.loads", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get"], ["", "def", "init_ui", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "setWindowTitle", "(", "self", ".", "title", ")", "\n", "self", ".", "setGeometry", "(", "*", "self", ".", "bbox_window", ")", "\n", "# self.statusBar().showMessage('Message in statusbar.')", "\n", "control_panel_layout", "=", "QVBoxLayout", "(", ")", "\n", "root_path", "=", "self", ".", "json_setting", ".", "get", "(", "\"kitti_root_path\"", ",", "\"\"", ")", "\n", "self", ".", "w_root_path", "=", "QLineEdit", "(", "root_path", ")", "\n", "iamge_idx", "=", "self", ".", "json_setting", ".", "get", "(", "\"image_idx\"", ",", "\"0\"", ")", "\n", "self", ".", "w_imgidx", "=", "QLineEdit", "(", "iamge_idx", ")", "\n", "info_path", "=", "self", ".", "json_setting", ".", "get", "(", "\"latest_info_path\"", ",", "\"\"", ")", "\n", "self", ".", "w_info_path", "=", "QLineEdit", "(", "info_path", ")", "\n", "det_path", "=", "self", ".", "json_setting", ".", "get", "(", "\"latest_det_path\"", ",", "\"\"", ")", "\n", "self", ".", "w_det_path", "=", "QLineEdit", "(", "det_path", ")", "\n", "# self.w_cmd = QLineEdit()", "\n", "# self.w_cmd.returnPressed.connect(self.on_CmdReturnPressed)", "\n", "self", ".", "w_load", "=", "QPushButton", "(", "'load info'", ")", "\n", "self", ".", "w_load", ".", "clicked", ".", "connect", "(", "self", ".", "on_loadButtonPressed", ")", "\n", "self", ".", "w_load_det", "=", "QPushButton", "(", "'load detection'", ")", "\n", "self", ".", "w_load_det", ".", "clicked", ".", "connect", "(", "self", ".", "on_loadDetPressed", ")", "\n", "self", ".", "w_config", "=", "KittiDrawControl", "(", "'ctrl'", ")", "\n", "config", "=", "self", ".", "json_setting", ".", "get", "(", "\"config\"", ",", "\"\"", ")", "\n", "if", "config", "!=", "\"\"", ":", "\n", "            ", "self", ".", "w_config", ".", "loads", "(", "config", ")", "\n", "", "self", ".", "w_config", ".", "configChanged", ".", "connect", "(", "self", ".", "on_configchanged", ")", "\n", "self", ".", "w_plot", "=", "QPushButton", "(", "'plot'", ")", "\n", "self", ".", "w_plot", ".", "clicked", ".", "connect", "(", "self", ".", "on_plotButtonPressed", ")", "\n", "\n", "self", ".", "w_show_panel", "=", "QPushButton", "(", "'control panel'", ")", "\n", "self", ".", "w_show_panel", ".", "clicked", ".", "connect", "(", "self", ".", "on_panel_clicked", ")", "\n", "\n", "center_widget", "=", "QWidget", "(", "self", ")", "\n", "self", ".", "w_output", "=", "QTextEdit", "(", ")", "\n", "self", ".", "w_config_gbox", "=", "QGroupBox", "(", "\"Read Config\"", ")", "\n", "layout", "=", "QFormLayout", "(", ")", "\n", "layout", ".", "addRow", "(", "QLabel", "(", "\"root path:\"", ")", ",", "self", ".", "w_root_path", ")", "\n", "layout", ".", "addRow", "(", "QLabel", "(", "\"info path:\"", ")", ",", "self", ".", "w_info_path", ")", "\n", "layout", ".", "addRow", "(", "QLabel", "(", "\"image idx:\"", ")", ",", "self", ".", "w_imgidx", ")", "\n", "layout", ".", "addRow", "(", "QLabel", "(", "\"det path:\"", ")", ",", "self", ".", "w_det_path", ")", "\n", "self", ".", "w_config_gbox", ".", "setLayout", "(", "layout", ")", "\n", "self", ".", "w_plt", "=", "MatPlotLibView", "(", ")", "\n", "self", ".", "w_plt_toolbar", "=", "NavigationToolbar", "(", "self", ".", "w_plt", ",", "center_widget", ")", "\n", "# self.w_plt.ax.set_axis_off()", "\n", "# self.w_plt.ax.set_yticklabels([])", "\n", "# self.w_plt.ax.set_xticklabels([])", "\n", "plt_layout", "=", "QVBoxLayout", "(", ")", "\n", "plt_layout", ".", "addWidget", "(", "self", ".", "w_plt", ")", "\n", "plt_layout", ".", "addWidget", "(", "self", ".", "w_plt_toolbar", ")", "\n", "\n", "control_panel_layout", ".", "addWidget", "(", "self", ".", "w_config_gbox", ")", "\n", "# control_panel_layout.addWidget(self.w_info_path)", "\n", "h_layout", "=", "QHBoxLayout", "(", ")", "\n", "h_layout", ".", "addWidget", "(", "self", ".", "w_load", ")", "\n", "h_layout", ".", "addWidget", "(", "self", ".", "w_load_det", ")", "\n", "control_panel_layout", ".", "addLayout", "(", "h_layout", ")", "\n", "\n", "h_layout", "=", "QHBoxLayout", "(", ")", "\n", "h_layout", ".", "addWidget", "(", "self", ".", "w_plot", ")", "\n", "control_panel_layout", ".", "addLayout", "(", "h_layout", ")", "\n", "control_panel_layout", ".", "addWidget", "(", "self", ".", "w_show_panel", ")", "\n", "\n", "vcfg_path", "=", "self", ".", "json_setting", ".", "get", "(", "\"latest_vxnet_cfg_path\"", ",", "\"\"", ")", "\n", "self", ".", "w_vconfig_path", "=", "QLineEdit", "(", "vcfg_path", ")", "\n", "vckpt_path", "=", "self", ".", "json_setting", ".", "get", "(", "\"latest_vxnet_ckpt_path\"", ",", "\"\"", ")", "\n", "self", ".", "w_vckpt_path", "=", "QLineEdit", "(", "vckpt_path", ")", "\n", "layout", "=", "QFormLayout", "(", ")", "\n", "layout", ".", "addRow", "(", "QLabel", "(", "\"config path:\"", ")", ",", "self", ".", "w_vconfig_path", ")", "\n", "layout", ".", "addRow", "(", "QLabel", "(", "\"ckpt path:\"", ")", ",", "self", ".", "w_vckpt_path", ")", "\n", "control_panel_layout", ".", "addLayout", "(", "layout", ")", "\n", "self", ".", "w_build_net", "=", "QPushButton", "(", "'Build Network'", ")", "\n", "self", ".", "w_build_net", ".", "clicked", ".", "connect", "(", "self", ".", "on_BuildVxNetPressed", ")", "\n", "\n", "self", ".", "w_load_ckpt", "=", "QPushButton", "(", "'load Network checkpoint'", ")", "\n", "self", ".", "w_load_ckpt", ".", "clicked", ".", "connect", "(", "self", ".", "on_loadVxNetCkptPressed", ")", "\n", "h_layout", "=", "QHBoxLayout", "(", ")", "\n", "h_layout", ".", "addWidget", "(", "self", ".", "w_build_net", ")", "\n", "h_layout", ".", "addWidget", "(", "self", ".", "w_load_ckpt", ")", "\n", "control_panel_layout", ".", "addLayout", "(", "h_layout", ")", "\n", "self", ".", "w_inference", "=", "QPushButton", "(", "'Inference Network'", ")", "\n", "self", ".", "w_inference", ".", "clicked", ".", "connect", "(", "self", ".", "on_InferenceVxNetPressed", ")", "\n", "control_panel_layout", ".", "addWidget", "(", "self", ".", "w_inference", ")", "\n", "self", ".", "w_load_infer", "=", "QPushButton", "(", "'Load and Inference Network'", ")", "\n", "self", ".", "w_load_infer", ".", "clicked", ".", "connect", "(", "self", ".", "on_LoadInferenceVxNetPressed", ")", "\n", "control_panel_layout", ".", "addWidget", "(", "self", ".", "w_load_infer", ")", "\n", "# self.w_eval_net = QPushButton('Evaluation VoxelNet')", "\n", "# self.w_eval_net.clicked.connect(self.on_EvalVxNetPressed)", "\n", "# control_panel_layout.addWidget(self.w_eval_net)", "\n", "layout", "=", "QFormLayout", "(", ")", "\n", "self", ".", "w_cb_gt_curcls", "=", "QCheckBox", "(", "\"Indexed by GroundTruth Class\"", ")", "\n", "self", ".", "w_cb_gt_curcls", ".", "setChecked", "(", "True", ")", "\n", "self", ".", "w_cb_gt_curcls", ".", "stateChanged", ".", "connect", "(", "\n", "self", ".", "on_gt_checkbox_statechanged", ")", "\n", "\n", "self", ".", "gt_combobox", "=", "QComboBox", "(", ")", "\n", "self", ".", "gt_combobox", ".", "addItem", "(", "\"All\"", ")", "\n", "for", "cls_name", "in", "kitti", ".", "get_classes", "(", ")", ":", "\n", "            ", "self", ".", "gt_combobox", ".", "addItem", "(", "cls_name", ")", "\n", "", "self", ".", "_current_gt_cls_ids", "=", "None", "\n", "self", ".", "_current_gt_cls_idx", "=", "0", "\n", "self", ".", "gt_combobox", ".", "currentTextChanged", ".", "connect", "(", "\n", "self", ".", "on_gt_combobox_changed", ")", "\n", "layout", ".", "addRow", "(", "self", ".", "w_cb_gt_curcls", ",", "self", ".", "gt_combobox", ")", "\n", "\n", "self", ".", "w_cb_dt_curcls", "=", "QCheckBox", "(", "\"Indexed by Detection Class\"", ")", "\n", "self", ".", "w_cb_dt_curcls", ".", "setChecked", "(", "False", ")", "\n", "self", ".", "w_cb_dt_curcls", ".", "stateChanged", ".", "connect", "(", "\n", "self", ".", "on_dt_checkbox_statechanged", ")", "\n", "\n", "self", ".", "dt_combobox", "=", "QComboBox", "(", ")", "\n", "self", ".", "dt_combobox", ".", "addItem", "(", "\"All\"", ")", "\n", "self", ".", "_current_dt_cls_ids", "=", "None", "\n", "self", ".", "_current_dt_cls_idx", "=", "0", "\n", "self", ".", "dt_combobox", ".", "currentTextChanged", ".", "connect", "(", "\n", "self", ".", "on_dt_combobox_changed", ")", "\n", "layout", ".", "addRow", "(", "self", ".", "w_cb_dt_curcls", ",", "self", ".", "dt_combobox", ")", "\n", "\n", "control_panel_layout", ".", "addLayout", "(", "layout", ")", "\n", "self", ".", "w_next", "=", "QPushButton", "(", "'next'", ")", "\n", "self", ".", "w_next", ".", "clicked", ".", "connect", "(", "\n", "partial", "(", "self", ".", "on_nextOrPrevPressed", ",", "prev", "=", "False", ")", ")", "\n", "self", ".", "w_prev", "=", "QPushButton", "(", "'prev'", ")", "\n", "self", ".", "w_prev", ".", "clicked", ".", "connect", "(", "\n", "partial", "(", "self", ".", "on_nextOrPrevPressed", ",", "prev", "=", "True", ")", ")", "\n", "\n", "layout", "=", "QHBoxLayout", "(", ")", "\n", "layout", ".", "addWidget", "(", "self", ".", "w_prev", ")", "\n", "layout", ".", "addWidget", "(", "self", ".", "w_next", ")", "\n", "control_panel_layout", ".", "addLayout", "(", "layout", ")", "\n", "\n", "self", ".", "w_next", "=", "QPushButton", "(", "'next current class'", ")", "\n", "self", ".", "w_next", ".", "clicked", ".", "connect", "(", "\n", "partial", "(", "self", ".", "on_nextOrPrevCurClsPressed", ",", "prev", "=", "False", ")", ")", "\n", "self", ".", "w_prev", "=", "QPushButton", "(", "'prev current class'", ")", "\n", "self", ".", "w_prev", ".", "clicked", ".", "connect", "(", "\n", "partial", "(", "self", ".", "on_nextOrPrevCurClsPressed", ",", "prev", "=", "True", ")", ")", "\n", "\n", "layout", "=", "QHBoxLayout", "(", ")", "\n", "layout", ".", "addWidget", "(", "self", ".", "w_prev", ")", "\n", "layout", ".", "addWidget", "(", "self", ".", "w_next", ")", "\n", "control_panel_layout", ".", "addLayout", "(", "layout", ")", "\n", "\n", "control_panel_layout", ".", "addLayout", "(", "plt_layout", ")", "\n", "save_image_path", "=", "self", ".", "json_setting", ".", "get", "(", "\"save_image_path\"", ",", "\"\"", ")", "\n", "self", ".", "w_image_save_path", "=", "QLineEdit", "(", "save_image_path", ")", "\n", "# self.w_cmd = QLineEdit()", "\n", "# self.w_cmd.returnPressed.connect(self.on_CmdReturnPressed)", "\n", "self", ".", "w_save_image", "=", "QPushButton", "(", "'save image'", ")", "\n", "self", ".", "w_save_image", ".", "clicked", ".", "connect", "(", "self", ".", "on_saveimg_clicked", ")", "\n", "control_panel_layout", ".", "addWidget", "(", "self", ".", "w_image_save_path", ")", "\n", "control_panel_layout", ".", "addWidget", "(", "self", ".", "w_save_image", ")", "\n", "# control_panel_layout.addWidget(self.w_cmd)", "\n", "control_panel_layout", ".", "addWidget", "(", "self", ".", "w_output", ")", "\n", "self", ".", "center_layout", "=", "QHBoxLayout", "(", ")", "\n", "\n", "self", ".", "w_pc_viewer", "=", "KittiPointCloudView", "(", "\n", "self", ".", "w_config", ",", "coors_range", "=", "self", ".", "w_config", ".", "get", "(", "\"CoorsRange\"", ")", ")", "\n", "\n", "self", ".", "center_layout", ".", "addWidget", "(", "self", ".", "w_pc_viewer", ")", "\n", "self", ".", "center_layout", ".", "addLayout", "(", "control_panel_layout", ")", "\n", "self", ".", "center_layout", ".", "setStretch", "(", "0", ",", "2", ")", "\n", "self", ".", "center_layout", ".", "setStretch", "(", "1", ",", "1", ")", "\n", "center_widget", ".", "setLayout", "(", "self", ".", "center_layout", ")", "\n", "self", ".", "setCentralWidget", "(", "center_widget", ")", "\n", "self", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.on_panel_clicked": [[686, 691], ["viewer.KittiViewer.w_config.isHidden", "viewer.KittiViewer.w_config.show", "viewer.KittiViewer.w_config.hide"], "methods", ["None"], ["", "def", "on_panel_clicked", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "w_config", ".", "isHidden", "(", ")", ":", "\n", "            ", "self", ".", "w_config", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "w_config", ".", "hide", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.on_saveimg_clicked": [[692, 694], ["viewer.KittiViewer.save_image"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.save_image"], ["", "", "def", "on_saveimg_clicked", "(", "self", ")", ":", "\n", "        ", "self", ".", "save_image", "(", "self", ".", "current_image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.on_gt_checkbox_statechanged": [[695, 698], ["viewer.KittiViewer.w_cb_gt_curcls.setChecked", "viewer.KittiViewer.w_cb_dt_curcls.setChecked"], "methods", ["None"], ["", "def", "on_gt_checkbox_statechanged", "(", "self", ")", ":", "\n", "        ", "self", ".", "w_cb_gt_curcls", ".", "setChecked", "(", "True", ")", "\n", "self", ".", "w_cb_dt_curcls", ".", "setChecked", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.on_dt_checkbox_statechanged": [[699, 702], ["viewer.KittiViewer.w_cb_gt_curcls.setChecked", "viewer.KittiViewer.w_cb_dt_curcls.setChecked"], "methods", ["None"], ["", "def", "on_dt_checkbox_statechanged", "(", "self", ")", ":", "\n", "        ", "self", ".", "w_cb_gt_curcls", ".", "setChecked", "(", "False", ")", "\n", "self", ".", "w_cb_dt_curcls", ".", "setChecked", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.on_gt_combobox_changed": [[703, 706], ["viewer.KittiViewer.on_loadButtonPressed"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.on_loadButtonPressed"], ["", "def", "on_gt_combobox_changed", "(", "self", ")", ":", "\n", "        ", "self", ".", "_current_gt_cls_idx", "=", "0", "\n", "self", ".", "on_loadButtonPressed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.on_dt_combobox_changed": [[707, 718], ["second.data.kitti_common.filter_empty_annos", "second.data.kitti_common.filter_empty_annos", "second.data.kitti_common.filter_empty_annos", "viewer.KittiViewer.dt_combobox.currentText"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.filter_empty_annos", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.filter_empty_annos", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.filter_empty_annos"], ["", "def", "on_dt_combobox_changed", "(", "self", ")", ":", "\n", "        ", "self", ".", "_current_dt_cls_idx", "=", "0", "\n", "annos", "=", "kitti", ".", "filter_empty_annos", "(", "self", ".", "detection_annos", ")", "\n", "if", "self", ".", "dt_image_idxes", "is", "not", "None", "and", "annos", "is", "not", "None", ":", "\n", "            ", "current_class", "=", "self", ".", "dt_combobox", ".", "currentText", "(", ")", "\n", "if", "current_class", "==", "\"All\"", ":", "\n", "                ", "self", ".", "_current_dt_cls_ids", "=", "self", ".", "dt_image_idxes", "\n", "", "else", ":", "\n", "                ", "self", ".", "_current_dt_cls_ids", "=", "[", "\n", "anno", "[", "\"image_idx\"", "]", "[", "0", "]", "for", "anno", "in", "annos", "\n", "if", "current_class", "in", "anno", "[", "\"name\"", "]", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.message": [[720, 727], ["viewer.KittiViewer.print_str", "viewer.KittiViewer.w_output.insertHtml", "viewer.KittiViewer.w_output.verticalScrollBar().setValue", "viewer.KittiViewer.w_output.verticalScrollBar().maximum", "viewer.KittiViewer.w_output.verticalScrollBar", "viewer.KittiViewer.w_output.verticalScrollBar"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.print_str"], ["", "", "", "def", "message", "(", "self", ",", "value", ",", "*", "arg", ",", "color", "=", "\"Black\"", ")", ":", "\n", "        ", "colorHtml", "=", "f\"<font color=\\\"{color}\\\">\"", "\n", "endHtml", "=", "\"</font><br>\"", "\n", "msg", "=", "self", ".", "print_str", "(", "value", ",", "*", "arg", ")", "\n", "self", ".", "w_output", ".", "insertHtml", "(", "colorHtml", "+", "msg", "+", "endHtml", ")", "\n", "self", ".", "w_output", ".", "verticalScrollBar", "(", ")", ".", "setValue", "(", "\n", "self", ".", "w_output", ".", "verticalScrollBar", "(", ")", ".", "maximum", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.error": [[728, 731], ["datetime.datetime.now().strftime", "viewer.KittiViewer.message", "datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.message"], ["", "def", "error", "(", "self", ",", "value", ",", "*", "arg", ")", ":", "\n", "        ", "time_str", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"[%H:%M:%S]\"", ")", "\n", "return", "self", ".", "message", "(", "time_str", ",", "value", ",", "*", "arg", ",", "color", "=", "\"Red\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.info": [[732, 735], ["datetime.datetime.now().strftime", "viewer.KittiViewer.message", "datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.message"], ["", "def", "info", "(", "self", ",", "value", ",", "*", "arg", ")", ":", "\n", "        ", "time_str", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"[%H:%M:%S]\"", ")", "\n", "return", "self", ".", "message", "(", "time_str", ",", "value", ",", "*", "arg", ",", "color", "=", "\"Black\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.warning": [[736, 739], ["datetime.datetime.now().strftime", "viewer.KittiViewer.message", "datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.message"], ["", "def", "warning", "(", "self", ",", "value", ",", "*", "arg", ")", ":", "\n", "        ", "time_str", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"[%H:%M:%S]\"", ")", "\n", "return", "self", ".", "message", "(", "time_str", ",", "value", ",", "*", "arg", ",", "color", "=", "\"Yellow\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.save_image": [[740, 755], ["viewer.KittiViewer.w_image_save_path.text", "viewer.KittiViewer.json_setting.set", "viewer.KittiViewer.w_pc_viewer.grabFrameBuffer", "str", "viewer.KittiViewer.save", "viewer.KittiViewer.info", "io.imsave", "skimage.io.imsave", "skimage.io.imsave", "pathlib.Path", "str", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.set", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.Settings.save", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.info"], ["", "def", "save_image", "(", "self", ",", "image", ")", ":", "\n", "\n", "        ", "img_path", "=", "self", ".", "w_image_save_path", ".", "text", "(", ")", "\n", "self", ".", "json_setting", ".", "set", "(", "\"save_image_path\"", ",", "img_path", ")", "\n", "if", "self", ".", "current_image", "is", "not", "None", ":", "\n", "            ", "io", ".", "imsave", "(", "img_path", ",", "image", ")", "\n", "# p = self.w_pc_viewer.grab()", "\n", "", "p", "=", "self", ".", "w_pc_viewer", ".", "grabFrameBuffer", "(", ")", "\n", "\n", "# p = QtGui.QPixmap.grabWindow(self.w_pc_viewer)", "\n", "pc_img_path", "=", "str", "(", "\n", "Path", "(", "img_path", ")", ".", "parent", "/", "(", "str", "(", "Path", "(", "img_path", ")", ".", "stem", ")", "+", "\"_pc.jpg\"", ")", ")", "\n", "# p.save(pc_img_path, 'jpg')", "\n", "p", ".", "save", "(", "pc_img_path", ",", "'jpg'", ")", "\n", "self", ".", "info", "(", "\"image saved to\"", ",", "img_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.print_str": [[756, 762], ["viewer.KittiViewer.sstream.truncate", "viewer.KittiViewer.sstream.seek", "print", "viewer.KittiViewer.sstream.getvalue"], "methods", ["None"], ["", "def", "print_str", "(", "self", ",", "value", ",", "*", "arg", ")", ":", "\n", "#self.strprint.flush()", "\n", "        ", "self", ".", "sstream", ".", "truncate", "(", "0", ")", "\n", "self", ".", "sstream", ".", "seek", "(", "0", ")", "\n", "print", "(", "value", ",", "*", "arg", ",", "file", "=", "self", ".", "sstream", ")", "\n", "return", "self", ".", "sstream", ".", "getvalue", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.on_nextOrPrevPressed": [[763, 772], ["viewer.KittiViewer.w_imgidx.setText", "viewer.KittiViewer.plot_all", "max", "len", "min", "str"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.GLTextItem.setText", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.plot_all"], ["", "def", "on_nextOrPrevPressed", "(", "self", ",", "prev", ")", ":", "\n", "        ", "if", "prev", "is", "True", ":", "\n", "            ", "self", ".", "current_idx", "=", "max", "(", "self", ".", "current_idx", "-", "1", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "info_len", "=", "len", "(", "self", ".", "image_idxes", ")", "\n", "self", ".", "current_idx", "=", "min", "(", "self", ".", "current_idx", "+", "1", ",", "info_len", "-", "1", ")", "\n", "", "image_idx", "=", "self", ".", "image_idxes", "[", "self", ".", "current_idx", "]", "\n", "self", ".", "w_imgidx", ".", "setText", "(", "str", "(", "image_idx", ")", ")", "\n", "self", ".", "plot_all", "(", "image_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.on_nextOrPrevCurClsPressed": [[773, 793], ["viewer.KittiViewer.w_cb_dt_curcls.isChecked", "viewer.KittiViewer.plot_all", "viewer.KittiViewer.info", "viewer.KittiViewer.w_cb_gt_curcls.isChecked", "max", "len", "min", "viewer.KittiViewer.info", "max", "len", "min"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.plot_all", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.info", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.info"], ["", "def", "on_nextOrPrevCurClsPressed", "(", "self", ",", "prev", ")", ":", "\n", "        ", "if", "self", ".", "w_cb_dt_curcls", ".", "isChecked", "(", ")", ":", "\n", "            ", "if", "prev", "is", "True", ":", "\n", "                ", "self", ".", "_current_dt_cls_idx", "=", "max", "(", "self", ".", "_current_dt_cls_idx", "-", "1", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "info_len", "=", "len", "(", "self", ".", "_current_dt_cls_ids", ")", "\n", "self", ".", "_current_dt_cls_idx", "=", "min", "(", "self", ".", "_current_dt_cls_idx", "+", "1", ",", "\n", "info_len", "-", "1", ")", "\n", "", "image_idx", "=", "self", ".", "_current_dt_cls_ids", "[", "self", ".", "_current_dt_cls_idx", "]", "\n", "self", ".", "info", "(", "\"current dt image idx:\"", ",", "image_idx", ")", "\n", "", "elif", "self", ".", "w_cb_gt_curcls", ".", "isChecked", "(", ")", ":", "\n", "            ", "if", "prev", "is", "True", ":", "\n", "                ", "self", ".", "_current_gt_cls_idx", "=", "max", "(", "self", ".", "_current_gt_cls_idx", "-", "1", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "info_len", "=", "len", "(", "self", ".", "_current_gt_cls_ids", ")", "\n", "self", ".", "_current_gt_cls_idx", "=", "min", "(", "self", ".", "_current_gt_cls_idx", "+", "1", ",", "\n", "info_len", "-", "1", ")", "\n", "", "image_idx", "=", "self", ".", "_current_gt_cls_ids", "[", "self", ".", "_current_gt_cls_idx", "]", "\n", "self", ".", "info", "(", "\"current gt image idx:\"", ",", "image_idx", ")", "\n", "", "self", ".", "plot_all", "(", "image_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.on_CmdReturnPressed": [[794, 797], ["viewer.KittiViewer.print_str", "viewer.KittiViewer.output.insertPlainText", "viewer.KittiViewer.cmd.text"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.print_str"], ["", "def", "on_CmdReturnPressed", "(", "self", ")", ":", "\n", "        ", "cmd", "=", "self", ".", "print_str", "(", "self", ".", "cmd", ".", "text", "(", ")", ")", "\n", "self", ".", "output", ".", "insertPlainText", "(", "cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.on_loadButtonPressed": [[798, 836], ["pathlib.Path", "viewer.KittiViewer.json_setting.set", "viewer.KittiViewer.w_info_path.text", "viewer.KittiViewer.json_setting.set", "db_infos_path.exists", "viewer.KittiViewer.info", "viewer.KittiViewer.info", "viewer.KittiViewer.gt_combobox.currentText", "viewer.KittiViewer.w_root_path.text", "viewer.KittiViewer.error", "str", "pathlib.Path", "pathlib.Path.exists", "viewer.KittiViewer.error", "str", "open", "pickle.load", "pathlib.Path", "len", "open", "pickle.load", "viewer.KittiViewer.w_config.get", "viewer.KittiViewer.w_config.get", "viewer.KittiViewer.info", "viewer.KittiViewer.info", "second.core.sample_ops.DataBaseSamplerV2", "second.core.sample_ops.DataBaseSamplerV2", "second.core.sample_ops.DataBaseSamplerV2"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.set", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.set", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.info", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.info", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.error", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.error", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.Settings.load", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.Settings.load", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.info", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.info"], ["", "def", "on_loadButtonPressed", "(", "self", ")", ":", "\n", "        ", "self", ".", "root_path", "=", "Path", "(", "self", ".", "w_root_path", ".", "text", "(", ")", ")", "\n", "if", "not", "(", "self", ".", "root_path", "/", "\"training\"", ")", ".", "exists", "(", ")", ":", "\n", "            ", "self", ".", "error", "(", "\"ERROR: your root path is incorrect.\"", ")", "\n", "return", "\n", "", "self", ".", "json_setting", ".", "set", "(", "\"kitti_root_path\"", ",", "str", "(", "self", ".", "root_path", ")", ")", "\n", "info_path", "=", "self", ".", "w_info_path", ".", "text", "(", ")", "\n", "if", "info_path", "==", "''", ":", "\n", "            ", "info_path", "=", "self", ".", "root_path", "/", "'kitti_infos_val.pkl'", "\n", "", "else", ":", "\n", "            ", "info_path", "=", "Path", "(", "info_path", ")", "\n", "", "if", "not", "info_path", ".", "exists", "(", ")", ":", "\n", "            ", "self", ".", "error", "(", "\"ERROR: info file not exist\"", ")", "\n", "return", "\n", "", "self", ".", "json_setting", ".", "set", "(", "\"latest_info_path\"", ",", "str", "(", "info_path", ")", ")", "\n", "with", "open", "(", "info_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "kitti_infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "db_infos_path", "=", "Path", "(", "self", ".", "root_path", ")", "/", "\"kitti_dbinfos_train.pkl\"", "\n", "if", "db_infos_path", ".", "exists", "(", ")", ":", "\n", "            ", "with", "open", "(", "db_infos_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "self", ".", "db_infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "global_rot_range", "=", "self", ".", "w_config", ".", "get", "(", "\"SampleGlobleRotRange\"", ")", "\n", "groups", "=", "self", ".", "w_config", ".", "get", "(", "\"SampleGroups\"", ")", "\n", "self", ".", "info", "(", "\"init database sampler with group:\"", ")", "\n", "self", ".", "info", "(", "groups", ")", "\n", "self", ".", "db_sampler", "=", "DataBaseSamplerV2", "(", "self", ".", "db_infos", ",", "groups", ",", "global_rot_range", "=", "global_rot_range", ")", "\n", "", "", "self", ".", "info", "(", "\"load db_infos.\"", ")", "\n", "self", ".", "image_idxes", "=", "[", "info", "[", "'image_idx'", "]", "for", "info", "in", "self", ".", "kitti_infos", "]", "\n", "self", ".", "info", "(", "\"load\"", ",", "len", "(", "self", ".", "kitti_infos", ")", ",", "\"infos.\"", ")", "\n", "current_class", "=", "self", ".", "gt_combobox", ".", "currentText", "(", ")", "\n", "if", "current_class", "==", "\"All\"", ":", "\n", "            ", "self", ".", "_current_gt_cls_ids", "=", "self", ".", "image_idxes", "\n", "", "else", ":", "\n", "            ", "self", ".", "_current_gt_cls_ids", "=", "[", "\n", "info", "[", "\"image_idx\"", "]", "for", "info", "in", "self", ".", "kitti_infos", "\n", "if", "current_class", "in", "info", "[", "\"annos\"", "]", "[", "\"name\"", "]", "\n", "]", "\n", "", "self", ".", "_current_gt_cls_idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.on_loadDetPressed": [[837, 880], ["viewer.KittiViewer.w_det_path.text", "pathlib.Path().is_file", "viewer.KittiViewer.info", "viewer.KittiViewer.json_setting.set", "second.data.kitti_common.filter_empty_annos", "second.data.kitti_common.filter_empty_annos", "second.data.kitti_common.filter_empty_annos", "viewer.KittiViewer.dt_combobox.clear", "viewer.KittiViewer.dt_combobox.addItem", "viewer.KittiViewer.dt_combobox.currentText", "second.data.kitti_common.get_label_annos", "second.data.kitti_common.get_label_annos", "second.data.kitti_common.get_label_annos", "len", "viewer.KittiViewer.warning", "viewer.KittiViewer.dt_combobox.addItem", "pathlib.Path", "open", "pickle.load", "len", "available_cls.append"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.info", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.set", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.filter_empty_annos", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.filter_empty_annos", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.filter_empty_annos", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.train.fastai_optim.OptimWrapper.clear", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_label_annos", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_label_annos", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_label_annos", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.warning", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.Settings.load"], ["", "def", "on_loadDetPressed", "(", "self", ")", ":", "\n", "        ", "det_path", "=", "self", ".", "w_det_path", ".", "text", "(", ")", "\n", "if", "Path", "(", "det_path", ")", ".", "is_file", "(", ")", ":", "\n", "            ", "with", "open", "(", "det_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "dt_annos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "            ", "dt_annos", "=", "kitti", ".", "get_label_annos", "(", "det_path", ")", "\n", "", "if", "len", "(", "dt_annos", ")", "==", "0", ":", "\n", "            ", "self", ".", "warning", "(", "\"detection path contain nothing.\"", ")", "\n", "return", "\n", "", "self", ".", "detection_annos", "=", "dt_annos", "\n", "self", ".", "info", "(", "f\"load {len(dt_annos)} detections.\"", ")", "\n", "self", ".", "json_setting", ".", "set", "(", "\"latest_det_path\"", ",", "det_path", ")", "\n", "annos", "=", "kitti", ".", "filter_empty_annos", "(", "self", ".", "detection_annos", ")", "\n", "self", ".", "dt_image_idxes", "=", "[", "anno", "[", "\"image_idx\"", "]", "[", "0", "]", "for", "anno", "in", "annos", "]", "\n", "# get class in dt", "\n", "available_cls", "=", "[", "]", "\n", "for", "anno", "in", "self", ".", "detection_annos", ":", "\n", "            ", "for", "name", "in", "anno", "[", "\"name\"", "]", ":", "\n", "                ", "if", "name", "not", "in", "available_cls", ":", "\n", "                    ", "available_cls", ".", "append", "(", "name", ")", "\n", "\n", "", "", "", "self", ".", "dt_combobox", ".", "clear", "(", ")", "\n", "self", ".", "dt_combobox", ".", "addItem", "(", "\"All\"", ")", "\n", "for", "cls_name", "in", "available_cls", ":", "\n", "            ", "self", ".", "dt_combobox", ".", "addItem", "(", "cls_name", ")", "\n", "\n", "", "current_class", "=", "self", ".", "dt_combobox", ".", "currentText", "(", ")", "\n", "if", "current_class", "==", "\"All\"", ":", "\n", "            ", "self", ".", "_current_dt_cls_ids", "=", "self", ".", "dt_image_idxes", "\n", "", "else", ":", "\n", "            ", "self", ".", "_current_dt_cls_ids", "=", "[", "\n", "anno", "[", "\"image_idx\"", "]", "[", "0", "]", "for", "anno", "in", "annos", "\n", "if", "anno", "[", "\"name\"", "]", "==", "current_class", "\n", "]", "\n", "", "self", ".", "_current_dt_cls_idx", "=", "0", "\n", "\"\"\"\n        if self.kitti_infos is not None:\n            t = time.time()\n            gt_annos = [info[\"annos\"] for info in self.kitti_infos]\n            self.message(get_official_eval_result(gt_annos, dt_annos, 0))\n            self.message(f\"eval use time: {time.time() - t:.4f}\")\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.sample_to_current_data": [[881, 951], ["viewer.KittiViewer.error", "numpy.ones", "viewer.KittiViewer.db_sampler.sample_all", "viewer.KittiViewer.error", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.error", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.sample_ops.DataBaseSamplerV2.sample_all", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.error"], ["", "def", "sample_to_current_data", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "kitti_info", "is", "None", ":", "\n", "            ", "self", ".", "error", "(", "\"you must load infos and choose a existing image idx first.\"", ")", "\n", "return", "\n", "\n", "", "sampled_difficulty", "=", "[", "]", "\n", "# class_names = [\"Car\"]", "\n", "rect", "=", "self", ".", "kitti_info", "[", "'calib/R0_rect'", "]", "\n", "P2", "=", "self", ".", "kitti_info", "[", "'calib/P2'", "]", "\n", "Trv2c", "=", "self", ".", "kitti_info", "[", "'calib/Tr_velo_to_cam'", "]", "\n", "num_features", "=", "4", "\n", "if", "'pointcloud_num_features'", "in", "self", ".", "kitti_info", ":", "\n", "            ", "num_features", "=", "self", ".", "kitti_info", "[", "'pointcloud_num_features'", "]", "\n", "\n", "# class_names = self.w_config.get(\"UsedClass\")", "\n", "# class_names_group = [[\"trailer\", \"tractor\"]]", "\n", "\n", "", "if", "self", ".", "db_sampler", "is", "not", "None", ":", "\n", "# gt_boxes_mask = np.array(", "\n", "#     [n in class_names for n in self.gt_names], dtype=np.bool_)", "\n", "            ", "gt_boxes_mask", "=", "np", ".", "ones", "(", "(", "self", ".", "gt_names", ".", "shape", "[", "0", "]", ",", ")", ",", "np", ".", "bool_", ")", "\n", "sampled_dict", "=", "self", ".", "db_sampler", ".", "sample_all", "(", "\n", "self", ".", "root_path", ",", "\n", "self", ".", "gt_boxes", ",", "\n", "self", ".", "gt_names", ",", "\n", "num_features", ",", "\n", "False", ",", "\n", "gt_group_ids", "=", "self", ".", "group_ids", ",", "\n", "rect", "=", "rect", ",", "\n", "Trv2c", "=", "Trv2c", ",", "\n", "P2", "=", "P2", ")", "\n", "if", "sampled_dict", "is", "not", "None", ":", "\n", "                ", "sampled_gt_names", "=", "sampled_dict", "[", "\"gt_names\"", "]", "\n", "sampled_gt_boxes", "=", "sampled_dict", "[", "\"gt_boxes\"", "]", "\n", "sampled_points", "=", "sampled_dict", "[", "\"points\"", "]", "\n", "sampled_gt_masks", "=", "sampled_dict", "[", "\"gt_masks\"", "]", "\n", "sampled_difficulty", "=", "sampled_dict", "[", "\"difficulty\"", "]", "\n", "# gt_names = gt_names[gt_boxes_mask].tolist()", "\n", "self", ".", "gt_names", "=", "np", ".", "concatenate", "(", "\n", "[", "self", ".", "gt_names", ",", "sampled_gt_names", "]", ",", "axis", "=", "0", ")", "\n", "# gt_names += [s[\"name\"] for s in sampled]", "\n", "self", ".", "gt_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "self", ".", "gt_boxes", ",", "sampled_gt_boxes", "]", ")", "\n", "gt_boxes_mask", "=", "np", ".", "concatenate", "(", "\n", "[", "gt_boxes_mask", ",", "sampled_gt_masks", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "difficulty", "=", "np", ".", "concatenate", "(", "\n", "[", "self", ".", "difficulty", ",", "sampled_difficulty", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "points", "=", "np", ".", "concatenate", "(", "\n", "[", "sampled_points", ",", "self", ".", "points", "]", ",", "axis", "=", "0", ")", "\n", "sampled_group_ids", "=", "sampled_dict", "[", "\"group_ids\"", "]", "\n", "if", "self", ".", "group_ids", "is", "not", "None", ":", "\n", "                    ", "self", ".", "group_ids", "=", "np", ".", "concatenate", "(", "\n", "[", "self", ".", "group_ids", ",", "sampled_group_ids", "]", ")", "\n", "\n", "", "", "'''\n            prep.noise_per_object_(\n                self.gt_boxes,\n                self.points,\n                gt_boxes_mask,\n                rotation_perturb=[-1.57, 1.57],\n                center_noise_std=[1.0, 1.0, 1.0],\n                num_try=50)'''", "\n", "# should remove unrelated objects after noise per object", "\n", "self", ".", "gt_boxes", "=", "self", ".", "gt_boxes", "[", "gt_boxes_mask", "]", "\n", "self", ".", "gt_names", "=", "self", ".", "gt_names", "[", "gt_boxes_mask", "]", "\n", "self", ".", "difficulty", "=", "self", ".", "difficulty", "[", "gt_boxes_mask", "]", "\n", "if", "self", ".", "group_ids", "is", "not", "None", ":", "\n", "                ", "self", ".", "group_ids", "=", "self", ".", "group_ids", "[", "gt_boxes_mask", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "error", "(", "\"you enable sample but not provide a database\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.data_augmentation": [[952, 975], ["numpy.random.randint", "numpy.random.seed", "viewer.KittiViewer.info", "time.time", "viewer.KittiViewer.w_config.get", "second.noise_per_object_v3_", "second.noise_per_object_v3_", "second.noise_per_object_v3_", "viewer.KittiViewer.info", "viewer.KittiViewer.error", "time.time"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.info", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.noise_per_object_v3_", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.noise_per_object_v3_", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.noise_per_object_v3_", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.info", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.error"], ["", "", "def", "data_augmentation", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "kitti_info", "is", "None", ":", "\n", "            ", "self", ".", "error", "(", "\"you must load infos and choose a existing image idx first.\"", ")", "\n", "return", "\n", "\n", "", "seed", "=", "np", ".", "random", ".", "randint", "(", "5000000", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "# seed = 1798767", "\n", "self", ".", "info", "(", "f\"prep random seed: {seed}\"", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "group_ids", "=", "None", "\n", "if", "self", ".", "w_config", ".", "get", "(", "\"GroupNoisePerObject\"", ")", ":", "\n", "            ", "group_ids", "=", "self", ".", "group_ids", "\n", "", "prep", ".", "noise_per_object_v3_", "(", "\n", "self", ".", "gt_boxes", ",", "\n", "self", ".", "points", ",", "\n", "# rotation_perturb=0.0,", "\n", "# center_noise_std=0,", "\n", "global_random_rot_range", "=", "[", "np", ".", "pi", "/", "4", ",", "np", ".", "pi", "/", "4", "*", "3", "]", ",", "\n", "# global_random_rot_range=[0, 6.28],", "\n", "group_ids", "=", "group_ids", ",", "\n", "num_try", "=", "100", ")", "\n", "self", ".", "info", "(", "\"noise time\"", ",", "time", ".", "time", "(", ")", "-", "t", ")", "\n", "# self.gt_boxes, self.points = prep.random_flip(", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.draw_gt_in_image": [[986, 1006], ["second.box_lidar_to_camera", "second.box_lidar_to_camera", "second.box_lidar_to_camera", "second.center_to_corner_box3d", "second.center_to_corner_box3d", "second.center_to_corner_box3d", "boxes_3d.reshape.reshape.reshape", "second.project_to_image", "second.project_to_image", "second.project_to_image", "boxes_3d_p2.reshape.reshape.reshape", "viewer.KittiViewer.error", "second.utils.bbox_plot.draw_3d_bbox_in_ax", "second.utils.bbox_plot.draw_3d_bbox_in_ax", "second.utils.bbox_plot.draw_3d_bbox_in_ax"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box_lidar_to_camera", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box_lidar_to_camera", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box_lidar_to_camera", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.project_to_image", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.project_to_image", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.project_to_image", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.error", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.draw_3d_bbox_in_ax", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.draw_3d_bbox_in_ax", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.draw_3d_bbox_in_ax"], ["", "def", "draw_gt_in_image", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "kitti_info", "is", "None", ":", "\n", "            ", "self", ".", "error", "(", "\"you must load infos and choose a existing image idx first.\"", ")", "\n", "return", "\n", "", "if", "self", ".", "gt_boxes", "is", "None", ":", "\n", "            ", "return", "\n", "", "rect", "=", "self", ".", "kitti_info", "[", "'calib/R0_rect'", "]", "\n", "P2", "=", "self", ".", "kitti_info", "[", "'calib/P2'", "]", "\n", "Trv2c", "=", "self", ".", "kitti_info", "[", "'calib/Tr_velo_to_cam'", "]", "\n", "gt_boxes_camera", "=", "box_np_ops", ".", "box_lidar_to_camera", "(", "\n", "self", ".", "gt_boxes", ",", "rect", ",", "Trv2c", ")", "\n", "boxes_3d", "=", "box_np_ops", ".", "center_to_corner_box3d", "(", "gt_boxes_camera", "[", ":", ",", ":", "3", "]", ",", "\n", "gt_boxes_camera", "[", ":", ",", "3", ":", "6", "]", ",", "\n", "gt_boxes_camera", "[", ":", ",", "6", "]", ")", "\n", "boxes_3d", "=", "boxes_3d", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "\n", "boxes_3d_p2", "=", "box_np_ops", ".", "project_to_image", "(", "boxes_3d", ",", "P2", ")", "\n", "boxes_3d_p2", "=", "boxes_3d_p2", ".", "reshape", "(", "[", "-", "1", ",", "8", ",", "2", "]", ")", "\n", "if", "self", ".", "current_image", "is", "not", "None", ":", "\n", "            ", "bbox_plot", ".", "draw_3d_bbox_in_ax", "(", "\n", "self", ".", "w_plt", ".", "ax", ",", "boxes_3d_p2", ",", "colors", "=", "'b'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.draw_detection": [[1007, 1061], ["second.data.kitti_common.remove_low_score", "second.data.kitti_common.remove_low_score", "second.data.kitti_common.remove_low_score", "viewer.kitti_anno_to_corners", "second.lidar_to_camera", "second.lidar_to_camera", "second.lidar_to_camera", "dt_boxes_corners_cam.reshape.reshape.reshape", "second.project_to_image", "second.project_to_image", "second.project_to_image", "dt_boxes_corners_cam_p2.reshape.reshape.reshape", "numpy.tile", "viewer.KittiViewer.w_pc_viewer.boxes3d", "viewer.KittiViewer.error", "viewer.KittiViewer.w_config.get", "viewer.KittiViewer.w_config.get", "viewer.KittiViewer.w_config.get", "viewer._riou3d_shapely", "viewer.KittiViewer.w_config.get", "viewer.KittiViewer.w_config.get", "numpy.concatenate", "viewer.KittiViewer.w_config.get", "_riou3d_shapely.max", "numpy.zeros", "viewer.KittiViewer.w_pc_viewer.labels", "numpy.array", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.remove_low_score", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.remove_low_score", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.remove_low_score", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.kitti_anno_to_corners", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.lidar_to_camera", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.lidar_to_camera", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.lidar_to_camera", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.project_to_image", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.project_to_image", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.project_to_image", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.boxes3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.error", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer._riou3d_shapely", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.labels"], ["", "", "def", "draw_detection", "(", "self", ",", "detection_anno", ",", "label_color", "=", "GLColor", ".", "Blue", ")", ":", "\n", "        ", "if", "self", ".", "kitti_info", "is", "None", ":", "\n", "            ", "self", ".", "error", "(", "\"you must load infos and choose a existing image idx first.\"", ")", "\n", "return", "\n", "\n", "", "dt_box_color", "=", "self", ".", "w_config", ".", "get", "(", "\"DTBoxColor\"", ")", "[", ":", "3", "]", "\n", "dt_box_color", "=", "(", "*", "dt_box_color", ",", "self", ".", "w_config", ".", "get", "(", "\"DTBoxAlpha\"", ")", ")", "\n", "\n", "rect", "=", "self", ".", "kitti_info", "[", "'calib/R0_rect'", "]", "\n", "P2", "=", "self", ".", "kitti_info", "[", "'calib/P2'", "]", "\n", "Trv2c", "=", "self", ".", "kitti_info", "[", "'calib/Tr_velo_to_cam'", "]", "\n", "# detection_anno = kitti.remove_low_height(detection_anno, 25)", "\n", "detection_anno", "=", "kitti", ".", "remove_low_score", "(", "detection_anno", ",", "self", ".", "w_config", ".", "get", "(", "\"DTScoreThreshold\"", ")", ")", "\n", "\n", "dt_bboxes", "=", "detection_anno", "[", "\"bbox\"", "]", "\n", "\n", "dt_boxes_corners", ",", "scores", ",", "dt_box_lidar", "=", "kitti_anno_to_corners", "(", "\n", "self", ".", "kitti_info", ",", "detection_anno", ")", "\n", "if", "self", ".", "gt_boxes", "is", "not", "None", ":", "\n", "            ", "iou", "=", "_riou3d_shapely", "(", "self", ".", "gt_boxes", ",", "dt_box_lidar", ")", "\n", "if", "iou", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "                ", "dt_to_gt_box_iou", "=", "iou", ".", "max", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "dt_to_gt_box_iou", "=", "np", ".", "zeros", "(", "[", "0", ",", "0", "]", ")", "\n", "", "", "num_dt", "=", "dt_box_lidar", ".", "shape", "[", "0", "]", "\n", "dt_boxes_corners_cam", "=", "box_np_ops", ".", "lidar_to_camera", "(", "\n", "dt_boxes_corners", ",", "rect", ",", "Trv2c", ")", "\n", "dt_boxes_corners_cam", "=", "dt_boxes_corners_cam", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "\n", "dt_boxes_corners_cam_p2", "=", "box_np_ops", ".", "project_to_image", "(", "\n", "dt_boxes_corners_cam", ",", "P2", ")", "\n", "dt_boxes_corners_cam_p2", "=", "dt_boxes_corners_cam_p2", ".", "reshape", "(", "[", "-", "1", ",", "8", ",", "2", "]", ")", "\n", "dt_labels", "=", "detection_anno", "[", "\"name\"", "]", "\n", "\n", "dt_scores_text", "=", "None", "\n", "if", "scores", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "gt_boxes", "is", "not", "None", ":", "\n", "                ", "dt_scores_text", "=", "[", "\n", "f'score={s:.2f}, iou={i:.2f}'", "\n", "for", "s", ",", "i", "in", "zip", "(", "scores", ",", "dt_to_gt_box_iou", ")", "\n", "]", "\n", "", "else", ":", "\n", "                ", "dt_scores_text", "=", "[", "\n", "f'score={s:.2f}, z={z:.2f}'", "\n", "for", "s", ",", "z", "in", "zip", "(", "scores", ",", "dt_box_lidar", "[", ":", ",", "2", "]", ")", "\n", "]", "\n", "", "if", "self", ".", "w_config", ".", "get", "(", "\"DrawDTLabels\"", ")", ":", "\n", "                ", "self", ".", "w_pc_viewer", ".", "labels", "(", "\"dt_boxes/labels\"", ",", "\n", "dt_boxes_corners", "[", ":", ",", "1", ",", ":", "]", ",", "dt_scores_text", ",", "\n", "label_color", ",", "15", ")", "\n", "", "", "dt_box_color", "=", "np", ".", "tile", "(", "np", ".", "array", "(", "dt_box_color", ")", "[", "np", ".", "newaxis", ",", "...", "]", ",", "[", "num_dt", ",", "1", "]", ")", "\n", "if", "self", ".", "w_config", ".", "get", "(", "\"DTScoreAsAlpha\"", ")", "and", "scores", "is", "not", "None", ":", "\n", "            ", "dt_box_color", "=", "np", ".", "concatenate", "(", "[", "dt_box_color", "[", ":", ",", ":", "3", "]", ",", "scores", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "", "self", ".", "w_pc_viewer", ".", "boxes3d", "(", "\"dt_boxes\"", ",", "dt_boxes_corners", ",", "dt_box_color", ",", "\n", "self", ".", "w_config", ".", "get", "(", "\"DTBoxLineWidth\"", ")", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.plot_gt_boxes_in_pointcloud": [[1062, 1090], ["viewer.KittiViewer.error", "viewer.KittiViewer.difficulty.tolist", "list", "second.center_to_corner_box3d", "second.center_to_corner_box3d", "second.center_to_corner_box3d", "viewer.KittiViewer.w_pc_viewer.boxes3d", "viewer.KittiViewer.w_config.get", "viewer.KittiViewer.w_config.get", "viewer.KittiViewer.w_config.get", "range", "viewer.KittiViewer.w_pc_viewer.labels", "zip"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.error", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.boxes3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.labels"], ["", "def", "plot_gt_boxes_in_pointcloud", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "kitti_info", "is", "None", ":", "\n", "            ", "self", ".", "error", "(", "\"you must load infos and choose a existing image idx first.\"", ")", "\n", "return", "\n", "", "if", "'annos'", "in", "self", ".", "kitti_info", ":", "\n", "            ", "gt_box_color", "=", "self", ".", "w_config", ".", "get", "(", "\"GTBoxColor\"", ")", "[", ":", "3", "]", "\n", "gt_box_color", "=", "(", "*", "gt_box_color", ",", "self", ".", "w_config", ".", "get", "(", "\"GTBoxAlpha\"", ")", ")", "\n", "diff", "=", "self", ".", "difficulty", ".", "tolist", "(", ")", "\n", "diff_to_name", "=", "{", "-", "1", ":", "\"unk\"", ",", "0", ":", "\"easy\"", ",", "1", ":", "\"moderate\"", ",", "2", ":", "\"hard\"", "}", "\n", "diff_names", "=", "[", "diff_to_name", "[", "d", "]", "for", "d", "in", "diff", "]", "\n", "label_idx", "=", "list", "(", "range", "(", "self", ".", "gt_names", ".", "shape", "[", "0", "]", ")", ")", "\n", "labels_", "=", "[", "\n", "f'{i}:{l}, {d}'", "\n", "for", "i", ",", "l", ",", "d", "in", "zip", "(", "label_idx", ",", "self", ".", "gt_names", ",", "diff_names", ")", "\n", "]", "\n", "boxes_corners", "=", "box_np_ops", ".", "center_to_corner_box3d", "(", "\n", "self", ".", "gt_boxes", "[", ":", ",", ":", "3", "]", ",", "\n", "self", ".", "gt_boxes", "[", ":", ",", "3", ":", "6", "]", ",", "\n", "self", ".", "gt_boxes", "[", ":", ",", "6", "]", ",", "\n", "origin", "=", "[", "0.5", ",", "0.5", ",", "0", "]", ",", "\n", "axis", "=", "2", ")", "\n", "# print(self.gt_boxes[:, 6])", "\n", "# print(self.gt_boxes[:, :3])", "\n", "self", ".", "w_pc_viewer", ".", "boxes3d", "(", "\"gt_boxes\"", ",", "boxes_corners", ",", "gt_box_color", ",", "\n", "3.0", ",", "1.0", ")", "\n", "if", "self", ".", "w_config", ".", "get", "(", "\"DrawGTLabels\"", ")", ":", "\n", "                ", "self", ".", "w_pc_viewer", ".", "labels", "(", "\"gt_boxes/labels\"", ",", "boxes_corners", "[", ":", ",", "0", ",", ":", "]", ",", "\n", "labels_", ",", "GLColor", ".", "Green", ",", "15", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.plot_pointcloud": [[1091, 1139], ["numpy.tile", "numpy.full", "viewer.KittiViewer.w_pc_viewer.draw_bounding_box", "viewer.KittiViewer.image_idxes.index", "viewer.KittiViewer.w_pc_viewer.remove", "viewer.KittiViewer.w_pc_viewer.remove", "viewer.KittiViewer.w_config.get", "viewer.KittiViewer.w_pc_viewer.scatter", "viewer.KittiViewer.error", "viewer.KittiViewer.w_config.get", "viewer.KittiViewer.w_config.get", "numpy.array", "viewer.KittiViewer.w_config.get", "second.points_in_rbbox().any", "second.points_in_rbbox().any", "second.points_in_rbbox().any", "viewer.KittiViewer.w_config.get", "viewer.KittiViewer.w_config.get", "viewer.KittiViewer.w_config.get", "viewer.KittiViewer.draw_detection", "viewer.KittiViewer.w_config.get", "viewer.KittiViewer.error", "numpy.concatenate", "second.points_in_rbbox", "second.points_in_rbbox", "second.points_in_rbbox"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiPointCloudView.draw_bounding_box", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.remove", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.remove", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.scatter", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.error", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.draw_detection", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.error", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.points_in_rbbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.points_in_rbbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.points_in_rbbox"], ["", "", "", "def", "plot_pointcloud", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "kitti_info", "is", "None", ":", "\n", "            ", "self", ".", "error", "(", "\"you must load infos and choose a existing image idx first.\"", ")", "\n", "return", "\n", "\n", "", "point_color", "=", "self", ".", "w_config", ".", "get", "(", "\"PointColor\"", ")", "[", ":", "3", "]", "\n", "point_color", "=", "(", "*", "point_color", ",", "self", ".", "w_config", ".", "get", "(", "\"PointAlpha\"", ")", ")", "\n", "point_color", "=", "np", ".", "tile", "(", "np", ".", "array", "(", "point_color", ")", ",", "[", "self", ".", "points", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "\n", "\n", "# self.w_pc_viewer.reset_camera()", "\n", "point_size", "=", "np", ".", "full", "(", "\n", "[", "self", ".", "points", ".", "shape", "[", "0", "]", "]", ",", "\n", "self", ".", "w_config", ".", "get", "(", "\"PointSize\"", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "# self.w_pc_viewer.draw_point_cloud(self.points, color=points_rgb, with_reflectivity=False, size=0.1)", "\n", "self", ".", "w_pc_viewer", ".", "draw_bounding_box", "(", ")", "\n", "idx", "=", "self", ".", "image_idxes", ".", "index", "(", "self", ".", "kitti_info", "[", "\"image_idx\"", "]", ")", "\n", "if", "'annos'", "in", "self", ".", "kitti_info", ":", "\n", "# poses = np.zeros([self.gt_boxes.shape[0], 3])", "\n", "# self.w_pc_viewer.circles(", "\n", "#     \"circles\", poses, np.linalg.norm(", "\n", "#         self.gt_boxes[:, :3], axis=-1))", "\n", "# self.w_pc_viewer.draw_anchors_v1(", "\n", "#     self.gt_boxes, self.points, gt_names=gt_names)", "\n", "# self.w_pc_viewer.draw_frustum(bboxes, rect, Trv2c, P2)", "\n", "# self.w_pc_viewer.draw_cropped_frustum(bboxes, rect, Trv2c, P2)", "\n", "            ", "gt_point_mask", "=", "box_np_ops", ".", "points_in_rbbox", "(", "self", ".", "points", ",", "\n", "self", ".", "gt_boxes", ")", ".", "any", "(", "1", ")", "\n", "point_size", "[", "gt_point_mask", "]", "=", "self", ".", "w_config", ".", "get", "(", "\"GTPointSize\"", ")", "\n", "gt_point_color", "=", "self", ".", "w_config", ".", "get", "(", "\"GTPointColor\"", ")", "\n", "gt_point_color", "=", "(", "*", "gt_point_color", "[", ":", "3", "]", ",", "\n", "self", ".", "w_config", ".", "get", "(", "\"GTPointAlpha\"", ")", ")", "\n", "point_color", "[", "gt_point_mask", "]", "=", "gt_point_color", "\n", "", "self", ".", "w_pc_viewer", ".", "remove", "(", "\"dt_boxes/labels\"", ")", "\n", "self", ".", "w_pc_viewer", ".", "remove", "(", "\"dt_boxes\"", ")", "\n", "if", "self", ".", "detection_annos", "is", "not", "None", "and", "self", ".", "w_config", ".", "get", "(", "\"DrawDTBoxes\"", ")", ":", "\n", "            ", "detection_anno", "=", "self", ".", "detection_annos", "[", "idx", "]", "\n", "self", ".", "draw_detection", "(", "detection_anno", ")", "\n", "", "if", "self", ".", "w_config", ".", "get", "(", "\"WithReflectivity\"", ")", ":", "\n", "            ", "if", "self", ".", "points", ".", "shape", "[", "1", "]", "<", "4", ":", "\n", "                ", "self", ".", "error", "(", "\"Your pointcloud don't contain reflectivity.\"", ")", "\n", "", "else", ":", "\n", "                ", "point_color", "=", "np", ".", "concatenate", "(", "\n", "[", "point_color", "[", ":", ",", ":", "3", "]", ",", "self", ".", "points", "[", ":", ",", "3", ":", "4", "]", "*", "0.8", "+", "0.2", "]", ",", "\n", "axis", "=", "1", ")", "\n", "\n", "", "", "self", ".", "w_pc_viewer", ".", "scatter", "(", "\n", "\"pointcloud\"", ",", "self", ".", "points", "[", ":", ",", ":", "3", "]", ",", "point_color", ",", "size", "=", "point_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.load_info": [[1140, 1216], ["viewer.KittiViewer.json_setting.set", "viewer.KittiViewer.image_idxes.index", "str", "numpy.fromfile().reshape", "viewer.KittiViewer.w_image_save_path.text", "str", "viewer.KittiViewer.w_image_save_path.setText", "viewer.KittiViewer.json_setting.set", "viewer.KittiViewer.w_config.get", "viewer.KittiViewer.w_config.get", "viewer.KittiViewer.error", "viewer.KittiViewer.error", "str", "viewer.KittiViewer.message", "viewer.KittiViewer.w_config.get", "len", "numpy.concatenate", "second.box_camera_to_lidar", "second.box_camera_to_lidar", "second.box_camera_to_lidar", "viewer.KittiViewer.sample_to_current_data", "viewer.KittiViewer.data_augmentation", "io.imread", "skimage.io.imread", "skimage.io.imread", "numpy.fromfile", "second.remove_outside_points", "second.remove_outside_points", "second.remove_outside_points", "str", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.set", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.GLTextItem.setText", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.set", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.error", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.error", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.message", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box_camera_to_lidar", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box_camera_to_lidar", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box_camera_to_lidar", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.sample_to_current_data", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.data_augmentation", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.remove_outside_points", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.remove_outside_points", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.remove_outside_points"], ["", "def", "load_info", "(", "self", ",", "image_idx", ")", ":", "\n", "        ", "if", "self", ".", "kitti_infos", "is", "None", ":", "\n", "            ", "self", ".", "error", "(", "\"you must load infos first.\"", ")", "\n", "return", "\n", "\n", "", "if", "image_idx", "not", "in", "self", ".", "image_idxes", ":", "\n", "            ", "self", ".", "error", "(", "f\"index{image_idx} not exist.\"", ")", "\n", "return", "False", "\n", "", "self", ".", "json_setting", ".", "set", "(", "\"image_idx\"", ",", "str", "(", "image_idx", ")", ")", "\n", "idx", "=", "self", ".", "image_idxes", ".", "index", "(", "image_idx", ")", "\n", "self", ".", "kitti_info", "=", "self", ".", "kitti_infos", "[", "idx", "]", "\n", "if", "\"timestamp\"", "in", "self", ".", "kitti_info", ":", "\n", "            ", "self", ".", "message", "(", "\"timestamp\"", ",", "self", ".", "kitti_info", "[", "\"timestamp\"", "]", ")", "\n", "", "image", "=", "None", "\n", "if", "'img_path'", "in", "self", ".", "kitti_info", ":", "\n", "            ", "img_path", "=", "self", ".", "kitti_info", "[", "'img_path'", "]", "\n", "if", "img_path", "!=", "\"\"", ":", "\n", "                ", "image", "=", "io", ".", "imread", "(", "str", "(", "self", ".", "root_path", "/", "img_path", ")", ")", "\n", "self", ".", "current_image", "=", "image", "\n", "\n", "", "else", ":", "\n", "                ", "self", ".", "current_image", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "current_image", "=", "None", "\n", "", "v_path", "=", "str", "(", "self", ".", "root_path", "/", "self", ".", "kitti_info", "[", "'velodyne_path'", "]", ")", "\n", "num_features", "=", "4", "\n", "if", "'pointcloud_num_features'", "in", "self", ".", "kitti_info", ":", "\n", "            ", "num_features", "=", "self", ".", "kitti_info", "[", "'pointcloud_num_features'", "]", "\n", "\n", "", "points", "=", "np", ".", "fromfile", "(", "\n", "v_path", ",", "dtype", "=", "np", ".", "float32", ",", "count", "=", "-", "1", ")", ".", "reshape", "(", "[", "-", "1", ",", "num_features", "]", ")", "\n", "self", ".", "points", "=", "points", "\n", "rect", "=", "self", ".", "kitti_info", "[", "'calib/R0_rect'", "]", "\n", "P2", "=", "self", ".", "kitti_info", "[", "'calib/P2'", "]", "\n", "Trv2c", "=", "self", ".", "kitti_info", "[", "'calib/Tr_velo_to_cam'", "]", "\n", "image_shape", "=", "None", "\n", "if", "'img_shape'", "in", "self", ".", "kitti_info", ":", "\n", "            ", "image_shape", "=", "self", ".", "kitti_info", "[", "'img_shape'", "]", "\n", "# self.info(\"num_points before remove:\", self.points.shape[0])", "\n", "if", "self", ".", "w_config", ".", "get", "(", "\"RemoveOutsidePoint\"", ")", ":", "\n", "                ", "self", ".", "points", "=", "box_np_ops", ".", "remove_outside_points", "(", "\n", "self", ".", "points", ",", "rect", ",", "Trv2c", ",", "P2", ",", "image_shape", ")", "\n", "# self.info(\"num_points after remove:\", self.points.shape[0])", "\n", "", "", "img_path", "=", "self", ".", "w_image_save_path", ".", "text", "(", ")", "\n", "img_path", "=", "str", "(", "Path", "(", "img_path", ")", ".", "parent", "/", "f\"{image_idx}.jpg\"", ")", "\n", "self", ".", "w_image_save_path", ".", "setText", "(", "img_path", ")", "\n", "self", ".", "json_setting", ".", "set", "(", "\"save_image_path\"", ",", "img_path", ")", "\n", "\n", "if", "'annos'", "in", "self", ".", "kitti_info", ":", "\n", "            ", "annos", "=", "self", ".", "kitti_info", "[", "'annos'", "]", "\n", "# annos = kitti.filter_kitti_anno(annos,", "\n", "#                                 self.w_config.get(\"UsedClass\"))", "\n", "labels", "=", "annos", "[", "'name'", "]", "\n", "num_obj", "=", "len", "(", "[", "n", "for", "n", "in", "annos", "[", "'name'", "]", "if", "n", "!=", "'DontCare'", "]", ")", "\n", "# print(annos[\"group_ids\"].shape)", "\n", "dims", "=", "annos", "[", "'dimensions'", "]", "[", ":", "num_obj", "]", "\n", "loc", "=", "annos", "[", "'location'", "]", "[", ":", "num_obj", "]", "\n", "rots", "=", "annos", "[", "'rotation_y'", "]", "[", ":", "num_obj", "]", "\n", "self", ".", "difficulty", "=", "annos", "[", "\"difficulty\"", "]", "[", ":", "num_obj", "]", "\n", "self", ".", "gt_names", "=", "labels", "[", ":", "num_obj", "]", "\n", "gt_boxes_camera", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "self", ".", "gt_boxes", "=", "box_np_ops", ".", "box_camera_to_lidar", "(", "\n", "gt_boxes_camera", ",", "rect", ",", "Trv2c", ")", "\n", "\n", "if", "'group_ids'", "in", "annos", ":", "\n", "                ", "self", ".", "group_ids", "=", "annos", "[", "'group_ids'", "]", "[", ":", "num_obj", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "gt_boxes", "=", "None", "\n", "self", ".", "gt_names", "=", "None", "\n", "self", ".", "difficulty", "=", "None", "\n", "self", ".", "group_ids", "=", "None", "\n", "", "if", "self", ".", "w_config", ".", "get", "(", "\"EnableSample\"", ")", ":", "\n", "            ", "self", ".", "sample_to_current_data", "(", ")", "\n", "", "if", "self", ".", "w_config", ".", "get", "(", "\"EnableAugmentation\"", ")", ":", "\n", "            ", "self", ".", "data_augmentation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.plot_image": [[1217, 1234], ["viewer.KittiViewer.error", "viewer.KittiViewer.w_plt.ax.imshow", "second.data.kitti_common.filter_kitti_anno", "second.data.kitti_common.filter_kitti_anno", "second.data.kitti_common.filter_kitti_anno", "len", "second.utils.bbox_plot.draw_bbox_in_ax", "second.utils.bbox_plot.draw_bbox_in_ax", "second.utils.bbox_plot.draw_bbox_in_ax", "viewer.KittiViewer.w_config.get", "range", "len"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.error", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.filter_kitti_anno", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.filter_kitti_anno", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.filter_kitti_anno", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.draw_bbox_in_ax", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.draw_bbox_in_ax", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.draw_bbox_in_ax", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get"], ["", "", "def", "plot_image", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "kitti_info", "is", "None", ":", "\n", "            ", "self", ".", "error", "(", "\"you need to load the info first before plot image\"", ")", "\n", "return", "False", "\n", "", "if", "self", ".", "current_image", "is", "not", "None", ":", "\n", "            ", "self", ".", "w_plt", ".", "ax", ".", "imshow", "(", "self", ".", "current_image", ")", "\n", "if", "'annos'", "in", "self", ".", "kitti_info", ":", "\n", "                ", "annos", "=", "self", ".", "kitti_info", "[", "'annos'", "]", "\n", "annos", "=", "kitti", ".", "filter_kitti_anno", "(", "annos", ",", "\n", "self", ".", "w_config", ".", "get", "(", "\"UsedClass\"", ")", ")", "\n", "labels", "=", "annos", "[", "'name'", "]", "\n", "num_obj", "=", "len", "(", "[", "n", "for", "n", "in", "annos", "[", "'name'", "]", "if", "n", "!=", "'DontCare'", "]", ")", "\n", "bbox_plot", ".", "draw_bbox_in_ax", "(", "\n", "self", ".", "w_plt", ".", "ax", ",", "\n", "annos", "[", "'bbox'", "]", ",", "\n", "edgecolors", "=", "[", "'g'", "]", "*", "num_obj", "+", "[", "'b'", "]", "*", "num_obj", ",", "\n", "labels", "=", "[", "f'{i}: {labels[i]}'", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.plot_all": [[1235, 1248], ["viewer.KittiViewer.w_plt.reset_plot", "viewer.KittiViewer.load_info", "viewer.KittiViewer.plot_image", "viewer.KittiViewer.draw_gt_in_image", "viewer.KittiViewer.w_plt.draw", "viewer.KittiViewer.plot_pointcloud", "viewer.KittiViewer.w_config.get", "viewer.KittiViewer.w_config.get", "viewer.KittiViewer.plot_gt_boxes_in_pointcloud", "viewer.KittiViewer.w_pc_viewer.draw_voxels"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.MatPlotLibWidget.reset_plot", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.load_info", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.plot_image", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.draw_gt_in_image", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.plot_pointcloud", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.plot_gt_boxes_in_pointcloud", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiPointCloudView.draw_voxels"], ["", "", "", "def", "plot_all", "(", "self", ",", "image_idx", ")", ":", "\n", "        ", "self", ".", "w_plt", ".", "reset_plot", "(", ")", "\n", "self", ".", "load_info", "(", "image_idx", ")", "\n", "self", ".", "plot_image", "(", ")", "\n", "self", ".", "draw_gt_in_image", "(", ")", "\n", "self", ".", "w_plt", ".", "draw", "(", ")", "# this isn't supported in ubuntu.", "\n", "self", ".", "plot_pointcloud", "(", ")", "\n", "if", "self", ".", "w_config", ".", "get", "(", "\"DrawGTBoxes\"", ")", ":", "\n", "            ", "self", ".", "plot_gt_boxes_in_pointcloud", "(", ")", "\n", "", "if", "self", ".", "w_config", ".", "get", "(", "\"DrawVoxels\"", ")", ":", "\n", "            ", "self", ".", "w_pc_viewer", ".", "draw_voxels", "(", "self", ".", "points", ",", "self", ".", "gt_boxes", ")", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.on_plotButtonPressed": [[1249, 1256], ["int", "viewer.KittiViewer.plot_all", "viewer.KittiViewer.error", "viewer.KittiViewer.w_imgidx.text", "viewer.KittiViewer.image_idxes.index"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.plot_all", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.error"], ["", "def", "on_plotButtonPressed", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "kitti_infos", "is", "None", ":", "\n", "            ", "self", ".", "error", "(", "\"you must load Kitti Infos first.\"", ")", "\n", "return", "\n", "", "image_idx", "=", "int", "(", "self", ".", "w_imgidx", ".", "text", "(", ")", ")", "\n", "if", "self", ".", "plot_all", "(", "image_idx", ")", ":", "\n", "            ", "self", ".", "current_idx", "=", "self", ".", "image_idxes", ".", "index", "(", "image_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.closeEvent": [[1257, 1261], ["viewer.KittiViewer.w_config.dumps", "viewer.KittiViewer.json_setting.set", "super().closeEvent"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.dumps", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.set", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.closeEvent"], ["", "", "def", "closeEvent", "(", "self", ",", "event", ")", ":", "\n", "        ", "config_str", "=", "self", ".", "w_config", ".", "dumps", "(", ")", "\n", "self", ".", "json_setting", ".", "set", "(", "\"config\"", ",", "config_str", ")", "\n", "return", "super", "(", ")", ".", "closeEvent", "(", "event", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.on_configchanged": [[1262, 1293], ["viewer.KittiViewer.image_idxes.index", "viewer.KittiViewer.w_config.dumps", "viewer.KittiViewer.json_setting.set", "viewer.KittiViewer.w_config.get", "viewer.KittiViewer.w_pc_viewer.draw_voxels", "viewer.KittiViewer.w_pc_viewer.remove", "viewer.KittiViewer.plot_pointcloud", "viewer.KittiViewer.on_plotButtonPressed", "viewer.KittiViewer.plot_gt_boxes_in_pointcloud", "viewer.KittiViewer.w_config.get", "viewer.KittiViewer.draw_detection"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.dumps", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.set", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiPointCloudView.draw_voxels", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.remove", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.plot_pointcloud", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.on_plotButtonPressed", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.plot_gt_boxes_in_pointcloud", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.draw_detection"], ["", "def", "on_configchanged", "(", "self", ",", "msg", ")", ":", "\n", "# self.warning(msg.name, msg.value)", "\n", "# save config to file", "\n", "        ", "idx", "=", "self", ".", "image_idxes", ".", "index", "(", "self", ".", "kitti_info", "[", "\"image_idx\"", "]", ")", "\n", "config_str", "=", "self", ".", "w_config", ".", "dumps", "(", ")", "\n", "self", ".", "json_setting", ".", "set", "(", "\"config\"", ",", "config_str", ")", "\n", "pc_redraw_msgs", "=", "[", "\"PointSize\"", ",", "\"PointAlpha\"", ",", "\"GTPointSize\"", "]", "\n", "pc_redraw_msgs", "+=", "[", "\"GTPointAlpha\"", ",", "\"WithReflectivity\"", "]", "\n", "pc_redraw_msgs", "+=", "[", "\"PointColor\"", ",", "\"GTPointColor\"", "]", "\n", "box_redraw", "=", "[", "\"GTBoxColor\"", ",", "\"GTBoxAlpha\"", "]", "\n", "dt_redraw", "=", "[", "\"DTBoxColor\"", ",", "\"DTBoxAlpha\"", ",", "\"DrawDTLabels\"", ",", "\"DTScoreAsAlpha\"", ",", "\"DTScoreThreshold\"", ",", "\"DTBoxLineWidth\"", "]", "\n", "\n", "vx_redraw_msgs", "=", "[", "\"DrawPositiveVoxelsOnly\"", ",", "\"DrawVoxels\"", "]", "\n", "vx_redraw_msgs", "+=", "[", "\"PosVoxelColor\"", ",", "\"PosVoxelAlpha\"", "]", "\n", "vx_redraw_msgs", "+=", "[", "\"NegVoxelColor\"", ",", "\"NegVoxelAlpha\"", "]", "\n", "all_redraw_msgs", "=", "[", "\"RemoveOutsidePoint\"", "]", "\n", "if", "msg", ".", "name", "in", "vx_redraw_msgs", ":", "\n", "            ", "if", "self", ".", "w_config", ".", "get", "(", "\"DrawVoxels\"", ")", ":", "\n", "                ", "self", ".", "w_pc_viewer", ".", "draw_voxels", "(", "self", ".", "points", ",", "self", ".", "gt_boxes", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "w_pc_viewer", ".", "remove", "(", "\"voxels\"", ")", "\n", "", "", "elif", "msg", ".", "name", "in", "pc_redraw_msgs", ":", "\n", "            ", "self", ".", "plot_pointcloud", "(", ")", "\n", "", "elif", "msg", ".", "name", "in", "all_redraw_msgs", ":", "\n", "            ", "self", ".", "on_plotButtonPressed", "(", ")", "\n", "", "elif", "msg", ".", "name", "in", "box_redraw", ":", "\n", "            ", "self", ".", "plot_gt_boxes_in_pointcloud", "(", ")", "\n", "", "elif", "msg", ".", "name", "in", "dt_redraw", ":", "\n", "            ", "if", "self", ".", "detection_annos", "is", "not", "None", "and", "self", ".", "w_config", ".", "get", "(", "\"DrawDTBoxes\"", ")", ":", "\n", "                ", "detection_anno", "=", "self", ".", "detection_annos", "[", "idx", "]", "\n", "self", ".", "draw_detection", "(", "detection_anno", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.on_loadVxNetCkptPressed": [[1294, 1301], ["pathlib.Path", "viewer.KittiViewer.json_setting.set", "viewer.KittiViewer.inference_ctx.restore", "viewer.KittiViewer.info", "viewer.KittiViewer.w_vckpt_path.text", "viewer.KittiViewer.w_vckpt_path.text"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.set", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.restore", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.info"], ["", "", "", "def", "on_loadVxNetCkptPressed", "(", "self", ")", ":", "\n", "        ", "ckpt_path", "=", "Path", "(", "self", ".", "w_vckpt_path", ".", "text", "(", ")", ")", "\n", "self", ".", "json_setting", ".", "set", "(", "\"latest_vxnet_ckpt_path\"", ",", "\n", "self", ".", "w_vckpt_path", ".", "text", "(", ")", ")", "\n", "self", ".", "inference_ctx", ".", "restore", "(", "ckpt_path", ")", "\n", "# self.w_load_ckpt.setText(self.w_load_ckpt.text() + f\": {ckpt_path.stem}\")", "\n", "self", ".", "info", "(", "\"load VoxelNet ckpt succeed.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.on_BuildVxNetPressed": [[1302, 1308], ["second.pytorch.inference.TorchInferenceContext", "second.pytorch.inference.TorchInferenceContext", "second.pytorch.inference.TorchInferenceContext", "pathlib.Path", "viewer.KittiViewer.inference_ctx.build", "viewer.KittiViewer.json_setting.set", "viewer.KittiViewer.info", "viewer.KittiViewer.w_vconfig_path.text", "str"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.set", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.info"], ["", "def", "on_BuildVxNetPressed", "(", "self", ")", ":", "\n", "        ", "self", ".", "inference_ctx", "=", "TorchInferenceContext", "(", ")", "\n", "vconfig_path", "=", "Path", "(", "self", ".", "w_vconfig_path", ".", "text", "(", ")", ")", "\n", "self", ".", "inference_ctx", ".", "build", "(", "vconfig_path", ")", "\n", "self", ".", "json_setting", ".", "set", "(", "\"latest_vxnet_cfg_path\"", ",", "str", "(", "vconfig_path", ")", ")", "\n", "self", ".", "info", "(", "\"Build VoxelNet ckpt succeed.\"", ")", "\n", "# self.w_load_config.setText(self.w_load_config.text() + f\": {vconfig_path.stem}\")", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.on_InferenceVxNetPressed": [[1310, 1320], ["time.time", "viewer.KittiViewer.inference_ctx.get_inference_input_dict", "viewer.KittiViewer.info", "time.time", "viewer.KittiViewer.info", "viewer.KittiViewer.draw_detection", "viewer.KittiViewer.inference_ctx.ctx", "viewer.KittiViewer.inference_ctx.inference", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.get_inference_input_dict", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.info", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.info", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.draw_detection", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.ctx", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.inference"], ["", "def", "on_InferenceVxNetPressed", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "inputs", "=", "self", ".", "inference_ctx", ".", "get_inference_input_dict", "(", "\n", "self", ".", "kitti_info", ",", "self", ".", "points", ")", "\n", "self", ".", "info", "(", "\"input preparation time:\"", ",", "time", ".", "time", "(", ")", "-", "t", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "with", "self", ".", "inference_ctx", ".", "ctx", "(", ")", ":", "\n", "            ", "det_annos", "=", "self", ".", "inference_ctx", ".", "inference", "(", "inputs", ")", "\n", "", "self", ".", "info", "(", "\"detection time:\"", ",", "time", ".", "time", "(", ")", "-", "t", ")", "\n", "self", ".", "draw_detection", "(", "det_annos", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.on_LoadInferenceVxNetPressed": [[1321, 1325], ["viewer.KittiViewer.on_BuildVxNetPressed", "viewer.KittiViewer.on_loadVxNetCkptPressed", "viewer.KittiViewer.on_InferenceVxNetPressed"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.on_BuildVxNetPressed", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.on_loadVxNetCkptPressed", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.on_InferenceVxNetPressed"], ["", "def", "on_LoadInferenceVxNetPressed", "(", "self", ")", ":", "\n", "        ", "self", ".", "on_BuildVxNetPressed", "(", ")", "\n", "self", ".", "on_loadVxNetCkptPressed", "(", ")", "\n", "self", ".", "on_InferenceVxNetPressed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.on_EvalVxNetPressed": [[1326, 1357], ["time.time", "list", "viewer.KittiViewer.info", "viewer.KittiViewer.info", "viewer.KittiViewer.error", "viewer.KittiViewer.inference_ctx.ctx", "second.utils.progress_bar.list_bar", "second.utils.progress_bar.list_bar", "second.utils.progress_bar.list_bar", "second.utils.eval.get_official_eval_result", "second.utils.eval.get_official_eval_result", "second.utils.eval.get_official_eval_result", "numpy.fromfile().reshape", "viewer.KittiViewer.w_config.get", "viewer.KittiViewer.inference_ctx.get_inference_input_dict", "viewer.KittiViewer.inference_ctx.inference", "time.time", "second.remove_outside_points", "second.remove_outside_points", "second.remove_outside_points", "numpy.fromfile", "str"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.info", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.info", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.error", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.ctx", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_official_eval_result", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_official_eval_result", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.eval.get_official_eval_result", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.get_inference_input_dict", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.inference", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.remove_outside_points", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.remove_outside_points", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.remove_outside_points"], ["", "def", "on_EvalVxNetPressed", "(", "self", ")", ":", "\n", "        ", "if", "\"annos\"", "not", "in", "self", ".", "kitti_infos", "[", "0", "]", ":", "\n", "            ", "self", ".", "error", "(", "\"ERROR: infos don't contain gt label.\"", ")", "\n", "", "t", "=", "time", ".", "time", "(", ")", "\n", "det_annos", "=", "[", "]", "\n", "input_cfg", "=", "self", ".", "inference_ctx", ".", "config", ".", "eval_input_reader", "\n", "model_cfg", "=", "self", ".", "inference_ctx", ".", "config", ".", "model", ".", "second", "\n", "\n", "class_names", "=", "list", "(", "input_cfg", ".", "class_names", ")", "\n", "num_features", "=", "model_cfg", ".", "num_point_features", "\n", "with", "self", ".", "inference_ctx", ".", "ctx", "(", ")", ":", "\n", "            ", "for", "info", "in", "list_bar", "(", "self", ".", "kitti_infos", ")", ":", "\n", "                ", "v_path", "=", "self", ".", "root_path", "/", "info", "[", "'velodyne_path'", "]", "\n", "# v_path = v_path.parent.parent / (", "\n", "#     v_path.parent.stem + \"_reduced\") / v_path.name", "\n", "points", "=", "np", ".", "fromfile", "(", "\n", "str", "(", "v_path", ")", ",", "dtype", "=", "np", ".", "float32", ",", "\n", "count", "=", "-", "1", ")", ".", "reshape", "(", "[", "-", "1", ",", "num_features", "]", ")", "\n", "rect", "=", "info", "[", "'calib/R0_rect'", "]", "\n", "P2", "=", "info", "[", "'calib/P2'", "]", "\n", "Trv2c", "=", "info", "[", "'calib/Tr_velo_to_cam'", "]", "\n", "image_shape", "=", "info", "[", "'img_shape'", "]", "\n", "if", "self", ".", "w_config", ".", "get", "(", "\"RemoveOutsidePoint\"", ")", ":", "\n", "                    ", "points", "=", "box_np_ops", ".", "remove_outside_points", "(", "\n", "points", ",", "rect", ",", "Trv2c", ",", "P2", ",", "image_shape", ")", "\n", "", "inputs", "=", "self", ".", "inference_ctx", ".", "get_inference_input_dict", "(", "\n", "info", ",", "points", ")", "\n", "det_annos", "+=", "self", ".", "inference_ctx", ".", "inference", "(", "inputs", ")", "\n", "", "", "self", ".", "info", "(", "\"total detection time:\"", ",", "time", ".", "time", "(", ")", "-", "t", ")", "\n", "gt_annos", "=", "[", "i", "[", "\"annos\"", "]", "for", "i", "in", "self", ".", "kitti_infos", "]", "\n", "self", ".", "info", "(", "get_official_eval_result", "(", "gt_annos", ",", "det_annos", ",", "class_names", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.get_simpify_labels": [[1358, 1386], ["enumerate", "ret.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_simpify_labels", "(", "labels", ")", ":", "\n", "        ", "label_map", "=", "{", "\n", "\"Car\"", ":", "\"V\"", ",", "\n", "\"Pedestrian\"", ":", "\"P\"", ",", "\n", "\"Cyclist\"", ":", "\"C\"", ",", "\n", "\"car\"", ":", "\"C\"", ",", "\n", "\"tractor\"", ":", "\"T1\"", ",", "\n", "\"trailer\"", ":", "\"T2\"", ",", "\n", "}", "\n", "label_count", "=", "{", "\n", "\"Car\"", ":", "0", ",", "\n", "\"Pedestrian\"", ":", "0", ",", "\n", "\"Cyclist\"", ":", "0", ",", "\n", "\"car\"", ":", "0", ",", "\n", "\"tractor\"", ":", "0", ",", "\n", "\"trailer\"", ":", "0", ",", "\n", "}", "\n", "ret", "=", "[", "]", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "labels", ")", ":", "\n", "            ", "count", "=", "0", "\n", "if", "name", "in", "label_count", ":", "\n", "                ", "count", "=", "label_count", "[", "name", "]", "\n", "label_count", "[", "name", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "label_count", "[", "name", "]", "=", "0", "\n", "", "ret", ".", "append", "(", "f\"{label_map[name]}{count}\"", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.KittiViewer.get_false_pos_neg": [[1387, 1411], ["viewer._riou3d_shapely", "numpy.full", "numpy.zeros", "numpy.array", "_riou3d_shapely.max", "_riou3d_shapely.argmax", "len", "len", "len", "len", "numpy.logical_and"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer._riou3d_shapely"], ["", "@", "staticmethod", "\n", "def", "get_false_pos_neg", "(", "gt_boxes", ",", "dt_boxes", ",", "labels", ",", "fp_thresh", "=", "0.1", ")", ":", "\n", "        ", "iou", "=", "_riou3d_shapely", "(", "gt_boxes", ",", "dt_boxes", ")", "\n", "ret", "=", "np", ".", "full", "(", "[", "len", "(", "gt_boxes", ")", "]", ",", "2", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "assigned_dt", "=", "np", ".", "zeros", "(", "[", "len", "(", "dt_boxes", ")", "]", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "label_thresh_map", "=", "{", "\n", "\"Car\"", ":", "0.7", ",", "\n", "\"Pedestrian\"", ":", "0.5", ",", "\n", "\"Cyclist\"", ":", "0.5", ",", "\n", "\"car\"", ":", "0.7", ",", "\n", "\"tractor\"", ":", "0.7", ",", "\n", "\"trailer\"", ":", "0.7", ",", "\n", "}", "\n", "tp_thresh", "=", "np", ".", "array", "(", "[", "label_thresh_map", "[", "n", "]", "for", "n", "in", "labels", "]", ")", "\n", "if", "len", "(", "gt_boxes", ")", "!=", "0", "and", "len", "(", "dt_boxes", ")", "!=", "0", ":", "\n", "            ", "iou_max_dt_for_gt", "=", "iou", ".", "max", "(", "1", ")", "\n", "dt_iou_max_dt_for_gt", "=", "iou", ".", "argmax", "(", "1", ")", "\n", "ret", "[", "iou_max_dt_for_gt", ">=", "tp_thresh", "]", "=", "0", "\n", "ret", "[", "np", ".", "logical_and", "(", "iou_max_dt_for_gt", "<", "tp_thresh", ",", "\n", "iou_max_dt_for_gt", ">", "fp_thresh", ")", "]", "=", "1", "# FP", "\n", "assigned_dt_inds", "=", "dt_iou_max_dt_for_gt", "\n", "assigned_dt_inds", "=", "assigned_dt_inds", "[", "iou_max_dt_for_gt", ">=", "fp_thresh", "]", "\n", "assigned_dt", "[", "assigned_dt_inds", "]", "=", "True", "\n", "", "return", "ret", ",", "assigned_dt", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer._riou3d_shapely": [[159, 182], ["second.center_to_corner_box2d", "second.center_to_corner_box2d", "numpy.zeros", "range", "range", "min", "max", "shapely.geometry.Polygon", "shapely.geometry.Polygon", "shapely.geometry.Polygon.intersection"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box2d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box2d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.intersection"], ["", "", "", "def", "_riou3d_shapely", "(", "rbboxes1", ",", "rbboxes2", ")", ":", "\n", "    ", "N", ",", "K", "=", "rbboxes1", ".", "shape", "[", "0", "]", ",", "rbboxes2", ".", "shape", "[", "0", "]", "\n", "corners1", "=", "box_np_ops", ".", "center_to_corner_box2d", "(", "\n", "rbboxes1", "[", ":", ",", ":", "2", "]", ",", "rbboxes1", "[", ":", ",", "3", ":", "5", "]", ",", "rbboxes1", "[", ":", ",", "6", "]", ")", "\n", "corners2", "=", "box_np_ops", ".", "center_to_corner_box2d", "(", "\n", "rbboxes2", "[", ":", ",", ":", "2", "]", ",", "rbboxes2", "[", ":", ",", "3", ":", "5", "]", ",", "rbboxes2", "[", ":", ",", "6", "]", ")", "\n", "iou", "=", "np", ".", "zeros", "(", "[", "N", ",", "K", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "            ", "iw", "=", "(", "min", "(", "rbboxes1", "[", "i", ",", "2", "]", "+", "rbboxes1", "[", "i", ",", "5", "]", ",", "\n", "rbboxes2", "[", "j", ",", "2", "]", "+", "rbboxes2", "[", "j", ",", "5", "]", ")", "-", "max", "(", "\n", "rbboxes1", "[", "i", ",", "2", "]", ",", "rbboxes2", "[", "j", ",", "2", "]", ")", ")", "\n", "if", "iw", ">", "0", ":", "\n", "                ", "p1", "=", "Polygon", "(", "corners1", "[", "i", "]", ")", "\n", "p2", "=", "Polygon", "(", "corners2", "[", "j", "]", ")", "\n", "inc", "=", "p1", ".", "intersection", "(", "p2", ")", ".", "area", "*", "iw", "\n", "# inc = p1.intersection(p2).area", "\n", "if", "inc", ">", "0", ":", "\n", "                    ", "iou", "[", "i", ",", "j", "]", "=", "inc", "/", "(", "p1", ".", "area", "*", "rbboxes1", "[", "i", ",", "5", "]", "+", "\n", "p2", ".", "area", "*", "rbboxes2", "[", "j", ",", "5", "]", "-", "inc", ")", "\n", "# iou[i, j] = inc / (p1.area + p2.area - inc)", "\n", "\n", "", "", "", "", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.kitti_anno_to_corners": [[184, 206], ["numpy.concatenate", "second.box_camera_to_lidar", "second.center_to_corner_box3d"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box_camera_to_lidar", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box3d"], ["", "def", "kitti_anno_to_corners", "(", "info", ",", "annos", "=", "None", ")", ":", "\n", "    ", "rect", "=", "info", "[", "'calib/R0_rect'", "]", "\n", "P2", "=", "info", "[", "'calib/P2'", "]", "\n", "Tr_velo_to_cam", "=", "info", "[", "'calib/Tr_velo_to_cam'", "]", "\n", "if", "annos", "is", "None", ":", "\n", "        ", "annos", "=", "info", "[", "'annos'", "]", "\n", "", "dims", "=", "annos", "[", "'dimensions'", "]", "\n", "loc", "=", "annos", "[", "'location'", "]", "\n", "rots", "=", "annos", "[", "'rotation_y'", "]", "\n", "scores", "=", "None", "\n", "if", "'score'", "in", "annos", ":", "\n", "        ", "scores", "=", "annos", "[", "'score'", "]", "\n", "", "boxes_camera", "=", "np", ".", "concatenate", "(", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "boxes_lidar", "=", "box_np_ops", ".", "box_camera_to_lidar", "(", "boxes_camera", ",", "rect", ",", "\n", "Tr_velo_to_cam", ")", "\n", "boxes_corners", "=", "box_np_ops", ".", "center_to_corner_box3d", "(", "\n", "boxes_lidar", "[", ":", ",", ":", "3", "]", ",", "\n", "boxes_lidar", "[", ":", ",", "3", ":", "6", "]", ",", "\n", "boxes_lidar", "[", ":", ",", "6", "]", ",", "\n", "origin", "=", "[", "0.5", ",", "0.5", ",", "0", "]", ",", "\n", "axis", "=", "2", ")", "\n", "return", "boxes_corners", ",", "scores", ",", "boxes_lidar", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.Message.__init__": [[16, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QFloatSlider.__init__": [[22, 35], ["PyQt5.QtWidgets.QSlider.__init__", "control_panel.QFloatSlider.setRange", "control_panel.QFloatSlider.set_value"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QJsonEdit.set_value"], ["    ", "def", "__init__", "(", "self", ",", "\n", "start", ",", "\n", "stop", ",", "\n", "num", ",", "\n", "default_value", "=", "0", ",", "\n", "orientation", "=", "QtCore", ".", "Qt", ".", "Horizontal", ",", "\n", "parent", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "orientation", ",", "parent", "=", "parent", ")", "\n", "self", ".", "_start", "=", "start", "\n", "self", ".", "_stop", "=", "stop", "\n", "self", ".", "_num", "=", "num", "\n", "self", ".", "setRange", "(", "0", ",", "num", ")", "\n", "self", ".", "set_value", "(", "default_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QFloatSlider.get_value": [[36, 40], ["control_panel.QFloatSlider.value"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.PrecisionRecall.value"], ["", "def", "get_value", "(", "self", ",", "pos", "=", "None", ")", ":", "\n", "        ", "if", "pos", "is", "None", ":", "\n", "            ", "pos", "=", "self", ".", "value", "(", ")", "\n", "", "return", "(", "self", ".", "_start", "-", "self", ".", "_stop", ")", "/", "self", ".", "_num", "*", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QFloatSlider.set_value": [[41, 44], ["int", "control_panel.QFloatSlider.setSliderPosition"], "methods", ["None"], ["", "def", "set_value", "(", "self", ",", "val", ")", ":", "\n", "        ", "pos", "=", "int", "(", "val", "*", "self", ".", "_num", "/", "(", "self", ".", "_start", "-", "self", ".", "_stop", ")", ")", "\n", "self", ".", "setSliderPosition", "(", "pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QListEdit.__init__": [[74, 80], ["PyQt5.QtWidgets.QLineEdit.__init__", "control_panel._list_to_string"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel._list_to_string"], ["def", "__init__", "(", "self", ",", "\n", "dtype", ",", "\n", "value", "=", "[", "]", ",", "\n", "parent", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "_list_to_string", "(", "value", ")", ",", "parent", "=", "parent", ")", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QListEdit.get_value": [[81, 83], ["control_panel._string_to_list", "control_panel.QListEdit.text"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel._string_to_list"], ["", "def", "get_value", "(", "self", ")", ":", "\n", "        ", "return", "_string_to_list", "(", "self", ".", "text", "(", ")", ",", "self", ".", "_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QListEdit.set_value": [[84, 86], ["control_panel.QListEdit.setText", "control_panel._list_to_string"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.GLTextItem.setText", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel._list_to_string"], ["", "def", "set_value", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "setText", "(", "_list_to_string", "(", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QArrayEdit.__init__": [[90, 101], ["numpy.array", "numpy.array", "PyQt5.QtWidgets.QLineEdit.__init__", "control_panel._shape_check", "control_panel._ndarray_to_string"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel._shape_check", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel._ndarray_to_string"], ["def", "__init__", "(", "self", ",", "\n", "dtype", ",", "\n", "value", "=", "np", ".", "array", "(", "[", "]", ")", ",", "\n", "shape", "=", "None", ",", "\n", "parent", "=", "None", ")", ":", "\n", "        ", "value", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "dtype", ")", "\n", "if", "shape", "is", "not", "None", ":", "\n", "            ", "_shape_check", "(", "value", ",", "shape", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "_ndarray_to_string", "(", "value", ")", ",", "parent", "=", "parent", ")", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "self", ".", "_shape", "=", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QArrayEdit.get_value": [[102, 104], ["control_panel._string_to_ndarray", "control_panel.QArrayEdit.text"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel._string_to_ndarray"], ["", "def", "get_value", "(", "self", ")", ":", "\n", "        ", "return", "_string_to_ndarray", "(", "self", ".", "text", "(", ")", ",", "self", ".", "_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QArrayEdit.set_value": [[105, 110], ["numpy.array", "control_panel.QArrayEdit.setText", "control_panel._shape_check", "control_panel._ndarray_to_string"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.GLTextItem.setText", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel._shape_check", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel._ndarray_to_string"], ["", "def", "set_value", "(", "self", ",", "value", ")", ":", "\n", "        ", "value", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "self", ".", "_dtype", ")", "\n", "if", "self", ".", "_shape", "is", "not", "None", ":", "\n", "            ", "_shape_check", "(", "value", ",", "self", ".", "_shape", ")", "\n", "", "self", ".", "setText", "(", "_ndarray_to_string", "(", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QJsonEdit.__init__": [[114, 118], ["PyQt5.QtWidgets.QLineEdit.__init__", "control_panel._jsonable_to_string"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel._jsonable_to_string"], ["def", "__init__", "(", "self", ",", "\n", "value", "=", "[", "]", ",", "\n", "parent", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "_jsonable_to_string", "(", "value", ")", ",", "parent", "=", "parent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QJsonEdit.get_value": [[119, 121], ["control_panel._string_to_jsonable", "control_panel.QJsonEdit.text"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel._string_to_jsonable"], ["", "def", "get_value", "(", "self", ")", ":", "\n", "        ", "return", "_string_to_jsonable", "(", "self", ".", "text", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QJsonEdit.set_value": [[122, 124], ["control_panel.QJsonEdit.setText", "control_panel._jsonable_to_string"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.GLTextItem.setText", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel._jsonable_to_string"], ["", "def", "set_value", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "setText", "(", "_jsonable_to_string", "(", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QColorButton.__init__": [[136, 144], ["PyQt5.QtWidgets.QPushButton.__init__", "control_panel.QColorButton.setMaximumWidth", "control_panel.QColorButton.setColor", "control_panel.QColorButton.pressed.connect"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QColorButton.setColor"], ["def", "__init__", "(", "self", ",", "default_color", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "QColorButton", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_color", "=", "None", "\n", "if", "default_color", "is", "not", "None", ":", "\n", "            ", "self", ".", "gl_color", "=", "default_color", "\n", "", "self", ".", "setMaximumWidth", "(", "32", ")", "\n", "self", ".", "setColor", "(", "self", ".", "_color", ")", "\n", "self", ".", "pressed", ".", "connect", "(", "self", ".", "onColorPicker", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QColorButton.setColor": [[145, 154], ["control_panel.QColorButton.colorChanged.emit", "control_panel.QColorButton.setStyleSheet", "control_panel.QColorButton.setStyleSheet", "PyQt5.QtGui.QColor().name", "PyQt5.QtGui.QColor"], "methods", ["None"], ["", "def", "setColor", "(", "self", ",", "color", ")", ":", "\n", "        ", "if", "color", "!=", "self", ".", "_color", ":", "\n", "            ", "self", ".", "_color", "=", "color", "\n", "self", ".", "colorChanged", ".", "emit", "(", ")", "\n", "\n", "", "if", "self", ".", "_color", "is", "not", "None", ":", "\n", "            ", "self", ".", "setStyleSheet", "(", "f\"background-color: {QColor(self._color).name()};\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "setStyleSheet", "(", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QColorButton.rgba": [[159, 162], ["None"], "methods", ["None"], ["", "@", "rgba", ".", "setter", "\n", "def", "rgba", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_color", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QColorButton.gl_color": [[172, 177], ["PyQt5.QtGui.QColor().rgba", "PyQt5.QtGui.QColor", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QColorButton.rgba"], ["", "@", "gl_color", ".", "setter", "\n", "def", "gl_color", "(", "self", ",", "color_tuple", ")", ":", "\n", "        ", "r", ",", "g", ",", "b", ",", "alpha", "=", "(", "np", ".", "array", "(", "color_tuple", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "# rgba = alpha << 24 | r << 16 | g << 8 | b", "\n", "self", ".", "_color", "=", "QColor", "(", "r", ",", "g", ",", "b", ",", "alpha", ")", ".", "rgba", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QColorButton.onColorPicker": [[178, 192], ["PyQt5.QtWidgets.QColorDialog", "PyQt5.QtWidgets.QColorDialog.exec_", "PyQt5.QtWidgets.QColorDialog.setCurrentColor", "control_panel.QColorButton.setColor", "PyQt5.QtGui.QColor", "PyQt5.QtWidgets.QColorDialog.currentColor().rgba", "PyQt5.QtWidgets.QColorDialog.currentColor"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QColorButton.setColor", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QColorButton.rgba"], ["", "def", "onColorPicker", "(", "self", ")", ":", "\n", "        ", "'''\n        Show color-picker dialog to select color.\n\n        Qt will use the native dialog by default.\n\n        '''", "\n", "dlg", "=", "QColorDialog", "(", "self", ")", "\n", "if", "self", ".", "_color", ":", "\n", "            ", "dlg", ".", "setCurrentColor", "(", "QColor", "(", "self", ".", "_color", ")", ")", "\n", "\n", "", "if", "dlg", ".", "exec_", "(", ")", ":", "\n", "# self.setColor(dlg.currentColor().name())", "\n", "            ", "self", ".", "setColor", "(", "dlg", ".", "currentColor", "(", ")", ".", "rgba", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.__init__": [[207, 238], ["PyQt5.QtWidgets.QWidget.__init__", "PyQt5.QtWidgets.QTabWidget", "range", "PyQt5.QtWidgets.QVBoxLayout", "control_panel.ControlPanel._layout.addWidget", "control_panel.ControlPanel.setLayout", "isinstance", "PyQt5.QtWidgets.QHBoxLayout", "range", "PyQt5.QtWidgets.QWidget", "PyQt5.QtWidgets.QWidget.setLayout", "control_panel.ControlPanel._tab.addTab", "control_panel.ControlPanel._tab_layouts.append", "PyQt5.QtWidgets.QFormLayout", "from_layouts.append", "PyQt5.QtWidgets.QHBoxLayout.addLayout", "str"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["def", "__init__", "(", "self", ",", "column_nums", "=", "1", ",", "tab_num", "=", "1", ",", "parent", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "parent", "=", "parent", ")", "\n", "if", "not", "isinstance", "(", "column_nums", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "column_nums", "=", "[", "column_nums", "]", "*", "tab_num", "\n", "# self._layout = QHBoxLayout()", "\n", "", "self", ".", "_tab", "=", "QTabWidget", "(", "self", ")", "\n", "# self._tab.resize(500, 500)", "\n", "self", ".", "_tab_layouts", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "tab_num", ")", ":", "\n", "            ", "from_layouts", "=", "[", "]", "\n", "layout", "=", "QHBoxLayout", "(", ")", "\n", "assert", "column_nums", "[", "j", "]", ">", "0", "\n", "for", "i", "in", "range", "(", "column_nums", "[", "j", "]", ")", ":", "\n", "                ", "f_layout", "=", "QFormLayout", "(", ")", "\n", "from_layouts", ".", "append", "(", "f_layout", ")", "\n", "layout", ".", "addLayout", "(", "f_layout", ")", "\n", "", "w", "=", "QWidget", "(", "self", ".", "_tab", ")", "\n", "w", ".", "setLayout", "(", "layout", ")", "\n", "self", ".", "_tab", ".", "addTab", "(", "w", ",", "str", "(", "j", ")", ")", "\n", "self", ".", "_tab_layouts", ".", "append", "(", "from_layouts", ")", "\n", "", "self", ".", "_widget_dict", "=", "{", "}", "\n", "self", ".", "_widget_type", "=", "{", "}", "\n", "\n", "self", ".", "_current_col", "=", "0", "\n", "self", ".", "_current_tab", "=", "0", "\n", "self", ".", "_column_nums", "=", "column_nums", "\n", "self", ".", "_tab_num", "=", "tab_num", "\n", "# Add tabs", "\n", "self", ".", "_layout", "=", "QVBoxLayout", "(", "self", ")", "\n", "self", ".", "_layout", ".", "addWidget", "(", "self", ".", "_tab", ")", "\n", "self", ".", "setLayout", "(", "self", ".", "_layout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.column": [[239, 247], ["RuntimeError"], "methods", ["None"], ["", "@", "contextlib", ".", "contextmanager", "\n", "def", "column", "(", "self", ",", "col", ")", ":", "\n", "        ", "if", "col", ">", "(", "self", ".", "_column_nums", "[", "self", ".", "_current_tab", "]", "-", "1", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"column out of range\"", ")", "\n", "", "column_bkp", "=", "self", ".", "_current_col", "\n", "self", ".", "_current_col", "=", "col", "\n", "yield", "\n", "self", ".", "_current_col", "=", "column_bkp", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.tab": [[248, 258], ["RuntimeError", "control_panel.ControlPanel._tab.setTabText"], "methods", ["None"], ["", "@", "contextlib", ".", "contextmanager", "\n", "def", "tab", "(", "self", ",", "idx", ",", "name", "=", "None", ")", ":", "\n", "        ", "if", "idx", ">", "(", "self", ".", "_tab_num", "-", "1", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"tab index out of range\"", ")", "\n", "", "tab_idx_bkp", "=", "self", ".", "_current_tab", "\n", "self", ".", "_current_tab", "=", "idx", "\n", "if", "name", "is", "not", "None", ":", "\n", "            ", "self", ".", "_tab", ".", "setTabText", "(", "idx", ",", "name", ")", "\n", "", "yield", "\n", "self", ".", "_current_tab", "=", "tab_idx_bkp", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_slider": [[260, 268], ["control_panel.QFloatSlider", "[].addRow", "QFloatSlider.valueChanged.connect", "PyQt5.QtWidgets.QLabel", "functools.partial"], "methods", ["None"], ["", "def", "add_slider", "(", "self", ",", "name", ",", "start", ",", "stop", ",", "num", ",", "default_value", "=", "0", ")", ":", "\n", "        ", "ctrl", "=", "QFloatSlider", "(", "start", ",", "stop", ",", "num", ",", "default_value", ",", "parent", "=", "self", ")", "\n", "self", ".", "_widget_dict", "[", "name", "]", "=", "ctrl", "\n", "slider_name", "=", "f\"{name}({start:.2f}~{stop:.2f})\"", "\n", "self", ".", "_tab_layouts", "[", "self", ".", "_current_tab", "]", "[", "self", ".", "_current_col", "]", ".", "addRow", "(", "QLabel", "(", "slider_name", ")", ",", "ctrl", ")", "\n", "ctrl", ".", "valueChanged", ".", "connect", "(", "\n", "partial", "(", "self", ".", "on_slider_valuechange", ",", "name", "=", "name", ")", ")", "\n", "self", ".", "_widget_type", "[", "name", "]", "=", "WidgetType", ".", "Slider", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_fspinbox": [[269, 281], ["PyQt5.QtWidgets.QDoubleSpinBox", "PyQt5.QtWidgets.QDoubleSpinBox.setRange", "PyQt5.QtWidgets.QDoubleSpinBox.setSingleStep", "[].addRow", "PyQt5.QtWidgets.QDoubleSpinBox.valueChanged.connect", "PyQt5.QtWidgets.QDoubleSpinBox.setValue", "PyQt5.QtWidgets.QLabel", "functools.partial"], "methods", ["None"], ["", "def", "add_fspinbox", "(", "self", ",", "name", ",", "start", ",", "stop", ",", "step", ",", "default_value", "=", "None", ")", ":", "\n", "        ", "ctrl", "=", "QDoubleSpinBox", "(", "self", ")", "\n", "ctrl", ".", "setRange", "(", "start", ",", "stop", ")", "\n", "ctrl", ".", "setSingleStep", "(", "step", ")", "\n", "if", "default_value", "is", "not", "None", ":", "\n", "            ", "ctrl", ".", "setValue", "(", "default_value", ")", "\n", "", "self", ".", "_widget_dict", "[", "name", "]", "=", "ctrl", "\n", "slider_name", "=", "f\"{name}({start:.2f}~{stop:.2f})\"", "\n", "self", ".", "_tab_layouts", "[", "self", ".", "_current_tab", "]", "[", "self", ".", "_current_col", "]", ".", "addRow", "(", "QLabel", "(", "slider_name", ")", ",", "ctrl", ")", "\n", "ctrl", ".", "valueChanged", ".", "connect", "(", "\n", "partial", "(", "self", ".", "on_spinbox_valuechange", ",", "name", "=", "name", ")", ")", "\n", "self", ".", "_widget_type", "[", "name", "]", "=", "WidgetType", ".", "DoubleSpinBox", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_colorbutton": [[282, 289], ["control_panel.QColorButton", "[].addRow", "QColorButton.colorChanged.connect", "PyQt5.QtWidgets.QLabel", "functools.partial"], "methods", ["None"], ["", "def", "add_colorbutton", "(", "self", ",", "name", ",", "default_color", "=", "None", ")", ":", "\n", "        ", "ctrl", "=", "QColorButton", "(", "default_color", ",", "parent", "=", "self", ")", "\n", "self", ".", "_widget_dict", "[", "name", "]", "=", "ctrl", "\n", "self", ".", "_tab_layouts", "[", "self", ".", "_current_tab", "]", "[", "self", ".", "_current_col", "]", ".", "addRow", "(", "QLabel", "(", "name", ")", ",", "ctrl", ")", "\n", "ctrl", ".", "colorChanged", ".", "connect", "(", "\n", "partial", "(", "self", ".", "on_colorbutton_returned", ",", "name", "=", "name", ")", ")", "\n", "self", ".", "_widget_type", "[", "name", "]", "=", "WidgetType", ".", "ColorButton", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_lineedit": [[291, 298], ["PyQt5.QtWidgets.QLineEdit", "[].addRow", "PyQt5.QtWidgets.QLineEdit.returnPressed.connect", "PyQt5.QtWidgets.QLabel", "functools.partial"], "methods", ["None"], ["", "def", "add_lineedit", "(", "self", ",", "name", ")", ":", "\n", "        ", "ctrl", "=", "QLineEdit", "(", "parent", "=", "self", ")", "\n", "self", ".", "_widget_dict", "[", "name", "]", "=", "ctrl", "\n", "self", ".", "_tab_layouts", "[", "self", ".", "_current_tab", "]", "[", "self", ".", "_current_col", "]", ".", "addRow", "(", "QLabel", "(", "name", ")", ",", "ctrl", ")", "\n", "ctrl", ".", "returnPressed", ".", "connect", "(", "\n", "partial", "(", "self", ".", "on_lineedit_returnpressed", ",", "name", "=", "name", ")", ")", "\n", "self", ".", "_widget_type", "[", "name", "]", "=", "WidgetType", ".", "LineEdit", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_listedit": [[299, 306], ["control_panel.QListEdit", "[].addRow", "QListEdit.returnPressed.connect", "PyQt5.QtWidgets.QLabel", "functools.partial"], "methods", ["None"], ["", "def", "add_listedit", "(", "self", ",", "name", ",", "dtype", ",", "value", "=", "[", "]", ")", ":", "\n", "        ", "ctrl", "=", "QListEdit", "(", "dtype", ",", "value", ",", "parent", "=", "self", ")", "\n", "self", ".", "_widget_dict", "[", "name", "]", "=", "ctrl", "\n", "self", ".", "_tab_layouts", "[", "self", ".", "_current_tab", "]", "[", "self", ".", "_current_col", "]", ".", "addRow", "(", "QLabel", "(", "name", ")", ",", "ctrl", ")", "\n", "ctrl", ".", "returnPressed", ".", "connect", "(", "\n", "partial", "(", "self", ".", "on_listedit_returnpressed", ",", "name", "=", "name", ")", ")", "\n", "self", ".", "_widget_type", "[", "name", "]", "=", "WidgetType", ".", "ListEdit", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_arrayedit": [[307, 314], ["control_panel.QArrayEdit", "[].addRow", "QArrayEdit.returnPressed.connect", "PyQt5.QtWidgets.QLabel", "functools.partial"], "methods", ["None"], ["", "def", "add_arrayedit", "(", "self", ",", "name", ",", "dtype", ",", "value", ",", "shape", "=", "None", ")", ":", "\n", "        ", "ctrl", "=", "QArrayEdit", "(", "dtype", ",", "value", ",", "shape", ",", "parent", "=", "self", ")", "\n", "self", ".", "_widget_dict", "[", "name", "]", "=", "ctrl", "\n", "self", ".", "_tab_layouts", "[", "self", ".", "_current_tab", "]", "[", "self", ".", "_current_col", "]", ".", "addRow", "(", "QLabel", "(", "name", ")", ",", "ctrl", ")", "\n", "ctrl", ".", "returnPressed", ".", "connect", "(", "\n", "partial", "(", "self", ".", "on_arrayedit_returnpressed", ",", "name", "=", "name", ")", ")", "\n", "self", ".", "_widget_type", "[", "name", "]", "=", "WidgetType", ".", "ArrayEdit", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_jsonedit": [[315, 322], ["control_panel.QJsonEdit", "[].addRow", "QJsonEdit.returnPressed.connect", "PyQt5.QtWidgets.QLabel", "functools.partial"], "methods", ["None"], ["", "def", "add_jsonedit", "(", "self", ",", "name", ",", "value", "=", "[", "]", ")", ":", "\n", "        ", "ctrl", "=", "QJsonEdit", "(", "value", ",", "parent", "=", "self", ")", "\n", "self", ".", "_widget_dict", "[", "name", "]", "=", "ctrl", "\n", "self", ".", "_tab_layouts", "[", "self", ".", "_current_tab", "]", "[", "self", ".", "_current_col", "]", ".", "addRow", "(", "QLabel", "(", "name", ")", ",", "ctrl", ")", "\n", "ctrl", ".", "returnPressed", ".", "connect", "(", "\n", "partial", "(", "self", ".", "on_jsonedit_returnpressed", ",", "name", "=", "name", ")", ")", "\n", "self", ".", "_widget_type", "[", "name", "]", "=", "WidgetType", ".", "JsonEdit", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_checkbox": [[323, 330], ["PyQt5.QtWidgets.QCheckBox", "[].addRow", "PyQt5.QtWidgets.QCheckBox.stateChanged.connect", "PyQt5.QtWidgets.QLabel", "functools.partial"], "methods", ["None"], ["", "def", "add_checkbox", "(", "self", ",", "name", ")", ":", "\n", "        ", "ctrl", "=", "QCheckBox", "(", "name", ",", "parent", "=", "self", ")", "\n", "self", ".", "_widget_dict", "[", "name", "]", "=", "ctrl", "\n", "self", ".", "_tab_layouts", "[", "self", ".", "_current_tab", "]", "[", "self", ".", "_current_col", "]", ".", "addRow", "(", "QLabel", "(", "name", ")", ",", "ctrl", ")", "\n", "ctrl", ".", "stateChanged", ".", "connect", "(", "\n", "partial", "(", "self", ".", "on_checkbox_statechanged", ",", "name", "=", "name", ")", ")", "\n", "self", ".", "_widget_type", "[", "name", "]", "=", "WidgetType", ".", "CheckBox", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.add_combobox": [[331, 340], ["PyQt5.QtWidgets.QComboBox", "[].addRow", "PyQt5.QtWidgets.QComboBox.currentTextChanged.connect", "PyQt5.QtWidgets.QComboBox.addItem", "PyQt5.QtWidgets.QLabel", "functools.partial"], "methods", ["None"], ["", "def", "add_combobox", "(", "self", ",", "name", ",", "values", ")", ":", "\n", "        ", "ctrl", "=", "QComboBox", "(", "parent", "=", "self", ")", "\n", "for", "value", "in", "values", ":", "\n", "            ", "ctrl", ".", "addItem", "(", "value", ")", "\n", "", "self", ".", "_widget_dict", "[", "name", "]", "=", "ctrl", "\n", "self", ".", "_tab_layouts", "[", "self", ".", "_current_tab", "]", "[", "self", ".", "_current_col", "]", ".", "addRow", "(", "QLabel", "(", "name", ")", ",", "ctrl", ")", "\n", "ctrl", ".", "currentTextChanged", ".", "connect", "(", "\n", "partial", "(", "self", ".", "on_combobox_changed", ",", "name", "=", "name", ")", ")", "\n", "self", ".", "_widget_type", "[", "name", "]", "=", "WidgetType", ".", "ComboBox", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.on_slider_valuechange": [[341, 344], ["control_panel.ControlPanel._widget_dict[].get_value", "control_panel.ControlPanel.configChanged.emit", "control_panel.Message"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QJsonEdit.get_value"], ["", "def", "on_slider_valuechange", "(", "self", ",", "value", ",", "name", ")", ":", "\n", "        ", "value", "=", "self", ".", "_widget_dict", "[", "name", "]", ".", "get_value", "(", "value", ")", "\n", "self", ".", "configChanged", ".", "emit", "(", "Message", "(", "name", ",", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.on_spinbox_valuechange": [[345, 348], ["control_panel.ControlPanel._widget_dict[].value", "control_panel.ControlPanel.configChanged.emit", "control_panel.Message"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.PrecisionRecall.value"], ["", "def", "on_spinbox_valuechange", "(", "self", ",", "value", ",", "name", ")", ":", "\n", "        ", "value", "=", "self", ".", "_widget_dict", "[", "name", "]", ".", "value", "(", ")", "\n", "self", ".", "configChanged", ".", "emit", "(", "Message", "(", "name", ",", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.on_colorbutton_returned": [[349, 352], ["control_panel.ControlPanel.configChanged.emit", "control_panel.Message"], "methods", ["None"], ["", "def", "on_colorbutton_returned", "(", "self", ",", "name", ")", ":", "\n", "        ", "color", "=", "self", ".", "_widget_dict", "[", "name", "]", ".", "gl_color", "\n", "self", ".", "configChanged", ".", "emit", "(", "Message", "(", "name", ",", "color", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.on_lineedit_returnpressed": [[353, 356], ["control_panel.ControlPanel._widget_dict[].text", "control_panel.ControlPanel.configChanged.emit", "control_panel.Message"], "methods", ["None"], ["", "def", "on_lineedit_returnpressed", "(", "self", ",", "name", ")", ":", "\n", "        ", "text", "=", "self", ".", "_widget_dict", "[", "name", "]", ".", "text", "(", ")", "\n", "self", ".", "configChanged", ".", "emit", "(", "Message", "(", "name", ",", "text", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.on_listedit_returnpressed": [[357, 360], ["control_panel.ControlPanel._widget_dict[].get_value", "control_panel.ControlPanel.configChanged.emit", "control_panel.Message"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QJsonEdit.get_value"], ["", "def", "on_listedit_returnpressed", "(", "self", ",", "name", ")", ":", "\n", "        ", "value", "=", "self", ".", "_widget_dict", "[", "name", "]", ".", "get_value", "(", ")", "\n", "self", ".", "configChanged", ".", "emit", "(", "Message", "(", "name", ",", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.on_arrayedit_returnpressed": [[361, 364], ["control_panel.ControlPanel._widget_dict[].get_value", "control_panel.ControlPanel.configChanged.emit", "control_panel.Message"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QJsonEdit.get_value"], ["", "def", "on_arrayedit_returnpressed", "(", "self", ",", "name", ")", ":", "\n", "        ", "value", "=", "self", ".", "_widget_dict", "[", "name", "]", ".", "get_value", "(", ")", "\n", "self", ".", "configChanged", ".", "emit", "(", "Message", "(", "name", ",", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.on_jsonedit_returnpressed": [[365, 368], ["control_panel.ControlPanel._widget_dict[].get_value", "control_panel.ControlPanel.configChanged.emit", "control_panel.Message"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QJsonEdit.get_value"], ["", "def", "on_jsonedit_returnpressed", "(", "self", ",", "name", ")", ":", "\n", "        ", "value", "=", "self", ".", "_widget_dict", "[", "name", "]", ".", "get_value", "(", ")", "\n", "self", ".", "configChanged", ".", "emit", "(", "Message", "(", "name", ",", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.on_checkbox_statechanged": [[369, 371], ["control_panel.ControlPanel.configChanged.emit", "control_panel.Message"], "methods", ["None"], ["", "def", "on_checkbox_statechanged", "(", "self", ",", "state", ",", "name", ")", ":", "\n", "        ", "self", ".", "configChanged", ".", "emit", "(", "Message", "(", "name", ",", "state", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.on_combobox_changed": [[372, 375], ["control_panel.ControlPanel._widget_dict[].currentText", "control_panel.ControlPanel.configChanged.emit", "control_panel.Message"], "methods", ["None"], ["", "def", "on_combobox_changed", "(", "self", ",", "name", ")", ":", "\n", "        ", "value", "=", "self", ".", "_widget_dict", "[", "name", "]", ".", "currentText", "(", ")", "\n", "self", ".", "configChanged", ".", "emit", "(", "Message", "(", "name", ",", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.set": [[376, 398], ["control_panel.ControlPanel._widget_dict[].set_value", "control_panel.ControlPanel._widget_dict[].setValue", "control_panel.ControlPanel._widget_dict[].setChecked", "isinstance", "control_panel.ControlPanel._widget_dict[].setText", "control_panel.ControlPanel._widget_dict[].setCurrentIndex", "control_panel.ControlPanel._widget_dict[].set_value", "control_panel.ControlPanel._widget_dict[].set_value", "control_panel.ControlPanel._widget_dict[].set_value", "ValueError"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QJsonEdit.set_value", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.GLTextItem.setText", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QJsonEdit.set_value", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QJsonEdit.set_value", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QJsonEdit.set_value"], ["", "def", "set", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "if", "self", ".", "_widget_type", "[", "name", "]", "==", "WidgetType", ".", "Slider", ":", "\n", "            ", "self", ".", "_widget_dict", "[", "name", "]", ".", "set_value", "(", "value", ")", "\n", "", "elif", "self", ".", "_widget_type", "[", "name", "]", "==", "WidgetType", ".", "DoubleSpinBox", ":", "\n", "            ", "self", ".", "_widget_dict", "[", "name", "]", ".", "setValue", "(", "value", ")", "\n", "", "elif", "self", ".", "_widget_type", "[", "name", "]", "==", "WidgetType", ".", "CheckBox", ":", "\n", "            ", "self", ".", "_widget_dict", "[", "name", "]", ".", "setChecked", "(", "value", ">", "0", ")", "\n", "", "elif", "self", ".", "_widget_type", "[", "name", "]", "==", "WidgetType", ".", "LineEdit", ":", "\n", "            ", "assert", "isinstance", "(", "value", ",", "str", ")", "\n", "self", ".", "_widget_dict", "[", "name", "]", ".", "setText", "(", "value", ")", "\n", "", "elif", "self", ".", "_widget_type", "[", "name", "]", "==", "WidgetType", ".", "ComboBox", ":", "\n", "            ", "self", ".", "_widget_dict", "[", "name", "]", ".", "setCurrentIndex", "(", "value", ")", "\n", "", "elif", "self", ".", "_widget_type", "[", "name", "]", "==", "WidgetType", ".", "ListEdit", ":", "\n", "            ", "self", ".", "_widget_dict", "[", "name", "]", ".", "set_value", "(", "value", ")", "\n", "", "elif", "self", ".", "_widget_type", "[", "name", "]", "==", "WidgetType", ".", "ArrayEdit", ":", "\n", "            ", "self", ".", "_widget_dict", "[", "name", "]", ".", "set_value", "(", "value", ")", "\n", "", "elif", "self", ".", "_widget_type", "[", "name", "]", "==", "WidgetType", ".", "JsonEdit", ":", "\n", "            ", "self", ".", "_widget_dict", "[", "name", "]", ".", "set_value", "(", "value", ")", "\n", "", "elif", "self", ".", "_widget_type", "[", "name", "]", "==", "WidgetType", ".", "ColorButton", ":", "\n", "            ", "self", ".", "_widget_dict", "[", "name", "]", ".", "gl_color", "=", "value", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"unknown widget type\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get": [[399, 423], ["control_panel.ControlPanel._widget_dict[].get_value", "control_panel.ControlPanel._widget_dict[].get_value", "control_panel.ControlPanel._widget_dict[].get_value", "control_panel.ControlPanel._widget_dict[].get_value", "ValueError", "control_panel.ControlPanel._widget_dict[].value", "control_panel.ControlPanel._widget_dict[].isChecked", "control_panel.ControlPanel._widget_dict[].text", "control_panel.ControlPanel._widget_dict[].currentIndex", "control_panel.ControlPanel._widget_dict[].currentText"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QJsonEdit.get_value", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QJsonEdit.get_value", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QJsonEdit.get_value", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.QJsonEdit.get_value", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.torchplus.metrics.PrecisionRecall.value"], ["", "", "def", "get", "(", "self", ",", "name", ",", "save", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "_widget_type", "[", "name", "]", "==", "WidgetType", ".", "Slider", ":", "\n", "            ", "return", "self", ".", "_widget_dict", "[", "name", "]", ".", "get_value", "(", ")", "\n", "", "elif", "self", ".", "_widget_type", "[", "name", "]", "==", "WidgetType", ".", "DoubleSpinBox", ":", "\n", "            ", "return", "self", ".", "_widget_dict", "[", "name", "]", ".", "value", "(", ")", "\n", "", "elif", "self", ".", "_widget_type", "[", "name", "]", "==", "WidgetType", ".", "CheckBox", ":", "\n", "            ", "return", "self", ".", "_widget_dict", "[", "name", "]", ".", "isChecked", "(", ")", "\n", "", "elif", "self", ".", "_widget_type", "[", "name", "]", "==", "WidgetType", ".", "LineEdit", ":", "\n", "            ", "return", "self", ".", "_widget_dict", "[", "name", "]", ".", "text", "(", ")", "\n", "", "elif", "self", ".", "_widget_type", "[", "name", "]", "==", "WidgetType", ".", "ComboBox", ":", "\n", "            ", "if", "save", ":", "\n", "                ", "return", "self", ".", "_widget_dict", "[", "name", "]", ".", "currentIndex", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "_widget_dict", "[", "name", "]", ".", "currentText", "(", ")", "\n", "", "", "if", "self", ".", "_widget_type", "[", "name", "]", "==", "WidgetType", ".", "ListEdit", ":", "\n", "            ", "return", "self", ".", "_widget_dict", "[", "name", "]", ".", "get_value", "(", ")", "\n", "", "if", "self", ".", "_widget_type", "[", "name", "]", "==", "WidgetType", ".", "ArrayEdit", ":", "\n", "            ", "return", "self", ".", "_widget_dict", "[", "name", "]", ".", "get_value", "(", ")", "\n", "", "if", "self", ".", "_widget_type", "[", "name", "]", "==", "WidgetType", ".", "JsonEdit", ":", "\n", "            ", "return", "self", ".", "_widget_dict", "[", "name", "]", ".", "get_value", "(", ")", "\n", "", "if", "self", ".", "_widget_type", "[", "name", "]", "==", "WidgetType", ".", "ColorButton", ":", "\n", "            ", "return", "self", ".", "_widget_dict", "[", "name", "]", ".", "gl_color", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"unknown widget type\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.dumps": [[424, 431], ["control_panel.ControlPanel._widget_dict.items", "json.dumps", "control_panel.ControlPanel.get", "isinstance", "value_dict[].tolist"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.dumps", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.get"], ["", "", "def", "dumps", "(", "self", ")", ":", "\n", "        ", "value_dict", "=", "{", "}", "\n", "for", "n", ",", "w", "in", "self", ".", "_widget_dict", ".", "items", "(", ")", ":", "\n", "            ", "value_dict", "[", "n", "]", "=", "self", ".", "get", "(", "n", ",", "True", ")", "\n", "if", "isinstance", "(", "value_dict", "[", "n", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "value_dict", "[", "n", "]", "=", "value_dict", "[", "n", "]", ".", "tolist", "(", ")", "\n", "", "", "return", "json", ".", "dumps", "(", "value_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.loads": [[432, 437], ["json.loads", "control_panel.ControlPanel._widget_dict.items", "control_panel.ControlPanel.set"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.loads", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.set"], ["", "def", "loads", "(", "self", ",", "string", ")", ":", "\n", "        ", "value_dict", "=", "json", ".", "loads", "(", "string", ")", "\n", "for", "n", ",", "w", "in", "self", ".", "_widget_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "n", "in", "value_dict", ":", "\n", "                ", "self", ".", "set", "(", "n", ",", "value_dict", "[", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel._list_to_string": [[45, 47], ["str"], "function", ["None"], ["", "", "def", "_list_to_string", "(", "list_", ")", ":", "\n", "    ", "return", "\", \"", ".", "join", "(", "[", "str", "(", "l", ")", "for", "l", "in", "list_", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel._string_to_list": [[48, 51], ["string.replace().split", "dtype", "string.replace"], "function", ["None"], ["", "def", "_string_to_list", "(", "string", ",", "dtype", ")", ":", "\n", "    ", "str_list_", "=", "string", ".", "replace", "(", "\" \"", ",", "\"\"", ")", ".", "split", "(", "','", ")", "\n", "return", "[", "dtype", "(", "l", ")", "for", "l", "in", "str_list_", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel._ndarray_to_string": [[52, 54], ["json.dumps", "array.tolist"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.dumps"], ["", "def", "_ndarray_to_string", "(", "array", ")", ":", "\n", "    ", "return", "json", ".", "dumps", "(", "array", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel._string_to_ndarray": [[55, 57], ["numpy.array", "json.loads"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.loads"], ["", "def", "_string_to_ndarray", "(", "string", ",", "dtype", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "json", ".", "loads", "(", "string", ")", ",", "dtype", "=", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel._shape_check": [[58, 64], ["zip", "len", "len", "ValueError", "ValueError"], "function", ["None"], ["", "def", "_shape_check", "(", "array", ",", "shape", ")", ":", "\n", "    ", "if", "len", "(", "array", ".", "shape", ")", "!=", "len", "(", "shape", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"array must have same dim with shape\"", ")", "\n", "", "for", "s", ",", "sref", "in", "zip", "(", "array", ".", "shape", ",", "shape", ")", ":", "\n", "        ", "if", "sref", "is", "not", "None", "and", "s", "!=", "sref", ":", "\n", "            ", "raise", "ValueError", "(", "\"array must have same shape with shape\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel._jsonable_to_string": [[65, 67], ["json.dumps"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.dumps"], ["", "", "", "def", "_jsonable_to_string", "(", "jsonable", ")", ":", "\n", "    ", "return", "json", ".", "dumps", "(", "jsonable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel._string_to_jsonable": [[68, 70], ["json.loads"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.control_panel.ControlPanel.loads"], ["", "def", "_string_to_jsonable", "(", "string", ")", ":", "\n", "    ", "return", "json", ".", "loads", "(", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.backend.SecondBackend.__init__": [[32, 39], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "root_path", "=", "None", "\n", "self", ".", "info_path", "=", "None", "\n", "self", ".", "kitti_infos", "=", "None", "\n", "self", ".", "image_idxes", "=", "None", "\n", "self", ".", "dt_annos", "=", "None", "\n", "self", ".", "inference_ctx", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.backend.error_response": [[43, 49], ["print"], "function", ["None"], ["def", "error_response", "(", "msg", ")", ":", "\n", "    ", "response", "=", "{", "}", "\n", "response", "[", "\"status\"", "]", "=", "\"error\"", "\n", "response", "[", "\"message\"", "]", "=", "\"[ERROR]\"", "+", "msg", "\n", "print", "(", "\"[ERROR]\"", "+", "msg", ")", "\n", "return", "response", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.backend.readinfo": [[51, 82], ["app.route", "pathlib.Path", "print", "pathlib.Path", "flask.jsonify", "print", "pathlib.Path.exists", "print", "open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.Settings.load"], ["", "@", "app", ".", "route", "(", "'/api/readinfo'", ",", "methods", "=", "[", "'POST'", "]", ")", "\n", "def", "readinfo", "(", ")", ":", "\n", "    ", "global", "BACKEND", "\n", "instance", "=", "request", ".", "json", "\n", "root_path", "=", "Path", "(", "instance", "[", "\"root_path\"", "]", ")", "\n", "print", "(", "\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\"", ",", "root_path", ")", "\n", "\n", "response", "=", "{", "\"status\"", ":", "\"normal\"", "}", "\n", "if", "not", "(", "root_path", "/", "\"training\"", ")", ".", "exists", "(", ")", ":", "\n", "        ", "response", "[", "\"status\"", "]", "=", "\"error\"", "\n", "response", "[", "\"message\"", "]", "=", "\"ERROR: your root path is incorrect.\"", "\n", "print", "(", "\"ERROR: your root path is incorrect.7777777\"", ")", "\n", "return", "response", "\n", "", "BACKEND", ".", "root_path", "=", "root_path", "\n", "info_path", "=", "Path", "(", "instance", "[", "\"info_path\"", "]", ")", "\n", "\n", "if", "not", "info_path", ".", "exists", "(", ")", ":", "\n", "        ", "response", "[", "\"status\"", "]", "=", "\"error\"", "\n", "response", "[", "\"message\"", "]", "=", "\"ERROR: info file not exist.\"", "\n", "print", "(", "\"ERROR: your root path is incorrect.8888888\"", ")", "\n", "return", "response", "\n", "", "BACKEND", ".", "info_path", "=", "info_path", "\n", "with", "open", "(", "info_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "kitti_infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "BACKEND", ".", "kitti_infos", "=", "kitti_infos", "\n", "BACKEND", ".", "image_idxes", "=", "[", "info", "[", "\"image_idx\"", "]", "for", "info", "in", "kitti_infos", "]", "\n", "response", "[", "\"image_indexes\"", "]", "=", "BACKEND", ".", "image_idxes", "\n", "\n", "response", "=", "jsonify", "(", "results", "=", "[", "response", "]", ")", "\n", "response", ".", "headers", "[", "'Access-Control-Allow-Headers'", "]", "=", "'*'", "\n", "return", "response", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.backend.read_detection": [[83, 105], ["app.route", "pathlib.Path", "pathlib.Path().is_file", "print", "flask.jsonify", "backend.error_response", "backend.error_response", "second.data.kitti_common.get_label_annos", "len", "pathlib.Path", "open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.backend.error_response", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.backend.error_response", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_label_annos", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.Settings.load"], ["", "@", "app", ".", "route", "(", "'/api/read_detection'", ",", "methods", "=", "[", "'POST'", "]", ")", "\n", "def", "read_detection", "(", ")", ":", "\n", "    ", "global", "BACKEND", "\n", "instance", "=", "request", ".", "json", "\n", "det_path", "=", "Path", "(", "instance", "[", "\"det_path\"", "]", ")", "\n", "response", "=", "{", "\"status\"", ":", "\"normal\"", "}", "\n", "if", "BACKEND", ".", "root_path", "is", "None", ":", "\n", "        ", "return", "error_response", "(", "\"root path is not set\"", ")", "\n", "", "if", "BACKEND", ".", "kitti_infos", "is", "None", ":", "\n", "        ", "return", "error_response", "(", "\"kitti info is not loaded\"", ")", "\n", "\n", "", "if", "Path", "(", "det_path", ")", ".", "is_file", "(", ")", ":", "\n", "        ", "with", "open", "(", "det_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "dt_annos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "dt_annos", "=", "kitti", ".", "get_label_annos", "(", "det_path", ")", "\n", "", "print", "(", "\"da_annos shape:\"", ",", "len", "(", "dt_annos", ")", ")", "\n", "BACKEND", ".", "dt_annos", "=", "dt_annos", "\n", "#print(\"sssssssss\",dt_annos)", "\n", "response", "=", "jsonify", "(", "results", "=", "[", "response", "]", ")", "\n", "response", ".", "headers", "[", "'Access-Control-Allow-Headers'", "]", "=", "'*'", "\n", "return", "response", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.backend.get_pointcloud": [[107, 188], ["app.route", "BACKEND.image_idxes.index", "numpy.array", "numpy.tile", "str", "print", "base64.encodestring.decode", "flask.jsonify", "print", "backend.error_response", "backend.error_response", "len", "numpy.concatenate", "second.box_camera_to_lidar", "second.change_box3d_center_", "numpy.concatenate", "locs.tolist", "dims.tolist", "np.concatenate.tolist", "bbox.tolist", "labels[].tolist", "open", "base64.encodestring", "numpy.concatenate", "second.box_camera_to_lidar", "second.change_box3d_center_", "numpy.concatenate", "locs.tolist", "dims.tolist", "np.concatenate.tolist", "labels.tolist", "bbox.tolist", "dt_annos[].tolist", "pathlib.Path", "f.read", "backend.error_response", "numpy.zeros", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BoxCoder.decode", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.backend.error_response", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.backend.error_response", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box_camera_to_lidar", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.change_box3d_center_", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box_camera_to_lidar", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.change_box3d_center_", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.backend.error_response"], ["", "@", "app", ".", "route", "(", "'/api/get_pointcloud'", ",", "methods", "=", "[", "'POST'", "]", ")", "\n", "def", "get_pointcloud", "(", ")", ":", "\n", "    ", "global", "BACKEND", "\n", "instance", "=", "request", ".", "json", "\n", "response", "=", "{", "\"status\"", ":", "\"normal\"", "}", "\n", "if", "BACKEND", ".", "root_path", "is", "None", ":", "\n", "        ", "return", "error_response", "(", "\"root path is not set\"", ")", "\n", "", "if", "BACKEND", ".", "kitti_infos", "is", "None", ":", "\n", "        ", "return", "error_response", "(", "\"kitti info is not loaded\"", ")", "\n", "", "image_idx", "=", "instance", "[", "\"image_idx\"", "]", "\n", "idx", "=", "BACKEND", ".", "image_idxes", ".", "index", "(", "image_idx", ")", "\n", "kitti_info", "=", "BACKEND", ".", "kitti_infos", "[", "idx", "]", "\n", "rect", "=", "kitti_info", "[", "'calib/R0_rect'", "]", "\n", "P2", "=", "kitti_info", "[", "'calib/P2'", "]", "\n", "Trv2c", "=", "kitti_info", "[", "'calib/Tr_velo_to_cam'", "]", "\n", "img_shape", "=", "kitti_info", "[", "\"img_shape\"", "]", "# hw", "\n", "wh", "=", "np", ".", "array", "(", "img_shape", "[", ":", ":", "-", "1", "]", ")", "\n", "whwh", "=", "np", ".", "tile", "(", "wh", ",", "2", ")", "\n", "if", "'annos'", "in", "kitti_info", ":", "\n", "        ", "annos", "=", "kitti_info", "[", "'annos'", "]", "\n", "labels", "=", "annos", "[", "'name'", "]", "\n", "num_obj", "=", "len", "(", "[", "n", "for", "n", "in", "annos", "[", "'name'", "]", "if", "n", "!=", "'DontCare'", "]", ")", "\n", "dims", "=", "annos", "[", "'dimensions'", "]", "[", ":", "num_obj", "]", "\n", "loc", "=", "annos", "[", "'location'", "]", "[", ":", "num_obj", "]", "\n", "rots", "=", "annos", "[", "'rotation_y'", "]", "[", ":", "num_obj", "]", "\n", "bbox", "=", "annos", "[", "'bbox'", "]", "[", ":", "num_obj", "]", "/", "whwh", "\n", "gt_boxes_camera", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "gt_boxes", "=", "box_np_ops", ".", "box_camera_to_lidar", "(", "\n", "gt_boxes_camera", ",", "rect", ",", "Trv2c", ")", "\n", "box_np_ops", ".", "change_box3d_center_", "(", "gt_boxes", ",", "src", "=", "[", "0.5", ",", "0.5", ",", "0", "]", ",", "dst", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "locs", "=", "gt_boxes", "[", ":", ",", ":", "3", "]", "\n", "dims", "=", "gt_boxes", "[", ":", ",", "3", ":", "6", "]", "\n", "rots", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "[", "num_obj", ",", "2", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "-", "gt_boxes", "[", ":", ",", "6", ":", "7", "]", "]", ",", "axis", "=", "1", ")", "\n", "frontend_annos", "=", "{", "}", "\n", "response", "[", "\"locs\"", "]", "=", "locs", ".", "tolist", "(", ")", "\n", "response", "[", "\"dims\"", "]", "=", "dims", ".", "tolist", "(", ")", "\n", "response", "[", "\"rots\"", "]", "=", "rots", ".", "tolist", "(", ")", "\n", "response", "[", "\"bbox\"", "]", "=", "bbox", ".", "tolist", "(", ")", "\n", "\n", "response", "[", "\"labels\"", "]", "=", "labels", "[", ":", "num_obj", "]", ".", "tolist", "(", ")", "\n", "\n", "", "v_path", "=", "str", "(", "Path", "(", "BACKEND", ".", "root_path", ")", "/", "kitti_info", "[", "'velodyne_path'", "]", ")", "\n", "#v_path = str(Path(BACKEND.root_path) / '/testing/velodyne_reduced')", "\n", "print", "(", "\"*******************\"", ",", "v_path", ")", "\n", "with", "open", "(", "v_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "pc_str", "=", "base64", ".", "encodestring", "(", "f", ".", "read", "(", ")", ")", "\n", "", "response", "[", "\"pointcloud\"", "]", "=", "pc_str", ".", "decode", "(", "\"utf-8\"", ")", "\n", "#print(\"response['pointcloud']\",response['pointcloud'])", "\n", "if", "\"with_det\"", "in", "instance", "and", "instance", "[", "\"with_det\"", "]", ":", "\n", "        ", "if", "BACKEND", ".", "dt_annos", "is", "None", ":", "\n", "            ", "return", "error_response", "(", "\"det anno is not loaded\"", ")", "\n", "", "dt_annos", "=", "BACKEND", ".", "dt_annos", "[", "idx", "]", "\n", "dims", "=", "dt_annos", "[", "'dimensions'", "]", "\n", "num_obj", "=", "dims", ".", "shape", "[", "0", "]", "\n", "loc", "=", "dt_annos", "[", "'location'", "]", "\n", "rots", "=", "dt_annos", "[", "'rotation_y'", "]", "\n", "bbox", "=", "dt_annos", "[", "'bbox'", "]", "/", "whwh", "\n", "labels", "=", "dt_annos", "[", "'name'", "]", "\n", "\n", "dt_boxes_camera", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "dt_boxes", "=", "box_np_ops", ".", "box_camera_to_lidar", "(", "\n", "dt_boxes_camera", ",", "rect", ",", "Trv2c", ")", "\n", "box_np_ops", ".", "change_box3d_center_", "(", "dt_boxes", ",", "src", "=", "[", "0.5", ",", "0.5", ",", "0", "]", ",", "dst", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "locs", "=", "dt_boxes", "[", ":", ",", ":", "3", "]", "\n", "dims", "=", "dt_boxes", "[", ":", ",", "3", ":", "6", "]", "\n", "rots", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "[", "num_obj", ",", "2", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "-", "dt_boxes", "[", ":", ",", "6", ":", "7", "]", "]", ",", "axis", "=", "1", ")", "\n", "response", "[", "\"dt_locs\"", "]", "=", "locs", ".", "tolist", "(", ")", "\n", "response", "[", "\"dt_dims\"", "]", "=", "dims", ".", "tolist", "(", ")", "\n", "response", "[", "\"dt_rots\"", "]", "=", "rots", ".", "tolist", "(", ")", "\n", "response", "[", "\"dt_labels\"", "]", "=", "labels", ".", "tolist", "(", ")", "\n", "response", "[", "\"dt_bbox\"", "]", "=", "bbox", ".", "tolist", "(", ")", "\n", "response", "[", "\"dt_scores\"", "]", "=", "dt_annos", "[", "\"score\"", "]", ".", "tolist", "(", ")", "\n", "\n", "# if \"score\" in annos:", "\n", "#     response[\"score\"] = score.tolist()", "\n", "", "response", "=", "jsonify", "(", "results", "=", "[", "response", "]", ")", "\n", "response", ".", "headers", "[", "'Access-Control-Allow-Headers'", "]", "=", "'*'", "\n", "print", "(", "\"send response!\"", ")", "\n", "return", "response", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.backend.get_image": [[189, 224], ["app.route", "BACKEND.image_idxes.index", "flask.jsonify", "backend.error_response", "backend.error_response", "print", "base64.b64encode().decode", "print", "open", "f.read", "str", "base64.b64encode", "len"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.backend.error_response", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.backend.error_response", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_coders.BoxCoder.decode"], ["", "@", "app", ".", "route", "(", "'/api/get_image'", ",", "methods", "=", "[", "'POST'", "]", ")", "\n", "def", "get_image", "(", ")", ":", "\n", "    ", "global", "BACKEND", "\n", "instance", "=", "request", ".", "json", "\n", "response", "=", "{", "\"status\"", ":", "\"normal\"", "}", "\n", "if", "BACKEND", ".", "root_path", "is", "None", ":", "\n", "        ", "return", "error_response", "(", "\"root path is not set\"", ")", "\n", "", "if", "BACKEND", ".", "kitti_infos", "is", "None", ":", "\n", "        ", "return", "error_response", "(", "\"kitti info is not loaded\"", ")", "\n", "", "image_idx", "=", "instance", "[", "\"image_idx\"", "]", "\n", "idx", "=", "BACKEND", ".", "image_idxes", ".", "index", "(", "image_idx", ")", "\n", "kitti_info", "=", "BACKEND", ".", "kitti_infos", "[", "idx", "]", "\n", "rect", "=", "kitti_info", "[", "'calib/R0_rect'", "]", "\n", "P2", "=", "kitti_info", "[", "'calib/P2'", "]", "\n", "Trv2c", "=", "kitti_info", "[", "'calib/Tr_velo_to_cam'", "]", "\n", "if", "'img_path'", "in", "kitti_info", ":", "\n", "        ", "img_path", "=", "kitti_info", "[", "'img_path'", "]", "\n", "if", "img_path", "!=", "\"\"", ":", "\n", "            ", "image_path", "=", "BACKEND", ".", "root_path", "/", "img_path", "\n", "print", "(", "image_path", ")", "\n", "with", "open", "(", "str", "(", "image_path", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "image_str", "=", "f", ".", "read", "(", ")", "\n", "", "response", "[", "\"image_b64\"", "]", "=", "base64", ".", "b64encode", "(", "image_str", ")", ".", "decode", "(", "\"utf-8\"", ")", "\n", "response", "[", "\"image_b64\"", "]", "=", "'data:image/{};base64,'", ".", "format", "(", "image_path", ".", "suffix", "[", "1", ":", "]", ")", "+", "response", "[", "\"image_b64\"", "]", "\n", "'''#\n            response[\"rect\"] = rect.tolist()\n            response[\"P2\"] = P2.tolist()\n            response[\"Trv2c\"] = Trv2c.tolist()\n            response[\"L2CMat\"] = ((rect @ Trv2c).T).tolist()\n            response[\"C2LMat\"] = np.linalg.inv((rect @ Trv2c).T).tolist()\n            '''", "\n", "print", "(", "\"send an image with size {}!\"", ".", "format", "(", "len", "(", "response", "[", "\"image_b64\"", "]", ")", ")", ")", "\n", "", "", "response", "=", "jsonify", "(", "results", "=", "[", "response", "]", ")", "\n", "response", ".", "headers", "[", "'Access-Control-Allow-Headers'", "]", "=", "'*'", "\n", "return", "response", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.backend.build_network": [[225, 247], ["app.route", "pathlib.Path", "pathlib.Path", "second.pytorch.inference.TorchInferenceContext", "BACKEND.inference_ctx.build", "BACKEND.inference_ctx.restore", "flask.jsonify", "print", "backend.error_response", "backend.error_response", "pathlib.Path.exists", "backend.error_response", "pathlib.Path.exists", "backend.error_response", "str", "str"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.build", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.restore", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.backend.error_response", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.backend.error_response", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.backend.error_response", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.backend.error_response"], ["", "@", "app", ".", "route", "(", "'/api/build_network'", ",", "methods", "=", "[", "'POST'", "]", ")", "\n", "def", "build_network", "(", ")", ":", "\n", "    ", "global", "BACKEND", "\n", "instance", "=", "request", ".", "json", "\n", "cfg_path", "=", "Path", "(", "instance", "[", "\"config_path\"", "]", ")", "\n", "ckpt_path", "=", "Path", "(", "instance", "[", "\"checkpoint_path\"", "]", ")", "\n", "response", "=", "{", "\"status\"", ":", "\"normal\"", "}", "\n", "if", "BACKEND", ".", "root_path", "is", "None", ":", "\n", "        ", "return", "error_response", "(", "\"root path is not set\"", ")", "\n", "", "if", "BACKEND", ".", "kitti_infos", "is", "None", ":", "\n", "        ", "return", "error_response", "(", "\"kitti info is not loaded\"", ")", "\n", "", "if", "not", "cfg_path", ".", "exists", "(", ")", ":", "\n", "        ", "return", "error_response", "(", "\"config file not exist.\"", ")", "\n", "", "if", "not", "ckpt_path", ".", "exists", "(", ")", ":", "\n", "        ", "return", "error_response", "(", "\"ckpt file not exist.\"", ")", "\n", "", "BACKEND", ".", "inference_ctx", "=", "TorchInferenceContext", "(", ")", "\n", "BACKEND", ".", "inference_ctx", ".", "build", "(", "str", "(", "cfg_path", ")", ")", "\n", "BACKEND", ".", "inference_ctx", ".", "restore", "(", "str", "(", "ckpt_path", ")", ")", "\n", "response", "=", "jsonify", "(", "results", "=", "[", "response", "]", ")", "\n", "response", ".", "headers", "[", "'Access-Control-Allow-Headers'", "]", "=", "'*'", "\n", "print", "(", "\"build_network successful!\"", ")", "\n", "return", "response", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.backend.inference_by_idx": [[249, 315], ["app.route", "BACKEND.image_idxes.index", "str", "str", "numpy.fromfile().reshape", "numpy.array", "numpy.tile", "time.time", "BACKEND.inference_ctx.get_inference_input_dict", "print", "time.time", "print", "numpy.concatenate", "second.box_camera_to_lidar", "second.change_box3d_center_", "numpy.concatenate", "locs.tolist", "dims.tolist", "np.concatenate.tolist", "labels.tolist", "dt_annos[].tolist", "bbox.tolist", "flask.jsonify", "backend.error_response", "backend.error_response", "backend.error_response", "second.remove_outside_points", "print", "BACKEND.inference_ctx.ctx", "pathlib.Path", "pathlib.Path", "numpy.fromfile", "time.time", "BACKEND.inference_ctx.inference", "time.time", "numpy.zeros", "str"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.get_inference_input_dict", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box_camera_to_lidar", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.change_box3d_center_", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.backend.error_response", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.backend.error_response", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.backend.error_response", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.remove_outside_points", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.ctx", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.inference.InferenceContext.inference"], ["", "@", "app", ".", "route", "(", "'/api/inference_by_idx'", ",", "methods", "=", "[", "'POST'", "]", ")", "\n", "def", "inference_by_idx", "(", ")", ":", "\n", "    ", "global", "BACKEND", "\n", "instance", "=", "request", ".", "json", "\n", "response", "=", "{", "\"status\"", ":", "\"normal\"", "}", "\n", "if", "BACKEND", ".", "root_path", "is", "None", ":", "\n", "        ", "return", "error_response", "(", "\"root path is not set\"", ")", "\n", "", "if", "BACKEND", ".", "kitti_infos", "is", "None", ":", "\n", "        ", "return", "error_response", "(", "\"kitti info is not loaded\"", ")", "\n", "", "if", "BACKEND", ".", "inference_ctx", "is", "None", ":", "\n", "        ", "return", "error_response", "(", "\"inference_ctx is not loaded\"", ")", "\n", "", "image_idx", "=", "instance", "[", "\"image_idx\"", "]", "\n", "idx", "=", "BACKEND", ".", "image_idxes", ".", "index", "(", "image_idx", ")", "\n", "kitti_info", "=", "BACKEND", ".", "kitti_infos", "[", "idx", "]", "\n", "\n", "v_path", "=", "str", "(", "Path", "(", "BACKEND", ".", "root_path", ")", "/", "kitti_info", "[", "'velodyne_path'", "]", ")", "\n", "i_path", "=", "str", "(", "Path", "(", "BACKEND", ".", "root_path", ")", "/", "kitti_info", "[", "'img_path'", "]", ")", "\n", "num_features", "=", "4", "\n", "points", "=", "np", ".", "fromfile", "(", "\n", "str", "(", "v_path", ")", ",", "dtype", "=", "np", ".", "float32", ",", "\n", "count", "=", "-", "1", ")", ".", "reshape", "(", "[", "-", "1", ",", "num_features", "]", ")", "\n", "rect", "=", "kitti_info", "[", "'calib/R0_rect'", "]", "\n", "P2", "=", "kitti_info", "[", "'calib/P2'", "]", "\n", "Trv2c", "=", "kitti_info", "[", "'calib/Tr_velo_to_cam'", "]", "\n", "if", "'img_shape'", "in", "kitti_info", ":", "\n", "        ", "image_shape", "=", "kitti_info", "[", "'img_shape'", "]", "\n", "points", "=", "box_np_ops", ".", "remove_outside_points", "(", "\n", "points", ",", "rect", ",", "Trv2c", ",", "P2", ",", "image_shape", ")", "\n", "print", "(", "points", ".", "shape", "[", "0", "]", ")", "\n", "", "img_shape", "=", "kitti_info", "[", "\"img_shape\"", "]", "# hw", "\n", "wh", "=", "np", ".", "array", "(", "img_shape", "[", ":", ":", "-", "1", "]", ")", "\n", "whwh", "=", "np", ".", "tile", "(", "wh", ",", "2", ")", "\n", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "inputs", "=", "BACKEND", ".", "inference_ctx", ".", "get_inference_input_dict", "(", "\n", "kitti_info", ",", "points", ",", "i_path", ")", "\n", "print", "(", "\"input preparation time:\"", ",", "time", ".", "time", "(", ")", "-", "t", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "with", "BACKEND", ".", "inference_ctx", ".", "ctx", "(", ")", ":", "\n", "        ", "dt_annos", "=", "BACKEND", ".", "inference_ctx", ".", "inference", "(", "inputs", ")", "[", "0", "]", "\n", "", "print", "(", "\"detection time:\"", ",", "time", ".", "time", "(", ")", "-", "t", ")", "\n", "dims", "=", "dt_annos", "[", "'dimensions'", "]", "\n", "num_obj", "=", "dims", ".", "shape", "[", "0", "]", "\n", "loc", "=", "dt_annos", "[", "'location'", "]", "\n", "rots", "=", "dt_annos", "[", "'rotation_y'", "]", "\n", "labels", "=", "dt_annos", "[", "'name'", "]", "\n", "bbox", "=", "dt_annos", "[", "'bbox'", "]", "/", "whwh", "\n", "\n", "dt_boxes_camera", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "dt_boxes", "=", "box_np_ops", ".", "box_camera_to_lidar", "(", "\n", "dt_boxes_camera", ",", "rect", ",", "Trv2c", ")", "\n", "box_np_ops", ".", "change_box3d_center_", "(", "dt_boxes", ",", "src", "=", "[", "0.5", ",", "0.5", ",", "0", "]", ",", "dst", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "locs", "=", "dt_boxes", "[", ":", ",", ":", "3", "]", "\n", "dims", "=", "dt_boxes", "[", ":", ",", "3", ":", "6", "]", "\n", "rots", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "[", "num_obj", ",", "2", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "-", "dt_boxes", "[", ":", ",", "6", ":", "7", "]", "]", ",", "axis", "=", "1", ")", "\n", "response", "[", "\"dt_locs\"", "]", "=", "locs", ".", "tolist", "(", ")", "\n", "response", "[", "\"dt_dims\"", "]", "=", "dims", ".", "tolist", "(", ")", "\n", "response", "[", "\"dt_rots\"", "]", "=", "rots", ".", "tolist", "(", ")", "\n", "response", "[", "\"dt_labels\"", "]", "=", "labels", ".", "tolist", "(", ")", "\n", "response", "[", "\"dt_scores\"", "]", "=", "dt_annos", "[", "\"score\"", "]", ".", "tolist", "(", ")", "\n", "response", "[", "\"dt_bbox\"", "]", "=", "bbox", ".", "tolist", "(", ")", "\n", "\n", "response", "=", "jsonify", "(", "results", "=", "[", "response", "]", ")", "\n", "response", ".", "headers", "[", "'Access-Control-Allow-Headers'", "]", "=", "'*'", "\n", "return", "response", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.backend.main": [[317, 319], ["app.run"], "function", ["None"], ["", "def", "main", "(", "port", "=", "16666", ")", ":", "\n", "    ", "app", ".", "run", "(", "host", "=", "'127.0.0.1'", ",", "threaded", "=", "True", ",", "port", "=", "port", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.GLLabelItem.__init__": [[19, 27], ["PyQt5.QtGui.QFont", "pyqtgraph.opengl.GLGraphicsItem.GLGraphicsItem.__init__"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pos", "=", "None", ",", "text", "=", "None", ",", "color", "=", "None", ",", "font", "=", "QtGui", ".", "QFont", "(", ")", ")", ":", "\n", "        ", "GLGraphicsItem", ".", "__init__", "(", "self", ")", "\n", "self", ".", "color", "=", "color", "\n", "if", "color", "is", "None", ":", "\n", "            ", "self", ".", "color", "=", "QtCore", ".", "Qt", ".", "white", "\n", "", "self", ".", "text", "=", "text", "\n", "self", ".", "pos", "=", "pos", "\n", "self", ".", "font", "=", "font", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.GLLabelItem.setGLViewWidget": [[29, 31], ["None"], "methods", ["None"], ["", "def", "setGLViewWidget", "(", "self", ",", "GLViewWidget", ")", ":", "\n", "        ", "self", ".", "GLViewWidget", "=", "GLViewWidget", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.GLLabelItem.setData": [[32, 38], ["glwidget.GLLabelItem.update"], "methods", ["None"], ["", "def", "setData", "(", "self", ",", "pos", ",", "text", ",", "color", ",", "font", ")", ":", "\n", "        ", "self", ".", "text", "=", "text", "\n", "self", ".", "pos", "=", "pos", "\n", "self", ".", "color", "=", "color", "\n", "self", ".", "font", "=", "font", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.GLLabelItem.paint": [[39, 47], ["glwidget.GLLabelItem.GLViewWidget.qglColor", "isinstance", "zip", "glwidget.GLLabelItem.GLViewWidget.renderText", "glwidget.GLLabelItem.GLViewWidget.renderText"], "methods", ["None"], ["", "def", "paint", "(", "self", ")", ":", "\n", "        ", "self", ".", "GLViewWidget", ".", "qglColor", "(", "self", ".", "color", ")", "\n", "if", "self", ".", "pos", "is", "not", "None", "and", "self", ".", "text", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "pos", ",", "(", "list", ",", "tuple", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "                ", "for", "p", ",", "text", "in", "zip", "(", "self", ".", "pos", ",", "self", ".", "text", ")", ":", "\n", "                    ", "self", ".", "GLViewWidget", ".", "renderText", "(", "*", "p", ",", "text", ",", "self", ".", "font", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "GLViewWidget", ".", "renderText", "(", "*", "self", ".", "pos", ",", "self", ".", "text", ",", "self", ".", "font", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.__init__": [[170, 180], ["pyqtgraph.GLViewWidget.__init__", "glwidget.KittiGLViewWidget.noRepeatKeys.append", "glwidget.KittiGLViewWidget.noRepeatKeys.append", "glwidget.KittiGLViewWidget.noRepeatKeys.append", "glwidget.KittiGLViewWidget.noRepeatKeys.append", "pyqtgraph.GLAxisItem", "glwidget.KittiGLViewWidget.addItem"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__"], ["def", "__init__", "(", "self", ",", "parent", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "parent", "=", "parent", ")", "\n", "self", ".", "_named_items", "=", "{", "}", "\n", "self", ".", "noRepeatKeys", ".", "append", "(", "QtCore", ".", "Qt", ".", "Key_W", ")", "\n", "self", ".", "noRepeatKeys", ".", "append", "(", "QtCore", ".", "Qt", ".", "Key_S", ")", "\n", "self", ".", "noRepeatKeys", ".", "append", "(", "QtCore", ".", "Qt", ".", "Key_A", ")", "\n", "self", ".", "noRepeatKeys", ".", "append", "(", "QtCore", ".", "Qt", ".", "Key_D", ")", "\n", "self", ".", "w_gl_axis", "=", "gl", ".", "GLAxisItem", "(", "\n", "size", "=", "None", ",", "antialias", "=", "True", ",", "glOptions", "=", "'translucent'", ")", "\n", "self", ".", "addItem", "(", "self", ".", "w_gl_axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.scatter": [[182, 197], ["glwidget._extend_color_if_necessary", "pyqtgraph.GLScatterPlotItem", "glwidget.KittiGLViewWidget.addItem", "glwidget.KittiGLViewWidget._named_items[].setData", "pyqtgraph.GLScatterPlotItem.setGLOptions"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget._extend_color_if_necessary", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.GLLabelItem.setData"], ["", "def", "scatter", "(", "self", ",", "name", ",", "points", ",", "colors", "=", "GLColor", ".", "Write", ",", "alphas", "=", "0.5", ",", "\n", "size", "=", "0.1", ",", "translucent", "=", "False", ")", ":", "\n", "# if isinstance(colors, tuple):", "\n", "#     colors = gl_color(colors, alphas)", "\n", "        ", "colors", "=", "_extend_color_if_necessary", "(", "colors", ",", "points", ".", "shape", "[", "0", "]", ",", "alphas", ")", "\n", "if", "name", "not", "in", "self", ".", "_named_items", ":", "\n", "            ", "w_gl_scatter", "=", "gl", ".", "GLScatterPlotItem", "(", "\n", "pos", "=", "points", ",", "size", "=", "size", ",", "color", "=", "colors", ",", "pxMode", "=", "False", ")", "\n", "if", "translucent", ":", "\n", "                ", "w_gl_scatter", ".", "setGLOptions", "(", "'translucent'", ")", "\n", "", "self", ".", "_named_items", "[", "name", "]", "=", "w_gl_scatter", "\n", "self", ".", "addItem", "(", "w_gl_scatter", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_named_items", "[", "name", "]", ".", "setData", "(", "\n", "pos", "=", "points", ",", "size", "=", "size", ",", "color", "=", "colors", ",", "pxMode", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.circles": [[198, 215], ["zip", "numpy.concatenate", "glwidget.KittiGLViewWidget.lines", "isinstance", "isinstance", "numpy.full", "glwidget.get_lines_for_circle", "numpy.concatenate", "lines_list.append", "get_lines_for_circle.reshape", "len", "numpy.full"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.lines", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.get_lines_for_circle"], ["", "", "def", "circles", "(", "self", ",", "name", ",", "poses", ",", "radiuses", ",", "colors", "=", "GLColor", ".", "Red", ",", "num_points", "=", "100", ",", "alphas", "=", "1.0", ",", "\n", "width", "=", "1.0", ",", "antialias", "=", "True", ")", ":", "\n", "# if isinstance(colors, tuple):", "\n", "#     colors = gl_color(colors, alphas)", "\n", "\n", "        ", "if", "not", "isinstance", "(", "radiuses", ",", "(", "list", ",", "tuple", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "            ", "assert", "isinstance", "(", "poses", ",", "(", "list", ",", "tuple", ",", "np", ".", "ndarray", ")", ")", "\n", "radiuses", "=", "np", ".", "full", "(", "[", "len", "(", "poses", ")", "]", ",", "radiuses", ")", "\n", "", "lines_list", "=", "[", "]", "\n", "for", "pos", ",", "radius", "in", "zip", "(", "poses", ",", "radiuses", ")", ":", "\n", "            ", "lines", "=", "get_lines_for_circle", "(", "radius", ",", "num_points", ")", "\n", "\n", "shape", "=", "[", "lines", ".", "shape", "[", "0", "]", ",", "2", ",", "1", "]", "\n", "lines_with_z", "=", "np", ".", "concatenate", "(", "[", "lines", ",", "np", ".", "full", "(", "shape", ",", "pos", "[", "-", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "lines_list", ".", "append", "(", "lines_with_z", ")", "\n", "", "lines", "=", "np", ".", "concatenate", "(", "lines_list", ",", "axis", "=", "0", ")", "\n", "return", "self", ".", "lines", "(", "name", ",", "lines", ".", "reshape", "(", "-", "1", ",", "3", ")", ",", "colors", ",", "alphas", ",", "width", ",", "antialias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.lines": [[217, 239], ["glwidget._extend_color_if_necessary", "pyqtgraph.GLLinePlotItem", "glwidget.KittiGLViewWidget.addItem", "glwidget.KittiGLViewWidget._named_items[].setData"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget._extend_color_if_necessary", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.GLLabelItem.setData"], ["", "def", "lines", "(", "self", ",", "name", ",", "lines", ",", "colors", ",", "alphas", "=", "1.0", ",", "width", "=", "1.0", ",", "\n", "antialias", "=", "True", ")", ":", "\n", "        ", "if", "lines", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "colors", "=", "_extend_color_if_necessary", "(", "colors", ",", "lines", ".", "shape", "[", "0", "]", ",", "alphas", ")", "\n", "if", "name", "not", "in", "self", ".", "_named_items", ":", "\n", "            ", "w_gl_item", "=", "gl", ".", "GLLinePlotItem", "(", "\n", "pos", "=", "lines", ",", "\n", "color", "=", "colors", ",", "\n", "width", "=", "width", ",", "\n", "antialias", "=", "antialias", ",", "\n", "mode", "=", "'lines'", ")", "\n", "self", ".", "_named_items", "[", "name", "]", "=", "w_gl_item", "\n", "self", ".", "addItem", "(", "w_gl_item", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_named_items", "[", "name", "]", ".", "setData", "(", "\n", "pos", "=", "lines", ",", "\n", "color", "=", "colors", ",", "\n", "width", "=", "width", ",", "\n", "antialias", "=", "antialias", ",", "\n", "mode", "=", "'lines'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.surface": [[240, 250], ["glwidget._extend_color_if_necessary", "list", "pyqtgraph.GLSurfacePlotItem", "glwidget.KittiGLViewWidget.addItem", "glwidget.KittiGLViewWidget._named_items[].setData"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget._extend_color_if_necessary", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.GLLabelItem.setData"], ["", "", "def", "surface", "(", "self", ",", "name", ",", "x", ",", "y", ",", "z", ",", "colors", ",", "alphas", "=", "1.0", ")", ":", "\n", "        ", "colors", "=", "_extend_color_if_necessary", "(", "colors", ",", "list", "(", "z", ".", "shape", ")", ",", "alphas", ")", "\n", "if", "name", "not", "in", "self", ".", "_named_items", ":", "\n", "            ", "w_gl_item", "=", "gl", ".", "GLSurfacePlotItem", "(", "\n", "x", "=", "x", ",", "y", "=", "y", ",", "z", "=", "z", ",", "shader", "=", "None", ",", "colors", "=", "colors", ",", "glOptions", "=", "'translucent'", ")", "\n", "self", ".", "_named_items", "[", "name", "]", "=", "w_gl_item", "\n", "self", ".", "addItem", "(", "w_gl_item", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_named_items", "[", "name", "]", ".", "setData", "(", "\n", "x", "=", "x", ",", "y", "=", "y", ",", "z", "=", "z", ",", "colors", "=", "colors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.labels": [[251, 267], ["PyQt5.QtGui.QFont", "isinstance", "isinstance", "PyQt5.QtGui.QFont.setPointSizeF", "glwidget._glcolor_to_qtcolor", "glwidget._pltcolor_to_qtcolor", "glwidget.GLLabelItem", "glwidget.GLLabelItem.setGLViewWidget", "glwidget.KittiGLViewWidget.addItem", "glwidget.KittiGLViewWidget._named_items[].setData"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget._glcolor_to_qtcolor", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget._pltcolor_to_qtcolor", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.GLLabelItem.setGLViewWidget", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.GLLabelItem.setData"], ["", "", "def", "labels", "(", "self", ",", "name", ",", "pos", ",", "labels", ",", "color", ",", "size", "=", "None", ",", "alpha", "=", "1.0", ")", ":", "\n", "        ", "font", "=", "QtGui", ".", "QFont", "(", ")", "\n", "if", "size", "is", "not", "None", ":", "\n", "            ", "font", ".", "setPointSizeF", "(", "size", ")", "\n", "", "if", "isinstance", "(", "color", ",", "GLColor", ")", ":", "\n", "            ", "color", "=", "_glcolor_to_qtcolor", "(", "color", ")", "\n", "", "if", "isinstance", "(", "color", ",", "str", ")", ":", "\n", "            ", "color", "=", "_pltcolor_to_qtcolor", "(", "color", ")", "\n", "\n", "", "if", "name", "not", "in", "self", ".", "_named_items", ":", "\n", "            ", "w_gl_item", "=", "GLLabelItem", "(", "pos", "=", "pos", ",", "text", "=", "labels", ",", "color", "=", "color", ",", "font", "=", "font", ")", "\n", "self", ".", "_named_items", "[", "name", "]", "=", "w_gl_item", "\n", "w_gl_item", ".", "setGLViewWidget", "(", "self", ")", "\n", "self", ".", "addItem", "(", "w_gl_item", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_named_items", "[", "name", "]", ".", "setData", "(", "pos", "=", "pos", ",", "text", "=", "labels", ",", "color", "=", "color", ",", "font", "=", "font", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.remove": [[268, 275], ["glwidget.KittiGLViewWidget.removeItem", "glwidget.KittiGLViewWidget._named_items.pop", "print"], "methods", ["None"], ["", "", "def", "remove", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "_named_items", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "removeItem", "(", "self", ".", "_named_items", "[", "name", "]", ")", "\n", "return", "self", ".", "_named_items", ".", "pop", "(", "name", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "\"remove failed.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.boxes3d": [[276, 305], ["glwidget._extend_color_if_necessary", "zip", "glwidget.KittiGLViewWidget.lines", "glwidget.KittiGLViewWidget.remove", "numpy.array", "numpy.concatenate.append", "numpy.array", "numpy.concatenate.append", "numpy.concatenate", "numpy.concatenate", "list", "range", "len"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget._extend_color_if_necessary", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.lines", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.remove"], ["", "", "", "def", "boxes3d", "(", "self", ",", "\n", "name", ",", "\n", "boxes", ",", "\n", "colors", ",", "\n", "width", "=", "1.0", ",", "\n", "alpha", "=", "1.0", ")", ":", "\n", "        ", "if", "boxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "self", ".", "remove", "(", "name", ")", "\n", "return", "\n", "# boxes = np.zeros([0, 8, 3])", "\n", "", "colors", "=", "_extend_color_if_necessary", "(", "colors", ",", "boxes", ".", "shape", "[", "0", "]", ",", "alpha", ")", "\n", "total_lines", "=", "[", "]", "\n", "total_colors", "=", "[", "]", "\n", "for", "box", ",", "facecolor", "in", "zip", "(", "boxes", ",", "colors", ")", ":", "\n", "            ", "lines", "=", "np", ".", "array", "(", "[", "\n", "box", "[", "0", "]", ",", "box", "[", "1", "]", ",", "box", "[", "1", "]", ",", "box", "[", "2", "]", ",", "box", "[", "2", "]", ",", "box", "[", "3", "]", ",", "box", "[", "3", "]", ",", "box", "[", "0", "]", ",", "\n", "box", "[", "1", "]", ",", "box", "[", "5", "]", ",", "box", "[", "5", "]", ",", "box", "[", "4", "]", ",", "box", "[", "4", "]", ",", "box", "[", "0", "]", ",", "box", "[", "2", "]", ",", "box", "[", "6", "]", ",", "\n", "box", "[", "6", "]", ",", "box", "[", "7", "]", ",", "box", "[", "7", "]", ",", "box", "[", "3", "]", ",", "box", "[", "5", "]", ",", "box", "[", "6", "]", ",", "box", "[", "4", "]", ",", "box", "[", "7", "]", "\n", "]", ")", "\n", "total_lines", ".", "append", "(", "lines", ")", "\n", "color", "=", "np", ".", "array", "(", "[", "list", "(", "facecolor", ")", "for", "i", "in", "range", "(", "len", "(", "lines", ")", ")", "]", ")", "\n", "total_colors", ".", "append", "(", "color", ")", "\n", "", "if", "boxes", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "            ", "total_lines", "=", "np", ".", "concatenate", "(", "total_lines", ",", "axis", "=", "0", ")", "\n", "total_colors", "=", "np", ".", "concatenate", "(", "total_colors", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "total_lines", "=", "None", "\n", "total_colors", "=", "None", "\n", "", "self", ".", "lines", "(", "name", ",", "total_lines", ",", "total_colors", ",", "alphas", "=", "alpha", ",", "width", "=", "width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.set_camera_position": [[306, 322], ["glwidget.KittiGLViewWidget.update", "glwidget.KittiGLViewWidget.opts[].setX", "glwidget.KittiGLViewWidget.opts[].setY", "glwidget.KittiGLViewWidget.opts[].setZ"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.GLTextItem.setX", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.GLTextItem.setY", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.bbox_plot.GLTextItem.setZ"], ["", "def", "set_camera_position", "(", "self", ",", "\n", "center", "=", "None", ",", "\n", "distance", "=", "None", ",", "\n", "elevation", "=", "None", ",", "\n", "azimuth", "=", "None", ")", ":", "\n", "        ", "if", "center", "is", "not", "None", ":", "\n", "            ", "self", ".", "opts", "[", "'center'", "]", ".", "setX", "(", "center", "[", "0", "]", ")", "\n", "self", ".", "opts", "[", "'center'", "]", ".", "setY", "(", "center", "[", "1", "]", ")", "\n", "self", ".", "opts", "[", "'center'", "]", ".", "setZ", "(", "center", "[", "2", "]", ")", "\n", "", "if", "distance", "is", "not", "None", ":", "\n", "            ", "self", ".", "opts", "[", "'distance'", "]", "=", "distance", "\n", "", "if", "elevation", "is", "not", "None", ":", "\n", "            ", "self", ".", "opts", "[", "'elevation'", "]", "=", "elevation", "\n", "", "if", "azimuth", "is", "not", "None", ":", "\n", "            ", "self", ".", "opts", "[", "'azimuth'", "]", "=", "azimuth", "\n", "", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.reset_camera": [[323, 327], ["glwidget.KittiGLViewWidget.set_camera_position", "glwidget.KittiGLViewWidget.update"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.set_camera_position"], ["", "def", "reset_camera", "(", "self", ")", ":", "\n", "        ", "self", ".", "set_camera_position", "(", "\n", "center", "=", "(", "5", ",", "0", ",", "0", ")", ",", "distance", "=", "20", ",", "azimuth", "=", "-", "180", ",", "elevation", "=", "30", ")", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.evalKeyState": [[328, 358], ["len", "glwidget.KittiGLViewWidget.keyTimer.stop", "glwidget.KittiGLViewWidget.keyTimer.start", "glwidget.KittiGLViewWidget.orbit", "glwidget.KittiGLViewWidget.orbit", "glwidget.KittiGLViewWidget.orbit", "glwidget.KittiGLViewWidget.orbit", "glwidget.KittiGLViewWidget.camera_move", "glwidget.KittiGLViewWidget.camera_move", "glwidget.KittiGLViewWidget.camera_move", "glwidget.KittiGLViewWidget.camera_move", "glwidget.KittiGLViewWidget.reset_camera"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.utils.progress_bar.ProgressBar.start", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.camera_move", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.camera_move", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.camera_move", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.camera_move", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.reset_camera"], ["", "def", "evalKeyState", "(", "self", ")", ":", "\n", "        ", "speed", "=", "2.0", "\n", "world_speed", "=", "0.32", "\n", "if", "len", "(", "self", ".", "keysPressed", ")", ">", "0", ":", "\n", "            ", "for", "key", "in", "self", ".", "keysPressed", ":", "\n", "                ", "if", "key", "==", "QtCore", ".", "Qt", ".", "Key_Right", ":", "\n", "                    ", "self", ".", "orbit", "(", "azim", "=", "-", "speed", ",", "elev", "=", "0", ")", "\n", "", "elif", "key", "==", "QtCore", ".", "Qt", ".", "Key_Left", ":", "\n", "                    ", "self", ".", "orbit", "(", "azim", "=", "speed", ",", "elev", "=", "0", ")", "\n", "", "elif", "key", "==", "QtCore", ".", "Qt", ".", "Key_Up", ":", "\n", "                    ", "self", ".", "orbit", "(", "azim", "=", "0", ",", "elev", "=", "-", "speed", ")", "\n", "", "elif", "key", "==", "QtCore", ".", "Qt", ".", "Key_Down", ":", "\n", "                    ", "self", ".", "orbit", "(", "azim", "=", "0", ",", "elev", "=", "speed", ")", "\n", "", "elif", "key", "==", "QtCore", ".", "Qt", ".", "Key_W", ":", "\n", "                    ", "self", ".", "camera_move", "(", "dx", "=", "world_speed", ")", "\n", "", "elif", "key", "==", "QtCore", ".", "Qt", ".", "Key_S", ":", "\n", "                    ", "self", ".", "camera_move", "(", "dx", "=", "-", "world_speed", ")", "\n", "", "elif", "key", "==", "QtCore", ".", "Qt", ".", "Key_A", ":", "\n", "                    ", "self", ".", "camera_move", "(", "dy", "=", "world_speed", ")", "\n", "", "elif", "key", "==", "QtCore", ".", "Qt", ".", "Key_D", ":", "\n", "                    ", "self", ".", "camera_move", "(", "dy", "=", "-", "world_speed", ")", "\n", "", "elif", "key", "==", "QtCore", ".", "Qt", ".", "Key_Backspace", ":", "\n", "                    ", "self", ".", "reset_camera", "(", ")", "\n", "", "elif", "key", "==", "QtCore", ".", "Qt", ".", "Key_PageUp", ":", "\n", "                    ", "pass", "\n", "", "elif", "key", "==", "QtCore", ".", "Qt", ".", "Key_PageDown", ":", "\n", "                    ", "pass", "\n", "", "self", ".", "keyTimer", ".", "start", "(", "16", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "keyTimer", ".", "stop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.camera_center": [[359, 364], ["numpy.array", "c.x", "c.y", "c.z"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "camera_center", "(", "self", ")", ":", "\n", "        ", "c", "=", "self", ".", "opts", "[", "\"center\"", "]", "\n", "center", "=", "[", "c", ".", "x", "(", ")", ",", "c", ".", "y", "(", ")", ",", "c", ".", "z", "(", ")", "]", "\n", "return", "np", ".", "array", "(", "center", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.camera_position": [[365, 375], ["glwidget.sph_to_device_pos", "c.x", "c.y", "c.z"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.sph_to_device_pos"], ["", "@", "property", "\n", "def", "camera_position", "(", "self", ")", ":", "\n", "        ", "c", "=", "self", ".", "opts", "[", "\"center\"", "]", "\n", "center", "=", "[", "c", ".", "x", "(", ")", ",", "c", ".", "y", "(", ")", ",", "c", ".", "z", "(", ")", "]", "\n", "elevation", "=", "self", ".", "opts", "[", "'elevation'", "]", "/", "180", "*", "np", ".", "pi", "\n", "azimuth", "=", "self", ".", "opts", "[", "'azimuth'", "]", "/", "180", "*", "np", ".", "pi", "\n", "distance", "=", "self", ".", "opts", "[", "'distance'", "]", "\n", "\n", "camera_pos", "=", "sph_to_device_pos", "(", "elevation", ",", "azimuth", ",", "distance", ",", "center", ")", "\n", "return", "camera_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.camera_vector": [[376, 380], ["numpy.linalg.norm"], "methods", ["None"], ["", "@", "property", "\n", "def", "camera_vector", "(", "self", ")", ":", "\n", "        ", "vec", "=", "self", ".", "camera_position", "-", "self", ".", "camera_center", "\n", "return", "vec", "/", "np", ".", "linalg", ".", "norm", "(", "vec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.set_camera_position_cartesian": [[381, 386], ["glwidget.device_pos_to_sph", "glwidget.KittiGLViewWidget.setCameraPosition"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.device_pos_to_sph"], ["", "def", "set_camera_position_cartesian", "(", "self", ",", "camera_pos", ",", "center", ")", ":", "\n", "        ", "elevation", ",", "azimuth", ",", "distance", "=", "device_pos_to_sph", "(", "camera_pos", ",", "center", ")", "\n", "elevation", "=", "elevation", "*", "180", "/", "np", ".", "pi", "\n", "azimuth", "=", "azimuth", "*", "180", "/", "np", ".", "pi", "\n", "self", ".", "setCameraPosition", "(", "center", ",", "distance", ",", "elevation", ",", "azimuth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.camera_move": [[387, 402], ["glwidget.get_RT_", "glwidget.KittiGLViewWidget.world_move", "c.x", "c.y", "c.z", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.linalg.inv"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.get_RT_", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.world_move"], ["", "def", "camera_move", "(", "self", ",", "dx", "=", "0", ",", "dy", "=", "0", ",", "dz", "=", "0", ")", ":", "\n", "        ", "xp", "=", "[", "dx", ",", "0", ",", "0", "]", "\n", "yp", "=", "[", "0", ",", "dy", ",", "0", "]", "\n", "zp", "=", "[", "0", ",", "0", ",", "dz", "]", "\n", "c", "=", "self", ".", "opts", "[", "\"center\"", "]", "\n", "center", "=", "[", "c", ".", "x", "(", ")", ",", "c", ".", "y", "(", ")", ",", "c", ".", "z", "(", ")", "]", "\n", "elevation", "=", "self", ".", "opts", "[", "'elevation'", "]", "/", "180", "*", "np", ".", "pi", "\n", "azimuth", "=", "self", ".", "opts", "[", "'azimuth'", "]", "/", "180", "*", "np", ".", "pi", "\n", "distance", "=", "self", ".", "opts", "[", "'distance'", "]", "\n", "R", ",", "T", "=", "get_RT_", "(", "elevation", ",", "azimuth", ",", "distance", ",", "center", ")", "\n", "dx_world", "=", "np", ".", "linalg", ".", "inv", "(", "R", ")", "@", "(", "xp", ")", "\n", "dy_world", "=", "np", ".", "linalg", ".", "inv", "(", "R", ")", "@", "(", "yp", ")", "\n", "dz_world", "=", "np", ".", "linalg", ".", "inv", "(", "R", ")", "@", "(", "zp", ")", "\n", "# print(dx_world)", "\n", "return", "self", ".", "world_move", "(", "*", "(", "dx_world", "+", "dy_world", "+", "dz_world", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.world_move": [[403, 407], ["glwidget.KittiGLViewWidget.setCameraPosition", "c.x", "c.y", "c.z"], "methods", ["None"], ["", "def", "world_move", "(", "self", ",", "dx", "=", "0", ",", "dy", "=", "0", ",", "dz", "=", "0", ")", ":", "\n", "        ", "c", "=", "self", ".", "opts", "[", "\"center\"", "]", "\n", "center_new", "=", "[", "c", ".", "x", "(", ")", "+", "dx", ",", "c", ".", "y", "(", ")", "+", "dy", ",", "c", ".", "z", "(", ")", "+", "dz", "]", "\n", "self", ".", "setCameraPosition", "(", "center", "=", "center_new", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.mousePressEvent": [[408, 411], ["super().mousePressEvent", "glwidget.KittiGLViewWidget.mousePressed.emit", "ev.x", "ev.y"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.mousePressEvent"], ["", "def", "mousePressEvent", "(", "self", ",", "ev", ")", ":", "\n", "        ", "super", "(", ")", ".", "mousePressEvent", "(", "ev", ")", "\n", "self", ".", "mousePressed", ".", "emit", "(", "(", "ev", ".", "x", "(", ")", ",", "ev", ".", "y", "(", ")", ")", ")", "\n", "# print(ev.x(), ev.y())", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.KittiGLViewWidget.mouseReleaseEvent": [[412, 446], ["glwidget.KittiGLViewWidget.width", "glwidget.KittiGLViewWidget.height", "glwidget.world2camera", "glwidget.sph_to_device_pos", "c.x", "c.y", "c.z", "numpy.array", "c.x", "c.y", "c.z"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.world2camera", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.sph_to_device_pos"], ["", "def", "mouseReleaseEvent", "(", "self", ",", "ev", ")", ":", "\n", "\n", "# Example item selection code:", "\n", "# region = (ev.pos().x() - 5, ev.pos().y() - 5, 10, 10)", "\n", "# print(self.itemsAt(region))", "\n", "        ", "c", "=", "self", ".", "opts", "[", "\"center\"", "]", "\n", "camera_info", "=", "(", "f\"fov={self.opts['fov']:.2f}\\n\"", "\n", "f\"center=[{c.x():.2f}, {c.y():.2f}, {c.z():.2f}]\\n\"", "\n", "f\"distance={self.opts['distance']:.2f}\\n\"", "\n", "f\"elevation={self.opts['elevation']:.2f}\\n\"", "\n", "f\"azimuth={self.opts['azimuth']:.2f}\"", ")", "\n", "# print(camera_info)", "\n", "# w_norm = self.width() / self.height()", "\n", "# h_norm = 1.0", "\n", "w_norm", "=", "self", ".", "width", "(", ")", "\n", "h_norm", "=", "self", ".", "height", "(", ")", "\n", "elevation", "=", "self", ".", "opts", "[", "'elevation'", "]", "/", "180", "*", "np", ".", "pi", "\n", "azimuth", "=", "self", ".", "opts", "[", "'azimuth'", "]", "/", "180", "*", "np", ".", "pi", "\n", "distance", "=", "self", ".", "opts", "[", "'distance'", "]", "\n", "center", "=", "[", "c", ".", "x", "(", ")", ",", "c", ".", "y", "(", ")", ",", "c", ".", "z", "(", ")", "]", "\n", "# center = [0, 0, 0]", "\n", "fov", "=", "self", ".", "opts", "[", "'fov'", "]", "/", "180", "*", "np", ".", "pi", "\n", "# point = [12.35, 1.89, -1.82]", "\n", "point", "=", "[", "0", ",", "0", ",", "0.", "]", "\n", "ret", "=", "world2camera", "(", "\n", "np", ".", "array", "(", "point", ")", ",", "elevation", ",", "azimuth", ",", "distance", ",", "center", ",", "fov", ",", "w_norm", ",", "\n", "h_norm", ")", "\n", "# print(ret[:2] / ret[2])", "\n", "# print(ret)", "\n", "# print(self.opts['center'])", "\n", "# print(self.opts['elevation'])", "\n", "# print(self.opts['azimuth'])", "\n", "# print(self.opts['distance'])", "\n", "pos", "=", "sph_to_device_pos", "(", "elevation", ",", "azimuth", ",", "distance", ",", "center", ")", "\n", "# print(\"camera pos:\", pos)", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color": [[49, 51], ["None"], "function", ["None"], ["", "", "", "", "def", "gl_color", "(", "color", ",", "alpha", "=", "1.0", ")", ":", "\n", "    ", "return", "(", "*", "color", ".", "value", ",", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget._extend_color_if_necessary": [[53, 73], ["numpy.prod", "isinstance", "numpy.array().reshape", "isinstance", "numpy.array", "isinstance", "isinstance", "range", "isinstance", "numpy.array", "len", "gl_color.append", "glwidget.gl_color", "len", "glwidget.gl_color", "range"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color"], ["", "def", "_extend_color_if_necessary", "(", "colors", ",", "shape", ",", "alphas", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "shape", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "shape", "=", "[", "shape", "]", "\n", "", "num", "=", "np", ".", "prod", "(", "shape", ")", "\n", "if", "isinstance", "(", "colors", ",", "(", "list", ",", "tuple", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "        ", "colors_np", "=", "np", ".", "array", "(", "colors", ")", "\n", "if", "colors_np", ".", "shape", "[", "0", "]", "==", "4", "and", "len", "(", "colors_np", ".", "shape", ")", "==", "1", ":", "\n", "            ", "colors", "=", "(", "*", "colors", ",", ")", "\n", "", "elif", "colors_np", ".", "shape", "[", "0", "]", "==", "3", "and", "len", "(", "colors_np", ".", "shape", ")", "==", "1", ":", "\n", "            ", "colors", "=", "(", "*", "colors", ",", "1.0", ")", "\n", "", "", "if", "not", "isinstance", "(", "colors", ",", "(", "list", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "alphas", ",", "(", "list", ",", "tuple", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "            ", "colors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "                ", "colors", ".", "append", "(", "gl_color", "(", "colors", ",", "alphas", "[", "i", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "colors", ",", "GLColor", ")", ":", "\n", "                ", "colors", "=", "gl_color", "(", "colors", ",", "alphas", ")", "\n", "", "colors", "=", "[", "colors", "for", "i", "in", "range", "(", "num", ")", "]", "\n", "", "", "return", "np", ".", "array", "(", "colors", ")", ".", "reshape", "(", "[", "num", ",", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget._pltcolor_to_qtcolor": [[75, 87], ["None"], "function", ["None"], ["", "def", "_pltcolor_to_qtcolor", "(", "color", ")", ":", "\n", "    ", "color_map", "=", "{", "\n", "'r'", ":", "QtCore", ".", "Qt", ".", "red", ",", "\n", "'g'", ":", "QtCore", ".", "Qt", ".", "green", ",", "\n", "'b'", ":", "QtCore", ".", "Qt", ".", "blue", ",", "\n", "'k'", ":", "QtCore", ".", "Qt", ".", "black", ",", "\n", "'w'", ":", "QtCore", ".", "Qt", ".", "white", ",", "\n", "'y'", ":", "QtCore", ".", "Qt", ".", "yellow", ",", "\n", "'c'", ":", "QtCore", ".", "Qt", ".", "cyan", ",", "\n", "'m'", ":", "QtCore", ".", "Qt", ".", "magenta", ",", "\n", "}", "\n", "return", "color_map", "[", "color", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget._glcolor_to_qtcolor": [[88, 91], ["PyQt5.QtGui.QColor", "numpy.array", "glwidget.gl_color", "color.astype"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.gl_color"], ["", "def", "_glcolor_to_qtcolor", "(", "glcolor", ")", ":", "\n", "    ", "color", "=", "np", ".", "array", "(", "gl_color", "(", "glcolor", ")", ")", "*", "255", "\n", "return", "QtGui", ".", "QColor", "(", "*", "color", ".", "astype", "(", "np", ".", "int32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.get_rotation_matrix_3d": [[92, 109], ["numpy.sin", "numpy.cos", "numpy.stack", "numpy.stack", "numpy.stack", "ValueError"], "function", ["None"], ["", "def", "get_rotation_matrix_3d", "(", "angle", ",", "axis", "=", "0", ")", ":", "\n", "# points: [N, point_size, 3]", "\n", "# return counter-clockwise rotation matrix per axis", "\n", "    ", "rot_sin", "=", "np", ".", "sin", "(", "angle", ")", "\n", "rot_cos", "=", "np", ".", "cos", "(", "angle", ")", "\n", "if", "axis", "==", "1", ":", "\n", "        ", "rot_mat_T", "=", "np", ".", "stack", "(", "[", "[", "rot_cos", ",", "0", ",", "-", "rot_sin", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "rot_sin", ",", "0", ",", "rot_cos", "]", "]", ")", "\n", "", "elif", "axis", "==", "2", "or", "axis", "==", "-", "1", ":", "\n", "        ", "rot_mat_T", "=", "np", ".", "stack", "(", "[", "[", "rot_cos", ",", "-", "rot_sin", ",", "0", "]", ",", "[", "rot_sin", ",", "rot_cos", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "", "elif", "axis", "==", "0", ":", "\n", "        ", "rot_mat_T", "=", "np", ".", "stack", "(", "[", "[", "0", ",", "rot_cos", ",", "-", "rot_sin", "]", ",", "[", "0", ",", "rot_sin", ",", "rot_cos", "]", ",", "\n", "[", "1", ",", "0", ",", "0", "]", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"axis should in range\"", ")", "\n", "", "return", "rot_mat_T", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.get_C": [[112, 116], ["numpy.array", "numpy.tan"], "function", ["None"], ["", "def", "get_C", "(", "fov", ",", "w", ",", "h", ")", ":", "\n", "    ", "f", "=", "w", "/", "np", ".", "tan", "(", "fov", "/", "2", ")", "/", "2", "\n", "C", "=", "np", ".", "array", "(", "[", "[", "f", ",", "0", ",", "w", "/", "2", "]", ",", "[", "0", ",", "-", "f", ",", "h", "/", "2", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.get_RT": [[118, 127], ["glwidget.get_rotation_matrix_3d", "glwidget.get_rotation_matrix_3d", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.get_rotation_matrix_3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.get_rotation_matrix_3d"], ["", "def", "get_RT", "(", "elevation", ",", "azimuth", ",", "distance", ",", "center", ")", ":", "\n", "    ", "Ry", "=", "get_rotation_matrix_3d", "(", "-", "elevation", ",", "axis", "=", "1", ")", "\n", "Rz", "=", "get_rotation_matrix_3d", "(", "-", "(", "-", "azimuth", "+", "np", ".", "pi", ")", ",", "axis", "=", "2", ")", "\n", "\n", "T0", "=", "np", ".", "array", "(", "[", "distance", ",", "0", ",", "0", "]", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "R", "=", "Rz", "@", "Ry", "\n", "T", "=", "T0", "-", "R", "@", "np", ".", "array", "(", "center", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "rect", "=", "np", ".", "array", "(", "[", "[", "0", ",", "-", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", ",", "[", "1", ",", "0", ",", "0", "]", "]", ")", "\n", "return", "rect", "@", "R", ",", "rect", "@", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.get_RT_": [[130, 138], ["glwidget.get_rotation_matrix_3d", "glwidget.get_rotation_matrix_3d", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.get_rotation_matrix_3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.get_rotation_matrix_3d"], ["", "def", "get_RT_", "(", "elevation", ",", "azimuth", ",", "distance", ",", "center", ")", ":", "\n", "    ", "Ry", "=", "get_rotation_matrix_3d", "(", "-", "elevation", ",", "axis", "=", "1", ")", "\n", "Rz", "=", "get_rotation_matrix_3d", "(", "-", "(", "-", "azimuth", "+", "np", ".", "pi", ")", ",", "axis", "=", "2", ")", "\n", "\n", "T0", "=", "np", ".", "array", "(", "[", "distance", ",", "0", ",", "0", "]", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "R", "=", "Rz", "@", "Ry", "\n", "T", "=", "T0", "-", "R", "@", "np", ".", "array", "(", "center", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "return", "R", ",", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.world2camera": [[140, 144], ["glwidget.get_RT", "glwidget.get_C"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.get_RT", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.get_C"], ["", "def", "world2camera", "(", "points", ",", "elevation", ",", "azimuth", ",", "distance", ",", "center", ",", "fov", ",", "w", ",", "h", ")", ":", "\n", "    ", "R", ",", "T", "=", "get_RT", "(", "elevation", ",", "azimuth", ",", "distance", ",", "center", ")", "\n", "C", "=", "get_C", "(", "fov", ",", "w", ",", "h", ")", "\n", "return", "C", "@", "(", "R", "@", "points", "+", "T", ")", "\n", "# return R @ points + T", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.sph_to_device_pos": [[147, 152], ["glwidget.get_rotation_matrix_3d", "glwidget.get_rotation_matrix_3d", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.get_rotation_matrix_3d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.get_rotation_matrix_3d"], ["", "def", "sph_to_device_pos", "(", "elevation", ",", "azimuth", ",", "distance", ",", "center", ")", ":", "\n", "    ", "Ry", "=", "get_rotation_matrix_3d", "(", "elevation", ",", "axis", "=", "1", ")", "\n", "Rz", "=", "get_rotation_matrix_3d", "(", "-", "(", "azimuth", "+", "np", ".", "pi", ")", ",", "axis", "=", "2", ")", "\n", "T0", "=", "np", ".", "array", "(", "[", "distance", ",", "0", ",", "0", "]", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "return", "Rz", "@", "Ry", "@", "T0", "+", "Rz", "@", "Ry", "@", "np", ".", "array", "(", "center", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.device_pos_to_sph": [[154, 160], ["numpy.linalg.norm", "numpy.arctan2", "numpy.arctan2", "numpy.linalg.norm"], "function", ["None"], ["", "def", "device_pos_to_sph", "(", "pos", ",", "center", ")", ":", "\n", "    ", "pos", "-=", "center", "\n", "distance", "=", "np", ".", "linalg", ".", "norm", "(", "pos", ")", "\n", "elevation", "=", "np", ".", "arctan2", "(", "np", ".", "linalg", ".", "norm", "(", "pos", "[", ":", "2", "]", ")", ",", "pos", "[", "2", "]", ")", "\n", "azimuth", "=", "np", ".", "arctan2", "(", "pos", "[", "1", "]", ",", "pos", "[", "0", "]", ")", "\n", "return", "(", "elevation", "-", "np", ".", "pi", "/", "2", ")", ",", "(", "azimuth", "-", "np", ".", "pi", ")", ",", "distance", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.glwidget.get_lines_for_circle": [[162, 167], ["numpy.linspace", "numpy.stack", "numpy.stack", "numpy.cos", "numpy.sin", "numpy.arange"], "function", ["None"], ["", "def", "get_lines_for_circle", "(", "radius", ",", "num_point", "=", "100", ")", ":", "\n", "    ", "rads", "=", "np", ".", "linspace", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "num", "=", "num_point", ")", "\n", "points", "=", "np", ".", "stack", "(", "[", "radius", "*", "np", ".", "cos", "(", "rads", ")", ",", "radius", "*", "np", ".", "sin", "(", "rads", ")", "]", ",", "axis", "=", "1", ")", "\n", "lines", "=", "np", ".", "stack", "(", "[", "points", ",", "points", "[", "[", "*", "np", ".", "arange", "(", "1", ",", "rads", ".", "shape", "[", "0", "]", ")", ",", "0", "]", "]", "]", ",", "axis", "=", "1", ")", "\n", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.preprocess_stage2.merge_second_batch": [[22, 54], ["collections.defaultdict", "collections.defaultdict.pop", "collections.defaultdict.items", "example.items", "example_merged[].append", "numpy.concatenate", "numpy.concatenate", "enumerate", "numpy.concatenate", "numpy.stack", "numpy.pad", "coors.append"], "function", ["None"], ["def", "merge_second_batch", "(", "batch_list", ",", "_unused", "=", "False", ")", ":", "\n", "    ", "example_merged", "=", "defaultdict", "(", "list", ")", "\n", "count", "=", "0", "\n", "for", "example", "in", "batch_list", ":", "\n", "        ", "count", "=", "count", "+", "1", "\n", "for", "k", ",", "v", "in", "example", ".", "items", "(", ")", ":", "\n", "            ", "example_merged", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "", "", "count", "=", "0", "\n", "ret", "=", "{", "}", "\n", "example_merged", ".", "pop", "(", "\"num_voxels\"", ")", "\n", "for", "key", ",", "elems", "in", "example_merged", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "in", "[", "\n", "'voxels'", ",", "'num_points'", ",", "'num_gt'", ",", "'gt_boxes'", ",", "'voxel_labels'", ",", "\n", "'match_indices'", "\n", "]", ":", "\n", "            ", "ret", "[", "key", "]", "=", "np", ".", "concatenate", "(", "elems", ",", "axis", "=", "0", ")", "\n", "", "elif", "key", "==", "'match_indices_num'", ":", "\n", "            ", "ret", "[", "key", "]", "=", "np", ".", "concatenate", "(", "elems", ",", "axis", "=", "0", ")", "\n", "", "elif", "key", "==", "'images'", ":", "\n", "            ", "ret", "[", "key", "]", "=", "elems", "[", "0", "]", "\n", "", "elif", "key", "==", "'coordinates'", ":", "\n", "            ", "coors", "=", "[", "]", "\n", "for", "i", ",", "coor", "in", "enumerate", "(", "elems", ")", ":", "\n", "                ", "coor_pad", "=", "np", ".", "pad", "(", "\n", "coor", ",", "(", "(", "0", ",", "0", ")", ",", "(", "1", ",", "0", ")", ")", ",", "\n", "mode", "=", "'constant'", ",", "\n", "constant_values", "=", "i", ")", "\n", "coors", ".", "append", "(", "coor_pad", ")", "\n", "", "ret", "[", "key", "]", "=", "np", ".", "concatenate", "(", "coors", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "ret", "[", "key", "]", "=", "np", ".", "stack", "(", "elems", ",", "axis", "=", "0", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.preprocess_stage2.prep_pointcloud": [[56, 284], ["voxel_generator.generate", "example.update", "numpy.nonzero", "second.core.box_np_ops.projection_matrix_to_CRT_kitti", "second.core.box_np_ops.get_frustum_v2", "numpy.einsum", "second.core.box_np_ops.camera_to_lidar", "second.core.box_np_ops.corner_to_surfaces_3d_jit", "second.core.geometry.points_in_convex_polygon_3d_jit", "second.core.box_np_ops.remove_outside_points", "second.data.kitti_common.keep_arrays_by_name", "second.core.preprocess.remove_points_outside_boxes", "second.data.kitti_common.drop_arrays_by_name", "second.core.box_np_ops.box_camera_to_lidar", "numpy.array", "numpy.array", "second.core.preprocess.filter_gt_box_outside_range", "numpy.random.shuffle", "numpy.array", "target_assigner.generate_anchors", "anchors.reshape.reshape", "target_assigner.generate_anchors_dict", "second.core.box_np_ops.rbbox2d_to_near_bbox", "second.core.box_np_ops.sparse_sum_for_anchors_mask", "dense_voxel_map.cumsum.cumsum", "dense_voxel_map.cumsum.cumsum", "second.core.box_np_ops.fused_get_anchors_area", "target_assigner.assign_v2", "example.update", "numpy.linalg.inv", "numpy.logical_not", "list", "list.pop", "tuple", "second.core.geometry.points_in_convex_polygon_3d_jit.any", "range", "class_names.index"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.anchor_generator.AnchorGeneratorRange.generate", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.projection_matrix_to_CRT_kitti", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.get_frustum_v2", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.camera_to_lidar", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corner_to_surfaces_3d_jit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry.points_in_convex_polygon_3d_jit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.remove_outside_points", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.keep_arrays_by_name", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.remove_points_outside_boxes", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.drop_arrays_by_name", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box_camera_to_lidar", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.filter_gt_box_outside_range", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.generate_anchors", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.generate_anchors_dict", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rbbox2d_to_near_bbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.sparse_sum_for_anchors_mask", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.fused_get_anchors_area", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.assign_v2"], ["", "def", "prep_pointcloud", "(", "input_dict", ",", "\n", "root_path", ",", "\n", "voxel_generator", ",", "\n", "target_assigner", ",", "\n", "db_sampler", "=", "None", ",", "\n", "max_voxels", "=", "20000", ",", "\n", "class_names", "=", "[", "'Car'", "]", ",", "\n", "remove_outside_points", "=", "False", ",", "\n", "training", "=", "True", ",", "\n", "create_targets", "=", "True", ",", "\n", "shuffle_points", "=", "False", ",", "\n", "reduce_valid_area", "=", "False", ",", "\n", "remove_unknown", "=", "False", ",", "\n", "gt_rotation_noise", "=", "[", "-", "np", ".", "pi", "/", "3", ",", "np", ".", "pi", "/", "3", "]", ",", "\n", "gt_loc_noise_std", "=", "[", "1.0", ",", "1.0", ",", "1.0", "]", ",", "\n", "global_rotation_noise", "=", "[", "-", "np", ".", "pi", "/", "4", ",", "np", ".", "pi", "/", "4", "]", ",", "\n", "global_scaling_noise", "=", "[", "0.95", ",", "1.05", "]", ",", "\n", "global_random_rot_range", "=", "[", "0.78", ",", "2.35", "]", ",", "\n", "generate_bev", "=", "False", ",", "\n", "without_reflectivity", "=", "False", ",", "\n", "num_point_features", "=", "4", ",", "\n", "anchor_area_threshold", "=", "1", ",", "\n", "gt_points_drop", "=", "0.0", ",", "\n", "gt_drop_max_keep", "=", "10", ",", "\n", "remove_points_after_sample", "=", "True", ",", "\n", "anchor_cache", "=", "None", ",", "\n", "remove_environment", "=", "False", ",", "\n", "random_crop", "=", "False", ",", "\n", "reference_detections", "=", "None", ",", "\n", "add_rgb_to_points", "=", "False", ",", "\n", "lidar_input", "=", "False", ",", "\n", "unlabeled_db_sampler", "=", "None", ",", "\n", "out_size_factor", "=", "2", ",", "\n", "min_gt_point_dict", "=", "None", ",", "\n", "bev_only", "=", "False", ",", "\n", "use_group_id", "=", "False", ",", "\n", "out_dtype", "=", "np", ".", "float32", ")", ":", "\n", "    ", "\"\"\"convert point cloud to voxels, create targets if ground truths\n    exists.\n    \"\"\"", "\n", "points", "=", "input_dict", "[", "\"points\"", "]", "\n", "images", "=", "input_dict", "[", "\"images\"", "]", "\n", "if", "training", ":", "\n", "        ", "gt_boxes", "=", "input_dict", "[", "\"gt_boxes\"", "]", "\n", "gt_names", "=", "input_dict", "[", "\"gt_names\"", "]", "\n", "difficulty", "=", "input_dict", "[", "\"difficulty\"", "]", "\n", "group_ids", "=", "None", "\n", "if", "use_group_id", "and", "\"group_ids\"", "in", "input_dict", ":", "\n", "            ", "group_ids", "=", "input_dict", "[", "\"group_ids\"", "]", "\n", "", "", "rect", "=", "input_dict", "[", "\"rect\"", "]", "\n", "Trv2c", "=", "input_dict", "[", "\"Trv2c\"", "]", "\n", "P2", "=", "input_dict", "[", "\"P2\"", "]", "\n", "unlabeled_training", "=", "unlabeled_db_sampler", "is", "not", "None", "\n", "image_idx", "=", "input_dict", "[", "\"image_idx\"", "]", "\n", "'''\n    image_shape = input_dict[\"image_shape\"]    #pang added\n    points = box_np_ops.remove_outside_points(points, rect, Trv2c, P2,\n                                              image_shape) #pang added\n                                              '''", "\n", "if", "reference_detections", "is", "not", "None", ":", "\n", "        ", "C", ",", "R", ",", "T", "=", "box_np_ops", ".", "projection_matrix_to_CRT_kitti", "(", "P2", ")", "\n", "frustums", "=", "box_np_ops", ".", "get_frustum_v2", "(", "reference_detections", ",", "C", ")", "\n", "frustums", "-=", "T", "\n", "# frustums = np.linalg.inv(R) @ frustums.T", "\n", "frustums", "=", "np", ".", "einsum", "(", "'ij, akj->aki'", ",", "np", ".", "linalg", ".", "inv", "(", "R", ")", ",", "frustums", ")", "\n", "frustums", "=", "box_np_ops", ".", "camera_to_lidar", "(", "frustums", ",", "rect", ",", "Trv2c", ")", "\n", "surfaces", "=", "box_np_ops", ".", "corner_to_surfaces_3d_jit", "(", "frustums", ")", "\n", "masks", "=", "points_in_convex_polygon_3d_jit", "(", "points", ",", "surfaces", ")", "\n", "points", "=", "points", "[", "masks", ".", "any", "(", "-", "1", ")", "]", "\n", "\n", "", "if", "remove_outside_points", "and", "not", "lidar_input", ":", "\n", "        ", "image_shape", "=", "input_dict", "[", "\"image_shape\"", "]", "\n", "points", "=", "box_np_ops", ".", "remove_outside_points", "(", "points", ",", "rect", ",", "Trv2c", ",", "P2", ",", "\n", "image_shape", ")", "\n", "", "if", "remove_environment", "is", "True", "and", "training", ":", "\n", "        ", "selected", "=", "kitti", ".", "keep_arrays_by_name", "(", "gt_names", ",", "class_names", ")", "\n", "gt_boxes", "=", "gt_boxes", "[", "selected", "]", "\n", "gt_names", "=", "gt_names", "[", "selected", "]", "\n", "difficulty", "=", "difficulty", "[", "selected", "]", "\n", "if", "group_ids", "is", "not", "None", ":", "\n", "            ", "group_ids", "=", "group_ids", "[", "selected", "]", "\n", "", "points", "=", "prep", ".", "remove_points_outside_boxes", "(", "points", ",", "gt_boxes", ")", "\n", "\n", "", "if", "training", ":", "\n", "        ", "selected", "=", "kitti", ".", "drop_arrays_by_name", "(", "gt_names", ",", "[", "\"DontCare\"", "]", ")", "\n", "gt_boxes", "=", "gt_boxes", "[", "selected", "]", "\n", "gt_names", "=", "gt_names", "[", "selected", "]", "\n", "difficulty", "=", "difficulty", "[", "selected", "]", "\n", "if", "group_ids", "is", "not", "None", ":", "\n", "            ", "group_ids", "=", "group_ids", "[", "selected", "]", "\n", "\n", "", "gt_boxes", "=", "box_np_ops", ".", "box_camera_to_lidar", "(", "gt_boxes", ",", "rect", ",", "Trv2c", ")", "\n", "if", "remove_unknown", ":", "\n", "            ", "remove_mask", "=", "difficulty", "==", "-", "1", "\n", "keep_mask", "=", "np", ".", "logical_not", "(", "remove_mask", ")", "\n", "gt_boxes", "=", "gt_boxes", "[", "keep_mask", "]", "\n", "gt_names", "=", "gt_names", "[", "keep_mask", "]", "\n", "difficulty", "=", "difficulty", "[", "keep_mask", "]", "\n", "if", "group_ids", "is", "not", "None", ":", "\n", "                ", "group_ids", "=", "group_ids", "[", "keep_mask", "]", "\n", "", "", "gt_boxes_mask", "=", "np", ".", "array", "(", "\n", "[", "n", "in", "class_names", "for", "n", "in", "gt_names", "]", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "# unlabeled_mask = np.zeros((gt_boxes.shape[0], ), dtype=np.bool_)", "\n", "if", "without_reflectivity", ":", "\n", "            ", "used_point_axes", "=", "list", "(", "range", "(", "num_point_features", ")", ")", "\n", "used_point_axes", ".", "pop", "(", "3", ")", "\n", "points", "=", "points", "[", ":", ",", "used_point_axes", "]", "\n", "", "pc_range", "=", "voxel_generator", ".", "point_cloud_range", "\n", "if", "bev_only", ":", "# set z and h to limits", "\n", "            ", "gt_boxes", "[", ":", ",", "2", "]", "=", "pc_range", "[", "2", "]", "\n", "gt_boxes", "[", ":", ",", "5", "]", "=", "pc_range", "[", "5", "]", "-", "pc_range", "[", "2", "]", "\n", "", "''' # for stage 2 of training, we don't need this data augmentation since we need image information\n        prep.noise_per_object_v3_(\n            gt_boxes,\n            points,\n            gt_boxes_mask,\n            rotation_perturb=gt_rotation_noise,\n            center_noise_std=gt_loc_noise_std,\n            global_random_rot_range=global_random_rot_range,\n            group_ids=group_ids,\n            num_try=100)\n            '''", "\n", "# should remove unrelated objects after noise per object", "\n", "\n", "gt_boxes", "=", "gt_boxes", "[", "gt_boxes_mask", "]", "\n", "gt_names", "=", "gt_names", "[", "gt_boxes_mask", "]", "\n", "if", "group_ids", "is", "not", "None", ":", "\n", "            ", "group_ids", "=", "group_ids", "[", "gt_boxes_mask", "]", "\n", "", "gt_classes", "=", "np", ".", "array", "(", "\n", "[", "class_names", ".", "index", "(", "n", ")", "+", "1", "for", "n", "in", "gt_names", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "''' # for stage 2 of training, we don't need this data augmentation since we need image information\n        gt_boxes, points = prep.random_flip(gt_boxes, points)\n        gt_boxes, points = prep.global_rotation(\n            gt_boxes, points, rotation=global_rotation_noise)\n        gt_boxes, points = prep.global_scaling_v2(gt_boxes, points,\n                                                  *global_scaling_noise)\n                                                  '''", "\n", "bv_range", "=", "voxel_generator", ".", "point_cloud_range", "[", "[", "0", ",", "1", ",", "3", ",", "4", "]", "]", "\n", "mask", "=", "prep", ".", "filter_gt_box_outside_range", "(", "gt_boxes", ",", "bv_range", ")", "\n", "gt_boxes", "=", "gt_boxes", "[", "mask", "]", "\n", "gt_classes", "=", "gt_classes", "[", "mask", "]", "\n", "gt_names", "=", "gt_names", "[", "mask", "]", "\n", "if", "group_ids", "is", "not", "None", ":", "\n", "            ", "group_ids", "=", "group_ids", "[", "mask", "]", "\n", "\n", "# limit rad to [-pi, pi]", "\n", "", "'''\n        gt_boxes[:, 6] = box_np_ops.limit_period(\n            gt_boxes[:, 6], offset=0.5, period=2 * np.pi)\n            '''", "\n", "", "if", "shuffle_points", ":", "\n", "# shuffle is a little slow.", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "points", ")", "\n", "\n", "# [0, -40, -3, 70.4, 40, 1]", "\n", "", "voxel_size", "=", "voxel_generator", ".", "voxel_size", "\n", "pc_range", "=", "voxel_generator", ".", "point_cloud_range", "\n", "grid_size", "=", "voxel_generator", ".", "grid_size", "\n", "# [352, 400]", "\n", "\n", "voxels", ",", "coordinates", ",", "num_points", "=", "voxel_generator", ".", "generate", "(", "\n", "points", ",", "max_voxels", ")", "\n", "\n", "example", "=", "{", "\n", "'voxels'", ":", "voxels", ",", "\n", "'num_points'", ":", "num_points", ",", "\n", "'coordinates'", ":", "coordinates", ",", "\n", "\"num_voxels\"", ":", "np", ".", "array", "(", "[", "voxels", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "}", "\n", "example", ".", "update", "(", "{", "\n", "'rect'", ":", "rect", ",", "\n", "'Trv2c'", ":", "Trv2c", ",", "\n", "'P2'", ":", "P2", ",", "\n", "}", ")", "\n", "# if not lidar_input:", "\n", "feature_map_size", "=", "grid_size", "[", ":", "2", "]", "//", "out_size_factor", "\n", "feature_map_size", "=", "[", "*", "feature_map_size", ",", "1", "]", "[", ":", ":", "-", "1", "]", "\n", "if", "anchor_cache", "is", "not", "None", ":", "\n", "        ", "anchors", "=", "anchor_cache", "[", "\"anchors\"", "]", "\n", "anchors_bv", "=", "anchor_cache", "[", "\"anchors_bv\"", "]", "\n", "matched_thresholds", "=", "anchor_cache", "[", "\"matched_thresholds\"", "]", "\n", "unmatched_thresholds", "=", "anchor_cache", "[", "\"unmatched_thresholds\"", "]", "\n", "anchors_dict", "=", "anchor_cache", "[", "\"anchors_dict\"", "]", "\n", "", "else", ":", "\n", "        ", "ret", "=", "target_assigner", ".", "generate_anchors", "(", "feature_map_size", ")", "\n", "anchors", "=", "ret", "[", "\"anchors\"", "]", "\n", "anchors", "=", "anchors", ".", "reshape", "(", "[", "-", "1", ",", "7", "]", ")", "\n", "matched_thresholds", "=", "ret", "[", "\"matched_thresholds\"", "]", "\n", "unmatched_thresholds", "=", "ret", "[", "\"unmatched_thresholds\"", "]", "\n", "anchors_dict", "=", "target_assigner", ".", "generate_anchors_dict", "(", "feature_map_size", ")", "\n", "anchors_bv", "=", "box_np_ops", ".", "rbbox2d_to_near_bbox", "(", "\n", "anchors", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", ")", "\n", "", "example", "[", "\"anchors\"", "]", "=", "anchors", "\n", "example", "[", "\"images\"", "]", "=", "images", "\n", "# anchors_bv = anchors_bv.reshape([-1, 4])", "\n", "anchors_mask", "=", "None", "\n", "if", "anchor_area_threshold", ">=", "0", ":", "\n", "        ", "coors", "=", "coordinates", "\n", "dense_voxel_map", "=", "box_np_ops", ".", "sparse_sum_for_anchors_mask", "(", "\n", "coors", ",", "tuple", "(", "grid_size", "[", ":", ":", "-", "1", "]", "[", "1", ":", "]", ")", ")", "\n", "dense_voxel_map", "=", "dense_voxel_map", ".", "cumsum", "(", "0", ")", "\n", "dense_voxel_map", "=", "dense_voxel_map", ".", "cumsum", "(", "1", ")", "\n", "anchors_area", "=", "box_np_ops", ".", "fused_get_anchors_area", "(", "\n", "dense_voxel_map", ",", "anchors_bv", ",", "voxel_size", ",", "pc_range", ",", "grid_size", ")", "\n", "anchors_mask", "=", "anchors_area", ">", "anchor_area_threshold", "\n", "# example['anchors_mask'] = anchors_mask.astype(np.uint8)", "\n", "example", "[", "'anchors_mask'", "]", "=", "anchors_mask", "\n", "#if training:", "\n", "#return example", "\n", "", "if", "not", "training", ":", "\n", "        ", "return", "example", "\n", "#print(\"^^^^^^^^anchor mask is \",anchors_mask)", "\n", "", "if", "create_targets", ":", "\n", "        ", "targets_dict", "=", "target_assigner", ".", "assign_v2", "(", "\n", "anchors_dict", ",", "\n", "gt_boxes", ",", "\n", "anchors_mask", ",", "\n", "gt_classes", "=", "gt_classes", ",", "\n", "gt_names", "=", "gt_names", ")", "\n", "example", ".", "update", "(", "{", "\n", "'labels'", ":", "targets_dict", "[", "'labels'", "]", ",", "\n", "'reg_targets'", ":", "targets_dict", "[", "'bbox_targets'", "]", ",", "\n", "'reg_weights'", ":", "targets_dict", "[", "'bbox_outside_weights'", "]", ",", "\n", "}", ")", "\n", "", "reg_targets_1", "=", "targets_dict", "[", "'bbox_targets'", "]", "\n", "reg_targets_labels", "=", "targets_dict", "[", "'labels'", "]", "\n", "index_1", "=", "np", ".", "nonzero", "(", "reg_targets_labels", ")", "\n", "return", "example", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.preprocess_stage2._read_and_prep_v9": [[286, 347], ["numpy.fromfile().reshape", "info[].astype", "info[].astype", "info[].astype", "torchvision.ToTensor", "PIL.Image.open().convert", "prep_func", "pathlib.Path", "pathlib.Path", "numpy.array", "numpy.array", "second.data.kitti_common.remove_dontcare", "numpy.concatenate().astype", "input_dict.update", "example[].astype", "numpy.fromfile", "PIL.Image.open", "str", "str", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.remove_dontcare"], ["", "def", "_read_and_prep_v9", "(", "info", ",", "root_path", ",", "num_point_features", ",", "prep_func", ")", ":", "\n", "    ", "\"\"\"read data from KITTI-format infos, then call prep function.\n    \"\"\"", "\n", "# velodyne_path = str(pathlib.Path(root_path) / info['velodyne_path'])", "\n", "# velodyne_path += '_reduced'", "\n", "v_path", "=", "pathlib", ".", "Path", "(", "root_path", ")", "/", "info", "[", "'velodyne_path'", "]", "\n", "v_path", "=", "v_path", ".", "parent", ".", "parent", "/", "(", "\n", "v_path", ".", "parent", ".", "stem", "+", "\"_reduced\"", ")", "/", "v_path", ".", "name", "\n", "i_path", "=", "pathlib", ".", "Path", "(", "root_path", ")", "/", "info", "[", "'img_path'", "]", "\n", "points", "=", "np", ".", "fromfile", "(", "\n", "str", "(", "v_path", ")", ",", "dtype", "=", "np", ".", "float32", ",", "\n", "count", "=", "-", "1", ")", ".", "reshape", "(", "[", "-", "1", ",", "num_point_features", "]", ")", "\n", "image_idx", "=", "info", "[", "'image_idx'", "]", "\n", "rect", "=", "info", "[", "'calib/R0_rect'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "Trv2c", "=", "info", "[", "'calib/Tr_velo_to_cam'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "P2", "=", "info", "[", "'calib/P2'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "#image_pang_bgr = cv2.imread(str(i_path))", "\n", "#image_pang = image_pang_bgr[..., :: -1]", "\n", "pil2tensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "pil_image", "=", "Image", ".", "open", "(", "str", "(", "i_path", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "image_pang_bgr", "=", "np", ".", "array", "(", "pil_image", ")", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "image_pang", "=", "image_pang_bgr", "\n", "#image_pang = pil2tensor(image_pang_bgr)", "\n", "input_dict", "=", "{", "\n", "'points'", ":", "points", ",", "\n", "'rect'", ":", "rect", ",", "\n", "'Trv2c'", ":", "Trv2c", ",", "\n", "'P2'", ":", "P2", ",", "\n", "'image_shape'", ":", "np", ".", "array", "(", "info", "[", "\"img_shape\"", "]", ",", "dtype", "=", "np", ".", "int32", ")", ",", "\n", "'image_idx'", ":", "image_idx", ",", "\n", "'image_path'", ":", "info", "[", "'img_path'", "]", ",", "\n", "'images'", ":", "image_pang", "\n", "# 'pointcloud_num_features': num_point_features,", "\n", "}", "\n", "\n", "if", "'annos'", "in", "info", ":", "\n", "        ", "annos", "=", "info", "[", "'annos'", "]", "\n", "# we need other objects to avoid collision when sample", "\n", "annos", "=", "kitti", ".", "remove_dontcare", "(", "annos", ")", "\n", "loc", "=", "annos", "[", "\"location\"", "]", "\n", "dims", "=", "annos", "[", "\"dimensions\"", "]", "\n", "rots", "=", "annos", "[", "\"rotation_y\"", "]", "\n", "gt_names", "=", "annos", "[", "\"name\"", "]", "\n", "gt_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "difficulty", "=", "annos", "[", "\"difficulty\"", "]", "\n", "input_dict", ".", "update", "(", "{", "\n", "'gt_boxes'", ":", "gt_boxes", ",", "\n", "'gt_names'", ":", "gt_names", ",", "\n", "'difficulty'", ":", "difficulty", ",", "\n", "}", ")", "\n", "if", "'group_ids'", "in", "annos", ":", "\n", "            ", "input_dict", "[", "'group_ids'", "]", "=", "annos", "[", "\"group_ids\"", "]", "\n", "", "", "example", "=", "prep_func", "(", "input_dict", "=", "input_dict", ")", "\n", "example", "[", "\"image_idx\"", "]", "=", "image_idx", "\n", "example", "[", "\"image_shape\"", "]", "=", "input_dict", "[", "\"image_shape\"", "]", "\n", "#example[\"images\"] = input_dict[\"image\"]", "\n", "if", "\"anchors_mask\"", "in", "example", ":", "\n", "        ", "example", "[", "\"anchors_mask\"", "]", "=", "example", "[", "\"anchors_mask\"", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "return", "example", "\n", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.area": [[11, 25], ["None"], "function", ["None"], ["def", "area", "(", "boxes", ",", "add1", "=", "False", ")", ":", "\n", "    ", "\"\"\"Computes area of boxes.\n\n    Args:\n        boxes: Numpy array with shape [N, 4] holding N boxes\n\n    Returns:\n        a numpy array with shape [N*1] representing box areas\n    \"\"\"", "\n", "if", "add1", ":", "\n", "        ", "return", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "1.0", ")", "*", "(", "\n", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "1.0", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", ")", "*", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.intersection": [[27, 56], ["numpy.split", "numpy.split", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.transpose", "numpy.transpose", "numpy.zeros", "numpy.transpose", "numpy.transpose", "numpy.zeros"], "function", ["None"], ["", "", "def", "intersection", "(", "boxes1", ",", "boxes2", ",", "add1", "=", "False", ")", ":", "\n", "    ", "\"\"\"Compute pairwise intersection areas between boxes.\n\n    Args:\n        boxes1: a numpy array with shape [N, 4] holding N boxes\n        boxes2: a numpy array with shape [M, 4] holding M boxes\n\n    Returns:\n        a numpy array with shape [N*M] representing pairwise intersection area\n    \"\"\"", "\n", "[", "y_min1", ",", "x_min1", ",", "y_max1", ",", "x_max1", "]", "=", "np", ".", "split", "(", "boxes1", ",", "4", ",", "axis", "=", "1", ")", "\n", "[", "y_min2", ",", "x_min2", ",", "y_max2", ",", "x_max2", "]", "=", "np", ".", "split", "(", "boxes2", ",", "4", ",", "axis", "=", "1", ")", "\n", "\n", "all_pairs_min_ymax", "=", "np", ".", "minimum", "(", "y_max1", ",", "np", ".", "transpose", "(", "y_max2", ")", ")", "\n", "all_pairs_max_ymin", "=", "np", ".", "maximum", "(", "y_min1", ",", "np", ".", "transpose", "(", "y_min2", ")", ")", "\n", "if", "add1", ":", "\n", "        ", "all_pairs_min_ymax", "+=", "1.0", "\n", "", "intersect_heights", "=", "np", ".", "maximum", "(", "\n", "np", ".", "zeros", "(", "all_pairs_max_ymin", ".", "shape", ")", ",", "\n", "all_pairs_min_ymax", "-", "all_pairs_max_ymin", ")", "\n", "\n", "all_pairs_min_xmax", "=", "np", ".", "minimum", "(", "x_max1", ",", "np", ".", "transpose", "(", "x_max2", ")", ")", "\n", "all_pairs_max_xmin", "=", "np", ".", "maximum", "(", "x_min1", ",", "np", ".", "transpose", "(", "x_min2", ")", ")", "\n", "if", "add1", ":", "\n", "        ", "all_pairs_min_xmax", "+=", "1.0", "\n", "", "intersect_widths", "=", "np", ".", "maximum", "(", "\n", "np", ".", "zeros", "(", "all_pairs_max_xmin", ".", "shape", ")", ",", "\n", "all_pairs_min_xmax", "-", "all_pairs_max_xmin", ")", "\n", "return", "intersect_heights", "*", "intersect_widths", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.iou": [[58, 75], ["kitti_common.intersection", "kitti_common.area", "kitti_common.area", "numpy.expand_dims", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.intersection", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.area", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.area"], ["", "def", "iou", "(", "boxes1", ",", "boxes2", ",", "add1", "=", "False", ")", ":", "\n", "    ", "\"\"\"Computes pairwise intersection-over-union between box collections.\n\n    Args:\n        boxes1: a numpy array with shape [N, 4] holding N boxes.\n        boxes2: a numpy array with shape [M, 4] holding N boxes.\n\n    Returns:\n        a numpy array with shape [N, M] representing pairwise iou scores.\n    \"\"\"", "\n", "intersect", "=", "intersection", "(", "boxes1", ",", "boxes2", ",", "add1", ")", "\n", "area1", "=", "area", "(", "boxes1", ",", "add1", ")", "\n", "area2", "=", "area", "(", "boxes2", ",", "add1", ")", "\n", "union", "=", "np", ".", "expand_dims", "(", "\n", "area1", ",", "axis", "=", "1", ")", "+", "np", ".", "expand_dims", "(", "\n", "area2", ",", "axis", "=", "0", ")", "-", "intersect", "\n", "return", "intersect", "/", "union", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_image_index_str": [[77, 79], ["None"], "function", ["None"], ["", "def", "get_image_index_str", "(", "img_idx", ")", ":", "\n", "    ", "return", "\"{:06d}\"", ".", "format", "(", "img_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_kitti_info_path": [[81, 101], ["kitti_common.get_image_index_str", "pathlib.Path", "ValueError", "str", "str", "pathlib.Path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_image_index_str"], ["", "def", "get_kitti_info_path", "(", "idx", ",", "\n", "prefix", ",", "\n", "info_type", "=", "'image_2'", ",", "\n", "file_tail", "=", "'.png'", ",", "\n", "training", "=", "True", ",", "\n", "relative_path", "=", "True", ",", "\n", "exist_check", "=", "True", ")", ":", "\n", "    ", "img_idx_str", "=", "get_image_index_str", "(", "idx", ")", "\n", "img_idx_str", "+=", "file_tail", "\n", "prefix", "=", "pathlib", ".", "Path", "(", "prefix", ")", "\n", "if", "training", ":", "\n", "        ", "file_path", "=", "pathlib", ".", "Path", "(", "'training'", ")", "/", "info_type", "/", "img_idx_str", "\n", "", "else", ":", "\n", "        ", "file_path", "=", "pathlib", ".", "Path", "(", "'testing'", ")", "/", "info_type", "/", "img_idx_str", "\n", "", "if", "exist_check", "and", "not", "(", "prefix", "/", "file_path", ")", ".", "exists", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"file not exist: {}\"", ".", "format", "(", "file_path", ")", ")", "\n", "", "if", "relative_path", ":", "\n", "        ", "return", "str", "(", "file_path", ")", "\n", "", "else", ":", "\n", "        ", "return", "str", "(", "prefix", "/", "file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_image_path": [[103, 106], ["kitti_common.get_kitti_info_path"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_kitti_info_path"], ["", "", "def", "get_image_path", "(", "idx", ",", "prefix", ",", "training", "=", "True", ",", "relative_path", "=", "True", ",", "exist_check", "=", "True", ")", ":", "\n", "    ", "return", "get_kitti_info_path", "(", "idx", ",", "prefix", ",", "'image_2'", ",", "'.png'", ",", "training", ",", "\n", "relative_path", ",", "exist_check", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_label_path": [[107, 110], ["kitti_common.get_kitti_info_path"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_kitti_info_path"], ["", "def", "get_label_path", "(", "idx", ",", "prefix", ",", "training", "=", "True", ",", "relative_path", "=", "True", ",", "exist_check", "=", "True", ")", ":", "\n", "    ", "return", "get_kitti_info_path", "(", "idx", ",", "prefix", ",", "'label_2'", ",", "'.txt'", ",", "training", ",", "\n", "relative_path", ",", "exist_check", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_velodyne_path": [[111, 114], ["kitti_common.get_kitti_info_path"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_kitti_info_path"], ["", "def", "get_velodyne_path", "(", "idx", ",", "prefix", ",", "training", "=", "True", ",", "relative_path", "=", "True", ",", "exist_check", "=", "True", ")", ":", "\n", "    ", "return", "get_kitti_info_path", "(", "idx", ",", "prefix", ",", "'velodyne'", ",", "'.bin'", ",", "training", ",", "\n", "relative_path", ",", "exist_check", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_calib_path": [[115, 118], ["kitti_common.get_kitti_info_path"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_kitti_info_path"], ["", "def", "get_calib_path", "(", "idx", ",", "prefix", ",", "training", "=", "True", ",", "relative_path", "=", "True", ",", "exist_check", "=", "True", ")", ":", "\n", "    ", "return", "get_kitti_info_path", "(", "idx", ",", "prefix", ",", "'calib'", ",", "'.txt'", ",", "training", ",", "\n", "relative_path", ",", "exist_check", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common._extend_matrix": [[119, 122], ["numpy.concatenate", "numpy.array"], "function", ["None"], ["", "def", "_extend_matrix", "(", "mat", ")", ":", "\n", "    ", "mat", "=", "np", ".", "concatenate", "(", "[", "mat", ",", "np", ".", "array", "(", "[", "[", "0.", ",", "0.", ",", "0.", ",", "1.", "]", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_kitti_image_info": [[124, 213], ["pathlib.Path", "list", "isinstance", "list", "kitti_common.get_image_path", "concurrent.ThreadPoolExecutor", "executor.map", "range", "kitti_common.get_velodyne_path", "numpy.array", "kitti_common.get_label_path", "kitti_common.get_label_anno", "kitti_common.get_calib_path", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "kitti_common.add_difficulty_to_annos", "str", "str", "open", "f.readlines", "kitti_common._extend_matrix", "kitti_common._extend_matrix", "kitti_common._extend_matrix", "kitti_common._extend_matrix", "numpy.zeros", "kitti_common._extend_matrix", "kitti_common._extend_matrix", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "skimage.io.imread", "float", "float", "float", "float", "float", "float", "float", "lines[].split", "lines[].split", "lines[].split", "lines[].split", "lines[].split", "lines[].split", "lines[].split"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_image_path", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_velodyne_path", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_label_path", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_label_anno", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_calib_path", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.add_difficulty_to_annos", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common._extend_matrix", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common._extend_matrix", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common._extend_matrix", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common._extend_matrix", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common._extend_matrix", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common._extend_matrix"], ["", "def", "get_kitti_image_info", "(", "path", ",", "\n", "training", "=", "True", ",", "\n", "label_info", "=", "True", ",", "\n", "velodyne", "=", "False", ",", "\n", "calib", "=", "False", ",", "\n", "image_ids", "=", "7481", ",", "\n", "extend_matrix", "=", "True", ",", "\n", "num_worker", "=", "8", ",", "\n", "relative_path", "=", "True", ",", "\n", "with_imageshape", "=", "True", ")", ":", "\n", "# image_infos = []", "\n", "    ", "root_path", "=", "pathlib", ".", "Path", "(", "path", ")", "\n", "if", "not", "isinstance", "(", "image_ids", ",", "list", ")", ":", "\n", "        ", "image_ids", "=", "list", "(", "range", "(", "image_ids", ")", ")", "\n", "\n", "", "def", "map_func", "(", "idx", ")", ":", "\n", "        ", "image_info", "=", "{", "'image_idx'", ":", "idx", ",", "'pointcloud_num_features'", ":", "4", "}", "\n", "annotations", "=", "None", "\n", "if", "velodyne", ":", "\n", "            ", "image_info", "[", "'velodyne_path'", "]", "=", "get_velodyne_path", "(", "\n", "idx", ",", "path", ",", "training", ",", "relative_path", ")", "\n", "", "image_info", "[", "'img_path'", "]", "=", "get_image_path", "(", "idx", ",", "path", ",", "training", ",", "\n", "relative_path", ")", "\n", "if", "with_imageshape", ":", "\n", "            ", "img_path", "=", "image_info", "[", "'img_path'", "]", "\n", "if", "relative_path", ":", "\n", "                ", "img_path", "=", "str", "(", "root_path", "/", "img_path", ")", "\n", "", "image_info", "[", "'img_shape'", "]", "=", "np", ".", "array", "(", "\n", "io", ".", "imread", "(", "img_path", ")", ".", "shape", "[", ":", "2", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "", "if", "label_info", ":", "\n", "            ", "label_path", "=", "get_label_path", "(", "idx", ",", "path", ",", "training", ",", "relative_path", ")", "\n", "if", "relative_path", ":", "\n", "                ", "label_path", "=", "str", "(", "root_path", "/", "label_path", ")", "\n", "", "annotations", "=", "get_label_anno", "(", "label_path", ")", "\n", "", "if", "calib", ":", "\n", "            ", "calib_path", "=", "get_calib_path", "(", "\n", "idx", ",", "path", ",", "training", ",", "relative_path", "=", "False", ")", "\n", "with", "open", "(", "calib_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "P0", "=", "np", ".", "array", "(", "\n", "[", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "0", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "]", ")", ".", "reshape", "(", "\n", "[", "3", ",", "4", "]", ")", "\n", "P1", "=", "np", ".", "array", "(", "\n", "[", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "1", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "]", ")", ".", "reshape", "(", "\n", "[", "3", ",", "4", "]", ")", "\n", "P2", "=", "np", ".", "array", "(", "\n", "[", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "2", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "]", ")", ".", "reshape", "(", "\n", "[", "3", ",", "4", "]", ")", "\n", "P3", "=", "np", ".", "array", "(", "\n", "[", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "3", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "]", ")", ".", "reshape", "(", "\n", "[", "3", ",", "4", "]", ")", "\n", "if", "extend_matrix", ":", "\n", "                ", "P0", "=", "_extend_matrix", "(", "P0", ")", "\n", "P1", "=", "_extend_matrix", "(", "P1", ")", "\n", "P2", "=", "_extend_matrix", "(", "P2", ")", "\n", "P3", "=", "_extend_matrix", "(", "P3", ")", "\n", "", "image_info", "[", "'calib/P0'", "]", "=", "P0", "\n", "image_info", "[", "'calib/P1'", "]", "=", "P1", "\n", "image_info", "[", "'calib/P2'", "]", "=", "P2", "\n", "image_info", "[", "'calib/P3'", "]", "=", "P3", "\n", "R0_rect", "=", "np", ".", "array", "(", "[", "\n", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "4", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "10", "]", "\n", "]", ")", ".", "reshape", "(", "[", "3", ",", "3", "]", ")", "\n", "if", "extend_matrix", ":", "\n", "                ", "rect_4x4", "=", "np", ".", "zeros", "(", "[", "4", ",", "4", "]", ",", "dtype", "=", "R0_rect", ".", "dtype", ")", "\n", "rect_4x4", "[", "3", ",", "3", "]", "=", "1.", "\n", "rect_4x4", "[", ":", "3", ",", ":", "3", "]", "=", "R0_rect", "\n", "", "else", ":", "\n", "                ", "rect_4x4", "=", "R0_rect", "\n", "", "image_info", "[", "'calib/R0_rect'", "]", "=", "rect_4x4", "\n", "Tr_velo_to_cam", "=", "np", ".", "array", "(", "[", "\n", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "5", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "\n", "]", ")", ".", "reshape", "(", "[", "3", ",", "4", "]", ")", "\n", "Tr_imu_to_velo", "=", "np", ".", "array", "(", "[", "\n", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "6", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "\n", "]", ")", ".", "reshape", "(", "[", "3", ",", "4", "]", ")", "\n", "if", "extend_matrix", ":", "\n", "                ", "Tr_velo_to_cam", "=", "_extend_matrix", "(", "Tr_velo_to_cam", ")", "\n", "Tr_imu_to_velo", "=", "_extend_matrix", "(", "Tr_imu_to_velo", ")", "\n", "", "image_info", "[", "'calib/Tr_velo_to_cam'", "]", "=", "Tr_velo_to_cam", "\n", "image_info", "[", "'calib/Tr_imu_to_velo'", "]", "=", "Tr_imu_to_velo", "\n", "", "if", "annotations", "is", "not", "None", ":", "\n", "            ", "image_info", "[", "'annos'", "]", "=", "annotations", "\n", "add_difficulty_to_annos", "(", "image_info", ")", "\n", "", "return", "image_info", "\n", "\n", "", "with", "futures", ".", "ThreadPoolExecutor", "(", "num_worker", ")", "as", "executor", ":", "\n", "        ", "image_infos", "=", "executor", ".", "map", "(", "map_func", ",", "image_ids", ")", "\n", "", "return", "list", "(", "image_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.label_str_to_int": [[215, 221], ["kitti_common.get_class_to_label_map", "numpy.array"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_class_to_label_map"], ["", "def", "label_str_to_int", "(", "labels", ",", "remove_dontcare", "=", "True", ",", "dtype", "=", "np", ".", "int32", ")", ":", "\n", "    ", "class_to_label", "=", "get_class_to_label_map", "(", ")", "\n", "ret", "=", "np", ".", "array", "(", "[", "class_to_label", "[", "l", "]", "for", "l", "in", "labels", "]", ",", "dtype", "=", "dtype", ")", "\n", "if", "remove_dontcare", ":", "\n", "        ", "ret", "=", "ret", "[", "ret", ">", "0", "]", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_class_to_label_map": [[222, 235], ["None"], "function", ["None"], ["", "def", "get_class_to_label_map", "(", ")", ":", "\n", "    ", "class_to_label", "=", "{", "\n", "'Car'", ":", "0", ",", "\n", "'Pedestrian'", ":", "1", ",", "\n", "'Cyclist'", ":", "2", ",", "\n", "'Van'", ":", "3", ",", "\n", "'Person_sitting'", ":", "4", ",", "\n", "'Truck'", ":", "5", ",", "\n", "'Tram'", ":", "6", ",", "\n", "'Misc'", ":", "7", ",", "\n", "'DontCare'", ":", "-", "1", ",", "\n", "}", "\n", "return", "class_to_label", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_classes": [[236, 238], ["get_class_to_label_map().keys", "kitti_common.get_class_to_label_map"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_class_to_label_map"], ["", "def", "get_classes", "(", ")", ":", "\n", "    ", "return", "get_class_to_label_map", "(", ")", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.filter_gt_boxes": [[239, 242], ["numpy.array"], "function", ["None"], ["", "def", "filter_gt_boxes", "(", "gt_boxes", ",", "gt_labels", ",", "used_classes", ")", ":", "\n", "    ", "mask", "=", "np", ".", "array", "(", "[", "l", "in", "used_classes", "for", "l", "in", "gt_labels", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.filter_anno_by_mask": [[243, 249], ["image_anno.keys"], "function", ["None"], ["", "def", "filter_anno_by_mask", "(", "image_anno", ",", "mask", ")", ":", "\n", "    ", "img_filtered_annotations", "=", "{", "}", "\n", "for", "key", "in", "image_anno", ".", "keys", "(", ")", ":", "\n", "        ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "image_anno", "[", "key", "]", "[", "mask", "]", ")", "\n", "", "return", "img_filtered_annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.filter_infos_by_used_classes": [[251, 263], ["new_infos.append"], "function", ["None"], ["", "def", "filter_infos_by_used_classes", "(", "infos", ",", "used_classes", ")", ":", "\n", "    ", "new_infos", "=", "[", "]", "\n", "for", "info", "in", "infos", ":", "\n", "        ", "annos", "=", "info", "[", "\"annos\"", "]", "\n", "name_in_info", "=", "False", "\n", "for", "name", "in", "used_classes", ":", "\n", "            ", "if", "name", "in", "annos", "[", "\"name\"", "]", ":", "\n", "                ", "name_in_info", "=", "True", "\n", "break", "\n", "", "", "if", "name_in_info", ":", "\n", "            ", "new_infos", ".", "append", "(", "info", ")", "\n", "", "", "return", "new_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.remove_dontcare": [[264, 273], ["image_anno.keys", "enumerate"], "function", ["None"], ["", "def", "remove_dontcare", "(", "image_anno", ")", ":", "\n", "    ", "img_filtered_annotations", "=", "{", "}", "\n", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "x", "in", "enumerate", "(", "image_anno", "[", "'name'", "]", ")", "if", "x", "!=", "\"DontCare\"", "\n", "]", "\n", "for", "key", "in", "image_anno", ".", "keys", "(", ")", ":", "\n", "        ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "image_anno", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "", "return", "img_filtered_annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.remove_low_height": [[274, 283], ["image_anno.keys", "enumerate"], "function", ["None"], ["", "def", "remove_low_height", "(", "image_anno", ",", "thresh", ")", ":", "\n", "    ", "img_filtered_annotations", "=", "{", "}", "\n", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "s", "in", "enumerate", "(", "image_anno", "[", "'bbox'", "]", ")", "if", "(", "s", "[", "3", "]", "-", "s", "[", "1", "]", ")", ">=", "thresh", "\n", "]", "\n", "for", "key", "in", "image_anno", ".", "keys", "(", ")", ":", "\n", "        ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "image_anno", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "", "return", "img_filtered_annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.remove_low_score": [[284, 293], ["image_anno.keys", "enumerate"], "function", ["None"], ["", "def", "remove_low_score", "(", "image_anno", ",", "thresh", ")", ":", "\n", "    ", "img_filtered_annotations", "=", "{", "}", "\n", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "s", "in", "enumerate", "(", "image_anno", "[", "'score'", "]", ")", "if", "s", ">=", "thresh", "\n", "]", "\n", "for", "key", "in", "image_anno", ".", "keys", "(", ")", ":", "\n", "        ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "image_anno", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "", "return", "img_filtered_annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.keep_arrays_by_name": [[294, 300], ["numpy.array", "enumerate"], "function", ["None"], ["", "def", "keep_arrays_by_name", "(", "gt_names", ",", "used_classes", ")", ":", "\n", "    ", "inds", "=", "[", "\n", "i", "for", "i", ",", "x", "in", "enumerate", "(", "gt_names", ")", "if", "x", "in", "used_classes", "\n", "]", "\n", "inds", "=", "np", ".", "array", "(", "inds", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "return", "inds", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.drop_arrays_by_name": [[301, 307], ["numpy.array", "enumerate"], "function", ["None"], ["", "def", "drop_arrays_by_name", "(", "gt_names", ",", "used_classes", ")", ":", "\n", "    ", "inds", "=", "[", "\n", "i", "for", "i", ",", "x", "in", "enumerate", "(", "gt_names", ")", "if", "x", "not", "in", "used_classes", "\n", "]", "\n", "inds", "=", "np", ".", "array", "(", "inds", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "return", "inds", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.apply_mask_": [[308, 310], ["None"], "function", ["None"], ["", "def", "apply_mask_", "(", "array_dict", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.filter_kitti_anno": [[311, 349], ["image_anno.keys", "isinstance", "image_anno.keys", "kitti_common.iou", "enumerate", "image_anno.keys", "enumerate", "enumerate", "numpy.amax", "numpy.logical_not"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.iou"], ["", "def", "filter_kitti_anno", "(", "image_anno", ",", "\n", "used_classes", ",", "\n", "used_difficulty", "=", "None", ",", "\n", "dontcare_iou", "=", "None", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "used_classes", ",", "(", "list", ",", "tuple", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "        ", "used_classes", "=", "[", "used_classes", "]", "\n", "", "img_filtered_annotations", "=", "{", "}", "\n", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "x", "in", "enumerate", "(", "image_anno", "[", "'name'", "]", ")", "if", "x", "in", "used_classes", "\n", "]", "\n", "for", "key", "in", "image_anno", ".", "keys", "(", ")", ":", "\n", "        ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "image_anno", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "", "if", "used_difficulty", "is", "not", "None", ":", "\n", "        ", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "x", "in", "enumerate", "(", "img_filtered_annotations", "[", "'difficulty'", "]", ")", "\n", "if", "x", "in", "used_difficulty", "\n", "]", "\n", "for", "key", "in", "image_anno", ".", "keys", "(", ")", ":", "\n", "            ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "img_filtered_annotations", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "\n", "", "", "if", "'DontCare'", "in", "used_classes", "and", "dontcare_iou", "is", "not", "None", ":", "\n", "        ", "dont_care_indices", "=", "[", "\n", "i", "for", "i", ",", "x", "in", "enumerate", "(", "img_filtered_annotations", "[", "'name'", "]", ")", "\n", "if", "x", "==", "'DontCare'", "\n", "]", "\n", "# bounding box format [y_min, x_min, y_max, x_max]", "\n", "all_boxes", "=", "img_filtered_annotations", "[", "'bbox'", "]", "\n", "ious", "=", "iou", "(", "all_boxes", ",", "all_boxes", "[", "dont_care_indices", "]", ")", "\n", "\n", "# Remove all bounding boxes that overlap with a dontcare region.", "\n", "if", "ious", ".", "size", ">", "0", ":", "\n", "            ", "boxes_to_remove", "=", "np", ".", "amax", "(", "ious", ",", "axis", "=", "1", ")", ">", "dontcare_iou", "\n", "for", "key", "in", "image_anno", ".", "keys", "(", ")", ":", "\n", "                ", "img_filtered_annotations", "[", "key", "]", "=", "(", "img_filtered_annotations", "[", "key", "]", "[", "\n", "np", ".", "logical_not", "(", "boxes_to_remove", ")", "]", ")", "\n", "", "", "", "return", "img_filtered_annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.filter_annos_class": [[351, 363], ["anno.keys", "new_image_annos.append", "enumerate"], "function", ["None"], ["", "def", "filter_annos_class", "(", "image_annos", ",", "used_class", ")", ":", "\n", "    ", "new_image_annos", "=", "[", "]", "\n", "for", "anno", "in", "image_annos", ":", "\n", "        ", "img_filtered_annotations", "=", "{", "}", "\n", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "x", "in", "enumerate", "(", "anno", "[", "'name'", "]", ")", "if", "x", "in", "used_class", "\n", "]", "\n", "for", "key", "in", "anno", ".", "keys", "(", ")", ":", "\n", "            ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "anno", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "", "new_image_annos", ".", "append", "(", "img_filtered_annotations", ")", "\n", "", "return", "new_image_annos", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.filter_annos_low_score": [[365, 377], ["anno.keys", "new_image_annos.append", "enumerate"], "function", ["None"], ["", "def", "filter_annos_low_score", "(", "image_annos", ",", "thresh", ")", ":", "\n", "    ", "new_image_annos", "=", "[", "]", "\n", "for", "anno", "in", "image_annos", ":", "\n", "        ", "img_filtered_annotations", "=", "{", "}", "\n", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "s", "in", "enumerate", "(", "anno", "[", "'score'", "]", ")", "if", "s", ">=", "thresh", "\n", "]", "\n", "for", "key", "in", "anno", ".", "keys", "(", ")", ":", "\n", "            ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "anno", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "", "new_image_annos", ".", "append", "(", "img_filtered_annotations", ")", "\n", "", "return", "new_image_annos", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.filter_annos_difficulty": [[379, 391], ["anno.keys", "new_image_annos.append", "enumerate"], "function", ["None"], ["", "def", "filter_annos_difficulty", "(", "image_annos", ",", "used_difficulty", ")", ":", "\n", "    ", "new_image_annos", "=", "[", "]", "\n", "for", "anno", "in", "image_annos", ":", "\n", "        ", "img_filtered_annotations", "=", "{", "}", "\n", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "x", "in", "enumerate", "(", "anno", "[", "'difficulty'", "]", ")", "if", "x", "in", "used_difficulty", "\n", "]", "\n", "for", "key", "in", "anno", ".", "keys", "(", ")", ":", "\n", "            ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "anno", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "", "new_image_annos", ".", "append", "(", "img_filtered_annotations", ")", "\n", "", "return", "new_image_annos", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.filter_annos_low_height": [[393, 405], ["anno.keys", "new_image_annos.append", "enumerate"], "function", ["None"], ["", "def", "filter_annos_low_height", "(", "image_annos", ",", "thresh", ")", ":", "\n", "    ", "new_image_annos", "=", "[", "]", "\n", "for", "anno", "in", "image_annos", ":", "\n", "        ", "img_filtered_annotations", "=", "{", "}", "\n", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "s", "in", "enumerate", "(", "anno", "[", "'bbox'", "]", ")", "if", "(", "s", "[", "3", "]", "-", "s", "[", "1", "]", ")", ">=", "thresh", "\n", "]", "\n", "for", "key", "in", "anno", ".", "keys", "(", ")", ":", "\n", "            ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "anno", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "", "new_image_annos", ".", "append", "(", "img_filtered_annotations", ")", "\n", "", "return", "new_image_annos", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.filter_empty_annos": [[406, 412], ["new_image_annos.append", "anno.copy"], "function", ["None"], ["", "def", "filter_empty_annos", "(", "image_annos", ")", ":", "\n", "    ", "new_image_annos", "=", "[", "]", "\n", "for", "anno", "in", "image_annos", ":", "\n", "        ", "if", "anno", "[", "\"name\"", "]", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "new_image_annos", ".", "append", "(", "anno", ".", "copy", "(", ")", ")", "\n", "", "", "return", "new_image_annos", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.kitti_result_line": [[414, 457], ["collections.OrderedDict", "collections.OrderedDict", "result_dict.items", "collections.OrderedDict.items", "collections.OrderedDict.items", "ValueError", "res_line.append", "res_line.append", "res_line.append", "str", "prec_float.format", "res_line.append", "res_line.append", "ValueError", "str", "str", "prec_float.format", "collections.OrderedDict.keys"], "function", ["None"], ["", "def", "kitti_result_line", "(", "result_dict", ",", "precision", "=", "4", ")", ":", "\n", "    ", "prec_float", "=", "\"{\"", "+", "\":.{}f\"", ".", "format", "(", "precision", ")", "+", "\"}\"", "\n", "res_line", "=", "[", "]", "\n", "all_field_default", "=", "OrderedDict", "(", "[", "\n", "(", "'name'", ",", "None", ")", ",", "\n", "(", "'truncated'", ",", "-", "1", ")", ",", "\n", "(", "'occluded'", ",", "-", "1", ")", ",", "\n", "(", "'alpha'", ",", "-", "10", ")", ",", "\n", "(", "'bbox'", ",", "None", ")", ",", "\n", "(", "'dimensions'", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "\n", "(", "'location'", ",", "[", "-", "1000", ",", "-", "1000", ",", "-", "1000", "]", ")", ",", "\n", "(", "'rotation_y'", ",", "-", "10", ")", ",", "\n", "(", "'score'", ",", "0.0", ")", ",", "\n", "]", ")", "\n", "res_dict", "=", "[", "(", "key", ",", "None", ")", "for", "key", ",", "val", "in", "all_field_default", ".", "items", "(", ")", "]", "\n", "res_dict", "=", "OrderedDict", "(", "res_dict", ")", "\n", "for", "key", ",", "val", "in", "result_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "all_field_default", "[", "key", "]", "is", "None", "and", "val", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"you must specify a value for {}\"", ".", "format", "(", "key", ")", ")", "\n", "", "res_dict", "[", "key", "]", "=", "val", "\n", "\n", "", "for", "key", ",", "val", "in", "res_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "==", "'name'", ":", "\n", "            ", "res_line", ".", "append", "(", "val", ")", "\n", "", "elif", "key", "in", "[", "'truncated'", ",", "'alpha'", ",", "'rotation_y'", ",", "'score'", "]", ":", "\n", "            ", "if", "val", "is", "None", ":", "\n", "                ", "res_line", ".", "append", "(", "str", "(", "all_field_default", "[", "key", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "res_line", ".", "append", "(", "prec_float", ".", "format", "(", "val", ")", ")", "\n", "", "", "elif", "key", "==", "'occluded'", ":", "\n", "            ", "if", "val", "is", "None", ":", "\n", "                ", "res_line", ".", "append", "(", "str", "(", "all_field_default", "[", "key", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "res_line", ".", "append", "(", "'{}'", ".", "format", "(", "val", ")", ")", "\n", "", "", "elif", "key", "in", "[", "'bbox'", ",", "'dimensions'", ",", "'location'", "]", ":", "\n", "            ", "if", "val", "is", "None", ":", "\n", "                ", "res_line", "+=", "[", "str", "(", "v", ")", "for", "v", "in", "all_field_default", "[", "key", "]", "]", "\n", "", "else", ":", "\n", "                ", "res_line", "+=", "[", "prec_float", ".", "format", "(", "v", ")", "for", "v", "in", "val", "]", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"unknown key. supported key:{}\"", ".", "format", "(", "\n", "res_dict", ".", "keys", "(", ")", ")", ")", "\n", "", "", "return", "' '", ".", "join", "(", "res_line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.kitti_result_line_tracking": [[458, 503], ["collections.OrderedDict", "collections.OrderedDict", "result_dict.items", "collections.OrderedDict.items", "collections.OrderedDict.items", "ValueError", "res_line.append", "str", "res_line.append", "str", "res_line.append", "res_line.append", "str", "prec_float.format", "res_line.append", "res_line.append", "ValueError", "str", "str", "prec_float.format", "collections.OrderedDict.keys"], "function", ["None"], ["", "def", "kitti_result_line_tracking", "(", "result_dict", ",", "precision", "=", "4", ")", ":", "\n", "    ", "prec_float", "=", "\"{\"", "+", "\":.{}f\"", ".", "format", "(", "precision", ")", "+", "\"}\"", "\n", "res_line", "=", "[", "]", "\n", "all_field_default", "=", "OrderedDict", "(", "[", "\n", "(", "'frame'", ",", "None", ")", ",", "\n", "(", "'type'", ",", "2", ")", ",", "\n", "(", "'bbox'", ",", "None", ")", ",", "\n", "(", "'score'", ",", "0.0", ")", ",", "\n", "(", "'dimensions'", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "\n", "(", "'location'", ",", "[", "-", "1000", ",", "-", "1000", ",", "-", "1000", "]", ")", ",", "\n", "(", "'rotation_y'", ",", "-", "10", ")", ",", "\n", "(", "'alpha'", ",", "-", "10", ")", ",", "\n", "\n", "]", ")", "\n", "res_dict", "=", "[", "(", "key", ",", "None", ")", "for", "key", ",", "val", "in", "all_field_default", ".", "items", "(", ")", "]", "\n", "res_dict", "=", "OrderedDict", "(", "res_dict", ")", "\n", "for", "key", ",", "val", "in", "result_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "all_field_default", "[", "key", "]", "is", "None", "and", "val", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"you must specify a value for {}\"", ".", "format", "(", "key", ")", ")", "\n", "", "res_dict", "[", "key", "]", "=", "val", "\n", "\n", "", "for", "key", ",", "val", "in", "res_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "==", "'frame'", ":", "\n", "            ", "res_line", ".", "append", "(", "str", "(", "val", ")", ")", "\n", "", "elif", "key", "in", "'type'", ":", "\n", "            ", "res_line", ".", "append", "(", "str", "(", "val", ")", ")", "\n", "", "elif", "key", "in", "[", "'truncated'", ",", "'alpha'", ",", "'rotation_y'", ",", "'score'", "]", ":", "\n", "            ", "if", "val", "is", "None", ":", "\n", "                ", "res_line", ".", "append", "(", "str", "(", "all_field_default", "[", "key", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "res_line", ".", "append", "(", "prec_float", ".", "format", "(", "val", ")", ")", "\n", "", "", "elif", "key", "==", "'occluded'", ":", "\n", "            ", "if", "val", "is", "None", ":", "\n", "                ", "res_line", ".", "append", "(", "str", "(", "all_field_default", "[", "key", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "res_line", ".", "append", "(", "'{}'", ".", "format", "(", "val", ")", ")", "\n", "", "", "elif", "key", "in", "[", "'bbox'", ",", "'dimensions'", ",", "'location'", "]", ":", "\n", "            ", "if", "val", "is", "None", ":", "\n", "                ", "res_line", "+=", "[", "str", "(", "v", ")", "for", "v", "in", "all_field_default", "[", "key", "]", "]", "\n", "", "else", ":", "\n", "                ", "res_line", "+=", "[", "prec_float", ".", "format", "(", "v", ")", "for", "v", "in", "val", "]", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"unknown key. supported key:{}\"", ".", "format", "(", "\n", "res_dict", ".", "keys", "(", ")", ")", ")", "\n", "", "", "return", "','", ".", "join", "(", "res_line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.annos_to_kitti_label": [[504, 521], ["len", "range", "kitti_common.kitti_result_line", "result_lines.append"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.kitti_result_line"], ["", "def", "annos_to_kitti_label", "(", "annos", ")", ":", "\n", "    ", "num_instance", "=", "len", "(", "annos", "[", "\"name\"", "]", ")", "\n", "result_lines", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_instance", ")", ":", "\n", "        ", "result_dict", "=", "{", "\n", "'name'", ":", "annos", "[", "\"name\"", "]", "[", "i", "]", ",", "\n", "'truncated'", ":", "annos", "[", "\"truncated\"", "]", "[", "i", "]", ",", "\n", "'occluded'", ":", "annos", "[", "\"occluded\"", "]", "[", "i", "]", ",", "\n", "'alpha'", ":", "annos", "[", "\"alpha\"", "]", "[", "i", "]", ",", "\n", "'bbox'", ":", "annos", "[", "\"bbox\"", "]", "[", "i", "]", ",", "\n", "'dimensions'", ":", "annos", "[", "\"dimensions\"", "]", "[", "i", "]", ",", "\n", "'location'", ":", "annos", "[", "\"location\"", "]", "[", "i", "]", ",", "\n", "'rotation_y'", ":", "annos", "[", "\"rotation_y\"", "]", "[", "i", "]", ",", "\n", "}", "\n", "line", "=", "kitti_result_line", "(", "result_dict", ")", "\n", "result_lines", ".", "append", "(", "line", ")", "\n", "", "return", "result_lines", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.add_difficulty_to_annos": [[522, 565], ["numpy.ones", "numpy.ones", "numpy.ones", "zip", "numpy.logical_xor", "numpy.logical_xor", "range", "numpy.array", "len", "len", "len", "len", "diff.append", "diff.append", "diff.append", "diff.append"], "function", ["None"], ["", "def", "add_difficulty_to_annos", "(", "info", ")", ":", "\n", "    ", "min_height", "=", "[", "40", ",", "25", ",", "\n", "25", "]", "# minimum height for evaluated groundtruth/detections", "\n", "max_occlusion", "=", "[", "\n", "0", ",", "1", ",", "2", "\n", "]", "# maximum occlusion level of the groundtruth used for evaluation", "\n", "max_trunc", "=", "[", "\n", "0.15", ",", "0.3", ",", "0.5", "\n", "]", "# maximum truncation level of the groundtruth used for evaluation", "\n", "annos", "=", "info", "[", "'annos'", "]", "\n", "dims", "=", "annos", "[", "'dimensions'", "]", "# lhw format", "\n", "bbox", "=", "annos", "[", "'bbox'", "]", "\n", "height", "=", "bbox", "[", ":", ",", "3", "]", "-", "bbox", "[", ":", ",", "1", "]", "\n", "occlusion", "=", "annos", "[", "'occluded'", "]", "\n", "truncation", "=", "annos", "[", "'truncated'", "]", "\n", "diff", "=", "[", "]", "\n", "easy_mask", "=", "np", ".", "ones", "(", "(", "len", "(", "dims", ")", ",", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "moderate_mask", "=", "np", ".", "ones", "(", "(", "len", "(", "dims", ")", ",", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "hard_mask", "=", "np", ".", "ones", "(", "(", "len", "(", "dims", ")", ",", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "i", "=", "0", "\n", "for", "h", ",", "o", ",", "t", "in", "zip", "(", "height", ",", "occlusion", ",", "truncation", ")", ":", "\n", "        ", "if", "o", ">", "max_occlusion", "[", "0", "]", "or", "h", "<=", "min_height", "[", "0", "]", "or", "t", ">", "max_trunc", "[", "0", "]", ":", "\n", "            ", "easy_mask", "[", "i", "]", "=", "False", "\n", "", "if", "o", ">", "max_occlusion", "[", "1", "]", "or", "h", "<=", "min_height", "[", "1", "]", "or", "t", ">", "max_trunc", "[", "1", "]", ":", "\n", "            ", "moderate_mask", "[", "i", "]", "=", "False", "\n", "", "if", "o", ">", "max_occlusion", "[", "2", "]", "or", "h", "<=", "min_height", "[", "2", "]", "or", "t", ">", "max_trunc", "[", "2", "]", ":", "\n", "            ", "hard_mask", "[", "i", "]", "=", "False", "\n", "", "i", "+=", "1", "\n", "", "is_easy", "=", "easy_mask", "\n", "is_moderate", "=", "np", ".", "logical_xor", "(", "easy_mask", ",", "moderate_mask", ")", "\n", "is_hard", "=", "np", ".", "logical_xor", "(", "hard_mask", ",", "moderate_mask", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "dims", ")", ")", ":", "\n", "        ", "if", "is_easy", "[", "i", "]", ":", "\n", "            ", "diff", ".", "append", "(", "0", ")", "\n", "", "elif", "is_moderate", "[", "i", "]", ":", "\n", "            ", "diff", ".", "append", "(", "1", ")", "\n", "", "elif", "is_hard", "[", "i", "]", ":", "\n", "            ", "diff", ".", "append", "(", "2", ")", "\n", "", "else", ":", "\n", "            ", "diff", ".", "append", "(", "-", "1", ")", "\n", "", "", "annos", "[", "\"difficulty\"", "]", "=", "np", ".", "array", "(", "diff", ",", "np", ".", "int32", ")", "\n", "return", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.add_difficulty_to_annos_v2": [[567, 604], ["numpy.logical_xor", "numpy.logical_xor", "range", "numpy.array", "len", "diff.append", "diff.append", "diff.append", "diff.append"], "function", ["None"], ["", "def", "add_difficulty_to_annos_v2", "(", "info", ")", ":", "\n", "    ", "min_height", "=", "[", "40", ",", "25", ",", "\n", "25", "]", "# minimum height for evaluated groundtruth/detections", "\n", "max_occlusion", "=", "[", "\n", "0", ",", "1", ",", "2", "\n", "]", "# maximum occlusion level of the groundtruth used for evaluation", "\n", "max_trunc", "=", "[", "\n", "0.15", ",", "0.3", ",", "0.5", "\n", "]", "# maximum truncation level of the groundtruth used for evaluation", "\n", "annos", "=", "info", "[", "'annos'", "]", "\n", "dims", "=", "annos", "[", "'dimensions'", "]", "# lhw format", "\n", "bbox", "=", "annos", "[", "'bbox'", "]", "\n", "height", "=", "bbox", "[", ":", ",", "3", "]", "-", "bbox", "[", ":", ",", "1", "]", "\n", "occlusion", "=", "annos", "[", "'occluded'", "]", "\n", "truncation", "=", "annos", "[", "'truncated'", "]", "\n", "diff", "=", "[", "]", "\n", "easy_mask", "=", "not", "(", "(", "occlusion", ">", "max_occlusion", "[", "0", "]", ")", "or", "(", "height", "<", "min_height", "[", "0", "]", ")", "\n", "or", "(", "truncation", ">", "max_trunc", "[", "0", "]", ")", ")", "\n", "moderate_mask", "=", "not", "(", "(", "occlusion", ">", "max_occlusion", "[", "1", "]", ")", "or", "(", "height", "<", "min_height", "[", "1", "]", ")", "\n", "or", "(", "truncation", ">", "max_trunc", "[", "1", "]", ")", ")", "\n", "hard_mask", "=", "not", "(", "(", "occlusion", ">", "max_occlusion", "[", "2", "]", ")", "or", "(", "height", "<", "min_height", "[", "2", "]", ")", "\n", "or", "(", "truncation", ">", "max_trunc", "[", "2", "]", ")", ")", "\n", "is_easy", "=", "easy_mask", "\n", "is_moderate", "=", "np", ".", "logical_xor", "(", "easy_mask", ",", "moderate_mask", ")", "\n", "is_hard", "=", "np", ".", "logical_xor", "(", "hard_mask", ",", "moderate_mask", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "dims", ")", ")", ":", "\n", "        ", "if", "is_easy", "[", "i", "]", ":", "\n", "            ", "diff", ".", "append", "(", "0", ")", "\n", "", "elif", "is_moderate", "[", "i", "]", ":", "\n", "            ", "diff", ".", "append", "(", "1", ")", "\n", "", "elif", "is_hard", "[", "i", "]", ":", "\n", "            ", "diff", ".", "append", "(", "2", ")", "\n", "", "else", ":", "\n", "            ", "diff", ".", "append", "(", "-", "1", ")", "\n", "", "", "annos", "[", "\"difficulty\"", "]", "=", "np", ".", "array", "(", "diff", ",", "np", ".", "int32", ")", "\n", "return", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_label_anno": [[606, 648], ["annotations.update", "len", "numpy.array", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.arange", "open", "f.readlines", "line.strip().split", "numpy.array().reshape", "numpy.array", "numpy.zeros", "list", "float", "int", "float", "numpy.array", "numpy.array", "numpy.array", "len", "len", "range", "line.strip", "numpy.array", "float", "float", "float", "float", "float"], "function", ["None"], ["", "def", "get_label_anno", "(", "label_path", ")", ":", "\n", "    ", "annotations", "=", "{", "}", "\n", "annotations", ".", "update", "(", "{", "\n", "'name'", ":", "[", "]", ",", "\n", "'truncated'", ":", "[", "]", ",", "\n", "'occluded'", ":", "[", "]", ",", "\n", "'alpha'", ":", "[", "]", ",", "\n", "'bbox'", ":", "[", "]", ",", "\n", "'dimensions'", ":", "[", "]", ",", "\n", "'location'", ":", "[", "]", ",", "\n", "'rotation_y'", ":", "[", "]", "\n", "}", ")", "\n", "with", "open", "(", "label_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "# if len(lines) == 0 or len(lines[0]) < 15:", "\n", "#     content = []", "\n", "# else:", "\n", "", "content", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "for", "line", "in", "lines", "]", "\n", "num_objects", "=", "len", "(", "[", "x", "[", "0", "]", "for", "x", "in", "content", "if", "x", "[", "0", "]", "!=", "'DontCare'", "]", ")", "\n", "annotations", "[", "'name'", "]", "=", "np", ".", "array", "(", "[", "x", "[", "0", "]", "for", "x", "in", "content", "]", ")", "\n", "num_gt", "=", "len", "(", "annotations", "[", "'name'", "]", ")", "\n", "annotations", "[", "'truncated'", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "1", "]", ")", "for", "x", "in", "content", "]", ")", "\n", "annotations", "[", "'occluded'", "]", "=", "np", ".", "array", "(", "[", "int", "(", "x", "[", "2", "]", ")", "for", "x", "in", "content", "]", ")", "\n", "annotations", "[", "'alpha'", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "3", "]", ")", "for", "x", "in", "content", "]", ")", "\n", "annotations", "[", "'bbox'", "]", "=", "np", ".", "array", "(", "\n", "[", "[", "float", "(", "info", ")", "for", "info", "in", "x", "[", "4", ":", "8", "]", "]", "for", "x", "in", "content", "]", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "# dimensions will convert hwl format to standard lhw(camera) format.", "\n", "annotations", "[", "'dimensions'", "]", "=", "np", ".", "array", "(", "\n", "[", "[", "float", "(", "info", ")", "for", "info", "in", "x", "[", "8", ":", "11", "]", "]", "for", "x", "in", "content", "]", ")", ".", "reshape", "(", "\n", "-", "1", ",", "3", ")", "[", ":", ",", "[", "2", ",", "0", ",", "1", "]", "]", "\n", "annotations", "[", "'location'", "]", "=", "np", ".", "array", "(", "\n", "[", "[", "float", "(", "info", ")", "for", "info", "in", "x", "[", "11", ":", "14", "]", "]", "for", "x", "in", "content", "]", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "annotations", "[", "'rotation_y'", "]", "=", "np", ".", "array", "(", "\n", "[", "float", "(", "x", "[", "14", "]", ")", "for", "x", "in", "content", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "if", "len", "(", "content", ")", "!=", "0", "and", "len", "(", "content", "[", "0", "]", ")", "==", "16", ":", "# have score", "\n", "        ", "annotations", "[", "'score'", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "15", "]", ")", "for", "x", "in", "content", "]", ")", "\n", "", "else", ":", "\n", "        ", "annotations", "[", "'score'", "]", "=", "np", ".", "zeros", "(", "(", "annotations", "[", "'bbox'", "]", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "", "index", "=", "list", "(", "range", "(", "num_objects", ")", ")", "+", "[", "-", "1", "]", "*", "(", "num_gt", "-", "num_objects", ")", "\n", "annotations", "[", "'index'", "]", "=", "np", ".", "array", "(", "index", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "annotations", "[", "'group_ids'", "]", "=", "np", ".", "arange", "(", "num_gt", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "return", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_pseudo_label_anno": [[650, 663], ["annotations.update", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "get_pseudo_label_anno", "(", ")", ":", "\n", "    ", "annotations", "=", "{", "}", "\n", "annotations", ".", "update", "(", "{", "\n", "'name'", ":", "np", ".", "array", "(", "[", "'Car'", "]", ")", ",", "\n", "'truncated'", ":", "np", ".", "array", "(", "[", "0.0", "]", ")", ",", "\n", "'occluded'", ":", "np", ".", "array", "(", "[", "0", "]", ")", ",", "\n", "'alpha'", ":", "np", ".", "array", "(", "[", "0.0", "]", ")", ",", "\n", "'bbox'", ":", "np", ".", "array", "(", "[", "[", "0.1", ",", "0.1", ",", "15.0", ",", "15.0", "]", "]", ")", ",", "\n", "'dimensions'", ":", "np", ".", "array", "(", "[", "[", "0.1", ",", "0.1", ",", "15.0", ",", "15.0", "]", "]", ")", ",", "\n", "'location'", ":", "np", ".", "array", "(", "[", "[", "0.1", ",", "0.1", ",", "15.0", "]", "]", ")", ",", "\n", "'rotation_y'", ":", "np", ".", "array", "(", "[", "[", "0.1", ",", "0.1", ",", "15.0", "]", "]", ")", "\n", "}", ")", "\n", "return", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_start_result_anno": [[664, 678], ["annotations.update"], "function", ["None"], ["", "def", "get_start_result_anno", "(", ")", ":", "\n", "    ", "annotations", "=", "{", "}", "\n", "annotations", ".", "update", "(", "{", "\n", "'name'", ":", "[", "]", ",", "\n", "'truncated'", ":", "[", "]", ",", "\n", "'occluded'", ":", "[", "]", ",", "\n", "'alpha'", ":", "[", "]", ",", "\n", "'bbox'", ":", "[", "]", ",", "\n", "'dimensions'", ":", "[", "]", ",", "\n", "'location'", ":", "[", "]", ",", "\n", "'rotation_y'", ":", "[", "]", ",", "\n", "'score'", ":", "[", "]", ",", "\n", "}", ")", "\n", "return", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.empty_result_anno": [[679, 693], ["annotations.update", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "empty_result_anno", "(", ")", ":", "\n", "    ", "annotations", "=", "{", "}", "\n", "annotations", ".", "update", "(", "{", "\n", "'name'", ":", "np", ".", "array", "(", "[", "]", ")", ",", "\n", "'truncated'", ":", "np", ".", "array", "(", "[", "]", ")", ",", "\n", "'occluded'", ":", "np", ".", "array", "(", "[", "]", ")", ",", "\n", "'alpha'", ":", "np", ".", "array", "(", "[", "]", ")", ",", "\n", "'bbox'", ":", "np", ".", "zeros", "(", "[", "0", ",", "4", "]", ")", ",", "\n", "'dimensions'", ":", "np", ".", "zeros", "(", "[", "0", ",", "3", "]", ")", ",", "\n", "'location'", ":", "np", ".", "zeros", "(", "[", "0", ",", "3", "]", ")", ",", "\n", "'rotation_y'", ":", "np", ".", "array", "(", "[", "]", ")", ",", "\n", "'score'", ":", "np", ".", "array", "(", "[", "]", ")", ",", "\n", "}", ")", "\n", "return", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_label_annos": [[694, 713], ["pathlib.Path", "pathlib.Path().glob", "re.compile", "filter", "sorted", "isinstance", "list", "kitti_common.get_image_index_str", "kitti_common.get_label_anno", "numpy.array", "annos.append", "int", "range", "pathlib.Path", "re.compile.match"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_image_index_str", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.get_label_anno"], ["", "def", "get_label_annos", "(", "label_folder", ",", "image_ids", "=", "None", ")", ":", "\n", "    ", "if", "image_ids", "is", "None", ":", "\n", "        ", "filepaths", "=", "pathlib", ".", "Path", "(", "label_folder", ")", ".", "glob", "(", "'*.txt'", ")", "\n", "prog", "=", "re", ".", "compile", "(", "r'^\\d{6}.txt$'", ")", "\n", "filepaths", "=", "filter", "(", "lambda", "f", ":", "prog", ".", "match", "(", "f", ".", "name", ")", ",", "filepaths", ")", "\n", "image_ids", "=", "[", "int", "(", "p", ".", "stem", ")", "for", "p", "in", "filepaths", "]", "\n", "image_ids", "=", "sorted", "(", "image_ids", ")", "\n", "", "if", "not", "isinstance", "(", "image_ids", ",", "list", ")", ":", "\n", "        ", "image_ids", "=", "list", "(", "range", "(", "image_ids", ")", ")", "\n", "", "annos", "=", "[", "]", "\n", "label_folder", "=", "pathlib", ".", "Path", "(", "label_folder", ")", "\n", "for", "idx", "in", "image_ids", ":", "\n", "        ", "image_idx_str", "=", "get_image_index_str", "(", "idx", ")", "\n", "label_filename", "=", "label_folder", "/", "(", "image_idx_str", "+", "'.txt'", ")", "\n", "anno", "=", "get_label_anno", "(", "label_filename", ")", "\n", "num_example", "=", "anno", "[", "\"name\"", "]", ".", "shape", "[", "0", "]", "\n", "anno", "[", "\"image_idx\"", "]", "=", "np", ".", "array", "(", "[", "idx", "]", "*", "num_example", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "annos", ".", "append", "(", "anno", ")", "\n", "", "return", "annos", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.anno_to_rbboxes": [[715, 721], ["numpy.concatenate"], "function", ["None"], ["", "def", "anno_to_rbboxes", "(", "anno", ")", ":", "\n", "    ", "loc", "=", "anno", "[", "\"location\"", "]", "\n", "dims", "=", "anno", "[", "\"dimensions\"", "]", "\n", "rots", "=", "anno", "[", "\"rotation_y\"", "]", "\n", "rbboxes", "=", "np", ".", "concatenate", "(", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "return", "rbboxes", "\n", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.Dataset.__getitem__": [[21, 23], ["None"], "methods", ["None"], ["def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.Dataset.__len__": [[24, 26], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__init__": [[30, 57], ["print", "target_assigner.generate_anchors", "target_assigner.generate_anchors_dict", "anchors.reshape.reshape.reshape", "second.core.box_np_ops.rbbox2d_to_near_bbox", "functools.partial", "open", "pickle.load", "len"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.generate_anchors", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.generate_anchors_dict", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rbbox2d_to_near_bbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.kittiviewer.viewer.Settings.load"], ["    ", "def", "__init__", "(", "self", ",", "info_path", ",", "root_path", ",", "num_point_features", ",", "\n", "target_assigner", ",", "feature_map_size", ",", "prep_func", ")", ":", "\n", "        ", "with", "open", "(", "info_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "#self._kitti_infos = kitti.filter_infos_by_used_classes(infos, class_names)", "\n", "", "self", ".", "_root_path", "=", "root_path", "\n", "self", ".", "_kitti_infos", "=", "infos", "\n", "self", ".", "_num_point_features", "=", "num_point_features", "\n", "print", "(", "\"remain number of infos:\"", ",", "len", "(", "self", ".", "_kitti_infos", ")", ")", "\n", "# generate anchors cache", "\n", "# [352, 400]", "\n", "ret", "=", "target_assigner", ".", "generate_anchors", "(", "feature_map_size", ")", "\n", "anchors_dict", "=", "target_assigner", ".", "generate_anchors_dict", "(", "feature_map_size", ")", "\n", "anchors", "=", "ret", "[", "\"anchors\"", "]", "\n", "anchors", "=", "anchors", ".", "reshape", "(", "[", "-", "1", ",", "7", "]", ")", "\n", "matched_thresholds", "=", "ret", "[", "\"matched_thresholds\"", "]", "\n", "unmatched_thresholds", "=", "ret", "[", "\"unmatched_thresholds\"", "]", "\n", "anchors_bv", "=", "box_np_ops", ".", "rbbox2d_to_near_bbox", "(", "\n", "anchors", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", ")", "\n", "anchor_cache", "=", "{", "\n", "\"anchors\"", ":", "anchors", ",", "\n", "\"anchors_bv\"", ":", "anchors_bv", ",", "\n", "\"matched_thresholds\"", ":", "matched_thresholds", ",", "\n", "\"unmatched_thresholds\"", ":", "unmatched_thresholds", ",", "\n", "\"anchors_dict\"", ":", "anchors_dict", ",", "\n", "}", "\n", "self", ".", "_prep_func", "=", "partial", "(", "prep_func", ",", "anchor_cache", "=", "anchor_cache", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__len__": [[58, 60], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_kitti_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.kitti_infos": [[61, 64], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "kitti_infos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_kitti_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.dataset.KittiDataset.__getitem__": [[65, 71], ["second.data.preprocess._read_and_prep_v9"], "methods", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.preprocess._read_and_prep_v9"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "_read_and_prep_v9", "(", "\n", "info", "=", "self", ".", "_kitti_infos", "[", "idx", "]", ",", "\n", "root_path", "=", "self", ".", "_root_path", ",", "\n", "num_point_features", "=", "self", ".", "_num_point_features", ",", "\n", "prep_func", "=", "self", ".", "_prep_func", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.preprocess.merge_second_batch": [[21, 55], ["collections.defaultdict", "collections.defaultdict.pop", "collections.defaultdict.items", "example.items", "example_merged[].append", "numpy.concatenate", "numpy.concatenate", "enumerate", "numpy.concatenate", "numpy.stack", "numpy.pad", "coors.append"], "function", ["None"], ["def", "merge_second_batch", "(", "batch_list", ",", "_unused", "=", "False", ")", ":", "\n", "#print(\"~~~~~~~~what's in the batch_list\",batch_list[2])", "\n", "    ", "example_merged", "=", "defaultdict", "(", "list", ")", "\n", "count", "=", "0", "\n", "for", "example", "in", "batch_list", ":", "\n", "        ", "count", "=", "count", "+", "1", "\n", "for", "k", ",", "v", "in", "example", ".", "items", "(", ")", ":", "\n", "            ", "example_merged", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "", "", "count", "=", "0", "\n", "ret", "=", "{", "}", "\n", "example_merged", ".", "pop", "(", "\"num_voxels\"", ")", "\n", "for", "key", ",", "elems", "in", "example_merged", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "in", "[", "\n", "'voxels'", ",", "'num_points'", ",", "'num_gt'", ",", "'gt_boxes'", ",", "'voxel_labels'", ",", "\n", "'match_indices'", "\n", "]", ":", "\n", "            ", "ret", "[", "key", "]", "=", "np", ".", "concatenate", "(", "elems", ",", "axis", "=", "0", ")", "\n", "", "elif", "key", "==", "'match_indices_num'", ":", "\n", "            ", "ret", "[", "key", "]", "=", "np", ".", "concatenate", "(", "elems", ",", "axis", "=", "0", ")", "\n", "", "elif", "key", "==", "'images'", ":", "\n", "            ", "ret", "[", "key", "]", "=", "elems", "[", "0", "]", "\n", "", "elif", "key", "==", "'coordinates'", ":", "\n", "            ", "coors", "=", "[", "]", "\n", "for", "i", ",", "coor", "in", "enumerate", "(", "elems", ")", ":", "\n", "#print(\"@@@@@@@@@@@@@ the shape of coor\",coor.shape)", "\n", "                ", "coor_pad", "=", "np", ".", "pad", "(", "\n", "coor", ",", "(", "(", "0", ",", "0", ")", ",", "(", "1", ",", "0", ")", ")", ",", "\n", "mode", "=", "'constant'", ",", "\n", "constant_values", "=", "i", ")", "\n", "coors", ".", "append", "(", "coor_pad", ")", "\n", "", "ret", "[", "key", "]", "=", "np", ".", "concatenate", "(", "coors", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "ret", "[", "key", "]", "=", "np", ".", "stack", "(", "elems", ",", "axis", "=", "0", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.preprocess.prep_pointcloud": [[57, 300], ["voxel_generator.generate", "example.update", "numpy.nonzero", "second.core.box_np_ops.projection_matrix_to_CRT_kitti", "second.core.box_np_ops.get_frustum_v2", "numpy.einsum", "second.core.box_np_ops.camera_to_lidar", "second.core.box_np_ops.corner_to_surfaces_3d_jit", "second.core.geometry.points_in_convex_polygon_3d_jit", "second.core.box_np_ops.remove_outside_points", "second.data.kitti_common.keep_arrays_by_name", "second.core.preprocess.remove_points_outside_boxes", "second.data.kitti_common.drop_arrays_by_name", "second.core.box_np_ops.box_camera_to_lidar", "numpy.array", "numpy.array", "second.core.preprocess.filter_gt_box_outside_range", "numpy.random.shuffle", "target_assigner.generate_anchors", "anchors.reshape.reshape", "target_assigner.generate_anchors_dict", "second.core.box_np_ops.rbbox2d_to_near_bbox", "second.core.box_np_ops.sparse_sum_for_anchors_mask", "dense_voxel_map.cumsum.cumsum", "dense_voxel_map.cumsum.cumsum", "second.core.box_np_ops.fused_get_anchors_area", "target_assigner.assign_v2", "example.update", "numpy.linalg.inv", "numpy.logical_not", "list", "list.pop", "numpy.array", "numpy.array", "tuple", "second.core.geometry.points_in_convex_polygon_3d_jit.any", "range", "class_names.index"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.anchor_generator.AnchorGeneratorRange.generate", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.projection_matrix_to_CRT_kitti", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.get_frustum_v2", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.camera_to_lidar", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corner_to_surfaces_3d_jit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.geometry.points_in_convex_polygon_3d_jit", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.remove_outside_points", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.keep_arrays_by_name", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.remove_points_outside_boxes", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.drop_arrays_by_name", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.box_camera_to_lidar", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.preprocess.filter_gt_box_outside_range", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.generate_anchors", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.generate_anchors_dict", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.rbbox2d_to_near_bbox", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.sparse_sum_for_anchors_mask", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.fused_get_anchors_area", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.target_assigner.TargetAssigner.assign_v2"], ["", "def", "prep_pointcloud", "(", "input_dict", ",", "\n", "root_path", ",", "\n", "voxel_generator", ",", "\n", "target_assigner", ",", "\n", "db_sampler", "=", "None", ",", "\n", "max_voxels", "=", "20000", ",", "\n", "class_names", "=", "[", "'Car'", "]", ",", "\n", "remove_outside_points", "=", "False", ",", "\n", "training", "=", "True", ",", "\n", "create_targets", "=", "True", ",", "\n", "shuffle_points", "=", "False", ",", "\n", "reduce_valid_area", "=", "False", ",", "\n", "remove_unknown", "=", "False", ",", "\n", "gt_rotation_noise", "=", "[", "-", "np", ".", "pi", "/", "3", ",", "np", ".", "pi", "/", "3", "]", ",", "\n", "gt_loc_noise_std", "=", "[", "1.0", ",", "1.0", ",", "1.0", "]", ",", "\n", "global_rotation_noise", "=", "[", "-", "np", ".", "pi", "/", "4", ",", "np", ".", "pi", "/", "4", "]", ",", "\n", "global_scaling_noise", "=", "[", "0.95", ",", "1.05", "]", ",", "\n", "global_random_rot_range", "=", "[", "0.78", ",", "2.35", "]", ",", "\n", "generate_bev", "=", "False", ",", "\n", "without_reflectivity", "=", "False", ",", "\n", "num_point_features", "=", "4", ",", "\n", "anchor_area_threshold", "=", "1", ",", "\n", "gt_points_drop", "=", "0.0", ",", "\n", "gt_drop_max_keep", "=", "10", ",", "\n", "remove_points_after_sample", "=", "True", ",", "\n", "anchor_cache", "=", "None", ",", "\n", "remove_environment", "=", "False", ",", "\n", "random_crop", "=", "False", ",", "\n", "reference_detections", "=", "None", ",", "\n", "add_rgb_to_points", "=", "False", ",", "\n", "lidar_input", "=", "False", ",", "\n", "unlabeled_db_sampler", "=", "None", ",", "\n", "out_size_factor", "=", "2", ",", "\n", "min_gt_point_dict", "=", "None", ",", "\n", "bev_only", "=", "False", ",", "\n", "use_group_id", "=", "False", ",", "\n", "out_dtype", "=", "np", ".", "float32", ")", ":", "\n", "    ", "\"\"\"convert point cloud to voxels, create targets if ground truths\n    exists.\n    \"\"\"", "\n", "points", "=", "input_dict", "[", "\"points\"", "]", "\n", "images", "=", "input_dict", "[", "\"images\"", "]", "\n", "if", "training", ":", "\n", "        ", "gt_boxes", "=", "input_dict", "[", "\"gt_boxes\"", "]", "\n", "gt_2d_boxes", "=", "input_dict", "[", "\"gt_2d_bbox\"", "]", "\n", "gt_names", "=", "input_dict", "[", "\"gt_names\"", "]", "\n", "difficulty", "=", "input_dict", "[", "\"difficulty\"", "]", "\n", "group_ids", "=", "None", "\n", "if", "use_group_id", "and", "\"group_ids\"", "in", "input_dict", ":", "\n", "            ", "group_ids", "=", "input_dict", "[", "\"group_ids\"", "]", "\n", "", "", "rect", "=", "input_dict", "[", "\"rect\"", "]", "\n", "Trv2c", "=", "input_dict", "[", "\"Trv2c\"", "]", "\n", "P2", "=", "input_dict", "[", "\"P2\"", "]", "\n", "unlabeled_training", "=", "unlabeled_db_sampler", "is", "not", "None", "\n", "image_idx", "=", "input_dict", "[", "\"image_idx\"", "]", "\n", "'''\n    image_shape = input_dict[\"image_shape\"]    #pang added\n    points = box_np_ops.remove_outside_points(points, rect, Trv2c, P2,\n                                              image_shape) #pang added\n                                              '''", "\n", "if", "reference_detections", "is", "not", "None", ":", "\n", "        ", "C", ",", "R", ",", "T", "=", "box_np_ops", ".", "projection_matrix_to_CRT_kitti", "(", "P2", ")", "\n", "frustums", "=", "box_np_ops", ".", "get_frustum_v2", "(", "reference_detections", ",", "C", ")", "\n", "frustums", "-=", "T", "\n", "# frustums = np.linalg.inv(R) @ frustums.T", "\n", "frustums", "=", "np", ".", "einsum", "(", "'ij, akj->aki'", ",", "np", ".", "linalg", ".", "inv", "(", "R", ")", ",", "frustums", ")", "\n", "frustums", "=", "box_np_ops", ".", "camera_to_lidar", "(", "frustums", ",", "rect", ",", "Trv2c", ")", "\n", "surfaces", "=", "box_np_ops", ".", "corner_to_surfaces_3d_jit", "(", "frustums", ")", "\n", "masks", "=", "points_in_convex_polygon_3d_jit", "(", "points", ",", "surfaces", ")", "\n", "points", "=", "points", "[", "masks", ".", "any", "(", "-", "1", ")", "]", "\n", "\n", "", "if", "remove_outside_points", "and", "not", "lidar_input", ":", "\n", "        ", "image_shape", "=", "input_dict", "[", "\"image_shape\"", "]", "\n", "points", "=", "box_np_ops", ".", "remove_outside_points", "(", "points", ",", "rect", ",", "Trv2c", ",", "P2", ",", "\n", "image_shape", ")", "\n", "", "if", "remove_environment", "is", "True", "and", "training", ":", "\n", "        ", "selected", "=", "kitti", ".", "keep_arrays_by_name", "(", "gt_names", ",", "class_names", ")", "\n", "gt_boxes", "=", "gt_boxes", "[", "selected", "]", "\n", "gt_2d_boxes", "=", "gt_2d_boxes", "[", "selected", "]", "\n", "gt_names", "=", "gt_names", "[", "selected", "]", "\n", "difficulty", "=", "difficulty", "[", "selected", "]", "\n", "if", "group_ids", "is", "not", "None", ":", "\n", "            ", "group_ids", "=", "group_ids", "[", "selected", "]", "\n", "", "points", "=", "prep", ".", "remove_points_outside_boxes", "(", "points", ",", "gt_boxes", ")", "\n", "\n", "", "if", "training", ":", "\n", "        ", "selected", "=", "kitti", ".", "drop_arrays_by_name", "(", "gt_names", ",", "[", "\"DontCare\"", "]", ")", "\n", "gt_boxes", "=", "gt_boxes", "[", "selected", "]", "\n", "gt_2d_boxes", "=", "gt_2d_boxes", "[", "selected", "]", "\n", "gt_names", "=", "gt_names", "[", "selected", "]", "\n", "difficulty", "=", "difficulty", "[", "selected", "]", "\n", "if", "group_ids", "is", "not", "None", ":", "\n", "            ", "group_ids", "=", "group_ids", "[", "selected", "]", "\n", "\n", "", "gt_boxes", "=", "box_np_ops", ".", "box_camera_to_lidar", "(", "gt_boxes", ",", "rect", ",", "Trv2c", ")", "\n", "if", "remove_unknown", ":", "\n", "            ", "remove_mask", "=", "difficulty", "==", "-", "1", "\n", "keep_mask", "=", "np", ".", "logical_not", "(", "remove_mask", ")", "\n", "gt_boxes", "=", "gt_boxes", "[", "keep_mask", "]", "\n", "gt_2d_boxes", "=", "gt_2d_boxes", "[", "keep_mask", "]", "\n", "gt_names", "=", "gt_names", "[", "keep_mask", "]", "\n", "difficulty", "=", "difficulty", "[", "keep_mask", "]", "\n", "if", "group_ids", "is", "not", "None", ":", "\n", "                ", "group_ids", "=", "group_ids", "[", "keep_mask", "]", "\n", "", "", "gt_boxes_mask", "=", "np", ".", "array", "(", "\n", "[", "n", "in", "class_names", "for", "n", "in", "gt_names", "]", ",", "dtype", "=", "np", ".", "bool_", ")", "# this part generate masks that can filter out unrelated classes", "\n", "if", "without_reflectivity", ":", "\n", "            ", "used_point_axes", "=", "list", "(", "range", "(", "num_point_features", ")", ")", "\n", "used_point_axes", ".", "pop", "(", "3", ")", "\n", "points", "=", "points", "[", ":", ",", "used_point_axes", "]", "\n", "", "pc_range", "=", "voxel_generator", ".", "point_cloud_range", "\n", "if", "bev_only", ":", "# set z and h to limits", "\n", "            ", "gt_boxes", "[", ":", ",", "2", "]", "=", "pc_range", "[", "2", "]", "\n", "gt_boxes", "[", ":", ",", "5", "]", "=", "pc_range", "[", "5", "]", "-", "pc_range", "[", "2", "]", "\n", "#gt_names = gt_names[gt_boxes_mask]", "\n", "", "'''\n        prep.noise_per_object_v3_(\n            gt_boxes,\n            points,\n            gt_boxes_mask,\n            rotation_perturb=gt_rotation_noise,\n            center_noise_std=gt_loc_noise_std,\n            global_random_rot_range=global_random_rot_range,\n            group_ids=group_ids,\n            num_try=100)\n            '''", "\n", "# should remove unrelated objects after noise per object", "\n", "\n", "gt_boxes", "=", "gt_boxes", "[", "gt_boxes_mask", "]", "\n", "gt_2d_boxes", "=", "gt_2d_boxes", "[", "gt_boxes_mask", "]", "\n", "gt_names", "=", "gt_names", "[", "gt_boxes_mask", "]", "\n", "#print(\"gt_names after some process:\",gt_names)   #here it has finished sampling and filtering", "\n", "if", "group_ids", "is", "not", "None", ":", "\n", "            ", "group_ids", "=", "group_ids", "[", "gt_boxes_mask", "]", "\n", "", "gt_classes", "=", "np", ".", "array", "(", "\n", "[", "class_names", ".", "index", "(", "n", ")", "+", "1", "for", "n", "in", "gt_names", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "'''\n        gt_boxes, points = prep.random_flip(gt_boxes, points)\n        gt_boxes, points = prep.global_rotation(\n            gt_boxes, points, rotation=global_rotation_noise)\n        gt_boxes, points = prep.global_scaling_v2(gt_boxes, points,\n                                                  *global_scaling_noise)\n                                                  '''", "\n", "bv_range", "=", "voxel_generator", ".", "point_cloud_range", "[", "[", "0", ",", "1", ",", "3", ",", "4", "]", "]", "\n", "mask", "=", "prep", ".", "filter_gt_box_outside_range", "(", "gt_boxes", ",", "bv_range", ")", "\n", "gt_boxes", "=", "gt_boxes", "[", "mask", "]", "\n", "gt_2d_boxes", "=", "gt_2d_boxes", "[", "mask", "]", "\n", "gt_classes", "=", "gt_classes", "[", "mask", "]", "\n", "gt_names", "=", "gt_names", "[", "mask", "]", "\n", "if", "group_ids", "is", "not", "None", ":", "\n", "            ", "group_ids", "=", "group_ids", "[", "mask", "]", "\n", "\n", "# limit rad to [-pi, pi]", "\n", "", "'''\n        gt_boxes[:, 6] = box_np_ops.limit_period(\n            gt_boxes[:, 6], offset=0.5, period=2 * np.pi)\n            '''", "\n", "", "if", "shuffle_points", ":", "\n", "# shuffle is a little slow.", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "points", ")", "\n", "\n", "# [0, -40, -3, 70.4, 40, 1]", "\n", "", "voxel_size", "=", "voxel_generator", ".", "voxel_size", "\n", "pc_range", "=", "voxel_generator", ".", "point_cloud_range", "\n", "grid_size", "=", "voxel_generator", ".", "grid_size", "\n", "# [352, 400]", "\n", "\n", "voxels", ",", "coordinates", ",", "num_points", "=", "voxel_generator", ".", "generate", "(", "\n", "points", ",", "max_voxels", ")", "\n", "if", "training", ":", "\n", "        ", "example", "=", "{", "\n", "'voxels'", ":", "voxels", ",", "\n", "'num_points'", ":", "num_points", ",", "\n", "'coordinates'", ":", "coordinates", ",", "\n", "\"num_voxels\"", ":", "np", ".", "array", "(", "[", "voxels", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "int64", ")", ",", "\n", "\"d3_gt_boxes\"", ":", "gt_boxes", "\n", "}", "\n", "", "else", ":", "\n", "        ", "example", "=", "{", "\n", "'voxels'", ":", "voxels", ",", "\n", "'num_points'", ":", "num_points", ",", "\n", "'coordinates'", ":", "coordinates", ",", "\n", "\"num_voxels\"", ":", "np", ".", "array", "(", "[", "voxels", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "int64", ")", ",", "\n", "}", "\n", "", "example", ".", "update", "(", "{", "\n", "'rect'", ":", "rect", ",", "\n", "'Trv2c'", ":", "Trv2c", ",", "\n", "'P2'", ":", "P2", ",", "\n", "}", ")", "\n", "# if not lidar_input:", "\n", "feature_map_size", "=", "grid_size", "[", ":", "2", "]", "//", "out_size_factor", "\n", "feature_map_size", "=", "[", "*", "feature_map_size", ",", "1", "]", "[", ":", ":", "-", "1", "]", "\n", "if", "anchor_cache", "is", "not", "None", ":", "\n", "        ", "anchors", "=", "anchor_cache", "[", "\"anchors\"", "]", "\n", "anchors_bv", "=", "anchor_cache", "[", "\"anchors_bv\"", "]", "\n", "matched_thresholds", "=", "anchor_cache", "[", "\"matched_thresholds\"", "]", "\n", "unmatched_thresholds", "=", "anchor_cache", "[", "\"unmatched_thresholds\"", "]", "\n", "anchors_dict", "=", "anchor_cache", "[", "\"anchors_dict\"", "]", "\n", "", "else", ":", "\n", "        ", "ret", "=", "target_assigner", ".", "generate_anchors", "(", "feature_map_size", ")", "\n", "anchors", "=", "ret", "[", "\"anchors\"", "]", "\n", "anchors", "=", "anchors", ".", "reshape", "(", "[", "-", "1", ",", "7", "]", ")", "\n", "matched_thresholds", "=", "ret", "[", "\"matched_thresholds\"", "]", "\n", "unmatched_thresholds", "=", "ret", "[", "\"unmatched_thresholds\"", "]", "\n", "anchors_dict", "=", "target_assigner", ".", "generate_anchors_dict", "(", "feature_map_size", ")", "\n", "anchors_bv", "=", "box_np_ops", ".", "rbbox2d_to_near_bbox", "(", "\n", "anchors", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", ")", "\n", "", "example", "[", "\"anchors\"", "]", "=", "anchors", "\n", "example", "[", "\"images\"", "]", "=", "images", "\n", "# anchors_bv = anchors_bv.reshape([-1, 4])", "\n", "anchors_mask", "=", "None", "\n", "if", "anchor_area_threshold", ">=", "0", ":", "\n", "        ", "coors", "=", "coordinates", "\n", "dense_voxel_map", "=", "box_np_ops", ".", "sparse_sum_for_anchors_mask", "(", "\n", "coors", ",", "tuple", "(", "grid_size", "[", ":", ":", "-", "1", "]", "[", "1", ":", "]", ")", ")", "\n", "dense_voxel_map", "=", "dense_voxel_map", ".", "cumsum", "(", "0", ")", "\n", "dense_voxel_map", "=", "dense_voxel_map", ".", "cumsum", "(", "1", ")", "\n", "anchors_area", "=", "box_np_ops", ".", "fused_get_anchors_area", "(", "\n", "dense_voxel_map", ",", "anchors_bv", ",", "voxel_size", ",", "pc_range", ",", "grid_size", ")", "\n", "anchors_mask", "=", "anchors_area", ">", "anchor_area_threshold", "\n", "# example['anchors_mask'] = anchors_mask.astype(np.uint8)", "\n", "example", "[", "'anchors_mask'", "]", "=", "anchors_mask", "\n", "#if training:", "\n", "#return example", "\n", "", "if", "not", "training", ":", "\n", "        ", "return", "example", "\n", "", "if", "create_targets", ":", "\n", "        ", "targets_dict", "=", "target_assigner", ".", "assign_v2", "(", "\n", "anchors_dict", ",", "\n", "gt_boxes", ",", "\n", "anchors_mask", ",", "\n", "gt_classes", "=", "gt_classes", ",", "\n", "gt_names", "=", "gt_names", ")", "\n", "example", ".", "update", "(", "{", "\n", "'labels'", ":", "targets_dict", "[", "'labels'", "]", ",", "\n", "'reg_targets'", ":", "targets_dict", "[", "'bbox_targets'", "]", ",", "\n", "'reg_weights'", ":", "targets_dict", "[", "'bbox_outside_weights'", "]", ",", "\n", "'gt_2d_boxes'", ":", "gt_2d_boxes", "\n", "}", ")", "\n", "", "reg_targets_1", "=", "targets_dict", "[", "'bbox_targets'", "]", "\n", "reg_targets_labels", "=", "targets_dict", "[", "'labels'", "]", "\n", "index_1", "=", "np", ".", "nonzero", "(", "reg_targets_labels", ")", "\n", "return", "example", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.preprocess._read_and_prep_v9": [[302, 371], ["numpy.fromfile().reshape", "info[].astype", "info[].astype", "info[].astype", "prep_func", "pathlib.Path", "pathlib.Path", "numpy.array", "second.data.kitti_common.remove_dontcare", "numpy.concatenate().astype", "input_dict.update", "example[].astype", "numpy.fromfile", "str", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.data.kitti_common.remove_dontcare"], ["", "def", "_read_and_prep_v9", "(", "info", ",", "root_path", ",", "num_point_features", ",", "prep_func", ")", ":", "\n", "    ", "\"\"\"read data from KITTI-format infos, then call prep function.\n    \"\"\"", "\n", "# velodyne_path = str(pathlib.Path(root_path) / info['velodyne_path'])", "\n", "# velodyne_path += '_reduced'", "\n", "v_path", "=", "pathlib", ".", "Path", "(", "root_path", ")", "/", "info", "[", "'velodyne_path'", "]", "\n", "v_path", "=", "v_path", ".", "parent", ".", "parent", "/", "(", "\n", "v_path", ".", "parent", ".", "stem", "+", "\"_reduced\"", ")", "/", "v_path", ".", "name", "\n", "i_path", "=", "pathlib", ".", "Path", "(", "root_path", ")", "/", "info", "[", "'img_path'", "]", "\n", "points", "=", "np", ".", "fromfile", "(", "\n", "str", "(", "v_path", ")", ",", "dtype", "=", "np", ".", "float32", ",", "\n", "count", "=", "-", "1", ")", ".", "reshape", "(", "[", "-", "1", ",", "num_point_features", "]", ")", "\n", "image_idx", "=", "info", "[", "'image_idx'", "]", "\n", "rect", "=", "info", "[", "'calib/R0_rect'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "Trv2c", "=", "info", "[", "'calib/Tr_velo_to_cam'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "P2", "=", "info", "[", "'calib/P2'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "#image_pang_bgr = cv2.imread(str(i_path))", "\n", "#image_pang = image_pang_bgr[..., :: -1]", "\n", "'''\n    pil2tensor = transforms.ToTensor()\n    pil_image = Image.open(str(i_path)).convert(\"RGB\")\n    image_pang_bgr = np.array(pil_image)[:, :, [2, 1, 0]]\n    image_pang = image_pang_bgr'''", "\n", "image_pang", "=", "None", "\n", "#image_pang = pil2tensor(image_pang_bgr)", "\n", "input_dict", "=", "{", "\n", "'points'", ":", "points", ",", "\n", "'rect'", ":", "rect", ",", "\n", "'Trv2c'", ":", "Trv2c", ",", "\n", "'P2'", ":", "P2", ",", "\n", "'image_shape'", ":", "np", ".", "array", "(", "info", "[", "\"img_shape\"", "]", ",", "dtype", "=", "np", ".", "int32", ")", ",", "\n", "'image_idx'", ":", "image_idx", ",", "\n", "'image_path'", ":", "info", "[", "'img_path'", "]", ",", "\n", "'images'", ":", "image_pang", ",", "\n", "#'gt_2d_bbox': gt_2d_box", "\n", "# 'pointcloud_num_features': num_point_features,", "\n", "}", "\n", "\n", "if", "'annos'", "in", "info", ":", "\n", "        ", "annos", "=", "info", "[", "'annos'", "]", "\n", "# we need other objects to avoid collision when sample", "\n", "annos", "=", "kitti", ".", "remove_dontcare", "(", "annos", ")", "\n", "loc", "=", "annos", "[", "\"location\"", "]", "\n", "dims", "=", "annos", "[", "\"dimensions\"", "]", "\n", "rots", "=", "annos", "[", "\"rotation_y\"", "]", "\n", "gt_names", "=", "annos", "[", "\"name\"", "]", "\n", "gt_2d_box", "=", "annos", "[", "\"bbox\"", "]", "\n", "# print(gt_names, len(loc))", "\n", "gt_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# gt_boxes = box_np_ops.box_camera_to_lidar(gt_boxes, rect, Trv2c)", "\n", "difficulty", "=", "annos", "[", "\"difficulty\"", "]", "\n", "input_dict", ".", "update", "(", "{", "\n", "'gt_boxes'", ":", "gt_boxes", ",", "\n", "'gt_names'", ":", "gt_names", ",", "\n", "'difficulty'", ":", "difficulty", ",", "\n", "'gt_2d_bbox'", ":", "gt_2d_box", ",", "\n", "}", ")", "\n", "if", "'group_ids'", "in", "annos", ":", "\n", "            ", "input_dict", "[", "'group_ids'", "]", "=", "annos", "[", "\"group_ids\"", "]", "\n", "", "", "example", "=", "prep_func", "(", "input_dict", "=", "input_dict", ")", "\n", "example", "[", "\"image_idx\"", "]", "=", "image_idx", "\n", "example", "[", "\"image_shape\"", "]", "=", "input_dict", "[", "\"image_shape\"", "]", "\n", "#example[\"gt_2d_bbox\"] = gt_2d_box", "\n", "#example[\"images\"] = input_dict[\"image\"]", "\n", "if", "\"anchors_mask\"", "in", "example", ":", "\n", "        ", "example", "[", "\"anchors_mask\"", "]", "=", "example", "[", "\"anchors_mask\"", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "return", "example", "\n", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.iou_device": [[10, 22], ["numba.cuda.jit", "max", "min", "max", "min", "max", "max"], "function", ["None"], ["@", "cuda", ".", "jit", "(", "'(float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "iou_device", "(", "a", ",", "b", ")", ":", "\n", "    ", "left", "=", "max", "(", "a", "[", "0", "]", ",", "b", "[", "0", "]", ")", "\n", "right", "=", "min", "(", "a", "[", "2", "]", ",", "b", "[", "2", "]", ")", "\n", "top", "=", "max", "(", "a", "[", "1", "]", ",", "b", "[", "1", "]", ")", "\n", "bottom", "=", "min", "(", "a", "[", "3", "]", ",", "b", "[", "3", "]", ")", "\n", "width", "=", "max", "(", "right", "-", "left", "+", "1", ",", "0.", ")", "\n", "height", "=", "max", "(", "bottom", "-", "top", "+", "1", ",", "0.", ")", "\n", "interS", "=", "width", "*", "height", "\n", "Sa", "=", "(", "a", "[", "2", "]", "-", "a", "[", "0", "]", "+", "1", ")", "*", "(", "a", "[", "3", "]", "-", "a", "[", "1", "]", "+", "1", ")", "\n", "Sb", "=", "(", "b", "[", "2", "]", "-", "b", "[", "0", "]", "+", "1", ")", "*", "(", "b", "[", "3", "]", "-", "b", "[", "1", "]", "+", "1", ")", "\n", "return", "interS", "/", "(", "Sa", "+", "Sb", "-", "interS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.nms_kernel_v2": [[24, 57], ["numba.cuda.jit", "min", "min", "numba.cuda.shared.array", "numba.cuda.syncthreads", "range", "nms_gpu.iou_device"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.iou_device"], ["", "@", "cuda", ".", "jit", "(", "'(int64, float32, float32[:, :], uint64[:])'", ")", "\n", "def", "nms_kernel_v2", "(", "n_boxes", ",", "nms_overlap_thresh", ",", "dev_boxes", ",", "dev_mask", ")", ":", "\n", "    ", "threadsPerBlock", "=", "8", "*", "8", "\n", "row_start", "=", "cuda", ".", "blockIdx", ".", "y", "\n", "col_start", "=", "cuda", ".", "blockIdx", ".", "x", "\n", "tx", "=", "cuda", ".", "threadIdx", ".", "x", "\n", "row_size", "=", "min", "(", "n_boxes", "-", "row_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "col_size", "=", "min", "(", "n_boxes", "-", "col_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "block_boxes", "=", "cuda", ".", "shared", ".", "array", "(", "\n", "shape", "=", "(", "threadsPerBlock", ",", "5", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "dev_box_idx", "=", "threadsPerBlock", "*", "col_start", "+", "tx", "\n", "if", "(", "tx", "<", "col_size", ")", ":", "\n", "        ", "block_boxes", "[", "tx", ",", "0", "]", "=", "dev_boxes", "[", "dev_box_idx", ",", "0", "]", "\n", "block_boxes", "[", "tx", ",", "1", "]", "=", "dev_boxes", "[", "dev_box_idx", ",", "1", "]", "\n", "block_boxes", "[", "tx", ",", "2", "]", "=", "dev_boxes", "[", "dev_box_idx", ",", "2", "]", "\n", "block_boxes", "[", "tx", ",", "3", "]", "=", "dev_boxes", "[", "dev_box_idx", ",", "3", "]", "\n", "block_boxes", "[", "tx", ",", "4", "]", "=", "dev_boxes", "[", "dev_box_idx", ",", "4", "]", "\n", "", "cuda", ".", "syncthreads", "(", ")", "\n", "if", "(", "cuda", ".", "threadIdx", ".", "x", "<", "row_size", ")", ":", "\n", "        ", "cur_box_idx", "=", "threadsPerBlock", "*", "row_start", "+", "cuda", ".", "threadIdx", ".", "x", "\n", "# cur_box = dev_boxes + cur_box_idx * 5;", "\n", "i", "=", "0", "\n", "t", "=", "0", "\n", "start", "=", "0", "\n", "if", "(", "row_start", "==", "col_start", ")", ":", "\n", "            ", "start", "=", "tx", "+", "1", "\n", "", "for", "i", "in", "range", "(", "start", ",", "col_size", ")", ":", "\n", "            ", "if", "(", "iou_device", "(", "dev_boxes", "[", "cur_box_idx", "]", ",", "block_boxes", "[", "i", "]", ")", ">", "\n", "nms_overlap_thresh", ")", ":", "\n", "                ", "t", "|=", "1", "<<", "i", "\n", "", "", "col_blocks", "=", "(", "(", "n_boxes", ")", "//", "(", "threadsPerBlock", ")", "+", "(", "\n", "(", "n_boxes", ")", "%", "(", "threadsPerBlock", ")", ">", "0", ")", ")", "\n", "dev_mask", "[", "cur_box_idx", "*", "col_blocks", "+", "col_start", "]", "=", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.nms_kernel": [[59, 91], ["numba.cuda.jit", "min", "min", "numba.cuda.shared.array", "numba.cuda.syncthreads", "range", "nms_gpu.iou_device"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.iou_device"], ["", "", "@", "cuda", ".", "jit", "(", "'(int64, float32, float32[:], uint64[:])'", ")", "\n", "def", "nms_kernel", "(", "n_boxes", ",", "nms_overlap_thresh", ",", "dev_boxes", ",", "dev_mask", ")", ":", "\n", "    ", "threadsPerBlock", "=", "8", "*", "8", "\n", "row_start", "=", "cuda", ".", "blockIdx", ".", "y", "\n", "col_start", "=", "cuda", ".", "blockIdx", ".", "x", "\n", "tx", "=", "cuda", ".", "threadIdx", ".", "x", "\n", "row_size", "=", "min", "(", "n_boxes", "-", "row_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "col_size", "=", "min", "(", "n_boxes", "-", "col_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "block_boxes", "=", "cuda", ".", "shared", ".", "array", "(", "shape", "=", "(", "64", "*", "5", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "dev_box_idx", "=", "threadsPerBlock", "*", "col_start", "+", "tx", "\n", "if", "(", "tx", "<", "col_size", ")", ":", "\n", "        ", "block_boxes", "[", "tx", "*", "5", "+", "0", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "0", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "1", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "1", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "2", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "2", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "3", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "3", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "4", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "4", "]", "\n", "", "cuda", ".", "syncthreads", "(", ")", "\n", "if", "(", "tx", "<", "row_size", ")", ":", "\n", "        ", "cur_box_idx", "=", "threadsPerBlock", "*", "row_start", "+", "tx", "\n", "# cur_box = dev_boxes + cur_box_idx * 5;", "\n", "t", "=", "0", "\n", "start", "=", "0", "\n", "if", "(", "row_start", "==", "col_start", ")", ":", "\n", "            ", "start", "=", "tx", "+", "1", "\n", "", "for", "i", "in", "range", "(", "start", ",", "col_size", ")", ":", "\n", "            ", "iou", "=", "iou_device", "(", "dev_boxes", "[", "cur_box_idx", "*", "5", ":", "cur_box_idx", "*", "5", "+", "4", "]", ",", "\n", "block_boxes", "[", "i", "*", "5", ":", "i", "*", "5", "+", "4", "]", ")", "\n", "if", "(", "iou", ">", "nms_overlap_thresh", ")", ":", "\n", "                ", "t", "|=", "1", "<<", "i", "\n", "", "", "col_blocks", "=", "(", "(", "n_boxes", ")", "//", "(", "threadsPerBlock", ")", "+", "(", "\n", "(", "n_boxes", ")", "%", "(", "threadsPerBlock", ")", ">", "0", ")", ")", "\n", "dev_mask", "[", "cur_box_idx", "*", "col_blocks", "+", "col_start", "]", "=", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.div_up": [[93, 96], ["numba.jit"], "function", ["None"], ["", "", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "div_up", "(", "m", ",", "n", ")", ":", "\n", "    ", "return", "m", "//", "n", "+", "(", "m", "%", "n", ">", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.nms_postprocess": [[98, 116], ["numba.jit", "nms_gpu.div_up", "numpy.zeros", "range", "numpy.array", "range"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.div_up"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "nms_postprocess", "(", "keep_out", ",", "mask_host", ",", "boxes_num", ")", ":", "\n", "    ", "threadsPerBlock", "=", "8", "*", "8", "\n", "col_blocks", "=", "div_up", "(", "boxes_num", ",", "threadsPerBlock", ")", "\n", "remv", "=", "np", ".", "zeros", "(", "(", "col_blocks", ")", ",", "dtype", "=", "np", ".", "uint64", ")", "\n", "num_to_keep", "=", "0", "\n", "for", "i", "in", "range", "(", "boxes_num", ")", ":", "\n", "        ", "nblock", "=", "i", "//", "threadsPerBlock", "\n", "inblock", "=", "i", "%", "threadsPerBlock", "\n", "mask", "=", "np", ".", "array", "(", "1", "<<", "inblock", ",", "dtype", "=", "np", ".", "uint64", ")", "\n", "if", "not", "(", "remv", "[", "nblock", "]", "&", "mask", ")", ":", "\n", "            ", "keep_out", "[", "num_to_keep", "]", "=", "i", "\n", "num_to_keep", "+=", "1", "\n", "# unsigned long long *p = &mask_host[0] + i * col_blocks;", "\n", "for", "j", "in", "range", "(", "nblock", ",", "col_blocks", ")", ":", "\n", "                ", "remv", "[", "j", "]", "|=", "mask_host", "[", "i", "*", "col_blocks", "+", "j", "]", "\n", "# remv[j] |= p[j];", "\n", "", "", "", "return", "num_to_keep", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.nms_gpu": [[118, 153], ["numpy.zeros", "[].astype", "nms_gpu.div_up", "numba.cuda.select_device", "numpy.zeros", "numba.cuda.stream", "nms_gpu.nms_postprocess", "list", "nms_gpu.div_up", "nms_gpu.div_up", "cuda.stream.auto_synchronize", "numba.cuda.to_device", "numba.cuda.to_device", "cuda.to_device.copy_to_host", "boxes_host.reshape", "scores.argsort"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.div_up", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.nms_postprocess", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.div_up", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.div_up"], ["", "def", "nms_gpu", "(", "dets", ",", "nms_overlap_thresh", ",", "device_id", "=", "0", ")", ":", "\n", "    ", "\"\"\"nms in gpu. \n    \n    Args:\n        dets ([type]): [description]\n        nms_overlap_thresh ([type]): [description]\n        device_id ([type], optional): Defaults to 0. [description]\n    \n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "\n", "boxes_num", "=", "dets", ".", "shape", "[", "0", "]", "\n", "keep_out", "=", "np", ".", "zeros", "(", "[", "boxes_num", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "scores", "=", "dets", "[", ":", ",", "4", "]", "\n", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "boxes_host", "=", "dets", "[", "order", ",", ":", "]", "\n", "\n", "threadsPerBlock", "=", "8", "*", "8", "\n", "col_blocks", "=", "div_up", "(", "boxes_num", ",", "threadsPerBlock", ")", "\n", "cuda", ".", "select_device", "(", "device_id", ")", "\n", "mask_host", "=", "np", ".", "zeros", "(", "(", "boxes_num", "*", "col_blocks", ",", ")", ",", "dtype", "=", "np", ".", "uint64", ")", "\n", "blockspergrid", "=", "(", "div_up", "(", "boxes_num", ",", "threadsPerBlock", ")", ",", "\n", "div_up", "(", "boxes_num", ",", "threadsPerBlock", ")", ")", "\n", "stream", "=", "cuda", ".", "stream", "(", ")", "\n", "with", "stream", ".", "auto_synchronize", "(", ")", ":", "\n", "        ", "boxes_dev", "=", "cuda", ".", "to_device", "(", "boxes_host", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "mask_dev", "=", "cuda", ".", "to_device", "(", "mask_host", ",", "stream", ")", "\n", "nms_kernel", "[", "blockspergrid", ",", "threadsPerBlock", ",", "stream", "]", "(", "\n", "boxes_num", ",", "nms_overlap_thresh", ",", "boxes_dev", ",", "mask_dev", ")", "\n", "mask_dev", ".", "copy_to_host", "(", "mask_host", ",", "stream", "=", "stream", ")", "\n", "# stream.synchronize()", "\n", "", "num_out", "=", "nms_postprocess", "(", "keep_out", ",", "mask_host", ",", "boxes_num", ")", "\n", "keep", "=", "keep_out", "[", ":", "num_out", "]", "\n", "return", "list", "(", "order", "[", "keep", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.nms_gpu_cc": [[155, 165], ["numpy.zeros", "[].astype", "spconv.utils.non_max_suppression", "list", "scores.argsort"], "function", ["None"], ["", "def", "nms_gpu_cc", "(", "dets", ",", "nms_overlap_thresh", ",", "device_id", "=", "0", ")", ":", "\n", "    ", "boxes_num", "=", "dets", ".", "shape", "[", "0", "]", "\n", "keep", "=", "np", ".", "zeros", "(", "boxes_num", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "scores", "=", "dets", "[", ":", ",", "4", "]", "\n", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "sorted_dets", "=", "dets", "[", "order", ",", ":", "]", "\n", "num_out", "=", "non_max_suppression", "(", "sorted_dets", ",", "keep", ",", "nms_overlap_thresh", ",", "\n", "device_id", ")", "\n", "keep", "=", "keep", "[", ":", "num_out", "]", "\n", "return", "list", "(", "order", "[", "keep", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.trangle_area": [[167, 171], ["numba.cuda.jit"], "function", ["None"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "trangle_area", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "return", "(", "\n", "(", "a", "[", "0", "]", "-", "c", "[", "0", "]", ")", "*", "(", "b", "[", "1", "]", "-", "c", "[", "1", "]", ")", "-", "(", "a", "[", "1", "]", "-", "c", "[", "1", "]", ")", "*", "(", "b", "[", "0", "]", "-", "c", "[", "0", "]", ")", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.area": [[173, 181], ["numba.cuda.jit", "range", "abs", "nms_gpu.trangle_area"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.trangle_area"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], int32)'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "area", "(", "int_pts", ",", "num_of_inter", ")", ":", "\n", "    ", "area_val", "=", "0.0", "\n", "for", "i", "in", "range", "(", "num_of_inter", "-", "2", ")", ":", "\n", "        ", "area_val", "+=", "abs", "(", "\n", "trangle_area", "(", "int_pts", "[", ":", "2", "]", ",", "int_pts", "[", "2", "*", "i", "+", "2", ":", "2", "*", "i", "+", "4", "]", ",", "\n", "int_pts", "[", "2", "*", "i", "+", "4", ":", "2", "*", "i", "+", "6", "]", ")", ")", "\n", "", "return", "area_val", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.sort_vertex_in_convex_polygon": [[183, 221], ["numba.cuda.jit", "numba.cuda.local.array", "range", "numba.cuda.local.array", "numba.cuda.local.array", "range", "range", "math.sqrt"], "function", ["None"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], int32)'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "sort_vertex_in_convex_polygon", "(", "int_pts", ",", "num_of_inter", ")", ":", "\n", "    ", "if", "num_of_inter", ">", "0", ":", "\n", "        ", "center", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "center", "[", ":", "]", "=", "0.0", "\n", "for", "i", "in", "range", "(", "num_of_inter", ")", ":", "\n", "            ", "center", "[", "0", "]", "+=", "int_pts", "[", "2", "*", "i", "]", "\n", "center", "[", "1", "]", "+=", "int_pts", "[", "2", "*", "i", "+", "1", "]", "\n", "", "center", "[", "0", "]", "/=", "num_of_inter", "\n", "center", "[", "1", "]", "/=", "num_of_inter", "\n", "v", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "vs", "=", "cuda", ".", "local", ".", "array", "(", "(", "16", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "num_of_inter", ")", ":", "\n", "            ", "v", "[", "0", "]", "=", "int_pts", "[", "2", "*", "i", "]", "-", "center", "[", "0", "]", "\n", "v", "[", "1", "]", "=", "int_pts", "[", "2", "*", "i", "+", "1", "]", "-", "center", "[", "1", "]", "\n", "d", "=", "math", ".", "sqrt", "(", "v", "[", "0", "]", "*", "v", "[", "0", "]", "+", "v", "[", "1", "]", "*", "v", "[", "1", "]", ")", "\n", "v", "[", "0", "]", "=", "v", "[", "0", "]", "/", "d", "\n", "v", "[", "1", "]", "=", "v", "[", "1", "]", "/", "d", "\n", "if", "v", "[", "1", "]", "<", "0", ":", "\n", "                ", "v", "[", "0", "]", "=", "-", "2", "-", "v", "[", "0", "]", "\n", "", "vs", "[", "i", "]", "=", "v", "[", "0", "]", "\n", "", "j", "=", "0", "\n", "temp", "=", "0", "\n", "for", "i", "in", "range", "(", "1", ",", "num_of_inter", ")", ":", "\n", "            ", "if", "vs", "[", "i", "-", "1", "]", ">", "vs", "[", "i", "]", ":", "\n", "                ", "temp", "=", "vs", "[", "i", "]", "\n", "tx", "=", "int_pts", "[", "2", "*", "i", "]", "\n", "ty", "=", "int_pts", "[", "2", "*", "i", "+", "1", "]", "\n", "j", "=", "i", "\n", "while", "j", ">", "0", "and", "vs", "[", "j", "-", "1", "]", ">", "temp", ":", "\n", "                    ", "vs", "[", "j", "]", "=", "vs", "[", "j", "-", "1", "]", "\n", "int_pts", "[", "j", "*", "2", "]", "=", "int_pts", "[", "j", "*", "2", "-", "2", "]", "\n", "int_pts", "[", "j", "*", "2", "+", "1", "]", "=", "int_pts", "[", "j", "*", "2", "-", "1", "]", "\n", "j", "-=", "1", "\n", "\n", "", "vs", "[", "j", "]", "=", "temp", "\n", "int_pts", "[", "j", "*", "2", "]", "=", "tx", "\n", "int_pts", "[", "j", "*", "2", "+", "1", "]", "=", "ty", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.line_segment_intersection": [[223, 267], ["numba.cuda.jit", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array"], "function", ["None"], ["", "", "", "", "@", "cuda", ".", "jit", "(", "\n", "'(float32[:], float32[:], int32, int32, float32[:])'", ",", "\n", "device", "=", "True", ",", "\n", "inline", "=", "True", ")", "\n", "def", "line_segment_intersection", "(", "pts1", ",", "pts2", ",", "i", ",", "j", ",", "temp_pts", ")", ":", "\n", "    ", "A", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "B", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "C", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "D", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "A", "[", "0", "]", "=", "pts1", "[", "2", "*", "i", "]", "\n", "A", "[", "1", "]", "=", "pts1", "[", "2", "*", "i", "+", "1", "]", "\n", "\n", "B", "[", "0", "]", "=", "pts1", "[", "2", "*", "(", "(", "i", "+", "1", ")", "%", "4", ")", "]", "\n", "B", "[", "1", "]", "=", "pts1", "[", "2", "*", "(", "(", "i", "+", "1", ")", "%", "4", ")", "+", "1", "]", "\n", "\n", "C", "[", "0", "]", "=", "pts2", "[", "2", "*", "j", "]", "\n", "C", "[", "1", "]", "=", "pts2", "[", "2", "*", "j", "+", "1", "]", "\n", "\n", "D", "[", "0", "]", "=", "pts2", "[", "2", "*", "(", "(", "j", "+", "1", ")", "%", "4", ")", "]", "\n", "D", "[", "1", "]", "=", "pts2", "[", "2", "*", "(", "(", "j", "+", "1", ")", "%", "4", ")", "+", "1", "]", "\n", "BA0", "=", "B", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "BA1", "=", "B", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "DA0", "=", "D", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "CA0", "=", "C", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "DA1", "=", "D", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "CA1", "=", "C", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "acd", "=", "DA1", "*", "CA0", ">", "CA1", "*", "DA0", "\n", "bcd", "=", "(", "D", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "C", "[", "0", "]", "-", "B", "[", "0", "]", ")", ">", "(", "C", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "D", "[", "0", "]", "-", "B", "[", "0", "]", ")", "\n", "if", "acd", "!=", "bcd", ":", "\n", "        ", "abc", "=", "CA1", "*", "BA0", ">", "BA1", "*", "CA0", "\n", "abd", "=", "DA1", "*", "BA0", ">", "BA1", "*", "DA0", "\n", "if", "abc", "!=", "abd", ":", "\n", "            ", "DC0", "=", "D", "[", "0", "]", "-", "C", "[", "0", "]", "\n", "DC1", "=", "D", "[", "1", "]", "-", "C", "[", "1", "]", "\n", "ABBA", "=", "A", "[", "0", "]", "*", "B", "[", "1", "]", "-", "B", "[", "0", "]", "*", "A", "[", "1", "]", "\n", "CDDC", "=", "C", "[", "0", "]", "*", "D", "[", "1", "]", "-", "D", "[", "0", "]", "*", "C", "[", "1", "]", "\n", "DH", "=", "BA1", "*", "DC0", "-", "BA0", "*", "DC1", "\n", "Dx", "=", "ABBA", "*", "DC0", "-", "BA0", "*", "CDDC", "\n", "Dy", "=", "ABBA", "*", "DC1", "-", "BA1", "*", "CDDC", "\n", "temp_pts", "[", "0", "]", "=", "Dx", "/", "DH", "\n", "temp_pts", "[", "1", "]", "=", "Dy", "/", "DH", "\n", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.line_segment_intersection_v1": [[269, 309], ["numba.cuda.jit", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array", "nms_gpu.trangle_area", "nms_gpu.trangle_area", "nms_gpu.trangle_area"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.trangle_area", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.trangle_area", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.trangle_area"], ["", "@", "cuda", ".", "jit", "(", "\n", "'(float32[:], float32[:], int32, int32, float32[:])'", ",", "\n", "device", "=", "True", ",", "\n", "inline", "=", "True", ")", "\n", "def", "line_segment_intersection_v1", "(", "pts1", ",", "pts2", ",", "i", ",", "j", ",", "temp_pts", ")", ":", "\n", "    ", "a", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "b", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "c", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "d", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "a", "[", "0", "]", "=", "pts1", "[", "2", "*", "i", "]", "\n", "a", "[", "1", "]", "=", "pts1", "[", "2", "*", "i", "+", "1", "]", "\n", "\n", "b", "[", "0", "]", "=", "pts1", "[", "2", "*", "(", "(", "i", "+", "1", ")", "%", "4", ")", "]", "\n", "b", "[", "1", "]", "=", "pts1", "[", "2", "*", "(", "(", "i", "+", "1", ")", "%", "4", ")", "+", "1", "]", "\n", "\n", "c", "[", "0", "]", "=", "pts2", "[", "2", "*", "j", "]", "\n", "c", "[", "1", "]", "=", "pts2", "[", "2", "*", "j", "+", "1", "]", "\n", "\n", "d", "[", "0", "]", "=", "pts2", "[", "2", "*", "(", "(", "j", "+", "1", ")", "%", "4", ")", "]", "\n", "d", "[", "1", "]", "=", "pts2", "[", "2", "*", "(", "(", "j", "+", "1", ")", "%", "4", ")", "+", "1", "]", "\n", "\n", "area_abc", "=", "trangle_area", "(", "a", ",", "b", ",", "c", ")", "\n", "area_abd", "=", "trangle_area", "(", "a", ",", "b", ",", "d", ")", "\n", "\n", "if", "area_abc", "*", "area_abd", ">=", "0", ":", "\n", "        ", "return", "False", "\n", "\n", "", "area_cda", "=", "trangle_area", "(", "c", ",", "d", ",", "a", ")", "\n", "area_cdb", "=", "area_cda", "+", "area_abc", "-", "area_abd", "\n", "\n", "if", "area_cda", "*", "area_cdb", ">=", "0", ":", "\n", "        ", "return", "False", "\n", "", "t", "=", "area_cda", "/", "(", "area_abd", "-", "area_abc", ")", "\n", "\n", "dx", "=", "t", "*", "(", "b", "[", "0", "]", "-", "a", "[", "0", "]", ")", "\n", "dy", "=", "t", "*", "(", "b", "[", "1", "]", "-", "a", "[", "1", "]", ")", "\n", "temp_pts", "[", "0", "]", "=", "a", "[", "0", "]", "+", "dx", "\n", "temp_pts", "[", "1", "]", "=", "a", "[", "1", "]", "+", "dy", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.point_in_quadrilateral": [[311, 328], ["numba.cuda.jit"], "function", ["None"], ["", "@", "cuda", ".", "jit", "(", "'(float32, float32, float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "point_in_quadrilateral", "(", "pt_x", ",", "pt_y", ",", "corners", ")", ":", "\n", "    ", "ab0", "=", "corners", "[", "2", "]", "-", "corners", "[", "0", "]", "\n", "ab1", "=", "corners", "[", "3", "]", "-", "corners", "[", "1", "]", "\n", "\n", "ad0", "=", "corners", "[", "6", "]", "-", "corners", "[", "0", "]", "\n", "ad1", "=", "corners", "[", "7", "]", "-", "corners", "[", "1", "]", "\n", "\n", "ap0", "=", "pt_x", "-", "corners", "[", "0", "]", "\n", "ap1", "=", "pt_y", "-", "corners", "[", "1", "]", "\n", "\n", "abab", "=", "ab0", "*", "ab0", "+", "ab1", "*", "ab1", "\n", "abap", "=", "ab0", "*", "ap0", "+", "ab1", "*", "ap1", "\n", "adad", "=", "ad0", "*", "ad0", "+", "ad1", "*", "ad1", "\n", "adap", "=", "ad0", "*", "ap0", "+", "ad1", "*", "ap1", "\n", "\n", "return", "abab", ">=", "abap", "and", "abap", ">=", "0", "and", "adad", ">=", "adap", "and", "adap", ">=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.quadrilateral_intersection": [[330, 352], ["numba.cuda.jit", "range", "numba.cuda.local.array", "range", "nms_gpu.point_in_quadrilateral", "nms_gpu.point_in_quadrilateral", "range", "nms_gpu.line_segment_intersection"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.point_in_quadrilateral", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.point_in_quadrilateral", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.line_segment_intersection"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "quadrilateral_intersection", "(", "pts1", ",", "pts2", ",", "int_pts", ")", ":", "\n", "    ", "num_of_inter", "=", "0", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "if", "point_in_quadrilateral", "(", "pts1", "[", "2", "*", "i", "]", ",", "pts1", "[", "2", "*", "i", "+", "1", "]", ",", "pts2", ")", ":", "\n", "            ", "int_pts", "[", "num_of_inter", "*", "2", "]", "=", "pts1", "[", "2", "*", "i", "]", "\n", "int_pts", "[", "num_of_inter", "*", "2", "+", "1", "]", "=", "pts1", "[", "2", "*", "i", "+", "1", "]", "\n", "num_of_inter", "+=", "1", "\n", "", "if", "point_in_quadrilateral", "(", "pts2", "[", "2", "*", "i", "]", ",", "pts2", "[", "2", "*", "i", "+", "1", "]", ",", "pts1", ")", ":", "\n", "            ", "int_pts", "[", "num_of_inter", "*", "2", "]", "=", "pts2", "[", "2", "*", "i", "]", "\n", "int_pts", "[", "num_of_inter", "*", "2", "+", "1", "]", "=", "pts2", "[", "2", "*", "i", "+", "1", "]", "\n", "num_of_inter", "+=", "1", "\n", "", "", "temp_pts", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "4", ")", ":", "\n", "            ", "has_pts", "=", "line_segment_intersection", "(", "pts1", ",", "pts2", ",", "i", ",", "j", ",", "temp_pts", ")", "\n", "if", "has_pts", ":", "\n", "                ", "int_pts", "[", "num_of_inter", "*", "2", "]", "=", "temp_pts", "[", "0", "]", "\n", "int_pts", "[", "num_of_inter", "*", "2", "+", "1", "]", "=", "temp_pts", "[", "1", "]", "\n", "num_of_inter", "+=", "1", "\n", "\n", "", "", "", "return", "num_of_inter", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.rbbox_to_corners": [[354, 378], ["numba.cuda.jit", "math.cos", "math.sin", "numba.cuda.local.array", "numba.cuda.local.array", "range"], "function", ["None"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "rbbox_to_corners", "(", "corners", ",", "rbbox", ")", ":", "\n", "# generate clockwise corners and rotate it clockwise", "\n", "    ", "angle", "=", "rbbox", "[", "4", "]", "\n", "a_cos", "=", "math", ".", "cos", "(", "angle", ")", "\n", "a_sin", "=", "math", ".", "sin", "(", "angle", ")", "\n", "center_x", "=", "rbbox", "[", "0", "]", "\n", "center_y", "=", "rbbox", "[", "1", "]", "\n", "x_d", "=", "rbbox", "[", "2", "]", "\n", "y_d", "=", "rbbox", "[", "3", "]", "\n", "corners_x", "=", "cuda", ".", "local", ".", "array", "(", "(", "4", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "corners_y", "=", "cuda", ".", "local", ".", "array", "(", "(", "4", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "corners_x", "[", "0", "]", "=", "-", "x_d", "/", "2", "\n", "corners_x", "[", "1", "]", "=", "-", "x_d", "/", "2", "\n", "corners_x", "[", "2", "]", "=", "x_d", "/", "2", "\n", "corners_x", "[", "3", "]", "=", "x_d", "/", "2", "\n", "corners_y", "[", "0", "]", "=", "-", "y_d", "/", "2", "\n", "corners_y", "[", "1", "]", "=", "y_d", "/", "2", "\n", "corners_y", "[", "2", "]", "=", "y_d", "/", "2", "\n", "corners_y", "[", "3", "]", "=", "-", "y_d", "/", "2", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "corners", "[", "2", "*", "i", "]", "=", "a_cos", "*", "corners_x", "[", "i", "]", "+", "a_sin", "*", "corners_y", "[", "i", "]", "+", "center_x", "\n", "corners", "[", "2", "*", "i", "+", "\n", "1", "]", "=", "-", "a_sin", "*", "corners_x", "[", "i", "]", "+", "a_cos", "*", "corners_y", "[", "i", "]", "+", "center_y", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.inter": [[380, 395], ["numba.cuda.jit", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array", "nms_gpu.rbbox_to_corners", "nms_gpu.rbbox_to_corners", "nms_gpu.quadrilateral_intersection", "nms_gpu.sort_vertex_in_convex_polygon", "nms_gpu.area"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.rbbox_to_corners", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.rbbox_to_corners", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.quadrilateral_intersection", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.sort_vertex_in_convex_polygon", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.area"], ["", "", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "inter", "(", "rbbox1", ",", "rbbox2", ")", ":", "\n", "    ", "corners1", "=", "cuda", ".", "local", ".", "array", "(", "(", "8", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "corners2", "=", "cuda", ".", "local", ".", "array", "(", "(", "8", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "intersection_corners", "=", "cuda", ".", "local", ".", "array", "(", "(", "16", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "rbbox_to_corners", "(", "corners1", ",", "rbbox1", ")", "\n", "rbbox_to_corners", "(", "corners2", ",", "rbbox2", ")", "\n", "\n", "num_intersection", "=", "quadrilateral_intersection", "(", "corners1", ",", "corners2", ",", "\n", "intersection_corners", ")", "\n", "sort_vertex_in_convex_polygon", "(", "intersection_corners", ",", "num_intersection", ")", "\n", "# print(intersection_corners.reshape([-1, 2])[:num_intersection])", "\n", "\n", "return", "area", "(", "intersection_corners", ",", "num_intersection", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.devRotateIoU": [[397, 403], ["numba.cuda.jit", "nms_gpu.inter"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.inter"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "devRotateIoU", "(", "rbox1", ",", "rbox2", ")", ":", "\n", "    ", "area1", "=", "rbox1", "[", "2", "]", "*", "rbox1", "[", "3", "]", "\n", "area2", "=", "rbox2", "[", "2", "]", "*", "rbox2", "[", "3", "]", "\n", "area_inter", "=", "inter", "(", "rbox1", ",", "rbox2", ")", "\n", "return", "area_inter", "/", "(", "area1", "+", "area2", "-", "area_inter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.rotate_nms_kernel": [[405, 439], ["numba.cuda.jit", "min", "min", "numba.cuda.shared.array", "numba.cuda.syncthreads", "range", "nms_gpu.devRotateIoU"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.devRotateIoU"], ["", "@", "cuda", ".", "jit", "(", "'(int64, float32, float32[:], uint64[:])'", ")", "\n", "def", "rotate_nms_kernel", "(", "n_boxes", ",", "nms_overlap_thresh", ",", "dev_boxes", ",", "dev_mask", ")", ":", "\n", "    ", "threadsPerBlock", "=", "8", "*", "8", "\n", "row_start", "=", "cuda", ".", "blockIdx", ".", "y", "\n", "col_start", "=", "cuda", ".", "blockIdx", ".", "x", "\n", "tx", "=", "cuda", ".", "threadIdx", ".", "x", "\n", "row_size", "=", "min", "(", "n_boxes", "-", "row_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "col_size", "=", "min", "(", "n_boxes", "-", "col_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "block_boxes", "=", "cuda", ".", "shared", ".", "array", "(", "shape", "=", "(", "64", "*", "6", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "dev_box_idx", "=", "threadsPerBlock", "*", "col_start", "+", "tx", "\n", "if", "(", "tx", "<", "col_size", ")", ":", "\n", "        ", "block_boxes", "[", "tx", "*", "6", "+", "0", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "6", "+", "0", "]", "\n", "block_boxes", "[", "tx", "*", "6", "+", "1", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "6", "+", "1", "]", "\n", "block_boxes", "[", "tx", "*", "6", "+", "2", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "6", "+", "2", "]", "\n", "block_boxes", "[", "tx", "*", "6", "+", "3", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "6", "+", "3", "]", "\n", "block_boxes", "[", "tx", "*", "6", "+", "4", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "6", "+", "4", "]", "\n", "block_boxes", "[", "tx", "*", "6", "+", "5", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "6", "+", "5", "]", "\n", "", "cuda", ".", "syncthreads", "(", ")", "\n", "if", "(", "tx", "<", "row_size", ")", ":", "\n", "        ", "cur_box_idx", "=", "threadsPerBlock", "*", "row_start", "+", "tx", "\n", "# cur_box = dev_boxes + cur_box_idx * 5;", "\n", "t", "=", "0", "\n", "start", "=", "0", "\n", "if", "(", "row_start", "==", "col_start", ")", ":", "\n", "            ", "start", "=", "tx", "+", "1", "\n", "", "for", "i", "in", "range", "(", "start", ",", "col_size", ")", ":", "\n", "            ", "iou", "=", "devRotateIoU", "(", "dev_boxes", "[", "cur_box_idx", "*", "6", ":", "cur_box_idx", "*", "6", "+", "5", "]", ",", "\n", "block_boxes", "[", "i", "*", "6", ":", "i", "*", "6", "+", "5", "]", ")", "\n", "# print('iou', iou, cur_box_idx, i)", "\n", "if", "(", "iou", ">", "nms_overlap_thresh", ")", ":", "\n", "                ", "t", "|=", "1", "<<", "i", "\n", "", "", "col_blocks", "=", "(", "(", "n_boxes", ")", "//", "(", "threadsPerBlock", ")", "+", "(", "\n", "(", "n_boxes", ")", "%", "(", "threadsPerBlock", ")", ">", "0", ")", ")", "\n", "dev_mask", "[", "cur_box_idx", "*", "col_blocks", "+", "col_start", "]", "=", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.rotate_nms_gpu": [[441, 477], ["dets.astype.astype", "numpy.zeros", "[].astype", "nms_gpu.div_up", "numba.cuda.select_device", "numpy.zeros", "numba.cuda.stream", "nms_gpu.nms_postprocess", "list", "nms_gpu.div_up", "nms_gpu.div_up", "cuda.stream.auto_synchronize", "numba.cuda.to_device", "numba.cuda.to_device", "cuda.to_device.copy_to_host", "boxes_host.reshape", "scores.argsort"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.div_up", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.nms_postprocess", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.div_up", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.div_up"], ["", "", "def", "rotate_nms_gpu", "(", "dets", ",", "nms_overlap_thresh", ",", "device_id", "=", "0", ")", ":", "\n", "    ", "\"\"\"nms in gpu. WARNING: this function can provide right result \n    but its performance isn't be tested\n    \n    Args:\n        dets ([type]): [description]\n        nms_overlap_thresh ([type]): [description]\n        device_id ([type], optional): Defaults to 0. [description]\n    \n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "dets", "=", "dets", ".", "astype", "(", "np", ".", "float32", ")", "\n", "boxes_num", "=", "dets", ".", "shape", "[", "0", "]", "\n", "keep_out", "=", "np", ".", "zeros", "(", "[", "boxes_num", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "scores", "=", "dets", "[", ":", ",", "5", "]", "\n", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "boxes_host", "=", "dets", "[", "order", ",", ":", "]", "\n", "\n", "threadsPerBlock", "=", "8", "*", "8", "\n", "col_blocks", "=", "div_up", "(", "boxes_num", ",", "threadsPerBlock", ")", "\n", "cuda", ".", "select_device", "(", "device_id", ")", "\n", "# mask_host shape: boxes_num * col_blocks * sizeof(np.uint64)", "\n", "mask_host", "=", "np", ".", "zeros", "(", "(", "boxes_num", "*", "col_blocks", ",", ")", ",", "dtype", "=", "np", ".", "uint64", ")", "\n", "blockspergrid", "=", "(", "div_up", "(", "boxes_num", ",", "threadsPerBlock", ")", ",", "\n", "div_up", "(", "boxes_num", ",", "threadsPerBlock", ")", ")", "\n", "stream", "=", "cuda", ".", "stream", "(", ")", "\n", "with", "stream", ".", "auto_synchronize", "(", ")", ":", "\n", "        ", "boxes_dev", "=", "cuda", ".", "to_device", "(", "boxes_host", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "mask_dev", "=", "cuda", ".", "to_device", "(", "mask_host", ",", "stream", ")", "\n", "rotate_nms_kernel", "[", "blockspergrid", ",", "threadsPerBlock", ",", "stream", "]", "(", "\n", "boxes_num", ",", "nms_overlap_thresh", ",", "boxes_dev", ",", "mask_dev", ")", "\n", "mask_dev", ".", "copy_to_host", "(", "mask_host", ",", "stream", "=", "stream", ")", "\n", "", "num_out", "=", "nms_postprocess", "(", "keep_out", ",", "mask_host", ",", "boxes_num", ")", "\n", "keep", "=", "keep_out", "[", ":", "num_out", "]", "\n", "return", "list", "(", "order", "[", "keep", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.rotate_iou_kernel": [[479, 510], ["numba.cuda.jit", "min", "min", "numba.cuda.shared.array", "numba.cuda.shared.array", "numba.cuda.syncthreads", "range", "nms_gpu.devRotateIoU"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.devRotateIoU"], ["", "@", "cuda", ".", "jit", "(", "'(int64, int64, float32[:], float32[:], float32[:])'", ",", "fastmath", "=", "False", ")", "\n", "def", "rotate_iou_kernel", "(", "N", ",", "K", ",", "dev_boxes", ",", "dev_query_boxes", ",", "dev_iou", ")", ":", "\n", "    ", "threadsPerBlock", "=", "8", "*", "8", "\n", "row_start", "=", "cuda", ".", "blockIdx", ".", "x", "\n", "col_start", "=", "cuda", ".", "blockIdx", ".", "y", "\n", "tx", "=", "cuda", ".", "threadIdx", ".", "x", "\n", "row_size", "=", "min", "(", "N", "-", "row_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "col_size", "=", "min", "(", "K", "-", "col_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "block_boxes", "=", "cuda", ".", "shared", ".", "array", "(", "shape", "=", "(", "64", "*", "5", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "block_qboxes", "=", "cuda", ".", "shared", ".", "array", "(", "shape", "=", "(", "64", "*", "5", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "dev_query_box_idx", "=", "threadsPerBlock", "*", "col_start", "+", "tx", "\n", "dev_box_idx", "=", "threadsPerBlock", "*", "row_start", "+", "tx", "\n", "if", "(", "tx", "<", "col_size", ")", ":", "\n", "        ", "block_qboxes", "[", "tx", "*", "5", "+", "0", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "0", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "1", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "1", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "2", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "2", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "3", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "3", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "4", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "4", "]", "\n", "", "if", "(", "tx", "<", "row_size", ")", ":", "\n", "        ", "block_boxes", "[", "tx", "*", "5", "+", "0", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "0", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "1", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "1", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "2", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "2", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "3", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "3", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "4", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "4", "]", "\n", "", "cuda", ".", "syncthreads", "(", ")", "\n", "if", "tx", "<", "row_size", ":", "\n", "        ", "for", "i", "in", "range", "(", "col_size", ")", ":", "\n", "            ", "offset", "=", "row_start", "*", "threadsPerBlock", "*", "K", "+", "col_start", "*", "threadsPerBlock", "+", "tx", "*", "K", "+", "i", "\n", "dev_iou", "[", "offset", "]", "=", "devRotateIoU", "(", "block_qboxes", "[", "i", "*", "5", ":", "i", "*", "5", "+", "5", "]", ",", "\n", "block_boxes", "[", "tx", "*", "5", ":", "tx", "*", "5", "+", "5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.rotate_iou_gpu": [[512, 548], ["boxes.astype.astype", "query_boxes.astype.astype", "numpy.zeros", "numba.cuda.select_device", "numba.cuda.stream", "np.zeros.astype", "nms_gpu.div_up", "nms_gpu.div_up", "cuda.stream.auto_synchronize", "numba.cuda.to_device", "numba.cuda.to_device", "numba.cuda.to_device", "cuda.to_device.copy_to_host", "boxes.astype.reshape", "query_boxes.astype.reshape", "np.zeros.reshape", "np.zeros.reshape"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.div_up", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.div_up"], ["", "", "", "def", "rotate_iou_gpu", "(", "boxes", ",", "query_boxes", ",", "device_id", "=", "0", ")", ":", "\n", "    ", "\"\"\"rotated box iou running in gpu. 500x faster than cpu version\n    (take 5ms in one example with numba.cuda code).\n    convert from [this project](\n        https://github.com/hongzhenwang/RRPN-revise/tree/master/lib/rotation).\n    \n    Args:\n        boxes (float tensor: [N, 5]): rbboxes. format: centers, dims, \n            angles(clockwise when positive)\n        query_boxes (float tensor: [K, 5]): [description]\n        device_id (int, optional): Defaults to 0. [description]\n    \n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "box_dtype", "=", "boxes", ".", "dtype", "\n", "boxes", "=", "boxes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "query_boxes", "=", "query_boxes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "N", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "K", "=", "query_boxes", ".", "shape", "[", "0", "]", "\n", "iou", "=", "np", ".", "zeros", "(", "(", "N", ",", "K", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "N", "==", "0", "or", "K", "==", "0", ":", "\n", "        ", "return", "iou", "\n", "", "threadsPerBlock", "=", "8", "*", "8", "\n", "cuda", ".", "select_device", "(", "device_id", ")", "\n", "blockspergrid", "=", "(", "div_up", "(", "N", ",", "threadsPerBlock", ")", ",", "div_up", "(", "K", ",", "threadsPerBlock", ")", ")", "\n", "\n", "stream", "=", "cuda", ".", "stream", "(", ")", "\n", "with", "stream", ".", "auto_synchronize", "(", ")", ":", "\n", "        ", "boxes_dev", "=", "cuda", ".", "to_device", "(", "boxes", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "query_boxes_dev", "=", "cuda", ".", "to_device", "(", "query_boxes", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "iou_dev", "=", "cuda", ".", "to_device", "(", "iou", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "rotate_iou_kernel", "[", "blockspergrid", ",", "threadsPerBlock", ",", "stream", "]", "(", "\n", "N", ",", "K", ",", "boxes_dev", ",", "query_boxes_dev", ",", "iou_dev", ")", "\n", "iou_dev", ".", "copy_to_host", "(", "iou", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", "=", "stream", ")", "\n", "", "return", "iou", ".", "astype", "(", "boxes", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.devRotateIoUEval": [[550, 563], ["numba.cuda.jit", "nms_gpu.inter"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.inter"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:], int32)'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "devRotateIoUEval", "(", "rbox1", ",", "rbox2", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "area1", "=", "rbox1", "[", "2", "]", "*", "rbox1", "[", "3", "]", "\n", "area2", "=", "rbox2", "[", "2", "]", "*", "rbox2", "[", "3", "]", "\n", "area_inter", "=", "inter", "(", "rbox1", ",", "rbox2", ")", "\n", "if", "criterion", "==", "-", "1", ":", "\n", "        ", "return", "area_inter", "/", "(", "area1", "+", "area2", "-", "area_inter", ")", "\n", "", "elif", "criterion", "==", "0", ":", "\n", "        ", "return", "area_inter", "/", "area1", "\n", "", "elif", "criterion", "==", "1", ":", "\n", "        ", "return", "area_inter", "/", "area2", "\n", "", "else", ":", "\n", "        ", "return", "area_inter", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.rotate_iou_kernel_eval": [[565, 604], ["numba.cuda.jit", "min", "min", "numba.cuda.shared.array", "numba.cuda.shared.array", "numba.cuda.syncthreads", "range", "nms_gpu.devRotateIoUEval"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.devRotateIoUEval"], ["", "", "@", "cuda", ".", "jit", "(", "\n", "'(int64, int64, float32[:], float32[:], float32[:], int32)'", ",", "\n", "fastmath", "=", "False", ")", "\n", "def", "rotate_iou_kernel_eval", "(", "N", ",", "\n", "K", ",", "\n", "dev_boxes", ",", "\n", "dev_query_boxes", ",", "\n", "dev_iou", ",", "\n", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "threadsPerBlock", "=", "8", "*", "8", "\n", "row_start", "=", "cuda", ".", "blockIdx", ".", "x", "\n", "col_start", "=", "cuda", ".", "blockIdx", ".", "y", "\n", "tx", "=", "cuda", ".", "threadIdx", ".", "x", "\n", "row_size", "=", "min", "(", "N", "-", "row_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "col_size", "=", "min", "(", "K", "-", "col_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "block_boxes", "=", "cuda", ".", "shared", ".", "array", "(", "shape", "=", "(", "64", "*", "5", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "block_qboxes", "=", "cuda", ".", "shared", ".", "array", "(", "shape", "=", "(", "64", "*", "5", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "dev_query_box_idx", "=", "threadsPerBlock", "*", "col_start", "+", "tx", "\n", "dev_box_idx", "=", "threadsPerBlock", "*", "row_start", "+", "tx", "\n", "if", "(", "tx", "<", "col_size", ")", ":", "\n", "        ", "block_qboxes", "[", "tx", "*", "5", "+", "0", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "0", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "1", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "1", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "2", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "2", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "3", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "3", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "4", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "4", "]", "\n", "", "if", "(", "tx", "<", "row_size", ")", ":", "\n", "        ", "block_boxes", "[", "tx", "*", "5", "+", "0", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "0", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "1", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "1", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "2", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "2", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "3", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "3", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "4", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "4", "]", "\n", "", "cuda", ".", "syncthreads", "(", ")", "\n", "if", "tx", "<", "row_size", ":", "\n", "        ", "for", "i", "in", "range", "(", "col_size", ")", ":", "\n", "            ", "offset", "=", "row_start", "*", "threadsPerBlock", "*", "K", "+", "col_start", "*", "threadsPerBlock", "+", "tx", "*", "K", "+", "i", "\n", "dev_iou", "[", "offset", "]", "=", "devRotateIoUEval", "(", "block_qboxes", "[", "i", "*", "5", ":", "i", "*", "5", "+", "5", "]", ",", "\n", "block_boxes", "[", "tx", "*", "5", ":", "tx", "*", "5", "+", "5", "]", ",", "\n", "criterion", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.rotate_iou_gpu_eval": [[606, 642], ["boxes.astype.astype", "query_boxes.astype.astype", "numpy.zeros", "numba.cuda.select_device", "numba.cuda.stream", "np.zeros.astype", "nms_gpu.div_up", "nms_gpu.div_up", "cuda.stream.auto_synchronize", "numba.cuda.to_device", "numba.cuda.to_device", "numba.cuda.to_device", "cuda.to_device.copy_to_host", "boxes.astype.reshape", "query_boxes.astype.reshape", "np.zeros.reshape", "np.zeros.reshape"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.div_up", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_gpu.div_up"], ["", "", "", "def", "rotate_iou_gpu_eval", "(", "boxes", ",", "query_boxes", ",", "criterion", "=", "-", "1", ",", "device_id", "=", "0", ")", ":", "\n", "    ", "\"\"\"rotated box iou running in gpu. 500x faster than cpu version\n    (take 5ms in one example with numba.cuda code).\n    convert from [this project](\n        https://github.com/hongzhenwang/RRPN-revise/tree/master/lib/rotation).\n    \n    Args:\n        boxes (float tensor: [N, 5]): rbboxes. format: centers, dims, \n            angles(clockwise when positive)\n        query_boxes (float tensor: [K, 5]): [description]\n        device_id (int, optional): Defaults to 0. [description]\n    \n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "box_dtype", "=", "boxes", ".", "dtype", "\n", "boxes", "=", "boxes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "query_boxes", "=", "query_boxes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "N", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "K", "=", "query_boxes", ".", "shape", "[", "0", "]", "\n", "iou", "=", "np", ".", "zeros", "(", "(", "N", ",", "K", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "N", "==", "0", "or", "K", "==", "0", ":", "\n", "        ", "return", "iou", "\n", "", "threadsPerBlock", "=", "8", "*", "8", "\n", "cuda", ".", "select_device", "(", "device_id", ")", "\n", "blockspergrid", "=", "(", "div_up", "(", "N", ",", "threadsPerBlock", ")", ",", "div_up", "(", "K", ",", "threadsPerBlock", ")", ")", "\n", "\n", "stream", "=", "cuda", ".", "stream", "(", ")", "\n", "with", "stream", ".", "auto_synchronize", "(", ")", ":", "\n", "        ", "boxes_dev", "=", "cuda", ".", "to_device", "(", "boxes", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "query_boxes_dev", "=", "cuda", ".", "to_device", "(", "query_boxes", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "iou_dev", "=", "cuda", ".", "to_device", "(", "iou", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "rotate_iou_kernel_eval", "[", "blockspergrid", ",", "threadsPerBlock", ",", "stream", "]", "(", "\n", "N", ",", "K", ",", "boxes_dev", ",", "query_boxes_dev", ",", "iou_dev", ",", "criterion", ")", "\n", "iou_dev", ".", "copy_to_host", "(", "iou", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", "=", "stream", ")", "\n", "", "return", "iou", ".", "astype", "(", "boxes", ".", "dtype", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_cpu.nms_cc": [[12, 16], ["[].astype", "spconv.utils.non_max_suppression_cpu", "scores.argsort"], "function", ["None"], ["def", "nms_cc", "(", "dets", ",", "thresh", ")", ":", "\n", "    ", "scores", "=", "dets", "[", ":", ",", "4", "]", "\n", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "int32", ")", "# highest->lowest", "\n", "return", "non_max_suppression_cpu", "(", "dets", ",", "order", ",", "thresh", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_cpu.rotate_nms_cc": [[18, 31], ["[].astype", "second.core.box_np_ops.center_to_corner_box2d", "second.core.box_np_ops.corner_to_standup_nd", "second.core.box_np_ops.iou_jit", "spconv.utils.rotate_non_max_suppression_cpu", "scores.argsort"], "function", ["home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.center_to_corner_box2d", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.corner_to_standup_nd", "home.repos.pwc.inspect_result.pangsu0613_CLOCs.core.box_np_ops.iou_jit"], ["", "def", "rotate_nms_cc", "(", "dets", ",", "thresh", ")", ":", "\n", "\n", "    ", "scores", "=", "dets", "[", ":", ",", "5", "]", "\n", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "int32", ")", "# highest->lowest", "\n", "dets_corners", "=", "box_np_ops", ".", "center_to_corner_box2d", "(", "dets", "[", ":", ",", ":", "2", "]", ",", "dets", "[", ":", ",", "2", ":", "4", "]", ",", "\n", "dets", "[", ":", ",", "4", "]", ")", "\n", "\n", "dets_standup", "=", "box_np_ops", ".", "corner_to_standup_nd", "(", "dets_corners", ")", "\n", "\n", "standup_iou", "=", "box_np_ops", ".", "iou_jit", "(", "dets_standup", ",", "dets_standup", ",", "eps", "=", "0.0", ")", "\n", "# print(dets_corners.shape, order.shape, standup_iou.shape)", "\n", "return", "rotate_non_max_suppression_cpu", "(", "dets_corners", ",", "order", ",", "standup_iou", ",", "\n", "thresh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_cpu.nms_jit": [[33, 64], ["numba.jit", "[].astype", "numpy.zeros", "range", "keep.append", "range", "max", "max", "scores.argsort", "min", "max", "min", "max"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "nms_jit", "(", "dets", ",", "thresh", ",", "eps", "=", "0.0", ")", ":", "\n", "    ", "x1", "=", "dets", "[", ":", ",", "0", "]", "\n", "y1", "=", "dets", "[", ":", ",", "1", "]", "\n", "x2", "=", "dets", "[", ":", ",", "2", "]", "\n", "y2", "=", "dets", "[", ":", ",", "3", "]", "\n", "scores", "=", "dets", "[", ":", ",", "4", "]", "\n", "areas", "=", "(", "x2", "-", "x1", "+", "eps", ")", "*", "(", "y2", "-", "y1", "+", "eps", ")", "\n", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "int32", ")", "# highest->lowest", "\n", "ndets", "=", "dets", ".", "shape", "[", "0", "]", "\n", "suppressed", "=", "np", ".", "zeros", "(", "(", "ndets", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "keep", "=", "[", "]", "\n", "for", "_i", "in", "range", "(", "ndets", ")", ":", "\n", "        ", "i", "=", "order", "[", "_i", "]", "# start with highest score box", "\n", "if", "suppressed", "[", "\n", "i", "]", "==", "1", ":", "# if any box have enough iou with this, remove it", "\n", "            ", "continue", "\n", "", "keep", ".", "append", "(", "i", ")", "\n", "for", "_j", "in", "range", "(", "_i", "+", "1", ",", "ndets", ")", ":", "\n", "            ", "j", "=", "order", "[", "_j", "]", "\n", "if", "suppressed", "[", "j", "]", "==", "1", ":", "\n", "                ", "continue", "\n", "# calculate iou between i and j box", "\n", "", "w", "=", "max", "(", "min", "(", "x2", "[", "i", "]", ",", "x2", "[", "j", "]", ")", "-", "max", "(", "x1", "[", "i", "]", ",", "x1", "[", "j", "]", ")", "+", "eps", ",", "0.0", ")", "\n", "h", "=", "max", "(", "min", "(", "y2", "[", "i", "]", ",", "y2", "[", "j", "]", ")", "-", "max", "(", "y1", "[", "i", "]", ",", "y1", "[", "j", "]", ")", "+", "eps", ",", "0.0", ")", "\n", "inter", "=", "w", "*", "h", "\n", "ovr", "=", "inter", "/", "(", "areas", "[", "i", "]", "+", "areas", "[", "j", "]", "-", "inter", ")", "\n", "# ovr = inter / areas[j]", "\n", "if", "ovr", ">=", "thresh", ":", "\n", "                ", "suppressed", "[", "j", "]", "=", "1", "\n", "", "", "", "return", "keep", "\n", "\n"]], "home.repos.pwc.inspect_result.pangsu0613_CLOCs.non_max_suppression.nms_cpu.soft_nms_jit": [[66, 157], ["numba.jit", "range", "range", "min", "max", "float", "min", "max", "numpy.exp"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "'float32[:, :], float32, float32, float32, uint32'", ",", "nopython", "=", "True", ")", "\n", "def", "soft_nms_jit", "(", "boxes", ",", "sigma", "=", "0.5", ",", "Nt", "=", "0.3", ",", "threshold", "=", "0.001", ",", "method", "=", "0", ")", ":", "\n", "    ", "N", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "pos", "=", "0", "\n", "maxscore", "=", "0", "\n", "maxpos", "=", "0", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "maxscore", "=", "boxes", "[", "i", ",", "4", "]", "\n", "maxpos", "=", "i", "\n", "\n", "tx1", "=", "boxes", "[", "i", ",", "0", "]", "\n", "ty1", "=", "boxes", "[", "i", ",", "1", "]", "\n", "tx2", "=", "boxes", "[", "i", ",", "2", "]", "\n", "ty2", "=", "boxes", "[", "i", ",", "3", "]", "\n", "ts", "=", "boxes", "[", "i", ",", "4", "]", "\n", "pos", "=", "i", "+", "1", "\n", "# get max box", "\n", "while", "pos", "<", "N", ":", "\n", "            ", "if", "maxscore", "<", "boxes", "[", "pos", ",", "4", "]", ":", "\n", "                ", "maxscore", "=", "boxes", "[", "pos", ",", "4", "]", "\n", "maxpos", "=", "pos", "\n", "", "pos", "=", "pos", "+", "1", "\n", "\n", "# add max box as a detection", "\n", "", "boxes", "[", "i", ",", "0", "]", "=", "boxes", "[", "maxpos", ",", "0", "]", "\n", "boxes", "[", "i", ",", "1", "]", "=", "boxes", "[", "maxpos", ",", "1", "]", "\n", "boxes", "[", "i", ",", "2", "]", "=", "boxes", "[", "maxpos", ",", "2", "]", "\n", "boxes", "[", "i", ",", "3", "]", "=", "boxes", "[", "maxpos", ",", "3", "]", "\n", "boxes", "[", "i", ",", "4", "]", "=", "boxes", "[", "maxpos", ",", "4", "]", "\n", "\n", "# swap ith box with position of max box", "\n", "boxes", "[", "maxpos", ",", "0", "]", "=", "tx1", "\n", "boxes", "[", "maxpos", ",", "1", "]", "=", "ty1", "\n", "boxes", "[", "maxpos", ",", "2", "]", "=", "tx2", "\n", "boxes", "[", "maxpos", ",", "3", "]", "=", "ty2", "\n", "boxes", "[", "maxpos", ",", "4", "]", "=", "ts", "\n", "\n", "tx1", "=", "boxes", "[", "i", ",", "0", "]", "\n", "ty1", "=", "boxes", "[", "i", ",", "1", "]", "\n", "tx2", "=", "boxes", "[", "i", ",", "2", "]", "\n", "ty2", "=", "boxes", "[", "i", ",", "3", "]", "\n", "ts", "=", "boxes", "[", "i", ",", "4", "]", "\n", "\n", "pos", "=", "i", "+", "1", "\n", "# NMS iterations, note that N changes if detection boxes fall below threshold", "\n", "while", "pos", "<", "N", ":", "\n", "            ", "x1", "=", "boxes", "[", "pos", ",", "0", "]", "\n", "y1", "=", "boxes", "[", "pos", ",", "1", "]", "\n", "x2", "=", "boxes", "[", "pos", ",", "2", "]", "\n", "y2", "=", "boxes", "[", "pos", ",", "3", "]", "\n", "s", "=", "boxes", "[", "pos", ",", "4", "]", "\n", "\n", "area", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "iw", "=", "(", "min", "(", "tx2", ",", "x2", ")", "-", "max", "(", "tx1", ",", "x1", ")", "+", "1", ")", "\n", "if", "iw", ">", "0", ":", "\n", "                ", "ih", "=", "(", "min", "(", "ty2", ",", "y2", ")", "-", "max", "(", "ty1", ",", "y1", ")", "+", "1", ")", "\n", "if", "ih", ">", "0", ":", "\n", "                    ", "ua", "=", "float", "(", "(", "tx2", "-", "tx1", "+", "1", ")", "*", "(", "ty2", "-", "ty1", "+", "1", ")", "+", "area", "-", "\n", "iw", "*", "ih", ")", "\n", "ov", "=", "iw", "*", "ih", "/", "ua", "#iou between max box and detection box", "\n", "\n", "if", "method", "==", "1", ":", "# linear", "\n", "                        ", "if", "ov", ">", "Nt", ":", "\n", "                            ", "weight", "=", "1", "-", "ov", "\n", "", "else", ":", "\n", "                            ", "weight", "=", "1", "\n", "", "", "elif", "method", "==", "2", ":", "# gaussian", "\n", "                        ", "weight", "=", "np", ".", "exp", "(", "-", "(", "ov", "*", "ov", ")", "/", "sigma", ")", "\n", "", "else", ":", "# original NMS", "\n", "                        ", "if", "ov", ">", "Nt", ":", "\n", "                            ", "weight", "=", "0", "\n", "", "else", ":", "\n", "                            ", "weight", "=", "1", "\n", "\n", "", "", "boxes", "[", "pos", ",", "4", "]", "=", "weight", "*", "boxes", "[", "pos", ",", "4", "]", "\n", "\n", "# if box score falls below threshold, discard the box by swapping with last box", "\n", "# update N", "\n", "if", "boxes", "[", "pos", ",", "4", "]", "<", "threshold", ":", "\n", "                        ", "boxes", "[", "pos", ",", "0", "]", "=", "boxes", "[", "N", "-", "1", ",", "0", "]", "\n", "boxes", "[", "pos", ",", "1", "]", "=", "boxes", "[", "N", "-", "1", ",", "1", "]", "\n", "boxes", "[", "pos", ",", "2", "]", "=", "boxes", "[", "N", "-", "1", ",", "2", "]", "\n", "boxes", "[", "pos", ",", "3", "]", "=", "boxes", "[", "N", "-", "1", ",", "3", "]", "\n", "boxes", "[", "pos", ",", "4", "]", "=", "boxes", "[", "N", "-", "1", ",", "4", "]", "\n", "N", "=", "N", "-", "1", "\n", "pos", "=", "pos", "-", "1", "\n", "\n", "", "", "", "pos", "=", "pos", "+", "1", "\n", "\n", "", "", "keep", "=", "[", "i", "for", "i", "in", "range", "(", "N", ")", "]", "\n", "return", "keep", "\n", "", ""]]}