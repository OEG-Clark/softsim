{"home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.None.evaluate.Parameters.__init__": [[31, 97], ["easydict.EasyDict", "easydict.EasyDict", "easydict.EasyDict", "easydict.EasyDict", "easydict.EasyDict", "easydict.EasyDict", "dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "weights", ",", "fast", "=", "False", ",", "device", "=", "\"cuda:0\"", ")", ":", "\n", "\n", "        ", "self", ".", "device", "=", "device", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "num_aug", "=", "5", "\n", "self", ".", "train_skipping", "=", "8", "\n", "self", ".", "learning_rate", "=", "0.1", "\n", "\n", "# Autodetect the feature extractor", "\n", "\n", "self", ".", "in_channels", "=", "weights", "[", "'refiner.TSE.layer4.reduce.0.weight'", "]", ".", "shape", "[", "1", "]", "\n", "if", "self", ".", "in_channels", "==", "1024", ":", "\n", "            ", "self", ".", "feature_extractor", "=", "\"resnet101\"", "\n", "", "elif", "self", ".", "in_channels", "==", "256", ":", "\n", "            ", "self", ".", "feature_extractor", "=", "\"resnet18\"", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n", "\n", "", "if", "fast", ":", "\n", "            ", "self", ".", "init_iters", "=", "(", "5", ",", "10", ",", "10", ",", "10", ")", "\n", "self", ".", "update_iters", "=", "(", "5", ",", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "init_iters", "=", "(", "5", ",", "10", ",", "10", ",", "10", ",", "10", ")", "\n", "self", ".", "update_iters", "=", "(", "10", ",", ")", "\n", "\n", "", "self", ".", "aug_params", "=", "edict", "(", "\n", "\n", "num_aug", "=", "self", ".", "num_aug", ",", "\n", "min_px_count", "=", "1", ",", "\n", "\n", "fg_aug_params", "=", "edict", "(", "\n", "rotation", "=", "[", "5", ",", "-", "5", ",", "10", ",", "-", "10", ",", "20", ",", "-", "20", ",", "30", ",", "-", "30", ",", "45", ",", "-", "45", "]", ",", "\n", "fliplr", "=", "[", "False", ",", "False", ",", "False", ",", "False", ",", "True", "]", ",", "\n", "scale", "=", "[", "0.5", ",", "0.7", ",", "1.0", ",", "1.5", ",", "2.0", ",", "2.5", "]", ",", "\n", "skew", "=", "[", "(", "0.0", ",", "0.0", ")", ",", "(", "0.0", ",", "0.0", ")", ",", "(", "0.1", ",", "0.1", ")", "]", ",", "\n", "blur_size", "=", "[", "0.0", ",", "0.0", ",", "0.0", ",", "2.0", "]", ",", "\n", "blur_angle", "=", "[", "0", ",", "45", ",", "90", ",", "135", "]", ",", "\n", ")", ",", "\n", "bg_aug_params", "=", "edict", "(", "\n", "tcenter", "=", "[", "(", "0.5", ",", "0.5", ")", "]", ",", "\n", "rotation", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "fliplr", "=", "[", "False", "]", ",", "\n", "scale", "=", "[", "1.0", ",", "1.0", ",", "1.2", "]", ",", "\n", "skew", "=", "[", "(", "0.0", ",", "0.0", ")", "]", ",", "\n", "blur_size", "=", "[", "0.0", ",", "0.0", ",", "1.0", ",", "2.0", ",", "5.0", "]", ",", "\n", "blur_angle", "=", "[", "0", ",", "45", ",", "90", ",", "135", "]", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "self", ".", "disc_params", "=", "edict", "(", "\n", "layer", "=", "\"layer4\"", ",", "in_channels", "=", "self", ".", "in_channels", ",", "c_channels", "=", "96", ",", "out_channels", "=", "1", ",", "\n", "init_iters", "=", "self", ".", "init_iters", ",", "update_iters", "=", "self", ".", "update_iters", ",", "\n", "memory_size", "=", "80", ",", "train_skipping", "=", "self", ".", "train_skipping", ",", "learning_rate", "=", "self", ".", "learning_rate", ",", "\n", "pixel_weighting", "=", "dict", "(", "method", "=", "'hinge'", ",", "tf", "=", "0.1", ")", ",", "\n", "filter_reg", "=", "(", "1e-4", ",", "1e-2", ")", ",", "precond", "=", "(", "1e-4", ",", "1e-2", ")", ",", "precond_lr", "=", "0.1", ",", "CG_forgetting_rate", "=", "750", ",", "\n", "device", "=", "self", ".", "device", ",", "update_filters", "=", "True", "\n", ")", "\n", "\n", "self", ".", "refnet_params", "=", "edict", "(", "\n", "layers", "=", "(", "\"layer5\"", ",", "\"layer4\"", ",", "\"layer3\"", ",", "\"layer2\"", ")", ",", "\n", "nchannels", "=", "64", ",", "use_batch_norm", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "Tmat_params", "=", "edict", "(", "\n", "layer", "=", "\"layer3\"", ",", "Tmat_key", "=", "64", ",", "Tmat_val", "=", "64", ",", "Tmat_out", "=", "64", ",", "gateF", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.None.evaluate.Parameters.get_model": [[99, 117], ["model.augmenter.ImageAugmenter", "model.feature_extractor.ResnetFeatureExtractor().to", "model.template_matching.LongtermTemplate", "model.seg_network.SegNetwork", "model.tracker.Tracker", "model.tracker.Tracker.load_state_dict", "print", "model.tracker.Tracker.to", "model.feature_extractor.ResnetFeatureExtractor().to.get_out_channels", "model.feature_extractor.ResnetFeatureExtractor", "model.feature_extractor.ResnetFeatureExtractor().to.get_out_channels().items", "model.feature_extractor.ResnetFeatureExtractor().to.get_out_channels", "model.feature_extractor.ResnetFeatureExtractor().to.get_out_channels"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.load_state_dict", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.get_out_channels", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.get_out_channels", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.get_out_channels"], ["", "def", "get_model", "(", "self", ")", ":", "\n", "\n", "        ", "augmenter", "=", "ImageAugmenter", "(", "self", ".", "aug_params", ")", "\n", "extractor", "=", "ResnetFeatureExtractor", "(", "self", ".", "feature_extractor", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "disc_params", ".", "in_channels", "=", "extractor", ".", "get_out_channels", "(", ")", "[", "self", ".", "disc_params", ".", "layer", "]", "\n", "Tmatching", "=", "LongtermTemplate", "(", "extractor", ".", "get_out_channels", "(", ")", "[", "self", ".", "Tmat_params", ".", "layer", "]", "+", "1", ",", "\n", "self", ".", "Tmat_params", ".", "Tmat_key", ",", "self", ".", "Tmat_params", ".", "Tmat_val", ",", "self", ".", "Tmat_params", ".", "Tmat_out", ")", "\n", "p", "=", "self", ".", "refnet_params", "\n", "refinement_layers_channels", "=", "{", "L", ":", "nch", "for", "L", ",", "nch", "in", "extractor", ".", "get_out_channels", "(", ")", ".", "items", "(", ")", "if", "L", "in", "p", ".", "layers", "}", "\n", "refiner", "=", "SegNetwork", "(", "self", ".", "disc_params", ".", "out_channels", ",", "p", ".", "nchannels", ",", "refinement_layers_channels", ",", "p", ".", "use_batch_norm", ")", "\n", "\n", "mdl", "=", "Tracker", "(", "augmenter", ",", "extractor", ",", "self", ".", "disc_params", ",", "Tmatching", ",", "self", ".", "Tmat_params", ",", "refiner", ",", "self", ".", "device", ")", "\n", "\n", "mdl", ".", "load_state_dict", "(", "self", ".", "weights", ")", "\n", "print", "(", "\"Done load model\"", ")", "\n", "mdl", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "return", "mdl", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.None.evaluate.Parameters.eval_Flop": [[118, 147], ["torch.zeros", "gt.byte.byte.byte", "model.augmenter.ImageAugmenter", "model.feature_extractor.ResnetFeatureExtractor().to", "model.template_matching.LongtermTemplate", "model.seg_network.SegNetwork", "MeasureFlopTracker", "MeasureFlopTracker.to", "range", "print", "model.feature_extractor.ResnetFeatureExtractor().to.get_out_channels", "MeasureFlopTracker.", "model.feature_extractor.ResnetFeatureExtractor", "model.feature_extractor.ResnetFeatureExtractor().to.get_out_channels().items", "print", "torch.rand", "model.feature_extractor.ResnetFeatureExtractor().to.get_out_channels", "model.feature_extractor.ResnetFeatureExtractor().to.get_out_channels"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.get_out_channels", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.get_out_channels", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.get_out_channels"], ["", "def", "eval_Flop", "(", "self", ")", ":", "\n", "## calculate complexity", "\n", "        ", "x", "=", "(", "255", "*", "torch", ".", "rand", "(", "3", ",", "480", ",", "854", ")", ")", ".", "byte", "(", ")", "\n", "gt", "=", "torch", ".", "zeros", "(", "1", ",", "480", ",", "854", ")", "\n", "gt", "[", ":", ",", "100", ":", "200", ",", "100", ":", "200", "]", "=", "1", "\n", "\n", "gt", "=", "gt", ".", "byte", "(", ")", "\n", "\n", "\n", "augmenter", "=", "ImageAugmenter", "(", "self", ".", "aug_params", ")", "\n", "extractor", "=", "ResnetFeatureExtractor", "(", "self", ".", "feature_extractor", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "disc_params", ".", "in_channels", "=", "extractor", ".", "get_out_channels", "(", ")", "[", "self", ".", "disc_params", ".", "layer", "]", "\n", "Tmatching", "=", "LongtermTemplate", "(", "extractor", ".", "get_out_channels", "(", ")", "[", "self", ".", "Tmat_params", ".", "layer", "]", "+", "1", ",", "\n", "self", ".", "Tmat_params", ".", "Tmat_key", ",", "self", ".", "Tmat_params", ".", "Tmat_val", ",", "self", ".", "Tmat_params", ".", "Tmat_out", ")", "\n", "p", "=", "self", ".", "refnet_params", "\n", "refinement_layers_channels", "=", "{", "L", ":", "nch", "for", "L", ",", "nch", "in", "extractor", ".", "get_out_channels", "(", ")", ".", "items", "(", ")", "if", "L", "in", "p", ".", "layers", "}", "\n", "refiner", "=", "SegNetwork", "(", "self", ".", "disc_params", ".", "out_channels", ",", "p", ".", "nchannels", ",", "refinement_layers_channels", ",", "p", ".", "use_batch_norm", ")", "\n", "\n", "mdl", "=", "MeasureFlopTracker", "(", "augmenter", ",", "extractor", ",", "self", ".", "disc_params", ",", "Tmatching", ",", "self", ".", "Tmat_params", ",", "refiner", ",", "self", ".", "device", ")", "\n", "mdl", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "all_init", ",", "all_track", "=", "0", ",", "0", "\n", "for", "i", "in", "range", "(", "11", ")", ":", "\n", "            ", "init_t", ",", "track_t", "=", "mdl", "(", "x", ",", "gt", ")", "\n", "if", "i", ">", "0", ":", "\n", "                ", "all_init", "+=", "init_t", "\n", "all_track", "+=", "track_t", "\n", "print", "(", "\"{} th init :{} \\t track :{}\"", ".", "format", "(", "i", ",", "init_t", ",", "track_t", ")", ")", "\n", "", "", "print", "(", "\"total init :{} \\t track :{}\"", ".", "format", "(", "all_init", "/", "10", ",", "all_track", "/", "10", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.None.train.ModelParameters.__init__": [[28, 86], ["super().__init__", "easydict.EasyDict", "easydict.EasyDict", "easydict.EasyDict", "easydict.EasyDict", "easydict.EasyDict", "print", "easydict.EasyDict", "easydict.EasyDict"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "feature_extractor", "=", "\"resnet101\"", ",", "device", "=", "\"cuda:0\"", ",", "batch_size", "=", "None", ",", "tmodel_cache_path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "name", "=", "name", "# Training session name", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "# Model parameters", "\n", "\n", "self", ".", "aug_params", "=", "edict", "(", "\n", "\n", "num_aug", "=", "15", ",", "\n", "min_px_count", "=", "1", ",", "\n", "\n", "fg_aug_params", "=", "edict", "(", "\n", "rotation", "=", "[", "5", ",", "-", "5", ",", "10", ",", "-", "10", ",", "20", ",", "-", "20", ",", "30", ",", "-", "30", ",", "45", ",", "-", "45", "]", ",", "\n", "fliplr", "=", "[", "False", ",", "False", ",", "False", ",", "False", ",", "True", "]", ",", "\n", "scale", "=", "[", "0.5", ",", "0.7", ",", "1.0", ",", "1.5", ",", "2.0", ",", "2.5", "]", ",", "\n", "skew", "=", "[", "(", "0.0", ",", "0.0", ")", ",", "(", "0.0", ",", "0.0", ")", ",", "(", "0.1", ",", "0.1", ")", "]", ",", "\n", "blur_size", "=", "[", "0.0", ",", "0.0", ",", "0.0", ",", "2.0", "]", ",", "\n", "blur_angle", "=", "[", "0", ",", "45", ",", "90", ",", "135", "]", ",", "\n", ")", ",", "\n", "bg_aug_params", "=", "edict", "(", "\n", "tcenter", "=", "[", "(", "0.5", ",", "0.5", ")", "]", ",", "\n", "rotation", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "fliplr", "=", "[", "False", "]", ",", "\n", "scale", "=", "[", "1.0", ",", "1.0", ",", "1.2", "]", ",", "\n", "skew", "=", "[", "(", "0.0", ",", "0.0", ")", "]", ",", "\n", "blur_size", "=", "[", "0.0", ",", "0.0", ",", "1.0", ",", "2.0", ",", "5.0", "]", ",", "\n", "blur_angle", "=", "[", "0", ",", "45", ",", "90", ",", "135", "]", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "self", ".", "disc_params", "=", "edict", "(", "\n", "layer", "=", "\"layer4\"", ",", "in_channels", "=", "256", "if", "'18'", "in", "feature_extractor", "else", "1024", ",", "c_channels", "=", "32", ",", "out_channels", "=", "1", ",", "\n", "init_iters", "=", "(", "5", ",", "10", ",", "10", ",", "10", ",", "10", ")", ",", "update_iters", "=", "(", "10", ",", ")", ",", "update_filters", "=", "True", ",", "\n", "filter_reg", "=", "(", "1e-5", ",", "1e-4", ")", ",", "precond", "=", "(", "1e-5", ",", "1e-4", ")", ",", "precond_lr", "=", "0.1", ",", "CG_forgetting_rate", "=", "75", ",", "\n", "memory_size", "=", "20", ",", "train_skipping", "=", "8", ",", "learning_rate", "=", "0.1", ",", "\n", "pixel_weighting", "=", "None", ",", "device", "=", "self", ".", "device", "\n", ")", "\n", "\n", "self", ".", "refnet_params", "=", "edict", "(", "\n", "refinement_layers", "=", "[", "\"layer5\"", ",", "\"layer4\"", ",", "\"layer3\"", ",", "\"layer2\"", "]", ",", "\n", "nchannels", "=", "64", ",", "use_batch_norm", "=", "True", "\n", ")", "\n", "self", ".", "Tmat_params", "=", "edict", "(", "\n", "layer", "=", "\"layer3\"", ",", "Tmat_key", "=", "64", ",", "Tmat_val", "=", "64", ",", "Tmat_out", "=", "64", ",", "gateF", "=", "True", ",", "endEP", "=", "60", "\n", ")", "\n", "\n", "self", ".", "feature_extractor", "=", "feature_extractor", "\n", "\n", "self", ".", "tmodel_cache", "=", "edict", "(", "\n", "enable", "=", "True", ",", "\n", "read_only", "=", "False", ",", "\n", "path", "=", "tmodel_cache_path", "/", "\"{self.feature_extractor}-c{d.c_channels}_gTrue\"", ".", "format", "(", "\n", "self", "=", "self", ",", "d", "=", "self", ".", "disc_params", ")", "\n", ")", "\n", "print", "(", "\"Get from pth file : {}\"", ".", "format", "(", "self", ".", "tmodel_cache", ".", "path", ")", ")", "\n", "", "def", "get_model", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.None.train.ModelParameters.get_model": [[86, 106], ["model.augmenter.ImageAugmenter", "model.feature_extractor.ResnetFeatureExtractor().to", "model.template_matching.LongtermTemplate", "model.seg_network.SegNetwork", "model.training_model.TrainerModel", "mdl.to.to.to", "model.feature_extractor.ResnetFeatureExtractor", "model.feature_extractor.ResnetFeatureExtractor().to.get_out_channels().items", "model.feature_extractor.ResnetFeatureExtractor().to.get_out_channels", "model.feature_extractor.ResnetFeatureExtractor().to.get_out_channels"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.get_out_channels", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.get_out_channels"], ["", "def", "get_model", "(", "self", ")", ":", "\n", "\n", "        ", "augmenter", "=", "ImageAugmenter", "(", "self", ".", "aug_params", ")", "\n", "extractor", "=", "ResnetFeatureExtractor", "(", "name", "=", "self", ".", "feature_extractor", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "p", "=", "self", ".", "refnet_params", "\n", "ft_channels", "=", "{", "L", ":", "nch", "for", "L", ",", "nch", "in", "extractor", ".", "get_out_channels", "(", ")", ".", "items", "(", ")", "if", "L", "in", "p", ".", "refinement_layers", "}", "\n", "Tmatching", "=", "LongtermTemplate", "(", "extractor", ".", "get_out_channels", "(", ")", "[", "self", ".", "Tmat_params", ".", "layer", "]", "+", "1", ",", "\n", "self", ".", "Tmat_params", ".", "Tmat_key", ",", "self", ".", "Tmat_params", ".", "Tmat_val", ",", "self", ".", "Tmat_params", ".", "Tmat_out", ")", "\n", "seg_network", "=", "SegNetwork", "(", "1", ",", "p", ".", "nchannels", ",", "ft_channels", ",", "p", ".", "use_batch_norm", ")", "\n", "# seg_network.eval()", "\n", "# seg_network.Diff_process.train()", "\n", "mdl", "=", "TrainerModel", "(", "augmenter", ",", "extractor", ",", "self", ".", "disc_params", ",", "Tmatching", ",", "self", ".", "Tmat_params", ",", "seg_network", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "tmodel_cache", "=", "self", ".", "tmodel_cache", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "\n", "\n", "mdl", "=", "mdl", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "return", "mdl", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.davis.evaluate_sequence": [[19, 51], ["dict", "object_info.items", "_statistics.items", "enumerate", "collections.OrderedDict", "numpy.ones", "zip", "float", "len", "list().index", "stat_fn", "results[].values", "len", "list", "annotations[].squeeze().numpy", "segmentations[].squeeze().numpy", "annotations.keys", "annotations[].squeeze", "segmentations[].squeeze"], "function", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.list"], ["def", "evaluate_sequence", "(", "segmentations", ",", "annotations", ",", "object_info", ",", "measure", "=", "'J'", ")", ":", "\n", "    ", "\"\"\"\n    Evaluate video sequence results.\n\n      Arguments:\n          segmentations (dict of ndarray): segmentation labels.\n          annotations   (dict of ndarray): ground-truth labels.\n          object_info   dict: {object_id: first_frame_index}\n\n      measure       evaluation metric (J,F)\n    \"\"\"", "\n", "\n", "results", "=", "dict", "(", "raw", "=", "odict", "(", ")", ")", "\n", "\n", "_measures", "=", "{", "'J'", ":", "davis_jaccard_measure", ",", "'F'", ":", "davis_f_measure", "}", "\n", "_statistics", "=", "{", "'decay'", ":", "decay", ",", "'mean'", ":", "mean", ",", "'recall'", ":", "recall", ",", "'std'", ":", "std", "}", "\n", "\n", "for", "obj_id", ",", "first_frame", "in", "object_info", ".", "items", "(", ")", ":", "\n", "\n", "        ", "r", "=", "np", ".", "ones", "(", "(", "len", "(", "annotations", ")", ")", ")", "*", "np", ".", "nan", "\n", "\n", "for", "i", ",", "(", "an", ",", "sg", ")", "in", "enumerate", "(", "zip", "(", "annotations", ",", "segmentations", ")", ")", ":", "\n", "            ", "if", "list", "(", "annotations", ".", "keys", "(", ")", ")", ".", "index", "(", "first_frame", ")", "<", "i", "<", "len", "(", "annotations", ")", "-", "1", ":", "\n", "                ", "r", "[", "i", "]", "=", "_measures", "[", "measure", "]", "(", "annotations", "[", "an", "]", ".", "squeeze", "(", "0", ")", ".", "numpy", "(", ")", "==", "obj_id", ",", "\n", "segmentations", "[", "sg", "]", ".", "squeeze", "(", "0", ")", ".", "numpy", "(", ")", "==", "obj_id", ")", "\n", "\n", "", "", "results", "[", "'raw'", "]", "[", "obj_id", "]", "=", "r", "\n", "\n", "", "for", "stat", ",", "stat_fn", "in", "_statistics", ".", "items", "(", ")", ":", "\n", "        ", "results", "[", "stat", "]", "=", "[", "float", "(", "stat_fn", "(", "r", ")", ")", "for", "r", "in", "results", "[", "'raw'", "]", ".", "values", "(", ")", "]", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.davis.davis_jaccard_measure": [[54, 70], ["gt_mask.astype.astype", "fg_mask.astype.astype", "numpy.isclose", "numpy.isclose", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "davis_jaccard_measure", "(", "fg_mask", ",", "gt_mask", ")", ":", "\n", "    ", "\"\"\" Compute region similarity as the Jaccard Index.\n\n    :param fg_mask: (ndarray): binary segmentation map.\n    :param gt_mask: (ndarray): binary annotation map.\n    :return: jaccard (float): region similarity\n    \"\"\"", "\n", "\n", "gt_mask", "=", "gt_mask", ".", "astype", "(", "np", ".", "bool", ")", "\n", "fg_mask", "=", "fg_mask", ".", "astype", "(", "np", ".", "bool", ")", "\n", "\n", "if", "np", ".", "isclose", "(", "np", ".", "sum", "(", "gt_mask", ")", ",", "0", ")", "and", "np", ".", "isclose", "(", "np", ".", "sum", "(", "fg_mask", ")", ",", "0", ")", ":", "\n", "        ", "return", "1", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "sum", "(", "(", "gt_mask", "&", "fg_mask", ")", ")", "/", "np", ".", "sum", "(", "(", "gt_mask", "|", "fg_mask", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.davis.davis_f_measure": [[73, 129], ["davis.seg2bmap", "davis.seg2bmap", "skimage.morphology.binary_dilation", "skimage.morphology.binary_dilation", "numpy.sum", "numpy.sum", "numpy.ceil", "skimage.morphology.disk", "skimage.morphology.disk", "numpy.atleast_3d", "numpy.linalg.norm", "numpy.sum", "float", "numpy.sum", "float"], "function", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.davis.seg2bmap", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.davis.seg2bmap"], ["", "", "def", "davis_f_measure", "(", "foreground_mask", ",", "gt_mask", ",", "bound_th", "=", "0.008", ")", ":", "\n", "    ", "\"\"\"\n    Compute mean,recall and decay from per-frame evaluation.\n    Calculates precision/recall for boundaries between foreground_mask and\n    gt_mask using morphological operators to speed it up.\n\n    Arguments:\n        foreground_mask (ndarray): binary segmentation image.\n        gt_mask         (ndarray): binary annotated image.\n\n    Returns:\n        F (float): boundaries F-measure\n        P (float): boundaries precision\n        R (float): boundaries recall\n    \"\"\"", "\n", "assert", "np", ".", "atleast_3d", "(", "foreground_mask", ")", ".", "shape", "[", "2", "]", "==", "1", "\n", "\n", "bound_pix", "=", "bound_th", "if", "bound_th", ">=", "1", "else", "np", ".", "ceil", "(", "bound_th", "*", "np", ".", "linalg", ".", "norm", "(", "foreground_mask", ".", "shape", ")", ")", "\n", "\n", "# Get the pixel boundaries of both masks", "\n", "fg_boundary", "=", "seg2bmap", "(", "foreground_mask", ")", "\n", "gt_boundary", "=", "seg2bmap", "(", "gt_mask", ")", "\n", "\n", "fg_dil", "=", "binary_dilation", "(", "fg_boundary", ",", "disk", "(", "bound_pix", ")", ")", "\n", "gt_dil", "=", "binary_dilation", "(", "gt_boundary", ",", "disk", "(", "bound_pix", ")", ")", "\n", "\n", "# Get the intersection", "\n", "gt_match", "=", "gt_boundary", "*", "fg_dil", "\n", "fg_match", "=", "fg_boundary", "*", "gt_dil", "\n", "\n", "# Area of the intersection", "\n", "n_fg", "=", "np", ".", "sum", "(", "fg_boundary", ")", "\n", "n_gt", "=", "np", ".", "sum", "(", "gt_boundary", ")", "\n", "\n", "# % Compute precision and recall", "\n", "if", "n_fg", "==", "0", "and", "n_gt", ">", "0", ":", "\n", "        ", "precision", "=", "1", "\n", "recall", "=", "0", "\n", "", "elif", "n_fg", ">", "0", "and", "n_gt", "==", "0", ":", "\n", "        ", "precision", "=", "0", "\n", "recall", "=", "1", "\n", "", "elif", "n_fg", "==", "0", "and", "n_gt", "==", "0", ":", "\n", "        ", "precision", "=", "1", "\n", "recall", "=", "1", "\n", "", "else", ":", "\n", "        ", "precision", "=", "np", ".", "sum", "(", "fg_match", ")", "/", "float", "(", "n_fg", ")", "\n", "recall", "=", "np", ".", "sum", "(", "gt_match", ")", "/", "float", "(", "n_gt", ")", "\n", "\n", "# Compute F measure", "\n", "", "if", "precision", "+", "recall", "==", "0", ":", "\n", "        ", "F", "=", "0", "\n", "", "else", ":", "\n", "        ", "F", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "\n", "", "return", "F", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.davis.seg2bmap": [[131, 190], ["seg.astype.astype", "numpy.zeros_like", "numpy.zeros_like", "numpy.zeros_like", "float", "float", "float", "float", "numpy.zeros", "range", "range", "numpy.atleast_3d", "abs", "math.floor", "math.floor"], "function", ["None"], ["", "def", "seg2bmap", "(", "seg", ",", "width", "=", "None", ",", "height", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    From a segmentation, compute a binary boundary map with 1 pixel wide\n    boundaries.  The boundary pixels are offset by 1/2 pixel towards the\n    origin from the actual segment boundary.\n\n    Arguments:\n        seg     : Segments labeled from 1..k.\n        width\t  :\tWidth of desired bmap  <= seg.shape[1]\n        height  :\tHeight of desired bmap <= seg.shape[0]\n\n    Returns:\n        bmap (ndarray):\tBinary boundary map.\n\n     David Martin <dmartin@eecs.berkeley.edu>\n     January 2003\n \"\"\"", "\n", "\n", "seg", "=", "seg", ".", "astype", "(", "np", ".", "bool", ")", "\n", "seg", "[", "seg", ">", "0", "]", "=", "1", "\n", "\n", "assert", "np", ".", "atleast_3d", "(", "seg", ")", ".", "shape", "[", "2", "]", "==", "1", "\n", "\n", "width", "=", "seg", ".", "shape", "[", "1", "]", "if", "width", "is", "None", "else", "width", "\n", "height", "=", "seg", ".", "shape", "[", "0", "]", "if", "height", "is", "None", "else", "height", "\n", "\n", "h", ",", "w", "=", "seg", ".", "shape", "[", ":", "2", "]", "\n", "\n", "ar1", "=", "float", "(", "width", ")", "/", "float", "(", "height", ")", "\n", "ar2", "=", "float", "(", "w", ")", "/", "float", "(", "h", ")", "\n", "\n", "assert", "not", "(", "width", ">", "w", "|", "height", ">", "h", "|", "abs", "(", "ar1", "-", "ar2", ")", ">", "0.01", ")", ",", "'Can'", "'t convert %dx%d seg to %dx%d bmap.'", "%", "(", "w", ",", "h", ",", "width", ",", "height", ")", "\n", "\n", "e", "=", "np", ".", "zeros_like", "(", "seg", ")", "\n", "s", "=", "np", ".", "zeros_like", "(", "seg", ")", "\n", "se", "=", "np", ".", "zeros_like", "(", "seg", ")", "\n", "\n", "e", "[", ":", ",", ":", "-", "1", "]", "=", "seg", "[", ":", ",", "1", ":", "]", "\n", "s", "[", ":", "-", "1", ",", ":", "]", "=", "seg", "[", "1", ":", ",", ":", "]", "\n", "se", "[", ":", "-", "1", ",", ":", "-", "1", "]", "=", "seg", "[", "1", ":", ",", "1", ":", "]", "\n", "\n", "b", "=", "seg", "^", "e", "|", "seg", "^", "s", "|", "seg", "^", "se", "\n", "b", "[", "-", "1", ",", ":", "]", "=", "seg", "[", "-", "1", ",", ":", "]", "^", "e", "[", "-", "1", ",", ":", "]", "\n", "b", "[", ":", ",", "-", "1", "]", "=", "seg", "[", ":", ",", "-", "1", "]", "^", "s", "[", ":", ",", "-", "1", "]", "\n", "b", "[", "-", "1", ",", "-", "1", "]", "=", "0", "\n", "\n", "if", "w", "==", "width", "and", "h", "==", "height", ":", "\n", "        ", "bmap", "=", "b", "\n", "", "else", ":", "\n", "        ", "bmap", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ")", "\n", "for", "x", "in", "range", "(", "w", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "h", ")", ":", "\n", "                ", "if", "b", "[", "y", ",", "x", "]", ":", "\n", "                    ", "j", "=", "1", "+", "floor", "(", "(", "y", "-", "1", ")", "+", "height", "/", "h", ")", "\n", "i", "=", "1", "+", "floor", "(", "(", "x", "-", "1", ")", "+", "width", "/", "h", ")", "\n", "bmap", "[", "j", ",", "i", "]", "=", "1", "\n", "\n", "", "", "", "", "return", "bmap", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.davis.nanmean": [[192, 196], ["warnings.catch_warnings", "warnings.simplefilter", "numpy.nanmean"], "function", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.davis.nanmean"], ["", "def", "nanmean", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "        ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ",", "category", "=", "RuntimeWarning", ")", "\n", "return", "np", ".", "nanmean", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.davis.mean": [[198, 203], ["numpy.nanmean"], "function", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.davis.nanmean"], ["", "", "def", "mean", "(", "X", ")", ":", "\n", "    ", "\"\"\"\n    Compute average ignoring NaN values.\n    \"\"\"", "\n", "return", "np", ".", "nanmean", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.davis.recall": [[205, 214], ["warnings.catch_warnings", "warnings.simplefilter", "davis.mean", "numpy.isnan"], "function", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.davis.mean"], ["", "def", "recall", "(", "X", ",", "threshold", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"\n    Fraction of values of X scoring higher than 'threshold'\n    \"\"\"", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "        ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ",", "category", "=", "RuntimeWarning", ")", "\n", "x", "=", "X", "[", "~", "np", ".", "isnan", "(", "X", ")", "]", "\n", "x", "=", "mean", "(", "x", ">", "threshold", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.davis.decay": [[216, 230], ["ids.astype.astype", "numpy.round", "warnings.catch_warnings", "warnings.simplefilter", "range", "numpy.nanmean", "numpy.nanmean", "numpy.isnan", "numpy.linspace", "len"], "function", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.davis.nanmean", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.davis.nanmean"], ["", "def", "decay", "(", "X", ",", "n_bins", "=", "4", ")", ":", "\n", "    ", "\"\"\"\n    Performance loss over time.\n    \"\"\"", "\n", "X", "=", "X", "[", "~", "np", ".", "isnan", "(", "X", ")", "]", "\n", "ids", "=", "np", ".", "round", "(", "np", ".", "linspace", "(", "1", ",", "len", "(", "X", ")", ",", "n_bins", "+", "1", ")", "+", "1e-10", ")", "-", "1", "\n", "ids", "=", "ids", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "D_bins", "=", "[", "X", "[", "ids", "[", "i", "]", ":", "ids", "[", "i", "+", "1", "]", "+", "1", "]", "for", "i", "in", "range", "(", "0", ",", "4", ")", "]", "\n", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "        ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ",", "category", "=", "RuntimeWarning", ")", "\n", "D", "=", "np", ".", "nanmean", "(", "D_bins", "[", "0", "]", ")", "-", "np", ".", "nanmean", "(", "D_bins", "[", "3", "]", ")", "\n", "", "return", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.davis.std": [[232, 237], ["numpy.nanstd"], "function", ["None"], ["", "def", "std", "(", "X", ")", ":", "\n", "    ", "\"\"\"\n    Compute standard deviation.\n    \"\"\"", "\n", "return", "np", ".", "nanstd", "(", "X", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.SampleSpec.__init__": [[18, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "seq_name", "=", "None", ",", "obj_id", "=", "None", ",", "frames", "=", "None", ",", "frame0_id", "=", "None", ")", ":", "\n", "        ", "self", ".", "seq_name", "=", "seq_name", "\n", "self", ".", "obj_id", "=", "obj_id", "\n", "self", ".", "frames", "=", "frames", "\n", "self", ".", "frame0_id", "=", "frame0_id", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.SampleSpec.__repr__": [[24, 26], ["str", "vars"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"SampleSpec: \"", "+", "str", "(", "vars", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.SampleSpec.encoded": [[27, 30], ["json.dumps", "vars"], "methods", ["None"], ["", "def", "encoded", "(", "self", ")", ":", "\n", "        ", "v", "=", "json", ".", "dumps", "(", "vars", "(", "self", ")", ")", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.SampleSpec.from_encoded": [[31, 35], ["training_datasets.SampleSpec", "json.loads"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "from_encoded", "(", "meta", ")", ":", "\n", "        ", "specs", "=", "[", "SampleSpec", "(", "**", "json", ".", "loads", "(", "m", ")", ")", "for", "m", "in", "meta", "]", "\n", "return", "specs", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.TrainingDataset.__init__": [[39, 43], ["torch.utils.data.Dataset.__init__", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "dset_path", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dset_path", "=", "Path", "(", "dset_path", ")", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.TrainingDataset.load_meta": [[44, 89], ["meta_file.exists", "print", "dict", "dict", "enumerate", "training_datasets.TrainingDataset._generate_occlusions", "dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.load", "torch.load", "torch.load", "torch.load", "tqdm.tqdm.tqdm", "list", "numpy.zeros", "enumerate", "pathlib.Path().resolve", "sorted", "sorted", "numpy.array", "numpy.unique", "frames.append", "max", "zip", "numpy.max", "p.glob", "PIL.Image.open", "max", "len", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.YouTubeVOSDataset._generate_occlusions", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.list"], ["", "def", "load_meta", "(", "self", ")", ":", "\n", "\n", "        ", "meta_file", "=", "Path", "(", "__file__", ")", ".", "resolve", "(", ")", ".", "parent", "/", "(", "self", ".", "name", "+", "\"_meta.pth\"", ")", "\n", "if", "meta_file", ".", "exists", "(", ")", ":", "\n", "            ", "return", "torch", ".", "load", "(", "meta_file", ")", "\n", "\n", "", "print", "(", "\"Caching occlusions for %s, please wait.\"", "%", "self", ".", "anno_path", ")", "\n", "\n", "frame_names", "=", "dict", "(", ")", "\n", "label_pixel_counts", "=", "dict", "(", ")", "\n", "\n", "paths", "=", "[", "self", ".", "anno_path", "/", "seq", "for", "seq", "in", "sorted", "(", "self", ".", "sequences", ")", "]", "\n", "for", "k", ",", "p", "in", "enumerate", "(", "tqdm", "(", "paths", ")", ")", ":", "\n", "\n", "            ", "frames", "=", "[", "]", "\n", "num_objects", "=", "0", "\n", "\n", "# Gather per-frame stats", "\n", "\n", "seq_lb_files", "=", "list", "(", "sorted", "(", "p", ".", "glob", "(", "\"*.png\"", ")", ")", ")", "\n", "for", "lb_path", "in", "seq_lb_files", ":", "\n", "\n", "                ", "lb", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "lb_path", ")", ")", "\n", "obj_ids", ",", "counts", "=", "np", ".", "unique", "(", "lb", ",", "return_counts", "=", "True", ")", "\n", "frames", ".", "append", "(", "(", "obj_ids", ",", "counts", ")", ")", "\n", "num_objects", "=", "max", "(", "num_objects", ",", "max", "(", "obj_ids", ")", ")", "\n", "\n", "# Populate a matrix of object pixel counts", "\n", "\n", "", "px_counts", "=", "np", ".", "zeros", "(", "(", "len", "(", "frames", ")", ",", "num_objects", "+", "1", ")", ")", "\n", "\n", "for", "i", ",", "(", "obj_ids", ",", "counts", ")", "in", "enumerate", "(", "frames", ")", ":", "\n", "                ", "for", "oid", ",", "cnt", "in", "zip", "(", "obj_ids", ",", "counts", ")", ":", "\n", "                    ", "px_counts", "[", "i", ",", "oid", "]", "=", "cnt", "\n", "\n", "", "", "frame_names", "[", "p", ".", "stem", "]", "=", "[", "f", ".", "stem", "for", "f", "in", "seq_lb_files", "]", "\n", "label_pixel_counts", "[", "p", ".", "stem", "]", "=", "(", "px_counts", ",", "np", ".", "max", "(", "px_counts", ",", "axis", "=", "0", ")", ")", "\n", "\n", "# Generate object occlusions information and save", "\n", "\n", "", "occlusions", "=", "self", ".", "_generate_occlusions", "(", "label_pixel_counts", ")", "\n", "meta", "=", "dict", "(", "frame_names", "=", "frame_names", ",", "occlusions", "=", "occlusions", ")", "\n", "torch", ".", "save", "(", "meta", ",", "meta_file", ")", "\n", "\n", "return", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.TrainingDataset.generate_samples": [[90, 111], ["training_datasets.TrainingDataset.load_meta", "[].tolist", "random.sample", "range", "training_datasets.TrainingDataset.sequence_length", "random.sample.append", "training_datasets.TrainingDataset.sample_random_image_set", "training_datasets.TrainingDataset.specs.append", "easydict.EasyDict", "training_datasets.TrainingDataset.object_ids"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.TrainingDataset.load_meta", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.TrainingDataset.sequence_length", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.TrainingDataset.sample_random_image_set", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.TrainingDataset.object_ids"], ["", "def", "generate_samples", "(", "self", ",", "epoch_samples", ",", "epoch_repeats", ",", "min_seq_length", ",", "sample_size", ")", ":", "\n", "\n", "        ", "d", "=", "self", ".", "load_meta", "(", ")", "\n", "self", ".", "occlusions", "=", "d", "[", "'occlusions'", "]", "\n", "self", ".", "frame_names", "=", "d", "[", "'frame_names'", "]", "\n", "\n", "sequences", "=", "[", "]", "\n", "for", "seq_name", "in", "self", ".", "sequences", ":", "\n", "            ", "if", "self", ".", "sequence_length", "(", "seq_name", ")", "<", "min_seq_length", ":", "\n", "                ", "continue", "\n", "", "for", "obj_id", "in", "self", ".", "object_ids", "(", "seq_name", ")", "[", "1", ":", "]", ".", "tolist", "(", ")", ":", "\n", "                ", "sequences", ".", "append", "(", "edict", "(", "name", "=", "seq_name", ",", "obj_id", "=", "obj_id", ")", ")", "\n", "\n", "", "", "if", "epoch_samples", ">", "0", ":", "\n", "            ", "sequences", "=", "random", ".", "sample", "(", "sequences", ",", "epoch_samples", ")", "\n", "\n", "", "self", ".", "specs", "=", "[", "]", "\n", "for", "seq", "in", "sequences", ":", "\n", "            ", "for", "rep", "in", "range", "(", "epoch_repeats", ")", ":", "\n", "                ", "spec", "=", "self", ".", "sample_random_image_set", "(", "seq", ".", "name", ",", "obj_id", "=", "seq", ".", "obj_id", ",", "size", "=", "sample_size", ")", "\n", "self", ".", "specs", ".", "append", "(", "spec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.TrainingDataset.sample_random_image_set": [[112, 131], ["training_datasets.TrainingDataset.object_visibility", "numpy.random.choice().tolist", "training_datasets.TrainingDataset.sequence_length", "numpy.arange", "numpy.random.choice().tolist", "training_datasets.SampleSpec", "numpy.where", "numpy.random.choice", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.TrainingDataset.object_visibility", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.TrainingDataset.sequence_length"], ["", "", "", "def", "sample_random_image_set", "(", "self", ",", "seq_name", ",", "obj_id", ",", "size", "=", "3", ")", ":", "\n", "        ", "\"\"\"  Create a SampleSpec object representing a (random) set of frames from a sequence.\n        :param seq_name:       Sequence name\n        :param obj_id:        Object to track (int)\n        :param size:           Set size > 1\n        :return: SampleSpec object\n        \"\"\"", "\n", "object_visible", "=", "self", ".", "object_visibility", "(", "seq_name", ",", "[", "obj_id", "]", ",", "merge_objects", "=", "True", ")", "\n", "\n", "possible_frames", "=", "np", ".", "where", "(", "object_visible", ")", "[", "0", "]", "\n", "frames", "=", "np", ".", "random", ".", "choice", "(", "possible_frames", ",", "size", "=", "1", ",", "replace", "=", "False", ")", ".", "tolist", "(", ")", "\n", "first_frame", "=", "frames", "[", "0", "]", "\n", "\n", "num_frames", "=", "self", ".", "sequence_length", "(", "seq_name", ")", "\n", "allframes", "=", "np", ".", "arange", "(", "num_frames", ")", "\n", "allframes", "=", "allframes", "[", "allframes", "!=", "first_frame", "]", "\n", "frames", "=", "np", ".", "random", ".", "choice", "(", "allframes", ",", "size", "=", "size", ",", "replace", "=", "False", ")", ".", "tolist", "(", ")", "\n", "\n", "return", "SampleSpec", "(", "seq_name", ",", "obj_id", ",", "frames", "=", "[", "first_frame", ",", "*", "frames", "[", "1", ":", "]", "]", ",", "frame0_id", "=", "first_frame", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.TrainingDataset.object_ids": [[132, 140], ["occlusions.sum", "numpy.where", "numpy.invert"], "methods", ["None"], ["", "def", "object_ids", "(", "self", ",", "seq_name", ")", ":", "\n", "        ", "\"\"\" Find the ids of objects seen in the sequence. id 0 == background \"\"\"", "\n", "assert", "self", ".", "occlusions", "is", "not", "None", "\n", "occlusions", "=", "self", ".", "occlusions", "[", "seq_name", "]", "\n", "always_occluded", "=", "occlusions", ".", "sum", "(", "axis", "=", "0", ")", "==", "occlusions", ".", "shape", "[", "0", "]", "\n", "object_ids", "=", "np", ".", "where", "(", "np", ".", "invert", "(", "always_occluded", ")", ")", "[", "0", "]", "\n", "\n", "return", "object_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.TrainingDataset.object_visibility": [[141, 168], ["numpy.invert", "numpy.expand_dims", "numpy.expand_dims.any", "numpy.expand_dims"], "methods", ["None"], ["", "def", "object_visibility", "(", "self", ",", "seq_name", ",", "obj_ids", ",", "merge_objects", "=", "False", ")", ":", "\n", "        ", "\"\"\" Get boolean vector of per-frame object visibility in the named sequence.\n        :param seq_name:  Sequence name\n        :param obj_ids:  Zero (None), one (int) or more (list) object ids.\n                         If zero, all objects (except the background) are selected\n        :param merge_objects:   If true, the visibilities of multiple objects are merged.\n        :return:\n        \"\"\"", "\n", "assert", "self", ".", "occlusions", "is", "not", "None", "\n", "\n", "visible", "=", "np", ".", "invert", "(", "self", ".", "occlusions", "[", "seq_name", "]", ")", "\n", "\n", "if", "obj_ids", "is", "None", ":", "\n", "            ", "visible", "=", "visible", "[", ":", ",", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "visible", "=", "visible", "[", ":", ",", "obj_ids", "]", "\n", "\n", "", "if", "visible", ".", "ndim", "==", "1", ":", "\n", "            ", "visible", "=", "np", ".", "expand_dims", "(", "visible", ",", "axis", "=", "1", ")", "\n", "\n", "", "if", "merge_objects", ":", "\n", "            ", "visible", "=", "visible", ".", "any", "(", "axis", "=", "1", ")", "\n", "\n", "", "if", "visible", ".", "ndim", "==", "1", ":", "\n", "            ", "visible", "=", "np", ".", "expand_dims", "(", "visible", ",", "axis", "=", "1", ")", "\n", "\n", "", "return", "visible", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.TrainingDataset.sequence_length": [[169, 171], ["None"], "methods", ["None"], ["", "def", "sequence_length", "(", "self", ",", "seq_name", ")", ":", "\n", "        ", "return", "self", ".", "occlusions", "[", "seq_name", "]", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.TrainingDataset.__len__": [[172, 174], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "specs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.TrainingDataset.__getitem__": [[175, 198], ["numpy.array", "cv2.resize", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "images.append", "numpy.array", "torch.as_tensor().view", "torch.as_tensor().view", "torch.as_tensor().view", "torch.as_tensor().view", "torch.interpolate().byte().squeeze", "torch.interpolate().byte().squeeze", "labels.append", "spec.encoded", "PIL.Image.open", "torch.from_numpy.transpose", "torch.from_numpy.transpose", "PIL.Image.open", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.interpolate().byte", "torch.interpolate().byte", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.SampleSpec.encoded", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.interpolate", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.interpolate"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "\n", "        ", "spec", "=", "self", ".", "specs", "[", "item", "]", "\n", "images", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "\n", "frame_names", "=", "self", ".", "frame_names", "[", "spec", ".", "seq_name", "]", "\n", "for", "f", "in", "spec", ".", "frames", ":", "\n", "            ", "frame", "=", "frame_names", "[", "f", "]", "\n", "\n", "im", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "self", ".", "jpeg_path", "/", "spec", ".", "seq_name", "/", "(", "frame", "+", "\".jpg\"", ")", ")", ")", "\n", "s", "=", "480", "/", "im", ".", "shape", "[", "0", "]", "\n", "im", "=", "cv2", ".", "resize", "(", "im", ",", "(", "854", ",", "480", ")", ",", "cv2", ".", "INTER_AREA", "if", "(", "s", "<", "1.0", ")", "or", "(", "self", ".", "name", "==", "'davis'", ")", "else", "cv2", ".", "INTER_CUBIC", ")", "\n", "im", "=", "torch", ".", "from_numpy", "(", "im", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "images", ".", "append", "(", "im", ")", "\n", "\n", "lb", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "self", ".", "anno_path", "/", "spec", ".", "seq_name", "/", "(", "frame", "+", "\".png\"", ")", ")", ")", "\n", "lb", "=", "(", "lb", "==", "spec", ".", "obj_id", ")", ".", "astype", "(", "np", ".", "uint8", ")", "# Relabel selected object to id 1", "\n", "lb", "=", "torch", ".", "as_tensor", "(", "lb", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "view", "(", "1", ",", "1", ",", "*", "lb", ".", "shape", "[", ":", "2", "]", ")", "\n", "lb", "=", "F", ".", "interpolate", "(", "lb", ",", "(", "480", ",", "854", ")", ",", "mode", "=", "'nearest'", ")", ".", "byte", "(", ")", ".", "squeeze", "(", "0", ")", "\n", "labels", ".", "append", "(", "lb", ")", "\n", "\n", "", "return", "images", ",", "labels", ",", "spec", ".", "encoded", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.DAVISDataset.__init__": [[202, 210], ["training_datasets.TrainingDataset.__init__", "training_datasets.DAVISDataset.generate_samples", "s.strip", "open().readlines", "open"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.TrainingDataset.generate_samples"], ["    ", "def", "__init__", "(", "self", ",", "dset_path", ":", "Path", ",", "epoch_repeats", "=", "1", ",", "epoch_samples", "=", "0", ",", "min_seq_length", "=", "4", ",", "sample_size", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"davis\"", ",", "dset_path", ")", "\n", "\n", "self", ".", "jpeg_path", "=", "self", ".", "dset_path", "/", "\"JPEGImages\"", "/", "\"480p\"", "\n", "self", ".", "anno_path", "=", "self", ".", "dset_path", "/", "\"Annotations\"", "/", "\"480p\"", "\n", "self", ".", "sequences", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "open", "(", "self", ".", "dset_path", "/", "\"ImageSets/2017/train.txt\"", ")", ".", "readlines", "(", ")", "]", "\n", "\n", "self", ".", "generate_samples", "(", "epoch_samples", ",", "epoch_repeats", ",", "min_seq_length", ",", "sample_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.DAVISDataset._generate_occlusions": [[211, 263], ["collections.OrderedDict", "tqdm.tqdm.tqdm", "len", "list", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.list"], ["", "def", "_generate_occlusions", "(", "self", ",", "label_pixel_counts", ")", ":", "\n", "        ", "\"\"\" Generate per-frame, per-object occlusion flags\n            Each sequence is an (N, M) boolean array of N frames and M object ids. True/False if occluded/visible.\n            object 0 is the background. \"\"\"", "\n", "\n", "occlusions", "=", "odict", "(", ")", "\n", "\n", "min_px", "=", "100", "# Hard minimum", "\n", "\n", "never_occluded", "=", "[", "'bus'", ",", "'car-turn'", ",", "'drift-turn'", ",", "'kid-football'", ",", "'koala'", ",", "\n", "'mallard-fly'", ",", "'motocross-bumps'", ",", "'motorbike'", ",", "\n", "'rallye'", ",", "'snowboard'", ",", "'train'", ",", "'upside-down'", "]", "\n", "\n", "for", "seq_name", "in", "tqdm", "(", "self", ".", "sequences", ")", ":", "\n", "\n", "            ", "px_counts", ",", "max_counts", "=", "label_pixel_counts", "[", "seq_name", "]", "\n", "seq_length", "=", "len", "(", "list", "(", "(", "self", ".", "jpeg_path", "/", "seq_name", ")", ".", "glob", "(", "\"*.jpg\"", ")", ")", ")", "\n", "\n", "if", "seq_name", "in", "never_occluded", ":", "\n", "                ", "occ", "=", "np", ".", "zeros", "(", "shape", "=", "px_counts", ".", "shape", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "", "else", ":", "\n", "\n", "# Pixel fraction", "\n", "\n", "                ", "if", "seq_name", "in", "(", "'bmx-bumps'", ",", "'disk-jockey'", ")", ":", "\n", "                    ", "occ_threshold", "=", "0.5", "\n", "", "elif", "seq_name", "in", "(", "'boxing-fisheye'", ",", "'cat-girl'", ",", "'dog-gooses'", ")", ":", "\n", "                    ", "occ_threshold", "=", "0.2", "\n", "", "elif", "seq_name", "in", "(", "'tractor-sand'", ",", "'drone'", ")", ":", "\n", "                    ", "occ_threshold", "=", "0.1", "\n", "", "else", ":", "\n", "                    ", "occ_threshold", "=", "0.25", "\n", "\n", "", "occ", "=", "(", "px_counts", "/", "(", "max_counts", "+", "0.001", ")", ")", "<", "occ_threshold", "\n", "occ", "=", "occ", "+", "(", "max_counts", "==", "0", ")", "\n", "\n", "# Sequence specific tweaks", "\n", "\n", "", "if", "seq_name", "==", "'classic-car'", ":", "\n", "                ", "occ", "[", ":", "56", ",", ":", "]", "=", "False", "\n", "", "elif", "seq_name", "==", "'drone'", ":", "\n", "                ", "occ", "[", ":", "17", ",", "1", "]", "=", "False", "# Red quad", "\n", "occ", "[", "24", ":", "60", ",", "1", "]", "=", "False", "\n", "", "elif", "seq_name", "==", "'night-race'", ":", "\n", "                ", "occ", "[", ":", "29", ",", ":", "]", "=", "False", "\n", "occ", "[", ":", ",", "2", "]", "=", "False", "# Green car", "\n", "\n", "", "occ", "=", "occ", "+", "(", "px_counts", "<", "min_px", ")", "# Apply a hard minimum", "\n", "\n", "occlusions", "[", "seq_name", "]", "=", "occ", "\n", "\n", "", "return", "occlusions", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.YouTubeVOSDataset.__init__": [[267, 275], ["training_datasets.TrainingDataset.__init__", "training_datasets.YouTubeVOSDataset.generate_samples", "s.strip", "str", "open().readlines", "open", "pathlib.Path().resolve", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.TrainingDataset.generate_samples"], ["    ", "def", "__init__", "(", "self", ",", "dset_path", ",", "epoch_samples", "=", "4000", ",", "epoch_repeats", "=", "1", ",", "min_seq_length", "=", "4", ",", "sample_size", "=", "3", ",", "year", "=", "2018", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"ytvos\"", "+", "str", "(", "year", ")", ",", "dset_path", ")", "\n", "\n", "self", ".", "jpeg_path", "=", "self", ".", "dset_path", "/", "\"train\"", "/", "\"JPEGImages\"", "\n", "self", ".", "anno_path", "=", "self", ".", "dset_path", "/", "\"train\"", "/", "\"Annotations\"", "\n", "self", ".", "sequences", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "open", "(", "Path", "(", "__file__", ")", ".", "resolve", "(", ")", ".", "parent", "/", "\"ytvos_jjtrain.txt\"", ")", ".", "readlines", "(", ")", "]", "\n", "\n", "self", ".", "generate_samples", "(", "epoch_samples", ",", "epoch_repeats", ",", "min_seq_length", ",", "sample_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.YouTubeVOSDataset._generate_occlusions": [[276, 286], ["collections.OrderedDict", "label_pixel_counts.items"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items"], ["", "def", "_generate_occlusions", "(", "self", ",", "label_pixel_counts", ")", ":", "\n", "        ", "\"\"\" Generate per-frame, per-object occlusion flags\n            Each sequence is an (N, M) boolean array of N frames and M object ids. True/False if occluded/visible.\n            object 0 is the background. \"\"\"", "\n", "\n", "occlusions", "=", "odict", "(", ")", "\n", "for", "seq_name", ",", "(", "px_counts", ",", "max_counts", ")", "in", "label_pixel_counts", ".", "items", "(", ")", ":", "\n", "            ", "occlusions", "[", "seq_name", "]", "=", "(", "px_counts", "<", "100", ")", "\n", "\n", "", "return", "occlusions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__init__": [[8, 12], ["list.__init__", "tensorlist.TensorList.list"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.list"], ["def", "__init__", "(", "self", ",", "list_of_tensors", "=", "None", ")", ":", "\n", "        ", "if", "list_of_tensors", "is", "None", ":", "\n", "            ", "list_of_tensors", "=", "list", "(", ")", "\n", "", "super", "(", "TensorList", ",", "self", ")", ".", "__init__", "(", "list_of_tensors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__getitem__": [[13, 20], ["isinstance", "list.__getitem__", "isinstance", "tensorlist.TensorList", "tensorlist.TensorList", "list.__getitem__", "list.__getitem__"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.datasets.YouTubeVOSDataset.__getitem__", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.datasets.YouTubeVOSDataset.__getitem__", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.datasets.YouTubeVOSDataset.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "isinstance", "(", "item", ",", "int", ")", ":", "\n", "            ", "return", "super", "(", "TensorList", ",", "self", ")", ".", "__getitem__", "(", "item", ")", "\n", "", "elif", "isinstance", "(", "item", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "super", "(", "TensorList", ",", "self", ")", ".", "__getitem__", "(", "i", ")", "for", "i", "in", "item", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "TensorList", "(", "super", "(", "TensorList", ",", "self", ")", ".", "__getitem__", "(", "item", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__add__": [[21, 25], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList._iterable"], ["", "", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "+", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "+", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__radd__": [[26, 30], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList._iterable"], ["", "def", "__radd__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "+", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "+", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__iadd__": [[31, 39], ["tensorlist.TensorList._iterable", "enumerate", "range", "len"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList._iterable"], ["", "def", "__iadd__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "for", "i", ",", "e2", "in", "enumerate", "(", "other", ")", ":", "\n", "                ", "self", "[", "i", "]", "+=", "e2", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "self", "[", "i", "]", "+=", "other", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__sub__": [[40, 44], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList._iterable"], ["", "def", "__sub__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "-", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "-", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__rsub__": [[45, 49], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList._iterable"], ["", "def", "__rsub__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "-", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "-", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__isub__": [[50, 58], ["tensorlist.TensorList._iterable", "enumerate", "range", "len"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList._iterable"], ["", "def", "__isub__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "for", "i", ",", "e2", "in", "enumerate", "(", "other", ")", ":", "\n", "                ", "self", "[", "i", "]", "-=", "e2", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "self", "[", "i", "]", "-=", "other", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__mul__": [[59, 63], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList._iterable"], ["", "def", "__mul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "*", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "*", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__rmul__": [[64, 68], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList._iterable"], ["", "def", "__rmul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "*", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "*", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__imul__": [[69, 77], ["tensorlist.TensorList._iterable", "enumerate", "range", "len"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList._iterable"], ["", "def", "__imul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "for", "i", ",", "e2", "in", "enumerate", "(", "other", ")", ":", "\n", "                ", "self", "[", "i", "]", "*=", "e2", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "self", "[", "i", "]", "*=", "other", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__truediv__": [[78, 82], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList._iterable"], ["", "def", "__truediv__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "/", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "/", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__rtruediv__": [[83, 87], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList._iterable"], ["", "def", "__rtruediv__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "/", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "/", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__itruediv__": [[88, 96], ["tensorlist.TensorList._iterable", "enumerate", "range", "len"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList._iterable"], ["", "def", "__itruediv__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "for", "i", ",", "e2", "in", "enumerate", "(", "other", ")", ":", "\n", "                ", "self", "[", "i", "]", "/=", "e2", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "self", "[", "i", "]", "/=", "other", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__matmul__": [[97, 101], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList._iterable"], ["", "def", "__matmul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "@", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "@", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__rmatmul__": [[102, 106], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList._iterable"], ["", "def", "__rmatmul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "@", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "@", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__imatmul__": [[107, 115], ["tensorlist.TensorList._iterable", "enumerate", "range", "len"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList._iterable"], ["", "def", "__imatmul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "for", "i", ",", "e2", "in", "enumerate", "(", "other", ")", ":", "\n", "                ", "self", "[", "i", "]", "@=", "e2", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "self", "[", "i", "]", "@=", "other", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__mod__": [[116, 120], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList._iterable"], ["", "def", "__mod__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "%", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "%", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__rmod__": [[121, 125], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList._iterable"], ["", "def", "__rmod__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "%", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "%", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__pos__": [[126, 128], ["tensorlist.TensorList"], "methods", ["None"], ["", "def", "__pos__", "(", "self", ")", ":", "\n", "        ", "return", "TensorList", "(", "[", "+", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__neg__": [[129, 131], ["tensorlist.TensorList"], "methods", ["None"], ["", "def", "__neg__", "(", "self", ")", ":", "\n", "        ", "return", "TensorList", "(", "[", "-", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__le__": [[132, 136], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList._iterable"], ["", "def", "__le__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "<=", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "<=", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__ge__": [[137, 141], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList._iterable"], ["", "def", "__ge__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", ">=", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", ">=", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.concat": [[142, 144], ["tensorlist.TensorList", "list.__add__"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__add__"], ["", "def", "concat", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "TensorList", "(", "super", "(", "TensorList", ",", "self", ")", ".", "__add__", "(", "other", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.copy": [[145, 147], ["tensorlist.TensorList", "super().copy"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.copy"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "TensorList", "(", "super", "(", "TensorList", ",", "self", ")", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.unroll": [[148, 159], ["tensorlist.TensorList", "any", "isinstance", "TensorList.extend", "TensorList.append", "isinstance", "t.unroll"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.unroll"], ["", "def", "unroll", "(", "self", ")", ":", "\n", "        ", "if", "not", "any", "(", "isinstance", "(", "t", ",", "TensorList", ")", "for", "t", "in", "self", ")", ":", "\n", "            ", "return", "self", "\n", "\n", "", "new_list", "=", "TensorList", "(", ")", "\n", "for", "t", "in", "self", ":", "\n", "            ", "if", "isinstance", "(", "t", ",", "TensorList", ")", ":", "\n", "                ", "new_list", ".", "extend", "(", "t", ".", "unroll", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "new_list", ".", "append", "(", "t", ")", "\n", "", "", "return", "new_list", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.list": [[160, 162], ["tensorlist.TensorList.list"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.list"], ["", "def", "list", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.attribute": [[163, 165], ["tensorlist.TensorList", "getattr"], "methods", ["None"], ["", "def", "attribute", "(", "self", ",", "attr", ":", "str", ",", "*", "args", ")", ":", "\n", "        ", "return", "TensorList", "(", "[", "getattr", "(", "e", ",", "attr", ",", "*", "args", ")", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.apply": [[166, 168], ["tensorlist.TensorList", "fn"], "methods", ["None"], ["", "def", "apply", "(", "self", ",", "fn", ")", ":", "\n", "        ", "return", "TensorList", "(", "[", "fn", "(", "e", ")", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.__getattr__": [[169, 177], ["hasattr", "AttributeError", "tensorlist.TensorList", "getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "torch", ".", "Tensor", ",", "name", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "'\\'TensorList\\' object has not attribute \\'{}\\''", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "def", "apply_attr", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "getattr", "(", "e", ",", "name", ")", "(", "*", "args", ",", "**", "kwargs", ")", "for", "e", "in", "self", "]", ")", "\n", "\n", "", "return", "apply_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList._iterable": [[178, 181], ["isinstance"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_iterable", "(", "a", ")", ":", "\n", "        ", "return", "isinstance", "(", "a", ",", "(", "TensorList", ",", "list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.tensor_operation": [[183, 208], ["functools.wraps", "isinstance", "op", "len", "ValueError", "len", "tensorlist.tensor_operation.islist"], "function", ["None"], ["", "", "def", "tensor_operation", "(", "op", ")", ":", "\n", "    ", "def", "islist", "(", "a", ")", ":", "\n", "        ", "return", "isinstance", "(", "a", ",", "TensorList", ")", "\n", "\n", "", "@", "functools", ".", "wraps", "(", "op", ")", "\n", "def", "oplist", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "args", ")", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'Must be at least one argument without keyword (i.e. operand).'", ")", "\n", "\n", "", "if", "len", "(", "args", ")", "==", "1", ":", "\n", "            ", "if", "islist", "(", "args", "[", "0", "]", ")", ":", "\n", "                ", "return", "TensorList", "(", "[", "op", "(", "a", ",", "**", "kwargs", ")", "for", "a", "in", "args", "[", "0", "]", "]", ")", "\n", "", "", "else", ":", "\n", "# Multiple operands, assume max two", "\n", "            ", "if", "islist", "(", "args", "[", "0", "]", ")", "and", "islist", "(", "args", "[", "1", "]", ")", ":", "\n", "                ", "return", "TensorList", "(", "[", "op", "(", "a", ",", "b", ",", "*", "args", "[", "2", ":", "]", ",", "**", "kwargs", ")", "for", "a", ",", "b", "in", "zip", "(", "*", "args", "[", ":", "2", "]", ")", "]", ")", "\n", "", "if", "islist", "(", "args", "[", "0", "]", ")", ":", "\n", "                ", "return", "TensorList", "(", "[", "op", "(", "a", ",", "*", "args", "[", "1", ":", "]", ",", "**", "kwargs", ")", "for", "a", "in", "args", "[", "0", "]", "]", ")", "\n", "", "if", "islist", "(", "args", "[", "1", "]", ")", ":", "\n", "                ", "return", "TensorList", "(", "[", "op", "(", "args", "[", "0", "]", ",", "b", ",", "*", "args", "[", "2", ":", "]", ",", "**", "kwargs", ")", "for", "b", "in", "args", "[", "1", "]", "]", ")", "\n", "\n", "# None of the operands are lists", "\n", "", "", "return", "op", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "oplist", "\n", "", ""]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.Tensor_logger.Logger.__init__": [[19, 31], ["visdom.Visdom", "print", "tf.writer.SummaryWriter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "visdom_port", "=", "None", ",", "log_dir", "=", "None", ")", ":", "\n", "        ", "if", "VISDOM", "and", "visdom_port", ":", "\n", "            ", "self", ".", "vis", "=", "visdom", ".", "Visdom", "(", "port", "=", "visdom_port", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'No visdom server found on port {}. set visdom_port = None'", ".", "format", "(", "visdom_port", ")", ")", "\n", "self", ".", "vis", "=", "None", "\n", "\n", "", "self", ".", "use_visdom", "=", "visdom_port", "\n", "self", ".", "use_tensorboard", "=", "True", "if", "TENSORBOARD", "and", "log_dir", "is", "not", "None", "else", "False", "\n", "\n", "if", "self", ".", "use_tensorboard", ":", "\n", "            ", "self", ".", "writer", "=", "tf", ".", "writer", ".", "SummaryWriter", "(", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.Tensor_logger.Logger.scalar_summary": [[32, 35], ["Tensor_logger.Logger.writer.add_scalar"], "methods", ["None"], ["", "", "def", "scalar_summary", "(", "self", ",", "tag", ",", "value", ",", "step", ")", ":", "\n", "        ", "if", "self", ".", "use_tensorboard", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "tag", ",", "value", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.Tensor_logger.Logger.image_summary": [[36, 39], ["Tensor_logger.Logger.vis.images"], "methods", ["None"], ["", "", "def", "image_summary", "(", "self", ",", "data", ",", "opts", ")", ":", "\n", "        ", "if", "self", ".", "use_visdom", ":", "\n", "            ", "self", ".", "vis", ".", "images", "(", "data", ",", "opts", "=", "opts", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training.Trainer.__init__": [[19, 58], ["training.Trainer.checkpoints_path.mkdir", "os.path.join", "collections.defaultdict", "os.path.isdir", "os.mkdir", "training.Trainer.model.Initalize_state_dict", "print", "list", "sorted", "len", "training.Trainer.load_checkpoint", "torch.load", "training.Trainer.checkpoints_path.glob"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.Initalize_state_dict", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training.Trainer.load_checkpoint"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "model", ",", "optimizer", ",", "scheduler", ",", "dataset", ",", "checkpoints_path", ",", "log_path", ",", "\n", "max_epochs", ",", "batch_size", ",", "num_workers", "=", "0", ",", "load_latest", "=", "True", ",", "save_interval", "=", "5", ",", "Init_file", "=", "None", ",", "\n", "stats_to_print", "=", "(", "'stats/loss'", ",", "'stats/accuracy'", ",", "'stats/lr'", ",", "'stats/fcache_hits'", ")", ")", ":", "\n", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "checkpoints_path", "=", "checkpoints_path", "/", "name", "\n", "self", ".", "checkpoints_path", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "self", ".", "log_path", "=", "log_path", "/", "name", "\n", "self", ".", "visdom_save", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_path", ",", "\"Visdom\"", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "visdom_save", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "visdom_save", ")", "\n", "\n", "", "self", ".", "log", "=", "None", "\n", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "max_epochs", "=", "max_epochs", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "save_interval", "=", "save_interval", "\n", "\n", "self", ".", "stats_to_print", "=", "stats_to_print", "\n", "\n", "self", ".", "stats", "=", "ddict", "(", "AverageMeter", ")", "\n", "\n", "if", "Init_file", "!=", "\"\"", ":", "\n", "            ", "self", ".", "model", ".", "Initalize_state_dict", "(", "torch", ".", "load", "(", "Init_file", ",", "map_location", "=", "'cpu'", ")", "[", "'model'", "]", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"No initialized pth\"", ")", "\n", "\n", "", "if", "load_latest", ":", "\n", "            ", "checkpoints", "=", "list", "(", "sorted", "(", "self", ".", "checkpoints_path", ".", "glob", "(", "\"%s_ep*.pth\"", "%", "name", ")", ")", ")", "\n", "if", "len", "(", "checkpoints", ")", ">", "0", ":", "\n", "                ", "self", ".", "load_checkpoint", "(", "checkpoints", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training.Trainer.load_checkpoint": [[59, 70], ["print", "torch.load", "print", "training.Trainer.model.load_state_dict", "training.Trainer.optimizer.load_state_dict", "training.Trainer.scheduler.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.load_state_dict", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.load_state_dict", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.load_state_dict"], ["", "", "", "def", "load_checkpoint", "(", "self", ",", "file", ")", ":", "\n", "\n", "        ", "print", "(", "\"Loading checkpoint\"", ",", "file", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "file", ",", "map_location", "=", "'cpu'", ")", "\n", "# assert ckpt['name'] == self.name", "\n", "self", ".", "epoch", "=", "ckpt", "[", "'epoch'", "]", "\n", "print", "(", "\"Starting epoch\"", ",", "self", ".", "epoch", "+", "1", ")", "\n", "self", ".", "stats", "=", "ckpt", "[", "'stats'", "]", "\n", "self", ".", "model", ".", "load_state_dict", "(", "ckpt", "[", "'model'", "]", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "ckpt", "[", "'optimizer'", "]", ")", "\n", "self", ".", "scheduler", ".", "load_state_dict", "(", "ckpt", "[", "'scheduler'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training.Trainer.save_checkpoint": [[71, 80], ["dict", "torch.save", "training.Trainer.model.state_dict", "training.Trainer.optimizer.state_dict", "training.Trainer.scheduler.state_dict"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.state_dict", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.state_dict", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.state_dict"], ["", "def", "save_checkpoint", "(", "self", ")", ":", "\n", "\n", "        ", "ckpt", "=", "dict", "(", "name", "=", "self", ".", "name", ",", "\n", "epoch", "=", "self", ".", "epoch", ",", "\n", "stats", "=", "self", ".", "stats", ",", "\n", "model", "=", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "optimizer", "=", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "scheduler", "=", "self", ".", "scheduler", ".", "state_dict", "(", ")", ")", "\n", "torch", ".", "save", "(", "ckpt", ",", "self", ".", "checkpoints_path", "/", "(", "\"%s_ep%04d.pth\"", "%", "(", "self", ".", "name", ",", "self", ".", "epoch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training.Trainer.upload_batch": [[81, 93], ["training.Trainer.upload_batch.recurse_scan"], "methods", ["None"], ["", "def", "upload_batch", "(", "self", ",", "batch", ")", ":", "\n", "\n", "        ", "def", "recurse_scan", "(", "v", ")", ":", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "v", ")", ":", "\n", "                ", "v", "=", "v", ".", "to", "(", "self", ".", "model", ".", "device", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "v", "=", "[", "recurse_scan", "(", "x", ")", "for", "x", "in", "v", "]", "\n", "", "elif", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "                ", "v", "=", "{", "k", ":", "recurse_scan", "(", "x", ")", "for", "k", ",", "x", "in", "v", ".", "items", "(", ")", "}", "\n", "", "return", "v", "\n", "\n", "", "return", "recurse_scan", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training.Trainer.update_stats": [[94, 115], ["new_stats.items", "training.Trainer.stats[].update", "training.Trainer.stats.items", "print", "stats.append", "k.startswith"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.update", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items"], ["", "def", "update_stats", "(", "self", ",", "new_stats", ",", "iteration", ",", "iters_per_epoch", ",", "runtime", ",", "do_print", "=", "False", ")", ":", "\n", "\n", "        ", "for", "k", ",", "v", "in", "new_stats", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "stats", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n", "", "if", "not", "do_print", ":", "\n", "            ", "return", "\n", "\n", "", "header", "=", "\"{self.epoch}: {iteration}/{iters_per_epoch}, \"", ".", "format", "(", "\n", "self", "=", "self", ",", "iteration", "=", "iteration", ",", "iters_per_epoch", "=", "iters_per_epoch", ",", ")", "\n", "# sps: samples per second", "\n", "if", "iteration", "%", "100", "==", "0", ":", "\n", "            ", "stats", "=", "[", "]", "\n", "dec", "=", "4", "\n", "for", "k", ",", "v", "in", "self", ".", "stats", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", "in", "self", ".", "stats_to_print", ":", "\n", "                    ", "k", "=", "k", "[", "6", ":", "]", "if", "k", ".", "startswith", "(", "\"stats/\"", ")", "else", "k", "\n", "s", "=", "'{k}={v.val:.{dec}f} ({v.avg:.{dec}f})'", ".", "format", "(", "k", "=", "k", ",", "v", "=", "v", ",", "dec", "=", "dec", ")", "\n", "stats", ".", "append", "(", "s", ")", "\n", "\n", "", "", "print", "(", "header", "+", "\", \"", ".", "join", "(", "stats", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training.Trainer.log_stats": [[116, 123], ["training.Trainer.stats.items", "torch.utils.tensorboard.SummaryWriter", "training.Trainer.log.add_scalar", "str"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items"], ["", "", "def", "log_stats", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "log", "is", "None", ":", "\n", "            ", "self", ".", "log", "=", "SummaryWriter", "(", "str", "(", "self", ".", "log_path", ")", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "self", ".", "stats", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "log", ".", "add_scalar", "(", "k", ",", "v", ".", "avg", ",", "self", ".", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training.Trainer.visdom_out_1chnn": [[124, 130], ["range", "len", "torchvision.utils.make_grid", "cv2.imwrite", "grid_outputs[].numpy", "save_arr.astype", "img_list[].cpu", "img_list[].size"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.image.imwrite", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.GumbelModule.GumbleSoftmax.cpu"], ["", "", "def", "visdom_out_1chnn", "(", "self", ",", "img_list", ",", "caption", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "img_list", ")", ")", ":", "\n", "            ", "grid_outputs", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "img_list", "[", "i", "]", ".", "cpu", "(", ")", ".", "data", ",", "nrow", "=", "img_list", "[", "i", "]", ".", "size", "(", "0", ")", ",", "normalize", "=", "True", ")", "\n", "# self.my_logger.image_summary(grid_outputs, opts=dict(title=caption[i]))", "\n", "save_arr", "=", "(", "255", "*", "grid_outputs", "[", "0", "]", ".", "numpy", "(", ")", ")", "\n", "cv2", ".", "imwrite", "(", "self", ".", "visdom_save", "+", "\"/\"", "+", "caption", "[", "i", "]", "+", "\".png\"", ",", "save_arr", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training.Trainer.visdom_out_RGB": [[131, 141], ["img_list.size", "numpy.zeros", "range", "cv2.imwrite", "numpy.transpose().astype", "cv2.resize", "numpy.zeros.astype", "numpy.transpose", "img_list[].cpu().numpy", "img_list[].cpu"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.image.imwrite", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.GumbelModule.GumbleSoftmax.cpu"], ["", "", "def", "visdom_out_RGB", "(", "self", ",", "img_list", ",", "caption", ")", ":", "\n", "        ", "b", ",", "c", ",", "H", ",", "W", "=", "img_list", ".", "size", "(", ")", "\n", "h", ",", "w", "=", "H", "//", "8", ",", "W", "//", "8", "\n", "arr_img", "=", "np", ".", "zeros", "(", "[", "h", ",", "w", "*", "b", ",", "3", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "b", ")", ":", "\n", "            ", "this_img", "=", "np", ".", "transpose", "(", "(", "img_list", "[", "i", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "this_img", "=", "cv2", ".", "resize", "(", "this_img", ",", "dsize", "=", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "arr_img", "[", ":", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", "]", "=", "this_img", "\n", "", "cv2", ".", "imwrite", "(", "self", ".", "visdom_save", "+", "\"/\"", "+", "caption", "+", "\".png\"", ",", "arr_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training.Trainer.train": [[145, 198], ["range", "print", "collections.defaultdict", "torch.utils.data.ConcatDataset", "torch.utils.data.DataLoader", "lib.utils.AverageMeter", "print", "enumerate", "training.Trainer.scheduler.step", "training.Trainer.visdom_out_1chnn", "training.Trainer.visdom_out_RGB", "training.Trainer.log_stats", "training.Trainer.optimizer.zero_grad", "training.Trainer.model", "training.Trainer.optimizer.step", "lib.utils.AverageMeter.update", "time.time.time", "training.Trainer.update_stats", "training.Trainer.save_checkpoint", "time.time.time", "training.Trainer.scheduler.get_last_lr", "len", "str", "eval", "time.time.time", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training.Trainer.visdom_out_1chnn", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training.Trainer.visdom_out_RGB", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training.Trainer.log_stats", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.update", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training.Trainer.update_stats", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training.Trainer.save_checkpoint"], ["", "def", "train", "(", "self", ",", "m1", ",", "endEP", "=", "120", ")", ":", "\n", "# self.my_logger = Logger(8098, self.log_path)", "\n", "\n", "        ", "for", "epoch", "in", "range", "(", "self", ".", "epoch", "+", "1", ",", "self", ".", "max_epochs", "+", "1", ")", ":", "\n", "\n", "            ", "self", ".", "epoch", "=", "epoch", "\n", "self", ".", "stats", "=", "ddict", "(", "AverageMeter", ")", "\n", "\n", "dset", "=", "ConcatDataset", "(", "[", "eval", "(", "cls", ")", "(", "**", "params", ")", "for", "cls", ",", "params", "in", "self", ".", "dataset", "]", ")", "\n", "\n", "loader", "=", "DataLoader", "(", "dset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "shuffle", "=", "True", ")", "\n", "t0", "=", "None", "\n", "runtime", "=", "AverageMeter", "(", ")", "\n", "if", "epoch", "<", "endEP", ":", "\n", "                ", "margin", "=", "m1", "*", "(", "epoch", "/", "endEP", ")", "\n", "", "else", ":", "\n", "                ", "margin", "=", "m1", "\n", "", "print", "(", "\"this epoch target gate prob is {}\"", ".", "format", "(", "margin", ")", ")", "\n", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "loader", ",", "1", ")", ":", "\n", "                ", "t0", "=", "time", "(", ")", "if", "t0", "is", "None", "else", "t0", "# Ignore loader startup pause", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "stats", ",", "visdom_img", ",", "visdom_gt", ",", "visdom_seg", ",", "visdom_diff", ",", "visdom_Tscore", ",", "visdom_Oscore", ",", "visdom_Fscore", "=", "self", ".", "model", "(", "*", "batch", ",", "epoch", ")", "\n", "# self.visdom_out_1chnn([visdom_gt, visdom_seg, visdom_diff, visdom_Tscore, visdom_Oscore, visdom_Fscore],", "\n", "#                       [\"gt_\" + str(epoch), \"seg_\" + str(epoch), \"Diff_\" + str(epoch),", "\n", "#                        \"trans_score_\" + str(epoch), \"Org_score_\" + str(epoch),", "\n", "#                        \"final_score_\" + str(epoch)])", "\n", "# self.visdom_out_RGB(visdom_img, \"InputRGB_\" + str(epoch))", "\n", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "runtime", ".", "update", "(", "time", "(", ")", "-", "t0", ")", "\n", "t0", "=", "time", "(", ")", "\n", "\n", "stats", "[", "'stats/lr'", "]", "=", "self", ".", "scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", "\n", "\n", "self", ".", "update_stats", "(", "stats", ",", "i", ",", "len", "(", "loader", ")", ",", "runtime", ",", "do_print", "=", "True", ")", "\n", "\n", "", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "self", ".", "visdom_out_1chnn", "(", "[", "visdom_gt", ",", "visdom_seg", ",", "visdom_diff", ",", "visdom_Tscore", ",", "visdom_Oscore", ",", "visdom_Fscore", "]", ",", "\n", "[", "\"gt_\"", "+", "str", "(", "epoch", ")", ",", "\"seg_\"", "+", "str", "(", "epoch", ")", ",", "\"Diff_\"", "+", "str", "(", "epoch", ")", ",", "\n", "\"trans_score_\"", "+", "str", "(", "epoch", ")", ",", "\"Org_score_\"", "+", "str", "(", "epoch", ")", ",", "\"final_score_\"", "+", "str", "(", "epoch", ")", "]", ")", "\n", "self", ".", "visdom_out_RGB", "(", "visdom_img", ",", "\"InputRGB_\"", "+", "str", "(", "epoch", ")", ")", "\n", "\n", "if", "self", ".", "epoch", "%", "self", ".", "save_interval", "==", "0", ":", "\n", "                ", "self", ".", "save_checkpoint", "(", ")", "\n", "\n", "", "self", ".", "log_stats", "(", ")", "\n", "\n", "", "print", "(", "\"%s done\"", "%", "self", ".", "name", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.ConvRelu.__init__": [[67, 76], ["torch.nn.Sequential.__init__", "utils.ConvRelu.add_module", "utils.ConvRelu.add_module", "utils.ConvRelu.children", "torch.nn.Conv2d", "torch.nn.ReLU", "isinstance", "torch.nn.init.kaiming_uniform_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "conv_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "*", "conv_args", ")", ")", "\n", "self", ".", "add_module", "(", "'act'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.MultiReceptiveConv.__init__": [[78, 84], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inc", "=", "2", ",", "mid", "=", "2", ",", "oc", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inc", ",", "mid", ",", "3", ",", "1", ",", "1", ",", "dilation", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "inc", ",", "mid", ",", "3", ",", "1", ",", "2", ",", "dilation", "=", "2", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "inc", ",", "mid", ",", "3", ",", "1", ",", "3", ",", "dilation", "=", "3", ")", "\n", "self", ".", "convBlend", "=", "nn", ".", "Conv2d", "(", "mid", "*", "3", ",", "oc", ",", "5", ",", "1", ",", "2", ",", "dilation", "=", "1", ")", "\n", "", "def", "forward", "(", "self", ",", "in1", ",", "in2", ")", ":", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.MultiReceptiveConv.forward": [[84, 91], ["torch.cat", "utils.MultiReceptiveConv.conv1", "utils.MultiReceptiveConv.conv2", "utils.MultiReceptiveConv.conv3", "utils.MultiReceptiveConv.convBlend", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "in1", ",", "in2", ")", ":", "\n", "        ", "input", "=", "torch", ".", "cat", "(", "[", "in1", ",", "in2", "]", ",", "dim", "=", "1", ")", "\n", "Recept1", "=", "self", ".", "conv1", "(", "input", ")", "\n", "Recept2", "=", "self", ".", "conv2", "(", "input", ")", "\n", "Recept3", "=", "self", ".", "conv3", "(", "input", ")", "\n", "\n", "return", "self", ".", "convBlend", "(", "torch", ".", "cat", "(", "[", "Recept1", ",", "Recept2", ",", "Recept3", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.AverageMeter.__init__": [[95, 101], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "seq_avg", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.AverageMeter.reset": [[102, 104], ["utils.AverageMeter.__init__"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.AverageMeter.update": [[105, 111], ["numpy.isnan"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "if", "not", "np", ".", "isnan", "(", "val", ")", ":", "\n", "            ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.AverageMeter.update_multi": [[112, 120], ["numpy.array", "len", "numpy.nansum", "numpy.isnan"], "methods", ["None"], ["", "", "def", "update_multi", "(", "self", ",", "val", ")", ":", "\n", "        ", "val", "=", "np", ".", "array", "(", "val", ")", "\n", "v", "=", "val", "[", "~", "np", ".", "isnan", "(", "val", ")", "]", "\n", "n", "=", "len", "(", "v", ")", "\n", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "np", ".", "nansum", "(", "v", ")", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.text_bargraph": [[9, 23], ["numpy.array", "numpy.array", "numpy.isnan", "str.join", "len", "len"], "function", ["None"], ["def", "text_bargraph", "(", "values", ")", ":", "\n", "    ", "blocks", "=", "np", ".", "array", "(", "(", "'u'", ",", "' '", ",", "'\u2581'", ",", "'\u2582'", ",", "'\u2583'", ",", "'\u2584'", ",", "'\u2585'", ",", "'\u2586'", ",", "'\u2587'", ",", "'\u2588'", ",", "'o'", ")", ")", "\n", "nsteps", "=", "len", "(", "blocks", ")", "-", "2", "-", "1", "\n", "hstep", "=", "1", "/", "(", "2", "*", "nsteps", ")", "\n", "values", "=", "np", ".", "array", "(", "values", ")", "\n", "nans", "=", "np", ".", "isnan", "(", "values", ")", "\n", "values", "[", "nans", "]", "=", "0", "# '\u2591'", "\n", "indices", "=", "(", "(", "values", "+", "hstep", ")", "*", "nsteps", "+", "1", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "indices", "[", "values", "<", "0", "]", "=", "0", "\n", "indices", "[", "values", ">", "1", "]", "=", "len", "(", "blocks", ")", "-", "1", "\n", "graph", "=", "blocks", "[", "indices", "]", "\n", "graph", "[", "nans", "]", "=", "'\u2591'", "\n", "graph", "=", "str", ".", "join", "(", "''", ",", "graph", ")", "\n", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.conv": [[25, 27], ["torch.nn.Conv2d"], "function", ["None"], ["", "def", "conv", "(", "ic", ",", "oc", ",", "ksize", ",", "bias", "=", "True", ",", "dilation", "=", "1", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "ic", ",", "oc", ",", "ksize", ",", "padding", "=", "ksize", "//", "2", ",", "bias", "=", "bias", ",", "dilation", "=", "dilation", ",", "stride", "=", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.relu": [[29, 31], ["torch.nn.LeakyReLU"], "function", ["None"], ["", "def", "relu", "(", "negative_slope", "=", "0.0", ",", "inplace", "=", "False", ")", ":", "\n", "    ", "return", "nn", ".", "LeakyReLU", "(", "negative_slope", ",", "inplace", "=", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.interpolate": [[33, 36], ["torch.is_tensor", "sz.tolist", "torch.nn.functional.interpolate"], "function", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.interpolate"], ["", "def", "interpolate", "(", "t", ",", "sz", ")", ":", "\n", "    ", "sz", "=", "sz", ".", "tolist", "(", ")", "if", "torch", ".", "is_tensor", "(", "sz", ")", "else", "sz", "\n", "return", "F", ".", "interpolate", "(", "t", ",", "sz", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "if", "t", ".", "shape", "[", "-", "2", ":", "]", "!=", "sz", "else", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.adaptive_cat": [[38, 42], ["torch.cat", "utils.interpolate"], "function", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.interpolate"], ["", "def", "adaptive_cat", "(", "seq", ",", "dim", "=", "0", ",", "ref_tensor", "=", "0", ")", ":", "\n", "    ", "sz", "=", "seq", "[", "ref_tensor", "]", ".", "shape", "[", "-", "2", ":", "]", "\n", "t", "=", "torch", ".", "cat", "(", "[", "interpolate", "(", "t", ",", "sz", ")", "for", "t", "in", "seq", "]", ",", "dim", "=", "dim", ")", "\n", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.get_out_channels": [[44, 60], ["hasattr", "hasattr", "utils.get_out_channels", "reversed", "ocs.append", "utils.get_out_channels"], "function", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.get_out_channels", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.get_out_channels"], ["", "def", "get_out_channels", "(", "layer", ")", ":", "\n", "    ", "if", "hasattr", "(", "layer", ",", "'out_channels'", ")", ":", "\n", "        ", "oc", "=", "layer", ".", "out_channels", "\n", "", "elif", "hasattr", "(", "layer", ",", "'_modules'", ")", ":", "\n", "        ", "oc", "=", "get_out_channels", "(", "layer", ".", "_modules", ")", "\n", "", "else", ":", "\n", "        ", "ocs", "=", "[", "]", "\n", "for", "key", "in", "reversed", "(", "layer", ")", ":", "\n", "            ", "ocs", ".", "append", "(", "get_out_channels", "(", "layer", "[", "key", "]", ")", ")", "\n", "\n", "", "oc", "=", "0", "\n", "for", "elem", "in", "ocs", ":", "\n", "            ", "if", "elem", ":", "\n", "                ", "return", "elem", "\n", "\n", "", "", "", "return", "oc", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.is_finite": [[62, 64], ["torch.isnan", "torch.isinf"], "function", ["None"], ["", "def", "is_finite", "(", "t", ")", ":", "\n", "    ", "return", "(", "torch", ".", "isnan", "(", "t", ")", "+", "torch", ".", "isinf", "(", "t", ")", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.evaluation.evaluate_dataset": [[9, 88], ["collections.OrderedDict", "enumerate", "evaluation.evaluate_dataset._print"], "function", ["None"], ["def", "evaluate_dataset", "(", "dset", ",", "results_path", ",", "measure", "=", "'J'", ",", "to_file", "=", "True", ")", ":", "\n", "\n", "    ", "results", "=", "odict", "(", ")", "\n", "dset_scores", "=", "[", "]", "\n", "dset_decay", "=", "[", "]", "\n", "dset_recall", "=", "[", "]", "\n", "\n", "if", "to_file", ":", "\n", "        ", "f", "=", "open", "(", "results_path", "/", "(", "\"evaluation-%s.txt\"", "%", "measure", ")", ",", "\"w\"", ")", "\n", "\n", "", "def", "_print", "(", "msg", ")", ":", "\n", "# print(msg)", "\n", "        ", "if", "to_file", ":", "\n", "            ", "print", "(", "msg", ",", "file", "=", "f", ")", "\n", "f", ".", "flush", "(", ")", "\n", "\n", "", "", "for", "j", ",", "sequence", "in", "enumerate", "(", "dset", ")", ":", "\n", "\n", "# Load all frames", "\n", "\n", "        ", "annotations", "=", "odict", "(", ")", "\n", "segmentations", "=", "odict", "(", ")", "\n", "for", "file", "in", "sequence", ".", "annos", ":", "\n", "            ", "lb", "=", "imread", "(", "file", ")", "\n", "annotations", "[", "file", ".", "stem", "]", "=", "(", "lb", "!=", "0", ")", ".", "byte", "(", ")", "if", "sequence", ".", "merge_objects", "else", "lb", "\n", "segmentations", "[", "file", ".", "stem", "]", "=", "imread", "(", "results_path", "/", "sequence", ".", "name", "/", "file", ".", "name", ")", "\n", "\n", "# Find object ids and starting frames", "\n", "\n", "", "object_info", "=", "dict", "(", ")", "\n", "for", "obj_id", "in", "sequence", ".", "obj_ids", ":", "\n", "            ", "for", "frame", ",", "obj_ids", "in", "sequence", ".", "start_frames", ".", "items", "(", ")", ":", "\n", "                ", "if", "obj_id", "in", "obj_ids", ":", "\n", "                    ", "assert", "obj_id", "not", "in", "object_info", "# Only one start frame per object", "\n", "object_info", "[", "obj_id", "]", "=", "frame", "\n", "", "", "", "assert", "0", "not", "in", "object_info", "# Because a background object would be weird", "\n", "\n", "# Evaluate", "\n", "\n", "n_seqs", "=", "len", "(", "dset", ")", "\n", "n_objs", "=", "len", "(", "object_info", ")", "\n", "seq_name", "=", "sequence", ".", "name", "\n", "\n", "_print", "(", "\"%d/%d: %s: %d object%s\"", "%", "(", "j", "+", "1", ",", "n_seqs", ",", "seq_name", ",", "n_objs", ",", "\"s\"", "if", "n_objs", ">", "1", "else", "\"\"", ")", ")", "\n", "r", "=", "utils", ".", "evaluate_sequence", "(", "segmentations", ",", "annotations", ",", "object_info", ",", "measure", "=", "measure", ")", "\n", "results", "[", "seq_name", "]", "=", "r", "\n", "\n", "# Print scores, per frame and object, ignoring NaNs", "\n", "\n", "per_obj_score", "=", "[", "]", "# Per-object accuracies, averaged over the sequence", "\n", "per_frame_score", "=", "[", "]", "# Per-frame accuracies, averaged over the objects", "\n", "\n", "for", "obj_id", ",", "score", "in", "r", "[", "'raw'", "]", ".", "items", "(", ")", ":", "\n", "            ", "per_frame_score", ".", "append", "(", "score", ")", "\n", "s", "=", "utils", ".", "mean", "(", "score", ")", "# Sequence average for one object", "\n", "per_obj_score", ".", "append", "(", "s", ")", "\n", "if", "n_objs", ">", "1", ":", "\n", "                ", "_print", "(", "\"joint {obj}: acc {score:.3f} \u250a{apf}\u250a\"", ".", "format", "(", "obj", "=", "obj_id", ",", "score", "=", "s", ",", "apf", "=", "text_bargraph", "(", "score", ")", ")", ")", "\n", "\n", "# Print mean object score per frame and final score", "\n", "\n", "", "", "dset_decay", ".", "extend", "(", "r", "[", "'decay'", "]", ")", "\n", "dset_recall", ".", "extend", "(", "r", "[", "'recall'", "]", ")", "\n", "dset_scores", ".", "extend", "(", "per_obj_score", ")", "\n", "\n", "seq_score", "=", "utils", ".", "mean", "(", "per_obj_score", ")", "# Final score", "\n", "seq_mean_score", "=", "utils", ".", "nanmean", "(", "np", ".", "array", "(", "per_frame_score", ")", ",", "axis", "=", "0", ")", "# Mean object score per frame", "\n", "\n", "# Print sequence results", "\n", "\n", "_print", "(", "\"final  : acc {seq:.3f} ({dset:.3f}) \u250a{apf}\u250a\"", ".", "format", "(", "\n", "seq", "=", "seq_score", ",", "dset", "=", "np", ".", "mean", "(", "dset_scores", ")", ",", "apf", "=", "text_bargraph", "(", "seq_mean_score", ")", ")", ")", "\n", "\n", "", "_print", "(", "\"%s: %.3f, recall: %.3f, decay: %.3f\"", "%", "(", "measure", ",", "utils", ".", "mean", "(", "dset_scores", ")", ",", "utils", ".", "mean", "(", "dset_recall", ")", ",", "\n", "utils", ".", "mean", "(", "dset_decay", ")", ")", ")", "\n", "if", "to_file", ":", "\n", "        ", "f", ".", "close", "(", ")", "\n", "\n", "", "return", "utils", ".", "mean", "(", "dset_scores", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.image.imread": [[17, 22], ["numpy.array", "numpy.ascontiguousarray", "torch.from_numpy", "torch.from_numpy", "PIL.Image.open", "numpy.atleast_3d().transpose", "numpy.atleast_3d"], "function", ["None"], ["def", "imread", "(", "filename", ")", ":", "\n", "    ", "im", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "filename", ")", ")", "\n", "im", "=", "np", ".", "ascontiguousarray", "(", "np", ".", "atleast_3d", "(", "im", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "im", "=", "torch", ".", "from_numpy", "(", "im", ")", "\n", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.image.imwrite": [[24, 28], ["im.detach().cpu().view().permute().numpy.detach().cpu().view().permute().numpy", "PIL.Image.fromarray().save", "len", "im.detach().cpu().view().permute().numpy.detach().cpu().view().permute", "PIL.Image.fromarray", "im.detach().cpu().view().permute().numpy.detach().cpu().view", "im.detach().cpu().view().permute().numpy.detach().cpu", "im.detach().cpu().view().permute().numpy.detach"], "function", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.GumbelModule.GumbleSoftmax.cpu"], ["", "def", "imwrite", "(", "filename", ",", "im", ")", ":", "\n", "    ", "assert", "len", "(", "im", ".", "shape", ")", "<", "4", "or", "im", ".", "shape", "[", "0", "]", "==", "1", "# requires batch size 1", "\n", "im", "=", "im", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ",", "*", "im", ".", "shape", "[", "-", "2", ":", "]", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "Image", ".", "fromarray", "(", "im", ")", ".", "save", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.image.imwrite_indexed": [[30, 36], ["PIL.Image.fromarray", "Image.fromarray.putpalette", "Image.fromarray.save", "Image.fromarray.detach().cpu().squeeze().numpy", "color_palette.ravel", "len", "Image.fromarray.detach().cpu().squeeze", "Image.fromarray.detach().cpu", "Image.fromarray.detach"], "function", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.GumbelModule.GumbleSoftmax.cpu"], ["", "def", "imwrite_indexed", "(", "filename", ",", "im", ",", "color_palette", "=", "None", ")", ":", "\n", "    ", "assert", "len", "(", "im", ".", "shape", ")", "<", "4", "or", "im", ".", "shape", "[", "0", "]", "==", "1", "# requires batch size 1", "\n", "color_palette", "=", "davis_palette", "if", "color_palette", "is", "None", "else", "color_palette", "\n", "im", "=", "Image", ".", "fromarray", "(", "im", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ",", "'P'", ")", "\n", "im", ".", "putpalette", "(", "color_palette", ".", "ravel", "(", ")", ")", "\n", "im", ".", "save", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.image.warp_affine": [[38, 60], ["src.view.view", "src.view.new_zeros", "len", "H.astype", "range", "src.view.device.type.startswith", "src.new_zeros.squeeze", "len", "dict", "cv2.warpAffine", "_npp.nppig_cpp.warp_affine", "src[].numpy", "dst[].numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.image.warp_affine"], ["", "def", "warp_affine", "(", "src", ",", "H", ",", "size", ",", "mode", "=", "'bicubic'", ")", ":", "\n", "    ", "assert", "len", "(", "src", ".", "shape", ")", "<", "4", "or", "src", ".", "shape", "[", "0", "]", "==", "1", "# requires batch size 1", "\n", "\n", "no_cdim", "=", "len", "(", "src", ".", "shape", ")", "==", "2", "\n", "src", "=", "src", ".", "view", "(", "-", "1", ",", "*", "src", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "dst", "=", "src", ".", "new_zeros", "(", "src", ".", "shape", "[", "0", "]", ",", "*", "size", ")", "\n", "H", "=", "H", ".", "astype", "(", "np", ".", "float32", ")", "[", ":", "2", ",", ":", "]", "\n", "\n", "if", "src", ".", "device", ".", "type", "==", "'cpu'", ":", "\n", "        ", "mode", "=", "dict", "(", "nearest", "=", "cv2", ".", "INTER_NEAREST", ",", "bilinear", "=", "cv2", ".", "INTER_LINEAR", ",", "bicubic", "=", "cv2", ".", "INTER_CUBIC", ",", "\n", "area", "=", "cv2", ".", "INTER_AREA", ")", "[", "mode", "]", "\n", "for", "c", "in", "range", "(", "src", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "cv2", ".", "warpAffine", "(", "src", "[", "c", ",", "...", "]", ".", "numpy", "(", ")", ",", "H", ",", "(", "size", "[", "1", "]", ",", "size", "[", "0", "]", ")", ",", "dst", "[", "c", ",", "...", "]", ".", "numpy", "(", ")", ",", "mode", ")", "\n", "\n", "", "", "elif", "src", ".", "device", ".", "type", ".", "startswith", "(", "'cuda'", ")", ":", "\n", "        ", "nppig_cpp", ".", "warp_affine", "(", "src", ",", "dst", ",", "torch", ".", "from_numpy", "(", "H", ")", ",", "mode", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "dst", "=", "dst", ".", "squeeze", "(", "0", ")", "if", "no_cdim", "else", "dst", "\n", "return", "dst", "\n", "", ""]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.datasets.FileSequence.__init__": [[19, 34], ["list", "dict", "sorted", "datasets.transpose_dict", "list", "list", "jpeg_path.glob", "start_frames.keys", "sorted", "anno_path.glob"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.datasets.transpose_dict", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.list"], ["def", "__init__", "(", "self", ",", "dset_name", ",", "seq_name", ",", "jpeg_path", ":", "Path", ",", "anno_path", ":", "Path", ",", "start_frames", ":", "dict", ",", "merge_objects", "=", "False", ",", "\n", "all_annotations", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "dset_name", "=", "dset_name", "\n", "self", ".", "name", "=", "seq_name", "\n", "\n", "self", ".", "images", "=", "list", "(", "sorted", "(", "jpeg_path", ".", "glob", "(", "\"*.jpg\"", ")", ")", ")", "\n", "self", ".", "preloaded_images", "=", "None", "\n", "self", ".", "anno_path", "=", "anno_path", "\n", "self", ".", "start_frames", "=", "dict", "(", "transpose_dict", "(", "start_frames", ")", ")", "# key: frame, value: list of object ids", "\n", "self", ".", "obj_ids", "=", "list", "(", "start_frames", ".", "keys", "(", ")", ")", "if", "not", "merge_objects", "else", "[", "1", "]", "\n", "self", ".", "frame_names", "=", "[", "f", ".", "stem", "for", "f", "in", "self", ".", "images", "]", "\n", "self", ".", "merge_objects", "=", "merge_objects", "\n", "if", "all_annotations", ":", "\n", "            ", "self", ".", "annos", "=", "list", "(", "sorted", "(", "anno_path", ".", "glob", "(", "\"*.png\"", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.datasets.FileSequence.__len__": [[35, 37], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.datasets.FileSequence.__getitem__": [[38, 60], ["datasets.FileSequence.frame_name", "datasets.FileSequence.start_frames.get", "lib.image.imread", "len", "lib.image.imread", "list", "set", "set", "lib.image.imread.unique().tolist", "lib.image.imread.unique"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.datasets.FileSequence.frame_name", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.image.imread", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.image.imread", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.list"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "\n", "        ", "if", "self", ".", "preloaded_images", "is", "not", "None", ":", "\n", "            ", "im", "=", "self", ".", "preloaded_images", "[", "item", "]", "\n", "", "else", ":", "\n", "            ", "im", "=", "imread", "(", "self", ".", "images", "[", "item", "]", ")", "\n", "", "lb", "=", "[", "]", "\n", "f", "=", "self", ".", "frame_name", "(", "item", ")", "\n", "obj_ids", "=", "self", ".", "start_frames", ".", "get", "(", "f", ",", "[", "]", ")", "\n", "\n", "if", "len", "(", "obj_ids", ")", ">", "0", ":", "\n", "            ", "lb", "=", "imread", "(", "self", ".", "anno_path", "/", "(", "f", "+", "\".png\"", ")", ")", "\n", "if", "self", ".", "merge_objects", ":", "\n", "                ", "lb", "=", "(", "lb", "!=", "0", ")", ".", "byte", "(", ")", "\n", "obj_ids", "=", "[", "1", "]", "\n", "", "else", ":", "\n", "# Suppress labels of objects not in their start frame (primarily for YouTubeVOS)", "\n", "                ", "suppressed_obj_ids", "=", "list", "(", "set", "(", "lb", ".", "unique", "(", ")", ".", "tolist", "(", ")", ")", "-", "set", "(", "[", "0", "]", "+", "obj_ids", ")", ")", "\n", "for", "obj_id", "in", "suppressed_obj_ids", ":", "\n", "                    ", "lb", "[", "lb", "==", "obj_id", "]", "=", "0", "\n", "\n", "", "", "", "return", "im", ",", "lb", ",", "obj_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.datasets.FileSequence.frame_name": [[61, 63], ["None"], "methods", ["None"], ["", "def", "frame_name", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "images", "[", "item", "]", ".", "stem", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.datasets.FileSequence.preload": [[64, 67], ["lib.image.imread().to", "lib.image.imread"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.image.imread"], ["", "def", "preload", "(", "self", ",", "device", ")", ":", "\n", "        ", "\"\"\" Preload all images and upload them to the GPU. \"\"\"", "\n", "self", ".", "preloaded_images", "=", "[", "imread", "(", "f", ")", ".", "to", "(", "device", ")", "for", "f", "in", "self", ".", "images", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.datasets.FileSequence.__repr__": [[68, 70], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"%s: %s, %d frames\"", "%", "(", "self", ".", "dset_name", ",", "self", ".", "name", ",", "len", "(", "self", ".", "images", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.datasets.DAVISDataset.__init__": [[74, 102], ["pathlib.Path().expanduser().resolve", "dict", "datasets.DAVISDataset.dset_path.exists", "print", "quit", "s.strip", "set().issubset", "list", "torch.unique().tolist", "pathlib.Path().expanduser", "sorted", "sorted", "open().readlines", "set", "set().intersection", "datasets.DAVISDataset.sequences.index", "torch.unique", "sorted", "pathlib.Path", "lib.image.imread", "open", "set"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.image.imread"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "year", ":", "str", ",", "split", ":", "str", ",", "restart", ":", "str", "=", "None", ",", "sequences", ":", "(", "list", ",", "tuple", ")", "=", "None", ",", "\n", "all_annotations", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "dset_path", "=", "Path", "(", "path", ")", ".", "expanduser", "(", ")", ".", "resolve", "(", ")", "\n", "if", "not", "self", ".", "dset_path", ".", "exists", "(", ")", ":", "\n", "            ", "print", "(", "\"Dataset directory '%s' not found.\"", "%", "path", ")", "\n", "quit", "(", "1", ")", "\n", "\n", "", "self", ".", "jpeg_path", "=", "self", ".", "dset_path", "/", "\"JPEGImages\"", "/", "\"480p\"", "\n", "self", ".", "anno_path", "=", "self", ".", "dset_path", "/", "\"Annotations\"", "/", "\"480p\"", "\n", "imset", "=", "self", ".", "dset_path", "/", "\"ImageSets\"", "/", "year", "/", "(", "split", "+", "\".txt\"", ")", "\n", "self", ".", "sequences", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "sorted", "(", "open", "(", "imset", ")", ".", "readlines", "(", ")", ")", "]", "\n", "self", ".", "name", "=", "\"dv%s%s\"", "%", "(", "year", ",", "split", ")", "\n", "self", ".", "year", "=", "year", "\n", "self", ".", "all_annotations", "=", "all_annotations", "\n", "\n", "if", "sequences", "is", "not", "None", ":", "\n", "            ", "assert", "set", "(", "sequences", ")", ".", "issubset", "(", "self", ".", "sequences", ")", "\n", "self", ".", "sequences", "=", "list", "(", "sorted", "(", "set", "(", "self", ".", "sequences", ")", ".", "intersection", "(", "sequences", ")", ")", ")", "\n", "", "if", "restart", "is", "not", "None", ":", "\n", "            ", "assert", "restart", "in", "self", ".", "sequences", "\n", "self", ".", "sequences", "=", "self", ".", "sequences", "[", "self", ".", "sequences", ".", "index", "(", "restart", ")", ":", "]", "\n", "\n", "", "self", ".", "start_frames", "=", "dict", "(", ")", "\n", "for", "seq", "in", "self", ".", "sequences", ":", "\n", "            ", "f0", "=", "\"00000\"", "# In DAVIS, all objects appear in the first frame", "\n", "obj_ids", "=", "torch", ".", "unique", "(", "imread", "(", "self", ".", "anno_path", "/", "seq", "/", "(", "f0", "+", "\".png\"", ")", ")", ")", ".", "tolist", "(", ")", "\n", "self", ".", "start_frames", "[", "seq", "]", "=", "{", "obj_id", ":", "f0", "for", "obj_id", "in", "sorted", "(", "obj_ids", ")", "if", "obj_id", "!=", "0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.datasets.DAVISDataset.__len__": [[103, 105], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequences", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.datasets.DAVISDataset.__getitem__": [[106, 110], ["datasets.FileSequence"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "seq", "=", "self", ".", "sequences", "[", "item", "]", "\n", "return", "FileSequence", "(", "self", ".", "name", ",", "seq", ",", "self", ".", "jpeg_path", "/", "seq", ",", "self", ".", "anno_path", "/", "seq", ",", "self", ".", "start_frames", "[", "seq", "]", ",", "\n", "merge_objects", "=", "self", ".", "year", "==", "'2016'", ",", "all_annotations", "=", "self", ".", "all_annotations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.datasets.YouTubeVOSDataset.__init__": [[114, 151], ["pathlib.Path().expanduser().resolve", "dict", "datasets.YouTubeVOSDataset.dset_path.exists", "print", "quit", "set().issubset", "list", "pathlib.Path().expanduser", "split.endswith", "s.strip", "json.load", "sorted", "int", "pathlib.Path", "split.startswith", "sorted", "open", "split.endswith", "json.load", "set", "set().intersection", "datasets.YouTubeVOSDataset.sequences.index", "[].items", "pathlib.Path", "open().readlines", "sorted", "s.is_dir", "open", "datasets.YouTubeVOSDataset.anno_path.glob", "set", "open", "len"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "year", ":", "str", ",", "split", ":", "str", ",", "restart", ":", "str", "=", "None", ",", "sequences", ":", "(", "list", ",", "tuple", ")", "=", "None", ",", "\n", "all_annotations", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "dset_path", "=", "Path", "(", "path", ")", ".", "expanduser", "(", ")", ".", "resolve", "(", ")", "\n", "if", "not", "self", ".", "dset_path", ".", "exists", "(", ")", ":", "\n", "            ", "print", "(", "\"Dataset directory '%s' not found.\"", "%", "path", ")", "\n", "quit", "(", "1", ")", "\n", "\n", "", "self", ".", "name", "=", "\"ytvos%s%s\"", "%", "(", "year", ",", "split", ")", "\n", "self", ".", "year", "=", "year", "\n", "self", ".", "all_annotations", "=", "all_annotations", "\n", "\n", "if", "split", "in", "(", "'train'", ",", "'train_all_frames'", ",", "'jjval'", ",", "'jjval_all_frames'", ")", ":", "\n", "            ", "im_split", "=", "\"train_all_frames\"", "if", "split", ".", "endswith", "(", "\"_all_frames\"", ")", "else", "\"train\"", "\n", "self", ".", "jpeg_path", "=", "self", ".", "dset_path", "/", "im_split", "/", "\"JPEGImages\"", "\n", "self", ".", "anno_path", "=", "self", ".", "dset_path", "/", "\"train\"", "/", "\"Annotations\"", "\n", "imset", "=", "Path", "(", "__file__", ")", ".", "parent", "/", "(", "\"ytvos_jjvalid.txt\"", "if", "split", ".", "startswith", "(", "'jjval'", ")", "else", "\"ytvos_jjtrain.txt\"", ")", "\n", "self", ".", "sequences", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "sorted", "(", "open", "(", "imset", ")", ".", "readlines", "(", ")", ")", "]", "\n", "self", ".", "meta", "=", "json", ".", "load", "(", "open", "(", "self", ".", "dset_path", "/", "\"train\"", "/", "\"meta.json\"", ")", ")", "[", "'videos'", "]", "\n", "", "elif", "split", "in", "(", "'test'", ",", "'test_all_frames'", ",", "'valid'", ",", "'valid_all_frames'", ")", ":", "\n", "            ", "im_split", "=", "split", "\n", "split", "=", "split", "[", ":", "-", "len", "(", "'_all_frames'", ")", "]", "if", "split", ".", "endswith", "(", "'_all_frames'", ")", "else", "split", "\n", "self", ".", "jpeg_path", "=", "self", ".", "dset_path", "/", "im_split", "/", "\"JPEGImages\"", "\n", "self", ".", "anno_path", "=", "self", ".", "dset_path", "/", "split", "/", "\"Annotations\"", "\n", "self", ".", "sequences", "=", "[", "s", ".", "name", "for", "s", "in", "sorted", "(", "self", ".", "anno_path", ".", "glob", "(", "\"*\"", ")", ")", "if", "s", ".", "is_dir", "(", ")", "]", "\n", "self", ".", "meta", "=", "json", ".", "load", "(", "open", "(", "self", ".", "dset_path", "/", "split", "/", "\"meta.json\"", ")", ")", "[", "'videos'", "]", "\n", "\n", "", "if", "sequences", "is", "not", "None", ":", "\n", "            ", "assert", "set", "(", "sequences", ")", ".", "issubset", "(", "self", ".", "sequences", ")", "\n", "self", ".", "sequences", "=", "list", "(", "sorted", "(", "set", "(", "self", ".", "sequences", ")", ".", "intersection", "(", "sequences", ")", ")", ")", "\n", "", "if", "restart", "is", "not", "None", ":", "\n", "            ", "assert", "restart", "in", "self", ".", "sequences", "\n", "self", ".", "sequences", "=", "self", ".", "sequences", "[", "self", ".", "sequences", ".", "index", "(", "restart", ")", ":", "]", "\n", "\n", "", "self", ".", "start_frames", "=", "dict", "(", ")", "\n", "for", "seq", "in", "self", ".", "sequences", ":", "\n", "            ", "self", ".", "start_frames", "[", "seq", "]", "=", "{", "int", "(", "obj_id", ")", ":", "v", "[", "'frames'", "]", "[", "0", "]", "for", "obj_id", ",", "v", "in", "self", ".", "meta", "[", "seq", "]", "[", "'objects'", "]", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.datasets.YouTubeVOSDataset.__len__": [[152, 154], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequences", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.datasets.YouTubeVOSDataset.__getitem__": [[155, 159], ["datasets.FileSequence"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "seq", "=", "self", ".", "sequences", "[", "item", "]", "\n", "return", "FileSequence", "(", "self", ".", "name", ",", "seq", ",", "self", ".", "jpeg_path", "/", "seq", ",", "self", ".", "anno_path", "/", "seq", ",", "self", ".", "start_frames", "[", "seq", "]", ",", "\n", "all_annotations", "=", "self", ".", "all_annotations", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.datasets.transpose_dict": [[9, 14], ["collections.defaultdict", "d.items", "dt[].append"], "function", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items"], ["def", "transpose_dict", "(", "d", ")", ":", "\n", "    ", "dt", "=", "defaultdict", "(", "list", ")", "\n", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "dt", "[", "v", "]", ".", "append", "(", "k", ")", "\n", "", "return", "dt", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.discriminator.DiscriminatorLoss.__init__": [[13, 37], ["optimizer.MinimizationProblem.__init__", "lib.tensorlist.TensorList", "lib.tensorlist.TensorList", "x.new_zeros", "discriminator.DiscriminatorLoss.sample_weights.fill_", "sample_weights.size"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x", ",", "y", ",", "filter_regs", ",", "precond", ",", "sample_weights", ",", "\n", "net", ",", "pixel_weighting", ",", "compute_norm", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "training_samples", "=", "x", "\n", "self", ".", "training_labels", "=", "y", "\n", "self", ".", "y_size", "=", "y", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "self", ".", "x", "=", "x", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "w", "=", "pixel_weighting", "\n", "\n", "self", ".", "filter_regs", "=", "TensorList", "(", "filter_regs", ")", "\n", "if", "sample_weights", ".", "size", "(", ")", "[", "0", "]", "==", "1", ":", "\n", "            ", "self", ".", "sample_weights", "=", "x", ".", "new_zeros", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "sample_weights", ".", "fill_", "(", "sample_weights", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "sample_weights", "=", "sample_weights", "\n", "\n", "", "self", ".", "diag_M", "=", "TensorList", "(", "precond", ")", "\n", "self", ".", "pixel_weighting", "=", "pixel_weighting", "\n", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "compute_norm", "=", "compute_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.discriminator.DiscriminatorLoss.initialize": [[38, 44], ["discriminator.DiscriminatorLoss.sample_weights[].sqrt().view", "discriminator.DiscriminatorLoss.sample_weights[].sqrt"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "\n", "        ", "a", "=", "self", ".", "sample_weights", ">", "0.0", "\n", "self", ".", "x", "=", "self", ".", "training_samples", "[", "a", "]", "\n", "self", ".", "y", "=", "self", ".", "training_labels", "[", "a", "]", "\n", "self", ".", "w", "=", "self", ".", "pixel_weighting", "[", "a", "]", "*", "self", ".", "sample_weights", "[", "a", "]", ".", "sqrt", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.discriminator.DiscriminatorLoss.__call__": [[45, 51], ["discriminator.DiscriminatorLoss.net", "torch.interpolate", "torch.interpolate", "torch.interpolate", "lib.tensorlist.TensorList"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.interpolate", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.interpolate", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.interpolate"], ["", "def", "__call__", "(", "self", ",", "parameters", ":", "TensorList", ")", ":", "\n", "\n", "        ", "s", "=", "self", ".", "net", "(", "self", ".", "x", ")", "\n", "s", "=", "F", ".", "interpolate", "(", "s", ",", "self", ".", "y_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "residuals", "=", "self", ".", "w", "*", "(", "s", "-", "self", ".", "y", ")", "\n", "return", "TensorList", "(", "[", "residuals", ",", "*", "(", "self", ".", "filter_regs", "*", "parameters", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.discriminator.DiscriminatorLoss.ip": [[52, 54], ["a.view", "b.view"], "methods", ["None"], ["", "def", "ip", "(", "self", ",", "a", ":", "TensorList", ",", "b", ":", "TensorList", ")", ":", "\n", "        ", "return", "a", ".", "view", "(", "-", "1", ")", "@", "b", ".", "view", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.discriminator.DiscriminatorLoss.ip_input": [[55, 62], ["discriminator.DiscriminatorLoss.ip", "sum", "lib.tensorlist.TensorList", "lib.tensorlist.TensorList.extend", "o.unsqueeze", "sum.clone"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.GaussNewtonCG.ip"], ["", "def", "ip_input", "(", "self", ",", "a", ":", "TensorList", ",", "b", ":", "TensorList", ")", ":", "\n", "        ", "out", "=", "self", ".", "ip", "(", "a", ",", "b", ")", "\n", "sum_out", "=", "sum", "(", "o", ".", "unsqueeze", "(", "dim", "=", "0", ")", "for", "o", "in", "out", ")", "\n", "rep_sum", "=", "TensorList", "(", "[", "]", ")", "\n", "for", "o", "in", "out", ":", "\n", "            ", "rep_sum", ".", "extend", "(", "sum_out", ".", "clone", "(", ")", ")", "\n", "", "return", "rep_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.discriminator.DiscriminatorLoss.M1": [[63, 65], ["None"], "methods", ["None"], ["", "def", "M1", "(", "self", ",", "x", ":", "TensorList", ")", ":", "\n", "        ", "return", "x", "/", "self", ".", "diag_M", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.discriminator.Discriminator.forward": [[69, 73], ["discriminator.Discriminator.project", "discriminator.Discriminator.filter"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "project", "(", "x", ")", "\n", "x", "=", "self", ".", "filter", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.discriminator.Discriminator.__init__": [[74, 103], ["torch.Module.__init__", "lib.utils.conv", "lib.utils.conv", "discriminator.Discriminator.to"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.conv", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.conv", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to"], ["", "def", "__init__", "(", "self", ",", "in_channels", "=", "1024", ",", "c_channels", "=", "96", ",", "out_channels", "=", "1", ",", "\n", "init_iters", "=", "(", "5", ",", "10", ",", "10", ",", "10", ",", "10", ")", ",", "update_iters", "=", "(", "10", ",", ")", ",", "update_filters", "=", "True", ",", "\n", "filter_reg", "=", "(", "1e-4", ",", "1e-2", ")", ",", "precond", "=", "(", "1e-4", ",", "1e-2", ")", ",", "precond_lr", "=", "0.1", ",", "CG_forgetting_rate", "=", "75", ",", "\n", "memory_size", "=", "80", ",", "train_skipping", "=", "8", ",", "learning_rate", "=", "0.1", ",", "\n", "pixel_weighting", "=", "None", ",", "device", "=", "None", ",", "layer", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "project", "=", "conv", "(", "in_channels", ",", "c_channels", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "filter", "=", "conv", "(", "c_channels", ",", "out_channels", ",", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer", "=", "layer", "\n", "\n", "self", ".", "init_iters", "=", "init_iters", "\n", "self", ".", "update_iters", "=", "update_iters", "\n", "self", ".", "filter_reg", "=", "filter_reg", "\n", "self", ".", "precond", "=", "precond", "\n", "self", ".", "direction_forget_factor", "=", "(", "1", "-", "precond_lr", ")", "**", "CG_forgetting_rate", "\n", "self", ".", "train_skipping", "=", "train_skipping", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "memory_size", "=", "memory_size", "\n", "\n", "self", ".", "pw_params", "=", "pixel_weighting", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "update_filters", "=", "update_filters", "\n", "self", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "frame_num", "=", "0", "\n", "self", ".", "update_optimizer", "=", "None", "\n", "self", ".", "current_sample", "=", "None", "\n", "self", ".", "memory", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.discriminator.Discriminator._is_finite": [[104, 106], ["torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf"], "methods", ["None"], ["", "def", "_is_finite", "(", "self", ",", "t", ")", ":", "\n", "        ", "return", "(", "torch", ".", "isnan", "(", "t", ")", "+", "torch", ".", "isinf", "(", "t", ")", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.discriminator.Discriminator.compute_pixel_weights": [[107, 153], ["y.float.float.float", "y.float.float.sum", "px.view.view.view", "af.view.view.view", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "discriminator.Discriminator._is_finite", "invalid.sum().item", "print", "discriminator.Discriminator._is_finite", "invalid.sum", "print", "invalid.sum"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.discriminator.Discriminator._is_finite", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.discriminator.Discriminator._is_finite"], ["", "def", "compute_pixel_weights", "(", "self", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        :param pixel_weighting:   dict(method={'fixed'|'hinged'}, tf=target influence (fraction), per_frame=bool)\n        :param y:                 Training labels (tensor, shape = (N, 1, H, W)), N = number of samples\n        :return:  tensor (N, 1, H, W) of pixel weights\n        \"\"\"", "\n", "if", "self", ".", "pw_params", "is", "None", "or", "self", ".", "pw_params", "[", "'method'", "]", "==", "'none'", ":", "\n", "            ", "return", "torch", ".", "ones_like", "(", "y", ")", "\n", "\n", "", "method", "=", "self", ".", "pw_params", "[", "'method'", "]", "\n", "tf", "=", "self", ".", "pw_params", "[", "'tf'", "]", "# Target influence of foreground pixels", "\n", "assert", "method", "==", "'hinge'", "\n", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "y", ".", "shape", "\n", "\n", "y", "=", "y", ".", "float", "(", ")", "\n", "px", "=", "y", ".", "sum", "(", "dim", "=", "(", "2", ",", "3", ")", ")", "\n", "af", "=", "px", "/", "(", "H", "*", "W", ")", "\n", "px", "=", "px", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "af", "=", "af", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "\n", "too_small", "=", "(", "px", "<", "10", ")", ".", "float", "(", ")", "\n", "af", "=", "too_small", "*", "tf", "+", "(", "1", "-", "too_small", ")", "*", "af", "\n", "\n", "ii", "=", "(", "af", ">", "tf", ")", ".", "float", "(", ")", "# if af > tf (i.e the object is large enough), then set tf = af", "\n", "tf", "=", "ii", "*", "af", "+", "(", "1", "-", "ii", ")", "*", "tf", "# this leads to self.pixel_weighting = 1 (i.e do nothing)", "\n", "\n", "wf", "=", "tf", "/", "af", "# Foreground pixels weight", "\n", "wb", "=", "(", "1", "-", "tf", ")", "/", "(", "1", "-", "af", ")", "# Background pixels weight", "\n", "\n", "training", "=", "False", "\n", "if", "training", ":", "\n", "            ", "invalid", "=", "~", "self", ".", "_is_finite", "(", "wf", ")", "\n", "if", "invalid", ".", "sum", "(", ")", ".", "item", "(", ")", ">", "0", ":", "\n", "                ", "print", "(", "\"Warning: Corrected invalid (non-finite) foreground filter pixel-weights.\"", ")", "\n", "wf", "[", "invalid", "]", "=", "1.0", "\n", "\n", "", "invalid", "=", "~", "self", ".", "_is_finite", "(", "wb", ")", "\n", "if", "invalid", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "print", "(", "\"Warning: Corrected bad (non-finite) background pixel-weights.\"", ")", "\n", "wb", "[", "invalid", "]", "=", "1.0", "\n", "\n", "", "", "w", "=", "wf", "*", "y", "+", "wb", "*", "(", "1", "-", "y", ")", "\n", "w", "=", "torch", ".", "sqrt", "(", "w", ")", "\n", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.discriminator.Discriminator.init": [[154, 199], ["discriminator.Discriminator.compute_pixel_weights", "memory.Memory.Memory", "memory.Memory.Memory.initialize", "lib.tensorlist.TensorList", "discriminator.DiscriminatorLoss", "optimizer.GaussNewtonCG.GaussNewtonCG", "DiscriminatorLoss.net.train", "optimizer.GaussNewtonCG.GaussNewtonCG.run", "DiscriminatorLoss.net.eval", "discriminator.Discriminator.project", "memory.Memory.Memory", "memory.Memory.Memory.initialize", "lib.tensorlist.TensorList", "discriminator.DiscriminatorLoss", "optimizer.GaussNewtonCG.GaussNewtonCG", "DiscriminatorLoss.net.train", "optimizer.GaussNewtonCG.GaussNewtonCG.run", "DiscriminatorLoss.net.eval", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.discriminator.Discriminator.compute_pixel_weights", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.initialize", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training.Trainer.train", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.GaussNewtonCG.run", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.initialize", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training.Trainer.train", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.GaussNewtonCG.run"], ["", "def", "init", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        :param x: Tensor of data augmented features from the first frame, shape (K, Cf, Hf, Wf),\n                  where K is the number of augmented feature maps.\n        :param y: Object mask tensor, shape (K, 1, Him, Wim)\n        \"\"\"", "\n", "\n", "pw", "=", "self", ".", "compute_pixel_weights", "(", "y", ")", "\n", "\n", "# Run the initial optimization", "\n", "\n", "memory", "=", "Memory", "(", "y", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "-", "3", ":", "]", ",", "y", ".", "shape", "[", "-", "3", ":", "]", ",", "self", ".", "device", ",", "self", ".", "learning_rate", ")", "\n", "memory", ".", "initialize", "(", "x", ",", "y", ",", "pw", ")", "\n", "\n", "parameters", "=", "TensorList", "(", "[", "self", ".", "project", ".", "weight", ",", "self", ".", "filter", ".", "weight", "]", ")", "\n", "problem", "=", "DiscriminatorLoss", "(", "x", "=", "memory", ".", "samples", ",", "y", "=", "memory", ".", "labels", ",", "\n", "filter_regs", "=", "self", ".", "filter_reg", ",", "precond", "=", "self", ".", "precond", ",", "sample_weights", "=", "memory", ".", "weights", ",", "\n", "net", "=", "nn", ".", "Sequential", "(", "self", ".", "project", ",", "self", ".", "filter", ")", ",", "pixel_weighting", "=", "memory", ".", "pixel_weights", ")", "\n", "optimizer", "=", "GaussNewtonCG", "(", "problem", ",", "parameters", ",", "fletcher_reeves", "=", "False", ",", "standard_alpha", "=", "True", ",", "\n", "direction_forget_factor", "=", "self", ".", "direction_forget_factor", ")", "\n", "problem", ".", "net", ".", "train", "(", ")", "\n", "optimizer", ".", "run", "(", "self", ".", "init_iters", ")", "\n", "problem", ".", "net", ".", "eval", "(", ")", "\n", "\n", "x", "=", "self", ".", "project", "(", "x", ")", "# Re-project samples with the new projection matrix", "\n", "\n", "# Initialize the memory", "\n", "\n", "memory", "=", "Memory", "(", "self", ".", "memory_size", ",", "x", ".", "shape", "[", "-", "3", ":", "]", ",", "y", ".", "shape", "[", "-", "3", ":", "]", ",", "self", ".", "device", ",", "self", ".", "learning_rate", ")", "\n", "memory", ".", "initialize", "(", "x", ",", "y", ",", "pw", ")", "\n", "\n", "# Build the update problem", "\n", "\n", "parameters", "=", "TensorList", "(", "[", "self", ".", "filter", ".", "weight", "]", ")", "\n", "problem", "=", "DiscriminatorLoss", "(", "x", "=", "memory", ".", "samples", ",", "y", "=", "memory", ".", "labels", ",", "\n", "filter_regs", "=", "self", ".", "filter_reg", "[", "1", ":", "]", ",", "precond", "=", "self", ".", "precond", "[", "1", ":", "]", ",", "sample_weights", "=", "memory", ".", "weights", ",", "\n", "net", "=", "self", ".", "filter", ",", "pixel_weighting", "=", "memory", ".", "pixel_weights", ")", "\n", "optimizer", "=", "GaussNewtonCG", "(", "problem", ",", "parameters", ",", "fletcher_reeves", "=", "False", ",", "standard_alpha", "=", "True", ",", "\n", "direction_forget_factor", "=", "self", ".", "direction_forget_factor", ")", "\n", "problem", ".", "net", ".", "train", "(", ")", "\n", "optimizer", ".", "run", "(", "self", ".", "update_iters", ")", "\n", "problem", ".", "net", ".", "eval", "(", ")", "\n", "\n", "self", ".", "memory", "=", "memory", "\n", "self", ".", "update_optimizer", "=", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.discriminator.Discriminator.apply": [[200, 206], ["discriminator.Discriminator.project", "discriminator.Discriminator.filter"], "methods", ["None"], ["", "def", "apply", "(", "self", ",", "ft", ")", ":", "\n", "        ", "self", ".", "frame_num", "+=", "1", "\n", "cft", "=", "self", ".", "project", "(", "ft", ")", "\n", "self", ".", "current_sample", "=", "cft", "\n", "scores", "=", "self", ".", "filter", "(", "cft", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.discriminator.Discriminator.update": [[207, 227], ["discriminator.Discriminator.compute_pixel_weights", "discriminator.Discriminator.memory.update", "optim.problem.net.train", "optim.run", "optim.problem.net.eval"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.discriminator.Discriminator.compute_pixel_weights", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.update", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training.Trainer.train", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.GaussNewtonCG.run"], ["", "def", "update", "(", "self", ",", "train_y", ")", ":", "\n", "\n", "        ", "if", "not", "self", ".", "update_filters", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "current_sample", "is", "None", ":", "\n", "            ", "return", "\n", "", "if", "(", "train_y", ">", "0.5", ")", ".", "sum", "(", ")", "<", "10", ":", "\n", "            ", "return", "\n", "\n", "", "ys", "=", "(", "train_y", ">", "0.5", ")", ".", "float", "(", ")", "\n", "pw", "=", "self", ".", "compute_pixel_weights", "(", "ys", ")", "\n", "self", ".", "memory", ".", "update", "(", "self", ".", "current_sample", ",", "train_y", ",", "pw", ")", "\n", "\n", "if", "self", ".", "frame_num", "%", "self", ".", "train_skipping", "!=", "0", ":", "\n", "            ", "return", "\n", "\n", "", "optim", "=", "self", ".", "update_optimizer", "\n", "optim", ".", "problem", ".", "net", ".", "train", "(", ")", "\n", "optim", ".", "run", "(", "self", ".", "update_iters", ")", "\n", "optim", ".", "problem", ".", "net", ".", "eval", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.template_matching.TemplateUpdate.__init__": [[7, 18], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_key", ",", "ch_val", ",", "group_n", "=", "4", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_key", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_key", ",", "1", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ch_key", ",", "ch_key", ",", "5", ",", "1", ",", "2", ",", "groups", "=", "ch_key", "//", "group_n", ")", "\n", ")", "\n", "self", ".", "conv_val", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_val", ",", "1", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ch_val", ",", "ch_val", ",", "5", ",", "1", ",", "2", ",", "groups", "=", "ch_val", "//", "group_n", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.template_matching.TemplateUpdate.forward": [[20, 31], ["template_matching.TemplateUpdate.conv_val", "template_matching.TemplateUpdate.conv_key", "template_matching.TemplateUpdate.reshape", "template_matching.TemplateUpdate.reshape().permute().contiguous", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.bmm().mul", "torch.bmm().mul", "torch.bmm().mul", "torch.bmm().mul", "torch.bmm().mul", "torch.bmm().mul", "torch.bmm().mul", "torch.bmm().mul", "torch.bmm().mul", "template_matching.TemplateUpdate.reshape().permute", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "math.sqrt", "template_matching.TemplateUpdate.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "mask", "=", "None", ")", ":", "\n", "        ", "if", "mask", "!=", "None", ":", "\n", "            ", "input", "=", "torch", ".", "cat", "(", "[", "input", ",", "mask", "]", ",", "dim", "=", "1", ")", "\n", "", "val", "=", "self", ".", "conv_val", "(", "input", ")", "\n", "key", "=", "self", ".", "conv_key", "(", "input", ")", "\n", "B", ",", "V", ",", "H", ",", "W", "=", "val", ".", "shape", "\n", "B", ",", "K", ",", "H", ",", "W", "=", "key", ".", "shape", "\n", "val_mm", "=", "val", ".", "reshape", "(", "B", ",", "V", ",", "-", "1", ")", "#V * HW", "\n", "key_mm", "=", "key", ".", "reshape", "(", "B", ",", "K", ",", "-", "1", ")", ".", "permute", "(", "(", "0", ",", "2", ",", "1", ")", ")", ".", "contiguous", "(", ")", "# HW K", "\n", "out", "=", "F", ".", "softmax", "(", "torch", ".", "bmm", "(", "val_mm", ",", "key_mm", ")", ".", "mul", "(", "1.", "/", "math", ".", "sqrt", "(", "H", "*", "W", ")", ")", ",", "dim", "=", "2", ")", "# V*HW HW K", "\n", "return", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.template_matching.TemplateMatching.__init__": [[36, 53], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_key", ",", "ch_val", ",", "ch_feat", ",", "group_n", "=", "4", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv_key", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_key", ",", "1", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ch_key", ",", "ch_key", ",", "5", ",", "1", ",", "2", ",", "groups", "=", "ch_key", "//", "group_n", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n", ")", "\n", "self", ".", "conv_feat", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_feat", ",", "1", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ch_feat", ",", "ch_feat", ",", "5", ",", "1", ",", "2", ",", "groups", "=", "ch_feat", "//", "group_n", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "blend", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ch_val", "+", "ch_feat", ",", "ch_val", "+", "ch_feat", ",", "5", ",", "1", ",", "2", ",", "groups", "=", "(", "ch_val", "+", "ch_feat", ")", "//", "4", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ch_val", "+", "ch_feat", ",", "ch_feat", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.template_matching.TemplateMatching.forward": [[55, 64], ["template_matching.TemplateMatching.conv_key", "template_matching.TemplateMatching.conv_feat", "template_matching.TemplateMatching.reshape", "torch.bmm().reshape", "torch.bmm().reshape", "torch.bmm().reshape", "torch.bmm().reshape", "torch.bmm().reshape", "torch.bmm().reshape", "torch.bmm().reshape", "torch.bmm().reshape", "torch.bmm().reshape", "torch.relu", "torch.relu", "torch.relu", "template_matching.TemplateMatching.blend", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.relu", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.relu", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.relu"], ["", "def", "forward", "(", "self", ",", "input", ",", "template", ")", ":", "\n", "        ", "key", "=", "self", ".", "conv_key", "(", "input", ")", "\n", "feat", "=", "self", ".", "conv_feat", "(", "input", ")", "\n", "\n", "B", ",", "K", ",", "H", ",", "W", "=", "key", ".", "shape", "\n", "key_mm", "=", "key", ".", "reshape", "(", "B", ",", "K", ",", "-", "1", ")", "\n", "similarity", "=", "torch", ".", "bmm", "(", "template", ",", "key_mm", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "H", ",", "W", ")", "# V * K x K * HW => V * HW", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "blend", "(", "torch", ".", "cat", "(", "[", "feat", ",", "similarity", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "return", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.template_matching.LongtermTemplate.__init__": [[66, 71], ["torch.Module.__init__", "template_matching.TemplateMatching", "template_matching.TemplateUpdate"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_key", ",", "ch_val", ",", "ch_feat", ",", "group_n", "=", "4", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "Tmatching", "=", "TemplateMatching", "(", "ch_in", ",", "ch_key", ",", "ch_val", ",", "ch_feat", ",", "group_n", ")", "\n", "self", ".", "Tgenerate", "=", "TemplateUpdate", "(", "ch_in", ",", "ch_key", ",", "ch_val", ",", "group_n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.template_matching.LongtermTemplate.forward": [[72, 86], ["template_matching.LongtermTemplate.Tmatching", "template_matching.LongtermTemplate.Tgenerate", "print", "exit"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input1", ",", "input2", "=", "None", ",", "input3", "=", "None", ",", "t", "=", "None", ",", "mode", "=", "'Q'", ")", ":", "\n", "        ", "if", "mode", "==", "'Q'", ":", "\n", "            ", "return", "self", ".", "Tmatching", "(", "input1", ",", "input2", ")", "\n", "", "elif", "mode", "==", "'M'", ":", "\n", "            ", "curr_gc", "=", "self", ".", "Tgenerate", "(", "input1", ",", "input2", ")", "\n", "if", "t", "==", "0", ":", "\n", "                ", "return", "curr_gc", "\n", "", "else", ":", "\n", "                ", "w1", "=", "0.8", "*", "(", "t", "/", "(", "t", "+", "1", ")", ")", "\n", "w2", "=", "0.2", "*", "(", "1", "/", "(", "t", "+", "1", ")", ")", "\n", "return", "(", "w1", "/", "(", "w1", "+", "w2", ")", ")", "*", "input3", "+", "(", "w2", "/", "(", "w1", "+", "w2", ")", ")", "*", "curr_gc", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "\"Wrong mode {}\"", ".", "format", "(", "mode", ")", ")", "\n", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.seg_network.TSE.__init__": [[8, 14], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "lib.utils.conv", "lib.utils.relu", "lib.utils.conv", "lib.utils.conv", "lib.utils.relu", "lib.utils.conv", "lib.utils.relu", "lib.utils.conv", "lib.utils.relu"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.conv", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.relu", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.conv", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.conv", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.relu", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.conv", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.relu", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.conv", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.relu"], ["    ", "def", "__init__", "(", "self", ",", "fc", ",", "ic", ",", "oc", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "nc", "=", "ic", "+", "oc", "\n", "self", ".", "reduce", "=", "nn", ".", "Sequential", "(", "conv", "(", "fc", ",", "oc", ",", "1", ")", ",", "relu", "(", ")", ",", "conv", "(", "oc", ",", "oc", ",", "1", ")", ")", "\n", "self", ".", "transform", "=", "nn", ".", "Sequential", "(", "conv", "(", "nc", ",", "nc", ",", "3", ")", ",", "relu", "(", ")", ",", "conv", "(", "nc", ",", "nc", ",", "3", ")", ",", "relu", "(", ")", ",", "conv", "(", "nc", ",", "oc", ",", "3", ")", ",", "relu", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.seg_network.TSE.forward": [[15, 21], ["seg_network.TSE.reduce", "lib.utils.adaptive_cat", "seg_network.TSE.transform", "torch.nn.functional.adaptive_avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.adaptive_cat"], ["", "def", "forward", "(", "self", ",", "ft", ",", "score", ",", "x", "=", "None", ")", ":", "\n", "        ", "h", "=", "self", ".", "reduce", "(", "ft", ")", "\n", "hpool", "=", "F", ".", "adaptive_avg_pool2d", "(", "h", ",", "(", "1", ",", "1", ")", ")", "if", "x", "is", "None", "else", "x", "\n", "h", "=", "adaptive_cat", "(", "(", "h", ",", "score", ")", ",", "dim", "=", "1", ",", "ref_tensor", "=", "0", ")", "\n", "h", "=", "self", ".", "transform", "(", "h", ")", "\n", "return", "h", ",", "hpool", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.seg_network.CAB.__init__": [[25, 30], ["torch.nn.Module.__init__", "torch.nn.Sequential", "lib.utils.conv", "lib.utils.relu", "lib.utils.conv"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.conv", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.relu", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.conv"], ["    ", "def", "__init__", "(", "self", ",", "oc", ",", "deepest", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "convreluconv", "=", "nn", ".", "Sequential", "(", "conv", "(", "2", "*", "oc", ",", "oc", ",", "1", ")", ",", "relu", "(", ")", ",", "conv", "(", "oc", ",", "oc", ",", "1", ")", ")", "\n", "self", ".", "deepest", "=", "deepest", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.seg_network.CAB.forward": [[31, 44], ["torch.nn.functional.adaptive_avg_pool2d", "seg_network.CAB.convreluconv", "torch.nn.functional.adaptive_avg_pool2d", "torch.cat", "torch.cat", "torch.sigmoid", "lib.utils.interpolate"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.interpolate"], ["", "def", "forward", "(", "self", ",", "deeper", ",", "shallower", ",", "att_vec", "=", "None", ")", ":", "\n", "\n", "        ", "shallow_pool", "=", "F", ".", "adaptive_avg_pool2d", "(", "shallower", ",", "(", "1", ",", "1", ")", ")", "\n", "deeper_pool", "=", "deeper", "if", "self", ".", "deepest", "else", "F", ".", "adaptive_avg_pool2d", "(", "deeper", ",", "(", "1", ",", "1", ")", ")", "\n", "if", "att_vec", "is", "not", "None", ":", "\n", "            ", "global_pool", "=", "torch", ".", "cat", "(", "[", "shallow_pool", ",", "deeper_pool", ",", "att_vec", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "global_pool", "=", "torch", ".", "cat", "(", "(", "shallow_pool", ",", "deeper_pool", ")", ",", "dim", "=", "1", ")", "\n", "", "conv_1x1", "=", "self", ".", "convreluconv", "(", "global_pool", ")", "\n", "inputs", "=", "shallower", "*", "torch", ".", "sigmoid", "(", "conv_1x1", ")", "\n", "out", "=", "inputs", "+", "interpolate", "(", "deeper", ",", "inputs", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.seg_network.RRB.__init__": [[48, 55], ["torch.nn.Module.__init__", "lib.utils.conv", "torch.nn.Sequential", "torch.nn.Sequential", "lib.utils.conv", "torch.nn.BatchNorm2d", "lib.utils.relu", "lib.utils.conv", "lib.utils.conv", "lib.utils.relu", "lib.utils.conv"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.conv", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.conv", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.relu", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.conv", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.conv", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.relu", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.conv"], ["    ", "def", "__init__", "(", "self", ",", "oc", ",", "use_bn", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1x1", "=", "conv", "(", "oc", ",", "oc", ",", "1", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bblock", "=", "nn", ".", "Sequential", "(", "conv", "(", "oc", ",", "oc", ",", "3", ")", ",", "nn", ".", "BatchNorm2d", "(", "oc", ")", ",", "relu", "(", ")", ",", "conv", "(", "oc", ",", "oc", ",", "3", ",", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bblock", "=", "nn", ".", "Sequential", "(", "conv", "(", "oc", ",", "oc", ",", "3", ")", ",", "relu", "(", ")", ",", "conv", "(", "oc", ",", "oc", ",", "3", ",", "bias", "=", "False", ")", ")", "# Basic block", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.seg_network.RRB.forward": [[56, 59], ["seg_network.RRB.conv1x1", "torch.nn.functional.relu", "seg_network.RRB.bblock"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.relu"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "conv1x1", "(", "x", ")", "\n", "return", "F", ".", "relu", "(", "h", "+", "self", ".", "bblock", "(", "h", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.seg_network.Translate_F.__init__": [[63, 67], ["torch.nn.Module.__init__", "lib.utils.MultiReceptiveConv", "seg_network.RRB"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ic", ",", "mid", ",", "oc", ",", "use_bn", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_multi", "=", "MultiReceptiveConv", "(", "ic", ",", "mid", ",", "oc", ")", "\n", "self", ".", "postRBB", "=", "RRB", "(", "oc", ",", "use_bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.seg_network.Translate_F.forward": [[68, 71], ["seg_network.Translate_F.conv_multi", "seg_network.Translate_F.postRBB"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "y1", ")", ":", "\n", "        ", "h", "=", "self", ".", "conv_multi", "(", "x1", ",", "y1", ")", "\n", "return", "self", ".", "postRBB", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.seg_network.Upsampler.__init__": [[74, 79], ["torch.nn.Module.__init__", "lib.utils.conv", "lib.utils.conv"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.conv", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.conv"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "64", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "conv", "(", "in_channels", ",", "in_channels", "//", "2", ",", "3", ")", "\n", "self", ".", "conv2", "=", "conv", "(", "in_channels", "//", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.seg_network.Upsampler.forward": [[80, 87], ["print", "torch.nn.functional.interpolate", "torch.nn.functional.relu", "torch.nn.functional.interpolate", "seg_network.Upsampler.conv2", "seg_network.Upsampler.conv1"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.interpolate", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.relu", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.interpolate"], ["", "def", "forward", "(", "self", ",", "x", ",", "image_size", ")", ":", "\n", "        ", "print", "(", "x", ".", "shape", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "(", "2", "*", "x", ".", "shape", "[", "-", "2", "]", ",", "2", "*", "x", ".", "shape", "[", "-", "1", "]", ")", ",", "mode", "=", "'bicubic'", ",", "align_corners", "=", "False", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "image_size", "[", "-", "2", ":", "]", ",", "mode", "=", "'bicubic'", ",", "align_corners", "=", "False", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.seg_network.PyrUpBicubic2d.__init__": [[91, 117], ["torch.nn.Module.__init__", "seg_network.PyrUpBicubic2d.__init__.kernel"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "channels", "=", "channels", "\n", "\n", "def", "kernel", "(", "d", ")", ":", "\n", "            ", "x", "=", "d", "+", "torch", ".", "arange", "(", "-", "1", ",", "3", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "x", "=", "torch", ".", "abs", "(", "x", ")", "\n", "a", "=", "-", "0.75", "\n", "f", "=", "(", "x", "<", "1", ")", ".", "float", "(", ")", "*", "(", "(", "a", "+", "2", ")", "*", "x", "*", "x", "*", "x", "-", "(", "a", "+", "3", ")", "*", "x", "*", "x", "+", "1", ")", "+", "(", "(", "x", ">=", "1", ")", "*", "(", "x", "<", "2", ")", ")", ".", "float", "(", ")", "*", "(", "a", "*", "x", "*", "x", "*", "x", "-", "5", "*", "a", "*", "x", "*", "x", "+", "8", "*", "a", "*", "x", "-", "4", "*", "a", ")", "\n", "W", "=", "f", ".", "reshape", "(", "1", ",", "1", ",", "1", ",", "len", "(", "x", ")", ")", ".", "float", "(", ")", "\n", "Wt", "=", "W", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", "return", "W", ",", "Wt", "\n", "\n", "", "We", ",", "We_t", "=", "kernel", "(", "-", "0.25", ")", "\n", "Wo", ",", "Wo_t", "=", "kernel", "(", "-", "0.25", "-", "0.5", ")", "\n", "\n", "# Building non-separable filters for now. It would make sense to", "\n", "# have separable filters if it proves to be faster.", "\n", "\n", "# .contiguous() is needed until a bug is fixed in nn.Conv2d.", "\n", "self", ".", "W00", "=", "(", "We_t", "@", "We", ")", ".", "expand", "(", "channels", ",", "1", ",", "4", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "self", ".", "W01", "=", "(", "We_t", "@", "Wo", ")", ".", "expand", "(", "channels", ",", "1", ",", "4", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "self", ".", "W10", "=", "(", "Wo_t", "@", "We", ")", ".", "expand", "(", "channels", ",", "1", ",", "4", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "self", ".", "W11", "=", "(", "Wo_t", "@", "Wo", ")", ".", "expand", "(", "channels", ",", "1", ",", "4", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.seg_network.PyrUpBicubic2d.forward": [[118, 141], ["torch.nn.functional.pad", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.nn.functional.pad", "seg_network.PyrUpBicubic2d.W00.to", "seg_network.PyrUpBicubic2d.W01.to", "seg_network.PyrUpBicubic2d.W10.to", "seg_network.PyrUpBicubic2d.W11.to", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "if", "input", ".", "device", "!=", "self", ".", "W00", ".", "device", ":", "\n", "            ", "self", ".", "W00", "=", "self", ".", "W00", ".", "to", "(", "input", ".", "device", ")", "\n", "self", ".", "W01", "=", "self", ".", "W01", ".", "to", "(", "input", ".", "device", ")", "\n", "self", ".", "W10", "=", "self", ".", "W10", ".", "to", "(", "input", ".", "device", ")", "\n", "self", ".", "W11", "=", "self", ".", "W11", ".", "to", "(", "input", ".", "device", ")", "\n", "\n", "", "a", "=", "F", ".", "pad", "(", "input", ",", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "'replicate'", ")", "\n", "\n", "I00", "=", "F", ".", "conv2d", "(", "a", ",", "self", ".", "W00", ",", "groups", "=", "self", ".", "channels", ")", "\n", "I01", "=", "F", ".", "conv2d", "(", "a", ",", "self", ".", "W01", ",", "groups", "=", "self", ".", "channels", ")", "\n", "I10", "=", "F", ".", "conv2d", "(", "a", ",", "self", ".", "W10", ",", "groups", "=", "self", ".", "channels", ")", "\n", "I11", "=", "F", ".", "conv2d", "(", "a", ",", "self", ".", "W11", ",", "groups", "=", "self", ".", "channels", ")", "\n", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "I11", ".", "shape", "\n", "\n", "J0", "=", "torch", ".", "stack", "(", "(", "I00", ",", "I01", ")", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "n", ",", "c", ",", "h", ",", "2", "*", "w", ")", "\n", "J1", "=", "torch", ".", "stack", "(", "(", "I10", ",", "I11", ")", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "n", ",", "c", ",", "h", ",", "2", "*", "w", ")", "\n", "out", "=", "torch", ".", "stack", "(", "(", "J0", ",", "J1", ")", ",", "dim", "=", "-", "2", ")", ".", "view", "(", "n", ",", "c", ",", "2", "*", "h", ",", "2", "*", "w", ")", "\n", "\n", "out", "=", "F", ".", "pad", "(", "out", ",", "(", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.seg_network.BackwardCompatibleUpsampler.__init__": [[146, 153], ["torch.nn.Module.__init__", "lib.utils.conv", "seg_network.PyrUpBicubic2d", "lib.utils.conv", "seg_network.PyrUpBicubic2d"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.conv", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.conv"], ["def", "__init__", "(", "self", ",", "in_channels", "=", "64", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "conv", "(", "in_channels", ",", "in_channels", "//", "2", ",", "3", ")", "\n", "self", ".", "up1", "=", "PyrUpBicubic2d", "(", "in_channels", ")", "\n", "self", ".", "conv2", "=", "conv", "(", "in_channels", "//", "2", ",", "1", ",", "3", ")", "\n", "self", ".", "up2", "=", "PyrUpBicubic2d", "(", "in_channels", "//", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.seg_network.BackwardCompatibleUpsampler.forward": [[154, 161], ["seg_network.BackwardCompatibleUpsampler.up1", "torch.nn.functional.relu", "seg_network.BackwardCompatibleUpsampler.up2", "torch.nn.functional.interpolate", "seg_network.BackwardCompatibleUpsampler.conv2", "seg_network.BackwardCompatibleUpsampler.conv1"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.relu", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.interpolate"], ["", "def", "forward", "(", "self", ",", "x", ",", "image_size", ")", ":", "\n", "        ", "x", "=", "self", ".", "up1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "image_size", "[", "-", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.seg_network.SegNetwork.__init__": [[165, 198], ["torch.nn.Module.__init__", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "seg_network.SegNetwork.ft_channels.items", "enumerate", "seg_network.Translate_F", "seg_network.BackwardCompatibleUpsampler", "seg_network.TSE", "seg_network.RRB", "seg_network.CAB", "seg_network.RRB", "seg_network.SegNetwork.post_ft.append", "seg_network.SegNetwork.prev_ft.append"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "1", ",", "out_channels", "=", "32", ",", "ft_channels", "=", "None", ",", "use_bn", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "ft_channels", "is", "not", "None", "\n", "self", ".", "ft_channels", "=", "ft_channels", "\n", "\n", "self", ".", "TSE", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "self", ".", "RRB1", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "self", ".", "CAB", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "self", ".", "RRB2", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "\n", "ic", "=", "in_channels", "\n", "oc", "=", "out_channels", "\n", "\n", "for", "L", ",", "fc", "in", "self", ".", "ft_channels", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "TSE", "[", "L", "]", "=", "TSE", "(", "fc", ",", "ic", ",", "oc", ")", "\n", "self", ".", "RRB1", "[", "L", "]", "=", "RRB", "(", "oc", ",", "use_bn", "=", "use_bn", ")", "\n", "self", ".", "CAB", "[", "L", "]", "=", "CAB", "(", "oc", ",", "L", "==", "'layer5'", ")", "\n", "self", ".", "RRB2", "[", "L", "]", "=", "RRB", "(", "oc", ",", "use_bn", "=", "use_bn", ")", "\n", "", "self", ".", "prev_ft", "=", "[", "]", "\n", "shift", "=", "False", "\n", "self", ".", "post_ft", "=", "[", "]", "\n", "for", "i", ",", "L", "in", "enumerate", "(", "self", ".", "ft_channels", ")", ":", "\n", "            ", "if", "L", "==", "\"layer3\"", ":", "\n", "                ", "shift", "=", "True", "\n", "", "if", "shift", ":", "\n", "                ", "self", ".", "post_ft", ".", "append", "(", "L", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "prev_ft", ".", "append", "(", "L", ")", "\n", "#if torch.__version__ == '1.0.1'", "\n", "", "", "self", ".", "Diff_process", "=", "Translate_F", "(", "oc", "+", "1", ",", "16", "*", "3", ",", "oc", ",", "use_bn", "=", "use_bn", ")", "\n", "self", ".", "project", "=", "BackwardCompatibleUpsampler", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.seg_network.SegNetwork.forward": [[201, 254], ["seg_network.SegNetwork.Diff_process", "seg_network.SegNetwork.project", "lib.utils.interpolate", "lib.utils.interpolate", "gate.unsqueeze().unsqueeze().expand_as", "gate.unsqueeze().unsqueeze().expand_as", "ft.repeat", "ft.repeat", "gate.unsqueeze().unsqueeze().expand_as", "next", "gate.unsqueeze().unsqueeze", "gate.unsqueeze().unsqueeze", "iter", "gate.unsqueeze().unsqueeze", "gate.unsqueeze", "gate.unsqueeze", "gate.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.interpolate", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.interpolate"], ["", "def", "forward", "(", "self", ",", "scores", ",", "features", ",", "gate", ",", "prevX", ",", "Diff", ",", "image_size", ",", "org_score", "=", "None", ")", ":", "\n", "        ", "'''\n        scores : b * 1 * 30 * 54\n        temmplate S : b* out * 60 * 107\n\n        '''", "\n", "\n", "num_targets", "=", "scores", ".", "shape", "[", "0", "]", "\n", "num_fmaps", "=", "features", "[", "next", "(", "iter", "(", "self", ".", "ft_channels", ")", ")", "]", ".", "shape", "[", "0", "]", "\n", "if", "num_targets", ">", "num_fmaps", ":", "\n", "            ", "multi_targets", "=", "True", "\n", "", "else", ":", "\n", "            ", "multi_targets", "=", "False", "\n", "\n", "", "x", "=", "None", "\n", "\n", "for", "L", "in", "(", "self", ".", "prev_ft", ")", ":", "\n", "            ", "ft", "=", "features", "[", "L", "]", "\n", "s", "=", "interpolate", "(", "org_score", ",", "ft", ".", "shape", "[", "-", "2", ":", "]", ")", "# Resample scores to match features size", "\n", "\n", "if", "multi_targets", ":", "\n", "                ", "h", ",", "hpool", "=", "self", ".", "TSE", "[", "L", "]", "(", "ft", ".", "repeat", "(", "num_targets", ",", "1", ",", "1", ",", "1", ")", ",", "s", ",", "x", ")", "\n", "", "else", ":", "\n", "                ", "h", ",", "hpool", "=", "self", ".", "TSE", "[", "L", "]", "(", "ft", ",", "s", ",", "x", ")", "\n", "\n", "", "h", "=", "self", ".", "RRB1", "[", "L", "]", "(", "h", ")", "\n", "h", "=", "self", ".", "CAB", "[", "L", "]", "(", "hpool", ",", "h", ")", "\n", "x", "=", "self", ".", "RRB2", "[", "L", "]", "(", "h", ")", "\n", "", "curr_x", "=", "x", "#curr_feature org_score", "\n", "if", "prevX", "==", "None", ":", "\n", "            ", "return", "curr_x", "\n", "\n", "", "TransprevX", "=", "self", ".", "Diff_process", "(", "prevX", ",", "Diff", ")", "# Re-align prevX to curr", "\n", "x", "=", "TransprevX", "*", "(", "gate", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "prevX", ")", ")", "+", "curr_x", "*", "(", "1", "-", "gate", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "curr_x", ")", "\n", "\n", "for", "L", "in", "(", "self", ".", "post_ft", ")", ":", "\n", "            ", "ft", "=", "features", "[", "L", "]", "\n", "s", "=", "interpolate", "(", "scores", ",", "ft", ".", "shape", "[", "-", "2", ":", "]", ")", "# Resample scores to match features size", "\n", "\n", "if", "multi_targets", ":", "\n", "                ", "h", ",", "hpool", "=", "self", ".", "TSE", "[", "L", "]", "(", "ft", ".", "repeat", "(", "num_targets", ",", "1", ",", "1", ",", "1", ")", ",", "s", ",", "x", ")", "\n", "", "else", ":", "\n", "                ", "h", ",", "hpool", "=", "self", ".", "TSE", "[", "L", "]", "(", "ft", ",", "s", ",", "x", ")", "\n", "\n", "", "h", "=", "self", ".", "RRB1", "[", "L", "]", "(", "h", ")", "\n", "h", "=", "self", ".", "CAB", "[", "L", "]", "(", "hpool", ",", "h", ")", "\n", "x", "=", "self", ".", "RRB2", "[", "L", "]", "(", "h", ")", "\n", "", "x_proj", "=", "self", ".", "project", "(", "x", ",", "image_size", ")", "\n", "new_prevX", "=", "prevX", "*", "(", "1", "-", "gate", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "prevX", ")", ")", "+", "curr_x", "*", "gate", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "curr_x", ")", "\n", "\n", "return", "x_proj", ",", "new_prevX", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.seg_network.SegNetwork.Test_Forward": [[255, 312], ["seg_network.SegNetwork.clone", "seg_network.SegNetwork.project", "seg_network.SegNetwork.Diff_process", "seg_network.SegNetwork.project", "lib.utils.interpolate", "lib.utils.interpolate", "lib.utils.interpolate", "next", "ft.repeat", "ft.repeat", "ft.repeat", "iter"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.interpolate", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.interpolate", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.interpolate"], ["", "def", "Test_Forward", "(", "self", ",", "scores", ",", "features", ",", "gate", ",", "prevX", ",", "Diff", ",", "image_size", ")", ":", "\n", "        ", "num_targets", "=", "scores", ".", "shape", "[", "0", "]", "\n", "num_fmaps", "=", "features", "[", "next", "(", "iter", "(", "self", ".", "post_ft", ")", ")", "]", ".", "shape", "[", "0", "]", "\n", "if", "num_targets", ">", "num_fmaps", ":", "\n", "            ", "multi_targets", "=", "True", "\n", "", "else", ":", "\n", "            ", "multi_targets", "=", "False", "\n", "\n", "", "x", "=", "None", "\n", "\n", "if", "gate", "==", "0", ":", "\n", "            ", "for", "L", "in", "(", "self", ".", "prev_ft", ")", ":", "\n", "                ", "ft", "=", "features", "[", "L", "]", "\n", "s", "=", "interpolate", "(", "scores", ",", "ft", ".", "shape", "[", "-", "2", ":", "]", ")", "# Resample scores to match features size", "\n", "\n", "if", "multi_targets", ":", "\n", "                    ", "h", ",", "hpool", "=", "self", ".", "TSE", "[", "L", "]", "(", "ft", ".", "repeat", "(", "num_targets", ",", "1", ",", "1", ",", "1", ")", ",", "s", ",", "x", ")", "\n", "", "else", ":", "\n", "                    ", "h", ",", "hpool", "=", "self", ".", "TSE", "[", "L", "]", "(", "ft", ",", "s", ",", "x", ")", "\n", "\n", "", "h", "=", "self", ".", "RRB1", "[", "L", "]", "(", "h", ")", "\n", "h", "=", "self", ".", "CAB", "[", "L", "]", "(", "hpool", ",", "h", ")", "\n", "x", "=", "self", ".", "RRB2", "[", "L", "]", "(", "h", ")", "\n", "", "prevX", "=", "x", ".", "clone", "(", ")", "\n", "\n", "for", "L", "in", "(", "self", ".", "post_ft", ")", ":", "\n", "                ", "ft", "=", "features", "[", "L", "]", "\n", "s", "=", "interpolate", "(", "scores", ",", "ft", ".", "shape", "[", "-", "2", ":", "]", ")", "# Resample scores to match features size", "\n", "\n", "if", "multi_targets", ":", "\n", "                    ", "h", ",", "hpool", "=", "self", ".", "TSE", "[", "L", "]", "(", "ft", ".", "repeat", "(", "num_targets", ",", "1", ",", "1", ",", "1", ")", ",", "s", ",", "x", ")", "\n", "", "else", ":", "\n", "                    ", "h", ",", "hpool", "=", "self", ".", "TSE", "[", "L", "]", "(", "ft", ",", "s", ",", "x", ")", "\n", "\n", "", "h", "=", "self", ".", "RRB1", "[", "L", "]", "(", "h", ")", "\n", "h", "=", "self", ".", "CAB", "[", "L", "]", "(", "hpool", ",", "h", ")", "\n", "x", "=", "self", ".", "RRB2", "[", "L", "]", "(", "h", ")", "\n", "", "x_proj", "=", "self", ".", "project", "(", "x", ",", "image_size", ")", "\n", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "Diff_process", "(", "prevX", ",", "Diff", ")", "# Re-align prevX to curr", "\n", "\n", "for", "L", "in", "(", "self", ".", "post_ft", ")", ":", "\n", "                ", "ft", "=", "features", "[", "L", "]", "\n", "s", "=", "interpolate", "(", "scores", ",", "ft", ".", "shape", "[", "-", "2", ":", "]", ")", "# Resample scores to match features size", "\n", "\n", "if", "multi_targets", ":", "\n", "                    ", "h", ",", "hpool", "=", "self", ".", "TSE", "[", "L", "]", "(", "ft", ".", "repeat", "(", "num_targets", ",", "1", ",", "1", ",", "1", ")", ",", "s", ",", "x", ")", "\n", "", "else", ":", "\n", "                    ", "h", ",", "hpool", "=", "self", ".", "TSE", "[", "L", "]", "(", "ft", ",", "s", ",", "x", ")", "\n", "\n", "", "h", "=", "self", ".", "RRB1", "[", "L", "]", "(", "h", ")", "\n", "h", "=", "self", ".", "CAB", "[", "L", "]", "(", "hpool", ",", "h", ")", "\n", "x", "=", "self", ".", "RRB2", "[", "L", "]", "(", "h", ")", "\n", "", "x_proj", "=", "self", ".", "project", "(", "x", ",", "image_size", ")", "\n", "\n", "", "return", "x_proj", ",", "prevX", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.seg_network.SegNetwork.Test_Init": [[313, 337], ["lib.utils.interpolate", "ft.repeat", "next", "iter"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.interpolate"], ["", "def", "Test_Init", "(", "self", ",", "scores", ",", "features", ")", ":", "\n", "        ", "num_targets", "=", "scores", ".", "shape", "[", "0", "]", "\n", "num_fmaps", "=", "features", "[", "next", "(", "iter", "(", "self", ".", "ft_channels", ")", ")", "]", ".", "shape", "[", "0", "]", "\n", "if", "num_targets", ">", "num_fmaps", ":", "\n", "            ", "multi_targets", "=", "True", "\n", "", "else", ":", "\n", "            ", "multi_targets", "=", "False", "\n", "\n", "", "x", "=", "None", "\n", "\n", "for", "L", "in", "(", "self", ".", "prev_ft", ")", ":", "\n", "            ", "ft", "=", "features", "[", "L", "]", "\n", "s", "=", "interpolate", "(", "scores", ",", "ft", ".", "shape", "[", "-", "2", ":", "]", ")", "# Resample scores to match features size", "\n", "\n", "if", "multi_targets", ":", "\n", "                ", "h", ",", "hpool", "=", "self", ".", "TSE", "[", "L", "]", "(", "ft", ".", "repeat", "(", "num_targets", ",", "1", ",", "1", ",", "1", ")", ",", "s", ",", "x", ")", "\n", "", "else", ":", "\n", "                ", "h", ",", "hpool", "=", "self", ".", "TSE", "[", "L", "]", "(", "ft", ",", "s", ",", "x", ")", "\n", "\n", "", "h", "=", "self", ".", "RRB1", "[", "L", "]", "(", "h", ")", "\n", "h", "=", "self", ".", "CAB", "[", "L", "]", "(", "hpool", ",", "h", ")", "\n", "x", "=", "self", ".", "RRB2", "[", "L", "]", "(", "h", ")", "\n", "\n", "", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.__init__": [[9, 33], ["super().__init__", "feature_extractor.ResnetFeatureExtractor.resnet.parameters", "feature_extractor.ResnetFeatureExtractor.resnet.eval", "collections.OrderedDict", "torch.tensor().reshape", "torch.tensor().reshape", "lib.utils.get_out_channels", "lib.utils.get_out_channels", "lib.utils.get_out_channels", "lib.utils.get_out_channels", "lib.utils.get_out_channels", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.get_out_channels", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.get_out_channels", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.get_out_channels", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.get_out_channels", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.get_out_channels"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "'resnet101'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "networks", "=", "{", "\"resnet18\"", ":", "resnet18", ",", "\"resnet34\"", ":", "resnet34", ",", "\"resnet50\"", ":", "resnet50", ",", "\"resnet101\"", ":", "resnet101", "}", "\n", "\n", "self", ".", "resnet", "=", "networks", "[", "name", "]", "(", "pretrained", "=", "True", ")", "\n", "del", "self", ".", "resnet", ".", "avgpool", ",", "self", ".", "resnet", ".", "fc", "\n", "for", "m", "in", "self", ".", "resnet", ".", "parameters", "(", ")", ":", "\n", "            ", "m", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "resnet", ".", "eval", "(", ")", "\n", "\n", "self", ".", "_out_channels", "=", "odict", "(", "# Deep-to-shallow order is required by SegNetwork", "\n", "layer5", "=", "get_out_channels", "(", "self", ".", "resnet", ".", "layer4", ")", ",", "\n", "layer4", "=", "get_out_channels", "(", "self", ".", "resnet", ".", "layer3", ")", ",", "\n", "layer3", "=", "get_out_channels", "(", "self", ".", "resnet", ".", "layer2", ")", ",", "\n", "layer2", "=", "get_out_channels", "(", "self", ".", "resnet", ".", "layer1", ")", ",", "\n", "layer1", "=", "get_out_channels", "(", "self", ".", "resnet", ".", "conv1", ")", ")", "\n", "\n", "maxval", "=", "255", "\n", "stds", "=", "torch", ".", "tensor", "(", "(", "0.229", ",", "0.224", ",", "0.225", ")", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "False", ")", ".", "reshape", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "means", "=", "torch", ".", "tensor", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "False", ")", ".", "reshape", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "self", ".", "norm_weight", "=", "(", "1", "/", "maxval", "/", "stds", ")", "\n", "self", ".", "norm_bias", "=", "(", "-", "means", "/", "stds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to": [[34, 39], ["feature_extractor.ResnetFeatureExtractor.resnet.to", "feature_extractor.ResnetFeatureExtractor.norm_weight.to", "feature_extractor.ResnetFeatureExtractor.norm_bias.to"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "resnet", ".", "to", "(", "device", ")", "\n", "self", ".", "norm_weight", "=", "self", ".", "norm_weight", ".", "to", "(", "device", ")", "\n", "self", ".", "norm_bias", "=", "self", ".", "norm_bias", ".", "to", "(", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.__call__": [[40, 75], ["dict", "feature_extractor.ResnetFeatureExtractor.resnet.conv1", "feature_extractor.ResnetFeatureExtractor.resnet.bn1", "feature_extractor.ResnetFeatureExtractor.resnet.relu", "feature_extractor.ResnetFeatureExtractor.resnet.maxpool", "feature_extractor.ResnetFeatureExtractor.__call__.save_out"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.relu"], ["", "def", "__call__", "(", "self", ",", "input", ",", "output_layers", "=", "None", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "norm_weight", "*", "input", ".", "float", "(", ")", "+", "self", ".", "norm_bias", "\n", "\n", "out", "=", "dict", "(", ")", "\n", "\n", "def", "save_out", "(", "L", ",", "x", ")", ":", "\n", "            ", "if", "output_layers", "is", "None", "or", "L", "in", "output_layers", ":", "\n", "                ", "out", "[", "L", "]", "=", "x", "\n", "# t1=time()", "\n", "", "", "x", "=", "self", ".", "resnet", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "resnet", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "resnet", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "resnet", ".", "maxpool", "(", "x", ")", "\n", "save_out", "(", "'layer1'", ",", "x", ")", "\n", "# t2=time()", "\n", "\n", "x", "=", "self", ".", "resnet", ".", "layer1", "(", "x", ")", "\n", "save_out", "(", "'layer2'", ",", "x", ")", "\n", "# t3=time()", "\n", "\n", "x", "=", "self", ".", "resnet", ".", "layer2", "(", "x", ")", "\n", "save_out", "(", "'layer3'", ",", "x", ")", "\n", "# t4=time()", "\n", "\n", "x", "=", "self", ".", "resnet", ".", "layer3", "(", "x", ")", "\n", "save_out", "(", "'layer4'", ",", "x", ")", "\n", "# t5=time()", "\n", "\n", "x", "=", "self", ".", "resnet", ".", "layer4", "(", "x", ")", "\n", "save_out", "(", "'layer5'", ",", "x", ")", "\n", "# t6=time()", "\n", "\n", "# print(t6-t5,t5-t4,t4-t3,t3-t2,t2-t1)", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.get_out_channels": [[76, 78], ["None"], "methods", ["None"], ["", "def", "get_out_channels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_out_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.get_F8": [[79, 103], ["dict", "feature_extractor.ResnetFeatureExtractor.resnet.conv1", "feature_extractor.ResnetFeatureExtractor.resnet.bn1", "feature_extractor.ResnetFeatureExtractor.resnet.relu", "feature_extractor.ResnetFeatureExtractor.resnet.maxpool", "feature_extractor.ResnetFeatureExtractor.__call__.save_out"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.relu"], ["", "def", "get_F8", "(", "self", ",", "input", ",", "output_layers", "=", "None", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "norm_weight", "*", "input", ".", "float", "(", ")", "+", "self", ".", "norm_bias", "\n", "out", "=", "dict", "(", ")", "\n", "\n", "def", "save_out", "(", "L", ",", "x", ")", ":", "\n", "            ", "if", "output_layers", "is", "None", "or", "L", "in", "output_layers", ":", "\n", "                ", "out", "[", "L", "]", "=", "x", "\n", "\n", "\n", "", "", "x", "=", "self", ".", "resnet", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "resnet", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "resnet", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "resnet", ".", "maxpool", "(", "x", ")", "\n", "save_out", "(", "'layer1'", ",", "x", ")", "\n", "\n", "x", "=", "self", ".", "resnet", ".", "layer1", "(", "x", ")", "\n", "save_out", "(", "'layer2'", ",", "x", ")", "\n", "\n", "x", "=", "self", ".", "resnet", ".", "layer2", "(", "x", ")", "\n", "save_out", "(", "'layer3'", ",", "x", ")", "\n", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.get_F32": [[104, 117], ["dict", "feature_extractor.ResnetFeatureExtractor.resnet.layer3", "feature_extractor.ResnetFeatureExtractor.__call__.save_out"], "methods", ["None"], ["", "def", "get_F32", "(", "self", ",", "x", ",", "output_layers", "=", "None", ")", ":", "\n", "\n", "        ", "out", "=", "dict", "(", ")", "\n", "def", "save_out", "(", "L", ",", "x", ")", ":", "\n", "            ", "if", "output_layers", "is", "None", "or", "L", "in", "output_layers", ":", "\n", "                ", "out", "[", "L", "]", "=", "x", "\n", "\n", "", "", "x", "=", "self", ".", "resnet", ".", "layer3", "(", "x", ")", "\n", "save_out", "(", "'layer4'", ",", "x", ")", "\n", "\n", "x", "=", "self", ".", "resnet", ".", "layer4", "(", "x", ")", "\n", "save_out", "(", "'layer5'", ",", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.no_grad_forward": [[118, 133], ["torch.no_grad", "feature_extractor.ResnetFeatureExtractor.", "feature_extractor.ResnetFeatureExtractor.", "torch.cat", "torch.split"], "methods", ["None"], ["", "def", "no_grad_forward", "(", "self", ",", "input", ",", "output_layers", "=", "None", ",", "chunk_size", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param input:\n        :param output_layers:  List of layer names (layer1 ...) to keep\n        :param chunk_size:  [Optional] Split the batch into chunks of this size\n                            and process them sequentially to save memory.\n        :return: dict of output tensors\n        \"\"\"", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "chunk_size", "is", "None", ":", "\n", "                ", "return", "self", "(", "input", ",", "output_layers", ")", "\n", "", "else", ":", "\n", "                ", "outputs", "=", "[", "self", "(", "t", ",", "output_layers", ")", "for", "t", "in", "torch", ".", "split", "(", "input", ",", "chunk_size", ")", "]", "\n", "return", "{", "L", ":", "torch", ".", "cat", "(", "[", "out", "[", "L", "]", "for", "out", "in", "outputs", "]", ")", "for", "L", "in", "outputs", "[", "0", "]", "}", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.GumbelModule.GumbleSoftmax.__init__": [[14, 18], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hard", "=", "False", ")", ":", "\n", "        ", "super", "(", "GumbleSoftmax", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hard", "=", "hard", "\n", "self", ".", "gpu", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.GumbelModule.GumbleSoftmax.cuda": [[19, 21], ["None"], "methods", ["None"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "gpu", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.GumbelModule.GumbleSoftmax.cpu": [[22, 24], ["None"], "methods", ["None"], ["", "def", "cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "gpu", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.GumbelModule.GumbleSoftmax.sample_gumbel": [[25, 34], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand.add_().log_().neg_", "torch.rand.add_().log_().neg_", "torch.rand.add_().log_().neg_", "torch.rand.add_().log_().neg_", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.rand.add_().log_", "torch.rand.add_().log_", "torch.rand.add_().log_", "torch.rand.add_().log_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.rand.add_", "torch.rand.add_", "torch.rand.add_", "torch.rand.add_"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.GumbelModule.GumbleSoftmax.cuda", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.GumbelModule.GumbleSoftmax.cuda"], ["", "def", "sample_gumbel", "(", "self", ",", "shape", ",", "eps", "=", "1e-10", ")", ":", "\n", "        ", "\"\"\"Sample from Gumbel(0, 1)\"\"\"", "\n", "noise", "=", "torch", ".", "rand", "(", "shape", ")", "\n", "noise", ".", "add_", "(", "eps", ")", ".", "log_", "(", ")", ".", "neg_", "(", ")", "\n", "noise", ".", "add_", "(", "eps", ")", ".", "log_", "(", ")", ".", "neg_", "(", ")", "\n", "if", "self", ".", "gpu", ":", "\n", "            ", "return", "Variable", "(", "noise", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "Variable", "(", "noise", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.GumbelModule.GumbleSoftmax.sample_gumbel_like": [[35, 39], ["template_tensor.clone().uniform_", "torch.log", "torch.log", "torch.log", "torch.log", "template_tensor.clone", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "", "def", "sample_gumbel_like", "(", "self", ",", "template_tensor", ",", "eps", "=", "1e-10", ")", ":", "\n", "        ", "uniform_samples_tensor", "=", "template_tensor", ".", "clone", "(", ")", ".", "uniform_", "(", ")", "\n", "gumble_samples_tensor", "=", "-", "torch", ".", "log", "(", "eps", "-", "torch", ".", "log", "(", "uniform_samples_tensor", "+", "eps", ")", ")", "\n", "return", "gumble_samples_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.GumbelModule.GumbleSoftmax.gumbel_softmax_sample": [[40, 46], ["torch.softmax", "torch.softmax", "len", "logits.size"], "methods", ["None"], ["", "def", "gumbel_softmax_sample", "(", "self", ",", "logits", ",", "temperature", ")", ":", "\n", "        ", "\"\"\" Draw a fixed sample from the Gumbel-Softmax trick\"\"\"", "\n", "dim", "=", "len", "(", "logits", ".", "size", "(", ")", ")", "-", "1", "\n", "gumble_trick_log_prob_samples", "=", "logits", "# + Variable(gumble_samples_tensor)", "\n", "soft_samples", "=", "F", ".", "softmax", "(", "gumble_trick_log_prob_samples", "/", "temperature", ",", "dim", ")", "\n", "return", "soft_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.GumbelModule.GumbleSoftmax.gumbel_softmax": [[47, 64], ["GumbelModule.GumbleSoftmax.gumbel_softmax_sample", "GumbelModule.GumbleSoftmax.data.max", "logits.data.clone().zero_().scatter_", "torch.softmax", "torch.softmax", "torch.autograd.Variable", "torch.autograd.Variable", "logits.data.clone().zero_", "len", "logits.data.clone", "logits.size"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.GumbelModule.GumbleSoftmax.gumbel_softmax_sample"], ["", "def", "gumbel_softmax", "(", "self", ",", "logits", ",", "temperature", ",", "hard", "=", "False", ")", ":", "\n", "        ", "\"\"\"Sample from the Gumbel-Softmax distribution and optionally discretize.\n        Args:\n        logits: [batch_size, n_class] unnormalized log-probs\n        temperature: non-negative scalar\n        hard: if True, take argmax, but differentiate w.r.t. soft sample y\n        Returns:\n        [batch_size, n_class] sample from the Gumbel-Softmax distribution.\n        If hard=True, then the returned sample will be one-hot, otherwise it will\n        be a probabilitiy distribution that sums to 1 across classes\n        \"\"\"", "\n", "y", "=", "self", ".", "gumbel_softmax_sample", "(", "logits", ",", "temperature", ")", "\n", "if", "hard", ":", "\n", "            ", "_", ",", "max_value_indexes", "=", "y", ".", "data", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "y_hard", "=", "logits", ".", "data", ".", "clone", "(", ")", ".", "zero_", "(", ")", ".", "scatter_", "(", "1", ",", "max_value_indexes", ",", "1", ")", "\n", "y", "=", "Variable", "(", "y_hard", "-", "y", ".", "data", ")", "+", "y", "\n", "", "return", "y", ",", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "len", "(", "logits", ".", "size", "(", ")", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.GumbelModule.GumbleSoftmax.forward": [[65, 72], ["logits.size", "GumbelModule.GumbleSoftmax.gumbel_softmax", "GumbelModule.GumbleSoftmax.gumbel_softmax"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.GumbelModule.GumbleSoftmax.gumbel_softmax", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.GumbelModule.GumbleSoftmax.gumbel_softmax"], ["", "def", "forward", "(", "self", ",", "logits", ",", "temp", "=", "1", ",", "force_hard", "=", "True", ")", ":", "\n", "        ", "samplesize", "=", "logits", ".", "size", "(", ")", "\n", "\n", "if", "self", ".", "training", "and", "not", "force_hard", ":", "\n", "            ", "return", "self", ".", "gumbel_softmax", "(", "logits", ",", "temperature", "=", "1", ",", "hard", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "gumbel_softmax", "(", "logits", ",", "temperature", "=", "1", ",", "hard", "=", "True", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.tracker.TargetObject.__init__": [[22, 33], ["discriminator.Discriminator", "kwargs.items", "setattr"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items"], ["    ", "def", "__init__", "(", "self", ",", "obj_id", ",", "disc_params", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "object_id", "=", "obj_id", "\n", "self", ".", "discriminator", "=", "Discriminator", "(", "**", "disc_params", ")", "\n", "self", ".", "disc_layer", "=", "disc_params", ".", "layer", "\n", "self", ".", "start_frame", "=", "None", "\n", "self", ".", "start_mask", "=", "None", "\n", "self", ".", "index", "=", "-", "1", "\n", "\n", "for", "key", ",", "val", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.tracker.TargetObject.initialize": [[34, 36], ["tracker.TargetObject.discriminator.init"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.discriminator.Discriminator.init"], ["", "", "def", "initialize", "(", "self", ",", "ft", ",", "mask", ")", ":", "\n", "        ", "self", ".", "discriminator", ".", "init", "(", "ft", "[", "self", ".", "disc_layer", "]", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.tracker.TargetObject.classify": [[37, 39], ["tracker.TargetObject.discriminator.apply"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.discriminator.Discriminator.apply"], ["", "def", "classify", "(", "self", ",", "ft", ")", ":", "\n", "        ", "return", "self", ".", "discriminator", ".", "apply", "(", "ft", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.tracker.Tracker.__init__": [[43, 96], ["torch.Module.__init__", "tracker.Tracker.refiner.parameters", "tracker.Tracker.refiner.eval", "tracker.Tracker.convGS.parameters", "tracker.Tracker.convGS.eval", "tracker.Tracker.Tmatching.parameters", "tracker.Tracker.Tmatching.eval", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "tracker.Tracker.Convert_Diff.parameters", "tracker.Tracker.Convert_Diff.eval", "m.requires_grad_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "GumbelModule.GumbleSoftmax", "m.requires_grad_", "m.requires_grad_", "m.requires_grad_", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__"], ["    ", "def", "__init__", "(", "self", ",", "augmenter", ":", "ImageAugmenter", ",", "feature_extractor", ",", "disc_params", ",", "Tmatching", ":", "LongtermTemplate", ",", "\n", "Tmat_params", ",", "refiner", ":", "SegNetwork", ",", "device", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "augmenter", "=", "augmenter", "\n", "self", ".", "augment", "=", "augmenter", ".", "augment_first_frame", "\n", "self", ".", "disc_params", "=", "disc_params", "\n", "self", ".", "feature_extractor", "=", "feature_extractor", "\n", "\n", "self", ".", "refiner", "=", "refiner", "\n", "for", "m", "in", "self", ".", "refiner", ".", "parameters", "(", ")", ":", "\n", "            ", "m", ".", "requires_grad_", "(", "False", ")", "\n", "", "self", ".", "refiner", ".", "eval", "(", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "first_frames", "=", "[", "]", "\n", "self", ".", "current_frame", "=", "0", "\n", "self", ".", "current_masks", "=", "None", "\n", "self", ".", "num_objects", "=", "0", "\n", "\n", "self", ".", "Tmat_params", "=", "Tmat_params", "\n", "self", ".", "gateF", "=", "self", ".", "Tmat_params", ".", "gateF", "\n", "if", "self", ".", "gateF", ":", "\n", "            ", "fc1", "=", "nn", ".", "Conv2d", "(", "Tmat_params", ".", "Tmat_out", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "fc1bn", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "fc2", "=", "nn", ".", "Conv2d", "(", "16", ",", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "# initialize the bias of the last fc for", "\n", "# initial opening rate of the gate of about 85%", "\n", "# fc2.bias.data[0] = 0.1", "\n", "# fc2.bias.data[1] = 2", "\n", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "torch", ".", "nn", ".", "AdaptiveMaxPool2d", "(", "7", ")", ")", "\n", "layers", ".", "append", "(", "fc1", ")", "\n", "layers", ".", "append", "(", "fc1bn", ")", "\n", "layers", ".", "append", "(", "torch", ".", "nn", ".", "AdaptiveMaxPool2d", "(", "3", ")", ")", "\n", "layers", ".", "append", "(", "fc2", ")", "\n", "self", ".", "convGS", "=", "torch", ".", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "gSelect", "=", "GumbleSoftmax", "(", "hard", "=", "True", ")", "\n", "", "for", "m", "in", "self", ".", "convGS", ".", "parameters", "(", ")", ":", "\n", "            ", "m", ".", "requires_grad_", "(", "False", ")", "\n", "", "self", ".", "convGS", ".", "eval", "(", ")", "\n", "\n", "self", ".", "Tmatching", "=", "Tmatching", "\n", "for", "m", "in", "self", ".", "Tmatching", ".", "parameters", "(", ")", ":", "\n", "            ", "m", ".", "requires_grad_", "(", "False", ")", "\n", "", "self", ".", "Tmatching", ".", "eval", "(", ")", "\n", "\n", "self", ".", "Convert_Diff", "=", "nn", ".", "Conv2d", "(", "Tmat_params", ".", "Tmat_out", ",", "1", ",", "3", ",", "2", ",", "1", ")", "\n", "for", "m", "in", "self", ".", "Convert_Diff", ".", "parameters", "(", ")", ":", "\n", "            ", "m", ".", "requires_grad_", "(", "False", ")", "\n", "", "self", ".", "Convert_Diff", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.tracker.Tracker.clear": [[97, 103], ["torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "first_frames", "=", "[", "]", "\n", "self", ".", "current_frame", "=", "0", "\n", "self", ".", "current_masks", "=", "None", "\n", "self", ".", "num_objects", "=", "0", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.tracker.Tracker.run_dataset": [[105, 153], ["out_path.mkdir", "lib.utils.AverageMeter", "print", "print", "print", "sequence.preload", "tracker.Tracker.clear", "tracker.Tracker.run_sequence", "lib.utils.AverageMeter.update", "dst.mkdir", "zip", "range", "lib.image.imwrite_indexed", "len"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.datasets.FileSequence.preload", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.clear", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.tracker.Tracker.run_sequence", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.update", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.image.imwrite_indexed"], ["", "def", "run_dataset", "(", "self", ",", "dataset", ",", "out_path", ",", "speedrun", "=", "False", ",", "restart", "=", "None", ",", "this_th", "=", "0.7", ")", ":", "\n", "        ", "\"\"\"\n        :param dataset:   Dataset to work with (See datasets.py)\n        :param out_path:  Root path for storing label images. Sequences of label pngs will be created in subdirectories.\n        :param speedrun:  [Optional] Whether or not to warm up Pytorch when measuring the run time. Default: False\n        :param restart:   [Optional] Name of sequence to restart from. Useful for debugging. Default: None\n        \"\"\"", "\n", "out_path", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "\n", "dset_fps", "=", "AverageMeter", "(", ")", "\n", "\n", "print", "(", "'Evaluating'", ",", "dataset", ".", "name", ")", "\n", "avg_open", ",", "N", "=", "0", ",", "0", "\n", "restarted", "=", "False", "\n", "for", "sequence", "in", "dataset", ":", "\n", "            ", "if", "restart", "is", "not", "None", "and", "not", "restarted", ":", "\n", "                ", "if", "sequence", ".", "name", "!=", "restart", ":", "\n", "                    ", "continue", "\n", "", "restarted", "=", "True", "\n", "\n", "# We preload data as we cannot both read from disk and upload to the GPU in the background,", "\n", "# which would be a reasonable thing to do. However, in PyTorch, it is hard or impossible", "\n", "# to upload images to the GPU in a data loader running as a separate process.", "\n", "", "sequence", ".", "preload", "(", "self", ".", "device", ")", "\n", "self", ".", "clear", "(", ")", "# Mitigate out-of-memory that may occur on some YouTubeVOS sequences on 11GB devices.", "\n", "outputs", ",", "seq_fps", ",", "count_gate", ",", "scores", "=", "self", ".", "run_sequence", "(", "sequence", ",", "speedrun", ",", "this_th", "=", "this_th", ")", "\n", "dset_fps", ".", "update", "(", "seq_fps", ")", "\n", "\n", "dst", "=", "out_path", "/", "sequence", ".", "name", "\n", "dst", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "idx", "=", "0", "\n", "for", "lb", ",", "f", "in", "zip", "(", "outputs", ",", "sequence", ".", "frame_names", ")", ":", "\n", "                ", "imwrite_indexed", "(", "dst", "/", "(", "f", "+", "\".png\"", ")", ",", "lb", ")", "\n", "# if idx >0:", "\n", "#     for obj in range(len(scores[idx-1])):", "\n", "#         this_s = scores[idx-1][obj]", "\n", "#         im = Image.fromarray(this_s, 'P')", "\n", "#         im.save(dst / (f + \"_\" +str(obj)+\".png\"))", "\n", "\n", "idx", "+=", "1", "\n", "", "for", "i", "in", "range", "(", "len", "(", "count_gate", ")", ")", ":", "\n", "                ", "avg_open", "+=", "count_gate", "[", "i", "]", "\n", "N", "+=", "1", "\n", "\n", "\n", "", "", "print", "(", "\"Average frame rate: %.2f fps\"", "%", "dset_fps", ".", "avg", ")", "\n", "print", "(", "\"Total obj {} reuse Rate {} from {}\"", ".", "format", "(", "N", ",", "avg_open", "/", "N", ",", "avg_open", ")", ")", "\n", "return", "dset_fps", ".", "avg", ",", "avg_open", "/", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.tracker.Tracker.run_sequence": [[154, 241], ["tracker.Tracker.eval", "dict", "dict", "dict", "dict", "dict", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "dict", "dict", "time.time.time", "tqdm.tqdm", "dict.items", "image.to.to.to", "image.to.new_zeros.to", "tracker.Tracker.initialize", "tracker.Tracker.track", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "dict", "dict", "dict", "dict", "dict", "enumerate", "set", "image.to.to.to", "tracker.Tracker.gate_result.items", "outputs.append", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time.time", "print", "avg_gate.append", "len", "tracker.Tracker.targets.keys", "len", "image.to.new_zeros.to", "tracker.Tracker.initialize", "len", "tracker.Tracker.track", "out_score.append", "isinstance", "image.to.to.new_zeros", "len", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.softmax", "torch.softmax", "torch.softmax", "len", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.softmax.argmax"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.initialize", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.tracker.Tracker.track", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.initialize", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.tracker.Tracker.track"], ["", "def", "run_sequence", "(", "self", ",", "sequence", ",", "speedrun", "=", "False", ",", "this_th", "=", "0.3", ")", ":", "\n", "        ", "\"\"\"\n        :param sequence:  FileSequence to run.\n        :param speedrun:  Only for DAVIS 2016: If True, let pytorch initialize its buffers in advance\n                          to not incorrectly measure the memory allocation time in the first frame.\n        :return:\n        \"\"\"", "\n", "\n", "self", ".", "eval", "(", ")", "\n", "self", ".", "object_ids", "=", "sequence", ".", "obj_ids", "\n", "self", ".", "current_frame", "=", "0", "\n", "self", ".", "targets", "=", "dict", "(", ")", "\n", "\n", "self", ".", "Templates", "=", "dict", "(", ")", "\n", "self", ".", "gate_result", "=", "dict", "(", ")", "\n", "self", ".", "prev_score", "=", "dict", "(", ")", "\n", "self", ".", "prevRefine", "=", "dict", "(", ")", "\n", "\n", "N", "=", "0", "\n", "\n", "object_ids", "=", "torch", ".", "tensor", "(", "[", "0", "]", "+", "sequence", ".", "obj_ids", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "self", ".", "device", ")", "# Mask -> labels LUT", "\n", "count_gate", "=", "dict", "(", ")", "\n", "count_frame", "=", "dict", "(", ")", "\n", "if", "speedrun", ":", "\n", "            ", "image", ",", "labels", ",", "obj_ids", "=", "sequence", "[", "0", "]", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "initialize", "(", "image", ",", "labels", ",", "sequence", ".", "obj_ids", ")", "# Assume DAVIS 2016", "\n", "self", ".", "track", "(", "image", ",", "this_th", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "self", ".", "targets", "=", "dict", "(", ")", "\n", "\n", "self", ".", "Templates", "=", "dict", "(", ")", "\n", "self", ".", "gate_result", "=", "dict", "(", ")", "\n", "self", ".", "prev_score", "=", "dict", "(", ")", "\n", "self", ".", "prevRefine", "=", "dict", "(", ")", "\n", "\n", "", "outputs", "=", "[", "]", "\n", "t0", "=", "time", "(", ")", "\n", "out_score", "=", "[", "]", "\n", "for", "i", ",", "(", "image", ",", "labels", ",", "new_objects", ")", "in", "tqdm", ".", "tqdm", "(", "enumerate", "(", "sequence", ")", ",", "desc", "=", "sequence", ".", "name", ",", "total", "=", "len", "(", "sequence", ")", ",", "unit", "=", "'frames'", ")", ":", "\n", "\n", "            ", "old_objects", "=", "set", "(", "self", ".", "targets", ".", "keys", "(", ")", ")", "\n", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "len", "(", "new_objects", ")", ">", "0", ":", "\n", "                ", "labels", "=", "labels", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "initialize", "(", "image", ",", "labels", ",", "new_objects", ")", "\n", "\n", "", "if", "len", "(", "old_objects", ")", ">", "0", ":", "\n", "                ", "_", ",", "scores", "=", "self", ".", "track", "(", "image", ",", "this_th", ")", "\n", "out_score", ".", "append", "(", "scores", ")", "\n", "\n", "masks", "=", "self", ".", "current_masks", "\n", "if", "len", "(", "sequence", ".", "obj_ids", ")", "==", "1", ":", "\n", "                    ", "labels", "=", "object_ids", "[", "(", "masks", "[", "1", ":", "2", "]", ">", "0.5", ")", ".", "long", "(", ")", "]", "\n", "", "else", ":", "\n", "                    ", "masks", "=", "torch", ".", "clamp", "(", "masks", ",", "1e-7", ",", "1", "-", "1e-7", ")", "\n", "masks", "[", "0", ":", "1", "]", "=", "torch", ".", "min", "(", "(", "1", "-", "masks", "[", "1", ":", "]", ")", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "[", "0", "]", "# background activation", "\n", "segs", "=", "F", ".", "softmax", "(", "masks", "/", "(", "1", "-", "masks", ")", ",", "dim", "=", "0", ")", "# s = one-hot encoded object activations", "\n", "labels", "=", "object_ids", "[", "segs", ".", "argmax", "(", "dim", "=", "0", ")", "]", "\n", "\n", "", "", "if", "isinstance", "(", "labels", ",", "list", ")", "and", "len", "(", "labels", ")", "==", "0", ":", "# No objects yet", "\n", "                ", "labels", "=", "image", ".", "new_zeros", "(", "1", ",", "*", "image", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "self", ".", "gate_result", ".", "items", "(", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "count_gate", "[", "k", "]", "=", "count_gate", "[", "k", "]", "+", "v", "\n", "count_frame", "[", "k", "]", "=", "count_frame", "[", "k", "]", "+", "1", "\n", "", "except", ":", "\n", "                    ", "count_gate", "[", "k", "]", "=", "v", "\n", "count_frame", "[", "k", "]", "=", "1", "\n", "\n", "\n", "", "", "outputs", ".", "append", "(", "labels", ")", "\n", "self", ".", "current_frame", "+=", "1", "\n", "N", "+=", "1", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "", "T", "=", "time", "(", ")", "-", "t0", "\n", "fps", "=", "N", "/", "T", "\n", "avg_gate", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "count_gate", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "\"{} th obj open percent {}\"", ".", "format", "(", "k", ",", "count_gate", "[", "k", "]", "/", "count_frame", "[", "k", "]", ")", ")", "\n", "avg_gate", ".", "append", "(", "count_gate", "[", "k", "]", "/", "count_frame", "[", "k", "]", ")", "\n", "\n", "", "return", "outputs", ",", "fps", ",", "avg_gate", ",", "out_score", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.tracker.Tracker.initialize": [[242, 286], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "ft8.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tracker.Tracker.feature_extractor", "tracker.TargetObject", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "numpy.random.seed", "tracker.Tracker.augment", "tracker.TargetObject.initialize", "mask.unsqueeze.unsqueeze.unsqueeze", "tracker.Tracker.Tmatching", "ft[].size", "tracker.TargetObject.classify", "tracker.Tracker.refiner.Test_Init", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tracker.Tracker.feature_extractor", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "mask.unsqueeze.unsqueeze.float", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "mask.unsqueeze.unsqueeze.float", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.initialize", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TargetObject.classify", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.seg_network.SegNetwork.Test_Init"], ["", "def", "initialize", "(", "self", ",", "image", ",", "labels", ",", "new_objects", ")", ":", "\n", "\n", "        ", "self", ".", "current_masks", "=", "torch", ".", "zeros", "(", "(", "len", "(", "self", ".", "targets", ")", "+", "len", "(", "new_objects", ")", "+", "1", ",", "*", "image", ".", "shape", "[", "-", "2", ":", "]", ")", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "ft", "=", "self", ".", "feature_extractor", "(", "image", ")", "\n", "", "ft8", "=", "ft", "[", "self", ".", "Tmat_params", ".", "layer", "]", "\n", "ft16", "=", "ft", "[", "self", ".", "disc_params", ".", "layer", "]", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "ft8", ".", "size", "(", ")", "\n", "self", ".", "H8", ",", "self", ".", "W8", "=", "H", ",", "W", "\n", "\n", "for", "obj_id", "in", "new_objects", ":", "\n", "# Create target", "\n", "\n", "            ", "mask", "=", "(", "labels", "==", "obj_id", ")", ".", "byte", "(", ")", "\n", "target", "=", "TargetObject", "(", "obj_id", "=", "obj_id", ",", "index", "=", "len", "(", "self", ".", "targets", ")", "+", "1", ",", "disc_params", "=", "self", ".", "disc_params", ",", "\n", "start_frame", "=", "self", ".", "current_frame", ",", "start_mask", "=", "mask", ")", "\n", "self", ".", "targets", "[", "obj_id", "]", "=", "target", "\n", "if", "obj_id", "!=", "target", ".", "index", ":", "\n", "                ", "print", "(", "\"obj_id: {} , target_index: {}\"", ".", "format", "(", "obj_id", ",", "target", ".", "index", ")", ")", "\n", "", "self", ".", "gate_result", "[", "obj_id", "]", "=", "1", "\n", "\n", "# HACK for debugging", "\n", "torch", ".", "random", ".", "manual_seed", "(", "0", ")", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n", "# Augment first image and extract features", "\n", "\n", "im", ",", "msk", "=", "self", ".", "augment", "(", "image", ",", "mask", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "ft_disc", "=", "self", ".", "feature_extractor", "(", "im", ")", "\n", "", "target", ".", "initialize", "(", "ft_disc", ",", "msk", ")", "\n", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", "\n", "prev_seg8", "=", "torch", ".", "nn", ".", "Upsample", "(", "size", "=", "(", "self", ".", "H8", ",", "self", ".", "W8", ")", ",", "mode", "=", "'nearest'", ")", "(", "mask", ".", "float", "(", ")", ")", "\n", "self", ".", "Templates", "[", "obj_id", "]", "=", "self", ".", "Tmatching", "(", "ft8", ",", "prev_seg8", ",", "None", ",", "0", ",", "mode", "=", "\"M\"", ")", "\n", "self", ".", "current_masks", "[", "target", ".", "index", "]", "=", "mask", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "ft", "[", "self", ".", "disc_params", ".", "layer", "]", ".", "size", "(", ")", "\n", "self", ".", "prev_score", "[", "obj_id", "]", "=", "torch", ".", "nn", ".", "Upsample", "(", "size", "=", "(", "H", ",", "W", ")", ",", "mode", "=", "'nearest'", ")", "(", "mask", ".", "float", "(", ")", ")", "\n", "scores", "=", "target", ".", "classify", "(", "ft16", ")", "\n", "prevX", "=", "self", ".", "refiner", ".", "Test_Init", "(", "scores", ",", "ft", ")", "\n", "self", ".", "prevRefine", "[", "obj_id", "]", "=", "prevX", "\n", "\n", "", "return", "self", ".", "current_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.tracker.Tracker.track": [[287, 354], ["tracker.Tracker.feature_extractor.get_F8", "tracker.Tracker.targets.items", "tracker.Tracker.targets.items", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.argmax", "range", "tracker.Tracker.targets.items", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "tracker.Tracker.Tmatching", "tracker.Tracker.convGS().squeeze().squeeze", "tracker.Tracker.gSelect", "target.classify.squeeze().squeeze", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "scores.append", "tracker.Tracker.refiner.Test_Forward", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "tracker.Tracker.targets.items", "target.discriminator.update", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tracker.Tracker.feature_extractor.get_F32", "target.classify", "tracker.Tracker.update", "target.classify.clone", "tracker.Tracker.Convert_Diff", "tracker.Tracker.current_masks[].unsqueeze().unsqueeze", "tracker.Tracker.convGS().squeeze", "target.classify.squeeze", "tracker.Tracker.current_masks[].unsqueeze", "tracker.Tracker.convGS", "t2.start_mask.squeeze"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.get_F8", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.seg_network.SegNetwork.Test_Forward", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.update", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.get_F32", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TargetObject.classify", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.update"], ["", "def", "track", "(", "self", ",", "image", ",", "this_th", ")", ":", "\n", "\n", "        ", "im_size", "=", "image", ".", "shape", "[", "-", "2", ":", "]", "\n", "features", "=", "self", ".", "feature_extractor", ".", "get_F8", "(", "image", ")", "\n", "\n", "# Classify", "\n", "ft8", "=", "features", "[", "self", ".", "Tmat_params", ".", "layer", "]", "\n", "scores", "=", "[", "]", "\n", "for", "obj_id", ",", "target", "in", "self", ".", "targets", ".", "items", "(", ")", ":", "\n", "            ", "if", "target", ".", "start_frame", "<", "self", ".", "current_frame", ":", "\n", "# using gating function for check needs of calculate score map", "\n", "                ", "PrevScore8", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "self", ".", "H8", ",", "self", ".", "W8", ")", ",", "mode", "=", "'bilinear'", ")", "(", "self", ".", "prev_score", "[", "obj_id", "]", ")", "\n", "tplS", "=", "self", ".", "Tmatching", "(", "torch", ".", "cat", "(", "[", "ft8", ",", "PrevScore8", "]", ",", "dim", "=", "1", ")", ",", "self", ".", "Templates", "[", "obj_id", "]", ",", "mode", "=", "\"Q\"", ")", "\n", "fc_f", "=", "self", ".", "convGS", "(", "tplS", ")", ".", "squeeze", "(", "2", ")", ".", "squeeze", "(", "2", ")", "\n", "\n", "_", ",", "gateProb", "=", "self", ".", "gSelect", "(", "fc_f", ")", "\n", "\n", "if", "gateProb", "[", "0", ",", "0", "]", ">", "this_th", ":", "\n", "                    ", "gate", "=", "1", "\n", "", "else", ":", "\n", "                    ", "gate", "=", "0", "\n", "", "self", ".", "gate_result", "[", "obj_id", "]", "=", "gate", "\n", "\n", "if", "gate", "==", "0", ":", "# we need to calculate", "\n", "                    ", "PostFeatures", "=", "self", ".", "feature_extractor", ".", "get_F32", "(", "ft8", ")", "\n", "ft16", "=", "PostFeatures", "[", "self", ".", "disc_params", ".", "layer", "]", "\n", "s", "=", "target", ".", "classify", "(", "ft16", ")", "\n", "features", ".", "update", "(", "PostFeatures", ")", "\n", "Diff", "=", "None", "\n", "self", ".", "prev_score", "[", "obj_id", "]", "=", "s", ".", "clone", "(", ")", "\n", "", "else", ":", "# Do not need to calcualte just translate", "\n", "                    ", "Diff", "=", "self", ".", "Convert_Diff", "(", "tplS", ")", "\n", "s", "=", "self", ".", "prev_score", "[", "obj_id", "]", "+", "Diff", "\n", "\n", "", "Sout", "=", "s", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", "\n", "S_min", "=", "torch", ".", "min", "(", "Sout", ")", "\n", "S_max", "=", "torch", ".", "max", "(", "Sout", ")", "\n", "Sout", "=", "(", "(", "255", "*", "(", "Sout", "-", "S_min", ")", ")", "/", "(", "S_max", "-", "S_min", ")", ")", ".", "cpu", "(", ")", ".", "byte", "(", ")", ".", "numpy", "(", ")", "\n", "scores", ".", "append", "(", "Sout", ")", "\n", "\n", "y", ",", "prevX", "=", "self", ".", "refiner", ".", "Test_Forward", "(", "s", ",", "features", ",", "gate", ",", "self", ".", "prevRefine", "[", "obj_id", "]", ",", "Diff", ",", "im_size", ")", "\n", "self", ".", "prevRefine", "[", "obj_id", "]", "=", "prevX", "\n", "self", ".", "current_masks", "[", "target", ".", "index", "]", "=", "torch", ".", "sigmoid", "(", "y", ")", "\n", "\n", "# Update", "\n", "\n", "", "", "for", "obj_id", ",", "t1", "in", "self", ".", "targets", ".", "items", "(", ")", ":", "\n", "            ", "if", "t1", ".", "start_frame", "<", "self", ".", "current_frame", ":", "\n", "                ", "for", "obj_id2", ",", "t2", "in", "self", ".", "targets", ".", "items", "(", ")", ":", "\n", "                    ", "if", "obj_id", "!=", "obj_id2", "and", "t2", ".", "start_frame", "==", "self", ".", "current_frame", ":", "\n", "                        ", "self", ".", "current_masks", "[", "t1", ".", "index", "]", "*=", "(", "1", "-", "t2", ".", "start_mask", ".", "squeeze", "(", "0", ")", ")", ".", "float", "(", ")", "\n", "\n", "", "", "", "", "p", "=", "torch", ".", "clamp", "(", "self", ".", "current_masks", ",", "1e-7", ",", "1", "-", "1e-7", ")", "\n", "p", "[", "0", ":", "1", "]", "=", "torch", ".", "min", "(", "(", "1", "-", "p", "[", "1", ":", "]", ")", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "[", "0", "]", "# bg prob", "\n", "segs", "=", "F", ".", "softmax", "(", "p", "/", "(", "1", "-", "p", ")", ",", "dim", "=", "0", ")", "# prob_cls/!prob_cls", "\n", "inds", "=", "segs", ".", "argmax", "(", "dim", "=", "0", ")", "\n", "\n", "# self.out_buffer = segs * F.one_hot(inds, segs.shape[0]).permute(2, 0, 1)", "\n", "for", "i", "in", "range", "(", "self", ".", "current_masks", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "current_masks", "[", "i", "]", "=", "segs", "[", "i", "]", "*", "(", "inds", "==", "i", ")", ".", "float", "(", ")", "\n", "\n", "", "for", "obj_id", ",", "target", "in", "self", ".", "targets", ".", "items", "(", ")", ":", "\n", "            ", "if", "target", ".", "start_frame", "<", "self", ".", "current_frame", "and", "self", ".", "disc_params", ".", "update_filters", "and", "self", ".", "gate_result", "[", "obj_id", "]", "==", "0", ":", "\n", "                ", "target", ".", "discriminator", ".", "update", "(", "self", ".", "current_masks", "[", "target", ".", "index", "]", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "\n", "", "", "return", "self", ".", "current_masks", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TargetObject.__init__": [[17, 22], ["discriminator.Discriminator", "kwargs.items", "setattr"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items"], ["    ", "def", "__init__", "(", "self", ",", "disc_params", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "discriminator", "=", "Discriminator", "(", "**", "disc_params", ")", "\n", "for", "key", ",", "val", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TargetObject.initialize": [[23, 25], ["training_model.TargetObject.discriminator.init"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.discriminator.Discriminator.init"], ["", "", "def", "initialize", "(", "self", ",", "ft", ",", "mask", ")", ":", "\n", "        ", "self", ".", "discriminator", ".", "init", "(", "ft", "[", "self", ".", "discriminator", ".", "layer", "]", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TargetObject.initialize_pretrained": [[26, 32], ["training_model.TargetObject.discriminator.load_state_dict", "training_model.TargetObject.discriminator.parameters", "training_model.TargetObject.discriminator.eval", "p.requires_grad_"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.load_state_dict"], ["", "def", "initialize_pretrained", "(", "self", ",", "state_dict", ")", ":", "\n", "\n", "        ", "self", ".", "discriminator", ".", "load_state_dict", "(", "state_dict", ")", "\n", "for", "p", "in", "self", ".", "discriminator", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad_", "(", "False", ")", "\n", "", "self", ".", "discriminator", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TargetObject.get_state_dict": [[33, 35], ["training_model.TargetObject.discriminator.state_dict"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.state_dict"], ["", "def", "get_state_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "discriminator", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TargetObject.classify": [[36, 38], ["training_model.TargetObject.discriminator.apply"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.discriminator.Discriminator.apply"], ["", "def", "classify", "(", "self", ",", "ft", ")", ":", "\n", "        ", "return", "self", ".", "discriminator", ".", "apply", "(", "ft", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.__init__": [[41, 88], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BCELoss", "torch.BCELoss", "torch.L1Loss", "torch.L1Loss", "torch.MSELoss", "torch.MSELoss", "training_model.TargetObject", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "GumbelModule.GumbleSoftmax", "range", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__"], ["    ", "def", "__init__", "(", "self", ",", "augmenter", ",", "feature_extractor", ",", "disc_params", ",", "Tmatching", ",", "Tmat_params", ",", "seg_network", ",", "batch_size", "=", "0", ",", "\n", "tmodel_cache", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "augmenter", "=", "augmenter", "\n", "self", ".", "augment", "=", "augmenter", ".", "augment_first_frame", "\n", "self", ".", "tmodels", "=", "[", "TargetObject", "(", "disc_params", ")", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "self", ".", "Tmat_params", "=", "Tmat_params", "\n", "self", ".", "endEP", "=", "Tmat_params", ".", "endEP", "\n", "self", ".", "m1", "=", "Tmat_params", ".", "m1", "\n", "self", ".", "m2", "=", "Tmat_params", ".", "m2", "\n", "\n", "self", ".", "gateF", "=", "self", ".", "Tmat_params", ".", "gateF", "\n", "if", "self", ".", "gateF", ":", "\n", "            ", "fc1", "=", "nn", ".", "Conv2d", "(", "Tmat_params", ".", "Tmat_out", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "fc1bn", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "fc2", "=", "nn", ".", "Conv2d", "(", "16", ",", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "# initialize the bias of the last fc for", "\n", "# initial opening rate of the gate of about 85%", "\n", "fc2", ".", "bias", ".", "data", "[", "0", "]", "=", "0.1", "\n", "fc2", ".", "bias", ".", "data", "[", "1", "]", "=", "2", "\n", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "torch", ".", "nn", ".", "AdaptiveMaxPool2d", "(", "7", ")", ")", "\n", "layers", ".", "append", "(", "fc1", ")", "\n", "layers", ".", "append", "(", "fc1bn", ")", "\n", "layers", ".", "append", "(", "torch", ".", "nn", ".", "AdaptiveMaxPool2d", "(", "3", ")", ")", "\n", "layers", ".", "append", "(", "fc2", ")", "\n", "self", ".", "convGS", "=", "torch", ".", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "gSelect", "=", "GumbleSoftmax", "(", "hard", "=", "True", ")", "\n", "\n", "", "self", ".", "Tmatching", "=", "Tmatching", "\n", "self", ".", "Convert_Diff", "=", "nn", ".", "Conv2d", "(", "Tmat_params", ".", "Tmat_out", ",", "1", ",", "3", ",", "2", ",", "1", ")", "\n", "\n", "self", ".", "feature_extractor", "=", "feature_extractor", "\n", "self", ".", "refiner", "=", "seg_network", "\n", "self", ".", "tmodel_cache", "=", "tmodel_cache", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "compute_loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "self", ".", "compute_accuracy", "=", "self", ".", "intersection_over_union", "\n", "self", ".", "L1_loss", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "L2_loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "self", ".", "scores", "=", "None", "\n", "self", ".", "ft_channels", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.load_state_dict": [[89, 116], ["dict", "dict", "dict", "dict", "state_dict.items", "training_model.TrainerModel.convGS.load_state_dict", "training_model.TrainerModel.Tmatching.load_state_dict", "training_model.TrainerModel.Convert_Diff.load_state_dict", "training_model.TrainerModel.refiner.load_state_dict", "k.startswith", "k.startswith", "k.startswith", "len", "k.startswith", "len", "print", "len", "len"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.load_state_dict", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.load_state_dict", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.load_state_dict", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "\n", "        ", "convGS_dict", "=", "dict", "(", ")", "\n", "Tmatching_dict", "=", "dict", "(", ")", "\n", "Convert_Diff_dict", "=", "dict", "(", ")", "\n", "refiner_dict", "=", "dict", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "\"convGS.\"", ")", ":", "\n", "                ", "k", "=", "k", "[", "len", "(", "\"convGS.\"", ")", ":", "]", "\n", "convGS_dict", "[", "k", "]", "=", "v", "\n", "", "elif", "k", ".", "startswith", "(", "\"Tmatching.\"", ")", ":", "\n", "                ", "k", "=", "k", "[", "len", "(", "\"Tmatching.\"", ")", ":", "]", "\n", "Tmatching_dict", "[", "k", "]", "=", "v", "\n", "", "elif", "k", ".", "startswith", "(", "\"Convert_Diff.\"", ")", ":", "\n", "                ", "k", "=", "k", "[", "len", "(", "\"Convert_Diff.\"", ")", ":", "]", "\n", "Convert_Diff_dict", "[", "k", "]", "=", "v", "\n", "", "elif", "k", ".", "startswith", "(", "\"refiner.\"", ")", ":", "\n", "                ", "k", "=", "k", "[", "len", "(", "\"refiner.\"", ")", ":", "]", "\n", "refiner_dict", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"{} wrong state dict \"", ".", "format", "(", "k", ")", ")", "\n", "\n", "", "", "self", ".", "convGS", ".", "load_state_dict", "(", "convGS_dict", ")", "\n", "self", ".", "Tmatching", ".", "load_state_dict", "(", "Tmatching_dict", ")", "\n", "self", ".", "Convert_Diff", ".", "load_state_dict", "(", "Convert_Diff_dict", ")", "\n", "self", ".", "refiner", ".", "load_state_dict", "(", "refiner_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.Initalize_state_dict": [[117, 127], ["dict", "state_dict.items", "training_model.TrainerModel.refiner.load_state_dict", "print", "k.startswith", "len"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.load_state_dict"], ["", "def", "Initalize_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "refiner_dict", "=", "dict", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "\"refiner.\"", ")", ":", "\n", "                ", "k", "=", "k", "[", "len", "(", "\"refiner.\"", ")", ":", "]", "\n", "refiner_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "", "self", ".", "refiner", ".", "load_state_dict", "(", "refiner_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"Load pretrained model\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.state_dict": [[128, 134], ["collections.OrderedDict", "list", "list", "training_model.TrainerModel.refiner.state_dict().items", "list", "list", "training_model.TrainerModel.Convert_Diff.state_dict().items", "training_model.TrainerModel.convGS.state_dict().items", "training_model.TrainerModel.Tmatching.state_dict().items", "training_model.TrainerModel.refiner.state_dict", "training_model.TrainerModel.Convert_Diff.state_dict", "training_model.TrainerModel.convGS.state_dict", "training_model.TrainerModel.Tmatching.state_dict"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.state_dict", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.state_dict", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.state_dict", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "merge_dict", "=", "collections", ".", "OrderedDict", "(", "list", "(", "self", ".", "convGS", ".", "state_dict", "(", "prefix", "=", "\"convGS.\"", ")", ".", "items", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "Tmatching", ".", "state_dict", "(", "prefix", "=", "\"Tmatching.\"", ")", ".", "items", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "Convert_Diff", ".", "state_dict", "(", "prefix", "=", "\"Convert_Diff.\"", ")", ".", "items", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "refiner", ".", "state_dict", "(", "prefix", "=", "\"refiner.\"", ")", ".", "items", "(", ")", ")", ")", "\n", "return", "merge_dict", "\n", "# return self.refiner.state_dict(prefix=\"refiner.\")", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.intersection_over_union": [[136, 151], ["intersection.sum().sum", "union.sum().sum", "intersection.sum", "union.sum", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan"], "methods", ["None"], ["", "def", "intersection_over_union", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "\n", "        ", "pred", "=", "(", "pred", ">", "0.5", ")", ".", "float", "(", ")", "\n", "gt", "=", "(", "gt", ">", "0.5", ")", ".", "float", "(", ")", "\n", "\n", "intersection", "=", "pred", "*", "gt", "\n", "i", "=", "intersection", ".", "sum", "(", "dim", "=", "-", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "union", "=", "(", "(", "pred", "+", "gt", ")", ">", "0.5", ")", ".", "float", "(", ")", "\n", "u", "=", "union", ".", "sum", "(", "dim", "=", "-", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "iou", "=", "i", "/", "u", "\n", "\n", "iou", "[", "torch", ".", "isinf", "(", "iou", ")", "]", "=", "0.0", "\n", "iou", "[", "torch", ".", "isnan", "(", "iou", ")", "]", "=", "1.0", "\n", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.forward": [[152, 242], ["lib.training_datasets.SampleSpec.from_encoded", "lib.utils.AverageMeter", "lib.utils.AverageMeter", "lib.utils.AverageMeter", "lib.utils.AverageMeter", "training_model.TrainerModel._initialize", "labels[].size", "PrevScore16.size", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "labels[].to", "range", "dict", "images[].size", "images[].size", "len", "labels[].to", "training_model.TrainerModel._forward", "gt_sameRatio.clamp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "training_model.TrainerModel.L2_loss", "labels[].to.float", "training_model.TrainerModel.compute_accuracy", "training_model.TrainerModel.compute_loss", "training_model.TrainerModel.L2_loss", "loss.backward", "lib.utils.AverageMeter.update", "lib.utils.AverageMeter.update", "lib.utils.AverageMeter.update", "training_model.TrainerModel.mean().cpu().numpy", "[].to().detach().clone", "Diff[].detach().clone", "trans_score[].detach().clone", "org_score[].detach().clone", "final_scores[].detach().clone", "lib.utils.AverageMeter.update", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "len", "len", "images[].to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "seg.detach", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "labels[].to.float", "training_model.TrainerModel.item", "training_model.TrainerModel.item", "training_model.TrainerModel.item", "len", "len", "len", "intersect.view", "union.view", "gt_sameRatio.unsqueeze", "torch.ReLU", "torch.ReLU", "training_model.TrainerModel.mean().cpu", "[].to().detach", "Diff[].detach", "trans_score[].detach", "org_score[].detach", "final_scores[].detach", "reuse_gate.unsqueeze().unsqueeze().expand_as", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "curr_label[].float().unsqueeze", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "seg[].detach().clone().unsqueeze", "labels[].to.to", "labels[].to.to", "training_model.TrainerModel.mean", "[].to", "reuse_gate.unsqueeze().unsqueeze", "curr_label[].float", "seg[].detach().clone", "reuse_gate.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "seg[].detach"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.training_datasets.SampleSpec.from_encoded", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel._initialize", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel._forward", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.update", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.update", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.update", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.update", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.GumbelModule.GumbleSoftmax.cpu", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.davis.mean", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to"], ["", "def", "forward", "(", "self", ",", "images", ",", "labels", ",", "meta", ",", "epoch", ")", ":", "\n", "\n", "        ", "specs", "=", "SampleSpec", ".", "from_encoded", "(", "meta", ")", "\n", "\n", "LossSeg", "=", "AverageMeter", "(", ")", "\n", "LossDiff", "=", "AverageMeter", "(", ")", "\n", "ReuseRate", "=", "AverageMeter", "(", ")", "\n", "LossGProb", "=", "AverageMeter", "(", ")", "\n", "\n", "iter_acc", "=", "0", "\n", "n", "=", "0", "\n", "\n", "cache_hits", ",", "Template", ",", "prevSeg8", ",", "PrevScore16", ",", "prevX", ",", "PrevFeature", "=", "self", ".", "_initialize", "(", "images", "[", "0", "]", ",", "labels", "[", "0", "]", ",", "specs", ")", "\n", "\n", "#prepare visdom", "\n", "b", ",", "_", ",", "H", ",", "W", "=", "labels", "[", "0", "]", ".", "size", "(", ")", "\n", "_", ",", "_", ",", "h16", ",", "w16", "=", "PrevScore16", ".", "size", "(", ")", "\n", "Reuse_gates", "=", "torch", ".", "zeros", "(", "(", "b", ",", "1", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "visdom_gt", "=", "torch", ".", "zeros", "(", "len", "(", "images", ")", "-", "1", ",", "1", ",", "h16", ",", "w16", ")", "\n", "visdom_seg", "=", "torch", ".", "zeros", "(", "len", "(", "images", ")", "-", "1", ",", "1", ",", "h16", ",", "w16", ")", "\n", "visdom_img", "=", "torch", ".", "zeros", "(", "len", "(", "images", ")", "-", "1", ",", "3", ",", "images", "[", "0", "]", ".", "size", "(", "2", ")", ",", "images", "[", "0", "]", ".", "size", "(", "3", ")", ")", "\n", "visdom_diff", "=", "torch", ".", "zeros", "(", "len", "(", "images", ")", "-", "1", ",", "1", ",", "h16", ",", "w16", ")", "\n", "visdom_Tscore", "=", "torch", ".", "zeros", "(", "(", "len", "(", "images", ")", "-", "1", ",", "1", ",", "h16", ",", "w16", ")", ")", "\n", "visdom_Oscore", "=", "torch", ".", "zeros", "(", "(", "len", "(", "images", ")", "-", "1", ",", "1", ",", "h16", ",", "w16", ")", ")", "\n", "visdom_Fscore", "=", "torch", ".", "zeros", "(", "(", "len", "(", "images", ")", "-", "1", ",", "1", ",", "h16", ",", "w16", ")", ")", "\n", "Prev_label", "=", "labels", "[", "0", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "images", ")", ")", ":", "\n", "\n", "            ", "curr_label", "=", "labels", "[", "i", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "seg", ",", "PrevFeature", ",", "CurrScore16", ",", "prevX", ",", "Diff", ",", "trans_score", ",", "reuse_gate", ",", "org_score", ",", "final_scores", ",", "gate_prob", "=", "self", ".", "_forward", "(", "images", "[", "i", "]", ".", "to", "(", "self", ".", "device", ")", ",", "Template", ",", "prevSeg8", ",", "PrevScore16", ",", "prevX", ",", "PrevFeature", ")", "\n", "Reuse_gates", "+=", "reuse_gate", "\n", "union", "=", "(", "(", "curr_label", "+", "Prev_label", ".", "to", "(", "self", ".", "device", ")", ")", ">", "0", ")", ".", "float", "(", ")", "\n", "intersect", "=", "(", "(", "curr_label", "+", "Prev_label", ".", "to", "(", "self", ".", "device", ")", ")", ">", "1", ")", ".", "float", "(", ")", "\n", "gt_sameRatio", "=", "torch", ".", "sum", "(", "intersect", ".", "view", "(", "b", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "/", "torch", ".", "sum", "(", "union", ".", "view", "(", "b", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "gt_sameRatio", "[", "gt_sameRatio", "!=", "gt_sameRatio", "]", "=", "0", "\n", "if", "epoch", "<", "self", ".", "endEP", ":", "\n", "                ", "margin", "=", "self", ".", "m1", "*", "(", "epoch", "/", "self", ".", "endEP", ")", "\n", "", "else", ":", "\n", "                ", "margin", "=", "self", ".", "m1", "\n", "", "gt_sameRatio", ".", "clamp", "(", "margin", ")", "\n", "gt_TargetP", "=", "torch", ".", "cat", "(", "[", "gt_sameRatio", ".", "unsqueeze", "(", "1", ")", ",", "(", "1", "-", "gt_sameRatio", ")", ".", "unsqueeze", "(", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "loss_Gprob", "=", "self", ".", "L2_loss", "(", "nn", ".", "ReLU", "(", ")", "(", "torch", ".", "abs", "(", "gate_prob", "-", "gt_TargetP", ")", "-", "self", ".", "m2", ")", ",", "\n", "torch", ".", "zeros_like", "(", "gt_TargetP", ")", ")", "\n", "\n", "# loss for segmentation", "\n", "y", "=", "curr_label", ".", "float", "(", ")", "\n", "acc", "=", "self", ".", "compute_accuracy", "(", "seg", ".", "detach", "(", ")", ",", "y", ")", "\n", "loss_seg", "=", "self", ".", "compute_loss", "(", "seg", ",", "y", ")", "\n", "\n", "# loss for translated score", "\n", "Gt_t", "=", "torch", ".", "nn", ".", "Upsample", "(", "size", "=", "(", "h16", ",", "w16", ")", ",", "mode", "=", "'bilinear'", ")", "(", "curr_label", ".", "float", "(", ")", ")", "\n", "loss_diff", "=", "self", ".", "L2_loss", "(", "Diff", ",", "Gt_t", "-", "PrevScore16", ")", "\n", "\n", "loss", "=", "loss_seg", "+", "loss_diff", "+", "loss_Gprob", "#+ loss_PrevSeg", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "\n", "# out stat and visdom", "\n", "LossSeg", ".", "update", "(", "loss_seg", ".", "item", "(", ")", ")", "\n", "LossDiff", ".", "update", "(", "loss_diff", ".", "item", "(", ")", ")", "\n", "# LossPrevSeg.update(loss_PrevSeg.item())", "\n", "LossGProb", ".", "update", "(", "loss_Gprob", ".", "item", "(", ")", ")", "\n", "\n", "iter_acc", "+=", "acc", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "n", "+=", "1", "\n", "visdom_img", "[", "i", "-", "1", "]", "=", "(", "images", "[", "i", "]", "[", "0", "]", ".", "to", "(", "self", ".", "device", ")", ")", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "visdom_gt", "[", "i", "-", "1", "]", "=", "torch", ".", "nn", ".", "Upsample", "(", "size", "=", "(", "h16", ",", "w16", ")", ",", "mode", "=", "'bilinear'", ")", "(", "curr_label", "[", "0", "]", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "visdom_seg", "[", "i", "-", "1", "]", "=", "torch", ".", "nn", ".", "Upsample", "(", "size", "=", "(", "h16", ",", "w16", ")", ",", "mode", "=", "'bilinear'", ")", "(", "seg", "[", "0", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "visdom_diff", "[", "i", "-", "1", "]", "=", "Diff", "[", "0", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "visdom_Tscore", "[", "i", "-", "1", "]", "=", "trans_score", "[", "0", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "visdom_Oscore", "[", "i", "-", "1", "]", "=", "org_score", "[", "0", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "visdom_Fscore", "[", "i", "-", "1", "]", "=", "final_scores", "[", "0", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "PrevScore16", "=", "CurrScore16", "\n", "Prev_label", "=", "(", "reuse_gate", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "Prev_label", ")", ")", "*", "Prev_label", "+", "(", "1", "-", "reuse_gate", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "Prev_label", ")", "*", "curr_label", "\n", "ReuseRate", ".", "update", "(", "(", "torch", ".", "sum", "(", "Reuse_gates", ")", "/", "b", ")", ".", "detach", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "\n", "", "stats", "=", "dict", "(", ")", "\n", "stats", "[", "'stats/loss_seg'", "]", "=", "LossSeg", ".", "avg", "\n", "stats", "[", "'stats/loss_diff'", "]", "=", "LossDiff", ".", "avg", "\n", "stats", "[", "'stats/loss_gp'", "]", "=", "LossGProb", ".", "avg", "\n", "stats", "[", "'stats/reuseR'", "]", "=", "ReuseRate", ".", "avg", "\n", "stats", "[", "'stats/loss'", "]", "=", "LossSeg", ".", "avg", "+", "LossDiff", ".", "avg", "+", "LossGProb", ".", "avg", "\n", "stats", "[", "'stats/accuracy'", "]", "=", "iter_acc", "/", "n", "\n", "stats", "[", "'stats/fcache_hits'", "]", "=", "cache_hits", "\n", "\n", "return", "stats", ",", "visdom_img", ",", "visdom_gt", ",", "visdom_seg", ",", "visdom_diff", ",", "visdom_Tscore", ",", "visdom_Oscore", ",", "visdom_Fscore", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel._initialize": [[243, 291], ["range", "training_model.TrainerModel.feature_extractor", "ft[].size", "training_model.TrainerModel.Tmatching", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "training_model.TrainerModel.refiner", "first_image.to", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "first_labels.to().float", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "first_labels.to().float", "range", "tmdl.classify", "torch.cat.append", "torch.cat.append", "training_model.TrainerModel.load_target_model", "training_model.TrainerModel.augment", "training_model.TrainerModel.feature_extractor.no_grad_forward", "training_model.TrainerModel.tmodels[].initialize", "training_model.TrainerModel.tmodels[].initialize_pretrained", "first_image[].to", "first_labels[].to", "training_model.TrainerModel.save_target_model", "first_labels.to", "first_labels.to", "training_model.TrainerModel.tmodels[].get_state_dict", "training_model.TrainerModel.feature_extractor.get_out_channels", "int", "int", "numpy.ceil", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TargetObject.classify", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.load_target_model", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.no_grad_forward", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.initialize", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TargetObject.initialize_pretrained", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.save_target_model", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TargetObject.get_state_dict", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.get_out_channels"], ["", "def", "_initialize", "(", "self", ",", "first_image", ",", "first_labels", ",", "specs", ")", ":", "\n", "\n", "        ", "cache_hits", "=", "0", "\n", "\n", "# Augment first image and extract features", "\n", "\n", "L", "=", "self", ".", "tmodels", "[", "0", "]", ".", "discriminator", ".", "layer", "\n", "\n", "N", "=", "first_image", ".", "shape", "[", "0", "]", "# Batch size", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "\n", "            ", "state_dict", "=", "None", "\n", "if", "self", ".", "tmodel_cache", ".", "enable", ":", "\n", "                ", "state_dict", "=", "self", ".", "load_target_model", "(", "specs", "[", "i", "]", ",", "L", ")", "\n", "\n", "", "have_pretrained", "=", "(", "state_dict", "is", "not", "None", ")", "\n", "\n", "if", "not", "have_pretrained", ":", "\n", "                ", "im", ",", "lb", "=", "self", ".", "augment", "(", "first_image", "[", "i", "]", ".", "to", "(", "self", ".", "device", ")", ",", "first_labels", "[", "i", "]", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "ft", "=", "self", ".", "feature_extractor", ".", "no_grad_forward", "(", "im", ",", "output_layers", "=", "[", "L", "]", ",", "chunk_size", "=", "4", ")", "\n", "self", ".", "tmodels", "[", "i", "]", ".", "initialize", "(", "ft", ",", "lb", ")", "\n", "\n", "if", "self", ".", "tmodel_cache", ".", "enable", "and", "not", "self", ".", "tmodel_cache", ".", "read_only", ":", "\n", "                    ", "self", ".", "save_target_model", "(", "specs", "[", "i", "]", ",", "L", ",", "self", ".", "tmodels", "[", "i", "]", ".", "get_state_dict", "(", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "ft_channels", "is", "None", ":", "\n", "                    ", "self", ".", "ft_channels", "=", "self", ".", "feature_extractor", ".", "get_out_channels", "(", ")", "[", "L", "]", "\n", "", "self", ".", "tmodels", "[", "i", "]", ".", "initialize_pretrained", "(", "state_dict", ")", "\n", "cache_hits", "+=", "1", "\n", "\n", "## Template generation", "\n", "", "", "ft", "=", "self", ".", "feature_extractor", "(", "first_image", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "ft", "[", "self", ".", "Tmat_params", ".", "layer", "]", ".", "size", "(", ")", "\n", "prevSeg", "=", "torch", ".", "nn", ".", "Upsample", "(", "size", "=", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ")", "(", "first_labels", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", ")", "\n", "Templates", "=", "self", ".", "Tmatching", "(", "ft", "[", "self", ".", "Tmat_params", ".", "layer", "]", ",", "prevSeg", ",", "None", ",", "0", ",", "mode", "=", "\"M\"", ")", "\n", "PrevScore", "=", "torch", ".", "nn", ".", "Upsample", "(", "size", "=", "(", "int", "(", "np", ".", "ceil", "(", "H", "/", "2", ")", ")", ",", "int", "(", "np", ".", "ceil", "(", "W", "/", "2", ")", ")", ")", ",", "mode", "=", "'bilinear'", ")", "(", "first_labels", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", ")", "\n", "\n", "scores", "=", "[", "]", "\n", "for", "i", ",", "tmdl", "in", "zip", "(", "range", "(", "N", ")", ",", "self", ".", "tmodels", ")", ":", "\n", "            ", "x", "=", "ft", "[", "self", ".", "tmodels", "[", "0", "]", ".", "discriminator", ".", "layer", "]", "[", "i", ",", "None", "]", "\n", "s", "=", "tmdl", ".", "classify", "(", "x", ")", "\n", "scores", ".", "append", "(", "s", ")", "\n", "", "scores", "=", "torch", ".", "cat", "(", "scores", ",", "dim", "=", "0", ")", "\n", "\n", "prevX", "=", "self", ".", "refiner", "(", "scores", ",", "ft", ",", "None", ",", "None", ",", "None", ",", "first_image", ".", "shape", ",", "scores", ")", "\n", "\n", "return", "cache_hits", ",", "Templates", ",", "prevSeg", ",", "PrevScore", ",", "prevX", ",", "ft", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel._forward": [[292, 352], ["training_model.TrainerModel.feature_extractor", "training_model.TrainerModel.Tmatching", "training_model.TrainerModel.Convert_Diff", "features[].clone", "features[].clone", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "training_model.TrainerModel.refiner", "lib.utils.interpolate", "torch.Upsample", "torch.Upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "training_model.TrainerModel.convGS().squeeze().squeeze", "training_model.TrainerModel.gSelect", "gate[].unsqueeze", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "range", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "tmdl.classify", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "tmdl.classify", "torch.cat.append", "torch.cat.append", "training_model.TrainerModel.convGS().squeeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "trans_score[].unsqueeze", "PrevScore16[].unsqueeze", "ft8.size", "ft8.size", "training_model.TrainerModel.convGS"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.utils.interpolate", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TargetObject.classify", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TargetObject.classify"], ["", "def", "_forward", "(", "self", ",", "image", ",", "Template", ",", "prevSeg8", ",", "PrevScore16", ",", "prevX", ",", "PrevFeature", "=", "None", ")", ":", "\n", "\n", "        ", "batch_size", "=", "image", ".", "shape", "[", "0", "]", "\n", "features", "=", "self", ".", "feature_extractor", "(", "image", ")", "\n", "\n", "# calculated diff map from previous score map for gating function", "\n", "ft8", "=", "features", "[", "self", ".", "Tmat_params", ".", "layer", "]", "\n", "PrevScore8", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "ft8", ".", "size", "(", "2", ")", ",", "ft8", ".", "size", "(", "3", ")", ")", ",", "mode", "=", "'bilinear'", ")", "(", "PrevScore16", ")", "\n", "tplS", "=", "self", ".", "Tmatching", "(", "torch", ".", "cat", "(", "[", "ft8", ",", "PrevScore8", "]", ",", "dim", "=", "1", ")", ",", "Template", ",", "mode", "=", "\"Q\"", ")", "\n", "\n", "if", "self", ".", "gateF", ":", "\n", "            ", "fc_f", "=", "self", ".", "convGS", "(", "tplS", ")", ".", "squeeze", "(", "2", ")", ".", "squeeze", "(", "2", ")", "# if too much different calculate score again", "\n", "gate", ",", "gate_prob", "=", "self", ".", "gSelect", "(", "fc_f", ",", "force_hard", "=", "True", ")", "\n", "gate", "=", "gate", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "gate", "=", "torch", ".", "ones", "(", "batch_size", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# transform previous score to current score by difference map", "\n", "", "Diff", "=", "self", ".", "Convert_Diff", "(", "tplS", ")", "# make diff map", "\n", "trans_score", "=", "PrevScore16", "+", "Diff", "\n", "##sigmoid(Ps16 +  Diff) = label", "\n", "ft", "=", "features", "[", "self", ".", "tmodels", "[", "0", "]", ".", "discriminator", ".", "layer", "]", "\n", "final_scores", "=", "[", "]", "\n", "org_score", "=", "[", "]", "\n", "Mixed_score", "=", "[", "]", "\n", "Refine_Feature4", "=", "features", "[", "'layer4'", "]", ".", "clone", "(", ")", "\n", "Refine_Feature5", "=", "features", "[", "'layer5'", "]", ".", "clone", "(", ")", "\n", "# trans_score: transform previous score by diff estimation for loss function", "\n", "# Mixed score: disc score + previous score for next frame train and R32, R16", "\n", "# Final score : disc score +transform score for refine network R8, R4", "\n", "# org_score : score from discrimiannt F for visdom", "\n", "for", "i", ",", "tmdl", "in", "zip", "(", "range", "(", "batch_size", ")", ",", "self", ".", "tmodels", ")", ":", "\n", "            ", "if", "gate", "[", "i", "]", "==", "0", ":", "\n", "                ", "x", "=", "ft", "[", "i", ",", "None", "]", "\n", "s", "=", "tmdl", ".", "classify", "(", "x", ")", "\n", "# print(\"tmdl s size : \" + str(s.size()))", "\n", "Mixed_score", ".", "append", "(", "s", ")", "\n", "final_scores", ".", "append", "(", "s", ")", "\n", "org_score", ".", "append", "(", "s", ")", "\n", "\n", "", "else", ":", "\n", "                ", "Refine_Feature4", "[", "i", "]", "=", "PrevFeature", "[", "'layer4'", "]", "[", "i", "]", "\n", "Refine_Feature5", "[", "i", "]", "=", "PrevFeature", "[", "'layer5'", "]", "[", "i", "]", "\n", "final_scores", ".", "append", "(", "trans_score", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "Mixed_score", ".", "append", "(", "PrevScore16", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "x", "=", "ft", "[", "i", ",", "None", "]", "\n", "s", "=", "tmdl", ".", "classify", "(", "x", ")", "\n", "org_score", ".", "append", "(", "s", ")", "\n", "\n", "", "", "final_scores", "=", "torch", ".", "cat", "(", "final_scores", ",", "dim", "=", "0", ")", "\n", "Mixed_score", "=", "torch", ".", "cat", "(", "Mixed_score", ",", "dim", "=", "0", ")", "\n", "org_score", "=", "torch", ".", "cat", "(", "org_score", ",", "dim", "=", "0", ")", "\n", "\n", "Refine_layers", "=", "{", "'layer2'", ":", "features", "[", "'layer2'", "]", ",", "'layer3'", ":", "features", "[", "'layer3'", "]", ",", "\n", "'layer4'", ":", "Refine_Feature4", ",", "'layer5'", ":", "Refine_Feature5", ",", "}", "\n", "y", ",", "prevX", ",", "=", "self", ".", "refiner", "(", "final_scores", ",", "Refine_layers", ",", "gate", ",", "prevX", ",", "Diff", ",", "image", ".", "shape", ",", "Mixed_score", ")", "\n", "y", "=", "interpolate", "(", "y", ",", "image", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "\n", "return", "torch", ".", "sigmoid", "(", "y", ")", ",", "Refine_layers", ",", "Mixed_score", ",", "prevX", ",", "Diff", ",", "trans_score", ",", "gate", ",", "org_score", ",", "final_scores", ",", "gate_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.tmodel_filename": [[354, 356], ["None"], "methods", ["None"], ["", "def", "tmodel_filename", "(", "self", ",", "spec", ",", "layer_name", ")", ":", "\n", "        ", "return", "self", ".", "tmodel_cache", ".", "path", "/", "spec", ".", "seq_name", "/", "(", "\"%05d.%d.%s.pth\"", "%", "(", "spec", ".", "frame0_id", ",", "spec", ".", "obj_id", ",", "layer_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.load_target_model": [[357, 365], ["training_model.TrainerModel.tmodel_filename", "training_model.TrainerModel.exists", "torch.load", "torch.load", "torch.load", "torch.load", "print"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.tmodel_filename"], ["", "def", "load_target_model", "(", "self", ",", "spec", ",", "layer_name", ")", ":", "\n", "        ", "fname", "=", "self", ".", "tmodel_filename", "(", "spec", ",", "layer_name", ")", "\n", "try", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "fname", ",", "map_location", "=", "self", ".", "device", ")", "if", "fname", ".", "exists", "(", ")", "else", "None", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "\"Could not read %s: %s\"", "%", "(", "fname", ",", "e", ")", ")", "\n", "state_dict", "=", "None", "\n", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.save_target_model": [[366, 370], ["training_model.TrainerModel.tmodel_filename", "training_model.TrainerModel.parent.mkdir", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.training_model.TrainerModel.tmodel_filename"], ["", "def", "save_target_model", "(", "self", ",", "spec", ":", "SampleSpec", ",", "layer_name", ",", "state_dict", ")", ":", "\n", "        ", "fname", "=", "self", ".", "tmodel_filename", "(", "spec", ",", "layer_name", ")", "\n", "fname", ".", "parent", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "torch", ".", "save", "(", "state_dict", ",", "fname", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams1.__init__": [[13, 34], ["kwargs.items", "setattr"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "p_fliplr", "=", "0.0", "\n", "\n", "self", ".", "p_scale", "=", "1.0", "\n", "self", ".", "scale_range", "=", "(", "0.66", ",", "1.5", ")", "\n", "\n", "self", ".", "p_rotate", "=", "1.0", "\n", "self", ".", "rotate_range", "=", "(", "-", "60", ",", "60", ")", "\n", "self", ".", "p_skew", "=", "0.0", "\n", "self", ".", "skew_range", "=", "(", "-", "0.1", ",", "0.1", ")", "\n", "\n", "self", ".", "p_translate", "=", "1.0", "\n", "self", ".", "translate_range", "=", "(", "0.2", ",", "0.8", ")", "\n", "\n", "self", ".", "p_blur", "=", "0.2", "\n", "self", ".", "blur_size_range", "=", "(", "0.5", ",", "5", ")", "\n", "self", ".", "blur_angle_range", "=", "(", "0.0", ",", "360.0", ")", "\n", "\n", "for", "key", ",", "val", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams1.items": [[35, 37], ["vars().items", "vars"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items"], ["", "", "def", "items", "(", "self", ")", ":", "\n", "        ", "return", "vars", "(", "self", ")", ".", "items", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.__init__": [[42, 55], ["kwargs.items", "setattr"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "num_aug", "=", "20", "\n", "self", ".", "location", "=", "[", "(", "0.5", ",", "0.5", ")", "]", "# Center location - fraction of image (width, height)", "\n", "self", ".", "rotation", "=", "[", "5", ",", "-", "5", ",", "10", ",", "-", "10", ",", "20", ",", "-", "20", ",", "30", ",", "-", "30", ",", "45", ",", "-", "45", ",", "60", ",", "-", "60", "]", "\n", "self", ".", "fliplr", "=", "[", "False", ",", "False", ",", "True", "]", "\n", "self", ".", "scale", "=", "[", "0.7", ",", "1.0", ",", "1.5", ",", "2.0", ",", "'0.25'", ",", "'0.5'", ",", "'1.0'", "]", "# Strings: fraction of frame height", "\n", "self", ".", "skew", "=", "[", "(", "0.0", ",", "0.0", ")", ",", "(", "0.0", ",", "0.0", ")", ",", "(", "0.1", ",", "0.1", ")", "]", "\n", "self", ".", "blur_size", "=", "[", "0.0", ",", "0.0", ",", "0.0", ",", "2.0", ",", "5.0", "]", "\n", "self", ".", "blur_angle", "=", "[", "0", ",", "45", ",", "90", ",", "135", "]", "\n", "\n", "for", "key", ",", "val", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items": [[56, 58], ["vars().items", "vars"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items"], ["", "", "def", "items", "(", "self", ")", ":", "\n", "        ", "return", "vars", "(", "self", ")", ".", "items", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.__repr__": [[59, 61], ["str", "vars"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "vars", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationSpec.__init__": [[65, 90], ["kwargs.items", "setattr"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :param location:   New target center (x,y)  [fractions of image width and height]\n        :param rotation:   Rotation angle [degrees]\n        :param fliplr:     Whether to mirror on the x-axis\n        :param scale:      number: scale change, string: absolute size (fraction of image height)\n        :param skew:       Skew (x,y) [Transform matrix skew coefficients]\n        :param blur_size:  Blur size [pixels]\n        :param blur_angle: Blur rotation angle [degrees]\n        :param min_size:   Minimum size (with and height) of the augmented object [pixels]\n        \"\"\"", "\n", "\n", "self", ".", "location", "=", "None", "\n", "self", ".", "rotation", "=", "0.0", "\n", "self", ".", "fliplr", "=", "False", "\n", "self", ".", "scale", "=", "1.0", "\n", "self", ".", "skew", "=", "(", "0", ",", "0", ")", "\n", "self", ".", "blur_size", "=", "0", "\n", "self", ".", "blur_angle", "=", "0", "\n", "self", ".", "min_size", "=", "10", "\n", "\n", "for", "key", ",", "val", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "val", ")", "\n", "\n", "", "assert", "self", ".", "location", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationSpec.__repr__": [[91, 93], ["str", "vars"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "vars", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.__init__": [[97, 102], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "parameters", ":", "dict", ")", ":", "\n", "\n", "        ", "self", ".", "params", "=", "parameters", "\n", "self", ".", "T_generate", "=", "0", "\n", "self", ".", "max_retries", "=", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter._scale": [[103, 106], ["numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_scale", "(", "sx", ",", "sy", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "[", "sx", ",", "0", ",", "0", "]", ",", "[", "0", ",", "sy", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter._rotate": [[107, 111], ["numpy.array", "numpy.cos", "numpy.sin"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_rotate", "(", "a", ")", ":", "\n", "        ", "ca", ",", "sa", "=", "np", ".", "cos", "(", "a", ")", ",", "np", ".", "sin", "(", "a", ")", "\n", "return", "np", ".", "array", "(", "[", "[", "ca", ",", "sa", ",", "0", "]", ",", "[", "-", "sa", ",", "ca", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter._translate": [[112, 115], ["numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_translate", "(", "dx", ",", "dy", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "dx", "]", ",", "[", "0", ",", "1", ",", "dy", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter._skew": [[116, 119], ["numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_skew", "(", "kx", ",", "ky", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "[", "1", ",", "kx", ",", "0", "]", ",", "[", "ky", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter._blur_kernel": [[120, 139], ["int", "numpy.arange", "numpy.stack", "numpy.exp", "numpy.exp.astype", "numpy.meshgrid", "numpy.diag", "numpy.exp.sum", "numpy.max", "numpy.tensordot", "numpy.linalg.inv"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_blur_kernel", "(", "sx", ",", "sy", ",", "R", ")", ":", "\n", "        ", "\"\"\"\n        :param sx:  x axis sigma\n        :param sy:  y axis sigma\n        :param R:   rotation matrix\n        :return: rotated Gauss blur filter\n        \"\"\"", "\n", "cov", "=", "R", "@", "np", ".", "diag", "(", "(", "sx", ",", "sy", ")", ")", "@", "R", ".", "T", "\n", "\n", "s", "=", "int", "(", "np", ".", "max", "(", "(", "sx", ",", "sy", ")", ")", "/", "2", "+", "0.5", ")", "\n", "s", "=", "(", "s", "+", "(", "s", "+", "1", ")", "%", "2", ")", "# odd size", "\n", "r", "=", "np", ".", "arange", "(", "-", "s", ",", "s", "+", "1", ")", "\n", "X", "=", "np", ".", "stack", "(", "np", ".", "meshgrid", "(", "r", ",", "r", ")", ")", "\n", "\n", "X", "=", "(", "X", "*", "np", ".", "tensordot", "(", "np", ".", "linalg", ".", "inv", "(", "cov", ")", ",", "X", ",", "axes", "=", "[", "1", ",", "0", "]", ")", ")", ".", "sum", "(", "0", ")", "\n", "G", "=", "np", ".", "exp", "(", "-", "0.5", "*", "X", ")", "\n", "G", "=", "G", "/", "G", ".", "sum", "(", ")", "*", "1.0", "\n", "return", "G", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.generate_specs1": [[140, 170], ["time.time.time", "range", "choose", "choose", "choose", "choose", "augmenter.AugmentationSpec", "aspecs.append", "time.time.time", "choose", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform"], "methods", ["None"], ["", "def", "generate_specs1", "(", "self", ",", "N", ",", "aparams", ":", "AugmentationParams1", ",", "tg_bbox", ",", "im_size", ",", "force_unity_scale", "=", "False", ")", ":", "\n", "\n", "        ", "t0", "=", "time", "(", ")", "\n", "\n", "ap", "=", "aparams", "\n", "h", ",", "w", "=", "im_size", "\n", "tg_x", ",", "tg_y", "=", "tg_bbox", "[", ":", "2", "]", "\n", "choose", "=", "self", ".", "_choose", "\n", "\n", "aspecs", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "t", "=", "choose", "(", "ap", ".", "p_translate", ",", "range", "=", "ap", ".", "translate_range", ",", "default", "=", "(", "tg_x", "/", "w", ",", "tg_y", "/", "h", ")", ",", "size", "=", "(", "2", ",", ")", ")", "\n", "r", "=", "choose", "(", "ap", ".", "p_rotate", ",", "range", "=", "ap", ".", "rotate_range", ",", "default", "=", "0.0", ")", "\n", "m", "=", "choose", "(", "ap", ".", "p_fliplr", ",", "choices", "=", "[", "True", ",", "False", "]", ")", "\n", "s", "=", "choose", "(", "ap", ".", "p_scale", ",", "range", "=", "ap", ".", "scale_range", ",", "default", "=", "1.0", ")", "if", "not", "force_unity_scale", "else", "1.0", "\n", "k", "=", "choose", "(", "ap", ".", "p_skew", ",", "range", "=", "ap", ".", "skew_range", ",", "default", "=", "(", "0.", ",", "0.", ")", ",", "size", "=", "(", "2", ",", ")", ")", "\n", "use_blur", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "ap", ".", "p_blur", "\n", "if", "use_blur", ":", "\n", "                ", "bs", "=", "np", ".", "random", ".", "uniform", "(", "*", "ap", ".", "blur_size_range", ")", "\n", "ba", "=", "np", ".", "random", ".", "uniform", "(", "*", "ap", ".", "blur_angle_range", ")", "\n", "", "else", ":", "\n", "                ", "bs", ",", "ba", "=", "(", "0", ",", "0", ")", ",", "0", "\n", "\n", "", "aspec", "=", "AugmentationSpec", "(", "tcenter", "=", "t", ",", "rotation", "=", "r", ",", "fliplr", "=", "m", ",", "scale", "=", "s", ",", "skew", "=", "k", ",", "blur_size", "=", "bs", ",", "blur_angle", "=", "ba", ")", "\n", "aspecs", ".", "append", "(", "aspec", ")", "\n", "\n", "", "self", ".", "T_generate", "+=", "time", "(", ")", "-", "t0", "\n", "\n", "return", "aspecs", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.generate_target_locations": [[171, 195], ["int", "int", "range", "numpy.random.shuffle", "numpy.ceil", "numpy.ceil", "range", "numpy.sqrt", "numpy.random.normal", "numpy.random.normal", "numpy.round", "numpy.round", "tcenters.append"], "methods", ["None"], ["", "def", "generate_target_locations", "(", "self", ",", "N", ",", "im_size", ")", ":", "\n", "        ", "\"\"\" Lay out a grid of new target object centers, shuffle the order and pick the first N \"\"\"", "\n", "h", ",", "w", "=", "im_size", "\n", "aspect", "=", "w", "/", "h", "\n", "nrows", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "N", "/", "aspect", ")", ")", ")", "\n", "ncols", "=", "int", "(", "np", ".", "ceil", "(", "aspect", "*", "nrows", ")", ")", "\n", "\n", "tcenters", "=", "[", "]", "\n", "co_max", "=", "0.5", "/", "ncols", "# Max column offset (fraction of image size)", "\n", "ro_max", "=", "0.5", "/", "nrows", "# Max row ...", "\n", "for", "r", "in", "range", "(", "nrows", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "ncols", ")", ":", "\n", "                ", "x", "=", "(", "c", "+", "0.5", ")", "/", "ncols", "\n", "y", "=", "(", "r", "+", "0.5", ")", "/", "nrows", "\n", "# Randomize a little", "\n", "x", "+=", "np", ".", "random", ".", "normal", "(", "0", ",", "co_max", "/", "4", ")", "\n", "y", "+=", "np", ".", "random", ".", "normal", "(", "0", ",", "ro_max", "/", "4", ")", "\n", "x", "=", "np", ".", "round", "(", "x", ",", "3", ")", "# Rounding makes printing of the parameters prettier,", "\n", "y", "=", "np", ".", "round", "(", "y", ",", "3", ")", "# but should not really affect the target_models.", "\n", "tcenters", ".", "append", "(", "(", "x", ",", "y", ")", ")", "\n", "\n", "", "", "np", ".", "random", ".", "shuffle", "(", "tcenters", ")", "\n", "tcenters", "=", "tcenters", "[", ":", "N", "]", "\n", "return", "tcenters", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.generate_specs2": [[196, 226], ["time.time.time", "dict", "aparams.items", "range", "numpy.random.shuffle", "dict", "dict.keys", "augmenter.AugmentationSpec", "time.time.time", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.AugmentationParams2.items"], ["", "def", "generate_specs2", "(", "self", ",", "aparams", ":", "AugmentationParams2", ")", ":", "\n", "        ", "\"\"\" Generate augmentation specs - method 2 \"\"\"", "\n", "\n", "t0", "=", "time", "(", ")", "\n", "\n", "N", "=", "aparams", ".", "num_aug", "-", "1", "# The original image is always included and does not need a spec.", "\n", "aug1", "=", "dict", "(", ")", "\n", "\n", "# Independently shuffle and combine the parameter lists", "\n", "\n", "for", "k", ",", "a", "in", "aparams", ".", "items", "(", ")", ":", "\n", "\n", "            ", "if", "k", "in", "(", "'num_aug'", ",", "'enable_cache'", ",", "'cache_path'", ")", ":", "# Ignore these", "\n", "                ", "continue", "\n", "", "a", "=", "a", "*", "(", "(", "N", "+", "len", "(", "a", ")", "-", "1", ")", "//", "len", "(", "a", ")", ")", "# Ensure enough values to choose from", "\n", "np", ".", "random", ".", "shuffle", "(", "a", ")", "# Select N parameters without replacement", "\n", "aug1", "[", "k", "]", "=", "a", "[", ":", "N", "]", "#", "\n", "\n", "# Dict of lists -> list of dicts", "\n", "\n", "", "aug2", "=", "[", "dict", "(", ")", "for", "i", "in", "range", "(", "N", ")", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "for", "k", "in", "aug1", ".", "keys", "(", ")", ":", "\n", "                ", "aug2", "[", "i", "]", "[", "k", "]", "=", "aug1", "[", "k", "]", "[", "i", "]", "\n", "\n", "# Generate specs", "\n", "\n", "", "", "aspecs", "=", "[", "AugmentationSpec", "(", "**", "a", ")", "for", "a", "in", "aug2", "]", "\n", "self", ".", "T_generate", "+=", "time", "(", ")", "-", "t0", "\n", "return", "aspecs", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.get_transform": [[227, 272], ["isinstance", "augmenter.ImageAugmenter._translate", "augmenter.ImageAugmenter._blur_kernel", "numpy.array", "float", "min", "max", "augmenter.ImageAugmenter._scale", "augmenter.ImageAugmenter._rotate", "augmenter.ImageAugmenter._rotate", "augmenter.ImageAugmenter._translate", "augmenter.ImageAugmenter._skew"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter._translate", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter._blur_kernel", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter._scale", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter._rotate", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter._rotate", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter._translate", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter._skew"], ["", "def", "get_transform", "(", "self", ",", "aspec", ":", "AugmentationSpec", ",", "tg_bbox", ",", "im_size", ",", "limit_scale", "=", "True", ",", "use_blur", "=", "True", ")", ":", "\n", "        ", "\"\"\" Get the affine transform and blur kernel from an AugmentationSpec object\n        :param tg_bbox:  Target bounding box (center_x, center_y, width, height)\n        :param im_size:  Image (height, width)\n        :param limit_scale:  Whether to restrict the scale so that the target will not be larger than im_size.\n        :return: geometric transform [3x3 matrix], blur kernel\n        \"\"\"", "\n", "\n", "tg_x", ",", "tg_y", ",", "tg_w", ",", "tg_h", "=", "tg_bbox", "\n", "assert", "tg_w", ">", "0", "and", "tg_h", ">", "0", "\n", "im_h", ",", "im_w", "=", "im_size", "\n", "\n", "t", ",", "a", ",", "s", ",", "k", "=", "aspec", ".", "location", ",", "aspec", ".", "rotation", ",", "aspec", ".", "scale", ",", "aspec", ".", "skew", "\n", "\n", "# Set up the scaling", "\n", "\n", "if", "isinstance", "(", "s", ",", "str", ")", ":", "\n", "            ", "new_tg_h", "=", "float", "(", "s", ")", "*", "im_h", "# s = target fraction of image height", "\n", "s", "=", "new_tg_h", "/", "tg_h", "\n", "\n", "", "if", "limit_scale", ":", "\n", "            ", "if", "s", "*", "tg_w", ">", "im_w", "or", "s", "*", "tg_h", ">", "im_h", ":", "# Upper bound", "\n", "                ", "s", "=", "min", "(", "im_w", "/", "tg_w", ",", "im_h", "/", "tg_h", ")", "\n", "\n", "", "if", "s", "*", "tg_w", "<", "aspec", ".", "min_size", "or", "s", "*", "tg_h", "<", "aspec", ".", "min_size", ":", "# Lower bound", "\n", "                ", "s", "=", "max", "(", "aspec", ".", "min_size", "/", "tg_w", ",", "aspec", ".", "min_size", "/", "tg_h", ")", "\n", "\n", "", "", "m", "=", "-", "1", "if", "aspec", ".", "fliplr", "else", "1", "# mirror", "\n", "s", "=", "(", "m", "*", "s", ",", "s", ")", "\n", "\n", "# Create the affine transform", "\n", "\n", "d2r", "=", "np", ".", "pi", "/", "180", "\n", "T", "=", "self", ".", "_translate", "(", "t", "[", "0", "]", "*", "im_w", ",", "t", "[", "1", "]", "*", "im_h", ")", "@", "self", ".", "_skew", "(", "*", "k", ")", "@", "self", ".", "_rotate", "(", "a", "*", "d2r", ")", "@", "self", ".", "_scale", "(", "*", "s", ")", "@", "self", ".", "_translate", "(", "-", "tg_x", ",", "-", "tg_y", ")", "# The rightmost _translate moves the target to the origin", "\n", "\n", "# Create the blur filter", "\n", "\n", "if", "use_blur", "and", "aspec", ".", "blur_size", ">", "0", ":", "\n", "            ", "R", "=", "self", ".", "_rotate", "(", "aspec", ".", "blur_angle", "*", "d2r", ")", "[", ":", "2", ",", ":", "2", "]", "\n", "G", "=", "self", ".", "_blur_kernel", "(", "aspec", ".", "blur_size", ",", "0.1", ",", "R", ")", "\n", "", "else", ":", "\n", "            ", "G", "=", "np", ".", "array", "(", "[", "[", "1.0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "return", "T", ",", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter._choose": [[273, 294], ["numpy.random.choice", "numpy.random.uniform", "numpy.random.uniform"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_choose", "(", "p", ",", "choices", "=", "None", ",", "range", "=", "None", ",", "default", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Choose a parameter randomly (uniformly)\n        :param p:        Probability of *not* choosing the default value. Ignored if default=None\n        :param choices:  List of choices. If None, use a range instead\n        :param range:    Value range (low, high). If None, use the list of choices instead\n        :param default:  Default parameter value\n        :param kwargs:   Additional arguments to np.random.choice (if choices is not None) or np.random.uniform\n        :return: the chosen parameter\n        \"\"\"", "\n", "\n", "assert", "choices", "is", "not", "None", "or", "range", "is", "not", "None", "\n", "assert", "default", "is", "not", "None", "\n", "\n", "make_choice", "=", "(", "p", ">", "0.0", "and", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "<", "p", ")", "or", "(", "default", "is", "None", ")", "\n", "if", "make_choice", "and", "choices", "is", "not", "None", ":", "\n", "            ", "return", "np", ".", "random", ".", "choice", "(", "choices", ",", "**", "kwargs", ")", "\n", "", "elif", "make_choice", "and", "range", "is", "not", "None", ":", "\n", "            ", "return", "np", ".", "random", ".", "uniform", "(", "*", "range", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.cut_and_inpaint": [[296, 341], ["im.detach().cpu().numpy().transpose", "cv2.getStructuringElement", "cv2.blur", "numpy.concatenate", "cv2.erode", "cv2.dilate", "cv2.blur", "cv2.blur", "torch.from_numpy().to().contiguous", "torch.from_numpy().to().contiguous", "cv2.getStructuringElement", "cv2.getStructuringElement", "cv2.inpaint", "cv2.cvtColor", "im.detach().cpu().numpy", "cv2.erode", "cv2.bitwise_and", "torch.from_numpy().to", "torch.from_numpy().to", "im.detach().cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().to().contiguous.transpose", "cv2.inpaint.transpose", "im.detach", "mask.squeeze"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.GumbelModule.GumbleSoftmax.cpu"], ["", "", "@", "staticmethod", "\n", "def", "cut_and_inpaint", "(", "im", ",", "mask", ":", "torch", ".", "Tensor", ",", "d", "=", "9", ",", "f", "=", "3", ",", "fast", "=", "False", ")", ":", "\n", "        ", "\"\"\" Cut out the target object and inpaint the hole\n        :param im:      Source image (torch Tensor, shape (C, H, W))\n        :param mask:    Inpainting mask (torch tensor, shape (H, W) or (1, H, W)). Nonzero pixels will be inpainted\n        :param d:       Target mask dilation (default: 3 pixel diameter)\n        :param f:       Target alpha feather width (default: 3 pixels)\n        :return: target cutout (RGBA) , inpainted image (RGB)\n        \"\"\"", "\n", "image", "=", "im", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "mask", "=", "(", "mask", ".", "squeeze", "(", ")", ">", "0", ")", ".", "byte", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mask", "=", "mask", "[", "...", ",", "None", "]", "\n", "\n", "# Extract the target", "\n", "\n", "target", "=", "mask", "*", "image", "\n", "# Feathered mask -> alpha channel", "\n", "k", "=", "cv2", ".", "getStructuringElement", "(", "cv2", ".", "MORPH_ELLIPSE", ",", "(", "f", ",", "f", ")", ")", "\n", "alpha", "=", "cv2", ".", "blur", "(", "cv2", ".", "erode", "(", "mask", ",", "k", ")", "*", "255", ",", "(", "f", ",", "f", ")", ")", "\n", "alpha", "=", "alpha", "[", "...", ",", "None", "]", "\n", "target", "=", "np", ".", "concatenate", "(", "(", "target", ",", "alpha", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# Inpaint the target area", "\n", "\n", "mask0", "=", "cv2", ".", "erode", "(", "mask", ",", "cv2", ".", "getStructuringElement", "(", "cv2", ".", "MORPH_ELLIPSE", ",", "(", "d", ",", "d", ")", ")", ")", "\n", "mask1", "=", "cv2", ".", "dilate", "(", "mask", ",", "cv2", ".", "getStructuringElement", "(", "cv2", ".", "MORPH_ELLIPSE", ",", "(", "d", "*", "2", ",", "d", "*", "2", ")", ")", ")", "\n", "\n", "if", "not", "fast", ":", "\n", "            ", "image", "=", "cv2", ".", "inpaint", "(", "image", ",", "mask1", ",", "inpaintRadius", "=", "d", ",", "flags", "=", "cv2", ".", "INPAINT_TELEA", ")", "\n", "", "else", ":", "\n", "            ", "mask2", "=", "cv2", ".", "cvtColor", "(", "mask1", ",", "cv2", ".", "COLOR_GRAY2BGR", ")", "\n", "image", "=", "cv2", ".", "bitwise_and", "(", "image", ",", "(", "1", "-", "mask2", ")", "*", "255", ")", "+", "mask2", "*", "128", "\n", "\n", "# Blur the inpainted border", "\n", "\n", "", "m", "=", "(", "1", "-", "mask0", ")", "*", "mask1", "\n", "m", "=", "cv2", ".", "blur", "(", "m", "*", "255", ",", "ksize", "=", "(", "d", ",", "d", ")", ")", "\n", "m", "=", "m", "[", "...", ",", "None", "]", "/", "255", "\n", "bim", "=", "cv2", ".", "blur", "(", "image", ",", "ksize", "=", "(", "d", ",", "d", ")", ")", "\n", "image", "=", "(", "bim", "*", "m", "+", "(", "1", "-", "m", ")", "*", "image", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "target", "=", "torch", ".", "from_numpy", "(", "target", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", ".", "to", "(", "im", ".", "device", ")", ".", "contiguous", "(", ")", "\n", "image", "=", "torch", ".", "from_numpy", "(", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", ".", "to", "(", "im", ".", "device", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "target", ",", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.filter_image": [[342, 353], ["numpy.array", "torch.as_tensor().float().view().to", "torch.nn.functional.conv2d().squeeze", "torch.as_tensor().float().view", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d().squeeze.unsqueeze", "torch.as_tensor().float", "torch.as_tensor"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.feature_extractor.ResnetFeatureExtractor.to"], ["", "@", "staticmethod", "\n", "def", "filter_image", "(", "image", ",", "kernel", ")", ":", "\n", "\n", "        ", "kernel", "=", "np", ".", "array", "(", "kernel", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "kernel", "is", "not", "None", "and", "kernel", ".", "shape", "!=", "(", "1", ",", "1", ")", ":", "\n", "            ", "fh", ",", "fw", "=", "kernel", ".", "shape", "\n", "fpad", "=", "fh", "//", "2", ",", "fw", "//", "2", "\n", "kernel", "=", "torch", ".", "as_tensor", "(", "kernel", ")", ".", "float", "(", ")", ".", "view", "(", "1", ",", "1", ",", "fh", ",", "fw", ")", ".", "to", "(", "image", ".", "device", ")", "\n", "image", "=", "F", ".", "conv2d", "(", "image", ".", "unsqueeze", "(", "1", ")", ",", "kernel", ",", "padding", "=", "fpad", ")", ".", "squeeze", "(", "1", ")", "# per-channel filtering", "\n", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.warp_and_filter_image": [[354, 369], ["cls.filter_image.float", "numpy.array", "lib.image.warp_affine().clamp", "cls.filter_image", "lib.image.warp_affine"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.filter_image", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.image.warp_affine"], ["", "@", "classmethod", "\n", "def", "warp_and_filter_image", "(", "cls", ",", "image", ",", "H", ",", "kernel", ")", ":", "\n", "        ", "\"\"\" Warp and filter a whole image\n        :param image:   Image to transform (RGB, 0-255 value, byte tensor, shape C,H,W)\n        :param H:       Linear transform (3x3 matrix)\n        :param kernel:  2D filter kernel to apply to the target before warping and pasting\n        \"\"\"", "\n", "image", "=", "image", ".", "float", "(", ")", "\n", "sz", "=", "image", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "H", "=", "np", ".", "array", "(", "H", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "image", "=", "warp_affine", "(", "image", ",", "H", ",", "sz", ")", ".", "clamp", "(", "0", ",", "255", ")", "\n", "image", "=", "cls", ".", "filter_image", "(", "image", ",", "kernel", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.warp_filter_and_paste": [[371, 405], ["image.byte.byte.float", "cls.filter_image.float", "numpy.array", "lib.image.warp_affine().clamp", "lib.image.warp_affine", "cls.filter_image", "image.byte.byte.byte", "target[].unsqueeze", "lib.image.warp_affine"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.image.warp_affine", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.filter_image", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.image.warp_affine"], ["", "@", "classmethod", "\n", "def", "warp_filter_and_paste", "(", "cls", ",", "image", ",", "target", ",", "labels", ",", "H", ",", "kernel", ")", ":", "\n", "        ", "\"\"\" Warp the target and its mask according the the H transform and paste the target into the image.\n        :param image:   Background image to paint into (RGB, 0-255 value, byte tensor)\n        :param target:  Target image (RGBA, 0-255 value, byte tensor)\n        :param labels:  Target labels\n        :param H:       Linear transform (3x3 matrix)\n        :param kernel:  2D filter kernel to apply to the target before warping and pasting\n        :return: (image with warped target pasted into it, warped mask)\n        \"\"\"", "\n", "\n", "image", "=", "image", ".", "float", "(", ")", "\n", "target", "=", "target", ".", "float", "(", ")", "\n", "\n", "# Warp", "\n", "\n", "sz", "=", "image", ".", "shape", "[", "-", "2", ":", "]", "\n", "H", "=", "np", ".", "array", "(", "H", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "target", "=", "warp_affine", "(", "target", ",", "H", ",", "sz", ")", ".", "clamp", "(", "0", ",", "255", ")", "\n", "labels", "=", "warp_affine", "(", "labels", ",", "H", ",", "sz", ",", "'nearest'", ")", "\n", "\n", "# Filter", "\n", "\n", "target", "=", "cls", ".", "filter_image", "(", "target", ",", "kernel", ")", "\n", "# Not blurring the labels", "\n", "\n", "# Paste", "\n", "\n", "alpha", "=", "target", "[", "3", "]", ".", "unsqueeze", "(", "0", ")", "/", "255", "\n", "target", "=", "target", "[", ":", "3", "]", "\n", "image", "=", "target", "*", "alpha", "+", "image", "*", "(", "1", "-", "alpha", ")", "\n", "image", "=", "image", ".", "byte", "(", ")", "\n", "\n", "return", "image", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.augment_from_specs": [[406, 431], ["augmenter.ImageAugmenter.get_transform", "augmenter.ImageAugmenter.warp_filter_and_paste", "augmenter.ImageAugmenter.get_transform", "augmenter.ImageAugmenter.warp_and_filter_image"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.get_transform", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.warp_filter_and_paste", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.get_transform", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.warp_and_filter_image"], ["", "def", "augment_from_specs", "(", "self", ",", "image", ",", "target", ",", "target_mask", ",", "tg_aspec", ":", "AugmentationSpec", ",", "tg_bbox", ",", "\n", "bg_aspec", ":", "AugmentationSpec", "=", "None", ",", ")", ":", "\n", "        ", "\"\"\"  Create one augmented image from specifications.\n        :param image:        Inpainted Source image (tensor, shape (3,H,W)\n        :param target:       Target source image (tensor, shape (3,H,W)\n        :param target_mask:  Target mask. Nonzero pixels will be cut out\n        :param tg_aspec:     Target AugmentationSpec\n        :param tg_bbox:      Target bounding box (center_x, center_y, width, height)\n        :param bg_aspec:     [Optional] Background AugmentationSpec\n\n        :return: Warped (image, labels)\n        \"\"\"", "\n", "\n", "if", "bg_aspec", "is", "not", "None", ":", "\n", "            ", "h", ",", "w", "=", "image", ".", "shape", "[", "-", "2", ":", "]", "\n", "bg_bbox", "=", "(", "w", "/", "2", ",", "h", "/", "2", ",", "w", ",", "h", ")", "\n", "T", ",", "G", "=", "self", ".", "get_transform", "(", "bg_aspec", ",", "bg_bbox", ",", "image", ".", "shape", "[", "-", "2", ":", "]", ",", "limit_scale", "=", "False", ")", "\n", "wimage", "=", "self", ".", "warp_and_filter_image", "(", "image", ",", "T", ",", "G", ")", "\n", "", "else", ":", "\n", "            ", "wimage", "=", "image", "\n", "\n", "", "T", ",", "G", "=", "self", ".", "get_transform", "(", "tg_aspec", ",", "tg_bbox", ",", "wimage", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "wimage", ",", "wlabels", "=", "self", ".", "warp_filter_and_paste", "(", "wimage", ",", "target", ",", "target_mask", ",", "T", ",", "G", ")", "\n", "\n", "return", "wimage", ",", "wlabels", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.center_bbox_from_mask": [[432, 453], ["mask.squeeze().sum().nonzero().view().cpu().numpy", "mask.squeeze().sum().nonzero().view().cpu().numpy", "mask.squeeze().sum().nonzero().view().cpu", "mask.squeeze().sum().nonzero().view().cpu", "len", "len", "mask.squeeze().sum().nonzero().view", "mask.squeeze().sum().nonzero().view", "mask.squeeze().sum().nonzero", "mask.squeeze().sum().nonzero", "mask.squeeze().sum", "mask.squeeze().sum", "mask.squeeze", "mask.squeeze"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.GumbelModule.GumbleSoftmax.cpu", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.GumbelModule.GumbleSoftmax.cpu"], ["", "@", "staticmethod", "\n", "def", "center_bbox_from_mask", "(", "mask", ")", ":", "\n", "        ", "\"\"\" Find the axis-aligned bounding box covering all non-zero pixels in the input mask.\n        :param mask:  mask image, tensor shaped (1, H, W) or (H, W)\n        :return: list of N bounding box-tuples (center_x, center_y, w, h). w == 0 and h == 0 if the mask is empty\n        \"\"\"", "\n", "# Find the indices of all nonzero rows and columns in the mask", "\n", "ys", "=", "mask", ".", "squeeze", "(", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "xs", "=", "mask", ".", "squeeze", "(", ")", ".", "sum", "(", "dim", "=", "-", "2", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "len", "(", "ys", ")", ">", "0", "and", "len", "(", "xs", ")", ">", "0", ":", "\n", "            ", "x", ",", "y", "=", "xs", "[", "0", "]", ",", "ys", "[", "0", "]", "\n", "w", "=", "xs", "[", "-", "1", "]", "-", "xs", "[", "0", "]", "+", "1", "\n", "h", "=", "ys", "[", "-", "1", "]", "-", "ys", "[", "0", "]", "+", "1", "\n", "", "else", ":", "\n", "            ", "x", ",", "y", ",", "w", ",", "h", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "", "x", "+=", "w", "/", "2", "\n", "y", "+=", "h", "/", "2", "\n", "\n", "return", "x", ",", "y", ",", "w", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.verify_frame": [[454, 472], ["None"], "methods", ["None"], ["", "def", "verify_frame", "(", "self", ",", "obj_ids", ",", "wlabels", ",", "have_no_background", ")", ":", "\n", "        ", "\"\"\" Verify all target objects are visible in the new frame\n        :param obj_ids: list of object ids (excluding the background) to test for\n        :param wlabels:  Labels image\n        :param have_no_background:  Whether the background is completely hidden by objects\n        :return:  True on success\n        \"\"\"", "\n", "min_px_count", "=", "self", ".", "params", ".", "min_px_count", "\n", "max_px_count", "=", "wlabels", ".", "shape", "[", "-", "1", "]", "*", "wlabels", ".", "shape", "[", "-", "2", "]", "-", "min_px_count", "\n", "good_frame", "=", "True", "\n", "\n", "for", "oid", "in", "obj_ids", ":", "\n", "            ", "px_count", "=", "(", "wlabels", "==", "oid", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "good_frame", "=", "(", "px_count", ">=", "min_px_count", ")", "and", "(", "px_count", "<", "max_px_count", "or", "have_no_background", ")", "\n", "if", "not", "good_frame", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "good_frame", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.augment_first_frame": [[473, 556], ["lb.sum", "augmenter.ImageAugmenter.center_bbox_from_mask", "augmenter.ImageAugmenter.cut_and_inpaint", "copy.deepcopy", "augmenter.ImageAugmenter.generate_target_locations", "torch.stack.insert", "torch.stack.insert", "torch.stack", "torch.stack", "lb.numel", "ValueError", "ValueError", "copy.deepcopy", "len", "augmenter.ImageAugmenter.generate_specs2", "zip", "len", "list", "numpy.random.shuffle", "RuntimeError", "augmenter.AugmentationParams2", "augmenter.ImageAugmenter.generate_specs2", "augmenter.ImageAugmenter.augment_from_specs", "augmenter.ImageAugmenter.verify_frame", "range", "augmenter.AugmentationParams2", "torch.stack.append", "torch.stack.append", "len"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.center_bbox_from_mask", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.cut_and_inpaint", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.generate_target_locations", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.generate_specs2", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.lib.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.generate_specs2", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.augment_from_specs", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.augmenter.ImageAugmenter.verify_frame"], ["", "def", "augment_first_frame", "(", "self", ",", "im", ",", "lb", ")", ":", "\n", "\n", "        ", "p", "=", "self", ".", "params", "\n", "im_sz", "=", "im", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "# target_mask = (lb == 1).byte()", "\n", "\n", "# Verify target object", "\n", "\n", "target_mask", "=", "lb", "\n", "obj_pix_counts", "=", "lb", ".", "sum", "(", ")", "\n", "no_background", "=", "obj_pix_counts", "==", "lb", ".", "numel", "(", ")", "\n", "if", "obj_pix_counts", "<", "self", ".", "params", ".", "min_px_count", ":", "\n", "            ", "raise", "ValueError", "(", "\"Augmentation failed: Target object is too small.\"", ")", "\n", "\n", "# obj_ids, obj_pix_counts = np.unique(lb.cpu().numpy(), return_counts=True)", "\n", "# no_background = (obj_ids[0] != 0)", "\n", "# if not no_background:  # Have background -> remove the background class", "\n", "#     obj_ids = obj_ids[1:]", "\n", "#     obj_pix_counts = obj_pix_counts[1:]", "\n", "# if np.any(obj_pix_counts < self.params.min_px_count):", "\n", "#     raise ValueError(\"Augmentation failed: Target object is too small.\")", "\n", "\n", "", "tg_bbox", "=", "self", ".", "center_bbox_from_mask", "(", "target_mask", ")", "\n", "if", "tg_bbox", "[", "-", "2", ":", "]", "==", "(", "0", ",", "0", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Augmentation failed: No object to augment.\"", ")", "\n", "\n", "# Cut and inpaint", "\n", "\n", "", "target", ",", "inpainted_image", "=", "self", ".", "cut_and_inpaint", "(", "im", ",", "target_mask", ",", "d", "=", "1", ",", "f", "=", "1", ",", "fast", "=", "False", ")", "\n", "\n", "# Finalize parameters", "\n", "\n", "fg_params", "=", "deepcopy", "(", "p", ".", "fg_aug_params", ")", "\n", "fg_params", ".", "location", "=", "self", ".", "generate_target_locations", "(", "p", ".", "num_aug", ",", "im_sz", ")", "\n", "bg_params", "=", "deepcopy", "(", "p", ".", "bg_aug_params", ")", "if", "'bg_aug_params'", "in", "p", "else", "None", "\n", "\n", "N", "=", "p", ".", "num_aug", "-", "1", "\n", "\n", "aug_images", "=", "[", "]", "\n", "aug_labels", "=", "[", "]", "\n", "retries", "=", "-", "1", "\n", "\n", "while", "len", "(", "aug_images", ")", "<", "N", ":", "\n", "\n", "            ", "retries", "+=", "1", "\n", "if", "retries", ">", "self", ".", "max_retries", ":", "\n", "                ", "RuntimeError", "(", "\"Augmentation failed: Not enough samples after %d retries.\"", "%", "(", "self", ".", "max_retries", ")", ")", "\n", "\n", "# Generate N augmentation specs", "\n", "\n", "", "fg_aspecs", "=", "self", ".", "generate_specs2", "(", "AugmentationParams2", "(", "**", "fg_params", ")", ")", "\n", "if", "bg_params", "is", "not", "None", ":", "\n", "                ", "bg_aspecs", "=", "self", ".", "generate_specs2", "(", "AugmentationParams2", "(", "**", "bg_params", ")", ")", "\n", "", "else", ":", "\n", "                ", "bg_aspecs", "=", "[", "None", "]", "*", "N", "\n", "\n", "# Warp, blur and paste", "\n", "\n", "", "for", "fg_aspec", ",", "bg_aspec", "in", "zip", "(", "fg_aspecs", ",", "bg_aspecs", ")", ":", "\n", "                ", "wimage", ",", "wlabels", "=", "self", ".", "augment_from_specs", "(", "inpainted_image", ",", "target", ",", "target_mask", ",", "fg_aspec", ",", "tg_bbox", ",", "bg_aspec", ")", "\n", "good_frame", "=", "self", ".", "verify_frame", "(", "[", "1", "]", ",", "wlabels", ",", "no_background", ")", "\n", "if", "good_frame", ":", "\n", "                    ", "aug_images", ".", "append", "(", "wimage", ")", "\n", "aug_labels", ".", "append", "(", "wlabels", ")", "\n", "\n", "", "", "", "if", "len", "(", "aug_images", ")", ">", "N", ":", "\n", "# Needed to retry ... shuffle again and crop to N", "\n", "            ", "iis", "=", "list", "(", "range", "(", "len", "(", "aug_images", ")", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "iis", ")", "\n", "iis", "=", "iis", "[", ":", "N", "]", "\n", "aug_images", "=", "[", "aug_images", "[", "i", "]", "for", "i", "in", "iis", "]", "\n", "aug_labels", "=", "[", "aug_labels", "[", "i", "]", "for", "i", "in", "iis", "]", "\n", "\n", "# Insert original frame first", "\n", "\n", "", "aug_images", ".", "insert", "(", "0", ",", "im", ")", "\n", "aug_labels", ".", "insert", "(", "0", ",", "lb", ")", "\n", "\n", "aug_images", "=", "torch", ".", "stack", "(", "aug_images", ")", "\n", "aug_labels", "=", "torch", ".", "stack", "(", "aug_labels", ")", "\n", "\n", "return", "aug_images", ",", "aug_labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.MinimizationProblem.__call__": [[6, 9], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "x", ":", "TensorList", ")", "->", "TensorList", ":", "\n", "        ", "\"\"\"Shall compute the residuals.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.MinimizationProblem.ip_input": [[10, 13], ["sum", "a.view", "b.view"], "methods", ["None"], ["", "def", "ip_input", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "\"\"\"Inner product of the input space.\"\"\"", "\n", "return", "sum", "(", "a", ".", "view", "(", "-", "1", ")", "@", "b", ".", "view", "(", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.MinimizationProblem.M1": [[14, 16], ["None"], "methods", ["None"], ["", "def", "M1", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.GaussNewtonCG.__init__": [[20, 49], ["torch.ones", "torch.zeros", "torch.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "problem", ":", "MinimizationProblem", ",", "variable", ":", "TensorList", ",", "cg_eps", "=", "0.0", ",", "fletcher_reeves", "=", "True", ",", "\n", "standard_alpha", "=", "True", ",", "direction_forget_factor", "=", "0", ",", "step_alpha", "=", "1.0", ")", ":", "\n", "\n", "        ", "self", ".", "fletcher_reeves", "=", "fletcher_reeves", "\n", "self", ".", "standard_alpha", "=", "standard_alpha", "\n", "self", ".", "direction_forget_factor", "=", "direction_forget_factor", "\n", "\n", "# State", "\n", "self", ".", "p", "=", "None", "\n", "self", ".", "rho", "=", "torch", ".", "ones", "(", "1", ")", "\n", "self", ".", "r_prev", "=", "None", "\n", "\n", "# Right hand side", "\n", "self", ".", "b", "=", "None", "\n", "\n", "self", ".", "problem", "=", "problem", "\n", "self", ".", "x", "=", "variable", "\n", "\n", "self", ".", "cg_eps", "=", "cg_eps", "\n", "self", ".", "f0", "=", "None", "\n", "self", ".", "g", "=", "None", "\n", "self", ".", "dfdxt_g", "=", "None", "\n", "\n", "self", ".", "residuals", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "self", ".", "external_losses", "=", "[", "]", "\n", "self", ".", "internal_losses", "=", "[", "]", "\n", "self", ".", "gradient_mags", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "\n", "self", ".", "step_alpha", "=", "step_alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.GaussNewtonCG.clear_temp": [[50, 54], ["None"], "methods", ["None"], ["", "def", "clear_temp", "(", "self", ")", ":", "\n", "        ", "self", ".", "f0", "=", "None", "\n", "self", ".", "g", "=", "None", "\n", "self", ".", "dfdxt_g", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.GaussNewtonCG.run": [[55, 76], ["optimizer.GaussNewtonCG.problem.initialize", "isinstance", "len", "optimizer.GaussNewtonCG.x.detach_", "optimizer.GaussNewtonCG.clear_temp", "optimizer.GaussNewtonCG.run_GN_iter", "ValueError"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.initialize", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.GaussNewtonCG.clear_temp", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.GaussNewtonCG.run_GN_iter"], ["", "def", "run", "(", "self", ",", "num_cg_iter", ",", "num_gn_iter", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "problem", ".", "initialize", "(", ")", "\n", "\n", "if", "isinstance", "(", "num_cg_iter", ",", "int", ")", ":", "\n", "            ", "if", "num_gn_iter", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'Must specify number of GN iter if CG iter is constant'", ")", "\n", "", "num_cg_iter", "=", "[", "num_cg_iter", "]", "*", "num_gn_iter", "\n", "\n", "", "num_gn_iter", "=", "len", "(", "num_cg_iter", ")", "\n", "if", "num_gn_iter", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "# with torch.autograd.profiler.profile(use_cuda=True) as prof:", "\n", "", "for", "cg_iter", "in", "num_cg_iter", ":", "\n", "            ", "self", ".", "run_GN_iter", "(", "cg_iter", ")", "\n", "\n", "", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "clear_temp", "(", ")", "\n", "\n", "return", "self", ".", "external_losses", ",", "self", ".", "internal_losses", ",", "self", ".", "residuals", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.GaussNewtonCG.run_GN_iter": [[77, 92], ["optimizer.GaussNewtonCG.x.requires_grad_", "optimizer.GaussNewtonCG.problem", "optimizer.GaussNewtonCG.f0.detach", "optimizer.GaussNewtonCG.g.requires_grad_", "lib.tensorlist.TensorList", "optimizer.GaussNewtonCG.run_CG", "optimizer.GaussNewtonCG.x.detach_", "min", "torch.autograd.grad", "optimizer.GaussNewtonCG.dfdxt_g.detach"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.GaussNewtonCG.run_CG"], ["", "def", "run_GN_iter", "(", "self", ",", "num_cg_iter", ")", ":", "\n", "\n", "        ", "self", ".", "x", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "self", ".", "f0", "=", "self", ".", "problem", "(", "self", ".", "x", ")", "\n", "self", ".", "g", "=", "self", ".", "f0", ".", "detach", "(", ")", "\n", "self", ".", "g", ".", "requires_grad_", "(", "True", ")", "\n", "self", ".", "dfdxt_g", "=", "TensorList", "(", "torch", ".", "autograd", ".", "grad", "(", "self", ".", "f0", ",", "self", ".", "x", ",", "self", ".", "g", ",", "create_graph", "=", "True", ")", ")", "# df/dx^t @ f0", "\n", "self", ".", "b", "=", "-", "self", ".", "dfdxt_g", ".", "detach", "(", ")", "\n", "\n", "delta_x", ",", "res", "=", "self", ".", "run_CG", "(", "num_cg_iter", ",", "eps", "=", "self", ".", "cg_eps", ")", "\n", "\n", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "x", "+=", "self", ".", "step_alpha", "*", "delta_x", "\n", "self", ".", "step_alpha", "=", "min", "(", "self", ".", "step_alpha", "*", "1.2", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.GaussNewtonCG.reset_state": [[93, 97], ["torch.ones"], "methods", ["None"], ["", "def", "reset_state", "(", "self", ")", ":", "\n", "        ", "self", ".", "p", "=", "None", "\n", "self", ".", "rho", "=", "torch", ".", "ones", "(", "1", ")", "\n", "self", ".", "r_prev", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.GaussNewtonCG.run_CG": [[98, 154], ["range", "optimizer.GaussNewtonCG.reset_state", "optimizer.GaussNewtonCG.b.clone", "optimizer.GaussNewtonCG.problem.M1", "optimizer.GaussNewtonCG.ip", "optimizer.GaussNewtonCG.A", "optimizer.GaussNewtonCG.ip", "optimizer.GaussNewtonCG.A", "optimizer.GaussNewtonCG.clone", "beta.clamp.clamp.clamp", "optimizer.GaussNewtonCG.clone", "optimizer.GaussNewtonCG.ip", "optimizer.GaussNewtonCG.ip"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.GaussNewtonCG.reset_state", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.MinimizationProblem.M1", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.GaussNewtonCG.ip", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.GaussNewtonCG.A", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.GaussNewtonCG.ip", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.GaussNewtonCG.A", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.GaussNewtonCG.ip", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.GaussNewtonCG.ip"], ["", "def", "run_CG", "(", "self", ",", "num_iter", ",", "x", "=", "None", ",", "eps", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"Main conjugate gradient method\"\"\"", "\n", "\n", "# Apply forgetting factor", "\n", "if", "self", ".", "direction_forget_factor", "==", "0", ":", "\n", "            ", "self", ".", "reset_state", "(", ")", "\n", "", "elif", "self", ".", "p", "is", "not", "None", ":", "\n", "            ", "self", ".", "rho", "/=", "self", ".", "direction_forget_factor", "\n", "\n", "", "if", "x", "is", "None", ":", "\n", "            ", "r", "=", "self", ".", "b", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "            ", "r", "=", "self", ".", "b", "-", "self", ".", "A", "(", "x", ")", "\n", "\n", "# Loop over iterations", "\n", "", "for", "ii", "in", "range", "(", "num_iter", ")", ":", "\n", "\n", "            ", "z", "=", "self", ".", "problem", ".", "M1", "(", "r", ")", "# Preconditioner", "\n", "\n", "rho1", "=", "self", ".", "rho", "\n", "self", ".", "rho", "=", "self", ".", "ip", "(", "r", ",", "z", ")", "\n", "\n", "if", "self", ".", "p", "is", "None", ":", "\n", "                ", "self", ".", "p", "=", "z", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "fletcher_reeves", ":", "\n", "                    ", "beta", "=", "self", ".", "rho", "/", "rho1", "\n", "", "else", ":", "\n", "                    ", "rho2", "=", "self", ".", "ip", "(", "self", ".", "r_prev", ",", "z", ")", "\n", "beta", "=", "(", "self", ".", "rho", "-", "rho2", ")", "/", "rho1", "\n", "\n", "", "beta", "=", "beta", ".", "clamp", "(", "0", ")", "\n", "self", ".", "p", "=", "z", "+", "self", ".", "p", "*", "beta", "\n", "\n", "", "q", "=", "self", ".", "A", "(", "self", ".", "p", ")", "\n", "pq", "=", "self", ".", "ip", "(", "self", ".", "p", ",", "q", ")", "\n", "\n", "if", "self", ".", "standard_alpha", ":", "\n", "                ", "alpha", "=", "self", ".", "rho", "/", "pq", "\n", "", "else", ":", "\n", "                ", "alpha", "=", "self", ".", "ip", "(", "self", ".", "p", ",", "r", ")", "/", "pq", "\n", "\n", "# Save old r for PR formula", "\n", "", "if", "not", "self", ".", "fletcher_reeves", ":", "\n", "                ", "self", ".", "r_prev", "=", "r", ".", "clone", "(", ")", "\n", "\n", "# Form new iterate", "\n", "", "if", "x", "is", "None", ":", "\n", "                ", "x", "=", "self", ".", "p", "*", "alpha", "\n", "", "else", ":", "\n", "                ", "x", "+=", "self", ".", "p", "*", "alpha", "\n", "\n", "", "if", "ii", "<", "num_iter", "-", "1", ":", "\n", "                ", "r", "-=", "q", "*", "alpha", "\n", "\n", "", "", "return", "x", ",", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.GaussNewtonCG.A": [[155, 158], ["torch.autograd.grad", "lib.tensorlist.TensorList", "torch.autograd.grad"], "methods", ["None"], ["", "def", "A", "(", "self", ",", "x", ")", ":", "\n", "        ", "dfdx_x", "=", "torch", ".", "autograd", ".", "grad", "(", "self", ".", "dfdxt_g", ",", "self", ".", "g", ",", "x", ",", "retain_graph", "=", "True", ")", "\n", "return", "TensorList", "(", "torch", ".", "autograd", ".", "grad", "(", "self", ".", "f0", ",", "self", ".", "x", ",", "dfdx_x", ",", "retain_graph", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.GaussNewtonCG.ip": [[159, 161], ["optimizer.GaussNewtonCG.problem.ip_input"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.optimizer.MinimizationProblem.ip_input"], ["", "def", "ip", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "return", "self", ".", "problem", ".", "ip_input", "(", "a", ",", "b", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.__init__": [[6, 23], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ",", "feature_size", ",", "labels_size", ",", "device", ",", "learning_rates", ")", ":", "\n", "        ", "\"\"\"\n        :param capacity:       Memory capacity - number of samples (int)\n        :param feature_sizes:  {feature name: feature size shape(C,H,W)} of feature sizes,\n                               C is the number of *compressed* channels\n        :param labels_size:    (H,W) size of the labels image\n        \"\"\"", "\n", "self", ".", "samples", "=", "torch", ".", "zeros", "(", "capacity", ",", "*", "feature_size", ",", "device", "=", "device", ")", "\n", "self", ".", "weights", "=", "torch", ".", "zeros", "(", "capacity", ",", "device", "=", "device", ")", "\n", "self", ".", "labels", "=", "torch", ".", "zeros", "(", "capacity", ",", "*", "labels_size", ",", "device", "=", "device", ")", "\n", "self", ".", "pixel_weights", "=", "torch", ".", "zeros", "(", "capacity", ",", "*", "labels_size", ",", "device", "=", "device", ")", "\n", "\n", "self", ".", "_capacity", "=", "capacity", "\n", "self", ".", "current_size", "=", "0", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "previous_replace_ind", "=", "None", "\n", "self", ".", "learning_rates", "=", "learning_rates", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.capacity": [[24, 27], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "capacity", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.clear": [[28, 32], ["w.zero_"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "current_size", "=", "0", "\n", "for", "w", "in", "self", ".", "weights", ":", "\n", "            ", "w", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.initialize": [[33, 47], ["init_features.detach", "init_labels.float", "memory.Memory.weights[].sum"], "methods", ["None"], ["", "", "def", "initialize", "(", "self", ",", "init_features", ",", "init_labels", ",", "pixel_weights", ")", ":", "\n", "\n", "        ", "K", "=", "init_features", ".", "shape", "[", "0", "]", "# Number of samples", "\n", "assert", "init_labels", ".", "shape", "[", "0", "]", "==", "K", "\n", "\n", "self", ".", "samples", "[", ":", "K", "]", "=", "init_features", ".", "detach", "(", ")", "\n", "self", ".", "weights", "[", ":", "K", "]", "=", "1.0", "/", "K", "\n", "self", ".", "weights", "[", "0", "]", "=", "2.0", "/", "K", "\n", "self", ".", "weights", "[", ":", "K", "]", "=", "self", ".", "weights", "[", ":", "K", "]", "/", "self", ".", "weights", "[", ":", "K", "]", ".", "sum", "(", ")", "\n", "\n", "self", ".", "labels", "[", ":", "K", "]", "=", "init_labels", ".", "float", "(", ")", "\n", "self", ".", "pixel_weights", "[", ":", "K", "]", "=", "pixel_weights", "\n", "\n", "self", ".", "current_size", "=", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.insert_at": [[48, 58], ["ft.detach"], "methods", ["None"], ["", "def", "insert_at", "(", "self", ",", "p", ",", "ft", ",", "labels", ",", "pixel_weights", ")", ":", "\n", "        ", "\"\"\" Insert a sample\n        :param p:  Per-feature memory locations\n        :param ft:   Feature maps to insert\n        :param labels:     The labels image to insert\n        :param weights:    Per-feature weights\n        \"\"\"", "\n", "self", ".", "samples", "[", "p", "]", "=", "ft", ".", "detach", "(", ")", "\n", "self", ".", "labels", "[", "p", "]", "=", "labels", "\n", "self", ".", "pixel_weights", "[", "p", "]", "=", "pixel_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.update": [[59, 64], ["memory.Memory.update_sample_weights", "memory.Memory.insert_at", "min"], "methods", ["home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.update_sample_weights", "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.insert_at"], ["", "def", "update", "(", "self", ",", "features", ",", "labels", ",", "pixel_weights", ")", ":", "\n", "\n", "        ", "self", ".", "previous_replace_ind", "=", "self", ".", "update_sample_weights", "(", "self", ".", "previous_replace_ind", ")", "\n", "self", ".", "insert_at", "(", "self", ".", "previous_replace_ind", ",", "features", ",", "labels", ",", "pixel_weights", ")", "\n", "self", ".", "current_size", "=", "min", "(", "self", ".", "current_size", "+", "1", ",", "self", ".", "_capacity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HYOJINPARK_Reuse_VOS.model.memory.Memory.update_sample_weights": [[65, 93], ["sw.sum", "torch.min", "r_ind.item.item.item"], "methods", ["None"], ["", "def", "update_sample_weights", "(", "self", ",", "previous_replace_ind", ")", ":", "\n", "# Update weights and get index to replace", "\n", "\n", "        ", "num_samp", "=", "self", ".", "current_size", "\n", "\n", "sw", "=", "self", ".", "weights", "\n", "lr", "=", "self", ".", "learning_rates", "\n", "prev_ind", "=", "previous_replace_ind", "\n", "\n", "if", "num_samp", "==", "0", "or", "lr", "==", "1", ":", "\n", "            ", "sw", "[", ":", "]", "=", "0", "\n", "sw", "[", "0", "]", "=", "1", "\n", "r_ind", "=", "0", "\n", "", "else", ":", "\n", "# Get index to replace", "\n", "            ", "_", ",", "r_ind", "=", "torch", ".", "min", "(", "sw", ",", "0", ")", "\n", "r_ind", "=", "r_ind", ".", "item", "(", ")", "\n", "\n", "# Update weights", "\n", "if", "prev_ind", "is", "None", ":", "\n", "                ", "sw", "/=", "(", "1", "-", "lr", ")", "\n", "sw", "[", "r_ind", "]", "=", "lr", "\n", "", "else", ":", "\n", "                ", "sw", "[", "r_ind", "]", "=", "sw", "[", "prev_ind", "]", "/", "(", "1", "-", "lr", ")", "\n", "\n", "", "", "sw", "/=", "sw", ".", "sum", "(", ")", "\n", "\n", "return", "r_ind", "\n", "", "", ""]]}