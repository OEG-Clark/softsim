{"home.repos.pwc.inspect_result.bapi_lpp-sgd.None.main.main": [[7, 28], ["prepare_experiment", "time.perf_counter", "time.perf_counter", "print", "run", "run", "str", "run", "run", "sys.exit"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.args.prepare_experiment", "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.MBSGD.run", "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.MBSGD.run", "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.MBSGD.run", "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.MBSGD.run"], ["def", "main", "(", ")", ":", "\n", "    ", "from", "utilities", ".", "args", "import", "prepare_experiment", "\n", "args", "=", "prepare_experiment", "(", ")", "\n", "# print(args)", "\n", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "if", "args", ".", "training_type", "==", "'LPPSGD'", ":", "\n", "        ", "from", "train", ".", "LPPSGD", "import", "run", "\n", "run", "(", "args", ")", "\n", "", "elif", "args", ".", "training_type", "==", "'LAPSGD'", ":", "\n", "        ", "from", "train", ".", "LAPSGD", "import", "run", "\n", "run", "(", "args", ")", "\n", "", "elif", "args", ".", "training_type", "==", "'MBSGD'", ":", "\n", "        ", "from", "train", ".", "MBSGD", "import", "run", "\n", "run", "(", "args", ")", "\n", "", "elif", "args", ".", "training_type", "==", "'PLSGD'", ":", "\n", "        ", "from", "train", ".", "PLSGD", "import", "run", "\n", "run", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "exit", "(", "\"Wrong training-type!\"", ")", "\n", "", "finish", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "'Total_time='", "+", "str", "(", "' % d'", "%", "(", "finish", "-", "start", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.smallnet.SmallNet.__init__": [[7, 14], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SmallNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "10", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "10", ",", "20", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "conv2_drop", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "320", ",", "50", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "50", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.smallnet.SmallNet.forward": [[15, 23], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "smallnet.SmallNet.view", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "smallnet.SmallNet.fc2", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "smallnet.SmallNet.fc1", "smallnet.SmallNet.conv1", "smallnet.SmallNet.conv2_drop", "smallnet.SmallNet.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "F", ".", "max_pool2d", "(", "self", ".", "conv1", "(", "x", ")", ",", "2", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "F", ".", "max_pool2d", "(", "self", ".", "conv2_drop", "(", "self", ".", "conv2", "(", "x", ")", ")", ",", "2", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "320", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.SqeezeExcitation.__init__": [[9, 17], ["torch.Module.__init__", "int", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "swish.Swish", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "se_ratio", ")", ":", "\n", "        ", "super", "(", "SqeezeExcitation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "hidden_dim", "=", "int", "(", "inplanes", "*", "se_ratio", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "inplanes", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "inplanes", ",", "bias", "=", "False", ")", "\n", "self", ".", "swish", "=", "Swish", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.SqeezeExcitation.forward": [[18, 27], ["efficientnet.SqeezeExcitation.avg_pool().view", "efficientnet.SqeezeExcitation.fc1", "efficientnet.SqeezeExcitation.swish", "efficientnet.SqeezeExcitation.fc2", "efficientnet.SqeezeExcitation.sigmoid", "out.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "x.size", "out.unsqueeze().unsqueeze.unsqueeze().unsqueeze.expand_as", "efficientnet.SqeezeExcitation.avg_pool", "out.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc1", "(", "out", ")", "\n", "out", "=", "self", ".", "swish", "(", "out", ")", "\n", "out", "=", "self", ".", "fc2", "(", "out", ")", "\n", "out", "=", "self", ".", "sigmoid", "(", "out", ")", "\n", "out", "=", "out", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "out", "=", "x", "*", "out", ".", "expand_as", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.Bottleneck.__init__": [[30, 84], ["torch.Module.__init__", "swish.Swish", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "efficientnet.SqeezeExcitation", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "efficientnet.SqeezeExcitation", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "expand", ",", "\n", "se_ratio", ",", "\n", "prob", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "expand", "==", "1", ":", "\n", "            ", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "inplanes", "*", "expand", ",", "\n", "inplanes", "*", "expand", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "kernel_size", "//", "2", ",", "\n", "groups", "=", "inplanes", "*", "expand", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", "*", "expand", ",", "\n", "momentum", "=", "0.99", ",", "\n", "eps", "=", "1e-3", ")", "\n", "self", ".", "se", "=", "SqeezeExcitation", "(", "inplanes", "*", "expand", ",", "se_ratio", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "inplanes", "*", "expand", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "0.99", ",", "eps", "=", "1e-3", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "\n", "inplanes", "*", "expand", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", "*", "expand", ",", "\n", "momentum", "=", "0.99", ",", "\n", "eps", "=", "1e-3", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "inplanes", "*", "expand", ",", "\n", "inplanes", "*", "expand", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "kernel_size", "//", "2", ",", "\n", "groups", "=", "inplanes", "*", "expand", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", "*", "expand", ",", "\n", "momentum", "=", "0.99", ",", "\n", "eps", "=", "1e-3", ")", "\n", "self", ".", "se", "=", "SqeezeExcitation", "(", "inplanes", "*", "expand", ",", "se_ratio", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "inplanes", "*", "expand", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "0.99", ",", "eps", "=", "1e-3", ")", "\n", "\n", "", "self", ".", "swish", "=", "Swish", "(", ")", "\n", "self", ".", "correct_dim", "=", "(", "stride", "==", "1", ")", "and", "(", "inplanes", "==", "planes", ")", "\n", "self", ".", "prob", "=", "torch", ".", "Tensor", "(", "[", "prob", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.Bottleneck.forward": [[85, 111], ["hasattr", "efficientnet.Bottleneck.conv2", "efficientnet.Bottleneck.bn2", "efficientnet.Bottleneck.swish", "efficientnet.Bottleneck.se", "efficientnet.Bottleneck.conv3", "efficientnet.Bottleneck.bn3", "efficientnet.Bottleneck.conv1", "efficientnet.Bottleneck.bn1", "efficientnet.Bottleneck.swish", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "if", "not", "torch", ".", "bernoulli", "(", "self", ".", "prob", ")", ":", "\n", "# drop", "\n", "                ", "return", "x", "\n", "\n", "", "", "if", "hasattr", "(", "self", ",", "'conv1'", ")", ":", "\n", "            ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "swish", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "x", "\n", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "# depth wise conv", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "swish", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "se", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "correct_dim", ":", "\n", "            ", "out", "+=", "x", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.MBConv.__init__": [[114, 151], ["torch.Module.__init__", "layer.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "efficientnet.Bottleneck", "layer.append", "layer.append", "efficientnet.Bottleneck", "efficientnet.Bottleneck"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "repeat", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "expand", ",", "\n", "se_ratio", ",", "\n", "sum_layer", ",", "\n", "count_layer", "=", "None", ",", "\n", "pl", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "MBConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layer", "=", "[", "]", "\n", "\n", "# not drop(stchastic depth)", "\n", "layer", ".", "append", "(", "\n", "Bottleneck", "(", "inplanes", ",", "planes", ",", "kernel_size", ",", "stride", ",", "expand", ",", "\n", "se_ratio", ")", ")", "\n", "\n", "for", "l", "in", "range", "(", "1", ",", "repeat", ")", ":", "\n", "            ", "if", "count_layer", "is", "None", ":", "\n", "                ", "layer", ".", "append", "(", "\n", "Bottleneck", "(", "planes", ",", "planes", ",", "kernel_size", ",", "1", ",", "expand", ",", "\n", "se_ratio", ")", ")", "\n", "", "else", ":", "\n", "# stochastic depth", "\n", "                ", "prob", "=", "1.0", "-", "(", "count_layer", "+", "l", ")", "/", "sum_layer", "*", "(", "1", "-", "pl", ")", "\n", "layer", ".", "append", "(", "\n", "Bottleneck", "(", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", ",", "\n", "1", ",", "\n", "expand", ",", "\n", "se_ratio", ",", "\n", "prob", "=", "prob", ")", ")", "\n", "\n", "", "", "self", ".", "layer", "=", "nn", ".", "Sequential", "(", "*", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.MBConv.forward": [[152, 155], ["efficientnet.MBConv.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "layer", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.Upsample.__init__": [[158, 161], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale", ")", ":", "\n", "        ", "super", "(", "Upsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.Upsample.forward": [[162, 167], ["torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "interpolate", "(", "x", ",", "\n", "scale_factor", "=", "self", ".", "scale", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.Flatten.__init": [[170, 172], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init", "(", "self", ")", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.Flatten.forward": [[173, 175], ["x.view", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.EfficientNet.__init__": [[178, 361], ["torch.Module.__init__", "sum", "efficientnet.Upsample", "swish.Swish", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "efficientnet.EfficientNet.modules", "round", "round", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "efficientnet.MBConv", "efficientnet.MBConv", "efficientnet.MBConv", "efficientnet.MBConv", "efficientnet.MBConv", "efficientnet.MBConv", "efficientnet.MBConv", "efficientnet.MBConv", "efficientnet.MBConv", "efficientnet.MBConv", "efficientnet.MBConv", "efficientnet.MBConv", "efficientnet.MBConv", "efficientnet.MBConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "swish.Swish", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "efficientnet.Flatten", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_classes", "=", "1000", ",", "\n", "width_coef", "=", "1.", ",", "\n", "depth_coef", "=", "1.", ",", "\n", "scale", "=", "1.", ",", "\n", "dropout_ratio", "=", "0.2", ",", "\n", "se_ratio", "=", "0.25", ",", "\n", "stochastic_depth", "=", "False", ",", "\n", "pl", "=", "0.5", ")", ":", "\n", "\n", "        ", "super", "(", "EfficientNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "channels", "=", "[", "32", ",", "16", ",", "24", ",", "40", ",", "80", ",", "112", ",", "192", ",", "320", ",", "1280", "]", "\n", "expands", "=", "[", "1", ",", "6", ",", "6", ",", "6", ",", "6", ",", "6", ",", "6", "]", "\n", "repeats", "=", "[", "1", ",", "2", ",", "2", ",", "3", ",", "3", ",", "4", ",", "1", "]", "\n", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "2", ",", "1", ",", "2", ",", "1", "]", "\n", "kernel_sizes", "=", "[", "3", ",", "3", ",", "5", ",", "3", ",", "5", ",", "5", ",", "3", "]", "\n", "depth", "=", "depth_coef", "\n", "width", "=", "width_coef", "\n", "\n", "channels", "=", "[", "round", "(", "x", "*", "width", ")", "\n", "for", "x", "in", "channels", "]", "# [int(x*width) for x in channels]", "\n", "repeats", "=", "[", "round", "(", "x", "*", "depth", ")", "\n", "for", "x", "in", "repeats", "]", "# [int(x*width) for x in repeats]", "\n", "\n", "sum_layer", "=", "sum", "(", "repeats", ")", "\n", "\n", "self", ".", "upsample", "=", "Upsample", "(", "scale", ")", "\n", "self", ".", "swish", "=", "Swish", "(", ")", "\n", "\n", "self", ".", "stage1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "\n", "channels", "[", "0", "]", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channels", "[", "0", "]", ",", "momentum", "=", "0.99", ",", "eps", "=", "1e-3", ")", ")", "\n", "\n", "if", "stochastic_depth", ":", "\n", "# stochastic depth", "\n", "            ", "self", ".", "stage2", "=", "MBConv", "(", "channels", "[", "0", "]", ",", "\n", "channels", "[", "1", "]", ",", "\n", "repeats", "[", "0", "]", ",", "\n", "kernel_size", "=", "kernel_sizes", "[", "0", "]", ",", "\n", "stride", "=", "strides", "[", "0", "]", ",", "\n", "expand", "=", "expands", "[", "0", "]", ",", "\n", "se_ratio", "=", "se_ratio", ",", "\n", "sum_layer", "=", "sum_layer", ",", "\n", "count_layer", "=", "sum", "(", "repeats", "[", ":", "0", "]", ")", ",", "\n", "pl", "=", "pl", ")", "\n", "self", ".", "stage3", "=", "MBConv", "(", "channels", "[", "1", "]", ",", "\n", "channels", "[", "2", "]", ",", "\n", "repeats", "[", "1", "]", ",", "\n", "kernel_size", "=", "kernel_sizes", "[", "1", "]", ",", "\n", "stride", "=", "strides", "[", "1", "]", ",", "\n", "expand", "=", "expands", "[", "1", "]", ",", "\n", "se_ratio", "=", "se_ratio", ",", "\n", "sum_layer", "=", "sum_layer", ",", "\n", "count_layer", "=", "sum", "(", "repeats", "[", ":", "1", "]", ")", ",", "\n", "pl", "=", "pl", ")", "\n", "self", ".", "stage4", "=", "MBConv", "(", "channels", "[", "2", "]", ",", "\n", "channels", "[", "3", "]", ",", "\n", "repeats", "[", "2", "]", ",", "\n", "kernel_size", "=", "kernel_sizes", "[", "2", "]", ",", "\n", "stride", "=", "strides", "[", "2", "]", ",", "\n", "expand", "=", "expands", "[", "2", "]", ",", "\n", "se_ratio", "=", "se_ratio", ",", "\n", "sum_layer", "=", "sum_layer", ",", "\n", "count_layer", "=", "sum", "(", "repeats", "[", ":", "2", "]", ")", ",", "\n", "pl", "=", "pl", ")", "\n", "self", ".", "stage5", "=", "MBConv", "(", "channels", "[", "3", "]", ",", "\n", "channels", "[", "4", "]", ",", "\n", "repeats", "[", "3", "]", ",", "\n", "kernel_size", "=", "kernel_sizes", "[", "3", "]", ",", "\n", "stride", "=", "strides", "[", "3", "]", ",", "\n", "expand", "=", "expands", "[", "3", "]", ",", "\n", "se_ratio", "=", "se_ratio", ",", "\n", "sum_layer", "=", "sum_layer", ",", "\n", "count_layer", "=", "sum", "(", "repeats", "[", ":", "3", "]", ")", ",", "\n", "pl", "=", "pl", ")", "\n", "self", ".", "stage6", "=", "MBConv", "(", "channels", "[", "4", "]", ",", "\n", "channels", "[", "5", "]", ",", "\n", "repeats", "[", "4", "]", ",", "\n", "kernel_size", "=", "kernel_sizes", "[", "4", "]", ",", "\n", "stride", "=", "strides", "[", "4", "]", ",", "\n", "expand", "=", "expands", "[", "4", "]", ",", "\n", "se_ratio", "=", "se_ratio", ",", "\n", "sum_layer", "=", "sum_layer", ",", "\n", "count_layer", "=", "sum", "(", "repeats", "[", ":", "4", "]", ")", ",", "\n", "pl", "=", "pl", ")", "\n", "self", ".", "stage7", "=", "MBConv", "(", "channels", "[", "5", "]", ",", "\n", "channels", "[", "6", "]", ",", "\n", "repeats", "[", "5", "]", ",", "\n", "kernel_size", "=", "kernel_sizes", "[", "5", "]", ",", "\n", "stride", "=", "strides", "[", "5", "]", ",", "\n", "expand", "=", "expands", "[", "5", "]", ",", "\n", "se_ratio", "=", "se_ratio", ",", "\n", "sum_layer", "=", "sum_layer", ",", "\n", "count_layer", "=", "sum", "(", "repeats", "[", ":", "5", "]", ")", ",", "\n", "pl", "=", "pl", ")", "\n", "self", ".", "stage8", "=", "MBConv", "(", "channels", "[", "6", "]", ",", "\n", "channels", "[", "7", "]", ",", "\n", "repeats", "[", "6", "]", ",", "\n", "kernel_size", "=", "kernel_sizes", "[", "6", "]", ",", "\n", "stride", "=", "strides", "[", "6", "]", ",", "\n", "expand", "=", "expands", "[", "6", "]", ",", "\n", "se_ratio", "=", "se_ratio", ",", "\n", "sum_layer", "=", "sum_layer", ",", "\n", "count_layer", "=", "sum", "(", "repeats", "[", ":", "6", "]", ")", ",", "\n", "pl", "=", "pl", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "stage2", "=", "MBConv", "(", "channels", "[", "0", "]", ",", "\n", "channels", "[", "1", "]", ",", "\n", "repeats", "[", "0", "]", ",", "\n", "kernel_size", "=", "kernel_sizes", "[", "0", "]", ",", "\n", "stride", "=", "strides", "[", "0", "]", ",", "\n", "expand", "=", "expands", "[", "0", "]", ",", "\n", "se_ratio", "=", "se_ratio", ",", "\n", "sum_layer", "=", "sum_layer", ")", "\n", "self", ".", "stage3", "=", "MBConv", "(", "channels", "[", "1", "]", ",", "\n", "channels", "[", "2", "]", ",", "\n", "repeats", "[", "1", "]", ",", "\n", "kernel_size", "=", "kernel_sizes", "[", "1", "]", ",", "\n", "stride", "=", "strides", "[", "1", "]", ",", "\n", "expand", "=", "expands", "[", "1", "]", ",", "\n", "se_ratio", "=", "se_ratio", ",", "\n", "sum_layer", "=", "sum_layer", ")", "\n", "self", ".", "stage4", "=", "MBConv", "(", "channels", "[", "2", "]", ",", "\n", "channels", "[", "3", "]", ",", "\n", "repeats", "[", "2", "]", ",", "\n", "kernel_size", "=", "kernel_sizes", "[", "2", "]", ",", "\n", "stride", "=", "strides", "[", "2", "]", ",", "\n", "expand", "=", "expands", "[", "2", "]", ",", "\n", "se_ratio", "=", "se_ratio", ",", "\n", "sum_layer", "=", "sum_layer", ")", "\n", "self", ".", "stage5", "=", "MBConv", "(", "channels", "[", "3", "]", ",", "\n", "channels", "[", "4", "]", ",", "\n", "repeats", "[", "3", "]", ",", "\n", "kernel_size", "=", "kernel_sizes", "[", "3", "]", ",", "\n", "stride", "=", "strides", "[", "3", "]", ",", "\n", "expand", "=", "expands", "[", "3", "]", ",", "\n", "se_ratio", "=", "se_ratio", ",", "\n", "sum_layer", "=", "sum_layer", ")", "\n", "self", ".", "stage6", "=", "MBConv", "(", "channels", "[", "4", "]", ",", "\n", "channels", "[", "5", "]", ",", "\n", "repeats", "[", "4", "]", ",", "\n", "kernel_size", "=", "kernel_sizes", "[", "4", "]", ",", "\n", "stride", "=", "strides", "[", "4", "]", ",", "\n", "expand", "=", "expands", "[", "4", "]", ",", "\n", "se_ratio", "=", "se_ratio", ",", "\n", "sum_layer", "=", "sum_layer", ")", "\n", "self", ".", "stage7", "=", "MBConv", "(", "channels", "[", "5", "]", ",", "\n", "channels", "[", "6", "]", ",", "\n", "repeats", "[", "5", "]", ",", "\n", "kernel_size", "=", "kernel_sizes", "[", "5", "]", ",", "\n", "stride", "=", "strides", "[", "5", "]", ",", "\n", "expand", "=", "expands", "[", "5", "]", ",", "\n", "se_ratio", "=", "se_ratio", ",", "\n", "sum_layer", "=", "sum_layer", ")", "\n", "self", ".", "stage8", "=", "MBConv", "(", "channels", "[", "6", "]", ",", "\n", "channels", "[", "7", "]", ",", "\n", "repeats", "[", "6", "]", ",", "\n", "kernel_size", "=", "kernel_sizes", "[", "6", "]", ",", "\n", "stride", "=", "strides", "[", "6", "]", ",", "\n", "expand", "=", "expands", "[", "6", "]", ",", "\n", "se_ratio", "=", "se_ratio", ",", "\n", "sum_layer", "=", "sum_layer", ")", "\n", "\n", "", "self", ".", "stage9", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channels", "[", "7", "]", ",", "channels", "[", "8", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channels", "[", "8", "]", ",", "momentum", "=", "0.99", ",", "eps", "=", "1e-3", ")", ",", "Swish", "(", ")", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ",", "Flatten", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "dropout_ratio", ")", ",", "nn", ".", "Linear", "(", "channels", "[", "8", "]", ",", "num_classes", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "\n", "mode", "=", "'fan_out'", ",", "\n", "nonlinearity", "=", "'relu'", ")", "\n", "# nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='sigmoid')", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.EfficientNet.forward": [[362, 375], ["efficientnet.EfficientNet.upsample", "efficientnet.EfficientNet.swish", "efficientnet.EfficientNet.swish", "efficientnet.EfficientNet.swish", "efficientnet.EfficientNet.swish", "efficientnet.EfficientNet.swish", "efficientnet.EfficientNet.swish", "efficientnet.EfficientNet.swish", "efficientnet.EfficientNet.swish", "efficientnet.EfficientNet.stage9", "efficientnet.EfficientNet.stage1", "efficientnet.EfficientNet.stage2", "efficientnet.EfficientNet.stage3", "efficientnet.EfficientNet.stage4", "efficientnet.EfficientNet.stage5", "efficientnet.EfficientNet.stage6", "efficientnet.EfficientNet.stage7", "efficientnet.EfficientNet.stage8"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "self", ".", "swish", "(", "self", ".", "stage1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "swish", "(", "self", ".", "stage2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "swish", "(", "self", ".", "stage3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "swish", "(", "self", ".", "stage4", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "swish", "(", "self", ".", "stage5", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "swish", "(", "self", ".", "stage6", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "swish", "(", "self", ".", "stage7", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "swish", "(", "self", ".", "stage8", "(", "x", ")", ")", "\n", "logit", "=", "self", ".", "stage9", "(", "x", ")", "\n", "\n", "return", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.efficientnet_b0": [[377, 384], ["efficientnet.EfficientNet"], "function", ["None"], ["", "", "def", "efficientnet_b0", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "return", "EfficientNet", "(", "num_classes", "=", "num_classes", ",", "\n", "width_coef", "=", "1.0", ",", "\n", "depth_coef", "=", "1.0", ",", "\n", "scale", "=", "1.0", ",", "\n", "dropout_ratio", "=", "0.2", ",", "\n", "se_ratio", "=", "0.25", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.efficientnet_b1": [[386, 393], ["efficientnet.EfficientNet"], "function", ["None"], ["", "def", "efficientnet_b1", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "return", "EfficientNet", "(", "num_classes", "=", "num_classes", ",", "\n", "width_coef", "=", "1.0", ",", "\n", "depth_coef", "=", "1.1", ",", "\n", "scale", "=", "240", "/", "224", ",", "\n", "dropout_ratio", "=", "0.2", ",", "\n", "se_ratio", "=", "0.25", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.efficientnet_b2": [[395, 402], ["efficientnet.EfficientNet"], "function", ["None"], ["", "def", "efficientnet_b2", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "return", "EfficientNet", "(", "num_classes", "=", "num_classes", ",", "\n", "width_coef", "=", "1.1", ",", "\n", "depth_coef", "=", "1.2", ",", "\n", "scale", "=", "260", "/", "224.", ",", "\n", "dropout_ratio", "=", "0.3", ",", "\n", "se_ratio", "=", "0.25", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.efficientnet_b3": [[404, 411], ["efficientnet.EfficientNet"], "function", ["None"], ["", "def", "efficientnet_b3", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "return", "EfficientNet", "(", "num_classes", "=", "num_classes", ",", "\n", "width_coef", "=", "1.2", ",", "\n", "depth_coef", "=", "1.4", ",", "\n", "scale", "=", "300", "/", "224", ",", "\n", "dropout_ratio", "=", "0.3", ",", "\n", "se_ratio", "=", "0.25", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.efficientnet_b4": [[413, 420], ["efficientnet.EfficientNet"], "function", ["None"], ["", "def", "efficientnet_b4", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "return", "EfficientNet", "(", "num_classes", "=", "num_classes", ",", "\n", "width_coef", "=", "1.4", ",", "\n", "depth_coef", "=", "1.8", ",", "\n", "scale", "=", "380", "/", "224", ",", "\n", "dropout_ratio", "=", "0.4", ",", "\n", "se_ratio", "=", "0.25", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.efficientnet_b5": [[422, 429], ["efficientnet.EfficientNet"], "function", ["None"], ["", "def", "efficientnet_b5", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "return", "EfficientNet", "(", "num_classes", "=", "num_classes", ",", "\n", "width_coef", "=", "1.6", ",", "\n", "depth_coef", "=", "2.2", ",", "\n", "scale", "=", "456", "/", "224", ",", "\n", "dropout_ratio", "=", "0.4", ",", "\n", "se_ratio", "=", "0.25", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.efficientnet_b6": [[431, 438], ["efficientnet.EfficientNet"], "function", ["None"], ["", "def", "efficientnet_b6", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "return", "EfficientNet", "(", "num_classes", "=", "num_classes", ",", "\n", "width_coef", "=", "1.8", ",", "\n", "depth_coef", "=", "2.6", ",", "\n", "scale", "=", "528", "/", "224", ",", "\n", "dropout_ratio", "=", "0.5", ",", "\n", "se_ratio", "=", "0.25", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.efficientnet_b7": [[440, 447], ["efficientnet.EfficientNet"], "function", ["None"], ["", "def", "efficientnet_b7", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "return", "EfficientNet", "(", "num_classes", "=", "num_classes", ",", "\n", "width_coef", "=", "2.0", ",", "\n", "depth_coef", "=", "3.1", ",", "\n", "scale", "=", "600", "/", "224", ",", "\n", "dropout_ratio", "=", "0.5", ",", "\n", "se_ratio", "=", "0.25", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.test": [[449, 460], ["torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "efficientnet.EfficientNet", "EfficientNet.", "print", "model.size"], "function", ["None"], ["", "def", "test", "(", ")", ":", "\n", "    ", "x", "=", "torch", ".", "FloatTensor", "(", "64", ",", "3", ",", "224", ",", "224", ")", "\n", "model", "=", "EfficientNet", "(", "num_classes", "=", "100", ",", "\n", "width_coef", "=", "1.0", ",", "\n", "depth_coef", "=", "1.0", ",", "\n", "scale", "=", "1.0", ",", "\n", "dropout_ratio", "=", "0.2", ",", "\n", "se_ratio", "=", "0.25", ",", "\n", "stochastic_depth", "=", "True", ")", "\n", "logit", "=", "model", "(", "x", ")", "\n", "print", "(", "logit", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.swish.Swish.__init__": [[10, 16], ["torch.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "train_beta", "=", "False", ")", ":", "\n", "        ", "super", "(", "Swish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "train_beta", ":", "\n", "            ", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "1.", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "weight", "=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.swish.Swish.forward": [[18, 20], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "*", "torch", ".", "sigmoid", "(", "self", ".", "weight", "*", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.swish.test": [[22, 26], ["torch.FloatTensor", "torch.FloatTensor", "swish.Swish", "print", "Swish.size", "Swish."], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "x", "=", "torch", ".", "FloatTensor", "(", "16", ",", "128", ",", "16", ",", "16", ")", "\n", "swish", "=", "Swish", "(", "train_beta", "=", "True", ")", "\n", "print", "(", "swish", "(", "x", ")", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobnetv2.LinearBottleNeck.__init__": [[17, 35], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", ",", "t", "=", "6", ",", "class_num", "=", "100", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "residual", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", "*", "t", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_channels", "*", "t", ")", ",", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "*", "t", ",", "\n", "in_channels", "*", "t", ",", "\n", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "in_channels", "*", "t", ")", ",", "nn", ".", "BatchNorm2d", "(", "in_channels", "*", "t", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "nn", ".", "Conv2d", "(", "in_channels", "*", "t", ",", "out_channels", ",", "\n", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", "\n", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobnetv2.LinearBottleNeck.forward": [[36, 44], ["mobnetv2.LinearBottleNeck.residual"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "residual", "=", "self", ".", "residual", "(", "x", ")", "\n", "\n", "if", "self", ".", "stride", "==", "1", "and", "self", ".", "in_channels", "==", "self", ".", "out_channels", ":", "\n", "            ", "residual", "+=", "x", "\n", "\n", "", "return", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobnetv2.MobileNetV2.__init__": [[47, 66], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mobnetv2.LinearBottleNeck", "mobnetv2.MobileNetV2._make_stage", "mobnetv2.MobileNetV2._make_stage", "mobnetv2.MobileNetV2._make_stage", "mobnetv2.MobileNetV2._make_stage", "mobnetv2.MobileNetV2._make_stage", "mobnetv2.LinearBottleNeck", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.ShuffleNet._make_stage", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.ShuffleNet._make_stage", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.ShuffleNet._make_stage", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.ShuffleNet._make_stage", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.ShuffleNet._make_stage"], ["    ", "def", "__init__", "(", "self", ",", "class_num", "=", "100", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pre", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "stage1", "=", "LinearBottleNeck", "(", "32", ",", "16", ",", "1", ",", "1", ")", "\n", "self", ".", "stage2", "=", "self", ".", "_make_stage", "(", "2", ",", "16", ",", "24", ",", "2", ",", "6", ")", "\n", "self", ".", "stage3", "=", "self", ".", "_make_stage", "(", "3", ",", "24", ",", "32", ",", "2", ",", "6", ")", "\n", "self", ".", "stage4", "=", "self", ".", "_make_stage", "(", "4", ",", "32", ",", "64", ",", "2", ",", "6", ")", "\n", "self", ".", "stage5", "=", "self", ".", "_make_stage", "(", "3", ",", "64", ",", "96", ",", "1", ",", "6", ")", "\n", "self", ".", "stage6", "=", "self", ".", "_make_stage", "(", "3", ",", "96", ",", "160", ",", "1", ",", "6", ")", "\n", "self", ".", "stage7", "=", "LinearBottleNeck", "(", "160", ",", "320", ",", "1", ",", "6", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "320", ",", "1280", ",", "\n", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "1280", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "1280", ",", "class_num", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobnetv2.MobileNetV2.forward": [[67, 82], ["mobnetv2.MobileNetV2.pre", "mobnetv2.MobileNetV2.stage1", "mobnetv2.MobileNetV2.stage2", "mobnetv2.MobileNetV2.stage3", "mobnetv2.MobileNetV2.stage4", "mobnetv2.MobileNetV2.stage5", "mobnetv2.MobileNetV2.stage6", "mobnetv2.MobileNetV2.stage7", "mobnetv2.MobileNetV2.conv1", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "mobnetv2.MobileNetV2.conv2", "x.view.view.view", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "pre", "(", "x", ")", "\n", "x", "=", "self", ".", "stage1", "(", "x", ")", "\n", "x", "=", "self", ".", "stage2", "(", "x", ")", "\n", "x", "=", "self", ".", "stage3", "(", "x", ")", "\n", "x", "=", "self", ".", "stage4", "(", "x", ")", "\n", "x", "=", "self", ".", "stage5", "(", "x", ")", "\n", "x", "=", "self", ".", "stage6", "(", "x", ")", "\n", "x", "=", "self", ".", "stage7", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobnetv2.MobileNetV2._make_stage": [[83, 93], ["layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mobnetv2.LinearBottleNeck", "layers.append", "mobnetv2.LinearBottleNeck"], "methods", ["None"], ["", "def", "_make_stage", "(", "self", ",", "repeat", ",", "in_channels", ",", "out_channels", ",", "stride", ",", "t", ")", ":", "\n", "\n", "        ", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "LinearBottleNeck", "(", "in_channels", ",", "out_channels", ",", "stride", ",", "t", ")", ")", "\n", "\n", "while", "repeat", "-", "1", ":", "\n", "            ", "layers", ".", "append", "(", "LinearBottleNeck", "(", "out_channels", ",", "out_channels", ",", "1", ",", "t", ")", ")", "\n", "repeat", "-=", "1", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobnetv2.mobilenetv2": [[95, 97], ["mobnetv2.MobileNetV2"], "function", ["None"], ["", "", "def", "mobilenetv2", "(", ")", ":", "\n", "    ", "return", "MobileNetV2", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.wideresnet.wide_basic.__init__": [[31, 56], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "wide_basic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "True", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "True", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.wideresnet.wide_basic.forward": [[57, 63], ["wideresnet.wide_basic.dropout", "wideresnet.wide_basic.conv2", "wideresnet.wide_basic.shortcut", "wideresnet.wide_basic.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "wideresnet.wide_basic.bn2", "wideresnet.wide_basic.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "dropout", "(", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.wideresnet.Wide_ResNet.__init__": [[66, 95], ["torch.Module.__init__", "print", "wideresnet.conv3x3", "wideresnet.Wide_ResNet._wide_layer", "wideresnet.Wide_ResNet._wide_layer", "wideresnet.Wide_ResNet._wide_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.conv3x3", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.wideresnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.wideresnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.wideresnet.Wide_ResNet._wide_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "dropout_rate", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet depth should be 6n+4'", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "k", "=", "widen_factor", "\n", "\n", "print", "(", "'| Wide-Resnet %dx%d'", "%", "(", "depth", ",", "k", ")", ")", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "nStages", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "\n", "nStages", "[", "1", "]", ",", "\n", "n", ",", "\n", "dropout_rate", ",", "\n", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "\n", "nStages", "[", "2", "]", ",", "\n", "n", ",", "\n", "dropout_rate", ",", "\n", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "\n", "nStages", "[", "3", "]", ",", "\n", "n", ",", "\n", "dropout_rate", ",", "\n", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nStages", "[", "3", "]", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "nStages", "[", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.wideresnet.Wide_ResNet._wide_layer": [[96, 105], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block", "int"], "methods", ["None"], ["", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "dropout_rate", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "int", "(", "num_blocks", ")", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.wideresnet.Wide_ResNet.forward": [[106, 117], ["wideresnet.Wide_ResNet.conv1", "wideresnet.Wide_ResNet.layer1", "wideresnet.Wide_ResNet.layer2", "wideresnet.Wide_ResNet.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "wideresnet.Wide_ResNet.view", "wideresnet.Wide_ResNet.linear", "wideresnet.Wide_ResNet.bn1", "wideresnet.Wide_ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.wideresnet.conv3x3": [[11, 18], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.wideresnet.conv_init": [[20, 28], ["classname.find", "torch.xavier_uniform_", "torch.constant_", "classname.find", "torch.constant_", "torch.constant_", "numpy.sqrt"], "function", ["None"], ["", "def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3.h_sigmoid.__init__": [[35, 38], ["torch.Module.__init__", "torch.ReLU6"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", "=", "True", ")", ":", "\n", "        ", "super", "(", "h_sigmoid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3.h_sigmoid.forward": [[39, 41], ["mobilenetv3.h_sigmoid.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "relu", "(", "x", "+", "3", ")", "/", "6", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3.h_swish.__init__": [[44, 47], ["torch.Module.__init__", "mobilenetv3.h_sigmoid"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", "=", "True", ")", ":", "\n", "        ", "super", "(", "h_swish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigmoid", "=", "h_sigmoid", "(", "inplace", "=", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3.h_swish.forward": [[48, 50], ["mobilenetv3.h_swish.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3.SELayer.__init__": [[53, 61], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Linear", "torch.ReLU", "torch.Linear", "mobilenetv3.h_sigmoid", "mobilenetv3._make_divisible", "mobilenetv3._make_divisible"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3._make_divisible", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3._make_divisible"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "4", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "_make_divisible", "(", "channel", "//", "reduction", ",", "8", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "_make_divisible", "(", "channel", "//", "reduction", ",", "8", ")", ",", "channel", ")", ",", "\n", "h_sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3.SELayer.forward": [[62, 67], ["x.size", "mobilenetv3.SELayer.avg_pool().view", "mobilenetv3.SELayer.fc().view", "mobilenetv3.SELayer.avg_pool", "mobilenetv3.SELayer.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3.InvertedResidual.__init__": [[80, 124], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.BatchNorm2d", "mobilenetv3.h_swish", "torch.ReLU", "mobilenetv3.SELayer", "torch.Identity", "mobilenetv3.h_swish", "torch.ReLU", "mobilenetv3.SELayer", "torch.Identity", "mobilenetv3.h_swish", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "hidden_dim", ",", "oup", ",", "kernel_size", ",", "stride", ",", "use_se", ",", "\n", "use_hs", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "self", ".", "identity", "=", "stride", "==", "1", "and", "inp", "==", "oup", "\n", "\n", "if", "inp", "==", "hidden_dim", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "\n", "hidden_dim", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "groups", "=", "hidden_dim", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "h_swish", "(", ")", "if", "use_hs", "else", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# Squeeze-and-Excite", "\n", "SELayer", "(", "hidden_dim", ")", "if", "use_se", "else", "nn", ".", "Identity", "(", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# pw", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "hidden_dim", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "h_swish", "(", ")", "if", "use_hs", "else", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "\n", "hidden_dim", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "groups", "=", "hidden_dim", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "# Squeeze-and-Excite", "\n", "SELayer", "(", "hidden_dim", ")", "if", "use_se", "else", "nn", ".", "Identity", "(", ")", ",", "\n", "h_swish", "(", ")", "if", "use_hs", "else", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3.InvertedResidual.forward": [[126, 131], ["mobilenetv3.InvertedResidual.conv", "mobilenetv3.InvertedResidual.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "identity", ":", "\n", "            ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3.MobileNetV3.__init__": [[134, 168], ["torch.Module.__init__", "mobilenetv3._make_divisible", "torch.Sequential", "mobilenetv3.conv_1x1_bn", "torch.AdaptiveAvgPool2d", "torch.Sequential", "mobilenetv3.MobileNetV3._initialize_weights", "mobilenetv3.conv_3x3_bn", "mobilenetv3._make_divisible", "mobilenetv3._make_divisible", "layers.append", "mobilenetv3._make_divisible", "torch.Linear", "mobilenetv3.h_swish", "torch.Dropout", "torch.Linear", "block"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3._make_divisible", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3.conv_1x1_bn", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3.MobileNetV3._initialize_weights", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3.conv_3x3_bn", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3._make_divisible", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3._make_divisible", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3._make_divisible"], ["    ", "def", "__init__", "(", "self", ",", "cfgs", ",", "mode", ",", "num_classes", "=", "1000", ",", "width_mult", "=", "1.", ")", ":", "\n", "        ", "super", "(", "MobileNetV3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# setting of inverted residual blocks", "\n", "self", ".", "cfgs", "=", "cfgs", "\n", "assert", "mode", "in", "[", "'large'", ",", "'small'", "]", "\n", "\n", "# building first layer", "\n", "input_channel", "=", "_make_divisible", "(", "16", "*", "width_mult", ",", "8", ")", "\n", "layers", "=", "[", "conv_3x3_bn", "(", "3", ",", "input_channel", ",", "2", ")", "]", "\n", "# building inverted residual blocks", "\n", "block", "=", "InvertedResidual", "\n", "for", "k", ",", "t", ",", "c", ",", "use_se", ",", "use_hs", ",", "s", "in", "self", ".", "cfgs", ":", "\n", "            ", "output_channel", "=", "_make_divisible", "(", "c", "*", "width_mult", ",", "8", ")", "\n", "exp_size", "=", "_make_divisible", "(", "input_channel", "*", "t", ",", "8", ")", "\n", "layers", ".", "append", "(", "\n", "block", "(", "input_channel", ",", "exp_size", ",", "output_channel", ",", "k", ",", "s", ",", "use_se", ",", "\n", "use_hs", ")", ")", "\n", "input_channel", "=", "output_channel", "\n", "", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "# building last several layers", "\n", "self", ".", "conv", "=", "conv_1x1_bn", "(", "input_channel", ",", "exp_size", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "output_channel", "=", "{", "'large'", ":", "1280", ",", "'small'", ":", "1024", "}", "\n", "output_channel", "=", "_make_divisible", "(", "\n", "output_channel", "[", "mode", "]", "*", "\n", "width_mult", ",", "8", ")", "if", "width_mult", ">", "1.0", "else", "output_channel", "[", "mode", "]", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "exp_size", ",", "output_channel", ")", ",", "\n", "h_swish", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "output_channel", ",", "num_classes", ")", ",", "\n", ")", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3.MobileNetV3.forward": [[169, 176], ["mobilenetv3.MobileNetV3.features", "mobilenetv3.MobileNetV3.conv", "mobilenetv3.MobileNetV3.avgpool", "mobilenetv3.MobileNetV3.view", "mobilenetv3.MobileNetV3.classifier", "mobilenetv3.MobileNetV3.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3.MobileNetV3._initialize_weights": [[177, 191], ["mobilenetv3.MobileNetV3.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.size", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "n", "=", "m", ".", "weight", ".", "size", "(", "1", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3._make_divisible": [[14, 32], ["max", "int"], "function", ["None"], ["def", "_make_divisible", "(", "v", ",", "divisor", ",", "min_value", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    This function is taken from the original tf repo.\n    It ensures that all layers have a channel number that is divisible by 8\n    It can be seen here:\n    https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet/mobilenet.py\n    :param v:\n    :param divisor:\n    :param min_value:\n    :return:\n    \"\"\"", "\n", "if", "min_value", "is", "None", ":", "\n", "        ", "min_value", "=", "divisor", "\n", "", "new_v", "=", "max", "(", "min_value", ",", "int", "(", "v", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "# Make sure that round down does not go down by more than 10%.", "\n", "if", "new_v", "<", "0.9", "*", "v", ":", "\n", "        ", "new_v", "+=", "divisor", "\n", "", "return", "new_v", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3.conv_3x3_bn": [[69, 72], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "mobilenetv3.h_swish"], "function", ["None"], ["", "", "def", "conv_3x3_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "h_swish", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3.conv_1x1_bn": [[74, 77], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "mobilenetv3.h_swish"], "function", ["None"], ["", "def", "conv_1x1_bn", "(", "inp", ",", "oup", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "h_swish", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3.mobilenetv3_large": [[193, 216], ["mobilenetv3.MobileNetV3"], "function", ["None"], ["", "", "", "", "def", "mobilenetv3_large", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a MobileNetV3-Large model\n    \"\"\"", "\n", "cfgs", "=", "[", "\n", "# k, t, c, SE, HS, s", "\n", "[", "3", ",", "1", ",", "16", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "3", ",", "4", ",", "24", ",", "0", ",", "0", ",", "2", "]", ",", "\n", "[", "3", ",", "3", ",", "24", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "5", ",", "3", ",", "40", ",", "1", ",", "0", ",", "2", "]", ",", "\n", "[", "5", ",", "3", ",", "40", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "5", ",", "3", ",", "40", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "3", ",", "6", ",", "80", ",", "0", ",", "1", ",", "2", "]", ",", "\n", "[", "3", ",", "2.5", ",", "80", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "3", ",", "2.3", ",", "80", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "3", ",", "2.3", ",", "80", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "3", ",", "6", ",", "112", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "3", ",", "6", ",", "112", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "5", ",", "6", ",", "160", ",", "1", ",", "1", ",", "2", "]", ",", "\n", "[", "5", ",", "6", ",", "160", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "5", ",", "6", ",", "160", ",", "1", ",", "1", ",", "1", "]", "\n", "]", "\n", "return", "MobileNetV3", "(", "cfgs", ",", "mode", "=", "'large'", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3.mobilenetv3_small": [[218, 238], ["mobilenetv3.MobileNetV3"], "function", ["None"], ["", "def", "mobilenetv3_small", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a MobileNetV3-Small model\n    \"\"\"", "\n", "cfgs", "=", "[", "\n", "# k, t, c, SE, HS, s", "\n", "[", "3", ",", "1", ",", "16", ",", "1", ",", "0", ",", "2", "]", ",", "\n", "[", "3", ",", "4.5", ",", "24", ",", "0", ",", "0", ",", "2", "]", ",", "\n", "[", "3", ",", "3.67", ",", "24", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "5", ",", "4", ",", "40", ",", "1", ",", "1", ",", "2", "]", ",", "\n", "[", "5", ",", "6", ",", "40", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "5", ",", "6", ",", "40", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "5", ",", "3", ",", "48", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "5", ",", "3", ",", "48", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "5", ",", "6", ",", "96", ",", "1", ",", "1", ",", "2", "]", ",", "\n", "[", "5", ",", "6", ",", "96", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "5", ",", "6", ",", "96", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "\n", "return", "MobileNetV3", "(", "cfgs", ",", "mode", "=", "'small'", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.BasicConv2d.__init__": [[18, 24], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "output_channels", ",", "kernel_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "kernel_size", ",", "\n", "**", "kwargs", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "output_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.BasicConv2d.forward": [[25, 30], ["shufflenet.BasicConv2d.conv", "shufflenet.BasicConv2d.bn", "shufflenet.BasicConv2d.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.ChannelShuffle.__init__": [[33, 36], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.ChannelShuffle.forward": [[37, 51], ["x.view.view.data.size", "int", "x.view.view.view", "x.view.view.transpose().contiguous", "x.view.view.view", "x.view.view.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", ",", "channels", ",", "height", ",", "width", "=", "x", ".", "data", ".", "size", "(", ")", "\n", "channels_per_group", "=", "int", "(", "channels", "/", "self", ".", "groups", ")", "\n", "\n", "#\"\"\"suppose a convolutional layer with g groups whose output has", "\n", "#g x n channels; we first reshape the output channel dimension", "\n", "#into (g, n)\"\"\"", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "self", ".", "groups", ",", "channels_per_group", ",", "height", ",", "width", ")", "\n", "\n", "#\"\"\"transposing and then flattening it back as the input of next layer.\"\"\"", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "-", "1", ",", "height", ",", "width", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.DepthwiseConv2d.__init__": [[54, 59], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "output_channels", ",", "kernel_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depthwise", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "kernel_size", ",", "**", "kwargs", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "output_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.DepthwiseConv2d.forward": [[60, 62], ["shufflenet.DepthwiseConv2d.depthwise"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "depthwise", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.PointwiseConv2d.__init__": [[65, 70], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "output_channels", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pointwise", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "1", ",", "**", "kwargs", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "output_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.PointwiseConv2d.forward": [[71, 73], ["shufflenet.PointwiseConv2d.pointwise"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "pointwise", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.ShuffleNetUnit.__init__": [[76, 125], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "shufflenet.ChannelShuffle", "shufflenet.DepthwiseConv2d", "shufflenet.PointwiseConv2d", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "shufflenet.PointwiseConv2d", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "int", "int", "int", "torch.AvgPool2d", "torch.AvgPool2d", "shufflenet.PointwiseConv2d", "int", "shufflenet.PointwiseConv2d", "torch.ReLU", "torch.ReLU", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "output_channels", ",", "stage", ",", "stride", ",", "groups", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "#\"\"\"Similar to [9], we set the number of bottleneck channels to 1/4", "\n", "#of the output channels for each ShuffleNet unit.\"\"\"", "\n", "self", ".", "bottlneck", "=", "nn", ".", "Sequential", "(", "\n", "PointwiseConv2d", "(", "input_channels", ",", "\n", "int", "(", "output_channels", "/", "4", ")", ",", "\n", "groups", "=", "groups", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "#\"\"\"Note that for Stage 2, we do not apply group convolution on the first pointwise", "\n", "#layer because the number of input channels is relatively small.\"\"\"", "\n", "if", "stage", "==", "2", ":", "\n", "            ", "self", ".", "bottlneck", "=", "nn", ".", "Sequential", "(", "\n", "PointwiseConv2d", "(", "input_channels", ",", "\n", "int", "(", "output_channels", "/", "4", ")", ",", "\n", "groups", "=", "groups", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "", "self", ".", "channel_shuffle", "=", "ChannelShuffle", "(", "groups", ")", "\n", "\n", "self", ".", "depthwise", "=", "DepthwiseConv2d", "(", "int", "(", "output_channels", "/", "4", ")", ",", "\n", "int", "(", "output_channels", "/", "4", ")", ",", "\n", "3", ",", "\n", "groups", "=", "int", "(", "output_channels", "/", "4", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ")", "\n", "\n", "self", ".", "expand", "=", "PointwiseConv2d", "(", "int", "(", "output_channels", "/", "4", ")", ",", "\n", "output_channels", ",", "\n", "groups", "=", "groups", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fusion", "=", "self", ".", "_add", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "#\"\"\"As for the case where ShuffleNet is applied with stride,", "\n", "#we simply make two modifications (see Fig 2 (c)):", "\n", "#(i) add a 3 \u00d7 3 average pooling on the shortcut path;", "\n", "#(ii) replace the element-wise addition with channel concatenation,", "\n", "#which makes it easy to enlarge channel dimension with little extra", "\n", "#computation cost.", "\n", "if", "stride", "!=", "1", "or", "input_channels", "!=", "output_channels", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "expand", "=", "PointwiseConv2d", "(", "int", "(", "output_channels", "/", "4", ")", ",", "\n", "output_channels", "-", "input_channels", ",", "\n", "groups", "=", "groups", ")", "\n", "\n", "self", ".", "fusion", "=", "self", ".", "_cat", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.ShuffleNetUnit._add": [[126, 128], ["torch.add", "torch.add", "torch.add", "torch.add"], "methods", ["None"], ["", "", "def", "_add", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "return", "torch", ".", "add", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.ShuffleNetUnit._cat": [[129, 131], ["torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_cat", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "x", ",", "y", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.ShuffleNetUnit.forward": [[132, 144], ["shufflenet.ShuffleNetUnit.shortcut", "shufflenet.ShuffleNetUnit.bottlneck", "shufflenet.ShuffleNetUnit.channel_shuffle", "shufflenet.ShuffleNetUnit.depthwise", "shufflenet.ShuffleNetUnit.expand", "shufflenet.ShuffleNetUnit.fusion", "shufflenet.ShuffleNetUnit.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "shortcut", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "shuffled", "=", "self", ".", "bottlneck", "(", "x", ")", "\n", "shuffled", "=", "self", ".", "channel_shuffle", "(", "shuffled", ")", "\n", "shuffled", "=", "self", ".", "depthwise", "(", "shuffled", ")", "\n", "shuffled", "=", "self", ".", "expand", "(", "shuffled", ")", "\n", "\n", "output", "=", "self", ".", "fusion", "(", "shortcut", ",", "shuffled", ")", "\n", "output", "=", "self", ".", "relu", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.ShuffleNet.__init__": [[147, 187], ["torch.Module.__init__", "shufflenet.BasicConv2d", "shufflenet.ShuffleNet._make_stage", "shufflenet.ShuffleNet._make_stage", "shufflenet.ShuffleNet._make_stage", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.ShuffleNet._make_stage", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.ShuffleNet._make_stage", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.ShuffleNet._make_stage"], ["    ", "def", "__init__", "(", "self", ",", "num_blocks", ",", "num_classes", "=", "100", ",", "groups", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "groups", "==", "1", ":", "\n", "            ", "out_channels", "=", "[", "24", ",", "144", ",", "288", ",", "567", "]", "\n", "", "elif", "groups", "==", "2", ":", "\n", "            ", "out_channels", "=", "[", "24", ",", "200", ",", "400", ",", "800", "]", "\n", "", "elif", "groups", "==", "3", ":", "\n", "            ", "out_channels", "=", "[", "24", ",", "240", ",", "480", ",", "960", "]", "\n", "", "elif", "groups", "==", "4", ":", "\n", "            ", "out_channels", "=", "[", "24", ",", "272", ",", "544", ",", "1088", "]", "\n", "", "elif", "groups", "==", "8", ":", "\n", "            ", "out_channels", "=", "[", "24", ",", "384", ",", "768", ",", "1536", "]", "\n", "\n", "", "self", ".", "conv1", "=", "BasicConv2d", "(", "3", ",", "out_channels", "[", "0", "]", ",", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "input_channels", "=", "out_channels", "[", "0", "]", "\n", "\n", "self", ".", "stage2", "=", "self", ".", "_make_stage", "(", "ShuffleNetUnit", ",", "\n", "num_blocks", "[", "0", "]", ",", "\n", "out_channels", "[", "1", "]", ",", "\n", "stride", "=", "2", ",", "\n", "stage", "=", "2", ",", "\n", "groups", "=", "groups", ")", "\n", "\n", "self", ".", "stage3", "=", "self", ".", "_make_stage", "(", "ShuffleNetUnit", ",", "\n", "num_blocks", "[", "1", "]", ",", "\n", "out_channels", "[", "2", "]", ",", "\n", "stride", "=", "2", ",", "\n", "stage", "=", "3", ",", "\n", "groups", "=", "groups", ")", "\n", "\n", "self", ".", "stage4", "=", "self", ".", "_make_stage", "(", "ShuffleNetUnit", ",", "\n", "num_blocks", "[", "2", "]", ",", "\n", "out_channels", "[", "3", "]", ",", "\n", "stride", "=", "2", ",", "\n", "stage", "=", "4", ",", "\n", "groups", "=", "groups", ")", "\n", "\n", "self", ".", "avg", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "out_channels", "[", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.ShuffleNet.forward": [[188, 198], ["shufflenet.ShuffleNet.conv1", "shufflenet.ShuffleNet.stage2", "shufflenet.ShuffleNet.stage3", "shufflenet.ShuffleNet.stage4", "shufflenet.ShuffleNet.avg", "shufflenet.ShuffleNet.view", "shufflenet.ShuffleNet.fc", "shufflenet.ShuffleNet.size"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.Metric.avg"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "stage2", "(", "x", ")", "\n", "x", "=", "self", ".", "stage3", "(", "x", ")", "\n", "x", "=", "self", ".", "stage4", "(", "x", ")", "\n", "x", "=", "self", ".", "avg", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.ShuffleNet._make_stage": [[199, 227], ["torch.Sequential", "torch.Sequential", "stage.append", "block"], "methods", ["None"], ["", "def", "_make_stage", "(", "self", ",", "block", ",", "num_blocks", ",", "output_channels", ",", "stride", ",", "stage", ",", "\n", "groups", ")", ":", "\n", "        ", "\"\"\"make shufflenet stage \n\n        Args:\n            block: block type, shuffle unit\n            out_channels: output depth channel number of this stage\n            num_blocks: how many blocks per stage\n            stride: the stride of the first block of this stage\n            stage: stage index\n            groups: group number of group convolution \n        Return:\n            return a shuffle net stage\n        \"\"\"", "\n", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "\n", "stage", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "stage", ".", "append", "(", "\n", "block", "(", "self", ".", "input_channels", ",", "\n", "output_channels", ",", "\n", "stride", "=", "stride", ",", "\n", "stage", "=", "stage", ",", "\n", "groups", "=", "groups", ")", ")", "\n", "self", ".", "input_channels", "=", "output_channels", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "stage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.shufflenet.shufflenet": [[229, 231], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "", "def", "shufflenet", "(", "num_classes", ")", ":", "\n", "    ", "return", "ShuffleNet", "(", "[", "4", ",", "8", ",", "4", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.nasnet.SeperableConv2d.__init__": [[16, 26], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "output_channels", ",", "kernel_size", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depthwise", "=", "nn", ".", "Conv2d", "(", "input_channels", ",", "\n", "input_channels", ",", "\n", "kernel_size", ",", "\n", "groups", "=", "input_channels", ",", "\n", "**", "kwargs", ")", "\n", "\n", "self", ".", "pointwise", "=", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.nasnet.SeperableConv2d.forward": [[27, 32], ["nasnet.SeperableConv2d.depthwise", "nasnet.SeperableConv2d.pointwise"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "depthwise", "(", "x", ")", "\n", "x", "=", "self", ".", "pointwise", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.nasnet.SeperableBranch.__init__": [[35, 51], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "nasnet.SeperableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "nasnet.SeperableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "int"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "output_channels", ",", "kernel_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Adds 2 blocks of [relu-separable conv-batchnorm].\"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SeperableConv2d", "(", "input_channels", ",", "output_channels", ",", "kernel_size", ",", "\n", "**", "kwargs", ")", ",", "nn", ".", "BatchNorm2d", "(", "output_channels", ")", ")", "\n", "\n", "self", ".", "block2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "SeperableConv2d", "(", "output_channels", ",", "\n", "output_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "int", "(", "kernel_size", "/", "2", ")", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "output_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.nasnet.SeperableBranch.forward": [[52, 57], ["nasnet.SeperableBranch.block1", "nasnet.SeperableBranch.block2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.nasnet.Fit.__init__": [[66, 87], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ConstantPad2d", "torch.ConstantPad2d", "torch.ConstantPad2d", "torch.ConstantPad2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["def", "__init__", "(", "self", ",", "prev_filters", ",", "filters", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "p1", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "1", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "prev_filters", ",", "int", "(", "filters", "/", "2", ")", ",", "1", ")", ")", "\n", "\n", "#make sure there is no information loss", "\n", "self", ".", "p2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConstantPad2d", "(", "(", "0", ",", "1", ",", "0", ",", "1", ")", ",", "0", ")", ",", "\n", "nn", ".", "ConstantPad2d", "(", "(", "-", "1", ",", "0", ",", "-", "1", ",", "0", ")", ",", "0", ")", ",", "#cropping", "\n", "nn", ".", "AvgPool2d", "(", "1", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "prev_filters", ",", "int", "(", "filters", "/", "2", ")", ",", "1", ")", ")", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "filters", ")", "\n", "\n", "self", ".", "dim_reduce", "=", "nn", ".", "Sequential", "(", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "prev_filters", ",", "filters", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "filters", ")", ")", "\n", "\n", "self", ".", "filters", "=", "filters", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.nasnet.Fit.forward": [[88, 105], ["x.size", "nasnet.Fit.size", "nasnet.Fit.relu", "nasnet.Fit.p1", "nasnet.Fit.p2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "nasnet.Fit.bn", "nasnet.Fit.size", "nasnet.Fit.dim_reduce"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", ",", "prev", "=", "inputs", "\n", "if", "prev", "is", "None", ":", "\n", "            ", "return", "x", "\n", "\n", "#image size does not match", "\n", "", "elif", "x", ".", "size", "(", "2", ")", "!=", "prev", ".", "size", "(", "2", ")", ":", "\n", "            ", "prev", "=", "self", ".", "relu", "(", "prev", ")", "\n", "p1", "=", "self", ".", "p1", "(", "prev", ")", "\n", "p2", "=", "self", ".", "p2", "(", "prev", ")", "\n", "prev", "=", "torch", ".", "cat", "(", "[", "p1", ",", "p2", "]", ",", "1", ")", "\n", "prev", "=", "self", ".", "bn", "(", "prev", ")", "\n", "\n", "", "elif", "prev", ".", "size", "(", "1", ")", "!=", "self", ".", "filters", ":", "\n", "            ", "prev", "=", "self", ".", "dim_reduce", "(", "prev", ")", "\n", "\n", "", "return", "prev", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.nasnet.NormalCell.__init__": [[108, 151], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "nasnet.SeperableBranch", "torch.Sequential", "torch.Sequential", "nasnet.SeperableBranch", "nasnet.SeperableBranch", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "nasnet.SeperableBranch", "nasnet.SeperableBranch", "nasnet.Fit", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x_in", ",", "prev_in", ",", "output_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dem_reduce", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Conv2d", "(", "x_in", ",", "output_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "output_channels", ")", ")", "\n", "\n", "self", ".", "block1_left", "=", "SeperableBranch", "(", "output_channels", ",", "\n", "output_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "block1_right", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "block2_left", "=", "SeperableBranch", "(", "output_channels", ",", "\n", "output_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "block2_right", "=", "SeperableBranch", "(", "output_channels", ",", "\n", "output_channels", ",", "\n", "kernel_size", "=", "5", ",", "\n", "padding", "=", "2", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "self", ".", "block3_left", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "block3_right", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "block4_left", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "block4_right", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "block5_left", "=", "SeperableBranch", "(", "output_channels", ",", "\n", "output_channels", ",", "\n", "kernel_size", "=", "5", ",", "\n", "padding", "=", "2", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "block5_right", "=", "SeperableBranch", "(", "output_channels", ",", "\n", "output_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "self", ".", "fit", "=", "Fit", "(", "prev_in", ",", "output_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.nasnet.NormalCell.forward": [[152, 168], ["nasnet.NormalCell.fit", "nasnet.NormalCell.dem_reduce", "nasnet.NormalCell.block1_left", "nasnet.NormalCell.block1_right", "nasnet.NormalCell.block2_left", "nasnet.NormalCell.block2_right", "nasnet.NormalCell.block3_left", "nasnet.NormalCell.block3_right", "nasnet.NormalCell.block4_left", "nasnet.NormalCell.block4_right", "nasnet.NormalCell.block5_left", "nasnet.NormalCell.block5_right", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ",", "prev", "=", "x", "\n", "\n", "#return transformed x as new x, and original x as prev", "\n", "#only prev tensor needs to be modified", "\n", "prev", "=", "self", ".", "fit", "(", "(", "x", ",", "prev", ")", ")", "\n", "\n", "h", "=", "self", ".", "dem_reduce", "(", "x", ")", "\n", "\n", "x1", "=", "self", ".", "block1_left", "(", "h", ")", "+", "self", ".", "block1_right", "(", "h", ")", "\n", "x2", "=", "self", ".", "block2_left", "(", "prev", ")", "+", "self", ".", "block2_right", "(", "h", ")", "\n", "x3", "=", "self", ".", "block3_left", "(", "h", ")", "+", "self", ".", "block3_right", "(", "h", ")", "\n", "x4", "=", "self", ".", "block4_left", "(", "prev", ")", "+", "self", ".", "block4_right", "(", "prev", ")", "\n", "x5", "=", "self", ".", "block5_left", "(", "prev", ")", "+", "self", ".", "block5_right", "(", "prev", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "prev", ",", "x1", ",", "x2", ",", "x3", ",", "x4", ",", "x5", "]", ",", "1", ")", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.nasnet.ReductionCell.__init__": [[171, 219], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "nasnet.SeperableBranch", "nasnet.SeperableBranch", "torch.MaxPool2d", "torch.MaxPool2d", "nasnet.SeperableBranch", "torch.AvgPool2d", "torch.AvgPool2d", "nasnet.SeperableBranch", "torch.MaxPool2d", "torch.MaxPool2d", "nasnet.SeperableBranch", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Sequential", "torch.Sequential", "nasnet.Fit", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x_in", ",", "prev_in", ",", "output_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dim_reduce", "=", "nn", ".", "Sequential", "(", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "x_in", ",", "output_channels", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "output_channels", ")", ")", "\n", "\n", "#block1", "\n", "self", ".", "layer1block1_left", "=", "SeperableBranch", "(", "output_channels", ",", "\n", "output_channels", ",", "\n", "7", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "3", ")", "\n", "self", ".", "layer1block1_right", "=", "SeperableBranch", "(", "output_channels", ",", "\n", "output_channels", ",", "\n", "5", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "2", ")", "\n", "\n", "#block2", "\n", "self", ".", "layer1block2_left", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1block2_right", "=", "SeperableBranch", "(", "output_channels", ",", "\n", "output_channels", ",", "\n", "7", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "3", ")", "\n", "\n", "#block3", "\n", "self", ".", "layer1block3_left", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "2", ",", "1", ")", "\n", "self", ".", "layer1block3_right", "=", "SeperableBranch", "(", "output_channels", ",", "\n", "output_channels", ",", "\n", "5", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "2", ")", "\n", "\n", "#block5", "\n", "self", ".", "layer2block1_left", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "2", ",", "1", ")", "\n", "self", ".", "layer2block1_right", "=", "SeperableBranch", "(", "output_channels", ",", "\n", "output_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ")", "\n", "\n", "#block4", "\n", "self", ".", "layer2block2_left", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "layer2block2_right", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "fit", "=", "Fit", "(", "prev_in", ",", "output_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.nasnet.ReductionCell.forward": [[220, 245], ["nasnet.ReductionCell.fit", "nasnet.ReductionCell.dim_reduce", "nasnet.ReductionCell.layer1block1_left", "nasnet.ReductionCell.layer1block1_right", "nasnet.ReductionCell.layer1block2_left", "nasnet.ReductionCell.layer1block2_right", "nasnet.ReductionCell.layer1block3_left", "nasnet.ReductionCell.layer1block3_right", "nasnet.ReductionCell.layer2block1_left", "nasnet.ReductionCell.layer2block1_right", "nasnet.ReductionCell.layer2block2_left", "nasnet.ReductionCell.layer2block2_right", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ",", "prev", "=", "x", "\n", "prev", "=", "self", ".", "fit", "(", "(", "x", ",", "prev", ")", ")", "\n", "\n", "h", "=", "self", ".", "dim_reduce", "(", "x", ")", "\n", "\n", "layer1block1", "=", "self", ".", "layer1block1_left", "(", "prev", ")", "+", "self", ".", "layer1block1_right", "(", "\n", "h", ")", "\n", "layer1block2", "=", "self", ".", "layer1block2_left", "(", "h", ")", "+", "self", ".", "layer1block2_right", "(", "\n", "prev", ")", "\n", "layer1block3", "=", "self", ".", "layer1block3_left", "(", "h", ")", "+", "self", ".", "layer1block3_right", "(", "\n", "prev", ")", "\n", "layer2block1", "=", "self", ".", "layer2block1_left", "(", "h", ")", "+", "self", ".", "layer2block1_right", "(", "\n", "layer1block1", ")", "\n", "layer2block2", "=", "self", ".", "layer2block2_left", "(", "\n", "layer1block1", ")", "+", "self", ".", "layer2block2_right", "(", "layer1block2", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "\n", "[", "\n", "layer1block2", ",", "#https://github.com/keras-team/keras-applications/blob/master/keras_applications/nasnet.py line 739", "\n", "layer1block3", ",", "\n", "layer2block1", ",", "\n", "layer2block2", "\n", "]", ",", "\n", "1", ")", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.nasnet.NasNetA.__init__": [[248, 269], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "nasnet.NasNetA._make_layers", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.nasnet.NasNetA._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "\n", "repeat_cell_num", ",", "\n", "reduction_num", ",", "\n", "filters", ",", "\n", "stemfilter", ",", "\n", "class_num", "=", "100", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "stemfilter", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "stemfilter", ")", ")", "\n", "\n", "self", ".", "prev_filters", "=", "stemfilter", "\n", "self", ".", "x_filters", "=", "stemfilter", "\n", "self", ".", "filters", "=", "filters", "\n", "\n", "self", ".", "cell_layers", "=", "self", ".", "_make_layers", "(", "repeat_cell_num", ",", "reduction_num", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "avg", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "filters", "*", "6", ",", "class_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.nasnet.NasNetA._make_normal": [[270, 287], ["range", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_normal", "(", "self", ",", "block", ",", "repeat", ",", "output", ")", ":", "\n", "        ", "\"\"\"make normal cell\n        Args:\n            block: cell type\n            repeat: number of repeated normal cell\n            output: output filters for each branch in normal cell\n        Returns:\n            stacked normal cells\n        \"\"\"", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "r", "in", "range", "(", "repeat", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "x_filters", ",", "self", ".", "prev_filters", ",", "output", ")", ")", "\n", "self", ".", "prev_filters", "=", "self", ".", "x_filters", "\n", "self", ".", "x_filters", "=", "output", "*", "6", "#concatenate 6 branches", "\n", "\n", "", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.nasnet.NasNetA._make_reduction": [[288, 302], ["block"], "methods", ["None"], ["", "def", "_make_reduction", "(", "self", ",", "block", ",", "output", ")", ":", "\n", "        ", "\"\"\"make normal cell\n        Args:\n            block: cell type\n            output: output filters for each branch in reduction cell\n        Returns:\n            reduction cell\n        \"\"\"", "\n", "\n", "reduction", "=", "block", "(", "self", ".", "x_filters", ",", "self", ".", "prev_filters", ",", "output", ")", "\n", "self", ".", "prev_filters", "=", "self", ".", "x_filters", "\n", "self", ".", "x_filters", "=", "output", "*", "4", "#stack for 4 branches", "\n", "\n", "return", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.nasnet.NasNetA._make_layers": [[303, 317], ["range", "layers.extend", "torch.Sequential", "torch.Sequential", "layers.extend", "layers.append", "nasnet.NasNetA._make_normal", "nasnet.NasNetA._make_normal", "nasnet.NasNetA._make_reduction"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.models.nasnet.NasNetA._make_normal", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.nasnet.NasNetA._make_normal", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.nasnet.NasNetA._make_reduction"], ["", "def", "_make_layers", "(", "self", ",", "repeat_cell_num", ",", "reduction_num", ")", ":", "\n", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "reduction_num", ")", ":", "\n", "\n", "            ", "layers", ".", "extend", "(", "\n", "self", ".", "_make_normal", "(", "NormalCell", ",", "repeat_cell_num", ",", "self", ".", "filters", ")", ")", "\n", "self", ".", "filters", "*=", "2", "\n", "layers", ".", "append", "(", "self", ".", "_make_reduction", "(", "ReductionCell", ",", "self", ".", "filters", ")", ")", "\n", "\n", "", "layers", ".", "extend", "(", "\n", "self", ".", "_make_normal", "(", "NormalCell", ",", "repeat_cell_num", ",", "self", ".", "filters", ")", ")", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.nasnet.NasNetA.forward": [[318, 329], ["nasnet.NasNetA.stem", "nasnet.NasNetA.cell_layers", "nasnet.NasNetA.relu", "nasnet.NasNetA.avg", "nasnet.NasNetA.view", "nasnet.NasNetA.fc", "nasnet.NasNetA.size"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.Metric.avg"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "prev", "=", "None", "\n", "x", ",", "prev", "=", "self", ".", "cell_layers", "(", "(", "x", ",", "prev", ")", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "avg", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.nasnet.nasnet": [[331, 335], ["nasnet.NasNetA"], "function", ["None"], ["", "", "def", "nasnet", "(", "class_num", "=", "100", ")", ":", "\n", "\n", "#stem filters must be 44, it's a pytorch workaround, cant change to other number", "\n", "    ", "return", "NasNetA", "(", "4", ",", "2", ",", "44", ",", "44", ",", "class_num", "=", "100", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.BasicBlock.__init__": [[28, 39], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.conv3x3", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "out_planes", ",", "out_planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.BasicBlock.forward": [[40, 57], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.Bottleneck.__init__": [[68, 97], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_planes", ",", "\n", "out_channels", "=", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "out_planes", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "out_planes", ",", "\n", "out_channels", "=", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "out_planes", ",", "\n", "out_channels", "=", "out_planes", "*", "4", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "out_planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.Bottleneck.forward": [[98, 119], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.ResNetBase._decide_num_classes": [[122, 129], ["None"], "methods", ["None"], ["    ", "def", "_decide_num_classes", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "dataset", "==", "\"cifar10\"", "or", "self", ".", "dataset", "==", "\"svhn\"", ":", "\n", "            ", "return", "10", "\n", "", "elif", "self", ".", "dataset", "==", "\"cifar100\"", ":", "\n", "            ", "return", "100", "\n", "", "elif", "self", ".", "dataset", "==", "\"imagenet\"", ":", "\n", "            ", "return", "1000", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.ResNetBase._weight_initialization": [[130, 138], ["resnet.ResNetBase.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "", "def", "_weight_initialization", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "# elif isinstance(m, nn.Linear):", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.ResNetBase._make_block": [[142, 163], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block_fn", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block_fn"], "methods", ["None"], ["", "", "", "def", "_make_block", "(", "self", ",", "block_fn", ",", "planes", ",", "block_num", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block_fn", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block_fn", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block_fn", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block_fn", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block_fn", ".", "expansion", "\n", "\n", "for", "_", "in", "range", "(", "1", ",", "block_num", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block_fn", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.ResNet_imagenet.__init__": [[166, 236], ["torch.Module.__init__", "resnet.ResNet_imagenet._decide_num_classes", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d", "resnet.ResNet_imagenet._make_block", "resnet.ResNet_imagenet._make_block", "resnet.ResNet_imagenet._make_block", "resnet.ResNet_imagenet._make_block", "torch.AvgPool2d", "torch.Linear", "resnet.ResNet_imagenet._weight_initialization"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.ResNetBase._decide_num_classes", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.ResNetBase._make_block", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.ResNetBase._make_block", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.ResNetBase._make_block", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.ResNetBase._make_block", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.ResNetBase._weight_initialization"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "resnet_size", ")", ":", "\n", "        ", "super", "(", "ResNet_imagenet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "\n", "# define model param.", "\n", "model_params", "=", "{", "\n", "18", ":", "{", "\n", "\"block\"", ":", "BasicBlock", ",", "\n", "\"layers\"", ":", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "}", ",", "\n", "34", ":", "{", "\n", "\"block\"", ":", "BasicBlock", ",", "\n", "\"layers\"", ":", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "}", ",", "\n", "50", ":", "{", "\n", "\"block\"", ":", "Bottleneck", ",", "\n", "\"layers\"", ":", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "}", ",", "\n", "101", ":", "{", "\n", "\"block\"", ":", "Bottleneck", ",", "\n", "\"layers\"", ":", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "}", ",", "\n", "152", ":", "{", "\n", "\"block\"", ":", "Bottleneck", ",", "\n", "\"layers\"", ":", "[", "3", ",", "8", ",", "36", ",", "3", "]", "\n", "}", ",", "\n", "}", "\n", "block_fn", "=", "model_params", "[", "resnet_size", "]", "[", "\"block\"", "]", "\n", "block_nums", "=", "model_params", "[", "resnet_size", "]", "[", "\"layers\"", "]", "\n", "\n", "# decide the num of classes.", "\n", "self", ".", "num_classes", "=", "self", ".", "_decide_num_classes", "(", ")", "\n", "\n", "# define layers.", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "3", ",", "\n", "out_channels", "=", "64", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_block", "(", "block_fn", "=", "block_fn", ",", "\n", "planes", "=", "64", ",", "\n", "block_num", "=", "block_nums", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_block", "(", "block_fn", "=", "block_fn", ",", "\n", "planes", "=", "128", ",", "\n", "block_num", "=", "block_nums", "[", "1", "]", ",", "\n", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_block", "(", "block_fn", "=", "block_fn", ",", "\n", "planes", "=", "256", ",", "\n", "block_num", "=", "block_nums", "[", "2", "]", ",", "\n", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_block", "(", "block_fn", "=", "block_fn", ",", "\n", "planes", "=", "512", ",", "\n", "block_num", "=", "block_nums", "[", "3", "]", ",", "\n", "stride", "=", "2", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_features", "=", "512", "*", "block_fn", ".", "expansion", ",", "\n", "out_features", "=", "self", ".", "num_classes", ")", "\n", "\n", "# weight initialization based on layer type.", "\n", "self", ".", "_weight_initialization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.ResNet_imagenet.forward": [[237, 252], ["resnet.ResNet_imagenet.conv1", "resnet.ResNet_imagenet.bn1", "resnet.ResNet_imagenet.relu", "resnet.ResNet_imagenet.maxpool", "resnet.ResNet_imagenet.layer1", "resnet.ResNet_imagenet.layer2", "resnet.ResNet_imagenet.layer3", "resnet.ResNet_imagenet.layer4", "resnet.ResNet_imagenet.avgpool", "resnet.ResNet_imagenet.view", "resnet.ResNet_imagenet.fc", "resnet.ResNet_imagenet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.ResNet_cifar.__init__": [[255, 299], ["torch.Module.__init__", "resnet.ResNet_cifar._decide_num_classes", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "resnet.ResNet_cifar._make_block", "resnet.ResNet_cifar._make_block", "resnet.ResNet_cifar._make_block", "torch.AvgPool2d", "torch.Linear", "resnet.ResNet_cifar._weight_initialization", "ValueError"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.ResNetBase._decide_num_classes", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.ResNetBase._make_block", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.ResNetBase._make_block", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.ResNetBase._make_block", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.ResNetBase._weight_initialization"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "resnet_size", ")", ":", "\n", "        ", "super", "(", "ResNet_cifar", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "\n", "# define model.", "\n", "if", "resnet_size", "%", "6", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\"resnet_size must be 6n + 2:\"", ",", "resnet_size", ")", "\n", "", "block_nums", "=", "(", "resnet_size", "-", "2", ")", "//", "6", "\n", "block_fn", "=", "Bottleneck", "if", "resnet_size", ">=", "44", "else", "BasicBlock", "\n", "\n", "# decide the num of classes.", "\n", "self", ".", "num_classes", "=", "self", ".", "_decide_num_classes", "(", ")", "\n", "\n", "# define layers.", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "3", ",", "\n", "out_channels", "=", "16", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "16", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_block", "(", "block_fn", "=", "block_fn", ",", "\n", "planes", "=", "16", ",", "\n", "block_num", "=", "block_nums", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_block", "(", "block_fn", "=", "block_fn", ",", "\n", "planes", "=", "32", ",", "\n", "block_num", "=", "block_nums", ",", "\n", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_block", "(", "block_fn", "=", "block_fn", ",", "\n", "planes", "=", "64", ",", "\n", "block_num", "=", "block_nums", ",", "\n", "stride", "=", "2", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "8", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_features", "=", "64", "*", "block_fn", ".", "expansion", ",", "\n", "out_features", "=", "self", ".", "num_classes", ")", "\n", "\n", "# weight initialization based on layer type.", "\n", "self", ".", "_weight_initialization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.ResNet_cifar.forward": [[300, 313], ["resnet.ResNet_cifar.conv1", "resnet.ResNet_cifar.bn1", "resnet.ResNet_cifar.relu", "resnet.ResNet_cifar.layer1", "resnet.ResNet_cifar.layer2", "resnet.ResNet_cifar.layer3", "resnet.ResNet_cifar.avgpool", "resnet.ResNet_cifar.view", "resnet.ResNet_cifar.fc", "resnet.ResNet_cifar.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.conv3x3": [[8, 17], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding.\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_planes", ",", "\n", "out_channels", "=", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.resnet": [[315, 325], ["resnet.ResNet_cifar", "resnet.ResNet_imagenet"], "function", ["None"], ["", "", "def", "resnet", "(", "dataset", ",", "resnet_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    \"\"\"", "\n", "if", "\"cifar\"", "in", "dataset", "or", "\"svhn\"", "in", "dataset", ":", "\n", "        ", "model", "=", "ResNet_cifar", "(", "dataset", "=", "dataset", ",", "resnet_size", "=", "resnet_size", ")", "\n", "", "elif", "\"imagenet\"", "in", "dataset", ":", "\n", "        ", "model", "=", "ResNet_imagenet", "(", "dataset", "=", "dataset", ",", "resnet_size", "=", "resnet_size", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.densenet.Bottleneck.__init__": [[22, 41], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "growth_rate", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "#\"\"\"In  our experiments, we let each 1\u00d71 convolution", "\n", "#produce 4k feature-maps.\"\"\"", "\n", "inner_channel", "=", "4", "*", "growth_rate", "\n", "\n", "#\"\"\"We find this design especially effective for DenseNet and", "\n", "#we refer to our network with such a bottleneck layer, i.e.,", "\n", "#to the BN-ReLU-Conv(1\u00d71)-BN-ReLU-Conv(3\u00d73) version of H ` ,", "\n", "#as DenseNet-B.\"\"\"", "\n", "self", ".", "bottle_neck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "inner_channel", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "inner_channel", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inner_channel", ",", "\n", "growth_rate", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.densenet.Bottleneck.forward": [[42, 44], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "densenet.Bottleneck.bottle_neck"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "x", ",", "self", ".", "bottle_neck", "(", "x", ")", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.densenet.Transition.__init__": [[49, 59], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "#\"\"\"The transition layers used in our experiments", "\n", "#consist of a batch normalization layer and an 1\u00d71", "\n", "#convolutional layer followed by a 2\u00d72 average pooling", "\n", "#layer\"\"\".", "\n", "self", ".", "down_sample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "2", ",", "stride", "=", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.densenet.Transition.forward": [[60, 62], ["densenet.Transition.down_sample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "down_sample", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.densenet.DenseNet.__init__": [[68, 121], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "range", "densenet.DenseNet.features.add_module", "densenet.DenseNet.features.add_module", "densenet.DenseNet.features.add_module", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "densenet.DenseNet.features.add_module", "int", "densenet.DenseNet.features.add_module", "densenet.DenseNet._make_dense_layers", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "len", "densenet.DenseNet._make_dense_layers", "densenet.Transition", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.densenet.DenseNet._make_dense_layers"], ["    ", "def", "__init__", "(", "self", ",", "\n", "block", ",", "\n", "nblocks", ",", "\n", "growth_rate", "=", "12", ",", "\n", "reduction", "=", "0.5", ",", "\n", "num_class", "=", "100", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "growth_rate", "=", "growth_rate", "\n", "\n", "#\"\"\"Before entering the first dense block, a convolution", "\n", "#with 16 (or twice the growth rate for DenseNet-BC)", "\n", "#output channels is performed on the input images.\"\"\"", "\n", "inner_channels", "=", "2", "*", "growth_rate", "\n", "\n", "#For convolutional layers with kernel size 3\u00d73, each", "\n", "#side of the inputs is zero-padded by one pixel to keep", "\n", "#the feature-map size fixed.", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "\n", "inner_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "for", "index", "in", "range", "(", "len", "(", "nblocks", ")", "-", "1", ")", ":", "\n", "            ", "self", ".", "features", ".", "add_module", "(", "\n", "\"dense_block_layer_{}\"", ".", "format", "(", "index", ")", ",", "\n", "self", ".", "_make_dense_layers", "(", "block", ",", "inner_channels", ",", "nblocks", "[", "index", "]", ")", ")", "\n", "inner_channels", "+=", "growth_rate", "*", "nblocks", "[", "index", "]", "\n", "\n", "#\"\"\"If a dense block contains m feature-maps, we let the", "\n", "#following transition layer generate \u03b8m output feature-", "\n", "#maps, where 0 < \u03b8 \u2264 1 is referred to as the compression", "\n", "#fac-tor.", "\n", "out_channels", "=", "int", "(", "\n", "reduction", "*", "\n", "inner_channels", ")", "# int() will automatic floor the value", "\n", "self", ".", "features", ".", "add_module", "(", "\"transition_layer_{}\"", ".", "format", "(", "index", ")", ",", "\n", "Transition", "(", "inner_channels", ",", "out_channels", ")", ")", "\n", "inner_channels", "=", "out_channels", "\n", "\n", "", "self", ".", "features", ".", "add_module", "(", "\n", "\"dense_block{}\"", ".", "format", "(", "len", "(", "nblocks", ")", "-", "1", ")", ",", "\n", "self", ".", "_make_dense_layers", "(", "block", ",", "inner_channels", ",", "\n", "nblocks", "[", "len", "(", "nblocks", ")", "-", "1", "]", ")", ")", "\n", "inner_channels", "+=", "growth_rate", "*", "nblocks", "[", "len", "(", "nblocks", ")", "-", "1", "]", "\n", "self", ".", "features", ".", "add_module", "(", "'bn'", ",", "nn", ".", "BatchNorm2d", "(", "inner_channels", ")", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "inner_channels", ",", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.densenet.DenseNet.forward": [[122, 129], ["densenet.DenseNet.conv1", "densenet.DenseNet.features", "densenet.DenseNet.avgpool", "densenet.DenseNet.view", "densenet.DenseNet.linear", "densenet.DenseNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "self", ".", "conv1", "(", "x", ")", "\n", "output", "=", "self", ".", "features", "(", "output", ")", "\n", "output", "=", "self", ".", "avgpool", "(", "output", ")", "\n", "output", "=", "output", ".", "view", "(", "output", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "output", "=", "self", ".", "linear", "(", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.densenet.DenseNet._make_dense_layers": [[130, 137], ["torch.Sequential", "torch.Sequential", "range", "torch.Sequential.add_module", "block"], "methods", ["None"], ["", "def", "_make_dense_layers", "(", "self", ",", "block", ",", "in_channels", ",", "nblocks", ")", ":", "\n", "        ", "dense_block", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "index", "in", "range", "(", "nblocks", ")", ":", "\n", "            ", "dense_block", ".", "add_module", "(", "'bottle_neck_layer_{}'", ".", "format", "(", "index", ")", ",", "\n", "block", "(", "in_channels", ",", "self", ".", "growth_rate", ")", ")", "\n", "in_channels", "+=", "self", ".", "growth_rate", "\n", "", "return", "dense_block", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.densenet.densenet121": [[139, 143], ["densenet.DenseNet"], "function", ["None"], ["", "", "def", "densenet121", "(", "num_classes", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "\n", "growth_rate", "=", "32", ",", "\n", "num_class", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.densenet.densenet169": [[145, 149], ["densenet.DenseNet"], "function", ["None"], ["", "def", "densenet169", "(", "num_classes", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "32", ",", "32", "]", ",", "\n", "growth_rate", "=", "32", ",", "\n", "num_class", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.densenet.densenet201": [[151, 155], ["densenet.DenseNet"], "function", ["None"], ["", "def", "densenet201", "(", "num_classes", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "48", ",", "32", "]", ",", "\n", "growth_rate", "=", "32", ",", "\n", "num_class", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.densenet.densenet161": [[157, 161], ["densenet.DenseNet"], "function", ["None"], ["", "def", "densenet161", "(", "num_classes", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "36", ",", "24", "]", ",", "\n", "growth_rate", "=", "48", ",", "\n", "num_class", "=", "num_classes", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnext.ResNextBottleNeckC.__init__": [[32, 69], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "C", "=", "CARDINALITY", "#How many groups a feature map was splitted into", "\n", "\n", "#\"\"\"We note that the input/output width of the template is fixed as", "\n", "#256-d (Fig. 3), We note that the input/output width of the template", "\n", "#is fixed as 256-d (Fig. 3), and all widths are dou- bled each time", "\n", "#when the feature map is subsampled (see Table 1).\"\"\"", "\n", "D", "=", "int", "(", "DEPTH", "*", "out_channels", "/", "\n", "BASEWIDTH", ")", "#number of channels per group", "\n", "self", ".", "split_transforms", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "C", "*", "D", ",", "kernel_size", "=", "1", ",", "groups", "=", "C", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "*", "D", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", "*", "D", ",", "\n", "C", "*", "D", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "groups", "=", "C", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "*", "D", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", "*", "D", ",", "out_channels", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", "*", "4", ")", ",", "\n", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_channels", "!=", "out_channels", "*", "4", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "\n", "out_channels", "*", "4", ",", "\n", "stride", "=", "stride", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "out_channels", "*", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnext.ResNextBottleNeckC.forward": [[70, 72], ["torch.relu", "torch.relu", "torch.relu", "resnext.ResNextBottleNeckC.split_transforms", "resnext.ResNextBottleNeckC.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "relu", "(", "self", ".", "split_transforms", "(", "x", ")", "+", "self", ".", "shortcut", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnext.ResNext.__init__": [[75, 89], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnext.ResNext._make_layer", "resnext.ResNext._make_layer", "resnext.ResNext._make_layer", "resnext.ResNext._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnext.ResNext._make_layer", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnext.ResNext._make_layer", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnext.ResNext._make_layer", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnext.ResNext._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "class_names", "=", "100", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "self", ".", "_make_layer", "(", "block", ",", "num_blocks", "[", "0", "]", ",", "64", ",", "1", ")", "\n", "self", ".", "conv3", "=", "self", ".", "_make_layer", "(", "block", ",", "num_blocks", "[", "1", "]", ",", "128", ",", "2", ")", "\n", "self", ".", "conv4", "=", "self", ".", "_make_layer", "(", "block", ",", "num_blocks", "[", "2", "]", ",", "256", ",", "2", ")", "\n", "self", ".", "conv5", "=", "self", ".", "_make_layer", "(", "block", ",", "num_blocks", "[", "3", "]", ",", "512", ",", "2", ")", "\n", "self", ".", "avg", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "4", ",", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnext.ResNext.forward": [[90, 100], ["resnext.ResNext.conv1", "resnext.ResNext.conv2", "resnext.ResNext.conv3", "resnext.ResNext.conv4", "resnext.ResNext.conv5", "resnext.ResNext.avg", "resnext.ResNext.view", "resnext.ResNext.fc", "resnext.ResNext.size"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.Metric.avg"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "avg", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnext.ResNext._make_layer": [[101, 119], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "num_block", ",", "out_channels", ",", "stride", ")", ":", "\n", "        ", "\"\"\"Building resnext block\n        Args:\n            block: block type(default resnext bottleneck c)\n            num_block: number of blocks per layer\n            out_channels: output channels per block\n            stride: block stride\n        \n        Returns:\n            a resnext layer\n        \"\"\"", "\n", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_block", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_channels", ",", "out_channels", ",", "stride", ")", ")", "\n", "self", ".", "in_channels", "=", "out_channels", "*", "4", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnext.resnext50": [[121, 125], ["resnext.ResNext"], "function", ["None"], ["", "", "def", "resnext50", "(", "num_classes", ")", ":", "\n", "    ", "\"\"\" return a resnext50(c32x4d) network\n    \"\"\"", "\n", "return", "ResNext", "(", "ResNextBottleNeckC", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "class_names", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnext.resnext101": [[127, 131], ["resnext.ResNext"], "function", ["None"], ["", "def", "resnext101", "(", ")", ":", "\n", "    ", "\"\"\" return a resnext101(c32x4d) network\n    \"\"\"", "\n", "return", "ResNext", "(", "ResNextBottleNeckC", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnext.resnext152": [[133, 137], ["resnext.ResNext"], "function", ["None"], ["", "def", "resnext152", "(", ")", ":", "\n", "    ", "\"\"\" return a resnext101(c32x4d) network\n    \"\"\"", "\n", "return", "ResNext", "(", "ResNextBottleNeckC", ",", "[", "3", ",", "4", ",", "36", ",", "3", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.__init__.get_model": [[15, 72], ["print", "torchvision.models.resnet18", "torchvision.models.resnet34", "torchvision.models.resnet50", "resnet.resnet", "resnet.resnet", "wideresnet.Wide_ResNet", "wideresnet.Wide_ResNet", "wideresnet.Wide_ResNet", "torchvision.models.shufflenet_v2_x1_0", "resnext50", "smallnet.SmallNet", "squeezenet", "nasnet", "densenet.densenet121", "densenet.densenet169", "torchvision.models.mobilenet_v2", "mobilenetv3.mobilenetv3_large", "mobilenetv3.mobilenetv3_small", "efficientnet_b0", "efficientnet_b1", "efficientnet_b2", "efficientnet_b3"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.resnet", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnet.resnet", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.resnext.resnext50", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.squeezenet.squeezenet", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.nasnet.nasnet", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.densenet.densenet121", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.densenet.densenet169", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3.mobilenetv3_large", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.mobilenetv3.mobilenetv3_small", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.efficientnet_b0", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.efficientnet_b1", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.efficientnet_b2", "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.efficientnet.efficientnet_b3"], ["def", "get_model", "(", "args", ")", ":", "\n", "# Model", "\n", "    ", "print", "(", "'==> Building model..'", ")", "\n", "if", "args", ".", "model", "==", "'res18'", ":", "\n", "        ", "net", "=", "models", ".", "resnet18", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "", "elif", "args", ".", "model", "==", "'res34'", ":", "\n", "        ", "net", "=", "models", ".", "resnet34", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "", "elif", "args", ".", "model", "==", "'res50'", ":", "\n", "        ", "net", "=", "models", ".", "resnet50", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "", "elif", "args", ".", "model", "==", "'res20'", ":", "\n", "        ", "net", "=", "resnet", "(", "args", ".", "dataset", ",", "20", ")", "\n", "", "elif", "args", ".", "model", "==", "'res32'", ":", "\n", "        ", "net", "=", "resnet", "(", "args", ".", "dataset", ",", "32", ")", "\n", "", "elif", "args", ".", "model", "==", "'wnet28'", ":", "\n", "        ", "net", "=", "Wide_ResNet", "(", "28", ",", "10", ",", "0.3", ",", "args", ".", "num_classes", ")", "\n", "", "elif", "args", ".", "model", "==", "'wnet168'", ":", "\n", "        ", "net", "=", "Wide_ResNet", "(", "16", ",", "8", ",", "0.3", ",", "args", ".", "num_classes", ")", "\n", "", "elif", "args", ".", "model", "==", "'wnet34'", ":", "\n", "        ", "net", "=", "Wide_ResNet", "(", "34", ",", "10", ",", "0.3", ",", "args", ".", "num_classes", ")", "\n", "", "elif", "args", ".", "model", "==", "'shufflenet'", ":", "\n", "        ", "net", "=", "models", ".", "shufflenet_v2_x1_0", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "", "elif", "args", ".", "model", "==", "'resnext50'", ":", "\n", "        ", "from", ".", "resnext", "import", "resnext50", "\n", "net", "=", "resnext50", "(", "num_classes", "=", "args", ".", "num_classes", ")", "# ResNet50()", "\n", "", "elif", "args", ".", "model", "==", "'small'", ":", "\n", "        ", "net", "=", "SmallNet", "(", ")", "\n", "", "elif", "args", ".", "model", "==", "'squuezenet'", ":", "\n", "        ", "from", ".", "squeezenet", "import", "squeezenet", "\n", "net", "=", "squeezenet", "(", "class_num", "=", "args", ".", "num_classes", ")", "\n", "", "elif", "args", ".", "model", "==", "'nasnet'", ":", "\n", "        ", "from", ".", "nasnet", "import", "nasnet", "\n", "net", "=", "nasnet", "(", "class_num", "=", "args", ".", "num_classes", ")", "\n", "", "elif", "args", ".", "model", "==", "'densenet121'", ":", "\n", "        ", "net", "=", "densenet121", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "", "elif", "args", ".", "model", "==", "'densenet169'", ":", "\n", "        ", "net", "=", "densenet169", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "", "elif", "args", ".", "model", "==", "'mobilenetv2'", ":", "\n", "        ", "net", "=", "models", ".", "mobilenet_v2", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "", "elif", "args", ".", "model", "==", "'mobilenetv3l'", ":", "\n", "        ", "net", "=", "mobilenetv3_large", "(", "num_classes", "=", "args", ".", "num_classes", ",", "width_mult", "=", "0.75", ")", "\n", "", "elif", "args", ".", "model", "==", "'mobilenetv3s'", ":", "\n", "        ", "net", "=", "mobilenetv3_small", "(", "num_classes", "=", "args", ".", "num_classes", ",", "width_mult", "=", "1.", ")", "\n", "", "elif", "args", ".", "model", "==", "'efficientnetb0'", ":", "\n", "        ", "from", ".", "efficientnet", "import", "efficientnet_b0", "\n", "net", "=", "efficientnet_b0", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "", "elif", "args", ".", "model", "==", "'efficientnetb1'", ":", "\n", "        ", "from", ".", "efficientnet", "import", "efficientnet_b1", "\n", "net", "=", "efficientnet_b1", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "", "elif", "args", ".", "model", "==", "'efficientnetb2'", ":", "\n", "        ", "from", ".", "efficientnet", "import", "efficientnet_b2", "\n", "net", "=", "efficientnet_b2", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "", "elif", "args", ".", "model", "==", "'efficientnetb3'", ":", "\n", "        ", "from", ".", "efficientnet", "import", "efficientnet_b3", "\n", "net", "=", "efficientnet_b3", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "net", "\n", "", ""]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.squeezenet.Fire.__init__": [[16, 30], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "squzee_channel", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "squeeze", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channel", ",", "squzee_channel", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "squzee_channel", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "expand_1x1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "squzee_channel", ",", "int", "(", "out_channel", "/", "2", ")", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "int", "(", "out_channel", "/", "2", ")", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "expand_3x3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "squzee_channel", ",", "int", "(", "out_channel", "/", "2", ")", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "int", "(", "out_channel", "/", "2", ")", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.squeezenet.Fire.forward": [[31, 37], ["squeezenet.Fire.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "squeezenet.Fire.expand_1x1", "squeezenet.Fire.expand_3x3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "squeeze", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "self", ".", "expand_1x1", "(", "x", ")", ",", "self", ".", "expand_3x3", "(", "x", ")", "]", ",", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.squeezenet.SqueezeNet.__init__": [[41, 60], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "squeezenet.Fire", "squeezenet.Fire", "squeezenet.Fire", "squeezenet.Fire", "squeezenet.Fire", "squeezenet.Fire", "squeezenet.Fire", "squeezenet.Fire", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__"], ["def", "__init__", "(", "self", ",", "class_num", "=", "100", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "3", ",", "96", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "96", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "fire2", "=", "Fire", "(", "96", ",", "128", ",", "16", ")", "\n", "self", ".", "fire3", "=", "Fire", "(", "128", ",", "128", ",", "16", ")", "\n", "self", ".", "fire4", "=", "Fire", "(", "128", ",", "256", ",", "32", ")", "\n", "self", ".", "fire5", "=", "Fire", "(", "256", ",", "256", ",", "32", ")", "\n", "self", ".", "fire6", "=", "Fire", "(", "256", ",", "384", ",", "48", ")", "\n", "self", ".", "fire7", "=", "Fire", "(", "384", ",", "384", ",", "48", ")", "\n", "self", ".", "fire8", "=", "Fire", "(", "384", ",", "512", ",", "64", ")", "\n", "self", ".", "fire9", "=", "Fire", "(", "512", ",", "512", ",", "64", ")", "\n", "\n", "self", ".", "conv10", "=", "nn", ".", "Conv2d", "(", "512", ",", "class_num", ",", "1", ")", "\n", "self", ".", "avg", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.squeezenet.SqueezeNet.forward": [[61, 82], ["squeezenet.SqueezeNet.stem", "squeezenet.SqueezeNet.fire2", "squeezenet.SqueezeNet.fire4", "squeezenet.SqueezeNet.maxpool", "squeezenet.SqueezeNet.fire6", "squeezenet.SqueezeNet.fire8", "squeezenet.SqueezeNet.maxpool", "squeezenet.SqueezeNet.fire9", "squeezenet.SqueezeNet.conv10", "squeezenet.SqueezeNet.avg", "x.view.view.view", "squeezenet.SqueezeNet.fire3", "squeezenet.SqueezeNet.fire5", "squeezenet.SqueezeNet.fire7", "x.view.view.size"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.Metric.avg"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "\n", "f2", "=", "self", ".", "fire2", "(", "x", ")", "\n", "f3", "=", "self", ".", "fire3", "(", "f2", ")", "+", "f2", "\n", "f4", "=", "self", ".", "fire4", "(", "f3", ")", "\n", "f4", "=", "self", ".", "maxpool", "(", "f4", ")", "\n", "\n", "f5", "=", "self", ".", "fire5", "(", "f4", ")", "+", "f4", "\n", "f6", "=", "self", ".", "fire6", "(", "f5", ")", "\n", "f7", "=", "self", ".", "fire7", "(", "f6", ")", "+", "f6", "\n", "f8", "=", "self", ".", "fire8", "(", "f7", ")", "\n", "f8", "=", "self", ".", "maxpool", "(", "f8", ")", "\n", "\n", "f9", "=", "self", ".", "fire9", "(", "f8", ")", "\n", "c10", "=", "self", ".", "conv10", "(", "f9", ")", "\n", "\n", "x", "=", "self", ".", "avg", "(", "c10", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.models.squeezenet.squeezenet": [[84, 86], ["squeezenet.SqueezeNet"], "function", ["None"], ["", "", "def", "squeezenet", "(", "class_num", "=", "100", ")", ":", "\n", "    ", "return", "SqueezeNet", "(", "class_num", "=", "class_num", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.LAPSGD.opt.__init__": [[56, 63], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "parameters", ",", "lr", ",", "momentum", ",", "weight_decay", ",", "nesterov", ")", ":", "\n", "        ", "self", ".", "parameters", "=", "parameters", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "nesterov", "=", "nesterov", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "state", "=", "defaultdict", "(", "dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.LAPSGD.opt.step": [[64, 85], ["zip", "p.data.add_", "d_p.add.add.add_", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "d_p.add.add.add", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone().detach.mul_", "torch.clone().detach.mul_", "torch.clone().detach.mul_", "torch.clone().detach.mul_", "torch.clone().detach.mul_"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "grad", ")", ":", "\n", "        ", "for", "p", ",", "d_p", "in", "zip", "(", "self", ".", "parameters", ",", "grad", ")", ":", "\n", "            ", "if", "d_p", "is", "None", ":", "\n", "                ", "continue", "\n", "", "if", "self", ".", "weight_decay", "!=", "0", ":", "\n", "                ", "d_p", ".", "add_", "(", "p", ".", "data", ",", "alpha", "=", "self", ".", "weight_decay", ")", "\n", "\n", "", "if", "self", ".", "momentum", "!=", "0", ":", "\n", "                ", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                    ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "clone", "(", "\n", "d_p", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                    ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "buf", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "d_p", ")", "\n", "", "if", "self", ".", "nesterov", ":", "\n", "                    ", "d_p", "=", "d_p", ".", "add", "(", "buf", ",", "alpha", "=", "self", ".", "momentum", ")", "\n", "", "else", ":", "\n", "                    ", "d_p", "=", "buf", "\n", "\n", "", "", "p", ".", "data", ".", "add_", "(", "d_p", ",", "alpha", "=", "-", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.LAPSGD.average": [[26, 53], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.barrier", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.all_reduce", "maxepoch[].item", "minibatch_counter.get_lock", "minibatch_counter.get_lock", "print", "utilities.communicator.communicate_to_all", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "maxepoch[].item", "list", "net.parameters", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.communicator.communicate_to_all"], ["def", "average", "(", "net", ",", "args", ",", "minibatch_counter", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "devicerank", ")", "\n", "last_averaged_at", "=", "0", "\n", "while", "True", ":", "\n", "        ", "with", "minibatch_counter", ".", "get_lock", "(", ")", ":", "\n", "            ", "minibatches", "=", "minibatch_counter", ".", "value", "\n", "", "if", "minibatches", ">", "0", ":", "\n", "            ", "break", "\n", "", "", "dist", ".", "barrier", "(", ")", "\n", "while", "True", ":", "\n", "        ", "with", "minibatch_counter", ".", "get_lock", "(", ")", ":", "\n", "            ", "minibatches", "=", "minibatch_counter", ".", "value", "\n", "", "maxepoch", "=", "torch", ".", "tensor", "(", "[", "minibatches", ",", "\n", "-", "last_averaged_at", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "dist", ".", "all_reduce", "(", "maxepoch", ",", "op", "=", "dist", ".", "ReduceOp", ".", "MAX", ")", "\n", "maxminibatches", "=", "maxepoch", "[", "0", "]", ".", "item", "(", ")", "\n", "if", "maxminibatches", ">=", "args", ".", "trainloaderlength", "*", "args", ".", "epochs", ":", "\n", "            ", "print", "(", "\"Reached MaxEpoch at rank \"", ",", "args", ".", "commrank", ",", "maxepoch", ",", "\n", "minibatches", ")", "\n", "break", "\n", "", "avg_freq", "=", "1", "if", "maxminibatches", "*", "1.0", "/", "args", ".", "trainloaderlength", "<", "args", ".", "pre_post_epochs", "else", "args", ".", "averaging_freq", "\n", "\n", "if", "maxminibatches", "+", "maxepoch", "[", "1", "]", ".", "item", "(", ")", ">=", "avg_freq", ":", "\n", "# print(\"Averaging\")", "\n", "            ", "communicate_to_all", "(", "list", "(", "net", ".", "parameters", "(", ")", ")", ",", "args", ",", "minibatches", ")", "\n", "last_averaged_at", "=", "minibatches", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.LAPSGD.test_train": [[87, 122], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "print", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.CrossEntropyLoss", "LAPSGD.opt", "process_barrier.wait", "results.append", "results.append", "print", "dataloaders.get_dataloader", "list", "utilities.utils.CosineAnnealingLR", "utilities.utils.MultiStepLR", "LAPSGD.train_epoch", "net.parameters", "epoch_counter.get_lock", "str", "str"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.__init__.get_dataloader", "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.MBSGD.train_epoch"], ["", "", "", "def", "test_train", "(", "rank", ",", "net", ",", "results", ",", "start", ",", "args", ",", "epoch_counter", ",", "\n", "minibatch_counter", ",", "trainloader", ",", "train_sampler", ",", "testloader", ",", "\n", "best_acc", ",", "last_tested_at", ",", "process_barrier", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "devicerank", ")", "\n", "if", "rank", ">", "0", ":", "\n", "        ", "(", "trainloader", ",", "train_sampler", ",", "_", ")", ",", "(", "testloader", ",", "_", ")", "=", "get_dataloader", "(", "args", ")", "\n", "", "print", "(", "\"LAPSGD Training Started at Commrank \"", ",", "args", ".", "commrank", ",", "rank", ")", "\n", "torch", ".", "set_num_threads", "(", "args", ".", "num_threads", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "optimizer", "=", "opt", "(", "list", "(", "net", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "args", ".", "baseline_lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "nesterov", "=", "args", ".", "nesterov", ")", "\n", "\n", "if", "args", ".", "scheduler_type", "==", "'cosine'", ":", "\n", "        ", "scheduler", "=", "CosineAnnealingLR", "(", "optimizer", ",", "args", ")", "\n", "", "else", ":", "\n", "        ", "scheduler", "=", "MultiStepLR", "(", "optimizer", ",", "args", ")", "\n", "", "epoch", "=", "0", "\n", "test_results", "=", "[", "]", "\n", "train_results", "=", "[", "]", "\n", "process_barrier", ".", "wait", "(", ")", "\n", "while", "epoch", "<", "args", ".", "epochs", ":", "\n", "        ", "with", "epoch_counter", ".", "get_lock", "(", ")", ":", "\n", "            ", "sampling_epoch", "=", "epoch_counter", ".", "value", "\n", "epoch_counter", ".", "value", "+=", "1", "\n", "", "epoch", "=", "train_epoch", "(", "rank", ",", "net", ",", "args", ",", "trainloader", ",", "optimizer", ",", "scheduler", ",", "\n", "criterion", ",", "sampling_epoch", ",", "results", ",", "start", ",", "\n", "minibatch_counter", ",", "train_sampler", ",", "last_tested_at", ",", "\n", "testloader", ",", "best_acc", ",", "test_results", ",", "train_results", ")", "\n", "", "results", ".", "append", "(", "{", "'tag'", ":", "'testresult'", "+", "str", "(", "rank", ")", ",", "'val'", ":", "test_results", "}", ")", "\n", "results", ".", "append", "(", "{", "'tag'", ":", "'trainresult'", "+", "str", "(", "rank", ")", ",", "'val'", ":", "train_results", "}", ")", "\n", "print", "(", "\"LAPSGD Training completed at rank \"", ",", "rank", ",", "args", ".", "commrank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.LAPSGD.train_epoch": [[124, 191], ["utilities.utils.LocalMetric", "utilities.utils.LocalMetric", "net.train", "utilities.utils.bar", "enumerate", "results.append", "train_sampler.set_epoch", "range", "scheduler.step", "optimizer.step", "utilities.utils.bar.progress_bar", "train_results.append", "len", "net.train", "net", "criterion", "utilities.utils.accuracy", "utilities.utils.LocalMetric.update", "utilities.utils.LocalMetric.update", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "minibatch_counter.get_lock", "time.perf_counter", "os.getpid", "utilities.utils.test_epoch", "inputs.to", "targets.to", "utilities.utils.accuracy.item", "data_batch.size", "criterion.item", "data_batch.size", "criterion.item", "data_batch.size", "utilities.utils.accuracy.item", "data_batch.size", "len", "criterion.div_", "zip", "last_tested_at.get_lock", "len", "math.ceil", "g1.add_", "float", "len"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.sampler.DistributedPercentageSampler.set_epoch", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.step", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.step", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.bar.progress_bar", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.accuracy", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.Metric.update", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.Metric.update", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.test_epoch"], ["", "def", "train_epoch", "(", "rank", ",", "net", ",", "args", ",", "trainloader", ",", "optimizer", ",", "scheduler", ",", "criterion", ",", "\n", "sampling_epoch", ",", "results", ",", "start", ",", "minibatch_counter", ",", "\n", "train_sampler", ",", "last_tested_at", ",", "testloader", ",", "best_acc", ",", "\n", "test_results", ",", "train_results", ")", ":", "\n", "    ", "losses", "=", "LocalMetric", "(", "'Loss'", ")", "\n", "top1", "=", "LocalMetric", "(", "'Acc@1'", ")", "\n", "if", "train_sampler", "is", "not", "None", ":", "\n", "        ", "train_sampler", ".", "set_epoch", "(", "sampling_epoch", ")", "\n", "", "net", ".", "train", "(", ")", "\n", "b", "=", "bar", "(", "args", ".", "trainloaderlength", ",", "30", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "'cuda'", ")", ",", "targets", ".", "to", "(", "'cuda'", ")", "\n", "", "batch_loss", "=", "0", "\n", "batch_acc", "=", "0", "\n", "gr", "=", "None", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "inputs", ")", ",", "args", ".", "train_processing_bs", ")", ":", "\n", "            ", "net", ".", "train", "(", ")", "\n", "data_batch", "=", "inputs", "[", "i", ":", "i", "+", "args", ".", "train_processing_bs", "]", "\n", "target_batch", "=", "targets", "[", "i", ":", "i", "+", "args", ".", "train_processing_bs", "]", "\n", "outputs", "=", "net", "(", "data_batch", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "target_batch", ")", "\n", "acc", "=", "accuracy", "(", "outputs", ",", "target_batch", ")", "\n", "top1", ".", "update", "(", "acc", ".", "item", "(", ")", ",", "data_batch", ".", "size", "(", "0", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "data_batch", ".", "size", "(", "0", ")", ")", "\n", "batch_loss", "+=", "loss", ".", "item", "(", ")", "*", "data_batch", ".", "size", "(", "0", ")", "\n", "batch_acc", "+=", "acc", ".", "item", "(", ")", "*", "data_batch", ".", "size", "(", "0", ")", "\n", "if", "len", "(", "inputs", ")", "!=", "args", ".", "train_processing_bs", ":", "\n", "                ", "loss", ".", "div_", "(", "\n", "math", ".", "ceil", "(", "float", "(", "len", "(", "inputs", ")", ")", "/", "args", ".", "train_processing_bs", ")", ")", "\n", "", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "optimizer", ".", "parameters", ")", "\n", "'''Gradient Accumulation'''", "\n", "if", "gr", "is", "None", ":", "\n", "                ", "gr", "=", "grad", "\n", "", "else", ":", "\n", "                ", "for", "g1", ",", "g2", "in", "zip", "(", "gr", ",", "grad", ")", ":", "\n", "                    ", "g1", ".", "add_", "(", "g2", ")", "\n", "", "", "", "'''Model update with gradient.'''", "\n", "with", "minibatch_counter", ".", "get_lock", "(", ")", ":", "\n", "            ", "minibatches", "=", "minibatch_counter", ".", "value", "\n", "with", "last_tested_at", ".", "get_lock", "(", ")", ":", "\n", "                ", "if", "minibatches", "-", "last_tested_at", ".", "value", ">=", "args", ".", "test_freq", "*", "args", ".", "trainloaderlength", ":", "\n", "                    ", "do_test", "=", "True", "\n", "last_tested_at", ".", "value", "=", "minibatches", "\n", "", "else", ":", "\n", "                    ", "do_test", "=", "False", "\n", "", "", "minibatch_counter", ".", "value", "+=", "1", "\n", "", "epoch", "=", "minibatches", "*", "1.0", "/", "args", ".", "trainloaderlength", "\n", "scheduler", ".", "step", "(", "epoch", ")", "\n", "optimizer", ".", "step", "(", "gr", ")", "\n", "\n", "lr", "=", "optimizer", ".", "lr", "\n", "rightnow", "=", "time", ".", "perf_counter", "(", ")", "-", "start", "\n", "banner_string", "=", "'PID: {:d},CommRank: {:d}, Rank: {:d}|TrEp: {:.2f}|Loss: {:.4f}|Acc: {:4.3f}% ({:.0f}/{:.0f})|LR: {:.7f}'", ".", "format", "(", "\n", "os", ".", "getpid", "(", ")", ",", "args", ".", "commrank", ",", "rank", ",", "epoch", ",", "losses", ".", "avg", ",", "\n", "top1", ".", "avg", "*", "100", ",", "top1", ".", "sum", ",", "top1", ".", "count", ",", "lr", ")", "\n", "b", ".", "progress_bar", "(", "batch_idx", ",", "rightnow", ",", "banner_string", ")", "\n", "train_results", ".", "append", "(", "\n", "(", "minibatches", ",", "rightnow", ",", "batch_loss", ",", "batch_acc", ",", "len", "(", "inputs", ")", ")", ")", "\n", "if", "do_test", ":", "\n", "            ", "test_epoch", "(", "net", ",", "args", ",", "start", ",", "testloader", ",", "criterion", ",", "best_acc", ",", "\n", "test_results", ",", "epoch", ",", "rank", ")", "\n", "", "if", "minibatches", ">=", "args", ".", "epochs", "*", "args", ".", "trainloaderlength", ":", "\n", "            ", "break", "\n", "\n", "", "", "results", ".", "append", "(", "{", "'tag'", ":", "'LR'", ",", "'ep'", ":", "epoch", ",", "'val'", ":", "lr", ",", "'time'", ":", "rightnow", "}", ")", "\n", "return", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.LAPSGD.run": [[193, 246], ["print", "torch.set_start_method", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "models.get_model", "net.cuda.cuda", "time.perf_counter", "torch.Manager", "mp.Manager.list", "manager.list.append", "torch.Value", "torch.Value", "torch.Value", "torch.Value", "torch.Barrier", "dataloaders.get_dataloader", "len", "len", "range", "LAPSGD.average", "utilities.utils.process_test_result", "utilities.utils.process_train_result", "utilities.results_summary.results_summary", "print", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.Process", "processes.append", "mp.Process.start", "mp.Process.join", "utilities.utils.result_save", "time.perf_counter"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.models.__init__.get_model", "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.__init__.get_dataloader", "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.LPPSGD.average", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.process_test_result", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.process_train_result", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.results_summary.results_summary", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.result_save"], ["", "def", "run", "(", "args", ")", ":", "\n", "    ", "args", ".", "devicerank", "=", "args", ".", "commrank", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "print", "(", "\"CommRank=\"", ",", "args", ".", "commrank", ",", "\"CommSize=\"", ",", "args", ".", "commsize", ",", "\"DeviceRank=\"", ",", "args", ".", "devicerank", ",", "args", ".", "dist_url", ",", "args", ".", "dist_backend", ")", "\n", "mp", ".", "set_start_method", "(", "'spawn'", ",", "force", "=", "True", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "devicerank", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "\n", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "commsize", ",", "\n", "rank", "=", "args", ".", "commrank", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "cudnn", ".", "benchmark", "=", "False", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "net", "=", "get_model", "(", "args", ")", "\n", "net", "=", "net", ".", "cuda", "(", ")", "\n", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "results", "=", "manager", ".", "list", "(", ")", "\n", "results", ".", "append", "(", "{", "\n", "'tag'", ":", "'LR'", ",", "\n", "'ep'", ":", "0", ",", "\n", "'val'", ":", "args", ".", "baseline_lr", ",", "\n", "'time'", ":", "time", ".", "perf_counter", "(", ")", "-", "start", "\n", "}", ")", "\n", "epoch_counter", "=", "mp", ".", "Value", "(", "'i'", ",", "0", ")", "\n", "minibatch_counter", "=", "mp", ".", "Value", "(", "'i'", ",", "0", ")", "\n", "last_tested_at", "=", "mp", ".", "Value", "(", "'i'", ",", "0", ")", "\n", "best_acc", "=", "mp", ".", "Value", "(", "'d'", ",", "0", ")", "\n", "process_barrier", "=", "mp", ".", "Barrier", "(", "args", ".", "num_processes", ")", "\n", "(", "trainloader", ",", "train_sampler", ",", "_", ")", ",", "(", "testloader", ",", "_", ")", "=", "get_dataloader", "(", "args", ")", "\n", "args", ".", "trainloaderlength", "=", "len", "(", "trainloader", ")", "\n", "args", ".", "testloaderlength", "=", "len", "(", "testloader", ")", "\n", "processes", "=", "[", "]", "\n", "for", "rank", "in", "range", "(", "args", ".", "num_processes", ")", ":", "\n", "        ", "p", "=", "mp", ".", "Process", "(", "target", "=", "test_train", ",", "\n", "args", "=", "(", "rank", ",", "net", ",", "results", ",", "start", ",", "args", ",", "epoch_counter", ",", "\n", "minibatch_counter", ",", "trainloader", ",", "train_sampler", ",", "\n", "testloader", ",", "best_acc", ",", "last_tested_at", ",", "\n", "process_barrier", ")", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "", "for", "p", "in", "processes", ":", "\n", "        ", "p", ".", "start", "(", ")", "\n", "", "average", "(", "net", ",", "args", ",", "minibatch_counter", ")", "\n", "for", "p", "in", "processes", ":", "\n", "        ", "p", ".", "join", "(", ")", "\n", "", "process_test_result", "(", "results", ",", "args", ")", "\n", "process_train_result", "(", "results", ",", "args", ")", "\n", "results_summary", "(", "results", ",", "args", ")", "\n", "if", "args", ".", "storeresults", ":", "\n", "        ", "result_save", "(", "results", ",", "args", ")", "\n", "", "print", "(", "\"Run Complete!\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.LPPSGD.opt.__init__": [[77, 95], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "parameters", ",", "\n", "lr", ",", "\n", "momentum", ",", "\n", "weight_decay", ",", "\n", "nesterov", ",", "\n", "rankstart", ",", "\n", "rankstop", ",", "\n", "extra_multiple", "=", "1", ")", ":", "\n", "        ", "self", ".", "parameters", "=", "parameters", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "nesterov", "=", "nesterov", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "extra_multiple", "=", "extra_multiple", "\n", "self", ".", "state", "=", "defaultdict", "(", "dict", ")", "\n", "self", ".", "rankstart", "=", "rankstart", "\n", "self", ".", "rankstop", "=", "rankstop", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.LPPSGD.opt.step": [[96, 122], ["enumerate", "p.data.add_", "d_p.add.add.add_", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "d_p.add.add.add", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone().detach.mul_", "torch.clone().detach.mul_", "torch.clone().detach.mul_", "torch.clone().detach.mul_", "torch.clone().detach.mul_"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "grad", ",", "is_passm", ")", ":", "\n", "        ", "counter", "=", "0", "\n", "for", "index", ",", "p", "in", "enumerate", "(", "self", ".", "parameters", ")", ":", "\n", "            ", "if", "is_passm", "==", "1", "and", "(", "index", "<", "self", ".", "rankstart", "\n", "or", "index", ">=", "self", ".", "rankstop", ")", ":", "\n", "                ", "continue", "\n", "", "d_p", "=", "grad", "[", "counter", "]", "\n", "counter", "+=", "1", "\n", "\n", "if", "self", ".", "weight_decay", "!=", "0", ":", "\n", "                ", "d_p", ".", "add_", "(", "p", ".", "data", ",", "alpha", "=", "self", ".", "weight_decay", ")", "\n", "\n", "", "if", "self", ".", "momentum", "!=", "0", ":", "\n", "                ", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                    ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "clone", "(", "\n", "d_p", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                    ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "buf", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "d_p", ")", "\n", "", "if", "self", ".", "nesterov", ":", "\n", "                    ", "d_p", "=", "d_p", ".", "add", "(", "buf", ",", "alpha", "=", "self", ".", "momentum", ")", "\n", "", "else", ":", "\n", "                    ", "d_p", "=", "buf", "\n", "\n", "", "", "p", ".", "data", ".", "add_", "(", "d_p", ",", "alpha", "=", "-", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.LPPSGD.CosineAnnealingLR.__init__": [[125, 138], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "args", ",", "eta_min", "=", "0", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "T_max", "=", "args", ".", "epochs", "+", "0.1", "-", "args", ".", "warm_up_epochs", "\n", "self", ".", "T_i", "=", "args", ".", "warm_up_epochs", "\n", "self", ".", "eta_min", "=", "eta_min", "\n", "self", ".", "gamma", "=", "args", ".", "gamma", "\n", "self", ".", "base_lr", "=", "args", ".", "lr", "\n", "self", ".", "init_lr", "=", "args", ".", "baseline_lr", "\n", "self", ".", "factor", "=", "self", ".", "base_lr", "/", "self", ".", "init_lr", "\n", "self", ".", "warm_up_epochs", "=", "args", ".", "warm_up_epochs", "\n", "if", "self", ".", "warm_up_epochs", ">", "0", ":", "\n", "            ", "assert", "self", ".", "factor", ">=", "1", ",", "\"The target LR {:.3f} should be >= baseline_lr {:.2f}!\"", ".", "format", "(", "\n", "self", ".", "base_lr", ",", "self", ".", "init_lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.LPPSGD.CosineAnnealingLR.step": [[139, 149], ["math.cos"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "epoch", ",", "isPassm", "=", "False", ")", ":", "\n", "        ", "if", "epoch", "<", "self", ".", "warm_up_epochs", ":", "\n", "            ", "lr", "=", "self", ".", "base_lr", "*", "1", "/", "self", ".", "factor", "*", "(", "\n", "epoch", "*", "(", "self", ".", "factor", "-", "1", ")", "/", "self", ".", "warm_up_epochs", "+", "1", ")", "\n", "self", ".", "optimizer", ".", "lr", "=", "lr", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", ".", "lr", "=", "self", ".", "eta_min", "+", "(", "\n", "self", ".", "base_lr", "-", "self", ".", "eta_min", ")", "*", "(", "\n", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "\n", "(", "epoch", "-", "self", ".", "T_i", ")", "/", "self", ".", "T_max", ")", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.LPPSGD.MultiStepLR.__init__": [[152, 163], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "args", ",", "milestones_travelled", "=", "0", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "milestones_travelled", "=", "milestones_travelled", "\n", "self", ".", "milestones", "=", "args", ".", "lrmilestone", "\n", "self", ".", "gamma", "=", "args", ".", "gamma", "\n", "self", ".", "target_lr", "=", "args", ".", "lr", "\n", "self", ".", "init_lr", "=", "optimizer", ".", "lr", "\n", "self", ".", "factor", "=", "self", ".", "target_lr", "/", "self", ".", "init_lr", "\n", "self", ".", "warm_up_epochs", "=", "args", ".", "warm_up_epochs", "\n", "if", "self", ".", "warm_up_epochs", ">", "0", ":", "\n", "            ", "assert", "self", ".", "factor", ">=", "1", ",", "\"The target LR should be >= baseline_lr!\"", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.LPPSGD.MultiStepLR.step": [[164, 177], ["print", "len"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "epoch", ",", "isPassm", "=", "False", ")", ":", "\n", "        ", "if", "epoch", "<", "self", ".", "warm_up_epochs", ":", "\n", "            ", "lr", "=", "self", ".", "target_lr", "*", "1", "/", "self", ".", "factor", "*", "(", "\n", "epoch", "*", "(", "self", ".", "factor", "-", "1", ")", "/", "self", ".", "warm_up_epochs", "+", "1", ")", "\n", "self", ".", "optimizer", ".", "lr", "=", "lr", "\n", "", "elif", "epoch", ">=", "self", ".", "warm_up_epochs", "and", "epoch", "<", "self", ".", "milestones", "[", "0", "]", ":", "\n", "            ", "self", ".", "optimizer", ".", "lr", "=", "self", ".", "target_lr", "\n", "", "elif", "self", ".", "milestones_travelled", "<", "len", "(", "\n", "self", ".", "milestones", ")", "and", "epoch", ">=", "self", ".", "milestones", "[", "\n", "self", ".", "milestones_travelled", "]", ":", "\n", "            ", "print", "(", "\"Dampening LR at \"", ",", "epoch", ")", "\n", "self", ".", "milestones_travelled", "+=", "1", "\n", "self", ".", "optimizer", ".", "lr", "=", "self", ".", "optimizer", ".", "lr", "*", "self", ".", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.LPPSGD.get_indices": [[25, 51], ["sum", "len", "sum", "list", "math.ceil", "enumerate", "p.numel", "itertools.accumulate", "p.numel"], "function", ["None"], ["def", "get_indices", "(", "param_list", ",", "\n", "num_processes", ",", "\n", "mymaster_rank", ")", ":", "\n", "    ", "model_size", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "param_list", ")", "\n", "model_len", "=", "len", "(", "param_list", ")", "\n", "layer_weights", "=", "[", "p", ".", "numel", "(", ")", "for", "p", "in", "param_list", "]", "\n", "num_weights", "=", "sum", "(", "layer_weights", ")", "\n", "re", "=", "list", "(", "itertools", ".", "accumulate", "(", "layer_weights", ",", "lambda", "x", ",", "y", ":", "x", "+", "y", ")", ")", "\n", "\"\"\"Average number of parameters to be allocated to the processes\"\"\"", "\n", "weight_chunk_size", "=", "math", ".", "ceil", "(", "num_weights", "/", "num_processes", ")", "\n", "\"\"\"The rank of the parmeters to be assigned to the processes\"\"\"", "\n", "chunkstart", "=", "mymaster_rank", "*", "weight_chunk_size", "\n", "chunkstop", "=", "(", "mymaster_rank", "+", "1", ")", "*", "weight_chunk_size", "\n", "if", "mymaster_rank", "==", "num_processes", "-", "1", ":", "\n", "        ", "chunkstop", "=", "num_weights", "\n", "rankstop", "=", "model_len", "\n", "", "my_ratio", "=", "(", "chunkstop", "-", "chunkstart", ")", "/", "model_size", "\n", "if", "mymaster_rank", "==", "0", ":", "\n", "        ", "rankstart", "=", "0", "\n", "", "for", "ind", ",", "r", "in", "enumerate", "(", "re", ")", ":", "\n", "        ", "if", "ind", ">", "0", "and", "r", ">=", "chunkstart", "and", "re", "[", "ind", "-", "1", "]", "<", "chunkstart", ":", "\n", "            ", "rankstart", "=", "ind", "+", "1", "\n", "", "if", "ind", "<", "model_len", "-", "2", "and", "r", "<=", "chunkstop", "+", "1", "and", "re", "[", "\n", "ind", "+", "1", "]", ">", "chunkstop", ":", "\n", "            ", "rankstop", "=", "ind", "+", "2", "\n", "", "", "return", "model_size", ",", "my_ratio", ",", "rankstart", ",", "rankstop", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.LPPSGD.average": [[53, 74], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.all_reduce", "maxepoch[].item", "minibatch_counter.get_lock", "print", "utilities.communicator.communicate_to_all", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "maxepoch[].item", "list", "net.parameters", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.communicator.communicate_to_all"], ["", "def", "average", "(", "net", ",", "args", ",", "minibatch_counter", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "devicerank", ")", "\n", "last_averaged_at", "=", "0", "\n", "while", "True", ":", "\n", "        ", "with", "minibatch_counter", ".", "get_lock", "(", ")", ":", "\n", "            ", "minibatches", "=", "minibatch_counter", ".", "value", "\n", "", "maxepoch", "=", "torch", ".", "tensor", "(", "[", "minibatches", ",", "\n", "-", "last_averaged_at", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "dist", ".", "all_reduce", "(", "maxepoch", ",", "op", "=", "dist", ".", "ReduceOp", ".", "MAX", ")", "\n", "maxminibatches", "=", "maxepoch", "[", "0", "]", ".", "item", "(", ")", "\n", "if", "maxminibatches", ">=", "args", ".", "trainloaderlength", "*", "args", ".", "epochs", ":", "\n", "            ", "print", "(", "\"Reached MaxEpoch at rank \"", ",", "args", ".", "commrank", ",", "maxepoch", ",", "\n", "minibatches", ")", "\n", "break", "\n", "", "avg_freq", "=", "1", "if", "maxminibatches", "*", "1.0", "/", "args", ".", "trainloaderlength", "<", "args", ".", "pre_post_epochs", "else", "args", ".", "averaging_freq", "\n", "\n", "if", "maxminibatches", "+", "maxepoch", "[", "1", "]", ".", "item", "(", ")", ">=", "avg_freq", ":", "\n", "# print(\"Averaging\")", "\n", "            ", "communicate_to_all", "(", "list", "(", "net", ".", "parameters", "(", ")", ")", ",", "args", ",", "minibatches", ")", "\n", "last_averaged_at", "=", "minibatches", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.LPPSGD.test_train": [[179, 219], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "print", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.CrossEntropyLoss", "LPPSGD.opt", "process_barrier.wait", "results.append", "results.append", "print", "dataloaders.get_dataloader", "list", "LPPSGD.CosineAnnealingLR", "LPPSGD.MultiStepLR", "LPPSGD.train_epoch", "net.parameters", "epoch_counter.get_lock", "str", "str"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.__init__.get_dataloader", "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.MBSGD.train_epoch"], ["", "", "", "def", "test_train", "(", "rank", ",", "net", ",", "results", ",", "start", ",", "args", ",", "epoch_counter", ",", "\n", "minibatch_counter", ",", "rankstart", ",", "rankstop", ",", "trainloader", ",", "\n", "train_sampler", ",", "testloader", ",", "best_acc", ",", "last_tested_at", ",", "\n", "process_barrier", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "devicerank", ")", "\n", "if", "rank", ">", "0", ":", "\n", "        ", "(", "trainloader", ",", "train_sampler", ",", "_", ")", ",", "(", "testloader", ",", "_", ")", "=", "get_dataloader", "(", "args", ")", "\n", "", "print", "(", "\"LPPSGD Training Started at Commrank \"", ",", "args", ".", "commrank", ",", "rank", ")", "\n", "torch", ".", "set_num_threads", "(", "args", ".", "num_threads", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "optimizer", "=", "opt", "(", "list", "(", "net", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "args", ".", "baseline_lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "nesterov", "=", "args", ".", "nesterov", ",", "\n", "rankstart", "=", "rankstart", ",", "\n", "rankstop", "=", "rankstop", ")", "\n", "\n", "if", "args", ".", "scheduler_type", "==", "'cosine'", ":", "\n", "        ", "scheduler", "=", "CosineAnnealingLR", "(", "optimizer", ",", "args", ")", "\n", "", "else", ":", "\n", "        ", "scheduler", "=", "MultiStepLR", "(", "optimizer", ",", "args", ")", "\n", "", "epoch", "=", "0", "\n", "is_passm", "=", "[", "0", "]", "\n", "test_results", "=", "[", "]", "\n", "train_results", "=", "[", "]", "\n", "process_barrier", ".", "wait", "(", ")", "\n", "while", "epoch", "<", "args", ".", "epochs", ":", "\n", "        ", "with", "epoch_counter", ".", "get_lock", "(", ")", ":", "\n", "            ", "sampling_epoch", "=", "epoch_counter", ".", "value", "\n", "epoch_counter", ".", "value", "+=", "1", "\n", "", "epoch", "=", "train_epoch", "(", "rank", ",", "net", ",", "args", ",", "trainloader", ",", "optimizer", ",", "scheduler", ",", "\n", "criterion", ",", "sampling_epoch", ",", "results", ",", "start", ",", "\n", "minibatch_counter", ",", "train_sampler", ",", "last_tested_at", ",", "\n", "testloader", ",", "best_acc", ",", "is_passm", ",", "rankstart", ",", "\n", "rankstop", ",", "test_results", ",", "train_results", ")", "\n", "", "results", ".", "append", "(", "{", "'tag'", ":", "'testresult'", "+", "str", "(", "rank", ")", ",", "'val'", ":", "test_results", "}", ")", "\n", "results", ".", "append", "(", "{", "'tag'", ":", "'trainresult'", "+", "str", "(", "rank", ")", ",", "'val'", ":", "train_results", "}", ")", "\n", "print", "(", "\"LPPSGD Training completed at rank \"", ",", "rank", ",", "args", ".", "commrank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.LPPSGD.train_epoch": [[221, 304], ["utilities.utils.LocalMetric", "utilities.utils.LocalMetric", "net.train", "utilities.utils.bar", "enumerate", "results.append", "train_sampler.set_epoch", "range", "scheduler.step", "optimizer.step", "utilities.utils.bar.progress_bar", "train_results.append", "len", "net.train", "net", "criterion", "utilities.utils.accuracy", "utilities.utils.LocalMetric.update", "utilities.utils.LocalMetric.update", "minibatch_counter.get_lock", "time.perf_counter", "os.getpid", "utilities.utils.test_epoch", "inputs.to", "targets.to", "utilities.utils.accuracy.item", "data_batch.size", "criterion.item", "data_batch.size", "criterion.item", "data_batch.size", "utilities.utils.accuracy.item", "data_batch.size", "len", "criterion.div_", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "zip", "last_tested_at.get_lock", "len", "math.ceil", "len", "g1.add_", "float", "len"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.sampler.DistributedPercentageSampler.set_epoch", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.step", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.step", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.bar.progress_bar", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.accuracy", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.Metric.update", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.Metric.update", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.test_epoch"], ["", "def", "train_epoch", "(", "rank", ",", "net", ",", "args", ",", "trainloader", ",", "optimizer", ",", "scheduler", ",", "criterion", ",", "\n", "sampling_epoch", ",", "results", ",", "start", ",", "minibatch_counter", ",", "\n", "train_sampler", ",", "last_tested_at", ",", "testloader", ",", "best_acc", ",", "is_passm", ",", "\n", "rankstart", ",", "rankstop", ",", "test_results", ",", "train_results", ")", ":", "\n", "    ", "losses", "=", "LocalMetric", "(", "'Loss'", ")", "\n", "top1", "=", "LocalMetric", "(", "'Acc@1'", ")", "\n", "if", "train_sampler", "is", "not", "None", ":", "\n", "        ", "train_sampler", ".", "set_epoch", "(", "sampling_epoch", ")", "\n", "", "net", ".", "train", "(", ")", "\n", "b", "=", "bar", "(", "args", ".", "trainloaderlength", ",", "30", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "'cuda'", ")", ",", "targets", ".", "to", "(", "'cuda'", ")", "\n", "", "batch_loss", "=", "0", "\n", "batch_acc", "=", "0", "\n", "gr", "=", "None", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "inputs", ")", ",", "args", ".", "train_processing_bs", ")", ":", "\n", "            ", "net", ".", "train", "(", ")", "\n", "data_batch", "=", "inputs", "[", "i", ":", "i", "+", "args", ".", "train_processing_bs", "]", "\n", "target_batch", "=", "targets", "[", "i", ":", "i", "+", "args", ".", "train_processing_bs", "]", "\n", "outputs", "=", "net", "(", "data_batch", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "target_batch", ")", "\n", "acc", "=", "accuracy", "(", "outputs", ",", "target_batch", ")", "\n", "top1", ".", "update", "(", "acc", ".", "item", "(", ")", ",", "data_batch", ".", "size", "(", "0", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "data_batch", ".", "size", "(", "0", ")", ")", "\n", "batch_loss", "+=", "loss", ".", "item", "(", ")", "*", "data_batch", ".", "size", "(", "0", ")", "\n", "batch_acc", "+=", "acc", ".", "item", "(", ")", "*", "data_batch", ".", "size", "(", "0", ")", "\n", "if", "len", "(", "inputs", ")", "!=", "args", ".", "train_processing_bs", ":", "\n", "                ", "loss", ".", "div_", "(", "\n", "math", ".", "ceil", "(", "float", "(", "len", "(", "inputs", ")", ")", "/", "args", ".", "train_processing_bs", ")", ")", "\n", "", "'''Gradient Computation depending on if it is Partial'''", "\n", "if", "is_passm", "[", "0", "]", "==", "1", ":", "\n", "                ", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "loss", ",", "optimizer", ".", "parameters", "[", "rankstart", ":", "rankstop", "]", ")", "\n", "assert", "len", "(", "grad", ")", "==", "(", "rankstop", "-", "\n", "rankstart", ")", ",", "\"Length of grad issue!\"", "\n", "", "else", ":", "\n", "                ", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "optimizer", ".", "parameters", ")", "\n", "", "'''Gradient Accumulation'''", "\n", "if", "gr", "is", "None", ":", "\n", "                ", "gr", "=", "grad", "\n", "", "else", ":", "\n", "                ", "for", "g1", ",", "g2", "in", "zip", "(", "gr", ",", "grad", ")", ":", "\n", "                    ", "g1", ".", "add_", "(", "g2", ")", "\n", "", "", "", "'''Model update with gradient.'''", "\n", "with", "minibatch_counter", ".", "get_lock", "(", ")", ":", "\n", "            ", "minibatches", "=", "minibatch_counter", ".", "value", "\n", "with", "last_tested_at", ".", "get_lock", "(", ")", ":", "\n", "                ", "if", "minibatches", "-", "last_tested_at", ".", "value", ">=", "args", ".", "test_freq", "*", "args", ".", "trainloaderlength", ":", "\n", "                    ", "do_test", "=", "True", "\n", "last_tested_at", ".", "value", "=", "minibatches", "\n", "", "else", ":", "\n", "                    ", "do_test", "=", "False", "\n", "", "", "minibatch_counter", ".", "value", "+=", "1", "\n", "", "epoch", "=", "minibatches", "*", "1.0", "/", "args", ".", "trainloaderlength", "\n", "scheduler", ".", "step", "(", "epoch", ")", "\n", "optimizer", ".", "step", "(", "gr", ",", "is_passm", "[", "0", "]", ")", "\n", "\n", "lr", "=", "optimizer", ".", "lr", "*", "optimizer", ".", "extra_multiple", "\n", "rightnow", "=", "time", ".", "perf_counter", "(", ")", "-", "start", "\n", "banner_string", "=", "'PID: {:d},CommRank: {:d}, Rank: {:d}|TrEp: {:.2f}|Loss: {:.4f}|Acc: {:4.3f}% ({:.0f}/{:.0f})|LR: {:.7f}'", ".", "format", "(", "\n", "os", ".", "getpid", "(", ")", ",", "args", ".", "commrank", ",", "rank", ",", "epoch", ",", "losses", ".", "avg", ",", "\n", "top1", ".", "avg", "*", "100", ",", "top1", ".", "sum", ",", "top1", ".", "count", ",", "lr", ")", "\n", "b", ".", "progress_bar", "(", "batch_idx", ",", "rightnow", ",", "banner_string", ")", "\n", "train_results", ".", "append", "(", "\n", "(", "minibatches", ",", "rightnow", ",", "batch_loss", ",", "batch_acc", ",", "len", "(", "inputs", ")", ")", ")", "\n", "if", "do_test", ":", "\n", "            ", "test_epoch", "(", "net", ",", "args", ",", "start", ",", "testloader", ",", "criterion", ",", "best_acc", ",", "\n", "test_results", ",", "epoch", ",", "rank", ")", "\n", "", "if", "minibatches", ">=", "args", ".", "epochs", "*", "args", ".", "trainloaderlength", ":", "\n", "            ", "break", "\n", "", "'''Switching to PASSM'''", "\n", "if", "epoch", ">=", "args", ".", "prepassmepochs", ":", "\n", "            ", "is_passm", "[", "0", "]", "=", "(", "is_passm", "[", "0", "]", "+", "1", ")", "%", "2", "\n", "\n", "", "", "results", ".", "append", "(", "{", "\n", "'tag'", ":", "'LR'", ",", "\n", "'ep'", ":", "sampling_epoch", ",", "\n", "'val'", ":", "lr", ",", "\n", "'time'", ":", "rightnow", "\n", "}", ")", "\n", "\n", "return", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.LPPSGD.run": [[306, 372], ["print", "torch.set_start_method", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "models.get_model", "list", "print", "range", "print", "net.cuda.cuda", "time.perf_counter", "torch.Manager", "mp.Manager.list", "manager.list.append", "torch.Value", "torch.Value", "torch.Value", "torch.Value", "torch.Barrier", "dataloaders.get_dataloader", "len", "len", "range", "LPPSGD.average", "utilities.utils.process_test_result", "utilities.utils.process_train_result", "utilities.results_summary.results_summary", "print", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "net.cuda.parameters", "rank_tuple.append", "torch.Process", "processes.append", "mp.Process.start", "mp.Process.join", "utilities.utils.result_save", "LPPSGD.get_indices", "time.perf_counter"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.models.__init__.get_model", "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.__init__.get_dataloader", "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.LPPSGD.average", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.process_test_result", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.process_train_result", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.results_summary.results_summary", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.result_save", "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.LPPSGD.get_indices"], ["", "def", "run", "(", "args", ")", ":", "\n", "    ", "args", ".", "devicerank", "=", "args", ".", "commrank", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "print", "(", "\"CommRank=\"", ",", "args", ".", "commrank", ",", "\"CommSize=\"", ",", "args", ".", "commsize", ",", "\"DeviceRank=\"", ",", "args", ".", "devicerank", ",", "args", ".", "dist_url", ",", "args", ".", "dist_backend", ")", "\n", "mp", ".", "set_start_method", "(", "'spawn'", ",", "force", "=", "True", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "devicerank", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "\n", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "commsize", ",", "\n", "rank", "=", "args", ".", "commrank", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "cudnn", ".", "benchmark", "=", "False", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "net", "=", "get_model", "(", "args", ")", "\n", "param_list", "=", "list", "(", "net", ".", "parameters", "(", ")", ")", "\n", "print", "(", "\"==>PASSM Indices division\"", ")", "\n", "rank_tuple", "=", "[", "]", "\n", "for", "m", "in", "range", "(", "args", ".", "num_processes", ")", ":", "\n", "        ", "rank_tuple", ".", "append", "(", "\n", "get_indices", "(", "param_list", ",", "args", ".", "num_processes", ",", "m", ")", ")", "\n", "", "print", "(", "rank_tuple", ")", "\n", "\n", "net", "=", "net", ".", "cuda", "(", ")", "\n", "\n", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "results", "=", "manager", ".", "list", "(", ")", "\n", "results", ".", "append", "(", "{", "\n", "'tag'", ":", "'LR'", ",", "\n", "'ep'", ":", "0", ",", "\n", "'val'", ":", "args", ".", "baseline_lr", ",", "\n", "'time'", ":", "time", ".", "perf_counter", "(", ")", "-", "start", "\n", "}", ")", "\n", "epoch_counter", "=", "mp", ".", "Value", "(", "'i'", ",", "0", ")", "\n", "minibatch_counter", "=", "mp", ".", "Value", "(", "'i'", ",", "0", ")", "\n", "last_tested_at", "=", "mp", ".", "Value", "(", "'i'", ",", "0", ")", "\n", "best_acc", "=", "mp", ".", "Value", "(", "'d'", ",", "0", ")", "\n", "process_barrier", "=", "mp", ".", "Barrier", "(", "args", ".", "num_processes", ")", "\n", "(", "trainloader", ",", "train_sampler", ",", "_", ")", ",", "(", "testloader", ",", "_", ")", "=", "get_dataloader", "(", "args", ")", "\n", "args", ".", "trainloaderlength", "=", "len", "(", "trainloader", ")", "\n", "args", ".", "testloaderlength", "=", "len", "(", "testloader", ")", "\n", "processes", "=", "[", "]", "\n", "for", "rank", "in", "range", "(", "args", ".", "num_processes", ")", ":", "\n", "        ", "_", ",", "my_ratio", ",", "rankstart", ",", "rankstop", "=", "rank_tuple", "[", "rank", "]", "\n", "# extra_multiple = 1 - my_ratio", "\n", "p", "=", "mp", ".", "Process", "(", "target", "=", "test_train", ",", "\n", "args", "=", "(", "rank", ",", "net", ",", "results", ",", "start", ",", "args", ",", "epoch_counter", ",", "\n", "minibatch_counter", ",", "rankstart", ",", "rankstop", ",", "\n", "trainloader", ",", "train_sampler", ",", "testloader", ",", "best_acc", ",", "\n", "last_tested_at", ",", "process_barrier", ")", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "", "for", "p", "in", "processes", ":", "\n", "        ", "p", ".", "start", "(", ")", "\n", "", "average", "(", "net", ",", "args", ",", "minibatch_counter", ")", "\n", "for", "p", "in", "processes", ":", "\n", "        ", "p", ".", "join", "(", ")", "\n", "\n", "", "process_test_result", "(", "results", ",", "args", ")", "\n", "process_train_result", "(", "results", ",", "args", ")", "\n", "results_summary", "(", "results", ",", "args", ")", "\n", "\n", "if", "args", ".", "storeresults", ":", "\n", "        ", "result_save", "(", "results", ",", "args", ")", "\n", "", "print", "(", "\"Run Complete!\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.PLSGD.opt.__init__": [[26, 42], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "parameters", ",", "\n", "lr", ",", "\n", "momentum", ",", "\n", "weight_decay", ",", "\n", "nesterov", ",", "\n", "eta", "=", "0.001", ",", "\n", "lars", "=", "False", ")", ":", "\n", "        ", "self", ".", "parameters", "=", "parameters", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "nesterov", "=", "nesterov", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "eta", "=", "eta", "\n", "self", ".", "lars", "=", "lars", "\n", "self", ".", "state", "=", "defaultdict", "(", "dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.PLSGD.opt.step": [[43, 82], ["zip", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "p.data.add_", "p.data.add_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "d_p.add.add.add_", "torch.clone().detach.mul_", "torch.clone().detach.mul_", "torch.clone().detach.mul_", "torch.clone().detach.mul_", "torch.clone().detach.mul_", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "d_p.add.add.add", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone().detach.mul_", "torch.clone().detach.mul_", "torch.clone().detach.mul_", "torch.clone().detach.mul_", "torch.clone().detach.mul_"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "grad", ")", ":", "\n", "        ", "for", "p", ",", "d_p", "in", "zip", "(", "self", ".", "parameters", ",", "grad", ")", ":", "\n", "            ", "if", "d_p", "is", "None", ":", "\n", "                ", "continue", "\n", "", "if", "self", ".", "lars", ":", "\n", "                ", "weight_norm", "=", "torch", ".", "norm", "(", "p", ".", "data", ")", "\n", "grad_norm", "=", "torch", ".", "norm", "(", "d_p", ")", "\n", "\n", "# Compute local learning rate for this layer", "\n", "local_lr", "=", "self", ".", "eta", "*", "weight_norm", "/", "(", "grad_norm", "+", "self", ".", "weight_decay", "*", "weight_norm", ")", "\n", "actual_lr", "=", "local_lr", "*", "self", ".", "lr", "\n", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                    ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "", "else", ":", "\n", "                    ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "", "buf", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "d_p", "+", "self", ".", "weight_decay", "*", "p", ".", "data", ",", "\n", "alpha", "=", "actual_lr", ")", "\n", "p", ".", "data", ".", "add_", "(", "-", "buf", ")", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "weight_decay", "!=", "0", ":", "\n", "                    ", "d_p", ".", "add_", "(", "p", ".", "data", ",", "alpha", "=", "self", ".", "weight_decay", ")", "\n", "\n", "", "if", "self", ".", "momentum", "!=", "0", ":", "\n", "                    ", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "clone", "(", "\n", "d_p", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "buf", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "d_p", ")", "\n", "", "if", "self", ".", "nesterov", ":", "\n", "                        ", "d_p", "=", "d_p", ".", "add", "(", "buf", ",", "alpha", "=", "self", ".", "momentum", ")", "\n", "", "else", ":", "\n", "                        ", "d_p", "=", "buf", "\n", "\n", "", "", "p", ".", "data", ".", "add_", "(", "d_p", ",", "alpha", "=", "-", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.PLSGD.test_train": [[84, 119], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "print", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.CrossEntropyLoss", "PLSGD.opt", "results.append", "results.append", "print", "list", "utilities.utils.CosineAnnealingLR", "utilities.utils.MultiStepLR", "PLSGD.train_epoch", "net.parameters"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.train.MBSGD.train_epoch"], ["", "", "", "", "def", "test_train", "(", "net", ",", "results", ",", "start", ",", "args", ",", "epoch_counter", ",", "minibatch_counter", ",", "\n", "best_acc", ",", "trainloader", ",", "train_sampler", ",", "testloader", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "devicerank", ")", "\n", "print", "(", "\"PlSGD Training Started at Commrank \"", ",", "args", ".", "commrank", ")", "\n", "torch", ".", "set_num_threads", "(", "args", ".", "num_threads", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "optimizer", "=", "opt", "(", "list", "(", "net", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "args", ".", "baseline_lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "nesterov", "=", "args", ".", "nesterov", ",", "\n", "eta", "=", "args", ".", "eta", ",", "\n", "lars", "=", "args", ".", "lars", ")", "\n", "\n", "if", "args", ".", "scheduler_type", "==", "'cosine'", ":", "\n", "        ", "scheduler", "=", "CosineAnnealingLR", "(", "optimizer", ",", "args", ")", "\n", "", "else", ":", "\n", "        ", "scheduler", "=", "MultiStepLR", "(", "optimizer", ",", "args", ")", "\n", "", "epoch", "=", "0", "\n", "last_averaged_at", "=", "[", "0", "]", "\n", "last_tested_at", "=", "[", "0", "]", "\n", "test_results", "=", "[", "]", "\n", "train_results", "=", "[", "]", "\n", "while", "epoch", "<", "args", ".", "epochs", ":", "\n", "        ", "sampling_epoch", "=", "epoch_counter", ".", "value", "\n", "epoch_counter", ".", "value", "+=", "1", "\n", "epoch", "=", "train_epoch", "(", "net", ",", "args", ",", "trainloader", ",", "optimizer", ",", "scheduler", ",", "\n", "criterion", ",", "sampling_epoch", ",", "results", ",", "start", ",", "\n", "minibatch_counter", ",", "train_sampler", ",", "best_acc", ",", "\n", "testloader", ",", "last_averaged_at", ",", "last_tested_at", ",", "\n", "test_results", ",", "train_results", ")", "\n", "", "results", ".", "append", "(", "{", "'tag'", ":", "'testresult'", ",", "'val'", ":", "test_results", "}", ")", "\n", "results", ".", "append", "(", "{", "'tag'", ":", "'trainresult'", ",", "'val'", ":", "train_results", "}", ")", "\n", "print", "(", "\"PlSGD Training Completed at Commrank \"", ",", "args", ".", "commrank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.PLSGD.train_epoch": [[121, 195], ["utilities.utils.LocalMetric", "utilities.utils.LocalMetric", "net.train", "utilities.utils.bar", "enumerate", "results.append", "train_sampler.set_epoch", "range", "scheduler.step", "optimizer.step", "utilities.utils.bar.progress_bar", "train_results.append", "len", "net.train", "net", "utilities.utils.accuracy", "utilities.utils.LocalMetric.update", "criterion", "utilities.utils.LocalMetric.update", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "time.perf_counter", "os.getpid", "utilities.communicator.communicate_to_all", "utilities.utils.test_epoch", "print", "inputs.to", "targets.to", "utilities.utils.accuracy.item", "data_batch.size", "criterion.item", "data_batch.size", "criterion.item", "data_batch.size", "utilities.utils.accuracy.item", "data_batch.size", "len", "criterion.div_", "zip", "len", "list", "math.ceil", "g1.add_", "net.parameters", "float", "len"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.sampler.DistributedPercentageSampler.set_epoch", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.step", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.step", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.bar.progress_bar", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.accuracy", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.Metric.update", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.Metric.update", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.communicator.communicate_to_all", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.test_epoch"], ["", "def", "train_epoch", "(", "net", ",", "args", ",", "trainloader", ",", "optimizer", ",", "scheduler", ",", "criterion", ",", "\n", "sampling_epoch", ",", "results", ",", "start", ",", "minibatch_counter", ",", "\n", "train_sampler", ",", "best_acc", ",", "testloader", ",", "last_averaged_at", ",", "\n", "last_tested_at", ",", "test_results", ",", "train_results", ")", ":", "\n", "    ", "losses", "=", "LocalMetric", "(", "'Loss'", ")", "\n", "top1", "=", "LocalMetric", "(", "'Acc@1'", ")", "\n", "if", "train_sampler", "is", "not", "None", ":", "\n", "        ", "train_sampler", ".", "set_epoch", "(", "sampling_epoch", ")", "\n", "", "net", ".", "train", "(", ")", "\n", "b", "=", "bar", "(", "args", ".", "trainloaderlength", ",", "30", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "'cuda'", ")", ",", "targets", ".", "to", "(", "'cuda'", ")", "\n", "", "gr", "=", "None", "\n", "batch_loss", "=", "0.0", "\n", "batch_acc", "=", "0.0", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "inputs", ")", ",", "args", ".", "train_processing_bs", ")", ":", "\n", "            ", "net", ".", "train", "(", ")", "\n", "data_batch", "=", "inputs", "[", "i", ":", "i", "+", "args", ".", "train_processing_bs", "]", "\n", "target_batch", "=", "targets", "[", "i", ":", "i", "+", "args", ".", "train_processing_bs", "]", "\n", "outputs", "=", "net", "(", "data_batch", ")", "\n", "acc", "=", "accuracy", "(", "outputs", ",", "target_batch", ")", "\n", "top1", ".", "update", "(", "acc", ".", "item", "(", ")", ",", "data_batch", ".", "size", "(", "0", ")", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "target_batch", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "data_batch", ".", "size", "(", "0", ")", ")", "\n", "batch_loss", "+=", "loss", ".", "item", "(", ")", "*", "data_batch", ".", "size", "(", "0", ")", "\n", "batch_acc", "+=", "acc", ".", "item", "(", ")", "*", "data_batch", ".", "size", "(", "0", ")", "\n", "if", "len", "(", "inputs", ")", "!=", "args", ".", "train_processing_bs", ":", "\n", "                ", "loss", ".", "div_", "(", "\n", "math", ".", "ceil", "(", "float", "(", "len", "(", "inputs", ")", ")", "/", "args", ".", "train_processing_bs", ")", ")", "\n", "", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "optimizer", ".", "parameters", ")", "\n", "'''Gradient Accumulation'''", "\n", "if", "gr", "is", "None", ":", "\n", "                ", "gr", "=", "grad", "\n", "", "else", ":", "\n", "                ", "for", "g1", ",", "g2", "in", "zip", "(", "gr", ",", "grad", ")", ":", "\n", "                    ", "g1", ".", "add_", "(", "g2", ")", "\n", "", "", "", "'''Model update with gradient.'''", "\n", "minibatches", "=", "minibatch_counter", ".", "value", "\n", "minibatch_counter", ".", "value", "+=", "1", "\n", "epoch", "=", "minibatches", "*", "1.0", "/", "args", ".", "trainloaderlength", "\n", "scheduler", ".", "step", "(", "epoch", ")", "\n", "optimizer", ".", "step", "(", "gr", ")", "\n", "\n", "lr", "=", "optimizer", ".", "lr", "\n", "rightnow", "=", "time", ".", "perf_counter", "(", ")", "-", "start", "\n", "banner_string", "=", "'PID: {:d},Rank: {:d}|TrEp: {:.2f}|Loss: {:.4f}|Acc: {:4.3f}% ({:.0f}/{:.0f})|LR: {:.7f}'", ".", "format", "(", "\n", "os", ".", "getpid", "(", ")", ",", "args", ".", "commrank", ",", "epoch", ",", "losses", ".", "avg", ",", "top1", ".", "avg", "*", "100", ",", "\n", "top1", ".", "sum", ",", "top1", ".", "count", ",", "lr", ")", "\n", "b", ".", "progress_bar", "(", "batch_idx", ",", "rightnow", ",", "banner_string", ")", "\n", "train_results", ".", "append", "(", "\n", "(", "minibatches", ",", "rightnow", ",", "batch_loss", ",", "batch_acc", ",", "len", "(", "inputs", ")", ")", ")", "\n", "avg_freq", "=", "1", "if", "epoch", "<", "args", ".", "pre_post_epochs", "else", "args", ".", "averaging_freq", "\n", "if", "minibatches", "-", "last_averaged_at", "[", "0", "]", ">=", "avg_freq", ":", "\n", "            ", "communicate_to_all", "(", "list", "(", "net", ".", "parameters", "(", ")", ")", ",", "args", ",", "minibatches", ")", "\n", "last_averaged_at", "[", "0", "]", "=", "minibatches", "\n", "", "if", "minibatches", "-", "last_tested_at", "[", "\n", "0", "]", ">=", "args", ".", "test_freq", "*", "args", ".", "trainloaderlength", ":", "\n", "            ", "test_epoch", "(", "net", ",", "args", ",", "start", ",", "testloader", ",", "criterion", ",", "best_acc", ",", "\n", "test_results", ",", "epoch", ")", "\n", "last_tested_at", "[", "0", "]", "=", "minibatches", "\n", "", "if", "epoch", ">=", "args", ".", "epochs", ":", "\n", "            ", "print", "(", "\"Terminating at epoch \"", ",", "epoch", ",", "\" at commrank \"", ",", "\n", "args", ".", "commrank", ")", "\n", "break", "\n", "\n", "", "", "results", ".", "append", "(", "{", "\n", "'tag'", ":", "'LR'", ",", "\n", "'ep'", ":", "sampling_epoch", ",", "\n", "'val'", ":", "lr", ",", "\n", "'time'", ":", "rightnow", "\n", "}", ")", "\n", "\n", "return", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.PLSGD.run": [[197, 240], ["print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "models.get_model", "net.cuda.cuda", "time.perf_counter", "torch.Manager", "mp.Manager.list", "manager.list.append", "torch.Value", "torch.Value", "torch.Value", "dataloaders.get_dataloader", "len", "len", "PLSGD.test_train", "utilities.utils.process_test_result", "utilities.utils.process_train_result", "utilities.results_summary.results_summary", "print", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "utilities.utils.result_save", "time.perf_counter"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.models.__init__.get_model", "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.__init__.get_dataloader", "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.MBSGD.test_train", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.process_test_result", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.process_train_result", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.results_summary.results_summary", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.result_save"], ["", "def", "run", "(", "args", ")", ":", "\n", "    ", "args", ".", "devicerank", "=", "args", ".", "commrank", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "print", "(", "\"CommRank=\"", ",", "args", ".", "commrank", ",", "\"CommSize=\"", ",", "args", ".", "commsize", ",", "\"DeviceRank=\"", ",", "args", ".", "devicerank", ",", "args", ".", "dist_url", ",", "args", ".", "dist_backend", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "devicerank", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "\n", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "commsize", ",", "\n", "rank", "=", "args", ".", "commrank", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "cudnn", ".", "benchmark", "=", "False", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "net", "=", "get_model", "(", "args", ")", "\n", "net", "=", "net", ".", "cuda", "(", ")", "\n", "\n", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "results", "=", "manager", ".", "list", "(", ")", "\n", "results", ".", "append", "(", "{", "\n", "'tag'", ":", "'LR'", ",", "\n", "'ep'", ":", "0", ",", "\n", "'val'", ":", "args", ".", "baseline_lr", ",", "\n", "'time'", ":", "time", ".", "perf_counter", "(", ")", "-", "start", "\n", "}", ")", "\n", "epoch_counter", "=", "mp", ".", "Value", "(", "'i'", ",", "0", ")", "\n", "minibatch_counter", "=", "mp", ".", "Value", "(", "'i'", ",", "0", ")", "\n", "best_acc", "=", "mp", ".", "Value", "(", "'d'", ",", "0", ")", "\n", "(", "trainloader", ",", "train_sampler", ",", "_", ")", ",", "(", "testloader", ",", "_", ")", "=", "get_dataloader", "(", "args", ")", "\n", "args", ".", "trainloaderlength", "=", "len", "(", "trainloader", ")", "\n", "args", ".", "testloaderlength", "=", "len", "(", "testloader", ")", "\n", "\n", "test_train", "(", "net", ",", "results", ",", "start", ",", "args", ",", "epoch_counter", ",", "minibatch_counter", ",", "\n", "best_acc", ",", "trainloader", ",", "train_sampler", ",", "testloader", ")", "\n", "\n", "process_test_result", "(", "results", ",", "args", ")", "\n", "process_train_result", "(", "results", ",", "args", ")", "\n", "results_summary", "(", "results", ",", "args", ")", "\n", "\n", "if", "args", ".", "storeresults", ":", "\n", "        ", "result_save", "(", "results", ",", "args", ")", "\n", "", "print", "(", "\"Run Complete!\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.MBSGD.opt.__init__": [[25, 41], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "parameters", ",", "\n", "lr", ",", "\n", "momentum", ",", "\n", "weight_decay", ",", "\n", "nesterov", ",", "\n", "eta", "=", "0.001", ",", "\n", "lars", "=", "False", ")", ":", "\n", "        ", "self", ".", "parameters", "=", "parameters", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "nesterov", "=", "nesterov", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "eta", "=", "eta", "\n", "self", ".", "lars", "=", "lars", "\n", "self", ".", "state", "=", "defaultdict", "(", "dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.MBSGD.opt.zero_grad": [[42, 48], ["p.grad.detach_", "p.grad.zero_"], "methods", ["None"], ["", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Clears the gradients of all optimized :class:`torch.Tensor` s.\"\"\"", "\n", "for", "p", "in", "self", ".", "parameters", ":", "\n", "            ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "                ", "p", ".", "grad", ".", "detach_", "(", ")", "\n", "p", ".", "grad", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.MBSGD.opt.step": [[49, 89], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "p.data.add_", "p.data.add_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "d_p.add.add.add_", "torch.clone().detach.mul_", "torch.clone().detach.mul_", "torch.clone().detach.mul_", "torch.clone().detach.mul_", "torch.clone().detach.mul_", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "d_p.add.add.add", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone().detach.mul_", "torch.clone().detach.mul_", "torch.clone().detach.mul_", "torch.clone().detach.mul_", "torch.clone().detach.mul_"], "methods", ["None"], ["", "", "", "def", "step", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", ":", "\n", "            ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                ", "continue", "\n", "", "d_p", "=", "p", ".", "grad", "\n", "if", "self", ".", "lars", ":", "\n", "                ", "weight_norm", "=", "torch", ".", "norm", "(", "p", ".", "data", ")", "\n", "grad_norm", "=", "torch", ".", "norm", "(", "d_p", ")", "\n", "\n", "# Compute local learning rate for this layer", "\n", "local_lr", "=", "self", ".", "eta", "*", "weight_norm", "/", "(", "grad_norm", "+", "self", ".", "weight_decay", "*", "weight_norm", ")", "\n", "actual_lr", "=", "local_lr", "*", "self", ".", "lr", "\n", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                    ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "", "else", ":", "\n", "                    ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "", "buf", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "d_p", "+", "self", ".", "weight_decay", "*", "p", ".", "data", ",", "\n", "alpha", "=", "actual_lr", ")", "\n", "p", ".", "data", ".", "add_", "(", "-", "buf", ")", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "weight_decay", "!=", "0", ":", "\n", "                    ", "d_p", ".", "add_", "(", "p", ".", "data", ",", "alpha", "=", "self", ".", "weight_decay", ")", "\n", "\n", "", "if", "self", ".", "momentum", "!=", "0", ":", "\n", "                    ", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "clone", "(", "\n", "d_p", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "buf", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "d_p", ")", "\n", "", "if", "self", ".", "nesterov", ":", "\n", "                        ", "d_p", "=", "d_p", ".", "add", "(", "buf", ",", "alpha", "=", "self", ".", "momentum", ")", "\n", "", "else", ":", "\n", "                        ", "d_p", "=", "buf", "\n", "\n", "", "", "p", ".", "data", ".", "add_", "(", "d_p", ",", "alpha", "=", "-", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.MBSGD.test_train": [[91, 135], ["print", "torch.init_process_group", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "torch.set_num_threads", "models.get_model", "torch.nn.parallel.DistributedDataParallel.to", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.CrossEntropyLoss", "MBSGD.opt", "results.append", "results.append", "print", "list", "utilities.utils.CosineAnnealingLR", "utilities.utils.MultiStepLR", "MBSGD.train_epoch", "torch.nn.parallel.DistributedDataParallel.parameters"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.models.__init__.get_model", "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.MBSGD.train_epoch"], ["", "", "", "", "def", "test_train", "(", "start", ",", "args", ",", "best_acc", ",", "results", ",", "trainloader", ",", "train_sampler", ",", "\n", "testloader", ")", ":", "\n", "    ", "print", "(", "\"MBSGD Training Started at Commrank \"", ",", "args", ".", "commrank", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "\n", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "commsize", ",", "\n", "rank", "=", "args", ".", "commrank", ")", "\n", "torch", ".", "set_num_threads", "(", "args", ".", "num_threads", ")", "\n", "net", "=", "get_model", "(", "args", ")", "\n", "net", "=", "net", ".", "to", "(", "'cuda'", ")", "\n", "net", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "net", ",", "device_ids", "=", "[", "args", ".", "devicerank", "]", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "optimizer", "=", "opt", "(", "list", "(", "net", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "args", ".", "baseline_lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "nesterov", "=", "args", ".", "nesterov", ",", "\n", "eta", "=", "args", ".", "eta", ",", "\n", "lars", "=", "args", ".", "lars", ")", "\n", "\n", "if", "args", ".", "scheduler_type", "==", "'cosine'", ":", "\n", "        ", "scheduler", "=", "CosineAnnealingLR", "(", "optimizer", ",", "args", ")", "\n", "", "else", ":", "\n", "        ", "scheduler", "=", "MultiStepLR", "(", "optimizer", ",", "args", ")", "\n", "\n", "", "sampling_epoch_counter", "=", "[", "0", "]", "\n", "epoch", "=", "0", "\n", "minibatch_counter", "=", "[", "0", "]", "\n", "last_tested_at", "=", "[", "0", "]", "\n", "test_results", "=", "[", "]", "\n", "train_results", "=", "[", "]", "\n", "while", "epoch", "<", "args", ".", "epochs", ":", "\n", "        ", "sampling_epoch", "=", "sampling_epoch_counter", "[", "0", "]", "\n", "sampling_epoch_counter", "[", "0", "]", "+=", "1", "\n", "epoch", "=", "train_epoch", "(", "net", ",", "args", ",", "trainloader", ",", "optimizer", ",", "scheduler", ",", "\n", "criterion", ",", "sampling_epoch", ",", "results", ",", "start", ",", "\n", "minibatch_counter", ",", "train_sampler", ",", "best_acc", ",", "\n", "testloader", ",", "last_tested_at", ",", "test_results", ",", "\n", "train_results", ")", "\n", "", "results", ".", "append", "(", "{", "'tag'", ":", "'testresult'", ",", "'val'", ":", "test_results", "}", ")", "\n", "results", ".", "append", "(", "{", "'tag'", ":", "'trainresult'", ",", "'val'", ":", "train_results", "}", ")", "\n", "print", "(", "\"MBSGD Training Completed at Commrank \"", ",", "args", ".", "commrank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.MBSGD.train_epoch": [[137, 188], ["utilities.utils.LocalMetric", "utilities.utils.LocalMetric", "utilities.utils.bar", "enumerate", "results.append", "train_sampler.set_epoch", "net.train", "optimizer.zero_grad", "net", "utilities.utils.accuracy", "utilities.utils.LocalMetric.update", "criterion", "utilities.utils.LocalMetric.update", "criterion.backward", "scheduler.step", "optimizer.step", "utilities.utils.get_current_lr", "utilities.utils.bar.progress_bar", "train_results.append", "inputs.to", "targets.to", "utilities.utils.accuracy.item", "targets.size", "criterion.item", "targets.size", "time.perf_counter", "os.getpid", "utilities.utils.test_epoch", "print", "len", "criterion.item", "len", "utilities.utils.accuracy.item", "len"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.sampler.DistributedPercentageSampler.set_epoch", "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.MBSGD.opt.zero_grad", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.accuracy", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.Metric.update", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.Metric.update", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.step", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.step", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.get_current_lr", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.bar.progress_bar", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.test_epoch"], ["", "def", "train_epoch", "(", "net", ",", "args", ",", "trainloader", ",", "optimizer", ",", "scheduler", ",", "criterion", ",", "\n", "sampling_epoch", ",", "results", ",", "start", ",", "minibatch_counter", ",", "\n", "train_sampler", ",", "best_acc", ",", "testloader", ",", "last_tested_at", ",", "\n", "test_results", ",", "train_results", ")", ":", "\n", "# print('\\nEpoch: %d' % epoch)", "\n", "    ", "losses", "=", "LocalMetric", "(", "'Loss'", ")", "\n", "top1", "=", "LocalMetric", "(", "'Acc@1'", ")", "\n", "if", "train_sampler", "is", "not", "None", ":", "\n", "        ", "train_sampler", ".", "set_epoch", "(", "sampling_epoch", ")", "\n", "", "b", "=", "bar", "(", "args", ".", "trainloaderlength", ",", "30", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "'cuda'", ")", ",", "targets", ".", "to", "(", "'cuda'", ")", "\n", "net", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "acc", "=", "accuracy", "(", "outputs", ",", "targets", ")", "\n", "top1", ".", "update", "(", "acc", ".", "item", "(", ")", ",", "targets", ".", "size", "(", "0", ")", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "targets", ".", "size", "(", "0", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "minibatches", "=", "minibatch_counter", "[", "0", "]", "\n", "minibatch_counter", "[", "0", "]", "+=", "1", "\n", "epoch", "=", "minibatches", "*", "1.0", "/", "args", ".", "trainloaderlength", "\n", "scheduler", ".", "step", "(", "epoch", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "rightnow", "=", "time", ".", "perf_counter", "(", ")", "-", "start", "\n", "lr", "=", "get_current_lr", "(", "optimizer", ")", "#", "\n", "banner_string", "=", "'PID: {:d},Rank: {:d}|TrEp: {:.2f}|Loss: {:.4f}|Acc: {:4.3f}% ({:.0f}/{:.0f})|LR: {:.7f}'", ".", "format", "(", "\n", "os", ".", "getpid", "(", ")", ",", "args", ".", "commrank", ",", "epoch", ",", "losses", ".", "avg", ",", "top1", ".", "avg", "*", "100", ",", "\n", "top1", ".", "sum", ",", "top1", ".", "count", ",", "lr", ")", "\n", "b", ".", "progress_bar", "(", "batch_idx", ",", "rightnow", ",", "banner_string", ")", "\n", "train_results", ".", "append", "(", "(", "minibatches", ",", "rightnow", ",", "loss", ".", "item", "(", ")", "*", "len", "(", "inputs", ")", ",", "\n", "acc", ".", "item", "(", ")", "*", "len", "(", "inputs", ")", ",", "len", "(", "inputs", ")", ")", ")", "\n", "if", "minibatches", "-", "last_tested_at", "[", "\n", "0", "]", ">=", "args", ".", "test_freq", "*", "args", ".", "trainloaderlength", ":", "\n", "            ", "test_epoch", "(", "net", ",", "args", ",", "start", ",", "testloader", ",", "criterion", ",", "best_acc", ",", "\n", "test_results", ",", "epoch", ")", "\n", "last_tested_at", "[", "0", "]", "=", "minibatches", "\n", "", "if", "epoch", ">=", "args", ".", "epochs", ":", "\n", "            ", "print", "(", "\"Terminating at epoch \"", ",", "epoch", ",", "\" at commrank \"", ",", "\n", "args", ".", "commrank", ")", "\n", "break", "\n", "\n", "", "", "results", ".", "append", "(", "{", "\n", "'tag'", ":", "'LR'", ",", "\n", "'ep'", ":", "sampling_epoch", ",", "\n", "'val'", ":", "lr", ",", "\n", "'time'", ":", "rightnow", "\n", "}", ")", "\n", "return", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.MBSGD.run": [[190, 224], ["print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "time.perf_counter", "torch.Value", "torch.Manager", "mp.Manager.list", "manager.list.append", "dataloaders.get_dataloader", "len", "len", "MBSGD.test_train", "utilities.utils.process_test_result", "utilities.utils.process_train_result", "utilities.results_summary.results_summary", "print", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "utilities.utils.result_save", "time.perf_counter"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.__init__.get_dataloader", "home.repos.pwc.inspect_result.bapi_lpp-sgd.train.MBSGD.test_train", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.process_test_result", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.process_train_result", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.results_summary.results_summary", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.result_save"], ["", "def", "run", "(", "args", ")", ":", "\n", "    ", "args", ".", "devicerank", "=", "args", ".", "commrank", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "print", "(", "\"CommRank=\"", ",", "args", ".", "commrank", ",", "\"CommSize=\"", ",", "args", ".", "commsize", ",", "\"DeviceRank=\"", ",", "args", ".", "devicerank", ",", "args", ".", "dist_url", ",", "args", ".", "dist_backend", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "devicerank", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "cudnn", ".", "benchmark", "=", "False", "\n", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "best_acc", "=", "mp", ".", "Value", "(", "'d'", ",", "0", ")", "\n", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "results", "=", "manager", ".", "list", "(", ")", "\n", "results", ".", "append", "(", "{", "\n", "'tag'", ":", "'LR'", ",", "\n", "'ep'", ":", "0", ",", "\n", "'val'", ":", "args", ".", "baseline_lr", ",", "\n", "'time'", ":", "time", ".", "perf_counter", "(", ")", "-", "start", "\n", "}", ")", "\n", "(", "trainloader", ",", "train_sampler", ",", "_", ")", ",", "(", "testloader", ",", "_", ")", "=", "get_dataloader", "(", "args", ")", "\n", "args", ".", "trainloaderlength", "=", "len", "(", "trainloader", ")", "\n", "args", ".", "testloaderlength", "=", "len", "(", "testloader", ")", "\n", "test_train", "(", "start", ",", "args", ",", "best_acc", ",", "results", ",", "trainloader", ",", "train_sampler", ",", "\n", "testloader", ")", "\n", "\n", "process_test_result", "(", "results", ",", "args", ")", "\n", "process_train_result", "(", "results", ",", "args", ")", "\n", "results_summary", "(", "results", ",", "args", ")", "\n", "\n", "if", "args", ".", "storeresults", ":", "\n", "        ", "result_save", "(", "results", ",", "args", ")", "\n", "\n", "", "print", "(", "\"Run Complete!\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.data_loader_MNIST.train_loader": [[10, 34], ["torchvision.transforms.Compose", "dataset_loader", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "len", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["def", "train_loader", "(", "args", ")", ":", "\n", "    ", "dataset_loader", "=", "datasets", ".", "MNIST", "\n", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "]", ")", "\n", "trainset", "=", "dataset_loader", "(", "root", "=", "args", ".", "data_dir", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transform", ")", "\n", "\n", "if", "args", ".", "partition", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "trainset", ",", "num_replicas", "=", "args", ".", "commsize", ",", "rank", "=", "args", ".", "commrank", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "\n", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "batch_size", "=", "args", ".", "train_bs", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "args", ".", "pm", ")", "\n", "\n", "return", "trainloader", ",", "train_sampler", ",", "len", "(", "trainset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.data_loader_MNIST.test_loader": [[36, 57], ["torchvision.transforms.Compose", "dataset_loader", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "len", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "def", "test_loader", "(", "args", ")", ":", "\n", "    ", "dataset_loader", "=", "datasets", ".", "MNIST", "\n", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "]", ")", "\n", "testset", "=", "dataset_loader", "(", "root", "=", "args", ".", "data_dir", ",", "\n", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transform", ")", "\n", "if", "args", ".", "partition", ":", "\n", "        ", "test_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "testset", ",", "num_replicas", "=", "args", ".", "commsize", ",", "rank", "=", "args", ".", "commrank", ")", "\n", "", "else", ":", "\n", "        ", "test_sampler", "=", "None", "\n", "\n", "", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "\n", "batch_size", "=", "args", ".", "test_bs", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "sampler", "=", "test_sampler", ",", "\n", "pin_memory", "=", "args", ".", "pm", ")", "\n", "return", "testloader", ",", "len", "(", "testset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.data_loader_MNIST.get_dataloader": [[59, 66], ["data_loader_MNIST.train_loader", "data_loader_MNIST.test_loader", "data_loader_MNIST.train_loader", "data_loader_MNIST.test_loader"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.data_loader_CIFAR.train_loader", "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.data_loader_CIFAR.test_loader", "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.data_loader_CIFAR.train_loader", "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.data_loader_CIFAR.test_loader"], ["", "def", "get_dataloader", "(", "args", ",", "testonly", ",", "trainonly", ")", ":", "\n", "    ", "if", "trainonly", ":", "\n", "        ", "return", "train_loader", "(", "args", ")", "\n", "", "elif", "testonly", ":", "\n", "        ", "return", "test_loader", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "return", "train_loader", "(", "args", ")", ",", "test_loader", "(", "args", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.sampler.DistributedPercentageSampler.__init__": [[37, 58], ["int", "int", "print", "math.ceil", "math.ceil", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "dataset", ",", "\n", "num_workers", ",", "\n", "worker_rank", ",", "\n", "masters_share", "=", "4", ",", "\n", "shuffle", "=", "True", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "worker_rank", "=", "worker_rank", "\n", "self", ".", "seed", "=", "0", "\n", "self", ".", "num_samples", "=", "int", "(", "\n", "math", ".", "ceil", "(", "\n", "len", "(", "self", ".", "dataset", ")", "*", "(", "args", ".", "masters_share", "*", "1.0", "-", "1.0", ")", "/", "\n", "args", ".", "masters_share", "*", "(", "1.0", "/", "args", ".", "workers_per_process", ")", ")", ")", "\n", "self", ".", "masters_samples", "=", "int", "(", "\n", "math", ".", "ceil", "(", "len", "(", "self", ".", "dataset", ")", "-", "self", ".", "num_samples", "*", "self", ".", "num_workers", ")", ")", "\n", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_workers", "+", "self", ".", "masters_samples", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "print", "(", "\"Commrank \"", ",", "args", ".", "commrank", ",", "\" MSamples \"", ",", "self", ".", "masters_samples", ",", "\n", "\" Samples \"", ",", "self", ".", "num_samples", ",", "\" BS \"", ",", "args", ".", "bs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.sampler.DistributedPercentageSampler.__iter__": [[59, 83], ["torch.Generator", "torch.Generator.manual_seed", "torch.randperm().tolist", "list", "len", "iter", "iter", "range", "len", "len", "torch.randperm", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "list", "(", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "masters_indices", "=", "indices", "[", ":", "self", ".", "masters_samples", "]", "\n", "workers_indices", "=", "indices", "[", "self", ".", "masters_samples", ":", "]", "\n", "indices", "=", "workers_indices", "[", "self", ".", "worker_rank", ":", "self", ".", "total_size", ":", "self", ".", "\n", "num_workers", "]", "\n", "if", "self", ".", "worker_rank", "==", "-", "1", ":", "\n", "            ", "assert", "len", "(", "masters_indices", ")", "==", "self", ".", "masters_samples", "\n", "return", "iter", "(", "masters_indices", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.sampler.DistributedPercentageSampler.__len__": [[84, 89], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "worker_rank", "==", "-", "1", ":", "\n", "            ", "return", "self", ".", "masters_samples", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.sampler.DistributedPercentageSampler.set_epoch": [[90, 92], ["None"], "methods", ["None"], ["", "", "def", "set_epoch", "(", "self", ",", "seed", ")", ":", "\n", "        ", "self", ".", "seed", "=", "seed", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.data_loader_imagenet.train_loader": [[13, 37], ["torchvision.transforms.Compose", "os.path.join", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "len", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor"], "function", ["None"], ["def", "train_loader", "(", "args", ",", "normalize", ")", ":", "\n", "    ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "train_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "imagenet_dir", ",", "'train'", ")", "\n", "trainset", "=", "datasets", ".", "ImageFolder", "(", "train_dir", ",", "transform", "=", "transform_train", ")", "\n", "\n", "if", "args", ".", "partition", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "trainset", ",", "num_replicas", "=", "args", ".", "commsize", ",", "rank", "=", "args", ".", "commrank", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "\n", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "batch_size", "=", "args", ".", "train_bs", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "args", ".", "pm", ")", "\n", "\n", "return", "trainloader", ",", "train_sampler", ",", "len", "(", "trainset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.data_loader_imagenet.test_loader": [[39, 62], ["torchvision.transforms.Compose", "os.path.join", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "len", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "test_loader", "(", "args", ",", "normalize", ")", ":", "\n", "    ", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "test_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "imagenet_dir", ",", "'val'", ")", "\n", "testset", "=", "datasets", ".", "ImageFolder", "(", "test_dir", ",", "transform_test", ")", "\n", "\n", "if", "args", ".", "partition", ":", "\n", "        ", "test_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "testset", ",", "num_replicas", "=", "args", ".", "commsize", ",", "rank", "=", "args", ".", "commrank", ")", "\n", "", "else", ":", "\n", "        ", "test_sampler", "=", "None", "\n", "\n", "", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "\n", "shuffle", "=", "False", ",", "\n", "batch_size", "=", "args", ".", "test_bs", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "sampler", "=", "test_sampler", ",", "\n", "pin_memory", "=", "args", ".", "pm", ")", "\n", "return", "testloader", ",", "len", "(", "testset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.data_loader_imagenet.get_dataloader": [[64, 73], ["torchvision.transforms.Normalize", "data_loader_imagenet.train_loader", "data_loader_imagenet.test_loader", "data_loader_imagenet.train_loader", "data_loader_imagenet.test_loader"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.data_loader_CIFAR.train_loader", "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.data_loader_CIFAR.test_loader", "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.data_loader_CIFAR.train_loader", "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.data_loader_CIFAR.test_loader"], ["", "def", "get_dataloader", "(", "args", ",", "testonly", ",", "trainonly", ")", ":", "\n", "    ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "if", "trainonly", ":", "\n", "        ", "return", "train_loader", "(", "args", ",", "normalize", ")", "\n", "", "elif", "testonly", ":", "\n", "        ", "return", "test_loader", "(", "args", ",", "normalize", ")", "\n", "", "else", ":", "\n", "        ", "return", "train_loader", "(", "args", ",", "normalize", ")", ",", "test_loader", "(", "args", ",", "normalize", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.data_loader_CIFAR.train_loader": [[6, 31], ["torchvision.transforms.Compose", "dataset_loader", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "len", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor"], "function", ["None"], ["def", "train_loader", "(", "args", ",", "dataset_loader", ",", "normalize", ")", ":", "\n", "    ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "(", "32", ",", "32", ")", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "trainset", "=", "dataset_loader", "(", "root", "=", "args", ".", "data_dir", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transform_train", ")", "\n", "if", "args", ".", "partition", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "trainset", ",", "num_replicas", "=", "args", ".", "commsize", ",", "rank", "=", "args", ".", "commrank", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "\n", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "batch_size", "=", "args", ".", "train_bs", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "args", ".", "pm", ")", "\n", "\n", "return", "trainloader", ",", "train_sampler", ",", "len", "(", "trainset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.data_loader_CIFAR.test_loader": [[33, 55], ["torchvision.transforms.Compose", "dataset_loader", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "len", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "test_loader", "(", "args", ",", "dataset_loader", ",", "normalize", ")", ":", "\n", "    ", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "testset", "=", "dataset_loader", "(", "root", "=", "args", ".", "data_dir", ",", "\n", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transform_test", ")", "\n", "if", "args", ".", "partition", ":", "\n", "        ", "test_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "testset", ",", "num_replicas", "=", "args", ".", "commsize", ",", "rank", "=", "args", ".", "commrank", ")", "\n", "", "else", ":", "\n", "        ", "test_sampler", "=", "None", "\n", "\n", "", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "\n", "shuffle", "=", "False", ",", "\n", "batch_size", "=", "args", ".", "test_bs", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "sampler", "=", "test_sampler", ",", "\n", "pin_memory", "=", "args", ".", "pm", ")", "\n", "return", "testloader", ",", "len", "(", "testset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.data_loader_CIFAR.get_dataloader": [[57, 77], ["torchvision.transforms.Normalize", "data_loader_CIFAR.train_loader", "torchvision.transforms.Normalize", "data_loader_CIFAR.test_loader", "data_loader_CIFAR.train_loader", "data_loader_CIFAR.test_loader"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.data_loader_CIFAR.train_loader", "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.data_loader_CIFAR.test_loader", "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.data_loader_CIFAR.train_loader", "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.data_loader_CIFAR.test_loader"], ["", "def", "get_dataloader", "(", "args", ",", "testonly", ",", "trainonly", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "dataset_loader", "=", "datasets", ".", "CIFAR10", "\n", "\n", "# normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406],", "\n", "#                              std=[0.229, 0.224, 0.225])", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "\n", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "dataset_loader", "=", "datasets", ".", "CIFAR100", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "(", "0.5071", ",", "0.4867", ",", "0.4408", ")", ",", "\n", "(", "0.2675", ",", "0.2565", ",", "0.2761", ")", ")", "\n", "", "if", "trainonly", ":", "\n", "        ", "return", "train_loader", "(", "args", ",", "dataset_loader", ",", "normalize", ")", "\n", "", "elif", "testonly", ":", "\n", "        ", "return", "test_loader", "(", "args", ",", "dataset_loader", ",", "normalize", ")", "\n", "", "else", ":", "\n", "        ", "return", "train_loader", "(", "args", ",", "dataset_loader", ",", "\n", "normalize", ")", ",", "test_loader", "(", "args", ",", "dataset_loader", ",", "\n", "normalize", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.__init__.get_dataloader": [[1, 11], ["__init__.get_dataloader", "__init__.get_dataloader", "__init__.get_dataloader"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.__init__.get_dataloader", "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.__init__.get_dataloader", "home.repos.pwc.inspect_result.bapi_lpp-sgd.dataloaders.__init__.get_dataloader"], ["# -*- coding: utf-8 -*-", "\n", "# import sys", "\n", "from", "torchvision", "import", "models", "\n", "from", ".", "shufflenet", "import", "shufflenet", "\n", "from", ".", "resnet", "import", "resnet", "\n", "from", ".", "smallnet", "import", "SmallNet", "\n", "from", ".", "densenet", "import", "densenet121", "\n", "from", ".", "densenet", "import", "densenet169", "\n", "from", ".", "mobnetv2", "import", "mobilenetv2", "\n", "from", ".", "mobilenetv3", "import", "mobilenetv3_large", "\n", "from", ".", "mobilenetv3", "import", "mobilenetv3_small", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.communicator.communicate_to_all": [[8, 29], ["time.perf_counter", "torch.cat", "torch.cat", "torch.clone().detach", "torch.clone().detach", "time.perf_counter", "torch.all_reduce", "time.perf_counter", "torch.cat.div_", "torch.cat.add_", "time.perf_counter", "time.perf_counter", "tensor.numel", "tensor.data.add_", "time.perf_counter", "time.perf_counter.contiguous().view", "torch.clone", "torch.clone", "torch.cat.narrow().view_as", "time.perf_counter.contiguous", "torch.cat.narrow"], "function", ["None"], ["def", "communicate_to_all", "(", "param_list", ",", "args", ",", "minibatches", ")", ":", "\n", "# print(\"Averaging at minibatch \", minibatches, \" at rank \", args.commrank)", "\n", "    ", "t", "=", "time", ".", "perf_counter", "(", ")", "\n", "communication_tensor", "=", "torch", ".", "cat", "(", "\n", "[", "t", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "for", "t", "in", "param_list", "]", ",", "dim", "=", "0", ")", "\n", "buffer_model", "=", "torch", ".", "clone", "(", "communication_tensor", ")", ".", "detach", "(", ")", "\n", "packing_time", "=", "time", ".", "perf_counter", "(", ")", "-", "t", "\n", "t", "=", "time", ".", "perf_counter", "(", ")", "\n", "dist", ".", "all_reduce", "(", "communication_tensor", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "allreduce_time", "=", "time", ".", "perf_counter", "(", ")", "-", "t", "\n", "t", "=", "time", ".", "perf_counter", "(", ")", "\n", "communication_tensor", ".", "div_", "(", "args", ".", "commsize", ")", "\n", "communication_tensor", ".", "add_", "(", "buffer_model", ",", "alpha", "=", "-", "1", ")", "\n", "offset", "=", "0", "\n", "for", "tensor", "in", "param_list", ":", "\n", "        ", "numel", "=", "tensor", ".", "numel", "(", ")", "\n", "tensor", ".", "data", ".", "add_", "(", "\n", "communication_tensor", ".", "narrow", "(", "0", ",", "offset", ",", "numel", ")", ".", "view_as", "(", "tensor", ")", ")", "\n", "offset", "+=", "numel", "\n", "", "unpacking_time", "=", "time", ".", "perf_counter", "(", ")", "-", "t", "\n", "return", "packing_time", ",", "allreduce_time", ",", "unpacking_time", "\n", "", ""]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.results_summary.get_data": [[4, 10], ["data.append"], "function", ["None"], ["def", "get_data", "(", "result_json", ",", "tag", ",", "wrt", ")", ":", "\n", "    ", "data", "=", "[", "]", "\n", "for", "r", "in", "result_json", ":", "\n", "        ", "if", "r", "[", "'tag'", "]", "==", "tag", ":", "\n", "            ", "data", ".", "append", "(", "(", "r", "[", "wrt", "]", ",", "r", "[", "'val'", "]", ")", ")", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.results_summary.results_summary": [[12, 30], ["print", "results_summary.get_data", "get_data.sort", "tag.replace.replace", "summary_dict.append", "operator.itemgetter", "summary_dict.append", "summary_dict.append", "max", "min", "max", "operator.itemgetter", "operator.itemgetter", "operator.itemgetter"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.results_summary.get_data"], ["", "def", "results_summary", "(", "result", ",", "args", ")", ":", "\n", "    ", "summary_dict", "=", "[", "]", "\n", "tags", "=", "[", "\"TrainLoss\"", ",", "\"TrainAcc_1\"", ",", "\"TestLoss\"", ",", "\"TestAcc_1\"", "]", "\n", "for", "wrt", "in", "[", "'ep'", ",", "'time'", "]", ":", "\n", "        ", "for", "tag", "in", "tags", ":", "\n", "            ", "if", "'Acc_'", "in", "tag", ":", "\n", "                ", "tag", "=", "tag", ".", "replace", "(", "'Acc_'", ",", "'Acc@'", ")", "\n", "", "data", "=", "get_data", "(", "result", ",", "tag", ",", "wrt", ")", "\n", "data", ".", "sort", "(", "key", "=", "itemgetter", "(", "0", ")", ")", "\n", "if", "wrt", "==", "'ep'", ":", "\n", "                ", "if", "\"Loss\"", "in", "tag", ":", "\n", "                    ", "summary_dict", ".", "append", "(", "{", "tag", ":", "min", "(", "data", ",", "key", "=", "itemgetter", "(", "1", ")", ")", "[", "1", "]", "}", ")", "\n", "", "elif", "\"Acc\"", "in", "tag", ":", "\n", "                    ", "summary_dict", ".", "append", "(", "{", "tag", ":", "max", "(", "data", ",", "key", "=", "itemgetter", "(", "1", ")", ")", "[", "1", "]", "}", ")", "\n", "", "", "if", "wrt", "==", "'time'", ":", "\n", "                ", "summary_dict", ".", "append", "(", "\n", "{", "\"TotalTime\"", ":", "max", "(", "data", ",", "key", "=", "itemgetter", "(", "0", ")", ")", "[", "0", "]", "}", ")", "\n", "", "", "", "print", "(", "\"Rank: \"", ",", "args", ".", "commrank", ",", "\", Results Summary: \"", ",", "summary_dict", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.bar.__init__": [[13, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "total", ",", "total_bar_length", ")", ":", "\n", "        ", "self", ".", "total", "=", "total", "\n", "self", ".", "total_bar_length", "=", "total_bar_length", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.bar.progress_bar": [[17, 38], ["int", "sys.stdout.write", "range", "sys.stdout.write", "range", "sys.stdout.write", "sys.stdout.write", "sys.stdout.flush", "time.time", "int", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write"], "methods", ["None"], ["", "def", "progress_bar", "(", "self", ",", "current", ",", "cur_time", ",", "msg", "=", "None", ")", ":", "\n", "        ", "global", "last_time", ",", "begin_time", "\n", "if", "current", "==", "0", ":", "\n", "            ", "begin_time", "=", "time", ".", "time", "(", ")", "# Reset for new bar.", "\n", "\n", "", "cur_len", "=", "int", "(", "self", ".", "total_bar_length", "*", "current", "/", "self", ".", "total", ")", "\n", "rest_len", "=", "int", "(", "self", ".", "total_bar_length", "-", "cur_len", ")", "-", "1", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "'[{:d}/{:d}'", ".", "format", "(", "current", "+", "1", ",", "self", ".", "total", ")", ")", "\n", "for", "i", "in", "range", "(", "cur_len", ")", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'-'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "'>'", ")", "\n", "for", "i", "in", "range", "(", "rest_len", ")", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'.'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "'@{:.3f} Sec]'", ".", "format", "(", "cur_time", ")", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "msg", ")", "\n", "if", "current", "<", "self", ".", "total", "-", "1", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "", "else", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.LocalMetric.__init__": [[47, 51], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "sum", "=", "0.0", "\n", "self", ".", "count", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.LocalMetric.update": [[52, 55], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.LocalMetric.avg": [[56, 59], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.Metric.__init__": [[62, 67], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "rank", "=", "0", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "sum", "=", "0.0", "\n", "self", ".", "count", "=", "0.0", "\n", "self", ".", "rank", "=", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.Metric.update": [[68, 73], ["torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.all_reduce", "torch.all_reduce", "val_t[].item", "val_t[].item", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ",", "mygroup", "=", "dist", ".", "group", ".", "WORLD", ")", ":", "\n", "        ", "val_t", "=", "torch", ".", "tensor", "(", "[", "val", "*", "n", ",", "n", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "dist", ".", "all_reduce", "(", "val_t", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ",", "group", "=", "mygroup", ")", "\n", "self", ".", "sum", "+=", "val_t", "[", "0", "]", ".", "item", "(", ")", "\n", "self", ".", "count", "+=", "val_t", "[", "1", "]", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.Metric.avg": [[74, 81], ["print"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", ".", "sum", "/", "self", ".", "count", "\n", "", "except", "ZeroDivisionError", ":", "\n", "            ", "print", "(", "\"Rank: \"", ",", "self", ".", "rank", ",", "self", ".", "count", ",", "self", ".", "sum", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.MultiStepLR.__init__": [[152, 163], ["utils.get_current_lr"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.get_current_lr"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "args", ",", "milestones_travelled", "=", "0", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "milestones_travelled", "=", "milestones_travelled", "\n", "self", ".", "milestones", "=", "args", ".", "lrmilestone", "\n", "self", ".", "gamma", "=", "args", ".", "gamma", "\n", "self", ".", "target_lr", "=", "args", ".", "lr", "\n", "self", ".", "init_lr", "=", "get_current_lr", "(", "optimizer", ")", "\n", "self", ".", "factor", "=", "self", ".", "target_lr", "/", "self", ".", "init_lr", "\n", "self", ".", "warm_up_epochs", "=", "args", ".", "warm_up_epochs", "\n", "if", "self", ".", "warm_up_epochs", ">", "0", ":", "\n", "            ", "assert", "self", ".", "factor", ">=", "1", ",", "\"The target LR should be >= baseline_lr!\"", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.MultiStepLR.step": [[164, 178], ["utils.set_current_lr", "utils.set_current_lr", "print", "utils.set_current_lr", "len", "utils.get_current_lr"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.set_current_lr", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.set_current_lr", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.set_current_lr", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.get_current_lr"], ["", "", "def", "step", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", "<", "self", ".", "warm_up_epochs", ":", "\n", "            ", "lr", "=", "self", ".", "target_lr", "*", "1", "/", "self", ".", "factor", "*", "(", "\n", "epoch", "*", "(", "self", ".", "factor", "-", "1", ")", "/", "self", ".", "warm_up_epochs", "+", "1", ")", "\n", "set_current_lr", "(", "self", ".", "optimizer", ",", "lr", ")", "\n", "", "elif", "epoch", ">=", "self", ".", "warm_up_epochs", "and", "epoch", "<", "self", ".", "milestones", "[", "0", "]", ":", "\n", "            ", "set_current_lr", "(", "self", ".", "optimizer", ",", "self", ".", "target_lr", ")", "\n", "", "elif", "self", ".", "milestones_travelled", "<", "len", "(", "\n", "self", ".", "milestones", ")", "and", "epoch", ">=", "self", ".", "milestones", "[", "\n", "self", ".", "milestones_travelled", "]", ":", "\n", "            ", "print", "(", "\"Dampening LR at \"", ",", "epoch", ")", "\n", "self", ".", "milestones_travelled", "+=", "1", "\n", "set_current_lr", "(", "self", ".", "optimizer", ",", "\n", "get_current_lr", "(", "self", ".", "optimizer", ")", "*", "self", ".", "gamma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.__init__": [[181, 194], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "args", ",", "eta_min", "=", "0", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "T_max", "=", "args", ".", "epochs", "+", "0.1", "-", "args", ".", "warm_up_epochs", "\n", "self", ".", "T_i", "=", "args", ".", "warm_up_epochs", "\n", "self", ".", "eta_min", "=", "eta_min", "\n", "self", ".", "gamma", "=", "args", ".", "gamma", "\n", "self", ".", "base_lr", "=", "args", ".", "lr", "\n", "self", ".", "init_lr", "=", "args", ".", "baseline_lr", "\n", "self", ".", "factor", "=", "self", ".", "base_lr", "/", "self", ".", "init_lr", "\n", "self", ".", "warm_up_epochs", "=", "args", ".", "warm_up_epochs", "\n", "if", "self", ".", "warm_up_epochs", ">", "0", ":", "\n", "            ", "assert", "self", ".", "factor", ">=", "1", ",", "\"The target LR {:.3f} should be >= baseline_lr {:.2f}!\"", ".", "format", "(", "\n", "self", ".", "base_lr", ",", "self", ".", "init_lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.CosineAnnealingLR.step": [[195, 204], ["utils.set_current_lr", "utils.set_current_lr", "math.cos"], "methods", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.set_current_lr", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.set_current_lr"], ["", "", "def", "step", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", "<", "self", ".", "warm_up_epochs", ":", "\n", "            ", "lr", "=", "self", ".", "base_lr", "*", "1", "/", "self", ".", "factor", "*", "(", "\n", "epoch", "*", "(", "self", ".", "factor", "-", "1", ")", "/", "self", ".", "warm_up_epochs", "+", "1", ")", "\n", "set_current_lr", "(", "self", ".", "optimizer", ",", "lr", ")", "\n", "", "else", ":", "\n", "            ", "lr", "=", "self", ".", "eta_min", "+", "(", "self", ".", "base_lr", "-", "self", ".", "eta_min", ")", "*", "(", "\n", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "epoch", "-", "self", ".", "T_i", ")", "/", "self", ".", "T_max", ")", ")", "/", "2", "\n", "set_current_lr", "(", "self", ".", "optimizer", ",", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.sync_performance": [[40, 44], ["torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.all_reduce", "loss_acc[].item", "torch.tensor().float", "torch.tensor().float", "loss_acc[].item", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "", "def", "sync_performance", "(", "loss", ",", "acc", ",", "mygroup", "=", "dist", ".", "group", ".", "WORLD", ")", ":", "\n", "    ", "loss_acc", "=", "torch", ".", "tensor", "(", "[", "loss", ",", "-", "acc", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "dist", ".", "all_reduce", "(", "loss_acc", ",", "op", "=", "dist", ".", "ReduceOp", ".", "MAX", ",", "group", "=", "mygroup", ")", "\n", "return", "loss_acc", "[", "0", "]", ".", "item", "(", ")", ",", "-", "loss_acc", "[", "1", "]", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.accuracy": [[83, 87], ["pred.eq().float().mean", "output.max", "pred.eq().float", "pred.eq", "target.view_as"], "function", ["None"], ["", "", "", "def", "accuracy", "(", "output", ",", "target", ")", ":", "\n", "# get the index of the max log-probability", "\n", "    ", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "return", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.get_current_lr": [[89, 95], ["hasattr"], "function", ["None"], ["", "def", "get_current_lr", "(", "optimizer", ")", ":", "\n", "    ", "if", "hasattr", "(", "optimizer", ",", "'param_groups'", ")", ":", "\n", "        ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "return", "param_group", "[", "'lr'", "]", "\n", "", "", "else", ":", "\n", "        ", "return", "optimizer", ".", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.set_current_lr": [[97, 103], ["hasattr"], "function", ["None"], ["", "", "def", "set_current_lr", "(", "optimizer", ",", "lr", ")", ":", "\n", "    ", "if", "hasattr", "(", "optimizer", ",", "'param_groups'", ")", ":", "\n", "        ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "", "else", ":", "\n", "        ", "optimizer", ".", "lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.result_save": [[105, 111], ["open", "json.dump", "open", "json.dump", "enumerate"], "function", ["None"], ["", "", "def", "result_save", "(", "results", ",", "args", ")", ":", "\n", "    ", "result_dict", "=", "{", "(", "i", ")", ":", "r", "for", "i", ",", "r", "in", "enumerate", "(", "results", ")", "}", "\n", "with", "open", "(", "args", ".", "results_dir", "+", "\"/results.json\"", ",", "'w'", ")", "as", "outfile", ":", "\n", "        ", "json", ".", "dump", "(", "result_dict", ",", "outfile", ")", "\n", "", "with", "open", "(", "args", ".", "results_dir", "+", "\"/args.json\"", ",", "'w'", ")", "as", "outfile", ":", "\n", "        ", "json", ".", "dump", "(", "args", ".", "__dict__", ",", "outfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.assign_groups": [[113, 149], ["len", "int", "range", "print", "exit", "range", "zip", "my_group.append", "sampling_ranks.append", "gpus.append", "groups.update", "group_lists.append", "str"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.Metric.update"], ["", "", "def", "assign_groups", "(", "args", ")", ":", "\n", "    ", "args", ".", "commsize", "=", "len", "(", "args", ".", "gpus", ")", "\n", "args", ".", "num_workers", "=", "args", ".", "commsize", "-", "1", "#commsize here is the number of GPUs", "\n", "args", ".", "workers_per_process", "=", "int", "(", "args", ".", "num_workers", "/", "args", ".", "num_processes", ")", "\n", "if", "args", ".", "workers_per_process", "<", "1", ":", "\n", "        ", "print", "(", "\"Not enough workers! \"", ",", "args", ".", "commsize", ",", "args", ".", "num_workers", ",", "\n", "args", ".", "workers_per_process", ",", "args", ".", "num_processes", ")", "\n", "exit", "(", "1", ")", "\n", "", "args", ".", "working_nodes", "=", "1", "+", "args", ".", "workers_per_process", "*", "args", ".", "num_processes", "\n", "args", ".", "workforce", "=", "(", "args", ".", "workers_per_process", "+", "1", ")", "*", "args", ".", "num_processes", "\n", "group_lists", "=", "[", "]", "\n", "groups", "=", "{", "}", "\n", "distranks", "=", "args", ".", "num_processes", "\n", "allocated_gpus", "=", "1", "\n", "for", "i", "in", "range", "(", "args", ".", "num_processes", ")", ":", "\n", "        ", "my_group", "=", "[", "i", "]", "\n", "sampling_ranks", "=", "[", "-", "1", "]", "\n", "gpus", "=", "[", "0", "]", "\n", "for", "j", "in", "range", "(", "args", ".", "workers_per_process", ")", ":", "\n", "            ", "my_group", ".", "append", "(", "distranks", ")", "\n", "sampling_ranks", ".", "append", "(", "j", ")", "\n", "gpus", ".", "append", "(", "allocated_gpus", ")", "\n", "allocated_gpus", "+=", "1", "\n", "distranks", "+=", "1", "\n", "", "for", "r", ",", "s", ",", "g", "in", "zip", "(", "my_group", ",", "sampling_ranks", ",", "gpus", ")", ":", "\n", "            ", "groups", ".", "update", "(", "\n", "{", "str", "(", "r", ")", ":", "{", "\n", "'g'", ":", "g", ",", "\n", "'m'", ":", "i", ",", "\n", "'s'", ":", "s", ",", "\n", "'sd'", ":", "args", ".", "seed", "+", "i", "\n", "}", "}", ")", "\n", "", "if", "my_group", "not", "in", "group_lists", ":", "\n", "            ", "group_lists", ".", "append", "(", "my_group", ")", "\n", "\n", "", "", "return", "groups", ",", "group_lists", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.sync_group": [[206, 231], ["torch.broadcast", "torch.broadcast", "copy_to_communicator", "copy_from_communicator_to_parameters", "copy_to_communicator", "copy_from_communicator_to_parameters", "p.data.detach", "list", "p.data.detach", "list", "list", "net.parameters", "list", "net.buffers", "net.parameters", "net.buffers"], "function", ["None"], ["", "", "", "def", "sync_group", "(", "isMaster", ",", "\n", "net", ",", "\n", "communicator_tensor", ",", "\n", "mymaster", ",", "\n", "mygroup", "=", "dist", ".", "group", ".", "WORLD", ")", ":", "\n", "    ", "if", "isMaster", ":", "\n", "        ", "tensors", "=", "[", "p", ".", "data", ".", "detach", "(", ")", "for", "p", "in", "list", "(", "net", ".", "parameters", "(", ")", ")", "]", "\n", "copy_to_communicator", "(", "communicator_tensor", ",", "tensors", ")", "\n", "\n", "# dist.barrier(group=mygroup)", "\n", "", "dist", ".", "broadcast", "(", "communicator_tensor", ",", "mymaster", ",", "group", "=", "mygroup", ")", "\n", "\n", "if", "not", "isMaster", ":", "\n", "        ", "copy_from_communicator_to_parameters", "(", "communicator_tensor", ",", "\n", "list", "(", "net", ".", "parameters", "(", ")", ")", ")", "\n", "", "if", "isMaster", ":", "\n", "        ", "tensors", "=", "[", "p", ".", "data", ".", "detach", "(", ")", "for", "p", "in", "list", "(", "net", ".", "buffers", "(", ")", ")", "]", "\n", "copy_to_communicator", "(", "communicator_tensor", ",", "tensors", ")", "\n", "\n", "# dist.barrier(group=mygroup)", "\n", "", "dist", ".", "broadcast", "(", "communicator_tensor", ",", "mymaster", ",", "group", "=", "mygroup", ")", "\n", "\n", "if", "not", "isMaster", ":", "\n", "        ", "copy_from_communicator_to_parameters", "(", "communicator_tensor", ",", "\n", "list", "(", "net", ".", "buffers", "(", ")", ")", ")", "\n", "# del communicator_tensor", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.save_model": [[235, 243], ["torch.save", "torch.save", "model.state_dict", "shutil.copyfile", "model.parameters"], "function", ["None"], ["", "", "def", "save_model", "(", "model", ",", "rightnow", ",", "snapdir", ",", "epoch", ",", "isbest", ",", "savedict", "=", "True", ")", ":", "\n", "    ", "if", "savedict", ":", "\n", "        ", "snap", "=", "model", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "        ", "snap", "=", "[", "m", ".", "data", "for", "m", "in", "model", ".", "parameters", "(", ")", "]", "\n", "", "torch", ".", "save", "(", "{", "'m'", ":", "snap", ",", "'t'", ":", "(", "rightnow", ")", ",", "'ep'", ":", "epoch", "}", ",", "snapdir", "+", "\"/snap.pt\"", ")", "\n", "if", "isbest", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "snapdir", "+", "\"/snap.pt\"", ",", "snapdir", "+", "\"/bestsnap.pt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.test_epoch": [[245, 283], ["len", "utils.bar", "utils.LocalMetric", "utils.LocalMetric", "enumerate", "criterion().item", "accuracy().item", "targets.size", "utils.LocalMetric.update", "utils.LocalMetric.update", "utils.bar.progress_bar", "test_results.append", "inputs.to", "targets.to", "torch.no_grad", "torch.no_grad", "net.eval", "net", "time.perf_counter", "os.getpid", "best_acc.get_lock", "utils.save_model", "criterion", "utils.accuracy"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.Metric.update", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.Metric.update", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.bar.progress_bar", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.save_model", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.accuracy"], ["", "", "def", "test_epoch", "(", "net", ",", "\n", "args", ",", "\n", "start", ",", "\n", "testloader", ",", "\n", "criterion", ",", "\n", "best_acc", ",", "\n", "test_results", ",", "\n", "epoch", ",", "\n", "rank", "=", "0", ")", ":", "\n", "    ", "loaderlength", "=", "len", "(", "testloader", ")", "\n", "b", "=", "bar", "(", "loaderlength", ",", "30", ")", "\n", "losses", "=", "LocalMetric", "(", "'Loss'", ")", "\n", "top1", "=", "LocalMetric", "(", "'Acc@1'", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "'cuda'", ")", ",", "targets", ".", "to", "(", "'cuda'", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "net", ".", "eval", "(", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", ".", "item", "(", ")", "\n", "acc", "=", "accuracy", "(", "outputs", ",", "targets", ")", ".", "item", "(", ")", "\n", "target_batch_size", "=", "targets", ".", "size", "(", "0", ")", "\n", "losses", ".", "update", "(", "loss", ",", "target_batch_size", ")", "\n", "top1", ".", "update", "(", "acc", ",", "target_batch_size", ")", "\n", "rightnow", "=", "time", ".", "perf_counter", "(", ")", "-", "start", "\n", "banner_string", "=", "'PID: {:d},CommRank: {:d},Rank: {:d}| TstEp: {:.2f} | Loss: {:.3f} | Acc: {:.3f}% ({:.0f}/{:.0f})'", ".", "format", "(", "\n", "os", ".", "getpid", "(", ")", ",", "args", ".", "commrank", ",", "rank", ",", "epoch", ",", "losses", ".", "avg", ",", "\n", "top1", ".", "avg", "*", "100", ",", "top1", ".", "sum", ",", "top1", ".", "count", ")", "\n", "b", ".", "progress_bar", "(", "batch_idx", ",", "rightnow", ",", "banner_string", ")", "\n", "test_results", ".", "append", "(", "\n", "(", "epoch", ",", "batch_idx", ",", "rightnow", ",", "loss", ",", "acc", ",", "target_batch_size", ")", ")", "\n", "\n", "", "if", "args", ".", "storeresults", ":", "\n", "        ", "with", "best_acc", ".", "get_lock", "(", ")", ":", "\n", "            ", "ba", "=", "best_acc", ".", "value", "\n", "save_model", "(", "net", ",", "rightnow", ",", "args", ".", "snap_dir", ",", "epoch", ",", "\n", "top1", ".", "avg", "*", "100", ">", "ba", ")", "\n", "if", "top1", ".", "avg", ">", "ba", ":", "\n", "                ", "best_acc", ".", "value", "=", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.process_test_result": [[285, 335], ["torch.tensor().cuda", "torch.tensor().cuda", "torch.all_reduce", "test_results.sort", "int", "range", "len", "maxelements[].item", "utils.Metric", "utils.Metric", "range", "print", "results.append", "results.append", "torch.tensor", "torch.tensor", "max", "utils.Metric.update", "utils.Metric.update", "results.remove"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.Metric.update", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.Metric.update"], ["", "", "", "", "def", "process_test_result", "(", "results", ",", "args", ")", ":", "\n", "    ", "test_results", "=", "[", "]", "\n", "for", "r", "in", "results", ":", "\n", "        ", "if", "'testresult'", "in", "r", "[", "'tag'", "]", ":", "\n", "            ", "test_results", "+=", "r", "[", "'val'", "]", "\n", "", "", "len_test_results", "=", "len", "(", "test_results", ")", "*", "1.0", "\n", "maxelements", "=", "torch", ".", "tensor", "(", "[", "len_test_results", "]", ")", ".", "cuda", "(", ")", "\n", "dist", ".", "all_reduce", "(", "maxelements", ",", "op", "=", "dist", ".", "ReduceOp", ".", "MAX", ")", "\n", "assert", "len_test_results", "==", "maxelements", "[", "0", "]", ".", "item", "(", ")", ",", "\"The number of \\\n        validation minibatches are not equal across the clusters\"", "\n", "\n", "test_results", ".", "sort", "(", "key", "=", "lambda", "tup", ":", "(", "tup", "[", "0", "]", ",", "tup", "[", "1", "]", ")", ")", "\n", "# print(args.commrank, test_results)", "\n", "# return", "\n", "num_test_epochs", "=", "int", "(", "max", "(", "test_results", ")", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "num_test_epochs", ")", ":", "\n", "        ", "losses", "=", "Metric", "(", "'Loss'", ",", "args", ".", "commrank", ")", "\n", "top1", "=", "Metric", "(", "'Acc@1'", ",", "args", ".", "commrank", ")", "\n", "for", "j", "in", "range", "(", "args", ".", "testloaderlength", ")", ":", "\n", "            ", "losses", ".", "update", "(", "test_results", "[", "i", "*", "args", ".", "testloaderlength", "+", "j", "]", "[", "3", "]", ",", "\n", "test_results", "[", "i", "*", "args", ".", "testloaderlength", "+", "j", "]", "[", "5", "]", ")", "\n", "top1", ".", "update", "(", "test_results", "[", "i", "*", "args", ".", "testloaderlength", "+", "j", "]", "[", "4", "]", ",", "\n", "test_results", "[", "i", "*", "args", ".", "testloaderlength", "+", "j", "]", "[", "5", "]", ")", "\n", "\n", "", "print", "(", "\"Ep: \"", ",", "i", "+", "1", ",", "\" TestLoss: \"", ",", "losses", ".", "avg", ",", "\" TestAcc@1: \"", ",", "\n", "top1", ".", "avg", "*", "100", ",", "\" Time: \"", ",", "\n", "test_results", "[", "(", "i", "+", "1", ")", "*", "args", ".", "testloaderlength", "-", "1", "]", "[", "2", "]", ")", "\n", "results", ".", "append", "(", "{", "\n", "'tag'", ":", "\n", "'TestLoss'", ",", "\n", "'ep'", ":", "\n", "i", "+", "1", ",", "\n", "'val'", ":", "\n", "losses", ".", "avg", ",", "\n", "'time'", ":", "\n", "test_results", "[", "(", "i", "+", "1", ")", "*", "args", ".", "testloaderlength", "-", "1", "]", "[", "2", "]", "\n", "}", ")", "\n", "results", ".", "append", "(", "{", "\n", "'tag'", ":", "\n", "'TestAcc@1'", ",", "\n", "'ep'", ":", "\n", "i", "+", "1", ",", "\n", "'val'", ":", "\n", "top1", ".", "avg", "*", "100", ",", "\n", "'time'", ":", "\n", "test_results", "[", "(", "i", "+", "1", ")", "*", "args", ".", "testloaderlength", "-", "1", "]", "[", "2", "]", "\n", "}", ")", "\n", "", "for", "r", "in", "results", ":", "\n", "        ", "if", "'testresult'", "in", "r", "[", "'tag'", "]", ":", "\n", "            ", "results", ".", "remove", "(", "r", ")", "\n", "# print(\"Rank: \", args.commrank, \"Results: \", results)", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.process_train_result": [[340, 393], ["torch.tensor().cuda", "torch.tensor().cuda", "torch.all_reduce", "train_results.sort", "range", "len", "maxelements[].item", "utils.Metric", "utils.Metric", "range", "print", "results.append", "results.append", "torch.tensor", "torch.tensor", "utils.Metric.update", "utils.Metric.update", "results.remove"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.Metric.update", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.utils.Metric.update"], ["", "", "", "def", "process_train_result", "(", "results", ",", "args", ")", ":", "\n", "    ", "train_results", "=", "[", "]", "\n", "for", "r", "in", "results", ":", "\n", "        ", "if", "'trainresult'", "in", "r", "[", "'tag'", "]", ":", "\n", "            ", "train_results", "+=", "r", "[", "'val'", "]", "\n", "", "", "len_train_results", "=", "len", "(", "train_results", ")", "*", "1.0", "\n", "maxelements", "=", "torch", ".", "tensor", "(", "[", "len_train_results", "]", ")", ".", "cuda", "(", ")", "\n", "dist", ".", "all_reduce", "(", "maxelements", ",", "op", "=", "dist", ".", "ReduceOp", ".", "MAX", ")", "\n", "assert", "len_train_results", "==", "maxelements", "[", "0", "]", ".", "item", "(", ")", ",", "\"The number of \\\n        validation minibatches are not equal across the clusters\"", "\n", "\n", "train_results", ".", "sort", "(", "key", "=", "lambda", "tup", ":", "(", "tup", "[", "0", "]", ")", ")", "\n", "# print(args.commrank, test_results)", "\n", "# return", "\n", "for", "i", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "losses", "=", "Metric", "(", "'Loss'", ",", "args", ".", "commrank", ")", "\n", "top1", "=", "Metric", "(", "'Acc@1'", ",", "args", ".", "commrank", ")", "\n", "for", "j", "in", "range", "(", "args", ".", "trainloaderlength", ")", ":", "\n", "            ", "losses", ".", "update", "(", "\n", "train_results", "[", "i", "*", "args", ".", "trainloaderlength", "+", "j", "]", "[", "2", "]", "/", "\n", "train_results", "[", "i", "*", "args", ".", "trainloaderlength", "+", "j", "]", "[", "4", "]", ",", "\n", "train_results", "[", "i", "*", "args", ".", "trainloaderlength", "+", "j", "]", "[", "4", "]", ")", "\n", "top1", ".", "update", "(", "\n", "train_results", "[", "i", "*", "args", ".", "trainloaderlength", "+", "j", "]", "[", "3", "]", "/", "\n", "train_results", "[", "i", "*", "args", ".", "trainloaderlength", "+", "j", "]", "[", "4", "]", ",", "\n", "train_results", "[", "i", "*", "args", ".", "trainloaderlength", "+", "j", "]", "[", "4", "]", ")", "\n", "\n", "", "print", "(", "\"Ep: \"", ",", "i", "+", "1", ",", "\" TrainLoss: \"", ",", "losses", ".", "avg", ",", "\" TrainAcc@1: \"", ",", "\n", "top1", ".", "avg", "*", "100", ",", "\" Time: \"", ",", "\n", "train_results", "[", "(", "i", "+", "1", ")", "*", "args", ".", "trainloaderlength", "-", "1", "]", "[", "1", "]", ")", "\n", "results", ".", "append", "(", "{", "\n", "'tag'", ":", "\n", "'TrainLoss'", ",", "\n", "'ep'", ":", "\n", "i", "+", "1", ",", "\n", "'val'", ":", "\n", "losses", ".", "avg", ",", "\n", "'time'", ":", "\n", "train_results", "[", "(", "i", "+", "1", ")", "*", "args", ".", "trainloaderlength", "-", "1", "]", "[", "1", "]", "\n", "}", ")", "\n", "results", ".", "append", "(", "{", "\n", "'tag'", ":", "\n", "'TrainAcc@1'", ",", "\n", "'ep'", ":", "\n", "i", "+", "1", ",", "\n", "'val'", ":", "\n", "top1", ".", "avg", "*", "100", ",", "\n", "'time'", ":", "\n", "train_results", "[", "(", "i", "+", "1", ")", "*", "args", ".", "trainloaderlength", "-", "1", "]", "[", "1", "]", "\n", "}", ")", "\n", "", "for", "r", "in", "results", ":", "\n", "        ", "if", "'trainresult'", "in", "r", "[", "'tag'", "]", ":", "\n", "            ", "results", ".", "remove", "(", "r", ")", "\n", "# print(\"Rank: \", args.commrank, \"Results: \", results)", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.args.prepare_dir": [[15, 51], ["datetime.datetime.now", "os.getcwd", "str", "str", "glob.glob", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "str", "str", "str", "str", "str", "str", "shutil.rmtree", "print", "str", "str", "str", "str", "str", "numpy.fix", "str", "args.dataset.title", "args.model.title", "args.training_type.title", "args.scheduler_type.title"], "function", ["None"], ["def", "prepare_dir", "(", "args", ")", ":", "\n", "    ", "x", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "datetimestring", "=", "str", "(", "x", ".", "hour", ")", "+", "str", "(", "x", ".", "minute", ")", "+", "str", "(", "x", ".", "second", ")", "+", "\"_\"", "+", "str", "(", "x", ".", "day", ")", "+", "str", "(", "x", ".", "month", ")", "+", "str", "(", "x", ".", "year", ")", "\n", "args", ".", "hpstring", "=", "args", ".", "training_type", ".", "title", "(", ")", "+", "args", ".", "scheduler_type", ".", "title", "(", ")", "+", "args", ".", "model", ".", "title", "(", ")", "+", "args", ".", "dataset", ".", "title", "(", ")", "+", "\"Bs\"", "+", "str", "(", "args", ".", "train_bs", ")", "+", "\"ProcBs\"", "+", "str", "(", "args", ".", "train_processing_bs", ")", "+", "\"Lr\"", "+", "str", "(", "args", ".", "lr", "-", "np", ".", "fix", "(", "args", ".", "lr", ")", ")", "[", "2", ":", "]", "+", "\"AvFreq\"", "+", "str", "(", "args", ".", "averaging_freq", ")", "+", "\"NumNodes\"", "+", "str", "(", "args", ".", "numnodes", ")", "\n", "\n", "if", "'HW'", "in", "args", ".", "training_type", ":", "\n", "        ", "args", ".", "hpstring", "=", "args", ".", "hpstring", "+", "'Pr'", "+", "str", "(", "args", ".", "num_processes", ")", "\n", "", "if", "args", ".", "training_type", "in", "[", "'alPHW'", "]", ":", "\n", "        ", "args", ".", "hpstring", "=", "args", ".", "hpstring", "+", "'PsmSt'", "+", "str", "(", "args", ".", "assmswitchepochs", "[", "0", "]", ")", "\n", "", "if", "args", ".", "cuda", ":", "\n", "        ", "args", ".", "hpstring", "=", "args", ".", "host", "+", "\"GPU\"", "+", "str", "(", "args", ".", "gpus", "[", "0", "]", ")", "+", "args", ".", "hpstring", "\n", "", "else", ":", "\n", "        ", "args", ".", "hpstring", "=", "args", ".", "host", "+", "args", ".", "hpstring", "\n", "", "curr_dir", "=", "os", ".", "getcwd", "(", ")", "\n", "args", ".", "snap_dir", "=", "curr_dir", "+", "'/snapshots'", "+", "args", ".", "hpstring", "+", "\"_\"", "+", "datetimestring", "\n", "args", ".", "results_dir", "=", "'/debug'", "if", "args", ".", "debug", "else", "'/results'", "\n", "args", ".", "results_dir", "=", "curr_dir", "+", "args", ".", "results_dir", "+", "args", ".", "hpstring", "+", "\"_\"", "+", "datetimestring", "\n", "if", "args", ".", "clean_start", ":", "\n", "        ", "result_dirs", "=", "glob", ".", "glob", "(", "'*'", "+", "args", ".", "hpstring", "+", "'*'", ")", "\n", "for", "r", "in", "result_dirs", ":", "\n", "            ", "try", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "r", ",", "ignore_errors", "=", "True", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "                ", "print", "(", "\"Error: %s - %s.\"", "%", "(", "e", ".", "filename", ",", "e", ".", "strerror", ")", ")", "\n", "", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "snap_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "snap_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "results_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "results_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.args.prepare_run_files": [[53, 85], ["open", "open.write", "open.write", "open.close", "open", "open.write", "open.close", "open", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.close", "open", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.close", "open", "open.write", "open.write", "open.close", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "prepare_run_files", "(", "args", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "results_dir", "+", "'/rundir'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "results_dir", "+", "'/rundir'", ")", "\n", "", "runtbfile", "=", "open", "(", "args", ".", "results_dir", "+", "'/rundir/tb_start.sh'", ",", "\"w\"", ")", "\n", "runtbfile", ".", "write", "(", "\"kill $(lsof -t -i:6006)\\n\"", ")", "\n", "runtbfile", ".", "write", "(", "\"tensorboard --bind_all --logdir=\"", "+", "args", ".", "results_dir", "+", "\n", "\" --port=6006 &\\n\"", ")", "\n", "runtbfile", ".", "close", "(", ")", "\n", "runtbstopfile", "=", "open", "(", "args", ".", "results_dir", "+", "'/rundir/tb_stop.sh'", ",", "\"w\"", ")", "\n", "runtbstopfile", ".", "write", "(", "\"kill $(lsof -t -i:6006)\\n\"", ")", "\n", "runtbstopfile", ".", "close", "(", ")", "\n", "flaskfile", "=", "open", "(", "args", ".", "results_dir", "+", "'/rundir/app.py'", ",", "\"w\"", ")", "\n", "flaskfile", ".", "write", "(", "\"from flask import Flask\\n\"", ")", "\n", "flaskfile", ".", "write", "(", "\"from flask import render_template\\n\"", ")", "\n", "flaskfile", ".", "write", "(", "\"app = Flask(__name__)\\n\"", ")", "\n", "flaskfile", ".", "write", "(", "\"@app.route(\\\"/\\\")\\n\"", ")", "\n", "flaskfile", ".", "write", "(", "\"def hello():return render_template('index.html')\\n\"", ")", "\n", "flaskfile", ".", "write", "(", "\"if __name__ == \\\"__main__\\\":app.run(debug=True)\"", ")", "\n", "flaskfile", ".", "close", "(", ")", "\n", "flaskstartfile", "=", "open", "(", "args", ".", "results_dir", "+", "'/rundir/flask_start.sh'", ",", "\"w\"", ")", "\n", "flaskstartfile", ".", "write", "(", "\"kill $(lsof -t -i:5000)\\n\"", ")", "\n", "flaskstartfile", ".", "write", "(", "\"mkdir \"", "+", "args", ".", "results_dir", "+", "\"/rundir/templates\\n\"", ")", "\n", "flaskstartfile", ".", "write", "(", "\"cp \"", "+", "args", ".", "results_dir", "+", "\"/result.html \"", "+", "\n", "args", ".", "results_dir", "+", "\"/rundir/templates/index.html\\n\"", ")", "\n", "flaskstartfile", ".", "write", "(", "\"cd \"", "+", "args", ".", "results_dir", "+", "\"/rundir\\n\"", ")", "\n", "flaskstartfile", ".", "write", "(", "\"python \"", "+", "args", ".", "results_dir", "+", "\"/rundir/app.py &\\n\"", ")", "\n", "flaskstartfile", ".", "write", "(", "\"cd -\\n\"", ")", "\n", "flaskstartfile", ".", "close", "(", ")", "\n", "flaskstopfile", "=", "open", "(", "args", ".", "results_dir", "+", "'/rundir/flask_stop.sh'", ",", "\"w\"", ")", "\n", "flaskstopfile", ".", "write", "(", "\"kill $(lsof -t -i:5000)\\n\"", ")", "\n", "flaskstopfile", ".", "write", "(", "\"rm -r \"", "+", "args", ".", "results_dir", "+", "\"/rundir/templates\\n\"", ")", "\n", "flaskstopfile", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.args.filter_args": [[87, 121], ["torch.cuda.is_available", "int", "int", "int", "int"], "function", ["None"], ["", "def", "filter_args", "(", "args", ")", ":", "\n", "    ", "args", ".", "cuda", "=", "args", ".", "cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "not", "args", ".", "cuda", ":", "\n", "        ", "args", ".", "pm", "=", "False", "\n", "", "if", "'OMPI_COMM_WORLD_RANK'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "commrank", "=", "int", "(", "os", ".", "environ", "[", "'OMPI_COMM_WORLD_RANK'", "]", ")", "\n", "args", ".", "commsize", "=", "int", "(", "os", ".", "environ", "[", "'OMPI_COMM_WORLD_SIZE'", "]", ")", "\n", "", "elif", "'SLURM_PROCID'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "commrank", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "args", ".", "commsize", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_NTASKS'", "]", ")", "\n", "\n", "", "if", "args", ".", "commrank", "!=", "0", ":", "\n", "        ", "args", ".", "no_test", "=", "True", "\n", "args", ".", "storeresults", "=", "False", "\n", "", "if", "args", ".", "training_type", "in", "[", "'ddp'", "]", ":", "\n", "        ", "args", ".", "pre_post_epochs", "=", "args", ".", "epochs", "\n", "args", ".", "partition", "=", "True", "\n", "", "if", "args", ".", "model", "==", "'small'", ":", "\n", "        ", "args", ".", "dataset", "=", "'mnist'", "\n", "", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "args", ".", "num_classes", "=", "10", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "args", ".", "num_classes", "=", "100", "\n", "", "if", "args", ".", "training_type", "in", "[", "\n", "'ddp'", ",", "\n", "'lSGD'", ",", "\n", "'alSGD'", ",", "\n", "'mnddp'", ",", "\n", "'mnlSGD'", ",", "\n", "]", ":", "\n", "        ", "args", ".", "num_processes", "=", "1", "\n", "", "\"\"\" The batch sizes are reduced by the batch size multiple \"\"\"", "\n", "args", ".", "train_bs", "=", "args", ".", "train_processing_bs", "*", "args", ".", "bs_multiple", "\n", "args", ".", "test_bs", "=", "args", ".", "test_processing_bs", "*", "args", ".", "test_bs_multiple", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.args.prepare_args": [[123, 131], ["args.filter_args", "[].replace", "os.path.exists", "os.makedirs", "args.prepare_dir", "args.prepare_run_files", "platform.uname"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.args.filter_args", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.args.prepare_dir", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.args.prepare_run_files"], ["", "def", "prepare_args", "(", "args", ")", ":", "\n", "    ", "filter_args", "(", "args", ")", "\n", "args", ".", "host", "=", "platform", ".", "uname", "(", ")", "[", "1", "]", ".", "replace", "(", "'.'", ",", "''", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "data_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "data_dir", ")", "\n", "", "if", "args", ".", "storeresults", ":", "\n", "        ", "prepare_dir", "(", "args", ")", "\n", "prepare_run_files", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.args.add_sys_args": [[133, 138], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["", "", "def", "add_sys_args", "(", "parser", ")", ":", "\n", "    ", "sys_parser", "=", "parser", ".", "add_argument_group", "(", "title", "=", "'Directory etc. arguments'", ")", "\n", "sys_parser", ".", "add_argument", "(", "'--data-dir'", ",", "default", "=", "'~/data'", ")", "\n", "sys_parser", ".", "add_argument", "(", "'--imagenet-dir'", ",", "default", "=", "'~/imagenet_data'", ")", "\n", "sys_parser", ".", "add_argument", "(", "'--host'", ",", "default", "=", "'gpu118'", ",", "help", "=", "'Host name'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.args.add_dist_args": [[140, 159], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["", "def", "add_dist_args", "(", "parser", ")", ":", "\n", "    ", "dist_parser", "=", "parser", ".", "add_argument_group", "(", "title", "=", "'dist arguments'", ")", "\n", "dist_parser", ".", "add_argument", "(", "'--dist-backend'", ",", "\n", "default", "=", "'nccl'", ",", "\n", "help", "=", "'dist mpi backend'", ",", "\n", "choices", "=", "[", "'nccl'", ",", "'gloo'", ",", "'mpi'", "]", ")", "\n", "dist_parser", ".", "add_argument", "(", "\n", "'--dist-url'", ",", "\n", "default", "=", "'tcp://127.0.0.1:21456'", ",", "\n", "help", "=", "'ip address and port of the machine running dist'", ")", "\n", "dist_parser", ".", "add_argument", "(", "'--numnodes'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "2", ",", "\n", "help", "=", "'number of nodes running dist'", ")", "\n", "dist_parser", ".", "add_argument", "(", "\n", "'--masters_share'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "4", ",", "\n", "help", "=", "'kth portion of dataset to be processed by the master node'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.args.add_lr_args": [[161, 197], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["", "def", "add_lr_args", "(", "parser", ")", ":", "\n", "    ", "lr_parser", "=", "parser", ".", "add_argument_group", "(", "title", "=", "'LR args'", ")", "\n", "lr_parser", ".", "add_argument", "(", "'--scheduler-type'", ",", "\n", "default", "=", "'const'", ",", "\n", "help", "=", "'Scheduler type'", ",", "\n", "choices", "=", "[", "'mstep'", ",", "'const'", ",", "'cosine'", "]", ")", "\n", "lr_parser", ".", "add_argument", "(", "'--gamma'", ",", "\n", "default", "=", "0.1", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "'learning rate decay'", ")", "\n", "lr_parser", ".", "add_argument", "(", "'--eta'", ",", "default", "=", "0.001", ",", "type", "=", "float", ",", "help", "=", "'LARS eta'", ")", "\n", "lr_parser", ".", "add_argument", "(", "'--multiplier'", ",", "\n", "default", "=", "4", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'warm up multiplier'", ")", "\n", "lr_parser", ".", "add_argument", "(", "'--lrdecaystep'", ",", "\n", "default", "=", "30", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'learning rate decaystep'", ")", "\n", "lr_parser", ".", "add_argument", "(", "'--lrmilestone'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "[", "150", ",", "225", "]", ",", "\n", "help", "=", "'learning rate decaystep'", ")", "\n", "lr_parser", ".", "add_argument", "(", "'--warm_up_epochs'", ",", "\n", "default", "=", "0", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'learning rate decaystep'", ")", "\n", "lr_parser", ".", "add_argument", "(", "'--prepassmepochs'", ",", "\n", "default", "=", "10", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'learning rate decaystep'", ")", "\n", "lr_parser", ".", "add_argument", "(", "'--baseline_lr'", ",", "\n", "default", "=", "0.1", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "'baseline learning rate'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.args.add_averaging_args": [[199, 205], ["parser.add_argument_group", "parser.add_argument_group.add_argument"], "function", ["None"], ["", "def", "add_averaging_args", "(", "parser", ")", ":", "\n", "    ", "averaging_parser", "=", "parser", ".", "add_argument_group", "(", "title", "=", "'averaging args'", ")", "\n", "averaging_parser", ".", "add_argument", "(", "'--averaging_freq'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "4", ",", "\n", "help", "=", "'averaging interval in seconds'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.args.add_passm_args": [[207, 229], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["", "def", "add_passm_args", "(", "parser", ")", ":", "\n", "    ", "passm_parser", "=", "parser", ".", "add_argument_group", "(", "title", "=", "'passm arguments'", ")", "\n", "passm_parser", ".", "add_argument", "(", "\n", "'--pre_passm_epochs'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'The number of epochs in pre PASSM phase for PostPASSM'", ")", "\n", "passm_parser", ".", "add_argument", "(", "'--assmswitchepochs'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "[", "50", ",", "150", ",", "180", ",", "225", ",", "250", "]", ",", "\n", "help", "=", "'learning rate decaystep'", ")", "\n", "passm_parser", ".", "add_argument", "(", "'--no_assms_pre_passm'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'used for postPassM training'", ")", "\n", "\n", "passm_parser", ".", "add_argument", "(", "'--dampen_for_passm'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'used for PassM training'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.args.add_common_args": [[231, 363], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["", "def", "add_common_args", "(", "parser", ")", ":", "\n", "    ", "common_parser", "=", "parser", ".", "add_argument_group", "(", "title", "=", "'common arguments'", ")", "\n", "common_parser", ".", "add_argument", "(", "'--gpus'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "1", "]", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'GPU ranks'", ")", "\n", "common_parser", ".", "add_argument", "(", "'--lr'", ",", "\n", "default", "=", "0.1", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "'learning rate'", ")", "\n", "common_parser", ".", "add_argument", "(", "'--momentum'", ",", "\n", "default", "=", "0.9", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "'momentum'", ")", "\n", "common_parser", ".", "add_argument", "(", "'--nesterov'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'nesterov momentum'", ")", "\n", "common_parser", ".", "add_argument", "(", "'--dampening'", ",", "\n", "default", "=", "0", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "'momentum dampening'", ")", "\n", "common_parser", ".", "add_argument", "(", "'--weight-decay'", ",", "\n", "default", "=", "5e-4", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "'L2 weight decay'", ")", "\n", "common_parser", ".", "add_argument", "(", "'--beta'", ",", "\n", "default", "=", "0.5", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "'randBeta probab'", ")", "\n", "common_parser", ".", "add_argument", "(", "\n", "'--model'", ",", "\n", "default", "=", "'res20'", ",", "\n", "help", "=", "'Neural Netowk Model'", ",", "\n", "choices", "=", "[", "\n", "'small'", ",", "'ldense'", ",", "'vgg11'", ",", "'vgg13'", ",", "'vgg19'", ",", "'res18'", ",", "'res20'", ",", "\n", "'res34'", ",", "'res32'", ",", "'res50'", ",", "'efficientnetb0'", ",", "'efficientnetb1'", ",", "\n", "'efficientnetb2'", ",", "'efficientnetb3'", ",", "'wnet34'", ",", "'wnet50'", ",", "'wnet22'", ",", "\n", "'wnet28'", ",", "'wnet168'", ",", "'rnet18x2'", ",", "'rnet50x2'", ",", "'densenet121'", ",", "\n", "'mobilenetv2'", ",", "'mobilenetv3l'", ",", "'mobilenetv3s'", ",", "'shufflenet'", ",", "\n", "'resnext50'", ",", "'densenet169'", ",", "'squuezenet'", ",", "'nasnet'", "\n", "]", ")", "\n", "common_parser", ".", "add_argument", "(", "\n", "'--dataset'", ",", "\n", "default", "=", "'cifar10'", ",", "\n", "help", "=", "'Dataset type'", ",", "\n", "choices", "=", "[", "'cifar10'", ",", "'cifar100'", ",", "'mnist'", ",", "'imagenet'", ",", "'catdog'", "]", ")", "\n", "common_parser", ".", "add_argument", "(", "'--num-classes'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1000", ",", "\n", "metavar", "=", "'NC'", ",", "\n", "help", "=", "'Number of classes'", ")", "\n", "common_parser", ".", "add_argument", "(", "'--training-type'", ",", "\n", "default", "=", "'ddp'", ",", "\n", "help", "=", "'Training algorithms type'", ",", "\n", "choices", "=", "[", "'MBSGD'", ",", "'PLSGD'", ",", "'LAPSGD'", ",", "'LPPSGD'", "]", ")", "\n", "common_parser", ".", "add_argument", "(", "'--train_processing_bs'", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "common_parser", ".", "add_argument", "(", "'--test_processing_bs'", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "common_parser", ".", "add_argument", "(", "'--bs_multiple'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "common_parser", ".", "add_argument", "(", "'--test_bs_multiple'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "common_parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "common_parser", ".", "add_argument", "(", "'--pre_post_epochs'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "common_parser", ".", "add_argument", "(", "'--test-freq'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "common_parser", ".", "add_argument", "(", "'--tb-interval'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "common_parser", ".", "add_argument", "(", "'--num_tags'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "common_parser", ".", "add_argument", "(", "'--seed'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "common_parser", ".", "add_argument", "(", "\n", "'--num-processes'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "2", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'how many training processes to use (default: 2)'", ")", "\n", "common_parser", ".", "add_argument", "(", "'--num-threads'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "2", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'how many threads to use (default: 2)'", ")", "\n", "common_parser", ".", "add_argument", "(", "\n", "'--workers'", ",", "\n", "default", "=", "0", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of data loading workers (default: 0)'", ")", "\n", "common_parser", ".", "add_argument", "(", "'--partition'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "'used for sparsified training'", ")", "\n", "common_parser", ".", "add_argument", "(", "'--cuda'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'enables CUDA training'", ")", "\n", "common_parser", ".", "add_argument", "(", "'--lars'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'enables LARS training'", ")", "\n", "common_parser", ".", "add_argument", "(", "'--distributed'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'enables training on multiple GPUs'", ")", "\n", "common_parser", ".", "add_argument", "(", "'--dataparallel'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'enables CUDA training'", ")", "\n", "common_parser", ".", "add_argument", "(", "'--pm'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'enables memory-pinning'", ")", "\n", "common_parser", ".", "add_argument", "(", "'--no-progressbar'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'do not show progressbar'", ")", "\n", "common_parser", ".", "add_argument", "(", "'--storeresults'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'enables storing the results'", ")", "\n", "common_parser", ".", "add_argument", "(", "'--debug'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'debug'", ")", "\n", "common_parser", ".", "add_argument", "(", "'--clean-start'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'do test'", ")", "\n", "common_parser", ".", "add_argument", "(", "'--resume'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'resume from checkpoint'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.args.prepare_experiment": [[365, 377], ["argparse.ArgumentParser", "args.add_common_args", "args.add_dist_args", "args.add_lr_args", "args.add_sys_args", "args.add_averaging_args", "args.add_passm_args", "argparse.ArgumentParser.parse_args", "args.prepare_args"], "function", ["home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.args.add_common_args", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.args.add_dist_args", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.args.add_lr_args", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.args.add_sys_args", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.args.add_averaging_args", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.args.add_passm_args", "home.repos.pwc.inspect_result.bapi_lpp-sgd.utilities.args.prepare_args"], ["", "def", "prepare_experiment", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'CNN Training'", ")", "\n", "add_common_args", "(", "parser", ")", "\n", "add_dist_args", "(", "parser", ")", "\n", "add_lr_args", "(", "parser", ")", "\n", "add_sys_args", "(", "parser", ")", "\n", "add_averaging_args", "(", "parser", ")", "\n", "add_passm_args", "(", "parser", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "prepare_args", "(", "args", ")", "\n", "return", "args", "\n", "", ""]]}