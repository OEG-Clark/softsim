{"home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_plots.smoother": [[36, 42], ["numpy.linspace", "scipy.interpolate.make_interp_spline", "scipy.interpolate.make_interp_spline.", "numpy.min", "numpy.max", "range", "len"], "function", ["None"], ["def", "smoother", "(", "x", ",", "space", ",", "points", "=", "300", ")", ":", "\n", "    ", "xnew", "=", "np", ".", "linspace", "(", "np", ".", "min", "(", "space", ")", ",", "np", ".", "max", "(", "space", ")", ",", "points", ")", "\n", "spl", "=", "make_interp_spline", "(", "range", "(", "len", "(", "x", ")", ")", ",", "x", ",", "k", "=", "3", ")", "\n", "power_smooth", "=", "spl", "(", "xnew", ")", "\n", "\n", "return", "xnew", ",", "power_smooth", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_plots.moving_average": [[44, 57], ["numpy.zeros_like", "range", "max", "min", "numpy.mean"], "function", ["None"], ["", "def", "moving_average", "(", "x", ",", "n", "=", "3", ")", ":", "\n", "    ", "out", "=", "np", ".", "zeros_like", "(", "x", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "dim_len", "=", "x", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "dim_len", ")", ":", "\n", "        ", "if", "n", "%", "2", "==", "0", ":", "\n", "            ", "a", ",", "b", "=", "i", "-", "(", "n", "-", "1", ")", "//", "2", ",", "i", "+", "(", "n", "-", "1", ")", "//", "2", "+", "2", "\n", "", "else", ":", "\n", "            ", "a", ",", "b", "=", "i", "-", "(", "n", "-", "1", ")", "//", "2", ",", "i", "+", "(", "n", "-", "1", ")", "//", "2", "+", "1", "\n", "\n", "", "a", "=", "max", "(", "0", ",", "a", ")", "\n", "b", "=", "min", "(", "dim_len", ",", "b", ")", "\n", "out", "[", "i", "]", "=", "np", ".", "mean", "(", "x", "[", "a", ":", "b", "]", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_plots.unbalanced_mean_std": [[59, 78], ["len", "numpy.zeros", "enumerate", "numpy.asarray", "max", "m.append", "std.append", "numpy.asarray", "numpy.asarray", "len", "numpy.mean", "numpy.std", "len"], "function", ["None"], ["", "def", "unbalanced_mean_std", "(", "x", ")", ":", "\n", "    ", "m", "=", "[", "]", "\n", "std", "=", "[", "]", "\n", "\n", "mx", "=", "len", "(", "max", "(", "x", ",", "key", "=", "len", ")", ")", "\n", "\n", "res", "=", "np", ".", "zeros", "(", "(", "len", "(", "x", ")", ",", "mx", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "\n", "for", "i", ",", "r", "in", "enumerate", "(", "x", ")", ":", "\n", "        ", "res", "[", "i", ",", ":", "len", "(", "r", ")", "]", "=", "r", "\n", "\n", "", "res", "=", "np", ".", "asarray", "(", "res", ")", "\n", "\n", "for", "i", "in", "res", ".", "T", ":", "\n", "        ", "v", "=", "[", "_v", "for", "_v", "in", "i", "if", "_v", ">", "0", "]", "\n", "m", ".", "append", "(", "np", ".", "mean", "(", "v", ")", ")", "\n", "std", ".", "append", "(", "np", ".", "std", "(", "v", ")", ")", "\n", "\n", "", "return", "np", ".", "asarray", "(", "m", ")", ",", "np", ".", "asarray", "(", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_plots.get_dataset": [[80, 149], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.transforms.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torchvision.transforms.transforms.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.transforms.transforms.Compose", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "int", "numpy.random.choice", "torch.utils.data.SubsetRandomSampler", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize", "tr.insert", "tr.append", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize", "tr.insert", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize", "tr.insert", "torchvision.transforms.transforms.Resize", "torchvision.transforms.transforms.Resize", "torchvision.transforms.transforms.Resize", "len"], "function", ["None"], ["", "def", "get_dataset", "(", "name", ",", "batch_size", ",", "dev_split", ",", "resize", "=", "None", ",", "train_subset", "=", "0", ")", ":", "\n", "    ", "if", "name", "in", "[", "'fMNIST'", ",", "'MNIST'", "]", ":", "\n", "\n", "        ", "tr", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "]", "\n", "\n", "if", "resize", "is", "not", "None", ":", "\n", "            ", "tr", ".", "insert", "(", "0", ",", "transforms", ".", "Resize", "(", "resize", ")", ")", "\n", "\n", "", "if", "name", "==", "\"fMNIST\"", ":", "\n", "            ", "tr", ".", "append", "(", "torch", ".", "flatten", ")", "\n", "\n", "", "image_transform", "=", "transforms", ".", "Compose", "(", "tr", ")", "\n", "\n", "train_split", "=", "datasets", ".", "MNIST", "(", "'./Datasets/MNIST'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "transform", "=", "image_transform", ")", "\n", "test_split", "=", "datasets", ".", "MNIST", "(", "'./Datasets/MNIST'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "\n", "transform", "=", "image_transform", ")", "\n", "\n", "sample", "=", "train_split", "[", "0", "]", "[", "0", "]", "\n", "classes", "=", "10", "\n", "\n", "", "if", "name", "==", "'CIFAR10'", ":", "\n", "        ", "tr", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.247", ",", "0.243", ",", "0.261", ")", ")", "]", "\n", "\n", "if", "resize", "is", "not", "None", ":", "\n", "            ", "tr", ".", "insert", "(", "0", ",", "transforms", ".", "Resize", "(", "resize", ")", ")", "\n", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "tr", ")", "\n", "\n", "train_split", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./Datasets/CIFAR10'", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "\n", "test_split", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./Datasets/CIFAR10'", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "classes", "=", "10", "\n", "sample", "=", "train_split", "[", "0", "]", "[", "0", "]", "\n", "\n", "", "if", "name", "==", "'CIFAR100'", ":", "\n", "        ", "tr", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5071", ",", "0.4867", ",", "0.4408", ")", ",", "(", "0.2675", ",", "0.2565", ",", "0.2761", ")", ")", "]", "\n", "\n", "if", "resize", "is", "not", "None", ":", "\n", "            ", "tr", ".", "insert", "(", "0", ",", "transforms", ".", "Resize", "(", "resize", ")", ")", "\n", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "tr", ")", "\n", "\n", "train_split", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "root", "=", "'./Datasets/CIFAR100'", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "\n", "test_split", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "root", "=", "'./Datasets/CIFAR100'", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "classes", "=", "100", "\n", "sample", "=", "train_split", "[", "0", "]", "[", "0", "]", "\n", "\n", "", "sampler", "=", "None", "\n", "shuffle", "=", "True", "\n", "\n", "if", "train_subset", ">", "0", ":", "\n", "        ", "train_size", "=", "int", "(", "train_subset", "*", "len", "(", "train_split", ")", ")", "\n", "idx", "=", "np", ".", "random", ".", "choice", "(", "train_split", ".", "data", ".", "shape", "[", "0", "]", ",", "train_size", ",", "replace", "=", "False", ")", "\n", "sampler", "=", "SubsetRandomSampler", "(", "idx", ")", "\n", "shuffle", "=", "False", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_split", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ",", "sampler", "=", "sampler", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_split", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "return", "sample", ",", "classes", ",", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_plots.plot_test": [[151, 217], ["zip", "matplotlib.subplots", "matplotlib.subplots", "range", "ax_corr.boxplot", "ax_wro.boxplot", "ax_wro.grid", "ax_wro.set_xlabel", "ax_wro.set_xticklabels", "ax_corr.grid", "ax_corr.set_xlabel", "ax_corr.set_xticklabels", "fig_corr.savefig", "fig_wro.savefig", "matplotlib.close", "tot_scores.append", "len", "numpy.asarray", "numpy.asarray", "cm.append", "wm.append", "scores.append", "scores_keep.append", "os.path.join", "os.path.join", "len", "scores.append", "scores_keep.append", "len", "len", "numpy.quantile", "len", "len", "len", "numpy.quantile", "numpy.quantile"], "function", ["None"], ["", "def", "plot_test", "(", "exps", ",", "tests", ",", "path", ",", "type", "=", "'uncertainty'", ",", "whist", "=", "2", ")", ":", "\n", "    ", "tot_scores", "=", "[", "]", "\n", "\n", "for", "d", ",", "t", "in", "zip", "(", "exps", ",", "tests", ")", ":", "\n", "        ", "fig_corr", ",", "ax_corr", "=", "plt", ".", "subplots", "(", "nrows", "=", "1", ")", "\n", "fig_wro", ",", "ax_wro", "=", "plt", ".", "subplots", "(", "nrows", "=", "1", ")", "\n", "\n", "cm", ",", "cv", "=", "[", "]", ",", "[", "]", "\n", "wm", ",", "wv", "=", "[", "]", ",", "[", "]", "\n", "\n", "scores_keep", "=", "[", "]", "\n", "scores", "=", "[", "]", "\n", "\n", "if", "t", "is", "None", ":", "\n", "            ", "continue", "\n", "\n", "", "threshold", "=", "np", ".", "inf", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "t", "[", "0", "]", ")", ")", ":", "\n", "\n", "            ", "c", ",", "w", "=", "t", "[", "0", "]", "[", "i", "]", ",", "t", "[", "1", "]", "[", "i", "]", "\n", "c", "=", "np", ".", "asarray", "(", "c", ")", "\n", "w", "=", "np", ".", "asarray", "(", "w", ")", "\n", "\n", "score", "=", "len", "(", "c", ")", "/", "(", "len", "(", "c", ")", "+", "len", "(", "w", ")", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                ", "threshold", "=", "np", ".", "quantile", "(", "c", ",", "0.75", ")", "+", "whist", "*", "(", "np", ".", "quantile", "(", "c", ",", "0.75", ")", "-", "np", ".", "quantile", "(", "c", ",", "0.25", ")", ")", "\n", "\n", "", "cm", ".", "append", "(", "c", ")", "\n", "wm", ".", "append", "(", "w", ")", "\n", "\n", "keep_score", "=", "score", "\n", "if", "i", ">", "0", ":", "\n", "                ", "keep_c", "=", "[", "k", "for", "k", "in", "c", "if", "k", ">", "threshold", "]", "\n", "keep_w", "=", "[", "k", "for", "k", "in", "w", "if", "k", ">", "threshold", "]", "\n", "keep_score", "=", "len", "(", "keep_c", ")", "/", "(", "len", "(", "keep_w", ")", "+", "len", "(", "keep_c", ")", ")", "\n", "\n", "scores", ".", "append", "(", "score", ")", "\n", "scores_keep", ".", "append", "(", "keep_score", ")", "\n", "\n", "", "scores", ".", "append", "(", "score", ")", "\n", "scores_keep", ".", "append", "(", "keep_score", ")", "\n", "\n", "", "bp", "=", "ax_corr", ".", "boxplot", "(", "cm", ",", "showfliers", "=", "False", ",", "whis", "=", "whist", ")", "\n", "bp", "=", "ax_wro", ".", "boxplot", "(", "wm", ",", "showfliers", "=", "False", ",", "whis", "=", "whist", ")", "\n", "\n", "ax_wro", ".", "grid", "(", "True", ",", "color", "=", "\"0.9\"", ",", "linestyle", "=", "'--'", ",", "linewidth", "=", "1", ")", "\n", "ax_wro", ".", "set_xlabel", "(", "r'$\\epsilon$'", ",", "size", "=", "50", ")", "\n", "ax_wro", ".", "set_xticklabels", "(", "ANN", ".", "Trainer", ".", "epsilons", ",", "fontsize", "=", "8", ")", "\n", "\n", "ax_corr", ".", "grid", "(", "True", ",", "color", "=", "\"0.9\"", ",", "linestyle", "=", "'--'", ",", "linewidth", "=", "1", ")", "\n", "ax_corr", ".", "set_xlabel", "(", "r'$\\epsilon$'", ",", "size", "=", "50", ")", "\n", "ax_corr", ".", "set_xticklabels", "(", "ANN", ".", "Trainer", ".", "epsilons", ",", "fontsize", "=", "8", ")", "\n", "\n", "fig_corr", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"{}_{}_correct.pdf\"", ".", "format", "(", "d", "[", "'label'", "]", ",", "type", ")", ")", ",", "\n", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "\n", "fig_wro", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"{}_{}_wrong.pdf\"", ".", "format", "(", "d", "[", "'label'", "]", ",", "type", ")", ")", ",", "\n", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "\n", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n", "tot_scores", ".", "append", "(", "(", "scores", ",", "scores_keep", ")", ")", "\n", "return", "scores", ",", "scores_keep", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_plots.uncertainty_test": [[219, 259], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "len", "enumerate", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "numpy.quantile", "len", "numpy.quantile", "numpy.quantile"], "function", ["None"], ["", "", "def", "uncertainty_test", "(", "exps", ",", "tests", ",", "whists", "=", "None", ")", ":", "\n", "\n", "    ", "threshold", "=", "np", ".", "inf", "\n", "if", "whists", "is", "None", ":", "\n", "        ", "whists", "=", "[", "None", ",", "0.25", ",", "0.5", ",", "0.75", ",", "1", ",", "2", ",", "2", ",", "2.5", "]", "\n", "\n", "", "discard", "=", "np", ".", "zeros", "(", "(", "len", "(", "tests", "[", "0", "]", ")", ",", "len", "(", "whists", ")", ")", ")", "\n", "keep", "=", "np", ".", "zeros", "(", "(", "len", "(", "tests", "[", "0", "]", ")", ",", "len", "(", "whists", ")", ")", ")", "\n", "scores", "=", "np", ".", "zeros", "(", "(", "len", "(", "tests", "[", "0", "]", ")", ",", "len", "(", "whists", ")", ")", ")", "\n", "\n", "for", "eps", "in", "range", "(", "len", "(", "tests", "[", "0", "]", ")", ")", ":", "\n", "\n", "        ", "for", "j", ",", "whist", "in", "enumerate", "(", "whists", ")", ":", "\n", "            ", "c", ",", "w", "=", "tests", "[", "0", "]", "[", "eps", "]", ",", "tests", "[", "1", "]", "[", "eps", "]", "\n", "\n", "if", "whist", "is", "None", ":", "\n", "                ", "threshold", "=", "0", "\n", "", "else", ":", "\n", "                ", "threshold", "=", "np", ".", "quantile", "(", "c", ",", "0.75", ")", "+", "whist", "*", "(", "np", ".", "quantile", "(", "c", ",", "0.75", ")", "-", "np", ".", "quantile", "(", "c", ",", "0.25", ")", ")", "\n", "# else:", "\n", "", "all", "=", "c", "+", "w", "\n", "\n", "_disc", "=", "[", "k", "for", "k", "in", "all", "if", "k", ">", "threshold", "]", "\n", "_keep", "=", "[", "k", "for", "k", "in", "all", "if", "k", "<=", "threshold", "]", "\n", "\n", "discard", "[", "eps", ",", "j", "]", "=", "len", "(", "_disc", ")", "\n", "keep", "[", "eps", ",", "j", "]", "=", "len", "(", "_keep", ")", "\n", "\n", "keep_c", "=", "[", "k", "for", "k", "in", "c", "if", "k", "<=", "threshold", "]", "\n", "keep_w", "=", "[", "k", "for", "k", "in", "w", "if", "k", "<=", "threshold", "]", "\n", "div", "=", "len", "(", "keep_w", ")", "+", "len", "(", "keep_c", ")", "\n", "\n", "if", "div", "==", "0", ":", "\n", "                ", "keep_score", "=", "0", "\n", "", "else", ":", "\n", "                ", "keep_score", "=", "len", "(", "keep_c", ")", "/", "div", "\n", "\n", "", "scores", "[", "eps", ",", "j", "]", "=", "keep_score", "\n", "\n", "", "", "return", "keep", ",", "discard", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_plots.main": [[261, 779], ["itertools.cycle", "matplotlib.get_cmap", "iter", "matplotlib.close", "os.path.join", "enumerate", "matplotlib.figure", "range", "matplotlib.legend", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.savefig", "matplotlib.close", "numpy.asarray", "numpy.asarray", "range", "os.path.exists", "os.makedirs", "print", "data.get", "data.get", "data.get", "data.get", "data[].lower", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "isinstance", "tqdm.tqdm", "np.asarray.append", "np.asarray.append", "all_fgsm_entropy_results.append", "all_fgsm_results.append", "experiments_results.append", "os.path.join", "range", "range", "numpy.asarray", "numpy.mean", "numpy.std", "numpy.asarray", "numpy.mean", "numpy.std", "range", "len", "classification_plots.unbalanced_mean_std", "matplotlib.plot", "matplotlib.fill_between", "os.path.join", "open", "csv.writer", "csv.writer.writerow", "range", "len", "os.path.join", "matplotlib.subplots", "axs.text", "f.set_figheight", "f.set_figwidth", "bars.mean", "numpy.std", "numpy.linspace", "axs.grid", "axs.plot", "axs.bar", "axs.bar", "axs.bar", "axs.bar", "axs.set_xlim", "axs.set_ylim", "axs.set_xlabel", "axs.set_ylabel", "f.legend", "f.savefig", "matplotlib.close", "next", "ValueError", "ValueError", "next", "enumerate", "torch.manual_seed", "numpy.random.seed", "random.seed", "base_model", "base_model.to", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "trainer", "run_results.append", "trainer.model.load_state_dict", "run_results.append", "local_reliability.append", "local_bars.append", "_fgsm_entropy.append", "_fgsm.append", "os.path.exists", "os.makedirs", "len", "np.asarray.append", "np.asarray.append", "len", "len", "numpy.mean", "numpy.std", "classification_plots.smoother", "classification_plots.smoother", "matplotlib.subplots", "f.set_figheight", "f.set_figwidth", "axs.plot", "axs.fill_between", "axs.set_xticks", "axs.set_xticklabels", "axs.set_xlabel", "axs.set_ylabel", "axs.margins", "axs.grid", "f.savefig", "matplotlib.subplots", "f.set_figheight", "f.set_figwidth", "classification_plots.smoother", "classification_plots.smoother", "axs.plot", "axs.fill_between", "classification_plots.smoother", "classification_plots.smoother", "axs.plot", "axs.fill_between", "axs.set_xticks", "axs.set_xticklabels", "axs.set_xlabel", "axs.set_ylabel", "axs.margins", "axs.get_ylim", "axs.set_ylim", "axs.grid", "f.legend", "f.savefig", "matplotlib.subplots", "f.set_figheight", "f.set_figwidth", "classification_plots.smoother", "classification_plots.smoother", "classification_plots.smoother", "classification_plots.smoother", "axs.plot", "axs.fill_between", "axs.plot", "axs.fill_between", "axs.set_xticks", "axs.set_xticklabels", "axs.margins", "axs.set_xlabel", "axs.set_ylabel", "axs.grid", "axs.get_ylim", "axs.set_ylim", "f.legend", "f.savefig", "matplotlib.close", "range", "range", "os.path.join", "len", "classification_plots.unbalanced_mean_std", "numpy.argmax", "eces.append", "csv.writer.writerow", "os.path.exists", "os.makedirs", "len", "len", "os.path.join", "torch.cuda.is_available", "data.get", "len", "ValueError", "classification_plots.get_dataset", "os.makedirs", "os.makedirs", "os.path.join", "torch.load", "torch.load", "os.path.exists", "open", "pickle.load", "open", "pickle.load", "os.path.join", "os.path.exists", "numpy.concatenate", "hists.append", "all_ws.append", "matplotlib.close", "matplotlib.subplots", "fig.set_figheight", "fig.set_figwidth", "enumerate", "ax.grid", "ax.set_ylabel", "ax.margins", "ax.set_xlim", "ax.get_ylim", "ax.set_ylim", "fig.savefig", "matplotlib.close", "e.get", "d[].replace", "classification_plots.uncertainty_test", "classification_plots.uncertainty_test", "os.path.join", "os.path.join", "os.path.join", "len", "d.get", "len", "[].replace", "dict", "dict", "dict", "os.path.exists", "os.path.exists", "os.path.join", "os.path.join", "os.path.join", "isinstance", "numpy.linspace", "scipy.stats.gaussian_kde", "scipy.stats.gaussian_kde._compute_covariance", "matplotlib.plot", "os.path.join", "numpy.mean", "numpy.std", "d.get", "d.get", "numpy.round", "open", "pickle.load", "labels.append", "numpy.abs", "w.sigma.detach().cpu().numpy", "np.concatenate.append", "wc.extend", "ws.append", "numpy.abs", "scipy.stats.gaussian_kde.", "numpy.mean", "numpy.std", "numpy.min", "numpy.mean", "numpy.std", "numpy.min", "w.mu.detach().cpu().numpy", "numpy.reshape", "numpy.reshape", "numpy.abs", "b.sigma.detach().cpu().numpy", "np.concatenate.append", "wc.extend", "numpy.min", "numpy.max", "isinstance", "w.sigma.detach().cpu", "w.weights.detach().cpu().numpy", "b.mu.detach().cpu().numpy", "numpy.reshape", "numpy.reshape", "numpy.min", "numpy.max", "w.mu.detach().cpu", "b.sigma.detach().cpu", "b.weights.detach().cpu().numpy", "w.sigma.detach", "w.weights.detach().cpu", "b.mu.detach().cpu", "w.mu.detach", "b.sigma.detach", "b.weights.detach().cpu", "w.weights.detach", "b.mu.detach", "b.weights.detach"], "function", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_plots.unbalanced_mean_std", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_plots.smoother", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_plots.smoother", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_plots.smoother", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_plots.smoother", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_plots.smoother", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_plots.smoother", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_plots.smoother", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_plots.smoother", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_plots.smoother", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_plots.smoother", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_plots.unbalanced_mean_std", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_training.get_dataset", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_plots.uncertainty_test", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_plots.uncertainty_test"], ["", "def", "main", "(", "experiment", ")", ":", "\n", "    ", "import", "tqdm", "as", "tqdm", "\n", "\n", "import", "BBB", "\n", "import", "BMMD", "\n", "\n", "import", "os", "\n", "import", "numpy", "as", "np", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n", "NetworkTypes", "=", "[", "'bbb'", ",", "'mmd'", ",", "'normal'", ",", "'dropout'", "]", "\n", "Datasets", "=", "[", "'fMNIST'", ",", "'MNIST'", ",", "'CIFAR10'", ",", "'CIFAR100'", "]", "\n", "\n", "linestyles", "=", "[", "'--'", ",", "'-.'", ",", "'-'", ",", "':'", "]", "\n", "\n", "linestyles_cicle", "=", "cycle", "(", "linestyles", ")", "\n", "\n", "experiments_results", "=", "[", "]", "\n", "all_fgsm_results", "=", "[", "]", "\n", "all_fgsm_entropy_results", "=", "[", "]", "\n", "all_reliability", "=", "[", "]", "\n", "all_bars", "=", "[", "]", "\n", "\n", "hists", "=", "[", "]", "\n", "all_ws", "=", "[", "]", "\n", "\n", "experiments_path", "=", "experiment", "[", "'experiments_path'", "]", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "experiments_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "experiments_path", ")", "\n", "\n", "", "experiments", "=", "experiment", "[", "'experiments'", "]", "\n", "\n", "cm", "=", "plt", ".", "get_cmap", "(", "'tab20'", ")", "\n", "cm", "=", "iter", "(", "cm", ".", "colors", ")", "\n", "\n", "for", "data", "in", "experiments", ":", "\n", "        ", "print", "(", "data", "[", "'save_path'", "]", ",", "data", "[", "'exp_name'", "]", ")", "\n", "\n", "if", "data", ".", "get", "(", "'skip'", ",", "False", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "batch_size", "=", "data", ".", "get", "(", "'batch_size'", ",", "64", ")", "\n", "topology", "=", "data", "[", "'topology'", "]", "\n", "weights_mu_init", "=", "data", ".", "get", "(", "'mu_init'", ",", "None", ")", "\n", "weights_rho_init", "=", "data", ".", "get", "(", "'rho_init'", ",", "None", ")", "\n", "dataset", "=", "data", "[", "\"dataset\"", "]", "\n", "network", "=", "data", "[", "\"network_type\"", "]", ".", "lower", "(", ")", "\n", "# experiments = data.get('experiments', 1)", "\n", "seeds", "=", "data", ".", "get", "(", "'experiments_seeds'", ",", "[", "0", "]", ")", "\n", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "data", ".", "get", "(", "'use_cuda'", ",", "True", ")", "else", "'cpu'", "\n", "save_path", "=", "data", "[", "'save_path'", "]", "\n", "load_path", "=", "data", ".", "get", "(", "'load_path'", ",", "save_path", ")", "\n", "\n", "test_samples", "=", "data", ".", "get", "(", "'test_samples'", ",", "2", ")", "\n", "exp_name", "=", "data", "[", "'exp_name'", "]", "\n", "seeds", "=", "[", "0", ",", "1", ",", "2", "]", "\n", "\n", "if", "'label'", "not", "in", "data", ":", "\n", "            ", "data", "[", "'label'", "]", "=", "exp_name", "\n", "\n", "", "if", "'linestyle'", "not", "in", "data", ":", "\n", "            ", "data", "[", "'linestyle'", "]", "=", "next", "(", "linestyles_cicle", ")", "\n", "\n", "", "save", "=", "data", "[", "'save'", "]", "\n", "load", "=", "data", "[", "'load'", "]", "\n", "dev_split", "=", "data", ".", "get", "(", "'dev_split'", ",", "0", ")", "\n", "local_trick", "=", "data", ".", "get", "(", "'local_trick'", ",", "False", ")", "\n", "# label = data.get(\"label\", network)", "\n", "network_parameters", "=", "data", ".", "get", "(", "'network_parameters'", ",", "{", "}", ")", "\n", "posterior_type", "=", "data", ".", "get", "(", "'posterior_type'", ",", "'weights'", ")", "\n", "moment", "=", "data", ".", "get", "(", "'moment'", ",", "0", ")", "\n", "early_stopping_tolerance", "=", "data", ".", "get", "(", "'early_stopping_tolerance'", ",", "5", ")", "\n", "resize", "=", "data", ".", "get", "(", "'resize'", ",", "None", ")", "\n", "weight_decay", "=", "data", ".", "get", "(", "'weight_decay'", ",", "0", ")", "\n", "lr_scheduler", "=", "data", ".", "get", "(", "'lr_scheduler'", ",", "None", ")", "\n", "\n", "train_subset", "=", "data", ".", "get", "(", "'train_subset'", ",", "0", ")", "\n", "# PRIORS", "\n", "\n", "if", "train_subset", "<", "0", "or", "train_subset", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'The train subset to sample needs be a percentage (> 0 and < 1)'", ")", "\n", "\n", "", "if", "isinstance", "(", "seeds", ",", "int", ")", ":", "\n", "            ", "seeds", "=", "[", "seeds", "]", "\n", "\n", "", "if", "network", "not", "in", "NetworkTypes", ":", "\n", "            ", "raise", "ValueError", "(", "'Supported networks'", ",", "NetworkTypes", ")", "\n", "", "else", ":", "\n", "            ", "if", "network", "==", "'mmd'", ":", "\n", "                ", "base_model", "=", "BMMD", ".", "BMMD", "\n", "trainer", "=", "BMMD", ".", "Trainer", "\n", "\n", "if", "'color'", "not", "in", "data", ":", "\n", "                    ", "data", "[", "'color'", "]", "=", "'red'", "\n", "\n", "", "", "elif", "network", "==", "'bbb'", ":", "\n", "                ", "base_model", "=", "BBB", ".", "BBB", "\n", "trainer", "=", "BBB", ".", "Trainer", "\n", "\n", "if", "'color'", "not", "in", "data", ":", "\n", "                    ", "data", "[", "'color'", "]", "=", "'green'", "\n", "\n", "", "", "elif", "network", "==", "'normal'", ":", "\n", "                ", "base_model", "=", "ANN", ".", "ANN", "\n", "trainer", "=", "ANN", ".", "Trainer", "\n", "\n", "if", "'color'", "not", "in", "data", ":", "\n", "                    ", "data", "[", "'color'", "]", "=", "'blue'", "\n", "\n", "", "", "elif", "network", "==", "'dropout'", ":", "\n", "                ", "base_model", "=", "DropoutNet", ".", "Dropnet", "\n", "trainer", "=", "DropoutNet", ".", "Trainer", "\n", "\n", "if", "'color'", "not", "in", "data", ":", "\n", "                    ", "data", "[", "'color'", "]", "=", "'k'", "\n", "\n", "", "", "", "if", "data", "[", "\"color\"", "]", "==", "\"\"", ":", "\n", "            ", "data", "[", "\"color\"", "]", "=", "next", "(", "cm", ")", "\n", "\n", "", "run_results", "=", "[", "]", "\n", "_fgsm", "=", "[", "]", "\n", "_fgsm_entropy", "=", "[", "]", "\n", "local_reliability", "=", "[", "]", "\n", "local_bars", "=", "[", "]", "\n", "\n", "for", "e", ",", "seed", "in", "tqdm", ".", "tqdm", "(", "enumerate", "(", "seeds", ")", ",", "total", "=", "len", "(", "seeds", ")", ")", ":", "\n", "\n", "            ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "if", "dataset", "not", "in", "Datasets", ":", "\n", "                ", "raise", "ValueError", "(", "'Supported datasets {}, given {}'", ".", "format", "(", "Datasets", ",", "dataset", ")", ")", "\n", "", "else", ":", "\n", "                ", "sample", ",", "classes", ",", "train_loader", ",", "test_loader", "=", "get_dataset", "(", "dataset", ",", "batch_size", ",", "\n", "dev_split", ",", "resize", ",", "train_subset", ")", "\n", "\n", "", "model", "=", "base_model", "(", "prior", "=", "None", ",", "mu_init", "=", "weights_mu_init", ",", "device", "=", "device", ",", "\n", "rho_init", "=", "weights_rho_init", ",", "topology", "=", "topology", ",", "classes", "=", "classes", ",", "local_trick", "=", "local_trick", ",", "\n", "sample", "=", "sample", ",", "**", "network_parameters", ",", "posterior_type", "=", "posterior_type", ")", "\n", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "current_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "exp_name", ")", "\n", "current_load_path", "=", "os", ".", "path", ".", "join", "(", "load_path", ",", "exp_name", ")", "\n", "\n", "results_path", "=", "os", ".", "path", ".", "join", "(", "current_path", ",", "'results_{}.data'", ".", "format", "(", "e", ")", ")", "\n", "best_path", "=", "os", ".", "path", ".", "join", "(", "current_path", ",", "'best_model_{}.data'", ".", "format", "(", "e", ")", ")", "\n", "\n", "if", "save", "and", "not", "os", ".", "path", ".", "exists", "(", "current_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "current_path", ")", "\n", "\n", "", "if", "load", "and", "not", "os", ".", "path", ".", "exists", "(", "current_load_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "current_load_path", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "current_load_path", ",", "'results_{}.data'", ".", "format", "(", "e", ")", ")", ")", ":", "\n", "                ", "results", "=", "torch", ".", "load", "(", "results_path", ")", "\n", "", "else", ":", "\n", "                ", "continue", "\n", "\n", "", "t", "=", "trainer", "(", "model", ",", "train_loader", ",", "test_loader", ",", "None", ")", "\n", "run_results", ".", "append", "(", "results", ")", "\n", "\n", "t", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "best_path", ")", ")", "\n", "run_results", ".", "append", "(", "results", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "current_path", ",", "\"{}_ece.data\"", ".", "format", "(", "e", ")", ")", ")", ":", "\n", "                ", "assert", "False", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "current_path", ",", "\"{}_ece.data\"", ".", "format", "(", "e", ")", ")", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "r", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "current_path", ",", "\"{}_ece_barplot.data\"", ".", "format", "(", "e", ")", ")", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "r1", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "local_reliability", ".", "append", "(", "r", ")", "\n", "local_bars", ".", "append", "(", "r1", ")", "\n", "\n", "fgsm_results", "=", "None", "\n", "fgsm_entropy_results", "=", "None", "\n", "\n", "if", "network", "!=", "'normal'", ":", "\n", "\n", "                ", "fgsm_path", "=", "os", ".", "path", ".", "join", "(", "current_path", ",", "'fgsm_{}.data'", ".", "format", "(", "e", ")", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "fgsm_path", ")", ":", "\n", "                    ", "with", "open", "(", "fgsm_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                        ", "fgsm_results", ",", "fgsm_entropy_results", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "                    ", "assert", "False", "\n", "\n", "", "", "_fgsm_entropy", ".", "append", "(", "fgsm_entropy_results", ")", "\n", "_fgsm", ".", "append", "(", "fgsm_results", ")", "\n", "\n", "ws", "=", "[", "]", "\n", "to_hist", "=", "[", "]", "\n", "\n", "if", "network", "in", "[", "'bbb'", ",", "'mmd'", "]", ":", "\n", "\n", "                ", "labels", "=", "[", "]", "\n", "for", "layer", "in", "t", ".", "model", ".", "features", ":", "\n", "                    ", "wc", "=", "[", "]", "\n", "if", "isinstance", "(", "layer", ",", "(", "BayesianLinearLayer", ",", "BayesianCNNLayer", ")", ")", ":", "\n", "                        ", "labels", ".", "append", "(", "'CNN'", "if", "isinstance", "(", "layer", ",", "BayesianCNNLayer", ")", "else", "'Linear'", ")", "\n", "\n", "w", "=", "layer", ".", "w", "\n", "b", "=", "layer", ".", "b", "\n", "\n", "mean", "=", "np", ".", "abs", "(", "w", ".", "mu", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "std", "=", "w", ".", "sigma", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "snr", "=", "mean", "/", "std", "\n", "to_hist", ".", "append", "(", "np", ".", "reshape", "(", "snr", ",", "-", "1", ")", ")", "\n", "wc", ".", "extend", "(", "np", ".", "reshape", "(", "w", ".", "weights", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "-", "1", ")", ")", "\n", "if", "b", "is", "not", "None", ":", "\n", "                            ", "mean", "=", "np", ".", "abs", "(", "b", ".", "mu", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "std", "=", "b", ".", "sigma", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "snr", "=", "mean", "/", "std", "\n", "to_hist", ".", "append", "(", "np", ".", "reshape", "(", "snr", ",", "-", "1", ")", ")", "\n", "\n", "wc", ".", "extend", "(", "np", ".", "reshape", "(", "b", ".", "weights", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "-", "1", ")", ")", "\n", "\n", "", "ws", ".", "append", "(", "wc", ")", "\n", "\n", "", "", "to_hist", "=", "np", ".", "concatenate", "(", "to_hist", ")", "\n", "hists", ".", "append", "(", "to_hist", ")", "\n", "all_ws", ".", "append", "(", "ws", ")", "\n", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "fig", ".", "set_figheight", "(", "3", ")", "\n", "fig", ".", "set_figwidth", "(", "4", ")", "\n", "\n", "for", "l", ",", "w", "in", "enumerate", "(", "ws", ")", ":", "\n", "                    ", "offset", "=", "np", ".", "abs", "(", "np", ".", "min", "(", "w", ")", "-", "np", ".", "max", "(", "w", ")", ")", "*", "0.1", "\n", "xs", "=", "np", ".", "linspace", "(", "np", ".", "min", "(", "w", ")", "-", "offset", ",", "np", ".", "max", "(", "w", ")", "+", "offset", ",", "200", ")", "\n", "density", "=", "gaussian_kde", "(", "w", ")", "\n", "density", ".", "_compute_covariance", "(", ")", "\n", "plt", ".", "plot", "(", "xs", ",", "density", "(", "xs", ")", ")", "\n", "\n", "", "ax", ".", "grid", "(", "True", ",", "alpha", "=", "0.2", ")", "\n", "ax", ".", "set_ylabel", "(", "'frequency'", ")", "\n", "ax", ".", "margins", "(", "y", "=", "0", ")", "\n", "ax", ".", "set_xlim", "(", "-", "0.5", ",", "0.5", ")", "\n", "\n", "mn", ",", "mx", "=", "ax", ".", "get_ylim", "(", ")", "\n", "ax", ".", "set_ylim", "(", "mn", ",", "mx", "+", "(", "mx", "*", "0.2", ")", ")", "\n", "\n", "fig", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "current_path", ",", "\"{}_{}_posterior.pdf\"", ".", "format", "(", "e", ",", "network", ")", ")", ",", "\n", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n", "", "", "all_reliability", ".", "append", "(", "local_reliability", ")", "\n", "all_bars", ".", "append", "(", "local_bars", ")", "\n", "\n", "all_fgsm_entropy_results", ".", "append", "(", "_fgsm_entropy", ")", "\n", "all_fgsm_results", ".", "append", "(", "_fgsm", ")", "\n", "experiments_results", ".", "append", "(", "run_results", ")", "\n", "\n", "", "experiments", "=", "[", "e", "for", "e", "in", "experiments", "if", "not", "e", ".", "get", "(", "'skip'", ",", "False", ")", "]", "\n", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n", "threshold_tests", "=", "os", ".", "path", ".", "join", "(", "experiments_path", ",", "'threshold_results'", ")", "\n", "whists", "=", "[", "None", ",", "0", ",", "0.1", ",", ".2", ",", "0.4", ",", "0.6", ",", "0.8", ",", "1", ",", "1.5", ",", "2", "]", "\n", "\n", "for", "j", ",", "d", "in", "enumerate", "(", "experiments", ")", ":", "\n", "\n", "        ", "if", "d", "[", "'network_type'", "]", "==", "'normal'", ":", "\n", "            ", "continue", "\n", "\n", "", "all_entropy", "=", "[", "]", "\n", "all_unc", "=", "[", "]", "\n", "\n", "_threshold_tests", "=", "os", ".", "path", ".", "join", "(", "threshold_tests", ",", "'{}'", ".", "format", "(", "d", "[", "'label'", "]", ".", "replace", "(", "'_'", ",", "' '", ")", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "_threshold_tests", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "_threshold_tests", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "all_fgsm_entropy_results", "[", "0", "]", ")", ")", ":", "\n", "            ", "_entropy", "=", "all_fgsm_entropy_results", "[", "j", "]", "[", "i", "]", "\n", "_uncertainty", "=", "all_fgsm_results", "[", "j", "]", "[", "i", "]", "\n", "\n", "all_entropy", ".", "append", "(", "uncertainty_test", "(", "experiments", ",", "_entropy", ",", "whists", "=", "whists", ")", ")", "\n", "all_unc", ".", "append", "(", "uncertainty_test", "(", "experiments", ",", "_uncertainty", ",", "whists", "=", "whists", ")", ")", "\n", "\n", "", "eps", "=", "Wrapper", ".", "epsilons", "\n", "whists", "=", "whists", "[", "1", ":", "]", "\n", "x", "=", "range", "(", "len", "(", "whists", ")", ")", "\n", "_x", "=", "x", "\n", "\n", "all_entropy", "=", "np", ".", "asarray", "(", "all_entropy", ")", "\n", "all_entropy_m", "=", "np", ".", "mean", "(", "all_entropy", ",", "0", ")", "\n", "all_entropy_std", "=", "np", ".", "std", "(", "all_entropy", ",", "0", ")", "\n", "\n", "all_unc", "=", "np", ".", "asarray", "(", "all_unc", ")", "\n", "all_unc_m", "=", "np", ".", "mean", "(", "all_unc", ",", "0", ")", "\n", "all_unc_std", "=", "np", ".", "std", "(", "all_unc", ",", "0", ")", "\n", "\n", "for", "e", "in", "range", "(", "1", ",", "len", "(", "eps", ")", ")", ":", "\n", "            ", "ep", "=", "eps", "[", "e", "]", "\n", "\n", "entr_disc", "=", "all_entropy_m", "[", "1", ",", "e", ",", "1", ":", "]", "\n", "entr_disc_std", "=", "all_entropy_std", "[", "1", ",", "e", ",", "1", ":", "]", "\n", "\n", "unc_disc", "=", "all_unc_m", "[", "1", ",", "e", ",", "1", ":", "]", "\n", "unc_disc_std", "=", "all_unc_std", "[", "1", ",", "e", ",", "1", ":", "]", "\n", "\n", "entr_score", "=", "all_entropy", "[", ":", ",", "2", ",", "e", ",", "1", ":", "]", "*", "100", "\n", "unsc_score", "=", "all_unc", "[", ":", ",", "2", ",", "e", ",", "1", ":", "]", "*", "100", "\n", "\n", "score_diff_m", "=", "np", ".", "mean", "(", "unsc_score", "-", "entr_score", ",", "0", ")", "\n", "score_diff_std", "=", "np", ".", "std", "(", "unsc_score", "-", "entr_score", ",", "0", ")", "\n", "\n", "_", ",", "score_diff_m", "=", "smoother", "(", "score_diff_m", ",", "_x", ")", "\n", "x1", ",", "score_diff_std", "=", "smoother", "(", "score_diff_std", ",", "_x", ")", "\n", "\n", "f", ",", "axs", "=", "plt", ".", "subplots", "(", "nrows", "=", "1", ",", "ncols", "=", "1", ")", "\n", "f", ".", "set_figheight", "(", "3", "*", "1", ")", "\n", "f", ".", "set_figwidth", "(", "4", "*", "1", ")", "\n", "\n", "axs", ".", "plot", "(", "x1", ",", "score_diff_m", ",", "label", "=", "'BCU - Entropy'", ",", "linestyle", "=", "'-'", ",", "color", "=", "'r'", ")", "\n", "axs", ".", "fill_between", "(", "x1", ",", "score_diff_m", "-", "score_diff_std", ",", "score_diff_m", "+", "score_diff_std", ",", "alpha", "=", "0.1", ",", "\n", "color", "=", "'r'", ")", "\n", "\n", "axs", ".", "set_xticks", "(", "x", ")", "\n", "axs", ".", "set_xticklabels", "(", "whists", ")", "\n", "\n", "axs", ".", "set_xlabel", "(", "r'$\\gamma$'", ")", "\n", "axs", ".", "set_ylabel", "(", "'BCU - Entropy (%)'", ")", "\n", "axs", ".", "margins", "(", "x", "=", "0", ")", "\n", "\n", "axs", ".", "grid", "(", "True", ",", "color", "=", "\"0.9\"", ",", "linestyle", "=", "'--'", ",", "linewidth", "=", "1", ")", "\n", "\n", "f", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "_threshold_tests", ",", "\"{}_score_difference.pdf\"", ".", "format", "(", "ep", ")", ")", ",", ")", "\n", "\n", "#######################################################################################################", "\n", "\n", "f", ",", "axs", "=", "plt", ".", "subplots", "(", "nrows", "=", "1", ",", "ncols", "=", "1", ")", "\n", "f", ".", "set_figheight", "(", "3", "*", "1", ")", "\n", "f", ".", "set_figwidth", "(", "4", "*", "1", ")", "\n", "\n", "x1", ",", "entr_disc", "=", "smoother", "(", "entr_disc", ",", "_x", ")", "\n", "_", ",", "entr_disc_std", "=", "smoother", "(", "entr_disc_std", ",", "_x", ")", "\n", "\n", "\n", "axs", ".", "plot", "(", "x1", ",", "entr_disc", ",", "label", "=", "'Entropy'", ",", "linestyle", "=", "'-'", ")", "\n", "axs", ".", "fill_between", "(", "x1", ",", "entr_disc", "-", "entr_disc_std", ",", "entr_disc", "+", "entr_disc_std", ",", "alpha", "=", "0.1", ")", "\n", "\n", "x1", ",", "unc_disc", "=", "smoother", "(", "unc_disc", ",", "_x", ")", "\n", "_", ",", "unc_disc_std", "=", "smoother", "(", "unc_disc_std", ",", "_x", ")", "\n", "\n", "axs", ".", "plot", "(", "x1", ",", "unc_disc", ",", "label", "=", "'BCU'", ",", "linestyle", "=", "'-.'", ")", "\n", "axs", ".", "fill_between", "(", "x1", ",", "unc_disc", "-", "unc_disc_std", ",", "unc_disc", "+", "unc_disc_std", ",", "alpha", "=", "0.1", ")", "\n", "\n", "axs", ".", "set_xticks", "(", "x", ")", "\n", "axs", ".", "set_xticklabels", "(", "whists", ")", "\n", "\n", "axs", ".", "set_xlabel", "(", "r'$\\gamma$'", ")", "\n", "axs", ".", "set_ylabel", "(", "'discarded images'", ")", "\n", "axs", ".", "margins", "(", "x", "=", "0", ")", "\n", "\n", "mn", ",", "mx", "=", "axs", ".", "get_ylim", "(", ")", "\n", "axs", ".", "set_ylim", "(", "mn", ",", "mx", "+", "(", "mx", "*", "0.2", ")", ")", "\n", "\n", "axs", ".", "grid", "(", "True", ",", "color", "=", "\"0.9\"", ",", "linestyle", "=", "'--'", ",", "linewidth", "=", "1", ")", "\n", "f", ".", "legend", "(", "bbox_to_anchor", "=", "(", "0.95", ",", "0.95", ")", ",", "ncol", "=", "2", ")", "\n", "\n", "f", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "_threshold_tests", ",", "\"{}_disc.pdf\"", ".", "format", "(", "ep", ")", ")", ",", ")", "\n", "\n", "#######################################################################################################", "\n", "\n", "f", ",", "axs", "=", "plt", ".", "subplots", "(", "nrows", "=", "1", ",", "ncols", "=", "1", ")", "\n", "f", ".", "set_figheight", "(", "3", "*", "1", ")", "\n", "f", ".", "set_figwidth", "(", "4", "*", "1", ")", "\n", "\n", "entr_score", "=", "all_entropy_m", "[", "2", ",", "e", ",", "1", ":", "]", "*", "100", "\n", "entr_std", "=", "all_entropy_std", "[", "2", ",", "e", ",", "1", ":", "]", "*", "100", "\n", "\n", "unsc_score", "=", "all_unc_m", "[", "2", ",", "e", ",", "1", ":", "]", "*", "100", "\n", "unc_std", "=", "all_unc_std", "[", "2", ",", "e", ",", "1", ":", "]", "*", "100", "\n", "\n", "x1", ",", "entr_score", "=", "smoother", "(", "entr_score", ",", "_x", ")", "\n", "_", ",", "entr_std", "=", "smoother", "(", "entr_std", ",", "_x", ")", "\n", "\n", "_", ",", "unsc_score", "=", "smoother", "(", "unsc_score", ",", "_x", ")", "\n", "_", ",", "unc_std", "=", "smoother", "(", "unc_std", ",", "_x", ")", "\n", "\n", "axs", ".", "plot", "(", "x1", ",", "entr_score", ",", "label", "=", "'Entropy'", ",", "linestyle", "=", "'-'", ")", "\n", "axs", ".", "fill_between", "(", "x1", ",", "entr_score", "-", "entr_std", ",", "entr_score", "+", "entr_std", ",", "alpha", "=", "0.1", ")", "\n", "\n", "axs", ".", "plot", "(", "x1", ",", "unsc_score", ",", "label", "=", "'BCU'", ",", "linestyle", "=", "'-.'", ")", "\n", "axs", ".", "fill_between", "(", "x1", ",", "unsc_score", "-", "unc_std", ",", "unsc_score", "+", "unc_std", ",", "alpha", "=", "0.1", ")", "\n", "\n", "axs", ".", "set_xticks", "(", "x", ")", "\n", "axs", ".", "set_xticklabels", "(", "whists", ")", "\n", "axs", ".", "margins", "(", "x", "=", "0", ")", "\n", "\n", "axs", ".", "set_xlabel", "(", "r'$\\gamma$'", ")", "\n", "axs", ".", "set_ylabel", "(", "'accuracy (%)'", ")", "\n", "\n", "axs", ".", "grid", "(", "True", ",", "color", "=", "\"0.9\"", ",", "linestyle", "=", "'--'", ",", "linewidth", "=", "1", ")", "\n", "\n", "mn", ",", "mx", "=", "axs", ".", "get_ylim", "(", ")", "\n", "axs", ".", "set_ylim", "(", "mn", ",", "mx", "+", "(", "mx", "*", "0.2", ")", ")", "\n", "f", ".", "legend", "(", "bbox_to_anchor", "=", "(", "0.95", ",", "0.95", ")", ",", "ncol", "=", "2", ")", "\n", "\n", "f", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "_threshold_tests", ",", "\"{}_score.pdf\"", ".", "format", "(", "ep", ")", ")", ",", ")", "\n", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n", "# Accuracy plot", "\n", "", "", "plt", ".", "figure", "(", "0", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "experiments", ")", ")", ":", "\n", "        ", "d", "=", "experiments", "[", "i", "]", "\n", "r", "=", "experiments_results", "[", "i", "]", "\n", "\n", "res", "=", "[", "i", "[", "'test_results'", "]", "for", "i", "in", "r", "]", "\n", "\n", "means", ",", "stds", "=", "unbalanced_mean_std", "(", "res", ")", "\n", "\n", "plt", ".", "plot", "(", "range", "(", "len", "(", "means", ")", ")", ",", "means", ",", "linestyle", "=", "d", "[", "'linestyle'", "]", ",", "\n", "label", "=", "d", ".", "get", "(", "'label'", ",", "d", "[", "'network_type'", "]", ")", ",", "c", "=", "d", "[", "'color'", "]", ",", "linewidth", "=", "2", ")", "\n", "\n", "plt", ".", "fill_between", "(", "range", "(", "len", "(", "means", ")", ")", ",", "means", "-", "stds", ",", "means", "+", "stds", ",", "alpha", "=", "0.1", ",", "color", "=", "d", "[", "'color'", "]", ")", "\n", "\n", "", "plt", ".", "legend", "(", ")", "\n", "\n", "plt", ".", "ylabel", "(", "\"Test score (%)\"", ")", "\n", "plt", ".", "xlabel", "(", "\"Epochs\"", ")", "\n", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "experiments_path", ",", "\"score.pdf\"", ")", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n", "# Results file writing", "\n", "\n", "all_reliability", "=", "np", ".", "asarray", "(", "all_reliability", ")", "\n", "all_bars", "=", "np", ".", "asarray", "(", "all_bars", ")", "\n", "eces", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "experiments_path", ",", "'results.csv'", ")", ",", "'w'", ",", "newline", "=", "''", ")", "as", "f", ":", "\n", "        ", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "writer", ".", "writerow", "(", "[", "\"exp_name\"", ",", "\"network\"", ",", "\"max_score\"", ",", "\"max_score_epoch\"", ",", "\"ece\"", ",", "\"scaled_ece\"", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "experiments", ")", ")", ":", "\n", "            ", "d", "=", "experiments", "[", "i", "]", "\n", "r", "=", "experiments_results", "[", "i", "]", "\n", "\n", "ece", "=", "all_reliability", "[", "i", ",", ":", ",", "0", "]", "*", "100", "\n", "scaled_ece", "=", "all_reliability", "[", "i", ",", ":", ",", "1", "]", "*", "100", "\n", "\n", "res", "=", "[", "i", "[", "'test_results'", "]", "for", "i", "in", "r", "]", "\n", "res", ",", "res_std", "=", "unbalanced_mean_std", "(", "res", ")", "\n", "\n", "res_i", "=", "np", ".", "argmax", "(", "res", ")", "\n", "\n", "eces", ".", "append", "(", "(", "np", ".", "mean", "(", "ece", ")", ",", "np", ".", "std", "(", "ece", ")", ")", ")", "\n", "\n", "writer", ".", "writerow", "(", "[", "d", ".", "get", "(", "'label'", ")", ",", "d", ".", "get", "(", "'network_type'", ")", ",", "\n", "'{} +- {}'", ".", "format", "(", "res", "[", "res_i", "]", "*", "100", ",", "res_std", "[", "res_i", "]", "*", "100", ")", ",", "\n", "res_i", ",", "\n", "'{} +- {} ({})'", ".", "format", "(", "np", ".", "mean", "(", "ece", ")", ",", "np", ".", "std", "(", "ece", ")", ",", "np", ".", "min", "(", "ece", ")", ")", ",", "\n", "'{} +- {} ({})'", ".", "format", "(", "np", ".", "mean", "(", "scaled_ece", ")", ",", "np", ".", "std", "(", "scaled_ece", ")", ",", "np", ".", "min", "(", "scaled_ece", ")", ")", "]", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "experiments", ")", ")", ":", "\n", "\n", "        ", "ece_txt", "=", "r'ECE: ${}\\pm{}$ %'", ".", "format", "(", "*", "[", "np", ".", "round", "(", "k", ",", "2", ")", "for", "k", "in", "eces", "[", "i", "]", "]", ")", "\n", "\n", "_save_path", "=", "os", ".", "path", ".", "join", "(", "experiments_path", ",", "'threshold_results'", ",", "'{}'", ".", "\n", "format", "(", "experiments", "[", "i", "]", "[", "'label'", "]", ".", "replace", "(", "'_'", ",", "' '", ")", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "_save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "_save_path", ")", "\n", "\n", "", "f", ",", "axs", "=", "plt", ".", "subplots", "(", "nrows", "=", "1", ",", "ncols", "=", "1", ")", "# , figsize=[4, 3])", "\n", "\n", "axs", ".", "text", "(", "0.55", ",", "0.05", ",", "ece_txt", ",", "transform", "=", "axs", ".", "transAxes", ",", "bbox", "=", "dict", "(", "boxstyle", "=", "'round'", ",", "facecolor", "=", "'w'", ",", "alpha", "=", "0.9", ")", ")", "\n", "\n", "f", ".", "set_figheight", "(", "3", "*", "1", ")", "\n", "f", ".", "set_figwidth", "(", "4", "*", "1", ")", "\n", "\n", "bars", "=", "all_bars", "[", "i", "]", "\n", "bars_m", "=", "bars", ".", "mean", "(", "0", ")", "\n", "bars_std", "=", "np", ".", "std", "(", "bars", ",", "0", ")", "\n", "\n", "width", "=", "1", "/", "len", "(", "bars_m", "[", "0", "]", ")", "\n", "\n", "x", "=", "np", ".", "linspace", "(", "0", "+", "width", "/", "2", ",", "1", "-", "width", "/", "2", ",", "len", "(", "bars_m", "[", "0", "]", ")", ")", "\n", "\n", "axs", ".", "grid", "(", "True", ",", "linestyle", "=", "'--'", ",", "linewidth", "=", "1", ",", "alpha", "=", "0.8", ")", "\n", "\n", "axs", ".", "plot", "(", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "linestyle", "=", "'-'", ",", "label", "=", "'Perfectly calibrated'", ",", "c", "=", "'k'", ",", "linewidth", "=", "1", ")", "\n", "\n", "axs", ".", "bar", "(", "x", ",", "bars_m", "[", "1", "]", ",", "width", "=", "width", ",", "yerr", "=", "bars_std", "[", "1", "]", ",", "fill", "=", "True", ",", "linewidth", "=", "0", ",", "color", "=", "'b'", ",", "edgecolor", "=", "'k'", ",", "\n", "error_kw", "=", "dict", "(", "lw", "=", "1", ",", "capsize", "=", "1", ",", "capthick", "=", "1", ")", ",", "alpha", "=", "0.8", ",", "zorder", "=", "3", ",", "label", "=", "'Outputs'", ")", "\n", "\n", "axs", ".", "bar", "(", "x", ",", "bars_m", "[", "1", "]", ",", "width", "=", "width", ",", "yerr", "=", "bars_std", "[", "1", "]", ",", "fill", "=", "False", ",", "linewidth", "=", "1", ",", "color", "=", "'k'", ",", "edgecolor", "=", "'k'", ",", "\n", "error_kw", "=", "dict", "(", "lw", "=", "1", ",", "capsize", "=", "1", ",", "capthick", "=", "1", ")", ",", "alpha", "=", "0.8", ",", "zorder", "=", "3", ")", "\n", "\n", "axs", ".", "bar", "(", "x", ",", "x", "-", "bars_m", "[", "1", "]", ",", "width", "=", "width", ",", "alpha", "=", "0.3", ",", "fill", "=", "True", ",", "linewidth", "=", "0", ",", "color", "=", "'r'", ",", "edgecolor", "=", "'k'", ",", "zorder", "=", "3", ",", "\n", "bottom", "=", "bars_m", "[", "1", "]", ",", "label", "=", "'Gap'", ")", "\n", "axs", ".", "bar", "(", "x", ",", "x", "-", "bars_m", "[", "1", "]", ",", "width", "=", "width", ",", "fill", "=", "False", ",", "linewidth", "=", "1", ",", "edgecolor", "=", "'darkred'", ",", "zorder", "=", "3", ",", "alpha", "=", "0.75", ",", "\n", "bottom", "=", "bars_m", "[", "1", "]", ")", "\n", "\n", "axs", ".", "set_xlim", "(", "0", ",", "1", ")", "\n", "axs", ".", "set_ylim", "(", "0", ",", "1", ")", "\n", "axs", ".", "set_xlabel", "(", "'confidence'", ")", "\n", "axs", ".", "set_ylabel", "(", "'accuracy'", ")", "\n", "\n", "f", ".", "legend", "(", "loc", "=", "'upper left'", ",", "bbox_to_anchor", "=", "(", "0.13", ",", "0.95", ")", ",", "framealpha", "=", "1", ")", "\n", "\n", "f", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "_save_path", ",", "\"calibration_bars_{}.pdf\"", ".", "format", "(", "experiments", "[", "i", "]", "[", "'network_type'", "]", ")", ")", ")", "\n", "plt", ".", "close", "(", "f", ")", "\n", "\n", "", "return", "experiments_results", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.percentageRotation.__init__": [[15, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "percentage", ")", ":", "\n", "        ", "self", ".", "percentage", "=", "percentage", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.percentageRotation.__call__": [[18, 20], ["torchvision.functional.rotate"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "T", ".", "functional", ".", "rotate", "(", "x", ",", "self", ".", "percentage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.PixelShuffle.__init__": [[23, 29], ["ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "percentage", ")", ":", "\n", "        ", "if", "percentage", "<", "0", "or", "percentage", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'percentage should be between 0 and 1, {} wasa given'", ".", "format", "(", "percentage", ")", ")", "\n", "\n", "", "self", ".", "percentage", "=", "percentage", "\n", "self", ".", "pixels_map", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.PixelShuffle.shuffle_pixels": [[30, 51], ["x.copy", "range", "len", "numpy.arange", "zip", "x.copy.putpixel", "range", "numpy.random.choice", "numpy.random.choice", "pxs.append", "int", "int", "x.copy.getpixel"], "methods", ["None"], ["", "def", "shuffle_pixels", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "x", ".", "copy", "(", ")", "\n", "if", "self", ".", "pixels_map", "is", "None", ":", "\n", "            ", "w", ",", "h", "=", "x", ".", "size", "\n", "pxs", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "w", ")", ":", "\n", "                ", "for", "y", "in", "range", "(", "h", ")", ":", "\n", "                    ", "pxs", ".", "append", "(", "(", "x", ",", "y", ")", ")", "\n", "\n", "", "", "ln", "=", "len", "(", "pxs", ")", "\n", "idx", "=", "np", ".", "arange", "(", "ln", ")", "\n", "\n", "pixels_map", "=", "zip", "(", "np", ".", "random", ".", "choice", "(", "idx", ",", "int", "(", "ln", "*", "self", ".", "percentage", ")", ")", ",", "np", ".", "random", ".", "choice", "(", "idx", ",", "int", "(", "ln", "*", "self", ".", "percentage", ")", ")", ")", "\n", "\n", "self", ".", "pixels_map", "=", "[", "(", "pxs", "[", "i", "]", ",", "x1", ".", "getpixel", "(", "pxs", "[", "j", "]", ")", ")", "for", "i", ",", "j", "in", "pixels_map", "]", "\n", "\n", "", "for", "a", ",", "b", "in", "self", ".", "pixels_map", ":", "\n", "            ", "x1", ".", "putpixel", "(", "a", ",", "b", ")", "\n", "\n", "", "return", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.PixelShuffle.__call__": [[52, 55], ["base.PixelShuffle.shuffle_pixels"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.PixelShuffle.shuffle_pixels"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "shuffle_pixels", "(", "x", ")", "\n", "return", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.AddNoise.__init__": [[58, 60], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "noise", ")", ":", "\n", "        ", "self", ".", "noise", "=", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.AddNoise.__call__": [[61, 63], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "x.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "torch", ".", "randn", "(", "x", ".", "size", "(", ")", ")", "*", "self", ".", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.Flatten.forward": [[320, 323], ["x.view.view.view", "x.view.view.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.Wrapper.__init__": [[332, 345], ["next", "base.log_gaussian_loss", "base.cross_entropy_loss", "model.parameters"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.log_gaussian_loss", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.cross_entropy_loss"], ["def", "__init__", "(", "self", ",", "model", ":", "nn", ".", "Module", ",", "train_data", ",", "test_data", ",", "optimizer", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "train_data", "=", "train_data", "\n", "self", ".", "test_data", "=", "test_data", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "\n", "\n", "self", ".", "regression", "=", "model", ".", "regression", "\n", "\n", "if", "model", ".", "regression", ":", "\n", "            ", "self", ".", "loss_function", "=", "log_gaussian_loss", "(", "model", ".", "classes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss_function", "=", "cross_entropy_loss", "(", "'mean'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.Wrapper.train_step": [[346, 350], ["base.Wrapper.train_epoch", "base.Wrapper.test_evaluation"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.train_epoch", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.ANN.Trainer.test_evaluation"], ["", "", "def", "train_step", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "losses", ",", "train_res", "=", "self", ".", "train_epoch", "(", "**", "kwargs", ")", "\n", "test_res", "=", "self", ".", "test_evaluation", "(", "**", "kwargs", ")", "\n", "return", "losses", ",", "train_res", ",", "test_res", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.Wrapper.train_epoch": [[351, 354], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "train_epoch", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.Wrapper.test_evaluation": [[355, 380], ["base.Wrapper.model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm.tqdm", "enumerate", "x.to.to.to", "y.to.to.to", "test_true.extend", "base.Wrapper.model.eval_forward", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "out.mean.mean.argmax", "test_pred.extend", "len", "y.to.to.tolist", "x.to.to.to", "out.mean.mean.dim", "out.mean.mean.mean", "out.mean.mean.tolist"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.BMMD.eval_forward"], ["", "def", "test_evaluation", "(", "self", ",", "samples", ",", "temperature", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "test_pred", "=", "[", "]", "\n", "test_true", "=", "[", "]", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "(", "x", ",", "y", ")", "in", "tqdm", "(", "enumerate", "(", "self", ".", "test_data", ")", ",", "leave", "=", "False", ",", "total", "=", "len", "(", "self", ".", "test_data", ")", ")", ":", "\n", "                ", "x", "=", "x", ".", "to", "(", "self", ".", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "test_true", ".", "extend", "(", "y", ".", "tolist", "(", ")", ")", "\n", "\n", "out", "=", "self", ".", "model", ".", "eval_forward", "(", "x", ".", "to", "(", "self", ".", "device", ")", ",", "samples", "=", "samples", ")", "\n", "out", "=", "torch", ".", "mul", "(", "out", ",", "temperature", ")", "\n", "\n", "out", "=", "torch", ".", "softmax", "(", "out", ",", "-", "1", ")", "\n", "\n", "if", "out", ".", "dim", "(", ")", ">", "2", ":", "\n", "                    ", "out", "=", "out", ".", "mean", "(", "0", ")", "\n", "\n", "", "out", "=", "out", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "test_pred", ".", "extend", "(", "out", ".", "tolist", "(", ")", ")", "\n", "\n", "", "", "return", "test_true", ",", "test_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.Wrapper.shuffle_test": [[381, 427], ["copy.deepcopy", "base.Wrapper.model.eval", "tqdm.tqdm.tqdm", "torchvision.Compose", "base.Wrapper.model.eval", "HS.append", "scores.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "numpy.log", "sklearn.metrics.f1_score", "base.PixelShuffle", "true_label.extend", "base.Wrapper.model.eval_forward", "base.epistemic_aleatoric_uncertainty", "H.extend", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "pred_label.extend", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "diff.extend", "numpy.mean", "y.tolist", "x.to", "out.mean.mean.dim", "out.mean.mean.mean", "out.mean.mean.argmax().tolist", "out.mean.mean.argmax"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.BMMD.eval_forward", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.epistemic_aleatoric_uncertainty"], ["", "def", "shuffle_test", "(", "self", ",", "samples", "=", "1", ")", ":", "\n", "\n", "        ", "ts_copy", "=", "deepcopy", "(", "self", ".", "test_data", ".", "dataset", ".", "transform", ")", "\n", "\n", "HS", "=", "[", "]", "\n", "DIFF", "=", "[", "]", "\n", "scores", "=", "[", "]", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "for", "n", "in", "tqdm", "(", "self", ".", "noise", ",", "desc", "=", "'Pixel Shuffle test'", ")", ":", "\n", "            ", "ts", "=", "T", ".", "Compose", "(", "[", "PixelShuffle", "(", "n", ")", ",", "ts_copy", "]", ")", "\n", "self", ".", "test_data", ".", "dataset", ".", "transform", "=", "ts", "\n", "\n", "H", "=", "[", "]", "\n", "pred_label", "=", "[", "]", "\n", "true_label", "=", "[", "]", "\n", "diff", "=", "[", "]", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "self", ".", "test_data", ")", ":", "\n", "                    ", "true_label", ".", "extend", "(", "y", ".", "tolist", "(", ")", ")", "\n", "\n", "out", "=", "self", ".", "model", ".", "eval_forward", "(", "x", ".", "to", "(", "self", ".", "device", ")", ",", "samples", "=", "samples", ")", "\n", "\n", "a", ",", "_", "=", "epistemic_aleatoric_uncertainty", "(", "out", ")", "\n", "H", ".", "extend", "(", "a", ")", "\n", "\n", "if", "out", ".", "dim", "(", ")", ">", "2", ":", "\n", "                        ", "out", "=", "out", ".", "mean", "(", "0", ")", "\n", "\n", "", "out", "=", "torch", ".", "softmax", "(", "out", ",", "-", "1", ")", "\n", "pred_label", ".", "extend", "(", "out", ".", "argmax", "(", "dim", "=", "-", "1", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "top_score", ",", "top_label", "=", "torch", ".", "topk", "(", "out", ",", "2", ")", "\n", "\n", "diff", ".", "extend", "(", "(", "(", "top_score", "[", ":", ",", "0", "]", "-", "top_score", "[", ":", ",", "1", "]", ")", "**", "2", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "", "H", "=", "-", "np", ".", "log", "(", "np", ".", "mean", "(", "H", ")", ")", "\n", "\n", "HS", ".", "append", "(", "H", ")", "\n", "\n", "scores", ".", "append", "(", "metrics", ".", "f1_score", "(", "true_label", ",", "pred_label", ",", "average", "=", "'micro'", ")", ")", "\n", "\n", "", "self", ".", "test_data", ".", "dataset", ".", "transform", "=", "ts_copy", "\n", "return", "HS", ",", "DIFF", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.Wrapper.fgsm_test": [[428, 502], ["base.Wrapper.model.eval", "base.cross_entropy_loss", "tqdm.tqdm.tqdm", "base.Wrapper.model.eval", "enumerate", "range", "correctly_predicted.append", "wrongly_predicted.append", "range", "correctly_predicted_h.append", "wrongly_predicted_h.append", "true_label.extend", "x.to.to.to", "y.to.to.to", "base.Wrapper.model.zero_grad", "base.Wrapper.model.eval_forward", "cross_entropy_loss.", "cross_entropy_loss.backward", "len", "len", "y.to.to.tolist", "x.to.to.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "base.fgsm_attack", "base.Wrapper.model.eval_forward", "base.epistemic_aleatoric_uncertainty", "H.extend", "base.entropy", "He.extend", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "pred_label.extend", "_correctly_predicted.append", "_wrongly_predicted.append", "_correctly_predicted.append", "_wrongly_predicted.append", "out.mean.mean.dim", "out.mean.mean.mean", "out.mean.mean.argmax().tolist", "out.mean.mean.argmax"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.cross_entropy_loss", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.BMMD.eval_forward", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.fgsm_attack", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.BMMD.eval_forward", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.epistemic_aleatoric_uncertainty", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.entropy"], ["", "def", "fgsm_test", "(", "self", ",", "samples", "=", "1", ")", ":", "\n", "\n", "        ", "correctly_predicted", "=", "[", "]", "\n", "wrongly_predicted", "=", "[", "]", "\n", "\n", "correctly_predicted_h", "=", "[", "]", "\n", "wrongly_predicted_h", "=", "[", "]", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "loss", "=", "cross_entropy_loss", "(", "'mean'", ")", "\n", "\n", "for", "eps", "in", "tqdm", "(", "self", ".", "epsilons", ",", "desc", "=", "'Attack test'", ",", "leave", "=", "False", ")", ":", "\n", "\n", "            ", "H", "=", "[", "]", "\n", "He", "=", "[", "]", "\n", "pred_label", "=", "[", "]", "\n", "true_label", "=", "[", "]", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "self", ".", "test_data", ")", ":", "\n", "                ", "true_label", ".", "extend", "(", "y", ".", "tolist", "(", ")", ")", "\n", "\n", "x", "=", "x", ".", "to", "(", "self", ".", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "x", ".", "requires_grad", "=", "True", "\n", "\n", "out", "=", "self", ".", "model", ".", "eval_forward", "(", "x", ".", "to", "(", "self", ".", "device", ")", ",", "samples", "=", "1", ")", "\n", "ce", "=", "loss", "(", "out", ",", "y", ")", "\n", "ce", ".", "backward", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "perturbed_data", "=", "fgsm_attack", "(", "x", ",", "eps", ")", "\n", "\n", "out", "=", "self", ".", "model", ".", "eval_forward", "(", "perturbed_data", ",", "samples", "=", "samples", ")", "\n", "\n", "a", ",", "_", "=", "epistemic_aleatoric_uncertainty", "(", "out", ")", "\n", "H", ".", "extend", "(", "a", ")", "\n", "\n", "a", ",", "_", "=", "entropy", "(", "out", ")", "\n", "He", ".", "extend", "(", "a", ")", "\n", "\n", "out", "=", "torch", ".", "softmax", "(", "out", ",", "-", "1", ")", "\n", "if", "out", ".", "dim", "(", ")", ">", "2", ":", "\n", "                        ", "out", "=", "out", ".", "mean", "(", "0", ")", "\n", "\n", "", "pred_label", ".", "extend", "(", "out", ".", "argmax", "(", "dim", "=", "-", "1", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "", "_correctly_predicted", "=", "[", "]", "\n", "_wrongly_predicted", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "true_label", ")", ")", ":", "\n", "                ", "if", "true_label", "[", "i", "]", "==", "pred_label", "[", "i", "]", ":", "\n", "                    ", "_correctly_predicted", ".", "append", "(", "H", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                    ", "_wrongly_predicted", ".", "append", "(", "H", "[", "i", "]", ")", "\n", "\n", "", "", "correctly_predicted", ".", "append", "(", "_correctly_predicted", ")", "\n", "wrongly_predicted", ".", "append", "(", "_wrongly_predicted", ")", "\n", "\n", "_correctly_predicted", "=", "[", "]", "\n", "_wrongly_predicted", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "true_label", ")", ")", ":", "\n", "                ", "if", "true_label", "[", "i", "]", "==", "pred_label", "[", "i", "]", ":", "\n", "                    ", "_correctly_predicted", ".", "append", "(", "He", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                    ", "_wrongly_predicted", ".", "append", "(", "He", "[", "i", "]", ")", "\n", "\n", "", "", "correctly_predicted_h", ".", "append", "(", "_correctly_predicted", ")", "\n", "wrongly_predicted_h", ".", "append", "(", "_wrongly_predicted", ")", "\n", "\n", "", "return", "(", "correctly_predicted", ",", "wrongly_predicted", ")", ",", "(", "correctly_predicted_h", ",", "wrongly_predicted_h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.Wrapper.white_noise_test": [[503, 572], ["copy.deepcopy", "base.Wrapper.model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm.tqdm", "torchvision.Compose", "enumerate", "range", "correctly_predicted.append", "wrongly_predicted.append", "range", "correctly_predicted_h.append", "wrongly_predicted_h.append", "true_label.extend", "x.to.to.to", "base.Wrapper.model.eval_forward", "base.epistemic_aleatoric_uncertainty", "H.extend", "base.entropy", "He.extend", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "pred_label.extend", "len", "len", "base.AddNoise", "y.tolist", "out.mean.mean.dim", "out.mean.mean.mean", "out.mean.mean.argmax().tolist", "_correctly_predicted.append", "_wrongly_predicted.append", "_correctly_predicted.append", "_wrongly_predicted.append", "out.mean.mean.argmax"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.BMMD.eval_forward", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.epistemic_aleatoric_uncertainty", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.entropy"], ["", "def", "white_noise_test", "(", "self", ",", "samples", "=", "1", ")", ":", "\n", "\n", "        ", "ts_copy", "=", "deepcopy", "(", "self", ".", "test_data", ".", "dataset", ".", "transform", ")", "\n", "\n", "correctly_predicted", "=", "[", "]", "\n", "wrongly_predicted", "=", "[", "]", "\n", "\n", "correctly_predicted_h", "=", "[", "]", "\n", "wrongly_predicted_h", "=", "[", "]", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "for", "eps", "in", "tqdm", "(", "self", ".", "noise", ",", "desc", "=", "'White noise test'", ",", "leave", "=", "False", ")", ":", "\n", "\n", "                ", "ts", "=", "T", ".", "Compose", "(", "[", "ts_copy", ",", "AddNoise", "(", "eps", ")", "]", ")", "\n", "self", ".", "test_data", ".", "dataset", ".", "transform", "=", "ts", "\n", "\n", "H", "=", "[", "]", "\n", "He", "=", "[", "]", "\n", "pred_label", "=", "[", "]", "\n", "true_label", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "self", ".", "test_data", ")", ":", "\n", "                    ", "true_label", ".", "extend", "(", "y", ".", "tolist", "(", ")", ")", "\n", "\n", "x", "=", "x", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "out", "=", "self", ".", "model", ".", "eval_forward", "(", "x", ",", "samples", "=", "samples", ")", "\n", "\n", "a", ",", "_", "=", "epistemic_aleatoric_uncertainty", "(", "out", ")", "\n", "H", ".", "extend", "(", "a", ")", "\n", "\n", "a", ",", "_", "=", "entropy", "(", "out", ")", "\n", "He", ".", "extend", "(", "a", ")", "\n", "\n", "out", "=", "torch", ".", "softmax", "(", "out", ",", "-", "1", ")", "\n", "if", "out", ".", "dim", "(", ")", ">", "2", ":", "\n", "                        ", "out", "=", "out", ".", "mean", "(", "0", ")", "\n", "\n", "", "pred_label", ".", "extend", "(", "out", ".", "argmax", "(", "dim", "=", "-", "1", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "_correctly_predicted", "=", "[", "]", "\n", "_wrongly_predicted", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "true_label", ")", ")", ":", "\n", "                    ", "if", "true_label", "[", "i", "]", "==", "pred_label", "[", "i", "]", ":", "\n", "                        ", "_correctly_predicted", ".", "append", "(", "H", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                        ", "_wrongly_predicted", ".", "append", "(", "H", "[", "i", "]", ")", "\n", "\n", "", "", "correctly_predicted", ".", "append", "(", "_correctly_predicted", ")", "\n", "wrongly_predicted", ".", "append", "(", "_wrongly_predicted", ")", "\n", "\n", "_correctly_predicted", "=", "[", "]", "\n", "_wrongly_predicted", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "true_label", ")", ")", ":", "\n", "                    ", "if", "true_label", "[", "i", "]", "==", "pred_label", "[", "i", "]", ":", "\n", "                        ", "_correctly_predicted", ".", "append", "(", "He", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                        ", "_wrongly_predicted", ".", "append", "(", "He", "[", "i", "]", ")", "\n", "\n", "", "", "correctly_predicted_h", ".", "append", "(", "_correctly_predicted", ")", "\n", "wrongly_predicted_h", ".", "append", "(", "_wrongly_predicted", ")", "\n", "\n", "", "", "self", ".", "test_data", ".", "dataset", ".", "transform", "=", "ts_copy", "\n", "\n", "return", "(", "correctly_predicted", ",", "wrongly_predicted", ")", ",", "(", "correctly_predicted_h", ",", "wrongly_predicted_h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.Wrapper.reliability_diagram": [[573, 633], ["base.Wrapper.model.eval", "numpy.asarray", "numpy.asarray", "numpy.empty", "numpy.zeros", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "numpy.asarray", "numpy.sum", "numpy.logical_and", "numpy.sum", "numpy.mean", "numpy.hstack", "numpy.hstack", "mce.append", "y_true.extend", "x.to.to.to", "base.Wrapper.model.eval_forward", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.div", "torch.div", "torch.div", "torch.div", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "numpy.asarray.extend", "numpy.asarray.extend", "numpy.log", "int", "numpy.hstack", "numpy.hstack", "numpy.sum", "numpy.abs", "numpy.abs", "y.tolist", "x.to.to.to", "hasattr", "hasattr", "out.mean.mean.sample", "out.mean.mean.dim", "out.mean.mean.mean", "prob.tolist", "pred.tolist", "len", "out.mean.mean.size"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.BMMD.eval_forward", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Uniform.sample"], ["", "def", "reliability_diagram", "(", "self", ",", "samples", "=", "1", ",", "bins", "=", "15", ",", "scaling", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "y_prob", "=", "[", "]", "\n", "y_true", "=", "[", "]", "\n", "y_pred", "=", "[", "]", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "self", ".", "test_data", ")", ":", "\n", "                ", "y_true", ".", "extend", "(", "y", ".", "tolist", "(", ")", ")", "\n", "x", "=", "x", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "out", "=", "self", ".", "model", ".", "eval_forward", "(", "x", ".", "to", "(", "self", ".", "device", ")", ",", "samples", "=", "samples", ")", "\n", "\n", "if", "hasattr", "(", "out", ",", "'__call__'", ")", "and", "hasattr", "(", "out", ",", "'sample'", ")", ":", "\n", "                    ", "scaling", "=", "out", ".", "sample", "(", "out", ".", "size", "(", ")", "[", "-", "1", "]", ")", "\n", "\n", "", "if", "out", ".", "dim", "(", ")", ">", "2", ":", "\n", "                    ", "out", "=", "out", ".", "mean", "(", "0", ")", "\n", "\n", "", "out", "=", "torch", ".", "softmax", "(", "out", ",", "-", "1", ")", "\n", "out", "=", "torch", ".", "div", "(", "out", ",", "scaling", ")", "\n", "\n", "prob", ",", "pred", "=", "torch", ".", "topk", "(", "out", ",", "1", ",", "-", "1", ")", "\n", "y_prob", ".", "extend", "(", "prob", ".", "tolist", "(", ")", ")", "\n", "y_pred", ".", "extend", "(", "pred", ".", "tolist", "(", ")", ")", "\n", "\n", "", "", "y_true", "=", "np", ".", "asarray", "(", "y_true", ")", "[", ":", ",", "None", "]", "\n", "y_prob", "=", "np", ".", "asarray", "(", "y_prob", ")", "\n", "y_pred", "=", "np", ".", "asarray", "(", "y_pred", ")", "\n", "\n", "prob_pred", "=", "np", ".", "empty", "(", "(", "0", ",", ")", ")", "\n", "prob_true", "=", "np", ".", "zeros", "(", "(", "0", ",", ")", ")", "\n", "ece", "=", "0", "\n", "nll", "=", "-", "np", ".", "sum", "(", "np", ".", "log", "(", "y_prob", ")", ")", "\n", "\n", "mce", "=", "[", "]", "\n", "\n", "for", "b", "in", "range", "(", "1", ",", "int", "(", "bins", ")", "+", "1", ")", ":", "\n", "            ", "i", "=", "np", ".", "logical_and", "(", "y_prob", "<=", "b", "/", "bins", ",", "y_prob", ">", "(", "b", "-", "1", ")", "/", "bins", ")", "# indexes for p in the current bin", "\n", "\n", "s", "=", "np", ".", "sum", "(", "i", ")", "\n", "\n", "if", "s", "==", "0", ":", "\n", "                ", "prob_pred", "=", "np", ".", "hstack", "(", "(", "prob_pred", ",", "0", ")", ")", "\n", "prob_true", "=", "np", ".", "hstack", "(", "(", "prob_true", ",", "0", ")", ")", "\n", "continue", "\n", "\n", "", "m", "=", "1", "/", "s", "\n", "acc", "=", "m", "*", "np", ".", "sum", "(", "y_pred", "[", "i", "]", "==", "y_true", "[", "i", "]", ")", "\n", "conf", "=", "np", ".", "mean", "(", "y_prob", "[", "i", "]", ")", "\n", "\n", "prob_pred", "=", "np", ".", "hstack", "(", "(", "prob_pred", ",", "conf", ")", ")", "\n", "prob_true", "=", "np", ".", "hstack", "(", "(", "prob_true", ",", "acc", ")", ")", "\n", "\n", "mce", ".", "append", "(", "np", ".", "abs", "(", "acc", "-", "conf", ")", ")", "\n", "\n", "ece", "+=", "(", "s", "/", "len", "(", "y_true", ")", ")", "*", "np", ".", "abs", "(", "acc", "-", "conf", ")", "\n", "\n", "", "return", "prob_pred", ",", "prob_true", ",", "ece", ",", "nll", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.Wrapper.total_variance": [[634, 652], ["base.Wrapper.model.eval", "numpy.asarray", "M.mean.mean.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "x.to.to.to", "base.Wrapper.model.eval_forward", "base.epistemic_aleatoric_uncertainty", "M.mean.mean.extend"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.BMMD.eval_forward", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.epistemic_aleatoric_uncertainty"], ["", "def", "total_variance", "(", "self", ",", "samples", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "M", "=", "[", "]", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "self", ".", "test_data", ")", ":", "\n", "                ", "x", "=", "x", ".", "to", "(", "self", ".", "device", ")", "\n", "out", "=", "self", ".", "model", ".", "eval_forward", "(", "x", ",", "samples", "=", "samples", ")", "\n", "\n", "_", ",", "m", "=", "epistemic_aleatoric_uncertainty", "(", "out", ")", "\n", "\n", "M", ".", "extend", "(", "m", ")", "\n", "\n", "", "", "M", "=", "np", ".", "asarray", "(", "M", ")", "\n", "M", "=", "M", ".", "mean", "(", "0", ")", "\n", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.Wrapper.temperature_scaling": [[653, 693], ["torch.nn.Parameter", "torch.nn.Parameter", "torch.optim.Adam", "torch.optim.Adam", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "enumerate", "range", "base.Wrapper.reliability_diagram", "torch.optim.Adam.zero_grad", "base.Wrapper.model.eval_forward", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.optim.Adam.zero_grad", "torch.div", "torch.div", "torch.div", "torch.div", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.backward", "torch.sum.backward", "torch.optim.Adam.step", "base.Wrapper.reliability_diagram", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "x.to", "out.mean.mean.dim", "out.mean.mean.mean", "torch.cat.to", "torch.cat.to", "torch.log", "torch.log", "torch.log", "torch.log", "pred.cpu", "torch.nn.Parameter.item"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.Wrapper.reliability_diagram", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.BMMD.eval_forward", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.Wrapper.reliability_diagram"], ["", "def", "temperature_scaling", "(", "self", ",", "samples", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "#  Based on https://github.com/gpleiss/temperature_scaling/", "\n", "        ", "temperature", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "device", "=", "self", ".", "device", ")", "*", "1", ",", "requires_grad", "=", "True", ")", "\n", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "[", "temperature", "]", ",", "lr", "=", "0.1", ")", "\n", "\n", "outs", "=", "torch", ".", "tensor", "(", "[", "]", ",", "dtype", "=", "torch", ".", "long", ",", "requires_grad", "=", "False", ")", "\n", "\n", "best_ece", "=", "self", ".", "reliability_diagram", "(", "samples", "=", "1", ")", "[", "-", "2", "]", "\n", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "self", ".", "test_data", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "out", "=", "self", ".", "model", ".", "eval_forward", "(", "x", ".", "to", "(", "self", ".", "device", ")", ",", "samples", "=", "1", ")", "\n", "\n", "if", "out", ".", "dim", "(", ")", ">", "2", ":", "\n", "                ", "out", "=", "out", ".", "mean", "(", "0", ")", "\n", "\n", "", "out", "=", "torch", ".", "softmax", "(", "out", ",", "-", "1", ")", "\n", "_", ",", "pred", "=", "torch", ".", "topk", "(", "out", ",", "1", ",", "-", "1", ")", "\n", "\n", "outs", "=", "torch", ".", "cat", "(", "(", "outs", ",", "pred", ".", "cpu", "(", ")", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "100", ")", ":", "\n", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "_outs", "=", "torch", ".", "div", "(", "outs", ".", "to", "(", "self", ".", "device", ")", ",", "temperature", ")", "\n", "\n", "loss", "=", "torch", ".", "sum", "(", "torch", ".", "log", "(", "_outs", "+", "1e-12", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "_", ",", "_", ",", "ece", ",", "_", "=", "self", ".", "reliability_diagram", "(", "samples", "=", "samples", ",", "scaling", "=", "temperature", ".", "item", "(", ")", ")", "\n", "\n", "if", "ece", "<", "best_ece", ":", "\n", "                ", "best_ece", "=", "ece", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "best_ece", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.Network.__init__": [[696, 704], ["super().__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "classes", ",", "regression", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "regression", "=", "regression", "\n", "self", ".", "features", "=", "[", "]", "\n", "\n", "if", "regression", ":", "\n", "            ", "self", ".", "noise", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "0.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.Network.eval_forward": [[705, 708], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "eval_forward", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.Network.set_mask": [[709, 713], ["isinstance", "i.set_mask"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_utils.BayesianParameters.set_mask"], ["", "def", "set_mask", "(", "self", ",", "p", ")", ":", "\n", "        ", "for", "i", "in", "self", ".", "features", ":", "\n", "            ", "if", "isinstance", "(", "i", ",", "(", "BayesianLinearLayer", ",", "BayesianCNNLayer", ")", ")", ":", "\n", "                ", "i", ".", "set_mask", "(", "p", ")", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.fgsm_attack": [[66, 77], ["image.grad.data.sign", "torch.clamp", "torch.clamp"], "function", ["None"], ["", "", "def", "fgsm_attack", "(", "image", ",", "epsilon", ")", ":", "\n", "    ", "if", "epsilon", "==", "0", ":", "\n", "        ", "return", "image", "\n", "# Collect the element-wise sign of the data gradient", "\n", "", "sign_data_grad", "=", "image", ".", "grad", ".", "data", ".", "sign", "(", ")", "\n", "# Create the perturbed image by adjusting each pixel of the input image", "\n", "perturbed_image", "=", "image", "+", "epsilon", "*", "sign_data_grad", "\n", "# Adding clipping to maintain [0,1] range", "\n", "perturbed_image", "=", "torch", ".", "clamp", "(", "perturbed_image", ",", "0", ",", "1", ")", "\n", "# Return the perturbed image", "\n", "return", "perturbed_image", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.log_gaussian_loss": [[79, 86], ["torch.log", "torch.log", "numpy.log"], "function", ["None"], ["", "def", "log_gaussian_loss", "(", "out_dim", ")", ":", "\n", "    ", "def", "loss_function", "(", "x", ",", "y", ",", "sigma", ")", ":", "\n", "        ", "exponent", "=", "-", "0.5", "*", "(", "x", "-", "y", ")", "**", "2", "/", "sigma", "**", "2", "\n", "log_coeff", "=", "-", "torch", ".", "log", "(", "sigma", "+", "1e-12", ")", "-", "0.5", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", ")", "\n", "return", "-", "(", "log_coeff", "+", "exponent", ")", ".", "sum", "(", ")", "\n", "\n", "", "return", "loss_function", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.cross_entropy_loss": [[88, 96], ["torch.log_softmax", "torch.nll_loss", "_x.mean.dim", "_x.mean.mean"], "function", ["None"], ["", "def", "cross_entropy_loss", "(", "reduction", ")", ":", "\n", "    ", "def", "loss_function", "(", "x", ",", "y", ")", ":", "\n", "        ", "_x", "=", "F", ".", "log_softmax", "(", "x", ",", "-", "1", ")", "\n", "if", "_x", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "_x", "=", "_x", ".", "mean", "(", "0", ")", "\n", "", "return", "F", ".", "nll_loss", "(", "_x", ",", "y", ",", "reduction", "=", "reduction", ")", "\n", "\n", "", "return", "loss_function", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.det": [[97, 108], ["numpy.linalg.det", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.det"], ["", "def", "det", "(", "x", ")", ":", "\n", "    ", "t", "=", "x", ".", "shape", "[", "1", "]", "\n", "classes", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "\n", "mn", "=", "1", "/", "classes", "**", "classes", "\n", "mx", "=", "mn", "*", "(", "2", "**", "(", "classes", "-", "1", ")", ")", "\n", "\n", "det", "=", "np", ".", "linalg", ".", "det", "(", "x", "+", "(", "np", ".", "eye", "(", "classes", ")", "/", "classes", ")", ")", "\n", "det", "=", "(", "det", "-", "mn", ")", "/", "(", "mx", "-", "mn", ")", "\n", "\n", "return", "det", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.epistemic_aleatoric_uncertainty": [[110, 162], ["torch.softmax", "torch.softmax", "torch.mean", "torch.mean", "np.transpose.detach().cpu().numpy", "numpy.transpose", "p_hat.detach().cpu().numpy.detach().cpu().numpy", "range", "numpy.asarray", "numpy.asarray", "x.unsqueeze.dim", "x.unsqueeze.unsqueeze", "numpy.zeros", "numpy.zeros", "range", "np.asarray.append", "numpy.linalg.det", "np.asarray.append", "np.transpose.detach().cpu", "p_hat.detach().cpu().numpy.detach().cpu", "numpy.outer", "numpy.diag", "numpy.outer", "np.transpose.detach", "p_hat.detach().cpu().numpy.detach", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.det"], ["", "def", "epistemic_aleatoric_uncertainty", "(", "x", ")", ":", "\n", "    ", "if", "x", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "x", "=", "x", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "p", "=", "torch", ".", "softmax", "(", "x", ",", "2", ")", "\n", "p_hat", "=", "torch", ".", "mean", "(", "p", ",", "0", ")", "\n", "\n", "p", "=", "p", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "p", "=", "np", ".", "transpose", "(", "p", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "\n", "p_hat", "=", "p_hat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "t", "=", "p", ".", "shape", "[", "1", "]", "\n", "classes", "=", "p", ".", "shape", "[", "-", "1", "]", "\n", "\n", "determinants", "=", "[", "]", "\n", "variances", "=", "[", "]", "\n", "\n", "mn", "=", "1", "/", "classes", "**", "classes", "\n", "mx", "=", "mn", "*", "(", "2", "**", "(", "classes", "-", "1", ")", ")", "\n", "\n", "for", "_bi", "in", "range", "(", "p", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "_bp", "=", "p", "[", "_bi", "]", "\n", "_bp_hat", "=", "p_hat", "[", "_bi", "]", "\n", "\n", "al", "=", "np", ".", "zeros", "(", "(", "classes", ",", "classes", ")", ")", "\n", "ep", "=", "np", ".", "zeros", "(", "(", "classes", ",", "classes", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "t", ")", ":", "\n", "            ", "_p", "=", "_bp", "[", "i", "]", "\n", "aleatoric", "=", "np", ".", "diag", "(", "_p", ")", "-", "np", ".", "outer", "(", "_p", ",", "_p", ")", "\n", "al", "+=", "aleatoric", "\n", "d", "=", "_p", "-", "_bp_hat", "\n", "epistemic", "=", "np", ".", "outer", "(", "d", ",", "d", ")", "\n", "ep", "+=", "epistemic", "\n", "\n", "", "al", "/=", "t", "\n", "ep", "/=", "t", "\n", "\n", "var", "=", "al", "+", "ep", "\n", "\n", "variances", ".", "append", "(", "var", ")", "\n", "\n", "det", "=", "np", ".", "linalg", ".", "det", "(", "var", "+", "(", "np", ".", "eye", "(", "classes", ")", "/", "classes", ")", ")", "\n", "det", "=", "(", "det", "-", "mn", ")", "/", "(", "mx", "-", "mn", ")", "\n", "\n", "determinants", ".", "append", "(", "det", ")", "\n", "\n", "", "determinants", "=", "np", ".", "asarray", "(", "determinants", ")", "\n", "variances", "=", "np", ".", "asarray", "(", "variances", ")", "\n", "\n", "return", "determinants", ",", "variances", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.entropy": [[164, 175], ["torch.softmax", "torch.softmax", "torch.mean", "torch.mean", "x.unsqueeze.dim", "x.unsqueeze.unsqueeze", "numpy.log", "torch.mean.tolist", "torch.sum", "torch.sum", "torch.log", "torch.log"], "function", ["None"], ["", "def", "entropy", "(", "x", ")", ":", "\n", "    ", "if", "x", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "x", "=", "x", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "p", "=", "torch", ".", "softmax", "(", "x", ",", "2", ")", "\n", "classes", "=", "p", ".", "shape", "[", "-", "1", "]", "\n", "\n", "log_p", "=", "-", "torch", ".", "sum", "(", "p", "*", "torch", ".", "log", "(", "p", "+", "1e-12", ")", ",", "-", "1", ")", "/", "np", ".", "log", "(", "classes", ")", "\n", "_entropy", "=", "torch", ".", "mean", "(", "log_p", ",", "0", ")", "\n", "\n", "return", "_entropy", ".", "tolist", "(", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.compute_entropy": [[177, 183], ["torch.log10", "torch.log10", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "compute_entropy", "(", "preds", ",", "sum", "=", "True", ")", ":", "\n", "    ", "l", "=", "torch", ".", "log10", "(", "preds", "+", "1e-12", ")", "*", "preds", "\n", "if", "sum", ":", "\n", "        ", "return", "-", "torch", ".", "sum", "(", "l", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "return", "-", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.get_bayesian_network": [[185, 254], ["torch.nn.ModuleList", "torch.nn.ModuleList", "torch.flatten.unsqueeze", "enumerate", "isinstance", "torch.nn.ModuleList.append", "torch.nn.ModuleList.append", "torch.flatten", "torch.flatten", "torch.nn.ModuleList.append", "bayesian_layers.BayesianLinearLayer", "isinstance", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "bayesian_layers.BayesianLinearLayer.", "base.Flatten", "isinstance", "torch.nn.ReLU", "torch.nn.ReLU", "i.lower", "isinstance", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "isinstance", "i.lower", "torch.nn.Dropout", "torch.nn.Dropout", "isinstance", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "bayesian_layers.BayesianLinearLayer.", "isinstance", "bayesian_layers.BayesianCNNLayer", "isinstance", "bayesian_layers.BayesianLinearLayer.", "bayesian_layers.BayesianLinearLayer", "ValueError", "torch.flatten", "torch.flatten", "torch.nn.ModuleList.append", "base.Flatten"], "function", ["None"], ["", "", "def", "get_bayesian_network", "(", "topology", ",", "input_image", ",", "classes", ",", "mu_init", ",", "rho_init", ",", "prior", ",", "divergence", ",", "local_trick", ",", "\n", "posterior_type", ",", "bias", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "features", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "prev", "=", "input_image", ".", "shape", "[", "0", "]", "\n", "input_image", "=", "input_image", ".", "unsqueeze", "(", "0", ")", "\n", "ll_conv", "=", "False", "\n", "\n", "for", "j", ",", "i", "in", "enumerate", "(", "topology", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "i", ",", "(", "tuple", ",", "list", ")", ")", "and", "i", "[", "0", "]", "==", "'MP'", ":", "\n", "            ", "l", "=", "torch", ".", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "i", "[", "1", "]", ",", "stride", "=", "i", "[", "2", "]", ")", "\n", "input_image", "=", "l", "(", "input_image", ")", "\n", "prev", "=", "input_image", ".", "shape", "[", "1", "]", "\n", "ll_conv", "=", "True", "\n", "\n", "", "elif", "isinstance", "(", "i", ",", "str", ")", "and", "i", ".", "lower", "(", ")", "==", "'relu'", ":", "\n", "            ", "l", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", "\n", "", "elif", "isinstance", "(", "i", ",", "str", ")", "and", "i", ".", "lower", "(", ")", "==", "'sigmoid'", ":", "\n", "            ", "l", "=", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "", "elif", "isinstance", "(", "i", ",", "float", ")", ":", "\n", "            ", "l", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n", "", "elif", "isinstance", "(", "i", ",", "(", "tuple", ",", "list", ")", ")", "and", "i", "[", "0", "]", "==", "'AP'", ":", "\n", "            ", "l", "=", "torch", ".", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "i", "[", "1", "]", ",", "stride", "=", "i", "[", "2", "]", ")", "\n", "input_image", "=", "l", "(", "input_image", ")", "\n", "prev", "=", "input_image", ".", "shape", "[", "1", "]", "\n", "ll_conv", "=", "True", "\n", "\n", "", "elif", "isinstance", "(", "i", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "size", ",", "kernel_size", ",", "stride", ",", "padding", "=", "i", "\n", "\n", "l", "=", "BayesianCNNLayer", "(", "in_channels", "=", "prev", ",", "kernels", "=", "size", ",", "kernel_size", "=", "kernel_size", ",", "posterior_type", "=", "posterior_type", ",", "\n", "mu_init", "=", "mu_init", ",", "divergence", "=", "divergence", ",", "local_rep_trick", "=", "local_trick", ",", "stride", "=", "stride", ",", "\n", "rho_init", "=", "rho_init", ",", "prior", "=", "prior", ",", "padding", "=", "padding", ",", "**", "kwargs", ")", "\n", "\n", "input_image", "=", "l", "(", "input_image", ")", "[", "0", "]", "\n", "prev", "=", "input_image", ".", "shape", "[", "1", "]", "\n", "\n", "", "elif", "isinstance", "(", "i", ",", "int", ")", ":", "\n", "            ", "if", "ll_conv", ":", "\n", "                ", "input_image", "=", "torch", ".", "flatten", "(", "input_image", ",", "1", ")", "\n", "prev", "=", "input_image", ".", "shape", "[", "-", "1", "]", "\n", "features", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "", "ll_conv", "=", "False", "\n", "\n", "size", "=", "i", "\n", "l", "=", "BayesianLinearLayer", "(", "in_size", "=", "prev", ",", "out_size", "=", "size", ",", "mu_init", "=", "mu_init", ",", "divergence", "=", "divergence", ",", "\n", "rho_init", "=", "rho_init", ",", "prior", "=", "prior", ",", "local_rep_trick", "=", "local_trick", ",", "use_bias", "=", "bias", ",", "\n", "posterior_type", "=", "posterior_type", ",", "**", "kwargs", ")", "\n", "prev", "=", "size", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Topology should be tuple for cnn layers, formatted as (num_kernels, kernel_size), '", "\n", "'pooling layer, formatted as tuple ([\\'MP\\', \\'AP\\'], kernel_size, stride) '", "\n", "'or integer, for linear layer. {} was given'", ".", "format", "(", "i", ")", ")", "\n", "\n", "", "features", ".", "append", "(", "l", ")", "\n", "\n", "", "if", "isinstance", "(", "topology", "[", "-", "1", "]", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "input_image", "=", "torch", ".", "flatten", "(", "input_image", ",", "1", ")", "\n", "prev", "=", "input_image", ".", "shape", "[", "-", "1", "]", "\n", "features", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "\n", "", "features", ".", "append", "(", "BayesianLinearLayer", "(", "in_size", "=", "prev", ",", "out_size", "=", "classes", ",", "mu_init", "=", "mu_init", ",", "rho_init", "=", "rho_init", ",", "\n", "prior", "=", "prior", ",", "divergence", "=", "divergence", ",", "local_rep_trick", "=", "local_trick", ",", "use_bias", "=", "bias", ",", "\n", "posterior_type", "=", "posterior_type", ",", "**", "kwargs", ")", ")", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.get_network": [[256, 317], ["torch.nn.ModuleList", "torch.nn.ModuleList", "torch.flatten.unsqueeze", "enumerate", "torch.nn.ModuleList.append", "torch.nn.ModuleList.append", "torch.flatten", "torch.flatten", "torch.nn.ModuleList.append", "torch.nn.Linear", "torch.nn.Linear", "isinstance", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Linear.", "base.Flatten", "isinstance", "torch.nn.ReLU", "torch.nn.ReLU", "isinstance", "i.lower", "torch.nn.Dropout", "torch.nn.Dropout", "isinstance", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.Linear.", "isinstance", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Linear.", "isinstance", "torch.nn.Linear", "torch.nn.Linear", "ValueError", "torch.flatten", "torch.flatten", "torch.nn.ModuleList.append", "base.Flatten"], "function", ["None"], ["", "def", "get_network", "(", "topology", ",", "input_image", ",", "classes", ",", "bias", "=", "True", ")", ":", "\n", "    ", "features", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "prev", "=", "input_image", ".", "shape", "[", "0", "]", "\n", "input_image", "=", "input_image", ".", "unsqueeze", "(", "0", ")", "\n", "ll_conv", "=", "False", "\n", "\n", "for", "j", ",", "i", "in", "enumerate", "(", "topology", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "i", ",", "(", "tuple", ",", "list", ")", ")", "and", "i", "[", "0", "]", "==", "'MP'", ":", "\n", "            ", "l", "=", "torch", ".", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "i", "[", "1", "]", ",", "stride", "=", "i", "[", "2", "]", ")", "\n", "input_image", "=", "l", "(", "input_image", ")", "\n", "prev", "=", "input_image", ".", "shape", "[", "1", "]", "\n", "ll_conv", "=", "True", "\n", "\n", "", "elif", "isinstance", "(", "i", ",", "str", ")", "and", "i", ".", "lower", "(", ")", "==", "'relu'", ":", "\n", "            ", "l", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", "\n", "", "elif", "isinstance", "(", "i", ",", "float", ")", ":", "\n", "            ", "l", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n", "", "elif", "isinstance", "(", "i", ",", "(", "tuple", ",", "list", ")", ")", "and", "i", "[", "0", "]", "==", "'AP'", ":", "\n", "            ", "l", "=", "torch", ".", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "i", "[", "1", "]", ",", "stride", "=", "i", "[", "2", "]", ")", "\n", "input_image", "=", "l", "(", "input_image", ")", "\n", "prev", "=", "input_image", ".", "shape", "[", "1", "]", "\n", "ll_conv", "=", "True", "\n", "\n", "", "elif", "isinstance", "(", "i", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "size", ",", "kernel_size", ",", "stride", ",", "padding", "=", "i", "\n", "l", "=", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "prev", ",", "out_channels", "=", "size", ",", "stride", "=", "stride", ",", "\n", "kernel_size", "=", "kernel_size", ",", "bias", "=", "False", ",", "padding", "=", "padding", ")", "\n", "\n", "input_image", "=", "l", "(", "input_image", ")", "\n", "prev", "=", "input_image", ".", "shape", "[", "1", "]", "\n", "ll_conv", "=", "True", "\n", "\n", "", "elif", "isinstance", "(", "i", ",", "int", ")", ":", "\n", "            ", "if", "ll_conv", ":", "\n", "                ", "input_image", "=", "torch", ".", "flatten", "(", "input_image", ",", "1", ")", "\n", "prev", "=", "input_image", ".", "shape", "[", "-", "1", "]", "\n", "features", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "\n", "", "ll_conv", "=", "False", "\n", "size", "=", "i", "\n", "l", "=", "torch", ".", "nn", ".", "Linear", "(", "prev", ",", "i", ",", "bias", "=", "bias", ")", "\n", "prev", "=", "size", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Topology should be tuple for cnn layers, formatted as (num_kernels, kernel_size), '", "\n", "'pooling layer, formatted as tuple ([\\'MP\\', \\'AP\\'], kernel_size, stride) '", "\n", "'or integer, for linear layer. {} was given'", ".", "format", "(", "i", ")", ")", "\n", "\n", "", "features", ".", "append", "(", "l", ")", "\n", "\n", "", "if", "ll_conv", ":", "\n", "        ", "input_image", "=", "torch", ".", "flatten", "(", "input_image", ",", "1", ")", "\n", "prev", "=", "input_image", ".", "shape", "[", "-", "1", "]", "\n", "features", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "\n", "", "features", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "prev", ",", "classes", ")", ")", "\n", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BBB.BBB.__init__": [[13, 29], ["base.Network.__init__", "base.get_bayesian_network", "priors.Gaussian"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.__init__", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.get_bayesian_network"], ["    ", "def", "__init__", "(", "self", ",", "sample", ",", "classes", ",", "topology", "=", "None", ",", "prior", "=", "None", ",", "mu_init", "=", "None", ",", "rho_init", "=", "None", ",", "\n", "local_trick", "=", "False", ",", "regression", "=", "False", ",", "posterior_type", "=", "'weights'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "classes", "=", "classes", ",", "regression", "=", "regression", ")", "\n", "\n", "if", "topology", "is", "None", ":", "\n", "            ", "topology", "=", "[", "400", ",", "400", "]", "\n", "\n", "", "if", "prior", "is", "None", ":", "\n", "            ", "prior", "=", "Gaussian", "(", "0", ",", "10", ")", "\n", "\n", "", "self", ".", "calculate_kl", "=", "True", "\n", "\n", "self", ".", "_prior", "=", "prior", "\n", "self", ".", "features", "=", "get_bayesian_network", "(", "topology", ",", "sample", ",", "classes", ",", "\n", "mu_init", ",", "rho_init", ",", "prior", ",", "'kl'", ",", "local_trick", ",", "bias", "=", "True", ",", "\n", "posterior_type", "=", "posterior_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BBB.BBB._forward": [[30, 44], ["enumerate", "isinstance", "i", "i"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "tot_prior", "=", "0", "\n", "tot_post", "=", "0", "\n", "\n", "for", "j", ",", "i", "in", "enumerate", "(", "self", ".", "features", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "i", ",", "(", "BayesianLinearLayer", ",", "BayesianCNNLayer", ")", ")", ":", "\n", "                ", "x", "=", "i", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", ",", "prior", ",", "post", "=", "i", "(", "x", ",", "self", ".", "calculate_kl", ")", "\n", "tot_post", "+=", "post", "\n", "tot_prior", "+=", "prior", "\n", "\n", "", "", "return", "x", ",", "tot_prior", ",", "tot_post", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BBB.BBB.forward": [[45, 63], ["range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.mean", "torch.stack.mean", "torch.stack.mean", "torch.stack.mean", "BBB.BBB._forward", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.BMMD._forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "samples", "=", "1", ")", ":", "\n", "        ", "o", "=", "[", "]", "\n", "log_priors", "=", "[", "]", "\n", "log_posts", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "samples", ")", ":", "\n", "            ", "op", ",", "prior", ",", "post", "=", "self", ".", "_forward", "(", "x", ")", "\n", "o", ".", "append", "(", "op", ")", "\n", "log_priors", ".", "append", "(", "prior", ")", "\n", "log_posts", ".", "append", "(", "post", ")", "\n", "\n", "", "o", "=", "torch", ".", "stack", "(", "o", ")", "\n", "log_priors", "=", "torch", ".", "stack", "(", "log_priors", ")", "\n", "log_posts", "=", "torch", ".", "stack", "(", "log_posts", ")", "\n", "\n", "log_prior", "=", "log_priors", ".", "mean", "(", ")", "\n", "log_post", "=", "log_posts", ".", "mean", "(", ")", "\n", "return", "o", ",", "log_prior", ",", "log_post", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BBB.BBB.eval_forward": [[64, 67], ["BBB.BBB."], "methods", ["None"], ["", "def", "eval_forward", "(", "self", ",", "x", ",", "samples", "=", "1", ")", ":", "\n", "        ", "o", ",", "_", ",", "_", "=", "self", "(", "x", ",", "samples", "=", "samples", ")", "\n", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BBB.Trainer.__init__": [[70, 78], ["base.Wrapper.__init__", "base.log_gaussian_loss", "base.cross_entropy_loss"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.__init__", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.log_gaussian_loss", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.cross_entropy_loss"], ["    ", "def", "__init__", "(", "self", ",", "model", ":", "nn", ".", "Module", ",", "train_data", ",", "test_data", ",", "optimizer", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "train_data", ",", "test_data", ",", "optimizer", ")", "\n", "\n", "self", ".", "regression", "=", "model", ".", "regression", "\n", "if", "model", ".", "regression", ":", "\n", "            ", "self", ".", "loss", "=", "log_gaussian_loss", "(", "model", ".", "classes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "cross_entropy_loss", "(", "'sum'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BBB.Trainer.train_epoch": [[79, 137], ["len", "numpy.asarray", "BBB.Trainer.model.train", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.set_postfix", "enumerate", "train_true.extend", "y.to.to.to", "x.to.to.to", "BBB.Trainer.optimizer.zero_grad", "BBB.Trainer.model", "tqdm.tqdm.tqdm.set_postfix", "losses.append", "BBB.Trainer.backward", "BBB.Trainer.optimizer.step", "train_pred.extend", "len", "y.to.to.tolist", "out.argmax.argmax.mean", "BBB.Trainer.loss_function", "torch.softmax().mean", "torch.softmax().mean", "torch.softmax().mean", "torch.softmax().mean", "out.argmax.argmax.argmax", "BBB.Trainer.item", "out.argmax.argmax.tolist", "range", "BBB.Trainer.model.noise.exp", "BBB.Trainer.loss_function", "BBB.Trainer.loss_function", "BBB.Trainer.item", "logloss.item", "out[].exp", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "", "def", "train_epoch", "(", "self", ",", "samples", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "losses", "=", "[", "]", "\n", "\n", "M", "=", "len", "(", "self", ".", "train_data", ")", "\n", "a", "=", "np", ".", "asarray", "(", "[", "2", "**", "(", "M", "-", "i", "-", "1", ")", "for", "i", "in", "range", "(", "M", "+", "1", ")", "]", ")", "\n", "b", "=", "2", "**", "M", "-", "1", "\n", "\n", "pi", "=", "a", "/", "b", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "progress_bar", "=", "tqdm", "(", "enumerate", "(", "self", ".", "train_data", ")", ",", "total", "=", "len", "(", "self", ".", "train_data", ")", ",", "disable", "=", "False", ",", "leave", "=", "False", ")", "\n", "progress_bar", ".", "set_postfix", "(", "ce_loss", "=", "''", ",", "kl_loss", "=", "''", ")", "\n", "\n", "train_true", "=", "[", "]", "\n", "train_pred", "=", "[", "]", "\n", "self", ".", "model", ".", "calculate_kl", "=", "True", "\n", "\n", "for", "batch", ",", "(", "x", ",", "y", ")", "in", "progress_bar", ":", "\n", "            ", "train_true", ".", "extend", "(", "y", ".", "tolist", "(", ")", ")", "\n", "y", "=", "y", ".", "to", "(", "self", ".", "device", ")", "\n", "x", "=", "x", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "out", ",", "prior", ",", "post", "=", "self", ".", "model", "(", "x", ",", "samples", "=", "samples", ")", "\n", "\n", "logloss", "=", "(", "post", "-", "prior", ")", "*", "pi", "[", "batch", "]", "#/ x.shape[0]", "\n", "\n", "if", "pi", "[", "batch", "]", "==", "0", ":", "\n", "                ", "self", ".", "model", ".", "calculate_kl", "=", "False", "\n", "\n", "", "if", "self", ".", "regression", ":", "\n", "                ", "out", "=", "out", ".", "mean", "(", "0", ")", "\n", "logloss", "=", "logloss", "/", "x", ".", "shape", "[", "0", "]", "\n", "\n", "if", "self", ".", "model", ".", "classes", "==", "1", ":", "\n", "                    ", "noise", "=", "self", ".", "model", ".", "noise", ".", "exp", "(", ")", "\n", "x", "=", "out", "\n", "loss", "=", "self", ".", "loss_function", "(", "x", ",", "y", ",", "noise", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "self", ".", "loss_function", "(", "out", "[", ":", ",", ":", "1", "]", ",", "y", ",", "out", "[", ":", ",", "1", ":", "]", ".", "exp", "(", ")", ")", "\n", "", "loss", "=", "loss", "/", "x", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "loss", "=", "self", ".", "loss_function", "(", "out", ",", "y", ")", "\n", "out", "=", "torch", ".", "softmax", "(", "out", ",", "-", "1", ")", ".", "mean", "(", "0", ")", "\n", "out", "=", "out", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "\n", "", "progress_bar", ".", "set_postfix", "(", "ce_loss", "=", "loss", ".", "item", "(", ")", ",", "kl_loss", "=", "logloss", ".", "item", "(", ")", ")", "\n", "loss", "+=", "logloss", "\n", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_pred", ".", "extend", "(", "out", ".", "tolist", "(", ")", ")", "\n", "\n", "", "return", "losses", ",", "(", "train_true", ",", "train_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BBB.Trainer.train_step": [[138, 142], ["BBB.Trainer.train_epoch", "BBB.Trainer.test_evaluation"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.train_epoch", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.ANN.Trainer.test_evaluation"], ["", "def", "train_step", "(", "self", ",", "train_samples", "=", "1", ",", "test_samples", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "losses", ",", "train_res", "=", "self", ".", "train_epoch", "(", "samples", "=", "train_samples", ")", "\n", "test_res", "=", "self", ".", "test_evaluation", "(", "samples", "=", "test_samples", ")", "\n", "return", "losses", ",", "train_res", ",", "test_res", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_layers.BayesianLayer.__init__": [[11, 40], ["super().__init__", "divergence.lower.lower.lower", "ValueError", "kwargs.get", "kwargs.get", "kwargs.get", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "divergence", ",", "prior", ",", "local_trick", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "divergence", "=", "divergence", ".", "lower", "(", ")", "\n", "if", "divergence", "not", "in", "[", "'mmd'", ",", "'kl'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'type parameter should be mmd or kl.'", ")", "\n", "\n", "", "if", "divergence", "==", "'mmd'", ":", "\n", "            ", "self", ".", "biased", "=", "kwargs", ".", "get", "(", "'biased'", ",", "False", ")", "\n", "self", ".", "kernel", "=", "kwargs", ".", "get", "(", "'kernel'", ",", "'inverse'", ")", "\n", "if", "self", ".", "kernel", "not", "in", "[", "'rbf'", ",", "'inverse'", "]", ":", "\n", "                ", "raise", "ValueError", "(", "'Available kernels: rbf, inverse. {} given.'", ".", "format", "(", "self", ".", "kernel", ")", ")", "\n", "\n", "", "self", ".", "alpha", "=", "kwargs", ".", "get", "(", "'alpha'", ",", "None", ")", "\n", "if", "self", ".", "alpha", "is", "not", "None", "and", "(", "self", ".", "alpha", ">", "1", "or", "self", ".", "alpha", "<", "0", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'Alpha should be between 0 and 1 (or None), {} given.'", ".", "format", "(", "self", ".", "alpha", ")", ")", "\n", "\n", "", "", "self", ".", "divergence", "=", "divergence", "\n", "self", ".", "local_trick", "=", "local_trick", "\n", "\n", "self", ".", "w", "=", "None", "\n", "self", ".", "b", "=", "None", "\n", "self", ".", "w_w", "=", "None", "\n", "self", ".", "b_w", "=", "None", "\n", "\n", "self", ".", "prior_w", "=", "prior", "\n", "self", ".", "prior_b", "=", "prior", "\n", "self", ".", "log_prior", "=", "None", "\n", "self", ".", "log_posterior", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_layers.BayesianLayer._mmd_forward": [[41, 63], ["bayesian_layers.BayesianLayer._forward", "torch.tensor().to", "torch.tensor().to", "torch.flatten", "bayesian_utils.compute_mmd", "torch.tensor", "torch.tensor", "bayesian_layers.BayesianLayer.prior_w.sample().to", "b.unsqueeze.unsqueeze.unsqueeze", "bayesian_utils.compute_mmd", "bayesian_layers.BayesianLayer.prior_b.sample().to", "torch.abs", "torch.tensor().to", "torch.abs", "torch.tensor().to", "bayesian_layers.BayesianLayer.prior_w.sample", "torch.flatten.size", "bayesian_layers.BayesianLayer.prior_b.sample", "torch.tensor", "torch.tensor", "b.unsqueeze.unsqueeze.size"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.BMMD._forward", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_utils.compute_mmd", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_utils.compute_mmd", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Uniform.sample", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Uniform.sample"], ["", "def", "_mmd_forward", "(", "self", ",", "x", ",", "calculate_divergence", ")", ":", "\n", "        ", "o", ",", "w", ",", "b", "=", "self", ".", "_forward", "(", "x", ")", "\n", "\n", "mmd_w", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "mmd_b", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "\n", "if", "self", ".", "training", "and", "calculate_divergence", ":", "\n", "            ", "w", "=", "torch", ".", "flatten", "(", "w", ",", "1", ")", "\n", "mmd_w", "=", "compute_mmd", "(", "w", ",", "self", ".", "prior_w", ".", "sample", "(", "w", ".", "size", "(", ")", ")", ".", "to", "(", "w", ".", "device", ")", ",", "type", "=", "self", ".", "kernel", ",", "biased", "=", "self", ".", "biased", ")", "\n", "\n", "if", "b", "is", "not", "None", ":", "\n", "                ", "b", "=", "b", ".", "unsqueeze", "(", "0", ")", "\n", "mmd_b", "=", "compute_mmd", "(", "b", ",", "self", ".", "prior_b", ".", "sample", "(", "b", ".", "size", "(", ")", ")", ".", "to", "(", "w", ".", "device", ")", ",", "type", "=", "self", ".", "kernel", ",", "\n", "biased", "=", "self", ".", "biased", ")", "\n", "\n", "", "if", "self", ".", "alpha", "is", "not", "None", ":", "\n", "                ", "if", "torch", ".", "abs", "(", "mmd_b", ")", "<", "self", ".", "alpha", ":", "\n", "                    ", "mmd_b", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "", "if", "torch", ".", "abs", "(", "mmd_w", ")", "<", "self", ".", "alpha", ":", "\n", "                    ", "mmd_w", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "\n", "", "", "", "return", "o", ",", "mmd_w", "+", "mmd_b", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_layers.BayesianLayer._kl_forward": [[64, 78], ["bayesian_layers.BayesianLayer._forward", "torch.tensor", "torch.tensor", "bayesian_layers.BayesianLayer.w.posterior_log_prob().sum", "bayesian_layers.BayesianLayer.prior_w.log_prob().sum", "bayesian_layers.BayesianLayer.b.posterior_log_prob().sum", "bayesian_layers.BayesianLayer.prior_b.log_prob().sum", "bayesian_layers.BayesianLayer.w.posterior_log_prob", "bayesian_layers.BayesianLayer.prior_w.log_prob", "bayesian_layers.BayesianLayer.b.posterior_log_prob", "bayesian_layers.BayesianLayer.prior_b.log_prob"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.BMMD._forward", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_utils.BayesianParameters.posterior_log_prob", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Uniform.log_prob", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_utils.BayesianParameters.posterior_log_prob", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Uniform.log_prob"], ["", "def", "_kl_forward", "(", "self", ",", "x", ",", "calculate_divergence", ")", ":", "\n", "        ", "o", ",", "w", ",", "b", "=", "self", ".", "_forward", "(", "x", ")", "\n", "log_post", "=", "torch", ".", "tensor", "(", "0.0", ")", "\n", "log_prior", "=", "torch", ".", "tensor", "(", "0.0", ")", "\n", "\n", "if", "self", ".", "training", "and", "calculate_divergence", ":", "\n", "            ", "log_post", "=", "self", ".", "w", ".", "posterior_log_prob", "(", "w", ")", ".", "sum", "(", ")", "\n", "log_prior", "=", "self", ".", "prior_w", ".", "log_prob", "(", "w", ")", ".", "sum", "(", ")", "\n", "\n", "if", "b", "is", "not", "None", ":", "\n", "                ", "log_post", "+=", "self", ".", "b", ".", "posterior_log_prob", "(", "b", ")", ".", "sum", "(", ")", "\n", "log_prior", "+=", "self", ".", "prior_b", ".", "log_prob", "(", "b", ")", ".", "sum", "(", ")", "\n", "\n", "", "", "return", "o", ",", "log_prior", ",", "log_post", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_layers.BayesianLayer.forward": [[79, 84], ["bayesian_layers.BayesianLayer._kl_forward", "bayesian_layers.BayesianLayer._mmd_forward"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_layers.BayesianLayer._kl_forward", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_layers.BayesianLayer._mmd_forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "calculate_divergence", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "divergence", "==", "'kl'", ":", "\n", "            ", "return", "self", ".", "_kl_forward", "(", "x", ",", "calculate_divergence", ")", "\n", "", "if", "self", ".", "divergence", "==", "'mmd'", ":", "\n", "            ", "return", "self", ".", "_mmd_forward", "(", "x", ",", "calculate_divergence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_layers.BayesianLayer.set_mask": [[85, 89], ["bayesian_layers.BayesianLayer.w.set_mask", "bayesian_layers.BayesianLayer.b.set_mask"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_utils.BayesianParameters.set_mask", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_utils.BayesianParameters.set_mask"], ["", "", "def", "set_mask", "(", "self", ",", "p", ")", ":", "\n", "        ", "self", ".", "w", ".", "set_mask", "(", "p", ")", "\n", "if", "self", ".", "b", "is", "not", "None", ":", "\n", "            ", "self", ".", "b", ".", "set_mask", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_layers.BayesianLayer.prior_prob": [[90, 103], ["prior.log_prob().sum", "prior.log_prob().sum", "w_log.exp.exp.exp", "prior.log_prob", "b_log.exp", "prior.log_prob"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Uniform.log_prob", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Uniform.log_prob"], ["", "", "def", "prior_prob", "(", "self", ",", "prior", ":", "torch", ".", "distributions", "=", "None", ",", "log", "=", "True", ")", ":", "\n", "\n", "        ", "if", "prior", "is", "None", ":", "\n", "            ", "prior", "=", "self", ".", "prior_w", "\n", "\n", "", "w_log", "=", "prior", ".", "log_prob", "(", "self", ".", "w", ".", "weights", ")", ".", "sum", "(", ")", "\n", "b_log", "=", "prior", ".", "log_prob", "(", "self", ".", "b", ".", "weights", ")", ".", "sum", "(", ")", "if", "self", ".", "b", "is", "not", "None", "else", "1", "\n", "\n", "if", "not", "log", ":", "\n", "            ", "w_log", "=", "w_log", ".", "exp", "(", ")", "\n", "b_log", "=", "b_log", ".", "exp", "(", ")", "if", "self", ".", "b", "is", "not", "None", "else", "1", "\n", "\n", "", "return", "w_log", "+", "b_log", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_layers.BayesianLayer._forward": [[104, 107], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_layers.BayesianCNNLayer.__init__": [[110, 123], ["bayesian_layers.BayesianLayer.__init__", "bayesian_utils.BayesianParameters"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "kernels", ",", "divergence", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "\n", "mu_init", "=", "None", ",", "rho_init", "=", "None", ",", "local_rep_trick", "=", "False", ",", "prior", "=", "None", ",", "posterior_type", "=", "'weights'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "divergence", ",", "prior", ",", "local_rep_trick", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "kernels", "=", "kernels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "\n", "self", ".", "w", "=", "BayesianParameters", "(", "size", "=", "(", "kernels", ",", "in_channels", ",", "kernel_size", ",", "kernel_size", ")", ",", "\n", "posterior_type", "=", "posterior_type", ",", "\n", "mu_initialization", "=", "mu_init", ",", "rho_initialization", "=", "rho_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_layers.BayesianCNNLayer._forward": [[124, 138], ["torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.sqrt", "torch.nn.functional.conv2d", "torch.randn().to", "x.pow", "torch.randn", "torch.sqrt.size"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "b", "=", "None", "\n", "if", "not", "self", ".", "local_trick", ":", "\n", "            ", "w", "=", "self", ".", "w", ".", "weights", "\n", "o", "=", "F", ".", "conv2d", "(", "x", ",", "weight", "=", "w", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ")", "\n", "return", "o", ",", "w", ",", "b", "\n", "", "else", ":", "\n", "            ", "w_mu", "=", "F", ".", "conv2d", "(", "x", ",", "weight", "=", "self", ".", "w", ".", "mu", ")", "\n", "w_std", "=", "torch", ".", "sqrt", "(", "1e-12", "+", "F", ".", "conv2d", "(", "x", ".", "pow", "(", "2", ")", ",", "weight", "=", "self", ".", "w", ".", "sigma", ")", ")", "\n", "\n", "output", "=", "w_mu", "+", "w_std", "*", "torch", ".", "randn", "(", "w_std", ".", "size", "(", ")", ",", "requires_grad", "=", "True", ")", ".", "to", "(", "w_std", ".", "device", ")", "\n", "\n", "return", "output", ",", "self", ".", "w", ".", "weights", ",", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_layers.BayesianCNNLayer.extra_repr": [[139, 143], ["None"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'input: {}, output: {}, kernel_size: {}, bias: {}'", ".", "format", "(", "self", ".", "in_channels", ",", "self", ".", "kernels", ",", "\n", "self", ".", "kernel_size", ",", "\n", "True", "if", "self", ".", "b", "is", "not", "None", "else", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_layers.BayesianLinearLayer.__init__": [[146, 161], ["bayesian_layers.BayesianLayer.__init__", "bayesian_utils.BayesianParameters", "bayesian_utils.BayesianParameters"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "divergence", ",", "mu_init", "=", "None", ",", "rho_init", "=", "None", ",", "use_bias", "=", "True", ",", "prior", "=", "None", ",", "\n", "local_rep_trick", "=", "False", ",", "posterior_type", "=", "'weights'", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "divergence", ",", "prior", ",", "local_rep_trick", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "in_size", "=", "in_size", "\n", "self", ".", "out_size", "=", "out_size", "\n", "\n", "self", ".", "w", "=", "BayesianParameters", "(", "size", "=", "(", "out_size", ",", "in_size", ")", ",", "posterior_type", "=", "posterior_type", ",", "\n", "mu_initialization", "=", "mu_init", ",", "rho_initialization", "=", "rho_init", ")", "\n", "\n", "self", ".", "b", "=", "None", "\n", "if", "use_bias", ":", "\n", "            ", "self", ".", "b", "=", "BayesianParameters", "(", "size", "=", "out_size", ",", "mu_initialization", "=", "mu_init", ",", "is_bias", "=", "True", ",", "\n", "rho_initialization", "=", "rho_init", ",", "posterior_type", "=", "posterior_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_layers.BayesianLinearLayer._forward": [[162, 182], ["torch.nn.functional.linear", "torch.nn.functional.linear", "torch.sqrt", "b.unsqueeze().expand", "torch.nn.functional.linear", "torch.randn().to", "b.unsqueeze", "x.pow", "torch.randn"], "methods", ["None"], ["", "", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", "=", "None", "\n", "if", "not", "self", ".", "local_trick", ":", "\n", "            ", "w", "=", "self", ".", "w", ".", "weights", "\n", "if", "self", ".", "b", "is", "not", "None", ":", "\n", "                ", "b", "=", "self", ".", "b", ".", "weights", "\n", "", "o", "=", "F", ".", "linear", "(", "x", ",", "w", ",", "b", ")", "\n", "return", "o", ",", "w", ",", "b", "\n", "", "else", ":", "\n", "            ", "w_mu", "=", "F", ".", "linear", "(", "input", "=", "x", ",", "weight", "=", "self", ".", "w", ".", "mu", ")", "\n", "\n", "w_std", "=", "torch", ".", "sqrt", "(", "1e-12", "+", "F", ".", "linear", "(", "input", "=", "x", ".", "pow", "(", "2", ")", ",", "weight", "=", "self", ".", "w", ".", "sigma", ")", ")", "\n", "\n", "w_out", "=", "w_mu", "+", "w_std", "*", "torch", ".", "randn", "(", "w_mu", ".", "shape", ",", "requires_grad", "=", "True", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "\n", "if", "self", ".", "b", "is", "not", "None", ":", "\n", "                ", "b", "=", "self", ".", "b", ".", "weights", "\n", "w_out", "+=", "b", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "", "return", "w_out", ",", "self", ".", "w", ".", "weights", ",", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_layers.BayesianLinearLayer.extra_repr": [[183, 186], ["None"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'input: {}, output: {}, bias: {}'", ".", "format", "(", "self", ".", "in_size", ",", "self", ".", "out_size", ",", "\n", "True", "if", "self", ".", "b", "is", "not", "None", "else", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_layers.BayesDropout.__init__": [[189, 192], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_layers.BayesDropout.forward": [[193, 195], ["torch.nn.functional.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "p", ",", "training", "=", "True", ",", "inplace", "=", "False", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.ANN.ANN.__init__": [[9, 16], ["base.Network.__init__", "base.get_network"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.__init__", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.get_network"], ["    ", "def", "__init__", "(", "self", ",", "sample", ",", "classes", ",", "topology", "=", "None", ",", "regression", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "classes", "=", "classes", ",", "regression", "=", "regression", ")", "\n", "\n", "if", "topology", "is", "None", ":", "\n", "            ", "topology", "=", "[", "400", ",", "400", "]", "\n", "\n", "", "self", ".", "features", "=", "get_network", "(", "topology", ",", "sample", ",", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.ANN.ANN.forward": [[17, 22], ["enumerate", "i"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "j", ",", "i", "in", "enumerate", "(", "self", ".", "features", ")", ":", "\n", "            ", "x", "=", "i", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.ANN.ANN.eval_forward": [[23, 25], ["ANN.ANN.forward"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.BMMD.forward"], ["", "def", "eval_forward", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "forward", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.ANN.Trainer.__init__": [[28, 36], ["base.Wrapper.__init__", "base.log_gaussian_loss", "base.cross_entropy_loss"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.__init__", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.log_gaussian_loss", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.cross_entropy_loss"], ["    ", "def", "__init__", "(", "self", ",", "model", ":", "ANN", ",", "train_data", ",", "test_data", ",", "optimizer", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "train_data", ",", "test_data", ",", "optimizer", ")", "\n", "\n", "self", ".", "regression", "=", "model", ".", "regression", "\n", "if", "model", ".", "regression", ":", "\n", "            ", "self", ".", "loss", "=", "log_gaussian_loss", "(", "model", ".", "classes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "cross_entropy_loss", "(", "'mean'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.ANN.Trainer.train_epoch": [[37, 75], ["ANN.Trainer.model.train", "tqdm.tqdm.tqdm", "enumerate", "train_true.extend", "x.to.to.to", "y.to.to.to", "ANN.Trainer.optimizer.zero_grad", "ANN.Trainer.model", "train_pred.extend", "losses.append", "ANN.Trainer.backward", "ANN.Trainer.optimizer.step", "tqdm.tqdm.tqdm.set_postfix", "len", "y.to.to.tolist", "ANN.Trainer.loss_function", "out.argmax.argmax.argmax", "out.argmax.argmax.tolist", "ANN.Trainer.item", "ANN.Trainer.model.noise.exp", "ANN.Trainer.loss_function", "ANN.Trainer.item", "ANN.Trainer.loss_function", "out[].exp"], "methods", ["None"], ["", "", "def", "train_epoch", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "losses", "=", "[", "]", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "progress_bar", "=", "tqdm", "(", "enumerate", "(", "self", ".", "train_data", ")", ",", "total", "=", "len", "(", "self", ".", "train_data", ")", ",", "disable", "=", "False", ",", "leave", "=", "False", ")", "\n", "\n", "train_true", "=", "[", "]", "\n", "train_pred", "=", "[", "]", "\n", "\n", "for", "batch", ",", "(", "x", ",", "y", ")", "in", "progress_bar", ":", "\n", "            ", "train_true", ".", "extend", "(", "y", ".", "tolist", "(", ")", ")", "\n", "x", "=", "x", ".", "to", "(", "self", ".", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "out", "=", "self", ".", "model", "(", "x", ")", "\n", "\n", "if", "self", ".", "regression", ":", "\n", "                ", "if", "self", ".", "model", ".", "classes", "==", "1", ":", "\n", "                    ", "noise", "=", "self", ".", "model", ".", "noise", ".", "exp", "(", ")", "\n", "x", "=", "out", "\n", "loss", "=", "self", ".", "loss_function", "(", "x", ",", "y", ",", "noise", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "self", ".", "loss_function", "(", "out", "[", ":", ",", ":", "1", "]", ",", "y", ",", "out", "[", ":", ",", "1", ":", "]", ".", "exp", "(", ")", ")", "/", "x", ".", "shape", "[", "0", "]", "\n", "", "", "else", ":", "\n", "                ", "loss", "=", "self", ".", "loss_function", "(", "out", ",", "y", ")", "\n", "out", "=", "out", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "\n", "", "train_pred", ".", "extend", "(", "out", ".", "tolist", "(", ")", ")", "\n", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "progress_bar", ".", "set_postfix", "(", "ce_loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "return", "losses", ",", "(", "train_true", ",", "train_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.ANN.Trainer.test_evaluation": [[76, 106], ["ANN.Trainer.model.eval", "torch.no_grad", "enumerate", "len", "ANN.Trainer.model.noise.exp().item", "y_all.extend", "x_all.extend", "ANN.Trainer.model", "y.tolist", "x.tolist", "x.to", "out.argmax.argmax.argmax", "pred.extend", "pred.extend", "ANN.Trainer.model.noise.exp", "out.argmax.argmax.tolist", "out[].tolist", "ANN.Trainer.extend", "out[].exp().tolist", "out[].exp"], "methods", ["None"], ["", "def", "test_evaluation", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "pred", "=", "[", "]", "\n", "x_all", "=", "[", "]", "\n", "y_all", "=", "[", "]", "\n", "noises", "=", "[", "]", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "self", ".", "test_data", ")", ":", "\n", "                ", "y_all", ".", "extend", "(", "y", ".", "tolist", "(", ")", ")", "\n", "x_all", ".", "extend", "(", "x", ".", "tolist", "(", ")", ")", "\n", "\n", "out", "=", "self", ".", "model", "(", "x", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "\n", "if", "not", "self", ".", "regression", ":", "\n", "                    ", "out", "=", "out", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "pred", ".", "extend", "(", "out", ".", "tolist", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "pred", ".", "extend", "(", "out", "[", ":", ",", "0", "]", ".", "tolist", "(", ")", ")", "\n", "if", "self", ".", "model", ".", "classes", "==", "2", ":", "\n", "                        ", "noises", ".", "extend", "(", "out", "[", ":", ",", "1", "]", ".", "exp", "(", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "", "", "", "if", "not", "self", ".", "regression", ":", "\n", "            ", "return", "y_all", ",", "pred", "\n", "\n", "", "if", "len", "(", "noises", ")", "==", "0", ":", "\n", "            ", "noises", "=", "self", ".", "model", ".", "noise", ".", "exp", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "return", "x_all", ",", "y_all", ",", "pred", ",", "noises", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.DropoutNet.Dropnet.__init__": [[12, 21], ["base.Network.__init__", "kwargs.get", "base.get_network"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.__init__", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.get_network"], ["    ", "def", "__init__", "(", "self", ",", "sample", ",", "classes", ",", "topology", "=", "None", ",", "regression", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "classes", ",", "regression", ")", "\n", "\n", "self", ".", "p", "=", "kwargs", ".", "get", "(", "'drop'", ",", "0.5", ")", "\n", "\n", "if", "topology", "is", "None", ":", "\n", "            ", "topology", "=", "[", "400", ",", "400", "]", "\n", "\n", "", "self", ".", "features", "=", "get_network", "(", "topology", ",", "sample", ",", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.DropoutNet.Dropnet._forward": [[22, 30], ["enumerate", "isinstance", "i", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "for", "j", ",", "i", "in", "enumerate", "(", "self", ".", "features", ")", ":", "\n", "            ", "if", "isinstance", "(", "i", ",", "(", "torch", ".", "nn", ".", "Linear", ",", "torch", ".", "nn", ".", "Conv2d", ")", ")", ":", "\n", "                ", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "p", ",", "training", "=", "True", ",", "inplace", "=", "False", ")", "\n", "", "x", "=", "i", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.DropoutNet.Dropnet.forward": [[31, 41], ["range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "DropoutNet.Dropnet._forward", "torch.stack.append", "torch.stack.append"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.BMMD._forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "samples", "=", "1", ")", ":", "\n", "        ", "o", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "samples", ")", ":", "\n", "            ", "op", "=", "self", ".", "_forward", "(", "x", ")", "\n", "o", ".", "append", "(", "op", ")", "\n", "\n", "", "o", "=", "torch", ".", "stack", "(", "o", ")", "\n", "\n", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.DropoutNet.Dropnet.eval_forward": [[42, 45], ["DropoutNet.Dropnet."], "methods", ["None"], ["", "def", "eval_forward", "(", "self", ",", "x", ",", "samples", "=", "1", ")", ":", "\n", "        ", "o", "=", "self", "(", "x", ",", "samples", "=", "samples", ")", "\n", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.DropoutNet.Trainer.__init__": [[48, 51], ["base.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ":", "nn", ".", "Module", ",", "train_data", ",", "test_data", ",", "optimizer", ",", "wd", "=", "1e-5", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "train_data", ",", "test_data", ",", "optimizer", ")", "\n", "self", ".", "wd", "=", "wd", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.DropoutNet.Trainer.train_epoch": [[52, 101], ["DropoutNet.Trainer.model.train", "tqdm.tqdm.tqdm", "enumerate", "x.to.to.to", "y.to.to.to", "train_true.extend", "DropoutNet.Trainer.optimizer.zero_grad", "DropoutNet.Trainer.model", "train_pred.extend", "losses.append", "DropoutNet.Trainer.backward", "DropoutNet.Trainer.optimizer.step", "tqdm.tqdm.tqdm.set_postfix", "len", "y.to.to.tolist", "out.argmax.argmax.mean", "DropoutNet.Trainer.loss_function", "torch.softmax().mean", "torch.softmax().mean", "torch.softmax().mean", "torch.softmax().mean", "out.argmax.argmax.argmax", "out.argmax.argmax.tolist", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "DropoutNet.Trainer.model.parameters", "DropoutNet.Trainer.item", "DropoutNet.Trainer.model.noise.exp", "DropoutNet.Trainer.loss_function", "DropoutNet.Trainer.loss_function", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "DropoutNet.Trainer.item", "out[].exp", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "train_epoch", "(", "self", ",", "samples", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "losses", "=", "[", "]", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "progress_bar", "=", "tqdm", "(", "enumerate", "(", "self", ".", "train_data", ")", ",", "total", "=", "len", "(", "self", ".", "train_data", ")", ",", "disable", "=", "False", ",", "leave", "=", "False", ")", "\n", "\n", "train_true", "=", "[", "]", "\n", "train_pred", "=", "[", "]", "\n", "\n", "for", "batch", ",", "(", "x", ",", "y", ")", "in", "progress_bar", ":", "\n", "            ", "x", "=", "x", ".", "to", "(", "self", ".", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "self", ".", "device", ")", "\n", "train_true", ".", "extend", "(", "y", ".", "tolist", "(", ")", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "out", "=", "self", ".", "model", "(", "x", ",", "samples", "=", "samples", ")", "\n", "\n", "if", "self", ".", "regression", ":", "\n", "                ", "out", "=", "out", ".", "mean", "(", "0", ")", "\n", "\n", "if", "self", ".", "model", ".", "classes", "==", "1", ":", "\n", "                    ", "noise", "=", "self", ".", "model", ".", "noise", ".", "exp", "(", ")", "\n", "x", "=", "out", "\n", "loss", "=", "self", ".", "loss_function", "(", "x", ",", "y", ",", "noise", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "self", ".", "loss_function", "(", "out", "[", ":", ",", ":", "1", "]", ",", "y", ",", "out", "[", ":", ",", "1", ":", "]", ".", "exp", "(", ")", ")", "\n", "", "loss", "=", "loss", "/", "x", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "loss", "=", "self", ".", "loss_function", "(", "out", ",", "y", ")", "\n", "out", "=", "torch", ".", "softmax", "(", "out", ",", "-", "1", ")", ".", "mean", "(", "0", ")", "\n", "out", "=", "out", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "\n", "", "train_pred", ".", "extend", "(", "out", ".", "tolist", "(", ")", ")", "\n", "\n", "if", "self", ".", "wd", "!=", "0", ":", "\n", "                ", "l2_reg", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "                    ", "l2_reg", "+=", "torch", ".", "norm", "(", "param", ")", "\n", "\n", "", "loss", "+=", "self", ".", "wd", "*", "l2_reg", "\n", "\n", "", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "progress_bar", ".", "set_postfix", "(", "ce_loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "return", "losses", ",", "(", "train_true", ",", "train_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.DropoutNet.Trainer.train_step": [[102, 106], ["DropoutNet.Trainer.train_epoch", "DropoutNet.Trainer.test_evaluation"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.train_epoch", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.ANN.Trainer.test_evaluation"], ["", "def", "train_step", "(", "self", ",", "train_samples", "=", "1", ",", "test_samples", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "losses", ",", "train_res", "=", "self", ".", "train_epoch", "(", "samples", "=", "train_samples", ")", "\n", "test_res", "=", "self", ".", "test_evaluation", "(", "samples", "=", "test_samples", ")", "\n", "return", "losses", ",", "train_res", ",", "test_res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Gaussian.__init__": [[6, 10], ["torch.distributions.Normal"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mu", "=", "0", ",", "sigma", "=", "5", ")", ":", "\n", "        ", "self", ".", "mu", "=", "mu", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "inner_gaussian", "=", "Normal", "(", "mu", ",", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Gaussian.sample": [[11, 13], ["priors.Gaussian.inner_gaussian.rsample"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "size", ")", ":", "\n", "        ", "return", "self", ".", "inner_gaussian", ".", "rsample", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Gaussian.log_prob": [[14, 16], ["priors.Gaussian.inner_gaussian.log_prob"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Uniform.log_prob"], ["", "def", "log_prob", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "inner_gaussian", ".", "log_prob", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Laplace.__init__": [[19, 23], ["torch.distributions.laplace.Laplace"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mu", "=", "0", ",", "scale", "=", "1", ")", ":", "\n", "        ", "self", ".", "mu", "=", "mu", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "distribution", "=", "torch", ".", "distributions", ".", "laplace", ".", "Laplace", "(", "mu", ",", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Laplace.sample": [[24, 26], ["priors.Laplace.distribution.rsample"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "size", ")", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "rsample", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Laplace.log_prob": [[27, 29], ["priors.Laplace.distribution.log_prob"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Uniform.log_prob"], ["", "def", "log_prob", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "log_prob", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.ScaledMixtureGaussian.__init__": [[32, 40], ["priors.Gaussian", "priors.Gaussian"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pi", ",", "s1", ",", "s2", ",", "mu1", "=", "0", ",", "mu2", "=", "0", ")", ":", "\n", "        ", "self", ".", "pi", "=", "pi", "\n", "self", ".", "s1", "=", "s1", "\n", "self", ".", "s2", "=", "s2", "\n", "self", ".", "mu1", "=", "mu1", "\n", "self", ".", "mu2", "=", "mu2", "\n", "self", ".", "gaussian1", "=", "Gaussian", "(", "mu1", ",", "s1", ")", "\n", "self", ".", "gaussian2", "=", "Gaussian", "(", "mu2", ",", "s2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.ScaledMixtureGaussian.sample": [[41, 43], ["priors.ScaledMixtureGaussian.gaussian1.sample", "priors.ScaledMixtureGaussian.gaussian2.sample"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Uniform.sample", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Uniform.sample"], ["", "def", "sample", "(", "self", ",", "size", ")", ":", "\n", "        ", "return", "self", ".", "pi", "*", "self", ".", "gaussian1", ".", "sample", "(", "size", ")", "+", "(", "1", "-", "self", ".", "pi", ")", "*", "self", ".", "gaussian2", ".", "sample", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.ScaledMixtureGaussian.log_prob": [[44, 46], ["priors.ScaledMixtureGaussian.gaussian1.log_prob", "priors.ScaledMixtureGaussian.gaussian2.log_prob"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Uniform.log_prob", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Uniform.log_prob"], ["", "def", "log_prob", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "pi", "*", "self", ".", "gaussian1", ".", "log_prob", "(", "x", ")", "+", "(", "1", "-", "self", ".", "pi", ")", "*", "self", ".", "gaussian2", ".", "log_prob", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Uniform.__init__": [[49, 51], ["torch.distributions.uniform.Uniform"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "self", ".", "dist", "=", "torch", ".", "distributions", ".", "uniform", ".", "Uniform", "(", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Uniform.sample": [[52, 54], ["priors.Uniform.dist.rsample"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "size", ")", ":", "\n", "        ", "return", "self", ".", "dist", ".", "rsample", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Uniform.log_prob": [[55, 57], ["priors.Uniform.dist.log_prob", "x.cpu"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Uniform.log_prob"], ["", "def", "log_prob", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "dist", ".", "log_prob", "(", "x", ".", "cpu", "(", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.main_regression.RegressionDataset.__init__": [[26, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "self", ".", "x", ",", "self", ".", "y", "=", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.main_regression.RegressionDataset.__len__": [[29, 31], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.main_regression.RegressionDataset.__getitem__": [[32, 36], ["torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "target", "=", "self", ".", "x", "[", "index", "]", ",", "self", ".", "y", "[", "index", "]", "\n", "\n", "return", "torch", ".", "tensor", "(", "img", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "torch", ".", "tensor", "(", "target", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.main_regression.get_dataset": [[38, 73], ["numpy.concatenate", "np.concatenate.sort", "GPy.kern.RBF", "numpy.concatenate", "numpy.arange", "main_regression.RegressionDataset", "main_regression.RegressionDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "numpy.abs", "GPy.kern.RBF.K", "numpy.random.multivariate_normal", "y.mean", "numpy.zeros", "numpy.arange", "numpy.arange", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.eye"], "function", ["None"], ["", "", "def", "get_dataset", "(", "batch_size", ",", "regression_points", ",", "points_range", ",", "variance", ",", "noise", ")", ":", "\n", "    ", "lengthscale", "=", "1", "\n", "\n", "dist", "=", "np", ".", "abs", "(", "points_range", "[", "0", "]", "-", "points_range", "[", "1", "]", ")", "//", "2", "\n", "\n", "x", "=", "np", ".", "concatenate", "(", "(", "\n", "np", ".", "random", ".", "uniform", "(", "points_range", "[", "0", "]", "-", "dist", ",", "points_range", "[", "0", "]", ",", "regression_points", "//", "2", ")", "[", ":", ",", "None", "]", ",", "\n", "np", ".", "random", ".", "uniform", "(", "points_range", "[", "0", "]", ",", "points_range", "[", "1", "]", ",", "regression_points", ")", "[", ":", ",", "None", "]", ",", "\n", "np", ".", "random", ".", "uniform", "(", "points_range", "[", "1", "]", ",", "points_range", "[", "1", "]", "+", "dist", ",", "regression_points", "//", "2", ")", "[", ":", ",", "None", "]", "\n", ")", ")", "\n", "\n", "x", ".", "sort", "(", "axis", "=", "0", ")", "\n", "\n", "k", "=", "GPy", ".", "kern", ".", "RBF", "(", "input_dim", "=", "1", ",", "variance", "=", "variance", ",", "lengthscale", "=", "lengthscale", ")", "\n", "C", "=", "k", ".", "K", "(", "x", ",", "x", ")", "+", "np", ".", "eye", "(", "x", ".", "shape", "[", "0", "]", ")", "*", "(", "x", ")", "**", "2", "*", "noise", "**", "2", "\n", "\n", "y", "=", "np", ".", "random", ".", "multivariate_normal", "(", "np", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "C", ")", "[", ":", ",", "None", "]", "\n", "y", "=", "(", "y", "-", "y", ".", "mean", "(", ")", ")", "\n", "\n", "test_idx", "=", "np", ".", "concatenate", "(", "(", "np", ".", "arange", "(", "0", ",", "regression_points", "//", "2", ")", ",", "\n", "np", ".", "arange", "(", "regression_points", "//", "2", "+", "regression_points", ",", "regression_points", "*", "2", ")", ")", ")", "\n", "\n", "train_idx", "=", "np", ".", "arange", "(", "regression_points", "//", "2", ",", "regression_points", "//", "2", "+", "regression_points", ")", "\n", "\n", "train_dataset", "=", "RegressionDataset", "(", "x", "[", "train_idx", "]", ",", "\n", "y", "[", "train_idx", "]", ")", "\n", "\n", "test_dataset", "=", "RegressionDataset", "(", "x", "[", "test_idx", "]", ",", "\n", "y", "[", "test_idx", "]", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", ",", "train_dataset", "[", "0", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.main_regression.main": [[75, 302], ["print", "data.get", "data.get", "data.get", "data.get", "data.get().lower", "data[].lower", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "isinstance", "enumerate", "print", "experiments_results.append", "data.get.get", "ValueError", "ValueError", "ValueError", "os.path.exists", "os.makedirs", "torch.manual_seed", "numpy.random.seed", "base_model", "base_model.to", "data.get().lower.", "tqdm.tqdm", "tqdm.tqdm.set_postfix", "trainer", "matplotlib.fill_between", "matplotlib.fill_between", "matplotlib.fill_between", "matplotlib.plot", "matplotlib.ylim", "matplotlib.xlim", "matplotlib.grid", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.savefig", "matplotlib.close", "run_results.append", "tqdm.tqdm.close", "data.get", "torch.cuda.is_available", "data.get", "ValueError", "int", "ValueError", "main_regression.get_dataset", "base_model.parameters", "range", "trainer.train_step", "tqdm.tqdm.set_postfix", "torch.no_grad", "torch.linspace", "trainer.model.eval_forward", "x_true.cpu().numpy.cpu().numpy", "pred.mean.cpu().numpy", "min", "max", "matplotlib.scatter", "min", "max", "matplotlib.scatter", "numpy.abs", "numpy.min", "numpy.max", "os.path.join", "list", "priors.Gaussian", "numpy.abs", "x_true[].to", "len", "pred.mean.mean", "numpy.exp", "y.min().item", "y.max().item", "y.min().item", "y.max().item", "priors.Laplace", "numpy.mean", "x_true.cpu().numpy.cpu", "pred.mean.cpu", "numpy.asarray", "priors.ScaledMixtureGaussian", "y.min", "y.max", "y.min", "y.max", "priors.Uniform", "len", "torch.tensor", "torch.tensor", "trainer.model.noise.exp().item", "float", "float", "trainer.model.noise.exp"], "function", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_training.get_dataset", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.train_step", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.BMMD.eval_forward"], ["", "def", "main", "(", "experiment", ")", ":", "\n", "    ", "import", "tqdm", "as", "tqdm", "\n", "\n", "import", "BBB", "\n", "import", "BMMD", "\n", "\n", "import", "os", "\n", "import", "numpy", "as", "np", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n", "Optimizers", "=", "[", "'sgd'", ",", "'adam'", ",", "'rmsprop'", "]", "\n", "NetworkTypes", "=", "[", "'bbb'", ",", "'mmd'", ",", "'normal'", ",", "'dropout'", "]", "\n", "Datasets", "=", "[", "'homo'", ",", "'hetero'", "]", "\n", "# PosteriorType = ['layers', 'neurons', 'weights', 'multiplicative']", "\n", "# LrScheduler = ['step', 'exponential', 'plateau']", "\n", "Priors", "=", "[", "'gaussian'", ",", "'laplace'", ",", "'uniform'", ",", "'scaledGaussian'", "]", "\n", "\n", "experiments_results", "=", "[", "]", "\n", "\n", "# experiments_path = experiment['experiments_path']", "\n", "\n", "# experiments = experiment['experiments']", "\n", "\n", "# print(cm.colors)", "\n", "for", "data", "in", "experiment", ":", "\n", "        ", "print", "(", "data", "[", "'save_path'", "]", ",", "data", "[", "'exp_name'", "]", ")", "\n", "\n", "if", "data", ".", "get", "(", "'skip'", ",", "False", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "lr", "=", "data", ".", "get", "(", "'lr'", ",", "1e-3", ")", "\n", "topology", "=", "data", "[", "'topology'", "]", "\n", "weights_mu_init", "=", "data", ".", "get", "(", "'mu_init'", ",", "None", ")", "\n", "weights_rho_init", "=", "data", ".", "get", "(", "'rho_init'", ",", "None", ")", "\n", "optimizer", "=", "data", ".", "get", "(", "'optimizer'", ",", "'adam'", ")", ".", "lower", "(", ")", "\n", "dataset", "=", "data", "[", "\"dataset\"", "]", "\n", "network", "=", "data", "[", "\"network_type\"", "]", ".", "lower", "(", ")", "\n", "# experiments = data.get('experiments', 1)", "\n", "seeds", "=", "data", ".", "get", "(", "'experiments_seeds'", ",", "[", "0", "]", ")", "\n", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "data", ".", "get", "(", "'use_cuda'", ",", "True", ")", "else", "'cpu'", "\n", "save_path", "=", "data", "[", "'save_path'", "]", "\n", "load_path", "=", "data", ".", "get", "(", "'load_path'", ",", "save_path", ")", "\n", "\n", "loss_weights", "=", "data", ".", "get", "(", "'loss_weights'", ",", "{", "}", ")", "\n", "\n", "epochs", "=", "data", "[", "'epochs'", "]", "\n", "train_samples", "=", "data", ".", "get", "(", "'train_samples'", ",", "2", ")", "\n", "test_samples", "=", "data", ".", "get", "(", "'test_samples'", ",", "2", ")", "\n", "exp_name", "=", "data", "[", "'exp_name'", "]", "\n", "save", "=", "data", "[", "'save'", "]", "\n", "load", "=", "data", "[", "'load'", "]", "\n", "dev_split", "=", "data", ".", "get", "(", "'dev_split'", ",", "0", ")", "\n", "local_trick", "=", "data", ".", "get", "(", "'local_trick'", ",", "False", ")", "\n", "# label = data.get(\"label\", network)", "\n", "network_parameters", "=", "data", ".", "get", "(", "'network_parameters'", ",", "{", "}", ")", "\n", "posterior_type", "=", "data", ".", "get", "(", "'posterior_type'", ",", "'weights'", ")", "\n", "\n", "regression_points", "=", "data", ".", "get", "(", "'regression_points'", ",", "100", ")", "\n", "\n", "variance", "=", "data", "[", "'variance'", "]", "\n", "noise", "=", "data", "[", "'noise'", "]", "\n", "points_range", "=", "data", ".", "get", "(", "'range'", ",", "[", "-", "10", ",", "10", "]", ")", "\n", "batch_size", "=", "data", ".", "get", "(", "'batch_size'", ",", "10", ")", "\n", "\n", "# PRIORS", "\n", "\n", "prior", "=", "None", "\n", "data_prior", "=", "data", ".", "get", "(", "'prior'", ")", "\n", "\n", "if", "data_prior", ":", "\n", "            ", "t", "=", "data_prior", ".", "get", "(", "'type'", ")", "\n", "if", "t", "not", "in", "Priors", ":", "\n", "                ", "raise", "ValueError", "(", "'Supported priors'", ",", "list", "(", "Priors", ")", ")", "\n", "", "else", ":", "\n", "                ", "if", "t", "==", "'gaussian'", ":", "\n", "                    ", "prior", "=", "Gaussian", "(", "data_prior", "[", "'mu'", "]", ",", "data_prior", "[", "'sigma'", "]", ")", "\n", "", "elif", "t", "==", "'laplace'", ":", "\n", "                    ", "prior", "=", "Laplace", "(", "data_prior", "[", "'mu'", "]", ",", "data_prior", "[", "'scale'", "]", ")", "\n", "", "elif", "t", "==", "'scaledGaussian'", ":", "\n", "                    ", "prior", "=", "ScaledMixtureGaussian", "(", "pi", "=", "data_prior", "[", "'phi'", "]", ",", "mu1", "=", "data_prior", "[", "'mu1'", "]", ",", "s1", "=", "data_prior", "[", "'sigma1'", "]", ",", "\n", "mu2", "=", "data_prior", "[", "'mu2'", "]", ",", "s2", "=", "data_prior", "[", "'sigma2'", "]", ")", "\n", "", "elif", "t", "==", "'uniform'", ":", "\n", "                    ", "a", ",", "b", "=", "data_prior", "[", "'a'", "]", ",", "data_prior", "[", "'b'", "]", "\n", "if", "network", "==", "'bbb'", ":", "\n", "                        ", "a", "=", "torch", ".", "tensor", "(", "[", "float", "(", "a", ")", "]", ")", "\n", "b", "=", "torch", ".", "tensor", "(", "[", "float", "(", "b", ")", "]", ")", "\n", "", "prior", "=", "Uniform", "(", "a", "=", "a", ",", "b", "=", "b", ")", "\n", "\n", "", "", "", "if", "epochs", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'The number of epoch should be > 0'", ")", "\n", "\n", "", "if", "isinstance", "(", "seeds", ",", "int", ")", ":", "\n", "            ", "seeds", "=", "[", "seeds", "]", "\n", "\n", "", "if", "network", "not", "in", "NetworkTypes", ":", "\n", "            ", "raise", "ValueError", "(", "'Supported networks'", ",", "NetworkTypes", ")", "\n", "", "else", ":", "\n", "            ", "if", "network", "==", "'mmd'", ":", "\n", "                ", "base_model", "=", "BMMD", ".", "BMMD", "\n", "trainer", "=", "BMMD", ".", "Trainer", "\n", "data", "[", "'color'", "]", "=", "'red'", "\n", "", "elif", "network", "==", "'bbb'", ":", "\n", "                ", "base_model", "=", "BBB", ".", "BBB", "\n", "trainer", "=", "BBB", ".", "Trainer", "\n", "data", "[", "'color'", "]", "=", "'green'", "\n", "", "elif", "network", "==", "'normal'", ":", "\n", "                ", "base_model", "=", "ANN", ".", "ANN", "\n", "trainer", "=", "ANN", ".", "Trainer", "\n", "data", "[", "'color'", "]", "=", "'blue'", "\n", "", "elif", "network", "==", "'dropout'", ":", "\n", "                ", "base_model", "=", "DropoutNet", ".", "Dropnet", "\n", "trainer", "=", "DropoutNet", ".", "Trainer", "\n", "data", "[", "'color'", "]", "=", "'k'", "\n", "\n", "", "", "if", "optimizer", "not", "in", "Optimizers", ":", "\n", "            ", "raise", "ValueError", "(", "'Supported optimizers'", ",", "Optimizers", ")", "\n", "", "else", ":", "\n", "            ", "if", "optimizer", "==", "'sgd'", ":", "\n", "                ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "\n", "\n", "", "elif", "optimizer", "==", "'adam'", ":", "\n", "                ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "\n", "\n", "", "elif", "optimizer", "==", "'rmsprop'", ":", "\n", "                ", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "\n", "\n", "", "", "run_results", "=", "[", "]", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "for", "e", ",", "seed", "in", "enumerate", "(", "seeds", ")", ":", "\n", "\n", "            ", "seed", "=", "seed", "+", "int", "(", "noise", "*", "100", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "if", "dataset", "not", "in", "Datasets", ":", "\n", "                ", "raise", "ValueError", "(", "'Supported datasets {}, given {}'", ".", "format", "(", "Datasets", ",", "dataset", ")", ")", "\n", "", "else", ":", "\n", "                ", "train_loader", ",", "test_loader", ",", "sample", "=", "get_dataset", "(", "batch_size", ",", "regression_points", "=", "regression_points", ",", "\n", "variance", "=", "variance", ",", "noise", "=", "noise", ",", "\n", "points_range", "=", "points_range", ")", "\n", "if", "dataset", "==", "'homo'", ":", "\n", "                    ", "classes", "=", "1", "\n", "", "else", ":", "\n", "                    ", "classes", "=", "2", "\n", "\n", "", "", "model", "=", "base_model", "(", "prior", "=", "prior", ",", "mu_init", "=", "weights_mu_init", ",", "device", "=", "device", ",", "regression", "=", "True", ",", "\n", "rho_init", "=", "weights_rho_init", ",", "topology", "=", "topology", ",", "classes", "=", "classes", ",", "local_trick", "=", "local_trick", ",", "\n", "sample", "=", "sample", ",", "**", "network_parameters", ",", "posterior_type", "=", "posterior_type", ")", "\n", "\n", "model", ".", "to", "(", "device", ")", "\n", "# print([(n, p.device) for n, p in model.named_parameters()])", "\n", "opt", "=", "optimizer", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "\n", "results", "=", "{", "}", "\n", "epoch_start", "=", "0", "\n", "\n", "progress_bar", "=", "tqdm", ".", "tqdm", "(", "range", "(", "epoch_start", ",", "epochs", ")", ",", "initial", "=", "epoch_start", ",", "total", "=", "epochs", ")", "\n", "progress_bar", ".", "set_postfix", "(", "loss", "=", "''", ")", "\n", "\n", "t", "=", "trainer", "(", "model", ",", "train_loader", ",", "test_loader", ",", "opt", ")", "\n", "\n", "for", "_", "in", "progress_bar", ":", "\n", "                ", "loss", ",", "_", ",", "_", "=", "t", ".", "train_step", "(", "train_samples", "=", "train_samples", ",", "test_samples", "=", "test_samples", ",", "\n", "weights", "=", "loss_weights", ")", "\n", "progress_bar", ".", "set_postfix", "(", "loss", "=", "np", ".", "mean", "(", "loss", ")", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "dist", "=", "np", ".", "abs", "(", "points_range", "[", "0", "]", "-", "points_range", "[", "1", "]", ")", "//", "2", "\n", "x_true", "=", "torch", ".", "linspace", "(", "points_range", "[", "0", "]", "-", "dist", ",", "points_range", "[", "1", "]", "+", "dist", ",", "500", ")", "\n", "pred", "=", "t", ".", "model", ".", "eval_forward", "(", "x_true", "[", ":", ",", "None", "]", ".", "to", "(", "device", ")", ",", "samples", "=", "test_samples", ")", "\n", "x_true", "=", "x_true", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "pred", "=", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "len", "(", "pred", ".", "shape", ")", ">", "2", ":", "\n", "                    ", "pred", "=", "pred", ".", "mean", "(", "0", ")", "\n", "\n", "", "if", "classes", "==", "2", ":", "\n", "                    ", "pred", "[", ":", ",", "1", ":", "]", "=", "np", ".", "exp", "(", "pred", "[", ":", ",", "1", ":", "]", ")", "\n", "y_pred", ",", "y_noise", "=", "pred", "[", ":", ",", "0", "]", ",", "pred", "[", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "                    ", "y_pred", ",", "y_noise", "=", "pred", "[", ":", ",", "0", "]", ",", "np", ".", "asarray", "(", "[", "t", ".", "model", ".", "noise", ".", "exp", "(", ")", ".", "item", "(", ")", "]", "*", "len", "(", "x_true", ")", ")", "\n", "\n", "", "", "mx", "=", "-", "np", ".", "inf", "\n", "mn", "=", "+", "np", ".", "inf", "\n", "\n", "for", "x", ",", "y", "in", "train_loader", ":", "\n", "                ", "mn", "=", "min", "(", "y", ".", "min", "(", ")", ".", "item", "(", ")", ",", "mn", ")", "\n", "mx", "=", "max", "(", "y", ".", "max", "(", ")", ".", "item", "(", ")", ",", "mx", ")", "\n", "plt", ".", "scatter", "(", "x", ",", "y", ",", "c", "=", "'b'", ",", "marker", "=", "'+'", ",", "alpha", "=", "0.5", ",", "s", "=", "1", ")", "\n", "\n", "", "for", "x", ",", "y", "in", "test_loader", ":", "\n", "                ", "mn", "=", "min", "(", "y", ".", "min", "(", ")", ".", "item", "(", ")", ",", "mn", ")", "\n", "mx", "=", "max", "(", "y", ".", "max", "(", ")", ".", "item", "(", ")", ",", "mx", ")", "\n", "plt", ".", "scatter", "(", "x", ",", "y", ",", "c", "=", "'r'", ",", "s", "=", "4", ")", "\n", "\n", "", "plt", ".", "fill_between", "(", "x_true", ",", "y_pred", "-", "y_noise", ",", "y_pred", "+", "y_noise", ",", "alpha", "=", "0.2", ")", "\n", "plt", ".", "fill_between", "(", "x_true", ",", "y_pred", "-", "2", "*", "y_noise", ",", "y_pred", "+", "2", "*", "y_noise", ",", "alpha", "=", "0.2", ")", "\n", "plt", ".", "fill_between", "(", "x_true", ",", "y_pred", "-", "3", "*", "y_noise", ",", "y_pred", "+", "3", "*", "y_noise", ",", "alpha", "=", "0.2", ")", "\n", "\n", "plt", ".", "plot", "(", "x_true", ",", "y_pred", ",", "linewidth", "=", "0.8", ")", "\n", "offset", "=", "np", ".", "abs", "(", "mn", "-", "mx", ")", "*", "0.1", "\n", "\n", "plt", ".", "ylim", "(", "mn", "-", "offset", ",", "mx", "+", "offset", ")", "\n", "plt", ".", "xlim", "(", "np", ".", "min", "(", "x_true", ")", ",", "np", ".", "max", "(", "x_true", ")", ")", "\n", "\n", "plt", ".", "grid", "(", "True", ",", "alpha", "=", "0.2", ")", "\n", "\n", "\n", "plt", ".", "xlabel", "(", "'x'", ")", "\n", "plt", ".", "ylabel", "(", "'y'", ")", "\n", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"{}_{}.pdf\"", ".", "format", "(", "e", ",", "network", ")", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "run_results", ".", "append", "(", "results", ")", "\n", "progress_bar", ".", "close", "(", ")", "\n", "\n", "", "print", "(", "'-'", "*", "200", ")", "\n", "experiments_results", ".", "append", "(", "run_results", ")", "\n", "\n", "", "return", "experiments_results", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_utils.BayesianParameters.__init__": [[10, 73], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.empty", "torch.nn.Parameter", "torch.randn", "torch.nn.init.uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.Parameter", "torch.zeros().uniform_", "numpy.sqrt", "torch.zeros().uniform_", "torch.nn.Parameter", "list", "range", "torch.zeros().normal_", "numpy.sqrt", "torch.zeros().normal_", "torch.nn.Parameter", "ValueError", "len", "torch.zeros", "ValueError", "torch.zeros", "torch.zeros", "torch.ones", "torch.zeros", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "mu_initialization", "=", "None", ",", "rho_initialization", "=", "None", ",", "posterior_type", "=", "'weights'", ",", "is_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "posterior_type", "=", "posterior_type", "\n", "self", ".", "mask", "=", "None", "\n", "\n", "if", "mu_initialization", "is", "None", ":", "\n", "            ", "t", "=", "torch", ".", "empty", "(", "size", ")", "\n", "if", "is_bias", ":", "\n", "                ", "bound", "=", "1", "/", "np", ".", "sqrt", "(", "size", ")", "\n", "init", ".", "uniform_", "(", "t", ",", "-", "bound", ",", "bound", ")", "\n", "", "else", ":", "\n", "                ", "init", ".", "kaiming_uniform_", "(", "t", ",", "a", "=", "np", ".", "sqrt", "(", "5", ")", ")", "\n", "", "self", ".", "mu", "=", "nn", ".", "Parameter", "(", "t", ",", "requires_grad", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "            ", "t", "=", "mu_initialization", "[", "'type'", "]", "\n", "\n", "if", "t", "==", "'uniform'", ":", "\n", "                ", "a", ",", "b", "=", "mu_initialization", "[", "'a'", "]", ",", "mu_initialization", "[", "'b'", "]", "\n", "self", ".", "mu", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "size", ")", ".", "uniform_", "(", "a", ",", "b", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "elif", "t", "==", "'gaussian'", ":", "\n", "                ", "mu", ",", "sigma", "=", "mu_initialization", "[", "'mu'", "]", ",", "mu_initialization", "[", "'sigma'", "]", "\n", "self", ".", "mu", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "size", ")", ".", "normal_", "(", "mu", ",", "sigma", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "elif", "t", "==", "'constant'", ":", "\n", "                ", "self", ".", "mu", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "size", ")", "*", "mu_initialization", "[", "'c'", "]", ",", "requires_grad", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Pissible initialization for mu parameter: \\n\"", "\n", "\"-gaussian {{mu, sigma}}\\n\"", "\n", "\"-uniform {{a, b}}\\n\"", "\n", "\"-constant {{c}}. \\n {} was given\"", ".", "format", "(", "t", ")", ")", "\n", "\n", "", "", "rho_size", "=", "size", "\n", "\n", "if", "posterior_type", "==", "'layers'", ":", "\n", "            ", "rho_size", "=", "(", "1", ",", ")", "\n", "", "elif", "posterior_type", "==", "'neurons'", ":", "\n", "            ", "if", "is_bias", ":", "\n", "                ", "rho_size", "=", "size", "\n", "", "else", ":", "\n", "                ", "rho_size", "=", "list", "(", "size", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "rho_size", ")", ")", ":", "\n", "                    ", "rho_size", "[", "i", "]", "=", "1", "\n", "\n", "", "", "", "if", "rho_initialization", "is", "None", ":", "\n", "            ", "rho", "=", "torch", ".", "randn", "(", "rho_size", ")", "\n", "", "else", ":", "\n", "            ", "t", "=", "rho_initialization", "[", "'type'", "]", "\n", "\n", "if", "t", "==", "'uniform'", ":", "\n", "                ", "a", ",", "b", "=", "rho_initialization", "[", "'a'", "]", ",", "rho_initialization", "[", "'b'", "]", "\n", "rho", "=", "torch", ".", "zeros", "(", "rho_size", ")", ".", "uniform_", "(", "a", ",", "b", ")", "\n", "", "elif", "t", "==", "'gaussian'", ":", "\n", "                ", "mu", ",", "sigma", "=", "rho_initialization", "[", "'mu'", "]", ",", "rho_initialization", "[", "'sigma'", "]", "\n", "rho", "=", "torch", ".", "zeros", "(", "rho_size", ")", ".", "normal_", "(", "mu", ",", "sigma", ")", "\n", "", "elif", "t", "==", "'constant'", ":", "\n", "                ", "rho", "=", "torch", ".", "ones", "(", "rho_size", ")", "*", "rho_initialization", "[", "'c'", "]", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Pissible initialization for rho parameter: \\n\"", "\n", "\"-gaussian {{mu, sigma}}\\n\"", "\n", "\"-uniform {{a, b}}\\n\"", "\n", "\"-constant {{c}}. \\n {} was given\"", ".", "format", "(", "t", ")", ")", "\n", "\n", "", "", "self", ".", "rho", "=", "nn", ".", "Parameter", "(", "rho", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_utils.BayesianParameters.set_mask": [[74, 79], ["ValueError"], "methods", ["None"], ["", "def", "set_mask", "(", "self", ",", "p", ")", ":", "\n", "        ", "if", "p", "is", "not", "None", ":", "\n", "            ", "if", "p", "<", "0", "or", "p", ">", "1", ":", "\n", "                ", "raise", "ValueError", "(", "'Mask percentile should be between 0 and 1, {} was given'", ".", "format", "(", "p", ")", ")", "\n", "", "", "self", ".", "mask", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_utils.BayesianParameters.weights": [[80, 95], ["torch.abs", "numpy.percentile", "torch.ones_like", "torch.randn().to", "snr.cpu", "torch.randn", "torch.tensor"], "methods", ["None"], ["", "@", "property", "\n", "def", "weights", "(", "self", ")", ":", "\n", "        ", "sigma", "=", "self", ".", "sigma", "\n", "r", "=", "self", ".", "mu", "+", "sigma", "*", "torch", ".", "randn", "(", "self", ".", "mu", ".", "shape", ",", "requires_grad", "=", "True", ")", ".", "to", "(", "self", ".", "mu", ".", "device", ")", "\n", "\n", "if", "self", ".", "mask", "is", "not", "None", ":", "\n", "            ", "mean", "=", "torch", ".", "abs", "(", "self", ".", "mu", ")", "\n", "std", "=", "self", ".", "sigma", "\n", "snr", "=", "mean", "/", "std", "\n", "percentile", "=", "np", ".", "percentile", "(", "snr", ".", "cpu", "(", ")", ",", "self", ".", "mask", "*", "100", ")", "\n", "mask", "=", "torch", ".", "ones_like", "(", "snr", ")", "\n", "mask", "[", "snr", "<", "torch", ".", "tensor", "(", "percentile", ")", "]", "=", "0", "\n", "r", "=", "r", "*", "mask", "\n", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_utils.BayesianParameters.sigma": [[96, 104], ["torch.nn.functional.softplus", "torch.mul", "torch.mul", "torch.nn.functional.softplus", "bayesian_utils.BayesianParameters.mu.pow", "torch.nn.functional.softplus", "bayesian_utils.BayesianParameters.mu.pow"], "methods", ["None"], ["", "@", "property", "\n", "def", "sigma", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "posterior_type", "==", "'weights'", ":", "\n", "            ", "return", "F", ".", "softplus", "(", "self", ".", "rho", ")", "\n", "", "if", "self", ".", "posterior_type", "==", "'multiplicative'", ":", "\n", "            ", "return", "torch", ".", "mul", "(", "F", ".", "softplus", "(", "self", ".", "rho", ")", ",", "self", ".", "mu", ".", "pow", "(", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "mul", "(", "F", ".", "softplus", "(", "self", ".", "rho", ")", ",", "self", ".", "mu", ".", "pow", "(", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_utils.BayesianParameters.posterior_distribution": [[105, 107], ["torch.distributions.Normal", "bayesian_utils.BayesianParameters.mu.data.clone", "torch.log().clone", "torch.log", "torch.exp"], "methods", ["None"], ["", "", "def", "posterior_distribution", "(", "self", ")", ":", "\n", "        ", "return", "Normal", "(", "self", ".", "mu", ".", "data", ".", "clone", "(", ")", ",", "torch", ".", "log", "(", "1", "+", "torch", ".", "exp", "(", "self", ".", "rho", ")", ")", ".", "clone", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_utils.BayesianParameters.posterior_log_prob": [[108, 110], ["bayesian_utils.BayesianParameters.posterior_distribution().log_prob", "bayesian_utils.BayesianParameters.posterior_distribution"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.priors.Uniform.log_prob", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_utils.BayesianParameters.posterior_distribution"], ["", "def", "posterior_log_prob", "(", "self", ",", "w", ")", ":", "\n", "        ", "return", "self", ".", "posterior_distribution", "(", ")", ".", "log_prob", "(", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_utils.BayesianParameters.forward": [[111, 113], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "sample", "=", "1", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_utils.b_drop": [[115, 117], ["torch.nn.functional.dropout"], "function", ["None"], ["", "", "def", "b_drop", "(", "x", ",", "p", "=", "0.5", ")", ":", "\n", "    ", "return", "F", ".", "dropout", "(", "x", ",", "p", "=", "p", ",", "training", "=", "True", ",", "inplace", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_utils.pdist": [[119, 127], ["torch.sum", "torch.sum", "torch.sqrt", "p.size", "q.size", "torch.sum.expand", "torch.sum.transpose().expand", "p.mm", "torch.abs", "torch.sum.transpose", "q.t"], "function", ["None"], ["", "def", "pdist", "(", "p", ",", "q", ")", ":", "\n", "    ", "pdim", ",", "qdim", "=", "p", ".", "size", "(", "0", ")", ",", "q", ".", "size", "(", "0", ")", "\n", "pnorm", "=", "torch", ".", "sum", "(", "p", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "qnorm", "=", "torch", ".", "sum", "(", "q", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "norms", "=", "(", "pnorm", ".", "expand", "(", "pdim", ",", "qdim", ")", "+", "\n", "qnorm", ".", "transpose", "(", "0", ",", "1", ")", ".", "expand", "(", "pdim", ",", "qdim", ")", ")", "\n", "distances_squared", "=", "norms", "-", "2", "*", "p", ".", "mm", "(", "q", ".", "t", "(", ")", ")", "\n", "return", "torch", ".", "sqrt", "(", "1e-5", "+", "torch", ".", "abs", "(", "distances_squared", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_utils.pairwise_distances": [[129, 135], ["torch.clamp", "torch.mm", "torch.transpose"], "function", ["None"], ["", "def", "pairwise_distances", "(", "x", ",", "y", ")", ":", "\n", "    ", "x_norm", "=", "(", "x", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "y_norm", "=", "(", "y", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "dist", "=", "x_norm", "+", "y_norm", "-", "2.0", "*", "torch", ".", "mm", "(", "x", ",", "torch", ".", "transpose", "(", "y", ",", "0", ",", "1", ")", ")", "\n", "return", "torch", ".", "clamp", "(", "dist", ",", "0.0", ",", "np", ".", "inf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_utils.compute_mmd": [[137, 188], ["torch.nn.functional.relu", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "bayesian_utils.pdist", "bayesian_utils.pdist", "bayesian_utils.pdist", "XY.sum.sum", "torch.exp", "torch.exp", "torch.exp", "XX.sum", "XX.trace", "YY.sum", "YY.trace", "torch.zeros", "torch.zeros", "torch.zeros", "torch.div", "torch.div", "torch.div", "XX.mean", "YY.mean", "XY.sum.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "function", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_utils.pdist", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_utils.pdist", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.bayesian_utils.pdist"], ["", "def", "compute_mmd", "(", "x", ",", "y", ",", "type", "=", "'inverse'", ",", "biased", "=", "True", ",", "space", "=", "None", ",", "max", "=", "False", ")", ":", "\n", "    ", "d", "=", "x", ".", "device", "\n", "\n", "xs", "=", "x", ".", "shape", "[", "0", "]", "\n", "XX", ",", "YY", ",", "XY", "=", "torch", ".", "zeros", "(", "[", "xs", ",", "xs", "]", ")", ".", "to", "(", "d", ")", ",", "torch", ".", "zeros", "(", "[", "xs", ",", "xs", "]", ")", ".", "to", "(", "d", ")", ",", "torch", ".", "zeros", "(", "[", "xs", ",", "xs", "]", ")", ".", "to", "(", "d", ")", "\n", "xxd", "=", "pdist", "(", "x", ",", "x", ")", "**", "2", "\n", "yyd", "=", "pdist", "(", "y", ",", "y", ")", "**", "2", "\n", "xyd", "=", "pdist", "(", "x", ",", "y", ")", "**", "2", "\n", "\n", "if", "type", "==", "'rbf'", ":", "\n", "\n", "        ", "if", "space", "is", "None", ":", "\n", "            ", "space", "=", "[", "0.5", ",", "1", ",", "2", ",", "4", ",", "8", ",", "16", "]", "\n", "\n", "", "for", "gamma", "in", "space", ":", "\n", "            ", "gamma", "=", "1.0", "/", "(", "2", "*", "gamma", "**", "2", ")", "\n", "\n", "xx", "=", "torch", ".", "exp", "(", "-", "xxd", "*", "gamma", ")", "\n", "yy", "=", "torch", ".", "exp", "(", "-", "yyd", "*", "gamma", ")", "\n", "xy", "=", "torch", ".", "exp", "(", "-", "xyd", "*", "gamma", ")", "\n", "\n", "XX", "+=", "xx", "\n", "YY", "+=", "yy", "\n", "XY", "+=", "xy", "\n", "\n", "", "", "elif", "type", "==", "'inverse'", ":", "\n", "\n", "        ", "if", "space", "is", "None", ":", "\n", "            ", "space", "=", "[", "0.05", ",", "0.2", ",", "0.6", ",", "0.9", ",", "1", "]", "\n", "\n", "", "for", "a", "in", "space", ":", "\n", "            ", "a", "=", "a", "**", "2", "\n", "xxk", "=", "torch", ".", "div", "(", "1", ",", "torch", ".", "sqrt", "(", "a", "+", "xxd", ")", ")", "\n", "yyk", "=", "torch", ".", "div", "(", "1", ",", "torch", ".", "sqrt", "(", "a", "+", "yyd", ")", ")", "\n", "xyk", "=", "torch", ".", "div", "(", "1", ",", "torch", ".", "sqrt", "(", "a", "+", "xyd", ")", ")", "\n", "\n", "XX", "+=", "xxk", "\n", "YY", "+=", "yyk", "\n", "XY", "+=", "xyk", "\n", "", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n", "", "if", "biased", ":", "\n", "        ", "mmd", "=", "XX", ".", "mean", "(", ")", "+", "YY", ".", "mean", "(", ")", "-", "2", "*", "XY", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "XX", "=", "XX", ".", "sum", "(", ")", "-", "XX", ".", "trace", "(", ")", "\n", "YY", "=", "YY", ".", "sum", "(", ")", "-", "YY", ".", "trace", "(", ")", "\n", "XY", "=", "XY", ".", "sum", "(", ")", "\n", "mmd", "=", "(", "1", "/", "(", "xs", "**", "2", ")", ")", "*", "XX", "+", "(", "1", "/", "(", "xs", "**", "2", ")", ")", "*", "YY", "-", "(", "2", "/", "(", "xs", "*", "xs", ")", ")", "*", "XY", "\n", "\n", "", "return", "F", ".", "relu", "(", "mmd", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_training.get_dataset": [[31, 102], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.transforms.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torchvision.transforms.transforms.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.transforms.transforms.Compose", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "int", "numpy.random.choice", "torch.utils.data.SubsetRandomSampler", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize", "tr.insert", "tr.append", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize", "tr.insert", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize", "tr.insert", "torchvision.transforms.transforms.Resize", "torchvision.transforms.transforms.Resize", "torchvision.transforms.transforms.Resize", "len"], "function", ["None"], ["def", "get_dataset", "(", "name", ",", "batch_size", ",", "dev_split", ",", "resize", "=", "None", ",", "train_subset", "=", "0", ")", ":", "\n", "    ", "if", "name", "in", "[", "'fMNIST'", ",", "'MNIST'", "]", ":", "\n", "\n", "        ", "tr", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "]", "\n", "\n", "if", "resize", "is", "not", "None", ":", "\n", "            ", "tr", ".", "insert", "(", "0", ",", "transforms", ".", "Resize", "(", "resize", ")", ")", "\n", "\n", "", "if", "name", "==", "\"fMNIST\"", ":", "\n", "            ", "tr", ".", "append", "(", "torch", ".", "flatten", ")", "\n", "\n", "", "image_transform", "=", "transforms", ".", "Compose", "(", "tr", ")", "\n", "\n", "train_split", "=", "datasets", ".", "MNIST", "(", "'./Datasets/MNIST'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "transform", "=", "image_transform", ")", "\n", "test_split", "=", "datasets", ".", "MNIST", "(", "'./Datasets/MNIST'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "\n", "transform", "=", "image_transform", ")", "\n", "\n", "sample", "=", "train_split", "[", "0", "]", "[", "0", "]", "\n", "classes", "=", "10", "\n", "\n", "", "if", "name", "==", "'CIFAR10'", ":", "\n", "        ", "tr", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.247", ",", "0.243", ",", "0.261", ")", ")", "]", "\n", "\n", "if", "resize", "is", "not", "None", ":", "\n", "            ", "tr", ".", "insert", "(", "0", ",", "transforms", ".", "Resize", "(", "resize", ")", ")", "\n", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "tr", ")", "\n", "\n", "train_split", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./Datasets/CIFAR10'", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "\n", "test_split", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./Datasets/CIFAR10'", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "classes", "=", "10", "\n", "sample", "=", "train_split", "[", "0", "]", "[", "0", "]", "\n", "\n", "", "if", "name", "==", "'CIFAR100'", ":", "\n", "        ", "tr", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5071", ",", "0.4867", ",", "0.4408", ")", ",", "(", "0.2675", ",", "0.2565", ",", "0.2761", ")", ")", "]", "\n", "\n", "if", "resize", "is", "not", "None", ":", "\n", "            ", "tr", ".", "insert", "(", "0", ",", "transforms", ".", "Resize", "(", "resize", ")", ")", "\n", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "tr", ")", "\n", "\n", "train_split", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "root", "=", "'./Datasets/CIFAR100'", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "\n", "test_split", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "root", "=", "'./Datasets/CIFAR100'", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "classes", "=", "100", "\n", "sample", "=", "train_split", "[", "0", "]", "[", "0", "]", "\n", "\n", "", "sampler", "=", "None", "\n", "shuffle", "=", "True", "\n", "\n", "if", "train_subset", ">", "0", ":", "\n", "\n", "        ", "train_size", "=", "int", "(", "train_subset", "*", "len", "(", "train_split", ")", ")", "\n", "idx", "=", "np", ".", "random", ".", "choice", "(", "train_split", ".", "data", ".", "shape", "[", "0", "]", ",", "train_size", ",", "replace", "=", "False", ")", "\n", "\n", "sampler", "=", "SubsetRandomSampler", "(", "idx", ")", "\n", "shuffle", "=", "False", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_split", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ",", "sampler", "=", "sampler", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_split", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "return", "sample", ",", "classes", ",", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_training.main": [[104, 447], ["os.path.exists", "os.makedirs", "print", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get().lower", "data[].lower", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "data.get", "isinstance", "tqdm.tqdm", "data.get.get", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "enumerate", "torch.manual_seed", "numpy.random.seed", "random.seed", "base_model", "base_model.to", "sum", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "trainer", "lr_scheduler.get.model.load_state_dict", "run_results.append", "print", "data.get", "torch.cuda.is_available", "data.get", "ValueError", "len", "ValueError", "classification_training.get_dataset", "_opt", "_opt", "data.get.get", "os.makedirs", "os.makedirs", "os.path.exists", "torch.load", "base_model.load_state_dict", "_opt.load_state_dict", "numpy.max", "tqdm.tqdm", "tqdm.tqdm.set_postfix", "tqdm.tqdm.close", "run_results.append", "torch.load", "os.path.exists", "lr_scheduler.get.reliability_diagram", "lr_scheduler.get.temperature_scaling", "os.path.join", "list", "priors.Gaussian", "p.numel", "base_model.parameters", "base_model.parameters", "ValueError", "torch.optim.lr_scheduler.StepLR", "os.path.exists", "os.path.exists", "os.path.join", "torch.optim.lr_scheduler.ReduceLROnPlateau.load_state_dict", "torch.load.get", "shutil.copy", "torch.load.get", "torch.load.get", "range", "time.time", "lr_scheduler.get.train_step", "time.time", "numpy.mean", "metrics.f1_score", "metrics.f1_score", "tqdm.tqdm.set_postfix", "torch.load.get", "results.get.append", "torch.load.get", "results.get.append", "torch.load.get", "results.get.append", "torch.load.update", "os.path.join", "open", "pickle.dump", "open", "pickle.dump", "numpy.max", "lr_scheduler.get.fgsm_test", "priors.Laplace", "base_model.parameters", "data.get.get", "data.get.get", "data.get.get", "torch.optim.lr_scheduler.ExponentialLR", "os.path.join", "lr_scheduler.get.test_evaluation", "metrics.f1_score", "torch.load.get", "results.get.append", "torch.load.get", "results.get.append", "torch.load.update", "torch.optim.lr_scheduler.ReduceLROnPlateau.step", "torch.load.get", "torch.save", "os.path.join", "os.path.join", "os.path.exists", "open", "pickle.dump", "priors.ScaledMixtureGaussian", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.save", "base_model.state_dict", "_opt.state_dict", "torch.load.get", "priors.Uniform", "data.get.get", "data.get.get", "lr_scheduler.get.model.state_dict", "torch.optim.lr_scheduler.ReduceLROnPlateau.state_dict", "torch.tensor", "torch.tensor", "float", "float"], "function", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.classification_training.get_dataset", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.Wrapper.reliability_diagram", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.Wrapper.temperature_scaling", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.train_step", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.Wrapper.fgsm_test", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.ANN.Trainer.test_evaluation"], ["", "def", "main", "(", "experiment", ")", ":", "\n", "    ", "import", "sklearn", ".", "metrics", "as", "metrics", "\n", "import", "tqdm", "as", "tqdm", "\n", "\n", "import", "BBB", "\n", "import", "BMMD", "\n", "\n", "import", "os", "\n", "import", "numpy", "as", "np", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n", "Optimizers", "=", "[", "'sgd'", ",", "'adam'", ",", "'rmsprop'", "]", "\n", "NetworkTypes", "=", "[", "'bbb'", ",", "'mmd'", ",", "'normal'", ",", "'dropout'", "]", "\n", "Datasets", "=", "[", "'fMNIST'", ",", "'MNIST'", ",", "'CIFAR10'", ",", "'CIFAR100'", "]", "\n", "PosteriorType", "=", "[", "'layers'", ",", "'neurons'", ",", "'weights'", ",", "'multiplicative'", "]", "\n", "LrScheduler", "=", "[", "'step'", ",", "'exponential'", ",", "'plateau'", "]", "\n", "Priors", "=", "[", "'gaussian'", ",", "'laplace'", ",", "'uniform'", ",", "'scaledGaussian'", "]", "\n", "\n", "experiments_results", "=", "[", "]", "\n", "\n", "experiments_path", "=", "experiment", "[", "'experiments_path'", "]", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "experiments_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "experiments_path", ")", "\n", "\n", "", "experiments", "=", "experiment", "[", "'experiments'", "]", "\n", "\n", "for", "data", "in", "experiments", ":", "\n", "        ", "print", "(", "data", "[", "'save_path'", "]", ",", "data", "[", "'exp_name'", "]", ")", "\n", "\n", "if", "data", ".", "get", "(", "'skip'", ",", "False", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "batch_size", "=", "data", ".", "get", "(", "'batch_size'", ",", "64", ")", "\n", "lr", "=", "data", ".", "get", "(", "'lr'", ",", "1e-3", ")", "\n", "topology", "=", "data", "[", "'topology'", "]", "\n", "weights_mu_init", "=", "data", ".", "get", "(", "'mu_init'", ",", "None", ")", "\n", "weights_rho_init", "=", "data", ".", "get", "(", "'rho_init'", ",", "None", ")", "\n", "optimizer", "=", "data", ".", "get", "(", "'optimizer'", ",", "'adam'", ")", ".", "lower", "(", ")", "\n", "dataset", "=", "data", "[", "\"dataset\"", "]", "\n", "network", "=", "data", "[", "\"network_type\"", "]", ".", "lower", "(", ")", "\n", "seeds", "=", "data", ".", "get", "(", "'experiments_seeds'", ",", "[", "0", "]", ")", "\n", "\n", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "data", ".", "get", "(", "'use_cuda'", ",", "True", ")", "else", "'cpu'", "\n", "save_path", "=", "data", "[", "'save_path'", "]", "\n", "load_path", "=", "data", ".", "get", "(", "'load_path'", ",", "save_path", ")", "\n", "\n", "loss_weights", "=", "data", ".", "get", "(", "'loss_weights'", ",", "{", "}", ")", "\n", "\n", "epochs", "=", "data", "[", "'epochs'", "]", "\n", "train_samples", "=", "data", ".", "get", "(", "'train_samples'", ",", "2", ")", "\n", "test_samples", "=", "data", ".", "get", "(", "'test_samples'", ",", "2", ")", "\n", "exp_name", "=", "data", "[", "'exp_name'", "]", "\n", "\n", "save", "=", "data", "[", "'save'", "]", "\n", "load", "=", "data", "[", "'load'", "]", "\n", "dev_split", "=", "data", ".", "get", "(", "'dev_split'", ",", "0", ")", "\n", "local_trick", "=", "data", ".", "get", "(", "'local_trick'", ",", "False", ")", "\n", "network_parameters", "=", "data", ".", "get", "(", "'network_parameters'", ",", "{", "}", ")", "\n", "posterior_type", "=", "data", ".", "get", "(", "'posterior_type'", ",", "'weights'", ")", "\n", "\n", "moment", "=", "data", ".", "get", "(", "'moment'", ",", "0", ")", "\n", "early_stopping_tolerance", "=", "data", ".", "get", "(", "'early_stopping_tolerance'", ",", "3", ")", "\n", "resize", "=", "data", ".", "get", "(", "'resize'", ",", "None", ")", "\n", "\n", "weight_decay", "=", "data", ".", "get", "(", "'weight_decay'", ",", "1e-5", "if", "network", "==", "'dropout'", "else", "0", ")", "\n", "\n", "lr_scheduler", "=", "data", ".", "get", "(", "'lr_scheduler'", ",", "None", ")", "\n", "\n", "train_subset", "=", "data", ".", "get", "(", "'train_subset'", ",", "0", ")", "\n", "# PRIORS", "\n", "\n", "prior", "=", "None", "\n", "data_prior", "=", "data", ".", "get", "(", "'prior'", ")", "\n", "\n", "if", "data_prior", ":", "\n", "            ", "t", "=", "data_prior", ".", "get", "(", "'type'", ")", "\n", "if", "t", "not", "in", "Priors", ":", "\n", "                ", "raise", "ValueError", "(", "'Supported priors'", ",", "list", "(", "Priors", ")", ")", "\n", "", "else", ":", "\n", "                ", "if", "t", "==", "'gaussian'", ":", "\n", "                    ", "prior", "=", "Gaussian", "(", "data_prior", "[", "'mu'", "]", ",", "data_prior", "[", "'sigma'", "]", ")", "\n", "", "elif", "t", "==", "'laplace'", ":", "\n", "                    ", "prior", "=", "Laplace", "(", "data_prior", "[", "'mu'", "]", ",", "data_prior", "[", "'scale'", "]", ")", "\n", "", "elif", "t", "==", "'scaledGaussian'", ":", "\n", "                    ", "prior", "=", "ScaledMixtureGaussian", "(", "pi", "=", "data_prior", "[", "'phi'", "]", ",", "mu1", "=", "data_prior", "[", "'mu1'", "]", ",", "s1", "=", "data_prior", "[", "'sigma1'", "]", ",", "\n", "mu2", "=", "data_prior", "[", "'mu2'", "]", ",", "s2", "=", "data_prior", "[", "'sigma2'", "]", ")", "\n", "", "elif", "t", "==", "'uniform'", ":", "\n", "                    ", "a", ",", "b", "=", "data_prior", "[", "'a'", "]", ",", "data_prior", "[", "'b'", "]", "\n", "if", "network", "==", "'bbb'", ":", "\n", "                        ", "a", "=", "torch", ".", "tensor", "(", "[", "float", "(", "a", ")", "]", ")", "\n", "b", "=", "torch", ".", "tensor", "(", "[", "float", "(", "b", ")", "]", ")", "\n", "", "prior", "=", "Uniform", "(", "a", "=", "a", ",", "b", "=", "b", ")", "\n", "\n", "", "", "", "if", "epochs", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'The number of epoch should be > 0'", ")", "\n", "\n", "", "if", "train_subset", "<", "0", "or", "train_subset", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'The train subset to sample needs be a percentage (> 0 and < 1)'", ")", "\n", "\n", "", "if", "isinstance", "(", "seeds", ",", "int", ")", ":", "\n", "            ", "seeds", "=", "[", "seeds", "]", "\n", "\n", "", "if", "posterior_type", "not", "in", "PosteriorType", ":", "\n", "            ", "raise", "ValueError", "(", "'Supported posterior_type'", ",", "PosteriorType", ")", "\n", "\n", "", "if", "network", "not", "in", "NetworkTypes", ":", "\n", "            ", "raise", "ValueError", "(", "'Supported networks'", ",", "NetworkTypes", ")", "\n", "", "else", ":", "\n", "            ", "if", "network", "==", "'mmd'", ":", "\n", "                ", "base_model", "=", "BMMD", ".", "BMMD", "\n", "trainer", "=", "BMMD", ".", "Trainer", "\n", "\n", "", "elif", "network", "==", "'bbb'", ":", "\n", "                ", "base_model", "=", "BBB", ".", "BBB", "\n", "trainer", "=", "BBB", ".", "Trainer", "\n", "\n", "", "elif", "network", "==", "'normal'", ":", "\n", "                ", "base_model", "=", "ANN", ".", "ANN", "\n", "trainer", "=", "ANN", ".", "Trainer", "\n", "\n", "", "elif", "network", "==", "'dropout'", ":", "\n", "                ", "base_model", "=", "DropoutNet", ".", "Dropnet", "\n", "trainer", "=", "DropoutNet", ".", "Trainer", "\n", "\n", "", "", "if", "optimizer", "not", "in", "Optimizers", ":", "\n", "            ", "raise", "ValueError", "(", "'Supported optimizers'", ",", "Optimizers", ")", "\n", "", "else", ":", "\n", "            ", "if", "optimizer", "==", "'sgd'", ":", "\n", "                ", "_opt", "=", "torch", ".", "optim", ".", "SGD", "\n", "\n", "", "elif", "optimizer", "==", "'adam'", ":", "\n", "                ", "_opt", "=", "torch", ".", "optim", ".", "Adam", "\n", "\n", "", "elif", "optimizer", "==", "'rmsprop'", ":", "\n", "                ", "_opt", "=", "torch", ".", "optim", ".", "RMSprop", "\n", "\n", "", "", "run_results", "=", "[", "]", "\n", "\n", "for", "e", ",", "seed", "in", "tqdm", ".", "tqdm", "(", "enumerate", "(", "seeds", ")", ",", "total", "=", "len", "(", "seeds", ")", ")", ":", "\n", "\n", "            ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "best_score", "=", "0", "\n", "\n", "if", "dataset", "not", "in", "Datasets", ":", "\n", "                ", "raise", "ValueError", "(", "'Supported datasets {}, given {}'", ".", "format", "(", "Datasets", ",", "dataset", ")", ")", "\n", "", "else", ":", "\n", "                ", "sample", ",", "classes", ",", "train_loader", ",", "test_loader", "=", "get_dataset", "(", "dataset", ",", "batch_size", ",", "\n", "dev_split", ",", "resize", ",", "train_subset", ")", "\n", "\n", "", "model", "=", "base_model", "(", "prior", "=", "prior", ",", "mu_init", "=", "weights_mu_init", ",", "device", "=", "device", ",", "\n", "rho_init", "=", "weights_rho_init", ",", "topology", "=", "topology", ",", "classes", "=", "classes", ",", "local_trick", "=", "local_trick", ",", "\n", "sample", "=", "sample", ",", "**", "network_parameters", ",", "posterior_type", "=", "posterior_type", ")", "\n", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "pytorch_total_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "print", "(", "'Parametri: '", ",", "pytorch_total_params", ")", "\n", "\n", "if", "optimizer", "!=", "'adam'", ":", "\n", "                ", "opt", "=", "_opt", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "momentum", "=", "moment", ")", "\n", "", "else", ":", "\n", "                ", "opt", "=", "_opt", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "\n", "", "scheduler", "=", "None", "\n", "\n", "if", "lr_scheduler", "is", "not", "None", ":", "\n", "                ", "t", "=", "lr_scheduler", ".", "get", "(", "'type'", ",", "'step'", ")", "\n", "\n", "if", "t", "not", "in", "LrScheduler", ":", "\n", "                    ", "raise", "ValueError", "(", "'Supported optimizers'", ",", "LrScheduler", ")", "\n", "\n", "", "if", "t", "==", "'step'", ":", "\n", "                    ", "step", ",", "decay", "=", "lr_scheduler", ".", "get", "(", "'step'", ",", "10", ")", ",", "lr_scheduler", ".", "get", "(", "'decay'", ",", "0.1", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "opt", ",", "step", ",", "gamma", "=", "decay", ")", "\n", "\n", "", "elif", "t", "==", "'exponential'", ":", "\n", "                    ", "decay", "=", "lr_scheduler", ".", "get", "(", "'decay'", ",", "0.1", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ExponentialLR", "(", "opt", ",", "gamma", "=", "decay", ")", "\n", "\n", "", "elif", "t", "==", "'plateau'", ":", "\n", "                    ", "tolerance", ",", "decay", "=", "lr_scheduler", ".", "get", "(", "'tolerance'", ",", "2", ")", ",", "lr_scheduler", ".", "get", "(", "'decay'", ",", "0.1", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "opt", ",", "factor", "=", "decay", ",", "verbose", "=", "True", ",", "\n", "patience", "=", "tolerance", ",", "mode", "=", "'max'", ")", "\n", "\n", "", "", "current_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "exp_name", ")", "# , str(e))", "\n", "current_load_path", "=", "os", ".", "path", ".", "join", "(", "load_path", ",", "exp_name", ")", "\n", "\n", "results", "=", "{", "}", "\n", "epoch_start", "=", "0", "\n", "\n", "results_path", "=", "os", ".", "path", ".", "join", "(", "current_path", ",", "'results_{}.data'", ".", "format", "(", "e", ")", ")", "\n", "best_path", "=", "os", ".", "path", ".", "join", "(", "current_path", ",", "'best_model_{}.data'", ".", "format", "(", "e", ")", ")", "\n", "\n", "if", "save", "and", "not", "os", ".", "path", ".", "exists", "(", "current_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "current_path", ")", "\n", "\n", "", "if", "load", "and", "not", "os", ".", "path", ".", "exists", "(", "current_load_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "current_load_path", ")", "\n", "\n", "", "loaded", "=", "False", "\n", "trained", "=", "False", "\n", "\n", "early_stopping", "=", "(", "0", ",", "0", ")", "\n", "\n", "if", "load", "and", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "current_load_path", ",", "'results_{}.data'", ".", "format", "(", "e", ")", ")", ")", ":", "\n", "                ", "loaded", "=", "True", "\n", "results", "=", "torch", ".", "load", "(", "results_path", ")", "\n", "model", ".", "load_state_dict", "(", "results", "[", "'model_state_dict'", "]", ")", "\n", "opt", ".", "load_state_dict", "(", "results", "[", "'optimizer_state_dict'", "]", ")", "\n", "epoch_start", "=", "results", "[", "'epoch'", "]", "+", "1", "\n", "early_stopping", "=", "results", "[", "'early_stopping'", "]", "# (best_score, early_stopping_tolerance)", "\n", "\n", "if", "scheduler", "is", "not", "None", ":", "\n", "                    ", "scheduler", ".", "load_state_dict", "(", "results", "[", "'optimizer_state_dict'", "]", ")", "\n", "\n", "", "best_score", "=", "np", ".", "max", "(", "results", ".", "get", "(", "'test_results'", ")", ")", "\n", "\n", "if", "load_path", "!=", "save_path", ":", "\n", "                    ", "copy", "(", "os", ".", "path", ".", "join", "(", "current_load_path", ",", "'best_model_{}.data'", ".", "format", "(", "e", ")", ")", ",", "results_path", ")", "\n", "\n", "", "", "t", "=", "trainer", "(", "model", ",", "train_loader", ",", "test_loader", ",", "opt", ",", "wd", "=", "weight_decay", ")", "\n", "\n", "if", "early_stopping", "[", "1", "]", "<", "early_stopping_tolerance", ":", "\n", "                ", "trained", "=", "True", "\n", "f1", "=", "results", ".", "get", "(", "'test_results'", ",", "[", "'not calculated'", "]", ")", "[", "-", "1", "]", "\n", "f1_train", "=", "results", ".", "get", "(", "'train_results'", ",", "[", "'not calculated'", "]", ")", "[", "-", "1", "]", "\n", "\n", "progress_bar", "=", "tqdm", ".", "tqdm", "(", "range", "(", "epoch_start", ",", "epochs", ")", ",", "initial", "=", "epoch_start", ",", "total", "=", "epochs", ",", "leave", "=", "False", ")", "\n", "progress_bar", ".", "set_postfix", "(", "f1_test", "=", "f1", ",", "f1_train", "=", "f1_train", ")", "\n", "\n", "for", "i", "in", "progress_bar", ":", "\n", "                    ", "trained", "=", "True", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                        ", "(", "test_true", ",", "test_pred", ")", "=", "t", ".", "test_evaluation", "(", "samples", "=", "test_samples", ")", "\n", "\n", "f1", "=", "metrics", ".", "f1_score", "(", "test_true", ",", "test_pred", ",", "average", "=", "'micro'", ")", "\n", "\n", "epochs_res", "=", "results", ".", "get", "(", "'test_results'", ",", "[", "]", ")", "\n", "epochs_res", ".", "append", "(", "f1", ")", "\n", "\n", "epochs_res_train", "=", "results", ".", "get", "(", "'train_results'", ",", "[", "]", ")", "\n", "epochs_res_train", ".", "append", "(", "f1_train", ")", "\n", "\n", "results", ".", "update", "(", "{", "'epoch'", ":", "i", ",", "'test_results'", ":", "epochs_res", "}", ")", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "loss", ",", "(", "train_true", ",", "train_pred", ")", ",", "(", "test_true", ",", "test_pred", ")", "=", "t", ".", "train_step", "(", "train_samples", "=", "train_samples", ",", "\n", "test_samples", "=", "test_samples", ",", "\n", "weights", "=", "loss_weights", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "elapsed_time", "=", "end_time", "-", "start_time", "\n", "\n", "loss", "=", "np", ".", "mean", "(", "loss", ")", "\n", "\n", "f1", "=", "metrics", ".", "f1_score", "(", "test_true", ",", "test_pred", ",", "average", "=", "'micro'", ")", "\n", "\n", "if", "scheduler", "is", "not", "None", ":", "\n", "                        ", "scheduler", ".", "step", "(", "f1", ")", "\n", "\n", "", "f1_train", "=", "metrics", ".", "f1_score", "(", "train_true", ",", "train_pred", ",", "average", "=", "'micro'", ")", "\n", "\n", "progress_bar", ".", "set_postfix", "(", "f1_test", "=", "f1", ",", "f1_train", "=", "f1_train", ")", "\n", "\n", "epochs_res", "=", "results", ".", "get", "(", "'test_results'", ",", "[", "]", ")", "\n", "epochs_res", ".", "append", "(", "f1", ")", "\n", "\n", "epochs_res_train", "=", "results", ".", "get", "(", "'train_results'", ",", "[", "]", ")", "\n", "epochs_res_train", ".", "append", "(", "f1_train", ")", "\n", "\n", "losses", "=", "results", ".", "get", "(", "'losses'", ",", "[", "]", ")", "\n", "losses", ".", "append", "(", "loss", ")", "\n", "\n", "training_time", "=", "results", ".", "get", "(", "'training_time'", ",", "0", ")", "+", "elapsed_time", "\n", "\n", "if", "f1", ">", "best_score", ":", "\n", "                        ", "best_score", "=", "f1", "\n", "early_stopping", "=", "(", "best_score", ",", "0", ")", "\n", "if", "save", ":", "\n", "                            ", "torch", ".", "save", "(", "t", ".", "model", ".", "state_dict", "(", ")", ",", "best_path", ")", "\n", "", "", "else", ":", "\n", "                        ", "early_stopping", "=", "(", "best_score", ",", "early_stopping", "[", "1", "]", "+", "1", ")", "\n", "\n", "", "results", ".", "update", "(", "{", "\n", "'epoch'", ":", "i", ",", "'test_results'", ":", "epochs_res", ",", "'train_results'", ":", "epochs_res_train", ",", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "opt", ".", "state_dict", "(", ")", ",", "\n", "'losses'", ":", "losses", ",", "\n", "'early_stopping'", ":", "early_stopping", ",", "\n", "'training_time'", ":", "training_time", ",", "\n", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", "if", "scheduler", "is", "not", "None", "else", "None", "\n", "}", ")", "\n", "\n", "if", "save", ":", "\n", "                        ", "torch", ".", "save", "(", "results", ",", "results_path", ")", "\n", "\n", "", "if", "early_stopping", "[", "1", "]", "==", "early_stopping_tolerance", ":", "\n", "                        ", "break", "\n", "\n", "", "", "progress_bar", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "                ", "run_results", ".", "append", "(", "results", ")", "\n", "\n", "", "t", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "best_path", ")", ")", "\n", "run_results", ".", "append", "(", "results", ")", "\n", "\n", "# Reliability diagram and ECE", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "current_path", ",", "\"{}_ece.data\"", ".", "format", "(", "e", ")", ")", ")", ":", "\n", "                ", "pp", ",", "pt", ",", "ece", ",", "nll", "=", "t", ".", "reliability_diagram", "(", "samples", "=", "1", ")", "\n", "\n", "r1", "=", "(", "pp", ",", "pt", ")", "\n", "\n", "scaled_ece", "=", "t", ".", "temperature_scaling", "(", "samples", "=", "1", ")", "\n", "r", "=", "(", "ece", ",", "scaled_ece", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "current_path", ",", "\"{}_ece.data\"", ".", "format", "(", "e", ")", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "r", ",", "f", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "current_path", ",", "\"{}_ece_barplot.data\"", ".", "format", "(", "e", ")", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "r1", ",", "f", ")", "\n", "\n", "", "", "print", "(", "'Max test score {}: {}'", ".", "format", "(", "seed", ",", "np", ".", "max", "(", "results", ".", "get", "(", "'test_results'", ")", "[", "1", ":", "]", ")", ")", ")", "\n", "\n", "# FGSM ATTACK", "\n", "\n", "if", "network", "!=", "'normal'", ":", "\n", "\n", "                ", "fgsm_path", "=", "os", ".", "path", ".", "join", "(", "current_path", ",", "'fgsm_{}.data'", ".", "format", "(", "e", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "fgsm_path", ")", "and", "save", ":", "\n", "                    ", "r", "=", "t", ".", "fgsm_test", "(", "samples", "=", "test_samples", ")", "\n", "\n", "with", "open", "(", "fgsm_path", ",", "\"wb\"", ")", "as", "output_file", ":", "\n", "                        ", "pickle", ".", "dump", "(", "r", ",", "output_file", ")", "\n", "\n", "", "", "", "", "", "return", "experiments_results", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.BMMD.__init__": [[15, 30], ["base.Network.__init__", "base.get_bayesian_network", "priors.Gaussian"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.__init__", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.base.get_bayesian_network"], ["    ", "def", "__init__", "(", "self", ",", "sample", ",", "classes", ",", "topology", "=", "None", ",", "prior", "=", "None", ",", "mu_init", "=", "None", ",", "rho_init", "=", "None", ",", "\n", "local_trick", "=", "False", ",", "regression", "=", "False", ",", "posterior_type", "=", "'weights'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "classes", ",", "regression", ")", "\n", "\n", "if", "topology", "is", "None", ":", "\n", "            ", "topology", "=", "[", "400", ",", "400", "]", "\n", "\n", "", "if", "prior", "is", "None", ":", "\n", "            ", "prior", "=", "Gaussian", "(", "0", ",", "10", ")", "\n", "\n", "", "self", ".", "calculate_mmd", "=", "True", "\n", "self", ".", "_prior", "=", "prior", "\n", "self", ".", "features", "=", "get_bayesian_network", "(", "topology", ",", "sample", ",", "classes", ",", "\n", "mu_init", ",", "rho_init", ",", "prior", ",", "'mmd'", ",", "local_trick", ",", "posterior_type", ",", "bias", "=", "True", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.BMMD._forward": [[31, 42], ["enumerate", "isinstance", "i", "i"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "mmd", "=", "0", "\n", "for", "j", ",", "i", "in", "enumerate", "(", "self", ".", "features", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "i", ",", "(", "BayesianLinearLayer", ",", "BayesianCNNLayer", ")", ")", ":", "\n", "                ", "x", "=", "i", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", ",", "m", "=", "i", "(", "x", ",", "self", ".", "calculate_mmd", ")", "\n", "mmd", "+=", "m", "\n", "\n", "", "", "return", "x", ",", "mmd", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.BMMD.forward": [[43, 57], ["range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "BMMD.BMMD._forward", "torch.stack.append", "torch.stack.append", "torch.stack().mean.append", "torch.stack().mean.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.BMMD._forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "samples", "=", "1", ")", ":", "\n", "        ", "o", "=", "[", "]", "\n", "mmds", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "samples", ")", ":", "\n", "            ", "op", ",", "mmd", "=", "self", ".", "_forward", "(", "x", ")", "\n", "o", ".", "append", "(", "op", ")", "\n", "mmds", ".", "append", "(", "mmd", ")", "\n", "\n", "", "o", "=", "torch", ".", "stack", "(", "o", ")", "\n", "\n", "mmds", "=", "torch", ".", "stack", "(", "mmds", ")", ".", "mean", "(", ")", "\n", "\n", "return", "o", ",", "mmds", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.BMMD.eval_forward": [[58, 61], ["BMMD.BMMD."], "methods", ["None"], ["", "def", "eval_forward", "(", "self", ",", "x", ",", "samples", "=", "1", ")", ":", "\n", "        ", "o", ",", "_", "=", "self", "(", "x", ",", "samples", "=", "samples", ")", "\n", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.__init__": [[64, 67], ["base.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ":", "nn", ".", "Module", ",", "train_data", ",", "test_data", ",", "optimizer", ",", "wd", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "train_data", ",", "test_data", ",", "optimizer", ")", "\n", "self", ".", "wd", "=", "wd", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.weight_normalization_loss": [[68, 76], ["torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "enumerate", "isinstance", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "weight_normalization_loss", "(", "self", ")", ":", "\n", "        ", "l2_reg", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "j", ",", "i", "in", "enumerate", "(", "self", ".", "model", ".", "features", ")", ":", "\n", "            ", "if", "isinstance", "(", "i", ",", "(", "BayesianLinearLayer", ",", "BayesianCNNLayer", ")", ")", ":", "\n", "                ", "l2_reg", "+=", "torch", ".", "norm", "(", "i", ".", "w", ".", "weights", ")", "\n", "if", "i", ".", "b", "is", "not", "None", ":", "\n", "                    ", "l2_reg", "+=", "torch", ".", "norm", "(", "i", ".", "b", ".", "weights", ")", "\n", "", "", "", "return", "l2_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.train_epoch": [[77, 142], ["BMMD.Trainer.model.train", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.set_postfix", "kwargs.get().get", "len", "numpy.asarray", "enumerate", "train_true.extend", "y.to.to.to", "x.to.to.to", "BMMD.Trainer.optimizer.zero_grad", "BMMD.Trainer.model", "train_pred.extend", "losses.append", "tot_loss.backward", "BMMD.Trainer.optimizer.step", "tqdm.tqdm.tqdm.set_postfix", "len", "kwargs.get", "y.to.to.tolist", "out.argmax.argmax.mean", "BMMD.Trainer.loss_function", "torch.softmax().mean", "torch.softmax().mean", "torch.softmax().mean", "torch.softmax().mean", "out.argmax.argmax.argmax", "out.argmax.argmax.tolist", "tot_loss.item", "range", "BMMD.Trainer.model.noise.exp", "BMMD.Trainer.loss_function", "BMMD.Trainer.loss_function", "BMMD.Trainer.weight_normalization_loss", "BMMD.Trainer.item", "mmd.item", "out[].exp", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.weight_normalization_loss"], ["", "def", "train_epoch", "(", "self", ",", "samples", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "losses", "=", "[", "]", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "progress_bar", "=", "tqdm", "(", "enumerate", "(", "self", ".", "train_data", ")", ",", "total", "=", "len", "(", "self", ".", "train_data", ")", ",", "disable", "=", "False", ",", "leave", "=", "False", ")", "\n", "progress_bar", ".", "set_postfix", "(", "mmd_loss", "=", "'not calculated'", ",", "ce_loss", "=", "'not calculated'", ")", "\n", "\n", "mmd_w", "=", "kwargs", ".", "get", "(", "'weights'", ",", "{", "}", ")", ".", "get", "(", "'mmd'", ",", "1", ")", "\n", "\n", "train_true", "=", "[", "]", "\n", "train_pred", "=", "[", "]", "\n", "\n", "M", "=", "len", "(", "self", ".", "train_data", ")", "\n", "a", "=", "np", ".", "asarray", "(", "[", "2", "**", "(", "M", "-", "i", "-", "1", ")", "for", "i", "in", "range", "(", "M", "+", "1", ")", "]", ")", "\n", "b", "=", "2", "**", "M", "-", "1", "\n", "\n", "pi", "=", "a", "/", "b", "\n", "self", ".", "model", ".", "calculate_mmd", "=", "True", "\n", "\n", "for", "batch", ",", "(", "x", ",", "y", ")", "in", "progress_bar", ":", "\n", "\n", "            ", "train_true", ".", "extend", "(", "y", ".", "tolist", "(", ")", ")", "\n", "\n", "y", "=", "y", ".", "to", "(", "self", ".", "device", ")", "\n", "x", "=", "x", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "out", ",", "mmd", "=", "self", ".", "model", "(", "x", ",", "samples", "=", "samples", ")", "\n", "\n", "mmd", "*=", "mmd_w", "\n", "mmd", "*=", "pi", "[", "batch", "]", "\n", "\n", "if", "pi", "[", "batch", "]", "==", "0", ":", "\n", "                ", "self", ".", "model", ".", "calculate_mmd", "=", "False", "\n", "\n", "", "if", "self", ".", "regression", ":", "\n", "                ", "out", "=", "out", ".", "mean", "(", "0", ")", "\n", "if", "self", ".", "model", ".", "classes", "==", "1", ":", "\n", "                    ", "noise", "=", "self", ".", "model", ".", "noise", ".", "exp", "(", ")", "\n", "x", "=", "out", "\n", "loss", "=", "self", ".", "loss_function", "(", "x", ",", "y", ",", "noise", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "self", ".", "loss_function", "(", "out", "[", ":", ",", ":", "1", "]", ",", "y", ",", "out", "[", ":", ",", "1", ":", "]", ".", "exp", "(", ")", ")", "\n", "", "loss", "=", "loss", "/", "x", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "loss", "=", "self", ".", "loss_function", "(", "out", ",", "y", ")", "\n", "out", "=", "torch", ".", "softmax", "(", "out", ",", "-", "1", ")", ".", "mean", "(", "0", ")", "\n", "out", "=", "out", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "\n", "", "train_pred", ".", "extend", "(", "out", ".", "tolist", "(", ")", ")", "\n", "\n", "tot_loss", "=", "mmd", "+", "loss", "\n", "\n", "if", "self", ".", "wd", "is", "not", "None", ":", "\n", "                ", "reg", "=", "self", ".", "weight_normalization_loss", "(", ")", "*", "self", ".", "wd", "\n", "tot_loss", "+=", "reg", "\n", "\n", "", "losses", ".", "append", "(", "tot_loss", ".", "item", "(", ")", ")", "\n", "tot_loss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "progress_bar", ".", "set_postfix", "(", "ce_loss", "=", "loss", ".", "item", "(", ")", ",", "mmd_loss", "=", "mmd", ".", "item", "(", ")", ")", "\n", "\n", "", "return", "losses", ",", "(", "train_true", ",", "train_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.train_step": [[143, 147], ["BMMD.Trainer.train_epoch", "BMMD.Trainer.test_evaluation"], "methods", ["home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.BMMD.Trainer.train_epoch", "home.repos.pwc.inspect_result.ispamm_MMD-Bayesian-Neural-Network.None.ANN.Trainer.test_evaluation"], ["", "def", "train_step", "(", "self", ",", "train_samples", "=", "1", ",", "test_samples", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "losses", ",", "train_res", "=", "self", ".", "train_epoch", "(", "samples", "=", "train_samples", ",", "**", "kwargs", ")", "\n", "test_res", "=", "self", ".", "test_evaluation", "(", "samples", "=", "test_samples", ",", "**", "kwargs", ")", "\n", "return", "losses", ",", "train_res", ",", "test_res", "\n", "", "", ""]]}