{"home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.None.run_dee_task.parse_args": [[16, 43], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "isinstance", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "type"], "function", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.None.run_dee_task.parse_args"], ["def", "parse_args", "(", "in_args", "=", "None", ")", ":", "\n", "    ", "arg_parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--task_name'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'Take Name'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--data_dir'", ",", "type", "=", "str", ",", "default", "=", "'./Data'", ",", "\n", "help", "=", "'Data directory'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--exp_dir'", ",", "type", "=", "str", ",", "default", "=", "'./Exps'", ",", "\n", "help", "=", "'Experiment directory'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--save_cpt_flag'", ",", "type", "=", "strtobool", ",", "default", "=", "True", ",", "\n", "help", "=", "'Whether to save cpt for each epoch'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--skip_train'", ",", "type", "=", "strtobool", ",", "default", "=", "False", ",", "\n", "help", "=", "'Whether to skip training'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--eval_model_names'", ",", "type", "=", "str", ",", "default", "=", "'DCFEE-O,DCFEE-M,GreedyDec,Doc2EDAG'", ",", "\n", "help", "=", "\"Models to be evaluated, seperated by ','\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--re_eval_flag'", ",", "type", "=", "strtobool", ",", "default", "=", "False", ",", "\n", "help", "=", "'Whether to re-evaluate previous predictions'", ")", "\n", "\n", "# add task setting arguments", "\n", "for", "key", ",", "val", "in", "DEETaskSetting", ".", "base_attr_default_pairs", ":", "\n", "        ", "if", "isinstance", "(", "val", ",", "bool", ")", ":", "\n", "            ", "arg_parser", ".", "add_argument", "(", "'--'", "+", "key", ",", "type", "=", "strtobool", ",", "default", "=", "val", ")", "\n", "", "else", ":", "\n", "            ", "arg_parser", ".", "add_argument", "(", "'--'", "+", "key", ",", "type", "=", "type", "(", "val", ")", ",", "default", "=", "val", ")", "\n", "\n", "", "", "arg_info", "=", "arg_parser", ".", "parse_args", "(", "args", "=", "in_args", ")", "\n", "\n", "return", "arg_info", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.BaseEvent.__init__": [[7, 18], ["list", "set", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fields", ",", "event_name", "=", "'Event'", ",", "key_fields", "=", "(", ")", ",", "recguid", "=", "None", ")", ":", "\n", "        ", "self", ".", "recguid", "=", "recguid", "\n", "self", ".", "name", "=", "event_name", "\n", "self", ".", "fields", "=", "list", "(", "fields", ")", "\n", "self", ".", "field2content", "=", "{", "f", ":", "None", "for", "f", "in", "fields", "}", "\n", "self", ".", "nonempty_count", "=", "0", "\n", "self", ".", "nonempty_ratio", "=", "self", ".", "nonempty_count", "/", "len", "(", "self", ".", "fields", ")", "\n", "\n", "self", ".", "key_fields", "=", "set", "(", "key_fields", ")", "\n", "for", "key_field", "in", "self", ".", "key_fields", ":", "\n", "            ", "assert", "key_field", "in", "self", ".", "field2content", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.BaseEvent.__repr__": [[19, 33], ["str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "event_str", "=", "\"\\n{}[\\n\"", ".", "format", "(", "self", ".", "name", ")", "\n", "event_str", "+=", "\"  {}={}\\n\"", ".", "format", "(", "\"recguid\"", ",", "self", ".", "recguid", ")", "\n", "event_str", "+=", "\"  {}={}\\n\"", ".", "format", "(", "\"nonempty_count\"", ",", "self", ".", "nonempty_count", ")", "\n", "event_str", "+=", "\"  {}={:.3f}\\n\"", ".", "format", "(", "\"nonempty_ratio\"", ",", "self", ".", "nonempty_ratio", ")", "\n", "event_str", "+=", "\"] (\\n\"", "\n", "for", "field", "in", "self", ".", "fields", ":", "\n", "            ", "if", "field", "in", "self", ".", "key_fields", ":", "\n", "                ", "key_str", "=", "\" (key)\"", "\n", "", "else", ":", "\n", "                ", "key_str", "=", "\"\"", "\n", "", "event_str", "+=", "\"  \"", "+", "field", "+", "\"=\"", "+", "str", "(", "self", ".", "field2content", "[", "field", "]", ")", "+", "\", {}\\n\"", ".", "format", "(", "key_str", ")", "\n", "", "event_str", "+=", "\")\\n\"", "\n", "return", "event_str", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.BaseEvent.update_by_dict": [[34, 46], ["len"], "methods", ["None"], ["", "def", "update_by_dict", "(", "self", ",", "field2text", ",", "recguid", "=", "None", ")", ":", "\n", "        ", "self", ".", "nonempty_count", "=", "0", "\n", "self", ".", "recguid", "=", "recguid", "\n", "\n", "for", "field", "in", "self", ".", "fields", ":", "\n", "            ", "if", "field", "in", "field2text", "and", "field2text", "[", "field", "]", "is", "not", "None", ":", "\n", "                ", "self", ".", "nonempty_count", "+=", "1", "\n", "self", ".", "field2content", "[", "field", "]", "=", "field2text", "[", "field", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "field2content", "[", "field", "]", "=", "None", "\n", "\n", "", "", "self", ".", "nonempty_ratio", "=", "self", ".", "nonempty_count", "/", "len", "(", "self", ".", "fields", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.BaseEvent.field_to_dict": [[47, 49], ["dict"], "methods", ["None"], ["", "def", "field_to_dict", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "self", ".", "field2content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.BaseEvent.set_key_fields": [[50, 52], ["set"], "methods", ["None"], ["", "def", "set_key_fields", "(", "self", ",", "key_fields", ")", ":", "\n", "        ", "self", ".", "key_fields", "=", "set", "(", "key_fields", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.BaseEvent.is_key_complete": [[53, 59], ["None"], "methods", ["None"], ["", "def", "is_key_complete", "(", "self", ")", ":", "\n", "        ", "for", "key_field", "in", "self", ".", "key_fields", ":", "\n", "            ", "if", "self", ".", "field2content", "[", "key_field", "]", "is", "None", ":", "\n", "                ", "return", "False", "\n", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.BaseEvent.is_good_candidate": [[60, 62], ["NotImplementedError"], "methods", ["None"], ["", "def", "is_good_candidate", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.BaseEvent.get_argument_tuple": [[63, 66], ["tuple"], "methods", ["None"], ["", "def", "get_argument_tuple", "(", "self", ")", ":", "\n", "        ", "args_tuple", "=", "tuple", "(", "self", ".", "field2content", "[", "field", "]", "for", "field", "in", "self", ".", "fields", ")", "\n", "return", "args_tuple", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.EquityFreezeEvent.__init__": [[81, 89], ["event_type.BaseEvent.__init__", "event_type.EquityFreezeEvent.set_key_fields"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.BaseEvent.set_key_fields"], ["def", "__init__", "(", "self", ",", "recguid", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "EquityFreezeEvent", ".", "FIELDS", ",", "event_name", "=", "EquityFreezeEvent", ".", "NAME", ",", "recguid", "=", "recguid", "\n", ")", "\n", "self", ".", "set_key_fields", "(", "[", "\n", "'EquityHolder'", ",", "\n", "'FrozeShares'", ",", "\n", "'LegalInstitution'", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.EquityFreezeEvent.is_good_candidate": [[91, 97], ["event_type.EquityFreezeEvent.is_key_complete"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.BaseEvent.is_key_complete"], ["", "def", "is_good_candidate", "(", "self", ",", "min_match_count", "=", "5", ")", ":", "\n", "        ", "key_flag", "=", "self", ".", "is_key_complete", "(", ")", "\n", "if", "key_flag", ":", "\n", "            ", "if", "self", ".", "nonempty_count", ">=", "min_match_count", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.EquityRepurchaseEvent.__init__": [[110, 116], ["event_type.BaseEvent.__init__", "event_type.EquityRepurchaseEvent.set_key_fields"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.BaseEvent.set_key_fields"], ["def", "__init__", "(", "self", ",", "recguid", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "EquityRepurchaseEvent", ".", "FIELDS", ",", "event_name", "=", "EquityRepurchaseEvent", ".", "NAME", ",", "recguid", "=", "recguid", "\n", ")", "\n", "self", ".", "set_key_fields", "(", "[", "\n", "'CompanyName'", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.EquityRepurchaseEvent.is_good_candidate": [[118, 124], ["event_type.EquityRepurchaseEvent.is_key_complete"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.BaseEvent.is_key_complete"], ["", "def", "is_good_candidate", "(", "self", ",", "min_match_count", "=", "4", ")", ":", "\n", "        ", "key_flag", "=", "self", ".", "is_key_complete", "(", ")", "\n", "if", "key_flag", ":", "\n", "            ", "if", "self", ".", "nonempty_count", ">=", "min_match_count", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.EquityUnderweightEvent.__init__": [[137, 144], ["event_type.BaseEvent.__init__", "event_type.EquityUnderweightEvent.set_key_fields"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.BaseEvent.set_key_fields"], ["def", "__init__", "(", "self", ",", "recguid", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "EquityUnderweightEvent", ".", "FIELDS", ",", "event_name", "=", "EquityUnderweightEvent", ".", "NAME", ",", "recguid", "=", "recguid", "\n", ")", "\n", "self", ".", "set_key_fields", "(", "[", "\n", "'EquityHolder'", ",", "\n", "'TradedShares'", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.EquityUnderweightEvent.is_good_candidate": [[146, 152], ["event_type.EquityUnderweightEvent.is_key_complete"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.BaseEvent.is_key_complete"], ["", "def", "is_good_candidate", "(", "self", ",", "min_match_count", "=", "4", ")", ":", "\n", "        ", "key_flag", "=", "self", ".", "is_key_complete", "(", ")", "\n", "if", "key_flag", ":", "\n", "            ", "if", "self", ".", "nonempty_count", ">=", "min_match_count", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.EquityOverweightEvent.__init__": [[165, 172], ["event_type.BaseEvent.__init__", "event_type.EquityOverweightEvent.set_key_fields"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.BaseEvent.set_key_fields"], ["def", "__init__", "(", "self", ",", "recguid", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "EquityOverweightEvent", ".", "FIELDS", ",", "event_name", "=", "EquityOverweightEvent", ".", "NAME", ",", "recguid", "=", "recguid", "\n", ")", "\n", "self", ".", "set_key_fields", "(", "[", "\n", "'EquityHolder'", ",", "\n", "'TradedShares'", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.EquityOverweightEvent.is_good_candidate": [[174, 180], ["event_type.EquityOverweightEvent.is_key_complete"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.BaseEvent.is_key_complete"], ["", "def", "is_good_candidate", "(", "self", ",", "min_match_count", "=", "4", ")", ":", "\n", "        ", "key_flag", "=", "self", ".", "is_key_complete", "(", ")", "\n", "if", "key_flag", ":", "\n", "            ", "if", "self", ".", "nonempty_count", ">=", "min_match_count", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.EquityPledgeEvent.__init__": [[196, 205], ["event_type.BaseEvent.__init__", "event_type.EquityPledgeEvent.set_key_fields"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.BaseEvent.set_key_fields"], ["def", "__init__", "(", "self", ",", "recguid", "=", "None", ")", ":", "\n", "# super(EquityPledgeEvent, self).__init__(", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "EquityPledgeEvent", ".", "FIELDS", ",", "event_name", "=", "EquityPledgeEvent", ".", "NAME", ",", "recguid", "=", "recguid", "\n", ")", "\n", "self", ".", "set_key_fields", "(", "[", "\n", "'Pledger'", ",", "\n", "'PledgedShares'", ",", "\n", "'Pledgee'", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.EquityPledgeEvent.is_good_candidate": [[207, 213], ["event_type.EquityPledgeEvent.is_key_complete"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.event_type.BaseEvent.is_key_complete"], ["", "def", "is_good_candidate", "(", "self", ",", "min_match_count", "=", "5", ")", ":", "\n", "        ", "key_flag", "=", "self", ".", "is_key_complete", "(", ")", "\n", "if", "key_flag", ":", "\n", "            ", "if", "self", ".", "nonempty_count", ">=", "min_match_count", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.BertForBasicNER.__init__": [[44, 53], ["pytorch_pretrained_bert.modeling.PreTrainedBertModel.__init__", "pytorch_pretrained_bert.modeling.BertModel", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "ner_model.BertForBasicNER.apply"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "num_entity_labels", ")", ":", "\n", "        ", "super", "(", "BertForBasicNER", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "num_entity_labels", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_bert_weights", ")", "\n", "\n", "self", ".", "num_entity_labels", "=", "num_entity_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.BertForBasicNER.old_forward": [[54, 93], ["ner_model.BertForBasicNER.bert", "ner_model.BertForBasicNER.dropout", "ner_model.BertForBasicNER.classifier", "Exception", "torch.cross_entropy", "torch.cross_entropy", "ner_model.produce_ner_batch_metrics", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.argmax", "label_ids.unsqueeze", "input_masks.unsqueeze().long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.log_softmax", "torch.log_softmax", "input_masks.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.produce_ner_batch_metrics"], ["", "def", "old_forward", "(", "self", ",", "input_ids", ",", "input_masks", ",", "\n", "token_type_ids", "=", "None", ",", "label_ids", "=", "None", ",", "\n", "eval_flag", "=", "False", ",", "eval_for_metric", "=", "True", ")", ":", "\n", "        ", "\"\"\"Assume input size [batch_size, seq_len]\"\"\"", "\n", "if", "input_masks", ".", "dtype", "!=", "torch", ".", "uint8", ":", "\n", "            ", "input_masks", "=", "input_masks", "==", "1", "\n", "\n", "", "enc_seq_out", ",", "_", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "attention_mask", "=", "input_masks", ",", "\n", "output_all_encoded_layers", "=", "False", ")", "\n", "# [batch_size, seq_len, hidden_size]", "\n", "enc_seq_out", "=", "self", ".", "dropout", "(", "enc_seq_out", ")", "\n", "# [batch_size, seq_len, num_entity_labels]", "\n", "seq_logits", "=", "self", ".", "classifier", "(", "enc_seq_out", ")", "\n", "\n", "if", "eval_flag", ":", "# if for evaluation purpose", "\n", "            ", "if", "label_ids", "is", "None", ":", "\n", "                ", "raise", "Exception", "(", "'Cannot do evaluation without label info'", ")", "\n", "", "else", ":", "\n", "                ", "if", "eval_for_metric", ":", "\n", "                    ", "batch_metrics", "=", "produce_ner_batch_metrics", "(", "seq_logits", ",", "label_ids", ",", "input_masks", ")", "\n", "return", "batch_metrics", "\n", "", "else", ":", "\n", "                    ", "seq_logp", "=", "F", ".", "log_softmax", "(", "seq_logits", ",", "dim", "=", "-", "1", ")", "\n", "seq_pred", "=", "seq_logp", ".", "argmax", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "# [batch_size, seq_len, 1]", "\n", "seq_gold", "=", "label_ids", ".", "unsqueeze", "(", "-", "1", ")", "# [batch_size, seq_len, 1]", "\n", "seq_mask", "=", "input_masks", ".", "unsqueeze", "(", "-", "1", ")", ".", "long", "(", ")", "# [batch_size, seq_len, 1]", "\n", "seq_pred_gold_mask", "=", "torch", ".", "cat", "(", "[", "seq_pred", ",", "seq_gold", ",", "seq_mask", "]", ",", "dim", "=", "-", "1", ")", "# [batch_size, seq_len, 3]", "\n", "return", "seq_pred_gold_mask", "\n", "", "", "", "elif", "label_ids", "is", "not", "None", ":", "# if has label_ids, calculate the loss", "\n", "# [num_valid_token, num_entity_labels]", "\n", "            ", "batch_logits", "=", "seq_logits", "[", "input_masks", ",", ":", "]", "\n", "# [num_valid_token], lid \\in {0,..., num_entity_labels-1}", "\n", "batch_labels", "=", "label_ids", "[", "input_masks", "]", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "batch_logits", ",", "batch_labels", ")", "\n", "return", "loss", ",", "enc_seq_out", "\n", "", "else", ":", "# just reture seq_pred_logps", "\n", "            ", "return", "F", ".", "log_softmax", "(", "seq_logits", ",", "dim", "=", "-", "1", ")", ",", "enc_seq_out", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.BertForBasicNER.forward": [[94, 125], ["ner_model.BertForBasicNER.bert", "ner_model.BertForBasicNER.dropout", "ner_model.BertForBasicNER.classifier", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.view", "label_ids.view", "torch.nll_loss", "torch.nll_loss", "ner_loss.view().sum.view().sum.view().sum", "torch.log_softmax.argmax", "torch.log_softmax.size", "ner_loss.view().sum.view().sum.view", "label_ids.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_ids", ",", "input_masks", ",", "\n", "label_ids", "=", "None", ",", "train_flag", "=", "True", ",", "decode_flag", "=", "True", ")", ":", "\n", "        ", "\"\"\"Assume input size [batch_size, seq_len]\"\"\"", "\n", "if", "input_masks", ".", "dtype", "!=", "torch", ".", "uint8", ":", "\n", "            ", "input_masks", "=", "input_masks", "==", "1", "\n", "\n", "", "batch_seq_enc", ",", "_", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "input_masks", ",", "\n", "output_all_encoded_layers", "=", "False", ")", "\n", "# [batch_size, seq_len, hidden_size]", "\n", "batch_seq_enc", "=", "self", ".", "dropout", "(", "batch_seq_enc", ")", "\n", "# [batch_size, seq_len, num_entity_labels]", "\n", "batch_seq_logits", "=", "self", ".", "classifier", "(", "batch_seq_enc", ")", "\n", "\n", "batch_seq_logp", "=", "F", ".", "log_softmax", "(", "batch_seq_logits", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "train_flag", ":", "\n", "            ", "batch_logp", "=", "batch_seq_logp", ".", "view", "(", "-", "1", ",", "batch_seq_logp", ".", "size", "(", "-", "1", ")", ")", "\n", "batch_label", "=", "label_ids", ".", "view", "(", "-", "1", ")", "\n", "# ner_loss = F.nll_loss(batch_logp, batch_label, reduction='sum')", "\n", "ner_loss", "=", "F", ".", "nll_loss", "(", "batch_logp", ",", "batch_label", ",", "reduction", "=", "'none'", ")", "\n", "ner_loss", "=", "ner_loss", ".", "view", "(", "label_ids", ".", "size", "(", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "# [batch_size]", "\n", "", "else", ":", "\n", "            ", "ner_loss", "=", "None", "\n", "\n", "", "if", "decode_flag", ":", "\n", "            ", "batch_seq_preds", "=", "batch_seq_logp", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "batch_seq_preds", "=", "None", "\n", "\n", "", "return", "batch_seq_enc", ",", "ner_loss", ",", "batch_seq_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.NERModel.__init__": [[128, 146], ["torch.nn.Module.__init__", "ner_model.NERTokenEmbedding", "transformer.make_transformer_encoder", "ner_model.CRFLayer", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.make_transformer_encoder"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "NERModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "# Word Embedding, Word Local Position Embedding", "\n", "self", ".", "token_embedding", "=", "NERTokenEmbedding", "(", "\n", "config", ".", "vocab_size", ",", "config", ".", "hidden_size", ",", "\n", "max_sent_len", "=", "config", ".", "max_sent_len", ",", "dropout", "=", "config", ".", "dropout", "\n", ")", "\n", "# Multi-layer Transformer Layers to Incorporate Contextual Information", "\n", "self", ".", "token_encoder", "=", "transformer", ".", "make_transformer_encoder", "(", "\n", "config", ".", "num_tf_layers", ",", "config", ".", "hidden_size", ",", "ff_size", "=", "config", ".", "ff_size", ",", "dropout", "=", "config", ".", "dropout", "\n", ")", "\n", "if", "self", ".", "config", ".", "use_crf_layer", ":", "\n", "            ", "self", ".", "crf_layer", "=", "CRFLayer", "(", "config", ".", "hidden_size", ",", "self", ".", "config", ".", "num_entity_labels", ")", "\n", "", "else", ":", "\n", "# Token Label Classification", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "config", ".", "num_entity_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.NERModel.forward": [[147, 185], ["ner_model.NERModel.token_embedding", "input_masks.unsqueeze.unsqueeze.unsqueeze", "ner_model.NERModel.token_encoder", "ner_model.NERModel.crf_layer", "ner_model.NERModel.classifier", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.view", "label_ids.view", "torch.nll_loss", "torch.nll_loss", "ner_loss.view().sum.view().sum.view().sum", "torch.log_softmax.argmax", "torch.log_softmax.size", "ner_loss.view().sum.view().sum.view", "label_ids.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_ids", ",", "input_masks", ",", "\n", "label_ids", "=", "None", ",", "train_flag", "=", "True", ",", "decode_flag", "=", "True", ")", ":", "\n", "        ", "\"\"\"Assume input size [batch_size, seq_len]\"\"\"", "\n", "if", "input_masks", ".", "dtype", "!=", "torch", ".", "uint8", ":", "\n", "            ", "input_masks", "=", "input_masks", "==", "1", "\n", "", "if", "train_flag", ":", "\n", "            ", "assert", "label_ids", "is", "not", "None", "\n", "\n", "# get contextual info", "\n", "", "input_emb", "=", "self", ".", "token_embedding", "(", "input_ids", ")", "\n", "input_masks", "=", "input_masks", ".", "unsqueeze", "(", "-", "2", ")", "# to fit for the transformer code", "\n", "batch_seq_enc", "=", "self", ".", "token_encoder", "(", "input_emb", ",", "input_masks", ")", "\n", "\n", "if", "self", ".", "config", ".", "use_crf_layer", ":", "\n", "            ", "ner_loss", ",", "batch_seq_preds", "=", "self", ".", "crf_layer", "(", "\n", "batch_seq_enc", ",", "seq_token_label", "=", "label_ids", ",", "batch_first", "=", "True", ",", "\n", "train_flag", "=", "train_flag", ",", "decode_flag", "=", "decode_flag", "\n", ")", "\n", "", "else", ":", "\n", "# [batch_size, seq_len, num_entity_labels]", "\n", "            ", "batch_seq_logits", "=", "self", ".", "classifier", "(", "batch_seq_enc", ")", "\n", "batch_seq_logp", "=", "F", ".", "log_softmax", "(", "batch_seq_logits", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "train_flag", ":", "\n", "                ", "batch_logp", "=", "batch_seq_logp", ".", "view", "(", "-", "1", ",", "batch_seq_logp", ".", "size", "(", "-", "1", ")", ")", "\n", "batch_label", "=", "label_ids", ".", "view", "(", "-", "1", ")", "\n", "# ner_loss = F.nll_loss(batch_logp, batch_label, reduction='sum')", "\n", "ner_loss", "=", "F", ".", "nll_loss", "(", "batch_logp", ",", "batch_label", ",", "reduction", "=", "'none'", ")", "\n", "ner_loss", "=", "ner_loss", ".", "view", "(", "label_ids", ".", "size", "(", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "# [batch_size]", "\n", "", "else", ":", "\n", "                ", "ner_loss", "=", "None", "\n", "\n", "", "if", "decode_flag", ":", "\n", "                ", "batch_seq_preds", "=", "batch_seq_logp", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "batch_seq_preds", "=", "None", "\n", "\n", "", "", "return", "batch_seq_enc", ",", "ner_loss", ",", "batch_seq_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.NERTokenEmbedding.__init__": [[189, 197], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "transformer.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__"], ["def", "__init__", "(", "self", ",", "vocab_size", ",", "hidden_size", ",", "max_sent_len", "=", "256", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "NERTokenEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "token_embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "hidden_size", ")", "\n", "self", ".", "pos_embedding", "=", "nn", ".", "Embedding", "(", "max_sent_len", ",", "hidden_size", ")", "\n", "\n", "self", ".", "layer_norm", "=", "transformer", ".", "LayerNorm", "(", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.NERTokenEmbedding.forward": [[198, 216], ["batch_token_ids.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "batch_pos_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "ner_model.NERTokenEmbedding.token_embedding", "ner_model.NERTokenEmbedding.pos_embedding", "ner_model.NERTokenEmbedding.layer_norm", "ner_model.NERTokenEmbedding.dropout", "batch_pos_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_token_ids", ")", ":", "\n", "        ", "batch_size", ",", "sent_len", "=", "batch_token_ids", ".", "size", "(", ")", "\n", "device", "=", "batch_token_ids", ".", "device", "\n", "\n", "batch_pos_ids", "=", "torch", ".", "arange", "(", "\n", "sent_len", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ",", "requires_grad", "=", "False", "\n", ")", "\n", "batch_pos_ids", "=", "batch_pos_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "batch_token_ids", ")", "\n", "\n", "batch_token_emb", "=", "self", ".", "token_embedding", "(", "batch_token_ids", ")", "\n", "batch_pos_emb", "=", "self", ".", "pos_embedding", "(", "batch_pos_ids", ")", "\n", "\n", "batch_token_emb", "=", "batch_token_emb", "+", "batch_pos_emb", "\n", "\n", "batch_token_out", "=", "self", ".", "layer_norm", "(", "batch_token_emb", ")", "\n", "batch_token_out", "=", "self", ".", "dropout", "(", "batch_token_out", ")", "\n", "\n", "return", "batch_token_out", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.CRFLayer.__init__": [[227, 240], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Parameter", "torch.nn.Parameter", "ner_model.CRFLayer.reset_trans_mat", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.CRFLayer.reset_trans_mat"], ["def", "__init__", "(", "self", ",", "hidden_size", ",", "num_entity_labels", ")", ":", "\n", "        ", "super", "(", "CRFLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tag_size", "=", "num_entity_labels", "+", "2", "# add start tag and end tag", "\n", "self", ".", "start_tag", "=", "self", ".", "tag_size", "-", "2", "\n", "self", ".", "end_tag", "=", "self", ".", "tag_size", "-", "1", "\n", "\n", "# Map token-level hidden state into tag scores", "\n", "self", ".", "hidden2tag", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "self", ".", "tag_size", ")", "\n", "# Transition Matrix", "\n", "# [i, j] denotes transitioning from j to i", "\n", "self", ".", "trans_mat", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "tag_size", ",", "self", ".", "tag_size", ")", ")", "\n", "self", ".", "reset_trans_mat", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.CRFLayer.reset_trans_mat": [[241, 246], ["torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "math.sqrt"], "methods", ["None"], ["", "def", "reset_trans_mat", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "trans_mat", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "# copy from Linear init", "\n", "# set parameters that will not be updated during training, but is important", "\n", "self", ".", "trans_mat", ".", "data", "[", "self", ".", "start_tag", ",", ":", "]", "=", "self", ".", "NEG_LOGIT", "\n", "self", ".", "trans_mat", ".", "data", "[", ":", ",", "self", ".", "end_tag", "]", "=", "self", ".", "NEG_LOGIT", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.CRFLayer.get_log_parition": [[247, 271], ["seq_emit_score.size", "seq_emit_score.new_full", "ner_model.CRFLayer.trans_mat.unsqueeze().expand", "range", "ner_model.log_sum_exp", "log_sum_exp.unsqueeze", "seq_emit_score[].unsqueeze", "ner_model.log_sum_exp", "ner_model.CRFLayer.trans_mat[].unsqueeze", "ner_model.CRFLayer.trans_mat.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.log_sum_exp", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.log_sum_exp"], ["", "def", "get_log_parition", "(", "self", ",", "seq_emit_score", ")", ":", "\n", "        ", "\"\"\"\n        Calculate the log of the partition function\n        :param seq_emit_score: [seq_len, batch_size, tag_size]\n        :return: Tensor with Size([batch_size])\n        \"\"\"", "\n", "seq_len", ",", "batch_size", ",", "tag_size", "=", "seq_emit_score", ".", "size", "(", ")", "\n", "# dynamic programming table to store previously summarized tag logits", "\n", "dp_table", "=", "seq_emit_score", ".", "new_full", "(", "\n", "(", "batch_size", ",", "tag_size", ")", ",", "self", ".", "NEG_LOGIT", ",", "requires_grad", "=", "False", "\n", ")", "\n", "dp_table", "[", ":", ",", "self", ".", "start_tag", "]", "=", "0.", "\n", "\n", "batch_trans_mat", "=", "self", ".", "trans_mat", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "tag_size", ",", "tag_size", ")", "\n", "\n", "for", "token_idx", "in", "range", "(", "seq_len", ")", ":", "\n", "            ", "prev_logit", "=", "dp_table", ".", "unsqueeze", "(", "1", ")", "# [batch_size, 1, tag_size]", "\n", "batch_emit_score", "=", "seq_emit_score", "[", "token_idx", "]", ".", "unsqueeze", "(", "-", "1", ")", "# [batch_size, tag_size, 1]", "\n", "cur_logit", "=", "batch_trans_mat", "+", "batch_emit_score", "+", "prev_logit", "# [batch_size, tag_size, tag_size]", "\n", "dp_table", "=", "log_sum_exp", "(", "cur_logit", ")", "# [batch_size, tag_size]", "\n", "", "batch_logit", "=", "dp_table", "+", "self", ".", "trans_mat", "[", "self", ".", "end_tag", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", "\n", "log_partition", "=", "log_sum_exp", "(", "batch_logit", ")", "# [batch_size]", "\n", "\n", "return", "log_partition", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.CRFLayer.get_gold_score": [[272, 308], ["seq_emit_score.size", "seq_token_label.new_full", "torch.cat().unsqueeze().unsqueeze().expand", "torch.cat().unsqueeze().unsqueeze().expand", "torch.cat().unsqueeze().unsqueeze().expand", "torch.cat().unsqueeze().unsqueeze().expand", "seq_token_label.new_full", "torch.cat().unsqueeze().unsqueeze", "torch.cat().unsqueeze().unsqueeze", "torch.cat().unsqueeze().unsqueeze", "torch.cat().unsqueeze().unsqueeze", "ner_model.CRFLayer.trans_mat.unsqueeze().unsqueeze().expand", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather.sum().squeeze().squeeze", "torch.gather.sum().squeeze().squeeze", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather.sum().squeeze", "torch.gather.sum().squeeze", "seq_token_label.unsqueeze", "torch.cat().unsqueeze().unsqueeze", "torch.cat().unsqueeze().unsqueeze", "torch.cat().unsqueeze().unsqueeze", "torch.cat().unsqueeze().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "ner_model.CRFLayer.trans_mat.unsqueeze().unsqueeze", "torch.gather.sum().squeeze", "torch.gather.sum().squeeze", "torch.gather.sum", "torch.gather.sum", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ner_model.CRFLayer.trans_mat.unsqueeze", "torch.gather.sum", "torch.gather.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "get_gold_score", "(", "self", ",", "seq_emit_score", ",", "seq_token_label", ")", ":", "\n", "        ", "\"\"\"\n        Calculate the score of the given sequence label\n        :param seq_emit_score: [seq_len, batch_size, tag_size]\n        :param seq_token_label: [seq_len, batch_size]\n        :return: Tensor with Size([batch_size])\n        \"\"\"", "\n", "seq_len", ",", "batch_size", ",", "tag_size", "=", "seq_emit_score", ".", "size", "(", ")", "\n", "\n", "end_token_label", "=", "seq_token_label", ".", "new_full", "(", "\n", "(", "1", ",", "batch_size", ")", ",", "self", ".", "end_tag", ",", "requires_grad", "=", "False", "\n", ")", "\n", "seq_cur_label", "=", "torch", ".", "cat", "(", "\n", "[", "seq_token_label", ",", "end_token_label", "]", ",", "dim", "=", "0", "\n", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "seq_len", "+", "1", ",", "batch_size", ",", "1", ",", "tag_size", ")", "\n", "\n", "start_token_label", "=", "seq_token_label", ".", "new_full", "(", "\n", "(", "1", ",", "batch_size", ")", ",", "self", ".", "start_tag", ",", "requires_grad", "=", "False", "\n", ")", "\n", "seq_prev_label", "=", "torch", ".", "cat", "(", "\n", "[", "start_token_label", ",", "seq_token_label", "]", ",", "dim", "=", "0", "\n", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# [seq_len+1, batch_size, 1, 1]", "\n", "\n", "seq_trans_score", "=", "self", ".", "trans_mat", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "seq_len", "+", "1", ",", "batch_size", ",", "tag_size", ",", "tag_size", ")", "\n", "# gather according to token label at the current token", "\n", "gold_trans_score", "=", "torch", ".", "gather", "(", "seq_trans_score", ",", "2", ",", "seq_cur_label", ")", "# [seq_len+1, batch_size, 1, tag_size]", "\n", "# gather according to token label at the previous token", "\n", "gold_trans_score", "=", "torch", ".", "gather", "(", "gold_trans_score", ",", "3", ",", "seq_prev_label", ")", "# [seq_len+1, batch_size, 1, 1]", "\n", "batch_trans_score", "=", "gold_trans_score", ".", "sum", "(", "dim", "=", "0", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "# [batch_size]", "\n", "\n", "gold_emit_score", "=", "torch", ".", "gather", "(", "seq_emit_score", ",", "2", ",", "seq_token_label", ".", "unsqueeze", "(", "-", "1", ")", ")", "# [seq_len, batch_size, 1]", "\n", "batch_emit_score", "=", "gold_emit_score", ".", "sum", "(", "dim", "=", "0", ")", ".", "squeeze", "(", "-", "1", ")", "# [batch_size]", "\n", "\n", "gold_score", "=", "batch_trans_score", "+", "batch_emit_score", "# [batch_size]", "\n", "\n", "return", "gold_score", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.CRFLayer.viterbi_decode": [[309, 350], ["seq_emit_score.size", "seq_emit_score.new_full", "range", "ner_model.CRFLayer.trans_mat[].unsqueeze().expand", "seq_emit_score.new_full.max", "torch.gather.unsqueeze", "torch.gather.unsqueeze", "reversed", "best_tag_list.pop", "best_tag_list.reverse", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "seq_emit_score.new_full.unsqueeze", "ner_model.CRFLayer.trans_mat.unsqueeze().expand", "seq_emit_score[].unsqueeze", "cur_trans_score.max", "backpointers.append", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "best_tag_list.append", "ner_model.CRFLayer.trans_mat[].unsqueeze", "ner_model.CRFLayer.trans_mat.unsqueeze"], "methods", ["None"], ["", "def", "viterbi_decode", "(", "self", ",", "seq_emit_score", ")", ":", "\n", "        ", "\"\"\"\n        Use viterbi decoding to get prediction\n        :param seq_emit_score: [seq_len, batch_size, tag_size]\n        :return:\n            batch_best_path: [batch_size, seq_len], the best tag for each token\n            batch_best_score: [batch_size], the corresponding score for each path\n        \"\"\"", "\n", "seq_len", ",", "batch_size", ",", "tag_size", "=", "seq_emit_score", ".", "size", "(", ")", "\n", "\n", "dp_table", "=", "seq_emit_score", ".", "new_full", "(", "(", "batch_size", ",", "tag_size", ")", ",", "self", ".", "NEG_LOGIT", ",", "requires_grad", "=", "False", ")", "\n", "dp_table", "[", ":", ",", "self", ".", "start_tag", "]", "=", "0", "\n", "backpointers", "=", "[", "]", "\n", "\n", "for", "token_idx", "in", "range", "(", "seq_len", ")", ":", "\n", "            ", "last_tag_score", "=", "dp_table", ".", "unsqueeze", "(", "-", "2", ")", "# [batch_size, 1, tag_size]", "\n", "batch_trans_mat", "=", "self", ".", "trans_mat", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "tag_size", ",", "tag_size", ")", "\n", "cur_emit_score", "=", "seq_emit_score", "[", "token_idx", "]", ".", "unsqueeze", "(", "-", "1", ")", "# [batch_size, tag_size, 1]", "\n", "cur_trans_score", "=", "batch_trans_mat", "+", "last_tag_score", "+", "cur_emit_score", "# [batch_size, tag_size, tag_size]", "\n", "dp_table", ",", "cur_tag_bp", "=", "cur_trans_score", ".", "max", "(", "dim", "=", "-", "1", ")", "# [batch_size, tag_size]", "\n", "backpointers", ".", "append", "(", "cur_tag_bp", ")", "\n", "# transition to the end tag", "\n", "", "last_trans_arr", "=", "self", ".", "trans_mat", "[", "self", ".", "end_tag", "]", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "tag_size", ")", "\n", "dp_table", "=", "dp_table", "+", "last_trans_arr", "\n", "\n", "# get the best path score and the best tag of the last token", "\n", "batch_best_score", ",", "best_tag", "=", "dp_table", ".", "max", "(", "dim", "=", "-", "1", ")", "# [batch_size]", "\n", "best_tag", "=", "best_tag", ".", "unsqueeze", "(", "-", "1", ")", "# [batch_size, 1]", "\n", "best_tag_list", "=", "[", "best_tag", "]", "\n", "# reversely traverse back pointers to recover the best path", "\n", "for", "last_tag_bp", "in", "reversed", "(", "backpointers", ")", ":", "\n", "# best_tag Size([batch_size, 1]) records the current tag that can own the highest score", "\n", "# last_tag_bp Size([batch_size, tag_size]) records the last best tag that the current tag is based on", "\n", "            ", "best_tag", "=", "torch", ".", "gather", "(", "last_tag_bp", ",", "1", ",", "best_tag", ")", "# [batch_size, 1]", "\n", "best_tag_list", ".", "append", "(", "best_tag", ")", "\n", "", "batch_start", "=", "best_tag_list", ".", "pop", "(", ")", "\n", "assert", "(", "batch_start", "==", "self", ".", "start_tag", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "==", "batch_size", "\n", "best_tag_list", ".", "reverse", "(", ")", "\n", "batch_best_path", "=", "torch", ".", "cat", "(", "best_tag_list", ",", "dim", "=", "-", "1", ")", "# [batch_size, seq_len]", "\n", "\n", "return", "batch_best_path", ",", "batch_best_score", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.CRFLayer.forward": [[351, 386], ["ner_model.CRFLayer.hidden2tag", "seq_token_emb.transpose().contiguous.transpose().contiguous.transpose().contiguous", "ner_model.CRFLayer.get_gold_score", "ner_model.CRFLayer.get_log_parition", "ner_model.CRFLayer.viterbi_decode", "seq_token_label.transpose().contiguous.transpose().contiguous.transpose().contiguous", "seq_token_emb.transpose().contiguous.transpose().contiguous.transpose", "seq_token_label.transpose().contiguous.transpose().contiguous.transpose"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.CRFLayer.get_gold_score", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.CRFLayer.get_log_parition", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.CRFLayer.viterbi_decode"], ["", "def", "forward", "(", "self", ",", "seq_token_emb", ",", "seq_token_label", "=", "None", ",", "batch_first", "=", "False", ",", "\n", "train_flag", "=", "True", ",", "decode_flag", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Get loss and prediction with CRF support.\n        :param seq_token_emb: assume size [seq_len, batch_size, hidden_size] if not batch_first\n        :param seq_token_label: assume size [seq_len, batch_size] if not batch_first\n        :param batch_first: Flag to denote the meaning of the first dimension\n        :param train_flag: whether to calculate the loss\n        :param decode_flag: whether to decode the path based on current parameters\n        :return:\n            nll_loss: negative log-likelihood loss\n            seq_token_pred: seqeunce predictions\n        \"\"\"", "\n", "if", "batch_first", ":", "\n", "# CRF assumes the input size of [seq_len, batch_size, hidden_size]", "\n", "            ", "seq_token_emb", "=", "seq_token_emb", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "if", "seq_token_label", "is", "not", "None", ":", "\n", "                ", "seq_token_label", "=", "seq_token_label", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "", "seq_emit_score", "=", "self", ".", "hidden2tag", "(", "seq_token_emb", ")", "# [seq_len, batch_size, tag_size]", "\n", "if", "train_flag", ":", "\n", "            ", "gold_score", "=", "self", ".", "get_gold_score", "(", "seq_emit_score", ",", "seq_token_label", ")", "# [batch_size]", "\n", "log_partition", "=", "self", ".", "get_log_parition", "(", "seq_emit_score", ")", "# [batch_size]", "\n", "nll_loss", "=", "log_partition", "-", "gold_score", "\n", "", "else", ":", "\n", "            ", "nll_loss", "=", "None", "\n", "\n", "", "if", "decode_flag", ":", "\n", "# Use viterbi decoding to get the current prediction", "\n", "# no matter what batch_first is, return size is [batch_size, seq_len]", "\n", "            ", "batch_best_path", ",", "batch_best_score", "=", "self", ".", "viterbi_decode", "(", "seq_emit_score", ")", "\n", "", "else", ":", "\n", "            ", "batch_best_path", "=", "None", "\n", "\n", "", "return", "nll_loss", ",", "batch_best_path", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.log_sum_exp": [[389, 399], ["batch_logit.max", "batch_max.unsqueeze", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.exp", "torch.exp"], "function", ["None"], ["", "", "def", "log_sum_exp", "(", "batch_logit", ")", ":", "\n", "    ", "\"\"\"\n    Caculate the log-sum-exp operation for the last dimension.\n    :param batch_logit: Size([*, logit_size]), * should at least be 1\n    :return: Size([*])\n    \"\"\"", "\n", "batch_max", ",", "_", "=", "batch_logit", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "batch_broadcast", "=", "batch_max", ".", "unsqueeze", "(", "-", "1", ")", "\n", "return", "batch_max", "+", "torch", ".", "log", "(", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "batch_logit", "-", "batch_broadcast", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.produce_ner_batch_metrics": [[401, 428], ["seq_logits.size", "torch.log_softmax", "F.log_softmax.argmax", "F.log_softmax.view", "gold_labels.view", "torch.nll_loss().view", "range", "torch.tensor", "torch.tensor", "seq_token_loss[].mean().item", "pred_labels[].tolist", "gold_labels[].tolist", "ner_model.judge_ner_prediction", "batch_metrics.append", "torch.nll_loss", "seq_token_loss[].mean", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.judge_ner_prediction"], ["", "def", "produce_ner_batch_metrics", "(", "seq_logits", ",", "gold_labels", ",", "masks", ")", ":", "\n", "# seq_logits: [batch_size, seq_len, num_entity_labels]", "\n", "# gold_labels: [batch_size, seq_len]", "\n", "# masks: [batch_size, seq_len]", "\n", "    ", "batch_size", ",", "seq_len", ",", "num_entities", "=", "seq_logits", ".", "size", "(", ")", "\n", "\n", "# [batch_size, seq_len, num_entity_labels]", "\n", "seq_logp", "=", "F", ".", "log_softmax", "(", "seq_logits", ",", "dim", "=", "-", "1", ")", "\n", "# [batch_size, seq_len]", "\n", "pred_labels", "=", "seq_logp", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "# [batch_size*seq_len, num_entity_labels]", "\n", "token_logp", "=", "seq_logp", ".", "view", "(", "-", "1", ",", "num_entities", ")", "\n", "# [batch_size*seq_len]", "\n", "token_labels", "=", "gold_labels", ".", "view", "(", "-", "1", ")", "\n", "# [batch_size, seq_len]", "\n", "seq_token_loss", "=", "F", ".", "nll_loss", "(", "token_logp", ",", "token_labels", ",", "reduction", "=", "'none'", ")", ".", "view", "(", "batch_size", ",", "seq_len", ")", "\n", "\n", "batch_metrics", "=", "[", "]", "\n", "for", "bid", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "ex_loss", "=", "seq_token_loss", "[", "bid", ",", "masks", "[", "bid", "]", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "ex_acc", "=", "(", "pred_labels", "[", "bid", ",", "masks", "[", "bid", "]", "]", "==", "gold_labels", "[", "bid", ",", "masks", "[", "bid", "]", "]", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "ex_pred_lids", "=", "pred_labels", "[", "bid", ",", "masks", "[", "bid", "]", "]", ".", "tolist", "(", ")", "\n", "ex_gold_lids", "=", "gold_labels", "[", "bid", ",", "masks", "[", "bid", "]", "]", ".", "tolist", "(", ")", "\n", "ner_tp_set", ",", "ner_fp_set", ",", "ner_fn_set", "=", "judge_ner_prediction", "(", "ex_pred_lids", ",", "ex_gold_lids", ")", "\n", "batch_metrics", ".", "append", "(", "[", "ex_loss", ",", "ex_acc", ",", "len", "(", "ner_tp_set", ")", ",", "len", "(", "ner_fp_set", ")", ",", "len", "(", "ner_fn_set", ")", "]", ")", "\n", "\n", "", "return", "torch", ".", "tensor", "(", "batch_metrics", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "seq_logits", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.judge_ner_prediction": [[430, 497], ["isinstance", "isinstance", "set", "set", "enumerate", "enumerate", "set.intersection", "pred_label_ids.tolist.tolist", "gold_label_ids.tolist.tolist", "set.add", "set.add", "set.add", "len", "set.add", "len", "set.add", "set.add", "set.add", "set.add"], "function", ["None"], ["", "def", "judge_ner_prediction", "(", "pred_label_ids", ",", "gold_label_ids", ")", ":", "\n", "    ", "\"\"\"Very strong assumption on label_id, 0: others, odd: ner_start, even: ner_mid\"\"\"", "\n", "if", "isinstance", "(", "pred_label_ids", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "pred_label_ids", "=", "pred_label_ids", ".", "tolist", "(", ")", "\n", "", "if", "isinstance", "(", "gold_label_ids", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "gold_label_ids", "=", "gold_label_ids", ".", "tolist", "(", ")", "\n", "# element: (ner_start_index, ner_end_index, ner_type_id)", "\n", "", "pred_ner_set", "=", "set", "(", ")", "\n", "gold_ner_set", "=", "set", "(", ")", "\n", "\n", "pred_ner_sid", "=", "None", "\n", "for", "idx", ",", "ner", "in", "enumerate", "(", "pred_label_ids", ")", ":", "\n", "        ", "if", "pred_ner_sid", "is", "None", ":", "\n", "            ", "if", "ner", "%", "2", "==", "1", ":", "\n", "                ", "pred_ner_sid", "=", "idx", "\n", "continue", "\n", "", "", "else", ":", "\n", "            ", "prev_ner", "=", "pred_label_ids", "[", "pred_ner_sid", "]", "\n", "if", "ner", "==", "0", ":", "\n", "                ", "pred_ner_set", ".", "add", "(", "(", "pred_ner_sid", ",", "idx", ",", "prev_ner", ")", ")", "\n", "pred_ner_sid", "=", "None", "\n", "continue", "\n", "", "elif", "ner", "==", "prev_ner", "+", "1", ":", "# same entity", "\n", "                ", "continue", "\n", "", "elif", "ner", "%", "2", "==", "1", ":", "\n", "                ", "pred_ner_set", ".", "add", "(", "(", "pred_ner_sid", ",", "idx", ",", "prev_ner", ")", ")", "\n", "pred_ner_sid", "=", "idx", "\n", "continue", "\n", "", "else", ":", "# ignore invalid subsequence ners", "\n", "                ", "pred_ner_set", ".", "add", "(", "(", "pred_ner_sid", ",", "idx", ",", "prev_ner", ")", ")", "\n", "pred_ner_sid", "=", "None", "\n", "pass", "\n", "", "", "", "if", "pred_ner_sid", "is", "not", "None", ":", "\n", "        ", "prev_ner", "=", "pred_label_ids", "[", "pred_ner_sid", "]", "\n", "pred_ner_set", ".", "add", "(", "(", "pred_ner_sid", ",", "len", "(", "pred_label_ids", ")", ",", "prev_ner", ")", ")", "\n", "\n", "", "gold_ner_sid", "=", "None", "\n", "for", "idx", ",", "ner", "in", "enumerate", "(", "gold_label_ids", ")", ":", "\n", "        ", "if", "gold_ner_sid", "is", "None", ":", "\n", "            ", "if", "ner", "%", "2", "==", "1", ":", "\n", "                ", "gold_ner_sid", "=", "idx", "\n", "continue", "\n", "", "", "else", ":", "\n", "            ", "prev_ner", "=", "gold_label_ids", "[", "gold_ner_sid", "]", "\n", "if", "ner", "==", "0", ":", "\n", "                ", "gold_ner_set", ".", "add", "(", "(", "gold_ner_sid", ",", "idx", ",", "prev_ner", ")", ")", "\n", "gold_ner_sid", "=", "None", "\n", "continue", "\n", "", "elif", "ner", "==", "prev_ner", "+", "1", ":", "# same entity", "\n", "                ", "continue", "\n", "", "elif", "ner", "%", "2", "==", "1", ":", "\n", "                ", "gold_ner_set", ".", "add", "(", "(", "gold_ner_sid", ",", "idx", ",", "prev_ner", ")", ")", "\n", "gold_ner_sid", "=", "idx", "\n", "continue", "\n", "", "else", ":", "# ignore invalid subsequence ners", "\n", "                ", "gold_ner_set", ".", "add", "(", "(", "gold_ner_sid", ",", "idx", ",", "prev_ner", ")", ")", "\n", "gold_ner_sid", "=", "None", "\n", "pass", "\n", "", "", "", "if", "gold_ner_sid", "is", "not", "None", ":", "\n", "        ", "prev_ner", "=", "gold_label_ids", "[", "gold_ner_sid", "]", "\n", "gold_ner_set", ".", "add", "(", "(", "gold_ner_sid", ",", "len", "(", "gold_label_ids", ")", ",", "prev_ner", ")", ")", "\n", "\n", "", "ner_tp_set", "=", "pred_ner_set", ".", "intersection", "(", "gold_ner_set", ")", "\n", "ner_fp_set", "=", "pred_ner_set", "-", "gold_ner_set", "\n", "ner_fn_set", "=", "gold_ner_set", "-", "pred_ner_set", "\n", "\n", "return", "ner_tp_set", ",", "ner_fp_set", ",", "ner_fn_set", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.__init__": [[73, 120], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "dee_model.SentencePosEncoder", "ner_model.NERModel", "dee_model.MentionTypeEncoder", "dee_model.AttentiveReducer", "dee_model.AttentiveReducer", "dee_model.AttentiveReducer", "transformer.make_transformer_encoder", "transformer.make_transformer_encoder", "dee_model.EventTable"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.make_transformer_encoder", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.make_transformer_encoder"], ["def", "__init__", "(", "self", ",", "config", ",", "event_type_fields_pairs", ",", "ner_model", "=", "None", ")", ":", "\n", "        ", "super", "(", "Doc2EDAGModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Note that for distributed training, you must ensure that", "\n", "# for any batch, all parameters need to be used", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "event_type_fields_pairs", "=", "event_type_fields_pairs", "\n", "\n", "if", "ner_model", "is", "None", ":", "\n", "            ", "self", ".", "ner_model", "=", "NERModel", "(", "config", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ner_model", "=", "ner_model", "\n", "\n", "# all event tables", "\n", "", "self", ".", "event_tables", "=", "nn", ".", "ModuleList", "(", "[", "\n", "EventTable", "(", "event_type", ",", "field_types", ",", "config", ".", "hidden_size", ")", "\n", "for", "event_type", ",", "field_types", "in", "self", ".", "event_type_fields_pairs", "\n", "]", ")", "\n", "\n", "# sentence position indicator", "\n", "self", ".", "sent_pos_encoder", "=", "SentencePosEncoder", "(", "\n", "config", ".", "hidden_size", ",", "max_sent_num", "=", "config", ".", "max_sent_num", ",", "dropout", "=", "config", ".", "dropout", "\n", ")", "\n", "\n", "if", "self", ".", "config", ".", "use_token_role", ":", "\n", "            ", "self", ".", "ment_type_encoder", "=", "MentionTypeEncoder", "(", "\n", "config", ".", "hidden_size", ",", "config", ".", "num_entity_labels", ",", "dropout", "=", "config", ".", "dropout", "\n", ")", "\n", "\n", "# various attentive reducer", "\n", "", "if", "self", ".", "config", ".", "seq_reduce_type", "==", "'AWA'", ":", "\n", "            ", "self", ".", "doc_token_reducer", "=", "AttentiveReducer", "(", "config", ".", "hidden_size", ",", "dropout", "=", "config", ".", "dropout", ")", "\n", "self", ".", "span_token_reducer", "=", "AttentiveReducer", "(", "config", ".", "hidden_size", ",", "dropout", "=", "config", ".", "dropout", ")", "\n", "self", ".", "span_mention_reducer", "=", "AttentiveReducer", "(", "config", ".", "hidden_size", ",", "dropout", "=", "config", ".", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "config", ".", "seq_reduce_type", "in", "{", "'MaxPooling'", ",", "'MeanPooling'", "}", "\n", "\n", "", "if", "self", ".", "config", ".", "use_doc_enc", ":", "\n", "# get doc-level context information for every mention and sentence", "\n", "            ", "self", ".", "doc_context_encoder", "=", "transformer", ".", "make_transformer_encoder", "(", "\n", "config", ".", "num_tf_layers", ",", "config", ".", "hidden_size", ",", "ff_size", "=", "config", ".", "ff_size", ",", "dropout", "=", "config", ".", "dropout", "\n", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "use_path_mem", ":", "\n", "# get field-specific and history-aware information for every span", "\n", "            ", "self", ".", "field_context_encoder", "=", "transformer", ".", "make_transformer_encoder", "(", "\n", "config", ".", "num_tf_layers", ",", "config", ".", "hidden_size", ",", "ff_size", "=", "config", ".", "ff_size", ",", "dropout", "=", "config", ".", "dropout", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_doc_span_mention_emb": [[122, 155], ["len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "dee_model.Doc2EDAGModel.sent_pos_encoder", "mention_emb_list.append", "dee_model.Doc2EDAGModel.ment_type_encoder", "dee_model.Doc2EDAGModel.span_token_reducer", "mention_token_emb.max", "mention_token_emb.mean", "Exception"], "methods", ["None"], ["", "", "def", "get_doc_span_mention_emb", "(", "self", ",", "doc_token_emb", ",", "doc_span_info", ")", ":", "\n", "        ", "if", "len", "(", "doc_span_info", ".", "mention_drange_list", ")", "==", "0", ":", "\n", "            ", "doc_mention_emb", "=", "None", "\n", "", "else", ":", "\n", "# get mention context embeding", "\n", "# doc_mention_emb = torch.cat([", "\n", "#     # doc_token_emb[sent_idx, char_s:char_e, :].sum(dim=0, keepdim=True)", "\n", "#     doc_token_emb[sent_idx, char_s:char_e, :].max(dim=0, keepdim=True)[0]", "\n", "#     for sent_idx, char_s, char_e in doc_span_info.mention_drange_list", "\n", "# ])", "\n", "            ", "mention_emb_list", "=", "[", "]", "\n", "for", "sent_idx", ",", "char_s", ",", "char_e", "in", "doc_span_info", ".", "mention_drange_list", ":", "\n", "                ", "mention_token_emb", "=", "doc_token_emb", "[", "sent_idx", ",", "char_s", ":", "char_e", ",", ":", "]", "# [num_mention_tokens, hidden_size]", "\n", "if", "self", ".", "config", ".", "seq_reduce_type", "==", "'AWA'", ":", "\n", "                    ", "mention_emb", "=", "self", ".", "span_token_reducer", "(", "mention_token_emb", ")", "# [hidden_size]", "\n", "", "elif", "self", ".", "config", ".", "seq_reduce_type", "==", "'MaxPooling'", ":", "\n", "                    ", "mention_emb", "=", "mention_token_emb", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", "\n", "", "elif", "self", ".", "config", ".", "seq_reduce_type", "==", "'MeanPooling'", ":", "\n", "                    ", "mention_emb", "=", "mention_token_emb", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "'Unknown seq_reduce_type {}'", ".", "format", "(", "self", ".", "config", ".", "seq_reduce_type", ")", ")", "\n", "", "mention_emb_list", ".", "append", "(", "mention_emb", ")", "\n", "", "doc_mention_emb", "=", "torch", ".", "stack", "(", "mention_emb_list", ",", "dim", "=", "0", ")", "\n", "\n", "# add sentence position embedding", "\n", "mention_sent_id_list", "=", "[", "drange", "[", "0", "]", "for", "drange", "in", "doc_span_info", ".", "mention_drange_list", "]", "\n", "doc_mention_emb", "=", "self", ".", "sent_pos_encoder", "(", "doc_mention_emb", ",", "sent_pos_ids", "=", "mention_sent_id_list", ")", "\n", "\n", "if", "self", ".", "config", ".", "use_token_role", ":", "\n", "# get mention type embedding", "\n", "                ", "doc_mention_emb", "=", "self", ".", "ment_type_encoder", "(", "doc_mention_emb", ",", "doc_span_info", ".", "mention_type_list", ")", "\n", "\n", "", "", "return", "doc_mention_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_batch_sent_emb": [[156, 173], ["dee_model.Doc2EDAGModel.sent_pos_encoder", "dee_model.Doc2EDAGModel.doc_token_reducer", "list", "range", "ner_token_emb.max", "ner_token_emb.mean", "Exception"], "methods", ["None"], ["", "def", "get_batch_sent_emb", "(", "self", ",", "ner_token_emb", ",", "ner_token_masks", ",", "valid_sent_num_list", ")", ":", "\n", "# From [ner_batch_size, sent_len, hidden_size] to [ner_batch_size, hidden_size]", "\n", "        ", "if", "self", ".", "config", ".", "seq_reduce_type", "==", "'AWA'", ":", "\n", "            ", "total_sent_emb", "=", "self", ".", "doc_token_reducer", "(", "ner_token_emb", ",", "masks", "=", "ner_token_masks", ")", "\n", "", "elif", "self", ".", "config", ".", "seq_reduce_type", "==", "'MaxPooling'", ":", "\n", "            ", "total_sent_emb", "=", "ner_token_emb", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "elif", "self", ".", "config", ".", "seq_reduce_type", "==", "'MeanPooling'", ":", "\n", "            ", "total_sent_emb", "=", "ner_token_emb", ".", "mean", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Unknown seq_reduce_type {}'", ".", "format", "(", "self", ".", "config", ".", "seq_reduce_type", ")", ")", "\n", "\n", "", "total_sent_pos_ids", "=", "[", "]", "\n", "for", "valid_sent_num", "in", "valid_sent_num_list", ":", "\n", "            ", "total_sent_pos_ids", "+=", "list", "(", "range", "(", "valid_sent_num", ")", ")", "\n", "", "total_sent_emb", "=", "self", ".", "sent_pos_encoder", "(", "total_sent_emb", ",", "sent_pos_ids", "=", "total_sent_pos_ids", ")", "\n", "\n", "return", "total_sent_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_doc_span_sent_context": [[174, 239], ["dee_model.Doc2EDAGModel.get_doc_span_mention_emb", "doc_sent_emb.size", "dee_model.Doc2EDAGModel.size", "dee_model.Doc2EDAGModel.doc_context_encoder().squeeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "dee_model.Doc2EDAGModel.doc_context_encoder().squeeze", "span_context_list.append", "span_context_list.append", "dee_model.Doc2EDAGModel.doc_context_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dee_model.Doc2EDAGModel.doc_context_encoder", "dee_model.Doc2EDAGModel.span_mention_reducer", "dee_model.Doc2EDAGModel.span_mention_reducer", "doc_sent_emb.unsqueeze", "multi_ment_context.max", "multi_ment_context.mean", "Exception", "multi_ment_emb.max", "multi_ment_emb.mean", "Exception"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_doc_span_mention_emb"], ["", "def", "get_doc_span_sent_context", "(", "self", ",", "doc_token_emb", ",", "doc_sent_emb", ",", "doc_fea", ",", "doc_span_info", ")", ":", "\n", "        ", "doc_mention_emb", "=", "self", ".", "get_doc_span_mention_emb", "(", "doc_token_emb", ",", "doc_span_info", ")", "\n", "\n", "# only consider actual sentences", "\n", "if", "doc_sent_emb", ".", "size", "(", "0", ")", ">", "doc_fea", ".", "valid_sent_num", ":", "\n", "            ", "doc_sent_emb", "=", "doc_sent_emb", "[", ":", "doc_fea", ".", "valid_sent_num", ",", ":", "]", "\n", "\n", "", "span_context_list", "=", "[", "]", "\n", "\n", "if", "doc_mention_emb", "is", "None", ":", "\n", "            ", "if", "self", ".", "config", ".", "use_doc_enc", ":", "\n", "                ", "doc_sent_context", "=", "self", ".", "doc_context_encoder", "(", "doc_sent_emb", ".", "unsqueeze", "(", "0", ")", ",", "None", ")", ".", "squeeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "doc_sent_context", "=", "doc_sent_emb", "\n", "", "", "else", ":", "\n", "            ", "num_mentions", "=", "doc_mention_emb", ".", "size", "(", "0", ")", "\n", "\n", "if", "self", ".", "config", ".", "use_doc_enc", ":", "\n", "# Size([1, num_mentions + num_valid_sents, hidden_size])", "\n", "                ", "total_ment_sent_emb", "=", "torch", ".", "cat", "(", "[", "doc_mention_emb", ",", "doc_sent_emb", "]", ",", "dim", "=", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# size = [num_mentions+num_valid_sents, hidden_size]", "\n", "# here we do not need mask", "\n", "total_ment_sent_context", "=", "self", ".", "doc_context_encoder", "(", "total_ment_sent_emb", ",", "None", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "# collect span context", "\n", "for", "mid_s", ",", "mid_e", "in", "doc_span_info", ".", "span_mention_range_list", ":", "\n", "                    ", "assert", "mid_e", "<=", "num_mentions", "\n", "multi_ment_context", "=", "total_ment_sent_context", "[", "mid_s", ":", "mid_e", "]", "# [num_mentions, hidden_size]", "\n", "\n", "# span_context.size [1, hidden_size]", "\n", "if", "self", ".", "config", ".", "seq_reduce_type", "==", "'AWA'", ":", "\n", "                        ", "span_context", "=", "self", ".", "span_mention_reducer", "(", "multi_ment_context", ",", "keepdim", "=", "True", ")", "\n", "", "elif", "self", ".", "config", ".", "seq_reduce_type", "==", "'MaxPooling'", ":", "\n", "                        ", "span_context", "=", "multi_ment_context", ".", "max", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "", "elif", "self", ".", "config", ".", "seq_reduce_type", "==", "'MeanPooling'", ":", "\n", "                        ", "span_context", "=", "multi_ment_context", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "Exception", "(", "'Unknown seq_reduce_type {}'", ".", "format", "(", "self", ".", "config", ".", "seq_reduce_type", ")", ")", "\n", "\n", "", "span_context_list", ".", "append", "(", "span_context", ")", "\n", "\n", "# collect sent context", "\n", "", "doc_sent_context", "=", "total_ment_sent_context", "[", "num_mentions", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "# collect span context", "\n", "                ", "for", "mid_s", ",", "mid_e", "in", "doc_span_info", ".", "span_mention_range_list", ":", "\n", "                    ", "assert", "mid_e", "<=", "num_mentions", "\n", "multi_ment_emb", "=", "doc_mention_emb", "[", "mid_s", ":", "mid_e", "]", "# [num_mentions, hidden_size]", "\n", "\n", "# span_context.size is [1, hidden_size]", "\n", "if", "self", ".", "config", ".", "seq_reduce_type", "==", "'AWA'", ":", "\n", "                        ", "span_context", "=", "self", ".", "span_mention_reducer", "(", "multi_ment_emb", ",", "keepdim", "=", "True", ")", "\n", "", "elif", "self", ".", "config", ".", "seq_reduce_type", "==", "'MaxPooling'", ":", "\n", "                        ", "span_context", "=", "multi_ment_emb", ".", "max", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "", "elif", "self", ".", "config", ".", "seq_reduce_type", "==", "'MeanPooling'", ":", "\n", "                        ", "span_context", "=", "multi_ment_emb", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "Exception", "(", "'Unknown seq_reduce_type {}'", ".", "format", "(", "self", ".", "config", ".", "seq_reduce_type", ")", ")", "\n", "", "span_context_list", ".", "append", "(", "span_context", ")", "\n", "\n", "# collect sent context", "\n", "", "doc_sent_context", "=", "doc_sent_emb", "\n", "\n", "", "", "return", "span_context_list", ",", "doc_sent_context", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_event_cls_info": [[240, 258], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "event_table", "torch.cat.append", "torch.cat.append", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.nll_loss", "torch.nll_loss", "torch.cat.argmax().tolist", "torch.cat.argmax().tolist", "torch.cat.argmax", "torch.cat.argmax"], "methods", ["None"], ["", "def", "get_event_cls_info", "(", "self", ",", "sent_context_emb", ",", "doc_fea", ",", "train_flag", "=", "True", ")", ":", "\n", "        ", "doc_event_logps", "=", "[", "]", "\n", "for", "event_idx", ",", "event_label", "in", "enumerate", "(", "doc_fea", ".", "event_type_labels", ")", ":", "\n", "            ", "event_table", "=", "self", ".", "event_tables", "[", "event_idx", "]", "\n", "cur_event_logp", "=", "event_table", "(", "sent_context_emb", "=", "sent_context_emb", ")", "# [1, hidden_size]", "\n", "doc_event_logps", ".", "append", "(", "cur_event_logp", ")", "\n", "", "doc_event_logps", "=", "torch", ".", "cat", "(", "doc_event_logps", ",", "dim", "=", "0", ")", "# [num_event_types, 2]", "\n", "\n", "if", "train_flag", ":", "\n", "            ", "device", "=", "doc_event_logps", ".", "device", "\n", "doc_event_labels", "=", "torch", ".", "tensor", "(", "\n", "doc_fea", ".", "event_type_labels", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ",", "requires_grad", "=", "False", "\n", ")", "# [num_event_types]", "\n", "doc_event_cls_loss", "=", "F", ".", "nll_loss", "(", "doc_event_logps", ",", "doc_event_labels", ",", "reduction", "=", "'sum'", ")", "\n", "return", "doc_event_cls_loss", "\n", "", "else", ":", "\n", "            ", "doc_event_pred_list", "=", "doc_event_logps", ".", "argmax", "(", "dim", "=", "-", "1", ")", ".", "tolist", "(", ")", "\n", "return", "doc_event_pred_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_field_cls_info": [[259, 276], ["dee_model.Doc2EDAGModel.get_field_pred_logp", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.nll_loss", "torch.nll_loss", "dee_model.Doc2EDAGModel.argmax().tolist", "dee_model.Doc2EDAGModel.argmax"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_field_pred_logp"], ["", "", "def", "get_field_cls_info", "(", "self", ",", "event_idx", ",", "field_idx", ",", "batch_span_emb", ",", "\n", "batch_span_label", "=", "None", ",", "train_flag", "=", "True", ")", ":", "\n", "        ", "batch_span_logp", "=", "self", ".", "get_field_pred_logp", "(", "event_idx", ",", "field_idx", ",", "batch_span_emb", ")", "\n", "\n", "if", "train_flag", ":", "\n", "            ", "assert", "batch_span_label", "is", "not", "None", "\n", "device", "=", "batch_span_logp", ".", "device", "\n", "data_type", "=", "batch_span_logp", ".", "dtype", "\n", "# to prevent too many FPs", "\n", "class_weight", "=", "torch", ".", "tensor", "(", "\n", "[", "self", ".", "config", ".", "neg_field_loss_scaling", ",", "1.0", "]", ",", "device", "=", "device", ",", "dtype", "=", "data_type", ",", "requires_grad", "=", "False", "\n", ")", "\n", "field_cls_loss", "=", "F", ".", "nll_loss", "(", "batch_span_logp", ",", "batch_span_label", ",", "weight", "=", "class_weight", ",", "reduction", "=", "'sum'", ")", "\n", "return", "field_cls_loss", ",", "batch_span_logp", "\n", "", "else", ":", "\n", "            ", "span_pred_list", "=", "batch_span_logp", ".", "argmax", "(", "dim", "=", "-", "1", ")", ".", "tolist", "(", ")", "\n", "return", "span_pred_list", ",", "batch_span_logp", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_field_pred_logp": [[277, 287], ["event_table", "event_table.detach().exp", "event_table.detach"], "methods", ["None"], ["", "", "def", "get_field_pred_logp", "(", "self", ",", "event_idx", ",", "field_idx", ",", "batch_span_emb", ",", "include_prob", "=", "False", ")", ":", "\n", "        ", "event_table", "=", "self", ".", "event_tables", "[", "event_idx", "]", "\n", "batch_span_logp", "=", "event_table", "(", "batch_span_emb", "=", "batch_span_emb", ",", "field_idx", "=", "field_idx", ")", "\n", "\n", "if", "include_prob", ":", "\n", "# used for decision sampling, is not inside the computation graph", "\n", "            ", "batch_span_prob", "=", "batch_span_logp", ".", "detach", "(", ")", ".", "exp", "(", ")", "\n", "return", "batch_span_logp", ",", "batch_span_prob", "\n", "", "else", ":", "\n", "            ", "return", "batch_span_logp", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_none_span_context": [[288, 294], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "", "def", "get_none_span_context", "(", "self", ",", "init_tensor", ")", ":", "\n", "        ", "none_span_context", "=", "torch", ".", "zeros", "(", "\n", "1", ",", "self", ".", "config", ".", "hidden_size", ",", "\n", "device", "=", "init_tensor", ".", "device", ",", "dtype", "=", "init_tensor", ".", "dtype", ",", "requires_grad", "=", "False", "\n", ")", "\n", "return", "none_span_context", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.conduct_field_level_reasoning": [[295, 309], ["batch_span_context.size", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "dee_model.Doc2EDAGModel.field_context_encoder().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dee_model.Doc2EDAGModel.field_context_encoder"], "methods", ["None"], ["", "def", "conduct_field_level_reasoning", "(", "self", ",", "event_idx", ",", "field_idx", ",", "prev_decode_context", ",", "batch_span_context", ")", ":", "\n", "        ", "event_table", "=", "self", ".", "event_tables", "[", "event_idx", "]", "\n", "field_query", "=", "event_table", ".", "field_queries", "[", "field_idx", "]", "\n", "num_spans", "=", "batch_span_context", ".", "size", "(", "0", ")", "\n", "# make the model to be aware of which field", "\n", "batch_cand_emb", "=", "batch_span_context", "+", "field_query", "\n", "if", "self", ".", "config", ".", "use_path_mem", ":", "\n", "# [1, num_spans + valid_sent_num, hidden_size]", "\n", "            ", "total_cand_emb", "=", "torch", ".", "cat", "(", "[", "batch_cand_emb", ",", "prev_decode_context", "]", ",", "dim", "=", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "# use transformer to do the reasoning", "\n", "total_cand_emb", "=", "self", ".", "field_context_encoder", "(", "total_cand_emb", ",", "None", ")", ".", "squeeze", "(", "0", ")", "\n", "batch_cand_emb", "=", "total_cand_emb", "[", ":", "num_spans", ",", ":", "]", "\n", "# TODO: what if reasoning over reasoning context", "\n", "", "return", "batch_cand_emb", ",", "prev_decode_context", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_field_mle_loss_list": [[310, 360], ["batch_span_context.size", "range", "prev_path2cur_span_idx_set.items", "dee_model.Doc2EDAGModel.conduct_field_level_reasoning", "dee_model.get_batch_span_label", "dee_model.Doc2EDAGModel.get_field_cls_info", "field_mle_loss_list.append", "batch_cand_emb[].unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.conduct_field_level_reasoning", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.get_batch_span_label", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_field_cls_info"], ["", "def", "get_field_mle_loss_list", "(", "self", ",", "doc_sent_context", ",", "batch_span_context", ",", "\n", "event_idx", ",", "field_idx2pre_path2cur_span_idx_set", ")", ":", "\n", "        ", "field_mle_loss_list", "=", "[", "]", "\n", "num_fields", "=", "self", ".", "event_tables", "[", "event_idx", "]", ".", "num_fields", "\n", "num_spans", "=", "batch_span_context", ".", "size", "(", "0", ")", "\n", "prev_path2prev_decode_context", "=", "{", "\n", "(", ")", ":", "doc_sent_context", "\n", "}", "\n", "\n", "for", "field_idx", "in", "range", "(", "num_fields", ")", ":", "\n", "            ", "prev_path2cur_span_idx_set", "=", "field_idx2pre_path2cur_span_idx_set", "[", "field_idx", "]", "\n", "for", "prev_path", ",", "cur_span_idx_set", "in", "prev_path2cur_span_idx_set", ".", "items", "(", ")", ":", "\n", "                ", "if", "prev_path", "not", "in", "prev_path2prev_decode_context", ":", "\n", "# note that when None and valid_span co-exists, ignore None paths during training", "\n", "                    ", "continue", "\n", "# get decoding context", "\n", "", "prev_decode_context", "=", "prev_path2prev_decode_context", "[", "prev_path", "]", "\n", "# conduct reasoning on this field", "\n", "batch_cand_emb", ",", "prev_decode_context", "=", "self", ".", "conduct_field_level_reasoning", "(", "\n", "event_idx", ",", "field_idx", ",", "prev_decode_context", ",", "batch_span_context", "\n", ")", "\n", "# prepare label for candidate spans", "\n", "batch_span_label", "=", "get_batch_span_label", "(", "\n", "num_spans", ",", "cur_span_idx_set", ",", "batch_span_context", ".", "device", "\n", ")", "\n", "# calculate loss", "\n", "cur_field_cls_loss", ",", "batch_span_logp", "=", "self", ".", "get_field_cls_info", "(", "\n", "event_idx", ",", "field_idx", ",", "batch_cand_emb", ",", "\n", "batch_span_label", "=", "batch_span_label", ",", "train_flag", "=", "True", "\n", ")", "\n", "\n", "field_mle_loss_list", ".", "append", "(", "cur_field_cls_loss", ")", "\n", "\n", "# cur_span_idx_set needs to ensure at least one element, None", "\n", "for", "span_idx", "in", "cur_span_idx_set", ":", "\n", "# Teacher-forcing Style Training", "\n", "                    ", "if", "span_idx", "is", "None", ":", "\n", "                        ", "span_context", "=", "self", ".", "event_tables", "[", "event_idx", "]", ".", "field_queries", "[", "field_idx", "]", "\n", "", "else", ":", "\n", "# TODO: add either batch_cand_emb or batch_span_context to the memory tensor", "\n", "                        ", "span_context", "=", "batch_cand_emb", "[", "span_idx", "]", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "cur_path", "=", "prev_path", "+", "(", "span_idx", ",", ")", "\n", "if", "self", ".", "config", ".", "use_path_mem", ":", "\n", "                        ", "cur_decode_context", "=", "torch", ".", "cat", "(", "[", "prev_decode_context", ",", "span_context", "]", ",", "dim", "=", "0", ")", "\n", "prev_path2prev_decode_context", "[", "cur_path", "]", "=", "cur_decode_context", "\n", "", "else", ":", "\n", "                        ", "prev_path2prev_decode_context", "[", "cur_path", "]", "=", "prev_decode_context", "\n", "\n", "", "", "", "", "return", "field_mle_loss_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_loss_on_doc": [[361, 413], ["dee_model.Doc2EDAGModel.get_doc_span_sent_context", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "dee_model.Doc2EDAGModel.get_event_cls_info", "enumerate", "len", "Exception", "sum", "range", "dee_model.Doc2EDAGModel.get_field_mle_loss_list", "dee_model.Doc2EDAGModel.conduct_field_level_reasoning", "dee_model.get_batch_span_label", "dee_model.Doc2EDAGModel.get_field_cls_info", "all_field_loss_list.append", "set", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_doc_span_sent_context", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_event_cls_info", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_field_mle_loss_list", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.conduct_field_level_reasoning", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.get_batch_span_label", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_field_cls_info"], ["", "def", "get_loss_on_doc", "(", "self", ",", "doc_token_emb", ",", "doc_sent_emb", ",", "doc_fea", ",", "doc_span_info", ")", ":", "\n", "        ", "span_context_list", ",", "doc_sent_context", "=", "self", ".", "get_doc_span_sent_context", "(", "\n", "doc_token_emb", ",", "doc_sent_emb", ",", "doc_fea", ",", "doc_span_info", ",", "\n", ")", "\n", "if", "len", "(", "span_context_list", ")", "==", "0", ":", "\n", "            ", "raise", "Exception", "(", "'Error: doc_fea.ex_idx {} does not have valid span'", ".", "format", "(", "doc_fea", ".", "ex_idx", ")", ")", "\n", "\n", "", "batch_span_context", "=", "torch", ".", "cat", "(", "span_context_list", ",", "dim", "=", "0", ")", "\n", "num_spans", "=", "len", "(", "span_context_list", ")", "\n", "event_idx2field_idx2pre_path2cur_span_idx_set", "=", "doc_span_info", ".", "event_dag_info", "\n", "\n", "# 1. get event type classification loss", "\n", "event_cls_loss", "=", "self", ".", "get_event_cls_info", "(", "doc_sent_context", ",", "doc_fea", ",", "train_flag", "=", "True", ")", "\n", "\n", "# 2. for each event type, get field classification loss", "\n", "# Note that including the memory tensor into the computing graph can boost the performance (>1 F1)", "\n", "all_field_loss_list", "=", "[", "]", "\n", "for", "event_idx", ",", "event_label", "in", "enumerate", "(", "doc_fea", ".", "event_type_labels", ")", ":", "\n", "            ", "if", "event_label", "==", "0", ":", "\n", "# treat all spans as invalid arguments for that event,", "\n", "# because we need to use all parameters to support distributed training", "\n", "                ", "prev_decode_context", "=", "doc_sent_context", "\n", "num_fields", "=", "self", ".", "event_tables", "[", "event_idx", "]", ".", "num_fields", "\n", "for", "field_idx", "in", "range", "(", "num_fields", ")", ":", "\n", "# conduct reasoning on this field", "\n", "                    ", "batch_cand_emb", ",", "prev_decode_context", "=", "self", ".", "conduct_field_level_reasoning", "(", "\n", "event_idx", ",", "field_idx", ",", "prev_decode_context", ",", "batch_span_context", "\n", ")", "\n", "# prepare label for candidate spans", "\n", "batch_span_label", "=", "get_batch_span_label", "(", "\n", "num_spans", ",", "set", "(", ")", ",", "batch_span_context", ".", "device", "\n", ")", "\n", "# calculate the field loss", "\n", "cur_field_cls_loss", ",", "batch_span_logp", "=", "self", ".", "get_field_cls_info", "(", "\n", "event_idx", ",", "field_idx", ",", "batch_cand_emb", ",", "\n", "batch_span_label", "=", "batch_span_label", ",", "train_flag", "=", "True", "\n", ")", "\n", "# update the memory tensor", "\n", "span_context", "=", "self", ".", "event_tables", "[", "event_idx", "]", ".", "field_queries", "[", "field_idx", "]", "\n", "if", "self", ".", "config", ".", "use_path_mem", ":", "\n", "                        ", "prev_decode_context", "=", "torch", ".", "cat", "(", "[", "prev_decode_context", ",", "span_context", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "all_field_loss_list", ".", "append", "(", "cur_field_cls_loss", ")", "\n", "", "", "else", ":", "\n", "                ", "field_idx2pre_path2cur_span_idx_set", "=", "event_idx2field_idx2pre_path2cur_span_idx_set", "[", "event_idx", "]", "\n", "field_loss_list", "=", "self", ".", "get_field_mle_loss_list", "(", "\n", "doc_sent_context", ",", "batch_span_context", ",", "event_idx", ",", "field_idx2pre_path2cur_span_idx_set", ",", "\n", ")", "\n", "all_field_loss_list", "+=", "field_loss_list", "\n", "\n", "", "", "total_event_loss", "=", "event_cls_loss", "+", "sum", "(", "all_field_loss_list", ")", "\n", "return", "total_event_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_mix_loss": [[414, 426], ["len", "zip", "doc_ner_loss_list.append", "doc_sent_loss.sum", "sum", "sum"], "methods", ["None"], ["", "def", "get_mix_loss", "(", "self", ",", "doc_sent_loss_list", ",", "doc_event_loss_list", ",", "doc_span_info_list", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "doc_span_info_list", ")", "\n", "loss_batch_avg", "=", "1.0", "/", "batch_size", "\n", "lambda_1", "=", "self", ".", "config", ".", "loss_lambda", "\n", "lambda_2", "=", "1", "-", "lambda_1", "\n", "\n", "doc_ner_loss_list", "=", "[", "]", "\n", "for", "doc_sent_loss", ",", "doc_span_info", "in", "zip", "(", "doc_sent_loss_list", ",", "doc_span_info_list", ")", ":", "\n", "# doc_sent_loss: Size([num_valid_sents])", "\n", "            ", "doc_ner_loss_list", ".", "append", "(", "doc_sent_loss", ".", "sum", "(", ")", ")", "\n", "\n", "", "return", "loss_batch_avg", "*", "(", "lambda_1", "*", "sum", "(", "doc_ner_loss_list", ")", "+", "lambda_2", "*", "sum", "(", "doc_event_loss_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_eval_on_doc": [[427, 520], ["dee_model.Doc2EDAGModel.get_doc_span_sent_context", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dee_model.Doc2EDAGModel.get_event_cls_info", "enumerate", "len", "range", "range", "event_idx2event_decode_paths.append", "event_idx2obj_idx2field_idx2token_tup.append", "len", "dee_model.Doc2EDAGModel.append", "event_idx2obj_idx2field_idx2token_tup.append", "event_idx2event_decode_paths.append", "event_idx2event_decode_paths.append", "event_idx2obj_idx2field_idx2token_tup.append", "obj_idx2field_idx2token_tup.append", "dee_model.Doc2EDAGModel.conduct_field_level_reasoning", "dee_model.Doc2EDAGModel.get_field_cls_info", "enumerate", "len", "field_idx2token_tup.append", "len", "cur_span_idx_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cur_paths.append", "cur_span_idx_list.append", "batch_cand_emb[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_doc_span_sent_context", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_event_cls_info", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.conduct_field_level_reasoning", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_field_cls_info"], ["", "def", "get_eval_on_doc", "(", "self", ",", "doc_token_emb", ",", "doc_sent_emb", ",", "doc_fea", ",", "doc_span_info", ")", ":", "\n", "        ", "span_context_list", ",", "doc_sent_context", "=", "self", ".", "get_doc_span_sent_context", "(", "\n", "doc_token_emb", ",", "doc_sent_emb", ",", "doc_fea", ",", "doc_span_info", "\n", ")", "\n", "if", "len", "(", "span_context_list", ")", "==", "0", ":", "\n", "            ", "event_pred_list", "=", "[", "]", "\n", "event_idx2obj_idx2field_idx2token_tup", "=", "[", "]", "\n", "event_idx2event_decode_paths", "=", "[", "]", "\n", "for", "event_idx", "in", "range", "(", "len", "(", "self", ".", "event_type_fields_pairs", ")", ")", ":", "\n", "                ", "event_pred_list", ".", "append", "(", "0", ")", "\n", "event_idx2obj_idx2field_idx2token_tup", ".", "append", "(", "None", ")", "\n", "event_idx2event_decode_paths", ".", "append", "(", "None", ")", "\n", "\n", "", "return", "doc_fea", ".", "ex_idx", ",", "event_pred_list", ",", "event_idx2obj_idx2field_idx2token_tup", ",", "doc_span_info", ",", "event_idx2event_decode_paths", "\n", "\n", "", "batch_span_context", "=", "torch", ".", "cat", "(", "span_context_list", ",", "dim", "=", "0", ")", "\n", "\n", "# 1. get event type prediction", "\n", "event_pred_list", "=", "self", ".", "get_event_cls_info", "(", "doc_sent_context", ",", "doc_fea", ",", "train_flag", "=", "False", ")", "\n", "\n", "# 2. for each event type, get field prediction", "\n", "# the following mappings are all implemented using list index", "\n", "event_idx2event_decode_paths", "=", "[", "]", "\n", "event_idx2obj_idx2field_idx2token_tup", "=", "[", "]", "\n", "for", "event_idx", ",", "event_pred", "in", "enumerate", "(", "event_pred_list", ")", ":", "\n", "            ", "if", "event_pred", "==", "0", ":", "\n", "                ", "event_idx2event_decode_paths", ".", "append", "(", "None", ")", "\n", "event_idx2obj_idx2field_idx2token_tup", ".", "append", "(", "None", ")", "\n", "continue", "\n", "\n", "", "num_fields", "=", "self", ".", "event_tables", "[", "event_idx", "]", ".", "num_fields", "\n", "\n", "prev_path2prev_decode_context", "=", "{", "(", ")", ":", "doc_sent_context", "}", "\n", "last_field_paths", "=", "[", "(", ")", "]", "# only record paths of the last field", "\n", "for", "field_idx", "in", "range", "(", "num_fields", ")", ":", "\n", "                ", "cur_paths", "=", "[", "]", "\n", "for", "prev_path", "in", "last_field_paths", ":", "# traverse all previous decoding paths", "\n", "# get decoding context", "\n", "                    ", "prev_decode_context", "=", "prev_path2prev_decode_context", "[", "prev_path", "]", "\n", "# conduct reasoning on this field", "\n", "batch_cand_emb", ",", "prev_decode_context", "=", "self", ".", "conduct_field_level_reasoning", "(", "\n", "event_idx", ",", "field_idx", ",", "prev_decode_context", ",", "batch_span_context", "\n", ")", "\n", "\n", "# get field prediction for all spans", "\n", "span_pred_list", ",", "_", "=", "self", ".", "get_field_cls_info", "(", "\n", "event_idx", ",", "field_idx", ",", "batch_cand_emb", ",", "train_flag", "=", "False", "\n", ")", "\n", "\n", "# prepare span_idx to be used for the next field", "\n", "cur_span_idx_list", "=", "[", "]", "\n", "for", "span_idx", ",", "span_pred", "in", "enumerate", "(", "span_pred_list", ")", ":", "\n", "                        ", "if", "span_pred", "==", "1", ":", "\n", "                            ", "cur_span_idx_list", ".", "append", "(", "span_idx", ")", "\n", "", "", "if", "len", "(", "cur_span_idx_list", ")", "==", "0", ":", "\n", "# all span is invalid for this field, just choose 'Unknown' token", "\n", "                        ", "cur_span_idx_list", ".", "append", "(", "None", ")", "\n", "\n", "", "for", "span_idx", "in", "cur_span_idx_list", ":", "\n", "                        ", "if", "span_idx", "is", "None", ":", "\n", "                            ", "span_context", "=", "self", ".", "event_tables", "[", "event_idx", "]", ".", "field_queries", "[", "field_idx", "]", "\n", "# span_context = none_span_context", "\n", "", "else", ":", "\n", "                            ", "span_context", "=", "batch_cand_emb", "[", "span_idx", "]", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "cur_path", "=", "prev_path", "+", "(", "span_idx", ",", ")", "\n", "cur_decode_context", "=", "torch", ".", "cat", "(", "[", "prev_decode_context", ",", "span_context", "]", ",", "dim", "=", "0", ")", "\n", "cur_paths", ".", "append", "(", "cur_path", ")", "\n", "prev_path2prev_decode_context", "[", "cur_path", "]", "=", "cur_decode_context", "\n", "\n", "# update decoding paths", "\n", "", "", "last_field_paths", "=", "cur_paths", "\n", "\n", "", "obj_idx2field_idx2token_tup", "=", "[", "]", "\n", "for", "decode_path", "in", "last_field_paths", ":", "\n", "                ", "assert", "len", "(", "decode_path", ")", "==", "num_fields", "\n", "field_idx2token_tup", "=", "[", "]", "\n", "for", "span_idx", "in", "decode_path", ":", "\n", "                    ", "if", "span_idx", "is", "None", ":", "\n", "                        ", "token_tup", "=", "None", "\n", "", "else", ":", "\n", "                        ", "token_tup", "=", "doc_span_info", ".", "span_token_tup_list", "[", "span_idx", "]", "\n", "\n", "", "field_idx2token_tup", ".", "append", "(", "token_tup", ")", "\n", "", "obj_idx2field_idx2token_tup", ".", "append", "(", "field_idx2token_tup", ")", "\n", "\n", "", "event_idx2event_decode_paths", ".", "append", "(", "last_field_paths", ")", "\n", "event_idx2obj_idx2field_idx2token_tup", ".", "append", "(", "obj_idx2field_idx2token_tup", ")", "\n", "\n", "# the first three terms are for metric calculation, the last two are for case studies", "\n", "", "return", "doc_fea", ".", "ex_idx", ",", "event_pred_list", ",", "event_idx2obj_idx2field_idx2token_tup", ",", "doc_span_info", ",", "event_idx2event_decode_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.adjust_token_label": [[521, 534], ["doc_token_labels.masked_fill", "adj_doc_token_labels.masked_fill.masked_fill.masked_fill", "adj_doc_token_labels_list.append"], "methods", ["None"], ["", "def", "adjust_token_label", "(", "self", ",", "doc_token_labels_list", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "use_token_role", ":", "# do not use detailed token", "\n", "            ", "return", "doc_token_labels_list", "\n", "", "else", ":", "\n", "            ", "adj_doc_token_labels_list", "=", "[", "]", "\n", "for", "doc_token_labels", "in", "doc_token_labels_list", ":", "\n", "                ", "entity_begin_mask", "=", "doc_token_labels", "%", "2", "==", "1", "\n", "entity_inside_mask", "=", "(", "doc_token_labels", "!=", "0", ")", "&", "(", "doc_token_labels", "%", "2", "==", "0", ")", "\n", "adj_doc_token_labels", "=", "doc_token_labels", ".", "masked_fill", "(", "entity_begin_mask", ",", "1", ")", "\n", "adj_doc_token_labels", "=", "adj_doc_token_labels", ".", "masked_fill", "(", "entity_inside_mask", ",", "2", ")", "\n", "\n", "adj_doc_token_labels_list", ".", "append", "(", "adj_doc_token_labels", ")", "\n", "", "return", "adj_doc_token_labels_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_local_context_info": [[535, 608], ["len", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dee_model.Doc2EDAGModel.ner_model", "dee_model.Doc2EDAGModel.get_batch_sent_emb", "range", "dee_model.Doc2EDAGModel.adjust_token_label", "ner_batch_idx_start_list.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sum", "ner_token_emb.size", "dee_model.Doc2EDAGModel.size", "doc_token_emb_list.append", "doc_token_masks_list.append", "doc_token_types_list.append", "doc_sent_emb_list.append", "torch.cat.append", "torch.cat.append", "doc_sent_loss_list.append"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.DCFEEModel.get_batch_sent_emb", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.adjust_token_label"], ["", "", "def", "get_local_context_info", "(", "self", ",", "doc_batch_dict", ",", "train_flag", "=", "False", ",", "use_gold_span", "=", "False", ")", ":", "\n", "        ", "label_key", "=", "'doc_token_labels'", "\n", "if", "train_flag", "or", "use_gold_span", ":", "\n", "            ", "assert", "label_key", "in", "doc_batch_dict", "\n", "need_label_flag", "=", "True", "\n", "", "else", ":", "\n", "            ", "need_label_flag", "=", "False", "\n", "\n", "", "if", "need_label_flag", ":", "\n", "            ", "doc_token_labels_list", "=", "self", ".", "adjust_token_label", "(", "doc_batch_dict", "[", "label_key", "]", ")", "\n", "", "else", ":", "\n", "            ", "doc_token_labels_list", "=", "None", "\n", "\n", "", "batch_size", "=", "len", "(", "doc_batch_dict", "[", "'ex_idx'", "]", ")", "\n", "doc_token_ids_list", "=", "doc_batch_dict", "[", "'doc_token_ids'", "]", "\n", "doc_token_masks_list", "=", "doc_batch_dict", "[", "'doc_token_masks'", "]", "\n", "valid_sent_num_list", "=", "doc_batch_dict", "[", "'valid_sent_num'", "]", "\n", "\n", "# transform doc_batch into sent_batch", "\n", "ner_batch_idx_start_list", "=", "[", "0", "]", "\n", "ner_token_ids", "=", "[", "]", "\n", "ner_token_masks", "=", "[", "]", "\n", "ner_token_labels", "=", "[", "]", "if", "need_label_flag", "else", "None", "\n", "for", "batch_idx", ",", "valid_sent_num", "in", "enumerate", "(", "valid_sent_num_list", ")", ":", "\n", "            ", "idx_start", "=", "ner_batch_idx_start_list", "[", "-", "1", "]", "\n", "idx_end", "=", "idx_start", "+", "valid_sent_num", "\n", "ner_batch_idx_start_list", ".", "append", "(", "idx_end", ")", "\n", "\n", "ner_token_ids", ".", "append", "(", "doc_token_ids_list", "[", "batch_idx", "]", ")", "\n", "ner_token_masks", ".", "append", "(", "doc_token_masks_list", "[", "batch_idx", "]", ")", "\n", "if", "need_label_flag", ":", "\n", "                ", "ner_token_labels", ".", "append", "(", "doc_token_labels_list", "[", "batch_idx", "]", ")", "\n", "\n", "# [ner_batch_size, norm_sent_len]", "\n", "", "", "ner_token_ids", "=", "torch", ".", "cat", "(", "ner_token_ids", ",", "dim", "=", "0", ")", "\n", "ner_token_masks", "=", "torch", ".", "cat", "(", "ner_token_masks", ",", "dim", "=", "0", ")", "\n", "if", "need_label_flag", ":", "\n", "            ", "ner_token_labels", "=", "torch", ".", "cat", "(", "ner_token_labels", ",", "dim", "=", "0", ")", "\n", "\n", "# get ner output", "\n", "", "ner_token_emb", ",", "ner_loss", ",", "ner_token_preds", "=", "self", ".", "ner_model", "(", "\n", "ner_token_ids", ",", "ner_token_masks", ",", "label_ids", "=", "ner_token_labels", ",", "\n", "train_flag", "=", "train_flag", ",", "decode_flag", "=", "not", "use_gold_span", ",", "\n", ")", "\n", "\n", "if", "use_gold_span", ":", "# definitely use gold span info", "\n", "            ", "ner_token_types", "=", "ner_token_labels", "\n", "", "else", ":", "\n", "            ", "ner_token_types", "=", "ner_token_preds", "\n", "\n", "# get sentence embedding", "\n", "", "ner_sent_emb", "=", "self", ".", "get_batch_sent_emb", "(", "ner_token_emb", ",", "ner_token_masks", ",", "valid_sent_num_list", ")", "\n", "\n", "assert", "sum", "(", "valid_sent_num_list", ")", "==", "ner_token_emb", ".", "size", "(", "0", ")", "==", "ner_sent_emb", ".", "size", "(", "0", ")", "\n", "\n", "# followings are all lists of tensors", "\n", "doc_token_emb_list", "=", "[", "]", "\n", "doc_token_masks_list", "=", "[", "]", "\n", "doc_token_types_list", "=", "[", "]", "\n", "doc_sent_emb_list", "=", "[", "]", "\n", "doc_sent_loss_list", "=", "[", "]", "\n", "for", "batch_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "idx_start", "=", "ner_batch_idx_start_list", "[", "batch_idx", "]", "\n", "idx_end", "=", "ner_batch_idx_start_list", "[", "batch_idx", "+", "1", "]", "\n", "doc_token_emb_list", ".", "append", "(", "ner_token_emb", "[", "idx_start", ":", "idx_end", ",", ":", ",", ":", "]", ")", "\n", "doc_token_masks_list", ".", "append", "(", "ner_token_masks", "[", "idx_start", ":", "idx_end", ",", ":", "]", ")", "\n", "doc_token_types_list", ".", "append", "(", "ner_token_types", "[", "idx_start", ":", "idx_end", ",", ":", "]", ")", "\n", "doc_sent_emb_list", ".", "append", "(", "ner_sent_emb", "[", "idx_start", ":", "idx_end", ",", ":", "]", ")", "\n", "if", "ner_loss", "is", "not", "None", ":", "\n", "# every doc_sent_loss.size is [valid_sent_num]", "\n", "                ", "doc_sent_loss_list", ".", "append", "(", "ner_loss", "[", "idx_start", ":", "idx_end", "]", ")", "\n", "\n", "", "", "return", "doc_token_emb_list", ",", "doc_token_masks_list", ",", "doc_token_types_list", ",", "doc_sent_emb_list", ",", "doc_sent_loss_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.forward": [[609, 678], ["dee_model.Doc2EDAGModel.get_local_context_info", "dee_model.get_doc_span_info_list", "enumerate", "dee_model.Doc2EDAGModel.get_mix_loss", "random.random", "doc_event_loss_list.append", "enumerate", "enumerate", "dee_model.Doc2EDAGModel.get_loss_on_doc", "eval_results.append", "eval_results.append", "dee_model.Doc2EDAGModel.get_eval_on_doc", "dee_model.Doc2EDAGModel.heuristic_decode_on_doc"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.DCFEEModel.get_local_context_info", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.get_doc_span_info_list", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.DCFEEModel.get_mix_loss", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.DCFEEModel.get_loss_on_doc", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_eval_on_doc", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.DCFEEModel.heuristic_decode_on_doc"], ["", "def", "forward", "(", "self", ",", "doc_batch_dict", ",", "doc_features", ",", "\n", "train_flag", "=", "True", ",", "use_gold_span", "=", "False", ",", "teacher_prob", "=", "1", ",", "\n", "event_idx2entity_idx2field_idx", "=", "None", ",", "heuristic_type", "=", "None", ")", ":", "\n", "# Using scheduled sampling to gradually transit to predicted entity spans", "\n", "        ", "if", "train_flag", "and", "self", ".", "config", ".", "use_scheduled_sampling", ":", "\n", "# teacher_prob will gradually decrease outside", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "teacher_prob", ":", "\n", "                ", "use_gold_span", "=", "True", "\n", "", "else", ":", "\n", "                ", "use_gold_span", "=", "False", "\n", "\n", "# get doc token-level local context", "\n", "", "", "doc_token_emb_list", ",", "doc_token_masks_list", ",", "doc_token_types_list", ",", "doc_sent_emb_list", ",", "doc_sent_loss_list", "=", "self", ".", "get_local_context_info", "(", "\n", "doc_batch_dict", ",", "train_flag", "=", "train_flag", ",", "use_gold_span", "=", "use_gold_span", ",", "\n", ")", "\n", "\n", "# get doc feature objects", "\n", "ex_idx_list", "=", "doc_batch_dict", "[", "'ex_idx'", "]", "\n", "doc_fea_list", "=", "[", "doc_features", "[", "ex_idx", "]", "for", "ex_idx", "in", "ex_idx_list", "]", "\n", "\n", "# get doc span-level info for event extraction", "\n", "doc_span_info_list", "=", "get_doc_span_info_list", "(", "doc_token_types_list", ",", "doc_fea_list", ",", "use_gold_span", "=", "use_gold_span", ")", "\n", "\n", "if", "train_flag", ":", "\n", "            ", "doc_event_loss_list", "=", "[", "]", "\n", "for", "batch_idx", ",", "ex_idx", "in", "enumerate", "(", "ex_idx_list", ")", ":", "\n", "                ", "doc_event_loss_list", ".", "append", "(", "\n", "self", ".", "get_loss_on_doc", "(", "\n", "doc_token_emb_list", "[", "batch_idx", "]", ",", "\n", "doc_sent_emb_list", "[", "batch_idx", "]", ",", "\n", "doc_fea_list", "[", "batch_idx", "]", ",", "\n", "doc_span_info_list", "[", "batch_idx", "]", ",", "\n", ")", "\n", ")", "\n", "\n", "", "mix_loss", "=", "self", ".", "get_mix_loss", "(", "doc_sent_loss_list", ",", "doc_event_loss_list", ",", "doc_span_info_list", ")", "\n", "\n", "return", "mix_loss", "\n", "", "else", ":", "\n", "# return a list object may not be supported by torch.nn.parallel.DataParallel", "\n", "# ensure to run it under the single-gpu mode", "\n", "            ", "eval_results", "=", "[", "]", "\n", "\n", "if", "heuristic_type", "is", "None", ":", "\n", "                ", "for", "batch_idx", ",", "ex_idx", "in", "enumerate", "(", "ex_idx_list", ")", ":", "\n", "                    ", "eval_results", ".", "append", "(", "\n", "self", ".", "get_eval_on_doc", "(", "\n", "doc_token_emb_list", "[", "batch_idx", "]", ",", "\n", "doc_sent_emb_list", "[", "batch_idx", "]", ",", "\n", "doc_fea_list", "[", "batch_idx", "]", ",", "\n", "doc_span_info_list", "[", "batch_idx", "]", ",", "\n", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "                ", "assert", "event_idx2entity_idx2field_idx", "is", "not", "None", "\n", "for", "batch_idx", ",", "ex_idx", "in", "enumerate", "(", "ex_idx_list", ")", ":", "\n", "                    ", "eval_results", ".", "append", "(", "\n", "self", ".", "heuristic_decode_on_doc", "(", "\n", "doc_token_emb_list", "[", "batch_idx", "]", ",", "\n", "doc_sent_emb_list", "[", "batch_idx", "]", ",", "\n", "doc_fea_list", "[", "batch_idx", "]", ",", "\n", "doc_span_info_list", "[", "batch_idx", "]", ",", "\n", "event_idx2entity_idx2field_idx", ",", "\n", "heuristic_type", "=", "heuristic_type", ",", "\n", ")", "\n", ")", "\n", "\n", "", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.heuristic_decode_on_doc": [[679, 746], ["dee_model.Doc2EDAGModel.get_doc_span_sent_context", "dee_model.Doc2EDAGModel.get_event_field_span_candidates", "dee_model.Doc2EDAGModel.get_event_cls_info", "enumerate", "Exception", "len", "range", "range", "event_idx2obj_idx2field_idx2token_tup.append", "len", "dee_model.Doc2EDAGModel.append", "event_idx2obj_idx2field_idx2token_tup.append", "event_idx2obj_idx2field_idx2token_tup.append", "str", "dee_model.append_top_span_only", "dee_model.append_all_spans", "Exception", "str"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_doc_span_sent_context", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.DCFEEModel.get_event_field_span_candidates", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_event_cls_info", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.append_top_span_only", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.append_all_spans"], ["", "", "def", "heuristic_decode_on_doc", "(", "self", ",", "doc_token_emb", ",", "doc_sent_emb", ",", "doc_fea", ",", "doc_span_info", ",", "\n", "event_idx2entity_idx2field_idx", ",", "heuristic_type", "=", "'GreedyDec'", ")", ":", "\n", "        ", "support_heuristic_types", "=", "[", "'GreedyDec'", ",", "'ProductDec'", "]", "\n", "if", "heuristic_type", "not", "in", "support_heuristic_types", ":", "\n", "            ", "raise", "Exception", "(", "'Unsupported heuristic type {}, pleasure choose from {}'", ".", "format", "(", "\n", "heuristic_type", ",", "str", "(", "support_heuristic_types", ")", "\n", ")", ")", "\n", "\n", "", "span_context_list", ",", "doc_sent_context", "=", "self", ".", "get_doc_span_sent_context", "(", "\n", "doc_token_emb", ",", "doc_sent_emb", ",", "doc_fea", ",", "doc_span_info", "\n", ")", "\n", "\n", "span_token_tup_list", "=", "doc_span_info", ".", "span_token_tup_list", "\n", "span_mention_range_list", "=", "doc_span_info", ".", "span_mention_range_list", "\n", "mention_drange_list", "=", "doc_span_info", ".", "mention_drange_list", "\n", "mention_type_list", "=", "doc_span_info", ".", "mention_type_list", "\n", "# heuristic decoding strategies will work on these span candidates", "\n", "event_idx2field_idx2span_token_tup2dranges", "=", "self", ".", "get_event_field_span_candidates", "(", "\n", "span_token_tup_list", ",", "span_mention_range_list", ",", "mention_drange_list", ",", "\n", "mention_type_list", ",", "event_idx2entity_idx2field_idx", ",", "\n", ")", "\n", "\n", "# if there is no extracted span, just directly return", "\n", "if", "len", "(", "span_token_tup_list", ")", "==", "0", ":", "\n", "            ", "event_pred_list", "=", "[", "]", "\n", "event_idx2obj_idx2field_idx2token_tup", "=", "[", "]", "# this term will be compared with ground-truth table contents", "\n", "for", "event_idx", "in", "range", "(", "len", "(", "self", ".", "event_type_fields_pairs", ")", ")", ":", "\n", "                ", "event_pred_list", ".", "append", "(", "0", ")", "\n", "event_idx2obj_idx2field_idx2token_tup", ".", "append", "(", "None", ")", "\n", "\n", "", "return", "doc_fea", ".", "ex_idx", ",", "event_pred_list", ",", "event_idx2obj_idx2field_idx2token_tup", ",", "doc_span_info", ",", "event_idx2field_idx2span_token_tup2dranges", "\n", "\n", "# 1. get event type prediction as model-based approach", "\n", "", "event_pred_list", "=", "self", ".", "get_event_cls_info", "(", "doc_sent_context", ",", "doc_fea", ",", "train_flag", "=", "False", ")", "\n", "\n", "# 2. for each event type, get field prediction", "\n", "# From now on, use heuristic inference to get the token for the field", "\n", "# the following mappings are all implemented using list index", "\n", "event_idx2obj_idx2field_idx2token_tup", "=", "[", "]", "\n", "for", "event_idx", ",", "event_pred", "in", "enumerate", "(", "event_pred_list", ")", ":", "\n", "            ", "if", "event_pred", "==", "0", ":", "\n", "                ", "event_idx2obj_idx2field_idx2token_tup", ".", "append", "(", "None", ")", "\n", "continue", "\n", "\n", "", "num_fields", "=", "self", ".", "event_tables", "[", "event_idx", "]", ".", "num_fields", "\n", "field_idx2span_token_tup2dranges", "=", "event_idx2field_idx2span_token_tup2dranges", "[", "event_idx", "]", "\n", "\n", "obj_idx2field_idx2token_tup", "=", "[", "[", "]", "]", "# at least one decode path will be appended", "\n", "for", "field_idx", "in", "range", "(", "num_fields", ")", ":", "\n", "                ", "if", "heuristic_type", "==", "support_heuristic_types", "[", "0", "]", ":", "\n", "                    ", "obj_idx2field_idx2token_tup", "=", "append_top_span_only", "(", "\n", "obj_idx2field_idx2token_tup", ",", "field_idx", ",", "field_idx2span_token_tup2dranges", "\n", ")", "\n", "", "elif", "heuristic_type", "==", "support_heuristic_types", "[", "1", "]", ":", "\n", "                    ", "obj_idx2field_idx2token_tup", "=", "append_all_spans", "(", "\n", "obj_idx2field_idx2token_tup", ",", "field_idx", ",", "field_idx2span_token_tup2dranges", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "'Unsupported heuristic type {}, pleasure choose from {}'", ".", "format", "(", "\n", "heuristic_type", ",", "str", "(", "support_heuristic_types", ")", "\n", ")", ")", "\n", "\n", "", "", "event_idx2obj_idx2field_idx2token_tup", ".", "append", "(", "obj_idx2field_idx2token_tup", ")", "\n", "\n", "", "return", "doc_fea", ".", "ex_idx", ",", "event_pred_list", ",", "event_idx2obj_idx2field_idx2token_tup", ",", "doc_span_info", ",", "event_idx2field_idx2span_token_tup2dranges", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.Doc2EDAGModel.get_event_field_span_candidates": [[747, 785], ["enumerate", "enumerate", "mention_span_idx_list.extend", "len", "len", "enumerate", "enumerate", "zip", "cur_span_token_tup2dranges[].append"], "methods", ["None"], ["", "def", "get_event_field_span_candidates", "(", "self", ",", "span_token_tup_list", ",", "span_mention_range_list", ",", "\n", "mention_drange_list", ",", "mention_type_list", ",", "event_idx2entity_idx2field_idx", ")", ":", "\n", "# get mention idx -> span idx", "\n", "        ", "mention_span_idx_list", "=", "[", "]", "\n", "for", "span_idx", ",", "(", "ment_idx_s", ",", "ment_idx_e", ")", "in", "enumerate", "(", "span_mention_range_list", ")", ":", "\n", "            ", "mention_span_idx_list", ".", "extend", "(", "[", "span_idx", "]", "*", "(", "ment_idx_e", "-", "ment_idx_s", ")", ")", "\n", "", "assert", "len", "(", "mention_span_idx_list", ")", "==", "len", "(", "mention_drange_list", ")", "\n", "\n", "event_idx2field_idx2span_token_tup2dranges", "=", "{", "}", "\n", "for", "event_idx", ",", "(", "event_type", ",", "field_types", ")", "in", "enumerate", "(", "self", ".", "event_type_fields_pairs", ")", ":", "\n", "# get the predefined entity idx to field idx mapping", "\n", "            ", "gold_entity_idx2field_idx", "=", "event_idx2entity_idx2field_idx", "[", "event_idx", "]", "\n", "\n", "# store field candidates for this doc", "\n", "field_idx2span_token_tup2dranges", "=", "{", "}", "\n", "for", "field_idx", ",", "_", "in", "enumerate", "(", "field_types", ")", ":", "\n", "                ", "field_idx2span_token_tup2dranges", "[", "field_idx", "]", "=", "{", "}", "\n", "\n", "# aggregate field candidates according to mention types", "\n", "", "for", "ment_idx", ",", "(", "ment_drange", ",", "ment_entity_idx", ")", "in", "enumerate", "(", "zip", "(", "mention_drange_list", ",", "mention_type_list", ")", ")", ":", "\n", "                ", "if", "ment_entity_idx", "not", "in", "gold_entity_idx2field_idx", ":", "\n", "                    ", "continue", "\n", "", "ment_field_idx", "=", "gold_entity_idx2field_idx", "[", "ment_entity_idx", "]", "\n", "if", "ment_field_idx", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "", "ment_span_idx", "=", "mention_span_idx_list", "[", "ment_idx", "]", "\n", "span_token_tup", "=", "span_token_tup_list", "[", "ment_span_idx", "]", "\n", "\n", "# because it is dict, so all modifications to the key will take effect in raw dict", "\n", "cur_span_token_tup2dranges", "=", "field_idx2span_token_tup2dranges", "[", "ment_field_idx", "]", "\n", "if", "span_token_tup", "not", "in", "cur_span_token_tup2dranges", ":", "\n", "                    ", "cur_span_token_tup2dranges", "[", "span_token_tup", "]", "=", "[", "]", "\n", "", "cur_span_token_tup2dranges", "[", "span_token_tup", "]", ".", "append", "(", "ment_drange", ")", "\n", "\n", "", "event_idx2field_idx2span_token_tup2dranges", "[", "event_idx", "]", "=", "field_idx2span_token_tup2dranges", "\n", "\n", "", "return", "event_idx2field_idx2span_token_tup2dranges", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.AttentiveReducer.__init__": [[827, 838], ["torch.nn.Module.__init__", "math.sqrt", "torch.nn.Linear", "torch.nn.Linear", "transformer.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "AttentiveReducer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "att_norm", "=", "math", ".", "sqrt", "(", "self", ".", "hidden_size", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "att", "=", "None", "\n", "\n", "self", ".", "layer_norm", "=", "transformer", ".", "LayerNorm", "(", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.AttentiveReducer.forward": [[839, 861], ["transformer.attention", "dee_model.AttentiveReducer.dropout", "masks.unsqueeze", "dee_model.AttentiveReducer.layer_norm", "dee_model.AttentiveReducer.squeeze"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.attention"], ["", "def", "forward", "(", "self", ",", "batch_token_emb", ",", "masks", "=", "None", ",", "keepdim", "=", "False", ")", ":", "\n", "# batch_token_emb: Size([*, seq_len, hidden_size])", "\n", "# masks: Size([*, seq_len]), 1: normal, 0: pad", "\n", "\n", "        ", "query", "=", "self", ".", "fc", ".", "weight", "\n", "if", "masks", "is", "None", ":", "\n", "            ", "att_mask", "=", "None", "\n", "", "else", ":", "\n", "            ", "att_mask", "=", "masks", ".", "unsqueeze", "(", "-", "2", ")", "# [*, 1, seq_len]", "\n", "\n", "# batch_att_emb: Size([*, 1, hidden_size])", "\n", "# self.att: Size([*, 1, seq_len])", "\n", "", "batch_att_emb", ",", "self", ".", "att", "=", "transformer", ".", "attention", "(", "\n", "query", ",", "batch_token_emb", ",", "batch_token_emb", ",", "mask", "=", "att_mask", "\n", ")", "\n", "\n", "batch_att_emb", "=", "self", ".", "dropout", "(", "self", ".", "layer_norm", "(", "batch_att_emb", ")", ")", "\n", "\n", "if", "keepdim", ":", "\n", "            ", "return", "batch_att_emb", "\n", "", "else", ":", "\n", "            ", "return", "batch_att_emb", ".", "squeeze", "(", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.AttentiveReducer.extra_repr": [[862, 864], ["None"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'hidden_size={}, att_norm={}'", ".", "format", "(", "self", ".", "hidden_size", ",", "self", ".", "att_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.SentencePosEncoder.__init__": [[867, 873], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "transformer.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "max_sent_num", "=", "100", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "SentencePosEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "max_sent_num", ",", "hidden_size", ")", "\n", "self", ".", "layer_norm", "=", "transformer", ".", "LayerNorm", "(", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.SentencePosEncoder.forward": [[874, 890], ["dee_model.SentencePosEncoder.embedding", "dee_model.SentencePosEncoder.dropout", "batch_elem_emb.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "dee_model.SentencePosEncoder.layer_norm", "isinstance", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_elem_emb", ",", "sent_pos_ids", "=", "None", ")", ":", "\n", "        ", "if", "sent_pos_ids", "is", "None", ":", "\n", "            ", "num_elem", "=", "batch_elem_emb", ".", "size", "(", "-", "2", ")", "\n", "sent_pos_ids", "=", "torch", ".", "arange", "(", "\n", "num_elem", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "batch_elem_emb", ".", "device", ",", "requires_grad", "=", "False", "\n", ")", "\n", "", "elif", "not", "isinstance", "(", "sent_pos_ids", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "sent_pos_ids", "=", "torch", ".", "tensor", "(", "\n", "sent_pos_ids", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "batch_elem_emb", ".", "device", ",", "requires_grad", "=", "False", "\n", ")", "\n", "\n", "", "batch_pos_emb", "=", "self", ".", "embedding", "(", "sent_pos_ids", ")", "\n", "out", "=", "batch_elem_emb", "+", "batch_pos_emb", "\n", "out", "=", "self", ".", "dropout", "(", "self", ".", "layer_norm", "(", "out", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.MentionTypeEncoder.__init__": [[893, 899], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "transformer.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "num_ment_types", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "MentionTypeEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "num_ment_types", ",", "hidden_size", ")", "\n", "self", ".", "layer_norm", "=", "transformer", ".", "LayerNorm", "(", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.MentionTypeEncoder.forward": [[900, 911], ["dee_model.MentionTypeEncoder.embedding", "dee_model.MentionTypeEncoder.dropout", "isinstance", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "dee_model.MentionTypeEncoder.layer_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_mention_emb", ",", "mention_type_ids", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "mention_type_ids", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "mention_type_ids", "=", "torch", ".", "tensor", "(", "\n", "mention_type_ids", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "batch_mention_emb", ".", "device", ",", "requires_grad", "=", "False", "\n", ")", "\n", "\n", "", "batch_mention_type_emb", "=", "self", ".", "embedding", "(", "mention_type_ids", ")", "\n", "out", "=", "batch_mention_emb", "+", "batch_mention_type_emb", "\n", "out", "=", "self", ".", "dropout", "(", "self", ".", "layer_norm", "(", "out", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.EventTable.__init__": [[914, 938], ["torch.nn.Module.__init__", "len", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.ParameterList", "torch.nn.ParameterList", "dee_model.EventTable.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Parameter", "torch.nn.Parameter", "range", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "range"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.EventTable.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "event_type", ",", "field_types", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "EventTable", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "event_type", "=", "event_type", "\n", "self", ".", "field_types", "=", "field_types", "\n", "self", ".", "num_fields", "=", "len", "(", "field_types", ")", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "\n", "self", ".", "event_cls", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "2", ")", "# 0: NA, 1: trigger this event", "\n", "self", ".", "field_cls_list", "=", "nn", ".", "ModuleList", "(", "\n", "# 0: NA, 1: trigger this field", "\n", "[", "nn", ".", "Linear", "(", "hidden_size", ",", "2", ")", "for", "_", "in", "range", "(", "self", ".", "num_fields", ")", "]", "\n", ")", "\n", "\n", "# used to aggregate sentence and span embedding", "\n", "self", ".", "event_query", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "hidden_size", ")", ")", "\n", "# used for fields that do not contain any valid span", "\n", "# self.none_span_emb = nn.Parameter(torch.Tensor(1, self.hidden_size))", "\n", "# used for aggregating history filled span info", "\n", "self", ".", "field_queries", "=", "nn", ".", "ParameterList", "(", "\n", "[", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "hidden_size", ")", ")", "for", "_", "in", "range", "(", "self", ".", "num_fields", ")", "]", "\n", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.EventTable.reset_parameters": [[939, 945], ["dee_model.EventTable.event_query.data.uniform_", "math.sqrt", "fq.data.uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "hidden_size", ")", "\n", "self", ".", "event_query", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "# self.none_span_emb.data.uniform_(-stdv, stdv)", "\n", "for", "fq", "in", "self", ".", "field_queries", ":", "\n", "            ", "fq", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.EventTable.forward": [[946, 966], ["transformer.attention", "dee_model.EventTable.event_cls", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "batch_span_emb.unsqueeze.unsqueeze.dim", "batch_span_emb.unsqueeze.unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.attention"], ["", "", "def", "forward", "(", "self", ",", "sent_context_emb", "=", "None", ",", "batch_span_emb", "=", "None", ",", "field_idx", "=", "None", ")", ":", "\n", "        ", "assert", "(", "sent_context_emb", "is", "None", ")", "^", "(", "batch_span_emb", "is", "None", ")", "\n", "\n", "if", "sent_context_emb", "is", "not", "None", ":", "# [num_spans+num_sents, hidden_size]", "\n", "# doc_emb.size = [1, hidden_size]", "\n", "            ", "doc_emb", ",", "_", "=", "transformer", ".", "attention", "(", "self", ".", "event_query", ",", "sent_context_emb", ",", "sent_context_emb", ")", "\n", "doc_pred_logits", "=", "self", ".", "event_cls", "(", "doc_emb", ")", "\n", "doc_pred_logp", "=", "F", ".", "log_softmax", "(", "doc_pred_logits", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "doc_pred_logp", "\n", "\n", "", "if", "batch_span_emb", "is", "not", "None", ":", "\n", "            ", "assert", "field_idx", "is", "not", "None", "\n", "# span_context_emb: [batch_size, hidden_size] or [hidden_size]", "\n", "if", "batch_span_emb", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "batch_span_emb", "=", "batch_span_emb", ".", "unsqueeze", "(", "0", ")", "\n", "", "span_pred_logits", "=", "self", ".", "field_cls_list", "[", "field_idx", "]", "(", "batch_span_emb", ")", "\n", "span_pred_logp", "=", "F", ".", "log_softmax", "(", "span_pred_logits", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "span_pred_logp", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.EventTable.extra_repr": [[967, 970], ["None"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'event_type={}, num_fields={}, hidden_size={}'", ".", "format", "(", "\n", "self", ".", "event_type", ",", "self", ".", "num_fields", ",", "self", ".", "hidden_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.MLP.__init__": [[976, 992], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Linear", "torch.nn.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ",", "mid_size", "=", "None", ",", "num_mid_layer", "=", "1", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "num_mid_layer", ">=", "1", "\n", "if", "mid_size", "is", "None", ":", "\n", "            ", "mid_size", "=", "input_size", "\n", "\n", "", "self", ".", "input_fc", "=", "nn", ".", "Linear", "(", "input_size", ",", "mid_size", ")", "\n", "self", ".", "out_fc", "=", "nn", ".", "Linear", "(", "mid_size", ",", "output_size", ")", "\n", "if", "num_mid_layer", ">", "1", ":", "\n", "            ", "self", ".", "mid_fcs", "=", "nn", ".", "ModuleList", "(", "\n", "nn", ".", "Linear", "(", "mid_size", ",", "mid_size", ")", "for", "_", "in", "range", "(", "num_mid_layer", "-", "1", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mid_fcs", "=", "[", "]", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.MLP.forward": [[993, 999], ["dee_model.MLP.dropout", "dee_model.MLP.out_fc", "torch.relu", "torch.relu", "dee_model.MLP.dropout", "dee_model.MLP.input_fc", "torch.relu", "torch.relu", "mid_fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "input_fc", "(", "x", ")", ")", ")", "\n", "for", "mid_fc", "in", "self", ".", "mid_fcs", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "F", ".", "relu", "(", "mid_fc", "(", "x", ")", ")", ")", "\n", "", "x", "=", "self", ".", "out_fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.DCFEEModel.__init__": [[1087, 1105], ["torch.nn.Module.__init__", "dee_model.AttentiveReducer", "torch.nn.ModuleList", "torch.nn.ModuleList", "ner_model.NERModel", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "event_type_fields_pairs", ",", "ner_model", "=", "None", ")", ":", "\n", "        ", "super", "(", "DCFEEModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Note that for distributed training, you must ensure that", "\n", "# for any batch, all parameters need to be used", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "event_type_fields_pairs", "=", "event_type_fields_pairs", "\n", "\n", "if", "ner_model", "is", "None", ":", "\n", "            ", "self", ".", "ner_model", "=", "NERModel", "(", "config", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ner_model", "=", "ner_model", "\n", "\n", "# attentively reduce token embedding into sentence embedding", "\n", "", "self", ".", "doc_token_reducer", "=", "AttentiveReducer", "(", "config", ".", "hidden_size", ",", "dropout", "=", "config", ".", "dropout", ")", "\n", "# map sentence embedding to event prediction logits", "\n", "self", ".", "event_cls_layers", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "2", ")", "for", "_", "in", "self", ".", "event_type_fields_pairs", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.DCFEEModel.get_batch_sent_emb": [[1107, 1115], ["dee_model.DCFEEModel.doc_token_reducer", "list", "range"], "methods", ["None"], ["", "def", "get_batch_sent_emb", "(", "self", ",", "ner_token_emb", ",", "ner_token_masks", ",", "valid_sent_num_list", ")", ":", "\n", "# From [ner_batch_size, sent_len, hidden_size] to [ner_batch_size, hidden_size]", "\n", "        ", "total_sent_emb", "=", "self", ".", "doc_token_reducer", "(", "ner_token_emb", ",", "ner_token_masks", ")", "\n", "total_sent_pos_ids", "=", "[", "]", "\n", "for", "valid_sent_num", "in", "valid_sent_num_list", ":", "\n", "            ", "total_sent_pos_ids", "+=", "list", "(", "range", "(", "valid_sent_num", ")", ")", "\n", "\n", "", "return", "total_sent_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.DCFEEModel.get_loss_on_doc": [[1116, 1129], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "enumerate", "sum", "event_cls", "torch.cross_entropy", "torch.cross_entropy", "event_cls_loss_list.append"], "methods", ["None"], ["", "def", "get_loss_on_doc", "(", "self", ",", "doc_sent_emb", ",", "doc_fea", ")", ":", "\n", "        ", "doc_sent_label_mat", "=", "torch", ".", "tensor", "(", "\n", "doc_fea", ".", "doc_sent_labels", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "doc_sent_emb", ".", "device", ",", "requires_grad", "=", "False", "\n", ")", "\n", "event_cls_loss_list", "=", "[", "]", "\n", "for", "event_idx", ",", "event_cls", "in", "enumerate", "(", "self", ".", "event_cls_layers", ")", ":", "\n", "            ", "doc_sent_logits", "=", "event_cls", "(", "doc_sent_emb", ")", "# [sent_num, 2]", "\n", "doc_sent_labels", "=", "doc_sent_label_mat", "[", ":", ",", "event_idx", "]", "# [sent_num]", "\n", "event_cls_loss", "=", "F", ".", "cross_entropy", "(", "doc_sent_logits", ",", "doc_sent_labels", ",", "reduction", "=", "'sum'", ")", "\n", "event_cls_loss_list", ".", "append", "(", "event_cls_loss", ")", "\n", "\n", "", "final_loss", "=", "sum", "(", "event_cls_loss_list", ")", "\n", "return", "final_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.DCFEEModel.get_mix_loss": [[1130, 1147], ["len", "zip", "doc_sent_loss.new_full", "doc_ner_loss_list.append", "doc_sent_loss.size", "sum", "sum"], "methods", ["None"], ["", "def", "get_mix_loss", "(", "self", ",", "doc_sent_loss_list", ",", "doc_event_loss_list", ",", "doc_span_info_list", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "doc_span_info_list", ")", "\n", "loss_batch_avg", "=", "1.0", "/", "batch_size", "\n", "lambda_1", "=", "self", ".", "config", ".", "loss_lambda", "\n", "lambda_2", "=", "1", "-", "lambda_1", "\n", "\n", "doc_ner_loss_list", "=", "[", "]", "\n", "for", "doc_sent_loss", ",", "doc_span_info", "in", "zip", "(", "doc_sent_loss_list", ",", "doc_span_info_list", ")", ":", "\n", "# doc_sent_loss: Size([num_valid_sents])", "\n", "            ", "sent_loss_scaling", "=", "doc_sent_loss", ".", "new_full", "(", "\n", "doc_sent_loss", ".", "size", "(", ")", ",", "1", ",", "requires_grad", "=", "False", "\n", ")", "\n", "sent_loss_scaling", "[", "doc_span_info", ".", "missed_sent_idx_list", "]", "=", "self", ".", "config", ".", "loss_gamma", "\n", "doc_ner_loss", "=", "(", "doc_sent_loss", "*", "sent_loss_scaling", ")", ".", "sum", "(", ")", "\n", "doc_ner_loss_list", ".", "append", "(", "doc_ner_loss", ")", "\n", "\n", "", "return", "loss_batch_avg", "*", "(", "lambda_1", "*", "sum", "(", "doc_ner_loss_list", ")", "+", "lambda_2", "*", "sum", "(", "doc_event_loss_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.DCFEEModel.get_local_context_info": [[1148, 1221], ["len", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dee_model.DCFEEModel.ner_model", "dee_model.DCFEEModel.get_batch_sent_emb", "range", "ner_batch_idx_start_list.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sum", "ner_token_emb.size", "dee_model.DCFEEModel.size", "doc_token_emb_list.append", "doc_token_masks_list.append", "doc_token_types_list.append", "doc_sent_emb_list.append", "torch.cat.append", "torch.cat.append", "doc_sent_loss_list.append"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.DCFEEModel.get_batch_sent_emb"], ["", "def", "get_local_context_info", "(", "self", ",", "doc_batch_dict", ",", "train_flag", "=", "False", ",", "use_gold_span", "=", "False", ")", ":", "\n", "        ", "label_key", "=", "'doc_token_labels'", "\n", "if", "train_flag", "or", "use_gold_span", ":", "\n", "            ", "assert", "label_key", "in", "doc_batch_dict", "\n", "need_label_flag", "=", "True", "\n", "", "else", ":", "\n", "            ", "need_label_flag", "=", "False", "\n", "\n", "", "if", "need_label_flag", ":", "\n", "            ", "doc_token_labels_list", "=", "doc_batch_dict", "[", "label_key", "]", "\n", "", "else", ":", "\n", "            ", "doc_token_labels_list", "=", "None", "\n", "\n", "", "batch_size", "=", "len", "(", "doc_batch_dict", "[", "'ex_idx'", "]", ")", "\n", "doc_token_ids_list", "=", "doc_batch_dict", "[", "'doc_token_ids'", "]", "\n", "doc_token_masks_list", "=", "doc_batch_dict", "[", "'doc_token_masks'", "]", "\n", "valid_sent_num_list", "=", "doc_batch_dict", "[", "'valid_sent_num'", "]", "\n", "\n", "# transform doc_batch into sent_batch", "\n", "ner_batch_idx_start_list", "=", "[", "0", "]", "\n", "ner_token_ids", "=", "[", "]", "\n", "ner_token_masks", "=", "[", "]", "\n", "ner_token_labels", "=", "[", "]", "if", "need_label_flag", "else", "None", "\n", "for", "batch_idx", ",", "valid_sent_num", "in", "enumerate", "(", "valid_sent_num_list", ")", ":", "\n", "            ", "idx_start", "=", "ner_batch_idx_start_list", "[", "-", "1", "]", "\n", "idx_end", "=", "idx_start", "+", "valid_sent_num", "\n", "ner_batch_idx_start_list", ".", "append", "(", "idx_end", ")", "\n", "\n", "ner_token_ids", ".", "append", "(", "doc_token_ids_list", "[", "batch_idx", "]", ")", "\n", "ner_token_masks", ".", "append", "(", "doc_token_masks_list", "[", "batch_idx", "]", ")", "\n", "if", "need_label_flag", ":", "\n", "                ", "ner_token_labels", ".", "append", "(", "doc_token_labels_list", "[", "batch_idx", "]", ")", "\n", "\n", "# [ner_batch_size, norm_sent_len]", "\n", "", "", "ner_token_ids", "=", "torch", ".", "cat", "(", "ner_token_ids", ",", "dim", "=", "0", ")", "\n", "ner_token_masks", "=", "torch", ".", "cat", "(", "ner_token_masks", ",", "dim", "=", "0", ")", "\n", "if", "need_label_flag", ":", "\n", "            ", "ner_token_labels", "=", "torch", ".", "cat", "(", "ner_token_labels", ",", "dim", "=", "0", ")", "\n", "\n", "# get ner output", "\n", "", "ner_token_emb", ",", "ner_loss", ",", "ner_token_preds", "=", "self", ".", "ner_model", "(", "\n", "ner_token_ids", ",", "ner_token_masks", ",", "label_ids", "=", "ner_token_labels", ",", "\n", "train_flag", "=", "train_flag", ",", "decode_flag", "=", "not", "use_gold_span", ",", "\n", ")", "\n", "\n", "if", "use_gold_span", ":", "# definitely use gold span info", "\n", "            ", "ner_token_types", "=", "ner_token_labels", "\n", "", "else", ":", "\n", "            ", "ner_token_types", "=", "ner_token_preds", "\n", "\n", "# get sentence embedding", "\n", "", "ner_sent_emb", "=", "self", ".", "get_batch_sent_emb", "(", "ner_token_emb", ",", "ner_token_masks", ",", "valid_sent_num_list", ")", "\n", "\n", "assert", "sum", "(", "valid_sent_num_list", ")", "==", "ner_token_emb", ".", "size", "(", "0", ")", "==", "ner_sent_emb", ".", "size", "(", "0", ")", "\n", "\n", "# followings are all lists of tensors", "\n", "doc_token_emb_list", "=", "[", "]", "\n", "doc_token_masks_list", "=", "[", "]", "\n", "doc_token_types_list", "=", "[", "]", "\n", "doc_sent_emb_list", "=", "[", "]", "\n", "doc_sent_loss_list", "=", "[", "]", "\n", "for", "batch_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "idx_start", "=", "ner_batch_idx_start_list", "[", "batch_idx", "]", "\n", "idx_end", "=", "ner_batch_idx_start_list", "[", "batch_idx", "+", "1", "]", "\n", "doc_token_emb_list", ".", "append", "(", "ner_token_emb", "[", "idx_start", ":", "idx_end", ",", ":", ",", ":", "]", ")", "\n", "doc_token_masks_list", ".", "append", "(", "ner_token_masks", "[", "idx_start", ":", "idx_end", ",", ":", "]", ")", "\n", "doc_token_types_list", ".", "append", "(", "ner_token_types", "[", "idx_start", ":", "idx_end", ",", ":", "]", ")", "\n", "doc_sent_emb_list", ".", "append", "(", "ner_sent_emb", "[", "idx_start", ":", "idx_end", ",", ":", "]", ")", "\n", "if", "ner_loss", "is", "not", "None", ":", "\n", "# every doc_sent_loss.size is [valid_sent_num]", "\n", "                ", "doc_sent_loss_list", ".", "append", "(", "ner_loss", "[", "idx_start", ":", "idx_end", "]", ")", "\n", "\n", "", "", "return", "doc_token_emb_list", ",", "doc_token_masks_list", ",", "doc_token_types_list", ",", "doc_sent_emb_list", ",", "doc_sent_loss_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.DCFEEModel.forward": [[1222, 1270], ["dee_model.DCFEEModel.get_local_context_info", "dee_model.get_doc_span_info_list", "enumerate", "dee_model.DCFEEModel.get_mix_loss", "enumerate", "doc_event_loss_list.append", "eval_results.append", "dee_model.DCFEEModel.get_loss_on_doc", "dee_model.DCFEEModel.heuristic_decode_on_doc"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.DCFEEModel.get_local_context_info", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.get_doc_span_info_list", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.DCFEEModel.get_mix_loss", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.DCFEEModel.get_loss_on_doc", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.DCFEEModel.heuristic_decode_on_doc"], ["", "def", "forward", "(", "self", ",", "doc_batch_dict", ",", "doc_features", ",", "\n", "use_gold_span", "=", "False", ",", "train_flag", "=", "True", ",", "heuristic_type", "=", "'DCFEE-O'", ",", "\n", "event_idx2entity_idx2field_idx", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# DCFEE does not need scheduled sampling", "\n", "# get doc token-level local context", "\n", "        ", "doc_token_emb_list", ",", "doc_token_masks_list", ",", "doc_token_types_list", ",", "doc_sent_emb_list", ",", "doc_sent_loss_list", "=", "self", ".", "get_local_context_info", "(", "\n", "doc_batch_dict", ",", "train_flag", "=", "train_flag", ",", "use_gold_span", "=", "use_gold_span", ",", "\n", ")", "\n", "\n", "# get doc feature objects", "\n", "ex_idx_list", "=", "doc_batch_dict", "[", "'ex_idx'", "]", "\n", "doc_fea_list", "=", "[", "doc_features", "[", "ex_idx", "]", "for", "ex_idx", "in", "ex_idx_list", "]", "\n", "\n", "# get doc span-level info for event extraction", "\n", "doc_span_info_list", "=", "get_doc_span_info_list", "(", "doc_token_types_list", ",", "doc_fea_list", ",", "use_gold_span", "=", "use_gold_span", ")", "\n", "\n", "if", "train_flag", ":", "\n", "            ", "doc_event_loss_list", "=", "[", "]", "\n", "for", "batch_idx", ",", "ex_idx", "in", "enumerate", "(", "ex_idx_list", ")", ":", "\n", "                ", "doc_event_loss_list", ".", "append", "(", "\n", "self", ".", "get_loss_on_doc", "(", "\n", "doc_sent_emb_list", "[", "batch_idx", "]", ",", "\n", "doc_fea_list", "[", "batch_idx", "]", ",", "\n", ")", "\n", ")", "\n", "\n", "", "mix_loss", "=", "self", ".", "get_mix_loss", "(", "doc_sent_loss_list", ",", "doc_event_loss_list", ",", "doc_span_info_list", ")", "\n", "\n", "return", "mix_loss", "\n", "", "else", ":", "\n", "# return a list object may not be supported by torch.nn.parallel.DataParallel", "\n", "# ensure to run it under the single-gpu mode", "\n", "            ", "eval_results", "=", "[", "]", "\n", "\n", "assert", "event_idx2entity_idx2field_idx", "is", "not", "None", "\n", "for", "batch_idx", ",", "ex_idx", "in", "enumerate", "(", "ex_idx_list", ")", ":", "\n", "                ", "eval_results", ".", "append", "(", "\n", "self", ".", "heuristic_decode_on_doc", "(", "\n", "doc_sent_emb_list", "[", "batch_idx", "]", ",", "\n", "doc_fea_list", "[", "batch_idx", "]", ",", "\n", "doc_span_info_list", "[", "batch_idx", "]", ",", "\n", "event_idx2entity_idx2field_idx", ",", "\n", "heuristic_type", "=", "heuristic_type", ",", "\n", ")", "\n", ")", "\n", "\n", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.DCFEEModel.heuristic_decode_on_doc": [[1271, 1344], ["dee_model.DCFEEModel.get_event_field_span_candidates", "enumerate", "Exception", "len", "range", "len", "event_cls", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.argmax().tolist", "event_idx2key_sent_idx_list.append", "len", "event_pred_list.append", "event_idx2obj_idx2field_idx2token_tup.append", "len", "event_pred_list.append", "event_idx2obj_idx2field_idx2token_tup.append", "event_pred_list.append", "event_idx2obj_idx2field_idx2token_tup.append", "str", "torch.log_softmax.argmax", "enumerate", "dee_model.get_one_key_sent_event", "obj_idx2field_idx2token_tup.append", "dee_model.get_many_key_sent_event", "obj_idx2field_idx2token_tup.extend", "Exception", "str"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.DCFEEModel.get_event_field_span_candidates", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.get_one_key_sent_event", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.get_many_key_sent_event"], ["", "", "def", "heuristic_decode_on_doc", "(", "self", ",", "doc_sent_emb", ",", "doc_fea", ",", "doc_span_info", ",", "\n", "event_idx2entity_idx2field_idx", ",", "heuristic_type", "=", "'DCFEE-O'", ")", ":", "\n", "# DCFEE-O: just produce One event per triggered sentence", "\n", "# DCFEE-M: produce Multiple potential events per triggered sentence", "\n", "        ", "support_heuristic_types", "=", "[", "'DCFEE-O'", ",", "'DCFEE-M'", "]", "\n", "if", "heuristic_type", "not", "in", "support_heuristic_types", ":", "\n", "            ", "raise", "Exception", "(", "'Unsupported heuristic type {}, pleasure choose from {}'", ".", "format", "(", "\n", "heuristic_type", ",", "str", "(", "support_heuristic_types", ")", "\n", ")", ")", "\n", "\n", "", "span_token_tup_list", "=", "doc_span_info", ".", "span_token_tup_list", "\n", "span_mention_range_list", "=", "doc_span_info", ".", "span_mention_range_list", "\n", "mention_drange_list", "=", "doc_span_info", ".", "mention_drange_list", "\n", "mention_type_list", "=", "doc_span_info", ".", "mention_type_list", "\n", "# heuristic decoding strategies will work on these span candidates", "\n", "event_idx2field_idx2span_token_tup2dranges", "=", "self", ".", "get_event_field_span_candidates", "(", "\n", "span_token_tup_list", ",", "span_mention_range_list", ",", "mention_drange_list", ",", "\n", "mention_type_list", ",", "event_idx2entity_idx2field_idx", ",", "\n", ")", "\n", "\n", "# if there is no extracted span, just directly return", "\n", "if", "len", "(", "span_token_tup_list", ")", "==", "0", ":", "\n", "            ", "event_pred_list", "=", "[", "]", "\n", "event_idx2obj_idx2field_idx2token_tup", "=", "[", "]", "# this term will be compared with ground-truth table contents", "\n", "for", "event_idx", "in", "range", "(", "len", "(", "self", ".", "event_type_fields_pairs", ")", ")", ":", "\n", "                ", "event_pred_list", ".", "append", "(", "0", ")", "\n", "event_idx2obj_idx2field_idx2token_tup", ".", "append", "(", "None", ")", "\n", "\n", "", "return", "doc_fea", ".", "ex_idx", ",", "event_pred_list", ",", "event_idx2obj_idx2field_idx2token_tup", ",", "doc_span_info", ",", "event_idx2field_idx2span_token_tup2dranges", "\n", "\n", "", "event_idx2key_sent_idx_list", "=", "[", "]", "\n", "event_pred_list", "=", "[", "]", "\n", "event_idx2obj_idx2field_idx2token_tup", "=", "[", "]", "\n", "for", "event_idx", ",", "event_cls", "in", "enumerate", "(", "self", ".", "event_cls_layers", ")", ":", "\n", "            ", "event_type", ",", "field_types", "=", "self", ".", "event_type_fields_pairs", "[", "event_idx", "]", "\n", "num_fields", "=", "len", "(", "field_types", ")", "\n", "field_idx2span_token_tup2dranges", "=", "event_idx2field_idx2span_token_tup2dranges", "[", "event_idx", "]", "\n", "\n", "# get key event sentence prediction", "\n", "doc_sent_logits", "=", "event_cls", "(", "doc_sent_emb", ")", "# [sent_num, 2]", "\n", "doc_sent_logp", "=", "F", ".", "log_softmax", "(", "doc_sent_logits", ",", "dim", "=", "-", "1", ")", "# [sent_num, 2]", "\n", "doc_sent_pred_list", "=", "doc_sent_logp", ".", "argmax", "(", "dim", "=", "-", "1", ")", ".", "tolist", "(", ")", "\n", "key_sent_idx_list", "=", "[", "\n", "sent_idx", "for", "sent_idx", ",", "sent_pred", "in", "enumerate", "(", "doc_sent_pred_list", ")", "if", "sent_pred", "==", "1", "\n", "]", "\n", "event_idx2key_sent_idx_list", ".", "append", "(", "key_sent_idx_list", ")", "\n", "\n", "if", "len", "(", "key_sent_idx_list", ")", "==", "0", ":", "\n", "                ", "event_pred_list", ".", "append", "(", "0", ")", "\n", "event_idx2obj_idx2field_idx2token_tup", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                ", "obj_idx2field_idx2token_tup", "=", "[", "]", "\n", "for", "key_sent_idx", "in", "key_sent_idx_list", ":", "\n", "                    ", "if", "heuristic_type", "==", "support_heuristic_types", "[", "0", "]", ":", "\n", "                        ", "field_idx2token_tup", "=", "get_one_key_sent_event", "(", "\n", "key_sent_idx", ",", "num_fields", ",", "field_idx2span_token_tup2dranges", "\n", ")", "\n", "obj_idx2field_idx2token_tup", ".", "append", "(", "field_idx2token_tup", ")", "\n", "", "elif", "heuristic_type", "==", "support_heuristic_types", "[", "1", "]", ":", "\n", "                        ", "field_idx2token_tup_list", "=", "get_many_key_sent_event", "(", "\n", "key_sent_idx", ",", "num_fields", ",", "field_idx2span_token_tup2dranges", "\n", ")", "\n", "obj_idx2field_idx2token_tup", ".", "extend", "(", "field_idx2token_tup_list", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "Exception", "(", "'Unsupported heuristic type {}, pleasure choose from {}'", ".", "format", "(", "\n", "heuristic_type", ",", "str", "(", "support_heuristic_types", ")", "\n", ")", ")", "\n", "", "", "event_pred_list", ".", "append", "(", "1", ")", "\n", "event_idx2obj_idx2field_idx2token_tup", ".", "append", "(", "obj_idx2field_idx2token_tup", ")", "\n", "\n", "", "", "return", "doc_fea", ".", "ex_idx", ",", "event_pred_list", ",", "event_idx2obj_idx2field_idx2token_tup", ",", "doc_span_info", ",", "event_idx2field_idx2span_token_tup2dranges", ",", "event_idx2key_sent_idx_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.DCFEEModel.get_event_field_span_candidates": [[1345, 1383], ["enumerate", "enumerate", "mention_span_idx_list.extend", "len", "len", "enumerate", "enumerate", "zip", "cur_span_token_tup2dranges[].append"], "methods", ["None"], ["", "def", "get_event_field_span_candidates", "(", "self", ",", "span_token_tup_list", ",", "span_mention_range_list", ",", "\n", "mention_drange_list", ",", "mention_type_list", ",", "event_idx2entity_idx2field_idx", ")", ":", "\n", "# get mention idx -> span idx", "\n", "        ", "mention_span_idx_list", "=", "[", "]", "\n", "for", "span_idx", ",", "(", "ment_idx_s", ",", "ment_idx_e", ")", "in", "enumerate", "(", "span_mention_range_list", ")", ":", "\n", "            ", "mention_span_idx_list", ".", "extend", "(", "[", "span_idx", "]", "*", "(", "ment_idx_e", "-", "ment_idx_s", ")", ")", "\n", "", "assert", "len", "(", "mention_span_idx_list", ")", "==", "len", "(", "mention_drange_list", ")", "\n", "\n", "event_idx2field_idx2span_token_tup2dranges", "=", "{", "}", "\n", "for", "event_idx", ",", "(", "event_type", ",", "field_types", ")", "in", "enumerate", "(", "self", ".", "event_type_fields_pairs", ")", ":", "\n", "# get the predefined entity idx to field idx mapping", "\n", "            ", "gold_entity_idx2field_idx", "=", "event_idx2entity_idx2field_idx", "[", "event_idx", "]", "\n", "\n", "# store field candidates for this doc", "\n", "field_idx2span_token_tup2dranges", "=", "{", "}", "\n", "for", "field_idx", ",", "_", "in", "enumerate", "(", "field_types", ")", ":", "\n", "                ", "field_idx2span_token_tup2dranges", "[", "field_idx", "]", "=", "{", "}", "\n", "\n", "# aggregate field candidates according to mention types", "\n", "", "for", "ment_idx", ",", "(", "ment_drange", ",", "ment_entity_idx", ")", "in", "enumerate", "(", "zip", "(", "mention_drange_list", ",", "mention_type_list", ")", ")", ":", "\n", "                ", "if", "ment_entity_idx", "not", "in", "gold_entity_idx2field_idx", ":", "\n", "                    ", "continue", "\n", "", "ment_field_idx", "=", "gold_entity_idx2field_idx", "[", "ment_entity_idx", "]", "\n", "if", "ment_field_idx", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "", "ment_span_idx", "=", "mention_span_idx_list", "[", "ment_idx", "]", "\n", "span_token_tup", "=", "span_token_tup_list", "[", "ment_span_idx", "]", "\n", "\n", "# because it is dict, so all modifications to the key will take effect in raw dict", "\n", "cur_span_token_tup2dranges", "=", "field_idx2span_token_tup2dranges", "[", "ment_field_idx", "]", "\n", "if", "span_token_tup", "not", "in", "cur_span_token_tup2dranges", ":", "\n", "                    ", "cur_span_token_tup2dranges", "[", "span_token_tup", "]", "=", "[", "]", "\n", "", "cur_span_token_tup2dranges", "[", "span_token_tup", "]", ".", "append", "(", "ment_drange", ")", "\n", "\n", "", "event_idx2field_idx2span_token_tup2dranges", "[", "event_idx", "]", "=", "field_idx2span_token_tup2dranges", "\n", "\n", "", "return", "event_idx2field_idx2span_token_tup2dranges", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.get_doc_span_info_list": [[29, 68], ["zip", "len", "len", "doc_token_types.tolist", "dee_model.get_span_mention_info", "doc_fea.generate_dag_info_for", "DocSpanInfo", "doc_span_info_list.append", "dee_model.extract_doc_valid_span_info", "len"], "function", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.get_span_mention_info", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEFeature.generate_dag_info_for", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.extract_doc_valid_span_info"], ["def", "get_doc_span_info_list", "(", "doc_token_types_list", ",", "doc_fea_list", ",", "use_gold_span", "=", "False", ")", ":", "\n", "    ", "assert", "len", "(", "doc_token_types_list", ")", "==", "len", "(", "doc_fea_list", ")", "\n", "doc_span_info_list", "=", "[", "]", "\n", "for", "doc_token_types", ",", "doc_fea", "in", "zip", "(", "doc_token_types_list", ",", "doc_fea_list", ")", ":", "\n", "        ", "doc_token_type_mat", "=", "doc_token_types", ".", "tolist", "(", ")", "# [[token_type, ...], ...]", "\n", "\n", "# using extracted results is also ok", "\n", "# span_token_tup_list, span_dranges_list = extract_doc_valid_span_info(doc_token_type_mat, doc_fea)", "\n", "if", "use_gold_span", ":", "\n", "            ", "span_token_tup_list", "=", "doc_fea", ".", "span_token_ids_list", "\n", "span_dranges_list", "=", "doc_fea", ".", "span_dranges_list", "\n", "", "else", ":", "\n", "            ", "span_token_tup_list", ",", "span_dranges_list", "=", "extract_doc_valid_span_info", "(", "doc_token_type_mat", ",", "doc_fea", ")", "\n", "\n", "if", "len", "(", "span_token_tup_list", ")", "==", "0", ":", "\n", "# do not get valid entity span results,", "\n", "# just use gold spans to avoid crashing at earlier iterations", "\n", "# TODO: consider generate random negative spans", "\n", "                ", "span_token_tup_list", "=", "doc_fea", ".", "span_token_ids_list", "\n", "span_dranges_list", "=", "doc_fea", ".", "span_dranges_list", "\n", "\n", "# one span may have multiple mentions", "\n", "", "", "span_mention_range_list", ",", "mention_drange_list", ",", "mention_type_list", "=", "get_span_mention_info", "(", "\n", "span_dranges_list", ",", "doc_token_type_mat", "\n", ")", "\n", "\n", "# generate event decoding dag graph for model training", "\n", "event_dag_info", ",", "_", ",", "missed_sent_idx_list", "=", "doc_fea", ".", "generate_dag_info_for", "(", "span_token_tup_list", ",", "return_miss", "=", "True", ")", "\n", "\n", "# doc_span_info will incorporate all span-level information needed for the event extraction", "\n", "doc_span_info", "=", "DocSpanInfo", "(", "\n", "span_token_tup_list", ",", "span_dranges_list", ",", "span_mention_range_list", ",", "\n", "mention_drange_list", ",", "mention_type_list", ",", "\n", "event_dag_info", ",", "missed_sent_idx_list", ",", "\n", ")", "\n", "\n", "doc_span_info_list", ".", "append", "(", "doc_span_info", ")", "\n", "\n", "", "return", "doc_span_info_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.append_top_span_only": [[787, 806], ["token_min_drange_list.sort", "list", "new_token_path_list.append", "span_token_tup2dranges.items", "len", "list.append", "list.append"], "function", ["None"], ["", "", "def", "append_top_span_only", "(", "last_token_path_list", ",", "field_idx", ",", "field_idx2span_token_tup2dranges", ")", ":", "\n", "    ", "new_token_path_list", "=", "[", "]", "\n", "span_token_tup2dranges", "=", "field_idx2span_token_tup2dranges", "[", "field_idx", "]", "\n", "token_min_drange_list", "=", "[", "\n", "(", "token_tup", ",", "dranges", "[", "0", "]", ")", "for", "token_tup", ",", "dranges", "in", "span_token_tup2dranges", ".", "items", "(", ")", "\n", "]", "\n", "token_min_drange_list", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "\n", "for", "last_token_path", "in", "last_token_path_list", ":", "\n", "        ", "new_token_path", "=", "list", "(", "last_token_path", ")", "\n", "if", "len", "(", "token_min_drange_list", ")", "==", "0", ":", "\n", "            ", "new_token_path", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "            ", "token_tup", "=", "token_min_drange_list", "[", "0", "]", "[", "0", "]", "\n", "new_token_path", ".", "append", "(", "token_tup", ")", "\n", "\n", "", "new_token_path_list", ".", "append", "(", "new_token_path", ")", "\n", "\n", "", "return", "new_token_path_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.append_all_spans": [[808, 824], ["span_token_tup2dranges.keys", "list", "list.append", "new_token_path_list.append", "len", "list", "list.append", "new_token_path_list.append"], "function", ["None"], ["", "def", "append_all_spans", "(", "last_token_path_list", ",", "field_idx", ",", "field_idx2span_token_tup2dranges", ")", ":", "\n", "    ", "new_token_path_list", "=", "[", "]", "\n", "span_token_tup2dranges", "=", "field_idx2span_token_tup2dranges", "[", "field_idx", "]", "\n", "\n", "for", "last_token_path", "in", "last_token_path_list", ":", "\n", "        ", "for", "token_tup", "in", "span_token_tup2dranges", ".", "keys", "(", ")", ":", "\n", "            ", "new_token_path", "=", "list", "(", "last_token_path", ")", "\n", "new_token_path", ".", "append", "(", "token_tup", ")", "\n", "new_token_path_list", ".", "append", "(", "new_token_path", ")", "\n", "\n", "", "if", "len", "(", "span_token_tup2dranges", ")", "==", "0", ":", "# ensure every last path will be extended", "\n", "            ", "new_token_path", "=", "list", "(", "last_token_path", ")", "\n", "new_token_path", ".", "append", "(", "None", ")", "\n", "new_token_path_list", ".", "append", "(", "new_token_path", ")", "\n", "\n", "", "", "return", "new_token_path_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.get_span_mention_info": [[1001, 1015], ["len", "len", "span_mention_range_list.append", "mention_drange_list.append", "mention_type_list.append"], "function", ["None"], ["", "", "def", "get_span_mention_info", "(", "span_dranges_list", ",", "doc_token_type_list", ")", ":", "\n", "    ", "span_mention_range_list", "=", "[", "]", "\n", "mention_drange_list", "=", "[", "]", "\n", "mention_type_list", "=", "[", "]", "\n", "for", "span_dranges", "in", "span_dranges_list", ":", "\n", "        ", "ment_idx_s", "=", "len", "(", "mention_drange_list", ")", "\n", "for", "drange", "in", "span_dranges", ":", "\n", "            ", "mention_drange_list", ".", "append", "(", "drange", ")", "\n", "sent_idx", ",", "char_s", ",", "char_e", "=", "drange", "\n", "mention_type_list", ".", "append", "(", "doc_token_type_list", "[", "sent_idx", "]", "[", "char_s", "]", ")", "\n", "", "ment_idx_e", "=", "len", "(", "mention_drange_list", ")", "\n", "span_mention_range_list", ".", "append", "(", "(", "ment_idx_s", ",", "ment_idx_e", ")", ")", "\n", "\n", "", "return", "span_mention_range_list", ",", "mention_drange_list", ",", "mention_type_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.extract_doc_valid_span_info": [[1017, 1065], ["doc_fea.doc_token_ids.tolist", "doc_fea.doc_token_masks.tolist", "range", "span_token_drange_list.sort", "collections.OrderedDict", "list", "list", "len", "token_tup2dranges[].append", "collections.OrderedDict.keys", "collections.OrderedDict.values", "tuple", "span_token_drange_list.append"], "function", ["None"], ["", "def", "extract_doc_valid_span_info", "(", "doc_token_type_mat", ",", "doc_fea", ")", ":", "\n", "    ", "doc_token_id_mat", "=", "doc_fea", ".", "doc_token_ids", ".", "tolist", "(", ")", "\n", "doc_token_mask_mat", "=", "doc_fea", ".", "doc_token_masks", ".", "tolist", "(", ")", "\n", "\n", "# [(token_id_tuple, (sent_idx, char_s, char_e)), ...]", "\n", "span_token_drange_list", "=", "[", "]", "\n", "\n", "valid_sent_num", "=", "doc_fea", ".", "valid_sent_num", "\n", "for", "sent_idx", "in", "range", "(", "valid_sent_num", ")", ":", "\n", "        ", "seq_token_id_list", "=", "doc_token_id_mat", "[", "sent_idx", "]", "\n", "seq_token_mask_list", "=", "doc_token_mask_mat", "[", "sent_idx", "]", "\n", "seq_token_type_list", "=", "doc_token_type_mat", "[", "sent_idx", "]", "\n", "seq_len", "=", "len", "(", "seq_token_id_list", ")", "\n", "\n", "char_s", "=", "0", "\n", "while", "char_s", "<", "seq_len", ":", "\n", "            ", "if", "seq_token_mask_list", "[", "char_s", "]", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "", "entity_idx", "=", "seq_token_type_list", "[", "char_s", "]", "\n", "\n", "if", "entity_idx", "%", "2", "==", "1", ":", "\n", "                ", "char_e", "=", "char_s", "+", "1", "\n", "while", "char_e", "<", "seq_len", "and", "seq_token_mask_list", "[", "char_e", "]", "==", "1", "and", "seq_token_type_list", "[", "char_e", "]", "==", "entity_idx", "+", "1", ":", "\n", "                    ", "char_e", "+=", "1", "\n", "\n", "", "token_tup", "=", "tuple", "(", "seq_token_id_list", "[", "char_s", ":", "char_e", "]", ")", "\n", "drange", "=", "(", "sent_idx", ",", "char_s", ",", "char_e", ")", "\n", "\n", "span_token_drange_list", ".", "append", "(", "(", "token_tup", ",", "drange", ")", ")", "\n", "\n", "char_s", "=", "char_e", "\n", "", "else", ":", "\n", "                ", "char_s", "+=", "1", "\n", "\n", "", "", "", "span_token_drange_list", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "-", "1", "]", ")", "# sorted by drange = (sent_idx, char_s, char_e)", "\n", "# drange is exclusive and sorted", "\n", "token_tup2dranges", "=", "OrderedDict", "(", ")", "\n", "for", "token_tup", ",", "drange", "in", "span_token_drange_list", ":", "\n", "        ", "if", "token_tup", "not", "in", "token_tup2dranges", ":", "\n", "            ", "token_tup2dranges", "[", "token_tup", "]", "=", "[", "]", "\n", "", "token_tup2dranges", "[", "token_tup", "]", ".", "append", "(", "drange", ")", "\n", "\n", "", "span_token_tup_list", "=", "list", "(", "token_tup2dranges", ".", "keys", "(", ")", ")", "\n", "span_dranges_list", "=", "list", "(", "token_tup2dranges", ".", "values", "(", ")", ")", "\n", "\n", "return", "span_token_tup_list", ",", "span_dranges_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.get_batch_span_label": [[1067, 1078], ["torch.tensor", "torch.tensor", "range"], "function", ["None"], ["", "def", "get_batch_span_label", "(", "num_spans", ",", "cur_span_idx_set", ",", "device", ")", ":", "\n", "# prepare span labels for this field and this path", "\n", "    ", "span_field_labels", "=", "[", "\n", "1", "if", "span_idx", "in", "cur_span_idx_set", "else", "0", "for", "span_idx", "in", "range", "(", "num_spans", ")", "\n", "]", "\n", "\n", "batch_field_label", "=", "torch", ".", "tensor", "(", "\n", "span_field_labels", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ",", "requires_grad", "=", "False", "\n", ")", "# [num_spans], val \\in {0, 1}", "\n", "\n", "return", "batch_field_label", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.get_one_key_sent_event": [[1385, 1402], ["range", "token_tup2dranges.items", "field_idx2token_tup.append", "abs"], "function", ["None"], ["", "", "def", "get_one_key_sent_event", "(", "key_sent_idx", ",", "num_fields", ",", "field_idx2span_token_tup2dranges", ")", ":", "\n", "    ", "field_idx2token_tup", "=", "[", "]", "\n", "for", "field_idx", "in", "range", "(", "num_fields", ")", ":", "\n", "        ", "token_tup2dranges", "=", "field_idx2span_token_tup2dranges", "[", "field_idx", "]", "\n", "\n", "# find the closest token_tup to the key sentence", "\n", "best_token_tup", "=", "None", "\n", "best_dist", "=", "10000", "\n", "for", "token_tup", ",", "dranges", "in", "token_tup2dranges", ".", "items", "(", ")", ":", "\n", "            ", "for", "sent_idx", ",", "_", ",", "_", "in", "dranges", ":", "\n", "                ", "cur_dist", "=", "abs", "(", "sent_idx", "-", "key_sent_idx", ")", "\n", "if", "cur_dist", "<", "best_dist", ":", "\n", "                    ", "best_token_tup", "=", "token_tup", "\n", "best_dist", "=", "cur_dist", "\n", "\n", "", "", "", "field_idx2token_tup", ".", "append", "(", "best_token_tup", ")", "\n", "", "return", "field_idx2token_tup", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_model.get_many_key_sent_event": [[1404, 1470], ["collections.defaultdict", "field_idx2span_token_tup2dranges.items", "token_tup2dranges.items", "len", "collections.defaultdict.items", "range", "field_idx2token_tup_list.append", "set", "len", "token_tup_set.pop", "token_tup_set.remove", "field_idx2token_tup.append", "token_tup2dranges.items", "field_idx2token_tup.append", "key_field_idx2token_tup_set[].add", "min", "len", "abs", "abs", "abs"], "function", ["None"], ["", "def", "get_many_key_sent_event", "(", "key_sent_idx", ",", "num_fields", ",", "field_idx2span_token_tup2dranges", ")", ":", "\n", "# get key_field_idx contained in key event sentence", "\n", "    ", "key_field_idx2token_tup_set", "=", "defaultdict", "(", "lambda", ":", "set", "(", ")", ")", "\n", "for", "field_idx", ",", "token_tup2dranges", "in", "field_idx2span_token_tup2dranges", ".", "items", "(", ")", ":", "\n", "        ", "assert", "field_idx", "<", "num_fields", "\n", "for", "token_tup", ",", "dranges", "in", "token_tup2dranges", ".", "items", "(", ")", ":", "\n", "            ", "for", "sent_idx", ",", "_", ",", "_", "in", "dranges", ":", "\n", "                ", "if", "sent_idx", "==", "key_sent_idx", ":", "\n", "                    ", "key_field_idx2token_tup_set", "[", "field_idx", "]", ".", "add", "(", "token_tup", ")", "\n", "\n", "", "", "", "", "field_idx2token_tup_list", "=", "[", "]", "\n", "while", "len", "(", "key_field_idx2token_tup_set", ")", ">", "0", ":", "\n", "# get key token tup candidates according to the distance in the sentence", "\n", "        ", "prev_field_idx", "=", "None", "\n", "prev_token_cand", "=", "None", "\n", "key_field_idx2token_cand", "=", "{", "}", "\n", "for", "key_field_idx", ",", "token_tup_set", "in", "key_field_idx2token_tup_set", ".", "items", "(", ")", ":", "\n", "            ", "assert", "len", "(", "token_tup_set", ")", ">", "0", "\n", "\n", "if", "prev_token_cand", "is", "None", ":", "\n", "                ", "best_token_tup", "=", "token_tup_set", ".", "pop", "(", ")", "\n", "", "else", ":", "\n", "                ", "prev_char_range", "=", "field_idx2span_token_tup2dranges", "[", "prev_field_idx", "]", "[", "prev_token_cand", "]", "[", "0", "]", "[", "1", ":", "]", "\n", "best_dist", "=", "10000", "\n", "best_token_tup", "=", "None", "\n", "for", "token_tup", "in", "token_tup_set", ":", "\n", "                    ", "cur_char_range", "=", "field_idx2span_token_tup2dranges", "[", "key_field_idx", "]", "[", "token_tup", "]", "[", "0", "]", "[", "1", ":", "]", "\n", "cur_dist", "=", "min", "(", "\n", "abs", "(", "cur_char_range", "[", "1", "]", "-", "prev_char_range", "[", "0", "]", ")", ",", "\n", "abs", "(", "cur_char_range", "[", "0", "]", "-", "prev_char_range", "[", "1", "]", ")", "\n", ")", "\n", "if", "cur_dist", "<", "best_dist", ":", "\n", "                        ", "best_dist", "=", "cur_dist", "\n", "best_token_tup", "=", "token_tup", "\n", "", "", "token_tup_set", ".", "remove", "(", "best_token_tup", ")", "\n", "\n", "", "key_field_idx2token_cand", "[", "key_field_idx", "]", "=", "best_token_tup", "\n", "prev_field_idx", "=", "key_field_idx", "\n", "prev_token_cand", "=", "best_token_tup", "\n", "\n", "", "field_idx2token_tup", "=", "[", "]", "\n", "for", "field_idx", "in", "range", "(", "num_fields", ")", ":", "\n", "            ", "token_tup2dranges", "=", "field_idx2span_token_tup2dranges", "[", "field_idx", "]", "\n", "\n", "if", "field_idx", "in", "key_field_idx2token_tup_set", ":", "\n", "                ", "token_tup_set", "=", "key_field_idx2token_tup_set", "[", "field_idx", "]", "\n", "if", "len", "(", "token_tup_set", ")", "==", "0", ":", "\n", "                    ", "del", "key_field_idx2token_tup_set", "[", "field_idx", "]", "\n", "", "token_tup", "=", "key_field_idx2token_cand", "[", "field_idx", "]", "\n", "field_idx2token_tup", ".", "append", "(", "token_tup", ")", "\n", "", "else", ":", "\n", "# find the closest token_tup to the key sentence", "\n", "                ", "best_token_tup", "=", "None", "\n", "best_dist", "=", "10000", "\n", "for", "token_tup", ",", "dranges", "in", "token_tup2dranges", ".", "items", "(", ")", ":", "\n", "                    ", "for", "sent_idx", ",", "_", ",", "_", "in", "dranges", ":", "\n", "                        ", "cur_dist", "=", "abs", "(", "sent_idx", "-", "key_sent_idx", ")", "\n", "if", "cur_dist", "<", "best_dist", ":", "\n", "                            ", "best_token_tup", "=", "token_tup", "\n", "best_dist", "=", "cur_dist", "\n", "\n", "", "", "", "field_idx2token_tup", ".", "append", "(", "best_token_tup", ")", "\n", "\n", "", "", "field_idx2token_tup_list", ".", "append", "(", "field_idx2token_tup", ")", "\n", "\n", "", "return", "field_idx2token_tup_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_metric.agg_event_role_tpfpfn_stats": [[8, 86], ["range", "sorted", "list", "enumerate", "enumerate", "list.index", "enumerate", "enumerate", "enumerate", "len", "len", "len", "len", "len", "sum", "max", "zip", "len", "len", "sum", "zip"], "function", ["None"], ["def", "agg_event_role_tpfpfn_stats", "(", "pred_records", ",", "gold_records", ",", "role_num", ")", ":", "\n", "    ", "\"\"\"\n    Aggregate TP,FP,FN statistics for a single event prediction of one instance.\n    A pred_records should be formated as\n    [(Record Index)\n        ((Role Index)\n            argument 1, ...\n        ), ...\n    ], where argument 1 should support the '=' operation and the empty argument is None.\n    \"\"\"", "\n", "role_tpfpfn_stats", "=", "[", "[", "0", "]", "*", "3", "for", "_", "in", "range", "(", "role_num", ")", "]", "\n", "\n", "if", "gold_records", "is", "None", ":", "\n", "        ", "if", "pred_records", "is", "not", "None", ":", "# FP", "\n", "            ", "for", "pred_record", "in", "pred_records", ":", "\n", "                ", "assert", "len", "(", "pred_record", ")", "==", "role_num", "\n", "for", "role_idx", ",", "arg_tup", "in", "enumerate", "(", "pred_record", ")", ":", "\n", "                    ", "if", "arg_tup", "is", "not", "None", ":", "\n", "                        ", "role_tpfpfn_stats", "[", "role_idx", "]", "[", "1", "]", "+=", "1", "\n", "", "", "", "", "else", ":", "# ignore TN", "\n", "            ", "pass", "\n", "", "", "else", ":", "\n", "        ", "if", "pred_records", "is", "None", ":", "# FN", "\n", "            ", "for", "gold_record", "in", "gold_records", ":", "\n", "                ", "assert", "len", "(", "gold_record", ")", "==", "role_num", "\n", "for", "role_idx", ",", "arg_tup", "in", "enumerate", "(", "gold_record", ")", ":", "\n", "                    ", "if", "arg_tup", "is", "not", "None", ":", "\n", "                        ", "role_tpfpfn_stats", "[", "role_idx", "]", "[", "2", "]", "+=", "1", "\n", "", "", "", "", "else", ":", "# True Positive at the event level", "\n", "# sort predicted event records by the non-empty count", "\n", "# to remove the impact of the record order on evaluation", "\n", "            ", "pred_records", "=", "sorted", "(", "pred_records", ",", "\n", "key", "=", "lambda", "x", ":", "sum", "(", "1", "for", "a", "in", "x", "if", "a", "is", "not", "None", ")", ",", "\n", "reverse", "=", "True", ")", "\n", "gold_records", "=", "list", "(", "gold_records", ")", "\n", "\n", "while", "len", "(", "pred_records", ")", ">", "0", "and", "len", "(", "gold_records", ")", ">", "0", ":", "\n", "                ", "pred_record", "=", "pred_records", "[", "0", "]", "\n", "assert", "len", "(", "pred_record", ")", "==", "role_num", "\n", "\n", "# pick the most similar gold record", "\n", "_tmp_key", "=", "lambda", "gr", ":", "sum", "(", "[", "1", "for", "pa", ",", "ga", "in", "zip", "(", "pred_record", ",", "gr", ")", "if", "pa", "==", "ga", "]", ")", "\n", "best_gr_idx", "=", "gold_records", ".", "index", "(", "max", "(", "gold_records", ",", "key", "=", "_tmp_key", ")", ")", "\n", "gold_record", "=", "gold_records", "[", "best_gr_idx", "]", "\n", "\n", "for", "role_idx", ",", "(", "pred_arg", ",", "gold_arg", ")", "in", "enumerate", "(", "zip", "(", "pred_record", ",", "gold_record", ")", ")", ":", "\n", "                    ", "if", "gold_arg", "is", "None", ":", "\n", "                        ", "if", "pred_arg", "is", "not", "None", ":", "# FP at the role level", "\n", "                            ", "role_tpfpfn_stats", "[", "role_idx", "]", "[", "1", "]", "+=", "1", "\n", "", "else", ":", "# ignore TN", "\n", "                            ", "pass", "\n", "", "", "else", ":", "\n", "                        ", "if", "pred_arg", "is", "None", ":", "# FN", "\n", "                            ", "role_tpfpfn_stats", "[", "role_idx", "]", "[", "2", "]", "+=", "1", "\n", "", "else", ":", "\n", "                            ", "if", "pred_arg", "==", "gold_arg", ":", "# TP", "\n", "                                ", "role_tpfpfn_stats", "[", "role_idx", "]", "[", "0", "]", "+=", "1", "\n", "", "else", ":", "\n", "                                ", "role_tpfpfn_stats", "[", "role_idx", "]", "[", "1", "]", "+=", "1", "\n", "role_tpfpfn_stats", "[", "role_idx", "]", "[", "2", "]", "+=", "1", "\n", "\n", "", "", "", "", "del", "pred_records", "[", "0", "]", "\n", "del", "gold_records", "[", "best_gr_idx", "]", "\n", "\n", "# remaining FP", "\n", "", "for", "pred_record", "in", "pred_records", ":", "\n", "                ", "assert", "len", "(", "pred_record", ")", "==", "role_num", "\n", "for", "role_idx", ",", "arg_tup", "in", "enumerate", "(", "pred_record", ")", ":", "\n", "                    ", "if", "arg_tup", "is", "not", "None", ":", "\n", "                        ", "role_tpfpfn_stats", "[", "role_idx", "]", "[", "1", "]", "+=", "1", "\n", "# remaining FN", "\n", "", "", "", "for", "gold_record", "in", "gold_records", ":", "\n", "                ", "assert", "len", "(", "gold_record", ")", "==", "role_num", "\n", "for", "role_idx", ",", "arg_tup", "in", "enumerate", "(", "gold_record", ")", ":", "\n", "                    ", "if", "arg_tup", "is", "not", "None", ":", "\n", "                        ", "role_tpfpfn_stats", "[", "role_idx", "]", "[", "2", "]", "+=", "1", "\n", "\n", "", "", "", "", "", "return", "role_tpfpfn_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_metric.agg_event_level_tpfpfn_stats": [[88, 98], ["dee_metric.agg_event_role_tpfpfn_stats", "list", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_metric.agg_event_role_tpfpfn_stats"], ["", "def", "agg_event_level_tpfpfn_stats", "(", "pred_records", ",", "gold_records", ",", "role_num", ")", ":", "\n", "    ", "\"\"\"\n    Get event-level TP,FP,FN\n    \"\"\"", "\n", "# add role-level statistics as the event-level ones", "\n", "role_tpfpfn_stats", "=", "agg_event_role_tpfpfn_stats", "(", "\n", "pred_records", ",", "gold_records", ",", "role_num", "\n", ")", "\n", "\n", "return", "list", "(", "np", ".", "sum", "(", "role_tpfpfn_stats", ",", "axis", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_metric.agg_ins_event_role_tpfpfn_stats": [[100, 121], ["enumerate", "len", "len", "zip", "dee_metric.agg_event_role_tpfpfn_stats", "event_role_tpfpfn_stats.append"], "function", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_metric.agg_event_role_tpfpfn_stats"], ["", "def", "agg_ins_event_role_tpfpfn_stats", "(", "pred_record_mat", ",", "gold_record_mat", ",", "event_role_num_list", ")", ":", "\n", "    ", "\"\"\"\n    Aggregate TP,FP,FN statistics for a single instance.\n    A record_mat should be formated as\n    [(Event Index)\n        [(Record Index)\n            ((Role Index)\n                argument 1, ...\n            ), ...\n        ], ...\n    ], where argument 1 should support the '=' operation and the empty argument is None.\n    \"\"\"", "\n", "assert", "len", "(", "pred_record_mat", ")", "==", "len", "(", "gold_record_mat", ")", "\n", "# tpfpfn_stat: TP, FP, FN", "\n", "event_role_tpfpfn_stats", "=", "[", "]", "\n", "for", "event_idx", ",", "(", "pred_records", ",", "gold_records", ")", "in", "enumerate", "(", "zip", "(", "pred_record_mat", ",", "gold_record_mat", ")", ")", ":", "\n", "        ", "role_num", "=", "event_role_num_list", "[", "event_idx", "]", "\n", "role_tpfpfn_stats", "=", "agg_event_role_tpfpfn_stats", "(", "pred_records", ",", "gold_records", ",", "role_num", ")", "\n", "event_role_tpfpfn_stats", ".", "append", "(", "role_tpfpfn_stats", ")", "\n", "\n", "", "return", "event_role_tpfpfn_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_metric.agg_ins_event_level_tpfpfn_stats": [[123, 133], ["enumerate", "len", "len", "zip", "dee_metric.agg_event_level_tpfpfn_stats", "event_tpfpfn_stats.append"], "function", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_metric.agg_event_level_tpfpfn_stats"], ["", "def", "agg_ins_event_level_tpfpfn_stats", "(", "pred_record_mat", ",", "gold_record_mat", ",", "event_role_num_list", ")", ":", "\n", "    ", "assert", "len", "(", "pred_record_mat", ")", "==", "len", "(", "gold_record_mat", ")", "\n", "# tpfpfn_stat: TP, FP, FN", "\n", "event_tpfpfn_stats", "=", "[", "]", "\n", "for", "event_idx", ",", "(", "pred_records", ",", "gold_records", ",", "role_num", ")", "in", "enumerate", "(", "zip", "(", "\n", "pred_record_mat", ",", "gold_record_mat", ",", "event_role_num_list", ")", ")", ":", "\n", "        ", "event_tpfpfn", "=", "agg_event_level_tpfpfn_stats", "(", "pred_records", ",", "gold_records", ",", "role_num", ")", "\n", "event_tpfpfn_stats", ".", "append", "(", "event_tpfpfn", ")", "\n", "\n", "", "return", "event_tpfpfn_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_metric.get_prec_recall_f1": [[135, 145], ["None"], "function", ["None"], ["", "def", "get_prec_recall_f1", "(", "tp", ",", "fp", ",", "fn", ")", ":", "\n", "    ", "a", "=", "tp", "+", "fp", "\n", "prec", "=", "tp", "/", "a", "if", "a", ">", "0", "else", "0", "\n", "b", "=", "tp", "+", "fn", "\n", "rec", "=", "tp", "/", "b", "if", "b", ">", "0", "else", "0", "\n", "if", "prec", ">", "0", "and", "rec", ">", "0", ":", "\n", "        ", "f1", "=", "2.0", "/", "(", "1", "/", "prec", "+", "1", "/", "rec", ")", "\n", "", "else", ":", "\n", "        ", "f1", "=", "0", "\n", "", "return", "prec", ",", "rec", ",", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_metric.measure_event_table_filling": [[147, 267], ["zip", "len", "enumerate", "dee_metric.get_prec_recall_f1", "tuple", "event_role_eval_dicts.append", "len", "len", "len", "dee_metric.agg_ins_event_role_tpfpfn_stats", "enumerate", "per_role_metric.append", "range", "range", "dee_metric.get_prec_recall_f1", "tuple", "per_event_metric.append", "event_role_eval_dicts.append", "avg_type.lower", "enumerate", "range", "dee_metric.get_prec_recall_f1", "per_role_metric[].append", "range", "role_eval_dicts.append", "avg_type.lower", "range", "range", "avg_type.lower", "Exception"], "function", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_metric.get_prec_recall_f1", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_metric.agg_ins_event_role_tpfpfn_stats", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_metric.get_prec_recall_f1", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_metric.get_prec_recall_f1"], ["", "def", "measure_event_table_filling", "(", "pred_record_mat_list", ",", "gold_record_mat_list", ",", "event_type_roles_list", ",", "avg_type", "=", "'micro'", ",", "\n", "dict_return", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    The record_mat_list is formated as\n    [(Document Index)\n        [(Event Index)\n            [(Record Index)\n                ((Role Index)\n                    argument 1, ...\n                ), ...\n            ], ...\n        ], ...\n    ]\n    The argument type should support the '==' operation.\n    Empty arguments and records are set as None.\n    \"\"\"", "\n", "event_role_num_list", "=", "[", "len", "(", "roles", ")", "for", "_", ",", "roles", "in", "event_type_roles_list", "]", "\n", "# to store total statistics of TP, FP, FN", "\n", "total_event_role_stats", "=", "[", "\n", "[", "\n", "[", "0", "]", "*", "3", "for", "_", "in", "range", "(", "role_num", ")", "\n", "]", "for", "event_idx", ",", "role_num", "in", "enumerate", "(", "event_role_num_list", ")", "\n", "]", "\n", "\n", "assert", "len", "(", "pred_record_mat_list", ")", "==", "len", "(", "gold_record_mat_list", ")", "\n", "for", "pred_record_mat", ",", "gold_record_mat", "in", "zip", "(", "pred_record_mat_list", ",", "gold_record_mat_list", ")", ":", "\n", "        ", "event_role_tpfpfn_stats", "=", "agg_ins_event_role_tpfpfn_stats", "(", "\n", "pred_record_mat", ",", "gold_record_mat", ",", "event_role_num_list", "\n", ")", "\n", "for", "event_idx", ",", "role_num", "in", "enumerate", "(", "event_role_num_list", ")", ":", "\n", "            ", "for", "role_idx", "in", "range", "(", "role_num", ")", ":", "\n", "                ", "for", "sid", "in", "range", "(", "3", ")", ":", "\n", "                    ", "total_event_role_stats", "[", "event_idx", "]", "[", "role_idx", "]", "[", "sid", "]", "+=", "event_role_tpfpfn_stats", "[", "event_idx", "]", "[", "role_idx", "]", "[", "sid", "]", "\n", "\n", "", "", "", "", "per_role_metric", "=", "[", "]", "\n", "per_event_metric", "=", "[", "]", "\n", "\n", "num_events", "=", "len", "(", "event_role_num_list", ")", "\n", "g_tpfpfn_stat", "=", "[", "0", "]", "*", "3", "\n", "g_prf1_stat", "=", "[", "0", "]", "*", "3", "\n", "event_role_eval_dicts", "=", "[", "]", "\n", "for", "event_idx", ",", "role_num", "in", "enumerate", "(", "event_role_num_list", ")", ":", "\n", "        ", "event_tpfpfn", "=", "[", "0", "]", "*", "3", "# tp, fp, fn", "\n", "event_prf1_stat", "=", "[", "0", "]", "*", "3", "\n", "per_role_metric", ".", "append", "(", "[", "]", ")", "\n", "role_eval_dicts", "=", "[", "]", "\n", "for", "role_idx", "in", "range", "(", "role_num", ")", ":", "\n", "            ", "role_tpfpfn_stat", "=", "total_event_role_stats", "[", "event_idx", "]", "[", "role_idx", "]", "[", ":", "3", "]", "\n", "role_prf1_stat", "=", "get_prec_recall_f1", "(", "*", "role_tpfpfn_stat", ")", "\n", "per_role_metric", "[", "event_idx", "]", ".", "append", "(", "role_prf1_stat", ")", "\n", "for", "mid", "in", "range", "(", "3", ")", ":", "\n", "                ", "event_tpfpfn", "[", "mid", "]", "+=", "role_tpfpfn_stat", "[", "mid", "]", "\n", "event_prf1_stat", "[", "mid", "]", "+=", "role_prf1_stat", "[", "mid", "]", "\n", "\n", "", "role_eval_dict", "=", "{", "\n", "'RoleType'", ":", "event_type_roles_list", "[", "event_idx", "]", "[", "1", "]", "[", "role_idx", "]", ",", "\n", "'Precision'", ":", "role_prf1_stat", "[", "0", "]", ",", "\n", "'Recall'", ":", "role_prf1_stat", "[", "1", "]", ",", "\n", "'F1'", ":", "role_prf1_stat", "[", "2", "]", ",", "\n", "'TP'", ":", "role_tpfpfn_stat", "[", "0", "]", ",", "\n", "'FP'", ":", "role_tpfpfn_stat", "[", "1", "]", ",", "\n", "'FN'", ":", "role_tpfpfn_stat", "[", "2", "]", "\n", "}", "\n", "role_eval_dicts", ".", "append", "(", "role_eval_dict", ")", "\n", "\n", "", "for", "mid", "in", "range", "(", "3", ")", ":", "\n", "            ", "event_prf1_stat", "[", "mid", "]", "/=", "role_num", "\n", "g_tpfpfn_stat", "[", "mid", "]", "+=", "event_tpfpfn", "[", "mid", "]", "\n", "g_prf1_stat", "[", "mid", "]", "+=", "event_prf1_stat", "[", "mid", "]", "\n", "\n", "", "micro_event_prf1", "=", "get_prec_recall_f1", "(", "*", "event_tpfpfn", ")", "\n", "macro_event_prf1", "=", "tuple", "(", "event_prf1_stat", ")", "\n", "if", "avg_type", ".", "lower", "(", ")", "==", "'micro'", ":", "\n", "            ", "event_prf1_stat", "=", "micro_event_prf1", "\n", "", "elif", "avg_type", ".", "lower", "(", ")", "==", "'macro'", ":", "\n", "            ", "event_prf1_stat", "=", "macro_event_prf1", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Unsupported average type {}'", ".", "format", "(", "avg_type", ")", ")", "\n", "\n", "", "per_event_metric", ".", "append", "(", "event_prf1_stat", ")", "\n", "\n", "event_eval_dict", "=", "{", "\n", "'EventType'", ":", "event_type_roles_list", "[", "event_idx", "]", "[", "0", "]", ",", "\n", "'MacroPrecision'", ":", "macro_event_prf1", "[", "0", "]", ",", "\n", "'MacroRecall'", ":", "macro_event_prf1", "[", "1", "]", ",", "\n", "'MacroF1'", ":", "macro_event_prf1", "[", "2", "]", ",", "\n", "'MicroPrecision'", ":", "micro_event_prf1", "[", "0", "]", ",", "\n", "'MicroRecall'", ":", "micro_event_prf1", "[", "1", "]", ",", "\n", "'MicroF1'", ":", "micro_event_prf1", "[", "2", "]", ",", "\n", "'TP'", ":", "event_tpfpfn", "[", "0", "]", ",", "\n", "'FP'", ":", "event_tpfpfn", "[", "1", "]", ",", "\n", "'FN'", ":", "event_tpfpfn", "[", "2", "]", ",", "\n", "}", "\n", "event_role_eval_dicts", ".", "append", "(", "(", "event_eval_dict", ",", "role_eval_dicts", ")", ")", "\n", "\n", "", "micro_g_prf1", "=", "get_prec_recall_f1", "(", "*", "g_tpfpfn_stat", ")", "\n", "macro_g_prf1", "=", "tuple", "(", "s", "/", "num_events", "for", "s", "in", "g_prf1_stat", ")", "\n", "if", "avg_type", ".", "lower", "(", ")", "==", "'micro'", ":", "\n", "        ", "g_metric", "=", "micro_g_prf1", "\n", "", "else", ":", "\n", "        ", "g_metric", "=", "macro_g_prf1", "\n", "\n", "", "g_eval_dict", "=", "{", "\n", "'MacroPrecision'", ":", "macro_g_prf1", "[", "0", "]", ",", "\n", "'MacroRecall'", ":", "macro_g_prf1", "[", "1", "]", ",", "\n", "'MacroF1'", ":", "macro_g_prf1", "[", "2", "]", ",", "\n", "'MicroPrecision'", ":", "micro_g_prf1", "[", "0", "]", ",", "\n", "'MicroRecall'", ":", "micro_g_prf1", "[", "1", "]", ",", "\n", "'MicroF1'", ":", "micro_g_prf1", "[", "2", "]", ",", "\n", "'TP'", ":", "g_tpfpfn_stat", "[", "0", "]", ",", "\n", "'FP'", ":", "g_tpfpfn_stat", "[", "1", "]", ",", "\n", "'FN'", ":", "g_tpfpfn_stat", "[", "2", "]", ",", "\n", "}", "\n", "event_role_eval_dicts", ".", "append", "(", "g_eval_dict", ")", "\n", "\n", "if", "not", "dict_return", ":", "\n", "        ", "return", "g_metric", ",", "per_event_metric", ",", "per_role_metric", "\n", "", "else", ":", "\n", "        ", "return", "event_role_eval_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.NERExample.__init__": [[24, 29], ["len", "sorted"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "guid", ",", "text", ",", "entity_range_span_types", ")", ":", "\n", "        ", "self", ".", "guid", "=", "guid", "\n", "self", ".", "text", "=", "text", "\n", "self", ".", "num_chars", "=", "len", "(", "text", ")", "\n", "self", ".", "entity_range_span_types", "=", "sorted", "(", "entity_range_span_types", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.NERExample.get_char_entity_labels": [[30, 58], ["char_entity_labels.extend", "len", "len", "char_entity_labels.append", "char_entity_labels.extend", "logger.error", "logger.error", "logger.error", "logger.error", "Exception"], "methods", ["None"], ["", "def", "get_char_entity_labels", "(", "self", ")", ":", "\n", "        ", "char_entity_labels", "=", "[", "]", "\n", "char_idx", "=", "0", "\n", "ent_idx", "=", "0", "\n", "while", "ent_idx", "<", "len", "(", "self", ".", "entity_range_span_types", ")", ":", "\n", "            ", "(", "ent_cid_s", ",", "ent_cid_e", ")", ",", "ent_span", ",", "ent_type", "=", "self", ".", "entity_range_span_types", "[", "ent_idx", "]", "\n", "assert", "ent_cid_s", "<", "ent_cid_e", "<=", "self", ".", "num_chars", "\n", "\n", "if", "ent_cid_s", ">", "char_idx", ":", "\n", "                ", "char_entity_labels", ".", "append", "(", "NERExample", ".", "basic_entity_label", ")", "\n", "char_idx", "+=", "1", "\n", "", "elif", "ent_cid_s", "==", "char_idx", ":", "\n", "# tmp_ent_labels = [ent_type] * (ent_cid_e - ent_cid_s)", "\n", "                ", "tmp_ent_labels", "=", "[", "'B-'", "+", "ent_type", "]", "+", "[", "'I-'", "+", "ent_type", "]", "*", "(", "ent_cid_e", "-", "ent_cid_s", "-", "1", ")", "\n", "char_entity_labels", ".", "extend", "(", "tmp_ent_labels", ")", "\n", "char_idx", "=", "ent_cid_e", "\n", "ent_idx", "+=", "1", "\n", "", "else", ":", "\n", "                ", "logger", ".", "error", "(", "'Example GUID {}'", ".", "format", "(", "self", ".", "guid", ")", ")", "\n", "logger", ".", "error", "(", "'NER conflicts at char_idx {}, ent_cid_s {}'", ".", "format", "(", "char_idx", ",", "ent_cid_s", ")", ")", "\n", "logger", ".", "error", "(", "self", ".", "text", "[", "char_idx", "-", "20", ":", "char_idx", "+", "20", "]", ")", "\n", "logger", ".", "error", "(", "self", ".", "entity_range_span_types", "[", "ent_idx", "-", "1", ":", "ent_idx", "+", "1", "]", ")", "\n", "raise", "Exception", "(", "'Unexpected logic error'", ")", "\n", "\n", "", "", "char_entity_labels", ".", "extend", "(", "[", "NERExample", ".", "basic_entity_label", "]", "*", "(", "self", ".", "num_chars", "-", "char_idx", ")", ")", "\n", "assert", "len", "(", "char_entity_labels", ")", "==", "self", ".", "num_chars", "\n", "\n", "return", "char_entity_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.NERExample.get_entity_label_list": [[59, 76], ["set", "set.add", "entity_label_list.extend", "set.add", "entity_label_list.extend"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_entity_label_list", "(", ")", ":", "\n", "        ", "visit_set", "=", "set", "(", ")", "\n", "entity_label_list", "=", "[", "NERExample", ".", "basic_entity_label", "]", "\n", "\n", "for", "field", "in", "common_fields", ":", "\n", "            ", "if", "field", "not", "in", "visit_set", ":", "\n", "                ", "visit_set", ".", "add", "(", "field", ")", "\n", "entity_label_list", ".", "extend", "(", "[", "'B-'", "+", "field", ",", "'I-'", "+", "field", "]", ")", "\n", "\n", "", "", "for", "event_name", ",", "fields", "in", "event_type_fields_list", ":", "\n", "            ", "for", "field", "in", "fields", ":", "\n", "                ", "if", "field", "not", "in", "visit_set", ":", "\n", "                    ", "visit_set", ".", "add", "(", "field", ")", "\n", "entity_label_list", ".", "extend", "(", "[", "'B-'", "+", "field", ",", "'I-'", "+", "field", "]", ")", "\n", "\n", "", "", "", "return", "entity_label_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.NERExample.__repr__": [[77, 82], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "ex_str", "=", "'NERExample(guid={}, text={}, entity_info={}'", ".", "format", "(", "\n", "self", ".", "guid", ",", "self", ".", "text", ",", "str", "(", "self", ".", "entity_range_span_types", ")", "\n", ")", "\n", "return", "ex_str", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.NERFeature.__init__": [[125, 131], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_ids", ",", "input_masks", ",", "segment_ids", ",", "label_ids", ",", "seq_len", "=", "None", ")", ":", "\n", "        ", "self", ".", "input_ids", "=", "input_ids", "\n", "self", ".", "input_masks", "=", "input_masks", "\n", "self", ".", "segment_ids", "=", "segment_ids", "\n", "self", ".", "label_ids", "=", "label_ids", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.NERFeature.__repr__": [[132, 155], ["fea_strs.append", "zip", "fea_strs.append", "fea_strs.append", "info_template.format", "fea_strs.append", "info_template.format", "info_template.format"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fea_strs", "=", "[", "'NERFeature(real_seq_len={}'", ".", "format", "(", "self", ".", "seq_len", ")", ",", "]", "\n", "info_template", "=", "'  {:5} {:9} {:5} {:7} {:7}'", "\n", "fea_strs", ".", "append", "(", "info_template", ".", "format", "(", "\n", "'index'", ",", "'input_ids'", ",", "'masks'", ",", "'seg_ids'", ",", "'lbl_ids'", "\n", ")", ")", "\n", "max_print_len", "=", "10", "\n", "idx", "=", "0", "\n", "for", "tid", ",", "mask", ",", "segid", ",", "lid", "in", "zip", "(", "\n", "self", ".", "input_ids", ",", "self", ".", "input_masks", ",", "self", ".", "segment_ids", ",", "self", ".", "label_ids", ")", ":", "\n", "            ", "fea_strs", ".", "append", "(", "info_template", ".", "format", "(", "\n", "idx", ",", "tid", ",", "mask", ",", "segid", ",", "lid", "\n", ")", ")", "\n", "idx", "+=", "1", "\n", "if", "idx", ">=", "max_print_len", ":", "\n", "                ", "break", "\n", "", "", "fea_strs", ".", "append", "(", "info_template", ".", "format", "(", "\n", "'...'", ",", "'...'", ",", "'...'", ",", "'...'", ",", "'...'", "\n", ")", ")", "\n", "fea_strs", ".", "append", "(", "')'", ")", "\n", "\n", "fea_str", "=", "'\\n'", ".", "join", "(", "fea_strs", ")", "\n", "return", "fea_str", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.NERFeatureConverter.__init__": [[158, 173], ["enumerate"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "entity_label_list", ",", "max_seq_len", ",", "tokenizer", ",", "include_cls", "=", "True", ",", "include_sep", "=", "True", ")", ":", "\n", "        ", "self", ".", "entity_label_list", "=", "entity_label_list", "\n", "self", ".", "max_seq_len", "=", "max_seq_len", "# used to normalize sequence length", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "entity_label2index", "=", "{", "# for entity label to label index mapping", "\n", "entity_label", ":", "idx", "for", "idx", ",", "entity_label", "in", "enumerate", "(", "self", ".", "entity_label_list", ")", "\n", "}", "\n", "\n", "self", ".", "include_cls", "=", "include_cls", "\n", "self", ".", "include_sep", "=", "include_sep", "\n", "\n", "# used to track how many examples have been truncated", "\n", "self", ".", "truncate_count", "=", "0", "\n", "# used to track the maximum length of input sentences", "\n", "self", ".", "data_max_seq_len", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.NERFeatureConverter.convert_example_to_feature": [[174, 257], ["ner_task.NERFeatureConverter.tokenizer.char_tokenize", "ner_example.get_char_entity_labels", "max", "zip", "ner_task.NERFeatureConverter.tokenizer.convert_tokens_to_ids", "len", "ner_task.NERFeature", "len", "len", "len", "len", "fea_tokens.append", "fea_token_labels.append", "fea_tokens.append", "fea_token_labels.append", "fea_label_ids.append", "len", "len", "len", "len", "ner_task.NERFeatureConverter.append", "fea_label_ids.append", "fea_masks.append", "fea_segment_ids.append", "len", "len", "len", "len", "logger.info", "logger.info", "logger.info", "zip", "fea_label_ids.append", "fea_label_ids.append", "info_template.format", "logger.info", "len", "len", "len", "logger.info", "info_template.format", "info_template.format", "len", "len"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.BERTChineseCharacterTokenizer.char_tokenize", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.NERExample.get_char_entity_labels"], ["", "def", "convert_example_to_feature", "(", "self", ",", "ner_example", ",", "log_flag", "=", "False", ")", ":", "\n", "        ", "ex_tokens", "=", "self", ".", "tokenizer", ".", "char_tokenize", "(", "ner_example", ".", "text", ")", "\n", "ex_entity_labels", "=", "ner_example", ".", "get_char_entity_labels", "(", ")", "\n", "\n", "assert", "len", "(", "ex_tokens", ")", "==", "len", "(", "ex_entity_labels", ")", "\n", "\n", "# get valid token sequence length", "\n", "valid_token_len", "=", "self", ".", "max_seq_len", "\n", "if", "self", ".", "include_cls", ":", "\n", "            ", "valid_token_len", "-=", "1", "\n", "", "if", "self", ".", "include_sep", ":", "\n", "            ", "valid_token_len", "-=", "1", "\n", "\n", "# truncate according to max_seq_len and record some statistics", "\n", "", "self", ".", "data_max_seq_len", "=", "max", "(", "self", ".", "data_max_seq_len", ",", "len", "(", "ex_tokens", ")", ")", "\n", "if", "len", "(", "ex_tokens", ")", ">", "valid_token_len", ":", "\n", "            ", "ex_tokens", "=", "ex_tokens", "[", ":", "valid_token_len", "]", "\n", "ex_entity_labels", "=", "ex_entity_labels", "[", ":", "valid_token_len", "]", "\n", "\n", "self", ".", "truncate_count", "+=", "1", "\n", "\n", "", "basic_label_index", "=", "self", ".", "entity_label2index", "[", "NERExample", ".", "basic_entity_label", "]", "\n", "\n", "# add bert-specific token", "\n", "if", "self", ".", "include_cls", ":", "\n", "            ", "fea_tokens", "=", "[", "'[CLS]'", "]", "\n", "fea_token_labels", "=", "[", "NERExample", ".", "basic_entity_label", "]", "\n", "fea_label_ids", "=", "[", "basic_label_index", "]", "\n", "", "else", ":", "\n", "            ", "fea_tokens", "=", "[", "]", "\n", "fea_token_labels", "=", "[", "]", "\n", "fea_label_ids", "=", "[", "]", "\n", "\n", "", "for", "token", ",", "ent_label", "in", "zip", "(", "ex_tokens", ",", "ex_entity_labels", ")", ":", "\n", "            ", "fea_tokens", ".", "append", "(", "token", ")", "\n", "fea_token_labels", ".", "append", "(", "ent_label", ")", "\n", "\n", "if", "ent_label", "in", "self", ".", "entity_label2index", ":", "\n", "                ", "fea_label_ids", ".", "append", "(", "self", ".", "entity_label2index", "[", "ent_label", "]", ")", "\n", "", "else", ":", "\n", "                ", "fea_label_ids", ".", "append", "(", "basic_label_index", ")", "\n", "\n", "", "", "if", "self", ".", "include_sep", ":", "\n", "            ", "fea_tokens", ".", "append", "(", "'[SEP]'", ")", "\n", "fea_token_labels", ".", "append", "(", "NERExample", ".", "basic_entity_label", ")", "\n", "fea_label_ids", ".", "append", "(", "basic_label_index", ")", "\n", "\n", "", "assert", "len", "(", "fea_tokens", ")", "==", "len", "(", "fea_token_labels", ")", "==", "len", "(", "fea_label_ids", ")", "<=", "self", ".", "max_seq_len", "\n", "\n", "fea_input_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "fea_tokens", ")", "\n", "fea_seq_len", "=", "len", "(", "fea_input_ids", ")", "\n", "fea_segment_ids", "=", "[", "0", "]", "*", "fea_seq_len", "\n", "fea_masks", "=", "[", "1", "]", "*", "fea_seq_len", "\n", "\n", "# feature is padded to max_seq_len, but fea_seq_len is the real length", "\n", "while", "len", "(", "fea_input_ids", ")", "<", "self", ".", "max_seq_len", ":", "\n", "            ", "fea_input_ids", ".", "append", "(", "0", ")", "\n", "fea_label_ids", ".", "append", "(", "0", ")", "\n", "fea_masks", ".", "append", "(", "0", ")", "\n", "fea_segment_ids", ".", "append", "(", "0", ")", "\n", "\n", "", "assert", "len", "(", "fea_input_ids", ")", "==", "len", "(", "fea_label_ids", ")", "==", "len", "(", "fea_masks", ")", "==", "len", "(", "fea_segment_ids", ")", "==", "self", ".", "max_seq_len", "\n", "\n", "if", "log_flag", ":", "\n", "            ", "logger", ".", "info", "(", "\"*** Example ***\"", ")", "\n", "logger", ".", "info", "(", "\"guid: %s\"", "%", "ner_example", ".", "guid", ")", "\n", "info_template", "=", "'{:8} {:4} {:2} {:2} {:2} {}'", "\n", "logger", ".", "info", "(", "info_template", ".", "format", "(", "\n", "'TokenId'", ",", "'Token'", ",", "'Mask'", ",", "'SegId'", ",", "'LabelId'", ",", "'Label'", "\n", ")", ")", "\n", "for", "tid", ",", "token", ",", "mask", ",", "segid", ",", "lid", ",", "label", "in", "zip", "(", "\n", "fea_input_ids", ",", "fea_tokens", ",", "fea_masks", ",", "\n", "fea_segment_ids", ",", "fea_label_ids", ",", "fea_token_labels", ")", ":", "\n", "                ", "logger", ".", "info", "(", "info_template", ".", "format", "(", "\n", "tid", ",", "token", ",", "mask", ",", "segid", ",", "lid", ",", "label", "\n", ")", ")", "\n", "", "if", "len", "(", "fea_input_ids", ")", ">", "len", "(", "fea_tokens", ")", ":", "\n", "                ", "sid", "=", "len", "(", "fea_tokens", ")", "\n", "logger", ".", "info", "(", "info_template", ".", "format", "(", "\n", "fea_input_ids", "[", "sid", "]", ",", "'[PAD]'", ",", "fea_masks", "[", "sid", "]", ",", "fea_segment_ids", "[", "sid", "]", ",", "fea_label_ids", "[", "sid", "]", ",", "'O'", ")", "\n", "+", "' x {}'", ".", "format", "(", "len", "(", "fea_input_ids", ")", "-", "len", "(", "fea_tokens", ")", ")", ")", "\n", "\n", "", "", "return", "NERFeature", "(", "fea_input_ids", ",", "fea_masks", ",", "fea_segment_ids", ",", "fea_label_ids", ",", "seq_len", "=", "fea_seq_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.NERFeatureConverter.__call__": [[258, 277], ["enumerate", "logger.info", "ner_features.append", "ner_task.NERFeatureConverter.convert_example_to_feature", "ner_task.NERFeatureConverter.convert_example_to_feature", "len"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEFeatureConverter.convert_example_to_feature", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEFeatureConverter.convert_example_to_feature"], ["", "def", "__call__", "(", "self", ",", "ner_examples", ",", "log_example_num", "=", "0", ")", ":", "\n", "        ", "\"\"\"Convert examples to features suitable for ner models\"\"\"", "\n", "self", ".", "truncate_count", "=", "0", "\n", "self", ".", "data_max_seq_len", "=", "-", "1", "\n", "ner_features", "=", "[", "]", "\n", "\n", "for", "ex_index", ",", "ner_example", "in", "enumerate", "(", "ner_examples", ")", ":", "\n", "            ", "if", "ex_index", "<", "log_example_num", ":", "\n", "                ", "ner_feature", "=", "self", ".", "convert_example_to_feature", "(", "ner_example", ",", "log_flag", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "ner_feature", "=", "self", ".", "convert_example_to_feature", "(", "ner_example", ",", "log_flag", "=", "False", ")", "\n", "\n", "", "ner_features", ".", "append", "(", "ner_feature", ")", "\n", "\n", "", "logger", ".", "info", "(", "'{} examples in total, {} truncated example, max_sent_len={}'", ".", "format", "(", "\n", "len", "(", "ner_examples", ")", ",", "self", ".", "truncate_count", ",", "self", ".", "data_max_seq_len", "\n", ")", ")", "\n", "\n", "return", "ner_features", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.NERTaskSetting.__init__": [[292, 316], ["base_task.TaskSetting.__init__"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "ner_key_attrs", "=", "[", "]", "\n", "ner_attr_default_pairs", "=", "[", "\n", "(", "'bert_model'", ",", "'bert-base-chinese'", ")", ",", "\n", "(", "'train_file_name'", ",", "'train.json'", ")", ",", "\n", "(", "'dev_file_name'", ",", "'dev.json'", ")", ",", "\n", "(", "'test_file_name'", ",", "'test.json'", ")", ",", "\n", "(", "'max_seq_len'", ",", "128", ")", ",", "\n", "(", "'train_batch_size'", ",", "32", ")", ",", "\n", "(", "'eval_batch_size'", ",", "256", ")", ",", "\n", "(", "'learning_rate'", ",", "2e-5", ")", ",", "\n", "(", "'num_train_epochs'", ",", "3.0", ")", ",", "\n", "(", "'warmup_proportion'", ",", "0.1", ")", ",", "\n", "(", "'no_cuda'", ",", "False", ")", ",", "\n", "(", "'local_rank'", ",", "-", "1", ")", ",", "\n", "(", "'seed'", ",", "99", ")", ",", "\n", "(", "'gradient_accumulation_steps'", ",", "1", ")", ",", "\n", "(", "'optimize_on_cpu'", ",", "True", ")", ",", "\n", "(", "'fp16'", ",", "False", ")", ",", "\n", "(", "'loss_scale'", ",", "128", ")", ",", "\n", "(", "'cpt_file_name'", ",", "'ner_task.cpt'", ")", ",", "\n", "(", "'summary_dir_name'", ",", "'/tmp/summary'", ")", ",", "\n", "]", "\n", "super", "(", "NERTaskSetting", ",", "self", ")", ".", "__init__", "(", "ner_key_attrs", ",", "ner_attr_default_pairs", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.NERTask.__init__": [[321, 359], ["base_task.BasePytorchTask.__init__", "logging.getLogger", "ner_task.NERTask.logging", "ner_task.NERExample.get_entity_label_list", "utils.BERTChineseCharacterTokenizer.from_pretrained", "ner_task.NERFeatureConverter", "ner_task.NERTask._load_data", "ner_task.NERTask.logging", "ner_model.BertForBasicNER.from_pretrained", "ner_task.NERTask.setting.update_by_dict", "ner_task.NERTask._decorate_model", "ner_task.NERTask._init_bert_optimizer", "ner_task.NERTask.resume_checkpoint", "len"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEExample.get_entity_label_list", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask._load_data", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.TaskSetting.update_by_dict", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask._decorate_model", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask._init_bert_optimizer", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.resume_checkpoint"], ["def", "__init__", "(", "self", ",", "setting", ",", "\n", "load_train", "=", "True", ",", "load_dev", "=", "True", ",", "load_test", "=", "True", ",", "\n", "build_model", "=", "True", ",", "parallel_decorate", "=", "True", ",", "\n", "resume_model", "=", "False", ",", "resume_optimizer", "=", "False", ")", ":", "\n", "        ", "super", "(", "NERTask", ",", "self", ")", ".", "__init__", "(", "setting", ")", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "self", ".", "logging", "(", "'Initializing {}'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n", "# initialize entity label list", "\n", "self", ".", "entity_label_list", "=", "NERExample", ".", "get_entity_label_list", "(", ")", "\n", "# initialize tokenizer", "\n", "self", ".", "tokenizer", "=", "BERTChineseCharacterTokenizer", ".", "from_pretrained", "(", "self", ".", "setting", ".", "bert_model", ")", "\n", "# initialize feature converter", "\n", "self", ".", "feature_converter_func", "=", "NERFeatureConverter", "(", "\n", "self", ".", "entity_label_list", ",", "self", ".", "setting", ".", "max_seq_len", ",", "self", ".", "tokenizer", "\n", ")", "\n", "\n", "# load data", "\n", "self", ".", "_load_data", "(", "\n", "load_ner_dataset", ",", "self", ".", "feature_converter_func", ",", "convert_ner_features_to_dataset", ",", "\n", "load_train", "=", "load_train", ",", "load_dev", "=", "load_dev", ",", "load_test", "=", "load_test", "\n", ")", "\n", "\n", "# build model", "\n", "if", "build_model", ":", "\n", "            ", "self", ".", "model", "=", "BertForBasicNER", ".", "from_pretrained", "(", "self", ".", "setting", ".", "bert_model", ",", "len", "(", "self", ".", "entity_label_list", ")", ")", "\n", "self", ".", "setting", ".", "update_by_dict", "(", "self", ".", "model", ".", "config", ".", "__dict__", ")", "# BertConfig dictionary", "\n", "self", ".", "_decorate_model", "(", "parallel_decorate", "=", "parallel_decorate", ")", "\n", "\n", "# prepare optimizer", "\n", "", "if", "build_model", "and", "load_train", ":", "\n", "            ", "self", ".", "_init_bert_optimizer", "(", ")", "\n", "\n", "# resume option", "\n", "", "if", "build_model", "and", "(", "resume_model", "or", "resume_optimizer", ")", ":", "\n", "            ", "self", ".", "resume_checkpoint", "(", "resume_model", "=", "resume_model", ",", "resume_optimizer", "=", "resume_optimizer", ")", "\n", "\n", "", "self", ".", "logging", "(", "'Successfully initialize {}'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.NERTask.reload_data": [[360, 370], ["super().reload_data"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.reload_data"], ["", "def", "reload_data", "(", "self", ",", "data_type", "=", "'return'", ",", "file_name", "=", "None", ",", "file_path", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Either file_name or file_path needs to be provided,\n            data_type: return (default), return (examples, features, dataset)\n                       train, override self.train_xxx\n                       dev, override self.dev_xxx\n                       test, override self.test_xxx\n        \"\"\"", "\n", "return", "super", "(", "NERTask", ",", "self", ")", ".", "reload_data", "(", "\n", "load_ner_dataset", ",", "self", ".", "feature_converter_func", ",", "convert_ner_features_to_dataset", ",", "\n", "data_type", "=", "data_type", ",", "file_name", "=", "file_name", ",", "file_path", "=", "file_path", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.NERTask.train": [[372, 375], ["ner_task.NERTask.logging", "ner_task.NERTask.base_train"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.base_train"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "logging", "(", "'='", "*", "20", "+", "'Start Training'", "+", "'='", "*", "20", ")", "\n", "self", ".", "base_train", "(", "get_ner_loss_on_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.NERTask.eval": [[376, 472], ["ner_task.NERTask.logging", "ner_task.NERTask.get_total_prediction", "ner_task.NERTask.size", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "range", "range", "ner_task.NERTask.logging", "ner_model.judge_ner_prediction", "len", "ent_label_eval_infos.append", "os.path.join", "ner_task.NERTask.logging", "utils.default_dump_json", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.NERTask.get_total_prediction", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_model.judge_ner_prediction", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.default_dump_json"], ["", "def", "eval", "(", "self", ",", "eval_dataset", ",", "eval_save_prefix", "=", "''", ",", "pgm_return_flag", "=", "False", ")", ":", "\n", "        ", "self", ".", "logging", "(", "'='", "*", "20", "+", "'Start Evaluation'", "+", "'='", "*", "20", ")", "\n", "# 1. get total prediction info", "\n", "# pgm denotes (pred_label, gold_label, token_mask)", "\n", "# size = [num_examples, max_seq_len, 3]", "\n", "# value = [[(pred_label, gold_label, token_mask), ...], ...]", "\n", "total_seq_pgm", "=", "self", ".", "get_total_prediction", "(", "eval_dataset", ")", "\n", "num_examples", ",", "max_seq_len", ",", "_", "=", "total_seq_pgm", ".", "size", "(", ")", "\n", "\n", "# 2. collect per-entity-label tp, fp, fn counts", "\n", "ent_lid2tp_cnt", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "ent_lid2fp_cnt", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "ent_lid2fn_cnt", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "for", "bid", "in", "range", "(", "num_examples", ")", ":", "\n", "            ", "seq_pgm", "=", "total_seq_pgm", "[", "bid", "]", "# [max_seq_len, 3]", "\n", "seq_pred", "=", "seq_pgm", "[", ":", ",", "0", "]", "# [max_seq_len]", "\n", "seq_gold", "=", "seq_pgm", "[", ":", ",", "1", "]", "\n", "seq_mask", "=", "seq_pgm", "[", ":", ",", "2", "]", "\n", "\n", "seq_pred_lid", "=", "seq_pred", "[", "seq_mask", "==", "1", "]", "# [seq_len]", "\n", "seq_gold_lid", "=", "seq_gold", "[", "seq_mask", "==", "1", "]", "\n", "ner_tp_set", ",", "ner_fp_set", ",", "ner_fn_set", "=", "judge_ner_prediction", "(", "seq_pred_lid", ",", "seq_gold_lid", ")", "\n", "for", "ent_lid2cnt", ",", "ex_ner_set", "in", "[", "\n", "(", "ent_lid2tp_cnt", ",", "ner_tp_set", ")", ",", "\n", "(", "ent_lid2fp_cnt", ",", "ner_fp_set", ")", ",", "\n", "(", "ent_lid2fn_cnt", ",", "ner_fn_set", ")", "\n", "]", ":", "\n", "                ", "for", "ent_idx_s", ",", "ent_idx_e", ",", "ent_lid", "in", "ex_ner_set", ":", "\n", "                    ", "ent_lid2cnt", "[", "ent_lid", "]", "+=", "1", "\n", "\n", "# 3. calculate per-entity-label metrics and collect global counts", "\n", "", "", "", "ent_label_eval_infos", "=", "[", "]", "\n", "g_ner_tp_cnt", "=", "0", "\n", "g_ner_fp_cnt", "=", "0", "\n", "g_ner_fn_cnt", "=", "0", "\n", "# Entity Label Id, 0 for others, odd for BEGIN-ENTITY, even for INSIDE-ENTITY", "\n", "# using odd is enough to represent the entity type", "\n", "for", "ent_lid", "in", "range", "(", "1", ",", "len", "(", "self", ".", "entity_label_list", ")", ",", "2", ")", ":", "\n", "            ", "el_name", "=", "self", ".", "entity_label_list", "[", "ent_lid", "]", "\n", "el_tp_cnt", ",", "el_fp_cnt", ",", "el_fn_cnt", "=", "ent_lid2tp_cnt", "[", "ent_lid", "]", ",", "ent_lid2fp_cnt", "[", "ent_lid", "]", ",", "ent_lid2fn_cnt", "[", "ent_lid", "]", "\n", "\n", "el_pred_cnt", "=", "el_tp_cnt", "+", "el_fp_cnt", "\n", "el_gold_cnt", "=", "el_tp_cnt", "+", "el_fn_cnt", "\n", "el_prec", "=", "el_tp_cnt", "/", "el_pred_cnt", "if", "el_pred_cnt", ">", "0", "else", "0", "\n", "el_recall", "=", "el_tp_cnt", "/", "el_gold_cnt", "if", "el_gold_cnt", ">", "0", "else", "0", "\n", "el_f1", "=", "2", "/", "(", "1", "/", "el_prec", "+", "1", "/", "el_recall", ")", "if", "el_prec", ">", "EPS", "and", "el_recall", ">", "EPS", "else", "0", "\n", "\n", "# per-entity-label evaluation info", "\n", "el_eval_info", "=", "{", "\n", "'entity_label_indexes'", ":", "(", "ent_lid", ",", "ent_lid", "+", "1", ")", ",", "\n", "'entity_label'", ":", "el_name", "[", "2", ":", "]", ",", "# omit 'B-' prefix", "\n", "'ner_tp_cnt'", ":", "el_tp_cnt", ",", "\n", "'ner_fp_cnt'", ":", "el_fp_cnt", ",", "\n", "'ner_fn_cnt'", ":", "el_fn_cnt", ",", "\n", "'ner_prec'", ":", "el_prec", ",", "\n", "'ner_recall'", ":", "el_recall", ",", "\n", "'ner_f1'", ":", "el_f1", ",", "\n", "}", "\n", "ent_label_eval_infos", ".", "append", "(", "el_eval_info", ")", "\n", "\n", "# collect global count info", "\n", "g_ner_tp_cnt", "+=", "el_tp_cnt", "\n", "g_ner_fp_cnt", "+=", "el_fp_cnt", "\n", "g_ner_fn_cnt", "+=", "el_fn_cnt", "\n", "\n", "# 4. summarize total evaluation info", "\n", "", "g_ner_pred_cnt", "=", "g_ner_tp_cnt", "+", "g_ner_fp_cnt", "\n", "g_ner_gold_cnt", "=", "g_ner_tp_cnt", "+", "g_ner_fn_cnt", "\n", "g_ner_prec", "=", "g_ner_tp_cnt", "/", "g_ner_pred_cnt", "if", "g_ner_pred_cnt", ">", "0", "else", "0", "\n", "g_ner_recall", "=", "g_ner_tp_cnt", "/", "g_ner_gold_cnt", "if", "g_ner_gold_cnt", ">", "0", "else", "0", "\n", "g_ner_f1", "=", "2", "/", "(", "1", "/", "g_ner_prec", "+", "1", "/", "g_ner_recall", ")", "if", "g_ner_prec", ">", "EPS", "and", "g_ner_recall", ">", "EPS", "else", "0", "\n", "\n", "total_eval_info", "=", "{", "\n", "'eval_name'", ":", "eval_save_prefix", ",", "\n", "'num_examples'", ":", "num_examples", ",", "\n", "'ner_tp_cnt'", ":", "g_ner_tp_cnt", ",", "\n", "'ner_fp_cnt'", ":", "g_ner_fp_cnt", ",", "\n", "'ner_fn_cnt'", ":", "g_ner_fn_cnt", ",", "\n", "'ner_prec'", ":", "g_ner_prec", ",", "\n", "'ner_recall'", ":", "g_ner_recall", ",", "\n", "'ner_f1'", ":", "g_ner_f1", ",", "\n", "'per_ent_label_eval'", ":", "ent_label_eval_infos", "\n", "}", "\n", "\n", "self", ".", "logging", "(", "'Evaluation Results\\n{:.300s} ...'", ".", "format", "(", "json", ".", "dumps", "(", "total_eval_info", ",", "indent", "=", "4", ")", ")", ")", "\n", "\n", "if", "eval_save_prefix", ":", "\n", "            ", "eval_res_fp", "=", "os", ".", "path", ".", "join", "(", "self", ".", "setting", ".", "output_dir", ",", "\n", "'{}.eval'", ".", "format", "(", "eval_save_prefix", ")", ")", "\n", "self", ".", "logging", "(", "'Dump eval results into {}'", ".", "format", "(", "eval_res_fp", ")", ")", "\n", "default_dump_json", "(", "total_eval_info", ",", "eval_res_fp", ")", "\n", "\n", "", "if", "pgm_return_flag", ":", "\n", "            ", "return", "total_seq_pgm", "\n", "", "else", ":", "\n", "            ", "return", "total_eval_info", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.NERTask.get_total_prediction": [[473, 482], ["ner_task.NERTask.logging", "ner_task.NERTask.base_eval"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.base_eval"], ["", "", "def", "get_total_prediction", "(", "self", ",", "eval_dataset", ")", ":", "\n", "        ", "self", ".", "logging", "(", "'='", "*", "20", "+", "'Get Total Prediction'", "+", "'='", "*", "20", ")", "\n", "total_pred_gold_mask", "=", "self", ".", "base_eval", "(", "\n", "eval_dataset", ",", "get_ner_pred_on_batch", ",", "reduce_info_type", "=", "'none'", "\n", ")", "\n", "# torch.Tensor(dtype=torch.long, device='cpu')", "\n", "# size = [batch_size, seq_len, 3]", "\n", "# value = [[(pred_label, gold_label, token_mask), ...], ...]", "\n", "return", "total_pred_gold_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.load_ner_dataset": [[84, 122], ["utils.default_load_json", "utils.default_load_json.items", "zip", "range", "len", "len", "sent_idx2mrange_mspan_mfield_tuples[].append", "len", "total_ner_examples.append", "ner_task.NERExample"], "function", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.default_load_json"], ["", "", "def", "load_ner_dataset", "(", "dataset_json_path", ")", ":", "\n", "    ", "total_ner_examples", "=", "[", "]", "\n", "annguid2detail_align_info", "=", "default_load_json", "(", "dataset_json_path", ")", "\n", "for", "annguid", ",", "detail_align_info", "in", "annguid2detail_align_info", ".", "items", "(", ")", ":", "\n", "        ", "sents", "=", "detail_align_info", "[", "'sentences'", "]", "\n", "ann_valid_mspans", "=", "detail_align_info", "[", "'ann_valid_mspans'", "]", "\n", "ann_valid_dranges", "=", "detail_align_info", "[", "'ann_valid_dranges'", "]", "\n", "ann_mspan2guess_field", "=", "detail_align_info", "[", "'ann_mspan2guess_field'", "]", "\n", "assert", "len", "(", "ann_valid_dranges", ")", "==", "len", "(", "ann_valid_mspans", ")", "\n", "\n", "sent_idx2mrange_mspan_mfield_tuples", "=", "{", "}", "\n", "for", "drange", ",", "mspan", "in", "zip", "(", "ann_valid_dranges", ",", "ann_valid_mspans", ")", ":", "\n", "            ", "sent_idx", ",", "char_s", ",", "char_e", "=", "drange", "\n", "sent_mrange", "=", "(", "char_s", ",", "char_e", ")", "\n", "\n", "sent_text", "=", "sents", "[", "sent_idx", "]", "\n", "assert", "sent_text", "[", "char_s", ":", "char_e", "]", "==", "mspan", "\n", "\n", "guess_field", "=", "ann_mspan2guess_field", "[", "mspan", "]", "\n", "\n", "if", "sent_idx", "not", "in", "sent_idx2mrange_mspan_mfield_tuples", ":", "\n", "                ", "sent_idx2mrange_mspan_mfield_tuples", "[", "sent_idx", "]", "=", "[", "]", "\n", "", "sent_idx2mrange_mspan_mfield_tuples", "[", "sent_idx", "]", ".", "append", "(", "(", "sent_mrange", ",", "mspan", ",", "guess_field", ")", ")", "\n", "\n", "", "for", "sent_idx", "in", "range", "(", "len", "(", "sents", ")", ")", ":", "\n", "            ", "sent_text", "=", "sents", "[", "sent_idx", "]", "\n", "if", "sent_idx", "in", "sent_idx2mrange_mspan_mfield_tuples", ":", "\n", "                ", "mrange_mspan_mfield_tuples", "=", "sent_idx2mrange_mspan_mfield_tuples", "[", "sent_idx", "]", "\n", "", "else", ":", "\n", "                ", "mrange_mspan_mfield_tuples", "=", "[", "]", "\n", "\n", "", "total_ner_examples", ".", "append", "(", "\n", "NERExample", "(", "'{}-{}'", ".", "format", "(", "annguid", ",", "sent_idx", ")", ",", "\n", "sent_text", ",", "\n", "mrange_mspan_mfield_tuples", ")", "\n", ")", "\n", "\n", "", "", "return", "total_ner_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.convert_ner_features_to_dataset": [[279, 289], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset"], "function", ["None"], ["", "", "def", "convert_ner_features_to_dataset", "(", "ner_features", ")", ":", "\n", "    ", "all_input_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "ner_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "# very important to use the mask type of uint8 to support advanced indexing", "\n", "all_input_masks", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_masks", "for", "f", "in", "ner_features", "]", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "all_segment_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "segment_ids", "for", "f", "in", "ner_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_label_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "label_ids", "for", "f", "in", "ner_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_seq_len", "=", "torch", ".", "tensor", "(", "[", "f", ".", "seq_len", "for", "f", "in", "ner_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "ner_tensor_dataset", "=", "TensorDataset", "(", "all_input_ids", ",", "all_input_masks", ",", "all_segment_ids", ",", "all_label_ids", ",", "all_seq_len", ")", "\n", "\n", "return", "ner_tensor_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.normalize_batch_seq_len": [[484, 496], ["input_seq_lens.max().item", "input_seq_lens.max", "batch_seq_tensor.dim", "normed_tensors.append", "batch_seq_tensor.dim", "normed_tensors.append", "Exception", "batch_seq_tensor.dim"], "function", ["None"], ["", "", "def", "normalize_batch_seq_len", "(", "input_seq_lens", ",", "*", "batch_seq_tensors", ")", ":", "\n", "    ", "batch_max_seq_len", "=", "input_seq_lens", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "normed_tensors", "=", "[", "]", "\n", "for", "batch_seq_tensor", "in", "batch_seq_tensors", ":", "\n", "        ", "if", "batch_seq_tensor", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "normed_tensors", ".", "append", "(", "batch_seq_tensor", "[", ":", ",", ":", "batch_max_seq_len", "]", ")", "\n", "", "elif", "batch_seq_tensor", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "normed_tensors", ".", "append", "(", "batch_seq_tensor", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Unsupported batch_seq_tensor dimension {}'", ".", "format", "(", "batch_seq_tensor", ".", "dim", "(", ")", ")", ")", "\n", "\n", "", "", "return", "normed_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.prepare_ner_batch": [[498, 507], ["ner_task.normalize_batch_seq_len"], "function", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.normalize_batch_seq_len"], ["", "def", "prepare_ner_batch", "(", "batch", ",", "resize_len", "=", "True", ")", ":", "\n", "# prepare batch", "\n", "    ", "input_ids", ",", "input_masks", ",", "segment_ids", ",", "label_ids", ",", "input_lens", "=", "batch", "\n", "if", "resize_len", ":", "\n", "        ", "input_ids", ",", "input_masks", ",", "segment_ids", ",", "label_ids", "=", "normalize_batch_seq_len", "(", "\n", "input_lens", ",", "input_ids", ",", "input_masks", ",", "segment_ids", ",", "label_ids", "\n", ")", "\n", "\n", "", "return", "input_ids", ",", "input_masks", ",", "segment_ids", ",", "label_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.get_ner_loss_on_batch": [[509, 516], ["ner_task.prepare_ner_batch", "ner_task.model"], "function", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.prepare_ner_batch"], ["", "def", "get_ner_loss_on_batch", "(", "ner_task", ",", "batch", ")", ":", "\n", "    ", "input_ids", ",", "input_masks", ",", "segment_ids", ",", "label_ids", "=", "prepare_ner_batch", "(", "batch", ",", "resize_len", "=", "True", ")", "\n", "loss", ",", "_", "=", "ner_task", ".", "model", "(", "input_ids", ",", "input_masks", ",", "\n", "token_type_ids", "=", "segment_ids", ",", "\n", "label_ids", "=", "label_ids", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.get_ner_metrics_on_batch": [[518, 527], ["ner_task.prepare_ner_batch", "ner_task.model"], "function", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.prepare_ner_batch"], ["", "def", "get_ner_metrics_on_batch", "(", "ner_task", ",", "batch", ")", ":", "\n", "    ", "input_ids", ",", "input_masks", ",", "segment_ids", ",", "label_ids", "=", "prepare_ner_batch", "(", "batch", ",", "resize_len", "=", "True", ")", "\n", "batch_metrics", "=", "ner_task", ".", "model", "(", "input_ids", ",", "input_masks", ",", "\n", "token_type_ids", "=", "segment_ids", ",", "\n", "label_ids", "=", "label_ids", ",", "\n", "eval_flag", "=", "True", ",", "\n", "eval_for_metric", "=", "True", ")", "\n", "\n", "return", "batch_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.get_ner_pred_on_batch": [[529, 540], ["ner_task.prepare_ner_batch", "ner_task.model"], "function", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.ner_task.prepare_ner_batch"], ["", "def", "get_ner_pred_on_batch", "(", "ner_task", ",", "batch", ")", ":", "\n", "# important to set resize_len to False to maintain the same seq len between batches", "\n", "    ", "input_ids", ",", "input_masks", ",", "segment_ids", ",", "label_ids", "=", "prepare_ner_batch", "(", "batch", ",", "resize_len", "=", "False", ")", "\n", "batch_seq_pred_gold_mask", "=", "ner_task", ".", "model", "(", "input_ids", ",", "input_masks", ",", "\n", "token_type_ids", "=", "segment_ids", ",", "\n", "label_ids", "=", "label_ids", ",", "\n", "eval_flag", "=", "True", ",", "\n", "eval_for_metric", "=", "False", ")", "\n", "# size = [batch_size, max_seq_len, 3]", "\n", "# value = [[(pred_label, gold_label, token_mask), ...], ...]", "\n", "return", "batch_seq_pred_gold_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEExample.__init__": [[22, 88], ["len", "len", "range", "event_class", "isinstance", "event_class.update_by_dict", "dee_helper.DEEExample.sent_idx2srange_mspan_mtype_tuples[].append", "dee_helper.DEEExample.event_type2event_objs[].append", "Exception", "str"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.TaskSetting.update_by_dict"], ["    ", "def", "__init__", "(", "self", ",", "annguid", ",", "detail_align_dict", ",", "only_inference", "=", "False", ")", ":", "\n", "        ", "self", ".", "guid", "=", "annguid", "\n", "# [sent_text, ...]", "\n", "self", ".", "sentences", "=", "detail_align_dict", "[", "'sentences'", "]", "\n", "self", ".", "num_sentences", "=", "len", "(", "self", ".", "sentences", ")", "\n", "\n", "if", "only_inference", ":", "\n", "# set empty entity/event information", "\n", "            ", "self", ".", "only_inference", "=", "True", "\n", "self", ".", "ann_valid_mspans", "=", "[", "]", "\n", "self", ".", "ann_mspan2dranges", "=", "{", "}", "\n", "self", ".", "ann_mspan2guess_field", "=", "{", "}", "\n", "self", ".", "recguid_eventname_eventdict_list", "=", "[", "]", "\n", "self", ".", "num_events", "=", "0", "\n", "self", ".", "sent_idx2srange_mspan_mtype_tuples", "=", "{", "}", "\n", "self", ".", "event_type2event_objs", "=", "{", "}", "\n", "", "else", ":", "\n", "# set event information accordingly", "\n", "            ", "self", ".", "only_inference", "=", "False", "\n", "\n", "# [span_text, ...]", "\n", "self", ".", "ann_valid_mspans", "=", "detail_align_dict", "[", "'ann_valid_mspans'", "]", "\n", "# span_text -> [drange_tuple, ...]", "\n", "self", ".", "ann_mspan2dranges", "=", "detail_align_dict", "[", "'ann_mspan2dranges'", "]", "\n", "# span_text -> guessed_field_name", "\n", "self", ".", "ann_mspan2guess_field", "=", "detail_align_dict", "[", "'ann_mspan2guess_field'", "]", "\n", "# [(recguid, event_name, event_dict), ...]", "\n", "self", ".", "recguid_eventname_eventdict_list", "=", "detail_align_dict", "[", "'recguid_eventname_eventdict_list'", "]", "\n", "self", ".", "num_events", "=", "len", "(", "self", ".", "recguid_eventname_eventdict_list", ")", "\n", "\n", "# for create ner examples", "\n", "# sentence_index -> [(sent_match_range, match_span, match_type), ...]", "\n", "self", ".", "sent_idx2srange_mspan_mtype_tuples", "=", "{", "}", "\n", "for", "sent_idx", "in", "range", "(", "self", ".", "num_sentences", ")", ":", "\n", "                ", "self", ".", "sent_idx2srange_mspan_mtype_tuples", "[", "sent_idx", "]", "=", "[", "]", "\n", "\n", "", "for", "mspan", "in", "self", ".", "ann_valid_mspans", ":", "\n", "                ", "for", "drange", "in", "self", ".", "ann_mspan2dranges", "[", "mspan", "]", ":", "\n", "                    ", "sent_idx", ",", "char_s", ",", "char_e", "=", "drange", "\n", "sent_mrange", "=", "(", "char_s", ",", "char_e", ")", "\n", "\n", "sent_text", "=", "self", ".", "sentences", "[", "sent_idx", "]", "\n", "if", "sent_text", "[", "char_s", ":", "char_e", "]", "!=", "mspan", ":", "\n", "                        ", "raise", "Exception", "(", "'GUID: {} span range is not correct, span={}, range={}, sent={}'", ".", "format", "(", "\n", "annguid", ",", "mspan", ",", "str", "(", "sent_mrange", ")", ",", "sent_text", "\n", ")", ")", "\n", "\n", "", "guess_field", "=", "self", ".", "ann_mspan2guess_field", "[", "mspan", "]", "\n", "\n", "self", ".", "sent_idx2srange_mspan_mtype_tuples", "[", "sent_idx", "]", ".", "append", "(", "\n", "(", "sent_mrange", ",", "mspan", ",", "guess_field", ")", "\n", ")", "\n", "\n", "# for create event objects", "\n", "# the length of event_objs should >= 1", "\n", "", "", "self", ".", "event_type2event_objs", "=", "{", "}", "\n", "for", "mrecguid", ",", "event_name", ",", "event_dict", "in", "self", ".", "recguid_eventname_eventdict_list", ":", "\n", "                ", "event_class", "=", "event_type2event_class", "[", "event_name", "]", "\n", "event_obj", "=", "event_class", "(", ")", "\n", "assert", "isinstance", "(", "event_obj", ",", "BaseEvent", ")", "\n", "event_obj", ".", "update_by_dict", "(", "event_dict", ",", "recguid", "=", "mrecguid", ")", "\n", "\n", "if", "event_obj", ".", "name", "in", "self", ".", "event_type2event_objs", ":", "\n", "                    ", "self", ".", "event_type2event_objs", "[", "event_obj", ".", "name", "]", ".", "append", "(", "event_obj", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "event_type2event_objs", "[", "event_name", "]", "=", "[", "event_obj", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEExample.__repr__": [[89, 115], ["enumerate", "repr", "enumerate", "repr().split", "str", "repr"], "methods", ["None"], ["", "", "", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "dee_str", "=", "'DEEExample (\\n'", "\n", "dee_str", "+=", "'  guid: {},\\n'", ".", "format", "(", "repr", "(", "self", ".", "guid", ")", ")", "\n", "\n", "if", "not", "self", ".", "only_inference", ":", "\n", "            ", "dee_str", "+=", "'  span info: (\\n'", "\n", "for", "span_idx", ",", "span", "in", "enumerate", "(", "self", ".", "ann_valid_mspans", ")", ":", "\n", "                ", "gfield", "=", "self", ".", "ann_mspan2guess_field", "[", "span", "]", "\n", "dranges", "=", "self", ".", "ann_mspan2dranges", "[", "span", "]", "\n", "dee_str", "+=", "'    {:2} {:20} {:30} {}\\n'", ".", "format", "(", "span_idx", ",", "span", ",", "gfield", ",", "str", "(", "dranges", ")", ")", "\n", "", "dee_str", "+=", "'  ),\\n'", "\n", "\n", "dee_str", "+=", "'  event info: (\\n'", "\n", "event_str_list", "=", "repr", "(", "self", ".", "event_type2event_objs", ")", ".", "split", "(", "'\\n'", ")", "\n", "for", "event_str", "in", "event_str_list", ":", "\n", "                ", "dee_str", "+=", "'    {}\\n'", ".", "format", "(", "event_str", ")", "\n", "", "dee_str", "+=", "'  ),\\n'", "\n", "\n", "", "dee_str", "+=", "'  sentences: (\\n'", "\n", "for", "sent_idx", ",", "sent", "in", "enumerate", "(", "self", ".", "sentences", ")", ":", "\n", "            ", "dee_str", "+=", "'    {:2} {}\\n'", ".", "format", "(", "sent_idx", ",", "sent", ")", "\n", "", "dee_str", "+=", "'  ),\\n'", "\n", "\n", "dee_str", "+=", "')\\n'", "\n", "\n", "return", "dee_str", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEExample.get_event_type_fields_pairs": [[116, 119], ["list"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_event_type_fields_pairs", "(", ")", ":", "\n", "        ", "return", "list", "(", "event_type_fields_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEExample.get_entity_label_list": [[120, 137], ["set", "set.add", "entity_label_list.extend", "set.add", "entity_label_list.extend"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_entity_label_list", "(", ")", ":", "\n", "        ", "visit_set", "=", "set", "(", ")", "\n", "entity_label_list", "=", "[", "NERExample", ".", "basic_entity_label", "]", "\n", "\n", "for", "field", "in", "common_fields", ":", "\n", "            ", "if", "field", "not", "in", "visit_set", ":", "\n", "                ", "visit_set", ".", "add", "(", "field", ")", "\n", "entity_label_list", ".", "extend", "(", "[", "'B-'", "+", "field", ",", "'I-'", "+", "field", "]", ")", "\n", "\n", "", "", "for", "event_name", ",", "fields", "in", "event_type_fields_list", ":", "\n", "            ", "for", "field", "in", "fields", ":", "\n", "                ", "if", "field", "not", "in", "visit_set", ":", "\n", "                    ", "visit_set", ".", "add", "(", "field", ")", "\n", "entity_label_list", ".", "extend", "(", "[", "'B-'", "+", "field", ",", "'I-'", "+", "field", "]", ")", "\n", "\n", "", "", "", "return", "entity_label_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEExampleLoader.__init__": [[140, 143], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "rearrange_sent_flag", ",", "max_sent_len", ")", ":", "\n", "        ", "self", ".", "rearrange_sent_flag", "=", "rearrange_sent_flag", "\n", "self", ".", "max_sent_len", "=", "max_sent_len", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEExampleLoader.rearrange_sent_info": [[144, 237], ["dict", "re.compile", "collections.defaultdict", "enumerate", "raw_dranges.sort", "detail_align_info[].items", "span_char_set.update", "raw_char_bases.append", "comp_char_bases.append", "len", "tuple", "range", "set", "range", "len", "re.compile.finditer", "short_sents.append", "short_sents.append", "len", "comp_sents.append", "len", "mobj.span", "short_sents.append", "len", "len", "tuple", "tuple"], "methods", ["None"], ["", "def", "rearrange_sent_info", "(", "self", ",", "detail_align_info", ")", ":", "\n", "        ", "if", "'ann_valid_dranges'", "not", "in", "detail_align_info", ":", "\n", "            ", "detail_align_info", "[", "'ann_valid_dranges'", "]", "=", "[", "]", "\n", "", "if", "'ann_mspan2dranges'", "not", "in", "detail_align_info", ":", "\n", "            ", "detail_align_info", "[", "'ann_mspan2dranges'", "]", "=", "{", "}", "\n", "\n", "", "detail_align_info", "=", "dict", "(", "detail_align_info", ")", "\n", "split_rgx", "=", "re", ".", "compile", "(", "'[\uff0c\uff1a:\uff1b;\uff09)]'", ")", "\n", "\n", "raw_sents", "=", "detail_align_info", "[", "'sentences'", "]", "\n", "doc_text", "=", "''", ".", "join", "(", "raw_sents", ")", "\n", "raw_dranges", "=", "detail_align_info", "[", "'ann_valid_dranges'", "]", "\n", "raw_sid2span_char_set", "=", "defaultdict", "(", "lambda", ":", "set", "(", ")", ")", "\n", "for", "raw_sid", ",", "char_s", ",", "char_e", "in", "raw_dranges", ":", "\n", "            ", "span_char_set", "=", "raw_sid2span_char_set", "[", "raw_sid", "]", "\n", "span_char_set", ".", "update", "(", "range", "(", "char_s", ",", "char_e", ")", ")", "\n", "\n", "# try to split long sentences into short ones by comma, colon, semi-colon, bracket", "\n", "", "short_sents", "=", "[", "]", "\n", "for", "raw_sid", ",", "sent", "in", "enumerate", "(", "raw_sents", ")", ":", "\n", "            ", "span_char_set", "=", "raw_sid2span_char_set", "[", "raw_sid", "]", "\n", "if", "len", "(", "sent", ")", ">", "self", ".", "max_sent_len", ":", "\n", "                ", "cur_char_s", "=", "0", "\n", "for", "mobj", "in", "split_rgx", ".", "finditer", "(", "sent", ")", ":", "\n", "                    ", "m_char_s", ",", "m_char_e", "=", "mobj", ".", "span", "(", ")", "\n", "if", "m_char_s", "in", "span_char_set", ":", "\n", "                        ", "continue", "\n", "", "short_sents", ".", "append", "(", "sent", "[", "cur_char_s", ":", "m_char_e", "]", ")", "\n", "cur_char_s", "=", "m_char_e", "\n", "", "short_sents", ".", "append", "(", "sent", "[", "cur_char_s", ":", "]", ")", "\n", "", "else", ":", "\n", "                ", "short_sents", ".", "append", "(", "sent", ")", "\n", "\n", "# merge adjacent short sentences to compact ones that match max_sent_len", "\n", "", "", "comp_sents", "=", "[", "''", "]", "\n", "for", "sent", "in", "short_sents", ":", "\n", "            ", "prev_sent", "=", "comp_sents", "[", "-", "1", "]", "\n", "if", "len", "(", "prev_sent", "+", "sent", ")", "<=", "self", ".", "max_sent_len", ":", "\n", "                ", "comp_sents", "[", "-", "1", "]", "=", "prev_sent", "+", "sent", "\n", "", "else", ":", "\n", "                ", "comp_sents", ".", "append", "(", "sent", ")", "\n", "\n", "# get global sentence character base indexes", "\n", "", "", "raw_char_bases", "=", "[", "0", "]", "\n", "for", "sent", "in", "raw_sents", ":", "\n", "            ", "raw_char_bases", ".", "append", "(", "raw_char_bases", "[", "-", "1", "]", "+", "len", "(", "sent", ")", ")", "\n", "", "comp_char_bases", "=", "[", "0", "]", "\n", "for", "sent", "in", "comp_sents", ":", "\n", "            ", "comp_char_bases", ".", "append", "(", "comp_char_bases", "[", "-", "1", "]", "+", "len", "(", "sent", ")", ")", "\n", "\n", "", "assert", "raw_char_bases", "[", "-", "1", "]", "==", "comp_char_bases", "[", "-", "1", "]", "==", "len", "(", "doc_text", ")", "\n", "\n", "# calculate compact doc ranges", "\n", "raw_dranges", ".", "sort", "(", ")", "\n", "raw_drange2comp_drange", "=", "{", "}", "\n", "prev_comp_sid", "=", "0", "\n", "for", "raw_drange", "in", "raw_dranges", ":", "\n", "            ", "raw_drange", "=", "tuple", "(", "raw_drange", ")", "# important when json dump change tuple to list", "\n", "raw_sid", ",", "raw_char_s", ",", "raw_char_e", "=", "raw_drange", "\n", "raw_char_base", "=", "raw_char_bases", "[", "raw_sid", "]", "\n", "doc_char_s", "=", "raw_char_base", "+", "raw_char_s", "\n", "doc_char_e", "=", "raw_char_base", "+", "raw_char_e", "\n", "assert", "doc_char_s", ">=", "comp_char_bases", "[", "prev_comp_sid", "]", "\n", "\n", "cur_comp_sid", "=", "prev_comp_sid", "\n", "for", "cur_comp_sid", "in", "range", "(", "prev_comp_sid", ",", "len", "(", "comp_sents", ")", ")", ":", "\n", "                ", "if", "doc_char_e", "<=", "comp_char_bases", "[", "cur_comp_sid", "+", "1", "]", ":", "\n", "                    ", "prev_comp_sid", "=", "cur_comp_sid", "\n", "break", "\n", "", "", "comp_char_base", "=", "comp_char_bases", "[", "cur_comp_sid", "]", "\n", "assert", "comp_char_base", "<=", "doc_char_s", "<", "doc_char_e", "<=", "comp_char_bases", "[", "cur_comp_sid", "+", "1", "]", "\n", "comp_char_s", "=", "doc_char_s", "-", "comp_char_base", "\n", "comp_char_e", "=", "doc_char_e", "-", "comp_char_base", "\n", "comp_drange", "=", "(", "cur_comp_sid", ",", "comp_char_s", ",", "comp_char_e", ")", "\n", "\n", "raw_drange2comp_drange", "[", "raw_drange", "]", "=", "comp_drange", "\n", "assert", "raw_sents", "[", "raw_drange", "[", "0", "]", "]", "[", "raw_drange", "[", "1", "]", ":", "raw_drange", "[", "2", "]", "]", "==", "comp_sents", "[", "comp_drange", "[", "0", "]", "]", "[", "comp_drange", "[", "1", "]", ":", "comp_drange", "[", "2", "]", "]", "\n", "\n", "# update detailed align info with rearranged sentences", "\n", "", "detail_align_info", "[", "'sentences'", "]", "=", "comp_sents", "\n", "detail_align_info", "[", "'ann_valid_dranges'", "]", "=", "[", "\n", "raw_drange2comp_drange", "[", "tuple", "(", "raw_drange", ")", "]", "for", "raw_drange", "in", "detail_align_info", "[", "'ann_valid_dranges'", "]", "\n", "]", "\n", "ann_mspan2comp_dranges", "=", "{", "}", "\n", "for", "ann_mspan", ",", "mspan_raw_dranges", "in", "detail_align_info", "[", "'ann_mspan2dranges'", "]", ".", "items", "(", ")", ":", "\n", "            ", "comp_dranges", "=", "[", "\n", "raw_drange2comp_drange", "[", "tuple", "(", "raw_drange", ")", "]", "for", "raw_drange", "in", "mspan_raw_dranges", "\n", "]", "\n", "ann_mspan2comp_dranges", "[", "ann_mspan", "]", "=", "comp_dranges", "\n", "", "detail_align_info", "[", "'ann_mspan2dranges'", "]", "=", "ann_mspan2comp_dranges", "\n", "\n", "return", "detail_align_info", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEExampleLoader.convert_dict_to_example": [[238, 244], ["dee_helper.DEEExample", "dee_helper.DEEExampleLoader.rearrange_sent_info"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEExampleLoader.rearrange_sent_info"], ["", "def", "convert_dict_to_example", "(", "self", ",", "annguid", ",", "detail_align_info", ",", "only_inference", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "rearrange_sent_flag", ":", "\n", "            ", "detail_align_info", "=", "self", ".", "rearrange_sent_info", "(", "detail_align_info", ")", "\n", "", "dee_example", "=", "DEEExample", "(", "annguid", ",", "detail_align_info", ",", "only_inference", "=", "only_inference", ")", "\n", "\n", "return", "dee_example", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEExampleLoader.__call__": [[245, 256], ["utils.default_load_json", "dee_helper.DEEExampleLoader.convert_dict_to_example", "total_dee_examples.append"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.default_load_json", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEExampleLoader.convert_dict_to_example"], ["", "def", "__call__", "(", "self", ",", "dataset_json_path", ")", ":", "\n", "        ", "total_dee_examples", "=", "[", "]", "\n", "annguid_aligninfo_list", "=", "default_load_json", "(", "dataset_json_path", ")", "\n", "for", "annguid", ",", "detail_align_info", "in", "annguid_aligninfo_list", ":", "\n", "# if self.rearrange_sent_flag:", "\n", "#     detail_align_info = self.rearrange_sent_info(detail_align_info)", "\n", "# dee_example = DEEExample(annguid, detail_align_info)", "\n", "            ", "dee_example", "=", "self", ".", "convert_dict_to_example", "(", "annguid", ",", "detail_align_info", ")", "\n", "total_dee_examples", ".", "append", "(", "dee_example", ")", "\n", "\n", "", "return", "total_dee_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEFeature.__init__": [[259, 297], ["torch.tensor", "torch.tensor", "torch.tensor", "dee_helper.DEEFeature.build_dag_info", "dee_helper.DEEFeature.build_key_event_sent_info"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEFeature.build_dag_info", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEFeature.build_key_event_sent_info"], ["    ", "def", "__init__", "(", "self", ",", "guid", ",", "ex_idx", ",", "doc_token_id_mat", ",", "doc_token_mask_mat", ",", "doc_token_label_mat", ",", "\n", "span_token_ids_list", ",", "span_dranges_list", ",", "event_type_labels", ",", "event_arg_idxs_objs_list", ",", "\n", "valid_sent_num", "=", "None", ")", ":", "\n", "        ", "self", ".", "guid", "=", "guid", "\n", "self", ".", "ex_idx", "=", "ex_idx", "# example row index, used for backtracking", "\n", "self", ".", "valid_sent_num", "=", "valid_sent_num", "\n", "\n", "# directly set tensor for dee feature to save memory", "\n", "# self.doc_token_id_mat = doc_token_id_mat", "\n", "# self.doc_token_mask_mat = doc_token_mask_mat", "\n", "# self.doc_token_label_mat = doc_token_label_mat", "\n", "self", ".", "doc_token_ids", "=", "torch", ".", "tensor", "(", "doc_token_id_mat", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "self", ".", "doc_token_masks", "=", "torch", ".", "tensor", "(", "doc_token_mask_mat", ",", "dtype", "=", "torch", ".", "uint8", ")", "# uint8 for mask", "\n", "self", ".", "doc_token_labels", "=", "torch", ".", "tensor", "(", "doc_token_label_mat", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "# sorted by the first drange tuple", "\n", "# [(token_id, ...), ...]", "\n", "# span_idx -> span_token_id tuple", "\n", "self", ".", "span_token_ids_list", "=", "span_token_ids_list", "\n", "# [[(sent_idx, char_s, char_e), ...], ...]", "\n", "# span_idx -> [drange tuple, ...]", "\n", "self", ".", "span_dranges_list", "=", "span_dranges_list", "\n", "\n", "# [event_type_label, ...]", "\n", "# length = the total number of events to be considered", "\n", "# event_type_label \\in {0, 1}, 0: no 1: yes", "\n", "self", ".", "event_type_labels", "=", "event_type_labels", "\n", "# event_type is denoted by the index of event_type_labels", "\n", "# event_type_idx -> event_obj_idx -> event_arg_idx -> span_idx", "\n", "# if no event objects, event_type_idx -> None", "\n", "self", ".", "event_arg_idxs_objs_list", "=", "event_arg_idxs_objs_list", "\n", "\n", "# event_type_idx -> event_field_idx -> pre_path -> {span_idx, ...}", "\n", "# pre_path is tuple of span_idx", "\n", "self", ".", "event_idx2field_idx2pre_path2cur_span_idx_set", "=", "self", ".", "build_dag_info", "(", "self", ".", "event_arg_idxs_objs_list", ")", "\n", "\n", "# event_type_idx -> key_sent_idx_set, used for key-event sentence detection", "\n", "self", ".", "event_idx2key_sent_idx_set", ",", "self", ".", "doc_sent_labels", "=", "self", ".", "build_key_event_sent_info", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEFeature.generate_dag_info_for": [[298, 343], ["enumerate", "list", "dee_helper.DEEFeature.build_dag_info", "set", "enumerate", "missed_span_idx_list.append", "pred_event_arg_idxs_objs_list.append", "pred_event_arg_idxs_objs_list.append", "list.append", "pred_event_arg_idxs_objs.append", "tuple", "pred_event_arg_idxs.append", "pred_event_arg_idxs.append"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEFeature.build_dag_info"], ["", "def", "generate_dag_info_for", "(", "self", ",", "pred_span_token_tup_list", ",", "return_miss", "=", "False", ")", ":", "\n", "        ", "token_tup2pred_span_idx", "=", "{", "\n", "token_tup", ":", "pred_span_idx", "for", "pred_span_idx", ",", "token_tup", "in", "enumerate", "(", "pred_span_token_tup_list", ")", "\n", "}", "\n", "gold_span_idx2pred_span_idx", "=", "{", "}", "\n", "# pred_span_idx2gold_span_idx = {}", "\n", "missed_span_idx_list", "=", "[", "]", "# in terms of self", "\n", "missed_sent_idx_list", "=", "[", "]", "# in terms of self", "\n", "for", "gold_span_idx", ",", "token_tup", "in", "enumerate", "(", "self", ".", "span_token_ids_list", ")", ":", "\n", "            ", "if", "token_tup", "in", "token_tup2pred_span_idx", ":", "\n", "                ", "pred_span_idx", "=", "token_tup2pred_span_idx", "[", "token_tup", "]", "\n", "gold_span_idx2pred_span_idx", "[", "gold_span_idx", "]", "=", "pred_span_idx", "\n", "# pred_span_idx2gold_span_idx[pred_span_idx] = gold_span_idx", "\n", "", "else", ":", "\n", "                ", "missed_span_idx_list", ".", "append", "(", "gold_span_idx", ")", "\n", "for", "gold_drange", "in", "self", ".", "span_dranges_list", "[", "gold_span_idx", "]", ":", "\n", "                    ", "missed_sent_idx_list", ".", "append", "(", "gold_drange", "[", "0", "]", ")", "\n", "", "", "", "missed_sent_idx_list", "=", "list", "(", "set", "(", "missed_sent_idx_list", ")", ")", "\n", "\n", "pred_event_arg_idxs_objs_list", "=", "[", "]", "\n", "for", "event_arg_idxs_objs", "in", "self", ".", "event_arg_idxs_objs_list", ":", "\n", "            ", "if", "event_arg_idxs_objs", "is", "None", ":", "\n", "                ", "pred_event_arg_idxs_objs_list", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                ", "pred_event_arg_idxs_objs", "=", "[", "]", "\n", "for", "event_arg_idxs", "in", "event_arg_idxs_objs", ":", "\n", "                    ", "pred_event_arg_idxs", "=", "[", "]", "\n", "for", "gold_span_idx", "in", "event_arg_idxs", ":", "\n", "                        ", "if", "gold_span_idx", "in", "gold_span_idx2pred_span_idx", ":", "\n", "                            ", "pred_event_arg_idxs", ".", "append", "(", "\n", "gold_span_idx2pred_span_idx", "[", "gold_span_idx", "]", "\n", ")", "\n", "", "else", ":", "\n", "                            ", "pred_event_arg_idxs", ".", "append", "(", "None", ")", "\n", "\n", "", "", "pred_event_arg_idxs_objs", ".", "append", "(", "tuple", "(", "pred_event_arg_idxs", ")", ")", "\n", "", "pred_event_arg_idxs_objs_list", ".", "append", "(", "pred_event_arg_idxs_objs", ")", "\n", "\n", "# event_idx -> field_idx -> pre_path -> cur_span_idx_set", "\n", "", "", "pred_dag_info", "=", "self", ".", "build_dag_info", "(", "pred_event_arg_idxs_objs_list", ")", "\n", "\n", "if", "return_miss", ":", "\n", "            ", "return", "pred_dag_info", ",", "missed_span_idx_list", ",", "missed_sent_idx_list", "\n", "", "else", ":", "\n", "            ", "return", "pred_dag_info", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEFeature.get_event_args_objs_list": [[344, 363], ["event_args_objs_list.append", "event_args_objs_list.append", "event_args_objs.append", "event_args.append"], "methods", ["None"], ["", "", "def", "get_event_args_objs_list", "(", "self", ")", ":", "\n", "        ", "event_args_objs_list", "=", "[", "]", "\n", "for", "event_arg_idxs_objs", "in", "self", ".", "event_arg_idxs_objs_list", ":", "\n", "            ", "if", "event_arg_idxs_objs", "is", "None", ":", "\n", "                ", "event_args_objs_list", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                ", "event_args_objs", "=", "[", "]", "\n", "for", "event_arg_idxs", "in", "event_arg_idxs_objs", ":", "\n", "                    ", "event_args", "=", "[", "]", "\n", "for", "arg_idx", "in", "event_arg_idxs", ":", "\n", "                        ", "if", "arg_idx", "is", "None", ":", "\n", "                            ", "token_tup", "=", "None", "\n", "", "else", ":", "\n", "                            ", "token_tup", "=", "self", ".", "span_token_ids_list", "[", "arg_idx", "]", "\n", "", "event_args", ".", "append", "(", "token_tup", ")", "\n", "", "event_args_objs", ".", "append", "(", "event_args", ")", "\n", "", "event_args_objs_list", ".", "append", "(", "event_args_objs", ")", "\n", "\n", "", "", "return", "event_args_objs_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEFeature.build_key_event_sent_info": [[364, 399], ["zip", "range", "len", "len", "set", "doc_sent_labels.append", "collections.Counter", "key_sent_idx_set.add", "sent_labels.append", "sent_labels.append", "len", "Exception", "sent_idx_cands.append", "collections.Counter.most_common", "str"], "methods", ["None"], ["", "def", "build_key_event_sent_info", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "event_type_labels", ")", "==", "len", "(", "self", ".", "event_arg_idxs_objs_list", ")", "\n", "# event_idx -> key_event_sent_index_set", "\n", "event_idx2key_sent_idx_set", "=", "[", "set", "(", ")", "for", "_", "in", "self", ".", "event_type_labels", "]", "\n", "for", "key_sent_idx_set", ",", "event_label", ",", "event_arg_idxs_objs", "in", "zip", "(", "\n", "event_idx2key_sent_idx_set", ",", "self", ".", "event_type_labels", ",", "self", ".", "event_arg_idxs_objs_list", "\n", ")", ":", "\n", "            ", "if", "event_label", "==", "0", ":", "\n", "                ", "assert", "event_arg_idxs_objs", "is", "None", "\n", "", "else", ":", "\n", "                ", "for", "event_arg_idxs_obj", "in", "event_arg_idxs_objs", ":", "\n", "                    ", "sent_idx_cands", "=", "[", "]", "\n", "for", "span_idx", "in", "event_arg_idxs_obj", ":", "\n", "                        ", "if", "span_idx", "is", "None", ":", "\n", "                            ", "continue", "\n", "", "span_dranges", "=", "self", ".", "span_dranges_list", "[", "span_idx", "]", "\n", "for", "sent_idx", ",", "_", ",", "_", "in", "span_dranges", ":", "\n", "                            ", "sent_idx_cands", ".", "append", "(", "sent_idx", ")", "\n", "", "", "if", "len", "(", "sent_idx_cands", ")", "==", "0", ":", "\n", "                        ", "raise", "Exception", "(", "'Event {} has no valid spans'", ".", "format", "(", "str", "(", "event_arg_idxs_obj", ")", ")", ")", "\n", "", "sent_idx_cnter", "=", "Counter", "(", "sent_idx_cands", ")", "\n", "key_sent_idx", "=", "sent_idx_cnter", ".", "most_common", "(", ")", "[", "0", "]", "[", "0", "]", "\n", "key_sent_idx_set", ".", "add", "(", "key_sent_idx", ")", "\n", "\n", "", "", "", "doc_sent_labels", "=", "[", "]", "# 1: key event sentence, 0: otherwise", "\n", "for", "sent_idx", "in", "range", "(", "self", ".", "valid_sent_num", ")", ":", "# masked sents will be truncated at the model part", "\n", "            ", "sent_labels", "=", "[", "]", "\n", "for", "key_sent_idx_set", "in", "event_idx2key_sent_idx_set", ":", "# this mapping is a list", "\n", "                ", "if", "sent_idx", "in", "key_sent_idx_set", ":", "\n", "                    ", "sent_labels", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "sent_labels", ".", "append", "(", "0", ")", "\n", "", "", "doc_sent_labels", ".", "append", "(", "sent_labels", ")", "\n", "\n", "", "return", "event_idx2key_sent_idx_set", ",", "doc_sent_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEFeature.build_dag_info": [[400, 424], ["enumerate", "event_idx2field_idx2pre_path2cur_span_idx_set.append", "len", "range", "event_idx2field_idx2pre_path2cur_span_idx_set.append", "field_idx2pre_path2cur_span_idx_set.append", "pre_path2cur_span_idx_set[].add", "set"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "build_dag_info", "(", "event_arg_idxs_objs_list", ")", ":", "\n", "# event_idx -> field_idx -> pre_path -> {span_idx, ...}", "\n", "# pre_path is tuple of span_idx", "\n", "        ", "event_idx2field_idx2pre_path2cur_span_idx_set", "=", "[", "]", "\n", "for", "event_idx", ",", "event_arg_idxs_list", "in", "enumerate", "(", "event_arg_idxs_objs_list", ")", ":", "\n", "            ", "if", "event_arg_idxs_list", "is", "None", ":", "\n", "                ", "event_idx2field_idx2pre_path2cur_span_idx_set", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                ", "num_fields", "=", "len", "(", "event_arg_idxs_list", "[", "0", "]", ")", "\n", "# field_idx -> pre_path -> {span_idx, ...}", "\n", "field_idx2pre_path2cur_span_idx_set", "=", "[", "]", "\n", "for", "field_idx", "in", "range", "(", "num_fields", ")", ":", "\n", "                    ", "pre_path2cur_span_idx_set", "=", "{", "}", "\n", "for", "event_arg_idxs", "in", "event_arg_idxs_list", ":", "\n", "                        ", "pre_path", "=", "event_arg_idxs", "[", ":", "field_idx", "]", "\n", "span_idx", "=", "event_arg_idxs", "[", "field_idx", "]", "\n", "if", "pre_path", "not", "in", "pre_path2cur_span_idx_set", ":", "\n", "                            ", "pre_path2cur_span_idx_set", "[", "pre_path", "]", "=", "set", "(", ")", "\n", "", "pre_path2cur_span_idx_set", "[", "pre_path", "]", ".", "add", "(", "span_idx", ")", "\n", "", "field_idx2pre_path2cur_span_idx_set", ".", "append", "(", "pre_path2cur_span_idx_set", ")", "\n", "", "event_idx2field_idx2pre_path2cur_span_idx_set", ".", "append", "(", "field_idx2pre_path2cur_span_idx_set", ")", "\n", "\n", "", "", "return", "event_idx2field_idx2pre_path2cur_span_idx_set", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEFeature.is_multi_event": [[425, 434], ["len"], "methods", ["None"], ["", "def", "is_multi_event", "(", "self", ")", ":", "\n", "        ", "event_cnt", "=", "0", "\n", "for", "event_objs", "in", "self", ".", "event_arg_idxs_objs_list", ":", "\n", "            ", "if", "event_objs", "is", "not", "None", ":", "\n", "                ", "event_cnt", "+=", "len", "(", "event_objs", ")", "\n", "if", "event_cnt", ">", "1", ":", "\n", "                    ", "return", "True", "\n", "\n", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEFeatureConverter.__init__": [[437, 472], ["enumerate", "enumerate", "ner_task.NERFeatureConverter", "dee_helper.DEEFeatureConverter.event_type_list.append", "dee_helper.DEEFeatureConverter.event_fields_list.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "entity_label_list", ",", "event_type_fields_pairs", ",", "\n", "max_sent_len", ",", "max_sent_num", ",", "tokenizer", ",", "\n", "ner_fea_converter", "=", "None", ",", "include_cls", "=", "True", ",", "include_sep", "=", "True", ")", ":", "\n", "        ", "self", ".", "entity_label_list", "=", "entity_label_list", "\n", "self", ".", "event_type_fields_pairs", "=", "event_type_fields_pairs", "\n", "self", ".", "max_sent_len", "=", "max_sent_len", "\n", "self", ".", "max_sent_num", "=", "max_sent_num", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "truncate_doc_count", "=", "0", "# track how many docs have been truncated due to max_sent_num", "\n", "self", ".", "truncate_span_count", "=", "0", "# track how may spans have been truncated", "\n", "\n", "# label not in entity_label_list will be default 'O'", "\n", "# sent_len > max_sent_len will be truncated, and increase ner_fea_converter.truncate_freq", "\n", "if", "ner_fea_converter", "is", "None", ":", "\n", "            ", "self", ".", "ner_fea_converter", "=", "NERFeatureConverter", "(", "entity_label_list", ",", "self", ".", "max_sent_len", ",", "tokenizer", ",", "\n", "include_cls", "=", "include_cls", ",", "include_sep", "=", "include_sep", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ner_fea_converter", "=", "ner_fea_converter", "\n", "\n", "", "self", ".", "include_cls", "=", "include_cls", "\n", "self", ".", "include_sep", "=", "include_sep", "\n", "\n", "# prepare entity_label -> entity_index mapping", "\n", "self", ".", "entity_label2index", "=", "{", "}", "\n", "for", "entity_idx", ",", "entity_label", "in", "enumerate", "(", "self", ".", "entity_label_list", ")", ":", "\n", "            ", "self", ".", "entity_label2index", "[", "entity_label", "]", "=", "entity_idx", "\n", "\n", "# prepare event_type -> event_index and event_index -> event_fields mapping", "\n", "", "self", ".", "event_type2index", "=", "{", "}", "\n", "self", ".", "event_type_list", "=", "[", "]", "\n", "self", ".", "event_fields_list", "=", "[", "]", "\n", "for", "event_idx", ",", "(", "event_type", ",", "event_fields", ")", "in", "enumerate", "(", "self", ".", "event_type_fields_pairs", ")", ":", "\n", "            ", "self", ".", "event_type2index", "[", "event_type", "]", "=", "event_idx", "\n", "self", ".", "event_type_list", ".", "append", "(", "event_type", ")", "\n", "self", ".", "event_fields_list", ".", "append", "(", "event_fields", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEFeatureConverter.convert_example_to_feature": [[473, 594], ["isinstance", "enumerate", "len", "enumerate", "dee_helper.DEEFeature", "ner_task.NERExample", "dee_helper.DEEFeatureConverter.ner_fea_converter.convert_example_to_feature", "doc_token_id_mat.append", "doc_token_mask_mat.append", "doc_token_label_mat.append", "len", "len", "len", "dee_helper.DEEFeatureConverter.tokenizer.char_tokenize", "tuple", "len", "span_token_ids_list.append", "span_dranges_list.append", "len", "len", "len", "logger.warning", "len", "dee_helper.DEEFeatureConverter.tokenizer.convert_tokens_to_ids", "len", "event_type_labels.append", "event_arg_idxs_objs_list.append", "span_dranges.append", "isinstance", "event_type_labels.append", "event_arg_idxs_objs_list.append", "event_type_labels.append", "event_arg_idxs_objs_list.append", "event_arg_idxs.append", "event_arg_idxs_objs.append", "tuple"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEFeatureConverter.convert_example_to_feature", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.BERTChineseCharacterTokenizer.char_tokenize"], ["", "", "def", "convert_example_to_feature", "(", "self", ",", "ex_idx", ",", "dee_example", ",", "log_flag", "=", "False", ")", ":", "\n", "        ", "annguid", "=", "dee_example", ".", "guid", "\n", "assert", "isinstance", "(", "dee_example", ",", "DEEExample", ")", "\n", "\n", "# 1. prepare doc token-level feature", "\n", "\n", "# Size(num_sent_num, num_sent_len)", "\n", "doc_token_id_mat", "=", "[", "]", "# [[token_idx, ...], ...]", "\n", "doc_token_mask_mat", "=", "[", "]", "# [[token_mask, ...], ...]", "\n", "doc_token_label_mat", "=", "[", "]", "# [[token_label_id, ...], ...]", "\n", "\n", "for", "sent_idx", ",", "sent_text", "in", "enumerate", "(", "dee_example", ".", "sentences", ")", ":", "\n", "            ", "if", "sent_idx", ">=", "self", ".", "max_sent_num", ":", "\n", "# truncate doc whose number of sentences is longer than self.max_sent_num", "\n", "                ", "self", ".", "truncate_doc_count", "+=", "1", "\n", "break", "\n", "\n", "", "if", "sent_idx", "in", "dee_example", ".", "sent_idx2srange_mspan_mtype_tuples", ":", "\n", "                ", "srange_mspan_mtype_tuples", "=", "dee_example", ".", "sent_idx2srange_mspan_mtype_tuples", "[", "sent_idx", "]", "\n", "", "else", ":", "\n", "                ", "srange_mspan_mtype_tuples", "=", "[", "]", "\n", "\n", "", "ner_example", "=", "NERExample", "(", "\n", "'{}-{}'", ".", "format", "(", "annguid", ",", "sent_idx", ")", ",", "sent_text", ",", "srange_mspan_mtype_tuples", "\n", ")", "\n", "# sentence truncated count will be recorded incrementally", "\n", "ner_feature", "=", "self", ".", "ner_fea_converter", ".", "convert_example_to_feature", "(", "ner_example", ",", "log_flag", "=", "log_flag", ")", "\n", "\n", "doc_token_id_mat", ".", "append", "(", "ner_feature", ".", "input_ids", ")", "\n", "doc_token_mask_mat", ".", "append", "(", "ner_feature", ".", "input_masks", ")", "\n", "doc_token_label_mat", ".", "append", "(", "ner_feature", ".", "label_ids", ")", "\n", "\n", "", "assert", "len", "(", "doc_token_id_mat", ")", "==", "len", "(", "doc_token_mask_mat", ")", "==", "len", "(", "doc_token_label_mat", ")", "<=", "self", ".", "max_sent_num", "\n", "valid_sent_num", "=", "len", "(", "doc_token_id_mat", ")", "\n", "\n", "# 2. prepare span feature", "\n", "# spans are sorted by the first drange", "\n", "span_token_ids_list", "=", "[", "]", "\n", "span_dranges_list", "=", "[", "]", "\n", "mspan2span_idx", "=", "{", "}", "\n", "for", "mspan", "in", "dee_example", ".", "ann_valid_mspans", ":", "\n", "            ", "if", "mspan", "in", "mspan2span_idx", ":", "\n", "                ", "continue", "\n", "\n", "", "raw_dranges", "=", "dee_example", ".", "ann_mspan2dranges", "[", "mspan", "]", "\n", "char_base_s", "=", "1", "if", "self", ".", "include_cls", "else", "0", "\n", "char_max_end", "=", "self", ".", "max_sent_len", "-", "1", "if", "self", ".", "include_sep", "else", "self", ".", "max_sent_len", "\n", "span_dranges", "=", "[", "]", "\n", "for", "sent_idx", ",", "char_s", ",", "char_e", "in", "raw_dranges", ":", "\n", "                ", "if", "char_base_s", "+", "char_e", "<=", "char_max_end", "and", "sent_idx", "<", "self", ".", "max_sent_num", ":", "\n", "                    ", "span_dranges", ".", "append", "(", "(", "sent_idx", ",", "char_base_s", "+", "char_s", ",", "char_base_s", "+", "char_e", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "truncate_span_count", "+=", "1", "\n", "", "", "if", "len", "(", "span_dranges", ")", "==", "0", ":", "\n", "# span does not have any valid location in truncated sequences", "\n", "                ", "continue", "\n", "\n", "", "span_tokens", "=", "self", ".", "tokenizer", ".", "char_tokenize", "(", "mspan", ")", "\n", "span_token_ids", "=", "tuple", "(", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "span_tokens", ")", ")", "\n", "\n", "mspan2span_idx", "[", "mspan", "]", "=", "len", "(", "span_token_ids_list", ")", "\n", "span_token_ids_list", ".", "append", "(", "span_token_ids", ")", "\n", "span_dranges_list", ".", "append", "(", "span_dranges", ")", "\n", "", "assert", "len", "(", "span_token_ids_list", ")", "==", "len", "(", "span_dranges_list", ")", "==", "len", "(", "mspan2span_idx", ")", "\n", "\n", "if", "len", "(", "span_token_ids_list", ")", "==", "0", "and", "not", "dee_example", ".", "only_inference", ":", "\n", "            ", "logger", ".", "warning", "(", "'Neglect example {}'", ".", "format", "(", "ex_idx", ")", ")", "\n", "return", "None", "\n", "\n", "# 3. prepare doc-level event feature", "\n", "# event_type_labels: event_type_index -> event_type_exist_sign (1: exist, 0: no)", "\n", "# event_arg_idxs_objs_list: event_type_index -> event_obj_index -> event_arg_index -> arg_span_token_ids", "\n", "\n", "", "event_type_labels", "=", "[", "]", "# event_type_idx -> event_type_exist_sign (1 or 0)", "\n", "event_arg_idxs_objs_list", "=", "[", "]", "# event_type_idx -> event_obj_idx -> event_arg_idx -> span_idx", "\n", "for", "event_idx", ",", "event_type", "in", "enumerate", "(", "self", ".", "event_type_list", ")", ":", "\n", "            ", "event_fields", "=", "self", ".", "event_fields_list", "[", "event_idx", "]", "\n", "\n", "if", "event_type", "not", "in", "dee_example", ".", "event_type2event_objs", ":", "\n", "                ", "event_type_labels", ".", "append", "(", "0", ")", "\n", "event_arg_idxs_objs_list", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                ", "event_objs", "=", "dee_example", ".", "event_type2event_objs", "[", "event_type", "]", "\n", "\n", "event_arg_idxs_objs", "=", "[", "]", "\n", "for", "event_obj", "in", "event_objs", ":", "\n", "                    ", "assert", "isinstance", "(", "event_obj", ",", "BaseEvent", ")", "\n", "\n", "event_arg_idxs", "=", "[", "]", "\n", "any_valid_flag", "=", "False", "\n", "for", "field", "in", "event_fields", ":", "\n", "                        ", "arg_span", "=", "event_obj", ".", "field2content", "[", "field", "]", "\n", "\n", "if", "arg_span", "is", "None", "or", "arg_span", "not", "in", "mspan2span_idx", ":", "\n", "# arg_span can be none or valid span is truncated", "\n", "                            ", "arg_span_idx", "=", "None", "\n", "", "else", ":", "\n", "# when constructing data files,", "\n", "# must ensure event arg span is covered by the total span collections", "\n", "                            ", "arg_span_idx", "=", "mspan2span_idx", "[", "arg_span", "]", "\n", "any_valid_flag", "=", "True", "\n", "\n", "", "event_arg_idxs", ".", "append", "(", "arg_span_idx", ")", "\n", "\n", "", "if", "any_valid_flag", ":", "\n", "                        ", "event_arg_idxs_objs", ".", "append", "(", "tuple", "(", "event_arg_idxs", ")", ")", "\n", "\n", "", "", "if", "event_arg_idxs_objs", ":", "\n", "                    ", "event_type_labels", ".", "append", "(", "1", ")", "\n", "event_arg_idxs_objs_list", ".", "append", "(", "event_arg_idxs_objs", ")", "\n", "", "else", ":", "\n", "                    ", "event_type_labels", ".", "append", "(", "0", ")", "\n", "event_arg_idxs_objs_list", ".", "append", "(", "None", ")", "\n", "\n", "", "", "", "dee_feature", "=", "DEEFeature", "(", "\n", "annguid", ",", "ex_idx", ",", "doc_token_id_mat", ",", "doc_token_mask_mat", ",", "doc_token_label_mat", ",", "\n", "span_token_ids_list", ",", "span_dranges_list", ",", "event_type_labels", ",", "event_arg_idxs_objs_list", ",", "\n", "valid_sent_num", "=", "valid_sent_num", "\n", ")", "\n", "\n", "return", "dee_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEFeatureConverter.__call__": [[595, 621], ["enumerate", "logger.info", "dee_features.append", "dee_helper.DEEFeatureConverter.convert_example_to_feature", "dee_helper.DEEFeatureConverter.convert_example_to_feature", "len"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEFeatureConverter.convert_example_to_feature", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEFeatureConverter.convert_example_to_feature"], ["", "def", "__call__", "(", "self", ",", "dee_examples", ",", "log_example_num", "=", "0", ")", ":", "\n", "        ", "\"\"\"Convert examples to features suitable for document-level event extraction\"\"\"", "\n", "dee_features", "=", "[", "]", "\n", "self", ".", "truncate_doc_count", "=", "0", "\n", "self", ".", "truncate_span_count", "=", "0", "\n", "self", ".", "ner_fea_converter", ".", "truncate_count", "=", "0", "\n", "\n", "remove_ex_cnt", "=", "0", "\n", "for", "ex_idx", ",", "dee_example", "in", "enumerate", "(", "dee_examples", ")", ":", "\n", "            ", "if", "ex_idx", "<", "log_example_num", ":", "\n", "                ", "dee_feature", "=", "self", ".", "convert_example_to_feature", "(", "ex_idx", "-", "remove_ex_cnt", ",", "dee_example", ",", "log_flag", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "dee_feature", "=", "self", ".", "convert_example_to_feature", "(", "ex_idx", "-", "remove_ex_cnt", ",", "dee_example", ",", "log_flag", "=", "False", ")", "\n", "\n", "", "if", "dee_feature", "is", "None", ":", "\n", "                ", "remove_ex_cnt", "+=", "1", "\n", "continue", "\n", "\n", "", "dee_features", ".", "append", "(", "dee_feature", ")", "\n", "\n", "", "logger", ".", "info", "(", "'{} documents, ignore {} examples, truncate {} docs, {} sents, {} spans'", ".", "format", "(", "\n", "len", "(", "dee_examples", ")", ",", "remove_ex_cnt", ",", "\n", "self", ".", "truncate_doc_count", ",", "self", ".", "ner_fea_converter", ".", "truncate_count", ",", "self", ".", "truncate_span_count", "\n", ")", ")", "\n", "\n", "return", "dee_features", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.convert_dee_features_to_dataset": [[623, 628], ["isinstance", "len"], "function", ["None"], ["", "", "def", "convert_dee_features_to_dataset", "(", "dee_features", ")", ":", "\n", "# just view a list of doc_fea as the dataset, that only requires __len__, __getitem__", "\n", "    ", "assert", "len", "(", "dee_features", ")", ">", "0", "and", "isinstance", "(", "dee_features", "[", "0", "]", ",", "DEEFeature", ")", "\n", "\n", "return", "dee_features", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.prepare_doc_batch_dict": [[630, 637], ["getattr"], "function", ["None"], ["", "def", "prepare_doc_batch_dict", "(", "doc_fea_list", ")", ":", "\n", "    ", "doc_batch_keys", "=", "[", "'ex_idx'", ",", "'doc_token_ids'", ",", "'doc_token_masks'", ",", "'doc_token_labels'", ",", "'valid_sent_num'", "]", "\n", "doc_batch_dict", "=", "{", "}", "\n", "for", "key", "in", "doc_batch_keys", ":", "\n", "        ", "doc_batch_dict", "[", "key", "]", "=", "[", "getattr", "(", "doc_fea", ",", "key", ")", "for", "doc_fea", "in", "doc_fea_list", "]", "\n", "\n", "", "return", "doc_batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.measure_dee_prediction": [[639, 677], ["dee_metric.measure_event_table_filling", "isinstance", "pred_record_mat_list.append", "gold_record_mat_list.append", "utils.default_dump_json", "tuple", "tuple"], "function", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_metric.measure_event_table_filling", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.default_dump_json"], ["", "def", "measure_dee_prediction", "(", "event_type_fields_pairs", ",", "features", ",", "event_decode_results", ",", "\n", "dump_json_path", "=", "None", ")", ":", "\n", "    ", "pred_record_mat_list", "=", "[", "]", "\n", "gold_record_mat_list", "=", "[", "]", "\n", "for", "term", "in", "event_decode_results", ":", "\n", "        ", "ex_idx", ",", "pred_event_type_labels", ",", "pred_record_mat", "=", "term", "[", ":", "3", "]", "\n", "pred_record_mat", "=", "[", "\n", "[", "\n", "[", "\n", "tuple", "(", "arg_tup", ")", "if", "arg_tup", "is", "not", "None", "else", "None", "\n", "for", "arg_tup", "in", "pred_record", "\n", "]", "for", "pred_record", "in", "pred_records", "\n", "]", "if", "pred_records", "is", "not", "None", "else", "None", "\n", "for", "pred_records", "in", "pred_record_mat", "\n", "]", "\n", "doc_fea", "=", "features", "[", "ex_idx", "]", "\n", "assert", "isinstance", "(", "doc_fea", ",", "DEEFeature", ")", "\n", "gold_record_mat", "=", "[", "\n", "[", "\n", "[", "\n", "tuple", "(", "doc_fea", ".", "span_token_ids_list", "[", "arg_idx", "]", ")", "if", "arg_idx", "is", "not", "None", "else", "None", "\n", "for", "arg_idx", "in", "event_arg_idxs", "\n", "]", "for", "event_arg_idxs", "in", "event_arg_idxs_objs", "\n", "]", "if", "event_arg_idxs_objs", "is", "not", "None", "else", "None", "\n", "for", "event_arg_idxs_objs", "in", "doc_fea", ".", "event_arg_idxs_objs_list", "\n", "]", "\n", "\n", "pred_record_mat_list", ".", "append", "(", "pred_record_mat", ")", "\n", "gold_record_mat_list", ".", "append", "(", "gold_record_mat", ")", "\n", "\n", "", "g_eval_res", "=", "measure_event_table_filling", "(", "\n", "pred_record_mat_list", ",", "gold_record_mat_list", ",", "event_type_fields_pairs", ",", "dict_return", "=", "True", "\n", ")", "\n", "\n", "if", "dump_json_path", "is", "not", "None", ":", "\n", "        ", "default_dump_json", "(", "g_eval_res", ",", "dump_json_path", ")", "\n", "\n", "", "return", "g_eval_res", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.aggregate_task_eval_info": [[679, 714], ["logger.info", "os.listdir", "data_span_type2model_str2epoch_res_list.items", "fn.split", "model_str2epoch_res_list.items", "os.path.join", "logger.info", "utils.default_dump_pkl", "fn.startswith", "fn.endswith", "int", "os.path.join", "utils.default_load_json", "epoch_res_list.append", "epoch_res_list.sort", "len"], "function", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.default_dump_pkl", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.default_load_json"], ["", "def", "aggregate_task_eval_info", "(", "eval_dir_path", ",", "target_file_pre", "=", "'dee_eval'", ",", "target_file_suffix", "=", "'.json'", ",", "\n", "dump_name", "=", "'total_task_eval.pkl'", ",", "dump_flag", "=", "False", ")", ":", "\n", "    ", "\"\"\"Enumerate the evaluation directory to collect all dumped evaluation results\"\"\"", "\n", "logger", ".", "info", "(", "'Aggregate task evaluation info from {}'", ".", "format", "(", "eval_dir_path", ")", ")", "\n", "data_span_type2model_str2epoch_res_list", "=", "{", "}", "\n", "for", "fn", "in", "os", ".", "listdir", "(", "eval_dir_path", ")", ":", "\n", "        ", "fn_splits", "=", "fn", ".", "split", "(", "'.'", ")", "\n", "if", "fn", ".", "startswith", "(", "target_file_pre", ")", "and", "fn", ".", "endswith", "(", "target_file_suffix", ")", "and", "len", "(", "fn_splits", ")", "==", "6", ":", "\n", "            ", "_", ",", "data_type", ",", "span_type", ",", "model_str", ",", "epoch", ",", "_", "=", "fn_splits", "\n", "\n", "data_span_type", "=", "(", "data_type", ",", "span_type", ")", "\n", "if", "data_span_type", "not", "in", "data_span_type2model_str2epoch_res_list", ":", "\n", "                ", "data_span_type2model_str2epoch_res_list", "[", "data_span_type", "]", "=", "{", "}", "\n", "", "model_str2epoch_res_list", "=", "data_span_type2model_str2epoch_res_list", "[", "data_span_type", "]", "\n", "\n", "if", "model_str", "not", "in", "model_str2epoch_res_list", ":", "\n", "                ", "model_str2epoch_res_list", "[", "model_str", "]", "=", "[", "]", "\n", "", "epoch_res_list", "=", "model_str2epoch_res_list", "[", "model_str", "]", "\n", "\n", "epoch", "=", "int", "(", "epoch", ")", "\n", "fp", "=", "os", ".", "path", ".", "join", "(", "eval_dir_path", ",", "fn", ")", "\n", "eval_res", "=", "default_load_json", "(", "fp", ")", "\n", "\n", "epoch_res_list", ".", "append", "(", "(", "epoch", ",", "eval_res", ")", ")", "\n", "\n", "", "", "for", "data_span_type", ",", "model_str2epoch_res_list", "in", "data_span_type2model_str2epoch_res_list", ".", "items", "(", ")", ":", "\n", "        ", "for", "model_str", ",", "epoch_res_list", "in", "model_str2epoch_res_list", ".", "items", "(", ")", ":", "\n", "            ", "epoch_res_list", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "\n", "", "", "if", "dump_flag", ":", "\n", "        ", "dump_fp", "=", "os", ".", "path", ".", "join", "(", "eval_dir_path", ",", "dump_name", ")", "\n", "logger", ".", "info", "(", "'Dumping {} into {}'", ".", "format", "(", "dump_name", ",", "eval_dir_path", ")", ")", "\n", "default_dump_pkl", "(", "data_span_type2model_str2epoch_res_list", ",", "dump_fp", ")", "\n", "\n", "", "return", "data_span_type2model_str2epoch_res_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.print_total_eval_info": [[716, 798], ["print", "max", "mstr_bepoch_list.append", "align_temp.format", "align_temp.format", "align_temp.format", "align_temp.format", "align_temp.format", "align_temp.format", "print", "align_temp.format", "align_temp.format", "ps.append", "rs.append", "fs.append", "head_temp.format", "eval_temp.format", "head_temp.format", "eval_temp.format", "print", "head_temp.format", "eval_temp.format", "numpy.mean", "numpy.mean", "numpy.mean"], "function", ["None"], ["", "def", "print_total_eval_info", "(", "data_span_type2model_str2epoch_res_list", ",", "\n", "metric_type", "=", "'micro'", ",", "\n", "span_type", "=", "'pred_span'", ",", "\n", "model_strs", "=", "(", "'DCFEE-O'", ",", "'DCFEE-M'", ",", "'GreedyDec'", ",", "'Doc2EDAG'", ")", ",", "\n", "target_set", "=", "'test'", ")", ":", "\n", "    ", "\"\"\"Print the final performance by selecting the best epoch on dev set and emitting performance on test set\"\"\"", "\n", "dev_type", "=", "'dev'", "\n", "test_type", "=", "'test'", "\n", "avg_type2prf1_keys", "=", "{", "\n", "'macro'", ":", "(", "'MacroPrecision'", ",", "'MacroRecall'", ",", "'MacroF1'", ")", ",", "\n", "'micro'", ":", "(", "'MicroPrecision'", ",", "'MicroRecall'", ",", "'MicroF1'", ")", ",", "\n", "}", "\n", "\n", "name_key", "=", "'EventType'", "\n", "p_key", ",", "r_key", ",", "f_key", "=", "avg_type2prf1_keys", "[", "metric_type", "]", "\n", "\n", "def", "get_avg_event_score", "(", "epoch_res", ")", ":", "\n", "        ", "eval_res", "=", "epoch_res", "[", "1", "]", "\n", "avg_event_score", "=", "eval_res", "[", "-", "1", "]", "[", "f_key", "]", "\n", "\n", "return", "avg_event_score", "\n", "\n", "", "dev_model_str2epoch_res_list", "=", "data_span_type2model_str2epoch_res_list", "[", "(", "dev_type", ",", "span_type", ")", "]", "\n", "test_model_str2epoch_res_list", "=", "data_span_type2model_str2epoch_res_list", "[", "(", "test_type", ",", "span_type", ")", "]", "\n", "\n", "has_header", "=", "False", "\n", "mstr_bepoch_list", "=", "[", "]", "\n", "print", "(", "'='", "*", "15", ",", "'Final Performance (%) (avg_type={})'", ".", "format", "(", "metric_type", ")", ",", "'='", "*", "15", ")", "\n", "for", "model_str", "in", "model_strs", ":", "\n", "        ", "if", "model_str", "not", "in", "dev_model_str2epoch_res_list", "or", "model_str", "not", "in", "test_model_str2epoch_res_list", ":", "\n", "            ", "continue", "\n", "\n", "# get the best epoch on dev set", "\n", "", "dev_epoch_res_list", "=", "dev_model_str2epoch_res_list", "[", "model_str", "]", "\n", "best_dev_epoch", ",", "best_dev_res", "=", "max", "(", "dev_epoch_res_list", ",", "key", "=", "get_avg_event_score", ")", "\n", "\n", "test_epoch_res_list", "=", "test_model_str2epoch_res_list", "[", "model_str", "]", "\n", "best_test_epoch", "=", "None", "\n", "best_test_res", "=", "None", "\n", "for", "test_epoch", ",", "test_res", "in", "test_epoch_res_list", ":", "\n", "            ", "if", "test_epoch", "==", "best_dev_epoch", ":", "\n", "                ", "best_test_epoch", "=", "test_epoch", "\n", "best_test_res", "=", "test_res", "\n", "", "", "assert", "best_test_epoch", "is", "not", "None", "\n", "mstr_bepoch_list", ".", "append", "(", "(", "model_str", ",", "best_test_epoch", ")", ")", "\n", "\n", "if", "target_set", "==", "'test'", ":", "\n", "            ", "target_eval_res", "=", "best_test_res", "\n", "", "else", ":", "\n", "            ", "target_eval_res", "=", "best_dev_res", "\n", "\n", "", "align_temp", "=", "'{:20}'", "\n", "head_str", "=", "align_temp", ".", "format", "(", "'ModelType'", ")", "\n", "eval_str", "=", "align_temp", ".", "format", "(", "model_str", ")", "\n", "head_temp", "=", "' \\t {}'", "\n", "eval_temp", "=", "' \\t & {:.1f} & {:.1f} & {:.1f}'", "\n", "ps", "=", "[", "]", "\n", "rs", "=", "[", "]", "\n", "fs", "=", "[", "]", "\n", "for", "tgt_event_res", "in", "target_eval_res", "[", ":", "-", "1", "]", ":", "\n", "            ", "head_str", "+=", "align_temp", ".", "format", "(", "head_temp", ".", "format", "(", "tgt_event_res", "[", "0", "]", "[", "name_key", "]", ")", ")", "\n", "p", ",", "r", ",", "f1", "=", "(", "100", "*", "tgt_event_res", "[", "0", "]", "[", "key", "]", "for", "key", "in", "[", "p_key", ",", "r_key", ",", "f_key", "]", ")", "\n", "eval_str", "+=", "align_temp", ".", "format", "(", "eval_temp", ".", "format", "(", "p", ",", "r", ",", "f1", ")", ")", "\n", "ps", ".", "append", "(", "p", ")", "\n", "rs", ".", "append", "(", "r", ")", "\n", "fs", ".", "append", "(", "f1", ")", "\n", "\n", "", "head_str", "+=", "align_temp", ".", "format", "(", "head_temp", ".", "format", "(", "'Average'", ")", ")", "\n", "ap", ",", "ar", ",", "af1", "=", "(", "x", "for", "x", "in", "[", "np", ".", "mean", "(", "ps", ")", ",", "np", ".", "mean", "(", "rs", ")", ",", "np", ".", "mean", "(", "fs", ")", "]", ")", "\n", "eval_str", "+=", "align_temp", ".", "format", "(", "eval_temp", ".", "format", "(", "ap", ",", "ar", ",", "af1", ")", ")", "\n", "\n", "head_str", "+=", "align_temp", ".", "format", "(", "head_temp", ".", "format", "(", "'Total ({})'", ".", "format", "(", "metric_type", ")", ")", ")", "\n", "g_avg_res", "=", "target_eval_res", "[", "-", "1", "]", "\n", "ap", ",", "ar", ",", "af1", "=", "(", "100", "*", "g_avg_res", "[", "key", "]", "for", "key", "in", "[", "p_key", ",", "r_key", ",", "f_key", "]", ")", "\n", "eval_str", "+=", "align_temp", ".", "format", "(", "eval_temp", ".", "format", "(", "ap", ",", "ar", ",", "af1", ")", ")", "\n", "\n", "if", "not", "has_header", ":", "\n", "            ", "print", "(", "head_str", ")", "\n", "has_header", "=", "True", "\n", "", "print", "(", "eval_str", ")", "\n", "\n", "", "return", "mstr_bepoch_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.resume_decode_results": [[806, 813], ["decode_dump_template.format", "os.path.join", "logger.info", "utils.default_load_pkl"], "function", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.default_load_pkl"], ["def", "resume_decode_results", "(", "base_dir", ",", "data_type", ",", "span_type", ",", "model_str", ",", "epoch", ")", ":", "\n", "    ", "decode_fn", "=", "decode_dump_template", ".", "format", "(", "data_type", ",", "span_type", ",", "model_str", ",", "epoch", ")", "\n", "decode_fp", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "decode_fn", ")", "\n", "logger", ".", "info", "(", "'Resume decoded results from {}'", ".", "format", "(", "decode_fp", ")", ")", "\n", "decode_results", "=", "default_load_pkl", "(", "decode_fp", ")", "\n", "\n", "return", "decode_results", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.resume_eval_results": [[815, 822], ["eval_dump_template.format", "os.path.join", "logger.info", "utils.default_load_json"], "function", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.default_load_json"], ["", "def", "resume_eval_results", "(", "base_dir", ",", "data_type", ",", "span_type", ",", "model_str", ",", "epoch", ")", ":", "\n", "    ", "eval_fn", "=", "eval_dump_template", ".", "format", "(", "data_type", ",", "span_type", ",", "model_str", ",", "epoch", ")", "\n", "eval_fp", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "eval_fn", ")", "\n", "logger", ".", "info", "(", "'Resume eval results from {}'", ".", "format", "(", "eval_fp", ")", ")", "\n", "eval_results", "=", "default_load_json", "(", "eval_fp", ")", "\n", "\n", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.print_single_vs_multi_performance": [[824, 898], ["set", "set", "dee_helper.DEEExample.get_event_type_fields_pairs", "print", "align_temp.format", "align_temp.format", "align_temp.format", "print", "dee_helper.resume_decode_results", "dee_helper.measure_dee_prediction", "dee_helper.measure_dee_prediction", "enumerate", "etype_sf1_mf1_list.append", "align_temp.format", "head_temp.format", "head_temp.format", "align_temp.format", "numpy.mean", "numpy.mean", "align_temp.format", "print", "len", "len", "len", "len", "zip", "etype_sf1_mf1_list.append", "head_temp.format", "align_temp.format", "sf1s.append", "mf1s.append", "eval_temp.format", "doc_fea.is_multi_event", "eval_temp.format", "doc_fea.is_multi_event"], "function", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEExample.get_event_type_fields_pairs", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.resume_decode_results", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.measure_dee_prediction", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.measure_dee_prediction", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEFeature.is_multi_event", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEFeature.is_multi_event"], ["", "def", "print_single_vs_multi_performance", "(", "mstr_bepoch_list", ",", "base_dir", ",", "features", ",", "\n", "metric_type", "=", "'micro'", ",", "data_type", "=", "'test'", ",", "span_type", "=", "'pred_span'", ")", ":", "\n", "    ", "model_str2decode_results", "=", "{", "}", "\n", "for", "model_str", ",", "best_epoch", "in", "mstr_bepoch_list", ":", "\n", "        ", "model_str2decode_results", "[", "model_str", "]", "=", "resume_decode_results", "(", "\n", "base_dir", ",", "data_type", ",", "span_type", ",", "model_str", ",", "best_epoch", "\n", ")", "\n", "\n", "", "single_eid_set", "=", "set", "(", "[", "doc_fea", ".", "ex_idx", "for", "doc_fea", "in", "features", "if", "not", "doc_fea", ".", "is_multi_event", "(", ")", "]", ")", "\n", "multi_eid_set", "=", "set", "(", "[", "doc_fea", ".", "ex_idx", "for", "doc_fea", "in", "features", "if", "doc_fea", ".", "is_multi_event", "(", ")", "]", ")", "\n", "event_type_fields_pairs", "=", "DEEExample", ".", "get_event_type_fields_pairs", "(", ")", "\n", "event_type_list", "=", "[", "x", "for", "x", ",", "y", "in", "event_type_fields_pairs", "]", "\n", "\n", "name_key", "=", "'EventType'", "\n", "avg_type2f1_key", "=", "{", "\n", "'micro'", ":", "'MicroF1'", ",", "\n", "'macro'", ":", "'MacroF1'", ",", "\n", "}", "\n", "f1_key", "=", "avg_type2f1_key", "[", "metric_type", "]", "\n", "\n", "model_str2etype_sf1_mf1_list", "=", "{", "}", "\n", "for", "model_str", ",", "_", "in", "mstr_bepoch_list", ":", "\n", "        ", "total_decode_results", "=", "model_str2decode_results", "[", "model_str", "]", "\n", "\n", "single_decode_results", "=", "[", "dec_res", "for", "dec_res", "in", "total_decode_results", "if", "dec_res", "[", "0", "]", "in", "single_eid_set", "]", "\n", "assert", "len", "(", "single_decode_results", ")", "==", "len", "(", "single_eid_set", ")", "\n", "single_eval_res", "=", "measure_dee_prediction", "(", "\n", "event_type_fields_pairs", ",", "features", ",", "single_decode_results", "\n", ")", "\n", "\n", "multi_decode_results", "=", "[", "dec_res", "for", "dec_res", "in", "total_decode_results", "if", "dec_res", "[", "0", "]", "in", "multi_eid_set", "]", "\n", "assert", "len", "(", "multi_decode_results", ")", "==", "len", "(", "multi_eid_set", ")", "\n", "multi_eval_res", "=", "measure_dee_prediction", "(", "\n", "event_type_fields_pairs", ",", "features", ",", "multi_decode_results", "\n", ")", "\n", "\n", "etype_sf1_mf1_list", "=", "[", "]", "\n", "for", "event_idx", ",", "(", "se_res", ",", "me_res", ")", "in", "enumerate", "(", "zip", "(", "single_eval_res", "[", ":", "-", "1", "]", ",", "multi_eval_res", "[", ":", "-", "1", "]", ")", ")", ":", "\n", "            ", "assert", "se_res", "[", "0", "]", "[", "name_key", "]", "==", "me_res", "[", "0", "]", "[", "name_key", "]", "==", "event_type_list", "[", "event_idx", "]", "\n", "event_type", "=", "event_type_list", "[", "event_idx", "]", "\n", "single_f1", "=", "se_res", "[", "0", "]", "[", "f1_key", "]", "\n", "multi_f1", "=", "me_res", "[", "0", "]", "[", "f1_key", "]", "\n", "\n", "etype_sf1_mf1_list", ".", "append", "(", "(", "event_type", ",", "single_f1", ",", "multi_f1", ")", ")", "\n", "", "g_avg_se_res", "=", "single_eval_res", "[", "-", "1", "]", "\n", "g_avg_me_res", "=", "multi_eval_res", "[", "-", "1", "]", "\n", "etype_sf1_mf1_list", ".", "append", "(", "\n", "(", "'Total ({})'", ".", "format", "(", "metric_type", ")", ",", "g_avg_se_res", "[", "f1_key", "]", ",", "g_avg_me_res", "[", "f1_key", "]", ")", "\n", ")", "\n", "model_str2etype_sf1_mf1_list", "[", "model_str", "]", "=", "etype_sf1_mf1_list", "\n", "\n", "", "print", "(", "'='", "*", "15", ",", "'Single vs. Multi (%) (avg_type={})'", ".", "format", "(", "metric_type", ")", ",", "'='", "*", "15", ")", "\n", "align_temp", "=", "'{:20}'", "\n", "head_str", "=", "align_temp", ".", "format", "(", "'ModelType'", ")", "\n", "head_temp", "=", "' \\t {}'", "\n", "eval_temp", "=", "' \\t & {:.1f} & {:.1f} '", "\n", "for", "event_type", "in", "event_type_list", ":", "\n", "        ", "head_str", "+=", "align_temp", ".", "format", "(", "head_temp", ".", "format", "(", "event_type", ")", ")", "\n", "", "head_str", "+=", "align_temp", ".", "format", "(", "head_temp", ".", "format", "(", "'Total ({})'", ".", "format", "(", "metric_type", ")", ")", ")", "\n", "head_str", "+=", "align_temp", ".", "format", "(", "head_temp", ".", "format", "(", "'Average'", ")", ")", "\n", "print", "(", "head_str", ")", "\n", "\n", "for", "model_str", ",", "_", "in", "mstr_bepoch_list", ":", "\n", "        ", "eval_str", "=", "align_temp", ".", "format", "(", "model_str", ")", "\n", "sf1s", "=", "[", "]", "\n", "mf1s", "=", "[", "]", "\n", "for", "_", ",", "single_f1", ",", "multi_f1", "in", "model_str2etype_sf1_mf1_list", "[", "model_str", "]", ":", "\n", "            ", "eval_str", "+=", "align_temp", ".", "format", "(", "eval_temp", ".", "format", "(", "single_f1", "*", "100", ",", "multi_f1", "*", "100", ")", ")", "\n", "sf1s", ".", "append", "(", "single_f1", ")", "\n", "mf1s", ".", "append", "(", "multi_f1", ")", "\n", "", "avg_sf1", "=", "np", ".", "mean", "(", "sf1s", "[", ":", "-", "1", "]", ")", "\n", "avg_mf1", "=", "np", ".", "mean", "(", "mf1s", "[", ":", "-", "1", "]", ")", "\n", "eval_str", "+=", "align_temp", ".", "format", "(", "eval_temp", ".", "format", "(", "avg_sf1", "*", "100", ",", "avg_mf1", "*", "100", ")", ")", "\n", "print", "(", "eval_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.print_ablation_study": [[900, 979], ["dict", "dee_helper.resume_eval_results", "dee_helper.DEEExample.get_event_type_fields_pairs", "print", "align_temp.format", "align_temp.format", "align_temp.format", "print", "align_temp.format", "align_temp.format", "numpy.mean", "align_temp.format", "print", "print", "dee_helper.resume_eval_results", "align_temp.format", "head_temp.format", "head_temp.format", "align_temp.format", "bf1s.append", "eval_temp.format", "eval_temp.format", "head_temp.format", "eval_temp.format", "align_temp.format", "zip", "abs", "numpy.mean", "abs", "print", "f1ds.append", "abs", "align_temp.format", "align_temp.format", "align_temp.format", "align_temp.format", "align_temp.format", "align_temp.format", "inc_temp.format", "dec_temp.format", "inc_temp.format", "dec_temp.format", "inc_temp.format", "dec_temp.format"], "function", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.resume_eval_results", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEExample.get_event_type_fields_pairs", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.resume_eval_results"], ["", "", "def", "print_ablation_study", "(", "mstr_bepoch_list", ",", "base_dir", ",", "base_mstr", ",", "other_mstrs", ",", "\n", "metric_type", "=", "'micro'", ",", "data_type", "=", "'test'", ",", "span_type", "=", "'pred_span'", ")", ":", "\n", "    ", "model_str2best_epoch", "=", "dict", "(", "mstr_bepoch_list", ")", "\n", "if", "base_mstr", "not", "in", "model_str2best_epoch", ":", "\n", "        ", "print", "(", "'No base model type {}'", ".", "format", "(", "base_mstr", ")", ")", "\n", "return", "\n", "\n", "", "base_eval", "=", "resume_eval_results", "(", "base_dir", ",", "data_type", ",", "span_type", ",", "base_mstr", ",", "model_str2best_epoch", "[", "base_mstr", "]", ")", "\n", "model_str2eval_res", "=", "{", "\n", "model_str", ":", "resume_eval_results", "(", "base_dir", ",", "data_type", ",", "span_type", ",", "model_str", ",", "model_str2best_epoch", "[", "model_str", "]", ")", "\n", "for", "model_str", "in", "other_mstrs", "if", "model_str", "in", "model_str2best_epoch", "\n", "}", "\n", "\n", "event_type_fields_pairs", "=", "DEEExample", ".", "get_event_type_fields_pairs", "(", ")", "\n", "event_type_list", "=", "[", "x", "for", "x", ",", "y", "in", "event_type_fields_pairs", "]", "\n", "# name_key = 'EventType'", "\n", "# f1_key = 'AvgFieldF1'", "\n", "avg_type2f1_key", "=", "{", "\n", "'micro'", ":", "'MicroF1'", ",", "\n", "'macro'", ":", "'MacroF1'", "\n", "}", "\n", "f1_key", "=", "avg_type2f1_key", "[", "metric_type", "]", "\n", "\n", "print", "(", "'='", "*", "15", ",", "'Ablation Study (avg_type={})'", ".", "format", "(", "metric_type", ")", ",", "'='", "*", "15", ")", "\n", "align_temp", "=", "'{:20}'", "\n", "head_str", "=", "align_temp", ".", "format", "(", "'ModelType'", ")", "\n", "head_temp", "=", "' \\t {}'", "\n", "for", "event_type", "in", "event_type_list", ":", "\n", "        ", "head_str", "+=", "align_temp", ".", "format", "(", "head_temp", ".", "format", "(", "event_type", ")", ")", "\n", "", "head_str", "+=", "align_temp", ".", "format", "(", "head_temp", ".", "format", "(", "'Average ({})'", ".", "format", "(", "metric_type", ")", ")", ")", "\n", "head_str", "+=", "align_temp", ".", "format", "(", "head_temp", ".", "format", "(", "'Average'", ")", ")", "\n", "print", "(", "head_str", ")", "\n", "\n", "eval_temp", "=", "' \\t & {:.1f}'", "\n", "eval_str", "=", "align_temp", ".", "format", "(", "base_mstr", ")", "\n", "bf1s", "=", "[", "]", "\n", "for", "base_event_res", "in", "base_eval", "[", ":", "-", "1", "]", ":", "\n", "        ", "base_f1", "=", "base_event_res", "[", "0", "]", "[", "f1_key", "]", "\n", "eval_str", "+=", "align_temp", ".", "format", "(", "eval_temp", ".", "format", "(", "base_f1", "*", "100", ")", ")", "\n", "bf1s", ".", "append", "(", "base_f1", ")", "\n", "", "g_avg_bf1", "=", "base_eval", "[", "-", "1", "]", "[", "f1_key", "]", "\n", "eval_str", "+=", "align_temp", ".", "format", "(", "eval_temp", ".", "format", "(", "g_avg_bf1", "*", "100", ")", ")", "\n", "avg_bf1", "=", "np", ".", "mean", "(", "bf1s", ")", "\n", "eval_str", "+=", "align_temp", ".", "format", "(", "eval_temp", ".", "format", "(", "avg_bf1", "*", "100", ")", ")", "\n", "print", "(", "eval_str", ")", "\n", "\n", "inc_temp", "=", "' \\t & +{:.1f}'", "\n", "dec_temp", "=", "' \\t & -{:.1f}'", "\n", "for", "model_str", "in", "other_mstrs", ":", "\n", "        ", "if", "model_str", "in", "model_str2eval_res", ":", "\n", "            ", "eval_str", "=", "align_temp", ".", "format", "(", "model_str", ")", "\n", "cur_eval", "=", "model_str2eval_res", "[", "model_str", "]", "\n", "f1ds", "=", "[", "]", "\n", "for", "base_event_res", ",", "cur_event_res", "in", "zip", "(", "base_eval", "[", ":", "-", "1", "]", ",", "cur_eval", "[", ":", "-", "1", "]", ")", ":", "\n", "                ", "base_f1", "=", "base_event_res", "[", "0", "]", "[", "f1_key", "]", "\n", "cur_f1", "=", "cur_event_res", "[", "0", "]", "[", "f1_key", "]", "\n", "f1_diff", "=", "cur_f1", "-", "base_f1", "\n", "f1ds", ".", "append", "(", "f1_diff", ")", "\n", "f1_abs", "=", "abs", "(", "f1_diff", ")", "\n", "if", "f1_diff", ">=", "0", ":", "\n", "                    ", "eval_str", "+=", "align_temp", ".", "format", "(", "inc_temp", ".", "format", "(", "f1_abs", "*", "100", ")", ")", "\n", "", "else", ":", "\n", "                    ", "eval_str", "+=", "align_temp", ".", "format", "(", "dec_temp", ".", "format", "(", "f1_abs", "*", "100", ")", ")", "\n", "\n", "", "", "g_avg_f1_diff", "=", "cur_eval", "[", "-", "1", "]", "[", "f1_key", "]", "-", "base_eval", "[", "-", "1", "]", "[", "f1_key", "]", "\n", "g_avg_f1_abs", "=", "abs", "(", "g_avg_f1_diff", ")", "\n", "if", "g_avg_f1_diff", ">=", "0", ":", "\n", "                ", "eval_str", "+=", "align_temp", ".", "format", "(", "inc_temp", ".", "format", "(", "g_avg_f1_abs", "*", "100", ")", ")", "\n", "", "else", ":", "\n", "                ", "eval_str", "+=", "align_temp", ".", "format", "(", "dec_temp", ".", "format", "(", "g_avg_f1_abs", "*", "100", ")", ")", "\n", "\n", "", "avg_f1_diff", "=", "np", ".", "mean", "(", "f1ds", ")", "\n", "avg_f1_abs", "=", "abs", "(", "avg_f1_diff", ")", "\n", "if", "avg_f1_diff", ">=", "0", ":", "\n", "                ", "eval_str", "+=", "align_temp", ".", "format", "(", "inc_temp", ".", "format", "(", "avg_f1_abs", "*", "100", ")", ")", "\n", "", "else", ":", "\n", "                ", "eval_str", "+=", "align_temp", ".", "format", "(", "dec_temp", ".", "format", "(", "avg_f1_abs", "*", "100", ")", ")", "\n", "\n", "", "print", "(", "eval_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.EncoderDecoder.__init__": [[26, 33], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__"], ["def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ",", "src_embed", ",", "tgt_embed", ",", "generator", ")", ":", "\n", "        ", "super", "(", "EncoderDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "decoder", "=", "decoder", "\n", "self", ".", "src_embed", "=", "src_embed", "\n", "self", ".", "tgt_embed", "=", "tgt_embed", "\n", "self", ".", "generator", "=", "generator", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.EncoderDecoder.forward": [[34, 38], ["transformer.EncoderDecoder.decode", "transformer.EncoderDecoder.encode"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.EncoderDecoder.decode", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.EncoderDecoder.encode"], ["", "def", "forward", "(", "self", ",", "src", ",", "tgt", ",", "src_mask", ",", "tgt_mask", ")", ":", "\n", "        ", "\"\"\"Take in and process masked src and target sequences.\"\"\"", "\n", "return", "self", ".", "decode", "(", "self", ".", "encode", "(", "src", ",", "src_mask", ")", ",", "src_mask", ",", "\n", "tgt", ",", "tgt_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.EncoderDecoder.encode": [[39, 41], ["transformer.EncoderDecoder.encoder", "transformer.EncoderDecoder.src_embed"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "src", ",", "src_mask", ")", ":", "\n", "        ", "return", "self", ".", "encoder", "(", "self", ".", "src_embed", "(", "src", ")", ",", "src_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.EncoderDecoder.decode": [[42, 44], ["transformer.EncoderDecoder.decoder", "transformer.EncoderDecoder.tgt_embed"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "memory", ",", "src_mask", ",", "tgt", ",", "tgt_mask", ")", ":", "\n", "        ", "return", "self", ".", "decoder", "(", "self", ".", "tgt_embed", "(", "tgt", ")", ",", "memory", ",", "src_mask", ",", "tgt_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.Generator.__init__": [[48, 51], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "vocab", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "d_model", ",", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.Generator.forward": [[52, 54], ["torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "transformer.Generator.proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "log_softmax", "(", "self", ".", "proj", "(", "x", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.LayerNorm.__init__": [[59, 67], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__"], ["def", "__init__", "(", "self", ",", "features", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.a_2 = nn.Parameter(torch.ones(features))", "\n", "# self.b_2 = nn.Parameter(torch.zeros(features))", "\n", "# fit for bert optimizer", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "features", ")", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "features", ")", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.LayerNorm.forward": [[68, 73], ["x.mean", "x.std"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "x", ".", "std", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "# return self.a_2 * (x - mean) / (std + self.eps) + self.b_2", "\n", "return", "self", ".", "gamma", "*", "(", "x", "-", "mean", ")", "/", "(", "std", "+", "self", ".", "eps", ")", "+", "self", ".", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.Encoder.__init__": [[78, 82], ["torch.Module.__init__", "transformer.clones", "transformer.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.clones"], ["def", "__init__", "(", "self", ",", "layer", ",", "N", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "clones", "(", "layer", ",", "N", ")", "\n", "self", ".", "norm", "=", "LayerNorm", "(", "layer", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.Encoder.forward": [[83, 88], ["transformer.Encoder.norm", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "\"\"\"Pass the input (and mask) through each layer in turn.\"\"\"", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "mask", ")", "\n", "", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.SublayerConnection.__init__": [[95, 99], ["torch.Module.__init__", "transformer.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__"], ["def", "__init__", "(", "self", ",", "size", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "SublayerConnection", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm", "=", "LayerNorm", "(", "size", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.SublayerConnection.forward": [[100, 103], ["transformer.SublayerConnection.dropout", "sublayer", "transformer.SublayerConnection.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "sublayer", ")", ":", "\n", "        ", "\"\"\"Apply residual connection to any sublayer with the same size.\"\"\"", "\n", "return", "x", "+", "self", ".", "dropout", "(", "sublayer", "(", "self", ".", "norm", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.EncoderLayer.__init__": [[108, 114], ["torch.Module.__init__", "transformer.clones", "transformer.SublayerConnection"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.clones"], ["def", "__init__", "(", "self", ",", "size", ",", "self_attn", ",", "feed_forward", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "EncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "self_attn", "\n", "self", ".", "feed_forward", "=", "feed_forward", "\n", "self", ".", "sublayer", "=", "clones", "(", "SublayerConnection", "(", "size", ",", "dropout", ")", ",", "2", ")", "\n", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.EncoderLayer.forward": [[115, 119], ["transformer.EncoderLayer.self_attn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "\"\"\"Follow Figure 1 (left) for connections.\"\"\"", "\n", "x", "=", "self", ".", "sublayer", "[", "0", "]", "(", "x", ",", "lambda", "x", ":", "self", ".", "self_attn", "(", "x", ",", "x", ",", "x", ",", "mask", ")", ")", "\n", "return", "self", ".", "sublayer", "[", "1", "]", "(", "x", ",", "self", ".", "feed_forward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.Decoder.__init__": [[124, 128], ["torch.Module.__init__", "transformer.clones", "transformer.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.clones"], ["def", "__init__", "(", "self", ",", "layer", ",", "N", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "clones", "(", "layer", ",", "N", ")", "\n", "self", ".", "norm", "=", "LayerNorm", "(", "layer", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.Decoder.forward": [[129, 133], ["transformer.Decoder.norm", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "memory", ",", "src_mask", ",", "tgt_mask", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "memory", ",", "src_mask", ",", "tgt_mask", ")", "\n", "", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.DecoderLayer.__init__": [[138, 145], ["torch.Module.__init__", "transformer.clones", "transformer.SublayerConnection"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.clones"], ["def", "__init__", "(", "self", ",", "size", ",", "self_attn", ",", "src_attn", ",", "feed_forward", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "DecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "self_attn", "=", "self_attn", "\n", "self", ".", "src_attn", "=", "src_attn", "\n", "self", ".", "feed_forward", "=", "feed_forward", "\n", "self", ".", "sublayer", "=", "clones", "(", "SublayerConnection", "(", "size", ",", "dropout", ")", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.DecoderLayer.forward": [[146, 152], ["transformer.DecoderLayer.self_attn", "transformer.DecoderLayer.src_attn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "memory", ",", "src_mask", ",", "tgt_mask", ")", ":", "\n", "        ", "\"\"\"Follow Figure 1 (right) for connections.\"\"\"", "\n", "m", "=", "memory", "\n", "x", "=", "self", ".", "sublayer", "[", "0", "]", "(", "x", ",", "lambda", "x", ":", "self", ".", "self_attn", "(", "x", ",", "x", ",", "x", ",", "tgt_mask", ")", ")", "\n", "x", "=", "self", ".", "sublayer", "[", "1", "]", "(", "x", ",", "lambda", "x", ":", "self", ".", "src_attn", "(", "x", ",", "m", ",", "m", ",", "src_mask", ")", ")", "\n", "return", "self", ".", "sublayer", "[", "2", "]", "(", "x", ",", "self", ".", "feed_forward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.MultiHeadedAttention.__init__": [[174, 184], ["torch.Module.__init__", "transformer.clones", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.clones"], ["    ", "def", "__init__", "(", "self", ",", "h", ",", "d_model", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "\"\"\"Take in model size and number of heads.\"\"\"", "\n", "super", "(", "MultiHeadedAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "d_model", "%", "h", "==", "0", "\n", "# We assume d_v always equals d_k", "\n", "self", ".", "d_k", "=", "d_model", "//", "h", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "linears", "=", "clones", "(", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", ",", "4", ")", "\n", "self", ".", "attn", "=", "None", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.MultiHeadedAttention.forward": [[185, 207], ["query.size", "transformer.attention", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "mask.unsqueeze.unsqueeze.unsqueeze", "l().view().transpose", "zip", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "l().view", "x.transpose().contiguous().view.transpose().contiguous().view.transpose", "l"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.attention"], ["", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"Implements Figure 2\"\"\"", "\n", "if", "mask", "is", "not", "None", ":", "\n", "# Same mask applied to all h heads.", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "", "nbatches", "=", "query", ".", "size", "(", "0", ")", "\n", "\n", "# 1) Do all the linear projections in batch from d_model => h x d_k", "\n", "query", ",", "key", ",", "value", "=", "[", "\n", "l", "(", "x", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", ",", "self", ".", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "for", "l", ",", "x", "in", "zip", "(", "self", ".", "linears", ",", "(", "query", ",", "key", ",", "value", ")", ")", "\n", "]", "\n", "\n", "# 2) Apply attention on all the projected vectors in batch.", "\n", "x", ",", "self", ".", "attn", "=", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "mask", ",", "\n", "dropout", "=", "self", ".", "dropout", ")", "\n", "\n", "# 3) \"Concat\" using a view and apply a final linear.", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", "*", "self", ".", "d_k", ")", "\n", "\n", "return", "self", ".", "linears", "[", "-", "1", "]", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.PositionwiseFeedForward.__init__": [[212, 217], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_ff", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "PositionwiseFeedForward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_1", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_ff", ")", "\n", "self", ".", "w_2", "=", "nn", ".", "Linear", "(", "d_ff", ",", "d_model", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.PositionwiseFeedForward.forward": [[218, 220], ["transformer.PositionwiseFeedForward.w_2", "transformer.PositionwiseFeedForward.dropout", "torch.relu", "torch.relu", "torch.relu", "transformer.PositionwiseFeedForward.w_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "w_2", "(", "self", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "w_1", "(", "x", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.Embeddings.__init__": [[223, 227], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "vocab", ")", ":", "\n", "        ", "super", "(", "Embeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lut", "=", "nn", ".", "Embedding", "(", "vocab", ",", "d_model", ")", "\n", "self", ".", "d_model", "=", "d_model", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.Embeddings.forward": [[228, 230], ["transformer.Embeddings.lut", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lut", "(", "x", ")", "*", "math", ".", "sqrt", "(", "self", ".", "d_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.PositionalEncoding.__init__": [[235, 248], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "pe.unsqueeze.unsqueeze.unsqueeze", "transformer.PositionalEncoding.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "dropout", ",", "max_len", "=", "5000", ")", ":", "\n", "        ", "super", "(", "PositionalEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "# Compute the positional encodings once in log space.", "\n", "pe", "=", "torch", ".", "zeros", "(", "max_len", ",", "d_model", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ")", "*", "\n", "-", "(", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "pe", "=", "pe", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "register_buffer", "(", "'pe'", ",", "pe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.PositionalEncoding.forward": [[249, 252], ["transformer.PositionalEncoding.dropout", "transformer.PositionalEncoding.pe[].to", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "pe", "[", ":", ",", ":", "x", ".", "size", "(", "1", ")", "]", ".", "to", "(", "device", "=", "x", ".", "device", ")", "\n", "return", "self", ".", "dropout", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.clones": [[15, 18], ["torch.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["def", "clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "\"\"\"Produce N identical layers.\"\"\"", "\n", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "_", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.subsequent_mask": [[154, 159], ["numpy.triu().astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.triu", "numpy.ones"], "function", ["None"], ["", "", "def", "subsequent_mask", "(", "size", ")", ":", "\n", "    ", "\"\"\"Mask out subsequent positions.\"\"\"", "\n", "attn_shape", "=", "(", "1", ",", "size", ",", "size", ")", "\n", "subseq_mask", "=", "np", ".", "triu", "(", "np", ".", "ones", "(", "attn_shape", ")", ",", "k", "=", "1", ")", ".", "astype", "(", "'uint8'", ")", "\n", "return", "torch", ".", "from_numpy", "(", "subseq_mask", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.attention": [[161, 171], ["query.size", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "scores.masked_fill.masked_fill", "dropout", "torch.matmul", "torch.matmul", "torch.matmul", "key.transpose"], "function", ["None"], ["", "def", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ",", "dropout", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute 'Scaled Dot Product Attention'\"\"\"", "\n", "d_k", "=", "query", ".", "size", "(", "-", "1", ")", "\n", "scores", "=", "torch", ".", "matmul", "(", "query", ",", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "d_k", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "scores", "=", "scores", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", "\n", "", "p_attn", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "        ", "p_attn", "=", "dropout", "(", "p_attn", ")", "\n", "", "return", "torch", ".", "matmul", "(", "p_attn", ",", "value", ")", ",", "p_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.make_model": [[254, 273], ["transformer.MultiHeadedAttention", "transformer.PositionwiseFeedForward", "transformer.PositionalEncoding", "transformer.EncoderDecoder", "EncoderDecoder.parameters", "transformer.Encoder", "transformer.Decoder", "torch.Sequential", "torch.Sequential", "transformer.Generator", "transformer.EncoderLayer", "transformer.DecoderLayer", "transformer.Embeddings", "c", "transformer.Embeddings", "c", "p.dim", "torch.init.xavier_uniform", "c", "c", "c", "c", "c"], "function", ["None"], ["", "", "def", "make_model", "(", "src_vocab", ",", "tgt_vocab", ",", "num_layers", "=", "6", ",", "d_model", "=", "512", ",", "d_ff", "=", "2048", ",", "h", "=", "8", ",", "dropout", "=", "0.1", ")", ":", "\n", "    ", "\"\"\"Helper: Construct a model from hyperparameters.\"\"\"", "\n", "c", "=", "copy", ".", "deepcopy", "\n", "attn", "=", "MultiHeadedAttention", "(", "h", ",", "d_model", ")", "\n", "ff", "=", "PositionwiseFeedForward", "(", "d_model", ",", "d_ff", ",", "dropout", ")", "\n", "position", "=", "PositionalEncoding", "(", "d_model", ",", "dropout", ")", "\n", "model", "=", "EncoderDecoder", "(", "\n", "Encoder", "(", "EncoderLayer", "(", "d_model", ",", "c", "(", "attn", ")", ",", "c", "(", "ff", ")", ",", "dropout", ")", ",", "num_layers", ")", ",", "\n", "Decoder", "(", "DecoderLayer", "(", "d_model", ",", "c", "(", "attn", ")", ",", "c", "(", "attn", ")", ",", "c", "(", "ff", ")", ",", "dropout", ")", ",", "num_layers", ")", ",", "\n", "nn", ".", "Sequential", "(", "Embeddings", "(", "d_model", ",", "src_vocab", ")", ",", "c", "(", "position", ")", ")", ",", "\n", "nn", ".", "Sequential", "(", "Embeddings", "(", "d_model", ",", "tgt_vocab", ")", ",", "c", "(", "position", ")", ")", ",", "\n", "Generator", "(", "d_model", ",", "tgt_vocab", ")", ")", "\n", "\n", "# This was important from their code.", "\n", "# Initialize parameters with Glorot / fan_avg.", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform", "(", "p", ")", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.transformer.make_transformer_encoder": [[275, 286], ["transformer.MultiHeadedAttention", "transformer.PositionwiseFeedForward", "transformer.Encoder", "transformer.EncoderLayer", "dcopy", "dcopy"], "function", ["None"], ["", "def", "make_transformer_encoder", "(", "num_layers", ",", "hidden_size", ",", "ff_size", "=", "2048", ",", "num_att_heads", "=", "8", ",", "dropout", "=", "0.1", ")", ":", "\n", "    ", "dcopy", "=", "copy", ".", "deepcopy", "\n", "mh_att", "=", "MultiHeadedAttention", "(", "num_att_heads", ",", "hidden_size", ",", "dropout", "=", "dropout", ")", "\n", "pos_ff", "=", "PositionwiseFeedForward", "(", "hidden_size", ",", "ff_size", ",", "dropout", "=", "dropout", ")", "\n", "\n", "tranformer_encoder", "=", "Encoder", "(", "\n", "EncoderLayer", "(", "hidden_size", ",", "dcopy", "(", "mh_att", ")", ",", "dcopy", "(", "pos_ff", ")", ",", "dropout", "=", "dropout", ")", ",", "\n", "num_layers", "\n", ")", "\n", "\n", "return", "tranformer_encoder", "\n", "", ""]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETaskSetting.__init__": [[68, 71], ["base_task.TaskSetting.__init__"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DEETaskSetting", ",", "self", ")", ".", "__init__", "(", "\n", "self", ".", "base_key_attrs", ",", "self", ".", "base_attr_default_pairs", ",", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.__init__": [[77, 170], ["base_task.BasePytorchTask.__init__", "logging.getLogger", "dee_task.DEETask.logging", "utils.BERTChineseCharacterTokenizer.from_pretrained", "len", "dee_helper.DEEExample.get_entity_label_list", "dee_helper.DEEExample.get_event_type_fields_pairs", "dee_helper.DEEExampleLoader", "dee_task.DEETask._load_data", "dee_task.DEETask._decorate_model", "torch.Adam", "torch.Adam", "dee_task.DEETask.reset_teacher_prob", "dee_task.DEETask.logging", "dee_helper.DEEFeatureConverter", "dee_helper.DEEFeatureConverter", "len", "BertForBasicNER.from_pretrained.BertForBasicNER.from_pretrained", "dee_task.DEETask.setting.update_by_dict", "PseudoPooler", "dee_model.Doc2EDAGModel", "dee_task.DEETask.model.parameters", "dee_model.DCFEEModel", "Exception"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEExample.get_entity_label_list", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.DEEExample.get_event_type_fields_pairs", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask._load_data", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask._decorate_model", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.reset_teacher_prob", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.TaskSetting.update_by_dict"], ["def", "__init__", "(", "self", ",", "dee_setting", ",", "load_train", "=", "True", ",", "load_dev", "=", "True", ",", "load_test", "=", "True", ",", "\n", "parallel_decorate", "=", "True", ")", ":", "\n", "        ", "super", "(", "DEETask", ",", "self", ")", ".", "__init__", "(", "dee_setting", ",", "only_master_logging", "=", "dee_setting", ".", "only_master_logging", ")", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "self", ".", "logging", "(", "'Initializing {}'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n", "self", ".", "tokenizer", "=", "BERTChineseCharacterTokenizer", ".", "from_pretrained", "(", "self", ".", "setting", ".", "bert_model", ")", "\n", "self", ".", "setting", ".", "vocab_size", "=", "len", "(", "self", ".", "tokenizer", ".", "vocab", ")", "\n", "\n", "# get entity and event label name", "\n", "self", ".", "entity_label_list", "=", "DEEExample", ".", "get_entity_label_list", "(", ")", "\n", "self", ".", "event_type_fields_pairs", "=", "DEEExample", ".", "get_event_type_fields_pairs", "(", ")", "\n", "\n", "# build example loader", "\n", "self", ".", "example_loader_func", "=", "DEEExampleLoader", "(", "self", ".", "setting", ".", "rearrange_sent", ",", "self", ".", "setting", ".", "max_sent_len", ")", "\n", "\n", "# build feature converter", "\n", "if", "self", ".", "setting", ".", "use_bert", ":", "\n", "            ", "self", ".", "feature_converter_func", "=", "DEEFeatureConverter", "(", "\n", "self", ".", "entity_label_list", ",", "self", ".", "event_type_fields_pairs", ",", "\n", "self", ".", "setting", ".", "max_sent_len", ",", "self", ".", "setting", ".", "max_sent_num", ",", "self", ".", "tokenizer", ",", "\n", "include_cls", "=", "True", ",", "include_sep", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "feature_converter_func", "=", "DEEFeatureConverter", "(", "\n", "self", ".", "entity_label_list", ",", "self", ".", "event_type_fields_pairs", ",", "\n", "self", ".", "setting", ".", "max_sent_len", ",", "self", ".", "setting", ".", "max_sent_num", ",", "self", ".", "tokenizer", ",", "\n", "include_cls", "=", "False", ",", "include_sep", "=", "False", ",", "\n", ")", "\n", "\n", "\n", "# load data", "\n", "", "self", ".", "_load_data", "(", "\n", "self", ".", "example_loader_func", ",", "self", ".", "feature_converter_func", ",", "convert_dee_features_to_dataset", ",", "\n", "load_train", "=", "load_train", ",", "load_dev", "=", "load_dev", ",", "load_test", "=", "load_test", ",", "\n", ")", "\n", "# customized mini-batch producer", "\n", "self", ".", "custom_collate_fn", "=", "prepare_doc_batch_dict", "\n", "\n", "if", "not", "self", ".", "setting", ".", "use_token_role", ":", "\n", "# no token role conflicts with some settings", "\n", "            ", "assert", "self", ".", "setting", ".", "model_type", "==", "'Doc2EDAG'", "\n", "assert", "self", ".", "setting", ".", "add_greedy_dec", "is", "False", "\n", "self", ".", "setting", ".", "num_entity_labels", "=", "3", "# 0: 'O', 1: 'Begin', 2: 'Inside'", "\n", "", "else", ":", "\n", "            ", "self", ".", "setting", ".", "num_entity_labels", "=", "len", "(", "self", ".", "entity_label_list", ")", "\n", "\n", "", "if", "self", ".", "setting", ".", "use_bert", ":", "\n", "            ", "ner_model", "=", "BertForBasicNER", ".", "from_pretrained", "(", "\n", "self", ".", "setting", ".", "bert_model", ",", "num_entity_labels", "=", "self", ".", "setting", ".", "num_entity_labels", "\n", ")", "\n", "self", ".", "setting", ".", "update_by_dict", "(", "ner_model", ".", "config", ".", "__dict__", ")", "# BertConfig dictionary", "\n", "\n", "# substitute pooler in bert to support distributed training", "\n", "# because unused parameters will cause errors when conducting distributed all_reduce", "\n", "class", "PseudoPooler", "(", "object", ")", ":", "\n", "                ", "def", "__init__", "(", "self", ")", ":", "\n", "                    ", "pass", "\n", "\n", "", "def", "__call__", "(", "self", ",", "*", "x", ")", ":", "\n", "                    ", "return", "x", "\n", "", "", "del", "ner_model", ".", "bert", ".", "pooler", "\n", "ner_model", ".", "bert", ".", "pooler", "=", "PseudoPooler", "(", ")", "\n", "", "else", ":", "\n", "            ", "ner_model", "=", "None", "\n", "\n", "", "if", "self", ".", "setting", ".", "model_type", "==", "'Doc2EDAG'", ":", "\n", "            ", "self", ".", "model", "=", "Doc2EDAGModel", "(", "\n", "self", ".", "setting", ",", "self", ".", "event_type_fields_pairs", ",", "ner_model", "=", "ner_model", ",", "\n", ")", "\n", "", "elif", "self", ".", "setting", ".", "model_type", "==", "'DCFEE'", ":", "\n", "            ", "self", ".", "model", "=", "DCFEEModel", "(", "\n", "self", ".", "setting", ",", "self", ".", "event_type_fields_pairs", ",", "ner_model", "=", "ner_model", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Unsupported model type {}'", ".", "format", "(", "self", ".", "setting", ".", "model_type", ")", ")", "\n", "\n", "", "self", ".", "_decorate_model", "(", "parallel_decorate", "=", "parallel_decorate", ")", "\n", "\n", "# prepare optimizer", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "setting", ".", "learning_rate", ")", "\n", "\n", "# # resume option", "\n", "# if resume_model or resume_optimizer:", "\n", "#     self.resume_checkpoint(resume_model=resume_model, resume_optimizer=resume_optimizer)", "\n", "\n", "self", ".", "min_teacher_prob", "=", "None", "\n", "self", ".", "teacher_norm", "=", "None", "\n", "self", ".", "teacher_cnt", "=", "None", "\n", "self", ".", "teacher_base", "=", "None", "\n", "self", ".", "reset_teacher_prob", "(", ")", "\n", "\n", "self", ".", "logging", "(", "'Successfully initialize {}'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.reset_teacher_prob": [[171, 181], ["int", "len"], "methods", ["None"], ["", "def", "reset_teacher_prob", "(", "self", ")", ":", "\n", "        ", "self", ".", "min_teacher_prob", "=", "self", ".", "setting", ".", "min_teacher_prob", "\n", "if", "self", ".", "train_dataset", "is", "None", ":", "\n", "# avoid crashing when not loading training data", "\n", "            ", "num_step_per_epoch", "=", "500", "\n", "", "else", ":", "\n", "            ", "num_step_per_epoch", "=", "int", "(", "len", "(", "self", ".", "train_dataset", ")", "/", "self", ".", "setting", ".", "train_batch_size", ")", "\n", "", "self", ".", "teacher_norm", "=", "num_step_per_epoch", "*", "self", ".", "setting", ".", "schedule_epoch_length", "\n", "self", ".", "teacher_base", "=", "num_step_per_epoch", "*", "self", ".", "setting", ".", "schedule_epoch_start", "\n", "self", ".", "teacher_cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.get_teacher_prob": [[182, 194], ["max"], "methods", ["None"], ["", "def", "get_teacher_prob", "(", "self", ",", "batch_inc_flag", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "teacher_cnt", "<", "self", ".", "teacher_base", ":", "\n", "            ", "prob", "=", "1", "\n", "", "else", ":", "\n", "            ", "prob", "=", "max", "(", "\n", "self", ".", "min_teacher_prob", ",", "(", "self", ".", "teacher_norm", "-", "self", ".", "teacher_cnt", "+", "self", ".", "teacher_base", ")", "/", "self", ".", "teacher_norm", "\n", ")", "\n", "\n", "", "if", "batch_inc_flag", ":", "\n", "            ", "self", ".", "teacher_cnt", "+=", "1", "\n", "\n", "", "return", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.get_event_idx2entity_idx2field_idx": [[195, 221], ["enumerate", "enumerate", "enumerate", "entity_idx2entity_type.items"], "methods", ["None"], ["", "def", "get_event_idx2entity_idx2field_idx", "(", "self", ")", ":", "\n", "        ", "entity_idx2entity_type", "=", "{", "}", "\n", "for", "entity_idx", ",", "entity_label", "in", "enumerate", "(", "self", ".", "entity_label_list", ")", ":", "\n", "            ", "if", "entity_label", "==", "'O'", ":", "\n", "                ", "entity_type", "=", "entity_label", "\n", "", "else", ":", "\n", "                ", "entity_type", "=", "entity_label", "[", "2", ":", "]", "\n", "\n", "", "entity_idx2entity_type", "[", "entity_idx", "]", "=", "entity_type", "\n", "\n", "", "event_idx2entity_idx2field_idx", "=", "{", "}", "\n", "for", "event_idx", ",", "(", "event_name", ",", "field_types", ")", "in", "enumerate", "(", "self", ".", "event_type_fields_pairs", ")", ":", "\n", "            ", "field_type2field_idx", "=", "{", "}", "\n", "for", "field_idx", ",", "field_type", "in", "enumerate", "(", "field_types", ")", ":", "\n", "                ", "field_type2field_idx", "[", "field_type", "]", "=", "field_idx", "\n", "\n", "", "entity_idx2field_idx", "=", "{", "}", "\n", "for", "entity_idx", ",", "entity_type", "in", "entity_idx2entity_type", ".", "items", "(", ")", ":", "\n", "                ", "if", "entity_type", "in", "field_type2field_idx", ":", "\n", "                    ", "entity_idx2field_idx", "[", "entity_idx", "]", "=", "field_type2field_idx", "[", "entity_type", "]", "\n", "", "else", ":", "\n", "                    ", "entity_idx2field_idx", "[", "entity_idx", "]", "=", "None", "\n", "\n", "", "", "event_idx2entity_idx2field_idx", "[", "event_idx", "]", "=", "entity_idx2field_idx", "\n", "\n", "", "return", "event_idx2entity_idx2field_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.get_loss_on_batch": [[222, 247], ["dee_task.DEETask.get_teacher_prob", "dee_task.DEETask.model", "print", "print", "Exception"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.get_teacher_prob"], ["", "def", "get_loss_on_batch", "(", "self", ",", "doc_batch_dict", ",", "features", "=", "None", ")", ":", "\n", "        ", "if", "features", "is", "None", ":", "\n", "            ", "features", "=", "self", ".", "train_features", "\n", "\n", "# teacher_prob = 1", "\n", "# if use_gold_span, gold spans will be used every time", "\n", "# else, teacher_prob will ensure the proportion of using gold spans", "\n", "", "if", "self", ".", "setting", ".", "use_scheduled_sampling", ":", "\n", "            ", "use_gold_span", "=", "False", "\n", "teacher_prob", "=", "self", ".", "get_teacher_prob", "(", ")", "\n", "", "else", ":", "\n", "            ", "use_gold_span", "=", "True", "\n", "teacher_prob", "=", "1", "\n", "\n", "", "try", ":", "\n", "            ", "loss", "=", "self", ".", "model", "(", "\n", "doc_batch_dict", ",", "features", ",", "use_gold_span", "=", "use_gold_span", ",", "train_flag", "=", "True", ",", "teacher_prob", "=", "teacher_prob", "\n", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "'-'", "*", "30", ")", "\n", "print", "(", "'Exception occurs when processing '", "+", "\n", "','", ".", "join", "(", "[", "features", "[", "ex_idx", "]", ".", "guid", "for", "ex_idx", "in", "doc_batch_dict", "[", "'ex_idx'", "]", "]", ")", ")", "\n", "raise", "Exception", "(", "'Cannot get the loss'", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.get_event_decode_result_on_batch": [[248, 264], ["dee_task.DEETask.model", "Exception", "dee_task.DEETask.get_event_idx2entity_idx2field_idx"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.get_event_idx2entity_idx2field_idx"], ["", "def", "get_event_decode_result_on_batch", "(", "self", ",", "doc_batch_dict", ",", "features", "=", "None", ",", "use_gold_span", "=", "False", ",", "heuristic_type", "=", "None", ")", ":", "\n", "        ", "if", "features", "is", "None", ":", "\n", "            ", "raise", "Exception", "(", "'Features mush be provided'", ")", "\n", "\n", "", "if", "heuristic_type", "is", "None", ":", "\n", "            ", "event_idx2entity_idx2field_idx", "=", "None", "\n", "", "else", ":", "\n", "# this mapping is used to get span candidates for each event field", "\n", "            ", "event_idx2entity_idx2field_idx", "=", "self", ".", "get_event_idx2entity_idx2field_idx", "(", ")", "\n", "\n", "", "batch_eval_results", "=", "self", ".", "model", "(", "\n", "doc_batch_dict", ",", "features", ",", "use_gold_span", "=", "use_gold_span", ",", "train_flag", "=", "False", ",", "\n", "event_idx2entity_idx2field_idx", "=", "event_idx2entity_idx2field_idx", ",", "heuristic_type", "=", "heuristic_type", ",", "\n", ")", "\n", "\n", "return", "batch_eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.train": [[265, 295], ["dee_task.DEETask.logging", "dee_task.DEETask.reset_teacher_prob", "dee_task.DEETask.base_train", "dee_task.DEETask.logging", "range", "dee_task.DEETask.resume_cpt_at", "dee_task.DEETask.logging", "dee_task.DEETask.get_latest_cpt_epoch", "dee_task.DEETask.get_teacher_prob"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.reset_teacher_prob", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.base_train", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.resume_cpt_at", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.get_latest_cpt_epoch", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.get_teacher_prob"], ["", "def", "train", "(", "self", ",", "save_cpt_flag", "=", "True", ",", "resume_base_epoch", "=", "None", ")", ":", "\n", "        ", "self", ".", "logging", "(", "'='", "*", "20", "+", "'Start Training'", "+", "'='", "*", "20", ")", "\n", "self", ".", "reset_teacher_prob", "(", ")", "\n", "\n", "# resume_base_epoch arguments have higher priority over settings", "\n", "if", "resume_base_epoch", "is", "None", ":", "\n", "# whether to resume latest cpt when restarting, very useful for preemptive scheduling clusters", "\n", "            ", "if", "self", ".", "setting", ".", "resume_latest_cpt", ":", "\n", "                ", "resume_base_epoch", "=", "self", ".", "get_latest_cpt_epoch", "(", ")", "\n", "", "else", ":", "\n", "                ", "resume_base_epoch", "=", "0", "\n", "\n", "# resume cpt if possible", "\n", "", "", "if", "resume_base_epoch", ">", "0", ":", "\n", "            ", "self", ".", "logging", "(", "'Training starts from epoch {}'", ".", "format", "(", "resume_base_epoch", ")", ")", "\n", "for", "_", "in", "range", "(", "resume_base_epoch", ")", ":", "\n", "                ", "self", ".", "get_teacher_prob", "(", ")", "\n", "", "self", ".", "resume_cpt_at", "(", "resume_base_epoch", ",", "resume_model", "=", "True", ",", "resume_optimizer", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logging", "(", "'Training starts from scratch'", ")", "\n", "\n", "", "self", ".", "base_train", "(", "\n", "DEETask", ".", "get_loss_on_batch", ",", "\n", "kwargs_dict1", "=", "{", "}", ",", "\n", "epoch_eval_func", "=", "DEETask", ".", "resume_save_eval_at", ",", "\n", "kwargs_dict2", "=", "{", "\n", "'save_cpt_flag'", ":", "save_cpt_flag", ",", "\n", "'resume_cpt_flag'", ":", "False", ",", "\n", "}", ",", "\n", "base_epoch_idx", "=", "resume_base_epoch", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.resume_save_eval_at": [[297, 344], ["dee_task.DEETask.is_master_node", "dee_task.DEETask.logging", "enumerate", "print", "dee_task.DEETask.resume_cpt_at", "dee_task.DEETask.is_master_node", "dee_task.DEETask.save_cpt_at", "itertools.product", "dee_helper.decode_dump_template.format", "dee_helper.eval_dump_template.format", "dee_task.DEETask.eval", "dee_task.DEETask.get_teacher_prob", "itertools.product", "itertools.product", "dee_task.DEETask.in_distributed_mode", "dee_task.DEETask.setting.cpt_file_name.replace", "torch.get_rank", "torch.get_rank", "Exception", "torch.get_world_size", "torch.get_world_size"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.is_master_node", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.resume_cpt_at", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.is_master_node", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.save_cpt_at", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.eval", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.get_teacher_prob", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.in_distributed_mode"], ["", "def", "resume_save_eval_at", "(", "self", ",", "epoch", ",", "resume_cpt_flag", "=", "False", ",", "save_cpt_flag", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "is_master_node", "(", ")", ":", "\n", "            ", "print", "(", "'\\nPROGRESS: {:.2f}%\\n'", ".", "format", "(", "epoch", "/", "self", ".", "setting", ".", "num_train_epochs", "*", "100", ")", ")", "\n", "", "self", ".", "logging", "(", "'Current teacher prob {}'", ".", "format", "(", "self", ".", "get_teacher_prob", "(", "batch_inc_flag", "=", "False", ")", ")", ")", "\n", "\n", "if", "resume_cpt_flag", ":", "\n", "            ", "self", ".", "resume_cpt_at", "(", "epoch", ")", "\n", "\n", "", "if", "self", ".", "is_master_node", "(", ")", "and", "save_cpt_flag", ":", "\n", "            ", "self", ".", "save_cpt_at", "(", "epoch", ")", "\n", "\n", "", "if", "self", ".", "setting", ".", "model_type", "==", "'DCFEE'", ":", "\n", "            ", "eval_tasks", "=", "product", "(", "[", "'dev'", ",", "'test'", "]", ",", "[", "False", ",", "True", "]", ",", "[", "'DCFEE-O'", ",", "'DCFEE-M'", "]", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "setting", ".", "add_greedy_dec", ":", "\n", "                ", "eval_tasks", "=", "product", "(", "[", "'dev'", ",", "'test'", "]", ",", "[", "False", ",", "True", "]", ",", "[", "'GreedyDec'", ",", "None", "]", ")", "\n", "", "else", ":", "\n", "                ", "eval_tasks", "=", "product", "(", "[", "'dev'", ",", "'test'", "]", ",", "[", "False", ",", "True", "]", ",", "[", "None", "]", ")", "\n", "\n", "", "", "for", "task_idx", ",", "(", "data_type", ",", "gold_span_flag", ",", "heuristic_type", ")", "in", "enumerate", "(", "eval_tasks", ")", ":", "\n", "            ", "if", "self", ".", "in_distributed_mode", "(", ")", "and", "task_idx", "%", "dist", ".", "get_world_size", "(", ")", "!=", "dist", ".", "get_rank", "(", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "data_type", "==", "'test'", ":", "\n", "                ", "features", "=", "self", ".", "test_features", "\n", "dataset", "=", "self", ".", "test_dataset", "\n", "", "elif", "data_type", "==", "'dev'", ":", "\n", "                ", "features", "=", "self", ".", "dev_features", "\n", "dataset", "=", "self", ".", "dev_dataset", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "'Unsupported data type {}'", ".", "format", "(", "data_type", ")", ")", "\n", "\n", "", "if", "gold_span_flag", ":", "\n", "                ", "span_str", "=", "'gold_span'", "\n", "", "else", ":", "\n", "                ", "span_str", "=", "'pred_span'", "\n", "\n", "", "if", "heuristic_type", "is", "None", ":", "\n", "# store user-provided name", "\n", "                ", "model_str", "=", "self", ".", "setting", ".", "cpt_file_name", ".", "replace", "(", "'.'", ",", "'~'", ")", "\n", "", "else", ":", "\n", "                ", "model_str", "=", "heuristic_type", "\n", "\n", "", "decode_dump_name", "=", "decode_dump_template", ".", "format", "(", "data_type", ",", "span_str", ",", "model_str", ",", "epoch", ")", "\n", "eval_dump_name", "=", "eval_dump_template", ".", "format", "(", "data_type", ",", "span_str", ",", "model_str", ",", "epoch", ")", "\n", "self", ".", "eval", "(", "features", ",", "dataset", ",", "use_gold_span", "=", "gold_span_flag", ",", "heuristic_type", "=", "heuristic_type", ",", "\n", "dump_decode_pkl_name", "=", "decode_dump_name", ",", "dump_eval_json_name", "=", "eval_dump_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.save_cpt_at": [[345, 347], ["dee_task.DEETask.save_checkpoint"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.save_checkpoint"], ["", "", "def", "save_cpt_at", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "save_checkpoint", "(", "cpt_file_name", "=", "'{}.cpt.{}'", ".", "format", "(", "self", ".", "setting", ".", "cpt_file_name", ",", "epoch", ")", ",", "epoch", "=", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.resume_cpt_at": [[348, 351], ["dee_task.DEETask.resume_checkpoint"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.resume_checkpoint"], ["", "def", "resume_cpt_at", "(", "self", ",", "epoch", ",", "resume_model", "=", "True", ",", "resume_optimizer", "=", "False", ")", ":", "\n", "        ", "self", ".", "resume_checkpoint", "(", "cpt_file_name", "=", "'{}.cpt.{}'", ".", "format", "(", "self", ".", "setting", ".", "cpt_file_name", ",", "epoch", ")", ",", "\n", "resume_model", "=", "resume_model", ",", "resume_optimizer", "=", "resume_optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.get_latest_cpt_epoch": [[352, 371], ["os.listdir", "prev_epochs.sort", "fn.startswith", "len", "dee_task.DEETask.logging", "dee_task.DEETask.logging", "int", "prev_epochs.append", "str", "fn.split"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging"], ["", "def", "get_latest_cpt_epoch", "(", "self", ")", ":", "\n", "        ", "prev_epochs", "=", "[", "]", "\n", "for", "fn", "in", "os", ".", "listdir", "(", "self", ".", "setting", ".", "model_dir", ")", ":", "\n", "            ", "if", "fn", ".", "startswith", "(", "'{}.cpt'", ".", "format", "(", "self", ".", "setting", ".", "cpt_file_name", ")", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "epoch", "=", "int", "(", "fn", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ")", "\n", "prev_epochs", ".", "append", "(", "epoch", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "continue", "\n", "", "", "", "prev_epochs", ".", "sort", "(", ")", "\n", "\n", "if", "len", "(", "prev_epochs", ")", ">", "0", ":", "\n", "            ", "latest_epoch", "=", "prev_epochs", "[", "-", "1", "]", "\n", "self", ".", "logging", "(", "'Pick latest epoch {} from {}'", ".", "format", "(", "latest_epoch", ",", "str", "(", "prev_epochs", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "latest_epoch", "=", "0", "\n", "self", ".", "logging", "(", "'No previous epoch checkpoints, just start from scratch'", ")", "\n", "\n", "", "return", "latest_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.eval": [[372, 402], ["dee_task.DEETask.logging", "dee_task.DEETask.base_eval", "dee_task.DEETask.logging", "dee_helper.measure_dee_prediction", "os.path.join", "dee_task.DEETask.logging", "os.path.join", "dee_task.DEETask.logging"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.base_eval", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.measure_dee_prediction", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging"], ["", "def", "eval", "(", "self", ",", "features", ",", "dataset", ",", "use_gold_span", "=", "False", ",", "heuristic_type", "=", "None", ",", "\n", "dump_decode_pkl_name", "=", "None", ",", "dump_eval_json_name", "=", "None", ")", ":", "\n", "        ", "self", ".", "logging", "(", "'='", "*", "20", "+", "'Start Evaluation'", "+", "'='", "*", "20", ")", "\n", "\n", "if", "dump_decode_pkl_name", "is", "not", "None", ":", "\n", "            ", "dump_decode_pkl_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "setting", ".", "output_dir", ",", "dump_decode_pkl_name", ")", "\n", "self", ".", "logging", "(", "'Dumping decode results into {}'", ".", "format", "(", "dump_decode_pkl_name", ")", ")", "\n", "", "else", ":", "\n", "            ", "dump_decode_pkl_path", "=", "None", "\n", "\n", "", "total_event_decode_results", "=", "self", ".", "base_eval", "(", "\n", "dataset", ",", "DEETask", ".", "get_event_decode_result_on_batch", ",", "\n", "reduce_info_type", "=", "'none'", ",", "dump_pkl_path", "=", "dump_decode_pkl_path", ",", "\n", "features", "=", "features", ",", "use_gold_span", "=", "use_gold_span", ",", "heuristic_type", "=", "heuristic_type", ",", "\n", ")", "\n", "\n", "self", ".", "logging", "(", "'Measure DEE Prediction'", ")", "\n", "\n", "if", "dump_eval_json_name", "is", "not", "None", ":", "\n", "            ", "dump_eval_json_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "setting", ".", "output_dir", ",", "dump_eval_json_name", ")", "\n", "self", ".", "logging", "(", "'Dumping eval results into {}'", ".", "format", "(", "dump_eval_json_name", ")", ")", "\n", "", "else", ":", "\n", "            ", "dump_eval_json_path", "=", "None", "\n", "\n", "", "total_eval_res", "=", "measure_dee_prediction", "(", "\n", "self", ".", "event_type_fields_pairs", ",", "features", ",", "total_event_decode_results", ",", "\n", "dump_json_path", "=", "dump_eval_json_path", "\n", ")", "\n", "\n", "return", "total_event_decode_results", ",", "total_eval_res", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.reevaluate_dee_prediction": [[403, 450], ["dee_helper.logger.info", "os.listdir", "data_span_type2model_str2epoch_res_list.items", "fn.split", "model_str2epoch_res_list.items", "fn.startswith", "fn.endswith", "int", "os.path.join", "dee_task.DEETask.logging", "utils.default_load_pkl", "dee_helper.measure_dee_prediction", "epoch_res_list.append", "epoch_res_list.sort", "len", "dee_task.DEETask.logging", "utils.default_dump_json", "Exception", "os.path.join.rstrip"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.default_load_pkl", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_helper.measure_dee_prediction", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.default_dump_json"], ["", "def", "reevaluate_dee_prediction", "(", "self", ",", "target_file_pre", "=", "'dee_eval'", ",", "target_file_suffix", "=", "'.pkl'", ",", "\n", "dump_flag", "=", "False", ")", ":", "\n", "        ", "\"\"\"Enumerate the evaluation directory to collect all dumped evaluation results\"\"\"", "\n", "eval_dir_path", "=", "self", ".", "setting", ".", "output_dir", "\n", "logger", ".", "info", "(", "'Re-evaluate dee predictions from {}'", ".", "format", "(", "eval_dir_path", ")", ")", "\n", "data_span_type2model_str2epoch_res_list", "=", "{", "}", "\n", "for", "fn", "in", "os", ".", "listdir", "(", "eval_dir_path", ")", ":", "\n", "            ", "fn_splits", "=", "fn", ".", "split", "(", "'.'", ")", "\n", "if", "fn", ".", "startswith", "(", "target_file_pre", ")", "and", "fn", ".", "endswith", "(", "target_file_suffix", ")", "and", "len", "(", "fn_splits", ")", "==", "6", ":", "\n", "                ", "_", ",", "data_type", ",", "span_type", ",", "model_str", ",", "epoch", ",", "_", "=", "fn_splits", "\n", "\n", "data_span_type", "=", "(", "data_type", ",", "span_type", ")", "\n", "if", "data_span_type", "not", "in", "data_span_type2model_str2epoch_res_list", ":", "\n", "                    ", "data_span_type2model_str2epoch_res_list", "[", "data_span_type", "]", "=", "{", "}", "\n", "", "model_str2epoch_res_list", "=", "data_span_type2model_str2epoch_res_list", "[", "data_span_type", "]", "\n", "\n", "if", "model_str", "not", "in", "model_str2epoch_res_list", ":", "\n", "                    ", "model_str2epoch_res_list", "[", "model_str", "]", "=", "[", "]", "\n", "", "epoch_res_list", "=", "model_str2epoch_res_list", "[", "model_str", "]", "\n", "\n", "if", "data_type", "==", "'dev'", ":", "\n", "                    ", "features", "=", "self", ".", "dev_features", "\n", "", "elif", "data_type", "==", "'test'", ":", "\n", "                    ", "features", "=", "self", ".", "test_features", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "'Unsupported data type {}'", ".", "format", "(", "data_type", ")", ")", "\n", "\n", "", "epoch", "=", "int", "(", "epoch", ")", "\n", "fp", "=", "os", ".", "path", ".", "join", "(", "eval_dir_path", ",", "fn", ")", "\n", "self", ".", "logging", "(", "'Re-evaluating {}'", ".", "format", "(", "fp", ")", ")", "\n", "event_decode_results", "=", "default_load_pkl", "(", "fp", ")", "\n", "total_eval_res", "=", "measure_dee_prediction", "(", "\n", "event_type_fields_list", ",", "features", ",", "event_decode_results", "\n", ")", "\n", "\n", "if", "dump_flag", ":", "\n", "                    ", "fp", "=", "fp", ".", "rstrip", "(", "'.pkl'", ")", "+", "'.json'", "\n", "self", ".", "logging", "(", "'Dumping {}'", ".", "format", "(", "fp", ")", ")", "\n", "default_dump_json", "(", "total_eval_res", ",", "fp", ")", "\n", "\n", "", "epoch_res_list", ".", "append", "(", "(", "epoch", ",", "total_eval_res", ")", ")", "\n", "\n", "", "", "for", "data_span_type", ",", "model_str2epoch_res_list", "in", "data_span_type2model_str2epoch_res_list", ".", "items", "(", ")", ":", "\n", "            ", "for", "model_str", ",", "epoch_res_list", "in", "model_str2epoch_res_list", ".", "items", "(", ")", ":", "\n", "                ", "epoch_res_list", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "\n", "", "", "return", "data_span_type2model_str2epoch_res_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.BERTChineseCharacterTokenizer.__init__": [[51, 53], ["pytorch_pretrained_bert.BertTokenizer.__init__"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "do_lower_case", "=", "True", ")", ":", "\n", "        ", "super", "(", "BERTChineseCharacterTokenizer", ",", "self", ")", ".", "__init__", "(", "vocab_file", ",", "do_lower_case", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.BERTChineseCharacterTokenizer.char_tokenize": [[54, 65], ["list", "out_tokens.append", "out_tokens.append"], "methods", ["None"], ["", "def", "char_tokenize", "(", "self", ",", "text", ",", "unk_token", "=", "'[UNK]'", ")", ":", "\n", "        ", "\"\"\"perform pure character-based tokenization\"\"\"", "\n", "tokens", "=", "list", "(", "text", ")", "\n", "out_tokens", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "if", "token", "in", "self", ".", "vocab", ":", "\n", "                ", "out_tokens", ".", "append", "(", "token", ")", "\n", "", "else", ":", "\n", "                ", "out_tokens", ".", "append", "(", "unk_token", ")", "\n", "\n", "", "", "return", "out_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.default_load_json": [[16, 20], ["open", "json.load"], "function", ["None"], ["def", "default_load_json", "(", "json_file_path", ",", "encoding", "=", "'utf-8'", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "open", "(", "json_file_path", ",", "'r'", ",", "encoding", "=", "encoding", ")", "as", "fin", ":", "\n", "        ", "tmp_json", "=", "json", ".", "load", "(", "fin", ",", "**", "kwargs", ")", "\n", "", "return", "tmp_json", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.default_dump_json": [[22, 28], ["open", "json.dump"], "function", ["None"], ["", "def", "default_dump_json", "(", "obj", ",", "json_file_path", ",", "encoding", "=", "'utf-8'", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "2", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "open", "(", "json_file_path", ",", "'w'", ",", "encoding", "=", "encoding", ")", "as", "fout", ":", "\n", "        ", "json", ".", "dump", "(", "obj", ",", "fout", ",", "\n", "ensure_ascii", "=", "ensure_ascii", ",", "\n", "indent", "=", "indent", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.default_load_pkl": [[30, 35], ["open", "pickle.load"], "function", ["None"], ["", "", "def", "default_load_pkl", "(", "pkl_file_path", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "open", "(", "pkl_file_path", ",", "'rb'", ")", "as", "fin", ":", "\n", "        ", "obj", "=", "pickle", ".", "load", "(", "fin", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.default_dump_pkl": [[37, 40], ["open", "pickle.dump"], "function", ["None"], ["", "def", "default_dump_pkl", "(", "obj", ",", "pkl_file_path", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "open", "(", "pkl_file_path", ",", "'wb'", ")", "as", "fout", ":", "\n", "        ", "pickle", ".", "dump", "(", "obj", ",", "fout", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.set_basic_log_config": [[42, 46], ["logging.basicConfig"], "function", ["None"], ["", "", "def", "set_basic_log_config", "(", ")", ":", "\n", "    ", "logging", ".", "basicConfig", "(", "format", "=", "'%(asctime)s - %(levelname)s - %(name)s -   %(message)s'", ",", "\n", "datefmt", "=", "'%Y-%m-%d %H:%M:%S'", ",", "\n", "level", "=", "logging", ".", "INFO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.recursive_print_grad_fn": [[67, 75], ["print", "hasattr", "utils.recursive_print_grad_fn"], "function", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.recursive_print_grad_fn"], ["", "", "def", "recursive_print_grad_fn", "(", "grad_fn", ",", "prefix", "=", "''", ",", "depth", "=", "0", ",", "max_depth", "=", "50", ")", ":", "\n", "    ", "if", "depth", ">", "max_depth", ":", "\n", "        ", "return", "\n", "", "print", "(", "prefix", ",", "depth", ",", "grad_fn", ".", "__class__", ".", "__name__", ")", "\n", "if", "hasattr", "(", "grad_fn", ",", "'next_functions'", ")", ":", "\n", "        ", "for", "nf", "in", "grad_fn", ".", "next_functions", ":", "\n", "            ", "ngfn", "=", "nf", "[", "0", "]", "\n", "recursive_print_grad_fn", "(", "ngfn", ",", "prefix", "=", "prefix", "+", "'  '", ",", "depth", "=", "depth", "+", "1", ",", "max_depth", "=", "max_depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.strtobool": [[77, 91], ["str_val.lower.lower", "ValueError"], "function", ["None"], ["", "", "", "def", "strtobool", "(", "str_val", ")", ":", "\n", "    ", "\"\"\"Convert a string representation of truth to true (1) or false (0).\n\n    True values are 'y', 'yes', 't', 'true', 'on', and '1'; false values\n    are 'n', 'no', 'f', 'false', 'off', and '0'.  Raises ValueError if\n    'val' is anything else.\n    \"\"\"", "\n", "str_val", "=", "str_val", ".", "lower", "(", ")", "\n", "if", "str_val", "in", "(", "'y'", ",", "'yes'", ",", "'t'", ",", "'true'", ",", "'on'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "str_val", "in", "(", "'n'", ",", "'no'", ",", "'f'", ",", "'false'", ",", "'off'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"invalid truth value %r\"", "%", "(", "str_val", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.TaskSetting.__init__": [[63, 78], ["setattr", "setattr", "setattr", "setattr", "setattr"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "key_attrs", ",", "attr_default_pairs", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "key_attr", "in", "TaskSetting", ".", "base_key_attrs", ":", "\n", "            ", "setattr", "(", "self", ",", "key_attr", ",", "kwargs", "[", "key_attr", "]", ")", "\n", "\n", "", "for", "attr", ",", "val", "in", "TaskSetting", ".", "base_attr_default_pairs", ":", "\n", "            ", "setattr", "(", "self", ",", "attr", ",", "val", ")", "\n", "\n", "", "for", "key_attr", "in", "key_attrs", ":", "\n", "            ", "setattr", "(", "self", ",", "key_attr", ",", "kwargs", "[", "key_attr", "]", ")", "\n", "\n", "", "for", "attr", ",", "val", "in", "attr_default_pairs", ":", "\n", "            ", "if", "attr", "in", "kwargs", ":", "\n", "                ", "setattr", "(", "self", ",", "attr", ",", "kwargs", "[", "attr", "]", ")", "\n", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "attr", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.TaskSetting.update_by_dict": [[79, 82], ["config_dict.items", "setattr"], "methods", ["None"], ["", "", "", "def", "update_by_dict", "(", "self", ",", "config_dict", ")", ":", "\n", "        ", "for", "key", ",", "val", "in", "config_dict", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.TaskSetting.dump_to": [[83, 86], ["os.path.join", "utils.default_dump_json"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.default_dump_json"], ["", "", "def", "dump_to", "(", "self", ",", "dir_path", ",", "file_name", "=", "'task_setting.json'", ")", ":", "\n", "        ", "dump_fp", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "file_name", ")", "\n", "default_dump_json", "(", "self", ".", "__dict__", ",", "dump_fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.__init__": [[124, 166], ["logging.getLogger", "base_task.BasePytorchTask._check_setting_validity", "base_task.BasePytorchTask._init_device", "base_task.BasePytorchTask.reset_random_seed", "base_task.BasePytorchTask.in_distributed_mode", "torch.init_process_group", "torch.init_process_group", "torch.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "base_task.BasePytorchTask.logging", "torch.barrier", "torch.barrier", "torch.barrier", "torch.is_initialized", "torch.is_initialized", "torch.is_initialized", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank", "torch.get_rank", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask._check_setting_validity", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask._init_device", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.reset_random_seed", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.in_distributed_mode", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging"], ["def", "__init__", "(", "self", ",", "setting", ",", "only_master_logging", "=", "False", ")", ":", "\n", "        ", "self", ".", "setting", "=", "setting", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "self", ".", "only_master_logging", "=", "only_master_logging", "\n", "\n", "if", "self", ".", "in_distributed_mode", "(", ")", "and", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "# Initializes the distributed backend which will take care of sychronizing nodes/GPUs", "\n", "            ", "dist", ".", "init_process_group", "(", "backend", "=", "'nccl'", ")", "\n", "# dist.init_process_group(backend='gloo')  # 3 times slower than nccl for gpu training", "\n", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "setting", ".", "local_rank", ")", "\n", "self", ".", "logging", "(", "'World Size {} Rank {}, Local Rank {}, Device Num {}, Device {}'", ".", "format", "(", "\n", "dist", ".", "get_world_size", "(", ")", ",", "dist", ".", "get_rank", "(", ")", ",", "self", ".", "setting", ".", "local_rank", ",", "\n", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", ")", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "\n", "", "self", ".", "_check_setting_validity", "(", ")", "\n", "self", ".", "_init_device", "(", ")", "\n", "self", ".", "reset_random_seed", "(", ")", "\n", "self", ".", "summary_writer", "=", "None", "\n", "\n", "# ==> task-specific initialization", "\n", "# The following functions should be called specifically in inherited classes", "\n", "\n", "self", ".", "custom_collate_fn", "=", "None", "\n", "self", ".", "train_examples", "=", "None", "\n", "self", ".", "train_features", "=", "None", "\n", "self", ".", "train_dataset", "=", "None", "\n", "self", ".", "dev_examples", "=", "None", "\n", "self", ".", "dev_features", "=", "None", "\n", "self", ".", "dev_dataset", "=", "None", "\n", "self", ".", "test_examples", "=", "None", "\n", "self", ".", "test_features", "=", "None", "\n", "self", ".", "test_dataset", "=", "None", "\n", "# self._load_data()", "\n", "\n", "self", ".", "model", "=", "None", "\n", "# self._decorate_model()", "\n", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "num_train_steps", "=", "None", "\n", "self", ".", "model_named_parameters", "=", "None", "\n", "# self._init_bert_optimizer()", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging": [[169, 177], ["base_task.BasePytorchTask.in_distributed_mode", "base_task.BasePytorchTask.is_master_node", "base_task.BasePytorchTask.logger.log", "torch.get_rank", "torch.get_rank", "torch.get_rank", "base_task.BasePytorchTask.logger.log"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.in_distributed_mode", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.is_master_node"], ["", "def", "logging", "(", "self", ",", "msg", ",", "level", "=", "logging", ".", "INFO", ")", ":", "\n", "        ", "if", "self", ".", "in_distributed_mode", "(", ")", ":", "\n", "            ", "msg", "=", "'Rank {} {}'", ".", "format", "(", "dist", ".", "get_rank", "(", ")", ",", "msg", ")", "\n", "", "if", "self", ".", "only_master_logging", ":", "\n", "            ", "if", "self", ".", "is_master_node", "(", ")", ":", "\n", "                ", "self", ".", "logger", ".", "log", "(", "level", ",", "msg", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "log", "(", "level", ",", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask._check_setting_validity": [[178, 203], ["base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.logging", "int", "os.makedirs", "os.makedirs", "ValueError", "os.path.exists", "os.listdir", "base_task.BasePytorchTask.logging", "os.path.exists", "os.listdir", "base_task.BasePytorchTask.logging", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging"], ["", "", "def", "_check_setting_validity", "(", "self", ")", ":", "\n", "        ", "self", ".", "logging", "(", "'='", "*", "20", "+", "'Check Setting Validity'", "+", "'='", "*", "20", ")", "\n", "self", ".", "logging", "(", "'Setting: {}'", ".", "format", "(", "\n", "json", ".", "dumps", "(", "self", ".", "setting", ".", "__dict__", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "2", ")", "\n", ")", ")", "\n", "\n", "# check valid grad accumulate step", "\n", "if", "self", ".", "setting", ".", "gradient_accumulation_steps", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid gradient_accumulation_steps parameter: {}, should be >= 1\"", ".", "format", "(", "\n", "self", ".", "setting", ".", "gradient_accumulation_steps", ")", ")", "\n", "# reset train batch size", "\n", "", "self", ".", "setting", ".", "train_batch_size", "=", "int", "(", "self", ".", "setting", ".", "train_batch_size", "\n", "/", "self", ".", "setting", ".", "gradient_accumulation_steps", ")", "\n", "\n", "# check output dir", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "setting", ".", "output_dir", ")", "and", "os", ".", "listdir", "(", "self", ".", "setting", ".", "output_dir", ")", ":", "\n", "            ", "self", ".", "logging", "(", "\"Output directory ({}) already exists and is not empty.\"", ".", "format", "(", "self", ".", "setting", ".", "output_dir", ")", ",", "\n", "level", "=", "logging", ".", "WARNING", ")", "\n", "", "os", ".", "makedirs", "(", "self", ".", "setting", ".", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# check model dir", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "setting", ".", "model_dir", ")", "and", "os", ".", "listdir", "(", "self", ".", "setting", ".", "model_dir", ")", ":", "\n", "            ", "self", ".", "logging", "(", "\"Model directory ({}) already exists and is not empty.\"", ".", "format", "(", "self", ".", "setting", ".", "model_dir", ")", ",", "\n", "level", "=", "logging", ".", "WARNING", ")", "\n", "", "os", ".", "makedirs", "(", "self", ".", "setting", ".", "model_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask._init_device": [[204, 219], ["base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.logging", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.in_distributed_mode", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.in_distributed_mode"], ["", "def", "_init_device", "(", "self", ")", ":", "\n", "        ", "self", ".", "logging", "(", "'='", "*", "20", "+", "'Init Device'", "+", "'='", "*", "20", ")", "\n", "\n", "# set device", "\n", "if", "self", ".", "setting", ".", "local_rank", "==", "-", "1", "or", "self", ".", "setting", ".", "no_cuda", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "not", "self", ".", "setting", ".", "no_cuda", "else", "\"cpu\"", ")", "\n", "self", ".", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "self", ".", "setting", ".", "local_rank", ")", "\n", "self", ".", "n_gpu", "=", "1", "\n", "if", "self", ".", "setting", ".", "fp16", ":", "\n", "                ", "self", ".", "logging", "(", "\"16-bits training currently not supported in distributed training\"", ")", "\n", "self", ".", "setting", ".", "fp16", "=", "False", "# (see https://github.com/pytorch/pytorch/pull/13496)", "\n", "", "", "self", ".", "logging", "(", "\"device {} n_gpu {} distributed training {}\"", ".", "format", "(", "\n", "self", ".", "device", ",", "self", ".", "n_gpu", ",", "self", ".", "in_distributed_mode", "(", ")", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.reset_random_seed": [[221, 232], ["base_task.BasePytorchTask.logging", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging"], ["", "def", "reset_random_seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "if", "seed", "is", "None", ":", "\n", "            ", "seed", "=", "self", ".", "setting", ".", "seed", "\n", "", "self", ".", "logging", "(", "'='", "*", "20", "+", "'Reset Random Seed to {}'", ".", "format", "(", "seed", ")", "+", "'='", "*", "20", ")", "\n", "\n", "# set random seeds", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "self", ".", "n_gpu", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.is_master_node": [[233, 241], ["base_task.BasePytorchTask.in_distributed_mode", "torch.get_rank", "torch.get_rank", "torch.get_rank"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.in_distributed_mode"], ["", "", "def", "is_master_node", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "in_distributed_mode", "(", ")", ":", "\n", "            ", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                ", "return", "True", "\n", "", "else", ":", "\n", "                ", "return", "False", "\n", "", "", "else", ":", "\n", "            ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.in_distributed_mode": [[242, 244], ["None"], "methods", ["None"], ["", "", "def", "in_distributed_mode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "setting", ".", "local_rank", ">=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask._init_summary_writer": [[245, 256], ["base_task.BasePytorchTask.is_master_node", "base_task.BasePytorchTask.in_distributed_mode", "base_task.BasePytorchTask.logging", "datetime.datetime.datetime.now().strftime", "tensorboardX.SummaryWriter", "base_task.BasePytorchTask.logging", "torch.barrier", "torch.barrier", "torch.barrier", "datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.is_master_node", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.in_distributed_mode", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging"], ["", "def", "_init_summary_writer", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_master_node", "(", ")", ":", "\n", "            ", "self", ".", "logging", "(", "'Init Summary Writer'", ")", "\n", "current_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%b%d_%H-%M-%S'", ")", "\n", "sum_dir", "=", "'{}-{}'", ".", "format", "(", "self", ".", "setting", ".", "summary_dir_name", ",", "current_time", ")", "\n", "self", ".", "summary_writer", "=", "SummaryWriter", "(", "sum_dir", ")", "\n", "self", ".", "logging", "(", "'Writing summary into {}'", ".", "format", "(", "sum_dir", ")", ")", "\n", "\n", "", "if", "self", ".", "in_distributed_mode", "(", ")", ":", "\n", "# TODO: maybe this can be removed", "\n", "            ", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.load_example_feature_dataset": [[257, 277], ["os.path.exists", "Exception", "os.path.join", "base_task.BasePytorchTask.logging", "load_example_func", "convert_to_feature_func", "convert_to_dataset_func", "base_task.BasePytorchTask.logging"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging"], ["", "", "def", "load_example_feature_dataset", "(", "self", ",", "load_example_func", ",", "convert_to_feature_func", ",", "convert_to_dataset_func", ",", "\n", "file_name", "=", "None", ",", "file_path", "=", "None", ")", ":", "\n", "        ", "if", "file_name", "is", "None", "and", "file_path", "is", "None", ":", "\n", "            ", "raise", "Exception", "(", "'Either file name or file path should be provided'", ")", "\n", "\n", "", "if", "file_path", "is", "None", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "setting", ".", "data_dir", ",", "file_name", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "            ", "self", ".", "logging", "(", "'Load example feature dataset from {}'", ".", "format", "(", "file_path", ")", ")", "\n", "examples", "=", "load_example_func", "(", "file_path", ")", "\n", "features", "=", "convert_to_feature_func", "(", "examples", ")", "\n", "dataset", "=", "convert_to_dataset_func", "(", "features", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logging", "(", "'Warning: file does not exists, {}'", ".", "format", "(", "file_path", ")", ")", "\n", "examples", "=", "None", "\n", "features", "=", "None", "\n", "dataset", "=", "None", "\n", "\n", "", "return", "examples", ",", "features", ",", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask._load_data": [[278, 308], ["base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.load_example_feature_dataset", "base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.load_example_feature_dataset", "base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.load_example_feature_dataset", "base_task.BasePytorchTask.logging"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.load_example_feature_dataset", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.load_example_feature_dataset", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.load_example_feature_dataset", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging"], ["", "def", "_load_data", "(", "self", ",", "load_example_func", ",", "convert_to_feature_func", ",", "convert_to_dataset_func", ",", "\n", "load_train", "=", "True", ",", "load_dev", "=", "True", ",", "load_test", "=", "True", ")", ":", "\n", "        ", "self", ".", "logging", "(", "'='", "*", "20", "+", "'Load Task Data'", "+", "'='", "*", "20", ")", "\n", "# prepare data", "\n", "if", "load_train", ":", "\n", "            ", "self", ".", "logging", "(", "'Load train portion'", ")", "\n", "self", ".", "train_examples", ",", "self", ".", "train_features", ",", "self", ".", "train_dataset", "=", "self", ".", "load_example_feature_dataset", "(", "\n", "load_example_func", ",", "convert_to_feature_func", ",", "convert_to_dataset_func", ",", "\n", "file_name", "=", "self", ".", "setting", ".", "train_file_name", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logging", "(", "'Do not load train portion'", ")", "\n", "\n", "", "if", "load_dev", ":", "\n", "            ", "self", ".", "logging", "(", "'Load dev portion'", ")", "\n", "self", ".", "dev_examples", ",", "self", ".", "dev_features", ",", "self", ".", "dev_dataset", "=", "self", ".", "load_example_feature_dataset", "(", "\n", "load_example_func", ",", "convert_to_feature_func", ",", "convert_to_dataset_func", ",", "\n", "file_name", "=", "self", ".", "setting", ".", "dev_file_name", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logging", "(", "'Do not load dev portion'", ")", "\n", "\n", "", "if", "load_test", ":", "\n", "            ", "self", ".", "logging", "(", "'Load test portion'", ")", "\n", "self", ".", "test_examples", ",", "self", ".", "test_features", ",", "self", ".", "test_dataset", "=", "self", ".", "load_example_feature_dataset", "(", "\n", "load_example_func", ",", "convert_to_feature_func", ",", "convert_to_dataset_func", ",", "\n", "file_name", "=", "self", ".", "setting", ".", "test_file_name", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logging", "(", "'Do not load test portion'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.reload_data": [[309, 339], ["data_type.lower", "base_task.BasePytorchTask.load_example_feature_dataset", "data_type.lower", "base_task.BasePytorchTask.load_example_feature_dataset", "data_type.lower", "base_task.BasePytorchTask.load_example_feature_dataset", "data_type.lower", "base_task.BasePytorchTask.load_example_feature_dataset", "Exception"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.load_example_feature_dataset", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.load_example_feature_dataset", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.load_example_feature_dataset", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.load_example_feature_dataset"], ["", "", "def", "reload_data", "(", "self", ",", "load_example_func", ",", "convert_to_feature_func", ",", "convert_to_dataset_func", ",", "\n", "data_type", "=", "'return'", ",", "file_name", "=", "None", ",", "file_path", "=", "None", ")", ":", "\n", "        ", "\"\"\"Subclass should inherit this function to omit function arguments\"\"\"", "\n", "if", "data_type", ".", "lower", "(", ")", "==", "'train'", ":", "\n", "            ", "self", ".", "train_examples", ",", "self", ".", "train_features", ",", "self", ".", "train_dataset", "=", "self", ".", "load_example_feature_dataset", "(", "\n", "load_example_func", ",", "convert_to_feature_func", ",", "convert_to_dataset_func", ",", "\n", "file_name", "=", "file_name", ",", "file_path", "=", "file_path", "\n", ")", "\n", "", "elif", "data_type", ".", "lower", "(", ")", "==", "'dev'", ":", "\n", "            ", "self", ".", "dev_examples", ",", "self", ".", "dev_features", ",", "self", ".", "dev_dataset", "=", "self", ".", "load_example_feature_dataset", "(", "\n", "load_example_func", ",", "convert_to_feature_func", ",", "convert_to_dataset_func", ",", "\n", "file_name", "=", "file_name", ",", "file_path", "=", "file_path", "\n", ")", "\n", "", "elif", "data_type", ".", "lower", "(", ")", "==", "'test'", ":", "\n", "            ", "self", ".", "test_examples", ",", "self", ".", "test_features", ",", "self", ".", "test_dataset", "=", "self", ".", "load_example_feature_dataset", "(", "\n", "load_example_func", ",", "convert_to_feature_func", ",", "convert_to_dataset_func", ",", "\n", "file_name", "=", "file_name", ",", "file_path", "=", "file_path", "\n", ")", "\n", "", "elif", "data_type", ".", "lower", "(", ")", "==", "'return'", ":", "\n", "            ", "examples", ",", "features", ",", "dataset", "=", "self", ".", "load_example_feature_dataset", "(", "\n", "load_example_func", ",", "convert_to_feature_func", ",", "convert_to_dataset_func", ",", "\n", "file_name", "=", "file_name", ",", "file_path", "=", "file_path", ",", "\n", ")", "\n", "\n", "return", "examples", ",", "features", ",", "dataset", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Unexpected data type {}'", ".", "format", "(", "data_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask._decorate_model": [[340, 361], ["base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.model.to", "base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.model.half", "base_task.BasePytorchTask.in_distributed_mode", "base_task.BasePytorchTask.logging", "str", "torch.DistributedDataParallel", "torch.DistributedDataParallel", "torch.DistributedDataParallel", "base_task.BasePytorchTask.logging", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "base_task.BasePytorchTask.logging"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.in_distributed_mode", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging"], ["", "", "def", "_decorate_model", "(", "self", ",", "parallel_decorate", "=", "True", ")", ":", "\n", "        ", "self", ".", "logging", "(", "'='", "*", "20", "+", "'Decorate Model'", "+", "'='", "*", "20", ")", "\n", "\n", "if", "self", ".", "setting", ".", "fp16", ":", "\n", "            ", "self", ".", "model", ".", "half", "(", ")", "\n", "\n", "", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "logging", "(", "'Set model device to {}'", ".", "format", "(", "str", "(", "self", ".", "device", ")", ")", ")", "\n", "\n", "if", "parallel_decorate", ":", "\n", "            ", "if", "self", ".", "in_distributed_mode", "(", ")", ":", "\n", "                ", "self", ".", "model", "=", "para", ".", "DistributedDataParallel", "(", "self", ".", "model", ",", "\n", "device_ids", "=", "[", "self", ".", "setting", ".", "local_rank", "]", ",", "\n", "output_device", "=", "self", ".", "setting", ".", "local_rank", ")", "\n", "self", ".", "logging", "(", "'Wrap distributed data parallel'", ")", "\n", "# self.logging('In Distributed Mode, but do not use DistributedDataParallel Wrapper')", "\n", "", "elif", "self", ".", "n_gpu", ">", "1", ":", "\n", "                ", "self", ".", "model", "=", "para", ".", "DataParallel", "(", "self", ".", "model", ")", "\n", "self", ".", "logging", "(", "'Wrap data parallel'", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "logging", "(", "'Do not wrap parallel layers'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask._init_bert_optimizer": [[362, 366], ["base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.reset_bert_optimizer"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.reset_bert_optimizer"], ["", "", "def", "_init_bert_optimizer", "(", "self", ")", ":", "\n", "        ", "self", ".", "logging", "(", "'='", "*", "20", "+", "'Init Bert Optimizer'", "+", "'='", "*", "20", ")", "\n", "self", ".", "optimizer", ",", "self", ".", "num_train_steps", ",", "self", ".", "model_named_parameters", "=", "self", ".", "reset_bert_optimizer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.reset_bert_optimizer": [[367, 401], ["int", "pytorch_pretrained_bert.optimization.BertAdam", "list", "param.clone().detach().to().float().requires_grad_", "base_task.BasePytorchTask.model.named_parameters", "base_task.BasePytorchTask.model.named_parameters", "param.clone().detach().to().requires_grad_", "base_task.BasePytorchTask.model.named_parameters", "len", "param.clone().detach().to().float", "param.clone().detach().to", "param.clone().detach().to", "param.clone().detach", "param.clone().detach", "param.clone", "param.clone"], "methods", ["None"], ["", "def", "reset_bert_optimizer", "(", "self", ")", ":", "\n", "# Prepare optimizer", "\n", "        ", "if", "self", ".", "setting", ".", "fp16", ":", "\n", "            ", "model_named_parameters", "=", "[", "(", "n", ",", "param", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "to", "(", "'cpu'", ")", ".", "float", "(", ")", ".", "requires_grad_", "(", ")", ")", "\n", "for", "n", ",", "param", "in", "self", ".", "model", ".", "named_parameters", "(", ")", "]", "\n", "", "elif", "self", ".", "setting", ".", "optimize_on_cpu", ":", "\n", "            ", "model_named_parameters", "=", "[", "(", "n", ",", "param", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "to", "(", "'cpu'", ")", ".", "requires_grad_", "(", ")", ")", "\n", "for", "n", ",", "param", "in", "self", ".", "model", ".", "named_parameters", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "model_named_parameters", "=", "list", "(", "self", ".", "model", ".", "named_parameters", "(", ")", ")", "\n", "\n", "", "no_decay", "=", "[", "'bias'", ",", "'gamma'", ",", "'beta'", "]", "\n", "optimizer_grouped_parameters", "=", "[", "\n", "{", "\n", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "model_named_parameters", "if", "n", "not", "in", "no_decay", "]", ",", "\n", "'weight_decay_rate'", ":", "0.01", "\n", "}", ",", "\n", "{", "\n", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "model_named_parameters", "if", "n", "in", "no_decay", "]", ",", "\n", "'weight_decay_rate'", ":", "0.0", "\n", "}", "\n", "]", "\n", "\n", "num_train_steps", "=", "int", "(", "len", "(", "self", ".", "train_examples", ")", "\n", "/", "self", ".", "setting", ".", "train_batch_size", "\n", "/", "self", ".", "setting", ".", "gradient_accumulation_steps", "\n", "*", "self", ".", "setting", ".", "num_train_epochs", ")", "\n", "\n", "optimizer", "=", "BertAdam", "(", "optimizer_grouped_parameters", ",", "\n", "lr", "=", "self", ".", "setting", ".", "learning_rate", ",", "\n", "warmup", "=", "self", ".", "setting", ".", "warmup_proportion", ",", "\n", "t_total", "=", "num_train_steps", ")", "\n", "\n", "return", "optimizer", ",", "num_train_steps", ",", "model_named_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.prepare_data_loader": [[402, 420], ["torch.utils.data.RandomSampler", "torch.utils.data.RandomSampler", "torch.utils.data.RandomSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "prepare_data_loader", "(", "self", ",", "dataset", ",", "batch_size", ",", "rand_flag", "=", "True", ")", ":", "\n", "# prepare data loader", "\n", "        ", "if", "rand_flag", ":", "\n", "            ", "data_sampler", "=", "RandomSampler", "(", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "data_sampler", "=", "SequentialSampler", "(", "dataset", ")", "\n", "\n", "", "if", "self", ".", "custom_collate_fn", "is", "None", ":", "\n", "            ", "dataloader", "=", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "data_sampler", ")", "\n", "", "else", ":", "\n", "            ", "dataloader", "=", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "data_sampler", ",", "\n", "collate_fn", "=", "self", ".", "custom_collate_fn", ")", "\n", "\n", "", "return", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.prepare_dist_data_loader": [[421, 436], ["torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler.set_epoch", "torch.utils.data.distributed.DistributedSampler.set_epoch", "torch.utils.data.distributed.DistributedSampler.set_epoch", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "prepare_dist_data_loader", "(", "self", ",", "dataset", ",", "batch_size", ",", "epoch", "=", "0", ")", ":", "\n", "# prepare distributed data loader", "\n", "        ", "data_sampler", "=", "DistributedSampler", "(", "dataset", ")", "\n", "data_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "if", "self", ".", "custom_collate_fn", "is", "None", ":", "\n", "            ", "dataloader", "=", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "data_sampler", ")", "\n", "", "else", ":", "\n", "            ", "dataloader", "=", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "data_sampler", ",", "\n", "collate_fn", "=", "self", ".", "custom_collate_fn", ")", "\n", "", "return", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.get_current_train_batch_size": [[437, 444], ["base_task.BasePytorchTask.in_distributed_mode", "max", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.in_distributed_mode"], ["", "def", "get_current_train_batch_size", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "in_distributed_mode", "(", ")", ":", "\n", "            ", "train_batch_size", "=", "max", "(", "self", ".", "setting", ".", "train_batch_size", "//", "dist", ".", "get_world_size", "(", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "train_batch_size", "=", "self", ".", "setting", ".", "train_batch_size", "\n", "\n", "", "return", "train_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.set_batch_to_device": [[445, 475], ["isinstance", "batch.to.to.to", "isinstance", "batch.to.to.items", "isinstance", "isinstance", "Exception", "value.to", "isinstance", "isinstance", "isinstance", "base_task.BasePytorchTask.set_batch_to_device", "new_batch.append", "type", "value.to", "isinstance", "isinstance", "new_batch.append", "new_batch.append", "base_task.BasePytorchTask.set_batch_to_device"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.set_batch_to_device", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.set_batch_to_device"], ["", "def", "set_batch_to_device", "(", "self", ",", "batch", ")", ":", "\n", "# move mini-batch data to the proper device", "\n", "        ", "if", "isinstance", "(", "batch", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "return", "batch", "\n", "", "elif", "isinstance", "(", "batch", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "batch", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "batch", "[", "key", "]", "=", "value", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", "or", "isinstance", "(", "value", ",", "container_abcs", ".", "Sequence", ")", ":", "\n", "                    ", "batch", "[", "key", "]", "=", "self", ".", "set_batch_to_device", "(", "value", ")", "\n", "\n", "", "", "return", "batch", "\n", "", "elif", "isinstance", "(", "batch", ",", "container_abcs", ".", "Sequence", ")", ":", "\n", "# batch = [", "\n", "#     t.to(self.device) if isinstance(t, torch.Tensor) else t for t in batch", "\n", "# ]", "\n", "            ", "new_batch", "=", "[", "]", "\n", "for", "value", "in", "batch", ":", "\n", "                ", "if", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "new_batch", ".", "append", "(", "value", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", "or", "isinstance", "(", "value", ",", "container_abcs", ".", "Sequence", ")", ":", "\n", "                    ", "new_batch", ".", "append", "(", "self", ".", "set_batch_to_device", "(", "value", ")", ")", "\n", "", "else", ":", "\n", "                    ", "new_batch", ".", "append", "(", "value", ")", "\n", "\n", "", "", "return", "new_batch", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Unsupported batch type {}'", ".", "format", "(", "type", "(", "batch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.base_train": [[476, 574], ["base_task.BasePytorchTask.get_current_train_batch_size", "base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.in_distributed_mode", "base_task.BasePytorchTask._init_summary_writer", "base_task.BasePytorchTask.prepare_data_loader", "base_task.BasePytorchTask.model.train", "base_task.BasePytorchTask.logging", "tqdm.tqdm.trange", "round", "base_task.BasePytorchTask.logging", "int", "base_task.BasePytorchTask.in_distributed_mode", "len", "base_task.BasePytorchTask.prepare_dist_data_loader", "base_task.BasePytorchTask.is_master_node", "enumerate", "base_task.BasePytorchTask.set_batch_to_device", "get_loss_func", "loss.mean.mean.backward", "loss.mean.mean.item", "base_task.BasePytorchTask.is_master_node", "epoch_eval_func", "torch.get_rank", "torch.get_rank", "torch.get_rank", "enumerate", "enumerate", "tqdm.tqdm.tqdm", "loss.mean.mean.mean", "base_task.BasePytorchTask.summary_writer.add_scalar", "base_task.BasePytorchTask.model.zero_grad", "len", "tqdm.tqdm.tqdm", "base_task.set_optimizer_params_grad", "base_task.BasePytorchTask.optimizer.step", "base_task.copy_optimizer_params_to_model", "base_task.BasePytorchTask.optimizer.step", "base_task.BasePytorchTask.model.parameters", "base_task.BasePytorchTask.model.named_parameters", "base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.model.zero_grad", "base_task.BasePytorchTask.model.named_parameters"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.get_current_train_batch_size", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.in_distributed_mode", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask._init_summary_writer", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.prepare_data_loader", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.train", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.in_distributed_mode", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.prepare_dist_data_loader", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.is_master_node", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.set_batch_to_device", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.is_master_node", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.set_optimizer_params_grad", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.copy_optimizer_params_to_model", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging"], ["", "", "def", "base_train", "(", "self", ",", "get_loss_func", ",", "kwargs_dict1", "=", "{", "}", ",", "\n", "epoch_eval_func", "=", "None", ",", "kwargs_dict2", "=", "{", "}", ",", "base_epoch_idx", "=", "0", ")", ":", "\n", "        ", "assert", "self", ".", "model", "is", "not", "None", "\n", "\n", "if", "self", ".", "num_train_steps", "is", "None", ":", "\n", "            ", "self", ".", "num_train_steps", "=", "round", "(", "\n", "self", ".", "setting", ".", "num_train_epochs", "*", "len", "(", "self", ".", "train_examples", ")", "/", "self", ".", "setting", ".", "train_batch_size", "\n", ")", "\n", "\n", "", "train_batch_size", "=", "self", ".", "get_current_train_batch_size", "(", ")", "\n", "\n", "self", ".", "logging", "(", "'='", "*", "20", "+", "'Start Base Training'", "+", "'='", "*", "20", ")", "\n", "self", ".", "logging", "(", "\"\\tTotal examples Num = {}\"", ".", "format", "(", "len", "(", "self", ".", "train_examples", ")", ")", ")", "\n", "self", ".", "logging", "(", "\"\\tBatch size = {}\"", ".", "format", "(", "self", ".", "setting", ".", "train_batch_size", ")", ")", "\n", "self", ".", "logging", "(", "\"\\tNum steps = {}\"", ".", "format", "(", "self", ".", "num_train_steps", ")", ")", "\n", "if", "self", ".", "in_distributed_mode", "(", ")", ":", "\n", "            ", "self", ".", "logging", "(", "\"\\tWorker Batch Size = {}\"", ".", "format", "(", "train_batch_size", ")", ")", "\n", "", "self", ".", "_init_summary_writer", "(", ")", "\n", "\n", "# prepare data loader", "\n", "train_dataloader", "=", "self", ".", "prepare_data_loader", "(", "\n", "self", ".", "train_dataset", ",", "self", ".", "setting", ".", "train_batch_size", ",", "rand_flag", "=", "True", "\n", ")", "\n", "\n", "# enter train mode", "\n", "global_step", "=", "0", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "self", ".", "logging", "(", "'Reach the epoch beginning'", ")", "\n", "for", "epoch_idx", "in", "trange", "(", "base_epoch_idx", ",", "int", "(", "self", ".", "setting", ".", "num_train_epochs", ")", ",", "desc", "=", "\"Epoch\"", ")", ":", "\n", "            ", "iter_desc", "=", "'Iteration'", "\n", "if", "self", ".", "in_distributed_mode", "(", ")", ":", "\n", "                ", "train_dataloader", "=", "self", ".", "prepare_dist_data_loader", "(", "\n", "self", ".", "train_dataset", ",", "train_batch_size", ",", "epoch", "=", "epoch_idx", "\n", ")", "\n", "iter_desc", "=", "'Rank {} {}'", ".", "format", "(", "dist", ".", "get_rank", "(", ")", ",", "iter_desc", ")", "\n", "\n", "", "tr_loss", "=", "0", "\n", "nb_tr_examples", ",", "nb_tr_steps", "=", "0", ",", "0", "\n", "\n", "if", "self", ".", "only_master_logging", ":", "\n", "                ", "if", "self", ".", "is_master_node", "(", ")", ":", "\n", "                    ", "step_batch_iter", "=", "enumerate", "(", "tqdm", "(", "train_dataloader", ",", "desc", "=", "iter_desc", ")", ")", "\n", "", "else", ":", "\n", "                    ", "step_batch_iter", "=", "enumerate", "(", "train_dataloader", ")", "\n", "", "", "else", ":", "\n", "                ", "step_batch_iter", "=", "enumerate", "(", "tqdm", "(", "train_dataloader", ",", "desc", "=", "iter_desc", ")", ")", "\n", "\n", "", "for", "step", ",", "batch", "in", "step_batch_iter", ":", "\n", "                ", "batch", "=", "self", ".", "set_batch_to_device", "(", "batch", ")", "\n", "\n", "# forward", "\n", "loss", "=", "get_loss_func", "(", "self", ",", "batch", ",", "**", "kwargs_dict1", ")", "\n", "\n", "if", "self", ".", "n_gpu", ">", "1", ":", "\n", "                    ", "loss", "=", "loss", ".", "mean", "(", ")", "# mean() to average on multi-gpu.", "\n", "", "if", "self", ".", "setting", ".", "fp16", "and", "self", ".", "setting", ".", "loss_scale", "!=", "1.0", ":", "\n", "# rescale loss for fp16 training", "\n", "# see https://docs.nvidia.com/deeplearning/sdk/mixed-precision-training/index.html", "\n", "                    ", "loss", "=", "loss", "*", "self", ".", "setting", ".", "loss_scale", "\n", "", "if", "self", ".", "setting", ".", "gradient_accumulation_steps", ">", "1", ":", "\n", "                    ", "loss", "=", "loss", "/", "self", ".", "setting", ".", "gradient_accumulation_steps", "\n", "\n", "# backward", "\n", "", "loss", ".", "backward", "(", ")", "\n", "\n", "loss_scalar", "=", "loss", ".", "item", "(", ")", "\n", "tr_loss", "+=", "loss_scalar", "\n", "if", "self", ".", "is_master_node", "(", ")", ":", "\n", "                    ", "self", ".", "summary_writer", ".", "add_scalar", "(", "'Loss'", ",", "loss_scalar", ",", "global_step", "=", "global_step", ")", "\n", "", "nb_tr_examples", "+=", "self", ".", "setting", ".", "train_batch_size", "# may not be very accurate due to incomplete batch", "\n", "nb_tr_steps", "+=", "1", "\n", "if", "(", "step", "+", "1", ")", "%", "self", ".", "setting", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "                    ", "if", "self", ".", "setting", ".", "fp16", "or", "self", ".", "setting", ".", "optimize_on_cpu", ":", "\n", "                        ", "if", "self", ".", "setting", ".", "fp16", "and", "self", ".", "setting", ".", "loss_scale", "!=", "1.0", ":", "\n", "# scale down gradients for fp16 training", "\n", "                            ", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "                                ", "param", ".", "grad", ".", "data", "=", "param", ".", "grad", ".", "data", "/", "self", ".", "setting", ".", "loss_scale", "\n", "", "", "is_nan", "=", "set_optimizer_params_grad", "(", "\n", "self", ".", "model_named_parameters", ",", "self", ".", "model", ".", "named_parameters", "(", ")", ",", "test_nan", "=", "True", "\n", ")", "\n", "if", "is_nan", ":", "\n", "                            ", "self", ".", "logging", "(", "\"FP16 TRAINING: Nan in gradients, reducing loss scaling\"", ")", "\n", "self", ".", "setting", ".", "loss_scale", "=", "self", ".", "setting", ".", "loss_scale", "/", "2", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "continue", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "copy_optimizer_params_to_model", "(", "\n", "self", ".", "model", ".", "named_parameters", "(", ")", ",", "self", ".", "model_named_parameters", "\n", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "global_step", "+=", "1", "\n", "\n", "", "", "if", "epoch_eval_func", "is", "not", "None", ":", "\n", "                ", "epoch_eval_func", "(", "self", ",", "epoch_idx", "+", "1", ",", "**", "kwargs_dict2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.base_eval": [[575, 630], ["base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.prepare_data_loader", "base_task.BasePytorchTask.in_distributed_mode", "enumerate", "isinstance", "base_task.BasePytorchTask.model.eval", "tqdm.tqdm.tqdm", "base_task.BasePytorchTask.set_batch_to_device", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "reduce_info_type.lower", "torch.cat.sum", "torch.cat.sum", "torch.cat.sum", "utils.default_dump_pkl", "len", "torch.get_rank", "torch.get_rank", "torch.get_rank", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "get_info_on_batch", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.extend", "torch.cat.extend", "torch.cat.extend", "reduce_info_type.lower", "torch.cat.mean", "torch.cat.mean", "torch.cat.mean", "get_info_on_batch.to", "reduce_info_type.lower", "Exception", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.prepare_data_loader", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.in_distributed_mode", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.dee_task.DEETask.eval", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.set_batch_to_device", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.utils.default_dump_pkl"], ["", "", "", "def", "base_eval", "(", "self", ",", "eval_dataset", ",", "get_info_on_batch", ",", "reduce_info_type", "=", "'mean'", ",", "dump_pkl_path", "=", "None", ",", "**", "func_kwargs", ")", ":", "\n", "        ", "self", ".", "logging", "(", "'='", "*", "20", "+", "'Start Base Evaluation'", "+", "'='", "*", "20", ")", "\n", "self", ".", "logging", "(", "\"\\tNum examples = {}\"", ".", "format", "(", "len", "(", "eval_dataset", ")", ")", ")", "\n", "self", ".", "logging", "(", "\"\\tBatch size = {}\"", ".", "format", "(", "self", ".", "setting", ".", "eval_batch_size", ")", ")", "\n", "self", ".", "logging", "(", "\"\\tReduce type = {}\"", ".", "format", "(", "reduce_info_type", ")", ")", "\n", "\n", "# prepare data loader", "\n", "eval_dataloader", "=", "self", ".", "prepare_data_loader", "(", "\n", "eval_dataset", ",", "self", ".", "setting", ".", "eval_batch_size", ",", "rand_flag", "=", "False", "\n", ")", "\n", "\n", "# enter eval mode", "\n", "total_info", "=", "[", "]", "\n", "if", "self", ".", "model", "is", "not", "None", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "", "iter_desc", "=", "'Iteration'", "\n", "if", "self", ".", "in_distributed_mode", "(", ")", ":", "\n", "            ", "iter_desc", "=", "'Rank {} {}'", ".", "format", "(", "dist", ".", "get_rank", "(", ")", ",", "iter_desc", ")", "\n", "\n", "", "for", "step", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "eval_dataloader", ",", "desc", "=", "iter_desc", ")", ")", ":", "\n", "            ", "batch", "=", "self", ".", "set_batch_to_device", "(", "batch", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# this func must run batch_info = model(batch_input)", "\n", "# and metrics is an instance of torch.Tensor with Size([batch_size, ...])", "\n", "# to fit the DataParallel and DistributedParallel functionality", "\n", "                ", "batch_info", "=", "get_info_on_batch", "(", "self", ",", "batch", ",", "**", "func_kwargs", ")", "\n", "# append metrics from this batch to event_info", "\n", "", "if", "isinstance", "(", "batch_info", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "total_info", ".", "append", "(", "\n", "batch_info", ".", "to", "(", "torch", ".", "device", "(", "'cpu'", ")", ")", "# collect results in cpu memory", "\n", ")", "\n", "", "else", ":", "\n", "# batch_info is a list of some info on each example", "\n", "                ", "total_info", ".", "extend", "(", "batch_info", ")", "\n", "\n", "", "", "if", "isinstance", "(", "total_info", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "# transform event_info to torch.Tensor", "\n", "            ", "total_info", "=", "torch", ".", "cat", "(", "total_info", ",", "dim", "=", "0", ")", "\n", "\n", "# [batch_size, ...] -> [...]", "\n", "", "if", "reduce_info_type", ".", "lower", "(", ")", "==", "'sum'", ":", "\n", "            ", "reduced_info", "=", "total_info", ".", "sum", "(", "dim", "=", "0", ")", "\n", "", "elif", "reduce_info_type", ".", "lower", "(", ")", "==", "'mean'", ":", "\n", "            ", "reduced_info", "=", "total_info", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "elif", "reduce_info_type", ".", "lower", "(", ")", "==", "'none'", ":", "\n", "            ", "reduced_info", "=", "total_info", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Unsupported reduce metric type {}'", ".", "format", "(", "reduce_info_type", ")", ")", "\n", "\n", "", "if", "dump_pkl_path", "is", "not", "None", ":", "\n", "            ", "default_dump_pkl", "(", "reduced_info", ",", "dump_pkl_path", ")", "\n", "\n", "", "return", "reduced_info", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.save_checkpoint": [[631, 661], ["base_task.BasePytorchTask.logging", "os.path.join", "base_task.BasePytorchTask.logging", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.optimizer.state_dict", "base_task.BasePytorchTask.logging", "isinstance", "isinstance", "base_task.BasePytorchTask.model.module.state_dict", "base_task.BasePytorchTask.model.state_dict"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging"], ["", "def", "save_checkpoint", "(", "self", ",", "cpt_file_name", "=", "None", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "self", ".", "logging", "(", "'='", "*", "20", "+", "'Dump Checkpoint'", "+", "'='", "*", "20", ")", "\n", "if", "cpt_file_name", "is", "None", ":", "\n", "            ", "cpt_file_name", "=", "self", ".", "setting", ".", "cpt_file_name", "\n", "", "cpt_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "setting", ".", "model_dir", ",", "cpt_file_name", ")", "\n", "self", ".", "logging", "(", "'Dump checkpoint into {}'", ".", "format", "(", "cpt_file_path", ")", ")", "\n", "\n", "store_dict", "=", "{", "\n", "'setting'", ":", "self", ".", "setting", ".", "__dict__", ",", "\n", "}", "\n", "\n", "if", "self", ".", "model", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "model", ",", "para", ".", "DataParallel", ")", "or", "isinstance", "(", "self", ".", "model", ",", "para", ".", "DistributedDataParallel", ")", ":", "\n", "                ", "model_state", "=", "self", ".", "model", ".", "module", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "                ", "model_state", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "", "store_dict", "[", "'model_state'", "]", "=", "model_state", "\n", "", "else", ":", "\n", "            ", "self", ".", "logging", "(", "'No model state is dumped'", ",", "level", "=", "logging", ".", "WARNING", ")", "\n", "\n", "", "if", "self", ".", "optimizer", ":", "\n", "            ", "store_dict", "[", "'optimizer_state'", "]", "=", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logging", "(", "'No optimizer state is dumped'", ",", "level", "=", "logging", ".", "WARNING", ")", "\n", "\n", "", "if", "epoch", ":", "\n", "            ", "store_dict", "[", "'epoch'", "]", "=", "epoch", "\n", "\n", "", "torch", ".", "save", "(", "store_dict", ",", "cpt_file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.resume_checkpoint": [[662, 713], ["base_task.BasePytorchTask.logging", "os.path.exists", "base_task.BasePytorchTask.logging", "os.path.join", "base_task.BasePytorchTask.logging", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.logging", "Exception", "Exception", "base_task.BasePytorchTask.logging", "json.dumps", "base_task.BasePytorchTask.logging", "base_task.BasePytorchTask.optimizer.load_state_dict", "base_task.BasePytorchTask.logging", "isinstance", "isinstance", "base_task.BasePytorchTask.model.module.load_state_dict", "base_task.BasePytorchTask.model.load_state_dict", "Exception", "Exception", "torch.load.keys", "torch.load.keys", "torch.load.keys", "torch.load.keys", "torch.load.keys", "torch.load.keys"], "methods", ["home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging", "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.BasePytorchTask.logging"], ["", "def", "resume_checkpoint", "(", "self", ",", "cpt_file_path", "=", "None", ",", "cpt_file_name", "=", "None", ",", "\n", "resume_model", "=", "True", ",", "resume_optimizer", "=", "False", ",", "strict", "=", "False", ")", ":", "\n", "        ", "self", ".", "logging", "(", "'='", "*", "20", "+", "'Resume Checkpoint'", "+", "'='", "*", "20", ")", "\n", "# decide cpt_file_path to resume", "\n", "if", "cpt_file_path", "is", "None", ":", "# use provided path with highest priority", "\n", "            ", "if", "cpt_file_name", "is", "None", ":", "# no path and no name will resort to the default cpt name", "\n", "                ", "cpt_file_name", "=", "self", ".", "setting", ".", "cpt_file_name", "\n", "", "cpt_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "setting", ".", "model_dir", ",", "cpt_file_name", ")", "\n", "", "elif", "cpt_file_name", "is", "not", "None", ":", "# error when path and name are both provided", "\n", "            ", "raise", "Exception", "(", "'Confused about path {} or file name {} to resume'", ".", "format", "(", "\n", "cpt_file_path", ",", "cpt_file_name", "\n", ")", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "cpt_file_path", ")", ":", "\n", "            ", "self", ".", "logging", "(", "'Resume checkpoint from {}'", ".", "format", "(", "cpt_file_path", ")", ")", "\n", "", "elif", "strict", ":", "\n", "            ", "raise", "Exception", "(", "'Checkpoint does not exist, {}'", ".", "format", "(", "cpt_file_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logging", "(", "'Checkpoint does not exist, {}'", ".", "format", "(", "cpt_file_path", ")", ",", "level", "=", "logging", ".", "WARNING", ")", "\n", "return", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", "==", "0", ":", "\n", "            ", "store_dict", "=", "torch", ".", "load", "(", "cpt_file_path", ",", "map_location", "=", "'cpu'", ")", "\n", "", "else", ":", "\n", "            ", "store_dict", "=", "torch", ".", "load", "(", "cpt_file_path", ",", "map_location", "=", "self", ".", "device", ")", "\n", "\n", "", "self", ".", "logging", "(", "'Setting: {}'", ".", "format", "(", "\n", "json", ".", "dumps", "(", "store_dict", "[", "'setting'", "]", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "2", ")", "\n", ")", ")", "\n", "\n", "if", "resume_model", ":", "\n", "            ", "if", "self", ".", "model", "and", "'model_state'", "in", "store_dict", ":", "\n", "                ", "if", "isinstance", "(", "self", ".", "model", ",", "para", ".", "DataParallel", ")", "or", "isinstance", "(", "self", ".", "model", ",", "para", ".", "DistributedDataParallel", ")", ":", "\n", "                    ", "self", ".", "model", ".", "module", ".", "load_state_dict", "(", "store_dict", "[", "'model_state'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "model", ".", "load_state_dict", "(", "store_dict", "[", "'model_state'", "]", ")", "\n", "", "self", ".", "logging", "(", "'Resume model successfully'", ")", "\n", "", "elif", "strict", ":", "\n", "                ", "raise", "Exception", "(", "'Resume model failed, dict.keys = {}'", ".", "format", "(", "store_dict", ".", "keys", "(", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "logging", "(", "'Do not resume model'", ")", "\n", "\n", "", "if", "resume_optimizer", ":", "\n", "            ", "if", "self", ".", "optimizer", "and", "'optimizer_state'", "in", "store_dict", ":", "\n", "                ", "self", ".", "optimizer", ".", "load_state_dict", "(", "store_dict", "[", "'optimizer_state'", "]", ")", "\n", "self", ".", "logging", "(", "'Resume optimizer successfully'", ")", "\n", "", "elif", "strict", ":", "\n", "                ", "raise", "Exception", "(", "'Resume optimizer failed, dict.keys = {}'", ".", "format", "(", "store_dict", ".", "keys", "(", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "logging", "(", "'Do not resume optimizer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.set_optimizer_params_grad": [[88, 107], ["zip", "logger.error", "param_opti.grad.data.copy_", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "param_opti.data.new().resize_", "torch.isnan", "torch.isnan", "torch.isnan", "param_opti.data.new", "param_opti.data.size"], "function", ["None"], ["", "", "def", "set_optimizer_params_grad", "(", "named_params_optimizer", ",", "named_params_model", ",", "test_nan", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n        Utility function for optimize_on_cpu and 16-bits training.\n        Copy the gradient of the GPU parameters to the CPU/RAMM copy of the model\n    \"\"\"", "\n", "is_nan", "=", "False", "\n", "for", "(", "name_opti", ",", "param_opti", ")", ",", "(", "name_model", ",", "param_model", ")", "in", "zip", "(", "named_params_optimizer", ",", "named_params_model", ")", ":", "\n", "        ", "if", "name_opti", "!=", "name_model", ":", "\n", "            ", "logger", ".", "error", "(", "\"name_opti != name_model: {} {}\"", ".", "format", "(", "name_opti", ",", "name_model", ")", ")", "\n", "raise", "ValueError", "\n", "", "if", "param_model", ".", "grad", "is", "not", "None", ":", "\n", "            ", "if", "test_nan", "and", "torch", ".", "isnan", "(", "param_model", ".", "grad", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "is_nan", "=", "True", "\n", "", "if", "param_opti", ".", "grad", "is", "None", ":", "\n", "                ", "param_opti", ".", "grad", "=", "torch", ".", "nn", ".", "Parameter", "(", "param_opti", ".", "data", ".", "new", "(", ")", ".", "resize_", "(", "*", "param_opti", ".", "data", ".", "size", "(", ")", ")", ")", "\n", "", "param_opti", ".", "grad", ".", "data", ".", "copy_", "(", "param_model", ".", "grad", ".", "data", ")", "\n", "", "else", ":", "\n", "            ", "param_opti", ".", "grad", "=", "None", "\n", "", "", "return", "is_nan", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.copy_optimizer_params_to_model": [[109, 119], ["zip", "param_model.data.copy_", "logger.error"], "function", ["None"], ["", "def", "copy_optimizer_params_to_model", "(", "named_params_model", ",", "named_params_optimizer", ")", ":", "\n", "    ", "\"\"\"\n        Utility function for optimize_on_cpu and 16-bits training.\n        Copy the parameters optimized on CPU/RAM back to the model on GPU\n    \"\"\"", "\n", "for", "(", "name_opti", ",", "param_opti", ")", ",", "(", "name_model", ",", "param_model", ")", "in", "zip", "(", "named_params_optimizer", ",", "named_params_model", ")", ":", "\n", "        ", "if", "name_opti", "!=", "name_model", ":", "\n", "            ", "logger", ".", "error", "(", "\"name_opti != name_model: {} {}\"", ".", "format", "(", "name_opti", ",", "name_model", ")", ")", "\n", "raise", "ValueError", "\n", "", "param_model", ".", "data", ".", "copy_", "(", "param_opti", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dolphin-zs_Doc2EDAG.dee.base_task.average_gradients": [[715, 725], ["float", "model.named_parameters", "torch.get_world_size", "torch.all_reduce", "logger.error", "param.size", "repr"], "function", ["None"], ["", "", "", "def", "average_gradients", "(", "model", ")", ":", "\n", "    ", "\"\"\" Gradient averaging. \"\"\"", "\n", "size", "=", "float", "(", "dist", ".", "get_world_size", "(", ")", ")", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "param", ".", "grad", ".", "data", ",", "op", "=", "dist", ".", "reduce_op", ".", "SUM", ")", "\n", "param", ".", "grad", ".", "data", "/=", "size", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "logger", ".", "error", "(", "'Error when all_reduce parameter {}, size={}, grad_type={}, error message {}'", ".", "format", "(", "\n", "name", ",", "param", ".", "size", "(", ")", ",", "param", ".", "grad", ".", "data", ".", "dtype", ",", "repr", "(", "e", ")", "\n", ")", ")", "\n"]]}