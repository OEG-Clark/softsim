{"home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_tdn.main": [[34, 291], ["opts_tdn.parser.parse_args", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "ops_tdn.dataset_config.return_dataset", "ops_tdn.logger.setup_logger", "ops_tdn.logger.setup_logger.info", "ops_tdn.models_gc.TSN", "torch.nn.parallel.DistributedDataParallel.get_optim_policies", "torch.nn.parallel.DistributedDataParallel.get_augmentation", "ops_tdn.transforms.GroupNormalize", "ops_tdn.dataset.TSNDataSet", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ops_tdn.dataset.TSNDataSet", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "ops_tdn.lr_scheduler.get_scheduler", "torch.nn.parallel.DistributedDataParallel", "tensorboardX.SummaryWriter", "range", "time.localtime", "time.localtime", "time.localtime", "time.localtime", "torch.get_rank", "main_tdn.check_rootfolders", "ops_tdn.logger.setup_logger.info", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "ValueError", "len", "torch.nn.parallel.DistributedDataParallel.cuda", "os.path.isfile", "ops_tdn.logger.setup_logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel.state_dict", "torch.load.items", "model.state_dict.items", "set", "set", "ops_tdn.logger.setup_logger.info", "model.state_dict.update", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "open", "f.write", "ops_tdn.logger.setup_logger.info", "torch.utils.data.DataLoader.sampler.set_epoch", "main_tdn.validate", "torch.utils.data.DataLoader.sampler.set_epoch", "main_tdn.train", "time.time", "time.time", "time.time", "time.time", "os.path.join", "torch.get_rank", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "ops_tdn.logger.setup_logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "torch.optim.SGD.load_state_dict", "range", "ops_tdn.logger.setup_logger.info", "ops_tdn.logger.setup_logger.info", "torch.load.pop", "list", "list", "ops_tdn.logger.setup_logger.info", "os.path.join", "str", "os.path.join", "torch.get_rank", "ops_tdn.logger.setup_logger.info", "main_tdn.save_checkpoint", "torch.get_rank", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "torch.utils.data.DataLoader.sampler.set_epoch", "main_tdn.validate", "len", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "len", "ops_tdn.lr_scheduler.get_scheduler.step", "ops_tdn.logger.setup_logger.info", "replace_dict.append", "ops_tdn.logger.setup_logger.info", "replace_dict.append", "torch.load.keys", "model.state_dict.keys", "torch.get_rank", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "max", "tensorboardX.SummaryWriter.add_scalar", "ops_tdn.logger.setup_logger.info", "tensorboardX.SummaryWriter.flush", "main_tdn.save_checkpoint", "ops_tdn.transforms.Stack", "ops_tdn.transforms.ToTorchFormatTensor", "ops_tdn.transforms.GroupScale", "ops_tdn.transforms.GroupCenterCrop", "ops_tdn.transforms.Stack", "ops_tdn.transforms.ToTorchFormatTensor", "k.replace", "k.replace", "torch.load.items", "torch.nn.parallel.DistributedDataParallel.state_dict", "torch.optim.SGD.state_dict", "ops_tdn.lr_scheduler.get_scheduler.state_dict", "int", "k.replace", "k.replace", "torch.nn.parallel.DistributedDataParallel.state_dict", "torch.optim.SGD.state_dict", "ops_tdn.lr_scheduler.get_scheduler.state_dict"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset_config.return_dataset", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.logger.setup_logger", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.get_optim_policies", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.get_augmentation", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.get_scheduler", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.check_rootfolders", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.validate", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.train", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.save_checkpoint", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.validate", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.save_checkpoint", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_prec1", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "init_method", "=", "'env://'", ")", "\n", "\n", "num_class", ",", "args", ".", "train_list", ",", "args", ".", "val_list", ",", "args", ".", "root_path", ",", "prefix", "=", "dataset_config", ".", "return_dataset", "(", "args", ".", "dataset", ",", "args", ".", "modality", ")", "\n", "# pdb.set_trace()", "\n", "# print(num_class, args.train_list, args.val_list, args.root_path, prefix)", "\n", "# return ", "\n", "full_arch_name", "=", "args", ".", "arch", "\n", "args", ".", "store_name", "=", "'_'", ".", "join", "(", "[", "'GC_TDN_'", ",", "args", ".", "dataset", ",", "args", ".", "modality", ",", "full_arch_name", ",", "args", ".", "consensus_type", ",", "'segment%d'", "%", "args", ".", "num_segments", ",", "'e{}'", ".", "format", "(", "args", ".", "epochs", ")", "]", ")", "\n", "if", "args", ".", "pretrain", "!=", "'imagenet'", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_{}'", ".", "format", "(", "args", ".", "pretrain", ")", "\n", "", "if", "args", ".", "dense_sample", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_dense'", "\n", "", "if", "args", ".", "suffix", "is", "not", "None", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_{}'", ".", "format", "(", "args", ".", "suffix", ")", "\n", "", "if", "args", ".", "lr_scheduler", "!=", "'step'", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_{}'", ".", "format", "(", "args", ".", "lr_scheduler", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_s%dt%dp%d'", "%", "(", "args", ".", "lr_steps", "[", "0", "]", ",", "args", ".", "lr_steps", "[", "1", "]", ",", "args", ".", "lr_steps", "[", "2", "]", ")", "\n", "# time info", "\n", "", "year", "=", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ".", "tm_year", "\n", "month", "=", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ".", "tm_mon", "\n", "day", "=", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ".", "tm_mday", "\n", "hour", "=", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ".", "tm_hour", "\n", "timeInfo", "=", "'_%02d%02d%02dh%02d'", "%", "(", "day", ",", "month", ",", "year", "-", "2000", ",", "hour", ")", "\n", "args", ".", "store_name", "+=", "timeInfo", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "check_rootfolders", "(", ")", "\n", "\n", "", "logger", "=", "setup_logger", "(", "output", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ")", ",", "\n", "distributed_rank", "=", "dist", ".", "get_rank", "(", ")", ",", "\n", "name", "=", "f'TDN'", ")", "\n", "logger", ".", "info", "(", "'storing name: '", "+", "args", ".", "store_name", ")", "\n", "\n", "model", "=", "TSN", "(", "num_class", ",", "\n", "args", ".", "num_segments", ",", "\n", "args", ".", "modality", ",", "\n", "base_model", "=", "args", ".", "arch", ",", "\n", "consensus_type", "=", "args", ".", "consensus_type", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "img_feature_dim", "=", "args", ".", "img_feature_dim", ",", "\n", "partial_bn", "=", "not", "args", ".", "no_partialbn", ",", "\n", "pretrain", "=", "args", ".", "pretrain", ",", "\n", "fc_lr5", "=", "False", ")", "\n", "\n", "crop_size", "=", "model", ".", "crop_size", "\n", "scale_size", "=", "model", ".", "scale_size", "\n", "input_mean", "=", "model", ".", "input_mean", "\n", "input_std", "=", "model", ".", "input_std", "\n", "policies", "=", "model", ".", "get_optim_policies", "(", ")", "\n", "for", "group", "in", "policies", ":", "\n", "        ", "logger", ".", "info", "(", "\n", "(", "'[TDN-{}]group: {} has {} params, lr_mult: {}, decay_mult: {}'", ".", "\n", "format", "(", "args", ".", "arch", ",", "group", "[", "'name'", "]", ",", "len", "(", "group", "[", "'params'", "]", ")", ",", "\n", "group", "[", "'lr_mult'", "]", ",", "group", "[", "'decay_mult'", "]", ")", ")", ")", "\n", "\n", "", "train_augmentation", "=", "model", ".", "get_augmentation", "(", "\n", "flip", "=", "False", "if", "'something'", "in", "args", ".", "dataset", "else", "True", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "normalize", "=", "GroupNormalize", "(", "input_mean", ",", "input_std", ")", "\n", "\n", "train_dataset", "=", "TSNDataSet", "(", "\n", "args", ".", "dataset", ",", "\n", "args", ".", "root_path", ",", "\n", "args", ".", "train_list", ",", "\n", "num_segments", "=", "args", ".", "num_segments", ",", "\n", "modality", "=", "args", ".", "modality", ",", "\n", "image_tmpl", "=", "prefix", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "train_augmentation", ",", "\n", "Stack", "(", "roll", "=", "(", "args", ".", "arch", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "ToTorchFormatTensor", "(", "div", "=", "(", "args", ".", "arch", "not", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "normalize", ",", "]", ")", ",", "\n", "dense_sample", "=", "args", ".", "dense_sample", ")", "\n", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "\n", "val_dataset", "=", "TSNDataSet", "(", "\n", "args", ".", "dataset", ",", "\n", "args", ".", "root_path", ",", "\n", "args", ".", "val_list", ",", "\n", "num_segments", "=", "args", ".", "num_segments", ",", "\n", "modality", "=", "args", ".", "modality", ",", "\n", "image_tmpl", "=", "prefix", ",", "\n", "random_shift", "=", "False", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "GroupScale", "(", "int", "(", "scale_size", ")", ")", ",", "GroupCenterCrop", "(", "crop_size", ")", ",", "\n", "Stack", "(", "roll", "=", "(", "args", ".", "arch", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "ToTorchFormatTensor", "(", "div", "=", "(", "args", ".", "arch", "not", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "normalize", ",", "]", ")", ",", "\n", "dense_sample", "=", "args", ".", "dense_sample", ")", "\n", "\n", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "val_dataset", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "sampler", "=", "val_sampler", ",", "drop_last", "=", "True", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "if", "args", ".", "loss_type", "==", "'nll'", ":", "\n", "        ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown loss type\"", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "policies", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "scheduler", "=", "get_scheduler", "(", "optimizer", ",", "len", "(", "train_loader", ")", ",", "args", ")", "\n", "\n", "# pdb.set_trace()", "\n", "\n", "model", "=", "DistributedDataParallel", "(", "model", ".", "cuda", "(", ")", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "broadcast_buffers", "=", "True", ",", "find_unused_parameters", "=", "True", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "logger", ".", "info", "(", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_prec1", "=", "checkpoint", "[", "'best_prec1'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "# scheduler.load_state_dict(checkpoint['scheduler'])", "\n", "n_iter_runs", "=", "len", "(", "train_loader", ")", "*", "args", ".", "start_epoch", "\n", "for", "kk", "in", "range", "(", "n_iter_runs", ")", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "", "logger", ".", "info", "(", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", ".", "format", "(", "\n", "args", ".", "evaluate", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", ")", "\n", "\n", "# if args.resume:", "\n", "#     if os.path.isfile(args.resume):", "\n", "#         logger.info((\"=> loading checkpoint '{}'\".format(args.resume)))", "\n", "#         checkpoint = torch.load(args.resume, map_location='cpu')", "\n", "#         best_prec1 = checkpoint['best_prec1']", "\n", "\n", "#         from collections import OrderedDict", "\n", "#         new_state_dict = OrderedDict()", "\n", "#         for k,v in checkpoint['state_dict'].items():", "\n", "#             name = 'module.' + k", "\n", "#             new_state_dict[name]  =v ", "\n", "\n", "#         model_dict=model.state_dict()", "\n", "#         pretrained_dict = {k: v for k, v in new_state_dict.items() if k in model_dict}", "\n", "#         # optimizer.load_state_dict(checkpoint['optimizer'])", "\n", "#         # scheduler.load_state_dict(checkpoint['scheduler'])", "\n", "\n", "#         # pdb.set_trace()", "\n", "\n", "#         # print(pretrained_dict)", "\n", "#         model_dict.update(pretrained_dict)", "\n", "#         model.load_state_dict(model_dict)", "\n", "\n", "#         logger.info((\"=> loaded checkpoint '{}' (epoch {})\".format(", "\n", "#             args.evaluate, checkpoint['epoch'])))", "\n", "#     else:", "\n", "#         logger.info((\"=> no checkpoint found at '{}'\".format(args.resume)))", "\n", "\n", "", "", "if", "args", ".", "tune_from", ":", "\n", "        ", "logger", ".", "info", "(", "(", "\"=> fine-tuning from '{}'\"", ".", "format", "(", "args", ".", "tune_from", ")", ")", ")", "\n", "sd", "=", "torch", ".", "load", "(", "args", ".", "tune_from", ")", "\n", "sd", "=", "sd", "[", "'state_dict'", "]", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "replace_dict", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "sd", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "model_dict", "and", "k", ".", "replace", "(", "'.net'", ",", "''", ")", "in", "model_dict", ":", "\n", "                ", "logger", ".", "info", "(", "'=> Load after remove .net: '", ",", "k", ")", "\n", "replace_dict", ".", "append", "(", "(", "k", ",", "k", ".", "replace", "(", "'.net'", ",", "''", ")", ")", ")", "\n", "", "", "for", "k", ",", "v", "in", "model_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "sd", "and", "k", ".", "replace", "(", "'.net'", ",", "''", ")", "in", "sd", ":", "\n", "                ", "logger", ".", "info", "(", "'=> Load after adding .net: '", ",", "k", ")", "\n", "replace_dict", ".", "append", "(", "(", "k", ".", "replace", "(", "'.net'", ",", "''", ")", ",", "k", ")", ")", "\n", "\n", "", "", "for", "k", ",", "k_new", "in", "replace_dict", ":", "\n", "            ", "sd", "[", "k_new", "]", "=", "sd", ".", "pop", "(", "k", ")", "\n", "", "keys1", "=", "set", "(", "list", "(", "sd", ".", "keys", "(", ")", ")", ")", "\n", "keys2", "=", "set", "(", "list", "(", "model_dict", ".", "keys", "(", ")", ")", ")", "\n", "set_diff", "=", "(", "keys1", "-", "keys2", ")", "|", "(", "keys2", "-", "keys1", ")", "\n", "logger", ".", "info", "(", "'#### Notice: keys that failed to load: {}'", ".", "format", "(", "set_diff", ")", ")", "\n", "if", "args", ".", "dataset", "not", "in", "args", ".", "tune_from", ":", "# new dataset", "\n", "            ", "logger", ".", "info", "(", "'=> New dataset, do not load fc weights'", ")", "\n", "sd", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sd", ".", "items", "(", ")", "if", "'fc'", "not", "in", "k", "}", "\n", "", "model_dict", ".", "update", "(", "sd", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ",", "'args.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "args", ")", ")", "\n", "\n", "", "tf_writer", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ")", ")", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "logger", ".", "info", "(", "(", "\"===========evaluate===========\"", ")", ")", "\n", "val_loader", ".", "sampler", ".", "set_epoch", "(", "args", ".", "start_epoch", ")", "\n", "prec1", ",", "prec5", ",", "val_loss", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "logger", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "is_best", "=", "prec1", ">", "best_prec1", "\n", "best_prec1", "=", "prec1", "\n", "logger", ".", "info", "(", "(", "\"Best Prec@1: '{}'\"", ".", "format", "(", "best_prec1", ")", ")", ")", "\n", "save_epoch", "=", "args", ".", "start_epoch", "+", "1", "\n", "save_checkpoint", "(", "\n", "{", "\n", "'epoch'", ":", "args", ".", "start_epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'prec1'", ":", "prec1", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "}", ",", "save_epoch", ",", "is_best", ")", "\n", "", "return", "\n", "\n", "", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "train_loader", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "train_loss", ",", "train_top1", ",", "train_top5", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", "=", "epoch", ",", "logger", "=", "logger", ",", "scheduler", "=", "scheduler", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "tf_writer", ".", "add_scalar", "(", "'loss/train'", ",", "train_loss", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/train_top1'", ",", "train_top1", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/train_top5'", ",", "train_top5", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'lr'", ",", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", ",", "epoch", ")", "\n", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "eval_freq", "==", "0", "or", "epoch", "==", "args", ".", "epochs", "-", "1", ":", "\n", "            ", "val_loader", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "prec1", ",", "prec5", ",", "val_loss", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "logger", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                ", "tf_writer", ".", "add_scalar", "(", "'loss/test'", ",", "val_loss", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/test_top1'", ",", "prec1", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/test_top5'", ",", "prec5", ",", "epoch", ")", "\n", "\n", "is_best", "=", "prec1", ">", "best_prec1", "\n", "best_prec1", "=", "max", "(", "prec1", ",", "best_prec1", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/test_top1_best'", ",", "best_prec1", ",", "epoch", ")", "\n", "\n", "logger", ".", "info", "(", "(", "\"Best Prec@1: '{}'\"", ".", "format", "(", "best_prec1", ")", ")", ")", "\n", "tf_writer", ".", "flush", "(", ")", "\n", "save_epoch", "=", "epoch", "+", "1", "\n", "save_checkpoint", "(", "\n", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'prec1'", ":", "prec1", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "}", ",", "save_epoch", ",", "is_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_tdn.train": [[293, 344], ["ops_tdn.utils.AverageMeter", "ops_tdn.utils.AverageMeter", "ops_tdn.utils.AverageMeter", "ops_tdn.utils.AverageMeter", "ops_tdn.utils.AverageMeter", "model.train", "time.time", "enumerate", "model.module.partialBN", "model.module.partialBN", "ops_tdn.utils.AverageMeter.update", "target.cuda.cuda", "input.cuda", "model", "criterion", "ops_tdn.utils.accuracy", "ops_tdn.utils.AverageMeter.update", "ops_tdn.utils.AverageMeter.update", "ops_tdn.utils.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "scheduler.step", "ops_tdn.utils.AverageMeter.update", "time.time", "criterion.item", "input.size", "prec1.item", "input.size", "prec5.item", "input.size", "torch.nn.utils.clip_grad_norm_", "logger.info", "time.time", "model.parameters", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.train", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.partialBN", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.partialBN", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.accuracy", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update"], ["", "", "", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "logger", "=", "None", ",", "scheduler", "=", "None", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "if", "args", ".", "no_partialbn", ":", "\n", "        ", "model", ".", "module", ".", "partialBN", "(", "False", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "module", ".", "partialBN", "(", "True", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "input_var", "=", "input", ".", "cuda", "(", ")", "\n", "target_var", "=", "target", "\n", "output", "=", "model", "(", "input_var", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "args", ".", "clip_gradient", "is", "not", "None", ":", "\n", "            ", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "clip_gradient", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "(", "'Epoch: [{0}][{1}/{2}], lr: {lr:.5f}\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "lr", "=", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", ")", ")", ")", "# TODO", "\n", "", "", "return", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_tdn.validate": [[346, 385], ["ops_tdn.utils.AverageMeter", "ops_tdn.utils.AverageMeter", "ops_tdn.utils.AverageMeter", "ops_tdn.utils.AverageMeter", "model.eval", "time.time", "logger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "target.cuda.cuda", "model", "criterion", "ops_tdn.utils.accuracy", "ops_tdn.utils.reduce_tensor", "ops_tdn.utils.reduce_tensor", "ops_tdn.utils.reduce_tensor", "ops_tdn.utils.AverageMeter.update", "ops_tdn.utils.AverageMeter.update", "ops_tdn.utils.AverageMeter.update", "ops_tdn.utils.AverageMeter.update", "time.time", "ops_tdn.utils.reduce_tensor.item", "input.size", "ops_tdn.utils.reduce_tensor.item", "input.size", "ops_tdn.utils.reduce_tensor.item", "input.size", "logger.info", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.accuracy", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.utils.reduce_tensor", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.utils.reduce_tensor", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.utils.reduce_tensor", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "logger", "=", "None", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "target", "=", "target", ".", "cuda", "(", ")", "\n", "output", "=", "model", "(", "input", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "loss", "=", "reduce_tensor", "(", "loss", ")", "\n", "prec1", "=", "reduce_tensor", "(", "prec1", ")", "\n", "prec5", "=", "reduce_tensor", "(", "prec5", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "i", ",", "len", "(", "val_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", ")", "\n", "", "", "", "logger", ".", "info", "(", "(", "'Testing Results: Prec@1 {top1.avg:.3f} Prec@5 {top5.avg:.3f} Loss {loss.avg:.5f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "loss", "=", "losses", ")", ")", ")", "\n", "return", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_tdn.save_checkpoint": [[387, 393], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "epoch", ",", "is_best", ")", ":", "\n", "    ", "filename", "=", "'%s/%s/%d_epoch_ckpt.pth.tar'", "%", "(", "args", ".", "root_model", ",", "args", ".", "store_name", ",", "epoch", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "best_filename", "=", "'%s/%s/best.pth.tar'", "%", "(", "args", ".", "root_model", ",", "args", ".", "store_name", ")", "\n", "torch", ".", "save", "(", "state", ",", "best_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_tdn.check_rootfolders": [[395, 406], ["os.path.join", "os.path.join", "os.path.exists", "print", "os.makedirs"], "function", ["None"], ["", "", "def", "check_rootfolders", "(", ")", ":", "\n", "    ", "\"\"\"Create log and model folder\"\"\"", "\n", "folders_util", "=", "[", "\n", "args", ".", "root_log", ",", "args", ".", "root_model", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "root_model", ",", "args", ".", "store_name", ")", "\n", "]", "\n", "for", "folder", "in", "folders_util", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "            ", "print", "(", "'creating folder '", "+", "folder", ")", "\n", "os", ".", "makedirs", "(", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_tsm.main": [[28, 267], ["opts.parser.parse_args", "ops_tsntsmgst.dataset_config.return_dataset", "print", "main_tsm.check_rootfolders", "print", "ops_tsntsmgst.models_tsm.VideoNet", "torch.nn.DataParallel().cuda.get_optim_policies", "torch.nn.DataParallel().cuda.get_augmentation", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "max", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "open", "tensorboardX.SummaryWriter", "range", "time.localtime", "time.localtime", "time.localtime", "time.localtime", "os.path.isfile", "ops_tsntsmgst.transforms.GroupNormalize", "ops_tsntsmgst.transforms.IdentityTransform", "ops_tsntsmgst.dataset.TSNDataSet", "ops_tsntsmgst.dataset.TSNDataSet", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "ValueError", "print", "main_tsm.validate", "os.path.join", "open", "f.write", "main_tsm.adjust_learning_rate", "main_tsm.train", "str", "time.time", "time.time", "time.time", "time.time", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "make_temporal_pool", "print", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "int", "os.path.join", "str", "os.path.join", "main_tsm.validate", "max", "tensorboardX.SummaryWriter.add_scalar", "print", "open.write", "open.flush", "main_tsm.save_checkpoint", "str", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "len", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict", "ops_tsntsmgst.transforms.Stack", "ops_tsntsmgst.transforms.ToTorchFormatTensor", "ops_tsntsmgst.transforms.GroupScale", "ops_tsntsmgst.transforms.GroupCenterCrop", "ops_tsntsmgst.transforms.Stack", "ops_tsntsmgst.transforms.ToTorchFormatTensor", "int"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset_config.return_dataset", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.check_rootfolders", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.get_optim_policies", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.get_augmentation", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.validate", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.adjust_learning_rate", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.train", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.validate", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.save_checkpoint", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_prec1", ",", "best_prec1_test", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "num_class", ",", "args", ".", "train_list", ",", "args", ".", "val_list", ",", "args", ".", "root_path", ",", "prefix", "=", "dataset_config", ".", "return_dataset", "(", "args", ".", "dataset", ",", "\n", "args", ".", "modality", ")", "\n", "# ---args---", "\n", "if", "args", ".", "element_filter", ":", "\n", "        ", "full_arch_name", "=", "'TSM_{}_{}'", ".", "format", "(", "args", ".", "net", ",", "args", ".", "arch", ")", "\n", "", "else", ":", "\n", "        ", "full_arch_name", "=", "'TSM_{}'", ".", "format", "(", "args", ".", "arch", ")", "\n", "", "args", ".", "store_name", "=", "'_'", ".", "join", "(", "\n", "[", "full_arch_name", ",", "args", ".", "dataset", ",", "args", ".", "modality", ",", "args", ".", "consensus_type", ",", "'segment%d'", "%", "args", ".", "num_segments", ",", "\n", "'e{}'", ".", "format", "(", "args", ".", "epochs", ")", "]", ")", "\n", "# if args.pretrain != 'imagenet':", "\n", "#     args.store_name += '_{}'.format(args.pretrain)", "\n", "if", "args", ".", "lr_type", "!=", "'step'", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_{}'", ".", "format", "(", "args", ".", "lr_type", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_s%dp%d'", "%", "(", "args", ".", "lr_steps", "[", "0", "]", ",", "args", ".", "lr_steps", "[", "1", "]", ")", "\n", "", "if", "args", ".", "dense_sample", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_dense_val10'", "\n", "", "elif", "args", ".", "twice_sample", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_twice'", "\n", "", "if", "args", ".", "non_local", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_nl'", "\n", "", "if", "args", ".", "suffix", "is", "not", "None", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_{}'", ".", "format", "(", "args", ".", "suffix", ")", "\n", "", "if", "args", ".", "element_filter", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_ef%d'", "%", "args", ".", "cdiv", "\n", "", "if", "args", ".", "dropout", ">", "0", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_drp%s'", "%", "(", "str", "(", "args", ".", "dropout", ")", "[", "2", ":", "]", ")", "\n", "", "args", ".", "store_name", "+=", "'_lr%s'", "%", "(", "str", "(", "args", ".", "lr", ")", "[", "2", ":", "]", ")", "\n", "args", ".", "store_name", "+=", "'_b%d'", "%", "(", "args", ".", "batch_size", ")", "\n", "if", "args", ".", "no_partialbn", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_npb'", "\n", "", "if", "args", ".", "ef_lr5", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_eflr5'", "\n", "", "if", "args", ".", "loop", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_loop'", "\n", "# time info", "\n", "", "year", "=", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ".", "tm_year", "\n", "month", "=", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ".", "tm_mon", "\n", "day", "=", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ".", "tm_mday", "\n", "hour", "=", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ".", "tm_hour", "\n", "timeInfo", "=", "'_%02d%02d%02dh%02d'", "%", "(", "day", ",", "month", ",", "year", "-", "2000", ",", "hour", ")", "\n", "args", ".", "store_name", "+=", "timeInfo", "\n", "print", "(", "'storing name: '", "+", "args", ".", "store_name", ")", "\n", "# args.root_log += '_c2d'", "\n", "# args.root_model += '_c2d'", "\n", "\n", "assert", "args", ".", "modality", "==", "'RGB'", "\n", "\n", "check_rootfolders", "(", ")", "\n", "\n", "#-----flip------", "\n", "if", "args", ".", "dataset", "==", "'somethingv1'", "or", "args", ".", "dataset", "==", "'somethingv2'", ":", "\n", "        ", "target_transforms", "=", "{", "86", ":", "87", ",", "87", ":", "86", ",", "93", ":", "94", ",", "94", ":", "93", ",", "166", ":", "167", ",", "167", ":", "166", "}", "\n", "", "else", ":", "\n", "        ", "target_transforms", "=", "None", "\n", "", "print", "(", "'--use flip with {}'", ".", "format", "(", "target_transforms", ")", ")", "\n", "\n", "# --- model init---", "\n", "model", "=", "VideoNet", "(", "num_class", ",", "args", ".", "num_segments", ",", "args", ".", "modality", ",", "\n", "backbone", "=", "args", ".", "arch", ",", "net", "=", "args", ".", "net", ",", "\n", "consensus_type", "=", "args", ".", "consensus_type", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "partial_bn", "=", "not", "args", ".", "no_partialbn", ",", "\n", "is_shift", "=", "args", ".", "shift", ",", "shift_div", "=", "args", ".", "shift_div", ",", "shift_place", "=", "args", ".", "shift_place", ",", "\n", "ef_lr5", "=", "args", ".", "ef_lr5", ",", "\n", "# fc_lr5=not (args.tune_from and args.dataset in args.tune_from),", "\n", "non_local", "=", "args", ".", "non_local", ",", "\n", "element_filter", "=", "args", ".", "element_filter", ",", "\n", "stage", "=", "args", ".", "stage", ",", "\n", "cdiv", "=", "args", ".", "cdiv", ",", "\n", "loop", "=", "args", ".", "loop", ",", "\n", "target_transforms", "=", "target_transforms", ")", "\n", "\n", "crop_size", "=", "model", ".", "scale_size", "if", "args", ".", "full_res", "else", "model", ".", "input_size", "# 224 or 256 (scale_size)", "\n", "scale_size", "=", "model", ".", "scale_size", "# 256", "\n", "input_mean", "=", "model", ".", "input_mean", "\n", "input_std", "=", "model", ".", "input_std", "\n", "policies", "=", "model", ".", "get_optim_policies", "(", ")", "\n", "train_augmentation", "=", "model", ".", "get_augmentation", "(", ")", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "#device_ids=args.gpus", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "policies", ",", "\n", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "args", ".", "temporal_pool", ":", "# early temporal pool so that we can load the state_dict", "\n", "            ", "make_temporal_pool", "(", "model", ".", "module", ".", "base_model", ",", "args", ".", "num_segments", ")", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_prec1", "=", "checkpoint", "[", "'best_prec1'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "evaluate", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", ")", "\n", "\n", "# if args.tune_from:", "\n", "#     print((\"=> fine-tuning from '{}'\".format(args.tune_from)))", "\n", "#     sd = torch.load(args.tune_from)", "\n", "#     sd = sd['state_dict']", "\n", "#     model_dict = model.state_dict()", "\n", "#     if 'TSM' in args.tune_from:", "\n", "#         replace_dict = []", "\n", "#         for k, v in sd.items():", "\n", "#             if k not in model_dict and k.replace('.net', '') in model_dict:", "\n", "#                 print('=> Load after remove .net: ', k)", "\n", "#                 replace_dict.append((k, k.replace('.net', '')))", "\n", "#         for k, v in model_dict.items():", "\n", "#             if k not in sd and k.replace('.net', '') in sd:", "\n", "#                 print('=> Load after adding .net: ', k)", "\n", "#                 replace_dict.append((k.replace('.net', ''), k))", "\n", "\n", "#         for k, k_new in replace_dict:", "\n", "#             sd[k_new] = sd.pop(k)", "\n", "#     keys1 = set(list(sd.keys()))", "\n", "#     keys2 = set(list(model_dict.keys()))", "\n", "#     set_diff = (keys1 - keys2) | (keys2 - keys1)", "\n", "#     print('#### Notice: keys that failed to load: {}'.format(set_diff))", "\n", "#     if args.dataset not in args.tune_from:  # new dataset", "\n", "#         print('=> New dataset, do not load fc weights')", "\n", "#         sd = {k: v for k, v in sd.items() if 'fc' not in k}", "\n", "#     # if args.modality == 'Flow' and 'Flow' not in args.tune_from:", "\n", "#     #     sd = {k: v for k, v in sd.items() if 'conv1.weight' not in k}", "\n", "#     model_dict.update(sd)", "\n", "#     model.load_state_dict(model_dict)", "\n", "\n", "# if args.temporal_pool and not args.resume:", "\n", "#     make_temporal_pool(model.module.base_model, args.num_segments)", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "if", "args", ".", "modality", "!=", "'RGBDiff'", ":", "\n", "        ", "normalize", "=", "GroupNormalize", "(", "input_mean", ",", "input_std", ")", "\n", "", "else", ":", "\n", "        ", "normalize", "=", "IdentityTransform", "(", ")", "\n", "\n", "", "if", "args", ".", "modality", "==", "'RGB'", ":", "\n", "        ", "data_length", "=", "1", "\n", "", "elif", "args", ".", "modality", "in", "[", "'Flow'", ",", "'RGBDiff'", "]", ":", "\n", "        ", "data_length", "=", "5", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "TSNDataSet", "(", "args", ".", "root_path", ",", "args", ".", "train_list", ",", "num_segments", "=", "args", ".", "num_segments", ",", "\n", "new_length", "=", "data_length", ",", "\n", "modality", "=", "args", ".", "modality", ",", "\n", "image_tmpl", "=", "prefix", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "train_augmentation", ",", "\n", "Stack", "(", "roll", "=", "(", "args", ".", "arch", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "ToTorchFormatTensor", "(", "div", "=", "(", "args", ".", "arch", "not", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "dense_sample", "=", "args", ".", "dense_sample", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "# prevent something not % n_GPU", "\n", "\n", "if", "args", ".", "dense_sample", ":", "\n", "        ", "val_batch_size", "=", "args", ".", "batch_size", "//", "2", "\n", "", "elif", "args", ".", "twice_sample", ":", "\n", "        ", "val_batch_size", "=", "int", "(", "args", ".", "batch_size", "*", "2.5", ")", "\n", "", "else", ":", "\n", "        ", "val_batch_size", "=", "args", ".", "batch_size", "*", "5", "\n", "", "val_batch_size", "=", "max", "(", "1", ",", "val_batch_size", ")", "\n", "\n", "# test_list = '/vireo00/yanbin2/Sport_Video/videos_our/TraValTes/%s_tsm/test.txt'%args.dataset", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "TSNDataSet", "(", "args", ".", "root_path", ",", "args", ".", "val_list", ",", "num_segments", "=", "args", ".", "num_segments", ",", "\n", "new_length", "=", "data_length", ",", "\n", "modality", "=", "args", ".", "modality", ",", "\n", "image_tmpl", "=", "prefix", ",", "\n", "random_shift", "=", "False", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "GroupScale", "(", "int", "(", "scale_size", ")", ")", ",", "\n", "GroupCenterCrop", "(", "crop_size", ")", ",", "\n", "Stack", "(", "roll", "=", "(", "args", ".", "arch", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "ToTorchFormatTensor", "(", "div", "=", "(", "args", ".", "arch", "not", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "dense_sample", "=", "args", ".", "dense_sample", ",", "twice_sample", "=", "args", ".", "twice_sample", ")", ",", "\n", "batch_size", "=", "val_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "if", "args", ".", "loss_type", "==", "'nll'", ":", "\n", "        ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown loss type\"", ")", "\n", "\n", "", "for", "group", "in", "policies", ":", "\n", "        ", "print", "(", "(", "'group: {} has {} params, lr_mult: {}, decay_mult: {}'", ".", "format", "(", "\n", "group", "[", "'name'", "]", ",", "len", "(", "group", "[", "'params'", "]", ")", ",", "group", "[", "'lr_mult'", "]", ",", "group", "[", "'decay_mult'", "]", ")", ")", ")", "\n", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "0", ")", "\n", "return", "\n", "\n", "", "log_training", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ",", "'log.csv'", ")", ",", "'w'", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ",", "'args.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "args", ")", ")", "\n", "", "tf_writer", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ")", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ".", "lr_type", ",", "args", ".", "lr_steps", ")", "\n", "\n", "# train for one epoch", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "log_training", ",", "tf_writer", ")", "\n", "\n", "# evaluate on validation set", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "eval_freq", "==", "0", "or", "epoch", "==", "args", ".", "epochs", "-", "1", ":", "\n", "            ", "prec1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "log_training", ",", "tf_writer", ")", "\n", "\n", "# remember best prec@1 and save checkpoint", "\n", "is_best", "=", "prec1", ">", "best_prec1", "\n", "best_prec1", "=", "max", "(", "prec1", ",", "best_prec1", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/val_top1_best'", ",", "best_prec1", ",", "epoch", ")", "\n", "\n", "output_best", "=", "'Best val Prec@1: %.3f\\n'", "%", "(", "best_prec1", ")", "\n", "print", "(", "output_best", ")", "\n", "log_training", ".", "write", "(", "output_best", "+", "'\\n'", ")", "\n", "log_training", ".", "flush", "(", ")", "\n", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "}", ",", "is_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_tsm.train": [[268, 332], ["ops_tsntsmgst.utils.AverageMeter", "ops_tsntsmgst.utils.AverageMeter", "ops_tsntsmgst.utils.AverageMeter", "ops_tsntsmgst.utils.AverageMeter", "ops_tsntsmgst.utils.AverageMeter", "model.train", "time.time", "enumerate", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "model.module.partialBN", "model.module.partialBN", "ops_tsntsmgst.utils.AverageMeter.update", "target.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model", "criterion", "ops_tsntsmgst.utils.accuracy", "ops_tsntsmgst.utils.AverageMeter.update", "ops_tsntsmgst.utils.AverageMeter.update", "ops_tsntsmgst.utils.AverageMeter.update", "criterion.backward", "optimizer.step", "optimizer.zero_grad", "ops_tsntsmgst.utils.AverageMeter.update", "time.time", "criterion.item", "input.size", "prec1.item", "input.size", "prec5.item", "input.size", "torch.nn.utils.clip_grad_norm_", "print", "log.write", "log.flush", "time.time", "model.parameters", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.train", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.partialBN", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.partialBN", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.accuracy", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update"], ["", "", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "log", ",", "tf_writer", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "if", "args", ".", "no_partialbn", ":", "\n", "        ", "model", ".", "module", ".", "partialBN", "(", "False", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "module", ".", "partialBN", "(", "True", ")", "\n", "\n", "# switch to train mode", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input", ")", "\n", "target_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "target", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input_var", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "args", ".", "clip_gradient", "is", "not", "None", ":", "\n", "            ", "total_norm", "=", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "clip_gradient", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "output", "=", "(", "'Epoch: [{0}][{1}/{2}], lr: {lr:.5f}\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "lr", "=", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", "*", "0.1", ")", ")", "# TODO", "\n", "print", "(", "output", ")", "\n", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "", "tf_writer", ".", "add_scalar", "(", "'loss/train'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/train_top1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/train_top5'", ",", "top5", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'lr'", ",", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_tsm.validate": [[334, 396], ["ops_tsntsmgst.utils.AverageMeter", "ops_tsntsmgst.utils.AverageMeter", "ops_tsntsmgst.utils.AverageMeter", "ops_tsntsmgst.utils.AverageMeter", "model.eval", "time.time", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "log.write", "log.flush", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "target.cuda.numel", "target.cuda.cuda", "model", "output.reshape().mean.reshape().mean", "criterion", "ops_tsntsmgst.utils.accuracy", "ops_tsntsmgst.utils.AverageMeter.update", "ops_tsntsmgst.utils.AverageMeter.update", "ops_tsntsmgst.utils.AverageMeter.update", "ops_tsntsmgst.utils.AverageMeter.update", "time.time", "criterion.item", "input.size", "prec1.item", "input.size", "prec5.item", "input.size", "print", "output.reshape().mean.reshape", "time.time", "len", "log.write", "log.flush"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.accuracy", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "log", "=", "None", ",", "tf_writer", "=", "None", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "#+++++++++++++++++", "\n", "if", "args", ".", "dense_sample", ":", "\n", "        ", "num_crop", "=", "10", "\n", "", "elif", "args", ".", "twice_sample", ":", "\n", "        ", "num_crop", "=", "2", "\n", "", "else", ":", "\n", "        ", "num_crop", "=", "1", "\n", "#+++++++++++++++++", "\n", "# switch to evaluate mode", "\n", "", "model", ".", "eval", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "bsz", "=", "target", ".", "numel", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "# compute output", "\n", "output", "=", "model", "(", "input", ")", "\n", "output", "=", "output", ".", "reshape", "(", "bsz", ",", "num_crop", ",", "-", "1", ")", ".", "mean", "(", "1", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "output", "=", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "i", ",", "len", "(", "val_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "print", "(", "output", ")", "\n", "if", "log", "is", "not", "None", ":", "\n", "                    ", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "", "", "", "output", "=", "(", "'Testing Results: Prec@1 {top1.avg:.3f} Prec@5 {top5.avg:.3f} Loss {loss.avg:.5f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "loss", "=", "losses", ")", ")", "\n", "print", "(", "output", ")", "\n", "if", "log", "is", "not", "None", ":", "\n", "        ", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "if", "tf_writer", "is", "not", "None", ":", "\n", "        ", "tf_writer", ".", "add_scalar", "(", "'loss/val'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/val_top1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/val_top5'", ",", "top5", ".", "avg", ",", "epoch", ")", "\n", "\n", "", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_tsm.save_checkpoint": [[397, 402], ["torch.save", "torch.save", "torch.save", "shutil.copyfile", "filename.replace"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ")", ":", "\n", "    ", "filename", "=", "'%s/%s/ckpt.pth.tar'", "%", "(", "args", ".", "root_model", ",", "args", ".", "store_name", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "filename", ".", "replace", "(", "'pth.tar'", ",", "'best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_tsm.adjust_learning_rate": [[404, 419], ["sum", "np.array", "math.cos"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "lr_type", ",", "lr_steps", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "if", "lr_type", "==", "'step'", ":", "\n", "        ", "decay", "=", "0.1", "**", "(", "sum", "(", "epoch", ">=", "np", ".", "array", "(", "lr_steps", ")", ")", ")", "\n", "lr", "=", "args", ".", "lr", "*", "decay", "\n", "decay", "=", "args", ".", "weight_decay", "\n", "", "elif", "lr_type", "==", "'cos'", ":", "\n", "        ", "import", "math", "\n", "lr", "=", "0.5", "*", "args", ".", "lr", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch", "/", "args", ".", "epochs", ")", ")", "\n", "decay", "=", "args", ".", "weight_decay", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "*", "param_group", "[", "'lr_mult'", "]", "\n", "param_group", "[", "'weight_decay'", "]", "=", "decay", "*", "param_group", "[", "'decay_mult'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_tsm.check_rootfolders": [[421, 430], ["os.path.join", "os.path.join", "os.path.exists", "print", "os.mkdir"], "function", ["None"], ["", "", "def", "check_rootfolders", "(", ")", ":", "\n", "    ", "\"\"\"Create log and model folder\"\"\"", "\n", "folders_util", "=", "[", "args", ".", "root_log", ",", "args", ".", "root_model", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "root_model", ",", "args", ".", "store_name", ")", "]", "\n", "for", "folder", "in", "folders_util", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "            ", "print", "(", "'creating folder '", "+", "folder", ")", "\n", "os", ".", "mkdir", "(", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_tsn.main": [[28, 267], ["opts.parser.parse_args", "ops_tsntsmgst.dataset_config.return_dataset", "print", "main_tsn.check_rootfolders", "ops_tsntsmgst.models_tsn.VideoNet", "torch.nn.DataParallel().cuda.get_optim_policies", "torch.nn.DataParallel().cuda.get_augmentation", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "max", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "open", "tensorboardX.SummaryWriter", "range", "time.localtime", "time.localtime", "time.localtime", "time.localtime", "os.path.isfile", "ops_tsntsmgst.transforms.GroupNormalize", "ops_tsntsmgst.transforms.IdentityTransform", "ops_tsntsmgst.dataset.TSNDataSet", "ops_tsntsmgst.dataset.TSNDataSet", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "ValueError", "print", "main_tsn.validate", "os.path.join", "open", "f.write", "main_tsn.adjust_learning_rate", "main_tsn.train", "str", "time.time", "time.time", "time.time", "time.time", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "print", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "int", "os.path.join", "str", "os.path.join", "main_tsn.validate", "max", "tensorboardX.SummaryWriter.add_scalar", "print", "open.write", "open.flush", "main_tsn.save_checkpoint", "str", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "len", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict", "ops_tsntsmgst.transforms.GroupScale", "ops_tsntsmgst.transforms.Stack", "ops_tsntsmgst.transforms.ToTorchFormatTensor", "ops_tsntsmgst.transforms.GroupScale", "ops_tsntsmgst.transforms.GroupCenterCrop", "ops_tsntsmgst.transforms.Stack", "ops_tsntsmgst.transforms.ToTorchFormatTensor"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset_config.return_dataset", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.check_rootfolders", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.get_optim_policies", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.get_augmentation", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.validate", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.adjust_learning_rate", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.train", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.validate", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.save_checkpoint", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_prec1", ",", "best_prec1_test", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "num_class", ",", "args", ".", "train_list", ",", "args", ".", "val_list", ",", "args", ".", "root_path", ",", "prefix", "=", "dataset_config", ".", "return_dataset", "(", "args", ".", "dataset", ",", "\n", "args", ".", "modality", ")", "\n", "# ---args---", "\n", "if", "args", ".", "element_filter", ":", "\n", "        ", "full_arch_name", "=", "'TSN_{}_{}'", ".", "format", "(", "args", ".", "net", ",", "args", ".", "arch", ")", "\n", "", "else", ":", "\n", "        ", "full_arch_name", "=", "'TSN_{}'", ".", "format", "(", "args", ".", "arch", ")", "\n", "", "args", ".", "store_name", "=", "'_'", ".", "join", "(", "\n", "[", "full_arch_name", ",", "args", ".", "dataset", ",", "args", ".", "modality", ",", "args", ".", "consensus_type", ",", "'segment%d'", "%", "args", ".", "num_segments", ",", "\n", "'e{}'", ".", "format", "(", "args", ".", "epochs", ")", "]", ")", "\n", "# if args.pretrain != 'imagenet':", "\n", "#     args.store_name += '_{}'.format(args.pretrain)", "\n", "if", "args", ".", "lr_type", "!=", "'step'", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_{}'", ".", "format", "(", "args", ".", "lr_type", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_s%dp%d'", "%", "(", "args", ".", "lr_steps", "[", "0", "]", ",", "args", ".", "lr_steps", "[", "1", "]", ")", "\n", "", "if", "args", ".", "dense_sample", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_dense_val10'", "\n", "", "elif", "args", ".", "twice_sample", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_twice'", "\n", "", "if", "args", ".", "non_local", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_nl'", "\n", "", "if", "args", ".", "suffix", "is", "not", "None", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_{}'", ".", "format", "(", "args", ".", "suffix", ")", "\n", "", "if", "args", ".", "element_filter", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_ef%d'", "%", "args", ".", "cdiv", "\n", "", "if", "args", ".", "dropout", ">", "0", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_drp%s'", "%", "(", "str", "(", "args", ".", "dropout", ")", "[", "2", ":", "]", ")", "\n", "", "args", ".", "store_name", "+=", "'_lr%s'", "%", "(", "str", "(", "args", ".", "lr", ")", "[", "2", ":", "]", ")", "\n", "args", ".", "store_name", "+=", "'_b%d'", "%", "(", "args", ".", "batch_size", ")", "\n", "if", "args", ".", "no_partialbn", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_npb'", "\n", "", "if", "args", ".", "ef_lr5", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_eflr5'", "\n", "", "if", "args", ".", "loop", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_loop'", "\n", "# time info", "\n", "", "year", "=", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ".", "tm_year", "\n", "month", "=", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ".", "tm_mon", "\n", "day", "=", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ".", "tm_mday", "\n", "hour", "=", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ".", "tm_hour", "\n", "timeInfo", "=", "'_%02d%02d%02dh%02d'", "%", "(", "day", ",", "month", ",", "year", "-", "2000", ",", "hour", ")", "\n", "args", ".", "store_name", "+=", "timeInfo", "\n", "print", "(", "'storing name: '", "+", "args", ".", "store_name", ")", "\n", "# args.root_log += '_240320'", "\n", "# args.root_model += '_240320'", "\n", "\n", "assert", "args", ".", "modality", "==", "'RGB'", "\n", "\n", "check_rootfolders", "(", ")", "\n", "\n", "#-----flip------", "\n", "if", "args", ".", "dataset", "==", "'somethingv1'", "or", "args", ".", "dataset", "==", "'somethingv2'", ":", "\n", "        ", "target_transforms", "=", "{", "86", ":", "87", ",", "87", ":", "86", ",", "93", ":", "94", ",", "94", ":", "93", ",", "166", ":", "167", ",", "167", ":", "166", "}", "\n", "", "else", ":", "\n", "        ", "target_transforms", "=", "None", "\n", "\n", "# --- model init---", "\n", "", "model", "=", "VideoNet", "(", "num_class", ",", "args", ".", "num_segments", ",", "args", ".", "modality", ",", "\n", "backbone", "=", "args", ".", "arch", ",", "net", "=", "args", ".", "net", ",", "\n", "consensus_type", "=", "args", ".", "consensus_type", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "partial_bn", "=", "not", "args", ".", "no_partialbn", ",", "\n", "ef_lr5", "=", "args", ".", "ef_lr5", ",", "\n", "# fc_lr5=not (args.tune_from and args.dataset in args.tune_from),", "\n", "non_local", "=", "args", ".", "non_local", ",", "\n", "element_filter", "=", "args", ".", "element_filter", ",", "\n", "stage", "=", "args", ".", "stage", ",", "\n", "cdiv", "=", "args", ".", "cdiv", ",", "\n", "loop", "=", "args", ".", "loop", ",", "\n", "target_transforms", "=", "target_transforms", ")", "\n", "\n", "crop_size", "=", "model", ".", "scale_size", "if", "args", ".", "full_res", "else", "model", ".", "input_size", "# 224 or 256 (scale_size)", "\n", "crop_size_val2", "=", "model", ".", "input_size", "\n", "scale_size", "=", "model", ".", "scale_size", "# 256", "\n", "input_mean", "=", "model", ".", "input_mean", "\n", "input_std", "=", "model", ".", "input_std", "\n", "policies", "=", "model", ".", "get_optim_policies", "(", ")", "\n", "train_augmentation", "=", "model", ".", "get_augmentation", "(", ")", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "#device_ids=args.gpus", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "policies", ",", "\n", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "# if args.temporal_pool:  # early temporal pool so that we can load the state_dict", "\n", "#     make_temporal_pool(model.module.base_model, args.num_segments)", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_prec1", "=", "checkpoint", "[", "'best_prec1'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "evaluate", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", ")", "\n", "\n", "# if args.tune_from:", "\n", "#     print((\"=> fine-tuning from '{}'\".format(args.tune_from)))", "\n", "#     sd = torch.load(args.tune_from)", "\n", "#     sd = sd['state_dict']", "\n", "#     model_dict = model.state_dict()", "\n", "#     if 'TSM' in args.tune_from:", "\n", "#         replace_dict = []", "\n", "#         for k, v in sd.items():", "\n", "#             if k not in model_dict and k.replace('.net', '') in model_dict:", "\n", "#                 print('=> Load after remove .net: ', k)", "\n", "#                 replace_dict.append((k, k.replace('.net', '')))", "\n", "#         for k, v in model_dict.items():", "\n", "#             if k not in sd and k.replace('.net', '') in sd:", "\n", "#                 print('=> Load after adding .net: ', k)", "\n", "#                 replace_dict.append((k.replace('.net', ''), k))", "\n", "\n", "#         for k, k_new in replace_dict:", "\n", "#             sd[k_new] = sd.pop(k)", "\n", "#     keys1 = set(list(sd.keys()))", "\n", "#     keys2 = set(list(model_dict.keys()))", "\n", "#     set_diff = (keys1 - keys2) | (keys2 - keys1)", "\n", "#     print('#### Notice: keys that failed to load: {}'.format(set_diff))", "\n", "#     if args.dataset not in args.tune_from:  # new dataset", "\n", "#         print('=> New dataset, do not load fc weights')", "\n", "#         sd = {k: v for k, v in sd.items() if 'fc' not in k}", "\n", "#     # if args.modality == 'Flow' and 'Flow' not in args.tune_from:", "\n", "#     #     sd = {k: v for k, v in sd.items() if 'conv1.weight' not in k}", "\n", "#     model_dict.update(sd)", "\n", "#     model.load_state_dict(model_dict)", "\n", "\n", "# if args.temporal_pool and not args.resume:", "\n", "#     make_temporal_pool(model.module.base_model, args.num_segments)", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "if", "args", ".", "modality", "!=", "'RGBDiff'", ":", "\n", "        ", "normalize", "=", "GroupNormalize", "(", "input_mean", ",", "input_std", ")", "\n", "", "else", ":", "\n", "        ", "normalize", "=", "IdentityTransform", "(", ")", "\n", "\n", "", "if", "args", ".", "modality", "==", "'RGB'", ":", "\n", "        ", "data_length", "=", "1", "\n", "", "elif", "args", ".", "modality", "in", "[", "'Flow'", ",", "'RGBDiff'", "]", ":", "\n", "        ", "data_length", "=", "5", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "TSNDataSet", "(", "args", ".", "root_path", ",", "args", ".", "train_list", ",", "num_segments", "=", "args", ".", "num_segments", ",", "\n", "new_length", "=", "data_length", ",", "\n", "modality", "=", "args", ".", "modality", ",", "\n", "image_tmpl", "=", "prefix", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "GroupScale", "(", "(", "240", ",", "320", ")", ")", ",", "\n", "train_augmentation", ",", "\n", "Stack", "(", "roll", "=", "(", "args", ".", "arch", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "ToTorchFormatTensor", "(", "div", "=", "(", "args", ".", "arch", "not", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "dense_sample", "=", "args", ".", "dense_sample", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "# prevent something not % n_GPU", "\n", "\n", "if", "args", ".", "dense_sample", ":", "\n", "        ", "val_batch_size", "=", "args", ".", "batch_size", "//", "2", "\n", "", "elif", "args", ".", "twice_sample", ":", "\n", "        ", "val_batch_size", "=", "int", "(", "args", ".", "batch_size", "*", "2", ")", "\n", "", "else", ":", "\n", "        ", "val_batch_size", "=", "args", ".", "batch_size", "*", "4", "\n", "", "val_batch_size", "=", "max", "(", "1", ",", "val_batch_size", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "TSNDataSet", "(", "args", ".", "root_path", ",", "args", ".", "val_list", ",", "num_segments", "=", "args", ".", "num_segments", ",", "\n", "new_length", "=", "data_length", ",", "\n", "modality", "=", "args", ".", "modality", ",", "\n", "image_tmpl", "=", "prefix", ",", "\n", "random_shift", "=", "False", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "GroupScale", "(", "(", "240", ",", "320", ")", ")", ",", "\n", "# GroupScale(int(scale_size)),", "\n", "GroupCenterCrop", "(", "crop_size_val2", ")", ",", "\n", "Stack", "(", "roll", "=", "(", "args", ".", "arch", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "ToTorchFormatTensor", "(", "div", "=", "(", "args", ".", "arch", "not", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "dense_sample", "=", "args", ".", "dense_sample", ")", ",", "\n", "batch_size", "=", "val_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "if", "args", ".", "loss_type", "==", "'nll'", ":", "\n", "        ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown loss type\"", ")", "\n", "\n", "", "for", "group", "in", "policies", ":", "\n", "        ", "print", "(", "(", "'group: {} has {} params, lr_mult: {}, decay_mult: {}'", ".", "format", "(", "\n", "group", "[", "'name'", "]", ",", "len", "(", "group", "[", "'params'", "]", ")", ",", "group", "[", "'lr_mult'", "]", ",", "group", "[", "'decay_mult'", "]", ")", ")", ")", "\n", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "0", ")", "\n", "return", "\n", "\n", "", "log_training", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ",", "'log.csv'", ")", ",", "'w'", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ",", "'args.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "args", ")", ")", "\n", "", "tf_writer", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ")", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ".", "lr_type", ",", "args", ".", "lr_steps", ")", "\n", "\n", "# train for one epoch", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "log_training", ",", "tf_writer", ")", "\n", "\n", "# evaluate on validation set", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "eval_freq", "==", "0", "or", "epoch", "==", "args", ".", "epochs", "-", "1", ":", "\n", "            ", "prec1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "log_training", ",", "tf_writer", ")", "\n", "\n", "# remember best prec@1 and save checkpoint", "\n", "is_best", "=", "prec1", ">", "best_prec1", "\n", "best_prec1", "=", "max", "(", "prec1", ",", "best_prec1", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/val_top1_best'", ",", "best_prec1", ",", "epoch", ")", "\n", "\n", "output_best", "=", "'Best val Prec@1: %.3f\\n'", "%", "(", "best_prec1", ")", "\n", "print", "(", "output_best", ")", "\n", "log_training", ".", "write", "(", "output_best", "+", "'\\n'", ")", "\n", "log_training", ".", "flush", "(", ")", "\n", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "}", ",", "is_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_tsn.train": [[268, 332], ["ops_tsntsmgst.utils.AverageMeter", "ops_tsntsmgst.utils.AverageMeter", "ops_tsntsmgst.utils.AverageMeter", "ops_tsntsmgst.utils.AverageMeter", "ops_tsntsmgst.utils.AverageMeter", "model.train", "time.time", "enumerate", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "model.module.partialBN", "model.module.partialBN", "ops_tsntsmgst.utils.AverageMeter.update", "target.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model", "criterion", "ops_tsntsmgst.utils.accuracy", "ops_tsntsmgst.utils.AverageMeter.update", "ops_tsntsmgst.utils.AverageMeter.update", "ops_tsntsmgst.utils.AverageMeter.update", "criterion.backward", "optimizer.step", "optimizer.zero_grad", "ops_tsntsmgst.utils.AverageMeter.update", "time.time", "criterion.item", "input.size", "prec1.item", "input.size", "prec5.item", "input.size", "torch.nn.utils.clip_grad_norm_", "print", "log.write", "log.flush", "time.time", "model.parameters", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.train", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.partialBN", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.partialBN", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.accuracy", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update"], ["", "", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "log", ",", "tf_writer", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "if", "args", ".", "no_partialbn", ":", "\n", "        ", "model", ".", "module", ".", "partialBN", "(", "False", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "module", ".", "partialBN", "(", "True", ")", "\n", "\n", "# switch to train mode", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input", ")", "\n", "target_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "target", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input_var", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "args", ".", "clip_gradient", "is", "not", "None", ":", "\n", "            ", "total_norm", "=", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "clip_gradient", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "output", "=", "(", "'Epoch: [{0}][{1}/{2}], lr: {lr:.5f}\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "lr", "=", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", "*", "0.1", ")", ")", "# TODO", "\n", "print", "(", "output", ")", "\n", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "", "tf_writer", ".", "add_scalar", "(", "'loss/train'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/train_top1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/train_top5'", ",", "top5", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'lr'", ",", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_tsn.validate": [[334, 389], ["ops_tsntsmgst.utils.AverageMeter", "ops_tsntsmgst.utils.AverageMeter", "ops_tsntsmgst.utils.AverageMeter", "ops_tsntsmgst.utils.AverageMeter", "model.eval", "time.time", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "log.write", "log.flush", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "target.cuda.cuda", "model", "criterion", "ops_tsntsmgst.utils.accuracy", "ops_tsntsmgst.utils.AverageMeter.update", "ops_tsntsmgst.utils.AverageMeter.update", "ops_tsntsmgst.utils.AverageMeter.update", "ops_tsntsmgst.utils.AverageMeter.update", "time.time", "criterion.item", "input.size", "prec1.item", "input.size", "prec5.item", "input.size", "print", "time.time", "len", "log.write", "log.flush"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.accuracy", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "log", "=", "None", ",", "tf_writer", "=", "None", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "target", "=", "target", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "output", "=", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "i", ",", "len", "(", "val_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "print", "(", "output", ")", "\n", "if", "log", "is", "not", "None", ":", "\n", "                    ", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "", "", "", "output", "=", "(", "'Testing Results: Prec@1 {top1.avg:.3f} Prec@5 {top5.avg:.3f} Loss {loss.avg:.5f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "loss", "=", "losses", ")", ")", "\n", "print", "(", "output", ")", "\n", "if", "log", "is", "not", "None", ":", "\n", "        ", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "if", "tf_writer", "is", "not", "None", ":", "\n", "        ", "tf_writer", ".", "add_scalar", "(", "'loss/valCenter'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/valCenter_top1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/valCenter_top5'", ",", "top5", ".", "avg", ",", "epoch", ")", "\n", "\n", "", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_tsn.save_checkpoint": [[391, 396], ["torch.save", "torch.save", "torch.save", "shutil.copyfile", "filename.replace"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ")", ":", "\n", "    ", "filename", "=", "'%s/%s/ckpt.pth.tar'", "%", "(", "args", ".", "root_model", ",", "args", ".", "store_name", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "filename", ".", "replace", "(", "'pth.tar'", ",", "'best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_tsn.adjust_learning_rate": [[398, 413], ["sum", "np.array", "math.cos"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "lr_type", ",", "lr_steps", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "if", "lr_type", "==", "'step'", ":", "\n", "        ", "decay", "=", "0.1", "**", "(", "sum", "(", "epoch", ">=", "np", ".", "array", "(", "lr_steps", ")", ")", ")", "\n", "lr", "=", "args", ".", "lr", "*", "decay", "\n", "decay", "=", "args", ".", "weight_decay", "\n", "", "elif", "lr_type", "==", "'cos'", ":", "\n", "        ", "import", "math", "\n", "lr", "=", "0.5", "*", "args", ".", "lr", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch", "/", "args", ".", "epochs", ")", ")", "\n", "decay", "=", "args", ".", "weight_decay", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "*", "param_group", "[", "'lr_mult'", "]", "\n", "param_group", "[", "'weight_decay'", "]", "=", "decay", "*", "param_group", "[", "'decay_mult'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_tsn.check_rootfolders": [[415, 424], ["os.path.join", "os.path.join", "os.path.exists", "print", "os.mkdir"], "function", ["None"], ["", "", "def", "check_rootfolders", "(", ")", ":", "\n", "    ", "\"\"\"Create log and model folder\"\"\"", "\n", "folders_util", "=", "[", "args", ".", "root_log", ",", "args", ".", "root_model", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "root_model", ",", "args", ".", "store_name", ")", "]", "\n", "for", "folder", "in", "folders_util", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "            ", "print", "(", "'creating folder '", "+", "folder", ")", "\n", "os", ".", "mkdir", "(", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.main": [[28, 266], ["opts.parser.parse_args", "ops_tsntsmgst.dataset_config.return_dataset", "print", "main_gst.check_rootfolders", "print", "ops_tsntsmgst.models_gst.VideoNet", "torch.nn.DataParallel().cuda.get_optim_policies", "torch.nn.DataParallel().cuda.get_augmentation", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "max", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "open", "tensorboardX.SummaryWriter", "range", "time.localtime", "time.localtime", "time.localtime", "time.localtime", "os.path.isfile", "print", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.state_dict", "set", "set", "print", "model.state_dict.update", "torch.nn.DataParallel().cuda.load_state_dict", "ops_tsntsmgst.transforms.GroupNormalize", "ops_tsntsmgst.transforms.IdentityTransform", "ops_tsntsmgst.dataset.TSNDataSet", "ops_tsntsmgst.dataset.TSNDataSet", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "ValueError", "print", "main_gst.validate", "os.path.join", "open", "f.write", "main_gst.adjust_learning_rate", "main_gst.train", "str", "time.time", "time.time", "time.time", "time.time", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "print", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "list", "list", "print", "int", "os.path.join", "str", "os.path.join", "main_gst.validate", "max", "tensorboardX.SummaryWriter.add_scalar", "print", "open.write", "open.flush", "main_gst.save_checkpoint", "str", "torch.load.keys", "model.state_dict.keys", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "len", "torch.load.items", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict", "ops_tsntsmgst.transforms.Stack", "ops_tsntsmgst.transforms.ToTorchFormatTensor", "ops_tsntsmgst.transforms.GroupScale", "ops_tsntsmgst.transforms.GroupCenterCrop", "ops_tsntsmgst.transforms.Stack", "ops_tsntsmgst.transforms.ToTorchFormatTensor", "int"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset_config.return_dataset", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.check_rootfolders", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.get_optim_policies", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.get_augmentation", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.validate", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.adjust_learning_rate", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.train", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.validate", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.save_checkpoint", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_prec1", ",", "best_prec1_test", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "num_class", ",", "args", ".", "train_list", ",", "args", ".", "val_list", ",", "args", ".", "root_path", ",", "prefix", "=", "dataset_config", ".", "return_dataset", "(", "args", ".", "dataset", ",", "\n", "args", ".", "modality", ")", "\n", "# ---args---", "\n", "if", "args", ".", "element_filter", ":", "\n", "        ", "full_arch_name", "=", "'GST_{}_{}'", ".", "format", "(", "args", ".", "net", ",", "args", ".", "arch", ")", "\n", "", "else", ":", "\n", "        ", "full_arch_name", "=", "'GST_{}'", ".", "format", "(", "args", ".", "arch", ")", "\n", "", "args", ".", "store_name", "=", "'_'", ".", "join", "(", "\n", "[", "full_arch_name", ",", "'a%db%d'", "%", "(", "args", ".", "alpha", ",", "args", ".", "beta", ")", ",", "args", ".", "dataset", ",", "args", ".", "modality", ",", "args", ".", "consensus_type", ",", "'segment%d'", "%", "args", ".", "num_segments", ",", "\n", "'e{}'", ".", "format", "(", "args", ".", "epochs", ")", "]", ")", "\n", "# if args.pretrain != 'imagenet':", "\n", "#     args.store_name += '_{}'.format(args.pretrain)", "\n", "if", "args", ".", "lr_type", "!=", "'step'", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_{}'", ".", "format", "(", "args", ".", "lr_type", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_s%dp%d'", "%", "(", "args", ".", "lr_steps", "[", "0", "]", ",", "args", ".", "lr_steps", "[", "1", "]", ")", "\n", "", "if", "args", ".", "dense_sample", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_dense_val10'", "\n", "", "elif", "args", ".", "twice_sample", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_twice'", "\n", "", "if", "args", ".", "non_local", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_nl'", "\n", "", "if", "args", ".", "suffix", "is", "not", "None", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_{}'", ".", "format", "(", "args", ".", "suffix", ")", "\n", "", "if", "args", ".", "element_filter", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_ef%d'", "%", "args", ".", "cdiv", "\n", "", "if", "args", ".", "dropout", ">", "0", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_drp%s'", "%", "(", "str", "(", "args", ".", "dropout", ")", "[", "2", ":", "]", ")", "\n", "", "args", ".", "store_name", "+=", "'_lr%s'", "%", "(", "str", "(", "args", ".", "lr", ")", "[", "2", ":", "]", ")", "\n", "args", ".", "store_name", "+=", "'_b%d'", "%", "(", "args", ".", "batch_size", ")", "\n", "if", "args", ".", "no_partialbn", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_npb'", "\n", "", "if", "args", ".", "ef_lr5", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_eflr5'", "\n", "", "if", "args", ".", "loop", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_loop'", "\n", "# time info", "\n", "", "year", "=", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ".", "tm_year", "\n", "month", "=", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ".", "tm_mon", "\n", "day", "=", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ".", "tm_mday", "\n", "hour", "=", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ".", "tm_hour", "\n", "timeInfo", "=", "'_%02d%02d%02dh%02d'", "%", "(", "day", ",", "month", ",", "year", "-", "2000", ",", "hour", ")", "\n", "args", ".", "store_name", "+=", "timeInfo", "\n", "print", "(", "'storing name: '", "+", "args", ".", "store_name", ")", "\n", "# args.root_log += '_c2d'", "\n", "# args.root_model += '_c2d'", "\n", "\n", "assert", "args", ".", "modality", "==", "'RGB'", "\n", "\n", "check_rootfolders", "(", ")", "\n", "\n", "#-----flip------", "\n", "if", "args", ".", "dataset", "==", "'somethingv1'", "or", "args", ".", "dataset", "==", "'somethingv2'", ":", "\n", "        ", "target_transforms", "=", "{", "86", ":", "87", ",", "87", ":", "86", ",", "93", ":", "94", ",", "94", ":", "93", ",", "166", ":", "167", ",", "167", ":", "166", "}", "\n", "", "else", ":", "\n", "        ", "target_transforms", "=", "None", "\n", "", "print", "(", "'--use flip with {}'", ".", "format", "(", "target_transforms", ")", ")", "\n", "\n", "# --- model init---", "\n", "model", "=", "VideoNet", "(", "num_class", ",", "args", ".", "num_segments", ",", "args", ".", "modality", ",", "\n", "backbone", "=", "args", ".", "arch", ",", "net", "=", "args", ".", "net", ",", "\n", "consensus_type", "=", "args", ".", "consensus_type", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "partial_bn", "=", "not", "args", ".", "no_partialbn", ",", "\n", "alpha", "=", "args", ".", "alpha", ",", "beta", "=", "args", ".", "beta", ",", "\n", "ef_lr5", "=", "args", ".", "ef_lr5", ",", "\n", "# fc_lr5=not (args.tune_from and args.dataset in args.tune_from),", "\n", "non_local", "=", "args", ".", "non_local", ",", "\n", "element_filter", "=", "args", ".", "element_filter", ",", "\n", "stage", "=", "args", ".", "stage", ",", "\n", "cdiv", "=", "args", ".", "cdiv", ",", "\n", "loop", "=", "args", ".", "loop", ",", "\n", "target_transforms", "=", "target_transforms", ")", "\n", "\n", "crop_size", "=", "model", ".", "scale_size", "if", "args", ".", "full_res", "else", "model", ".", "input_size", "# 224 or 256 (scale_size)", "\n", "crop_size_val2", "=", "model", ".", "input_size", "\n", "scale_size", "=", "model", ".", "scale_size", "# 256", "\n", "input_mean", "=", "model", ".", "input_mean", "\n", "input_std", "=", "model", ".", "input_std", "\n", "policies", "=", "model", ".", "get_optim_policies", "(", ")", "\n", "train_augmentation", "=", "model", ".", "get_augmentation", "(", ")", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "#device_ids=args.gpus", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "policies", ",", "\n", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_prec1", "=", "checkpoint", "[", "'best_prec1'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "evaluate", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", ")", "\n", "\n", "", "", "if", "args", ".", "tune_from", ":", "\n", "        ", "print", "(", "(", "\"=> fine-tuning from '{}'\"", ".", "format", "(", "args", ".", "tune_from", ")", ")", ")", "\n", "sd", "=", "torch", ".", "load", "(", "args", ".", "tune_from", ")", "\n", "sd", "=", "sd", "[", "'state_dict'", "]", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "# if 'TSM' in args.tune_from:", "\n", "#     replace_dict = []", "\n", "#     for k, v in sd.items():", "\n", "#         if k not in model_dict and k.replace('.net', '') in model_dict:", "\n", "#             print('=> Load after remove .net: ', k)", "\n", "#             replace_dict.append((k, k.replace('.net', '')))", "\n", "#     for k, v in model_dict.items():", "\n", "#         if k not in sd and k.replace('.net', '') in sd:", "\n", "#             print('=> Load after adding .net: ', k)", "\n", "#             replace_dict.append((k.replace('.net', ''), k))", "\n", "\n", "#     for k, k_new in replace_dict:", "\n", "#         sd[k_new] = sd.pop(k)", "\n", "keys1", "=", "set", "(", "list", "(", "sd", ".", "keys", "(", ")", ")", ")", "\n", "keys2", "=", "set", "(", "list", "(", "model_dict", ".", "keys", "(", ")", ")", ")", "\n", "set_diff", "=", "(", "keys1", "-", "keys2", ")", "|", "(", "keys2", "-", "keys1", ")", "\n", "print", "(", "'#### Notice: keys that failed to load: {}'", ".", "format", "(", "set_diff", ")", ")", "\n", "if", "args", ".", "dataset", "not", "in", "args", ".", "tune_from", ":", "# new dataset", "\n", "            ", "print", "(", "'=> New dataset, do not load fc weights'", ")", "\n", "sd", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sd", ".", "items", "(", ")", "if", "'fc'", "not", "in", "k", "}", "\n", "# if args.modality == 'Flow' and 'Flow' not in args.tune_from:", "\n", "#     sd = {k: v for k, v in sd.items() if 'conv1.weight' not in k}", "\n", "", "model_dict", ".", "update", "(", "sd", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "# if args.temporal_pool and not args.resume:", "\n", "#     make_temporal_pool(model.module.base_model, args.num_segments)", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "if", "args", ".", "modality", "!=", "'RGBDiff'", ":", "\n", "        ", "normalize", "=", "GroupNormalize", "(", "input_mean", ",", "input_std", ")", "\n", "", "else", ":", "\n", "        ", "normalize", "=", "IdentityTransform", "(", ")", "\n", "\n", "", "if", "args", ".", "modality", "==", "'RGB'", ":", "\n", "        ", "data_length", "=", "1", "\n", "", "elif", "args", ".", "modality", "in", "[", "'Flow'", ",", "'RGBDiff'", "]", ":", "\n", "        ", "data_length", "=", "5", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "TSNDataSet", "(", "args", ".", "root_path", ",", "args", ".", "train_list", ",", "num_segments", "=", "args", ".", "num_segments", ",", "\n", "new_length", "=", "data_length", ",", "\n", "modality", "=", "args", ".", "modality", ",", "\n", "image_tmpl", "=", "prefix", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "train_augmentation", ",", "\n", "Stack", "(", "roll", "=", "(", "args", ".", "arch", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "ToTorchFormatTensor", "(", "div", "=", "(", "args", ".", "arch", "not", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "dense_sample", "=", "args", ".", "dense_sample", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "# prevent something not % n_GPU", "\n", "\n", "if", "args", ".", "dense_sample", ":", "\n", "        ", "val_batch_size", "=", "args", ".", "batch_size", "//", "2", "\n", "", "elif", "args", ".", "twice_sample", ":", "\n", "        ", "val_batch_size", "=", "int", "(", "args", ".", "batch_size", "*", "2", ")", "\n", "", "else", ":", "\n", "        ", "val_batch_size", "=", "args", ".", "batch_size", "*", "4", "\n", "", "val_batch_size", "=", "max", "(", "1", ",", "val_batch_size", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "TSNDataSet", "(", "args", ".", "root_path", ",", "args", ".", "val_list", ",", "num_segments", "=", "args", ".", "num_segments", ",", "\n", "new_length", "=", "data_length", ",", "\n", "modality", "=", "args", ".", "modality", ",", "\n", "image_tmpl", "=", "prefix", ",", "\n", "test_mode", "=", "True", ",", "\n", "random_shift", "=", "False", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "GroupScale", "(", "int", "(", "scale_size", ")", ")", ",", "\n", "GroupCenterCrop", "(", "crop_size", ")", ",", "\n", "Stack", "(", "roll", "=", "(", "args", ".", "arch", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "ToTorchFormatTensor", "(", "div", "=", "(", "args", ".", "arch", "not", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "dense_sample", "=", "args", ".", "dense_sample", ",", "twice_sample", "=", "args", ".", "twice_sample", ")", ",", "\n", "batch_size", "=", "val_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "if", "args", ".", "loss_type", "==", "'nll'", ":", "\n", "        ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown loss type\"", ")", "\n", "\n", "", "for", "group", "in", "policies", ":", "\n", "        ", "print", "(", "(", "'group: {} has {} params, lr_mult: {}, decay_mult: {}'", ".", "format", "(", "\n", "group", "[", "'name'", "]", ",", "len", "(", "group", "[", "'params'", "]", ")", ",", "group", "[", "'lr_mult'", "]", ",", "group", "[", "'decay_mult'", "]", ")", ")", ")", "\n", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "0", ")", "\n", "return", "\n", "\n", "", "log_training", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ",", "'log.csv'", ")", ",", "'w'", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ",", "'args.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "args", ")", ")", "\n", "", "tf_writer", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ")", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ".", "lr_type", ",", "args", ".", "lr_steps", ")", "\n", "\n", "# train for one epoch", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "log_training", ",", "tf_writer", ")", "\n", "\n", "# evaluate on validation set", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "eval_freq", "==", "0", "or", "epoch", "==", "args", ".", "epochs", "-", "1", ":", "\n", "            ", "prec1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "log_training", ",", "tf_writer", ")", "\n", "\n", "# remember best prec@1 and save checkpoint", "\n", "is_best", "=", "prec1", ">", "best_prec1", "\n", "best_prec1", "=", "max", "(", "prec1", ",", "best_prec1", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/val_top1_best'", ",", "best_prec1", ",", "epoch", ")", "\n", "\n", "output_best", "=", "'Best val Prec@1: %.3f\\n'", "%", "(", "best_prec1", ")", "\n", "print", "(", "output_best", ")", "\n", "log_training", ".", "write", "(", "output_best", "+", "'\\n'", ")", "\n", "log_training", ".", "flush", "(", ")", "\n", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "}", ",", "is_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.train": [[268, 332], ["ops_tsntsmgst.utils.AverageMeter", "ops_tsntsmgst.utils.AverageMeter", "ops_tsntsmgst.utils.AverageMeter", "ops_tsntsmgst.utils.AverageMeter", "ops_tsntsmgst.utils.AverageMeter", "model.train", "time.time", "enumerate", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "model.module.partialBN", "model.module.partialBN", "ops_tsntsmgst.utils.AverageMeter.update", "target.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model", "criterion", "ops_tsntsmgst.utils.accuracy", "ops_tsntsmgst.utils.AverageMeter.update", "ops_tsntsmgst.utils.AverageMeter.update", "ops_tsntsmgst.utils.AverageMeter.update", "criterion.backward", "optimizer.step", "optimizer.zero_grad", "ops_tsntsmgst.utils.AverageMeter.update", "time.time", "criterion.item", "input.size", "prec1.item", "input.size", "prec5.item", "input.size", "torch.nn.utils.clip_grad_norm_", "print", "log.write", "log.flush", "time.time", "model.parameters", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.train", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.partialBN", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.partialBN", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.accuracy", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update"], ["", "", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "log", ",", "tf_writer", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "if", "args", ".", "no_partialbn", ":", "\n", "        ", "model", ".", "module", ".", "partialBN", "(", "False", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "module", ".", "partialBN", "(", "True", ")", "\n", "\n", "# switch to train mode", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input", ")", "\n", "target_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "target", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input_var", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "args", ".", "clip_gradient", "is", "not", "None", ":", "\n", "            ", "total_norm", "=", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "clip_gradient", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "output", "=", "(", "'Epoch: [{0}][{1}/{2}], lr: {lr:.5f}\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "lr", "=", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", "*", "0.1", ")", ")", "# TODO", "\n", "print", "(", "output", ")", "\n", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "", "tf_writer", ".", "add_scalar", "(", "'loss/train'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/train_top1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/train_top5'", ",", "top5", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'lr'", ",", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.validate": [[334, 396], ["ops_tsntsmgst.utils.AverageMeter", "ops_tsntsmgst.utils.AverageMeter", "ops_tsntsmgst.utils.AverageMeter", "ops_tsntsmgst.utils.AverageMeter", "model.eval", "time.time", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "log.write", "log.flush", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "target.cuda.numel", "target.cuda.cuda", "model", "output.reshape().mean.reshape().mean", "criterion", "ops_tsntsmgst.utils.accuracy", "ops_tsntsmgst.utils.AverageMeter.update", "ops_tsntsmgst.utils.AverageMeter.update", "ops_tsntsmgst.utils.AverageMeter.update", "ops_tsntsmgst.utils.AverageMeter.update", "time.time", "criterion.item", "input.size", "prec1.item", "input.size", "prec5.item", "input.size", "print", "output.reshape().mean.reshape", "time.time", "len", "log.write", "log.flush"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.accuracy", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "log", "=", "None", ",", "tf_writer", "=", "None", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "#+++++++++++++++++", "\n", "if", "args", ".", "dense_sample", ":", "\n", "        ", "num_crop", "=", "10", "\n", "", "elif", "args", ".", "twice_sample", ":", "\n", "        ", "num_crop", "=", "2", "\n", "", "else", ":", "\n", "        ", "num_crop", "=", "1", "\n", "#+++++++++++++++++", "\n", "# switch to evaluate mode", "\n", "", "model", ".", "eval", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "bsz", "=", "target", ".", "numel", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "# compute output", "\n", "output", "=", "model", "(", "input", ")", "\n", "output", "=", "output", ".", "reshape", "(", "bsz", ",", "num_crop", ",", "-", "1", ")", ".", "mean", "(", "1", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "output", "=", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "i", ",", "len", "(", "val_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "print", "(", "output", ")", "\n", "if", "log", "is", "not", "None", ":", "\n", "                    ", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "", "", "", "output", "=", "(", "'Testing Results: Prec@1 {top1.avg:.3f} Prec@5 {top5.avg:.3f} Loss {loss.avg:.5f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "loss", "=", "losses", ")", ")", "\n", "print", "(", "output", ")", "\n", "if", "log", "is", "not", "None", ":", "\n", "        ", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "if", "tf_writer", "is", "not", "None", ":", "\n", "        ", "tf_writer", ".", "add_scalar", "(", "'loss/val'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/val_top1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/val_top5'", ",", "top5", ".", "avg", ",", "epoch", ")", "\n", "\n", "", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.save_checkpoint": [[398, 403], ["torch.save", "torch.save", "torch.save", "shutil.copyfile", "filename.replace"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ")", ":", "\n", "    ", "filename", "=", "'%s/%s/ckpt.pth.tar'", "%", "(", "args", ".", "root_model", ",", "args", ".", "store_name", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "filename", ".", "replace", "(", "'pth.tar'", ",", "'best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.adjust_learning_rate": [[405, 420], ["sum", "np.array", "math.cos"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "lr_type", ",", "lr_steps", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "if", "lr_type", "==", "'step'", ":", "\n", "        ", "decay", "=", "0.1", "**", "(", "sum", "(", "epoch", ">=", "np", ".", "array", "(", "lr_steps", ")", ")", ")", "\n", "lr", "=", "args", ".", "lr", "*", "decay", "\n", "decay", "=", "args", ".", "weight_decay", "\n", "", "elif", "lr_type", "==", "'cos'", ":", "\n", "        ", "import", "math", "\n", "lr", "=", "0.5", "*", "args", ".", "lr", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch", "/", "args", ".", "epochs", ")", ")", "\n", "decay", "=", "args", ".", "weight_decay", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "*", "param_group", "[", "'lr_mult'", "]", "\n", "param_group", "[", "'weight_decay'", "]", "=", "decay", "*", "param_group", "[", "'decay_mult'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.None.main_gst.check_rootfolders": [[422, 431], ["os.path.join", "os.path.join", "os.path.exists", "print", "os.mkdir"], "function", ["None"], ["", "", "def", "check_rootfolders", "(", ")", ":", "\n", "    ", "\"\"\"Create log and model folder\"\"\"", "\n", "folders_util", "=", "[", "args", ".", "root_log", ",", "args", ".", "root_model", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "root_model", ",", "args", ".", "store_name", ")", "]", "\n", "for", "folder", "in", "folders_util", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "            ", "print", "(", "'creating folder '", "+", "folder", ")", "\n", "os", ".", "mkdir", "(", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.GroupRandomCrop.__init__": [[11, 16], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.GroupRandomCrop.__call__": [[17, 36], ["list", "random.randint", "random.randint", "list.append", "list.append", "img.crop"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "img_group", ",", "label", "=", "img", "\n", "w", ",", "h", "=", "img_group", "[", "0", "]", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "\n", "out_images", "=", "list", "(", ")", "\n", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "\n", "for", "img", "in", "img_group", ":", "\n", "            ", "assert", "(", "img", ".", "size", "[", "0", "]", "==", "w", "and", "img", ".", "size", "[", "1", "]", "==", "h", ")", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "                ", "out_images", ".", "append", "(", "img", ")", "\n", "", "else", ":", "\n", "                ", "out_images", ".", "append", "(", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ")", "\n", "\n", "", "", "return", "out_images", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.GroupCenterCrop.__init__": [[39, 41], ["torchvision.transforms.CenterCrop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "worker", "=", "torchvision", ".", "transforms", ".", "CenterCrop", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.GroupCenterCrop.__call__": [[42, 45], ["transforms.GroupCenterCrop.worker"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img_group", ",", "label", "=", "img", "\n", "return", "[", "self", ".", "worker", "(", "img", ")", "for", "img", "in", "img_group", "]", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.GroupRandomHorizontalFlip.__init__": [[50, 52], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "is_flow", "=", "False", ")", ":", "\n", "        ", "self", ".", "is_flow", "=", "is_flow", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.GroupRandomHorizontalFlip.__call__": [[53, 64], ["random.random", "img.transpose", "range", "len", "PIL.ImageOps.invert"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img_group", ",", "label", "=", "img", "\n", "v", "=", "random", ".", "random", "(", ")", "\n", "if", "v", "<", "0.5", ":", "\n", "            ", "ret", "=", "[", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "for", "img", "in", "img_group", "]", "\n", "if", "self", ".", "is_flow", ":", "\n", "                ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "ret", ")", ",", "2", ")", ":", "\n", "                    ", "ret", "[", "i", "]", "=", "ImageOps", ".", "invert", "(", "ret", "[", "i", "]", ")", "# invert flow pixel values when flipping", "\n", "", "", "return", "ret", ",", "label", "\n", "", "else", ":", "\n", "            ", "return", "img_group", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.GroupRandomHorizontalFlip_sth.__init__": [[68, 70], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "target_transform", "=", "None", ")", ":", "\n", "\t\t", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.GroupRandomHorizontalFlip_sth.__call__": [[71, 82], ["random.random", "img.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\t\t", "img_group", ",", "label", "=", "img", "\n", "v", "=", "random", ".", "random", "(", ")", "\n", "if", "v", "<", "0.5", ":", "\n", "\t\t\t", "ret", "=", "[", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "for", "img", "in", "img_group", "]", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "\t\t\t\t", "if", "label", "in", "self", ".", "target_transform", ":", "\n", "\t\t\t\t\t", "label", "=", "self", ".", "target_transform", "[", "label", "]", "\n", "", "", "return", "ret", ",", "label", "\n", "", "else", ":", "\n", "\t\t\t", "return", "img_group", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.GroupNormalize.__init__": [[85, 88], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.GroupNormalize.__call__": [[89, 99], ["zip", "t.sub_().div_", "len", "len", "tensor.size", "tensor.size", "t.sub_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "Te", ")", ":", "\n", "        ", "tensor", ",", "label", "=", "Te", "\n", "rep_mean", "=", "self", ".", "mean", "*", "(", "tensor", ".", "size", "(", ")", "[", "0", "]", "//", "len", "(", "self", ".", "mean", ")", ")", "\n", "rep_std", "=", "self", ".", "std", "*", "(", "tensor", ".", "size", "(", ")", "[", "0", "]", "//", "len", "(", "self", ".", "std", ")", ")", "\n", "\n", "# TODO: make efficient", "\n", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "rep_mean", ",", "rep_std", ")", ":", "\n", "            ", "t", ".", "sub_", "(", "m", ")", ".", "div_", "(", "s", ")", "\n", "\n", "", "return", "tensor", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.GroupScale.__init__": [[110, 112], ["torchvision.transforms.Resize"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "worker", "=", "torchvision", ".", "transforms", ".", "Resize", "(", "size", ",", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.GroupScale.__call__": [[113, 116], ["transforms.GroupScale.worker"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img_group", ",", "label", "=", "img", "\n", "return", "[", "self", ".", "worker", "(", "img", ")", "for", "img", "in", "img_group", "]", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.GroupOverSample.__init__": [[119, 127], ["transforms.GroupScale", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ",", "scale_size", "=", "None", ",", "flip", "=", "True", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "if", "not", "isinstance", "(", "crop_size", ",", "int", ")", "else", "(", "crop_size", ",", "crop_size", ")", "\n", "\n", "if", "scale_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "scale_worker", "=", "GroupScale", "(", "scale_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale_worker", "=", "None", "\n", "", "self", ".", "flip", "=", "flip", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.GroupOverSample.__call__": [[128, 155], ["transforms.GroupMultiScaleCrop.fill_fix_offset", "list", "transforms.GroupOverSample.scale_worker", "list", "list", "enumerate", "list.extend", "img.crop", "list.append", "img.crop.copy().transpose", "list.extend", "list.append", "list.append", "img.crop.copy", "PIL.ImageOps.invert"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupMultiScaleCrop.fill_fix_offset"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img_group", ",", "label", "=", "img", "\n", "if", "self", ".", "scale_worker", "is", "not", "None", ":", "\n", "            ", "img_group", ",", "label", "=", "self", ".", "scale_worker", "(", "img", ")", "\n", "\n", "", "image_w", ",", "image_h", "=", "img_group", "[", "0", "]", ".", "size", "\n", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "\n", "offsets", "=", "GroupMultiScaleCrop", ".", "fill_fix_offset", "(", "False", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", "\n", "oversample_group", "=", "list", "(", ")", "\n", "for", "o_w", ",", "o_h", "in", "offsets", ":", "\n", "            ", "normal_group", "=", "list", "(", ")", "\n", "flip_group", "=", "list", "(", ")", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "img_group", ")", ":", "\n", "                ", "crop", "=", "img", ".", "crop", "(", "(", "o_w", ",", "o_h", ",", "o_w", "+", "crop_w", ",", "o_h", "+", "crop_h", ")", ")", "\n", "normal_group", ".", "append", "(", "crop", ")", "\n", "flip_crop", "=", "crop", ".", "copy", "(", ")", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "if", "img", ".", "mode", "==", "'L'", "and", "i", "%", "2", "==", "0", ":", "\n", "                    ", "flip_group", ".", "append", "(", "ImageOps", ".", "invert", "(", "flip_crop", ")", ")", "\n", "", "else", ":", "\n", "                    ", "flip_group", ".", "append", "(", "flip_crop", ")", "\n", "\n", "", "", "oversample_group", ".", "extend", "(", "normal_group", ")", "\n", "if", "self", ".", "flip", ":", "\n", "                ", "oversample_group", ".", "extend", "(", "flip_group", ")", "\n", "", "", "return", "oversample_group", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.GroupFullResSample.__init__": [[158, 166], ["transforms.GroupScale", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ",", "scale_size", "=", "None", ",", "flip", "=", "True", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "if", "not", "isinstance", "(", "crop_size", ",", "int", ")", "else", "(", "crop_size", ",", "crop_size", ")", "\n", "\n", "if", "scale_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "scale_worker", "=", "GroupScale", "(", "scale_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale_worker", "=", "None", "\n", "", "self", ".", "flip", "=", "flip", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.GroupFullResSample.__call__": [[167, 201], ["list", "list.append", "list.append", "list.append", "list", "transforms.GroupFullResSample.scale_worker", "list", "list", "enumerate", "list.extend", "list.extend", "img.crop", "list.append", "img.crop.copy().transpose", "list.append", "list.append", "img.crop.copy", "PIL.ImageOps.invert"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img_group", ",", "label", "=", "img", "\n", "if", "self", ".", "scale_worker", "is", "not", "None", ":", "\n", "            ", "img_group", ",", "label", "=", "self", ".", "scale_worker", "(", "img", ")", "\n", "\n", "", "image_w", ",", "image_h", "=", "img_group", "[", "0", "]", ".", "size", "\n", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "\n", "w_step", "=", "(", "image_w", "-", "crop_w", ")", "//", "4", "\n", "h_step", "=", "(", "image_h", "-", "crop_h", ")", "//", "4", "\n", "\n", "offsets", "=", "list", "(", ")", "\n", "offsets", ".", "append", "(", "(", "0", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# left", "\n", "offsets", ".", "append", "(", "(", "4", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# right", "\n", "offsets", ".", "append", "(", "(", "2", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center", "\n", "\n", "oversample_group", "=", "list", "(", ")", "\n", "for", "o_w", ",", "o_h", "in", "offsets", ":", "\n", "            ", "normal_group", "=", "list", "(", ")", "\n", "flip_group", "=", "list", "(", ")", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "img_group", ")", ":", "\n", "                ", "crop", "=", "img", ".", "crop", "(", "(", "o_w", ",", "o_h", ",", "o_w", "+", "crop_w", ",", "o_h", "+", "crop_h", ")", ")", "\n", "normal_group", ".", "append", "(", "crop", ")", "\n", "if", "self", ".", "flip", ":", "\n", "                    ", "flip_crop", "=", "crop", ".", "copy", "(", ")", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "if", "img", ".", "mode", "==", "'L'", "and", "i", "%", "2", "==", "0", ":", "\n", "                        ", "flip_group", ".", "append", "(", "ImageOps", ".", "invert", "(", "flip_crop", ")", ")", "\n", "", "else", ":", "\n", "                        ", "flip_group", ".", "append", "(", "flip_crop", ")", "\n", "\n", "", "", "", "oversample_group", ".", "extend", "(", "normal_group", ")", "\n", "oversample_group", ".", "extend", "(", "flip_group", ")", "\n", "", "return", "oversample_group", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.GroupMultiScaleCrop.__init__": [[205, 212], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "scales", "=", "None", ",", "max_distort", "=", "1", ",", "fix_crop", "=", "True", ",", "more_fix_crop", "=", "True", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "if", "scales", "is", "not", "None", "else", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", "\n", "self", ".", "max_distort", "=", "max_distort", "\n", "self", ".", "fix_crop", "=", "fix_crop", "\n", "self", ".", "more_fix_crop", "=", "more_fix_crop", "\n", "self", ".", "input_size", "=", "input_size", "if", "not", "isinstance", "(", "input_size", ",", "int", ")", "else", "[", "input_size", ",", "input_size", "]", "\n", "self", ".", "interpolation", "=", "Image", ".", "BILINEAR", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.GroupMultiScaleCrop.__call__": [[213, 222], ["transforms.GroupMultiScaleCrop._sample_crop_size", "img.crop", "img.resize"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupMultiScaleCrop._sample_crop_size"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img_group", ",", "label", "=", "img", "\n", "im_size", "=", "img_group", "[", "0", "]", ".", "size", "\n", "\n", "crop_w", ",", "crop_h", ",", "offset_w", ",", "offset_h", "=", "self", ".", "_sample_crop_size", "(", "im_size", ")", "\n", "crop_img_group", "=", "[", "img", ".", "crop", "(", "(", "offset_w", ",", "offset_h", ",", "offset_w", "+", "crop_w", ",", "offset_h", "+", "crop_h", ")", ")", "for", "img", "in", "img_group", "]", "\n", "ret_img_group", "=", "[", "img", ".", "resize", "(", "(", "self", ".", "input_size", "[", "0", "]", ",", "self", ".", "input_size", "[", "1", "]", ")", ",", "self", ".", "interpolation", ")", "\n", "for", "img", "in", "crop_img_group", "]", "\n", "return", "ret_img_group", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.GroupMultiScaleCrop._sample_crop_size": [[223, 246], ["min", "enumerate", "random.choice", "int", "enumerate", "random.randint", "random.randint", "transforms.GroupMultiScaleCrop._sample_fix_offset", "abs", "abs", "abs", "pairs.append"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupMultiScaleCrop._sample_fix_offset"], ["", "def", "_sample_crop_size", "(", "self", ",", "im_size", ")", ":", "\n", "        ", "image_w", ",", "image_h", "=", "im_size", "[", "0", "]", ",", "im_size", "[", "1", "]", "\n", "\n", "# find a crop size", "\n", "base_size", "=", "min", "(", "image_w", ",", "image_h", ")", "\n", "crop_sizes", "=", "[", "int", "(", "base_size", "*", "x", ")", "for", "x", "in", "self", ".", "scales", "]", "\n", "crop_h", "=", "[", "self", ".", "input_size", "[", "1", "]", "if", "abs", "(", "x", "-", "self", ".", "input_size", "[", "1", "]", ")", "<", "3", "else", "x", "for", "x", "in", "crop_sizes", "]", "\n", "crop_w", "=", "[", "self", ".", "input_size", "[", "0", "]", "if", "abs", "(", "x", "-", "self", ".", "input_size", "[", "0", "]", ")", "<", "3", "else", "x", "for", "x", "in", "crop_sizes", "]", "\n", "\n", "pairs", "=", "[", "]", "\n", "for", "i", ",", "h", "in", "enumerate", "(", "crop_h", ")", ":", "\n", "            ", "for", "j", ",", "w", "in", "enumerate", "(", "crop_w", ")", ":", "\n", "                ", "if", "abs", "(", "i", "-", "j", ")", "<=", "self", ".", "max_distort", ":", "\n", "                    ", "pairs", ".", "append", "(", "(", "w", ",", "h", ")", ")", "\n", "\n", "", "", "", "crop_pair", "=", "random", ".", "choice", "(", "pairs", ")", "\n", "if", "not", "self", ".", "fix_crop", ":", "\n", "            ", "w_offset", "=", "random", ".", "randint", "(", "0", ",", "image_w", "-", "crop_pair", "[", "0", "]", ")", "\n", "h_offset", "=", "random", ".", "randint", "(", "0", ",", "image_h", "-", "crop_pair", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "w_offset", ",", "h_offset", "=", "self", ".", "_sample_fix_offset", "(", "image_w", ",", "image_h", ",", "crop_pair", "[", "0", "]", ",", "crop_pair", "[", "1", "]", ")", "\n", "\n", "", "return", "crop_pair", "[", "0", "]", ",", "crop_pair", "[", "1", "]", ",", "w_offset", ",", "h_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.GroupMultiScaleCrop._sample_fix_offset": [[247, 250], ["transforms.GroupMultiScaleCrop.fill_fix_offset", "random.choice"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupMultiScaleCrop.fill_fix_offset"], ["", "def", "_sample_fix_offset", "(", "self", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", ":", "\n", "        ", "offsets", "=", "self", ".", "fill_fix_offset", "(", "self", ".", "more_fix_crop", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", "\n", "return", "random", ".", "choice", "(", "offsets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.GroupMultiScaleCrop.fill_fix_offset": [[251, 275], ["list", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "fill_fix_offset", "(", "more_fix_crop", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", ":", "\n", "        ", "w_step", "=", "(", "image_w", "-", "crop_w", ")", "//", "4", "\n", "h_step", "=", "(", "image_h", "-", "crop_h", ")", "//", "4", "\n", "\n", "ret", "=", "list", "(", ")", "\n", "ret", ".", "append", "(", "(", "0", ",", "0", ")", ")", "# upper left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "0", ")", ")", "# upper right", "\n", "ret", ".", "append", "(", "(", "0", ",", "4", "*", "h_step", ")", ")", "# lower left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "4", "*", "h_step", ")", ")", "# lower right", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center", "\n", "\n", "if", "more_fix_crop", ":", "\n", "            ", "ret", ".", "append", "(", "(", "0", ",", "2", "*", "h_step", ")", ")", "# center left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center right", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "4", "*", "h_step", ")", ")", "# lower center", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "0", "*", "h_step", ")", ")", "# upper center", "\n", "\n", "ret", ".", "append", "(", "(", "1", "*", "w_step", ",", "1", "*", "h_step", ")", ")", "# upper left quarter", "\n", "ret", ".", "append", "(", "(", "3", "*", "w_step", ",", "1", "*", "h_step", ")", ")", "# upper right quarter", "\n", "ret", ".", "append", "(", "(", "1", "*", "w_step", ",", "3", "*", "h_step", ")", ")", "# lower left quarter", "\n", "ret", ".", "append", "(", "(", "3", "*", "w_step", ",", "3", "*", "h_step", ")", ")", "# lower righ quarter", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.GroupRandomSizedCrop.__init__": [[284, 287], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.GroupRandomSizedCrop.__call__": [[288, 323], ["range", "random.uniform", "int", "int", "list", "transforms.GroupScale", "transforms.GroupRandomCrop", "GroupRandomCrop.", "random.uniform", "round", "round", "random.random", "random.randint", "random.randint", "img.crop.crop.crop", "list.append", "GroupScale.", "math.sqrt", "math.sqrt", "img.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img_group", ",", "label", "=", "img", "\n", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img_group", "[", "0", "]", ".", "size", "[", "0", "]", "*", "img_group", "[", "0", "]", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "0.08", ",", "1.0", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "3.", "/", "4", ",", "4.", "/", "3", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "w", ",", "h", "=", "h", ",", "w", "\n", "\n", "", "if", "w", "<=", "img_group", "[", "0", "]", ".", "size", "[", "0", "]", "and", "h", "<=", "img_group", "[", "0", "]", ".", "size", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img_group", "[", "0", "]", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img_group", "[", "0", "]", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "found", "=", "True", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "found", "=", "False", "\n", "x1", "=", "0", "\n", "y1", "=", "0", "\n", "\n", "", "if", "found", ":", "\n", "            ", "out_group", "=", "list", "(", ")", "\n", "for", "img", "in", "img_group", ":", "\n", "                ", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "assert", "(", "img", ".", "size", "==", "(", "w", ",", "h", ")", ")", "\n", "out_group", ".", "append", "(", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", ")", "\n", "", "return", "out_group", ",", "label", "\n", "", "else", ":", "\n", "# Fallback", "\n", "            ", "scale", "=", "GroupScale", "(", "self", ".", "size", ",", "interpolation", "=", "self", ".", "interpolation", ")", "\n", "crop", "=", "GroupRandomCrop", "(", "self", ".", "size", ")", "\n", "return", "crop", "(", "scale", "(", "img_group", ",", "label", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.Stack.__init__": [[327, 329], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "roll", "=", "False", ")", ":", "\n", "        ", "self", ".", "roll", "=", "roll", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.Stack.__call__": [[330, 339], ["numpy.concatenate", "numpy.concatenate", "numpy.expand_dims", "numpy.concatenate", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img_group", ",", "label", "=", "img", "\n", "if", "img_group", "[", "0", "]", ".", "mode", "==", "'L'", ":", "\n", "            ", "return", "np", ".", "concatenate", "(", "[", "np", ".", "expand_dims", "(", "x", ",", "2", ")", "for", "x", "in", "img_group", "]", ",", "axis", "=", "2", ")", ",", "label", "\n", "", "elif", "img_group", "[", "0", "]", ".", "mode", "==", "'RGB'", ":", "\n", "            ", "if", "self", ".", "roll", ":", "\n", "                ", "return", "np", ".", "concatenate", "(", "[", "np", ".", "array", "(", "x", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "for", "x", "in", "img_group", "]", ",", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "                ", "return", "np", ".", "concatenate", "(", "img_group", ",", "axis", "=", "2", ")", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.ToTorchFormatTensor.__init__": [[344, 346], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "div", "=", "True", ")", ":", "\n", "        ", "self", ".", "div", "=", "div", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.ToTorchFormatTensor.__call__": [[347, 360], ["isinstance", "torch.from_numpy().permute().contiguous", "torch.ByteTensor", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.view", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose().contiguous", "torch.ByteStorage.from_buffer", "len", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float().div", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float", "torch.from_numpy().permute", "pic.tobytes", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float", "torch.from_numpy", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "pi", ")", ":", "\n", "        ", "pic", ",", "label", "=", "pi", "\n", "if", "isinstance", "(", "pic", ",", "np", ".", "ndarray", ")", ":", "\n", "# handle numpy array", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "pic", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "# handle PIL Image", "\n", "            ", "img", "=", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "pic", ".", "tobytes", "(", ")", ")", ")", "\n", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "len", "(", "pic", ".", "mode", ")", ")", "\n", "# put it from HWC to CHW format", "\n", "# yikes, this transpose takes 80% of the loading time/CPU", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "if", "self", ".", "div", "else", "img", ".", "float", "(", ")", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.transforms.IdentityTransform.__call__": [[364, 366], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_gc.mSEModule.__init__": [[22, 60], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "n_segment", "=", "8", ",", "index", "=", "1", ")", ":", "\n", "        ", "super", "(", "mSEModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channel", "=", "channel", "\n", "self", ".", "reduction", "=", "16", "\n", "self", ".", "n_segment", "=", "n_segment", "\n", "self", ".", "stride", "=", "2", "**", "(", "index", "-", "1", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "channel", ",", "\n", "out_channels", "=", "self", ".", "channel", "//", "self", ".", "reduction", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "self", ".", "channel", "//", "self", ".", "reduction", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "channel", "//", "self", ".", "reduction", ",", "\n", "out_channels", "=", "self", ".", "channel", "//", "self", ".", "reduction", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "groups", "=", "self", ".", "channel", "//", "self", ".", "reduction", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "avg_pool_forward2", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "avg_pool_forward4", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", "\n", "\n", "self", ".", "sigmoid_forward", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "self", ".", "avg_pool_backward2", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "#nn.AdaptiveMaxPool2d(1)", "\n", "self", ".", "avg_pool_backward4", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", "\n", "\n", "self", ".", "sigmoid_backward", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "self", ".", "pad1_forward", "=", "(", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ")", "\n", "self", ".", "pad1_backward", "=", "(", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "channel", "//", "self", ".", "reduction", ",", "\n", "out_channels", "=", "self", ".", "channel", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "self", ".", "channel", ")", "\n", "\n", "self", ".", "conv3_smallscale2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "channel", "//", "self", ".", "reduction", ",", "\n", "out_channels", "=", "self", ".", "channel", "//", "self", ".", "reduction", ",", "padding", "=", "1", ",", "kernel_size", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3_smallscale2", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "self", ".", "channel", "//", "self", ".", "reduction", ")", "\n", "\n", "self", ".", "conv3_smallscale4", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "channel", "//", "self", ".", "reduction", ",", "\n", "out_channels", "=", "self", ".", "channel", "//", "self", ".", "reduction", ",", "padding", "=", "1", ",", "kernel_size", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3_smallscale4", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "self", ".", "channel", "//", "self", ".", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_gc.mSEModule.spatial_pool": [[61, 76], ["x.size", "input_x.unsqueeze.unsqueeze.view", "input_x.unsqueeze.unsqueeze.unsqueeze", "base_module_gc.mSEModule.conv_mask", "context_mask.view.view.view", "base_module_gc.mSEModule.softmax", "context_mask.view.view.view"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.softmax"], ["", "def", "spatial_pool", "(", "self", ",", "x", ")", ":", "\n", "        ", "nt", ",", "channel", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "input_x", "=", "x", "\n", "# [N, C, H * W]", "\n", "input_x", "=", "input_x", ".", "view", "(", "nt", ",", "channel", ",", "height", "*", "width", ")", "\n", "# [N, 1, C, H * W]", "\n", "input_x", "=", "input_x", ".", "unsqueeze", "(", "1", ")", "\n", "# [N, 1, H, W]", "\n", "context_mask", "=", "self", ".", "conv_mask", "(", "x", ")", "\n", "# [N, 1, H * W]", "\n", "context_mask", "=", "context_mask", ".", "view", "(", "nt", ",", "1", ",", "height", "*", "width", ")", "\n", "# [N, 1, H * W]", "\n", "context_mask", "=", "self", ".", "softmax", "(", "context_mask", ")", "\n", "context_mask", "=", "context_mask", ".", "view", "(", "nt", ",", "1", ",", "height", ",", "width", ")", "\n", "return", "context_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_gc.mSEModule.forward": [[78, 119], ["base_module_gc.mSEModule.conv1", "base_module_gc.mSEModule.bn1", "base_module_gc.mSEModule.view", "base_module_gc.mSEModule.view.split", "base_module_gc.mSEModule.view.split", "base_module_gc.mSEModule.conv2", "base_module_gc.mSEModule.view", "base_module_gc.mSEModule.view.split", "base_module_gc.mSEModule.view.split", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "diff_fea_pluszero_forward.view.view.view", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "diff_fea_pluszero_backward.view.view.view", "base_module_gc.mSEModule.avg_pool_forward2", "base_module_gc.mSEModule.avg_pool_backward2", "base_module_gc.mSEModule.bn3_smallscale2", "base_module_gc.mSEModule.bn3_smallscale2", "base_module_gc.mSEModule.bn3_smallscale4", "base_module_gc.mSEModule.bn3_smallscale4", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "base_module_gc.mSEModule.bn3", "base_module_gc.mSEModule.bn3", "base_module_gc.mSEModule.conv3_smallscale2", "base_module_gc.mSEModule.conv3_smallscale2", "base_module_gc.mSEModule.conv3_smallscale4", "base_module_gc.mSEModule.conv3_smallscale4", "base_module_gc.mSEModule.conv3", "base_module_gc.mSEModule.conv3", "base_module_gc.mSEModule.sigmoid_forward", "base_module_gc.mSEModule.sigmoid_backward", "diff_fea_pluszero_forward.view.view.size", "diff_fea_pluszero_backward.view.view.size", "base_module_gc.mSEModule.size", "base_module_gc.mSEModule.size", "diff_fea_pluszero_forward.view.view.size", "diff_fea_pluszero_backward.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bottleneck", "=", "self", ".", "conv1", "(", "x", ")", "# nt, c//r, h, w", "\n", "bottleneck", "=", "self", ".", "bn1", "(", "bottleneck", ")", "# nt, c//r, h, w", "\n", "reshape_bottleneck", "=", "bottleneck", ".", "view", "(", "(", "-", "1", ",", "self", ".", "n_segment", ")", "+", "bottleneck", ".", "size", "(", ")", "[", "1", ":", "]", ")", "# n, t, c//r, h, w", "\n", "\n", "t_fea_forward", ",", "_", "=", "reshape_bottleneck", ".", "split", "(", "[", "self", ".", "n_segment", "-", "1", ",", "1", "]", ",", "dim", "=", "1", ")", "# n, t-1, c//r, h, w", "\n", "_", ",", "t_fea_backward", "=", "reshape_bottleneck", ".", "split", "(", "[", "1", ",", "self", ".", "n_segment", "-", "1", "]", ",", "dim", "=", "1", ")", "# n, t-1, c//r, h, w", "\n", "\n", "conv_bottleneck", "=", "self", ".", "conv2", "(", "bottleneck", ")", "# nt, c//r, h, w", "\n", "reshape_conv_bottleneck", "=", "conv_bottleneck", ".", "view", "(", "(", "-", "1", ",", "self", ".", "n_segment", ")", "+", "conv_bottleneck", ".", "size", "(", ")", "[", "1", ":", "]", ")", "# n, t, c//r, h, w", "\n", "_", ",", "tPlusone_fea_forward", "=", "reshape_conv_bottleneck", ".", "split", "(", "[", "1", ",", "self", ".", "n_segment", "-", "1", "]", ",", "dim", "=", "1", ")", "# n, t-1, c//r, h, w", "\n", "tPlusone_fea_backward", ",", "_", "=", "reshape_conv_bottleneck", ".", "split", "(", "[", "self", ".", "n_segment", "-", "1", ",", "1", "]", ",", "dim", "=", "1", ")", "# n, t-1, c//r, h, w", "\n", "diff_fea_forward", "=", "tPlusone_fea_forward", "-", "t_fea_forward", "# n, t-1, c//r, h, w", "\n", "diff_fea_backward", "=", "tPlusone_fea_backward", "-", "t_fea_backward", "# n, t-1, c//r, h, w", "\n", "diff_fea_pluszero_forward", "=", "F", ".", "pad", "(", "diff_fea_forward", ",", "self", ".", "pad1_forward", ",", "mode", "=", "\"constant\"", ",", "value", "=", "0", ")", "# n, t, c//r, h, w", "\n", "diff_fea_pluszero_forward", "=", "diff_fea_pluszero_forward", ".", "view", "(", "(", "-", "1", ",", ")", "+", "diff_fea_pluszero_forward", ".", "size", "(", ")", "[", "2", ":", "]", ")", "#nt, c//r, h, w", "\n", "diff_fea_pluszero_backward", "=", "F", ".", "pad", "(", "diff_fea_backward", ",", "self", ".", "pad1_backward", ",", "mode", "=", "\"constant\"", ",", "value", "=", "0", ")", "# n, t, c//r, h, w", "\n", "diff_fea_pluszero_backward", "=", "diff_fea_pluszero_backward", ".", "view", "(", "(", "-", "1", ",", ")", "+", "diff_fea_pluszero_backward", ".", "size", "(", ")", "[", "2", ":", "]", ")", "#nt, c//r, h, w", "\n", "y_forward_smallscale2", "=", "self", ".", "avg_pool_forward2", "(", "diff_fea_pluszero_forward", ")", "# nt, c//r, 1, 1", "\n", "y_backward_smallscale2", "=", "self", ".", "avg_pool_backward2", "(", "diff_fea_pluszero_backward", ")", "# nt, c//r, 1, 1", "\n", "\n", "y_forward_smallscale4", "=", "diff_fea_pluszero_forward", "\n", "y_backward_smallscale4", "=", "diff_fea_pluszero_backward", "\n", "y_forward_smallscale2", "=", "self", ".", "bn3_smallscale2", "(", "self", ".", "conv3_smallscale2", "(", "y_forward_smallscale2", ")", ")", "\n", "y_backward_smallscale2", "=", "self", ".", "bn3_smallscale2", "(", "self", ".", "conv3_smallscale2", "(", "y_backward_smallscale2", ")", ")", "\n", "\n", "y_forward_smallscale4", "=", "self", ".", "bn3_smallscale4", "(", "self", ".", "conv3_smallscale4", "(", "y_forward_smallscale4", ")", ")", "\n", "y_backward_smallscale4", "=", "self", ".", "bn3_smallscale4", "(", "self", ".", "conv3_smallscale4", "(", "y_backward_smallscale4", ")", ")", "\n", "\n", "y_forward_smallscale2", "=", "F", ".", "interpolate", "(", "y_forward_smallscale2", ",", "diff_fea_pluszero_forward", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "y_backward_smallscale2", "=", "F", ".", "interpolate", "(", "y_backward_smallscale2", ",", "diff_fea_pluszero_backward", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "y_forward", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "1.0", "/", "3.0", "*", "diff_fea_pluszero_forward", "+", "1.0", "/", "3.0", "*", "y_forward_smallscale2", "+", "1.0", "/", "3.0", "*", "y_forward_smallscale4", ")", ")", "# nt, c, 1, 1", "\n", "y_backward", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "1.0", "/", "3.0", "*", "diff_fea_pluszero_backward", "+", "1.0", "/", "3.0", "*", "y_backward_smallscale2", "+", "1.0", "/", "3.0", "*", "y_backward_smallscale4", ")", ")", "# nt, c, 1, 1", "\n", "\n", "y_forward", "=", "self", ".", "sigmoid_forward", "(", "y_forward", ")", "-", "0.5", "\n", "y_backward", "=", "self", ".", "sigmoid_backward", "(", "y_backward", ")", "-", "0.5", "\n", "\n", "y", "=", "0.5", "*", "y_forward", "+", "0.5", "*", "y_backward", "\n", "output", "=", "x", "+", "x", "*", "y", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_gc.ShiftModule.__init__": [[121, 144], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "base_module_gc.ShiftModule.conv.weight.data.zero_", "base_module_gc.ShiftModule.conv.weight.data.zero_"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "n_segment", "=", "8", ",", "n_div", "=", "8", ",", "mode", "=", "'shift'", ")", ":", "\n", "        ", "super", "(", "ShiftModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_channels", "=", "input_channels", "\n", "self", ".", "n_segment", "=", "n_segment", "\n", "self", ".", "fold_div", "=", "n_div", "\n", "self", ".", "fold", "=", "self", ".", "input_channels", "//", "self", ".", "fold_div", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "self", ".", "fold_div", "*", "self", ".", "fold", ",", "self", ".", "fold_div", "*", "self", ".", "fold", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "groups", "=", "self", ".", "fold_div", "*", "self", ".", "fold", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "if", "mode", "==", "'shift'", ":", "\n", "            ", "self", ".", "conv", ".", "weight", ".", "requires_grad", "=", "True", "\n", "self", ".", "conv", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "conv", ".", "weight", ".", "data", "[", ":", "self", ".", "fold", ",", "0", ",", "2", "]", "=", "1", "# shift left", "\n", "self", ".", "conv", ".", "weight", ".", "data", "[", "self", ".", "fold", ":", "2", "*", "self", ".", "fold", ",", "0", ",", "0", "]", "=", "1", "# shift right", "\n", "if", "2", "*", "self", ".", "fold", "<", "self", ".", "input_channels", ":", "\n", "                ", "self", ".", "conv", ".", "weight", ".", "data", "[", "2", "*", "self", ".", "fold", ":", ",", "0", ",", "1", "]", "=", "1", "# fixed", "\n", "", "", "elif", "mode", "==", "'fixed'", ":", "\n", "            ", "self", ".", "conv", ".", "weight", ".", "requires_grad", "=", "True", "\n", "self", ".", "conv", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "conv", ".", "weight", ".", "data", "[", ":", ",", "0", ",", "1", "]", "=", "1", "# fixed", "\n", "", "elif", "mode", "==", "'norm'", ":", "\n", "            ", "self", ".", "conv", ".", "weight", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_gc.ShiftModule.forward": [[145, 156], ["x.contiguous().view.contiguous().view.size", "x.contiguous().view.contiguous().view.view", "x.contiguous().view.contiguous().view.permute", "x.contiguous().view.contiguous().view.contiguous().view", "base_module_gc.ShiftModule.conv", "x.contiguous().view.contiguous().view.view", "x.contiguous().view.contiguous().view.permute", "x.contiguous().view.contiguous().view.contiguous().view", "x.contiguous().view.contiguous().view.contiguous", "x.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "nt", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "n_batch", "=", "nt", "//", "self", ".", "n_segment", "\n", "x", "=", "x", ".", "view", "(", "n_batch", ",", "self", ".", "n_segment", ",", "c", ",", "h", ",", "w", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "2", ",", "1", ")", "# (n_batch, h, w, c, n_segment)", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "n_batch", "*", "h", "*", "w", ",", "c", ",", "self", ".", "n_segment", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "# (n_batch*h*w, c, n_segment)", "\n", "x", "=", "x", ".", "view", "(", "n_batch", ",", "h", ",", "w", ",", "c", ",", "self", ".", "n_segment", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "4", ",", "3", ",", "1", ",", "2", ")", "# (n_batch, n_segment, c, h, w)", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "nt", ",", "c", ",", "h", ",", "w", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_gc.BasicBlock.__init__": [[166, 175], ["torch.Module.__init__", "base_module_gc.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "base_module_gc.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.conv3x3", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.conv3x3"], ["def", "__init__", "(", "self", ",", "num_segments", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_gc.BasicBlock.forward": [[176, 193], ["base_module_gc.BasicBlock.conv1", "base_module_gc.BasicBlock.bn1", "base_module_gc.BasicBlock.relu", "base_module_gc.BasicBlock.conv2", "base_module_gc.BasicBlock.bn2", "base_module_gc.BasicBlock.relu", "base_module_gc.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_gc.Bottleneck.__init__": [[197, 237], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "print", "nets.Calibrator2D.GC_L33D", "nets.Calibrator2D.GC_T13D", "nets.Calibrator2D.GC_S23DD", "nets.Calibrator2D.GC_CLLD", "print"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "num_segments", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "use_ef", "=", "False", ",", "cdiv", "=", "4", ",", "loop_id", "=", "0", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "self", ".", "use_ef", "=", "use_ef", "\n", "\n", "if", "self", ".", "use_ef", ":", "\n", "            ", "print", "(", "'=> Using Partial Channel Calibrator with cdiv: {}'", ".", "format", "(", "cdiv", ")", ")", "\n", "self", ".", "loop_id", "=", "loop_id", "\n", "self", ".", "eft_c", "=", "planes", "//", "cdiv", "\n", "self", ".", "eft1", "=", "GC_L33D", "(", "self", ".", "eft_c", ",", "self", ".", "eft_c", ",", "num_segments", ")", "\n", "self", ".", "eft2", "=", "GC_T13D", "(", "self", ".", "eft_c", ",", "self", ".", "eft_c", ",", "num_segments", ")", "\n", "self", ".", "eft3", "=", "GC_S23DD", "(", "self", ".", "eft_c", ",", "self", ".", "eft_c", ",", "num_segments", ")", "\n", "self", ".", "eft4", "=", "GC_CLLD", "(", "self", ".", "eft_c", ",", "self", ".", "eft_c", ",", "num_segments", ")", "\n", "# self.eft = (self.eft_c, self.eft_c, num_segments)", "\n", "self", ".", "start_c1", "=", "loop_id", "*", "self", ".", "eft_c", "\n", "self", ".", "end_c1", "=", "self", ".", "start_c1", "+", "self", ".", "eft_c", "\n", "loop_id2", "=", "(", "loop_id", "+", "1", ")", "%", "cdiv", "\n", "self", ".", "start_c2", "=", "loop_id2", "*", "self", ".", "eft_c", "\n", "self", ".", "end_c2", "=", "self", ".", "start_c2", "+", "self", ".", "eft_c", "\n", "loop_id3", "=", "(", "loop_id", "+", "2", ")", "%", "cdiv", "\n", "self", ".", "start_c3", "=", "loop_id3", "*", "self", ".", "eft_c", "\n", "self", ".", "end_c3", "=", "self", ".", "start_c3", "+", "self", ".", "eft_c", "\n", "loop_id4", "=", "(", "loop_id", "+", "3", ")", "%", "cdiv", "\n", "self", ".", "start_c4", "=", "loop_id4", "*", "self", ".", "eft_c", "\n", "self", ".", "end_c4", "=", "self", ".", "start_c4", "+", "self", ".", "eft_c", "\n", "print", "(", "'loop_ids: [{}:({}-{}), {}:({}-{}), {}:({}-{}), {}:({}-{})]'", ".", "format", "(", "loop_id", ",", "self", ".", "start_c1", ",", "self", ".", "end_c1", ",", "loop_id2", ",", "self", ".", "start_c2", ",", "self", ".", "end_c2", ",", "loop_id3", ",", "self", ".", "start_c3", ",", "self", ".", "end_c3", ",", "loop_id4", ",", "self", ".", "start_c4", ",", "self", ".", "end_c4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_gc.Bottleneck.forward": [[238, 280], ["base_module_gc.Bottleneck.conv1", "base_module_gc.Bottleneck.bn1", "base_module_gc.Bottleneck.relu", "base_module_gc.Bottleneck.conv2", "base_module_gc.Bottleneck.bn2", "base_module_gc.Bottleneck.relu", "base_module_gc.Bottleneck.conv3", "base_module_gc.Bottleneck.bn3", "base_module_gc.Bottleneck.relu", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.size", "torch.zeros_like.size", "torch.zeros_like.size", "torch.zeros_like.size", "base_module_gc.Bottleneck.eft1", "base_module_gc.Bottleneck.eft2", "base_module_gc.Bottleneck.eft3", "base_module_gc.Bottleneck.eft4", "base_module_gc.Bottleneck.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "use_ef", ":", "\n", "            ", "new_out", "=", "torch", ".", "zeros_like", "(", "out", ")", "\n", "BN", ",", "C_size", ",", "H_size", ",", "W_size", "=", "new_out", ".", "size", "(", ")", "\n", "# new_out = out", "\n", "new_out", "[", ":", ",", "self", ".", "start_c1", ":", "self", ".", "end_c1", ",", ":", ",", ":", "]", "=", "self", ".", "eft1", "(", "out", "[", ":", ",", "self", ".", "start_c1", ":", "self", ".", "end_c1", ",", ":", ",", ":", "]", ")", "\n", "new_out", "[", ":", ",", "self", ".", "start_c2", ":", "self", ".", "end_c2", ",", ":", ",", ":", "]", "=", "self", ".", "eft2", "(", "out", "[", ":", ",", "self", ".", "start_c2", ":", "self", ".", "end_c2", ",", ":", ",", ":", "]", ")", "\n", "new_out", "[", ":", ",", "self", ".", "start_c3", ":", "self", ".", "end_c3", ",", ":", ",", ":", "]", "=", "self", ".", "eft3", "(", "out", "[", ":", ",", "self", ".", "start_c3", ":", "self", ".", "end_c3", ",", ":", ",", ":", "]", ")", "\n", "new_out", "[", ":", ",", "self", ".", "start_c4", ":", "self", ".", "end_c4", ",", ":", ",", ":", "]", "=", "self", ".", "eft4", "(", "out", "[", ":", ",", "self", ".", "start_c4", ":", "self", ".", "end_c4", ",", ":", ",", ":", "]", ")", "\n", "# new_out = torch.zeros_like(out)", "\n", "# new_out[:, :self.eft_c, :, :] = self.eft(out[:, :self.eft_c, :, :])", "\n", "if", "self", ".", "end_c4", ">", "self", ".", "start_c1", ":", "\n", "                ", "if", "self", ".", "start_c1", ">", "0", ":", "\n", "                    ", "new_out", "[", ":", ",", ":", "self", ".", "start_c1", ":", ",", ":", ",", ":", "]", "=", "out", "[", ":", ",", ":", "self", ".", "start_c1", ":", ",", ":", ",", ":", "]", "\n", "", "if", "self", ".", "end_c4", "<", "C_size", ":", "\n", "                    ", "new_out", "[", ":", ",", "self", ".", "end_c4", ":", ",", ":", ",", ":", "]", "=", "out", "[", ":", ",", "self", ".", "end_c4", ":", ",", ":", ",", ":", "]", "\n", "", "", "elif", "self", ".", "end_c4", "<", "self", ".", "start_c1", ":", "\n", "                ", "new_out", "[", ":", ",", "self", ".", "end_c4", ":", "self", ".", "start_c1", ":", ",", ":", ",", ":", "]", "=", "out", "[", ":", ",", "self", ".", "end_c4", ":", "self", ".", "start_c1", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "out", "=", "new_out", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_gc.BottleneckShift.__init__": [[284, 326], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "base_module_gc.mSEModule", "base_module_gc.ShiftModule", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "print", "nets.Calibrator2D.GC_L33D", "nets.Calibrator2D.GC_T13D", "nets.Calibrator2D.GC_S23DD", "nets.Calibrator2D.GC_CLLD", "print"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "num_segments", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "use_ef", "=", "False", ",", "cdiv", "=", "4", ",", "loop_id", "=", "0", ")", ":", "\n", "        ", "super", "(", "BottleneckShift", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "mse", "=", "mSEModule", "(", "planes", ",", "n_segment", "=", "self", ".", "num_segments", ",", "index", "=", "1", ")", "\n", "self", ".", "shift", "=", "ShiftModule", "(", "planes", ",", "n_segment", "=", "self", ".", "num_segments", ",", "n_div", "=", "8", ",", "mode", "=", "'shift'", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "self", ".", "use_ef", "=", "use_ef", "\n", "\n", "if", "self", ".", "use_ef", ":", "\n", "            ", "print", "(", "'=> Using Partial Channel Calibrator with cdiv: {}'", ".", "format", "(", "cdiv", ")", ")", "\n", "self", ".", "loop_id", "=", "loop_id", "\n", "self", ".", "eft_c", "=", "planes", "//", "cdiv", "\n", "self", ".", "eft1", "=", "GC_L33D", "(", "self", ".", "eft_c", ",", "self", ".", "eft_c", ",", "num_segments", ")", "\n", "self", ".", "eft2", "=", "GC_T13D", "(", "self", ".", "eft_c", ",", "self", ".", "eft_c", ",", "num_segments", ")", "\n", "self", ".", "eft3", "=", "GC_S23DD", "(", "self", ".", "eft_c", ",", "self", ".", "eft_c", ",", "num_segments", ")", "\n", "self", ".", "eft4", "=", "GC_CLLD", "(", "self", ".", "eft_c", ",", "self", ".", "eft_c", ",", "num_segments", ")", "\n", "# self.eft = (self.eft_c, self.eft_c, num_segments)", "\n", "self", ".", "start_c1", "=", "loop_id", "*", "self", ".", "eft_c", "\n", "self", ".", "end_c1", "=", "self", ".", "start_c1", "+", "self", ".", "eft_c", "\n", "loop_id2", "=", "(", "loop_id", "+", "1", ")", "%", "cdiv", "\n", "self", ".", "start_c2", "=", "loop_id2", "*", "self", ".", "eft_c", "\n", "self", ".", "end_c2", "=", "self", ".", "start_c2", "+", "self", ".", "eft_c", "\n", "loop_id3", "=", "(", "loop_id", "+", "2", ")", "%", "cdiv", "\n", "self", ".", "start_c3", "=", "loop_id3", "*", "self", ".", "eft_c", "\n", "self", ".", "end_c3", "=", "self", ".", "start_c3", "+", "self", ".", "eft_c", "\n", "loop_id4", "=", "(", "loop_id", "+", "3", ")", "%", "cdiv", "\n", "self", ".", "start_c4", "=", "loop_id4", "*", "self", ".", "eft_c", "\n", "self", ".", "end_c4", "=", "self", ".", "start_c4", "+", "self", ".", "eft_c", "\n", "print", "(", "'loop_ids: [{}:({}-{}), {}:({}-{}), {}:({}-{}), {}:({}-{})]'", ".", "format", "(", "loop_id", ",", "self", ".", "start_c1", ",", "self", ".", "end_c1", ",", "loop_id2", ",", "self", ".", "start_c2", ",", "self", ".", "end_c2", ",", "loop_id3", ",", "self", ".", "start_c3", ",", "self", ".", "end_c3", ",", "loop_id4", ",", "self", ".", "start_c4", ",", "self", ".", "end_c4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_gc.BottleneckShift.forward": [[327, 373], ["base_module_gc.BottleneckShift.conv1", "base_module_gc.BottleneckShift.bn1", "base_module_gc.BottleneckShift.relu", "base_module_gc.BottleneckShift.mse", "base_module_gc.BottleneckShift.shift", "base_module_gc.BottleneckShift.conv2", "base_module_gc.BottleneckShift.bn2", "base_module_gc.BottleneckShift.relu", "base_module_gc.BottleneckShift.conv3", "base_module_gc.BottleneckShift.bn3", "base_module_gc.BottleneckShift.relu", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.size", "torch.zeros_like.size", "torch.zeros_like.size", "torch.zeros_like.size", "base_module_gc.BottleneckShift.eft1", "base_module_gc.BottleneckShift.eft2", "base_module_gc.BottleneckShift.eft3", "base_module_gc.BottleneckShift.eft4", "base_module_gc.BottleneckShift.downsample"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_TSM.Bottleneck.shift"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "\n", "if", "self", ".", "use_ef", ":", "\n", "            ", "new_out", "=", "torch", ".", "zeros_like", "(", "out", ")", "\n", "BN", ",", "C_size", ",", "H_size", ",", "W_size", "=", "new_out", ".", "size", "(", ")", "\n", "# new_out = out", "\n", "new_out", "[", ":", ",", "self", ".", "start_c1", ":", "self", ".", "end_c1", ",", ":", ",", ":", "]", "=", "self", ".", "eft1", "(", "out", "[", ":", ",", "self", ".", "start_c1", ":", "self", ".", "end_c1", ",", ":", ",", ":", "]", ")", "\n", "new_out", "[", ":", ",", "self", ".", "start_c2", ":", "self", ".", "end_c2", ",", ":", ",", ":", "]", "=", "self", ".", "eft2", "(", "out", "[", ":", ",", "self", ".", "start_c2", ":", "self", ".", "end_c2", ",", ":", ",", ":", "]", ")", "\n", "new_out", "[", ":", ",", "self", ".", "start_c3", ":", "self", ".", "end_c3", ",", ":", ",", ":", "]", "=", "self", ".", "eft3", "(", "out", "[", ":", ",", "self", ".", "start_c3", ":", "self", ".", "end_c3", ",", ":", ",", ":", "]", ")", "\n", "new_out", "[", ":", ",", "self", ".", "start_c4", ":", "self", ".", "end_c4", ",", ":", ",", ":", "]", "=", "self", ".", "eft4", "(", "out", "[", ":", ",", "self", ".", "start_c4", ":", "self", ".", "end_c4", ",", ":", ",", ":", "]", ")", "\n", "# new_out = torch.zeros_like(out)", "\n", "# new_out[:, :self.eft_c, :, :] = self.eft(out[:, :self.eft_c, :, :])", "\n", "if", "self", ".", "end_c4", ">", "self", ".", "start_c1", ":", "\n", "                ", "if", "self", ".", "start_c1", ">", "0", ":", "\n", "                    ", "new_out", "[", ":", ",", ":", "self", ".", "start_c1", ":", ",", ":", ",", ":", "]", "=", "out", "[", ":", ",", ":", "self", ".", "start_c1", ":", ",", ":", ",", ":", "]", "\n", "", "if", "self", ".", "end_c4", "<", "C_size", ":", "\n", "                    ", "new_out", "[", ":", ",", "self", ".", "end_c4", ":", ",", ":", ",", ":", "]", "=", "out", "[", ":", ",", "self", ".", "end_c4", ":", ",", ":", ",", ":", "]", "\n", "", "", "elif", "self", ".", "end_c4", "<", "self", ".", "start_c1", ":", "\n", "                ", "new_out", "[", ":", ",", "self", ".", "end_c4", ":", "self", ".", "start_c1", ":", ",", ":", ",", ":", "]", "=", "out", "[", ":", ",", "self", ".", "end_c4", ":", "self", ".", "start_c1", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "out", "=", "new_out", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "mse", "(", "out", ")", "\n", "out", "=", "self", ".", "shift", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_gc.FBResNet.__init__": [[376, 406], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "base_module_gc.FBResNet._make_layer", "base_module_gc.FBResNet._make_layer", "base_module_gc.FBResNet._make_layer", "base_module_gc.FBResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "base_module_gc.FBResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "num_segments", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "use_ef", "=", "False", ",", "cdiv", "=", "4", ",", "loop", "=", "False", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "\n", "self", ".", "input_space", "=", "None", "\n", "self", ".", "input_size", "=", "(", "224", ",", "224", ",", "3", ")", "\n", "self", ".", "mean", "=", "None", "\n", "self", ".", "std", "=", "None", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "loop_id", "=", "0", "\n", "super", "(", "FBResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "loop", "=", "loop", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "self", ".", "num_segments", ",", "Bottleneck", ",", "64", ",", "layers", "[", "0", "]", ",", "use_ef", "=", "use_ef", ",", "cdiv", "=", "cdiv", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "self", ".", "num_segments", ",", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "use_ef", "=", "use_ef", ",", "cdiv", "=", "cdiv", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "self", ".", "num_segments", ",", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "use_ef", "=", "use_ef", ",", "cdiv", "=", "cdiv", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "self", ".", "num_segments", ",", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "use_ef", "=", "use_ef", ",", "cdiv", "=", "cdiv", ")", "\n", "self", ".", "last_linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_gc.FBResNet._make_layer": [[408, 438], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "print", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "layers.append", "layers.append", "block", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "num_segments", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "use_ef", "=", "False", ",", "cdiv", "=", "4", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "num_segments", ",", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "use_ef", ",", "cdiv", ",", "loop_id", "=", "self", ".", "loop_id", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "if", "self", ".", "loop", ":", "\n", "            ", "self", ".", "loop_id", "=", "(", "self", ".", "loop_id", "+", "1", ")", "%", "cdiv", "\n", "\n", "", "n_round", "=", "1", "\n", "if", "blocks", ">=", "23", ":", "\n", "            ", "n_round", "=", "2", "\n", "print", "(", "'=> Using n_round {} to insert Element Filter -T'", ".", "format", "(", "n_round", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "if", "i", "%", "n_round", "==", "0", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "num_segments", ",", "self", ".", "inplanes", ",", "planes", ",", "use_ef", "=", "use_ef", ",", "cdiv", "=", "cdiv", ",", "loop_id", "=", "self", ".", "loop_id", ")", ")", "\n", "if", "self", ".", "loop", ":", "\n", "                    ", "self", ".", "loop_id", "=", "(", "self", ".", "loop_id", "+", "1", ")", "%", "cdiv", "\n", "", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "num_segments", ",", "self", ".", "inplanes", ",", "planes", ",", "use_ef", "=", "False", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_gc.FBResNet.features": [[440, 452], ["base_module_gc.FBResNet.conv1", "base_module_gc.FBResNet.clone", "base_module_gc.FBResNet.bn1", "base_module_gc.FBResNet.relu", "base_module_gc.FBResNet.maxpool", "base_module_gc.FBResNet.layer1", "base_module_gc.FBResNet.layer2", "base_module_gc.FBResNet.layer3", "base_module_gc.FBResNet.layer4"], "methods", ["None"], ["", "def", "features", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "self", ".", "conv1_input", "=", "x", ".", "clone", "(", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_gc.FBResNet.logits": [[453, 459], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "base_module_gc.FBResNet.view", "base_module_gc.FBResNet.last_linear", "base_module_gc.FBResNet.size"], "methods", ["None"], ["", "def", "logits", "(", "self", ",", "features", ")", ":", "\n", "        ", "adaptiveAvgPoolWidth", "=", "features", ".", "shape", "[", "2", "]", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "features", ",", "kernel_size", "=", "adaptiveAvgPoolWidth", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "last_linear", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_gc.FBResNet.forward": [[461, 465], ["base_module_gc.FBResNet.features", "base_module_gc.FBResNet.logits"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.FBResNet.features", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.FBResNet.logits"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "input", ")", "\n", "x", "=", "self", ".", "logits", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_gc.conv3x3": [[157, 161], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_gc.fbresnet50": [[466, 476], ["base_module_gc.FBResNet", "FBResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "", "def", "fbresnet50", "(", "num_segments", "=", "8", ",", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "use_ef", "=", "True", ",", "cdiv", "=", "4", ",", "loop", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "FBResNet", "(", "num_segments", ",", "BottleneckShift", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "use_ef", "=", "use_ef", ",", "cdiv", "=", "cdiv", ",", "loop", "=", "loop", ")", "\n", "if", "pretrained", ":", "\n", "         ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'fbresnet50'", "]", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_gc.fbresnet101": [[478, 488], ["base_module_gc.FBResNet", "FBResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "def", "fbresnet101", "(", "num_segments", "=", "8", ",", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "use_ef", "=", "True", ",", "cdiv", "=", "4", ",", "loop", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "FBResNet", "(", "num_segments", ",", "BottleneckShift", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "use_ef", "=", "use_ef", ",", "cdiv", "=", "cdiv", ",", "loop", "=", "loop", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'fbresnet101'", "]", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.logger._ColorfulFormatter.__init__": [[14, 20], ["kwargs.pop", "len", "logging.Formatter.__init__", "kwargs.pop"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_root_name", "=", "kwargs", ".", "pop", "(", "\"root_name\"", ")", "+", "\".\"", "\n", "self", ".", "_abbrev_name", "=", "kwargs", ".", "pop", "(", "\"abbrev_name\"", ",", "\"\"", ")", "\n", "if", "len", "(", "self", ".", "_abbrev_name", ")", ":", "\n", "            ", "self", ".", "_abbrev_name", "=", "self", ".", "_abbrev_name", "+", "\".\"", "\n", "", "super", "(", "_ColorfulFormatter", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.logger._ColorfulFormatter.formatMessage": [[21, 31], ["record.name.replace", "super().formatMessage", "termcolor.colored", "termcolor.colored"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.logger._ColorfulFormatter.formatMessage"], ["", "def", "formatMessage", "(", "self", ",", "record", ")", ":", "\n", "        ", "record", ".", "name", "=", "record", ".", "name", ".", "replace", "(", "self", ".", "_root_name", ",", "self", ".", "_abbrev_name", ")", "\n", "log", "=", "super", "(", "_ColorfulFormatter", ",", "self", ")", ".", "formatMessage", "(", "record", ")", "\n", "if", "record", ".", "levelno", "==", "logging", ".", "WARNING", ":", "\n", "            ", "prefix", "=", "colored", "(", "\"WARNING\"", ",", "\"red\"", ",", "attrs", "=", "[", "\"blink\"", "]", ")", "\n", "", "elif", "record", ".", "levelno", "==", "logging", ".", "ERROR", "or", "record", ".", "levelno", "==", "logging", ".", "CRITICAL", ":", "\n", "            ", "prefix", "=", "colored", "(", "\"ERROR\"", ",", "\"red\"", ",", "attrs", "=", "[", "\"blink\"", ",", "\"underline\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "log", "\n", "", "return", "prefix", "+", "\" \"", "+", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.logger.setup_logger": [[34, 90], ["functools.lru_cache", "logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "os.makedirs", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logger._ColorfulFormatter", "output.endswith", "output.endswith", "os.path.join", "os.path.dirname", "logger._cached_log_stream", "termcolor.colored", "str"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.logger._cached_log_stream"], ["", "", "@", "functools", ".", "lru_cache", "(", ")", "\n", "def", "setup_logger", "(", "\n", "output", "=", "None", ",", "distributed_rank", "=", "0", ",", "*", ",", "color", "=", "True", ",", "name", "=", "\"moco\"", ",", "abbrev_name", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Initialize the detectron2 logger and set its verbosity level to \"INFO\".\n    Args:\n        output (str): a file name or a directory to save log. If None, will not save log file.\n            If ends with \".txt\" or \".log\", assumed to be a file name.\n            Otherwise, logs will be saved to `output/log.txt`.\n        name (str): the root module name of this logger\n    Returns:\n        logging.Logger: a logger\n    \"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "\n", "if", "abbrev_name", "is", "None", ":", "\n", "        ", "abbrev_name", "=", "name", "\n", "\n", "", "plain_formatter", "=", "logging", ".", "Formatter", "(", "\n", "\"[%(asctime)s] %(name)s %(levelname)s: %(message)s\"", ",", "datefmt", "=", "\"%m/%d %H:%M:%S\"", "\n", ")", "\n", "# stdout logging: master only", "\n", "if", "distributed_rank", "==", "0", ":", "\n", "        ", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "if", "color", ":", "\n", "            ", "formatter", "=", "_ColorfulFormatter", "(", "\n", "colored", "(", "\"[%(asctime)s %(name)s]: \"", ",", "\"green\"", ")", "+", "\"%(message)s\"", ",", "\n", "datefmt", "=", "\"%m/%d %H:%M:%S\"", ",", "\n", "root_name", "=", "name", ",", "\n", "abbrev_name", "=", "str", "(", "abbrev_name", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "formatter", "=", "plain_formatter", "\n", "", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "# file logging: all workers", "\n", "", "if", "output", "is", "not", "None", ":", "\n", "        ", "if", "output", ".", "endswith", "(", "\".txt\"", ")", "or", "output", ".", "endswith", "(", "\".log\"", ")", ":", "\n", "            ", "filename", "=", "output", "\n", "", "else", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "output", ",", "\"log.txt\"", ")", "\n", "", "if", "distributed_rank", ">", "0", ":", "\n", "            ", "filename", "=", "filename", "+", "f\".rank{distributed_rank}\"", "\n", "", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "fh", "=", "logging", ".", "StreamHandler", "(", "_cached_log_stream", "(", "filename", ")", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "plain_formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.logger._cached_log_stream": [[94, 97], ["functools.lru_cache", "open"], "function", ["None"], ["", "@", "functools", ".", "lru_cache", "(", "maxsize", "=", "None", ")", "\n", "def", "_cached_log_stream", "(", "filename", ")", ":", "\n", "    ", "return", "open", "(", "filename", ",", "\"a\"", ")", "", "", ""]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset_config.return_egaze1": [[17, 28], ["NotImplementedError"], "function", ["None"], ["def", "return_egaze1", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "106", "\n", "# filename_categories = 'soccer_allframe256_v2j/soccer_classInd.txt'", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET2", "\n", "filename_imglist_train", "=", "root_data", "+", "'EGTEA_Gaze+/trainValTest/train1.txt'", "\n", "filename_imglist_val", "=", "root_data", "+", "'EGTEA_Gaze+/trainValTest/val1.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset_config.return_egaze2": [[29, 40], ["NotImplementedError"], "function", ["None"], ["", "def", "return_egaze2", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "106", "\n", "# filename_categories = 'soccer_allframe256_v2j/soccer_classInd.txt'", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET2", "\n", "filename_imglist_train", "=", "root_data", "+", "'EGTEA_Gaze+/trainValTest/train2.txt'", "\n", "filename_imglist_val", "=", "root_data", "+", "'EGTEA_Gaze+/trainValTest/val2.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset_config.return_egaze3": [[41, 52], ["NotImplementedError"], "function", ["None"], ["", "def", "return_egaze3", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "106", "\n", "# filename_categories = 'soccer_allframe256_v2j/soccer_classInd.txt'", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET2", "\n", "filename_imglist_train", "=", "root_data", "+", "'EGTEA_Gaze+/trainValTest/train3.txt'", "\n", "filename_imglist_val", "=", "root_data", "+", "'EGTEA_Gaze+/trainValTest/val3.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset_config.return_diving48": [[53, 64], ["NotImplementedError"], "function", ["None"], ["", "def", "return_diving48", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "48", "\n", "# filename_categories = 'soccer_allframe256_v2j/soccer_classInd.txt'", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "\n", "filename_imglist_train", "=", "root_data", "+", "'diving48/trainValTest/train.txt'", "\n", "filename_imglist_val", "=", "root_data", "+", "'diving48/trainValTest/val.txt'", "\n", "prefix", "=", "'{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset_config.return_basketball": [[66, 78], ["NotImplementedError"], "function", ["None"], ["", "def", "return_basketball", "(", "modality", ")", ":", "\n", "# filename_categories = 'basketball_allframe256_v2j/basketball_classInd.txt'", "\n", "    ", "filename_categories", "=", "8", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "\n", "\n", "filename_imglist_train", "=", "'/vireo00/yanbin2/Sport_Video/videos_our/TraValTes/basketball_tsm/train.txt'", "\n", "filename_imglist_val", "=", "'/vireo00/yanbin2/Sport_Video/videos_our/TraValTes/basketball_tsm/val.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset_config.return_soccer": [[80, 91], ["NotImplementedError"], "function", ["None"], ["", "def", "return_soccer", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "10", "\n", "# filename_categories = 'soccer_allframe256_v2j/soccer_classInd.txt'", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "frameFolder1", "\n", "filename_imglist_train", "=", "'/vireo00/yanbin2/Sport_Video/videos_our/TraValTes/soccer_tsm/train.txt'", "\n", "filename_imglist_val", "=", "'/vireo00/yanbin2/Sport_Video/videos_our/TraValTes/soccer_tsm/val.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "", "\"\"\"-------------------------------------------------------------------------------------\"\"\"", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset_config.return_ucf101": [[94, 106], ["NotImplementedError"], "function", ["None"], ["def", "return_ucf101", "(", "modality", ")", ":", "\n", "# filename_categories = 'UCF101/labels/classInd.txt'", "\n", "    ", "filename_categories", "=", "101", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "\"/vireo00/yanbin2/Sport_Video/UCF\"", "\n", "\n", "filename_imglist_train", "=", "'/vireo00/yanbin2/Sport_Video/UCF/traval_tsm/train.txt'", "\n", "filename_imglist_val", "=", "'/vireo00/yanbin2/Sport_Video/UCF/traval_tsm/val.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset_config.return_hmdb51": [[108, 123], ["NotImplementedError"], "function", ["None"], ["", "def", "return_hmdb51", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "51", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'HMDB51/images'", "\n", "filename_imglist_train", "=", "'HMDB51/splits/hmdb51_rgb_train_split_1.txt'", "\n", "filename_imglist_val", "=", "'HMDB51/splits/hmdb51_rgb_val_split_1.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "elif", "modality", "==", "'Flow'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'HMDB51/images'", "\n", "filename_imglist_train", "=", "'HMDB51/splits/hmdb51_flow_train_split_1.txt'", "\n", "filename_imglist_val", "=", "'HMDB51/splits/hmdb51_flow_val_split_1.txt'", "\n", "prefix", "=", "'flow_{}_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset_config.return_somethingv1": [[125, 142], ["print"], "function", ["None"], ["", "def", "return_somethingv1", "(", "modality", ")", ":", "\n", "# filename_categories = 'something/v1/category.txt'", "\n", "    ", "filename_categories", "=", "174", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "\n", "filename_imglist_train", "=", "root_data", "+", "'some_some_v1/trainValTest/train.txt'", "\n", "filename_imglist_val", "=", "root_data", "+", "'some_some_v1/trainValTest/val.txt'", "\n", "prefix", "=", "'{:05d}.jpg'", "\n", "# elif modality == 'Flow':", "\n", "#     root_data = ROOT_DATASET + 'something/v1/20bn-something-something-v1-flow'", "\n", "#     filename_imglist_train = 'something/v1/train_videofolder_flow.txt'", "\n", "#     filename_imglist_val = 'something/v1/val_videofolder_flow.txt'", "\n", "#     prefix = '{:06d}-{}_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "print", "(", "'no such modality:'", "+", "modality", ")", "\n", "raise", "NotImplementedError", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset_config.return_somethingv2": [[144, 160], ["NotImplementedError"], "function", ["None"], ["", "def", "return_somethingv2", "(", "modality", ")", ":", "\n", "# filename_categories = 'something/v2/category.txt'", "\n", "    ", "filename_categories", "=", "174", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "\n", "filename_imglist_train", "=", "root_data", "+", "'some_some_v2/trainValTest/train.txt'", "\n", "filename_imglist_val", "=", "root_data", "+", "'some_some_v2/trainValTest/val.txt'", "\n", "prefix", "=", "'{:06d}.jpg'", "\n", "# elif modality == 'Flow':", "\n", "#     root_data = ROOT_DATASET + 'something/v2/20bn-something-something-v2-flow'", "\n", "#     filename_imglist_train = 'something/v2/train_videofolder_flow.txt'", "\n", "#     filename_imglist_val = 'something/v2/val_videofolder_flow.txt'", "\n", "#     prefix = '{:06d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset_config.return_jester": [[162, 172], ["NotImplementedError"], "function", ["None"], ["", "def", "return_jester", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "'jester/category.txt'", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "prefix", "=", "'{:05d}.jpg'", "\n", "root_data", "=", "ROOT_DATASET", "+", "'jester/20bn-jester-v1'", "\n", "filename_imglist_train", "=", "'jester/train_videofolder.txt'", "\n", "filename_imglist_val", "=", "'jester/val_videofolder.txt'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset_config.return_kinetics": [[174, 184], ["NotImplementedError"], "function", ["None"], ["", "def", "return_kinetics", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "400", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "\n", "filename_imglist_train", "=", "root_data", "+", "'kinetics400_mmlab/trainValTest/train.txt'", "\n", "filename_imglist_val", "=", "root_data", "+", "'kinetics400_mmlab/trainValTest/val.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset_config.return_kineticsmini1": [[186, 196], ["NotImplementedError"], "function", ["None"], ["", "def", "return_kineticsmini1", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "100", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "\n", "filename_imglist_train", "=", "'/data/vireodata/video_data/kinetics400/mini_kinetics_100/train.txt'", "\n", "filename_imglist_val", "=", "'/data/vireodata/video_data/kinetics400/mini_kinetics_100/val.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset_config.return_kineticsmini2": [[197, 207], ["NotImplementedError"], "function", ["None"], ["", "def", "return_kineticsmini2", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "200", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "\n", "filename_imglist_train", "=", "'/data/vireodata/video_data/kinetics400/mini-kinetics-200/train.txt'", "\n", "filename_imglist_val", "=", "'/data/vireodata/video_data/kinetics400/mini-kinetics-200/val.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset_config.return_dataset": [[208, 233], ["isinstance", "len", "print", "ValueError", "os.path.join", "open", "f.readlines", "item.rstrip"], "function", ["None"], ["", "def", "return_dataset", "(", "dataset", ",", "modality", ")", ":", "\n", "    ", "dict_single", "=", "{", "'jester'", ":", "return_jester", ",", "'somethingv1'", ":", "return_somethingv1", ",", "'somethingv2'", ":", "return_somethingv2", ",", "\n", "'ucf101'", ":", "return_ucf101", ",", "'hmdb51'", ":", "return_hmdb51", ",", "\n", "'kinetics'", ":", "return_kinetics", ",", "'kineticsmini1'", ":", "return_kineticsmini1", ",", "'kineticsmini2'", ":", "return_kineticsmini2", ",", "\n", "### CUSTOM_DATASET", "\n", "'basketball'", ":", "return_basketball", ",", "'soccer'", ":", "return_soccer", ",", "'diving48'", ":", "return_diving48", ",", "\n", "'egaze1'", ":", "return_egaze1", ",", "'egaze2'", ":", "return_egaze2", ",", "'egaze3'", ":", "return_egaze3", "\n", "}", "\n", "if", "dataset", "in", "dict_single", ":", "\n", "        ", "file_categories", ",", "file_imglist_train", ",", "file_imglist_val", ",", "root_data", ",", "prefix", "=", "dict_single", "[", "dataset", "]", "(", "modality", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown dataset '", "+", "dataset", ")", "\n", "\n", "# file_imglist_train = os.path.join(ROOT_DATASET, file_imglist_train)", "\n", "# file_imglist_val = os.path.join(ROOT_DATASET, file_imglist_val)", "\n", "", "if", "isinstance", "(", "file_categories", ",", "str", ")", ":", "\n", "        ", "file_categories", "=", "os", ".", "path", ".", "join", "(", "ROOT_DATASET", ",", "file_categories", ")", "\n", "with", "open", "(", "file_categories", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "categories", "=", "[", "item", ".", "rstrip", "(", ")", "for", "item", "in", "lines", "]", "\n", "", "else", ":", "# number of categories", "\n", "        ", "categories", "=", "[", "None", "]", "*", "file_categories", "\n", "", "n_class", "=", "len", "(", "categories", ")", "\n", "print", "(", "'{}: {} classes'", ".", "format", "(", "dataset", ",", "n_class", ")", ")", "\n", "return", "n_class", ",", "file_imglist_train", ",", "file_imglist_val", ",", "root_data", ",", "prefix", "\n", "", ""]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.mSEModule.__init__": [[21, 59], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "n_segment", "=", "8", ",", "index", "=", "1", ")", ":", "\n", "        ", "super", "(", "mSEModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channel", "=", "channel", "\n", "self", ".", "reduction", "=", "16", "\n", "self", ".", "n_segment", "=", "n_segment", "\n", "self", ".", "stride", "=", "2", "**", "(", "index", "-", "1", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "channel", ",", "\n", "out_channels", "=", "self", ".", "channel", "//", "self", ".", "reduction", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "self", ".", "channel", "//", "self", ".", "reduction", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "channel", "//", "self", ".", "reduction", ",", "\n", "out_channels", "=", "self", ".", "channel", "//", "self", ".", "reduction", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "groups", "=", "self", ".", "channel", "//", "self", ".", "reduction", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "avg_pool_forward2", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "avg_pool_forward4", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", "\n", "\n", "self", ".", "sigmoid_forward", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "self", ".", "avg_pool_backward2", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "#nn.AdaptiveMaxPool2d(1)", "\n", "self", ".", "avg_pool_backward4", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", "\n", "\n", "self", ".", "sigmoid_backward", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "self", ".", "pad1_forward", "=", "(", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ")", "\n", "self", ".", "pad1_backward", "=", "(", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "channel", "//", "self", ".", "reduction", ",", "\n", "out_channels", "=", "self", ".", "channel", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "self", ".", "channel", ")", "\n", "\n", "self", ".", "conv3_smallscale2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "channel", "//", "self", ".", "reduction", ",", "\n", "out_channels", "=", "self", ".", "channel", "//", "self", ".", "reduction", ",", "padding", "=", "1", ",", "kernel_size", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3_smallscale2", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "self", ".", "channel", "//", "self", ".", "reduction", ")", "\n", "\n", "self", ".", "conv3_smallscale4", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "channel", "//", "self", ".", "reduction", ",", "\n", "out_channels", "=", "self", ".", "channel", "//", "self", ".", "reduction", ",", "padding", "=", "1", ",", "kernel_size", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3_smallscale4", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "self", ".", "channel", "//", "self", ".", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.mSEModule.spatial_pool": [[60, 75], ["x.size", "input_x.unsqueeze.unsqueeze.view", "input_x.unsqueeze.unsqueeze.unsqueeze", "base_module_org.mSEModule.conv_mask", "context_mask.view.view.view", "base_module_org.mSEModule.softmax", "context_mask.view.view.view"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.softmax"], ["", "def", "spatial_pool", "(", "self", ",", "x", ")", ":", "\n", "        ", "nt", ",", "channel", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "input_x", "=", "x", "\n", "# [N, C, H * W]", "\n", "input_x", "=", "input_x", ".", "view", "(", "nt", ",", "channel", ",", "height", "*", "width", ")", "\n", "# [N, 1, C, H * W]", "\n", "input_x", "=", "input_x", ".", "unsqueeze", "(", "1", ")", "\n", "# [N, 1, H, W]", "\n", "context_mask", "=", "self", ".", "conv_mask", "(", "x", ")", "\n", "# [N, 1, H * W]", "\n", "context_mask", "=", "context_mask", ".", "view", "(", "nt", ",", "1", ",", "height", "*", "width", ")", "\n", "# [N, 1, H * W]", "\n", "context_mask", "=", "self", ".", "softmax", "(", "context_mask", ")", "\n", "context_mask", "=", "context_mask", ".", "view", "(", "nt", ",", "1", ",", "height", ",", "width", ")", "\n", "return", "context_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.mSEModule.forward": [[77, 118], ["base_module_org.mSEModule.conv1", "base_module_org.mSEModule.bn1", "base_module_org.mSEModule.view", "base_module_org.mSEModule.view.split", "base_module_org.mSEModule.view.split", "base_module_org.mSEModule.conv2", "base_module_org.mSEModule.view", "base_module_org.mSEModule.view.split", "base_module_org.mSEModule.view.split", "torch.pad", "torch.pad", "torch.pad", "diff_fea_pluszero_forward.view.view.view", "torch.pad", "torch.pad", "torch.pad", "diff_fea_pluszero_backward.view.view.view", "base_module_org.mSEModule.avg_pool_forward2", "base_module_org.mSEModule.avg_pool_backward2", "base_module_org.mSEModule.bn3_smallscale2", "base_module_org.mSEModule.bn3_smallscale2", "base_module_org.mSEModule.bn3_smallscale4", "base_module_org.mSEModule.bn3_smallscale4", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "base_module_org.mSEModule.bn3", "base_module_org.mSEModule.bn3", "base_module_org.mSEModule.conv3_smallscale2", "base_module_org.mSEModule.conv3_smallscale2", "base_module_org.mSEModule.conv3_smallscale4", "base_module_org.mSEModule.conv3_smallscale4", "base_module_org.mSEModule.conv3", "base_module_org.mSEModule.conv3", "base_module_org.mSEModule.sigmoid_forward", "base_module_org.mSEModule.sigmoid_backward", "diff_fea_pluszero_forward.view.view.size", "diff_fea_pluszero_backward.view.view.size", "base_module_org.mSEModule.size", "base_module_org.mSEModule.size", "diff_fea_pluszero_forward.view.view.size", "diff_fea_pluszero_backward.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bottleneck", "=", "self", ".", "conv1", "(", "x", ")", "# nt, c//r, h, w", "\n", "bottleneck", "=", "self", ".", "bn1", "(", "bottleneck", ")", "# nt, c//r, h, w", "\n", "reshape_bottleneck", "=", "bottleneck", ".", "view", "(", "(", "-", "1", ",", "self", ".", "n_segment", ")", "+", "bottleneck", ".", "size", "(", ")", "[", "1", ":", "]", ")", "# n, t, c//r, h, w", "\n", "\n", "t_fea_forward", ",", "_", "=", "reshape_bottleneck", ".", "split", "(", "[", "self", ".", "n_segment", "-", "1", ",", "1", "]", ",", "dim", "=", "1", ")", "# n, t-1, c//r, h, w", "\n", "_", ",", "t_fea_backward", "=", "reshape_bottleneck", ".", "split", "(", "[", "1", ",", "self", ".", "n_segment", "-", "1", "]", ",", "dim", "=", "1", ")", "# n, t-1, c//r, h, w", "\n", "\n", "conv_bottleneck", "=", "self", ".", "conv2", "(", "bottleneck", ")", "# nt, c//r, h, w", "\n", "reshape_conv_bottleneck", "=", "conv_bottleneck", ".", "view", "(", "(", "-", "1", ",", "self", ".", "n_segment", ")", "+", "conv_bottleneck", ".", "size", "(", ")", "[", "1", ":", "]", ")", "# n, t, c//r, h, w", "\n", "_", ",", "tPlusone_fea_forward", "=", "reshape_conv_bottleneck", ".", "split", "(", "[", "1", ",", "self", ".", "n_segment", "-", "1", "]", ",", "dim", "=", "1", ")", "# n, t-1, c//r, h, w", "\n", "tPlusone_fea_backward", ",", "_", "=", "reshape_conv_bottleneck", ".", "split", "(", "[", "self", ".", "n_segment", "-", "1", ",", "1", "]", ",", "dim", "=", "1", ")", "# n, t-1, c//r, h, w", "\n", "diff_fea_forward", "=", "tPlusone_fea_forward", "-", "t_fea_forward", "# n, t-1, c//r, h, w", "\n", "diff_fea_backward", "=", "tPlusone_fea_backward", "-", "t_fea_backward", "# n, t-1, c//r, h, w", "\n", "diff_fea_pluszero_forward", "=", "F", ".", "pad", "(", "diff_fea_forward", ",", "self", ".", "pad1_forward", ",", "mode", "=", "\"constant\"", ",", "value", "=", "0", ")", "# n, t, c//r, h, w", "\n", "diff_fea_pluszero_forward", "=", "diff_fea_pluszero_forward", ".", "view", "(", "(", "-", "1", ",", ")", "+", "diff_fea_pluszero_forward", ".", "size", "(", ")", "[", "2", ":", "]", ")", "#nt, c//r, h, w", "\n", "diff_fea_pluszero_backward", "=", "F", ".", "pad", "(", "diff_fea_backward", ",", "self", ".", "pad1_backward", ",", "mode", "=", "\"constant\"", ",", "value", "=", "0", ")", "# n, t, c//r, h, w", "\n", "diff_fea_pluszero_backward", "=", "diff_fea_pluszero_backward", ".", "view", "(", "(", "-", "1", ",", ")", "+", "diff_fea_pluszero_backward", ".", "size", "(", ")", "[", "2", ":", "]", ")", "#nt, c//r, h, w", "\n", "y_forward_smallscale2", "=", "self", ".", "avg_pool_forward2", "(", "diff_fea_pluszero_forward", ")", "# nt, c//r, 1, 1", "\n", "y_backward_smallscale2", "=", "self", ".", "avg_pool_backward2", "(", "diff_fea_pluszero_backward", ")", "# nt, c//r, 1, 1", "\n", "\n", "y_forward_smallscale4", "=", "diff_fea_pluszero_forward", "\n", "y_backward_smallscale4", "=", "diff_fea_pluszero_backward", "\n", "y_forward_smallscale2", "=", "self", ".", "bn3_smallscale2", "(", "self", ".", "conv3_smallscale2", "(", "y_forward_smallscale2", ")", ")", "\n", "y_backward_smallscale2", "=", "self", ".", "bn3_smallscale2", "(", "self", ".", "conv3_smallscale2", "(", "y_backward_smallscale2", ")", ")", "\n", "\n", "y_forward_smallscale4", "=", "self", ".", "bn3_smallscale4", "(", "self", ".", "conv3_smallscale4", "(", "y_forward_smallscale4", ")", ")", "\n", "y_backward_smallscale4", "=", "self", ".", "bn3_smallscale4", "(", "self", ".", "conv3_smallscale4", "(", "y_backward_smallscale4", ")", ")", "\n", "\n", "y_forward_smallscale2", "=", "F", ".", "interpolate", "(", "y_forward_smallscale2", ",", "diff_fea_pluszero_forward", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "y_backward_smallscale2", "=", "F", ".", "interpolate", "(", "y_backward_smallscale2", ",", "diff_fea_pluszero_backward", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "y_forward", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "1.0", "/", "3.0", "*", "diff_fea_pluszero_forward", "+", "1.0", "/", "3.0", "*", "y_forward_smallscale2", "+", "1.0", "/", "3.0", "*", "y_forward_smallscale4", ")", ")", "# nt, c, 1, 1", "\n", "y_backward", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "1.0", "/", "3.0", "*", "diff_fea_pluszero_backward", "+", "1.0", "/", "3.0", "*", "y_backward_smallscale2", "+", "1.0", "/", "3.0", "*", "y_backward_smallscale4", ")", ")", "# nt, c, 1, 1", "\n", "\n", "y_forward", "=", "self", ".", "sigmoid_forward", "(", "y_forward", ")", "-", "0.5", "\n", "y_backward", "=", "self", ".", "sigmoid_backward", "(", "y_backward", ")", "-", "0.5", "\n", "\n", "y", "=", "0.5", "*", "y_forward", "+", "0.5", "*", "y_backward", "\n", "output", "=", "x", "+", "x", "*", "y", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.ShiftModule.__init__": [[120, 143], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "base_module_org.ShiftModule.conv.weight.data.zero_", "base_module_org.ShiftModule.conv.weight.data.zero_"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "n_segment", "=", "8", ",", "n_div", "=", "8", ",", "mode", "=", "'shift'", ")", ":", "\n", "        ", "super", "(", "ShiftModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_channels", "=", "input_channels", "\n", "self", ".", "n_segment", "=", "n_segment", "\n", "self", ".", "fold_div", "=", "n_div", "\n", "self", ".", "fold", "=", "self", ".", "input_channels", "//", "self", ".", "fold_div", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "self", ".", "fold_div", "*", "self", ".", "fold", ",", "self", ".", "fold_div", "*", "self", ".", "fold", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "groups", "=", "self", ".", "fold_div", "*", "self", ".", "fold", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "if", "mode", "==", "'shift'", ":", "\n", "            ", "self", ".", "conv", ".", "weight", ".", "requires_grad", "=", "True", "\n", "self", ".", "conv", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "conv", ".", "weight", ".", "data", "[", ":", "self", ".", "fold", ",", "0", ",", "2", "]", "=", "1", "# shift left", "\n", "self", ".", "conv", ".", "weight", ".", "data", "[", "self", ".", "fold", ":", "2", "*", "self", ".", "fold", ",", "0", ",", "0", "]", "=", "1", "# shift right", "\n", "if", "2", "*", "self", ".", "fold", "<", "self", ".", "input_channels", ":", "\n", "                ", "self", ".", "conv", ".", "weight", ".", "data", "[", "2", "*", "self", ".", "fold", ":", ",", "0", ",", "1", "]", "=", "1", "# fixed", "\n", "", "", "elif", "mode", "==", "'fixed'", ":", "\n", "            ", "self", ".", "conv", ".", "weight", ".", "requires_grad", "=", "True", "\n", "self", ".", "conv", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "conv", ".", "weight", ".", "data", "[", ":", ",", "0", ",", "1", "]", "=", "1", "# fixed", "\n", "", "elif", "mode", "==", "'norm'", ":", "\n", "            ", "self", ".", "conv", ".", "weight", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.ShiftModule.forward": [[144, 155], ["x.contiguous().view.contiguous().view.size", "x.contiguous().view.contiguous().view.view", "x.contiguous().view.contiguous().view.permute", "x.contiguous().view.contiguous().view.contiguous().view", "base_module_org.ShiftModule.conv", "x.contiguous().view.contiguous().view.view", "x.contiguous().view.contiguous().view.permute", "x.contiguous().view.contiguous().view.contiguous().view", "x.contiguous().view.contiguous().view.contiguous", "x.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "nt", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "n_batch", "=", "nt", "//", "self", ".", "n_segment", "\n", "x", "=", "x", ".", "view", "(", "n_batch", ",", "self", ".", "n_segment", ",", "c", ",", "h", ",", "w", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "2", ",", "1", ")", "# (n_batch, h, w, c, n_segment)", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "n_batch", "*", "h", "*", "w", ",", "c", ",", "self", ".", "n_segment", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "# (n_batch*h*w, c, n_segment)", "\n", "x", "=", "x", ".", "view", "(", "n_batch", ",", "h", ",", "w", ",", "c", ",", "self", ".", "n_segment", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "4", ",", "3", ",", "1", ",", "2", ")", "# (n_batch, n_segment, c, h, w)", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "nt", ",", "c", ",", "h", ",", "w", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.BasicBlock.__init__": [[165, 174], ["torch.Module.__init__", "base_module_org.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "base_module_org.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.conv3x3", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.conv3x3"], ["def", "__init__", "(", "self", ",", "num_segments", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.BasicBlock.forward": [[175, 192], ["base_module_org.BasicBlock.conv1", "base_module_org.BasicBlock.bn1", "base_module_org.BasicBlock.relu", "base_module_org.BasicBlock.conv2", "base_module_org.BasicBlock.bn2", "base_module_org.BasicBlock.relu", "base_module_org.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.Bottleneck.__init__": [[196, 211], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "num_segments", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.Bottleneck.forward": [[212, 233], ["base_module_org.Bottleneck.conv1", "base_module_org.Bottleneck.bn1", "base_module_org.Bottleneck.relu", "base_module_org.Bottleneck.conv2", "base_module_org.Bottleneck.bn2", "base_module_org.Bottleneck.relu", "base_module_org.Bottleneck.conv3", "base_module_org.Bottleneck.bn3", "base_module_org.Bottleneck.relu", "base_module_org.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.BottleneckShift.__init__": [[237, 254], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "base_module_org.mSEModule", "base_module_org.ShiftModule", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "num_segments", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BottleneckShift", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "mse", "=", "mSEModule", "(", "planes", ",", "n_segment", "=", "self", ".", "num_segments", ",", "index", "=", "1", ")", "\n", "self", ".", "shift", "=", "ShiftModule", "(", "planes", ",", "n_segment", "=", "self", ".", "num_segments", ",", "n_div", "=", "8", ",", "mode", "=", "'shift'", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.BottleneckShift.forward": [[255, 279], ["base_module_org.BottleneckShift.conv1", "base_module_org.BottleneckShift.bn1", "base_module_org.BottleneckShift.relu", "base_module_org.BottleneckShift.mse", "base_module_org.BottleneckShift.shift", "base_module_org.BottleneckShift.conv2", "base_module_org.BottleneckShift.bn2", "base_module_org.BottleneckShift.relu", "base_module_org.BottleneckShift.conv3", "base_module_org.BottleneckShift.bn3", "base_module_org.BottleneckShift.relu", "base_module_org.BottleneckShift.downsample"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_TSM.Bottleneck.shift"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "mse", "(", "out", ")", "\n", "out", "=", "self", ".", "shift", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.FBResNet.__init__": [[282, 310], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "base_module_org.FBResNet._make_layer", "base_module_org.FBResNet._make_layer", "base_module_org.FBResNet._make_layer", "base_module_org.FBResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "base_module_org.FBResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "num_segments", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "\n", "self", ".", "input_space", "=", "None", "\n", "self", ".", "input_size", "=", "(", "224", ",", "224", ",", "3", ")", "\n", "self", ".", "mean", "=", "None", "\n", "self", ".", "std", "=", "None", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "super", "(", "FBResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "self", ".", "num_segments", ",", "Bottleneck", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "self", ".", "num_segments", ",", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "self", ".", "num_segments", ",", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "self", ".", "num_segments", ",", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "last_linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.FBResNet._make_layer": [[312, 328], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "num_segments", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "num_segments", ",", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "num_segments", ",", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.FBResNet.features": [[330, 342], ["base_module_org.FBResNet.conv1", "base_module_org.FBResNet.clone", "base_module_org.FBResNet.bn1", "base_module_org.FBResNet.relu", "base_module_org.FBResNet.maxpool", "base_module_org.FBResNet.layer1", "base_module_org.FBResNet.layer2", "base_module_org.FBResNet.layer3", "base_module_org.FBResNet.layer4"], "methods", ["None"], ["", "def", "features", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "self", ".", "conv1_input", "=", "x", ".", "clone", "(", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.FBResNet.logits": [[343, 349], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "base_module_org.FBResNet.view", "base_module_org.FBResNet.last_linear", "base_module_org.FBResNet.size"], "methods", ["None"], ["", "def", "logits", "(", "self", ",", "features", ")", ":", "\n", "        ", "adaptiveAvgPoolWidth", "=", "features", ".", "shape", "[", "2", "]", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "features", ",", "kernel_size", "=", "adaptiveAvgPoolWidth", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "last_linear", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.FBResNet.forward": [[351, 355], ["base_module_org.FBResNet.features", "base_module_org.FBResNet.logits"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.FBResNet.features", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.FBResNet.logits"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "input", ")", "\n", "x", "=", "self", ".", "logits", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.conv3x3": [[156, 160], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.fbresnet50": [[356, 365], ["base_module_org.FBResNet", "FBResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "", "def", "fbresnet50", "(", "num_segments", "=", "8", ",", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "FBResNet", "(", "num_segments", ",", "BottleneckShift", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "if", "pretrained", ":", "\n", "         ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'fbresnet50'", "]", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.fbresnet101": [[367, 376], ["base_module_org.FBResNet", "FBResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "def", "fbresnet101", "(", "num_segments", ",", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "FBResNet", "(", "num_segments", ",", "BottleneckShift", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'fbresnet101'", "]", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset.VideoRecord.__init__": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "row", ")", ":", "\n", "        ", "self", ".", "_data", "=", "row", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset.VideoRecord.path": [[17, 20], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "path", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset.VideoRecord.num_frames": [[21, 24], ["int"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_frames", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "_data", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset.VideoRecord.label": [[25, 28], ["int"], "methods", ["None"], ["", "@", "property", "\n", "def", "label", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "_data", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset.TSNDataSet.__init__": [[31, 56], ["dataset.TSNDataSet._parse_list", "print"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.TSNDataSet._parse_list"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "root_path", ",", "list_file", ",", "\n", "num_segments", "=", "3", ",", "new_length", "=", "5", ",", "clip_index", "=", "0", ",", "modality", "=", "'RGB'", ",", "\n", "image_tmpl", "=", "'img_{:05d}.jpg'", ",", "transform", "=", "None", ",", "\n", "random_shift", "=", "True", ",", "test_mode", "=", "False", ",", "\n", "remove_missing", "=", "False", ",", "dense_sample", "=", "False", ",", "twice_sample", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "list_file", "=", "list_file", "\n", "self", ".", "clip_index", "=", "clip_index", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "new_length", "=", "new_length", "\n", "self", ".", "modality", "=", "modality", "\n", "self", ".", "image_tmpl", "=", "image_tmpl", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "random_shift", "=", "random_shift", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "remove_missing", "=", "remove_missing", "\n", "self", ".", "I3D_sample", "=", "False", "# using dense sample as I3D", "\n", "self", ".", "dense_sample", "=", "dense_sample", "# using dense sample as I3D", "\n", "self", ".", "twice_sample", "=", "twice_sample", "# twice sample for more validation", "\n", "if", "self", ".", "dense_sample", ":", "\n", "            ", "print", "(", "'=> Using dense sample for the dataset...'", ")", "\n", "\n", "", "self", ".", "_parse_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset.TSNDataSet._load_image": [[57, 64], ["PIL.Image.open().convert", "print", "os.path.join", "PIL.Image.open().convert", "PIL.Image.open", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "PIL.Image.open", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "dataset.TSNDataSet.image_tmpl.format"], "methods", ["None"], ["", "def", "_load_image", "(", "self", ",", "directory", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "modality", "==", "'RGB'", ":", "\n", "            ", "try", ":", "\n", "                ", "return", "[", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "idx", ")", ")", ")", ".", "convert", "(", "'RGB'", ")", "]", "\n", "", "except", "Exception", ":", "\n", "                ", "print", "(", "'error loading image:'", ",", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "idx", ")", ")", ")", "\n", "return", "[", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "1", ")", ")", ")", ".", "convert", "(", "'RGB'", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset.TSNDataSet._parse_list": [[65, 77], ["print", "x.strip().split", "len", "dataset.VideoRecord", "open", "len", "x.strip", "int", "int"], "methods", ["None"], ["", "", "", "def", "_parse_list", "(", "self", ")", ":", "\n", "# check the frame number is large >3:", "\n", "        ", "tmp", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "for", "x", "in", "open", "(", "self", ".", "list_file", ")", "]", "\n", "if", "len", "(", "tmp", "[", "0", "]", ")", "==", "3", ":", "# skip remove_missin for decording \"raw_video label\" type dataset_config", "\n", "            ", "if", "not", "self", ".", "test_mode", "or", "self", ".", "remove_missing", ":", "\n", "                ", "tmp", "=", "[", "item", "for", "item", "in", "tmp", "if", "int", "(", "item", "[", "1", "]", ")", ">=", "8", "]", "\n", "", "", "self", ".", "video_list", "=", "[", "VideoRecord", "(", "item", ")", "for", "item", "in", "tmp", "]", "\n", "\n", "if", "self", ".", "image_tmpl", "==", "'{:06d}-{}_{:05d}.jpg'", ":", "\n", "            ", "for", "v", "in", "self", ".", "video_list", ":", "\n", "                ", "v", ".", "_data", "[", "1", "]", "=", "int", "(", "v", ".", "_data", "[", "1", "]", ")", "/", "2", "\n", "", "", "print", "(", "'video number:%d'", "%", "(", "len", "(", "self", ".", "video_list", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset.TSNDataSet._sample_indices": [[78, 117], ["numpy.array", "list", "max", "len", "list", "numpy.random.randint", "numpy.array", "max", "len", "numpy.multiply", "numpy.random.randint", "list", "list", "numpy.zeros", "len", "range", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.array", "len", "len", "list", "numpy.sort", "numpy.sort", "range", "len", "numpy.random.randint", "numpy.random.randint", "len", "len", "range", "len", "len", "range", "len", "range", "len", "len", "len", "range", "len", "range", "len", "range", "len", "range", "len", "range", "len", "range", "len", "range"], "methods", ["None"], ["", "def", "_sample_indices", "(", "self", ",", "video_list", ")", ":", "\n", "        ", "if", "not", "self", ".", "I3D_sample", ":", "# TSN uniformly sampling for TDN", "\n", "            ", "if", "(", "(", "len", "(", "video_list", ")", "-", "self", ".", "new_length", "+", "1", ")", "<", "self", ".", "num_segments", ")", ":", "\n", "                ", "average_duration", "=", "(", "len", "(", "video_list", ")", "-", "5", "+", "1", ")", "//", "(", "self", ".", "num_segments", ")", "\n", "", "else", ":", "\n", "                ", "average_duration", "=", "(", "len", "(", "video_list", ")", "-", "self", ".", "new_length", "+", "1", ")", "//", "(", "self", ".", "num_segments", ")", "\n", "", "offsets", "=", "[", "]", "\n", "if", "average_duration", ">", "0", ":", "\n", "                ", "offsets", "+=", "list", "(", "np", ".", "multiply", "(", "list", "(", "range", "(", "self", ".", "num_segments", ")", ")", ",", "average_duration", ")", "+", "randint", "(", "average_duration", ",", "size", "=", "self", ".", "num_segments", ")", ")", "\n", "", "elif", "len", "(", "video_list", ")", ">", "self", ".", "num_segments", ":", "\n", "                ", "if", "(", "(", "len", "(", "video_list", ")", "-", "self", ".", "new_length", "+", "1", ")", ">=", "self", ".", "num_segments", ")", ":", "\n", "                    ", "offsets", "+=", "list", "(", "np", ".", "sort", "(", "randint", "(", "len", "(", "video_list", ")", "-", "self", ".", "new_length", "+", "1", ",", "size", "=", "self", ".", "num_segments", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "offsets", "+=", "list", "(", "np", ".", "sort", "(", "randint", "(", "len", "(", "video_list", ")", "-", "5", "+", "1", ",", "size", "=", "self", ".", "num_segments", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "offsets", "+=", "list", "(", "np", ".", "zeros", "(", "(", "self", ".", "num_segments", ",", ")", ")", ")", "\n", "", "offsets", "=", "np", ".", "array", "(", "offsets", ")", "\n", "return", "offsets", "+", "1", "\n", "", "elif", "self", ".", "dataset", "==", "'kinetics'", "and", "self", ".", "I3D_sample", "and", "(", "not", "self", ".", "dense_sample", ")", ":", "# i3d type sampling for training", "\n", "            ", "sample_pos", "=", "max", "(", "1", ",", "1", "+", "len", "(", "video_list", ")", "-", "self", ".", "new_length", "-", "64", ")", "\n", "t_stride", "=", "64", "//", "self", ".", "num_segments", "\n", "start_idx1", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "offsets", "=", "[", "(", "idx", "*", "t_stride", "+", "start_idx1", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "\n", "return", "np", ".", "array", "(", "offsets", ")", "+", "1", "\n", "", "elif", "self", ".", "dense_sample", ":", "# i3d dense sample for test", "\n", "            ", "sample_pos", "=", "max", "(", "1", ",", "1", "+", "len", "(", "video_list", ")", "-", "self", ".", "new_length", "-", "64", ")", "\n", "t_stride", "=", "64", "//", "self", ".", "num_segments", "\n", "start_idx1", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "start_idx2", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "start_idx3", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "start_idx4", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "start_idx5", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "start_idx6", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "start_idx7", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "start_idx8", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "start_idx9", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "start_idx10", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "offsets", "=", "[", "(", "idx", "*", "t_stride", "+", "start_idx1", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "+", "[", "(", "idx", "*", "t_stride", "+", "start_idx2", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "+", "[", "(", "idx", "*", "t_stride", "+", "start_idx3", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "+", "[", "(", "idx", "*", "t_stride", "+", "start_idx4", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "+", "[", "(", "idx", "*", "t_stride", "+", "start_idx5", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "+", "[", "(", "idx", "*", "t_stride", "+", "start_idx6", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "+", "[", "(", "idx", "*", "t_stride", "+", "start_idx7", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "+", "[", "(", "idx", "*", "t_stride", "+", "start_idx8", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "+", "[", "(", "idx", "*", "t_stride", "+", "start_idx9", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "+", "[", "(", "idx", "*", "t_stride", "+", "start_idx10", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "\n", "return", "np", ".", "array", "(", "offsets", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset.TSNDataSet._get_val_indices": [[119, 133], ["max", "numpy.random.randint", "numpy.array", "len", "numpy.array", "numpy.zeros", "len", "range", "float", "len", "int", "len", "range"], "methods", ["None"], ["", "", "def", "_get_val_indices", "(", "self", ",", "video_list", ")", ":", "\n", "        ", "if", "self", ".", "dense_sample", ":", "# i3d dense sample", "\n", "            ", "sample_pos", "=", "max", "(", "1", ",", "1", "+", "len", "(", "video_list", ")", "-", "64", ")", "\n", "t_stride", "=", "64", "//", "self", ".", "num_segments", "\n", "start_idx", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "offsets", "=", "[", "(", "idx", "*", "t_stride", "+", "start_idx", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "\n", "return", "np", ".", "array", "(", "offsets", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "video_list", ")", ">", "self", ".", "num_segments", "+", "self", ".", "new_length", "-", "1", ":", "\n", "                ", "tick", "=", "(", "len", "(", "video_list", ")", "-", "self", ".", "new_length", "+", "1", ")", "/", "float", "(", "self", ".", "num_segments", ")", "\n", "offsets", "=", "np", ".", "array", "(", "[", "int", "(", "tick", "/", "2.0", "+", "tick", "*", "x", ")", "for", "x", "in", "range", "(", "self", ".", "num_segments", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "offsets", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_segments", ",", ")", ")", "\n", "", "return", "offsets", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset.TSNDataSet._get_test_indices": [[134, 148], ["max", "numpy.random.randint", "numpy.array", "len", "numpy.array", "numpy.zeros", "len", "range", "float", "len", "int", "len", "range"], "methods", ["None"], ["", "", "def", "_get_test_indices", "(", "self", ",", "video_list", ")", ":", "\n", "        ", "if", "self", ".", "dense_sample", ":", "# i3d dense sample", "\n", "            ", "sample_pos", "=", "max", "(", "1", ",", "1", "+", "len", "(", "video_list", ")", "-", "64", ")", "\n", "t_stride", "=", "64", "//", "self", ".", "num_segments", "\n", "start_idx", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "offsets", "=", "[", "(", "idx", "*", "t_stride", "+", "start_idx", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "\n", "return", "np", ".", "array", "(", "offsets", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "video_list", ")", ">", "self", ".", "num_segments", "+", "self", ".", "new_length", "-", "1", ":", "\n", "                ", "tick", "=", "(", "len", "(", "video_list", ")", "-", "self", ".", "new_length", "+", "1", ")", "/", "float", "(", "self", ".", "num_segments", ")", "\n", "offsets", "=", "np", ".", "array", "(", "[", "int", "(", "tick", "/", "2.0", "+", "tick", "*", "x", ")", "for", "x", "in", "range", "(", "self", ".", "num_segments", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "offsets", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_segments", ",", ")", ")", "\n", "", "return", "offsets", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset.TSNDataSet.__getitem__": [[149, 184], ["dataset.TSNDataSet.get", "os.listdir", "decord.VideoReader", "dataset.TSNDataSet._sample_indices", "dataset.TSNDataSet._sample_indices", "dataset.TSNDataSet._get_test_indices", "os.listdir", "dataset.TSNDataSet._sample_indices", "dataset.TSNDataSet._get_val_indices"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.TSNDataSet.get", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.TSNDataSet._sample_indices", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.TSNDataSet._sample_indices", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.TSNDataSet._get_test_indices", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.TSNDataSet._sample_indices", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.TSNDataSet._get_val_indices"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "record", "=", "self", ".", "video_list", "[", "index", "]", "\n", "\n", "if", "(", "'kinetics'", "not", "in", "self", ".", "dataset", ")", ":", "\n", "            ", "decode_boo", "=", "False", "\n", "# print(record.path)", "\n", "video_list", "=", "os", ".", "listdir", "(", "self", ".", "root_path", "+", "record", ".", "path", ")", "\n", "\n", "", "else", ":", "\n", "            ", "decode_boo", "=", "True", "\n", "try", ":", "\n", "                ", "directory", "=", "record", ".", "path", "\n", "if", "directory", "[", "-", "4", ":", "]", "!=", "\".mp4\"", ":", "\n", "                    ", "video_path", "=", "directory", "+", "\".mp4\"", "\n", "", "else", ":", "\n", "                    ", "video_path", "=", "directory", "\n", "", "video_list", "=", "decord", ".", "VideoReader", "(", "video_path", ")", "\n", "", "except", "UnicodeDecodeError", ":", "\n", "                ", "decode_boo", "=", "False", "\n", "video_list", "=", "os", ".", "listdir", "(", "record", ".", "path", ")", "\n", "\n", "\n", "", "", "if", "not", "self", ".", "test_mode", ":", "\n", "            ", "if", "self", ".", "I3D_sample", ":", "\n", "                ", "segment_indices", "=", "self", ".", "_sample_indices", "(", "video_list", ")", "\n", "", "else", ":", "\n", "                ", "segment_indices", "=", "self", ".", "_sample_indices", "(", "video_list", ")", "if", "self", ".", "random_shift", "else", "self", ".", "_get_val_indices", "(", "video_list", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "dataset", "==", "'kinetics'", ":", "\n", "                ", "segment_indices", "=", "self", ".", "_sample_indices", "(", "video_list", ")", "\n", "", "else", ":", "\n", "                ", "segment_indices", "=", "self", ".", "_get_test_indices", "(", "video_list", ")", "\n", "\n", "\n", "", "", "return", "self", ".", "get", "(", "record", ",", "video_list", ",", "segment_indices", ",", "decode_boo", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset.TSNDataSet.get": [[185, 205], ["list", "dataset.TSNDataSet.transform", "int", "range", "list.extend", "dataset.TSNDataSet._load_image", "PIL.Image.fromarray().convert", "len", "len", "len", "PIL.Image.fromarray", "video_list[].asnumpy"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.TSNDataSet._load_image"], ["", "def", "get", "(", "self", ",", "record", ",", "video_list", ",", "indices", ",", "decode_boo", ")", ":", "\n", "        ", "images", "=", "list", "(", ")", "\n", "for", "seg_ind", "in", "indices", ":", "\n", "            ", "p", "=", "int", "(", "seg_ind", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "new_length", ",", "1", ")", ":", "\n", "                ", "if", "(", "decode_boo", ")", ":", "\n", "                    ", "seg_imgs", "=", "[", "Image", ".", "fromarray", "(", "video_list", "[", "p", "-", "1", "]", ".", "asnumpy", "(", ")", ")", ".", "convert", "(", "'RGB'", ")", "]", "\n", "", "else", ":", "\n", "                    ", "seg_imgs", "=", "self", ".", "_load_image", "(", "record", ".", "path", ",", "p", ")", "\n", "", "images", ".", "extend", "(", "seg_imgs", ")", "\n", "if", "(", "(", "len", "(", "video_list", ")", "-", "self", ".", "new_length", "*", "1", "+", "1", ")", ">=", "8", ")", ":", "\n", "                    ", "if", "p", "<", "(", "len", "(", "video_list", ")", ")", ":", "\n", "                        ", "p", "+=", "1", "\n", "", "", "else", ":", "\n", "                    ", "if", "p", "<", "(", "len", "(", "video_list", ")", ")", ":", "\n", "                        ", "p", "+=", "1", "\n", "\n", "", "", "", "", "process_data", ",", "record_label", "=", "self", ".", "transform", "(", "(", "images", ",", "record", ".", "label", ")", ")", "\n", "\n", "return", "process_data", ",", "record_label", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.dataset.TSNDataSet.__len__": [[206, 208], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "video_list", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.models_gc.TSN.__init__": [[9, 57], ["torch.nn.Module.__init__", "models_gc.TSN._prepare_base_model", "models_gc.TSN._prepare_tsn", "ops_tdn.basic_ops.ConsensusModule", "ValueError", "print", "torch.nn.Softmax", "models_gc.TSN.partialBN"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet._prepare_base_model", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.models_org.TSN._prepare_tsn", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.partialBN"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ",", "num_segments", ",", "modality", ",", "\n", "base_model", "=", "'resnet101'", ",", "new_length", "=", "None", ",", "\n", "consensus_type", "=", "'avg'", ",", "before_softmax", "=", "True", ",", "\n", "dropout", "=", "0.8", ",", "img_feature_dim", "=", "256", ",", "crop_num", "=", "1", ",", "\n", "partial_bn", "=", "True", ",", "print_spec", "=", "True", ",", "pretrain", "=", "'imagenet'", ",", "fc_lr5", "=", "False", ")", ":", "\n", "        ", "super", "(", "TSN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "modality", "=", "modality", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "reshape", "=", "True", "\n", "self", ".", "before_softmax", "=", "before_softmax", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "crop_num", "=", "crop_num", "\n", "self", ".", "consensus_type", "=", "consensus_type", "\n", "self", ".", "img_feature_dim", "=", "img_feature_dim", "# the dimension of the CNN feature to represent each frame", "\n", "self", ".", "pretrain", "=", "pretrain", "\n", "self", ".", "base_model_name", "=", "base_model", "\n", "self", ".", "fc_lr5", "=", "fc_lr5", "# fine_tuning for UCF/HMDB", "\n", "self", ".", "target_transforms", "=", "{", "86", ":", "87", ",", "87", ":", "86", ",", "93", ":", "94", ",", "94", ":", "93", ",", "166", ":", "167", ",", "167", ":", "166", "}", "\n", "\n", "if", "not", "before_softmax", "and", "consensus_type", "!=", "'avg'", ":", "\n", "            ", "raise", "ValueError", "(", "\"Only avg consensus can be used after Softmax\"", ")", "\n", "\n", "", "if", "new_length", "is", "None", ":", "\n", "            ", "self", ".", "new_length", "=", "1", "if", "modality", "==", "\"RGB\"", "else", "5", "\n", "", "else", ":", "\n", "            ", "self", ".", "new_length", "=", "new_length", "\n", "", "if", "print_spec", ":", "\n", "            ", "print", "(", "(", "\"\"\"\n    Initializing TSN with base model: {}.\n    TSN Configurations:\n        input_modality:     {}\n        num_segments:       {}\n        new_length:         {}\n        consensus_module:   {}\n        dropout_ratio:      {}\n        img_feature_dim:    {}\n            \"\"\"", ".", "format", "(", "base_model", ",", "self", ".", "modality", ",", "self", ".", "num_segments", ",", "self", ".", "new_length", ",", "consensus_type", ",", "self", ".", "dropout", ",", "self", ".", "img_feature_dim", ")", ")", ")", "\n", "\n", "", "self", ".", "_prepare_base_model", "(", "base_model", ",", "self", ".", "num_segments", ")", "\n", "feature_dim", "=", "self", ".", "_prepare_tsn", "(", "num_class", ")", "\n", "self", ".", "consensus", "=", "ConsensusModule", "(", "consensus_type", ")", "\n", "\n", "if", "not", "self", ".", "before_softmax", ":", "\n", "            ", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "\n", "\n", "", "self", ".", "_enable_pbn", "=", "partial_bn", "\n", "if", "partial_bn", ":", "\n", "            ", "self", ".", "partialBN", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.models_gc.TSN._prepare_tsn": [[58, 78], ["getattr", "setattr", "setattr", "torch.nn.Linear", "torch.nn.init.normal_", "torch.nn.init.constant_", "hasattr", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.init.normal_", "torch.nn.init.constant_", "getattr", "getattr"], "methods", ["None"], ["", "", "def", "_prepare_tsn", "(", "self", ",", "num_class", ")", ":", "\n", "\n", "        ", "feature_dim", "=", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "in_features", "\n", "if", "self", ".", "dropout", "==", "0", ":", "\n", "            ", "setattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ",", "nn", ".", "Linear", "(", "feature_dim", ",", "num_class", ")", ")", "\n", "self", ".", "new_fc", "=", "None", "\n", "", "else", ":", "\n", "            ", "setattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ",", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ")", "\n", "self", ".", "new_fc", "=", "nn", ".", "Linear", "(", "feature_dim", ",", "num_class", ")", "\n", "\n", "", "std", "=", "0.001", "\n", "if", "self", ".", "new_fc", "is", "None", ":", "\n", "            ", "normal_", "(", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "if", "hasattr", "(", "self", ".", "new_fc", ",", "'weight'", ")", ":", "\n", "                ", "normal_", "(", "self", ".", "new_fc", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "new_fc", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "return", "feature_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.models_gc.TSN._prepare_base_model": [[79, 91], ["print", "ops_tdn.tdn_net_gc.tdn_net", "torch.nn.AdaptiveAvgPool2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.tdn_net_org.tdn_net"], ["", "def", "_prepare_base_model", "(", "self", ",", "base_model", ",", "num_segments", ")", ":", "\n", "        ", "print", "(", "(", "'=> base model: {}'", ".", "format", "(", "base_model", ")", ")", ")", "\n", "if", "'resnet'", "in", "base_model", ":", "\n", "            ", "self", ".", "base_model", "=", "tdn_net", "(", "base_model", ",", "num_segments", ")", "\n", "self", ".", "base_model", ".", "last_layer_name", "=", "'fc'", "\n", "self", ".", "input_size", "=", "224", "\n", "self", ".", "input_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "self", ".", "input_std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "self", ".", "base_model", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown base model: {}'", ".", "format", "(", "base_model", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.models_gc.TSN.train": [[92, 108], ["super().train", "print", "models_gc.TSN.base_model.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.train"], ["", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Override the default train() to freeze the BN parameters\n        :return:\n        \"\"\"", "\n", "super", "(", "TSN", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "count", "=", "0", "\n", "if", "self", ".", "_enable_pbn", "and", "mode", ":", "\n", "            ", "print", "(", "\"Freezing BatchNorm2D except the first one.\"", ")", "\n", "for", "m", "in", "self", ".", "base_model", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "count", "+=", "1", "\n", "if", "count", ">=", "(", "2", "if", "self", ".", "_enable_pbn", "else", "1", ")", ":", "\n", "                        ", "m", ".", "eval", "(", ")", "\n", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.models_gc.TSN.partialBN": [[109, 111], ["None"], "methods", ["None"], ["", "", "", "", "", "def", "partialBN", "(", "self", ",", "enable", ")", ":", "\n", "        ", "self", ".", "_enable_pbn", "=", "enable", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.models_gc.TSN.get_optim_policies": [[112, 236], ["models_gc.TSN.named_modules", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "list", "isinstance", "list", "ef_weight.append", "list", "normal_weight.append", "m.parameters", "first_conv_weight.append", "normal_weight.append", "list", "isinstance", "m.parameters", "len", "ef_bias.append", "m.parameters", "len", "normal_bias.append", "list", "ef_weight.append", "list", "normal_weight.append", "isinstance", "isinstance", "isinstance", "ef_bn.extend", "len", "first_conv_bias.append", "len", "normal_bias.append", "m.parameters", "lr5_weight.append", "normal_weight.append", "len", "isinstance", "m.parameters", "len", "ef_bias.append", "m.parameters", "len", "normal_bias.append", "list", "len", "lr10_bias.append", "normal_bias.append", "bn.extend", "m.parameters", "len", "ValueError", "list", "bn.extend", "len", "list", "m.parameters", "list", "len", "ValueError", "m.parameters", "type", "m.parameters", "list", "m.parameters", "type"], "methods", ["None"], ["", "def", "get_optim_policies", "(", "self", ")", ":", "\n", "        ", "first_conv_weight", "=", "[", "]", "\n", "first_conv_bias", "=", "[", "]", "\n", "normal_weight", "=", "[", "]", "\n", "normal_bias", "=", "[", "]", "\n", "lr5_weight", "=", "[", "]", "\n", "lr10_bias", "=", "[", "]", "\n", "bn", "=", "[", "]", "\n", "custom_ops", "=", "[", "]", "\n", "inorm", "=", "[", "]", "\n", "conv_cnt", "=", "0", "\n", "bn_cnt", "=", "0", "\n", "\n", "ef_weight", "=", "[", "]", "\n", "ef_bias", "=", "[", "]", "\n", "ef_bn", "=", "[", "]", "\n", "\n", "for", "name", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "'eft'", "in", "name", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv1d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv3d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "ConvTranspose3d", ")", ":", "\n", "                    ", "if", "True", ":", "\n", "                        ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "ef_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "ef_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                        ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "                    ", "if", "True", ":", "\n", "                        ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "ef_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "ef_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                        ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm3d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                    ", "ef_bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "elif", "len", "(", "m", ".", "_modules", ")", "==", "0", ":", "\n", "                    ", "if", "len", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", ">", "0", ":", "\n", "                        ", "raise", "ValueError", "(", "\"New atomic module type: {} in eft blocks. Need to give it a learning policy\"", ".", "format", "(", "type", "(", "m", ")", ")", ")", "\n", "", "", "", "else", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv1d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv3d", ")", ":", "\n", "                    ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "conv_cnt", "+=", "1", "\n", "if", "conv_cnt", "==", "1", ":", "\n", "                        ", "first_conv_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "first_conv_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                        ", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "                    ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "fc_lr5", ":", "\n", "                        ", "lr5_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                        ", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                        ", "if", "self", ".", "fc_lr5", ":", "\n", "                            ", "lr10_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                            ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "bn_cnt", "+=", "1", "\n", "# later BN's are frozen", "\n", "if", "not", "self", ".", "_enable_pbn", "or", "bn_cnt", "==", "1", ":", "\n", "                        ", "bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                    ", "bn_cnt", "+=", "1", "\n", "# later BN's are frozen", "\n", "if", "not", "self", ".", "_enable_pbn", "or", "bn_cnt", "==", "1", ":", "\n", "                        ", "bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "", "elif", "len", "(", "m", ".", "_modules", ")", "==", "0", ":", "\n", "                    ", "if", "len", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", ">", "0", ":", "\n", "                        ", "raise", "ValueError", "(", "\"New atomic module type: {}. Need to give it a learning policy\"", ".", "format", "(", "type", "(", "m", ")", ")", ")", "\n", "\n", "", "", "", "", "if", "self", ".", "fc_lr5", ":", "# fine_tuning for UCF/HMDB", "\n", "            ", "return", "[", "\n", "{", "'params'", ":", "first_conv_weight", ",", "'lr_mult'", ":", "5", "if", "self", ".", "modality", "==", "'Flow'", "else", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"first_conv_weight\"", "}", ",", "\n", "{", "'params'", ":", "first_conv_bias", ",", "'lr_mult'", ":", "10", "if", "self", ".", "modality", "==", "'Flow'", "else", "2", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"first_conv_bias\"", "}", ",", "\n", "{", "'params'", ":", "normal_weight", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"normal_weight\"", "}", ",", "\n", "{", "'params'", ":", "normal_bias", ",", "'lr_mult'", ":", "2", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"normal_bias\"", "}", ",", "\n", "{", "'params'", ":", "bn", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"BN scale/shift\"", "}", ",", "\n", "{", "'params'", ":", "custom_ops", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"custom_ops\"", "}", ",", "\n", "{", "'params'", ":", "lr5_weight", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"lr5_weight\"", "}", ",", "\n", "{", "'params'", ":", "lr10_bias", ",", "'lr_mult'", ":", "10", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"lr10_bias\"", "}", ",", "\n", "]", "\n", "", "else", ":", "# default ", "\n", "            ", "return", "[", "\n", "{", "'params'", ":", "first_conv_weight", ",", "'lr_mult'", ":", "5", "if", "self", ".", "modality", "==", "'Flow'", "else", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"first_conv_weight\"", "}", ",", "\n", "{", "'params'", ":", "first_conv_bias", ",", "'lr_mult'", ":", "10", "if", "self", ".", "modality", "==", "'Flow'", "else", "2", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"first_conv_bias\"", "}", ",", "\n", "{", "'params'", ":", "normal_weight", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"normal_weight\"", "}", ",", "\n", "{", "'params'", ":", "normal_bias", ",", "'lr_mult'", ":", "2", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"normal_bias\"", "}", ",", "\n", "{", "'params'", ":", "bn", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"BN scale/shift\"", "}", ",", "\n", "{", "'params'", ":", "custom_ops", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"custom_ops\"", "}", ",", "\n", "# for ef", "\n", "{", "'params'", ":", "ef_weight", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"ef_weight\"", "}", ",", "\n", "{", "'params'", ":", "ef_bias", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"ef_bias\"", "}", ",", "\n", "{", "'params'", ":", "ef_bn", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"ef_bn\"", "}", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.models_gc.TSN.forward": [[240, 258], ["models_gc.TSN.base_model", "models_gc.TSN.base_model", "models_gc.TSN.new_fc", "models_gc.TSN.softmax", "base_out.view.view.view", "models_gc.TSN.consensus", "models_gc.TSN.squeeze", "input.view", "base_out.view.view.size", "input.size"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.softmax"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "no_reshape", "=", "False", ")", ":", "\n", "        ", "if", "not", "no_reshape", ":", "\n", "            ", "sample_len", "=", "(", "3", "if", "self", ".", "modality", "==", "\"RGB\"", "else", "2", ")", "*", "self", ".", "new_length", "\n", "base_out", "=", "self", ".", "base_model", "(", "input", ".", "view", "(", "(", "-", "1", ",", "sample_len", "*", "5", ")", "+", "input", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "base_out", "=", "self", ".", "base_model", "(", "input", ")", "\n", "\n", "", "if", "self", ".", "dropout", ">", "0", ":", "\n", "            ", "base_out", "=", "self", ".", "new_fc", "(", "base_out", ")", "\n", "\n", "", "if", "not", "self", ".", "before_softmax", ":", "\n", "            ", "base_out", "=", "self", ".", "softmax", "(", "base_out", ")", "\n", "\n", "", "if", "self", ".", "reshape", ":", "\n", "            ", "base_out", "=", "base_out", ".", "view", "(", "(", "-", "1", ",", "self", ".", "num_segments", ")", "+", "base_out", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", "output", "=", "self", ".", "consensus", "(", "base_out", ")", "\n", "\n", "return", "output", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.models_gc.TSN.crop_size": [[260, 263], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "crop_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.models_gc.TSN.scale_size": [[264, 267], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "scale_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input_size", "*", "256", "//", "224", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.models_gc.TSN.get_augmentation": [[268, 276], ["torchvision.transforms.Compose", "print", "torchvision.transforms.Compose", "GroupMultiScaleCrop", "GroupRandomHorizontalFlip", "GroupMultiScaleCrop", "GroupRandomHorizontalFlip_sth"], "methods", ["None"], ["", "def", "get_augmentation", "(", "self", ",", "flip", "=", "False", ")", ":", "\n", "        ", "if", "flip", ":", "\n", "            ", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", ")", ",", "\n", "GroupRandomHorizontalFlip", "(", "is_flow", "=", "False", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'using flip~!!!'", ")", "\n", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", ")", ",", "\n", "GroupRandomHorizontalFlip_sth", "(", "self", ".", "target_transforms", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.models_org.TSN.__init__": [[14, 62], ["torch.nn.Module.__init__", "models_org.TSN._prepare_base_model", "models_org.TSN._prepare_tsn", "ops_tdn.basic_ops.ConsensusModule", "ValueError", "print", "torch.nn.Softmax", "models_org.TSN.partialBN"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet._prepare_base_model", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.models_org.TSN._prepare_tsn", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.partialBN"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ",", "num_segments", ",", "modality", ",", "\n", "base_model", "=", "'resnet101'", ",", "new_length", "=", "None", ",", "\n", "consensus_type", "=", "'avg'", ",", "before_softmax", "=", "True", ",", "\n", "dropout", "=", "0.8", ",", "img_feature_dim", "=", "256", ",", "crop_num", "=", "1", ",", "\n", "partial_bn", "=", "True", ",", "print_spec", "=", "True", ",", "pretrain", "=", "'imagenet'", ",", "fc_lr5", "=", "False", ")", ":", "\n", "        ", "super", "(", "TSN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "modality", "=", "modality", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "reshape", "=", "True", "\n", "self", ".", "before_softmax", "=", "before_softmax", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "crop_num", "=", "crop_num", "\n", "self", ".", "consensus_type", "=", "consensus_type", "\n", "self", ".", "img_feature_dim", "=", "img_feature_dim", "# the dimension of the CNN feature to represent each frame", "\n", "self", ".", "pretrain", "=", "pretrain", "\n", "self", ".", "base_model_name", "=", "base_model", "\n", "self", ".", "fc_lr5", "=", "fc_lr5", "# fine_tuning for UCF/HMDB", "\n", "self", ".", "target_transforms", "=", "{", "86", ":", "87", ",", "87", ":", "86", ",", "93", ":", "94", ",", "94", ":", "93", ",", "166", ":", "167", ",", "167", ":", "166", "}", "\n", "\n", "if", "not", "before_softmax", "and", "consensus_type", "!=", "'avg'", ":", "\n", "            ", "raise", "ValueError", "(", "\"Only avg consensus can be used after Softmax\"", ")", "\n", "\n", "", "if", "new_length", "is", "None", ":", "\n", "            ", "self", ".", "new_length", "=", "1", "if", "modality", "==", "\"RGB\"", "else", "5", "\n", "", "else", ":", "\n", "            ", "self", ".", "new_length", "=", "new_length", "\n", "", "if", "print_spec", ":", "\n", "            ", "print", "(", "(", "\"\"\"\n    Initializing TSN with base model: {}.\n    TSN Configurations:\n        input_modality:     {}\n        num_segments:       {}\n        new_length:         {}\n        consensus_module:   {}\n        dropout_ratio:      {}\n        img_feature_dim:    {}\n            \"\"\"", ".", "format", "(", "base_model", ",", "self", ".", "modality", ",", "self", ".", "num_segments", ",", "self", ".", "new_length", ",", "consensus_type", ",", "self", ".", "dropout", ",", "self", ".", "img_feature_dim", ")", ")", ")", "\n", "\n", "", "self", ".", "_prepare_base_model", "(", "base_model", ",", "self", ".", "num_segments", ")", "\n", "feature_dim", "=", "self", ".", "_prepare_tsn", "(", "num_class", ")", "\n", "self", ".", "consensus", "=", "ConsensusModule", "(", "consensus_type", ")", "\n", "\n", "if", "not", "self", ".", "before_softmax", ":", "\n", "            ", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "\n", "\n", "", "self", ".", "_enable_pbn", "=", "partial_bn", "\n", "if", "partial_bn", ":", "\n", "            ", "self", ".", "partialBN", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.models_org.TSN._prepare_tsn": [[63, 83], ["getattr", "setattr", "setattr", "torch.nn.Linear", "torch.nn.init.normal_", "torch.nn.init.constant_", "hasattr", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.init.normal_", "torch.nn.init.constant_", "getattr", "getattr"], "methods", ["None"], ["", "", "def", "_prepare_tsn", "(", "self", ",", "num_class", ")", ":", "\n", "\n", "        ", "feature_dim", "=", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "in_features", "\n", "if", "self", ".", "dropout", "==", "0", ":", "\n", "            ", "setattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ",", "nn", ".", "Linear", "(", "feature_dim", ",", "num_class", ")", ")", "\n", "self", ".", "new_fc", "=", "None", "\n", "", "else", ":", "\n", "            ", "setattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ",", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ")", "\n", "self", ".", "new_fc", "=", "nn", ".", "Linear", "(", "feature_dim", ",", "num_class", ")", "\n", "\n", "", "std", "=", "0.001", "\n", "if", "self", ".", "new_fc", "is", "None", ":", "\n", "            ", "normal_", "(", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "if", "hasattr", "(", "self", ".", "new_fc", ",", "'weight'", ")", ":", "\n", "                ", "normal_", "(", "self", ".", "new_fc", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "new_fc", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "return", "feature_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.models_org.TSN._prepare_base_model": [[84, 96], ["print", "ops_tdn.tdn_net_org.tdn_net", "torch.nn.AdaptiveAvgPool2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.tdn_net_org.tdn_net"], ["", "def", "_prepare_base_model", "(", "self", ",", "base_model", ",", "num_segments", ")", ":", "\n", "        ", "print", "(", "(", "'=> base model: {}'", ".", "format", "(", "base_model", ")", ")", ")", "\n", "if", "'resnet'", "in", "base_model", ":", "\n", "            ", "self", ".", "base_model", "=", "tdn_net", "(", "base_model", ",", "num_segments", ")", "\n", "self", ".", "base_model", ".", "last_layer_name", "=", "'fc'", "\n", "self", ".", "input_size", "=", "224", "\n", "self", ".", "input_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "self", ".", "input_std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "self", ".", "base_model", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown base model: {}'", ".", "format", "(", "base_model", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.models_org.TSN.train": [[97, 113], ["super().train", "print", "models_org.TSN.base_model.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.train"], ["", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Override the default train() to freeze the BN parameters\n        :return:\n        \"\"\"", "\n", "super", "(", "TSN", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "count", "=", "0", "\n", "if", "self", ".", "_enable_pbn", "and", "mode", ":", "\n", "            ", "print", "(", "\"Freezing BatchNorm2D except the first one.\"", ")", "\n", "for", "m", "in", "self", ".", "base_model", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "count", "+=", "1", "\n", "if", "count", ">=", "(", "2", "if", "self", ".", "_enable_pbn", "else", "1", ")", ":", "\n", "                        ", "m", ".", "eval", "(", ")", "\n", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.models_org.TSN.partialBN": [[114, 116], ["None"], "methods", ["None"], ["", "", "", "", "", "def", "partialBN", "(", "self", ",", "enable", ")", ":", "\n", "        ", "self", ".", "_enable_pbn", "=", "enable", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.models_org.TSN.get_optim_policies": [[117, 241], ["models_org.TSN.named_modules", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "list", "isinstance", "list", "ef_weight.append", "list", "normal_weight.append", "m.parameters", "first_conv_weight.append", "normal_weight.append", "list", "isinstance", "m.parameters", "len", "ef_bias.append", "m.parameters", "len", "normal_bias.append", "list", "ef_weight.append", "list", "normal_weight.append", "isinstance", "isinstance", "isinstance", "ef_bn.extend", "len", "first_conv_bias.append", "len", "normal_bias.append", "m.parameters", "lr5_weight.append", "normal_weight.append", "len", "isinstance", "m.parameters", "len", "ef_bias.append", "m.parameters", "len", "normal_bias.append", "list", "len", "lr10_bias.append", "normal_bias.append", "bn.extend", "m.parameters", "len", "ValueError", "list", "bn.extend", "len", "list", "m.parameters", "list", "len", "ValueError", "m.parameters", "type", "m.parameters", "list", "m.parameters", "type"], "methods", ["None"], ["", "def", "get_optim_policies", "(", "self", ")", ":", "\n", "        ", "first_conv_weight", "=", "[", "]", "\n", "first_conv_bias", "=", "[", "]", "\n", "normal_weight", "=", "[", "]", "\n", "normal_bias", "=", "[", "]", "\n", "lr5_weight", "=", "[", "]", "\n", "lr10_bias", "=", "[", "]", "\n", "bn", "=", "[", "]", "\n", "custom_ops", "=", "[", "]", "\n", "inorm", "=", "[", "]", "\n", "conv_cnt", "=", "0", "\n", "bn_cnt", "=", "0", "\n", "\n", "ef_weight", "=", "[", "]", "\n", "ef_bias", "=", "[", "]", "\n", "ef_bn", "=", "[", "]", "\n", "\n", "for", "name", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "'eft'", "in", "name", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv1d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv3d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "ConvTranspose3d", ")", ":", "\n", "                    ", "if", "True", ":", "\n", "                        ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "ef_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "ef_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                        ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "                    ", "if", "True", ":", "\n", "                        ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "ef_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "ef_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                        ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm3d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                    ", "ef_bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "elif", "len", "(", "m", ".", "_modules", ")", "==", "0", ":", "\n", "                    ", "if", "len", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", ">", "0", ":", "\n", "                        ", "raise", "ValueError", "(", "\"New atomic module type: {} in eft blocks. Need to give it a learning policy\"", ".", "format", "(", "type", "(", "m", ")", ")", ")", "\n", "", "", "", "else", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv1d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv3d", ")", ":", "\n", "                    ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "conv_cnt", "+=", "1", "\n", "if", "conv_cnt", "==", "1", ":", "\n", "                        ", "first_conv_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "first_conv_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                        ", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "                    ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "fc_lr5", ":", "\n", "                        ", "lr5_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                        ", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                        ", "if", "self", ".", "fc_lr5", ":", "\n", "                            ", "lr10_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                            ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "bn_cnt", "+=", "1", "\n", "# later BN's are frozen", "\n", "if", "not", "self", ".", "_enable_pbn", "or", "bn_cnt", "==", "1", ":", "\n", "                        ", "bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                    ", "bn_cnt", "+=", "1", "\n", "# later BN's are frozen", "\n", "if", "not", "self", ".", "_enable_pbn", "or", "bn_cnt", "==", "1", ":", "\n", "                        ", "bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "", "elif", "len", "(", "m", ".", "_modules", ")", "==", "0", ":", "\n", "                    ", "if", "len", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", ">", "0", ":", "\n", "                        ", "raise", "ValueError", "(", "\"New atomic module type: {}. Need to give it a learning policy\"", ".", "format", "(", "type", "(", "m", ")", ")", ")", "\n", "\n", "", "", "", "", "if", "self", ".", "fc_lr5", ":", "# fine_tuning for UCF/HMDB", "\n", "            ", "return", "[", "\n", "{", "'params'", ":", "first_conv_weight", ",", "'lr_mult'", ":", "5", "if", "self", ".", "modality", "==", "'Flow'", "else", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"first_conv_weight\"", "}", ",", "\n", "{", "'params'", ":", "first_conv_bias", ",", "'lr_mult'", ":", "10", "if", "self", ".", "modality", "==", "'Flow'", "else", "2", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"first_conv_bias\"", "}", ",", "\n", "{", "'params'", ":", "normal_weight", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"normal_weight\"", "}", ",", "\n", "{", "'params'", ":", "normal_bias", ",", "'lr_mult'", ":", "2", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"normal_bias\"", "}", ",", "\n", "{", "'params'", ":", "bn", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"BN scale/shift\"", "}", ",", "\n", "{", "'params'", ":", "custom_ops", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"custom_ops\"", "}", ",", "\n", "{", "'params'", ":", "lr5_weight", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"lr5_weight\"", "}", ",", "\n", "{", "'params'", ":", "lr10_bias", ",", "'lr_mult'", ":", "10", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"lr10_bias\"", "}", ",", "\n", "]", "\n", "", "else", ":", "# default ", "\n", "            ", "return", "[", "\n", "{", "'params'", ":", "first_conv_weight", ",", "'lr_mult'", ":", "5", "if", "self", ".", "modality", "==", "'Flow'", "else", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"first_conv_weight\"", "}", ",", "\n", "{", "'params'", ":", "first_conv_bias", ",", "'lr_mult'", ":", "10", "if", "self", ".", "modality", "==", "'Flow'", "else", "2", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"first_conv_bias\"", "}", ",", "\n", "{", "'params'", ":", "normal_weight", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"normal_weight\"", "}", ",", "\n", "{", "'params'", ":", "normal_bias", ",", "'lr_mult'", ":", "2", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"normal_bias\"", "}", ",", "\n", "{", "'params'", ":", "bn", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"BN scale/shift\"", "}", ",", "\n", "{", "'params'", ":", "custom_ops", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"custom_ops\"", "}", ",", "\n", "# for ef", "\n", "{", "'params'", ":", "ef_weight", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"ef_weight\"", "}", ",", "\n", "{", "'params'", ":", "ef_bias", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"ef_bias\"", "}", ",", "\n", "{", "'params'", ":", "ef_bn", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"ef_bn\"", "}", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.models_org.TSN.forward": [[245, 263], ["models_org.TSN.base_model", "models_org.TSN.base_model", "models_org.TSN.new_fc", "models_org.TSN.softmax", "base_out.view.view.view", "models_org.TSN.consensus", "models_org.TSN.squeeze", "input.view", "base_out.view.view.size", "input.size"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.softmax"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "no_reshape", "=", "False", ")", ":", "\n", "        ", "if", "not", "no_reshape", ":", "\n", "            ", "sample_len", "=", "(", "3", "if", "self", ".", "modality", "==", "\"RGB\"", "else", "2", ")", "*", "self", ".", "new_length", "\n", "base_out", "=", "self", ".", "base_model", "(", "input", ".", "view", "(", "(", "-", "1", ",", "sample_len", "*", "5", ")", "+", "input", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "base_out", "=", "self", ".", "base_model", "(", "input", ")", "\n", "\n", "", "if", "self", ".", "dropout", ">", "0", ":", "\n", "            ", "base_out", "=", "self", ".", "new_fc", "(", "base_out", ")", "\n", "\n", "", "if", "not", "self", ".", "before_softmax", ":", "\n", "            ", "base_out", "=", "self", ".", "softmax", "(", "base_out", ")", "\n", "\n", "", "if", "self", ".", "reshape", ":", "\n", "            ", "base_out", "=", "base_out", ".", "view", "(", "(", "-", "1", ",", "self", ".", "num_segments", ")", "+", "base_out", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", "output", "=", "self", ".", "consensus", "(", "base_out", ")", "\n", "\n", "return", "output", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.models_org.TSN.crop_size": [[265, 268], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "crop_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.models_org.TSN.scale_size": [[269, 272], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "scale_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input_size", "*", "256", "//", "224", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.models_org.TSN.get_augmentation": [[273, 281], ["torchvision.transforms.Compose", "print", "torchvision.transforms.Compose", "GroupMultiScaleCrop", "GroupRandomHorizontalFlip", "GroupMultiScaleCrop", "GroupRandomHorizontalFlip_sth"], "methods", ["None"], ["", "def", "get_augmentation", "(", "self", ",", "flip", "=", "False", ")", ":", "\n", "        ", "if", "flip", ":", "\n", "            ", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", ")", ",", "\n", "GroupRandomHorizontalFlip", "(", "is_flow", "=", "False", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'using flip~!!!'", ")", "\n", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", ")", ",", "\n", "GroupRandomHorizontalFlip_sth", "(", "self", ".", "target_transforms", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.tdn_net_gc.TDN_Net.__init__": [[11, 39], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "params[].size", "params[].data.mean().expand().contiguous", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "list", "list", "list", "x.clone", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "list", "resnet_model.children", "resnet_model.children", "resnet_model1.children", "tdn_net_gc.TDN_Net.conv1_temp.parameters", "params[].data.mean().expand", "resnet_model.children", "list", "list", "list", "list", "list", "params[].data.mean", "resnet_model1.children", "resnet_model.children", "resnet_model.children", "resnet_model.children", "resnet_model.children"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "resnet_model", ",", "resnet_model1", ",", "apha", ",", "belta", ")", ":", "\n", "        ", "super", "(", "TDN_Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "list", "(", "resnet_model", ".", "children", "(", ")", ")", "[", "0", "]", "\n", "self", ".", "bn1", "=", "list", "(", "resnet_model", ".", "children", "(", ")", ")", "[", "1", "]", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# implement conv1_5 and inflate weight ", "\n", "self", ".", "conv1_temp", "=", "list", "(", "resnet_model1", ".", "children", "(", ")", ")", "[", "0", "]", "\n", "params", "=", "[", "x", ".", "clone", "(", ")", "for", "x", "in", "self", ".", "conv1_temp", ".", "parameters", "(", ")", "]", "\n", "kernel_size", "=", "params", "[", "0", "]", ".", "size", "(", ")", "\n", "new_kernel_size", "=", "kernel_size", "[", ":", "1", "]", "+", "(", "3", "*", "4", ",", ")", "+", "kernel_size", "[", "2", ":", "]", "\n", "new_kernels", "=", "params", "[", "0", "]", ".", "data", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "new_kernel_size", ")", ".", "contiguous", "(", ")", "\n", "self", ".", "conv1_5", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "12", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv1_5", "[", "0", "]", ".", "weight", ".", "data", "=", "new_kernels", "\n", "\n", "self", ".", "maxpool_diff", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "ceil_mode", "=", "False", ")", "\n", "self", ".", "resnext_layer1", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet_model1", ".", "children", "(", ")", ")", "[", "4", "]", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "ceil_mode", "=", "False", ")", "\n", "self", ".", "layer1_bak", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet_model", ".", "children", "(", ")", ")", "[", "4", "]", ")", "\n", "self", ".", "layer2_bak", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet_model", ".", "children", "(", ")", ")", "[", "5", "]", ")", "\n", "self", ".", "layer3_bak", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet_model", ".", "children", "(", ")", ")", "[", "6", "]", ")", "\n", "self", ".", "layer4_bak", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet_model", ".", "children", "(", ")", ")", "[", "7", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "avg_diff", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "fc", "=", "list", "(", "resnet_model", ".", "children", "(", ")", ")", "[", "8", "]", "\n", "self", ".", "apha", "=", "apha", "\n", "self", ".", "belta", "=", "belta", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.tdn_net_gc.TDN_Net.forward": [[40, 70], ["tdn_net_gc.TDN_Net.conv1_5", "tdn_net_gc.TDN_Net.maxpool_diff", "tdn_net_gc.TDN_Net.resnext_layer1", "tdn_net_gc.TDN_Net.conv1", "tdn_net_gc.TDN_Net.bn1", "tdn_net_gc.TDN_Net.relu", "tdn_net_gc.TDN_Net.maxpool", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "tdn_net_gc.TDN_Net.layer1_bak", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "tdn_net_gc.TDN_Net.layer2_bak", "tdn_net_gc.TDN_Net.layer3_bak", "tdn_net_gc.TDN_Net.layer4_bak", "tdn_net_gc.TDN_Net.avgpool", "tdn_net_gc.TDN_Net.view", "tdn_net_gc.TDN_Net.fc", "tdn_net_gc.TDN_Net.avg_diff", "tdn_net_gc.TDN_Net.size", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "tdn_net_gc.TDN_Net.size", "tdn_net_gc.TDN_Net.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x2.size", "x2.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", ",", "x2", ",", "x3", ",", "x4", ",", "x5", "=", "x", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "3", ":", "6", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "6", ":", "9", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "9", ":", "12", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "12", ":", "15", ",", ":", ",", ":", "]", "\n", "x_c5", "=", "self", ".", "conv1_5", "(", "self", ".", "avg_diff", "(", "torch", ".", "cat", "(", "[", "x2", "-", "x1", ",", "x3", "-", "x2", ",", "x4", "-", "x3", ",", "x5", "-", "x4", "]", ",", "1", ")", ".", "view", "(", "-", "1", ",", "12", ",", "x2", ".", "size", "(", ")", "[", "2", "]", ",", "x2", ".", "size", "(", ")", "[", "3", "]", ")", ")", ")", "\n", "x_diff", "=", "self", ".", "maxpool_diff", "(", "1.0", "/", "1.0", "*", "x_c5", ")", "\n", "\n", "temp_out_diff1", "=", "x_diff", "\n", "x_diff", "=", "self", ".", "resnext_layer1", "(", "x_diff", ")", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x3", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "#fusion layer1", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "temp_out_diff1", "=", "F", ".", "interpolate", "(", "temp_out_diff1", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "x", "=", "self", ".", "apha", "*", "x", "+", "self", ".", "belta", "*", "temp_out_diff1", "\n", "#fusion layer2", "\n", "x", "=", "self", ".", "layer1_bak", "(", "x", ")", "\n", "x_diff", "=", "F", ".", "interpolate", "(", "x_diff", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "x", "=", "self", ".", "apha", "*", "x", "+", "self", ".", "belta", "*", "x_diff", "\n", "\n", "x", "=", "self", ".", "layer2_bak", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3_bak", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4_bak", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.tdn_net_gc.tdn_net": [[71, 84], ["fbresnet50", "fbresnet50", "fbresnet101", "fbresnet101", "tdn_net_gc.TDN_Net", "tdn_net_gc.TDN_Net"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.fbresnet50", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.fbresnet50", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.fbresnet101", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.fbresnet101"], ["", "", "def", "tdn_net", "(", "base_model", "=", "None", ",", "num_segments", "=", "8", ",", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "(", "\"50\"", "in", "base_model", ")", ":", "\n", "        ", "resnet_model", "=", "fbresnet50", "(", "num_segments", ",", "pretrained", ")", "\n", "resnet_model1", "=", "fbresnet50", "(", "num_segments", ",", "pretrained", ")", "\n", "", "else", ":", "\n", "        ", "resnet_model", "=", "fbresnet101", "(", "num_segments", ",", "pretrained", ")", "\n", "resnet_model1", "=", "fbresnet101", "(", "num_segments", ",", "pretrained", ")", "\n", "\n", "", "if", "(", "num_segments", "is", "8", ")", ":", "\n", "        ", "model", "=", "TDN_Net", "(", "resnet_model", ",", "resnet_model1", ",", "apha", "=", "0.5", ",", "belta", "=", "0.5", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "TDN_Net", "(", "resnet_model", ",", "resnet_model1", ",", "apha", "=", "0.75", ",", "belta", "=", "0.25", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.__init__": [[18, 26], ["torch.optim.lr_scheduler._LRScheduler.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "multiplier", ",", "warmup_epoch", ",", "after_scheduler", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "multiplier", "=", "multiplier", "\n", "if", "self", ".", "multiplier", "<=", "1.", ":", "\n", "            ", "raise", "ValueError", "(", "'multiplier should be greater than 1.'", ")", "\n", "", "self", ".", "warmup_epoch", "=", "warmup_epoch", "\n", "self", ".", "after_scheduler", "=", "after_scheduler", "\n", "self", ".", "finished", "=", "False", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.get_lr": [[27, 33], ["lr_scheduler.GradualWarmupScheduler.after_scheduler.get_lr"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.get_lr"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", ">", "self", ".", "warmup_epoch", ":", "\n", "            ", "return", "self", ".", "after_scheduler", ".", "get_lr", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "base_lr", "/", "self", ".", "multiplier", "*", "(", "(", "self", ".", "multiplier", "-", "1.", ")", "*", "self", ".", "last_epoch", "/", "self", ".", "warmup_epoch", "+", "1.", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.step": [[34, 42], ["lr_scheduler.GradualWarmupScheduler.after_scheduler.step", "super().step"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.step"], ["", "", "def", "step", "(", "self", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "", "self", ".", "last_epoch", "=", "epoch", "\n", "if", "epoch", ">", "self", ".", "warmup_epoch", ":", "\n", "            ", "self", ".", "after_scheduler", ".", "step", "(", "epoch", "-", "self", ".", "warmup_epoch", ")", "\n", "", "else", ":", "\n", "            ", "super", "(", "GradualWarmupScheduler", ",", "self", ")", ".", "step", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict": [[43, 53], ["lr_scheduler.GradualWarmupScheduler.after_scheduler.state_dict", "lr_scheduler.GradualWarmupScheduler.__dict__.items"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict"], ["", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the state of the scheduler as a :class:`dict`.\n\n        It contains an entry for every variable in self.__dict__ which\n        is not the optimizer.\n        \"\"\"", "\n", "\n", "state", "=", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "key", "!=", "'optimizer'", "and", "key", "!=", "'after_scheduler'", "}", "\n", "state", "[", "'after_scheduler'", "]", "=", "self", ".", "after_scheduler", ".", "state_dict", "(", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict": [[54, 65], ["state_dict.pop", "lr_scheduler.GradualWarmupScheduler.__dict__.update", "lr_scheduler.GradualWarmupScheduler.after_scheduler.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Loads the schedulers state.\n\n        Arguments:\n            state_dict (dict): scheduler state. Should be an object returned\n                from a call to :meth:`state_dict`.\n        \"\"\"", "\n", "\n", "after_scheduler_state", "=", "state_dict", ".", "pop", "(", "'after_scheduler'", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "self", ".", "after_scheduler", ".", "load_state_dict", "(", "after_scheduler_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.get_scheduler": [[67, 90], ["torch.optim.lr_scheduler.CosineAnnealingLR", "lr_scheduler.GradualWarmupScheduler", "torch.optim.lr_scheduler.MultiStepLR", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_scheduler", "(", "optimizer", ",", "n_iter_per_epoch", ",", "args", ")", ":", "\n", "    ", "if", "\"cosine\"", "in", "args", ".", "lr_scheduler", ":", "\n", "        ", "scheduler", "=", "CosineAnnealingLR", "(", "\n", "optimizer", "=", "optimizer", ",", "\n", "eta_min", "=", "0.00001", ",", "\n", "T_max", "=", "(", "args", ".", "epochs", "-", "args", ".", "warmup_epoch", ")", "*", "n_iter_per_epoch", ")", "\n", "", "elif", "\"step\"", "in", "args", ".", "lr_scheduler", ":", "\n", "        ", "scheduler", "=", "MultiStepLR", "(", "\n", "optimizer", "=", "optimizer", ",", "\n", "gamma", "=", "args", ".", "lr_decay_rate", ",", "\n", "milestones", "=", "[", "(", "m", "-", "args", ".", "warmup_epoch", ")", "*", "n_iter_per_epoch", "for", "m", "in", "args", ".", "lr_steps", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"scheduler {args.lr_scheduler} not supported\"", ")", "\n", "\n", "\n", "", "if", "args", ".", "warmup_epoch", "!=", "0", ":", "\n", "        ", "scheduler", "=", "GradualWarmupScheduler", "(", "\n", "optimizer", ",", "\n", "multiplier", "=", "args", ".", "warmup_multiplier", ",", "\n", "after_scheduler", "=", "scheduler", ",", "\n", "warmup_epoch", "=", "args", ".", "warmup_epoch", "*", "n_iter_per_epoch", ")", "\n", "\n", "", "return", "scheduler", "", "", ""]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.basic_ops.Identity.forward": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.basic_ops.SegmentConsensus.__init__": [[13, 18], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "consensus_type", ",", "dim", "=", "1", ")", ":", "\n", "        ", "super", "(", "SegmentConsensus", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "consensus_type", "=", "consensus_type", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "shape", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.basic_ops.SegmentConsensus.forward": [[19, 29], ["input_tensor.size", "input_tensor.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "self", ".", "shape", "=", "input_tensor", ".", "size", "(", ")", "\n", "if", "self", ".", "consensus_type", "==", "'avg'", ":", "\n", "            ", "output", "=", "input_tensor", ".", "mean", "(", "dim", "=", "self", ".", "dim", ",", "keepdim", "=", "True", ")", "\n", "", "elif", "self", ".", "consensus_type", "==", "'identity'", ":", "\n", "            ", "output", "=", "input_tensor", "\n", "", "else", ":", "\n", "            ", "output", "=", "None", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.basic_ops.ConsensusModule.__init__": [[33, 37], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "consensus_type", ",", "dim", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConsensusModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "consensus_type", "=", "consensus_type", "if", "consensus_type", "!=", "'rnn'", "else", "'identity'", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.basic_ops.ConsensusModule.forward": [[38, 40], ["basic_ops.SegmentConsensus"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "SegmentConsensus", "(", "self", ".", "consensus_type", ",", "self", ".", "dim", ")", "(", "input", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.utils.AverageMeter.__init__": [[50, 52], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.utils.AverageMeter.reset": [[53, 58], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.utils.AverageMeter.update": [[59, 64], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.utils.softmax": [[11, 14], ["numpy.exp", "np.exp.sum", "scores.max"], "function", ["None"], ["def", "softmax", "(", "scores", ")", ":", "\n", "    ", "es", "=", "np", ".", "exp", "(", "scores", "-", "scores", ".", "max", "(", "axis", "=", "-", "1", ")", "[", "...", ",", "None", "]", ")", "\n", "return", "es", "/", "es", ".", "sum", "(", "axis", "=", "-", "1", ")", "[", "...", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.utils.get_grad_hook": [[16, 26], ["print", "print", "print", "print", "print", "grad_out[].size", "grad_in[].size", "grad_out[].data.abs().mean", "grad_in[].data.abs().mean", "grad_out[].data.abs", "grad_in[].data.abs"], "function", ["None"], ["", "def", "get_grad_hook", "(", "name", ")", ":", "\n", "    ", "def", "hook", "(", "m", ",", "grad_in", ",", "grad_out", ")", ":", "\n", "        ", "print", "(", "(", "name", ",", "grad_out", "[", "0", "]", ".", "data", ".", "abs", "(", ")", ".", "mean", "(", ")", ",", "\n", "grad_in", "[", "0", "]", ".", "data", ".", "abs", "(", ")", ".", "mean", "(", ")", ")", ")", "\n", "print", "(", "(", "grad_out", "[", "0", "]", ".", "size", "(", ")", ")", ")", "\n", "print", "(", "(", "grad_in", "[", "0", "]", ".", "size", "(", ")", ")", ")", "\n", "print", "(", "(", "grad_out", "[", "0", "]", ")", ")", "\n", "print", "(", "(", "grad_in", "[", "0", "]", ")", ")", "\n", "\n", "", "return", "hook", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.utils.log_add": [[28, 30], ["numpy.log", "numpy.exp"], "function", ["None"], ["", "def", "log_add", "(", "log_a", ",", "log_b", ")", ":", "\n", "    ", "return", "log_a", "+", "np", ".", "log", "(", "1", "+", "np", ".", "exp", "(", "log_b", "-", "log_a", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.utils.class_accuracy": [[32, 39], ["sklearn.metrics.confusion_matrix", "sklearn.metrics.confusion_matrix.sum", "numpy.diag", "cls_acc.mean", "cf.sum.astype"], "function", ["None"], ["", "def", "class_accuracy", "(", "prediction", ",", "label", ")", ":", "\n", "    ", "cf", "=", "confusion_matrix", "(", "prediction", ",", "label", ")", "\n", "cls_cnt", "=", "cf", ".", "sum", "(", "axis", "=", "1", ")", "\n", "cls_hit", "=", "np", ".", "diag", "(", "cf", ")", "\n", "cls_acc", "=", "cls_hit", "/", "cls_cnt", ".", "astype", "(", "float", ")", "\n", "mean_cls_acc", "=", "cls_acc", ".", "mean", "(", ")", "\n", "return", "cls_acc", ",", "mean_cls_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.utils.reduce_tensor": [[41, 46], ["tensor.clone", "torch.all_reduce", "torch.get_world_size"], "function", ["None"], ["", "def", "reduce_tensor", "(", "tensor", ")", ":", "\n", "    ", "rt", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "rt", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "rt", "/=", "dist", ".", "get_world_size", "(", ")", "\n", "return", "rt", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.utils.accuracy": [[66, 79], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.reshape().expand_as", "correct[].reshape().float().sum", "res.append", "correct[].reshape().float().sum.mul_", "target.reshape", "correct[].reshape().float", "correct[].reshape"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "", ""]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.tdn_net_org.TDN_Net.__init__": [[16, 44], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "params[].size", "params[].data.mean().expand().contiguous", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "list", "list", "list", "x.clone", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "list", "resnet_model.children", "resnet_model.children", "resnet_model1.children", "tdn_net_org.TDN_Net.conv1_temp.parameters", "params[].data.mean().expand", "resnet_model.children", "list", "list", "list", "list", "list", "params[].data.mean", "resnet_model1.children", "resnet_model.children", "resnet_model.children", "resnet_model.children", "resnet_model.children"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "resnet_model", ",", "resnet_model1", ",", "apha", ",", "belta", ")", ":", "\n", "        ", "super", "(", "TDN_Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "list", "(", "resnet_model", ".", "children", "(", ")", ")", "[", "0", "]", "\n", "self", ".", "bn1", "=", "list", "(", "resnet_model", ".", "children", "(", ")", ")", "[", "1", "]", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# implement conv1_5 and inflate weight ", "\n", "self", ".", "conv1_temp", "=", "list", "(", "resnet_model1", ".", "children", "(", ")", ")", "[", "0", "]", "\n", "params", "=", "[", "x", ".", "clone", "(", ")", "for", "x", "in", "self", ".", "conv1_temp", ".", "parameters", "(", ")", "]", "\n", "kernel_size", "=", "params", "[", "0", "]", ".", "size", "(", ")", "\n", "new_kernel_size", "=", "kernel_size", "[", ":", "1", "]", "+", "(", "3", "*", "4", ",", ")", "+", "kernel_size", "[", "2", ":", "]", "\n", "new_kernels", "=", "params", "[", "0", "]", ".", "data", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "new_kernel_size", ")", ".", "contiguous", "(", ")", "\n", "self", ".", "conv1_5", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "12", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv1_5", "[", "0", "]", ".", "weight", ".", "data", "=", "new_kernels", "\n", "\n", "self", ".", "maxpool_diff", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "ceil_mode", "=", "False", ")", "\n", "self", ".", "resnext_layer1", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet_model1", ".", "children", "(", ")", ")", "[", "4", "]", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "ceil_mode", "=", "False", ")", "\n", "self", ".", "layer1_bak", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet_model", ".", "children", "(", ")", ")", "[", "4", "]", ")", "\n", "self", ".", "layer2_bak", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet_model", ".", "children", "(", ")", ")", "[", "5", "]", ")", "\n", "self", ".", "layer3_bak", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet_model", ".", "children", "(", ")", ")", "[", "6", "]", ")", "\n", "self", ".", "layer4_bak", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet_model", ".", "children", "(", ")", ")", "[", "7", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "avg_diff", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "fc", "=", "list", "(", "resnet_model", ".", "children", "(", ")", ")", "[", "8", "]", "\n", "self", ".", "apha", "=", "apha", "\n", "self", ".", "belta", "=", "belta", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.tdn_net_org.TDN_Net.forward": [[45, 75], ["tdn_net_org.TDN_Net.conv1_5", "tdn_net_org.TDN_Net.maxpool_diff", "tdn_net_org.TDN_Net.resnext_layer1", "tdn_net_org.TDN_Net.conv1", "tdn_net_org.TDN_Net.bn1", "tdn_net_org.TDN_Net.relu", "tdn_net_org.TDN_Net.maxpool", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "tdn_net_org.TDN_Net.layer1_bak", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "tdn_net_org.TDN_Net.layer2_bak", "tdn_net_org.TDN_Net.layer3_bak", "tdn_net_org.TDN_Net.layer4_bak", "tdn_net_org.TDN_Net.avgpool", "tdn_net_org.TDN_Net.view", "tdn_net_org.TDN_Net.fc", "tdn_net_org.TDN_Net.avg_diff", "tdn_net_org.TDN_Net.size", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "tdn_net_org.TDN_Net.size", "tdn_net_org.TDN_Net.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x2.size", "x2.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", ",", "x2", ",", "x3", ",", "x4", ",", "x5", "=", "x", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "3", ":", "6", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "6", ":", "9", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "9", ":", "12", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "12", ":", "15", ",", ":", ",", ":", "]", "\n", "x_c5", "=", "self", ".", "conv1_5", "(", "self", ".", "avg_diff", "(", "torch", ".", "cat", "(", "[", "x2", "-", "x1", ",", "x3", "-", "x2", ",", "x4", "-", "x3", ",", "x5", "-", "x4", "]", ",", "1", ")", ".", "view", "(", "-", "1", ",", "12", ",", "x2", ".", "size", "(", ")", "[", "2", "]", ",", "x2", ".", "size", "(", ")", "[", "3", "]", ")", ")", ")", "\n", "x_diff", "=", "self", ".", "maxpool_diff", "(", "1.0", "/", "1.0", "*", "x_c5", ")", "\n", "\n", "temp_out_diff1", "=", "x_diff", "\n", "x_diff", "=", "self", ".", "resnext_layer1", "(", "x_diff", ")", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x3", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "#fusion layer1", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "temp_out_diff1", "=", "F", ".", "interpolate", "(", "temp_out_diff1", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "x", "=", "self", ".", "apha", "*", "x", "+", "self", ".", "belta", "*", "temp_out_diff1", "\n", "#fusion layer2", "\n", "x", "=", "self", ".", "layer1_bak", "(", "x", ")", "\n", "x_diff", "=", "F", ".", "interpolate", "(", "x_diff", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "x", "=", "self", ".", "apha", "*", "x", "+", "self", ".", "belta", "*", "x_diff", "\n", "\n", "x", "=", "self", ".", "layer2_bak", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3_bak", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4_bak", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.tdn_net_org.tdn_net": [[76, 89], ["fbresnet50", "fbresnet50", "fbresnet101", "fbresnet101", "tdn_net_org.TDN_Net", "tdn_net_org.TDN_Net"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.fbresnet50", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.fbresnet50", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.fbresnet101", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.base_module_org.fbresnet101"], ["", "", "def", "tdn_net", "(", "base_model", "=", "None", ",", "num_segments", "=", "8", ",", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "(", "\"50\"", "in", "base_model", ")", ":", "\n", "        ", "resnet_model", "=", "fbresnet50", "(", "num_segments", ",", "pretrained", ")", "\n", "resnet_model1", "=", "fbresnet50", "(", "num_segments", ",", "pretrained", ")", "\n", "", "else", ":", "\n", "        ", "resnet_model", "=", "fbresnet101", "(", "num_segments", ",", "pretrained", ")", "\n", "resnet_model1", "=", "fbresnet101", "(", "num_segments", ",", "pretrained", ")", "\n", "\n", "", "if", "(", "num_segments", "is", "8", ")", ":", "\n", "        ", "model", "=", "TDN_Net", "(", "resnet_model", ",", "resnet_model1", ",", "apha", "=", "0.5", ",", "belta", "=", "0.5", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "TDN_Net", "(", "resnet_model", ",", "resnet_model1", ",", "apha", "=", "0.75", ",", "belta", "=", "0.25", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupRandomCrop.__init__": [[11, 16], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupRandomCrop.__call__": [[17, 37], ["list", "random.randint", "random.randint", "list.append", "list.append", "img.crop"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "img_group", ",", "label", "=", "img", "\n", "w", ",", "h", "=", "img_group", "[", "0", "]", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "\n", "out_images", "=", "list", "(", ")", "\n", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "\n", "for", "img", "in", "img_group", ":", "\n", "            ", "assert", "(", "img", ".", "size", "[", "0", "]", "==", "w", "and", "img", ".", "size", "[", "1", "]", "==", "h", ")", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "                ", "out_images", ".", "append", "(", "img", ")", "\n", "", "else", ":", "\n", "                ", "out_images", ".", "append", "(", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ")", "\n", "\n", "", "", "return", "out_images", ",", "label", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupCenterCrop.__init__": [[40, 42], ["torchvision.transforms.CenterCrop"], "methods", ["None"], ["        ", "self", ".", "worker", "=", "torchvision", ".", "transforms", ".", "CenterCrop", "(", "size", ")", "\n", "\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupCenterCrop.__call__": [[43, 46], ["transforms.GroupCenterCrop.worker"], "methods", ["None"], ["        ", "img_group", ",", "label", "=", "img", "\n", "return", "[", "self", ".", "worker", "(", "img", ")", "for", "img", "in", "img_group", "]", ",", "label", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupRandomHorizontalFlip.__init__": [[51, 53], ["None"], "methods", ["None"], ["        ", "self", ".", "is_flow", "=", "is_flow", "\n", "\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupRandomHorizontalFlip.__call__": [[54, 65], ["random.random", "img.transpose", "range", "len", "PIL.ImageOps.invert"], "methods", ["None"], ["        ", "img_group", ",", "label", "=", "img", "\n", "v", "=", "random", ".", "random", "(", ")", "\n", "if", "v", "<", "0.5", ":", "\n", "            ", "ret", "=", "[", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "for", "img", "in", "img_group", "]", "\n", "if", "self", ".", "is_flow", ":", "\n", "                ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "ret", ")", ",", "2", ")", ":", "\n", "                    ", "ret", "[", "i", "]", "=", "ImageOps", ".", "invert", "(", "ret", "[", "i", "]", ")", "# invert flow pixel values when flipping", "\n", "", "", "return", "ret", ",", "label", "\n", "", "else", ":", "\n", "            ", "return", "img_group", ",", "label", "\n", "\n", "", "", "", "class", "GroupRandomHorizontalFlip_sth", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupRandomHorizontalFlip2.__init__": [[69, 71], ["None"], "methods", ["None"], ["\t\t", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupRandomHorizontalFlip2.__call__": [[72, 83], ["random.random", "img.transpose"], "methods", ["None"], ["\t\t", "img_group", ",", "label", "=", "img", "\n", "v", "=", "random", ".", "random", "(", ")", "\n", "if", "v", "<", "0.5", ":", "\n", "\t\t\t", "ret", "=", "[", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "for", "img", "in", "img_group", "]", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "\t\t\t\t", "if", "label", "in", "self", ".", "target_transform", ":", "\n", "\t\t\t\t\t", "label", "=", "self", ".", "target_transform", "[", "label", "]", "\n", "", "", "return", "ret", ",", "label", "\n", "", "else", ":", "\n", "\t\t\t", "return", "img_group", ",", "label", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupNormalize.__init__": [[86, 89], ["None"], "methods", ["None"], ["        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n", "", "def", "__call__", "(", "self", ",", "Te", ")", ":", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupNormalize.__call__": [[90, 100], ["zip", "t.sub_().div_", "len", "len", "tensor.size", "tensor.size", "t.sub_"], "methods", ["None"], ["        ", "tensor", ",", "label", "=", "Te", "\n", "rep_mean", "=", "self", ".", "mean", "*", "(", "tensor", ".", "size", "(", ")", "[", "0", "]", "//", "len", "(", "self", ".", "mean", ")", ")", "\n", "rep_std", "=", "self", ".", "std", "*", "(", "tensor", ".", "size", "(", ")", "[", "0", "]", "//", "len", "(", "self", ".", "std", ")", ")", "\n", "\n", "# TODO: make efficient", "\n", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "rep_mean", ",", "rep_std", ")", ":", "\n", "            ", "t", ".", "sub_", "(", "m", ")", ".", "div_", "(", "s", ")", "\n", "\n", "", "return", "tensor", ",", "label", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupScale2.__init__": [[111, 113], ["torchvision.transforms.Resize"], "methods", ["None"], ["        ", "self", ".", "worker", "=", "torchvision", ".", "transforms", ".", "Resize", "(", "size", ",", "interpolation", ")", "\n", "\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupScale2.__call__": [[114, 117], ["transforms.GroupScale2.worker"], "methods", ["None"], ["        ", "img_group", ",", "label", "=", "img", "\n", "return", "[", "self", ".", "worker", "(", "img", ")", "for", "img", "in", "img_group", "]", ",", "label", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupScale.__init__": [[127, 129], ["torchvision.transforms.Resize"], "methods", ["None"], ["\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img_group", ",", "label", "=", "img", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupScale.__call__": [[130, 133], ["transforms.GroupScale.worker"], "methods", ["None"], ["if", "self", ".", "scale_worker", "is", "not", "None", ":", "\n", "            ", "img_group", ",", "label", "=", "self", ".", "scale_worker", "(", "img", ")", "\n", "\n", "", "image_w", ",", "image_h", "=", "img_group", "[", "0", "]", ".", "size", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupOverSample.__init__": [[136, 144], ["transforms.GroupScale2", "isinstance"], "methods", ["None"], ["offsets", "=", "GroupMultiScaleCrop", ".", "fill_fix_offset", "(", "False", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", "\n", "oversample_group", "=", "list", "(", ")", "\n", "for", "o_w", ",", "o_h", "in", "offsets", ":", "\n", "            ", "normal_group", "=", "list", "(", ")", "\n", "flip_group", "=", "list", "(", ")", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "img_group", ")", ":", "\n", "                ", "crop", "=", "img", ".", "crop", "(", "(", "o_w", ",", "o_h", ",", "o_w", "+", "crop_w", ",", "o_h", "+", "crop_h", ")", ")", "\n", "normal_group", ".", "append", "(", "crop", ")", "\n", "flip_crop", "=", "crop", ".", "copy", "(", ")", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupOverSample.__call__": [[145, 174], ["transforms.GroupMultiScaleCrop.fill_fix_offset", "list", "transforms.GroupOverSample.scale_worker", "list", "list", "enumerate", "list.extend", "img.crop", "list.append", "img.crop.copy().transpose", "list.extend", "list.append", "list.append", "img.crop.copy", "PIL.ImageOps.invert"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupMultiScaleCrop.fill_fix_offset"], ["\n", "if", "img", ".", "mode", "==", "'L'", "and", "i", "%", "2", "==", "0", ":", "\n", "                    ", "flip_group", ".", "append", "(", "ImageOps", ".", "invert", "(", "flip_crop", ")", ")", "\n", "", "else", ":", "\n", "                    ", "flip_group", ".", "append", "(", "flip_crop", ")", "\n", "\n", "", "", "oversample_group", ".", "extend", "(", "normal_group", ")", "\n", "if", "self", ".", "flip", ":", "\n", "                ", "oversample_group", ".", "extend", "(", "flip_group", ")", "\n", "", "", "return", "oversample_group", ",", "label", "\n", "\n", "\n", "", "", "class", "GroupFullResSample", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "crop_size", ",", "scale_size", "=", "None", ",", "flip", "=", "True", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "if", "not", "isinstance", "(", "crop_size", ",", "int", ")", "else", "(", "crop_size", ",", "crop_size", ")", "\n", "\n", "if", "scale_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "scale_worker", "=", "GroupScale", "(", "scale_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale_worker", "=", "None", "\n", "", "self", ".", "flip", "=", "flip", "\n", "\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img_group", ",", "label", "=", "img", "\n", "if", "self", ".", "scale_worker", "is", "not", "None", ":", "\n", "            ", "img_group", ",", "label", "=", "self", ".", "scale_worker", "(", "img", ")", "\n", "\n", "", "image_w", ",", "image_h", "=", "img_group", "[", "0", "]", ".", "size", "\n", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupFullResSample.__init__": [[177, 185], ["transforms.GroupScale2", "isinstance"], "methods", ["None"], ["\n", "offsets", "=", "list", "(", ")", "\n", "offsets", ".", "append", "(", "(", "0", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# left", "\n", "offsets", ".", "append", "(", "(", "4", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# right", "\n", "offsets", ".", "append", "(", "(", "2", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center", "\n", "\n", "oversample_group", "=", "list", "(", ")", "\n", "for", "o_w", ",", "o_h", "in", "offsets", ":", "\n", "            ", "normal_group", "=", "list", "(", ")", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupFullResSample.__call__": [[186, 221], ["list", "list.append", "list.append", "list.append", "list", "transforms.GroupFullResSample.scale_worker", "list", "list", "enumerate", "list.extend", "list.extend", "img.crop", "list.append", "img.crop.copy().transpose", "list.append", "list.append", "img.crop.copy", "PIL.ImageOps.invert"], "methods", ["None"], ["flip_group", "=", "list", "(", ")", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "img_group", ")", ":", "\n", "                ", "crop", "=", "img", ".", "crop", "(", "(", "o_w", ",", "o_h", ",", "o_w", "+", "crop_w", ",", "o_h", "+", "crop_h", ")", ")", "\n", "normal_group", ".", "append", "(", "crop", ")", "\n", "if", "self", ".", "flip", ":", "\n", "                    ", "flip_crop", "=", "crop", ".", "copy", "(", ")", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "if", "img", ".", "mode", "==", "'L'", "and", "i", "%", "2", "==", "0", ":", "\n", "                        ", "flip_group", ".", "append", "(", "ImageOps", ".", "invert", "(", "flip_crop", ")", ")", "\n", "", "else", ":", "\n", "                        ", "flip_group", ".", "append", "(", "flip_crop", ")", "\n", "\n", "", "", "", "oversample_group", ".", "extend", "(", "normal_group", ")", "\n", "oversample_group", ".", "extend", "(", "flip_group", ")", "\n", "", "return", "oversample_group", ",", "label", "\n", "\n", "\n", "", "", "class", "GroupMultiScaleCrop", "(", "object", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "input_size", ",", "scales", "=", "None", ",", "max_distort", "=", "1", ",", "fix_crop", "=", "True", ",", "more_fix_crop", "=", "True", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "if", "scales", "is", "not", "None", "else", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", "\n", "self", ".", "max_distort", "=", "max_distort", "\n", "self", ".", "fix_crop", "=", "fix_crop", "\n", "self", ".", "more_fix_crop", "=", "more_fix_crop", "\n", "self", ".", "input_size", "=", "input_size", "if", "not", "isinstance", "(", "input_size", ",", "int", ")", "else", "[", "input_size", ",", "input_size", "]", "\n", "self", ".", "interpolation", "=", "Image", ".", "BILINEAR", "\n", "\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img_group", ",", "label", "=", "img", "\n", "im_size", "=", "img_group", "[", "0", "]", ".", "size", "\n", "\n", "crop_w", ",", "crop_h", ",", "offset_w", ",", "offset_h", "=", "self", ".", "_sample_crop_size", "(", "im_size", ")", "\n", "crop_img_group", "=", "[", "img", ".", "crop", "(", "(", "offset_w", ",", "offset_h", ",", "offset_w", "+", "crop_w", ",", "offset_h", "+", "crop_h", ")", ")", "for", "img", "in", "img_group", "]", "\n", "ret_img_group", "=", "[", "img", ".", "resize", "(", "(", "self", ".", "input_size", "[", "0", "]", ",", "self", ".", "input_size", "[", "1", "]", ")", ",", "self", ".", "interpolation", ")", "\n", "for", "img", "in", "crop_img_group", "]", "\n", "return", "ret_img_group", ",", "label", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupMultiScaleCrop.__init__": [[225, 232], ["isinstance"], "methods", ["None"], ["\n", "# find a crop size", "\n", "base_size", "=", "min", "(", "image_w", ",", "image_h", ")", "\n", "crop_sizes", "=", "[", "int", "(", "base_size", "*", "x", ")", "for", "x", "in", "self", ".", "scales", "]", "\n", "crop_h", "=", "[", "self", ".", "input_size", "[", "1", "]", "if", "abs", "(", "x", "-", "self", ".", "input_size", "[", "1", "]", ")", "<", "3", "else", "x", "for", "x", "in", "crop_sizes", "]", "\n", "crop_w", "=", "[", "self", ".", "input_size", "[", "0", "]", "if", "abs", "(", "x", "-", "self", ".", "input_size", "[", "0", "]", ")", "<", "3", "else", "x", "for", "x", "in", "crop_sizes", "]", "\n", "\n", "pairs", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupMultiScaleCrop.__call__": [[233, 243], ["transforms.GroupMultiScaleCrop._sample_crop_size", "img.crop", "img.resize"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupMultiScaleCrop._sample_crop_size"], ["for", "i", ",", "h", "in", "enumerate", "(", "crop_h", ")", ":", "\n", "            ", "for", "j", ",", "w", "in", "enumerate", "(", "crop_w", ")", ":", "\n", "                ", "if", "abs", "(", "i", "-", "j", ")", "<=", "self", ".", "max_distort", ":", "\n", "                    ", "pairs", ".", "append", "(", "(", "w", ",", "h", ")", ")", "\n", "\n", "", "", "", "crop_pair", "=", "random", ".", "choice", "(", "pairs", ")", "\n", "if", "not", "self", ".", "fix_crop", ":", "\n", "            ", "w_offset", "=", "random", ".", "randint", "(", "0", ",", "image_w", "-", "crop_pair", "[", "0", "]", ")", "\n", "h_offset", "=", "random", ".", "randint", "(", "0", ",", "image_h", "-", "crop_pair", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "w_offset", ",", "h_offset", "=", "self", ".", "_sample_fix_offset", "(", "image_w", ",", "image_h", ",", "crop_pair", "[", "0", "]", ",", "crop_pair", "[", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupMultiScaleCrop._sample_crop_size": [[244, 267], ["min", "enumerate", "random.choice", "int", "enumerate", "random.randint", "random.randint", "transforms.GroupMultiScaleCrop._sample_fix_offset", "abs", "abs", "abs", "pairs.append"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupMultiScaleCrop._sample_fix_offset"], ["\n", "", "return", "crop_pair", "[", "0", "]", ",", "crop_pair", "[", "1", "]", ",", "w_offset", ",", "h_offset", "\n", "\n", "", "def", "_sample_fix_offset", "(", "self", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", ":", "\n", "        ", "offsets", "=", "self", ".", "fill_fix_offset", "(", "self", ".", "more_fix_crop", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", "\n", "return", "random", ".", "choice", "(", "offsets", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "fill_fix_offset", "(", "more_fix_crop", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", ":", "\n", "        ", "w_step", "=", "(", "image_w", "-", "crop_w", ")", "//", "4", "\n", "h_step", "=", "(", "image_h", "-", "crop_h", ")", "//", "4", "\n", "\n", "ret", "=", "list", "(", ")", "\n", "ret", ".", "append", "(", "(", "0", ",", "0", ")", ")", "# upper left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "0", ")", ")", "# upper right", "\n", "ret", ".", "append", "(", "(", "0", ",", "4", "*", "h_step", ")", ")", "# lower left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "4", "*", "h_step", ")", ")", "# lower right", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center", "\n", "\n", "if", "more_fix_crop", ":", "\n", "            ", "ret", ".", "append", "(", "(", "0", ",", "2", "*", "h_step", ")", ")", "# center left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center right", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "4", "*", "h_step", ")", ")", "# lower center", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "0", "*", "h_step", ")", ")", "# upper center", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupMultiScaleCrop._sample_fix_offset": [[268, 271], ["transforms.GroupMultiScaleCrop.fill_fix_offset", "random.choice"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupMultiScaleCrop.fill_fix_offset"], ["\n", "ret", ".", "append", "(", "(", "1", "*", "w_step", ",", "1", "*", "h_step", ")", ")", "# upper left quarter", "\n", "ret", ".", "append", "(", "(", "3", "*", "w_step", ",", "1", "*", "h_step", ")", ")", "# upper right quarter", "\n", "ret", ".", "append", "(", "(", "1", "*", "w_step", ",", "3", "*", "h_step", ")", ")", "# lower left quarter", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupMultiScaleCrop.fill_fix_offset": [[272, 296], ["list", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append"], "methods", ["None"], ["ret", ".", "append", "(", "(", "3", "*", "w_step", ",", "3", "*", "h_step", ")", ")", "# lower righ quarter", "\n", "\n", "", "return", "ret", "\n", "\n", "\n", "", "", "class", "GroupRandomSizedCrop", "(", "object", ")", ":", "\n", "    ", "\"\"\"Random crop the given PIL.Image to a random size of (0.08 to 1.0) of the original size\n    and and a random aspect ratio of 3/4 to 4/3 of the original aspect ratio\n    This is popularly used to train the Inception networks\n    size: size of the smaller edge\n    interpolation: Default: PIL.Image.BILINEAR\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img_group", ",", "label", "=", "img", "\n", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img_group", "[", "0", "]", ".", "size", "[", "0", "]", "*", "img_group", "[", "0", "]", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "0.08", ",", "1.0", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "3.", "/", "4", ",", "4.", "/", "3", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupRandomSizedCrop.__init__": [[305, 308], ["None"], "methods", ["None"], ["break", "\n", "", "", "else", ":", "\n", "            ", "found", "=", "False", "\n", "x1", "=", "0", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.GroupRandomSizedCrop.__call__": [[309, 344], ["range", "random.uniform", "int", "int", "list", "transforms.GroupScale", "transforms.GroupRandomCrop", "GroupRandomCrop.", "random.uniform", "round", "round", "random.random", "random.randint", "random.randint", "img.crop.crop.crop", "list.append", "GroupScale.", "math.sqrt", "math.sqrt", "img.crop.crop.resize"], "methods", ["None"], ["y1", "=", "0", "\n", "\n", "", "if", "found", ":", "\n", "            ", "out_group", "=", "list", "(", ")", "\n", "for", "img", "in", "img_group", ":", "\n", "                ", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "assert", "(", "img", ".", "size", "==", "(", "w", ",", "h", ")", ")", "\n", "out_group", ".", "append", "(", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", ")", "\n", "", "return", "out_group", ",", "label", "\n", "", "else", ":", "\n", "# Fallback", "\n", "            ", "scale", "=", "GroupScale", "(", "self", ".", "size", ",", "interpolation", "=", "self", ".", "interpolation", ")", "\n", "crop", "=", "GroupRandomCrop", "(", "self", ".", "size", ")", "\n", "return", "crop", "(", "scale", "(", "img_group", ",", "label", ")", ")", "\n", "\n", "\n", "", "", "", "class", "Stack", "(", "object", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "roll", "=", "False", ")", ":", "\n", "        ", "self", ".", "roll", "=", "roll", "\n", "\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img_group", ",", "label", "=", "img", "\n", "if", "img_group", "[", "0", "]", ".", "mode", "==", "'L'", ":", "\n", "            ", "return", "np", ".", "concatenate", "(", "[", "np", ".", "expand_dims", "(", "x", ",", "2", ")", "for", "x", "in", "img_group", "]", ",", "axis", "=", "2", ")", ",", "label", "\n", "", "elif", "img_group", "[", "0", "]", ".", "mode", "==", "'RGB'", ":", "\n", "            ", "if", "self", ".", "roll", ":", "\n", "                ", "return", "np", ".", "concatenate", "(", "[", "np", ".", "array", "(", "x", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "for", "x", "in", "img_group", "]", ",", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "                ", "return", "np", ".", "concatenate", "(", "img_group", ",", "axis", "=", "2", ")", ",", "label", "\n", "\n", "\n", "", "", "", "", "class", "ToTorchFormatTensor", "(", "object", ")", ":", "\n", "    ", "\"\"\" Converts a PIL.Image (RGB) or numpy.ndarray (H x W x C) in the range [0, 255]\n    to a torch.FloatTensor of shape (C x H x W) in the range [0.0, 1.0] \"\"\"", "\n", "def", "__init__", "(", "self", ",", "div", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.Stack.__init__": [[348, 350], ["None"], "methods", ["None"], ["        ", "pic", ",", "label", "=", "pi", "\n", "if", "isinstance", "(", "pic", ",", "np", ".", "ndarray", ")", ":", "\n", "# handle numpy array", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.Stack.__call__": [[351, 360], ["numpy.concatenate", "numpy.concatenate", "numpy.expand_dims", "numpy.concatenate", "numpy.array"], "methods", ["None"], ["            ", "img", "=", "torch", ".", "from_numpy", "(", "pic", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "# handle PIL Image", "\n", "            ", "img", "=", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "pic", ".", "tobytes", "(", ")", ")", ")", "\n", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "len", "(", "pic", ".", "mode", ")", ")", "\n", "# put it from HWC to CHW format", "\n", "# yikes, this transpose takes 80% of the loading time/CPU", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "if", "self", ".", "div", "else", "img", ".", "float", "(", ")", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.ToTorchFormatTensor.__init__": [[365, 367], ["None"], "methods", ["None"], ["        ", "return", "data", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.ToTorchFormatTensor.__call__": [[368, 381], ["isinstance", "torch.from_numpy().permute().contiguous", "torch.ByteTensor", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.view", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose().contiguous", "torch.ByteStorage.from_buffer", "len", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float().div", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float", "torch.from_numpy().permute", "pic.tobytes", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float", "torch.from_numpy", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose"], "methods", ["None"], ["", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "trans", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "GroupScale", "(", "256", ")", ",", "\n", "GroupRandomCrop", "(", "224", ")", ",", "\n", "Stack", "(", ")", ",", "\n", "ToTorchFormatTensor", "(", ")", ",", "\n", "GroupNormalize", "(", "\n", "mean", "=", "[", ".485", ",", ".456", ",", ".406", "]", ",", "\n", "std", "=", "[", ".229", ",", ".224", ",", ".225", "]", "\n", ")", "]", "\n", ")", "\n", "\n", "im", "=", "Image", ".", "open", "(", "'../tensorflow-model-zoo.torch/lena_299.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.transforms.IdentityTransform.__call__": [[385, 387], ["None"], "methods", ["None"], ["gray_group", "=", "[", "im", ".", "convert", "(", "'L'", ")", "]", "*", "9", "\n", "gray_rst", "=", "trans", "(", "gray_group", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsm.VideoNet.__init__": [[11, 48], ["torch.Module.__init__", "models_tsm.VideoNet._prepare_base_model", "models_tsm.VideoNet._prepare_fc", "ops_tsntsmgst.basic_ops.ConsensusModule", "torch.Softmax", "models_tsm.VideoNet.partialBN"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet._prepare_base_model", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet._prepare_fc", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.partialBN"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ",", "num_segments", ",", "modality", ",", "\n", "backbone", "=", "'resnet50'", ",", "net", "=", "None", ",", "consensus_type", "=", "'avg'", ",", "\n", "dropout", "=", "0.5", ",", "partial_bn", "=", "True", ",", "print_spec", "=", "True", ",", "pretrain", "=", "'imagenet'", ",", "\n", "is_shift", "=", "False", ",", "shift_div", "=", "8", ",", "shift_place", "=", "'blockres'", ",", "ef_lr5", "=", "False", ",", "fc_lr5", "=", "False", ",", "\n", "temporal_pool", "=", "False", ",", "non_local", "=", "False", ",", "element_filter", "=", "False", ",", "stage", "=", "'S2B'", ",", "cdiv", "=", "2", ",", "\n", "loop", "=", "False", ",", "target_transforms", "=", "None", ")", ":", "\n", "        ", "super", "(", "VideoNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "modality", "=", "modality", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "pretrain", "=", "pretrain", "\n", "self", ".", "consensus_type", "=", "consensus_type", "\n", "self", ".", "init_crop_size", "=", "256", "\n", "\n", "self", ".", "is_shift", "=", "is_shift", "\n", "self", ".", "shift_div", "=", "shift_div", "\n", "self", ".", "shift_place", "=", "shift_place", "\n", "# self.backbone_name = backbone", "\n", "self", ".", "ef_lr5", "=", "ef_lr5", "\n", "self", ".", "fc_lr5", "=", "fc_lr5", "\n", "self", ".", "temporal_pool", "=", "temporal_pool", "\n", "self", ".", "non_local", "=", "non_local", "\n", "self", ".", "element_filter", "=", "element_filter", "\n", "self", ".", "stage", "=", "stage", "\n", "self", ".", "cdiv", "=", "cdiv", "\n", "self", ".", "loop", "=", "loop", "\n", "self", ".", "target_transforms", "=", "target_transforms", "\n", "\n", "self", ".", "_prepare_base_model", "(", "backbone", ")", "\n", "self", ".", "_prepare_fc", "(", "num_class", ")", "\n", "self", ".", "consensus", "=", "ConsensusModule", "(", "consensus_type", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "\n", "self", ".", "_enable_pbn", "=", "partial_bn", "\n", "if", "partial_bn", ":", "\n", "            ", "self", ".", "partialBN", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsm.VideoNet._prepare_base_model": [[49, 108], ["torch.AdaptiveAvgPool2d", "print", "torch.AdaptiveAvgPool2d", "ValueError", "getattr", "print", "print", "importlib.import_module", "print", "print", "importlib.import_module", "getattr", "getattr", "print", "print", "getattr", "getattr", "getattr", "getattr"], "methods", ["None"], ["", "", "def", "_prepare_base_model", "(", "self", ",", "backbone", ")", ":", "\n", "        ", "if", "'resnet'", "in", "backbone", ":", "\n", "            ", "if", "self", ".", "non_local", ":", "\n", "                ", "print", "(", "'=> base model: TSM_R_NLN, with backbone: {}'", ".", "format", "(", "backbone", ")", ")", "\n", "import", "nets", ".", "TSM_R_NLN", "as", "TSM_R_NLN", "\n", "self", ".", "base_model", "=", "getattr", "(", "TSM_R_NLN", ",", "backbone", ")", "(", "pretrained", "=", "True", "if", "self", ".", "pretrain", "==", "'imagenet'", "else", "False", ",", "\n", "n_segment", "=", "self", ".", "num_segments", ",", "fold_div", "=", "self", ".", "shift_div", ",", "place", "=", "self", ".", "shift_place", ")", "\n", "", "elif", "self", ".", "element_filter", ":", "\n", "                ", "if", "self", ".", "net", "==", "'M4'", ":", "\n", "                    ", "assert", "self", ".", "cdiv", ">=", "4", "\n", "base_model_name", "=", "'nets.GC_TSM'", "\n", "Model_GC", "=", "import_module", "(", "base_model_name", ")", "\n", "print", "(", "'=> base model: {}, with backbone: {}, loop: {}'", ".", "format", "(", "base_model_name", ",", "backbone", ",", "self", ".", "loop", ")", ")", "\n", "self", ".", "base_model", "=", "getattr", "(", "Model_GC", ",", "backbone", ")", "(", "pretrained", "=", "True", "if", "self", ".", "pretrain", "==", "'imagenet'", "else", "False", ",", "\n", "n_segment", "=", "self", ".", "num_segments", ",", "fold_div", "=", "self", ".", "shift_div", ",", "place", "=", "self", ".", "shift_place", ",", "cdiv", "=", "self", ".", "cdiv", ",", "loop", "=", "self", ".", "loop", ")", "\n", "", "else", ":", "\n", "                    ", "base_model_name", "=", "'nets.ECal_TSM'", "+", "'_S'", "\n", "print", "(", "'=> base model: {}, with backbone: {}, net: {}, loop: {}'", ".", "format", "(", "base_model_name", ",", "backbone", ",", "self", ".", "net", ",", "self", ".", "loop", ")", ")", "\n", "Model_GC", "=", "import_module", "(", "base_model_name", ")", "\n", "block", "=", "'GC_%s'", "%", "self", ".", "net", "\n", "self", ".", "base_model", "=", "getattr", "(", "Model_GC", ",", "backbone", ")", "(", "pretrained", "=", "True", "if", "self", ".", "pretrain", "==", "'imagenet'", "else", "False", ",", "EF", "=", "block", ",", "\n", "n_segment", "=", "self", ".", "num_segments", ",", "fold_div", "=", "self", ".", "shift_div", ",", "place", "=", "self", ".", "shift_place", ",", "cdiv", "=", "self", ".", "cdiv", ",", "loop", "=", "self", ".", "loop", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "'=> base model: TSM, with backbone: {}'", ".", "format", "(", "backbone", ")", ")", "\n", "import", "nets", ".", "TSM", "as", "TSM", "\n", "self", ".", "base_model", "=", "getattr", "(", "TSM", ",", "backbone", ")", "(", "pretrained", "=", "True", "if", "self", ".", "pretrain", "==", "'imagenet'", "else", "False", ",", "\n", "n_segment", "=", "self", ".", "num_segments", ",", "fold_div", "=", "self", ".", "shift_div", ",", "place", "=", "self", ".", "shift_place", ")", "\n", "#", "\n", "", "self", ".", "base_model", ".", "last_layer_name", "=", "'fc'", "\n", "self", ".", "base_model", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "input_size", "=", "224", "\n", "self", ".", "input_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "self", ".", "input_std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "#", "\n", "", "elif", "backbone", "==", "'mobilenetv2'", ":", "\n", "            ", "if", "self", ".", "non_local", ":", "\n", "                ", "print", "(", "'=> base model: TSM_M_NLN, with backbone: {}'", ".", "format", "(", "backbone", ")", ")", "\n", "import", "ops", ".", "TSM_M_NLN", "as", "TSM_M_NLN", "\n", "self", ".", "base_model", "=", "getattr", "(", "TSM_M_NLN", ",", "backbone", ")", "(", "pretrained", "=", "True", "if", "self", ".", "pretrain", "==", "'imagenet'", "else", "False", ",", "\n", "n_segment", "=", "self", ".", "num_segments", ",", "fold_div", "=", "self", ".", "shift_div", ",", "place", "=", "self", ".", "shift_place", ")", "\n", "", "elif", "self", ".", "element_filter", ":", "\n", "                ", "print", "(", "'=> base model: TSM_M_EFT, with backbone: {}'", ".", "format", "(", "backbone", ")", ")", "\n", "import", "ops", ".", "TSM_M_EFT", "as", "TSM_M_EFT", "\n", "self", ".", "base_model", "=", "getattr", "(", "TSM_M_EFT", ",", "backbone", ")", "(", "pretrained", "=", "True", "if", "self", ".", "pretrain", "==", "'imagenet'", "else", "False", ",", "\n", "fold_div", "=", "self", ".", "shift_div", ",", "place", "=", "self", ".", "shift_place", ",", "cdiv", "=", "self", ".", "cdiv", ",", "num_segments", "=", "self", ".", "num_segments", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'=> base model: TSM_M, with backbone: {}'", ".", "format", "(", "backbone", ")", ")", "\n", "import", "ops", ".", "TSM_M", "as", "TSM_M", "\n", "self", ".", "base_model", "=", "getattr", "(", "TSM_M", ",", "backbone", ")", "(", "pretrained", "=", "True", "if", "self", ".", "pretrain", "==", "'imagenet'", "else", "False", ",", "\n", "n_segment", "=", "self", ".", "num_segments", ",", "fold_div", "=", "self", ".", "shift_div", ",", "place", "=", "self", ".", "shift_place", ")", "\n", "#", "\n", "", "self", ".", "base_model", ".", "last_layer_name", "=", "'classifier'", "\n", "self", ".", "base_model", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "input_size", "=", "224", "\n", "self", ".", "input_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "self", ".", "input_std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown backbone: {}'", ".", "format", "(", "backbone", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsm.VideoNet._prepare_fc": [[109, 126], ["getattr", "setattr", "setattr", "torch.Linear", "torch.nn.init.normal_", "torch.nn.init.constant_", "hasattr", "torch.Linear", "torch.Dropout", "torch.nn.init.normal_", "torch.nn.init.constant_", "getattr", "getattr"], "methods", ["None"], ["", "", "def", "_prepare_fc", "(", "self", ",", "num_class", ")", ":", "\n", "        ", "self", ".", "feature_dim", "=", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "in_features", "\n", "if", "self", ".", "dropout", "==", "0", ":", "\n", "            ", "setattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ",", "nn", ".", "Linear", "(", "self", ".", "feature_dim", ",", "num_class", ")", ")", "\n", "self", ".", "new_fc", "=", "None", "\n", "", "else", ":", "\n", "            ", "setattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ",", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ")", "\n", "self", ".", "new_fc", "=", "nn", ".", "Linear", "(", "self", ".", "feature_dim", ",", "num_class", ")", "\n", "\n", "", "std", "=", "0.001", "\n", "if", "self", ".", "new_fc", "is", "None", ":", "\n", "            ", "normal_", "(", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "if", "hasattr", "(", "self", ".", "new_fc", ",", "'weight'", ")", ":", "\n", "                ", "normal_", "(", "self", ".", "new_fc", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "new_fc", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsm.VideoNet.train": [[128, 142], ["super().train", "print", "models_tsm.VideoNet.base_model.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.train"], ["", "", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "# Override the default train() to freeze the BN parameters", "\n", "        ", "super", "(", "VideoNet", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "count", "=", "0", "\n", "if", "self", ".", "_enable_pbn", "and", "mode", ":", "\n", "            ", "print", "(", "\"Freezing BatchNorm2D except the first one.\"", ")", "\n", "for", "m", "in", "self", ".", "base_model", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "count", "+=", "1", "\n", "if", "count", ">=", "(", "2", "if", "self", ".", "_enable_pbn", "else", "1", ")", ":", "\n", "                        ", "m", ".", "eval", "(", ")", "\n", "# shutdown update in frozen mode", "\n", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsm.VideoNet.partialBN": [[144, 146], ["None"], "methods", ["None"], ["", "", "", "", "", "def", "partialBN", "(", "self", ",", "enable", ")", ":", "\n", "        ", "self", ".", "_enable_pbn", "=", "enable", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsm.VideoNet.get_optim_policies": [[147, 263], ["models_tsm.VideoNet.named_modules", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "list", "isinstance", "list", "ef_weight.append", "list", "normal_weight.append", "m.parameters", "first_conv_weight.append", "normal_weight.append", "list", "isinstance", "m.parameters", "len", "ef_bias.append", "m.parameters", "len", "normal_bias.append", "list", "ef_lr_weight.append", "list", "normal_weight.append", "isinstance", "isinstance", "isinstance", "len", "first_conv_bias.append", "len", "normal_bias.append", "m.parameters", "lr5_weight.append", "normal_weight.append", "len", "m.parameters", "len", "ef_lr_bias.append", "m.parameters", "len", "normal_bias.append", "ef_bn.extend", "bn.extend", "len", "lr10_bias.append", "normal_bias.append", "bn.extend", "isinstance", "isinstance", "bn.extend", "list", "list", "len", "ValueError", "list", "list", "len", "m.parameters", "m.parameters", "list", "m.parameters", "m.parameters", "len", "ValueError", "m.parameters", "type", "list", "m.parameters", "type"], "methods", ["None"], ["", "def", "get_optim_policies", "(", "self", ")", ":", "\n", "        ", "first_conv_weight", "=", "[", "]", "\n", "first_conv_bias", "=", "[", "]", "\n", "normal_weight", "=", "[", "]", "\n", "normal_bias", "=", "[", "]", "\n", "lr5_weight", "=", "[", "]", "\n", "lr10_bias", "=", "[", "]", "\n", "bn", "=", "[", "]", "\n", "custom_ops", "=", "[", "]", "\n", "\n", "ef_weight", "=", "[", "]", "\n", "ef_bias", "=", "[", "]", "\n", "ef_bn", "=", "[", "]", "\n", "\n", "ef_lr_weight", "=", "[", "]", "\n", "ef_lr_bias", "=", "[", "]", "\n", "\n", "conv_cnt", "=", "0", "\n", "bn_cnt", "=", "0", "\n", "for", "name", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "'eft'", "in", "name", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv1d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv3d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "ConvTranspose3d", ")", ":", "\n", "                    ", "if", "self", ".", "ef_lr5", ":", "\n", "                        ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "ef_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "ef_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                        ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "                    ", "if", "self", ".", "ef_lr5", ":", "\n", "                        ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "ef_lr_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "ef_lr_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                        ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm3d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                    ", "if", "self", ".", "ef_lr5", ":", "\n", "                        ", "ef_bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "                        ", "bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "", "elif", "len", "(", "m", ".", "_modules", ")", "==", "0", ":", "\n", "                    ", "if", "len", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", ">", "0", ":", "\n", "                        ", "raise", "ValueError", "(", "\"New atomic module type: {} in eft blocks. Need to give it a learning policy\"", ".", "format", "(", "type", "(", "m", ")", ")", ")", "\n", "", "", "", "else", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv3d", ")", ":", "\n", "                    ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "conv_cnt", "+=", "1", "\n", "if", "conv_cnt", "==", "1", ":", "\n", "                        ", "first_conv_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "first_conv_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                        ", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "                    ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "fc_lr5", ":", "\n", "                        ", "lr5_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                        ", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                        ", "if", "self", ".", "fc_lr5", ":", "\n", "                            ", "lr10_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                            ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "bn_cnt", "+=", "1", "\n", "# later BN's are frozen", "\n", "if", "not", "self", ".", "_enable_pbn", "or", "bn_cnt", "==", "1", ":", "\n", "                        ", "bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm3d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                    ", "bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "elif", "len", "(", "m", ".", "_modules", ")", "==", "0", ":", "\n", "                    ", "if", "len", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", ">", "0", ":", "\n", "                        ", "raise", "ValueError", "(", "\"New atomic module type: {}. Need to give it a learning policy\"", ".", "format", "(", "type", "(", "m", ")", ")", ")", "\n", "\n", "", "", "", "", "return", "[", "\n", "{", "'params'", ":", "first_conv_weight", ",", "'lr_mult'", ":", "5", "if", "self", ".", "modality", "==", "'Flow'", "else", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"first_conv_weight\"", "}", ",", "\n", "{", "'params'", ":", "first_conv_bias", ",", "'lr_mult'", ":", "10", "if", "self", ".", "modality", "==", "'Flow'", "else", "2", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"first_conv_bias\"", "}", ",", "\n", "{", "'params'", ":", "normal_weight", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"normal_weight\"", "}", ",", "\n", "{", "'params'", ":", "normal_bias", ",", "'lr_mult'", ":", "2", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"normal_bias\"", "}", ",", "\n", "{", "'params'", ":", "bn", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"BN scale/shift\"", "}", ",", "\n", "{", "'params'", ":", "custom_ops", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"custom_ops\"", "}", ",", "\n", "# for ef", "\n", "{", "'params'", ":", "ef_weight", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"ef_weight\"", "}", ",", "\n", "{", "'params'", ":", "ef_bias", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"ef_bias\"", "}", ",", "\n", "{", "'params'", ":", "ef_bn", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"ef_bn\"", "}", ",", "\n", "{", "'params'", ":", "ef_lr_weight", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"ef_lr_weight\"", "}", ",", "\n", "{", "'params'", ":", "ef_lr_bias", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"ef_lr_bias\"", "}", ",", "\n", "# for fc", "\n", "{", "'params'", ":", "lr5_weight", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"lr5_weight\"", "}", ",", "\n", "{", "'params'", ":", "lr10_bias", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"lr10_bias\"", "}", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsm.VideoNet.forward": [[265, 277], ["input.view.view.view", "models_tsm.VideoNet.base_model", "models_tsm.VideoNet.view", "models_tsm.VideoNet.consensus", "models_tsm.VideoNet.squeeze", "models_tsm.VideoNet.new_fc", "input.view.view.size", "models_tsm.VideoNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# input size [batch_size, num_segments, 3, h, w]", "\n", "        ", "input", "=", "input", ".", "view", "(", "(", "-", "1", ",", "3", ")", "+", "input", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", "\n", "base_out", "=", "self", ".", "base_model", "(", "input", ")", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "            ", "base_out", "=", "self", ".", "new_fc", "(", "base_out", ")", "\n", "#", "\n", "", "base_out", "=", "base_out", ".", "view", "(", "(", "-", "1", ",", "self", ".", "num_segments", ")", "+", "base_out", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", "#", "\n", "output", "=", "self", ".", "consensus", "(", "base_out", ")", "\n", "# output = base_out.mean(dim=1)", "\n", "return", "output", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsm.VideoNet.crop_size": [[278, 281], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "crop_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsm.VideoNet.scale_size": [[282, 285], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "scale_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input_size", "*", "self", ".", "init_crop_size", "//", "self", ".", "input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsm.VideoNet.get_augmentation": [[286, 300], ["torchvision.transforms.Compose", "print", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "GroupMultiScaleCrop", "GroupRandomHorizontalFlip2", "GroupMultiScaleCrop", "GroupMultiScaleCrop", "GroupRandomHorizontalFlip", "GroupMultiScaleCrop", "GroupRandomHorizontalFlip"], "methods", ["None"], ["", "def", "get_augmentation", "(", "self", ",", "flip", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "modality", "==", "'RGB'", ":", "\n", "            ", "if", "flip", ":", "\n", "                ", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", ")", ",", "\n", "GroupRandomHorizontalFlip2", "(", "self", ".", "target_transforms", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'#'", "*", "20", ",", "'NO FLIP!!!'", ")", "\n", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", ")", "]", ")", "\n", "", "", "elif", "self", ".", "modality", "==", "'Flow'", ":", "\n", "            ", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", "]", ")", ",", "\n", "GroupRandomHorizontalFlip", "(", "is_flow", "=", "True", ")", "]", ")", "\n", "", "elif", "self", ".", "modality", "==", "'RGBDiff'", ":", "\n", "            ", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", "]", ")", ",", "\n", "GroupRandomHorizontalFlip", "(", "is_flow", "=", "False", ")", "]", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_gst.VideoNet.__init__": [[12, 45], ["torch.Module.__init__", "models_gst.VideoNet._prepare_base_model", "models_gst.VideoNet._prepare_fc", "ops_tsntsmgst.basic_ops.ConsensusModule", "torch.Softmax", "models_gst.VideoNet.partialBN"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet._prepare_base_model", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet._prepare_fc", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.partialBN"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ",", "num_segments", ",", "modality", ",", "\n", "backbone", "=", "'resnet50'", ",", "net", "=", "None", ",", "consensus_type", "=", "'avg'", ",", "\n", "dropout", "=", "0.5", ",", "partial_bn", "=", "True", ",", "print_spec", "=", "True", ",", "pretrain", "=", "'imagenet'", ",", "ef_lr5", "=", "False", ",", "\n", "fc_lr5", "=", "False", ",", "alpha", "=", "4", ",", "beta", "=", "2", ",", "non_local", "=", "False", ",", "element_filter", "=", "False", ",", "stage", "=", "'S2B'", ",", "cdiv", "=", "2", ",", "loop", "=", "False", ",", "target_transforms", "=", "None", ")", ":", "\n", "        ", "super", "(", "VideoNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "modality", "=", "modality", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "pretrain", "=", "pretrain", "\n", "self", ".", "consensus_type", "=", "consensus_type", "\n", "self", ".", "init_crop_size", "=", "256", "\n", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "stage", "=", "stage", "\n", "self", ".", "loop", "=", "loop", "\n", "\n", "self", ".", "ef_lr5", "=", "ef_lr5", "\n", "self", ".", "fc_lr5", "=", "fc_lr5", "\n", "self", ".", "non_local", "=", "non_local", "\n", "self", ".", "element_filter", "=", "element_filter", "\n", "self", ".", "cdiv", "=", "cdiv", "\n", "self", ".", "target_transforms", "=", "target_transforms", "\n", "\n", "self", ".", "_prepare_base_model", "(", "backbone", ")", "\n", "self", ".", "_prepare_fc", "(", "num_class", ")", "\n", "self", ".", "consensus", "=", "ConsensusModule", "(", "consensus_type", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "\n", "self", ".", "_enable_pbn", "=", "partial_bn", "\n", "if", "partial_bn", ":", "\n", "            ", "self", ".", "partialBN", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_gst.VideoNet._prepare_base_model": [[46, 84], ["torch.AdaptiveAvgPool2d", "ValueError", "print", "getattr", "ValueError", "importlib.import_module", "print", "print", "importlib.import_module", "getattr", "getattr"], "methods", ["None"], ["", "", "def", "_prepare_base_model", "(", "self", ",", "backbone", ")", ":", "\n", "# assert not (self.non_local and self.element_filter)", "\n", "# assert self.pretrain == 'imagenet'", "\n", "\n", "        ", "if", "'resnet'", "in", "backbone", ":", "\n", "# if self.non_local:", "\n", "#     print('=> base model: STC_NLN, with backbone: {}'.format(backbone))", "\n", "#     import nets.GST_NLN as GST_NLN", "\n", "#     self.base_model = getattr(GST_NLN, backbone)(alpha=self.alpha, beta=self.beta)", "\n", "            ", "if", "self", ".", "net", "==", "'GST'", ":", "\n", "                ", "print", "(", "'=> base model: GST, with backbone: {}'", ".", "format", "(", "backbone", ")", ")", "\n", "import", "nets", ".", "GST", "as", "GST", "\n", "self", ".", "base_model", "=", "getattr", "(", "GST", ",", "backbone", ")", "(", "alpha", "=", "self", ".", "alpha", ",", "beta", "=", "self", ".", "beta", ")", "\n", "\n", "", "elif", "self", ".", "element_filter", ":", "\n", "                ", "if", "self", ".", "net", "==", "'M4'", ":", "\n", "                    ", "assert", "self", ".", "cdiv", ">=", "4", "\n", "base_model_name", "=", "'nets.GC_GST'", "\n", "GST_GC", "=", "import_module", "(", "base_model_name", ")", "\n", "print", "(", "'=> base model: {}, with backbone: {}, loop: {}'", ".", "format", "(", "base_model_name", ",", "backbone", ",", "self", ".", "loop", ")", ")", "\n", "self", ".", "base_model", "=", "getattr", "(", "GST_GC", ",", "backbone", ")", "(", "alpha", "=", "self", ".", "alpha", ",", "beta", "=", "self", ".", "beta", ",", "cdiv", "=", "self", ".", "cdiv", ",", "loop", "=", "self", ".", "loop", ")", "\n", "", "else", ":", "\n", "                    ", "base_model_name", "=", "'nets.ECal_GST'", "+", "'_S'", "\n", "print", "(", "'=> base model: {}, with backbone: {}, net: {}, loop: {}'", ".", "format", "(", "base_model_name", ",", "backbone", ",", "self", ".", "net", ",", "self", ".", "loop", ")", ")", "\n", "GST_GC", "=", "import_module", "(", "base_model_name", ")", "\n", "block", "=", "'GC_%s'", "%", "self", ".", "net", "\n", "self", ".", "base_model", "=", "getattr", "(", "GST_GC", ",", "backbone", ")", "(", "EF", "=", "block", ",", "alpha", "=", "self", ".", "alpha", ",", "beta", "=", "self", ".", "beta", ",", "cdiv", "=", "self", ".", "cdiv", ",", "loop", "=", "self", ".", "loop", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Wrong networks'", ")", "\n", "#", "\n", "", "self", ".", "base_model", ".", "last_layer_name", "=", "'fc'", "\n", "self", ".", "base_model", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "input_size", "=", "224", "\n", "self", ".", "input_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "self", ".", "input_std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "#", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown backbone: {}'", ".", "format", "(", "backbone", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_gst.VideoNet._prepare_fc": [[85, 102], ["getattr", "setattr", "setattr", "torch.Linear", "torch.nn.init.normal_", "torch.nn.init.constant_", "hasattr", "torch.Linear", "torch.Dropout", "torch.nn.init.normal_", "torch.nn.init.constant_", "getattr", "getattr"], "methods", ["None"], ["", "", "def", "_prepare_fc", "(", "self", ",", "num_class", ")", ":", "\n", "        ", "self", ".", "feature_dim", "=", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "in_features", "\n", "if", "self", ".", "dropout", "==", "0", ":", "\n", "            ", "setattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ",", "nn", ".", "Linear", "(", "self", ".", "feature_dim", ",", "num_class", ")", ")", "\n", "self", ".", "new_fc", "=", "None", "\n", "", "else", ":", "\n", "            ", "setattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ",", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ")", "\n", "self", ".", "new_fc", "=", "nn", ".", "Linear", "(", "self", ".", "feature_dim", ",", "num_class", ")", "\n", "\n", "", "std", "=", "0.001", "\n", "if", "self", ".", "new_fc", "is", "None", ":", "\n", "            ", "normal_", "(", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "if", "hasattr", "(", "self", ".", "new_fc", ",", "'weight'", ")", ":", "\n", "                ", "normal_", "(", "self", ".", "new_fc", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "new_fc", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_gst.VideoNet.train": [[104, 118], ["super().train", "print", "models_gst.VideoNet.base_model.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.train"], ["", "", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "# Override the default train() to freeze the BN parameters", "\n", "        ", "super", "(", "VideoNet", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "count", "=", "0", "\n", "if", "self", ".", "_enable_pbn", "and", "mode", ":", "\n", "            ", "print", "(", "\"Freezing BatchNorm3D except the first one.\"", ")", "\n", "for", "m", "in", "self", ".", "base_model", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                    ", "count", "+=", "1", "\n", "if", "count", ">=", "(", "2", "if", "self", ".", "_enable_pbn", "else", "1", ")", ":", "\n", "                        ", "m", ".", "eval", "(", ")", "\n", "# shutdown update in frozen mode", "\n", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_gst.VideoNet.partialBN": [[120, 122], ["None"], "methods", ["None"], ["", "", "", "", "", "def", "partialBN", "(", "self", ",", "enable", ")", ":", "\n", "        ", "self", ".", "_enable_pbn", "=", "enable", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_gst.VideoNet.get_optim_policies": [[123, 239], ["models_gst.VideoNet.named_modules", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "list", "isinstance", "list", "ef_weight.append", "list", "normal_weight.append", "m.parameters", "first_conv_weight.append", "normal_weight.append", "list", "isinstance", "m.parameters", "len", "ef_bias.append", "m.parameters", "len", "normal_bias.append", "list", "ef_lr_weight.append", "list", "normal_weight.append", "isinstance", "isinstance", "isinstance", "len", "first_conv_bias.append", "len", "normal_bias.append", "m.parameters", "lr5_weight.append", "normal_weight.append", "len", "m.parameters", "len", "ef_lr_bias.append", "m.parameters", "len", "normal_bias.append", "ef_bn.extend", "bn.extend", "len", "lr10_bias.append", "normal_bias.append", "bn.extend", "isinstance", "isinstance", "bn.extend", "list", "list", "len", "ValueError", "list", "list", "len", "m.parameters", "m.parameters", "list", "m.parameters", "m.parameters", "len", "ValueError", "m.parameters", "type", "list", "m.parameters", "type"], "methods", ["None"], ["", "def", "get_optim_policies", "(", "self", ")", ":", "\n", "        ", "first_conv_weight", "=", "[", "]", "\n", "first_conv_bias", "=", "[", "]", "\n", "normal_weight", "=", "[", "]", "\n", "normal_bias", "=", "[", "]", "\n", "lr5_weight", "=", "[", "]", "\n", "lr10_bias", "=", "[", "]", "\n", "bn", "=", "[", "]", "\n", "custom_ops", "=", "[", "]", "\n", "\n", "ef_weight", "=", "[", "]", "\n", "ef_bias", "=", "[", "]", "\n", "ef_bn", "=", "[", "]", "\n", "\n", "ef_lr_weight", "=", "[", "]", "\n", "ef_lr_bias", "=", "[", "]", "\n", "\n", "conv_cnt", "=", "0", "\n", "bn_cnt", "=", "0", "\n", "for", "name", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "'eft'", "in", "name", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv1d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv3d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "ConvTranspose3d", ")", ":", "\n", "                    ", "if", "self", ".", "ef_lr5", ":", "\n", "                        ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "ef_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "ef_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                        ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "                    ", "if", "self", ".", "ef_lr5", ":", "\n", "                        ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "ef_lr_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "ef_lr_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                        ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm3d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                    ", "if", "self", ".", "ef_lr5", ":", "\n", "                        ", "ef_bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "                        ", "bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "", "elif", "len", "(", "m", ".", "_modules", ")", "==", "0", ":", "\n", "                    ", "if", "len", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", ">", "0", ":", "\n", "                        ", "raise", "ValueError", "(", "\"New atomic module type: {} in eft blocks. Need to give it a learning policy\"", ".", "format", "(", "type", "(", "m", ")", ")", ")", "\n", "", "", "", "else", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv3d", ")", ":", "\n", "                    ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "conv_cnt", "+=", "1", "\n", "if", "conv_cnt", "==", "1", ":", "\n", "                        ", "first_conv_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "first_conv_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                        ", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "                    ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "fc_lr5", ":", "\n", "                        ", "lr5_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                        ", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                        ", "if", "self", ".", "fc_lr5", ":", "\n", "                            ", "lr10_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                            ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "bn_cnt", "+=", "1", "\n", "# later BN's are frozen", "\n", "if", "not", "self", ".", "_enable_pbn", "or", "bn_cnt", "==", "1", ":", "\n", "                        ", "bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm3d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                    ", "bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "elif", "len", "(", "m", ".", "_modules", ")", "==", "0", ":", "\n", "                    ", "if", "len", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", ">", "0", ":", "\n", "                        ", "raise", "ValueError", "(", "\"New atomic module type: {}. Need to give it a learning policy\"", ".", "format", "(", "type", "(", "m", ")", ")", ")", "\n", "\n", "", "", "", "", "return", "[", "\n", "{", "'params'", ":", "first_conv_weight", ",", "'lr_mult'", ":", "5", "if", "self", ".", "modality", "==", "'Flow'", "else", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"first_conv_weight\"", "}", ",", "\n", "{", "'params'", ":", "first_conv_bias", ",", "'lr_mult'", ":", "10", "if", "self", ".", "modality", "==", "'Flow'", "else", "2", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"first_conv_bias\"", "}", ",", "\n", "{", "'params'", ":", "normal_weight", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"normal_weight\"", "}", ",", "\n", "{", "'params'", ":", "normal_bias", ",", "'lr_mult'", ":", "2", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"normal_bias\"", "}", ",", "\n", "{", "'params'", ":", "bn", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"BN scale/shift\"", "}", ",", "\n", "{", "'params'", ":", "custom_ops", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"custom_ops\"", "}", ",", "\n", "# for ef", "\n", "{", "'params'", ":", "ef_weight", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"ef_weight\"", "}", ",", "\n", "{", "'params'", ":", "ef_bias", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"ef_bias\"", "}", ",", "\n", "{", "'params'", ":", "ef_bn", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"ef_bn\"", "}", ",", "\n", "{", "'params'", ":", "ef_lr_weight", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"ef_lr_weight\"", "}", ",", "\n", "{", "'params'", ":", "ef_lr_bias", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"ef_lr_bias\"", "}", ",", "\n", "# for fc", "\n", "{", "'params'", ":", "lr5_weight", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"lr5_weight\"", "}", ",", "\n", "{", "'params'", ":", "lr10_bias", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"lr10_bias\"", "}", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_gst.VideoNet.forward": [[241, 256], ["input.transpose().contiguous.transpose().contiguous.view", "input.transpose().contiguous.transpose().contiguous.transpose().contiguous", "models_gst.VideoNet.base_model", "models_gst.VideoNet.view", "models_gst.VideoNet.new_fc", "models_gst.VideoNet.consensus", "models_gst.VideoNet.mean.squeeze", "models_gst.VideoNet.mean", "input.transpose().contiguous.transpose().contiguous.transpose", "input.transpose().contiguous.transpose().contiguous.size", "models_gst.VideoNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# input size [batch_size, num_segments, 3, h, w]", "\n", "        ", "input", "=", "input", ".", "view", "(", "(", "-", "1", ",", "self", ".", "num_segments", ",", "3", ")", "+", "input", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", "\n", "input", "=", "input", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "base_out", "=", "self", ".", "base_model", "(", "input", ")", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "            ", "base_out", "=", "self", ".", "new_fc", "(", "base_out", ")", "\n", "", "base_out", "=", "base_out", ".", "view", "(", "(", "-", "1", ",", "self", ".", "num_segments", ")", "+", "base_out", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", "#", "\n", "if", "self", ".", "consensus_type", "==", "'avg'", ":", "\n", "            ", "output", "=", "self", ".", "consensus", "(", "base_out", ")", "\n", "return", "output", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "base_out", ".", "mean", "(", "dim", "=", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_gst.VideoNet.crop_size": [[257, 260], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "crop_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_gst.VideoNet.scale_size": [[261, 264], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "scale_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input_size", "*", "self", ".", "init_crop_size", "//", "self", ".", "input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_gst.VideoNet.get_augmentation": [[265, 279], ["torchvision.transforms.Compose", "print", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "GroupMultiScaleCrop", "GroupRandomHorizontalFlip2", "GroupMultiScaleCrop", "GroupMultiScaleCrop", "GroupRandomHorizontalFlip", "GroupMultiScaleCrop", "GroupRandomHorizontalFlip"], "methods", ["None"], ["", "def", "get_augmentation", "(", "self", ",", "flip", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "modality", "==", "'RGB'", ":", "\n", "            ", "if", "flip", ":", "\n", "                ", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", ")", ",", "\n", "GroupRandomHorizontalFlip2", "(", "self", ".", "target_transforms", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'#'", "*", "20", ",", "'NO FLIP!!!'", ")", "\n", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", ")", "]", ")", "\n", "", "", "elif", "self", ".", "modality", "==", "'Flow'", ":", "\n", "            ", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", "]", ")", ",", "\n", "GroupRandomHorizontalFlip", "(", "is_flow", "=", "True", ")", "]", ")", "\n", "", "elif", "self", ".", "modality", "==", "'RGBDiff'", ":", "\n", "            ", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", "]", ")", ",", "\n", "GroupRandomHorizontalFlip", "(", "is_flow", "=", "False", ")", "]", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.__init__": [[11, 41], ["torch.Module.__init__", "models_tsn.VideoNet._prepare_base_model", "models_tsn.VideoNet._prepare_fc", "ops_tsntsmgst.basic_ops.ConsensusModule", "torch.Softmax", "models_tsn.VideoNet.partialBN"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet._prepare_base_model", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet._prepare_fc", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.partialBN"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ",", "num_segments", ",", "modality", ",", "\n", "backbone", "=", "'resnet50'", ",", "net", "=", "None", ",", "consensus_type", "=", "'avg'", ",", "\n", "dropout", "=", "0.5", ",", "partial_bn", "=", "True", ",", "print_spec", "=", "True", ",", "pretrain", "=", "'imagenet'", ",", "ef_lr5", "=", "False", ",", "\n", "fc_lr5", "=", "False", ",", "non_local", "=", "False", ",", "element_filter", "=", "False", ",", "stage", "=", "'S3B'", ",", "cdiv", "=", "2", ",", "loop", "=", "False", ",", "target_transforms", "=", "None", ")", ":", "\n", "        ", "super", "(", "VideoNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "modality", "=", "modality", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "pretrain", "=", "pretrain", "\n", "self", ".", "consensus_type", "=", "consensus_type", "\n", "self", ".", "init_crop_size", "=", "256", "\n", "\n", "self", ".", "ef_lr5", "=", "ef_lr5", "\n", "self", ".", "fc_lr5", "=", "fc_lr5", "\n", "self", ".", "non_local", "=", "non_local", "\n", "self", ".", "element_filter", "=", "element_filter", "\n", "self", ".", "stage", "=", "stage", "\n", "self", ".", "cdiv", "=", "cdiv", "\n", "self", ".", "loop", "=", "loop", "\n", "self", ".", "target_transforms", "=", "target_transforms", "\n", "\n", "self", ".", "_prepare_base_model", "(", "backbone", ")", "\n", "self", ".", "_prepare_fc", "(", "num_class", ")", "\n", "self", ".", "consensus", "=", "ConsensusModule", "(", "consensus_type", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "\n", "self", ".", "_enable_pbn", "=", "partial_bn", "\n", "if", "partial_bn", ":", "\n", "            ", "self", ".", "partialBN", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet._prepare_base_model": [[42, 101], ["torch.AdaptiveAvgPool2d", "ValueError", "print", "getattr", "print", "importlib.import_module", "print", "print", "importlib.import_module", "getattr", "getattr", "getattr"], "methods", ["None"], ["", "", "def", "_prepare_base_model", "(", "self", ",", "backbone", ")", ":", "\n", "# assert self.non_local or self.element_filter", "\n", "\n", "        ", "if", "'resnet'", "in", "backbone", ":", "\n", "            ", "if", "self", ".", "non_local", ":", "\n", "                ", "print", "(", "'=> base model: TSN_NLN, with backbone: {}'", ".", "format", "(", "backbone", ")", ")", "\n", "import", "nets", ".", "TSN_NLN", "as", "TSN_NLN", "\n", "self", ".", "base_model", "=", "getattr", "(", "TSN_NLN", ",", "backbone", ")", "(", "pretrained", "=", "True", "if", "self", ".", "pretrain", "==", "'imagenet'", "else", "False", ")", "\n", "\n", "", "elif", "self", ".", "element_filter", ":", "\n", "                ", "if", "self", ".", "net", "==", "'M4'", ":", "\n", "                    ", "assert", "self", ".", "cdiv", ">=", "4", "\n", "base_model_name", "=", "'nets.GC_TSN'", "\n", "TSN_GC", "=", "import_module", "(", "base_model_name", ")", "\n", "print", "(", "'=> base model: {}, with backbone: {}, loop: {}'", ".", "format", "(", "base_model_name", ",", "backbone", ",", "self", ".", "loop", ")", ")", "\n", "self", ".", "base_model", "=", "getattr", "(", "TSN_GC", ",", "backbone", ")", "(", "pretrained", "=", "True", "if", "self", ".", "pretrain", "==", "'imagenet'", "else", "False", ",", "\n", "cdiv", "=", "self", ".", "cdiv", ",", "num_segments", "=", "self", ".", "num_segments", ",", "loop", "=", "self", ".", "loop", ")", "\n", "", "else", ":", "\n", "                    ", "base_model_name", "=", "'nets.ECal_TSN'", "\n", "print", "(", "'=> base model: {}, with backbone: {}, net: {}, loop: {}'", ".", "format", "(", "base_model_name", ",", "backbone", ",", "self", ".", "net", ",", "self", ".", "loop", ")", ")", "\n", "TSN_GC", "=", "import_module", "(", "base_model_name", ")", "\n", "block", "=", "'GC_%s'", "%", "self", ".", "net", "\n", "self", ".", "base_model", "=", "getattr", "(", "TSN_GC", ",", "backbone", ")", "(", "pretrained", "=", "True", "if", "self", ".", "pretrain", "==", "'imagenet'", "else", "False", ",", "EF", "=", "block", ",", "\n", "cdiv", "=", "self", ".", "cdiv", ",", "num_segments", "=", "self", ".", "num_segments", ",", "loop", "=", "self", ".", "loop", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "'=> base model: TSN, with backbone: {}'", ".", "format", "(", "backbone", ")", ")", "\n", "import", "nets", ".", "TSN", "as", "TSN", "\n", "self", ".", "base_model", "=", "getattr", "(", "TSN", ",", "backbone", ")", "(", "pretrained", "=", "True", "if", "self", ".", "pretrain", "==", "'imagenet'", "else", "False", ")", "\n", "#", "\n", "", "self", ".", "base_model", ".", "last_layer_name", "=", "'fc'", "\n", "self", ".", "base_model", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "input_size", "=", "224", "\n", "self", ".", "input_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "self", ".", "input_std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "#", "\n", "# elif backbone == 'mobilenetv2':", "\n", "#     if self.non_local:", "\n", "#         print('=> base model: C2D_NLN, with backbone: {}'.format(backbone))", "\n", "#         import nets.MBNETV2_NLN as MBNETV2_NLN", "\n", "#         self.base_model = getattr(MBNETV2_NLN, backbone)(pretrained=True if self.pretrain == 'imagenet' else False)", "\n", "#     elif self.element_filter:", "\n", "#         print('=> base model: C2D_EFT, with backbone: {}'.format(backbone))", "\n", "#         import nets.MBNETV2_EFT as MBNETV2_EFT", "\n", "#         self.base_model = getattr(MBNETV2_EFT, backbone)(pretrained=True if self.pretrain == 'imagenet' else False, ", "\n", "#             cdiv=self.cdiv, num_segments=self.num_segments)", "\n", "#     else:", "\n", "#         print('=> base model: C2D, with backbone: {}'.format(backbone))", "\n", "#         import nets.MBNETV2 as MBNETV2", "\n", "#         self.base_model = getattr(MBNETV2, backbone)(pretrained=True if self.pretrain == 'imagenet' else False)", "\n", "#     #", "\n", "#     self.base_model.last_layer_name = 'classifier'", "\n", "#     self.base_model.avgpool = nn.AdaptiveAvgPool2d(1)", "\n", "#     self.input_size = 224", "\n", "#     self.input_mean = [0.485, 0.456, 0.406]", "\n", "#     self.input_std = [0.229, 0.224, 0.225]", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown backbone: {}'", ".", "format", "(", "backbone", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet._prepare_fc": [[102, 119], ["getattr", "setattr", "setattr", "torch.Linear", "torch.nn.init.normal_", "torch.nn.init.constant_", "hasattr", "torch.Linear", "torch.Dropout", "torch.nn.init.normal_", "torch.nn.init.constant_", "getattr", "getattr"], "methods", ["None"], ["", "", "def", "_prepare_fc", "(", "self", ",", "num_class", ")", ":", "\n", "        ", "self", ".", "feature_dim", "=", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "in_features", "\n", "if", "self", ".", "dropout", "==", "0", ":", "\n", "            ", "setattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ",", "nn", ".", "Linear", "(", "self", ".", "feature_dim", ",", "num_class", ")", ")", "\n", "self", ".", "new_fc", "=", "None", "\n", "", "else", ":", "\n", "            ", "setattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ",", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ")", "\n", "self", ".", "new_fc", "=", "nn", ".", "Linear", "(", "self", ".", "feature_dim", ",", "num_class", ")", "\n", "\n", "", "std", "=", "0.001", "\n", "if", "self", ".", "new_fc", "is", "None", ":", "\n", "            ", "normal_", "(", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "if", "hasattr", "(", "self", ".", "new_fc", ",", "'weight'", ")", ":", "\n", "                ", "normal_", "(", "self", ".", "new_fc", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "new_fc", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.train": [[121, 135], ["super().train", "print", "models_tsn.VideoNet.base_model.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.train"], ["", "", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "# Override the default train() to freeze the BN parameters", "\n", "        ", "super", "(", "VideoNet", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "count", "=", "0", "\n", "if", "self", ".", "_enable_pbn", "and", "mode", ":", "\n", "            ", "print", "(", "\"Freezing BatchNorm2D except the first one.\"", ")", "\n", "for", "m", "in", "self", ".", "base_model", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "count", "+=", "1", "\n", "if", "count", ">=", "(", "2", "if", "self", ".", "_enable_pbn", "else", "1", ")", ":", "\n", "                        ", "m", ".", "eval", "(", ")", "\n", "# shutdown update in frozen mode", "\n", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.partialBN": [[137, 139], ["None"], "methods", ["None"], ["", "", "", "", "", "def", "partialBN", "(", "self", ",", "enable", ")", ":", "\n", "        ", "self", ".", "_enable_pbn", "=", "enable", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.get_optim_policies": [[140, 256], ["models_tsn.VideoNet.named_modules", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "list", "isinstance", "list", "ef_weight.append", "list", "normal_weight.append", "m.parameters", "first_conv_weight.append", "normal_weight.append", "list", "isinstance", "m.parameters", "len", "ef_bias.append", "m.parameters", "len", "normal_bias.append", "list", "ef_lr_weight.append", "list", "normal_weight.append", "isinstance", "isinstance", "isinstance", "len", "first_conv_bias.append", "len", "normal_bias.append", "m.parameters", "lr5_weight.append", "normal_weight.append", "len", "m.parameters", "len", "ef_lr_bias.append", "m.parameters", "len", "normal_bias.append", "ef_bn.extend", "bn.extend", "len", "lr10_bias.append", "normal_bias.append", "bn.extend", "isinstance", "isinstance", "bn.extend", "list", "list", "len", "ValueError", "list", "list", "len", "m.parameters", "m.parameters", "list", "m.parameters", "m.parameters", "len", "ValueError", "m.parameters", "type", "list", "m.parameters", "type"], "methods", ["None"], ["", "def", "get_optim_policies", "(", "self", ")", ":", "\n", "        ", "first_conv_weight", "=", "[", "]", "\n", "first_conv_bias", "=", "[", "]", "\n", "normal_weight", "=", "[", "]", "\n", "normal_bias", "=", "[", "]", "\n", "lr5_weight", "=", "[", "]", "\n", "lr10_bias", "=", "[", "]", "\n", "bn", "=", "[", "]", "\n", "custom_ops", "=", "[", "]", "\n", "\n", "ef_weight", "=", "[", "]", "\n", "ef_bias", "=", "[", "]", "\n", "ef_bn", "=", "[", "]", "\n", "\n", "ef_lr_weight", "=", "[", "]", "\n", "ef_lr_bias", "=", "[", "]", "\n", "\n", "conv_cnt", "=", "0", "\n", "bn_cnt", "=", "0", "\n", "for", "name", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "'eft'", "in", "name", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv1d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv3d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "ConvTranspose3d", ")", ":", "\n", "                    ", "if", "self", ".", "ef_lr5", ":", "\n", "                        ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "ef_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "ef_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                        ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "                    ", "if", "self", ".", "ef_lr5", ":", "\n", "                        ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "ef_lr_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "ef_lr_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                        ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm3d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                    ", "if", "self", ".", "ef_lr5", ":", "\n", "                        ", "ef_bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "                        ", "bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "", "elif", "len", "(", "m", ".", "_modules", ")", "==", "0", ":", "\n", "                    ", "if", "len", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", ">", "0", ":", "\n", "                        ", "raise", "ValueError", "(", "\"New atomic module type: {} in eft blocks. Need to give it a learning policy\"", ".", "format", "(", "type", "(", "m", ")", ")", ")", "\n", "", "", "", "else", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv3d", ")", ":", "\n", "                    ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "conv_cnt", "+=", "1", "\n", "if", "conv_cnt", "==", "1", ":", "\n", "                        ", "first_conv_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "first_conv_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                        ", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                            ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "                    ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "fc_lr5", ":", "\n", "                        ", "lr5_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                        ", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                        ", "if", "self", ".", "fc_lr5", ":", "\n", "                            ", "lr10_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                            ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "bn_cnt", "+=", "1", "\n", "# later BN's are frozen", "\n", "if", "not", "self", ".", "_enable_pbn", "or", "bn_cnt", "==", "1", ":", "\n", "                        ", "bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm3d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                    ", "bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "elif", "len", "(", "m", ".", "_modules", ")", "==", "0", ":", "\n", "                    ", "if", "len", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", ">", "0", ":", "\n", "                        ", "raise", "ValueError", "(", "\"New atomic module type: {}. Need to give it a learning policy\"", ".", "format", "(", "type", "(", "m", ")", ")", ")", "\n", "\n", "", "", "", "", "return", "[", "\n", "{", "'params'", ":", "first_conv_weight", ",", "'lr_mult'", ":", "5", "if", "self", ".", "modality", "==", "'Flow'", "else", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"first_conv_weight\"", "}", ",", "\n", "{", "'params'", ":", "first_conv_bias", ",", "'lr_mult'", ":", "10", "if", "self", ".", "modality", "==", "'Flow'", "else", "2", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"first_conv_bias\"", "}", ",", "\n", "{", "'params'", ":", "normal_weight", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"normal_weight\"", "}", ",", "\n", "{", "'params'", ":", "normal_bias", ",", "'lr_mult'", ":", "2", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"normal_bias\"", "}", ",", "\n", "{", "'params'", ":", "bn", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"BN scale/shift\"", "}", ",", "\n", "{", "'params'", ":", "custom_ops", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"custom_ops\"", "}", ",", "\n", "# for ef", "\n", "{", "'params'", ":", "ef_weight", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"ef_weight\"", "}", ",", "\n", "{", "'params'", ":", "ef_bias", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"ef_bias\"", "}", ",", "\n", "{", "'params'", ":", "ef_bn", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"ef_bn\"", "}", ",", "\n", "{", "'params'", ":", "ef_lr_weight", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"ef_lr_weight\"", "}", ",", "\n", "{", "'params'", ":", "ef_lr_bias", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"ef_lr_bias\"", "}", ",", "\n", "# for fc", "\n", "{", "'params'", ":", "lr5_weight", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"lr5_weight\"", "}", ",", "\n", "{", "'params'", ":", "lr10_bias", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"lr10_bias\"", "}", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.forward": [[258, 270], ["input.view.view.view", "models_tsn.VideoNet.base_model", "models_tsn.VideoNet.view", "models_tsn.VideoNet.consensus", "models_tsn.VideoNet.squeeze", "models_tsn.VideoNet.new_fc", "input.view.view.size", "models_tsn.VideoNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# input size [batch_size, num_segments, 3, h, w]", "\n", "        ", "input", "=", "input", ".", "view", "(", "(", "-", "1", ",", "3", ")", "+", "input", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", "\n", "base_out", "=", "self", ".", "base_model", "(", "input", ")", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "            ", "base_out", "=", "self", ".", "new_fc", "(", "base_out", ")", "\n", "#", "\n", "", "base_out", "=", "base_out", ".", "view", "(", "(", "-", "1", ",", "self", ".", "num_segments", ")", "+", "base_out", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", "#", "\n", "output", "=", "self", ".", "consensus", "(", "base_out", ")", "\n", "# output = base_out.mean(dim=1)", "\n", "return", "output", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.crop_size": [[271, 274], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "crop_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.scale_size": [[275, 278], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "scale_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input_size", "*", "self", ".", "init_crop_size", "//", "self", ".", "input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.models_tsn.VideoNet.get_augmentation": [[279, 293], ["torchvision.transforms.Compose", "print", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "GroupMultiScaleCrop", "GroupRandomHorizontalFlip2", "GroupMultiScaleCrop", "GroupMultiScaleCrop", "GroupRandomHorizontalFlip", "GroupMultiScaleCrop", "GroupRandomHorizontalFlip"], "methods", ["None"], ["", "def", "get_augmentation", "(", "self", ",", "flip", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "modality", "==", "'RGB'", ":", "\n", "            ", "if", "flip", ":", "\n", "                ", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", ")", ",", "\n", "GroupRandomHorizontalFlip2", "(", "self", ".", "target_transforms", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'#'", "*", "20", ",", "'NO FLIP!!!'", ")", "\n", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", ")", "]", ")", "\n", "", "", "elif", "self", ".", "modality", "==", "'Flow'", ":", "\n", "            ", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", "]", ")", ",", "\n", "GroupRandomHorizontalFlip", "(", "is_flow", "=", "True", ")", "]", ")", "\n", "", "elif", "self", ".", "modality", "==", "'RGBDiff'", ":", "\n", "            ", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", "]", ")", ",", "\n", "GroupRandomHorizontalFlip", "(", "is_flow", "=", "False", ")", "]", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset_config.return_egaze1": [[17, 28], ["NotImplementedError"], "function", ["None"], ["def", "return_egaze1", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "106", "\n", "# filename_categories = 'soccer_allframe256_v2j/soccer_classInd.txt'", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET2", "\n", "filename_imglist_train", "=", "root_data", "+", "'EGTEA_Gaze+/trainValTest/train1.txt'", "\n", "filename_imglist_val", "=", "root_data", "+", "'EGTEA_Gaze+/trainValTest/val1.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset_config.return_egaze2": [[29, 40], ["NotImplementedError"], "function", ["None"], ["", "def", "return_egaze2", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "106", "\n", "# filename_categories = 'soccer_allframe256_v2j/soccer_classInd.txt'", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET2", "\n", "filename_imglist_train", "=", "root_data", "+", "'EGTEA_Gaze+/trainValTest/train2.txt'", "\n", "filename_imglist_val", "=", "root_data", "+", "'EGTEA_Gaze+/trainValTest/val2.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset_config.return_egaze3": [[41, 52], ["NotImplementedError"], "function", ["None"], ["", "def", "return_egaze3", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "106", "\n", "# filename_categories = 'soccer_allframe256_v2j/soccer_classInd.txt'", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET2", "\n", "filename_imglist_train", "=", "root_data", "+", "'EGTEA_Gaze+/trainValTest/train3.txt'", "\n", "filename_imglist_val", "=", "root_data", "+", "'EGTEA_Gaze+/trainValTest/val3.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset_config.return_diving48": [[53, 64], ["NotImplementedError"], "function", ["None"], ["", "def", "return_diving48", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "48", "\n", "# filename_categories = 'soccer_allframe256_v2j/soccer_classInd.txt'", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "\n", "filename_imglist_train", "=", "root_data", "+", "'diving48/trainValTest/train.txt'", "\n", "filename_imglist_val", "=", "root_data", "+", "'diving48/trainValTest/val.txt'", "\n", "prefix", "=", "'{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset_config.return_basketball": [[66, 78], ["NotImplementedError"], "function", ["None"], ["", "def", "return_basketball", "(", "modality", ")", ":", "\n", "# filename_categories = 'basketball_allframe256_v2j/basketball_classInd.txt'", "\n", "    ", "filename_categories", "=", "8", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "\n", "\n", "filename_imglist_train", "=", "'/vireo00/yanbin2/Sport_Video/videos_our/TraValTes/basketball_tsm/train.txt'", "\n", "filename_imglist_val", "=", "'/vireo00/yanbin2/Sport_Video/videos_our/TraValTes/basketball_tsm/val.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset_config.return_soccer": [[80, 91], ["NotImplementedError"], "function", ["None"], ["", "def", "return_soccer", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "10", "\n", "# filename_categories = 'soccer_allframe256_v2j/soccer_classInd.txt'", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "frameFolder1", "\n", "filename_imglist_train", "=", "'/vireo00/yanbin2/Sport_Video/videos_our/TraValTes/soccer_tsm/train.txt'", "\n", "filename_imglist_val", "=", "'/vireo00/yanbin2/Sport_Video/videos_our/TraValTes/soccer_tsm/val.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "", "\"\"\"-------------------------------------------------------------------------------------\"\"\"", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset_config.return_ucf101": [[94, 106], ["NotImplementedError"], "function", ["None"], ["def", "return_ucf101", "(", "modality", ")", ":", "\n", "# filename_categories = 'UCF101/labels/classInd.txt'", "\n", "    ", "filename_categories", "=", "101", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "\"/vireo00/yanbin2/Sport_Video/UCF\"", "\n", "\n", "filename_imglist_train", "=", "'/vireo00/yanbin2/Sport_Video/UCF/traval_tsm/train.txt'", "\n", "filename_imglist_val", "=", "'/vireo00/yanbin2/Sport_Video/UCF/traval_tsm/val.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset_config.return_hmdb51": [[108, 123], ["NotImplementedError"], "function", ["None"], ["", "def", "return_hmdb51", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "51", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'HMDB51/images'", "\n", "filename_imglist_train", "=", "'HMDB51/splits/hmdb51_rgb_train_split_1.txt'", "\n", "filename_imglist_val", "=", "'HMDB51/splits/hmdb51_rgb_val_split_1.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "elif", "modality", "==", "'Flow'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'HMDB51/images'", "\n", "filename_imglist_train", "=", "'HMDB51/splits/hmdb51_flow_train_split_1.txt'", "\n", "filename_imglist_val", "=", "'HMDB51/splits/hmdb51_flow_val_split_1.txt'", "\n", "prefix", "=", "'flow_{}_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset_config.return_somethingv1": [[125, 142], ["print"], "function", ["None"], ["", "def", "return_somethingv1", "(", "modality", ")", ":", "\n", "# filename_categories = 'something/v1/category.txt'", "\n", "    ", "filename_categories", "=", "174", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "\n", "filename_imglist_train", "=", "root_data", "+", "'some_some_v1/trainValTest/train.txt'", "\n", "filename_imglist_val", "=", "root_data", "+", "'some_some_v1/trainValTest/val.txt'", "\n", "prefix", "=", "'{:05d}.jpg'", "\n", "# elif modality == 'Flow':", "\n", "#     root_data = ROOT_DATASET + 'something/v1/20bn-something-something-v1-flow'", "\n", "#     filename_imglist_train = 'something/v1/train_videofolder_flow.txt'", "\n", "#     filename_imglist_val = 'something/v1/val_videofolder_flow.txt'", "\n", "#     prefix = '{:06d}-{}_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "print", "(", "'no such modality:'", "+", "modality", ")", "\n", "raise", "NotImplementedError", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset_config.return_somethingv2": [[144, 160], ["NotImplementedError"], "function", ["None"], ["", "def", "return_somethingv2", "(", "modality", ")", ":", "\n", "# filename_categories = 'something/v2/category.txt'", "\n", "    ", "filename_categories", "=", "174", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "\n", "filename_imglist_train", "=", "root_data", "+", "'some_some_v2/trainValTest/train.txt'", "\n", "filename_imglist_val", "=", "root_data", "+", "'some_some_v2/trainValTest/val.txt'", "\n", "prefix", "=", "'{:06d}.jpg'", "\n", "# elif modality == 'Flow':", "\n", "#     root_data = ROOT_DATASET + 'something/v2/20bn-something-something-v2-flow'", "\n", "#     filename_imglist_train = 'something/v2/train_videofolder_flow.txt'", "\n", "#     filename_imglist_val = 'something/v2/val_videofolder_flow.txt'", "\n", "#     prefix = '{:06d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset_config.return_jester": [[162, 172], ["NotImplementedError"], "function", ["None"], ["", "def", "return_jester", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "'jester/category.txt'", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "prefix", "=", "'{:05d}.jpg'", "\n", "root_data", "=", "ROOT_DATASET", "+", "'jester/20bn-jester-v1'", "\n", "filename_imglist_train", "=", "'jester/train_videofolder.txt'", "\n", "filename_imglist_val", "=", "'jester/val_videofolder.txt'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset_config.return_kinetics": [[174, 184], ["NotImplementedError"], "function", ["None"], ["", "def", "return_kinetics", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "400", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "\n", "filename_imglist_train", "=", "root_data", "+", "'kinetics400_mmlab/trainValTest/train.txt'", "\n", "filename_imglist_val", "=", "root_data", "+", "'kinetics400_mmlab/trainValTest/val.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset_config.return_kineticsmini1": [[186, 196], ["NotImplementedError"], "function", ["None"], ["", "def", "return_kineticsmini1", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "100", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "\n", "filename_imglist_train", "=", "'/data/vireodata/video_data/kinetics400/mini_kinetics_100/train.txt'", "\n", "filename_imglist_val", "=", "'/data/vireodata/video_data/kinetics400/mini_kinetics_100/val.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset_config.return_kineticsmini2": [[197, 207], ["NotImplementedError"], "function", ["None"], ["", "def", "return_kineticsmini2", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "200", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "\n", "filename_imglist_train", "=", "'/data/vireodata/video_data/kinetics400/mini-kinetics-200/train.txt'", "\n", "filename_imglist_val", "=", "'/data/vireodata/video_data/kinetics400/mini-kinetics-200/val.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset_config.return_dataset": [[208, 233], ["isinstance", "len", "print", "ValueError", "os.path.join", "open", "f.readlines", "item.rstrip"], "function", ["None"], ["", "def", "return_dataset", "(", "dataset", ",", "modality", ")", ":", "\n", "    ", "dict_single", "=", "{", "'jester'", ":", "return_jester", ",", "'somethingv1'", ":", "return_somethingv1", ",", "'somethingv2'", ":", "return_somethingv2", ",", "\n", "'ucf101'", ":", "return_ucf101", ",", "'hmdb51'", ":", "return_hmdb51", ",", "\n", "'kinetics'", ":", "return_kinetics", ",", "'kineticsmini1'", ":", "return_kineticsmini1", ",", "'kineticsmini2'", ":", "return_kineticsmini2", ",", "\n", "### CUSTOM_DATASET", "\n", "'basketball'", ":", "return_basketball", ",", "'soccer'", ":", "return_soccer", ",", "'diving48'", ":", "return_diving48", ",", "\n", "'egaze1'", ":", "return_egaze1", ",", "'egaze2'", ":", "return_egaze2", ",", "'egaze3'", ":", "return_egaze3", "\n", "}", "\n", "if", "dataset", "in", "dict_single", ":", "\n", "        ", "file_categories", ",", "file_imglist_train", ",", "file_imglist_val", ",", "root_data", ",", "prefix", "=", "dict_single", "[", "dataset", "]", "(", "modality", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown dataset '", "+", "dataset", ")", "\n", "\n", "# file_imglist_train = os.path.join(ROOT_DATASET, file_imglist_train)", "\n", "# file_imglist_val = os.path.join(ROOT_DATASET, file_imglist_val)", "\n", "", "if", "isinstance", "(", "file_categories", ",", "str", ")", ":", "\n", "        ", "file_categories", "=", "os", ".", "path", ".", "join", "(", "ROOT_DATASET", ",", "file_categories", ")", "\n", "with", "open", "(", "file_categories", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "categories", "=", "[", "item", ".", "rstrip", "(", ")", "for", "item", "in", "lines", "]", "\n", "", "else", ":", "# number of categories", "\n", "        ", "categories", "=", "[", "None", "]", "*", "file_categories", "\n", "", "n_class", "=", "len", "(", "categories", ")", "\n", "print", "(", "'{}: {} classes'", ".", "format", "(", "dataset", ",", "n_class", ")", ")", "\n", "return", "n_class", ",", "file_imglist_train", ",", "file_imglist_val", ",", "root_data", ",", "prefix", "\n", "", ""]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.VideoRecord.__init__": [[15, 17], ["None"], "methods", ["None"], ["        ", "self", ".", "_data", "=", "row", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.VideoRecord.path": [[18, 21], ["None"], "methods", ["None"], ["def", "path", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "[", "0", "]", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.VideoRecord.num_frames": [[22, 25], ["int"], "methods", ["None"], ["def", "num_frames", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "_data", "[", "1", "]", ")", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.VideoRecord.label": [[26, 29], ["int"], "methods", ["None"], ["def", "label", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "_data", "[", "-", "1", "]", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.TSNDataSet.__init__": [[32, 59], ["dataset.TSNDataSet._parse_list", "print", "print"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.TSNDataSet._parse_list"], ["num_segments", "=", "3", ",", "new_length", "=", "5", ",", "clip_index", "=", "0", ",", "modality", "=", "'RGB'", ",", "\n", "image_tmpl", "=", "'img_{:05d}.jpg'", ",", "transform", "=", "None", ",", "\n", "random_shift", "=", "True", ",", "test_mode", "=", "False", ",", "\n", "remove_missing", "=", "False", ",", "dense_sample", "=", "False", ",", "twice_sample", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "list_file", "=", "list_file", "\n", "self", ".", "clip_index", "=", "clip_index", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "new_length", "=", "new_length", "\n", "self", ".", "modality", "=", "modality", "\n", "self", ".", "image_tmpl", "=", "image_tmpl", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "random_shift", "=", "random_shift", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "remove_missing", "=", "remove_missing", "\n", "self", ".", "I3D_sample", "=", "False", "# using dense sample as I3D", "\n", "self", ".", "dense_sample", "=", "dense_sample", "# using dense sample as I3D", "\n", "self", ".", "twice_sample", "=", "twice_sample", "# twice sample for more validation", "\n", "if", "self", ".", "dense_sample", ":", "\n", "            ", "print", "(", "'=> Using dense sample for the dataset...'", ")", "\n", "\n", "", "self", ".", "_parse_list", "(", ")", "\n", "\n", "", "def", "_load_image", "(", "self", ",", "directory", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "modality", "==", "'RGB'", ":", "\n", "            ", "try", ":", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.TSNDataSet._load_image": [[60, 93], ["PIL.Image.open().convert", "print", "PIL.Image.open().convert", "PIL.Image.open().convert", "os.path.join", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert.split", "flow_x.convert", "flow_y.convert", "PIL.Image.open", "dataset.TSNDataSet.image_tmpl.format", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open().convert", "os.path.join", "PIL.Image.open", "os.path.join", "os.path.join", "PIL.Image.open", "PIL.Image.open", "print", "PIL.Image.open().convert", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "dataset.TSNDataSet.image_tmpl.format", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "os.path.join", "PIL.Image.open", "os.path.join", "dataset.TSNDataSet.image_tmpl.format", "dataset.TSNDataSet.image_tmpl.format", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "dataset.TSNDataSet.image_tmpl.format", "PIL.Image.open", "int", "int", "int", "int", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "dataset.TSNDataSet.image_tmpl.format"], "methods", ["None"], ["                ", "return", "[", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "idx", ")", ")", ")", ".", "convert", "(", "'RGB'", ")", "]", "\n", "", "except", "Exception", ":", "\n", "                ", "print", "(", "'error loading image:'", ",", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "idx", ")", ")", ")", "\n", "return", "[", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "1", ")", ")", ")", ".", "convert", "(", "'RGB'", ")", "]", "\n", "\n", "", "", "", "def", "_parse_list", "(", "self", ")", ":", "\n", "# check the frame number is large >3:", "\n", "        ", "tmp", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "for", "x", "in", "open", "(", "self", ".", "list_file", ")", "]", "\n", "if", "len", "(", "tmp", "[", "0", "]", ")", "==", "3", ":", "# skip remove_missin for decording \"raw_video label\" type dataset_config", "\n", "            ", "if", "not", "self", ".", "test_mode", "or", "self", ".", "remove_missing", ":", "\n", "                ", "tmp", "=", "[", "item", "for", "item", "in", "tmp", "if", "int", "(", "item", "[", "1", "]", ")", ">=", "8", "]", "\n", "", "", "self", ".", "video_list", "=", "[", "VideoRecord", "(", "item", ")", "for", "item", "in", "tmp", "]", "\n", "\n", "if", "self", ".", "image_tmpl", "==", "'{:06d}-{}_{:05d}.jpg'", ":", "\n", "            ", "for", "v", "in", "self", ".", "video_list", ":", "\n", "                ", "v", ".", "_data", "[", "1", "]", "=", "int", "(", "v", ".", "_data", "[", "1", "]", ")", "/", "2", "\n", "", "", "print", "(", "'video number:%d'", "%", "(", "len", "(", "self", ".", "video_list", ")", ")", ")", "\n", "\n", "", "def", "_sample_indices", "(", "self", ",", "video_list", ")", ":", "\n", "        ", "if", "not", "self", ".", "I3D_sample", ":", "# TSN uniformly sampling for TDN", "\n", "            ", "if", "(", "(", "len", "(", "video_list", ")", "-", "self", ".", "new_length", "+", "1", ")", "<", "self", ".", "num_segments", ")", ":", "\n", "                ", "average_duration", "=", "(", "len", "(", "video_list", ")", "-", "5", "+", "1", ")", "//", "(", "self", ".", "num_segments", ")", "\n", "", "else", ":", "\n", "                ", "average_duration", "=", "(", "len", "(", "video_list", ")", "-", "self", ".", "new_length", "+", "1", ")", "//", "(", "self", ".", "num_segments", ")", "\n", "", "offsets", "=", "[", "]", "\n", "if", "average_duration", ">", "0", ":", "\n", "                ", "offsets", "+=", "list", "(", "np", ".", "multiply", "(", "list", "(", "range", "(", "self", ".", "num_segments", ")", ")", ",", "average_duration", ")", "+", "randint", "(", "average_duration", ",", "size", "=", "self", ".", "num_segments", ")", ")", "\n", "", "elif", "len", "(", "video_list", ")", ">", "self", ".", "num_segments", ":", "\n", "                ", "if", "(", "(", "len", "(", "video_list", ")", "-", "self", ".", "new_length", "+", "1", ")", ">=", "self", ".", "num_segments", ")", ":", "\n", "                    ", "offsets", "+=", "list", "(", "np", ".", "sort", "(", "randint", "(", "len", "(", "video_list", ")", "-", "self", ".", "new_length", "+", "1", ",", "size", "=", "self", ".", "num_segments", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "offsets", "+=", "list", "(", "np", ".", "sort", "(", "randint", "(", "len", "(", "video_list", ")", "-", "5", "+", "1", ",", "size", "=", "self", ".", "num_segments", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "offsets", "+=", "list", "(", "np", ".", "zeros", "(", "(", "self", ".", "num_segments", ",", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.TSNDataSet._parse_list": [[94, 105], ["print", "x.strip().split", "dataset.VideoRecord", "open", "len", "x.strip", "int", "int"], "methods", ["None"], ["", "offsets", "=", "np", ".", "array", "(", "offsets", ")", "\n", "return", "offsets", "+", "1", "\n", "", "elif", "self", ".", "dataset", "==", "'kinetics'", "and", "self", ".", "I3D_sample", "and", "(", "not", "self", ".", "dense_sample", ")", ":", "# i3d type sampling for training", "\n", "            ", "sample_pos", "=", "max", "(", "1", ",", "1", "+", "len", "(", "video_list", ")", "-", "self", ".", "new_length", "-", "64", ")", "\n", "t_stride", "=", "64", "//", "self", ".", "num_segments", "\n", "start_idx1", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "offsets", "=", "[", "(", "idx", "*", "t_stride", "+", "start_idx1", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "\n", "return", "np", ".", "array", "(", "offsets", ")", "+", "1", "\n", "", "elif", "self", ".", "dense_sample", ":", "# i3d dense sample for test", "\n", "            ", "sample_pos", "=", "max", "(", "1", ",", "1", "+", "len", "(", "video_list", ")", "-", "self", ".", "new_length", "-", "64", ")", "\n", "t_stride", "=", "64", "//", "self", ".", "num_segments", "\n", "start_idx1", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.TSNDataSet._sample_indices": [[106, 128], ["max", "numpy.random.randint", "numpy.array", "range", "numpy.multiply", "numpy.random.randint", "numpy.sort", "numpy.zeros", "list", "numpy.random.randint", "range"], "methods", ["None"], ["start_idx2", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "start_idx3", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "start_idx4", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "start_idx5", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "start_idx6", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "start_idx7", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "start_idx8", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "start_idx9", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "start_idx10", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "offsets", "=", "[", "(", "idx", "*", "t_stride", "+", "start_idx1", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "+", "[", "(", "idx", "*", "t_stride", "+", "start_idx2", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "+", "[", "(", "idx", "*", "t_stride", "+", "start_idx3", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "+", "[", "(", "idx", "*", "t_stride", "+", "start_idx4", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "+", "[", "(", "idx", "*", "t_stride", "+", "start_idx5", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "+", "[", "(", "idx", "*", "t_stride", "+", "start_idx6", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "+", "[", "(", "idx", "*", "t_stride", "+", "start_idx7", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "+", "[", "(", "idx", "*", "t_stride", "+", "start_idx8", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "+", "[", "(", "idx", "*", "t_stride", "+", "start_idx9", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "+", "[", "(", "idx", "*", "t_stride", "+", "start_idx10", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "\n", "return", "np", ".", "array", "(", "offsets", ")", "+", "1", "\n", "\n", "\n", "", "", "def", "_get_val_indices", "(", "self", ",", "video_list", ")", ":", "\n", "        ", "if", "self", ".", "dense_sample", ":", "# i3d dense sample", "\n", "            ", "sample_pos", "=", "max", "(", "1", ",", "1", "+", "len", "(", "video_list", ")", "-", "64", ")", "\n", "t_stride", "=", "64", "//", "self", ".", "num_segments", "\n", "start_idx", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "offsets", "=", "[", "(", "idx", "*", "t_stride", "+", "start_idx", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "\n", "return", "np", ".", "array", "(", "offsets", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "video_list", ")", ">", "self", ".", "num_segments", "+", "self", ".", "new_length", "-", "1", ":", "\n", "                ", "tick", "=", "(", "len", "(", "video_list", ")", "-", "self", ".", "new_length", "+", "1", ")", "/", "float", "(", "self", ".", "num_segments", ")", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.TSNDataSet._get_val_indices": [[129, 143], ["max", "numpy.random.randint", "numpy.array", "numpy.array", "numpy.zeros", "range", "float", "int", "range"], "methods", ["None"], ["offsets", "=", "np", ".", "array", "(", "[", "int", "(", "tick", "/", "2.0", "+", "tick", "*", "x", ")", "for", "x", "in", "range", "(", "self", ".", "num_segments", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "offsets", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_segments", ",", ")", ")", "\n", "", "return", "offsets", "+", "1", "\n", "\n", "", "", "def", "_get_test_indices", "(", "self", ",", "video_list", ")", ":", "\n", "        ", "if", "self", ".", "dense_sample", ":", "# i3d dense sample", "\n", "            ", "sample_pos", "=", "max", "(", "1", ",", "1", "+", "len", "(", "video_list", ")", "-", "64", ")", "\n", "t_stride", "=", "64", "//", "self", ".", "num_segments", "\n", "start_idx", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "offsets", "=", "[", "(", "idx", "*", "t_stride", "+", "start_idx", ")", "%", "len", "(", "video_list", ")", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "\n", "return", "np", ".", "array", "(", "offsets", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "video_list", ")", ">", "self", ".", "num_segments", "+", "self", ".", "new_length", "-", "1", ":", "\n", "                ", "tick", "=", "(", "len", "(", "video_list", ")", "-", "self", ".", "new_length", "+", "1", ")", "/", "float", "(", "self", ".", "num_segments", ")", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.TSNDataSet._get_test_indices": [[144, 164], ["max", "numpy.linspace", "numpy.linspace.tolist", "numpy.array", "numpy.array", "numpy.array", "float", "float", "range", "int", "int", "int", "range", "range", "range"], "methods", ["None"], ["offsets", "=", "np", ".", "array", "(", "[", "int", "(", "tick", "/", "2.0", "+", "tick", "*", "x", ")", "for", "x", "in", "range", "(", "self", ".", "num_segments", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "offsets", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_segments", ",", ")", ")", "\n", "", "return", "offsets", "+", "1", "\n", "\n", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "record", "=", "self", ".", "video_list", "[", "index", "]", "\n", "\n", "if", "(", "'kinetics'", "not", "in", "self", ".", "dataset", ")", ":", "\n", "            ", "decode_boo", "=", "False", "\n", "# print(record.path)", "\n", "video_list", "=", "os", ".", "listdir", "(", "self", ".", "root_path", "+", "record", ".", "path", ")", "\n", "\n", "", "else", ":", "\n", "            ", "decode_boo", "=", "True", "\n", "try", ":", "\n", "                ", "directory", "=", "record", ".", "path", "\n", "if", "directory", "[", "-", "4", ":", "]", "!=", "\".mp4\"", ":", "\n", "                    ", "video_path", "=", "directory", "+", "\".mp4\"", "\n", "", "else", ":", "\n", "                    ", "video_path", "=", "directory", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.TSNDataSet.__getitem__": [[165, 198], ["dataset.TSNDataSet.get", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "os.path.exists", "print", "numpy.random.randint", "dataset.TSNDataSet._get_test_indices", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "os.path.join", "len", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "dataset.TSNDataSet._sample_indices", "dataset.TSNDataSet._get_val_indices", "int", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.TSNDataSet.get", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.TSNDataSet._get_test_indices", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.TSNDataSet._sample_indices", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.TSNDataSet._get_val_indices"], ["", "video_list", "=", "decord", ".", "VideoReader", "(", "video_path", ")", "\n", "", "except", "UnicodeDecodeError", ":", "\n", "                ", "decode_boo", "=", "False", "\n", "video_list", "=", "os", ".", "listdir", "(", "record", ".", "path", ")", "\n", "\n", "\n", "", "", "if", "not", "self", ".", "test_mode", ":", "\n", "            ", "if", "self", ".", "I3D_sample", ":", "\n", "                ", "segment_indices", "=", "self", ".", "_sample_indices", "(", "video_list", ")", "\n", "", "else", ":", "\n", "                ", "segment_indices", "=", "self", ".", "_sample_indices", "(", "video_list", ")", "if", "self", ".", "random_shift", "else", "self", ".", "_get_val_indices", "(", "video_list", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "dataset", "==", "'kinetics'", ":", "\n", "                ", "segment_indices", "=", "self", ".", "_sample_indices", "(", "video_list", ")", "\n", "", "else", ":", "\n", "                ", "segment_indices", "=", "self", ".", "_get_test_indices", "(", "video_list", ")", "\n", "\n", "\n", "", "", "return", "self", ".", "get", "(", "record", ",", "video_list", ",", "segment_indices", ",", "decode_boo", ")", "\n", "\n", "", "def", "get", "(", "self", ",", "record", ",", "video_list", ",", "indices", ",", "decode_boo", ")", ":", "\n", "        ", "images", "=", "list", "(", ")", "\n", "for", "seg_ind", "in", "indices", ":", "\n", "            ", "p", "=", "int", "(", "seg_ind", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "new_length", ",", "1", ")", ":", "\n", "                ", "if", "(", "decode_boo", ")", ":", "\n", "                    ", "seg_imgs", "=", "[", "Image", ".", "fromarray", "(", "video_list", "[", "p", "-", "1", "]", ".", "asnumpy", "(", ")", ")", ".", "convert", "(", "'RGB'", ")", "]", "\n", "", "else", ":", "\n", "                    ", "seg_imgs", "=", "self", ".", "_load_image", "(", "record", ".", "path", ",", "p", ")", "\n", "", "images", ".", "extend", "(", "seg_imgs", ")", "\n", "if", "(", "(", "len", "(", "video_list", ")", "-", "self", ".", "new_length", "*", "1", "+", "1", ")", ">=", "8", ")", ":", "\n", "                    ", "if", "p", "<", "(", "len", "(", "video_list", ")", ")", ":", "\n", "                        ", "p", "+=", "1", "\n", "", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.TSNDataSet.get": [[199, 212], ["list", "dataset.TSNDataSet.transform", "int", "range", "dataset.TSNDataSet._load_image", "list.extend"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.TSNDataSet._load_image"], ["                    ", "if", "p", "<", "(", "len", "(", "video_list", ")", ")", ":", "\n", "                        ", "p", "+=", "1", "\n", "\n", "", "", "", "", "process_data", ",", "record_label", "=", "self", ".", "transform", "(", "(", "images", ",", "record", ".", "label", ")", ")", "\n", "\n", "return", "process_data", ",", "record_label", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "video_list", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.dataset.TSNDataSet.__len__": [[213, 215], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.basic_ops.Identity.forward": [[5, 7], ["None"], "methods", ["None"], ["\n", "import", "torch", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.basic_ops.SegmentConsensus.__init__": [[11, 16], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["\n", "", "", "class", "SegmentConsensus", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "consensus_type", ",", "dim", "=", "1", ")", ":", "\n", "        ", "super", "(", "SegmentConsensus", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "consensus_type", "=", "consensus_type", "\n", "self", ".", "dim", "=", "dim", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.basic_ops.SegmentConsensus.forward": [[17, 27], ["input_tensor.size", "input_tensor.mean"], "methods", ["None"], ["self", ".", "shape", "=", "None", "\n", "\n", "", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "self", ".", "shape", "=", "input_tensor", ".", "size", "(", ")", "\n", "if", "self", ".", "consensus_type", "==", "'avg'", ":", "\n", "            ", "output", "=", "input_tensor", ".", "mean", "(", "dim", "=", "self", ".", "dim", ",", "keepdim", "=", "True", ")", "\n", "", "elif", "self", ".", "consensus_type", "==", "'identity'", ":", "\n", "            ", "output", "=", "input_tensor", "\n", "", "else", ":", "\n", "            ", "output", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.basic_ops.ConsensusModule.__init__": [[31, 35], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["", "", "class", "ConsensusModule", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "consensus_type", ",", "dim", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConsensusModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "consensus_type", "=", "consensus_type", "if", "consensus_type", "!=", "'rnn'", "else", "'identity'", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.basic_ops.ConsensusModule.forward": [[36, 38], ["basic_ops.SegmentConsensus"], "methods", ["None"], ["self", ".", "dim", "=", "dim", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.__init__": [[12, 14], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.reset"], ["    ", "es", "=", "np", ".", "exp", "(", "scores", "-", "scores", ".", "max", "(", "axis", "=", "-", "1", ")", "[", "...", ",", "None", "]", ")", "\n", "return", "es", "/", "es", ".", "sum", "(", "axis", "=", "-", "1", ")", "[", "...", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.reset": [[15, 20], ["None"], "methods", ["None"], ["\n", "", "def", "get_grad_hook", "(", "name", ")", ":", "\n", "    ", "def", "hook", "(", "m", ",", "grad_in", ",", "grad_out", ")", ":", "\n", "        ", "print", "(", "(", "name", ",", "grad_out", "[", "0", "]", ".", "data", ".", "abs", "(", ")", ".", "mean", "(", ")", ",", "\n", "grad_in", "[", "0", "]", ".", "data", ".", "abs", "(", ")", ".", "mean", "(", ")", ")", ")", "\n", "print", "(", "(", "grad_out", "[", "0", "]", ".", "size", "(", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update": [[21, 26], ["None"], "methods", ["None"], ["print", "(", "(", "grad_in", "[", "0", "]", ".", "size", "(", ")", ")", ")", "\n", "print", "(", "(", "grad_out", "[", "0", "]", ")", ")", "\n", "print", "(", "(", "grad_in", "[", "0", "]", ")", ")", "\n", "\n", "", "return", "hook", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.softmax": [[4, 7], ["numpy.exp", "np.exp.sum", "scores.max"], "function", ["None"], ["# tongzhan@smail.nju.edu.cn", "\n", "\n", "import", "numpy", "as", "np", "\n", "import", "torch", ".", "distributed", "as", "dist", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.accuracy": [[28, 43], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "correct.contiguous.contiguous", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "log_add", "(", "log_a", ",", "log_b", ")", ":", "\n", "    ", "return", "log_a", "+", "np", ".", "log", "(", "1", "+", "np", ".", "exp", "(", "log_b", "-", "log_a", ")", ")", "\n", "\n", "\n", "", "def", "class_accuracy", "(", "prediction", ",", "label", ")", ":", "\n", "    ", "cf", "=", "confusion_matrix", "(", "prediction", ",", "label", ")", "\n", "cls_cnt", "=", "cf", ".", "sum", "(", "axis", "=", "1", ")", "\n", "cls_hit", "=", "np", ".", "diag", "(", "cf", ")", "\n", "cls_acc", "=", "cls_hit", "/", "cls_cnt", ".", "astype", "(", "float", ")", "\n", "mean_cls_acc", "=", "cls_acc", ".", "mean", "(", ")", "\n", "return", "cls_acc", ",", "mean_cls_acc", "\n", "\n", "\n", "", "def", "reduce_tensor", "(", "tensor", ")", ":", "\n", "    ", "rt", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "rt", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.Calibrator3D.GC_L33Dnb.__init__": [[11, 19], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Sigmoid", "torch.Sigmoid", "torch.init.xavier_normal_", "torch.init.xavier_normal_"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ")", ":", "\n", "        ", "super", "(", "GC_L33Dnb", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.num_segments = num_segments", "\n", "self", ".", "conv", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "(", "3", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ",", "0", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "# nn.init.kaiming_normal_(self.conv.weight, mode='fan_out', nonlinearity='relu')", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "conv", ".", "weight", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.Calibrator3D.GC_L33Dnb.forward": [[21, 27], ["Calibrator3D.GC_L33Dnb.conv", "Calibrator3D.GC_L33Dnb.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv", "(", "x", ")", "\n", "y", "=", "self", ".", "sigmoid", "(", "y", ")", "\n", "x", "=", "x", "*", "y", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.Calibrator3D.GC_T13Dnb.__init__": [[30, 38], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv1d", "torch.Conv1d", "torch.Sigmoid", "torch.Sigmoid", "torch.init.xavier_normal_", "torch.init.xavier_normal_"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ")", ":", "\n", "        ", "super", "(", "GC_T13Dnb", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.num_segments = num_segments", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "conv", ".", "weight", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.Calibrator3D.GC_T13Dnb.forward": [[39, 49], ["x.size", "x.reshape().contiguous", "Calibrator3D.GC_T13Dnb.avg_pool().view", "Calibrator3D.GC_T13Dnb.conv", "Calibrator3D.GC_T13Dnb.sigmoid", "y.view.view.view", "y.view.view.expand_as", "x.reshape", "Calibrator3D.GC_T13Dnb.avg_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bn", ",", "c", ",", "t", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "x", ".", "reshape", "(", "bn", "*", "c", ",", "t", ",", "h", ",", "w", ")", ".", "contiguous", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "y", ")", ".", "view", "(", "bn", ",", "c", ",", "t", ")", "\n", "y", "=", "self", ".", "conv", "(", "y", ")", "\n", "y", "=", "self", ".", "sigmoid", "(", "y", ")", "\n", "y", "=", "y", ".", "view", "(", "bn", ",", "c", ",", "t", ",", "1", ",", "1", ")", "\n", "x", "=", "x", "*", "y", ".", "expand_as", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.Calibrator3D.GC_S23DDnb.__init__": [[52, 61], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.init.xavier_normal_", "torch.init.xavier_normal_"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ")", ":", "\n", "        ", "super", "(", "GC_S23DDnb", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#", "\n", "# self.num_segments = num_segments", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "dilation", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "# nn.init.kaiming_normal_(self.conv.weight, mode='fan_out', nonlinearity='relu')", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "conv", ".", "weight", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.Calibrator3D.GC_S23DDnb.forward": [[63, 71], ["x.size", "x.mean().squeeze", "Calibrator3D.GC_S23DDnb.conv", "Calibrator3D.GC_S23DDnb.sigmoid().view", "Calibrator3D.GC_S23DDnb.expand_as", "x.mean", "Calibrator3D.GC_S23DDnb.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bn", ",", "c", ",", "t", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "x", ".", "mean", "(", "dim", "=", "2", ")", ".", "squeeze", "(", "2", ")", "\n", "y", "=", "self", ".", "conv", "(", "y", ")", "\n", "y", "=", "self", ".", "sigmoid", "(", "y", ")", ".", "view", "(", "bn", ",", "c", ",", "1", ",", "h", ",", "w", ")", "\n", "x", "=", "x", "*", "y", ".", "expand_as", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.Calibrator3D.GC_CLLDnb.__init__": [[74, 82], ["torch.Module.__init__", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.init.normal_", "torch.init.normal_"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ")", ":", "\n", "        ", "super", "(", "GC_CLLDnb", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.num_segments = num_segments", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "1", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Linear", "(", "inplanes", ",", "planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "conv", ".", "weight", ",", "0", ",", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.Calibrator3D.GC_CLLDnb.forward": [[83, 91], ["x.size", "Calibrator3D.GC_CLLDnb.avg_pool().view", "Calibrator3D.GC_CLLDnb.conv", "Calibrator3D.GC_CLLDnb.sigmoid().view", "Calibrator3D.GC_CLLDnb.expand_as", "Calibrator3D.GC_CLLDnb.avg_pool", "Calibrator3D.GC_CLLDnb.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bn", ",", "c", ",", "t", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "bn", ",", "c", ")", "\n", "y", "=", "self", ".", "conv", "(", "y", ")", "\n", "y", "=", "self", ".", "sigmoid", "(", "y", ")", ".", "view", "(", "bn", ",", "c", ",", "1", ",", "1", ",", "1", ")", "\n", "x", "=", "x", "*", "y", ".", "expand_as", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.ECal_TSN.Bottleneck.__init__": [[37, 57], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "print", "EF"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "EF", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "use_ef", "=", "False", ",", "cdiv", "=", "8", ",", "num_segments", "=", "8", ",", "loop_id", "=", "0", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_ef", "=", "use_ef", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "if", "self", ".", "use_ef", ":", "\n", "            ", "print", "(", "'=> Using Partial Channel Calibrator with cdiv: {}, loop_id: {}'", ".", "format", "(", "cdiv", ",", "loop_id", ")", ")", "\n", "# self.loop_id = loop_id", "\n", "self", ".", "eft_c", "=", "planes", "//", "cdiv", "\n", "self", ".", "eft", "=", "EF", "(", "self", ".", "eft_c", ",", "self", ".", "eft_c", ",", "num_segments", ")", "\n", "self", ".", "start_c", "=", "loop_id", "*", "self", ".", "eft_c", "\n", "self", ".", "end_c", "=", "self", ".", "start_c", "+", "self", ".", "eft_c", "\n", "", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.ECal_TSN.Bottleneck.forward": [[58, 90], ["ECal_TSN.Bottleneck.conv1", "ECal_TSN.Bottleneck.bn1", "ECal_TSN.Bottleneck.relu", "ECal_TSN.Bottleneck.conv2", "ECal_TSN.Bottleneck.bn2", "ECal_TSN.Bottleneck.relu", "ECal_TSN.Bottleneck.conv3", "ECal_TSN.Bottleneck.bn3", "ECal_TSN.Bottleneck.relu", "ECal_TSN.Bottleneck.eft", "ECal_TSN.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x = [bcz*n_seg, c, h, w]", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "#", "\n", "if", "self", ".", "use_ef", ":", "\n", "# new_out = torch.zeros_like(out)", "\n", "# new_out[:, self.start_c:self.end_c, :, :] = self.eft(out[:, self.start_c:self.end_c, :, :])", "\n", "# new_out[:, self.end_c:, :, :] = out[:, self.end_c:, :, :]", "\n", "# out = new_out", "\n", "            ", "out", "[", ":", ",", "self", ".", "start_c", ":", "self", ".", "end_c", ",", ":", ",", ":", "]", "=", "self", ".", "eft", "(", "out", "[", ":", ",", "self", ".", "start_c", ":", "self", ".", "end_c", ",", ":", ",", ":", "]", ")", "\n", "# out[:, self.eft_c:, :, :] = out[:, self.eft_c:, :, :]", "\n", "#", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.ECal_TSN.ResNet.__init__": [[94, 123], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "ECal_TSN.ResNet._make_layer", "ECal_TSN.ResNet._make_layer", "ECal_TSN.ResNet._make_layer", "ECal_TSN.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "ECal_TSN.ResNet.named_modules", "isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "EF", ",", "layers", ",", "num_classes", "=", "1000", ",", "cdiv", "=", "2", ",", "num_segments", "=", "8", ",", "loop", "=", "False", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "loop_id", "=", "0", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "loop", "=", "loop", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "EF", ",", "cdiv", "=", "cdiv", ",", "n_seg", "=", "num_segments", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "EF", ",", "stride", "=", "2", ",", "cdiv", "=", "cdiv", ",", "n_seg", "=", "num_segments", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "EF", ",", "stride", "=", "2", ",", "cdiv", "=", "cdiv", ",", "n_seg", "=", "num_segments", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "EF", ",", "stride", "=", "2", ",", "cdiv", "=", "cdiv", ",", "n_seg", "=", "num_segments", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "name", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "'eft'", "not", "in", "name", ":", "\n", "# if 'deconv' in name:", "\n", "#     nn.init.xavier_normal_(m.weight)", "\n", "# else:", "\n", "#     if isinstance(m, nn.Conv2d) or isinstance(m, nn.Conv3d) or isinstance(m, nn.ConvTranspose3d):", "\n", "#         nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.ECal_TSN.ResNet._make_layer": [[124, 157], ["print", "layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "print", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "layers.append", "layers.append", "block", "block"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "EF", ",", "stride", "=", "1", ",", "cdiv", "=", "2", ",", "n_seg", "=", "8", ")", ":", "\n", "        ", "print", "(", "'=> Processing stage with {} blocks'", ".", "format", "(", "blocks", ")", ")", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "EF", ",", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "True", ",", "cdiv", "=", "cdiv", ",", "num_segments", "=", "n_seg", ",", "loop_id", "=", "self", ".", "loop_id", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "if", "self", ".", "loop", ":", "\n", "            ", "self", ".", "loop_id", "=", "(", "self", ".", "loop_id", "+", "1", ")", "%", "cdiv", "\n", "\n", "#", "\n", "", "n_round", "=", "1", "\n", "if", "blocks", ">=", "23", ":", "\n", "            ", "n_round", "=", "2", "\n", "print", "(", "'=> Using n_round {} to insert Element Filter -T'", ".", "format", "(", "n_round", ")", ")", "\n", "#", "\n", "", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "if", "i", "%", "n_round", "==", "0", ":", "\n", "                ", "use_ef", "=", "True", "\n", "layers", ".", "append", "(", "block", "(", "EF", ",", "self", ".", "inplanes", ",", "planes", ",", "use_ef", "=", "use_ef", ",", "cdiv", "=", "cdiv", ",", "num_segments", "=", "n_seg", ",", "loop_id", "=", "self", ".", "loop_id", ")", ")", "\n", "if", "self", ".", "loop", ":", "\n", "                    ", "self", ".", "loop_id", "=", "(", "self", ".", "loop_id", "+", "1", ")", "%", "cdiv", "\n", "", "", "else", ":", "\n", "                ", "use_ef", "=", "False", "\n", "layers", ".", "append", "(", "block", "(", "EF", ",", "self", ".", "inplanes", ",", "planes", ",", "use_ef", "=", "use_ef", ",", "cdiv", "=", "cdiv", ",", "num_segments", "=", "n_seg", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.ECal_TSN.ResNet.forward": [[158, 174], ["ECal_TSN.ResNet.conv1", "ECal_TSN.ResNet.bn1", "ECal_TSN.ResNet.relu", "ECal_TSN.ResNet.maxpool", "ECal_TSN.ResNet.layer1", "ECal_TSN.ResNet.layer2", "ECal_TSN.ResNet.layer3", "ECal_TSN.ResNet.layer4", "ECal_TSN.ResNet.avgpool", "ECal_TSN.ResNet.view", "ECal_TSN.ResNet.fc", "ECal_TSN.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.ECal_TSN.resnet50": [[185, 200], ["getattr", "ECal_TSN.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "", "def", "resnet50", "(", "pretrained", "=", "False", ",", "EF", "=", "'GC_L33D'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "EF_name", "=", "getattr", "(", "EF_zoo", ",", "EF", ")", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "EF_name", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "checkpoint", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", "\n", "# checkpoint_keys = list(checkpoint.keys())", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "model_dict", ".", "update", "(", "checkpoint", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.ECal_TSN.resnet101": [[202, 216], ["getattr", "ECal_TSN.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "EF", "=", "'GC_L33D'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "EF_name", "=", "getattr", "(", "EF_zoo", ",", "EF", ")", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "EF_name", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "checkpoint", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", "\n", "# checkpoint_keys = list(checkpoint.keys())", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "model_dict", ".", "update", "(", "checkpoint", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.ECal_TSN.resnet152": [[218, 231], ["ECal_TSN.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "checkpoint", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", "\n", "# checkpoint_keys = list(checkpoint.keys())", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "model_dict", ".", "update", "(", "checkpoint", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.Calibrator2D.GC_L33D.__init__": [[10, 21], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Sigmoid", "torch.Sigmoid", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "num_segments", "=", "8", ")", ":", "\n", "        ", "super", "(", "GC_L33D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "conv", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "(", "3", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ",", "0", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "conv", ".", "weight", ")", "\n", "#", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bn1", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bn1", ".", "bias", ",", "0", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.Calibrator2D.GC_L33D.forward": [[22, 34], ["x.view.view.size", "x.view.view.view", "x.view.view.permute().contiguous", "Calibrator2D.GC_L33D.conv", "Calibrator2D.GC_L33D.bn1", "Calibrator2D.GC_L33D.sigmoid", "x.view.view.permute().contiguous", "x.view.view.view", "x.view.view.permute", "x.view.view.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bn", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "num_segments", ",", "c", ",", "h", ",", "w", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "y", "=", "self", ".", "conv", "(", "x", ")", "\n", "y", "=", "self", ".", "bn1", "(", "y", ")", "\n", "y", "=", "self", ".", "sigmoid", "(", "y", ")", "\n", "x", "=", "x", "*", "y", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "c", ",", "h", ",", "w", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.Calibrator2D.GC_T13D.__init__": [[37, 48], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Sigmoid", "torch.Sigmoid", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "num_segments", "=", "8", ")", ":", "\n", "        ", "super", "(", "GC_T13D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "planes", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "conv", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bn1", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bn1", ".", "bias", ",", "0", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.Calibrator2D.GC_T13D.forward": [[49, 62], ["x.size", "Calibrator2D.GC_T13D.avg_pool().view", "y.view.view.permute().contiguous", "Calibrator2D.GC_T13D.conv", "Calibrator2D.GC_T13D.bn1", "Calibrator2D.GC_T13D.sigmoid", "y.view.view.permute().contiguous", "y.view.view.view", "y.view.view.view", "y.view.view.expand_as", "Calibrator2D.GC_T13D.avg_pool", "y.view.view.permute", "y.view.view.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bn", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "-", "1", ",", "self", ".", "num_segments", ",", "c", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "y", "=", "self", ".", "conv", "(", "y", ")", "\n", "y", "=", "self", ".", "bn1", "(", "y", ")", "\n", "y", "=", "self", ".", "sigmoid", "(", "y", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "y", "=", "y", ".", "view", "(", "-", "1", ",", "self", ".", "num_segments", ",", "c", ",", "1", ",", "1", ")", "\n", "y", "=", "y", ".", "view", "(", "-", "1", ",", "c", ",", "1", ",", "1", ")", "\n", "x", "=", "x", "*", "y", ".", "expand_as", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.Calibrator2D.GC_S23DD.__init__": [[64, 77], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sigmoid", "torch.Sigmoid", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "num_segments", "=", "8", ")", ":", "\n", "        ", "super", "(", "GC_S23DD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#", "\n", "#", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "dilation", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "conv", ".", "weight", ")", "\n", "#", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bn1", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bn1", ".", "bias", ",", "0", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.Calibrator2D.GC_S23DD.forward": [[90, 99], ["x.view.view.size", "x.view.view.view", "x.view.view.mean().squeeze", "Calibrator2D.GC_S23DD.conv", "Calibrator2D.GC_S23DD.sigmoid().view", "x.view.view.view", "Calibrator2D.GC_S23DD.expand_as", "x.view.view.mean", "Calibrator2D.GC_S23DD.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bn", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "num_segments", ",", "c", ",", "h", ",", "w", ")", "\n", "y", "=", "x", ".", "mean", "(", "dim", "=", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "y", "=", "self", ".", "conv", "(", "y", ")", "\n", "y", "=", "self", ".", "sigmoid", "(", "y", ")", ".", "view", "(", "-", "1", ",", "1", ",", "c", ",", "h", ",", "w", ")", "\n", "x", "=", "x", "*", "y", ".", "expand_as", "(", "x", ")", "\n", "\n", "return", "x", ".", "view", "(", "-", "1", ",", "c", ",", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.Calibrator2D.GC_CLLD.__init__": [[102, 113], ["torch.Module.__init__", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Sigmoid", "torch.Sigmoid", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "num_segments", "=", "8", ")", ":", "\n", "        ", "super", "(", "GC_CLLD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "1", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Linear", "(", "inplanes", ",", "planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "planes", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "conv", ".", "weight", ",", "0", ",", "0.001", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bn1", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bn1", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.Calibrator2D.GC_CLLD.forward": [[114, 130], ["x.view.view.size", "x.view.view.view", "x.view.view.permute().contiguous", "Calibrator2D.GC_CLLD.avg_pool().view", "Calibrator2D.GC_CLLD.conv", "Calibrator2D.GC_CLLD.bn1", "Calibrator2D.GC_CLLD.sigmoid().view", "x.view.view.permute().contiguous", "x.view.view.view", "Calibrator2D.GC_CLLD.expand_as", "x.view.view.permute", "Calibrator2D.GC_CLLD.avg_pool", "Calibrator2D.GC_CLLD.sigmoid", "x.view.view.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bn", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "batch_size", "=", "bn", "//", "self", ".", "num_segments", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "self", ".", "num_segments", ",", "c", ",", "h", ",", "w", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "#", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "batch_size", ",", "c", ")", "\n", "y", "=", "self", ".", "conv", "(", "y", ")", "\n", "y", "=", "self", ".", "bn1", "(", "y", ")", "\n", "y", "=", "self", ".", "sigmoid", "(", "y", ")", ".", "view", "(", "batch_size", ",", "c", ",", "1", ",", "1", ",", "1", ")", "\n", "x", "=", "x", "*", "y", ".", "expand_as", "(", "x", ")", "\n", "#", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "bn", ",", "c", ",", "h", ",", "w", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_TSN.Bottleneck.__init__": [[38, 73], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "print", "nets.Calibrator2D.GC_L33D", "nets.Calibrator2D.GC_T13D", "nets.Calibrator2D.GC_S23DD", "nets.Calibrator2D.GC_CLLD", "print"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "use_ef", "=", "False", ",", "cdiv", "=", "8", ",", "num_segments", "=", "8", ",", "loop_id", "=", "0", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_ef", "=", "use_ef", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "if", "self", ".", "use_ef", ":", "\n", "            ", "print", "(", "'=> Using Partial Channel Calibrator with cdiv: {}'", ".", "format", "(", "cdiv", ")", ")", "\n", "self", ".", "loop_id", "=", "loop_id", "\n", "self", ".", "eft_c", "=", "planes", "//", "cdiv", "\n", "self", ".", "eft1", "=", "GC_L33D", "(", "self", ".", "eft_c", ",", "self", ".", "eft_c", ",", "num_segments", ")", "\n", "self", ".", "eft2", "=", "GC_T13D", "(", "self", ".", "eft_c", ",", "self", ".", "eft_c", ",", "num_segments", ")", "\n", "self", ".", "eft3", "=", "GC_S23DD", "(", "self", ".", "eft_c", ",", "self", ".", "eft_c", ",", "num_segments", ")", "\n", "self", ".", "eft4", "=", "GC_CLLD", "(", "self", ".", "eft_c", ",", "self", ".", "eft_c", ",", "num_segments", ")", "\n", "self", ".", "eft", "=", "(", "self", ".", "eft_c", ",", "self", ".", "eft_c", ",", "num_segments", ")", "\n", "self", ".", "start_c1", "=", "loop_id", "*", "self", ".", "eft_c", "\n", "self", ".", "end_c1", "=", "self", ".", "start_c1", "+", "self", ".", "eft_c", "\n", "loop_id2", "=", "(", "loop_id", "+", "1", ")", "%", "cdiv", "\n", "self", ".", "start_c2", "=", "loop_id2", "*", "self", ".", "eft_c", "\n", "self", ".", "end_c2", "=", "self", ".", "start_c2", "+", "self", ".", "eft_c", "\n", "loop_id3", "=", "(", "loop_id", "+", "2", ")", "%", "cdiv", "\n", "self", ".", "start_c3", "=", "loop_id3", "*", "self", ".", "eft_c", "\n", "self", ".", "end_c3", "=", "self", ".", "start_c3", "+", "self", ".", "eft_c", "\n", "loop_id4", "=", "(", "loop_id", "+", "3", ")", "%", "cdiv", "\n", "self", ".", "start_c4", "=", "loop_id4", "*", "self", ".", "eft_c", "\n", "self", ".", "end_c4", "=", "self", ".", "start_c4", "+", "self", ".", "eft_c", "\n", "print", "(", "'loop_ids: [{}:({}-{}), {}:({}-{}), {}:({}-{}), {}:({}-{})]'", ".", "format", "(", "loop_id", ",", "self", ".", "start_c1", ",", "self", ".", "end_c1", ",", "loop_id2", ",", "self", ".", "start_c2", ",", "self", ".", "end_c2", ",", "loop_id3", ",", "self", ".", "start_c3", ",", "self", ".", "end_c3", ",", "loop_id4", ",", "self", ".", "start_c4", ",", "self", ".", "end_c4", ")", ")", "\n", "", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_TSN.Bottleneck.forward": [[74, 118], ["GC_TSN.Bottleneck.conv1", "GC_TSN.Bottleneck.bn1", "GC_TSN.Bottleneck.relu", "GC_TSN.Bottleneck.conv2", "GC_TSN.Bottleneck.bn2", "GC_TSN.Bottleneck.relu", "GC_TSN.Bottleneck.conv3", "GC_TSN.Bottleneck.bn3", "GC_TSN.Bottleneck.relu", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.size", "torch.zeros_like.size", "torch.zeros_like.size", "GC_TSN.Bottleneck.eft1", "GC_TSN.Bottleneck.eft2", "GC_TSN.Bottleneck.eft3", "GC_TSN.Bottleneck.eft4", "GC_TSN.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x = [bcz*n_seg, c, h, w]", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "#", "\n", "if", "self", ".", "use_ef", ":", "\n", "            ", "new_out", "=", "torch", ".", "zeros_like", "(", "out", ")", "\n", "BN", ",", "C_size", ",", "H_size", ",", "W_size", "=", "new_out", ".", "size", "(", ")", "\n", "# new_out = out", "\n", "new_out", "[", ":", ",", "self", ".", "start_c1", ":", "self", ".", "end_c1", ",", ":", ",", ":", "]", "=", "self", ".", "eft1", "(", "out", "[", ":", ",", "self", ".", "start_c1", ":", "self", ".", "end_c1", ",", ":", ",", ":", "]", ")", "\n", "new_out", "[", ":", ",", "self", ".", "start_c2", ":", "self", ".", "end_c2", ",", ":", ",", ":", "]", "=", "self", ".", "eft2", "(", "out", "[", ":", ",", "self", ".", "start_c2", ":", "self", ".", "end_c2", ",", ":", ",", ":", "]", ")", "\n", "new_out", "[", ":", ",", "self", ".", "start_c3", ":", "self", ".", "end_c3", ",", ":", ",", ":", "]", "=", "self", ".", "eft3", "(", "out", "[", ":", ",", "self", ".", "start_c3", ":", "self", ".", "end_c3", ",", ":", ",", ":", "]", ")", "\n", "new_out", "[", ":", ",", "self", ".", "start_c4", ":", "self", ".", "end_c4", ",", ":", ",", ":", "]", "=", "self", ".", "eft4", "(", "out", "[", ":", ",", "self", ".", "start_c4", ":", "self", ".", "end_c4", ",", ":", ",", ":", "]", ")", "\n", "# new_out = torch.zeros_like(out)", "\n", "# new_out[:, :self.eft_c, :, :] = self.eft(out[:, :self.eft_c, :, :])", "\n", "if", "self", ".", "end_c4", ">", "self", ".", "start_c1", ":", "\n", "                ", "if", "self", ".", "start_c1", ">", "0", ":", "\n", "                    ", "new_out", "[", ":", ",", ":", "self", ".", "start_c1", ":", ",", ":", ",", ":", "]", "=", "out", "[", ":", ",", ":", "self", ".", "start_c1", ":", ",", ":", ",", ":", "]", "\n", "", "if", "self", ".", "end_c4", "<", "C_size", ":", "\n", "                    ", "new_out", "[", ":", ",", "self", ".", "end_c4", ":", ",", ":", ",", ":", "]", "=", "out", "[", ":", ",", "self", ".", "end_c4", ":", ",", ":", ",", ":", "]", "\n", "", "", "elif", "self", ".", "end_c4", "<", "self", ".", "start_c1", ":", "\n", "                ", "new_out", "[", ":", ",", "self", ".", "end_c4", ":", "self", ".", "start_c1", ":", ",", ":", ",", ":", "]", "=", "out", "[", ":", ",", "self", ".", "end_c4", ":", "self", ".", "start_c1", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "out", "=", "new_out", "\n", "# out[:, self.eft_c:, :, :] = out[:, self.eft_c:, :, :]", "\n", "#", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_TSN.ResNet.__init__": [[122, 151], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "GC_TSN.ResNet._make_layer", "GC_TSN.ResNet._make_layer", "GC_TSN.ResNet._make_layer", "GC_TSN.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "GC_TSN.ResNet.named_modules", "isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "cdiv", "=", "2", ",", "num_segments", "=", "8", ",", "loop", "=", "False", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "loop_id", "=", "0", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "loop", "=", "loop", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "cdiv", "=", "cdiv", ",", "n_seg", "=", "num_segments", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "cdiv", "=", "cdiv", ",", "n_seg", "=", "num_segments", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "cdiv", "=", "cdiv", ",", "n_seg", "=", "num_segments", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "cdiv", "=", "cdiv", ",", "n_seg", "=", "num_segments", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "name", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "'eft'", "not", "in", "name", ":", "\n", "# if 'deconv' in name:", "\n", "#     nn.init.xavier_normal_(m.weight)", "\n", "# else:", "\n", "#     if isinstance(m, nn.Conv2d) or isinstance(m, nn.Conv3d) or isinstance(m, nn.ConvTranspose3d):", "\n", "#         nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_TSN.ResNet._make_layer": [[152, 185], ["print", "layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "print", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "layers.append", "layers.append", "block", "block"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "cdiv", "=", "2", ",", "n_seg", "=", "8", ")", ":", "\n", "        ", "print", "(", "'=> Processing stage with {} blocks'", ".", "format", "(", "blocks", ")", ")", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "True", ",", "cdiv", "=", "cdiv", ",", "num_segments", "=", "n_seg", ",", "loop_id", "=", "self", ".", "loop_id", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "if", "self", ".", "loop", ":", "\n", "            ", "self", ".", "loop_id", "=", "(", "self", ".", "loop_id", "+", "1", ")", "%", "cdiv", "\n", "\n", "#", "\n", "", "n_round", "=", "1", "\n", "if", "blocks", ">=", "23", ":", "\n", "            ", "n_round", "=", "2", "\n", "print", "(", "'=> Using n_round {} to insert Element Filter -T'", ".", "format", "(", "n_round", ")", ")", "\n", "#", "\n", "", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "if", "i", "%", "n_round", "==", "0", ":", "\n", "                ", "use_ef", "=", "True", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "use_ef", "=", "use_ef", ",", "cdiv", "=", "cdiv", ",", "num_segments", "=", "n_seg", ",", "loop_id", "=", "self", ".", "loop_id", ")", ")", "\n", "if", "self", ".", "loop", ":", "\n", "                    ", "self", ".", "loop_id", "=", "(", "self", ".", "loop_id", "+", "1", ")", "%", "cdiv", "\n", "", "", "else", ":", "\n", "                ", "use_ef", "=", "False", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "use_ef", "=", "use_ef", ",", "cdiv", "=", "cdiv", ",", "num_segments", "=", "n_seg", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_TSN.ResNet.forward": [[186, 202], ["GC_TSN.ResNet.conv1", "GC_TSN.ResNet.bn1", "GC_TSN.ResNet.relu", "GC_TSN.ResNet.maxpool", "GC_TSN.ResNet.layer1", "GC_TSN.ResNet.layer2", "GC_TSN.ResNet.layer3", "GC_TSN.ResNet.layer4", "GC_TSN.ResNet.avgpool", "GC_TSN.ResNet.view", "GC_TSN.ResNet.fc", "GC_TSN.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_TSN.resnet50": [[213, 228], ["GC_TSN.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "# EF_name = getattr(EF_zoo, EF)", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "checkpoint", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", "\n", "# checkpoint_keys = list(checkpoint.keys())", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "model_dict", ".", "update", "(", "checkpoint", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_TSN.resnet101": [[230, 244], ["GC_TSN.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "# EF_name = getattr(EF_zoo, EF)", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "checkpoint", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", "\n", "# checkpoint_keys = list(checkpoint.keys())", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "model_dict", ".", "update", "(", "checkpoint", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_TSN.resnet152": [[246, 259], ["GC_TSN.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "checkpoint", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", "\n", "# checkpoint_keys = list(checkpoint.keys())", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "model_dict", ".", "update", "(", "checkpoint", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_TSM.Bottleneck.__init__": [[38, 80], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "print", "nets.Calibrator2D.GC_L33D", "nets.Calibrator2D.GC_T13D", "nets.Calibrator2D.GC_S23DD", "nets.Calibrator2D.GC_CLLD", "print", "print"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "n_segment", "=", "8", ",", "fold_div", "=", "8", ",", "place", "=", "None", ",", "use_ef", "=", "False", ",", "cdiv", "=", "2", ",", "loop_id", "=", "0", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "n_segment", "=", "n_segment", "\n", "self", ".", "fold_div", "=", "fold_div", "\n", "self", ".", "place", "=", "place", "\n", "self", ".", "use_ef", "=", "use_ef", "\n", "\n", "if", "self", ".", "use_ef", ":", "\n", "            ", "print", "(", "'=> Using Partial Channel Calibrator with cdiv: {}'", ".", "format", "(", "cdiv", ")", ")", "\n", "self", ".", "loop_id", "=", "loop_id", "\n", "self", ".", "eft_c", "=", "planes", "//", "cdiv", "\n", "self", ".", "eft1", "=", "GC_L33D", "(", "self", ".", "eft_c", ",", "self", ".", "eft_c", ",", "n_segment", ")", "\n", "self", ".", "eft2", "=", "GC_T13D", "(", "self", ".", "eft_c", ",", "self", ".", "eft_c", ",", "n_segment", ")", "\n", "self", ".", "eft3", "=", "GC_S23DD", "(", "self", ".", "eft_c", ",", "self", ".", "eft_c", ",", "n_segment", ")", "\n", "self", ".", "eft4", "=", "GC_CLLD", "(", "self", ".", "eft_c", ",", "self", ".", "eft_c", ",", "n_segment", ")", "\n", "self", ".", "eft", "=", "(", "self", ".", "eft_c", ",", "self", ".", "eft_c", ",", "n_segment", ")", "\n", "self", ".", "start_c1", "=", "loop_id", "*", "self", ".", "eft_c", "\n", "self", ".", "end_c1", "=", "self", ".", "start_c1", "+", "self", ".", "eft_c", "\n", "loop_id2", "=", "(", "loop_id", "+", "1", ")", "%", "cdiv", "\n", "self", ".", "start_c2", "=", "loop_id2", "*", "self", ".", "eft_c", "\n", "self", ".", "end_c2", "=", "self", ".", "start_c2", "+", "self", ".", "eft_c", "\n", "loop_id3", "=", "(", "loop_id", "+", "2", ")", "%", "cdiv", "\n", "self", ".", "start_c3", "=", "loop_id3", "*", "self", ".", "eft_c", "\n", "self", ".", "end_c3", "=", "self", ".", "start_c3", "+", "self", ".", "eft_c", "\n", "loop_id4", "=", "(", "loop_id", "+", "3", ")", "%", "cdiv", "\n", "self", ".", "start_c4", "=", "loop_id4", "*", "self", ".", "eft_c", "\n", "self", ".", "end_c4", "=", "self", ".", "start_c4", "+", "self", ".", "eft_c", "\n", "print", "(", "'loop_ids: [{}:({}-{}), {}:({}-{}), {}:({}-{}), {}:({}-{})]'", ".", "format", "(", "loop_id", ",", "self", ".", "start_c1", ",", "self", ".", "end_c1", ",", "loop_id2", ",", "self", ".", "start_c2", ",", "self", ".", "end_c2", ",", "loop_id3", ",", "self", ".", "start_c3", ",", "self", ".", "end_c3", ",", "loop_id4", ",", "self", ".", "start_c4", ",", "self", ".", "end_c4", ")", ")", "\n", "\n", "", "if", "place", "in", "[", "'block'", ",", "'blockres'", "]", ":", "\n", "            ", "print", "(", "'=> Using fold div: {}'", ".", "format", "(", "self", ".", "fold_div", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_TSM.Bottleneck.forward": [[81, 132], ["GC_TSM.Bottleneck.bn1", "GC_TSM.Bottleneck.relu", "GC_TSM.Bottleneck.conv2", "GC_TSM.Bottleneck.bn2", "GC_TSM.Bottleneck.relu", "GC_TSM.Bottleneck.conv3", "GC_TSM.Bottleneck.bn3", "GC_TSM.Bottleneck.relu", "GC_TSM.Bottleneck.shift", "GC_TSM.Bottleneck.conv1", "GC_TSM.Bottleneck.conv1", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.size", "torch.zeros_like.size", "torch.zeros_like.size", "GC_TSM.Bottleneck.eft1", "GC_TSM.Bottleneck.eft2", "GC_TSM.Bottleneck.eft3", "GC_TSM.Bottleneck.eft4", "GC_TSM.Bottleneck.downsample", "GC_TSM.Bottleneck.shift"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_TSM.Bottleneck.shift", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_TSM.Bottleneck.shift"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "if", "self", ".", "place", "==", "'blockres'", ":", "\n", "            ", "out", "=", "self", ".", "shift", "(", "x", ",", "self", ".", "n_segment", ",", "fold_div", "=", "self", ".", "fold_div", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "use_ef", ":", "\n", "            ", "new_out", "=", "torch", ".", "zeros_like", "(", "out", ")", "\n", "BN", ",", "C_size", ",", "H_size", ",", "W_size", "=", "new_out", ".", "size", "(", ")", "\n", "# new_out = out", "\n", "new_out", "[", ":", ",", "self", ".", "start_c1", ":", "self", ".", "end_c1", ",", ":", ",", ":", "]", "=", "self", ".", "eft1", "(", "out", "[", ":", ",", "self", ".", "start_c1", ":", "self", ".", "end_c1", ",", ":", ",", ":", "]", ")", "\n", "new_out", "[", ":", ",", "self", ".", "start_c2", ":", "self", ".", "end_c2", ",", ":", ",", ":", "]", "=", "self", ".", "eft2", "(", "out", "[", ":", ",", "self", ".", "start_c2", ":", "self", ".", "end_c2", ",", ":", ",", ":", "]", ")", "\n", "new_out", "[", ":", ",", "self", ".", "start_c3", ":", "self", ".", "end_c3", ",", ":", ",", ":", "]", "=", "self", ".", "eft3", "(", "out", "[", ":", ",", "self", ".", "start_c3", ":", "self", ".", "end_c3", ",", ":", ",", ":", "]", ")", "\n", "new_out", "[", ":", ",", "self", ".", "start_c4", ":", "self", ".", "end_c4", ",", ":", ",", ":", "]", "=", "self", ".", "eft4", "(", "out", "[", ":", ",", "self", ".", "start_c4", ":", "self", ".", "end_c4", ",", ":", ",", ":", "]", ")", "\n", "# new_out = torch.zeros_like(out)", "\n", "# new_out[:, :self.eft_c, :, :] = self.eft(out[:, :self.eft_c, :, :])", "\n", "if", "self", ".", "end_c4", ">", "self", ".", "start_c1", ":", "\n", "                ", "if", "self", ".", "start_c1", ">", "0", ":", "\n", "                    ", "new_out", "[", ":", ",", ":", "self", ".", "start_c1", ":", ",", ":", ",", ":", "]", "=", "out", "[", ":", ",", ":", "self", ".", "start_c1", ":", ",", ":", ",", ":", "]", "\n", "", "if", "self", ".", "end_c4", "<", "C_size", ":", "\n", "                    ", "new_out", "[", ":", ",", "self", ".", "end_c4", ":", ",", ":", ",", ":", "]", "=", "out", "[", ":", ",", "self", ".", "end_c4", ":", ",", ":", ",", ":", "]", "\n", "", "", "elif", "self", ".", "end_c4", "<", "self", ".", "start_c1", ":", "\n", "                ", "new_out", "[", ":", ",", "self", ".", "end_c4", ":", "self", ".", "start_c1", ":", ",", ":", ",", ":", "]", "=", "out", "[", ":", ",", "self", ".", "end_c4", ":", "self", ".", "start_c1", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "out", "=", "new_out", "\n", "# out[:, self.eft_c:, :, :] = out[:, self.eft_c:, :, :]", "\n", "#", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "#", "\n", "if", "self", ".", "place", "==", "'block'", ":", "\n", "            ", "out", "=", "self", ".", "shift", "(", "out", ",", "self", ".", "n_segment", ",", "fold_div", "=", "self", ".", "fold_div", ")", "\n", "\n", "", "return", "out", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_TSM.Bottleneck.shift": [[133, 152], ["x.view.view.size", "x.view.view.view", "torch.zeros_like.view", "torch.zeros_like.view", "torch.zeros_like.view", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "shift", "(", "x", ",", "n_segment", ",", "fold_div", "=", "3", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "nt", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "n_batch", "=", "nt", "//", "n_segment", "\n", "x", "=", "x", ".", "view", "(", "n_batch", ",", "n_segment", ",", "c", ",", "h", ",", "w", ")", "\n", "\n", "fold", "=", "c", "//", "fold_div", "\n", "if", "inplace", ":", "\n", "# Due to some out of order error when performing parallel computing. ", "\n", "# May need to write a CUDA kernel.", "\n", "            ", "raise", "NotImplementedError", "\n", "# out = InplaceShift.apply(x, fold)", "\n", "", "else", ":", "\n", "            ", "out", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "out", "[", ":", ",", ":", "-", "1", ",", ":", "fold", "]", "=", "x", "[", ":", ",", "1", ":", ",", ":", "fold", "]", "# shift left", "\n", "out", "[", ":", ",", "1", ":", ",", "fold", ":", "2", "*", "fold", "]", "=", "x", "[", ":", ",", ":", "-", "1", ",", "fold", ":", "2", "*", "fold", "]", "# shift right", "\n", "out", "[", ":", ",", ":", ",", "2", "*", "fold", ":", "]", "=", "x", "[", ":", ",", ":", ",", "2", "*", "fold", ":", "]", "# not shift", "\n", "\n", "", "return", "out", ".", "view", "(", "nt", ",", "c", ",", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_TSM.ResNet.__init__": [[156, 187], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "GC_TSM.ResNet._make_layer", "GC_TSM.ResNet._make_layer", "GC_TSM.ResNet._make_layer", "GC_TSM.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "GC_TSM.ResNet.named_modules", "isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "n_segments", ",", "num_classes", "=", "1000", ",", "fold_div", "=", "8", ",", "place", "=", "'blockres'", ",", "cdiv", "=", "2", ",", "loop", "=", "False", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "loop_id", "=", "0", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "#", "\n", "self", ".", "loop", "=", "loop", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "n_seg", "=", "n_segments", "[", "0", "]", ",", "fold_d", "=", "fold_div", ",", "pla", "=", "place", ",", "cdiv", "=", "cdiv", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "n_seg", "=", "n_segments", "[", "1", "]", ",", "fold_d", "=", "fold_div", ",", "pla", "=", "place", ",", "cdiv", "=", "cdiv", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "n_seg", "=", "n_segments", "[", "2", "]", ",", "fold_d", "=", "fold_div", ",", "pla", "=", "place", ",", "cdiv", "=", "cdiv", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "n_seg", "=", "n_segments", "[", "3", "]", ",", "fold_d", "=", "fold_div", ",", "pla", "=", "place", ",", "cdiv", "=", "cdiv", ")", "\n", "#", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "#", "\n", "for", "name", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "'eft'", "not", "in", "name", ":", "\n", "# if 'deconv' in name:", "\n", "#     nn.init.xavier_normal_(m.weight)", "\n", "# else:", "\n", "#     if isinstance(m, nn.Conv2d) or isinstance(m, nn.Conv3d) or isinstance(m, nn.ConvTranspose3d):", "\n", "#         nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_TSM.ResNet._make_layer": [[188, 220], ["print", "layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "print", "print", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "layers.append", "layers.append", "block", "block"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "n_seg", "=", "8", ",", "fold_d", "=", "8", ",", "pla", "=", "None", ",", "cdiv", "=", "2", ")", ":", "\n", "        ", "print", "(", "'=> Processing stage with {} blocks'", ".", "format", "(", "blocks", ")", ")", "\n", "#", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "n_seg", ",", "fold_d", ",", "pla", ",", "True", ",", "cdiv", ",", "loop_id", "=", "self", ".", "loop_id", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "if", "self", ".", "loop", ":", "\n", "            ", "self", ".", "loop_id", "=", "(", "self", ".", "loop_id", "+", "1", ")", "%", "cdiv", "\n", "#", "\n", "", "n_round", "=", "1", "\n", "if", "blocks", ">=", "23", ":", "\n", "            ", "n_round", "=", "2", "\n", "print", "(", "'=> Using n_round {} to insert Element Filter -T'", ".", "format", "(", "n_round", ")", ")", "\n", "print", "(", "'=> Using n_round {} to insert temporal shift'", ".", "format", "(", "n_round", ")", ")", "\n", "#", "\n", "", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "if", "i", "%", "n_round", "==", "0", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "n_segment", "=", "n_seg", ",", "fold_div", "=", "fold_d", ",", "place", "=", "pla", ",", "use_ef", "=", "True", ",", "cdiv", "=", "cdiv", ",", "loop_id", "=", "self", ".", "loop_id", ")", ")", "\n", "if", "self", ".", "loop", ":", "\n", "                    ", "self", ".", "loop_id", "=", "(", "self", ".", "loop_id", "+", "1", ")", "%", "cdiv", "\n", "", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "use_ef", "=", "False", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_TSM.ResNet.forward": [[221, 237], ["GC_TSM.ResNet.conv1", "GC_TSM.ResNet.bn1", "GC_TSM.ResNet.relu", "GC_TSM.ResNet.maxpool", "GC_TSM.ResNet.layer1", "GC_TSM.ResNet.layer2", "GC_TSM.ResNet.layer3", "GC_TSM.ResNet.layer4", "GC_TSM.ResNet.avgpool", "GC_TSM.ResNet.view", "GC_TSM.ResNet.fc", "GC_TSM.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_TSM.resnet50": [[248, 264], ["print", "print", "GC_TSM.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "", "def", "resnet50", "(", "pretrained", "=", "False", ",", "n_segment", "=", "8", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "n_segment_list", "=", "[", "n_segment", "]", "*", "4", "\n", "print", "(", "'=> construct a TSM-EFT based on Resnet-50 model'", ")", "\n", "print", "(", "'=> n_segment per stage: {}'", ".", "format", "(", "n_segment_list", ")", ")", "\n", "#", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "n_segment_list", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "checkpoint", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "model_dict", ".", "update", "(", "checkpoint", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_TSM.resnet101": [[266, 282], ["print", "print", "GC_TSM.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "n_segment", "=", "8", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "n_segment_list", "=", "[", "n_segment", "]", "*", "4", "\n", "print", "(", "'=> construct a TSM-EFT based on Resnet-101 model'", ")", "\n", "print", "(", "'=> n_segment per stage: {}'", ".", "format", "(", "n_segment_list", ")", ")", "\n", "#", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "n_segment_list", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "checkpoint", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "model_dict", ".", "update", "(", "checkpoint", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_TSM.resnet152": [[284, 300], ["print", "print", "GC_TSM.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tsntsmgst.utils.AverageMeter.update", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "n_segment", "=", "8", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "n_segment_list", "=", "[", "n_segment", "]", "*", "4", "\n", "print", "(", "'=> construct a TSM-EFT based on Resnet-152 model'", ")", "\n", "print", "(", "'=> n_segment per stage: {}'", ".", "format", "(", "n_segment_list", ")", ")", "\n", "#", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "n_segment_list", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "checkpoint", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "model_dict", ".", "update", "(", "checkpoint", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.Bottleneck.__init__": [[24, 64], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "print", "nets.Calibrator3D.GC_L33Dnb", "nets.Calibrator3D.GC_T13Dnb", "nets.Calibrator3D.GC_S23DDnb", "nets.Calibrator3D.GC_CLLDnb", "print"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "alpha", ",", "beta", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "use_ef", "=", "False", ",", "cdiv", "=", "8", ",", "loop_id", "=", "0", ")", ":", "\n", "\t\t", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_ef", "=", "use_ef", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "planes", "//", "beta", ",", "planes", "//", "alpha", "*", "(", "alpha", "-", "1", ")", ",", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "stride", ",", "stride", ")", ",", "\n", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "Tconv", "=", "nn", ".", "Conv3d", "(", "planes", "//", "beta", ",", "planes", "//", "alpha", ",", "kernel_size", "=", "3", ",", "bias", "=", "False", ",", "stride", "=", "(", "1", ",", "stride", ",", "stride", ")", ",", "\n", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm3d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "\n", "if", "self", ".", "use_ef", ":", "\n", "\t\t\t", "print", "(", "'=> Using Partial Channel Calibrator with cdiv: {}'", ".", "format", "(", "cdiv", ")", ")", "\n", "self", ".", "loop_id", "=", "loop_id", "\n", "self", ".", "eft_c", "=", "planes", "//", "cdiv", "\n", "self", ".", "eft1", "=", "GC_L33Dnb", "(", "self", ".", "eft_c", ",", "self", ".", "eft_c", ")", "\n", "self", ".", "eft2", "=", "GC_T13Dnb", "(", "self", ".", "eft_c", ",", "self", ".", "eft_c", ")", "\n", "self", ".", "eft3", "=", "GC_S23DDnb", "(", "self", ".", "eft_c", ",", "self", ".", "eft_c", ")", "\n", "self", ".", "eft4", "=", "GC_CLLDnb", "(", "self", ".", "eft_c", ",", "self", ".", "eft_c", ")", "\n", "# self.eft = (self.eft_c, self.eft_c, num_segments)", "\n", "self", ".", "start_c1", "=", "loop_id", "*", "self", ".", "eft_c", "\n", "self", ".", "end_c1", "=", "self", ".", "start_c1", "+", "self", ".", "eft_c", "\n", "loop_id2", "=", "(", "loop_id", "+", "1", ")", "%", "cdiv", "\n", "self", ".", "start_c2", "=", "loop_id2", "*", "self", ".", "eft_c", "\n", "self", ".", "end_c2", "=", "self", ".", "start_c2", "+", "self", ".", "eft_c", "\n", "loop_id3", "=", "(", "loop_id", "+", "2", ")", "%", "cdiv", "\n", "self", ".", "start_c3", "=", "loop_id3", "*", "self", ".", "eft_c", "\n", "self", ".", "end_c3", "=", "self", ".", "start_c3", "+", "self", ".", "eft_c", "\n", "loop_id4", "=", "(", "loop_id", "+", "3", ")", "%", "cdiv", "\n", "self", ".", "start_c4", "=", "loop_id4", "*", "self", ".", "eft_c", "\n", "self", ".", "end_c4", "=", "self", ".", "start_c4", "+", "self", ".", "eft_c", "\n", "print", "(", "'loop_ids: [{}:({}-{}), {}:({}-{}), {}:({}-{}), {}:({}-{})]'", ".", "format", "(", "loop_id", ",", "self", ".", "start_c1", ",", "self", ".", "end_c1", ",", "loop_id2", ",", "self", ".", "start_c2", ",", "self", ".", "end_c2", ",", "loop_id3", ",", "self", ".", "start_c3", ",", "self", ".", "end_c3", ",", "loop_id4", ",", "self", ".", "start_c4", ",", "self", ".", "end_c4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.Bottleneck.forward": [[66, 120], ["GC_GST.Bottleneck.conv1", "GC_GST.Bottleneck.bn1", "GC_GST.Bottleneck.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "GC_GST.Bottleneck.bn2", "GC_GST.Bottleneck.relu", "GC_GST.Bottleneck.conv3", "GC_GST.Bottleneck.bn3", "GC_GST.Bottleneck.relu", "GC_GST.Bottleneck.conv2", "GC_GST.Bottleneck.Tconv", "GC_GST.Bottleneck.conv2", "GC_GST.Bottleneck.Tconv", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.size", "torch.zeros_like.size", "torch.zeros_like.size", "GC_GST.Bottleneck.eft1", "GC_GST.Bottleneck.eft2", "GC_GST.Bottleneck.eft3", "GC_GST.Bottleneck.eft4", "GC_GST.Bottleneck.downsample", "GC_GST.Bottleneck.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "\n", "if", "self", ".", "beta", "==", "2", ":", "\n", "\t\t\t", "nchannels", "=", "out", ".", "size", "(", ")", "[", "1", "]", "//", "self", ".", "beta", "\n", "left", "=", "out", "[", ":", ",", ":", "nchannels", "]", "\n", "right", "=", "out", "[", ":", ",", "nchannels", ":", "]", "\n", "\n", "out1", "=", "self", ".", "conv2", "(", "left", ")", "\n", "out2", "=", "self", ".", "Tconv", "(", "right", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "out1", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out2", "=", "self", ".", "Tconv", "(", "out", ")", "\n", "\n", "", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "use_ef", ":", "\n", "\t\t\t", "new_out", "=", "torch", ".", "zeros_like", "(", "out", ")", "\n", "B_size", ",", "C_size", ",", "T_size", ",", "H_size", ",", "W_size", "=", "new_out", ".", "size", "(", ")", "\n", "# new_out = out", "\n", "new_out", "[", ":", ",", "self", ".", "start_c1", ":", "self", ".", "end_c1", ",", ":", ",", ":", ",", ":", "]", "=", "self", ".", "eft1", "(", "out", "[", ":", ",", "self", ".", "start_c1", ":", "self", ".", "end_c1", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "new_out", "[", ":", ",", "self", ".", "start_c2", ":", "self", ".", "end_c2", ",", ":", ",", ":", ",", ":", "]", "=", "self", ".", "eft2", "(", "out", "[", ":", ",", "self", ".", "start_c2", ":", "self", ".", "end_c2", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "new_out", "[", ":", ",", "self", ".", "start_c3", ":", "self", ".", "end_c3", ",", ":", ",", ":", ",", ":", "]", "=", "self", ".", "eft3", "(", "out", "[", ":", ",", "self", ".", "start_c3", ":", "self", ".", "end_c3", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "new_out", "[", ":", ",", "self", ".", "start_c4", ":", "self", ".", "end_c4", ",", ":", ",", ":", ",", ":", "]", "=", "self", ".", "eft4", "(", "out", "[", ":", ",", "self", ".", "start_c4", ":", "self", ".", "end_c4", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "# new_out = torch.zeros_like(out)", "\n", "# new_out[:, :self.eft_c, :, :] = self.eft(out[:, :self.eft_c, :, :])", "\n", "if", "self", ".", "end_c4", ">", "self", ".", "start_c1", ":", "\n", "\t\t\t\t", "if", "self", ".", "start_c1", ">", "0", ":", "\n", "\t\t\t\t\t", "new_out", "[", ":", ",", ":", "self", ".", "start_c1", ":", ",", ":", ",", ":", "]", "=", "out", "[", ":", ",", ":", "self", ".", "start_c1", ":", ",", ":", ",", ":", "]", "\n", "", "if", "self", ".", "end_c4", "<", "C_size", ":", "\n", "\t\t\t\t\t", "new_out", "[", ":", ",", "self", ".", "end_c4", ":", ",", ":", ",", ":", "]", "=", "out", "[", ":", ",", "self", ".", "end_c4", ":", ",", ":", ",", ":", "]", "\n", "", "", "elif", "self", ".", "end_c4", "<", "self", ".", "start_c1", ":", "\n", "\t\t\t\t", "new_out", "[", ":", ",", "self", ".", "end_c4", ":", "self", ".", "start_c1", ":", ",", ":", ",", ":", "]", "=", "out", "[", ":", ",", "self", ".", "end_c4", ":", "self", ".", "start_c1", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "out", "=", "new_out", "\n", "\n", "", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "\t\t\t", "residual", "=", "self", ".", "downsample", "(", "residual", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__": [[124, 148], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "GC_GST.ResNet._make_layer", "GC_GST.ResNet._make_layer", "GC_GST.ResNet._make_layer", "GC_GST.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "GC_GST.ResNet.named_modules", "isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.__init__", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer", "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer"], ["\t", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "alpha", "=", "4", ",", "beta", "=", "2", ",", "num_classes", "=", "1000", ",", "cdiv", "=", "4", ",", "loop", "=", "False", ")", ":", "\n", "\t\t", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "loop_id", "=", "0", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "3", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "7", ",", "7", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "3", ",", "3", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "loop", "=", "loop", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "alpha", ",", "beta", ",", "cdiv", "=", "cdiv", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "alpha", ",", "beta", ",", "stride", "=", "2", ",", "cdiv", "=", "cdiv", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "alpha", ",", "beta", ",", "stride", "=", "2", ",", "cdiv", "=", "cdiv", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "alpha", ",", "beta", ",", "stride", "=", "2", ",", "cdiv", "=", "cdiv", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "name", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "\t\t\t", "if", "'eft'", "not", "in", "name", ":", "\n", "\t\t\t\t", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "\t\t\t\t\t", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "\t\t\t\t\t", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet._make_layer": [[149, 180], ["print", "layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "print", "layers.append", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "block"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "alpha", ",", "beta", ",", "stride", "=", "1", ",", "cdiv", "=", "2", ")", ":", "\n", "\t\t", "print", "(", "'=> Processing stage with {} blocks'", ".", "format", "(", "blocks", ")", ")", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "\t\t\t", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "(", "1", ",", "stride", ",", "stride", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "alpha", ",", "beta", ",", "stride", ",", "downsample", ",", "True", ",", "cdiv", "=", "cdiv", ",", "loop_id", "=", "self", ".", "loop_id", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "if", "self", ".", "loop", ":", "\n", "\t\t\t", "self", ".", "loop_id", "=", "(", "self", ".", "loop_id", "+", "1", ")", "%", "cdiv", "\n", "\n", "", "n_round", "=", "1", "\n", "if", "blocks", ">=", "23", ":", "\n", "\t\t\t", "n_round", "=", "2", "\n", "print", "(", "'=> Using n_round {} to insert Group Context'", ".", "format", "(", "n_round", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "\t\t\t", "if", "i", "%", "n_round", "==", "0", ":", "\n", "\t\t\t\t", "use_ef", "=", "True", "\n", "", "else", ":", "\n", "\t\t\t\t", "use_ef", "=", "False", "\n", "", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "alpha", ",", "beta", ",", "use_ef", "=", "use_ef", ",", "cdiv", "=", "cdiv", ",", "loop_id", "=", "self", ".", "loop_id", ")", ")", "\n", "if", "self", ".", "loop", "and", "use_ef", ":", "\n", "\t\t\t\t", "self", ".", "loop_id", "=", "(", "self", ".", "loop_id", "+", "1", ")", "%", "cdiv", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.ResNet.forward": [[181, 199], ["GC_GST.ResNet.conv1", "GC_GST.ResNet.bn1", "GC_GST.ResNet.relu", "GC_GST.ResNet.maxpool", "GC_GST.ResNet.layer1", "GC_GST.ResNet.layer2", "GC_GST.ResNet.layer3", "GC_GST.ResNet.layer4", "GC_GST.ResNet.transpose().contiguous", "GC_GST.ResNet.view", "GC_GST.ResNet.avgpool", "GC_GST.ResNet.view", "GC_GST.ResNet.fc", "GC_GST.ResNet.size", "GC_GST.ResNet.transpose", "GC_GST.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "(", "-", "1", ",", ")", "+", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.resnet50": [[201, 216], ["GC_GST.ResNet", "torch.load_url", "list", "ResNet.load_state_dict", "model_zoo.load_url.keys", "checkpoint[].unsqueeze", "checkpoint[].size"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "", "def", "resnet50", "(", "alpha", ",", "beta", ",", "**", "kwargs", ")", ":", "\n", "\t", "\"\"\"Constructs a ResNet-50 based model.\n\t\"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "alpha", ",", "beta", ",", "**", "kwargs", ")", "\n", "checkpoint", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", "\n", "layer_name", "=", "list", "(", "checkpoint", ".", "keys", "(", ")", ")", "\n", "for", "ln", "in", "layer_name", ":", "\n", "\t\t", "if", "'conv'", "in", "ln", "or", "'downsample.0.weight'", "in", "ln", ":", "\n", "\t\t\t", "checkpoint", "[", "ln", "]", "=", "checkpoint", "[", "ln", "]", ".", "unsqueeze", "(", "2", ")", "\n", "", "if", "'conv2'", "in", "ln", ":", "\n", "\t\t\t", "n_out", ",", "n_in", ",", "_", ",", "_", ",", "_", "=", "checkpoint", "[", "ln", "]", ".", "size", "(", ")", "\n", "checkpoint", "[", "ln", "]", "=", "checkpoint", "[", "ln", "]", "[", ":", "n_out", "//", "alpha", "*", "(", "alpha", "-", "1", ")", ",", ":", "n_in", "//", "beta", ",", ":", ",", ":", ",", ":", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "checkpoint", ",", "strict", "=", "False", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.nets.GC_GST.resnet101": [[218, 235], ["GC_GST.ResNet", "torch.load_url", "list", "ResNet.load_state_dict", "model_zoo.load_url.keys", "checkpoint[].unsqueeze", "checkpoint[].size"], "function", ["home.repos.pwc.inspect_result.haoyanbin918_group-contextualization.ops_tdn.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "def", "resnet101", "(", "alpha", ",", "beta", ",", "**", "kwargs", ")", ":", "\n", "\t", "\"\"\"Constructs a ResNet-101 model.\n\tArgs:\n\t\tgroups\n\t\"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "checkpoint", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", "\n", "layer_name", "=", "list", "(", "checkpoint", ".", "keys", "(", ")", ")", "\n", "for", "ln", "in", "layer_name", ":", "\n", "\t\t", "if", "'conv'", "in", "ln", "or", "'downsample.0.weight'", "in", "ln", ":", "\n", "\t\t\t", "checkpoint", "[", "ln", "]", "=", "checkpoint", "[", "ln", "]", ".", "unsqueeze", "(", "2", ")", "\n", "", "if", "'conv2'", "in", "ln", ":", "\n", "\t\t\t", "n_out", ",", "n_in", ",", "_", ",", "_", ",", "_", "=", "checkpoint", "[", "ln", "]", ".", "size", "(", ")", "\n", "checkpoint", "[", "ln", "]", "=", "checkpoint", "[", "ln", "]", "[", ":", "n_out", "//", "alpha", "*", "(", "alpha", "-", "1", ")", ",", ":", "n_in", "//", "beta", ",", ":", ",", ":", ",", ":", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "checkpoint", ",", "strict", "=", "False", ")", "\n", "\n", "return", "model", "\n", "\n"]]}