{"home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.predict.predict": [[35, 78], ["logging.info", "os.path.exists", "len", "utils.getDataLoader", "segmentation_models_pytorch.utils.losses.DiceLoss", "segmentation_models_pytorch.utils.train.ValidEpoch", "smp.utils.train.ValidEpoch.run", "len", "range", "glob.glob", "os.path.exists", "logging.info", "os.makedirs", "segmentation_models_pytorch.utils.metrics.IoU", "glob.glob", "logging.info", "net.predict().squeeze().cpu().numpy().round().astype", "predict.save", "os.path.exists", "logging.info", "os.makedirs", "len", "logging.info", "preprocessing_module.run", "test_dataset.getWithoutProcessing", "utils.visualize", "glob.glob", "net.predict().squeeze().cpu().numpy().round", "test_dataset.images_fps[].split", "net.predict().squeeze().cpu().numpy", "net.predict().squeeze().cpu", "net.predict().squeeze", "net.predict", "torch.from_numpy().to().unsqueeze", "torch.from_numpy().to", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.utils.getDataLoader", "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.preprocessing_module.run", "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.preprocessing_module.save", "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.preprocessing_module.run", "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.utils.Dataset.getWithoutProcessing", "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.utils.visualize", "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.predict.predict"], ["def", "predict", "(", "net", ",", "device", ",", "data", ",", "image_scale", ",", "use_preprocessing_module", ",", "visualize", ")", ":", "\n", "  ", "testing_path", "=", "'./data/'", "+", "data", "\n", "logging", ".", "info", "(", "f'Predicting {testing_path} testing data.'", ")", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "testing_path", ")", ",", "'The data folder specified does not exist! '", "+", "'Please, make sure that the specified folder is inside data directory.'", "\n", "assert", "len", "(", "glob", ".", "glob", "(", "testing_path", "+", "'/imgs/*'", ")", ")", ",", "'No images have been found! '", "+", "'Please, make sure that the '", "+", "testing_path", "+", "'/imgs folder contains images.'", "\n", "if", "use_preprocessing_module", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "testing_path", "+", "'/imgs_preprocessed'", ")", ":", "\n", "      ", "logging", ".", "info", "(", "f'Creating imgs_preprocessed folder.'", ")", "\n", "os", ".", "makedirs", "(", "testing_path", "+", "'/imgs_preprocessed'", ")", "\n", "", "if", "not", "len", "(", "glob", ".", "glob", "(", "testing_path", "+", "'/imgs_preprocessed/*'", ")", ")", ":", "\n", "      ", "logging", ".", "info", "(", "f'Pre-processing module is enabled.'", ")", "\n", "preprocessing_module", ".", "run", "(", "testing_path", ")", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "testing_path", "+", "'/masks'", ")", ":", "\n", "    ", "logging", ".", "info", "(", "f'Creating masks folder.'", ")", "\n", "os", ".", "makedirs", "(", "testing_path", "+", "'/masks'", ")", "\n", "\n", "", "test_dataset", ",", "test_loader", "=", "utils", ".", "getDataLoader", "(", "\n", "testing_path", ",", "\n", "batch_size", "=", "1", ",", "\n", "image_scale", "=", "image_scale", ",", "\n", "encoder", "=", "'se_resnet50'", ",", "\n", "encoder_weights", "=", "'imagenet'", ",", "\n", "use_preprocessing_module", "=", "use_preprocessing_module", ",", "\n", "use_augmentation", "=", "False", ",", "\n", "shuffle_data", "=", "False", "\n", ")", "\n", "loss", "=", "smp", ".", "utils", ".", "losses", ".", "DiceLoss", "(", ")", "\n", "metrics", "=", "[", "smp", ".", "utils", ".", "metrics", ".", "IoU", "(", ")", "]", "\n", "test_epoch", "=", "smp", ".", "utils", ".", "train", ".", "ValidEpoch", "(", "model", "=", "net", ",", "loss", "=", "loss", ",", "metrics", "=", "metrics", ",", "device", "=", "device", ")", "\n", "test_logs", "=", "test_epoch", ".", "run", "(", "test_loader", ")", "\n", "num_predictions", "=", "len", "(", "glob", ".", "glob", "(", "testing_path", "+", "'/imgs/*'", ")", ")", "\n", "for", "i", "in", "range", "(", "num_predictions", ")", ":", "\n", "    ", "logging", ".", "info", "(", "f'Testing image {i+1}/{num_predictions}.'", ")", "\n", "image_vis", "=", "test_dataset", ".", "getWithoutProcessing", "(", "i", ")", "[", "0", "]", "\n", "image", ",", "_", "=", "test_dataset", "[", "i", "]", "\n", "predicted_mask", "=", "(", "net", ".", "predict", "(", "torch", ".", "from_numpy", "(", "image", ")", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "round", "(", ")", ")", ".", "astype", "(", "'uint8'", ")", "\n", "save_path", "=", "testing_path", "+", "'/masks/'", "+", "test_dataset", ".", "images_fps", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "save", "(", "predicted_mask", ",", "save_path", ")", "\n", "if", "visualize", ":", "\n", "      ", "utils", ".", "visualize", "(", "image", "=", "image_vis", ",", "predicted_mask", "=", "predicted_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.predict.save": [[79, 87], ["matplotlib.figure", "plt.figure.add_axes", "matplotlib.axis", "matplotlib.imshow", "matplotlib.savefig", "matplotlib.close"], "function", ["None"], ["", "", "", "def", "save", "(", "predicted_mask", ",", "save_path", ")", ":", "\n", "  ", "w", ",", "h", "=", "predicted_mask", ".", "shape", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "25.92", ",", "19.44", ")", ")", "\n", "fig", ".", "add_axes", "(", "[", "0", ",", "0", ",", "1", ",", "1", "]", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "imshow", "(", "predicted_mask", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "savefig", "(", "save_path", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.predict.getArgs": [[88, 101], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "max", "glob.glob"], "function", ["None"], ["", "def", "getArgs", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'-m'", ",", "'--model'", ",", "dest", "=", "'model'", ",", "type", "=", "str", ",", "default", "=", "max", "(", "glob", ".", "glob", "(", "'./checkpoint/*.pth'", ")", ",", "key", "=", "os", ".", "path", ".", "getctime", ")", ",", "\n", "help", "=", "\"Specify the file in which the model is stored (default takes last model saved in checkpoint folder)\"", ")", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "'--scale'", ",", "dest", "=", "'image_scale'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "\"Scale factor for the input images (default size is 640x480)\"", ")", "\n", "parser", ".", "add_argument", "(", "'-d'", ",", "'--data'", ",", "dest", "=", "'data'", ",", "type", "=", "str", ",", "default", "=", "'high'", ",", "\n", "help", "=", "'Data folder (default is high)'", ")", "\n", "parser", ".", "add_argument", "(", "'-p'", ",", "'--use_preprocessing_module'", ",", "dest", "=", "'use_preprocessing_module'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'Use pre-processing module (default is True)'", ")", "\n", "parser", ".", "add_argument", "(", "'-v'", ",", "'--visualize'", ",", "dest", "=", "'visualize'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'Visualize predicted masks (default is False)'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.predict.main": [[102, 114], ["segmentation_models_pytorch.UnetPlusPlus", "logging.info", "smp.UnetPlusPlus.to", "predict.predict", "torch.device", "smp.UnetPlusPlus.load_state_dict", "torch.load", "smp.UnetPlusPlus.load_state_dict", "logging.info", "torch.cuda.is_available", "torch.load"], "function", ["home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.predict.predict"], ["", "def", "main", "(", "args", ")", ":", "\n", "  ", "net", "=", "smp", ".", "UnetPlusPlus", "(", "encoder_name", "=", "'se_resnet50'", ",", "encoder_weights", "=", "'imagenet'", ",", "classes", "=", "1", ",", "activation", "=", "'sigmoid'", ")", "\n", "try", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "model", ",", "map_location", "=", "device", ")", ")", "\n", "", "except", "RuntimeError", ":", "\n", "    ", "device", "=", "'cpu'", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "model", ",", "map_location", "=", "device", ")", ")", "\n", "logging", ".", "info", "(", "f'Using {device}!'", ")", "\n", "", "logging", ".", "info", "(", "f'Model loaded from {args.model}.'", ")", "\n", "net", ".", "to", "(", "device", "=", "device", ")", "\n", "predict", "(", "net", ",", "device", ",", "args", ".", "data", ",", "args", ".", "image_scale", ",", "args", ".", "use_preprocessing_module", ",", "args", ".", "visualize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.utils.Dataset.__init__": [[34, 41], ["os.listdir", "os.path.join", "os.path.join"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "images_dir", ",", "masks_dir", ",", "image_scale", "=", "0.5", ",", "augmentation", "=", "None", ",", "preprocessing", "=", "None", ")", ":", "\n", "    ", "self", ".", "ids", "=", "os", ".", "listdir", "(", "images_dir", ")", "\n", "self", ".", "images_fps", "=", "[", "os", ".", "path", ".", "join", "(", "images_dir", ",", "image_id", ")", "for", "image_id", "in", "self", ".", "ids", "]", "\n", "self", ".", "masks_fps", "=", "[", "os", ".", "path", ".", "join", "(", "masks_dir", ",", "image_id", ")", "for", "image_id", "in", "self", ".", "ids", "]", "\n", "self", ".", "image_scale", "=", "image_scale", "\n", "self", ".", "augmentation", "=", "augmentation", "\n", "self", ".", "preprocessing", "=", "preprocessing", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.utils.Dataset.__getitem__": [[42, 57], ["cv2.imread", "cv2.resize", "numpy.zeros", "utils.normalize", "utils.Dataset.augmentation", "utils.Dataset.preprocessing", "int", "int", "utils.toTensor", "utils.toTensor"], "methods", ["home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.utils.normalize", "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.utils.toTensor", "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.utils.toTensor"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "    ", "image", "=", "cv2", ".", "imread", "(", "self", ".", "images_fps", "[", "i", "]", ")", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "int", "(", "self", ".", "image_scale", "*", "WIDTH", ")", ",", "int", "(", "self", ".", "image_scale", "*", "HEIGHT", ")", ")", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ",", "1", ")", ",", "np", ".", "uint8", ")", "\n", "if", "self", ".", "augmentation", ":", "\n", "      ", "sample", "=", "self", ".", "augmentation", "(", "image", "=", "image", ",", "mask", "=", "mask", ")", "\n", "image", ",", "mask", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'mask'", "]", "\n", "", "image", ",", "mask", "=", "normalize", "(", "image", ",", "mask", ")", "\n", "# (Height, Width, Channels) to (Channels, Height, Width)", "\n", "if", "self", ".", "preprocessing", ":", "\n", "      ", "sample", "=", "self", ".", "preprocessing", "(", "image", "=", "image", ",", "mask", "=", "mask", ")", "\n", "image", ",", "mask", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'mask'", "]", "\n", "", "else", ":", "\n", "      ", "image", ",", "mask", "=", "toTensor", "(", "image", ")", ",", "toTensor", "(", "mask", ")", "\n", "", "return", "image", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.utils.Dataset.getWithoutProcessing": [[58, 62], ["cv2.imread", "cv2.imread"], "methods", ["None"], ["", "def", "getWithoutProcessing", "(", "self", ",", "i", ")", ":", "\n", "    ", "image", "=", "cv2", ".", "imread", "(", "self", ".", "images_fps", "[", "i", "]", ")", "\n", "mask", "=", "cv2", ".", "imread", "(", "self", ".", "masks_fps", "[", "i", "]", ",", "0", ")", "\n", "return", "image", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.utils.Dataset.__len__": [[63, 65], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.utils.normalize": [[66, 70], ["cv2.normalize", "cv2.normalize"], "function", ["home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.utils.normalize", "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.utils.normalize"], ["", "", "def", "normalize", "(", "image", ",", "mask", ")", ":", "\n", "  ", "cv2", ".", "normalize", "(", "image", ",", "image", ",", "0", ",", "1", ",", "cv2", ".", "NORM_MINMAX", ")", "\n", "cv2", ".", "normalize", "(", "mask", ",", "mask", ",", "0", ",", "1", ",", "cv2", ".", "NORM_MINMAX", ")", "\n", "return", "image", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.utils.getDataLoader": [[71, 80], ["torch.utils.data.DataLoader", "utils.getAugmentation", "utils.getPreprocessing", "utils.Dataset", "utils.Dataset", "segmentation_models_pytorch.encoders.get_preprocessing_fn"], "function", ["home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.utils.getAugmentation", "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.utils.getPreprocessing"], ["", "def", "getDataLoader", "(", "path", ",", "batch_size", ",", "image_scale", ",", "encoder", ",", "encoder_weights", ",", "use_preprocessing_module", "=", "False", ",", "use_augmentation", "=", "None", ",", "shuffle_data", "=", "False", ")", ":", "\n", "  ", "augmentation", "=", "getAugmentation", "(", ")", "if", "use_augmentation", "else", "None", "\n", "preprocessing", "=", "getPreprocessing", "(", "smp", ".", "encoders", ".", "get_preprocessing_fn", "(", "encoder", ",", "encoder_weights", ")", ")", "if", "encoder_weights", "else", "None", "\n", "if", "use_preprocessing_module", ":", "\n", "    ", "dataset", "=", "Dataset", "(", "path", "+", "'/imgs_preprocessed'", ",", "path", "+", "'/masks'", ",", "image_scale", "=", "image_scale", ",", "augmentation", "=", "augmentation", ",", "preprocessing", "=", "preprocessing", ")", "\n", "", "else", ":", "\n", "    ", "dataset", "=", "Dataset", "(", "path", "+", "'/imgs'", ",", "path", "+", "'/masks'", ",", "image_scale", "=", "image_scale", ",", "augmentation", "=", "augmentation", ",", "preprocessing", "=", "preprocessing", ")", "\n", "", "loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle_data", ",", "num_workers", "=", "8", ")", "\n", "return", "dataset", ",", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.utils.getAugmentation": [[81, 91], ["albumentations.Compose", "albumentations.HorizontalFlip", "albumentations.VerticalFlip", "albumentations.RandomContrast", "albumentations.IAAAdditiveGaussianNoise", "albumentations.OneOf", "albumentations.OneOf", "albumentations.RandomBrightness", "albumentations.RandomGamma", "albumentations.IAASharpen", "albumentations.Blur", "albumentations.MotionBlur"], "function", ["None"], ["", "def", "getAugmentation", "(", ")", ":", "\n", "  ", "train_transform", "=", "[", "\n", "albu", ".", "HorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "albu", ".", "VerticalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "albu", ".", "RandomContrast", "(", "p", "=", "0.2", ")", ",", "\n", "albu", ".", "IAAAdditiveGaussianNoise", "(", "p", "=", "0.2", ")", ",", "\n", "albu", ".", "OneOf", "(", "[", "albu", ".", "RandomBrightness", "(", "p", "=", "1", ")", ",", "albu", ".", "RandomGamma", "(", "p", "=", "1", ")", "]", ",", "p", "=", "0.9", ")", ",", "\n", "albu", ".", "OneOf", "(", "[", "albu", ".", "IAASharpen", "(", "p", "=", "1", ")", ",", "albu", ".", "Blur", "(", "blur_limit", "=", "3", ",", "p", "=", "1", ")", ",", "albu", ".", "MotionBlur", "(", "blur_limit", "=", "3", ",", "p", "=", "1", ")", "]", ",", "p", "=", "0.9", ")", "\n", "]", "\n", "return", "albu", ".", "Compose", "(", "train_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.utils.toTensor": [[92, 96], ["np.expand_dims.transpose().astype", "len", "numpy.expand_dims", "np.expand_dims.transpose"], "function", ["None"], ["", "def", "toTensor", "(", "x", ",", "**", "kwargs", ")", ":", "\n", "  ", "if", "len", "(", "x", ".", "shape", ")", "==", "2", ":", "\n", "    ", "x", "=", "np", ".", "expand_dims", "(", "x", ",", "axis", "=", "2", ")", "\n", "", "return", "x", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.utils.getPreprocessing": [[97, 100], ["albumentations.Compose", "albumentations.Lambda", "albumentations.Lambda"], "function", ["None"], ["", "def", "getPreprocessing", "(", "preprocessing_fn", ")", ":", "\n", "  ", "_transform", "=", "[", "albu", ".", "Lambda", "(", "image", "=", "preprocessing_fn", ")", ",", "albu", ".", "Lambda", "(", "image", "=", "toTensor", ",", "mask", "=", "toTensor", ")", "]", "\n", "return", "albu", ".", "Compose", "(", "_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.utils.visualize": [[101, 111], ["len", "matplotlib.figure", "enumerate", "matplotlib.show", "images.items", "matplotlib.subplot", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.title", "matplotlib.imshow", "name.split"], "function", ["None"], ["", "def", "visualize", "(", "**", "images", ")", ":", "\n", "  ", "n", "=", "len", "(", "images", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "16", ",", "5", ")", ")", "\n", "for", "i", ",", "(", "name", ",", "image", ")", "in", "enumerate", "(", "images", ".", "items", "(", ")", ")", ":", "\n", "    ", "plt", ".", "subplot", "(", "1", ",", "n", ",", "i", "+", "1", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "plt", ".", "title", "(", "' '", ".", "join", "(", "name", ".", "split", "(", "'_'", ")", ")", ".", "title", "(", ")", ")", "\n", "plt", ".", "imshow", "(", "image", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.utils.parseHistory": [[112, 116], ["pandas.read_csv", "pd.read_csv.rename", "max", "glob.glob"], "function", ["None"], ["", "def", "parseHistory", "(", ")", ":", "\n", "  ", "history", "=", "pd", ".", "read_csv", "(", "max", "(", "glob", ".", "glob", "(", "'./history/*.csv'", ")", ",", "key", "=", "os", ".", "path", ".", "getctime", ")", ")", "\n", "history", ".", "rename", "(", "columns", "=", "{", "history", ".", "columns", "[", "0", "]", ":", "\"epoch\"", "}", ",", "inplace", "=", "True", ")", "\n", "return", "history", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.preprocessing_module.HEDnetwork.__init__": [[69, 122], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "preprocessing_module.HEDnetwork.load_state_dict", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Sigmoid", "strKey.replace", "torch.hub.load_state_dict_from_url().items", "torch.hub.load_state_dict_from_url"], "methods", ["home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.preprocessing_module.HEDnetwork.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "HEDnetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "netVggOne", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", "self", ".", "netVggTwo", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", "self", ".", "netVggThr", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", "self", ".", "netVggFou", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", "self", ".", "netVggFiv", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", "self", ".", "netScoreOne", "=", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "netScoreTwo", "=", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "netScoreThr", "=", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "netScoreFou", "=", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "netScoreFiv", "=", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "netCombine", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "5", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "url", "=", "'http://content.sniklaus.com/github/pytorch-hed/network-bsds500.pytorch'", "\n", "self", ".", "load_state_dict", "(", "{", "strKey", ".", "replace", "(", "'module'", ",", "'net'", ")", ":", "tenWeight", "for", "strKey", ",", "tenWeight", "in", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "url", "=", "url", ",", "file_name", "=", "'hed-bsds500'", ")", ".", "items", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.preprocessing_module.HEDnetwork.forward": [[123, 144], ["torch.cat", "preprocessing_module.HEDnetwork.netVggOne", "preprocessing_module.HEDnetwork.netVggTwo", "preprocessing_module.HEDnetwork.netVggThr", "preprocessing_module.HEDnetwork.netVggFou", "preprocessing_module.HEDnetwork.netVggFiv", "preprocessing_module.HEDnetwork.netScoreOne", "preprocessing_module.HEDnetwork.netScoreTwo", "preprocessing_module.HEDnetwork.netScoreThr", "preprocessing_module.HEDnetwork.netScoreFou", "preprocessing_module.HEDnetwork.netScoreFiv", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "preprocessing_module.HEDnetwork.netCombine", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tenInput", ")", ":", "\n", "\t\t", "tenBlue", "=", "(", "tenInput", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "*", "255.0", ")", "-", "127", "\n", "tenGreen", "=", "(", "tenInput", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "*", "255.0", ")", "-", "127", "\n", "tenRed", "=", "(", "tenInput", "[", ":", ",", "2", ":", "3", ",", ":", ",", ":", "]", "*", "255.0", ")", "-", "127", "\n", "tenInput", "=", "torch", ".", "cat", "(", "[", "tenBlue", ",", "tenGreen", ",", "tenRed", "]", ",", "1", ")", "\n", "tenVggOne", "=", "self", ".", "netVggOne", "(", "tenInput", ")", "\n", "tenVggTwo", "=", "self", ".", "netVggTwo", "(", "tenVggOne", ")", "\n", "tenVggThr", "=", "self", ".", "netVggThr", "(", "tenVggTwo", ")", "\n", "tenVggFou", "=", "self", ".", "netVggFou", "(", "tenVggThr", ")", "\n", "tenVggFiv", "=", "self", ".", "netVggFiv", "(", "tenVggFou", ")", "\n", "tenScoreOne", "=", "self", ".", "netScoreOne", "(", "tenVggOne", ")", "\n", "tenScoreTwo", "=", "self", ".", "netScoreTwo", "(", "tenVggTwo", ")", "\n", "tenScoreThr", "=", "self", ".", "netScoreThr", "(", "tenVggThr", ")", "\n", "tenScoreFou", "=", "self", ".", "netScoreFou", "(", "tenVggFou", ")", "\n", "tenScoreFiv", "=", "self", ".", "netScoreFiv", "(", "tenVggFiv", ")", "\n", "tenScoreOne", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "input", "=", "tenScoreOne", ",", "size", "=", "(", "tenInput", ".", "shape", "[", "2", "]", ",", "tenInput", ".", "shape", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "tenScoreTwo", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "input", "=", "tenScoreTwo", ",", "size", "=", "(", "tenInput", ".", "shape", "[", "2", "]", ",", "tenInput", ".", "shape", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "tenScoreThr", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "input", "=", "tenScoreThr", ",", "size", "=", "(", "tenInput", ".", "shape", "[", "2", "]", ",", "tenInput", ".", "shape", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "tenScoreFou", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "input", "=", "tenScoreFou", ",", "size", "=", "(", "tenInput", ".", "shape", "[", "2", "]", ",", "tenInput", ".", "shape", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "tenScoreFiv", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "input", "=", "tenScoreFiv", ",", "size", "=", "(", "tenInput", ".", "shape", "[", "2", "]", ",", "tenInput", ".", "shape", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "return", "self", ".", "netCombine", "(", "torch", ".", "cat", "(", "[", "tenScoreOne", ",", "tenScoreTwo", ",", "tenScoreThr", ",", "tenScoreFou", ",", "tenScoreFiv", "]", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.preprocessing_module.save": [[36, 44], ["matplotlib.figure", "plt.figure.add_axes", "matplotlib.axis", "matplotlib.imshow", "matplotlib.savefig", "matplotlib.close"], "function", ["None"], ["def", "save", "(", "image", ",", "path", ")", ":", "\n", "  ", "w", ",", "h", ",", "*", "_", "=", "image", ".", "shape", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "h", "/", "100", ",", "w", "/", "100", ")", ")", "\n", "fig", ".", "add_axes", "(", "[", "0", ",", "0", ",", "1", ",", "1", "]", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "imshow", "(", "image", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "savefig", "(", "path", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.preprocessing_module.run": [[45, 62], ["cv2.createCLAHE", "cv2.createCLAHE", "HEDnetwork().cuda().eval", "glob.glob", "len", "enumerate", "logging.info", "cv2.imread", "cv2.resize", "preprocessing_module.save", "cv2.createCLAHE.apply", "cv2.createCLAHE.apply", "numpy.array", "cv2.merge", "preprocessing_module.save", "HEDnetwork().cuda", "preprocessing_module.detect", "preprocessing_module.HEDnetwork", "image_path.split"], "function", ["home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.preprocessing_module.save", "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.preprocessing_module.save", "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.preprocessing_module.detect"], ["", "def", "run", "(", "data_path", ")", ":", "\n", "  ", "clahe_2", "=", "cv2", ".", "createCLAHE", "(", "clipLimit", "=", "2.0", ",", "tileGridSize", "=", "(", "8", ",", "8", ")", ")", "\n", "clahe_4", "=", "cv2", ".", "createCLAHE", "(", "clipLimit", "=", "4.0", ",", "tileGridSize", "=", "(", "8", ",", "8", ")", ")", "\n", "hed_network", "=", "HEDnetwork", "(", ")", ".", "cuda", "(", ")", ".", "eval", "(", ")", "\n", "images_path", "=", "glob", ".", "glob", "(", "data_path", "+", "'/imgs/*.png'", ")", "\n", "save_path", "=", "data_path", "+", "'/imgs_preprocessed'", "\n", "num_images", "=", "len", "(", "images_path", ")", "\n", "for", "i", ",", "image_path", "in", "enumerate", "(", "images_path", ")", ":", "\n", "    ", "logging", ".", "info", "(", "f'Pre-processing image {i+1}/{num_images}'", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "image_path", ",", "0", ")", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "WIDTH", ",", "HEIGHT", ")", ")", "\n", "save", "(", "image", ",", "image_path", ")", "\n", "image_clahe_2", "=", "clahe_2", ".", "apply", "(", "image", ")", "\n", "image_clahe_4", "=", "clahe_4", ".", "apply", "(", "image", ")", "\n", "image_hed", "=", "numpy", ".", "array", "(", "detect", "(", "hed_network", ",", "image_path", ")", ")", "\n", "merged_image", "=", "cv2", ".", "merge", "(", "(", "image_hed", ",", "image_clahe_2", ",", "image_clahe_4", ")", ")", "\n", "save", "(", "merged_image", ",", "save_path", "+", "'/'", "+", "image_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessandroSaviolo_HBPSegmentation.None.preprocessing_module.detect": [[63, 67], ["torch.FloatTensor", "[].cpu", "PIL.Image.fromarray", "PIL.Image.fromarray", "numpy.ascontiguousarray", "[].transpose().astype", "network", "torch.FloatTensor.cuda().view", "[].transpose", "[].cpu.clamp().numpy().transpose", "torch.FloatTensor.cuda", "[].cpu.clamp().numpy", "numpy.array", "PIL.Image.open().convert", "PIL.Image.open().convert", "[].cpu.clamp", "PIL.Image.open", "PIL.Image.open"], "function", ["None"], ["", "", "def", "detect", "(", "network", ",", "image_path", ")", ":", "\n", "\t", "input_tensor", "=", "torch", ".", "FloatTensor", "(", "numpy", ".", "ascontiguousarray", "(", "numpy", ".", "array", "(", "PIL", ".", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ".", "astype", "(", "numpy", ".", "float32", ")", "*", "(", "1.0", "/", "255.0", ")", ")", ")", "\n", "output_tensor", "=", "network", "(", "input_tensor", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "3", ",", "input_tensor", ".", "shape", "[", "1", "]", ",", "input_tensor", ".", "shape", "[", "2", "]", ")", ")", "[", "0", ",", ":", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", "\n", "return", "PIL", ".", "Image", ".", "fromarray", "(", "(", "output_tensor", ".", "clamp", "(", "0.0", ",", "1.0", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "[", ":", ",", ":", ",", "0", "]", "*", "255.0", ")", ".", "astype", "(", "numpy", ".", "uint8", ")", ")", "\n", "\n"]]}