{"home.repos.pwc.inspect_result.Pay20Y_SEED.None.config.get_args": [[93, 96], ["parser.parse_args"], "function", ["None"], ["def", "get_args", "(", "sys_args", ")", ":", "\n", "  ", "global_args", "=", "parser", ".", "parse_args", "(", "sys_args", ")", "\n", "return", "global_args", "", "", ""]], "home.repos.pwc.inspect_result.Pay20Y_SEED.None.main.get_data_txt": [[34, 61], ["print", "isinstance", "zip", "lib.datasets.concatdataset.ConcatDataset", "lib.datasets.dataset.CustomDataset", "len", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "dataset_list.append", "lib.datasets.dataset.CustomDataset", "lib.datasets.dataset.AlignCollate", "lib.datasets.dataset.AlignCollate"], "function", ["None"], ["def", "get_data_txt", "(", "data_dir", ",", "gt_file_path", ",", "embed_dir", ",", "voc_type", ",", "max_len", ",", "num_samples", ",", "height", ",", "width", ",", "batch_size", ",", "workers", ",", "is_train", ",", "keep_ratio", ")", ":", "\n", "  ", "if", "isinstance", "(", "data_dir", ",", "list", ")", "and", "len", "(", "data_dir", ")", ">", "1", ":", "\n", "    ", "dataset_list", "=", "[", "]", "\n", "for", "data_dir_", ",", "gt_file_", ",", "embed_dir_", "in", "zip", "(", "data_dir", ",", "gt_file_path", ",", "embed_dir", ")", ":", "\n", "# dataset_list.append(LmdbDataset(data_dir_, voc_type, max_len, num_samples))", "\n", "      ", "dataset_list", ".", "append", "(", "CustomDataset", "(", "data_dir_", ",", "gt_file_", ",", "embed_dir_", ",", "voc_type", ",", "max_len", ",", "num_samples", ")", ")", "\n", "", "dataset", "=", "ConcatDataset", "(", "dataset_list", ")", "\n", "", "else", ":", "\n", "# dataset = LmdbDataset(data_dir, voc_type, max_len, num_samples)", "\n", "    ", "dataset", "=", "CustomDataset", "(", "data_dir", ",", "gt_file_path", ",", "embed_dir", ",", "voc_type", ",", "max_len", ",", "num_samples", ")", "\n", "", "print", "(", "'total image: '", ",", "len", "(", "dataset", ")", ")", "\n", "\n", "if", "is_train", ":", "\n", "    ", "\"\"\"\n    data_loader = DataLoader(dataset, batch_size=batch_size, num_workers=workers,\n      shuffle=True, pin_memory=True, drop_last=True,\n      collate_fn=AlignCollate(imgH=height, imgW=width, keep_ratio=keep_ratio))\n    \"\"\"", "\n", "data_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "workers", ",", "\n", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ",", "\n", "collate_fn", "=", "AlignCollate", "(", "imgH", "=", "height", ",", "imgW", "=", "width", ",", "keep_ratio", "=", "keep_ratio", ")", ")", "\n", "", "else", ":", "\n", "    ", "data_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "workers", ",", "\n", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ",", "\n", "collate_fn", "=", "AlignCollate", "(", "imgH", "=", "height", ",", "imgW", "=", "width", ",", "keep_ratio", "=", "keep_ratio", ")", ")", "\n", "\n", "", "return", "dataset", ",", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.None.main.get_data_lmdb": [[62, 82], ["isinstance", "print", "lib.datasets.concatdataset.ConcatDataset", "lib.datasets.dataset.LmdbDataset", "len", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset_list.append", "lib.datasets.dataset.LmdbDataset", "lib.datasets.dataset.AlignCollate", "lib.datasets.dataset.AlignCollate"], "function", ["None"], ["", "def", "get_data_lmdb", "(", "data_dir", ",", "voc_type", ",", "max_len", ",", "num_samples", ",", "height", ",", "width", ",", "batch_size", ",", "workers", ",", "is_train", ",", "keep_ratio", ")", ":", "\n", "  ", "if", "isinstance", "(", "data_dir", ",", "list", ")", ":", "\n", "    ", "dataset_list", "=", "[", "]", "\n", "for", "data_dir_", "in", "data_dir", ":", "\n", "      ", "dataset_list", ".", "append", "(", "LmdbDataset", "(", "data_dir_", ",", "voc_type", ",", "max_len", ",", "num_samples", ")", ")", "\n", "", "dataset", "=", "ConcatDataset", "(", "dataset_list", ")", "\n", "", "else", ":", "\n", "    ", "dataset", "=", "LmdbDataset", "(", "data_dir", ",", "voc_type", ",", "max_len", ",", "num_samples", ")", "\n", "", "print", "(", "'total image: '", ",", "len", "(", "dataset", ")", ")", "\n", "\n", "if", "is_train", ":", "\n", "    ", "data_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "workers", ",", "\n", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ",", "\n", "collate_fn", "=", "AlignCollate", "(", "imgH", "=", "height", ",", "imgW", "=", "width", ",", "keep_ratio", "=", "keep_ratio", ")", ")", "\n", "", "else", ":", "\n", "    ", "data_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "workers", ",", "\n", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ",", "\n", "collate_fn", "=", "AlignCollate", "(", "imgH", "=", "height", ",", "imgW", "=", "width", ",", "keep_ratio", "=", "keep_ratio", ")", ")", "\n", "\n", "", "return", "dataset", ",", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.None.main.get_dataset": [[84, 94], ["isinstance", "print", "lib.datasets.concatdataset.ConcatDataset", "lib.datasets.dataset.LmdbDataset", "len", "dataset_list.append", "lib.datasets.dataset.LmdbDataset"], "function", ["None"], ["", "def", "get_dataset", "(", "data_dir", ",", "voc_type", ",", "max_len", ",", "num_samples", ")", ":", "\n", "  ", "if", "isinstance", "(", "data_dir", ",", "list", ")", ":", "\n", "    ", "dataset_list", "=", "[", "]", "\n", "for", "data_dir_", "in", "data_dir", ":", "\n", "      ", "dataset_list", ".", "append", "(", "LmdbDataset", "(", "data_dir_", ",", "voc_type", ",", "max_len", ",", "num_samples", ")", ")", "\n", "", "dataset", "=", "ConcatDataset", "(", "dataset_list", ")", "\n", "", "else", ":", "\n", "    ", "dataset", "=", "LmdbDataset", "(", "data_dir", ",", "voc_type", ",", "max_len", ",", "num_samples", ")", "\n", "", "print", "(", "'total image: '", ",", "len", "(", "dataset", ")", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.None.main.get_dataloader": [[96, 115], ["len", "len", "list", "list", "torch.utils.data.SubsetRandomSampler", "lib.datasets.concatdataset.ConcatDataset", "print", "torch.utils.data.DataLoader", "numpy.random.permutation", "len", "len", "numpy.random.permutation", "lib.datasets.dataset.AlignCollate"], "function", ["None"], ["", "def", "get_dataloader", "(", "synthetic_dataset", ",", "real_dataset", ",", "height", ",", "width", ",", "batch_size", ",", "workers", ",", "\n", "is_train", ",", "keep_ratio", ")", ":", "\n", "  ", "num_synthetic_dataset", "=", "len", "(", "synthetic_dataset", ")", "\n", "num_real_dataset", "=", "len", "(", "real_dataset", ")", "\n", "\n", "synthetic_indices", "=", "list", "(", "np", ".", "random", ".", "permutation", "(", "num_synthetic_dataset", ")", ")", "\n", "synthetic_indices", "=", "synthetic_indices", "[", "num_real_dataset", ":", "]", "\n", "real_indices", "=", "list", "(", "np", ".", "random", ".", "permutation", "(", "num_real_dataset", ")", "+", "num_synthetic_dataset", ")", "\n", "concated_indices", "=", "synthetic_indices", "+", "real_indices", "\n", "assert", "len", "(", "concated_indices", ")", "==", "num_synthetic_dataset", "\n", "\n", "sampler", "=", "SubsetRandomSampler", "(", "concated_indices", ")", "\n", "concated_dataset", "=", "ConcatDataset", "(", "[", "synthetic_dataset", ",", "real_dataset", "]", ")", "\n", "print", "(", "'total image: '", ",", "len", "(", "concated_dataset", ")", ")", "\n", "\n", "data_loader", "=", "DataLoader", "(", "concated_dataset", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "workers", ",", "\n", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ",", "sampler", "=", "sampler", ",", "\n", "collate_fn", "=", "AlignCollate", "(", "imgH", "=", "height", ",", "imgW", "=", "width", ",", "keep_ratio", "=", "keep_ratio", ")", ")", "\n", "return", "concated_dataset", ",", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.None.main.main": [[116, 261], ["numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "main.get_data_lmdb", "lib.models.model_builder.ModelBuilder", "lib.evaluators.Evaluator", "nn.DataParallel.parameters", "filter", "torch.optim.Adadelta", "torch.optim.lr_scheduler.MultiStepLR", "lib.trainers.Trainer", "lib.evaluators.Evaluator.evaluate", "range", "print", "lib.utils.serialization.load_checkpoint", "nn.DataParallel.module.load_state_dict", "lib.evaluators.Evaluator.evaluate", "lib.utils.logging.TFLogger.close", "lib.utils.logging.TFLogger.close", "torch.cuda.is_available", "print", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "lib.utils.logging.Logger", "lib.utils.logging.TFLogger", "lib.utils.logging.TFLogger", "os.join", "vars", "main.get_data_lmdb", "max", "lib.utils.serialization.load_checkpoint", "nn.DataParallel.load_state_dict", "torch.device", "nn.DataParallel.to", "torch.nn.DataParallel", "print", "time.time", "lib.evaluators.Evaluator.evaluate", "print", "optim.lr_scheduler.MultiStepLR.step", "print", "lib.trainers.Trainer.train", "os.join", "os.join", "os.join", "os.join", "open", "vars.items", "ValueError", "lib.utils.serialization.load_checkpoint.keys", "print", "print", "len", "f.write", "int", "os.exists", "os.makedirs", "os.makedirs", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.Pay20Y_SEED.None.main.get_data_lmdb", "home.repos.pwc.inspect_result.Pay20Y_SEED.lib.evaluators.BaseEvaluator.evaluate", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.serialization.load_checkpoint", "home.repos.pwc.inspect_result.Pay20Y_SEED.lib.evaluators.BaseEvaluator.evaluate", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.TFLogger.close", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.TFLogger.close", "home.repos.pwc.inspect_result.Pay20Y_SEED.None.main.get_data_lmdb", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.serialization.load_checkpoint", "home.repos.pwc.inspect_result.Pay20Y_SEED.lib.evaluators.BaseEvaluator.evaluate", "home.repos.pwc.inspect_result.Pay20Y_SEED.lib.trainers.BaseTrainer.train", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.Logger.write"], ["", "def", "main", "(", "args", ")", ":", "\n", "  ", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "args", ".", "cuda", "=", "args", ".", "cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "    ", "print", "(", "'using cuda.'", ")", "\n", "torch", ".", "set_default_tensor_type", "(", "'torch.cuda.FloatTensor'", ")", "\n", "", "else", ":", "\n", "    ", "torch", ".", "set_default_tensor_type", "(", "'torch.FloatTensor'", ")", "\n", "\n", "# Redirect print to both console and log file", "\n", "", "if", "not", "args", ".", "evaluate", ":", "\n", "# make symlink", "\n", "# make_symlink_if_not_exists(osp.join(args.real_logs_dir, args.logs_dir), osp.dirname(osp.normpath(args.logs_dir)))", "\n", "    ", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'log.txt'", ")", ")", "\n", "train_tfLogger", "=", "TFLogger", "(", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'train'", ")", ")", "\n", "eval_tfLogger", "=", "TFLogger", "(", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'eval'", ")", ")", "\n", "\n", "# Save the args to disk", "\n", "", "if", "not", "args", ".", "evaluate", ":", "\n", "    ", "cfg_save_path", "=", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'cfg.txt'", ")", "\n", "cfgs", "=", "vars", "(", "args", ")", "\n", "with", "open", "(", "cfg_save_path", ",", "'w'", ")", "as", "f", ":", "\n", "      ", "for", "k", ",", "v", "in", "cfgs", ".", "items", "(", ")", ":", "\n", "        ", "f", ".", "write", "(", "'{}: {}\\n'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "# Create data loaders", "\n", "", "", "", "if", "args", ".", "height", "is", "None", "or", "args", ".", "width", "is", "None", ":", "\n", "    ", "args", ".", "height", ",", "args", ".", "width", "=", "(", "32", ",", "100", ")", "\n", "\n", "", "if", "not", "args", ".", "evaluate", ":", "\n", "    ", "\"\"\"\n    train_dataset, train_loader = \\\n      get_data_txt(args.synthetic_train_data_dir, args.train_data_gt, args.train_embed_dir, args.voc_type, args.max_len, args.num_train,\n               args.height, args.width, args.batch_size, args.workers, True, args.keep_ratio)\n    \"\"\"", "\n", "train_dataset", ",", "train_loader", "=", "get_data_lmdb", "(", "args", ".", "synthetic_train_data_dir", ",", "args", ".", "voc_type", ",", "args", ".", "max_len", ",", "args", ".", "num_train", ",", "\n", "args", ".", "height", ",", "args", ".", "width", ",", "args", ".", "batch_size", ",", "args", ".", "workers", ",", "True", ",", "args", ".", "keep_ratio", ")", "\n", "\n", "", "test_dataset", ",", "test_loader", "=", "get_data_lmdb", "(", "args", ".", "test_data_dir", ",", "args", ".", "voc_type", ",", "args", ".", "max_len", ",", "args", ".", "num_test", ",", "args", ".", "height", ",", "\n", "args", ".", "width", ",", "args", ".", "batch_size", ",", "args", ".", "workers", ",", "False", ",", "args", ".", "keep_ratio", ")", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "    ", "max_len", "=", "test_dataset", ".", "max_len", "\n", "", "else", ":", "\n", "    ", "max_len", "=", "max", "(", "train_dataset", ".", "max_len", ",", "test_dataset", ".", "max_len", ")", "\n", "train_dataset", ".", "max_len", "=", "test_dataset", ".", "max_len", "=", "max_len", "\n", "# Create model", "\n", "", "model", "=", "ModelBuilder", "(", "arch", "=", "args", ".", "arch", ",", "rec_num_classes", "=", "test_dataset", ".", "rec_num_classes", ",", "\n", "sDim", "=", "args", ".", "decoder_sdim", ",", "attDim", "=", "args", ".", "attDim", ",", "max_len_labels", "=", "max_len", ",", "\n", "eos", "=", "test_dataset", ".", "char2id", "[", "test_dataset", ".", "EOS", "]", ",", "STN_ON", "=", "args", ".", "STN_ON", ")", "\n", "\n", "# Load from checkpoint", "\n", "if", "args", ".", "evaluation_metric", "==", "'accuracy'", ":", "\n", "    ", "best_res", "=", "0", "\n", "", "elif", "args", ".", "evaluation_metric", "==", "'editdistance'", ":", "\n", "    ", "best_res", "=", "math", ".", "inf", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Unsupported evaluation metric:\"", ",", "args", ".", "evaluation_metric", ")", "\n", "", "start_epoch", "=", "0", "\n", "start_iters", "=", "0", "\n", "if", "args", ".", "resume", ":", "\n", "    ", "checkpoint", "=", "load_checkpoint", "(", "args", ".", "resume", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "# compatibility with the epoch-wise evaluation version", "\n", "if", "'epoch'", "in", "checkpoint", ".", "keys", "(", ")", ":", "\n", "      ", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "", "else", ":", "\n", "      ", "start_iters", "=", "checkpoint", "[", "'iters'", "]", "\n", "start_epoch", "=", "int", "(", "start_iters", "//", "len", "(", "train_loader", ")", ")", "if", "not", "args", ".", "evaluate", "else", "0", "\n", "", "best_res", "=", "checkpoint", "[", "'best_res'", "]", "\n", "if", "not", "args", ".", "evaluate", ":", "\n", "      ", "print", "(", "\"=> Start epoch\"", ",", "start_epoch", ")", "\n", "print", "(", "\"=> Start iters {}  best res {:.1%}\"", ".", "format", "(", "start_iters", ",", "best_res", ")", ")", "\n", "\n", "", "", "if", "args", ".", "cuda", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "# Evaluator", "\n", "", "evaluator", "=", "Evaluator", "(", "model", ",", "args", ".", "evaluation_metric", ",", "args", ".", "cuda", ")", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "    ", "print", "(", "'Test on {0}:'", ".", "format", "(", "args", ".", "test_data_dir", ")", ")", "\n", "if", "len", "(", "args", ".", "vis_dir", ")", ">", "0", ":", "\n", "# vis_dir = osp.join(args.logs_dir, args.vis_dir)", "\n", "      ", "vis_dir", "=", "args", ".", "vis_dir", "\n", "if", "not", "osp", ".", "exists", "(", "vis_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "vis_dir", ")", "\n", "", "", "else", ":", "\n", "      ", "vis_dir", "=", "None", "\n", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "evaluator", ".", "evaluate", "(", "test_loader", ",", "dataset", "=", "test_dataset", ",", "vis_dir", "=", "vis_dir", ")", "\n", "print", "(", "'it took {0} s.'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "\n", "\n", "# Optimizer", "\n", "", "param_groups", "=", "model", ".", "parameters", "(", ")", "\n", "param_groups", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "param_groups", ")", "\n", "optimizer", "=", "optim", ".", "Adadelta", "(", "param_groups", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "[", "4", ",", "5", "]", ",", "gamma", "=", "0.1", ")", "\n", "\n", "# Trainer", "\n", "loss_weights", "=", "{", "}", "\n", "loss_weights", "[", "'loss_rec'", "]", "=", "1.", "\n", "loss_weights", "[", "'loss_embed'", "]", "=", "0.1", "\n", "if", "args", ".", "debug", ":", "\n", "    ", "args", ".", "print_freq", "=", "1", "\n", "", "trainer", "=", "Trainer", "(", "model", ",", "args", ".", "evaluation_metric", ",", "args", ".", "logs_dir", ",", "\n", "iters", "=", "start_iters", ",", "best_res", "=", "best_res", ",", "grad_clip", "=", "args", ".", "grad_clip", ",", "\n", "use_cuda", "=", "args", ".", "cuda", ",", "loss_weights", "=", "loss_weights", ")", "\n", "\n", "# Start training", "\n", "evaluator", ".", "evaluate", "(", "test_loader", ",", "step", "=", "0", ",", "tfLogger", "=", "eval_tfLogger", ",", "dataset", "=", "test_dataset", ")", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "# For torch 1.2.0 move scheduler.step() after optim.step()", "\n", "    ", "scheduler", ".", "step", "(", "epoch", ")", "\n", "current_lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "print", "(", "\"current_lr: \"", ",", "current_lr", ")", "\n", "trainer", ".", "train", "(", "epoch", ",", "train_loader", ",", "optimizer", ",", "current_lr", ",", "\n", "print_freq", "=", "args", ".", "print_freq", ",", "\n", "train_tfLogger", "=", "train_tfLogger", ",", "\n", "is_debug", "=", "args", ".", "debug", ",", "\n", "evaluator", "=", "evaluator", ",", "\n", "test_loader", "=", "test_loader", ",", "\n", "eval_tfLogger", "=", "eval_tfLogger", ",", "\n", "test_dataset", "=", "test_dataset", ")", "\n", "# scheduler.step(epoch)", "\n", "# Final test", "\n", "", "print", "(", "'Test with best model:'", ")", "\n", "checkpoint", "=", "load_checkpoint", "(", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'model_best.pth.tar'", ")", ")", "\n", "model", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "evaluator", ".", "evaluate", "(", "test_loader", ",", "dataset", "=", "test_dataset", ")", "\n", "\n", "# Close the tensorboard logger", "\n", "train_tfLogger", ".", "close", "(", ")", "\n", "eval_tfLogger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.lib.trainers.BaseTrainer.__init__": [[26, 38], ["object.__init__", "torch.device"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.__init__"], ["  ", "def", "__init__", "(", "self", ",", "model", ",", "metric", ",", "logs_dir", ",", "iters", "=", "0", ",", "best_res", "=", "-", "1", ",", "grad_clip", "=", "-", "1", ",", "use_cuda", "=", "True", ",", "loss_weights", "=", "{", "}", ")", ":", "\n", "    ", "super", "(", "BaseTrainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "metric", "=", "metric", "\n", "self", ".", "logs_dir", "=", "logs_dir", "\n", "self", ".", "iters", "=", "iters", "\n", "self", ".", "best_res", "=", "best_res", "\n", "self", ".", "grad_clip", "=", "grad_clip", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "self", ".", "loss_weights", "=", "loss_weights", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.lib.trainers.BaseTrainer.train": [[39, 167], ["trainers.BaseTrainer.model.train", "utils.meters.AverageMeter", "utils.meters.AverageMeter", "utils.meters.AverageMeter", "time.time", "enumerate", "trainers.BaseTrainer.model.train", "utils.meters.AverageMeter.update", "trainers.BaseTrainer._parse_data", "trainers.BaseTrainer._forward", "input_dict[].size", "output_dict[].items", "utils.meters.AverageMeter.update", "optimizer.zero_grad", "total_loss.backward", "optimizer.step", "utils.meters.AverageMeter.update", "time.time", "loss.mean.mean.mean", "loss.mean.mean.item", "total_loss.item", "torch.nn.utils.clip_grad_norm_", "print", "utils.serialization.save_checkpoint", "time.time", "trainers.BaseTrainer.model.parameters", "time.time", "loss_dict.items", "info.items", "evaluator.evaluate", "evaluator.evaluate", "print", "datetime.datetime.datetime.now().strftime", "len", "total_loss.item", "train_tfLogger.scalar_summary", "max", "trainers.BaseTrainer.model.module.state_dict", "os.join", "len", "min", "ValueError", "datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.lib.trainers.BaseTrainer.train", "home.repos.pwc.inspect_result.Pay20Y_SEED.lib.trainers.BaseTrainer.train", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.meters.AverageMeter.update", "home.repos.pwc.inspect_result.Pay20Y_SEED.lib.evaluators.Evaluator._parse_data", "home.repos.pwc.inspect_result.Pay20Y_SEED.lib.evaluators.Evaluator._forward", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.meters.AverageMeter.update", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.meters.AverageMeter.update", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.serialization.save_checkpoint", "home.repos.pwc.inspect_result.Pay20Y_SEED.lib.evaluators.BaseEvaluator.evaluate", "home.repos.pwc.inspect_result.Pay20Y_SEED.lib.evaluators.BaseEvaluator.evaluate", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.TFLogger.scalar_summary"], ["", "def", "train", "(", "self", ",", "epoch", ",", "data_loader", ",", "optimizer", ",", "current_lr", "=", "0.0", ",", "\n", "print_freq", "=", "100", ",", "train_tfLogger", "=", "None", ",", "is_debug", "=", "False", ",", "\n", "evaluator", "=", "None", ",", "test_loader", "=", "None", ",", "eval_tfLogger", "=", "None", ",", "\n", "test_dataset", "=", "None", ",", "test_freq", "=", "1000", ")", ":", "\n", "\n", "    ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", ",", "inputs", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "      ", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "iters", "+=", "1", "\n", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "input_dict", "=", "self", ".", "_parse_data", "(", "inputs", ")", "\n", "output_dict", "=", "self", ".", "_forward", "(", "input_dict", ")", "\n", "\n", "batch_size", "=", "input_dict", "[", "'images'", "]", ".", "size", "(", "0", ")", "\n", "\n", "total_loss", "=", "0", "\n", "loss_dict", "=", "{", "}", "\n", "for", "k", ",", "loss", "in", "output_dict", "[", "'losses'", "]", ".", "items", "(", ")", ":", "\n", "        ", "loss", "=", "loss", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "total_loss", "+=", "self", ".", "loss_weights", "[", "k", "]", "*", "loss", "\n", "loss_dict", "[", "k", "]", "=", "loss", ".", "item", "(", ")", "\n", "# print('{0}: {1}'.format(k, loss.item()))", "\n", "\n", "", "losses", ".", "update", "(", "total_loss", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "grad_clip", ">", "0", ":", "\n", "        ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "grad_clip", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "# # debug: check the parameters fixed or not.", "\n", "# print(self.model.parameters())", "\n", "# for tag, value in self.model.named_parameters():", "\n", "#   if tag == 'module.base.resnet.layer4.0.conv1.weight':", "\n", "#     print(value[:10,0,0,0])", "\n", "#   if tag == 'module.rec_head.decoder.attention_unit.sEmbed.weight':", "\n", "#     print(value[0, :10])", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "self", ".", "iters", "%", "print_freq", "==", "0", ":", "\n", "        ", "print", "(", "'[{}]\\t'", "\n", "'Epoch: [{}][{}/{}]\\t'", "\n", "'Time {:.3f} ({:.3f})\\t'", "\n", "'Data {:.3f} ({:.3f})\\t'", "\n", "'Loss {:.3f} ({:.3f})\\t'", "\n", "'Embed Loss: {:.5f}\\t'", "\n", "'Recog Loss: {:.3f}\\t'", "\n", "# .format(strftime(\"%Y-%m-%d %H:%M:%S\", gmtime()),", "\n", ".", "format", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ")", ",", "\n", "epoch", ",", "i", "+", "1", ",", "len", "(", "data_loader", ")", ",", "\n", "batch_time", ".", "val", ",", "batch_time", ".", "avg", ",", "\n", "data_time", ".", "val", ",", "data_time", ".", "avg", ",", "\n", "losses", ".", "val", ",", "losses", ".", "avg", ",", "\n", "loss_dict", "[", "'loss_embed'", "]", ",", "\n", "loss_dict", "[", "'loss_rec'", "]", "\n", ")", ")", "\n", "\n", "#====== TensorBoard logging ======#", "\n", "", "if", "self", ".", "iters", "%", "print_freq", "*", "10", "==", "0", ":", "\n", "        ", "if", "train_tfLogger", "is", "not", "None", ":", "\n", "          ", "step", "=", "epoch", "*", "len", "(", "data_loader", ")", "+", "(", "i", "+", "1", ")", "\n", "info", "=", "{", "\n", "'lr'", ":", "current_lr", ",", "\n", "'loss'", ":", "total_loss", ".", "item", "(", ")", ",", "# this is total loss", "\n", "}", "\n", "## add each loss", "\n", "for", "k", ",", "loss", "in", "loss_dict", ".", "items", "(", ")", ":", "\n", "            ", "info", "[", "k", "]", "=", "loss", "\n", "", "for", "tag", ",", "value", "in", "info", ".", "items", "(", ")", ":", "\n", "            ", "train_tfLogger", ".", "scalar_summary", "(", "tag", ",", "value", ",", "step", ")", "\n", "\n", "# if is_debug and (i + 1) % (print_freq*100) == 0: # this time-consuming and space-consuming", "\n", "#   # (2) Log values and gradients of the parameters (histogram)", "\n", "#   for tag, value in self.model.named_parameters():", "\n", "#     tag = tag.replace('.', '/')", "\n", "#     train_tfLogger.histo_summary(tag, to_numpy(value.data), step)", "\n", "#     train_tfLogger.histo_summary(tag+'/grad', to_numpy(value.grad.data), step)", "\n", "\n", "# # (3) Log the images", "\n", "# images, _, pids, _ = inputs", "\n", "# offsets = to_numpy(offsets)", "\n", "# info = {", "\n", "#   'images': to_numpy(images[:10])", "\n", "# }", "\n", "# for tag, images in info.items():", "\n", "#   train_tfLogger.image_summary(tag, images, step)", "\n", "\n", "#====== evaluation ======#", "\n", "", "", "", "if", "self", ".", "iters", "%", "test_freq", "==", "0", ":", "\n", "# only symmetry branch", "\n", "        ", "if", "'loss_rec'", "not", "in", "output_dict", "[", "'losses'", "]", ":", "\n", "          ", "is_best", "=", "True", "\n", "# self.best_res is alwarys equal to 1.0", "\n", "self", ".", "best_res", "=", "evaluator", ".", "evaluate", "(", "test_loader", ",", "step", "=", "self", ".", "iters", ",", "tfLogger", "=", "eval_tfLogger", ",", "dataset", "=", "test_dataset", ")", "\n", "", "else", ":", "\n", "          ", "res", "=", "evaluator", ".", "evaluate", "(", "test_loader", ",", "step", "=", "self", ".", "iters", ",", "tfLogger", "=", "eval_tfLogger", ",", "dataset", "=", "test_dataset", ")", "\n", "\n", "if", "self", ".", "metric", "==", "'accuracy'", ":", "\n", "            ", "is_best", "=", "res", ">", "self", ".", "best_res", "\n", "self", ".", "best_res", "=", "max", "(", "res", ",", "self", ".", "best_res", ")", "\n", "", "elif", "self", ".", "metric", "==", "'editdistance'", ":", "\n", "            ", "is_best", "=", "res", "<", "self", ".", "best_res", "\n", "self", ".", "best_res", "=", "min", "(", "res", ",", "self", ".", "best_res", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported evaluation metric:\"", ",", "self", ".", "metric", ")", "\n", "\n", "", "print", "(", "'\\n * Finished iters {:3d}  accuracy: {:5.1%}  best: {:5.1%}{}\\n'", ".", "\n", "format", "(", "self", ".", "iters", ",", "res", ",", "self", ".", "best_res", ",", "' *'", "if", "is_best", "else", "''", ")", ")", "\n", "\n", "# if epoch < 1:", "\n", "#   continue", "\n", "", "save_checkpoint", "(", "{", "\n", "'state_dict'", ":", "self", ".", "model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'iters'", ":", "self", ".", "iters", ",", "\n", "'best_res'", ":", "self", ".", "best_res", ",", "\n", "}", ",", "is_best", ",", "fpath", "=", "osp", ".", "join", "(", "self", ".", "logs_dir", ",", "'checkpoint.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.lib.trainers.BaseTrainer._parse_data": [[172, 174], ["None"], "methods", ["None"], ["", "", "", "def", "_parse_data", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.lib.trainers.BaseTrainer._forward": [[175, 177], ["None"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.lib.trainers.Trainer._parse_data": [[180, 195], ["imgs.to", "label_encs.to", "embeds_.to"], "methods", ["None"], ["  ", "def", "_parse_data", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "input_dict", "=", "{", "}", "\n", "# imgs, label_encs, lengths = inputs", "\n", "imgs", ",", "label_encs", ",", "lengths", ",", "embeds_", "=", "inputs", "\n", "images", "=", "imgs", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "label_encs", "is", "not", "None", ":", "\n", "      ", "labels", "=", "label_encs", ".", "to", "(", "self", ".", "device", ")", "\n", "", "if", "embeds_", "is", "not", "None", ":", "\n", "      ", "embeds", "=", "embeds_", ".", "to", "(", "self", ".", "device", ")", "\n", "", "input_dict", "[", "'images'", "]", "=", "images", "\n", "input_dict", "[", "'rec_targets'", "]", "=", "labels", "\n", "input_dict", "[", "'rec_lengths'", "]", "=", "lengths", "\n", "input_dict", "[", "'rec_embeds'", "]", "=", "embeds", "\n", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.lib.trainers.Trainer._forward": [[196, 200], ["trainers.Trainer.model.train", "trainers.Trainer.model"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.lib.trainers.BaseTrainer.train"], ["", "def", "_forward", "(", "self", ",", "input_dict", ")", ":", "\n", "    ", "self", ".", "model", ".", "train", "(", ")", "\n", "output_dict", "=", "self", ".", "model", "(", "input_dict", ")", "\n", "return", "output_dict", "", "", "", ""]], "home.repos.pwc.inspect_result.Pay20Y_SEED.lib.evaluators.BaseEvaluator.__init__": [[25, 32], ["object.__init__", "torch.device", "torch.nn.CosineSimilarity"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.__init__"], ["  ", "def", "__init__", "(", "self", ",", "model", ",", "metric", ",", "use_cuda", "=", "True", ")", ":", "\n", "    ", "super", "(", "BaseEvaluator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "metric", "=", "metric", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "self", ".", "cos_sim", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", "dim", "=", "1", ",", "eps", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.lib.evaluators.BaseEvaluator.evaluate": [[33, 128], ["evaluators.BaseEvaluator.model.eval", "utils.meters.AverageMeter", "utils.meters.AverageMeter", "time.time", "enumerate", "torch.cat", "outputs.items", "utils.meters.AverageMeter.update", "evaluators.BaseEvaluator._parse_data", "evaluators.BaseEvaluator._forward", "input_dict[].size", "output_dict[].items", "torch.cat.append", "torch.cat.append", "embeds.append", "losses.append", "output_dict[].items", "utils.meters.AverageMeter.update", "time.time", "torch.cat", "torch.cat.size", "sum", "numpy.sum", "torch.cat", "evaluation_metrics.RecPostProcess", "evaluators.BaseEvaluator.cos_sim", "torch.mean", "print", "utils.visualization_utils.stn_vis", "loss.mean.mean.mean", "outputs[].append", "print", "print", "print", "print", "print", "print", "open", "zip", "torch.cat().cpu", "torch.abs", "info.items", "time.time", "loss.mean.mean.item", "v.cpu", "time.time", "subimages.size", "f.write", "torch.mean.item", "tfLogger.scalar_summary", "datetime.datetime.datetime.now().strftime", "len", "torch.cat", "datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.utils.meters.AverageMeter.update", "home.repos.pwc.inspect_result.Pay20Y_SEED.lib.evaluators.Evaluator._parse_data", "home.repos.pwc.inspect_result.Pay20Y_SEED.lib.evaluators.Evaluator._forward", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.meters.AverageMeter.update", "home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics.RecPostProcess", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.visualization_utils.stn_vis", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.Logger.write", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.TFLogger.scalar_summary"], ["", "def", "evaluate", "(", "self", ",", "data_loader", ",", "step", "=", "1", ",", "print_freq", "=", "1", ",", "tfLogger", "=", "None", ",", "dataset", "=", "None", ",", "vis_dir", "=", "None", ")", ":", "\n", "    ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "# forward the network", "\n", "images", ",", "outputs", ",", "targets", ",", "embeds", ",", "losses", "=", "[", "]", ",", "{", "}", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "file_names", "=", "[", "]", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "inputs", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "      ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "input_dict", "=", "self", ".", "_parse_data", "(", "inputs", ")", "\n", "output_dict", "=", "self", ".", "_forward", "(", "input_dict", ")", "\n", "\n", "batch_size", "=", "input_dict", "[", "'images'", "]", ".", "size", "(", "0", ")", "\n", "\n", "total_loss_batch", "=", "0.", "\n", "for", "k", ",", "loss", "in", "output_dict", "[", "'losses'", "]", ".", "items", "(", ")", ":", "\n", "        ", "loss", "=", "loss", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "total_loss_batch", "+=", "loss", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "", "images", ".", "append", "(", "input_dict", "[", "'images'", "]", ")", "\n", "targets", ".", "append", "(", "input_dict", "[", "'rec_targets'", "]", ")", "\n", "embeds", ".", "append", "(", "input_dict", "[", "'rec_embeds'", "]", ")", "\n", "losses", ".", "append", "(", "total_loss_batch", ")", "\n", "if", "global_args", ".", "evaluate_with_lexicon", ":", "\n", "        ", "file_names", "+=", "input_dict", "[", "'file_name'", "]", "\n", "", "for", "k", ",", "v", "in", "output_dict", "[", "'output'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "not", "in", "outputs", ":", "\n", "          ", "outputs", "[", "k", "]", "=", "[", "]", "\n", "", "outputs", "[", "k", "]", ".", "append", "(", "v", ".", "cpu", "(", ")", ")", "\n", "\n", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "        ", "print", "(", "'[{}]\\t'", "\n", "'Evaluation: [{}/{}]\\t'", "\n", "'Time {:.3f} ({:.3f})\\t'", "\n", "'Data {:.3f} ({:.3f})\\t'", "\n", "# .format(strftime(\"%Y-%m-%d %H:%M:%S\", gmtime()),", "\n", ".", "format", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ")", ",", "\n", "i", "+", "1", ",", "len", "(", "data_loader", ")", ",", "\n", "batch_time", ".", "val", ",", "batch_time", ".", "avg", ",", "\n", "data_time", ".", "val", ",", "data_time", ".", "avg", ")", ")", "\n", "\n", "", "", "if", "not", "global_args", ".", "keep_ratio", ":", "\n", "      ", "images", "=", "torch", ".", "cat", "(", "images", ")", "\n", "num_samples", "=", "images", ".", "size", "(", "0", ")", "\n", "", "else", ":", "\n", "      ", "num_samples", "=", "sum", "(", "[", "subimages", ".", "size", "(", "0", ")", "for", "subimages", "in", "images", "]", ")", "\n", "", "targets", "=", "torch", ".", "cat", "(", "targets", ")", "\n", "losses", "=", "np", ".", "sum", "(", "losses", ")", "/", "(", "1.0", "*", "num_samples", ")", "\n", "for", "k", ",", "v", "in", "outputs", ".", "items", "(", ")", ":", "\n", "      ", "outputs", "[", "k", "]", "=", "torch", ".", "cat", "(", "outputs", "[", "k", "]", ")", "\n", "\n", "# save info for recognition", "\n", "", "if", "'pred_rec'", "in", "outputs", ":", "\n", "# evaluation with metric", "\n", "      ", "if", "global_args", ".", "evaluate_with_lexicon", ":", "\n", "        ", "eval_res", "=", "metrics_factory", "[", "self", ".", "metric", "+", "'_with_lexicon'", "]", "(", "outputs", "[", "'pred_rec'", "]", ",", "targets", ",", "dataset", ",", "file_names", ")", "\n", "print", "(", "'lexicon0: {0}, {1:.3f}'", ".", "format", "(", "self", ".", "metric", ",", "eval_res", "[", "0", "]", ")", ")", "\n", "print", "(", "'lexicon50: {0}, {1:.3f}'", ".", "format", "(", "self", ".", "metric", ",", "eval_res", "[", "1", "]", ")", ")", "\n", "print", "(", "'lexicon1k: {0}, {1:.3f}'", ".", "format", "(", "self", ".", "metric", ",", "eval_res", "[", "2", "]", ")", ")", "\n", "print", "(", "'lexiconfull: {0}, {1:.3f}'", ".", "format", "(", "self", ".", "metric", ",", "eval_res", "[", "3", "]", ")", ")", "\n", "eval_res", "=", "eval_res", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "eval_res", "=", "metrics_factory", "[", "self", ".", "metric", "]", "(", "outputs", "[", "'pred_rec'", "]", ",", "targets", ",", "dataset", ")", "\n", "print", "(", "'lexicon0: {0}: {1:.3f}'", ".", "format", "(", "self", ".", "metric", ",", "eval_res", ")", ")", "\n", "", "pred_list", ",", "targ_list", ",", "score_list", "=", "RecPostProcess", "(", "outputs", "[", "'pred_rec'", "]", ",", "targets", ",", "outputs", "[", "'pred_rec_score'", "]", ",", "dataset", ")", "\n", "with", "open", "(", "\"embed_v1_results.txt\"", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "for", "pred", ",", "targ", "in", "zip", "(", "pred_list", ",", "targ_list", ")", ":", "\n", "          ", "f", ".", "write", "(", "\"{} {}\\n\"", ".", "format", "(", "pred", ",", "targ", ")", ")", "\n", "", "", "", "if", "'pred_embed'", "in", "outputs", ":", "\n", "      ", "output_cos_sim", "=", "self", ".", "cos_sim", "(", "outputs", "[", "'pred_embed'", "]", ",", "torch", ".", "cat", "(", "embeds", ")", ".", "cpu", "(", ")", ")", "\n", "output_cos_sim", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "output_cos_sim", ")", ")", "\n", "print", "(", "\"Emebedding vector cos similarity: {:3f}\"", ".", "format", "(", "output_cos_sim", ".", "item", "(", ")", ")", ")", "\n", "if", "tfLogger", "is", "not", "None", ":", "\n", "# (1) Log the scalar values", "\n", "        ", "info", "=", "{", "\n", "'loss'", ":", "losses", ",", "\n", "self", ".", "metric", ":", "eval_res", ",", "\n", "}", "\n", "for", "tag", ",", "value", "in", "info", ".", "items", "(", ")", ":", "\n", "          ", "tfLogger", ".", "scalar_summary", "(", "tag", ",", "value", ",", "step", ")", "\n", "\n", "#====== Visualization ======#", "\n", "", "", "", "if", "vis_dir", "is", "not", "None", ":", "\n", "# recognition_vis(images, outputs['pred_rec'], targets, score_list, dataset, vis_dir)", "\n", "      ", "stn_vis", "(", "images", ",", "outputs", "[", "'rectified_images'", "]", ",", "outputs", "[", "'ctrl_points'", "]", ",", "outputs", "[", "'pred_rec'", "]", ",", "\n", "targets", ",", "score_list", ",", "outputs", "[", "'pred_score'", "]", "if", "'pred_score'", "in", "outputs", "else", "None", ",", "dataset", ",", "vis_dir", ")", "\n", "", "return", "eval_res", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.lib.evaluators.BaseEvaluator._parse_data": [[130, 132], ["None"], "methods", ["None"], ["", "def", "_parse_data", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.lib.evaluators.BaseEvaluator._forward": [[133, 135], ["None"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.lib.evaluators.Evaluator._parse_data": [[138, 159], ["torch.no_grad", "imgs.to", "label_encs.to", "embeds_.to"], "methods", ["None"], ["  ", "def", "_parse_data", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "input_dict", "=", "{", "}", "\n", "if", "global_args", ".", "evaluate_with_lexicon", ":", "\n", "      ", "imgs", ",", "label_encs", ",", "lengths", ",", "file_name", "=", "inputs", "\n", "", "else", ":", "\n", "# imgs, label_encs, lengths = inputs", "\n", "      ", "imgs", ",", "label_encs", ",", "lengths", ",", "embeds_", "=", "inputs", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "images", "=", "imgs", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "label_encs", "is", "not", "None", ":", "\n", "        ", "labels", "=", "label_encs", ".", "to", "(", "self", ".", "device", ")", "\n", "", "if", "embeds_", "is", "not", "None", ":", "\n", "        ", "embeds", "=", "embeds_", ".", "to", "(", "self", ".", "device", ")", "\n", "", "", "input_dict", "[", "'images'", "]", "=", "images", "\n", "input_dict", "[", "'rec_targets'", "]", "=", "labels", "\n", "input_dict", "[", "'rec_lengths'", "]", "=", "lengths", "\n", "input_dict", "[", "'rec_embeds'", "]", "=", "embeds", "\n", "if", "global_args", ".", "evaluate_with_lexicon", ":", "\n", "      ", "input_dict", "[", "'file_name'", "]", "=", "file_name", "\n", "", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.lib.evaluators.Evaluator._forward": [[160, 165], ["evaluators.Evaluator.model.eval", "torch.no_grad", "evaluators.Evaluator.model"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "input_dict", ")", ":", "\n", "    ", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "output_dict", "=", "self", ".", "model", "(", "input_dict", ")", "\n", "", "return", "output_dict", "", "", "", ""]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.visualization_utils.recognition_vis": [[24, 38], ["to_numpy.permute", "to_numpy", "evaluation_metrics.metrics.get_str_list", "enumerate", "zip", "os.path.join", "PIL.Image.fromarray", "Image.fromarray.save", "pred.lower", "target.lower", "numpy.uint8"], "function", ["home.repos.pwc.inspect_result.Pay20Y_SEED.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics.get_str_list"], ["def", "recognition_vis", "(", "images", ",", "preds", ",", "targets", ",", "scores", ",", "dataset", ",", "vis_dir", ")", ":", "\n", "  ", "images", "=", "images", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "images", "=", "to_numpy", "(", "images", ")", "\n", "images", "=", "(", "images", "*", "0.5", "+", "0.5", ")", "*", "255", "\n", "pred_list", ",", "targ_list", "=", "get_str_list", "(", "preds", ",", "targets", ",", "dataset", ")", "\n", "for", "id", ",", "(", "image", ",", "pred", ",", "target", ",", "score", ")", "in", "enumerate", "(", "zip", "(", "images", ",", "pred_list", ",", "targ_list", ",", "scores", ")", ")", ":", "\n", "    ", "if", "pred", ".", "lower", "(", ")", "==", "target", ".", "lower", "(", ")", ":", "\n", "      ", "flag", "=", "'right'", "\n", "", "else", ":", "\n", "      ", "flag", "=", "'error'", "\n", "", "file_name", "=", "'{:}_{:}_{:}_{:}_{:.3f}.jpg'", ".", "format", "(", "flag", ",", "id", ",", "pred", ",", "target", ",", "score", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "vis_dir", ",", "file_name", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "image", ")", ")", "\n", "image", ".", "save", "(", "file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.visualization_utils._save_plot_pool": [[41, 44], ["PIL.Image.fromarray", "Image.fromarray.save", "numpy.uint8"], "function", ["None"], ["", "", "def", "_save_plot_pool", "(", "vis_image", ",", "save_file_path", ")", ":", "\n", "  ", "vis_image", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "vis_image", ")", ")", "\n", "vis_image", ".", "save", "(", "save_file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.visualization_utils.stn_vis": [[46, 124], ["raw_images.unsqueeze.size", "to_numpy", "ctrl_points.astype.astype", "raw_images.unsqueeze.permute", "to_numpy", "rectified_images.unsqueeze.permute", "to_numpy", "raw_images.unsqueeze.astype", "rectified_images.unsqueeze.astype", "range", "raw_images.unsqueeze.ndimension", "raw_images.unsqueeze.unsqueeze", "rectified_images.unsqueeze.unsqueeze", "matplotlib.figure", "ax[].imshow", "ax[].scatter", "ax[].imshow", "matplotlib.show", "io.BytesIO", "matplotlib.savefig", "matplotlib.close", "io.BytesIO.seek", "PIL.Image.open", "numpy.asarray().astype", "io.BytesIO.close", "vis_images.append", "evaluation_metrics.metrics.get_str_list", "enumerate", "plt.figure.add_subplot", "a.set_xticklabels", "a.set_yticklabels", "a.axis", "zip", "os.path.join", "file_path_list.append", "multiprocessing.Pool", "pool.starmap", "range", "numpy.asarray", "pred.lower", "target.lower", "os.cpu_count", "zip"], "function", ["home.repos.pwc.inspect_result.Pay20Y_SEED.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.TFLogger.close", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.TFLogger.close", "home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics.get_str_list"], ["", "def", "stn_vis", "(", "raw_images", ",", "rectified_images", ",", "ctrl_points", ",", "preds", ",", "targets", ",", "real_scores", ",", "pred_scores", ",", "dataset", ",", "vis_dir", ")", ":", "\n", "  ", "\"\"\"\n    raw_images: images without rectification\n    rectified_images: rectified images with stn\n    ctrl_points: predicted ctrl points\n    preds: predicted label sequences\n    targets: target label sequences\n    real_scores: scores of recognition model\n    pred_scores: predicted scores by the score branch\n    dataset: xxx\n    vis_dir: xxx\n  \"\"\"", "\n", "if", "raw_images", ".", "ndimension", "(", ")", "==", "3", ":", "\n", "    ", "raw_images", "=", "raw_images", ".", "unsqueeze", "(", "0", ")", "\n", "rectified_images", "=", "rectified_images", ".", "unsqueeze", "(", "0", ")", "\n", "", "batch_size", ",", "_", ",", "raw_height", ",", "raw_width", "=", "raw_images", ".", "size", "(", ")", "\n", "\n", "# translate the coordinates of ctrlpoints to image size", "\n", "ctrl_points", "=", "to_numpy", "(", "ctrl_points", ")", "\n", "ctrl_points", "[", ":", ",", ":", ",", "0", "]", "=", "ctrl_points", "[", ":", ",", ":", ",", "0", "]", "*", "(", "raw_width", "-", "1", ")", "\n", "ctrl_points", "[", ":", ",", ":", ",", "1", "]", "=", "ctrl_points", "[", ":", ",", ":", ",", "1", "]", "*", "(", "raw_height", "-", "1", ")", "\n", "ctrl_points", "=", "ctrl_points", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "# tensors to pil images", "\n", "raw_images", "=", "raw_images", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "raw_images", "=", "to_numpy", "(", "raw_images", ")", "\n", "raw_images", "=", "(", "raw_images", "*", "0.5", "+", "0.5", ")", "*", "255", "\n", "rectified_images", "=", "rectified_images", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "rectified_images", "=", "to_numpy", "(", "rectified_images", ")", "\n", "rectified_images", "=", "(", "rectified_images", "*", "0.5", "+", "0.5", ")", "*", "255", "\n", "\n", "# draw images on canvas", "\n", "vis_images", "=", "[", "]", "\n", "num_sub_plot", "=", "2", "\n", "raw_images", "=", "raw_images", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "rectified_images", "=", "rectified_images", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "[", "fig", ".", "add_subplot", "(", "num_sub_plot", ",", "1", ",", "i", "+", "1", ")", "for", "i", "in", "range", "(", "num_sub_plot", ")", "]", "\n", "for", "a", "in", "ax", ":", "\n", "      ", "a", ".", "set_xticklabels", "(", "[", "]", ")", "\n", "a", ".", "set_yticklabels", "(", "[", "]", ")", "\n", "a", ".", "axis", "(", "'off'", ")", "\n", "", "ax", "[", "0", "]", ".", "imshow", "(", "raw_images", "[", "i", "]", ")", "\n", "ax", "[", "0", "]", ".", "scatter", "(", "ctrl_points", "[", "i", ",", ":", ",", "0", "]", ",", "ctrl_points", "[", "i", ",", ":", ",", "1", "]", ",", "marker", "=", "'+'", ",", "s", "=", "5", ")", "\n", "ax", "[", "1", "]", ".", "imshow", "(", "rectified_images", "[", "i", "]", ")", "\n", "# plt.subplots_adjust(wspace=0, hspace=0)", "\n", "plt", ".", "show", "(", ")", "\n", "buffer_", "=", "BytesIO", "(", ")", "\n", "plt", ".", "savefig", "(", "buffer_", ",", "format", "=", "'png'", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "plt", ".", "close", "(", ")", "\n", "buffer_", ".", "seek", "(", "0", ")", "\n", "dataPIL", "=", "Image", ".", "open", "(", "buffer_", ")", "\n", "data", "=", "np", ".", "asarray", "(", "dataPIL", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "buffer_", ".", "close", "(", ")", "\n", "\n", "vis_images", ".", "append", "(", "data", ")", "\n", "\n", "# save to disk", "\n", "", "if", "vis_dir", "is", "None", ":", "\n", "    ", "return", "vis_images", "\n", "", "else", ":", "\n", "    ", "pred_list", ",", "targ_list", "=", "get_str_list", "(", "preds", ",", "targets", ",", "dataset", ")", "\n", "file_path_list", "=", "[", "]", "\n", "for", "id", ",", "(", "image", ",", "pred", ",", "target", ",", "real_score", ")", "in", "enumerate", "(", "zip", "(", "vis_images", ",", "pred_list", ",", "targ_list", ",", "real_scores", ")", ")", ":", "\n", "      ", "if", "pred", ".", "lower", "(", ")", "==", "target", ".", "lower", "(", ")", ":", "\n", "        ", "flag", "=", "'right'", "\n", "", "else", ":", "\n", "        ", "flag", "=", "'error'", "\n", "", "if", "pred_scores", "is", "None", ":", "\n", "        ", "file_name", "=", "'{:}_{:}_{:}_{:}_{:.3f}.png'", ".", "format", "(", "flag", ",", "id", ",", "pred", ",", "target", ",", "real_score", ")", "\n", "", "else", ":", "\n", "        ", "file_name", "=", "'{:}_{:}_{:}_{:}_{:.3f}_{:.3f}.png'", ".", "format", "(", "flag", ",", "id", ",", "pred", ",", "target", ",", "real_score", ",", "pred_scores", "[", "id", "]", ")", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "vis_dir", ",", "file_name", ")", "\n", "file_path_list", ".", "append", "(", "file_path", ")", "\n", "\n", "", "with", "Pool", "(", "os", ".", "cpu_count", "(", ")", ")", "as", "pool", ":", "\n", "      ", "pool", ".", "starmap", "(", "_save_plot_pool", ",", "zip", "(", "vis_images", ",", "file_path_list", ")", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.Logger.__init__": [[22, 36], ["os.path.dirname", "mox.file.File", "osutils.mkdir_if_missing", "open", "mox.file.exists", "mox.file.make_dirs", "print", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.utils.osutils.mkdir_if_missing"], ["  ", "def", "__init__", "(", "self", ",", "fpath", "=", "None", ")", ":", "\n", "    ", "self", ".", "console", "=", "sys", ".", "stdout", "\n", "self", ".", "file", "=", "None", "\n", "if", "fpath", "is", "not", "None", ":", "\n", "      ", "if", "global_args", ".", "run_on_remote", ":", "\n", "        ", "dir_name", "=", "os", ".", "path", ".", "dirname", "(", "fpath", ")", "\n", "if", "not", "mox", ".", "file", ".", "exists", "(", "dir_name", ")", ":", "\n", "          ", "mox", ".", "file", ".", "make_dirs", "(", "dir_name", ")", "\n", "print", "(", "'=> making dir '", ",", "dir_name", ")", "\n", "", "self", ".", "file", "=", "mox", ".", "file", ".", "File", "(", "fpath", ",", "'w'", ")", "\n", "# self.file = open(fpath, 'w')", "\n", "", "else", ":", "\n", "        ", "mkdir_if_missing", "(", "os", ".", "path", ".", "dirname", "(", "fpath", ")", ")", "\n", "self", ".", "file", "=", "open", "(", "fpath", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.Logger.__del__": [[37, 39], ["logging.Logger.close"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.TFLogger.close"], ["", "", "", "def", "__del__", "(", "self", ")", ":", "\n", "    ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.Logger.__enter__": [[40, 42], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.Logger.__exit__": [[43, 45], ["logging.Logger.close"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.TFLogger.close"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "    ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.Logger.write": [[46, 50], ["logging.Logger.console.write", "logging.Logger.file.write"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.Logger.write", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.Logger.write"], ["", "def", "write", "(", "self", ",", "msg", ")", ":", "\n", "    ", "self", ".", "console", ".", "write", "(", "msg", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "      ", "self", ".", "file", ".", "write", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.Logger.flush": [[51, 56], ["logging.Logger.console.flush", "logging.Logger.file.flush", "os.fsync", "logging.Logger.file.fileno"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.Logger.flush", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.Logger.flush"], ["", "", "def", "flush", "(", "self", ")", ":", "\n", "    ", "self", ".", "console", ".", "flush", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "      ", "self", ".", "file", ".", "flush", "(", ")", "\n", "os", ".", "fsync", "(", "self", ".", "file", ".", "fileno", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.Logger.close": [[57, 61], ["logging.Logger.console.close", "logging.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.TFLogger.close", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.TFLogger.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "    ", "self", ".", "console", ".", "close", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "      ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.TFLogger.__init__": [[64, 69], ["tensorflow.summary.FileWriter", "osutils.mkdir_if_missing"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.utils.osutils.mkdir_if_missing"], ["  ", "def", "__init__", "(", "self", ",", "log_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create a summary writer logging to log_dir.\"\"\"", "\n", "if", "log_dir", "is", "not", "None", ":", "\n", "      ", "mkdir_if_missing", "(", "log_dir", ")", "\n", "", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.TFLogger.scalar_summary": [[70, 75], ["tensorflow.Summary", "logging.TFLogger.writer.add_summary", "logging.TFLogger.writer.flush", "tensorflow.Summary.Value"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.Logger.flush"], ["", "def", "scalar_summary", "(", "self", ",", "tag", ",", "value", ",", "step", ")", ":", "\n", "    ", "\"\"\"Log a scalar variable.\"\"\"", "\n", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.TFLogger.image_summary": [[76, 99], ["enumerate", "tensorflow.Summary", "logging.TFLogger.writer.add_summary", "logging.TFLogger.writer.flush", "scipy.misc.toimage().save", "tensorflow.Summary.Image", "img_summaries.append", "StringIO", "tensorflow.Summary.Value", "BytesIO", "scipy.misc.toimage", "BytesIO.getvalue"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.Logger.flush"], ["", "def", "image_summary", "(", "self", ",", "tag", ",", "images", ",", "step", ")", ":", "\n", "    ", "\"\"\"Log a list of images.\"\"\"", "\n", "\n", "img_summaries", "=", "[", "]", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "images", ")", ":", "\n", "# Write the image to a string", "\n", "      ", "try", ":", "\n", "        ", "s", "=", "StringIO", "(", ")", "\n", "", "except", ":", "\n", "        ", "s", "=", "BytesIO", "(", ")", "\n", "", "scipy", ".", "misc", ".", "toimage", "(", "img", ")", ".", "save", "(", "s", ",", "format", "=", "\"png\"", ")", "\n", "\n", "# Create an Image object", "\n", "img_sum", "=", "tf", ".", "Summary", ".", "Image", "(", "encoded_image_string", "=", "s", ".", "getvalue", "(", ")", ",", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", ",", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", ")", "\n", "# Create a Summary value", "\n", "img_summaries", ".", "append", "(", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "'%s/%d'", "%", "(", "tag", ",", "i", ")", ",", "image", "=", "img_sum", ")", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "img_summaries", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.TFLogger.histo_summary": [[100, 127], ["numpy.histogram", "tensorflow.HistogramProto", "float", "float", "int", "float", "float", "tensorflow.Summary", "logging.TFLogger.writer.add_summary", "logging.TFLogger.writer.flush", "numpy.min", "numpy.max", "numpy.prod", "numpy.sum", "numpy.sum", "tensorflow.HistogramProto.bucket_limit.append", "tensorflow.HistogramProto.bucket.append", "tensorflow.Summary.Value"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.Logger.flush"], ["", "def", "histo_summary", "(", "self", ",", "tag", ",", "values", ",", "step", ",", "bins", "=", "1000", ")", ":", "\n", "    ", "\"\"\"Log a histogram of the tensor of values.\"\"\"", "\n", "\n", "# Create a histogram using numpy", "\n", "counts", ",", "bin_edges", "=", "np", ".", "histogram", "(", "values", ",", "bins", "=", "bins", ")", "\n", "\n", "# Fill the fields of the histogram proto", "\n", "hist", "=", "tf", ".", "HistogramProto", "(", ")", "\n", "hist", ".", "min", "=", "float", "(", "np", ".", "min", "(", "values", ")", ")", "\n", "hist", ".", "max", "=", "float", "(", "np", ".", "max", "(", "values", ")", ")", "\n", "hist", ".", "num", "=", "int", "(", "np", ".", "prod", "(", "values", ".", "shape", ")", ")", "\n", "hist", ".", "sum", "=", "float", "(", "np", ".", "sum", "(", "values", ")", ")", "\n", "hist", ".", "sum_squares", "=", "float", "(", "np", ".", "sum", "(", "values", "**", "2", ")", ")", "\n", "\n", "# Drop the start of the first bin", "\n", "bin_edges", "=", "bin_edges", "[", "1", ":", "]", "\n", "\n", "# Add bin edges and counts", "\n", "for", "edge", "in", "bin_edges", ":", "\n", "      ", "hist", ".", "bucket_limit", ".", "append", "(", "edge", ")", "\n", "", "for", "c", "in", "counts", ":", "\n", "      ", "hist", ".", "bucket", ".", "append", "(", "c", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "histo", "=", "hist", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.TFLogger.close": [[128, 130], ["logging.TFLogger.writer.close"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.TFLogger.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "    ", "self", ".", "writer", ".", "close", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.labelmaps.get_vocabulary": [[7, 28], ["list.append", "list.append", "list.append", "list", "list", "list", "KeyError"], "function", ["None"], ["def", "get_vocabulary", "(", "voc_type", ",", "EOS", "=", "'EOS'", ",", "PADDING", "=", "'PADDING'", ",", "UNKNOWN", "=", "'UNKNOWN'", ")", ":", "\n", "  ", "'''\n  voc_type: str: one of 'LOWERCASE', 'ALLCASES', 'ALLCASES_SYMBOLS'\n  '''", "\n", "voc", "=", "None", "\n", "types", "=", "[", "'LOWERCASE'", ",", "'ALLCASES'", ",", "'ALLCASES_SYMBOLS'", "]", "\n", "if", "voc_type", "==", "'LOWERCASE'", ":", "\n", "    ", "voc", "=", "list", "(", "string", ".", "digits", "+", "string", ".", "ascii_lowercase", ")", "\n", "", "elif", "voc_type", "==", "'ALLCASES'", ":", "\n", "    ", "voc", "=", "list", "(", "string", ".", "digits", "+", "string", ".", "ascii_letters", ")", "\n", "", "elif", "voc_type", "==", "'ALLCASES_SYMBOLS'", ":", "\n", "    ", "voc", "=", "list", "(", "string", ".", "printable", "[", ":", "-", "6", "]", ")", "\n", "", "else", ":", "\n", "    ", "raise", "KeyError", "(", "'voc_type must be one of \"LOWERCASE\", \"ALLCASES\", \"ALLCASES_SYMBOLS\"'", ")", "\n", "\n", "# update the voc with specifical chars", "\n", "", "voc", ".", "append", "(", "EOS", ")", "\n", "voc", ".", "append", "(", "PADDING", ")", "\n", "voc", ".", "append", "(", "UNKNOWN", ")", "\n", "\n", "return", "voc", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.labelmaps.char2id": [[30, 32], ["dict", "zip", "range", "len"], "function", ["None"], ["", "def", "char2id", "(", "voc", ")", ":", "\n", "  ", "return", "dict", "(", "zip", "(", "voc", ",", "range", "(", "len", "(", "voc", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.labelmaps.id2char": [[33, 35], ["dict", "zip", "range", "len"], "function", ["None"], ["", "def", "id2char", "(", "voc", ")", ":", "\n", "  ", "return", "dict", "(", "zip", "(", "range", "(", "len", "(", "voc", ")", ")", ",", "voc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.labelmaps.labels2strs": [[36, 57], ["to_numpy", "range", "labels.unsqueeze.ndimension", "labels.unsqueeze.unsqueeze", "labels.unsqueeze.dim", "strings.append", "string.append"], "function", ["home.repos.pwc.inspect_result.Pay20Y_SEED.utils.__init__.to_numpy"], ["", "def", "labels2strs", "(", "labels", ",", "id2char", ",", "char2id", ")", ":", "\n", "# labels: batch_size x len_seq", "\n", "  ", "if", "labels", ".", "ndimension", "(", ")", "==", "1", ":", "\n", "    ", "labels", "=", "labels", ".", "unsqueeze", "(", "0", ")", "\n", "", "assert", "labels", ".", "dim", "(", ")", "==", "2", "\n", "labels", "=", "to_numpy", "(", "labels", ")", "\n", "strings", "=", "[", "]", "\n", "batch_size", "=", "labels", ".", "shape", "[", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "    ", "label", "=", "labels", "[", "i", "]", "\n", "string", "=", "[", "]", "\n", "for", "l", "in", "label", ":", "\n", "      ", "if", "l", "==", "char2id", "[", "'EOS'", "]", ":", "\n", "        ", "break", "\n", "", "else", ":", "\n", "        ", "string", ".", "append", "(", "id2char", "[", "l", "]", ")", "\n", "", "", "string", "=", "''", ".", "join", "(", "string", ")", "\n", "strings", ".", "append", "(", "string", ")", "\n", "\n", "", "return", "strings", "", "", ""]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.osutils.mkdir_if_missing": [[6, 12], ["os.makedirs"], "function", ["None"], ["def", "mkdir_if_missing", "(", "dir_path", ")", ":", "\n", "  ", "try", ":", "\n", "    ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "    ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "      ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.osutils.make_symlink_if_not_exists": [[14, 27], ["os.system", "os.makedirs"], "function", ["None"], ["", "", "", "def", "make_symlink_if_not_exists", "(", "real_path", ",", "link_path", ")", ":", "\n", "  ", "'''\n  param real_path: str the path linked\n  param link_path: str the path with only the symbol\n  '''", "\n", "try", ":", "\n", "    ", "os", ".", "makedirs", "(", "real_path", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "    ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "      ", "raise", "\n", "\n", "", "", "cmd", "=", "'ln -s {0} {1}'", ".", "format", "(", "real_path", ",", "link_path", ")", "\n", "os", ".", "system", "(", "cmd", ")", "", "", ""]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.meters.AverageMeter.__init__": [[7, 12], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.meters.AverageMeter.reset": [[13, 18], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.meters.AverageMeter.update": [[19, 24], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "", "", "", ""]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.serialization.read_json": [[21, 25], ["open", "json.load"], "function", ["None"], ["", "def", "read_json", "(", "fpath", ")", ":", "\n", "  ", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "obj", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.serialization.write_json": [[27, 31], ["osutils.mkdir_if_missing", "os.dirname", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.Pay20Y_SEED.utils.osutils.mkdir_if_missing"], ["", "def", "write_json", "(", "obj", ",", "fpath", ")", ":", "\n", "  ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "with", "open", "(", "fpath", ",", "'w'", ")", "as", "f", ":", "\n", "    ", "json", ".", "dump", "(", "obj", ",", "f", ",", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "': '", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.serialization.save_checkpoint": [[33, 50], ["print", "os.dirname", "torch.save", "mox.file.copy", "osutils.mkdir_if_missing", "torch.save", "mox.file.exists", "mox.file.make_dirs", "print", "mox.file.copy", "os.dirname", "shutil.copy", "os.join", "os.join", "os.dirname"], "function", ["home.repos.pwc.inspect_result.Pay20Y_SEED.utils.osutils.mkdir_if_missing"], ["", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "fpath", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "  ", "print", "(", "'=> saving checkpoint '", ",", "fpath", ")", "\n", "if", "global_args", ".", "run_on_remote", ":", "\n", "    ", "dir_name", "=", "osp", ".", "dirname", "(", "fpath", ")", "\n", "if", "not", "mox", ".", "file", ".", "exists", "(", "dir_name", ")", ":", "\n", "      ", "mox", ".", "file", ".", "make_dirs", "(", "dir_name", ")", "\n", "print", "(", "'=> makding dir '", ",", "dir_name", ")", "\n", "", "local_path", "=", "\"local_checkpoint.pth.tar\"", "\n", "torch", ".", "save", "(", "state", ",", "local_path", ")", "\n", "mox", ".", "file", ".", "copy", "(", "local_path", ",", "fpath", ")", "\n", "if", "is_best", ":", "\n", "      ", "mox", ".", "file", ".", "copy", "(", "local_path", ",", "osp", ".", "join", "(", "dir_name", ",", "'model_best.pth.tar'", ")", ")", "\n", "", "", "else", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "fpath", ")", "\n", "if", "is_best", ":", "\n", "      ", "shutil", ".", "copy", "(", "fpath", ",", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "fpath", ")", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.serialization.load_checkpoint": [[52, 67], ["mox.file.shift", "torch.load", "print", "os.isfile", "torch.load", "print", "ValueError"], "function", ["None"], ["", "", "", "def", "load_checkpoint", "(", "fpath", ")", ":", "\n", "  ", "if", "global_args", ".", "run_on_remote", ":", "\n", "    ", "mox", ".", "file", ".", "shift", "(", "'os'", ",", "'mox'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "fpath", ")", "\n", "print", "(", "\"=> Loaded checkpoint '{}'\"", ".", "format", "(", "fpath", ")", ")", "\n", "return", "checkpoint", "\n", "", "else", ":", "\n", "    ", "load_path", "=", "fpath", "\n", "\n", "if", "osp", ".", "isfile", "(", "load_path", ")", ":", "\n", "      ", "checkpoint", "=", "torch", ".", "load", "(", "load_path", ")", "\n", "print", "(", "\"=> Loaded checkpoint '{}'\"", ".", "format", "(", "load_path", ")", ")", "\n", "return", "checkpoint", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"=> No checkpoint found at '{}'\"", ".", "format", "(", "load_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.serialization.copy_state_dict": [[69, 90], ["model.state_dict", "set", "state_dict.items", "isinstance", "tgt_state[].copy_", "set.add", "set", "len", "print", "name.startswith", "param.size", "tgt_state[].size", "print", "model.state_dict.keys", "param.size", "tgt_state[].size", "len"], "function", ["None"], ["", "", "", "def", "copy_state_dict", "(", "state_dict", ",", "model", ",", "strip", "=", "None", ")", ":", "\n", "  ", "tgt_state", "=", "model", ".", "state_dict", "(", ")", "\n", "copied_names", "=", "set", "(", ")", "\n", "for", "name", ",", "param", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "    ", "if", "strip", "is", "not", "None", "and", "name", ".", "startswith", "(", "strip", ")", ":", "\n", "      ", "name", "=", "name", "[", "len", "(", "strip", ")", ":", "]", "\n", "", "if", "name", "not", "in", "tgt_state", ":", "\n", "      ", "continue", "\n", "", "if", "isinstance", "(", "param", ",", "Parameter", ")", ":", "\n", "      ", "param", "=", "param", ".", "data", "\n", "", "if", "param", ".", "size", "(", ")", "!=", "tgt_state", "[", "name", "]", ".", "size", "(", ")", ":", "\n", "      ", "print", "(", "'mismatch:'", ",", "name", ",", "param", ".", "size", "(", ")", ",", "tgt_state", "[", "name", "]", ".", "size", "(", ")", ")", "\n", "continue", "\n", "", "tgt_state", "[", "name", "]", ".", "copy_", "(", "param", ")", "\n", "copied_names", ".", "add", "(", "name", ")", "\n", "\n", "", "missing", "=", "set", "(", "tgt_state", ".", "keys", "(", ")", ")", "-", "copied_names", "\n", "if", "len", "(", "missing", ")", ">", "0", ":", "\n", "      ", "print", "(", "\"missing keys in state_dict:\"", ",", "missing", ")", "\n", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.__init__.to_numpy": [[6, 13], ["torch.is_tensor", "tensor.cpu().numpy", "ValueError", "tensor.cpu", "type", "type"], "function", ["None"], ["from", ".", "import", "models", "\n", "from", ".", "import", "utils", "\n", "from", ".", "import", "evaluators", "\n", "from", ".", "import", "trainers", "\n", "\n", "__version__", "=", "'1.0.1.post2'", "", ""]], "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.__init__.to_torch": [[15, 22], ["torch.from_numpy", "type", "torch.is_tensor", "ValueError", "type"], "function", ["None"], []], "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.dataset.CustomDataset.__init__": [[34, 61], ["torch.utils.data.Dataset.__init__", "lib.utils.labelmaps.get_vocabulary", "dict", "dict", "len", "min", "zip", "zip", "dataset.CustomDataset.load_gt_json", "len", "range", "range", "os.path.basename().split", "dataset.CustomDataset.load_gt_txt", "len", "len", "os.path.basename().split", "os.path.basename", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.__init__", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.labelmaps.get_vocabulary", "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.dataset.CustomDataset.load_gt_json", "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.dataset.CustomDataset.load_gt_txt"], ["  ", "def", "__init__", "(", "self", ",", "root", ",", "gt_file_path", ",", "embed_path", ",", "voc_type", ",", "max_len", ",", "num_samples", ",", "transform", "=", "None", ")", ":", "\n", "    ", "super", "(", "CustomDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "embed_path", "=", "embed_path", "\n", "self", ".", "voc_type", "=", "voc_type", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "max_len", "=", "max_len", "\n", "# self.gt_file = json.load(open(gt_file_path, \"r\"))", "\n", "# self.nSamples = len(self.gt_file)", "\n", "# self.nSamples = min(self.nSamples, num_samples)", "\n", "\n", "assert", "voc_type", "in", "[", "'LOWERCASE'", ",", "'ALLCASES'", ",", "'ALLCASES_SYMBOLS'", "]", "\n", "self", ".", "EOS", "=", "'EOS'", "\n", "self", ".", "PADDING", "=", "'PADDING'", "\n", "self", ".", "UNKNOWN", "=", "'UNKNOWN'", "\n", "self", ".", "voc", "=", "get_vocabulary", "(", "voc_type", ",", "EOS", "=", "self", ".", "EOS", ",", "PADDING", "=", "self", ".", "PADDING", ",", "UNKNOWN", "=", "self", ".", "UNKNOWN", ")", "\n", "self", ".", "char2id", "=", "dict", "(", "zip", "(", "self", ".", "voc", ",", "range", "(", "len", "(", "self", ".", "voc", ")", ")", ")", ")", "\n", "self", ".", "id2char", "=", "dict", "(", "zip", "(", "range", "(", "len", "(", "self", ".", "voc", ")", ")", ",", "self", ".", "voc", ")", ")", "\n", "\n", "self", ".", "rec_num_classes", "=", "len", "(", "self", ".", "voc", ")", "\n", "self", ".", "lowercase", "=", "(", "voc_type", "==", "'LOWERCASE'", ")", "\n", "\n", "if", "os", ".", "path", ".", "basename", "(", "gt_file_path", ")", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", "==", "\"json\"", ":", "\n", "      ", "self", ".", "images_path", ",", "self", ".", "transcriptions", ",", "self", ".", "embeds_path", "=", "self", ".", "load_gt_json", "(", "gt_file_path", ")", "\n", "", "elif", "os", ".", "path", ".", "basename", "(", "gt_file_path", ")", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", "==", "\"txt\"", ":", "\n", "      ", "self", ".", "images_path", ",", "self", ".", "transcriptions", ",", "self", ".", "embeds_path", "=", "self", ".", "load_gt_txt", "(", "gt_file_path", ")", "\n", "", "self", ".", "nSamples_real", "=", "min", "(", "len", "(", "self", ".", "images_path", ")", ",", "num_samples", ")", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.dataset.CustomDataset.__len__": [[61, 63], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "nSamples_real", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.dataset.CustomDataset.__getitem__": [[65, 108], ["numpy.full", "numpy.array", "len", "len", "PIL.Image.open().convert", "word.lowercase.lowercase.lowercase", "len", "len", "dataset.CustomDataset.transform", "numpy.load", "numpy.zeros", "print", "label_list.append", "label_list.append", "len", "PIL.Image.open", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "assert", "index", "<=", "len", "(", "self", ")", ",", "'index range error'", "\n", "# index += 1", "\n", "img_path", "=", "self", ".", "images_path", "[", "index", "]", "\n", "embed_path", "=", "self", ".", "embeds_path", "[", "index", "]", "\n", "word", "=", "self", ".", "transcriptions", "[", "index", "]", "\n", "try", ":", "\n", "      ", "img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "img_path", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "embed_path", "is", "not", "None", ":", "\n", "        ", "embed_vector", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "embed_path", ",", "embed_path", ")", ")", "\n", "", "else", ":", "\n", "        ", "embed_vector", "=", "np", ".", "zeros", "(", "300", ")", "\n", "", "", "except", "IOError", ":", "\n", "      ", "print", "(", "'Corrupted image for %d'", "%", "index", ")", "\n", "return", "self", "[", "index", "+", "1", "]", "\n", "\n", "", "if", "self", ".", "lowercase", ":", "\n", "      ", "word", "=", "word", ".", "lowercase", "(", ")", "\n", "\n", "## fill with the padding token", "\n", "", "label", "=", "np", ".", "full", "(", "(", "self", ".", "max_len", ",", ")", ",", "self", ".", "char2id", "[", "self", ".", "PADDING", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "label_list", "=", "[", "]", "\n", "for", "char", "in", "word", ":", "\n", "      ", "if", "char", "in", "self", ".", "char2id", ":", "\n", "        ", "label_list", ".", "append", "(", "self", ".", "char2id", "[", "char", "]", ")", "\n", "", "else", ":", "\n", "## add the unknown token", "\n", "# print('{0} is out of vocabulary.'.format(char))", "\n", "        ", "label_list", ".", "append", "(", "self", ".", "char2id", "[", "self", ".", "UNKNOWN", "]", ")", "\n", "## add a stop token", "\n", "", "", "label_list", "=", "label_list", "+", "[", "self", ".", "char2id", "[", "self", ".", "EOS", "]", "]", "\n", "assert", "len", "(", "label_list", ")", "<=", "self", ".", "max_len", "\n", "label", "[", ":", "len", "(", "label_list", ")", "]", "=", "np", ".", "array", "(", "label_list", ")", "\n", "\n", "if", "len", "(", "label", ")", "<=", "0", ":", "\n", "      ", "return", "self", "[", "index", "+", "1", "]", "\n", "\n", "# label length", "\n", "", "label_len", "=", "len", "(", "label_list", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "      ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "label", ",", "label_len", ",", "embed_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.dataset.CustomDataset.load_gt_json": [[109, 135], ["isinstance", "json.load.keys", "open", "json.load", "images_path.append", "transcriptions.append", "embeds.append", "k.replace", "embeds.append", "os.path.exists", "os.path.join", "[].replace", "k.replace", "k.split", "k.split"], "methods", ["None"], ["", "def", "load_gt_json", "(", "self", ",", "gt_path", ")", ":", "\n", "    ", "assert", "isinstance", "(", "gt_path", ",", "str", ")", ",", "\"load_gt_txt need ground truth path\"", "\n", "with", "open", "(", "gt_path", ")", "as", "f", ":", "\n", "      ", "gt_file", "=", "json", ".", "load", "(", "f", ")", "\n", "", "images_path", "=", "[", "]", "\n", "transcriptions", "=", "[", "]", "\n", "embeds", "=", "[", "]", "\n", "for", "k", "in", "gt_file", ".", "keys", "(", ")", ":", "\n", "      ", "annotation", "=", "gt_file", "[", "k", "]", "\n", "\"\"\"\n      if annotation['illegibility'] == True or annotation['laguage'] != 'Latin':\n        continue\n      \"\"\"", "\n", "# images_path.append(os.path.join(self.root, k))", "\n", "images_path", ".", "append", "(", "k", ")", "\n", "transcriptions", ".", "append", "(", "annotation", "[", "'transcription'", "]", ")", "\n", "if", "self", ".", "embed_path", "is", "None", ":", "\n", "        ", "embeds", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "# embed_file_path = os.path.join(self.embed_path, k.replace(\"jpg\", \"npy\"))", "\n", "        ", "embed_file_path", "=", "k", ".", "replace", "(", "\"jpg\"", ",", "\"npy\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "embed_path", ",", "k", ".", "replace", "(", "\"jpg\"", ",", "\"npy\"", ")", ")", ")", ":", "\n", "          ", "embed_file_path", "=", "k", ".", "split", "(", "\"/\"", ")", "[", "5", "]", "+", "\"/\"", "+", "k", ".", "split", "(", "\"/\"", ")", "[", "6", "]", ".", "replace", "(", "\"jpg\"", ",", "\"npy\"", ")", "\n", "# embeds.append(os.path.join(self.embed_path, k.replace(\"jpg\", \"npy\")))", "\n", "", "embeds", ".", "append", "(", "embed_file_path", ")", "\n", "", "", "return", "images_path", ",", "transcriptions", ",", "embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.dataset.CustomDataset.load_gt_txt": [[136, 160], ["isinstance", "open", "f.readlines", "line.split.split.strip", "line.split.split.split", "images_path.append", "transcriptions.append", "len", "embeds.append", "embeds.append", "line[].replace", "embeds.append", "line[].replace"], "methods", ["None"], ["", "def", "load_gt_txt", "(", "self", ",", "gt_path", ")", ":", "\n", "    ", "assert", "isinstance", "(", "gt_path", ",", "str", ")", ",", "\"load_gt_txt need ground truth path\"", "\n", "images_path", "=", "[", "]", "\n", "transcriptions", "=", "[", "]", "\n", "embeds", "=", "[", "]", "\n", "with", "open", "(", "gt_path", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "      ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "line", "=", "line", ".", "split", "(", ")", "\n", "if", "len", "(", "line", ")", "!=", "2", ":", "\n", "          ", "continue", "\n", "# images_path.append(os.path.join(self.root, line[0]))", "\n", "", "images_path", ".", "append", "(", "line", "[", "0", "]", ")", "\n", "transcriptions", ".", "append", "(", "line", "[", "1", "]", ")", "\n", "if", "self", ".", "embed_path", "is", "None", ":", "\n", "          ", "embeds", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "# embeds.append(os.path.join(self.embed_path, os.path.basename(line[0]).replace(\"jpg\", \"npy\")))", "\n", "# embeds.append(os.path.join(self.embed_path, line[0].replace(\"jpg\", \"npy\")))", "\n", "          ", "if", "\"jpg\"", "in", "line", "[", "0", "]", ":", "\n", "            ", "embeds", ".", "append", "(", "line", "[", "0", "]", ".", "replace", "(", "\"jpg\"", ",", "\"npy\"", ")", ")", "\n", "", "elif", "\"png\"", "in", "line", "[", "0", "]", ":", "\n", "            ", "embeds", ".", "append", "(", "line", "[", "0", "]", ".", "replace", "(", "\"png\"", ",", "\"npy\"", ")", ")", "\n", "", "", "", "", "return", "images_path", ",", "transcriptions", ",", "embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.dataset.LmdbDataset.__init__": [[162, 198], ["torch.utils.data.Dataset.__init__", "dataset.LmdbDataset.env.begin", "int", "min", "lib.utils.labelmaps.get_vocabulary", "dict", "dict", "len", "os.path.basename", "mox.file.exists", "lmdb.open", "lmdb.open", "dataset.LmdbDataset.txn.get", "zip", "zip", "os.path.exists", "os.makedirs", "mox.file.copy_parallel", "ValueError", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.__init__", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.labelmaps.get_vocabulary"], ["  ", "def", "__init__", "(", "self", ",", "root", ",", "voc_type", ",", "max_len", ",", "num_samples", ",", "transform", "=", "None", ")", ":", "\n", "    ", "super", "(", "LmdbDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "global_args", ".", "run_on_remote", ":", "\n", "      ", "dataset_name", "=", "os", ".", "path", ".", "basename", "(", "root", ")", "\n", "data_cache_url", "=", "\"/cache/%s\"", "%", "dataset_name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_cache_url", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "data_cache_url", ")", "\n", "", "if", "mox", ".", "file", ".", "exists", "(", "root", ")", ":", "\n", "        ", "mox", ".", "file", ".", "copy_parallel", "(", "root", ",", "data_cache_url", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"%s not exists!\"", "%", "root", ")", "\n", "\n", "", "self", ".", "env", "=", "lmdb", ".", "open", "(", "data_cache_url", ",", "max_readers", "=", "32", ",", "readonly", "=", "True", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "env", "=", "lmdb", ".", "open", "(", "root", ",", "max_readers", "=", "32", ",", "readonly", "=", "True", ")", "\n", "\n", "", "assert", "self", ".", "env", "is", "not", "None", ",", "\"cannot create lmdb from %s\"", "%", "root", "\n", "self", ".", "txn", "=", "self", ".", "env", ".", "begin", "(", ")", "\n", "\n", "self", ".", "voc_type", "=", "voc_type", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "nSamples", "=", "int", "(", "self", ".", "txn", ".", "get", "(", "b\"num-samples\"", ")", ")", "\n", "self", ".", "nSamples", "=", "min", "(", "self", ".", "nSamples", ",", "num_samples", ")", "\n", "\n", "assert", "voc_type", "in", "[", "'LOWERCASE'", ",", "'ALLCASES'", ",", "'ALLCASES_SYMBOLS'", "]", "\n", "self", ".", "EOS", "=", "'EOS'", "\n", "self", ".", "PADDING", "=", "'PADDING'", "\n", "self", ".", "UNKNOWN", "=", "'UNKNOWN'", "\n", "self", ".", "voc", "=", "get_vocabulary", "(", "voc_type", ",", "EOS", "=", "self", ".", "EOS", ",", "PADDING", "=", "self", ".", "PADDING", ",", "UNKNOWN", "=", "self", ".", "UNKNOWN", ")", "\n", "self", ".", "char2id", "=", "dict", "(", "zip", "(", "self", ".", "voc", ",", "range", "(", "len", "(", "self", ".", "voc", ")", ")", ")", ")", "\n", "self", ".", "id2char", "=", "dict", "(", "zip", "(", "range", "(", "len", "(", "self", ".", "voc", ")", ")", ",", "self", ".", "voc", ")", ")", "\n", "\n", "self", ".", "rec_num_classes", "=", "len", "(", "self", ".", "voc", ")", "\n", "self", ".", "lowercase", "=", "(", "voc_type", "==", "'LOWERCASE'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.dataset.LmdbDataset.__len__": [[199, 201], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.dataset.LmdbDataset.__getitem__": [[202, 259], ["dataset.LmdbDataset.txn.get", "six.BytesIO", "six.BytesIO.write", "six.BytesIO.seek", "dataset.LmdbDataset.txn.get().decode", "numpy.full", "numpy.array", "len", "dataset.LmdbDataset.txn.get", "numpy.array().astype", "len", "PIL.Image.open().convert", "word.lower.lower.lower", "len", "len", "embed_vec.decode.decode.decode", "dataset.LmdbDataset.transform", "print", "dataset.LmdbDataset.txn.get", "label_list.append", "label_list.append", "len", "numpy.array", "PIL.Image.open", "embed_vec.decode.decode.split"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.utils.logging.Logger.write"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "assert", "index", "<=", "len", "(", "self", ")", ",", "'index range error'", "\n", "index", "+=", "1", "\n", "img_key", "=", "b'image-%09d'", "%", "index", "\n", "imgbuf", "=", "self", ".", "txn", ".", "get", "(", "img_key", ")", "\n", "\n", "buf", "=", "six", ".", "BytesIO", "(", ")", "\n", "buf", ".", "write", "(", "imgbuf", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "try", ":", "\n", "      ", "img", "=", "Image", ".", "open", "(", "buf", ")", ".", "convert", "(", "'RGB'", ")", "\n", "# img = Image.open(buf).convert('L')", "\n", "# img = img.convert('RGB')", "\n", "", "except", "IOError", ":", "\n", "      ", "print", "(", "'Corrupted image for %d'", "%", "index", ")", "\n", "return", "self", "[", "index", "+", "1", "]", "\n", "\n", "# reconition labels", "\n", "", "label_key", "=", "b'label-%09d'", "%", "index", "\n", "word", "=", "self", ".", "txn", ".", "get", "(", "label_key", ")", ".", "decode", "(", ")", "\n", "if", "self", ".", "lowercase", ":", "\n", "      ", "word", "=", "word", ".", "lower", "(", ")", "\n", "## fill with the padding token", "\n", "", "label", "=", "np", ".", "full", "(", "(", "self", ".", "max_len", ",", ")", ",", "self", ".", "char2id", "[", "self", ".", "PADDING", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "label_list", "=", "[", "]", "\n", "for", "char", "in", "word", ":", "\n", "      ", "if", "char", "in", "self", ".", "char2id", ":", "\n", "        ", "label_list", ".", "append", "(", "self", ".", "char2id", "[", "char", "]", ")", "\n", "", "else", ":", "\n", "## add the unknown token", "\n", "# print('{0} is out of vocabulary.'.format(char))", "\n", "        ", "label_list", ".", "append", "(", "self", ".", "char2id", "[", "self", ".", "UNKNOWN", "]", ")", "\n", "## add a stop token", "\n", "", "", "label_list", "=", "label_list", "+", "[", "self", ".", "char2id", "[", "self", ".", "EOS", "]", "]", "\n", "assert", "len", "(", "label_list", ")", "<=", "self", ".", "max_len", "\n", "label", "[", ":", "len", "(", "label_list", ")", "]", "=", "np", ".", "array", "(", "label_list", ")", "\n", "\n", "if", "len", "(", "label", ")", "<=", "0", ":", "\n", "      ", "return", "self", "[", "index", "+", "1", "]", "\n", "\n", "# label length", "\n", "", "label_len", "=", "len", "(", "label_list", ")", "\n", "\n", "# Embedding vectors", "\n", "embed_key", "=", "b'embed-%09d'", "%", "index", "\n", "embed_vec", "=", "self", ".", "txn", ".", "get", "(", "embed_key", ")", "\n", "if", "embed_vec", "is", "not", "None", ":", "\n", "      ", "embed_vec", "=", "embed_vec", ".", "decode", "(", ")", "\n", "", "else", ":", "\n", "      ", "embed_vec", "=", "' '", ".", "join", "(", "[", "'0'", "]", "*", "300", ")", "\n", "# make string vector to numpy ndarray", "\n", "", "embed_vec", "=", "np", ".", "array", "(", "embed_vec", ".", "split", "(", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "embed_vec", ".", "shape", "[", "0", "]", "!=", "300", ":", "\n", "      ", "return", "self", "[", "index", "+", "1", "]", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "      ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "label", ",", "label_len", ",", "embed_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.dataset.ResizeNormalize.__init__": [[262, 266], ["torchvision.transforms.ToTensor"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "    ", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "toTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.dataset.ResizeNormalize.__call__": [[267, 272], ["dataset.ResizeNormalize.resize", "dataset.ResizeNormalize.toTensor", "dataset.ResizeNormalize.sub_().div_", "dataset.ResizeNormalize.sub_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "    ", "img", "=", "img", ".", "resize", "(", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "img", "=", "self", ".", "toTensor", "(", "img", ")", "\n", "img", ".", "sub_", "(", "0.5", ")", ".", "div_", "(", "0.5", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.dataset.RandomSequentialSampler.__init__": [[276, 279], ["len"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "data_source", ",", "batch_size", ")", ":", "\n", "    ", "self", ".", "num_samples", "=", "len", "(", "data_source", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.dataset.RandomSequentialSampler.__len__": [[280, 282], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.dataset.RandomSequentialSampler.__iter__": [[283, 298], ["torch.LongTensor().fill_", "range", "iter", "len", "len", "random.randint", "random.randint", "torch.LongTensor().fill_.tolist", "torch.LongTensor", "torch.arange", "torch.arange", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "    ", "n_batch", "=", "len", "(", "self", ")", "//", "self", ".", "batch_size", "\n", "tail", "=", "len", "(", "self", ")", "%", "self", ".", "batch_size", "\n", "index", "=", "torch", ".", "LongTensor", "(", "len", "(", "self", ")", ")", ".", "fill_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "n_batch", ")", ":", "\n", "      ", "random_start", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ")", "-", "self", ".", "batch_size", ")", "\n", "batch_index", "=", "random_start", "+", "torch", ".", "arange", "(", "0", ",", "self", ".", "batch_size", ")", "\n", "index", "[", "i", "*", "self", ".", "batch_size", ":", "(", "i", "+", "1", ")", "*", "self", ".", "batch_size", "]", "=", "batch_index", "\n", "# deal with tail", "\n", "", "if", "tail", ":", "\n", "      ", "random_start", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ")", "-", "self", ".", "batch_size", ")", "\n", "tail_index", "=", "random_start", "+", "torch", ".", "arange", "(", "0", ",", "tail", ")", "\n", "index", "[", "(", "i", "+", "1", ")", "*", "self", ".", "batch_size", ":", "]", "=", "tail_index", "\n", "\n", "", "return", "iter", "(", "index", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.dataset.AlignCollate.__init__": [[302, 307], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "imgH", "=", "32", ",", "imgW", "=", "100", ",", "keep_ratio", "=", "False", ",", "min_ratio", "=", "1", ")", ":", "\n", "    ", "self", ".", "imgH", "=", "imgH", "\n", "self", ".", "imgW", "=", "imgW", "\n", "self", ".", "keep_ratio", "=", "keep_ratio", "\n", "self", ".", "min_ratio", "=", "min_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.dataset.AlignCollate.__call__": [[308, 332], ["zip", "torch.IntTensor", "torch.IntTensor", "torch.FloatTensor", "dataset.ResizeNormalize", "torch.stack", "ratios.sort", "int", "max", "min", "ResizeNormalize.", "ratios.append", "numpy.floor", "float"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "    ", "images", ",", "labels", ",", "lengths", ",", "embeds", "=", "zip", "(", "*", "batch", ")", "\n", "b_lengths", "=", "torch", ".", "IntTensor", "(", "lengths", ")", "\n", "b_labels", "=", "torch", ".", "IntTensor", "(", "labels", ")", "\n", "b_embeds", "=", "torch", ".", "FloatTensor", "(", "embeds", ")", "\n", "\n", "imgH", "=", "self", ".", "imgH", "\n", "imgW", "=", "self", ".", "imgW", "\n", "if", "self", ".", "keep_ratio", ":", "\n", "      ", "ratios", "=", "[", "]", "\n", "for", "image", "in", "images", ":", "\n", "        ", "w", ",", "h", "=", "image", ".", "size", "\n", "ratios", ".", "append", "(", "w", "/", "float", "(", "h", ")", ")", "\n", "", "ratios", ".", "sort", "(", ")", "\n", "max_ratio", "=", "ratios", "[", "-", "1", "]", "\n", "imgW", "=", "int", "(", "np", ".", "floor", "(", "max_ratio", "*", "imgH", ")", ")", "\n", "imgW", "=", "max", "(", "imgH", "*", "self", ".", "min_ratio", ",", "imgW", ")", "# assure imgH >= imgW", "\n", "imgW", "=", "min", "(", "imgW", ",", "400", ")", "\n", "\n", "", "transform", "=", "ResizeNormalize", "(", "(", "imgW", ",", "imgH", ")", ")", "\n", "images", "=", "[", "transform", "(", "image", ")", "for", "image", "in", "images", "]", "\n", "b_images", "=", "torch", ".", "stack", "(", "images", ")", "\n", "\n", "return", "b_images", ",", "b_labels", ",", "b_lengths", ",", "b_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.dataset.debug": [[333, 348], ["dataset.CustomDataset", "torch.utils.data.DataLoader", "enumerate", "print", "dataset.AlignCollate"], "function", ["None"], ["", "", "def", "debug", "(", ")", ":", "\n", "  ", "img_root_dir", "=", "\"/data2/data/ART/train_images/\"", "\n", "gt_file_path", "=", "\"/data2/data/ART/train_labels.json\"", "\n", "train_dataset", "=", "CustomDataset", "(", "root", "=", "img_root_dir", ",", "gt_file_path", "=", "gt_file_path", ",", "voc_type", "=", "\"ALLCASES_SYMBOLS\"", ",", "max_len", "=", "50", ",", "num_samples", "=", "5000", ")", "\n", "batch_size", "=", "4", "\n", "train_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", "collate_fn", "=", "AlignCollate", "(", "imgH", "=", "64", ",", "imgW", "=", "256", ",", "keep_ratio", "=", "False", ")", ")", "\n", "for", "i", ",", "(", "images", ",", "labels", ",", "lengths", ",", "masks", ")", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "    ", "print", "(", "i", ")", "\n", "# images = images.permute(0, 2, 3, 1)", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.concatdataset.ConcatDataset.cumsum": [[20, 28], ["len", "r.append"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "cumsum", "(", "sequence", ")", ":", "\n", "        ", "r", ",", "s", "=", "[", "]", ",", "0", "\n", "for", "e", "in", "sequence", ":", "\n", "            ", "l", "=", "len", "(", "e", ")", "\n", "r", ".", "append", "(", "l", "+", "s", ")", "\n", "s", "+=", "l", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.concatdataset.ConcatDataset.__init__": [[29, 37], ["torch.utils.data.Dataset.__init__", "list", "concatdataset.ConcatDataset.cumsum", "max", "len"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.__init__", "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.concatdataset.ConcatDataset.cumsum"], ["", "def", "__init__", "(", "self", ",", "datasets", ")", ":", "\n", "        ", "super", "(", "ConcatDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "len", "(", "datasets", ")", ">", "0", ",", "'datasets should not be an empty iterable'", "\n", "self", ".", "datasets", "=", "list", "(", "datasets", ")", "\n", "self", ".", "cumulative_sizes", "=", "self", ".", "cumsum", "(", "self", ".", "datasets", ")", "\n", "self", ".", "max_len", "=", "max", "(", "[", "_dataset", ".", "max_len", "for", "_dataset", "in", "self", ".", "datasets", "]", ")", "\n", "for", "_dataset", "in", "self", ".", "datasets", ":", "\n", "            ", "_dataset", ".", "max_len", "=", "self", ".", "max_len", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.concatdataset.ConcatDataset.__len__": [[38, 40], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cumulative_sizes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.concatdataset.ConcatDataset.__getitem__": [[41, 48], ["bisect.bisect_right"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "dataset_idx", "=", "bisect", ".", "bisect_right", "(", "self", ".", "cumulative_sizes", ",", "idx", ")", "\n", "if", "dataset_idx", "==", "0", ":", "\n", "            ", "sample_idx", "=", "idx", "\n", "", "else", ":", "\n", "            ", "sample_idx", "=", "idx", "-", "self", ".", "cumulative_sizes", "[", "dataset_idx", "-", "1", "]", "\n", "", "return", "self", ".", "datasets", "[", "dataset_idx", "]", "[", "sample_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.datasets.concatdataset.ConcatDataset.cummulative_sizes": [[49, 54], ["warnings.warn"], "methods", ["None"], ["", "@", "property", "\n", "def", "cummulative_sizes", "(", "self", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"cummulative_sizes attribute is renamed to \"", "\n", "\"cumulative_sizes\"", ",", "DeprecationWarning", ",", "stacklevel", "=", "2", ")", "\n", "return", "self", ".", "cumulative_sizes", "", "", "", ""]], "home.repos.pwc.inspect_result.Pay20Y_SEED.tools.create_svtp_lmdb.checkImageIsValid": [[12, 21], ["numpy.fromstring", "cv2.imdecode"], "function", ["None"], ["def", "checkImageIsValid", "(", "imageBin", ")", ":", "\n", "  ", "if", "imageBin", "is", "None", ":", "\n", "    ", "return", "False", "\n", "", "imageBuf", "=", "np", ".", "fromstring", "(", "imageBin", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img", "=", "cv2", ".", "imdecode", "(", "imageBuf", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "imgH", ",", "imgW", "=", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", "\n", "if", "imgH", "*", "imgW", "==", "0", ":", "\n", "    ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.tools.create_svtp_lmdb.writeCache": [[23, 27], ["env.begin", "cache.items", "txn.put", "k.encode"], "function", ["None"], ["", "def", "writeCache", "(", "env", ",", "cache", ")", ":", "\n", "  ", "with", "env", ".", "begin", "(", "write", "=", "True", ")", "as", "txn", ":", "\n", "    ", "for", "k", ",", "v", "in", "cache", ".", "items", "(", ")", ":", "\n", "      ", "txn", ".", "put", "(", "k", ".", "encode", "(", ")", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.tools.create_svtp_lmdb._is_difficult": [[29, 32], ["isinstance", "re.match"], "function", ["None"], ["", "", "", "def", "_is_difficult", "(", "word", ")", ":", "\n", "  ", "assert", "isinstance", "(", "word", ",", "str", ")", "\n", "return", "not", "re", ".", "match", "(", "'^[\\w]+$'", ",", "word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.tools.create_svtp_lmdb.createDataset": [[34, 80], ["len", "lmdb.open", "range", "str().encode", "create_svtp_lmdb.writeCache", "print", "len", "len", "label.encode", "len", "os.path.exists", "print", "open", "f.read", "create_svtp_lmdb.writeCache", "print", "str", "create_svtp_lmdb.checkImageIsValid", "print"], "function", ["home.repos.pwc.inspect_result.Pay20Y_SEED.tools.create_all_synth_lmdb.writeCache", "home.repos.pwc.inspect_result.Pay20Y_SEED.tools.create_all_synth_lmdb.writeCache", "home.repos.pwc.inspect_result.Pay20Y_SEED.tools.create_all_synth_lmdb.checkImageIsValid"], ["", "def", "createDataset", "(", "outputPath", ",", "imagePathList", ",", "labelList", ",", "lexiconList", "=", "None", ",", "checkValid", "=", "True", ")", ":", "\n", "  ", "\"\"\"\n  Create LMDB dataset for CRNN training.\n  ARGS:\n      outputPath    : LMDB output path\n      imagePathList : list of image path\n      labelList     : list of corresponding groundtruth texts\n      lexiconList   : (optional) list of lexicon lists\n      checkValid    : if true, check the validity of every image\n  \"\"\"", "\n", "assert", "(", "len", "(", "imagePathList", ")", "==", "len", "(", "labelList", ")", ")", "\n", "nSamples", "=", "len", "(", "imagePathList", ")", "\n", "env", "=", "lmdb", ".", "open", "(", "outputPath", ",", "map_size", "=", "1099511627776", ")", "\n", "cache", "=", "{", "}", "\n", "cnt", "=", "1", "\n", "for", "i", "in", "range", "(", "nSamples", ")", ":", "\n", "    ", "imagePath", "=", "imagePathList", "[", "i", "]", "\n", "label", "=", "labelList", "[", "i", "]", "\n", "if", "len", "(", "label", ")", "==", "0", ":", "\n", "      ", "continue", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "imagePath", ")", ":", "\n", "      ", "print", "(", "'%s does not exist'", "%", "imagePath", ")", "\n", "continue", "\n", "", "with", "open", "(", "imagePath", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "imageBin", "=", "f", ".", "read", "(", ")", "\n", "", "if", "checkValid", ":", "\n", "      ", "if", "not", "checkImageIsValid", "(", "imageBin", ")", ":", "\n", "        ", "print", "(", "'%s is not a valid image'", "%", "imagePath", ")", "\n", "continue", "\n", "\n", "", "", "imageKey", "=", "'image-%09d'", "%", "cnt", "\n", "labelKey", "=", "'label-%09d'", "%", "cnt", "\n", "cache", "[", "imageKey", "]", "=", "imageBin", "\n", "cache", "[", "labelKey", "]", "=", "label", ".", "encode", "(", ")", "\n", "if", "lexiconList", ":", "\n", "      ", "lexiconKey", "=", "'lexicon-%09d'", "%", "cnt", "\n", "cache", "[", "lexiconKey", "]", "=", "' '", ".", "join", "(", "lexiconList", "[", "i", "]", ")", "\n", "", "if", "cnt", "%", "1000", "==", "0", ":", "\n", "      ", "writeCache", "(", "env", ",", "cache", ")", "\n", "cache", "=", "{", "}", "\n", "print", "(", "'Written %d / %d'", "%", "(", "cnt", ",", "nSamples", ")", ")", "\n", "", "cnt", "+=", "1", "\n", "", "nSamples", "=", "cnt", "-", "1", "\n", "cache", "[", "'num-samples'", "]", "=", "str", "(", "nSamples", ")", ".", "encode", "(", ")", "\n", "writeCache", "(", "env", ",", "cache", ")", "\n", "print", "(", "'Created dataset with %d samples'", "%", "nSamples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.tools.create_all_synth_lmdb.checkImageIsValid": [[11, 24], ["numpy.fromstring", "cv2.imdecode", "print"], "function", ["None"], ["def", "checkImageIsValid", "(", "imageBin", ")", ":", "\n", "  ", "if", "imageBin", "is", "None", ":", "\n", "    ", "return", "False", "\n", "", "imageBuf", "=", "np", ".", "fromstring", "(", "imageBin", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "try", ":", "\n", "    ", "img", "=", "cv2", ".", "imdecode", "(", "imageBuf", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "imgH", ",", "imgW", "=", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", "\n", "", "except", "Exception", "as", "e", ":", "\n", "      ", "print", "(", "e", ")", "\n", "return", "False", "\n", "", "if", "imgH", "*", "imgW", "==", "0", ":", "\n", "    ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.tools.create_all_synth_lmdb.writeCache": [[25, 29], ["env.begin", "cache.items", "txn.put", "k.encode"], "function", ["None"], ["", "def", "writeCache", "(", "env", ",", "cache", ")", ":", "\n", "  ", "with", "env", ".", "begin", "(", "write", "=", "True", ")", "as", "txn", ":", "\n", "    ", "for", "k", ",", "v", "in", "cache", ".", "items", "(", ")", ":", "\n", "      ", "txn", ".", "put", "(", "k", ".", "encode", "(", ")", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.tools.create_all_synth_lmdb._is_difficult": [[30, 33], ["isinstance", "re.match"], "function", ["None"], ["", "", "", "def", "_is_difficult", "(", "word", ")", ":", "\n", "  ", "assert", "isinstance", "(", "word", ",", "str", ")", "\n", "return", "not", "re", ".", "match", "(", "'^[\\w]+$'", ",", "word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.tools.create_all_synth_lmdb.createDataset": [[34, 82], ["len", "lmdb.open", "range", "str().encode", "create_all_synth_lmdb.writeCache", "print", "len", "len", "label.encode", "len", "os.path.exists", "print", "open", "f.read", "create_all_synth_lmdb.writeCache", "print", "str", "create_all_synth_lmdb.checkImageIsValid", "print", "str", "embed_vec.tolist"], "function", ["home.repos.pwc.inspect_result.Pay20Y_SEED.tools.create_all_synth_lmdb.writeCache", "home.repos.pwc.inspect_result.Pay20Y_SEED.tools.create_all_synth_lmdb.writeCache", "home.repos.pwc.inspect_result.Pay20Y_SEED.tools.create_all_synth_lmdb.checkImageIsValid"], ["", "def", "createDataset", "(", "outputPath", ",", "imagePathList", ",", "labelList", ",", "lexiconList", "=", "None", ",", "checkValid", "=", "True", ")", ":", "\n", "  ", "\"\"\"\n  Create LMDB dataset for CRNN training.\n  ARGS:\n      outputPath    : LMDB output path\n      imagePathList : list of image path\n      labelList     : list of corresponding groundtruth texts\n      lexiconList   : (optional) list of lexicon lists\n      checkValid    : if true, check the validity of every image\n  \"\"\"", "\n", "assert", "(", "len", "(", "imagePathList", ")", "==", "len", "(", "labelList", ")", ")", "\n", "nSamples", "=", "len", "(", "imagePathList", ")", "\n", "env", "=", "lmdb", ".", "open", "(", "outputPath", ",", "map_size", "=", "1099511627776", ")", "\n", "cache", "=", "{", "}", "\n", "cnt", "=", "1", "\n", "for", "i", "in", "range", "(", "nSamples", ")", ":", "\n", "    ", "imagePath", "=", "imagePathList", "[", "i", "]", "\n", "label", "=", "labelList", "[", "i", "]", "\n", "if", "len", "(", "label", ")", "==", "0", ":", "\n", "      ", "continue", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "imagePath", ")", ":", "\n", "      ", "print", "(", "'%s does not exist'", "%", "imagePath", ")", "\n", "continue", "\n", "", "with", "open", "(", "imagePath", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "imageBin", "=", "f", ".", "read", "(", ")", "\n", "", "if", "checkValid", ":", "\n", "      ", "if", "not", "checkImageIsValid", "(", "imageBin", ")", ":", "\n", "        ", "print", "(", "'%s is not a valid image'", "%", "imagePath", ")", "\n", "continue", "\n", "", "", "embed_vec", "=", "fasttext_model", "[", "label", "]", "\n", "imageKey", "=", "'image-%09d'", "%", "cnt", "\n", "labelKey", "=", "'label-%09d'", "%", "cnt", "\n", "embedKey", "=", "'embed-%09d'", "%", "cnt", "\n", "cache", "[", "imageKey", "]", "=", "imageBin", "\n", "cache", "[", "labelKey", "]", "=", "label", ".", "encode", "(", ")", "\n", "cache", "[", "embedKey", "]", "=", "' '", ".", "join", "(", "str", "(", "v", ")", "for", "v", "in", "embed_vec", ".", "tolist", "(", ")", ")", ".", "encode", "(", ")", "\n", "if", "lexiconList", ":", "\n", "      ", "lexiconKey", "=", "'lexicon-%09d'", "%", "cnt", "\n", "cache", "[", "lexiconKey", "]", "=", "' '", ".", "join", "(", "lexiconList", "[", "i", "]", ")", "\n", "", "if", "cnt", "%", "1000", "==", "0", ":", "\n", "      ", "writeCache", "(", "env", ",", "cache", ")", "\n", "cache", "=", "{", "}", "\n", "print", "(", "'Written %d / %d'", "%", "(", "cnt", ",", "nSamples", ")", ")", "\n", "", "cnt", "+=", "1", "\n", "", "nSamples", "=", "cnt", "-", "1", "\n", "cache", "[", "'num-samples'", "]", "=", "str", "(", "nSamples", ")", ".", "encode", "(", ")", "\n", "writeCache", "(", "env", ",", "cache", ")", "\n", "print", "(", "'Created dataset with %d samples'", "%", "nSamples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.attention_recognition_head.AttentionRecognitionHead.__init__": [[16, 25], ["torch.nn.Module.__init__", "attention_recognition_head.DecoderUnit"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "in_planes", ",", "sDim", ",", "attDim", ",", "max_len_labels", ")", ":", "\n", "    ", "super", "(", "AttentionRecognitionHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "# this is the output classes. So it includes the <EOS>.", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "sDim", "=", "sDim", "\n", "self", ".", "attDim", "=", "attDim", "\n", "self", ".", "max_len_labels", "=", "max_len_labels", "\n", "\n", "self", ".", "decoder", "=", "DecoderUnit", "(", "sDim", "=", "sDim", ",", "xDim", "=", "in_planes", ",", "yDim", "=", "num_classes", ",", "attDim", "=", "attDim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.attention_recognition_head.AttentionRecognitionHead.forward": [[26, 45], ["x.size", "attention_recognition_head.AttentionRecognitionHead.decoder.get_initial_state", "range", "torch.cat", "max", "attention_recognition_head.AttentionRecognitionHead.decoder", "torch.cat.append", "torch.zeros().fill_", "_.unsqueeze", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.models.attention_recognition_head.DecoderUnit.get_initial_state"], ["", "def", "forward", "(", "self", ",", "x", ",", "embed", ")", ":", "\n", "    ", "x", ",", "targets", ",", "lengths", "=", "x", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "# Decoder", "\n", "# state = torch.zeros(1, batch_size, self.sDim)", "\n", "# fusing embed", "\n", "state", "=", "self", ".", "decoder", ".", "get_initial_state", "(", "embed", ")", "\n", "outputs", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "max", "(", "lengths", ")", ")", ":", "\n", "      ", "if", "i", "==", "0", ":", "\n", "        ", "y_prev", "=", "torch", ".", "zeros", "(", "(", "batch_size", ")", ")", ".", "fill_", "(", "self", ".", "num_classes", ")", "# the last one is used as the <BOS>.", "\n", "", "else", ":", "\n", "        ", "y_prev", "=", "targets", "[", ":", ",", "i", "-", "1", "]", "\n", "\n", "", "output", ",", "state", "=", "self", ".", "decoder", "(", "x", ",", "state", ",", "y_prev", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "", "outputs", "=", "torch", ".", "cat", "(", "[", "_", ".", "unsqueeze", "(", "1", ")", "for", "_", "in", "outputs", "]", ",", "1", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.attention_recognition_head.AttentionRecognitionHead.sample": [[47, 69], ["x.size", "torch.zeros", "range", "torch.cat", "torch.cat", "attention_recognition_head.AttentionRecognitionHead.decoder", "torch.nn.functional.softmax", "torch.nn.functional.softmax.max", "torch.cat.append", "torch.cat.append", "torch.zeros().fill_", "predicted.unsqueeze", "score.unsqueeze", "torch.zeros"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", ",", "_", ",", "_", "=", "x", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "# Decoder", "\n", "state", "=", "torch", ".", "zeros", "(", "1", ",", "batch_size", ",", "self", ".", "sDim", ")", "\n", "\n", "predicted_ids", ",", "predicted_scores", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "max_len_labels", ")", ":", "\n", "      ", "if", "i", "==", "0", ":", "\n", "        ", "y_prev", "=", "torch", ".", "zeros", "(", "(", "batch_size", ")", ")", ".", "fill_", "(", "self", ".", "num_classes", ")", "\n", "", "else", ":", "\n", "        ", "y_prev", "=", "predicted", "\n", "\n", "", "output", ",", "state", "=", "self", ".", "decoder", "(", "x", ",", "state", ",", "y_prev", ")", "\n", "output", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "score", ",", "predicted", "=", "output", ".", "max", "(", "1", ")", "\n", "predicted_ids", ".", "append", "(", "predicted", ".", "unsqueeze", "(", "1", ")", ")", "\n", "predicted_scores", ".", "append", "(", "score", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "predicted_ids", "=", "torch", ".", "cat", "(", "predicted_ids", ",", "1", ")", "\n", "predicted_scores", "=", "torch", ".", "cat", "(", "predicted_scores", ",", "1", ")", "\n", "# return predicted_ids.squeeze(), predicted_scores.squeeze()", "\n", "return", "predicted_ids", ",", "predicted_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.attention_recognition_head.AttentionRecognitionHead.beam_search": [[70, 188], ["x.size", "x.unsqueeze().permute().repeat().permute().contiguous().view", "attention_recognition_head.AttentionRecognitionHead.decoder.get_initial_state", "torch.Tensor", "scores.view.fill_", "scores.view.index_fill_", "torch.zeros().fill_", "list", "list", "list", "range", "list", "stored_scores[].view().topk", "sorted_score.clone", "sorted_score.clone.topk", "range", "tensor.repeat", "torch.Tensor().long", "attention_recognition_head.AttentionRecognitionHead.decoder", "torch.nn.functional.log_softmax", "attention_recognition_head.AttentionRecognitionHead.beam_search._inflate"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.models.attention_recognition_head.DecoderUnit.get_initial_state"], ["", "def", "beam_search", "(", "self", ",", "x", ",", "beam_width", ",", "eos", ",", "embed", ")", ":", "\n", "\n", "    ", "def", "_inflate", "(", "tensor", ",", "times", ",", "dim", ")", ":", "\n", "      ", "repeat_dims", "=", "[", "1", "]", "*", "tensor", ".", "dim", "(", ")", "\n", "repeat_dims", "[", "dim", "]", "=", "times", "\n", "return", "tensor", ".", "repeat", "(", "*", "repeat_dims", ")", "\n", "\n", "# https://github.com/IBM/pytorch-seq2seq/blob/fede87655ddce6c94b38886089e05321dc9802af/seq2seq/models/TopKDecoder.py", "\n", "", "batch_size", ",", "l", ",", "d", "=", "x", ".", "size", "(", ")", "\n", "# inflated_encoder_feats = _inflate(encoder_feats, beam_width, 0) # ABC --> AABBCC -/-> ABCABC", "\n", "inflated_encoder_feats", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "permute", "(", "(", "1", ",", "0", ",", "2", ",", "3", ")", ")", ".", "repeat", "(", "(", "beam_width", ",", "1", ",", "1", ",", "1", ")", ")", ".", "permute", "(", "(", "1", ",", "0", ",", "2", ",", "3", ")", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "l", ",", "d", ")", "\n", "\n", "# Initialize the decoder", "\n", "# state = torch.zeros(1, batch_size * beam_width, self.sDim)", "\n", "state", "=", "self", ".", "decoder", ".", "get_initial_state", "(", "embed", ",", "tile_times", "=", "beam_width", ")", "\n", "pos_index", "=", "(", "torch", ".", "Tensor", "(", "range", "(", "batch_size", ")", ")", "*", "beam_width", ")", ".", "long", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "# Initialize the scores", "\n", "sequence_scores", "=", "torch", ".", "Tensor", "(", "batch_size", "*", "beam_width", ",", "1", ")", "\n", "sequence_scores", ".", "fill_", "(", "-", "float", "(", "'Inf'", ")", ")", "\n", "sequence_scores", ".", "index_fill_", "(", "0", ",", "torch", ".", "Tensor", "(", "[", "i", "*", "beam_width", "for", "i", "in", "range", "(", "0", ",", "batch_size", ")", "]", ")", ".", "long", "(", ")", ",", "0.0", ")", "\n", "# sequence_scores.fill_(0.0)", "\n", "\n", "# Initialize the input vector", "\n", "y_prev", "=", "torch", ".", "zeros", "(", "(", "batch_size", "*", "beam_width", ")", ")", ".", "fill_", "(", "self", ".", "num_classes", ")", "\n", "\n", "# Store decisions for backtracking", "\n", "stored_scores", "=", "list", "(", ")", "\n", "stored_predecessors", "=", "list", "(", ")", "\n", "stored_emitted_symbols", "=", "list", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "max_len_labels", ")", ":", "\n", "      ", "output", ",", "state", "=", "self", ".", "decoder", "(", "inflated_encoder_feats", ",", "state", ",", "y_prev", ")", "\n", "log_softmax_output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "\n", "sequence_scores", "=", "_inflate", "(", "sequence_scores", ",", "self", ".", "num_classes", ",", "1", ")", "\n", "sequence_scores", "+=", "log_softmax_output", "\n", "scores", ",", "candidates", "=", "sequence_scores", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "topk", "(", "beam_width", ",", "dim", "=", "1", ")", "\n", "\n", "# Reshape input = (bk, 1) and sequence_scores = (bk, 1)", "\n", "y_prev", "=", "(", "candidates", "%", "self", ".", "num_classes", ")", ".", "view", "(", "batch_size", "*", "beam_width", ")", "\n", "sequence_scores", "=", "scores", ".", "view", "(", "batch_size", "*", "beam_width", ",", "1", ")", "\n", "\n", "# Update fields for next timestep", "\n", "predecessors", "=", "(", "candidates", "/", "self", ".", "num_classes", "+", "pos_index", ".", "expand_as", "(", "candidates", ")", ")", ".", "view", "(", "batch_size", "*", "beam_width", ",", "1", ")", "\n", "state", "=", "state", ".", "index_select", "(", "1", ",", "predecessors", ".", "squeeze", "(", ")", ")", "\n", "\n", "# Update sequence socres and erase scores for <eos> symbol so that they aren't expanded", "\n", "stored_scores", ".", "append", "(", "sequence_scores", ".", "clone", "(", ")", ")", "\n", "eos_indices", "=", "y_prev", ".", "view", "(", "-", "1", ",", "1", ")", ".", "eq", "(", "eos", ")", "\n", "if", "eos_indices", ".", "nonzero", "(", ")", ".", "dim", "(", ")", ">", "0", ":", "\n", "        ", "sequence_scores", ".", "masked_fill_", "(", "eos_indices", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "# Cache results for backtracking", "\n", "", "stored_predecessors", ".", "append", "(", "predecessors", ")", "\n", "stored_emitted_symbols", ".", "append", "(", "y_prev", ")", "\n", "\n", "# Do backtracking to return the optimal values", "\n", "#====== backtrak ======#", "\n", "# Initialize return variables given different types", "\n", "", "p", "=", "list", "(", ")", "\n", "l", "=", "[", "[", "self", ".", "max_len_labels", "]", "*", "beam_width", "for", "_", "in", "range", "(", "batch_size", ")", "]", "# Placeholder for lengths of top-k sequences", "\n", "\n", "# the last step output of the beams are not sorted", "\n", "# thus they are sorted here", "\n", "sorted_score", ",", "sorted_idx", "=", "stored_scores", "[", "-", "1", "]", ".", "view", "(", "batch_size", ",", "beam_width", ")", ".", "topk", "(", "beam_width", ")", "\n", "# initialize the sequence scores with the sorted last step beam scores", "\n", "s", "=", "sorted_score", ".", "clone", "(", ")", "\n", "\n", "batch_eos_found", "=", "[", "0", "]", "*", "batch_size", "# the number of EOS found", "\n", "# in the backward loop below for each batch", "\n", "t", "=", "self", ".", "max_len_labels", "-", "1", "\n", "# initialize the back pointer with the sorted order of the last step beams.", "\n", "# add pos_index for indexing variable with b*k as the first dimension.", "\n", "t_predecessors", "=", "(", "sorted_idx", "+", "pos_index", ".", "expand_as", "(", "sorted_idx", ")", ")", ".", "view", "(", "batch_size", "*", "beam_width", ")", "\n", "while", "t", ">=", "0", ":", "\n", "# Re-order the variables with the back pointer", "\n", "      ", "current_symbol", "=", "stored_emitted_symbols", "[", "t", "]", ".", "index_select", "(", "0", ",", "t_predecessors", ")", "\n", "t_predecessors", "=", "stored_predecessors", "[", "t", "]", ".", "index_select", "(", "0", ",", "t_predecessors", ")", ".", "squeeze", "(", ")", "\n", "eos_indices", "=", "stored_emitted_symbols", "[", "t", "]", ".", "eq", "(", "eos", ")", ".", "nonzero", "(", ")", "\n", "if", "eos_indices", ".", "dim", "(", ")", ">", "0", ":", "\n", "        ", "for", "i", "in", "range", "(", "eos_indices", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "# Indices of the EOS symbol for both variables", "\n", "# with b*k as the first dimension, and b, k for", "\n", "# the first two dimensions", "\n", "          ", "idx", "=", "eos_indices", "[", "i", "]", "\n", "b_idx", "=", "int", "(", "idx", "[", "0", "]", "/", "beam_width", ")", "\n", "# The indices of the replacing position", "\n", "# according to the replacement strategy noted above", "\n", "res_k_idx", "=", "beam_width", "-", "(", "batch_eos_found", "[", "b_idx", "]", "%", "beam_width", ")", "-", "1", "\n", "batch_eos_found", "[", "b_idx", "]", "+=", "1", "\n", "res_idx", "=", "b_idx", "*", "beam_width", "+", "res_k_idx", "\n", "\n", "# Replace the old information in return variables", "\n", "# with the new ended sequence information", "\n", "t_predecessors", "[", "res_idx", "]", "=", "stored_predecessors", "[", "t", "]", "[", "idx", "[", "0", "]", "]", "\n", "current_symbol", "[", "res_idx", "]", "=", "stored_emitted_symbols", "[", "t", "]", "[", "idx", "[", "0", "]", "]", "\n", "s", "[", "b_idx", ",", "res_k_idx", "]", "=", "stored_scores", "[", "t", "]", "[", "idx", "[", "0", "]", ",", "[", "0", "]", "]", "\n", "l", "[", "b_idx", "]", "[", "res_k_idx", "]", "=", "t", "+", "1", "\n", "\n", "# record the back tracked results", "\n", "", "", "p", ".", "append", "(", "current_symbol", ")", "\n", "\n", "t", "-=", "1", "\n", "\n", "# Sort and re-order again as the added ended sequences may change", "\n", "# the order (very unlikely)", "\n", "", "s", ",", "re_sorted_idx", "=", "s", ".", "topk", "(", "beam_width", ")", "\n", "for", "b_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "      ", "l", "[", "b_idx", "]", "=", "[", "l", "[", "b_idx", "]", "[", "k_idx", ".", "item", "(", ")", "]", "for", "k_idx", "in", "re_sorted_idx", "[", "b_idx", ",", ":", "]", "]", "\n", "\n", "", "re_sorted_idx", "=", "(", "re_sorted_idx", "+", "pos_index", ".", "expand_as", "(", "re_sorted_idx", ")", ")", ".", "view", "(", "batch_size", "*", "beam_width", ")", "\n", "\n", "# Reverse the sequences and re-order at the same time", "\n", "# It is reversed because the backtracking happens in reverse time order", "\n", "p", "=", "[", "step", ".", "index_select", "(", "0", ",", "re_sorted_idx", ")", ".", "view", "(", "batch_size", ",", "beam_width", ",", "-", "1", ")", "for", "step", "in", "reversed", "(", "p", ")", "]", "\n", "p", "=", "torch", ".", "cat", "(", "p", ",", "-", "1", ")", "[", ":", ",", "0", ",", ":", "]", "\n", "return", "p", ",", "torch", ".", "ones_like", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.attention_recognition_head.AttentionUnit.__init__": [[191, 201], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.__init__"], ["  ", "def", "__init__", "(", "self", ",", "sDim", ",", "xDim", ",", "attDim", ")", ":", "\n", "    ", "super", "(", "AttentionUnit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sDim", "=", "sDim", "\n", "self", ".", "xDim", "=", "xDim", "\n", "self", ".", "attDim", "=", "attDim", "\n", "\n", "self", ".", "sEmbed", "=", "nn", ".", "Linear", "(", "sDim", ",", "attDim", ")", "\n", "self", ".", "xEmbed", "=", "nn", ".", "Linear", "(", "xDim", ",", "attDim", ")", "\n", "self", ".", "wEmbed", "=", "nn", ".", "Linear", "(", "attDim", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.attention_recognition_head.AttentionUnit.init_weights": [[204, 211], ["torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "    ", "init", ".", "normal_", "(", "self", ".", "sEmbed", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "constant_", "(", "self", ".", "sEmbed", ".", "bias", ",", "0", ")", "\n", "init", ".", "normal_", "(", "self", ".", "xEmbed", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "constant_", "(", "self", ".", "xEmbed", ".", "bias", ",", "0", ")", "\n", "init", ".", "normal_", "(", "self", ".", "wEmbed", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "constant_", "(", "self", ".", "wEmbed", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.attention_recognition_head.AttentionUnit.forward": [[212, 232], ["x.view.view.size", "x.view.view.view", "attention_recognition_head.AttentionUnit.xEmbed", "xProj.view.view.view", "sPrev.squeeze.squeeze.squeeze", "attention_recognition_head.AttentionUnit.sEmbed", "torch.unsqueeze", "sProj.expand.expand.expand", "torch.tanh", "sumTanh.view.view.view", "attention_recognition_head.AttentionUnit.wEmbed", "vProj.view.view.view", "torch.nn.functional.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "sPrev", ")", ":", "\n", "    ", "batch_size", ",", "T", ",", "_", "=", "x", ".", "size", "(", ")", "# [b x T x xDim]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "xDim", ")", "# [(b x T) x xDim]", "\n", "xProj", "=", "self", ".", "xEmbed", "(", "x", ")", "# [(b x T) x attDim]", "\n", "xProj", "=", "xProj", ".", "view", "(", "batch_size", ",", "T", ",", "-", "1", ")", "# [b x T x attDim]", "\n", "\n", "sPrev", "=", "sPrev", ".", "squeeze", "(", "0", ")", "\n", "sProj", "=", "self", ".", "sEmbed", "(", "sPrev", ")", "# [b x attDim]", "\n", "sProj", "=", "torch", ".", "unsqueeze", "(", "sProj", ",", "1", ")", "# [b x 1 x attDim]", "\n", "sProj", "=", "sProj", ".", "expand", "(", "batch_size", ",", "T", ",", "self", ".", "attDim", ")", "# [b x T x attDim]", "\n", "\n", "sumTanh", "=", "torch", ".", "tanh", "(", "sProj", "+", "xProj", ")", "\n", "sumTanh", "=", "sumTanh", ".", "view", "(", "-", "1", ",", "self", ".", "attDim", ")", "\n", "\n", "vProj", "=", "self", ".", "wEmbed", "(", "sumTanh", ")", "# [(b x T) x 1]", "\n", "vProj", "=", "vProj", ".", "view", "(", "batch_size", ",", "T", ")", "\n", "\n", "alpha", "=", "F", ".", "softmax", "(", "vProj", ",", "dim", "=", "1", ")", "# attention weights for each sample in the minibatch", "\n", "\n", "return", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.attention_recognition_head.DecoderUnit.__init__": [[235, 248], ["torch.nn.Module.__init__", "attention_recognition_head.AttentionUnit", "torch.nn.Embedding", "torch.nn.GRU", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.__init__"], ["  ", "def", "__init__", "(", "self", ",", "sDim", ",", "xDim", ",", "yDim", ",", "attDim", ")", ":", "\n", "    ", "super", "(", "DecoderUnit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sDim", "=", "sDim", "\n", "self", ".", "xDim", "=", "xDim", "\n", "self", ".", "yDim", "=", "yDim", "\n", "self", ".", "attDim", "=", "attDim", "\n", "self", ".", "emdDim", "=", "attDim", "\n", "\n", "self", ".", "attention_unit", "=", "AttentionUnit", "(", "sDim", ",", "xDim", ",", "attDim", ")", "\n", "self", ".", "tgt_embedding", "=", "nn", ".", "Embedding", "(", "yDim", "+", "1", ",", "self", ".", "emdDim", ")", "# the last is used for <BOS> ", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "input_size", "=", "xDim", "+", "self", ".", "emdDim", ",", "hidden_size", "=", "sDim", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "sDim", ",", "yDim", ")", "\n", "self", ".", "embed_fc", "=", "nn", ".", "Linear", "(", "300", ",", "self", ".", "sDim", ")", "\n", "# self.init_weights()", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.attention_recognition_head.DecoderUnit.init_weights": [[250, 254], ["torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "    ", "init", ".", "normal_", "(", "self", ".", "tgt_embedding", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "normal_", "(", "self", ".", "fc", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "constant_", "(", "self", ".", "fc", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.attention_recognition_head.DecoderUnit.get_initial_state": [[255, 262], ["attention_recognition_head.DecoderUnit.embed_fc", "state.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze", "embed.size", "state.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute().repeat().permute().contiguous().view", "state.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute().repeat().permute().contiguous", "state.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute().repeat().permute", "state.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute().repeat", "state.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute", "state.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze().permute().repeat().permute().contiguous().view.unsqueeze"], "methods", ["None"], ["", "def", "get_initial_state", "(", "self", ",", "embed", ",", "tile_times", "=", "1", ")", ":", "\n", "    ", "assert", "embed", ".", "size", "(", "1", ")", "==", "300", "\n", "state", "=", "self", ".", "embed_fc", "(", "embed", ")", "# N * sDim", "\n", "if", "tile_times", "!=", "1", ":", "\n", "      ", "state", "=", "state", ".", "unsqueeze", "(", "1", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "repeat", "(", "tile_times", ",", "1", ",", "1", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "sDim", ")", "\n", "", "state", "=", "state", ".", "unsqueeze", "(", "0", ")", "# 1 * N * sDim", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.attention_recognition_head.DecoderUnit.forward": [[263, 275], ["x.size", "attention_recognition_head.DecoderUnit.attention_unit", "torch.bmm().squeeze", "attention_recognition_head.DecoderUnit.tgt_embedding", "attention_recognition_head.DecoderUnit.gru", "attention_recognition_head.DecoderUnit.squeeze", "attention_recognition_head.DecoderUnit.fc", "yPrev.long", "torch.cat().unsqueeze", "torch.bmm", "attention_recognition_head.DecoderUnit.unsqueeze", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "sPrev", ",", "yPrev", ")", ":", "\n", "# x: feature sequence from the image decoder.", "\n", "    ", "batch_size", ",", "T", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "alpha", "=", "self", ".", "attention_unit", "(", "x", ",", "sPrev", ")", "\n", "context", "=", "torch", ".", "bmm", "(", "alpha", ".", "unsqueeze", "(", "1", ")", ",", "x", ")", ".", "squeeze", "(", "1", ")", "\n", "yProj", "=", "self", ".", "tgt_embedding", "(", "yPrev", ".", "long", "(", ")", ")", "\n", "# self.gru.flatten_parameters()", "\n", "output", ",", "state", "=", "self", ".", "gru", "(", "torch", ".", "cat", "(", "[", "yProj", ",", "context", "]", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "sPrev", ")", "\n", "output", "=", "output", ".", "squeeze", "(", "1", ")", "\n", "\n", "output", "=", "self", ".", "fc", "(", "output", ")", "\n", "return", "output", ",", "state", "", "", "", ""]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.tps_spatial_transformer.TPSSpatialTransformer.__init__": [[57, 97], ["torch.Module.__init__", "tps_spatial_transformer.build_output_control_points", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "tps_spatial_transformer.compute_partial_repr", "forward_kernel[].copy_", "forward_kernel[].fill_", "forward_kernel[].fill_", "forward_kernel[].copy_", "forward_kernel[].copy_", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "list", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.cat.split", "torch.cat.split", "torch.cat.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tps_spatial_transformer.compute_partial_repr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tps_spatial_transformer.TPSSpatialTransformer.register_buffer", "tps_spatial_transformer.TPSSpatialTransformer.register_buffer", "tps_spatial_transformer.TPSSpatialTransformer.register_buffer", "tps_spatial_transformer.TPSSpatialTransformer.register_buffer", "build_output_control_points.transpose", "itertools.product", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.__init__", "home.repos.pwc.inspect_result.Pay20Y_SEED.models.tps_spatial_transformer.build_output_control_points", "home.repos.pwc.inspect_result.Pay20Y_SEED.models.tps_spatial_transformer.compute_partial_repr", "home.repos.pwc.inspect_result.Pay20Y_SEED.models.tps_spatial_transformer.compute_partial_repr"], ["  ", "def", "__init__", "(", "self", ",", "output_image_size", "=", "None", ",", "num_control_points", "=", "None", ",", "margins", "=", "None", ")", ":", "\n", "    ", "super", "(", "TPSSpatialTransformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_image_size", "=", "output_image_size", "\n", "self", ".", "num_control_points", "=", "num_control_points", "\n", "self", ".", "margins", "=", "margins", "\n", "\n", "self", ".", "target_height", ",", "self", ".", "target_width", "=", "output_image_size", "\n", "target_control_points", "=", "build_output_control_points", "(", "num_control_points", ",", "margins", ")", "\n", "N", "=", "num_control_points", "\n", "# N = N - 4", "\n", "\n", "# create padded kernel matrix", "\n", "forward_kernel", "=", "torch", ".", "zeros", "(", "N", "+", "3", ",", "N", "+", "3", ")", "\n", "target_control_partial_repr", "=", "compute_partial_repr", "(", "target_control_points", ",", "target_control_points", ")", "\n", "forward_kernel", "[", ":", "N", ",", ":", "N", "]", ".", "copy_", "(", "target_control_partial_repr", ")", "\n", "forward_kernel", "[", ":", "N", ",", "-", "3", "]", ".", "fill_", "(", "1", ")", "\n", "forward_kernel", "[", "-", "3", ",", ":", "N", "]", ".", "fill_", "(", "1", ")", "\n", "forward_kernel", "[", ":", "N", ",", "-", "2", ":", "]", ".", "copy_", "(", "target_control_points", ")", "\n", "forward_kernel", "[", "-", "2", ":", ",", ":", "N", "]", ".", "copy_", "(", "target_control_points", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "# compute inverse matrix", "\n", "inverse_kernel", "=", "torch", ".", "inverse", "(", "forward_kernel", ")", "\n", "\n", "# create target cordinate matrix", "\n", "HW", "=", "self", ".", "target_height", "*", "self", ".", "target_width", "\n", "target_coordinate", "=", "list", "(", "itertools", ".", "product", "(", "range", "(", "self", ".", "target_height", ")", ",", "range", "(", "self", ".", "target_width", ")", ")", ")", "\n", "target_coordinate", "=", "torch", ".", "Tensor", "(", "target_coordinate", ")", "# HW x 2", "\n", "Y", ",", "X", "=", "target_coordinate", ".", "split", "(", "1", ",", "dim", "=", "1", ")", "\n", "Y", "=", "Y", "/", "(", "self", ".", "target_height", "-", "1", ")", "\n", "X", "=", "X", "/", "(", "self", ".", "target_width", "-", "1", ")", "\n", "target_coordinate", "=", "torch", ".", "cat", "(", "[", "X", ",", "Y", "]", ",", "dim", "=", "1", ")", "# convert from (y, x) to (x, y)", "\n", "target_coordinate_partial_repr", "=", "compute_partial_repr", "(", "target_coordinate", ",", "target_control_points", ")", "\n", "target_coordinate_repr", "=", "torch", ".", "cat", "(", "[", "\n", "target_coordinate_partial_repr", ",", "torch", ".", "ones", "(", "HW", ",", "1", ")", ",", "target_coordinate", "\n", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# register precomputed matrices", "\n", "self", ".", "register_buffer", "(", "'inverse_kernel'", ",", "inverse_kernel", ")", "\n", "self", ".", "register_buffer", "(", "'padding_matrix'", ",", "torch", ".", "zeros", "(", "3", ",", "2", ")", ")", "\n", "self", ".", "register_buffer", "(", "'target_coordinate_repr'", ",", "target_coordinate_repr", ")", "\n", "self", ".", "register_buffer", "(", "'target_control_points'", ",", "target_control_points", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.tps_spatial_transformer.TPSSpatialTransformer.forward": [[98, 114], ["source_control_points.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.view", "torch.matmul.view", "torch.matmul.view", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "tps_spatial_transformer.grid_sample", "source_control_points.ndimension", "source_control_points.size", "source_control_points.size", "tps_spatial_transformer.TPSSpatialTransformer.padding_matrix.expand"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.models.tps_spatial_transformer.grid_sample"], ["", "def", "forward", "(", "self", ",", "input", ",", "source_control_points", ")", ":", "\n", "    ", "assert", "source_control_points", ".", "ndimension", "(", ")", "==", "3", "\n", "assert", "source_control_points", ".", "size", "(", "1", ")", "==", "self", ".", "num_control_points", "\n", "assert", "source_control_points", ".", "size", "(", "2", ")", "==", "2", "\n", "batch_size", "=", "source_control_points", ".", "size", "(", "0", ")", "\n", "\n", "Y", "=", "torch", ".", "cat", "(", "[", "source_control_points", ",", "self", ".", "padding_matrix", ".", "expand", "(", "batch_size", ",", "3", ",", "2", ")", "]", ",", "1", ")", "\n", "mapping_matrix", "=", "torch", ".", "matmul", "(", "self", ".", "inverse_kernel", ",", "Y", ")", "\n", "source_coordinate", "=", "torch", ".", "matmul", "(", "self", ".", "target_coordinate_repr", ",", "mapping_matrix", ")", "\n", "\n", "grid", "=", "source_coordinate", ".", "view", "(", "-", "1", ",", "self", ".", "target_height", ",", "self", ".", "target_width", ",", "2", ")", "\n", "grid", "=", "torch", ".", "clamp", "(", "grid", ",", "0", ",", "1", ")", "# the source_control_points may be out of [0, 1].", "\n", "# the input to grid_sample is normalized [-1, 1], but what we get is [0, 1]", "\n", "grid", "=", "2.0", "*", "grid", "-", "1.0", "\n", "output_maps", "=", "grid_sample", "(", "input", ",", "grid", ",", "canvas", "=", "None", ")", "\n", "return", "output_maps", ",", "source_coordinate", "", "", "", ""]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.tps_spatial_transformer.grid_sample": [[11, 20], ["torch.grid_sample", "input.data.new().fill_", "torch.grid_sample", "input.data.new", "input.size"], "function", ["home.repos.pwc.inspect_result.Pay20Y_SEED.models.tps_spatial_transformer.grid_sample", "home.repos.pwc.inspect_result.Pay20Y_SEED.models.tps_spatial_transformer.grid_sample"], ["def", "grid_sample", "(", "input", ",", "grid", ",", "canvas", "=", "None", ")", ":", "\n", "  ", "output", "=", "F", ".", "grid_sample", "(", "input", ",", "grid", ")", "\n", "if", "canvas", "is", "None", ":", "\n", "    ", "return", "output", "\n", "", "else", ":", "\n", "    ", "input_mask", "=", "input", ".", "data", ".", "new", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "1", ")", "\n", "output_mask", "=", "F", ".", "grid_sample", "(", "input_mask", ",", "grid", ")", "\n", "padded_output", "=", "output", "*", "output_mask", "+", "canvas", "*", "(", "1", "-", "output_mask", ")", "\n", "return", "padded_output", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.tps_spatial_transformer.compute_partial_repr": [[23, 36], ["input_points.size", "control_points.size", "repr_matrix.masked_fill_", "input_points.view", "control_points.view", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["", "", "def", "compute_partial_repr", "(", "input_points", ",", "control_points", ")", ":", "\n", "  ", "N", "=", "input_points", ".", "size", "(", "0", ")", "\n", "M", "=", "control_points", ".", "size", "(", "0", ")", "\n", "pairwise_diff", "=", "input_points", ".", "view", "(", "N", ",", "1", ",", "2", ")", "-", "control_points", ".", "view", "(", "1", ",", "M", ",", "2", ")", "\n", "# original implementation, very slow", "\n", "# pairwise_dist = torch.sum(pairwise_diff ** 2, dim = 2) # square of distance", "\n", "pairwise_diff_square", "=", "pairwise_diff", "*", "pairwise_diff", "\n", "pairwise_dist", "=", "pairwise_diff_square", "[", ":", ",", ":", ",", "0", "]", "+", "pairwise_diff_square", "[", ":", ",", ":", ",", "1", "]", "\n", "repr_matrix", "=", "0.5", "*", "pairwise_dist", "*", "torch", ".", "log", "(", "pairwise_dist", ")", "\n", "# fix numerical error for 0 * log(0), substitute all nan with 0", "\n", "mask", "=", "repr_matrix", "!=", "repr_matrix", "\n", "repr_matrix", ".", "masked_fill_", "(", "mask", ",", "0", ")", "\n", "return", "repr_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.tps_spatial_transformer.build_output_control_points": [[39, 52], ["numpy.linspace", "numpy.stack", "numpy.stack", "numpy.concatenate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.ones", "numpy.ones"], "function", ["None"], ["", "def", "build_output_control_points", "(", "num_control_points", ",", "margins", ")", ":", "\n", "  ", "margin_x", ",", "margin_y", "=", "margins", "\n", "num_ctrl_pts_per_side", "=", "num_control_points", "//", "2", "\n", "ctrl_pts_x", "=", "np", ".", "linspace", "(", "margin_x", ",", "1.0", "-", "margin_x", ",", "num_ctrl_pts_per_side", ")", "\n", "ctrl_pts_y_top", "=", "np", ".", "ones", "(", "num_ctrl_pts_per_side", ")", "*", "margin_y", "\n", "ctrl_pts_y_bottom", "=", "np", ".", "ones", "(", "num_ctrl_pts_per_side", ")", "*", "(", "1.0", "-", "margin_y", ")", "\n", "ctrl_pts_top", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_top", "]", ",", "axis", "=", "1", ")", "\n", "ctrl_pts_bottom", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_bottom", "]", ",", "axis", "=", "1", ")", "\n", "# ctrl_pts_top = ctrl_pts_top[1:-1,:]", "\n", "# ctrl_pts_bottom = ctrl_pts_bottom[1:-1,:]", "\n", "output_ctrl_pts_arr", "=", "np", ".", "concatenate", "(", "[", "ctrl_pts_top", ",", "ctrl_pts_bottom", "]", ",", "axis", "=", "0", ")", "\n", "output_ctrl_pts", "=", "torch", ".", "Tensor", "(", "output_ctrl_pts_arr", ")", "\n", "return", "output_ctrl_pts", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.resnet_aster.AsterBlock.__init__": [[39, 48], ["torch.Module.__init__", "resnet_aster.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet_aster.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.__init__", "home.repos.pwc.inspect_result.Pay20Y_SEED.models.resnet_aster.conv1x1", "home.repos.pwc.inspect_result.Pay20Y_SEED.models.resnet_aster.conv3x3"], ["  ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "    ", "super", "(", "AsterBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.resnet_aster.AsterBlock.forward": [[49, 62], ["resnet_aster.AsterBlock.conv1", "resnet_aster.AsterBlock.bn1", "resnet_aster.AsterBlock.relu", "resnet_aster.AsterBlock.conv2", "resnet_aster.AsterBlock.bn2", "resnet_aster.AsterBlock.relu", "resnet_aster.AsterBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "residual", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.resnet_aster.ResNet_ASTER.__init__": [[67, 97], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "resnet_aster.ResNet_ASTER._make_layer", "resnet_aster.ResNet_ASTER._make_layer", "resnet_aster.ResNet_ASTER._make_layer", "resnet_aster.ResNet_ASTER._make_layer", "resnet_aster.ResNet_ASTER._make_layer", "resnet_aster.ResNet_ASTER.modules", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.LSTM", "torch.LSTM", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.__init__", "home.repos.pwc.inspect_result.Pay20Y_SEED.models.resnet_aster.ResNet_ASTER._make_layer", "home.repos.pwc.inspect_result.Pay20Y_SEED.models.resnet_aster.ResNet_ASTER._make_layer", "home.repos.pwc.inspect_result.Pay20Y_SEED.models.resnet_aster.ResNet_ASTER._make_layer", "home.repos.pwc.inspect_result.Pay20Y_SEED.models.resnet_aster.ResNet_ASTER._make_layer", "home.repos.pwc.inspect_result.Pay20Y_SEED.models.resnet_aster.ResNet_ASTER._make_layer"], ["def", "__init__", "(", "self", ",", "with_lstm", "=", "False", ",", "n_group", "=", "1", ")", ":", "\n", "    ", "super", "(", "ResNet_ASTER", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_lstm", "=", "with_lstm", "\n", "self", ".", "n_group", "=", "n_group", "\n", "\n", "in_channels", "=", "3", "\n", "self", ".", "layer0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "inplanes", "=", "32", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "32", ",", "3", ",", "[", "2", ",", "2", "]", ")", "# [16, 50]", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "64", ",", "4", ",", "[", "2", ",", "2", "]", ")", "# [8, 25]", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "128", ",", "6", ",", "[", "2", ",", "1", "]", ")", "# [4, 25]", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "256", ",", "6", ",", "[", "2", ",", "1", "]", ")", "# [2, 25]", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "512", ",", "3", ",", "[", "2", ",", "1", "]", ")", "# [1, 25]", "\n", "\n", "if", "with_lstm", ":", "\n", "      ", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "512", ",", "256", ",", "bidirectional", "=", "True", ",", "num_layers", "=", "2", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "out_planes", "=", "2", "*", "256", "\n", "", "else", ":", "\n", "      ", "self", ".", "out_planes", "=", "512", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.resnet_aster.ResNet_ASTER._make_layer": [[98, 111], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet_aster.AsterBlock", "layers.append", "resnet_aster.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_aster.AsterBlock"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.models.resnet_aster.conv1x1"], ["", "", "", "def", "_make_layer", "(", "self", ",", "planes", ",", "blocks", ",", "stride", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "[", "1", ",", "1", "]", "or", "self", ".", "inplanes", "!=", "planes", ":", "\n", "      ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "AsterBlock", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "      ", "layers", ".", "append", "(", "AsterBlock", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.resnet_aster.ResNet_ASTER.forward": [[112, 127], ["resnet_aster.ResNet_ASTER.layer0", "resnet_aster.ResNet_ASTER.layer1", "resnet_aster.ResNet_ASTER.layer2", "resnet_aster.ResNet_ASTER.layer3", "resnet_aster.ResNet_ASTER.layer4", "resnet_aster.ResNet_ASTER.layer5", "resnet_aster.ResNet_ASTER.squeeze", "cnn_feat.transpose.transpose.transpose", "resnet_aster.ResNet_ASTER.rnn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x0", "=", "self", ".", "layer0", "(", "x", ")", "\n", "x1", "=", "self", ".", "layer1", "(", "x0", ")", "\n", "x2", "=", "self", ".", "layer2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "layer4", "(", "x3", ")", "\n", "x5", "=", "self", ".", "layer5", "(", "x4", ")", "\n", "\n", "cnn_feat", "=", "x5", ".", "squeeze", "(", "2", ")", "# [N, c, w]", "\n", "cnn_feat", "=", "cnn_feat", ".", "transpose", "(", "2", ",", "1", ")", "\n", "if", "self", ".", "with_lstm", ":", "\n", "      ", "rnn_feat", ",", "_", "=", "self", ".", "rnn", "(", "cnn_feat", ")", "\n", "return", "rnn_feat", "\n", "", "else", ":", "\n", "      ", "return", "cnn_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.resnet_aster.conv3x3": [[12, 16], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "  ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.resnet_aster.conv1x1": [[18, 21], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "  ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.resnet_aster.get_sinusoid_encoding": [[23, 35], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.pow", "torch.pow", "angles.float.float", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.arange.unsqueeze", "torch.pow.unsqueeze"], "function", ["None"], ["", "def", "get_sinusoid_encoding", "(", "n_position", ",", "feat_dim", ",", "wave_length", "=", "10000", ")", ":", "\n", "# [n_position]", "\n", "  ", "positions", "=", "torch", ".", "arange", "(", "0", ",", "n_position", ")", "#.cuda()", "\n", "# [feat_dim]", "\n", "dim_range", "=", "torch", ".", "arange", "(", "0", ",", "feat_dim", ")", "#.cuda()", "\n", "dim_range", "=", "torch", ".", "pow", "(", "wave_length", ",", "2", "*", "(", "dim_range", "//", "2", ")", "/", "feat_dim", ")", "\n", "# [n_position, feat_dim]", "\n", "angles", "=", "positions", ".", "unsqueeze", "(", "1", ")", "/", "dim_range", ".", "unsqueeze", "(", "0", ")", "\n", "angles", "=", "angles", ".", "float", "(", ")", "\n", "angles", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "angles", "[", ":", ",", "0", ":", ":", "2", "]", ")", "\n", "angles", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "angles", "[", ":", ",", "1", ":", ":", "2", "]", ")", "\n", "return", "angles", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.stn_head.STNHead.__init__": [[26, 54], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "stn_head.STNHead.init_weights", "stn_head.STNHead.init_weights", "stn_head.STNHead.init_stn", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.__init__", "home.repos.pwc.inspect_result.Pay20Y_SEED.models.stn_head.STNHead.init_weights", "home.repos.pwc.inspect_result.Pay20Y_SEED.models.stn_head.STNHead.init_weights", "home.repos.pwc.inspect_result.Pay20Y_SEED.models.stn_head.STNHead.init_stn", "home.repos.pwc.inspect_result.Pay20Y_SEED.models.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.Pay20Y_SEED.models.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.Pay20Y_SEED.models.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.Pay20Y_SEED.models.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.Pay20Y_SEED.models.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.Pay20Y_SEED.models.stn_head.conv3x3_block"], ["  ", "def", "__init__", "(", "self", ",", "in_planes", ",", "num_ctrlpoints", ",", "activation", "=", "'none'", ")", ":", "\n", "    ", "super", "(", "STNHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "num_ctrlpoints", "=", "num_ctrlpoints", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "stn_convnet", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3_block", "(", "in_planes", ",", "32", ")", ",", "# 32*64", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "conv3x3_block", "(", "32", ",", "64", ")", ",", "# 16*32", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "conv3x3_block", "(", "64", ",", "128", ")", ",", "# 8*16", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "conv3x3_block", "(", "128", ",", "256", ")", ",", "# 4*8", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "conv3x3_block", "(", "256", ",", "256", ")", ",", "# 2*4,", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "conv3x3_block", "(", "256", ",", "256", ")", ")", "# 1*2", "\n", "\n", "self", ".", "stn_fc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2", "*", "256", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "stn_fc2", "=", "nn", ".", "Linear", "(", "512", ",", "num_ctrlpoints", "*", "2", ")", "\n", "\n", "self", ".", "init_weights", "(", "self", ".", "stn_convnet", ")", "\n", "self", ".", "init_weights", "(", "self", ".", "stn_fc1", ")", "\n", "self", ".", "init_stn", "(", "self", ".", "stn_fc2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.stn_head.STNHead.init_weights": [[55, 68], ["module.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "module", ")", ":", "\n", "    ", "for", "m", "in", "module", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "          ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.001", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.stn_head.STNHead.init_stn": [[69, 84], ["int", "numpy.linspace", "numpy.stack", "numpy.stack", "numpy.concatenate().astype", "stn_fc2.weight.data.zero_", "torch.Tensor().view", "numpy.ones", "numpy.ones", "numpy.concatenate", "torch.Tensor", "numpy.log"], "methods", ["None"], ["", "", "", "def", "init_stn", "(", "self", ",", "stn_fc2", ")", ":", "\n", "    ", "margin", "=", "0.01", "\n", "sampling_num_per_side", "=", "int", "(", "self", ".", "num_ctrlpoints", "/", "2", ")", "\n", "ctrl_pts_x", "=", "np", ".", "linspace", "(", "margin", ",", "1.", "-", "margin", ",", "sampling_num_per_side", ")", "\n", "ctrl_pts_y_top", "=", "np", ".", "ones", "(", "sampling_num_per_side", ")", "*", "margin", "\n", "ctrl_pts_y_bottom", "=", "np", ".", "ones", "(", "sampling_num_per_side", ")", "*", "(", "1", "-", "margin", ")", "\n", "ctrl_pts_top", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_top", "]", ",", "axis", "=", "1", ")", "\n", "ctrl_pts_bottom", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_bottom", "]", ",", "axis", "=", "1", ")", "\n", "ctrl_points", "=", "np", ".", "concatenate", "(", "[", "ctrl_pts_top", ",", "ctrl_pts_bottom", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "self", ".", "activation", "is", "'none'", ":", "\n", "      ", "pass", "\n", "", "elif", "self", ".", "activation", "==", "'sigmoid'", ":", "\n", "      ", "ctrl_points", "=", "-", "np", ".", "log", "(", "1.", "/", "ctrl_points", "-", "1.", ")", "\n", "", "stn_fc2", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "stn_fc2", ".", "bias", ".", "data", "=", "torch", ".", "Tensor", "(", "ctrl_points", ")", ".", "view", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.stn_head.STNHead.forward": [[85, 95], ["stn_head.STNHead.stn_convnet", "torch.nn.functional.sigmoid.size", "torch.nn.functional.sigmoid.view", "stn_head.STNHead.stn_fc1", "stn_head.STNHead.stn_fc2", "torch.nn.functional.sigmoid.view", "torch.nn.functional.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "stn_convnet", "(", "x", ")", "\n", "batch_size", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "img_feat", "=", "self", ".", "stn_fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "stn_fc2", "(", "0.1", "*", "img_feat", ")", "\n", "if", "self", ".", "activation", "==", "'sigmoid'", ":", "\n", "      ", "x", "=", "F", ".", "sigmoid", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "num_ctrlpoints", ",", "2", ")", "\n", "return", "img_feat", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.stn_head.conv3x3_block": [[13, 23], ["torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "function", ["None"], ["def", "conv3x3_block", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "  ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "conv_layer", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "block", "=", "nn", ".", "Sequential", "(", "\n", "conv_layer", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.model_builder.ModelBuilder.__init__": [[26, 64], ["torch.nn.Module.__init__", "create", "attention_recognition_head.AttentionRecognitionHead", "embedding_head.Embedding", "loss.sequenceCrossEntropyLoss.SequenceCrossEntropyLoss", "loss.embeddingRegressionLoss.EmbeddingRegressionLoss", "tps_spatial_transformer.TPSSpatialTransformer", "stn_head.STNHead", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.__init__", "home.repos.pwc.inspect_result.Pay20Y_SEED.models.__init__.create"], ["def", "__init__", "(", "self", ",", "arch", ",", "rec_num_classes", ",", "sDim", ",", "attDim", ",", "max_len_labels", ",", "eos", ",", "time_step", "=", "25", ",", "STN_ON", "=", "False", ")", ":", "\n", "    ", "super", "(", "ModelBuilder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "arch", "=", "arch", "\n", "self", ".", "rec_num_classes", "=", "rec_num_classes", "\n", "self", ".", "sDim", "=", "sDim", "\n", "self", ".", "attDim", "=", "attDim", "\n", "self", ".", "max_len_labels", "=", "max_len_labels", "\n", "self", ".", "eos", "=", "eos", "\n", "self", ".", "STN_ON", "=", "STN_ON", "\n", "self", ".", "time_step", "=", "time_step", "\n", "self", ".", "tps_inputsize", "=", "global_args", ".", "tps_inputsize", "\n", "\n", "self", ".", "encoder", "=", "create", "(", "self", ".", "arch", ",", "\n", "with_lstm", "=", "global_args", ".", "with_lstm", ",", "\n", "n_group", "=", "global_args", ".", "n_group", ")", "\n", "encoder_out_planes", "=", "self", ".", "encoder", ".", "out_planes", "\n", "\n", "self", ".", "decoder", "=", "AttentionRecognitionHead", "(", "\n", "num_classes", "=", "rec_num_classes", ",", "\n", "in_planes", "=", "encoder_out_planes", ",", "\n", "sDim", "=", "sDim", ",", "\n", "attDim", "=", "attDim", ",", "\n", "max_len_labels", "=", "max_len_labels", ")", "\n", "self", ".", "embeder", "=", "Embedding", "(", "self", ".", "time_step", ",", "encoder_out_planes", ")", "\n", "# self.embeder = Embedding_self_att(self.time_step, encoder_out_planes, n_head=4, n_layers=4)", "\n", "self", ".", "rec_crit", "=", "SequenceCrossEntropyLoss", "(", ")", "\n", "self", ".", "embed_crit", "=", "EmbeddingRegressionLoss", "(", "loss_func", "=", "'cosin'", ")", "\n", "\n", "if", "self", ".", "STN_ON", ":", "\n", "      ", "self", ".", "tps", "=", "TPSSpatialTransformer", "(", "\n", "output_image_size", "=", "tuple", "(", "global_args", ".", "tps_outputsize", ")", ",", "\n", "num_control_points", "=", "global_args", ".", "num_control_points", ",", "\n", "margins", "=", "tuple", "(", "global_args", ".", "tps_margins", ")", ")", "\n", "self", ".", "stn_head", "=", "STNHead", "(", "\n", "in_planes", "=", "3", ",", "\n", "num_ctrlpoints", "=", "global_args", ".", "num_control_points", ",", "\n", "activation", "=", "global_args", ".", "stn_activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.model_builder.ModelBuilder.forward": [[65, 111], ["model_builder.ModelBuilder.encoder", "encoder_feats.contiguous.contiguous.contiguous", "model_builder.ModelBuilder.embeder", "return_dict[].items", "torch.nn.functional.interpolate", "model_builder.ModelBuilder.stn_head", "model_builder.ModelBuilder.tps", "model_builder.ModelBuilder.decoder", "model_builder.ModelBuilder.rec_crit", "model_builder.ModelBuilder.embed_crit", "model_builder.ModelBuilder.decoder.beam_search", "model_builder.ModelBuilder.decoder", "model_builder.ModelBuilder.rec_crit", "model_builder.ModelBuilder.embed_crit", "v.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.models.attention_recognition_head.AttentionRecognitionHead.beam_search"], ["", "", "def", "forward", "(", "self", ",", "input_dict", ")", ":", "\n", "    ", "return_dict", "=", "{", "}", "\n", "return_dict", "[", "'losses'", "]", "=", "{", "}", "\n", "return_dict", "[", "'output'", "]", "=", "{", "}", "\n", "\n", "x", ",", "rec_targets", ",", "rec_lengths", ",", "rec_embeds", "=", "input_dict", "[", "'images'", "]", ",", "input_dict", "[", "'rec_targets'", "]", ",", "input_dict", "[", "'rec_lengths'", "]", ",", "input_dict", "[", "'rec_embeds'", "]", "\n", "\n", "# rectification", "\n", "if", "self", ".", "STN_ON", ":", "\n", "# input images are downsampled before being fed into stn_head.", "\n", "      ", "stn_input", "=", "F", ".", "interpolate", "(", "x", ",", "self", ".", "tps_inputsize", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "stn_img_feat", ",", "ctrl_points", "=", "self", ".", "stn_head", "(", "stn_input", ")", "\n", "x", ",", "_", "=", "self", ".", "tps", "(", "x", ",", "ctrl_points", ")", "\n", "if", "not", "self", ".", "training", ":", "\n", "# save for visualization", "\n", "        ", "return_dict", "[", "'output'", "]", "[", "'ctrl_points'", "]", "=", "ctrl_points", "\n", "return_dict", "[", "'output'", "]", "[", "'rectified_images'", "]", "=", "x", "\n", "\n", "", "", "encoder_feats", "=", "self", ".", "encoder", "(", "x", ")", "\n", "encoder_feats", "=", "encoder_feats", ".", "contiguous", "(", ")", "\n", "embedding_vectors", "=", "self", ".", "embeder", "(", "encoder_feats", ")", "\n", "if", "self", ".", "training", ":", "\n", "      ", "rec_pred", "=", "self", ".", "decoder", "(", "[", "encoder_feats", ",", "rec_targets", ",", "rec_lengths", "]", ",", "embedding_vectors", ")", "\n", "loss_rec", "=", "self", ".", "rec_crit", "(", "rec_pred", ",", "rec_targets", ",", "rec_lengths", ")", "\n", "loss_embed", "=", "self", ".", "embed_crit", "(", "embedding_vectors", ",", "rec_embeds", ")", "\n", "return_dict", "[", "'losses'", "]", "[", "'loss_rec'", "]", "=", "loss_rec", "\n", "return_dict", "[", "'losses'", "]", "[", "'loss_embed'", "]", "=", "loss_embed", "\n", "", "else", ":", "\n", "      ", "rec_pred", ",", "rec_pred_scores", "=", "self", ".", "decoder", ".", "beam_search", "(", "encoder_feats", ",", "global_args", ".", "beam_width", ",", "self", ".", "eos", ",", "embedding_vectors", ")", "\n", "rec_pred_", "=", "self", ".", "decoder", "(", "[", "encoder_feats", ",", "rec_targets", ",", "rec_lengths", "]", ",", "embedding_vectors", ")", "\n", "loss_rec", "=", "self", ".", "rec_crit", "(", "rec_pred_", ",", "rec_targets", ",", "rec_lengths", ")", "\n", "loss_embed", "=", "self", ".", "embed_crit", "(", "embedding_vectors", ",", "rec_embeds", ")", "\n", "return_dict", "[", "'losses'", "]", "[", "'loss_rec'", "]", "=", "loss_rec", "\n", "return_dict", "[", "'losses'", "]", "[", "'loss_embed'", "]", "=", "loss_embed", "\n", "return_dict", "[", "'output'", "]", "[", "'pred_rec'", "]", "=", "rec_pred", "\n", "return_dict", "[", "'output'", "]", "[", "'pred_embed'", "]", "=", "embedding_vectors", "\n", "return_dict", "[", "'output'", "]", "[", "'pred_rec_score'", "]", "=", "rec_pred_scores", "\n", "\n", "# pytorch0.4 bug on gathering scalar(0-dim) tensors", "\n", "", "for", "k", ",", "v", "in", "return_dict", "[", "'losses'", "]", ".", "items", "(", ")", ":", "\n", "      ", "return_dict", "[", "'losses'", "]", "[", "k", "]", "=", "v", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "return", "return_dict", "", "", "", ""]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.__init__.names": [[9, 11], ["sorted", "__factory.keys"], "function", ["None"], ["from", ".", "import", "trainers", "\n", "\n", "__version__", "=", "'1.0.1.post2'", ""]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.__init__.create": [[13, 30], ["KeyError"], "function", ["None"], []], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.embedding_head.Embedding.__init__": [[7, 14], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_timestep", ",", "in_planes", ",", "mid_dim", "=", "4096", ",", "embed_dim", "=", "300", ")", ":", "\n", "        ", "super", "(", "Embedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_timestep", "=", "in_timestep", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "mid_dim", "=", "mid_dim", "\n", "self", ".", "eEmbed", "=", "nn", ".", "Linear", "(", "in_timestep", "*", "in_planes", ",", "self", ".", "embed_dim", ")", "# Embed encoder output to a word-embedding like", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.embedding_head.Embedding.forward": [[15, 19], ["embedding_head.Embedding.reshape", "embedding_head.Embedding.eEmbed"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "x", "=", "self", ".", "eEmbed", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.embedding_head.ScaledDotProductAttention.__init__": [[24, 29], ["torch.nn.Module.__init__", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Softmax", "torch.nn.Softmax"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.__init__"], ["def", "__init__", "(", "self", ",", "temperature", ",", "attn_dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "attn_dropout", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.embedding_head.ScaledDotProductAttention.forward": [[30, 43], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "embedding_head.ScaledDotProductAttention.softmax", "embedding_head.ScaledDotProductAttention.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "k.transpose", "attn.masked_fill.masked_fill.masked_fill"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "mask", "=", "None", ")", ":", "\n", "\n", "        ", "attn", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "attn", "=", "attn", "/", "self", ".", "temperature", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "attn", "=", "attn", ".", "masked_fill", "(", "mask", ",", "-", "np", ".", "inf", ")", "\n", "\n", "", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "attn", "=", "self", ".", "dropout", "(", "attn", ")", "\n", "output", "=", "torch", ".", "bmm", "(", "attn", ",", "v", ")", "\n", "\n", "return", "output", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.embedding_head.MultiHeadAttention.__init__": [[46, 68], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "embedding_head.ScaledDotProductAttention", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.Dropout", "torch.nn.Dropout", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.__init__"], ["def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_v", "=", "d_v", "\n", "\n", "self", ".", "w_qs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ")", "\n", "self", ".", "w_ks", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ")", "\n", "self", ".", "w_vs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_v", ")", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_qs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_ks", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_vs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_v", ")", ")", ")", "\n", "\n", "self", ".", "attention", "=", "ScaledDotProductAttention", "(", "temperature", "=", "np", ".", "power", "(", "d_k", ",", "0.5", ")", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_v", ",", "d_model", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.embedding_head.MultiHeadAttention.forward": [[69, 94], ["q.permute().contiguous().view.permute().contiguous().view.size", "k.permute().contiguous().view.permute().contiguous().view.size", "v.permute().contiguous().view.permute().contiguous().view.size", "embedding_head.MultiHeadAttention.w_qs().view", "embedding_head.MultiHeadAttention.w_ks().view", "embedding_head.MultiHeadAttention.w_vs().view", "q.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "k.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "v.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "embedding_head.MultiHeadAttention.attention", "embedding_head.MultiHeadAttention.view", "embedding_head.MultiHeadAttention.permute().contiguous().view", "embedding_head.MultiHeadAttention.dropout", "embedding_head.MultiHeadAttention.layer_norm", "embedding_head.MultiHeadAttention.fc", "embedding_head.MultiHeadAttention.w_qs", "embedding_head.MultiHeadAttention.w_ks", "embedding_head.MultiHeadAttention.w_vs", "q.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "k.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "v.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "embedding_head.MultiHeadAttention.permute().contiguous", "q.permute().contiguous().view.permute().contiguous().view.permute", "k.permute().contiguous().view.permute().contiguous().view.permute", "v.permute().contiguous().view.permute().contiguous().view.permute", "embedding_head.MultiHeadAttention.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "mask", "=", "None", ")", ":", "\n", "        ", "d_k", ",", "d_v", ",", "n_head", "=", "self", ".", "d_k", ",", "self", ".", "d_v", ",", "self", ".", "n_head", "\n", "sz_b", ",", "len_q", ",", "_", "=", "q", ".", "size", "(", ")", "\n", "sz_b", ",", "len_k", ",", "_", "=", "k", ".", "size", "(", ")", "\n", "sz_b", ",", "len_v", ",", "_", "=", "v", ".", "size", "(", ")", "\n", "\n", "residual", "=", "q", "\n", "\n", "q", "=", "self", ".", "w_qs", "(", "q", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "n_head", ",", "d_k", ")", "\n", "k", "=", "self", ".", "w_ks", "(", "k", ")", ".", "view", "(", "sz_b", ",", "len_k", ",", "n_head", ",", "d_k", ")", "\n", "v", "=", "self", ".", "w_vs", "(", "v", ")", ".", "view", "(", "sz_b", ",", "len_v", ",", "n_head", ",", "d_v", ")", "\n", "\n", "q", "=", "q", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_q", ",", "d_k", ")", "# (n*b) x lq x dk", "\n", "k", "=", "k", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_k", ",", "d_k", ")", "# (n*b) x lk x dk", "\n", "v", "=", "v", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_v", ",", "d_v", ")", "# (n*b) x lv x dv", "\n", "\n", "output", ",", "attn", "=", "self", ".", "attention", "(", "q", ",", "k", ",", "v", ")", "\n", "\n", "output", "=", "output", ".", "view", "(", "n_head", ",", "sz_b", ",", "len_q", ",", "d_v", ")", "\n", "output", "=", "output", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "-", "1", ")", "# b x lq x (n*dv)", "\n", "\n", "output", "=", "self", ".", "dropout", "(", "self", ".", "fc", "(", "output", ")", ")", "\n", "output", "=", "self", ".", "layer_norm", "(", "output", "+", "residual", ")", "\n", "\n", "return", "output", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.embedding_head.PositionwiseFeedForward.__init__": [[98, 104], ["torch.nn.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.__init__"], ["def", "__init__", "(", "self", ",", "d_in", ",", "d_hid", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_1", "=", "nn", ".", "Conv1d", "(", "d_in", ",", "d_hid", ",", "1", ")", "# position-wise", "\n", "self", ".", "w_2", "=", "nn", ".", "Conv1d", "(", "d_hid", ",", "d_in", ",", "1", ")", "# position-wise", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_in", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.embedding_head.PositionwiseFeedForward.forward": [[105, 113], ["x.transpose", "embedding_head.PositionwiseFeedForward.w_2", "embedding_head.PositionwiseFeedForward.transpose", "embedding_head.PositionwiseFeedForward.dropout", "embedding_head.PositionwiseFeedForward.layer_norm", "torch.relu", "torch.relu", "embedding_head.PositionwiseFeedForward.w_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "output", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "output", "=", "self", ".", "w_2", "(", "F", ".", "relu", "(", "self", ".", "w_1", "(", "output", ")", ")", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ")", "\n", "output", "=", "self", ".", "dropout", "(", "output", ")", "\n", "output", "=", "self", ".", "layer_norm", "(", "output", "+", "residual", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.embedding_head.self_block.__init__": [[115, 120], ["torch.nn.Module.__init__", "embedding_head.MultiHeadAttention", "embedding_head.PositionwiseFeedForward"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "self_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "slf_attn", "=", "MultiHeadAttention", "(", "\n", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "pos_ffn", "=", "PositionwiseFeedForward", "(", "d_model", ",", "d_inner", ",", "dropout", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.embedding_head.self_block.forward": [[121, 129], ["embedding_head.self_block.slf_attn", "embedding_head.self_block.pos_ffn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "enc_input", ",", "non_pad_mask", "=", "None", ",", "slf_attn_mask", "=", "None", ")", ":", "\n", "        ", "enc_output", ",", "enc_slf_attn", "=", "self", ".", "slf_attn", "(", "enc_input", ",", "enc_input", ",", "enc_input", ",", "mask", "=", "slf_attn_mask", ")", "\n", "# enc_output *= non_pad_mask", "\n", "\n", "enc_output", "=", "self", ".", "pos_ffn", "(", "enc_output", ")", "\n", "# enc_output *= non_pad_mask", "\n", "\n", "return", "enc_output", ",", "enc_slf_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.embedding_head.Embedding_self_att.__init__": [[131, 154], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "embedding_head.self_block", "range"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_timestep", ",", "in_planes", ",", "n_head", ",", "n_layers", ",", "embed_dim", "=", "300", ")", ":", "\n", "        ", "super", "(", "Embedding_self_att", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_timestep", "=", "in_timestep", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "# self.attention = MultiHeadAttention(n_head=self.n_head,", "\n", "#                                     d_model=self.in_planes,", "\n", "#                                     d_k=self.in_planes,", "\n", "#                                     d_v=self.in_planes)", "\n", "# self.ffn = PositionwiseFeedForward(d_in=self.in_planes, d_hid=self.in_planes)", "\n", "# self.attention_block = self_block(d_model=self.in_planes,", "\n", "#                                   d_inner=self.in_planes,", "\n", "#                                   n_head=self.n_head,", "\n", "#                                   d_k=self.in_planes,", "\n", "#                                   d_v=self.in_planes)", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "self", ".", "in_timestep", "*", "self", ".", "in_planes", ",", "self", ".", "embed_dim", ")", "\n", "self", ".", "layer_stack", "=", "nn", ".", "ModuleList", "(", "[", "self_block", "(", "d_model", "=", "self", ".", "in_planes", ",", "\n", "d_inner", "=", "self", ".", "in_planes", ",", "\n", "n_head", "=", "self", ".", "n_head", ",", "\n", "d_k", "=", "self", ".", "in_planes", ",", "\n", "d_v", "=", "self", ".", "in_planes", ")", "for", "_", "in", "range", "(", "self", ".", "n_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.models.embedding_head.Embedding_self_att.forward": [[155, 167], ["embedding_head.Embedding_self_att.size", "embedding_head.Embedding_self_att.reshape", "embedding_head.Embedding_self_att.proj", "enc_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", "=", "x", ".", "size", "(", "0", ")", "\n", "# x, att = self.attention(x, x, x)", "\n", "# x = self.ffn(x)", "\n", "\n", "for", "enc_layer", "in", "self", ".", "layer_stack", ":", "\n", "            ", "x", ",", "enc_slf_attn", "=", "enc_layer", "(", "x", ")", "\n", "\n", "", "x", "=", "x", ".", "reshape", "(", "(", "N", ",", "-", "1", ")", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics._normalize_text": [[14, 17], ["text.lower", "filter"], "function", ["None"], ["def", "_normalize_text", "(", "text", ")", ":", "\n", "  ", "text", "=", "''", ".", "join", "(", "filter", "(", "lambda", "x", ":", "x", "in", "(", "string", ".", "digits", "+", "string", ".", "ascii_letters", ")", ",", "text", ")", ")", "\n", "return", "text", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics.get_str_list": [[19, 65], ["utils.to_numpy.size", "len", "utils.to_numpy", "utils.to_numpy", "range", "range", "dataset.char2id.keys", "range", "pred_list.append", "range", "targ_list.append", "utils.to_numpy.dim", "utils.to_numpy.dim", "utils.to_numpy.size", "utils.to_numpy.size", "metrics._normalize_text", "metrics._normalize_text", "pred_list_i.append", "targ_list_i.append"], "function", ["home.repos.pwc.inspect_result.Pay20Y_SEED.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics._normalize_text", "home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics._normalize_text"], ["", "def", "get_str_list", "(", "output", ",", "target", ",", "dataset", "=", "None", ")", ":", "\n", "# label_seq", "\n", "  ", "assert", "output", ".", "dim", "(", ")", "==", "2", "and", "target", ".", "dim", "(", ")", "==", "2", "\n", "\n", "end_label", "=", "dataset", ".", "char2id", "[", "dataset", ".", "EOS", "]", "\n", "unknown_label", "=", "dataset", ".", "char2id", "[", "dataset", ".", "UNKNOWN", "]", "\n", "num_samples", ",", "max_len_labels", "=", "output", ".", "size", "(", ")", "\n", "num_classes", "=", "len", "(", "dataset", ".", "char2id", ".", "keys", "(", ")", ")", "\n", "assert", "num_samples", "==", "target", ".", "size", "(", "0", ")", "and", "max_len_labels", "==", "target", ".", "size", "(", "1", ")", "\n", "output", "=", "to_numpy", "(", "output", ")", "\n", "target", "=", "to_numpy", "(", "target", ")", "\n", "\n", "# list of char list", "\n", "pred_list", ",", "targ_list", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "    ", "pred_list_i", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "max_len_labels", ")", ":", "\n", "      ", "if", "output", "[", "i", ",", "j", "]", "!=", "end_label", ":", "\n", "        ", "if", "output", "[", "i", ",", "j", "]", "!=", "unknown_label", ":", "\n", "          ", "pred_list_i", ".", "append", "(", "dataset", ".", "id2char", "[", "output", "[", "i", ",", "j", "]", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "break", "\n", "", "", "pred_list", ".", "append", "(", "pred_list_i", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "    ", "targ_list_i", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "max_len_labels", ")", ":", "\n", "      ", "if", "target", "[", "i", ",", "j", "]", "!=", "end_label", ":", "\n", "        ", "if", "target", "[", "i", ",", "j", "]", "!=", "unknown_label", ":", "\n", "          ", "targ_list_i", ".", "append", "(", "dataset", ".", "id2char", "[", "target", "[", "i", ",", "j", "]", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "break", "\n", "", "", "targ_list", ".", "append", "(", "targ_list_i", ")", "\n", "\n", "# char list to string", "\n", "# if dataset.lowercase:", "\n", "", "if", "True", ":", "\n", "# pred_list = [''.join(pred).lower() for pred in pred_list]", "\n", "# targ_list = [''.join(targ).lower() for targ in targ_list]", "\n", "    ", "pred_list", "=", "[", "_normalize_text", "(", "pred", ")", "for", "pred", "in", "pred_list", "]", "\n", "targ_list", "=", "[", "_normalize_text", "(", "targ", ")", "for", "targ", "in", "targ_list", "]", "\n", "", "else", ":", "\n", "    ", "pred_list", "=", "[", "''", ".", "join", "(", "pred", ")", "for", "pred", "in", "pred_list", "]", "\n", "targ_list", "=", "[", "''", ".", "join", "(", "targ", ")", "for", "targ", "in", "targ_list", "]", "\n", "\n", "", "return", "pred_list", ",", "targ_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics._lexicon_search": [[67, 74], ["numpy.asarray", "numpy.argmin", "np.asarray.append", "editdistance.eval", "metrics._normalize_text", "metrics._normalize_text"], "function", ["home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics._normalize_text", "home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics._normalize_text"], ["", "def", "_lexicon_search", "(", "lexicon", ",", "word", ")", ":", "\n", "  ", "edit_distances", "=", "[", "]", "\n", "for", "lex_word", "in", "lexicon", ":", "\n", "    ", "edit_distances", ".", "append", "(", "editdistance", ".", "eval", "(", "_normalize_text", "(", "lex_word", ")", ",", "_normalize_text", "(", "word", ")", ")", ")", "\n", "", "edit_distances", "=", "np", ".", "asarray", "(", "edit_distances", ",", "dtype", "=", "np", ".", "int", ")", "\n", "argmin", "=", "np", ".", "argmin", "(", "edit_distances", ")", "\n", "return", "lexicon", "[", "argmin", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics.Accuracy": [[76, 82], ["metrics.get_str_list", "len", "zip", "sum"], "function", ["home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics.get_str_list"], ["", "def", "Accuracy", "(", "output", ",", "target", ",", "dataset", "=", "None", ")", ":", "\n", "  ", "pred_list", ",", "targ_list", "=", "get_str_list", "(", "output", ",", "target", ",", "dataset", ")", "\n", "\n", "acc_list", "=", "[", "(", "pred", "==", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "pred_list", ",", "targ_list", ")", "]", "\n", "accuracy", "=", "1.0", "*", "sum", "(", "acc_list", ")", "/", "len", "(", "acc_list", ")", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics.Accuracy_with_lexicon": [[84, 121], ["metrics.get_str_list", "accuracys.append", "len", "accuracys.append", "accuracys.append", "accuracys.append", "accuracys.append", "accuracys.append", "accuracys.append", "zip", "sum", "len", "len", "metrics._lexicon_search", "len", "len", "len", "metrics._lexicon_search", "len", "len", "len", "metrics._lexicon_search", "len", "zip", "zip", "sum", "zip", "zip", "sum", "zip", "zip", "sum"], "function", ["home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics.get_str_list", "home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics._lexicon_search", "home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics._lexicon_search", "home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics._lexicon_search"], ["", "def", "Accuracy_with_lexicon", "(", "output", ",", "target", ",", "dataset", "=", "None", ",", "file_names", "=", "None", ")", ":", "\n", "  ", "pred_list", ",", "targ_list", "=", "get_str_list", "(", "output", ",", "target", ",", "dataset", ")", "\n", "accuracys", "=", "[", "]", "\n", "\n", "# with no lexicon", "\n", "acc_list", "=", "[", "(", "pred", "==", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "pred_list", ",", "targ_list", ")", "]", "\n", "accuracy", "=", "1.0", "*", "sum", "(", "acc_list", ")", "/", "len", "(", "acc_list", ")", "\n", "accuracys", ".", "append", "(", "accuracy", ")", "\n", "\n", "# lexicon50", "\n", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexicons50", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "    ", "accuracys", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "    ", "refined_pred_list", "=", "[", "_lexicon_search", "(", "dataset", ".", "lexicons50", "[", "file_name", "]", ",", "pred", ")", "for", "file_name", ",", "pred", "in", "zip", "(", "file_names", ",", "pred_list", ")", "]", "\n", "acc_list", "=", "[", "(", "pred", "==", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "refined_pred_list", ",", "targ_list", ")", "]", "\n", "accuracy", "=", "1.0", "*", "sum", "(", "acc_list", ")", "/", "len", "(", "acc_list", ")", "\n", "accuracys", ".", "append", "(", "accuracy", ")", "\n", "\n", "# lexicon1k", "\n", "", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexicons1k", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "    ", "accuracys", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "    ", "refined_pred_list", "=", "[", "_lexicon_search", "(", "dataset", ".", "lexicons1k", "[", "file_name", "]", ",", "pred", ")", "for", "file_name", ",", "pred", "in", "zip", "(", "file_names", ",", "pred_list", ")", "]", "\n", "acc_list", "=", "[", "(", "pred", "==", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "refined_pred_list", ",", "targ_list", ")", "]", "\n", "accuracy", "=", "1.0", "*", "sum", "(", "acc_list", ")", "/", "len", "(", "acc_list", ")", "\n", "accuracys", ".", "append", "(", "accuracy", ")", "\n", "\n", "# lexiconfull", "\n", "", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexiconsfull", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "    ", "accuracys", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "    ", "refined_pred_list", "=", "[", "_lexicon_search", "(", "dataset", ".", "lexiconsfull", "[", "file_name", "]", ",", "pred", ")", "for", "file_name", ",", "pred", "in", "zip", "(", "file_names", ",", "pred_list", ")", "]", "\n", "acc_list", "=", "[", "(", "pred", "==", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "refined_pred_list", ",", "targ_list", ")", "]", "\n", "accuracy", "=", "1.0", "*", "sum", "(", "acc_list", ")", "/", "len", "(", "acc_list", ")", "\n", "accuracys", ".", "append", "(", "accuracy", ")", "\n", "\n", "", "return", "accuracys", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics.EditDistance": [[123, 129], ["metrics.get_str_list", "sum", "editdistance.eval", "zip"], "function", ["home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics.get_str_list"], ["", "def", "EditDistance", "(", "output", ",", "target", ",", "dataset", "=", "None", ")", ":", "\n", "  ", "pred_list", ",", "targ_list", "=", "get_str_list", "(", "output", ",", "target", ",", "dataset", ")", "\n", "\n", "ed_list", "=", "[", "editdistance", ".", "eval", "(", "pred", ",", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "pred_list", ",", "targ_list", ")", "]", "\n", "eds", "=", "sum", "(", "ed_list", ")", "\n", "return", "eds", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics.EditDistance_with_lexicon": [[131, 168], ["metrics.get_str_list", "sum", "eds.append", "editdistance.eval", "eds.append", "sum", "eds.append", "eds.append", "sum", "eds.append", "eds.append", "sum", "eds.append", "zip", "len", "len", "metrics._lexicon_search", "editdistance.eval", "len", "len", "metrics._lexicon_search", "editdistance.eval", "len", "len", "metrics._lexicon_search", "editdistance.eval", "zip", "zip", "zip", "zip", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics.get_str_list", "home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics._lexicon_search", "home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics._lexicon_search", "home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics._lexicon_search"], ["", "def", "EditDistance_with_lexicon", "(", "output", ",", "target", ",", "dataset", "=", "None", ",", "file_names", "=", "None", ")", ":", "\n", "  ", "pred_list", ",", "targ_list", "=", "get_str_list", "(", "output", ",", "target", ",", "dataset", ")", "\n", "eds", "=", "[", "]", "\n", "\n", "# with no lexicon", "\n", "ed_list", "=", "[", "editdistance", ".", "eval", "(", "pred", ",", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "pred_list", ",", "targ_list", ")", "]", "\n", "ed", "=", "sum", "(", "ed_list", ")", "\n", "eds", ".", "append", "(", "ed", ")", "\n", "\n", "# lexicon50", "\n", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexicons50", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "    ", "eds", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "    ", "refined_pred_list", "=", "[", "_lexicon_search", "(", "dataset", ".", "lexicons50", "[", "file_name", "]", ",", "pred", ")", "for", "file_name", ",", "pred", "in", "zip", "(", "file_names", ",", "pred_list", ")", "]", "\n", "ed_list", "=", "[", "editdistance", ".", "eval", "(", "pred", ",", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "refined_pred_list", ",", "targ_list", ")", "]", "\n", "ed", "=", "sum", "(", "ed_list", ")", "\n", "eds", ".", "append", "(", "ed", ")", "\n", "\n", "# lexicon1k", "\n", "", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexicons1k", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "    ", "eds", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "    ", "refined_pred_list", "=", "[", "_lexicon_search", "(", "dataset", ".", "lexicons1k", "[", "file_name", "]", ",", "pred", ")", "for", "file_name", ",", "pred", "in", "zip", "(", "file_names", ",", "pred_list", ")", "]", "\n", "ed_list", "=", "[", "editdistance", ".", "eval", "(", "pred", ",", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "refined_pred_list", ",", "targ_list", ")", "]", "\n", "ed", "=", "sum", "(", "ed_list", ")", "\n", "eds", ".", "append", "(", "ed", ")", "\n", "\n", "# lexiconfull", "\n", "", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexiconsfull", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "    ", "eds", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "    ", "refined_pred_list", "=", "[", "_lexicon_search", "(", "dataset", ".", "lexiconsfull", "[", "file_name", "]", ",", "pred", ")", "for", "file_name", ",", "pred", "in", "zip", "(", "file_names", ",", "pred_list", ")", "]", "\n", "ed_list", "=", "[", "editdistance", ".", "eval", "(", "pred", ",", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "refined_pred_list", ",", "targ_list", ")", "]", "\n", "ed", "=", "sum", "(", "ed_list", ")", "\n", "eds", ".", "append", "(", "ed", ")", "\n", "\n", "", "return", "eds", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics.RecPostProcess": [[170, 184], ["metrics.get_str_list", "output.size", "utils.to_numpy", "enumerate", "min", "math.exp", "score_list.append", "len", "sum", "map"], "function", ["home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.metrics.get_str_list", "home.repos.pwc.inspect_result.Pay20Y_SEED.utils.__init__.to_numpy"], ["", "def", "RecPostProcess", "(", "output", ",", "target", ",", "score", ",", "dataset", "=", "None", ")", ":", "\n", "  ", "pred_list", ",", "targ_list", "=", "get_str_list", "(", "output", ",", "target", ",", "dataset", ")", "\n", "max_len_labels", "=", "output", ".", "size", "(", "1", ")", "\n", "score_list", "=", "[", "]", "\n", "\n", "score", "=", "to_numpy", "(", "score", ")", "\n", "for", "i", ",", "pred", "in", "enumerate", "(", "pred_list", ")", ":", "\n", "    ", "len_pred", "=", "len", "(", "pred", ")", "+", "1", "# eos should be included", "\n", "len_pred", "=", "min", "(", "max_len_labels", ",", "len_pred", ")", "# maybe the predicted string don't include a eos.", "\n", "score_i", "=", "score", "[", "i", ",", ":", "len_pred", "]", "\n", "score_i", "=", "math", ".", "exp", "(", "sum", "(", "map", "(", "math", ".", "log", ",", "score_i", ")", ")", ")", "\n", "score_list", ".", "append", "(", "score_i", ")", "\n", "\n", "", "return", "pred_list", ",", "targ_list", ",", "score_list", "", "", ""]], "home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.__init__.names": [[13, 15], ["sorted", "__factory.keys"], "function", ["None"], []], "home.repos.pwc.inspect_result.Pay20Y_SEED.evaluation_metrics.__init__.factory": [[16, 18], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.Pay20Y_SEED.loss.sequenceCrossEntropyLoss.SequenceCrossEntropyLoss.__init__": [[20, 34], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.__init__"], ["  ", "def", "__init__", "(", "self", ",", "\n", "weight", "=", "None", ",", "\n", "size_average", "=", "True", ",", "\n", "ignore_index", "=", "-", "100", ",", "\n", "sequence_normalize", "=", "False", ",", "\n", "sample_normalize", "=", "True", ")", ":", "\n", "    ", "super", "(", "SequenceCrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "sequence_normalize", "=", "sequence_normalize", "\n", "self", ".", "sample_normalize", "=", "sample_normalize", "\n", "\n", "assert", "(", "sequence_normalize", "and", "sample_normalize", ")", "==", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.loss.sequenceCrossEntropyLoss.SequenceCrossEntropyLoss.forward": [[35, 65], ["sequenceCrossEntropyLoss._assert_no_grad", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "to_contiguous().view.type_as", "max", "to_contiguous().view", "torch.log_softmax", "torch.log_softmax", "to_contiguous().view", "to_contiguous().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "to_contiguous().view.size", "to_contiguous().view.size", "mask[].fill_", "torch.log_softmax.size", "torch.log_softmax.size", "sequenceCrossEntropyLoss.to_contiguous", "sequenceCrossEntropyLoss.to_contiguous", "sequenceCrossEntropyLoss.to_contiguous", "torch.log_softmax.gather", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "to_contiguous().view.long"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss._assert_no_grad", "home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.to_contiguous", "home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.to_contiguous", "home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.to_contiguous"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "length", ")", ":", "\n", "    ", "_assert_no_grad", "(", "target", ")", "\n", "# length to mask", "\n", "batch_size", ",", "def_max_length", "=", "target", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "1", ")", "\n", "mask", "=", "torch", ".", "zeros", "(", "batch_size", ",", "def_max_length", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "      ", "mask", "[", "i", ",", ":", "length", "[", "i", "]", "]", ".", "fill_", "(", "1", ")", "\n", "", "mask", "=", "mask", ".", "type_as", "(", "input", ")", "\n", "# truncate to the same size", "\n", "max_length", "=", "max", "(", "length", ")", "\n", "assert", "max_length", "==", "input", ".", "size", "(", "1", ")", "\n", "target", "=", "target", "[", ":", ",", ":", "max_length", "]", "\n", "mask", "=", "mask", "[", ":", ",", ":", "max_length", "]", "\n", "input", "=", "to_contiguous", "(", "input", ")", ".", "view", "(", "-", "1", ",", "input", ".", "size", "(", "2", ")", ")", "\n", "input", "=", "F", ".", "log_softmax", "(", "input", ",", "dim", "=", "1", ")", "\n", "target", "=", "to_contiguous", "(", "target", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "mask", "=", "to_contiguous", "(", "mask", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "output", "=", "-", "input", ".", "gather", "(", "1", ",", "target", ".", "long", "(", ")", ")", "*", "mask", "\n", "# if self.size_average:", "\n", "#   output = torch.sum(output) / torch.sum(mask)", "\n", "# elif self.reduce:", "\n", "#   output = torch.sum(output)", "\n", "##", "\n", "output", "=", "torch", ".", "sum", "(", "output", ")", "\n", "if", "self", ".", "sequence_normalize", ":", "\n", "      ", "output", "=", "output", "/", "torch", ".", "sum", "(", "mask", ")", "\n", "", "if", "self", ".", "sample_normalize", ":", "\n", "      ", "output", "=", "output", "/", "batch_size", "\n", "\n", "", "return", "output", "", "", "", ""]], "home.repos.pwc.inspect_result.Pay20Y_SEED.loss.sequenceCrossEntropyLoss.to_contiguous": [[8, 13], ["tensor.is_contiguous", "tensor.contiguous"], "function", ["None"], ["def", "to_contiguous", "(", "tensor", ")", ":", "\n", "  ", "if", "tensor", ".", "is_contiguous", "(", ")", ":", "\n", "    ", "return", "tensor", "\n", "", "else", ":", "\n", "    ", "return", "tensor", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.loss.sequenceCrossEntropyLoss._assert_no_grad": [[14, 17], ["None"], "function", ["None"], ["", "", "def", "_assert_no_grad", "(", "variable", ")", ":", "\n", "  ", "assert", "not", "variable", ".", "requires_grad", ",", "\"nn criterions don't compute the gradient w.r.t. targets - please \"", "\"mark these variables as not requiring gradients\"", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.__init__": [[20, 40], ["torch.nn.Module.__init__", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.CosineEmbeddingLoss", "torch.nn.CosineEmbeddingLoss", "torch.nn.CosineEmbeddingLoss", "torch.nn.CosineEmbeddingLoss"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "weight", "=", "None", ",", "\n", "size_average", "=", "True", ",", "\n", "ignore_index", "=", "-", "100", ",", "\n", "sequence_normalize", "=", "False", ",", "\n", "sample_normalize", "=", "True", ",", "\n", "loss_func", "=", "'cosin'", ")", ":", "\n", "        ", "super", "(", "EmbeddingRegressionLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "sequence_normalize", "=", "sequence_normalize", "\n", "self", ".", "sample_normalize", "=", "sample_normalize", "\n", "# self.loss_func = torch.nn.MSELoss()", "\n", "self", ".", "is_cosin_loss", "=", "False", "\n", "if", "loss_func", "==", "'smooth_l1'", ":", "\n", "            ", "self", ".", "loss_func", "=", "torch", ".", "nn", ".", "SmoothL1Loss", "(", ")", "\n", "", "elif", "loss_func", "==", "'cosin'", ":", "\n", "            ", "self", ".", "loss_func", "=", "torch", ".", "nn", ".", "CosineEmbeddingLoss", "(", ")", "\n", "self", ".", "is_cosin_loss", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.forward": [[41, 51], ["embeddingRegressionLoss._assert_no_grad", "embeddingRegressionLoss.EmbeddingRegressionLoss.loss_func", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "embeddingRegressionLoss.EmbeddingRegressionLoss.loss_func", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "input.size"], "methods", ["home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss._assert_no_grad"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "_assert_no_grad", "(", "target", ")", "\n", "\n", "if", "not", "self", ".", "is_cosin_loss", ":", "\n", "            ", "Loss", "=", "self", ".", "loss_func", "(", "input", ",", "target", ")", "\n", "", "else", ":", "\n", "            ", "label_target", "=", "torch", ".", "ones", "(", "input", ".", "size", "(", "0", ")", ")", ".", "cuda", "(", ")", "\n", "Loss", "=", "self", ".", "loss_func", "(", "input", ",", "target", ",", "label_target", ")", "\n", "\n", "", "return", "Loss", "\n", "", "def", "logistic_dot_loss", "(", "self", ",", "input", ",", "target", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.EmbeddingRegressionLoss.logistic_dot_loss": [[51, 59], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm.diagonal", "torch.mm.diagonal", "torch.log", "torch.log", "torch.log", "torch.log", "target.t", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "logistic_dot_loss", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "dot_result", "=", "torch", ".", "mm", "(", "input", ",", "target", ".", "t", "(", ")", ")", "\n", "_diagaonal", "=", "dot_result", ".", "diagonal", "(", ")", "\n", "logistic_loss", "=", "torch", ".", "log", "(", "1", "+", "torch", ".", "exp", "(", "-", "1", "*", "_diagaonal", ")", ")", "\n", "\n", "# logistic_loss = torch.mean(logistic_loss, dim=0)", "\n", "\n", "return", "logistic_loss", "\n", "# _trace = torch.trace(dot_result)", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss.to_contiguous": [[8, 13], ["tensor.is_contiguous", "tensor.contiguous"], "function", ["None"], ["def", "to_contiguous", "(", "tensor", ")", ":", "\n", "  ", "if", "tensor", ".", "is_contiguous", "(", ")", ":", "\n", "    ", "return", "tensor", "\n", "", "else", ":", "\n", "    ", "return", "tensor", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Pay20Y_SEED.loss.embeddingRegressionLoss._assert_no_grad": [[14, 17], ["None"], "function", ["None"], ["", "", "def", "_assert_no_grad", "(", "variable", ")", ":", "\n", "  ", "assert", "not", "variable", ".", "requires_grad", ",", "\"nn criterions don't compute the gradient w.r.t. targets - please \"", "\"mark these variables as not requiring gradients\"", "\n"]]}