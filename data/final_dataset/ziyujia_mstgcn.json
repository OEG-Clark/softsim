{"home.repos.pwc.inspect_result.ziyujia_mstgcn.None.preprocess.read_psg": [[13, 21], ["scipy.loadmat", "numpy.concatenate", "os.path.join", "np.concatenate.append", "numpy.expand_dims", "scipy.signal.resample"], "function", ["None"], ["def", "read_psg", "(", "path_Extracted", ",", "sub_id", ",", "channels", ",", "resample", "=", "3000", ")", ":", "\n", "    ", "psg", "=", "scio", ".", "loadmat", "(", "path", ".", "join", "(", "path_Extracted", ",", "'subject%d.mat'", "%", "(", "sub_id", ")", ")", ")", "\n", "psg_use", "=", "[", "]", "\n", "for", "c", "in", "channels", ":", "\n", "        ", "psg_use", ".", "append", "(", "\n", "np", ".", "expand_dims", "(", "signal", ".", "resample", "(", "psg", "[", "c", "]", ",", "resample", ",", "axis", "=", "-", "1", ")", ",", "1", ")", ")", "\n", "", "psg_use", "=", "np", ".", "concatenate", "(", "psg_use", ",", "axis", "=", "1", ")", "\n", "return", "psg_use", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.None.preprocess.read_label": [[23, 34], ["numpy.array", "open", "f.readline", "os.path.join", "f.readline.replace", "label.append", "f.readline", "int"], "function", ["None"], ["", "def", "read_label", "(", "path_RawData", ",", "sub_id", ",", "ignore", "=", "30", ")", ":", "\n", "    ", "label", "=", "[", "]", "\n", "with", "open", "(", "path", ".", "join", "(", "path_RawData", ",", "'%d/%d_1.txt'", "%", "(", "sub_id", ",", "sub_id", ")", ")", ")", "as", "f", ":", "\n", "        ", "s", "=", "f", ".", "readline", "(", ")", "\n", "while", "True", ":", "\n", "            ", "a", "=", "s", ".", "replace", "(", "'\\n'", ",", "''", ")", "\n", "label", ".", "append", "(", "int", "(", "a", ")", ")", "\n", "s", "=", "f", ".", "readline", "(", ")", "\n", "if", "s", "==", "''", "or", "s", "==", "'\\n'", ":", "\n", "                ", "break", "\n", "", "", "", "return", "np", ".", "array", "(", "label", "[", ":", "-", "ignore", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.Utils.ReadConfig": [[12, 21], ["configparser.ConfigParser", "print", "configparser.ConfigParser.read"], "function", ["None"], ["def", "ReadConfig", "(", "configfile", ")", ":", "\n", "    ", "config", "=", "configparser", ".", "ConfigParser", "(", ")", "\n", "print", "(", "'Config: '", ",", "configfile", ")", "\n", "config", ".", "read", "(", "configfile", ")", "\n", "cfgPath", "=", "config", "[", "'path'", "]", "\n", "cfgFeat", "=", "config", "[", "'feature'", "]", "\n", "cfgTrain", "=", "config", "[", "'train'", "]", "\n", "cfgModel", "=", "config", "[", "'model'", "]", "\n", "return", "cfgPath", ",", "cfgFeat", ",", "cfgTrain", ",", "cfgModel", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.Utils.AddContext_MultiSub": [[25, 49], ["Fold_Num.copy", "numpy.delete", "numpy.concatenate", "numpy.sort", "numpy.zeros", "range", "numpy.delete", "numpy.delete", "numpy.cumsum", "range"], "function", ["None"], ["", "def", "AddContext_MultiSub", "(", "x", ",", "y", ",", "Fold_Num", ",", "context", ",", "i", ")", ":", "\n", "    ", "'''\n    input:\n        x       : [N,V,F];\n        y       : [N,C]; (C:num_of_classes)\n        Fold_Num: [kfold];\n        context : int;\n        i       : int (i-th fold)\n    return:\n        x with contexts. [N',V,F]\n    '''", "\n", "cut", "=", "context", "//", "2", "\n", "fold", "=", "Fold_Num", ".", "copy", "(", ")", "\n", "fold", "=", "np", ".", "delete", "(", "fold", ",", "-", "1", ")", "\n", "id_del", "=", "np", ".", "concatenate", "(", "[", "np", ".", "cumsum", "(", "fold", ")", "-", "i", "for", "i", "in", "range", "(", "1", ",", "context", ")", "]", ")", "\n", "id_del", "=", "np", ".", "sort", "(", "id_del", ")", "\n", "\n", "x_c", "=", "np", ".", "zeros", "(", "[", "x", ".", "shape", "[", "0", "]", "-", "2", "*", "cut", ",", "context", ",", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", "]", ",", "dtype", "=", "float", ")", "\n", "for", "j", "in", "range", "(", "cut", ",", "x", ".", "shape", "[", "0", "]", "-", "cut", ")", ":", "\n", "        ", "x_c", "[", "j", "-", "cut", "]", "=", "x", "[", "j", "-", "cut", ":", "j", "+", "cut", "+", "1", "]", "\n", "\n", "", "x_c", "=", "np", ".", "delete", "(", "x_c", ",", "id_del", ",", "axis", "=", "0", ")", "\n", "y_c", "=", "np", ".", "delete", "(", "y", "[", "cut", ":", "-", "cut", "]", ",", "id_del", ",", "axis", "=", "0", ")", "\n", "return", "x_c", ",", "y_c", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.Utils.AddContext_SingleSub": [[50, 57], ["int", "numpy.zeros", "range"], "function", ["None"], ["", "def", "AddContext_SingleSub", "(", "x", ",", "y", ",", "context", ")", ":", "\n", "    ", "cut", "=", "int", "(", "context", "/", "2", ")", "\n", "x_c", "=", "np", ".", "zeros", "(", "[", "x", ".", "shape", "[", "0", "]", "-", "2", "*", "cut", ",", "context", ",", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", "]", ",", "dtype", "=", "float", ")", "\n", "for", "i", "in", "range", "(", "cut", ",", "x", ".", "shape", "[", "0", "]", "-", "cut", ")", ":", "\n", "        ", "x_c", "[", "i", "-", "cut", "]", "=", "x", "[", "i", "-", "cut", ":", "i", "+", "cut", "+", "1", "]", "\n", "", "y_c", "=", "y", "[", "cut", ":", "-", "cut", "]", "\n", "return", "x_c", ",", "y_c", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.Utils.Instantiation_optim": [[61, 71], ["keras.optimizers.Adam", "keras.optimizers.RMSprop", "keras.optimizers.SGD"], "function", ["None"], ["", "def", "Instantiation_optim", "(", "name", ",", "lr", ")", ":", "\n", "    ", "if", "name", "==", "\"adam\"", ":", "\n", "        ", "opt", "=", "keras", ".", "optimizers", ".", "Adam", "(", "lr", "=", "lr", ")", "\n", "", "elif", "name", "==", "\"RMSprop\"", ":", "\n", "        ", "opt", "=", "keras", ".", "optimizers", ".", "RMSprop", "(", "lr", "=", "lr", ")", "\n", "", "elif", "name", "==", "\"SGD\"", ":", "\n", "        ", "opt", "=", "keras", ".", "optimizers", ".", "SGD", "(", "lr", "=", "lr", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", ",", "'Config: check optimizer, may be not implemented.'", "\n", "", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.Utils.Instantiation_regularizer": [[72, 82], ["keras.regularizers.l1_l2", "keras.regularizers.l1", "keras.regularizers.l2"], "function", ["None"], ["", "def", "Instantiation_regularizer", "(", "l1", ",", "l2", ")", ":", "\n", "    ", "if", "l1", "!=", "0", "and", "l2", "!=", "0", ":", "\n", "        ", "regularizer", "=", "keras", ".", "regularizers", ".", "l1_l2", "(", "l1", "=", "l1", ",", "l2", "=", "l2", ")", "\n", "", "elif", "l1", "!=", "0", "and", "l2", "==", "0", ":", "\n", "        ", "regularizer", "=", "keras", ".", "regularizers", ".", "l1", "(", "l1", ")", "\n", "", "elif", "l1", "==", "0", "and", "l2", "!=", "0", ":", "\n", "        ", "regularizer", "=", "keras", ".", "regularizers", ".", "l2", "(", "l2", ")", "\n", "", "else", ":", "\n", "        ", "regularizer", "=", "None", "\n", "", "return", "regularizer", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.Utils.PrintScore": [[86, 119], ["sklearn.metrics.f1_score", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "open", "sklearn.metrics.classification_report", "sklearn.metrics.confusion_matrix", "sklearn.metrics.accuracy_score", "sklearn.metrics.cohen_kappa_score", "sklearn.metrics.f1_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "open.close", "sklearn.metrics.accuracy_score", "sklearn.metrics.f1_score", "sklearn.metrics.cohen_kappa_score"], "function", ["None"], ["", "def", "PrintScore", "(", "true", ",", "pred", ",", "savePath", "=", "None", ",", "average", "=", "'macro'", ")", ":", "\n", "# savePath=None -> console, else to Result.txt", "\n", "    ", "if", "savePath", "==", "None", ":", "\n", "        ", "saveFile", "=", "None", "\n", "", "else", ":", "\n", "        ", "saveFile", "=", "open", "(", "savePath", "+", "\"Result.txt\"", ",", "'a+'", ")", "\n", "# Main scores", "\n", "", "F1", "=", "metrics", ".", "f1_score", "(", "true", ",", "pred", ",", "average", "=", "None", ")", "\n", "print", "(", "\"Main scores:\"", ")", "\n", "print", "(", "'Acc\\tF1S\\tKappa\\tF1_W\\tF1_N1\\tF1_N2\\tF1_N3\\tF1_R'", ",", "file", "=", "saveFile", ")", "\n", "print", "(", "'%.4f\\t%.4f\\t%.4f\\t%.4f\\t%.4f\\t%.4f\\t%.4f\\t%.4f'", "%", "\n", "(", "metrics", ".", "accuracy_score", "(", "true", ",", "pred", ")", ",", "\n", "metrics", ".", "f1_score", "(", "true", ",", "pred", ",", "average", "=", "average", ")", ",", "\n", "metrics", ".", "cohen_kappa_score", "(", "true", ",", "pred", ")", ",", "\n", "F1", "[", "0", "]", ",", "F1", "[", "1", "]", ",", "F1", "[", "2", "]", ",", "F1", "[", "3", "]", ",", "F1", "[", "4", "]", ")", ",", "\n", "file", "=", "saveFile", ")", "\n", "# Classification report", "\n", "print", "(", "\"\\nClassification report:\"", ",", "file", "=", "saveFile", ")", "\n", "print", "(", "metrics", ".", "classification_report", "(", "true", ",", "pred", ",", "\n", "target_names", "=", "[", "'Wake'", ",", "'N1'", ",", "'N2'", ",", "'N3'", ",", "'REM'", "]", ",", "\n", "digits", "=", "4", ")", ",", "file", "=", "saveFile", ")", "\n", "# Confusion matrix", "\n", "print", "(", "'Confusion matrix:'", ",", "file", "=", "saveFile", ")", "\n", "print", "(", "metrics", ".", "confusion_matrix", "(", "true", ",", "pred", ")", ",", "file", "=", "saveFile", ")", "\n", "# Overall scores", "\n", "print", "(", "'\\n    Accuracy\\t'", ",", "metrics", ".", "accuracy_score", "(", "true", ",", "pred", ")", ",", "file", "=", "saveFile", ")", "\n", "print", "(", "' Cohen Kappa\\t'", ",", "metrics", ".", "cohen_kappa_score", "(", "true", ",", "pred", ")", ",", "file", "=", "saveFile", ")", "\n", "print", "(", "'    F1-Score\\t'", ",", "metrics", ".", "f1_score", "(", "true", ",", "pred", ",", "average", "=", "average", ")", ",", "'\\tAverage ='", ",", "average", ",", "file", "=", "saveFile", ")", "\n", "print", "(", "'   Precision\\t'", ",", "metrics", ".", "precision_score", "(", "true", ",", "pred", ",", "average", "=", "average", ")", ",", "'\\tAverage ='", ",", "average", ",", "file", "=", "saveFile", ")", "\n", "print", "(", "'      Recall\\t'", ",", "metrics", ".", "recall_score", "(", "true", ",", "pred", ",", "average", "=", "average", ")", ",", "'\\tAverage ='", ",", "average", ",", "file", "=", "saveFile", ")", "\n", "if", "savePath", "!=", "None", ":", "\n", "        ", "saveFile", ".", "close", "(", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.Utils.ConfusionMatrix": [[123, 154], ["sklearn.metrics.confusion_matrix", "matplotlib.subplots", "ax.imshow", "ax.figure.colorbar", "ax.set", "matplotlib.setp", "range", "fig.tight_layout", "matplotlib.savefig", "matplotlib.show", "metrics.confusion_matrix.astype", "ax.get_xticklabels", "metrics.confusion_matrix.max", "range", "metrics.confusion_matrix.sum", "numpy.arange", "numpy.arange", "ax.text", "format", "format"], "function", ["None"], ["", "def", "ConfusionMatrix", "(", "y_true", ",", "y_pred", ",", "classes", ",", "savePath", ",", "title", "=", "None", ",", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", ":", "\n", "    ", "if", "not", "title", ":", "\n", "        ", "title", "=", "'Confusion matrix'", "\n", "# Compute confusion matrix", "\n", "", "cm", "=", "metrics", ".", "confusion_matrix", "(", "y_true", ",", "y_pred", ")", "\n", "cm_n", "=", "cm", "\n", "cm", "=", "cm", ".", "astype", "(", "'float'", ")", "/", "cm", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "5", ",", "4", ")", ")", "\n", "im", "=", "ax", ".", "imshow", "(", "cm", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ")", "\n", "ax", ".", "figure", ".", "colorbar", "(", "im", ",", "ax", "=", "ax", ")", "\n", "# We want to show all ticks...", "\n", "ax", ".", "set", "(", "xticks", "=", "np", ".", "arange", "(", "cm", ".", "shape", "[", "1", "]", ")", ",", "\n", "yticks", "=", "np", ".", "arange", "(", "cm", ".", "shape", "[", "0", "]", ")", ",", "\n", "# ... and label them with the respective list entries", "\n", "xticklabels", "=", "classes", ",", "yticklabels", "=", "classes", ",", "\n", "title", "=", "title", ",", "\n", "ylabel", "=", "'True label'", ",", "\n", "xlabel", "=", "'Predicted label'", ")", "\n", "# Rotate the tick labels and set their alignment.", "\n", "plt", ".", "setp", "(", "ax", ".", "get_xticklabels", "(", ")", ",", "rotation_mode", "=", "\"anchor\"", ")", "\n", "# Loop over data dimensions and create text annotations.", "\n", "thresh", "=", "cm", ".", "max", "(", ")", "/", "2.", "\n", "for", "i", "in", "range", "(", "cm", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "cm", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "ax", ".", "text", "(", "j", ",", "i", ",", "format", "(", "cm", "[", "i", ",", "j", "]", "*", "100", ",", "'.2f'", ")", "+", "'%\\n'", "+", "format", "(", "cm_n", "[", "i", ",", "j", "]", ",", "'d'", ")", ",", "\n", "ha", "=", "\"center\"", ",", "va", "=", "\"center\"", ",", "\n", "color", "=", "\"white\"", "if", "cm", "[", "i", ",", "j", "]", ">", "thresh", "else", "\"black\"", ")", "\n", "", "", "fig", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "savePath", "+", "title", "+", "\".png\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.Utils.VariationCurve": [[158, 169], ["matplotlib.figure", "matplotlib.plot", "matplotlib.plot", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.savefig", "matplotlib.show", "range", "range", "len", "len"], "function", ["None"], ["", "def", "VariationCurve", "(", "fit", ",", "val", ",", "yLabel", ",", "savePath", ",", "figsize", "=", "(", "9", ",", "6", ")", ")", ":", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "\n", "plt", ".", "plot", "(", "range", "(", "1", ",", "len", "(", "fit", ")", "+", "1", ")", ",", "fit", ",", "label", "=", "'Train'", ")", "\n", "plt", ".", "plot", "(", "range", "(", "1", ",", "len", "(", "val", ")", "+", "1", ")", ",", "val", ",", "label", "=", "'Val'", ")", "\n", "plt", ".", "title", "(", "'Model '", "+", "yLabel", ")", "\n", "plt", ".", "xlabel", "(", "'Epochs'", ")", "\n", "plt", ".", "ylabel", "(", "yLabel", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "savefig", "(", "savePath", "+", "'Model_'", "+", "yLabel", "+", "'.png'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.Utils.scaled_Laplacian": [[172, 187], ["numpy.diag", "numpy.sum", "numpy.identity", "scipy.sparse.linalg.eigs"], "function", ["None"], ["", "def", "scaled_Laplacian", "(", "W", ")", ":", "\n", "    ", "'''\n    compute \\tilde{L}\n    ----------\n    Parameters\n    W: np.ndarray, shape is (N, N), N is the num of vertices\n    ----------\n    Returns\n    scaled_Laplacian: np.ndarray, shape (N, N)\n    '''", "\n", "assert", "W", ".", "shape", "[", "0", "]", "==", "W", ".", "shape", "[", "1", "]", "\n", "D", "=", "np", ".", "diag", "(", "np", ".", "sum", "(", "W", ",", "axis", "=", "1", ")", ")", "\n", "L", "=", "D", "-", "W", "\n", "lambda_max", "=", "eigs", "(", "L", ",", "k", "=", "1", ",", "which", "=", "'LR'", ")", "[", "0", "]", ".", "real", "\n", "return", "(", "2", "*", "L", ")", "/", "lambda_max", "-", "np", ".", "identity", "(", "W", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.Utils.cheb_polynomial": [[191, 210], ["numpy.array", "range", "numpy.append", "numpy.identity", "L_tilde.copy"], "function", ["None"], ["", "def", "cheb_polynomial", "(", "L_tilde", ",", "K", ")", ":", "\n", "    ", "'''\n    compute a list of chebyshev polynomials from T_0 to T_{K-1}\n    ----------\n    Parameters\n    L_tilde: scaled Laplacian, np.ndarray, shape (N, N)\n    K: the maximum order of chebyshev polynomials\n    ----------\n    Returns\n    cheb_polynomials: list(np.ndarray), length: K, from T_0 to T_{K-1}\n    '''", "\n", "N", "=", "L_tilde", ".", "shape", "[", "0", "]", "\n", "cheb_polynomials", "=", "np", ".", "array", "(", "[", "np", ".", "identity", "(", "N", ")", ",", "L_tilde", ".", "copy", "(", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "2", ",", "K", ")", ":", "\n", "        ", "cheb_polynomials", "=", "np", ".", "append", "(", "\n", "cheb_polynomials", ",", "\n", "[", "2", "*", "L_tilde", "*", "cheb_polynomials", "[", "i", "-", "1", "]", "-", "cheb_polynomials", "[", "i", "-", "2", "]", "]", ",", "\n", "axis", "=", "0", ")", "\n", "", "return", "cheb_polynomials", "\n", "", ""]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.TemporalAttention.__init__": [[32, 34], ["keras.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.ziyujia_mstgcn.model.DataGenerator.DominGenerator.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TemporalAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.TemporalAttention.build": [[35, 58], ["MSTGCN.TemporalAttention.add_weight", "MSTGCN.TemporalAttention.add_weight", "MSTGCN.TemporalAttention.add_weight", "MSTGCN.TemporalAttention.add_weight", "MSTGCN.TemporalAttention.add_weight", "super().build"], "methods", ["home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.GradientReversal.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "_", ",", "num_of_timesteps", ",", "num_of_vertices", ",", "num_of_features", "=", "input_shape", "\n", "self", ".", "U_1", "=", "self", ".", "add_weight", "(", "name", "=", "'U_1'", ",", "\n", "shape", "=", "(", "num_of_vertices", ",", "1", ")", ",", "\n", "initializer", "=", "'uniform'", ",", "\n", "trainable", "=", "True", ")", "\n", "self", ".", "U_2", "=", "self", ".", "add_weight", "(", "name", "=", "'U_2'", ",", "\n", "shape", "=", "(", "num_of_features", ",", "num_of_vertices", ")", ",", "\n", "initializer", "=", "'uniform'", ",", "\n", "trainable", "=", "True", ")", "\n", "self", ".", "U_3", "=", "self", ".", "add_weight", "(", "name", "=", "'U_3'", ",", "\n", "shape", "=", "(", "num_of_features", ",", ")", ",", "\n", "initializer", "=", "'uniform'", ",", "\n", "trainable", "=", "True", ")", "\n", "self", ".", "b_e", "=", "self", ".", "add_weight", "(", "name", "=", "'b_e'", ",", "\n", "shape", "=", "(", "1", ",", "num_of_timesteps", ",", "num_of_timesteps", ")", ",", "\n", "initializer", "=", "'uniform'", ",", "\n", "trainable", "=", "True", ")", "\n", "self", ".", "V_e", "=", "self", ".", "add_weight", "(", "name", "=", "'V_e'", ",", "\n", "shape", "=", "(", "num_of_timesteps", ",", "num_of_timesteps", ")", ",", "\n", "initializer", "=", "'uniform'", ",", "\n", "trainable", "=", "True", ")", "\n", "super", "(", "TemporalAttention", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.TemporalAttention.call": [[59, 81], ["keras.backend.dot", "tensorflow.reshape", "keras.backend.dot", "keras.backend.dot", "tensorflow.transpose", "keras.backend.batch_dot", "tensorflow.transpose", "keras.backend.exp", "tensorflow.transpose", "tensorflow.transpose", "keras.backend.dot", "keras.backend.max", "keras.backend.sum", "tensorflow.transpose", "tensorflow.shape", "keras.backend.sigmoid"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "T", ",", "V", ",", "F", "=", "x", ".", "shape", "\n", "\n", "# shape of lhs is (batch_size, V, T)", "\n", "lhs", "=", "K", ".", "dot", "(", "tf", ".", "transpose", "(", "x", ",", "perm", "=", "[", "0", ",", "1", ",", "3", ",", "2", "]", ")", ",", "self", ".", "U_1", ")", "\n", "lhs", "=", "tf", ".", "reshape", "(", "lhs", ",", "[", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "T", ",", "F", "]", ")", "\n", "lhs", "=", "K", ".", "dot", "(", "lhs", ",", "self", ".", "U_2", ")", "\n", "\n", "# shape of rhs is (batch_size, T, V)", "\n", "rhs", "=", "K", ".", "dot", "(", "self", ".", "U_3", ",", "tf", ".", "transpose", "(", "x", ",", "perm", "=", "[", "2", ",", "0", ",", "3", ",", "1", "]", ")", ")", "\n", "rhs", "=", "tf", ".", "transpose", "(", "rhs", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "# shape of product is (batch_size, V, V)", "\n", "product", "=", "K", ".", "batch_dot", "(", "lhs", ",", "rhs", ")", "\n", "\n", "S", "=", "tf", ".", "transpose", "(", "K", ".", "dot", "(", "self", ".", "V_e", ",", "tf", ".", "transpose", "(", "K", ".", "sigmoid", "(", "product", "+", "self", ".", "b_e", ")", ",", "perm", "=", "[", "1", ",", "2", ",", "0", "]", ")", ")", ",", "perm", "=", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "\n", "# normalization", "\n", "S", "=", "S", "-", "K", ".", "max", "(", "S", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "exp", "=", "K", ".", "exp", "(", "S", ")", "\n", "S_normalized", "=", "exp", "/", "K", ".", "sum", "(", "exp", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "return", "S_normalized", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.TemporalAttention.compute_output_shape": [[82, 84], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "1", "]", ",", "input_shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.SpatialAttention.__init__": [[93, 95], ["keras.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.ziyujia_mstgcn.model.DataGenerator.DominGenerator.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SpatialAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.SpatialAttention.build": [[96, 119], ["MSTGCN.SpatialAttention.add_weight", "MSTGCN.SpatialAttention.add_weight", "MSTGCN.SpatialAttention.add_weight", "MSTGCN.SpatialAttention.add_weight", "MSTGCN.SpatialAttention.add_weight", "super().build"], "methods", ["home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.GradientReversal.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "_", ",", "num_of_timesteps", ",", "num_of_vertices", ",", "num_of_features", "=", "input_shape", "\n", "self", ".", "W_1", "=", "self", ".", "add_weight", "(", "name", "=", "'W_1'", ",", "\n", "shape", "=", "(", "num_of_timesteps", ",", "1", ")", ",", "\n", "initializer", "=", "'uniform'", ",", "\n", "trainable", "=", "True", ")", "\n", "self", ".", "W_2", "=", "self", ".", "add_weight", "(", "name", "=", "'W_2'", ",", "\n", "shape", "=", "(", "num_of_features", ",", "num_of_timesteps", ")", ",", "\n", "initializer", "=", "'uniform'", ",", "\n", "trainable", "=", "True", ")", "\n", "self", ".", "W_3", "=", "self", ".", "add_weight", "(", "name", "=", "'W_3'", ",", "\n", "shape", "=", "(", "num_of_features", ",", ")", ",", "\n", "initializer", "=", "'uniform'", ",", "\n", "trainable", "=", "True", ")", "\n", "self", ".", "b_s", "=", "self", ".", "add_weight", "(", "name", "=", "'b_s'", ",", "\n", "shape", "=", "(", "1", ",", "num_of_vertices", ",", "num_of_vertices", ")", ",", "\n", "initializer", "=", "'uniform'", ",", "\n", "trainable", "=", "True", ")", "\n", "self", ".", "V_s", "=", "self", ".", "add_weight", "(", "name", "=", "'V_s'", ",", "\n", "shape", "=", "(", "num_of_vertices", ",", "num_of_vertices", ")", ",", "\n", "initializer", "=", "'uniform'", ",", "\n", "trainable", "=", "True", ")", "\n", "super", "(", "SpatialAttention", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.SpatialAttention.call": [[120, 142], ["keras.backend.dot", "tensorflow.reshape", "keras.backend.dot", "keras.backend.dot", "tensorflow.transpose", "keras.backend.batch_dot", "tensorflow.transpose", "keras.backend.exp", "tensorflow.transpose", "tensorflow.transpose", "keras.backend.dot", "keras.backend.max", "keras.backend.sum", "tensorflow.transpose", "tensorflow.shape", "keras.backend.sigmoid"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "T", ",", "V", ",", "F", "=", "x", ".", "shape", "\n", "\n", "# shape of lhs is (batch_size, V, T)", "\n", "lhs", "=", "K", ".", "dot", "(", "tf", ".", "transpose", "(", "x", ",", "perm", "=", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", ",", "self", ".", "W_1", ")", "\n", "lhs", "=", "tf", ".", "reshape", "(", "lhs", ",", "[", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "V", ",", "F", "]", ")", "\n", "lhs", "=", "K", ".", "dot", "(", "lhs", ",", "self", ".", "W_2", ")", "\n", "\n", "# shape of rhs is (batch_size, T, V)", "\n", "rhs", "=", "K", ".", "dot", "(", "self", ".", "W_3", ",", "tf", ".", "transpose", "(", "x", ",", "perm", "=", "[", "1", ",", "0", ",", "3", ",", "2", "]", ")", ")", "\n", "rhs", "=", "tf", ".", "transpose", "(", "rhs", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "# shape of product is (batch_size, V, V)", "\n", "product", "=", "K", ".", "batch_dot", "(", "lhs", ",", "rhs", ")", "\n", "\n", "S", "=", "tf", ".", "transpose", "(", "K", ".", "dot", "(", "self", ".", "V_s", ",", "tf", ".", "transpose", "(", "K", ".", "sigmoid", "(", "product", "+", "self", ".", "b_s", ")", ",", "perm", "=", "[", "1", ",", "2", ",", "0", "]", ")", ")", ",", "perm", "=", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "\n", "# normalization", "\n", "S", "=", "S", "-", "K", ".", "max", "(", "S", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "exp", "=", "K", ".", "exp", "(", "S", ")", "\n", "S_normalized", "=", "exp", "/", "K", ".", "sum", "(", "exp", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "return", "S_normalized", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.SpatialAttention.compute_output_shape": [[143, 145], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "2", "]", ",", "input_shape", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.Graph_Learn.__init__": [[180, 185], ["tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "keras.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.ziyujia_mstgcn.model.DataGenerator.DominGenerator.__init__"], ["def", "__init__", "(", "self", ",", "alpha", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "S", "=", "tf", ".", "convert_to_tensor", "(", "[", "[", "[", "0.0", "]", "]", "]", ")", "# similar to placeholder", "\n", "self", ".", "diff", "=", "tf", ".", "convert_to_tensor", "(", "[", "[", "[", "[", "0.0", "]", "]", "]", "]", ")", "# similar to placeholder", "\n", "super", "(", "Graph_Learn", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.Graph_Learn.build": [[186, 196], ["MSTGCN.Graph_Learn.add_weight", "MSTGCN.Graph_Learn.add_loss", "MSTGCN.Graph_Learn.add_loss", "super().build", "MSTGCN.F_norm_loss", "MSTGCN.diff_loss"], "methods", ["home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.GradientReversal.build", "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.F_norm_loss", "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.diff_loss"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "_", ",", "num_of_timesteps", ",", "num_of_vertices", ",", "num_of_features", "=", "input_shape", "\n", "self", ".", "a", "=", "self", ".", "add_weight", "(", "name", "=", "'a'", ",", "\n", "shape", "=", "(", "num_of_features", ",", "1", ")", ",", "\n", "initializer", "=", "'uniform'", ",", "\n", "trainable", "=", "True", ")", "\n", "# add loss L_{graph_learning} in the layer", "\n", "self", ".", "add_loss", "(", "F_norm_loss", "(", "self", ".", "S", ",", "self", ".", "alpha", ")", ")", "\n", "self", ".", "add_loss", "(", "diff_loss", "(", "self", ".", "diff", ",", "self", ".", "S", ")", ")", "\n", "super", "(", "Graph_Learn", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.Graph_Learn.call": [[197, 220], ["range", "tensorflow.transpose", "keras.backend.mean", "tensorflow.shape", "keras.backend.exp", "keras.backend.abs", "tensorflow.transpose.append", "keras.backend.mean", "tensorflow.convert_to_tensor", "tensorflow.transpose", "keras.backend.reshape", "tensorflow.transpose", "int", "tensorflow.broadcast_to", "keras.backend.dot", "tensorflow.broadcast_to", "tensorflow.transpose", "keras.backend.sum", "keras.backend.abs"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "T", ",", "V", ",", "F", "=", "x", ".", "shape", "\n", "N", "=", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", "\n", "\n", "outputs", "=", "[", "]", "\n", "diff_tmp", "=", "0", "\n", "for", "time_step", "in", "range", "(", "T", ")", ":", "\n", "# shape: (N,V,F) use the current slice", "\n", "            ", "xt", "=", "x", "[", ":", ",", "time_step", ",", ":", ",", ":", "]", "\n", "# shape: (N,V,V)", "\n", "diff", "=", "tf", ".", "transpose", "(", "tf", ".", "broadcast_to", "(", "xt", ",", "[", "V", ",", "N", ",", "V", ",", "F", "]", ")", ",", "perm", "=", "[", "2", ",", "1", ",", "0", ",", "3", "]", ")", "-", "xt", "\n", "# shape: (N,V,V)", "\n", "tmpS", "=", "K", ".", "exp", "(", "K", ".", "reshape", "(", "K", ".", "dot", "(", "tf", ".", "transpose", "(", "K", ".", "abs", "(", "diff", ")", ",", "perm", "=", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", ",", "self", ".", "a", ")", ",", "[", "N", ",", "V", ",", "V", "]", ")", ")", "\n", "# normalization", "\n", "S", "=", "tmpS", "/", "tf", ".", "transpose", "(", "tf", ".", "broadcast_to", "(", "K", ".", "sum", "(", "tmpS", ",", "axis", "=", "1", ")", ",", "[", "V", ",", "N", ",", "V", "]", ")", ",", "perm", "=", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "\n", "diff_tmp", "+=", "K", ".", "abs", "(", "diff", ")", "\n", "outputs", ".", "append", "(", "S", ")", "\n", "\n", "", "outputs", "=", "tf", ".", "transpose", "(", "outputs", ",", "perm", "=", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "self", ".", "S", "=", "K", ".", "mean", "(", "outputs", ",", "axis", "=", "0", ")", "\n", "self", ".", "diff", "=", "K", ".", "mean", "(", "diff_tmp", ",", "axis", "=", "0", ")", "/", "tf", ".", "convert_to_tensor", "(", "int", "(", "T", ")", ",", "tf", ".", "float32", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.Graph_Learn.compute_output_shape": [[221, 224], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "# shape: (n, num_of_vertices,num_of_vertices, num_of_vertices)", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "1", "]", ",", "input_shape", "[", "2", "]", ",", "input_shape", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.cheb_conv_with_Att_GL.__init__": [[239, 243], ["keras.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.ziyujia_mstgcn.model.DataGenerator.DominGenerator.__init__"], ["def", "__init__", "(", "self", ",", "num_of_filters", ",", "k", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "k", "=", "k", "\n", "self", ".", "num_of_filters", "=", "num_of_filters", "\n", "super", "(", "cheb_conv_with_Att_GL", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.cheb_conv_with_Att_GL.build": [[244, 253], ["isinstance", "MSTGCN.cheb_conv_with_Att_GL.add_weight", "super().build"], "methods", ["home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.GradientReversal.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "isinstance", "(", "input_shape", ",", "list", ")", "\n", "x_shape", ",", "Att_shape", ",", "S_shape", "=", "input_shape", "\n", "_", ",", "T", ",", "V", ",", "F", "=", "x_shape", "\n", "self", ".", "Theta", "=", "self", ".", "add_weight", "(", "name", "=", "'Theta'", ",", "\n", "shape", "=", "(", "self", ".", "k", ",", "F", ",", "self", ".", "num_of_filters", ")", ",", "\n", "initializer", "=", "'uniform'", ",", "\n", "trainable", "=", "True", ")", "\n", "super", "(", "cheb_conv_with_Att_GL", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.cheb_conv_with_Att_GL.call": [[254, 290], ["isinstance", "keras.backend.minimum", "range", "tensorflow.transpose", "len", "tensorflow.transpose", "keras.backend.zeros", "tensorflow.matrix_diag", "range", "range", "outputs.append", "keras.backend.relu", "keras.backend.sum", "tensorflow.eye", "cheb_polynomials.append", "keras.backend.batch_dot", "tensorflow.expand_dims", "keras.backend.concatenate", "tensorflow.eye", "int", "tensorflow.transpose", "keras.backend.dot", "int", "tensorflow.shape"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ")", ":", "\n", "#Input:  [x, Att, S]", "\n", "        ", "assert", "isinstance", "(", "x", ",", "list", ")", "\n", "assert", "len", "(", "x", ")", "==", "3", ",", "'Cheb_gcn input error'", "\n", "x", ",", "Att", ",", "S", "=", "x", "\n", "_", ",", "T", ",", "V", ",", "F", "=", "x", ".", "shape", "\n", "\n", "S", "=", "K", ".", "minimum", "(", "S", ",", "tf", ".", "transpose", "(", "S", ",", "perm", "=", "[", "0", ",", "1", ",", "3", ",", "2", "]", ")", ")", "# Ensure symmetry", "\n", "\n", "# GCN", "\n", "outputs", "=", "[", "]", "\n", "for", "time_step", "in", "range", "(", "T", ")", ":", "\n", "# shape of x is (batch_size, V, F)", "\n", "            ", "graph_signal", "=", "x", "[", ":", ",", "time_step", ",", ":", ",", ":", "]", "\n", "output", "=", "K", ".", "zeros", "(", "shape", "=", "(", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "V", ",", "self", ".", "num_of_filters", ")", ")", "\n", "\n", "A", "=", "S", "[", ":", ",", "time_step", ",", ":", ",", ":", "]", "\n", "#Calculating Chebyshev polynomials (let lambda_max=2)", "\n", "D", "=", "tf", ".", "matrix_diag", "(", "K", ".", "sum", "(", "A", ",", "axis", "=", "1", ")", ")", "\n", "L", "=", "D", "-", "A", "\n", "L_t", "=", "L", "-", "[", "tf", ".", "eye", "(", "int", "(", "V", ")", ")", "]", "\n", "cheb_polynomials", "=", "[", "tf", ".", "eye", "(", "int", "(", "V", ")", ")", ",", "L_t", "]", "\n", "for", "i", "in", "range", "(", "2", ",", "self", ".", "k", ")", ":", "\n", "                ", "cheb_polynomials", ".", "append", "(", "2", "*", "L_t", "*", "cheb_polynomials", "[", "i", "-", "1", "]", "-", "cheb_polynomials", "[", "i", "-", "2", "]", ")", "\n", "\n", "", "for", "kk", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "                ", "T_k", "=", "cheb_polynomials", "[", "kk", "]", "# shape of T_k is (V, V)", "\n", "T_k_with_at", "=", "T_k", "*", "Att", "# shape of T_k_with_at is (batch_size, V, V)", "\n", "theta_k", "=", "self", ".", "Theta", "[", "kk", "]", "# shape of theta_k is (F, num_of_filters)", "\n", "\n", "# shape is (batch_size, V, F)", "\n", "rhs", "=", "K", ".", "batch_dot", "(", "tf", ".", "transpose", "(", "T_k_with_at", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", ",", "graph_signal", ")", "\n", "output", "=", "output", "+", "K", ".", "dot", "(", "rhs", ",", "theta_k", ")", "\n", "", "outputs", ".", "append", "(", "tf", ".", "expand_dims", "(", "output", ",", "-", "1", ")", ")", "\n", "\n", "", "return", "tf", ".", "transpose", "(", "K", ".", "relu", "(", "K", ".", "concatenate", "(", "outputs", ",", "axis", "=", "-", "1", ")", ")", ",", "perm", "=", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.cheb_conv_with_Att_GL.compute_output_shape": [[291, 295], ["isinstance"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "isinstance", "(", "input_shape", ",", "list", ")", "\n", "# shape: (n, num_of_timesteps, num_of_vertices, num_of_filters)", "\n", "return", "(", "input_shape", "[", "0", "]", "[", "0", "]", ",", "input_shape", "[", "0", "]", "[", "1", "]", ",", "input_shape", "[", "0", "]", "[", "2", "]", ",", "self", ".", "num_of_filters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.cheb_conv_with_Att_static.__init__": [[305, 310], ["tensorflow.to_float", "keras.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.ziyujia_mstgcn.model.DataGenerator.DominGenerator.__init__"], ["def", "__init__", "(", "self", ",", "num_of_filters", ",", "k", ",", "cheb_polynomials", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "k", "=", "k", "\n", "self", ".", "num_of_filters", "=", "num_of_filters", "\n", "self", ".", "cheb_polynomials", "=", "tf", ".", "to_float", "(", "cheb_polynomials", ")", "\n", "super", "(", "cheb_conv_with_Att_static", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.cheb_conv_with_Att_static.build": [[311, 320], ["isinstance", "MSTGCN.cheb_conv_with_Att_static.add_weight", "super().build"], "methods", ["home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.GradientReversal.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "isinstance", "(", "input_shape", ",", "list", ")", "\n", "x_shape", ",", "Att_shape", "=", "input_shape", "\n", "_", ",", "T", ",", "V", ",", "F", "=", "x_shape", "\n", "self", ".", "Theta", "=", "self", ".", "add_weight", "(", "name", "=", "'Theta'", ",", "\n", "shape", "=", "(", "self", ".", "k", ",", "F", ",", "self", ".", "num_of_filters", ")", ",", "\n", "initializer", "=", "'uniform'", ",", "\n", "trainable", "=", "True", ")", "\n", "super", "(", "cheb_conv_with_Att_static", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.cheb_conv_with_Att_static.call": [[321, 345], ["isinstance", "range", "tensorflow.transpose", "len", "keras.backend.zeros", "range", "outputs.append", "keras.backend.relu", "keras.backend.dropout", "keras.backend.batch_dot", "tensorflow.expand_dims", "keras.backend.concatenate", "tensorflow.transpose", "keras.backend.dot", "tensorflow.shape"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ")", ":", "\n", "#Input:  [x, Att]", "\n", "        ", "assert", "isinstance", "(", "x", ",", "list", ")", "\n", "assert", "len", "(", "x", ")", "==", "2", ",", "'cheb_gcn error'", "\n", "x", ",", "Att", "=", "x", "\n", "_", ",", "T", ",", "V", ",", "F", "=", "x", ".", "shape", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "time_step", "in", "range", "(", "T", ")", ":", "\n", "# shape is (batch_size, V, F)", "\n", "            ", "graph_signal", "=", "x", "[", ":", ",", "time_step", ",", ":", ",", ":", "]", "\n", "output", "=", "K", ".", "zeros", "(", "shape", "=", "(", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "V", ",", "self", ".", "num_of_filters", ")", ")", "\n", "\n", "for", "kk", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "                ", "T_k", "=", "self", ".", "cheb_polynomials", "[", "kk", "]", "# shape of T_k is (V, V) ", "\n", "T_k_with_at", "=", "K", ".", "dropout", "(", "T_k", "*", "Att", ",", "0.6", ")", "# shape of T_k_with_at is (batch_size, V, V)", "\n", "theta_k", "=", "self", ".", "Theta", "[", "kk", "]", "# shape of theta_k is (F, num_of_filters)", "\n", "\n", "# shape is (batch_size, V, F)", "\n", "rhs", "=", "K", ".", "batch_dot", "(", "tf", ".", "transpose", "(", "T_k_with_at", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", ",", "graph_signal", ")", "\n", "output", "=", "output", "+", "K", ".", "dot", "(", "rhs", ",", "theta_k", ")", "\n", "", "outputs", ".", "append", "(", "tf", ".", "expand_dims", "(", "output", ",", "-", "1", ")", ")", "\n", "\n", "", "return", "tf", ".", "transpose", "(", "K", ".", "relu", "(", "K", ".", "concatenate", "(", "outputs", ",", "axis", "=", "-", "1", ")", ")", ",", "perm", "=", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.cheb_conv_with_Att_static.compute_output_shape": [[346, 350], ["isinstance"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "isinstance", "(", "input_shape", ",", "list", ")", "\n", "# shape: (n, num_of_timesteps, num_of_vertices, num_of_filters)", "\n", "return", "(", "input_shape", "[", "0", "]", "[", "0", "]", ",", "input_shape", "[", "0", "]", "[", "1", "]", ",", "input_shape", "[", "0", "]", "[", "2", "]", ",", "self", ".", "num_of_filters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.GradientReversal.__init__": [[403, 407], ["keras.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.ziyujia_mstgcn.model.DataGenerator.DominGenerator.__init__"], ["def", "__init__", "(", "self", ",", "hp_lambda", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GradientReversal", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "supports_masking", "=", "True", "\n", "self", ".", "hp_lambda", "=", "hp_lambda", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.GradientReversal.get_output_shape_for": [[408, 411], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_output_shape_for", "(", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.GradientReversal.build": [[412, 414], ["None"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "self", ".", "trainable_weights", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.GradientReversal.call": [[415, 417], ["MSTGCN.reverse_gradient"], "methods", ["home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.reverse_gradient"], ["", "def", "call", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "return", "reverse_gradient", "(", "x", ",", "self", ".", "hp_lambda", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.GradientReversal.get_config": [[418, 422], ["super().get_config", "dict", "list", "list", "super().get_config.items", "config.items"], "methods", ["home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.GradientReversal.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "}", "\n", "base_config", "=", "super", "(", "GradientReversal", ",", "self", ")", ".", "get_config", "(", ")", "\n", "return", "dict", "(", "list", "(", "base_config", ".", "items", "(", ")", ")", "+", "list", "(", "config", ".", "items", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.diff_loss": [[151, 160], ["len", "keras.backend.mean", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum"], "function", ["None"], ["", "", "def", "diff_loss", "(", "diff", ",", "S", ")", ":", "\n", "    ", "'''\n    compute the 1st loss of L_{graph_learning}\n    '''", "\n", "if", "len", "(", "S", ".", "shape", ")", "==", "4", ":", "\n", "# batch input", "\n", "        ", "return", "K", ".", "mean", "(", "K", ".", "sum", "(", "K", ".", "sum", "(", "diff", "**", "2", ",", "axis", "=", "3", ")", "*", "S", ",", "axis", "=", "(", "1", ",", "2", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "K", ".", "sum", "(", "K", ".", "sum", "(", "diff", "**", "2", ",", "axis", "=", "2", ")", "*", "S", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.F_norm_loss": [[162, 171], ["len", "keras.backend.sum", "keras.backend.sum", "keras.backend.mean"], "function", ["None"], ["", "", "def", "F_norm_loss", "(", "S", ",", "Falpha", ")", ":", "\n", "    ", "'''\n    compute the 2nd loss of L_{graph_learning}\n    '''", "\n", "if", "len", "(", "S", ".", "shape", ")", "==", "4", ":", "\n", "# batch input", "\n", "        ", "return", "Falpha", "*", "K", ".", "sum", "(", "K", ".", "mean", "(", "S", "**", "2", ",", "axis", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "Falpha", "*", "K", ".", "sum", "(", "S", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.reshape_dot": [[356, 364], ["tensorflow.reshape", "keras.backend.batch_dot", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.shape", "tensorflow.shape"], "function", ["None"], ["", "", "def", "reshape_dot", "(", "x", ")", ":", "\n", "#Input:  [x,TAtt]", "\n", "    ", "x", ",", "TAtt", "=", "x", "\n", "return", "tf", ".", "reshape", "(", "\n", "K", ".", "batch_dot", "(", "\n", "tf", ".", "reshape", "(", "tf", ".", "transpose", "(", "x", ",", "perm", "=", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", ",", "\n", "(", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "-", "1", ",", "tf", ".", "shape", "(", "x", ")", "[", "1", "]", ")", ")", ",", "TAtt", ")", ",", "\n", "[", "-", "1", ",", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.LayerNorm": [[367, 372], ["keras.backend.relu", "tensorflow.contrib.layers.layer_norm"], "function", ["None"], ["", "def", "LayerNorm", "(", "x", ")", ":", "\n", "# do the layer normalization", "\n", "    ", "relu_x", "=", "K", ".", "relu", "(", "x", ")", "\n", "ln", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "relu_x", ",", "begin_norm_axis", "=", "3", ")", "\n", "return", "ln", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.reverse_gradient": [[378, 398], ["tensorflow.python.framework.ops.RegisterGradient", "keras.backend.get_session", "g.gradient_override_map", "tensorflow.identity", "tensorflow.negative"], "function", ["None"], ["", "def", "reverse_gradient", "(", "X", ",", "hp_lambda", ")", ":", "\n", "    ", "\"\"\"Flips the sign of the incoming gradient during training.\"\"\"", "\n", "num_calls", "=", "1", "\n", "try", ":", "\n", "        ", "reverse_gradient", ".", "num_calls", "=", "reverse_gradient", ".", "num_calls", "+", "1", "\n", "", "except", "AttributeError", ":", "\n", "        ", "reverse_gradient", ".", "num_calls", "=", "num_calls", "\n", "num_calls", "=", "num_calls", "+", "1", "\n", "\n", "", "grad_name", "=", "\"GradientReversal_%d\"", "%", "reverse_gradient", ".", "num_calls", "\n", "\n", "@", "ops", ".", "RegisterGradient", "(", "grad_name", ")", "\n", "def", "_flip_gradients", "(", "op", ",", "grad", ")", ":", "\n", "        ", "return", "[", "tf", ".", "negative", "(", "grad", ")", "*", "hp_lambda", "]", "\n", "\n", "", "g", "=", "K", ".", "get_session", "(", ")", ".", "graph", "\n", "with", "g", ".", "gradient_override_map", "(", "{", "'Identity'", ":", "grad_name", "}", ")", ":", "\n", "        ", "y", "=", "tf", ".", "identity", "(", "X", ")", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.MSTGCN_Block": [[428, 469], ["MSTGCN.TemporalAttention", "keras.layers.core.Lambda", "MSTGCN.SpatialAttention", "MSTGCN.Graph_Learn", "keras.layers.core.Dropout", "MSTGCN.cheb_conv_with_Att_GL", "MSTGCN.cheb_conv_with_Att_static", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.core.Lambda", "keras.layers.core.Lambda", "str", "str", "str"], "function", ["None"], ["", "", "def", "MSTGCN_Block", "(", "x", ",", "k", ",", "num_of_chev_filters", ",", "num_of_time_filters", ",", "time_conv_strides", ",", "\n", "cheb_polynomials", ",", "time_conv_kernel", ",", "GLalpha", ",", "i", "=", "0", ")", ":", "\n", "    ", "'''\n    packaged Spatial-temporal convolution Block\n    -------\n    x: input data;\n    k: k-order cheb GCN\n    i: block number\n    '''", "\n", "\n", "# temporal attention", "\n", "temporal_Att", "=", "TemporalAttention", "(", ")", "(", "x", ")", "\n", "x_TAtt", "=", "Lambda", "(", "reshape_dot", ",", "name", "=", "'reshape_dot'", "+", "str", "(", "i", ")", ")", "(", "[", "x", ",", "temporal_Att", "]", ")", "\n", "\n", "# spatial attention", "\n", "spatial_Att", "=", "SpatialAttention", "(", ")", "(", "x_TAtt", ")", "\n", "\n", "# multi-view GCN", "\n", "S", "=", "Graph_Learn", "(", "alpha", "=", "GLalpha", ")", "(", "x", ")", "\n", "S", "=", "Dropout", "(", "0.3", ")", "(", "S", ")", "\n", "spatial_gcn_GL", "=", "cheb_conv_with_Att_GL", "(", "num_of_filters", "=", "num_of_chev_filters", ",", "k", "=", "k", ")", "(", "[", "x", ",", "spatial_Att", ",", "S", "]", ")", "\n", "spatial_gcn_SD", "=", "cheb_conv_with_Att_static", "(", "num_of_filters", "=", "num_of_chev_filters", ",", "k", "=", "k", ",", "\n", "cheb_polynomials", "=", "cheb_polynomials", ")", "(", "[", "x", ",", "spatial_Att", "]", ")", "\n", "\n", "# temporal convolution", "\n", "time_conv_output_GL", "=", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "num_of_time_filters", ",", "\n", "kernel_size", "=", "(", "time_conv_kernel", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "strides", "=", "(", "1", ",", "time_conv_strides", ")", ")", "(", "spatial_gcn_GL", ")", "\n", "\n", "time_conv_output_SD", "=", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "num_of_time_filters", ",", "\n", "kernel_size", "=", "(", "time_conv_kernel", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "strides", "=", "(", "1", ",", "time_conv_strides", ")", ")", "(", "spatial_gcn_SD", ")", "\n", "\n", "# LayerNorm", "\n", "end_output_GL", "=", "Lambda", "(", "LayerNorm", ",", "name", "=", "'layer_norm'", "+", "str", "(", "2", "*", "i", ")", ")", "(", "time_conv_output_GL", ")", "\n", "end_output_SD", "=", "Lambda", "(", "LayerNorm", ",", "name", "=", "'layer_norm'", "+", "str", "(", "2", "*", "i", "+", "1", ")", ")", "(", "time_conv_output_SD", ")", "\n", "return", "end_output_GL", ",", "end_output_SD", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.build_MSTGCN": [[475, 529], ["keras.layers.Input", "MSTGCN.MSTGCN_Block", "range", "keras.layers.concatenate", "MSTGCN.GradientReversal", "GradientReversal.", "keras.models.Model", "models.Model.compile", "keras.models.Model", "models.Model.compile", "MSTGCN.MSTGCN_Block", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Dense"], "function", ["home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.MSTGCN_Block", "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.MSTGCN_Block"], ["", "def", "build_MSTGCN", "(", "k", ",", "num_of_chev_filters", ",", "num_of_time_filters", ",", "time_conv_strides", ",", "cheb_polynomials", ",", "\n", "time_conv_kernel", ",", "sample_shape", ",", "num_block", ",", "dense_size", ",", "opt", ",", "GLalpha", ",", "\n", "regularizer", ",", "dropout", ",", "lambda_reversal", ",", "num_classes", "=", "5", ",", "num_domain", "=", "9", ")", ":", "\n", "\n", "# Input:  (*, num_of_timesteps, num_of_vertices, num_of_features)", "\n", "    ", "data_layer", "=", "layers", ".", "Input", "(", "shape", "=", "sample_shape", ",", "name", "=", "'Input_Layer'", ")", "\n", "\n", "# MSTGCN_Block", "\n", "block_out_GL", ",", "block_out_SD", "=", "MSTGCN_Block", "(", "data_layer", ",", "k", ",", "num_of_chev_filters", ",", "num_of_time_filters", ",", "\n", "time_conv_strides", ",", "cheb_polynomials", ",", "time_conv_kernel", ",", "GLalpha", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "num_block", ")", ":", "\n", "        ", "block_out_GL", ",", "block_out_SD", "=", "MSTGCN_Block", "(", "block_out_GL", ",", "k", ",", "num_of_chev_filters", ",", "num_of_time_filters", ",", "\n", "time_conv_strides", ",", "cheb_polynomials", ",", "time_conv_kernel", ",", "GLalpha", ",", "i", ")", "\n", "", "block_out", "=", "layers", ".", "concatenate", "(", "[", "block_out_GL", ",", "block_out_SD", "]", ")", "\n", "block_out", "=", "layers", ".", "Flatten", "(", ")", "(", "block_out", ")", "\n", "\n", "# dropout", "\n", "if", "dropout", "!=", "0", ":", "\n", "        ", "block_out", "=", "layers", ".", "Dropout", "(", "dropout", ")", "(", "block_out", ")", "\n", "\n", "# Global dense layer", "\n", "", "for", "size", "in", "dense_size", ":", "\n", "        ", "dense_out", "=", "layers", ".", "Dense", "(", "size", ")", "(", "block_out", ")", "\n", "\n", "# softmax classification", "\n", "", "softmax", "=", "layers", ".", "Dense", "(", "num_classes", ",", "\n", "activation", "=", "'softmax'", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "'Label'", ")", "(", "dense_out", ")", "\n", "\n", "# GRL & G_d", "\n", "flip_layer", "=", "GradientReversal", "(", "lambda_reversal", ")", "\n", "G_d_in", "=", "flip_layer", "(", "block_out", ")", "\n", "for", "size", "in", "dense_size", ":", "\n", "        ", "G_d_out", "=", "layers", ".", "Dense", "(", "size", ")", "(", "G_d_in", ")", "\n", "", "G_d_out", "=", "layers", ".", "Dense", "(", "units", "=", "num_domain", ",", "\n", "activation", "=", "'softmax'", ",", "\n", "name", "=", "'Domain'", ")", "(", "G_d_out", ")", "\n", "\n", "# training model (with GRL & G_d)", "\n", "model", "=", "models", ".", "Model", "(", "inputs", "=", "data_layer", ",", "outputs", "=", "[", "softmax", ",", "G_d_out", "]", ")", "\n", "model", ".", "compile", "(", "\n", "optimizer", "=", "opt", ",", "\n", "loss", "=", "'categorical_crossentropy'", ",", "\n", "metrics", "=", "[", "'acc'", "]", ",", "\n", ")", "\n", "# testing model (without GRL & G_d)", "\n", "pre_model", "=", "models", ".", "Model", "(", "inputs", "=", "data_layer", ",", "outputs", "=", "softmax", ")", "\n", "pre_model", ".", "compile", "(", "\n", "optimizer", "=", "opt", ",", "\n", "loss", "=", "'categorical_crossentropy'", ",", "\n", "metrics", "=", "[", "'acc'", "]", ",", "\n", ")", "\n", "return", "model", ",", "pre_model", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.build_MSTGCN_test": [[531, 548], ["numpy.array", "MSTGCN.build_MSTGCN", "build_MSTGCN.summary", "build_MSTGCN.save", "print", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.ziyujia_mstgcn.model.MSTGCN.build_MSTGCN"], ["", "def", "build_MSTGCN_test", "(", ")", ":", "\n", "# an example to test", "\n", "    ", "cheb_k", "=", "3", "\n", "num_of_chev_filters", "=", "10", "\n", "num_of_time_filters", "=", "10", "\n", "time_conv_strides", "=", "1", "\n", "time_conv_kernel", "=", "3", "\n", "dense_size", "=", "np", ".", "array", "(", "[", "64", ",", "32", "]", ")", "\n", "cheb_polynomials", "=", "[", "np", ".", "random", ".", "rand", "(", "26", ",", "26", ")", ",", "np", ".", "random", ".", "rand", "(", "26", ",", "26", ")", ",", "np", ".", "random", ".", "rand", "(", "26", ",", "26", ")", "]", "\n", "\n", "model", "=", "build_MSTGCN", "(", "cheb_k", ",", "num_of_chev_filters", ",", "num_of_time_filters", ",", "time_conv_strides", ",", "cheb_polynomials", ",", "\n", "time_conv_kernel", ",", "sample_shape", "=", "(", "5", ",", "26", ",", "9", ")", ",", "num_block", "=", "1", ",", "dense_size", "=", "dense_size", ",", "\n", "opt", "=", "'adam'", ",", "useGL", "=", "True", ",", "GLalpha", "=", "0.0001", ",", "regularizer", "=", "None", ",", "dropout", "=", "0.0", ")", "\n", "model", ".", "summary", "(", ")", "\n", "model", ".", "save", "(", "'MSTGCN_build_test.h5'", ")", "\n", "print", "(", "\"save ok\"", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.FeatureNet.build_FeatureNet": [[11, 107], ["keras.layers.Input", "keras.layers.Conv1D", "keras.layers.Conv1D.", "keras.layers.MaxPool1D", "keras.layers.MaxPool1D.", "keras.layers.Dropout", "keras.layers.Dropout.", "keras.layers.Conv1D", "keras.layers.Conv1D.", "keras.layers.Conv1D", "keras.layers.Conv1D.", "keras.layers.Conv1D", "keras.layers.Conv1D.", "keras.layers.MaxPool1D", "keras.layers.MaxPool1D.", "keras.layers.Reshape", "keras.layers.Reshape.", "keras.layers.Conv1D", "keras.layers.Conv1D.", "keras.layers.MaxPool1D", "keras.layers.MaxPool1D.", "keras.layers.Dropout", "keras.layers.Dropout.", "keras.layers.Conv1D", "keras.layers.Conv1D.", "keras.layers.Conv1D", "keras.layers.Conv1D.", "keras.layers.Conv1D", "keras.layers.Conv1D.", "keras.layers.MaxPool1D", "keras.layers.MaxPool1D.", "keras.layers.Reshape", "keras.layers.Reshape.", "keras.layers.concatenate", "keras.models.Model", "keras.layers.Input", "keras.layers.Reshape", "keras.layers.Reshape.", "keras.models.Model", "keras.models.Model.compile", "keras.models.Model", "keras.models.Model.compile", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.TimeDistributed", "keras.layers.Flatten", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Activation", "keras.regularizers.l2", "keras.regularizers.l2", "int", "int", "int", "int"], "function", ["None"], ["def", "build_FeatureNet", "(", "opt", ",", "channels", "=", "10", ",", "time_second", "=", "30", ",", "freq", "=", "100", ")", ":", "\n", "    ", "activation", "=", "tf", ".", "nn", ".", "relu", "\n", "padding", "=", "'same'", "\n", "\n", "######### Input ########", "\n", "input_signal", "=", "Input", "(", "shape", "=", "(", "time_second", "*", "freq", ",", "1", ")", ",", "name", "=", "'input_signal'", ")", "\n", "\n", "######### CNNs with small filter size at the first layer #########", "\n", "cnn0", "=", "Conv1D", "(", "kernel_size", "=", "50", ",", "\n", "filters", "=", "32", ",", "\n", "strides", "=", "6", ",", "\n", "kernel_regularizer", "=", "keras", ".", "regularizers", ".", "l2", "(", "0.001", ")", ")", "\n", "s", "=", "cnn0", "(", "input_signal", ")", "\n", "s", "=", "BatchNormalization", "(", ")", "(", "s", ")", "\n", "s", "=", "Activation", "(", "activation", "=", "activation", ")", "(", "s", ")", "\n", "cnn1", "=", "MaxPool1D", "(", "pool_size", "=", "16", ",", "strides", "=", "16", ")", "\n", "s", "=", "cnn1", "(", "s", ")", "\n", "cnn2", "=", "Dropout", "(", "0.5", ")", "\n", "s", "=", "cnn2", "(", "s", ")", "\n", "cnn3", "=", "Conv1D", "(", "kernel_size", "=", "8", ",", "filters", "=", "64", ",", "strides", "=", "1", ",", "padding", "=", "padding", ")", "\n", "s", "=", "cnn3", "(", "s", ")", "\n", "s", "=", "BatchNormalization", "(", ")", "(", "s", ")", "\n", "s", "=", "Activation", "(", "activation", "=", "activation", ")", "(", "s", ")", "\n", "cnn4", "=", "Conv1D", "(", "kernel_size", "=", "8", ",", "filters", "=", "64", ",", "strides", "=", "1", ",", "padding", "=", "padding", ")", "\n", "s", "=", "cnn4", "(", "s", ")", "\n", "s", "=", "BatchNormalization", "(", ")", "(", "s", ")", "\n", "s", "=", "Activation", "(", "activation", "=", "activation", ")", "(", "s", ")", "\n", "cnn5", "=", "Conv1D", "(", "kernel_size", "=", "8", ",", "filters", "=", "64", ",", "strides", "=", "1", ",", "padding", "=", "padding", ")", "\n", "s", "=", "cnn5", "(", "s", ")", "\n", "s", "=", "BatchNormalization", "(", ")", "(", "s", ")", "\n", "s", "=", "Activation", "(", "activation", "=", "activation", ")", "(", "s", ")", "\n", "cnn6", "=", "MaxPool1D", "(", "pool_size", "=", "8", ",", "strides", "=", "8", ")", "\n", "s", "=", "cnn6", "(", "s", ")", "\n", "cnn7", "=", "Reshape", "(", "(", "int", "(", "s", ".", "shape", "[", "1", "]", ")", "*", "int", "(", "s", ".", "shape", "[", "2", "]", ")", ",", ")", ")", "# Flatten", "\n", "s", "=", "cnn7", "(", "s", ")", "\n", "\n", "######### CNNs with large filter size at the first layer #########", "\n", "cnn8", "=", "Conv1D", "(", "kernel_size", "=", "400", ",", "\n", "filters", "=", "64", ",", "\n", "strides", "=", "50", ",", "\n", "kernel_regularizer", "=", "keras", ".", "regularizers", ".", "l2", "(", "0.001", ")", ")", "\n", "l", "=", "cnn8", "(", "input_signal", ")", "\n", "l", "=", "BatchNormalization", "(", ")", "(", "l", ")", "\n", "l", "=", "Activation", "(", "activation", "=", "activation", ")", "(", "l", ")", "\n", "cnn9", "=", "MaxPool1D", "(", "pool_size", "=", "8", ",", "strides", "=", "8", ")", "\n", "l", "=", "cnn9", "(", "l", ")", "\n", "cnn10", "=", "Dropout", "(", "0.5", ")", "\n", "l", "=", "cnn10", "(", "l", ")", "\n", "cnn11", "=", "Conv1D", "(", "kernel_size", "=", "6", ",", "filters", "=", "64", ",", "strides", "=", "1", ",", "padding", "=", "padding", ")", "\n", "l", "=", "cnn11", "(", "l", ")", "\n", "l", "=", "BatchNormalization", "(", ")", "(", "l", ")", "\n", "l", "=", "Activation", "(", "activation", "=", "activation", ")", "(", "l", ")", "\n", "cnn12", "=", "Conv1D", "(", "kernel_size", "=", "6", ",", "filters", "=", "64", ",", "strides", "=", "1", ",", "padding", "=", "padding", ")", "\n", "l", "=", "cnn12", "(", "l", ")", "\n", "l", "=", "BatchNormalization", "(", ")", "(", "l", ")", "\n", "l", "=", "Activation", "(", "activation", "=", "activation", ")", "(", "l", ")", "\n", "cnn13", "=", "Conv1D", "(", "kernel_size", "=", "6", ",", "filters", "=", "64", ",", "strides", "=", "1", ",", "padding", "=", "padding", ")", "\n", "l", "=", "cnn13", "(", "l", ")", "\n", "l", "=", "BatchNormalization", "(", ")", "(", "l", ")", "\n", "l", "=", "Activation", "(", "activation", "=", "activation", ")", "(", "l", ")", "\n", "cnn14", "=", "MaxPool1D", "(", "pool_size", "=", "4", ",", "strides", "=", "4", ")", "\n", "l", "=", "cnn14", "(", "l", ")", "\n", "cnn15", "=", "Reshape", "(", "(", "int", "(", "l", ".", "shape", "[", "1", "]", ")", "*", "int", "(", "l", ".", "shape", "[", "2", "]", ")", ",", ")", ")", "\n", "l", "=", "cnn15", "(", "l", ")", "\n", "\n", "feature", "=", "keras", ".", "layers", ".", "concatenate", "(", "[", "s", ",", "l", "]", ")", "\n", "\n", "fea_part", "=", "Model", "(", "input_signal", ",", "feature", ")", "\n", "\n", "##################################################", "\n", "\n", "input", "=", "Input", "(", "shape", "=", "(", "channels", ",", "time_second", "*", "freq", ")", ",", "name", "=", "'input_signal'", ")", "\n", "reshape", "=", "Reshape", "(", "(", "channels", ",", "time_second", "*", "freq", ",", "1", ")", ")", "# Flatten", "\n", "input_re", "=", "reshape", "(", "input", ")", "\n", "fea_all", "=", "TimeDistributed", "(", "fea_part", ")", "(", "input_re", ")", "\n", "\n", "merged", "=", "Flatten", "(", ")", "(", "fea_all", ")", "\n", "merged", "=", "Dropout", "(", "0.5", ")", "(", "merged", ")", "\n", "merged", "=", "Dense", "(", "64", ")", "(", "merged", ")", "\n", "merged", "=", "Dense", "(", "5", ")", "(", "merged", ")", "\n", "\n", "fea_softmax", "=", "Activation", "(", "activation", "=", "'softmax'", ")", "(", "merged", ")", "\n", "\n", "# FeatureNet with softmax", "\n", "fea_model", "=", "Model", "(", "input", ",", "fea_softmax", ")", "\n", "fea_model", ".", "compile", "(", "optimizer", "=", "opt", ",", "\n", "loss", "=", "'categorical_crossentropy'", ",", "\n", "metrics", "=", "[", "'acc'", "]", ")", "\n", "\n", "# FeatureNet without softmax", "\n", "pre_model", "=", "Model", "(", "input", ",", "fea_all", ")", "\n", "pre_model", ".", "compile", "(", "optimizer", "=", "opt", ",", "\n", "loss", "=", "'categorical_crossentropy'", ",", "\n", "metrics", "=", "[", "'acc'", "]", ")", "\n", "\n", "return", "fea_model", ",", "pre_model", "\n", "", ""]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.DataGenerator.kFoldGenerator.__init__": [[12, 18], ["len", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "if", "len", "(", "x", ")", "!=", "len", "(", "y", ")", ":", "\n", "            ", "assert", "False", ",", "'Data generator: Length of x or y is not equal to k.'", "\n", "", "self", ".", "k", "=", "len", "(", "x", ")", "\n", "self", ".", "x_list", "=", "x", "\n", "self", ".", "y_list", "=", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.DataGenerator.kFoldGenerator.getFold": [[20, 35], ["range", "numpy.concatenate", "numpy.concatenate"], "methods", ["None"], ["", "def", "getFold", "(", "self", ",", "i", ")", ":", "\n", "        ", "isFirst", "=", "True", "\n", "for", "p", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "            ", "if", "p", "!=", "i", ":", "\n", "                ", "if", "isFirst", ":", "\n", "                    ", "train_data", "=", "self", ".", "x_list", "[", "p", "]", "\n", "train_targets", "=", "self", ".", "y_list", "[", "p", "]", "\n", "isFirst", "=", "False", "\n", "", "else", ":", "\n", "                    ", "train_data", "=", "np", ".", "concatenate", "(", "(", "train_data", ",", "self", ".", "x_list", "[", "p", "]", ")", ")", "\n", "train_targets", "=", "np", ".", "concatenate", "(", "(", "train_targets", ",", "self", ".", "y_list", "[", "p", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "val_data", "=", "self", ".", "x_list", "[", "p", "]", "\n", "val_targets", "=", "self", ".", "y_list", "[", "p", "]", "\n", "", "", "return", "train_data", ",", "train_targets", ",", "val_data", ",", "val_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.DataGenerator.kFoldGenerator.getX": [[37, 42], ["range", "numpy.append"], "methods", ["None"], ["", "def", "getX", "(", "self", ")", ":", "\n", "        ", "All_X", "=", "self", ".", "x_list", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "k", ")", ":", "\n", "            ", "All_X", "=", "np", ".", "append", "(", "All_X", ",", "self", ".", "x_list", "[", "i", "]", ",", "axis", "=", "0", ")", "\n", "", "return", "All_X", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.DataGenerator.kFoldGenerator.getY": [[44, 49], ["range", "numpy.append"], "methods", ["None"], ["", "def", "getY", "(", "self", ")", ":", "\n", "        ", "All_Y", "=", "self", ".", "y_list", "[", "0", "]", "[", "2", ":", "-", "2", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "k", ")", ":", "\n", "            ", "All_Y", "=", "np", ".", "append", "(", "All_Y", ",", "self", ".", "y_list", "[", "i", "]", "[", "2", ":", "-", "2", "]", ",", "axis", "=", "0", ")", "\n", "", "return", "All_Y", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.DataGenerator.kFoldGenerator.getY_int": [[51, 54], ["DataGenerator.kFoldGenerator.getY", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.ziyujia_mstgcn.model.DataGenerator.kFoldGenerator.getY"], ["", "def", "getY_int", "(", "self", ")", ":", "\n", "        ", "All_Y", "=", "self", ".", "getY", "(", ")", "\n", "return", "np", ".", "argmax", "(", "All_Y", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.DataGenerator.DominGenerator.__init__": [[65, 68], ["len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "len_list", ")", ":", "\n", "        ", "self", ".", "l_list", "=", "len_list", "\n", "self", ".", "k", "=", "len", "(", "len_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ziyujia_mstgcn.model.DataGenerator.DominGenerator.getFold": [[70, 94], ["numpy.zeros", "numpy.concatenate", "numpy.zeros", "numpy.zeros", "numpy.concatenate"], "methods", ["None"], ["", "def", "getFold", "(", "self", ",", "i", ")", ":", "\n", "        ", "isFirst", "=", "True", "\n", "isFirstVal", "=", "True", "\n", "j", "=", "0", "#1~9", "\n", "ii", "=", "0", "#1~10", "\n", "for", "l", "in", "self", ".", "l_list", ":", "\n", "            ", "if", "ii", "!=", "i", ":", "\n", "                ", "a", "=", "np", ".", "zeros", "(", "(", "l", ",", "9", ")", ",", "dtype", "=", "int", ")", "\n", "a", "[", ":", ",", "j", "]", "=", "1", "\n", "if", "isFirst", ":", "\n", "                    ", "train_domin", "=", "a", "\n", "isFirst", "=", "False", "\n", "", "else", ":", "\n", "                    ", "train_domin", "=", "np", ".", "concatenate", "(", "(", "train_domin", ",", "a", ")", ")", "\n", "", "j", "+=", "1", "\n", "", "else", ":", "\n", "                ", "if", "isFirstVal", ":", "\n", "                    ", "val_domin", "=", "np", ".", "zeros", "(", "(", "l", ",", "9", ")", ",", "dtype", "=", "int", ")", "\n", "isFirstVal", "=", "False", "\n", "", "else", ":", "\n", "                    ", "a", "=", "np", ".", "zeros", "(", "(", "l", ",", "9", ")", ",", "dtype", "=", "int", ")", "\n", "val_domin", "=", "np", ".", "concatenate", "(", "(", "val_domin", ",", "a", ")", ")", "\n", "", "", "ii", "+=", "1", "\n", "", "return", "train_domin", ",", "val_domin", "\n", "", "", ""]]}