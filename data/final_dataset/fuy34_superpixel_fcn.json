{"home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.run_infer_nyu.test": [[56, 116], ["torch.no_grad", "torchvision.Compose", "scipy.ndimage.imread", "cv2.resize", "transforms.Compose.", "transforms.Compose.", "time.time", "model", "update_spixl_map", "F.interpolate().type", "torch.tensor().view", "get_spixel_image", "os.path.join", "scipy.misc.imsave", "os.path.join", "np.savetxt", "os.path.basename", "input_transform.cuda().unsqueeze", "time.time", "F.interpolate().type.squeeze", "os.path.isdir", "os.makedirs", "spixel_viz.transpose", "os.path.isdir", "os.makedirs", "print", "flow_transforms.ArrayToTensor", "torchvision.Normalize", "torchvision.Normalize", "int", "int", "F.interpolate", "torch.tensor", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "input_transform.cuda", "update_spixl_map.type", "int", "int", "input_transform.cuda().unsqueeze", "input_transform.cuda"], "function", ["home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.update_spixl_map", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.get_spixel_image"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test", "(", "args", ",", "model", ",", "img_paths", ",", "save_path", ",", "spixeIds", ",", "idx", ",", "scale", ")", ":", "\n", "# Data loading code", "\n", "    ", "input_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "flow_transforms", ".", "ArrayToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0", ",", "0", ",", "0", "]", ",", "std", "=", "[", "255", ",", "255", ",", "255", "]", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.411", ",", "0.432", ",", "0.45", "]", ",", "std", "=", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "]", ")", "\n", "\n", "img_file", "=", "img_paths", "[", "idx", "]", "\n", "load_path", "=", "img_file", "\n", "imgId", "=", "os", ".", "path", ".", "basename", "(", "img_file", ")", "[", ":", "-", "4", "]", "\n", "\n", "img_", "=", "imread", "(", "load_path", ")", "\n", "H_", ",", "W_", ",", "_", "=", "img_", ".", "shape", "\n", "img", "=", "cv2", ".", "resize", "(", "img_", ",", "(", "int", "(", "args", ".", "input_img_width", ")", ",", "int", "(", "args", ".", "input_img_height", ")", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "img1", "=", "input_transform", "(", "img", ")", "\n", "ori_img", "=", "input_transform", "(", "img_", ")", "\n", "\n", "# compute output", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "output", "=", "model", "(", "img1", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "toc", "=", "time", ".", "time", "(", ")", "-", "tic", "\n", "\n", "# assign the spixel map", "\n", "curr_spixl_map", "=", "update_spixl_map", "(", "spixeIds", ",", "output", ")", "\n", "\n", "# The orignal sz of nyu test set 448*608", "\n", "ori_sz_spixel_map", "=", "F", ".", "interpolate", "(", "curr_spixl_map", ".", "type", "(", "torch", ".", "float", ")", ",", "size", "=", "(", "int", "(", "448", ")", ",", "int", "(", "608", ")", ")", ",", "mode", "=", "'nearest'", ")", ".", "type", "(", "torch", ".", "int", ")", "\n", "\n", "mean_values", "=", "torch", ".", "tensor", "(", "[", "0.411", ",", "0.432", ",", "0.45", "]", ",", "dtype", "=", "img1", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "dtype", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "spixel_viz", ",", "spixel_label_map", "=", "get_spixel_image", "(", "(", "ori_img", "+", "mean_values", ")", ".", "clamp", "(", "0", ",", "1", ")", ",", "ori_sz_spixel_map", ".", "squeeze", "(", ")", ",", "n_spixels", "=", "1200", "*", "scale", "*", "scale", ",", "b_enforce_connect", "=", "True", ")", "\n", "\n", "# ************************ Save all result********************************************", "\n", "#save img, uncomment it if needed", "\n", "# if not os.path.isdir(os.path.join(save_path, 'img')):", "\n", "#     os.makedirs(os.path.join(save_path, 'img'))", "\n", "# spixl_save_name = os.path.join(save_path, 'img', imgId + '.jpg')", "\n", "# img_save = (ori_img + mean_values).clamp(0, 1)", "\n", "# imsave(spixl_save_name, img_save.detach().cpu().numpy().transpose(1, 2, 0))", "\n", "\n", "\n", "# save spixel viz", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'spixel_viz'", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'spixel_viz'", ")", ")", "\n", "", "spixl_save_name", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'spixel_viz'", ",", "imgId", "+", "'_sPixel.png'", ")", "\n", "imsave", "(", "spixl_save_name", ",", "spixel_viz", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "# save the unique maps as csv", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'map_csv'", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'map_csv'", ")", ")", "\n", "", "output_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'map_csv'", ",", "imgId", "+", "'.csv'", ")", "\n", "# plus 1 to make it consistent with the toolkit format", "\n", "np", ".", "savetxt", "(", "output_path", ",", "(", "spixel_label_map", "+", "1", ")", ".", "astype", "(", "int", ")", ",", "fmt", "=", "'%i'", ",", "delimiter", "=", "\",\"", ")", "\n", "\n", "\n", "if", "idx", "%", "10", "==", "0", ":", "\n", "        ", "print", "(", "\"processing %d\"", "%", "idx", ")", "\n", "\n", "", "return", "toc", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.run_infer_nyu.main": [[117, 163], ["print", "print", "print", "torch.load", "print", "model.eval", "init_spixel_grid", "range", "print", "os.path.isdir", "os.makedirs", "open", "tf.readlines", "len", "run_infer_nyu.test", "int", "os.path.join", "tst_lst.append", "len", "os.path.isfile", "print", "print", "exit", "len", "int", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.init_spixel_grid", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.run_infer_bsds.test"], ["", "def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "save_path", "\n", "data_dir", "=", "args", ".", "data_dir", "\n", "print", "(", "\"=> fetching img pairs in '{}'\"", ".", "format", "(", "data_dir", ")", ")", "\n", "\n", "input_img_height", "=", "args", ".", "input_img_height", "\n", "input_img_width", "=", "args", ".", "input_img_width", "\n", "\n", "for", "scale", "in", "[", "0.5", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", ",", "1.0", ",", "1.1", ",", "1.2", ",", "1.3", ",", "1.4", "]", ":", "\n", "        ", "assert", "(", "input_img_height", "*", "scale", "%", "16", "==", "0", "and", "input_img_width", "*", "scale", "%", "16", "==", "0", ")", "\n", "save_path", "=", "args", ".", "output", "+", "'/SPixelNet_nSpixel_{0}'", ".", "format", "(", "int", "(", "input_img_height", "/", "16", "*", "scale", "*", "input_img_width", "/", "16", "*", "scale", ")", ")", "\n", "\n", "args", ".", "input_img_height", ",", "args", ".", "input_img_width", "=", "input_img_height", "*", "scale", ",", "input_img_width", "*", "scale", "\n", "\n", "print", "(", "'=> will save everything to {}'", ".", "format", "(", "save_path", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "tst_lst", "=", "[", "]", "\n", "with", "open", "(", "args", ".", "test_list", ",", "'r'", ")", "as", "tf", ":", "\n", "            ", "img_path", "=", "tf", ".", "readlines", "(", ")", "\n", "for", "id", "in", "img_path", ":", "\n", "                ", "img_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'img/%.5d.jpg'", "%", "int", "(", "id", "[", ":", "-", "1", "]", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "img_path", ")", ":", "\n", "                    ", "print", "(", "'The validate images are missing in {}'", ".", "format", "(", "os", ".", "path", ".", "dirname", "(", "img_path", ")", ")", ")", "\n", "print", "(", "'Please pre-process the NYUv2 dataset as README states and provide the correct dataset path.'", ")", "\n", "exit", "(", "1", ")", "\n", "", "tst_lst", ".", "append", "(", "img_path", ")", "\n", "\n", "", "", "print", "(", "'{} samples found'", ".", "format", "(", "len", "(", "tst_lst", ")", ")", ")", "\n", "\n", "# create model", "\n", "network_data", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ")", "\n", "print", "(", "\"=> using pre-trained model '{}'\"", ".", "format", "(", "network_data", "[", "'arch'", "]", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "network_data", "[", "'arch'", "]", "]", "(", "data", "=", "network_data", ")", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "args", ".", "arch", "=", "network_data", "[", "'arch'", "]", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "spixlId", ",", "XY_feat_stack", "=", "init_spixel_grid", "(", "args", ",", "b_train", "=", "False", ")", "\n", "\n", "mean_time", "=", "0", "\n", "for", "n", "in", "range", "(", "len", "(", "tst_lst", ")", ")", ":", "\n", "          ", "time", "=", "test", "(", "args", ",", "model", ",", "tst_lst", ",", "save_path", ",", "spixlId", ",", "n", ",", "scale", ")", "\n", "mean_time", "+=", "time", "\n", "", "print", "(", "\"avg_time per img: %.3f\"", "%", "(", "mean_time", "/", "len", "(", "tst_lst", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.main.main": [[94, 233], ["torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "flow_transforms.Compose", "print", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "print", "print", "tensorboardX.SummaryWriter", "tensorboardX.SummaryWriter", "train_util.init_spixel_grid", "train_util.init_spixel_grid", "range", "datetime.datetime.now().strftime", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "print", "print", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "main.train", "min", "main.save_checkpoint", "os.path.abspath", "flow_transforms.ArrayToTensor", "torchvision.Normalize", "torchvision.Normalize", "flow_transforms.ArrayToTensor", "torchvision.Normalize", "torchvision.Normalize", "flow_transforms.ArrayToTensor", "flow_transforms.RandomCrop", "flow_transforms.RandomVerticalFlip", "flow_transforms.RandomHorizontalFlip", "len", "len", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel().cuda.module.bias_parameters", "torch.nn.DataParallel().cuda.module.weight_parameters", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD.load_state_dict", "os.path.dirname", "tensorboardX.SummaryWriter.add_scalar", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "main.validate", "torch.nn.DataParallel().cuda.module.state_dict", "torch.optim.SGD.state_dict", "main.save_checkpoint", "print", "str", "datetime.datetime.now", "len", "len", "tensorboardX.SummaryWriter.add_scalar"], "function", ["home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.init_spixel_grid", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.init_spixel_grid", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.main.train", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.main.save_checkpoint", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.Spixel_single_layer.SpixelNet.bias_parameters", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.Spixel_single_layer.SpixelNet.weight_parameters", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.main.validate", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.main.save_checkpoint"], ["", "def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_EPE", ",", "save_path", ",", "intrinsic", "\n", "\n", "# ============= savor setting ===================", "\n", "save_path", "=", "'{}_{}_{}epochs{}_b{}_lr{}_posW{}'", ".", "format", "(", "\n", "args", ".", "arch", ",", "\n", "args", ".", "solver", ",", "\n", "args", ".", "epochs", ",", "\n", "'_epochSize'", "+", "str", "(", "args", ".", "epoch_size", ")", "if", "args", ".", "epoch_size", ">", "0", "else", "''", ",", "\n", "args", ".", "batch_size", ",", "\n", "args", ".", "lr", ",", "\n", "args", ".", "pos_weight", ",", "\n", ")", "\n", "if", "not", "args", ".", "no_date", ":", "\n", "        ", "timestamp", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%y_%m_%d_%H_%M\"", ")", "\n", "", "else", ":", "\n", "        ", "timestamp", "=", "''", "\n", "", "save_path", "=", "os", ".", "path", ".", "abspath", "(", "args", ".", "savepath", ")", "+", "'/'", "+", "os", ".", "path", ".", "join", "(", "args", ".", "dataset", ",", "save_path", "+", "'_'", "+", "timestamp", ")", "\n", "\n", "# ==========  Data loading code ==============", "\n", "input_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "flow_transforms", ".", "ArrayToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0", ",", "0", ",", "0", "]", ",", "std", "=", "[", "255", ",", "255", ",", "255", "]", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.411", ",", "0.432", ",", "0.45", "]", ",", "std", "=", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "]", ")", "\n", "\n", "val_input_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "flow_transforms", ".", "ArrayToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0", ",", "0", ",", "0", "]", ",", "std", "=", "[", "255", ",", "255", ",", "255", "]", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.411", ",", "0.432", ",", "0.45", "]", ",", "std", "=", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "]", ")", "\n", "\n", "target_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "flow_transforms", ".", "ArrayToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "co_transform", "=", "flow_transforms", ".", "Compose", "(", "[", "\n", "flow_transforms", ".", "RandomCrop", "(", "(", "args", ".", "train_img_height", ",", "args", ".", "train_img_width", ")", ")", ",", "\n", "flow_transforms", ".", "RandomVerticalFlip", "(", ")", ",", "\n", "flow_transforms", ".", "RandomHorizontalFlip", "(", ")", "\n", "]", ")", "\n", "\n", "print", "(", "\"=> loading img pairs from '{}'\"", ".", "format", "(", "args", ".", "data", ")", ")", "\n", "train_set", ",", "val_set", "=", "datasets", ".", "__dict__", "[", "args", ".", "dataset", "]", "(", "\n", "args", ".", "data", ",", "\n", "transform", "=", "input_transform", ",", "\n", "val_transform", "=", "val_input_transform", ",", "\n", "target_transform", "=", "target_transform", ",", "\n", "co_transform", "=", "co_transform", "\n", ")", "\n", "print", "(", "'{} samples found, {} train samples and {} val samples '", ".", "format", "(", "len", "(", "val_set", ")", "+", "len", "(", "train_set", ")", ",", "\n", "len", "(", "train_set", ")", ",", "\n", "len", "(", "val_set", ")", ")", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "shuffle", "=", "False", ",", "drop_last", "=", "True", ")", "\n", "\n", "# ============== create model ====================", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "network_data", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ")", "\n", "args", ".", "arch", "=", "network_data", "[", "'arch'", "]", "\n", "print", "(", "\"=> using pre-trained model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "", "else", ":", "\n", "        ", "network_data", "=", "None", "\n", "print", "(", "\"=> creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "\n", "", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "data", "=", "network_data", ")", ".", "cuda", "(", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "#=========== creat optimizer, we use adam by default ==================", "\n", "assert", "(", "args", ".", "solver", "in", "[", "'adam'", ",", "'sgd'", "]", ")", "\n", "print", "(", "'=> setting {} solver'", ".", "format", "(", "args", ".", "solver", ")", ")", "\n", "param_groups", "=", "[", "{", "'params'", ":", "model", ".", "module", ".", "bias_parameters", "(", ")", ",", "'weight_decay'", ":", "args", ".", "bias_decay", "}", ",", "\n", "{", "'params'", ":", "model", ".", "module", ".", "weight_parameters", "(", ")", ",", "'weight_decay'", ":", "args", ".", "weight_decay", "}", "]", "\n", "if", "args", ".", "solver", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "param_groups", ",", "args", ".", "lr", ",", "\n", "betas", "=", "(", "args", ".", "momentum", ",", "args", ".", "beta", ")", ")", "\n", "", "elif", "args", ".", "solver", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "param_groups", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ")", "\n", "\n", "# for continues training", "\n", "", "if", "args", ".", "pretrained", "and", "(", "'dataset'", "in", "network_data", ")", ":", "\n", "        ", "if", "args", ".", "pretrained", "and", "args", ".", "dataset", "==", "network_data", "[", "'dataset'", "]", ":", "\n", "            ", "optimizer", ".", "load_state_dict", "(", "network_data", "[", "'optimizer'", "]", ")", "\n", "best_EPE", "=", "network_data", "[", "'best_EPE'", "]", "\n", "args", ".", "start_epoch", "=", "network_data", "[", "'epoch'", "]", "\n", "save_path", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "pretrained", ")", "\n", "\n", "", "", "print", "(", "'=> will save everything to {}'", ".", "format", "(", "save_path", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "train_writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'train'", ")", ")", "\n", "val_writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'val'", ")", ")", "\n", "\n", "# spixelID: superpixel ID for visualization,", "\n", "# XY_feat: the coordinate feature for position loss term", "\n", "spixelID", ",", "XY_feat_stack", "=", "init_spixel_grid", "(", "args", ")", "\n", "val_spixelID", ",", "val_XY_feat_stack", "=", "init_spixel_grid", "(", "args", ",", "b_train", "=", "False", ")", "\n", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "# train for one epoch", "\n", "        ", "train_avg_slic", ",", "train_avg_sem", ",", "iteration", "=", "train", "(", "train_loader", ",", "model", ",", "optimizer", ",", "epoch", ",", "\n", "train_writer", ",", "spixelID", ",", "XY_feat_stack", ")", "\n", "if", "epoch", "%", "args", ".", "record_freq", "==", "0", ":", "\n", "            ", "train_writer", ".", "add_scalar", "(", "'Mean avg_slic'", ",", "train_avg_slic", ",", "epoch", ")", "\n", "\n", "# evaluate on validation set and save the module( and choose the best)", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "avg_slic", ",", "avg_sem", "=", "validate", "(", "val_loader", ",", "model", ",", "epoch", ",", "val_writer", ",", "val_spixelID", ",", "val_XY_feat_stack", ")", "\n", "if", "epoch", "%", "args", ".", "record_freq", "==", "0", ":", "\n", "                ", "val_writer", ".", "add_scalar", "(", "'Mean avg_slic'", ",", "avg_slic", ",", "epoch", ")", "\n", "\n", "", "", "rec_dict", "=", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'best_EPE'", ":", "best_EPE", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'dataset'", ":", "args", ".", "dataset", "\n", "}", "\n", "\n", "if", "(", "iteration", ")", ">=", "(", "args", ".", "milestones", "[", "-", "1", "]", "+", "args", ".", "additional_step", ")", ":", "\n", "            ", "save_checkpoint", "(", "rec_dict", ",", "is_best", "=", "False", ",", "filename", "=", "'%d_step.tar'", "%", "iteration", ")", "\n", "print", "(", "\"Train finished!\"", ")", "\n", "break", "\n", "\n", "", "if", "best_EPE", "<", "0", ":", "\n", "            ", "best_EPE", "=", "avg_sem", "\n", "", "is_best", "=", "avg_sem", "<", "best_EPE", "\n", "best_EPE", "=", "min", "(", "avg_sem", ",", "best_EPE", ")", "\n", "save_checkpoint", "(", "rec_dict", ",", "is_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.main.train": [[235, 333], ["train_util.AverageMeter", "train_util.AverageMeter", "train_util.AverageMeter", "train_util.AverageMeter", "train_util.AverageMeter", "model.train", "time.time", "enumerate", "len", "min", "train_util.label2one_hot_torch", "input.to", "train_util.build_LABXY_feat", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "train_util.AverageMeter.update", "model", "loss.compute_semantic_pos_loss", "optimizer.zero_grad", "slic_loss.backward", "optimizer.step", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "train_util.AverageMeter.update", "time.time", "train_util.AverageMeter.update", "train_util.AverageMeter.update", "train_util.AverageMeter.update", "train_writer.add_scalar", "train_writer.add_scalar", "train_writer.add_scalar", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "train_writer.add_image", "train_writer.add_image", "train_util.update_spixl_map", "train_util.get_spixel_image", "train_writer.add_image", "print", "len", "optimizer.state_dict", "optimizer.load_state_dict", "label.to", "slic_loss.item", "input.to.size", "loss_sem.item", "input.to.size", "loss_pos.item", "input.to.size", "print", "train_writer.add_scalar", "train_writer.add_scalar", "slic_loss.item", "loss_sem.item", "loss_pos.item", "torchvision.utils.make_grid", "time.time", "time.time", "slic_loss.item", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "args.milestones.index"], "function", ["home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.main.train", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.label2one_hot_torch", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.build_LABXY_feat", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.AverageMeter.update", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.loss.compute_semantic_pos_loss", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.AverageMeter.update", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.AverageMeter.update", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.AverageMeter.update", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.AverageMeter.update", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.update_spixl_map", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.get_spixel_image"], ["", "", "def", "train", "(", "train_loader", ",", "model", ",", "optimizer", ",", "epoch", ",", "train_writer", ",", "init_spixl_map_idx", ",", "xy_feat", ")", ":", "\n", "    ", "global", "n_iter", ",", "args", ",", "intrinsic", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "total_loss", "=", "AverageMeter", "(", ")", "\n", "losses_sem", "=", "AverageMeter", "(", ")", "\n", "losses_pos", "=", "AverageMeter", "(", ")", "\n", "\n", "epoch_size", "=", "len", "(", "train_loader", ")", "if", "args", ".", "epoch_size", "==", "0", "else", "min", "(", "len", "(", "train_loader", ")", ",", "args", ".", "epoch_size", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "iteration", "=", "0", "\n", "\n", "for", "i", ",", "(", "input", ",", "label", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "        ", "iteration", "=", "i", "+", "epoch", "*", "epoch_size", "\n", "\n", "# ========== adjust lr if necessary  ===============", "\n", "if", "(", "iteration", "+", "1", ")", "in", "args", ".", "milestones", ":", "\n", "            ", "state_dict", "=", "optimizer", ".", "state_dict", "(", ")", "\n", "for", "param_group", "in", "state_dict", "[", "'param_groups'", "]", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "args", ".", "lr", "*", "(", "(", "0.5", ")", "**", "(", "args", ".", "milestones", ".", "index", "(", "iteration", "+", "1", ")", "+", "1", ")", ")", "\n", "", "optimizer", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "# ========== complete data loading ================", "\n", "", "label_1hot", "=", "label2one_hot_torch", "(", "label", ".", "to", "(", "device", ")", ",", "C", "=", "50", ")", "# set C=50 as SSN does", "\n", "input_gpu", "=", "input", ".", "to", "(", "device", ")", "\n", "LABXY_feat_tensor", "=", "build_LABXY_feat", "(", "label_1hot", ",", "xy_feat", ")", "# B* (50+2 )* H * W", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "\n", "# ========== predict association map ============", "\n", "output", "=", "model", "(", "input_gpu", ")", "\n", "slic_loss", ",", "loss_sem", ",", "loss_pos", "=", "compute_semantic_pos_loss", "(", "output", ",", "LABXY_feat_tensor", ",", "\n", "pos_weight", "=", "args", ".", "pos_weight", ",", "kernel_size", "=", "args", ".", "downsize", ")", "\n", "\n", "# ========= back propagate ===============", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "slic_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# ========  measure batch time ===========", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# =========== record and display the loss ===========", "\n", "# record loss and EPE", "\n", "total_loss", ".", "update", "(", "slic_loss", ".", "item", "(", ")", ",", "input_gpu", ".", "size", "(", "0", ")", ")", "\n", "losses_sem", ".", "update", "(", "loss_sem", ".", "item", "(", ")", ",", "input_gpu", ".", "size", "(", "0", ")", ")", "\n", "losses_pos", ".", "update", "(", "loss_pos", ".", "item", "(", ")", ",", "input_gpu", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'train Epoch: [{0}][{1}/{2}]\\t Time {3}\\t Data {4}\\t Total_loss {5}\\t Loss_sem {6}\\t Loss_pos {7}\\t'", "\n", ".", "format", "(", "epoch", ",", "i", ",", "epoch_size", ",", "batch_time", ",", "data_time", ",", "total_loss", ",", "losses_sem", ",", "losses_pos", ")", ")", "\n", "\n", "train_writer", ".", "add_scalar", "(", "'Train_loss'", ",", "slic_loss", ".", "item", "(", ")", ",", "i", "+", "epoch", "*", "epoch_size", ")", "\n", "train_writer", ".", "add_scalar", "(", "'learning rate'", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "i", "+", "epoch", "*", "epoch_size", ")", "\n", "\n", "", "n_iter", "+=", "1", "\n", "if", "i", ">=", "epoch_size", ":", "\n", "            ", "break", "\n", "\n", "", "if", "(", "iteration", ")", ">=", "(", "args", ".", "milestones", "[", "-", "1", "]", "+", "args", ".", "additional_step", ")", ":", "\n", "            ", "break", "\n", "\n", "# =========== write information to tensorboard ===========", "\n", "", "", "if", "epoch", "%", "args", ".", "record_freq", "==", "0", ":", "\n", "        ", "train_writer", ".", "add_scalar", "(", "'Train_loss_epoch'", ",", "slic_loss", ".", "item", "(", ")", ",", "epoch", ")", "\n", "train_writer", ".", "add_scalar", "(", "'loss_sem'", ",", "loss_sem", ".", "item", "(", ")", ",", "epoch", ")", "\n", "train_writer", ".", "add_scalar", "(", "'loss_pos'", ",", "loss_pos", ".", "item", "(", ")", ",", "epoch", ")", "\n", "\n", "#save image", "\n", "mean_values", "=", "torch", ".", "tensor", "(", "[", "0.411", ",", "0.432", ",", "0.45", "]", ",", "dtype", "=", "input_gpu", ".", "dtype", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "input_l_save", "=", "(", "make_grid", "(", "(", "input", "+", "mean_values", ")", ".", "clamp", "(", "0", ",", "1", ")", ",", "nrow", "=", "args", ".", "batch_size", ")", ")", "\n", "label_save", "=", "make_grid", "(", "args", ".", "label_factor", "*", "label", ")", "\n", "\n", "train_writer", ".", "add_image", "(", "'Input'", ",", "input_l_save", ",", "epoch", ")", "\n", "train_writer", ".", "add_image", "(", "'label'", ",", "label_save", ",", "epoch", ")", "\n", "\n", "curr_spixl_map", "=", "update_spixl_map", "(", "init_spixl_map_idx", ",", "output", ")", "\n", "spixel_lab_save", "=", "make_grid", "(", "curr_spixl_map", ",", "nrow", "=", "args", ".", "batch_size", ")", "[", "0", ",", ":", ",", ":", "]", "\n", "spixel_viz", ",", "_", "=", "get_spixel_image", "(", "input_l_save", ",", "spixel_lab_save", ")", "\n", "train_writer", ".", "add_image", "(", "'Spixel viz'", ",", "spixel_viz", ",", "epoch", ")", "\n", "\n", "#save associ map,  --- for debug only", "\n", "# _, prob_idx = torch.max(output, dim=1, keepdim=True)", "\n", "# prob_map_save = make_grid(assign2uint8(prob_idx))", "\n", "# train_writer.add_image('assigment idx', prob_map_save, epoch)", "\n", "\n", "print", "(", "'==> write train step %dth to tensorboard'", "%", "i", ")", "\n", "\n", "\n", "", "return", "total_loss", ".", "avg", ",", "losses_sem", ".", "avg", ",", "iteration", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.main.validate": [[335, 412], ["train_util.AverageMeter", "train_util.AverageMeter", "train_util.AverageMeter", "train_util.AverageMeter", "train_util.AverageMeter", "min", "model.eval", "time.time", "enumerate", "len", "train_util.label2one_hot_torch", "input.to", "train_util.build_LABXY_feat", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "train_util.AverageMeter.update", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "train_util.AverageMeter.update", "time.time", "train_util.AverageMeter.update", "train_util.AverageMeter.update", "train_util.AverageMeter.update", "val_writer.add_scalar", "val_writer.add_scalar", "val_writer.add_scalar", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torchvision.utils.make_grid", "train_util.update_spixl_map", "train_util.get_spixel_image", "torchvision.utils.make_grid", "val_writer.add_image", "val_writer.add_image", "val_writer.add_image", "print", "label.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "loss.compute_semantic_pos_loss", "slic_loss.item", "input.to.size", "loss_sem.item", "input.to.size", "loss_pos.item", "input.to.size", "print", "slic_loss.item", "loss_sem.item", "loss_pos.item", "torchvision.utils.make_grid", "time.time", "time.time", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.label2one_hot_torch", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.build_LABXY_feat", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.AverageMeter.update", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.AverageMeter.update", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.AverageMeter.update", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.AverageMeter.update", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.AverageMeter.update", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.update_spixl_map", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.get_spixel_image", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.loss.compute_semantic_pos_loss"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "epoch", ",", "val_writer", ",", "init_spixl_map_idx", ",", "xy_feat", ")", ":", "\n", "    ", "global", "n_iter", ",", "args", ",", "intrinsic", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "total_loss", "=", "AverageMeter", "(", ")", "\n", "losses_sem", "=", "AverageMeter", "(", ")", "\n", "losses_pos", "=", "AverageMeter", "(", ")", "\n", "\n", "# set the validation epoch-size, we only randomly val. 400 batches during training to save time", "\n", "epoch_size", "=", "min", "(", "len", "(", "val_loader", ")", ",", "400", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "eval", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", ",", "(", "input", ",", "label", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "\n", "# measure data loading time", "\n", "        ", "label_1hot", "=", "label2one_hot_torch", "(", "label", ".", "to", "(", "device", ")", ",", "C", "=", "50", ")", "\n", "input_gpu", "=", "input", ".", "to", "(", "device", ")", "\n", "LABXY_feat_tensor", "=", "build_LABXY_feat", "(", "label_1hot", ",", "xy_feat", ")", "# B* 50+2 * H * W", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "# compute output", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "model", "(", "input_gpu", ")", "\n", "slic_loss", ",", "loss_sem", ",", "loss_pos", "=", "compute_semantic_pos_loss", "(", "output", ",", "LABXY_feat_tensor", ",", "\n", "pos_weight", "=", "args", ".", "pos_weight", ",", "kernel_size", "=", "args", ".", "downsize", ")", "\n", "\n", "# measure elapsed time", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# record loss and EPE", "\n", "total_loss", ".", "update", "(", "slic_loss", ".", "item", "(", ")", ",", "input_gpu", ".", "size", "(", "0", ")", ")", "\n", "losses_sem", ".", "update", "(", "loss_sem", ".", "item", "(", ")", ",", "input_gpu", ".", "size", "(", "0", ")", ")", "\n", "losses_pos", ".", "update", "(", "loss_pos", ".", "item", "(", ")", ",", "input_gpu", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'val Epoch: [{0}][{1}/{2}]\\t Time {3}\\t Data {4}\\t Total_loss {5}\\t Loss_sem {6}\\t Loss_pos {7}\\t'", "\n", ".", "format", "(", "epoch", ",", "i", ",", "epoch_size", ",", "batch_time", ",", "data_time", ",", "total_loss", ",", "losses_sem", ",", "losses_pos", ")", ")", "\n", "\n", "", "if", "i", ">=", "epoch_size", ":", "\n", "            ", "break", "\n", "\n", "# =============  write result to tensorboard ======================", "\n", "", "", "if", "epoch", "%", "args", ".", "record_freq", "==", "0", ":", "\n", "        ", "val_writer", ".", "add_scalar", "(", "'Train_loss_epoch'", ",", "slic_loss", ".", "item", "(", ")", ",", "epoch", ")", "\n", "val_writer", ".", "add_scalar", "(", "'loss_sem'", ",", "loss_sem", ".", "item", "(", ")", ",", "epoch", ")", "\n", "val_writer", ".", "add_scalar", "(", "'loss_pos'", ",", "loss_pos", ".", "item", "(", ")", ",", "epoch", ")", "\n", "\n", "mean_values", "=", "torch", ".", "tensor", "(", "[", "0.411", ",", "0.432", ",", "0.45", "]", ",", "dtype", "=", "input_gpu", ".", "dtype", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "input_l_save", "=", "(", "make_grid", "(", "(", "input", "+", "mean_values", ")", ".", "clamp", "(", "0", ",", "1", ")", ",", "nrow", "=", "args", ".", "batch_size", ")", ")", "\n", "\n", "\n", "curr_spixl_map", "=", "update_spixl_map", "(", "init_spixl_map_idx", ",", "output", ")", "\n", "spixel_lab_save", "=", "make_grid", "(", "curr_spixl_map", ",", "nrow", "=", "args", ".", "batch_size", ")", "[", "0", ",", ":", ",", ":", "]", "\n", "spixel_viz", ",", "_", "=", "get_spixel_image", "(", "input_l_save", ",", "spixel_lab_save", ")", "\n", "\n", "label_save", "=", "make_grid", "(", "args", ".", "label_factor", "*", "label", ")", "\n", "\n", "val_writer", ".", "add_image", "(", "'Input'", ",", "input_l_save", ",", "epoch", ")", "\n", "val_writer", ".", "add_image", "(", "'label'", ",", "label_save", ",", "epoch", ")", "\n", "val_writer", ".", "add_image", "(", "'Spixel viz'", ",", "spixel_viz", ",", "epoch", ")", "\n", "\n", "# --- for debug", "\n", "#     _, prob_idx = torch.max(assign, dim=1, keepdim=True)", "\n", "#     prob_map_save = make_grid(assign2uint8(prob_idx))", "\n", "#     val_writer.add_image('assigment idx level %d' % j, prob_map_save, epoch)", "\n", "\n", "print", "(", "'==> write val step %dth to tensorboard'", "%", "i", ")", "\n", "\n", "\n", "", "return", "total_loss", ".", "avg", ",", "losses_sem", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.main.save_checkpoint": [[414, 418], ["torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "shutil.copyfile", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.tar'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "filename", ")", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "filename", ")", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "'model_best.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.AverageMeter.__init__": [[267, 269], ["train_util.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.AverageMeter.reset": [[270, 275], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.AverageMeter.update": [[276, 281], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.AverageMeter.__repr__": [[282, 284], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{:.3f} ({:.3f})'", ".", "format", "(", "self", ".", "val", ",", "self", ".", "avg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.init_spixel_grid": [[11, 48], ["int", "int", "int", "int", "numpy.int32", "train_util.shift9pos", "numpy.repeat", "torch.from_numpy().type().cuda", "torch.from_numpy().type().cuda", "int", "int", "numpy.arange", "numpy.arange", "numpy.array", "numpy.concatenate", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "numpy.floor", "numpy.floor", "numpy.arange().reshape", "numpy.repeat", "numpy.floor", "numpy.floor", "numpy.meshgrid", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy", "torch.from_numpy", "numpy.arange", "numpy.tile().astype", "torch.from_numpy", "torch.from_numpy", "numpy.tile", "numpy.tile"], "function", ["home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.shift9pos"], ["def", "init_spixel_grid", "(", "args", ",", "b_train", "=", "True", ")", ":", "\n", "    ", "if", "b_train", ":", "\n", "        ", "img_height", ",", "img_width", "=", "args", ".", "train_img_height", ",", "args", ".", "train_img_width", "\n", "", "else", ":", "\n", "        ", "img_height", ",", "img_width", "=", "args", ".", "input_img_height", ",", "args", ".", "input_img_width", "\n", "\n", "# get spixel id for the final assignment", "\n", "", "n_spixl_h", "=", "int", "(", "np", ".", "floor", "(", "img_height", "/", "args", ".", "downsize", ")", ")", "\n", "n_spixl_w", "=", "int", "(", "np", ".", "floor", "(", "img_width", "/", "args", ".", "downsize", ")", ")", "\n", "\n", "spixel_height", "=", "int", "(", "img_height", "/", "(", "1.", "*", "n_spixl_h", ")", ")", "\n", "spixel_width", "=", "int", "(", "img_width", "/", "(", "1.", "*", "n_spixl_w", ")", ")", "\n", "\n", "spix_values", "=", "np", ".", "int32", "(", "np", ".", "arange", "(", "0", ",", "n_spixl_w", "*", "n_spixl_h", ")", ".", "reshape", "(", "(", "n_spixl_h", ",", "n_spixl_w", ")", ")", ")", "\n", "spix_idx_tensor_", "=", "shift9pos", "(", "spix_values", ")", "\n", "\n", "spix_idx_tensor", "=", "np", ".", "repeat", "(", "\n", "np", ".", "repeat", "(", "spix_idx_tensor_", ",", "spixel_height", ",", "axis", "=", "1", ")", ",", "spixel_width", ",", "axis", "=", "2", ")", "\n", "\n", "torch_spix_idx_tensor", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "tile", "(", "spix_idx_tensor", ",", "(", "args", ".", "batch_size", ",", "1", ",", "1", ",", "1", ")", ")", ")", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "\n", "\n", "curr_img_height", "=", "int", "(", "np", ".", "floor", "(", "img_height", ")", ")", "\n", "curr_img_width", "=", "int", "(", "np", ".", "floor", "(", "img_width", ")", ")", "\n", "\n", "# pixel coord", "\n", "all_h_coords", "=", "np", ".", "arange", "(", "0", ",", "curr_img_height", ",", "1", ")", "\n", "all_w_coords", "=", "np", ".", "arange", "(", "0", ",", "curr_img_width", ",", "1", ")", "\n", "curr_pxl_coord", "=", "np", ".", "array", "(", "np", ".", "meshgrid", "(", "all_h_coords", ",", "all_w_coords", ",", "indexing", "=", "'ij'", ")", ")", "\n", "\n", "coord_tensor", "=", "np", ".", "concatenate", "(", "[", "curr_pxl_coord", "[", "1", ":", "2", ",", ":", ",", ":", "]", ",", "curr_pxl_coord", "[", ":", "1", ",", ":", ",", ":", "]", "]", ")", "\n", "\n", "all_XY_feat", "=", "(", "torch", ".", "from_numpy", "(", "\n", "np", ".", "tile", "(", "coord_tensor", ",", "(", "args", ".", "batch_size", ",", "1", ",", "1", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "cuda", "(", ")", ")", "\n", "\n", "return", "torch_spix_idx_tensor", ",", "all_XY_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.shift9pos": [[51, 73], ["numpy.pad", "numpy.expand_dims", "numpy.concatenate"], "function", ["None"], ["", "def", "shift9pos", "(", "input", ",", "h_shift_unit", "=", "1", ",", "w_shift_unit", "=", "1", ")", ":", "\n", "# input should be padding as (c, 1+ height+1, 1+width+1)", "\n", "    ", "input_pd", "=", "np", ".", "pad", "(", "input", ",", "(", "(", "h_shift_unit", ",", "h_shift_unit", ")", ",", "(", "w_shift_unit", ",", "w_shift_unit", ")", ")", ",", "mode", "=", "'edge'", ")", "\n", "input_pd", "=", "np", ".", "expand_dims", "(", "input_pd", ",", "axis", "=", "0", ")", "\n", "\n", "# assign to ...", "\n", "top", "=", "input_pd", "[", ":", ",", ":", "-", "2", "*", "h_shift_unit", ",", "w_shift_unit", ":", "-", "w_shift_unit", "]", "\n", "bottom", "=", "input_pd", "[", ":", ",", "2", "*", "h_shift_unit", ":", ",", "w_shift_unit", ":", "-", "w_shift_unit", "]", "\n", "left", "=", "input_pd", "[", ":", ",", "h_shift_unit", ":", "-", "h_shift_unit", ",", ":", "-", "2", "*", "w_shift_unit", "]", "\n", "right", "=", "input_pd", "[", ":", ",", "h_shift_unit", ":", "-", "h_shift_unit", ",", "2", "*", "w_shift_unit", ":", "]", "\n", "\n", "center", "=", "input_pd", "[", ":", ",", "h_shift_unit", ":", "-", "h_shift_unit", ",", "w_shift_unit", ":", "-", "w_shift_unit", "]", "\n", "\n", "bottom_right", "=", "input_pd", "[", ":", ",", "2", "*", "h_shift_unit", ":", ",", "2", "*", "w_shift_unit", ":", "]", "\n", "bottom_left", "=", "input_pd", "[", ":", ",", "2", "*", "h_shift_unit", ":", ",", ":", "-", "2", "*", "w_shift_unit", "]", "\n", "top_right", "=", "input_pd", "[", ":", ",", ":", "-", "2", "*", "h_shift_unit", ",", "2", "*", "w_shift_unit", ":", "]", "\n", "top_left", "=", "input_pd", "[", ":", ",", ":", "-", "2", "*", "h_shift_unit", ",", ":", "-", "2", "*", "w_shift_unit", "]", "\n", "\n", "shift_tensor", "=", "np", ".", "concatenate", "(", "[", "top_left", ",", "top", ",", "top_right", ",", "\n", "left", ",", "center", ",", "right", ",", "\n", "bottom_left", ",", "bottom", ",", "bottom_right", "]", ",", "axis", "=", "0", ")", "\n", "return", "shift_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.poolfeat": [[75, 129], ["torch.cat", "torch.cat", "torch.avg_pool2d", "send_to_top_left[].clone", "send_to_top_left[].clone", "torch.avg_pool2d", "train_util.poolfeat.feat_prob_sum"], "function", ["None"], ["", "def", "poolfeat", "(", "input", ",", "prob", ",", "sp_h", "=", "2", ",", "sp_w", "=", "2", ")", ":", "\n", "\n", "    ", "def", "feat_prob_sum", "(", "feat_sum", ",", "prob_sum", ",", "shift_feat", ")", ":", "\n", "        ", "feat_sum", "+=", "shift_feat", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "prob_sum", "+=", "shift_feat", "[", ":", ",", "-", "1", ":", ",", ":", ",", ":", "]", "\n", "return", "feat_sum", ",", "prob_sum", "\n", "\n", "", "b", ",", "_", ",", "h", ",", "w", "=", "input", ".", "shape", "\n", "\n", "h_shift_unit", "=", "1", "\n", "w_shift_unit", "=", "1", "\n", "p2d", "=", "(", "w_shift_unit", ",", "w_shift_unit", ",", "h_shift_unit", ",", "h_shift_unit", ")", "\n", "feat_", "=", "torch", ".", "cat", "(", "[", "input", ",", "torch", ".", "ones", "(", "[", "b", ",", "1", ",", "h", ",", "w", "]", ")", ".", "cuda", "(", ")", "]", ",", "dim", "=", "1", ")", "# b* (n+1) *h*w", "\n", "prob_feat", "=", "F", ".", "avg_pool2d", "(", "feat_", "*", "prob", ".", "narrow", "(", "1", ",", "0", ",", "1", ")", ",", "kernel_size", "=", "(", "sp_h", ",", "sp_w", ")", ",", "stride", "=", "(", "sp_h", ",", "sp_w", ")", ")", "# b * (n+1) * h* w", "\n", "send_to_top_left", "=", "F", ".", "pad", "(", "prob_feat", ",", "p2d", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "[", ":", ",", ":", ",", "2", "*", "h_shift_unit", ":", ",", "2", "*", "w_shift_unit", ":", "]", "\n", "feat_sum", "=", "send_to_top_left", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "prob_sum", "=", "send_to_top_left", "[", ":", ",", "-", "1", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "\n", "prob_feat", "=", "F", ".", "avg_pool2d", "(", "feat_", "*", "prob", ".", "narrow", "(", "1", ",", "1", ",", "1", ")", ",", "kernel_size", "=", "(", "sp_h", ",", "sp_w", ")", ",", "stride", "=", "(", "sp_h", ",", "sp_w", ")", ")", "# b * (n+1) * h* w", "\n", "top", "=", "F", ".", "pad", "(", "prob_feat", ",", "p2d", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "[", ":", ",", ":", ",", "2", "*", "h_shift_unit", ":", ",", "w_shift_unit", ":", "-", "w_shift_unit", "]", "\n", "feat_sum", ",", "prob_sum", "=", "feat_prob_sum", "(", "feat_sum", ",", "prob_sum", ",", "top", ")", "\n", "\n", "prob_feat", "=", "F", ".", "avg_pool2d", "(", "feat_", "*", "prob", ".", "narrow", "(", "1", ",", "2", ",", "1", ")", ",", "kernel_size", "=", "(", "sp_h", ",", "sp_w", ")", ",", "stride", "=", "(", "sp_h", ",", "sp_w", ")", ")", "# b * (n+1) * h* w", "\n", "top_right", "=", "F", ".", "pad", "(", "prob_feat", ",", "p2d", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "[", ":", ",", ":", ",", "2", "*", "h_shift_unit", ":", ",", ":", "-", "2", "*", "w_shift_unit", "]", "\n", "feat_sum", ",", "prob_sum", "=", "feat_prob_sum", "(", "feat_sum", ",", "prob_sum", ",", "top_right", ")", "\n", "\n", "prob_feat", "=", "F", ".", "avg_pool2d", "(", "feat_", "*", "prob", ".", "narrow", "(", "1", ",", "3", ",", "1", ")", ",", "kernel_size", "=", "(", "sp_h", ",", "sp_w", ")", ",", "stride", "=", "(", "sp_h", ",", "sp_w", ")", ")", "# b * (n+1) * h* w", "\n", "left", "=", "F", ".", "pad", "(", "prob_feat", ",", "p2d", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "[", ":", ",", ":", ",", "h_shift_unit", ":", "-", "h_shift_unit", ",", "2", "*", "w_shift_unit", ":", "]", "\n", "feat_sum", ",", "prob_sum", "=", "feat_prob_sum", "(", "feat_sum", ",", "prob_sum", ",", "left", ")", "\n", "\n", "prob_feat", "=", "F", ".", "avg_pool2d", "(", "feat_", "*", "prob", ".", "narrow", "(", "1", ",", "4", ",", "1", ")", ",", "kernel_size", "=", "(", "sp_h", ",", "sp_w", ")", ",", "stride", "=", "(", "sp_h", ",", "sp_w", ")", ")", "# b * (n+1) * h* w", "\n", "center", "=", "F", ".", "pad", "(", "prob_feat", ",", "p2d", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "[", ":", ",", ":", ",", "h_shift_unit", ":", "-", "h_shift_unit", ",", "w_shift_unit", ":", "-", "w_shift_unit", "]", "\n", "feat_sum", ",", "prob_sum", "=", "feat_prob_sum", "(", "feat_sum", ",", "prob_sum", ",", "center", ")", "\n", "\n", "prob_feat", "=", "F", ".", "avg_pool2d", "(", "feat_", "*", "prob", ".", "narrow", "(", "1", ",", "5", ",", "1", ")", ",", "kernel_size", "=", "(", "sp_h", ",", "sp_w", ")", ",", "stride", "=", "(", "sp_h", ",", "sp_w", ")", ")", "# b * (n+1) * h* w", "\n", "right", "=", "F", ".", "pad", "(", "prob_feat", ",", "p2d", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "[", ":", ",", ":", ",", "h_shift_unit", ":", "-", "h_shift_unit", ",", ":", "-", "2", "*", "w_shift_unit", "]", "\n", "feat_sum", ",", "prob_sum", "=", "feat_prob_sum", "(", "feat_sum", ",", "prob_sum", ",", "right", ")", "\n", "\n", "prob_feat", "=", "F", ".", "avg_pool2d", "(", "feat_", "*", "prob", ".", "narrow", "(", "1", ",", "6", ",", "1", ")", ",", "kernel_size", "=", "(", "sp_h", ",", "sp_w", ")", ",", "stride", "=", "(", "sp_h", ",", "sp_w", ")", ")", "# b * (n+1) * h* w", "\n", "bottom_left", "=", "F", ".", "pad", "(", "prob_feat", ",", "p2d", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "[", ":", ",", ":", ",", ":", "-", "2", "*", "h_shift_unit", ",", "2", "*", "w_shift_unit", ":", "]", "\n", "feat_sum", ",", "prob_sum", "=", "feat_prob_sum", "(", "feat_sum", ",", "prob_sum", ",", "bottom_left", ")", "\n", "\n", "prob_feat", "=", "F", ".", "avg_pool2d", "(", "feat_", "*", "prob", ".", "narrow", "(", "1", ",", "7", ",", "1", ")", ",", "kernel_size", "=", "(", "sp_h", ",", "sp_w", ")", ",", "stride", "=", "(", "sp_h", ",", "sp_w", ")", ")", "# b * (n+1) * h* w", "\n", "bottom", "=", "F", ".", "pad", "(", "prob_feat", ",", "p2d", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "[", ":", ",", ":", ",", ":", "-", "2", "*", "h_shift_unit", ",", "w_shift_unit", ":", "-", "w_shift_unit", "]", "\n", "feat_sum", ",", "prob_sum", "=", "feat_prob_sum", "(", "feat_sum", ",", "prob_sum", ",", "bottom", ")", "\n", "\n", "prob_feat", "=", "F", ".", "avg_pool2d", "(", "feat_", "*", "prob", ".", "narrow", "(", "1", ",", "8", ",", "1", ")", ",", "kernel_size", "=", "(", "sp_h", ",", "sp_w", ")", ",", "stride", "=", "(", "sp_h", ",", "sp_w", ")", ")", "# b * (n+1) * h* w", "\n", "bottom_right", "=", "F", ".", "pad", "(", "prob_feat", ",", "p2d", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "[", ":", ",", ":", ",", ":", "-", "2", "*", "h_shift_unit", ",", ":", "-", "2", "*", "w_shift_unit", "]", "\n", "feat_sum", ",", "prob_sum", "=", "feat_prob_sum", "(", "feat_sum", ",", "prob_sum", ",", "bottom_right", ")", "\n", "\n", "\n", "pooled_feat", "=", "feat_sum", "/", "(", "prob_sum", "+", "1e-8", ")", "\n", "\n", "return", "pooled_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.upfeat": [[130, 169], ["torch.pad", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "prob.narrow", "prob.narrow", "prob.narrow", "prob.narrow", "prob.narrow", "prob.narrow", "prob.narrow", "prob.narrow", "prob.narrow"], "function", ["None"], ["", "def", "upfeat", "(", "input", ",", "prob", ",", "up_h", "=", "2", ",", "up_w", "=", "2", ")", ":", "\n", "# input b*n*H*W  downsampled", "\n", "# prob b*9*h*w", "\n", "    ", "b", ",", "c", ",", "h", ",", "w", "=", "input", ".", "shape", "\n", "\n", "h_shift", "=", "1", "\n", "w_shift", "=", "1", "\n", "\n", "p2d", "=", "(", "w_shift", ",", "w_shift", ",", "h_shift", ",", "h_shift", ")", "\n", "feat_pd", "=", "F", ".", "pad", "(", "input", ",", "p2d", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "\n", "\n", "gt_frm_top_left", "=", "F", ".", "interpolate", "(", "feat_pd", "[", ":", ",", ":", ",", ":", "-", "2", "*", "h_shift", ",", ":", "-", "2", "*", "w_shift", "]", ",", "size", "=", "(", "h", "*", "up_h", ",", "w", "*", "up_w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat_sum", "=", "gt_frm_top_left", "*", "prob", ".", "narrow", "(", "1", ",", "0", ",", "1", ")", "\n", "\n", "top", "=", "F", ".", "interpolate", "(", "feat_pd", "[", ":", ",", ":", ",", ":", "-", "2", "*", "h_shift", ",", "w_shift", ":", "-", "w_shift", "]", ",", "size", "=", "(", "h", "*", "up_h", ",", "w", "*", "up_w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat_sum", "+=", "top", "*", "prob", ".", "narrow", "(", "1", ",", "1", ",", "1", ")", "\n", "\n", "top_right", "=", "F", ".", "interpolate", "(", "feat_pd", "[", ":", ",", ":", ",", ":", "-", "2", "*", "h_shift", ",", "2", "*", "w_shift", ":", "]", ",", "size", "=", "(", "h", "*", "up_h", ",", "w", "*", "up_w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat_sum", "+=", "top_right", "*", "prob", ".", "narrow", "(", "1", ",", "2", ",", "1", ")", "\n", "\n", "left", "=", "F", ".", "interpolate", "(", "feat_pd", "[", ":", ",", ":", ",", "h_shift", ":", "-", "w_shift", ",", ":", "-", "2", "*", "w_shift", "]", ",", "size", "=", "(", "h", "*", "up_h", ",", "w", "*", "up_w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat_sum", "+=", "left", "*", "prob", ".", "narrow", "(", "1", ",", "3", ",", "1", ")", "\n", "\n", "center", "=", "F", ".", "interpolate", "(", "input", ",", "(", "h", "*", "up_h", ",", "w", "*", "up_w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat_sum", "+=", "center", "*", "prob", ".", "narrow", "(", "1", ",", "4", ",", "1", ")", "\n", "\n", "right", "=", "F", ".", "interpolate", "(", "feat_pd", "[", ":", ",", ":", ",", "h_shift", ":", "-", "w_shift", ",", "2", "*", "w_shift", ":", "]", ",", "size", "=", "(", "h", "*", "up_h", ",", "w", "*", "up_w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat_sum", "+=", "right", "*", "prob", ".", "narrow", "(", "1", ",", "5", ",", "1", ")", "\n", "\n", "bottom_left", "=", "F", ".", "interpolate", "(", "feat_pd", "[", ":", ",", ":", ",", "2", "*", "h_shift", ":", ",", ":", "-", "2", "*", "w_shift", "]", ",", "size", "=", "(", "h", "*", "up_h", ",", "w", "*", "up_w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat_sum", "+=", "bottom_left", "*", "prob", ".", "narrow", "(", "1", ",", "6", ",", "1", ")", "\n", "\n", "bottom", "=", "F", ".", "interpolate", "(", "feat_pd", "[", ":", ",", ":", ",", "2", "*", "h_shift", ":", ",", "w_shift", ":", "-", "w_shift", "]", ",", "size", "=", "(", "h", "*", "up_h", ",", "w", "*", "up_w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat_sum", "+=", "bottom", "*", "prob", ".", "narrow", "(", "1", ",", "7", ",", "1", ")", "\n", "\n", "bottom_right", "=", "F", ".", "interpolate", "(", "feat_pd", "[", ":", ",", ":", ",", "2", "*", "h_shift", ":", ",", "2", "*", "w_shift", ":", "]", ",", "size", "=", "(", "h", "*", "up_h", ",", "w", "*", "up_w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat_sum", "+=", "bottom_right", "*", "prob", ".", "narrow", "(", "1", ",", "8", ",", "1", ")", "\n", "\n", "return", "feat_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.assign2uint8": [[172, 194], ["torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "assign.type", "assign.type", "assign.type", "assign.type", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "assign.type", "assign.type", "assign.type"], "function", ["None"], ["", "def", "assign2uint8", "(", "assign", ")", ":", "\n", "#red up, green mid, blue down, for debug only", "\n", "    ", "b", ",", "c", ",", "h", ",", "w", "=", "assign", ".", "shape", "\n", "\n", "red", "=", "torch", ".", "cat", "(", "[", "torch", ".", "ones", "(", "size", "=", "assign", ".", "shape", ")", ",", "torch", ".", "zeros", "(", "size", "=", "[", "b", ",", "2", ",", "h", ",", "w", "]", ")", "]", ",", "dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "green", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "size", "=", "[", "b", ",", "1", ",", "h", ",", "w", "]", ")", ",", "\n", "torch", ".", "ones", "(", "size", "=", "assign", ".", "shape", ")", ",", "\n", "torch", ".", "zeros", "(", "size", "=", "[", "b", ",", "1", ",", "h", ",", "w", "]", ")", "]", ",", "dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "blue", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "size", "=", "[", "b", ",", "2", ",", "h", ",", "w", "]", ")", ",", "\n", "torch", ".", "ones", "(", "size", "=", "assign", ".", "shape", ")", "]", ",", "dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "black", "=", "torch", ".", "zeros", "(", "size", "=", "[", "b", ",", "3", ",", "h", ",", "w", "]", ")", ".", "cuda", "(", ")", "\n", "white", "=", "torch", ".", "ones", "(", "size", "=", "[", "b", ",", "3", ",", "h", ",", "w", "]", ")", ".", "cuda", "(", ")", "\n", "# up probablity", "\n", "mat_vis", "=", "torch", ".", "where", "(", "assign", ".", "type", "(", "torch", ".", "float", ")", "<", "0.", ",", "white", ",", "black", ")", "\n", "mat_vis", "=", "torch", ".", "where", "(", "assign", ".", "type", "(", "torch", ".", "float", ")", ">=", "0.", ",", "red", "*", "(", "assign", ".", "type", "(", "torch", ".", "float", ")", "+", "1", ")", "/", "3", ",", "mat_vis", ")", "\n", "mat_vis", "=", "torch", ".", "where", "(", "assign", ".", "type", "(", "torch", ".", "float", ")", ">=", "3.", ",", "green", "*", "(", "assign", ".", "type", "(", "torch", ".", "float", ")", "-", "2", ")", "/", "3", ",", "mat_vis", ")", "\n", "mat_vis", "=", "torch", ".", "where", "(", "assign", ".", "type", "(", "torch", ".", "float", ")", ">=", "6.", ",", "blue", "*", "(", "assign", ".", "type", "(", "torch", ".", "float", ")", "-", "5.", ")", "/", "3", ",", "mat_vis", ")", "\n", "\n", "return", "(", "mat_vis", "*", "255.", ")", ".", "type", "(", "torch", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.val2uint8": [[195, 199], ["torch.where", "torch.where", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones"], "function", ["None"], ["", "def", "val2uint8", "(", "mat", ",", "maxVal", ")", ":", "\n", "    ", "maxVal_mat", "=", "torch", ".", "ones", "(", "mat", ".", "shape", ")", ".", "cuda", "(", ")", "*", "maxVal", "\n", "mat_vis", "=", "torch", ".", "where", "(", "mat", ">", "maxVal_mat", ",", "maxVal_mat", ",", "mat", ")", "\n", "return", "(", "mat_vis", "*", "255.", "/", "maxVal", ")", ".", "type", "(", "torch", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.update_spixl_map": [[201, 218], ["assig_map_in.clone", "torch.max", "torch.max", "torch.where", "torch.where", "torch.sum().type", "torch.sum().type", "torch.interpolate", "torch.ones().cuda", "torch.ones().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.sum", "torch.sum", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "update_spixl_map", "(", "spixl_map_idx_in", ",", "assig_map_in", ")", ":", "\n", "    ", "assig_map", "=", "assig_map_in", ".", "clone", "(", ")", "\n", "\n", "b", ",", "_", ",", "h", ",", "w", "=", "assig_map", ".", "shape", "\n", "_", ",", "_", ",", "id_h", ",", "id_w", "=", "spixl_map_idx_in", ".", "shape", "\n", "\n", "if", "(", "id_h", "==", "h", ")", "and", "(", "id_w", "==", "w", ")", ":", "\n", "        ", "spixl_map_idx", "=", "spixl_map_idx_in", "\n", "", "else", ":", "\n", "        ", "spixl_map_idx", "=", "F", ".", "interpolate", "(", "spixl_map_idx_in", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "", "assig_max", ",", "_", "=", "torch", ".", "max", "(", "assig_map", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "assignment_", "=", "torch", ".", "where", "(", "assig_map", "==", "assig_max", ",", "torch", ".", "ones", "(", "assig_map", ".", "shape", ")", ".", "cuda", "(", ")", ",", "torch", ".", "zeros", "(", "assig_map", ".", "shape", ")", ".", "cuda", "(", ")", ")", "\n", "new_spixl_map_", "=", "spixl_map_idx", "*", "assignment_", "# winner take all", "\n", "new_spixl_map", "=", "torch", ".", "sum", "(", "new_spixl_map_", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "type", "(", "torch", ".", "int", ")", "\n", "\n", "return", "new_spixl_map", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.get_spixel_image": [[220, 245], ["cv2.resize", "numpy.max", "skimage.segmentation.mark_boundaries", "isinstance", "given_img.detach().cpu().numpy().transpose", "isinstance", "spix_index.detach().cpu().numpy().transpose", "spix_index_np.astype.astype", "int", "int", "spix_index_np.astype.astype", "connectivity.enforce_connectivity", "given_img.detach().cpu().numpy", "spix_index.detach().cpu().numpy", "int", "given_img.detach().cpu", "spix_index.detach().cpu", "given_img.detach", "spix_index.detach"], "function", ["None"], ["", "def", "get_spixel_image", "(", "given_img", ",", "spix_index", ",", "n_spixels", "=", "600", ",", "b_enforce_connect", "=", "False", ")", ":", "\n", "\n", "    ", "if", "not", "isinstance", "(", "given_img", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "given_img_np_", "=", "given_img", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "", "else", ":", "# for cvt lab to rgb case", "\n", "        ", "given_img_np_", "=", "given_img", "\n", "\n", "", "if", "not", "isinstance", "(", "spix_index", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "spix_index_np", "=", "spix_index", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "spix_index_np", "=", "spix_index", "\n", "\n", "\n", "", "h", ",", "w", "=", "spix_index_np", ".", "shape", "\n", "given_img_np", "=", "cv2", ".", "resize", "(", "given_img_np_", ",", "dsize", "=", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "\n", "if", "b_enforce_connect", ":", "\n", "        ", "spix_index_np", "=", "spix_index_np", ".", "astype", "(", "np", ".", "int64", ")", "\n", "segment_size", "=", "(", "given_img_np_", ".", "shape", "[", "0", "]", "*", "given_img_np_", ".", "shape", "[", "1", "]", ")", "/", "(", "int", "(", "n_spixels", ")", "*", "1.0", ")", "\n", "min_size", "=", "int", "(", "0.06", "*", "segment_size", ")", "\n", "max_size", "=", "int", "(", "3", "*", "segment_size", ")", "\n", "spix_index_np", "=", "enforce_connectivity", "(", "spix_index_np", "[", "None", ",", ":", ",", ":", "]", ",", "min_size", ",", "max_size", ")", "[", "0", "]", "\n", "", "cur_max", "=", "np", ".", "max", "(", "given_img_np", ")", "\n", "spixel_bd_image", "=", "mark_boundaries", "(", "given_img_np", "/", "cur_max", ",", "spix_index_np", ".", "astype", "(", "int", ")", ",", "color", "=", "(", "0", ",", "1", ",", "1", ")", ")", "#cyna", "\n", "return", "(", "cur_max", "*", "spixel_bd_image", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ",", "spix_index_np", "#", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.spixlIdx": [[247, 263], ["numpy.int32", "train_util.shift9pos", "torch.from_numpy().type().cuda", "torch.from_numpy().type().cuda", "int", "int", "int", "int", "numpy.arange().reshape", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "torch.from_numpy().type", "torch.from_numpy().type", "numpy.arange", "torch.from_numpy", "torch.from_numpy", "numpy.tile"], "function", ["home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.shift9pos"], ["", "def", "spixlIdx", "(", "args", ",", "b_train", "=", "False", ")", ":", "\n", "# code modified from ssn", "\n", "    ", "if", "b_train", ":", "\n", "        ", "n_spixl_h", "=", "int", "(", "np", ".", "floor", "(", "args", ".", "train_img_height", "/", "args", ".", "downsize", ")", ")", "\n", "n_spixl_w", "=", "int", "(", "np", ".", "floor", "(", "args", ".", "train_img_width", "/", "args", ".", "downsize", ")", ")", "\n", "", "else", ":", "\n", "        ", "n_spixl_h", "=", "int", "(", "np", ".", "floor", "(", "args", ".", "input_img_height", "/", "args", ".", "downsize", ")", ")", "\n", "n_spixl_w", "=", "int", "(", "np", ".", "floor", "(", "args", ".", "input_img_width", "/", "args", ".", "downsize", ")", ")", "\n", "\n", "", "spix_values", "=", "np", ".", "int32", "(", "np", ".", "arange", "(", "0", ",", "n_spixl_w", "*", "n_spixl_h", ")", ".", "reshape", "(", "(", "n_spixl_h", ",", "n_spixl_w", ")", ")", ")", "\n", "spix_idx_tensor", "=", "shift9pos", "(", "spix_values", ")", "\n", "\n", "torch_spix_idx_tensor", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "tile", "(", "spix_idx_tensor", ",", "(", "args", ".", "batch_size", ",", "1", ",", "1", ",", "1", ")", ")", ")", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "torch_spix_idx_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.batch2img": [[285, 294], ["img.permute", "range", "torch.cat", "torch.cat"], "function", ["None"], ["", "", "def", "batch2img", "(", "img", ")", ":", "\n", "    ", "b", ",", "_", ",", "h", ",", "w", "=", "img", ".", "shape", "\n", "tmp", "=", "img", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "b", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "tmp_stack", "=", "tmp", "[", "i", ",", ":", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "tmp_stack", "=", "torch", ".", "cat", "(", "[", "tmp_stack", ",", "tmp", "[", "i", ",", ":", ",", ":", ",", ":", "]", "]", ",", "dim", "=", "-", "2", ")", "\n", "", "", "return", "tmp_stack", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.build_LABXY_feat": [[296, 305], ["label_in.clone().type", "torch.interpolate", "torch.cat", "torch.cat", "label_in.clone"], "function", ["None"], ["", "def", "build_LABXY_feat", "(", "label_in", ",", "XY_feat", ")", ":", "\n", "\n", "    ", "img_lab", "=", "label_in", ".", "clone", "(", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "\n", "b", ",", "_", ",", "curr_img_height", ",", "curr_img_width", "=", "XY_feat", ".", "shape", "\n", "scale_img", "=", "F", ".", "interpolate", "(", "img_lab", ",", "size", "=", "(", "curr_img_height", ",", "curr_img_width", ")", ",", "mode", "=", "'nearest'", ")", "\n", "LABXY_feat", "=", "torch", ".", "cat", "(", "[", "scale_img", ",", "XY_feat", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "LABXY_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.rgb2Lab_torch": [[307, 344], ["torch.pow", "torch.pow", "torch.tensor().cuda", "torch.tensor().cuda", "img.permute", "torch.matmul", "torch.matmul", "torch.tensor().cuda", "torch.tensor().cuda", "torch.pow", "torch.pow", "torch.cat().permute", "torch.cat().permute", "torch.tensor().cuda.transpose_", "img_in.min", "img_in.max", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat", "img_in.clone", "mean_values.cuda"], "function", ["None"], ["", "def", "rgb2Lab_torch", "(", "img_in", ",", "mean_values", "=", "None", ")", ":", "\n", "# self implemented function that convert RGB image to LAB", "\n", "# inpu img intense should be [0,1] float b*3*h*w", "\n", "    ", "assert", "img_in", ".", "min", "(", ")", ">=", "0", "and", "img_in", ".", "max", "(", ")", "<=", "1", "\n", "\n", "img", "=", "(", "img_in", ".", "clone", "(", ")", "+", "mean_values", ".", "cuda", "(", ")", ")", ".", "clamp", "(", "0", ",", "1", ")", "\n", "\n", "mask", "=", "img", ">", "0.04045", "\n", "img", "[", "mask", "]", "=", "torch", ".", "pow", "(", "(", "img", "[", "mask", "]", "+", "0.055", ")", "/", "1.055", ",", "2.4", ")", "\n", "img", "[", "~", "mask", "]", "/=", "12.92", "\n", "\n", "xyz_from_rgb", "=", "torch", ".", "tensor", "(", "[", "[", "0.412453", ",", "0.357580", ",", "0.180423", "]", ",", "\n", "[", "0.212671", ",", "0.715160", ",", "0.072169", "]", ",", "\n", "[", "0.019334", ",", "0.119193", ",", "0.950227", "]", "]", ")", ".", "cuda", "(", ")", "\n", "rgb", "=", "img", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n", "xyz_img", "=", "torch", ".", "matmul", "(", "rgb", ",", "xyz_from_rgb", ".", "transpose_", "(", "0", ",", "1", ")", ")", "\n", "\n", "\n", "xyz_ref_white", "=", "torch", ".", "tensor", "(", "[", "0.95047", ",", "1.", ",", "1.08883", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "# scale by CIE XYZ tristimulus values of the reference white point", "\n", "lab", "=", "xyz_img", "/", "xyz_ref_white", "\n", "\n", "# Nonlinear distortion and linear transformation", "\n", "mask", "=", "lab", ">", "0.008856", "\n", "lab", "[", "mask", "]", "=", "torch", ".", "pow", "(", "lab", "[", "mask", "]", ",", "1.", "/", "3.", ")", "\n", "lab", "[", "~", "mask", "]", "=", "7.787", "*", "lab", "[", "~", "mask", "]", "+", "16.", "/", "116.", "\n", "\n", "x", ",", "y", ",", "z", "=", "lab", "[", "...", ",", "0", ":", "1", "]", ",", "lab", "[", "...", ",", "1", ":", "2", "]", ",", "lab", "[", "...", ",", "2", ":", "3", "]", "\n", "\n", "# Vector scaling", "\n", "L", "=", "(", "116.", "*", "y", ")", "-", "16.", "\n", "a", "=", "500.0", "*", "(", "x", "-", "y", ")", "\n", "b", "=", "200.0", "*", "(", "y", "-", "z", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "L", ",", "a", ",", "b", "]", ",", "dim", "=", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.label2one_hot_torch": [[346, 369], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda.scatter_", "one_hot.scatter_.type", "torch.zeros", "torch.zeros", "labels.type"], "function", ["None"], ["", "def", "label2one_hot_torch", "(", "labels", ",", "C", "=", "14", ")", ":", "\n", "# w.r.t http://jacobkimmel.github.io/pytorch_onehot/", "\n", "    ", "'''\n        Converts an integer label torch.autograd.Variable to a one-hot Variable.\n\n        Parameters\n        ----------\n        labels : torch.autograd.Variable of torch.cuda.LongTensor\n            N x 1 x H x W, where N is batch size.\n            Each value is an integer representing correct classification.\n        C : integer.\n            number of classes in labels.\n\n        Returns\n        -------\n        target : torch.cuda.FloatTensor\n            N x C x H x W, where C is class number. One-hot encoded.\n        '''", "\n", "b", ",", "_", ",", "h", ",", "w", "=", "labels", ".", "shape", "\n", "one_hot", "=", "torch", ".", "zeros", "(", "b", ",", "C", ",", "h", ",", "w", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "target", "=", "one_hot", ".", "scatter_", "(", "1", ",", "labels", ".", "type", "(", "torch", ".", "long", ")", ".", "data", ",", "1", ")", "#require long type", "\n", "\n", "return", "target", ".", "type", "(", "torch", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.run_demo.test": [[58, 134], ["torch.no_grad", "torchvision.Compose", "int", "int", "np.int32", "shift9pos", "np.repeat", "torch.from_numpy().type().cuda", "int", "cv2.resize", "transforms.Compose.", "transforms.Compose.", "time.time", "model", "update_spixl_map", "F.interpolate().type", "torch.tensor().view", "get_spixel_image", "os.path.join", "scipy.misc.imsave", "os.path.basename", "scipy.ndimage.imread", "int", "int", "np.floor", "np.floor", "np.arange().reshape", "np.repeat", "input_transform.cuda().unsqueeze", "time.time", "F.interpolate().type.squeeze", "os.path.isdir", "os.makedirs", "spixel_viz.transpose", "print", "flow_transforms.ArrayToTensor", "torchvision.Normalize", "torchvision.Normalize", "torch.from_numpy().type", "F.interpolate", "torch.tensor", "os.path.join", "os.path.join", "np.ceil", "np.ceil", "np.arange", "input_transform.cuda", "update_spixl_map.type", "torch.from_numpy", "np.tile", "input_transform.cuda().unsqueeze", "input_transform.cuda"], "function", ["home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.shift9pos", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.update_spixl_map", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.get_spixel_image"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test", "(", "args", ",", "model", ",", "img_paths", ",", "save_path", ",", "idx", ")", ":", "\n", "# Data loading code", "\n", "    ", "input_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "flow_transforms", ".", "ArrayToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0", ",", "0", ",", "0", "]", ",", "std", "=", "[", "255", ",", "255", ",", "255", "]", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.411", ",", "0.432", ",", "0.45", "]", ",", "std", "=", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "]", ")", "\n", "\n", "img_file", "=", "img_paths", "[", "idx", "]", "\n", "load_path", "=", "img_file", "\n", "imgId", "=", "os", ".", "path", ".", "basename", "(", "img_file", ")", "[", ":", "-", "4", "]", "\n", "\n", "# may get 4 channel (alpha channel) for some format", "\n", "img_", "=", "imread", "(", "load_path", ")", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "H", ",", "W", ",", "_", "=", "img_", ".", "shape", "\n", "H_", ",", "W_", "=", "int", "(", "np", ".", "ceil", "(", "H", "/", "16.", ")", "*", "16", ")", ",", "int", "(", "np", ".", "ceil", "(", "W", "/", "16.", ")", "*", "16", ")", "\n", "\n", "# get spixel id", "\n", "n_spixl_h", "=", "int", "(", "np", ".", "floor", "(", "H_", "/", "args", ".", "downsize", ")", ")", "\n", "n_spixl_w", "=", "int", "(", "np", ".", "floor", "(", "W_", "/", "args", ".", "downsize", ")", ")", "\n", "\n", "spix_values", "=", "np", ".", "int32", "(", "np", ".", "arange", "(", "0", ",", "n_spixl_w", "*", "n_spixl_h", ")", ".", "reshape", "(", "(", "n_spixl_h", ",", "n_spixl_w", ")", ")", ")", "\n", "spix_idx_tensor_", "=", "shift9pos", "(", "spix_values", ")", "\n", "\n", "spix_idx_tensor", "=", "np", ".", "repeat", "(", "\n", "np", ".", "repeat", "(", "spix_idx_tensor_", ",", "args", ".", "downsize", ",", "axis", "=", "1", ")", ",", "args", ".", "downsize", ",", "axis", "=", "2", ")", "\n", "\n", "spixeIds", "=", "torch", ".", "from_numpy", "(", "np", ".", "tile", "(", "spix_idx_tensor", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ")", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "\n", "n_spixel", "=", "int", "(", "n_spixl_h", "*", "n_spixl_w", ")", "\n", "\n", "\n", "img", "=", "cv2", ".", "resize", "(", "img_", ",", "(", "W_", ",", "H_", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "img1", "=", "input_transform", "(", "img", ")", "\n", "ori_img", "=", "input_transform", "(", "img_", ")", "\n", "\n", "# compute output", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "output", "=", "model", "(", "img1", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "toc", "=", "time", ".", "time", "(", ")", "-", "tic", "\n", "\n", "# assign the spixel map", "\n", "curr_spixl_map", "=", "update_spixl_map", "(", "spixeIds", ",", "output", ")", "\n", "ori_sz_spixel_map", "=", "F", ".", "interpolate", "(", "curr_spixl_map", ".", "type", "(", "torch", ".", "float", ")", ",", "size", "=", "(", "H_", ",", "W_", ")", ",", "mode", "=", "'nearest'", ")", ".", "type", "(", "torch", ".", "int", ")", "\n", "\n", "mean_values", "=", "torch", ".", "tensor", "(", "[", "0.411", ",", "0.432", ",", "0.45", "]", ",", "dtype", "=", "img1", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "dtype", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "spixel_viz", ",", "spixel_label_map", "=", "get_spixel_image", "(", "(", "ori_img", "+", "mean_values", ")", ".", "clamp", "(", "0", ",", "1", ")", ",", "ori_sz_spixel_map", ".", "squeeze", "(", ")", ",", "n_spixels", "=", "n_spixel", ",", "b_enforce_connect", "=", "True", ")", "\n", "\n", "# ************************ Save all result********************************************", "\n", "# save img, uncomment it if needed", "\n", "# if not os.path.isdir(os.path.join(save_path, 'img')):", "\n", "#     os.makedirs(os.path.join(save_path, 'img'))", "\n", "# spixl_save_name = os.path.join(save_path, 'img', imgId + '.jpg')", "\n", "# img_save = (ori_img + mean_values).clamp(0, 1)", "\n", "# imsave(spixl_save_name, img_save.detach().cpu().numpy().transpose(1, 2, 0))", "\n", "\n", "\n", "# save spixel viz", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'spixel_viz'", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'spixel_viz'", ")", ")", "\n", "", "spixl_save_name", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'spixel_viz'", ",", "imgId", "+", "'_sPixel.png'", ")", "\n", "imsave", "(", "spixl_save_name", ",", "spixel_viz", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "# save the unique maps as csv, uncomment it if needed", "\n", "# if not os.path.isdir(os.path.join(save_path, 'map_csv')):", "\n", "#     os.makedirs(os.path.join(save_path, 'map_csv'))", "\n", "# output_path = os.path.join(save_path, 'map_csv', imgId + '.csv')", "\n", "#   # plus 1 to make it consistent with the toolkit format", "\n", "# np.savetxt(output_path, (spixel_label_map + 1).astype(int), fmt='%i',delimiter=\",\")", "\n", "\n", "\n", "if", "idx", "%", "10", "==", "0", ":", "\n", "        ", "print", "(", "\"processing %d\"", "%", "idx", ")", "\n", "\n", "", "return", "toc", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.run_demo.main": [[135, 167], ["print", "print", "glob.glob", "glob.glob.sort", "print", "torch.load", "print", "model.eval", "range", "print", "os.path.isdir", "os.makedirs", "len", "print", "exit", "len", "run_demo.test", "len", "len"], "function", ["home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.run_infer_bsds.test"], ["", "def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "save_path", "\n", "data_dir", "=", "args", ".", "data_dir", "\n", "print", "(", "\"=> fetching img pairs in '{}'\"", ".", "format", "(", "data_dir", ")", ")", "\n", "\n", "save_path", "=", "args", ".", "output", "\n", "print", "(", "'=> will save everything to {}'", ".", "format", "(", "save_path", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "tst_lst", "=", "glob", "(", "args", ".", "data_dir", "+", "'/*.'", "+", "args", ".", "data_suffix", ")", "\n", "tst_lst", ".", "sort", "(", ")", "\n", "\n", "if", "len", "(", "tst_lst", ")", "==", "0", ":", "\n", "        ", "print", "(", "'Wrong data dir or suffix!'", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "", "print", "(", "'{} samples found'", ".", "format", "(", "len", "(", "tst_lst", ")", ")", ")", "\n", "\n", "# create model", "\n", "network_data", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ")", "\n", "print", "(", "\"=> using pre-trained model '{}'\"", ".", "format", "(", "network_data", "[", "'arch'", "]", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "network_data", "[", "'arch'", "]", "]", "(", "data", "=", "network_data", ")", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "args", ".", "arch", "=", "network_data", "[", "'arch'", "]", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "mean_time", "=", "0", "\n", "for", "n", "in", "range", "(", "len", "(", "tst_lst", ")", ")", ":", "\n", "      ", "time", "=", "test", "(", "args", ",", "model", ",", "tst_lst", ",", "save_path", ",", "n", ")", "\n", "mean_time", "+=", "time", "\n", "", "print", "(", "\"avg_time per img: %.3f\"", "%", "(", "mean_time", "/", "len", "(", "tst_lst", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.run_infer_bsds.test": [[55, 138], ["torch.no_grad", "torchvision.Compose", "scipy.ndimage.imread", "transforms.Compose.", "transforms.Compose.", "torch.tensor().view", "time.time", "model", "update_spixl_map", "F.interpolate().type", "F.interpolate().type.squeeze().detach().cpu().numpy().transpose", "spix_index_np.astype.astype", "int", "int", "torch.cuda.synchronize", "len", "mark_boundaries", "mark_boundaries.astype().transpose", "os.path.join", "scipy.misc.imsave", "os.path.join", "np.savetxt", "os.path.basename", "cv2.resize", "input_transform.cuda().unsqueeze", "connectivity.enforce_connectivity", "time.time", "np.unique", "spixel_label_map.astype", "os.path.isdir", "os.makedirs", "spixel_bd_image.astype().transpose.transpose", "os.path.isdir", "os.makedirs", "print", "flow_transforms.ArrayToTensor", "torchvision.Normalize", "torchvision.Normalize", "cv2.resize", "print", "torch.tensor", "F.interpolate", "F.interpolate().type.squeeze().detach().cpu().numpy", "int", "np.max", "mark_boundaries.astype", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "int", "int", "input_transform.cuda", "update_spixl_map.type", "int", "int", "F.interpolate().type.squeeze().detach().cpu", "input_transform.cuda().unsqueeze", "F.interpolate().type.squeeze().detach", "input_transform.cuda", "F.interpolate().type.squeeze"], "function", ["home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.update_spixl_map"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test", "(", "model", ",", "img_paths", ",", "save_path", ",", "spixeIds", ",", "idx", ",", "scale", ")", ":", "\n", "# Data loading code", "\n", "    ", "input_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "flow_transforms", ".", "ArrayToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0", ",", "0", ",", "0", "]", ",", "std", "=", "[", "255", ",", "255", ",", "255", "]", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.411", ",", "0.432", ",", "0.45", "]", ",", "std", "=", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "]", ")", "\n", "\n", "\n", "img_file", "=", "img_paths", "[", "idx", "]", "\n", "load_path", "=", "img_file", "\n", "imgId", "=", "os", ".", "path", ".", "basename", "(", "img_file", ")", "[", ":", "-", "4", "]", "\n", "\n", "# origin size 481*321 or 321*481", "\n", "img_", "=", "imread", "(", "load_path", ")", "\n", "H_", ",", "W_", ",", "_", "=", "img_", ".", "shape", "\n", "\n", "# choose the right spixelIndx", "\n", "if", "H_", "==", "321", "and", "W_", "==", "481", ":", "\n", "        ", "spixl_map_idx_tensor", "=", "spixeIds", "[", "0", "]", "\n", "img", "=", "cv2", ".", "resize", "(", "img_", ",", "(", "int", "(", "480", "*", "scale", ")", ",", "int", "(", "320", "*", "scale", ")", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "", "elif", "H_", "==", "481", "and", "W_", "==", "321", ":", "\n", "        ", "spixl_map_idx_tensor", "=", "spixeIds", "[", "1", "]", "\n", "img", "=", "cv2", ".", "resize", "(", "img_", ",", "(", "int", "(", "320", "*", "scale", ")", ",", "int", "(", "480", "*", "scale", ")", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'The image size is wrong!'", ")", "\n", "return", "\n", "\n", "\n", "", "img1", "=", "input_transform", "(", "img", ")", "\n", "ori_img", "=", "input_transform", "(", "img_", ")", "\n", "mean_values", "=", "torch", ".", "tensor", "(", "[", "0.411", ",", "0.432", ",", "0.45", "]", ",", "dtype", "=", "img1", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "dtype", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "\n", "# compute output", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "output", "=", "model", "(", "img1", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "# assign the spixel map and  resize to the original size", "\n", "curr_spixl_map", "=", "update_spixl_map", "(", "spixl_map_idx_tensor", ",", "output", ")", "\n", "ori_sz_spixel_map", "=", "F", ".", "interpolate", "(", "curr_spixl_map", ".", "type", "(", "torch", ".", "float", ")", ",", "size", "=", "(", "H_", ",", "W_", ")", ",", "mode", "=", "'nearest'", ")", ".", "type", "(", "torch", ".", "int", ")", "\n", "\n", "spix_index_np", "=", "ori_sz_spixel_map", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "spix_index_np", "=", "spix_index_np", ".", "astype", "(", "np", ".", "int64", ")", "\n", "segment_size", "=", "(", "spix_index_np", ".", "shape", "[", "0", "]", "*", "spix_index_np", ".", "shape", "[", "1", "]", ")", "/", "(", "int", "(", "600", "*", "scale", "*", "scale", ")", "*", "1.0", ")", "\n", "min_size", "=", "int", "(", "0.06", "*", "segment_size", ")", "\n", "max_size", "=", "int", "(", "3", "*", "segment_size", ")", "\n", "spixel_label_map", "=", "enforce_connectivity", "(", "spix_index_np", "[", "None", ",", ":", ",", ":", "]", ",", "min_size", ",", "max_size", ")", "[", "0", "]", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "toc", "=", "time", ".", "time", "(", ")", "-", "tic", "\n", "\n", "n_spixel", "=", "len", "(", "np", ".", "unique", "(", "spixel_label_map", ")", ")", "\n", "given_img_np", "=", "(", "ori_img", "+", "mean_values", ")", ".", "clamp", "(", "0", ",", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "spixel_bd_image", "=", "mark_boundaries", "(", "given_img_np", "/", "np", ".", "max", "(", "given_img_np", ")", ",", "spixel_label_map", ".", "astype", "(", "int", ")", ",", "color", "=", "(", "0", ",", "1", ",", "1", ")", ")", "\n", "spixel_viz", "=", "spixel_bd_image", ".", "astype", "(", "np", ".", "float32", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "# ************************ Save all result********************************************", "\n", "# save img, uncomment it if needed", "\n", "# if not os.path.isdir(os.path.join(save_path, 'img')):", "\n", "#     os.makedirs(os.path.join(save_path, 'img'))", "\n", "# spixl_save_name = os.path.join(save_path, 'img', imgId + '.jpg')", "\n", "# img_save = (ori_img + mean_values).clamp(0, 1)", "\n", "# imsave(spixl_save_name, img_save.detach().cpu().numpy().transpose(1, 2, 0))", "\n", "\n", "# save spixel viz", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'spixel_viz'", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'spixel_viz'", ")", ")", "\n", "", "spixl_save_name", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'spixel_viz'", ",", "imgId", "+", "'_sPixel.png'", ")", "\n", "imsave", "(", "spixl_save_name", ",", "spixel_viz", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "# save the unique maps as csv for eval", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'map_csv'", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'map_csv'", ")", ")", "\n", "", "output_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'map_csv'", ",", "imgId", "+", "'.csv'", ")", "\n", "# plus 1 to make it consistent with the toolkit format", "\n", "np", ".", "savetxt", "(", "output_path", ",", "(", "spixel_label_map", "+", "1", ")", ".", "astype", "(", "int", ")", ",", "fmt", "=", "'%i'", ",", "delimiter", "=", "\",\"", ")", "\n", "\n", "\n", "if", "idx", "%", "10", "==", "0", ":", "\n", "        ", "print", "(", "\"processing %d\"", "%", "idx", ")", "\n", "\n", "", "return", "toc", ",", "n_spixel", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.run_infer_bsds.main": [[139, 196], ["print", "print", "print", "torch.load", "print", "model.eval", "init_spixel_grid", "init_spixel_grid", "range", "len", "mean_time_list.append", "print", "open", "os.path.isdir", "os.makedirs", "open", "tf.readlines", "len", "run_infer_bsds.test", "f.write", "int", "tst_lst.append", "len", "int"], "function", ["home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.init_spixel_grid", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.init_spixel_grid", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.run_infer_bsds.test"], ["", "def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "save_path", "\n", "data_dir", "=", "args", ".", "data_dir", "\n", "print", "(", "\"=> fetching img pairs in '{}'\"", ".", "format", "(", "data_dir", ")", ")", "\n", "\n", "train_img_height", "=", "args", ".", "train_img_height", "\n", "train_img_width", "=", "args", ".", "train_img_width", "\n", "input_img_height", "=", "args", ".", "input_img_height", "\n", "input_img_width", "=", "args", ".", "input_img_width", "\n", "\n", "mean_time_list", "=", "[", "]", "\n", "# The spixel number we test", "\n", "for", "scale", "in", "[", "0.3", ",", "0.4", ",", "0.5", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", ",", "1.0", ",", "1.1", ",", "1.2", ",", "1.3", ",", "1.4", ",", "1.5", ",", "1.6", ",", "1.8", "]", ":", "\n", "        ", "assert", "(", "320", "*", "scale", "%", "16", "==", "0", "and", "480", "*", "scale", "%", "16", "==", "0", ")", "\n", "save_path", "=", "args", ".", "output", "+", "'/test_multiscale_enforce_connect/SPixelNet_nSpixel_{0}'", ".", "format", "(", "int", "(", "20", "*", "scale", "*", "30", "*", "scale", ")", ")", "\n", "\n", "args", ".", "train_img_height", ",", "args", ".", "train_img_width", "=", "train_img_height", "*", "scale", ",", "train_img_width", "*", "scale", "\n", "args", ".", "input_img_height", ",", "args", ".", "input_img_width", "=", "input_img_height", "*", "scale", ",", "input_img_width", "*", "scale", "\n", "\n", "print", "(", "'=> will save everything to {}'", ".", "format", "(", "save_path", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "tst_lst", "=", "[", "]", "\n", "with", "open", "(", "args", ".", "test_list", ",", "'r'", ")", "as", "tf", ":", "\n", "            ", "img_path", "=", "tf", ".", "readlines", "(", ")", "\n", "for", "path", "in", "img_path", ":", "\n", "                ", "tst_lst", ".", "append", "(", "path", "[", ":", "-", "1", "]", ")", "\n", "\n", "", "", "print", "(", "'{} samples found'", ".", "format", "(", "len", "(", "tst_lst", ")", ")", ")", "\n", "\n", "# create model", "\n", "network_data", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ")", "\n", "print", "(", "\"=> using pre-trained model '{}'\"", ".", "format", "(", "network_data", "[", "'arch'", "]", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "network_data", "[", "'arch'", "]", "]", "(", "data", "=", "network_data", ")", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "args", ".", "arch", "=", "network_data", "[", "'arch'", "]", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# for vertical and horizontal input seperately", "\n", "spixlId_1", ",", "_", "=", "init_spixel_grid", "(", "args", ",", "b_train", "=", "True", ")", "\n", "spixlId_2", ",", "_", "=", "init_spixel_grid", "(", "args", ",", "b_train", "=", "False", ")", "\n", "\n", "mean_time", "=", "0", "\n", "# the following code is for debug", "\n", "for", "n", "in", "range", "(", "len", "(", "tst_lst", ")", ")", ":", "\n", "          ", "time", ",", "n_spixel", "=", "test", "(", "model", ",", "tst_lst", ",", "save_path", ",", "[", "spixlId_1", ",", "spixlId_2", "]", ",", "n", ",", "scale", ")", "\n", "mean_time", "+=", "time", "\n", "", "mean_time", "/=", "len", "(", "tst_lst", ")", "\n", "mean_time_list", ".", "append", "(", "(", "n_spixel", ",", "mean_time", ")", ")", "\n", "\n", "print", "(", "\"for spixel number {}: with mean_time {} , generate {} spixels\"", ".", "format", "(", "int", "(", "20", "*", "scale", "*", "30", "*", "scale", ")", ",", "mean_time", ",", "n_spixel", ")", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "output", "+", "'test_multiscale_enforce_connect/mean_time.txt'", ",", "'w+'", ")", "as", "f", ":", "\n", "        ", "for", "item", "in", "mean_time_list", ":", "\n", "            ", "tmp", "=", "\"{}: {}\\n\"", ".", "format", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ")", "\n", "f", ".", "write", "(", "tmp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.loss.compute_semantic_pos_loss": [[15, 44], ["prob_in.clone", "train_util.poolfeat", "train_util.upfeat", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.norm().sum", "torch.norm().sum", "torch.norm().sum", "torch.norm", "torch.norm", "torch.norm"], "function", ["home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.poolfeat", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.train_util.upfeat"], ["def", "compute_semantic_pos_loss", "(", "prob_in", ",", "labxy_feat", ",", "pos_weight", "=", "0.003", ",", "kernel_size", "=", "16", ")", ":", "\n", "# this wrt the slic paper who used sqrt of (mse)", "\n", "\n", "# rgbxy1_feat: B*50+2*H*W", "\n", "# output : B*9*H*w", "\n", "# NOTE: this loss is only designed for one level structure", "\n", "\n", "# todo: currently we assume the downsize scale in x,y direction are always same", "\n", "    ", "S", "=", "kernel_size", "\n", "m", "=", "pos_weight", "\n", "prob", "=", "prob_in", ".", "clone", "(", ")", "\n", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "labxy_feat", ".", "shape", "\n", "pooled_labxy", "=", "poolfeat", "(", "labxy_feat", ",", "prob", ",", "kernel_size", ",", "kernel_size", ")", "\n", "reconstr_feat", "=", "upfeat", "(", "pooled_labxy", ",", "prob", ",", "kernel_size", ",", "kernel_size", ")", "\n", "\n", "loss_map", "=", "reconstr_feat", "[", ":", ",", "-", "2", ":", ",", ":", ",", ":", "]", "-", "labxy_feat", "[", ":", ",", "-", "2", ":", ",", ":", ",", ":", "]", "\n", "\n", "# self def cross entropy  -- the official one combined softmax", "\n", "logit", "=", "torch", ".", "log", "(", "reconstr_feat", "[", ":", ",", ":", "-", "2", ",", ":", ",", ":", "]", "+", "1e-8", ")", "\n", "loss_sem", "=", "-", "torch", ".", "sum", "(", "logit", "*", "labxy_feat", "[", ":", ",", ":", "-", "2", ",", ":", ",", ":", "]", ")", "/", "b", "\n", "loss_pos", "=", "torch", ".", "norm", "(", "loss_map", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "sum", "(", ")", "/", "b", "*", "m", "/", "S", "\n", "\n", "# empirically we find timing 0.005 tend to better performance", "\n", "loss_sum", "=", "0.005", "*", "(", "loss_sem", "+", "loss_pos", ")", "\n", "loss_sem_sum", "=", "0.005", "*", "loss_sem", "\n", "loss_pos_sum", "=", "0.005", "*", "loss_pos", "\n", "\n", "return", "loss_sum", ",", "loss_sem_sum", ",", "loss_pos_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.Compose.__init__": [[45, 47], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "co_transforms", ")", ":", "\n", "        ", "self", ".", "co_transforms", "=", "co_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.Compose.__call__": [[48, 52], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "co_transforms", ":", "\n", "            ", "input", ",", "target", "=", "t", "(", "input", ",", "target", ")", "\n", "", "return", "input", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.ArrayToTensor.__call__": [[57, 66], ["isinstance", "numpy.transpose", "torch.from_numpy", "torch.from_numpy.float"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "array", ")", ":", "\n", "        ", "assert", "(", "isinstance", "(", "array", ",", "np", ".", "ndarray", ")", ")", "\n", "\n", "array", "=", "np", ".", "transpose", "(", "array", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "# handle numpy array", "\n", "tensor", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "# put it from HWC to CHW format", "\n", "\n", "return", "tensor", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.ArrayToPILImage.__call__": [[71, 77], ["isinstance", "PIL.Image.fromarray", "array.astype"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "array", ")", ":", "\n", "        ", "assert", "(", "isinstance", "(", "array", ",", "np", ".", "ndarray", ")", ")", "\n", "\n", "img", "=", "Image", ".", "fromarray", "(", "array", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.PILImageToTensor.__call__": [[81, 89], ["isinstance", "numpy.asarray", "numpy.transpose", "torch.from_numpy", "torch.from_numpy.float"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "assert", "(", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", ")", "\n", "\n", "array", "=", "np", ".", "asarray", "(", "img", ")", "\n", "array", "=", "np", ".", "transpose", "(", "array", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "tensor", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "\n", "return", "tensor", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.Lambda.__init__": [[94, 97], ["isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "assert", "isinstance", "(", "lambd", ",", "types", ".", "LambdaType", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.Lambda.__call__": [[98, 100], ["flow_transforms.Lambda.lambd"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "input", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.CenterCrop.__init__": [[109, 114], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.CenterCrop.__call__": [[115, 129], ["int", "int", "range", "round", "round", "len"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "inputs", ",", "target", ")", ":", "\n", "        ", "h1", ",", "w1", ",", "_", "=", "inputs", "[", "0", "]", ".", "shape", "\n", "# h2, w2, _ = inputs[1].shape", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w1", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h1", "-", "th", ")", "/", "2.", ")", ")", "\n", "# x2 = int(round((w2 - tw) / 2.))", "\n", "# y2 = int(round((h2 - th) / 2.))", "\n", "for", "i", "in", "range", "(", "len", "(", "inputs", ")", ")", ":", "\n", "            ", "inputs", "[", "i", "]", "=", "inputs", "[", "i", "]", "[", "y1", ":", "y1", "+", "th", ",", "x1", ":", "x1", "+", "tw", "]", "\n", "# inputs[0] = inputs[0][y1: y1 + th, x1: x1 + tw]", "\n", "# inputs[1] = inputs[1][y2: y2 + th, x2: x2 + tw]", "\n", "", "target", "=", "target", "[", "y1", ":", "y1", "+", "th", ",", "x1", ":", "x1", "+", "tw", "]", "\n", "return", "inputs", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.myRandomResized.__init__": [[136, 143], ["isinstance", "len", "range", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "expect_min_size", ",", "scale", "=", "(", "0.8", ",", "1.5", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", ":", "\n", "# assert (min(input_size) * min(scale) > max(expect_size))", "\n", "# one consider one decimal !!", "\n", "        ", "assert", "(", "isinstance", "(", "scale", ",", "tuple", ")", "and", "len", "(", "scale", ")", "==", "2", ")", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "scale", "=", "[", "x", "*", "0.1", "for", "x", "in", "range", "(", "int", "(", "scale", "[", "0", "]", "*", "10", ")", ",", "int", "(", "scale", "[", "1", "]", ")", "*", "10", ")", "]", "\n", "self", ".", "min_size", "=", "expect_min_size", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.myRandomResized.get_params": [[144, 174], ["range", "random.choice", "random.random", "int", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "img", ",", "scale", ",", "min_size", ")", ":", "\n", "        ", "\"\"\"Get parameters for ``crop`` for a random sized crop.\n\n        Args:\n            img (PIL Image): Image to be cropped.\n            scale (tuple): range of size of the origin size cropped\n            ratio (tuple): range of aspect ratio of the origin aspect ratio cropped\n\n        Returns:\n            tuple: params (i, j, h, w) to be passed to ``crop`` for a random\n                sized crop.\n        \"\"\"", "\n", "# area = img.size[0] * img.size[1]", "\n", "h", ",", "w", ",", "_", "=", "img", ".", "shape", "\n", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "rand_scale_", "=", "random", ".", "choice", "(", "scale", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "rand_scale", "=", "rand_scale_", "\n", "", "else", ":", "\n", "                ", "rand_scale", "=", "-", "1.", "\n", "\n", "", "if", "min_size", "[", "0", "]", "<=", "rand_scale", "*", "h", "and", "min_size", "[", "1", "]", "<=", "rand_scale", "*", "w", "and", "rand_scale", "*", "h", "%", "16", "==", "0", "and", "rand_scale", "*", "w", "%", "16", "==", "0", ":", "\n", "# the 16*n condition is for network architecture", "\n", "                ", "return", "(", "int", "(", "rand_scale", "*", "h", ")", ",", "int", "(", "rand_scale", "*", "w", ")", ")", "\n", "\n", "# Fallback", "\n", "", "", "return", "(", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.myRandomResized.__call__": [[175, 189], ["flow_transforms.myRandomResized.get_params", "range", "cv2.resize", "len", "cv2.resize", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.myRandomResized.get_params"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "tgt", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Image to be cropped and resized.\n\n        Returns:\n            PIL Image: Randomly cropped and resized image.\n        \"\"\"", "\n", "h", ",", "w", "=", "self", ".", "get_params", "(", "inputs", "[", "0", "]", ",", "self", ".", "scale", ",", "self", ".", "min_size", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "inputs", ")", ")", ":", "\n", "            ", "inputs", "[", "i", "]", "=", "cv2", ".", "resize", "(", "inputs", "[", "i", "]", ",", "(", "w", ",", "h", ")", ",", "self", ".", "interpolation", ")", "\n", "\n", "", "tgt", "=", "cv2", ".", "resize", "(", "tgt", ",", "(", "w", ",", "h", ")", ",", "self", ".", "interpolation", ")", "#for input as h*w*1 the output is h*w", "\n", "return", "inputs", ",", "np", ".", "expand_dims", "(", "tgt", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.myRandomResized.__repr__": [[190, 196], ["tuple", "round"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "interpolate_str", "=", "_pil_interpolation_to_str", "[", "self", ".", "interpolation", "]", "\n", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "'(min_size={0}'", ".", "format", "(", "self", ".", "min_size", ")", "\n", "format_string", "+=", "', scale={0}'", ".", "format", "(", "tuple", "(", "round", "(", "s", ",", "4", ")", "for", "s", "in", "self", ".", "scale", ")", ")", "\n", "format_string", "+=", "', interpolation={0})'", ".", "format", "(", "interpolate_str", ")", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.Scale.__init__": [[207, 210], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "order", "=", "2", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "order", "=", "order", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.Scale.__call__": [[211, 226], ["scipy.interpolation.zoom", "scipy.interpolation.zoom", "scipy.interpolation.zoom"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "target", ")", ":", "\n", "        ", "h", ",", "w", ",", "_", "=", "inputs", "[", "0", "]", ".", "shape", "\n", "if", "(", "w", "<=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", "<=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "            ", "return", "inputs", ",", "target", "\n", "", "if", "w", "<", "h", ":", "\n", "            ", "ratio", "=", "self", ".", "size", "/", "w", "\n", "", "else", ":", "\n", "            ", "ratio", "=", "self", ".", "size", "/", "h", "\n", "\n", "", "inputs", "[", "0", "]", "=", "ndimage", ".", "interpolation", ".", "zoom", "(", "inputs", "[", "0", "]", ",", "ratio", ",", "order", "=", "self", ".", "order", ")", "\n", "inputs", "[", "1", "]", "=", "ndimage", ".", "interpolation", ".", "zoom", "(", "inputs", "[", "1", "]", ",", "ratio", ",", "order", "=", "self", ".", "order", ")", "\n", "\n", "target", "=", "ndimage", ".", "interpolation", ".", "zoom", "(", "target", ",", "ratio", ",", "order", "=", "self", ".", "order", ")", "\n", "target", "*=", "ratio", "\n", "return", "inputs", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.RandomCrop.__init__": [[234, 239], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.RandomCrop.__call__": [[240, 254], ["random.randint", "random.randint", "range", "len"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "inputs", ",", "target", ")", ":", "\n", "        ", "h", ",", "w", ",", "_", "=", "inputs", "[", "0", "]", ".", "shape", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "inputs", ",", "target", "\n", "\n", "", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "inputs", ")", ")", ":", "\n", "            ", "inputs", "[", "i", "]", "=", "inputs", "[", "i", "]", "[", "y1", ":", "y1", "+", "th", ",", "x1", ":", "x1", "+", "tw", "]", "\n", "# inputs[1] = inputs[1][y1: y1 + th,x1: x1 + tw]", "\n", "# inputs[2] = inputs[2][y1: y1 + th, x1: x1 + tw]", "\n", "\n", "", "return", "inputs", ",", "target", "[", "y1", ":", "y1", "+", "th", ",", "x1", ":", "x1", "+", "tw", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.RandomHorizontalFlip.__call__": [[260, 270], ["random.random", "range", "numpy.copy", "len", "numpy.copy", "numpy.fliplr", "numpy.fliplr"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "inputs", ",", "target", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "inputs", ")", ")", ":", "\n", "                ", "inputs", "[", "i", "]", "=", "np", ".", "copy", "(", "np", ".", "fliplr", "(", "inputs", "[", "i", "]", ")", ")", "\n", "# inputs[1] = np.copy(np.fliplr(inputs[1]))", "\n", "# inputs[2] = np.copy(np.fliplr(inputs[2]))", "\n", "\n", "", "target", "=", "np", ".", "copy", "(", "np", ".", "fliplr", "(", "target", ")", ")", "\n", "# target[:,:,0] *= -1", "\n", "", "return", "inputs", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.RandomVerticalFlip.__call__": [[276, 286], ["random.random", "range", "numpy.copy", "len", "numpy.copy", "numpy.flipud", "numpy.flipud"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "inputs", ",", "target", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "inputs", ")", ")", ":", "\n", "                ", "inputs", "[", "i", "]", "=", "np", ".", "copy", "(", "np", ".", "flipud", "(", "inputs", "[", "i", "]", ")", ")", "\n", "# inputs[1] = np.copy(np.flipud(inputs[1]))", "\n", "# inputs[2] = np.copy(np.flipud(inputs[2]))", "\n", "\n", "", "target", "=", "np", ".", "copy", "(", "np", ".", "flipud", "(", "target", ")", ")", "\n", "# target[:,:,1] *= -1 #for disp there is no y dim", "\n", "", "return", "inputs", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.RandomRotate.__init__": [[297, 302], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "angle", ",", "diff_angle", "=", "0", ",", "order", "=", "2", ",", "reshape", "=", "False", ")", ":", "\n", "        ", "self", ".", "angle", "=", "angle", "\n", "self", ".", "reshape", "=", "reshape", "\n", "self", ".", "order", "=", "order", "\n", "self", ".", "diff_angle", "=", "diff_angle", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.RandomRotate.__call__": [[303, 326], ["random.uniform", "random.uniform", "numpy.fromfunction", "scipy.interpolation.rotate", "scipy.interpolation.rotate", "scipy.interpolation.rotate", "numpy.copy", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "target", ")", ":", "\n", "        ", "applied_angle", "=", "random", ".", "uniform", "(", "-", "self", ".", "angle", ",", "self", ".", "angle", ")", "\n", "diff", "=", "random", ".", "uniform", "(", "-", "self", ".", "diff_angle", ",", "self", ".", "diff_angle", ")", "\n", "angle1", "=", "applied_angle", "-", "diff", "/", "2", "\n", "angle2", "=", "applied_angle", "+", "diff", "/", "2", "\n", "angle1_rad", "=", "angle1", "*", "np", ".", "pi", "/", "180", "\n", "\n", "h", ",", "w", ",", "_", "=", "target", ".", "shape", "\n", "\n", "def", "rotate_flow", "(", "i", ",", "j", ",", "k", ")", ":", "\n", "            ", "return", "-", "k", "*", "(", "j", "-", "w", "/", "2", ")", "*", "(", "diff", "*", "np", ".", "pi", "/", "180", ")", "+", "(", "1", "-", "k", ")", "*", "(", "i", "-", "h", "/", "2", ")", "*", "(", "diff", "*", "np", ".", "pi", "/", "180", ")", "\n", "\n", "", "rotate_flow_map", "=", "np", ".", "fromfunction", "(", "rotate_flow", ",", "target", ".", "shape", ")", "\n", "target", "+=", "rotate_flow_map", "\n", "\n", "inputs", "[", "0", "]", "=", "ndimage", ".", "interpolation", ".", "rotate", "(", "inputs", "[", "0", "]", ",", "angle1", ",", "reshape", "=", "self", ".", "reshape", ",", "order", "=", "self", ".", "order", ")", "\n", "inputs", "[", "1", "]", "=", "ndimage", ".", "interpolation", ".", "rotate", "(", "inputs", "[", "1", "]", ",", "angle2", ",", "reshape", "=", "self", ".", "reshape", ",", "order", "=", "self", ".", "order", ")", "\n", "target", "=", "ndimage", ".", "interpolation", ".", "rotate", "(", "target", ",", "angle1", ",", "reshape", "=", "self", ".", "reshape", ",", "order", "=", "self", ".", "order", ")", "\n", "# flow vectors must be rotated too! careful about Y flow which is upside down", "\n", "target_", "=", "np", ".", "copy", "(", "target", ")", "\n", "target", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "cos", "(", "angle1_rad", ")", "*", "target_", "[", ":", ",", ":", ",", "0", "]", "+", "np", ".", "sin", "(", "angle1_rad", ")", "*", "target_", "[", ":", ",", ":", ",", "1", "]", "\n", "target", "[", ":", ",", ":", ",", "1", "]", "=", "-", "np", ".", "sin", "(", "angle1_rad", ")", "*", "target_", "[", ":", ",", ":", ",", "0", "]", "+", "np", ".", "cos", "(", "angle1_rad", ")", "*", "target_", "[", ":", ",", ":", ",", "1", "]", "\n", "return", "inputs", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.RandomTranslate.__init__": [[329, 334], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "translation", ")", ":", "\n", "        ", "if", "isinstance", "(", "translation", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "translation", "=", "(", "int", "(", "translation", ")", ",", "int", "(", "translation", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "translation", "=", "translation", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.RandomTranslate.__call__": [[335, 353], ["random.randint", "random.randint", "max", "min", "max", "min", "max", "min", "max", "min"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "inputs", ",", "target", ")", ":", "\n", "        ", "h", ",", "w", ",", "_", "=", "inputs", "[", "0", "]", ".", "shape", "\n", "th", ",", "tw", "=", "self", ".", "translation", "\n", "tw", "=", "random", ".", "randint", "(", "-", "tw", ",", "tw", ")", "\n", "th", "=", "random", ".", "randint", "(", "-", "th", ",", "th", ")", "\n", "if", "tw", "==", "0", "and", "th", "==", "0", ":", "\n", "            ", "return", "inputs", ",", "target", "\n", "# compute x1,x2,y1,y2 for img1 and target, and x3,x4,y3,y4 for img2", "\n", "", "x1", ",", "x2", ",", "x3", ",", "x4", "=", "max", "(", "0", ",", "tw", ")", ",", "min", "(", "w", "+", "tw", ",", "w", ")", ",", "max", "(", "0", ",", "-", "tw", ")", ",", "min", "(", "w", "-", "tw", ",", "w", ")", "\n", "y1", ",", "y2", ",", "y3", ",", "y4", "=", "max", "(", "0", ",", "th", ")", ",", "min", "(", "h", "+", "th", ",", "h", ")", ",", "max", "(", "0", ",", "-", "th", ")", ",", "min", "(", "h", "-", "th", ",", "h", ")", "\n", "\n", "inputs", "[", "0", "]", "=", "inputs", "[", "0", "]", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "\n", "inputs", "[", "1", "]", "=", "inputs", "[", "1", "]", "[", "y3", ":", "y4", ",", "x3", ":", "x4", "]", "\n", "target", "=", "target", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "\n", "target", "[", ":", ",", ":", ",", "0", "]", "+=", "tw", "\n", "target", "[", ":", ",", ":", ",", "1", "]", "+=", "th", "\n", "\n", "return", "inputs", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.RandomColorWarp.__init__": [[356, 359], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean_range", "=", "0", ",", "std_range", "=", "0", ")", ":", "\n", "        ", "self", ".", "mean_range", "=", "mean_range", "\n", "self", ".", "std_range", "=", "std_range", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.None.flow_transforms.RandomColorWarp.__call__": [[360, 375], ["numpy.random.uniform", "numpy.random.uniform", "numpy.random.permutation"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "target", ")", ":", "\n", "        ", "random_std", "=", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "std_range", ",", "self", ".", "std_range", ",", "3", ")", "\n", "random_mean", "=", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "mean_range", ",", "self", ".", "mean_range", ",", "3", ")", "\n", "random_order", "=", "np", ".", "random", ".", "permutation", "(", "3", ")", "\n", "\n", "inputs", "[", "0", "]", "*=", "(", "1", "+", "random_std", ")", "\n", "inputs", "[", "0", "]", "+=", "random_mean", "\n", "\n", "inputs", "[", "1", "]", "*=", "(", "1", "+", "random_std", ")", "\n", "inputs", "[", "1", "]", "+=", "random_mean", "\n", "\n", "inputs", "[", "0", "]", "=", "inputs", "[", "0", "]", "[", ":", ",", ":", ",", "random_order", "]", "\n", "inputs", "[", "1", "]", "=", "inputs", "[", "1", "]", "[", ":", ",", ":", ",", "random_order", "]", "\n", "\n", "return", "inputs", ",", "target", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.datasets.BSD500.make_dataset": [[28, 45], ["os.path.join", "os.path.join", "open", "tf.readlines", "open", "vf.readlines", "print"], "function", ["None"], ["def", "make_dataset", "(", "dir", ")", ":", "\n", "# we train and val seperately to tune the hyper-param and use all the data for the final training", "\n", "    ", "train_list_path", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'train.txt'", ")", "# use train_Val.txt for final report", "\n", "val_list_path", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'val.txt'", ")", "\n", "\n", "try", ":", "\n", "        ", "with", "open", "(", "train_list_path", ",", "'r'", ")", "as", "tf", ":", "\n", "            ", "train_list", "=", "tf", ".", "readlines", "(", ")", "\n", "\n", "", "with", "open", "(", "val_list_path", ",", "'r'", ")", "as", "vf", ":", "\n", "            ", "val_list", "=", "vf", ".", "readlines", "(", ")", "\n", "\n", "", "", "except", "IOError", ":", "\n", "        ", "print", "(", "'Error No avaliable list '", ")", "\n", "return", "\n", "\n", "", "return", "train_list", ",", "val_list", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.datasets.BSD500.BSD_loader": [[48, 54], ["[].astype", "cv2.imread", "cv2.imread"], "function", ["None"], ["", "def", "BSD_loader", "(", "path_imgs", ",", "path_label", ")", ":", "\n", "# cv2.imread is faster than io.imread usually", "\n", "    ", "img", "=", "cv2", ".", "imread", "(", "path_imgs", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "gtseg", "=", "cv2", ".", "imread", "(", "path_label", ")", "[", ":", ",", ":", ",", ":", "1", "]", "\n", "\n", "return", "img", ",", "gtseg", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.datasets.BSD500.BSD500": [[56, 72], ["BSD500.make_dataset", "listdataset.ListDataset", "listdataset.ListDataset", "flow_transforms.CenterCrop"], "function", ["home.repos.pwc.inspect_result.fuy34_superpixel_fcn.data_preprocessing.pre_process_bsd500_ori_sz.make_dataset"], ["", "def", "BSD500", "(", "root", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "val_transform", "=", "None", ",", "\n", "co_transform", "=", "None", ",", "split", "=", "None", ")", ":", "\n", "    ", "train_list", ",", "val_list", "=", "make_dataset", "(", "root", ")", "\n", "\n", "if", "val_transform", "==", "None", ":", "\n", "        ", "val_transform", "=", "transform", "\n", "\n", "", "train_dataset", "=", "ListDataset", "(", "root", ",", "'bsd500'", ",", "train_list", ",", "transform", ",", "\n", "target_transform", ",", "co_transform", ",", "\n", "loader", "=", "BSD_loader", ",", "datatype", "=", "'train'", ")", "\n", "\n", "val_dataset", "=", "ListDataset", "(", "root", ",", "'bsd500'", ",", "val_list", ",", "val_transform", ",", "\n", "target_transform", ",", "flow_transforms", ".", "CenterCrop", "(", "(", "320", ",", "320", ")", ")", ",", "\n", "loader", "=", "BSD_loader", ",", "datatype", "=", "'val'", ")", "\n", "\n", "return", "train_dataset", ",", "val_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.datasets.util.readPFM": [[15, 51], ["open", "open.readline().rstrip", "re.match", "float", "numpy.fromfile", "numpy.reshape", "numpy.flipud", "file.readline().rstrip.decode", "open.readline().decode", "list", "Exception", "open.readline().decode().rstrip", "open.readline", "file.readline().rstrip.decode", "Exception", "map", "open.readline", "re.match.groups", "open.readline().decode", "open.readline"], "function", ["None"], ["def", "readPFM", "(", "file", ")", ":", "\n", "    ", "file", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "\n", "color", "=", "None", "\n", "width", "=", "None", "\n", "height", "=", "None", "\n", "scale", "=", "None", "\n", "endian", "=", "None", "\n", "\n", "header", "=", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", "\n", "if", "header", ".", "decode", "(", "\"ascii\"", ")", "==", "'PF'", ":", "\n", "        ", "color", "=", "True", "\n", "", "elif", "header", ".", "decode", "(", "\"ascii\"", ")", "==", "'Pf'", ":", "\n", "        ", "color", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Not a PFM file.'", ")", "\n", "\n", "", "dim_match", "=", "re", ".", "match", "(", "r'^(\\d+)\\s(\\d+)\\s$'", ",", "file", ".", "readline", "(", ")", ".", "decode", "(", "\"ascii\"", ")", ")", "\n", "if", "dim_match", ":", "\n", "        ", "width", ",", "height", "=", "list", "(", "map", "(", "int", ",", "dim_match", ".", "groups", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Malformed PFM header.'", ")", "\n", "\n", "", "scale", "=", "float", "(", "file", ".", "readline", "(", ")", ".", "decode", "(", "\"ascii\"", ")", ".", "rstrip", "(", ")", ")", "\n", "if", "scale", "<", "0", ":", "# little-endian", "\n", "        ", "endian", "=", "'<'", "\n", "scale", "=", "-", "scale", "\n", "", "else", ":", "\n", "        ", "endian", "=", "'>'", "# big-endian", "\n", "\n", "", "data", "=", "np", ".", "fromfile", "(", "file", ",", "endian", "+", "'f'", ")", "\n", "shape", "=", "(", "height", ",", "width", ",", "3", ")", "if", "color", "else", "(", "height", ",", "width", ")", "\n", "\n", "data", "=", "np", ".", "reshape", "(", "data", ",", "shape", ")", "\n", "data", "=", "np", ".", "flipud", "(", "data", ")", "\n", "return", "data", ",", "scale", "\n", "", ""]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.datasets.listdataset.ListDataset.__init__": [[4, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "dataset", ",", "path_list", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "co_transform", "=", "None", ",", "loader", "=", "None", ",", "datatype", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "img_path_list", "=", "path_list", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "co_transform", "=", "co_transform", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "datatype", "=", "datatype", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.datasets.listdataset.ListDataset.__getitem__": [[16, 34], ["listdataset.ListDataset.loader", "img_path.replace", "listdataset.ListDataset.co_transform", "listdataset.ListDataset.transform", "listdataset.ListDataset.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_path", "=", "self", ".", "img_path_list", "[", "index", "]", "[", ":", "-", "1", "]", "\n", "# We do not consider other datsets in this work", "\n", "assert", "self", ".", "dataset", "==", "'bsd500'", "\n", "assert", "(", "self", ".", "transform", "is", "not", "None", ")", "and", "(", "self", ".", "target_transform", "is", "not", "None", ")", "\n", "\n", "inputs", ",", "label", "=", "self", ".", "loader", "(", "img_path", ",", "img_path", ".", "replace", "(", "'_img.jpg'", ",", "'_label.png'", ")", ")", "\n", "\n", "if", "self", ".", "co_transform", "is", "not", "None", ":", "\n", "            ", "inputs", ",", "label", "=", "self", ".", "co_transform", "(", "[", "inputs", "]", ",", "label", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "inputs", "[", "0", "]", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "label", "=", "self", ".", "target_transform", "(", "label", ")", "\n", "\n", "", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.datasets.listdataset.ListDataset.__len__": [[35, 37], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_path_list", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.predict_param": [[6, 8], ["torch.Conv2d"], "function", ["None"], ["def", "predict_param", "(", "in_planes", ",", "channel", "=", "3", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "channel", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.predict_mask": [[9, 11], ["torch.Conv2d"], "function", ["None"], ["", "def", "predict_mask", "(", "in_planes", ",", "channel", "=", "9", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "channel", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.predict_feat": [[12, 14], ["torch.Conv2d"], "function", ["None"], ["", "def", "predict_feat", "(", "in_planes", ",", "channel", "=", "20", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "channel", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.predict_prob": [[15, 19], ["torch.Sequential", "torch.Conv2d", "torch.Softmax"], "function", ["None"], ["", "def", "predict_prob", "(", "in_planes", ",", "channel", "=", "9", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "channel", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "Softmax", "(", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.conv": [[22, 33], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.Conv2d", "torch.LeakyReLU"], "function", ["None"], ["", "def", "conv", "(", "batchNorm", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ":", "\n", "    ", "if", "batchNorm", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.deconv": [[36, 40], ["torch.Sequential", "torch.ConvTranspose2d", "torch.LeakyReLU"], "function", ["None"], ["", "", "def", "deconv", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.Spixel_single_layer.SpixelNet.__init__": [[16, 63], ["torch.Module.__init__", "model_util.conv", "model_util.conv", "model_util.conv", "model_util.conv", "model_util.conv", "model_util.conv", "model_util.conv", "model_util.conv", "model_util.conv", "model_util.conv", "model_util.deconv", "model_util.conv", "model_util.predict_mask", "model_util.deconv", "model_util.conv", "model_util.predict_mask", "model_util.deconv", "model_util.conv", "model_util.predict_mask", "model_util.deconv", "model_util.conv", "model_util.predict_mask", "torch.Softmax", "torch.Softmax", "Spixel_single_layer.SpixelNet.modules", "isinstance", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.Spixel_single_layer.SpixelNet.__init__", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.conv", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.conv", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.conv", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.conv", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.conv", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.conv", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.conv", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.conv", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.conv", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.conv", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.deconv", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.conv", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.predict_mask", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.deconv", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.conv", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.predict_mask", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.deconv", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.conv", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.predict_mask", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.deconv", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.conv", "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.model_util.predict_mask"], ["def", "__init__", "(", "self", ",", "batchNorm", "=", "True", ")", ":", "\n", "        ", "super", "(", "SpixelNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batchNorm", "=", "batchNorm", "\n", "self", ".", "assign_ch", "=", "9", "\n", "\n", "self", ".", "conv0a", "=", "conv", "(", "self", ".", "batchNorm", ",", "3", ",", "16", ",", "kernel_size", "=", "3", ")", "\n", "self", ".", "conv0b", "=", "conv", "(", "self", ".", "batchNorm", ",", "16", ",", "16", ",", "kernel_size", "=", "3", ")", "\n", "\n", "self", ".", "conv1a", "=", "conv", "(", "self", ".", "batchNorm", ",", "16", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv1b", "=", "conv", "(", "self", ".", "batchNorm", ",", "32", ",", "32", ",", "kernel_size", "=", "3", ")", "\n", "\n", "self", ".", "conv2a", "=", "conv", "(", "self", ".", "batchNorm", ",", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv2b", "=", "conv", "(", "self", ".", "batchNorm", ",", "64", ",", "64", ",", "kernel_size", "=", "3", ")", "\n", "\n", "self", ".", "conv3a", "=", "conv", "(", "self", ".", "batchNorm", ",", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv3b", "=", "conv", "(", "self", ".", "batchNorm", ",", "128", ",", "128", ",", "kernel_size", "=", "3", ")", "\n", "\n", "self", ".", "conv4a", "=", "conv", "(", "self", ".", "batchNorm", ",", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv4b", "=", "conv", "(", "self", ".", "batchNorm", ",", "256", ",", "256", ",", "kernel_size", "=", "3", ")", "\n", "\n", "self", ".", "deconv3", "=", "deconv", "(", "256", ",", "128", ")", "\n", "self", ".", "conv3_1", "=", "conv", "(", "self", ".", "batchNorm", ",", "256", ",", "128", ")", "\n", "self", ".", "pred_mask3", "=", "predict_mask", "(", "128", ",", "self", ".", "assign_ch", ")", "\n", "\n", "self", ".", "deconv2", "=", "deconv", "(", "128", ",", "64", ")", "\n", "self", ".", "conv2_1", "=", "conv", "(", "self", ".", "batchNorm", ",", "128", ",", "64", ")", "\n", "self", ".", "pred_mask2", "=", "predict_mask", "(", "64", ",", "self", ".", "assign_ch", ")", "\n", "\n", "self", ".", "deconv1", "=", "deconv", "(", "64", ",", "32", ")", "\n", "self", ".", "conv1_1", "=", "conv", "(", "self", ".", "batchNorm", ",", "64", ",", "32", ")", "\n", "self", ".", "pred_mask1", "=", "predict_mask", "(", "32", ",", "self", ".", "assign_ch", ")", "\n", "\n", "self", ".", "deconv0", "=", "deconv", "(", "32", ",", "16", ")", "\n", "self", ".", "conv0_1", "=", "conv", "(", "self", ".", "batchNorm", ",", "32", ",", "16", ")", "\n", "self", ".", "pred_mask0", "=", "predict_mask", "(", "16", ",", "self", ".", "assign_ch", ")", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "1", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "kaiming_normal_", "(", "m", ".", "weight", ",", "0.1", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.Spixel_single_layer.SpixelNet.forward": [[64, 90], ["Spixel_single_layer.SpixelNet.conv0b", "Spixel_single_layer.SpixelNet.conv1b", "Spixel_single_layer.SpixelNet.conv2b", "Spixel_single_layer.SpixelNet.conv3b", "Spixel_single_layer.SpixelNet.conv4b", "Spixel_single_layer.SpixelNet.deconv3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Spixel_single_layer.SpixelNet.conv3_1", "Spixel_single_layer.SpixelNet.deconv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Spixel_single_layer.SpixelNet.conv2_1", "Spixel_single_layer.SpixelNet.deconv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Spixel_single_layer.SpixelNet.conv1_1", "Spixel_single_layer.SpixelNet.deconv0", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Spixel_single_layer.SpixelNet.conv0_1", "Spixel_single_layer.SpixelNet.pred_mask0", "Spixel_single_layer.SpixelNet.softmax", "Spixel_single_layer.SpixelNet.conv0a", "Spixel_single_layer.SpixelNet.conv1a", "Spixel_single_layer.SpixelNet.conv2a", "Spixel_single_layer.SpixelNet.conv3a", "Spixel_single_layer.SpixelNet.conv4a"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out1", "=", "self", ".", "conv0b", "(", "self", ".", "conv0a", "(", "x", ")", ")", "#5*5", "\n", "out2", "=", "self", ".", "conv1b", "(", "self", ".", "conv1a", "(", "out1", ")", ")", "#11*11", "\n", "out3", "=", "self", ".", "conv2b", "(", "self", ".", "conv2a", "(", "out2", ")", ")", "#23*23", "\n", "out4", "=", "self", ".", "conv3b", "(", "self", ".", "conv3a", "(", "out3", ")", ")", "#47*47", "\n", "out5", "=", "self", ".", "conv4b", "(", "self", ".", "conv4a", "(", "out4", ")", ")", "#95*95", "\n", "\n", "out_deconv3", "=", "self", ".", "deconv3", "(", "out5", ")", "\n", "concat3", "=", "torch", ".", "cat", "(", "(", "out4", ",", "out_deconv3", ")", ",", "1", ")", "\n", "out_conv3_1", "=", "self", ".", "conv3_1", "(", "concat3", ")", "\n", "\n", "out_deconv2", "=", "self", ".", "deconv2", "(", "out_conv3_1", ")", "\n", "concat2", "=", "torch", ".", "cat", "(", "(", "out3", ",", "out_deconv2", ")", ",", "1", ")", "\n", "out_conv2_1", "=", "self", ".", "conv2_1", "(", "concat2", ")", "\n", "\n", "out_deconv1", "=", "self", ".", "deconv1", "(", "out_conv2_1", ")", "\n", "concat1", "=", "torch", ".", "cat", "(", "(", "out2", ",", "out_deconv1", ")", ",", "1", ")", "\n", "out_conv1_1", "=", "self", ".", "conv1_1", "(", "concat1", ")", "\n", "\n", "out_deconv0", "=", "self", ".", "deconv0", "(", "out_conv1_1", ")", "\n", "concat0", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out_deconv0", ")", ",", "1", ")", "\n", "out_conv0_1", "=", "self", ".", "conv0_1", "(", "concat0", ")", "\n", "mask0", "=", "self", ".", "pred_mask0", "(", "out_conv0_1", ")", "\n", "prob0", "=", "self", ".", "softmax", "(", "mask0", ")", "\n", "\n", "return", "prob0", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.Spixel_single_layer.SpixelNet.weight_parameters": [[91, 93], ["Spixel_single_layer.SpixelNet.named_parameters"], "methods", ["None"], ["", "def", "weight_parameters", "(", "self", ")", ":", "\n", "        ", "return", "[", "param", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", "if", "'weight'", "in", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.Spixel_single_layer.SpixelNet.bias_parameters": [[94, 96], ["Spixel_single_layer.SpixelNet.named_parameters"], "methods", ["None"], ["", "def", "bias_parameters", "(", "self", ")", ":", "\n", "        ", "return", "[", "param", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", "if", "'bias'", "in", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.Spixel_single_layer.SpixelNet1l": [[98, 104], ["Spixel_single_layer.SpixelNet", "SpixelNet.load_state_dict"], "function", ["None"], ["", "", "def", "SpixelNet1l", "(", "data", "=", "None", ")", ":", "\n", "# Model without  batch normalization", "\n", "    ", "model", "=", "SpixelNet", "(", "batchNorm", "=", "False", ")", "\n", "if", "data", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "data", "[", "'state_dict'", "]", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.models.Spixel_single_layer.SpixelNet1l_bn": [[106, 112], ["Spixel_single_layer.SpixelNet", "SpixelNet.load_state_dict"], "function", ["None"], ["", "def", "SpixelNet1l_bn", "(", "data", "=", "None", ")", ":", "\n", "# model with batch normalization", "\n", "    ", "model", "=", "SpixelNet", "(", "batchNorm", "=", "True", ")", "\n", "if", "data", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "data", "[", "'state_dict'", "]", ")", "\n", "", "return", "model", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.data_preprocessing.pre_process_bsd500.make_dataset": [[29, 63], ["os.getcwd", "open", "tf.readlines", "open", "vf.readlines", "print", "os.path.join", "train_list.append", "os.path.join", "val_list.append", "os.path.isfile", "print", "print", "exit", "os.path.isfile", "print", "print", "exit", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["def", "make_dataset", "(", "dir", ")", ":", "\n", "    ", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "train_list_path", "=", "cwd", "+", "'/train.txt'", "\n", "val_list_path", "=", "cwd", "+", "'/val.txt'", "\n", "train_list", "=", "[", "]", "\n", "val_list", "=", "[", "]", "\n", "\n", "try", ":", "\n", "        ", "with", "open", "(", "train_list_path", ",", "'r'", ")", "as", "tf", ":", "\n", "            ", "train_list_0", "=", "tf", ".", "readlines", "(", ")", "\n", "for", "path", "in", "train_list_0", ":", "\n", "                ", "img_path", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'BSR/BSDS500/data/images/train'", ",", "path", "[", ":", "-", "1", "]", "+", "'.jpg'", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "img_path", ")", ":", "\n", "                    ", "print", "(", "'The validate images are missing in {}'", ".", "format", "(", "os", ".", "path", ".", "dirname", "(", "img_path", ")", ")", ")", "\n", "print", "(", "'Please pre-process the BSDS500 as README states and provide the correct dataset path.'", ")", "\n", "exit", "(", "1", ")", "\n", "", "train_list", ".", "append", "(", "img_path", ")", "\n", "\n", "", "", "with", "open", "(", "val_list_path", ",", "'r'", ")", "as", "vf", ":", "\n", "            ", "val_list_0", "=", "vf", ".", "readlines", "(", ")", "\n", "for", "path", "in", "val_list_0", ":", "\n", "                ", "img_path", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'BSR/BSDS500/data/images/val'", ",", "path", "[", ":", "-", "1", "]", "+", "'.jpg'", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "img_path", ")", ":", "\n", "                    ", "print", "(", "'The validate images are missing in {}'", ".", "format", "(", "os", ".", "path", ".", "dirname", "(", "img_path", ")", ")", ")", "\n", "print", "(", "'Please pre-process the BSDS500 as README states and provide the correct dataset path.'", ")", "\n", "exit", "(", "1", ")", "\n", "", "val_list", ".", "append", "(", "img_path", ")", "\n", "\n", "\n", "", "", "", "except", "IOError", ":", "\n", "        ", "print", "(", "'Error No avaliable list '", ")", "\n", "return", "\n", "\n", "", "return", "train_list", ",", "val_list", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.data_preprocessing.pre_process_bsd500.convert_label": [[64, 80], ["numpy.zeros().astype", "numpy.unique().tolist", "numpy.squeeze", "numpy.argmax", "numpy.zeros", "numpy.unique", "print", "numpy.unique"], "function", ["None"], ["", "def", "convert_label", "(", "label", ")", ":", "\n", "\n", "    ", "problabel", "=", "np", ".", "zeros", "(", "(", "label", ".", "shape", "[", "0", "]", ",", "label", ".", "shape", "[", "1", "]", ",", "50", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "ct", "=", "0", "\n", "for", "t", "in", "np", ".", "unique", "(", "label", ")", ".", "tolist", "(", ")", ":", "\n", "        ", "if", "ct", ">=", "50", ":", "\n", "            ", "print", "(", "'give up sample because label shape is larger than 50: {0}'", ".", "format", "(", "np", ".", "unique", "(", "label", ")", ".", "shape", ")", ")", "\n", "break", "\n", "", "else", ":", "\n", "            ", "problabel", "[", ":", ",", ":", ",", "ct", "]", "=", "(", "label", "==", "t", ")", "#one hot", "\n", "", "ct", "=", "ct", "+", "1", "\n", "\n", "", "label2", "=", "np", ".", "squeeze", "(", "np", ".", "argmax", "(", "problabel", ",", "axis", "=", "-", "1", ")", ")", "#squashed label e.g. [1. 3. 9, 10] --> [0,1,2,3], (h*w)", "\n", "\n", "return", "label2", ",", "problabel", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.data_preprocessing.pre_process_bsd500.BSD_loader": [[81, 115], ["cv2.imread", "scipy.io.loadmat", "range", "cv2.bilateralFilter", "len", "pre_process_bsd500.convert_label", "gtseg_lst.append", "print", "exit"], "function", ["home.repos.pwc.inspect_result.fuy34_superpixel_fcn.data_preprocessing.pre_process_bsd500_ori_sz.convert_label"], ["", "def", "BSD_loader", "(", "path_imgs", ",", "path_label", ",", "b_filter", "=", "False", ")", ":", "\n", "\n", "    ", "img_", "=", "cv2", ".", "imread", "(", "path_imgs", ")", "\n", "\n", "# origin size 481*321 or 321*481", "\n", "H_", ",", "W_", ",", "_", "=", "img_", ".", "shape", "\n", "\n", "# crop to 16*n size", "\n", "if", "H_", "==", "321", "and", "W_", "==", "481", ":", "\n", "        ", "img", "=", "img_", "[", ":", "320", ",", ":", "480", ",", ":", "]", "\n", "", "elif", "H_", "==", "481", "and", "W_", "==", "321", ":", "\n", "        ", "img", "=", "img_", "[", ":", "480", ",", ":", "320", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "print", "(", "'It is not BSDS500 images'", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "", "if", "b_filter", ":", "\n", "        ", "img", "=", "cv2", ".", "bilateralFilter", "(", "img", ",", "5", ",", "75", ",", "75", ")", "\n", "\n", "", "gtseg_lst", "=", "[", "]", "\n", "\n", "gtseg_all", "=", "loadmat", "(", "path_label", ")", "\n", "for", "t", "in", "range", "(", "len", "(", "gtseg_all", "[", "'groundTruth'", "]", "[", "0", "]", ")", ")", ":", "\n", "        ", "gtseg", "=", "gtseg_all", "[", "'groundTruth'", "]", "[", "0", "]", "[", "t", "]", "[", "0", "]", "[", "0", "]", "[", "0", "]", "\n", "\n", "label_", ",", "_", "=", "convert_label", "(", "gtseg", ")", "\n", "if", "H_", "==", "321", "and", "W_", "==", "481", ":", "\n", "            ", "label", "=", "label_", "[", ":", "320", ",", ":", "480", "]", "\n", "", "elif", "H_", "==", "481", "and", "W_", "==", "321", ":", "\n", "            ", "label", "=", "label_", "[", ":", "480", ",", ":", "320", "]", "\n", "\n", "", "gtseg_lst", ".", "append", "(", "label", ")", "\n", "\n", "", "return", "img", ",", "gtseg_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.data_preprocessing.pre_process_bsd500.dump_example": [[116, 144], ["pre_process_bsd500.BSD_loader", "enumerate", "print", "os.path.join", "os.path.join", "os.path.isdir", "os.path.basename", "os.path.join", "cv2.imwrite", "os.path.join", "cv2.imwrite", "os.makedirs", "img.astype", "label.astype", "img_path.replace", "str", "os.path.isdir"], "function", ["home.repos.pwc.inspect_result.fuy34_superpixel_fcn.data_preprocessing.pre_process_bsd500_ori_sz.BSD_loader"], ["", "def", "dump_example", "(", "n", ",", "n_total", ",", "dataType", ",", "img_path", ")", ":", "\n", "    ", "global", "args", "\n", "if", "n", "%", "100", "==", "0", ":", "\n", "        ", "print", "(", "'Progress {0} {1}/{2}....'", ".", "format", "(", "dataType", ",", "n", ",", "n_total", ")", ")", "\n", "\n", "", "img", ",", "label_lst", "=", "BSD_loader", "(", "img_path", ",", "img_path", ".", "replace", "(", "'images'", ",", "'groundTruth'", ")", "[", ":", "-", "4", "]", "+", "'.mat'", ",", "b_filter", "=", "args", ".", "b_filter", ")", "\n", "\n", "if", "args", ".", "b_filter", ":", "\n", "        ", "dump_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "dump_root", ",", "dataType", "+", "'_b_filter_'", "+", "str", "(", "args", ".", "b_filter", ")", ")", "\n", "", "else", ":", "\n", "        ", "dump_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "dump_root", ",", "dataType", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "dump_dir", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "dump_dir", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isdir", "(", "dump_dir", ")", ":", "\n", "                ", "raise", "\n", "\n", "", "", "", "img_name", "=", "os", ".", "path", ".", "basename", "(", "img_path", ")", "[", ":", "-", "4", "]", "\n", "for", "k", ",", "label", "in", "enumerate", "(", "label_lst", ")", ":", "\n", "# save images", "\n", "        ", "dump_img_file", "=", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'{0}_{1}_img.jpg'", ".", "format", "(", "img_name", ",", "k", ")", ")", "\n", "cv2", ".", "imwrite", "(", "dump_img_file", ",", "img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "# save label", "\n", "dump_label_file", "=", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'{0}_{1}_label.png'", ".", "format", "(", "img_name", ",", "k", ")", ")", "\n", "cv2", ".", "imwrite", "(", "dump_label_file", ",", "label", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.data_preprocessing.pre_process_bsd500.main": [[159, 182], ["pre_process_bsd500.make_dataset", "os.path.abspath", "print", "joblib.Parallel", "joblib.Parallel", "open", "glob.glob", "open", "glob.glob", "os.path.join", "trnf.write", "os.path.join", "trnf.write", "joblib.delayed", "len", "enumerate", "joblib.delayed", "len", "enumerate"], "function", ["home.repos.pwc.inspect_result.fuy34_superpixel_fcn.data_preprocessing.pre_process_bsd500_ori_sz.make_dataset"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "datadir", "=", "args", ".", "dataset", "\n", "train_list", ",", "val_list", "=", "make_dataset", "(", "datadir", ")", "\n", "\n", "dump_pth", "=", "os", ".", "path", ".", "abspath", "(", "args", ".", "dump_root", ")", "\n", "print", "(", "\"data will be saved to {}\"", ".", "format", "(", "dump_pth", ")", ")", "\n", "# for debug only", "\n", "# for n, train_samp in enumerate(train_list):", "\n", "#     dump_example(n, len(train_list),'train', train_samp)", "\n", "\n", "# mutil-thread running for speed", "\n", "Parallel", "(", "n_jobs", "=", "args", ".", "num_threads", ")", "(", "delayed", "(", "dump_example", ")", "(", "n", ",", "len", "(", "train_list", ")", ",", "'train'", ",", "train_samp", ")", "for", "n", ",", "train_samp", "in", "enumerate", "(", "train_list", ")", ")", "\n", "Parallel", "(", "n_jobs", "=", "args", ".", "num_threads", ")", "(", "delayed", "(", "dump_example", ")", "(", "n", ",", "len", "(", "train_list", ")", ",", "'val'", ",", "val_samp", ")", "for", "n", ",", "val_samp", "in", "enumerate", "(", "val_list", ")", ")", "\n", "\n", "with", "open", "(", "dump_pth", "+", "'/train.txt'", ",", "'w'", ")", "as", "trnf", ":", "\n", "        ", "imfiles", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "dump_pth", ",", "'train'", ",", "'*_img.jpg'", ")", ")", "\n", "for", "frame", "in", "imfiles", ":", "\n", "            ", "trnf", ".", "write", "(", "frame", "+", "'\\n'", ")", "\n", "\n", "", "", "with", "open", "(", "dump_pth", "+", "'/val.txt'", ",", "'w'", ")", "as", "trnf", ":", "\n", "        ", "imfiles", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "dump_pth", ",", "'val'", ",", "'*_img.jpg'", ")", ")", "\n", "for", "frame", "in", "imfiles", ":", "\n", "            ", "trnf", ".", "write", "(", "frame", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.data_preprocessing.pre_process_bsd500_ori_sz.make_dataset": [[31, 52], ["os.getcwd", "os.path.join", "open", "tstf.readlines", "print", "os.path.join", "tst_list.append", "os.path.isfile", "print", "print", "exit", "os.path.dirname"], "function", ["None"], ["def", "make_dataset", "(", "dir", ")", ":", "\n", "    ", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "tst_list_path", "=", "os", ".", "path", ".", "join", "(", "cwd", ",", "'test.txt'", ")", "\n", "tst_list", "=", "[", "]", "\n", "\n", "try", ":", "\n", "        ", "with", "open", "(", "tst_list_path", ",", "'r'", ")", "as", "tstf", ":", "\n", "            ", "tst_list_0", "=", "tstf", ".", "readlines", "(", ")", "\n", "for", "path", "in", "tst_list_0", ":", "\n", "                ", "img_path", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'BSR/BSDS500/data/images/test'", ",", "path", "[", ":", "-", "1", "]", "+", "'.jpg'", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "img_path", ")", ":", "\n", "                    ", "print", "(", "'The validate images are missing in {}'", ".", "format", "(", "os", ".", "path", ".", "dirname", "(", "img_path", ")", ")", ")", "\n", "print", "(", "'Please pre-process the BSDS500 as README states and provide the correct dataset path.'", ")", "\n", "exit", "(", "1", ")", "\n", "", "tst_list", ".", "append", "(", "img_path", ")", "\n", "\n", "", "", "", "except", "IOError", ":", "\n", "        ", "print", "(", "'Error No avaliable list '", ")", "\n", "return", "\n", "\n", "", "return", "tst_list", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.data_preprocessing.pre_process_bsd500_ori_sz.convert_label": [[53, 69], ["numpy.zeros().astype", "numpy.unique().tolist", "numpy.squeeze", "numpy.argmax", "numpy.zeros", "numpy.unique", "print", "numpy.unique"], "function", ["None"], ["", "def", "convert_label", "(", "label", ")", ":", "\n", "\n", "    ", "problabel", "=", "np", ".", "zeros", "(", "(", "label", ".", "shape", "[", "0", "]", ",", "label", ".", "shape", "[", "1", "]", ",", "50", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "ct", "=", "0", "\n", "for", "t", "in", "np", ".", "unique", "(", "label", ")", ".", "tolist", "(", ")", ":", "\n", "        ", "if", "ct", ">=", "50", ":", "\n", "            ", "print", "(", "'give up sample because label shape is larger than 50: {0}'", ".", "format", "(", "np", ".", "unique", "(", "label", ")", ".", "shape", ")", ")", "\n", "break", "\n", "", "else", ":", "\n", "            ", "problabel", "[", ":", ",", ":", ",", "ct", "]", "=", "(", "label", "==", "t", ")", "#one hot", "\n", "", "ct", "=", "ct", "+", "1", "\n", "\n", "", "label2", "=", "np", ".", "squeeze", "(", "np", ".", "argmax", "(", "problabel", ",", "axis", "=", "-", "1", ")", ")", "#e.g. squashed label e.g. [1. 3. 9, 10] --> [0,1,2,3], (h*w)", "\n", "\n", "return", "label2", ",", "problabel", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.data_preprocessing.pre_process_bsd500_ori_sz.BSD_loader": [[70, 88], ["cv2.imread", "scipy.io.loadmat", "range", "len", "pre_process_bsd500_ori_sz.convert_label", "gtseg_lst.append"], "function", ["home.repos.pwc.inspect_result.fuy34_superpixel_fcn.data_preprocessing.pre_process_bsd500_ori_sz.convert_label"], ["", "def", "BSD_loader", "(", "path_imgs", ",", "path_label", ")", ":", "\n", "\n", "    ", "img_", "=", "cv2", ".", "imread", "(", "path_imgs", ")", "\n", "\n", "# origin size 481*321 or 321*481", "\n", "H_", ",", "W_", ",", "_", "=", "img_", ".", "shape", "\n", "img", "=", "img_", "\n", "\n", "gtseg_lst", "=", "[", "]", "\n", "\n", "gtseg_all", "=", "loadmat", "(", "path_label", ")", "\n", "for", "t", "in", "range", "(", "len", "(", "gtseg_all", "[", "'groundTruth'", "]", "[", "0", "]", ")", ")", ":", "\n", "        ", "gtseg", "=", "gtseg_all", "[", "'groundTruth'", "]", "[", "0", "]", "[", "t", "]", "[", "0", "]", "[", "0", "]", "[", "0", "]", "\n", "\n", "label_", ",", "_", "=", "convert_label", "(", "gtseg", ")", "\n", "gtseg_lst", ".", "append", "(", "label_", ")", "\n", "\n", "", "return", "img", ",", "gtseg_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.data_preprocessing.pre_process_bsd500_ori_sz.dump_example": [[89, 132], ["pre_process_bsd500_ori_sz.BSD_loader", "os.path.join", "enumerate", "print", "os.path.isdir", "os.path.basename", "os.path.join", "os.path.join", "numpy.savetxt", "os.makedirs", "os.path.isfile", "cv2.imwrite", "os.path.isdir", "os.makedirs", "img_path.replace", "img.astype", "os.path.join", "os.path.join", "os.path.isdir"], "function", ["home.repos.pwc.inspect_result.fuy34_superpixel_fcn.data_preprocessing.pre_process_bsd500_ori_sz.BSD_loader"], ["", "def", "dump_example", "(", "n", ",", "n_total", ",", "dataType", ",", "img_path", ")", ":", "\n", "    ", "global", "args", "\n", "if", "n", "%", "100", "==", "0", ":", "\n", "        ", "print", "(", "'Progress {0} {1}/{2}....'", ".", "format", "(", "dataType", ",", "n", ",", "n_total", ")", ")", "\n", "\n", "", "img", ",", "label_lst", "=", "BSD_loader", "(", "img_path", ",", "img_path", ".", "replace", "(", "'images'", ",", "'groundTruth'", ")", "[", ":", "-", "4", "]", "+", "'.mat'", ")", "\n", "dump_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "dump_root", ",", "dataType", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dump_dir", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "dump_dir", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isdir", "(", "dump_dir", ")", ":", "\n", "                ", "raise", "\n", "\n", "", "", "", "img_name", "=", "os", ".", "path", ".", "basename", "(", "img_path", ")", "[", ":", "-", "4", "]", "\n", "for", "k", ",", "label", "in", "enumerate", "(", "label_lst", ")", ":", "\n", "# save images", "\n", "        ", "dump_img_file", "=", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'{0}_img.jpg'", ".", "format", "(", "img_name", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "dump_img_file", ")", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "dump_img_file", ",", "img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "# save png label, uncomment it if needed", "\n", "# dump_label_file = os.path.join(dump_dir, '{0}_{1}_label.png' .format(img_name, k))", "\n", "# cv2.imwrite(dump_label_file, label.astype(np.uint8))", "\n", "\n", "# save label viz, uncomment if needed ", "\n", "# if not os.path.isdir(os.path.join(dump_dir,'label_viz')):", "\n", "#     os.makedirs(os.path.join(dump_dir,'label_viz'))", "\n", "# dump_label_viz = os.path.join(dump_dir, 'label_viz',  '{0}_{1}_label_viz.png'.format(img_name, k))", "\n", "# plt.imshow(label) #val2uint8(tgt_disp, MAX_DISP, MIN_DISP)", "\n", "# plt.axis('off')", "\n", "# plt.gca().xaxis.set_major_locator(plt.NullLocator())", "\n", "# plt.gca().yaxis.set_major_locator(plt.NullLocator())", "\n", "# plt.subplots_adjust(top=1, bottom=0, left=0, right=1, hspace=0, wspace=0)", "\n", "# plt.margins(0, 0)", "\n", "# plt.savefig(dump_label_viz,bbox_inches='tight',pad_inches=0)", "\n", "# plt.close()", "\n", "\n", "# save csv for formal evaluation with benchmark code", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'map_csv'", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'map_csv'", ")", ")", "\n", "", "dump_label_csv", "=", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'map_csv'", ",", "'{0}-{1}.csv'", ".", "format", "(", "img_name", ",", "k", ")", ")", "\n", "np", ".", "savetxt", "(", "dump_label_csv", ",", "(", "label", "+", "1", ")", ".", "astype", "(", "int", ")", ",", "fmt", "=", "'%i'", ",", "delimiter", "=", "\",\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuy34_superpixel_fcn.data_preprocessing.pre_process_bsd500_ori_sz.main": [[134, 151], ["pre_process_bsd500_ori_sz.make_dataset", "os.path.abspath", "print", "joblib.Parallel", "open", "glob.glob", "os.path.join", "trnf.write", "joblib.delayed", "len", "enumerate"], "function", ["home.repos.pwc.inspect_result.fuy34_superpixel_fcn.data_preprocessing.pre_process_bsd500_ori_sz.make_dataset"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "datadir", "=", "args", ".", "dataset", "\n", "test_list", "=", "make_dataset", "(", "datadir", ")", "\n", "\n", "dump_pth", "=", "os", ".", "path", ".", "abspath", "(", "args", ".", "dump_root", ")", "\n", "print", "(", "\"data will be saved to {}\"", ".", "format", "(", "dump_pth", ")", ")", "\n", "# single thread for debug", "\n", "# for n, train_samp in enumerate(train_list):", "\n", "#     dump_example(n, len(train_list),'train', train_samp)", "\n", "\n", "# mutil-thread running for speed", "\n", "Parallel", "(", "n_jobs", "=", "args", ".", "num_threads", ")", "(", "delayed", "(", "dump_example", ")", "(", "n", ",", "len", "(", "test_list", ")", ",", "'test'", ",", "test_samp", ")", "for", "n", ",", "test_samp", "in", "enumerate", "(", "test_list", ")", ")", "\n", "\n", "with", "open", "(", "dump_pth", "+", "'/test.txt'", ",", "'w'", ")", "as", "trnf", ":", "\n", "        ", "imfiles", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "dump_pth", ",", "'test'", ",", "'*_img.jpg'", ")", ")", "\n", "for", "frame", "in", "imfiles", ":", "\n", "            ", "trnf", ".", "write", "(", "frame", "+", "'\\n'", ")", "\n", "\n"]]}