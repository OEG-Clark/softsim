{"home.repos.pwc.inspect_result.weitianxin_MACR.utils.predata_valid.second": [[9, 11], ["None"], "function", ["None"], ["def", "second", "(", "elem", ")", ":", "\n", "    ", "return", "elem", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utils.predata_valid.forth": [[12, 14], ["None"], "function", ["None"], ["", "def", "forth", "(", "elem", ")", ":", "\n", "    ", "return", "elem", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utils.predata_valid.filter": [[15, 84], ["dict", "dict", "user_list.keys", "item_list.keys", "collections.defaultdict", "collections.defaultdict", "user_list.items", "item_list.items", "set", "set", "user_list.items", "item_list.items", "user_list.pop", "item_list.pop", "len", "set.add", "len", "set.add", "item_list[].remove", "user_list[].remove"], "function", ["None"], ["", "def", "filter", "(", "user_list", ",", "item_list", ",", "K", "=", "5", ")", ":", "\n", "    ", "flag", "=", "True", "\n", "while", "flag", ":", "\n", "        ", "flag", "=", "False", "\n", "users_to_delete", "=", "set", "(", ")", "\n", "items_to_delete", "=", "set", "(", ")", "\n", "for", "user", ",", "items", "in", "user_list", ".", "items", "(", ")", ":", "\n", "# print(items)", "\n", "            ", "if", "len", "(", "items", ")", "<", "K", ":", "\n", "                ", "flag", "=", "True", "\n", "users_to_delete", ".", "add", "(", "user", ")", "\n", "for", "item", "in", "items", ":", "\n", "                    ", "try", ":", "\n", "                        ", "item_id", "=", "item", "[", "0", "]", "\n", "for", "user_info", "in", "item_list", "[", "item_id", "]", ":", "\n", "                            ", "if", "user_info", "[", "0", "]", "==", "user", ":", "\n", "                                ", "item_list", "[", "item_id", "]", ".", "remove", "(", "user_info", ")", "\n", "# while True:", "\n", "#     item_list[item[0]].remove(user)", "\n", "", "", "", "except", "ValueError", ":", "\n", "                        ", "continue", "\n", "", "", "", "", "for", "user", "in", "users_to_delete", ":", "\n", "            ", "user_list", ".", "pop", "(", "user", ")", "\n", "#print('user:', user)", "\n", "\n", "", "for", "item", ",", "users", "in", "item_list", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "users", ")", "<", "K", ":", "\n", "                ", "flag", "=", "True", "\n", "items_to_delete", ".", "add", "(", "item", ")", "\n", "for", "user", "in", "users", ":", "\n", "                    ", "try", ":", "\n", "                        ", "user_id", "=", "user", "[", "0", "]", "\n", "for", "item_info", "in", "user_list", "[", "user_id", "]", ":", "\n", "                            ", "if", "item_info", "[", "0", "]", "==", "item", ":", "\n", "                                ", "user_list", "[", "user_id", "]", ".", "remove", "(", "item_info", ")", "\n", "# while True:", "\n", "#     user_list[user[0]].remove(item)", "\n", "", "", "", "except", "ValueError", ":", "\n", "                        ", "continue", "\n", "", "", "", "", "for", "item", "in", "items_to_delete", ":", "\n", "            ", "item_list", ".", "pop", "(", "item", ")", "\n", "#print('item:', item)", "\n", "", "", "user_dict", "=", "dict", "(", ")", "\n", "item_dict", "=", "dict", "(", ")", "\n", "user_id", "=", "0", "\n", "for", "user", "in", "user_list", ".", "keys", "(", ")", ":", "\n", "        ", "user_dict", "[", "user", "]", "=", "user_id", "\n", "user_id", "+=", "1", "\n", "", "item_id", "=", "0", "\n", "for", "item", "in", "item_list", ".", "keys", "(", ")", ":", "\n", "        ", "item_dict", "[", "item", "]", "=", "item_id", "\n", "item_id", "+=", "1", "\n", "\n", "", "temp_user_list", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "temp_item_list", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "user", ",", "items", "in", "user_list", ".", "items", "(", ")", ":", "\n", "        ", "user", "=", "user_dict", "[", "user", "]", "\n", "# print(items)", "\n", "items", "=", "[", "[", "item_dict", "[", "i", "[", "0", "]", "]", ",", "i", "[", "1", "]", "]", "for", "i", "in", "items", "]", "\n", "temp_user_list", "[", "user", "]", "=", "items", "\n", "\n", "", "for", "item", ",", "users", "in", "item_list", ".", "items", "(", ")", ":", "\n", "        ", "item", "=", "item_dict", "[", "item", "]", "\n", "users", "=", "[", "[", "user_dict", "[", "u", "[", "0", "]", "]", ",", "u", "[", "1", "]", "]", "for", "u", "in", "users", "]", "\n", "temp_item_list", "[", "item", "]", "=", "users", "\n", "", "user_list", "=", "temp_user_list", "\n", "item_list", "=", "temp_item_list", "\n", "\n", "return", "user_list", ",", "item_list", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utils.data generation sample.second": [[9, 11], ["None"], "function", ["None"], ["def", "second", "(", "elem", ")", ":", "\n", "    ", "return", "elem", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utils.data generation sample.forth": [[12, 14], ["None"], "function", ["None"], ["", "def", "forth", "(", "elem", ")", ":", "\n", "    ", "return", "elem", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utils.data generation sample.filter": [[15, 84], ["dict", "dict", "user_list.keys", "item_list.keys", "collections.defaultdict", "collections.defaultdict", "user_list.items", "item_list.items", "set", "set", "user_list.items", "item_list.items", "user_list.pop", "item_list.pop", "len", "set.add", "len", "set.add", "item_list[].remove", "user_list[].remove"], "function", ["None"], ["", "def", "filter", "(", "user_list", ",", "item_list", ",", "K", "=", "5", ")", ":", "\n", "    ", "flag", "=", "True", "\n", "while", "flag", ":", "\n", "        ", "flag", "=", "False", "\n", "users_to_delete", "=", "set", "(", ")", "\n", "items_to_delete", "=", "set", "(", ")", "\n", "for", "user", ",", "items", "in", "user_list", ".", "items", "(", ")", ":", "\n", "# print(items)", "\n", "            ", "if", "len", "(", "items", ")", "<", "K", ":", "\n", "                ", "flag", "=", "True", "\n", "users_to_delete", ".", "add", "(", "user", ")", "\n", "for", "item", "in", "items", ":", "\n", "                    ", "try", ":", "\n", "                        ", "item_id", "=", "item", "[", "0", "]", "\n", "for", "user_info", "in", "item_list", "[", "item_id", "]", ":", "\n", "                            ", "if", "user_info", "[", "0", "]", "==", "user", ":", "\n", "                                ", "item_list", "[", "item_id", "]", ".", "remove", "(", "user_info", ")", "\n", "# while True:", "\n", "#     item_list[item[0]].remove(user)", "\n", "", "", "", "except", "ValueError", ":", "\n", "                        ", "continue", "\n", "", "", "", "", "for", "user", "in", "users_to_delete", ":", "\n", "            ", "user_list", ".", "pop", "(", "user", ")", "\n", "#print('user:', user)", "\n", "\n", "", "for", "item", ",", "users", "in", "item_list", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "users", ")", "<", "K", ":", "\n", "                ", "flag", "=", "True", "\n", "items_to_delete", ".", "add", "(", "item", ")", "\n", "for", "user", "in", "users", ":", "\n", "                    ", "try", ":", "\n", "                        ", "user_id", "=", "user", "[", "0", "]", "\n", "for", "item_info", "in", "user_list", "[", "user_id", "]", ":", "\n", "                            ", "if", "item_info", "[", "0", "]", "==", "item", ":", "\n", "                                ", "user_list", "[", "user_id", "]", ".", "remove", "(", "item_info", ")", "\n", "# while True:", "\n", "#     user_list[user[0]].remove(item)", "\n", "", "", "", "except", "ValueError", ":", "\n", "                        ", "continue", "\n", "", "", "", "", "for", "item", "in", "items_to_delete", ":", "\n", "            ", "item_list", ".", "pop", "(", "item", ")", "\n", "#print('item:', item)", "\n", "", "", "user_dict", "=", "dict", "(", ")", "\n", "item_dict", "=", "dict", "(", ")", "\n", "user_id", "=", "0", "\n", "for", "user", "in", "user_list", ".", "keys", "(", ")", ":", "\n", "        ", "user_dict", "[", "user", "]", "=", "user_id", "\n", "user_id", "+=", "1", "\n", "", "item_id", "=", "0", "\n", "for", "item", "in", "item_list", ".", "keys", "(", ")", ":", "\n", "        ", "item_dict", "[", "item", "]", "=", "item_id", "\n", "item_id", "+=", "1", "\n", "\n", "", "temp_user_list", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "temp_item_list", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "user", ",", "items", "in", "user_list", ".", "items", "(", ")", ":", "\n", "        ", "user", "=", "user_dict", "[", "user", "]", "\n", "# print(items)", "\n", "items", "=", "[", "[", "item_dict", "[", "i", "[", "0", "]", "]", ",", "i", "[", "1", "]", "]", "for", "i", "in", "items", "]", "\n", "temp_user_list", "[", "user", "]", "=", "items", "\n", "\n", "", "for", "item", ",", "users", "in", "item_list", ".", "items", "(", ")", ":", "\n", "        ", "item", "=", "item_dict", "[", "item", "]", "\n", "users", "=", "[", "[", "user_dict", "[", "u", "[", "0", "]", "]", ",", "u", "[", "1", "]", "]", "for", "u", "in", "users", "]", "\n", "temp_item_list", "[", "item", "]", "=", "users", "\n", "", "user_list", "=", "temp_user_list", "\n", "item_list", "=", "temp_item_list", "\n", "\n", "return", "user_list", ",", "item_list", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utils.predata_sorted_by_time_in_total.second": [[9, 11], ["None"], "function", ["None"], ["def", "second", "(", "elem", ")", ":", "\n", "    ", "return", "elem", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utils.predata_sorted_by_time_in_total.forth": [[12, 14], ["None"], "function", ["None"], ["", "def", "forth", "(", "elem", ")", ":", "\n", "    ", "return", "elem", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utils.predata_sorted_by_time_in_total.filter": [[15, 84], ["dict", "dict", "user_list.keys", "item_list.keys", "collections.defaultdict", "collections.defaultdict", "user_list.items", "item_list.items", "set", "set", "user_list.items", "item_list.items", "user_list.pop", "item_list.pop", "len", "set.add", "len", "set.add", "item_list[].remove", "user_list[].remove"], "function", ["None"], ["", "def", "filter", "(", "user_list", ",", "item_list", ",", "K", "=", "5", ")", ":", "\n", "    ", "flag", "=", "True", "\n", "while", "flag", ":", "\n", "        ", "flag", "=", "False", "\n", "users_to_delete", "=", "set", "(", ")", "\n", "items_to_delete", "=", "set", "(", ")", "\n", "for", "user", ",", "items", "in", "user_list", ".", "items", "(", ")", ":", "\n", "# print(items)", "\n", "            ", "if", "len", "(", "items", ")", "<", "K", ":", "\n", "                ", "flag", "=", "True", "\n", "users_to_delete", ".", "add", "(", "user", ")", "\n", "for", "item", "in", "items", ":", "\n", "                    ", "try", ":", "\n", "                        ", "item_id", "=", "item", "[", "0", "]", "\n", "for", "user_info", "in", "item_list", "[", "item_id", "]", ":", "\n", "                            ", "if", "user_info", "[", "0", "]", "==", "user", ":", "\n", "                                ", "item_list", "[", "item_id", "]", ".", "remove", "(", "user_info", ")", "\n", "# while True:", "\n", "#     item_list[item[0]].remove(user)", "\n", "", "", "", "except", "ValueError", ":", "\n", "                        ", "continue", "\n", "", "", "", "", "for", "user", "in", "users_to_delete", ":", "\n", "            ", "user_list", ".", "pop", "(", "user", ")", "\n", "#print('user:', user)", "\n", "\n", "", "for", "item", ",", "users", "in", "item_list", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "users", ")", "<", "K", ":", "\n", "                ", "flag", "=", "True", "\n", "items_to_delete", ".", "add", "(", "item", ")", "\n", "for", "user", "in", "users", ":", "\n", "                    ", "try", ":", "\n", "                        ", "user_id", "=", "user", "[", "0", "]", "\n", "for", "item_info", "in", "user_list", "[", "user_id", "]", ":", "\n", "                            ", "if", "item_info", "[", "0", "]", "==", "item", ":", "\n", "                                ", "user_list", "[", "user_id", "]", ".", "remove", "(", "item_info", ")", "\n", "# while True:", "\n", "#     user_list[user[0]].remove(item)", "\n", "", "", "", "except", "ValueError", ":", "\n", "                        ", "continue", "\n", "", "", "", "", "for", "item", "in", "items_to_delete", ":", "\n", "            ", "item_list", ".", "pop", "(", "item", ")", "\n", "#print('item:', item)", "\n", "", "", "user_dict", "=", "dict", "(", ")", "\n", "item_dict", "=", "dict", "(", ")", "\n", "user_id", "=", "0", "\n", "for", "user", "in", "user_list", ".", "keys", "(", ")", ":", "\n", "        ", "user_dict", "[", "user", "]", "=", "user_id", "\n", "user_id", "+=", "1", "\n", "", "item_id", "=", "0", "\n", "for", "item", "in", "item_list", ".", "keys", "(", ")", ":", "\n", "        ", "item_dict", "[", "item", "]", "=", "item_id", "\n", "item_id", "+=", "1", "\n", "\n", "", "temp_user_list", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "temp_item_list", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "user", ",", "items", "in", "user_list", ".", "items", "(", ")", ":", "\n", "        ", "user", "=", "user_dict", "[", "user", "]", "\n", "# print(items)", "\n", "items", "=", "[", "[", "item_dict", "[", "i", "[", "0", "]", "]", ",", "i", "[", "1", "]", "]", "for", "i", "in", "items", "]", "\n", "temp_user_list", "[", "user", "]", "=", "items", "\n", "\n", "", "for", "item", ",", "users", "in", "item_list", ".", "items", "(", ")", ":", "\n", "        ", "item", "=", "item_dict", "[", "item", "]", "\n", "users", "=", "[", "[", "user_dict", "[", "u", "[", "0", "]", "]", ",", "u", "[", "1", "]", "]", "for", "u", "in", "users", "]", "\n", "temp_item_list", "[", "item", "]", "=", "users", "\n", "", "user_list", "=", "temp_user_list", "\n", "item_list", "=", "temp_item_list", "\n", "\n", "return", "user_list", ",", "item_list", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.LightGCN.__init__": [[33, 210], ["LightGCN_tune.LightGCN.norm_adj.count_nonzero", "eval", "len", "eval", "LightGCN_tune.LightGCN.create_model_str", "eval", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.summary.merge", "tensorflow.summary.merge", "tensorflow.summary.merge", "tensorflow.summary.merge", "LightGCN_tune.LightGCN._init_weights", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.Variable", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.matmul", "tensorflow.matmul", "LightGCN_tune.LightGCN.create_bpr_loss", "tensorflow.train.AdamOptimizer().minimize", "LightGCN_tune.LightGCN.create_bce_loss", "tensorflow.train.AdamOptimizer().minimize", "LightGCN_tune.LightGCN.create_bce_loss_two_brach1", "tensorflow.train.AdamOptimizer().minimize", "LightGCN_tune.LightGCN.create_bce_loss_two_brach_both", "tensorflow.train.AdamOptimizer().minimize", "LightGCN_tune.LightGCN.create_bce_loss_two_brach2", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.get_collection", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.get_collection", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.get_collection", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.get_collection", "LightGCN_tune.LightGCN._create_lightgcn_embed", "tensorflow.zeros", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "LightGCN_tune.LightGCN._create_ngcf_embed", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "LightGCN_tune.LightGCN._create_gcn_embed", "LightGCN_tune.LightGCN._create_gcmc_embed"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF.create_model_str", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._init_weights", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE.create_bpr_loss", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BIASMF.create_bce_loss", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.LightGCN.create_bce_loss_two_brach1", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BPRMF.create_bce_loss_two_brach_both", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.LightGCN.create_bce_loss_two_brach2", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.LightGCN._create_lightgcn_embed", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._create_ngcf_embed", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._create_gcn_embed", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._create_gcmc_embed"], ["    ", "def", "__init__", "(", "self", ",", "data_config", ",", "pretrain_data", ")", ":", "\n", "# argument settings", "\n", "        ", "self", ".", "model_type", "=", "'LightGCN'", "\n", "self", ".", "adj_type", "=", "args", ".", "adj_type", "\n", "self", ".", "alg_type", "=", "args", ".", "alg_type", "\n", "self", ".", "pretrain_data", "=", "pretrain_data", "\n", "self", ".", "n_users", "=", "data_config", "[", "'n_users'", "]", "\n", "self", ".", "n_items", "=", "data_config", "[", "'n_items'", "]", "\n", "self", ".", "n_fold", "=", "100", "\n", "self", ".", "norm_adj", "=", "data_config", "[", "'norm_adj'", "]", "\n", "self", ".", "n_nonzero_elems", "=", "self", ".", "norm_adj", ".", "count_nonzero", "(", ")", "\n", "self", ".", "lr", "=", "args", ".", "lr", "\n", "self", ".", "emb_dim", "=", "args", ".", "embed_size", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "self", ".", "weight_size", "=", "eval", "(", "args", ".", "layer_size", ")", "\n", "self", ".", "n_layers", "=", "len", "(", "self", ".", "weight_size", ")", "\n", "self", ".", "regs", "=", "eval", "(", "args", ".", "regs", ")", "\n", "self", ".", "decay", "=", "self", ".", "regs", "[", "0", "]", "\n", "self", ".", "log_dir", "=", "self", ".", "create_model_str", "(", ")", "\n", "self", ".", "verbose", "=", "args", ".", "verbose", "\n", "self", ".", "Ks", "=", "eval", "(", "args", ".", "Ks", ")", "\n", "\n", "\n", "'''\n        *********************************************************\n        Create Placeholder for Input Data & Dropout.\n        '''", "\n", "# placeholder definition", "\n", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "\n", "self", ".", "node_dropout_flag", "=", "args", ".", "node_dropout_flag", "\n", "self", ".", "node_dropout", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "mess_dropout", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "with", "tf", ".", "name_scope", "(", "'TRAIN_LOSS'", ")", ":", "\n", "            ", "self", ".", "train_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_loss'", ",", "self", ".", "train_loss", ")", "\n", "self", ".", "train_mf_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_mf_loss'", ",", "self", ".", "train_mf_loss", ")", "\n", "self", ".", "train_emb_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_emb_loss'", ",", "self", ".", "train_emb_loss", ")", "\n", "self", ".", "train_reg_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_reg_loss'", ",", "self", ".", "train_reg_loss", ")", "\n", "", "self", ".", "merged_train_loss", "=", "tf", ".", "summary", ".", "merge", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "SUMMARIES", ",", "'TRAIN_LOSS'", ")", ")", "\n", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'TRAIN_ACC'", ")", ":", "\n", "            ", "self", ".", "train_rec_first", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "#record for top(Ks[0])", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_rec_first'", ",", "self", ".", "train_rec_first", ")", "\n", "self", ".", "train_rec_last", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "#record for top(Ks[-1])", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_rec_last'", ",", "self", ".", "train_rec_last", ")", "\n", "self", ".", "train_ndcg_first", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_ndcg_first'", ",", "self", ".", "train_ndcg_first", ")", "\n", "self", ".", "train_ndcg_last", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_ndcg_last'", ",", "self", ".", "train_ndcg_last", ")", "\n", "", "self", ".", "merged_train_acc", "=", "tf", ".", "summary", ".", "merge", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "SUMMARIES", ",", "'TRAIN_ACC'", ")", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'TEST_LOSS'", ")", ":", "\n", "            ", "self", ".", "test_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_loss'", ",", "self", ".", "test_loss", ")", "\n", "self", ".", "test_mf_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_mf_loss'", ",", "self", ".", "test_mf_loss", ")", "\n", "self", ".", "test_emb_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_emb_loss'", ",", "self", ".", "test_emb_loss", ")", "\n", "self", ".", "test_reg_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_reg_loss'", ",", "self", ".", "test_reg_loss", ")", "\n", "", "self", ".", "merged_test_loss", "=", "tf", ".", "summary", ".", "merge", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "SUMMARIES", ",", "'TEST_LOSS'", ")", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'TEST_ACC'", ")", ":", "\n", "            ", "self", ".", "test_rec_first", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_rec_first'", ",", "self", ".", "test_rec_first", ")", "\n", "self", ".", "test_rec_last", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_rec_last'", ",", "self", ".", "test_rec_last", ")", "\n", "self", ".", "test_ndcg_first", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_ndcg_first'", ",", "self", ".", "test_ndcg_first", ")", "\n", "self", ".", "test_ndcg_last", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_ndcg_last'", ",", "self", ".", "test_ndcg_last", ")", "\n", "", "self", ".", "merged_test_acc", "=", "tf", ".", "summary", ".", "merge", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "SUMMARIES", ",", "'TEST_ACC'", ")", ")", "\n", "\"\"\"\n        *********************************************************\n        Create Model Parameters (i.e., Initialize Weights).\n        \"\"\"", "\n", "# initialization of model parameters", "\n", "self", ".", "weights", "=", "self", ".", "_init_weights", "(", ")", "\n", "\n", "\"\"\"\n        *********************************************************\n        Compute Graph-based Representations of all users & items via Message-Passing Mechanism of Graph Neural Networks.\n        Different Convolutional Layers:\n            1. ngcf: defined in 'Neural Graph Collaborative Filtering', SIGIR2019;\n            2. gcn:  defined in 'Semi-Supervised Classification with Graph Convolutional Networks', ICLR2018;\n            3. gcmc: defined in 'Graph Convolutional Matrix Completion', KDD2018;\n        \"\"\"", "\n", "if", "self", ".", "alg_type", "in", "[", "'lightgcn'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_lightgcn_embed", "(", ")", "\n", "\n", "", "elif", "self", ".", "alg_type", "in", "[", "'ngcf'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_ngcf_embed", "(", ")", "\n", "\n", "", "elif", "self", ".", "alg_type", "in", "[", "'gcn'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_gcn_embed", "(", ")", "\n", "\n", "", "elif", "self", ".", "alg_type", "in", "[", "'gcmc'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_gcmc_embed", "(", ")", "\n", "\n", "", "\"\"\"\n        *********************************************************\n        Establish the final representations for user-item pairs in batch.\n        \"\"\"", "\n", "self", ".", "u_g_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ua_embeddings", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_g_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ia_embeddings", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_g_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ia_embeddings", ",", "self", ".", "neg_items", ")", "\n", "self", ".", "u_g_embeddings_pre", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_g_embeddings_pre", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_g_embeddings_pre", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "neg_items", ")", "\n", "\n", "\"\"\"\n        *********************************************************\n        Establish 2 brach.\n        \"\"\"", "\n", "self", ".", "alpha", "=", "args", ".", "alpha", "\n", "self", ".", "beta", "=", "args", ".", "beta", "\n", "self", ".", "rubi_c", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "1", "]", ")", ",", "name", "=", "'rubi_c'", ")", "\n", "self", ".", "sigmoid_yu", "=", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "w_user", ")", ")", ")", "\n", "self", ".", "sigmoid_yi", "=", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "w", ")", ")", ")", "\n", "\"\"\"\n        *********************************************************\n        Inference for the testing phase.\n        \"\"\"", "\n", "self", ".", "constant_e", "=", "self", ".", "weights", "[", "'constant_embedding'", "]", "\n", "self", ".", "batch_ratings", "=", "tf", ".", "matmul", "(", "self", ".", "u_g_embeddings", ",", "self", ".", "pos_i_g_embeddings", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "self", ".", "batch_ratings_constant", "=", "tf", ".", "matmul", "(", "self", ".", "constant_e", ",", "self", ".", "pos_i_g_embeddings", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "self", ".", "batch_ratings_causal_c", "=", "self", ".", "batch_ratings", "-", "self", ".", "batch_ratings_constant", "\n", "\"\"\"\n        *********************************************************\n        Generate Predictions & Optimize via BPR loss.\n        \"\"\"", "\n", "self", ".", "mf_loss", ",", "self", ".", "emb_loss", ",", "self", ".", "reg_loss", "=", "self", ".", "create_bpr_loss", "(", "self", ".", "u_g_embeddings", ",", "\n", "self", ".", "pos_i_g_embeddings", ",", "\n", "self", ".", "neg_i_g_embeddings", ")", "\n", "self", ".", "loss", "=", "self", ".", "mf_loss", "+", "self", ".", "emb_loss", "\n", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n", "\n", "\n", "self", ".", "mf_loss_bce", ",", "self", ".", "emb_loss_bce", ",", "self", ".", "reg_loss_bce", "=", "self", ".", "create_bce_loss", "(", "self", ".", "u_g_embeddings", ",", "\n", "self", ".", "pos_i_g_embeddings", ",", "\n", "self", ".", "neg_i_g_embeddings", ")", "\n", "self", ".", "loss_bce", "=", "self", ".", "mf_loss_bce", "+", "self", ".", "emb_loss_bce", "\n", "self", ".", "opt_bce", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss_bce", ")", "\n", "\n", "\n", "\n", "self", ".", "mf_loss_two_bce1", ",", "self", ".", "emb_loss_two_bce1", ",", "self", ".", "reg_loss_two_bce1", "=", "self", ".", "create_bce_loss_two_brach1", "(", "self", ".", "u_g_embeddings", ",", "\n", "self", ".", "pos_i_g_embeddings", ",", "\n", "self", ".", "neg_i_g_embeddings", ")", "\n", "self", ".", "loss_two_bce1", "=", "self", ".", "mf_loss_two_bce1", "+", "self", ".", "emb_loss_two_bce1", "\n", "self", ".", "opt_two_bce1", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss_two_bce1", ")", "\n", "\n", "\n", "self", ".", "mf_loss_two_bce_both", ",", "self", ".", "emb_loss_two_bce_both", ",", "self", ".", "reg_loss_two_bce_both", "=", "self", ".", "create_bce_loss_two_brach_both", "(", "self", ".", "u_g_embeddings", ",", "\n", "self", ".", "pos_i_g_embeddings", ",", "\n", "self", ".", "neg_i_g_embeddings", ")", "\n", "self", ".", "loss_two_bce_both", "=", "self", ".", "mf_loss_two_bce_both", "+", "self", ".", "emb_loss_two_bce_both", "\n", "self", ".", "opt_two_bce_both", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss_two_bce_both", ")", "\n", "\n", "\n", "\n", "self", ".", "mf_loss_two_bce2", ",", "self", ".", "emb_loss_two_bce2", ",", "self", ".", "reg_loss_two_bce2", "=", "self", ".", "create_bce_loss_two_brach2", "(", "self", ".", "u_g_embeddings", ",", "\n", "self", ".", "pos_i_g_embeddings", ",", "\n", "self", ".", "neg_i_g_embeddings", ")", "\n", "self", ".", "loss_two_bce2", "=", "self", ".", "mf_loss_two_bce2", "+", "self", ".", "emb_loss_two_bce2", "\n", "self", ".", "opt_two_bce2", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss_two_bce2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.LightGCN.create_model_str": [[212, 216], ["str", "str", "str", "str"], "methods", ["None"], ["", "def", "create_model_str", "(", "self", ")", ":", "\n", "        ", "log_dir", "=", "'/'", "+", "self", ".", "alg_type", "+", "'/layers_'", "+", "str", "(", "self", ".", "n_layers", ")", "+", "'/dim_'", "+", "str", "(", "self", ".", "emb_dim", ")", "\n", "log_dir", "+=", "'/'", "+", "args", ".", "dataset", "+", "'/lr_'", "+", "str", "(", "self", ".", "lr", ")", "+", "'/reg_'", "+", "str", "(", "self", ".", "decay", ")", "\n", "return", "log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.LightGCN.update_c": [[554, 556], ["sess.run", "tensorflow.assign", "tensorflow.ones"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run"], ["", "def", "update_c", "(", "self", ",", "sess", ",", "c", ")", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "assign", "(", "self", ".", "rubi_c", ",", "c", "*", "tf", ".", "ones", "(", "[", "1", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.LightGCN._init_weights": [[220, 257], ["dict", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "range", "tensorflow.ones", "tensorflow.Variable", "tensorflow.Variable", "print", "tensorflow.Variable", "tensorflow.Variable", "print", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer."], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "all_weights", "=", "dict", "(", ")", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "all_weights", "[", "\"constant_embedding\"", "]", "=", "tf", ".", "Variable", "(", "tf", ".", "ones", "(", "[", "1", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'constant_embedding'", ")", "\n", "if", "self", ".", "pretrain_data", "is", "None", ":", "\n", "            ", "all_weights", "[", "'user_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'user_embedding'", ")", "\n", "all_weights", "[", "'item_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'item_embedding'", ")", "\n", "print", "(", "'using xavier initialization'", ")", "\n", "", "else", ":", "\n", "            ", "all_weights", "[", "'user_embedding'", "]", "=", "tf", ".", "Variable", "(", "initial_value", "=", "self", ".", "pretrain_data", "[", "'user_embed'", "]", ",", "trainable", "=", "True", ",", "\n", "name", "=", "'user_embedding'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "all_weights", "[", "'item_embedding'", "]", "=", "tf", ".", "Variable", "(", "initial_value", "=", "self", ".", "pretrain_data", "[", "'item_embed'", "]", ",", "trainable", "=", "True", ",", "\n", "name", "=", "'item_embedding'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "print", "(", "'using pretrained initialization'", ")", "\n", "\n", "", "self", ".", "w", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "emb_dim", ",", "1", "]", ")", ",", "name", "=", "'item_branch'", ")", "\n", "self", ".", "w_user", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "emb_dim", ",", "1", "]", ")", ",", "name", "=", "'user_branch'", ")", "\n", "\n", "self", ".", "weight_size_list", "=", "[", "self", ".", "emb_dim", "]", "+", "self", ".", "weight_size", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "all_weights", "[", "'W_gc_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "weight_size_list", "[", "k", "]", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'W_gc_%d'", "%", "k", ")", "\n", "all_weights", "[", "'b_gc_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'b_gc_%d'", "%", "k", ")", "\n", "\n", "all_weights", "[", "'W_bi_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "weight_size_list", "[", "k", "]", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'W_bi_%d'", "%", "k", ")", "\n", "all_weights", "[", "'b_bi_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'b_bi_%d'", "%", "k", ")", "\n", "\n", "all_weights", "[", "'W_mlp_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "weight_size_list", "[", "k", "]", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'W_mlp_%d'", "%", "k", ")", "\n", "all_weights", "[", "'b_mlp_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'b_mlp_%d'", "%", "k", ")", "\n", "\n", "", "return", "all_weights", "\n", "", "def", "_split_A_hat", "(", "self", ",", "X", ")", ":", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.LightGCN._split_A_hat": [[257, 270], ["range", "A_fold_hat.append", "LightGCN_tune.LightGCN._convert_sp_mat_to_sp_tensor"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._convert_sp_mat_to_sp_tensor"], ["", "def", "_split_A_hat", "(", "self", ",", "X", ")", ":", "\n", "        ", "A_fold_hat", "=", "[", "]", "\n", "\n", "fold_len", "=", "(", "self", ".", "n_users", "+", "self", ".", "n_items", ")", "//", "self", ".", "n_fold", "\n", "for", "i_fold", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "            ", "start", "=", "i_fold", "*", "fold_len", "\n", "if", "i_fold", "==", "self", ".", "n_fold", "-", "1", ":", "\n", "                ", "end", "=", "self", ".", "n_users", "+", "self", ".", "n_items", "\n", "", "else", ":", "\n", "                ", "end", "=", "(", "i_fold", "+", "1", ")", "*", "fold_len", "\n", "\n", "", "A_fold_hat", ".", "append", "(", "self", ".", "_convert_sp_mat_to_sp_tensor", "(", "X", "[", "start", ":", "end", "]", ")", ")", "\n", "", "return", "A_fold_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.LightGCN._split_A_hat_node_dropout": [[271, 287], ["range", "LightGCN_tune.LightGCN._convert_sp_mat_to_sp_tensor", "X[].count_nonzero", "A_fold_hat.append", "LightGCN_tune.LightGCN._dropout_sparse"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._convert_sp_mat_to_sp_tensor", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._dropout_sparse"], ["", "def", "_split_A_hat_node_dropout", "(", "self", ",", "X", ")", ":", "\n", "        ", "A_fold_hat", "=", "[", "]", "\n", "\n", "fold_len", "=", "(", "self", ".", "n_users", "+", "self", ".", "n_items", ")", "//", "self", ".", "n_fold", "\n", "for", "i_fold", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "            ", "start", "=", "i_fold", "*", "fold_len", "\n", "if", "i_fold", "==", "self", ".", "n_fold", "-", "1", ":", "\n", "                ", "end", "=", "self", ".", "n_users", "+", "self", ".", "n_items", "\n", "", "else", ":", "\n", "                ", "end", "=", "(", "i_fold", "+", "1", ")", "*", "fold_len", "\n", "\n", "", "temp", "=", "self", ".", "_convert_sp_mat_to_sp_tensor", "(", "X", "[", "start", ":", "end", "]", ")", "\n", "n_nonzero_temp", "=", "X", "[", "start", ":", "end", "]", ".", "count_nonzero", "(", ")", "\n", "A_fold_hat", ".", "append", "(", "self", ".", "_dropout_sparse", "(", "temp", ",", "1", "-", "self", ".", "node_dropout", "[", "0", "]", ",", "n_nonzero_temp", ")", ")", "\n", "\n", "", "return", "A_fold_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.LightGCN._create_lightgcn_embed": [[288, 310], ["tensorflow.concat", "range", "tensorflow.stack", "tensorflow.reduce_mean", "tensorflow.split", "LightGCN_tune.LightGCN._split_A_hat_node_dropout", "LightGCN_tune.LightGCN._split_A_hat", "range", "tensorflow.concat", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._split_A_hat_node_dropout", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._split_A_hat"], ["", "def", "_create_lightgcn_embed", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "node_dropout_flag", ":", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat_node_dropout", "(", "self", ".", "norm_adj", ")", "\n", "", "else", ":", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "\n", "", "ego_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "all_embeddings", "=", "[", "ego_embeddings", "]", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "ego_embeddings", ")", ")", "\n", "\n", "", "side_embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "ego_embeddings", "=", "side_embeddings", "\n", "all_embeddings", "+=", "[", "ego_embeddings", "]", "\n", "", "all_embeddings", "=", "tf", ".", "stack", "(", "all_embeddings", ",", "1", ")", "\n", "all_embeddings", "=", "tf", ".", "reduce_mean", "(", "all_embeddings", ",", "axis", "=", "1", ",", "keepdims", "=", "False", ")", "\n", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.LightGCN._create_ngcf_embed": [[311, 350], ["tensorflow.concat", "range", "tensorflow.concat", "tensorflow.split", "LightGCN_tune.LightGCN._split_A_hat_node_dropout", "LightGCN_tune.LightGCN._split_A_hat", "range", "tensorflow.concat", "tensorflow.nn.leaky_relu", "tensorflow.multiply", "tensorflow.nn.leaky_relu", "tensorflow.nn.dropout", "tensorflow.nn.l2_normalize", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._split_A_hat_node_dropout", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._split_A_hat"], ["", "def", "_create_ngcf_embed", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "node_dropout_flag", ":", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat_node_dropout", "(", "self", ".", "norm_adj", ")", "\n", "", "else", ":", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "\n", "", "ego_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "all_embeddings", "=", "[", "ego_embeddings", "]", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "ego_embeddings", ")", ")", "\n", "\n", "", "side_embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "sum_embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "tf", ".", "matmul", "(", "side_embeddings", ",", "self", ".", "weights", "[", "'W_gc_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_gc_%d'", "%", "k", "]", ")", "\n", "\n", "\n", "\n", "# bi messages of neighbors.", "\n", "bi_embeddings", "=", "tf", ".", "multiply", "(", "ego_embeddings", ",", "side_embeddings", ")", "\n", "# transformed bi messages of neighbors.", "\n", "bi_embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "tf", ".", "matmul", "(", "bi_embeddings", ",", "self", ".", "weights", "[", "'W_bi_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_bi_%d'", "%", "k", "]", ")", "\n", "# non-linear activation.", "\n", "ego_embeddings", "=", "sum_embeddings", "+", "bi_embeddings", "\n", "\n", "# message dropout.", "\n", "ego_embeddings", "=", "tf", ".", "nn", ".", "dropout", "(", "ego_embeddings", ",", "1", "-", "self", ".", "mess_dropout", "[", "k", "]", ")", "\n", "\n", "# normalize the distribution of embeddings.", "\n", "norm_embeddings", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "ego_embeddings", ",", "axis", "=", "1", ")", "\n", "\n", "all_embeddings", "+=", "[", "norm_embeddings", "]", "\n", "\n", "", "all_embeddings", "=", "tf", ".", "concat", "(", "all_embeddings", ",", "1", ")", "\n", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.LightGCN._create_gcn_embed": [[352, 373], ["LightGCN_tune.LightGCN._split_A_hat", "tensorflow.concat", "range", "tensorflow.concat", "tensorflow.split", "range", "tensorflow.concat", "tensorflow.nn.leaky_relu", "tensorflow.nn.dropout", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._split_A_hat"], ["", "def", "_create_gcn_embed", "(", "self", ")", ":", "\n", "        ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "all_embeddings", "=", "[", "embeddings", "]", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "embeddings", ")", ")", "\n", "\n", "", "embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "tf", ".", "matmul", "(", "embeddings", ",", "self", ".", "weights", "[", "'W_gc_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_gc_%d'", "%", "k", "]", ")", "\n", "embeddings", "=", "tf", ".", "nn", ".", "dropout", "(", "embeddings", ",", "1", "-", "self", ".", "mess_dropout", "[", "k", "]", ")", "\n", "\n", "all_embeddings", "+=", "[", "embeddings", "]", "\n", "\n", "", "all_embeddings", "=", "tf", ".", "concat", "(", "all_embeddings", ",", "1", ")", "\n", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.LightGCN._create_gcmc_embed": [[374, 397], ["LightGCN_tune.LightGCN._split_A_hat", "tensorflow.concat", "range", "tensorflow.concat", "tensorflow.split", "range", "tensorflow.concat", "tensorflow.nn.leaky_relu", "tensorflow.nn.dropout", "temp_embed.append", "tensorflow.matmul", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._split_A_hat"], ["", "def", "_create_gcmc_embed", "(", "self", ")", ":", "\n", "        ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "\n", "embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "all_embeddings", "=", "[", "]", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "embeddings", ")", ")", "\n", "", "embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "# convolutional layer.", "\n", "embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "tf", ".", "matmul", "(", "embeddings", ",", "self", ".", "weights", "[", "'W_gc_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_gc_%d'", "%", "k", "]", ")", "\n", "# dense layer.", "\n", "mlp_embeddings", "=", "tf", ".", "matmul", "(", "embeddings", ",", "self", ".", "weights", "[", "'W_mlp_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_mlp_%d'", "%", "k", "]", "\n", "mlp_embeddings", "=", "tf", ".", "nn", ".", "dropout", "(", "mlp_embeddings", ",", "1", "-", "self", ".", "mess_dropout", "[", "k", "]", ")", "\n", "\n", "all_embeddings", "+=", "[", "mlp_embeddings", "]", "\n", "", "all_embeddings", "=", "tf", ".", "concat", "(", "all_embeddings", ",", "1", ")", "\n", "\n", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.LightGCN.create_bpr_loss": [[398, 414], ["tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.negative", "tensorflow.constant", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.l2_loss", "tensorflow.reduce_mean", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.log", "tensorflow.nn.sigmoid"], "methods", ["None"], ["", "def", "create_bpr_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", ")", "#users, pos_items, neg_items have the same shape", "\n", "neg_scores", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", ")", "\n", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "\n", "self", ".", "pos_i_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "neg_i_g_embeddings_pre", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "\n", "mf_loss", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "1e-9", "+", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", ")", ")", ")", "\n", "# mf_loss = tf.reduce_mean(tf.nn.softplus(-(pos_scores - neg_scores)))", "\n", "\n", "emb_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "\n", "reg_loss", "=", "tf", ".", "constant", "(", "0.0", ",", "tf", ".", "float32", ",", "[", "1", "]", ")", "\n", "\n", "return", "mf_loss", ",", "emb_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.LightGCN.create_bce_loss": [[415, 430], ["tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.l2_loss", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.negative", "tensorflow.negative", "tensorflow.log", "tensorflow.log"], "methods", ["None"], ["", "def", "create_bce_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", ")", "#users, pos_items, neg_items have the same shape", "\n", "neg_scores", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", ")", "\n", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "\n", "self", ".", "pos_i_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "neg_i_g_embeddings_pre", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "\n", "mf_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "pos_scores", "+", "1e-9", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "neg_scores", "+", "1e-9", ")", ")", ")", "\n", "\n", "emb_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "\n", "reg_loss", "=", "tf", ".", "constant", "(", "0.0", ",", "tf", ".", "float32", ",", "[", "1", "]", ")", "\n", "\n", "return", "mf_loss", ",", "emb_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.LightGCN.create_bce_loss_two_brach1": [[432, 462], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.squeeze", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid", "tensorflow.squeeze", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid"], "methods", ["None"], ["", "def", "create_bce_loss_two_brach1", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "#users, pos_items, neg_items have the same shape", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "# item score", "\n", "# pos_items_stop = tf.stop_gradient(pos_items)", "\n", "# neg_items_stop = tf.stop_gradient(neg_items)", "\n", "pos_items_stop", "=", "pos_items", "\n", "neg_items_stop", "=", "neg_items", "\n", "self", ".", "pos_item_scores", "=", "tf", ".", "matmul", "(", "pos_items_stop", ",", "self", ".", "w", ")", "\n", "self", ".", "neg_item_scores", "=", "tf", ".", "matmul", "(", "neg_items_stop", ",", "self", ".", "w", ")", "\n", "self", ".", "rubi_ratings1", "=", "(", "self", ".", "batch_ratings", "-", "self", ".", "rubi_c", ")", "*", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", ")", "\n", "self", ".", "direct_minus_ratings1", "=", "self", ".", "batch_ratings", "-", "self", ".", "rubi_c", "*", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", ")", "\n", "# first branch", "\n", "# fusion", "\n", "pos_scores", "=", "pos_scores", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", "\n", "neg_scores", "=", "neg_scores", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "neg_item_scores", ")", "\n", "self", ".", "mf_loss_ori", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", ")", "+", "1e-10", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "neg_scores", ")", "+", "1e-10", ")", ")", ")", "\n", "# second branch", "\n", "self", ".", "mf_loss_item", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", "+", "1e-10", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "neg_item_scores", ")", "+", "1e-10", ")", ")", ")", "\n", "# unify", "\n", "mf_loss", "=", "self", ".", "mf_loss_ori", "+", "self", ".", "alpha", "*", "self", ".", "mf_loss_item", "\n", "# regular", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "\n", "self", ".", "pos_i_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "neg_i_g_embeddings_pre", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "emb_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "\n", "reg_loss", "=", "tf", ".", "constant", "(", "0.0", ",", "tf", ".", "float32", ",", "[", "1", "]", ")", "\n", "\n", "return", "mf_loss", ",", "emb_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.LightGCN.create_bce_loss_two_brach2": [[463, 493], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.squeeze", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid", "tensorflow.squeeze", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid"], "methods", ["None"], ["", "def", "create_bce_loss_two_brach2", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "#users, pos_items, neg_items have the same shape", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "# item score", "\n", "# pos_items_stop = tf.stop_gradient(self.pos_i_g_embeddings_pre)", "\n", "# neg_items_stop = tf.stop_gradient(self.neg_i_g_embeddings_pre)", "\n", "pos_items_stop", "=", "self", ".", "pos_i_g_embeddings_pre", "\n", "neg_items_stop", "=", "self", ".", "neg_i_g_embeddings_pre", "\n", "self", ".", "pos_item_scores", "=", "tf", ".", "matmul", "(", "pos_items_stop", ",", "self", ".", "w", ")", "\n", "self", ".", "neg_item_scores", "=", "tf", ".", "matmul", "(", "neg_items_stop", ",", "self", ".", "w", ")", "\n", "self", ".", "rubi_ratings2", "=", "(", "self", ".", "batch_ratings", "-", "self", ".", "rubi_c", ")", "*", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", ")", "\n", "self", ".", "direct_minus_ratings2", "=", "self", ".", "batch_ratings", "-", "self", ".", "rubi_c", "*", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", ")", "\n", "# first branch", "\n", "# fusion", "\n", "pos_scores", "=", "pos_scores", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", "\n", "neg_scores", "=", "neg_scores", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "neg_item_scores", ")", "\n", "self", ".", "mf_loss_ori", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", ")", "+", "1e-10", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "neg_scores", ")", "+", "1e-10", ")", ")", ")", "\n", "# second branch", "\n", "self", ".", "mf_loss_item", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", "+", "1e-10", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "neg_item_scores", ")", "+", "1e-10", ")", ")", ")", "\n", "# unify", "\n", "mf_loss", "=", "self", ".", "mf_loss_ori", "+", "self", ".", "alpha", "*", "self", ".", "mf_loss_item", "\n", "# regular", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "\n", "self", ".", "pos_i_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "neg_i_g_embeddings_pre", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "emb_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "\n", "reg_loss", "=", "tf", ".", "constant", "(", "0.0", ",", "tf", ".", "float32", ",", "[", "1", "]", ")", "\n", "\n", "return", "mf_loss", ",", "emb_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.LightGCN.create_bce_loss_two_brach_both": [[495, 533], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.l2_loss", "tensorflow.transpose", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid", "tensorflow.transpose", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid"], "methods", ["None"], ["", "def", "create_bce_loss_two_brach_both", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "#users, pos_items, neg_items have the same shape", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "# item score", "\n", "# pos_items_stop = tf.stop_gradient(pos_items)", "\n", "# neg_items_stop = tf.stop_gradient(neg_items)", "\n", "pos_items_stop", "=", "pos_items", "\n", "neg_items_stop", "=", "neg_items", "\n", "users_stop", "=", "users", "\n", "self", ".", "pos_item_scores", "=", "tf", ".", "matmul", "(", "pos_items_stop", ",", "self", ".", "w", ")", "\n", "self", ".", "neg_item_scores", "=", "tf", ".", "matmul", "(", "neg_items_stop", ",", "self", ".", "w", ")", "\n", "self", ".", "user_scores", "=", "tf", ".", "matmul", "(", "users_stop", ",", "self", ".", "w_user", ")", "\n", "# self.rubi_ratings_both = (self.batch_ratings-self.rubi_c)*(tf.transpose(tf.nn.sigmoid(self.pos_item_scores))+tf.nn.sigmoid(self.user_scores))", "\n", "# self.direct_minus_ratings_both = self.batch_ratings-self.rubi_c*(tf.transpose(tf.nn.sigmoid(self.pos_item_scores))+tf.nn.sigmoid(self.user_scores))", "\n", "self", ".", "rubi_ratings_both", "=", "(", "self", ".", "batch_ratings", "-", "self", ".", "rubi_c", ")", "*", "tf", ".", "transpose", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", ")", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "user_scores", ")", "\n", "self", ".", "direct_minus_ratings_both", "=", "self", ".", "batch_ratings", "-", "self", ".", "rubi_c", "*", "tf", ".", "transpose", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", ")", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "user_scores", ")", "\n", "# first branch", "\n", "# fusion", "\n", "pos_scores", "=", "pos_scores", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "user_scores", ")", "\n", "neg_scores", "=", "neg_scores", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "neg_item_scores", ")", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "user_scores", ")", "\n", "# pos_scores = pos_scores*(tf.nn.sigmoid(self.pos_item_scores)+tf.nn.sigmoid(self.user_scores))", "\n", "# neg_scores = neg_scores*(tf.nn.sigmoid(self.pos_item_scores)+tf.nn.sigmoid(self.user_scores))", "\n", "self", ".", "mf_loss_ori", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", ")", "+", "1e-10", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "neg_scores", ")", "+", "1e-10", ")", ")", ")", "\n", "# second branch", "\n", "self", ".", "mf_loss_item", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", "+", "1e-10", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "neg_item_scores", ")", "+", "1e-10", ")", ")", ")", "\n", "# third branch", "\n", "self", ".", "mf_loss_user", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "user_scores", ")", "+", "1e-10", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "user_scores", ")", "+", "1e-10", ")", ")", ")", "\n", "# unify", "\n", "mf_loss", "=", "self", ".", "mf_loss_ori", "+", "self", ".", "alpha", "*", "self", ".", "mf_loss_item", "+", "self", ".", "beta", "*", "self", ".", "mf_loss_user", "\n", "# regular", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "\n", "self", ".", "pos_i_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "neg_i_g_embeddings_pre", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "emb_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "\n", "reg_loss", "=", "tf", ".", "constant", "(", "0.0", ",", "tf", ".", "float32", ",", "[", "1", "]", ")", "\n", "\n", "return", "mf_loss", ",", "emb_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.LightGCN._convert_sp_mat_to_sp_tensor": [[537, 541], ["X.tocoo().astype", "np.mat().transpose", "tensorflow.SparseTensor", "X.tocoo", "np.mat"], "methods", ["None"], ["", "def", "_convert_sp_mat_to_sp_tensor", "(", "self", ",", "X", ")", ":", "\n", "        ", "coo", "=", "X", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "np", ".", "mat", "(", "[", "coo", ".", "row", ",", "coo", ".", "col", "]", ")", ".", "transpose", "(", ")", "\n", "return", "tf", ".", "SparseTensor", "(", "indices", ",", "coo", ".", "data", ",", "coo", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.LightGCN._dropout_sparse": [[542, 553], ["tensorflow.random_uniform", "tensorflow.cast", "tensorflow.sparse_retain", "tensorflow.floor", "tensorflow.div"], "methods", ["None"], ["", "def", "_dropout_sparse", "(", "self", ",", "X", ",", "keep_prob", ",", "n_nonzero_elems", ")", ":", "\n", "        ", "\"\"\"\n        Dropout for sparse tensors.\n        \"\"\"", "\n", "noise_shape", "=", "[", "n_nonzero_elems", "]", "\n", "random_tensor", "=", "keep_prob", "\n", "random_tensor", "+=", "tf", ".", "random_uniform", "(", "noise_shape", ")", "\n", "dropout_mask", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "random_tensor", ")", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "pre_out", "=", "tf", ".", "sparse_retain", "(", "X", ",", "dropout_mask", ")", "\n", "\n", "return", "pre_out", "*", "tf", ".", "div", "(", "1.", ",", "keep_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.sample_thread.__init__": [[568, 570], ["threading.Thread.__init__"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "", "def", "run", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.sample_thread.run": [[570, 573], ["tensorflow.device", "data_generator.sample"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.Data.sample"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "cpus", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "data", "=", "data_generator", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.sample_thread_test.__init__": [[575, 577], ["threading.Thread.__init__"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "", "def", "run", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.sample_thread_test.run": [[577, 580], ["tensorflow.device", "data_generator.sample_test"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.Data.sample_test"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "cpus", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "data", "=", "data_generator", ".", "sample_test", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.train_thread.__init__": [[583, 588], ["threading.Thread.__init__"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "sess", ",", "sample", ",", "args", ")", ":", "\n", "        ", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "sess", "=", "sess", "\n", "self", ".", "sample", "=", "sample", "\n", "", "def", "run", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.train_thread.run": [[588, 615], ["len", "sess.run", "tensorflow.device", "sess.run", "eval", "eval", "eval", "eval"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "sess_list", "=", "[", "]", "\n", "if", "args", ".", "loss", "==", "'bpr'", ":", "\n", "            ", "sess_list", "=", "[", "self", ".", "model", ".", "opt", ",", "self", ".", "model", ".", "loss", ",", "self", ".", "model", ".", "mf_loss", ",", "self", ".", "model", ".", "emb_loss", ",", "self", ".", "model", ".", "reg_loss", "]", "\n", "", "elif", "args", ".", "loss", "==", "'bce'", ":", "\n", "            ", "sess_list", "=", "[", "self", ".", "model", ".", "opt_bce", ",", "self", ".", "model", ".", "loss_bce", ",", "self", ".", "model", ".", "mf_loss_bce", ",", "self", ".", "model", ".", "emb_loss_bce", ",", "self", ".", "model", ".", "reg_loss_bce", "]", "\n", "", "elif", "args", ".", "loss", "==", "'bce1'", ":", "\n", "            ", "sess_list", "=", "[", "self", ".", "model", ".", "opt_two_bce1", ",", "self", ".", "model", ".", "loss_two_bce1", ",", "self", ".", "model", ".", "mf_loss_two_bce1", ",", "self", ".", "model", ".", "emb_loss_two_bce1", ",", "self", ".", "model", ".", "reg_loss_two_bce1", "]", "\n", "", "elif", "args", ".", "loss", "==", "'bce2'", ":", "\n", "            ", "sess_list", "=", "[", "self", ".", "model", ".", "opt_two_bce2", ",", "self", ".", "model", ".", "loss_two_bce2", ",", "self", ".", "model", ".", "mf_loss_two_bce2", ",", "self", ".", "model", ".", "emb_loss_two_bce2", ",", "self", ".", "model", ".", "reg_loss_two_bce2", "]", "\n", "", "elif", "args", ".", "loss", "==", "'bceboth'", ":", "\n", "            ", "sess_list", "=", "[", "self", ".", "model", ".", "opt_two_bce_both", ",", "self", ".", "model", ".", "loss_two_bce_both", ",", "self", ".", "model", ".", "mf_loss_two_bce_both", ",", "self", ".", "model", ".", "emb_loss_two_bce_both", ",", "self", ".", "model", ".", "reg_loss_two_bce_both", "]", "\n", "", "if", "len", "(", "gpus", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "gpus", "[", "-", "1", "]", ")", ":", "\n", "                ", "users", ",", "pos_items", ",", "neg_items", "=", "self", ".", "sample", ".", "data", "\n", "self", ".", "data", "=", "sess", ".", "run", "(", "sess_list", ",", "\n", "feed_dict", "=", "{", "model", ".", "users", ":", "users", ",", "model", ".", "pos_items", ":", "pos_items", ",", "\n", "model", ".", "node_dropout", ":", "eval", "(", "args", ".", "node_dropout", ")", ",", "\n", "model", ".", "mess_dropout", ":", "eval", "(", "args", ".", "mess_dropout", ")", ",", "\n", "model", ".", "neg_items", ":", "neg_items", "}", ")", "\n", "", "", "else", ":", "\n", "            ", "users", ",", "pos_items", ",", "neg_items", "=", "self", ".", "sample", ".", "data", "\n", "self", ".", "data", "=", "sess", ".", "run", "(", "sess_list", ",", "\n", "feed_dict", "=", "{", "model", ".", "users", ":", "users", ",", "model", ".", "pos_items", ":", "pos_items", ",", "\n", "model", ".", "node_dropout", ":", "eval", "(", "args", ".", "node_dropout", ")", ",", "\n", "model", ".", "mess_dropout", ":", "eval", "(", "args", ".", "mess_dropout", ")", ",", "\n", "model", ".", "neg_items", ":", "neg_items", "}", ")", "\n", "", "", "", "class", "train_thread_test", "(", "threading", ".", "Thread", ")", ":", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.train_thread_test.__init__": [[616, 621], ["threading.Thread.__init__"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "sess", ",", "sample", ",", "args", ")", ":", "\n", "        ", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "sess", "=", "sess", "\n", "self", ".", "sample", "=", "sample", "\n", "", "def", "run", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.train_thread_test.run": [[621, 648], ["len", "sess.run", "tensorflow.device", "sess.run", "eval", "eval", "eval", "eval"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "sess_list", "=", "[", "]", "\n", "if", "args", ".", "loss", "==", "'bpr'", ":", "\n", "            ", "sess_list", "=", "[", "self", ".", "model", ".", "loss", ",", "self", ".", "model", ".", "mf_loss", ",", "self", ".", "model", ".", "emb_loss", "]", "\n", "", "elif", "args", ".", "loss", "==", "'bce'", ":", "\n", "            ", "sess_list", "=", "[", "self", ".", "model", ".", "loss_bce", ",", "self", ".", "model", ".", "mf_loss_bce", ",", "self", ".", "model", ".", "emb_loss_bce", "]", "\n", "", "elif", "args", ".", "loss", "==", "'bce1'", ":", "\n", "            ", "sess_list", "=", "[", "self", ".", "model", ".", "loss_two_bce1", ",", "self", ".", "model", ".", "mf_loss_two_bce1", ",", "self", ".", "model", ".", "emb_loss_two_bce1", "]", "\n", "", "elif", "args", ".", "loss", "==", "'bce2'", ":", "\n", "            ", "sess_list", "=", "[", "self", ".", "model", ".", "loss_two_bce2", ",", "self", ".", "model", ".", "mf_loss_two_bce2", ",", "self", ".", "model", ".", "emb_loss_two_bce2", "]", "\n", "", "elif", "args", ".", "loss", "==", "'bceboth'", ":", "\n", "            ", "sess_list", "=", "[", "self", ".", "model", ".", "loss_two_bce_both", ",", "self", ".", "model", ".", "mf_loss_two_bce_both", ",", "self", ".", "model", ".", "emb_loss_two_bce_both", "]", "\n", "", "if", "len", "(", "gpus", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "gpus", "[", "-", "1", "]", ")", ":", "\n", "                ", "users", ",", "pos_items", ",", "neg_items", "=", "self", ".", "sample", ".", "data", "\n", "self", ".", "data", "=", "sess", ".", "run", "(", "sess_list", ",", "\n", "feed_dict", "=", "{", "model", ".", "users", ":", "users", ",", "model", ".", "pos_items", ":", "pos_items", ",", "\n", "model", ".", "neg_items", ":", "neg_items", ",", "\n", "model", ".", "node_dropout", ":", "eval", "(", "args", ".", "node_dropout", ")", ",", "\n", "model", ".", "mess_dropout", ":", "eval", "(", "args", ".", "mess_dropout", ")", "}", ")", "\n", "", "", "else", ":", "\n", "            ", "users", ",", "pos_items", ",", "neg_items", "=", "self", ".", "sample", ".", "data", "\n", "self", ".", "data", "=", "sess", ".", "run", "(", "sess_list", ",", "\n", "feed_dict", "=", "{", "model", ".", "users", ":", "users", ",", "model", ".", "pos_items", ":", "pos_items", ",", "\n", "model", ".", "neg_items", ":", "neg_items", ",", "\n", "model", ".", "node_dropout", ":", "eval", "(", "args", ".", "node_dropout", ")", ",", "\n", "model", ".", "mess_dropout", ":", "eval", "(", "args", ".", "mess_dropout", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN_tune.load_pretrained_data": [[557, 565], ["np.load", "print"], "function", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.load"], ["", "", "def", "load_pretrained_data", "(", ")", ":", "\n", "    ", "pretrain_path", "=", "'%spretrain/%s/%s.npz'", "%", "(", "args", ".", "proj_path", ",", "args", ".", "dataset", ",", "'embedding'", ")", "\n", "try", ":", "\n", "        ", "pretrain_data", "=", "np", ".", "load", "(", "pretrain_path", ")", "\n", "print", "(", "'load the pretrained embeddings.'", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "pretrain_data", "=", "None", "\n", "", "return", "pretrain_data", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.LightGCN.__init__": [[33, 210], ["LightGCN.LightGCN.norm_adj.count_nonzero", "eval", "len", "eval", "LightGCN.LightGCN.create_model_str", "eval", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.summary.merge", "tensorflow.summary.merge", "tensorflow.summary.merge", "tensorflow.summary.merge", "LightGCN.LightGCN._init_weights", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.Variable", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.matmul", "tensorflow.matmul", "LightGCN.LightGCN.create_bpr_loss", "tensorflow.train.AdamOptimizer().minimize", "LightGCN.LightGCN.create_bce_loss", "tensorflow.train.AdamOptimizer().minimize", "LightGCN.LightGCN.create_bce_loss_two_brach1", "tensorflow.train.AdamOptimizer().minimize", "LightGCN.LightGCN.create_bce_loss_two_brach_both", "tensorflow.train.AdamOptimizer().minimize", "LightGCN.LightGCN.create_bce_loss_two_brach2", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.get_collection", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.get_collection", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.get_collection", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.get_collection", "LightGCN.LightGCN._create_lightgcn_embed", "tensorflow.zeros", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "LightGCN.LightGCN._create_ngcf_embed", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "LightGCN.LightGCN._create_gcn_embed", "LightGCN.LightGCN._create_gcmc_embed"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF.create_model_str", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._init_weights", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE.create_bpr_loss", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BIASMF.create_bce_loss", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.LightGCN.create_bce_loss_two_brach1", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BPRMF.create_bce_loss_two_brach_both", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.LightGCN.create_bce_loss_two_brach2", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.LightGCN._create_lightgcn_embed", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._create_ngcf_embed", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._create_gcn_embed", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._create_gcmc_embed"], ["    ", "def", "__init__", "(", "self", ",", "data_config", ",", "pretrain_data", ")", ":", "\n", "# argument settings", "\n", "        ", "self", ".", "model_type", "=", "'LightGCN'", "\n", "self", ".", "adj_type", "=", "args", ".", "adj_type", "\n", "self", ".", "alg_type", "=", "args", ".", "alg_type", "\n", "self", ".", "pretrain_data", "=", "pretrain_data", "\n", "self", ".", "n_users", "=", "data_config", "[", "'n_users'", "]", "\n", "self", ".", "n_items", "=", "data_config", "[", "'n_items'", "]", "\n", "self", ".", "n_fold", "=", "100", "\n", "self", ".", "norm_adj", "=", "data_config", "[", "'norm_adj'", "]", "\n", "self", ".", "n_nonzero_elems", "=", "self", ".", "norm_adj", ".", "count_nonzero", "(", ")", "\n", "self", ".", "lr", "=", "args", ".", "lr", "\n", "self", ".", "emb_dim", "=", "args", ".", "embed_size", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "self", ".", "weight_size", "=", "eval", "(", "args", ".", "layer_size", ")", "\n", "self", ".", "n_layers", "=", "len", "(", "self", ".", "weight_size", ")", "\n", "self", ".", "regs", "=", "eval", "(", "args", ".", "regs", ")", "\n", "self", ".", "decay", "=", "self", ".", "regs", "[", "0", "]", "\n", "self", ".", "log_dir", "=", "self", ".", "create_model_str", "(", ")", "\n", "self", ".", "verbose", "=", "args", ".", "verbose", "\n", "self", ".", "Ks", "=", "eval", "(", "args", ".", "Ks", ")", "\n", "\n", "\n", "'''\n        *********************************************************\n        Create Placeholder for Input Data & Dropout.\n        '''", "\n", "# placeholder definition", "\n", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "\n", "self", ".", "node_dropout_flag", "=", "args", ".", "node_dropout_flag", "\n", "self", ".", "node_dropout", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "mess_dropout", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "with", "tf", ".", "name_scope", "(", "'TRAIN_LOSS'", ")", ":", "\n", "            ", "self", ".", "train_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_loss'", ",", "self", ".", "train_loss", ")", "\n", "self", ".", "train_mf_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_mf_loss'", ",", "self", ".", "train_mf_loss", ")", "\n", "self", ".", "train_emb_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_emb_loss'", ",", "self", ".", "train_emb_loss", ")", "\n", "self", ".", "train_reg_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_reg_loss'", ",", "self", ".", "train_reg_loss", ")", "\n", "", "self", ".", "merged_train_loss", "=", "tf", ".", "summary", ".", "merge", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "SUMMARIES", ",", "'TRAIN_LOSS'", ")", ")", "\n", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'TRAIN_ACC'", ")", ":", "\n", "            ", "self", ".", "train_rec_first", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "#record for top(Ks[0])", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_rec_first'", ",", "self", ".", "train_rec_first", ")", "\n", "self", ".", "train_rec_last", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "#record for top(Ks[-1])", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_rec_last'", ",", "self", ".", "train_rec_last", ")", "\n", "self", ".", "train_ndcg_first", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_ndcg_first'", ",", "self", ".", "train_ndcg_first", ")", "\n", "self", ".", "train_ndcg_last", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_ndcg_last'", ",", "self", ".", "train_ndcg_last", ")", "\n", "", "self", ".", "merged_train_acc", "=", "tf", ".", "summary", ".", "merge", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "SUMMARIES", ",", "'TRAIN_ACC'", ")", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'TEST_LOSS'", ")", ":", "\n", "            ", "self", ".", "test_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_loss'", ",", "self", ".", "test_loss", ")", "\n", "self", ".", "test_mf_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_mf_loss'", ",", "self", ".", "test_mf_loss", ")", "\n", "self", ".", "test_emb_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_emb_loss'", ",", "self", ".", "test_emb_loss", ")", "\n", "self", ".", "test_reg_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_reg_loss'", ",", "self", ".", "test_reg_loss", ")", "\n", "", "self", ".", "merged_test_loss", "=", "tf", ".", "summary", ".", "merge", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "SUMMARIES", ",", "'TEST_LOSS'", ")", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'TEST_ACC'", ")", ":", "\n", "            ", "self", ".", "test_rec_first", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_rec_first'", ",", "self", ".", "test_rec_first", ")", "\n", "self", ".", "test_rec_last", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_rec_last'", ",", "self", ".", "test_rec_last", ")", "\n", "self", ".", "test_ndcg_first", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_ndcg_first'", ",", "self", ".", "test_ndcg_first", ")", "\n", "self", ".", "test_ndcg_last", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_ndcg_last'", ",", "self", ".", "test_ndcg_last", ")", "\n", "", "self", ".", "merged_test_acc", "=", "tf", ".", "summary", ".", "merge", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "SUMMARIES", ",", "'TEST_ACC'", ")", ")", "\n", "\"\"\"\n        *********************************************************\n        Create Model Parameters (i.e., Initialize Weights).\n        \"\"\"", "\n", "# initialization of model parameters", "\n", "self", ".", "weights", "=", "self", ".", "_init_weights", "(", ")", "\n", "\n", "\"\"\"\n        *********************************************************\n        Compute Graph-based Representations of all users & items via Message-Passing Mechanism of Graph Neural Networks.\n        Different Convolutional Layers:\n            1. ngcf: defined in 'Neural Graph Collaborative Filtering', SIGIR2019;\n            2. gcn:  defined in 'Semi-Supervised Classification with Graph Convolutional Networks', ICLR2018;\n            3. gcmc: defined in 'Graph Convolutional Matrix Completion', KDD2018;\n        \"\"\"", "\n", "if", "self", ".", "alg_type", "in", "[", "'lightgcn'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_lightgcn_embed", "(", ")", "\n", "\n", "", "elif", "self", ".", "alg_type", "in", "[", "'ngcf'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_ngcf_embed", "(", ")", "\n", "\n", "", "elif", "self", ".", "alg_type", "in", "[", "'gcn'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_gcn_embed", "(", ")", "\n", "\n", "", "elif", "self", ".", "alg_type", "in", "[", "'gcmc'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_gcmc_embed", "(", ")", "\n", "\n", "", "\"\"\"\n        *********************************************************\n        Establish the final representations for user-item pairs in batch.\n        \"\"\"", "\n", "self", ".", "u_g_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ua_embeddings", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_g_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ia_embeddings", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_g_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ia_embeddings", ",", "self", ".", "neg_items", ")", "\n", "self", ".", "u_g_embeddings_pre", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_g_embeddings_pre", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_g_embeddings_pre", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "neg_items", ")", "\n", "\n", "\"\"\"\n        *********************************************************\n        Establish 2 brach.\n        \"\"\"", "\n", "self", ".", "alpha", "=", "args", ".", "alpha", "\n", "self", ".", "beta", "=", "args", ".", "beta", "\n", "self", ".", "rubi_c", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "1", "]", ")", ",", "name", "=", "'rubi_c'", ")", "\n", "self", ".", "sigmoid_yu", "=", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "w_user", ")", ")", ")", "\n", "self", ".", "sigmoid_yi", "=", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "w", ")", ")", ")", "\n", "\"\"\"\n        *********************************************************\n        Inference for the testing phase.\n        \"\"\"", "\n", "self", ".", "constant_e", "=", "self", ".", "weights", "[", "'constant_embedding'", "]", "\n", "self", ".", "batch_ratings", "=", "tf", ".", "matmul", "(", "self", ".", "u_g_embeddings", ",", "self", ".", "pos_i_g_embeddings", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "self", ".", "batch_ratings_constant", "=", "tf", ".", "matmul", "(", "self", ".", "constant_e", ",", "self", ".", "pos_i_g_embeddings", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "self", ".", "batch_ratings_causal_c", "=", "self", ".", "batch_ratings", "-", "self", ".", "batch_ratings_constant", "\n", "\"\"\"\n        *********************************************************\n        Generate Predictions & Optimize via BPR loss.\n        \"\"\"", "\n", "self", ".", "mf_loss", ",", "self", ".", "emb_loss", ",", "self", ".", "reg_loss", "=", "self", ".", "create_bpr_loss", "(", "self", ".", "u_g_embeddings", ",", "\n", "self", ".", "pos_i_g_embeddings", ",", "\n", "self", ".", "neg_i_g_embeddings", ")", "\n", "self", ".", "loss", "=", "self", ".", "mf_loss", "+", "self", ".", "emb_loss", "\n", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n", "\n", "\n", "self", ".", "mf_loss_bce", ",", "self", ".", "emb_loss_bce", ",", "self", ".", "reg_loss_bce", "=", "self", ".", "create_bce_loss", "(", "self", ".", "u_g_embeddings", ",", "\n", "self", ".", "pos_i_g_embeddings", ",", "\n", "self", ".", "neg_i_g_embeddings", ")", "\n", "self", ".", "loss_bce", "=", "self", ".", "mf_loss_bce", "+", "self", ".", "emb_loss_bce", "\n", "self", ".", "opt_bce", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss_bce", ")", "\n", "\n", "\n", "\n", "self", ".", "mf_loss_two_bce1", ",", "self", ".", "emb_loss_two_bce1", ",", "self", ".", "reg_loss_two_bce1", "=", "self", ".", "create_bce_loss_two_brach1", "(", "self", ".", "u_g_embeddings", ",", "\n", "self", ".", "pos_i_g_embeddings", ",", "\n", "self", ".", "neg_i_g_embeddings", ")", "\n", "self", ".", "loss_two_bce1", "=", "self", ".", "mf_loss_two_bce1", "+", "self", ".", "emb_loss_two_bce1", "\n", "self", ".", "opt_two_bce1", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss_two_bce1", ")", "\n", "\n", "\n", "self", ".", "mf_loss_two_bce_both", ",", "self", ".", "emb_loss_two_bce_both", ",", "self", ".", "reg_loss_two_bce_both", "=", "self", ".", "create_bce_loss_two_brach_both", "(", "self", ".", "u_g_embeddings", ",", "\n", "self", ".", "pos_i_g_embeddings", ",", "\n", "self", ".", "neg_i_g_embeddings", ")", "\n", "self", ".", "loss_two_bce_both", "=", "self", ".", "mf_loss_two_bce_both", "+", "self", ".", "emb_loss_two_bce_both", "\n", "self", ".", "opt_two_bce_both", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss_two_bce_both", ")", "\n", "\n", "\n", "\n", "self", ".", "mf_loss_two_bce2", ",", "self", ".", "emb_loss_two_bce2", ",", "self", ".", "reg_loss_two_bce2", "=", "self", ".", "create_bce_loss_two_brach2", "(", "self", ".", "u_g_embeddings", ",", "\n", "self", ".", "pos_i_g_embeddings", ",", "\n", "self", ".", "neg_i_g_embeddings", ")", "\n", "self", ".", "loss_two_bce2", "=", "self", ".", "mf_loss_two_bce2", "+", "self", ".", "emb_loss_two_bce2", "\n", "self", ".", "opt_two_bce2", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss_two_bce2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.LightGCN.create_model_str": [[212, 216], ["str", "str", "str", "str"], "methods", ["None"], ["", "def", "create_model_str", "(", "self", ")", ":", "\n", "        ", "log_dir", "=", "'/'", "+", "self", ".", "alg_type", "+", "'/layers_'", "+", "str", "(", "self", ".", "n_layers", ")", "+", "'/dim_'", "+", "str", "(", "self", ".", "emb_dim", ")", "\n", "log_dir", "+=", "'/'", "+", "args", ".", "dataset", "+", "'/lr_'", "+", "str", "(", "self", ".", "lr", ")", "+", "'/reg_'", "+", "str", "(", "self", ".", "decay", ")", "\n", "return", "log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.LightGCN.update_c": [[554, 556], ["sess.run", "tensorflow.assign", "tensorflow.ones"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run"], ["", "def", "update_c", "(", "self", ",", "sess", ",", "c", ")", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "assign", "(", "self", ".", "rubi_c", ",", "c", "*", "tf", ".", "ones", "(", "[", "1", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.LightGCN._init_weights": [[220, 257], ["dict", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "range", "tensorflow.ones", "tensorflow.Variable", "tensorflow.Variable", "print", "tensorflow.Variable", "tensorflow.Variable", "print", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer."], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "all_weights", "=", "dict", "(", ")", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "all_weights", "[", "\"constant_embedding\"", "]", "=", "tf", ".", "Variable", "(", "tf", ".", "ones", "(", "[", "1", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'constant_embedding'", ")", "\n", "if", "self", ".", "pretrain_data", "is", "None", ":", "\n", "            ", "all_weights", "[", "'user_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'user_embedding'", ")", "\n", "all_weights", "[", "'item_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'item_embedding'", ")", "\n", "print", "(", "'using xavier initialization'", ")", "\n", "", "else", ":", "\n", "            ", "all_weights", "[", "'user_embedding'", "]", "=", "tf", ".", "Variable", "(", "initial_value", "=", "self", ".", "pretrain_data", "[", "'user_embed'", "]", ",", "trainable", "=", "True", ",", "\n", "name", "=", "'user_embedding'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "all_weights", "[", "'item_embedding'", "]", "=", "tf", ".", "Variable", "(", "initial_value", "=", "self", ".", "pretrain_data", "[", "'item_embed'", "]", ",", "trainable", "=", "True", ",", "\n", "name", "=", "'item_embedding'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "print", "(", "'using pretrained initialization'", ")", "\n", "\n", "", "self", ".", "w", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "emb_dim", ",", "1", "]", ")", ",", "name", "=", "'item_branch'", ")", "\n", "self", ".", "w_user", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "emb_dim", ",", "1", "]", ")", ",", "name", "=", "'user_branch'", ")", "\n", "\n", "self", ".", "weight_size_list", "=", "[", "self", ".", "emb_dim", "]", "+", "self", ".", "weight_size", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "all_weights", "[", "'W_gc_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "weight_size_list", "[", "k", "]", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'W_gc_%d'", "%", "k", ")", "\n", "all_weights", "[", "'b_gc_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'b_gc_%d'", "%", "k", ")", "\n", "\n", "all_weights", "[", "'W_bi_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "weight_size_list", "[", "k", "]", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'W_bi_%d'", "%", "k", ")", "\n", "all_weights", "[", "'b_bi_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'b_bi_%d'", "%", "k", ")", "\n", "\n", "all_weights", "[", "'W_mlp_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "weight_size_list", "[", "k", "]", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'W_mlp_%d'", "%", "k", ")", "\n", "all_weights", "[", "'b_mlp_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'b_mlp_%d'", "%", "k", ")", "\n", "\n", "", "return", "all_weights", "\n", "", "def", "_split_A_hat", "(", "self", ",", "X", ")", ":", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.LightGCN._split_A_hat": [[257, 270], ["range", "A_fold_hat.append", "LightGCN.LightGCN._convert_sp_mat_to_sp_tensor"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._convert_sp_mat_to_sp_tensor"], ["", "def", "_split_A_hat", "(", "self", ",", "X", ")", ":", "\n", "        ", "A_fold_hat", "=", "[", "]", "\n", "\n", "fold_len", "=", "(", "self", ".", "n_users", "+", "self", ".", "n_items", ")", "//", "self", ".", "n_fold", "\n", "for", "i_fold", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "            ", "start", "=", "i_fold", "*", "fold_len", "\n", "if", "i_fold", "==", "self", ".", "n_fold", "-", "1", ":", "\n", "                ", "end", "=", "self", ".", "n_users", "+", "self", ".", "n_items", "\n", "", "else", ":", "\n", "                ", "end", "=", "(", "i_fold", "+", "1", ")", "*", "fold_len", "\n", "\n", "", "A_fold_hat", ".", "append", "(", "self", ".", "_convert_sp_mat_to_sp_tensor", "(", "X", "[", "start", ":", "end", "]", ")", ")", "\n", "", "return", "A_fold_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.LightGCN._split_A_hat_node_dropout": [[271, 287], ["range", "LightGCN.LightGCN._convert_sp_mat_to_sp_tensor", "X[].count_nonzero", "A_fold_hat.append", "LightGCN.LightGCN._dropout_sparse"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._convert_sp_mat_to_sp_tensor", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._dropout_sparse"], ["", "def", "_split_A_hat_node_dropout", "(", "self", ",", "X", ")", ":", "\n", "        ", "A_fold_hat", "=", "[", "]", "\n", "\n", "fold_len", "=", "(", "self", ".", "n_users", "+", "self", ".", "n_items", ")", "//", "self", ".", "n_fold", "\n", "for", "i_fold", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "            ", "start", "=", "i_fold", "*", "fold_len", "\n", "if", "i_fold", "==", "self", ".", "n_fold", "-", "1", ":", "\n", "                ", "end", "=", "self", ".", "n_users", "+", "self", ".", "n_items", "\n", "", "else", ":", "\n", "                ", "end", "=", "(", "i_fold", "+", "1", ")", "*", "fold_len", "\n", "\n", "", "temp", "=", "self", ".", "_convert_sp_mat_to_sp_tensor", "(", "X", "[", "start", ":", "end", "]", ")", "\n", "n_nonzero_temp", "=", "X", "[", "start", ":", "end", "]", ".", "count_nonzero", "(", ")", "\n", "A_fold_hat", ".", "append", "(", "self", ".", "_dropout_sparse", "(", "temp", ",", "1", "-", "self", ".", "node_dropout", "[", "0", "]", ",", "n_nonzero_temp", ")", ")", "\n", "\n", "", "return", "A_fold_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.LightGCN._create_lightgcn_embed": [[288, 310], ["tensorflow.concat", "range", "tensorflow.stack", "tensorflow.reduce_mean", "tensorflow.split", "LightGCN.LightGCN._split_A_hat_node_dropout", "LightGCN.LightGCN._split_A_hat", "range", "tensorflow.concat", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._split_A_hat_node_dropout", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._split_A_hat"], ["", "def", "_create_lightgcn_embed", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "node_dropout_flag", ":", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat_node_dropout", "(", "self", ".", "norm_adj", ")", "\n", "", "else", ":", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "\n", "", "ego_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "all_embeddings", "=", "[", "ego_embeddings", "]", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "ego_embeddings", ")", ")", "\n", "\n", "", "side_embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "ego_embeddings", "=", "side_embeddings", "\n", "all_embeddings", "+=", "[", "ego_embeddings", "]", "\n", "", "all_embeddings", "=", "tf", ".", "stack", "(", "all_embeddings", ",", "1", ")", "\n", "all_embeddings", "=", "tf", ".", "reduce_mean", "(", "all_embeddings", ",", "axis", "=", "1", ",", "keepdims", "=", "False", ")", "\n", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.LightGCN._create_ngcf_embed": [[311, 350], ["tensorflow.concat", "range", "tensorflow.concat", "tensorflow.split", "LightGCN.LightGCN._split_A_hat_node_dropout", "LightGCN.LightGCN._split_A_hat", "range", "tensorflow.concat", "tensorflow.nn.leaky_relu", "tensorflow.multiply", "tensorflow.nn.leaky_relu", "tensorflow.nn.dropout", "tensorflow.nn.l2_normalize", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._split_A_hat_node_dropout", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._split_A_hat"], ["", "def", "_create_ngcf_embed", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "node_dropout_flag", ":", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat_node_dropout", "(", "self", ".", "norm_adj", ")", "\n", "", "else", ":", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "\n", "", "ego_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "all_embeddings", "=", "[", "ego_embeddings", "]", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "ego_embeddings", ")", ")", "\n", "\n", "", "side_embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "sum_embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "tf", ".", "matmul", "(", "side_embeddings", ",", "self", ".", "weights", "[", "'W_gc_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_gc_%d'", "%", "k", "]", ")", "\n", "\n", "\n", "\n", "# bi messages of neighbors.", "\n", "bi_embeddings", "=", "tf", ".", "multiply", "(", "ego_embeddings", ",", "side_embeddings", ")", "\n", "# transformed bi messages of neighbors.", "\n", "bi_embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "tf", ".", "matmul", "(", "bi_embeddings", ",", "self", ".", "weights", "[", "'W_bi_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_bi_%d'", "%", "k", "]", ")", "\n", "# non-linear activation.", "\n", "ego_embeddings", "=", "sum_embeddings", "+", "bi_embeddings", "\n", "\n", "# message dropout.", "\n", "ego_embeddings", "=", "tf", ".", "nn", ".", "dropout", "(", "ego_embeddings", ",", "1", "-", "self", ".", "mess_dropout", "[", "k", "]", ")", "\n", "\n", "# normalize the distribution of embeddings.", "\n", "norm_embeddings", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "ego_embeddings", ",", "axis", "=", "1", ")", "\n", "\n", "all_embeddings", "+=", "[", "norm_embeddings", "]", "\n", "\n", "", "all_embeddings", "=", "tf", ".", "concat", "(", "all_embeddings", ",", "1", ")", "\n", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.LightGCN._create_gcn_embed": [[352, 373], ["LightGCN.LightGCN._split_A_hat", "tensorflow.concat", "range", "tensorflow.concat", "tensorflow.split", "range", "tensorflow.concat", "tensorflow.nn.leaky_relu", "tensorflow.nn.dropout", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._split_A_hat"], ["", "def", "_create_gcn_embed", "(", "self", ")", ":", "\n", "        ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "all_embeddings", "=", "[", "embeddings", "]", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "embeddings", ")", ")", "\n", "\n", "", "embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "tf", ".", "matmul", "(", "embeddings", ",", "self", ".", "weights", "[", "'W_gc_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_gc_%d'", "%", "k", "]", ")", "\n", "embeddings", "=", "tf", ".", "nn", ".", "dropout", "(", "embeddings", ",", "1", "-", "self", ".", "mess_dropout", "[", "k", "]", ")", "\n", "\n", "all_embeddings", "+=", "[", "embeddings", "]", "\n", "\n", "", "all_embeddings", "=", "tf", ".", "concat", "(", "all_embeddings", ",", "1", ")", "\n", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.LightGCN._create_gcmc_embed": [[374, 397], ["LightGCN.LightGCN._split_A_hat", "tensorflow.concat", "range", "tensorflow.concat", "tensorflow.split", "range", "tensorflow.concat", "tensorflow.nn.leaky_relu", "tensorflow.nn.dropout", "temp_embed.append", "tensorflow.matmul", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._split_A_hat"], ["", "def", "_create_gcmc_embed", "(", "self", ")", ":", "\n", "        ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "\n", "embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "all_embeddings", "=", "[", "]", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "embeddings", ")", ")", "\n", "", "embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "# convolutional layer.", "\n", "embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "tf", ".", "matmul", "(", "embeddings", ",", "self", ".", "weights", "[", "'W_gc_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_gc_%d'", "%", "k", "]", ")", "\n", "# dense layer.", "\n", "mlp_embeddings", "=", "tf", ".", "matmul", "(", "embeddings", ",", "self", ".", "weights", "[", "'W_mlp_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_mlp_%d'", "%", "k", "]", "\n", "mlp_embeddings", "=", "tf", ".", "nn", ".", "dropout", "(", "mlp_embeddings", ",", "1", "-", "self", ".", "mess_dropout", "[", "k", "]", ")", "\n", "\n", "all_embeddings", "+=", "[", "mlp_embeddings", "]", "\n", "", "all_embeddings", "=", "tf", ".", "concat", "(", "all_embeddings", ",", "1", ")", "\n", "\n", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.LightGCN.create_bpr_loss": [[398, 414], ["tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.negative", "tensorflow.constant", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.l2_loss", "tensorflow.reduce_mean", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.log", "tensorflow.nn.sigmoid"], "methods", ["None"], ["", "def", "create_bpr_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", ")", "#users, pos_items, neg_items have the same shape", "\n", "neg_scores", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", ")", "\n", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "\n", "self", ".", "pos_i_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "neg_i_g_embeddings_pre", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "\n", "mf_loss", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "1e-9", "+", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", ")", ")", ")", "\n", "# mf_loss = tf.reduce_mean(tf.nn.softplus(-(pos_scores - neg_scores)))", "\n", "\n", "emb_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "\n", "reg_loss", "=", "tf", ".", "constant", "(", "0.0", ",", "tf", ".", "float32", ",", "[", "1", "]", ")", "\n", "\n", "return", "mf_loss", ",", "emb_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.LightGCN.create_bce_loss": [[415, 430], ["tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.l2_loss", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.negative", "tensorflow.negative", "tensorflow.log", "tensorflow.log"], "methods", ["None"], ["", "def", "create_bce_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", ")", "#users, pos_items, neg_items have the same shape", "\n", "neg_scores", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", ")", "\n", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "\n", "self", ".", "pos_i_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "neg_i_g_embeddings_pre", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "\n", "mf_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "pos_scores", "+", "1e-9", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "neg_scores", "+", "1e-9", ")", ")", ")", "\n", "\n", "emb_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "\n", "reg_loss", "=", "tf", ".", "constant", "(", "0.0", ",", "tf", ".", "float32", ",", "[", "1", "]", ")", "\n", "\n", "return", "mf_loss", ",", "emb_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.LightGCN.create_bce_loss_two_brach1": [[432, 462], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.squeeze", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid", "tensorflow.squeeze", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid"], "methods", ["None"], ["", "def", "create_bce_loss_two_brach1", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "#users, pos_items, neg_items have the same shape", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "# item score", "\n", "# pos_items_stop = tf.stop_gradient(pos_items)", "\n", "# neg_items_stop = tf.stop_gradient(neg_items)", "\n", "pos_items_stop", "=", "pos_items", "\n", "neg_items_stop", "=", "neg_items", "\n", "self", ".", "pos_item_scores", "=", "tf", ".", "matmul", "(", "pos_items_stop", ",", "self", ".", "w", ")", "\n", "self", ".", "neg_item_scores", "=", "tf", ".", "matmul", "(", "neg_items_stop", ",", "self", ".", "w", ")", "\n", "self", ".", "rubi_ratings1", "=", "(", "self", ".", "batch_ratings", "-", "self", ".", "rubi_c", ")", "*", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", ")", "\n", "self", ".", "direct_minus_ratings1", "=", "self", ".", "batch_ratings", "-", "self", ".", "rubi_c", "*", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", ")", "\n", "# first branch", "\n", "# fusion", "\n", "pos_scores", "=", "pos_scores", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", "\n", "neg_scores", "=", "neg_scores", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "neg_item_scores", ")", "\n", "self", ".", "mf_loss_ori", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", ")", "+", "1e-10", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "neg_scores", ")", "+", "1e-10", ")", ")", ")", "\n", "# second branch", "\n", "self", ".", "mf_loss_item", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", "+", "1e-10", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "neg_item_scores", ")", "+", "1e-10", ")", ")", ")", "\n", "# unify", "\n", "mf_loss", "=", "self", ".", "mf_loss_ori", "+", "self", ".", "alpha", "*", "self", ".", "mf_loss_item", "\n", "# regular", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "\n", "self", ".", "pos_i_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "neg_i_g_embeddings_pre", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "emb_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "\n", "reg_loss", "=", "tf", ".", "constant", "(", "0.0", ",", "tf", ".", "float32", ",", "[", "1", "]", ")", "\n", "\n", "return", "mf_loss", ",", "emb_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.LightGCN.create_bce_loss_two_brach2": [[463, 493], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.squeeze", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid", "tensorflow.squeeze", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid"], "methods", ["None"], ["", "def", "create_bce_loss_two_brach2", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "#users, pos_items, neg_items have the same shape", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "# item score", "\n", "# pos_items_stop = tf.stop_gradient(self.pos_i_g_embeddings_pre)", "\n", "# neg_items_stop = tf.stop_gradient(self.neg_i_g_embeddings_pre)", "\n", "pos_items_stop", "=", "self", ".", "pos_i_g_embeddings_pre", "\n", "neg_items_stop", "=", "self", ".", "neg_i_g_embeddings_pre", "\n", "self", ".", "pos_item_scores", "=", "tf", ".", "matmul", "(", "pos_items_stop", ",", "self", ".", "w", ")", "\n", "self", ".", "neg_item_scores", "=", "tf", ".", "matmul", "(", "neg_items_stop", ",", "self", ".", "w", ")", "\n", "self", ".", "rubi_ratings2", "=", "(", "self", ".", "batch_ratings", "-", "self", ".", "rubi_c", ")", "*", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", ")", "\n", "self", ".", "direct_minus_ratings2", "=", "self", ".", "batch_ratings", "-", "self", ".", "rubi_c", "*", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", ")", "\n", "# first branch", "\n", "# fusion", "\n", "pos_scores", "=", "pos_scores", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", "\n", "neg_scores", "=", "neg_scores", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "neg_item_scores", ")", "\n", "self", ".", "mf_loss_ori", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", ")", "+", "1e-10", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "neg_scores", ")", "+", "1e-10", ")", ")", ")", "\n", "# second branch", "\n", "self", ".", "mf_loss_item", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", "+", "1e-10", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "neg_item_scores", ")", "+", "1e-10", ")", ")", ")", "\n", "# unify", "\n", "mf_loss", "=", "self", ".", "mf_loss_ori", "+", "self", ".", "alpha", "*", "self", ".", "mf_loss_item", "\n", "# regular", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "\n", "self", ".", "pos_i_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "neg_i_g_embeddings_pre", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "emb_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "\n", "reg_loss", "=", "tf", ".", "constant", "(", "0.0", ",", "tf", ".", "float32", ",", "[", "1", "]", ")", "\n", "\n", "return", "mf_loss", ",", "emb_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.LightGCN.create_bce_loss_two_brach_both": [[495, 533], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.l2_loss", "tensorflow.transpose", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid", "tensorflow.transpose", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid"], "methods", ["None"], ["", "def", "create_bce_loss_two_brach_both", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "#users, pos_items, neg_items have the same shape", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "# item score", "\n", "# pos_items_stop = tf.stop_gradient(pos_items)", "\n", "# neg_items_stop = tf.stop_gradient(neg_items)", "\n", "pos_items_stop", "=", "pos_items", "\n", "neg_items_stop", "=", "neg_items", "\n", "users_stop", "=", "users", "\n", "self", ".", "pos_item_scores", "=", "tf", ".", "matmul", "(", "pos_items_stop", ",", "self", ".", "w", ")", "\n", "self", ".", "neg_item_scores", "=", "tf", ".", "matmul", "(", "neg_items_stop", ",", "self", ".", "w", ")", "\n", "self", ".", "user_scores", "=", "tf", ".", "matmul", "(", "users_stop", ",", "self", ".", "w_user", ")", "\n", "# self.rubi_ratings_both = (self.batch_ratings-self.rubi_c)*(tf.transpose(tf.nn.sigmoid(self.pos_item_scores))+tf.nn.sigmoid(self.user_scores))", "\n", "# self.direct_minus_ratings_both = self.batch_ratings-self.rubi_c*(tf.transpose(tf.nn.sigmoid(self.pos_item_scores))+tf.nn.sigmoid(self.user_scores))", "\n", "self", ".", "rubi_ratings_both", "=", "(", "self", ".", "batch_ratings", "-", "self", ".", "rubi_c", ")", "*", "tf", ".", "transpose", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", ")", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "user_scores", ")", "\n", "self", ".", "direct_minus_ratings_both", "=", "self", ".", "batch_ratings", "-", "self", ".", "rubi_c", "*", "tf", ".", "transpose", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", ")", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "user_scores", ")", "\n", "# first branch", "\n", "# fusion", "\n", "pos_scores", "=", "pos_scores", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "user_scores", ")", "\n", "neg_scores", "=", "neg_scores", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "neg_item_scores", ")", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "user_scores", ")", "\n", "# pos_scores = pos_scores*(tf.nn.sigmoid(self.pos_item_scores)+tf.nn.sigmoid(self.user_scores))", "\n", "# neg_scores = neg_scores*(tf.nn.sigmoid(self.pos_item_scores)+tf.nn.sigmoid(self.user_scores))", "\n", "self", ".", "mf_loss_ori", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", ")", "+", "1e-10", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "neg_scores", ")", "+", "1e-10", ")", ")", ")", "\n", "# second branch", "\n", "self", ".", "mf_loss_item", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", "+", "1e-10", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "neg_item_scores", ")", "+", "1e-10", ")", ")", ")", "\n", "# third branch", "\n", "self", ".", "mf_loss_user", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "user_scores", ")", "+", "1e-10", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "user_scores", ")", "+", "1e-10", ")", ")", ")", "\n", "# unify", "\n", "mf_loss", "=", "self", ".", "mf_loss_ori", "+", "self", ".", "alpha", "*", "self", ".", "mf_loss_item", "+", "self", ".", "beta", "*", "self", ".", "mf_loss_user", "\n", "# regular", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "\n", "self", ".", "pos_i_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "neg_i_g_embeddings_pre", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "emb_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "\n", "reg_loss", "=", "tf", ".", "constant", "(", "0.0", ",", "tf", ".", "float32", ",", "[", "1", "]", ")", "\n", "\n", "return", "mf_loss", ",", "emb_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.LightGCN._convert_sp_mat_to_sp_tensor": [[537, 541], ["X.tocoo().astype", "np.mat().transpose", "tensorflow.SparseTensor", "X.tocoo", "np.mat"], "methods", ["None"], ["", "def", "_convert_sp_mat_to_sp_tensor", "(", "self", ",", "X", ")", ":", "\n", "        ", "coo", "=", "X", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "np", ".", "mat", "(", "[", "coo", ".", "row", ",", "coo", ".", "col", "]", ")", ".", "transpose", "(", ")", "\n", "return", "tf", ".", "SparseTensor", "(", "indices", ",", "coo", ".", "data", ",", "coo", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.LightGCN._dropout_sparse": [[542, 553], ["tensorflow.random_uniform", "tensorflow.cast", "tensorflow.sparse_retain", "tensorflow.floor", "tensorflow.div"], "methods", ["None"], ["", "def", "_dropout_sparse", "(", "self", ",", "X", ",", "keep_prob", ",", "n_nonzero_elems", ")", ":", "\n", "        ", "\"\"\"\n        Dropout for sparse tensors.\n        \"\"\"", "\n", "noise_shape", "=", "[", "n_nonzero_elems", "]", "\n", "random_tensor", "=", "keep_prob", "\n", "random_tensor", "+=", "tf", ".", "random_uniform", "(", "noise_shape", ")", "\n", "dropout_mask", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "random_tensor", ")", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "pre_out", "=", "tf", ".", "sparse_retain", "(", "X", ",", "dropout_mask", ")", "\n", "\n", "return", "pre_out", "*", "tf", ".", "div", "(", "1.", ",", "keep_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.sample_thread.__init__": [[568, 570], ["threading.Thread.__init__"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "", "def", "run", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.sample_thread.run": [[570, 573], ["tensorflow.device", "data_generator.sample"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.Data.sample"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "cpus", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "data", "=", "data_generator", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.sample_thread_test.__init__": [[575, 577], ["threading.Thread.__init__"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "", "def", "run", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.sample_thread_test.run": [[577, 580], ["tensorflow.device", "data_generator.sample_test"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.Data.sample_test"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "cpus", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "data", "=", "data_generator", ".", "sample_test", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread.__init__": [[583, 588], ["threading.Thread.__init__"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "sess", ",", "sample", ",", "args", ")", ":", "\n", "        ", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "sess", "=", "sess", "\n", "self", ".", "sample", "=", "sample", "\n", "", "def", "run", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread.run": [[588, 615], ["len", "sess.run", "tensorflow.device", "sess.run", "eval", "eval", "eval", "eval"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "sess_list", "=", "[", "]", "\n", "if", "args", ".", "loss", "==", "'bpr'", ":", "\n", "            ", "sess_list", "=", "[", "self", ".", "model", ".", "opt", ",", "self", ".", "model", ".", "loss", ",", "self", ".", "model", ".", "mf_loss", ",", "self", ".", "model", ".", "emb_loss", ",", "self", ".", "model", ".", "reg_loss", "]", "\n", "", "elif", "args", ".", "loss", "==", "'bce'", ":", "\n", "            ", "sess_list", "=", "[", "self", ".", "model", ".", "opt_bce", ",", "self", ".", "model", ".", "loss_bce", ",", "self", ".", "model", ".", "mf_loss_bce", ",", "self", ".", "model", ".", "emb_loss_bce", ",", "self", ".", "model", ".", "reg_loss_bce", "]", "\n", "", "elif", "args", ".", "loss", "==", "'bce1'", ":", "\n", "            ", "sess_list", "=", "[", "self", ".", "model", ".", "opt_two_bce1", ",", "self", ".", "model", ".", "loss_two_bce1", ",", "self", ".", "model", ".", "mf_loss_two_bce1", ",", "self", ".", "model", ".", "emb_loss_two_bce1", ",", "self", ".", "model", ".", "reg_loss_two_bce1", "]", "\n", "", "elif", "args", ".", "loss", "==", "'bce2'", ":", "\n", "            ", "sess_list", "=", "[", "self", ".", "model", ".", "opt_two_bce2", ",", "self", ".", "model", ".", "loss_two_bce2", ",", "self", ".", "model", ".", "mf_loss_two_bce2", ",", "self", ".", "model", ".", "emb_loss_two_bce2", ",", "self", ".", "model", ".", "reg_loss_two_bce2", "]", "\n", "", "elif", "args", ".", "loss", "==", "'bceboth'", ":", "\n", "            ", "sess_list", "=", "[", "self", ".", "model", ".", "opt_two_bce_both", ",", "self", ".", "model", ".", "loss_two_bce_both", ",", "self", ".", "model", ".", "mf_loss_two_bce_both", ",", "self", ".", "model", ".", "emb_loss_two_bce_both", ",", "self", ".", "model", ".", "reg_loss_two_bce_both", "]", "\n", "", "if", "len", "(", "gpus", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "gpus", "[", "-", "1", "]", ")", ":", "\n", "                ", "users", ",", "pos_items", ",", "neg_items", "=", "self", ".", "sample", ".", "data", "\n", "self", ".", "data", "=", "sess", ".", "run", "(", "sess_list", ",", "\n", "feed_dict", "=", "{", "model", ".", "users", ":", "users", ",", "model", ".", "pos_items", ":", "pos_items", ",", "\n", "model", ".", "node_dropout", ":", "eval", "(", "args", ".", "node_dropout", ")", ",", "\n", "model", ".", "mess_dropout", ":", "eval", "(", "args", ".", "mess_dropout", ")", ",", "\n", "model", ".", "neg_items", ":", "neg_items", "}", ")", "\n", "", "", "else", ":", "\n", "            ", "users", ",", "pos_items", ",", "neg_items", "=", "self", ".", "sample", ".", "data", "\n", "self", ".", "data", "=", "sess", ".", "run", "(", "sess_list", ",", "\n", "feed_dict", "=", "{", "model", ".", "users", ":", "users", ",", "model", ".", "pos_items", ":", "pos_items", ",", "\n", "model", ".", "node_dropout", ":", "eval", "(", "args", ".", "node_dropout", ")", ",", "\n", "model", ".", "mess_dropout", ":", "eval", "(", "args", ".", "mess_dropout", ")", ",", "\n", "model", ".", "neg_items", ":", "neg_items", "}", ")", "\n", "", "", "", "class", "train_thread_test", "(", "threading", ".", "Thread", ")", ":", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.__init__": [[616, 621], ["threading.Thread.__init__"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "sess", ",", "sample", ",", "args", ")", ":", "\n", "        ", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "sess", "=", "sess", "\n", "self", ".", "sample", "=", "sample", "\n", "", "def", "run", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run": [[621, 648], ["len", "sess.run", "tensorflow.device", "sess.run", "eval", "eval", "eval", "eval"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "sess_list", "=", "[", "]", "\n", "if", "args", ".", "loss", "==", "'bpr'", ":", "\n", "            ", "sess_list", "=", "[", "self", ".", "model", ".", "loss", ",", "self", ".", "model", ".", "mf_loss", ",", "self", ".", "model", ".", "emb_loss", "]", "\n", "", "elif", "args", ".", "loss", "==", "'bce'", ":", "\n", "            ", "sess_list", "=", "[", "self", ".", "model", ".", "loss_bce", ",", "self", ".", "model", ".", "mf_loss_bce", ",", "self", ".", "model", ".", "emb_loss_bce", "]", "\n", "", "elif", "args", ".", "loss", "==", "'bce1'", ":", "\n", "            ", "sess_list", "=", "[", "self", ".", "model", ".", "loss_two_bce1", ",", "self", ".", "model", ".", "mf_loss_two_bce1", ",", "self", ".", "model", ".", "emb_loss_two_bce1", "]", "\n", "", "elif", "args", ".", "loss", "==", "'bce2'", ":", "\n", "            ", "sess_list", "=", "[", "self", ".", "model", ".", "loss_two_bce2", ",", "self", ".", "model", ".", "mf_loss_two_bce2", ",", "self", ".", "model", ".", "emb_loss_two_bce2", "]", "\n", "", "elif", "args", ".", "loss", "==", "'bceboth'", ":", "\n", "            ", "sess_list", "=", "[", "self", ".", "model", ".", "loss_two_bce_both", ",", "self", ".", "model", ".", "mf_loss_two_bce_both", ",", "self", ".", "model", ".", "emb_loss_two_bce_both", "]", "\n", "", "if", "len", "(", "gpus", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "gpus", "[", "-", "1", "]", ")", ":", "\n", "                ", "users", ",", "pos_items", ",", "neg_items", "=", "self", ".", "sample", ".", "data", "\n", "self", ".", "data", "=", "sess", ".", "run", "(", "sess_list", ",", "\n", "feed_dict", "=", "{", "model", ".", "users", ":", "users", ",", "model", ".", "pos_items", ":", "pos_items", ",", "\n", "model", ".", "neg_items", ":", "neg_items", ",", "\n", "model", ".", "node_dropout", ":", "eval", "(", "args", ".", "node_dropout", ")", ",", "\n", "model", ".", "mess_dropout", ":", "eval", "(", "args", ".", "mess_dropout", ")", "}", ")", "\n", "", "", "else", ":", "\n", "            ", "users", ",", "pos_items", ",", "neg_items", "=", "self", ".", "sample", ".", "data", "\n", "self", ".", "data", "=", "sess", ".", "run", "(", "sess_list", ",", "\n", "feed_dict", "=", "{", "model", ".", "users", ":", "users", ",", "model", ".", "pos_items", ":", "pos_items", ",", "\n", "model", ".", "neg_items", ":", "neg_items", ",", "\n", "model", ".", "node_dropout", ":", "eval", "(", "args", ".", "node_dropout", ")", ",", "\n", "model", ".", "mess_dropout", ":", "eval", "(", "args", ".", "mess_dropout", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.load_pretrained_data": [[557, 565], ["np.load", "print"], "function", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.load"], ["", "", "def", "load_pretrained_data", "(", ")", ":", "\n", "    ", "pretrain_path", "=", "'%spretrain/%s/%s.npz'", "%", "(", "args", ".", "proj_path", ",", "args", ".", "dataset", ",", "'embedding'", ")", "\n", "try", ":", "\n", "        ", "pretrain_data", "=", "np", ".", "load", "(", "pretrain_path", ")", "\n", "print", "(", "'load the pretrained embeddings.'", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "pretrain_data", "=", "None", "\n", "", "return", "pretrain_data", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF.__init__": [[17, 169], ["tensorflow.sqrt", "tensorflow.constant", "tensorflow.constant", "GRMF.NGCF.norm_adj.count_nonzero", "eval", "len", "eval", "GRMF.NGCF.create_model_str", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.summary.merge", "tensorflow.summary.merge", "tensorflow.summary.merge", "tensorflow.summary.merge", "GRMF.NGCF._init_weights", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.matmul", "GRMF.NGCF.create_bpr_loss", "tensorflow.train.AdamOptimizer().minimize", "GRMF.NGCF.create_Laplace_norm", "GRMF.NGCF.create_Laplace_norm1", "GRMF.NGCF.create_Laplace_norm2", "GRMF.NGCF.create_Laplace_norm3", "GRMF.NGCF.create_Laplace_norm4", "tensorflow.constant", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.get_collection", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.get_collection", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.get_collection", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.get_collection", "GRMF.NGCF._create_ngcf_embed", "GRMF.NGCF._create_gcn_embed", "tensorflow.train.AdamOptimizer", "GRMF.NGCF._create_gcmc_embed"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF.create_model_str", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._init_weights", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE.create_bpr_loss", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF.create_Laplace_norm", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF.create_Laplace_norm1", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF.create_Laplace_norm2", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF.create_Laplace_norm3", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF.create_Laplace_norm4", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._create_ngcf_embed", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._create_gcn_embed", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._create_gcmc_embed"], ["    ", "def", "__init__", "(", "self", ",", "data_config", ",", "pretrain_data", ")", ":", "\n", "# argument settings", "\n", "        ", "self", ".", "model_type", "=", "'GRMF'", "\n", "self", ".", "adj_type", "=", "args", ".", "adj_type", "\n", "self", ".", "alg_type", "=", "args", ".", "alg_type", "\n", "\n", "self", ".", "pretrain_data", "=", "pretrain_data", "\n", "self", ".", "degree", "=", "data_config", "[", "'degree'", "]", "\n", "self", ".", "degree_k2", "=", "data_config", "[", "'degree_k2'", "]", "\n", "self", ".", "degree_norm", "=", "tf", ".", "sqrt", "(", "tf", ".", "constant", "(", "self", ".", "degree", ")", ")", "\n", "self", ".", "degree_norm_L1", "=", "tf", ".", "constant", "(", "self", ".", "degree", ")", "\n", "self", ".", "degree_norm_L1_k2", "=", "tf", ".", "constant", "(", "self", ".", "degree_k2", ")", "\n", "self", ".", "n_users", "=", "data_config", "[", "'n_users'", "]", "\n", "self", ".", "n_items", "=", "data_config", "[", "'n_items'", "]", "\n", "\n", "self", ".", "n_fold", "=", "100", "\n", "\n", "self", ".", "norm_adj", "=", "data_config", "[", "'norm_adj'", "]", "\n", "self", ".", "plain_adj", "=", "data_config", "[", "'plain_adj'", "]", "\n", "self", ".", "n_nonzero_elems", "=", "self", ".", "norm_adj", ".", "count_nonzero", "(", ")", "\n", "\n", "self", ".", "lr", "=", "args", ".", "lr", "\n", "\n", "self", ".", "emb_dim", "=", "args", ".", "embed_size", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "\n", "self", ".", "weight_size", "=", "eval", "(", "args", ".", "layer_size", ")", "\n", "self", ".", "n_layers", "=", "len", "(", "self", ".", "weight_size", ")", "\n", "\n", "self", ".", "is_norm", "=", "args", ".", "is_norm", "\n", "self", ".", "regs", "=", "eval", "(", "args", ".", "regs", ")", "\n", "self", ".", "decay", "=", "self", ".", "regs", "[", "0", "]", "\n", "self", ".", "g_decay", "=", "self", ".", "regs", "[", "1", "]", "\n", "self", ".", "log_dir", "=", "self", ".", "create_model_str", "(", ")", "\n", "self", ".", "verbose", "=", "args", ".", "verbose", "\n", "\n", "'''\n        *********************************************************\n        Create Placeholder for Input Data & Dropout.\n        '''", "\n", "# placeholder definition", "\n", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "\n", "# dropout: node dropout (adopted on the ego-networks);", "\n", "#          ... since the usage of node dropout have higher computational cost,", "\n", "#          ... please use the 'node_dropout_flag' to indicate whether use such technique.", "\n", "#          message dropout (adopted on the convolution operations).", "\n", "self", ".", "node_dropout_flag", "=", "args", ".", "node_dropout_flag", "\n", "self", ".", "node_dropout", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "mess_dropout", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "\n", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'TRAIN_LOSS'", ")", ":", "\n", "            ", "self", ".", "train_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_loss'", ",", "self", ".", "train_loss", ")", "\n", "self", ".", "train_mf_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_mf_loss'", ",", "self", ".", "train_mf_loss", ")", "\n", "self", ".", "train_emb_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_emb_loss'", ",", "self", ".", "train_emb_loss", ")", "\n", "self", ".", "train_reg_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_reg_loss'", ",", "self", ".", "train_reg_loss", ")", "\n", "", "self", ".", "merged_train_loss", "=", "tf", ".", "summary", ".", "merge", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "SUMMARIES", ",", "'TRAIN_LOSS'", ")", ")", "\n", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'TRAIN_ACC'", ")", ":", "\n", "            ", "self", ".", "train_rec20", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_rec20'", ",", "self", ".", "train_rec20", ")", "\n", "self", ".", "train_rec100", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_rec100'", ",", "self", ".", "train_rec100", ")", "\n", "self", ".", "train_ndcg20", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_ndcg20'", ",", "self", ".", "train_ndcg20", ")", "\n", "self", ".", "train_ndcg100", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_ndcg100'", ",", "self", ".", "train_ndcg100", ")", "\n", "", "self", ".", "merged_train_acc", "=", "tf", ".", "summary", ".", "merge", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "SUMMARIES", ",", "'TRAIN_ACC'", ")", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'TEST_LOSS'", ")", ":", "\n", "            ", "self", ".", "test_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_loss'", ",", "self", ".", "test_loss", ")", "\n", "self", ".", "test_mf_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_mf_loss'", ",", "self", ".", "test_mf_loss", ")", "\n", "self", ".", "test_emb_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_emb_loss'", ",", "self", ".", "test_emb_loss", ")", "\n", "self", ".", "test_reg_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_reg_loss'", ",", "self", ".", "test_reg_loss", ")", "\n", "", "self", ".", "merged_test_loss", "=", "tf", ".", "summary", ".", "merge", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "SUMMARIES", ",", "'TEST_LOSS'", ")", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'TEST_ACC'", ")", ":", "\n", "            ", "self", ".", "test_rec20", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_rec20'", ",", "self", ".", "test_rec20", ")", "\n", "self", ".", "test_rec100", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_rec100'", ",", "self", ".", "test_rec100", ")", "\n", "self", ".", "test_ndcg20", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_ndcg20'", ",", "self", ".", "test_ndcg20", ")", "\n", "self", ".", "test_ndcg100", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_ndcg100'", ",", "self", ".", "test_ndcg100", ")", "\n", "", "self", ".", "merged_test_acc", "=", "tf", ".", "summary", ".", "merge", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "SUMMARIES", ",", "'TEST_ACC'", ")", ")", "\n", "\"\"\"\n        *********************************************************\n        Create Model Parameters (i.e., Initialize Weights).\n        \"\"\"", "\n", "# initialization of model parameters", "\n", "self", ".", "weights", "=", "self", ".", "_init_weights", "(", ")", "\n", "\n", "\"\"\"\n        *********************************************************\n        Compute Graph-based Representations of all users & items via Message-Passing Mechanism of Graph Neural Networks.\n        Different Convolutional Layers:\n            1. ngcf: defined in 'Neural Graph Collaborative Filtering', SIGIR2019;\n            2. gcn:  defined in 'Semi-Supervised Classification with Graph Convolutional Networks', ICLR2018;\n            3. gcmc: defined in 'Graph Convolutional Matrix Completion', KDD2018;\n        \"\"\"", "\n", "if", "self", ".", "alg_type", "in", "[", "'ngcf'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_ngcf_embed", "(", ")", "\n", "\n", "", "elif", "self", ".", "alg_type", "in", "[", "'gcn'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_gcn_embed", "(", ")", "\n", "\n", "", "elif", "self", ".", "alg_type", "in", "[", "'gcmc'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_gcmc_embed", "(", ")", "\n", "\n", "", "\"\"\"\n        *********************************************************\n        Establish the final representations for user-item pairs in batch.\n        \"\"\"", "\n", "self", ".", "u_g_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ua_embeddings", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_g_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ia_embeddings", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_g_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ia_embeddings", ",", "self", ".", "neg_items", ")", "\n", "\n", "\"\"\"\n        *********************************************************\n        Inference for the testing phase.\n        \"\"\"", "\n", "self", ".", "batch_ratings", "=", "tf", ".", "matmul", "(", "self", ".", "u_g_embeddings", ",", "self", ".", "pos_i_g_embeddings", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "\n", "\"\"\"\n        *********************************************************\n        Generate Predictions & Optimize via BPR loss.\n        \"\"\"", "\n", "self", ".", "mf_loss", ",", "self", ".", "emb_loss", ",", "self", ".", "reg_loss", "=", "self", ".", "create_bpr_loss", "(", "self", ".", "u_g_embeddings", ",", "\n", "self", ".", "pos_i_g_embeddings", ",", "\n", "self", ".", "neg_i_g_embeddings", ")", "\n", "self", ".", "loss", "=", "self", ".", "mf_loss", "+", "self", ".", "emb_loss", "+", "self", ".", "reg_loss", "\n", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "self", ".", "Laplace_cos", "=", "self", ".", "create_Laplace_norm", "(", ")", "\n", "self", ".", "Laplace_pre", "=", "self", ".", "create_Laplace_norm1", "(", ")", "\n", "self", ".", "Laplace_norm", "=", "self", ".", "create_Laplace_norm2", "(", ")", "\n", "self", ".", "Laplace_pre_k2", "=", "self", ".", "create_Laplace_norm3", "(", ")", "\n", "self", ".", "Laplace_cos_k2_u", ",", "self", ".", "Laplace_cos_k2_i", "=", "self", ".", "create_Laplace_norm4", "(", ")", "\n", "", "def", "create_model_str", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF.create_model_str": [[169, 173], ["str", "str", "str", "str"], "methods", ["None"], ["", "def", "create_model_str", "(", "self", ")", ":", "\n", "        ", "str1", "=", "'/'", "+", "args", ".", "dataset", "\n", "str1", "+=", "'/is_norm_'", "+", "str", "(", "args", ".", "is_norm", ")", "+", "'/lr_'", "+", "str", "(", "self", ".", "lr", ")", "+", "'/reg_'", "+", "str", "(", "self", ".", "decay", ")", "+", "'/g_reg_'", "+", "str", "(", "self", ".", "g_decay", ")", "\n", "return", "str1", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._init_weights": [[175, 210], ["dict", "tensorflow.contrib.layers.xavier_initializer", "range", "tensorflow.Variable", "tensorflow.Variable", "print", "tensorflow.Variable", "tensorflow.Variable", "print", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer."], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "all_weights", "=", "dict", "(", ")", "\n", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "\n", "if", "self", ".", "pretrain_data", "is", "None", ":", "\n", "            ", "all_weights", "[", "'user_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'user_embedding'", ")", "\n", "all_weights", "[", "'item_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'item_embedding'", ")", "\n", "print", "(", "'using xavier initialization'", ")", "\n", "", "else", ":", "\n", "            ", "all_weights", "[", "'user_embedding'", "]", "=", "tf", ".", "Variable", "(", "initial_value", "=", "self", ".", "pretrain_data", "[", "'user_embed'", "]", ",", "trainable", "=", "True", ",", "\n", "name", "=", "'user_embedding'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "all_weights", "[", "'item_embedding'", "]", "=", "tf", ".", "Variable", "(", "initial_value", "=", "self", ".", "pretrain_data", "[", "'item_embed'", "]", ",", "trainable", "=", "True", ",", "\n", "name", "=", "'item_embedding'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "print", "(", "'using pretrained initialization'", ")", "\n", "\n", "", "self", ".", "weight_size_list", "=", "[", "self", ".", "emb_dim", "]", "+", "self", ".", "weight_size", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "all_weights", "[", "'W_gc_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "weight_size_list", "[", "k", "]", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'W_gc_%d'", "%", "k", ")", "\n", "all_weights", "[", "'b_gc_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'b_gc_%d'", "%", "k", ")", "\n", "\n", "all_weights", "[", "'W_bi_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "weight_size_list", "[", "k", "]", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'W_bi_%d'", "%", "k", ")", "\n", "all_weights", "[", "'b_bi_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'b_bi_%d'", "%", "k", ")", "\n", "\n", "all_weights", "[", "'W_mlp_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "weight_size_list", "[", "k", "]", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'W_mlp_%d'", "%", "k", ")", "\n", "all_weights", "[", "'b_mlp_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'b_mlp_%d'", "%", "k", ")", "\n", "\n", "", "return", "all_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._split_A_hat": [[211, 224], ["range", "A_fold_hat.append", "GRMF.NGCF._convert_sp_mat_to_sp_tensor"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._convert_sp_mat_to_sp_tensor"], ["", "def", "_split_A_hat", "(", "self", ",", "X", ")", ":", "\n", "        ", "A_fold_hat", "=", "[", "]", "\n", "\n", "fold_len", "=", "(", "self", ".", "n_users", "+", "self", ".", "n_items", ")", "//", "self", ".", "n_fold", "\n", "for", "i_fold", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "            ", "start", "=", "i_fold", "*", "fold_len", "\n", "if", "i_fold", "==", "self", ".", "n_fold", "-", "1", ":", "\n", "                ", "end", "=", "self", ".", "n_users", "+", "self", ".", "n_items", "\n", "", "else", ":", "\n", "                ", "end", "=", "(", "i_fold", "+", "1", ")", "*", "fold_len", "\n", "\n", "", "A_fold_hat", ".", "append", "(", "self", ".", "_convert_sp_mat_to_sp_tensor", "(", "X", "[", "start", ":", "end", "]", ")", ")", "\n", "", "return", "A_fold_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._split_A_hat_node_dropout": [[225, 242], ["range", "GRMF.NGCF._convert_sp_mat_to_sp_tensor", "X[].count_nonzero", "A_fold_hat.append", "GRMF.NGCF._dropout_sparse"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._convert_sp_mat_to_sp_tensor", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._dropout_sparse"], ["", "def", "_split_A_hat_node_dropout", "(", "self", ",", "X", ")", ":", "\n", "        ", "A_fold_hat", "=", "[", "]", "\n", "\n", "fold_len", "=", "(", "self", ".", "n_users", "+", "self", ".", "n_items", ")", "//", "self", ".", "n_fold", "\n", "for", "i_fold", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "            ", "start", "=", "i_fold", "*", "fold_len", "\n", "if", "i_fold", "==", "self", ".", "n_fold", "-", "1", ":", "\n", "                ", "end", "=", "self", ".", "n_users", "+", "self", ".", "n_items", "\n", "", "else", ":", "\n", "                ", "end", "=", "(", "i_fold", "+", "1", ")", "*", "fold_len", "\n", "\n", "# A_fold_hat.append(self._convert_sp_mat_to_sp_tensor(X[start:end]))", "\n", "", "temp", "=", "self", ".", "_convert_sp_mat_to_sp_tensor", "(", "X", "[", "start", ":", "end", "]", ")", "\n", "n_nonzero_temp", "=", "X", "[", "start", ":", "end", "]", ".", "count_nonzero", "(", ")", "\n", "A_fold_hat", ".", "append", "(", "self", ".", "_dropout_sparse", "(", "temp", ",", "1", "-", "self", ".", "node_dropout", "[", "0", "]", ",", "n_nonzero_temp", ")", ")", "\n", "\n", "", "return", "A_fold_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._create_ngcf_embed": [[243, 247], ["None"], "methods", ["None"], ["", "def", "_create_ngcf_embed", "(", "self", ")", ":", "\n", "# Generate a set of adjacency sub-matrix.", "\n", "\n", "        ", "return", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._create_gcn_embed": [[248, 269], ["GRMF.NGCF._split_A_hat", "tensorflow.concat", "range", "tensorflow.concat", "tensorflow.split", "range", "tensorflow.concat", "tensorflow.nn.leaky_relu", "tensorflow.nn.dropout", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._split_A_hat"], ["", "def", "_create_gcn_embed", "(", "self", ")", ":", "\n", "        ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "all_embeddings", "=", "[", "embeddings", "]", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "embeddings", ")", ")", "\n", "\n", "", "embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "tf", ".", "matmul", "(", "embeddings", ",", "self", ".", "weights", "[", "'W_gc_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_gc_%d'", "%", "k", "]", ")", "\n", "embeddings", "=", "tf", ".", "nn", ".", "dropout", "(", "embeddings", ",", "1", "-", "self", ".", "mess_dropout", "[", "k", "]", ")", "\n", "\n", "all_embeddings", "+=", "[", "embeddings", "]", "\n", "\n", "", "all_embeddings", "=", "tf", ".", "concat", "(", "all_embeddings", ",", "1", ")", "\n", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._create_gcmc_embed": [[270, 293], ["GRMF.NGCF._split_A_hat", "tensorflow.concat", "range", "tensorflow.concat", "tensorflow.split", "range", "tensorflow.concat", "tensorflow.nn.leaky_relu", "tensorflow.nn.dropout", "temp_embed.append", "tensorflow.matmul", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._split_A_hat"], ["", "def", "_create_gcmc_embed", "(", "self", ")", ":", "\n", "        ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "\n", "embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "all_embeddings", "=", "[", "]", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "embeddings", ")", ")", "\n", "", "embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "# convolutional layer.", "\n", "embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "tf", ".", "matmul", "(", "embeddings", ",", "self", ".", "weights", "[", "'W_gc_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_gc_%d'", "%", "k", "]", ")", "\n", "# dense layer.", "\n", "mlp_embeddings", "=", "tf", ".", "matmul", "(", "embeddings", ",", "self", ".", "weights", "[", "'W_mlp_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_mlp_%d'", "%", "k", "]", "\n", "mlp_embeddings", "=", "tf", ".", "nn", ".", "dropout", "(", "mlp_embeddings", ",", "1", "-", "self", ".", "mess_dropout", "[", "k", "]", ")", "\n", "\n", "all_embeddings", "+=", "[", "mlp_embeddings", "]", "\n", "", "all_embeddings", "=", "tf", ".", "concat", "(", "all_embeddings", ",", "1", ")", "\n", "\n", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF.create_Laplace_norm": [[295, 310], ["GRMF.NGCF._split_A_hat", "GRMF.NGCF._create_ngcf_embed", "tensorflow.concat", "tensorflow.nn.l2_normalize", "range", "tensorflow.concat", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.constant", "temp_embed.append", "tensorflow.reduce_sum", "tensorflow.sparse_tensor_dense_matmul"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._split_A_hat", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._create_ngcf_embed"], ["", "def", "create_Laplace_norm", "(", "self", ")", ":", "\n", "        ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "plain_adj", ")", "\n", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_ngcf_embed", "(", ")", "\n", "embedding", "=", "tf", ".", "concat", "(", "[", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "]", ",", "0", ")", "\n", "norm_embedding", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embedding", ",", "axis", "=", "1", ")", "\n", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "            ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "norm_embedding", ")", ")", "\n", "\n", "# sum messages of neighbors.", "\n", "", "temp", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "temp", "=", "tf", ".", "multiply", "(", "temp", ",", "norm_embedding", ")", "\n", "temp", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "temp", ",", "axis", "=", "1", ",", "keepdims", "=", "False", ")", ")", "\n", "temp1", "=", "tf", ".", "constant", "(", "self", ".", "n_nonzero_elems", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "(", "temp1", "-", "temp", ")", "/", "temp1", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF.create_Laplace_norm1": [[312, 327], ["GRMF.NGCF._split_A_hat", "GRMF.NGCF._create_ngcf_embed", "tensorflow.concat", "range", "tensorflow.concat", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.reduce_sum", "temp_embed.append", "tensorflow.multiply", "tensorflow.sparse_tensor_dense_matmul"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._split_A_hat", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._create_ngcf_embed"], ["", "def", "create_Laplace_norm1", "(", "self", ")", ":", "\n", "        ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "plain_adj", ")", "\n", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_ngcf_embed", "(", ")", "\n", "embedding", "=", "tf", ".", "concat", "(", "[", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "]", ",", "0", ")", "\n", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "            ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "embedding", ")", ")", "\n", "\n", "# sum messages of neighbors.", "\n", "", "temp", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "temp", "=", "tf", ".", "multiply", "(", "temp", ",", "embedding", ")", "\n", "temp", "=", "tf", ".", "reduce_sum", "(", "temp", ")", "\n", "temp1", "=", "tf", ".", "multiply", "(", "tf", ".", "multiply", "(", "embedding", ",", "embedding", ")", ",", "self", ".", "degree_norm_L1", ")", "\n", "temp1", "=", "tf", ".", "reduce_sum", "(", "temp1", ")", "\n", "return", "(", "temp1", "-", "temp", ")", "/", "temp1", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF.create_Laplace_norm2": [[328, 343], ["GRMF.NGCF._split_A_hat", "GRMF.NGCF._create_ngcf_embed", "tensorflow.concat", "range", "tensorflow.concat", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.reduce_sum", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._split_A_hat", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._create_ngcf_embed"], ["", "def", "create_Laplace_norm2", "(", "self", ")", ":", "\n", "        ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_ngcf_embed", "(", ")", "\n", "embedding", "=", "tf", ".", "concat", "(", "[", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "]", ",", "0", ")", "\n", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "            ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "embedding", ")", ")", "\n", "\n", "# sum messages of neighbors.", "\n", "", "temp", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "temp", "=", "tf", ".", "multiply", "(", "temp", ",", "embedding", ")", "\n", "temp", "=", "tf", ".", "reduce_sum", "(", "temp", ")", "\n", "temp1", "=", "tf", ".", "multiply", "(", "embedding", ",", "embedding", ")", "\n", "temp1", "=", "tf", ".", "reduce_sum", "(", "temp1", ")", "\n", "return", "(", "temp1", "-", "temp", ")", "/", "temp1", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF.create_Laplace_norm3": [[345, 360], ["GRMF.NGCF._split_A_hat", "GRMF.NGCF._create_ngcf_embed", "tensorflow.concat", "range", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.reduce_sum", "range", "tensorflow.concat", "tensorflow.multiply", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._split_A_hat", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._create_ngcf_embed"], ["", "def", "create_Laplace_norm3", "(", "self", ")", ":", "\n", "        ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_ngcf_embed", "(", ")", "\n", "embedding", "=", "tf", ".", "concat", "(", "[", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "]", ",", "0", ")", "\n", "temp", "=", "embedding", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "temp", ")", ")", "\n", "", "temp", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "", "temp", "=", "tf", ".", "multiply", "(", "temp", ",", "embedding", ")", "\n", "temp", "=", "tf", ".", "reduce_sum", "(", "temp", ")", "\n", "temp1", "=", "tf", ".", "multiply", "(", "tf", ".", "multiply", "(", "embedding", ",", "embedding", ")", ",", "self", ".", "degree_norm_L1_k2", ")", "\n", "temp1", "=", "tf", ".", "reduce_sum", "(", "temp1", ")", "\n", "return", "(", "temp1", "-", "temp", ")", "/", "temp1", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF.create_Laplace_norm4": [[361, 380], ["GRMF.NGCF._split_A_hat", "GRMF.NGCF._create_ngcf_embed", "tensorflow.nn.l2_normalize", "range", "tensorflow.multiply", "tensorflow.split", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.split", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.concat", "range", "tensorflow.concat", "tensorflow.multiply", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._split_A_hat", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._create_ngcf_embed"], ["", "def", "create_Laplace_norm4", "(", "self", ")", ":", "\n", "        ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_ngcf_embed", "(", ")", "\n", "embedding", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "concat", "(", "[", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "]", ",", "0", ")", ",", "axis", "=", "1", ")", "\n", "temp", "=", "embedding", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "temp", ")", ")", "\n", "", "temp", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "", "temp", "=", "tf", ".", "multiply", "(", "temp", ",", "embedding", ")", "\n", "temp_u", ",", "temp_i", "=", "tf", ".", "split", "(", "temp", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "temp_u", "=", "tf", ".", "reduce_sum", "(", "temp_u", ")", "\n", "temp_i", "=", "tf", ".", "reduce_sum", "(", "temp_i", ")", "\n", "temp1", "=", "tf", ".", "multiply", "(", "tf", ".", "multiply", "(", "embedding", ",", "embedding", ")", ",", "self", ".", "degree_norm_L1_k2", ")", "\n", "temp1_u", ",", "temp1_i", "=", "tf", ".", "split", "(", "temp1", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "temp1_u", "=", "tf", ".", "reduce_sum", "(", "temp1_u", ")", "\n", "temp1_i", "=", "tf", ".", "reduce_sum", "(", "temp1_i", ")", "\n", "return", "(", "temp1_u", "-", "temp_u", ")", ",", "temp1_i", "-", "temp_i", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF.create_bpr_loss": [[385, 414], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.l2_loss", "tensorflow.nn.softplus", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.divide", "tensorflow.divide", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.square", "tensorflow.square"], "methods", ["None"], ["", "def", "create_bpr_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "users", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "pos_items", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_items", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "\n", "# In the first version, we implement the bpr loss via the following codes:", "\n", "# We report the performance in our paper using this implementation.", "\n", "#         maxi = tf.log(tf.nn.sigmoid(pos_scores - neg_scores))", "\n", "#         mf_loss = tf.negative(tf.reduce_mean(maxi))", "\n", "\n", "## In the second version, we implement the bpr loss via the following codes to avoid 'NAN' loss during training:", "\n", "## However, it will change the training performance and training performance.", "\n", "## Please retrain the model and do a grid search for the best experimental setting.", "\n", "mf_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softplus", "(", "-", "(", "pos_scores", "-", "neg_scores", ")", ")", ")", "\n", "\n", "\n", "emb_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "if", "self", ".", "is_norm", "==", "0", ":", "\n", "            ", "reg_loss", "=", "self", ".", "g_decay", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "users", "-", "pos_items", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "norm1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "degree_norm", ",", "self", ".", "users", ")", "\n", "norm2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "degree_norm", ",", "self", ".", "pos_items", "+", "self", ".", "n_users", ")", "\n", "temp1", "=", "tf", ".", "divide", "(", "users", ",", "norm1", ")", "\n", "temp2", "=", "tf", ".", "divide", "(", "pos_items", ",", "norm2", ")", "\n", "reg_loss", "=", "self", ".", "g_decay", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "temp1", "-", "temp2", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "False", ")", ")", "\n", "\n", "", "return", "mf_loss", ",", "emb_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._convert_sp_mat_to_sp_tensor": [[415, 419], ["X.tocoo().astype", "np.mat().transpose", "tensorflow.SparseTensor", "X.tocoo", "np.mat"], "methods", ["None"], ["", "def", "_convert_sp_mat_to_sp_tensor", "(", "self", ",", "X", ")", ":", "\n", "        ", "coo", "=", "X", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "np", ".", "mat", "(", "[", "coo", ".", "row", ",", "coo", ".", "col", "]", ")", ".", "transpose", "(", ")", "\n", "return", "tf", ".", "SparseTensor", "(", "indices", ",", "coo", ".", "data", ",", "coo", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.NGCF._dropout_sparse": [[420, 431], ["tensorflow.random_uniform", "tensorflow.cast", "tensorflow.sparse_retain", "tensorflow.floor", "tensorflow.div"], "methods", ["None"], ["", "def", "_dropout_sparse", "(", "self", ",", "X", ",", "keep_prob", ",", "n_nonzero_elems", ")", ":", "\n", "        ", "\"\"\"\n        Dropout for sparse tensors.\n        \"\"\"", "\n", "noise_shape", "=", "[", "n_nonzero_elems", "]", "\n", "random_tensor", "=", "keep_prob", "\n", "random_tensor", "+=", "tf", ".", "random_uniform", "(", "noise_shape", ")", "\n", "dropout_mask", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "random_tensor", ")", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "pre_out", "=", "tf", ".", "sparse_retain", "(", "X", ",", "dropout_mask", ")", "\n", "\n", "return", "pre_out", "*", "tf", ".", "div", "(", "1.", ",", "keep_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.GRMF.load_pretrained_data": [[432, 440], ["np.load", "print"], "function", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.load"], ["", "", "def", "load_pretrained_data", "(", ")", ":", "\n", "    ", "pretrain_path", "=", "'%spretrain/%s/%s.npz'", "%", "(", "args", ".", "proj_path", ",", "args", ".", "dataset", ",", "'embedding'", ")", "\n", "try", ":", "\n", "        ", "pretrain_data", "=", "np", ".", "load", "(", "pretrain_path", ")", "\n", "print", "(", "'load the pretrained embeddings.'", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "pretrain_data", "=", "None", "\n", "", "return", "pretrain_data", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utility.load_data.Data.__init__": [[15, 90], ["load_data.Data.print_statistics", "scipy.dok_matrix", "collections.defaultdict", "open", "f.readlines", "open", "f.readlines", "open", "open", "f_train.readlines", "f_test.readlines", "len", "l.strip.strip.strip().split", "int", "load_data.Data.exist_users.append", "max", "len", "len", "l.strip.strip.strip", "len", "l.strip.strip.strip", "l.strip.strip.strip", "int", "len", "max", "len", "max", "len", "int", "len", "len", "len", "load_data.Data.test_item_set[].append", "l.strip.strip.strip", "max", "int", "max", "l.strip.strip.split", "int", "l.strip.strip.split", "l.strip.strip.split"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.utility.load_data.Data.print_statistics"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "batch_size", ",", "args", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "train_file", "=", "path", "+", "'/train.txt'", "\n", "if", "args", ".", "valid_set", "==", "\"test\"", ":", "\n", "            ", "test_file", "=", "path", "+", "'/test.txt'", "\n", "", "else", ":", "\n", "            ", "test_file", "=", "path", "+", "'/valid.txt'", "\n", "", "self", ".", "n_users", ",", "self", ".", "n_items", "=", "0", ",", "0", "\n", "self", ".", "n_train", ",", "self", ".", "n_test", "=", "0", ",", "0", "\n", "self", ".", "neg_pools", "=", "{", "}", "\n", "\n", "self", ".", "exist_users", "=", "[", "]", "\n", "\n", "with", "open", "(", "train_file", ")", "as", "f", ":", "\n", "            ", "for", "l", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "if", "len", "(", "l", ")", ">", "0", ":", "\n", "                    ", "l", "=", "l", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "items", "=", "[", "int", "(", "i", ")", "for", "i", "in", "l", "[", "1", ":", "]", "]", "\n", "uid", "=", "int", "(", "l", "[", "0", "]", ")", "\n", "self", ".", "exist_users", ".", "append", "(", "uid", ")", "\n", "if", "len", "(", "items", ")", "!=", "0", ":", "\n", "                        ", "self", ".", "n_items", "=", "max", "(", "self", ".", "n_items", ",", "max", "(", "items", ")", ")", "\n", "", "self", ".", "n_users", "=", "max", "(", "self", ".", "n_users", ",", "uid", ")", "\n", "self", ".", "n_train", "+=", "len", "(", "items", ")", "\n", "\n", "", "", "", "with", "open", "(", "test_file", ")", "as", "f", ":", "\n", "            ", "for", "l", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "if", "len", "(", "l", ")", ">", "0", ":", "\n", "                    ", "l", "=", "l", ".", "strip", "(", "'\\n'", ")", "\n", "try", ":", "\n", "                        ", "items", "=", "[", "int", "(", "i", ")", "for", "i", "in", "l", ".", "split", "(", "' '", ")", "[", "1", ":", "]", "]", "\n", "", "except", "Exception", ":", "\n", "                        ", "continue", "\n", "", "if", "len", "(", "items", ")", "!=", "0", ":", "\n", "                        ", "self", ".", "n_items", "=", "max", "(", "self", ".", "n_items", ",", "max", "(", "items", ")", ")", "\n", "", "self", ".", "n_test", "+=", "len", "(", "items", ")", "\n", "\n", "", "", "", "self", ".", "n_items", "+=", "1", "\n", "self", ".", "n_users", "+=", "1", "\n", "self", ".", "print_statistics", "(", ")", "\n", "self", ".", "R", "=", "sp", ".", "dok_matrix", "(", "(", "self", ".", "n_users", ",", "self", ".", "n_items", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "train_items", ",", "self", ".", "test_set", "=", "{", "}", ",", "{", "}", "\n", "self", ".", "test_item_set", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "with", "open", "(", "train_file", ")", "as", "f_train", ":", "\n", "            ", "with", "open", "(", "test_file", ")", "as", "f_test", ":", "\n", "                ", "for", "l", "in", "f_train", ".", "readlines", "(", ")", ":", "\n", "                    ", "if", "len", "(", "l", ")", "==", "0", ":", "break", "\n", "l", "=", "l", ".", "strip", "(", "'\\n'", ")", "\n", "items", "=", "[", "int", "(", "i", ")", "for", "i", "in", "l", ".", "split", "(", "' '", ")", "]", "\n", "uid", ",", "train_items", "=", "items", "[", "0", "]", ",", "items", "[", "1", ":", "]", "\n", "\n", "if", "len", "(", "train_items", ")", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "for", "i", "in", "train_items", ":", "\n", "                        ", "self", ".", "R", "[", "uid", ",", "i", "]", "=", "1.", "\n", "\n", "", "self", ".", "train_items", "[", "uid", "]", "=", "train_items", "\n", "\n", "", "for", "l", "in", "f_test", ".", "readlines", "(", ")", ":", "\n", "                    ", "if", "len", "(", "l", ")", "==", "0", ":", "break", "\n", "l", "=", "l", ".", "strip", "(", "'\\n'", ")", "\n", "try", ":", "\n", "                        ", "items", "=", "[", "int", "(", "i", ")", "for", "i", "in", "l", ".", "split", "(", "' '", ")", "]", "\n", "", "except", "Exception", ":", "\n", "                        ", "continue", "\n", "\n", "", "uid", ",", "test_items", "=", "items", "[", "0", "]", ",", "items", "[", "1", ":", "]", "\n", "\n", "if", "len", "(", "test_items", ")", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "self", ".", "test_set", "[", "uid", "]", "=", "test_items", "\n", "for", "item", "in", "test_items", ":", "\n", "                        ", "self", ".", "test_item_set", "[", "item", "]", ".", "append", "(", "uid", ")", "\n", "# for uid in range(self.n_users):", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utility.load_data.Data.get_adj_mat": [[95, 125], ["load_data.Data.create_adj_mat", "scipy.save_npz", "scipy.save_npz", "scipy.save_npz", "numpy.array", "numpy.power().flatten", "scipy.diags", "scipy.diags.dot", "norm_adj.dot.dot.dot", "print", "norm_adj.dot.dot.tocsr", "scipy.save_npz", "adj_mat.sum", "numpy.power", "numpy.isinf"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.utility.load_data.Data.create_adj_mat"], ["", "", "", "", "", "def", "get_adj_mat", "(", "self", ")", ":", "\n", "# try:", "\n", "#     t1 = time()", "\n", "#     adj_mat = sp.load_npz(self.path + '/s_adj_mat.npz')", "\n", "#     norm_adj_mat = sp.load_npz(self.path + '/s_norm_adj_mat.npz')", "\n", "#     mean_adj_mat = sp.load_npz(self.path + '/s_mean_adj_mat.npz')", "\n", "#     print('already load adj matrix', adj_mat.shape, time() - t1)", "\n", "\n", "# except Exception:", "\n", "        ", "adj_mat", ",", "norm_adj_mat", ",", "mean_adj_mat", "=", "self", ".", "create_adj_mat", "(", ")", "\n", "sp", ".", "save_npz", "(", "self", ".", "path", "+", "'/s_adj_mat.npz'", ",", "adj_mat", ")", "\n", "sp", ".", "save_npz", "(", "self", ".", "path", "+", "'/s_norm_adj_mat.npz'", ",", "norm_adj_mat", ")", "\n", "sp", ".", "save_npz", "(", "self", ".", "path", "+", "'/s_mean_adj_mat.npz'", ",", "mean_adj_mat", ")", "\n", "\n", "# try:", "\n", "#     pre_adj_mat = sp.load_npz(self.path + '/s_pre_adj_mat.npz')", "\n", "# except Exception:", "\n", "adj_mat", "=", "adj_mat", "\n", "rowsum", "=", "np", ".", "array", "(", "adj_mat", ".", "sum", "(", "1", ")", ")", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "norm_adj", "=", "d_mat_inv", ".", "dot", "(", "adj_mat", ")", "\n", "norm_adj", "=", "norm_adj", ".", "dot", "(", "d_mat_inv", ")", "\n", "print", "(", "'generate pre adjacency matrix.'", ")", "\n", "pre_adj_mat", "=", "norm_adj", ".", "tocsr", "(", ")", "\n", "sp", ".", "save_npz", "(", "self", ".", "path", "+", "'/s_pre_adj_mat.npz'", ",", "norm_adj", ")", "\n", "\n", "return", "adj_mat", ",", "norm_adj_mat", ",", "mean_adj_mat", ",", "pre_adj_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utility.load_data.Data.create_adj_mat": [[126, 165], ["time.time.time", "scipy.dok_matrix", "adj_mat.todok.todok.tolil", "load_data.Data.R.tolil", "range", "adj_mat.todok.todok.todok", "print", "time.time.time", "load_data.Data.create_adj_mat.normalized_adj_single"], "methods", ["None"], ["", "def", "create_adj_mat", "(", "self", ")", ":", "\n", "        ", "t1", "=", "time", "(", ")", "\n", "adj_mat", "=", "sp", ".", "dok_matrix", "(", "(", "self", ".", "n_users", "+", "self", ".", "n_items", ",", "self", ".", "n_users", "+", "self", ".", "n_items", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "adj_mat", "=", "adj_mat", ".", "tolil", "(", ")", "\n", "R", "=", "self", ".", "R", ".", "tolil", "(", ")", "\n", "# prevent memory from overflowing", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "adj_mat", "[", "int", "(", "self", ".", "n_users", "*", "i", "/", "5.0", ")", ":", "int", "(", "self", ".", "n_users", "*", "(", "i", "+", "1.0", ")", "/", "5", ")", ",", "self", ".", "n_users", ":", "]", "=", "R", "[", "int", "(", "self", ".", "n_users", "*", "i", "/", "5.0", ")", ":", "int", "(", "self", ".", "n_users", "*", "(", "i", "+", "1.0", ")", "/", "5", ")", "]", "\n", "adj_mat", "[", "self", ".", "n_users", ":", ",", "int", "(", "self", ".", "n_users", "*", "i", "/", "5.0", ")", ":", "int", "(", "self", ".", "n_users", "*", "(", "i", "+", "1.0", ")", "/", "5", ")", "]", "=", "R", "[", "int", "(", "self", ".", "n_users", "*", "i", "/", "5.0", ")", ":", "int", "(", "self", ".", "n_users", "*", "(", "i", "+", "1.0", ")", "/", "5", ")", "]", ".", "T", "\n", "", "adj_mat", "=", "adj_mat", ".", "todok", "(", ")", "\n", "print", "(", "'already create adjacency matrix'", ",", "adj_mat", ".", "shape", ",", "time", "(", ")", "-", "t1", ")", "\n", "\n", "t2", "=", "time", "(", ")", "\n", "def", "normalized_adj_single", "(", "adj", ")", ":", "\n", "            ", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "\n", "norm_adj", "=", "d_mat_inv", ".", "dot", "(", "adj", ")", "\n", "print", "(", "'generate single-normalized adjacency matrix.'", ")", "\n", "return", "norm_adj", ".", "tocoo", "(", ")", "\n", "\n", "", "def", "check_adj_if_equal", "(", "adj", ")", ":", "\n", "            ", "dense_A", "=", "np", ".", "array", "(", "adj", ".", "todense", "(", ")", ")", "\n", "degree", "=", "np", ".", "sum", "(", "dense_A", ",", "axis", "=", "1", ",", "keepdims", "=", "False", ")", "\n", "\n", "temp", "=", "np", ".", "dot", "(", "np", ".", "diag", "(", "np", ".", "power", "(", "degree", ",", "-", "1", ")", ")", ",", "dense_A", ")", "\n", "print", "(", "'check normalized adjacency matrix whether equal to this laplacian matrix.'", ")", "\n", "return", "temp", "\n", "\n", "", "norm_adj_mat", "=", "normalized_adj_single", "(", "adj_mat", "+", "sp", ".", "eye", "(", "adj_mat", ".", "shape", "[", "0", "]", ")", ")", "\n", "mean_adj_mat", "=", "normalized_adj_single", "(", "adj_mat", ")", "\n", "\n", "print", "(", "'already normalize adjacency matrix'", ",", "time", "(", ")", "-", "t2", ")", "\n", "return", "adj_mat", ".", "tocsr", "(", ")", ",", "norm_adj_mat", ".", "tocsr", "(", ")", ",", "mean_adj_mat", ".", "tocsr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utility.load_data.Data.negative_pool": [[166, 173], ["time.time.time", "load_data.Data.train_items.keys", "print", "list", "random.choice", "time.time.time", "set", "set", "range", "range"], "methods", ["None"], ["", "def", "negative_pool", "(", "self", ")", ":", "\n", "        ", "t1", "=", "time", "(", ")", "\n", "for", "u", "in", "self", ".", "train_items", ".", "keys", "(", ")", ":", "\n", "            ", "neg_items", "=", "list", "(", "set", "(", "range", "(", "self", ".", "n_items", ")", ")", "-", "set", "(", "self", ".", "train_items", "[", "u", "]", ")", ")", "\n", "pools", "=", "[", "rd", ".", "choice", "(", "neg_items", ")", "for", "_", "in", "range", "(", "100", ")", "]", "\n", "self", ".", "neg_pools", "[", "u", "]", "=", "pools", "\n", "", "print", "(", "'refresh negative pools'", ",", "time", "(", ")", "-", "t1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utility.load_data.Data.sample": [[174, 213], ["random.sample", "list", "len", "list", "random.sample", "load_data.Data.sample.sample_pos_items_for_u"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.Data.sample", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.Data.sample"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "batch_size", "<=", "self", ".", "n_users", ":", "\n", "            ", "users", "=", "rd", ".", "sample", "(", "self", ".", "exist_users", ",", "self", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "            ", "users", "=", "[", "rd", ".", "choice", "(", "self", ".", "exist_users", ")", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", "]", "\n", "\n", "\n", "", "def", "sample_pos_items_for_u", "(", "u", ",", "num", ")", ":", "\n", "            ", "pos_items", "=", "list", "(", "self", ".", "train_items", "[", "u", "]", ")", "\n", "n_pos_items", "=", "len", "(", "pos_items", ")", "\n", "pos_batch", "=", "[", "]", "\n", "while", "True", ":", "\n", "                ", "if", "len", "(", "pos_batch", ")", "==", "num", ":", "break", "\n", "pos_id", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "n_pos_items", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "pos_i_id", "=", "pos_items", "[", "pos_id", "]", "\n", "\n", "if", "pos_i_id", "not", "in", "pos_batch", ":", "\n", "                    ", "pos_batch", ".", "append", "(", "pos_i_id", ")", "\n", "", "", "return", "pos_batch", "\n", "\n", "", "def", "sample_neg_items_for_u", "(", "u", ",", "num", ")", ":", "\n", "            ", "neg_items", "=", "[", "]", "\n", "while", "True", ":", "\n", "                ", "if", "len", "(", "neg_items", ")", "==", "num", ":", "break", "\n", "neg_id", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "n_items", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "if", "neg_id", "not", "in", "self", ".", "train_items", "[", "u", "]", "and", "neg_id", "not", "in", "neg_items", ":", "\n", "                    ", "neg_items", ".", "append", "(", "neg_id", ")", "\n", "", "", "return", "neg_items", "\n", "\n", "", "def", "sample_neg_items_for_u_from_pools", "(", "u", ",", "num", ")", ":", "\n", "            ", "neg_items", "=", "list", "(", "set", "(", "self", ".", "neg_pools", "[", "u", "]", ")", "-", "set", "(", "self", ".", "train_items", "[", "u", "]", ")", ")", "\n", "return", "rd", ".", "sample", "(", "neg_items", ",", "num", ")", "\n", "\n", "", "pos_items", ",", "neg_items", "=", "[", "]", ",", "[", "]", "\n", "for", "u", "in", "users", ":", "\n", "            ", "pos_items", "+=", "sample_pos_items_for_u", "(", "u", ",", "1", ")", "\n", "neg_items", "+=", "sample_neg_items_for_u", "(", "u", ",", "1", ")", "\n", "\n", "", "return", "users", ",", "pos_items", ",", "neg_items", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utility.load_data.Data.sample_test": [[214, 255], ["random.sample", "len", "list", "random.sample", "load_data.Data.sample.sample_pos_items_for_u"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.Data.sample", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.Data.sample"], ["", "def", "sample_test", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "batch_size", "<=", "self", ".", "n_users", ":", "\n", "            ", "users", "=", "rd", ".", "sample", "(", "self", ".", "test_set", ".", "keys", "(", ")", ",", "self", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "            ", "users", "=", "[", "rd", ".", "choice", "(", "self", ".", "test_set", ".", "keys", "(", ")", ")", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", "]", "\n", "\n", "", "def", "sample_pos_items_for_u", "(", "u", ",", "num", ")", ":", "\n", "            ", "pos_items", "=", "self", ".", "test_set", "[", "u", "]", "\n", "n_pos_items", "=", "len", "(", "pos_items", ")", "\n", "pos_batch", "=", "[", "]", "\n", "while", "True", ":", "\n", "                ", "if", "len", "(", "pos_batch", ")", "==", "num", ":", "break", "\n", "pos_id", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "n_pos_items", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "pos_i_id", "=", "pos_items", "[", "pos_id", "]", "\n", "\n", "if", "pos_i_id", "not", "in", "pos_batch", ":", "\n", "                    ", "pos_batch", ".", "append", "(", "pos_i_id", ")", "\n", "", "", "return", "pos_batch", "\n", "\n", "", "def", "sample_neg_items_for_u", "(", "u", ",", "num", ")", ":", "\n", "            ", "neg_items", "=", "[", "]", "\n", "while", "True", ":", "\n", "                ", "if", "len", "(", "neg_items", ")", "==", "num", ":", "break", "\n", "neg_id", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "n_items", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "union_set", "=", "list", "(", "self", ".", "test_set", "[", "u", "]", ")", "\n", "if", "u", "in", "self", ".", "train_items", ".", "keys", "(", ")", ":", "\n", "                    ", "union_set", "+=", "self", ".", "train_items", "[", "u", "]", "\n", "", "if", "neg_id", "not", "in", "union_set", "and", "neg_id", "not", "in", "neg_items", ":", "\n", "                    ", "neg_items", ".", "append", "(", "neg_id", ")", "\n", "", "", "return", "neg_items", "\n", "\n", "", "def", "sample_neg_items_for_u_from_pools", "(", "u", ",", "num", ")", ":", "\n", "            ", "neg_items", "=", "list", "(", "set", "(", "self", ".", "neg_pools", "[", "u", "]", ")", "-", "set", "(", "self", ".", "train_items", "[", "u", "]", ")", ")", "\n", "return", "rd", ".", "sample", "(", "neg_items", ",", "num", ")", "\n", "\n", "", "pos_items", ",", "neg_items", "=", "[", "]", ",", "[", "]", "\n", "for", "u", "in", "users", ":", "\n", "            ", "pos_items", "+=", "sample_pos_items_for_u", "(", "u", ",", "1", ")", "\n", "neg_items", "+=", "sample_neg_items_for_u", "(", "u", ",", "1", ")", "\n", "\n", "", "return", "users", ",", "pos_items", ",", "neg_items", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utility.load_data.Data.get_num_users_items": [[261, 263], ["None"], "methods", ["None"], ["", "def", "get_num_users_items", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_users", ",", "self", ".", "n_items", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utility.load_data.Data.print_statistics": [[264, 268], ["print", "print", "print"], "methods", ["None"], ["", "def", "print_statistics", "(", "self", ")", ":", "\n", "        ", "print", "(", "'n_users=%d, n_items=%d'", "%", "(", "self", ".", "n_users", ",", "self", ".", "n_items", ")", ")", "\n", "print", "(", "'n_interactions=%d'", "%", "(", "self", ".", "n_train", "+", "self", ".", "n_test", ")", ")", "\n", "print", "(", "'n_train=%d, n_test=%d, sparsity=%.5f'", "%", "(", "self", ".", "n_train", ",", "self", ".", "n_test", ",", "(", "self", ".", "n_train", "+", "self", ".", "n_test", ")", "/", "(", "self", ".", "n_users", "*", "self", ".", "n_items", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utility.load_data.Data.get_sparsity_split": [[270, 292], ["open().readlines", "enumerate", "print", "load_data.Data.create_sparsity_split", "open", "range", "print", "open", "split_state.append", "print", "split_uids.append", "len", "open.write", "open.write", "line.strip", "line.strip", "int", "line.strip().split", "str", "line.strip"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.utility.load_data.Data.create_sparsity_split"], ["", "def", "get_sparsity_split", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "split_uids", ",", "split_state", "=", "[", "]", ",", "[", "]", "\n", "lines", "=", "open", "(", "self", ".", "path", "+", "'/sparsity.split'", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "\n", "for", "idx", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "                ", "if", "idx", "%", "2", "==", "0", ":", "\n", "                    ", "split_state", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "print", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "split_uids", ".", "append", "(", "[", "int", "(", "uid", ")", "for", "uid", "in", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "]", ")", "\n", "", "", "print", "(", "'get sparsity split.'", ")", "\n", "\n", "", "except", "Exception", ":", "\n", "            ", "split_uids", ",", "split_state", "=", "self", ".", "create_sparsity_split", "(", ")", "\n", "f", "=", "open", "(", "self", ".", "path", "+", "'/sparsity.split'", ",", "'w'", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "split_state", ")", ")", ":", "\n", "                ", "f", ".", "write", "(", "split_state", "[", "idx", "]", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "' '", ".", "join", "(", "[", "str", "(", "uid", ")", "for", "uid", "in", "split_uids", "[", "idx", "]", "]", ")", "+", "'\\n'", ")", "\n", "", "print", "(", "'create sparsity split.'", ")", "\n", "\n", "", "return", "split_uids", ",", "split_state", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utility.load_data.Data.create_sparsity_split": [[295, 346], ["list", "dict", "list", "enumerate", "load_data.Data.test_set.keys", "sorted", "len", "len", "dict.keys", "user_n_iid[].append", "len", "len", "list.append", "split_state.append", "print", "list.append", "split_state.append", "print", "len", "len", "len", "dict.keys"], "methods", ["None"], ["", "def", "create_sparsity_split", "(", "self", ")", ":", "\n", "        ", "all_users_to_test", "=", "list", "(", "self", ".", "test_set", ".", "keys", "(", ")", ")", "\n", "user_n_iid", "=", "dict", "(", ")", "\n", "\n", "# generate a dictionary to store (key=n_iids, value=a list of uid).", "\n", "for", "uid", "in", "all_users_to_test", ":", "\n", "            ", "train_iids", "=", "self", ".", "train_items", "[", "uid", "]", "\n", "test_iids", "=", "self", ".", "test_set", "[", "uid", "]", "\n", "\n", "n_iids", "=", "len", "(", "train_iids", ")", "+", "len", "(", "test_iids", ")", "\n", "\n", "if", "n_iids", "not", "in", "user_n_iid", ".", "keys", "(", ")", ":", "\n", "                ", "user_n_iid", "[", "n_iids", "]", "=", "[", "uid", "]", "\n", "", "else", ":", "\n", "                ", "user_n_iid", "[", "n_iids", "]", ".", "append", "(", "uid", ")", "\n", "", "", "split_uids", "=", "list", "(", ")", "\n", "\n", "# split the whole user set into four subset.", "\n", "temp", "=", "[", "]", "\n", "count", "=", "1", "\n", "fold", "=", "4", "\n", "n_count", "=", "(", "self", ".", "n_train", "+", "self", ".", "n_test", ")", "\n", "n_rates", "=", "0", "\n", "\n", "split_state", "=", "[", "]", "\n", "for", "idx", ",", "n_iids", "in", "enumerate", "(", "sorted", "(", "user_n_iid", ")", ")", ":", "\n", "            ", "temp", "+=", "user_n_iid", "[", "n_iids", "]", "\n", "n_rates", "+=", "n_iids", "*", "len", "(", "user_n_iid", "[", "n_iids", "]", ")", "\n", "n_count", "-=", "n_iids", "*", "len", "(", "user_n_iid", "[", "n_iids", "]", ")", "\n", "\n", "if", "n_rates", ">=", "count", "*", "0.25", "*", "(", "self", ".", "n_train", "+", "self", ".", "n_test", ")", ":", "\n", "                ", "split_uids", ".", "append", "(", "temp", ")", "\n", "\n", "state", "=", "'#inter per user<=[%d], #users=[%d], #all rates=[%d]'", "%", "(", "n_iids", ",", "len", "(", "temp", ")", ",", "n_rates", ")", "\n", "split_state", ".", "append", "(", "state", ")", "\n", "print", "(", "state", ")", "\n", "\n", "temp", "=", "[", "]", "\n", "n_rates", "=", "0", "\n", "fold", "-=", "1", "\n", "\n", "", "if", "idx", "==", "len", "(", "user_n_iid", ".", "keys", "(", ")", ")", "-", "1", "or", "n_count", "==", "0", ":", "\n", "                ", "split_uids", ".", "append", "(", "temp", ")", "\n", "\n", "state", "=", "'#inter per user<=[%d], #users=[%d], #all rates=[%d]'", "%", "(", "n_iids", ",", "len", "(", "temp", ")", ",", "n_rates", ")", "\n", "split_state", ".", "append", "(", "state", ")", "\n", "print", "(", "state", ")", "\n", "\n", "\n", "\n", "", "", "return", "split_uids", ",", "split_state", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utility.load_data.Data.check": [[347, 352], ["range", "load_data.Data.train_items.__contains__", "load_data.Data.test_set.__contains__", "len", "print", "set", "set"], "methods", ["None"], ["", "def", "check", "(", "self", ")", ":", "\n", "        ", "for", "uid", "in", "range", "(", "20", ")", ":", "\n", "            ", "if", "self", ".", "train_items", ".", "__contains__", "(", "uid", ")", "and", "self", ".", "test_set", ".", "__contains__", "(", "uid", ")", ":", "\n", "                ", "if", "len", "(", "set", "(", "self", ".", "train_items", "[", "uid", "]", ")", "&", "set", "(", "self", ".", "test_set", "[", "uid", "]", ")", ")", "!=", "0", ":", "\n", "                    ", "print", "(", "uid", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.weitianxin_MACR.utility.parser.parse_args": [[10, 105], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.parse.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Run NGCF.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--weights_path'", ",", "nargs", "=", "'?'", ",", "default", "=", "''", ",", "\n", "help", "=", "'Store model path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "nargs", "=", "'?'", ",", "default", "=", "'../data/'", ",", "\n", "help", "=", "'Input data path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--proj_path'", ",", "nargs", "=", "'?'", ",", "default", "=", "''", ",", "\n", "help", "=", "'Project path.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "nargs", "=", "'?'", ",", "default", "=", "'gowalla'", ",", "\n", "help", "=", "'Choose a dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--valid_set'", ",", "nargs", "=", "'?'", ",", "default", "=", "'test'", ",", "\n", "help", "=", "'valid | test'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrain'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'0: No pretrain, -1: Pretrain with the learned embeddings, 1:Pretrain with stored models.'", ")", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Interval of evaluation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--is_norm'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Interval of evaluation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'Number of epoch.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--embed_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'Embedding size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--layer_size'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[64, 64, 64, 64]'", ",", "\n", "help", "=", "'Output sizes of every layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "\n", "help", "=", "'Batch size.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--regs'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[1e-5,1e-5,1e-2]'", ",", "\n", "help", "=", "'Regularizations.'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "\n", "help", "=", "'Learning rate.'", ")", "\n", "parser", ".", "add_argument", "(", "'--c'", ",", "type", "=", "float", ",", "default", "=", "40.0", ",", "\n", "help", "=", "'Constant Value of C.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--model_type'", ",", "nargs", "=", "'?'", ",", "default", "=", "'lightgcn'", ",", "\n", "help", "=", "'Specify the name of model (lightgcn).'", ")", "\n", "parser", ".", "add_argument", "(", "'--adj_type'", ",", "nargs", "=", "'?'", ",", "default", "=", "'pre'", ",", "\n", "help", "=", "'Specify the type of the adjacency (laplacian) matrix from {plain, norm, mean}.'", ")", "\n", "parser", ".", "add_argument", "(", "'--alg_type'", ",", "nargs", "=", "'?'", ",", "default", "=", "'lightgcn'", ",", "\n", "help", "=", "'Specify the type of the graph convolutional layer from {ngcf, gcn, gcmc}.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'0 for NAIS_prod, 1 for NAIS_concat'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--node_dropout_flag'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'0: Disable node dropout, 1: Activate node dropout'", ")", "\n", "parser", ".", "add_argument", "(", "'--node_dropout'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[0.1]'", ",", "\n", "help", "=", "'Keep probability w.r.t. node dropout (i.e., 1-dropout_ratio) for each deep layer. 1: no dropout.'", ")", "\n", "parser", ".", "add_argument", "(", "'--mess_dropout'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[0.1]'", ",", "\n", "help", "=", "'Keep probability w.r.t. message dropout (i.e., 1-dropout_ratio) for each deep layer. 1: no dropout.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--Ks'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[1,5,10,15,20,30]'", ",", "\n", "help", "=", "'Top k(s) recommend'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--save_flag'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'0: Disable model saver, 1: Activate model saver'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--test_flag'", ",", "nargs", "=", "'?'", ",", "default", "=", "'part'", ",", "\n", "help", "=", "'Specify the test type from {part, full}, indicating whether the reference is done in mini-batch'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--saveID'", ",", "nargs", "=", "'?'", ",", "default", "=", "''", ",", "\n", "help", "=", "'Specify model save path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--base'", ",", "type", "=", "float", ",", "default", "=", "-", "1.", ",", "\n", "help", "=", "'check range base.'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'log\\'s interval while training'", ")", "\n", "parser", ".", "add_argument", "(", "'--only_test'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'need train or not.'", ")", "\n", "\n", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--loss'", ",", "nargs", "=", "'?'", ",", "default", "=", "'bpr'", ",", "\n", "help", "=", "'bpr/bce.'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "\n", "help", "=", "'alpha'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "\n", "help", "=", "'alpha'", ")", "\n", "parser", ".", "add_argument", "(", "'--test'", ",", "nargs", "=", "'?'", ",", "default", "=", "'normal'", ",", "\n", "help", "=", "'test:normal | rubiboth'", ")", "\n", "parser", ".", "add_argument", "(", "'--early_stop'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'early_stop'", ")", "\n", "parser", ".", "add_argument", "(", "'--start'", ",", "type", "=", "float", ",", "default", "=", "-", "1.", ",", "\n", "help", "=", "'check c start.'", ")", "\n", "parser", ".", "add_argument", "(", "'--end'", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "\n", "help", "=", "'check c end.'", ")", "\n", "parser", ".", "add_argument", "(", "'--step'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'check c step.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.weitianxin_MACR.utility.helper.txt2list": [[9, 13], ["open", "open.readlines"], "function", ["None"], ["def", "txt2list", "(", "file_src", ")", ":", "\n", "    ", "orig_file", "=", "open", "(", "file_src", ",", "\"r\"", ")", "\n", "lines", "=", "orig_file", ".", "readlines", "(", ")", "\n", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utility.helper.ensureDir": [[14, 18], ["os.path.dirname", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "ensureDir", "(", "dir_path", ")", ":", "\n", "    ", "d", "=", "os", ".", "path", ".", "dirname", "(", "dir_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "d", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utility.helper.uni2str": [[19, 21], ["str().replace().strip", "str().replace", "str", "unicode_str.encode"], "function", ["None"], ["", "", "def", "uni2str", "(", "unicode_str", ")", ":", "\n", "    ", "return", "str", "(", "unicode_str", ".", "encode", "(", "'ascii'", ",", "'ignore'", ")", ")", ".", "replace", "(", "'\\n'", ",", "''", ")", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utility.helper.hasNumbers": [[22, 24], ["bool", "re.search"], "function", ["None"], ["", "def", "hasNumbers", "(", "inputString", ")", ":", "\n", "    ", "return", "bool", "(", "re", ".", "search", "(", "r'\\d'", ",", "inputString", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utility.helper.delMultiChar": [[25, 29], ["inputString.replace.replace"], "function", ["None"], ["", "def", "delMultiChar", "(", "inputString", ",", "chars", ")", ":", "\n", "    ", "for", "ch", "in", "chars", ":", "\n", "        ", "inputString", "=", "inputString", ".", "replace", "(", "ch", ",", "''", ")", "\n", "", "return", "inputString", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utility.helper.merge_two_dicts": [[30, 34], ["x.copy", "x.copy.update"], "function", ["None"], ["", "def", "merge_two_dicts", "(", "x", ",", "y", ")", ":", "\n", "    ", "z", "=", "x", ".", "copy", "(", ")", "# start with x's keys and values", "\n", "z", ".", "update", "(", "y", ")", "# modifies z with y's keys and values & returns None", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.utility.helper.early_stopping": [[35, 51], ["print"], "function", ["None"], ["", "def", "early_stopping", "(", "log_value", ",", "best_value", ",", "stopping_step", ",", "expected_order", "=", "'acc'", ",", "flag_step", "=", "100", ")", ":", "\n", "# early stopping strategy:", "\n", "    ", "assert", "expected_order", "in", "[", "'acc'", ",", "'dec'", "]", "\n", "\n", "if", "(", "expected_order", "==", "'acc'", "and", "log_value", ">=", "best_value", ")", "or", "(", "expected_order", "==", "'dec'", "and", "log_value", "<=", "best_value", ")", ":", "\n", "        ", "stopping_step", "=", "0", "\n", "best_value", "=", "log_value", "\n", "", "else", ":", "\n", "        ", "stopping_step", "+=", "1", "\n", "\n", "", "if", "stopping_step", ">=", "flag_step", ":", "\n", "        ", "print", "(", "\"Early stopping is trigger at step: {} log:{}\"", ".", "format", "(", "flag_step", ",", "log_value", ")", ")", "\n", "should_stop", "=", "True", "\n", "", "else", ":", "\n", "        ", "should_stop", "=", "False", "\n", "", "return", "best_value", ",", "stopping_step", ",", "should_stop", "\n", "", ""]], "home.repos.pwc.inspect_result.weitianxin_MACR.utility.batch_test.test": [[26, 163], ["numpy.sort", "max", "len", "range", "range", "numpy.concatenate", "range", "numpy.mean", "numpy.reshape", "numpy.reshape", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array", "range", "set", "enumerate", "evaluator.eval_score_matrix_foldout", "len", "np.concatenate.append", "range", "len", "len", "len", "range", "list", "dict", "heapq.nlargest", "open", "f.write", "enumerate", "sess.run", "sess.run", "str", "list.append", "list.append", "len", "sess.run", "sess.run", "set", "data_generator.train_items.keys", "sess.run", "sess.run", "len", "len", "len", "sess.run", "sess.run", "eval", "eval", "len", "len", "sess.run", "sess.run", "eval", "eval", "len", "len", "eval", "eval", "len", "len", "eval", "eval", "len", "len", "eval", "eval"], "function", ["home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_foldout.eval_score_matrix_foldout", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run"], ["def", "test", "(", "sess", ",", "model", ",", "users_to_test", ",", "drop_flag", "=", "False", ",", "train_set_flag", "=", "0", ",", "method", "=", "\"normal\"", ")", ":", "\n", "# data_generator.check()", "\n", "# B: batch size", "\n", "# N: the number of items", "\n", "    ", "top_show", "=", "np", ".", "sort", "(", "model", ".", "Ks", ")", "\n", "max_top", "=", "max", "(", "top_show", ")", "\n", "result", "=", "{", "'hr'", ":", "np", ".", "zeros", "(", "len", "(", "model", ".", "Ks", ")", ")", ",", "'recall'", ":", "np", ".", "zeros", "(", "len", "(", "model", ".", "Ks", ")", ")", ",", "'ndcg'", ":", "np", ".", "zeros", "(", "len", "(", "model", ".", "Ks", ")", ")", "}", "\n", "\n", "u_batch_size", "=", "BATCH_SIZE", "\n", "\n", "test_users", "=", "users_to_test", "\n", "n_test_users", "=", "len", "(", "test_users", ")", "\n", "n_user_batchs", "=", "n_test_users", "//", "u_batch_size", "+", "1", "\n", "\n", "count", "=", "0", "\n", "all_result", "=", "[", "]", "\n", "item_batch", "=", "range", "(", "ITEM_NUM", ")", "\n", "for", "u_batch_id", "in", "range", "(", "n_user_batchs", ")", ":", "\n", "        ", "start", "=", "u_batch_id", "*", "u_batch_size", "\n", "end", "=", "(", "u_batch_id", "+", "1", ")", "*", "u_batch_size", "\n", "\n", "user_batch", "=", "test_users", "[", "start", ":", "end", "]", "\n", "if", "method", "==", "\"normal\"", ":", "\n", "            ", "if", "drop_flag", "==", "False", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "batch_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "else", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "batch_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", ",", "\n", "model", ".", "node_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "args", ".", "layer_size", ")", ")", ",", "\n", "model", ".", "mess_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "args", ".", "layer_size", ")", ")", "}", ")", "\n", "", "", "elif", "method", "==", "'causal'", ":", "\n", "            ", "if", "drop_flag", "==", "False", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "batch_ratings_causal_c", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "else", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "batch_ratings_causal_c", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", ",", "\n", "model", ".", "node_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "args", ".", "layer_size", ")", ")", ",", "\n", "model", ".", "mess_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "args", ".", "layer_size", ")", ")", "}", ")", "\n", "", "", "elif", "method", "==", "'rubi1'", ":", "\n", "            ", "if", "drop_flag", "==", "False", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "rubi_ratings1", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "else", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "rubi_ratings1", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", ",", "\n", "model", ".", "node_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "args", ".", "layer_size", ")", ")", ",", "\n", "model", ".", "mess_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "args", ".", "layer_size", ")", ")", "}", ")", "\n", "", "", "elif", "method", "==", "'rubi2'", ":", "\n", "            ", "if", "drop_flag", "==", "False", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "rubi_ratings2", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "else", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "rubi_ratings2", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", ",", "\n", "model", ".", "node_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "args", ".", "layer_size", ")", ")", ",", "\n", "model", ".", "mess_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "args", ".", "layer_size", ")", ")", "}", ")", "\n", "\n", "", "", "elif", "method", "==", "'rubiboth'", ":", "\n", "            ", "if", "drop_flag", "==", "False", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "rubi_ratings_both", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "else", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "rubi_ratings_both", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", ",", "\n", "model", ".", "node_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "args", ".", "layer_size", ")", ")", ",", "\n", "model", ".", "mess_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "args", ".", "layer_size", ")", ")", "}", ")", "\n", "", "", "item_acc_list", "=", "{", "}", "\n", "rate_batch", "=", "np", ".", "array", "(", "rate_batch", ")", "# (B, N)", "\n", "for", "i", "in", "range", "(", "data_generator", ".", "n_items", ")", ":", "\n", "            ", "item_acc_list", "[", "i", "]", "=", "0", "\n", "", "all_items", "=", "set", "(", "range", "(", "data_generator", ".", "n_items", ")", ")", "\n", "for", "i", ",", "rate_user", "in", "enumerate", "(", "rate_batch", ")", ":", "\n", "            ", "user", "=", "user_batch", "[", "i", "]", "\n", "user_pos_test", "=", "data_generator", ".", "test_set", "[", "user", "]", "\n", "try", ":", "\n", "                ", "train_items", "=", "data_generator", ".", "train_items", "[", "user", "]", "\n", "", "except", ":", "\n", "                ", "train_items", "=", "[", "]", "\n", "", "test_items", "=", "list", "(", "all_items", "-", "set", "(", "train_items", ")", ")", "\n", "item_score", "=", "dict", "(", ")", "\n", "for", "i", "in", "test_items", ":", "\n", "                ", "item_score", "[", "i", "]", "=", "rate_user", "[", "i", "]", "\n", "", "K_max_item_score", "=", "heapq", ".", "nlargest", "(", "20", ",", "item_score", ",", "key", "=", "item_score", ".", "get", ")", "\n", "for", "i", "in", "K_max_item_score", ":", "\n", "                ", "if", "i", "in", "user_pos_test", ":", "\n", "                    ", "item_acc_list", "[", "i", "]", "+=", "1", "/", "len", "(", "data_generator", ".", "test_item_set", "[", "i", "]", ")", "\n", "", "", "", "with", "open", "(", "\"Lightgcn_macr.txt\"", ",", "\"w+\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "item_acc_list", ")", ")", "\n", "", "test_items", "=", "[", "]", "\n", "if", "train_set_flag", "==", "0", ":", "\n", "            ", "for", "user", "in", "user_batch", ":", "\n", "                ", "set_list", "=", "data_generator", ".", "test_set", "[", "user", "]", "\n", "test_items", ".", "append", "(", "set_list", ")", "# (B, #test_items)", "\n", "\n", "# set the ranking scores of training items to -inf,", "\n", "# then the training items will be sorted at the end of the ranking list.    ", "\n", "", "for", "idx", ",", "user", "in", "enumerate", "(", "user_batch", ")", ":", "\n", "                ", "if", "user", "in", "data_generator", ".", "train_items", ".", "keys", "(", ")", ":", "\n", "                    ", "train_items_off", "=", "data_generator", ".", "train_items", "[", "user", "]", "\n", "", "else", ":", "\n", "                    ", "train_items_off", "=", "[", "]", "\n", "", "rate_batch", "[", "idx", "]", "[", "train_items_off", "]", "=", "-", "np", ".", "inf", "\n", "", "", "else", ":", "\n", "            ", "for", "user", "in", "user_batch", ":", "\n", "# test_items.append(data_generator.train_items[user])", "\n", "                ", "test_items", ".", "append", "(", "data_generator", ".", "test_set", "[", "user", "]", ")", "\n", "", "", "batch_result", "=", "eval_score_matrix_foldout", "(", "rate_batch", ",", "test_items", ",", "max_top", ")", "#(B,k*metric_num), max_top= 20", "\n", "count", "+=", "len", "(", "batch_result", ")", "\n", "all_result", ".", "append", "(", "batch_result", ")", "\n", "\n", "\n", "", "assert", "count", "==", "n_test_users", "\n", "all_result", "=", "np", ".", "concatenate", "(", "all_result", ",", "axis", "=", "0", ")", "\n", "# print(all_result.shape)", "\n", "# x, y = all_result.shape", "\n", "for", "i", "in", "range", "(", "all_result", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "2", "*", "max_top", ",", "3", "*", "max_top", ")", ":", "\n", "# print(all_result[i][j-1])", "\n", "            ", "if", "all_result", "[", "i", "]", "[", "j", "-", "max_top", "]", "!=", "0", ":", "\n", "                ", "all_result", "[", "i", "]", "[", "j", "]", "=", "1.0", "\n", "", "else", ":", "\n", "                ", "all_result", "[", "i", "]", "[", "j", "]", "=", "0.0", "\n", "# print(all_result)", "\n", "", "", "", "final_result", "=", "np", ".", "mean", "(", "all_result", ",", "axis", "=", "0", ")", "# mean", "\n", "# print(final_result)", "\n", "final_result", "=", "np", ".", "reshape", "(", "final_result", ",", "newshape", "=", "[", "5", ",", "max_top", "]", ")", "\n", "# print(final_result)", "\n", "final_result", "=", "final_result", "[", ":", ",", "top_show", "-", "1", "]", "\n", "# print(final_result)", "\n", "final_result", "=", "np", ".", "reshape", "(", "final_result", ",", "newshape", "=", "[", "5", ",", "len", "(", "top_show", ")", "]", ")", "\n", "# print(final_result)", "\n", "result", "[", "'hr'", "]", "+=", "final_result", "[", "2", "]", "\n", "result", "[", "'recall'", "]", "+=", "final_result", "[", "1", "]", "\n", "result", "[", "'ndcg'", "]", "+=", "final_result", "[", "3", "]", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.cpp.evaluate_foldout.eval_score_matrix_foldout": [[12, 19], ["apt_evaluate_foldout", "len", "len", "ValueError", "os.cpu_count"], "function", ["None"], ["def", "eval_score_matrix_foldout", "(", "score_matrix", ",", "test_items", ",", "top_k", "=", "20", ",", "thread_num", "=", "None", ")", ":", "\n", "    ", "if", "len", "(", "score_matrix", ")", "!=", "len", "(", "test_items", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"The lengths of score_matrix and test_items are not equal.\"", ")", "\n", "", "thread_num", "=", "(", "thread_num", "or", "(", "os", ".", "cpu_count", "(", ")", "or", "1", ")", "*", "5", ")", "\n", "results", "=", "apt_evaluate_foldout", "(", "score_matrix", ",", "test_items", ",", "top_k", ",", "thread_num", ")", "\n", "\n", "return", "results", "\n", "", ""]], "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_foldout.argmax_top_k": [[10, 13], ["heapq.nlargest", "numpy.array", "zip", "itertools.count"], "function", ["None"], ["import", "sys", "\n", "\n", "def", "eval_score_matrix_foldout", "(", "score_matrix", ",", "test_items", ",", "top_k", "=", "20", ",", "thread_num", "=", "None", ")", ":", "\n", "    ", "if", "len", "(", "score_matrix", ")", "!=", "len", "(", "test_items", ")", ":", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_foldout.precision": [[14, 18], ["numpy.cumsum", "numpy.arange", "len"], "function", ["None"], ["        ", "raise", "ValueError", "(", "\"The lengths of score_matrix and test_items are not equal.\"", ")", "\n", "", "thread_num", "=", "(", "thread_num", "or", "(", "os", ".", "cpu_count", "(", ")", "or", "1", ")", "*", "5", ")", "\n", "results", "=", "apt_evaluate_foldout", "(", "score_matrix", ",", "test_items", ",", "top_k", ",", "thread_num", ")", "\n", "\n", "return", "results", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_foldout.recall": [[20, 24], ["numpy.cumsum", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_foldout.map": [[26, 34], ["evaluate_foldout.precision", "numpy.cumsum", "len", "enumerate"], "function", ["home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_foldout.precision"], []], "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_foldout.ndcg": [[36, 51], ["len", "len", "min", "numpy.cumsum", "numpy.cumsum", "numpy.log2", "numpy.arange", "enumerate", "numpy.log2"], "function", ["None"], []], "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_foldout.hr": [[52, 57], ["numpy.cumsum"], "function", ["None"], []], "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_foldout.mrr": [[58, 67], ["enumerate", "numpy.zeros", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_foldout.eval_score_matrix_foldout": [[69, 90], ["list", "numpy.array", "evaluate_foldout.argmax_top_k", "np.array().flatten.extend", "np.array().flatten.extend", "np.array().flatten.extend", "np.array().flatten.extend", "np.array().flatten.extend", "numpy.array().flatten", "concurrent.futures.ThreadPoolExecutor", "executor.map", "evaluate_foldout.precision", "evaluate_foldout.recall", "evaluate_foldout.hr", "evaluate_foldout.ndcg", "evaluate_foldout.mrr", "range", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_loo.argmax_top_k", "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_foldout.map", "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_foldout.precision", "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_foldout.recall", "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_foldout.hr", "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_loo.ndcg", "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_loo.mrr"], []], "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_loo.argmax_top_k": [[9, 12], ["heapq.nlargest", "numpy.array", "zip", "itertools.count"], "function", ["None"], ["def", "argmax_top_k", "(", "a", ",", "top_k", "=", "50", ")", ":", "\n", "    ", "ele_idx", "=", "heapq", ".", "nlargest", "(", "top_k", ",", "zip", "(", "a", ",", "itertools", ".", "count", "(", ")", ")", ")", "\n", "return", "np", ".", "array", "(", "[", "idx", "for", "ele", ",", "idx", "in", "ele_idx", "]", ",", "dtype", "=", "np", ".", "intc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_loo.hit": [[14, 23], ["enumerate", "numpy.zeros", "len"], "function", ["None"], ["", "def", "hit", "(", "rank", ",", "ground_truth", ")", ":", "\n", "    ", "last_idx", "=", "sys", ".", "maxsize", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "rank", ")", ":", "\n", "        ", "if", "item", "==", "ground_truth", ":", "\n", "            ", "last_idx", "=", "idx", "\n", "break", "\n", "", "", "result", "=", "np", ".", "zeros", "(", "len", "(", "rank", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "result", "[", "last_idx", ":", "]", "=", "1.0", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_loo.ndcg": [[25, 34], ["enumerate", "numpy.zeros", "len", "numpy.log2"], "function", ["None"], ["", "def", "ndcg", "(", "rank", ",", "ground_truth", ")", ":", "\n", "    ", "last_idx", "=", "sys", ".", "maxsize", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "rank", ")", ":", "\n", "        ", "if", "item", "==", "ground_truth", ":", "\n", "            ", "last_idx", "=", "idx", "\n", "break", "\n", "", "", "result", "=", "np", ".", "zeros", "(", "len", "(", "rank", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "result", "[", "last_idx", ":", "]", "=", "1.0", "/", "np", ".", "log2", "(", "last_idx", "+", "2", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_loo.mrr": [[36, 45], ["enumerate", "numpy.zeros", "len"], "function", ["None"], ["", "def", "mrr", "(", "rank", ",", "ground_truth", ")", ":", "\n", "    ", "last_idx", "=", "sys", ".", "maxsize", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "rank", ")", ":", "\n", "        ", "if", "item", "==", "ground_truth", ":", "\n", "            ", "last_idx", "=", "idx", "\n", "break", "\n", "", "", "result", "=", "np", ".", "zeros", "(", "len", "(", "rank", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "result", "[", "last_idx", ":", "]", "=", "1.0", "/", "(", "last_idx", "+", "1", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_loo.eval_score_matrix_loo": [[47, 66], ["list", "numpy.array", "evaluate_loo.argmax_top_k", "np.array().flatten.extend", "np.array().flatten.extend", "np.array().flatten.extend", "numpy.array().flatten", "concurrent.futures.ThreadPoolExecutor", "executor.map", "evaluate_loo.hit", "evaluate_loo.ndcg", "evaluate_loo.mrr", "range", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_loo.argmax_top_k", "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_foldout.map", "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_loo.hit", "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_loo.ndcg", "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_loo.mrr"], ["", "def", "eval_score_matrix_loo", "(", "score_matrix", ",", "test_items", ",", "top_k", "=", "50", ",", "thread_num", "=", "None", ")", ":", "\n", "    ", "def", "_eval_one_user", "(", "idx", ")", ":", "\n", "        ", "scores", "=", "score_matrix", "[", "idx", "]", "# all scores of the test user", "\n", "test_item", "=", "test_items", "[", "idx", "]", "# all test items of the test user", "\n", "\n", "ranking", "=", "argmax_top_k", "(", "scores", ",", "top_k", ")", "# Top-K items", "\n", "result", "=", "[", "]", "\n", "result", ".", "extend", "(", "hit", "(", "ranking", ",", "test_item", ")", ")", "\n", "result", ".", "extend", "(", "ndcg", "(", "ranking", ",", "test_item", ")", ")", "\n", "result", ".", "extend", "(", "mrr", "(", "ranking", ",", "test_item", ")", ")", "\n", "\n", "result", "=", "np", ".", "array", "(", "result", ",", "dtype", "=", "np", ".", "float32", ")", ".", "flatten", "(", ")", "\n", "return", "result", "\n", "\n", "", "with", "ThreadPoolExecutor", "(", "max_workers", "=", "thread_num", ")", "as", "executor", ":", "\n", "        ", "batch_result", "=", "executor", ".", "map", "(", "_eval_one_user", ",", "range", "(", "len", "(", "test_items", ")", ")", ")", "\n", "\n", "", "result", "=", "list", "(", "batch_result", ")", "# generator to list", "\n", "return", "np", ".", "array", "(", "result", ")", "# list to ndarray", "\n", "", ""]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.Data.load_ori_data": [[26, 211], ["scipy.load_npz().tolil", "scipy.load_npz().tolil", "scipy.load_npz().tolil", "scipy.load_npz().tolil", "scipy.load_npz().tolil", "scipy.load_npz().tolil", "scipy.load_npz().tolil", "scipy.load_npz().tolil", "int", "int", "int", "range", "list", "list", "set", "set", "list", "list", "numpy.sum", "numpy.sum", "range", "range", "load_data.Data.test_user_list.keys", "load_data.Data.valid_user_list.keys", "open", "f.readlines", "set", "set", "range", "range", "list", "list", "range", "load_data.Data.train_user_list.items", "load_data.Data.test_user_list.items", "range", "scipy.load_npz", "scipy.load_npz", "scipy.load_npz", "scipy.load_npz", "scipy.load_npz", "scipy.load_npz", "scipy.load_npz", "scipy.load_npz", "numpy.sum", "numpy.sum", "line.strip().split.strip().split.strip().split", "max", "max", "len", "open", "f.readlines", "load_data.Data.valid_user_list.keys", "open", "f.readlines", "load_data.Data.test_user_list.keys", "open", "f.readlines", "open", "f.readlines", "range", "len", "len", "int", "int", "heapq.nlargest", "heapq.nlargest", "print", "len", "int", "len", "load_data.Data.train_item_list[].append", "max", "line.strip().split.strip().split.strip().split", "load_data.Data.valid_items.update", "max", "max", "len", "line.strip().split.strip().split.strip().split", "max", "max", "len", "line.strip().split.strip().split.strip().split", "load_data.Data.users.add", "max", "max", "line.strip().split.strip().split.strip().split", "max", "max", "load_data.Data.train_item_list[].append", "load_data.Data.test_item_list[].append", "range", "range", "len", "len", "len", "line.strip().split.strip().split.strip", "len", "int", "len", "set", "load_data.Data.valid_item_list[].append", "max", "len", "int", "len", "load_data.Data.test_item_list[].append", "max", "len", "int", "max", "len", "int", "max", "countTrainItem.keys", "len", "len", "len", "len", "line.strip().split.strip().split.strip", "line.strip().split.strip().split.strip", "line.strip().split.strip().split.strip", "line.strip().split.strip().split.strip", "set", "set"], "methods", ["None"], ["self", ".", "neg_pools", "=", "{", "}", "\n", "\n", "self", ".", "exist_users", "=", "[", "]", "\n", "\n", "with", "open", "(", "train_file", ")", "as", "f", ":", "\n", "            ", "for", "l", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "if", "len", "(", "l", ")", ">", "0", ":", "\n", "                    ", "l", "=", "l", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "items", "=", "[", "int", "(", "i", ")", "for", "i", "in", "l", "[", "1", ":", "]", "]", "\n", "uid", "=", "int", "(", "l", "[", "0", "]", ")", "\n", "self", ".", "exist_users", ".", "append", "(", "uid", ")", "\n", "if", "len", "(", "items", ")", "!=", "0", ":", "\n", "                        ", "self", ".", "n_items", "=", "max", "(", "self", ".", "n_items", ",", "max", "(", "items", ")", ")", "\n", "", "self", ".", "n_users", "=", "max", "(", "self", ".", "n_users", ",", "uid", ")", "\n", "self", ".", "n_train", "+=", "len", "(", "items", ")", "\n", "\n", "", "", "", "with", "open", "(", "test_file", ")", "as", "f", ":", "\n", "            ", "for", "l", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "if", "len", "(", "l", ")", ">", "0", ":", "\n", "                    ", "l", "=", "l", ".", "strip", "(", "'\\n'", ")", "\n", "try", ":", "\n", "                        ", "items", "=", "[", "int", "(", "i", ")", "for", "i", "in", "l", ".", "split", "(", "' '", ")", "[", "1", ":", "]", "]", "\n", "", "except", "Exception", ":", "\n", "                        ", "continue", "\n", "", "if", "len", "(", "items", ")", "!=", "0", ":", "\n", "                        ", "self", ".", "n_items", "=", "max", "(", "self", ".", "n_items", ",", "max", "(", "items", ")", ")", "\n", "", "self", ".", "n_test", "+=", "len", "(", "items", ")", "\n", "\n", "", "", "", "self", ".", "n_items", "+=", "1", "\n", "self", ".", "n_users", "+=", "1", "\n", "self", ".", "print_statistics", "(", ")", "\n", "self", ".", "R", "=", "sp", ".", "dok_matrix", "(", "(", "self", ".", "n_users", ",", "self", ".", "n_items", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "train_items", ",", "self", ".", "test_set", "=", "{", "}", ",", "{", "}", "\n", "self", ".", "test_item_set", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "with", "open", "(", "train_file", ")", "as", "f_train", ":", "\n", "            ", "with", "open", "(", "test_file", ")", "as", "f_test", ":", "\n", "                ", "for", "l", "in", "f_train", ".", "readlines", "(", ")", ":", "\n", "                    ", "if", "len", "(", "l", ")", "==", "0", ":", "break", "\n", "l", "=", "l", ".", "strip", "(", "'\\n'", ")", "\n", "items", "=", "[", "int", "(", "i", ")", "for", "i", "in", "l", ".", "split", "(", "' '", ")", "]", "\n", "uid", ",", "train_items", "=", "items", "[", "0", "]", ",", "items", "[", "1", ":", "]", "\n", "\n", "if", "len", "(", "train_items", ")", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "for", "i", "in", "train_items", ":", "\n", "                        ", "self", ".", "R", "[", "uid", ",", "i", "]", "=", "1.", "\n", "\n", "", "self", ".", "train_items", "[", "uid", "]", "=", "train_items", "\n", "\n", "", "for", "l", "in", "f_test", ".", "readlines", "(", ")", ":", "\n", "                    ", "if", "len", "(", "l", ")", "==", "0", ":", "break", "\n", "l", "=", "l", ".", "strip", "(", "'\\n'", ")", "\n", "try", ":", "\n", "                        ", "items", "=", "[", "int", "(", "i", ")", "for", "i", "in", "l", ".", "split", "(", "' '", ")", "]", "\n", "", "except", "Exception", ":", "\n", "                        ", "continue", "\n", "\n", "", "uid", ",", "test_items", "=", "items", "[", "0", "]", ",", "items", "[", "1", ":", "]", "\n", "\n", "if", "len", "(", "test_items", ")", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "self", ".", "test_set", "[", "uid", "]", "=", "test_items", "\n", "for", "item", "in", "test_items", ":", "\n", "                        ", "self", ".", "test_item_set", "[", "item", "]", ".", "append", "(", "uid", ")", "\n", "# for uid in range(self.n_users):", "\n", "#     if self.train_items.__contains__(uid) and self.test_set.__contains__(uid):", "\n", "#         if len(set(self.train_items[uid]) & set(self.test_set[uid]))!=0:", "\n", "#             print(uid)", "\n", "\n", "", "", "", "", "", "def", "get_adj_mat", "(", "self", ")", ":", "\n", "# try:", "\n", "#     t1 = time()", "\n", "#     adj_mat = sp.load_npz(self.path + '/s_adj_mat.npz')", "\n", "#     norm_adj_mat = sp.load_npz(self.path + '/s_norm_adj_mat.npz')", "\n", "#     mean_adj_mat = sp.load_npz(self.path + '/s_mean_adj_mat.npz')", "\n", "#     print('already load adj matrix', adj_mat.shape, time() - t1)", "\n", "\n", "# except Exception:", "\n", "        ", "adj_mat", ",", "norm_adj_mat", ",", "mean_adj_mat", "=", "self", ".", "create_adj_mat", "(", ")", "\n", "sp", ".", "save_npz", "(", "self", ".", "path", "+", "'/s_adj_mat.npz'", ",", "adj_mat", ")", "\n", "sp", ".", "save_npz", "(", "self", ".", "path", "+", "'/s_norm_adj_mat.npz'", ",", "norm_adj_mat", ")", "\n", "sp", ".", "save_npz", "(", "self", ".", "path", "+", "'/s_mean_adj_mat.npz'", ",", "mean_adj_mat", ")", "\n", "\n", "# try:", "\n", "#     pre_adj_mat = sp.load_npz(self.path + '/s_pre_adj_mat.npz')", "\n", "# except Exception:", "\n", "adj_mat", "=", "adj_mat", "\n", "rowsum", "=", "np", ".", "array", "(", "adj_mat", ".", "sum", "(", "1", ")", ")", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "norm_adj", "=", "d_mat_inv", ".", "dot", "(", "adj_mat", ")", "\n", "norm_adj", "=", "norm_adj", ".", "dot", "(", "d_mat_inv", ")", "\n", "print", "(", "'generate pre adjacency matrix.'", ")", "\n", "pre_adj_mat", "=", "norm_adj", ".", "tocsr", "(", ")", "\n", "sp", ".", "save_npz", "(", "self", ".", "path", "+", "'/s_pre_adj_mat.npz'", ",", "norm_adj", ")", "\n", "\n", "return", "adj_mat", ",", "norm_adj_mat", ",", "mean_adj_mat", ",", "pre_adj_mat", "\n", "\n", "", "def", "create_adj_mat", "(", "self", ")", ":", "\n", "        ", "t1", "=", "time", "(", ")", "\n", "adj_mat", "=", "sp", ".", "dok_matrix", "(", "(", "self", ".", "n_users", "+", "self", ".", "n_items", ",", "self", ".", "n_users", "+", "self", ".", "n_items", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "adj_mat", "=", "adj_mat", ".", "tolil", "(", ")", "\n", "R", "=", "self", ".", "R", ".", "tolil", "(", ")", "\n", "# prevent memory from overflowing", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "adj_mat", "[", "int", "(", "self", ".", "n_users", "*", "i", "/", "5.0", ")", ":", "int", "(", "self", ".", "n_users", "*", "(", "i", "+", "1.0", ")", "/", "5", ")", ",", "self", ".", "n_users", ":", "]", "=", "R", "[", "int", "(", "self", ".", "n_users", "*", "i", "/", "5.0", ")", ":", "int", "(", "self", ".", "n_users", "*", "(", "i", "+", "1.0", ")", "/", "5", ")", "]", "\n", "adj_mat", "[", "self", ".", "n_users", ":", ",", "int", "(", "self", ".", "n_users", "*", "i", "/", "5.0", ")", ":", "int", "(", "self", ".", "n_users", "*", "(", "i", "+", "1.0", ")", "/", "5", ")", "]", "=", "R", "[", "int", "(", "self", ".", "n_users", "*", "i", "/", "5.0", ")", ":", "int", "(", "self", ".", "n_users", "*", "(", "i", "+", "1.0", ")", "/", "5", ")", "]", ".", "T", "\n", "", "adj_mat", "=", "adj_mat", ".", "todok", "(", ")", "\n", "print", "(", "'already create adjacency matrix'", ",", "adj_mat", ".", "shape", ",", "time", "(", ")", "-", "t1", ")", "\n", "\n", "t2", "=", "time", "(", ")", "\n", "def", "normalized_adj_single", "(", "adj", ")", ":", "\n", "            ", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "\n", "norm_adj", "=", "d_mat_inv", ".", "dot", "(", "adj", ")", "\n", "print", "(", "'generate single-normalized adjacency matrix.'", ")", "\n", "return", "norm_adj", ".", "tocoo", "(", ")", "\n", "\n", "", "def", "check_adj_if_equal", "(", "adj", ")", ":", "\n", "            ", "dense_A", "=", "np", ".", "array", "(", "adj", ".", "todense", "(", ")", ")", "\n", "degree", "=", "np", ".", "sum", "(", "dense_A", ",", "axis", "=", "1", ",", "keepdims", "=", "False", ")", "\n", "\n", "temp", "=", "np", ".", "dot", "(", "np", ".", "diag", "(", "np", ".", "power", "(", "degree", ",", "-", "1", ")", ")", ",", "dense_A", ")", "\n", "print", "(", "'check normalized adjacency matrix whether equal to this laplacian matrix.'", ")", "\n", "return", "temp", "\n", "\n", "", "norm_adj_mat", "=", "normalized_adj_single", "(", "adj_mat", "+", "sp", ".", "eye", "(", "adj_mat", ".", "shape", "[", "0", "]", ")", ")", "\n", "mean_adj_mat", "=", "normalized_adj_single", "(", "adj_mat", ")", "\n", "\n", "print", "(", "'already normalize adjacency matrix'", ",", "time", "(", ")", "-", "t2", ")", "\n", "return", "adj_mat", ".", "tocsr", "(", ")", ",", "norm_adj_mat", ".", "tocsr", "(", ")", ",", "mean_adj_mat", ".", "tocsr", "(", ")", "\n", "\n", "", "def", "negative_pool", "(", "self", ")", ":", "\n", "        ", "t1", "=", "time", "(", ")", "\n", "for", "u", "in", "self", ".", "train_items", ".", "keys", "(", ")", ":", "\n", "            ", "neg_items", "=", "list", "(", "set", "(", "range", "(", "self", ".", "n_items", ")", ")", "-", "set", "(", "self", ".", "train_items", "[", "u", "]", ")", ")", "\n", "pools", "=", "[", "rd", ".", "choice", "(", "neg_items", ")", "for", "_", "in", "range", "(", "100", ")", "]", "\n", "self", ".", "neg_pools", "[", "u", "]", "=", "pools", "\n", "", "print", "(", "'refresh negative pools'", ",", "time", "(", ")", "-", "t1", ")", "\n", "\n", "", "def", "sample", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "batch_size", "<=", "self", ".", "n_users", ":", "\n", "            ", "users", "=", "rd", ".", "sample", "(", "self", ".", "exist_users", ",", "self", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "            ", "users", "=", "[", "rd", ".", "choice", "(", "self", ".", "exist_users", ")", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", "]", "\n", "\n", "\n", "", "def", "sample_pos_items_for_u", "(", "u", ",", "num", ")", ":", "\n", "            ", "pos_items", "=", "list", "(", "self", ".", "train_items", "[", "u", "]", ")", "\n", "n_pos_items", "=", "len", "(", "pos_items", ")", "\n", "pos_batch", "=", "[", "]", "\n", "while", "True", ":", "\n", "                ", "if", "len", "(", "pos_batch", ")", "==", "num", ":", "break", "\n", "pos_id", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "n_pos_items", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "pos_i_id", "=", "pos_items", "[", "pos_id", "]", "\n", "\n", "if", "pos_i_id", "not", "in", "pos_batch", ":", "\n", "                    ", "pos_batch", ".", "append", "(", "pos_i_id", ")", "\n", "", "", "return", "pos_batch", "\n", "\n", "", "def", "sample_neg_items_for_u", "(", "u", ",", "num", ")", ":", "\n", "            ", "neg_items", "=", "[", "]", "\n", "while", "True", ":", "\n", "                ", "if", "len", "(", "neg_items", ")", "==", "num", ":", "break", "\n", "neg_id", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "n_items", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "if", "neg_id", "not", "in", "self", ".", "train_items", "[", "u", "]", "and", "neg_id", "not", "in", "neg_items", ":", "\n", "                    ", "neg_items", ".", "append", "(", "neg_id", ")", "\n", "", "", "return", "neg_items", "\n", "\n", "", "def", "sample_neg_items_for_u_from_pools", "(", "u", ",", "num", ")", ":", "\n", "            ", "neg_items", "=", "list", "(", "set", "(", "self", ".", "neg_pools", "[", "u", "]", ")", "-", "set", "(", "self", ".", "train_items", "[", "u", "]", ")", ")", "\n", "return", "rd", ".", "sample", "(", "neg_items", ",", "num", ")", "\n", "\n", "", "pos_items", ",", "neg_items", "=", "[", "]", ",", "[", "]", "\n", "for", "u", "in", "users", ":", "\n", "            ", "pos_items", "+=", "sample_pos_items_for_u", "(", "u", ",", "1", ")", "\n", "neg_items", "+=", "sample_neg_items_for_u", "(", "u", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.Data.load_imb_data": [[212, 422], ["range", "load_data.Data.train_user_list.items", "load_data.Data.test_user_list.items", "range", "list", "list.sort", "collections.defaultdict", "zip", "load_data.Data.train_item_list.items", "list", "len", "len", "int", "int", "heapq.nlargest", "heapq.nlargest", "print", "range", "len", "set", "len", "list", "list", "range", "load_data.Data.train_item_list[].append", "load_data.Data.test_item_list[].append", "range", "range", "len", "len", "len", "countTrainItem.keys", "user_num_per_cls.append", "int", "range", "range", "load_data.Data.train_user_list[].append", "load_data.Data.train_user_list.keys", "open", "json.loads", "range", "range", "len", "int", "list", "list", "list", "list", "countTrainItem.keys", "len", "len", "len", "len", "max", "user_num_per_cls.append", "user_num_per_cls.append", "f.read", "max", "load_data.Data.user_list.append", "open", "f.readlines", "open", "f.readlines", "range", "range", "open", "f.readlines", "open", "f.readlines", "range", "set", "set", "int", "int", "int", "max", "len", "line.strip().split.strip().split.strip().split", "max", "max", "line.strip().split.strip().split.strip().split", "max", "max", "line.strip().split.strip().split.strip().split", "load_data.Data.users.add", "max", "line.strip().split.strip().split.strip().split", "max", "len", "int", "max", "len", "int", "max", "len", "int", "len", "int", "line.strip().split.strip().split.strip", "line.strip().split.strip().split.strip", "line.strip().split.strip().split.strip", "line.strip().split.strip().split.strip"], "methods", ["None"], ["", "return", "users", ",", "pos_items", ",", "neg_items", "\n", "\n", "", "def", "sample_test", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "batch_size", "<=", "self", ".", "n_users", ":", "\n", "            ", "users", "=", "rd", ".", "sample", "(", "self", ".", "test_set", ".", "keys", "(", ")", ",", "self", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "            ", "users", "=", "[", "rd", ".", "choice", "(", "self", ".", "test_set", ".", "keys", "(", ")", ")", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", "]", "\n", "\n", "", "def", "sample_pos_items_for_u", "(", "u", ",", "num", ")", ":", "\n", "            ", "pos_items", "=", "self", ".", "test_set", "[", "u", "]", "\n", "n_pos_items", "=", "len", "(", "pos_items", ")", "\n", "pos_batch", "=", "[", "]", "\n", "while", "True", ":", "\n", "                ", "if", "len", "(", "pos_batch", ")", "==", "num", ":", "break", "\n", "pos_id", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "n_pos_items", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "pos_i_id", "=", "pos_items", "[", "pos_id", "]", "\n", "\n", "if", "pos_i_id", "not", "in", "pos_batch", ":", "\n", "                    ", "pos_batch", ".", "append", "(", "pos_i_id", ")", "\n", "", "", "return", "pos_batch", "\n", "\n", "", "def", "sample_neg_items_for_u", "(", "u", ",", "num", ")", ":", "\n", "            ", "neg_items", "=", "[", "]", "\n", "while", "True", ":", "\n", "                ", "if", "len", "(", "neg_items", ")", "==", "num", ":", "break", "\n", "neg_id", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "n_items", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "union_set", "=", "list", "(", "self", ".", "test_set", "[", "u", "]", ")", "\n", "if", "u", "in", "self", ".", "train_items", ".", "keys", "(", ")", ":", "\n", "                    ", "union_set", "+=", "self", ".", "train_items", "[", "u", "]", "\n", "", "if", "neg_id", "not", "in", "union_set", "and", "neg_id", "not", "in", "neg_items", ":", "\n", "                    ", "neg_items", ".", "append", "(", "neg_id", ")", "\n", "", "", "return", "neg_items", "\n", "\n", "", "def", "sample_neg_items_for_u_from_pools", "(", "u", ",", "num", ")", ":", "\n", "            ", "neg_items", "=", "list", "(", "set", "(", "self", ".", "neg_pools", "[", "u", "]", ")", "-", "set", "(", "self", ".", "train_items", "[", "u", "]", ")", ")", "\n", "return", "rd", ".", "sample", "(", "neg_items", ",", "num", ")", "\n", "\n", "", "pos_items", ",", "neg_items", "=", "[", "]", ",", "[", "]", "\n", "for", "u", "in", "users", ":", "\n", "            ", "pos_items", "+=", "sample_pos_items_for_u", "(", "u", ",", "1", ")", "\n", "neg_items", "+=", "sample_neg_items_for_u", "(", "u", ",", "1", ")", "\n", "\n", "", "return", "users", ",", "pos_items", ",", "neg_items", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "", "def", "get_num_users_items", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_users", ",", "self", ".", "n_items", "\n", "\n", "", "def", "print_statistics", "(", "self", ")", ":", "\n", "        ", "print", "(", "'n_users=%d, n_items=%d'", "%", "(", "self", ".", "n_users", ",", "self", ".", "n_items", ")", ")", "\n", "print", "(", "'n_interactions=%d'", "%", "(", "self", ".", "n_train", "+", "self", ".", "n_test", ")", ")", "\n", "print", "(", "'n_train=%d, n_test=%d, sparsity=%.5f'", "%", "(", "self", ".", "n_train", ",", "self", ".", "n_test", ",", "(", "self", ".", "n_train", "+", "self", ".", "n_test", ")", "/", "(", "self", ".", "n_users", "*", "self", ".", "n_items", ")", ")", ")", "\n", "\n", "\n", "", "def", "get_sparsity_split", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "split_uids", ",", "split_state", "=", "[", "]", ",", "[", "]", "\n", "lines", "=", "open", "(", "self", ".", "path", "+", "'/sparsity.split'", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "\n", "for", "idx", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "                ", "if", "idx", "%", "2", "==", "0", ":", "\n", "                    ", "split_state", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "print", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "split_uids", ".", "append", "(", "[", "int", "(", "uid", ")", "for", "uid", "in", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "]", ")", "\n", "", "", "print", "(", "'get sparsity split.'", ")", "\n", "\n", "", "except", "Exception", ":", "\n", "            ", "split_uids", ",", "split_state", "=", "self", ".", "create_sparsity_split", "(", ")", "\n", "f", "=", "open", "(", "self", ".", "path", "+", "'/sparsity.split'", ",", "'w'", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "split_state", ")", ")", ":", "\n", "                ", "f", ".", "write", "(", "split_state", "[", "idx", "]", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "' '", ".", "join", "(", "[", "str", "(", "uid", ")", "for", "uid", "in", "split_uids", "[", "idx", "]", "]", ")", "+", "'\\n'", ")", "\n", "", "print", "(", "'create sparsity split.'", ")", "\n", "\n", "", "return", "split_uids", ",", "split_state", "\n", "\n", "\n", "\n", "", "def", "create_sparsity_split", "(", "self", ")", ":", "\n", "        ", "all_users_to_test", "=", "list", "(", "self", ".", "test_set", ".", "keys", "(", ")", ")", "\n", "user_n_iid", "=", "dict", "(", ")", "\n", "\n", "# generate a dictionary to store (key=n_iids, value=a list of uid).", "\n", "for", "uid", "in", "all_users_to_test", ":", "\n", "            ", "train_iids", "=", "self", ".", "train_items", "[", "uid", "]", "\n", "test_iids", "=", "self", ".", "test_set", "[", "uid", "]", "\n", "\n", "n_iids", "=", "len", "(", "train_iids", ")", "+", "len", "(", "test_iids", ")", "\n", "\n", "if", "n_iids", "not", "in", "user_n_iid", ".", "keys", "(", ")", ":", "\n", "                ", "user_n_iid", "[", "n_iids", "]", "=", "[", "uid", "]", "\n", "", "else", ":", "\n", "                ", "user_n_iid", "[", "n_iids", "]", ".", "append", "(", "uid", ")", "\n", "", "", "split_uids", "=", "list", "(", ")", "\n", "\n", "# split the whole user set into four subset.", "\n", "temp", "=", "[", "]", "\n", "count", "=", "1", "\n", "fold", "=", "4", "\n", "n_count", "=", "(", "self", ".", "n_train", "+", "self", ".", "n_test", ")", "\n", "n_rates", "=", "0", "\n", "\n", "split_state", "=", "[", "]", "\n", "for", "idx", ",", "n_iids", "in", "enumerate", "(", "sorted", "(", "user_n_iid", ")", ")", ":", "\n", "            ", "temp", "+=", "user_n_iid", "[", "n_iids", "]", "\n", "n_rates", "+=", "n_iids", "*", "len", "(", "user_n_iid", "[", "n_iids", "]", ")", "\n", "n_count", "-=", "n_iids", "*", "len", "(", "user_n_iid", "[", "n_iids", "]", ")", "\n", "\n", "if", "n_rates", ">=", "count", "*", "0.25", "*", "(", "self", ".", "n_train", "+", "self", ".", "n_test", ")", ":", "\n", "                ", "split_uids", ".", "append", "(", "temp", ")", "\n", "\n", "state", "=", "'#inter per user<=[%d], #users=[%d], #all rates=[%d]'", "%", "(", "n_iids", ",", "len", "(", "temp", ")", ",", "n_rates", ")", "\n", "split_state", ".", "append", "(", "state", ")", "\n", "print", "(", "state", ")", "\n", "\n", "temp", "=", "[", "]", "\n", "n_rates", "=", "0", "\n", "fold", "-=", "1", "\n", "\n", "", "if", "idx", "==", "len", "(", "user_n_iid", ".", "keys", "(", ")", ")", "-", "1", "or", "n_count", "==", "0", ":", "\n", "                ", "split_uids", ".", "append", "(", "temp", ")", "\n", "\n", "state", "=", "'#inter per user<=[%d], #users=[%d], #all rates=[%d]'", "%", "(", "n_iids", ",", "len", "(", "temp", ")", ",", "n_rates", ")", "\n", "split_state", ".", "append", "(", "state", ")", "\n", "print", "(", "state", ")", "\n", "\n", "\n", "\n", "", "", "return", "split_uids", ",", "split_state", "\n", "\n", "", "def", "check", "(", "self", ")", ":", "\n", "        ", "for", "uid", "in", "range", "(", "20", ")", ":", "\n", "            ", "if", "self", ".", "train_items", ".", "__contains__", "(", "uid", ")", "and", "self", ".", "test_set", ".", "__contains__", "(", "uid", ")", ":", "\n", "                ", "if", "len", "(", "set", "(", "self", ".", "train_items", "[", "uid", "]", ")", "&", "set", "(", "self", ".", "test_set", "[", "uid", "]", ")", ")", "!=", "0", ":", "\n", "                    ", "print", "(", "uid", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.Data.plot_pics": [[424, 476], ["load_data.Data.train_item_list.items", "numpy.asarray", "numpy.argsort", "enumerate", "range", "load_data.Data.train_user_list.items", "numpy.asarray", "numpy.argsort", "enumerate", "range", "numpy.asarray.append", "belong.append", "len", "rate.append", "numpy.asarray.append", "userbelong.append", "len", "userrate.append", "len", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.Data.plot_fit_pic": [[477, 503], ["max", "print", "numpy.linspace", "numpy.asarray", "matplotlib.plot", "scipy.optimize.curve_fit", "scipy.optimize.curve_fit", "matplotlib.plot", "matplotlib.savefig", "range", "print", "load_data.Data.plot_fit_pic.func"], "methods", ["None"], []], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.Data.__init__": [[504, 538], ["set", "set", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "set", "set", "list", "list", "print", "load_data.Data.train_item_list.items", "print", "load_data.Data.load_ori_data", "load_data.Data.load_imb_data", "len"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.Data.load_ori_data", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.Data.load_imb_data"], []], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.Data.sample": [[543, 567], ["range", "random.sample", "len", "random.choice", "pos_items.append", "pos_items.append", "random.choice", "range", "random.choice", "neg_items.append"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.Data.sample"], []], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.Data.sample2": [[568, 588], ["len", "random.sample", "random.choice", "pos_items.append", "pos_items.append", "random.choice", "range", "random.choice", "neg_items.append"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.Data.sample"], []], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.Data.sample_test": [[589, 609], ["len", "random.sample", "random.choice", "pos_items.append", "pos_items.append", "random.choice", "range", "random.choice", "neg_items.append"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.Data.sample"], []], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.load_data.load": [[17, 23], ["os.path.join", "print", "scipy.load_npz"], "function", ["None"], ["self", ".", "batch_size", "=", "batch_size", "\n", "\n", "train_file", "=", "path", "+", "'/train.txt'", "\n", "if", "args", ".", "valid_set", "==", "\"test\"", ":", "\n", "            ", "test_file", "=", "path", "+", "'/test.txt'", "\n", "", "else", ":", "\n", "            ", "test_file", "=", "path", "+", "'/valid.txt'", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.train.compute_2i_regularization_id": [[21, 31], ["reg_ids.append", "reg_ids.append"], "function", ["None"], ["def", "compute_2i_regularization_id", "(", "items", ",", "n_items", ")", ":", "\n", "    ", "reg_ids", "=", "[", "]", "\n", "for", "x", "in", "items", ":", "\n", "        ", "if", "x", ">=", "n_items", ":", "\n", "            ", "reg_ids", ".", "append", "(", "x", "-", "n_items", ")", "\n", "# reg_ids.append(x)", "\n", "", "elif", "x", "<", "n_items", ":", "\n", "            ", "reg_ids", ".", "append", "(", "x", "+", "n_items", ")", "# Add number of products to create the 2i representation ", "\n", "\n", "", "", "return", "reg_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.train.precision_at_k": [[32, 43], ["numpy.mean", "numpy.asarray"], "function", ["None"], ["", "def", "precision_at_k", "(", "r", ",", "k", ")", ":", "\n", "    ", "\"\"\"Score is precision @ k\n    Relevance is binary (nonzero is relevant).\n    Returns:\n        Precision @ k\n    Raises:\n        ValueError: len(r) must be >= k\n    \"\"\"", "\n", "assert", "k", ">=", "1", "\n", "r", "=", "np", ".", "asarray", "(", "r", ")", "[", ":", "k", "]", "\n", "return", "np", ".", "mean", "(", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.train.dcg_at_k": [[45, 61], ["numpy.asfarray", "numpy.sum", "numpy.sum", "ValueError", "numpy.log2", "numpy.log2", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "dcg_at_k", "(", "r", ",", "k", ",", "method", "=", "1", ")", ":", "\n", "    ", "\"\"\"Score is discounted cumulative gain (dcg)\n    Relevance is positive real values.  Can use binary\n    as the previous methods.\n    Returns:\n        Discounted cumulative gain\n    \"\"\"", "\n", "r", "=", "np", ".", "asfarray", "(", "r", ")", "[", ":", "k", "]", "\n", "if", "r", ".", "size", ":", "\n", "        ", "if", "method", "==", "0", ":", "\n", "            ", "return", "r", "[", "0", "]", "+", "np", ".", "sum", "(", "r", "[", "1", ":", "]", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "r", ".", "size", "+", "1", ")", ")", ")", "\n", "", "elif", "method", "==", "1", ":", "\n", "            ", "return", "np", ".", "sum", "(", "r", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "r", ".", "size", "+", "2", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'method must be 0 or 1.'", ")", "\n", "", "", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.train.ndcg_at_k": [[63, 75], ["tp[].sum", "numpy.log2", "train.dcg_at_k", "numpy.arange", "min"], "function", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.dcg_at_k"], ["", "def", "ndcg_at_k", "(", "r", ",", "k", ",", "maxlen", ",", "method", "=", "1", ")", ":", "\n", "    ", "\"\"\"Score is normalized discounted cumulative gain (ndcg)\n    Relevance is positive real values.  Can use binary\n    as the previous methods.\n    Returns:\n        Normalized discounted cumulative gain\n    \"\"\"", "\n", "tp", "=", "1.", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "k", "+", "2", ")", ")", "\n", "dcg_max", "=", "(", "tp", "[", ":", "min", "(", "maxlen", ",", "k", ")", "]", ")", ".", "sum", "(", ")", "\n", "if", "not", "dcg_max", ":", "\n", "        ", "return", "0.", "\n", "", "return", "dcg_at_k", "(", "r", ",", "k", ",", "method", ")", "/", "dcg_max", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.train.recall_at_k": [[77, 80], ["numpy.asfarray", "numpy.sum"], "function", ["None"], ["", "def", "recall_at_k", "(", "r", ",", "k", ",", "all_pos_num", ")", ":", "\n", "    ", "r", "=", "np", ".", "asfarray", "(", "r", ")", "[", ":", "k", "]", "\n", "return", "np", ".", "sum", "(", "r", ")", "/", "all_pos_num", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.train.hit_at_k": [[82, 88], ["numpy.array", "numpy.sum"], "function", ["None"], ["", "def", "hit_at_k", "(", "r", ",", "k", ")", ":", "\n", "    ", "r", "=", "np", ".", "array", "(", "r", ")", "[", ":", "k", "]", "\n", "if", "np", ".", "sum", "(", "r", ")", ">", "0", ":", "\n", "        ", "return", "1.", "\n", "", "else", ":", "\n", "        ", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.train.ranklist_by_sorted": [[89, 105], ["dict", "max", "heapq.nlargest", "r.append", "r.append"], "function", ["None"], ["", "", "def", "ranklist_by_sorted", "(", "user_pos_test", ",", "test_items", ",", "rating", ",", "Ks", ")", ":", "\n", "    ", "item_score", "=", "dict", "(", ")", "\n", "for", "i", "in", "test_items", ":", "\n", "        ", "item_score", "[", "i", "]", "=", "rating", "[", "i", "]", "\n", "\n", "", "K_max", "=", "max", "(", "Ks", ")", "\n", "K_max_item_score", "=", "heapq", ".", "nlargest", "(", "K_max", ",", "item_score", ",", "key", "=", "item_score", ".", "get", ")", "\n", "\n", "r", "=", "[", "]", "\n", "for", "i", "in", "K_max_item_score", ":", "\n", "        ", "if", "i", "in", "user_pos_test", ":", "\n", "            ", "r", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "r", ".", "append", "(", "0", ")", "\n", "\n", "", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.train.get_performance": [[106, 118], ["precision.append", "recall.append", "ndcg.append", "hit_ratio.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "train.precision_at_k", "train.recall_at_k", "train.ndcg_at_k", "train.hit_at_k", "len", "len"], "function", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.precision_at_k", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.recall_at_k", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.ndcg_at_k", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.hit_at_k"], ["", "def", "get_performance", "(", "user_pos_test", ",", "r", ",", "Ks", ")", ":", "\n", "    ", "precision", ",", "recall", ",", "ndcg", ",", "hit_ratio", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "K", "in", "Ks", ":", "\n", "        ", "precision", ".", "append", "(", "precision_at_k", "(", "r", ",", "K", ")", ")", "#P = TP/ (TP+FP)", "\n", "recall", ".", "append", "(", "recall_at_k", "(", "r", ",", "K", ",", "len", "(", "user_pos_test", ")", ")", ")", "#R = TP/ (TP+FN)", "\n", "ndcg", ".", "append", "(", "ndcg_at_k", "(", "r", ",", "K", ",", "len", "(", "user_pos_test", ")", ")", ")", "\n", "hit_ratio", ".", "append", "(", "hit_at_k", "(", "r", ",", "K", ")", ")", "#HR = SIGMA(TP) / SIGMA(test_set)", "\n", "# print(hit_ratio)", "\n", "\n", "", "return", "{", "'recall'", ":", "np", ".", "array", "(", "recall", ")", ",", "'precision'", ":", "np", ".", "array", "(", "precision", ")", ",", "\n", "'ndcg'", ":", "np", ".", "array", "(", "ndcg", ")", ",", "'hit_ratio'", ":", "np", ".", "array", "(", "hit_ratio", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.train.test_one_user": [[119, 139], ["set", "list", "train.ranklist_by_sorted", "train.get_performance", "range", "set"], "function", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.ranklist_by_sorted", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.get_performance"], ["", "def", "test_one_user", "(", "x", ")", ":", "\n", "# user u's ratings for user u", "\n", "    ", "rating", "=", "x", "[", "0", "]", "\n", "#uid", "\n", "u", "=", "x", "[", "1", "]", "\n", "#user u's items in the training set", "\n", "try", ":", "\n", "        ", "training_items", "=", "data", ".", "train_user_list", "[", "u", "]", "\n", "", "except", "Exception", ":", "\n", "        ", "training_items", "=", "[", "]", "\n", "#user u's items in the test set", "\n", "", "user_pos_test", "=", "data", ".", "test_user_list", "[", "u", "]", "\n", "\n", "all_items", "=", "set", "(", "range", "(", "ITEM_NUM", ")", ")", "\n", "test_items", "=", "list", "(", "all_items", "-", "set", "(", "training_items", ")", ")", "\n", "\n", "#r\u4e3a\u9884\u6d4b\u547d\u4e2d\u4e0e\u5426\u7684\u96c6\u5408\uff0c0\u672a\u547d\u4e2d\uff0c1\u547d\u4e2d", "\n", "r", "=", "ranklist_by_sorted", "(", "user_pos_test", ",", "test_items", ",", "rating", ",", "Ks", ")", "\n", "\n", "return", "get_performance", "(", "user_pos_test", ",", "r", ",", "Ks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.train.valid_one_user": [[141, 161], ["set", "list", "train.ranklist_by_sorted", "train.get_performance", "range", "set"], "function", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.ranklist_by_sorted", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.get_performance"], ["", "def", "valid_one_user", "(", "x", ")", ":", "\n", "# user u's ratings for user u", "\n", "    ", "rating", "=", "x", "[", "0", "]", "\n", "#uid", "\n", "u", "=", "x", "[", "1", "]", "\n", "#user u's items in the training set", "\n", "try", ":", "\n", "        ", "training_items", "=", "data", ".", "train_user_list", "[", "u", "]", "\n", "", "except", "Exception", ":", "\n", "        ", "training_items", "=", "[", "]", "\n", "#user u's items in the test set", "\n", "", "user_pos_valid", "=", "data", ".", "valid_user_list", "[", "u", "]", "\n", "\n", "all_items", "=", "set", "(", "range", "(", "ITEM_NUM", ")", ")", "\n", "valid_items", "=", "list", "(", "all_items", "-", "set", "(", "training_items", ")", ")", "\n", "\n", "#r\u4e3a\u9884\u6d4b\u547d\u4e2d\u4e0e\u5426\u7684\u96c6\u5408\uff0c0\u672a\u547d\u4e2d\uff0c1\u547d\u4e2d", "\n", "r", "=", "ranklist_by_sorted", "(", "user_pos_valid", ",", "valid_items", ",", "rating", ",", "Ks", ")", "\n", "\n", "return", "get_performance", "(", "user_pos_valid", ",", "r", ",", "Ks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.train.test": [[162, 312], ["multiprocessing.Pool", "len", "numpy.empty", "range", "multiprocessing.Pool.close", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array", "range", "set", "enumerate", "zip", "len", "data.train_user_list.items", "len", "len", "len", "len", "numpy.zeros", "range", "list", "range", "list", "dict", "heapq.nlargest", "multiprocessing.Pool.map", "multiprocessing.Pool.map", "numpy.sum", "len", "min", "range", "range", "sess.run", "numpy.vstack", "sess.run", "sess.run", "set", "len", "sess.run", "sess.run", "len", "sess.run", "sess.run", "sess.run", "sess.run", "sess.run", "print", "exit", "sess.run", "sess.run", "sess.run", "sess.run", "sess.run", "print", "exit", "numpy.ones_like", "numpy.power"], "function", ["home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_foldout.map", "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_foldout.map", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run"], ["", "def", "test", "(", "sess", ",", "model", ",", "test_users", ",", "batch_test_flag", "=", "False", ",", "model_type", "=", "'o'", ",", "valid_set", "=", "\"test\"", ",", "item_pop_test", "=", "None", ",", "pop_exp", "=", "0", ")", ":", "\n", "\n", "    ", "result", "=", "{", "'precision'", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "'recall'", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "'ndcg'", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "'hit_ratio'", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", "}", "\n", "\n", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "cores", ")", "\n", "\n", "u_batch_size", "=", "BATCH_SIZE", "\n", "i_batch_size", "=", "BATCH_SIZE", "\n", "\n", "n_test_users", "=", "len", "(", "test_users", ")", "\n", "n_user_batchs", "=", "n_test_users", "//", "u_batch_size", "+", "1", "\n", "\n", "count", "=", "0", "\n", "\n", "\n", "total_rate", "=", "np", ".", "empty", "(", "shape", "=", "[", "0", ",", "ITEM_NUM", "]", ")", "\n", "for", "u_batch_id", "in", "range", "(", "n_user_batchs", ")", ":", "\n", "\n", "        ", "start", "=", "u_batch_id", "*", "u_batch_size", "\n", "end", "=", "(", "u_batch_id", "+", "1", ")", "*", "u_batch_size", "\n", "\n", "user_batch", "=", "test_users", "[", "start", ":", "end", "]", "\n", "\n", "if", "batch_test_flag", ":", "\n", "\n", "            ", "n_item_batchs", "=", "ITEM_NUM", "//", "i_batch_size", "+", "1", "\n", "rate_batch", "=", "np", ".", "zeros", "(", "shape", "=", "(", "len", "(", "user_batch", ")", ",", "ITEM_NUM", ")", ")", "\n", "\n", "i_count", "=", "0", "\n", "for", "i_batch_id", "in", "range", "(", "n_item_batchs", ")", ":", "\n", "                ", "i_start", "=", "i_batch_id", "*", "i_batch_size", "\n", "i_end", "=", "min", "(", "(", "i_batch_id", "+", "1", ")", "*", "i_batch_size", ",", "ITEM_NUM", ")", "\n", "\n", "item_batch", "=", "range", "(", "i_start", ",", "i_end", ")", "\n", "if", "model_type", "==", "'o'", ":", "\n", "                    ", "i_rate_batch", "=", "sess", ".", "run", "(", "model", ".", "batch_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "'c'", ":", "\n", "                    ", "i_rate_batch", "=", "sess", ".", "run", "(", "model", ".", "user_const_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "'ic'", ":", "\n", "                    ", "i_rate_batch", "=", "sess", ".", "run", "(", "model", ".", "item_const_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "'rc'", ":", "\n", "                    ", "i_rate_batch", "=", "sess", ".", "run", "(", "model", ".", "user_rand_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "'irc'", ":", "\n", "                    ", "i_rate_batch", "=", "sess", ".", "run", "(", "model", ".", "item_rand_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'model type error.'", ")", "\n", "exit", "(", ")", "\n", "\n", "", "rate_batch", "[", ":", ",", "i_start", ":", "i_end", "]", "=", "i_rate_batch", "\n", "i_count", "+=", "i_rate_batch", ".", "shape", "[", "1", "]", "\n", "\n", "", "assert", "i_count", "==", "ITEM_NUM", "\n", "\n", "", "else", ":", "\n", "            ", "item_batch", "=", "list", "(", "range", "(", "ITEM_NUM", ")", ")", "\n", "if", "model_type", "==", "'o'", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "batch_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "total_rate", "=", "np", ".", "vstack", "(", "(", "total_rate", ",", "rate_batch", ")", ")", "\n", "", "elif", "model_type", "==", "'c'", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "user_const_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "'ic'", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "item_const_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "'rc'", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "user_rand_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "'irc'", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "item_rand_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "'rubi_c'", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "rubi_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "\"direct_minus_c\"", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "direct_minus_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "'rubi_user_c'", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "rubi_ratings_userc", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "'rubi_both'", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "rubi_ratings_both", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "\"item_pop_test\"", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "rubi_ratings_both_poptest", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "# rate_batch = (rate_batch-np.min(rate_batch))*np.power(item_pop_test, pop_exp)", "\n", "rate_batch", "=", "np", ".", "ones_like", "(", "rate_batch", ")", "*", "np", ".", "power", "(", "item_pop_test", ",", "pop_exp", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'model type error.'", ")", "\n", "exit", "(", ")", "\n", "\n", "", "", "item_acc_list", "=", "{", "}", "\n", "rate_batch", "=", "np", ".", "array", "(", "rate_batch", ")", "# (B, N)", "\n", "for", "i", "in", "range", "(", "ITEM_NUM", ")", ":", "\n", "            ", "item_acc_list", "[", "i", "]", "=", "0", "\n", "", "all_items", "=", "set", "(", "range", "(", "ITEM_NUM", ")", ")", "\n", "for", "j", ",", "rate_user", "in", "enumerate", "(", "rate_batch", ")", ":", "\n", "            ", "user", "=", "user_batch", "[", "j", "]", "\n", "user_pos_test", "=", "data", ".", "test_user_list", "[", "user", "]", "\n", "train_items", "=", "data", ".", "train_user_list", "[", "user", "]", "\n", "test_items", "=", "list", "(", "all_items", "-", "set", "(", "train_items", ")", ")", "\n", "item_score", "=", "dict", "(", ")", "\n", "for", "i", "in", "test_items", ":", "\n", "                ", "item_score", "[", "i", "]", "=", "rate_user", "[", "i", "]", "\n", "", "K_max_item_score", "=", "heapq", ".", "nlargest", "(", "5", ",", "item_score", ",", "key", "=", "item_score", ".", "get", ")", "\n", "for", "i", "in", "K_max_item_score", ":", "\n", "                ", "if", "i", "in", "user_pos_test", ":", "\n", "                    ", "item_acc_list", "[", "i", "]", "+=", "1", "/", "len", "(", "data", ".", "test_item_list", "[", "i", "]", ")", "\n", "\n", "", "", "", "user_batch_rating_uid", "=", "zip", "(", "rate_batch", ",", "user_batch", ")", "\n", "if", "valid_set", "==", "\"test\"", ":", "\n", "            ", "batch_result", "=", "pool", ".", "map", "(", "test_one_user", ",", "user_batch_rating_uid", ")", "\n", "", "else", ":", "\n", "            ", "batch_result", "=", "pool", ".", "map", "(", "valid_one_user", ",", "user_batch_rating_uid", ")", "\n", "", "count", "+=", "len", "(", "batch_result", ")", "\n", "\n", "for", "re", "in", "batch_result", ":", "\n", "            ", "result", "[", "'precision'", "]", "+=", "re", "[", "'precision'", "]", "/", "n_test_users", "\n", "result", "[", "'recall'", "]", "+=", "re", "[", "'recall'", "]", "/", "n_test_users", "\n", "result", "[", "'ndcg'", "]", "+=", "re", "[", "'ndcg'", "]", "/", "n_test_users", "\n", "result", "[", "'hit_ratio'", "]", "+=", "re", "[", "'hit_ratio'", "]", "/", "n_test_users", "\n", "# print(result['hit_ratio'])", "\n", "", "", "if", "model_type", "==", "'o'", ":", "\n", "# print('zk:', total_rate.shape, np.mean(total_rate))", "\n", "        ", "rate_sum", ",", "n", "=", "0", ",", "0", "\n", "# print(test_users)", "\n", "for", "user", ",", "items", "in", "data", ".", "train_user_list", ".", "items", "(", ")", ":", "\n", "            ", "if", "user", "not", "in", "test_users", ":", "\n", "                ", "continue", "\n", "", "idx", "=", "0", "\n", "for", "u_id", "in", "test_users", ":", "\n", "                ", "if", "u_id", "==", "user", ":", "\n", "                    ", "break", "\n", "", "idx", "+=", "1", "\n", "", "rate_sum", "+=", "np", ".", "sum", "(", "total_rate", "[", "idx", ",", "items", "]", ")", "\n", "n", "+=", "len", "(", "items", ")", "\n", "# print('pos rating:', rate_sum/n*1.0)", "\n", "\n", "\n", "", "", "assert", "count", "==", "n_test_users", "\n", "pool", ".", "close", "(", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.train.early_stop": [[313, 331], ["print"], "function", ["None"], ["", "def", "early_stop", "(", "hr", ",", "ndcg", ",", "recall", ",", "precision", ",", "cur_epoch", ",", "config", ",", "stopping_step", ",", "flag_step", "=", "10", ")", ":", "\n", "    ", "if", "hr", ">=", "config", "[", "'best_hr'", "]", ":", "\n", "        ", "stopping_step", "=", "0", "\n", "config", "[", "'best_hr'", "]", "=", "hr", "\n", "config", "[", "'best_ndcg'", "]", "=", "ndcg", "\n", "config", "[", "'best_recall'", "]", "=", "recall", "\n", "config", "[", "'best_pre'", "]", "=", "precision", "\n", "config", "[", "'best_epoch'", "]", "=", "cur_epoch", "\n", "", "else", ":", "\n", "        ", "stopping_step", "+=", "1", "\n", "\n", "", "if", "stopping_step", ">=", "flag_step", ":", "\n", "        ", "print", "(", "\"Early stopping is trigger\"", ")", "\n", "should_stop", "=", "True", "\n", "", "else", ":", "\n", "        ", "should_stop", "=", "False", "\n", "\n", "", "return", "config", ",", "stopping_step", ",", "should_stop", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.parse.parse_args": [[3, 93], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.parse.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Run pop_bias.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "nargs", "=", "'?'", ",", "default", "=", "'./data/'", ",", "\n", "help", "=", "'Input data path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "nargs", "=", "'?'", ",", "default", "=", "'movielens_ml_1m'", ",", "\n", "help", "=", "'Choose a dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--source'", ",", "nargs", "=", "'?'", ",", "default", "=", "'normal'", ",", "\n", "help", "=", "'normal | dice'", ")", "\n", "parser", ".", "add_argument", "(", "'--train'", ",", "nargs", "=", "'?'", ",", "default", "=", "'normalbce'", ",", "\n", "help", "=", "'normalbce | rubibceboth'", ")", "\n", "parser", ".", "add_argument", "(", "'--test'", ",", "nargs", "=", "'?'", ",", "default", "=", "'normal'", ",", "\n", "help", "=", "'normal | rubi'", ")", "\n", "parser", ".", "add_argument", "(", "'--valid_set'", ",", "nargs", "=", "'?'", ",", "default", "=", "'test'", ",", "\n", "help", "=", "'test | valid'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "\n", "help", "=", "'alpha'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "\n", "help", "=", "'beta'", ")", "\n", "parser", ".", "add_argument", "(", "'--early_stop'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'alpha'", ")", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Interval of evaluation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'Number of epoch.'", ")", "\n", "parser", ".", "add_argument", "(", "'--embed_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'Embedding size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "\n", "help", "=", "'Batch size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--Ks'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[20]'", ",", "\n", "help", "=", "'Evaluate on Ks optimal items.'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[]'", ",", "\n", "help", "=", "'Test c on these epochs.'", ")", "\n", "parser", ".", "add_argument", "(", "'--regs'", ",", "type", "=", "float", ",", "default", "=", "1e-5", ",", "\n", "help", "=", "'Regularizations.'", ")", "\n", "parser", ".", "add_argument", "(", "'--c'", ",", "type", "=", "float", ",", "default", "=", "40.0", ",", "\n", "help", "=", "'Constant c.'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_c'", ",", "type", "=", "str", ",", "default", "=", "\"val\"", ",", "\n", "help", "=", "'val | test'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "\n", "help", "=", "'Learning rate.'", ")", "\n", "parser", ".", "add_argument", "(", "'--wd'", ",", "type", "=", "float", ",", "default", "=", "1e-5", ",", "\n", "help", "=", "'Weight decay of optimizer.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "nargs", "=", "'?'", ",", "default", "=", "'mf'", ",", "\n", "help", "=", "'Specify model type, choose from {mf, CausalE}'", ")", "\n", "parser", ".", "add_argument", "(", "'--skew'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'Use not skewed dataset.'", ")", "\n", "# parser.add_argument('--model_type', nargs='?', default='o',", "\n", "#                     help='Specify model type, choose from {o, c, ic, rc, irc}')", "\n", "parser", ".", "add_argument", "(", "'--devide_ratio'", ",", "type", "=", "float", ",", "default", "=", "0.8", ",", "\n", "help", "=", "'Train/Test.'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_flag'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'0: Disable model saver, 1: Activate model saver'", ")", "\n", "parser", ".", "add_argument", "(", "'--cuda'", ",", "type", "=", "str", ",", "default", "=", "'1'", ",", "\n", "help", "=", "'Avaiable GPU ID'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrain'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'0: no pretrain, 1: load pretrain model'", ")", "\n", "parser", ".", "add_argument", "(", "'--check_c'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'0: no checking, 1: check a range of cs'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'log\\'s interval epoch while training'", ")", "\n", "parser", ".", "add_argument", "(", "'--pop_wd'", ",", "type", "=", "float", ",", "default", "=", "0.", ",", "\n", "help", "=", "'weight decay of popularity'", ")", "\n", "parser", ".", "add_argument", "(", "'--base'", ",", "type", "=", "float", ",", "default", "=", "-", "1.", ",", "\n", "help", "=", "'check range base.'", ")", "\n", "parser", ".", "add_argument", "(", "'--cf_pen'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'Imbalance loss.'", ")", "\n", "parser", ".", "add_argument", "(", "'--saveID'", ",", "nargs", "=", "'?'", ",", "default", "=", "''", ",", "\n", "help", "=", "'Specify model save path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--user_min'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'user_min.'", ")", "\n", "parser", ".", "add_argument", "(", "'--user_max'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'user max per cls.'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_type'", ",", "nargs", "=", "'?'", ",", "default", "=", "'ori'", ",", "\n", "help", "=", "'load imbalanced data or not.'", ")", "\n", "parser", ".", "add_argument", "(", "'--imb_type'", ",", "nargs", "=", "'?'", ",", "default", "=", "'exp'", ",", "\n", "help", "=", "'imbalance type.'", ")", "\n", "parser", ".", "add_argument", "(", "'--top_ratio'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'imbalance top ratio.'", ")", "\n", "parser", ".", "add_argument", "(", "'--lam'", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "\n", "help", "=", "'lambda.'", ")", "\n", "parser", ".", "add_argument", "(", "'--check_epoch'", ",", "nargs", "=", "'?'", ",", "default", "=", "'all'", ",", "\n", "help", "=", "'check all epochs or select some or search in range.'", ")", "\n", "parser", ".", "add_argument", "(", "'--start'", ",", "type", "=", "float", ",", "default", "=", "-", "1.", ",", "\n", "help", "=", "'check c start.'", ")", "\n", "parser", ".", "add_argument", "(", "'--end'", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "\n", "help", "=", "'check c end.'", ")", "\n", "parser", ".", "add_argument", "(", "'--step'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'check c step.'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BPRMF.__init__": [[14, 102], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "model.BPRMF.init_weights", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.matmul", "model.BPRMF.create_bpr_loss", "tensorflow.get_collection", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.squeeze", "tensorflow.squeeze", "model.BPRMF.create_bpr_loss_two_brach", "tensorflow.train.AdamOptimizer().minimize", "model.BPRMF.create_bce_loss_two_brach", "tensorflow.train.AdamOptimizer().minimize", "model.BPRMF.create_bce_loss_two_brach_both", "tensorflow.train.AdamOptimizer().minimize", "model.BPRMF.create_bpr_loss2", "tensorflow.get_collection", "tensorflow.train.AdamOptimizer().minimize", "model.BPRMF.create_bce_loss2", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer().minimize", "model.BPRMF._statistics_params", "model.BPRMF.create_bce_loss", "tensorflow.train.AdamOptimizer().minimize", "model.BPRMF.create_bce_loss_userc", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "model.BPRMF.initializer", "model.BPRMF.initializer", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.train.AdamOptimizer", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE.init_weights", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE.create_bpr_loss", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BIASMF.create_bpr_loss_two_brach", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BIASMF.create_bce_loss_two_brach", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BPRMF.create_bce_loss_two_brach_both", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BIASMF.create_bpr_loss2", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BIASMF.create_bce_loss2", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE._statistics_params", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BIASMF.create_bce_loss", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BPRMF.create_bce_loss_userc"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "data_config", ")", ":", "\n", "        ", "self", ".", "n_users", "=", "data_config", "[", "'n_users'", "]", "\n", "self", ".", "n_items", "=", "data_config", "[", "'n_items'", "]", "\n", "\n", "self", ".", "decay", "=", "args", ".", "regs", "\n", "self", ".", "emb_dim", "=", "args", ".", "embed_size", "\n", "self", ".", "lr", "=", "args", ".", "lr", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "self", ".", "verbose", "=", "args", ".", "verbose", "\n", "self", ".", "c", "=", "args", ".", "c", "\n", "self", ".", "alpha", "=", "args", ".", "alpha", "\n", "self", ".", "beta", "=", "args", ".", "beta", "\n", "#placeholders", "\n", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "\n", "#initiative weights", "\n", "self", ".", "weights", "=", "self", ".", "init_weights", "(", ")", "\n", "\n", "#neting", "\n", "user_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "users", ")", "\n", "pos_item_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "pos_items", ")", "\n", "neg_item_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "neg_items", ")", "\n", "user_rand_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'user_rand_embedding'", "]", ",", "self", ".", "users", ")", "\n", "item_rand_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_rand_embedding'", "]", ",", "self", ".", "pos_items", ")", "\n", "\n", "\n", "self", ".", "const_embedding", "=", "self", ".", "weights", "[", "'c'", "]", "\n", "self", ".", "user_c", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'user_c'", "]", ",", "self", ".", "users", ")", "\n", "\n", "self", ".", "batch_ratings", "=", "tf", ".", "matmul", "(", "user_embedding", ",", "pos_item_embedding", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "#prediction, shape(user_embedding) != shape(pos_item_embedding)", "\n", "self", ".", "user_const_ratings", "=", "self", ".", "batch_ratings", "-", "tf", ".", "matmul", "(", "self", ".", "const_embedding", ",", "pos_item_embedding", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "#auto tile", "\n", "self", ".", "item_const_ratings", "=", "self", ".", "batch_ratings", "-", "tf", ".", "matmul", "(", "user_embedding", ",", "self", ".", "const_embedding", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "#auto tile", "\n", "self", ".", "user_rand_ratings", "=", "self", ".", "batch_ratings", "-", "tf", ".", "matmul", "(", "user_rand_embedding", ",", "pos_item_embedding", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "self", ".", "item_rand_ratings", "=", "self", ".", "batch_ratings", "-", "tf", ".", "matmul", "(", "user_embedding", ",", "item_rand_embedding", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "\n", "\n", "self", ".", "mf_loss", ",", "self", ".", "reg_loss", "=", "self", ".", "create_bpr_loss", "(", "user_embedding", ",", "pos_item_embedding", ",", "neg_item_embedding", ")", "\n", "self", ".", "loss", "=", "self", ".", "mf_loss", "+", "self", ".", "reg_loss", "\n", "\n", "# self.opt = tf.train.RMSPropOptimizer(learning_rate = self.lr).minimize(self.loss)", "\n", "trainable_v1", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "'parameter'", ")", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss", ",", "var_list", "=", "trainable_v1", ")", "\n", "# two branch", "\n", "self", ".", "w", "=", "tf", ".", "Variable", "(", "self", ".", "initializer", "(", "[", "self", ".", "emb_dim", ",", "1", "]", ")", ",", "name", "=", "'item_branch'", ")", "\n", "self", ".", "w_user", "=", "tf", ".", "Variable", "(", "self", ".", "initializer", "(", "[", "self", ".", "emb_dim", ",", "1", "]", ")", ",", "name", "=", "'user_branch'", ")", "\n", "self", ".", "sigmoid_yu", "=", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "w_user", ")", ")", ")", "\n", "self", ".", "sigmoid_yi", "=", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "w", ")", ")", ")", "\n", "# two branch bpr", "\n", "self", ".", "mf_loss_two", ",", "self", ".", "reg_loss_two", "=", "self", ".", "create_bpr_loss_two_brach", "(", "user_embedding", ",", "pos_item_embedding", ",", "neg_item_embedding", ")", "\n", "self", ".", "loss_two", "=", "self", ".", "mf_loss_two", "+", "self", ".", "reg_loss_two", "\n", "self", ".", "opt_two", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss_two", ")", "\n", "# two branch bce", "\n", "self", ".", "mf_loss_two_bce", ",", "self", ".", "reg_loss_two_bce", "=", "self", ".", "create_bce_loss_two_brach", "(", "user_embedding", ",", "pos_item_embedding", ",", "neg_item_embedding", ")", "\n", "self", ".", "loss_two_bce", "=", "self", ".", "mf_loss_two_bce", "+", "self", ".", "reg_loss_two_bce", "\n", "self", ".", "opt_two_bce", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss_two_bce", ")", "\n", "# two branch bce user&item", "\n", "self", ".", "mf_loss_two_bce_both", ",", "self", ".", "reg_loss_two_bce_both", "=", "self", ".", "create_bce_loss_two_brach_both", "(", "user_embedding", ",", "pos_item_embedding", ",", "neg_item_embedding", ")", "\n", "self", ".", "loss_two_bce_both", "=", "self", ".", "mf_loss_two_bce_both", "+", "self", ".", "reg_loss_two_bce_both", "\n", "self", ".", "opt_two_bce_both", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss_two_bce_both", ")", "\n", "# 2-stage training", "\n", "self", ".", "mf_loss2", ",", "self", ".", "reg_loss2", "=", "self", ".", "create_bpr_loss2", "(", "user_embedding", ",", "self", ".", "const_embedding", ",", "pos_item_embedding", ",", "neg_item_embedding", ")", "\n", "self", ".", "loss2", "=", "self", ".", "mf_loss2", "+", "self", ".", "reg_loss2", "\n", "trainable_v2", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "'const_embedding'", ")", "\n", "self", ".", "opt2", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss2", ",", "var_list", "=", "trainable_v2", ")", "\n", "\n", "\n", "self", ".", "mf_loss2_bce", ",", "self", ".", "reg_loss2_bce", "=", "self", ".", "create_bce_loss2", "(", "user_embedding", ",", "self", ".", "const_embedding", ",", "pos_item_embedding", ",", "neg_item_embedding", ")", "\n", "self", ".", "loss2_bce", "=", "self", ".", "mf_loss2_bce", "+", "self", ".", "reg_loss2_bce", "\n", "self", ".", "opt2_bce", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss2_bce", ",", "var_list", "=", "trainable_v2", ")", "\n", "# self.opt = tf.train.RMSPropOptimizer(learning_rate = self.lr).minimize(self.loss)", "\n", "\n", "\n", "self", ".", "opt3", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss2", ",", "var_list", "=", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ")", "\n", "self", ".", "opt3_bce", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss2_bce", ",", "var_list", "=", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ")", "\n", "\n", "self", ".", "_statistics_params", "(", ")", "\n", "\n", "self", ".", "mf_loss_bce", ",", "self", ".", "reg_loss_bce", "=", "self", ".", "create_bce_loss", "(", "user_embedding", ",", "pos_item_embedding", ",", "neg_item_embedding", ")", "\n", "self", ".", "loss_bce", "=", "self", ".", "mf_loss_bce", "+", "self", ".", "reg_loss_bce", "\n", "self", ".", "opt_bce", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss_bce", ")", "\n", "\n", "\n", "# user wise two branch mf", "\n", "self", ".", "mf_loss_userc_bce", ",", "self", ".", "reg_loss_userc_bce", "=", "self", ".", "create_bce_loss_userc", "(", "user_embedding", ",", "pos_item_embedding", ",", "neg_item_embedding", ")", "\n", "self", ".", "loss_userc_bce", "=", "self", ".", "mf_loss_userc_bce", "+", "self", ".", "reg_loss_userc_bce", "\n", "self", ".", "opt_userc_bce", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss_userc_bce", ",", "var_list", "=", "[", "self", ".", "weights", "[", "'user_c'", "]", "]", ")", "\n", "# self.opt = tf.train.RMSPropOptimizer(learning_rate = self.lr).minimize(self.loss)", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BPRMF.init_weights": [[107, 123], ["dict", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.Variable", "tensorflow.variable_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.variable_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.zeros", "initializer", "initializer", "initializer", "initializer", "tensorflow.zeros", "tensorflow.zeros"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "weights", "=", "dict", "(", ")", "\n", "self", ".", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "initializer", "=", "self", ".", "initializer", "\n", "with", "tf", ".", "variable_scope", "(", "'parameter'", ")", ":", "\n", "            ", "weights", "[", "'user_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'user_embedding'", ")", "\n", "weights", "[", "'item_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'item_embedding'", ")", "\n", "weights", "[", "'user_rand_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'user_rand_embedding'", ",", "trainable", "=", "False", ")", "\n", "weights", "[", "'item_rand_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'item_rand_embedding'", ",", "trainable", "=", "False", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'const_embedding'", ")", ":", "\n", "            ", "self", ".", "rubi_c", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "1", "]", ")", ",", "name", "=", "'rubi_c'", ")", "\n", "weights", "[", "'c'", "]", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "1", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'c'", ")", "\n", "\n", "", "weights", "[", "'user_c'", "]", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "self", ".", "n_users", ",", "1", "]", ")", ",", "name", "=", "'user_c_v'", ")", "\n", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BPRMF.create_bpr_loss_two_brach": [[124, 157], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.log", "tensorflow.negative", "tensorflow.log", "tensorflow.negative", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.squeeze", "tensorflow.reduce_mean", "tensorflow.nn.sigmoid", "tensorflow.reduce_mean", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid", "tensorflow.squeeze", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid"], "methods", ["None"], ["", "def", "create_bpr_loss_two_brach", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "#users, pos_items, neg_items have the same shape", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "# item stop", "\n", "\n", "\n", "# pos_items_stop = tf.stop_gradient(pos_items)", "\n", "# neg_items_stop = tf.stop_gradient(neg_items)", "\n", "pos_items_stop", "=", "pos_items", "\n", "neg_items_stop", "=", "neg_items", "\n", "\n", "self", ".", "pos_item_scores", "=", "tf", ".", "matmul", "(", "pos_items_stop", ",", "self", ".", "w", ")", "\n", "self", ".", "neg_item_scores", "=", "tf", ".", "matmul", "(", "neg_items_stop", ",", "self", ".", "w", ")", "\n", "# first branch", "\n", "pos_scores", "=", "pos_scores", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", "\n", "neg_scores", "=", "neg_scores", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "neg_item_scores", ")", "\n", "maxi", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", ")", "\n", "self", ".", "rubi_ratings", "=", "(", "self", ".", "batch_ratings", "-", "self", ".", "rubi_c", ")", "*", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", ")", "\n", "self", ".", "direct_minus_ratings", "=", "self", ".", "batch_ratings", "-", "self", ".", "rubi_c", "*", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", ")", "\n", "\n", "self", ".", "mf_loss_ori_bce", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_mean", "(", "maxi", ")", ")", "\n", "# second branch", "\n", "maxi_item", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", "-", "self", ".", "neg_item_scores", ")", ")", "\n", "self", ".", "mf_loss_item_bce", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_mean", "(", "maxi_item", ")", ")", "\n", "# unify", "\n", "mf_loss", "=", "self", ".", "mf_loss_ori_bce", "+", "self", ".", "alpha", "*", "self", ".", "mf_loss_item_bce", "\n", "# regular", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "users", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "pos_items", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_items", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "\n", "\n", "reg_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "return", "mf_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BPRMF.create_bce_loss_two_brach": [[158, 184], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.l2_loss", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid"], "methods", ["None"], ["", "def", "create_bce_loss_two_brach", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "#users, pos_items, neg_items have the same shape", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "# item score", "\n", "# pos_items_stop = tf.stop_gradient(pos_items)", "\n", "# neg_items_stop = tf.stop_gradient(neg_items)", "\n", "pos_items_stop", "=", "pos_items", "\n", "neg_items_stop", "=", "neg_items", "\n", "self", ".", "pos_item_scores", "=", "tf", ".", "matmul", "(", "pos_items_stop", ",", "self", ".", "w", ")", "\n", "self", ".", "neg_item_scores", "=", "tf", ".", "matmul", "(", "neg_items_stop", ",", "self", ".", "w", ")", "\n", "# self.rubi_ratings = (self.batch_ratings-self.rubi_c)*tf.squeeze(tf.nn.sigmoid(self.pos_item_scores))", "\n", "# self.direct_minus_ratings = self.batch_ratings-self.rubi_c*tf.squeeze(tf.nn.sigmoid(self.pos_item_scores))", "\n", "# first branch", "\n", "# fusion", "\n", "pos_scores", "=", "pos_scores", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", "\n", "neg_scores", "=", "neg_scores", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "neg_item_scores", ")", "\n", "self", ".", "mf_loss_ori", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", ")", "+", "1e-10", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "neg_scores", ")", "+", "1e-10", ")", ")", ")", "\n", "# second branch", "\n", "self", ".", "mf_loss_item", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", "+", "1e-10", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "neg_item_scores", ")", "+", "1e-10", ")", ")", ")", "\n", "# unify", "\n", "mf_loss", "=", "self", ".", "mf_loss_ori", "+", "self", ".", "alpha", "*", "self", ".", "mf_loss_item", "\n", "# regular", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "users", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "pos_items", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_items", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "reg_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "return", "mf_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BPRMF.create_bce_loss_two_brach_both": [[185, 223], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.l2_loss", "tensorflow.transpose", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid", "tensorflow.transpose", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid"], "methods", ["None"], ["", "def", "create_bce_loss_two_brach_both", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "#users, pos_items, neg_items have the same shape", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "# item score", "\n", "# pos_items_stop = tf.stop_gradient(pos_items)", "\n", "# neg_items_stop = tf.stop_gradient(neg_items)", "\n", "pos_items_stop", "=", "pos_items", "\n", "neg_items_stop", "=", "neg_items", "\n", "users_stop", "=", "users", "\n", "self", ".", "pos_item_scores", "=", "tf", ".", "matmul", "(", "pos_items_stop", ",", "self", ".", "w", ")", "\n", "self", ".", "neg_item_scores", "=", "tf", ".", "matmul", "(", "neg_items_stop", ",", "self", ".", "w", ")", "\n", "self", ".", "user_scores", "=", "tf", ".", "matmul", "(", "users_stop", ",", "self", ".", "w_user", ")", "\n", "# self.rubi_ratings_both = (self.batch_ratings-self.rubi_c)*(tf.transpose(tf.nn.sigmoid(self.pos_item_scores))+tf.nn.sigmoid(self.user_scores))", "\n", "# self.direct_minus_ratings_both = self.batch_ratings-self.rubi_c*(tf.transpose(tf.nn.sigmoid(self.pos_item_scores))+tf.nn.sigmoid(self.user_scores))", "\n", "self", ".", "rubi_ratings_both", "=", "(", "self", ".", "batch_ratings", "-", "self", ".", "rubi_c", ")", "*", "tf", ".", "transpose", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", ")", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "user_scores", ")", "\n", "self", ".", "rubi_ratings_both_poptest", "=", "self", ".", "batch_ratings", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "user_scores", ")", "\n", "self", ".", "direct_minus_ratings_both", "=", "self", ".", "batch_ratings", "-", "self", ".", "rubi_c", "*", "tf", ".", "transpose", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", ")", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "user_scores", ")", "\n", "# first branch", "\n", "# fusion", "\n", "pos_scores", "=", "pos_scores", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "user_scores", ")", "\n", "neg_scores", "=", "neg_scores", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "neg_item_scores", ")", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "user_scores", ")", "\n", "\n", "# pos_scores = pos_scores*(tf.nn.sigmoid(self.pos_item_scores)+tf.nn.sigmoid(self.user_scores))", "\n", "# neg_scores = neg_scores*(tf.nn.sigmoid(self.neg_item_scores)+tf.nn.sigmoid(self.user_scores))", "\n", "\n", "\n", "self", ".", "mf_loss_ori", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", ")", "+", "1e-10", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "neg_scores", ")", "+", "1e-10", ")", ")", ")", "\n", "# second branch", "\n", "self", ".", "mf_loss_item", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", "+", "1e-10", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "neg_item_scores", ")", "+", "1e-10", ")", ")", ")", "\n", "# third branch", "\n", "self", ".", "mf_loss_user", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "user_scores", ")", "+", "1e-10", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "user_scores", ")", "+", "1e-10", ")", ")", ")", "\n", "# unify", "\n", "mf_loss", "=", "self", ".", "mf_loss_ori", "+", "self", ".", "alpha", "*", "self", ".", "mf_loss_item", "+", "self", ".", "beta", "*", "self", ".", "mf_loss_user", "\n", "# regular", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "users", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "pos_items", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_items", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "reg_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "return", "mf_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BPRMF.create_bce_loss_userc": [[224, 250], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.squeeze", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid", "tensorflow.squeeze", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid"], "methods", ["None"], ["", "def", "create_bce_loss_userc", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "#users, pos_items, neg_items have the same shape", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "# item score", "\n", "# pos_items_stop = tf.stop_gradient(pos_items)", "\n", "# neg_items_stop = tf.stop_gradient(neg_items)", "\n", "pos_items_stop", "=", "pos_items", "\n", "neg_items_stop", "=", "neg_items", "\n", "self", ".", "pos_item_scores", "=", "tf", ".", "matmul", "(", "pos_items_stop", ",", "self", ".", "w", ")", "\n", "self", ".", "neg_item_scores", "=", "tf", ".", "matmul", "(", "neg_items_stop", ",", "self", ".", "w", ")", "\n", "self", ".", "rubi_ratings_userc", "=", "(", "self", ".", "batch_ratings", "-", "self", ".", "user_c", ")", "*", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", ")", "\n", "self", ".", "direct_minus_ratings_userc", "=", "self", ".", "batch_ratings", "-", "self", ".", "user_c", "*", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", ")", "\n", "# first branch", "\n", "# fusion", "\n", "pos_scores", "=", "(", "pos_scores", "-", "self", ".", "user_c", ")", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", "\n", "neg_scores", "=", "(", "pos_scores", "-", "self", ".", "user_c", ")", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "neg_item_scores", ")", "\n", "self", ".", "mf_loss_ori", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", ")", "+", "1e-10", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "neg_scores", ")", "+", "1e-10", ")", ")", ")", "\n", "# second branch", "\n", "self", ".", "mf_loss_item", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", "+", "1e-10", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "neg_item_scores", ")", "+", "1e-10", ")", ")", ")", "\n", "# unify", "\n", "mf_loss", "=", "self", ".", "mf_loss_ori", "#+ self.alpha*self.mf_loss_item", "\n", "# regular", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "users", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "pos_items", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_items", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "reg_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "return", "mf_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BPRMF.create_bpr_loss": [[264, 276], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.negative", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid", "tensorflow.reduce_mean", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "create_bpr_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "#users, pos_items, neg_items have the same shape", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "users", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "pos_items", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_items", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "\n", "maxi", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", ")", "\n", "\n", "mf_loss", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_mean", "(", "maxi", ")", ")", "\n", "reg_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "return", "mf_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BPRMF.create_bce_loss": [[277, 288], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.l2_loss", "tensorflow.negative", "tensorflow.negative", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.log", "tensorflow.log", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid"], "methods", ["None"], ["", "def", "create_bce_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "#users, pos_items, neg_items have the same shape", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "# first branch", "\n", "# fusion", "\n", "mf_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", ")", "+", "1e-9", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "neg_scores", ")", "+", "1e-9", ")", ")", ")", "\n", "# regular", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "users", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "pos_items", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_items", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "reg_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "return", "mf_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BPRMF.create_bpr_loss2": [[289, 301], ["tensorflow.nn.l2_loss", "tensorflow.log", "tensorflow.negative", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.nn.sigmoid", "tensorflow.reduce_mean", "tensorflow.multiply", "tensorflow.multiply"], "methods", ["None"], ["", "def", "create_bpr_loss2", "(", "self", ",", "users", ",", "const_embedding", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "-", "tf", ".", "matmul", "(", "const_embedding", ",", "pos_items", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "-", "tf", ".", "matmul", "(", "const_embedding", ",", "neg_items", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "const_embedding", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "\n", "maxi", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", ")", "\n", "\n", "mf_loss", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_mean", "(", "maxi", ")", ")", "\n", "reg_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "return", "mf_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BPRMF.create_bce_loss2": [[302, 312], ["tensorflow.nn.l2_loss", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.negative", "tensorflow.negative", "tensorflow.log", "tensorflow.log", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid"], "methods", ["None"], ["", "def", "create_bce_loss2", "(", "self", ",", "users", ",", "const_embedding", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "-", "tf", ".", "matmul", "(", "const_embedding", ",", "pos_items", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "-", "tf", ".", "matmul", "(", "const_embedding", ",", "neg_items", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "const_embedding", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "\n", "mf_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", ")", "+", "1e-9", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "neg_scores", ")", "+", "1e-9", ")", ")", ")", "\n", "reg_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "return", "mf_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BPRMF.update_c": [[313, 315], ["sess.run", "tensorflow.assign", "tensorflow.ones"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run"], ["", "def", "update_c", "(", "self", ",", "sess", ",", "c", ")", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "assign", "(", "self", ".", "rubi_c", ",", "c", "*", "tf", ".", "ones", "(", "[", "1", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BPRMF._statistics_params": [[316, 327], ["model.BPRMF.weights.values", "variable.get_shape", "print"], "methods", ["None"], ["", "def", "_statistics_params", "(", "self", ")", ":", "\n", "# number of params", "\n", "        ", "total_parameters", "=", "0", "\n", "for", "variable", "in", "self", ".", "weights", ".", "values", "(", ")", ":", "\n", "            ", "shape", "=", "variable", ".", "get_shape", "(", ")", "# shape is an array of tf.Dimension", "\n", "variable_parameters", "=", "1", "\n", "for", "dim", "in", "shape", ":", "\n", "                ", "variable_parameters", "*=", "dim", ".", "value", "\n", "", "total_parameters", "+=", "variable_parameters", "\n", "", "if", "self", ".", "verbose", ">", "0", ":", "\n", "            ", "print", "(", "\"#params: %d\"", "%", "total_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BIASMF.__init__": [[330, 403], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "model.BIASMF.init_weights", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.matmul", "model.BIASMF.create_bpr_loss", "tensorflow.get_collection", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.Variable", "model.BIASMF.create_bpr_loss_two_brach", "tensorflow.train.AdamOptimizer().minimize", "model.BIASMF.create_bce_loss_two_brach", "tensorflow.train.AdamOptimizer().minimize", "model.BIASMF.create_bpr_loss2", "tensorflow.get_collection", "tensorflow.train.AdamOptimizer().minimize", "model.BIASMF.create_bce_loss2", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer().minimize", "model.BIASMF._statistics_params", "model.BIASMF.create_bce_loss", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "model.BIASMF.initializer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE.init_weights", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE.create_bpr_loss", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BIASMF.create_bpr_loss_two_brach", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BIASMF.create_bce_loss_two_brach", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BIASMF.create_bpr_loss2", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BIASMF.create_bce_loss2", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE._statistics_params", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BIASMF.create_bce_loss"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "data_config", ")", ":", "\n", "        ", "self", ".", "n_users", "=", "data_config", "[", "'n_users'", "]", "\n", "self", ".", "n_items", "=", "data_config", "[", "'n_items'", "]", "\n", "\n", "self", ".", "decay", "=", "args", ".", "regs", "\n", "self", ".", "emb_dim", "=", "args", ".", "embed_size", "\n", "self", ".", "lr", "=", "args", ".", "lr", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "self", ".", "verbose", "=", "args", ".", "verbose", "\n", "self", ".", "c", "=", "args", ".", "c", "\n", "self", ".", "alpha", "=", "args", ".", "alpha", "\n", "#placeholders", "\n", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "\n", "#initiative weights", "\n", "self", ".", "weights", "=", "self", ".", "init_weights", "(", ")", "\n", "\n", "#neting", "\n", "user_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "users", ")", "\n", "pos_item_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "pos_items", ")", "\n", "neg_item_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "neg_items", ")", "\n", "user_rand_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'user_rand_embedding'", "]", ",", "self", ".", "users", ")", "\n", "item_rand_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_rand_embedding'", "]", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "const_embedding", "=", "self", ".", "weights", "[", "'c'", "]", "\n", "self", ".", "pos_item_bias", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_bias'", "]", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_item_bias", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_bias'", "]", ",", "self", ".", "neg_items", ")", "\n", "\n", "self", ".", "batch_ratings", "=", "tf", ".", "matmul", "(", "user_embedding", ",", "pos_item_embedding", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "#prediction, shape(user_embedding) != shape(pos_item_embedding)", "\n", "self", ".", "user_const_ratings", "=", "self", ".", "batch_ratings", "-", "tf", ".", "matmul", "(", "self", ".", "const_embedding", ",", "pos_item_embedding", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "#auto tile", "\n", "self", ".", "item_const_ratings", "=", "self", ".", "batch_ratings", "-", "tf", ".", "matmul", "(", "user_embedding", ",", "self", ".", "const_embedding", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "#auto tile", "\n", "self", ".", "user_rand_ratings", "=", "self", ".", "batch_ratings", "-", "tf", ".", "matmul", "(", "user_rand_embedding", ",", "pos_item_embedding", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "self", ".", "item_rand_ratings", "=", "self", ".", "batch_ratings", "-", "tf", ".", "matmul", "(", "user_embedding", ",", "item_rand_embedding", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "\n", "\n", "self", ".", "mf_loss", ",", "self", ".", "reg_loss", "=", "self", ".", "create_bpr_loss", "(", "user_embedding", ",", "pos_item_embedding", ",", "neg_item_embedding", ")", "\n", "self", ".", "loss", "=", "self", ".", "mf_loss", "+", "self", ".", "reg_loss", "\n", "\n", "# self.opt = tf.train.RMSPropOptimizer(learning_rate = self.lr).minimize(self.loss)", "\n", "trainable_v1", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "'parameter'", ")", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss", ",", "var_list", "=", "trainable_v1", ")", "\n", "# two branch", "\n", "self", ".", "w", "=", "tf", ".", "Variable", "(", "self", ".", "initializer", "(", "[", "self", ".", "emb_dim", ",", "1", "]", ")", ",", "name", "=", "'item_branch'", ")", "\n", "# two branch bpr", "\n", "self", ".", "mf_loss_two", ",", "self", ".", "reg_loss_two", "=", "self", ".", "create_bpr_loss_two_brach", "(", "user_embedding", ",", "pos_item_embedding", ",", "neg_item_embedding", ")", "\n", "self", ".", "loss_two", "=", "self", ".", "mf_loss_two", "+", "self", ".", "reg_loss_two", "\n", "self", ".", "opt_two", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss_two", ")", "\n", "# two branch bce", "\n", "self", ".", "mf_loss_two_bce", ",", "self", ".", "reg_loss_two_bce", "=", "self", ".", "create_bce_loss_two_brach", "(", "user_embedding", ",", "pos_item_embedding", ",", "neg_item_embedding", ")", "\n", "self", ".", "loss_two_bce", "=", "self", ".", "mf_loss_two_bce", "+", "self", ".", "reg_loss_two_bce", "\n", "self", ".", "opt_two_bce", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss_two_bce", ")", "\n", "# 2-stage training", "\n", "self", ".", "mf_loss2", ",", "self", ".", "reg_loss2", "=", "self", ".", "create_bpr_loss2", "(", "user_embedding", ",", "self", ".", "const_embedding", ",", "pos_item_embedding", ",", "neg_item_embedding", ")", "\n", "self", ".", "loss2", "=", "self", ".", "mf_loss2", "+", "self", ".", "reg_loss2", "\n", "trainable_v2", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "'const_embedding'", ")", "\n", "self", ".", "opt2", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss2", ",", "var_list", "=", "trainable_v2", ")", "\n", "\n", "\n", "self", ".", "mf_loss2_bce", ",", "self", ".", "reg_loss2_bce", "=", "self", ".", "create_bce_loss2", "(", "user_embedding", ",", "self", ".", "const_embedding", ",", "pos_item_embedding", ",", "neg_item_embedding", ")", "\n", "self", ".", "loss2_bce", "=", "self", ".", "mf_loss2_bce", "+", "self", ".", "reg_loss2_bce", "\n", "self", ".", "opt2_bce", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss2_bce", ",", "var_list", "=", "trainable_v2", ")", "\n", "# self.opt = tf.train.RMSPropOptimizer(learning_rate = self.lr).minimize(self.loss)", "\n", "\n", "\n", "self", ".", "opt3", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss2", ",", "var_list", "=", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ")", "\n", "self", ".", "opt3_bce", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss2_bce", ",", "var_list", "=", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ")", "\n", "\n", "self", ".", "_statistics_params", "(", ")", "\n", "\n", "self", ".", "mf_loss_bce", ",", "self", ".", "reg_loss_bce", "=", "self", ".", "create_bce_loss", "(", "user_embedding", ",", "pos_item_embedding", ",", "neg_item_embedding", ")", "\n", "self", ".", "loss_bce", "=", "self", ".", "mf_loss_bce", "+", "self", ".", "reg_loss_bce", "\n", "self", ".", "opt_bce", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss_bce", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BIASMF.init_weights": [[406, 420], ["dict", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.variable_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.variable_scope", "tensorflow.Variable", "tensorflow.Variable", "initializer", "initializer", "initializer", "initializer", "initializer", "tensorflow.zeros", "tensorflow.zeros"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "weights", "=", "dict", "(", ")", "\n", "self", ".", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "initializer", "=", "self", ".", "initializer", "\n", "with", "tf", ".", "variable_scope", "(", "'parameter'", ")", ":", "\n", "            ", "weights", "[", "'user_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'user_embedding'", ")", "\n", "weights", "[", "'item_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'item_embedding'", ")", "\n", "weights", "[", "'user_rand_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'user_rand_embedding'", ",", "trainable", "=", "False", ")", "\n", "weights", "[", "'item_rand_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'item_rand_embedding'", ",", "trainable", "=", "False", ")", "\n", "weights", "[", "'item_bias'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_items", "]", ")", ",", "name", "=", "'item_bias'", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'const_embedding'", ")", ":", "\n", "            ", "self", ".", "rubi_c", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "1", "]", ")", ",", "name", "=", "'rubi_c'", ")", "\n", "weights", "[", "'c'", "]", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "1", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'c'", ")", "\n", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BIASMF.create_bpr_loss_two_brach": [[421, 454], ["tensorflow.matmul", "tensorflow.matmul", "tensorflow.log", "tensorflow.negative", "tensorflow.log", "tensorflow.negative", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.squeeze", "tensorflow.reduce_mean", "tensorflow.nn.sigmoid", "tensorflow.reduce_mean", "tensorflow.nn.l2_loss", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.sigmoid", "tensorflow.squeeze", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid"], "methods", ["None"], ["", "def", "create_bpr_loss_two_brach", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "+", "self", ".", "pos_item_bias", "#users, pos_items, neg_items have the same shape", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "+", "self", ".", "neg_item_bias", "\n", "# item stop", "\n", "\n", "\n", "# pos_items_stop = tf.stop_gradient(pos_items)", "\n", "# neg_items_stop = tf.stop_gradient(neg_items)", "\n", "pos_items_stop", "=", "pos_items", "\n", "neg_items_stop", "=", "neg_items", "\n", "\n", "self", ".", "pos_item_scores", "=", "tf", ".", "matmul", "(", "pos_items_stop", ",", "self", ".", "w", ")", "\n", "self", ".", "neg_item_scores", "=", "tf", ".", "matmul", "(", "neg_items_stop", ",", "self", ".", "w", ")", "\n", "# first branch", "\n", "pos_scores", "=", "pos_scores", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", "\n", "neg_scores", "=", "neg_scores", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "neg_item_scores", ")", "\n", "maxi", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", ")", "\n", "self", ".", "rubi_ratings", "=", "(", "self", ".", "batch_ratings", "-", "self", ".", "rubi_c", ")", "*", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", ")", "\n", "self", ".", "direct_minus_ratings", "=", "self", ".", "batch_ratings", "-", "self", ".", "rubi_c", "*", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", ")", "\n", "\n", "self", ".", "mf_loss_ori_bce", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_mean", "(", "maxi", ")", ")", "\n", "# second branch", "\n", "maxi_item", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", "-", "self", ".", "neg_item_scores", ")", ")", "\n", "self", ".", "mf_loss_item_bce", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_mean", "(", "maxi_item", ")", ")", "\n", "# unify", "\n", "mf_loss", "=", "self", ".", "mf_loss_ori_bce", "+", "self", ".", "alpha", "*", "self", ".", "mf_loss_item_bce", "\n", "# regular", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "users", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "pos_items", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_items", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "\n", "\n", "reg_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "return", "mf_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BIASMF.create_bce_loss_two_brach": [[455, 481], ["tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.l2_loss", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.negative", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid"], "methods", ["None"], ["", "def", "create_bce_loss_two_brach", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "+", "self", ".", "pos_item_bias", "#users, pos_items, neg_items have the same shape", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "+", "self", ".", "neg_item_bias", "\n", "# item score", "\n", "# pos_items_stop = tf.stop_gradient(pos_items)", "\n", "# neg_items_stop = tf.stop_gradient(neg_items)", "\n", "pos_items_stop", "=", "pos_items", "\n", "neg_items_stop", "=", "neg_items", "\n", "self", ".", "pos_item_scores", "=", "tf", ".", "matmul", "(", "pos_items_stop", ",", "self", ".", "w", ")", "\n", "self", ".", "neg_item_scores", "=", "tf", ".", "matmul", "(", "neg_items_stop", ",", "self", ".", "w", ")", "\n", "# self.rubi_ratings = (self.batch_ratings-self.rubi_c)*tf.squeeze(tf.nn.sigmoid(self.pos_item_scores))", "\n", "# self.direct_minus_ratings = self.batch_ratings-self.rubi_c*tf.squeeze(tf.nn.sigmoid(self.pos_item_scores))", "\n", "# first branch", "\n", "# fusion", "\n", "pos_scores", "=", "pos_scores", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", "\n", "neg_scores", "=", "neg_scores", "*", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "neg_item_scores", ")", "\n", "self", ".", "mf_loss_ori", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", ")", "+", "1e-10", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "neg_scores", ")", "+", "1e-10", ")", ")", ")", "\n", "# second branch", "\n", "self", ".", "mf_loss_item", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "pos_item_scores", ")", "+", "1e-10", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "neg_item_scores", ")", "+", "1e-10", ")", ")", ")", "\n", "# unify", "\n", "mf_loss", "=", "self", ".", "mf_loss_ori", "+", "self", ".", "alpha", "*", "self", ".", "mf_loss_item", "\n", "# regular", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "users", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "pos_items", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_items", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "reg_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "return", "mf_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BIASMF.create_bpr_loss": [[482, 494], ["tensorflow.log", "tensorflow.negative", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid", "tensorflow.reduce_mean", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "create_bpr_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "+", "self", ".", "pos_item_bias", "#users, pos_items, neg_items have the same shape", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "+", "self", ".", "neg_item_bias", "\n", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "users", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "pos_items", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_items", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "\n", "maxi", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", ")", "\n", "\n", "mf_loss", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_mean", "(", "maxi", ")", ")", "\n", "reg_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "return", "mf_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BIASMF.create_bce_loss": [[495, 506], ["tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.l2_loss", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.negative", "tensorflow.negative", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.log", "tensorflow.log", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid"], "methods", ["None"], ["", "def", "create_bce_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "+", "self", ".", "pos_item_bias", "#users, pos_items, neg_items have the same shape", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "+", "self", ".", "neg_item_bias", "\n", "# first branch", "\n", "# fusion", "\n", "mf_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", ")", "+", "1e-9", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "neg_scores", ")", "+", "1e-9", ")", ")", ")", "\n", "# regular", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "users", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "pos_items", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_items", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "reg_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "return", "mf_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BIASMF.create_bpr_loss2": [[507, 519], ["tensorflow.nn.l2_loss", "tensorflow.log", "tensorflow.negative", "tensorflow.nn.sigmoid", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.multiply", "tensorflow.multiply"], "methods", ["None"], ["", "def", "create_bpr_loss2", "(", "self", ",", "users", ",", "const_embedding", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "-", "tf", ".", "matmul", "(", "const_embedding", ",", "pos_items", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "+", "self", ".", "pos_item_bias", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "-", "tf", ".", "matmul", "(", "const_embedding", ",", "neg_items", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "+", "self", ".", "neg_item_bias", "\n", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "const_embedding", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "\n", "maxi", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", ")", "\n", "\n", "mf_loss", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_mean", "(", "maxi", ")", ")", "\n", "reg_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "return", "mf_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BIASMF.create_bce_loss2": [[520, 530], ["tensorflow.nn.l2_loss", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.negative", "tensorflow.negative", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.log", "tensorflow.log", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid"], "methods", ["None"], ["", "def", "create_bce_loss2", "(", "self", ",", "users", ",", "const_embedding", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "-", "tf", ".", "matmul", "(", "const_embedding", ",", "pos_items", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "+", "self", ".", "pos_item_bias", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "-", "tf", ".", "matmul", "(", "const_embedding", ",", "neg_items", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "+", "self", ".", "neg_item_bias", "\n", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "const_embedding", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "\n", "mf_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "negative", "(", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", ")", "+", "1e-9", ")", ")", "+", "tf", ".", "negative", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "neg_scores", ")", "+", "1e-9", ")", ")", ")", "\n", "reg_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "return", "mf_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BIASMF.update_c": [[531, 533], ["sess.run", "tensorflow.assign", "tensorflow.ones"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run"], ["", "def", "update_c", "(", "self", ",", "sess", ",", "c", ")", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "assign", "(", "self", ".", "rubi_c", ",", "c", "*", "tf", ".", "ones", "(", "[", "1", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.BIASMF._statistics_params": [[534, 545], ["model.BIASMF.weights.values", "variable.get_shape", "print"], "methods", ["None"], ["", "def", "_statistics_params", "(", "self", ")", ":", "\n", "# number of params", "\n", "        ", "total_parameters", "=", "0", "\n", "for", "variable", "in", "self", ".", "weights", ".", "values", "(", ")", ":", "\n", "            ", "shape", "=", "variable", ".", "get_shape", "(", ")", "# shape is an array of tf.Dimension", "\n", "variable_parameters", "=", "1", "\n", "for", "dim", "in", "shape", ":", "\n", "                ", "variable_parameters", "*=", "dim", ".", "value", "\n", "", "total_parameters", "+=", "variable_parameters", "\n", "", "if", "self", ".", "verbose", ">", "0", ":", "\n", "            ", "print", "(", "\"#params: %d\"", "%", "total_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.IPS_BPRMF.__init__": [[548, 593], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "model.IPS_BPRMF.init_weights", "tensorflow.constant", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.matmul", "model.IPS_BPRMF.create_bpr_loss", "tensorflow.train.AdamOptimizer().minimize", "model.IPS_BPRMF._statistics_params", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.train.AdamOptimizer"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE.init_weights", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE.create_bpr_loss", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE._statistics_params"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "data_config", ",", "p_matrix", ")", ":", "\n", "        ", "self", ".", "n_users", "=", "data_config", "[", "'n_users'", "]", "\n", "self", ".", "n_items", "=", "data_config", "[", "'n_items'", "]", "\n", "\n", "self", ".", "decay", "=", "args", ".", "regs", "\n", "self", ".", "emb_dim", "=", "args", ".", "embed_size", "\n", "self", ".", "lr", "=", "args", ".", "lr", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "self", ".", "verbose", "=", "args", ".", "verbose", "\n", "self", ".", "c", "=", "args", ".", "c", "\n", "# self.p = p_matrix", "\n", "\n", "#placeholders", "\n", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "\n", "#initiative weights", "\n", "self", ".", "weights", "=", "self", ".", "init_weights", "(", ")", "\n", "self", ".", "p", "=", "tf", ".", "constant", "(", "value", "=", "p_matrix", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "#neting", "\n", "\n", "user_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "users", ")", "\n", "pos_item_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "pos_items", ")", "\n", "neg_item_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "neg_items", ")", "\n", "self", ".", "pos_item_p", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "p", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_item_p", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "p", ",", "self", ".", "neg_items", ")", "\n", "user_rand_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'user_rand_embedding'", "]", ",", "self", ".", "users", ")", "\n", "item_rand_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_rand_embedding'", "]", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "const_embedding", "=", "self", ".", "weights", "[", "'const_embedding'", "]", "\n", "\n", "self", ".", "batch_ratings", "=", "tf", ".", "matmul", "(", "user_embedding", ",", "pos_item_embedding", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "#prediction, shape(user_embedding) != shape(pos_item_embedding)", "\n", "self", ".", "user_const_ratings", "=", "self", ".", "batch_ratings", "-", "tf", ".", "matmul", "(", "self", ".", "const_embedding", ",", "pos_item_embedding", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "#auto tile", "\n", "self", ".", "item_const_ratings", "=", "self", ".", "batch_ratings", "-", "tf", ".", "matmul", "(", "user_embedding", ",", "self", ".", "const_embedding", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "#auto tile", "\n", "self", ".", "user_rand_ratings", "=", "self", ".", "batch_ratings", "-", "tf", ".", "matmul", "(", "user_rand_embedding", ",", "pos_item_embedding", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "self", ".", "item_rand_ratings", "=", "self", ".", "batch_ratings", "-", "tf", ".", "matmul", "(", "user_embedding", ",", "item_rand_embedding", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "\n", "\n", "self", ".", "mf_loss", ",", "self", ".", "reg_loss", "=", "self", ".", "create_bpr_loss", "(", "user_embedding", ",", "pos_item_embedding", ",", "neg_item_embedding", ",", "self", ".", "pos_item_p", ",", "self", ".", "neg_item_p", ")", "\n", "self", ".", "loss", "=", "self", ".", "mf_loss", "+", "self", ".", "reg_loss", "\n", "\n", "# self.opt = tf.train.RMSPropOptimizer(learning_rate = self.lr).minimize(self.loss)", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "self", ".", "_statistics_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.IPS_BPRMF.init_weights": [[596, 605], ["dict", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.ones"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "weights", "=", "dict", "(", ")", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "weights", "[", "'user_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'user_embedding'", ")", "\n", "weights", "[", "'item_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'item_embedding'", ")", "\n", "weights", "[", "'user_rand_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'user_rand_embedding'", ",", "trainable", "=", "False", ")", "\n", "weights", "[", "'item_rand_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'item_rand_embedding'", ",", "trainable", "=", "False", ")", "\n", "weights", "[", "'const_embedding'", "]", "=", "tf", ".", "Variable", "(", "self", ".", "c", "*", "tf", ".", "ones", "(", "[", "1", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'const_embedding'", ",", "trainable", "=", "False", ")", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.IPS_BPRMF.create_bpr_loss": [[607, 624], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.divide", "tensorflow.log", "tensorflow.negative", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid", "tensorflow.reduce_mean", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.divide", "tensorflow.divide"], "methods", ["None"], ["", "def", "create_bpr_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ",", "pos_item_p", ",", "neg_item_p", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "#users, pos_items, neg_items have the same shape", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "self", ".", "temp1", "=", "pos_scores", "\n", "self", ".", "temp2", "=", "pos_item_p", "\n", "self", ".", "temp3", "=", "tf", ".", "divide", "(", "pos_scores", ",", "pos_item_p", ")", "\n", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "users", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "pos_items", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_items", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "\n", "# maxi = tf.log(tf.nn.sigmoid(pos_scores - neg_scores))", "\n", "maxi", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "divide", "(", "pos_scores", ",", "pos_item_p", ")", "-", "tf", ".", "divide", "(", "neg_scores", ",", "neg_item_p", ")", ")", ")", "\n", "# tf.divide(pos_scores, pos_item_p) - tf.divide(neg_scores, neg_item_p)", "\n", "\n", "mf_loss", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_mean", "(", "maxi", ")", ")", "\n", "reg_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "return", "mf_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.IPS_BPRMF._statistics_params": [[625, 636], ["model.IPS_BPRMF.weights.values", "variable.get_shape", "print"], "methods", ["None"], ["", "def", "_statistics_params", "(", "self", ")", ":", "\n", "# number of params", "\n", "        ", "total_parameters", "=", "0", "\n", "for", "variable", "in", "self", ".", "weights", ".", "values", "(", ")", ":", "\n", "            ", "shape", "=", "variable", ".", "get_shape", "(", ")", "# shape is an array of tf.Dimension", "\n", "variable_parameters", "=", "1", "\n", "for", "dim", "in", "shape", ":", "\n", "                ", "variable_parameters", "*=", "dim", ".", "value", "\n", "", "total_parameters", "+=", "variable_parameters", "\n", "", "if", "self", ".", "verbose", ">", "0", ":", "\n", "            ", "print", "(", "\"#params: %d\"", "%", "total_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.IPS_BPRMF.update_c": [[637, 639], ["sess.run", "tensorflow.assign", "tensorflow.ones"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run"], ["", "", "def", "update_c", "(", "self", ",", "sess", ",", "c", ")", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "assign", "(", "self", ".", "const_embedding", ",", "c", "*", "tf", ".", "ones", "(", "[", "1", ",", "self", ".", "emb_dim", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE.__init__": [[641, 678], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "model.CausalE.init_weights", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.stop_gradient", "tensorflow.layers.dense", "tensorflow.matmul", "model.CausalE.create_bpr_loss", "tensorflow.train.AdamOptimizer().minimize", "model.CausalE._statistics_params", "tensorflow.nn.embedding_lookup", "tensorflow.train.AdamOptimizer"], "methods", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE.init_weights", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE.create_bpr_loss", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE._statistics_params"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "data_config", ")", ":", "\n", "        ", "self", ".", "n_users", "=", "data_config", "[", "'n_users'", "]", "\n", "self", ".", "n_items", "=", "data_config", "[", "'n_items'", "]", "\n", "\n", "self", ".", "decay", "=", "args", ".", "regs", "\n", "self", ".", "emb_dim", "=", "args", ".", "embed_size", "\n", "self", ".", "lr", "=", "args", ".", "lr", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "self", ".", "verbose", "=", "args", ".", "verbose", "\n", "self", ".", "cf_pen", "=", "args", ".", "cf_pen", "\n", "self", ".", "cf_loss", "=", "0", "\n", "\n", "#placeholders", "\n", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "reg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "\n", "#initiative weights", "\n", "self", ".", "weights", "=", "self", ".", "init_weights", "(", ")", "\n", "\n", "#neting", "\n", "user_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "users", ")", "\n", "pos_item_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "pos_items", ")", "\n", "neg_item_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "neg_items", ")", "\n", "item_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "items", ")", "\n", "control_embedding", "=", "tf", ".", "stop_gradient", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "reg_items", ")", ")", "\n", "self", ".", "i_pred", "=", "tf", ".", "layers", ".", "dense", "(", ")", "\n", "self", ".", "batch_ratings", "=", "tf", ".", "matmul", "(", "user_embedding", ",", "pos_item_embedding", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "#prediction, shape(user_embedding) != shape(pos_item_embedding)", "\n", "\n", "self", ".", "mf_loss", ",", "self", ".", "reg_loss", ",", "self", ".", "cf_loss", "=", "self", ".", "create_bpr_loss", "(", "user_embedding", ",", "pos_item_embedding", ",", "neg_item_embedding", ",", "item_embedding", ",", "control_embedding", ")", "\n", "self", ".", "loss", "=", "self", ".", "mf_loss", "+", "self", ".", "reg_loss", "+", "self", ".", "cf_loss", "\n", "\n", "# self.opt = tf.train.RMSPropOptimizer(learning_rate = self.lr).minimize(self.loss)", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "self", ".", "_statistics_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE.init_weights": [[681, 688], ["dict", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.Variable", "tensorflow.Variable", "model.CausalE.initializer", "model.CausalE.initializer"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "weights", "=", "dict", "(", ")", "\n", "self", ".", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "weights", "[", "'user_embedding'", "]", "=", "tf", ".", "Variable", "(", "self", ".", "initializer", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'user_embedding'", ")", "\n", "weights", "[", "'item_embedding'", "]", "=", "tf", ".", "Variable", "(", "self", ".", "initializer", "(", "[", "self", ".", "n_items", "*", "2", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'item_embedding'", ")", "\n", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE.create_bpr_loss": [[689, 706], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.negative", "tensorflow.sqrt", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.square", "tensorflow.subtract", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize"], "methods", ["None"], ["", "def", "create_bpr_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ",", "item_embed", ",", "control_embed", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "#users, pos_items, neg_items have the same shape", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "users", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "pos_items", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_items", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "\n", "maxi", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", ")", "\n", "\n", "mf_loss", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_mean", "(", "maxi", ")", ")", "\n", "reg_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "\n", "#counter factual loss", "\n", "cf_loss", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "tf", ".", "subtract", "(", "tf", ".", "nn", ".", "l2_normalize", "(", "item_embed", ",", "axis", "=", "1", ")", ",", "tf", ".", "nn", ".", "l2_normalize", "(", "control_embed", ",", "axis", "=", "0", ")", ")", ")", ")", ")", "\n", "cf_loss", "=", "cf_loss", "*", "self", ".", "cf_pen", "#/ self.batch_size", "\n", "\n", "return", "mf_loss", ",", "reg_loss", ",", "cf_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.model.CausalE._statistics_params": [[707, 718], ["model.CausalE.weights.values", "variable.get_shape", "print"], "methods", ["None"], ["", "def", "_statistics_params", "(", "self", ")", ":", "\n", "# number of params", "\n", "        ", "total_parameters", "=", "0", "\n", "for", "variable", "in", "self", ".", "weights", ".", "values", "(", ")", ":", "\n", "            ", "shape", "=", "variable", ".", "get_shape", "(", ")", "# shape is an array of tf.Dimension", "\n", "variable_parameters", "=", "1", "\n", "for", "dim", "in", "shape", ":", "\n", "                ", "variable_parameters", "*=", "dim", ".", "value", "\n", "", "total_parameters", "+=", "variable_parameters", "\n", "", "if", "self", ".", "verbose", ">", "0", ":", "\n", "            ", "print", "(", "\"#params: %d\"", "%", "total_parameters", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.compute_2i_regularization_id": [[21, 31], ["reg_ids.append", "reg_ids.append"], "function", ["None"], ["def", "compute_2i_regularization_id", "(", "items", ",", "n_items", ")", ":", "\n", "    ", "reg_ids", "=", "[", "]", "\n", "for", "x", "in", "items", ":", "\n", "        ", "if", "x", ">=", "n_items", ":", "\n", "            ", "reg_ids", ".", "append", "(", "x", "-", "n_items", ")", "\n", "# reg_ids.append(x)", "\n", "", "elif", "x", "<", "n_items", ":", "\n", "            ", "reg_ids", ".", "append", "(", "x", "+", "n_items", ")", "# Add number of products to create the 2i representation ", "\n", "\n", "", "", "return", "reg_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.precision_at_k": [[32, 43], ["numpy.mean", "numpy.asarray"], "function", ["None"], ["", "def", "precision_at_k", "(", "r", ",", "k", ")", ":", "\n", "    ", "\"\"\"Score is precision @ k\n    Relevance is binary (nonzero is relevant).\n    Returns:\n        Precision @ k\n    Raises:\n        ValueError: len(r) must be >= k\n    \"\"\"", "\n", "assert", "k", ">=", "1", "\n", "r", "=", "np", ".", "asarray", "(", "r", ")", "[", ":", "k", "]", "\n", "return", "np", ".", "mean", "(", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.dcg_at_k": [[45, 61], ["numpy.asfarray", "numpy.sum", "numpy.sum", "ValueError", "numpy.log2", "numpy.log2", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "dcg_at_k", "(", "r", ",", "k", ",", "method", "=", "1", ")", ":", "\n", "    ", "\"\"\"Score is discounted cumulative gain (dcg)\n    Relevance is positive real values.  Can use binary\n    as the previous methods.\n    Returns:\n        Discounted cumulative gain\n    \"\"\"", "\n", "r", "=", "np", ".", "asfarray", "(", "r", ")", "[", ":", "k", "]", "\n", "if", "r", ".", "size", ":", "\n", "        ", "if", "method", "==", "0", ":", "\n", "            ", "return", "r", "[", "0", "]", "+", "np", ".", "sum", "(", "r", "[", "1", ":", "]", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "r", ".", "size", "+", "1", ")", ")", ")", "\n", "", "elif", "method", "==", "1", ":", "\n", "            ", "return", "np", ".", "sum", "(", "r", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "r", ".", "size", "+", "2", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'method must be 0 or 1.'", ")", "\n", "", "", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.ndcg_at_k": [[63, 75], ["tp[].sum", "numpy.log2", "tune.dcg_at_k", "numpy.arange", "min"], "function", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.dcg_at_k"], ["", "def", "ndcg_at_k", "(", "r", ",", "k", ",", "maxlen", ",", "method", "=", "1", ")", ":", "\n", "    ", "\"\"\"Score is normalized discounted cumulative gain (ndcg)\n    Relevance is positive real values.  Can use binary\n    as the previous methods.\n    Returns:\n        Normalized discounted cumulative gain\n    \"\"\"", "\n", "tp", "=", "1.", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "k", "+", "2", ")", ")", "\n", "dcg_max", "=", "(", "tp", "[", ":", "min", "(", "maxlen", ",", "k", ")", "]", ")", ".", "sum", "(", ")", "\n", "if", "not", "dcg_max", ":", "\n", "        ", "return", "0.", "\n", "", "return", "dcg_at_k", "(", "r", ",", "k", ",", "method", ")", "/", "dcg_max", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.recall_at_k": [[77, 80], ["numpy.asfarray", "numpy.sum"], "function", ["None"], ["", "def", "recall_at_k", "(", "r", ",", "k", ",", "all_pos_num", ")", ":", "\n", "    ", "r", "=", "np", ".", "asfarray", "(", "r", ")", "[", ":", "k", "]", "\n", "return", "np", ".", "sum", "(", "r", ")", "/", "all_pos_num", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.hit_at_k": [[82, 88], ["numpy.array", "numpy.sum"], "function", ["None"], ["", "def", "hit_at_k", "(", "r", ",", "k", ")", ":", "\n", "    ", "r", "=", "np", ".", "array", "(", "r", ")", "[", ":", "k", "]", "\n", "if", "np", ".", "sum", "(", "r", ")", ">", "0", ":", "\n", "        ", "return", "1.", "\n", "", "else", ":", "\n", "        ", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.ranklist_by_sorted": [[89, 105], ["dict", "max", "heapq.nlargest", "r.append", "r.append"], "function", ["None"], ["", "", "def", "ranklist_by_sorted", "(", "user_pos_test", ",", "test_items", ",", "rating", ",", "Ks", ")", ":", "\n", "    ", "item_score", "=", "dict", "(", ")", "\n", "for", "i", "in", "test_items", ":", "\n", "        ", "item_score", "[", "i", "]", "=", "rating", "[", "i", "]", "\n", "\n", "", "K_max", "=", "max", "(", "Ks", ")", "\n", "K_max_item_score", "=", "heapq", ".", "nlargest", "(", "K_max", ",", "item_score", ",", "key", "=", "item_score", ".", "get", ")", "\n", "\n", "r", "=", "[", "]", "\n", "for", "i", "in", "K_max_item_score", ":", "\n", "        ", "if", "i", "in", "user_pos_test", ":", "\n", "            ", "r", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "r", ".", "append", "(", "0", ")", "\n", "\n", "", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.get_performance": [[106, 118], ["precision.append", "recall.append", "ndcg.append", "hit_ratio.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "tune.precision_at_k", "tune.recall_at_k", "tune.ndcg_at_k", "tune.hit_at_k", "len", "len"], "function", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.precision_at_k", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.recall_at_k", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.ndcg_at_k", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.hit_at_k"], ["", "def", "get_performance", "(", "user_pos_test", ",", "r", ",", "Ks", ")", ":", "\n", "    ", "precision", ",", "recall", ",", "ndcg", ",", "hit_ratio", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "K", "in", "Ks", ":", "\n", "        ", "precision", ".", "append", "(", "precision_at_k", "(", "r", ",", "K", ")", ")", "#P = TP/ (TP+FP)", "\n", "recall", ".", "append", "(", "recall_at_k", "(", "r", ",", "K", ",", "len", "(", "user_pos_test", ")", ")", ")", "#R = TP/ (TP+FN)", "\n", "ndcg", ".", "append", "(", "ndcg_at_k", "(", "r", ",", "K", ",", "len", "(", "user_pos_test", ")", ")", ")", "\n", "hit_ratio", ".", "append", "(", "hit_at_k", "(", "r", ",", "K", ")", ")", "#HR = SIGMA(TP) / SIGMA(test_set)", "\n", "# print(hit_ratio)", "\n", "\n", "", "return", "{", "'recall'", ":", "np", ".", "array", "(", "recall", ")", ",", "'precision'", ":", "np", ".", "array", "(", "precision", ")", ",", "\n", "'ndcg'", ":", "np", ".", "array", "(", "ndcg", ")", ",", "'hit_ratio'", ":", "np", ".", "array", "(", "hit_ratio", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.test_one_user": [[119, 139], ["set", "list", "tune.ranklist_by_sorted", "tune.get_performance", "range", "set"], "function", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.ranklist_by_sorted", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.get_performance"], ["", "def", "test_one_user", "(", "x", ")", ":", "\n", "# user u's ratings for user u", "\n", "    ", "rating", "=", "x", "[", "0", "]", "\n", "#uid", "\n", "u", "=", "x", "[", "1", "]", "\n", "#user u's items in the training set", "\n", "try", ":", "\n", "        ", "training_items", "=", "data", ".", "train_user_list", "[", "u", "]", "\n", "", "except", "Exception", ":", "\n", "        ", "training_items", "=", "[", "]", "\n", "#user u's items in the test set", "\n", "", "user_pos_test", "=", "data", ".", "test_user_list", "[", "u", "]", "\n", "\n", "all_items", "=", "set", "(", "range", "(", "ITEM_NUM", ")", ")", "\n", "test_items", "=", "list", "(", "all_items", "-", "set", "(", "training_items", ")", ")", "\n", "\n", "#r\u4e3a\u9884\u6d4b\u547d\u4e2d\u4e0e\u5426\u7684\u96c6\u5408\uff0c0\u672a\u547d\u4e2d\uff0c1\u547d\u4e2d", "\n", "r", "=", "ranklist_by_sorted", "(", "user_pos_test", ",", "test_items", ",", "rating", ",", "Ks", ")", "\n", "\n", "return", "get_performance", "(", "user_pos_test", ",", "r", ",", "Ks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.valid_one_user": [[141, 161], ["set", "list", "tune.ranklist_by_sorted", "tune.get_performance", "range", "set"], "function", ["home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.ranklist_by_sorted", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.get_performance"], ["", "def", "valid_one_user", "(", "x", ")", ":", "\n", "# user u's ratings for user u", "\n", "    ", "rating", "=", "x", "[", "0", "]", "\n", "#uid", "\n", "u", "=", "x", "[", "1", "]", "\n", "#user u's items in the training set", "\n", "try", ":", "\n", "        ", "training_items", "=", "data", ".", "train_user_list", "[", "u", "]", "\n", "", "except", "Exception", ":", "\n", "        ", "training_items", "=", "[", "]", "\n", "#user u's items in the test set", "\n", "", "user_pos_valid", "=", "data", ".", "valid_user_list", "[", "u", "]", "\n", "\n", "all_items", "=", "set", "(", "range", "(", "ITEM_NUM", ")", ")", "\n", "valid_items", "=", "list", "(", "all_items", "-", "set", "(", "training_items", ")", ")", "\n", "\n", "#r\u4e3a\u9884\u6d4b\u547d\u4e2d\u4e0e\u5426\u7684\u96c6\u5408\uff0c0\u672a\u547d\u4e2d\uff0c1\u547d\u4e2d", "\n", "r", "=", "ranklist_by_sorted", "(", "user_pos_valid", ",", "valid_items", ",", "rating", ",", "Ks", ")", "\n", "\n", "return", "get_performance", "(", "user_pos_valid", ",", "r", ",", "Ks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.test": [[162, 312], ["multiprocessing.Pool", "len", "numpy.empty", "range", "multiprocessing.Pool.close", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array", "range", "set", "enumerate", "zip", "len", "data.train_user_list.items", "len", "len", "len", "len", "numpy.zeros", "range", "list", "range", "list", "dict", "heapq.nlargest", "multiprocessing.Pool.map", "multiprocessing.Pool.map", "numpy.sum", "len", "min", "range", "range", "sess.run", "numpy.vstack", "sess.run", "sess.run", "set", "len", "sess.run", "sess.run", "len", "sess.run", "sess.run", "sess.run", "sess.run", "sess.run", "print", "exit", "sess.run", "sess.run", "sess.run", "sess.run", "sess.run", "print", "exit", "numpy.ones_like", "numpy.power"], "function", ["home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_foldout.map", "home.repos.pwc.inspect_result.weitianxin_MACR.python.evaluate_foldout.map", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.weitianxin_MACR.macr_lightgcn.LightGCN.train_thread_test.run"], ["", "def", "test", "(", "sess", ",", "model", ",", "test_users", ",", "batch_test_flag", "=", "False", ",", "model_type", "=", "'o'", ",", "valid_set", "=", "\"test\"", ",", "item_pop_test", "=", "None", ",", "pop_exp", "=", "0", ")", ":", "\n", "\n", "    ", "result", "=", "{", "'precision'", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "'recall'", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "'ndcg'", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "'hit_ratio'", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", "}", "\n", "\n", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "cores", ")", "\n", "\n", "u_batch_size", "=", "BATCH_SIZE", "\n", "i_batch_size", "=", "BATCH_SIZE", "\n", "\n", "n_test_users", "=", "len", "(", "test_users", ")", "\n", "n_user_batchs", "=", "n_test_users", "//", "u_batch_size", "+", "1", "\n", "\n", "count", "=", "0", "\n", "\n", "\n", "total_rate", "=", "np", ".", "empty", "(", "shape", "=", "[", "0", ",", "ITEM_NUM", "]", ")", "\n", "for", "u_batch_id", "in", "range", "(", "n_user_batchs", ")", ":", "\n", "\n", "        ", "start", "=", "u_batch_id", "*", "u_batch_size", "\n", "end", "=", "(", "u_batch_id", "+", "1", ")", "*", "u_batch_size", "\n", "\n", "user_batch", "=", "test_users", "[", "start", ":", "end", "]", "\n", "\n", "if", "batch_test_flag", ":", "\n", "\n", "            ", "n_item_batchs", "=", "ITEM_NUM", "//", "i_batch_size", "+", "1", "\n", "rate_batch", "=", "np", ".", "zeros", "(", "shape", "=", "(", "len", "(", "user_batch", ")", ",", "ITEM_NUM", ")", ")", "\n", "\n", "i_count", "=", "0", "\n", "for", "i_batch_id", "in", "range", "(", "n_item_batchs", ")", ":", "\n", "                ", "i_start", "=", "i_batch_id", "*", "i_batch_size", "\n", "i_end", "=", "min", "(", "(", "i_batch_id", "+", "1", ")", "*", "i_batch_size", ",", "ITEM_NUM", ")", "\n", "\n", "item_batch", "=", "range", "(", "i_start", ",", "i_end", ")", "\n", "if", "model_type", "==", "'o'", ":", "\n", "                    ", "i_rate_batch", "=", "sess", ".", "run", "(", "model", ".", "batch_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "'c'", ":", "\n", "                    ", "i_rate_batch", "=", "sess", ".", "run", "(", "model", ".", "user_const_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "'ic'", ":", "\n", "                    ", "i_rate_batch", "=", "sess", ".", "run", "(", "model", ".", "item_const_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "'rc'", ":", "\n", "                    ", "i_rate_batch", "=", "sess", ".", "run", "(", "model", ".", "user_rand_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "'irc'", ":", "\n", "                    ", "i_rate_batch", "=", "sess", ".", "run", "(", "model", ".", "item_rand_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'model type error.'", ")", "\n", "exit", "(", ")", "\n", "\n", "", "rate_batch", "[", ":", ",", "i_start", ":", "i_end", "]", "=", "i_rate_batch", "\n", "i_count", "+=", "i_rate_batch", ".", "shape", "[", "1", "]", "\n", "\n", "", "assert", "i_count", "==", "ITEM_NUM", "\n", "\n", "", "else", ":", "\n", "            ", "item_batch", "=", "list", "(", "range", "(", "ITEM_NUM", ")", ")", "\n", "if", "model_type", "==", "'o'", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "batch_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "total_rate", "=", "np", ".", "vstack", "(", "(", "total_rate", ",", "rate_batch", ")", ")", "\n", "", "elif", "model_type", "==", "'c'", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "user_const_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "'ic'", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "item_const_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "'rc'", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "user_rand_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "'irc'", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "item_rand_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "'rubi_c'", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "rubi_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "\"direct_minus_c\"", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "direct_minus_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "'rubi_user_c'", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "rubi_ratings_userc", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "'rubi_both'", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "rubi_ratings_both", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "elif", "model_type", "==", "\"item_pop_test\"", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "rubi_ratings_both_poptest", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "# rate_batch = (rate_batch-np.min(rate_batch))*np.power(item_pop_test, pop_exp)", "\n", "rate_batch", "=", "np", ".", "ones_like", "(", "rate_batch", ")", "*", "np", ".", "power", "(", "item_pop_test", ",", "pop_exp", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'model type error.'", ")", "\n", "exit", "(", ")", "\n", "\n", "", "", "item_acc_list", "=", "{", "}", "\n", "rate_batch", "=", "np", ".", "array", "(", "rate_batch", ")", "# (B, N)", "\n", "for", "i", "in", "range", "(", "ITEM_NUM", ")", ":", "\n", "            ", "item_acc_list", "[", "i", "]", "=", "0", "\n", "", "all_items", "=", "set", "(", "range", "(", "ITEM_NUM", ")", ")", "\n", "for", "j", ",", "rate_user", "in", "enumerate", "(", "rate_batch", ")", ":", "\n", "            ", "user", "=", "user_batch", "[", "j", "]", "\n", "user_pos_test", "=", "data", ".", "test_user_list", "[", "user", "]", "\n", "train_items", "=", "data", ".", "train_user_list", "[", "user", "]", "\n", "test_items", "=", "list", "(", "all_items", "-", "set", "(", "train_items", ")", ")", "\n", "item_score", "=", "dict", "(", ")", "\n", "for", "i", "in", "test_items", ":", "\n", "                ", "item_score", "[", "i", "]", "=", "rate_user", "[", "i", "]", "\n", "", "K_max_item_score", "=", "heapq", ".", "nlargest", "(", "5", ",", "item_score", ",", "key", "=", "item_score", ".", "get", ")", "\n", "for", "i", "in", "K_max_item_score", ":", "\n", "                ", "if", "i", "in", "user_pos_test", ":", "\n", "                    ", "item_acc_list", "[", "i", "]", "+=", "1", "/", "len", "(", "data", ".", "test_item_list", "[", "i", "]", ")", "\n", "\n", "", "", "", "user_batch_rating_uid", "=", "zip", "(", "rate_batch", ",", "user_batch", ")", "\n", "if", "valid_set", "==", "\"test\"", ":", "\n", "            ", "batch_result", "=", "pool", ".", "map", "(", "test_one_user", ",", "user_batch_rating_uid", ")", "\n", "", "else", ":", "\n", "            ", "batch_result", "=", "pool", ".", "map", "(", "valid_one_user", ",", "user_batch_rating_uid", ")", "\n", "", "count", "+=", "len", "(", "batch_result", ")", "\n", "\n", "for", "re", "in", "batch_result", ":", "\n", "            ", "result", "[", "'precision'", "]", "+=", "re", "[", "'precision'", "]", "/", "n_test_users", "\n", "result", "[", "'recall'", "]", "+=", "re", "[", "'recall'", "]", "/", "n_test_users", "\n", "result", "[", "'ndcg'", "]", "+=", "re", "[", "'ndcg'", "]", "/", "n_test_users", "\n", "result", "[", "'hit_ratio'", "]", "+=", "re", "[", "'hit_ratio'", "]", "/", "n_test_users", "\n", "# print(result['hit_ratio'])", "\n", "", "", "if", "model_type", "==", "'o'", ":", "\n", "# print('zk:', total_rate.shape, np.mean(total_rate))", "\n", "        ", "rate_sum", ",", "n", "=", "0", ",", "0", "\n", "# print(test_users)", "\n", "for", "user", ",", "items", "in", "data", ".", "train_user_list", ".", "items", "(", ")", ":", "\n", "            ", "if", "user", "not", "in", "test_users", ":", "\n", "                ", "continue", "\n", "", "idx", "=", "0", "\n", "for", "u_id", "in", "test_users", ":", "\n", "                ", "if", "u_id", "==", "user", ":", "\n", "                    ", "break", "\n", "", "idx", "+=", "1", "\n", "", "rate_sum", "+=", "np", ".", "sum", "(", "total_rate", "[", "idx", ",", "items", "]", ")", "\n", "n", "+=", "len", "(", "items", ")", "\n", "# print('pos rating:', rate_sum/n*1.0)", "\n", "\n", "\n", "", "", "assert", "count", "==", "n_test_users", "\n", "pool", ".", "close", "(", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.weitianxin_MACR.macr_mf.tune.early_stop": [[313, 331], ["print"], "function", ["None"], ["", "def", "early_stop", "(", "hr", ",", "ndcg", ",", "recall", ",", "precision", ",", "cur_epoch", ",", "config", ",", "stopping_step", ",", "flag_step", "=", "10", ")", ":", "\n", "    ", "if", "hr", ">=", "config", "[", "'best_hr'", "]", ":", "\n", "        ", "stopping_step", "=", "0", "\n", "config", "[", "'best_hr'", "]", "=", "hr", "\n", "config", "[", "'best_ndcg'", "]", "=", "ndcg", "\n", "config", "[", "'best_recall'", "]", "=", "recall", "\n", "config", "[", "'best_pre'", "]", "=", "precision", "\n", "config", "[", "'best_epoch'", "]", "=", "cur_epoch", "\n", "", "else", ":", "\n", "        ", "stopping_step", "+=", "1", "\n", "\n", "", "if", "stopping_step", ">=", "flag_step", ":", "\n", "        ", "print", "(", "\"Early stopping is trigger\"", ")", "\n", "should_stop", "=", "True", "\n", "", "else", ":", "\n", "        ", "should_stop", "=", "False", "\n", "\n", "", "return", "config", ",", "stopping_step", ",", "should_stop", "\n", "\n"]]}