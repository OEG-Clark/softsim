{"home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.Xray_Dataset.__init__": [[39, 45], ["object.__init__", "pandas.read_csv"], "methods", ["home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.Fusion_models.Late_Fusion_Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "csv_file", ",", "dataset", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "Xray_Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#        self.root = root", "\n", "self", ".", "frame", "=", "pd", ".", "read_csv", "(", "csv_file", ",", "header", "=", "None", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "dataset", "=", "dataset", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.Xray_Dataset.__len__": [[45, 47], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "frame", ")", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.Xray_Dataset.__getitem__": [[47, 65], ["[].split", "os.path.join", "int", "PIL.Image.open().convert", "PIL.Image.open", "models.Xray_Dataset.transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "#        img_path =  os.path.join(self.root, self.frame.loc[idx][0])       ", "\n", "        ", "cat", "=", "self", ".", "frame", ".", "loc", "[", "idx", "]", "[", "0", "]", ".", "split", "(", "' '", ")", "\n", "# print (cat)", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "cat", "[", "1", "]", ",", "self", ".", "dataset", ",", "cat", "[", "2", "]", ")", "\n", "# print (img_path)", "\n", "label", "=", "int", "(", "cat", "[", "3", "]", ")", "\n", "#\t\timg = io.imread(img_path)", "\n", "if", "self", ".", "dataset", "==", "'CXR'", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "# label = int(label)", "\n", "# print (cat[1], img.shape)", "\n", "#        img = torch.from_numpy(img).float().view(3, img.shape[0], img.shape[1])", "\n", "", "return", "img", ",", "label", ",", "img_path", "\n", "\n"]], "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.FusionDataset.__init__": [[67, 77], ["object.__init__", "pandas.read_csv"], "methods", ["home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.Fusion_models.Late_Fusion_Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "csv_file", ",", "dataset_1", ",", "dataset_2", ",", "transform1", "=", "None", ",", "transform2", "=", "None", ")", ":", "\n", "        ", "super", "(", "FusionDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "frame", "=", "pd", ".", "read_csv", "(", "csv_file", ",", "header", "=", "None", ")", "\n", "# self.frame_2 = pd.read_csv(csv_file_2)", "\n", "self", ".", "transform1", "=", "transform1", "\n", "self", ".", "transform2", "=", "transform2", "\n", "\n", "self", ".", "dataset_1", "=", "dataset_1", "\n", "self", ".", "dataset_2", "=", "dataset_2", "\n", "\n"]], "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.FusionDataset.__len__": [[78, 80], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "frame", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.FusionDataset.__getitem__": [[81, 101], ["[].split", "os.path.join", "os.path.join", "int", "PIL.Image.open().convert", "PIL.Image.open", "models.FusionDataset.transform1", "models.FusionDataset.transform2", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "#        img_path =  os.path.join(self.root, self.frame.loc[idx][0])", "\n", "        ", "cat", "=", "self", ".", "frame", ".", "loc", "[", "idx", "]", "[", "0", "]", ".", "split", "(", "' '", ")", "\n", "\n", "img_path_1", "=", "os", ".", "path", ".", "join", "(", "cat", "[", "1", "]", ",", "self", ".", "dataset_1", ",", "cat", "[", "2", "]", ")", "\n", "img_path_2", "=", "os", ".", "path", ".", "join", "(", "cat", "[", "1", "]", ",", "self", ".", "dataset_2", ",", "cat", "[", "2", "]", ")", "\n", "\n", "# img_path = cat[1] + cat[2] #wrong", "\n", "# img_path = cat[1] + ' ' + cat[2] #wrong", "\n", "img_path", "=", "cat", "[", "1", "]", "+", "'/'", "+", "cat", "[", "2", "]", "\n", "\n", "label", "=", "int", "(", "cat", "[", "3", "]", ")", "\n", "#\t\timg = io.imread(img_path)", "\n", "img_1", "=", "Image", ".", "open", "(", "img_path_1", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img_2", "=", "Image", ".", "open", "(", "img_path_2", ")", "\n", "\n", "# if self.transform is not None:", "\n", "img_1", "=", "self", ".", "transform1", "(", "img_1", ")", "\n", "img_2", "=", "self", ".", "transform2", "(", "img_2", ")", "\n", "return", "img_1", ",", "img_2", ",", "label", ",", "img_path", "\n", "\n"]], "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.Dataloader.__init__": [[152, 154], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "self", ".", "Dataset", "=", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.Dataloader.data_loader": [[155, 192], ["torchvision.transforms.Compose", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "models.online_mean_and_sd", "print", "all_mean.append", "all_std.append", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "models.Xray_Dataset", "models.Xray_Dataset", "mean.numpy", "std.numpy", "models.Xray_Dataset", "models.Xray_Dataset", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.online_mean_and_sd"], ["", "def", "data_loader", "(", "self", ",", "size", ",", "train_file", ",", "val_file", ",", "batch_size", ")", ":", "\n", "\n", "        ", "data_transforms", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "size", ",", "size", ")", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "dataloaders", "=", "{", "'train'", ":", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "Xray_Dataset", "(", "train_file", ",", "self", ".", "Dataset", ",", "data_transforms", ")", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", ",", "\n", "'val'", ":", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "Xray_Dataset", "(", "val_file", ",", "self", ".", "Dataset", ",", "data_transforms", ")", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "}", "\n", "\n", "all_mean", "=", "[", "]", "\n", "all_std", "=", "[", "]", "\n", "for", "iner", "in", "[", "'train'", ",", "'val'", "]", ":", "\n", "            ", "print", "(", "iner", ")", "\n", "mean", ",", "std", "=", "online_mean_and_sd", "(", "dataloaders", "[", "iner", "]", ")", "\n", "print", "(", "mean", ",", "std", ")", "\n", "all_mean", ".", "append", "(", "mean", ".", "numpy", "(", ")", ")", "\n", "all_std", ".", "append", "(", "std", ".", "numpy", "(", ")", ")", "\n", "\n", "# all_mean = [np.array([0.515748 , 0.515748 , 0.5157478]), np.array([0.5118517, 0.5118529, 0.5118517])]", "\n", "# all_std = [np.array([0.2472093 , 0.24720941, 0.24720983]), np.array([0.24538483, 0.24538337, 0.24538459])]", "\n", "", "print", "(", "all_mean", ",", "all_std", ")", "\n", "\n", "data_transforms", "=", "{", "\n", "'train'", ":", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "size", ",", "size", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "all_mean", "[", "0", "]", ",", "all_std", "[", "0", "]", ")", "]", ")", ",", "\n", "'val'", ":", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "size", ",", "size", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "all_mean", "[", "1", "]", ",", "all_std", "[", "1", "]", ")", "\n", "]", ")", "\n", "}", "\n", "\n", "# dataloaders = {x: torch.utils.data.DataLoader(Xray_Dataset(train_file, self.Dataset, data_transforms[x]), ", "\n", "#                               batch_size=batch_size, shuffle=True, num_workers=4) for x in ['train','val']}", "\n", "\n", "dataloaders", "=", "{", "'train'", ":", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "Xray_Dataset", "(", "train_file", ",", "self", ".", "Dataset", ",", "data_transforms", "[", "'train'", "]", ")", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", ",", "\n", "'val'", ":", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "Xray_Dataset", "(", "val_file", ",", "self", ".", "Dataset", ",", "data_transforms", "[", "'val'", "]", ")", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "}", "\n", "\n", "return", "dataloaders", "\n", "\n"]], "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.Dataloader.fusion_data_loader": [[195, 241], ["torchvision.transforms.Compose", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "models.fusion_online_mean_and_sd", "print", "all_mean.append", "all_std.append", "all_mean.append", "all_std.append", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "models.FusionDataset", "models.FusionDataset", "mean1.numpy", "std1.numpy", "mean2.numpy", "std2.numpy", "models.FusionDataset", "models.FusionDataset", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.fusion_online_mean_and_sd"], ["", "def", "fusion_data_loader", "(", "self", ",", "size", ",", "train_file", ",", "val_file", ",", "batch_size", ")", ":", "\n", "\n", "        ", "data_transforms", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "size", ",", "size", ")", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "dataloaders", "=", "{", "'train'", ":", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "FusionDataset", "(", "train_file", ",", "self", ".", "Dataset", ",", "'Train_Mix'", ",", "data_transforms", ",", "data_transforms", ")", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", ",", "\n", "'val'", ":", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "FusionDataset", "(", "val_file", ",", "self", ".", "Dataset", ",", "'Train_Mix'", ",", "data_transforms", ",", "data_transforms", ")", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "}", "\n", "# dataloaders2 = ", "\n", "all_mean", "=", "[", "]", "\n", "all_std", "=", "[", "]", "\n", "for", "iner", "in", "[", "'train'", ",", "'val'", "]", ":", "\n", "            ", "print", "(", "iner", ")", "\n", "mean1", ",", "std1", ",", "mean2", ",", "std2", "=", "fusion_online_mean_and_sd", "(", "dataloaders", "[", "iner", "]", ")", "\n", "print", "(", "mean1", ",", "std1", ",", "mean2", ",", "std2", ")", "\n", "all_mean", ".", "append", "(", "mean1", ".", "numpy", "(", ")", ")", "\n", "all_std", ".", "append", "(", "std1", ".", "numpy", "(", ")", ")", "\n", "all_mean", ".", "append", "(", "mean2", ".", "numpy", "(", ")", ")", "\n", "all_std", ".", "append", "(", "std2", ".", "numpy", "(", ")", ")", "\n", "\n", "", "print", "(", "all_mean", ",", "all_std", ")", "\n", "\n", "data_transforms1", "=", "{", "\n", "'train'", ":", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "size", ",", "size", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "all_mean", "[", "0", "]", ",", "all_std", "[", "0", "]", ")", "]", ")", ",", "\n", "'val'", ":", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "size", ",", "size", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "all_mean", "[", "2", "]", ",", "all_std", "[", "2", "]", ")", "\n", "]", ")", "\n", "}", "\n", "\n", "data_transforms2", "=", "{", "\n", "'train'", ":", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "size", ",", "size", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "all_mean", "[", "1", "]", ",", "all_std", "[", "1", "]", ")", "]", ")", ",", "\n", "'val'", ":", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "size", ",", "size", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "all_mean", "[", "3", "]", ",", "all_std", "[", "3", "]", ")", "\n", "]", ")", "\n", "}", "\n", "\n", "dataloaders", "=", "{", "'train'", ":", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "FusionDataset", "(", "train_file", ",", "self", ".", "Dataset", ",", "'Train_Mix'", ",", "data_transforms1", "[", "'train'", "]", ",", "data_transforms2", "[", "'train'", "]", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", ",", "\n", "'val'", ":", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "FusionDataset", "(", "val_file", ",", "self", ".", "Dataset", ",", "'Train_Mix'", ",", "data_transforms1", "[", "'val'", "]", ",", "data_transforms2", "[", "'val'", "]", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "}", "\n", "\n", "return", "dataloaders", "\n", "\n"]], "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.Dataloader.test_loader": [[242, 280], ["torchvision.transforms.Compose", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "models.online_mean_and_sd", "print", "torchvision.transforms.Compose", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "models.Xray_Dataset", "mean.numpy", "std.numpy", "models.Xray_Dataset", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.online_mean_and_sd"], ["", "def", "test_loader", "(", "self", ",", "size", ",", "test_file", ",", "batch_size", ")", ":", "\n", "        ", "data_transforms", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "size", ",", "size", ")", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "dataloaders", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "Xray_Dataset", "(", "test_file", ",", "self", ".", "Dataset", ",", "data_transforms", ")", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "# imgs = pd.read_csv(test_file, header = None)", "\n", "#     # ttt = Xray_Dataset('test_ds.txt', Dataset, data_transforms)", "\n", "# dataset_sizes = len(imgs)", "\n", "\n", "# # print (iner)", "\n", "# if test_file == 'test_ds.txt':", "\n", "#     if self.Dataset == 'data':", "\n", "#         mean = np.array([0.5174, 0.5174, 0.5174]); std = np.array([0.2478, 0.2478, 0.2478])", "\n", "#     else:", "\n", "#         mean = np.array([0.6949, 0.5551, 0.2221]); std = np.array([0.3236, 0.2957, 0.0987])", "\n", "# elif test_file == 'val_ds.txt':", "\n", "#     if self.Dataset == 'data':", "\n", "#         mean = np.array([0.5198, 0.5198, 0.5198]); std = np.array([0.2471, 0.2471, 0.2471]) ", "\n", "#     else:", "\n", "#         mean = np.array([0.6976, 0.5553, 0.2247]); std = np.array([0.3233, 0.2955, 0.1006])               ", "\n", "# elif test_file == 'additional_test_ds.txt':", "\n", "#     if self.Dataset == 'data':", "\n", "#         mean = np.array([0.5451, 0.5451, 0.5451]); std = np.array([0.2840, 0.2840, 0.2840]) ", "\n", "#     else:", "\n", "#         mean = np.array([0.6744, 0.5491, 0.2346]); std = np.array([0.3386, 0.3016, 0.1169])", "\n", "# else:", "\n", "mean", ",", "std", "=", "online_mean_and_sd", "(", "dataloaders", ")", "\n", "print", "(", "mean", ",", "std", ")", "\n", "mean", ".", "numpy", "(", ")", ",", "std", ".", "numpy", "(", ")", "\n", "\n", "data_transforms", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "size", ",", "size", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ",", "\n", "]", ")", "\n", "\n", "dataloaders", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "Xray_Dataset", "(", "test_file", ",", "self", ".", "Dataset", ",", "data_transforms", ")", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "return", "dataloaders", "\n", "\n"]], "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.Dataloader.test_fusion_loader": [[281, 314], ["torchvision.transforms.Compose", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "models.fusion_online_mean_and_sd", "print", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "models.FusionDataset", "models.FusionDataset", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.fusion_online_mean_and_sd"], ["", "def", "test_fusion_loader", "(", "self", ",", "size", ",", "test_file", ",", "batch_size", ")", ":", "\n", "# if test_file == 'test_ds.txt':", "\n", "#     mean1 = np.array([0.5174, 0.5174, 0.5174]); std1 = np.array([0.2478, 0.2478, 0.2478]);", "\n", "#     mean2 = np.array([0.6949, 0.5551, 0.2221]); std2 = np.array([0.3236, 0.2957, 0.0987]);", "\n", "# elif test_file == 'val_ds.txt':", "\n", "#     mean1 = np.array([0.5198, 0.5198, 0.5198]); std1 = np.array([0.2471, 0.2471, 0.2471]); ", "\n", "#     mean2 = np.array([0.6976, 0.5553, 0.2247]); std2 = np.array([0.3233, 0.2955, 0.1006]);", "\n", "# elif test_file == 'additional_test_ds.txt':", "\n", "#     mean1 = np.array([0.5451, 0.5451, 0.5451]); std1 = np.array([0.2840, 0.2840, 0.2840]); ", "\n", "#     mean2 = np.array([0.6744, 0.5491, 0.2346]); std2 = np.array([0.3386, 0.3016, 0.1169]);            ", "\n", "# else:", "\n", "        ", "data_transforms", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "size", ",", "size", ")", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "dataloaders", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "FusionDataset", "(", "test_file", ",", "self", ".", "Dataset", ",", "'Enh'", ",", "data_transforms", ",", "data_transforms", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "mean1", ",", "std1", ",", "mean2", ",", "std2", "=", "fusion_online_mean_and_sd", "(", "dataloaders", ")", "\n", "print", "(", "mean1", ",", "std1", ",", "mean2", ",", "std2", ")", "\n", "\n", "\n", "data_transforms1", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "size", ",", "size", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean1", ",", "std1", ")", "\n", "]", ")", "\n", "\n", "data_transforms2", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "size", ",", "size", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean2", ",", "std2", ")", "\n", "]", ")", "\n", "\n", "dataloaders", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "FusionDataset", "(", "test_file", ",", "self", ".", "Dataset", ",", "'Enh'", ",", "data_transforms1", ",", "data_transforms2", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "return", "dataloaders", "\n", "\n"]], "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.Dataloader.count_imgs": [[316, 329], ["pandas.read_csv", "range", "print", "len", "[].split", "len", "len"], "methods", ["None"], ["", "def", "count_imgs", "(", "self", ",", "file", ")", ":", "\n", "        ", "class_num", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "frame", "=", "pd", ".", "read_csv", "(", "file", ",", "header", "=", "None", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "frame", ")", ")", ":", "\n", "            ", "cat", "=", "frame", ".", "iloc", "[", "i", "]", "[", "0", "]", ".", "split", "(", "' '", ")", "\n", "if", "cat", "[", "3", "]", "==", "'0'", ":", "\n", "                ", "class_num", "[", "0", "]", "+=", "1", "\n", "", "elif", "cat", "[", "3", "]", "==", "'1'", ":", "\n", "                ", "class_num", "[", "1", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "class_num", "[", "-", "1", "]", "+=", "1", "\n", "", "", "print", "(", "class_num", ",", "len", "(", "frame", ")", ")", "\n", "return", "class_num", ",", "len", "(", "frame", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.Trainer.__init__": [[331, 336], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lr", ",", "num_classes", ")", ":", "\n", "# self.model = MultiStageModel(num_blocks, num_layers, num_f_maps, dim, num_classes)", "\n", "        ", "self", ".", "ce", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.Trainer.train_model": [[337, 434], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "time.time", "copy.deepcopy", "range", "copy.deepcopy", "print", "print", "model.state_dict", "print", "print", "model.state_dict", "time.time", "enumerate", "print", "model.train", "model.eval", "barbar.Bar", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "inputs.to.to.to", "labels.to.to.to", "torch.Adam.zero_grad", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "writer.add_scalar", "writer.add_scalar", "running_corrects.double", "len", "writer.add_scalar", "writer.add_scalar", "copy.deepcopy", "val_acc_history.append", "numpy.asarray", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "model", "models.Trainer.ce", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "writer.add_scalar", "writer.add_scalar", "models.Trainer.item", "inputs.to.to.size", "model.state_dict", "models.Trainer.backward", "torch.Adam.step", "len", "len"], "methods", ["None"], ["", "def", "train_model", "(", "self", ",", "model", ",", "dataloaders", ",", "num_epochs", ",", "params", ",", "writer", ")", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "params", ",", "self", ".", "lr", ")", "\n", "since", "=", "time", ".", "time", "(", ")", "\n", "# timer = time.time()", "\n", "val_acc_history", "=", "[", "]", "\n", "best_model_wts", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "#    last_model_wts = copy.deepcopy(model.state_dict())", "\n", "best_acc", "=", "0.0", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "\n", "            ", "print", "(", "'Epoch {}/{}'", ".", "format", "(", "epoch", ",", "num_epochs", "-", "1", ")", ")", "\n", "print", "(", "'-'", "*", "10", ")", "\n", "# Each epoch has a training and validation phase", "\n", "for", "phase", "in", "[", "'train'", ",", "'val'", "]", ":", "\n", "#            h = model.init_hidden(batch_size)            ", "\n", "                ", "if", "phase", "==", "'train'", ":", "\n", "                    ", "model", ".", "train", "(", ")", "# Set model to training mode", "\n", "", "else", ":", "\n", "                    ", "model", ".", "eval", "(", ")", "# Set model to evaluate mode", "\n", "\n", "", "running_loss", "=", "0.0", "\n", "running_corrects", "=", "0", "\n", "\n", "# Iterate over data.", "\n", "for", "index", ",", "data", "in", "enumerate", "(", "Bar", "(", "dataloaders", "[", "phase", "]", ")", ")", ":", "\n", "                    ", "inputs", ",", "labels", ",", "img_path", "=", "data", "\n", "\n", "# online_mean_and_sd(inputs)", "\n", "\n", "labels", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "labels", ")", ")", "\n", "inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "# zero the parameter gradients", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "# forward", "\n", "#                hidden = tuple([e.data for e in h])", "\n", "# track history if only in train", "\n", "with", "torch", ".", "set_grad_enabled", "(", "phase", "==", "'train'", ")", ":", "\n", "                        ", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "self", ".", "ce", "(", "outputs", ",", "labels", ")", "\n", "# if index % 100 == 0:", "\n", "#     print ('[%d][%d][%d][%d] loss: %.5f time: %.5f' % (index, len(dataloaders[phase]), epoch, num_epochs, loss.data.mean(), time.time()-timer))                            ", "\n", "# timer = time.time() #time.time() current time timer time past away", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "outputs", ",", "1", ")", "\n", "# backward + optimize only if in training phase", "\n", "if", "phase", "==", "'train'", ":", "\n", "                            ", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "if", "phase", "==", "'train'", ":", "\n", "                        ", "writer", ".", "add_scalar", "(", "'Avg_batch_Loss/train_loss'", ",", "loss", ",", "epoch", "*", "len", "(", "dataloaders", "[", "'train'", "]", ")", "+", "index", ")", "\n", "", "else", ":", "\n", "                        ", "writer", ".", "add_scalar", "(", "'Avg_batch_Loss/val_loss'", ",", "loss", ",", "epoch", "*", "len", "(", "dataloaders", "[", "'val'", "]", ")", "+", "index", ")", "\n", "\n", "# statistics", "\n", "", "running_loss", "+=", "loss", ".", "item", "(", ")", "*", "inputs", ".", "size", "(", "0", ")", "\n", "running_corrects", "+=", "torch", ".", "sum", "(", "preds", "==", "labels", ".", "data", ")", "\n", "\n", "# for param_group in optimizer.param_groups:", "\n", "#     print(param_group['lr'])", "\n", "\n", "# if phase == 'train':", "\n", "#     scheduler.step()", "\n", "#     print (scheduler.get_last_lr()[0])", "\n", "#     # scheduler.", "\n", "\n", "", "epoch_loss", "=", "running_loss", "/", "len", "(", "dataloaders", "[", "phase", "]", ".", "dataset", ")", "\n", "\n", "if", "phase", "==", "'train'", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "'Epoch_Loss/train_loss'", ",", "epoch_loss", ",", "epoch", ")", "\n", "", "else", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "'Epoch_Loss/val_loss'", ",", "epoch_loss", ",", "epoch", ")", "\n", "\n", "", "epoch_acc", "=", "running_corrects", ".", "double", "(", ")", "/", "len", "(", "dataloaders", "[", "phase", "]", ".", "dataset", ")", "\n", "\n", "if", "phase", "==", "'train'", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "'Epoch_Acc/train_acc'", ",", "epoch_acc", ",", "epoch", ")", "\n", "", "else", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "'Epoch_Acc/val_acc'", ",", "epoch_acc", ",", "epoch", ")", "\n", "\n", "", "print", "(", "'{} Loss: {:.4f} Acc: {:.4f}'", ".", "format", "(", "phase", ",", "epoch_loss", ",", "epoch_acc", ")", ")", "\n", "\n", "# deep copy the model", "\n", "if", "phase", "==", "'val'", "and", "epoch_acc", ">", "best_acc", ":", "\n", "                    ", "best_acc", "=", "epoch_acc", "\n", "best_model_wts", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "", "if", "phase", "==", "'val'", ":", "\n", "                    ", "val_acc_history", ".", "append", "(", "epoch_acc", ")", "\n", "\n", "", "", "", "last_model_wts", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "since", "\n", "print", "(", "'Training complete in {:.0f}m {:.0f}s'", ".", "format", "(", "time_elapsed", "//", "60", ",", "time_elapsed", "%", "60", ")", ")", "\n", "print", "(", "'Best val Acc: {:4f}'", ".", "format", "(", "best_acc", ")", ")", "\n", "#    # load best model weights", "\n", "#    model.load_state_dict(best_model_wts)", "\n", "\n", "return", "model", ",", "val_acc_history", ",", "best_acc", ",", "best_model_wts", ",", "last_model_wts", "\n", "\n"]], "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.Trainer.train_fusion_model": [[435, 535], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "time.time", "copy.deepcopy", "range", "copy.deepcopy", "print", "print", "model.state_dict", "print", "print", "model.state_dict", "time.time", "enumerate", "print", "all_epochs_loss.append", "model.train", "model.eval", "barbar.Bar", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "inputs_1.to.to.to", "inputs_2.to.to.to", "labels.to.to.to", "torch.Adam.zero_grad", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "writer.add_scalar", "writer.add_scalar", "running_corrects.double", "len", "writer.add_scalar", "writer.add_scalar", "copy.deepcopy", "val_acc_history.append", "numpy.asarray", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "model", "models.Trainer.ce", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "writer.add_scalar", "writer.add_scalar", "models.Trainer.item", "inputs_1.to.to.size", "model.state_dict", "models.Trainer.backward", "torch.Adam.step", "len", "len"], "methods", ["None"], ["", "def", "train_fusion_model", "(", "self", ",", "model", ",", "dataloaders", ",", "num_epochs", ",", "params", ",", "writer", ")", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "params", ",", "self", ".", "lr", ")", "\n", "since", "=", "time", ".", "time", "(", ")", "\n", "# timer = time.time()", "\n", "val_acc_history", "=", "[", "]", "\n", "best_model_wts", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "#    last_model_wts = copy.deepcopy(model.state_dict())", "\n", "best_acc", "=", "0.0", "\n", "all_epochs_loss", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "\n", "            ", "print", "(", "'Epoch {}/{}'", ".", "format", "(", "epoch", ",", "num_epochs", "-", "1", ")", ")", "\n", "print", "(", "'-'", "*", "10", ")", "\n", "# Each epoch has a training and validation phase", "\n", "for", "phase", "in", "[", "'train'", ",", "'val'", "]", ":", "\n", "#            h = model.init_hidden(batch_size)            ", "\n", "                ", "if", "phase", "==", "'train'", ":", "\n", "                    ", "model", ".", "train", "(", ")", "# Set model to training mode", "\n", "", "else", ":", "\n", "                    ", "model", ".", "eval", "(", ")", "# Set model to evaluate mode", "\n", "\n", "", "running_loss", "=", "0.0", "\n", "running_corrects", "=", "0", "\n", "\n", "# Iterate over data.", "\n", "for", "index", ",", "data", "in", "enumerate", "(", "Bar", "(", "dataloaders", "[", "phase", "]", ")", ")", ":", "\n", "                    ", "inputs_1", ",", "inputs_2", ",", "labels", ",", "img_path", "=", "data", "\n", "\n", "# online_mean_and_sd(inputs)             ", "\n", "labels", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "labels", ")", ")", "\n", "inputs_1", "=", "inputs_1", ".", "to", "(", "device", ")", "\n", "inputs_2", "=", "inputs_2", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "# zero the parameter gradients", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "# forward", "\n", "#                hidden = tuple([e.data for e in h])", "\n", "# track history if only in train", "\n", "with", "torch", ".", "set_grad_enabled", "(", "phase", "==", "'train'", ")", ":", "\n", "                        ", "outputs", "=", "model", "(", "inputs_1", ",", "inputs_2", ")", "\n", "loss", "=", "self", ".", "ce", "(", "outputs", ",", "labels", ")", "\n", "# if index % 100 == 0:", "\n", "#     print ('[%d][%d][%d][%d] loss: %.5f time: %.5f' % (index, len(dataloaders[phase]), epoch, num_epochs, loss.data.mean(), time.time()-timer))                            ", "\n", "# timer = time.time() #time.time() current time timer time past away", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "outputs", ",", "1", ")", "\n", "# backward + optimize only if in training phase", "\n", "if", "phase", "==", "'train'", ":", "\n", "                            ", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "if", "phase", "==", "'train'", ":", "\n", "                        ", "writer", ".", "add_scalar", "(", "'Avg_batch_Loss/train_loss'", ",", "loss", ",", "epoch", "*", "len", "(", "dataloaders", "[", "'train'", "]", ")", "+", "index", ")", "\n", "", "else", ":", "\n", "                        ", "writer", ".", "add_scalar", "(", "'Avg_batch_Loss/val_loss'", ",", "loss", ",", "epoch", "*", "len", "(", "dataloaders", "[", "'val'", "]", ")", "+", "index", ")", "\n", "\n", "# statistics", "\n", "", "running_loss", "+=", "loss", ".", "item", "(", ")", "*", "inputs_1", ".", "size", "(", "0", ")", "\n", "running_corrects", "+=", "torch", ".", "sum", "(", "preds", "==", "labels", ".", "data", ")", "\n", "\n", "# for param_group in optimizer.param_groups:", "\n", "#     print(param_group['lr'])", "\n", "\n", "# if phase == 'train':", "\n", "#     scheduler.step()", "\n", "#     print (scheduler.get_last_lr()[0])", "\n", "#     # scheduler.", "\n", "\n", "", "epoch_loss", "=", "running_loss", "/", "len", "(", "dataloaders", "[", "phase", "]", ".", "dataset", ")", "\n", "\n", "if", "phase", "==", "'train'", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "'Epoch_Loss/train_loss'", ",", "epoch_loss", ",", "epoch", ")", "\n", "", "else", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "'Epoch_Loss/val_loss'", ",", "epoch_loss", ",", "epoch", ")", "\n", "# print (len(running_corrects)) ", "\n", "", "epoch_acc", "=", "running_corrects", ".", "double", "(", ")", "/", "len", "(", "dataloaders", "[", "phase", "]", ".", "dataset", ")", "\n", "\n", "if", "phase", "==", "'train'", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "'Epoch_Acc/train_acc'", ",", "epoch_acc", ",", "epoch", ")", "\n", "", "else", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "'Epoch_Acc/val_acc'", ",", "epoch_acc", ",", "epoch", ")", "\n", "\n", "", "print", "(", "'{} Loss: {:.4f} Acc: {:.4f}'", ".", "format", "(", "phase", ",", "epoch_loss", ",", "epoch_acc", ")", ")", "\n", "\n", "# deep copy the model", "\n", "if", "phase", "==", "'val'", "and", "epoch_acc", ">", "best_acc", ":", "\n", "                    ", "best_acc", "=", "epoch_acc", "\n", "best_model_wts", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "", "if", "phase", "==", "'val'", ":", "\n", "                    ", "val_acc_history", ".", "append", "(", "epoch_acc", ")", "\n", "\n", "", "all_epochs_loss", ".", "append", "(", "epoch_loss", ")", "\n", "\n", "", "", "last_model_wts", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "since", "\n", "print", "(", "'Training complete in {:.0f}m {:.0f}s'", ".", "format", "(", "time_elapsed", "//", "60", ",", "time_elapsed", "%", "60", ")", ")", "\n", "print", "(", "'Best val Acc: {:4f}'", ".", "format", "(", "best_acc", ")", ")", "\n", "#    # load best model weights", "\n", "#    model.load_state_dict(best_model_wts)", "\n", "\n", "return", "model", ",", "val_acc_history", ",", "best_acc", ",", "best_model_wts", ",", "last_model_wts", ",", "all_epochs_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.Trainer.test_model": [[536, 627], ["model.eval", "enumerate", "print", "print", "print", "print", "barbar.Bar", "img.to", "label.cpu.cpu.to", "model", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "preds.cpu.cpu.cpu", "label.cpu.cpu.cpu", "range", "list", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "float", "list", "preds.cpu.cpu.numpy", "label.cpu.cpu.numpy", "float", "float", "float", "preds.cpu.cpu.numpy", "preds.cpu.cpu.numpy", "preds.cpu.cpu.numpy"], "methods", ["None"], ["", "def", "test_model", "(", "self", ",", "model", ",", "dataloaders", ",", "dataset_sizes", ",", "class_num", ",", "network", ")", ":", "\n", "#    # Create folder for saving wrong images", "\n", "#    os.makedirs(wts+'_'+Dataset+'_lstm_Wrong_'+sub_name+'_'+ff+'_'+NN+'_'+'k_1')", "\n", "#    os.makedirs(wts+'_'+Dataset+'_lstm_Pedicle_'+sub_name+'_'+ff+'_'+NN+'_'+'k_1')            ", "\n", "#Setup model", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "# General accuracy", "\n", "running_corrects", "=", "0", "\n", "\n", "# Accuarcy of single class", "\n", "normal_running_corrects", "=", "0", "\n", "pneumonia_running_corrects", "=", "0", "\n", "COVID_running_corrects", "=", "0", "\n", "# Pedicle_running_corrects = 0", "\n", "\n", "count", "=", "0", "\n", "# Do test", "\n", "for", "index", ",", "data", "in", "enumerate", "(", "Bar", "(", "dataloaders", ")", ")", ":", "\n", "#get inputs", "\n", "                ", "img", ",", "label", ",", "img_path", "=", "data", "\n", "img_v", "=", "img", ".", "to", "(", "device", ")", "\n", "label_v", "=", "label", ".", "to", "(", "device", ")", "\n", "# make prediction", "\n", "prediction", "=", "model", "(", "img_v", ")", "\n", "#        prediction = model_conv(img_v) # Used for test, comment when in real ", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "prediction", ".", "data", ",", "1", ")", "\n", "\n", "# statistics", "\n", "running_corrects", "+=", "torch", ".", "sum", "(", "preds", "==", "label_v", ")", "\n", "# from GPU to CPU", "\n", "preds", "=", "preds", ".", "cpu", "(", ")", "\n", "label", "=", "label", ".", "cpu", "(", ")", "\n", "\n", "if", "index", "==", "0", ":", "\n", "                    ", "labell", "=", "label", "\n", "predd", "=", "preds", "\n", "scores", "=", "prediction", ".", "data", "\n", "paths", "=", "list", "(", "img_path", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "labell", "=", "torch", ".", "cat", "(", "(", "labell", ",", "label", ")", ",", "dim", "=", "0", ")", "\n", "predd", "=", "torch", ".", "cat", "(", "(", "predd", ",", "preds", ")", ",", "dim", "=", "0", ")", "\n", "scores", "=", "torch", ".", "cat", "(", "(", "scores", ",", "prediction", ".", "data", ")", ",", "dim", "=", "0", ")", "\n", "paths", "=", "paths", "+", "list", "(", "img_path", ")", "\n", "\n", "\n", "#        temp = image_datasets['test'].imgs        ", "\n", "# Calculate Class accuracy", "\n", "", "for", "i", "in", "range", "(", "len", "(", "preds", ")", ")", ":", "\n", "                    ", "if", "preds", ".", "numpy", "(", ")", "[", "i", "]", "==", "label", ".", "numpy", "(", ")", "[", "i", "]", ":", "\n", "                        ", "if", "preds", ".", "numpy", "(", ")", "[", "i", "]", "==", "0", ":", "\n", "                            ", "normal_running_corrects", "=", "normal_running_corrects", "+", "1", "\n", "", "elif", "preds", ".", "numpy", "(", ")", "[", "i", "]", "==", "1", ":", "\n", "                            ", "pneumonia_running_corrects", "=", "pneumonia_running_corrects", "+", "1", "\n", "", "elif", "preds", ".", "numpy", "(", ")", "[", "i", "]", "==", "2", ":", "\n", "                            ", "COVID_running_corrects", "=", "COVID_running_corrects", "+", "1", "\n", "# else:", "\n", "#     Pedicle_running_corrects = Pedicle_running_corrects+1", "\n", "\n", "# count how many images", "\n", "", "", "", "count", "=", "count", "+", "1", "\n", "\n", "# Overall accuracy                ", "\n", "", "overall_acc", "=", "(", "float", "(", "running_corrects", ")", "/", "dataset_sizes", ")", "*", "100", "\n", "print", "(", "running_corrects", ",", "dataset_sizes", ")", "\n", "# Each class accuracy", "\n", "if", "class_num", "[", "0", "]", "!=", "0", ":", "\n", "                ", "normal_acc", "=", "[", "(", "float", "(", "normal_running_corrects", ")", "/", "class_num", "[", "0", "]", ")", "*", "100", "]", "# Accuracy for single K", "\n", "", "else", ":", "\n", "                ", "normal_acc", "=", "[", "0.", "]", "\n", "\n", "", "if", "class_num", "[", "1", "]", "!=", "0", ":", "\n", "                ", "pneumonia_acc", "=", "[", "(", "float", "(", "pneumonia_running_corrects", ")", "/", "class_num", "[", "1", "]", ")", "*", "100", "]", "\n", "", "else", ":", "\n", "                ", "pneumonia_acc", "=", "[", "0.", "]", "\n", "\n", "", "if", "class_num", "[", "2", "]", "!=", "0", ":", "\n", "                ", "COVID_acc", "=", "[", "(", "float", "(", "COVID_running_corrects", ")", "/", "class_num", "[", "2", "]", ")", "*", "100", "]", "\n", "", "else", ":", "\n", "                ", "COVID_acc", "=", "[", "0.", "]", "\n", "\n", "# Pedicle_acc = [(float(Pedicle_running_corrects) / class_num[3])*100]", "\n", "\n", "# Combine each class together", "\n", "", "Class_acc", "=", "normal_acc", "+", "pneumonia_acc", "+", "COVID_acc", "\n", "print", "(", "network", "+", "'_'", "+", "'Single_K_normal_Acc: %.2f, Single_K_pneumonia_Acc: %.2f, Single_K_COVID_acc: %.2f'", "%", "\n", "(", "normal_acc", "[", "0", "]", ",", "pneumonia_acc", "[", "0", "]", ",", "COVID_acc", "[", "0", "]", ")", ")", "\n", "print", "(", "network", "+", "'_'", "+", "'Overall_acc: %.2f'", "%", "(", "overall_acc", ")", ")", "\n", "print", "(", "'-'", "*", "30", ")", "\n", "\n", "return", "Class_acc", ",", "overall_acc", ",", "predd", ",", "labell", ",", "paths", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.Trainer.test_latefusion_model": [[628, 728], ["model1.eval", "model2.eval", "enumerate", "print", "print", "print", "barbar.Bar", "img_1.to", "img_2.to", "label.cpu.cpu.to", "model1", "model2", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "preds.cpu.cpu.cpu", "label.cpu.cpu.cpu", "range", "list", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "float", "list", "preds.cpu.cpu.numpy", "label.cpu.cpu.numpy", "float", "float", "float", "preds.cpu.cpu.numpy", "preds.cpu.cpu.numpy", "preds.cpu.cpu.numpy"], "methods", ["None"], ["", "def", "test_latefusion_model", "(", "self", ",", "model1", ",", "model2", ",", "dataloaders", ",", "dataset_sizes", ",", "class_num", ",", "network", ")", ":", "\n", "\n", "            ", "model1", ".", "eval", "(", ")", "\n", "model2", ".", "eval", "(", ")", "\n", "# General accuracy", "\n", "running_corrects", "=", "0", "\n", "\n", "# Accuarcy of single class", "\n", "normal_running_corrects", "=", "0", "\n", "pneumonia_running_corrects", "=", "0", "\n", "COVID_running_corrects", "=", "0", "\n", "# Pedicle_running_corrects = 0", "\n", "\n", "count", "=", "0", "\n", "# Do test", "\n", "for", "index", ",", "data", "in", "enumerate", "(", "Bar", "(", "dataloaders", ")", ")", ":", "\n", "#get inputs", "\n", "                ", "img_1", ",", "img_2", ",", "label", ",", "img_path", "=", "data", "\n", "img_1_v", "=", "img_1", ".", "to", "(", "device", ")", "\n", "img_2_v", "=", "img_2", ".", "to", "(", "device", ")", "\n", "label_v", "=", "label", ".", "to", "(", "device", ")", "\n", "# make prediction", "\n", "prediction1", "=", "model1", "(", "img_1_v", ")", "\n", "prediction2", "=", "model2", "(", "img_2_v", ")", "\n", "#        prediction = model_conv(img_v) # Used for test, comment when in real", "\n", "\n", "prediction", "=", "prediction1", "+", "prediction2", "\n", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "prediction", ".", "data", ",", "1", ")", "\n", "\n", "# statistics", "\n", "running_corrects", "+=", "torch", ".", "sum", "(", "preds", "==", "label_v", ")", "\n", "# from GPU to CPU", "\n", "preds", "=", "preds", ".", "cpu", "(", ")", "\n", "label", "=", "label", ".", "cpu", "(", ")", "\n", "\n", "if", "index", "==", "0", ":", "\n", "                    ", "labell", "=", "label", "\n", "predd", "=", "preds", "\n", "scores", "=", "prediction", ".", "data", "\n", "paths", "=", "list", "(", "img_path", ")", "\n", "# paths_2 = list(img_path_2)", "\n", "\n", "", "else", ":", "\n", "                    ", "labell", "=", "torch", ".", "cat", "(", "(", "labell", ",", "label", ")", ",", "dim", "=", "0", ")", "\n", "predd", "=", "torch", ".", "cat", "(", "(", "predd", ",", "preds", ")", ",", "dim", "=", "0", ")", "\n", "scores", "=", "torch", ".", "cat", "(", "(", "scores", ",", "prediction", ".", "data", ")", ",", "dim", "=", "0", ")", "\n", "paths", "=", "paths", "+", "list", "(", "img_path", ")", "\n", "# paths_2 = paths_2+list(img_path_2)", "\n", "\n", "\n", "#        temp = image_datasets['test'].imgs        ", "\n", "# Calculate Class accuracy", "\n", "", "for", "i", "in", "range", "(", "len", "(", "preds", ")", ")", ":", "\n", "                    ", "if", "preds", ".", "numpy", "(", ")", "[", "i", "]", "==", "label", ".", "numpy", "(", ")", "[", "i", "]", ":", "\n", "                        ", "if", "preds", ".", "numpy", "(", ")", "[", "i", "]", "==", "0", ":", "\n", "                            ", "normal_running_corrects", "=", "normal_running_corrects", "+", "1", "\n", "", "elif", "preds", ".", "numpy", "(", ")", "[", "i", "]", "==", "1", ":", "\n", "                            ", "pneumonia_running_corrects", "=", "pneumonia_running_corrects", "+", "1", "\n", "", "elif", "preds", ".", "numpy", "(", ")", "[", "i", "]", "==", "2", ":", "\n", "                            ", "COVID_running_corrects", "=", "COVID_running_corrects", "+", "1", "\n", "# else:", "\n", "#     Pedicle_running_corrects = Pedicle_running_corrects+1", "\n", "\n", "# count how many images", "\n", "", "", "", "count", "=", "count", "+", "1", "\n", "\n", "# Overall accuracy                ", "\n", "", "overall_acc", "=", "(", "float", "(", "running_corrects", ")", "/", "dataset_sizes", ")", "*", "100", "\n", "# Each class accuracy", "\n", "# normal_acc = [(float(normal_running_corrects) / class_num[0])*100] # Accuracy for single K    ", "\n", "# pneumonia_acc = [(float(pneumonia_running_corrects) / class_num[1])*100]", "\n", "# COVID_acc = [(float(COVID_running_corrects) / class_num[2])*100]", "\n", "# # Pedicle_acc = [(float(Pedicle_running_corrects) / class_num[3])*100]", "\n", "\n", "# Each class accuracy", "\n", "if", "class_num", "[", "0", "]", "!=", "0", ":", "\n", "                ", "normal_acc", "=", "[", "(", "float", "(", "normal_running_corrects", ")", "/", "class_num", "[", "0", "]", ")", "*", "100", "]", "# Accuracy for single K", "\n", "", "else", ":", "\n", "                ", "normal_acc", "=", "[", "0.", "]", "\n", "\n", "", "if", "class_num", "[", "1", "]", "!=", "0", ":", "\n", "                ", "pneumonia_acc", "=", "[", "(", "float", "(", "pneumonia_running_corrects", ")", "/", "class_num", "[", "1", "]", ")", "*", "100", "]", "\n", "", "else", ":", "\n", "                ", "pneumonia_acc", "=", "[", "0.", "]", "\n", "\n", "", "if", "class_num", "[", "2", "]", "!=", "0", ":", "\n", "                ", "COVID_acc", "=", "[", "(", "float", "(", "COVID_running_corrects", ")", "/", "class_num", "[", "2", "]", ")", "*", "100", "]", "\n", "", "else", ":", "\n", "                ", "COVID_acc", "=", "[", "0.", "]", "\n", "\n", "\n", "# Combine each class together", "\n", "", "Class_acc", "=", "normal_acc", "+", "pneumonia_acc", "+", "COVID_acc", "\n", "print", "(", "network", "+", "'_'", "+", "'Single_K_normal_Acc: %.2f, Single_K_pneumonia_Acc: %.2f, Single_K_COVID_acc: %.2f'", "%", "\n", "(", "normal_acc", "[", "0", "]", ",", "pneumonia_acc", "[", "0", "]", ",", "COVID_acc", "[", "0", "]", ")", ")", "\n", "print", "(", "network", "+", "'_'", "+", "'Overall_acc: %.2f'", "%", "(", "overall_acc", ")", ")", "\n", "print", "(", "'-'", "*", "30", ")", "\n", "\n", "return", "Class_acc", ",", "overall_acc", ",", "predd", ",", "labell", ",", "paths", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.Trainer.test_latefusion_1model": [[729, 812], ["model1.eval", "enumerate", "print", "print", "print", "barbar.Bar", "img_1.to", "img_2.to", "label.cpu.cpu.to", "model1", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "preds.cpu.cpu.cpu", "label.cpu.cpu.cpu", "range", "list", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "float", "list", "float", "float", "float", "preds.cpu.cpu.numpy", "label.cpu.cpu.numpy", "preds.cpu.cpu.numpy", "preds.cpu.cpu.numpy", "preds.cpu.cpu.numpy"], "methods", ["None"], ["", "def", "test_latefusion_1model", "(", "self", ",", "model1", ",", "dataloaders", ",", "dataset_sizes", ",", "class_num", ",", "network", ")", ":", "\n", "\n", "            ", "model1", ".", "eval", "(", ")", "\n", "# model2.eval()", "\n", "# General accuracy", "\n", "running_corrects", "=", "0", "\n", "\n", "# Accuarcy of single class", "\n", "normal_running_corrects", "=", "0", "\n", "pneumonia_running_corrects", "=", "0", "\n", "COVID_running_corrects", "=", "0", "\n", "# Pedicle_running_corrects = 0", "\n", "\n", "count", "=", "0", "\n", "# Do test", "\n", "for", "index", ",", "data", "in", "enumerate", "(", "Bar", "(", "dataloaders", ")", ")", ":", "\n", "#get inputs", "\n", "                ", "img_1", ",", "img_2", ",", "label", ",", "img_path", "=", "data", "\n", "img_1_v", "=", "img_1", ".", "to", "(", "device", ")", "\n", "img_2_v", "=", "img_2", ".", "to", "(", "device", ")", "\n", "label_v", "=", "label", ".", "to", "(", "device", ")", "\n", "# make prediction", "\n", "prediction1", "=", "model1", "(", "img_1_v", ",", "img_2_v", ")", "\n", "# prediction2 = model2(img_2_v)", "\n", "#        prediction = model_conv(img_v) # Used for test, comment when in real", "\n", "\n", "prediction", "=", "prediction1", "\n", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "prediction", ".", "data", ",", "1", ")", "\n", "\n", "# statistics", "\n", "running_corrects", "+=", "torch", ".", "sum", "(", "preds", "==", "label_v", ")", "\n", "# from GPU to CPU", "\n", "preds", "=", "preds", ".", "cpu", "(", ")", "\n", "label", "=", "label", ".", "cpu", "(", ")", "\n", "\n", "if", "index", "==", "0", ":", "\n", "                    ", "labell", "=", "label", "\n", "predd", "=", "preds", "\n", "scores", "=", "prediction", ".", "data", "\n", "paths", "=", "list", "(", "img_path", ")", "\n", "# paths_2 = list(img_path_2)", "\n", "\n", "", "else", ":", "\n", "                    ", "labell", "=", "torch", ".", "cat", "(", "(", "labell", ",", "label", ")", ",", "dim", "=", "0", ")", "\n", "predd", "=", "torch", ".", "cat", "(", "(", "predd", ",", "preds", ")", ",", "dim", "=", "0", ")", "\n", "scores", "=", "torch", ".", "cat", "(", "(", "scores", ",", "prediction", ".", "data", ")", ",", "dim", "=", "0", ")", "\n", "paths", "=", "paths", "+", "list", "(", "img_path", ")", "\n", "# paths_2 = paths_2+list(img_path_2)", "\n", "\n", "\n", "#        temp = image_datasets['test'].imgs        ", "\n", "# Calculate Class accuracy", "\n", "", "for", "i", "in", "range", "(", "len", "(", "preds", ")", ")", ":", "\n", "                    ", "if", "preds", ".", "numpy", "(", ")", "[", "i", "]", "==", "label", ".", "numpy", "(", ")", "[", "i", "]", ":", "\n", "                        ", "if", "preds", ".", "numpy", "(", ")", "[", "i", "]", "==", "0", ":", "\n", "                            ", "normal_running_corrects", "=", "normal_running_corrects", "+", "1", "\n", "", "elif", "preds", ".", "numpy", "(", ")", "[", "i", "]", "==", "1", ":", "\n", "                            ", "pneumonia_running_corrects", "=", "pneumonia_running_corrects", "+", "1", "\n", "", "elif", "preds", ".", "numpy", "(", ")", "[", "i", "]", "==", "2", ":", "\n", "                            ", "COVID_running_corrects", "=", "COVID_running_corrects", "+", "1", "\n", "# else:", "\n", "#     Pedicle_running_corrects = Pedicle_running_corrects+1", "\n", "\n", "# count how many images", "\n", "", "", "", "count", "=", "count", "+", "1", "\n", "\n", "# Overall accuracy                ", "\n", "", "overall_acc", "=", "(", "float", "(", "running_corrects", ")", "/", "dataset_sizes", ")", "*", "100", "\n", "# Each class accuracy", "\n", "normal_acc", "=", "[", "(", "float", "(", "normal_running_corrects", ")", "/", "class_num", "[", "0", "]", ")", "*", "100", "]", "# Accuracy for single K    ", "\n", "pneumonia_acc", "=", "[", "(", "float", "(", "pneumonia_running_corrects", ")", "/", "class_num", "[", "1", "]", ")", "*", "100", "]", "\n", "COVID_acc", "=", "[", "(", "float", "(", "COVID_running_corrects", ")", "/", "class_num", "[", "2", "]", ")", "*", "100", "]", "\n", "# Pedicle_acc = [(float(Pedicle_running_corrects) / class_num[3])*100]", "\n", "\n", "# Combine each class together", "\n", "Class_acc", "=", "normal_acc", "+", "pneumonia_acc", "+", "COVID_acc", "\n", "print", "(", "network", "+", "'_'", "+", "'Single_K_normal_Acc: %.2f, Single_K_pneumonia_Acc: %.2f, Single_K_COVID_acc: %.2f'", "%", "\n", "(", "normal_acc", "[", "0", "]", ",", "pneumonia_acc", "[", "0", "]", ",", "COVID_acc", "[", "0", "]", ")", ")", "\n", "print", "(", "network", "+", "'_'", "+", "'Overall_acc: %.2f'", "%", "(", "overall_acc", ")", ")", "\n", "print", "(", "'-'", "*", "30", ")", "\n", "\n", "return", "Class_acc", ",", "overall_acc", ",", "predd", ",", "labell", ",", "paths", ",", "scores", "", "", "", ""]], "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.online_mean_and_sd": [[104, 122], ["enumerate", "barbar.Bar", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "function", ["None"], ["", "", "def", "online_mean_and_sd", "(", "loader", ")", ":", "\n", "    ", "\"\"\"Compute the mean and sd in an online fashion\n\n        Var[x] = E[X^2] - E^2[X]\n    \"\"\"", "\n", "\n", "channels_sum", ",", "channels_squared_sum", ",", "num_batches", "=", "0", ",", "0", ",", "0", "\n", "\n", "for", "iidx", ",", "content", "in", "enumerate", "(", "Bar", "(", "loader", ")", ")", ":", "\n", "        ", "data", ",", "_", ",", "_", "=", "content", "\n", "channels_sum", "+=", "torch", ".", "mean", "(", "data", ",", "dim", "=", "[", "0", ",", "2", ",", "3", "]", ")", "\n", "channels_squared_sum", "+=", "torch", ".", "mean", "(", "data", "**", "2", ",", "dim", "=", "[", "0", ",", "2", ",", "3", "]", ")", "\n", "num_batches", "+=", "1", "\n", "\n", "", "mean", "=", "channels_sum", "/", "num_batches", "\n", "std", "=", "(", "channels_squared_sum", "/", "num_batches", "-", "mean", "**", "2", ")", "**", "0.5", "\n", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.models.fusion_online_mean_and_sd": [[123, 150], ["enumerate", "barbar.Bar", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "function", ["None"], ["", "def", "fusion_online_mean_and_sd", "(", "loader", ")", ":", "\n", "    ", "\"\"\"Compute the mean and sd in an online fashion\n\n        Var[x] = E[X^2] - E^2[X]\n    \"\"\"", "\n", "\n", "channels_sum", ",", "channels_squared_sum", ",", "num_batches", "=", "0", ",", "0", ",", "0", "\n", "channels_sum2", ",", "channels_squared_sum2", ",", "num_batches2", "=", "0", ",", "0", ",", "0", "\n", "\n", "for", "iidx", ",", "content", "in", "enumerate", "(", "Bar", "(", "loader", ")", ")", ":", "\n", "        ", "data", ",", "data2", ",", "_", ",", "_", "=", "content", "\n", "\n", "channels_sum", "+=", "torch", ".", "mean", "(", "data", ",", "dim", "=", "[", "0", ",", "2", ",", "3", "]", ")", "\n", "channels_squared_sum", "+=", "torch", ".", "mean", "(", "data", "**", "2", ",", "dim", "=", "[", "0", ",", "2", ",", "3", "]", ")", "\n", "num_batches", "+=", "1", "\n", "\n", "channels_sum2", "+=", "torch", ".", "mean", "(", "data2", ",", "dim", "=", "[", "0", ",", "2", ",", "3", "]", ")", "\n", "channels_squared_sum2", "+=", "torch", ".", "mean", "(", "data2", "**", "2", ",", "dim", "=", "[", "0", ",", "2", ",", "3", "]", ")", "\n", "num_batches2", "+=", "1", "\n", "\n", "", "mean", "=", "channels_sum", "/", "num_batches", "\n", "std", "=", "(", "channels_squared_sum", "/", "num_batches", "-", "mean", "**", "2", ")", "**", "0.5", "\n", "\n", "mean2", "=", "channels_sum2", "/", "num_batches2", "\n", "std2", "=", "(", "channels_squared_sum2", "/", "num_batches2", "-", "mean2", "**", "2", ")", "**", "0.5", "\n", "\n", "return", "mean", ",", "std", ",", "mean2", ",", "std2", "\n", "\n"]], "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.Fusion_models.Late_Fusion_Net.__init__": [[23, 76], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "list", "list", "my_model1.children", "my_model2.children", "list", "list", "my_model1.children", "my_model2.children"], "methods", ["home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.Fusion_models.Late_Fusion_Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "NN", ",", "my_model1", ",", "my_model2", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Late_Fusion_Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "NN", "=", "NN", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "if", "self", ".", "NN", "==", "'Res50'", ":", "\n", "                ", "self", ".", "feature1", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "my_model1", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "self", ".", "feature2", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "my_model2", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "\n", "self", ".", "classifier1", "=", "my_model1", ".", "fc", "\n", "self", ".", "classifier2", "=", "my_model2", ".", "fc", "\n", "\n", "", "elif", "self", ".", "NN", "==", "'xception'", "or", "self", ".", "NN", "==", "'inceptionresnetv2'", ":", "\n", "                ", "self", ".", "feature1", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "my_model1", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "self", ".", "feature2", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "my_model2", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "\n", "self", ".", "classifier1", "=", "my_model1", ".", "last_linear", "\n", "self", ".", "classifier2", "=", "my_model2", ".", "last_linear", "\n", "\n", "# self.classifier3 = nn.Linear(self.embedding_dim, self.num_classes)", "\n", "\n", "\n", "", "elif", "self", ".", "NN", "==", "'efficientnet-b4'", ":", "\n", "                ", "self", ".", "feature1", "=", "my_model1", "\n", "self", ".", "feature2", "=", "my_model2", "\n", "\n", "self", ".", "avgpool", "=", "my_model1", ".", "_avg_pooling", "\n", "self", ".", "dropout", "=", "my_model1", ".", "_dropout", "\n", "self", ".", "swish", "=", "my_model1", ".", "_swish", "\n", "\n", "# ori_model = EfficientNet.from_pretrained('efficientnet-b4')", "\n", "self", ".", "classifier1", "=", "my_model1", ".", "_fc", "\n", "self", ".", "classifier2", "=", "my_model2", ".", "_fc", "\n", "\n", "# self.classifier2 = nn.Linear(self.embedding_dim, num_classes)", "\n", "\n", "# else:           ", "\n", "", "elif", "self", ".", "NN", "==", "'Alexnet'", "or", "self", ".", "NN", "==", "'Vgg16bn'", ":", "\n", "            ", "self", ".", "feature1", "=", "my_model1", ".", "features", "\n", "self", ".", "feature2", "=", "my_model2", ".", "features", "\n", "\n", "self", ".", "avgpool", "=", "my_model1", ".", "avgpool", "\n", "\n", "self", ".", "classifier1", "=", "my_model1", ".", "classifier", "\n", "self", ".", "classifier2", "=", "my_model2", ".", "classifier", "\n", "\n", "\n", "", "elif", "self", ".", "NN", "==", "'Vgg16bn_bn_conv'", ":", "\n", "            ", "self", ".", "feature1", "=", "my_model1", ".", "features", "\n", "self", ".", "feature2", "=", "my_model2", ".", "features", "\n", "\n", "self", ".", "classifier1", "=", "my_model1", ".", "classifier", "\n", "self", ".", "classifier2", "=", "my_model2", ".", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.Fusion_models.Late_Fusion_Net.forward": [[78, 155], ["Fusion_models.Late_Fusion_Net.feature1.extract_features", "Fusion_models.Late_Fusion_Net.feature2.extract_features", "Fusion_models.Late_Fusion_Net.feature1", "Fusion_models.Late_Fusion_Net.feature2", "Fusion_models.Late_Fusion_Net.avgpool", "Fusion_models.Late_Fusion_Net.view", "Fusion_models.Late_Fusion_Net.avgpool", "Fusion_models.Late_Fusion_Net.view", "Fusion_models.Late_Fusion_Net.classifier1", "Fusion_models.Late_Fusion_Net.classifier2", "Fusion_models.Late_Fusion_Net.size", "Fusion_models.Late_Fusion_Net.size", "Fusion_models.Late_Fusion_Net.classifier1", "torch.avg_pool2d().squeeze().squeeze", "torch.avg_pool2d().squeeze().squeeze", "torch.avg_pool2d().squeeze().squeeze", "Fusion_models.Late_Fusion_Net.classifier2", "torch.avg_pool2d().squeeze().squeeze", "torch.avg_pool2d().squeeze().squeeze", "torch.avg_pool2d().squeeze().squeeze", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "Fusion_models.Late_Fusion_Net.view", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "Fusion_models.Late_Fusion_Net.view", "Fusion_models.Late_Fusion_Net.classifier1", "Fusion_models.Late_Fusion_Net.classifier2", "torch.avg_pool2d().squeeze", "torch.avg_pool2d().squeeze", "torch.avg_pool2d().squeeze", "torch.avg_pool2d().squeeze", "torch.avg_pool2d().squeeze", "torch.avg_pool2d().squeeze", "Fusion_models.Late_Fusion_Net.size", "Fusion_models.Late_Fusion_Net.size", "Fusion_models.Late_Fusion_Net.view", "Fusion_models.Late_Fusion_Net.view", "Fusion_models.Late_Fusion_Net.classifier1", "Fusion_models.Late_Fusion_Net.classifier2", "Fusion_models.Late_Fusion_Net.size", "Fusion_models.Late_Fusion_Net.size", "Fusion_models.Late_Fusion_Net.dropout", "Fusion_models.Late_Fusion_Net.view", "Fusion_models.Late_Fusion_Net.swish", "Fusion_models.Late_Fusion_Net.dropout", "Fusion_models.Late_Fusion_Net.view", "Fusion_models.Late_Fusion_Net.swish", "Fusion_models.Late_Fusion_Net.view", "Fusion_models.Late_Fusion_Net.view", "Fusion_models.Late_Fusion_Net.classifier1", "Fusion_models.Late_Fusion_Net.classifier2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "Fusion_models.Late_Fusion_Net.avgpool", "Fusion_models.Late_Fusion_Net.size", "Fusion_models.Late_Fusion_Net.classifier1", "Fusion_models.Late_Fusion_Net.avgpool", "Fusion_models.Late_Fusion_Net.size", "Fusion_models.Late_Fusion_Net.classifier2", "Fusion_models.Late_Fusion_Net.size", "Fusion_models.Late_Fusion_Net.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# if (self.NN == 'Alexnet' or self.NN == 'Vgg16' or self.NN == \"Vgg16bn\"", "\n", "#     or self.NN == 'Vgg19' or self.NN == 'Vgg19bn'):", "\n", "        ", "if", "self", ".", "NN", "==", "'efficientnet-b4'", ":", "\n", "            ", "x1", "=", "self", ".", "feature1", ".", "extract_features", "(", "x", ")", "\n", "x2", "=", "self", ".", "feature2", ".", "extract_features", "(", "y", ")", "\n", "", "else", ":", "\n", "            ", "x1", "=", "self", ".", "feature1", "(", "x", ")", "\n", "x2", "=", "self", ".", "feature2", "(", "y", ")", "\n", "\n", "\n", "# if self.mtd == 'Sum':", "\n", "", "if", "(", "self", ".", "NN", "==", "'Alexnet'", "or", "self", ".", "NN", "==", "'Vgg16'", "or", "self", ".", "NN", "==", "\"Vgg16bn\"", "\n", "or", "self", ".", "NN", "==", "'Vgg19'", "or", "self", ".", "NN", "==", "'Vgg19bn'", ")", ":", "\n", "\n", "            ", "x1", "=", "self", ".", "avgpool", "(", "x1", ")", "\n", "x1", "=", "x1", ".", "view", "(", "x1", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "x2", "=", "self", ".", "avgpool", "(", "x2", ")", "\n", "x2", "=", "x2", ".", "view", "(", "x2", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "x1", "=", "self", ".", "classifier1", "(", "x1", ")", "\n", "x2", "=", "self", ".", "classifier2", "(", "x2", ")", "\n", "\n", "", "elif", "self", ".", "NN", "==", "'Vgg16bn_bn_conv'", ":", "\n", "\n", "            ", "x1", "=", "self", ".", "classifier1", "(", "x1", ")", "\n", "x1", "=", "F", ".", "avg_pool2d", "(", "x1", ",", "(", "x1", ".", "shape", "[", "-", "2", "]", ",", "x1", ".", "shape", "[", "-", "1", "]", ")", ")", ".", "squeeze", "(", "2", ")", ".", "squeeze", "(", "2", ")", "\n", "x2", "=", "self", ".", "classifier2", "(", "x2", ")", "\n", "x2", "=", "F", ".", "avg_pool2d", "(", "x2", ",", "(", "x2", ".", "shape", "[", "-", "2", "]", ",", "x2", ".", "shape", "[", "-", "1", "]", ")", ")", ".", "squeeze", "(", "2", ")", ".", "squeeze", "(", "2", ")", "\n", "\n", "", "elif", "self", ".", "NN", "==", "'xception'", ":", "\n", "\n", "            ", "x1", "=", "F", ".", "adaptive_avg_pool2d", "(", "x1", ",", "(", "1", ",", "1", ")", ")", "\n", "x1", "=", "x1", ".", "view", "(", "x1", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "x2", "=", "F", ".", "adaptive_avg_pool2d", "(", "x2", ",", "(", "1", ",", "1", ")", ")", "\n", "x2", "=", "x2", ".", "view", "(", "x2", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "x1", "=", "self", ".", "classifier1", "(", "x1", ")", "\n", "# x1 = F.softmax(x1)", "\n", "# print (x1)                ", "\n", "x2", "=", "self", ".", "classifier2", "(", "x2", ")", "\n", "# x2 = F.softmax(x2)", "\n", "# print (x2)              ", "\n", "", "elif", "self", ".", "NN", "==", "'inceptionresnetv2'", ":", "\n", "\n", "# x1 = F.adaptive_avg_pool2d(x1, (8, 8))", "\n", "            ", "x1", "=", "x1", ".", "view", "(", "x1", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "# x2 = F.adaptive_avg_pool2d(x2, (8, 8))", "\n", "x2", "=", "x2", ".", "view", "(", "x2", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "x1", "=", "self", ".", "classifier1", "(", "x1", ")", "\n", "x2", "=", "self", ".", "classifier2", "(", "x2", ")", "\n", "\n", "", "elif", "self", ".", "NN", "==", "'efficientnet-b4'", ":", "\n", "\n", "            ", "x1", "=", "self", ".", "dropout", "(", "self", ".", "avgpool", "(", "x1", ")", ")", "\n", "x1", "=", "x1", ".", "view", "(", "x1", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x1", "=", "self", ".", "swish", "(", "self", ".", "classifier1", "(", "x1", ")", ")", "\n", "\n", "x2", "=", "self", ".", "dropout", "(", "self", ".", "avgpool", "(", "x2", ")", ")", "\n", "x2", "=", "x2", ".", "view", "(", "x2", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x2", "=", "self", ".", "swish", "(", "self", ".", "classifier2", "(", "x2", ")", ")", "\n", "\n", "", "else", ":", "# Res50 ", "\n", "\n", "            ", "x1", "=", "x1", ".", "view", "(", "x1", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x2", "=", "x2", ".", "view", "(", "x2", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "x1", "=", "self", ".", "classifier1", "(", "x1", ")", "\n", "x2", "=", "self", ".", "classifier2", "(", "x2", ")", "\n", "\n", "", "x3", "=", "x1", "+", "x2", "\n", "\n", "return", "x3", "", "", "", ""]], "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.transfer_models.Transfer_learning.def_model": [[22, 149], ["transfer_models.set_parameter_requires_grad", "torch.Linear", "torchvision.models.resnet18", "torchvision.models.alexnet", "torch.Linear", "transfer_models.set_parameter_requires_grad", "torchvision.models.resnet34", "torchvision.models.resnet50", "torchvision.models.vgg16_bn", "transfer_models.set_parameter_requires_grad", "torch.Linear", "torchvision.models.vgg16", "transfer_models.set_parameter_requires_grad", "torch.Linear", "torchvision.models.vgg19_bn", "transfer_models.set_parameter_requires_grad", "torch.Linear", "torchvision.models.vgg19", "transfer_models.set_parameter_requires_grad", "torch.Linear", "transfer_models.set_parameter_requires_grad", "print", "torch.Linear", "transfer_models.set_parameter_requires_grad", "torch.Linear", "print", "efficientnet_pytorch.EfficientNet.from_pretrained", "transfer_models.set_parameter_requires_grad", "torch.Linear", "print", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.transfer_models.set_parameter_requires_grad", "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.transfer_models.set_parameter_requires_grad", "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.transfer_models.set_parameter_requires_grad", "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.transfer_models.set_parameter_requires_grad", "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.transfer_models.set_parameter_requires_grad", "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.transfer_models.set_parameter_requires_grad", "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.transfer_models.set_parameter_requires_grad", "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.transfer_models.set_parameter_requires_grad", "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.transfer_models.set_parameter_requires_grad"], ["    ", "def", "def_model", "(", "self", ",", "model_name", ",", "num_classes", ",", "feature_extract", ",", "use_pretrained", ")", ":", "\n", "\n", "        ", "model_ft", "=", "None", "\n", "input_size", "=", "0", "\n", "\n", "if", "model_name", "==", "\"Res18\"", "or", "model_name", "==", "\"Res34\"", "or", "model_name", "==", "\"Res50\"", ":", "\n", "            ", "\"\"\" Resnet18\n            \"\"\"", "\n", "if", "model_name", "==", "\"Res18\"", ":", "\n", "                ", "model_ft", "=", "torchvision", ".", "models", ".", "resnet18", "(", "pretrained", "=", "use_pretrained", ")", "\n", "", "elif", "model_name", "==", "'Res34'", ":", "\n", "                ", "model_ft", "=", "torchvision", ".", "models", ".", "resnet34", "(", "pretrained", "=", "use_pretrained", ")", "\n", "", "else", ":", "\n", "                ", "model_ft", "=", "torchvision", ".", "models", ".", "resnet50", "(", "pretrained", "=", "use_pretrained", ")", "\n", "", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "fc", ".", "in_features", "\n", "model_ft", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "num_classes", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"Alexnet\"", ":", "\n", "            ", "\"\"\" Alexnet\n            \"\"\"", "\n", "model_ft", "=", "torchvision", ".", "models", ".", "alexnet", "(", "pretrained", "=", "use_pretrained", ")", "\n", "num_ftrs", "=", "model_ft", ".", "classifier", "[", "-", "1", "]", ".", "in_features", "\n", "model_ft", ".", "classifier", "[", "-", "1", "]", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "num_classes", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "input_size", "=", "227", "\n", "\n", "# elif model_name == \"Vgg16bn_bn_conv\":", "\n", "#     \"\"\" VGG16_1x1Conv", "\n", "#     \"\"\"", "\n", "#     model_ft = Vgg.Vgg16bn_bn_conv(num_classes)", "\n", "#     set_parameter_requires_grad(model_ft, feature_extract)", "\n", "#     num_ftrs = 512", "\n", "#     input_size = 224", "\n", "\n", "", "elif", "model_name", "==", "\"Vgg16bn\"", ":", "\n", "            ", "\"\"\" VGG11\n            \"\"\"", "\n", "model_ft", "=", "torchvision", ".", "models", ".", "vgg16_bn", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "classifier", "[", "-", "1", "]", ".", "in_features", "\n", "model_ft", ".", "classifier", "[", "-", "1", "]", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "num_classes", ")", "\n", "#        model_ft.classifier = model_ft.classifier[:-1]", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"Vgg16\"", ":", "\n", "            ", "\"\"\" VGG16_nobn\n            \"\"\"", "\n", "model_ft", "=", "torchvision", ".", "models", ".", "vgg16", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "classifier", "[", "-", "1", "]", ".", "in_features", "\n", "model_ft", ".", "classifier", "[", "-", "1", "]", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "num_classes", ")", "\n", "#        model_ft.classifier = model_ft.classifier[:-1]", "\n", "input_size", "=", "224", "\n", "\n", "\n", "", "elif", "model_name", "==", "\"Vgg19bn\"", ":", "\n", "            ", "model_ft", "=", "torchvision", ".", "models", ".", "vgg19_bn", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "classifier", "[", "-", "1", "]", ".", "in_features", "\n", "model_ft", ".", "classifier", "[", "-", "1", "]", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "num_classes", ")", "\n", "#        model_ft.classifier = model_ft.classifier[:-1]", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "\"Vgg19\"", ":", "\n", "            ", "\"\"\" VGG11_bn\n            \"\"\"", "\n", "model_ft", "=", "torchvision", ".", "models", ".", "vgg19", "(", "pretrained", "=", "use_pretrained", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "classifier", "[", "-", "1", "]", ".", "in_features", "\n", "model_ft", ".", "classifier", "[", "-", "1", "]", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "num_classes", ")", "\n", "input_size", "=", "224", "\n", "\n", "", "elif", "model_name", "==", "'xception'", ":", "\n", "            ", "model_ft", "=", "pretrainedmodels", ".", "__dict__", "[", "model_name", "]", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "'imagenet'", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "last_linear", ".", "in_features", "\n", "print", "(", "num_ftrs", ")", "\n", "\n", "# model_ft.last_linear = nn.Sequential(nn.Linear(2048, 1000),", "\n", "#                                     nn.ReLU(inplace=True),", "\n", "#                                     nn.Dropout(p = 0.2),", "\n", "#                                     nn.Linear(1000, 512),", "\n", "#                                     nn.ReLU(inplace=True),", "\n", "#                                     nn.Dropout(p = 0.2),", "\n", "#                                     nn.Linear(512, num_classes))", "\n", "\n", "model_ft", ".", "last_linear", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "num_classes", ")", "\n", "\n", "input_size", "=", "299", "\n", "\n", "", "elif", "model_name", "==", "'inceptionresnetv2'", ":", "\n", "            ", "model_ft", "=", "pretrainedmodels", ".", "__dict__", "[", "model_name", "]", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "'imagenet'", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "last_linear", ".", "in_features", "\n", "# model_ft.last_linear = nn.Sequential(nn.Linear(1536, 1000),", "\n", "#                                     nn.ReLU(inplace=True),", "\n", "#                                     nn.Dropout(p = 0.2),", "\n", "#                                     nn.Linear(1000, 512),", "\n", "#                                     nn.ReLU(inplace=True),", "\n", "#                                     nn.Dropout(p = 0.2),", "\n", "#                                     nn.Linear(512, num_classes))", "\n", "model_ft", ".", "last_linear", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "num_classes", ")", "\n", "print", "(", "num_ftrs", ")", "\n", "input_size", "=", "299", "\n", "\n", "", "elif", "model_name", "==", "'efficientnet-b4'", ":", "\n", "            ", "model_ft", "=", "EfficientNet", ".", "from_pretrained", "(", "'efficientnet-b4'", ")", "\n", "set_parameter_requires_grad", "(", "model_ft", ",", "feature_extract", ")", "\n", "num_ftrs", "=", "model_ft", ".", "_fc", ".", "in_features", "\n", "model_ft", ".", "_fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "num_classes", ")", "\n", "# model_ft._fc = nn.Sequential(nn.Linear(1792, 1000),", "\n", "#                             nn.ReLU(inplace=True),", "\n", "#                             nn.Dropout(p = 0.2),", "\n", "#                             nn.Linear(1000, 512),", "\n", "#                             nn.ReLU(inplace=True),", "\n", "#                             nn.Dropout(p = 0.2),", "\n", "#                             nn.Linear(512, num_classes))", "\n", "print", "(", "num_ftrs", ")", "\n", "input_size", "=", "299", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Invalid model name, exiting...\"", ")", "\n", "exit", "(", ")", "\n", "\n", "", "return", "model_ft", ",", "input_size", ",", "use_pretrained", ",", "num_ftrs", "", "", "", ""]], "home.repos.pwc.inspect_result.endiqq_Multi-Feature-Semi-Supervised-Learning-for-COVID-19-CXR-Images.None.transfer_models.set_parameter_requires_grad": [[16, 20], ["model.parameters"], "function", ["None"], ["def", "set_parameter_requires_grad", "(", "model", ",", "feature_extracting", ")", ":", "\n", "    ", "if", "feature_extracting", "==", "'fc'", ":", "\n", "        ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]]}