{"home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_adv.strip_prefix_if_present": [[21, 29], ["sorted", "collections.OrderedDict", "state_dict.items", "state_dict.keys", "all", "key.startswith", "key.replace"], "function", ["None"], ["def", "strip_prefix_if_present", "(", "state_dict", ",", "prefix", ")", ":", "\n", "    ", "keys", "=", "sorted", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "if", "not", "all", "(", "key", ".", "startswith", "(", "prefix", ")", "for", "key", "in", "keys", ")", ":", "\n", "        ", "return", "state_dict", "\n", "", "stripped_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "stripped_state_dict", "[", "key", ".", "replace", "(", "prefix", ",", "\"\"", ")", "]", "=", "value", "\n", "", "return", "stripped_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_adv.soft_label_cross_entropy": [[30, 36], ["torch.mean", "torch.mean", "torch.log_softmax", "torch.mean", "torch.mean", "soft_label.float", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "soft_label_cross_entropy", "(", "pred", ",", "soft_label", ",", "pixel_weights", "=", "None", ")", ":", "\n", "    ", "N", ",", "C", ",", "H", ",", "W", "=", "pred", ".", "shape", "\n", "loss", "=", "-", "soft_label", ".", "float", "(", ")", "*", "F", ".", "log_softmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "if", "pixel_weights", "is", "None", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "loss", ",", "dim", "=", "1", ")", ")", "\n", "", "return", "torch", ".", "mean", "(", "pixel_weights", "*", "torch", ".", "sum", "(", "loss", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_adv.train": [[37, 264], ["logging.getLogger", "logging.getLogger.info", "core.models.build_feature_extractor", "torch.device", "torch.device", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.to", "core.models.build_classifier", "torch.nn.parallel.DistributedDataParallel.to", "core.models.build_adversarial_discriminator", "torch.nn.parallel.DistributedDataParallel.to", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD.zero_grad", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD.zero_grad", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam.zero_grad", "core.datasets.build_dataset", "core.datasets.build_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "logging.getLogger.info", "core.utils.metric_logger.MetricLogger", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.train", "torch.nn.parallel.DistributedDataParallel.train", "torch.nn.parallel.DistributedDataParallel.train", "time.time", "time.time", "enumerate", "str", "logging.getLogger.info", "print", "print", "torch.distributed.new_group", "torch.distributed.new_group", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.distributed.new_group", "torch.distributed.new_group", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.distributed.new_group", "torch.distributed.new_group", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.distributed.barrier", "torch.distributed.barrier", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.parameters", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.nn.parallel.DistributedDataParallel.parameters", "logging.getLogger.info", "torch.load", "torch.load", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.load_state_dict", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "zip", "core.solver.adjust_learning_rate", "core.solver.adjust_learning_rate", "range", "range", "range", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "torch.optim.Adam.zero_grad", "src_input.cuda.cuda", "src_label.cuda().long.cuda().long", "tgt_input.cuda.cuda", "torch.cat", "torch.cat", "torch.nn.parallel.DistributedDataParallel.", "src_pred.div.div", "torch.nn.CrossEntropyLoss.", "criterion.backward", "torch.softmax().detach", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.", "torch.nn.parallel.DistributedDataParallel.", "tgt_pred.div.div", "torch.softmax", "tgt_soft_label.detach.detach", "torch.nn.parallel.DistributedDataParallel.", "loss_adv_tgt.backward", "torch.optim.SGD.step", "torch.optim.SGD.step", "torch.optim.Adam.zero_grad", "torch.nn.parallel.DistributedDataParallel.", "loss_D_src.backward", "torch.nn.parallel.DistributedDataParallel.", "loss_D_tgt.backward", "torch.optim.Adam.step", "core.utils.metric_logger.MetricLogger.update", "core.utils.metric_logger.MetricLogger.update", "core.utils.metric_logger.MetricLogger.update", "core.utils.metric_logger.MetricLogger.update", "core.utils.metric_logger.MetricLogger.update", "src_input.cuda.size", "time.time", "core.utils.metric_logger.MetricLogger.update", "str", "time.time", "datetime.timedelta", "range", "int", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "range", "range", "train_adv.strip_prefix_if_present", "train_adv.strip_prefix_if_present", "logging.getLogger.info", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "time.time", "len", "len", "len", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.", "train_adv.soft_label_cross_entropy", "src_fea.detach", "train_adv.soft_label_cross_entropy", "feature_extractor.detach", "train_adv.soft_label_cross_entropy", "time.time", "datetime.timedelta", "logging.getLogger.info", "os.path.join", "torch.save", "torch.save", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.device", "torch.device", "train_adv.strip_prefix_if_present", "src_label.cuda().long.cuda", "torch.interpolate", "torch.softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "criterion.item", "loss_adv_tgt.item", "loss_D_src.item", "loss_D_tgt.item", "core.utils.metric_logger.MetricLogger.delimiter.join().format", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "tgt_input.cuda.detach", "loss_D_src.item", "loss_D_tgt.item", "int", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.state_dict", "torch.nn.parallel.DistributedDataParallel.state_dict", "torch.nn.parallel.DistributedDataParallel.state_dict", "torch.optim.SGD.state_dict", "torch.optim.SGD.state_dict", "torch.optim.Adam.state_dict", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "core.utils.metric_logger.MetricLogger.delimiter.join", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "core.configs.cfg"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.build.build_feature_extractor", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.build.build_classifier", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.build.build_adversarial_discriminator", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.build.build_dataset", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.build.build_dataset", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.train", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.train", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.train", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.solver.build.adjust_learning_rate", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.solver.build.adjust_learning_rate", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.strip_prefix_if_present", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.strip_prefix_if_present", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_adv.soft_label_cross_entropy", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_adv.soft_label_cross_entropy", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_adv.soft_label_cross_entropy", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.strip_prefix_if_present"], ["", "def", "train", "(", "cfg", ",", "local_rank", ",", "distributed", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"STEP2.trainer\"", ")", "\n", "logger", ".", "info", "(", "\"Start training\"", ")", "\n", "\n", "feature_extractor", "=", "build_feature_extractor", "(", "cfg", ",", "adv", "=", "True", ")", "\n", "device", "=", "torch", ".", "device", "(", "cfg", ".", "MODEL", ".", "DEVICE", ")", "\n", "feature_extractor", ".", "to", "(", "device", ")", "\n", "\n", "classifier", "=", "build_classifier", "(", "cfg", ")", "\n", "classifier", ".", "to", "(", "device", ")", "\n", "\n", "model_D", "=", "build_adversarial_discriminator", "(", "cfg", ")", "\n", "model_D", ".", "to", "(", "device", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "\n", "        ", "print", "(", "feature_extractor", ")", "\n", "print", "(", "model_D", ")", "\n", "\n", "", "batch_size", "=", "cfg", ".", "SOLVER", ".", "BATCH_SIZE", "//", "2", "\n", "if", "distributed", ":", "\n", "        ", "pg1", "=", "torch", ".", "distributed", ".", "new_group", "(", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", ")", "\n", "\n", "batch_size", "=", "int", "(", "cfg", ".", "SOLVER", ".", "BATCH_SIZE", "/", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "//", "2", "\n", "if", "not", "cfg", ".", "MODEL", ".", "FREEZE_BN", ":", "\n", "            ", "feature_extractor", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "feature_extractor", ")", "\n", "", "feature_extractor", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "feature_extractor", ",", "device_ids", "=", "[", "local_rank", "]", ",", "output_device", "=", "local_rank", ",", "\n", "find_unused_parameters", "=", "True", ",", "process_group", "=", "pg1", "\n", ")", "\n", "pg2", "=", "torch", ".", "distributed", ".", "new_group", "(", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", ")", "\n", "classifier", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "classifier", ",", "device_ids", "=", "[", "local_rank", "]", ",", "output_device", "=", "local_rank", ",", "\n", "find_unused_parameters", "=", "True", ",", "process_group", "=", "pg2", "\n", ")", "\n", "pg3", "=", "torch", ".", "distributed", ".", "new_group", "(", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", ")", "\n", "model_D", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "model_D", ",", "device_ids", "=", "[", "local_rank", "]", ",", "output_device", "=", "local_rank", ",", "\n", "find_unused_parameters", "=", "True", ",", "process_group", "=", "pg3", "\n", ")", "\n", "torch", ".", "autograd", ".", "set_detect_anomaly", "(", "True", ")", "\n", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "\n", "", "optimizer_fea", "=", "torch", ".", "optim", ".", "SGD", "(", "feature_extractor", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "SOLVER", ".", "BASE_LR", ",", "momentum", "=", "cfg", ".", "SOLVER", ".", "MOMENTUM", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ")", "\n", "optimizer_fea", ".", "zero_grad", "(", ")", "\n", "\n", "optimizer_cls", "=", "torch", ".", "optim", ".", "SGD", "(", "classifier", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "SOLVER", ".", "BASE_LR", "*", "10", ",", "momentum", "=", "cfg", ".", "SOLVER", ".", "MOMENTUM", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ")", "\n", "optimizer_cls", ".", "zero_grad", "(", ")", "\n", "\n", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "model_D", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "SOLVER", ".", "BASE_LR_D", ",", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "\n", "save_to_disk", "=", "local_rank", "==", "0", "\n", "\n", "start_epoch", "=", "0", "\n", "iteration", "=", "0", "\n", "\n", "if", "cfg", ".", "resume", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading checkpoint from {}\"", ".", "format", "(", "cfg", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "cfg", ".", "resume", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "model_weights", "=", "checkpoint", "[", "'feature_extractor'", "]", "if", "distributed", "else", "strip_prefix_if_present", "(", "checkpoint", "[", "'feature_extractor'", "]", ",", "'module.'", ")", "\n", "feature_extractor", ".", "load_state_dict", "(", "model_weights", ")", "\n", "classifier_weights", "=", "checkpoint", "[", "'classifier'", "]", "if", "distributed", "else", "strip_prefix_if_present", "(", "checkpoint", "[", "'classifier'", "]", ",", "'module.'", ")", "\n", "classifier", ".", "load_state_dict", "(", "classifier_weights", ")", "\n", "if", "\"model_D\"", "in", "checkpoint", ":", "\n", "            ", "logger", ".", "info", "(", "\"Loading model_D from {}\"", ".", "format", "(", "cfg", ".", "resume", ")", ")", "\n", "model_D_weights", "=", "checkpoint", "[", "'model_D'", "]", "if", "distributed", "else", "strip_prefix_if_present", "(", "checkpoint", "[", "'model_D'", "]", ",", "'module.'", ")", "\n", "model_D", ".", "load_state_dict", "(", "model_D_weights", ")", "\n", "# if \"optimizer_fea\" in checkpoint:", "\n", "#     logger.info(\"Loading optimizer_fea from {}\".format(cfg.resume))", "\n", "#     optimizer_fea.load_state_dict(checkpoint['optimizer_fea'])", "\n", "# if \"optimizer_cls\" in checkpoint:", "\n", "#     logger.info(\"Loading optimizer_cls from {}\".format(cfg.resume))", "\n", "#     optimizer_cls.load_state_dict(checkpoint['optimizer_cls'])", "\n", "# if \"optimizer_D\" in checkpoint:", "\n", "#     logger.info(\"Loading optimizer_D from {}\".format(cfg.resume))", "\n", "#     optimizer_D.load_state_dict(checkpoint['optimizer_D'])", "\n", "# if \"iteration\" in checkpoint:", "\n", "#     iteration = checkpoint['iteration']", "\n", "\n", "", "", "src_train_data", "=", "build_dataset", "(", "cfg", ",", "mode", "=", "'train'", ",", "is_source", "=", "True", ")", "\n", "tgt_train_data", "=", "build_dataset", "(", "cfg", ",", "mode", "=", "'train'", ",", "is_source", "=", "False", ")", "\n", "\n", "if", "distributed", ":", "\n", "        ", "src_train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "src_train_data", ")", "\n", "tgt_train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "tgt_train_data", ")", "\n", "", "else", ":", "\n", "        ", "src_train_sampler", "=", "None", "\n", "tgt_train_sampler", "=", "None", "\n", "\n", "", "src_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "src_train_data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "(", "src_train_sampler", "is", "None", ")", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ",", "sampler", "=", "src_train_sampler", ",", "drop_last", "=", "True", ")", "\n", "tgt_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "tgt_train_data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "(", "tgt_train_sampler", "is", "None", ")", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ",", "sampler", "=", "tgt_train_sampler", ",", "drop_last", "=", "True", ")", "\n", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ")", "\n", "bce_loss", "=", "torch", ".", "nn", ".", "BCELoss", "(", "reduction", "=", "'none'", ")", "\n", "\n", "max_iters", "=", "cfg", ".", "SOLVER", ".", "MAX_ITER", "\n", "source_label", "=", "0", "\n", "target_label", "=", "1", "\n", "logger", ".", "info", "(", "\"Start training\"", ")", "\n", "meters", "=", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "feature_extractor", ".", "train", "(", ")", "\n", "classifier", ".", "train", "(", ")", "\n", "model_D", ".", "train", "(", ")", "\n", "start_training_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "(", "src_input", ",", "src_label", ",", "src_name", ")", ",", "(", "tgt_input", ",", "_", ",", "_", ")", ")", "in", "enumerate", "(", "zip", "(", "src_train_loader", ",", "tgt_train_loader", ")", ")", ":", "\n", "        ", "data_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "\n", "current_lr", "=", "adjust_learning_rate", "(", "cfg", ".", "SOLVER", ".", "LR_METHOD", ",", "cfg", ".", "SOLVER", ".", "BASE_LR", ",", "iteration", ",", "max_iters", ",", "power", "=", "cfg", ".", "SOLVER", ".", "LR_POWER", ")", "\n", "current_lr_D", "=", "adjust_learning_rate", "(", "cfg", ".", "SOLVER", ".", "LR_METHOD", ",", "cfg", ".", "SOLVER", ".", "BASE_LR_D", ",", "iteration", ",", "max_iters", ",", "power", "=", "cfg", ".", "SOLVER", ".", "LR_POWER", ")", "\n", "for", "index", "in", "range", "(", "len", "(", "optimizer_fea", ".", "param_groups", ")", ")", ":", "\n", "            ", "optimizer_fea", ".", "param_groups", "[", "index", "]", "[", "'lr'", "]", "=", "current_lr", "\n", "", "for", "index", "in", "range", "(", "len", "(", "optimizer_cls", ".", "param_groups", ")", ")", ":", "\n", "            ", "optimizer_cls", ".", "param_groups", "[", "index", "]", "[", "'lr'", "]", "=", "current_lr", "*", "10", "\n", "", "for", "index", "in", "range", "(", "len", "(", "optimizer_D", ".", "param_groups", ")", ")", ":", "\n", "            ", "optimizer_D", ".", "param_groups", "[", "index", "]", "[", "'lr'", "]", "=", "current_lr_D", "\n", "\n", "", "optimizer_fea", ".", "zero_grad", "(", ")", "\n", "optimizer_cls", ".", "zero_grad", "(", ")", "\n", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "src_input", "=", "src_input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "src_label", "=", "src_label", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "long", "(", ")", "\n", "tgt_input", "=", "tgt_input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "src_size", "=", "src_input", ".", "shape", "[", "-", "2", ":", "]", "\n", "tgt_size", "=", "tgt_input", ".", "shape", "[", "-", "2", ":", "]", "\n", "inp", "=", "torch", ".", "cat", "(", "[", "src_input", ",", "F", ".", "interpolate", "(", "tgt_input", ".", "detach", "(", ")", ",", "src_size", ")", "]", ")", "\n", "# try:", "\n", "src_fea", "=", "feature_extractor", "(", "inp", ")", "[", ":", "batch_size", "]", "\n", "\n", "src_pred", "=", "classifier", "(", "src_fea", ",", "src_size", ")", "\n", "temperature", "=", "1.8", "\n", "src_pred", "=", "src_pred", ".", "div", "(", "temperature", ")", "\n", "loss_seg", "=", "criterion", "(", "src_pred", ",", "src_label", ")", "\n", "loss_seg", ".", "backward", "(", ")", "\n", "\n", "# generate soft labels", "\n", "src_soft_label", "=", "F", ".", "softmax", "(", "src_pred", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", "\n", "src_soft_label", "[", "src_soft_label", ">", "0.9", "]", "=", "0.9", "\n", "\n", "tgt_fea", "=", "feature_extractor", "(", "tgt_input", ")", "\n", "tgt_pred", "=", "classifier", "(", "tgt_fea", ",", "tgt_size", ")", "\n", "tgt_pred", "=", "tgt_pred", ".", "div", "(", "temperature", ")", "\n", "tgt_soft_label", "=", "F", ".", "softmax", "(", "tgt_pred", ",", "dim", "=", "1", ")", "\n", "\n", "tgt_soft_label", "=", "tgt_soft_label", ".", "detach", "(", ")", "\n", "tgt_soft_label", "[", "tgt_soft_label", ">", "0.9", "]", "=", "0.9", "\n", "\n", "tgt_D_pred", "=", "model_D", "(", "tgt_fea", ",", "tgt_size", ")", "\n", "loss_adv_tgt", "=", "0.001", "*", "soft_label_cross_entropy", "(", "tgt_D_pred", ",", "torch", ".", "cat", "(", "(", "tgt_soft_label", ",", "torch", ".", "zeros_like", "(", "tgt_soft_label", ")", ")", ",", "dim", "=", "1", ")", ")", "\n", "loss_adv_tgt", ".", "backward", "(", ")", "\n", "\n", "optimizer_fea", ".", "step", "(", ")", "\n", "optimizer_cls", ".", "step", "(", ")", "\n", "\n", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "# torch.distributed.barrier()", "\n", "\n", "src_D_pred", "=", "model_D", "(", "src_fea", ".", "detach", "(", ")", ",", "src_size", ")", "\n", "loss_D_src", "=", "0.5", "*", "soft_label_cross_entropy", "(", "src_D_pred", ",", "torch", ".", "cat", "(", "(", "src_soft_label", ",", "torch", ".", "zeros_like", "(", "src_soft_label", ")", ")", ",", "dim", "=", "1", ")", ")", "\n", "loss_D_src", ".", "backward", "(", ")", "\n", "\n", "tgt_D_pred", "=", "model_D", "(", "tgt_fea", ".", "detach", "(", ")", ",", "tgt_size", ")", "\n", "loss_D_tgt", "=", "0.5", "*", "soft_label_cross_entropy", "(", "tgt_D_pred", ",", "torch", ".", "cat", "(", "(", "torch", ".", "zeros_like", "(", "tgt_soft_label", ")", ",", "tgt_soft_label", ")", ",", "dim", "=", "1", ")", ")", "\n", "loss_D_tgt", ".", "backward", "(", ")", "\n", "\n", "# torch.distributed.barrier()", "\n", "\n", "optimizer_D", ".", "step", "(", ")", "\n", "\n", "meters", ".", "update", "(", "loss_seg", "=", "loss_seg", ".", "item", "(", ")", ")", "\n", "meters", ".", "update", "(", "loss_adv_tgt", "=", "loss_adv_tgt", ".", "item", "(", ")", ")", "\n", "meters", ".", "update", "(", "loss_D", "=", "(", "loss_D_src", ".", "item", "(", ")", "+", "loss_D_tgt", ".", "item", "(", ")", ")", ")", "\n", "meters", ".", "update", "(", "loss_D_src", "=", "loss_D_src", ".", "item", "(", ")", ")", "\n", "meters", ".", "update", "(", "loss_D_tgt", "=", "loss_D_tgt", ".", "item", "(", ")", ")", "\n", "\n", "iteration", "=", "iteration", "+", "1", "\n", "\n", "n", "=", "src_input", ".", "size", "(", "0", ")", "\n", "\n", "batch_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "meters", ".", "update", "(", "time", "=", "batch_time", ",", "data", "=", "data_time", ")", "\n", "\n", "eta_seconds", "=", "meters", ".", "time", ".", "global_avg", "*", "(", "cfg", ".", "SOLVER", ".", "STOP_ITER", "-", "iteration", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "\n", "if", "iteration", "%", "20", "==", "0", "or", "iteration", "==", "max_iters", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "meters", ".", "delimiter", ".", "join", "(", "\n", "[", "\n", "\"eta: {eta}\"", ",", "\n", "\"iter: {iter}\"", ",", "\n", "\"{meters}\"", ",", "\n", "\"lr: {lr:.6f}\"", ",", "\n", "\"max mem: {memory:.0f}\"", ",", "\n", "]", "\n", ")", ".", "format", "(", "\n", "eta", "=", "eta_string", ",", "\n", "iter", "=", "iteration", ",", "\n", "meters", "=", "str", "(", "meters", ")", ",", "\n", "lr", "=", "optimizer_fea", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "1024.0", "/", "1024.0", ",", "\n", ")", "\n", ")", "\n", "\n", "", "if", "(", "iteration", "==", "cfg", ".", "SOLVER", ".", "MAX_ITER", "or", "iteration", "%", "cfg", ".", "SOLVER", ".", "CHECKPOINT_PERIOD", "==", "0", ")", "and", "save_to_disk", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"model_iter{:06d}.pth\"", ".", "format", "(", "iteration", ")", ")", "\n", "torch", ".", "save", "(", "{", "'iteration'", ":", "iteration", ",", "'feature_extractor'", ":", "feature_extractor", ".", "state_dict", "(", ")", ",", "'classifier'", ":", "classifier", ".", "state_dict", "(", ")", ",", "'model_D'", ":", "model_D", ".", "state_dict", "(", ")", ",", "'optimizer_fea'", ":", "optimizer_fea", ".", "state_dict", "(", ")", ",", "'optimizer_cls'", ":", "optimizer_cls", ".", "state_dict", "(", ")", ",", "'optimizer_D'", ":", "optimizer_D", ".", "state_dict", "(", ")", "}", ",", "filename", ")", "\n", "\n", "", "if", "iteration", "==", "cfg", ".", "SOLVER", ".", "MAX_ITER", ":", "\n", "            ", "break", "\n", "", "if", "iteration", "==", "cfg", ".", "SOLVER", ".", "STOP_ITER", ":", "\n", "            ", "break", "\n", "\n", "\n", "", "", "total_training_time", "=", "time", ".", "time", "(", ")", "-", "start_training_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "total_training_time", ")", ")", "\n", "logger", ".", "info", "(", "\n", "\"Total training time: {} ({:.4f} s / it)\"", ".", "format", "(", "\n", "total_time_str", ",", "total_training_time", "/", "(", "cfg", ".", "SOLVER", ".", "MAX_ITER", ")", "\n", ")", "\n", ")", "\n", "\n", "return", "feature_extractor", ",", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_adv.run_test": [[265, 322], ["logging.getLogger", "core.utils.misc.AverageMeter", "core.utils.misc.AverageMeter", "core.utils.misc.AverageMeter", "core.utils.misc.AverageMeter", "core.utils.misc.AverageMeter", "core.utils.misc.AverageMeter", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "core.datasets.build_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "feature_extractor.eval", "classifier.eval", "time.time", "numpy.mean", "numpy.mean", "logging.getLogger.info", "os.path.join", "core.utils.misc.mkdir", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.no_grad", "torch.no_grad", "enumerate", "sum", "logging.getLogger.info", "range", "x.cuda.cuda", "y.cuda().long.cuda().long", "classifier", "core.utils.misc.intersectionAndUnionGPU", "core.utils.misc.AverageMeter.update", "time.time", "sum", "logging.getLogger.info", "feature_extractor", "classifier.max", "intersection.cpu().numpy", "union.cpu().numpy", "target.cpu().numpy", "core.utils.misc.AverageMeter.update", "core.utils.misc.AverageMeter.update", "core.utils.misc.AverageMeter.update", "sum", "y.cuda().long.cuda", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "sum", "time.time", "intersection.cpu", "union.cpu", "target.cpu", "core.configs.cfg"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.build.build_dataset", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.mkdir", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.intersectionAndUnionGPU", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update"], ["", "def", "run_test", "(", "cfg", ",", "feature_extractor", ",", "classifier", ",", "local_rank", ",", "distributed", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"STEP2.tester\"", ")", "\n", "if", "local_rank", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "'>>>>>>>>>>>>>>>> Start Testing >>>>>>>>>>>>>>>>'", ")", "\n", "\n", "", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "loss_meter", "=", "AverageMeter", "(", ")", "\n", "intersection_meter", "=", "AverageMeter", "(", ")", "\n", "union_meter", "=", "AverageMeter", "(", ")", "\n", "target_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "if", "distributed", ":", "\n", "        ", "feature_extractor", ",", "classifier", "=", "feature_extractor", ".", "module", ",", "classifier", ".", "module", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "dataset_name", "=", "cfg", ".", "DATASETS", ".", "TEST", "\n", "if", "cfg", ".", "OUTPUT_DIR", ":", "\n", "        ", "output_folder", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "\"inference\"", ",", "dataset_name", ")", "\n", "mkdir", "(", "output_folder", ")", "\n", "\n", "", "test_data", "=", "build_dataset", "(", "cfg", ",", "mode", "=", "'test'", ",", "is_source", "=", "False", ")", "\n", "if", "distributed", ":", "\n", "        ", "test_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "test_data", ")", "\n", "", "else", ":", "\n", "        ", "test_sampler", "=", "None", "\n", "", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_data", ",", "batch_size", "=", "cfg", ".", "TEST", ".", "BATCH_SIZE", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ",", "sampler", "=", "test_sampler", ")", "\n", "feature_extractor", ".", "eval", "(", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "x", ",", "y", ",", "_", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "x", "=", "x", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "y", "=", "y", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "long", "(", ")", "\n", "\n", "size", "=", "y", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "output", "=", "classifier", "(", "feature_extractor", "(", "x", ")", ",", "size", ")", "\n", "output", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "intersection", ",", "union", ",", "target", "=", "intersectionAndUnionGPU", "(", "output", ",", "y", ",", "cfg", ".", "MODEL", ".", "NUM_CLASSES", ",", "cfg", ".", "INPUT", ".", "IGNORE_LABEL", ")", "\n", "if", "distributed", ":", "\n", "                ", "torch", ".", "distributed", ".", "all_reduce", "(", "intersection", ")", ",", "torch", ".", "distributed", ".", "all_reduce", "(", "union", ")", ",", "torch", ".", "distributed", ".", "all_reduce", "(", "target", ")", "\n", "", "intersection", ",", "union", ",", "target", "=", "intersection", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "union", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "intersection_meter", ".", "update", "(", "intersection", ")", ",", "union_meter", ".", "update", "(", "union", ")", ",", "target_meter", ".", "update", "(", "target", ")", "\n", "\n", "accuracy", "=", "sum", "(", "intersection_meter", ".", "val", ")", "/", "(", "sum", "(", "target_meter", ".", "val", ")", "+", "1e-10", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "iou_class", "=", "intersection_meter", ".", "sum", "/", "(", "union_meter", ".", "sum", "+", "1e-10", ")", "\n", "accuracy_class", "=", "intersection_meter", ".", "sum", "/", "(", "target_meter", ".", "sum", "+", "1e-10", ")", "\n", "mIoU", "=", "np", ".", "mean", "(", "iou_class", ")", "\n", "mAcc", "=", "np", ".", "mean", "(", "accuracy_class", ")", "\n", "allAcc", "=", "sum", "(", "intersection_meter", ".", "sum", ")", "/", "(", "sum", "(", "target_meter", ".", "sum", ")", "+", "1e-10", ")", "\n", "if", "local_rank", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "'Val result: mIoU/mAcc/allAcc {:.4f}/{:.4f}/{:.4f}.'", ".", "format", "(", "mIoU", ",", "mAcc", ",", "allAcc", ")", ")", "\n", "for", "i", "in", "range", "(", "cfg", ".", "MODEL", ".", "NUM_CLASSES", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'Class_{} {} Result: iou/accuracy {:.4f}/{:.4f}.'", ".", "format", "(", "i", ",", "test_data", ".", "trainid2name", "[", "i", "]", ",", "iou_class", "[", "i", "]", ",", "accuracy_class", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_adv.main": [[324, 382], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "core.configs.cfg.merge_from_file", "core.configs.cfg.merge_from_list", "core.configs.cfg.freeze", "core.utils.logger.setup_logger", "core.utils.logger.setup_logger.info", "core.utils.logger.setup_logger.info", "core.utils.logger.setup_logger.info", "core.utils.logger.setup_logger.info", "train_adv.train", "int", "torch.cuda.set_device", "torch.cuda.set_device", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "core.utils.misc.mkdir", "open", "core.utils.logger.setup_logger.info", "train_adv.run_test", "cf.read"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.logger.setup_logger", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.train", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.mkdir", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.run_test"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"PyTorch Semantic Segmentation Training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-cfg\"", ",", "\n", "\"--config-file\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "help", "=", "\"path to config file\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--skip-test\"", ",", "\n", "dest", "=", "\"skip_test\"", ",", "\n", "help", "=", "\"Do not test the final model\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "num_gpus", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "args", ".", "distributed", "=", "num_gpus", ">", "1", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "\n", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", "\n", ")", "\n", "\n", "", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "if", "output_dir", ":", "\n", "        ", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "logger", "=", "setup_logger", "(", "\"STEP2\"", ",", "output_dir", ",", "args", ".", "local_rank", ")", "\n", "logger", ".", "info", "(", "\"Using {} GPUs\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "logger", ".", "info", "(", "\"Loaded configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "with", "open", "(", "args", ".", "config_file", ",", "\"r\"", ")", "as", "cf", ":", "\n", "        ", "config_str", "=", "\"\\n\"", "+", "cf", ".", "read", "(", ")", "\n", "logger", ".", "info", "(", "config_str", ")", "\n", "", "logger", ".", "info", "(", "\"Running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "fea", ",", "cls", "=", "train", "(", "cfg", ",", "args", ".", "local_rank", ",", "args", ".", "distributed", ")", "\n", "\n", "if", "not", "args", ".", "skip_test", ":", "\n", "        ", "run_test", "(", "cfg", ",", "fea", ",", "cls", ",", "args", ".", "local_rank", ",", "args", ".", "distributed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.test_single.strip_prefix_if_present": [[25, 33], ["sorted", "collections.OrderedDict", "state_dict.items", "state_dict.keys", "all", "key.startswith", "key.replace"], "function", ["None"], ["def", "strip_prefix_if_present", "(", "state_dict", ",", "prefix", ")", ":", "\n", "    ", "keys", "=", "sorted", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "if", "not", "all", "(", "key", ".", "startswith", "(", "prefix", ")", "for", "key", "in", "keys", ")", ":", "\n", "        ", "return", "state_dict", "\n", "", "stripped_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "stripped_state_dict", "[", "key", ".", "replace", "(", "prefix", ",", "\"\"", ")", "]", "=", "value", "\n", "", "return", "stripped_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.test_single.inference": [[34, 47], ["torch.interpolate", "torch.softmax", "classifier.unsqueeze", "torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "classifier", "feature_extractor", "torch.flip", "torch.flip", "output[].flip"], "function", ["None"], ["", "def", "inference", "(", "feature_extractor", ",", "classifier", ",", "image", ",", "label", ",", "flip", "=", "True", ")", ":", "\n", "    ", "size", "=", "label", ".", "shape", "[", "-", "2", ":", "]", "\n", "if", "flip", ":", "\n", "        ", "image", "=", "torch", ".", "cat", "(", "[", "image", ",", "torch", ".", "flip", "(", "image", ",", "[", "3", "]", ")", "]", ",", "0", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output", "=", "classifier", "(", "feature_extractor", "(", "image", ")", ")", "\n", "", "output", "=", "F", ".", "interpolate", "(", "output", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "output", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "if", "flip", ":", "\n", "        ", "output", "=", "(", "output", "[", "0", "]", "+", "output", "[", "1", "]", ".", "flip", "(", "2", ")", ")", "/", "2", "\n", "", "else", ":", "\n", "        ", "output", "=", "output", "[", "0", "]", "\n", "", "return", "output", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.test_single.multi_scale_inference": [[48, 65], ["torch.interpolate", "test_single.inference", "len", "torch.flip", "torch.flip", "test_single.inference", "inference.flip", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.test_multi_weighted.inference", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.test_multi_weighted.inference"], ["", "def", "multi_scale_inference", "(", "feature_extractor", ",", "classifier", ",", "image", ",", "label", ",", "scales", "=", "[", "0.7", ",", "1.0", ",", "1.3", "]", ",", "flip", "=", "True", ")", ":", "\n", "    ", "output", "=", "None", "\n", "size", "=", "image", ".", "shape", "[", "-", "2", ":", "]", "\n", "for", "s", "in", "scales", ":", "\n", "        ", "x", "=", "F", ".", "interpolate", "(", "image", ",", "size", "=", "(", "int", "(", "size", "[", "0", "]", "*", "s", ")", ",", "int", "(", "size", "[", "1", "]", "*", "s", ")", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "pred", "=", "inference", "(", "feature_extractor", ",", "classifier", ",", "x", ",", "label", ",", "flip", "=", "False", ")", "\n", "if", "output", "is", "None", ":", "\n", "            ", "output", "=", "pred", "\n", "", "else", ":", "\n", "            ", "output", "=", "output", "+", "pred", "\n", "", "if", "flip", ":", "\n", "            ", "x_flip", "=", "torch", ".", "flip", "(", "x", ",", "[", "3", "]", ")", "\n", "pred", "=", "inference", "(", "feature_extractor", ",", "classifier", ",", "x_flip", ",", "label", ",", "flip", "=", "False", ")", "\n", "output", "=", "output", "+", "pred", ".", "flip", "(", "3", ")", "\n", "", "", "if", "flip", ":", "\n", "        ", "return", "output", "/", "len", "(", "scales", ")", "/", "2", "\n", "", "return", "output", "/", "len", "(", "scales", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.test_single.transform_color": [[66, 89], ["synthia_to_city.items", "label_copy.copy", "numpy.ones"], "function", ["None"], ["", "def", "transform_color", "(", "pred", ")", ":", "\n", "    ", "synthia_to_city", "=", "{", "\n", "0", ":", "0", ",", "\n", "1", ":", "1", ",", "\n", "2", ":", "2", ",", "\n", "3", ":", "3", ",", "\n", "4", ":", "4", ",", "\n", "5", ":", "5", ",", "\n", "6", ":", "6", ",", "\n", "7", ":", "7", ",", "\n", "8", ":", "8", ",", "\n", "9", ":", "10", ",", "\n", "10", ":", "11", ",", "\n", "11", ":", "12", ",", "\n", "12", ":", "13", ",", "\n", "13", ":", "15", ",", "\n", "14", ":", "17", ",", "\n", "15", ":", "18", ",", "\n", "}", "\n", "label_copy", "=", "255", "*", "np", ".", "ones", "(", "pred", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "v", "in", "synthia_to_city", ".", "items", "(", ")", ":", "\n", "        ", "label_copy", "[", "pred", "==", "k", "]", "=", "v", "\n", "", "return", "label_copy", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.test_single.test": [[90, 169], ["logging.getLogger", "logging.getLogger.info", "torch.device", "torch.device", "core.models.build_feature_extractor", "core.models.build_feature_extractor.to", "core.models.build_classifier", "core.models.build_classifier.to", "core.models.build_feature_extractor.eval", "core.models.build_classifier.eval", "core.utils.misc.AverageMeter", "core.utils.misc.AverageMeter", "core.utils.misc.AverageMeter", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "core.datasets.build_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "core.utils.misc.mkdir", "core.utils.misc.mkdir", "tqdm.tqdm", "numpy.mean", "numpy.mean", "logging.getLogger.info", "range", "logging.getLogger.info", "torch.load", "torch.load", "test_single.strip_prefix_if_present", "core.models.build_feature_extractor.load_state_dict", "test_single.strip_prefix_if_present", "core.models.build_classifier.load_state_dict", "os.path.join", "core.utils.misc.mkdir", "os.path.join", "os.path.join", "x.cuda.cuda", "y.cuda().long.cuda().long", "test_single.inference", "core.utils.misc.intersectionAndUnionGPU", "sum", "logging.getLogger.info", "pred.argmax.max", "intersection.cpu().numpy", "union.cpu().numpy", "target.cpu().numpy", "core.utils.misc.AverageMeter.update", "core.utils.misc.AverageMeter.update", "core.utils.misc.AverageMeter.update", "sum", "pred.argmax.cpu().numpy().squeeze", "numpy.max", "pred.argmax.argmax", "core.utils.misc.get_color_pallete", "core.utils.misc.get_color_pallete.save", "numpy.array", "numpy.array", "cv2.addWeighted", "cv2.imwrite", "sum", "torch.device", "torch.device", "y.cuda().long.cuda", "sum", "os.path.join", "core.utils.misc.get_color_pallete.convert", "PIL.Image.open().convert", "os.path.join", "intersection.cpu", "union.cpu", "target.cpu", "pred.argmax.cpu().numpy", "len", "name[].split", "name[].split", "PIL.Image.open", "pred.argmax.cpu", "core.configs.cfg"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.build.build_feature_extractor", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.build.build_classifier", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.build.build_dataset", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.mkdir", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.mkdir", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.strip_prefix_if_present", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.strip_prefix_if_present", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.mkdir", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.test_multi_weighted.inference", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.intersectionAndUnionGPU", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.get_color_pallete"], ["", "def", "test", "(", "cfg", ",", "saveres", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"FADA.tester\"", ")", "\n", "logger", ".", "info", "(", "\"Start testing\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "cfg", ".", "MODEL", ".", "DEVICE", ")", "\n", "\n", "feature_extractor", "=", "build_feature_extractor", "(", "cfg", ")", "\n", "feature_extractor", ".", "to", "(", "device", ")", "\n", "\n", "classifier", "=", "build_classifier", "(", "cfg", ")", "\n", "classifier", ".", "to", "(", "device", ")", "\n", "\n", "if", "cfg", ".", "resume", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading checkpoint from {}\"", ".", "format", "(", "cfg", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "cfg", ".", "resume", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "feature_extractor_weights", "=", "strip_prefix_if_present", "(", "checkpoint", "[", "'feature_extractor'", "]", ",", "'module.'", ")", "\n", "feature_extractor", ".", "load_state_dict", "(", "feature_extractor_weights", ")", "\n", "classifier_weights", "=", "strip_prefix_if_present", "(", "checkpoint", "[", "'classifier'", "]", ",", "'module.'", ")", "\n", "classifier", ".", "load_state_dict", "(", "classifier_weights", ")", "\n", "\n", "", "feature_extractor", ".", "eval", "(", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "intersection_meter", "=", "AverageMeter", "(", ")", "\n", "union_meter", "=", "AverageMeter", "(", ")", "\n", "target_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "dataset_name", "=", "cfg", ".", "DATASETS", ".", "TEST", "\n", "output_folder", "=", "'.'", "\n", "if", "cfg", ".", "OUTPUT_DIR", ":", "\n", "        ", "output_folder", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "\"inference\"", ")", "\n", "mkdir", "(", "output_folder", ")", "\n", "\n", "", "test_data", "=", "build_dataset", "(", "cfg", ",", "mode", "=", "'test'", ",", "is_source", "=", "False", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_data", ",", "batch_size", "=", "cfg", ".", "TEST", ".", "BATCH_SIZE", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ",", "sampler", "=", "None", ")", "\n", "\n", "mkdir", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "'masks'", ")", ")", "\n", "mkdir", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "'masks_on_images'", ")", ")", "\n", "for", "batch", "in", "tqdm", "(", "test_loader", ")", ":", "\n", "        ", "x", ",", "y", ",", "name", ",", "_", "=", "batch", "\n", "x", "=", "x", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "y", "=", "y", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "long", "(", ")", "\n", "\n", "pred", "=", "inference", "(", "feature_extractor", ",", "classifier", ",", "x", ",", "y", ",", "flip", "=", "False", ")", "\n", "# pred = multi_scale_inference(feature_extractor, classifier, x, y, flip=True)", "\n", "\n", "output", "=", "pred", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "intersection", ",", "union", ",", "target", "=", "intersectionAndUnionGPU", "(", "output", ",", "y", ",", "cfg", ".", "MODEL", ".", "NUM_CLASSES", ",", "cfg", ".", "INPUT", ".", "IGNORE_LABEL", ")", "\n", "intersection", ",", "union", ",", "target", "=", "intersection", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "union", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "intersection_meter", ".", "update", "(", "intersection", ")", ",", "union_meter", ".", "update", "(", "union", ")", ",", "target_meter", ".", "update", "(", "target", ")", "\n", "\n", "accuracy", "=", "sum", "(", "intersection_meter", ".", "val", ")", "/", "(", "sum", "(", "target_meter", ".", "val", ")", "+", "1e-10", ")", "\n", "\n", "if", "saveres", ":", "\n", "            ", "pred", "=", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "pred_max", "=", "np", ".", "max", "(", "pred", ",", "0", ")", "\n", "pred", "=", "pred", ".", "argmax", "(", "0", ")", "\n", "# uncomment the following line when visualizing SYNTHIA->Cityscapes", "\n", "# pred = transform_color(pred)", "\n", "mask", "=", "get_color_pallete", "(", "pred", ",", "\"pascal12\"", ")", "\n", "mask_filename", "=", "name", "[", "0", "]", "if", "len", "(", "name", "[", "0", "]", ".", "split", "(", "\"/\"", ")", ")", "<", "2", "else", "name", "[", "0", "]", ".", "split", "(", "\"/\"", ")", "[", "1", "]", "\n", "mask", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "'masks'", ",", "mask_filename", "+", "'.png'", ")", ")", "\n", "\n", "np_mask", "=", "np", ".", "array", "(", "mask", ".", "convert", "(", "'RGB'", ")", ")", "\n", "im", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "path", "[", "0", "]", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "\n", "added_image", "=", "cv2", ".", "addWeighted", "(", "im", ",", "0.35", ",", "np_mask", ",", "0.65", ",", "0", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "'masks_on_images'", ",", "mask_filename", "+", "'.png'", ")", ",", "added_image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "\n", "", "", "iou_class", "=", "intersection_meter", ".", "sum", "/", "(", "union_meter", ".", "sum", "+", "1e-10", ")", "\n", "accuracy_class", "=", "intersection_meter", ".", "sum", "/", "(", "target_meter", ".", "sum", "+", "1e-10", ")", "\n", "mIoU", "=", "np", ".", "mean", "(", "iou_class", ")", "\n", "mAcc", "=", "np", ".", "mean", "(", "accuracy_class", ")", "\n", "allAcc", "=", "sum", "(", "intersection_meter", ".", "sum", ")", "/", "(", "sum", "(", "target_meter", ".", "sum", ")", "+", "1e-10", ")", "\n", "\n", "logger", ".", "info", "(", "'Val result: mIoU/mAcc/allAcc {:.4f}/{:.4f}/{:.4f}.'", ".", "format", "(", "mIoU", ",", "mAcc", ",", "allAcc", ")", ")", "\n", "for", "i", "in", "range", "(", "cfg", ".", "MODEL", ".", "NUM_CLASSES", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'{} {} iou/accuracy: {:.4f}/{:.4f}.'", ".", "format", "(", "i", ",", "test_data", ".", "trainid2name", "[", "i", "]", ",", "iou_class", "[", "i", "]", ",", "accuracy_class", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.test_single.test_all": [[170, 263], ["logging.getLogger", "logging.getLogger.info", "torch.device", "torch.device", "core.models.build_feature_extractor", "core.models.build_feature_extractor.to", "core.models.build_classifier", "core.models.build_classifier.to", "core.datasets.build_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "sorted", "logging.getLogger.info", "os.listdir", "logging.getLogger.info", "torch.load", "torch.load", "test_single.strip_prefix_if_present", "core.models.build_feature_extractor.load_state_dict", "test_single.strip_prefix_if_present", "core.models.build_classifier.load_state_dict", "core.models.build_feature_extractor.eval", "core.models.build_classifier.eval", "core.utils.misc.AverageMeter", "core.utils.misc.AverageMeter", "core.utils.misc.AverageMeter", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "tqdm.tqdm", "numpy.mean", "numpy.mean", "int", "logging.getLogger.info", "range", "test_stats.append", "open", "enumerate", "fname.endswith", "os.path.join", "core.utils.misc.mkdir", "x.cuda.cuda", "y.cuda().long.cuda().long", "test_single.inference", "core.utils.misc.intersectionAndUnionGPU", "sum", "logging.getLogger.info", "os.path.join", "handle.write", "os.path.join", "core.utils.misc.mkdir", "pred.cpu().numpy().squeeze().argmax.max", "intersection.cpu().numpy", "union.cpu().numpy", "target.cpu().numpy", "core.utils.misc.AverageMeter.update", "core.utils.misc.AverageMeter.update", "core.utils.misc.AverageMeter.update", "sum", "pred.cpu().numpy().squeeze().argmax.cpu().numpy().squeeze().argmax", "core.utils.misc.get_color_pallete", "core.utils.misc.get_color_pallete.save", "sum", "re.findall", "handle.write", "str", "fname.replace", "y.cuda().long.cuda", "sum", "name[].split", "os.path.join", "rec.keys", "intersection.cpu", "union.cpu", "target.cpu", "pred.cpu().numpy().squeeze().argmax.cpu().numpy().squeeze", "list", "pred.cpu().numpy().squeeze().argmax.cpu().numpy", "rec.keys", "pred.cpu().numpy().squeeze().argmax.cpu", "core.configs.cfg"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.build.build_feature_extractor", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.build.build_classifier", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.build.build_dataset", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.strip_prefix_if_present", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.strip_prefix_if_present", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.mkdir", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.test_multi_weighted.inference", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.intersectionAndUnionGPU", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.mkdir", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.get_color_pallete"], ["", "", "def", "test_all", "(", "cfg", ",", "saveres", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"FADA.tester\"", ")", "\n", "logger", ".", "info", "(", "\"Start testing\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "cfg", ".", "MODEL", ".", "DEVICE", ")", "\n", "\n", "feature_extractor", "=", "build_feature_extractor", "(", "cfg", ")", "\n", "feature_extractor", ".", "to", "(", "device", ")", "\n", "\n", "# classifier = build_classifier(cfg)", "\n", "classifier", "=", "build_classifier", "(", "cfg", ")", "\n", "classifier", ".", "to", "(", "device", ")", "\n", "\n", "test_data", "=", "build_dataset", "(", "cfg", ",", "mode", "=", "'test'", ",", "is_source", "=", "False", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_data", ",", "batch_size", "=", "cfg", ".", "TEST", ".", "BATCH_SIZE", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ",", "sampler", "=", "None", ")", "\n", "\n", "test_stats", "=", "[", "]", "\n", "best_iter", "=", "0", "\n", "best_miou", "=", "0", "\n", "\n", "for", "fname", "in", "sorted", "(", "os", ".", "listdir", "(", "cfg", ".", "resume", ")", ")", ":", "\n", "        ", "if", "not", "fname", ".", "endswith", "(", "'.pth'", ")", ":", "\n", "            ", "continue", "\n", "", "logger", ".", "info", "(", "\"Loading checkpoint from {}\"", ".", "format", "(", "cfg", ".", "resume", "+", "'/'", "+", "fname", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "cfg", ".", "resume", "+", "'/'", "+", "fname", ")", "\n", "\n", "feature_extractor_weights", "=", "strip_prefix_if_present", "(", "checkpoint", "[", "'feature_extractor'", "]", ",", "'module.'", ")", "\n", "feature_extractor", ".", "load_state_dict", "(", "feature_extractor_weights", ")", "\n", "classifier_weights", "=", "strip_prefix_if_present", "(", "checkpoint", "[", "'classifier'", "]", ",", "'module.'", ")", "\n", "classifier", ".", "load_state_dict", "(", "classifier_weights", ")", "\n", "\n", "feature_extractor", ".", "eval", "(", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "intersection_meter", "=", "AverageMeter", "(", ")", "\n", "union_meter", "=", "AverageMeter", "(", ")", "\n", "target_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "dataset_name", "=", "cfg", ".", "DATASETS", ".", "TEST", "\n", "output_folder", "=", "'.'", "\n", "if", "cfg", ".", "OUTPUT_DIR", ":", "\n", "            ", "output_folder", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "\"inference\"", ",", "dataset_name", ")", "\n", "mkdir", "(", "output_folder", ")", "\n", "if", "saveres", ":", "\n", "                ", "output_folder", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "\"inference\"", ",", "dataset_name", ",", "fname", ".", "replace", "(", "'.pth'", ",", "''", ")", ")", "\n", "mkdir", "(", "output_folder", ")", "\n", "\n", "", "", "for", "batch", "in", "tqdm", "(", "test_loader", ")", ":", "\n", "            ", "x", ",", "y", ",", "name", "=", "batch", "\n", "x", "=", "x", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "y", "=", "y", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "long", "(", ")", "\n", "\n", "pred", "=", "inference", "(", "feature_extractor", ",", "classifier", ",", "x", ",", "y", ",", "flip", "=", "False", ")", "\n", "\n", "output", "=", "pred", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "intersection", ",", "union", ",", "target", "=", "intersectionAndUnionGPU", "(", "output", ",", "y", ",", "cfg", ".", "MODEL", ".", "NUM_CLASSES", ",", "cfg", ".", "INPUT", ".", "IGNORE_LABEL", ")", "\n", "intersection", ",", "union", ",", "target", "=", "intersection", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "union", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "intersection_meter", ".", "update", "(", "intersection", ")", ",", "union_meter", ".", "update", "(", "union", ")", ",", "target_meter", ".", "update", "(", "target", ")", "\n", "\n", "accuracy", "=", "sum", "(", "intersection_meter", ".", "val", ")", "/", "(", "sum", "(", "target_meter", ".", "val", ")", "+", "1e-10", ")", "\n", "\n", "if", "saveres", ":", "\n", "                ", "pred", "=", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ".", "argmax", "(", "0", ")", "\n", "mask", "=", "get_color_pallete", "(", "pred", ",", "\"city\"", ")", "\n", "mask_filename", "=", "name", "[", "0", "]", ".", "split", "(", "\"/\"", ")", "[", "1", "]", "\n", "mask", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "mask_filename", ")", ")", "\n", "\n", "", "", "iou_class", "=", "intersection_meter", ".", "sum", "/", "(", "union_meter", ".", "sum", "+", "1e-10", ")", "\n", "accuracy_class", "=", "intersection_meter", ".", "sum", "/", "(", "target_meter", ".", "sum", "+", "1e-10", ")", "\n", "mIoU", "=", "np", ".", "mean", "(", "iou_class", ")", "\n", "mAcc", "=", "np", ".", "mean", "(", "accuracy_class", ")", "\n", "allAcc", "=", "sum", "(", "intersection_meter", ".", "sum", ")", "/", "(", "sum", "(", "target_meter", ".", "sum", ")", "+", "1e-10", ")", "\n", "\n", "iter_num", "=", "int", "(", "re", ".", "findall", "(", "r'\\d+'", ",", "fname", ")", "[", "0", "]", ")", "\n", "rec", "=", "{", "'iters'", ":", "iter_num", ",", "'mIoU'", ":", "mIoU", "}", "\n", "logger", ".", "info", "(", "'Val result: mIoU/mAcc/allAcc {:.4f}/{:.4f}/{:.4f}.'", ".", "format", "(", "mIoU", ",", "mAcc", ",", "allAcc", ")", ")", "\n", "for", "i", "in", "range", "(", "cfg", ".", "MODEL", ".", "NUM_CLASSES", ")", ":", "\n", "            ", "rec", "[", "test_data", ".", "trainid2name", "[", "i", "]", "]", "=", "iou_class", "[", "i", "]", "\n", "logger", ".", "info", "(", "'{} {} iou/accuracy: {:.4f}/{:.4f}.'", ".", "format", "(", "i", ",", "test_data", ".", "trainid2name", "[", "i", "]", ",", "iou_class", "[", "i", "]", ",", "accuracy_class", "[", "i", "]", ")", ")", "\n", "", "test_stats", ".", "append", "(", "rec", ")", "\n", "\n", "if", "mIoU", ">", "best_miou", ":", "\n", "            ", "best_iter", "=", "iter_num", "\n", "best_miou", "=", "mIoU", "\n", "\n", "", "", "logger", ".", "info", "(", "'Best result is got at iters {} with mIoU {:.4f}.'", ".", "format", "(", "best_iter", ",", "best_miou", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "'test_results.csv'", ")", ",", "'w'", ")", "as", "handle", ":", "\n", "        ", "for", "i", ",", "rec", "in", "enumerate", "(", "test_stats", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "handle", ".", "write", "(", "','", ".", "join", "(", "list", "(", "rec", ".", "keys", "(", ")", ")", ")", "+", "'\\n'", ")", "\n", "", "line", "=", "[", "str", "(", "rec", "[", "key", "]", ")", "for", "key", "in", "rec", ".", "keys", "(", ")", "]", "\n", "handle", ".", "write", "(", "','", ".", "join", "(", "line", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.test_single.main": [[265, 307], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "core.configs.cfg.merge_from_file", "core.configs.cfg.merge_from_list", "core.configs.cfg.freeze", "os.path.split", "os.path.join", "core.utils.logger.setup_logger", "core.utils.logger.setup_logger.info", "core.utils.logger.setup_logger.info", "core.utils.logger.setup_logger.info", "os.path.isdir", "core.utils.misc.mkdir", "open", "core.utils.logger.setup_logger.info", "test_single.test_all", "test_single.test", "os.path.splitext", "cf.read"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.logger.setup_logger", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.mkdir", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.test_single.test_all", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.test_multi_weighted.test"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"PyTorch Semantic Segmentation Testing\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-cfg\"", ",", "\n", "\"--config-file\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "help", "=", "\"path to config file\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--saveres'", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "'save the result'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "path", ",", "model", "=", "os", ".", "path", ".", "split", "(", "cfg", ".", "resume", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "path", ",", "os", ".", "path", ".", "splitext", "(", "model", ")", "[", "0", "]", ")", "\n", "if", "save_dir", ":", "\n", "        ", "mkdir", "(", "save_dir", ")", "\n", "", "logger", "=", "setup_logger", "(", "\"FADA\"", ",", "save_dir", ",", "0", ")", "\n", "logger", ".", "info", "(", "cfg", ")", "\n", "\n", "logger", ".", "info", "(", "\"Loaded configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "with", "open", "(", "args", ".", "config_file", ",", "\"r\"", ")", "as", "cf", ":", "\n", "        ", "config_str", "=", "\"\\n\"", "+", "cf", ".", "read", "(", ")", "\n", "logger", ".", "info", "(", "config_str", ")", "\n", "", "logger", ".", "info", "(", "\"Running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "if", "os", ".", "path", ".", "isdir", "(", "cfg", ".", "resume", ")", ":", "\n", "        ", "test_all", "(", "cfg", ",", "args", ".", "saveres", ")", "\n", "", "else", ":", "\n", "        ", "test", "(", "cfg", ",", "args", ".", "saveres", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.test_multi_weighted.knn_weights": [[24, 32], ["weights.append", "sum", "print", "sum", "core.configs.cfg.DATASETS.MULTI_TEST_WEIGHTS_DATASETS"], "function", ["None"], ["def", "knn_weights", "(", "dataset_weights", ",", "name", ",", "datasets", ")", ":", "\n", "    ", "weights_dict", "=", "dataset_weights", "[", "name", "]", "\n", "weights", "=", "[", "]", "\n", "for", "dataset", "in", "datasets", ":", "\n", "        ", "weights", ".", "append", "(", "weights_dict", "[", "dataset", "]", ")", "\n", "", "if", "sum", "(", "weights", ")", "<=", "1", "-", "0.00001", ":", "\n", "        ", "print", "(", "sum", "(", "weights", ")", ")", "\n", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.test_multi_weighted.strip_prefix_if_present": [[34, 42], ["sorted", "collections.OrderedDict", "state_dict.items", "state_dict.keys", "all", "key.startswith", "key.replace"], "function", ["None"], ["", "def", "strip_prefix_if_present", "(", "state_dict", ",", "prefix", ")", ":", "\n", "    ", "keys", "=", "sorted", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "if", "not", "all", "(", "key", ".", "startswith", "(", "prefix", ")", "for", "key", "in", "keys", ")", ":", "\n", "        ", "return", "state_dict", "\n", "", "stripped_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "stripped_state_dict", "[", "key", ".", "replace", "(", "prefix", ",", "\"\"", ")", "]", "=", "value", "\n", "", "return", "stripped_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.test_multi_weighted.inference": [[44, 57], ["torch.interpolate", "torch.softmax", "classifier.unsqueeze", "torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "classifier", "feature_extractor", "torch.flip", "torch.flip", "output[].flip"], "function", ["None"], ["", "def", "inference", "(", "feature_extractor", ",", "classifier", ",", "image", ",", "label", ",", "flip", "=", "True", ")", ":", "\n", "    ", "size", "=", "label", ".", "shape", "[", "-", "2", ":", "]", "\n", "if", "flip", ":", "\n", "        ", "image", "=", "torch", ".", "cat", "(", "[", "image", ",", "torch", ".", "flip", "(", "image", ",", "[", "3", "]", ")", "]", ",", "0", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output", "=", "classifier", "(", "feature_extractor", "(", "image", ")", ")", "\n", "", "output", "=", "F", ".", "interpolate", "(", "output", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "output", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "if", "flip", ":", "\n", "        ", "output", "=", "(", "output", "[", "0", "]", "+", "output", "[", "1", "]", ".", "flip", "(", "2", ")", ")", "/", "2", "\n", "", "else", ":", "\n", "        ", "output", "=", "output", "[", "0", "]", "\n", "", "return", "output", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.test_multi_weighted.test": [[59, 154], ["logging.getLogger", "logging.getLogger.info", "torch.device", "torch.device", "core.utils.misc.AverageMeter", "core.utils.misc.AverageMeter", "core.utils.misc.AverageMeter", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "range", "torch.load", "torch.load", "core.datasets.build_dataset", "torch.utils.data.DataLoader", "print", "core.utils.misc.mkdir", "core.utils.misc.mkdir", "core.utils.misc.mkdir", "enumerate", "numpy.mean", "numpy.mean", "logging.getLogger.info", "range", "os.path.join", "core.utils.misc.mkdir", "len", "core.models.build_feature_extractor", "core.models.build_feature_extractor.to", "core.models.build_classifier", "core.models.build_classifier.to", "logging.getLogger.info", "torch.load", "torch.load", "test_multi_weighted.strip_prefix_if_present", "core.models.build_feature_extractor.load_state_dict", "test_multi_weighted.strip_prefix_if_present", "core.models.build_classifier.load_state_dict", "core.models.build_feature_extractor.eval", "core.models.build_classifier.eval", "feature_extractors.append", "classifiers.append", "os.path.join", "os.path.join", "os.path.join", "tqdm.tqdm", "x.cuda.cuda", "y.cuda().long.cuda().long", "torch.tensor().to", "torch.tensor().to", "range", "core.utils.misc.intersectionAndUnionGPU", "sum", "logging.getLogger.info", "len", "test_multi_weighted.knn_weights", "test_multi_weighted.inference", "pred.argmax.max", "intersection.cpu().numpy", "union.cpu().numpy", "target.cpu().numpy", "core.utils.misc.AverageMeter.update", "core.utils.misc.AverageMeter.update", "core.utils.misc.AverageMeter.update", "sum", "pred.argmax.cpu().numpy().squeeze", "numpy.max", "pred.argmax.argmax", "core.utils.misc.get_color_pallete", "core.utils.misc.get_color_pallete.save", "PIL.Image.fromarray", "Image.fromarray.save", "numpy.array", "numpy.array", "cv2.addWeighted", "cv2.imwrite", "sum", "torch.device", "torch.device", "y.cuda().long.cuda", "torch.tensor", "torch.tensor", "inference.detach", "sum", "os.path.join", "pred.argmax.astype", "os.path.join", "core.utils.misc.get_color_pallete.convert", "PIL.Image.open().convert", "os.path.join", "numpy.zeros", "intersection.cpu", "union.cpu", "target.cpu", "pred.argmax.cpu().numpy", "len", "name[].split", "name[].split", "PIL.Image.open", "pred.argmax.cpu", "core.configs.cfg"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.build.build_dataset", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.mkdir", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.mkdir", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.mkdir", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.mkdir", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.build.build_feature_extractor", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.build.build_classifier", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.strip_prefix_if_present", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.strip_prefix_if_present", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.intersectionAndUnionGPU", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.test_multi_weighted.knn_weights", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.test_multi_weighted.inference", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.get_color_pallete"], ["", "def", "test", "(", "cfg", ",", "saveres", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"FADA.tester\"", ")", "\n", "logger", ".", "info", "(", "\"Start testing\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "cfg", ".", "MODEL", ".", "DEVICE", ")", "\n", "\n", "intersection_meter", "=", "AverageMeter", "(", ")", "\n", "union_meter", "=", "AverageMeter", "(", ")", "\n", "target_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "output_folder", "=", "'.'", "\n", "\n", "if", "cfg", ".", "OUTPUT_DIR", ":", "\n", "        ", "output_folder", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "\"inference\"", ")", "\n", "mkdir", "(", "output_folder", ")", "\n", "\n", "", "feature_extractors", "=", "[", "]", "\n", "classifiers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "cfg", ".", "MODEL", ".", "MULTI_TEST_WEIGHTS", ")", ")", ":", "\n", "        ", "feature_extractor", "=", "build_feature_extractor", "(", "cfg", ")", "\n", "feature_extractor", ".", "to", "(", "device", ")", "\n", "classifier", "=", "build_classifier", "(", "cfg", ")", "\n", "classifier", ".", "to", "(", "device", ")", "\n", "\n", "# load current checkpoint", "\n", "curr_resume", "=", "cfg", ".", "MODEL", ".", "MULTI_TEST_WEIGHTS", "[", "i", "]", "\n", "logger", ".", "info", "(", "\"Loading checkpoint from {}\"", ".", "format", "(", "curr_resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "curr_resume", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "feature_extractor_weights", "=", "strip_prefix_if_present", "(", "checkpoint", "[", "'feature_extractor'", "]", ",", "'module.'", ")", "\n", "feature_extractor", ".", "load_state_dict", "(", "feature_extractor_weights", ")", "\n", "classifier_weights", "=", "strip_prefix_if_present", "(", "checkpoint", "[", "'classifier'", "]", ",", "'module.'", ")", "\n", "classifier", ".", "load_state_dict", "(", "classifier_weights", ")", "\n", "feature_extractor", ".", "eval", "(", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "feature_extractors", ".", "append", "(", "feature_extractor", ")", "\n", "classifiers", ".", "append", "(", "classifier", ")", "\n", "\n", "", "dataset_weights", "=", "torch", ".", "load", "(", "cfg", ".", "DATASETS", ".", "WEIGHT_VEC_DICT_PATH", ")", "\n", "\n", "# Build dataset", "\n", "test_data", "=", "build_dataset", "(", "cfg", ",", "mode", "=", "'test'", ",", "is_source", "=", "False", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_data", ",", "batch_size", "=", "cfg", ".", "TEST", ".", "BATCH_SIZE", ",", "shuffle", "=", "False", ",", "num_workers", "=", "NUM_WORKERS", ",", "\n", "pin_memory", "=", "True", ",", "sampler", "=", "None", ")", "\n", "\n", "print", "(", "\"Testing Dataset: {}\"", ".", "format", "(", "cfg", ".", "DATASETS", ".", "TEST", ")", ")", "\n", "mkdir", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "'masks'", ")", ")", "\n", "mkdir", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "'masks_on_images'", ")", ")", "\n", "mkdir", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "'masks_id'", ")", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "test_loader", ")", ")", ":", "\n", "        ", "x", ",", "y", ",", "name", ",", "path", "=", "batch", "\n", "x", "=", "x", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "y", "=", "y", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "long", "(", ")", "\n", "pred", "=", "torch", ".", "tensor", "(", "np", ".", "zeros", "(", "(", "1", ",", "12", ",", "y", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "y", "[", "0", "]", ".", "shape", "[", "1", "]", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "cfg", ".", "MODEL", ".", "MULTI_TEST_WEIGHTS", ")", ")", ":", "\n", "            ", "weights", "=", "knn_weights", "(", "dataset_weights", ",", "name", "[", "0", "]", ",", "cfg", ".", "DATASETS", ".", "MULTI_TEST_WEIGHTS_DATASETS", ")", "\n", "out", "=", "inference", "(", "feature_extractors", "[", "i", "]", ",", "classifiers", "[", "i", "]", ",", "x", ",", "y", ",", "flip", "=", "False", ")", "\n", "pred", "+=", "out", ".", "detach", "(", ")", "*", "weights", "[", "i", "]", "\n", "\n", "", "output", "=", "pred", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "intersection", ",", "union", ",", "target", "=", "intersectionAndUnionGPU", "(", "output", ",", "y", ",", "cfg", ".", "MODEL", ".", "NUM_CLASSES", ",", "cfg", ".", "INPUT", ".", "IGNORE_LABEL", ")", "\n", "intersection", ",", "union", ",", "target", "=", "intersection", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "union", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "intersection_meter", ".", "update", "(", "intersection", ")", ",", "union_meter", ".", "update", "(", "union", ")", ",", "target_meter", ".", "update", "(", "target", ")", "\n", "\n", "accuracy", "=", "sum", "(", "intersection_meter", ".", "val", ")", "/", "(", "sum", "(", "target_meter", ".", "val", ")", "+", "1e-10", ")", "\n", "\n", "if", "saveres", ":", "\n", "            ", "pred", "=", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "pred_max", "=", "np", ".", "max", "(", "pred", ",", "0", ")", "\n", "pred", "=", "pred", ".", "argmax", "(", "0", ")", "\n", "\n", "mask", "=", "get_color_pallete", "(", "pred", ",", "\"pascal12\"", ")", "\n", "mask_filename", "=", "name", "[", "0", "]", "if", "len", "(", "name", "[", "0", "]", ".", "split", "(", "\"/\"", ")", ")", "<", "2", "else", "name", "[", "0", "]", ".", "split", "(", "\"/\"", ")", "[", "1", "]", "\n", "mask", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "'masks'", ",", "mask_filename", "+", "'.png'", ")", ")", "\n", "\n", "id_pred", "=", "Image", ".", "fromarray", "(", "pred", ".", "astype", "(", "np", ".", "int8", ")", ")", "\n", "id_pred", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "'masks_id'", ",", "mask_filename", "+", "'.png'", ")", ")", "\n", "\n", "np_mask", "=", "np", ".", "array", "(", "mask", ".", "convert", "(", "'RGB'", ")", ")", "\n", "im", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "path", "[", "0", "]", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "\n", "added_image", "=", "cv2", ".", "addWeighted", "(", "im", ",", "0.35", ",", "np_mask", ",", "0.65", ",", "0", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "'masks_on_images'", ",", "mask_filename", "+", "'.png'", ")", ",", "added_image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "\n", "", "", "iou_class", "=", "intersection_meter", ".", "sum", "/", "(", "union_meter", ".", "sum", "+", "1e-10", ")", "\n", "accuracy_class", "=", "intersection_meter", ".", "sum", "/", "(", "target_meter", ".", "sum", "+", "1e-10", ")", "\n", "mIoU", "=", "np", ".", "mean", "(", "iou_class", ")", "\n", "mAcc", "=", "np", ".", "mean", "(", "accuracy_class", ")", "\n", "allAcc", "=", "sum", "(", "intersection_meter", ".", "sum", ")", "/", "(", "sum", "(", "target_meter", ".", "sum", ")", "+", "1e-10", ")", "\n", "\n", "logger", ".", "info", "(", "'Val result: mIoU/mAcc/allAcc {:.4f}/{:.4f}/{:.4f}.'", ".", "format", "(", "mIoU", ",", "mAcc", ",", "allAcc", ")", ")", "\n", "for", "i", "in", "range", "(", "cfg", ".", "MODEL", ".", "NUM_CLASSES", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'{} {} iou/accuracy: {:.4f}/{:.4f}.'", ".", "format", "(", "i", ",", "test_data", ".", "trainid2name", "[", "i", "]", ",", "iou_class", "[", "i", "]", ",", "accuracy_class", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.test_multi_weighted.main": [[156, 195], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "core.configs.cfg.merge_from_file", "core.configs.cfg.merge_from_list", "core.configs.cfg.freeze", "os.path.split", "os.path.join", "core.utils.logger.setup_logger", "core.utils.logger.setup_logger.info", "core.utils.logger.setup_logger.info", "core.utils.logger.setup_logger.info", "test_multi_weighted.test", "core.utils.misc.mkdir", "open", "core.utils.logger.setup_logger.info", "os.path.splitext", "cf.read"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.logger.setup_logger", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.test_multi_weighted.test", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.mkdir"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"PyTorch Semantic Segmentation Testing\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-cfg\"", ",", "\n", "\"--config-file\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "help", "=", "\"path to config file\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--saveres'", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "'save the result'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "path", ",", "model", "=", "os", ".", "path", ".", "split", "(", "cfg", ".", "resume", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "path", ",", "os", ".", "path", ".", "splitext", "(", "model", ")", "[", "0", "]", ")", "\n", "if", "save_dir", ":", "\n", "        ", "mkdir", "(", "save_dir", ")", "\n", "", "logger", "=", "setup_logger", "(", "\"FADA\"", ",", "save_dir", ",", "0", ")", "\n", "logger", ".", "info", "(", "cfg", ")", "\n", "\n", "logger", ".", "info", "(", "\"Loaded configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "with", "open", "(", "args", ".", "config_file", ",", "\"r\"", ")", "as", "cf", ":", "\n", "        ", "config_str", "=", "\"\\n\"", "+", "cf", ".", "read", "(", ")", "\n", "logger", ".", "info", "(", "config_str", ")", "\n", "", "logger", ".", "info", "(", "\"Running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "test", "(", "cfg", ",", "args", ".", "saveres", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.strip_prefix_if_present": [[20, 31], ["sorted", "OrderedDict", "state_dict.items", "state_dict.keys", "all", "key.startswith", "key.startswith", "key.replace"], "function", ["None"], ["def", "strip_prefix_if_present", "(", "state_dict", ",", "prefix", ")", ":", "\n", "    ", "from", "collections", "import", "OrderedDict", "\n", "keys", "=", "sorted", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "if", "not", "all", "(", "key", ".", "startswith", "(", "prefix", ")", "for", "key", "in", "keys", ")", ":", "\n", "        ", "return", "state_dict", "\n", "", "stripped_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", ".", "startswith", "(", "prefix", "+", "'layer5'", ")", ":", "\n", "            ", "continue", "\n", "", "stripped_state_dict", "[", "key", ".", "replace", "(", "prefix", ",", "\"\"", ")", "]", "=", "value", "\n", "", "return", "stripped_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.train": [[33, 189], ["logging.getLogger", "logging.getLogger.info", "core.models.build_feature_extractor", "torch.device", "torch.device", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.to", "core.models.build_classifier", "torch.nn.parallel.DistributedDataParallel.to", "core.configs.cfg.MODEL.NAME.split", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD.zero_grad", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD.zero_grad", "core.datasets.build_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "logging.getLogger.info", "core.utils.metric_logger.MetricLogger", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.train", "torch.nn.parallel.DistributedDataParallel.train", "time.time", "time.time", "enumerate", "str", "logging.getLogger.info", "print", "print", "torch.distributed.new_group", "torch.distributed.new_group", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.distributed.new_group", "torch.distributed.new_group", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.distributed.barrier", "torch.distributed.barrier", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.parameters", "torch.nn.parallel.DistributedDataParallel.parameters", "logging.getLogger.info", "torch.load", "torch.load", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.load_state_dict", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "core.solver.adjust_learning_rate", "range", "range", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "src_input.cuda.cuda", "src_label.cuda().long.cuda().long", "torch.nn.parallel.DistributedDataParallel.", "torch.nn.CrossEntropyLoss.", "criterion.backward", "torch.optim.SGD.step", "torch.optim.SGD.step", "core.utils.metric_logger.MetricLogger.update", "time.time", "core.utils.metric_logger.MetricLogger.update", "str", "time.time", "datetime.timedelta", "range", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "range", "train_src.strip_prefix_if_present", "train_src.strip_prefix_if_present", "logging.getLogger.info", "torch.optim.SGD.load_state_dict", "logging.getLogger.info", "torch.optim.SGD.load_state_dict", "time.time", "len", "len", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.", "time.time", "datetime.timedelta", "logging.getLogger.info", "os.path.join", "torch.save", "torch.save", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.device", "torch.device", "src_label.cuda().long.cuda", "criterion.item", "core.utils.metric_logger.MetricLogger.delimiter.join().format", "int", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.state_dict", "torch.nn.parallel.DistributedDataParallel.state_dict", "torch.optim.SGD.state_dict", "torch.optim.SGD.state_dict", "core.utils.metric_logger.MetricLogger.delimiter.join", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "core.configs.cfg"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.build.build_feature_extractor", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.build.build_classifier", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.build.build_dataset", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.train", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.train", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.solver.build.adjust_learning_rate", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.strip_prefix_if_present", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.strip_prefix_if_present"], ["", "def", "train", "(", "cfg", ",", "local_rank", ",", "distributed", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"STEP1.trainer\"", ")", "\n", "logger", ".", "info", "(", "\"Start training\"", ")", "\n", "\n", "feature_extractor", "=", "build_feature_extractor", "(", "cfg", ")", "\n", "device", "=", "torch", ".", "device", "(", "cfg", ".", "MODEL", ".", "DEVICE", ")", "\n", "feature_extractor", ".", "to", "(", "device", ")", "\n", "\n", "classifier", "=", "build_classifier", "(", "cfg", ")", "\n", "classifier", ".", "to", "(", "device", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "\n", "        ", "print", "(", "feature_extractor", ")", "\n", "print", "(", "classifier", ")", "\n", "\n", "", "model_name", ",", "backbone_name", "=", "cfg", ".", "MODEL", ".", "NAME", ".", "split", "(", "'_'", ")", "\n", "\n", "batch_size", "=", "cfg", ".", "SOLVER", ".", "BATCH_SIZE", "\n", "if", "distributed", ":", "\n", "        ", "pg1", "=", "torch", ".", "distributed", ".", "new_group", "(", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", ")", "\n", "\n", "batch_size", "=", "int", "(", "cfg", ".", "SOLVER", ".", "BATCH_SIZE", "/", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "\n", "if", "not", "cfg", ".", "MODEL", ".", "FREEZE_BN", ":", "\n", "            ", "feature_extractor", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "feature_extractor", ")", "\n", "", "feature_extractor", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "feature_extractor", ",", "device_ids", "=", "[", "local_rank", "]", ",", "output_device", "=", "local_rank", ",", "\n", "find_unused_parameters", "=", "True", ",", "process_group", "=", "pg1", "\n", ")", "\n", "pg2", "=", "torch", ".", "distributed", ".", "new_group", "(", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", ")", "\n", "classifier", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "classifier", ",", "device_ids", "=", "[", "local_rank", "]", ",", "output_device", "=", "local_rank", ",", "\n", "find_unused_parameters", "=", "True", ",", "process_group", "=", "pg2", "\n", ")", "\n", "torch", ".", "autograd", ".", "set_detect_anomaly", "(", "True", ")", "\n", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "\n", "", "optimizer_fea", "=", "torch", ".", "optim", ".", "SGD", "(", "feature_extractor", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "SOLVER", ".", "BASE_LR", ",", "momentum", "=", "cfg", ".", "SOLVER", ".", "MOMENTUM", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ")", "\n", "optimizer_fea", ".", "zero_grad", "(", ")", "\n", "\n", "optimizer_cls", "=", "torch", ".", "optim", ".", "SGD", "(", "classifier", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "SOLVER", ".", "BASE_LR", "*", "10", ",", "momentum", "=", "cfg", ".", "SOLVER", ".", "MOMENTUM", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ")", "\n", "optimizer_cls", ".", "zero_grad", "(", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "\n", "save_to_disk", "=", "local_rank", "==", "0", "\n", "\n", "iteration", "=", "0", "\n", "\n", "if", "cfg", ".", "resume", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading checkpoint from {}\"", ".", "format", "(", "cfg", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "cfg", ".", "resume", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "model_weights", "=", "checkpoint", "[", "'feature_extractor'", "]", "if", "distributed", "else", "strip_prefix_if_present", "(", "checkpoint", "[", "'feature_extractor'", "]", ",", "'module.'", ")", "\n", "feature_extractor", ".", "load_state_dict", "(", "model_weights", ")", "\n", "classifier_weights", "=", "checkpoint", "[", "'classifier'", "]", "if", "distributed", "else", "strip_prefix_if_present", "(", "checkpoint", "[", "'classifier'", "]", ",", "'module.'", ")", "\n", "classifier", ".", "load_state_dict", "(", "classifier_weights", ")", "\n", "if", "\"optimizer_fea\"", "in", "checkpoint", ":", "\n", "            ", "logger", ".", "info", "(", "\"Loading optimizer_fea from {}\"", ".", "format", "(", "cfg", ".", "resume", ")", ")", "\n", "optimizer_fea", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_fea'", "]", ")", "\n", "", "if", "\"optimizer_cls\"", "in", "checkpoint", ":", "\n", "            ", "logger", ".", "info", "(", "\"Loading optimizer_cls from {}\"", ".", "format", "(", "cfg", ".", "resume", ")", ")", "\n", "optimizer_cls", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_cls'", "]", ")", "\n", "", "if", "\"iteration\"", "in", "checkpoint", ":", "\n", "            ", "iteration", "=", "checkpoint", "[", "'iteration'", "]", "\n", "\n", "", "", "src_train_data", "=", "build_dataset", "(", "cfg", ",", "mode", "=", "'train'", ",", "is_source", "=", "True", ")", "\n", "\n", "if", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "src_train_data", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "src_train_data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "drop_last", "=", "True", "\n", ")", "\n", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ")", "\n", "\n", "max_iters", "=", "cfg", ".", "SOLVER", ".", "MAX_ITER", "\n", "logger", ".", "info", "(", "\"Start training\"", ")", "\n", "meters", "=", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "feature_extractor", ".", "train", "(", ")", "\n", "classifier", ".", "train", "(", ")", "\n", "start_training_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", ",", "(", "src_input", ",", "src_label", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "current_lr", "=", "adjust_learning_rate", "(", "cfg", ".", "SOLVER", ".", "LR_METHOD", ",", "cfg", ".", "SOLVER", ".", "BASE_LR", ",", "iteration", ",", "max_iters", ",", "power", "=", "cfg", ".", "SOLVER", ".", "LR_POWER", ")", "\n", "for", "index", "in", "range", "(", "len", "(", "optimizer_fea", ".", "param_groups", ")", ")", ":", "\n", "            ", "optimizer_fea", ".", "param_groups", "[", "index", "]", "[", "'lr'", "]", "=", "current_lr", "\n", "", "for", "index", "in", "range", "(", "len", "(", "optimizer_cls", ".", "param_groups", ")", ")", ":", "\n", "            ", "optimizer_cls", ".", "param_groups", "[", "index", "]", "[", "'lr'", "]", "=", "current_lr", "*", "10", "\n", "\n", "", "optimizer_fea", ".", "zero_grad", "(", ")", "\n", "optimizer_cls", ".", "zero_grad", "(", ")", "\n", "src_input", "=", "src_input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "src_label", "=", "src_label", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "long", "(", ")", "\n", "\n", "size", "=", "src_label", ".", "shape", "[", "-", "2", ":", "]", "\n", "pred", "=", "classifier", "(", "feature_extractor", "(", "src_input", ")", ",", "size", ")", "\n", "loss", "=", "criterion", "(", "pred", ",", "src_label", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "optimizer_fea", ".", "step", "(", ")", "\n", "optimizer_cls", ".", "step", "(", ")", "\n", "meters", ".", "update", "(", "loss_seg", "=", "loss", ".", "item", "(", ")", ")", "\n", "iteration", "+=", "1", "\n", "\n", "batch_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "meters", ".", "update", "(", "time", "=", "batch_time", ",", "data", "=", "data_time", ")", "\n", "eta_seconds", "=", "meters", ".", "time", ".", "global_avg", "*", "(", "max_iters", "-", "iteration", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "if", "iteration", "%", "20", "==", "0", "or", "iteration", "==", "max_iters", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "meters", ".", "delimiter", ".", "join", "(", "\n", "[", "\n", "\"eta: {eta}\"", ",", "\n", "\"iter: {iter}\"", ",", "\n", "\"{meters}\"", ",", "\n", "\"lr: {lr:.6f}\"", ",", "\n", "\"max mem: {memory:.0f}\"", ",", "\n", "]", "\n", ")", ".", "format", "(", "\n", "eta", "=", "eta_string", ",", "\n", "iter", "=", "iteration", ",", "\n", "meters", "=", "str", "(", "meters", ")", ",", "\n", "lr", "=", "optimizer_fea", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "1024.0", "/", "1024.0", ",", "\n", ")", "\n", ")", "\n", "\n", "", "if", "(", "iteration", "%", "cfg", ".", "SOLVER", ".", "CHECKPOINT_PERIOD", "==", "0", "or", "iteration", "==", "cfg", ".", "SOLVER", ".", "STOP_ITER", ")", "and", "save_to_disk", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"model_iter{:06d}.pth\"", ".", "format", "(", "iteration", ")", ")", "\n", "torch", ".", "save", "(", "{", "'iteration'", ":", "iteration", ",", "'feature_extractor'", ":", "feature_extractor", ".", "state_dict", "(", ")", ",", "'classifier'", ":", "classifier", ".", "state_dict", "(", ")", ",", "'optimizer_fea'", ":", "optimizer_fea", ".", "state_dict", "(", ")", ",", "'optimizer_cls'", ":", "optimizer_cls", ".", "state_dict", "(", ")", "}", ",", "filename", ")", "\n", "\n", "", "if", "iteration", "==", "max_iters", ":", "\n", "            ", "break", "\n", "", "if", "iteration", "==", "cfg", ".", "SOLVER", ".", "STOP_ITER", ":", "\n", "            ", "break", "\n", "\n", "", "", "total_training_time", "=", "time", ".", "time", "(", ")", "-", "start_training_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "total_training_time", ")", ")", "\n", "logger", ".", "info", "(", "\n", "\"Total training time: {} ({:.4f} s / it)\"", ".", "format", "(", "\n", "total_time_str", ",", "total_training_time", "/", "(", "max_iters", ")", "\n", ")", "\n", ")", "\n", "\n", "return", "feature_extractor", ",", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.run_test": [[191, 251], ["logging.getLogger", "core.utils.misc.AverageMeter", "core.utils.misc.AverageMeter", "core.utils.misc.AverageMeter", "core.utils.misc.AverageMeter", "core.utils.misc.AverageMeter", "core.utils.misc.AverageMeter", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "core.datasets.build_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "feature_extractor.eval", "classifier.eval", "time.time", "numpy.mean", "numpy.mean", "logging.getLogger.info", "os.path.join", "core.utils.misc.mkdir", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.no_grad", "torch.no_grad", "enumerate", "sum", "logging.getLogger.info", "range", "x.cuda.cuda", "y.cuda().long.cuda().long", "classifier", "torch.interpolate", "core.utils.misc.intersectionAndUnionGPU", "core.utils.misc.AverageMeter.update", "time.time", "sum", "logging.getLogger.info", "feature_extractor", "F.interpolate.max", "intersection.cpu().numpy", "union.cpu().numpy", "target.cpu().numpy", "core.utils.misc.AverageMeter.update", "core.utils.misc.AverageMeter.update", "core.utils.misc.AverageMeter.update", "sum", "y.cuda().long.cuda", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "sum", "time.time", "intersection.cpu", "union.cpu", "target.cpu", "core.configs.cfg"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.build.build_dataset", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.mkdir", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.intersectionAndUnionGPU", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update"], ["", "def", "run_test", "(", "cfg", ",", "model", ",", "local_rank", ",", "distributed", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"STEP1.tester\"", ")", "\n", "if", "local_rank", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "'>>>>>>>>>>>>>>>> Start Testing >>>>>>>>>>>>>>>>'", ")", "\n", "\n", "", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "loss_meter", "=", "AverageMeter", "(", ")", "\n", "intersection_meter", "=", "AverageMeter", "(", ")", "\n", "union_meter", "=", "AverageMeter", "(", ")", "\n", "target_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "feature_extractor", ",", "classifier", "=", "model", "\n", "\n", "if", "distributed", ":", "\n", "        ", "feature_extractor", ",", "classifier", "=", "feature_extractor", ".", "module", ",", "classifier", ".", "module", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "dataset_name", "=", "cfg", ".", "DATASETS", ".", "TEST", "\n", "if", "cfg", ".", "OUTPUT_DIR", ":", "\n", "        ", "output_folder", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "\"inference\"", ",", "dataset_name", ")", "\n", "mkdir", "(", "output_folder", ")", "\n", "\n", "", "test_data", "=", "build_dataset", "(", "cfg", ",", "mode", "=", "'test'", ",", "is_source", "=", "False", ")", "\n", "if", "distributed", ":", "\n", "        ", "test_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "test_data", ")", "\n", "", "else", ":", "\n", "        ", "test_sampler", "=", "None", "\n", "", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_data", ",", "batch_size", "=", "cfg", ".", "TEST", ".", "BATCH_SIZE", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ",", "sampler", "=", "test_sampler", ")", "\n", "feature_extractor", ".", "eval", "(", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "x", ",", "y", ",", "_", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "x", "=", "x", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "y", "=", "y", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "long", "(", ")", "\n", "\n", "size", "=", "y", ".", "shape", "[", "-", "2", ":", "]", "\n", "pred", "=", "classifier", "(", "feature_extractor", "(", "x", ")", ")", "\n", "pred", "=", "F", ".", "interpolate", "(", "pred", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "output", "=", "pred", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "intersection", ",", "union", ",", "target", "=", "intersectionAndUnionGPU", "(", "output", ",", "y", ",", "cfg", ".", "MODEL", ".", "NUM_CLASSES", ",", "cfg", ".", "INPUT", ".", "IGNORE_LABEL", ")", "\n", "if", "distributed", ":", "\n", "                ", "torch", ".", "distributed", ".", "all_reduce", "(", "intersection", ")", ",", "torch", ".", "distributed", ".", "all_reduce", "(", "union", ")", ",", "torch", ".", "distributed", ".", "all_reduce", "(", "target", ")", "\n", "", "intersection", ",", "union", ",", "target", "=", "intersection", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "union", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "intersection_meter", ".", "update", "(", "intersection", ")", ",", "union_meter", ".", "update", "(", "union", ")", ",", "target_meter", ".", "update", "(", "target", ")", "\n", "\n", "accuracy", "=", "sum", "(", "intersection_meter", ".", "val", ")", "/", "(", "sum", "(", "target_meter", ".", "val", ")", "+", "1e-10", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "iou_class", "=", "intersection_meter", ".", "sum", "/", "(", "union_meter", ".", "sum", "+", "1e-10", ")", "\n", "accuracy_class", "=", "intersection_meter", ".", "sum", "/", "(", "target_meter", ".", "sum", "+", "1e-10", ")", "\n", "mIoU", "=", "np", ".", "mean", "(", "iou_class", ")", "\n", "mAcc", "=", "np", ".", "mean", "(", "accuracy_class", ")", "\n", "allAcc", "=", "sum", "(", "intersection_meter", ".", "sum", ")", "/", "(", "sum", "(", "target_meter", ".", "sum", ")", "+", "1e-10", ")", "\n", "if", "local_rank", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "'Val result: mIoU/mAcc/allAcc {:.4f}/{:.4f}/{:.4f}.'", ".", "format", "(", "mIoU", ",", "mAcc", ",", "allAcc", ")", ")", "\n", "for", "i", "in", "range", "(", "cfg", ".", "MODEL", ".", "NUM_CLASSES", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'Class_{} Result: iou/accuracy {:.4f}/{:.4f}.'", ".", "format", "(", "i", ",", "iou_class", "[", "i", "]", ",", "accuracy_class", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.main": [[253, 312], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "core.configs.cfg.merge_from_file", "core.configs.cfg.merge_from_list", "core.configs.cfg.freeze", "core.utils.logger.setup_logger", "core.utils.logger.setup_logger.info", "core.utils.logger.setup_logger.info", "core.utils.logger.setup_logger.info", "core.utils.logger.setup_logger.info", "train_src.train", "int", "torch.cuda.set_device", "torch.cuda.set_device", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "core.utils.misc.mkdir", "open", "core.utils.logger.setup_logger.info", "train_src.run_test", "cf.read"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.logger.setup_logger", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.train", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.mkdir", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.None.train_src.run_test"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"PyTorch Semantic Segmentation Training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-cfg\"", ",", "\n", "\"--config-file\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "help", "=", "\"path to config file\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--skip-test\"", ",", "\n", "dest", "=", "\"skip_test\"", ",", "\n", "help", "=", "\"Do not test the final model\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "num_gpus", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "args", ".", "distributed", "=", "num_gpus", ">", "1", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "\n", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", "\n", ")", "\n", "\n", "", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "if", "output_dir", ":", "\n", "        ", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "logger", "=", "setup_logger", "(", "\"STEP1\"", ",", "output_dir", ",", "args", ".", "local_rank", ")", "\n", "logger", ".", "info", "(", "\"Using {} GPUs\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "logger", ".", "info", "(", "\"Loaded configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "with", "open", "(", "args", ".", "config_file", ",", "\"r\"", ")", "as", "cf", ":", "\n", "        ", "config_str", "=", "\"\\n\"", "+", "cf", ".", "read", "(", ")", "\n", "logger", ".", "info", "(", "config_str", ")", "\n", "", "logger", ".", "info", "(", "\"Running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "model", "=", "train", "(", "cfg", ",", "args", ".", "local_rank", ",", "args", ".", "distributed", ")", "\n", "\n", "if", "not", "args", ".", "skip_test", ":", "\n", "        ", "run_test", "(", "cfg", ",", "model", ",", "args", ".", "local_rank", ",", "args", ".", "distributed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.logger.setup_logger": [[7, 26], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join"], "function", ["None"], ["def", "setup_logger", "(", "name", ",", "save_dir", ",", "distributed_rank", ",", "filename", "=", "\"log.txt\"", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "# don't log results for the non-master process", "\n", "if", "distributed_rank", ">", "0", ":", "\n", "        ", "return", "logger", "\n", "", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s %(name)s %(levelname)s: %(message)s\"", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "if", "save_dir", ":", "\n", "        ", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "filename", ")", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.metric_logger.SmoothedValue.__init__": [[13, 18], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ")", ":", "\n", "        ", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "series", "=", "[", "]", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.metric_logger.SmoothedValue.update": [[19, 24], ["metric_logger.SmoothedValue.deque.append", "metric_logger.SmoothedValue.series.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "series", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "1", "\n", "self", ".", "total", "+=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.metric_logger.SmoothedValue.median": [[25, 29], ["torch.tensor", "torch.tensor.median().item", "list", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.metric_logger.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.metric_logger.SmoothedValue.avg": [[30, 34], ["torch.tensor", "torch.tensor.mean().item", "list", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.metric_logger.SmoothedValue.global_avg": [[35, 38], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.metric_logger.MetricLogger.__init__": [[41, 44], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.metric_logger.MetricLogger.update": [[45, 51], ["kwargs.items", "isinstance", "isinstance", "metric_logger.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.metric_logger.MetricLogger.__getattr__": [[52, 59], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.metric_logger.MetricLogger.__str__": [[60, 67], ["metric_logger.MetricLogger.meters.items", "metric_logger.MetricLogger.delimiter.join", "loss_str.append"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {:.4f} ({:.4f})\"", ".", "format", "(", "name", ",", "meter", ".", "median", ",", "meter", ".", "global_avg", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.__init__": [[19, 21], ["misc.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.reset": [[22, 27], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.AverageMeter.update": [[28, 33], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.mkdir": [[10, 16], ["os.makedirs"], "function", ["None"], ["def", "mkdir", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.intersectionAndUnion": [[35, 48], ["output.reshape().copy.reshape().copy", "target.reshape.reshape", "numpy.histogram", "numpy.histogram", "numpy.histogram", "output.reshape().copy.reshape", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.where", "numpy.where"], "function", ["None"], ["", "", "def", "intersectionAndUnion", "(", "output", ",", "target", ",", "K", ",", "ignore_index", "=", "255", ")", ":", "\n", "# 'K' classes, output and target sizes are N or N * L or N * H * W, each value in range 0 to K - 1.", "\n", "    ", "assert", "(", "output", ".", "ndim", "in", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "assert", "output", ".", "shape", "==", "target", ".", "shape", "\n", "output", "=", "output", ".", "reshape", "(", "output", ".", "size", ")", ".", "copy", "(", ")", "\n", "target", "=", "target", ".", "reshape", "(", "target", ".", "size", ")", "\n", "output", "[", "np", ".", "where", "(", "target", "==", "ignore_index", ")", "[", "0", "]", "]", "=", "255", "\n", "intersection", "=", "output", "[", "np", ".", "where", "(", "output", "==", "target", ")", "[", "0", "]", "]", "\n", "area_intersection", ",", "_", "=", "np", ".", "histogram", "(", "intersection", ",", "bins", "=", "np", ".", "arange", "(", "K", "+", "1", ")", ")", "\n", "area_output", ",", "_", "=", "np", ".", "histogram", "(", "output", ",", "bins", "=", "np", ".", "arange", "(", "K", "+", "1", ")", ")", "\n", "area_target", ",", "_", "=", "np", ".", "histogram", "(", "target", ",", "bins", "=", "np", ".", "arange", "(", "K", "+", "1", ")", ")", "\n", "area_union", "=", "area_output", "+", "area_target", "-", "area_intersection", "\n", "return", "area_intersection", ",", "area_union", ",", "area_target", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.intersectionAndUnionGPU": [[50, 64], ["output.view.view", "target.view.view", "torch.histc", "torch.histc", "torch.histc", "output.view.dim", "intersection.float().cpu", "output.view.float().cpu", "target.view.float().cpu", "torch.histc.cuda", "area_union.cuda", "torch.histc.cuda", "intersection.float", "output.view.float", "target.view.float"], "function", ["None"], ["", "def", "intersectionAndUnionGPU", "(", "output", ",", "target", ",", "K", ",", "ignore_index", "=", "255", ")", ":", "\n", "# 'K' classes, output and target sizes are N or N * L or N * H * W, each value in range 0 to K - 1.", "\n", "    ", "assert", "(", "output", ".", "dim", "(", ")", "in", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "assert", "output", ".", "shape", "==", "target", ".", "shape", "\n", "output", "=", "output", ".", "view", "(", "-", "1", ")", "\n", "target", "=", "target", ".", "view", "(", "-", "1", ")", "\n", "output", "[", "target", "==", "ignore_index", "]", "=", "ignore_index", "\n", "intersection", "=", "output", "[", "output", "==", "target", "]", "\n", "# https://github.com/pytorch/pytorch/issues/1382", "\n", "area_intersection", "=", "torch", ".", "histc", "(", "intersection", ".", "float", "(", ")", ".", "cpu", "(", ")", ",", "bins", "=", "K", ",", "min", "=", "0", ",", "max", "=", "K", "-", "1", ")", "\n", "area_output", "=", "torch", ".", "histc", "(", "output", ".", "float", "(", ")", ".", "cpu", "(", ")", ",", "bins", "=", "K", ",", "min", "=", "0", ",", "max", "=", "K", "-", "1", ")", "\n", "area_target", "=", "torch", ".", "histc", "(", "target", ".", "float", "(", ")", ".", "cpu", "(", ")", ",", "bins", "=", "K", ",", "min", "=", "0", ",", "max", "=", "K", "-", "1", ")", "\n", "area_union", "=", "area_output", "+", "area_target", "-", "area_intersection", "\n", "return", "area_intersection", ".", "cuda", "(", ")", ",", "area_union", ".", "cuda", "(", ")", ",", "area_target", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc.get_color_pallete": [[65, 101], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "Image.fromarray().convert.putpalette", "misc._getvocpallete", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "npimg.astype"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc._getvocpallete"], ["", "def", "get_color_pallete", "(", "npimg", ",", "dataset", "=", "'voc'", ")", ":", "\n", "    ", "out_img", "=", "Image", ".", "fromarray", "(", "npimg", ".", "astype", "(", "'uint8'", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "if", "dataset", "==", "'city'", ":", "\n", "        ", "cityspallete", "=", "[", "\n", "128", ",", "64", ",", "128", ",", "\n", "244", ",", "35", ",", "232", ",", "\n", "70", ",", "70", ",", "70", ",", "\n", "102", ",", "102", ",", "156", ",", "\n", "190", ",", "153", ",", "153", ",", "\n", "153", ",", "153", ",", "153", ",", "\n", "250", ",", "170", ",", "30", ",", "\n", "220", ",", "220", ",", "0", ",", "\n", "107", ",", "142", ",", "35", ",", "\n", "152", ",", "251", ",", "152", ",", "\n", "0", ",", "130", ",", "180", ",", "\n", "220", ",", "20", ",", "60", ",", "\n", "255", ",", "0", ",", "0", ",", "\n", "0", ",", "0", ",", "142", ",", "\n", "0", ",", "0", ",", "70", ",", "\n", "0", ",", "60", ",", "100", ",", "\n", "0", ",", "80", ",", "100", ",", "\n", "0", ",", "0", ",", "230", ",", "\n", "119", ",", "11", ",", "32", ",", "\n", "]", "\n", "out_img", ".", "putpalette", "(", "cityspallete", ")", "\n", "", "if", "dataset", "==", "'pascal12'", ":", "\n", "        ", "palette", "=", "[", "0", ",", "0", ",", "0", ",", "128", ",", "128", ",", "0", ",", "\n", "102", ",", "178", ",", "255", ",", "128", ",", "0", ",", "128", ",", "\n", "252", ",", "110", ",", "110", ",", "192", ",", "0", ",", "0", ",", "64", ",", "128", ",", "0", ",", "\n", "64", ",", "0", ",", "128", ",", "192", ",", "0", ",", "128", ",", "192", ",", "128", ",", "128", ",", "\n", "0", ",", "64", ",", "0", ",", "128", ",", "64", ",", "0", "]", "\n", "out_img", ".", "putpalette", "(", "palette", ")", "\n", "", "else", ":", "\n", "        ", "vocpallete", "=", "_getvocpallete", "(", "256", ")", "\n", "out_img", ".", "putpalette", "(", "vocpallete", ")", "\n", "", "return", "out_img", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.utils.misc._getvocpallete": [[102, 118], ["range"], "function", ["None"], ["", "def", "_getvocpallete", "(", "num_cls", ")", ":", "\n", "    ", "n", "=", "num_cls", "\n", "pallete", "=", "[", "0", "]", "*", "(", "n", "*", "3", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "        ", "lab", "=", "j", "\n", "pallete", "[", "j", "*", "3", "+", "0", "]", "=", "0", "\n", "pallete", "[", "j", "*", "3", "+", "1", "]", "=", "0", "\n", "pallete", "[", "j", "*", "3", "+", "2", "]", "=", "0", "\n", "i", "=", "0", "\n", "while", "(", "lab", ">", "0", ")", ":", "\n", "            ", "pallete", "[", "j", "*", "3", "+", "0", "]", "|=", "(", "(", "(", "lab", ">>", "0", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "pallete", "[", "j", "*", "3", "+", "1", "]", "|=", "(", "(", "(", "lab", ">>", "1", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "pallete", "[", "j", "*", "3", "+", "2", "]", "|=", "(", "(", "(", "lab", ">>", "2", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "i", "=", "i", "+", "1", "\n", "lab", ">>=", "3", "\n", "", "", "return", "pallete", "", "", ""]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.dram.DramDataSet.__init__": [[8, 82], ["os.path.join", "print", "open", "handle.read().splitlines", "fname.split", "dram.DramDataSet.data_list.append", "len", "len", "int", "handle.read", "os.path.join", "os.path.join", "numpy.ceil", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "data_root", ",", "\n", "movement", ",", "\n", "max_iters", "=", "None", ",", "\n", "num_classes", "=", "12", ",", "\n", "split", "=", "\"train\"", ",", "\n", "transform", "=", "None", ",", "\n", "ignore_label", "=", "255", ",", "\n", "debug", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "split", "=", "split", "\n", "self", ".", "NUM_CLASS", "=", "num_classes", "\n", "self", ".", "data_root", "=", "data_root", "\n", "self", ".", "data_list", "=", "[", "]", "\n", "self", ".", "movement", "=", "movement", "\n", "\n", "data_list_path", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "split", ",", "movement", "+", "\".txt\"", ")", "\n", "with", "open", "(", "data_list_path", ",", "\"r\"", ")", "as", "handle", ":", "\n", "            ", "content", "=", "handle", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "", "for", "fname", "in", "content", ":", "\n", "            ", "name_split", "=", "fname", ".", "split", "(", "\"/\"", ")", "\n", "if", "len", "(", "name_split", ")", "<=", "3", ":", "\n", "                ", "name", "=", "\"/\"", ".", "join", "(", "name_split", "[", "1", ":", "]", ")", "\n", "", "else", ":", "# unseen", "\n", "                ", "name", "=", "\"/\"", ".", "join", "(", "name_split", "[", "2", ":", "]", ")", "\n", "\n", "", "self", ".", "data_list", ".", "append", "(", "\n", "{", "\n", "\"img\"", ":", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "split", ",", "\"%s.jpg\"", "%", "fname", ")", ",", "\n", "\"label\"", ":", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "'labels'", ",", "\"%s.png\"", "%", "fname", ")", ",", "\n", "\"name\"", ":", "name", ",", "\n", "}", "\n", ")", "\n", "", "print", "(", "\"Loaded DRAM {} {} set with {} images\"", ".", "format", "(", "self", ".", "movement", ",", "self", ".", "split", ",", "len", "(", "self", ".", "data_list", ")", ")", ")", "\n", "\n", "if", "max_iters", "is", "not", "None", ":", "\n", "            ", "self", ".", "data_list", "=", "self", ".", "data_list", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "data_list", ")", ")", ")", "\n", "\n", "", "self", ".", "id_to_trainid", "=", "{", "\n", "0", ":", "0", ",", "\n", "3", ":", "1", ",", "\n", "4", ":", "2", ",", "\n", "5", ":", "3", ",", "\n", "8", ":", "4", ",", "\n", "9", ":", "5", ",", "\n", "10", ":", "6", ",", "\n", "12", ":", "7", ",", "\n", "13", ":", "8", ",", "\n", "15", ":", "9", ",", "\n", "16", ":", "10", ",", "\n", "17", ":", "11", ",", "\n", "}", "\n", "self", ".", "trainid2name", "=", "{", "\n", "0", ":", "'background'", ",", "\n", "1", ":", "'bird'", ",", "\n", "2", ":", "'boat'", ",", "\n", "3", ":", "'bottle'", ",", "\n", "4", ":", "'cat'", ",", "\n", "5", ":", "'chair'", ",", "\n", "6", ":", "'cow'", ",", "\n", "7", ":", "'dog'", ",", "\n", "8", ":", "'horse'", ",", "\n", "9", ":", "'person'", ",", "\n", "10", ":", "'pottedplant'", ",", "\n", "11", ":", "'sheep'", ",", "\n", "}", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n", "self", ".", "debug", "=", "debug", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.dram.DramDataSet.__len__": [[83, 85], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.dram.DramDataSet.__getitem__": [[86, 112], ["PIL.Image.open().convert", "numpy.array", "numpy.array", "dram.DramDataSet.id_to_trainid.items", "PIL.Image.fromarray", "PIL.Image.open().convert.copy", "dram.DramDataSet.transform", "PIL.Image.open", "PIL.Image.open", "numpy.ones", "numpy.array"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "debug", ":", "\n", "            ", "index", "=", "0", "\n", "", "datafiles", "=", "self", ".", "data_list", "[", "index", "]", "\n", "\n", "image", "=", "Image", ".", "open", "(", "datafiles", "[", "\"img\"", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "size", "=", "np", ".", "array", "(", "np", ".", "array", "(", "image", ")", ".", "shape", "[", ":", "2", "]", ")", "\n", "if", "self", ".", "split", "!=", "'train'", ":", "\n", "            ", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "datafiles", "[", "\"label\"", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# re-assign labels to match the format of Cityscapes", "\n", "label_copy", "=", "self", ".", "ignore_label", "*", "np", ".", "ones", "(", "label", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "                ", "label_copy", "[", "label", "==", "k", "]", "=", "v", "\n", "", "label", "=", "Image", ".", "fromarray", "(", "label_copy", ")", "\n", "", "else", ":", "\n", "            ", "label", "=", "image", ".", "copy", "(", ")", "# decoy for later use", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "image", ",", "label", "=", "self", ".", "transform", "(", "image", ",", "label", ")", "\n", "\n", "", "if", "self", ".", "split", "!=", "'train'", ":", "\n", "            ", "return", "image", ",", "label", ",", "name", "\n", "", "else", ":", "\n", "            ", "return", "image", ",", "size", ",", "name", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.build.build_base_transform": [[4, 10], ["transform.Compose", "transform.Resize", "transform.ToTensor"], "function", ["None"], ["def", "build_base_transform", "(", "cfg", ",", "is_source", ")", ":", "\n", "    ", "w", ",", "h", "=", "cfg", ".", "INPUT", ".", "SOURCE_INPUT_SIZE_TRAIN", "if", "is_source", "else", "cfg", ".", "INPUT", ".", "TARGET_INPUT_SIZE_TRAIN", "\n", "trans", "=", "transform", ".", "Compose", "(", "[", "\n", "transform", ".", "Resize", "(", "(", "h", ",", "w", ")", ",", "resize_label", "=", "True", ")", ",", "\n", "transform", ".", "ToTensor", "(", ")", "]", ")", "\n", "return", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.build.build_base_transform_no_cfg": [[12, 20], ["trans_list.append", "transform.Compose", "transform.ToTensor", "transform.Resize"], "function", ["None"], ["", "def", "build_base_transform_no_cfg", "(", "resize_shape", "=", "None", ")", ":", "\n", "    ", "if", "resize_shape", ":", "\n", "        ", "trans_list", "=", "[", "transform", ".", "Resize", "(", "(", "h", ",", "w", ")", ",", "resize_label", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "        ", "trans_list", "=", "[", "]", "\n", "", "trans_list", ".", "append", "(", "transform", ".", "ToTensor", "(", ")", ")", "\n", "trans", "=", "transform", ".", "Compose", "(", "trans_list", ")", "\n", "return", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.build.build_inference_transform": [[21, 29], ["transform.Compose", "transform.Resize", "transform.ToTensor", "transform.Normalize"], "function", ["None"], ["", "def", "build_inference_transform", "(", "size", ",", "mean", ",", "std", ",", "to_bgr", "=", "False", ")", ":", "\n", "    ", "w", ",", "h", "=", "size", "\n", "trans", "=", "transform", ".", "Compose", "(", "[", "\n", "transform", ".", "Resize", "(", "(", "h", ",", "w", ")", ",", "resize_label", "=", "False", ")", ",", "\n", "transform", ".", "ToTensor", "(", ")", ",", "\n", "transform", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ",", "to_bgr255", "=", "to_bgr", ")", "\n", "]", ")", "\n", "return", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.build.build_transform": [[30, 64], ["transform.Compose", "transform.Compose", "transform.ToTensor", "transform.Normalize", "transform.Resize", "transform.ToTensor", "transform.Normalize", "transform.RandomHorizontalFlip", "transform.Resize", "transform.RandomScale", "transform.RandomCrop", "transform.ColorJitter"], "function", ["None"], ["", "def", "build_transform", "(", "cfg", ",", "mode", ",", "is_source", ")", ":", "\n", "    ", "if", "mode", "==", "\"train\"", ":", "\n", "        ", "w", ",", "h", "=", "cfg", ".", "INPUT", ".", "SOURCE_INPUT_SIZE_TRAIN", "if", "is_source", "else", "cfg", ".", "INPUT", ".", "TARGET_INPUT_SIZE_TRAIN", "\n", "trans_list", "=", "[", "\n", "transform", ".", "ToTensor", "(", ")", ",", "\n", "transform", ".", "Normalize", "(", "mean", "=", "cfg", ".", "INPUT", ".", "PIXEL_MEAN", ",", "std", "=", "cfg", ".", "INPUT", ".", "PIXEL_STD", ",", "to_bgr255", "=", "cfg", ".", "INPUT", ".", "TO_BGR255", ")", "\n", "]", "\n", "if", "cfg", ".", "INPUT", ".", "HORIZONTAL_FLIP_PROB_TRAIN", ">", "0", ":", "\n", "            ", "trans_list", "=", "[", "transform", ".", "RandomHorizontalFlip", "(", "p", "=", "cfg", ".", "INPUT", ".", "HORIZONTAL_FLIP_PROB_TRAIN", ")", ",", "]", "+", "trans_list", "\n", "", "if", "cfg", ".", "INPUT", ".", "INPUT_SCALES_TRAIN", "[", "0", "]", "==", "cfg", ".", "INPUT", ".", "INPUT_SCALES_TRAIN", "[", "1", "]", "and", "cfg", ".", "INPUT", ".", "INPUT_SCALES_TRAIN", "[", "0", "]", "==", "1", ":", "\n", "            ", "trans_list", "=", "[", "transform", ".", "Resize", "(", "(", "h", ",", "w", ")", ")", ",", "]", "+", "trans_list", "\n", "", "else", ":", "\n", "            ", "trans_list", "=", "[", "\n", "transform", ".", "RandomScale", "(", "scale", "=", "cfg", ".", "INPUT", ".", "INPUT_SCALES_TRAIN", ")", ",", "\n", "transform", ".", "RandomCrop", "(", "size", "=", "(", "h", ",", "w", ")", ",", "pad_if_needed", "=", "True", ")", ",", "\n", "]", "+", "trans_list", "\n", "", "if", "is_source", ":", "\n", "            ", "trans_list", "=", "[", "\n", "transform", ".", "ColorJitter", "(", "\n", "brightness", "=", "cfg", ".", "INPUT", ".", "BRIGHTNESS", ",", "\n", "contrast", "=", "cfg", ".", "INPUT", ".", "CONTRAST", ",", "\n", "saturation", "=", "cfg", ".", "INPUT", ".", "SATURATION", ",", "\n", "hue", "=", "cfg", ".", "INPUT", ".", "HUE", ",", "\n", ")", ",", "\n", "]", "+", "trans_list", "\n", "", "trans", "=", "transform", ".", "Compose", "(", "trans_list", ")", "\n", "", "else", ":", "\n", "        ", "w", ",", "h", "=", "cfg", ".", "INPUT", ".", "INPUT_SIZE_TEST", "\n", "trans", "=", "transform", ".", "Compose", "(", "[", "\n", "transform", ".", "Resize", "(", "(", "h", ",", "w", ")", ",", "resize_label", "=", "False", ")", ",", "\n", "transform", ".", "ToTensor", "(", ")", ",", "\n", "transform", ".", "Normalize", "(", "mean", "=", "cfg", ".", "INPUT", ".", "PIXEL_MEAN", ",", "std", "=", "cfg", ".", "INPUT", ".", "PIXEL_STD", ",", "to_bgr255", "=", "cfg", ".", "INPUT", ".", "TO_BGR255", ")", "\n", "]", ")", "\n", "", "return", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.build.build_dataset": [[66, 82], ["build.build_transform", "dataset_path_catalog.DatasetCatalog.get", "dataset_path_catalog.DatasetCatalog.get", "dataset_path_catalog.DatasetCatalog.get", "dataset_path_catalog.DatasetCatalog.get"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.build.build_transform", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.dataset_path_catalog.DatasetCatalog.get", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.dataset_path_catalog.DatasetCatalog.get", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.dataset_path_catalog.DatasetCatalog.get", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.dataset_path_catalog.DatasetCatalog.get"], ["", "def", "build_dataset", "(", "cfg", ",", "mode", "=", "'train'", ",", "is_source", "=", "True", ",", "epochwise", "=", "False", ")", ":", "\n", "    ", "assert", "mode", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", "\n", "trans", "=", "build_transform", "(", "cfg", ",", "mode", ",", "is_source", ")", "\n", "iters", "=", "None", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "if", "not", "epochwise", ":", "\n", "            ", "iters", "=", "cfg", ".", "SOLVER", ".", "MAX_ITER", "*", "cfg", ".", "SOLVER", ".", "BATCH_SIZE", "\n", "", "if", "is_source", ":", "\n", "            ", "dataset", "=", "DatasetCatalog", ".", "get", "(", "cfg", ".", "DATASETS", ".", "SOURCE_TRAIN", ",", "mode", ",", "num_classes", "=", "cfg", ".", "MODEL", ".", "NUM_CLASSES", ",", "max_iters", "=", "iters", ",", "transform", "=", "trans", ")", "\n", "", "else", ":", "\n", "            ", "dataset", "=", "DatasetCatalog", ".", "get", "(", "cfg", ".", "DATASETS", ".", "TARGET_TRAIN", ",", "mode", ",", "num_classes", "=", "cfg", ".", "MODEL", ".", "NUM_CLASSES", ",", "max_iters", "=", "iters", ",", "transform", "=", "trans", ")", "\n", "", "", "elif", "mode", "==", "'val'", ":", "\n", "        ", "dataset", "=", "DatasetCatalog", ".", "get", "(", "cfg", ".", "DATASETS", ".", "TEST", ",", "mode", ",", "num_classes", "=", "cfg", ".", "MODEL", ".", "NUM_CLASSES", ",", "max_iters", "=", "iters", ",", "transform", "=", "trans", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "        ", "dataset", "=", "DatasetCatalog", ".", "get", "(", "cfg", ".", "DATASETS", ".", "TEST", ",", "mode", ",", "num_classes", "=", "cfg", ".", "MODEL", ".", "NUM_CLASSES", ",", "max_iters", "=", "iters", ",", "transform", "=", "trans", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.build.build_dataset_no_cfg": [[84, 93], ["build.build_transform", "dataset_path_catalog.DatasetCatalog.get"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.build.build_transform", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.dataset_path_catalog.DatasetCatalog.get"], ["", "def", "build_dataset_no_cfg", "(", "cfg", ",", "dataset", ",", "mode", "=", "'train'", ",", "is_source", "=", "True", ",", "epochwise", "=", "False", ")", ":", "\n", "    ", "assert", "mode", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", "\n", "trans", "=", "build_transform", "(", "cfg", ",", "mode", ",", "is_source", ")", "\n", "iters", "=", "None", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "if", "not", "epochwise", ":", "\n", "            ", "iters", "=", "cfg", ".", "SOLVER", ".", "MAX_ITER", "*", "cfg", ".", "SOLVER", ".", "BATCH_SIZE", "\n", "", "", "dataset", "=", "DatasetCatalog", ".", "get", "(", "dataset", ",", "mode", ",", "num_classes", "=", "cfg", ".", "MODEL", ".", "NUM_CLASSES", ",", "max_iters", "=", "iters", ",", "transform", "=", "trans", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.dataset_path_catalog.DatasetCatalog.get": [[175, 204], ["RuntimeError", "dict", "pascal_sbd12.PascalSbd12DataSet", "dict", "dram.DramDataSet", "os.path.join", "os.path.join", "dict", "cdriving.CDrivingDataSet", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "get", "(", "name", ",", "mode", ",", "num_classes", "=", "12", ",", "max_iters", "=", "None", ",", "transform", "=", "None", ")", ":", "\n", "        ", "if", "\"pascal_sbd12\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATASET_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"data_dir\"", "]", ")", ",", "\n", "data_list", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"data_dir\"", "]", ",", "attrs", "[", "\"data_list\"", "]", ")", ",", "\n", ")", "\n", "return", "PascalSbd12DataSet", "(", "args", "[", "\"root\"", "]", ",", "args", "[", "\"data_list\"", "]", ",", "max_iters", "=", "max_iters", ",", "num_classes", "=", "num_classes", ",", "split", "=", "mode", ",", "transform", "=", "transform", ")", "\n", "\n", "", "elif", "\"dram\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATASET_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "'data_dir'", "]", ")", ",", "\n", "movement", "=", "attrs", "[", "'movement'", "]", ")", "\n", "return", "DramDataSet", "(", "args", "[", "\"root\"", "]", ",", "args", "[", "\"movement\"", "]", ",", "max_iters", "=", "max_iters", ",", "num_classes", "=", "num_classes", ",", "split", "=", "mode", ",", "transform", "=", "transform", ")", "\n", "\n", "", "elif", "\"cdriving\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATASET_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "'data_dir'", "]", ")", ",", "\n", "data_list", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "'data_dir'", "]", ",", "attrs", "[", "\"data_list\"", "]", ")", ",", "\n", ")", "\n", "return", "CDrivingDataSet", "(", "args", "[", "\"root\"", "]", ",", "args", "[", "\"data_list\"", "]", ",", "max_iters", "=", "max_iters", ",", "split", "=", "mode", ",", "transform", "=", "transform", ")", "\n", "\n", "", "raise", "RuntimeError", "(", "\"Dataset not available: {}\"", ".", "format", "(", "name", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.Compose.__init__": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.Compose.__call__": [[17, 21], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "image", ",", "label", "=", "t", "(", "image", ",", "label", ")", "\n", "", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.Compose.__repr__": [[22, 29], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "format_string", "+=", "\"\\n\"", "\n", "format_string", "+=", "\"    {0}\"", ".", "format", "(", "t", ")", "\n", "", "format_string", "+=", "\"\\n)\"", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.ToTensor.__call__": [[32, 34], ["torchvision.transforms.functional.to_tensor", "torchvision.transforms.functional.to_tensor().squeeze", "torchvision.transforms.functional.to_tensor"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "return", "F", ".", "to_tensor", "(", "image", ")", ",", "F", ".", "to_tensor", "(", "label", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.ToNumpy.__call__": [[36, 38], ["image.numpy().transpose", "label.numpy", "image.numpy"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "return", "image", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "label", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.ChangeToPIL.__init__": [[40, 42], ["ToPILImage"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "pil_trans", "=", "ToPILImage", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.ChangeToPIL.__call__": [[43, 45], ["transform.ChangeToPIL.pil_trans", "transform.ChangeToPIL.pil_trans"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "return", "self", ".", "pil_trans", "(", "image", ")", ",", "self", ".", "pil_trans", "(", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.Normalize.__init__": [[48, 52], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ",", "to_bgr255", "=", "True", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "to_bgr255", "=", "to_bgr255", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.Normalize.__call__": [[53, 58], ["torchvision.transforms.functional.normalize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "if", "self", ".", "to_bgr255", ":", "\n", "            ", "image", "=", "image", "[", "[", "2", ",", "1", ",", "0", "]", "]", "*", "255", "\n", "", "image", "=", "F", ".", "normalize", "(", "image", ",", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.Resize.__init__": [[62, 66], ["isinstance", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "resize_label", "=", "True", ")", ":", "\n", "        ", "assert", "(", "isinstance", "(", "size", ",", "collections", ".", "Iterable", ")", "and", "len", "(", "size", ")", "==", "2", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "resize_label", "=", "resize_label", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.Resize.__call__": [[67, 76], ["torchvision.transforms.functional.resize", "isinstance", "cv2.resize", "torchvision.transforms.functional.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "image", "=", "F", ".", "resize", "(", "image", ",", "self", ".", "size", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "self", ".", "resize_label", ":", "\n", "            ", "if", "isinstance", "(", "label", ",", "np", ".", "ndarray", ")", ":", "\n", "# assert the shape of label is in the order of (h, w, c)", "\n", "                ", "label", "=", "cv2", ".", "resize", "(", "label", ",", "(", "self", ".", "size", "[", "1", "]", ",", "self", ".", "size", "[", "0", "]", ")", ",", "cv2", ".", "INTER_LINEAR", ")", "\n", "", "else", ":", "\n", "                ", "label", "=", "F", ".", "resize", "(", "label", ",", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", "\n", "", "", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.RandomScale.__init__": [[79, 84], ["isinstance", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scale", ",", "size", "=", "None", ",", "resize_label", "=", "True", ")", ":", "\n", "        ", "assert", "(", "isinstance", "(", "scale", ",", "collections", ".", "Iterable", ")", "and", "len", "(", "scale", ")", "==", "2", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "resize_label", "=", "resize_label", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.RandomScale.__call__": [[85, 99], ["torchvision.transforms.functional.resize", "int", "int", "isinstance", "random.random", "cv2.resize", "torchvision.transforms.functional.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "w", ",", "h", "=", "image", ".", "size", "\n", "if", "self", ".", "size", ":", "\n", "            ", "h", ",", "w", "=", "self", ".", "size", "\n", "", "temp_scale", "=", "self", ".", "scale", "[", "0", "]", "+", "(", "self", ".", "scale", "[", "1", "]", "-", "self", ".", "scale", "[", "0", "]", ")", "*", "random", ".", "random", "(", ")", "\n", "size", "=", "(", "int", "(", "h", "*", "temp_scale", ")", ",", "int", "(", "w", "*", "temp_scale", ")", ")", "\n", "image", "=", "F", ".", "resize", "(", "image", ",", "size", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "self", ".", "resize_label", ":", "\n", "            ", "if", "isinstance", "(", "label", ",", "np", ".", "ndarray", ")", ":", "\n", "# assert the shape of label is in the order of (h, w, c)", "\n", "                ", "label", "=", "cv2", ".", "resize", "(", "label", ",", "(", "self", ".", "size", "[", "1", "]", ",", "self", ".", "size", "[", "0", "]", ")", ",", "cv2", ".", "INTER_LINEAR", ")", "\n", "", "else", ":", "\n", "                ", "label", "=", "F", ".", "resize", "(", "label", ",", "size", ",", "Image", ".", "NEAREST", ")", "\n", "", "", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.RandomCrop.__init__": [[101, 118], ["isinstance", "isinstance", "isinstance", "int", "int", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "padding", "=", "None", ",", "pad_if_needed", "=", "False", ",", "fill", "=", "0", ",", "label_fill", "=", "255", ",", "padding_mode", "=", "'constant'", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n", "", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "padding", "=", "(", "padding", ",", "padding", ",", "padding", ",", "padding", ")", "\n", "", "elif", "isinstance", "(", "size", ",", "tuple", ")", ":", "\n", "            ", "if", "padding", "is", "not", "None", "and", "len", "(", "padding", ")", "==", "2", ":", "\n", "                ", "self", ".", "padding", "=", "(", "padding", "[", "0", "]", ",", "padding", "[", "1", "]", ",", "padding", "[", "0", "]", ",", "padding", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "padding", "=", "padding", "\n", "", "", "self", ".", "pad_if_needed", "=", "pad_if_needed", "\n", "self", ".", "fill", "=", "fill", "\n", "self", ".", "label_fill", "=", "label_fill", "\n", "self", ".", "padding_mode", "=", "padding_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.RandomCrop.get_params": [[119, 129], ["random.randint", "random.randint"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "img", ",", "output_size", ")", ":", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "output_size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "0", ",", "0", ",", "h", ",", "w", "\n", "\n", "", "i", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "return", "i", ",", "j", ",", "th", ",", "tw", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.RandomCrop.__call__": [[130, 162], ["transform.RandomCrop.get_params", "torchvision.transforms.functional.crop", "isinstance", "torchvision.transforms.functional.pad", "isinstance", "torchvision.transforms.functional.pad", "isinstance", "torchvision.transforms.functional.pad", "isinstance", "torchvision.transforms.functional.crop", "numpy.pad", "torchvision.transforms.functional.pad", "numpy.pad", "torchvision.transforms.functional.pad", "numpy.pad", "torchvision.transforms.functional.pad"], "methods", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.RandomCrop.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ",", "lab", ")", ":", "\n", "        ", "if", "self", ".", "padding", "is", "not", "None", ":", "\n", "            ", "img", "=", "F", ".", "pad", "(", "img", ",", "self", ".", "padding", ",", "self", ".", "fill", ",", "self", ".", "padding_mode", ")", "\n", "if", "isinstance", "(", "lab", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "lab", "=", "np", ".", "pad", "(", "lab", ",", "(", "(", "self", ".", "padding", "[", "1", "]", ",", "self", ".", "padding", "[", "3", "]", ")", ",", "(", "self", ".", "padding", "[", "0", "]", ",", "self", ".", "padding", "[", "2", "]", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ")", "\n", "", "else", ":", "\n", "                ", "lab", "=", "F", ".", "pad", "(", "lab", ",", "self", ".", "padding", ",", "self", ".", "label_fill", ",", "self", ".", "padding_mode", ")", "\n", "\n", "# pad the width if needed", "\n", "", "", "if", "self", ".", "pad_if_needed", "and", "img", ".", "size", "[", "0", "]", "<", "self", ".", "size", "[", "1", "]", ":", "\n", "            ", "img", "=", "F", ".", "pad", "(", "img", ",", "(", "self", ".", "size", "[", "1", "]", "-", "img", ".", "size", "[", "0", "]", ",", "0", ")", ",", "self", ".", "fill", ",", "self", ".", "padding_mode", ")", "\n", "if", "isinstance", "(", "lab", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "lab", "=", "np", ".", "pad", "(", "lab", ",", "(", "(", "0", ",", "0", ")", ",", "(", "self", ".", "size", "[", "1", "]", "-", "img", ".", "size", "[", "0", "]", ",", "self", ".", "size", "[", "1", "]", "-", "img", ".", "size", "[", "0", "]", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ")", "\n", "", "else", ":", "\n", "                ", "lab", "=", "F", ".", "pad", "(", "lab", ",", "(", "self", ".", "size", "[", "1", "]", "-", "lab", ".", "size", "[", "0", "]", ",", "0", ")", ",", "self", ".", "label_fill", ",", "self", ".", "padding_mode", ")", "\n", "\n", "# pad the height if needed", "\n", "", "", "if", "self", ".", "pad_if_needed", "and", "img", ".", "size", "[", "1", "]", "<", "self", ".", "size", "[", "0", "]", ":", "\n", "            ", "img", "=", "F", ".", "pad", "(", "img", ",", "(", "0", ",", "self", ".", "size", "[", "0", "]", "-", "img", ".", "size", "[", "1", "]", ")", ",", "self", ".", "fill", ",", "self", ".", "padding_mode", ")", "\n", "if", "isinstance", "(", "lab", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "lab", "=", "np", ".", "pad", "(", "lab", ",", "(", "(", "self", ".", "size", "[", "0", "]", "-", "img", ".", "size", "[", "1", "]", ",", "self", ".", "size", "[", "0", "]", "-", "img", ".", "size", "[", "1", "]", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ")", "\n", "", "else", ":", "\n", "                ", "lab", "=", "F", ".", "pad", "(", "lab", ",", "(", "0", ",", "self", ".", "size", "[", "0", "]", "-", "lab", ".", "size", "[", "1", "]", ")", ",", "self", ".", "label_fill", ",", "self", ".", "padding_mode", ")", "\n", "\n", "", "", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "get_params", "(", "img", ",", "self", ".", "size", ")", "\n", "img", "=", "F", ".", "crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "if", "isinstance", "(", "lab", ",", "np", ".", "ndarray", ")", ":", "\n", "# assert the shape of label is in the order of (h, w, c)", "\n", "            ", "lab", "=", "lab", "[", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "lab", "=", "F", ".", "crop", "(", "lab", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "", "return", "img", ",", "lab", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.RandomCrop.__repr__": [[163, 165], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(size={0}, padding={1})'", ".", "format", "(", "self", ".", "size", ",", "self", ".", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.RandomHorizontalFlip.__init__": [[168, 170], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.RandomHorizontalFlip.__call__": [[171, 180], ["random.random", "torchvision.transforms.functional.hflip", "isinstance", "torchvision.transforms.functional.hflip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "image", "=", "F", ".", "hflip", "(", "image", ")", "\n", "if", "isinstance", "(", "label", ",", "np", ".", "ndarray", ")", ":", "\n", "# assert the shape of label is in the order of (h, w, c)", "\n", "                ", "label", "=", "label", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "label", "=", "F", ".", "hflip", "(", "label", ")", "\n", "", "", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.ColorJitter.__init__": [[183, 194], ["torchvision.transforms.ColorJitter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "brightness", "=", "None", ",", "\n", "contrast", "=", "None", ",", "\n", "saturation", "=", "None", ",", "\n", "hue", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "color_jitter", "=", "torchvision", ".", "transforms", ".", "ColorJitter", "(", "\n", "brightness", "=", "brightness", ",", "\n", "contrast", "=", "contrast", ",", "\n", "saturation", "=", "saturation", ",", "\n", "hue", "=", "hue", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.ColorJitter.__call__": [[195, 198], ["transform.ColorJitter.color_jitter"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "image", "=", "self", ".", "color_jitter", "(", "image", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.ResizeAndPad.__init__": [[203, 207], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "# size: (h, w)", "\n", "self", ".", "crop_h", ",", "self", ".", "crop_w", "=", "size", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.ResizeAndPad.__call__": [[208, 237], ["numpy.array", "numpy.array", "max", "max", "int", "cv2.resize", "cv2.resize", "cv2.copyMakeBorder", "cv2.copyMakeBorder", "int", "cv2.resize", "cv2.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "image", "=", "np", ".", "array", "(", "image", ")", "\n", "label", "=", "np", ".", "array", "(", "label", ")", "\n", "assert", "image", ".", "shape", "[", ":", "2", "]", "==", "label", ".", "shape", "\n", "img_h", ",", "img_w", "=", "label", ".", "shape", "\n", "\n", "# Resize", "\n", "if", "img_h", ">", "img_w", "and", "img_h", ">", "self", ".", "crop_h", ":", "\n", "            ", "new_w", "=", "int", "(", "(", "self", ".", "crop_h", "/", "img_h", ")", "*", "img_w", ")", "\n", "img_h", ",", "img_w", "=", "self", ".", "crop_h", ",", "new_w", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "new_w", ",", "self", ".", "crop_h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "label", "=", "cv2", ".", "resize", "(", "label", ",", "(", "new_w", ",", "self", ".", "crop_h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "", "elif", "img_w", ">=", "img_h", "and", "img_w", ">", "self", ".", "crop_w", ":", "\n", "            ", "new_h", "=", "int", "(", "(", "self", ".", "crop_w", "/", "img_w", ")", "*", "img_h", ")", "\n", "img_h", ",", "img_w", "=", "new_h", ",", "self", ".", "crop_w", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "self", ".", "crop_w", ",", "new_h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "label", "=", "cv2", ".", "resize", "(", "label", ",", "(", "self", ".", "crop_w", ",", "new_h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "# Pad", "\n", "", "pad_h", "=", "max", "(", "self", ".", "crop_h", "-", "img_h", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "self", ".", "crop_w", "-", "img_w", ",", "0", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "            ", "image", "=", "cv2", ".", "copyMakeBorder", "(", "image", ",", "0", ",", "pad_h", ",", "0", ",", "\n", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "0.0", ",", "0.0", ",", "0.0", ")", ")", "\n", "label", "=", "cv2", ".", "copyMakeBorder", "(", "label", ",", "0", ",", "pad_h", ",", "0", ",", "\n", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "self", ".", "ignore_label", ",", ")", ")", "\n", "", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.RandomAffineTransform.__init__": [[240, 254], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "scale_range", ",", "\n", "rotation_range", ",", "\n", "shear_range", ",", "\n", "translation_range", "=", "None", ",", "\n", "background_val", "=", "1", ",", "\n", "ignore_label", "=", "False", "\n", ")", ":", "\n", "        ", "self", ".", "scale_range", "=", "scale_range", "\n", "self", ".", "rotation_range", "=", "rotation_range", "\n", "self", ".", "shear_range", "=", "shear_range", "\n", "self", ".", "translation_range", "=", "translation_range", "\n", "self", ".", "cval", "=", "background_val", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.RandomAffineTransform.calc_new_shape": [[255, 267], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "af_trans", "numpy.ceil", "numpy.ceil", "numpy.array", "numpy.max", "numpy.min", "numpy.max", "numpy.min"], "methods", ["None"], ["", "def", "calc_new_shape", "(", "self", ",", "af_trans", ",", "im_shape", ")", ":", "\n", "        ", "tl", "=", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", "\n", "tr", "=", "np", ".", "array", "(", "[", "0", ",", "im_shape", "[", "1", "]", "]", ")", "\n", "bl", "=", "np", ".", "array", "(", "[", "im_shape", "[", "0", "]", ",", "0", "]", ")", "\n", "br", "=", "np", ".", "array", "(", "[", "im_shape", "[", "0", "]", ",", "im_shape", "[", "1", "]", "]", ")", "\n", "\n", "new_coords", "=", "af_trans", "(", "np", ".", "array", "(", "[", "tl", "[", ":", ":", "-", "1", "]", ",", "tr", "[", ":", ":", "-", "1", "]", ",", "bl", "[", ":", ":", "-", "1", "]", ",", "br", "[", ":", ":", "-", "1", "]", "]", ")", ")", "# af trans takes cooridnates (x, y) rather than (y, x)", "\n", "new_tl", ",", "new_tr", ",", "new_bl", ",", "new_br", "=", "new_coords", "[", "0", "]", ",", "new_coords", "[", "1", "]", ",", "new_coords", "[", "2", "]", ",", "new_coords", "[", "3", "]", "\n", "new_h", "=", "np", ".", "ceil", "(", "np", ".", "max", "(", "[", "new_tl", "[", "1", "]", ",", "new_tr", "[", "1", "]", ",", "new_bl", "[", "1", "]", ",", "new_br", "[", "1", "]", "]", ")", "-", "np", ".", "min", "(", "[", "new_tl", "[", "1", "]", ",", "new_tr", "[", "1", "]", ",", "new_bl", "[", "1", "]", ",", "new_br", "[", "1", "]", "]", ")", ")", "\n", "new_w", "=", "np", ".", "ceil", "(", "np", ".", "max", "(", "[", "new_tl", "[", "0", "]", ",", "new_tr", "[", "0", "]", ",", "new_bl", "[", "0", "]", ",", "new_br", "[", "0", "]", "]", ")", "-", "np", ".", "min", "(", "[", "new_tl", "[", "0", "]", ",", "new_tr", "[", "0", "]", ",", "new_bl", "[", "0", "]", ",", "new_br", "[", "0", "]", "]", ")", ")", "\n", "\n", "return", "new_h", ",", "new_w", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.RandomAffineTransform.calc_center_translation": [[268, 276], ["numpy.array", "af_mat"], "methods", ["None"], ["", "def", "calc_center_translation", "(", "self", ",", "af_mat", ",", "trans_shape", ")", ":", "\n", "        ", "padded_center", "=", "np", ".", "array", "(", "[", "trans_shape", "[", "1", "]", "//", "2", ",", "trans_shape", "[", "0", "]", "//", "2", "]", ")", "\n", "new_center", "=", "af_mat", "(", "padded_center", ")", "[", "0", "]", "\n", "\n", "trans_w", "=", "padded_center", "[", "0", "]", "-", "new_center", "[", "0", "]", "\n", "trans_h", "=", "padded_center", "[", "1", "]", "-", "new_center", "[", "1", "]", "\n", "\n", "return", "trans_w", ",", "trans_h", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.RandomAffineTransform.__call__": [[277, 341], ["numpy.array", "numpy.random.uniform", "numpy.random.uniform", "bool", "numpy.random.uniform", "numpy.random.uniform", "skimage.transform.AffineTransform", "transform.RandomAffineTransform.calc_new_shape", "max", "max", "numpy.pad", "transform.RandomAffineTransform.calc_center_translation", "skimage.transform.AffineTransform", "skimage.transform.warp", "max", "max", "numpy.uint8", "numpy.array", "numpy.random.randint", "int", "int", "numpy.pad", "skimage.transform.warp", "int", "int", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.RandomAffineTransform.calc_new_shape", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.transform.RandomAffineTransform.calc_center_translation"], ["", "def", "__call__", "(", "self", ",", "img", ",", "label", ",", "scale_range", "=", "None", ")", ":", "\n", "        ", "if", "img", "is", "None", ":", "\n", "            ", "return", "None", ",", "None", "\n", "", "img_data", "=", "np", ".", "array", "(", "img", ")", "\n", "if", "not", "self", ".", "ignore_label", "and", "label", "is", "not", "None", ":", "\n", "            ", "label", "=", "np", ".", "array", "(", "label", ")", "\n", "", "h", ",", "w", ",", "n_chan", "=", "img_data", ".", "shape", "\n", "\n", "# Create Affine Transform without translation", "\n", "if", "scale_range", "is", "not", "None", ":", "\n", "            ", "scale_min", ",", "scale_max", "=", "self", ".", "scale_range", "\n", "if", "scale_range", "[", "0", "]", "is", "not", "None", ":", "\n", "                ", "scale_min", "=", "scale_range", "[", "0", "]", "\n", "", "if", "scale_range", "[", "1", "]", "is", "not", "None", ":", "\n", "                ", "scale_max", "=", "scale_range", "[", "1", "]", "\n", "", "self", ".", "scale_range", "=", "(", "scale_min", ",", "scale_max", ")", "\n", "", "scale_h", "=", "np", ".", "random", ".", "uniform", "(", "*", "self", ".", "scale_range", ")", "\n", "scale_w", "=", "np", ".", "random", ".", "uniform", "(", "*", "self", ".", "scale_range", ")", "\n", "mirror", "=", "bool", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ")", ")", "\n", "if", "mirror", ":", "\n", "            ", "scale_w", "*=", "-", "1", "\n", "", "scale", "=", "(", "scale_w", ",", "scale_h", ")", "\n", "\n", "rotation", "=", "np", ".", "random", ".", "uniform", "(", "*", "self", ".", "rotation_range", ")", "\n", "shear", "=", "np", ".", "random", ".", "uniform", "(", "*", "self", ".", "shear_range", ")", "\n", "\n", "af", "=", "AffineTransform", "(", "scale", "=", "scale", ",", "rotation", "=", "rotation", ",", "shear", "=", "shear", ")", "\n", "\n", "# Calculate new shape and Pad Image (If needed)", "\n", "new_shape", "=", "self", ".", "calc_new_shape", "(", "af", ",", "img_data", ".", "shape", ")", "\n", "addition_h", "=", "new_shape", "[", "0", "]", "-", "h", "\n", "addition_w", "=", "new_shape", "[", "1", "]", "-", "w", "\n", "pad_h", "=", "max", "(", "int", "(", "addition_h", "//", "2", ")", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "int", "(", "addition_w", "//", "2", ")", ",", "0", ")", "\n", "img_data", "=", "np", ".", "pad", "(", "img_data", ",", "[", "(", "pad_h", ",", "pad_h", ")", ",", "(", "pad_w", ",", "pad_w", ")", ",", "(", "0", ",", "0", ")", "]", ")", "\n", "if", "not", "self", ".", "ignore_label", "and", "label", "is", "not", "None", ":", "\n", "            ", "label", "=", "np", ".", "pad", "(", "label", ",", "[", "(", "pad_h", ",", "pad_h", ")", ",", "(", "pad_w", ",", "pad_w", ")", "]", ")", "\n", "\n", "# Calculate translation and creating new affine transformation", "\n", "", "translation", "=", "self", ".", "calc_center_translation", "(", "af", ",", "img_data", ".", "shape", ")", "\n", "af", "=", "AffineTransform", "(", "scale", "=", "scale", ",", "rotation", "=", "rotation", ",", "shear", "=", "shear", ",", "translation", "=", "translation", ")", "\n", "\n", "# Warp Image", "\n", "img_data1", "=", "warp", "(", "img_data", ",", "af", ".", "inverse", ")", "\n", "if", "not", "self", ".", "ignore_label", "and", "label", "is", "not", "None", ":", "\n", "            ", "label", "=", "warp", "(", "label", "/", "255", ",", "af", ".", "inverse", ",", "order", "=", "0", ",", "cval", "=", "self", ".", "cval", ")", "*", "255", "\n", "\n", "# Crop Image (if needed)", "\n", "", "crop_h", "=", "max", "(", "-", "int", "(", "addition_h", "//", "2", ")", ",", "0", ")", "\n", "crop_w", "=", "max", "(", "-", "int", "(", "addition_w", "//", "2", ")", ",", "0", ")", "\n", "img_data1", "=", "img_data1", "[", "crop_h", ":", "img_data1", ".", "shape", "[", "0", "]", "-", "crop_h", ",", "crop_w", ":", "img_data1", ".", "shape", "[", "1", "]", "-", "crop_w", ",", ":", "]", "\n", "img1", "=", "np", ".", "uint8", "(", "img_data1", "*", "255", ")", "\n", "# img1 = Image.fromarray(np.uint8(img_data1 * 255))", "\n", "if", "not", "self", ".", "ignore_label", "and", "label", "is", "not", "None", ":", "\n", "            ", "label", "=", "label", "[", "crop_h", ":", "label", ".", "shape", "[", "0", "]", "-", "crop_h", ",", "crop_w", ":", "label", ".", "shape", "[", "1", "]", "-", "crop_w", "]", "\n", "# label = np.uint8(label)", "\n", "# label = Image.fromarray(np.uint8(label * 255))", "\n", "\n", "", "if", "self", ".", "ignore_label", ":", "\n", "            ", "return", "Image", ".", "fromarray", "(", "img1", ")", ",", "Image", ".", "fromarray", "(", "img1", ")", "\n", "", "elif", "label", "is", "not", "None", ":", "\n", "            ", "return", "Image", ".", "fromarray", "(", "img1", ")", ",", "Image", ".", "fromarray", "(", "label", ")", "\n", "", "else", ":", "\n", "            ", "return", "Image", ".", "fromarray", "(", "img1", ")", ",", "None", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.cdriving.CDrivingDataSet.__init__": [[11, 60], ["i_id.strip", "os.join", "cdriving.CDrivingDataSet.files.append", "open", "int", "numpy.ceil", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_root", ",", "data_list", ",", "max_iters", "=", "None", ",", "crop_size", "=", "(", "960", ",", "540", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "transform", "=", "None", ",", "ignore_label", "=", "255", ",", "split", "=", "'val'", ")", ":", "\n", "        ", "self", ".", "root", "=", "data_root", "\n", "self", ".", "list_path", "=", "data_list", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "# self.mean_bgr = np.array([104.00698793, 116.66876762, 122.67891434])", "\n", "# self.mean_rgb = np.array([122.67891434, 116.66876762, 104.00698793])", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "data_list", ")", "]", "\n", "if", "not", "max_iters", "==", "None", ":", "\n", "            ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "split", "=", "split", "\n", "# for split in [\"train\", \"trainval\", \"val\"]:", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "name", ")", "\n", "lbl_file", "=", "img_file", "[", ":", "-", "4", "]", "+", "'_train_id.png'", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"lbl\"", ":", "lbl_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n", "\n", "", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "id_to_trainid", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n", "self", ".", "trainid2name", "=", "{", "\n", "0", ":", "\"road\"", ",", "\n", "1", ":", "\"sidewalk\"", ",", "\n", "2", ":", "\"building\"", ",", "\n", "3", ":", "\"wall\"", ",", "\n", "4", ":", "\"fence\"", ",", "\n", "5", ":", "\"pole\"", ",", "\n", "6", ":", "\"light\"", ",", "\n", "7", ":", "\"sign\"", ",", "\n", "8", ":", "\"vegetation\"", ",", "\n", "9", ":", "\"terrain\"", ",", "\n", "10", ":", "\"sky\"", ",", "\n", "11", ":", "\"person\"", ",", "\n", "12", ":", "\"rider\"", ",", "\n", "13", ":", "\"car\"", ",", "\n", "14", ":", "\"truck\"", ",", "\n", "15", ":", "\"bus\"", ",", "\n", "16", ":", "\"train\"", ",", "\n", "17", ":", "\"motocycle\"", ",", "\n", "18", ":", "\"bicycle\"", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.cdriving.CDrivingDataSet.__len__": [[62, 64], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.cdriving.CDrivingDataSet.__getitem__": [[65, 92], ["PIL.Image.open().convert", "numpy.array", "PIL.Image.open().convert.copy", "numpy.array", "cdriving.CDrivingDataSet.transform", "numpy.array", "PIL.Image.open", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "\n", "image", "=", "Image", ".", "open", "(", "datafiles", "[", "\"img\"", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "if", "self", ".", "split", "!=", "'train'", ":", "\n", "            ", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "datafiles", "[", "\"lbl\"", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "label", "=", "image", ".", "copy", "(", ")", "\n", "", "size", "=", "np", ".", "array", "(", "label", ")", ".", "shape", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "\n", "# resize", "\n", "# image = image.resize(self.crop_size, Image.BICUBIC)", "\n", "# label = label.resize(self.crop_size, Image.NEAREST)", "\n", "\n", "# image = image[:, :, ::-1]  # change to BGR", "\n", "# image -= self.mean_rgb", "\n", "# image = image.transpose((2, 0, 1))", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "image", ",", "label", "=", "self", ".", "transform", "(", "image", ",", "label", ")", "\n", "\n", "", "if", "self", ".", "split", "!=", "'train'", ":", "\n", "            ", "return", "image", ",", "label", ",", "name", "\n", "\n", "", "return", "image", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.pascal_sbd12.PascalSbd12DataSet.__init__": [[9, 77], ["zip", "open", "handle.readlines", "open", "f.read().splitlines", "fname.strip", "lbl_name.strip.strip.strip", "pascal_sbd12.PascalSbd12DataSet.data_list.append", "os.path.join", "int", "os.path.join", "f.read", "os.path.join", "os.path.join", "numpy.ceil", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "data_root", ",", "\n", "data_list", ",", "\n", "max_iters", "=", "None", ",", "\n", "num_classes", "=", "12", ",", "\n", "split", "=", "\"train\"", ",", "\n", "transform", "=", "None", ",", "\n", "ignore_label", "=", "255", ",", "\n", "debug", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "split", "=", "split", "\n", "self", ".", "NUM_CLASS", "=", "num_classes", "\n", "self", ".", "data_root", "=", "data_root", "\n", "self", ".", "data_list", "=", "[", "]", "\n", "with", "open", "(", "data_list", ",", "\"r\"", ")", "as", "handle", ":", "\n", "            ", "content", "=", "handle", ".", "readlines", "(", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "self", ".", "split", "+", "'_filtered12_label.txt'", ")", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "lbl_lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "", "for", "fname", ",", "lbl_name", "in", "zip", "(", "content", ",", "lbl_lines", ")", ":", "\n", "            ", "name", "=", "fname", ".", "strip", "(", ")", "\n", "lbl_name", "=", "lbl_name", ".", "strip", "(", ")", "\n", "self", ".", "data_list", ".", "append", "(", "\n", "{", "\n", "\"img\"", ":", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "\"images/%s\"", "%", "name", ")", ",", "\n", "\"label\"", ":", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "\"labels/%s\"", "%", "lbl_name", ")", ",", "\n", "\"name\"", ":", "name", ",", "\n", "}", "\n", ")", "\n", "\n", "", "if", "max_iters", "is", "not", "None", ":", "\n", "            ", "self", ".", "data_list", "=", "self", ".", "data_list", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "data_list", ")", ")", ")", "\n", "\n", "", "self", ".", "id_to_trainid", "=", "{", "\n", "0", ":", "0", ",", "\n", "3", ":", "1", ",", "\n", "4", ":", "2", ",", "\n", "5", ":", "3", ",", "\n", "8", ":", "4", ",", "\n", "9", ":", "5", ",", "\n", "10", ":", "6", ",", "\n", "12", ":", "7", ",", "\n", "13", ":", "8", ",", "\n", "15", ":", "9", ",", "\n", "16", ":", "10", ",", "\n", "17", ":", "11", ",", "\n", "}", "\n", "self", ".", "trainid2name", "=", "{", "\n", "0", ":", "'background'", ",", "\n", "1", ":", "'bird'", ",", "\n", "2", ":", "'boat'", ",", "\n", "3", ":", "'bottle'", ",", "\n", "4", ":", "'cat'", ",", "\n", "5", ":", "'chair'", ",", "\n", "6", ":", "'cow'", ",", "\n", "7", ":", "'dog'", ",", "\n", "8", ":", "'horse'", ",", "\n", "9", ":", "'person'", ",", "\n", "10", ":", "'pottedplant'", ",", "\n", "11", ":", "'sheep'", ",", "\n", "}", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n", "self", ".", "debug", "=", "debug", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.pascal_sbd12.PascalSbd12DataSet.__len__": [[78, 80], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.datasets.pascal_sbd12.PascalSbd12DataSet.__getitem__": [[81, 102], ["PIL.Image.open().convert", "pascal_sbd12.PascalSbd12DataSet.id_to_trainid.items", "PIL.Image.fromarray", "numpy.array", "numpy.ones", "pascal_sbd12.PascalSbd12DataSet.transform", "PIL.Image.open", "PIL.Image.open", "scipy.io.loadmat"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "debug", ":", "\n", "            ", "index", "=", "0", "\n", "", "datafiles", "=", "self", ".", "data_list", "[", "index", "]", "\n", "\n", "image", "=", "Image", ".", "open", "(", "datafiles", "[", "\"img\"", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "datafiles", "[", "'label'", "]", "[", "-", "3", ":", "]", "==", "'png'", ":", "\n", "            ", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "datafiles", "[", "\"label\"", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "# .mat", "\n", "            ", "label", "=", "scipy", ".", "io", ".", "loadmat", "(", "datafiles", "[", "\"label\"", "]", ")", "[", "\"GTcls\"", "]", "[", "0", "]", "[", "'Segmentation'", "]", "[", "0", "]", "\n", "", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "\n", "# re-assign labels to match the format of PASCAL", "\n", "label_copy", "=", "self", ".", "ignore_label", "*", "np", ".", "ones", "(", "label", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "label_copy", "[", "label", "==", "k", "]", "=", "v", "\n", "", "label", "=", "Image", ".", "fromarray", "(", "label_copy", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "image", ",", "label", "=", "self", ".", "transform", "(", "image", ",", "label", ")", "\n", "", "return", "image", ",", "label", ",", "name", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.discriminator.FCDiscriminator.__init__": [[8, 18], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.classifier.ASPP_Classifier_V2.__init__"], ["\t", "def", "__init__", "(", "self", ",", "num_classes", ",", "ndf", "=", "64", ")", ":", "\n", "\t\t", "super", "(", "FCDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_classes", ",", "ndf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "#self.up_sample = nn.Upsample(scale_factor=32, mode='bilinear')", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.discriminator.FCDiscriminator.forward": [[22, 36], ["discriminator.FCDiscriminator.conv1", "discriminator.FCDiscriminator.leaky_relu", "discriminator.FCDiscriminator.conv2", "discriminator.FCDiscriminator.leaky_relu", "discriminator.FCDiscriminator.conv3", "discriminator.FCDiscriminator.leaky_relu", "discriminator.FCDiscriminator.conv4", "discriminator.FCDiscriminator.leaky_relu", "discriminator.FCDiscriminator.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "#x = self.up_sample(x)", "\n", "# x = self.sigmoid(x) ", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.discriminator.PixelDiscriminator.__init__": [[39, 50], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.classifier.ASPP_Classifier_V2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "512", ",", "num_classes", "=", "1", ")", ":", "\n", "        ", "super", "(", "PixelDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "D", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "cls1", "=", "nn", ".", "Conv2d", "(", "ndf", "//", "2", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "cls2", "=", "nn", ".", "Conv2d", "(", "ndf", "//", "2", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.discriminator.PixelDiscriminator.forward": [[51, 59], ["discriminator.PixelDiscriminator.D", "discriminator.PixelDiscriminator.cls1", "discriminator.PixelDiscriminator.cls2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "size", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "D", "(", "x", ")", "\n", "src_out", "=", "self", ".", "cls1", "(", "out", ")", "\n", "tgt_out", "=", "self", ".", "cls2", "(", "out", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "src_out", ",", "tgt_out", ")", ",", "dim", "=", "1", ")", "\n", "if", "size", "is", "not", "None", ":", "\n", "            ", "out", "=", "F", ".", "interpolate", "(", "out", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.permuteAdaIN.PermuteAdaptiveInstanceNorm2d.__init__": [[8, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.classifier.ASPP_Classifier_V2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "None", ",", "adv", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "'permute'", "in", "kwargs", ":", "\n", "            ", "self", ".", "permute", "=", "kwargs", "[", "'permute'", "]", "\n", "", "else", ":", "self", ".", "permute", "=", "True", "\n", "super", "(", "PermuteAdaptiveInstanceNorm2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "p", "is", "None", ":", "\n", "            ", "self", ".", "p", "=", "DEFAULT_P", "\n", "", "else", ":", "\n", "            ", "self", ".", "p", "=", "p", "\n", "", "self", ".", "adv", "=", "adv", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.permuteAdaIN.PermuteAdaptiveInstanceNorm2d.forward": [[19, 40], ["adaptive_instance_normalization.size", "random.random", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "print", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "permuteAdaIN.adaptive_instance_normalization", "adaptive_instance_normalization.size", "permuteAdaIN.adaptive_instance_normalization"], "methods", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.permuteAdaIN.adaptive_instance_normalization", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.permuteAdaIN.adaptive_instance_normalization"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "permute", "=", "random", ".", "random", "(", ")", "<", "self", ".", "p", "\n", "if", "permute", "and", "self", ".", "training", ":", "\n", "            ", "perm_indices", "=", "torch", ".", "randperm", "(", "x", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n", "\n", "", "size", "=", "x", ".", "size", "(", ")", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "size", "\n", "if", "N", "==", "1", ":", "\n", "            ", "return", "x", "\n", "", "if", "(", "H", ",", "W", ")", "==", "(", "1", ",", "1", ")", ":", "\n", "            ", "print", "(", "'encountered bad dims'", ")", "\n", "return", "x", "\n", "\n", "", "if", "self", ".", "adv", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "adaptive_instance_normalization", "(", "x", "[", ":", "N", "//", "2", "]", ",", "x", "[", "N", "//", "2", ":", "]", ",", "permute", "=", "True", ")", ",", "x", "[", "N", "//", "2", ":", "]", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "adaptive_instance_normalization", "(", "x", ",", "x", "[", "perm_indices", "]", ",", "True", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.permuteAdaIN.PermuteAdaptiveInstanceNorm2d.extra_repr": [[41, 44], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "'p={} permute={}, adv={}'", ".", "format", "(", "\n", "self", ".", "p", ",", "self", ".", "permute", ",", "self", ".", "adv", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.permuteAdaIN.calc_mean_std": [[48, 55], ["feat.size", "feat.view().std().view", "feat.view().mean().view", "len", "feat.view().std", "feat.view().mean", "feat.view", "feat.view"], "function", ["None"], ["", "", "def", "calc_mean_std", "(", "feat", ")", ":", "\n", "    ", "size", "=", "feat", ".", "size", "(", ")", "\n", "assert", "(", "len", "(", "size", ")", "==", "4", ")", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "size", "\n", "feat_std", "=", "feat", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", ".", "std", "(", "dim", "=", "2", ")", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "feat_mean", "=", "feat", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "2", ")", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "return", "feat_mean", ",", "feat_std", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.permuteAdaIN.adaptive_instance_normalization": [[57, 69], ["content_feat.size", "permuteAdaIN.calc_mean_std", "permuteAdaIN.calc_mean_std", "style_feat.detach", "content_std.expand", "content_feat.size", "style_feat.size", "content_mean.expand", "style_mean.expand", "style_std.expand"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.permuteAdaIN.calc_mean_std", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.permuteAdaIN.calc_mean_std"], ["", "def", "adaptive_instance_normalization", "(", "content_feat", ",", "style_feat", ",", "permute", "=", "False", ")", ":", "\n", "    ", "assert", "(", "content_feat", ".", "size", "(", ")", "[", ":", "2", "]", "==", "style_feat", ".", "size", "(", ")", "[", ":", "2", "]", ")", "\n", "size", "=", "content_feat", ".", "size", "(", ")", "\n", "\n", "style_mean", ",", "style_std", "=", "calc_mean_std", "(", "style_feat", ".", "detach", "(", ")", ")", "\n", "content_mean", ",", "content_std", "=", "calc_mean_std", "(", "content_feat", ")", "\n", "content_std", "=", "content_std", "+", "1e-4", "# to avoid division by 0", "\n", "normalized_feat", "=", "(", "content_feat", "-", "content_mean", ".", "expand", "(", "\n", "size", ")", ")", "/", "content_std", ".", "expand", "(", "size", ")", "\n", "if", "permute", ":", "\n", "        ", "normalized_feat", "=", "normalized_feat", "*", "style_std", ".", "expand", "(", "size", ")", "+", "style_mean", ".", "expand", "(", "size", ")", "\n", "", "return", "normalized_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.vgg.VGG.__init__": [[27, 42], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "vgg.VGG._initialize_weights"], "methods", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.classifier.ASPP_Classifier_V2.__init__", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.vgg.VGG._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "num_classes", "=", "1000", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "7", ",", "7", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "7", "*", "7", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", ",", "\n", ")", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.vgg.VGG.forward": [[43, 49], ["vgg.VGG.features", "vgg.VGG.avgpool", "vgg.VGG.view", "vgg.VGG.classifier", "vgg.VGG.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.vgg.VGG._initialize_weights": [[50, 62], ["vgg.VGG.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.vgg.make_layers": [[64, 78], ["torch.Sequential", "torch.Conv2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["", "", "", "", "def", "make_layers", "(", "cfg", ",", "batch_norm", "=", "False", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.vgg._vgg": [[88, 95], ["vgg.VGG", "vgg.make_layers", "mmcv.runner.load_checkpoint"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.vgg.make_layers"], ["def", "_vgg", "(", "arch", ",", "cfg", ",", "batch_norm", ",", "pretrained", ",", "progress", ",", "pretrained_weights", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "model", "=", "VGG", "(", "make_layers", "(", "cfgs", "[", "cfg", "]", ",", "batch_norm", "=", "batch_norm", ")", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "load_checkpoint", "(", "model", ",", "pretrained_weights", ",", "map_location", "=", "'cpu'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.vgg.vgg11": [[97, 105], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.vgg._vgg"], ["", "def", "vgg11", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg11'", ",", "'A'", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.vgg.vgg11_bn": [[107, 115], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.vgg._vgg"], ["", "def", "vgg11_bn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\") with batch normalization\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg11_bn'", ",", "'A'", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.vgg.vgg13": [[117, 125], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.vgg._vgg"], ["", "def", "vgg13", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg13'", ",", "'B'", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.vgg.vgg13_bn": [[127, 135], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.vgg._vgg"], ["", "def", "vgg13_bn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\") with batch normalization\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg13_bn'", ",", "'B'", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.vgg.vgg16": [[137, 145], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.vgg._vgg"], ["", "def", "vgg16", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg16'", ",", "'D'", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.vgg.vgg16_bn": [[147, 155], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.vgg._vgg"], ["", "def", "vgg16_bn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg16_bn'", ",", "'D'", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.vgg.vgg19": [[157, 165], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.vgg._vgg"], ["", "def", "vgg19", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg19'", ",", "'E'", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.vgg.vgg19_bn": [[167, 175], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.vgg._vgg"], ["", "def", "vgg19_bn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration 'E') with batch normalization\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg19_bn'", ",", "'E'", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.feature_extractor.vgg_feature_extractor.__init__": [[11, 34], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.Sequential", "torchvision.models._utils.IntermediateLayerGetter", "list", "list", "torch.nn.Sequential.features.children", "torch.nn.Sequential.classifier.children", "list", "list", "range", "range", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.classifier.ASPP_Classifier_V2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone_name", ",", "pretrained_weights", "=", "None", ",", "aux", "=", "False", ",", "pretrained_backbone", "=", "True", ",", "freeze_bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "vgg_feature_extractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "backbone", "=", "vgg", ".", "__dict__", "[", "backbone_name", "]", "(", "\n", "pretrained", "=", "pretrained_backbone", ",", "pretrained_weights", "=", "pretrained_weights", ")", "\n", "\n", "features", ",", "_", "=", "list", "(", "backbone", ".", "features", ".", "children", "(", ")", ")", ",", "list", "(", "backbone", ".", "classifier", ".", "children", "(", ")", ")", "\n", "\n", "#remove pool4/pool5", "\n", "features", "=", "[", "features", "[", "i", "]", "for", "i", "in", "list", "(", "range", "(", "23", ")", ")", "+", "list", "(", "range", "(", "24", ",", "30", ")", ")", "]", "\n", "\n", "for", "i", "in", "[", "23", ",", "25", ",", "27", "]", ":", "\n", "            ", "features", "[", "i", "]", ".", "dilation", "=", "(", "2", ",", "2", ")", "\n", "features", "[", "i", "]", ".", "padding", "=", "(", "2", ",", "2", ")", "\n", "\n", "# features = nn.Sequential(*features)", "\n", "", "fc6", "=", "nn", ".", "Conv2d", "(", "512", ",", "1024", ",", "kernel_size", "=", "3", ",", "padding", "=", "4", ",", "dilation", "=", "4", ")", "\n", "fc7", "=", "nn", ".", "Conv2d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "padding", "=", "4", ",", "dilation", "=", "4", ")", "\n", "\n", "backbone", "=", "nn", ".", "Sequential", "(", "*", "(", "features", "+", "[", "fc6", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "fc7", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ")", ")", "\n", "return_layers", "=", "{", "'4'", ":", "'low_fea'", ",", "'32'", ":", "'out'", "}", "\n", "\n", "\n", "self", ".", "backbone", "=", "IntermediateLayerGetter", "(", "backbone", ",", "return_layers", "=", "return_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.feature_extractor.vgg_feature_extractor.forward": [[35, 39], ["feature_extractor.vgg_feature_extractor.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feas", "=", "self", ".", "backbone", "(", "x", ")", "\n", "out", "=", "feas", "[", "'out'", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.feature_extractor.resnet_feature_extractor.__init__": [[41, 55], ["torch.nn.Module.__init__", "torchvision.models._utils.IntermediateLayerGetter"], "methods", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.classifier.ASPP_Classifier_V2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone_name", ",", "pretrained_weights", "=", "None", ",", "aux", "=", "False", ",", "pretrained_backbone", "=", "True", ",", "freeze_bn", "=", "False", ",", "return_layers", "=", "None", ",", "adv", "=", "False", ",", "with_permute_adain", "=", "True", ")", ":", "\n", "        ", "super", "(", "resnet_feature_extractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "bn_layer", "=", "nn", ".", "BatchNorm2d", "\n", "if", "freeze_bn", ":", "\n", "            ", "bn_layer", "=", "FrozenBatchNorm2d", "\n", "", "backbone", "=", "resnet", ".", "__dict__", "[", "backbone_name", "]", "(", "\n", "pretrained", "=", "pretrained_backbone", ",", "\n", "replace_stride_with_dilation", "=", "[", "False", ",", "True", ",", "True", "]", ",", "pretrained_weights", "=", "pretrained_weights", ",", "norm_layer", "=", "bn_layer", ",", "with_permute_adain", "=", "with_permute_adain", ",", "p_adain", "=", "0.01", ",", "adv", "=", "adv", ")", "\n", "if", "return_layers", "is", "None", ":", "\n", "            ", "return_layers", "=", "{", "'layer4'", ":", "'out'", "}", "\n", "", "self", ".", "padain_applied", "=", "backbone", ".", "padain_applied", "\n", "if", "aux", ":", "\n", "            ", "return_layers", "[", "'layer3'", "]", "=", "'aux'", "\n", "", "self", ".", "backbone", "=", "IntermediateLayerGetter", "(", "backbone", ",", "return_layers", "=", "return_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.feature_extractor.resnet_feature_extractor.forward": [[56, 64], ["feature_extractor.resnet_feature_extractor.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "enc", "=", "self", ".", "backbone", "(", "x", ")", "\n", "out", "=", "enc", "[", "'out'", "]", "\n", "if", "'low_level_feat'", "in", "enc", ":", "\n", "            ", "out", "=", "(", "out", ",", "enc", "[", "'low_level_feat'", "]", ")", "\n", "", "if", "self", ".", "padain_applied", "is", "not", "None", ":", "\n", "            ", "self", ".", "padain_applied", "[", "0", "]", "=", "0", "\n", "", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.build.build_model": [[8, 15], ["cfg.MODEL.NAME.split", "deeplab"], "function", ["None"], ["transform", ".", "ToTensor", "(", ")", "]", ")", "\n", "return", "trans", "\n", "\n", "\n", "", "def", "build_base_transform_no_cfg", "(", "resize_shape", "=", "None", ")", ":", "\n", "    ", "if", "resize_shape", ":", "\n", "        ", "trans_list", "=", "[", "transform", ".", "Resize", "(", "(", "h", ",", "w", ")", ",", "resize_label", "=", "True", ")", "]", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.build.build_feature_extractor": [[16, 26], ["cfg.MODEL.NAME.split", "backbone_name.startswith", "feature_extractor.resnet_feature_extractor", "backbone_name.startswith", "feature_extractor.vgg_feature_extractor"], "function", ["None"], ["        ", "trans_list", "=", "[", "]", "\n", "", "trans_list", ".", "append", "(", "transform", ".", "ToTensor", "(", ")", ")", "\n", "trans", "=", "transform", ".", "Compose", "(", "trans_list", ")", "\n", "return", "trans", "\n", "\n", "", "def", "build_inference_transform", "(", "size", ",", "mean", ",", "std", ",", "to_bgr", "=", "False", ")", ":", "\n", "    ", "w", ",", "h", "=", "size", "\n", "trans", "=", "transform", ".", "Compose", "(", "[", "\n", "transform", ".", "Resize", "(", "(", "h", ",", "w", ")", ",", "resize_label", "=", "False", ")", ",", "\n", "transform", ".", "ToTensor", "(", ")", ",", "\n", "transform", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ",", "to_bgr255", "=", "to_bgr", ")", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.build.build_classifier": [[27, 36], ["cfg.MODEL.NAME.split", "backbone_name.startswith", "classifier.ASPP_Classifier_V2", "backbone_name.startswith", "classifier.ASPP_Classifier_V2"], "function", ["None"], ["]", ")", "\n", "return", "trans", "\n", "\n", "", "def", "build_transform", "(", "cfg", ",", "mode", ",", "is_source", ")", ":", "\n", "    ", "if", "mode", "==", "\"train\"", ":", "\n", "        ", "w", ",", "h", "=", "cfg", ".", "INPUT", ".", "SOURCE_INPUT_SIZE_TRAIN", "if", "is_source", "else", "cfg", ".", "INPUT", ".", "TARGET_INPUT_SIZE_TRAIN", "\n", "trans_list", "=", "[", "\n", "transform", ".", "ToTensor", "(", ")", ",", "\n", "transform", ".", "Normalize", "(", "mean", "=", "cfg", ".", "INPUT", ".", "PIXEL_MEAN", ",", "std", "=", "cfg", ".", "INPUT", ".", "PIXEL_STD", ",", "to_bgr255", "=", "cfg", ".", "INPUT", ".", "TO_BGR255", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.build.build_adversarial_discriminator": [[37, 50], ["cfg.MODEL.NAME.split", "backbone_name.startswith", "discriminator.PixelDiscriminator", "backbone_name.startswith", "discriminator.PixelDiscriminator"], "function", ["None"], ["if", "cfg", ".", "INPUT", ".", "HORIZONTAL_FLIP_PROB_TRAIN", ">", "0", ":", "\n", "            ", "trans_list", "=", "[", "transform", ".", "RandomHorizontalFlip", "(", "p", "=", "cfg", ".", "INPUT", ".", "HORIZONTAL_FLIP_PROB_TRAIN", ")", ",", "]", "+", "trans_list", "\n", "", "if", "cfg", ".", "INPUT", ".", "INPUT_SCALES_TRAIN", "[", "0", "]", "==", "cfg", ".", "INPUT", ".", "INPUT_SCALES_TRAIN", "[", "1", "]", "and", "cfg", ".", "INPUT", ".", "INPUT_SCALES_TRAIN", "[", "0", "]", "==", "1", ":", "\n", "            ", "trans_list", "=", "[", "transform", ".", "Resize", "(", "(", "h", ",", "w", ")", ")", ",", "]", "+", "trans_list", "\n", "", "else", ":", "\n", "            ", "trans_list", "=", "[", "\n", "transform", ".", "RandomScale", "(", "scale", "=", "cfg", ".", "INPUT", ".", "INPUT_SCALES_TRAIN", ")", ",", "\n", "transform", ".", "RandomCrop", "(", "size", "=", "(", "h", ",", "w", ")", ",", "pad_if_needed", "=", "True", ")", ",", "\n", "]", "+", "trans_list", "\n", "", "if", "is_source", ":", "\n", "            ", "trans_list", "=", "[", "\n", "transform", ".", "ColorJitter", "(", "\n", "brightness", "=", "cfg", ".", "INPUT", ".", "BRIGHTNESS", ",", "\n", "contrast", "=", "cfg", ".", "INPUT", ".", "CONTRAST", ",", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.layers.FrozenBatchNorm2d.__init__": [[11, 17], ["torch.nn.Module.__init__", "layers.FrozenBatchNorm2d.register_buffer", "layers.FrozenBatchNorm2d.register_buffer", "layers.FrozenBatchNorm2d.register_buffer", "layers.FrozenBatchNorm2d.register_buffer", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.classifier.ASPP_Classifier_V2.__init__"], ["def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "        ", "super", "(", "FrozenBatchNorm2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "\"weight\"", ",", "torch", ".", "ones", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"bias\"", ",", "torch", ".", "zeros", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_mean\"", ",", "torch", ".", "zeros", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_var\"", ",", "torch", ".", "ones", "(", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.layers.FrozenBatchNorm2d.forward": [[18, 24], ["scale.reshape.reshape.reshape", "bias.reshape.reshape.reshape", "layers.FrozenBatchNorm2d.running_var.rsqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "scale", "=", "self", ".", "weight", "*", "self", ".", "running_var", ".", "rsqrt", "(", ")", "\n", "bias", "=", "self", ".", "bias", "-", "self", ".", "running_mean", "*", "scale", "\n", "scale", "=", "scale", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "bias", "=", "bias", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "scale", "+", "bias", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.BasicBlock.__init__": [[38, 58], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.ReLU", "resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError", "core.models.permuteAdaIN.PermuteAdaptiveInstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.classifier.ASPP_Classifier_V2.__init__", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.conv3x3", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ",", "with_permute_adain", "=", "False", ",", "p_adain", "=", "None", ",", "padain_count", "=", "None", ",", "padain_adv", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "if", "with_permute_adain", ":", "\n", "            ", "self", ".", "perumte_adain", "=", "PermuteAdaptiveInstanceNorm2d", "(", "p", "=", "p_adain", ",", "padain_count", "=", "padain_count", ",", "adv", "=", "padain_adv", ")", "\n", "", "self", ".", "with_permute_adain", "=", "with_permute_adain", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.BasicBlock.forward": [[59, 80], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.perumte_adain", "resnet.BasicBlock.perumte_adain", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "with_permute_adain", ":", "\n", "            ", "out", "=", "self", ".", "perumte_adain", "(", "out", ")", "\n", "", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "self", ".", "with_permute_adain", ":", "\n", "            ", "out", "=", "self", ".", "perumte_adain", "(", "out", ")", "\n", "", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.Bottleneck.__init__": [[85, 104], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "int", "core.models.permuteAdaIN.PermuteAdaptiveInstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.classifier.ASPP_Classifier_V2.__init__", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.conv1x1", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.conv3x3", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ",", "with_permute_adain", "=", "False", ",", "p_adain", "=", "None", ",", "padain_count", "=", "None", ",", "padain_adv", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "if", "with_permute_adain", ":", "\n", "            ", "self", ".", "perumte_adain", "=", "PermuteAdaptiveInstanceNorm2d", "(", "p", "=", "p_adain", ",", "padain_count", "=", "padain_count", ",", "adv", "=", "padain_adv", ")", "\n", "", "self", ".", "with_permute_adain", "=", "with_permute_adain", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.Bottleneck.forward": [[105, 132], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.perumte_adain", "resnet.Bottleneck.perumte_adain", "resnet.Bottleneck.perumte_adain", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "with_permute_adain", ":", "\n", "            ", "out", "=", "self", ".", "perumte_adain", "(", "out", ")", "\n", "", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "self", ".", "with_permute_adain", ":", "\n", "            ", "out", "=", "self", ".", "perumte_adain", "(", "out", ")", "\n", "", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "if", "self", ".", "with_permute_adain", ":", "\n", "            ", "out", "=", "self", ".", "perumte_adain", "(", "out", ")", "\n", "", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.ResNet.__init__": [[136, 192], ["torch.Module.__init__", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.Linear", "resnet.ResNet.modules", "core.models.permuteAdaIN.PermuteAdaptiveInstanceNorm2d", "len", "ValueError", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.classifier.ASPP_Classifier_V2.__init__", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ",", "with_permute_adain", "=", "False", ",", "p_adain", "=", "None", ",", "adv", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "self", ".", "p_adain", "=", "p_adain", "\n", "self", ".", "padain_adv", "=", "adv", "\n", "self", ".", "padain_applied", "=", "None", "\n", "self", ".", "with_permute_adain", "=", "with_permute_adain", "\n", "if", "with_permute_adain", ":", "\n", "            ", "self", ".", "perumte_adain", "=", "PermuteAdaptiveInstanceNorm2d", "(", "p", "=", "p_adain", ",", "padain_count", "=", "self", ".", "padain_applied", ",", "adv", "=", "adv", ")", "\n", "", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "padain_applied", "=", "None", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "with_permute_adain", "=", "with_permute_adain", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ",", "with_permute_adain", "=", "with_permute_adain", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ",", "with_permute_adain", "=", "with_permute_adain", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ",", "with_permute_adain", "=", "with_permute_adain", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.ResNet._make_layer": [[193, 216], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ",", "with_permute_adain", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ",", "with_permute_adain", ",", "p_adain", "=", "self", ".", "p_adain", ",", "padain_count", "=", "self", ".", "padain_applied", ",", "padain_adv", "=", "self", ".", "padain_adv", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ",", "with_permute_adain", "=", "with_permute_adain", ",", "p_adain", "=", "self", ".", "p_adain", ",", "padain_count", "=", "self", ".", "padain_applied", ",", "padain_adv", "=", "self", ".", "padain_adv", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.ResNet.forward": [[217, 233], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.reshape", "resnet.ResNet.fc", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "reshape", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.conv3x3": [[24, 28], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.conv1x1": [[30, 33], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet._resnet": [[235, 240], ["resnet.ResNet", "mmcv.runner.load_checkpoint"], "function", ["None"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "pretrained_weights", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "load_checkpoint", "(", "model", ",", "pretrained_weights", ",", "map_location", "=", "'cpu'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.resnet18": [[242, 251], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet._resnet"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.resnet34": [[253, 262], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet._resnet"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.resnet50": [[264, 273], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.resnet101": [[275, 284], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet._resnet"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.resnet152": [[286, 295], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet._resnet"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.resnext50_32x4d": [[297, 308], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNeXt-50 32x4d model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet.resnext101_32x8d": [[310, 321], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.resnet._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNeXt-101 32x8d model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.grid_sample.grid_sample": [[6, 15], ["torch.grid_sample", "torch.autograd.Variable", "torch.grid_sample", "input.data.new().fill_", "input.data.new", "input.size"], "function", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.grid_sample.grid_sample", "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.grid_sample.grid_sample"], ["def", "grid_sample", "(", "input", ",", "grid", ",", "canvas", "=", "None", ",", "mode", "=", "'bilinear'", ")", ":", "\n", "    ", "output", "=", "F", ".", "grid_sample", "(", "input", ",", "grid", ",", "mode", "=", "mode", ")", "\n", "if", "canvas", "is", "None", ":", "\n", "        ", "return", "output", "\n", "", "else", ":", "\n", "        ", "input_mask", "=", "Variable", "(", "input", ".", "data", ".", "new", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "1", ")", ")", "\n", "output_mask", "=", "F", ".", "grid_sample", "(", "input_mask", ",", "grid", ",", "mode", "=", "mode", ")", "\n", "padded_output", "=", "output", "*", "output_mask", "+", "canvas", "*", "(", "1", "-", "output_mask", ")", "\n", "return", "padded_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.classifier.ASPP_Classifier_V2.__init__": [[7, 25], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "zip", "classifier.ASPP_Classifier_V2.conv2d_list.append", "m.weight.data.normal_", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.classifier.ASPP_Classifier_V2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "ASPP_Classifier_V2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "num_classes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "True", ",", "\n", ")", "\n", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.models.classifier.ASPP_Classifier_V2.forward": [[26, 33], ["range", "torch.interpolate", "torch.interpolate", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "size", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "", "if", "size", "is", "not", "None", ":", "\n", "            ", "out", "=", "F", ".", "interpolate", "(", "out", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nadavc220_semanticsegmentationinartpaintings.solver.build.adjust_learning_rate": [[3, 9], ["float"], "function", ["None"], ["\n", "def", "build_base_transform", "(", "cfg", ",", "is_source", ")", ":", "\n", "    ", "w", ",", "h", "=", "cfg", ".", "INPUT", ".", "SOURCE_INPUT_SIZE_TRAIN", "if", "is_source", "else", "cfg", ".", "INPUT", ".", "TARGET_INPUT_SIZE_TRAIN", "\n", "trans", "=", "transform", ".", "Compose", "(", "[", "\n", "transform", ".", "Resize", "(", "(", "h", ",", "w", ")", ",", "resize_label", "=", "True", ")", ",", "\n", "transform", ".", "ToTensor", "(", ")", "]", ")", "\n", "return", "trans", "\n"]]}