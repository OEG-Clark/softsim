{"home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.config.get_args": [[4, 35], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"SNASNet\"", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "type", "=", "str", ",", "default", "=", "'snn_test'", ",", "help", "=", "'experiment name'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_dir'", ",", "type", "=", "str", ",", "default", "=", "'dataset/'", ",", "help", "=", "'path to the dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'cifar100'", ",", "help", "=", "'[cifar10, cifar100]'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "1234", ",", "type", "=", "int", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--timestep'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'timestep for SNN'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "help", "=", "'epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--tau'", ",", "type", "=", "float", ",", "default", "=", "4", "/", "3", ",", "help", "=", "'neuron decay time factor'", ")", "\n", "parser", ".", "add_argument", "(", "'--threshold'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'neuron firing threshold'", ")", "\n", "parser", ".", "add_argument", "(", "'--celltype'", ",", "type", "=", "str", ",", "default", "=", "'backward'", ",", "help", "=", "'[forward, backward]'", ")", "\n", "parser", ".", "add_argument", "(", "'--second_avgpooling'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'momentum'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "default", "=", "'sgd'", ",", "help", "=", "'[sgd, adam]'", ")", "\n", "parser", ".", "add_argument", "(", "'--scheduler'", ",", "type", "=", "str", ",", "default", "=", "'cosine'", ",", "help", "=", "'[step, cosine]'", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'learnng rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--val_interval'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'validate and save frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_search'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'number of search samples'", ")", "\n", "\n", "# parser.add_argument('--cnt_mat', type=str, default=5000, help='number of search samples')", "\n", "parser", ".", "add_argument", "(", "'--cnt_mat'", ",", "type", "=", "list", ",", "nargs", "=", "'+'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--savemodel_pth'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.model_snn.SNASNet.__init__": [[112, 213], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Sequential", "torch.Sequential", "torch.AvgPool1d", "torch.AvgPool1d", "model_snn.SNASNet.modules", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "searchcells.search_cell_snn.Neuronal_Cell", "torch.BatchNorm2d", "torch.BatchNorm2d", "spikingjelly.clock_driven.neuron.LIFNode", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "searchcells.search_cell_snn.Neuronal_Cell", "torch.BatchNorm2d", "torch.BatchNorm2d", "spikingjelly.clock_driven.neuron.LIFNode", "spikingjelly.clock_driven.layer.Dropout", "torch.Linear", "torch.Linear", "spikingjelly.clock_driven.neuron.LIFNode", "torch.Linear", "torch.Linear", "isinstance", "searchcells.search_cell_snn.Neuronal_Cell_backward", "print", "exit", "searchcells.search_cell_snn.Neuronal_Cell_backward", "print", "exit", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "isinstance", "spikingjelly.clock_driven.surrogate.ATan", "spikingjelly.clock_driven.surrogate.ATan", "spikingjelly.clock_driven.surrogate.ATan", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.searchcells.search_cell_snn.Neuronal_Cell_backward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "con_mat", ")", ":", "\n", "        ", "super", "(", "SNASNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "con_mat", "=", "con_mat", "\n", "self", ".", "total_timestep", "=", "args", ".", "timestep", "\n", "self", ".", "second_avgpooling", "=", "args", ".", "second_avgpooling", "\n", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "            ", "self", ".", "num_class", "=", "10", "\n", "self", ".", "num_final_neuron", "=", "100", "\n", "self", ".", "num_cluster", "=", "10", "\n", "self", ".", "in_channel", "=", "3", "\n", "self", ".", "img_size", "=", "32", "\n", "self", ".", "first_out_channel", "=", "128", "\n", "self", ".", "spatial_decay", "=", "2", "*", "self", ".", "second_avgpooling", "\n", "self", ".", "classifier_inter_ch", "=", "1024", "\n", "self", ".", "stem_stride", "=", "1", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "            ", "self", ".", "num_class", "=", "100", "\n", "self", ".", "num_final_neuron", "=", "500", "\n", "self", ".", "num_cluster", "=", "5", "\n", "self", ".", "in_channel", "=", "3", "\n", "self", ".", "img_size", "=", "32", "\n", "self", ".", "first_out_channel", "=", "128", "\n", "self", ".", "spatial_decay", "=", "2", "*", "self", ".", "second_avgpooling", "\n", "self", ".", "classifier_inter_ch", "=", "1024", "\n", "self", ".", "stem_stride", "=", "1", "\n", "", "elif", "args", ".", "dataset", "==", "'tinyimagenet'", ":", "\n", "            ", "self", ".", "num_class", "=", "200", "\n", "self", ".", "num_final_neuron", "=", "1000", "\n", "self", ".", "num_cluster", "=", "5", "\n", "self", ".", "in_channel", "=", "3", "\n", "self", ".", "img_size", "=", "64", "\n", "self", ".", "first_out_channel", "=", "128", "\n", "self", ".", "spatial_decay", "=", "4", "*", "self", ".", "second_avgpooling", "\n", "self", ".", "classifier_inter_ch", "=", "4096", "\n", "self", ".", "stem_stride", "=", "2", "\n", "\n", "", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "in_channel", ",", "self", ".", "first_out_channel", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stem_stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "first_out_channel", ",", "affine", "=", "True", ")", ",", "\n", ")", "\n", "\n", "if", "args", ".", "celltype", "==", "\"forward\"", ":", "\n", "            ", "self", ".", "cell1", "=", "Neuronal_Cell", "(", "args", ",", "self", ".", "first_out_channel", ",", "self", ".", "first_out_channel", ",", "self", ".", "con_mat", ")", "\n", "", "elif", "args", ".", "celltype", "==", "\"backward\"", ":", "\n", "            ", "self", ".", "cell1", "=", "Neuronal_Cell_backward", "(", "args", ",", "self", ".", "first_out_channel", ",", "self", ".", "first_out_channel", ",", "self", ".", "con_mat", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not implemented\"", ")", "\n", "exit", "(", ")", "\n", "\n", "", "self", ".", "downconv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ",", "\n", "neuron", ".", "LIFNode", "(", "v_threshold", "=", "args", ".", "threshold", ",", "v_reset", "=", "0.0", ",", "tau", "=", "args", ".", "tau", ",", "\n", "surrogate_function", "=", "surrogate", ".", "ATan", "(", ")", ",", "\n", "detach_reset", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "\n", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", "\n", ")", "\n", "self", ".", "resdownsample1", "=", "nn", ".", "AvgPool2d", "(", "2", ",", "2", ")", "\n", "\n", "if", "args", ".", "celltype", "==", "\"forward\"", ":", "\n", "            ", "self", ".", "cell2", "=", "Neuronal_Cell", "(", "args", ",", "256", ",", "256", ",", "self", ".", "con_mat", ")", "\n", "", "elif", "args", ".", "celltype", "==", "\"backward\"", ":", "\n", "            ", "self", ".", "cell2", "=", "Neuronal_Cell_backward", "(", "args", ",", "256", ",", "256", ",", "self", ".", "con_mat", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not implemented\"", ")", "\n", "exit", "(", ")", "\n", "\n", "", "self", ".", "last_act", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "256", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ",", "\n", "neuron", ".", "LIFNode", "(", "v_threshold", "=", "args", ".", "threshold", ",", "v_reset", "=", "0.0", ",", "tau", "=", "args", ".", "tau", ",", "\n", "surrogate_function", "=", "surrogate", ".", "ATan", "(", ")", ",", "\n", "detach_reset", "=", "True", ")", "\n", ")", "\n", "self", ".", "resdownsample2", "=", "nn", ".", "AvgPool2d", "(", "self", ".", "second_avgpooling", ",", "self", ".", "second_avgpooling", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "layer", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Linear", "(", "256", "*", "(", "self", ".", "img_size", "//", "self", ".", "spatial_decay", ")", "*", "(", "self", ".", "img_size", "//", "self", ".", "spatial_decay", ")", ",", "self", ".", "classifier_inter_ch", ",", "bias", "=", "False", ")", ",", "\n", "neuron", ".", "LIFNode", "(", "v_threshold", "=", "args", ".", "threshold", ",", "v_reset", "=", "0.0", ",", "tau", "=", "args", ".", "tau", ",", "\n", "surrogate_function", "=", "surrogate", ".", "ATan", "(", ")", ",", "\n", "detach_reset", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "classifier_inter_ch", ",", "self", ".", "num_final_neuron", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "boost", "=", "nn", ".", "AvgPool1d", "(", "self", ".", "num_cluster", ",", "self", ".", "num_cluster", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ",", "a", "=", "2", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.model_snn.SNASNet.forward": [[214, 233], ["model_snn.SNASNet.neuron_init", "input.size", "model_snn.SNASNet.stem", "range", "model_snn.SNASNet.cell1", "model_snn.SNASNet.downconv1", "model_snn.SNASNet.resdownsample1", "model_snn.SNASNet.cell2", "model_snn.SNASNet.last_act", "model_snn.SNASNet.resdownsample2", "model_snn.SNASNet.view", "model_snn.SNASNet.classifier", "model_snn.SNASNet.boost().squeeze", "model_snn.SNASNet.boost", "model_snn.SNASNet.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.model_snn.SNASNet.neuron_init"], ["", "", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "neuron_init", "(", ")", "\n", "\n", "acc_voltage", "=", "0", "\n", "batch_size", "=", "input", ".", "size", "(", "0", ")", "\n", "static_x", "=", "self", ".", "stem", "(", "input", ")", "\n", "\n", "for", "t", "in", "range", "(", "self", ".", "total_timestep", ")", ":", "\n", "            ", "x", "=", "self", ".", "cell1", "(", "static_x", ")", "\n", "x", "=", "self", ".", "downconv1", "(", "x", ")", "\n", "x", "=", "self", ".", "resdownsample1", "(", "x", ")", "\n", "x", "=", "self", ".", "cell2", "(", "x", ")", "\n", "x", "=", "self", ".", "last_act", "(", "x", ")", "\n", "x", "=", "self", ".", "resdownsample2", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "acc_voltage", "=", "acc_voltage", "+", "self", ".", "boost", "(", "x", ".", "unsqueeze", "(", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "", "acc_voltage", "=", "acc_voltage", "/", "self", ".", "total_timestep", "\n", "return", "acc_voltage", "\n", "\n"]], "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.model_snn.SNASNet.neuron_init": [[235, 278], ["model_snn.SNASNet.cell1.named_modules", "model_snn.SNASNet.downconv1.named_modules", "model_snn.SNASNet.resdownsample1.named_modules", "model_snn.SNASNet.cell2.named_modules", "model_snn.SNASNet.resdownsample2.named_modules", "model_snn.SNASNet.last_act.named_modules", "model_snn.SNASNet.classifier.named_modules", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "type", "type", "type", "type", "type", "type", "type", "type", "type", "type", "type", "type", "type", "type"], "methods", ["None"], ["", "def", "neuron_init", "(", "self", ")", ":", "\n", "        ", "self", ".", "cell1", ".", "last_xin", "=", "0.", "\n", "self", ".", "cell1", ".", "last_x1", "=", "0.", "\n", "self", ".", "cell1", ".", "last_x2", "=", "0.", "\n", "self", ".", "cell2", ".", "last_xin", "=", "0.", "\n", "self", ".", "cell2", ".", "last_x1", "=", "0.", "\n", "self", ".", "cell2", ".", "last_x2", "=", "0.", "\n", "neuron_type", "=", "'LIFNode'", "\n", "for", "name", ",", "module", "in", "self", ".", "cell1", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "neuron_type", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                ", "module", ".", "v", "=", "0.", "\n", "", "if", "'Dropout'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                ", "module", ".", "mask", "=", "None", "\n", "", "", "for", "name", ",", "module", "in", "self", ".", "downconv1", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "neuron_type", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                ", "module", ".", "v", "=", "0.", "\n", "", "if", "'Dropout'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                ", "module", ".", "mask", "=", "None", "\n", "", "", "for", "name", ",", "module", "in", "self", ".", "resdownsample1", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "neuron_type", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                ", "module", ".", "v", "=", "0.", "\n", "", "if", "'Dropout'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                ", "module", ".", "mask", "=", "None", "\n", "", "", "for", "name", ",", "module", "in", "self", ".", "cell2", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "neuron_type", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                ", "module", ".", "v", "=", "0.", "\n", "", "if", "'Dropout'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                ", "module", ".", "mask", "=", "None", "\n", "", "", "for", "name", ",", "module", "in", "self", ".", "resdownsample2", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "neuron_type", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                ", "module", ".", "v", "=", "0.", "\n", "", "if", "'Dropout'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                ", "module", ".", "mask", "=", "None", "\n", "", "", "for", "name", ",", "module", "in", "self", ".", "last_act", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "neuron_type", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                ", "module", ".", "v", "=", "0.", "\n", "", "if", "'Dropout'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                ", "module", ".", "mask", "=", "None", "\n", "", "", "for", "name", ",", "module", "in", "self", ".", "classifier", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "neuron_type", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                ", "module", ".", "v", "=", "0.", "\n", "", "if", "'Dropout'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                ", "module", ".", "mask", "=", "None", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.model_snn.logdet": [[7, 10], ["numpy.linalg.slogdet"], "function", ["None"], ["def", "logdet", "(", "K", ")", ":", "\n", "    ", "s", ",", "ld", "=", "np", ".", "linalg", ".", "slogdet", "(", "K", ")", "\n", "return", "ld", "\n", "\n"]], "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.model_snn.find_best_neuroncell": [[11, 93], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.no_grad", "torch.no_grad", "range", "print", "print", "model_snn.SNASNet", "SNASNet.cuda", "numpy.zeros", "SNASNet.named_modules", "range", "scores.append", "history.append", "numpy.mean", "numpy.var", "max", "numpy.argsort", "model_snn.connection_matrix_gen", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "range", "range", "isinstance", "out.view.view", "out.view.size", "torch.div", "torch.div", "numpy.zeros", "iter", "next", "SNASNet.", "s.append", "numpy.mean", "out.view.size", "torch.ones().cuda", "torch.ones().cuda", "x.t", "K_total.cpu().numpy", "str", "module.register_forward_hook", "inputs.cuda", "targets.cuda", "model_snn.logdet", "sparsity.t", "torch.ones().cuda", "torch.ones().cuda", "x.t", "type", "torch.ones", "torch.ones", "x.sum", "sparsity.t", "K_total.cpu", "torch.ones", "torch.ones"], "function", ["home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.model_snn.connection_matrix_gen", "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.model_snn.logdet"], ["", "def", "find_best_neuroncell", "(", "args", ",", "trainset", ")", ":", "\n", "\n", "    ", "search_batchsize", "=", "256", "\n", "repeat", "=", "2", "\n", "\n", "train_data", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "search_batchsize", ",", "\n", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "scores", "=", "[", "]", "\n", "history", "=", "[", "]", "\n", "neuron_type", "=", "'LIFNode'", "\n", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "args", ".", "num_search", ")", ":", "\n", "            ", "while", "(", "1", ")", ":", "\n", "                ", "con_mat", "=", "connection_matrix_gen", "(", "args", ",", "num_node", "=", "4", ",", "num_options", "=", "5", ")", "\n", "\n", "# sanity check on connection matrix", "\n", "neigh2_cnts", "=", "torch", ".", "mm", "(", "con_mat", ",", "con_mat", ")", "\n", "neigh3_cnts", "=", "torch", ".", "mm", "(", "neigh2_cnts", ",", "con_mat", ")", "\n", "neigh4_cnts", "=", "torch", ".", "mm", "(", "neigh3_cnts", ",", "con_mat", ")", "\n", "connection_graph", "=", "con_mat", "+", "neigh2_cnts", "+", "neigh3_cnts", "+", "neigh4_cnts", "\n", "\n", "for", "node", "in", "range", "(", "3", ")", ":", "\n", "                    ", "if", "connection_graph", "[", "node", ",", "3", "]", "==", "0", ":", "# if any node doesnt send information to the last layer, remove it", "\n", "                        ", "con_mat", "[", ":", ",", "node", "]", "=", "0", "\n", "con_mat", "[", "node", ",", ":", "]", "=", "0", "\n", "", "", "for", "node", "in", "range", "(", "3", ")", ":", "\n", "                    ", "if", "connection_graph", "[", "0", ",", "node", "+", "1", "]", "==", "0", ":", "# if any node doesnt get information from the input layer, remove it", "\n", "                        ", "con_mat", "[", ":", ",", "node", "+", "1", "]", "=", "0", "\n", "con_mat", "[", "node", "+", "1", ",", ":", "]", "=", "0", "\n", "\n", "", "", "if", "con_mat", "[", "0", ",", "3", "]", "!=", "0", ":", "# ensure direct connection between input=>output for fast information propagation", "\n", "                    ", "break", "\n", "\n", "\n", "", "", "searchnet", "=", "SNASNet", "(", "args", ",", "con_mat", ")", "\n", "searchnet", ".", "cuda", "(", ")", "\n", "\n", "searchnet", ".", "K", "=", "np", ".", "zeros", "(", "(", "search_batchsize", ",", "search_batchsize", ")", ")", "\n", "searchnet", ".", "num_actfun", "=", "0", "\n", "\n", "def", "computing_K_eachtime", "(", "module", ",", "inp", ",", "out", ")", ":", "\n", "                ", "if", "isinstance", "(", "out", ",", "tuple", ")", ":", "\n", "                    ", "out", "=", "out", "[", "0", "]", "\n", "", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "batch_num", ",", "neuron_num", "=", "out", ".", "size", "(", ")", "\n", "x", "=", "(", "out", ">", "0", ")", ".", "float", "(", ")", "\n", "\n", "full_matrix", "=", "torch", ".", "ones", "(", "(", "search_batchsize", ",", "search_batchsize", ")", ")", ".", "cuda", "(", ")", "*", "neuron_num", "\n", "sparsity", "=", "(", "x", ".", "sum", "(", "1", ")", "/", "neuron_num", ")", ".", "unsqueeze", "(", "1", ")", "\n", "norm_K", "=", "(", "sparsity", "@", "(", "1", "-", "sparsity", ".", "t", "(", ")", ")", ")", "+", "(", "(", "1", "-", "sparsity", ")", "@", "sparsity", ".", "t", "(", ")", ")", "\n", "rescale_factor", "=", "torch", ".", "div", "(", "0.5", "*", "torch", ".", "ones", "(", "(", "search_batchsize", ",", "search_batchsize", ")", ")", ".", "cuda", "(", ")", ",", "norm_K", "+", "1e-3", ")", "\n", "K1_0", "=", "(", "x", "@", "(", "1", "-", "x", ".", "t", "(", ")", ")", ")", "\n", "K0_1", "=", "(", "(", "1", "-", "x", ")", "@", "x", ".", "t", "(", ")", ")", "\n", "K_total", "=", "(", "full_matrix", "-", "rescale_factor", "*", "(", "K0_1", "+", "K1_0", ")", ")", "\n", "\n", "searchnet", ".", "K", "=", "searchnet", ".", "K", "+", "(", "K_total", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "searchnet", ".", "num_actfun", "+=", "1", "\n", "\n", "", "s", "=", "[", "]", "\n", "for", "name", ",", "module", "in", "searchnet", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "neuron_type", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                    ", "module", ".", "register_forward_hook", "(", "computing_K_eachtime", ")", "\n", "\n", "", "", "for", "j", "in", "range", "(", "repeat", ")", ":", "\n", "                ", "searchnet", ".", "K", "=", "np", ".", "zeros", "(", "(", "search_batchsize", ",", "search_batchsize", ")", ")", "\n", "searchnet", ".", "num_actfun", "=", "0", "\n", "data_iterator", "=", "iter", "(", "train_data", ")", "\n", "inputs", ",", "targets", "=", "next", "(", "data_iterator", ")", "\n", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "outputs", "=", "searchnet", "(", "inputs", ")", "\n", "s", ".", "append", "(", "logdet", "(", "searchnet", ".", "K", "/", "(", "searchnet", ".", "num_actfun", ")", ")", ")", "\n", "\n", "", "scores", ".", "append", "(", "np", ".", "mean", "(", "s", ")", ")", "\n", "history", ".", "append", "(", "con_mat", ")", "\n", "\n", "", "print", "(", "\"mean / var:\"", ",", "np", ".", "mean", "(", "scores", ")", ",", "np", ".", "var", "(", "scores", ")", ")", "\n", "print", "(", "\"max score:\"", ",", "max", "(", "scores", ")", ")", "\n", "best_idx", "=", "(", "np", ".", "argsort", "(", "scores", ")", ")", "[", "-", "1", "]", "\n", "best_policy", "=", "history", "[", "best_idx", "]", "\n", "", "return", "best_policy", "\n", "\n"]], "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.model_snn.connection_matrix_gen": [[96, 109], ["torch.triu", "torch.triu", "torch.randint", "torch.randint", "torch.triu", "torch.triu", "torch.tril", "torch.tril", "torch.triu", "torch.triu", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.triu.permute"], "function", ["None"], ["", "def", "connection_matrix_gen", "(", "args", ",", "num_node", "=", "4", ",", "num_options", "=", "5", ")", ":", "\n", "\n", "    ", "if", "args", ".", "celltype", "==", "'forward'", ":", "\n", "        ", "upper_cnts", "=", "torch", ".", "triu", "(", "torch", ".", "randint", "(", "num_options", ",", "size", "=", "(", "num_node", ",", "num_node", ")", ")", ",", "diagonal", "=", "1", ")", "\n", "cnts", "=", "upper_cnts", "\n", "", "elif", "args", ".", "celltype", "==", "'backward'", ":", "\n", "        ", "upper_cnts", "=", "torch", ".", "triu", "(", "torch", ".", "randint", "(", "num_options", ",", "size", "=", "(", "num_node", ",", "num_node", ")", ")", ",", "diagonal", "=", "1", ")", "\n", "lower_cnts", "=", "torch", ".", "tril", "(", "torch", ".", "randint", "(", "num_options", ",", "size", "=", "(", "num_node", ",", "num_node", ")", ")", ",", "diagonal", "=", "-", "1", ")", "\n", "selection_mask", "=", "torch", ".", "triu", "(", "torch", ".", "randint", "(", "2", ",", "size", "=", "(", "num_node", ",", "num_node", ")", ")", ",", "diagonal", "=", "1", ")", "\n", "tr_selection_mask", "=", "1", "-", "selection_mask", ".", "permute", "(", "1", ",", "0", ")", "\n", "cnts", "=", "selection_mask", "*", "upper_cnts", "+", "tr_selection_mask", "*", "lower_cnts", "\n", "\n", "", "return", "cnts", "\n", "\n"]], "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.search_snn.main": [[14, 111], ["config.get_args", "utils.data_transforms", "print", "print", "print", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "model_snn.SNASNet().cuda", "torch.CrossEntropyLoss().cuda", "time.time", "range", "utils.time_record", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model_snn.find_best_neuroncell", "torch.Tensor", "torch.Tensor", "print", "SNASNet().cuda.load_state_dict", "print", "search_snn.validate", "exit", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "search_snn.train", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "int_list.append", "model_snn.SNASNet", "torch.CrossEntropyLoss", "torch.load().keys", "torch.load().keys", "SNASNet().cuda.parameters", "torch.optim.Adam", "torch.optim.Adam", "print", "exit", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "print", "exit", "search_snn.validate", "utils.save_checkpoint", "os.path.join", "os.path.join", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "row_list.append", "torch.load", "torch.load", "SNASNet().cuda.parameters", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "int", "torch.load", "torch.load", "int", "int", "int", "SNASNet().cuda.state_dict"], "function", ["home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.config.get_args", "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.utils.data_transforms", "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.utils.time_record", "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.model_snn.find_best_neuroncell", "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.search_snn.validate", "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.search_snn.train", "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.search_snn.validate", "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.utils.save_checkpoint"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "config", ".", "get_args", "(", ")", "\n", "\n", "# define dataset", "\n", "train_transform", ",", "valid_transform", "=", "data_transforms", "(", "args", ")", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "trainset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'cifar10'", ")", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "valset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'cifar10'", ")", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "valid_transform", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "trainset", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'cifar100'", ")", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "valset", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'cifar100'", ")", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "valid_transform", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'tinyimagenet'", ":", "\n", "        ", "trainset", "=", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "'/gpfs/loomis/project/panda/shared/tiny-imagenet-200/train'", ")", ",", "\n", "train_transform", ")", "\n", "valset", "=", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "'/gpfs/loomis/project/panda/shared/tiny-imagenet-200/val'", ")", ",", "\n", "valid_transform", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ",", "sampler", "=", "None", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "\n", "\n", "", "if", "args", ".", "cnt_mat", "is", "None", ":", "# serach neuroncell if no predefined neuroncell", "\n", "        ", "best_neuroncell", "=", "find_best_neuroncell", "(", "args", ",", "trainset", ")", "\n", "", "else", ":", "\n", "        ", "int_list", "=", "[", "]", "\n", "for", "line", "in", "args", ".", "cnt_mat", ":", "\n", "            ", "row_list", "=", "[", "]", "\n", "for", "element", "in", "line", ":", "\n", "                ", "row_list", ".", "append", "(", "int", "(", "element", ")", ")", "\n", "", "int_list", ".", "append", "(", "row_list", ")", "\n", "", "best_neuroncell", "=", "torch", ".", "Tensor", "(", "int_list", ")", "\n", "\n", "\n", "\n", "\n", "", "print", "(", "'-'", "*", "7", ",", "\"best_neuroncell\"", ",", "'-'", "*", "7", ")", "\n", "print", "(", "best_neuroncell", ")", "\n", "print", "(", "'-'", "*", "30", ")", "\n", "\n", "# Reproducibility", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "\n", "model", "=", "SNASNet", "(", "args", ",", "best_neuroncell", ")", ".", "cuda", "(", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "\n", "if", "args", ".", "savemodel_pth", "is", "not", "None", ":", "\n", "        ", "print", "(", "torch", ".", "load", "(", "args", ".", "savemodel_pth", ")", ".", "keys", "(", ")", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "savemodel_pth", ")", "[", "'state_dict'", "]", ")", "\n", "print", "(", "'test only...'", ")", "\n", "validate", "(", "args", ",", "0", ",", "val_loader", ",", "model", ",", "criterion", ")", "\n", "exit", "(", ")", "\n", "\n", "", "if", "args", ".", "optimizer", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "learning_rate", ",", "args", ".", "momentum", ",", "args", ".", "weight_decay", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "learning_rate", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"will be added...\"", ")", "\n", "exit", "(", ")", "\n", "\n", "", "if", "args", ".", "scheduler", "==", "'step'", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "[", "int", "(", "args", ".", "epochs", "*", "0.5", ")", ",", "int", "(", "args", ".", "epochs", "*", "0.75", ")", "]", ",", "gamma", "=", "0.1", ")", "\n", "", "elif", "args", ".", "scheduler", "==", "'cosine'", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "T_max", "=", "int", "(", "args", ".", "epochs", ")", ",", "eta_min", "=", "args", ".", "learning_rate", "*", "0.01", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"will be added...\"", ")", "\n", "exit", "(", ")", "\n", "\n", "\n", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "train", "(", "args", ",", "epoch", ",", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "scheduler", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "val_interval", "==", "0", ":", "\n", "            ", "validate", "(", "args", ",", "epoch", ",", "val_loader", ",", "model", ",", "criterion", ")", "\n", "utils", ".", "save_checkpoint", "(", "{", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "}", ",", "epoch", "+", "1", ",", "tag", "=", "args", ".", "exp_name", "+", "'_super'", ")", "\n", "", "", "utils", ".", "time_record", "(", "start", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.search_snn.train": [[113, 132], ["model.train", "utils.AvgrageMeter", "enumerate", "print", "print", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "optimizer.step", "utils.accuracy", "inputs.size", "utils.AvgrageMeter.update", "criterion.item", "inputs.cuda", "targets.cuda", "prec1.item", "len", "scheduler.get_lr"], "function", ["home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.search_snn.train", "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.utils.accuracy", "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.utils.AvgrageMeter.update"], ["", "def", "train", "(", "args", ",", "epoch", ",", "train_data", ",", "model", ",", "criterion", ",", "optimizer", ",", "scheduler", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "0.0", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "if", "(", "epoch", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "        ", "print", "(", "'[%s%04d/%04d %s%f]'", "%", "(", "'Epoch:'", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "'lr:'", ",", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", ")", ")", "\n", "\n", "", "for", "step", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "train_data", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "outputs", ",", "targets", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "inputs", ".", "size", "(", "0", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "", "print", "(", "'train_loss: %.6f'", "%", "(", "train_loss", "/", "len", "(", "train_data", ")", ")", ",", "'train_acc: %.6f'", "%", "top1", ".", "avg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.search_snn.validate": [[134, 151], ["model.eval", "utils.AvgrageMeter", "torch.no_grad", "torch.no_grad", "enumerate", "print", "model", "criterion", "criterion.item", "utils.accuracy", "inputs.size", "utils.AvgrageMeter.update", "inputs.cuda", "targets.cuda", "prec1.item"], "function", ["home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.utils.accuracy", "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.utils.AvgrageMeter.update"], ["", "def", "validate", "(", "args", ",", "epoch", ",", "val_data", ",", "model", ",", "criterion", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "val_loss", "=", "0.0", "\n", "val_top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "step", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "val_data", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "val_loss", "+=", "loss", ".", "item", "(", ")", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "outputs", ",", "targets", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "inputs", ".", "size", "(", "0", ")", "\n", "val_top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "", "print", "(", "'[Val_Accuracy epoch:%d] val_acc:%f'", "\n", "%", "(", "epoch", "+", "1", ",", "val_top1", ".", "avg", ")", ")", "\n", "return", "val_top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.utils.AvgrageMeter.__init__": [[8, 10], ["utils.AvgrageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.utils.AvgrageMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.utils.AvgrageMeter.reset": [[11, 15], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.utils.AvgrageMeter.update": [[16, 20], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "cnt", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.utils.accuracy": [[22, 36], ["max", "label.size", "output.topk", "pred.t.t", "pred.t.eq", "label.view().expand_as", "correct[].flatten().float().sum", "res.append", "correct[].flatten().float().sum.mul_", "label.view", "correct[].flatten().float", "correct[].flatten"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "label", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "label", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "label", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "flatten", "(", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.utils.save_checkpoint": [[38, 43], ["os.path.join", "torch.save", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "iters", ",", "tag", "=", "''", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "\"./snapshots\"", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "\"./snapshots\"", ")", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "\"./snapshots/{}_ckpt_{:04}.pth.tar\"", ".", "format", "(", "tag", ",", "iters", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.utils.data_transforms": [[46, 80], ["torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "data_transforms", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "MEAN", "=", "[", "0.4913", ",", "0.4821", ",", "0.4465", "]", "\n", "STD", "=", "[", "0.2470", ",", "0.2434", ",", "0.2615", "]", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "MEAN", "=", "[", "0.5071", ",", "0.4867", ",", "0.4408", "]", "\n", "STD", "=", "[", "0.2673", ",", "0.2564", ",", "0.2762", "]", "\n", "", "elif", "args", ".", "dataset", "==", "'tinyimagenet'", ":", "\n", "        ", "MEAN", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "STD", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "", "if", "(", "args", ".", "dataset", "==", "'tinyimagenet'", ")", ":", "\n", "        ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "64", ",", "padding", "=", "8", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "MEAN", ",", "STD", ")", "\n", "]", ")", "\n", "valid_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "MEAN", ",", "STD", ")", "\n", "]", ")", "\n", "", "else", ":", "# cifar10 or cifar100", "\n", "        ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "MEAN", ",", "STD", ")", "\n", "]", ")", "\n", "valid_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "MEAN", ",", "STD", ")", "\n", "]", ")", "\n", "", "return", "train_transform", ",", "valid_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.utils.random_choice": [[82, 84], ["list", "numpy.random.randint"], "function", ["None"], ["", "def", "random_choice", "(", "num_choice", ",", "layers", ")", ":", "\n", "    ", "return", "list", "(", "np", ".", "random", ".", "randint", "(", "num_choice", ",", "size", "=", "layers", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.None.utils.time_record": [[87, 94], ["time.time", "print"], "function", ["None"], ["", "def", "time_record", "(", "start", ")", ":", "\n", "    ", "end", "=", "time", ".", "time", "(", ")", "\n", "duration", "=", "end", "-", "start", "\n", "hour", "=", "duration", "//", "3600", "\n", "minute", "=", "(", "duration", "-", "hour", "*", "3600", ")", "//", "60", "\n", "second", "=", "duration", "-", "hour", "*", "3600", "-", "minute", "*", "60", "\n", "print", "(", "'Elapsed time: hour: %d, minute: %d, second: %f'", "%", "(", "hour", ",", "minute", ",", "second", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.searchcells.search_cell_snn.ScaleLayer.__init__": [[7, 10], ["torch.Module.__init__", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.searchcells.search_cell_snn.Neuronal_Cell_backward.__init__"], ["   ", "def", "__init__", "(", "self", ")", ":", "\n", "       ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "torch", ".", "tensor", "(", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.searchcells.search_cell_snn.ScaleLayer.forward": [[11, 13], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "       ", "return", "input", "*", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.searchcells.search_cell_snn.Neuronal_Cell.__init__": [[15, 46], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "range", "search_cell_snn.Neuronal_Cell.cell_architecture.append", "search_cell_snn.ScaleLayer", "search_cell_snn.Neuronal_Cell.cell_architecture.append", "torch.Identity", "torch.Identity", "search_cell_snn.Neuronal_Cell.cell_architecture.append", "torch.Sequential", "torch.Sequential", "search_cell_snn.Neuronal_Cell.cell_architecture.append", "spikingjelly.clock_driven.neuron.LIFNode", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "search_cell_snn.Neuronal_Cell.cell_architecture.append", "spikingjelly.clock_driven.neuron.LIFNode", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.AvgPool2d", "torch.AvgPool2d", "spikingjelly.clock_driven.surrogate.ATan", "spikingjelly.clock_driven.surrogate.ATan"], "methods", ["home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.searchcells.search_cell_snn.Neuronal_Cell_backward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "in_channel", ",", "out_channel", ",", "con_mat", ")", ":", "\n", "        ", "super", "(", "Neuronal_Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cell_architecture", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "self", ".", "con_mat", "=", "con_mat", "\n", "for", "col", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "            ", "for", "row", "in", "range", "(", "col", ")", ":", "\n", "                ", "op", "=", "con_mat", "[", "row", ",", "col", "]", "\n", "if", "op", "==", "0", ":", "\n", "                    ", "self", ".", "cell_architecture", ".", "append", "(", "ScaleLayer", "(", ")", ")", "\n", "", "elif", "op", "==", "1", ":", "\n", "                    ", "self", ".", "cell_architecture", ".", "append", "(", "nn", ".", "Identity", "(", ")", ")", "\n", "", "elif", "op", "==", "2", ":", "\n", "                    ", "self", ".", "cell_architecture", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "neuron", ".", "LIFNode", "(", "v_threshold", "=", "args", ".", "threshold", ",", "v_reset", "=", "0.0", ",", "tau", "=", "args", ".", "tau", ",", "\n", "surrogate_function", "=", "surrogate", ".", "ATan", "(", ")", ",", "\n", "detach_reset", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channel", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "\n", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ")", ")", "\n", "", "elif", "op", "==", "3", ":", "\n", "                    ", "self", ".", "cell_architecture", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "neuron", ".", "LIFNode", "(", "v_threshold", "=", "args", ".", "threshold", ",", "v_reset", "=", "0.0", ",", "tau", "=", "args", ".", "tau", ",", "\n", "surrogate_function", "=", "surrogate", ".", "ATan", "(", ")", ",", "\n", "detach_reset", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channel", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "\n", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ")", ")", "\n", "", "elif", "op", "==", "4", ":", "\n", "                    ", "self", ".", "cell_architecture", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.searchcells.search_cell_snn.Neuronal_Cell.forward": [[48, 54], ["None"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x_in", ")", ":", "\n", "        ", "x_1", "=", "self", ".", "cell_architecture", "[", "0", "]", "(", "x_in", ")", "\n", "x_2", "=", "self", ".", "cell_architecture", "[", "1", "]", "(", "x_in", ")", "+", "self", ".", "cell_architecture", "[", "2", "]", "(", "x_1", ")", "\n", "x_3", "=", "self", ".", "cell_architecture", "[", "3", "]", "(", "x_in", ")", "+", "self", ".", "cell_architecture", "[", "4", "]", "(", "x_1", ")", "+", "self", ".", "cell_architecture", "[", "5", "]", "(", "x_2", ")", "\n", "\n", "return", "x_3", "\n", "\n"]], "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.searchcells.search_cell_snn.Neuronal_Cell_backward.__init__": [[59, 127], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "range", "range", "range", "search_cell_snn.Neuronal_Cell_backward.cell_architecture.append", "search_cell_snn.Neuronal_Cell_backward.cell_architecture_back.append", "search_cell_snn.ScaleLayer", "search_cell_snn.Neuronal_Cell_backward.cell_architecture.append", "search_cell_snn.ScaleLayer", "search_cell_snn.Neuronal_Cell_backward.cell_architecture_back.append", "torch.Identity", "torch.Identity", "search_cell_snn.Neuronal_Cell_backward.cell_architecture.append", "torch.Identity", "torch.Identity", "search_cell_snn.Neuronal_Cell_backward.cell_architecture_back.append", "torch.Sequential", "torch.Sequential", "search_cell_snn.Neuronal_Cell_backward.cell_architecture.append", "torch.Sequential", "torch.Sequential", "search_cell_snn.Neuronal_Cell_backward.cell_architecture_back.append", "spikingjelly.clock_driven.neuron.LIFNode", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "search_cell_snn.Neuronal_Cell_backward.cell_architecture.append", "spikingjelly.clock_driven.neuron.LIFNode", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "search_cell_snn.Neuronal_Cell_backward.cell_architecture_back.append", "spikingjelly.clock_driven.neuron.LIFNode", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.AvgPool2d", "torch.AvgPool2d", "spikingjelly.clock_driven.neuron.LIFNode", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.AvgPool2d", "torch.AvgPool2d", "spikingjelly.clock_driven.surrogate.ATan", "spikingjelly.clock_driven.surrogate.ATan", "spikingjelly.clock_driven.surrogate.ATan", "spikingjelly.clock_driven.surrogate.ATan"], "methods", ["home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.searchcells.search_cell_snn.Neuronal_Cell_backward.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "in_channel", ",", "out_channel", ",", "con_mat", ")", ":", "\n", "        ", "super", "(", "Neuronal_Cell_backward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cell_architecture", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "self", ".", "con_mat", "=", "con_mat", "\n", "self", ".", "cell_architecture_back", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "\n", "self", ".", "last_xin", "=", "0.", "\n", "self", ".", "last_x1", "=", "0.", "\n", "self", ".", "last_x2", "=", "0.", "\n", "\n", "for", "col", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "            ", "for", "row", "in", "range", "(", "col", ")", ":", "\n", "                ", "op", "=", "con_mat", "[", "row", ",", "col", "]", "\n", "if", "op", "==", "0", ":", "\n", "                    ", "self", ".", "cell_architecture", ".", "append", "(", "ScaleLayer", "(", ")", ")", "\n", "", "elif", "op", "==", "1", ":", "\n", "                    ", "self", ".", "cell_architecture", ".", "append", "(", "nn", ".", "Identity", "(", ")", ")", "\n", "", "elif", "op", "==", "2", ":", "\n", "                    ", "self", ".", "cell_architecture", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "neuron", ".", "LIFNode", "(", "v_threshold", "=", "args", ".", "threshold", ",", "v_reset", "=", "0.0", ",", "tau", "=", "args", ".", "tau", ",", "\n", "surrogate_function", "=", "surrogate", ".", "ATan", "(", ")", ",", "\n", "detach_reset", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channel", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "\n", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ")", ")", "\n", "# l_idx +=1", "\n", "", "elif", "op", "==", "3", ":", "\n", "                    ", "self", ".", "cell_architecture", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "neuron", ".", "LIFNode", "(", "v_threshold", "=", "args", ".", "threshold", ",", "v_reset", "=", "0.0", ",", "tau", "=", "args", ".", "tau", ",", "\n", "surrogate_function", "=", "surrogate", ".", "ATan", "(", ")", ",", "\n", "detach_reset", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channel", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "\n", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ")", ")", "\n", "\n", "", "elif", "op", "==", "4", ":", "\n", "                    ", "self", ".", "cell_architecture", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "\n", "", "", "", "for", "col", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "            ", "for", "row", "in", "range", "(", "col", "+", "1", ",", "4", ")", ":", "\n", "                ", "op", "=", "con_mat", "[", "row", ",", "col", "]", "\n", "if", "op", "==", "0", ":", "\n", "                    ", "self", ".", "cell_architecture_back", ".", "append", "(", "ScaleLayer", "(", ")", ")", "\n", "", "elif", "op", "==", "1", ":", "\n", "                    ", "self", ".", "cell_architecture_back", ".", "append", "(", "nn", ".", "Identity", "(", ")", ")", "\n", "", "elif", "op", "==", "2", ":", "\n", "                    ", "self", ".", "cell_architecture_back", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "neuron", ".", "LIFNode", "(", "v_threshold", "=", "args", ".", "threshold", ",", "v_reset", "=", "0.0", ",", "tau", "=", "args", ".", "tau", ",", "\n", "surrogate_function", "=", "surrogate", ".", "ATan", "(", ")", ",", "\n", "detach_reset", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channel", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "\n", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ")", ")", "\n", "", "elif", "op", "==", "3", ":", "\n", "                    ", "self", ".", "cell_architecture_back", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "neuron", ".", "LIFNode", "(", "v_threshold", "=", "args", ".", "threshold", ",", "v_reset", "=", "0.0", ",", "tau", "=", "args", ".", "tau", ",", "\n", "surrogate_function", "=", "surrogate", ".", "ATan", "(", ")", ",", "\n", "detach_reset", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channel", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "\n", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ")", ")", "\n", "", "elif", "op", "==", "4", ":", "\n", "                    ", "self", ".", "cell_architecture_back", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intelligent-computing-lab-yale_neural-architecture-search-for-spiking-neural-networks.searchcells.search_cell_snn.Neuronal_Cell_backward.forward": [[128, 138], ["None"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x_in", ")", ":", "\n", "        ", "x_1", "=", "self", ".", "cell_architecture", "[", "0", "]", "(", "x_in", "+", "self", ".", "last_xin", ")", "\n", "x_2", "=", "self", ".", "cell_architecture", "[", "1", "]", "(", "x_in", "+", "self", ".", "last_xin", ")", "+", "self", ".", "cell_architecture", "[", "2", "]", "(", "x_1", "+", "self", ".", "last_x1", ")", "\n", "x_3", "=", "self", ".", "cell_architecture", "[", "3", "]", "(", "x_in", "+", "self", ".", "last_xin", ")", "+", "self", ".", "cell_architecture", "[", "4", "]", "(", "x_1", "+", "self", ".", "last_x1", ")", "+", "self", ".", "cell_architecture", "[", "5", "]", "(", "x_2", "+", "self", ".", "last_x2", ")", "\n", "\n", "self", ".", "last_xin", "=", "self", ".", "cell_architecture_back", "[", "0", "]", "(", "x_1", "+", "self", ".", "last_x1", ")", "+", "self", ".", "cell_architecture_back", "[", "1", "]", "(", "x_2", "+", "self", ".", "last_x2", ")", "+", "self", ".", "cell_architecture_back", "[", "2", "]", "(", "x_3", ")", "\n", "self", ".", "last_x1", "=", "self", ".", "cell_architecture_back", "[", "3", "]", "(", "x_2", "+", "self", ".", "last_x2", ")", "+", "self", ".", "cell_architecture_back", "[", "4", "]", "(", "x_3", ")", "\n", "self", ".", "last_x2", "=", "self", ".", "cell_architecture_back", "[", "5", "]", "(", "x_3", ")", "\n", "\n", "return", "x_3", "\n", "\n"]]}