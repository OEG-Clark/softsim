{"home.repos.pwc.inspect_result.caelan_SS-Replan.None.collect_place.collect_place": [[31, 107], ["pybullet_tools.utils.get_date", "src.database.get_surface_reference_pose", "src.stream.get_stable_gen", "src.stream.get_grasp_gen", "src.streams.pick.get_pick_gen_fn", "src.stream.get_stable_gen.", "list", "pybullet_tools.utils.get_body_name", "src.database.get_place_path", "print", "print", "time.time", "pybullet_tools.utils.write_json", "print", "src.stream.get_grasp_gen.", "next", "random.choice", "rel_pose.assign", "bq.assign", "aq.assign", "pybullet_tools.utils.get_link_pose", "rel_pose.get_world_from_body", "pybullet_tools.utils.multiply", "entries.append", "print", "pybullet_tools.utils.has_gui", "pybullet_tools.utils.safe_remove", "pybullet_tools.utils.get_link_name", "pybullet_tools.utils.get_link_name", "pybullet_tools.utils.get_body_name", "len", "len", "pybullet_tools.utils.elapsed_time", "pybullet_tools.utils.LockRenderer", "next", "print", "pybullet_tools.utils.invert", "pybullet_tools.utils.wait_for_user", "src.streams.pick.get_pick_gen_fn.", "pybullet_tools.utils.multiply", "pybullet_tools.utils.multiply", "pybullet_tools.utils.multiply", "len", "pybullet_tools.utils.elapsed_time", "len", "pybullet_tools.utils.elapsed_time", "pybullet_tools.utils.invert", "pybullet_tools.utils.invert", "pybullet_tools.utils.invert"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.get_surface_reference_pose", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_stable_gen", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_grasp_gen", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pick.get_pick_gen_fn", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.get_place_path", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.get_world_from_body"], ["def", "collect_place", "(", "world", ",", "object_name", ",", "surface_name", ",", "grasp_type", ",", "args", ")", ":", "\n", "    ", "date", "=", "get_date", "(", ")", "\n", "#set_seed(args.seed)", "\n", "\n", "#dump_body(world.robot)", "\n", "surface_pose", "=", "get_surface_reference_pose", "(", "world", ".", "kitchen", ",", "surface_name", ")", "# TODO: assumes the drawer is open", "\n", "stable_gen_fn", "=", "get_stable_gen", "(", "world", ",", "z_offset", "=", "Z_EPSILON", ",", "visibility", "=", "False", ",", "\n", "learned", "=", "False", ",", "collisions", "=", "not", "args", ".", "cfree", ")", "\n", "grasp_gen_fn", "=", "get_grasp_gen", "(", "world", ")", "\n", "ik_ir_gen", "=", "get_pick_gen_fn", "(", "world", ",", "learned", "=", "False", ",", "collisions", "=", "not", "args", ".", "cfree", ",", "teleport", "=", "args", ".", "teleport", ")", "\n", "\n", "stable_gen", "=", "stable_gen_fn", "(", "object_name", ",", "surface_name", ")", "\n", "grasps", "=", "list", "(", "grasp_gen_fn", "(", "object_name", ",", "grasp_type", ")", ")", "\n", "\n", "robot_name", "=", "get_body_name", "(", "world", ".", "robot", ")", "\n", "path", "=", "get_place_path", "(", "robot_name", ",", "surface_name", ",", "grasp_type", ")", "\n", "print", "(", "SEPARATOR", ")", "\n", "print", "(", "'Robot name: {} | Object name: {} | Surface name: {} | Grasp type: {} | Filename: {}'", ".", "format", "(", "\n", "robot_name", ",", "object_name", ",", "surface_name", ",", "grasp_type", ",", "path", ")", ")", "\n", "\n", "entries", "=", "[", "]", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "failures", "=", "0", "\n", "while", "(", "len", "(", "entries", ")", "<", "args", ".", "num_samples", ")", "and", "(", "elapsed_time", "(", "start_time", ")", "<", "args", ".", "max_time", ")", ":", "#and (failures <= max_failures):", "\n", "        ", "(", "rel_pose", ",", ")", "=", "next", "(", "stable_gen", ")", "\n", "if", "rel_pose", "is", "None", ":", "\n", "            ", "break", "\n", "", "(", "grasp", ",", ")", "=", "random", ".", "choice", "(", "grasps", ")", "\n", "with", "LockRenderer", "(", "lock", "=", "True", ")", ":", "\n", "            ", "result", "=", "next", "(", "ik_ir_gen", "(", "object_name", ",", "rel_pose", ",", "grasp", ")", ",", "None", ")", "\n", "", "if", "result", "is", "None", ":", "\n", "            ", "print", "(", "'Failure! | {} / {} [{:.3f}]'", ".", "format", "(", "\n", "len", "(", "entries", ")", ",", "args", ".", "num_samples", ",", "elapsed_time", "(", "start_time", ")", ")", ")", "\n", "failures", "+=", "1", "\n", "continue", "\n", "# TODO: ensure an arm motion exists", "\n", "", "bq", ",", "aq", ",", "at", "=", "result", "\n", "rel_pose", ".", "assign", "(", ")", "\n", "bq", ".", "assign", "(", ")", "\n", "aq", ".", "assign", "(", ")", "\n", "base_pose", "=", "get_link_pose", "(", "world", ".", "robot", ",", "world", ".", "base_link", ")", "\n", "object_pose", "=", "rel_pose", ".", "get_world_from_body", "(", ")", "\n", "tool_pose", "=", "multiply", "(", "object_pose", ",", "invert", "(", "grasp", ".", "grasp_pose", ")", ")", "\n", "entries", ".", "append", "(", "{", "\n", "'tool_from_base'", ":", "multiply", "(", "invert", "(", "tool_pose", ")", ",", "base_pose", ")", ",", "\n", "'surface_from_object'", ":", "multiply", "(", "invert", "(", "surface_pose", ")", ",", "object_pose", ")", ",", "\n", "'base_from_object'", ":", "multiply", "(", "invert", "(", "base_pose", ")", ",", "object_pose", ")", ",", "\n", "}", ")", "\n", "print", "(", "'Success! | {} / {} [{:.3f}]'", ".", "format", "(", "\n", "len", "(", "entries", ")", ",", "args", ".", "num_samples", ",", "elapsed_time", "(", "start_time", ")", ")", ")", "\n", "if", "has_gui", "(", ")", ":", "\n", "            ", "wait_for_user", "(", ")", "\n", "#visualize_database(tool_from_base_list)", "\n", "", "", "if", "not", "entries", ":", "\n", "        ", "safe_remove", "(", "path", ")", "\n", "return", "None", "\n", "\n", "# Assuming the kitchen is fixed but the objects might be open world", "\n", "", "data", "=", "{", "\n", "'date'", ":", "date", ",", "\n", "'robot_name'", ":", "robot_name", ",", "# get_name | get_body_name | get_base_name | world.robot_name", "\n", "'base_link'", ":", "get_link_name", "(", "world", ".", "robot", ",", "world", ".", "base_link", ")", ",", "\n", "'tool_link'", ":", "get_link_name", "(", "world", ".", "robot", ",", "world", ".", "tool_link", ")", ",", "\n", "'kitchen_name'", ":", "get_body_name", "(", "world", ".", "kitchen", ")", ",", "\n", "'surface_name'", ":", "surface_name", ",", "\n", "'object_name'", ":", "object_name", ",", "\n", "'grasp_type'", ":", "grasp_type", ",", "\n", "'entries'", ":", "entries", ",", "\n", "'failures'", ":", "failures", ",", "\n", "'successes'", ":", "len", "(", "entries", ")", ",", "\n", "}", "\n", "\n", "write_json", "(", "path", ",", "data", ")", "\n", "print", "(", "'Saved'", ",", "path", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.None.collect_place.main": [[110, 165], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "src.world.World", "src.world.World.open_gripper", "src.world.World.add_body", "print", "pybullet_tools.utils.wait_for_user", "src.world.World.destroy", "src.world.World.open_door", "collect_place.collect_place", "combinations.append", "combinations.append"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.open_gripper", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.add_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.destroy", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.open_door", "home.repos.pwc.inspect_result.caelan_SS-Replan.None.collect_place.collect_place"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "#parser.add_argument('-attempts', default=100, type=int,", "\n", "#                    help='The number of attempts')", "\n", "parser", ".", "add_argument", "(", "'-cfree'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'When enabled, disables collision checking (for debugging).'", ")", "\n", "#parser.add_argument('-grasp_type', default=GRASP_TYPES[0],", "\n", "#                    help='Specifies the type of grasp.')", "\n", "#parser.add_argument('-problem', default='test_block',", "\n", "#                    help='The name of the problem to solve.')", "\n", "parser", ".", "add_argument", "(", "'-max_time'", ",", "default", "=", "10", "*", "60", ",", "type", "=", "float", ",", "\n", "help", "=", "'The maximum runtime'", ")", "\n", "parser", ".", "add_argument", "(", "'-num_samples'", ",", "default", "=", "1000", ",", "type", "=", "int", ",", "\n", "help", "=", "'The number of samples'", ")", "\n", "parser", ".", "add_argument", "(", "'-robot'", ",", "default", "=", "FRANKA_CARTER", ",", "choices", "=", "[", "FRANKA_CARTER", ",", "EVE", "]", ",", "\n", "help", "=", "'The robot to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'-seed'", ",", "default", "=", "None", ",", "\n", "help", "=", "'The random seed to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'-teleport'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Uses unit costs'", ")", "\n", "parser", ".", "add_argument", "(", "'-visualize'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'When enabled, visualizes planning rather than the world (for debugging).'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "world", "=", "World", "(", "use_gui", "=", "args", ".", "visualize", ",", "robot_name", "=", "args", ".", "robot", ")", "\n", "#dump_body(world.robot)", "\n", "for", "joint", "in", "world", ".", "kitchen_joints", ":", "\n", "        ", "world", ".", "open_door", "(", "joint", ")", "# open_door | close_door", "\n", "", "world", ".", "open_gripper", "(", ")", "\n", "# TODO: sample from set of objects?", "\n", "object_name", "=", "'{}_{}_block{}'", ".", "format", "(", "BLOCK_SIZES", "[", "-", "1", "]", ",", "BLOCK_COLORS", "[", "0", "]", ",", "0", ")", "\n", "world", ".", "add_body", "(", "object_name", ")", "\n", "# TODO: could constrain Eve to be within a torso cone", "\n", "\n", "grasp_colors", "=", "{", "\n", "TOP_GRASP", ":", "RED", ",", "\n", "SIDE_GRASP", ":", "BLUE", ",", "\n", "}", "\n", "#combinations = list(product(OPEN_SURFACES, GRASP_TYPES)) \\", "\n", "#               + [(surface_name, TOP_GRASP) for surface_name in DRAWERS] \\", "\n", "#               + [(surface_name, SIDE_GRASP) for surface_name in CABINETS] # ENV_SURFACES", "\n", "combinations", "=", "[", "]", "\n", "for", "surface_name", "in", "ZED_LEFT_SURFACES", ":", "\n", "        ", "if", "surface_name", "in", "(", "OPEN_SURFACES", "+", "DRAWERS", ")", ":", "\n", "            ", "combinations", ".", "append", "(", "(", "surface_name", ",", "TOP_GRASP", ")", ")", "\n", "", "if", "surface_name", "in", "(", "OPEN_SURFACES", "+", "CABINETS", ")", ":", "\n", "            ", "combinations", ".", "append", "(", "(", "surface_name", ",", "SIDE_GRASP", ")", ")", "\n", "\n", "# TODO: parallelize", "\n", "", "", "print", "(", "'Combinations:'", ",", "combinations", ")", "\n", "wait_for_user", "(", "'Start?'", ")", "\n", "for", "surface_name", ",", "grasp_type", "in", "combinations", ":", "\n", "#draw_picks(world, object_name, surface_name, grasp_type, color=grasp_colors[grasp_type])", "\n", "        ", "collect_place", "(", "world", ",", "object_name", ",", "surface_name", ",", "grasp_type", ",", "args", ")", "\n", "", "world", ".", "destroy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.None.collect_pull.collect_pull": [[25, 100], ["pybullet_tools.utils.get_date", "pybullet_tools.utils.get_body_name", "src.database.is_press", "src.database.get_pull_path", "print", "print", "time.time", "pybullet_tools.utils.write_json", "print", "src.streams.press.get_press_gen_fn", "pybullet_tools.utils.joint_from_name", "pybullet_tools.pr2_primitives.Conf", "pybullet_tools.pr2_primitives.Conf", "src.streams.pull.get_pull_gen_fn", "src.database.is_press", "src.database.get_joint_reference_pose", "bq.assign", "aq1.assign", "pybullet_tools.utils.get_link_pose", "entries.append", "print", "pybullet_tools.utils.has_gui", "pybullet_tools.utils.safe_remove", "pybullet_tools.utils.get_link_name", "pybullet_tools.utils.get_link_name", "pybullet_tools.utils.get_body_name", "len", "src.database.is_press", "data.update", "len", "pybullet_tools.utils.elapsed_time", "next", "next", "print", "src.database.is_press", "pybullet_tools.pr2_primitives.Conf.assign", "pybullet_tools.utils.wait_for_user", "world.open_conf", "world.closed_conf", "src.streams.press.get_press_gen_fn.", "src.streams.pull.get_pull_gen_fn.", "pybullet_tools.utils.multiply", "len", "pybullet_tools.utils.elapsed_time", "len", "pybullet_tools.utils.elapsed_time", "pybullet_tools.utils.invert"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.is_press", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.get_pull_path", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.press.get_press_gen_fn", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pull.get_pull_gen_fn", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.is_press", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.get_joint_reference_pose", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.is_press", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.update", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.is_press", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.open_conf", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.closed_conf"], ["def", "collect_pull", "(", "world", ",", "joint_name", ",", "args", ")", ":", "\n", "    ", "date", "=", "get_date", "(", ")", "\n", "#set_seed(args.seed)", "\n", "\n", "robot_name", "=", "get_body_name", "(", "world", ".", "robot", ")", "\n", "if", "is_press", "(", "joint_name", ")", ":", "\n", "        ", "press_gen", "=", "get_press_gen_fn", "(", "world", ",", "collisions", "=", "not", "args", ".", "cfree", ",", "teleport", "=", "args", ".", "teleport", ",", "learned", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "joint", "=", "joint_from_name", "(", "world", ".", "kitchen", ",", "joint_name", ")", "\n", "open_conf", "=", "Conf", "(", "world", ".", "kitchen", ",", "[", "joint", "]", ",", "[", "world", ".", "open_conf", "(", "joint", ")", "]", ")", "\n", "closed_conf", "=", "Conf", "(", "world", ".", "kitchen", ",", "[", "joint", "]", ",", "[", "world", ".", "closed_conf", "(", "joint", ")", "]", ")", "\n", "pull_gen", "=", "get_pull_gen_fn", "(", "world", ",", "collisions", "=", "not", "args", ".", "cfree", ",", "teleport", "=", "args", ".", "teleport", ",", "learned", "=", "False", ")", "\n", "#handle_link, handle_grasp, _ = get_handle_grasp(world, joint)", "\n", "\n", "", "path", "=", "get_pull_path", "(", "robot_name", ",", "joint_name", ")", "\n", "print", "(", "SEPARATOR", ")", "\n", "print", "(", "'Robot name {} | Joint name: {} | Filename: {}'", ".", "format", "(", "robot_name", ",", "joint_name", ",", "path", ")", ")", "\n", "\n", "entries", "=", "[", "]", "\n", "failures", "=", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "while", "(", "len", "(", "entries", ")", "<", "args", ".", "num_samples", ")", "and", "(", "elapsed_time", "(", "start_time", ")", "<", "args", ".", "max_time", ")", ":", "\n", "        ", "if", "is_press", "(", "joint_name", ")", ":", "\n", "            ", "result", "=", "next", "(", "press_gen", "(", "joint_name", ")", ",", "None", ")", "\n", "", "else", ":", "\n", "            ", "result", "=", "next", "(", "pull_gen", "(", "joint_name", ",", "open_conf", ",", "closed_conf", ")", ",", "None", ")", "# Open to closed", "\n", "", "if", "result", "is", "None", ":", "\n", "            ", "print", "(", "'Failure! | {} / {} [{:.3f}]'", ".", "format", "(", "\n", "len", "(", "entries", ")", ",", "args", ".", "num_samples", ",", "elapsed_time", "(", "start_time", ")", ")", ")", "\n", "failures", "+=", "1", "\n", "continue", "\n", "", "if", "not", "is_press", "(", "joint_name", ")", ":", "\n", "            ", "open_conf", ".", "assign", "(", ")", "\n", "", "joint_pose", "=", "get_joint_reference_pose", "(", "world", ".", "kitchen", ",", "joint_name", ")", "\n", "bq", ",", "aq1", "=", "result", "[", ":", "2", "]", "\n", "bq", ".", "assign", "(", ")", "\n", "aq1", ".", "assign", "(", ")", "\n", "#next(at.commands[2].iterate(None, None))", "\n", "base_pose", "=", "get_link_pose", "(", "world", ".", "robot", ",", "world", ".", "base_link", ")", "\n", "#handle_pose = get_link_pose(world.robot, base_link)", "\n", "entries", ".", "append", "(", "{", "\n", "'joint_from_base'", ":", "multiply", "(", "invert", "(", "joint_pose", ")", ",", "base_pose", ")", ",", "\n", "}", ")", "\n", "print", "(", "'Success! | {} / {} [{:.3f}]'", ".", "format", "(", "\n", "len", "(", "entries", ")", ",", "args", ".", "num_samples", ",", "elapsed_time", "(", "start_time", ")", ")", ")", "\n", "if", "has_gui", "(", ")", ":", "\n", "            ", "wait_for_user", "(", ")", "\n", "", "", "if", "not", "entries", ":", "\n", "        ", "safe_remove", "(", "path", ")", "\n", "return", "None", "\n", "#visualize_database(joint_from_base_list)", "\n", "\n", "# Assuming the kitchen is fixed but the objects might be open world", "\n", "# TODO: could store per data point", "\n", "", "data", "=", "{", "\n", "'date'", ":", "date", ",", "\n", "'robot_name'", ":", "robot_name", ",", "# get_name | get_body_name | get_base_name | world.robot_name", "\n", "'base_link'", ":", "get_link_name", "(", "world", ".", "robot", ",", "world", ".", "base_link", ")", ",", "\n", "'tool_link'", ":", "get_link_name", "(", "world", ".", "robot", ",", "world", ".", "tool_link", ")", ",", "\n", "'kitchen_name'", ":", "get_body_name", "(", "world", ".", "kitchen", ")", ",", "\n", "'joint_name'", ":", "joint_name", ",", "\n", "'entries'", ":", "entries", ",", "\n", "'failures'", ":", "failures", ",", "\n", "'successes'", ":", "len", "(", "entries", ")", ",", "\n", "}", "\n", "if", "not", "is_press", "(", "joint_name", ")", ":", "\n", "        ", "data", ".", "update", "(", "{", "\n", "'open_conf'", ":", "open_conf", ".", "values", ",", "\n", "'closed_conf'", ":", "closed_conf", ".", "values", ",", "\n", "}", ")", "\n", "\n", "", "write_json", "(", "path", ",", "data", ")", "\n", "print", "(", "'Saved'", ",", "path", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.None.collect_pull.main": [[103, 136], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "src.world.World", "src.world.World.open_gripper", "print", "print", "pybullet_tools.utils.wait_for_user", "src.world.World.destroy", "collect_pull.collect_pull", "collect_pull.collect_pull"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.open_gripper", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.destroy", "home.repos.pwc.inspect_result.caelan_SS-Replan.None.collect_pull.collect_pull", "home.repos.pwc.inspect_result.caelan_SS-Replan.None.collect_pull.collect_pull"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "#parser.add_argument('-attempts', default=100, type=int,", "\n", "#                    help='The number of attempts')", "\n", "parser", ".", "add_argument", "(", "'-cfree'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'When enabled, disables collision checking (for debugging).'", ")", "\n", "parser", ".", "add_argument", "(", "'-max_time'", ",", "default", "=", "10", "*", "60", ",", "type", "=", "float", ",", "\n", "help", "=", "'The maximum runtime'", ")", "\n", "parser", ".", "add_argument", "(", "'-num_samples'", ",", "default", "=", "1000", ",", "type", "=", "int", ",", "\n", "help", "=", "'The number of samples'", ")", "\n", "parser", ".", "add_argument", "(", "'-seed'", ",", "default", "=", "None", ",", "\n", "help", "=", "'The random seed to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'-teleport'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Uses unit costs'", ")", "\n", "parser", ".", "add_argument", "(", "'-visualize'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'When enabled, visualizes planning rather than the world (for debugging).'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "# TODO: could record the full trajectories here", "\n", "\n", "world", "=", "World", "(", "use_gui", "=", "args", ".", "visualize", ")", "\n", "world", ".", "open_gripper", "(", ")", "\n", "\n", "#joint_names = DRAWER_JOINTS + CABINET_JOINTS", "\n", "joint_names", "=", "ZED_LEFT_JOINTS", "\n", "print", "(", "'Joints:'", ",", "joint_names", ")", "\n", "print", "(", "'Knobs:'", ",", "KNOBS", ")", "\n", "wait_for_user", "(", "'Start?'", ")", "\n", "for", "joint_name", "in", "joint_names", ":", "\n", "        ", "collect_pull", "(", "world", ",", "joint_name", ",", "args", ")", "\n", "", "for", "knob_name", "in", "KNOBS", ":", "\n", "        ", "collect_pull", "(", "world", ",", "knob_name", ",", "args", ")", "\n", "\n", "", "world", ".", "destroy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.None.run_pybullet.create_parser": [[25, 54], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "create_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-anytime'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Runs the planner in an anytime mode.'", ")", "\n", "parser", ".", "add_argument", "(", "'-cfree'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'When enabled, disables collision checking (for debugging).'", ")", "\n", "#parser.add_argument('-defer', action='store_true',", "\n", "#                    help='When enabled, defers evaluation of motion planning streams.')", "\n", "parser", ".", "add_argument", "(", "'-deterministic'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Treats actions as having deterministic effects.'", ")", "\n", "parser", ".", "add_argument", "(", "'-fixed'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"When enabled, fixes the robot's base.\"", ")", "\n", "parser", ".", "add_argument", "(", "'-max_time'", ",", "default", "=", "5", "*", "60", ",", "type", "=", "int", ",", "\n", "help", "=", "'The max computation time across execution.'", ")", "\n", "parser", ".", "add_argument", "(", "'-num'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'The number of objects (when applicable).'", ")", "\n", "parser", ".", "add_argument", "(", "'-observable'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Treats the state as being fully observable.'", ")", "\n", "#parser.add_argument('-seed', default=None,", "\n", "#                    help='The random seed to use.')", "\n", "parser", ".", "add_argument", "(", "'-simulate'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'When enabled, trajectories are simulated'", ")", "\n", "parser", ".", "add_argument", "(", "'-teleport'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'When enabled, transit motion planning is skipped (for debugging).'", ")", "\n", "parser", ".", "add_argument", "(", "'-unit'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'When enabled, uses unit action costs.'", ")", "\n", "parser", ".", "add_argument", "(", "'-visualize'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'When enabled, visualizes the planning world rather than the simulated world (for debugging).'", ")", "\n", "return", "parser", "\n", "# TODO: get rid of funky orientations by dropping them from some height", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.None.run_pybullet.main": [[58, 123], ["print", "run_pybullet.create_parser", "create_parser.add_argument", "create_parser.add_argument", "create_parser.parse_args", "print", "print", "numpy.set_printoptions", "src.world.World", "task_fn", "pybullet_tools.utils.wait_for_duration", "src.world.World._update_initial", "print", "src.command.create_state", "src.policy.run_policy", "src.world.World.destroy", "pybullet_tools.utils.get_random_seed", "pybullet_tools.utils.get_numpy_seed", "pybullet_tools.utils.wait_for_user", "src.planner.VIDEO_TEMPLATE.format", "pybullet_tools.utils.VideoSaver", "src.observe.observe_pybullet", "src.command.simulate_commands", "print", "pybullet_tools.utils.VideoSaver.restore", "src.planner.VIDEO_TEMPLATE.format"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.None.run_pybullet.create_parser", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World._update_initial", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.create_state", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.policy.run_policy", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.destroy", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.observe.observe_pybullet", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.simulate_commands"], ["", "def", "main", "(", ")", ":", "\n", "    ", "task_names", "=", "[", "fn", ".", "__name__", "for", "fn", "in", "TASKS_FNS", "]", "\n", "print", "(", "'Tasks:'", ",", "task_names", ")", "\n", "parser", "=", "create_parser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-problem'", ",", "default", "=", "task_names", "[", "-", "1", "]", ",", "choices", "=", "task_names", ",", "\n", "help", "=", "'The name of the problem to solve.'", ")", "\n", "parser", ".", "add_argument", "(", "'-record'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'When enabled, records and saves a video at {}'", ".", "format", "(", "\n", "VIDEO_TEMPLATE", ".", "format", "(", "'<problem>'", ")", ")", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "#if args.seed is not None:", "\n", "#    set_seed(args.seed)", "\n", "#set_random_seed(0) # Doesn't ensure deterministic", "\n", "#set_numpy_seed(1)", "\n", "print", "(", "'Random seed:'", ",", "get_random_seed", "(", ")", ")", "\n", "print", "(", "'Numpy seed:'", ",", "get_numpy_seed", "(", ")", ")", "\n", "\n", "np", ".", "set_printoptions", "(", "precision", "=", "3", ",", "suppress", "=", "True", ")", "\n", "world", "=", "World", "(", "use_gui", "=", "True", ")", "\n", "task_fn_from_name", "=", "{", "fn", ".", "__name__", ":", "fn", "for", "fn", "in", "TASKS_FNS", "}", "\n", "task_fn", "=", "task_fn_from_name", "[", "args", ".", "problem", "]", "\n", "\n", "task", "=", "task_fn", "(", "world", ",", "num", "=", "args", ".", "num", ",", "fixed", "=", "args", ".", "fixed", ")", "\n", "wait_for_duration", "(", "0.1", ")", "\n", "world", ".", "_update_initial", "(", ")", "\n", "print", "(", "'Objects:'", ",", "task", ".", "objects", ")", "\n", "#target_point = get_point(world.get_body(task.objects[0]))", "\n", "#set_camera_pose(camera_point=target_point+np.array([-1, 0, 1]), target_point=target_point)", "\n", "\n", "#if not args.record:", "\n", "#    with LockRenderer():", "\n", "#        add_markers(task, inverse_place=False)", "\n", "#wait_for_user()", "\n", "# TODO: FD instantiation is slightly slow to a deepcopy", "\n", "# 4650801/25658    2.695    0.000    8.169    0.000 /home/caelan/Programs/srlstream/pddlstream/pddlstream/algorithms/skeleton.py:114(do_evaluate_helper)", "\n", "#test_observation(world, entity_name='big_red_block0')", "\n", "#return", "\n", "\n", "# TODO: mechanism that pickles the state of the world", "\n", "real_state", "=", "create_state", "(", "world", ")", "\n", "video", "=", "None", "\n", "if", "args", ".", "record", ":", "\n", "        ", "wait_for_user", "(", "'Start?'", ")", "\n", "video_path", "=", "VIDEO_TEMPLATE", ".", "format", "(", "args", ".", "problem", ")", "\n", "video", "=", "VideoSaver", "(", "video_path", ")", "\n", "", "time_step", "=", "None", "if", "args", ".", "teleport", "else", "DEFAULT_TIME_STEP", "\n", "\n", "def", "observation_fn", "(", "belief", ")", ":", "\n", "        ", "return", "observe_pybullet", "(", "world", ")", "\n", "\n", "", "def", "transition_fn", "(", "belief", ",", "commands", ")", ":", "\n", "# if not args.record:  # Video doesn't include planning time", "\n", "#    wait_for_user()", "\n", "# restore real_state just in case?", "\n", "# wait_for_user()", "\n", "#if args.fixed: # args.simulate", "\n", "        ", "return", "simulate_commands", "(", "real_state", ",", "commands", ")", "\n", "#return iterate_commands(real_state, commands, time_step=time_step, pause=False)", "\n", "\n", "", "run_policy", "(", "task", ",", "args", ",", "observation_fn", ",", "transition_fn", ")", "\n", "\n", "if", "video", ":", "\n", "        ", "print", "(", "'Saved'", ",", "video_path", ")", "\n", "video", ".", "restore", "(", ")", "\n", "", "world", ".", "destroy", "(", ")", "\n", "# TODO: make the sink extrude from the mesh", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.None.run_experiment.add_packages": [[24, 26], ["sys.path.extend", "os.path.abspath", "os.path.join", "os.getcwd"], "function", ["None"], ["def", "add_packages", "(", "packages", ")", ":", "\n", "    ", "sys", ".", "path", ".", "extend", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "d", ")", ")", "for", "d", "in", "packages", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.None.run_experiment.map_parallel": [[122, 149], ["multiprocessing.Pool", "multiprocessing.Pool.imap_unordered", "map", "multiprocessing.Pool.close", "multiprocessing.Pool.terminate", "multiprocessing.Pool.join", "pool.imap_unordered.next", "run_experiment.run_experiment"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.None.run_experiment.run_experiment"], ["def", "map_parallel", "(", "fn", ",", "inputs", ",", "num_cores", "=", "None", ")", ":", "#, timeout=None):", "\n", "# Processes rather than threads (shared memory)", "\n", "# TODO: with statement on Pool", "\n", "    ", "if", "SERIAL", ":", "\n", "        ", "for", "outputs", "in", "map", "(", "fn", ",", "inputs", ")", ":", "\n", "            ", "yield", "outputs", "\n", "", "return", "\n", "", "pool", "=", "Pool", "(", "processes", "=", "num_cores", ")", "#, initializer=mute)", "\n", "generator", "=", "pool", ".", "imap_unordered", "(", "fn", ",", "inputs", ")", "#, chunksize=1)", "\n", "# pool_result = pool.map_async(worker, args)", "\n", "#return generator", "\n", "while", "True", ":", "\n", "# TODO: need to actually retrieve the info about which thread failed", "\n", "        ", "try", ":", "\n", "            ", "yield", "generator", ".", "next", "(", ")", "# timeout=timeout)", "\n", "", "except", "StopIteration", ":", "\n", "            ", "break", "\n", "#except MemoryError: # as e:", "\n", "#    traceback.print_exc()", "\n", "#    continue", "\n", "#except TimeoutError: # as e:", "\n", "#    traceback.print_exc() # Kills all jobs", "\n", "#    continue", "\n", "", "", "if", "pool", "is", "not", "None", ":", "\n", "        ", "pool", ".", "close", "(", ")", "\n", "pool", ".", "terminate", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "#import psutil", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.None.run_experiment.name_from_policy": [[157, 159], ["sorted", "policy.items"], "function", ["None"], ["", "", "def", "name_from_policy", "(", "policy", ")", ":", "\n", "    ", "return", "'_'", ".", "join", "(", "'{}={:d}'", ".", "format", "(", "key", ",", "value", ")", "for", "key", ",", "value", "in", "sorted", "(", "policy", ".", "items", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.None.run_experiment.set_memory_limits": [[160, 168], ["psutil.Process", "int", "psutil.Process.rlimit", "os.getpid"], "function", ["None"], ["", "def", "set_memory_limits", "(", ")", ":", "\n", "# ulimit -a", "\n", "# soft, hard = resource.getrlimit(name) # resource.RLIM_INFINITY", "\n", "# resource.setrlimit(resource.RLIMIT_AS, (soft, hard))", "\n", "    ", "process", "=", "psutil", ".", "Process", "(", "os", ".", "getpid", "(", ")", ")", "\n", "soft_memory", "=", "int", "(", "BYTES_PER_KILOBYTE", "*", "MAX_MEMORY", ")", "\n", "hard_memory", "=", "soft_memory", "\n", "process", ".", "rlimit", "(", "psutil", ".", "RLIMIT_AS", ",", "(", "soft_memory", ",", "hard_memory", ")", ")", "\n", "# TODO: AttributeError: 'Process' object has no attribute 'rlimit'", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.None.run_experiment.run_experiment": [[175, 252], ["run_experiment.set_memory_limits", "run_pybullet.create_parser", "run_pybullet.create_parser.parse_args", "src.world.World", "problem[].restore", "src.world.World._update_initial", "random.seed", "numpy.random.seed", "numpy.random.seed", "pddlstream.algorithms.algorithm.reset_globals", "src.command.create_state", "dict", "src.world.World.destroy", "open", "os.getcwd", "os.path.join", "pddlstream.utils.safe_rm_dir", "pybullet_tools.utils.ensure_dir", "os.chdir", "task_fn", "task_fn", "hash", "src.observe.observe_pybullet", "src.command.iterate_commands", "os.chdir", "pddlstream.utils.safe_rm_dir", "sys.stdout.close", "hash", "pybullet_tools.utils.timeout", "src.policy.run_policy", "KeyboardInterrupt", "traceback.print_exc", "run_experiment.name_from_policy", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.None.run_experiment.set_memory_limits", "home.repos.pwc.inspect_result.caelan_SS-Replan.None.run_pybullet.create_parser", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World._update_initial", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.create_state", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.destroy", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.observe.observe_pybullet", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.iterate_commands", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.policy.run_policy", "home.repos.pwc.inspect_result.caelan_SS-Replan.None.run_experiment.name_from_policy"], ["", "def", "run_experiment", "(", "experiment", ")", ":", "\n", "    ", "problem", "=", "experiment", "[", "'problem'", "]", "\n", "task_name", "=", "problem", "[", "'task'", "]", ".", "name", "if", "SERIALIZE_TASK", "else", "problem", "[", "'task'", "]", "\n", "trial", "=", "problem", "[", "'trial'", "]", "\n", "policy", "=", "experiment", "[", "'policy'", "]", "\n", "set_memory_limits", "(", ")", "\n", "\n", "if", "not", "VERBOSE", ":", "\n", "       ", "sys", ".", "stdout", "=", "open", "(", "os", ".", "devnull", ",", "'w'", ")", "\n", "stdout", "=", "sys", ".", "stdout", "\n", "", "if", "not", "SERIAL", ":", "\n", "        ", "current_wd", "=", "os", ".", "getcwd", "(", ")", "\n", "# trial_wd = os.path.join(current_wd, TEMP_DIRECTORY, '{}/'.format(os.getpid()))", "\n", "trial_wd", "=", "os", ".", "path", ".", "join", "(", "current_wd", ",", "TEMP_DIRECTORY", ",", "'t={}_n={}_{}/'", ".", "format", "(", "\n", "task_name", ",", "trial", ",", "name_from_policy", "(", "policy", ")", ")", ")", "\n", "safe_rm_dir", "(", "trial_wd", ")", "\n", "ensure_dir", "(", "trial_wd", ")", "\n", "os", ".", "chdir", "(", "trial_wd", ")", "\n", "\n", "", "parser", "=", "create_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "task_fn_from_name", "=", "{", "fn", ".", "__name__", ":", "fn", "for", "fn", "in", "TASKS_FNS", "}", "\n", "task_fn", "=", "task_fn_from_name", "[", "task_name", "]", "\n", "world", "=", "World", "(", "use_gui", "=", "SERIAL", ")", "\n", "if", "SERIALIZE_TASK", ":", "\n", "        ", "task_fn", "(", "world", ",", "fixed", "=", "args", ".", "fixed", ")", "\n", "task", "=", "problem", "[", "'task'", "]", "\n", "world", ".", "task", "=", "task", "\n", "task", ".", "world", "=", "world", "\n", "", "else", ":", "\n", "# TODO: assumes task_fn is deterministic wrt task", "\n", "        ", "task_fn", "(", "world", ",", "fixed", "=", "args", ".", "fixed", ")", "\n", "", "problem", "[", "'saver'", "]", ".", "restore", "(", ")", "\n", "world", ".", "_update_initial", "(", ")", "\n", "problem", "[", "'task'", "]", "=", "task_name", "# for serialization", "\n", "del", "problem", "[", "'saver'", "]", "\n", "\n", "random", ".", "seed", "(", "hash", "(", "(", "0", ",", "task_name", ",", "trial", ",", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "numpy", ".", "random", ".", "seed", "(", "hash", "(", "(", "1", ",", "task_name", ",", "trial", ",", "time", ".", "time", "(", ")", ")", ")", "%", "(", "2", "**", "32", ")", ")", "\n", "#seed1, seed2 = problem['seeds'] # No point unless you maintain the same random state per generator", "\n", "#set_random_seed(seed1)", "\n", "#set_random_seed(seed2)", "\n", "#random.setstate(state1)", "\n", "#numpy.random.set_state(state2)", "\n", "reset_globals", "(", ")", "\n", "real_state", "=", "create_state", "(", "world", ")", "\n", "#start_time = time.time()", "\n", "#if has_gui():", "\n", "#    wait_for_user()", "\n", "\n", "observation_fn", "=", "lambda", "belief", ":", "observe_pybullet", "(", "world", ")", "\n", "transition_fn", "=", "lambda", "belief", ",", "commands", ":", "iterate_commands", "(", "real_state", ",", "commands", ",", "time_step", "=", "0", ")", "\n", "outcome", "=", "dict", "(", "ERROR_OUTCOME", ")", "\n", "try", ":", "\n", "        ", "with", "timeout", "(", "MAX_TIME", "+", "TIME_BUFFER", ")", ":", "\n", "            ", "outcome", "=", "run_policy", "(", "task", ",", "args", ",", "observation_fn", ",", "transition_fn", ",", "max_time", "=", "MAX_TIME", ",", "**", "policy", ")", "\n", "outcome", "[", "'error'", "]", "=", "False", "\n", "", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "raise", "KeyboardInterrupt", "(", ")", "\n", "", "except", ":", "\n", "        ", "traceback", ".", "print_exc", "(", ")", "\n", "#outcome = {'error': True}", "\n", "\n", "", "world", ".", "destroy", "(", ")", "\n", "if", "not", "SERIAL", ":", "\n", "        ", "os", ".", "chdir", "(", "current_wd", ")", "\n", "safe_rm_dir", "(", "trial_wd", ")", "\n", "", "if", "not", "VERBOSE", ":", "\n", "        ", "sys", ".", "stdout", ".", "close", "(", ")", "\n", "sys", ".", "stdout", "=", "stdout", "\n", "\n", "", "result", "=", "{", "\n", "'experiment'", ":", "experiment", ",", "\n", "'outcome'", ":", "outcome", ",", "\n", "}", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.None.run_experiment.create_problems": [[255, 284], ["range", "print", "random.seed", "numpy.random.seed", "numpy.random.seed", "src.world.World", "task_fn", "pybullet_tools.utils.WorldSaver", "problems.append", "src.world.World.destroy", "hash", "pybullet_tools.utils.wrap_numpy_seed", "hash", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.destroy"], ["", "def", "create_problems", "(", "args", ")", ":", "\n", "    ", "task_fn_from_name", "=", "{", "fn", ".", "__name__", ":", "fn", "for", "fn", "in", "TASKS_FNS", "}", "\n", "problems", "=", "[", "]", "\n", "for", "num", "in", "range", "(", "N_TRIALS", ")", ":", "\n", "        ", "for", "task_name", "in", "TASK_NAMES", ":", "\n", "            ", "print", "(", "'Trial: {} / {} | Task: {}'", ".", "format", "(", "num", ",", "N_TRIALS", ",", "task_name", ")", ")", "\n", "random", ".", "seed", "(", "hash", "(", "(", "0", ",", "task_name", ",", "num", ",", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "numpy", ".", "random", ".", "seed", "(", "wrap_numpy_seed", "(", "hash", "(", "(", "1", ",", "task_name", ",", "num", ",", "time", ".", "time", "(", ")", ")", ")", ")", ")", "\n", "world", "=", "World", "(", "use_gui", "=", "False", ")", "# SERIAL", "\n", "task_fn", "=", "task_fn_from_name", "[", "task_name", "]", "\n", "task", "=", "task_fn", "(", "world", ",", "fixed", "=", "args", ".", "fixed", ")", "\n", "task", ".", "world", "=", "None", "\n", "if", "not", "SERIALIZE_TASK", ":", "\n", "                ", "task", "=", "task_name", "\n", "", "saver", "=", "WorldSaver", "(", ")", "\n", "problems", ".", "append", "(", "{", "\n", "'task'", ":", "task", ",", "\n", "'trial'", ":", "num", ",", "\n", "'saver'", ":", "saver", ",", "\n", "#'seeds': [get_random_seed(), get_numpy_seed()],", "\n", "#'seeds': [random.getstate(), numpy.random.get_state()],", "\n", "}", ")", "\n", "#print(world.body_from_name) # TODO: does not remain the same", "\n", "#wait_for_user()", "\n", "#world.reset()", "\n", "#if has_gui():", "\n", "#    wait_for_user()", "\n", "world", ".", "destroy", "(", ")", "\n", "", "", "return", "problems", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.None.run_experiment.main": [[287, 351], ["run_pybullet.create_parser", "run_pybullet.create_parser.parse_args", "print", "max", "os.path.abspath", "print", "print", "print", "print", "print", "print", "math.ceil", "print", "pybullet_tools.utils.user_input", "print", "print", "time.time", "run_experiment.create_problems", "print", "print", "pybullet_tools.utils.ensure_dir", "pddlstream.utils.safe_rm_dir", "pybullet_tools.utils.ensure_dir", "time.time", "os.path.join", "run_experiment.map_parallel", "print", "print", "print", "print", "print", "pddlstream.utils.safe_rm_dir", "multiprocessing.cpu_count", "len", "len", "len", "len", "float", "copy.deepcopy", "len", "len", "pybullet_tools.utils.elapsed_time", "results.append", "print", "print", "print", "pybullet_tools.utils.write_json", "pybullet_tools.utils.write_json", "len", "pybullet_tools.utils.get_date", "pddlstream.utils.str_from_object", "pddlstream.utils.str_from_object", "len", "len", "pybullet_tools.utils.elapsed_time", "len", "pybullet_tools.utils.elapsed_time", "pybullet_tools.utils.elapsed_time"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.None.run_pybullet.create_parser", "home.repos.pwc.inspect_result.caelan_SS-Replan.None.run_experiment.create_problems", "home.repos.pwc.inspect_result.caelan_SS-Replan.None.run_experiment.map_parallel"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "create_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "\n", "# https://stackoverflow.com/questions/15314189/python-multiprocessing-pool-hangs-at-join", "\n", "# https://stackoverflow.com/questions/39884898/large-amount-of-multiprocessing-process-causing-deadlock", "\n", "# TODO: alternatively don't destroy the world", "\n", "num_cores", "=", "max", "(", "1", ",", "cpu_count", "(", ")", "-", "SPARE_CORES", ")", "\n", "json_path", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "EXPERIMENTS_DIRECTORY", ",", "'{}.json'", ".", "format", "(", "get_date", "(", ")", ")", ")", ")", "\n", "\n", "#memory_per_core = float(MAX_RAM) / num_cores # gigabytes", "\n", "#set_soft_limit(resource.RLIMIT_AS, int(BYTES_PER_GIGABYTE * memory_per_core)) # bytes", "\n", "#set_soft_limit(resource.RLIMIT_CPU, 2*MAX_TIME) # seconds", "\n", "# RLIMIT_MEMLOCK, RLIMIT_STACK, RLIMIT_DATA", "\n", "\n", "print", "(", "'Results:'", ",", "json_path", ")", "\n", "print", "(", "'Num Cores:'", ",", "num_cores", ")", "\n", "#print('Memory per Core: {:.2f}'.format(memory_per_core))", "\n", "print", "(", "'Tasks: {} | {}'", ".", "format", "(", "len", "(", "TASK_NAMES", ")", ",", "TASK_NAMES", ")", ")", "\n", "print", "(", "'Policies: {} | {}'", ".", "format", "(", "len", "(", "POLICIES", ")", ",", "POLICIES", ")", ")", "\n", "print", "(", "'Num Trials:'", ",", "N_TRIALS", ")", "\n", "num_experiments", "=", "len", "(", "TASK_NAMES", ")", "*", "len", "(", "POLICIES", ")", "*", "N_TRIALS", "\n", "print", "(", "'Num Experiments:'", ",", "num_experiments", ")", "\n", "max_parallel", "=", "math", ".", "ceil", "(", "float", "(", "num_experiments", ")", "/", "num_cores", ")", "\n", "print", "(", "'Estimated duration: {:.2f} hours'", ".", "format", "(", "MEAN_TIME_PER_TRIAL", "*", "max_parallel", "/", "HOURS_TO_SECS", ")", ")", "\n", "user_input", "(", "'Begin?'", ")", "\n", "print", "(", "SEPARATOR", ")", "\n", "\n", "print", "(", "'Creating problems'", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "problems", "=", "create_problems", "(", "args", ")", "\n", "experiments", "=", "[", "{", "'problem'", ":", "copy", ".", "deepcopy", "(", "problem", ")", ",", "'policy'", ":", "policy", "}", "#, 'args': args}", "\n", "for", "problem", "in", "problems", "for", "policy", "in", "POLICIES", "]", "\n", "print", "(", "'Created {} problems and {} experiments in {:.3f} seconds'", ".", "format", "(", "\n", "len", "(", "problems", ")", ",", "len", "(", "experiments", ")", ",", "elapsed_time", "(", "start_time", ")", ")", ")", "\n", "print", "(", "SEPARATOR", ")", "\n", "\n", "ensure_dir", "(", "EXPERIMENTS_DIRECTORY", ")", "\n", "safe_rm_dir", "(", "TEMP_DIRECTORY", ")", "\n", "ensure_dir", "(", "TEMP_DIRECTORY", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "results", "=", "[", "]", "\n", "try", ":", "\n", "        ", "for", "result", "in", "map_parallel", "(", "run_experiment", ",", "experiments", ",", "num_cores", "=", "num_cores", ")", ":", "\n", "            ", "results", ".", "append", "(", "result", ")", "\n", "print", "(", "'{}\\nExperiments: {} / {} | Time: {:.3f}'", ".", "format", "(", "\n", "SEPARATOR", ",", "len", "(", "results", ")", ",", "len", "(", "experiments", ")", ",", "elapsed_time", "(", "start_time", ")", ")", ")", "\n", "print", "(", "'Experiment:'", ",", "str_from_object", "(", "result", "[", "'experiment'", "]", ")", ")", "\n", "print", "(", "'Outcome:'", ",", "str_from_object", "(", "result", "[", "'outcome'", "]", ")", ")", "\n", "write_json", "(", "json_path", ",", "results", ")", "\n", "#except BaseException as e:", "\n", "#    traceback.print_exc() # e", "\n", "", "", "finally", ":", "\n", "        ", "if", "results", ":", "\n", "            ", "write_json", "(", "json_path", ",", "results", ")", "\n", "", "print", "(", "SEPARATOR", ")", "\n", "print", "(", "'Saved:'", ",", "json_path", ")", "\n", "print", "(", "'Results:'", ",", "len", "(", "results", ")", ")", "\n", "print", "(", "'Duration / experiment: {:.3f}'", ".", "format", "(", "num_cores", "*", "elapsed_time", "(", "start_time", ")", "/", "len", "(", "experiments", ")", ")", ")", "\n", "print", "(", "'Duration: {:.2f} hours'", ".", "format", "(", "elapsed_time", "(", "start_time", ")", "/", "HOURS_TO_SECS", ")", ")", "\n", "safe_rm_dir", "(", "TEMP_DIRECTORY", ")", "\n", "# TODO: dump results automatically?", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.None.analyze_experiment.take": [[59, 63], ["itertools.islice"], "function", ["None"], ["def", "take", "(", "iterable", ",", "n", "=", "INF", ")", ":", "\n", "    ", "if", "n", "==", "INF", ":", "\n", "        ", "n", "=", "None", "# NOTE - islice takes None instead of INF", "\n", "", "return", "islice", "(", "iterable", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.None.analyze_experiment.main": [[68, 125], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "print", "print", "pybullet_tools.utils.read_json", "print", "run_experiment.name_from_policy", "outcomes_per_task.setdefault().setdefault().append", "run_experiment.name_from_policy", "list", "len", "print", "analyze_experiment.take", "outcome.items", "numpy.round", "outcomes_per_task.setdefault().setdefault", "outcome.update", "outcome.get", "numpy.average", "value_per_attribute.items", "pddlstream.utils.str_from_object", "pddlstream.utils.implies", "value_per_attribute.setdefault().append", "outcomes_per_task.setdefault", "isinstance", "float", "value_per_attribute.setdefault"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.None.run_experiment.name_from_policy", "home.repos.pwc.inspect_result.caelan_SS-Replan.None.run_experiment.name_from_policy", "home.repos.pwc.inspect_result.caelan_SS-Replan.None.analyze_experiment.take", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.update"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'experiments'", ",", "nargs", "=", "'+'", ",", "help", "=", "'Name of the experiment'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "outcomes_per_task", "=", "{", "}", "\n", "for", "path", "in", "args", ".", "experiments", ":", "\n", "        ", "for", "result", "in", "read_json", "(", "path", ")", ":", "\n", "            ", "experiment", "=", "result", "[", "'experiment'", "]", "\n", "problem", "=", "experiment", "[", "'problem'", "]", "\n", "outcome", "=", "result", "[", "'outcome'", "]", "\n", "#policy = frozenset(experiment['policy'].items())", "\n", "policy", "=", "name_from_policy", "(", "experiment", "[", "'policy'", "]", ")", "\n", "outcomes_per_task", ".", "setdefault", "(", "problem", "[", "'task'", "]", ",", "{", "}", ")", ".", "setdefault", "(", "policy", ",", "[", "]", ")", ".", "append", "(", "outcome", ")", "\n", "#outcomes_per_task['inspect_drawer']['constrain=0_defer=1'].append(ERROR_OUTCOME)", "\n", "#outcomes_per_task['detect_block']['constrain=1_defer=0'].append(ERROR_OUTCOME)", "\n", "\n", "# TODO: robust poses", "\n", "# TODO: intelligent IR for pour", "\n", "", "", "table", "=", "''", "\n", "for", "task", "in", "TASK_NAMES", ":", "\n", "        ", "if", "task", "not", "in", "outcomes_per_task", ":", "\n", "            ", "continue", "\n", "", "print", "(", "'\\nTask: {}'", ".", "format", "(", "task", ")", ")", "\n", "items", "=", "[", "task", "]", "\n", "for", "policy", "in", "POLICIES", ":", "\n", "            ", "policy", "=", "name_from_policy", "(", "policy", ")", "\n", "if", "policy", "not", "in", "outcomes_per_task", "[", "task", "]", ":", "\n", "                ", "continue", "\n", "", "outcomes", "=", "list", "(", "take", "(", "outcomes_per_task", "[", "task", "]", "[", "policy", "]", ",", "MAX_TRIALS", ")", ")", "\n", "value_per_attribute", "=", "{", "}", "\n", "for", "outcome", "in", "outcomes", ":", "\n", "                ", "if", "outcome", "[", "'error'", "]", ":", "\n", "                    ", "outcome", ".", "update", "(", "ERROR_OUTCOME", ")", "\n", "", "if", "MAX_TIME", "<", "outcome", ".", "get", "(", "'total_time'", ",", "INF", ")", ":", "\n", "                    ", "outcome", "[", "'achieved_goal'", "]", "=", "False", "\n", "", "if", "not", "outcome", "[", "'achieved_goal'", "]", ":", "\n", "                    ", "outcome", "[", "'total_time'", "]", "=", "MAX_TIME", "\n", "outcome", "[", "'plan_time'", "]", "=", "MAX_TIME", "\n", "", "for", "attribute", ",", "value", "in", "outcome", ".", "items", "(", ")", ":", "\n", "                    ", "if", "(", "attribute", "not", "in", "[", "'policy'", "]", ")", "and", "(", "attribute", "in", "PRINT_ATTRIBUTES", ")", "and", "not", "isinstance", "(", "value", ",", "str", ")", "and", "implies", "(", "attribute", "in", "ACHIEVED_GOAL", ",", "\n", "outcome", "[", "'achieved_goal'", "]", ")", ":", "\n", "                        ", "value_per_attribute", ".", "setdefault", "(", "attribute", ",", "[", "]", ")", ".", "append", "(", "float", "(", "value", ")", ")", "\n", "\n", "", "", "", "statistics", "=", "{", "attribute", ":", "np", ".", "round", "(", "np", ".", "average", "(", "values", ")", ",", "3", ")", "# '{:.2f}'.format(", "\n", "for", "attribute", ",", "values", "in", "value_per_attribute", ".", "items", "(", ")", "}", "# median, min, max of solved?", "\n", "statistics", "[", "'trials'", "]", "=", "len", "(", "outcomes", ")", "\n", "print", "(", "'{}: {}'", ".", "format", "(", "policy", ",", "str_from_object", "(", "statistics", ")", ")", ")", "\n", "items", "+=", "[", "\n", "'{:.0f}'", ".", "format", "(", "100", "*", "statistics", "[", "'achieved_goal'", "]", ")", ",", "\n", "'{:.0f}'", ".", "format", "(", "statistics", "[", "'plan_time'", "]", ")", ",", "\n", "]", "\n", "", "table", "+=", "'{}\\n\\\\\\\\ \\hline\\n'", ".", "format", "(", "' & '", ".", "join", "(", "items", ")", ")", "\n", "", "print", "(", "SEPARATOR", ")", "\n", "print", "(", "POLICIES", ")", "\n", "print", "(", "table", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.__init__": [[81, 154], ["pybullet_tools.utils.connect", "pybullet_tools.utils.set_real_time", "pybullet_tools.utils.disable_gravity", "pybullet_tools.utils.add_data_path", "pybullet_tools.utils.set_camera_pose", "pybullet_tools.utils.load_pybullet", "pybullet_tools.utils.set_point", "pybullet_tools.utils.set_point", "world.World.set_initial_conf", "src.utils.create_gripper", "world.World._initialize_ik", "pybullet_tools.utils.WorldSaver", "set", "src.utils.FConf", "src.utils.FConf", "src.utils.FConf", "src.utils.FConf", "world.World._update_custom_limits", "world.World._update_initial", "pybullet_tools.utils.draw_pose", "pybullet_tools.utils.HideOutput", "pybullet_tools.utils.load_pybullet", "pybullet_tools.utils.stable_z", "numpy.array", "numpy.array", "ValueError", "pybullet_tools.utils.load_yaml", "pybullet_tools.utils.HideOutput", "pybullet_tools.utils.load_pybullet", "pybullet_tools.utils.Point", "world.World._initialize_environment", "world.World.disabled_collisions.update", "pybullet_tools.utils.get_max_limits", "pybullet_tools.utils.get_min_limits", "src.utils.FConf", "src.utils.FConf", "pybullet_tools.utils.Pose", "pybullet_tools.utils.get_point", "pybullet_tools.utils.get_point", "pybullet_tools.utils.stable_z", "tuple", "world.World.open_conf", "world.World.closed_conf", "pybullet_tools.utils.link_from_name"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.set_initial_conf", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.create_gripper", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World._initialize_ik", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World._update_custom_limits", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World._update_initial", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World._initialize_environment", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.update", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.open_conf", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.closed_conf"], ["    ", "def", "__init__", "(", "self", ",", "robot_name", "=", "FRANKA_CARTER", ",", "use_gui", "=", "True", ",", "full_kitchen", "=", "False", ")", ":", "\n", "        ", "self", ".", "task", "=", "None", "\n", "self", ".", "interface", "=", "None", "\n", "self", ".", "client", "=", "connect", "(", "use_gui", "=", "use_gui", ")", "\n", "set_real_time", "(", "False", ")", "\n", "#set_caching(False) # Seems to make things worse", "\n", "disable_gravity", "(", ")", "\n", "add_data_path", "(", ")", "\n", "set_camera_pose", "(", "camera_point", "=", "[", "2", ",", "-", "1.5", ",", "1", "]", ")", "\n", "if", "DEBUG", ":", "\n", "            ", "draw_pose", "(", "Pose", "(", ")", ",", "length", "=", "3", ")", "\n", "\n", "#self.kitchen_yaml = load_yaml(KITCHEN_YAML)", "\n", "", "with", "HideOutput", "(", "enable", "=", "True", ")", ":", "\n", "            ", "self", ".", "kitchen", "=", "load_pybullet", "(", "KITCHEN_PATH", ",", "fixed_base", "=", "True", ",", "cylinder", "=", "True", ")", "\n", "\n", "", "self", ".", "floor", "=", "load_pybullet", "(", "'plane.urdf'", ",", "fixed_base", "=", "True", ")", "\n", "z", "=", "stable_z", "(", "self", ".", "kitchen", ",", "self", ".", "floor", ")", "-", "get_point", "(", "self", ".", "floor", ")", "[", "2", "]", "\n", "point", "=", "np", ".", "array", "(", "get_point", "(", "self", ".", "kitchen", ")", ")", "-", "np", ".", "array", "(", "[", "0", ",", "0", ",", "z", "]", ")", "\n", "set_point", "(", "self", ".", "floor", ",", "point", ")", "\n", "\n", "self", ".", "robot_name", "=", "robot_name", "\n", "if", "self", ".", "robot_name", "==", "FRANKA_CARTER", ":", "\n", "            ", "urdf_path", ",", "yaml_path", "=", "FRANKA_CARTER_PATH", ",", "None", "\n", "#urdf_path, yaml_path = FRANKA_CARTER_PATH, FRANKA_YAML", "\n", "#elif self.robot_name == EVE:", "\n", "#    urdf_path, yaml_path = EVE_PATH, None", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "self", ".", "robot_name", ")", "\n", "", "self", ".", "robot_yaml", "=", "yaml_path", "if", "yaml_path", "is", "None", "else", "load_yaml", "(", "yaml_path", ")", "\n", "with", "HideOutput", "(", "enable", "=", "True", ")", ":", "\n", "            ", "self", ".", "robot", "=", "load_pybullet", "(", "urdf_path", ")", "\n", "#dump_body(self.robot)", "\n", "#chassis_pose = get_link_pose(self.robot, link_from_name(self.robot, 'chassis_link'))", "\n", "#wheel_pose = get_link_pose(self.robot, link_from_name(self.robot, 'left_wheel_link'))", "\n", "#wait_for_user()", "\n", "", "set_point", "(", "self", ".", "robot", ",", "Point", "(", "z", "=", "stable_z", "(", "self", ".", "robot", ",", "self", ".", "floor", ")", ")", ")", "\n", "self", ".", "set_initial_conf", "(", ")", "\n", "self", ".", "gripper", "=", "create_gripper", "(", "self", ".", "robot", ")", "\n", "\n", "self", ".", "environment_bodies", "=", "{", "}", "\n", "if", "full_kitchen", ":", "\n", "            ", "self", ".", "_initialize_environment", "(", ")", "\n", "", "self", ".", "_initialize_ik", "(", "urdf_path", ")", "\n", "self", ".", "initial_saver", "=", "WorldSaver", "(", ")", "\n", "\n", "self", ".", "body_from_name", "=", "{", "}", "\n", "# self.path_from_name = {}", "\n", "self", ".", "names_from_type", "=", "{", "}", "\n", "self", ".", "custom_limits", "=", "{", "}", "\n", "self", ".", "base_limits_handles", "=", "[", "]", "\n", "self", ".", "cameras", "=", "{", "}", "\n", "\n", "self", ".", "disabled_collisions", "=", "set", "(", ")", "\n", "if", "self", ".", "robot_name", "==", "FRANKA_CARTER", ":", "\n", "            ", "self", ".", "disabled_collisions", ".", "update", "(", "tuple", "(", "link_from_name", "(", "self", ".", "robot", ",", "link", ")", "for", "link", "in", "pair", ")", "\n", "for", "pair", "in", "DISABLED_FRANKA_COLLISIONS", ")", "\n", "\n", "", "self", ".", "carry_conf", "=", "FConf", "(", "self", ".", "robot", ",", "self", ".", "arm_joints", ",", "self", ".", "default_conf", ")", "\n", "#self.calibrate_conf = Conf(self.robot, self.arm_joints, load_calibrate_conf(side='left'))", "\n", "self", ".", "calibrate_conf", "=", "FConf", "(", "self", ".", "robot", ",", "self", ".", "arm_joints", ",", "self", ".", "default_conf", ")", "# Must differ from carry_conf", "\n", "self", ".", "special_confs", "=", "[", "self", ".", "carry_conf", "]", "#, self.calibrate_conf]", "\n", "self", ".", "open_gq", "=", "FConf", "(", "self", ".", "robot", ",", "self", ".", "gripper_joints", ",", "\n", "get_max_limits", "(", "self", ".", "robot", ",", "self", ".", "gripper_joints", ")", ")", "\n", "self", ".", "closed_gq", "=", "FConf", "(", "self", ".", "robot", ",", "self", ".", "gripper_joints", ",", "\n", "get_min_limits", "(", "self", ".", "robot", ",", "self", ".", "gripper_joints", ")", ")", "\n", "self", ".", "gripper_confs", "=", "[", "self", ".", "open_gq", ",", "self", ".", "closed_gq", "]", "\n", "self", ".", "open_kitchen_confs", "=", "{", "joint", ":", "FConf", "(", "self", ".", "kitchen", ",", "[", "joint", "]", ",", "[", "self", ".", "open_conf", "(", "joint", ")", "]", ")", "\n", "for", "joint", "in", "self", ".", "kitchen_joints", "}", "\n", "self", ".", "closed_kitchen_confs", "=", "{", "joint", ":", "FConf", "(", "self", ".", "kitchen", ",", "[", "joint", "]", ",", "[", "self", ".", "closed_conf", "(", "joint", ")", "]", ")", "\n", "for", "joint", "in", "self", ".", "kitchen_joints", "}", "\n", "self", ".", "_update_custom_limits", "(", ")", "\n", "self", ".", "_update_initial", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World._initialize_environment": [[155, 192], ["pybullet_tools.utils.read_json", "pybullet_tools.utils.get_link_pose", "world.World.environment_poses.items", "os.path.join", "os.path.join", "pybullet_tools.utils.load_pybullet", "pybullet_tools.utils.multiply", "pybullet_tools.utils.set_pose", "pybullet_tools.utils.approximate_as_prism", "pybullet_tools.utils.get_point", "pybullet_tools.utils.Pose", "pybullet_tools.utils.set_pose", "os.path.exists", "pybullet_tools.utils.Point", "pybullet_tools.utils.Euler", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "_initialize_environment", "(", "self", ")", ":", "\n", "# wall to fridge: 4cm", "\n", "# fridge to goal: 1.5cm", "\n", "# hitman to range: 3.5cm", "\n", "# range to indigo: 3.5cm", "\n", "        ", "self", ".", "environment_poses", "=", "read_json", "(", "POSES_PATH", ")", "\n", "root_from_world", "=", "get_link_pose", "(", "self", ".", "kitchen", ",", "self", ".", "world_link", ")", "\n", "for", "name", ",", "world_from_part", "in", "self", ".", "environment_poses", ".", "items", "(", ")", ":", "\n", "            ", "if", "name", "in", "[", "'range'", "]", ":", "\n", "                ", "continue", "\n", "", "visual_path", "=", "os", ".", "path", ".", "join", "(", "KITCHEN_LEFT_PATH", ",", "'{}.obj'", ".", "format", "(", "name", ")", ")", "\n", "collision_path", "=", "os", ".", "path", ".", "join", "(", "KITCHEN_LEFT_PATH", ",", "'{}_collision.obj'", ".", "format", "(", "name", ")", ")", "\n", "mesh_path", "=", "None", "\n", "for", "path", "in", "[", "collision_path", ",", "visual_path", "]", ":", "\n", "                ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                    ", "mesh_path", "=", "path", "\n", "break", "\n", "", "", "if", "mesh_path", "is", "None", ":", "\n", "                ", "continue", "\n", "", "body", "=", "load_pybullet", "(", "mesh_path", ",", "fixed_base", "=", "True", ")", "\n", "root_from_part", "=", "multiply", "(", "root_from_world", ",", "world_from_part", ")", "\n", "if", "name", "in", "[", "'axe'", ",", "'dishwasher'", ",", "'echo'", ",", "'fox'", ",", "'golf'", "]", ":", "\n", "                ", "(", "pos", ",", "quat", ")", "=", "root_from_part", "\n", "# TODO: still not totally aligned", "\n", "pos", "=", "np", ".", "array", "(", "pos", ")", "+", "np", ".", "array", "(", "[", "0", ",", "-", "0.035", ",", "0", "]", ")", "# , -0.005])", "\n", "root_from_part", "=", "(", "pos", ",", "quat", ")", "\n", "", "self", ".", "environment_bodies", "[", "name", "]", "=", "body", "\n", "set_pose", "(", "body", ",", "root_from_part", ")", "\n", "# TODO: release bounding box or convex hull", "\n", "# TODO: static object nonconvex collisions", "\n", "\n", "", "if", "TABLE_NAME", "in", "self", ".", "environment_bodies", ":", "\n", "            ", "body", "=", "self", ".", "environment_bodies", "[", "TABLE_NAME", "]", "\n", "_", ",", "(", "w", ",", "l", ",", "_", ")", "=", "approximate_as_prism", "(", "body", ")", "\n", "_", ",", "_", ",", "z", "=", "get_point", "(", "body", ")", "\n", "new_pose", "=", "Pose", "(", "Point", "(", "TABLE_X", "+", "l", "/", "2", ",", "-", "TABLE_Y", ",", "z", ")", ",", "Euler", "(", "yaw", "=", "np", ".", "pi", "/", "2", ")", ")", "\n", "set_pose", "(", "body", ",", "new_pose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World._initialize_ik": [[193, 214], ["pybullet_tools.utils.get_link_name", "pybullet_tools.utils.get_link_name", "IK", "world.World.ik_solver.get_joint_limits", "world.World.ik_solver.set_joint_limits", "pybullet_tools.utils.parent_link_from_joint", "pybullet_tools.utils.child_link_from_joint", "numpy.ones", "str", "str", "pybullet_tools.utils.read", "len"], "methods", ["None"], ["", "", "def", "_initialize_ik", "(", "self", ",", "urdf_path", ")", ":", "\n", "        ", "if", "not", "USE_TRACK_IK", ":", "\n", "            ", "self", ".", "ik_solver", "=", "None", "\n", "return", "\n", "", "from", "trac_ik_python", ".", "trac_ik", "import", "IK", "# killall -9 rosmaster", "\n", "base_link", "=", "get_link_name", "(", "self", ".", "robot", ",", "parent_link_from_joint", "(", "self", ".", "robot", ",", "self", ".", "arm_joints", "[", "0", "]", ")", ")", "\n", "tip_link", "=", "get_link_name", "(", "self", ".", "robot", ",", "child_link_from_joint", "(", "self", ".", "arm_joints", "[", "-", "1", "]", ")", ")", "\n", "# limit effort and velocities are required", "\n", "# solve_type: Speed, Distance, Manipulation1, Manipulation2", "\n", "# TODO: fast solver and slow solver", "\n", "self", ".", "ik_solver", "=", "IK", "(", "base_link", "=", "str", "(", "base_link", ")", ",", "tip_link", "=", "str", "(", "tip_link", ")", ",", "\n", "timeout", "=", "0.01", ",", "epsilon", "=", "1e-5", ",", "solve_type", "=", "\"Speed\"", ",", "\n", "urdf_string", "=", "read", "(", "urdf_path", ")", ")", "\n", "if", "not", "CONSERVITIVE_LIMITS", ":", "\n", "            ", "return", "\n", "", "lower", ",", "upper", "=", "self", ".", "ik_solver", ".", "get_joint_limits", "(", ")", "\n", "buffer", "=", "JOINT_LIMITS_BUFFER", "*", "np", ".", "ones", "(", "len", "(", "self", ".", "ik_solver", ".", "joint_names", ")", ")", "\n", "lower", ",", "upper", "=", "lower", "+", "buffer", ",", "upper", "-", "buffer", "\n", "lower", "[", "6", "]", "=", "-", "MAX_FRANKA_JOINT7", "\n", "upper", "[", "6", "]", "=", "+", "MAX_FRANKA_JOINT7", "\n", "self", ".", "ik_solver", ".", "set_joint_limits", "(", "lower", ",", "upper", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World._update_initial": [[215, 225], ["pybullet_tools.utils.WorldSaver", "src.utils.FConf", "src.utils.FConf", "src.utils.are_confs_close", "src.utils.FConf", "pybullet_tools.utils.set_all_static"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.are_confs_close"], ["", "def", "_update_initial", "(", "self", ")", ":", "\n", "# TODO: store initial poses as well?", "\n", "        ", "self", ".", "initial_saver", "=", "WorldSaver", "(", ")", "\n", "self", ".", "goal_bq", "=", "FConf", "(", "self", ".", "robot", ",", "self", ".", "base_joints", ")", "\n", "self", ".", "goal_aq", "=", "FConf", "(", "self", ".", "robot", ",", "self", ".", "arm_joints", ")", "\n", "if", "are_confs_close", "(", "self", ".", "goal_aq", ",", "self", ".", "carry_conf", ")", ":", "\n", "            ", "self", ".", "goal_aq", "=", "self", ".", "carry_conf", "\n", "", "self", ".", "goal_gq", "=", "FConf", "(", "self", ".", "robot", ",", "self", ".", "gripper_joints", ")", "\n", "self", ".", "initial_confs", "=", "[", "self", ".", "goal_bq", ",", "self", ".", "goal_aq", ",", "self", ".", "goal_gq", "]", "\n", "set_all_static", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.is_real": [[226, 228], ["None"], "methods", ["None"], ["", "def", "is_real", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "task", "is", "not", "None", ")", "and", "self", ".", "task", ".", "real", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.constants": [[228, 231], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "constants", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "special_confs", "+", "self", ".", "gripper_confs", "+", "self", ".", "initial_confs", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.base_joints": [[234, 237], ["pybullet_tools.utils.joints_from_names"], "methods", ["None"], ["", "@", "property", "\n", "def", "base_joints", "(", "self", ")", ":", "\n", "        ", "return", "joints_from_names", "(", "self", ".", "robot", ",", "BASE_JOINTS", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.arm_joints": [[237, 244], ["pybullet_tools.utils.joints_from_names", "range"], "methods", ["None"], ["", "@", "property", "\n", "def", "arm_joints", "(", "self", ")", ":", "\n", "#if self.robot_name == EVE:", "\n", "#    return get_eve_arm_joints(self.robot, arm=DEFAULT_ARM)", "\n", "        ", "joint_names", "=", "[", "'panda_joint{}'", ".", "format", "(", "1", "+", "i", ")", "for", "i", "in", "range", "(", "7", ")", "]", "\n", "#joint_names = self.robot_yaml['cspace']", "\n", "return", "joints_from_names", "(", "self", ".", "robot", ",", "joint_names", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.gripper_joints": [[244, 252], ["pybullet_tools.utils.joints_from_names", "range"], "methods", ["None"], ["", "@", "property", "\n", "def", "gripper_joints", "(", "self", ")", ":", "\n", "#if self.robot_yaml is None:", "\n", "#    return []", "\n", "        ", "joint_names", "=", "[", "'panda_finger_joint{}'", ".", "format", "(", "1", "+", "i", ")", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "#joint_names = [joint_from_name(self.robot, rule['name'])", "\n", "#               for rule in self.robot_yaml['cspace_to_urdf_rules']]", "\n", "return", "joints_from_names", "(", "self", ".", "robot", ",", "joint_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.kitchen_joints": [[253, 259], ["pybullet_tools.utils.get_joint_names", "pybullet_tools.utils.joints_from_names", "pybullet_tools.utils.get_movable_joints", "filter"], "methods", ["None"], ["", "@", "property", "\n", "def", "kitchen_joints", "(", "self", ")", ":", "\n", "        ", "joint_names", "=", "get_joint_names", "(", "self", ".", "kitchen", ",", "get_movable_joints", "(", "self", ".", "kitchen", ")", ")", "\n", "#joint_names = self.kitchen_yaml['cspace']", "\n", "#return joints_from_names(self.kitchen, joint_names)", "\n", "return", "joints_from_names", "(", "self", ".", "kitchen", ",", "filter", "(", "ALL_JOINTS", ".", "__contains__", ",", "joint_names", ")", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.base_link": [[259, 262], ["pybullet_tools.utils.child_link_from_joint"], "methods", ["None"], ["", "@", "property", "\n", "def", "base_link", "(", "self", ")", ":", "\n", "        ", "return", "child_link_from_joint", "(", "self", ".", "base_joints", "[", "-", "1", "]", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.franka_link": [[262, 265], ["pybullet_tools.utils.parent_link_from_joint"], "methods", ["None"], ["", "@", "property", "\n", "def", "franka_link", "(", "self", ")", ":", "\n", "        ", "return", "parent_link_from_joint", "(", "self", ".", "robot", ",", "self", ".", "arm_joints", "[", "0", "]", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.gripper_link": [[265, 268], ["pybullet_tools.utils.parent_link_from_joint"], "methods", ["None"], ["", "@", "property", "\n", "def", "gripper_link", "(", "self", ")", ":", "\n", "        ", "return", "parent_link_from_joint", "(", "self", ".", "robot", ",", "self", ".", "gripper_joints", "[", "0", "]", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.tool_link": [[268, 271], ["pybullet_tools.utils.link_from_name", "src.utils.get_tool_link"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_tool_link"], ["", "@", "property", "\n", "def", "tool_link", "(", "self", ")", ":", "\n", "        ", "return", "link_from_name", "(", "self", ".", "robot", ",", "get_tool_link", "(", "self", ".", "robot", ")", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.world_link": [[271, 274], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "world_link", "(", "self", ")", ":", "# for kitchen", "\n", "        ", "return", "BASE_LINK", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.door_links": [[274, 280], ["set", "set.update", "pybullet_tools.utils.get_link_subtree"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.update"], ["", "@", "property", "\n", "def", "door_links", "(", "self", ")", ":", "\n", "        ", "door_links", "=", "set", "(", ")", "\n", "for", "joint", "in", "self", ".", "kitchen_joints", ":", "\n", "            ", "door_links", ".", "update", "(", "get_link_subtree", "(", "self", ".", "kitchen", ",", "joint", ")", ")", "\n", "", "return", "door_links", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.static_obstacles": [[280, 288], ["frozenset", "world.World.environment_bodies.values", "set", "pybullet_tools.utils.get_links"], "methods", ["None"], ["", "@", "property", "\n", "def", "static_obstacles", "(", "self", ")", ":", "\n", "# link=None is fine", "\n", "# TODO: decompose obstacles", "\n", "#return [(self.kitchen, frozenset(get_links(self.kitchen)) - self.door_links)]", "\n", "        ", "return", "{", "(", "self", ".", "kitchen", ",", "frozenset", "(", "[", "link", "]", ")", ")", "for", "link", "in", "\n", "set", "(", "get_links", "(", "self", ".", "kitchen", ")", ")", "-", "self", ".", "door_links", "}", "|", "{", "(", "body", ",", "None", ")", "for", "body", "in", "self", ".", "environment_bodies", ".", "values", "(", ")", "}", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.movable": [[288, 291], ["set"], "methods", ["None"], ["", "@", "property", "\n", "def", "movable", "(", "self", ")", ":", "# movable base", "\n", "        ", "return", "set", "(", "self", ".", "body_from_name", ")", "# frozenset?", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.fixed": [[291, 294], ["set", "world.World.environment_bodies.values"], "methods", ["None"], ["", "@", "property", "\n", "def", "fixed", "(", "self", ")", ":", "# fixed base", "\n", "        ", "return", "set", "(", "self", ".", "environment_bodies", ".", "values", "(", ")", ")", "|", "{", "self", ".", "kitchen", "}", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.all_bodies": [[294, 297], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "all_bodies", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "movable", "|", "self", ".", "fixed", "|", "{", "self", ".", "robot", "}", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.default_conf": [[297, 307], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "default_conf", "(", "self", ")", ":", "\n", "# if self.robot_name == EVE:", "\n", "#     # Eve starts outside of joint limits", "\n", "#     # Eve starts outside of joint limits", "\n", "#     conf = [np.average(get_joint_limits(self.robot, joint)) for joint in self.arm_joints]", "\n", "#     #conf = np.zeros(len(self.arm_joints))", "\n", "#     #conf[3] -= np.pi / 2", "\n", "#     return conf", "\n", "        ", "return", "DEFAULT_ARM_CONF", "\n", "#conf = np.array(self.robot_yaml['default_q'])", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_base_conf": [[315, 317], ["pybullet_tools.utils.get_joint_positions"], "methods", ["None"], ["", "def", "get_base_conf", "(", "self", ")", ":", "\n", "        ", "return", "get_joint_positions", "(", "self", ".", "robot", ",", "self", ".", "base_joints", ")", "\n", "", "def", "set_base_conf", "(", "self", ",", "conf", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.set_base_conf": [[317, 319], ["pybullet_tools.utils.set_joint_positions"], "methods", ["None"], ["", "def", "set_base_conf", "(", "self", ",", "conf", ")", ":", "\n", "        ", "set_joint_positions", "(", "self", ".", "robot", ",", "self", ".", "base_joints", ",", "conf", ")", "\n", "", "def", "get_base_aabb", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_base_aabb": [[319, 323], ["pybullet_tools.utils.get_link_subtree", "pybullet_tools.utils.get_link_subtree", "pybullet_tools.utils.aabb_union", "pybullet_tools.utils.get_aabb", "set", "set"], "methods", ["None"], ["", "def", "get_base_aabb", "(", "self", ")", ":", "\n", "        ", "franka_links", "=", "get_link_subtree", "(", "self", ".", "robot", ",", "self", ".", "franka_link", ")", "\n", "base_links", "=", "get_link_subtree", "(", "self", ".", "robot", ",", "self", ".", "base_link", ")", "\n", "return", "aabb_union", "(", "get_aabb", "(", "self", ".", "robot", ",", "link", ")", "for", "link", "in", "set", "(", "base_links", ")", "-", "set", "(", "franka_links", ")", ")", "\n", "", "def", "get_world_aabb", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_world_aabb": [[323, 325], ["pybullet_tools.utils.aabb_union", "pybullet_tools.utils.get_aabb"], "methods", ["None"], ["", "def", "get_world_aabb", "(", "self", ")", ":", "\n", "        ", "return", "aabb_union", "(", "get_aabb", "(", "body", ")", "for", "body", "in", "self", ".", "fixed", ")", "# self.all_bodies", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World._update_custom_limits": [[326, 345], ["world.World.get_world_aabb", "src.utils.custom_limits_from_base_limits", "pybullet_tools.utils.remove_debug", "world.World.base_limits_handles.extend", "pybullet_tools.utils.get_point", "pybullet_tools.utils.draw_base_limits"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_world_aabb", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.custom_limits_from_base_limits"], ["", "def", "_update_custom_limits", "(", "self", ",", "min_extent", "=", "0.0", ")", ":", "\n", "#robot_extent = get_aabb_extent(get_aabb(self.robot))", "\n", "# Scaling by 0.5 to prevent getting caught in corners", "\n", "#min_extent = 0.5 * min(robot_extent[:2]) * np.ones(2) / 2", "\n", "        ", "world_aabb", "=", "self", ".", "get_world_aabb", "(", ")", "\n", "full_lower", ",", "full_upper", "=", "world_aabb", "\n", "base_limits", "=", "(", "full_lower", "[", ":", "2", "]", "-", "min_extent", ",", "full_upper", "[", ":", "2", "]", "+", "min_extent", ")", "\n", "base_limits", "[", "1", "]", "[", "0", "]", "=", "COMPUTER_X", "-", "min_extent", "# TODO: robot radius", "\n", "base_limits", "[", "0", "]", "[", "1", "]", "+=", "0.1", "\n", "base_limits", "[", "1", "]", "[", "1", "]", "-=", "0.1", "\n", "for", "handle", "in", "self", ".", "base_limits_handles", ":", "\n", "            ", "remove_debug", "(", "handle", ")", "\n", "", "self", ".", "base_limits_handles", "=", "[", "]", "\n", "#self.base_limits_handles.extend(draw_aabb(world_aabb))", "\n", "z", "=", "get_point", "(", "self", ".", "floor", ")", "[", "2", "]", "+", "1e-2", "\n", "if", "DEBUG", ":", "\n", "            ", "self", ".", "base_limits_handles", ".", "extend", "(", "draw_base_limits", "(", "base_limits", ",", "z", "=", "z", ")", ")", "\n", "", "self", ".", "custom_limits", "=", "custom_limits_from_base_limits", "(", "self", ".", "robot", ",", "base_limits", ")", "\n", "return", "self", ".", "custom_limits", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.solve_trac_ik": [[346, 380], ["world.World.ik_solver.get_joint_limits", "pybullet_tools.utils.link_from_name", "pybullet_tools.utils.get_link_pose", "pybullet_tools.utils.link_from_name", "pybullet_tools.utils.multiply", "pybullet_tools.utils.multiply", "pybullet_tools.utils.multiply", "pybullet_tools.utils.joints_from_names", "pybullet_tools.utils.get_joint_positions", "world.World.ik_solver.set_joint_limits", "world.World.ik_solver.get_ik", "world.World.ik_solver.set_joint_limits", "pybullet_tools.utils.set_joint_positions", "pybullet_tools.utils.get_configuration", "pybullet_tools.utils.invert", "pybullet_tools.utils.get_link_pose", "pybullet_tools.utils.invert", "numpy.maximum", "numpy.minimum", "pybullet_tools.utils.get_link_pose", "numpy.ones", "len"], "methods", ["None"], ["", "def", "solve_trac_ik", "(", "self", ",", "world_from_tool", ",", "nearby_tolerance", "=", "INF", ")", ":", "\n", "        ", "assert", "self", ".", "ik_solver", "is", "not", "None", "\n", "init_lower", ",", "init_upper", "=", "self", ".", "ik_solver", ".", "get_joint_limits", "(", ")", "\n", "base_link", "=", "link_from_name", "(", "self", ".", "robot", ",", "self", ".", "ik_solver", ".", "base_link", ")", "\n", "world_from_base", "=", "get_link_pose", "(", "self", ".", "robot", ",", "base_link", ")", "\n", "tip_link", "=", "link_from_name", "(", "self", ".", "robot", ",", "self", ".", "ik_solver", ".", "tip_link", ")", "\n", "tool_from_tip", "=", "multiply", "(", "invert", "(", "get_link_pose", "(", "self", ".", "robot", ",", "self", ".", "tool_link", ")", ")", ",", "\n", "get_link_pose", "(", "self", ".", "robot", ",", "tip_link", ")", ")", "\n", "world_from_tip", "=", "multiply", "(", "world_from_tool", ",", "tool_from_tip", ")", "\n", "base_from_tip", "=", "multiply", "(", "invert", "(", "world_from_base", ")", ",", "world_from_tip", ")", "\n", "joints", "=", "joints_from_names", "(", "self", ".", "robot", ",", "self", ".", "ik_solver", ".", "joint_names", ")", "# self.ik_solver.link_names", "\n", "seed_state", "=", "get_joint_positions", "(", "self", ".", "robot", ",", "joints", ")", "\n", "# seed_state = [0.0] * self.ik_solver.number_of_joints", "\n", "\n", "lower", ",", "upper", "=", "init_lower", ",", "init_upper", "\n", "if", "nearby_tolerance", "<", "INF", ":", "\n", "            ", "tolerance", "=", "nearby_tolerance", "*", "np", ".", "ones", "(", "len", "(", "joints", ")", ")", "\n", "lower", "=", "np", ".", "maximum", "(", "lower", ",", "seed_state", "-", "tolerance", ")", "\n", "upper", "=", "np", ".", "minimum", "(", "upper", ",", "seed_state", "+", "tolerance", ")", "\n", "", "self", ".", "ik_solver", ".", "set_joint_limits", "(", "lower", ",", "upper", ")", "\n", "\n", "(", "x", ",", "y", ",", "z", ")", ",", "(", "rx", ",", "ry", ",", "rz", ",", "rw", ")", "=", "base_from_tip", "\n", "# TODO: can also adjust tolerances", "\n", "conf", "=", "self", ".", "ik_solver", ".", "get_ik", "(", "seed_state", ",", "x", ",", "y", ",", "z", ",", "rx", ",", "ry", ",", "rz", ",", "rw", ")", "\n", "self", ".", "ik_solver", ".", "set_joint_limits", "(", "init_lower", ",", "init_upper", ")", "\n", "if", "conf", "is", "None", ":", "\n", "            ", "return", "conf", "\n", "# if nearby_tolerance < INF:", "\n", "#    print(lower.round(3))", "\n", "#    print(upper.round(3))", "\n", "#    print(conf)", "\n", "#    print(get_difference(seed_state, conf).round(3))", "\n", "", "set_joint_positions", "(", "self", ".", "robot", ",", "joints", ",", "conf", ")", "\n", "return", "get_configuration", "(", "self", ".", "robot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.solve_pybullet_ik": [[381, 394], ["time.time", "pybullet_tools.utils.get_joint_positions", "pybullet_tools.utils.sub_inverse_kinematics", "pybullet_tools.utils.get_joint_positions", "pybullet_tools.utils.get_distance", "print", "pybullet_tools.utils.elapsed_time"], "methods", ["None"], ["", "def", "solve_pybullet_ik", "(", "self", ",", "world_from_tool", ",", "nearby_tolerance", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "# Most of the time is spent creating the robot", "\n", "# TODO: use the waypoint version that doesn't repeatedly create the robot", "\n", "current_conf", "=", "get_joint_positions", "(", "self", ".", "robot", ",", "self", ".", "arm_joints", ")", "\n", "full_conf", "=", "sub_inverse_kinematics", "(", "self", ".", "robot", ",", "self", ".", "arm_joints", "[", "0", "]", ",", "self", ".", "tool_link", ",", "world_from_tool", ",", "\n", "custom_limits", "=", "self", ".", "custom_limits", ")", "# , max_iterations=1)  # , **kwargs)", "\n", "conf", "=", "get_joint_positions", "(", "self", ".", "robot", ",", "self", ".", "arm_joints", ")", "\n", "max_distance", "=", "get_distance", "(", "current_conf", ",", "conf", ",", "norm", "=", "INF", ")", "\n", "if", "nearby_tolerance", "<", "max_distance", ":", "\n", "            ", "return", "None", "\n", "", "print", "(", "'Nearby) time: {:.3f} | distance: {:.5f}'", ".", "format", "(", "elapsed_time", "(", "start_time", ")", ",", "max_distance", ")", ")", "\n", "return", "full_conf", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.solve_inverse_kinematics": [[395, 417], ["pybullet_tools.utils.get_joint_positions", "time.time", "next", "pybullet_tools.utils.get_distance", "pybullet_tools.utils.set_joint_positions", "pybullet_tools.utils.get_configuration", "world.World.solve_trac_ik", "pybullet_tools.ikfast.franka_panda.ik.ikfast_inverse_kinematics", "pybullet_tools.ikfast.franka_panda.ik.closest_inverse_kinematics"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.solve_trac_ik"], ["", "def", "solve_inverse_kinematics", "(", "self", ",", "world_from_tool", ",", "nearby_tolerance", "=", "INF", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "ik_solver", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "solve_trac_ik", "(", "world_from_tool", ",", "**", "kwargs", ")", "\n", "#if nearby_tolerance != INF:", "\n", "#    return self.solve_pybullet_ik(world_from_tool, nearby_tolerance=nearby_tolerance)", "\n", "", "current_conf", "=", "get_joint_positions", "(", "self", ".", "robot", ",", "self", ".", "arm_joints", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "nearby_tolerance", "==", "INF", ":", "\n", "            ", "generator", "=", "ikfast_inverse_kinematics", "(", "self", ".", "robot", ",", "PANDA_INFO", ",", "self", ".", "tool_link", ",", "world_from_tool", ",", "\n", "max_attempts", "=", "10", ",", "use_halton", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "generator", "=", "closest_inverse_kinematics", "(", "self", ".", "robot", ",", "PANDA_INFO", ",", "self", ".", "tool_link", ",", "world_from_tool", ",", "\n", "max_time", "=", "0.01", ",", "max_distance", "=", "nearby_tolerance", ",", "use_halton", "=", "True", ")", "\n", "", "conf", "=", "next", "(", "generator", ",", "None", ")", "\n", "#conf = sample_tool_ik(self.robot, world_from_tool, max_attempts=100)", "\n", "if", "conf", "is", "None", ":", "\n", "            ", "return", "conf", "\n", "", "max_distance", "=", "get_distance", "(", "current_conf", ",", "conf", ",", "norm", "=", "INF", ")", "\n", "#print('Time: {:.3f} | distance: {:.5f} | max: {:.5f}'.format(", "\n", "#    elapsed_time(start_time), max_distance, nearby_tolerance))", "\n", "set_joint_positions", "(", "self", ".", "robot", ",", "self", ".", "arm_joints", ",", "conf", ")", "\n", "return", "get_configuration", "(", "self", ".", "robot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.set_initial_conf": [[420, 426], ["pybullet_tools.utils.set_joint_positions", "pybullet_tools.utils.set_joint_positions"], "methods", ["None"], ["", "def", "set_initial_conf", "(", "self", ")", ":", "\n", "        ", "set_joint_positions", "(", "self", ".", "robot", ",", "self", ".", "base_joints", ",", "[", "2.0", ",", "0", ",", "np", ".", "pi", "]", ")", "\n", "#for rule in self.robot_yaml['cspace_to_urdf_rules']:  # gripper: max is open", "\n", "#    joint = joint_from_name(self.robot, rule['name'])", "\n", "#    set_joint_position(self.robot, joint, rule['value'])", "\n", "set_joint_positions", "(", "self", ".", "robot", ",", "self", ".", "arm_joints", ",", "self", ".", "default_conf", ")", "# active_task_spaces", "\n", "# if self.robot_name == EVE:", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.set_gripper": [[430, 433], ["pybullet_tools.utils.set_joint_positions", "numpy.ones", "len"], "methods", ["None"], ["", "def", "set_gripper", "(", "self", ",", "value", ")", ":", "\n", "        ", "positions", "=", "value", "*", "np", ".", "ones", "(", "len", "(", "self", ".", "gripper_joints", ")", ")", "\n", "set_joint_positions", "(", "self", ".", "robot", ",", "self", ".", "gripper_joints", ",", "positions", ")", "\n", "", "def", "close_gripper", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.close_gripper": [[433, 435], ["world.World.closed_gq.assign"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign"], ["", "def", "close_gripper", "(", "self", ")", ":", "\n", "        ", "self", ".", "closed_gq", ".", "assign", "(", ")", "\n", "", "def", "open_gripper", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.open_gripper": [[435, 437], ["world.World.open_gq.assign"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign"], ["", "def", "open_gripper", "(", "self", ")", ":", "\n", "        ", "self", ".", "open_gq", ".", "assign", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_door_sign": [[440, 442], ["pybullet_tools.utils.get_joint_name"], "methods", ["None"], ["", "def", "get_door_sign", "(", "self", ",", "joint", ")", ":", "\n", "        ", "return", "-", "1", "if", "'left'", "in", "get_joint_name", "(", "self", ".", "kitchen", ",", "joint", ")", "else", "+", "1", "\n", "", "def", "closed_conf", "(", "self", ",", "joint", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.closed_conf": [[442, 450], ["pybullet_tools.utils.get_joint_limits", "pybullet_tools.utils.get_joint_name", "pybullet_tools.utils.get_joint_name"], "methods", ["None"], ["", "def", "closed_conf", "(", "self", ",", "joint", ")", ":", "\n", "        ", "lower", ",", "upper", "=", "get_joint_limits", "(", "self", ".", "kitchen", ",", "joint", ")", "\n", "if", "'drawer'", "in", "get_joint_name", "(", "self", ".", "kitchen", ",", "joint", ")", ":", "\n", "            ", "fraction", "=", "0.9", "\n", "return", "fraction", "*", "lower", "+", "(", "1", "-", "fraction", ")", "*", "upper", "\n", "", "if", "'left'", "in", "get_joint_name", "(", "self", ".", "kitchen", ",", "joint", ")", ":", "\n", "            ", "return", "upper", "\n", "", "return", "lower", "\n", "", "def", "open_conf", "(", "self", ",", "joint", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.open_conf": [[450, 466], ["pybullet_tools.utils.get_joint_name", "pybullet_tools.utils.get_min_limit", "pybullet_tools.utils.get_max_limit", "abs"], "methods", ["None"], ["", "def", "open_conf", "(", "self", ",", "joint", ")", ":", "\n", "        ", "joint_name", "=", "get_joint_name", "(", "self", ".", "kitchen", ",", "joint", ")", "\n", "if", "'left'", "in", "joint_name", ":", "\n", "            ", "open_position", "=", "get_min_limit", "(", "self", ".", "kitchen", ",", "joint", ")", "\n", "", "else", ":", "\n", "            ", "open_position", "=", "get_max_limit", "(", "self", ".", "kitchen", ",", "joint", ")", "\n", "#print(get_joint_name(self.kitchen, joint), get_min_limit(self.kitchen, joint), get_max_limit(self.kitchen, joint))", "\n", "# drawers: [0.0, 0.4]", "\n", "# left doors: [-1.57, 0.0]", "\n", "# right doors: [0.0, 1.57]", "\n", "", "if", "joint_name", "in", "CABINET_JOINTS", ":", "\n", "# TODO: could make fraction of max", "\n", "            ", "return", "CABINET_OPEN_ANGLE", "*", "open_position", "/", "abs", "(", "open_position", ")", "\n", "", "if", "joint_name", "in", "DRAWER_JOINTS", ":", "\n", "            ", "return", "DRAWER_OPEN_FRACTION", "*", "open_position", "\n", "", "return", "open_position", "\n", "", "def", "close_door", "(", "self", ",", "joint", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.close_door": [[466, 468], ["pybullet_tools.utils.set_joint_position", "world.World.closed_conf"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.closed_conf"], ["", "def", "close_door", "(", "self", ",", "joint", ")", ":", "\n", "        ", "set_joint_position", "(", "self", ".", "kitchen", ",", "joint", ",", "self", ".", "closed_conf", "(", "joint", ")", ")", "\n", "", "def", "open_door", "(", "self", ",", "joint", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.open_door": [[468, 470], ["pybullet_tools.utils.set_joint_position", "world.World.open_conf"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.open_conf"], ["", "def", "open_door", "(", "self", ",", "joint", ")", ":", "\n", "        ", "set_joint_position", "(", "self", ".", "kitchen", ",", "joint", ",", "self", ".", "open_conf", "(", "joint", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.add_camera": [[473, 488], ["pybullet_tools.utils.apply_alpha", "pybullet_tools.pr2_utils.get_viewcone", "pybullet_tools.utils.set_pose", "Camera", "pybullet_tools.utils.step_simulation", "pybullet_tools.utils.load_pybullet", "pybullet_tools.utils.set_pose", "pybullet_tools.utils.set_color", "world.World.add", "pybullet_tools.utils.draw_pose"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.add"], ["", "def", "add_camera", "(", "self", ",", "name", ",", "pose", ",", "camera_matrix", ",", "max_depth", "=", "KINECT_DEPTH", ",", "display", "=", "False", ")", ":", "\n", "        ", "color", "=", "apply_alpha", "(", "RED", ",", "0.1", "if", "DEBUG", "else", "0", ")", "\n", "cone", "=", "get_viewcone", "(", "depth", "=", "max_depth", ",", "camera_matrix", "=", "camera_matrix", ",", "\n", "color", "=", "color", ",", "mass", "=", "0", ",", "collision", "=", "False", ")", "\n", "set_pose", "(", "cone", ",", "pose", ")", "\n", "if", "display", ":", "\n", "            ", "kinect", "=", "load_pybullet", "(", "KINECT_URDF", ",", "fixed_base", "=", "True", ")", "\n", "set_pose", "(", "kinect", ",", "pose", ")", "\n", "set_color", "(", "kinect", ",", "BLACK", ")", "\n", "self", ".", "add", "(", "name", ",", "kinect", ")", "\n", "", "self", ".", "cameras", "[", "name", "]", "=", "Camera", "(", "cone", ",", "camera_matrix", ",", "max_depth", ")", "\n", "if", "DEBUG", ":", "\n", "            ", "draw_pose", "(", "pose", ")", "\n", "", "step_simulation", "(", ")", "\n", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_supporting": [[489, 505], ["world.World.get_body", "len", "print", "pybullet_tools.utils.is_center_on_aabb", "len", "src.utils.compute_surface_aabb"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.compute_surface_aabb"], ["", "def", "get_supporting", "(", "self", ",", "obj_name", ")", ":", "\n", "# is_placed_on_aabb | is_center_on_aabb", "\n", "# Only want to generate stable placements, but can operate on initially unstable ones", "\n", "# TODO: could filter orientation as well", "\n", "        ", "body", "=", "self", ".", "get_body", "(", "obj_name", ")", "\n", "supporting", "=", "{", "surface", "for", "surface", "in", "ALL_SURFACES", "if", "is_center_on_aabb", "(", "\n", "body", ",", "compute_surface_aabb", "(", "self", ",", "surface", ")", ",", "\n", "above_epsilon", "=", "5e-2", ",", "below_epsilon", "=", "5e-2", ")", "}", "\n", "if", "(", "'range'", "in", "supporting", ")", "and", "(", "len", "(", "supporting", ")", "==", "2", ")", ":", "\n", "# TODO: small hack for now", "\n", "            ", "supporting", "-=", "{", "'range'", "}", "\n", "", "if", "len", "(", "supporting", ")", "!=", "1", ":", "\n", "            ", "print", "(", "'{} is not supported by a single surface ({})!'", ".", "format", "(", "obj_name", ",", "supporting", ")", ")", "\n", "return", "None", "\n", "", "[", "surface_name", "]", "=", "supporting", "\n", "return", "surface_name", "\n", "", "def", "fix_pose", "(", "self", ",", "name", ",", "pose", "=", "None", ",", "fraction", "=", "0.5", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.fix_pose": [[505, 530], ["world.World.get_body", "pybullet_tools.utils.point_from_pose", "pybullet_tools.utils.euler_from_quat", "pybullet_tools.utils.quat_from_euler", "pybullet_tools.utils.set_quat", "world.World.get_supporting", "src.utils.compute_surface_aabb", "pybullet_tools.utils.Point", "pybullet_tools.utils.set_point", "print", "pybullet_tools.utils.get_pose", "pybullet_tools.utils.set_pose", "pybullet_tools.utils.quat_from_pose", "pybullet_tools.utils.Euler", "pybullet_tools.utils.Point", "pybullet_tools.utils.stable_z_on_aabb"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_supporting", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.compute_surface_aabb"], ["", "def", "fix_pose", "(", "self", ",", "name", ",", "pose", "=", "None", ",", "fraction", "=", "0.5", ")", ":", "\n", "        ", "body", "=", "self", ".", "get_body", "(", "name", ")", "\n", "if", "pose", "is", "None", ":", "\n", "            ", "pose", "=", "get_pose", "(", "body", ")", "\n", "", "else", ":", "\n", "            ", "set_pose", "(", "body", ",", "pose", ")", "\n", "# TODO: can also drop in simulation", "\n", "", "x", ",", "y", ",", "z", "=", "point_from_pose", "(", "pose", ")", "\n", "roll", ",", "pitch", ",", "yaw", "=", "euler_from_quat", "(", "quat_from_pose", "(", "pose", ")", ")", "\n", "quat", "=", "quat_from_euler", "(", "Euler", "(", "yaw", "=", "yaw", ")", ")", "\n", "set_quat", "(", "body", ",", "quat", ")", "\n", "surface_name", "=", "self", ".", "get_supporting", "(", "name", ")", "\n", "if", "surface_name", "is", "None", ":", "\n", "            ", "return", "None", ",", "None", "\n", "", "if", "fraction", "==", "0", ":", "\n", "            ", "new_pose", "=", "(", "Point", "(", "x", ",", "y", ",", "z", ")", ",", "quat", ")", "\n", "return", "new_pose", ",", "surface_name", "\n", "", "surface_aabb", "=", "compute_surface_aabb", "(", "self", ",", "surface_name", ")", "\n", "new_z", "=", "(", "1", "-", "fraction", ")", "*", "z", "+", "fraction", "*", "stable_z_on_aabb", "(", "body", ",", "surface_aabb", ")", "\n", "point", "=", "Point", "(", "x", ",", "y", ",", "new_z", ")", "\n", "set_point", "(", "body", ",", "point", ")", "\n", "print", "(", "'{} error: roll={:.3f}, pitch={:.3f}, z-delta: {:.3f}'", ".", "format", "(", "\n", "name", ",", "roll", ",", "pitch", ",", "new_z", "-", "z", ")", ")", "\n", "new_pose", "=", "(", "point", ",", "quat", ")", "\n", "return", "new_pose", ",", "surface_name", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.add": [[539, 545], ["pybullet_tools.utils.add_body_name"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "name", ",", "body", ")", ":", "\n", "        ", "assert", "name", "not", "in", "self", ".", "body_from_name", "\n", "if", "DEBUG", ":", "\n", "            ", "add_body_name", "(", "body", ",", "name", ")", "\n", "", "self", ".", "body_from_name", "[", "name", "]", "=", "body", "\n", "return", "name", "\n", "", "def", "add_body", "(", "self", ",", "name", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.add_body": [[545, 554], ["src.utils.type_from_name", "world.World.names_from_type.setdefault().append", "src.utils.get_obj_path", "print", "pybullet_tools.utils.load_pybullet", "world.World.add", "world.World.names_from_type.setdefault"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.type_from_name", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_obj_path", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.add"], ["", "def", "add_body", "(", "self", ",", "name", ",", "**", "kwargs", ")", ":", "\n", "        ", "obj_type", "=", "type_from_name", "(", "name", ")", "\n", "self", ".", "names_from_type", ".", "setdefault", "(", "obj_type", ",", "[", "]", ")", ".", "append", "(", "name", ")", "\n", "path", "=", "get_obj_path", "(", "obj_type", ")", "\n", "#self.path_from_name[name] = path", "\n", "print", "(", "'Loading'", ",", "path", ")", "\n", "body", "=", "load_pybullet", "(", "path", ",", "**", "kwargs", ")", "\n", "assert", "body", "is", "not", "None", "\n", "self", ".", "add", "(", "name", ",", "body", ")", "\n", "", "def", "get_body", "(", "self", ",", "name", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body": [[554, 556], ["None"], "methods", ["None"], ["", "def", "get_body", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "body_from_name", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_name": [[562, 565], ["inverse.get", "world.World.body_from_name.items"], "methods", ["None"], ["", "def", "get_name", "(", "self", ",", "name", ")", ":", "\n", "        ", "inverse", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "body_from_name", ".", "items", "(", ")", "}", "\n", "return", "inverse", ".", "get", "(", "name", ",", "None", ")", "\n", "", "def", "remove_body", "(", "self", ",", "name", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.remove_body": [[565, 569], ["world.World.get_body", "pybullet_tools.utils.remove_body"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.remove_body"], ["", "def", "remove_body", "(", "self", ",", "name", ")", ":", "\n", "        ", "body", "=", "self", ".", "get_body", "(", "name", ")", "\n", "remove_body", "(", "body", ")", "\n", "del", "self", ".", "body_from_name", "[", "name", "]", "\n", "", "def", "reset", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.reset": [[569, 577], ["world.World.cameras.values", "list", "pybullet_tools.utils.remove_body", "world.World.remove_body"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.remove_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.remove_body"], ["", "def", "reset", "(", "self", ")", ":", "\n", "#remove_all_debug()", "\n", "        ", "for", "camera", "in", "self", ".", "cameras", ".", "values", "(", ")", ":", "\n", "            ", "remove_body", "(", "camera", ".", "body", ")", "\n", "#remove_body(camera.kinect)", "\n", "", "self", ".", "cameras", "=", "{", "}", "\n", "for", "name", "in", "list", "(", "self", ".", "body_from_name", ")", ":", "\n", "            ", "self", ".", "remove_body", "(", "name", ")", "\n", "", "", "def", "destroy", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.destroy": [[577, 580], ["pybullet_tools.utils.reset_simulation", "pybullet_tools.utils.disconnect"], "methods", ["None"], ["", "", "def", "destroy", "(", "self", ")", ":", "\n", "        ", "reset_simulation", "(", ")", "\n", "disconnect", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.policy.random_restart": [[25, 55], ["time.time", "pddlstream.language.constants.Certificate", "pybullet_tools.utils.elapsed_time", "src.problem.get_streams", "pddlstream.language.constants.PDDLProblem", "min", "src.planner.solve_pddlstream", "traceback.print_exc", "traceback.print_exc", "pybullet_tools.utils.elapsed_time"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.problem.get_streams", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.planner.solve_pddlstream"], ["def", "random_restart", "(", "belief", ",", "args", ",", "problem", ",", "max_time", "=", "INF", ",", "max_iterations", "=", "INF", ",", "\n", "max_planner_time", "=", "INF", ",", "**", "kwargs", ")", ":", "\n", "    ", "domain_pddl", ",", "constant_map", ",", "_", ",", "_", ",", "init", ",", "goal_formula", "=", "problem", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "task", "=", "belief", ".", "task", "\n", "world", "=", "task", ".", "world", "\n", "iterations", "=", "0", "\n", "while", "(", "elapsed_time", "(", "start_time", ")", "<", "max_time", ")", "and", "(", "iterations", "<", "max_iterations", ")", ":", "\n", "        ", "iterations", "+=", "1", "\n", "try", ":", "\n", "            ", "stream_pddl", ",", "stream_map", "=", "get_streams", "(", "world", ",", "teleport_base", "=", "task", ".", "teleport_base", ",", "\n", "collisions", "=", "not", "args", ".", "cfree", ",", "teleport", "=", "args", ".", "teleport", ")", "\n", "problem", "=", "PDDLProblem", "(", "domain_pddl", ",", "constant_map", ",", "stream_pddl", ",", "stream_map", ",", "init", ",", "goal_formula", ")", "\n", "remaining_time", "=", "min", "(", "max_time", "-", "elapsed_time", "(", "start_time", ")", ",", "max_planner_time", ")", "\n", "plan", ",", "plan_cost", ",", "certificate", "=", "solve_pddlstream", "(", "belief", ",", "problem", ",", "args", ",", "max_time", "=", "remaining_time", ",", "**", "kwargs", ")", "\n", "if", "plan", "is", "not", "None", ":", "\n", "                ", "return", "plan", ",", "plan_cost", ",", "certificate", "\n", "", "", "except", "KeyboardInterrupt", "as", "e", ":", "\n", "            ", "raise", "e", "\n", "", "except", "MemoryError", "as", "e", ":", "\n", "            ", "traceback", ".", "print_exc", "(", ")", "\n", "if", "not", "REPLAN_FAILURES", ":", "\n", "                ", "raise", "e", "\n", "", "break", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "traceback", ".", "print_exc", "(", ")", "\n", "if", "not", "REPLAN_FAILURES", ":", "\n", "                ", "raise", "e", "\n", "# FastDownward translator runs out of memory", "\n", "", "", "", "return", "None", ",", "INF", ",", "Certificate", "(", "all_facts", "=", "[", "]", ",", "preimage_facts", "=", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.policy.run_policy": [[56, 192], ["task.create_belief.liquid.update", "print", "time.time", "print", "set", "src.belief.create_observable_belief", "task.create_belief", "src.belief.create_observable_pose_dist", "pybullet_tools.utils.elapsed_time", "pybullet_tools.utils.print_separator", "observation_fn", "print", "task.create_belief.update", "print", "time.time", "pybullet_tools.utils.elapsed_time", "pybullet_tools.utils.print_separator", "src.planner.extract_plan_prefix", "print", "task.create_belief.check_consistent", "enumerate", "print", "print", "pybullet_tools.utils.elapsed_time", "pddlstream.utils.get_peak_memory_in_kb", "pddlstream.utils.str_from_object", "task.create_belief.draw", "pybullet_tools.utils.print_separator", "print", "print", "src.problem.pdddlstream_from_problem", "min", "policy.random_restart", "src.problem.pdddlstream_from_problem", "pybullet_tools.utils.print_separator", "min", "policy.random_restart", "print", "len", "src.planner.commands_from_plan", "len", "print", "sum", "src.replan.get_plan_postfix", "src.replan.make_wild_skeleton", "src.replan.reuse_facts", "sorted", "print", "transition_fn", "src.belief.transition_belief_update", "task.create_belief.check_consistent", "pybullet_tools.utils.elapsed_time", "pybullet_tools.utils.elapsed_time"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.update", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.create_observable_belief", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.Task.create_belief", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.create_observable_pose_dist", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.update", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.planner.extract_plan_prefix", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.check_consistent", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.draw", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.problem.pdddlstream_from_problem", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.policy.random_restart", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.problem.pdddlstream_from_problem", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.policy.random_restart", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.planner.commands_from_plan", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.replan.get_plan_postfix", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.replan.make_wild_skeleton", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.replan.reuse_facts", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.transition_belief_update", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.check_consistent"], ["", "def", "run_policy", "(", "task", ",", "args", ",", "observation_fn", ",", "transition_fn", ",", "constrain", "=", "True", ",", "defer", "=", "True", ",", "# serialize=True,", "\n", "max_time", "=", "10", "*", "60", ",", "max_constrained_time", "=", "1.5", "*", "60", ",", "max_unconstrained_time", "=", "INF", ")", ":", "\n", "    ", "replan_actions", "=", "OBSERVATION_ACTIONS", "if", "args", ".", "deterministic", "else", "STOCHASTIC_ACTIONS", "\n", "defer_actions", "=", "replan_actions", "if", "defer", "else", "set", "(", ")", "\n", "world", "=", "task", ".", "world", "\n", "if", "args", ".", "observable", ":", "\n", "# TODO: problematic if not observable", "\n", "        ", "belief", "=", "create_observable_belief", "(", "world", ")", "# Fast", "\n", "", "else", ":", "\n", "        ", "belief", "=", "task", ".", "create_belief", "(", ")", "\n", "", "if", "BOWL", "in", "task", ".", "objects", ":", "# TODO: hack for bowl", "\n", "        ", "belief", ".", "pose_dists", "[", "BOWL", "]", "=", "create_observable_pose_dist", "(", "world", ",", "BOWL", ")", "\n", "", "belief", ".", "liquid", ".", "update", "(", "task", ".", "init_liquid", ")", "\n", "print", "(", "'Prior:'", ",", "belief", ")", "\n", "\n", "previous_facts", "=", "[", "]", "\n", "previous_skeleton", "=", "None", "\n", "total_start_time", "=", "time", ".", "time", "(", ")", "\n", "plan_time", "=", "0", "\n", "achieved_goal", "=", "False", "\n", "num_iterations", "=", "num_constrained", "=", "num_unconstrained", "=", "num_successes", "=", "0", "\n", "num_actions", "=", "num_commands", "=", "total_cost", "=", "0", "\n", "while", "elapsed_time", "(", "total_start_time", ")", "<", "max_time", ":", "\n", "        ", "print_separator", "(", "n", "=", "50", ")", "\n", "num_iterations", "+=", "1", "\n", "# TODO: could allow this to be an arbitrary belief transformation", "\n", "observation", "=", "observation_fn", "(", "belief", ")", "\n", "print", "(", "'Observation:'", ",", "observation", ")", "\n", "belief", ".", "update", "(", "observation", ")", "\n", "print", "(", "'Belief:'", ",", "belief", ")", "\n", "if", "DEBUG", ":", "\n", "            ", "belief", ".", "draw", "(", ")", "\n", "\n", "#wait_for_user('Plan?')", "\n", "", "fixed_base", "=", "UNCONSTRAINED_FIXED_BASE", "or", "not", "task", ".", "movable_base", "or", "not", "constrain", "\n", "plan_start_time", "=", "time", ".", "time", "(", ")", "\n", "plan", ",", "plan_cost", "=", "None", ",", "INF", "\n", "if", "constrain", "and", "(", "previous_skeleton", "is", "not", "None", ")", ":", "\n", "# TODO: could constrain by comparing to the previous plan cost", "\n", "            ", "num_constrained", "+=", "1", "\n", "print_separator", "(", "n", "=", "25", ")", "\n", "print", "(", "'Skeleton:'", ",", "previous_skeleton", ")", "\n", "print", "(", "'Reused facts:'", ",", "sorted", "(", "previous_facts", ",", "key", "=", "lambda", "f", ":", "f", "[", "0", "]", ")", ")", "\n", "problem", "=", "pdddlstream_from_problem", "(", "belief", ",", "additional_init", "=", "previous_facts", ",", "\n", "collisions", "=", "not", "args", ".", "cfree", ",", "teleport", "=", "args", ".", "teleport", ")", "\n", "planning_time", "=", "min", "(", "max_time", "-", "elapsed_time", "(", "total_start_time", ")", ",", "max_constrained_time", ")", "#, args.max_time)", "\n", "plan", ",", "plan_cost", ",", "certificate", "=", "random_restart", "(", "belief", ",", "args", ",", "problem", ",", "max_time", "=", "planning_time", ",", "max_iterations", "=", "1", ",", "\n", "skeleton", "=", "previous_skeleton", ",", "replan_actions", "=", "defer_actions", ")", "\n", "if", "plan", "is", "None", ":", "\n", "                ", "print", "(", "'Failed to solve with plan constraints'", ")", "\n", "#wait_for_user()", "\n", "#elif not fixed_base:", "\n", "#    num_unconstrained += 1", "\n", "#    problem = pdddlstream_from_problem(belief, additional_init=previous_facts,", "\n", "#                                       collisions=not args.cfree, teleport=args.teleport)", "\n", "#    print_separator(n=25)", "\n", "#    planning_time = min(max_time - elapsed_time(total_start_time)) # , args.max_time)", "\n", "#    plan, plan_cost, certificate = solve_pddlstream(belief, problem, args, max_time=planning_time,", "\n", "#                                                    replan_actions=defer_actions)", "\n", "#    if plan is None:", "\n", "#        print('Failed to solve when allowing fixed base')", "\n", "\n", "", "", "if", "plan", "is", "None", ":", "\n", "# TODO: might be helpful to add additional facts here in the future", "\n", "            ", "num_unconstrained", "+=", "1", "# additional_init=previous_facts,", "\n", "problem", "=", "pdddlstream_from_problem", "(", "belief", ",", "fixed_base", "=", "fixed_base", ",", "\n", "collisions", "=", "not", "args", ".", "cfree", ",", "teleport", "=", "args", ".", "teleport", ")", "\n", "print_separator", "(", "n", "=", "25", ")", "\n", "planning_time", "=", "min", "(", "max_time", "-", "elapsed_time", "(", "total_start_time", ")", ",", "max_unconstrained_time", ")", "#, args.max_time)", "\n", "plan", ",", "plan_cost", ",", "certificate", "=", "random_restart", "(", "belief", ",", "args", ",", "problem", ",", "max_time", "=", "planning_time", ",", "\n", "max_planner_time", "=", "MAX_RESTART_TIME", ",", "\n", "max_iterations", "=", "REPLAN_ITERATIONS", ",", "\n", "max_cost", "=", "plan_cost", ",", "replan_actions", "=", "defer_actions", ")", "\n", "\n", "", "plan_time", "+=", "elapsed_time", "(", "plan_start_time", ")", "\n", "#wait_for_duration(elapsed_time(plan_start_time)) # Mocks the real planning time", "\n", "if", "plan", "is", "None", ":", "\n", "            ", "break", "\n", "#print('Preimage:', sorted(certificate.preimage_facts, key=lambda f: f[0]))", "\n", "", "if", "not", "plan", ":", "\n", "            ", "achieved_goal", "=", "True", "\n", "break", "\n", "", "print_separator", "(", "n", "=", "25", ")", "\n", "plan_prefix", "=", "extract_plan_prefix", "(", "plan", ",", "replan_actions", "=", "replan_actions", ")", "\n", "print", "(", "'Prefix:'", ",", "plan_prefix", ")", "\n", "# sequences = [plan_prefix]", "\n", "sequences", "=", "[", "[", "action", "]", "for", "action", "in", "plan_prefix", "]", "\n", "\n", "success", "=", "belief", ".", "check_consistent", "(", ")", "\n", "for", "i", ",", "sequence", "in", "enumerate", "(", "sequences", ")", ":", "\n", "            ", "if", "not", "success", ":", "\n", "                ", "break", "\n", "", "print", "(", "i", ",", "sequence", ")", "\n", "num_actions", "+=", "len", "(", "sequence", ")", "\n", "commands", "=", "commands_from_plan", "(", "world", ",", "sequence", ")", "\n", "num_commands", "+=", "len", "(", "commands", ")", "\n", "print", "(", "'Commands:'", ",", "commands", ")", "\n", "success", "&=", "transition_fn", "(", "belief", ",", "commands", ")", "and", "transition_belief_update", "(", "belief", ",", "sequence", ")", "and", "belief", ".", "check_consistent", "(", ")", "\n", "total_cost", "+=", "sum", "(", "command", ".", "cost", "for", "command", "in", "commands", ")", "\n", "", "num_successes", "+=", "success", "\n", "\n", "# TODO: store history of stream evaluations", "\n", "if", "success", "and", "constrain", ":", "\n", "            ", "plan_postfix", "=", "get_plan_postfix", "(", "plan", ",", "plan_prefix", ")", "\n", "# TODO: exit if plan_postfix is empty?", "\n", "# TODO: make_exact_skeleton still has as bug in it", "\n", "previous_skeleton", "=", "make_wild_skeleton", "(", "world", ",", "plan_postfix", ")", "\n", "#previous_skeleton = make_exact_skeleton(world, plan_postfix)  # make_exact_skeleton | make_wild_skeleton", "\n", "previous_facts", "=", "reuse_facts", "(", "problem", ",", "certificate", ",", "previous_skeleton", ")", "# []", "\n", "", "else", ":", "\n", "            ", "previous_skeleton", "=", "None", "\n", "previous_facts", "=", "[", "]", "\n", "\n", "", "", "if", "achieved_goal", ":", "\n", "        ", "print", "(", "'Success!'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Failure!'", ")", "\n", "# TODO: timed out flag", "\n", "# TODO: store current and peak memory usage", "\n", "", "data", "=", "{", "\n", "'achieved_goal'", ":", "achieved_goal", ",", "\n", "'total_time'", ":", "elapsed_time", "(", "total_start_time", ")", ",", "\n", "'plan_time'", ":", "plan_time", ",", "\n", "'num_iterations'", ":", "num_iterations", ",", "\n", "'num_constrained'", ":", "num_constrained", ",", "\n", "'num_unconstrained'", ":", "num_unconstrained", ",", "\n", "'num_successes'", ":", "num_successes", ",", "\n", "'num_actions'", ":", "num_actions", ",", "\n", "'num_commands'", ":", "num_commands", ",", "\n", "'peak_memory'", ":", "get_peak_memory_in_kb", "(", ")", ",", "\n", "'total_cost'", ":", "total_cost", ",", "\n", "}", "\n", "print", "(", "'Data:'", ",", "str_from_object", "(", "data", ")", ")", "\n", "return", "data", "\n", "", ""]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.__init__": [[38, 50], ["inference.PoseDist.dist.support", "inference.PoseDist.dist.project", "inference.PoseDist.poses_from_surface.setdefault().append", "inference.PoseDist.poses_from_surface.setdefault"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SurfaceDist.support", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SurfaceDist.project"], ["    ", "def", "__init__", "(", "self", ",", "world", ",", "name", ",", "dist", ",", "weight", "=", "1.0", ",", "bandwidth", "=", "0.01", ")", ":", "\n", "        ", "self", ".", "world", "=", "world", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "dist", "=", "dist", "\n", "self", ".", "poses_from_surface", "=", "{", "}", "\n", "for", "pose", "in", "self", ".", "dist", ".", "support", "(", ")", ":", "\n", "            ", "self", ".", "poses_from_surface", ".", "setdefault", "(", "pose", ".", "support", ",", "[", "]", ")", ".", "append", "(", "pose", ")", "\n", "", "self", ".", "surface_dist", "=", "self", ".", "dist", ".", "project", "(", "lambda", "p", ":", "p", ".", "support", ")", "\n", "self", ".", "density_from_surface", "=", "{", "}", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "bandwidth", "=", "bandwidth", "\n", "self", ".", "handles", "=", "[", "]", "\n", "", "def", "is_localized", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.is_localized": [[50, 52], ["len", "inference.PoseDist.dist.support"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SurfaceDist.support"], ["", "def", "is_localized", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dist", ".", "support", "(", ")", ")", "==", "1", "\n", "", "def", "surface_prob", "(", "self", ",", "surface", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.surface_prob": [[52, 54], ["inference.PoseDist.surface_dist.prob"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SE2Distribution.prob"], ["", "def", "surface_prob", "(", "self", ",", "surface", ")", ":", "\n", "        ", "return", "self", ".", "weight", "*", "self", ".", "surface_dist", ".", "prob", "(", "surface", ")", "\n", "", "def", "discrete_prob", "(", "self", ",", "pose", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.discrete_prob": [[54, 56], ["inference.PoseDist.dist.prob"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SE2Distribution.prob"], ["", "def", "discrete_prob", "(", "self", ",", "pose", ")", ":", "\n", "        ", "return", "self", ".", "weight", "*", "self", ".", "dist", ".", "prob", "(", "pose", ")", "\n", "", "def", "prob", "(", "self", ",", "pose", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.prob": [[56, 63], ["inference.PoseDist.get_density", "inference.PoseDist.pose2d_from_pose", "inference.PoseDist.score_samples", "numpy.exp", "inference.PoseDist.surface_prob"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.get_density", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.pose2d_from_pose", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.surface_prob"], ["", "def", "prob", "(", "self", ",", "pose", ")", ":", "\n", "        ", "support", "=", "pose", ".", "support", "\n", "density", "=", "self", ".", "get_density", "(", "support", ")", "\n", "pose2d", "=", "self", ".", "pose2d_from_pose", "(", "pose", ")", "\n", "[", "score", "]", "=", "density", ".", "score_samples", "(", "[", "pose2d", "]", ")", "\n", "prob", "=", "np", ".", "exp", "(", "-", "score", ")", "\n", "return", "self", ".", "surface_prob", "(", "support", ")", "*", "prob", "\n", "#def support(self):", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.pose2d_from_pose": [[66, 68], ["pybullet_tools.utils.base_values_from_pose", "pose.get_reference_from_body"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.get_reference_from_body"], ["", "def", "pose2d_from_pose", "(", "self", ",", "pose", ")", ":", "\n", "        ", "return", "base_values_from_pose", "(", "pose", ".", "get_reference_from_body", "(", ")", ")", "[", ":", "DIM", "]", "\n", "", "def", "pose_from_pose2d", "(", "self", ",", "pose2d", ",", "surface", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.pose_from_pose2d": [[68, 84], ["inference.PoseDist.world.get_body", "src.utils.compute_surface_aabb", "src.database.get_surface_reference_pose", "pybullet_tools.utils.Point", "pybullet_tools.utils.Pose", "pybullet_tools.utils.set_pose", "src.utils.create_relative_pose", "numpy.random.uniform", "pybullet_tools.utils.Euler", "pybullet_tools.utils.multiply", "pybullet_tools.utils.stable_z_on_aabb", "pybullet_tools.utils.point_from_pose"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.compute_surface_aabb", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.get_surface_reference_pose", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.create_relative_pose"], ["", "def", "pose_from_pose2d", "(", "self", ",", "pose2d", ",", "surface", ")", ":", "\n", "#assert surface in self.poses_from_surface", "\n", "#reference_pose = self.poses_from_surface[surface][0]", "\n", "        ", "body", "=", "self", ".", "world", ".", "get_body", "(", "self", ".", "name", ")", "\n", "surface_aabb", "=", "compute_surface_aabb", "(", "self", ".", "world", ",", "surface", ")", "\n", "world_from_surface", "=", "get_surface_reference_pose", "(", "self", ".", "world", ".", "kitchen", ",", "surface", ")", "\n", "if", "DIM", "==", "2", ":", "\n", "            ", "x", ",", "y", "=", "pose2d", "[", ":", "DIM", "]", "\n", "yaw", "=", "np", ".", "random", ".", "uniform", "(", "*", "CIRCULAR_LIMITS", ")", "\n", "", "else", ":", "\n", "            ", "x", ",", "y", ",", "yaw", "=", "pose2d", "\n", "", "z", "=", "stable_z_on_aabb", "(", "body", ",", "surface_aabb", ")", "+", "Z_EPSILON", "-", "point_from_pose", "(", "world_from_surface", ")", "[", "2", "]", "\n", "point", "=", "Point", "(", "x", ",", "y", ",", "z", ")", "\n", "surface_from_body", "=", "Pose", "(", "point", ",", "Euler", "(", "yaw", "=", "yaw", ")", ")", "\n", "set_pose", "(", "body", ",", "multiply", "(", "world_from_surface", ",", "surface_from_body", ")", ")", "\n", "return", "create_relative_pose", "(", "self", ".", "world", ",", "self", ".", "name", ",", "surface", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.get_density": [[85, 123], ["zip", "numpy.array", "sklearn.neighbors.KernelDensity", "sklearn.neighbors.KernelDensity.fit", "numpy.array", "inference.PoseDist.pose2d_from_pose", "inference.PoseDist.dist.prob"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.pose2d_from_pose", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SE2Distribution.prob"], ["", "def", "get_density", "(", "self", ",", "surface", ")", ":", "\n", "        ", "if", "surface", "in", "self", ".", "density_from_surface", ":", "\n", "            ", "return", "self", ".", "density_from_surface", "[", "surface", "]", "\n", "", "if", "surface", "not", "in", "self", ".", "poses_from_surface", ":", "\n", "            ", "return", "None", "\n", "", "points", ",", "weights", "=", "zip", "(", "*", "[", "(", "self", ".", "pose2d_from_pose", "(", "pose", ")", ",", "self", ".", "dist", ".", "prob", "(", "pose", ")", ")", "\n", "for", "pose", "in", "self", ".", "poses_from_surface", "[", "surface", "]", "]", ")", "\n", "#print(weights)", "\n", "# from sklearn.mixture import GaussianMixture", "\n", "# pip2 install -U --no-deps scikit-learn=0.20", "\n", "# https://scikit-learn.org/stable/modules/density.html", "\n", "# https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.gaussian_kde.html#scipy.stats.gaussian_kde", "\n", "# https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.DistanceMetric.html#sklearn.neighbors.DistanceMetric", "\n", "# KernelDensity kernel: ['gaussian', 'tophat', 'epanechnikov', 'exponential', 'linear', 'cosine']", "\n", "# KDTree.valid_metrics: ['chebyshev', 'euclidean', 'cityblock', 'manhattan', 'infinity', 'minkowski', 'p', 'l2', 'l1']", "\n", "# BallTree.valid_metrics: ['chebyshev', 'sokalmichener', 'canberra', 'haversine', 'rogerstanimoto', 'matching', 'dice', 'euclidean',", "\n", "# 'braycurtis', 'russellrao', 'cityblock', 'manhattan', 'infinity', 'jaccard', 'seuclidean', 'sokalsneath',", "\n", "# 'kulsinski', 'minkowski', 'mahalanobis', 'p', 'l2', 'hamming', 'l1', 'wminkowski', 'pyfunc']", "\n", "yaw_weight", "=", "0.01", "*", "np", ".", "pi", "\n", "metric_weights", "=", "np", ".", "array", "(", "[", "1.", ",", "1.", ",", "yaw_weight", "]", ")", "# TODO: wrap around and symmetry?", "\n", "density", "=", "KernelDensity", "(", "bandwidth", "=", "self", ".", "bandwidth", ",", "algorithm", "=", "'auto'", ",", "\n", "kernel", "=", "'gaussian'", ",", "metric", "=", "\"wminkowski\"", ",", "atol", "=", "0", ",", "rtol", "=", "0", ",", "\n", "breadth_first", "=", "True", ",", "leaf_size", "=", "40", ",", "\n", "metric_params", "=", "{", "'p'", ":", "2", ",", "'w'", ":", "metric_weights", "[", ":", "DIM", "]", "}", ")", "\n", "density", ".", "fit", "(", "X", "=", "points", ",", "sample_weight", "=", "1", "*", "np", ".", "array", "(", "weights", ")", ")", "# Scaling doesn't seem to affect", "\n", "self", ".", "density_from_surface", "[", "surface", "]", "=", "density", "\n", "#scores = density.score_samples(points)", "\n", "#probabilities = np.exp(-scores)", "\n", "#print('Individual:', probabilities)", "\n", "#print(np.sum(probabilities))", "\n", "#total_score = density.score(points)", "\n", "#total_probability = np.exp(-total_score)", "\n", "#print('Total:', total_probability) # total log probability density", "\n", "#print(total_probability)", "\n", "# TODO: integrate to obtain a probability mass", "\n", "# from scipy.stats.kde import gaussian_kde", "\n", "# density = gaussian_kde(points, weights=weights) # No weights in my scipy version", "\n", "return", "density", "\n", "", "def", "get_nearby", "(", "self", ",", "target_pose", ",", "radius", "=", "NEARBY_RADIUS", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.get_nearby": [[123, 139], ["numpy.array", "pybullet_tools.utils.draw_circle", "set", "inference.PoseDist.dist.support", "sum", "Neighborhood", "pybullet_tools.utils.point_from_pose", "pybullet_tools.utils.point_from_pose", "map", "target_pose.get_reference_from_body", "pose.get_reference_from_body", "numpy.linalg.norm", "set.add"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SurfaceDist.support", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.get_reference_from_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.get_reference_from_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.add"], ["", "def", "get_nearby", "(", "self", ",", "target_pose", ",", "radius", "=", "NEARBY_RADIUS", ")", ":", "\n", "# TODO: could instead use the probability density", "\n", "        ", "target_point", "=", "np", ".", "array", "(", "point_from_pose", "(", "target_pose", ".", "get_reference_from_body", "(", ")", ")", ")", "\n", "draw_circle", "(", "target_point", ",", "radius", ",", "parent", "=", "target_pose", ".", "reference_body", ",", "\n", "parent_link", "=", "target_pose", ".", "reference_link", ")", "\n", "poses", "=", "set", "(", ")", "\n", "for", "pose", "in", "self", ".", "dist", ".", "support", "(", ")", ":", "\n", "            ", "if", "target_pose", ".", "support", "!=", "pose", ".", "support", ":", "\n", "                ", "continue", "\n", "", "point", "=", "point_from_pose", "(", "pose", ".", "get_reference_from_body", "(", ")", ")", "\n", "delta", "=", "target_point", "-", "point", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "delta", "[", ":", "2", "]", ")", "<", "radius", ":", "\n", "                ", "poses", ".", "add", "(", "pose", ")", "\n", "", "", "prob", "=", "sum", "(", "map", "(", "self", ".", "discrete_prob", ",", "poses", ")", ")", "\n", "#poses = {target_pose}", "\n", "return", "Neighborhood", "(", "poses", ",", "prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.sample_surface_pose": [[140, 155], ["inference.PoseDist.get_density", "inference.PoseDist.world.get_body", "inference.PoseDist.sample", "inference.PoseDist.pose_from_pose2d", "inference.PoseDist.assign", "src.utils.test_supported"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.get_density", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.sample", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.pose_from_pose2d", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.test_supported"], ["", "def", "sample_surface_pose", "(", "self", ",", "surface", ")", ":", "# TODO: timeout", "\n", "        ", "density", "=", "self", ".", "get_density", "(", "surface", ")", "\n", "if", "density", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "assert", "surface", "is", "not", "None", "\n", "body", "=", "self", ".", "world", ".", "get_body", "(", "self", ".", "name", ")", "\n", "while", "True", ":", "\n", "            ", "[", "sample", "]", "=", "density", ".", "sample", "(", "n_samples", "=", "1", ")", "\n", "#[score] = density.score_samples([sample])", "\n", "#prob = np.exp(-score)", "\n", "pose", "=", "self", ".", "pose_from_pose2d", "(", "sample", ",", "surface", ")", "\n", "pose", ".", "assign", "(", ")", "\n", "# TODO: additional obstacles", "\n", "if", "test_supported", "(", "self", ".", "world", ",", "body", ",", "surface", ")", ":", "\n", "                ", "return", "pose", "# TODO: return prob?", "\n", "", "", "", "def", "sample_surface", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.sample_surface": [[155, 157], ["inference.PoseDist.surface_dist.sample"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.sample"], ["", "", "", "def", "sample_surface", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "surface_dist", ".", "sample", "(", ")", "\n", "", "def", "sample_discrete", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.sample_discrete": [[157, 159], ["inference.PoseDist.dist.sample"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.sample"], ["", "def", "sample_discrete", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dist", ".", "sample", "(", ")", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.sample": [[159, 161], ["inference.PoseDist.sample_surface_pose", "inference.PoseDist.sample_surface"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.sample_surface_pose", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.sample_surface"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sample_surface_pose", "(", "self", ".", "sample_surface", "(", ")", ")", "\n", "", "def", "resample", "(", "self", ",", "n", "=", "NUM_PARTICLES", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.resample": [[161, 168], ["examples.discrete_belief.dist.UniformDist", "inference.PoseDist.__class__", "len", "pybullet_tools.utils.LockRenderer", "inference.PoseDist.dist.support", "inference.PoseDist.sample", "range"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SurfaceDist.support", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.sample"], ["", "def", "resample", "(", "self", ",", "n", "=", "NUM_PARTICLES", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "dist", ".", "support", "(", ")", ")", "<=", "1", ":", "\n", "            ", "return", "self", "\n", "", "with", "LockRenderer", "(", ")", ":", "\n", "            ", "poses", "=", "[", "self", ".", "sample", "(", ")", "for", "_", "in", "range", "(", "n", ")", "]", "\n", "", "new_dist", "=", "UniformDist", "(", "poses", ")", "\n", "return", "self", ".", "__class__", "(", "self", ".", "world", ",", "self", ".", "name", ",", "new_dist", ")", "\n", "", "def", "copy", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.copy": [[168, 170], ["inference.PoseDist.__class__", "inference.PoseDist.dist.copy"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.State.copy"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", "(", "self", ".", "world", ",", "self", ".", "name", ",", "self", ".", "dist", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.decompose": [[171, 180], ["inference.PoseDist.surface_dist.support", "len", "inference.PoseDist.dist.support", "examples.discrete_belief.dist.DDist", "inference.PoseDist.surface_prob", "pose_dists.append", "inference.PoseDist.dist.support", "inference.SurfaceDist", "inference.PoseDist.discrete_prob"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SurfaceDist.support", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SurfaceDist.support", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.surface_prob", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SurfaceDist.support", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.discrete_prob"], ["", "def", "decompose", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "dist", ".", "support", "(", ")", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "dist", ".", "support", "(", ")", "\n", "", "pose_dists", "=", "[", "]", "\n", "for", "surface_name", "in", "self", ".", "surface_dist", ".", "support", "(", ")", ":", "\n", "            ", "dist", "=", "DDist", "(", "{", "pose", ":", "self", ".", "discrete_prob", "(", "pose", ")", "for", "pose", "in", "self", ".", "poses_from_surface", "[", "surface_name", "]", "}", ")", "\n", "weight", "=", "self", ".", "surface_prob", "(", "surface_name", ")", "\n", "pose_dists", ".", "append", "(", "SurfaceDist", "(", "self", ",", "weight", ",", "dist", ")", ")", "\n", "", "return", "pose_dists", "\n", "", "def", "update_dist", "(", "self", ",", "observation", ",", "obstacles", "=", "[", "]", ",", "verbose", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.update_dist": [[180, 208], ["inference.PoseDist.world.get_body", "inference.PoseDist.dist.support", "examples.discrete_belief.dist.DDist", "inference.PoseDist.world.cameras.keys", "pybullet_tools.utils.get_pose", "inference.compute_detectable", "inference.compute_visible", "inference.PoseDist.bayesian_belief_update", "examples.discrete_belief.dist.DeltaDist", "inference.PoseDist.dist.copy", "print", "set", "set", "inference.PoseDist.dist.prob", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SurfaceDist.support", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.compute_detectable", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.compute_visible", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.bayesian_belief_update", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.State.copy", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SE2Distribution.prob"], ["", "def", "update_dist", "(", "self", ",", "observation", ",", "obstacles", "=", "[", "]", ",", "verbose", "=", "False", ")", ":", "\n", "# cfree_dist.conditionOnVar(index=1, has_detection=True)", "\n", "        ", "if", "not", "BAYESIAN", "and", "(", "self", ".", "name", "in", "observation", ")", ":", "\n", "# TODO: convert into a Multivariate Gaussian", "\n", "            ", "[", "detected_pose", "]", "=", "observation", "[", "self", ".", "name", "]", "\n", "return", "DeltaDist", "(", "detected_pose", ")", "\n", "", "if", "not", "self", ".", "world", ".", "cameras", ":", "\n", "            ", "return", "self", ".", "dist", ".", "copy", "(", ")", "\n", "", "body", "=", "self", ".", "world", ".", "get_body", "(", "self", ".", "name", ")", "\n", "all_poses", "=", "self", ".", "dist", ".", "support", "(", ")", "\n", "cfree_poses", "=", "all_poses", "\n", "#cfree_poses = compute_cfree(body, all_poses, obstacles)", "\n", "#cfree_dist = self.cfree_dist", "\n", "cfree_dist", "=", "DDist", "(", "{", "pose", ":", "self", ".", "dist", ".", "prob", "(", "pose", ")", "for", "pose", "in", "cfree_poses", "}", ")", "\n", "# TODO: do these updates simultaneously for each object", "\n", "# TODO: check all camera poses", "\n", "[", "camera", "]", "=", "self", ".", "world", ".", "cameras", ".", "keys", "(", ")", "\n", "info", "=", "self", ".", "world", ".", "cameras", "[", "camera", "]", "\n", "camera_pose", "=", "get_pose", "(", "info", ".", "body", ")", "\n", "detectable_poses", "=", "compute_detectable", "(", "cfree_poses", ",", "camera_pose", ")", "\n", "visible_poses", "=", "compute_visible", "(", "body", ",", "detectable_poses", ",", "camera_pose", ",", "draw", "=", "False", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'Total: {} | CFree: {} | Detectable: {} | Visible: {}'", ".", "format", "(", "\n", "len", "(", "all_poses", ")", ",", "len", "(", "cfree_poses", ")", ",", "len", "(", "detectable_poses", ")", ",", "len", "(", "visible_poses", ")", ")", ")", "\n", "", "assert", "set", "(", "visible_poses", ")", "<=", "set", "(", "detectable_poses", ")", "\n", "# obs_fn = get_observation_fn(surface)", "\n", "#wait_for_user()", "\n", "return", "self", ".", "bayesian_belief_update", "(", "cfree_dist", ",", "visible_poses", ",", "observation", ",", "verbose", "=", "verbose", ")", "\n", "", "def", "bayesian_belief_update", "(", "self", ",", "prior_dist", ",", "visible_poses", ",", "observation", ",", "verbose", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.bayesian_belief_update": [[208, 232], ["prior_dist.copy", "prior_dist.copy.obsUpdates", "inference.PoseDist.pose2d_from_pose", "print", "inference.get_detection_fn", "inference.get_registration_fn"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.State.copy", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.pose2d_from_pose", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.get_detection_fn", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.get_registration_fn"], ["", "def", "bayesian_belief_update", "(", "self", ",", "prior_dist", ",", "visible_poses", ",", "observation", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "has_detection", "=", "self", ".", "name", "in", "observation", "\n", "detected_surface", "=", "None", "\n", "pose_estimate_2d", "=", "None", "\n", "if", "has_detection", ":", "\n", "            ", "[", "detected_pose", "]", "=", "observation", "[", "self", ".", "name", "]", "\n", "detected_surface", "=", "detected_pose", ".", "support", "\n", "pose_estimate_2d", "=", "self", ".", "pose2d_from_pose", "(", "detected_pose", ")", "\n", "", "else", ":", "\n", "            ", "for", "pose", "in", "visible_poses", ":", "\n", "                ", "pose", ".", "observations", "+=", "1", "\n", "", "", "if", "verbose", ":", "\n", "            ", "print", "(", "'Detection: {} | Pose: {}'", ".", "format", "(", "has_detection", ",", "pose_estimate_2d", ")", ")", "\n", "# TODO: could use an UKF to propagate a GMM", "\n", "", "new_dist", "=", "prior_dist", ".", "copy", "(", ")", "\n", "# cfree_dist.obsUpdate(detection_fn, has_detection)", "\n", "new_dist", ".", "obsUpdates", "(", "[", "\n", "get_detection_fn", "(", "visible_poses", ")", ",", "\n", "get_registration_fn", "(", "visible_poses", ")", ",", "\n", "# ], [has_detection, pose_estimate_2d])", "\n", "]", ",", "[", "detected_surface", ",", "pose_estimate_2d", "]", ")", "\n", "# cfree_dist = bayesEvidence(cfree_dist, detection_fn, has_detection) # projects out b and computes joint", "\n", "# joint_dist = JDist(cfree_dist, detection_fn, registration_fn)", "\n", "return", "new_dist", "\n", "", "def", "update", "(", "self", ",", "belief", ",", "observation", ",", "n_samples", "=", "25", ",", "verbose", "=", "False", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.update": [[232, 254], ["inference.PoseDist.world.get_body", "range", "examples.discrete_belief.dist.mixDDists", "inference.PoseDist.__class__", "print", "inference.PoseDist.world.get_body", "belief.sample", "dists.append", "print", "pose_dist.resample.resample.resample", "pybullet_tools.utils.BodySaver", "inference.PoseDist.update_dist", "len"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.sample", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.resample", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.update_dist"], ["", "def", "update", "(", "self", ",", "belief", ",", "observation", ",", "n_samples", "=", "25", ",", "verbose", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "'Prior:'", ",", "self", ".", "dist", ")", "\n", "", "body", "=", "self", ".", "world", ".", "get_body", "(", "self", ".", "name", ")", "\n", "obstacles", "=", "[", "self", ".", "world", ".", "get_body", "(", "name", ")", "for", "name", "in", "belief", ".", "pose_dists", "if", "name", "!=", "self", ".", "name", "]", "\n", "dists", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_samples", ")", ":", "\n", "            ", "belief", ".", "sample", "(", "discrete", "=", "True", ")", "# Trouble if no support", "\n", "with", "BodySaver", "(", "body", ")", ":", "\n", "                ", "new_dist", "=", "self", ".", "update_dist", "(", "observation", ",", "obstacles", ",", "**", "kwargs", ")", "\n", "#new_pose_dist = self.__class__(self.world, self.name, new_dist).resample()", "\n", "", "dists", ".", "append", "(", "new_dist", ")", "\n", "#remove_all_debug()", "\n", "#new_pose_dist.draw(color=belief.color_from_name[self.name])", "\n", "#wait_for_user()", "\n", "", "posterior", "=", "mixDDists", "(", "{", "dist", ":", "1.", "/", "len", "(", "dists", ")", "for", "dist", "in", "dists", "}", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'Posterior:'", ",", "posterior", ")", "\n", "", "pose_dist", "=", "self", ".", "__class__", "(", "self", ".", "world", ",", "self", ".", "name", ",", "posterior", ")", "\n", "if", "RESAMPLE", ":", "\n", "            ", "pose_dist", "=", "pose_dist", ".", "resample", "(", ")", "\n", "", "return", "pose_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.dump": [[255, 257], ["print"], "methods", ["None"], ["", "def", "dump", "(", "self", ")", ":", "\n", "        ", "print", "(", "self", ".", "name", ",", "self", ".", "dist", ")", "\n", "", "def", "draw", "(", "self", ",", "color", "=", "GREEN", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.draw": [[257, 277], ["list", "list", "numpy.linspace", "numpy.array", "max", "print", "zip", "inference.PoseDist.dist.support", "map", "inference.PoseDist.handles.extend", "scipy.stats.scoreatpercentile", "len", "numpy.array.round", "pose.draw", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SurfaceDist.support", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.draw"], ["", "def", "draw", "(", "self", ",", "color", "=", "GREEN", ",", "**", "kwargs", ")", ":", "\n", "#if self.handles:", "\n", "#    return", "\n", "        ", "poses", "=", "list", "(", "self", ".", "dist", ".", "support", "(", ")", ")", "\n", "probs", "=", "list", "(", "map", "(", "self", ".", "discrete_prob", ",", "poses", ")", ")", "\n", "alphas", "=", "np", ".", "linspace", "(", "0.0", ",", "1.0", ",", "num", "=", "11", ",", "endpoint", "=", "True", ")", "\n", "percentiles", "=", "np", ".", "array", "(", "[", "scipy", ".", "stats", ".", "scoreatpercentile", "(", "\n", "probs", ",", "100", "*", "p", ",", "interpolation_method", "=", "'lower'", ")", "for", "p", "in", "alphas", "]", ")", "# numpy.percentile", "\n", "max_prob", "=", "max", "(", "probs", ")", "\n", "#print('{}) max prob: {:.3f}'.format(self.name, max_prob))", "\n", "print", "(", "'{}) #poses: {} | percentiles: {}'", ".", "format", "(", "self", ".", "name", ",", "len", "(", "poses", ")", ",", "percentiles", ".", "round", "(", "3", ")", ")", ")", "\n", "#remove_handles(self.handles)", "\n", "self", ".", "handles", "=", "[", "]", "\n", "for", "pose", ",", "prob", "in", "zip", "(", "poses", ",", "probs", ")", ":", "\n", "# TODO: could instead draw a circle", "\n", "            ", "fraction", "=", "prob", "/", "max_prob", "\n", "# TODO: draw weights using color, length, or thickness", "\n", "#color = GREEN if pose == self.dist.mode() else RED", "\n", "self", ".", "handles", ".", "extend", "(", "pose", ".", "draw", "(", "color", "=", "fraction", "*", "np", ".", "array", "(", "color", ")", ",", "**", "kwargs", ")", ")", "\n", "", "return", "self", ".", "handles", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.__repr__": [[277, 280], ["len", "inference.PoseDist.dist.support"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SurfaceDist.support"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, {}, {})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "name", ",", "\n", "self", ".", "surface_dist", ",", "len", "(", "self", ".", "dist", ".", "support", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SurfaceDist.__init__": [[284, 288], ["inference.PoseDist.__init__", "inference.SurfaceDist.dist.support"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.Observation.__init__", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SurfaceDist.support"], ["    ", "def", "__init__", "(", "self", ",", "parent", ",", "weight", ",", "dist", ")", ":", "\n", "        ", "super", "(", "SurfaceDist", ",", "self", ")", ".", "__init__", "(", "parent", ".", "world", ",", "parent", ".", "world", ",", "dist", ",", "weight", "=", "weight", ")", "\n", "#self.parent = parent # No point if it evolves", "\n", "self", ".", "surface_name", "=", "self", ".", "dist", ".", "support", "(", ")", "[", "0", "]", ".", "support", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SurfaceDist.support": [[288, 291], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "support", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "surface_name", "\n", "", "def", "project", "(", "self", ",", "fn", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SurfaceDist.project": [[291, 293], ["inference.SurfaceDist.__class__", "inference.SurfaceDist.dist.project"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SurfaceDist.project"], ["", "def", "project", "(", "self", ",", "fn", ")", ":", "\n", "        ", "return", "self", ".", "__class__", "(", "self", ",", "self", ".", "weight", ",", "self", ".", "dist", ".", "project", "(", "fn", ")", ")", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SurfaceDist.__repr__": [[293, 296], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "#return '{}({}, {})'.format(self.__class__.__name__, self.name, self.surface_name)", "\n", "        ", "return", "'sd({})'", ".", "format", "(", "self", ".", "surface_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SE2Distribution.__init__": [[338, 345], ["pybullet_tools.utils.wrap_angle"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "x", "=", "0.", ",", "y", "=", "0.", ",", "yaw", "=", "0.", ",", "\n", "pos_std", "=", "1.", ",", "ori_std", "=", "1.", ")", ":", "\n", "        ", "self", ".", "x", "=", "x", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "yaw", "=", "wrap_angle", "(", "yaw", ")", "\n", "self", ".", "pos_std", "=", "pos_std", "\n", "self", ".", "ori_std", "=", "ori_std", "\n", "", "def", "prob", "(", "self", ",", "sample", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SE2Distribution.prob": [[345, 353], ["pybullet_tools.utils.circular_difference", "scipy.stats.truncnorm.pdf", "scipy.stats.norm.pdf", "scipy.stats.norm.pdf"], "methods", ["None"], ["", "def", "prob", "(", "self", ",", "sample", ")", ":", "\n", "        ", "x", ",", "y", ",", "yaw", "=", "sample", "\n", "dx", "=", "x", "-", "self", ".", "x", "\n", "dy", "=", "y", "-", "self", ".", "y", "\n", "dyaw", "=", "circular_difference", "(", "yaw", ",", "self", ".", "yaw", ")", "\n", "return", "norm", ".", "pdf", "(", "dx", ",", "scale", "=", "self", ".", "pos_std", ")", "*", "norm", ".", "pdf", "(", "dy", ",", "scale", "=", "self", ".", "pos_std", ")", "*", "truncnorm", ".", "pdf", "(", "dyaw", ",", "a", "=", "-", "np", ".", "pi", ",", "b", "=", "np", ".", "pi", ",", "scale", "=", "self", ".", "ori_std", ")", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SE2Distribution.__repr__": [[353, 356], ["numpy.array().round", "numpy.array().round", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'N({}, {})'", ".", "format", "(", "np", ".", "array", "(", "[", "self", ".", "x", ",", "self", ".", "y", ",", "self", ".", "yaw", "]", ")", ".", "round", "(", "3", ")", ",", "\n", "np", ".", "array", "(", "[", "self", ".", "pos_std", ",", "self", ".", "pos_std", ",", "self", ".", "ori_std", "]", ")", ".", "round", "(", "3", ")", ")", "# Square?", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.compute_detectable": [[299, 306], ["set", "pybullet_tools.utils.point_from_pose", "pybullet_tools.pr2_utils.is_visible_point", "pose.get_world_from_body", "set.add"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.get_world_from_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.add"], ["", "", "def", "compute_detectable", "(", "poses", ",", "camera_pose", ")", ":", "\n", "    ", "detectable_poses", "=", "set", "(", ")", "\n", "for", "pose", "in", "poses", ":", "\n", "        ", "point", "=", "point_from_pose", "(", "pose", ".", "get_world_from_body", "(", ")", ")", "\n", "if", "is_visible_point", "(", "CAMERA_MATRIX", ",", "KINECT_DEPTH", ",", "point", ",", "camera_pose", "=", "camera_pose", ")", ":", "\n", "            ", "detectable_poses", ".", "add", "(", "pose", ")", "\n", "", "", "return", "detectable_poses", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.compute_visible": [[308, 325], ["list", "pybullet_tools.utils.point_from_pose", "pybullet_tools.utils.batch_ray_collision", "pybullet_tools.utils.point_from_pose", "rays.append", "pose.get_world_from_body", "pybullet_tools.utils.Ray", "pybullet_tools.utils.LockRenderer", "zip", "zip", "handles.extend", "pybullet_tools.utils.draw_ray"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.get_world_from_body"], ["", "def", "compute_visible", "(", "body", ",", "poses", ",", "camera_pose", ",", "draw", "=", "True", ")", ":", "\n", "    ", "ordered_poses", "=", "list", "(", "poses", ")", "\n", "rays", "=", "[", "]", "\n", "camera_point", "=", "point_from_pose", "(", "camera_pose", ")", "\n", "for", "pose", "in", "ordered_poses", ":", "\n", "        ", "point", "=", "point_from_pose", "(", "pose", ".", "get_world_from_body", "(", ")", ")", "\n", "rays", ".", "append", "(", "Ray", "(", "camera_point", ",", "point", ")", ")", "\n", "", "ray_results", "=", "batch_ray_collision", "(", "rays", ")", "\n", "if", "draw", ":", "\n", "        ", "with", "LockRenderer", "(", ")", ":", "\n", "            ", "handles", "=", "[", "]", "\n", "for", "ray", ",", "result", "in", "zip", "(", "rays", ",", "ray_results", ")", ":", "\n", "                ", "handles", ".", "extend", "(", "draw_ray", "(", "ray", ",", "result", ")", ")", "\n", "# Blocking objects will likely be known with high probability", "\n", "# TODO: move objects out of the way?", "\n", "", "", "", "return", "{", "pose", "for", "pose", ",", "result", "in", "zip", "(", "ordered_poses", ",", "ray_results", ")", "\n", "if", "result", ".", "objectUniqueId", "in", "(", "body", ",", "-", "1", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.compute_cfree": [[327, 334], ["set", "pose.assign", "any", "set.add", "pybullet_tools.utils.pairwise_collision"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.add"], ["", "def", "compute_cfree", "(", "body", ",", "poses", ",", "obstacles", "=", "[", "]", ")", ":", "\n", "    ", "cfree_poses", "=", "set", "(", ")", "\n", "for", "pose", "in", "poses", ":", "\n", "        ", "pose", ".", "assign", "(", ")", "\n", "if", "not", "any", "(", "pairwise_collision", "(", "body", ",", "obst", ")", "for", "obst", "in", "obstacles", ")", ":", "\n", "            ", "cfree_poses", ".", "add", "(", "pose", ")", "\n", "", "", "return", "cfree_poses", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.get_detection_fn": [[362, 375], ["examples.discrete_belief.dist.DeltaDist", "examples.discrete_belief.dist.DDist"], "function", ["None"], ["", "", "def", "get_detection_fn", "(", "visible", ",", "p_fp", "=", "MODEL_P_FP", ",", "p_fn", "=", "MODEL_P_FN", ")", ":", "\n", "# TODO: precompute visible here", "\n", "# TODO: mixture over ALL_SURFACES", "\n", "# Checking surfaces is important because incorrect surfaces may have similar relative poses", "\n", "    ", "assert", "p_fp", "==", "0", "\n", "\n", "def", "fn", "(", "pose", ")", ":", "\n", "# P(detect | s in visible)", "\n", "# This could depend on the position as well", "\n", "        ", "if", "pose", "in", "visible", ":", "\n", "            ", "return", "DDist", "(", "{", "pose", ".", "support", ":", "1.", "-", "p_fn", ",", "None", ":", "p_fn", "}", ")", "\n", "", "return", "DeltaDist", "(", "None", ")", "\n", "", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.get_registration_fn": [[377, 399], ["pybullet_tools.utils.base_values_from_pose", "examples.discrete_belief.dist.DeltaDist", "pose.get_reference_from_body", "examples.discrete_belief.dist.ProductDistribution", "inference.SE2Distribution", "examples.discrete_belief.dist.GaussianDistribution", "examples.discrete_belief.dist.GaussianDistribution"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.get_reference_from_body"], ["", "def", "get_registration_fn", "(", "visible", ")", ":", "\n", "# TODO: clip probabilities so doesn't become zero", "\n", "# TODO: nearby objects that might cause miss detections", "\n", "# TODO: add the observation as a particle", "\n", "\n", "    ", "def", "fn", "(", "pose", ",", "surface", ")", ":", "\n", "# P(obs point | state detect)", "\n", "        ", "if", "surface", "is", "None", ":", "\n", "            ", "return", "DeltaDist", "(", "None", ")", "\n", "# Weight can be proportional weight in the event that the distribution can't be normalized", "\n", "", "x", ",", "y", ",", "yaw", "=", "base_values_from_pose", "(", "pose", ".", "get_reference_from_body", "(", ")", ")", "\n", "if", "DIM", "==", "2", ":", "\n", "            ", "return", "ProductDistribution", "(", "[", "\n", "GaussianDistribution", "(", "gmean", "=", "x", ",", "stdev", "=", "MODEL_POS_STD", ")", ",", "\n", "GaussianDistribution", "(", "gmean", "=", "y", ",", "stdev", "=", "MODEL_POS_STD", ")", ",", "\n", "#CUniformDist(-np.pi, +np.pi),", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "SE2Distribution", "(", "x", ",", "y", ",", "yaw", ",", "pos_std", "=", "MODEL_POS_STD", ",", "ori_std", "=", "MODEL_ORI_STD", ")", "\n", "# Could also mix with a uniform distribution over the space", "\n", "#if not visible[index]: uniform over the space", "\n", "", "", "return", "fn", "\n", "", ""]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.visualization.get_floor_z": [[12, 14], ["pybullet_tools.utils.get_point"], "function", ["None"], ["def", "get_floor_z", "(", "world", ",", "floor_z", "=", "0.005", ")", ":", "\n", "    ", "return", "get_point", "(", "world", ".", "floor", ")", "[", "2", "]", "+", "floor_z", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.visualization.visualize_base_confs": [[15, 30], ["visualization.get_floor_z", "pybullet_tools.utils.grow_polygon", "handles.extend", "pybullet_tools.utils.convex_centroid", "handles.append", "pybullet_tools.utils.Point", "pybullet_tools.utils.add_segments", "pybullet_tools.utils.add_text"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.visualization.get_floor_z"], ["", "def", "visualize_base_confs", "(", "world", ",", "name", ",", "base_confs", ",", "**", "kwargs", ")", ":", "\n", "    ", "handles", "=", "[", "]", "\n", "if", "not", "base_confs", ":", "\n", "        ", "return", "handles", "\n", "", "z", "=", "get_floor_z", "(", "world", ")", "\n", "# for x, y in base_points:", "\n", "#    handles.extend(draw_point(Point(x, y, z), color=color))", "\n", "vertices", "=", "grow_polygon", "(", "base_confs", ",", "radius", "=", "GROW_INVERSE_BASE", ")", "\n", "points", "=", "[", "Point", "(", "x", ",", "y", ",", "z", ")", "for", "x", ",", "y", ",", "in", "vertices", "]", "\n", "handles", ".", "extend", "(", "add_segments", "(", "points", ",", "closed", "=", "True", ",", "**", "kwargs", ")", ")", "\n", "cx", ",", "cy", "=", "convex_centroid", "(", "vertices", ")", "\n", "centroid", "=", "[", "cx", ",", "cy", ",", "z", "]", "\n", "# draw_point(centroid, color=color)", "\n", "handles", ".", "append", "(", "add_text", "(", "name", ",", "position", "=", "centroid", ",", "**", "kwargs", ")", ")", "\n", "return", "handles", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.visualization.add_markers": [[32, 91], ["list", "pybullet_tools.utils.point_from_pose", "handles.extend", "zip", "src.utils.surface_from_name", "pybullet_tools.utils.link_from_name", "pybullet_tools.utils.point_from_pose", "zip", "map", "pybullet_tools.utils.get_link_pose", "visualization.get_floor_z", "pybullet_tools.utils.Point", "pybullet_tools.utils.add_segments", "pybullet_tools.utils.spaced_colors", "list", "handles.extend", "pybullet_tools.utils.get_link_pose", "pybullet_tools.utils.spaced_colors", "list", "list", "src.database.load_forward_placements", "pybullet_tools.utils.grow_polygon", "len", "src.database.load_pull_base_poses", "visualization.visualize_base_confs", "len", "map", "numpy.average", "handles.extend", "map", "handles.extend", "src.database.load_placements", "pybullet_tools.utils.Point", "pybullet_tools.utils.add_segments", "src.database.load_inverse_placements", "visualization.get_floor_z", "pybullet_tools.utils.Point", "pybullet_tools.utils.add_segments", "pybullet_tools.utils.grow_polygon", "pybullet_tools.utils.grow_polygon"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.surface_from_name", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.visualization.get_floor_z", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_forward_placements", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_pull_base_poses", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.visualization.visualize_base_confs", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_placements", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_inverse_placements", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.visualization.get_floor_z"], ["", "def", "add_markers", "(", "task", ",", "placements", "=", "True", ",", "forward_place", "=", "True", ",", "pull_bases", "=", "True", ",", "inverse_place", "=", "False", ")", ":", "\n", "# TODO: decompose", "\n", "    ", "world", "=", "task", ".", "world", "\n", "handles", "=", "[", "]", "\n", "if", "placements", ":", "\n", "        ", "for", "surface_name", "in", "ALL_SURFACES", ":", "\n", "            ", "surface", "=", "surface_from_name", "(", "surface_name", ")", "\n", "surface_link", "=", "link_from_name", "(", "world", ".", "kitchen", ",", "surface", ".", "link", ")", "\n", "surface_point", "=", "point_from_pose", "(", "get_link_pose", "(", "world", ".", "kitchen", ",", "surface_link", ")", ")", "\n", "for", "grasp_type", ",", "color", "in", "zip", "(", "task", ".", "grasp_types", ",", "spaced_colors", "(", "len", "(", "task", ".", "grasp_types", ")", ")", ")", ":", "\n", "                ", "object_points", "=", "list", "(", "map", "(", "point_from_pose", ",", "load_placements", "(", "world", ",", "surface_name", ",", "\n", "grasp_types", "=", "[", "grasp_type", "]", ")", ")", ")", "\n", "if", "(", "surface_name", "not", "in", "STOVES", ")", "and", "object_points", ":", "\n", "#for object_point in object_points:", "\n", "#    handles.extend(draw_point(object_point, color=color))", "\n", "                    ", "_", ",", "_", ",", "z", "=", "np", ".", "average", "(", "object_points", ",", "axis", "=", "0", ")", "\n", "object_points", "=", "[", "Point", "(", "x", ",", "y", ",", "z", ")", "for", "x", ",", "y", "in", "grow_polygon", "(", "object_points", ",", "radius", "=", "0.0", ")", "]", "\n", "handles", ".", "extend", "(", "add_segments", "(", "object_points", ",", "color", "=", "color", ",", "closed", "=", "True", ",", "\n", "parent", "=", "world", ".", "kitchen", ",", "parent_link", "=", "surface_link", ")", ")", "\n", "", "base_points", "=", "list", "(", "map", "(", "point_from_pose", ",", "load_inverse_placements", "(", "world", ",", "surface_name", ",", "\n", "grasp_types", "=", "[", "grasp_type", "]", ")", ")", ")", "\n", "if", "(", "surface_name", "in", "STOVES", ")", "and", "base_points", ":", "# and inverse_place", "\n", "#continue", "\n", "#_, _, z = np.average(base_points, axis=0)", "\n", "                    ", "z", "=", "get_floor_z", "(", "world", ")", "-", "surface_point", "[", "2", "]", "\n", "base_points", "=", "[", "Point", "(", "x", ",", "y", ",", "z", ")", "for", "x", ",", "y", "in", "grow_polygon", "(", "base_points", ",", "radius", "=", "GROW_INVERSE_BASE", ")", "]", "\n", "handles", ".", "extend", "(", "add_segments", "(", "base_points", ",", "color", "=", "color", ",", "closed", "=", "True", ",", "\n", "parent", "=", "world", ".", "kitchen", ",", "parent_link", "=", "surface_link", ")", ")", "\n", "\n", "", "", "", "", "if", "forward_place", ":", "\n", "# TODO: do this by taking the union of all grasps", "\n", "        ", "object_points", "=", "list", "(", "map", "(", "point_from_pose", ",", "load_forward_placements", "(", "world", ")", ")", ")", "\n", "robot_point", "=", "point_from_pose", "(", "get_link_pose", "(", "world", ".", "robot", ",", "world", ".", "base_link", ")", ")", "\n", "#z = 0.", "\n", "z", "=", "get_floor_z", "(", "world", ")", "-", "robot_point", "[", "2", "]", "\n", "object_points", "=", "[", "Point", "(", "x", ",", "y", ",", "z", ")", "for", "x", ",", "y", "in", "grow_polygon", "(", "object_points", ",", "radius", "=", "GROW_FORWARD_RADIUS", ")", "]", "\n", "handles", ".", "extend", "(", "add_segments", "(", "object_points", ",", "color", "=", "GREEN", ",", "closed", "=", "True", ",", "\n", "parent", "=", "world", ".", "robot", ",", "parent_link", "=", "world", ".", "base_link", ")", ")", "\n", "\n", "", "if", "pull_bases", ":", "\n", "        ", "for", "joint_name", ",", "color", "in", "zip", "(", "ALL_JOINTS", ",", "spaced_colors", "(", "len", "(", "ALL_JOINTS", ")", ")", ")", ":", "\n", "            ", "base_confs", "=", "list", "(", "load_pull_base_poses", "(", "world", ",", "joint_name", ")", ")", "\n", "handles", ".", "extend", "(", "visualize_base_confs", "(", "world", ",", "joint_name", ",", "base_confs", ",", "color", "=", "color", ")", ")", "\n", "\n", "#if inverse_place:", "\n", "#    for name in world.movable:", "\n", "#        body = world.get_body(name)", "\n", "#        pose = get_pose(body)", "\n", "#        surface_name = world.get_supporting(name)", "\n", "#        if surface_name is None:", "\n", "#            continue", "\n", "#        for grasp_type, color in zip(GRASP_TYPES, spaced_colors(len(GRASP_TYPES))):", "\n", "#            base_confs = []", "\n", "#            for grasp in get_grasps(world, name, grasp_types=[grasp_type]):", "\n", "#                tool_pose = multiply(pose, invert(grasp.grasp_pose))", "\n", "#                base_confs.extend(load_place_base_poses(world, tool_pose, surface_name, grasp_type))", "\n", "#            handles.extend(visualize_base_confs(world, grasp_type, base_confs, color=color))", "\n", "\n", "", "", "return", "handles", "", "", ""]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.problem.existential_quantification": [[40, 51], ["pddlstream.language.constants.And", "goal_formula.append", "goal_formula.append", "pddlstream.language.constants.get_args", "pddlstream.language.constants.is_parameter", "pddlstream.language.constants.Exists", "pddlstream.language.constants.get_parameter_name", "pddlstream.language.constants.And"], "function", ["None"], ["def", "existential_quantification", "(", "goal_literals", ")", ":", "\n", "# TODO: merge with pddlstream-experiments", "\n", "    ", "goal_formula", "=", "[", "]", "\n", "for", "literal", "in", "goal_literals", ":", "\n", "        ", "parameters", "=", "[", "a", "for", "a", "in", "get_args", "(", "literal", ")", "if", "is_parameter", "(", "a", ")", "]", "\n", "if", "parameters", ":", "\n", "            ", "type_literals", "=", "[", "(", "'Type'", ",", "p", ",", "get_parameter_name", "(", "p", ")", ")", "for", "p", "in", "parameters", "]", "\n", "goal_formula", ".", "append", "(", "Exists", "(", "parameters", ",", "And", "(", "literal", ",", "*", "type_literals", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "goal_formula", ".", "append", "(", "literal", ")", "\n", "", "", "return", "And", "(", "*", "goal_formula", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.problem.title_from_snake": [[67, 69], ["x.title", "s.split"], "function", ["None"], ["def", "title_from_snake", "(", "s", ")", ":", "\n", "    ", "return", "''", ".", "join", "(", "x", ".", "title", "(", ")", "for", "x", "in", "s", ".", "split", "(", "'_'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.problem.get_streams": [[70, 123], ["pddlstream.utils.read", "pddlstream.utils.get_file_path", "pddlstream.language.generator.from_test", "pddlstream.language.generator.from_test", "pddlstream.language.generator.from_gen_fn", "pddlstream.language.generator.from_gen_fn", "pddlstream.language.generator.from_gen_fn", "pddlstream.language.generator.from_gen_fn", "pddlstream.language.generator.from_gen_fn", "pddlstream.language.generator.from_gen_fn", "pddlstream.language.generator.from_gen_fn", "pddlstream.language.generator.from_fn", "pddlstream.language.generator.from_fn", "pddlstream.language.generator.from_fn", "pddlstream.language.generator.from_fn", "pddlstream.language.generator.from_test", "pddlstream.language.generator.from_test", "pddlstream.language.generator.from_gen_fn", "pddlstream.language.generator.from_gen_fn", "pddlstream.language.generator.from_gen_fn", "pddlstream.language.generator.from_gen_fn", "pddlstream.language.generator.from_fn", "pddlstream.language.generator.from_fn", "pddlstream.language.generator.from_gen_fn", "pddlstream.language.generator.from_fn", "pddlstream.language.generator.from_test", "pddlstream.language.generator.from_test", "pddlstream.language.generator.from_test", "pddlstream.language.generator.from_test", "pddlstream.language.generator.from_test", "pddlstream.language.generator.from_test", "pddlstream.language.generator.from_test", "pddlstream.language.generator.from_test", "pddlstream.language.generator.from_test", "src.stream.get_door_test", "src.stream.get_gripper_open_test", "src.stream.get_stable_gen", "src.stream.get_grasp_gen", "src.stream.get_nearby_stable_gen", "src.streams.pick.get_pick_gen_fn", "src.streams.pull.get_pull_gen_fn", "src.streams.press.get_press_gen_fn", "src.streams.pour.get_pour_gen_fn", "src.streams.move.get_base_motion_fn", "src.streams.move.get_arm_motion_gen", "src.streams.move.get_gripper_motion_gen", "src.stream.get_calibrate_gen", "src.stream.get_test_near_pose", "src.stream.get_test_near_joint", "src.streams.pick.get_fixed_pick_gen_fn", "src.streams.pull.get_fixed_pull_gen_fn", "src.streams.press.get_fixed_press_gen_fn", "src.streams.pour.get_fixed_pour_gen_fn", "src.stream.get_compute_pose_kin", "src.stream.get_compute_detect", "src.stream.get_sample_belief_gen", "src.stream.update_belief_fn", "src.stream.get_cfree_worldpose_test", "src.stream.get_cfree_worldpose_worldpose_test", "src.stream.get_cfree_relpose_relpose_test", "src.stream.get_cfree_bconf_pose_test", "src.stream.get_cfree_approach_pose_test", "src.stream.get_cfree_angle_angle_test", "src.stream.get_cfree_traj_pose_test", "src.stream.get_ofree_ray_pose_test", "src.stream.get_ofree_ray_grasp_test"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_door_test", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_gripper_open_test", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_stable_gen", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_grasp_gen", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_nearby_stable_gen", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pick.get_pick_gen_fn", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pull.get_pull_gen_fn", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.press.get_press_gen_fn", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pour.get_pour_gen_fn", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.move.get_base_motion_fn", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.move.get_arm_motion_gen", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.move.get_gripper_motion_gen", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_calibrate_gen", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_test_near_pose", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_test_near_joint", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pick.get_fixed_pick_gen_fn", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pull.get_fixed_pull_gen_fn", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.press.get_fixed_press_gen_fn", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pour.get_fixed_pour_gen_fn", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_compute_pose_kin", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_compute_detect", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_sample_belief_gen", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.update_belief_fn", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_cfree_worldpose_test", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_cfree_worldpose_worldpose_test", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_cfree_relpose_relpose_test", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_cfree_bconf_pose_test", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_cfree_approach_pose_test", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_cfree_angle_angle_test", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_cfree_traj_pose_test", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_ofree_ray_pose_test", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_ofree_ray_grasp_test"], ["", "def", "get_streams", "(", "world", ",", "debug", "=", "False", ",", "teleport_base", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "stream_pddl", "=", "read", "(", "get_file_path", "(", "__file__", ",", "'../pddl/stream.pddl'", ")", ")", "\n", "if", "debug", ":", "\n", "        ", "return", "stream_pddl", ",", "DEBUG", "\n", "", "stream_map", "=", "{", "\n", "'test-door'", ":", "from_test", "(", "get_door_test", "(", "world", ")", ")", ",", "\n", "'test-gripper'", ":", "from_test", "(", "get_gripper_open_test", "(", "world", ")", ")", ",", "\n", "\n", "'sample-pose'", ":", "from_gen_fn", "(", "get_stable_gen", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "'sample-grasp'", ":", "from_gen_fn", "(", "get_grasp_gen", "(", "world", ")", ")", ",", "\n", "'sample-nearby-pose'", ":", "from_gen_fn", "(", "get_nearby_stable_gen", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "\n", "'plan-pick'", ":", "from_gen_fn", "(", "get_pick_gen_fn", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "'plan-pull'", ":", "from_gen_fn", "(", "get_pull_gen_fn", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "'plan-press'", ":", "from_gen_fn", "(", "get_press_gen_fn", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "'plan-pour'", ":", "from_gen_fn", "(", "get_pour_gen_fn", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "\n", "'plan-base-motion'", ":", "from_fn", "(", "get_base_motion_fn", "(", "world", ",", "teleport_base", "=", "teleport_base", ",", "**", "kwargs", ")", ")", ",", "\n", "'plan-arm-motion'", ":", "from_fn", "(", "get_arm_motion_gen", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "'plan-gripper-motion'", ":", "from_fn", "(", "get_gripper_motion_gen", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "'plan-calibrate-motion'", ":", "from_fn", "(", "get_calibrate_gen", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "\n", "'test-near-pose'", ":", "from_test", "(", "get_test_near_pose", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "'test-near-joint'", ":", "from_test", "(", "get_test_near_joint", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "\n", "'fixed-plan-pick'", ":", "from_gen_fn", "(", "get_fixed_pick_gen_fn", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "'fixed-plan-pull'", ":", "from_gen_fn", "(", "get_fixed_pull_gen_fn", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "'fixed-plan-press'", ":", "from_gen_fn", "(", "get_fixed_press_gen_fn", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "'fixed-plan-pour'", ":", "from_gen_fn", "(", "get_fixed_pour_gen_fn", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "\n", "'compute-pose-kin'", ":", "from_fn", "(", "get_compute_pose_kin", "(", "world", ")", ")", ",", "\n", "# 'compute-angle-kin': from_fn(compute_angle_kin),", "\n", "'compute-detect'", ":", "from_fn", "(", "get_compute_detect", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "\n", "'sample-observation'", ":", "from_gen_fn", "(", "get_sample_belief_gen", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "'update-belief'", ":", "from_fn", "(", "update_belief_fn", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "\n", "'test-cfree-worldpose'", ":", "from_test", "(", "get_cfree_worldpose_test", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "'test-cfree-worldpose-worldpose'", ":", "from_test", "(", "get_cfree_worldpose_worldpose_test", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "'test-cfree-pose-pose'", ":", "from_test", "(", "get_cfree_relpose_relpose_test", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "'test-cfree-bconf-pose'", ":", "from_test", "(", "get_cfree_bconf_pose_test", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "'test-cfree-approach-pose'", ":", "from_test", "(", "get_cfree_approach_pose_test", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "'test-cfree-angle-angle'", ":", "from_test", "(", "get_cfree_angle_angle_test", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "'test-cfree-traj-pose'", ":", "from_test", "(", "get_cfree_traj_pose_test", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "\n", "'test-ofree-ray-pose'", ":", "from_test", "(", "get_ofree_ray_pose_test", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "'test-ofree-ray-grasp'", ":", "from_test", "(", "get_ofree_ray_grasp_test", "(", "world", ",", "**", "kwargs", ")", ")", ",", "\n", "\n", "'DetectCost'", ":", "detect_cost_fn", ",", "\n", "#'MoveCost': move_cost_fn,", "\n", "# 'Distance': base_cost_fn,", "\n", "}", "\n", "return", "stream_pddl", ",", "stream_map", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.problem.door_status_formula": [[126, 129], ["pddlstream.language.constants.Exists", "pddlstream.language.constants.And", "src.stream.CLOSED", "src.stream.OPEN"], "function", ["None"], ["", "def", "door_status_formula", "(", "joint_name", ",", "status", ")", ":", "\n", "    ", "return", "Exists", "(", "[", "'?a'", "]", ",", "And", "(", "(", "'AngleWithin'", ",", "joint_name", ",", "'?a'", ",", "status", ")", ",", "\n", "(", "'AtAngle'", ",", "joint_name", ",", "'?a'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.problem.door_closed_formula": [[130, 132], ["problem.door_status_formula"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.problem.door_status_formula"], ["", "def", "door_closed_formula", "(", "joint_name", ")", ":", "\n", "    ", "return", "door_status_formula", "(", "joint_name", ",", "CLOSED", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.problem.door_open_formula": [[133, 135], ["problem.door_status_formula"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.problem.door_status_formula"], ["", "def", "door_open_formula", "(", "joint_name", ")", ":", "\n", "    ", "return", "door_status_formula", "(", "joint_name", ",", "OPEN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.problem.get_goal": [[136, 190], ["math.radians", "problem.existential_quantification", "math.radians", "pddlstream.language.constants.Not", "goal_literals.append", "goal_literals.append", "list", "init.extend", "pybullet_tools.utils.get_difference_fn", "numpy.less_equal().all", "goal_literals.append", "print", "init.append", "pddlstream.language.constants.Exists", "pybullet_tools.utils.get_difference_fn", "numpy.less_equal().all", "init.extend", "goal_literals.append", "problem.door_open_formula", "numpy.less_equal", "pddlstream.language.constants.And", "src.utils.are_confs_close", "print", "init.append", "pddlstream.language.constants.Exists", "problem.door_closed_formula", "numpy.abs", "numpy.less_equal", "pddlstream.language.constants.And", "pybullet_tools.utils.get_difference_fn.", "numpy.abs", "pybullet_tools.utils.get_difference_fn.", "numpy.ones", "len", "pddlstream.language.constants.Not", "task.goal_on.items"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.problem.existential_quantification", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.problem.door_open_formula", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.are_confs_close", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.problem.door_closed_formula"], ["", "def", "get_goal", "(", "belief", ",", "init", ",", "base_threshold", "=", "(", "0.05", ",", "0.05", ",", "math", ".", "radians", "(", "10", ")", ")", ",", "arm_threshold", "=", "math", ".", "radians", "(", "10", ")", ")", ":", "\n", "# TODO: order goals for serialization", "\n", "# TODO: make independent of belief and world", "\n", "    ", "world", "=", "belief", ".", "world", "# One world per state", "\n", "task", "=", "world", ".", "task", "# One task per world", "\n", "init_bq", "=", "belief", ".", "base_conf", "\n", "init_aq", "=", "belief", ".", "arm_conf", "\n", "\n", "carry_aq", "=", "world", ".", "carry_conf", "\n", "goal_literals", "=", "[", "Not", "(", "(", "'Unsafe'", ",", ")", ")", "]", "\n", "if", "task", ".", "goal_hand_empty", ":", "\n", "        ", "goal_literals", ".", "append", "(", "(", "'HandEmpty'", ",", ")", ")", "\n", "", "if", "task", ".", "goal_holding", "is", "not", "None", ":", "\n", "        ", "goal_literals", ".", "append", "(", "(", "'Holding'", ",", "task", ".", "goal_holding", ")", ")", "\n", "", "goal_literals", "+=", "[", "(", "'On'", ",", "name", ",", "surface", ")", "for", "name", ",", "surface", "in", "task", ".", "goal_on", ".", "items", "(", ")", "]", "+", "[", "Not", "(", "(", "'Pressed'", ",", "name", ")", ")", "for", "name", "in", "KNOBS", "]", "+", "[", "(", "'HasLiquid'", ",", "cup", ",", "liquid", ")", "for", "cup", ",", "liquid", "in", "task", ".", "goal_liquid", "]", "+", "[", "(", "'Cooked'", ",", "name", ")", "for", "name", "in", "task", ".", "goal_cooked", "]", "+", "[", "(", "'Localized'", ",", "name", ")", "for", "name", "in", "task", ".", "goal_detected", "]", "+", "[", "door_closed_formula", "(", "joint_name", ")", "for", "joint_name", "in", "task", ".", "goal_closed", "]", "+", "[", "door_open_formula", "(", "joint_name", ")", "for", "joint_name", "in", "task", ".", "goal_open", "]", "+", "list", "(", "task", ".", "goal", ")", "\n", "\n", "if", "not", "task", ".", "movable_base", "or", "task", ".", "return_init_bq", ":", "# fixed_base?", "\n", "        ", "goal_bq", "=", "world", ".", "goal_bq", "if", "task", ".", "movable_base", "else", "init_bq", "\n", "init", ".", "extend", "(", "[", "\n", "(", "'BConf'", ",", "goal_bq", ")", ",", "\n", "(", "'AConf'", ",", "goal_bq", ",", "carry_aq", ")", ",", "\n", "(", "'CloseTo'", ",", "goal_bq", ",", "goal_bq", ")", ",", "\n", "]", ")", "\n", "\n", "base_difference_fn", "=", "get_difference_fn", "(", "world", ".", "robot", ",", "world", ".", "base_joints", ")", "\n", "if", "np", ".", "less_equal", "(", "np", ".", "abs", "(", "base_difference_fn", "(", "init_bq", ".", "values", ",", "goal_bq", ".", "values", ")", ")", ",", "base_threshold", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "'Close to goal base configuration'", ")", "\n", "init", ".", "append", "(", "(", "'CloseTo'", ",", "init_bq", ",", "goal_bq", ")", ")", "\n", "", "goal_literals", ".", "append", "(", "Exists", "(", "[", "'?bq'", "]", ",", "And", "(", "\n", "(", "'CloseTo'", ",", "'?bq'", ",", "goal_bq", ")", ",", "(", "'AtBConf'", ",", "'?bq'", ")", ")", ")", ")", "\n", "\n", "goal_aq", "=", "task", ".", "goal_aq", "\n", "if", "task", ".", "return_init_aq", ":", "\n", "            ", "goal_aq", "=", "init_aq", "if", "are_confs_close", "(", "init_aq", ",", "world", ".", "goal_aq", ")", "else", "world", ".", "goal_aq", "\n", "", "if", "goal_aq", "is", "not", "None", ":", "\n", "            ", "arm_difference_fn", "=", "get_difference_fn", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ")", "\n", "if", "np", ".", "less_equal", "(", "np", ".", "abs", "(", "arm_difference_fn", "(", "init_aq", ".", "values", ",", "goal_aq", ".", "values", ")", ")", ",", "\n", "arm_threshold", "*", "np", ".", "ones", "(", "len", "(", "world", ".", "arm_joints", ")", ")", ")", ".", "all", "(", ")", ":", "\n", "                ", "print", "(", "'Close to goal arm configuration'", ")", "\n", "init", ".", "append", "(", "(", "'CloseTo'", ",", "init_aq", ",", "goal_aq", ")", ")", "\n", "", "init", ".", "extend", "(", "[", "\n", "(", "'AConf'", ",", "goal_bq", ",", "goal_aq", ")", ",", "\n", "(", "'CloseTo'", ",", "goal_aq", ",", "goal_aq", ")", ",", "\n", "]", ")", "\n", "goal_literals", ".", "append", "(", "Exists", "(", "[", "'?aq'", "]", ",", "And", "(", "\n", "(", "'CloseTo'", ",", "'?aq'", ",", "goal_aq", ")", ",", "(", "'AtAConf'", ",", "'?aq'", ")", ")", ")", ")", "\n", "", "", "return", "existential_quantification", "(", "goal_literals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.problem.pdddlstream_from_problem": [[193, 459], ["print", "pddlstream.utils.read", "src.utils.JOINT_TEMPLATE.format", "src.utils.JOINT_TEMPLATE.format", "ACTION_COSTS.items", "src.stream.get_compute_pose_kin", "src.stream.get_compute_angle_kin", "belief.door_confs.items", "belief.pose_dists.items", "problem.get_goal", "problem.get_streams", "print", "print", "print", "pddlstream.language.constants.PDDLProblem", "pddlstream.utils.get_file_path", "src.utils.are_confs_close", "list", "init.append", "init.append", "init.append", "init.append", "pybullet_tools.utils.joint_from_name", "src.utils.surface_from_joint", "init.append", "pybullet_tools.utils.get_link_name", "src.utils.surface_from_name", "pybullet_tools.utils.link_from_name", "pybullet_tools.utils.parent_joint_from_link", "init.extend", "init.extend", "init.extend", "src.utils.type_from_name", "pose_dist.dist.support", "pose_dist.is_localized", "sorted", "list", "problem.title_from_snake", "pddlstream.language.constants.Equal", "init.append", "init.append", "pybullet_tools.utils.child_link_from_joint", "src.stream.get_compute_angle_kin.", "init.extend", "init.append", "init.append", "src.utils.RelPose", "init.append", "init.append", "init.append", "init.append", "init.append", "pybullet_tools.utils.euler_from_quat", "init.extend", "pose_dist.decompose", "init.extend", "init.extend", "src.database.has_place_database", "init.append", "pybullet_tools.utils.quat_from_pose", "print", "src.stream.get_compute_pose_kin.", "isinstance", "src.utils.STOVE_TEMPLATE.format", "src.utils.KNOB_TEMPLATE.format", "pddlstream.utils.implies", "rel_pose.get_reference_from_body", "abs", "abs", "init.append", "init.append", "init.extend", "world.is_real", "src.utils.is_valid_grasp_type", "set", "set", "pddlstream.utils.implies", "world.is_real", "src.utils.is_valid_grasp_type", "task.goal_on.items", "itertools.product"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_compute_pose_kin", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_compute_angle_kin", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.problem.get_goal", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.problem.get_streams", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.are_confs_close", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.surface_from_joint", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.surface_from_name", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.type_from_name", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SurfaceDist.support", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.is_localized", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.problem.title_from_snake", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.decompose", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.has_place_database", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.get_reference_from_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.is_real", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.is_valid_grasp_type", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.is_real", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.is_valid_grasp_type"], ["", "def", "pdddlstream_from_problem", "(", "belief", ",", "additional_init", "=", "[", "]", ",", "fixed_base", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "world", "=", "belief", ".", "world", "# One world per state", "\n", "task", "=", "world", ".", "task", "# One task per world", "\n", "print", "(", "task", ")", "\n", "domain_pddl", "=", "read", "(", "get_file_path", "(", "__file__", ",", "'../pddl/domain.pddl'", ")", ")", "\n", "# TODO: repackage stream outputs to avoid recomputation", "\n", "\n", "# Despite the base not moving, it could be re-estimated", "\n", "init_bq", "=", "belief", ".", "base_conf", "\n", "init_aq", "=", "belief", ".", "arm_conf", "\n", "init_gq", "=", "belief", ".", "gripper_conf", "\n", "\n", "carry_aq", "=", "world", ".", "carry_conf", "\n", "init_aq", "=", "carry_aq", "if", "are_confs_close", "(", "init_aq", ",", "carry_aq", ")", "else", "init_aq", "\n", "\n", "# TODO: the following doesn't work. Maybe because carry_conf is used elsewhere", "\n", "#carry_aq = init_aq if are_confs_close(init_aq, world.carry_conf) else world.carry_conf", "\n", "#calibrate_aq = init_aq if are_confs_close(init_aq, world.calibrate_conf) else world.calibrate_conf", "\n", "\n", "# Don't need this now that returning to old confs", "\n", "#open_gq = init_gq if are_confs_close(init_gq, world.open_gq) else world.open_gq", "\n", "#closed_gq = init_gq if are_confs_close(init_gq, world.closed_gq) else world.closed_gq", "\n", "open_gq", "=", "world", ".", "open_gq", "\n", "closed_gq", "=", "world", ".", "closed_gq", "\n", "\n", "constant_map", "=", "{", "\n", "'@world'", ":", "'world'", ",", "\n", "'@gripper'", ":", "'gripper'", ",", "\n", "'@stove'", ":", "'stove'", ",", "\n", "'@none'", ":", "None", ",", "\n", "\n", "'@rest_aq'", ":", "carry_aq", ",", "\n", "#'@calibrate_aq': calibrate_aq,", "\n", "'@open_gq'", ":", "open_gq", ",", "\n", "'@closed_gq'", ":", "closed_gq", ",", "\n", "'@open'", ":", "OPEN", ",", "\n", "'@closed'", ":", "CLOSED", ",", "\n", "'@top'", ":", "TOP_GRASP", ",", "\n", "'@side'", ":", "SIDE_GRASP", ",", "\n", "'@bq0'", ":", "init_bq", ",", "\n", "}", "\n", "top_joint", "=", "JOINT_TEMPLATE", ".", "format", "(", "TOP_DRAWER", ")", "\n", "bottom_joint", "=", "JOINT_TEMPLATE", ".", "format", "(", "BOTTOM_DRAWER", ")", "\n", "\n", "init", "=", "[", "\n", "(", "'BConf'", ",", "init_bq", ")", ",", "\n", "(", "'AtBConf'", ",", "init_bq", ")", ",", "\n", "(", "'AConf'", ",", "init_bq", ",", "carry_aq", ")", ",", "\n", "#('RestAConf', carry_aq),", "\n", "#('AConf', init_bq, calibrate_aq),", "\n", "(", "'Stationary'", ",", ")", ",", "\n", "\n", "(", "'AConf'", ",", "init_bq", ",", "init_aq", ")", ",", "\n", "(", "'AtAConf'", ",", "init_aq", ")", ",", "\n", "\n", "(", "'GConf'", ",", "open_gq", ")", ",", "\n", "(", "'GConf'", ",", "closed_gq", ")", ",", "\n", "\n", "(", "'Grasp'", ",", "None", ",", "None", ")", ",", "\n", "(", "'AtGrasp'", ",", "None", ",", "None", ")", ",", "\n", "\n", "(", "'Above'", ",", "top_joint", ",", "bottom_joint", ")", ",", "\n", "(", "'Adjacent'", ",", "top_joint", ",", "bottom_joint", ")", ",", "\n", "(", "'Adjacent'", ",", "bottom_joint", ",", "top_joint", ")", ",", "\n", "\n", "(", "'Calibrated'", ",", ")", ",", "\n", "(", "'CanMoveBase'", ",", ")", ",", "\n", "(", "'CanMoveArm'", ",", ")", ",", "\n", "(", "'CanMoveGripper'", ",", ")", ",", "\n", "]", "+", "list", "(", "task", ".", "init", ")", "+", "list", "(", "additional_init", ")", "\n", "for", "action_name", ",", "cost", "in", "ACTION_COSTS", ".", "items", "(", ")", ":", "\n", "        ", "function_name", "=", "'{}Cost'", ".", "format", "(", "title_from_snake", "(", "action_name", ")", ")", "\n", "function", "=", "(", "function_name", ",", ")", "\n", "init", ".", "append", "(", "Equal", "(", "function", ",", "cost", ")", ")", "# TODO: stove state", "\n", "", "init", "+=", "[", "(", "'Stackable'", ",", "name", ",", "surface", ")", "for", "name", ",", "surface", "in", "task", ".", "goal_on", ".", "items", "(", ")", "]", "+", "[", "(", "'Stackable'", ",", "name", ",", "stove", ")", "for", "name", ",", "stove", "in", "product", "(", "task", ".", "goal_cooked", ",", "STOVES", ")", "]", "+", "[", "(", "'Pressed'", ",", "name", ")", "for", "name", "in", "belief", ".", "pressed", "]", "+", "[", "(", "'Cookable'", ",", "name", ")", "for", "name", "in", "task", ".", "goal_cooked", "]", "+", "[", "(", "'Cooked'", ",", "name", ")", "for", "name", "in", "belief", ".", "cooked", "]", "+", "[", "(", "'Status'", ",", "status", ")", "for", "status", "in", "DOOR_STATUSES", "]", "+", "[", "(", "'Knob'", ",", "knob", ")", "for", "knob", "in", "KNOBS", "]", "+", "[", "(", "'Joint'", ",", "knob", ")", "for", "knob", "in", "KNOBS", "]", "+", "[", "(", "'Liquid'", ",", "liquid", ")", "for", "_", ",", "liquid", "in", "task", ".", "init_liquid", "]", "+", "[", "(", "'HasLiquid'", ",", "cup", ",", "liquid", ")", "for", "cup", ",", "liquid", "in", "belief", ".", "liquid", "]", "+", "[", "(", "'StoveKnob'", ",", "STOVE_TEMPLATE", ".", "format", "(", "loc", ")", ",", "KNOB_TEMPLATE", ".", "format", "(", "loc", ")", ")", "for", "loc", "in", "STOVE_LOCATIONS", "]", "+", "[", "(", "'GraspType'", ",", "ty", ")", "for", "ty", "in", "task", ".", "grasp_types", "]", "# TODO: grasp_type per object", "\n", "#[('Type', obj_name, 'stove') for obj_name in STOVES] + \\", "\n", "#[('Camera', name) for name in world.cameras]", "\n", "if", "task", ".", "movable_base", ":", "\n", "        ", "init", ".", "append", "(", "(", "'MovableBase'", ",", ")", ")", "\n", "", "if", "fixed_base", ":", "\n", "        ", "init", ".", "append", "(", "(", "'InitBConf'", ",", "init_bq", ")", ")", "\n", "", "if", "task", ".", "noisy_base", ":", "\n", "        ", "init", ".", "append", "(", "(", "'NoisyBase'", ",", ")", ")", "\n", "\n", "", "compute_pose_kin", "=", "get_compute_pose_kin", "(", "world", ")", "\n", "compute_angle_kin", "=", "get_compute_angle_kin", "(", "world", ")", "\n", "\n", "initial_poses", "=", "{", "}", "\n", "for", "joint_name", ",", "init_conf", "in", "belief", ".", "door_confs", ".", "items", "(", ")", ":", "\n", "        ", "if", "joint_name", "in", "DRAWER_JOINTS", ":", "\n", "            ", "init", ".", "append", "(", "(", "'Drawer'", ",", "joint_name", ")", ")", "\n", "", "if", "joint_name", "in", "CABINET_JOINTS", ":", "\n", "            ", "init", ".", "append", "(", "(", "'Cabinet'", ",", "joint_name", ")", ")", "\n", "", "joint", "=", "joint_from_name", "(", "world", ".", "kitchen", ",", "joint_name", ")", "\n", "surface_name", "=", "surface_from_joint", "(", "joint_name", ")", "\n", "init", ".", "append", "(", "(", "'SurfaceJoint'", ",", "surface_name", ",", "joint_name", ")", ")", "\n", "# Relies on the fact that drawers have identical surface and link names", "\n", "link_name", "=", "get_link_name", "(", "world", ".", "kitchen", ",", "child_link_from_joint", "(", "joint", ")", ")", "\n", "#link_name = str(link_name.decode('UTF-8'))", "\n", "#link_name = str(link_name.encode('ascii','ignore'))", "\n", "for", "conf", "in", "{", "init_conf", ",", "world", ".", "open_kitchen_confs", "[", "joint", "]", ",", "world", ".", "closed_kitchen_confs", "[", "joint", "]", "}", ":", "\n", "# TODO: return to initial poses?", "\n", "            ", "world_pose", ",", "=", "compute_angle_kin", "(", "link_name", ",", "joint_name", ",", "conf", ")", "\n", "init", ".", "extend", "(", "[", "\n", "(", "'Joint'", ",", "joint_name", ")", ",", "\n", "(", "'Angle'", ",", "joint_name", ",", "conf", ")", ",", "\n", "(", "'Obstacle'", ",", "link_name", ")", ",", "\n", "(", "'AngleKin'", ",", "link_name", ",", "world_pose", ",", "joint_name", ",", "conf", ")", ",", "\n", "(", "'WorldPose'", ",", "link_name", ",", "world_pose", ")", ",", "\n", "]", ")", "\n", "if", "joint", "in", "world", ".", "kitchen_joints", ":", "\n", "                ", "init", ".", "extend", "(", "[", "\n", "(", "'Sample'", ",", "world_pose", ")", ",", "\n", "#('Value', world_pose), # comment out?", "\n", "]", ")", "\n", "", "if", "conf", "==", "init_conf", ":", "\n", "                ", "initial_poses", "[", "link_name", "]", "=", "world_pose", "\n", "init", ".", "extend", "(", "[", "\n", "(", "'AtAngle'", ",", "joint_name", ",", "conf", ")", ",", "\n", "(", "'AtWorldPose'", ",", "link_name", ",", "world_pose", ")", ",", "\n", "]", ")", "\n", "\n", "", "", "", "for", "surface_name", "in", "ALL_SURFACES", ":", "\n", "        ", "if", "surface_name", "in", "OPEN_SURFACES", ":", "\n", "            ", "init", ".", "append", "(", "(", "'Counter'", ",", "surface_name", ")", ")", "# Fixed surface", "\n", "", "if", "surface_name", "in", "DRAWERS", ":", "\n", "            ", "init", ".", "append", "(", "(", "'Drawer'", ",", "surface_name", ")", ")", "\n", "", "surface", "=", "surface_from_name", "(", "surface_name", ")", "\n", "surface_link", "=", "link_from_name", "(", "world", ".", "kitchen", ",", "surface", ".", "link", ")", "\n", "parent_joint", "=", "parent_joint_from_link", "(", "surface_link", ")", "\n", "if", "parent_joint", "not", "in", "world", ".", "kitchen_joints", ":", "\n", "# TODO: attach to world frame?", "\n", "            ", "world_pose", "=", "RelPose", "(", "world", ".", "kitchen", ",", "surface_link", ",", "init", "=", "True", ")", "\n", "initial_poses", "[", "surface_name", "]", "=", "world_pose", "\n", "init", "+=", "[", "\n", "#('RelPose', surface_name, world_pose, 'world'),", "\n", "(", "'WorldPose'", ",", "surface_name", ",", "world_pose", ")", ",", "\n", "#('AtRelPose', surface_name, world_pose, 'world'),", "\n", "(", "'AtWorldPose'", ",", "surface_name", ",", "world_pose", ")", ",", "\n", "(", "'Sample'", ",", "world_pose", ")", ",", "\n", "#('Value', world_pose),", "\n", "]", "\n", "", "init", ".", "extend", "(", "[", "\n", "(", "'CheckNearby'", ",", "surface_name", ")", ",", "\n", "#('InitPose', world_pose),", "\n", "(", "'Localized'", ",", "surface_name", ")", ",", "\n", "]", ")", "\n", "for", "grasp_type", "in", "task", ".", "grasp_types", ":", "\n", "            ", "if", "(", "surface_name", "in", "OPEN_SURFACES", ")", "or", "has_place_database", "(", "world", ".", "robot_name", ",", "surface_name", ",", "grasp_type", ")", ":", "\n", "                ", "init", ".", "append", "(", "(", "'AdmitsGraspType'", ",", "surface_name", ",", "grasp_type", ")", ")", "\n", "\n", "", "", "", "if", "belief", ".", "grasped", "is", "None", ":", "\n", "        ", "init", ".", "extend", "(", "[", "\n", "(", "'HandEmpty'", ",", ")", ",", "\n", "(", "'GConf'", ",", "init_gq", ")", ",", "\n", "(", "'AtGConf'", ",", "init_gq", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "obj_name", "=", "belief", ".", "grasped", ".", "body_name", "\n", "assert", "obj_name", "not", "in", "belief", ".", "pose_dists", "\n", "grasp", "=", "belief", ".", "grasped", "\n", "init", "+=", "[", "\n", "# Static", "\n", "#('Graspable', obj_name),", "\n", "(", "'Grasp'", ",", "obj_name", ",", "grasp", ")", ",", "\n", "(", "'IsGraspType'", ",", "obj_name", ",", "grasp", ",", "grasp", ".", "grasp_type", ")", ",", "\n", "# Fluent", "\n", "(", "'AtGrasp'", ",", "obj_name", ",", "grasp", ")", ",", "\n", "(", "'Holding'", ",", "obj_name", ")", ",", "\n", "(", "'Localized'", ",", "obj_name", ")", ",", "\n", "]", "\n", "init", ".", "extend", "(", "(", "'ValidGraspType'", ",", "obj_name", ",", "grasp_type", ")", "for", "grasp_type", "in", "task", ".", "grasp_types", "\n", "if", "implies", "(", "world", ".", "is_real", "(", ")", ",", "is_valid_grasp_type", "(", "obj_name", ",", "grasp_type", ")", ")", ")", "\n", "\n", "", "for", "obj_name", "in", "world", ".", "movable", ":", "\n", "        ", "obj_type", "=", "type_from_name", "(", "obj_name", ")", "\n", "if", "obj_type", "in", "BOWLS", ":", "\n", "            ", "init", ".", "append", "(", "(", "'Bowl'", ",", "obj_name", ")", ")", "\n", "", "else", ":", "\n", "            ", "init", ".", "append", "(", "(", "'Obstacle'", ",", "obj_name", ")", ")", "# TODO: hack to place within bowls", "\n", "", "if", "obj_type", "in", "COOKABLE", ":", "\n", "            ", "init", ".", "append", "(", "(", "'Cookable'", ",", "obj_name", ")", ")", "\n", "", "if", "obj_type", "in", "POURABLE", ":", "\n", "            ", "init", ".", "append", "(", "(", "'Pourable'", ",", "obj_name", ")", ")", "\n", "", "init", "+=", "[", "\n", "(", "'Entity'", ",", "obj_name", ")", ",", "\n", "(", "'CheckNearby'", ",", "obj_name", ")", ",", "\n", "]", "+", "[", "(", "'Stackable'", ",", "obj_name", ",", "counter", ")", "for", "counter", "in", "set", "(", "ALL_SURFACES", ")", "&", "set", "(", "COUNTERS", ")", "]", "\n", "\n", "# TODO: track poses over time to produce estimates", "\n", "", "for", "obj_name", ",", "pose_dist", "in", "belief", ".", "pose_dists", ".", "items", "(", ")", ":", "\n", "        ", "dist_support", "=", "pose_dist", ".", "dist", ".", "support", "(", ")", "\n", "localized", "=", "pose_dist", ".", "is_localized", "(", ")", "\n", "graspable", "=", "True", "\n", "if", "localized", ":", "\n", "            ", "init", ".", "append", "(", "(", "'Localized'", ",", "obj_name", ")", ")", "\n", "[", "rel_pose", "]", "=", "dist_support", "\n", "roll", ",", "pitch", ",", "yaw", "=", "euler_from_quat", "(", "quat_from_pose", "(", "rel_pose", ".", "get_reference_from_body", "(", ")", ")", ")", "\n", "if", "(", "MAX_ERROR", "<", "abs", "(", "roll", ")", ")", "or", "(", "MAX_ERROR", "<", "abs", "(", "pitch", ")", ")", ":", "\n", "                ", "graspable", "=", "False", "\n", "print", "(", "'{} has an invalid orientation: roll={:.3f}, pitch={:.3f}'", ".", "format", "(", "obj_name", ",", "roll", ",", "pitch", ")", ")", "\n", "", "", "if", "graspable", ":", "\n", "#init.append(('Graspable', obj_name))", "\n", "            ", "init", ".", "extend", "(", "(", "'ValidGraspType'", ",", "obj_name", ",", "grasp_type", ")", "for", "grasp_type", "in", "task", ".", "grasp_types", "\n", "if", "implies", "(", "world", ".", "is_real", "(", ")", ",", "is_valid_grasp_type", "(", "obj_name", ",", "grasp_type", ")", ")", ")", "\n", "\n", "# Could also fully decompose into points (but many samples)", "\n", "# Could immediately add likely points for collision checking", "\n", "", "for", "rel_pose", "in", "(", "dist_support", "if", "localized", "else", "pose_dist", ".", "decompose", "(", ")", ")", ":", "\n", "            ", "surface_name", "=", "rel_pose", ".", "support", "\n", "if", "surface_name", "is", "None", ":", "\n", "# Treats as obstacle", "\n", "# TODO: could temporarily add to fixed", "\n", "                ", "world_pose", "=", "rel_pose", "\n", "init", "+=", "[", "\n", "(", "'WorldPose'", ",", "obj_name", ",", "world_pose", ")", ",", "\n", "(", "'AtWorldPose'", ",", "obj_name", ",", "world_pose", ")", ",", "\n", "]", "\n", "poses", "=", "[", "world_pose", "]", "\n", "#raise RuntimeError(obj_name, supporting)", "\n", "", "else", ":", "\n", "                ", "surface_pose", "=", "initial_poses", "[", "surface_name", "]", "\n", "world_pose", ",", "=", "compute_pose_kin", "(", "obj_name", ",", "rel_pose", ",", "surface_name", ",", "surface_pose", ")", "\n", "init", "+=", "[", "\n", "# Static", "\n", "(", "'RelPose'", ",", "obj_name", ",", "rel_pose", ",", "surface_name", ")", ",", "\n", "(", "'WorldPose'", ",", "obj_name", ",", "world_pose", ")", ",", "\n", "(", "'PoseKin'", ",", "obj_name", ",", "world_pose", ",", "rel_pose", ",", "surface_name", ",", "surface_pose", ")", ",", "\n", "# Fluent", "\n", "(", "'AtRelPose'", ",", "obj_name", ",", "rel_pose", ",", "surface_name", ")", ",", "\n", "(", "'AtWorldPose'", ",", "obj_name", ",", "world_pose", ")", ",", "\n", "]", "\n", "if", "localized", ":", "\n", "                    ", "init", ".", "append", "(", "(", "'On'", ",", "obj_name", ",", "surface_name", ")", ")", "\n", "", "poses", "=", "[", "rel_pose", ",", "world_pose", "]", "\n", "", "for", "pose", "in", "poses", ":", "\n", "                ", "if", "isinstance", "(", "pose", ",", "PoseDist", ")", ":", "\n", "                    ", "init", ".", "append", "(", "(", "'Dist'", ",", "pose", ")", ")", "\n", "", "else", ":", "\n", "                    ", "init", ".", "extend", "(", "[", "(", "'Sample'", ",", "pose", ")", "]", ")", "#, ('Value', pose)])", "\n", "\n", "#for body, ty in problem.body_types:", "\n", "#    init += [('Type', body, ty)]", "\n", "#bodies_from_type = get_bodies_from_type(problem)", "\n", "#bodies = bodies_from_type[get_parameter_name(ty)] if is_parameter(ty) else [ty]", "\n", "\n", "", "", "", "", "goal_formula", "=", "get_goal", "(", "belief", ",", "init", ")", "\n", "stream_pddl", ",", "stream_map", "=", "get_streams", "(", "world", ",", "teleport_base", "=", "task", ".", "teleport_base", ",", "**", "kwargs", ")", "\n", "\n", "print", "(", "'Constants:'", ",", "constant_map", ")", "\n", "print", "(", "'Init:'", ",", "sorted", "(", "init", ",", "key", "=", "lambda", "f", ":", "f", "[", "0", "]", ")", ")", "\n", "print", "(", "'Goal:'", ",", "goal_formula", ")", "\n", "#print('Streams:', stream_map.keys()) # DEBUG", "\n", "\n", "return", "PDDLProblem", "(", "domain_pddl", ",", "constant_map", ",", "stream_pddl", ",", "stream_map", ",", "init", ",", "goal_formula", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.replan.is_optimistic": [[34, 36], ["isinstance", "arg.startswith"], "function", ["None"], ["def", "is_optimistic", "(", "arg", ")", ":", "\n", "    ", "return", "isinstance", "(", "arg", ",", "str", ")", "and", "arg", ".", "startswith", "(", "OPT_PREFIX", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.replan.test_reusable": [[37, 42], ["replan.is_optimistic", "REUSE_ARGUMENTS.get", "isinstance"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.replan.is_optimistic"], ["", "def", "test_reusable", "(", "world", ",", "name", ",", "index", ",", "arg", ")", ":", "\n", "    ", "if", "is_optimistic", "(", "arg", ")", ":", "\n", "        ", "return", "False", "\n", "", "indices", "=", "REUSE_ARGUMENTS", ".", "get", "(", "name", ",", "[", "]", ")", "\n", "return", "(", "index", "in", "indices", ")", "or", "isinstance", "(", "arg", ",", "str", ")", "# or (isinstance(arg, FConf) and (arg in world.constants))", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.replan.make_wild_skeleton": [[43, 57], ["skeleton.append", "pddlstream.language.constants.Action", "replan.test_reusable", "enumerate"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.replan.test_reusable"], ["", "def", "make_wild_skeleton", "(", "world", ",", "plan", ")", ":", "\n", "# Can always constrain grasps and selected poses", "\n", "# Could store previous values to suggest new ones", "\n", "# Recover skeleton", "\n", "# Save parameters that shouldn't change", "\n", "# And keep their evaluations", "\n", "# If all args the same", "\n", "    ", "skeleton", "=", "[", "]", "\n", "for", "name", ",", "args", "in", "plan", ":", "\n", "        ", "new_args", "=", "[", "arg", "if", "test_reusable", "(", "world", ",", "name", ",", "index", ",", "arg", ")", "else", "WILD", "\n", "for", "index", ",", "arg", "in", "enumerate", "(", "args", ")", "]", "\n", "skeleton", ".", "append", "(", "Action", "(", "name", ",", "new_args", ")", ")", "\n", "#print(len(skeleton), skeleton[-1])", "\n", "", "return", "skeleton", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.replan.make_exact_skeleton": [[58, 88], ["enumerate", "skeleton.append", "replan.test_reusable", "pddlstream.language.constants.Action", "new_args.append", "id", "new_args.append", "replan.is_optimistic", "[].lower", "next", "count_from_prefix.setdefault", "itertools.count", "len", "str"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.replan.test_reusable", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.replan.is_optimistic"], ["", "def", "make_exact_skeleton", "(", "world", ",", "plan", ")", ":", "\n", "# TODO: spend more effort on samples that were previously discovered", "\n", "# TODO: possibly reuse the kinematic solutions as seeds", "\n", "#arg_from_id = {}", "\n", "    ", "var_from_id", "=", "{", "}", "\n", "count_from_prefix", "=", "{", "}", "\n", "skeleton", "=", "[", "]", "\n", "for", "name", ",", "args", "in", "plan", ":", "\n", "        ", "new_args", "=", "[", "]", "\n", "for", "idx", ",", "arg", "in", "enumerate", "(", "args", ")", ":", "\n", "#arg_from_id[id(arg)] = arg", "\n", "            ", "if", "test_reusable", "(", "world", ",", "name", ",", "idx", ",", "arg", ")", ":", "\n", "                ", "new_args", ".", "append", "(", "arg", ")", "\n", "", "else", ":", "\n", "                ", "key", "=", "id", "(", "arg", ")", "\n", "if", "key", "not", "in", "var_from_id", ":", "\n", "                    ", "if", "is_optimistic", "(", "arg", ")", ":", "\n", "                        ", "var_from_id", "[", "key", "]", "=", "'?{}'", ".", "format", "(", "arg", "[", "len", "(", "OPT_PREFIX", ")", ":", "]", ")", "# WILD", "\n", "", "else", ":", "\n", "                        ", "prefix", "=", "str", "(", "arg", ")", "[", ":", "2", "]", ".", "lower", "(", ")", "# 'w'", "\n", "num", "=", "next", "(", "count_from_prefix", ".", "setdefault", "(", "prefix", ",", "count", "(", ")", ")", ")", "\n", "var_from_id", "[", "key", "]", "=", "'?{}{}'", ".", "format", "(", "prefix", ",", "num", ")", "\n", "", "", "new_args", ".", "append", "(", "var_from_id", "[", "key", "]", ")", "\n", "", "", "skeleton", ".", "append", "(", "Action", "(", "name", ",", "new_args", ")", ")", "\n", "#print(skeleton[-1])", "\n", "#for i, var in sorted(var_from_id.items(), key=lambda pair: pair[-1]):", "\n", "#    print(arg_from_id[i], var)", "\n", "# TODO: could fall back on wild if this fails", "\n", "# TODO: this fails for placing (due to carry_conf / rest_conf disagreement)", "\n", "", "return", "skeleton", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.replan.reuse_facts": [[91, 119], ["set", "pddlstream.algorithms.constraints.ORDER_PREDICATE.format", "pddlstream.algorithms.algorithm.parse_domain", "pddlstream.algorithms.downward.get_fluents", "pddlstream.language.constants.get_prefix", "all", "new_facts.append", "set.add", "pddlstream.language.constants.is_parameter", "pddlstream.utils.hash_or_id", "isinstance", "pddlstream.language.constants.get_args", "pddlstream.utils.hash_or_id"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.add"], ["", "def", "reuse_facts", "(", "problem", ",", "certificate", ",", "skeleton", ")", ":", "\n", "# TODO: repackage streams", "\n", "# TODO: recover the full axiom + action plan", "\n", "# TODO: recover the plan preimage annotated with use time", "\n", "# Some supporting args are quantified out and thus lack some facts", "\n", "    ", "new_facts", "=", "[", "]", "\n", "if", "skeleton", "is", "None", ":", "\n", "        ", "return", "new_facts", "\n", "", "reuse_objs", "=", "set", "(", ")", "\n", "for", "action", ",", "args", "in", "skeleton", ":", "\n", "        ", "for", "arg", "in", "args", ":", "\n", "            ", "if", "(", "arg", "!=", "WILD", ")", "and", "not", "is_parameter", "(", "arg", ")", ":", "\n", "                ", "reuse_objs", ".", "add", "(", "hash_or_id", "(", "arg", ")", ")", "\n", "\n", "# The reuse relpose omission is due to the fact that the initial pose was selected", "\n", "# (which is populated in the initial state)", "\n", "", "", "", "order_predicate", "=", "ORDER_PREDICATE", ".", "format", "(", "''", ")", "\n", "domain", "=", "parse_domain", "(", "problem", ".", "domain_pddl", ")", "\n", "fluents", "=", "get_fluents", "(", "domain", ")", "\n", "for", "fact", "in", "certificate", ".", "preimage_facts", ":", "\n", "        ", "predicate", "=", "get_prefix", "(", "fact", ")", "\n", "if", "(", "predicate", "in", "{", "order_predicate", ",", "EQ", "}", ")", "or", "(", "predicate", "in", "fluents", ")", ":", "\n", "# Could technically evaluate functions as well", "\n", "            ", "continue", "\n", "", "if", "all", "(", "isinstance", "(", "arg", ",", "str", ")", "or", "(", "hash_or_id", "(", "arg", ")", "in", "reuse_objs", ")", "\n", "for", "arg", "in", "get_args", "(", "fact", ")", ")", ":", "\n", "            ", "new_facts", ".", "append", "(", "fact", ")", "\n", "", "", "return", "new_facts", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.replan.compute_plan_cost": [[122, 129], ["None"], "function", ["None"], ["", "def", "compute_plan_cost", "(", "plan", ")", ":", "\n", "    ", "if", "plan", "is", "None", ":", "\n", "        ", "return", "INF", "\n", "", "cost", "=", "0", "\n", "for", "name", ",", "args", "in", "plan", ":", "\n", "        ", "cost", "+=", "ACTION_COSTS", "[", "name", "]", "\n", "", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.replan.get_plan_postfix": [[131, 134], ["isinstance", "len"], "function", ["None"], ["", "def", "get_plan_postfix", "(", "plan", ",", "plan_prefix", ")", ":", "\n", "    ", "return", "[", "action", "for", "action", "in", "plan", "[", "len", "(", "plan_prefix", ")", ":", "]", "\n", "if", "isinstance", "(", "action", ",", "Action", ")", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.__init__": [[56, 74], ["dict", "set", "set", "set", "len", "zip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "world", ",", "pose_dists", "=", "{", "}", ",", "grasped", "=", "None", ")", ":", "\n", "        ", "self", ".", "world", "=", "world", "\n", "self", ".", "pose_dists", "=", "pose_dists", "\n", "self", ".", "grasped", "=", "grasped", "# grasped or holding?", "\n", "#colors = spaced_colors(len(self.objects))", "\n", "colors", "=", "[", "GREEN", "]", "*", "len", "(", "self", ".", "objects", ")", "\n", "self", ".", "color_from_name", "=", "dict", "(", "zip", "(", "self", ".", "objects", ",", "colors", ")", ")", "\n", "self", ".", "observations", "=", "[", "]", "\n", "self", ".", "handles", "=", "[", "]", "\n", "\n", "# TODO: store state history", "\n", "self", ".", "base_conf", "=", "None", "\n", "self", ".", "arm_conf", "=", "None", "\n", "self", ".", "gripper_conf", "=", "None", "\n", "self", ".", "door_confs", "=", "{", "}", "\n", "self", ".", "pressed", "=", "set", "(", ")", "\n", "self", ".", "cooked", "=", "set", "(", ")", "\n", "self", ".", "liquid", "=", "set", "(", ")", "\n", "", "def", "update_state", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.update_state": [[74, 97], ["src.utils.FConf", "src.utils.FConf", "src.utils.FConf", "belief.Belief.check_consistent", "print", "print", "pybullet_tools.utils.get_joint_name", "pybullet_tools.utils.get_joint_position", "belief.Belief.update_door_conf", "belief.Belief.update_door_conf", "src.utils.are_confs_close", "src.utils.are_confs_close"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.check_consistent", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.update_door_conf", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.update_door_conf", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.are_confs_close", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.are_confs_close"], ["", "def", "update_state", "(", "self", ")", ":", "\n", "# TODO: apply this directly from observations", "\n", "# No use applying this to base confs", "\n", "        ", "self", ".", "base_conf", "=", "FConf", "(", "self", ".", "world", ".", "robot", ",", "self", ".", "world", ".", "base_joints", ",", "init", "=", "True", ")", "\n", "arm_conf", "=", "FConf", "(", "self", ".", "world", ".", "robot", ",", "self", ".", "world", ".", "arm_joints", ",", "init", "=", "True", ")", "\n", "if", "(", "self", ".", "arm_conf", "is", "None", ")", "or", "not", "are_confs_close", "(", "arm_conf", ",", "self", ".", "arm_conf", ",", "tol", "=", "ARM_TOLERANCE", ")", ":", "\n", "            ", "self", ".", "arm_conf", "=", "arm_conf", "\n", "", "else", ":", "\n", "            ", "print", "(", "'At anticipated arm conf'", ")", "\n", "", "gripper_conf", "=", "FConf", "(", "self", ".", "world", ".", "robot", ",", "self", ".", "world", ".", "gripper_joints", ",", "init", "=", "True", ")", "\n", "if", "(", "self", ".", "gripper_conf", "is", "None", ")", "or", "not", "are_confs_close", "(", "gripper_conf", ",", "self", ".", "gripper_conf", ",", "tol", "=", "GRIPPER_TOLERANCE", ")", ":", "\n", "            ", "self", ".", "gripper_conf", "=", "gripper_conf", "\n", "", "else", ":", "\n", "            ", "print", "(", "'At anticipated gripper conf'", ")", "\n", "\n", "# TODO: do I still need to test if the current values are equal to the last ones?", "\n", "", "for", "joint", "in", "self", ".", "world", ".", "kitchen_joints", ":", "\n", "            ", "name", "=", "get_joint_name", "(", "self", ".", "world", ".", "kitchen", ",", "joint", ")", "\n", "position", "=", "get_joint_position", "(", "self", ".", "world", ".", "kitchen", ",", "joint", ")", "\n", "self", ".", "update_door_conf", "(", "name", ",", "position", ")", "\n", "self", ".", "update_door_conf", "(", "name", ",", "position", ")", "\n", "#wait_for_user()", "\n", "", "return", "self", ".", "check_consistent", "(", ")", "\n", "", "def", "update_door_conf", "(", "self", ",", "name", ",", "position", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.update_door_conf": [[97, 106], ["pybullet_tools.utils.joint_from_name", "src.utils.FConf", "print", "src.utils.are_confs_close"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.are_confs_close"], ["", "def", "update_door_conf", "(", "self", ",", "name", ",", "position", ")", ":", "\n", "        ", "joint", "=", "joint_from_name", "(", "self", ".", "world", ".", "kitchen", ",", "name", ")", "\n", "conf", "=", "FConf", "(", "self", ".", "world", ".", "kitchen", ",", "[", "joint", "]", ",", "[", "position", "]", ",", "init", "=", "True", ")", "\n", "if", "(", "name", "not", "in", "self", ".", "door_confs", ")", "or", "not", "are_confs_close", "(", "conf", ",", "self", ".", "door_confs", "[", "name", "]", ",", "tol", "=", "1e-3", ")", ":", "\n", "# TODO: different threshold for drawers and doors", "\n", "            ", "self", ".", "door_confs", "[", "name", "]", "=", "conf", "\n", "", "else", ":", "\n", "            ", "print", "(", "'At anticipated conf for door {}'", ".", "format", "(", "name", ")", ")", "\n", "", "return", "self", ".", "door_confs", "[", "name", "]", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.holding": [[106, 111], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "holding", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "grasped", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "return", "self", ".", "grasped", ".", "body_name", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.placed": [[111, 114], ["sorted", "set", "belief.Belief.pose_dists.keys"], "methods", ["None"], ["", "@", "property", "\n", "def", "placed", "(", "self", ")", ":", "\n", "        ", "return", "sorted", "(", "set", "(", "self", ".", "pose_dists", ".", "keys", "(", ")", ")", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.objects": [[114, 120], ["set", "sorted", "set.add"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.add"], ["", "@", "property", "\n", "def", "objects", "(", "self", ")", ":", "\n", "        ", "objects", "=", "set", "(", "self", ".", "placed", ")", "\n", "if", "self", ".", "holding", "is", "not", "None", ":", "\n", "            ", "objects", ".", "add", "(", "self", ".", "holding", ")", "\n", "", "return", "sorted", "(", "objects", ")", "\n", "", "def", "is_gripper_closed", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.is_gripper_closed": [[120, 130], ["pybullet_tools.utils.get_joint_positions", "sum", "src.utils.type_from_name"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.type_from_name"], ["", "def", "is_gripper_closed", "(", "self", ")", ":", "\n", "# TODO: base this on the object type", "\n", "        ", "if", "self", ".", "holding", "is", "not", "None", ":", "\n", "            ", "obj_type", "=", "type_from_name", "(", "self", ".", "holding", ")", "\n", "if", "obj_type", "not", "in", "TIN_OBJECTS", ":", "\n", "                ", "return", "False", "\n", "# each joint in [0.00, 0.04] (units coincide with meters on the physical gripper)", "\n", "", "", "current_gq", "=", "get_joint_positions", "(", "self", ".", "world", ".", "robot", ",", "self", ".", "world", ".", "gripper_joints", ")", "\n", "gripper_width", "=", "sum", "(", "current_gq", ")", "\n", "return", "gripper_width", "<=", "MIN_GRASP_WIDTH", "\n", "", "def", "check_consistent", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.check_consistent": [[130, 140], ["belief.Belief.is_gripper_closed", "print"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.is_gripper_closed"], ["", "def", "check_consistent", "(", "self", ")", ":", "\n", "# https://github.mit.edu/Learning-and-Intelligent-Systems/ltamp_pr2/blob/d1e6024c5c13df7edeab3a271b745e656a794b02/control_tools/execution.py#L163", "\n", "# https://github.mit.edu/Learning-and-Intelligent-Systems/ltamp_pr2/blob/master/control_tools/pr2_controller.py#L93", "\n", "# https://github.mit.edu/caelan/mudfish/blob/master/scripts/planner.py#L346", "\n", "        ", "if", "(", "self", ".", "grasped", "is", "not", "None", ")", "and", "self", ".", "is_gripper_closed", "(", ")", ":", "\n", "# TODO: need to add the grasped object back into the dist", "\n", "            ", "self", ".", "grasped", "=", "None", "\n", "print", "(", "'Inconsistent belief!'", ")", "\n", "return", "False", "\n", "", "return", "True", "\n", "", "def", "update", "(", "self", ",", "detections", ",", "n_samples", "=", "25", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.update": [[140, 161], ["time.time", "belief.Belief.observations.append", "belief.Belief.update_state", "print", "pybullet_tools.utils.LockRenderer", "pybullet_tools.utils.WorldSaver", "src.observe.relative_detections", "order.extend", "pybullet_tools.utils.elapsed_time", "len", "src.observe.fix_detections", "belief.Belief.pose_dists[].update", "set", "set"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.update_state", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.observe.relative_detections", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.observe.fix_detections", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.update"], ["", "def", "update", "(", "self", ",", "detections", ",", "n_samples", "=", "25", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "observations", ".", "append", "(", "detections", ")", "\n", "# Processing detected first", "\n", "# Could simply sample from the set of worlds and update", "\n", "# Would need to sample many worlds with name at different poses", "\n", "# Instead, let the moving object take on different poses", "\n", "with", "LockRenderer", "(", ")", ":", "\n", "            ", "with", "WorldSaver", "(", ")", ":", "\n", "                ", "if", "REPAIR_DETECTIONS", ":", "\n", "                    ", "detections", "=", "fix_detections", "(", "self", ",", "detections", ")", "# TODO: skip if in sim", "\n", "", "detections", "=", "relative_detections", "(", "self", ",", "detections", ")", "\n", "order", "=", "[", "name", "for", "name", "in", "detections", "]", "# Detected", "\n", "order", ".", "extend", "(", "set", "(", "self", ".", "pose_dists", ")", "-", "set", "(", "order", ")", ")", "# Not detected", "\n", "for", "name", "in", "order", ":", "\n", "                    ", "self", ".", "pose_dists", "[", "name", "]", "=", "self", ".", "pose_dists", "[", "name", "]", ".", "update", "(", "\n", "self", ",", "detections", ",", "n_samples", "=", "n_samples", ")", "\n", "", "", "", "self", ".", "update_state", "(", ")", "\n", "print", "(", "'Update time: {:.3f} sec for {} objects and {} samples'", ".", "format", "(", "\n", "elapsed_time", "(", "start_time", ")", ",", "len", "(", "order", ")", ",", "n_samples", ")", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.sample": [[162, 175], ["pybullet_tools.utils.randomize", "belief.Belief.pose_dists.items", "belief.Belief.world.get_body", "pose.assign", "any", "pose_dist.sample_discrete", "pose_dist.sample", "pybullet_tools.utils.pairwise_collision", "belief.Belief.world.get_body"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.sample_discrete", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.sample", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body"], ["", "def", "sample", "(", "self", ",", "discrete", "=", "True", ")", ":", "\n", "# TODO: timeout if unable to find", "\n", "        ", "while", "True", ":", "\n", "            ", "poses", "=", "{", "}", "\n", "for", "name", ",", "pose_dist", "in", "randomize", "(", "self", ".", "pose_dists", ".", "items", "(", ")", ")", ":", "\n", "                ", "body", "=", "self", ".", "world", ".", "get_body", "(", "name", ")", "\n", "pose", "=", "pose_dist", ".", "sample_discrete", "(", ")", "if", "discrete", "else", "pose_dist", ".", "sample", "(", ")", "\n", "pose", ".", "assign", "(", ")", "\n", "if", "any", "(", "pairwise_collision", "(", "body", ",", "self", ".", "world", ".", "get_body", "(", "other", ")", ")", "for", "other", "in", "poses", ")", ":", "\n", "                    ", "break", "\n", "", "poses", "[", "name", "]", "=", "pose", "\n", "", "else", ":", "\n", "                ", "return", "poses", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.sample_state": [[176, 185], ["belief.Belief.sample", "pybullet_tools.utils.WorldSaver", "belief.Belief.values", "src.command.State", "attachments.extend", "attachments.append", "belief.Belief.grasped.get_attachment"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.sample", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.get_attachment"], ["", "", "", "def", "sample_state", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pose_from_name", "=", "self", ".", "sample", "(", "**", "kwargs", ")", "\n", "world_saver", "=", "WorldSaver", "(", ")", "\n", "attachments", "=", "[", "]", "\n", "for", "pose", "in", "pose_from_name", ".", "values", "(", ")", ":", "\n", "            ", "attachments", ".", "extend", "(", "pose", ".", "confs", ")", "\n", "", "if", "self", ".", "grasped", "is", "not", "None", ":", "\n", "            ", "attachments", ".", "append", "(", "self", ".", "grasped", ".", "get_attachment", "(", ")", ")", "\n", "", "return", "State", "(", "self", ".", "world", ",", "savers", "=", "[", "world_saver", "]", ",", "attachments", "=", "attachments", ")", "\n", "#def resample(self):", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.dump": [[188, 193], ["print", "enumerate", "sorted", "print"], "methods", ["None"], ["", "def", "dump", "(", "self", ")", ":", "\n", "        ", "print", "(", "self", ")", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "sorted", "(", "self", ".", "pose_dists", ")", ")", ":", "\n", "#self.pose_dists[name].dump()", "\n", "            ", "print", "(", "i", ",", "name", ",", "self", ".", "pose_dists", "[", "name", "]", ")", "\n", "", "", "def", "draw", "(", "self", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.draw": [[193, 201], ["pybullet_tools.utils.LockRenderer", "pybullet_tools.utils.remove_handles", "pybullet_tools.utils.WorldSaver", "belief.Belief.pose_dists.items", "belief.Belief.handles.extend", "pose_dist.draw"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.draw"], ["", "", "def", "draw", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "LockRenderer", "(", "True", ")", ":", "\n", "            ", "remove_handles", "(", "self", ".", "handles", ")", "\n", "self", ".", "handles", "=", "[", "]", "\n", "with", "WorldSaver", "(", ")", ":", "\n", "                ", "for", "name", ",", "pose_dist", "in", "self", ".", "pose_dists", ".", "items", "(", ")", ":", "\n", "                    ", "self", ".", "handles", ".", "extend", "(", "pose_dist", ".", "draw", "(", "\n", "color", "=", "self", ".", "color_from_name", "[", "name", "]", ",", "**", "kwargs", ")", ")", "\n", "", "", "", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.__repr__": [[201, 204], ["pddlstream.utils.str_from_object"], "methods", ["None"], ["", "", "", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}(holding={}, placed={})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "holding", ",", "str_from_object", "(", "\n", "{", "name", ":", "self", ".", "pose_dists", "[", "name", "]", ".", "surface_dist", "for", "name", "in", "self", ".", "placed", "}", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.create_observable_pose_dist": [[207, 215], ["world.get_body", "world.get_supporting", "src.inference.PoseDist", "src.utils.RelPose", "src.utils.create_relative_pose", "examples.discrete_belief.dist.DeltaDist"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_supporting", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.create_relative_pose"], ["", "", "def", "create_observable_pose_dist", "(", "world", ",", "obj_name", ")", ":", "\n", "    ", "body", "=", "world", ".", "get_body", "(", "obj_name", ")", "\n", "surface_name", "=", "world", ".", "get_supporting", "(", "obj_name", ")", "\n", "if", "surface_name", "is", "None", ":", "\n", "        ", "pose", "=", "RelPose", "(", "body", ",", "init", "=", "True", ")", "# Treats as obstacle", "\n", "", "else", ":", "\n", "        ", "pose", "=", "create_relative_pose", "(", "world", ",", "obj_name", ",", "surface_name", ",", "init", "=", "True", ")", "\n", "", "return", "PoseDist", "(", "world", ",", "obj_name", ",", "DeltaDist", "(", "pose", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.create_observable_belief": [[216, 223], ["pybullet_tools.utils.WorldSaver", "belief.Belief", "belief.create_observable_pose_dist"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.create_observable_pose_dist"], ["", "def", "create_observable_belief", "(", "world", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "WorldSaver", "(", ")", ":", "\n", "        ", "belief", "=", "Belief", "(", "world", ",", "pose_dists", "=", "{", "\n", "name", ":", "create_observable_pose_dist", "(", "world", ",", "name", ")", "\n", "for", "name", "in", "world", ".", "movable", "}", ",", "**", "kwargs", ")", "\n", "belief", ".", "task", "=", "world", ".", "task", "\n", "return", "belief", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.create_surface_pose_dist": [[224, 242], ["src.stream.get_stable_gen", "src.inference.PoseDist", "pybullet_tools.utils.LockRenderer", "examples.discrete_belief.dist.UniformDist", "pybullet_tools.utils.BodySaver", "world.get_body", "len", "surface_dist.condition.sample", "next", "src.stream.get_stable_gen.", "surface_dist.condition.condition", "poses.append"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_stable_gen", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.sample"], ["", "", "def", "create_surface_pose_dist", "(", "world", ",", "obj_name", ",", "surface_dist", ",", "n", "=", "NUM_PARTICLES", ")", ":", "\n", "# TODO: likely easier to just make a null surface below ground", "\n", "    ", "placement_gen", "=", "get_stable_gen", "(", "world", ",", "max_attempts", "=", "100", ",", "learned", "=", "True", ",", "\n", "pos_scale", "=", "1e-3", ",", "rot_scale", "=", "1e-2", ")", "\n", "poses", "=", "[", "]", "\n", "with", "LockRenderer", "(", ")", ":", "\n", "        ", "with", "BodySaver", "(", "world", ".", "get_body", "(", "obj_name", ")", ")", ":", "\n", "            ", "while", "len", "(", "poses", ")", "<", "n", ":", "\n", "                ", "surface_name", "=", "surface_dist", ".", "sample", "(", ")", "\n", "assert", "surface_name", "is", "not", "ELSEWHERE", "\n", "result", "=", "next", "(", "placement_gen", "(", "obj_name", ",", "surface_name", ")", ",", "None", ")", "\n", "if", "result", "is", "None", ":", "\n", "                    ", "surface_dist", "=", "surface_dist", ".", "condition", "(", "lambda", "s", ":", "s", "!=", "surface_name", ")", "\n", "", "else", ":", "\n", "                    ", "(", "rel_pose", ",", ")", "=", "result", "\n", "rel_pose", ".", "init", "=", "True", "\n", "poses", ".", "append", "(", "rel_pose", ")", "\n", "", "", "", "", "return", "PoseDist", "(", "world", ",", "obj_name", ",", "UniformDist", "(", "poses", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.create_surface_belief": [[243, 250], ["pybullet_tools.utils.WorldSaver", "belief.Belief", "belief.create_surface_pose_dist", "surface_dists.items"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.create_surface_pose_dist"], ["", "def", "create_surface_belief", "(", "world", ",", "surface_dists", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "WorldSaver", "(", ")", ":", "\n", "        ", "belief", "=", "Belief", "(", "world", ",", "pose_dists", "=", "{", "\n", "name", ":", "create_surface_pose_dist", "(", "world", ",", "name", ",", "surface_dist", ")", "\n", "for", "name", ",", "surface_dist", "in", "surface_dists", ".", "items", "(", ")", "}", ",", "**", "kwargs", ")", "\n", "belief", ".", "task", "=", "world", ".", "task", "\n", "return", "belief", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.delocalize_belief": [[253, 257], ["examples.discrete_belief.dist.UniformDist", "src.inference.PoseDist", "copy.copy"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.State.copy"], ["", "", "def", "delocalize_belief", "(", "belief", ",", "o", ",", "rp", ")", ":", "\n", "    ", "dist", "=", "UniformDist", "(", "[", "rp", ",", "copy", ".", "copy", "(", "rp", ")", "]", ")", "\n", "belief", ".", "pose_dists", "[", "o", "]", "=", "PoseDist", "(", "belief", ".", "world", ",", "o", ",", "dist", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.transition_belief_update": [[258, 314], ["belief.pressed.add", "belief.cooked.add", "belief.pressed.remove", "belief.cooked.add", "belief.liquid.discard", "belief.liquid.add", "src.utils.type_from_name", "belief.delocalize_belief", "print", "belief.is_gripper_closed", "belief.world.is_real", "belief.delocalize_belief", "src.inference.PoseDist", "NotImplementedError", "examples.discrete_belief.dist.DeltaDist"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.add", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.add", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.add", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.add", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.type_from_name", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.delocalize_belief", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.is_gripper_closed", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.is_real", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.delocalize_belief"], ["", "def", "transition_belief_update", "(", "belief", ",", "plan", ")", ":", "\n", "    ", "if", "plan", "is", "None", ":", "\n", "        ", "return", "False", "\n", "", "success", "=", "True", "\n", "for", "action", ",", "params", "in", "plan", ":", "\n", "        ", "if", "action", "in", "[", "'move_base'", ",", "'calibrate'", ",", "'detect'", "]", ":", "\n", "            ", "pass", "\n", "", "elif", "action", "==", "'press-on'", ":", "\n", "            ", "s", ",", "k", ",", "o", ",", "bq", ",", "aq", ",", "gq", ",", "at", "=", "params", "\n", "belief", ".", "pressed", ".", "add", "(", "k", ")", "\n", "belief", ".", "cooked", ".", "add", "(", "o", ")", "\n", "for", "bowl", ",", "liquid", "in", "belief", ".", "liquid", ":", "\n", "                ", "if", "bowl", "==", "o", ":", "\n", "                    ", "belief", ".", "cooked", ".", "add", "(", "liquid", ")", "\n", "", "", "", "elif", "action", "==", "'press-off'", ":", "\n", "            ", "s", ",", "k", ",", "o", ",", "bq", ",", "aq", ",", "gq", ",", "at", "=", "params", "\n", "belief", ".", "pressed", ".", "remove", "(", "k", ")", "\n", "", "elif", "action", "==", "'move_arm'", ":", "\n", "            ", "bq", ",", "aq1", ",", "aq2", ",", "at", "=", "params", "\n", "belief", ".", "arm_conf", "=", "aq2", "\n", "", "elif", "action", "==", "'move_gripper'", ":", "\n", "            ", "gq1", ",", "gq2", ",", "gt", "=", "params", "\n", "belief", ".", "gripper_conf", "=", "gq2", "\n", "", "elif", "action", "==", "'pull'", ":", "\n", "            ", "j", ",", "a1", ",", "a2", ",", "o", ",", "wp1", ",", "wp2", ",", "bq", ",", "aq1", ",", "aq2", ",", "gq", ",", "at", "=", "params", "\n", "belief", ".", "door_confs", "[", "j", "]", "=", "a2", "\n", "belief", ".", "arm_conf", "=", "aq2", "\n", "", "elif", "action", "==", "'pour'", ":", "\n", "            ", "bowl", ",", "wp", ",", "cup", ",", "g", ",", "liquid", ",", "bq", ",", "aq", ",", "at", "=", "params", "\n", "belief", ".", "liquid", ".", "discard", "(", "(", "cup", ",", "liquid", ")", ")", "\n", "belief", ".", "liquid", ".", "add", "(", "(", "bowl", ",", "liquid", ")", ")", "\n", "", "elif", "action", "==", "'pick'", ":", "\n", "            ", "o", ",", "p", ",", "g", ",", "rp", "=", "params", "[", ":", "4", "]", "\n", "obj_type", "=", "type_from_name", "(", "o", ")", "\n", "if", "(", "obj_type", "not", "in", "TIN_OBJECTS", ")", "or", "not", "belief", ".", "is_gripper_closed", "(", ")", ":", "\n", "                ", "del", "belief", ".", "pose_dists", "[", "o", "]", "\n", "belief", ".", "grasped", "=", "g", "\n", "# TODO: open gripper afterwards to ensure not in hand", "\n", "", "else", ":", "\n", "                ", "delocalize_belief", "(", "belief", ",", "o", ",", "rp", ")", "\n", "print", "(", "'Failed to grasp! Delocalizing belief'", ")", "\n", "success", "=", "False", "\n", "break", "\n", "", "", "elif", "action", "==", "'place'", ":", "\n", "            ", "o", ",", "p", ",", "g", ",", "rp", "=", "params", "[", ":", "4", "]", "\n", "belief", ".", "grasped", "=", "None", "\n", "if", "STOCHASTIC_PLACE", "and", "belief", ".", "world", ".", "is_real", "(", ")", ":", "\n", "                ", "delocalize_belief", "(", "belief", ",", "o", ",", "rp", ")", "\n", "", "else", ":", "\n", "                ", "belief", ".", "pose_dists", "[", "o", "]", "=", "PoseDist", "(", "belief", ".", "world", ",", "o", ",", "DeltaDist", "(", "rp", ")", ")", "\n", "", "", "elif", "action", "==", "'cook'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "action", ")", "\n", "# TODO: replan after every action", "\n", "", "", "return", "success", "\n", "", ""]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.State.__init__": [[36, 41], ["tuple"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "world", ",", "savers", "=", "[", "]", ",", "attachments", "=", "[", "]", ")", ":", "\n", "# a part of the state separate from PyBullet", "\n", "        ", "self", ".", "world", "=", "world", "\n", "self", ".", "savers", "=", "tuple", "(", "savers", ")", "\n", "self", ".", "attachments", "=", "{", "attachment", ".", "child", ":", "attachment", "for", "attachment", "in", "attachments", "}", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.State.bodies": [[41, 44], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "bodies", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "#return {saver.body for saver in self.savers} | set(self.attachments)", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.State.derive": [[45, 50], ["command.State.attachments.values", "attachment.assign"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign"], ["", "def", "derive", "(", "self", ")", ":", "\n", "        ", "for", "attachment", "in", "self", ".", "attachments", ".", "values", "(", ")", ":", "\n", "# Derived values", "\n", "# TODO: topological sort", "\n", "            ", "attachment", ".", "assign", "(", ")", "\n", "", "", "def", "copy", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.State.copy": [[50, 52], ["command.State", "command.State.attachments.values"], "methods", ["None"], ["", "", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "State", "(", "self", ".", "world", ",", "self", ".", "savers", ",", "self", ".", "attachments", ".", "values", "(", ")", ")", "\n", "#return copy.deepcopy(self)", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.State.assign": [[53, 57], ["command.State.derive", "saver.restore"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.State.derive"], ["", "def", "assign", "(", "self", ")", ":", "\n", "        ", "for", "saver", "in", "self", ".", "savers", ":", "\n", "            ", "saver", ".", "restore", "(", ")", "\n", "", "self", ".", "derive", "(", ")", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.State.__repr__": [[57, 59], ["list"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, {})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "list", "(", "self", ".", "savers", ")", ",", "self", ".", "attachments", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Command.__init__": [[76, 78], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "world", ")", ":", "\n", "        ", "self", ".", "world", "=", "world", "\n", "#@property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Command.bodies": [[81, 84], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "bodies", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Command.cost": [[84, 87], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "def", "reverse", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Command.reverse": [[87, 89], ["NotImplementedError"], "methods", ["None"], ["", "def", "reverse", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "def", "iterate", "(", "self", ",", "state", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Command.iterate": [[89, 91], ["NotImplementedError"], "methods", ["None"], ["", "def", "iterate", "(", "self", ",", "state", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "def", "simulate", "(", "self", ",", "state", ",", "time_per_step", "=", "DEFAULT_TIME_STEP", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Command.simulate": [[91, 96], ["enumerate", "command.Command.iterate", "state.derive", "pybullet_tools.utils.wait_for_duration"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Wait.iterate", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.State.derive"], ["", "def", "simulate", "(", "self", ",", "state", ",", "time_per_step", "=", "DEFAULT_TIME_STEP", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "j", ",", "_", "in", "enumerate", "(", "self", ".", "iterate", "(", "state", ")", ")", ":", "\n", "            ", "state", ".", "derive", "(", ")", "\n", "if", "j", "!=", "0", ":", "\n", "                ", "wait_for_duration", "(", "time_per_step", ")", "\n", "", "", "", "def", "execute", "(", "self", ",", "interface", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Command.execute": [[96, 98], ["NotImplementedError"], "methods", ["None"], ["", "", "", "def", "execute", "(", "self", ",", "interface", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Sequence.__init__": [[100, 104], ["tuple", "command.Sequence.__class__.__name__.lower"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "context", ",", "commands", "=", "[", "]", ",", "name", "=", "None", ")", ":", "\n", "        ", "self", ".", "context", "=", "context", "\n", "self", ".", "commands", "=", "tuple", "(", "commands", ")", "\n", "self", ".", "name", "=", "self", ".", "__class__", ".", "__name__", ".", "lower", "(", ")", "if", "name", "is", "None", "else", "name", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Sequence.bodies": [[104, 110], ["set", "set.update"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.update"], ["", "@", "property", "\n", "def", "bodies", "(", "self", ")", ":", "\n", "        ", "bodies", "=", "set", "(", "self", ".", "context", ".", "bodies", ")", "\n", "for", "command", "in", "self", ".", "commands", ":", "\n", "            ", "bodies", ".", "update", "(", "command", ".", "bodies", ")", "\n", "", "return", "bodies", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Sequence.cost": [[110, 113], ["sum"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "[", "0", "]", "+", "[", "command", ".", "cost", "for", "command", "in", "self", ".", "commands", "]", ")", "\n", "", "def", "reverse", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Sequence.reverse": [[113, 115], ["command.Sequence", "command.reverse", "reversed"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Wait.reverse"], ["", "def", "reverse", "(", "self", ")", ":", "\n", "        ", "return", "Sequence", "(", "self", ".", "context", ",", "[", "command", ".", "reverse", "(", ")", "for", "command", "in", "reversed", "(", "self", ".", "commands", ")", "]", ",", "name", "=", "self", ".", "name", ")", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Sequence.__repr__": [[115, 118], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "#return '[{}]'.format('->'.join(map(repr, self.commands)))", "\n", "        ", "return", "'{}({})'", ".", "format", "(", "self", ".", "name", ",", "len", "(", "self", ".", "commands", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Trajectory.__init__": [[122, 128], ["command.Command.__init__", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.Observation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "world", ",", "robot", ",", "joints", ",", "path", ",", "speed", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "Trajectory", ",", "self", ")", ".", "__init__", "(", "world", ")", "\n", "self", ".", "robot", "=", "robot", "\n", "self", ".", "joints", "=", "tuple", "(", "joints", ")", "\n", "self", ".", "path", "=", "tuple", "(", "path", ")", "\n", "self", ".", "speed", "=", "speed", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Trajectory.bodies": [[128, 132], ["pybullet_tools.utils.flatten_links", "pybullet_tools.utils.get_moving_links"], "methods", ["None"], ["", "@", "property", "\n", "def", "bodies", "(", "self", ")", ":", "\n", "# TODO: decompose into dependents and moving?", "\n", "        ", "return", "flatten_links", "(", "self", ".", "robot", ",", "get_moving_links", "(", "self", ".", "robot", ",", "self", ".", "joints", ")", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Trajectory.cost": [[132, 135], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "path", ")", "\n", "", "def", "reverse", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Trajectory.reverse": [[135, 137], ["command.Trajectory.__class__"], "methods", ["None"], ["", "def", "reverse", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", "(", "self", ".", "world", ",", "self", ".", "robot", ",", "self", ".", "joints", ",", "self", ".", "path", "[", ":", ":", "-", "1", "]", ")", "\n", "", "def", "iterate", "(", "self", ",", "state", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Trajectory.iterate": [[137, 142], ["pybullet_tools.utils.set_joint_positions"], "methods", ["None"], ["", "def", "iterate", "(", "self", ",", "state", ")", ":", "\n", "#time_parameterization(self.robot, self.joints, self.path)", "\n", "        ", "for", "positions", "in", "self", ".", "path", ":", "\n", "            ", "set_joint_positions", "(", "self", ".", "robot", ",", "self", ".", "joints", ",", "positions", ")", "\n", "yield", "\n", "", "", "def", "simulate", "(", "self", ",", "state", ",", "real_per_sim", "=", "1", ",", "time_step", "=", "1.", "/", "60", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Trajectory.simulate": [[142, 158], ["list", "pybullet_tools.utils.adjust_path", "pybullet_tools.utils.waypoints_from_path", "pybullet_tools.retime.decompose_into_paths", "len", "pybullet_tools.retime.interpolate_path", "print", "numpy.arange", "pybullet_tools.retime.interpolate_path.", "pybullet_tools.utils.set_joint_positions", "state.derive", "pybullet_tools.utils.wait_for_duration", "len", "len"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.State.derive"], ["", "", "def", "simulate", "(", "self", ",", "state", ",", "real_per_sim", "=", "1", ",", "time_step", "=", "1.", "/", "60", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "path", "=", "list", "(", "self", ".", "path", ")", "\n", "path", "=", "adjust_path", "(", "self", ".", "robot", ",", "self", ".", "joints", ",", "path", ")", "\n", "path", "=", "waypoints_from_path", "(", "path", ")", "\n", "if", "len", "(", "path", ")", "<=", "1", ":", "\n", "            ", "return", "True", "\n", "", "for", "joints", ",", "path", "in", "decompose_into_paths", "(", "self", ".", "joints", ",", "path", ")", ":", "\n", "            ", "positions_curve", "=", "interpolate_path", "(", "self", ".", "robot", ",", "joints", ",", "path", ")", "\n", "print", "(", "'Following {} {}-DOF waypoints in {:.3f} seconds'", ".", "format", "(", "len", "(", "path", ")", ",", "len", "(", "joints", ")", ",", "positions_curve", ".", "x", "[", "-", "1", "]", ")", ")", "\n", "for", "t", "in", "np", ".", "arange", "(", "positions_curve", ".", "x", "[", "0", "]", ",", "positions_curve", ".", "x", "[", "-", "1", "]", ",", "step", "=", "time_step", ")", ":", "\n", "                ", "positions", "=", "positions_curve", "(", "t", ")", "\n", "set_joint_positions", "(", "self", ".", "robot", ",", "joints", ",", "positions", ")", "\n", "state", ".", "derive", "(", ")", "\n", "wait_for_duration", "(", "real_per_sim", "*", "time_step", ")", "\n", "", "", "return", "True", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Trajectory.__repr__": [[158, 160], ["len", "len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}x{})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "len", "(", "self", ".", "joints", ")", ",", "len", "(", "self", ".", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.ApproachTrajectory.__init__": [[164, 169], ["command.Trajectory.__init__", "set"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.Observation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "objects", "=", "[", "]", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ApproachTrajectory", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "assert", "self", ".", "joints", "==", "self", ".", "world", ".", "arm_joints", "\n", "self", ".", "speed", "=", "0.25", "\n", "self", ".", "objects", "=", "set", "(", "objects", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.ApproachTrajectory.bodies": [[169, 175], ["set", "set.update", "pybullet_tools.utils.flatten_links", "command.ApproachTrajectory.world.get_body"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.update", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body"], ["", "@", "property", "\n", "def", "bodies", "(", "self", ")", ":", "\n", "        ", "bodies", "=", "set", "(", "super", "(", "ApproachTrajectory", ",", "self", ")", ".", "bodies", ")", "# TODO: rename to bodies", "\n", "for", "name", "in", "self", ".", "objects", ":", "\n", "            ", "bodies", ".", "update", "(", "flatten_links", "(", "self", ".", "world", ".", "get_body", "(", "name", ")", ")", ")", "\n", "", "return", "bodies", "\n", "", "def", "reverse", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.ApproachTrajectory.reverse": [[175, 177], ["command.ApproachTrajectory.__class__"], "methods", ["None"], ["", "def", "reverse", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", "(", "self", ".", "objects", ",", "self", ".", "world", ",", "self", ".", "robot", ",", "self", ".", "joints", ",", "self", ".", "path", "[", ":", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.DoorTrajectory.__init__": [[180, 191], ["command.Command.__init__", "tuple", "tuple", "tuple", "tuple", "len", "len"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.Observation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "world", ",", "robot", ",", "robot_joints", ",", "robot_path", ",", "\n", "door", ",", "door_joints", ",", "door_path", ")", ":", "\n", "        ", "super", "(", "DoorTrajectory", ",", "self", ")", ".", "__init__", "(", "world", ")", "\n", "self", ".", "robot", "=", "robot", "\n", "self", ".", "robot_joints", "=", "tuple", "(", "robot_joints", ")", "\n", "self", ".", "robot_path", "=", "tuple", "(", "robot_path", ")", "\n", "self", ".", "door", "=", "door", "\n", "self", ".", "door_joints", "=", "tuple", "(", "door_joints", ")", "\n", "self", ".", "door_path", "=", "tuple", "(", "door_path", ")", "\n", "self", ".", "do_pull", "=", "(", "door_path", "[", "0", "]", "[", "0", "]", "<", "door_path", "[", "-", "1", "]", "[", "0", "]", ")", "\n", "assert", "len", "(", "self", ".", "robot_path", ")", "==", "len", "(", "self", ".", "door_path", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.DoorTrajectory.joints": [[191, 194], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "joints", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "robot_joints", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.DoorTrajectory.path": [[194, 197], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "path", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "robot_path", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.DoorTrajectory.bodies": [[197, 201], ["pybullet_tools.utils.flatten_links", "pybullet_tools.utils.flatten_links", "pybullet_tools.utils.get_moving_links", "pybullet_tools.utils.get_moving_links"], "methods", ["None"], ["", "@", "property", "\n", "def", "bodies", "(", "self", ")", ":", "\n", "        ", "return", "flatten_links", "(", "self", ".", "robot", ",", "get_moving_links", "(", "self", ".", "robot", ",", "self", ".", "robot_joints", ")", ")", "|", "flatten_links", "(", "self", ".", "world", ".", "kitchen", ",", "get_moving_links", "(", "self", ".", "world", ".", "kitchen", ",", "self", ".", "door_joints", ")", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.DoorTrajectory.cost": [[201, 204], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "path", ")", "\n", "", "def", "reverse", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.DoorTrajectory.reverse": [[204, 207], ["command.DoorTrajectory.__class__"], "methods", ["None"], ["", "def", "reverse", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", "(", "self", ".", "world", ",", "self", ".", "robot", ",", "self", ".", "robot_joints", ",", "self", ".", "robot_path", "[", ":", ":", "-", "1", "]", ",", "\n", "self", ".", "door", ",", "self", ".", "door_joints", ",", "self", ".", "door_path", "[", ":", ":", "-", "1", "]", ")", "\n", "", "def", "iterate", "(", "self", ",", "state", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.DoorTrajectory.iterate": [[207, 212], ["zip", "pybullet_tools.utils.set_joint_positions", "pybullet_tools.utils.set_joint_positions"], "methods", ["None"], ["", "def", "iterate", "(", "self", ",", "state", ")", ":", "\n", "        ", "for", "robot_conf", ",", "door_conf", "in", "zip", "(", "self", ".", "robot_path", ",", "self", ".", "door_path", ")", ":", "\n", "            ", "set_joint_positions", "(", "self", ".", "robot", ",", "self", ".", "robot_joints", ",", "robot_conf", ")", "\n", "set_joint_positions", "(", "self", ".", "door", ",", "self", ".", "door_joints", ",", "door_conf", ")", "\n", "yield", "\n", "", "", "def", "simulate", "(", "self", ",", "state", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.DoorTrajectory.simulate": [[212, 217], ["command.Command.simulate"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Wait.simulate"], ["", "", "def", "simulate", "(", "self", ",", "state", ",", "**", "kwargs", ")", ":", "\n", "# TODO: linearly interpolate for drawer", "\n", "# TODO: interpolate drawer and robot individually", "\n", "# TODO: find drawer joint angle that minimizes deviation from transform", "\n", "        ", "super", "(", "DoorTrajectory", ",", "self", ")", ".", "simulate", "(", "state", ",", "time_per_step", "=", "2", "*", "DEFAULT_TIME_STEP", ")", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.DoorTrajectory.__repr__": [[217, 220], ["len", "len", "len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}x{})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "len", "(", "self", ".", "robot_joints", ")", "+", "len", "(", "self", ".", "door_joints", ")", ",", "\n", "len", "(", "self", ".", "robot_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Attach.__init__": [[224, 230], ["command.Command.__init__"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.Observation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "world", ",", "robot", ",", "link", ",", "body", ")", ":", "\n", "# TODO: names or bodies?", "\n", "        ", "super", "(", "Attach", ",", "self", ")", ".", "__init__", "(", "world", ")", "\n", "self", ".", "robot", "=", "robot", "\n", "self", ".", "link", "=", "link", "\n", "self", ".", "body", "=", "body", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Attach.bodies": [[230, 233], ["set"], "methods", ["None"], ["", "@", "property", "\n", "def", "bodies", "(", "self", ")", ":", "\n", "        ", "return", "set", "(", ")", "\n", "#return {self.robot, self.body}", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Attach.cost": [[234, 237], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "", "def", "reverse", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Attach.reverse": [[237, 239], ["command.Detach"], "methods", ["None"], ["", "def", "reverse", "(", "self", ")", ":", "\n", "        ", "return", "Detach", "(", "self", ".", "world", ",", "self", ".", "robot", ",", "self", ".", "link", ",", "self", ".", "body", ")", "\n", "", "def", "attach", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Attach.attach": [[239, 241], ["pybullet_tools.utils.create_attachment"], "methods", ["None"], ["", "def", "attach", "(", "self", ")", ":", "\n", "        ", "return", "create_attachment", "(", "self", ".", "robot", ",", "self", ".", "link", ",", "self", ".", "body", ")", "\n", "", "def", "iterate", "(", "self", ",", "state", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Attach.iterate": [[241, 244], ["command.Attach.attach"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Attach.attach"], ["", "def", "iterate", "(", "self", ",", "state", ")", ":", "\n", "        ", "state", ".", "attachments", "[", "self", ".", "body", "]", "=", "self", ".", "attach", "(", ")", "\n", "yield", "\n", "", "def", "execute", "(", "self", ",", "interface", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Attach.execute": [[244, 246], ["None"], "methods", ["None"], ["", "def", "execute", "(", "self", ",", "interface", ")", ":", "\n", "        ", "return", "True", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Attach.__repr__": [[246, 248], ["command.Attach.world.get_name"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_name"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "world", ".", "get_name", "(", "self", ".", "body", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.AttachGripper.__init__": [[250, 253], ["command.Attach.__init__"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.Observation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "world", ",", "body", ",", "grasp", "=", "None", ")", ":", "\n", "        ", "super", "(", "AttachGripper", ",", "self", ")", ".", "__init__", "(", "world", ",", "world", ".", "robot", ",", "world", ".", "tool_link", ",", "body", ")", "\n", "self", ".", "grasp", "=", "grasp", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Detach.__init__": [[264, 269], ["command.Command.__init__"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.Observation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "world", ",", "robot", ",", "link", ",", "body", ")", ":", "\n", "        ", "super", "(", "Detach", ",", "self", ")", ".", "__init__", "(", "world", ")", "\n", "self", ".", "robot", "=", "robot", "\n", "self", ".", "link", "=", "link", "\n", "self", ".", "body", "=", "body", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Detach.bodies": [[269, 272], ["set"], "methods", ["None"], ["", "@", "property", "\n", "def", "bodies", "(", "self", ")", ":", "\n", "        ", "return", "set", "(", ")", "\n", "#return {self.robot, self.body}", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Detach.cost": [[273, 276], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "", "def", "reverse", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Detach.reverse": [[276, 278], ["command.Attach"], "methods", ["None"], ["", "def", "reverse", "(", "self", ")", ":", "\n", "        ", "return", "Attach", "(", "self", ".", "world", ",", "self", ".", "robot", ",", "self", ".", "link", ",", "self", ".", "body", ")", "\n", "", "def", "iterate", "(", "self", ",", "state", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Detach.iterate": [[278, 282], ["None"], "methods", ["None"], ["", "def", "iterate", "(", "self", ",", "state", ")", ":", "\n", "        ", "assert", "self", ".", "body", "in", "state", ".", "attachments", "\n", "del", "state", ".", "attachments", "[", "self", ".", "body", "]", "\n", "yield", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Detach.__repr__": [[282, 284], ["command.Detach.world.get_name"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_name"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "world", ".", "get_name", "(", "self", ".", "body", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Detect.__init__": [[289, 295], ["command.Command.__init__", "tuple"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.Observation.__init__"], ["def", "__init__", "(", "self", ",", "world", ",", "camera", ",", "name", ",", "pose", ",", "rays", ")", ":", "\n", "        ", "super", "(", "Detect", ",", "self", ")", ".", "__init__", "(", "world", ")", "\n", "self", ".", "camera", "=", "camera", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "pose", "=", "pose", "# Object pose", "\n", "self", ".", "rays", "=", "tuple", "(", "rays", ")", "\n", "# TODO: could instead use cones for full detection", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Detect.cost": [[297, 300], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Detect.surface_name": [[300, 303], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "surface_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pose", ".", "support", "\n", "", "def", "ray_collision", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Detect.ray_collision": [[303, 305], ["pybullet_tools.utils.batch_ray_collision"], "methods", ["None"], ["", "def", "ray_collision", "(", "self", ")", ":", "\n", "        ", "return", "batch_ray_collision", "(", "self", ".", "rays", ")", "\n", "", "def", "compute_occluding", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Detect.compute_occluding": [[305, 309], ["frozenset", "command.Detect.ray_collision"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Detect.ray_collision"], ["", "def", "compute_occluding", "(", "self", ")", ":", "\n", "# TODO: compute as a fraction of the rays", "\n", "        ", "return", "{", "(", "result", ".", "objectUniqueId", ",", "frozenset", "(", "[", "result", ".", "linkIndex", "]", ")", ")", "\n", "for", "result", "in", "self", ".", "ray_collision", "(", ")", "if", "result", ".", "objectUniqueId", "!=", "-", "1", "}", "\n", "", "def", "draw", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Detect.draw": [[309, 314], ["zip", "command.Detect.ray_collision", "handles.extend", "pybullet_tools.utils.draw_ray"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Detect.ray_collision"], ["", "def", "draw", "(", "self", ")", ":", "\n", "        ", "handles", "=", "[", "]", "\n", "for", "ray", ",", "result", "in", "zip", "(", "self", ".", "rays", ",", "self", ".", "ray_collision", "(", ")", ")", ":", "\n", "            ", "handles", ".", "extend", "(", "draw_ray", "(", "ray", ",", "result", ")", ")", "\n", "", "return", "handles", "\n", "", "def", "iterate", "(", "self", ",", "state", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Detect.iterate": [[314, 320], ["int", "range", "pybullet_tools.utils.remove_handles", "command.Detect.draw", "math.ceil"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.draw"], ["", "def", "iterate", "(", "self", ",", "state", ")", ":", "\n", "        ", "handles", "=", "self", ".", "draw", "(", ")", "if", "DEBUG", "else", "[", "]", "\n", "steps", "=", "int", "(", "math", ".", "ceil", "(", "self", ".", "duration", "/", "0.02", ")", ")", "\n", "for", "_", "in", "range", "(", "steps", ")", ":", "\n", "            ", "yield", "\n", "", "remove_handles", "(", "handles", ")", "\n", "", "def", "execute", "(", "self", ",", "interface", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Detect.execute": [[320, 322], ["None"], "methods", ["None"], ["", "def", "execute", "(", "self", ",", "interface", ")", ":", "\n", "        ", "return", "True", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Detect.__repr__": [[322, 325], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, {}, {})'", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "camera", ",", "self", ".", "name", ",", "self", ".", "surface_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Wait.__init__": [[327, 331], ["command.Command.__init__"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.Observation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "world", ",", "steps", "=", "1", ",", "duration", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "Wait", ",", "self", ")", ".", "__init__", "(", "world", ")", "\n", "self", ".", "steps", "=", "steps", "\n", "self", ".", "duration", "=", "duration", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Wait.bodies": [[331, 334], ["set"], "methods", ["None"], ["", "@", "property", "\n", "def", "bodies", "(", "self", ")", ":", "\n", "        ", "return", "set", "(", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Wait.cost": [[334, 337], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "", "def", "reverse", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Wait.reverse": [[337, 339], ["None"], "methods", ["None"], ["", "def", "reverse", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "", "def", "iterate", "(", "self", ",", "state", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Wait.iterate": [[339, 342], ["range"], "methods", ["None"], ["", "def", "iterate", "(", "self", ",", "state", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "self", ".", "steps", "+", "1", ")", ":", "\n", "            ", "yield", "\n", "", "", "def", "simulate", "(", "self", ",", "state", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Wait.simulate": [[342, 344], ["pybullet_tools.utils.wait_for_duration"], "methods", ["None"], ["", "", "def", "simulate", "(", "self", ",", "state", ",", "**", "kwargs", ")", ":", "\n", "        ", "wait_for_duration", "(", "self", ".", "duration", ")", "\n", "", "def", "execute", "(", "self", ",", "interface", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Wait.execute": [[344, 349], ["time.sleep"], "methods", ["None"], ["", "def", "execute", "(", "self", ",", "interface", ")", ":", "\n", "        ", "time", ".", "sleep", "(", "self", ".", "duration", ")", "\n", "#import rospy", "\n", "#rospy.sleep(self.duration)", "\n", "return", "True", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Wait.__repr__": [[349, 351], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.create_state": [[61, 72], ["pybullet_tools.utils.WorldSaver", "command.State", "world.get_supporting", "attachments.append", "src.utils.create_surface_attachment"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_supporting", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.create_surface_attachment"], ["", "", "def", "create_state", "(", "world", ")", ":", "\n", "# TODO: support initially holding", "\n", "# TODO: would be better to explicitly keep the state around", "\n", "# world.initial_saver.restore()", "\n", "    ", "world_saver", "=", "WorldSaver", "(", ")", "\n", "attachments", "=", "[", "]", "\n", "for", "obj_name", "in", "world", ".", "movable", ":", "\n", "        ", "surface_name", "=", "world", ".", "get_supporting", "(", "obj_name", ")", "\n", "if", "surface_name", "is", "not", "None", ":", "\n", "            ", "attachments", ".", "append", "(", "create_surface_attachment", "(", "world", ",", "obj_name", ",", "surface_name", ")", ")", "\n", "", "", "return", "State", "(", "world", ",", "savers", "=", "[", "world_saver", "]", ",", "attachments", "=", "attachments", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.iterate_commands": [[356, 377], ["enumerate", "print", "enumerate", "command.iterate", "state.derive", "pybullet_tools.utils.wait_for_user", "len", "pybullet_tools.utils.wait_for_duration", "pybullet_tools.utils.wait_for_user", "pybullet_tools.utils.wait_for_duration", "len"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Wait.iterate", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.State.derive"], ["", "", "def", "iterate_commands", "(", "state", ",", "commands", ",", "time_step", "=", "DEFAULT_TIME_STEP", ",", "pause", "=", "False", ")", ":", "\n", "    ", "if", "commands", "is", "None", ":", "\n", "        ", "return", "False", "\n", "", "for", "i", ",", "command", "in", "enumerate", "(", "commands", ")", ":", "\n", "        ", "print", "(", "'\\nCommand {:2}/{:2}: {}'", ".", "format", "(", "i", "+", "1", ",", "len", "(", "commands", ")", ",", "command", ")", ")", "\n", "# TODO: skip to end", "\n", "# TODO: downsample", "\n", "for", "j", ",", "_", "in", "enumerate", "(", "command", ".", "iterate", "(", "state", ")", ")", ":", "\n", "            ", "state", ".", "derive", "(", ")", "\n", "if", "j", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "time_step", "is", "None", ":", "\n", "                ", "wait_for_duration", "(", "1e-2", ")", "\n", "wait_for_user", "(", "'Command {:2}/{:2} | step {:2} | Next?'", ".", "format", "(", "i", "+", "1", ",", "len", "(", "commands", ")", ",", "j", ")", ")", "\n", "", "elif", "time_step", "==", "0", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "wait_for_duration", "(", "time_step", ")", "\n", "", "", "if", "pause", ":", "\n", "            ", "wait_for_user", "(", "'Continue?'", ")", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.simulate_commands": [[378, 386], ["enumerate", "print", "command.simulate", "len"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Wait.simulate"], ["", "def", "simulate_commands", "(", "state", ",", "commands", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "commands", "is", "None", ":", "\n", "        ", "return", "False", "\n", "# TODO: simulate commands simultaneously", "\n", "", "for", "i", ",", "command", "in", "enumerate", "(", "commands", ")", ":", "\n", "        ", "print", "(", "'\\nCommand {:2}/{:2}: {}'", ".", "format", "(", "i", "+", "1", ",", "len", "(", "commands", ")", ",", "command", ")", ")", "\n", "command", ".", "simulate", "(", "state", ",", "**", "kwargs", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.execute_commands": [[387, 398], ["command.execute", "print", "print"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Wait.execute"], ["", "def", "execute_commands", "(", "interface", ",", "commands", ")", ":", "\n", "    ", "if", "commands", "is", "None", ":", "\n", "        ", "return", "False", "\n", "", "for", "command", "in", "commands", ":", "\n", "        ", "success", "=", "command", ".", "execute", "(", "interface", ")", "\n", "if", "success", ":", "\n", "            ", "print", "(", "'Successfully executed command'", ",", "command", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Failed to execute command'", ",", "command", ")", "\n", "return", "False", "\n", "", "", "return", "True", "\n", "", ""]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.Task.__init__": [[21, 54], ["pybullet_tools.utils.get_function_name", "dict", "list", "tuple", "dict", "set", "set", "set", "set"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "world", ",", "prior", "=", "{", "}", ",", "skeletons", "=", "[", "]", ",", "grasp_types", "=", "GRASP_TYPES", ",", "\n", "movable_base", "=", "True", ",", "noisy_base", "=", "True", ",", "teleport_base", "=", "False", ",", "\n", "return_init_bq", "=", "False", ",", "return_init_aq", "=", "False", ",", "goal_aq", "=", "None", ",", "\n", "init_liquid", "=", "[", "]", ",", "goal_liquid", "=", "[", "]", ",", "\n", "goal_hand_empty", "=", "False", ",", "goal_holding", "=", "None", ",", "goal_detected", "=", "[", "]", ",", "\n", "goal_on", "=", "{", "}", ",", "goal_open", "=", "[", "]", ",", "goal_closed", "=", "[", "]", ",", "goal_cooked", "=", "[", "]", ",", "\n", "init", "=", "[", "]", ",", "goal", "=", "[", "]", ",", "real", "=", "False", ",", "max_cost", "=", "MAX_COST", ")", ":", "\n", "        ", "self", ".", "world", "=", "world", "# TODO: remove world dependency", "\n", "world", ".", "task", "=", "self", "\n", "self", ".", "name", "=", "get_function_name", "(", "depth", "=", "2", ")", "\n", "self", ".", "prior", "=", "dict", "(", "prior", ")", "# DiscreteDist over", "\n", "self", ".", "skeletons", "=", "list", "(", "skeletons", ")", "\n", "self", ".", "grasp_types", "=", "tuple", "(", "grasp_types", ")", "\n", "self", ".", "movable_base", "=", "movable_base", "\n", "self", ".", "noisy_base", "=", "noisy_base", "\n", "self", ".", "teleport_base", "=", "teleport_base", "\n", "assert", "(", "goal_aq", "is", "None", ")", "or", "not", "return_init_aq", "\n", "self", ".", "goal_aq", "=", "goal_aq", "\n", "self", ".", "return_init_bq", "=", "return_init_bq", "\n", "self", ".", "return_init_aq", "=", "return_init_aq", "\n", "self", ".", "init_liquid", "=", "init_liquid", "\n", "self", ".", "goal_liquid", "=", "goal_liquid", "\n", "self", ".", "goal_hand_empty", "=", "goal_hand_empty", "\n", "self", ".", "goal_holding", "=", "goal_holding", "\n", "self", ".", "goal_on", "=", "dict", "(", "goal_on", ")", "\n", "self", ".", "goal_detected", "=", "set", "(", "goal_detected", ")", "\n", "self", ".", "goal_open", "=", "set", "(", "goal_open", ")", "\n", "self", ".", "goal_closed", "=", "set", "(", "goal_closed", ")", "\n", "self", ".", "goal_cooked", "=", "set", "(", "goal_cooked", ")", "\n", "self", ".", "init", "=", "init", "\n", "self", ".", "goal", "=", "goal", "\n", "self", ".", "real", "=", "real", "\n", "self", ".", "max_cost", "=", "max_cost", "# TODO: use instead of the default", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.Task.objects": [[54, 57], ["sorted", "set", "task.Task.prior.keys"], "methods", ["None"], ["", "@", "property", "\n", "def", "objects", "(", "self", ")", ":", "\n", "        ", "return", "sorted", "(", "set", "(", "self", ".", "prior", ".", "keys", "(", ")", ")", ")", "\n", "", "def", "create_belief", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.Task.create_belief": [[57, 64], ["time.time", "print", "src.belief.create_surface_belief", "print", "pybullet_tools.utils.elapsed_time"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.create_surface_belief"], ["", "def", "create_belief", "(", "self", ")", ":", "\n", "        ", "t0", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Creating initial belief'", ")", "\n", "belief", "=", "create_surface_belief", "(", "self", ".", "world", ",", "self", ".", "prior", ")", "\n", "belief", ".", "task", "=", "self", "\n", "print", "(", "'Took {:2f} seconds'", ".", "format", "(", "elapsed_time", "(", "t0", ")", ")", ")", "\n", "return", "belief", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.Task.__repr__": [[64, 67], ["task.Task.__dict__.items"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}{}'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "{", "\n", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "value", "not", "in", "[", "self", ".", "world", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_block": [[82, 97], ["src.utils.name_from_type", "pybullet_tools.utils.create_box", "world.add", "task.pose2d_on_surface"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.name_from_type", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.add", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.pose2d_on_surface"], ["def", "add_block", "(", "world", ",", "idx", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "# TODO: automatically produce a unique name", "\n", "    ", "color", "=", "'green'", "\n", "#block_type = '{}_block'.format(color)", "\n", "block_type", "=", "'block'", ".", "format", "(", "color", ")", "\n", "#block_type = BLOCK_TEMPLATE.format(BLOCK_SIZES[-1], BLOCK_COLORS[0])", "\n", "#block_type = 'potted_meat_can'", "\n", "name", "=", "name_from_type", "(", "block_type", ",", "idx", ")", "\n", "#world.add_body(name)", "\n", "#print(get_aabb_extent(get_aabb(world.get_body(name))))", "\n", "side", "=", "BIG_BLOCK_SIDE", "\n", "body", "=", "create_box", "(", "w", "=", "side", ",", "l", "=", "side", ",", "h", "=", "side", ",", "color", "=", "COLOR_FROM_NAME", "[", "color", "]", ")", "\n", "world", ".", "add", "(", "name", ",", "body", ")", "\n", "pose2d_on_surface", "(", "world", ",", "name", ",", "COUNTERS", "[", "0", "]", ",", "**", "kwargs", ")", "\n", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_ycb": [[98, 103], ["src.utils.name_from_type", "world.add_body", "task.pose2d_on_surface", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.name_from_type", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.add_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.pose2d_on_surface"], ["", "def", "add_ycb", "(", "world", ",", "ycb_type", ",", "idx", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "name", "=", "name_from_type", "(", "ycb_type", ",", "idx", ")", "\n", "world", ".", "add_body", "(", "name", ",", "color", "=", "np", ".", "ones", "(", "4", ")", ")", "\n", "pose2d_on_surface", "(", "world", ",", "name", ",", "COUNTERS", "[", "0", "]", ",", "**", "kwargs", ")", "\n", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_box": [[107, 114], ["src.utils.name_from_type", "pybullet_tools.utils.create_box", "world.add"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.name_from_type", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.add"], ["def", "add_box", "(", "world", ",", "color_name", ",", "idx", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "name", "=", "name_from_type", "(", "color_name", ",", "idx", ")", "\n", "# TODO: geometry type", "\n", "body", "=", "create_box", "(", "w", "=", "0.07", ",", "l", "=", "0.07", ",", "h", "=", "0.14", ",", "color", "=", "COLOR_FROM_NAME", "[", "color_name", "]", ")", "\n", "world", ".", "add", "(", "name", ",", "body", ")", "\n", "# pose2d_on_surface(world, name, COUNTERS[0], **kwargs)", "\n", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_cylinder": [[115, 121], ["src.utils.name_from_type", "pybullet_tools.utils.create_cylinder", "world.add"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.name_from_type", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.add"], ["", "def", "add_cylinder", "(", "world", ",", "color_name", ",", "idx", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "name", "=", "name_from_type", "(", "color_name", ",", "idx", ")", "\n", "body", "=", "create_cylinder", "(", "radius", "=", "0.07", "/", "2", ",", "height", "=", "0.14", ",", "color", "=", "COLOR_FROM_NAME", "[", "color_name", "]", ")", "\n", "world", ".", "add", "(", "name", ",", "body", ")", "\n", "# pose2d_on_surface(world, name, COUNTERS[0], **kwargs)", "\n", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_kinect": [[122, 126], ["pybullet_tools.utils.multiply", "world.add_camera", "pybullet_tools.utils.get_pose"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.add_camera"], ["", "def", "add_kinect", "(", "world", ",", "camera_name", "=", "LEFT_CAMERA", ")", ":", "\n", "# TODO: could intersect convex with half plane", "\n", "    ", "world_from_camera", "=", "multiply", "(", "get_pose", "(", "world", ".", "kitchen", ")", ",", "CAMERA_POSES", "[", "camera_name", "]", ")", "\n", "world", ".", "add_camera", "(", "camera_name", ",", "world_from_camera", ",", "CAMERA_MATRIX", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_kinects": [[127, 130], ["task.add_kinect"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_kinect"], ["", "def", "add_kinects", "(", "world", ")", ":", "\n", "    ", "for", "camera_name", "in", "CAMERA_POSES", ":", "\n", "        ", "add_kinect", "(", "world", ",", "camera_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.set_fixed_base": [[136, 139], ["world.set_base_conf"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.set_base_conf"], ["def", "set_fixed_base", "(", "world", ")", ":", "\n", "# set_base_values(world.robot, BASE_POSE2D)", "\n", "    ", "world", ".", "set_base_conf", "(", "BASE_POSE2D", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.pose2d_on_surface": [[140, 148], ["world.get_body", "src.utils.compute_surface_aabb", "pybullet_tools.utils.stable_z_on_aabb", "pybullet_tools.utils.Pose", "pybullet_tools.utils.set_pose", "pybullet_tools.utils.Point", "pybullet_tools.utils.Euler"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.compute_surface_aabb"], ["", "def", "pose2d_on_surface", "(", "world", ",", "entity_name", ",", "surface_name", ",", "pose2d", "=", "UNIT_POSE2D", ")", ":", "\n", "    ", "x", ",", "y", ",", "yaw", "=", "pose2d", "\n", "body", "=", "world", ".", "get_body", "(", "entity_name", ")", "\n", "surface_aabb", "=", "compute_surface_aabb", "(", "world", ",", "surface_name", ")", "\n", "z", "=", "stable_z_on_aabb", "(", "body", ",", "surface_aabb", ")", "\n", "pose", "=", "Pose", "(", "Point", "(", "x", ",", "y", ",", "z", ")", ",", "Euler", "(", "yaw", "=", "yaw", ")", ")", "\n", "set_pose", "(", "body", ",", "pose", ")", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.sample_placement": [[149, 161], ["world.get_body", "src.stream.get_stable_gen", "src.stream.get_stable_gen.", "RuntimeError", "src.utils.point_from_pose", "pose.assign", "pose.get_world_from_body", "any", "pybullet_tools.utils.pairwise_collision", "world.body_from_name.values"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_stable_gen", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.get_world_from_body"], ["", "def", "sample_placement", "(", "world", ",", "entity_name", ",", "surface_name", ",", "min_distance", "=", "0.05", ",", "robust_radius", "=", "0.025", ",", "**", "kwargs", ")", ":", "\n", "    ", "entity_body", "=", "world", ".", "get_body", "(", "entity_name", ")", "\n", "placement_gen", "=", "get_stable_gen", "(", "world", ",", "pos_scale", "=", "0", ",", "rot_scale", "=", "0", ",", "robust_radius", "=", "robust_radius", ",", "**", "kwargs", ")", "\n", "for", "pose", ",", "in", "placement_gen", "(", "entity_name", ",", "surface_name", ")", ":", "\n", "        ", "x", ",", "y", ",", "z", "=", "point_from_pose", "(", "pose", ".", "get_world_from_body", "(", ")", ")", "\n", "if", "x", "<", "MIN_PLACEMENT_X", ":", "\n", "            ", "continue", "\n", "", "pose", ".", "assign", "(", ")", "\n", "if", "not", "any", "(", "pairwise_collision", "(", "entity_body", ",", "obst_body", ",", "max_distance", "=", "min_distance", ")", "for", "obst_body", "in", "\n", "world", ".", "body_from_name", ".", "values", "(", ")", "if", "entity_body", "!=", "obst_body", ")", ":", "\n", "            ", "return", "pose", "\n", "", "", "raise", "RuntimeError", "(", "'Unable to find a pose for object {} on surface {}'", ".", "format", "(", "entity_name", ",", "surface_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.close_all_doors": [[162, 165], ["world.close_door"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.close_door"], ["", "def", "close_all_doors", "(", "world", ")", ":", "\n", "    ", "for", "joint", "in", "world", ".", "kitchen_joints", ":", "\n", "        ", "world", ".", "close_door", "(", "joint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.open_all_doors": [[166, 169], ["world.open_door"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.open_door"], ["", "", "def", "open_all_doors", "(", "world", ")", ":", "\n", "    ", "for", "joint", "in", "world", ".", "kitchen_joints", ":", "\n", "        ", "world", ".", "open_door", "(", "joint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.detect_block": [[172, 212], ["task.add_kinect", "task.add_block", "add_sugar_box", "add_cracker_box", "pybullet_tools.utils.set_all_static", "task.Task", "task.set_fixed_base", "examples.discrete_belief.dist.UniformDist", "examples.discrete_belief.dist.DeltaDist", "examples.discrete_belief.dist.DeltaDist", "random.choice"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_kinect", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_block", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.set_fixed_base"], ["", "", "def", "detect_block", "(", "world", ",", "fixed", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "add_kinect", "(", "world", ")", "\n", "#for side in CAMERAS[:1]:", "\n", "#    add_kinect(world, side)", "\n", "#add_kinects(world)", "\n", "if", "fixed", ":", "\n", "        ", "set_fixed_base", "(", "world", ")", "\n", "#plane = create_plane([1, 0, 0])", "\n", "#set_point(plane, [MIN_PLACEMENT_X, 0, 0])", "\n", "#wait_for_user()", "\n", "\n", "", "block_poses", "=", "[", "(", "0.1", ",", "1.05", ",", "0.", ")", ",", "(", "0.1", ",", "1.3", ",", "0.", ")", "]", "\n", "entity_name", "=", "add_block", "(", "world", ",", "idx", "=", "0", ",", "pose2d", "=", "random", ".", "choice", "(", "block_poses", ")", ")", "\n", "sugar_name", "=", "add_sugar_box", "(", "world", ",", "idx", "=", "0", ",", "pose2d", "=", "(", "0.2", ",", "1.35", ",", "np", ".", "pi", "/", "4", ")", ")", "\n", "cracker_name", "=", "add_cracker_box", "(", "world", ",", "idx", "=", "1", ",", "pose2d", "=", "(", "0.2", ",", "1.1", ",", "np", ".", "pi", "/", "4", ")", ")", "\n", "#other_name = add_box(world, idx=1)", "\n", "set_all_static", "(", ")", "\n", "\n", "#goal_surface = 'indigo_drawer_top'", "\n", "#initial_distribution = UniformDist([goal_surface]) # indigo_tmp", "\n", "#initial_surface = initial_distribution.sample()", "\n", "#if random.random() < 0.0:", "\n", "#    # TODO: sometimes base/arm failure causes the planner to freeze", "\n", "#    # Freezing is because the planner is struggling to find new samples", "\n", "#    sample_placement(world, entity_name, initial_surface, learned=True)", "\n", "#sample_placement(world, other_name, 'hitman_tmp', learned=True)", "\n", "\n", "prior", "=", "{", "\n", "entity_name", ":", "UniformDist", "(", "[", "'indigo_tmp'", "]", ")", ",", "# 'indigo_tmp', 'indigo_drawer_top'", "\n", "sugar_name", ":", "DeltaDist", "(", "'indigo_tmp'", ")", ",", "\n", "cracker_name", ":", "DeltaDist", "(", "'indigo_tmp'", ")", ",", "\n", "}", "\n", "return", "Task", "(", "world", ",", "prior", "=", "prior", ",", "movable_base", "=", "not", "fixed", ",", "\n", "grasp_types", "=", "[", "TOP_GRASP", "]", ",", "\n", "return_init_bq", "=", "True", ",", "return_init_aq", "=", "True", ",", "\n", "#goal_detected=[entity_name],", "\n", "goal_holding", "=", "cracker_name", ",", "\n", "#goal_on={entity_name: random.choice(ZED_DRAWERS)},", "\n", "goal_cooked", "=", "[", "entity_name", "]", ",", "\n", "goal_closed", "=", "ALL_JOINTS", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.regrasp_block": [[216, 234], ["task.add_kinect", "task.add_block", "pybullet_tools.utils.set_all_static", "task.sample_placement", "task.Task", "task.set_fixed_base", "examples.discrete_belief.dist.UniformDist"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_kinect", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_block", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.sample_placement", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.set_fixed_base"], ["", "def", "regrasp_block", "(", "world", ",", "fixed", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "add_kinect", "(", "world", ")", "\n", "if", "fixed", ":", "\n", "        ", "set_fixed_base", "(", "world", ")", "\n", "", "entity_name", "=", "add_block", "(", "world", ",", "idx", "=", "0", ")", "\n", "set_all_static", "(", ")", "\n", "#world.open_door(joint_from_name(world.kitchen, JOINT_TEMPLATE.format(LEFT_DOOR)))", "\n", "\n", "#drawer = random.choice(ZED_DRAWERS)", "\n", "drawer", "=", "'indigo_tmp'", "\n", "sample_placement", "(", "world", ",", "entity_name", ",", "drawer", ",", "learned", "=", "True", ")", "\n", "prior", "=", "{", "\n", "entity_name", ":", "UniformDist", "(", "drawer", ")", ",", "\n", "}", "\n", "return", "Task", "(", "world", ",", "prior", "=", "prior", ",", "movable_base", "=", "not", "fixed", ",", "\n", "#grasp_types=[SIDE_GRASP], #, TOP_GRASP],", "\n", "#goal_holding=entity_name,", "\n", "goal_on", "=", "{", "entity_name", ":", "LEFT_DOOR", "}", ",", "\n", "#return_init_bq=True, return_init_aq=True,", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.hold_block": [[239, 269], ["task.add_kinect", "task.add_box", "examples.discrete_belief.dist.DeltaDist", "task.sample_placement", "range", "pybullet_tools.utils.set_all_static", "task.Task", "task.set_fixed_base", "task.add_box", "examples.discrete_belief.dist.DeltaDist", "task.sample_placement"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_kinect", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_box", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.sample_placement", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.set_fixed_base", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_box", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.sample_placement"], ["", "def", "hold_block", "(", "world", ",", "num", "=", "5", ",", "fixed", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "add_kinect", "(", "world", ")", "\n", "if", "fixed", ":", "\n", "        ", "set_fixed_base", "(", "world", ")", "\n", "\n", "# TODO: compare with the NN grasp prediction in clutter", "\n", "# TODO: consider a task where most directions are blocked except for one", "\n", "", "initial_surface", "=", "'indigo_tmp'", "\n", "# initial_surface = 'dagger_door_left'", "\n", "# joint_name = JOINT_TEMPLATE.format(initial_surface)", "\n", "#world.open_door(joint_from_name(world.kitchen, joint_name))", "\n", "#open_all_doors(world)", "\n", "\n", "prior", "=", "{", "}", "\n", "# green_name = add_block(world, idx=0, pose2d=BOX_POSE2D)", "\n", "green_name", "=", "add_box", "(", "world", ",", "'green'", ",", "idx", "=", "0", ")", "\n", "prior", "[", "green_name", "]", "=", "DeltaDist", "(", "initial_surface", ")", "\n", "sample_placement", "(", "world", ",", "green_name", ",", "initial_surface", ",", "learned", "=", "True", ")", "\n", "for", "idx", "in", "range", "(", "num", ")", ":", "\n", "        ", "red_name", "=", "add_box", "(", "world", ",", "'red'", ",", "idx", "=", "idx", ")", "\n", "prior", "[", "red_name", "]", "=", "DeltaDist", "(", "initial_surface", ")", "\n", "sample_placement", "(", "world", ",", "red_name", ",", "initial_surface", ",", "learned", "=", "True", ")", "\n", "\n", "", "set_all_static", "(", ")", "\n", "\n", "return", "Task", "(", "world", ",", "prior", "=", "prior", ",", "movable_base", "=", "not", "fixed", ",", "\n", "# grasp_types=GRASP_TYPES,", "\n", "grasp_types", "=", "[", "SIDE_GRASP", "]", ",", "\n", "return_init_bq", "=", "True", ",", "return_init_aq", "=", "True", ",", "\n", "goal_holding", "=", "green_name", ",", "\n", "#goal_closed=ALL_JOINTS,", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.sugar_drawer": [[275, 299], ["task.add_kinect", "random.choice", "world.open_door", "task.add_block", "examples.discrete_belief.dist.DeltaDist", "add_sugar_box", "examples.discrete_belief.dist.DeltaDist", "task.sample_placement", "pybullet_tools.utils.set_all_static", "task.Task", "task.set_fixed_base", "src.utils.joint_from_name", "src.utils.JOINT_TEMPLATE.format"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_kinect", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.open_door", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_block", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.sample_placement", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.set_fixed_base"], ["", "def", "sugar_drawer", "(", "world", ",", "fixed", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "add_kinect", "(", "world", ")", "\n", "if", "fixed", ":", "\n", "        ", "set_fixed_base", "(", "world", ")", "\n", "\n", "", "open_drawer", "=", "random", ".", "choice", "(", "ZED_DRAWERS", ")", "\n", "world", ".", "open_door", "(", "joint_from_name", "(", "world", ".", "kitchen", ",", "JOINT_TEMPLATE", ".", "format", "(", "open_drawer", ")", ")", ")", "\n", "# open_all_doors(world)", "\n", "\n", "prior", "=", "{", "}", "\n", "block_name", "=", "add_block", "(", "world", ",", "idx", "=", "0", ",", "pose2d", "=", "BOX_POSE2D", ")", "\n", "prior", "[", "block_name", "]", "=", "DeltaDist", "(", "'indigo_tmp'", ")", "\n", "\n", "sugar_name", "=", "add_sugar_box", "(", "world", ",", "idx", "=", "0", ")", "\n", "prior", "[", "sugar_name", "]", "=", "DeltaDist", "(", "open_drawer", ")", "\n", "sample_placement", "(", "world", ",", "sugar_name", ",", "open_drawer", ",", "learned", "=", "True", ")", "\n", "set_all_static", "(", ")", "\n", "\n", "return", "Task", "(", "world", ",", "prior", "=", "prior", ",", "movable_base", "=", "not", "fixed", ",", "\n", "grasp_types", "=", "[", "TOP_GRASP", "]", ",", "\n", "goal_on", "=", "{", "block_name", ":", "open_drawer", "}", ",", "\n", "return_init_bq", "=", "True", ",", "return_init_aq", "=", "True", ",", "\n", "#goal_open=[JOINT_TEMPLATE.format(open_drawer)],", "\n", "goal_closed", "=", "ALL_JOINTS", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.cook_block": [[303, 324], ["task.add_kinect", "task.add_block", "pybullet_tools.utils.set_all_static", "task.sample_placement", "task.Task", "task.set_fixed_base", "examples.discrete_belief.dist.UniformDist"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_kinect", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_block", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.sample_placement", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.set_fixed_base"], ["", "def", "cook_block", "(", "world", ",", "fixed", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "add_kinect", "(", "world", ")", "# previously needed to be after set_all_static?", "\n", "if", "fixed", ":", "\n", "        ", "set_fixed_base", "(", "world", ")", "\n", "\n", "", "entity_name", "=", "add_block", "(", "world", ",", "idx", "=", "0", ",", "pose2d", "=", "BOX_POSE2D", ")", "\n", "set_all_static", "(", ")", "\n", "\n", "initial_surface", "=", "'indigo_tmp'", "\n", "sample_placement", "(", "world", ",", "entity_name", ",", "initial_surface", ",", "learned", "=", "True", ")", "\n", "\n", "prior", "=", "{", "\n", "entity_name", ":", "UniformDist", "(", "[", "initial_surface", "]", ")", ",", "\n", "}", "\n", "return", "Task", "(", "world", ",", "prior", "=", "prior", ",", "movable_base", "=", "not", "fixed", ",", "\n", "grasp_types", "=", "[", "TOP_GRASP", "]", ",", "\n", "#goal_detected=[entity_name],", "\n", "#goal_holding=entity_name,", "\n", "goal_cooked", "=", "[", "entity_name", "]", ",", "\n", "#goal_on={entity_name: goal_surface},", "\n", "return_init_bq", "=", "True", ",", "return_init_aq", "=", "True", ",", "\n", "#goal_open=[joint_name],", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.inspect_drawer": [[332, 351], ["task.add_kinect", "task.add_block", "pybullet_tools.utils.set_all_static", "random.choice", "task.sample_placement", "task.Task", "task.set_fixed_base", "examples.discrete_belief.dist.UniformDist"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_kinect", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_block", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.sample_placement", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.set_fixed_base"], ["def", "inspect_drawer", "(", "world", ",", "fixed", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "# Starts in the correct drawer", "\n", "    ", "add_kinect", "(", "world", ")", "\n", "if", "fixed", ":", "\n", "        ", "set_fixed_base", "(", "world", ")", "\n", "", "entity_name", "=", "add_block", "(", "world", ",", "idx", "=", "0", ")", "\n", "set_all_static", "(", ")", "\n", "\n", "drawer", "=", "random", ".", "choice", "(", "ZED_DRAWERS", ")", "\n", "sample_placement", "(", "world", ",", "entity_name", ",", "drawer", ",", "learned", "=", "True", ")", "\n", "\n", "prior", "=", "{", "\n", "entity_name", ":", "UniformDist", "(", "ZED_DRAWERS", ")", ",", "\n", "}", "\n", "return", "Task", "(", "world", ",", "prior", "=", "prior", ",", "movable_base", "=", "not", "fixed", ",", "\n", "grasp_types", "=", "[", "TOP_GRASP", "]", ",", "\n", "goal_on", "=", "{", "entity_name", ":", "drawer", "}", ",", "\n", "return_init_bq", "=", "True", ",", "return_init_aq", "=", "True", ",", "\n", "goal_closed", "=", "ALL_JOINTS", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.swap_drawers": [[353, 391], ["task.add_kinect", "task.add_block", "pybullet_tools.utils.set_all_static", "src.utils.randomize", "task.Task", "task.set_fixed_base", "task.sample_placement", "examples.discrete_belief.dist.UniformDist"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_kinect", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_block", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.set_fixed_base", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.sample_placement"], ["", "def", "swap_drawers", "(", "world", ",", "fixed", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "# Starts in the incorrect drawer", "\n", "    ", "add_kinect", "(", "world", ")", "# previously needed to be after set_all_static?", "\n", "if", "fixed", ":", "\n", "        ", "set_fixed_base", "(", "world", ")", "\n", "", "entity_name", "=", "add_block", "(", "world", ",", "idx", "=", "0", ",", "pose2d", "=", "BOX_POSE2D", ")", "\n", "set_all_static", "(", ")", "\n", "#open_all_doors(world)", "\n", "\n", "#initial_surface, goal_surface = 'indigo_tmp', 'indigo_drawer_top'", "\n", "#initial_surface, goal_surface = 'indigo_drawer_top', 'indigo_drawer_top'", "\n", "#initial_surface, goal_surface = 'indigo_drawer_bottom', 'indigo_drawer_bottom'", "\n", "#initial_surface, goal_surface = ZED_DRAWERS", "\n", "#initial_surface, goal_surface = reversed(ZED_DRAWERS)", "\n", "initial_surface", ",", "goal_surface", "=", "randomize", "(", "ZED_DRAWERS", ")", "\n", "if", "initial_surface", "!=", "'indigo_tmp'", ":", "\n", "        ", "sample_placement", "(", "world", ",", "entity_name", ",", "initial_surface", ",", "learned", "=", "True", ")", "\n", "\n", "#joint_name = JOINT_TEMPLATE.format(goal_surface)", "\n", "#world.open_door(joint_from_name(world.kitchen, JOINT_TEMPLATE.format(goal_surface)))", "\n", "\n", "# TODO: declare success if already believe it's in the drawer or require detection?", "\n", "", "prior", "=", "{", "\n", "#entity_name: UniformDist([initial_surface]),", "\n", "entity_name", ":", "UniformDist", "(", "ZED_DRAWERS", ")", ",", "\n", "#entity_name: UniformDist(['indigo_tmp', 'indigo_drawer_top', 'indigo_drawer_bottom']),", "\n", "}", "\n", "return", "Task", "(", "world", ",", "prior", "=", "prior", ",", "movable_base", "=", "not", "fixed", ",", "\n", "grasp_types", "=", "[", "TOP_GRASP", "]", ",", "\n", "#goal_detected=[entity_name],", "\n", "#goal_holding=entity_name,", "\n", "#goal_cooked=[entity_name],", "\n", "goal_on", "=", "{", "entity_name", ":", "goal_surface", "}", ",", "\n", "return_init_bq", "=", "True", ",", "return_init_aq", "=", "True", ",", "\n", "#goal_open=[joint_name],", "\n", "#goal_closed=[JOINT_TEMPLATE.format(initial_surface)],", "\n", "#goal_closed=[JOINT_TEMPLATE.format(goal_surface)], # TODO: this caused non-fixed base planning to fail due to cost", "\n", "goal_closed", "=", "ALL_JOINTS", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.cook_meal": [[395, 430], ["task.add_kinect", "task.add_ycb", "examples.discrete_belief.dist.DeltaDist", "task.add_ycb", "examples.discrete_belief.dist.DeltaDist", "task.add_ycb", "examples.discrete_belief.dist.DeltaDist", "task.sample_placement", "pybullet_tools.utils.set_all_static", "task.Task", "task.set_fixed_base", "task.sample_placement", "task.sample_placement"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_kinect", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_ycb", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_ycb", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_ycb", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.sample_placement", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.set_fixed_base", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.sample_placement", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.sample_placement"], ["", "def", "cook_meal", "(", "world", ",", "fixed", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "add_kinect", "(", "world", ")", "# previously needed to be after set_all_static?", "\n", "if", "fixed", ":", "\n", "        ", "set_fixed_base", "(", "world", ")", "\n", "\n", "", "prior", "=", "{", "}", "\n", "soup_name", "=", "add_ycb", "(", "world", ",", "'tomato_soup_can'", ",", "pose2d", "=", "[", "0.1", ",", "0.9", ",", "+", "np", ".", "pi", "/", "8", "]", ")", "\n", "prior", "[", "soup_name", "]", "=", "DeltaDist", "(", "'indigo_tmp'", ")", "\n", "if", "not", "fixed", ":", "\n", "        ", "sample_placement", "(", "world", ",", "soup_name", ",", "'indigo_tmp'", ",", "learned", "=", "True", ")", "\n", "\n", "", "mustard_name", "=", "add_ycb", "(", "world", ",", "'mustard_bottle'", ",", "pose2d", "=", "[", "0.25", ",", "1.2", ",", "-", "np", ".", "pi", "/", "8", "]", ")", "\n", "prior", "[", "mustard_name", "]", "=", "DeltaDist", "(", "'indigo_tmp'", ")", "\n", "if", "not", "fixed", ":", "\n", "        ", "sample_placement", "(", "world", ",", "mustard_name", ",", "'indigo_tmp'", ",", "learned", "=", "True", ")", "\n", "\n", "", "stove", "=", "STOVES", "[", "-", "1", "]", "\n", "bowl_name", "=", "add_ycb", "(", "world", ",", "'bowl'", ")", "\n", "prior", "[", "bowl_name", "]", "=", "DeltaDist", "(", "stove", ")", "\n", "sample_placement", "(", "world", ",", "bowl_name", ",", "stove", ",", "learned", "=", "True", ")", "\n", "#print(get_pose(world.get_body(bowl_name)))", "\n", "\n", "set_all_static", "(", ")", "\n", "\n", "return", "Task", "(", "world", ",", "prior", "=", "prior", ",", "movable_base", "=", "not", "fixed", ",", "\n", "#grasp_types=[TOP_GRASP],", "\n", "init_liquid", "=", "[", "(", "soup_name", ",", "'tomato'", ")", ",", "(", "mustard_name", ",", "'mustard'", ")", "]", ",", "\n", "#goal_liquid=[(bowl_name, 'tomato'), (bowl_name, 'mustard')],", "\n", "#goal_holding=soup_name,", "\n", "goal_hand_empty", "=", "True", ",", "\n", "#goal_cooked=[bowl_name],", "\n", "goal_cooked", "=", "[", "'tomato'", ",", "'mustard'", "]", ",", "\n", "return_init_bq", "=", "True", ",", "return_init_aq", "=", "True", ",", "\n", "#goal_open=[joint_name],", "\n", "goal_closed", "=", "ALL_JOINTS", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.stow_block": [[434, 477], ["task.add_kinect", "print", "range", "pybullet_tools.utils.set_all_static", "task.Task", "task.set_fixed_base", "task.add_block", "examples.discrete_belief.dist.DeltaDist", "task.sample_placement"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_kinect", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.set_fixed_base", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.add_block", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.task.sample_placement"], ["", "def", "stow_block", "(", "world", ",", "num", "=", "1", ",", "fixed", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "add_kinect", "(", "world", ")", "# previously needed to be after set_all_static?", "\n", "if", "fixed", ":", "\n", "        ", "set_fixed_base", "(", "world", ")", "\n", "\n", "# initial_surface = random.choice(DRAWERS) # COUNTERS | DRAWERS | SURFACES | CABINETS", "\n", "", "initial_surface", "=", "'indigo_tmp'", "# hitman_tmp | indigo_tmp | range | front_right_stove", "\n", "# initial_surface = 'indigo_drawer_top'", "\n", "goal_surface", "=", "'indigo_drawer_top'", "# baker | hitman_drawer_top | indigo_drawer_top | hitman_tmp | indigo_tmp", "\n", "print", "(", "'Initial surface: | Goal surface: '", ",", "initial_surface", ",", "initial_surface", ")", "\n", "\n", "prior", "=", "{", "}", "\n", "goal_on", "=", "{", "}", "\n", "for", "idx", "in", "range", "(", "num", ")", ":", "\n", "        ", "entity_name", "=", "add_block", "(", "world", ",", "idx", "=", "idx", ",", "pose2d", "=", "SPAM_POSE2D", ")", "\n", "prior", "[", "entity_name", "]", "=", "DeltaDist", "(", "initial_surface", ")", "\n", "goal_on", "[", "entity_name", "]", "=", "goal_surface", "\n", "if", "not", "fixed", ":", "\n", "            ", "sample_placement", "(", "world", ",", "entity_name", ",", "initial_surface", ",", "learned", "=", "True", ")", "\n", "\n", "#obstruction_name = add_box(world, idx=0)", "\n", "#sample_placement(world, obstruction_name, 'hitman_tmp')", "\n", "", "", "set_all_static", "(", ")", "\n", "\n", "# dump_world()", "\n", "# open_names = [", "\n", "#     'chewie_door_right_joint',", "\n", "#     'dagger_door_right_joint',", "\n", "#     'hitman_drawer_bottom_joint',", "\n", "#     # 'indigo_drawer_top_joint',", "\n", "# ]", "\n", "# for joint_name in open_names:", "\n", "#     world.open_door(joint_from_name(world.kitchen, joint_name))", "\n", "\n", "return", "Task", "(", "world", ",", "prior", "=", "prior", ",", "movable_base", "=", "not", "fixed", ",", "\n", "grasp_types", "=", "[", "TOP_GRASP", "]", ",", "\n", "#goal_holding=list(prior)[0],", "\n", "goal_hand_empty", "=", "True", ",", "\n", "goal_on", "=", "goal_on", ",", "\n", "#goal_cooked=list(prior),", "\n", "return_init_bq", "=", "True", ",", "return_init_aq", "=", "True", ",", "\n", "#goal_open=[joint_name],", "\n", "goal_closed", "=", "ALL_JOINTS", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.observe.are_visible": [[20, 43], ["pybullet_tools.utils.batch_ray_collision", "print", "pybullet_tools.utils.has_gui", "world.cameras.items", "sorted", "pybullet_tools.utils.wait_for_duration", "pybullet_tools.utils.remove_handles", "pybullet_tools.utils.get_pose", "pybullet_tools.utils.point_from_pose", "pybullet_tools.utils.point_from_pose", "pybullet_tools.pr2_utils.is_visible_point", "enumerate", "pybullet_tools.utils.add_line", "pybullet_tools.utils.get_pose", "ray_names.append", "rays.append", "zip", "world.get_body", "world.get_body", "pybullet_tools.utils.Ray"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body"], ["def", "are_visible", "(", "world", ")", ":", "\n", "    ", "ray_names", "=", "[", "]", "\n", "rays", "=", "[", "]", "\n", "for", "name", "in", "world", ".", "movable", ":", "\n", "        ", "for", "camera", ",", "info", "in", "world", ".", "cameras", ".", "items", "(", ")", ":", "\n", "            ", "camera_pose", "=", "get_pose", "(", "info", ".", "body", ")", "\n", "camera_point", "=", "point_from_pose", "(", "camera_pose", ")", "\n", "point", "=", "point_from_pose", "(", "get_pose", "(", "world", ".", "get_body", "(", "name", ")", ")", ")", "\n", "if", "is_visible_point", "(", "CAMERA_MATRIX", ",", "KINECT_DEPTH", ",", "point", ",", "camera_pose", "=", "camera_pose", ")", ":", "\n", "                ", "ray_names", ".", "append", "(", "name", ")", "\n", "rays", ".", "append", "(", "Ray", "(", "camera_point", ",", "point", ")", ")", "\n", "", "", "", "ray_results", "=", "batch_ray_collision", "(", "rays", ")", "\n", "visible_indices", "=", "[", "idx", "for", "idx", ",", "(", "name", ",", "result", ")", "in", "enumerate", "(", "zip", "(", "ray_names", ",", "ray_results", ")", ")", "\n", "if", "result", ".", "objectUniqueId", "==", "world", ".", "get_body", "(", "name", ")", "]", "\n", "visible_names", "=", "{", "ray_names", "[", "idx", "]", "for", "idx", "in", "visible_indices", "}", "\n", "print", "(", "'Detected:'", ",", "sorted", "(", "visible_names", ")", ")", "\n", "if", "has_gui", "(", ")", ":", "\n", "        ", "handles", "=", "[", "add_line", "(", "rays", "[", "idx", "]", ".", "start", ",", "rays", "[", "idx", "]", ".", "end", ",", "color", "=", "BLUE", ")", "\n", "for", "idx", "in", "visible_indices", "]", "\n", "wait_for_duration", "(", "1.0", ")", "\n", "remove_handles", "(", "handles", ")", "\n", "# TODO: the object drop seems to happen around here", "\n", "", "return", "visible_names", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.observe.fully_observe_pybullet": [[46, 48], ["pybullet_tools.utils.get_pose", "world.body_from_name.items"], "function", ["None"], ["", "def", "fully_observe_pybullet", "(", "world", ")", ":", "\n", "    ", "return", "{", "name", ":", "get_pose", "(", "body", ")", "for", "name", ",", "body", "in", "world", ".", "body_from_name", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.observe.observe_pybullet": [[50, 75], ["observe.are_visible", "world.get_body", "pybullet_tools.utils.get_pose", "numpy.random.multivariate_normal", "numpy.random.multivariate_normal", "print", "pybullet_tools.utils.Pose", "pybullet_tools.utils.multiply", "detections.setdefault().append", "random.random", "pybullet_tools.utils.Point", "pybullet_tools.utils.Euler", "numpy.zeros", "numpy.zeros", "detections.setdefault", "math.pow", "numpy.eye", "math.pow", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.observe.are_visible", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body"], ["", "def", "observe_pybullet", "(", "world", ")", ":", "\n", "# TODO: randomize robot's pose", "\n", "# TODO: probabilities based on whether in viewcone or not", "\n", "# TODO: sample from poses on table", "\n", "# world_saver = WorldSaver()", "\n", "    ", "visible_entities", "=", "are_visible", "(", "world", ")", "\n", "detections", "=", "{", "}", "\n", "assert", "OBS_P_FP", "==", "0", "\n", "for", "name", "in", "visible_entities", ":", "\n", "# TODO: false positives", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "OBS_P_FN", ":", "\n", "            ", "continue", "\n", "", "body", "=", "world", ".", "get_body", "(", "name", ")", "\n", "pose", "=", "get_pose", "(", "body", ")", "\n", "dx", ",", "dy", "=", "np", ".", "random", ".", "multivariate_normal", "(", "\n", "mean", "=", "np", ".", "zeros", "(", "2", ")", ",", "cov", "=", "math", ".", "pow", "(", "OBS_POS_STD", ",", "2", ")", "*", "np", ".", "eye", "(", "2", ")", ")", "\n", "dyaw", ",", "=", "np", ".", "random", ".", "multivariate_normal", "(", "\n", "mean", "=", "np", ".", "zeros", "(", "1", ")", ",", "cov", "=", "math", ".", "pow", "(", "OBS_ORI_STD", ",", "2", ")", "*", "np", ".", "eye", "(", "1", ")", ")", "\n", "print", "(", "'{}: dx={:.3f}, dy={:.3f}, dyaw={:.5f}'", ".", "format", "(", "name", ",", "dx", ",", "dy", ",", "dyaw", ")", ")", "\n", "noise_pose", "=", "Pose", "(", "Point", "(", "x", "=", "dx", ",", "y", "=", "dy", ")", ",", "Euler", "(", "yaw", "=", "dyaw", ")", ")", "\n", "observed_pose", "=", "multiply", "(", "pose", ",", "noise_pose", ")", "\n", "#world.get_body_type(name)", "\n", "detections", ".", "setdefault", "(", "name", ",", "[", "]", ")", ".", "append", "(", "observed_pose", ")", "# TODO: use type instead", "\n", "#world_saver.restore()", "\n", "", "return", "detections", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.observe.fix_detections": [[78, 90], ["world.fix_pose", "fixed_detections.setdefault().append", "fixed_detections.setdefault"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.fix_pose"], ["", "def", "fix_detections", "(", "belief", ",", "detections", ",", "**", "kwargs", ")", ":", "\n", "# TODO: move directly to belief?", "\n", "    ", "world", "=", "belief", ".", "world", "\n", "fixed_detections", "=", "{", "}", "\n", "for", "name", "in", "detections", ":", "\n", "        ", "if", "name", "==", "belief", ".", "holding", ":", "\n", "            ", "continue", "\n", "", "for", "observed_pose", "in", "detections", "[", "name", "]", ":", "\n", "            ", "fixed_pose", ",", "support", "=", "world", ".", "fix_pose", "(", "name", ",", "observed_pose", ",", "**", "kwargs", ")", "\n", "if", "fixed_pose", "is", "not", "None", ":", "\n", "                ", "fixed_detections", ".", "setdefault", "(", "name", ",", "[", "]", ")", ".", "append", "(", "fixed_pose", ")", "\n", "", "", "", "return", "fixed_detections", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.observe.relative_detections": [[92, 119], ["world.get_world_aabb", "world.get_body", "numpy.array", "pybullet_tools.utils.tform_point", "pybullet_tools.utils.set_pose", "world.get_supporting", "rel_detections.setdefault().append", "pybullet_tools.utils.angle_between", "pybullet_tools.utils.multiply", "pybullet_tools.utils.aabb_contains_point", "src.utils.create_world_pose", "src.utils.create_relative_pose", "pybullet_tools.utils.Pose", "pybullet_tools.utils.point_from_pose", "rel_detections.setdefault", "pybullet_tools.utils.Euler"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_world_aabb", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_supporting", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.create_world_pose", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.create_relative_pose"], ["", "def", "relative_detections", "(", "belief", ",", "detections", ")", ":", "\n", "    ", "world", "=", "belief", ".", "world", "\n", "rel_detections", "=", "{", "}", "\n", "world_aabb", "=", "world", ".", "get_world_aabb", "(", ")", "\n", "for", "name", "in", "detections", ":", "\n", "        ", "if", "name", "==", "belief", ".", "holding", ":", "\n", "            ", "continue", "\n", "", "body", "=", "world", ".", "get_body", "(", "name", ")", "\n", "for", "observed_pose", "in", "detections", "[", "name", "]", ":", "\n", "            ", "world_z_axis", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "local_z_axis", "=", "tform_point", "(", "observed_pose", ",", "world_z_axis", ")", "\n", "if", "np", ".", "pi", "/", "2", "<", "angle_between", "(", "world_z_axis", ",", "local_z_axis", ")", ":", "\n", "                ", "observed_pose", "=", "multiply", "(", "observed_pose", ",", "Pose", "(", "euler", "=", "Euler", "(", "roll", "=", "np", ".", "pi", ")", ")", ")", "\n", "", "if", "not", "aabb_contains_point", "(", "point_from_pose", "(", "observed_pose", ")", ",", "world_aabb", ")", ":", "\n", "                ", "continue", "\n", "", "set_pose", "(", "body", ",", "observed_pose", ")", "\n", "support", "=", "world", ".", "get_supporting", "(", "name", ")", "\n", "#assert support is not None", "\n", "# Could also fix as relative to the world", "\n", "if", "support", "is", "None", ":", "\n", "# TODO: prune if nowhere near a surface (e.g. on the robot)", "\n", "                ", "relative_pose", "=", "create_world_pose", "(", "world", ",", "name", ",", "init", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "relative_pose", "=", "create_relative_pose", "(", "world", ",", "name", ",", "support", ",", "init", "=", "True", ")", "\n", "", "rel_detections", ".", "setdefault", "(", "name", ",", "[", "]", ")", ".", "append", "(", "relative_pose", ")", "\n", "# relative_pose.assign()", "\n", "", "", "return", "rel_detections", "\n", "", ""]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.planner.opt_detect_cost_fn": [[37, 48], ["rp_dist.surface_prob", "examples.discrete_belief.run.clip_cost", "print", "isinstance", "src.stream.detect_cost_fn", "src.stream.compute_detect_cost"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.surface_prob", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.detect_cost_fn", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.compute_detect_cost"], ["def", "opt_detect_cost_fn", "(", "obj_name", ",", "rp_dist", ",", "obs", ",", "rp_sample", ")", ":", "\n", "# TODO: prune these surfaces if the cost is already too high", "\n", "    ", "if", "isinstance", "(", "rp_sample", ",", "RelPose", ")", "or", "(", "rp_dist", "==", "rp_sample", ")", ":", "\n", "# This shouldn't be needed if eager=True", "\n", "        ", "return", "detect_cost_fn", "(", "obj_name", ",", "rp_dist", ",", "obs", ",", "rp_sample", ")", "\n", "", "prob", "=", "rp_dist", ".", "surface_prob", "(", "rp_dist", ".", "surface_name", ")", "\n", "#print(rp_dist.surface_name, prob)", "\n", "cost", "=", "clip_cost", "(", "compute_detect_cost", "(", "prob", ")", ")", "\n", "print", "(", "'{}) Opt Detect Prob: {:.3f} | Opt Detect Cost: {:.3f} | Type: {}'", ".", "format", "(", "\n", "rp_dist", ".", "surface_name", ",", "prob", ",", "cost", ",", "rp_sample", ".", "__class__", ".", "__name__", ")", ")", "\n", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.planner.opt_move_base_test": [[49, 57], ["isinstance", "isinstance"], "function", ["None"], ["", "def", "opt_move_base_test", "(", "bq1", ",", "bq2", ",", "aq", ")", ":", "#, fluents=[]):", "\n", "# TODO: what did these previously do then?", "\n", "#print(bq1, bq2, bq1 != bq2)", "\n", "    ", "if", "isinstance", "(", "bq1", ",", "SharedOptValue", ")", "or", "isinstance", "(", "bq2", ",", "SharedOptValue", ")", ":", "\n", "        ", "return", "True", "\n", "#if isinstance(UniqueOptValue, bq1) and (aq1 == bq2):", "\n", "#    pass", "\n", "", "return", "bq1", "!=", "bq2", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.planner.opt_move_arm_gen_test": [[58, 62], ["isinstance", "isinstance"], "function", ["None"], ["", "def", "opt_move_arm_gen_test", "(", "bq", ",", "aq1", ",", "aq2", ")", ":", "#, fluents=[]):", "\n", "    ", "if", "isinstance", "(", "aq1", ",", "SharedOptValue", ")", "or", "isinstance", "(", "aq2", ",", "SharedOptValue", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "aq1", "!=", "aq2", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.planner.get_stream_info": [[63, 116], ["pddlstream.language.stream.PartialInputs", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.stream.StreamInfo", "pddlstream.language.function.FunctionInfo", "pddlstream.language.stream.PartialInputs", "pddlstream.language.stream.PartialInputs", "pddlstream.language.stream.PartialInputs"], "function", ["None"], ["", "def", "get_stream_info", "(", ")", ":", "\n", "    ", "opt_gen_fn", "=", "PartialInputs", "(", "unique", "=", "False", ")", "\n", "stream_info", "=", "{", "\n", "'test-gripper'", ":", "StreamInfo", "(", "p_success", "=", "0", ",", "eager", "=", "True", ")", ",", "\n", "'test-door'", ":", "StreamInfo", "(", "p_success", "=", "0", ",", "eager", "=", "True", ")", ",", "\n", "'test-near-pose'", ":", "StreamInfo", "(", "p_success", "=", "0", ",", "eager", "=", "True", ")", ",", "\n", "'test-near-joint'", ":", "StreamInfo", "(", "p_success", "=", "0", ",", "eager", "=", "True", ")", ",", "\n", "\n", "# TODO: need to be careful about conditional effects", "\n", "'compute-pose-kin'", ":", "StreamInfo", "(", "opt_gen_fn", "=", "PartialInputs", "(", "unique", "=", "True", ")", ",", "\n", "p_success", "=", "0.5", ",", "eager", "=", "True", ")", ",", "\n", "# 'compute-angle-kin': StreamInfo(p_success=0.5, eager=True),", "\n", "'sample-pose'", ":", "StreamInfo", "(", "opt_gen_fn", "=", "opt_gen_fn", ")", ",", "\n", "'sample-nearby-pose'", ":", "StreamInfo", "(", "opt_gen_fn", "=", "opt_gen_fn", ")", ",", "\n", "'sample-grasp'", ":", "StreamInfo", "(", "opt_gen_fn", "=", "opt_gen_fn", ")", ",", "\n", "\n", "'compute-detect'", ":", "StreamInfo", "(", "opt_gen_fn", "=", "opt_gen_fn", ",", "p_success", "=", "1e-4", ")", ",", "\n", "\n", "'fixed-plan-pick'", ":", "StreamInfo", "(", "opt_gen_fn", "=", "opt_gen_fn", ",", "overhead", "=", "1e1", ")", ",", "\n", "'plan-pick'", ":", "StreamInfo", "(", "opt_gen_fn", "=", "opt_gen_fn", ",", "overhead", "=", "1e1", ")", ",", "\n", "\n", "'fixed-plan-pull'", ":", "StreamInfo", "(", "opt_gen_fn", "=", "opt_gen_fn", ",", "overhead", "=", "1e1", ")", ",", "\n", "# TODO: can't defer this because collision streams depend on it", "\n", "'plan-pull'", ":", "StreamInfo", "(", "opt_gen_fn", "=", "opt_gen_fn", ",", "overhead", "=", "1e1", ",", "defer", "=", "False", ")", ",", "\n", "\n", "'fixed-plan-press'", ":", "StreamInfo", "(", "opt_gen_fn", "=", "opt_gen_fn", ",", "overhead", "=", "1e1", ")", ",", "\n", "'plan-press'", ":", "StreamInfo", "(", "opt_gen_fn", "=", "opt_gen_fn", ",", "overhead", "=", "1e1", ")", ",", "\n", "\n", "'fixed-plan-pour'", ":", "StreamInfo", "(", "opt_gen_fn", "=", "opt_gen_fn", ",", "overhead", "=", "1e1", ")", ",", "\n", "'plan-pour'", ":", "StreamInfo", "(", "opt_gen_fn", "=", "opt_gen_fn", ",", "overhead", "=", "1e1", ")", ",", "\n", "\n", "# 'plan-calibrate-motion': StreamInfo(opt_gen_fn=opt_gen_fn),", "\n", "'plan-base-motion'", ":", "StreamInfo", "(", "opt_gen_fn", "=", "PartialInputs", "(", ")", ",", "#test=opt_move_base_test),", "\n", "overhead", "=", "1e3", ",", "defer", "=", "True", ")", ",", "\n", "'plan-arm-motion'", ":", "StreamInfo", "(", "opt_gen_fn", "=", "PartialInputs", "(", ")", ",", "#test=opt_move_arm_gen_test),", "\n", "overhead", "=", "1e2", ",", "defer", "=", "True", ")", ",", "\n", "# 'plan-gripper-motion': StreamInfo(opt_gen_fn=opt_gen_fn),", "\n", "\n", "'test-cfree-worldpose'", ":", "StreamInfo", "(", "p_success", "=", "1e-3", ",", "negate", "=", "True", ",", "verbose", "=", "False", ")", ",", "\n", "'test-cfree-worldpose-worldpose'", ":", "StreamInfo", "(", "p_success", "=", "1e-3", ",", "negate", "=", "True", ",", "verbose", "=", "False", ")", ",", "\n", "'test-cfree-pose-pose'", ":", "StreamInfo", "(", "p_success", "=", "1e-3", ",", "negate", "=", "True", ",", "verbose", "=", "False", ")", ",", "\n", "'test-cfree-bconf-pose'", ":", "StreamInfo", "(", "p_success", "=", "1e-3", ",", "negate", "=", "True", ",", "verbose", "=", "False", ")", ",", "\n", "'test-cfree-approach-pose'", ":", "StreamInfo", "(", "p_success", "=", "1e-2", ",", "negate", "=", "True", ",", "verbose", "=", "False", ")", ",", "\n", "'test-cfree-angle-angle'", ":", "StreamInfo", "(", "p_success", "=", "1e-2", ",", "negate", "=", "True", ",", "verbose", "=", "False", ")", ",", "\n", "'test-cfree-traj-pose'", ":", "StreamInfo", "(", "p_success", "=", "1e-1", ",", "negate", "=", "True", ",", "verbose", "=", "False", ")", ",", "\n", "'test-ofree-ray-pose'", ":", "StreamInfo", "(", "p_success", "=", "1e-3", ",", "negate", "=", "True", ",", "verbose", "=", "False", ")", ",", "\n", "'test-ofree-ray-grasp'", ":", "StreamInfo", "(", "p_success", "=", "1e-3", ",", "negate", "=", "True", ",", "verbose", "=", "False", ")", ",", "\n", "\n", "'DetectCost'", ":", "FunctionInfo", "(", "opt_detect_cost_fn", ",", "eager", "=", "True", ")", ",", "\n", "# 'Distance': FunctionInfo(p_success=0.99, opt_fn=lambda bq1, bq2: BASE_CONSTANT),", "\n", "# 'MoveCost': FunctionInfo(lambda t: BASE_CONSTANT),", "\n", "}", "\n", "return", "stream_info", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.planner.create_ordered_skeleton": [[119, 133], ["set", "enumerate", "pddlstream.algorithms.constraints.OrderedSkeleton", "set.add"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.add"], ["", "def", "create_ordered_skeleton", "(", "skeleton", ")", ":", "\n", "    ", "if", "skeleton", "is", "None", ":", "\n", "        ", "return", "None", "\n", "#skeletons = [skeleton]", "\n", "#return skeletons", "\n", "", "orders", "=", "set", "(", ")", "\n", "#orders = linear_order(skeleton)", "\n", "last_step", "=", "None", "\n", "for", "step", ",", "(", "name", ",", "args", ")", "in", "enumerate", "(", "skeleton", ")", ":", "\n", "        ", "if", "last_step", "is", "not", "None", ":", "\n", "            ", "orders", ".", "add", "(", "(", "last_step", ",", "step", ")", ")", "\n", "", "if", "name", "not", "in", "INTERNAL_ACTIONS", ":", "\n", "            ", "last_step", "=", "step", "\n", "", "", "return", "[", "OrderedSkeleton", "(", "skeleton", ",", "orders", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.planner.solve_pddlstream": [[134, 180], ["set", "pddlstream.algorithms.downward.set_cost_scale", "pddlstream.algorithms.algorithm.reset_globals", "planner.get_stream_info", "planner.create_ordered_skeleton", "min", "print", "pddlstream.algorithms.constraints.PlanConstraints", "cProfile.Profile", "cProfile.Profile.enable", "pybullet_tools.utils.WorldSaver", "belief.sample_state", "belief.sample_state.assign", "pybullet_tools.utils.wait_for_duration", "pddlstream.language.constants.print_solution", "cProfile.Profile.disable", "pstats.Stats().sort_stats().print_stats", "pybullet_tools.utils.LockRenderer", "pddlstream.algorithms.focused.solve_focused", "pybullet_tools.utils.WorldSaver.restore", "pstats.Stats().sort_stats", "pstats.Stats"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.planner.get_stream_info", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.planner.create_ordered_skeleton", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.sample_state", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign"], ["", "def", "solve_pddlstream", "(", "belief", ",", "problem", ",", "args", ",", "skeleton", "=", "None", ",", "replan_actions", "=", "set", "(", ")", ",", "\n", "max_time", "=", "INF", ",", "max_memory", "=", "MAX_MEMORY", ",", "max_cost", "=", "INF", ")", ":", "\n", "    ", "set_cost_scale", "(", "COST_SCALE", ")", "\n", "reset_globals", "(", ")", "\n", "stream_info", "=", "get_stream_info", "(", ")", "\n", "#print(set(stream_map) - set(stream_info))", "\n", "skeletons", "=", "create_ordered_skeleton", "(", "skeleton", ")", "\n", "max_cost", "=", "min", "(", "max_cost", ",", "COST_BOUND", ")", "\n", "print", "(", "'Max cost: {:.3f} | Max runtime: {:.3f}'", ".", "format", "(", "max_cost", ",", "max_time", ")", ")", "\n", "constraints", "=", "PlanConstraints", "(", "skeletons", "=", "skeletons", ",", "max_cost", "=", "max_cost", ",", "exact", "=", "True", ")", "\n", "\n", "success_cost", "=", "0", "if", "args", ".", "anytime", "else", "INF", "\n", "planner", "=", "'ff-astar'", "if", "args", ".", "anytime", "else", "'ff-wastar2'", "\n", "search_sample_ratio", "=", "0.5", "# 0.5", "\n", "max_planner_time", "=", "10", "\n", "# TODO: max number of samples per iteration flag", "\n", "# TODO: don't greedily expand samples with too high of a complexity if out of time", "\n", "\n", "pr", "=", "cProfile", ".", "Profile", "(", ")", "\n", "pr", ".", "enable", "(", ")", "\n", "saver", "=", "WorldSaver", "(", ")", "\n", "sim_state", "=", "belief", ".", "sample_state", "(", ")", "\n", "sim_state", ".", "assign", "(", ")", "\n", "wait_for_duration", "(", "0.1", ")", "\n", "with", "LockRenderer", "(", "lock", "=", "not", "args", ".", "visualize", ")", ":", "\n", "# TODO: option to only consider costs during local optimization", "\n", "# effort_weight = 0 if args.anytime else 1", "\n", "        ", "effort_weight", "=", "1e-3", "if", "args", ".", "anytime", "else", "1", "\n", "#effort_weight = 0", "\n", "#effort_weight = None", "\n", "solution", "=", "solve_focused", "(", "problem", ",", "constraints", "=", "constraints", ",", "stream_info", "=", "stream_info", ",", "\n", "replan_actions", "=", "replan_actions", ",", "initial_complexity", "=", "5", ",", "\n", "planner", "=", "planner", ",", "max_planner_time", "=", "max_planner_time", ",", "\n", "unit_costs", "=", "args", ".", "unit", ",", "success_cost", "=", "success_cost", ",", "\n", "max_time", "=", "max_time", ",", "max_memory", "=", "max_memory", ",", "verbose", "=", "True", ",", "debug", "=", "False", ",", "\n", "unit_efforts", "=", "True", ",", "effort_weight", "=", "effort_weight", ",", "max_effort", "=", "INF", ",", "\n", "# bind=True, max_skeletons=None,", "\n", "search_sample_ratio", "=", "search_sample_ratio", ")", "\n", "saver", ".", "restore", "(", ")", "\n", "\n", "# print([(s.cost, s.time) for s in SOLUTIONS])", "\n", "# print(SOLUTIONS)", "\n", "", "print_solution", "(", "solution", ")", "\n", "pr", ".", "disable", "(", ")", "\n", "pstats", ".", "Stats", "(", "pr", ")", ".", "sort_stats", "(", "'tottime'", ")", ".", "print_stats", "(", "25", ")", "# cumtime | tottime", "\n", "return", "solution", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.planner.extract_plan_prefix": [[183, 193], ["set", "prefix.append"], "function", ["None"], ["", "def", "extract_plan_prefix", "(", "plan", ",", "replan_actions", "=", "set", "(", ")", ")", ":", "\n", "    ", "if", "plan", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "prefix", "=", "[", "]", "\n", "for", "action", "in", "plan", ":", "\n", "        ", "name", ",", "args", "=", "action", "\n", "prefix", ".", "append", "(", "action", ")", "\n", "if", "name", "in", "replan_actions", ":", "\n", "            ", "break", "\n", "", "", "return", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.planner.combine_commands": [[194, 207], ["combined_commands.append", "isinstance", "isinstance", "combined_commands.append"], "function", ["None"], ["", "def", "combine_commands", "(", "commands", ")", ":", "\n", "    ", "combined_commands", "=", "[", "]", "\n", "for", "command", "in", "commands", ":", "\n", "        ", "if", "not", "combined_commands", ":", "\n", "            ", "combined_commands", ".", "append", "(", "command", ")", "\n", "continue", "\n", "", "prev_command", "=", "combined_commands", "[", "-", "1", "]", "\n", "if", "isinstance", "(", "prev_command", ",", "Trajectory", ")", "and", "isinstance", "(", "command", ",", "Trajectory", ")", "and", "(", "prev_command", ".", "joints", "==", "command", ".", "joints", ")", ":", "\n", "            ", "prev_command", ".", "path", "=", "(", "prev_command", ".", "path", "+", "command", ".", "path", ")", "\n", "", "else", ":", "\n", "            ", "combined_commands", ".", "append", "(", "command", ")", "\n", "", "", "return", "combined_commands", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.planner.commands_from_plan": [[208, 229], ["commands.extend", "commands.append", "commands.extend", "commands.append", "NotImplementedError", "params[].reverse", "src.command.Wait"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Wait.reverse"], ["", "def", "commands_from_plan", "(", "world", ",", "plan", ")", ":", "\n", "    ", "if", "plan", "is", "None", ":", "\n", "        ", "return", "None", "\n", "# TODO: propagate the state", "\n", "", "commands", "=", "[", "]", "\n", "for", "action", ",", "params", "in", "plan", ":", "\n", "# TODO: break if the action is a StreamAction", "\n", "        ", "if", "action", "in", "[", "'move_base'", ",", "'move_arm'", ",", "'move_gripper'", ",", "'pick'", ",", "'pull'", ",", "'pour'", ",", "'press-on'", ",", "'press-off'", "]", ":", "\n", "            ", "commands", ".", "extend", "(", "params", "[", "-", "1", "]", ".", "commands", ")", "\n", "", "elif", "action", "==", "'detect'", ":", "\n", "            ", "commands", ".", "append", "(", "params", "[", "-", "1", "]", ")", "\n", "", "elif", "action", "==", "'place'", ":", "\n", "            ", "commands", ".", "extend", "(", "params", "[", "-", "1", "]", ".", "reverse", "(", ")", ".", "commands", ")", "\n", "", "elif", "action", "in", "[", "'cook'", ",", "'calibrate'", "]", ":", "\n", "# TODO: calibrate action that uses fixed_base_suppressor", "\n", "#steps = int(math.ceil(2.0 / DEFAULT_TIME_STEP))", "\n", "            ", "steps", "=", "0", "\n", "commands", ".", "append", "(", "Wait", "(", "world", ",", "steps", "=", "steps", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "action", ")", "\n", "", "", "return", "commands", "\n", "#return combine_commands(commands)", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.get_surface_reference_pose": [[16, 20], ["src.utils.surface_from_name", "pybullet_tools.utils.link_from_name", "pybullet_tools.utils.get_link_pose"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.surface_from_name"], ["def", "get_surface_reference_pose", "(", "kitchen", ",", "surface_name", ")", ":", "\n", "    ", "surface", "=", "surface_from_name", "(", "surface_name", ")", "\n", "link", "=", "link_from_name", "(", "kitchen", ",", "surface", ".", "link", ")", "\n", "return", "get_link_pose", "(", "kitchen", ",", "link", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.project_base_pose": [[21, 28], ["pybullet_tools.utils.euler_from_quat"], "function", ["None"], ["", "def", "project_base_pose", "(", "base_pose", ")", ":", "\n", "#return base_values_from_pose(base_pose)", "\n", "    ", "base_point", ",", "base_quat", "=", "base_pose", "\n", "x", ",", "y", ",", "_", "=", "base_point", "\n", "_", ",", "_", ",", "theta", "=", "euler_from_quat", "(", "base_quat", ")", "\n", "base_values", "=", "(", "x", ",", "y", ",", "theta", ")", "\n", "return", "base_values", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.get_place_path": [[31, 34], ["os.path.abspath", "os.path.join", "PLACE_IR_FILENAME.format"], "function", ["None"], ["", "def", "get_place_path", "(", "robot_name", ",", "surface_name", ",", "grasp_type", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "DATABASE_DIRECTORY", ",", "PLACE_IR_FILENAME", ".", "format", "(", "\n", "robot_name", "=", "robot_name", ",", "surface_name", "=", "surface_name", ",", "grasp_type", "=", "grasp_type", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.has_place_database": [[35, 37], ["os.path.exists", "database.get_place_path"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.get_place_path"], ["", "def", "has_place_database", "(", "robot_name", ",", "surface_name", ",", "grasp_type", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "exists", "(", "get_place_path", "(", "robot_name", ",", "surface_name", ",", "grasp_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_place_entries": [[38, 42], ["pybullet_tools.utils.read_json().get", "database.has_place_database", "pybullet_tools.utils.read_json", "database.get_place_path"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.has_place_database", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.get_place_path"], ["", "def", "load_place_entries", "(", "robot_name", ",", "surface_name", ",", "grasp_type", ")", ":", "\n", "    ", "if", "not", "has_place_database", "(", "robot_name", ",", "surface_name", ",", "grasp_type", ")", ":", "\n", "        ", "return", "[", "]", "\n", "", "return", "read_json", "(", "get_place_path", "(", "robot_name", ",", "surface_name", ",", "grasp_type", ")", ")", ".", "get", "(", "'entries'", ",", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_place_database": [[43, 45], ["database.load_place_entries"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_place_entries"], ["", "def", "load_place_database", "(", "robot_name", ",", "surface_name", ",", "grasp_type", ",", "field", ")", ":", "\n", "    ", "return", "[", "entry", "[", "field", "]", "for", "entry", "in", "load_place_entries", "(", "robot_name", ",", "surface_name", ",", "grasp_type", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_placements": [[46, 54], ["random.shuffle", "placements.extend", "database.load_place_database"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_place_database"], ["", "def", "load_placements", "(", "world", ",", "surface_name", ",", "grasp_types", "=", "GRASP_TYPES", ")", ":", "\n", "# TODO: could also annotate which grasp came with which placement", "\n", "    ", "placements", "=", "[", "]", "\n", "for", "grasp_type", "in", "grasp_types", ":", "\n", "        ", "placements", ".", "extend", "(", "load_place_database", "(", "world", ".", "robot_name", ",", "surface_name", ",", "grasp_type", ",", "\n", "field", "=", "'surface_from_object'", ")", ")", "\n", "", "random", ".", "shuffle", "(", "placements", ")", "\n", "return", "placements", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_forward_placements": [[55, 62], ["base_from_objects.extend", "database.load_place_database"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_place_database"], ["", "def", "load_forward_placements", "(", "world", ",", "surface_names", "=", "ALL_SURFACES", ",", "grasp_types", "=", "GRASP_TYPES", ")", ":", "\n", "    ", "base_from_objects", "=", "[", "]", "\n", "for", "surface_name", "in", "surface_names", ":", "\n", "        ", "for", "grasp_type", "in", "grasp_types", ":", "\n", "            ", "base_from_objects", ".", "extend", "(", "load_place_database", "(", "world", ".", "robot_name", ",", "surface_name", ",", "grasp_type", ",", "\n", "field", "=", "'base_from_object'", ")", ")", "\n", "", "", "return", "base_from_objects", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_place_base_poses": [[63, 79], ["database.load_place_database", "random.shuffle", "src.utils.unit_pose", "database.project_base_pose", "pybullet_tools.utils.multiply", "pybullet_tools.utils.invert"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_place_database", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.project_base_pose"], ["", "def", "load_place_base_poses", "(", "world", ",", "tool_pose", ",", "surface_name", ",", "grasp_type", ")", ":", "\n", "# TODO: Gaussian perturbation", "\n", "    ", "gripper_from_base_list", "=", "load_place_database", "(", "world", ".", "robot_name", ",", "surface_name", ",", "grasp_type", ",", "\n", "field", "=", "'tool_from_base'", ")", "\n", "random", ".", "shuffle", "(", "gripper_from_base_list", ")", "\n", "handles", "=", "[", "]", "\n", "for", "gripper_from_base", "in", "gripper_from_base_list", ":", "\n", "#world_from_model = get_pose(world.robot)", "\n", "        ", "world_from_model", "=", "unit_pose", "(", ")", "\n", "base_values", "=", "project_base_pose", "(", "multiply", "(", "invert", "(", "world_from_model", ")", ",", "tool_pose", ",", "gripper_from_base", ")", ")", "\n", "#x, y, _ = base_values", "\n", "#_, _, z = get_point(world.floor)", "\n", "#set_joint_positions(world.robot, joints_from_names(world.robot, BASE_JOINTS), base_values)", "\n", "#handles.extend(draw_point(np.array([x, y, z + 0.01]), color=(1, 0, 0), size=0.05))", "\n", "#wait_for_user()", "\n", "yield", "base_values", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_inverse_placements": [[80, 88], ["random.shuffle", "database.load_place_entries", "surface_from_bases.append", "pybullet_tools.utils.multiply", "pybullet_tools.utils.invert"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_place_entries"], ["", "", "def", "load_inverse_placements", "(", "world", ",", "surface_name", ",", "grasp_types", "=", "GRASP_TYPES", ")", ":", "\n", "    ", "surface_from_bases", "=", "[", "]", "\n", "for", "grasp_type", "in", "grasp_types", ":", "\n", "        ", "for", "entry", "in", "load_place_entries", "(", "world", ".", "robot_name", ",", "surface_name", ",", "grasp_type", ")", ":", "\n", "            ", "surface_from_bases", ".", "append", "(", "multiply", "(", "entry", "[", "'surface_from_object'", "]", ",", "\n", "invert", "(", "entry", "[", "'base_from_object'", "]", ")", ")", ")", "\n", "", "", "random", ".", "shuffle", "(", "surface_from_bases", ")", "\n", "return", "surface_from_bases", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_pour_base_poses": [[89, 96], ["database.get_surface_reference_pose", "database.load_inverse_placements", "database.project_base_pose", "pybullet_tools.utils.multiply"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.get_surface_reference_pose", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_inverse_placements", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.project_base_pose"], ["", "def", "load_pour_base_poses", "(", "world", ",", "surface_name", ",", "**", "kwargs", ")", ":", "\n", "    ", "world_from_surface", "=", "get_surface_reference_pose", "(", "world", ".", "kitchen", ",", "surface_name", ")", "\n", "for", "surface_from_base", "in", "load_inverse_placements", "(", "world", ",", "surface_name", ",", "**", "kwargs", ")", ":", "\n", "        ", "base_values", "=", "project_base_pose", "(", "multiply", "(", "world_from_surface", ",", "surface_from_base", ")", ")", "\n", "#world.set_base_conf(base_values)", "\n", "#wait_for_user()", "\n", "yield", "base_values", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.is_press": [[99, 101], ["None"], "function", ["None"], ["", "", "def", "is_press", "(", "joint_name", ")", ":", "\n", "    ", "return", "joint_name", "in", "KNOBS", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.get_joint_reference_pose": [[102, 108], ["database.is_press", "src.utils.joint_from_name", "pybullet_tools.utils.parent_link_from_joint", "pybullet_tools.utils.get_link_pose", "pybullet_tools.utils.get_link_pose", "pybullet_tools.utils.link_from_name"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.is_press"], ["", "def", "get_joint_reference_pose", "(", "kitchen", ",", "joint_name", ")", ":", "\n", "    ", "if", "is_press", "(", "joint_name", ")", ":", "\n", "        ", "return", "get_link_pose", "(", "kitchen", ",", "link_from_name", "(", "kitchen", ",", "joint_name", ")", ")", "\n", "", "joint", "=", "joint_from_name", "(", "kitchen", ",", "joint_name", ")", "\n", "link", "=", "parent_link_from_joint", "(", "kitchen", ",", "joint", ")", "\n", "return", "get_link_pose", "(", "kitchen", ",", "link", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.get_pull_path": [[109, 112], ["os.path.abspath", "database.is_press", "os.path.join", "ir_filename.format"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.is_press"], ["", "def", "get_pull_path", "(", "robot_name", ",", "joint_name", ")", ":", "\n", "    ", "ir_filename", "=", "PRESS_IR_FILENAME", "if", "is_press", "(", "joint_name", ")", "else", "PULL_IR_FILENAME", "\n", "return", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "DATABASE_DIRECTORY", ",", "ir_filename", ".", "format", "(", "robot_name", ",", "joint_name", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_pull_database": [[113, 119], ["database.get_pull_path", "os.path.exists", "pybullet_tools.utils.read_json", "pybullet_tools.utils.read_json.get"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.get_pull_path"], ["", "def", "load_pull_database", "(", "robot_name", ",", "joint_name", ")", ":", "\n", "    ", "data", "=", "{", "}", "\n", "path", "=", "get_pull_path", "(", "robot_name", ",", "joint_name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "data", "=", "read_json", "(", "path", ")", "\n", "", "return", "[", "entry", "[", "'joint_from_base'", "]", "for", "entry", "in", "data", ".", "get", "(", "'entries'", ",", "[", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_pull_base_poses": [[120, 133], ["database.load_pull_database", "database.get_joint_reference_pose", "random.shuffle", "src.utils.unit_pose", "database.project_base_pose", "pybullet_tools.utils.multiply", "pybullet_tools.utils.invert"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_pull_database", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.get_joint_reference_pose", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.project_base_pose"], ["", "def", "load_pull_base_poses", "(", "world", ",", "joint_name", ")", ":", "\n", "    ", "joint_from_base_list", "=", "load_pull_database", "(", "world", ".", "robot_name", ",", "joint_name", ")", "\n", "parent_pose", "=", "get_joint_reference_pose", "(", "world", ".", "kitchen", ",", "joint_name", ")", "\n", "random", ".", "shuffle", "(", "joint_from_base_list", ")", "\n", "handles", "=", "[", "]", "\n", "for", "joint_from_base", "in", "joint_from_base_list", ":", "\n", "#world_from_model = get_pose(world.robot)", "\n", "        ", "world_from_model", "=", "unit_pose", "(", ")", "\n", "base_values", "=", "project_base_pose", "(", "multiply", "(", "invert", "(", "world_from_model", ")", ",", "parent_pose", ",", "joint_from_base", ")", ")", "\n", "#set_joint_positions(world.robot, joints_from_names(world.robot, BASE_JOINTS), base_values)", "\n", "#x, y, _ = base_values", "\n", "#handles.extend(draw_point(np.array([x, y, -0.1]), color=(1, 0, 0), size=0.05))", "\n", "yield", "base_values", "\n", "#wait_for_user()", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.visualize_database": [[137, 147], ["pybullet_tools.utils.wait_for_user", "pybullet_tools.utils.has_gui", "handles.extend", "pybullet_tools.utils.draw_point", "pybullet_tools.utils.point_from_pose"], "function", ["None"], ["", "", "def", "visualize_database", "(", "tool_from_base_list", ")", ":", "\n", "#tool_from_base_list", "\n", "    ", "handles", "=", "[", "]", "\n", "if", "not", "has_gui", "(", ")", ":", "\n", "        ", "return", "handles", "\n", "", "for", "gripper_from_base", "in", "tool_from_base_list", ":", "\n", "# TODO: move away from the environment", "\n", "        ", "handles", ".", "extend", "(", "draw_point", "(", "point_from_pose", "(", "gripper_from_base", ")", ",", "color", "=", "RED", ")", ")", "\n", "", "wait_for_user", "(", ")", "\n", "return", "handles", "\n", "", ""]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.FConf.__repr__": [[304, 316], ["len", "len", "id", "len", "len"], "methods", ["None"], ["    ", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "joints", ")", "==", "2", ":", "\n", "            ", "prefix", "=", "'dq'", "\n", "", "elif", "len", "(", "self", ".", "joints", ")", "==", "2", ":", "\n", "            ", "prefix", "=", "'gq'", "\n", "", "elif", "len", "(", "self", ".", "joints", ")", "==", "3", ":", "\n", "            ", "prefix", "=", "'bq'", "\n", "", "elif", "len", "(", "self", ".", "joints", ")", "==", "7", ":", "\n", "            ", "prefix", "=", "'aq'", "\n", "", "else", ":", "\n", "            ", "prefix", "=", "'q'", "\n", "", "return", "'{}{}'", ".", "format", "(", "prefix", ",", "id", "(", "self", ")", "%", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.__init__": [[353, 365], ["tuple"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "body", ",", "#link=BASE_LINK,", "\n", "reference_body", "=", "None", ",", "reference_link", "=", "BASE_LINK", ",", "\n", "confs", "=", "[", "]", ",", "support", "=", "None", ",", "init", "=", "False", ")", ":", "\n", "        ", "self", ".", "body", "=", "body", "\n", "#self.link = link", "\n", "self", ".", "reference_body", "=", "reference_body", "\n", "self", ".", "reference_link", "=", "reference_link", "\n", "# Could also perform recursively", "\n", "self", ".", "confs", "=", "tuple", "(", "confs", ")", "# Attachment is treated as a conf", "\n", "self", ".", "support", "=", "support", "\n", "self", ".", "init", "=", "init", "\n", "self", ".", "observations", "=", "0", "\n", "# TODO: method for automatically composing these", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.bodies": [[366, 374], ["set", "set.update"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.update"], ["", "@", "property", "\n", "def", "bodies", "(", "self", ")", ":", "\n", "        ", "bodies", "=", "set", "(", ")", "# (self.body, None)", "\n", "#if self.reference_body is not None:", "\n", "#    bodies.update({self.reference_body, frozenset(get_link_subtree(self.body, self.reference_link))})", "\n", "for", "conf", "in", "self", ".", "confs", ":", "\n", "            ", "bodies", ".", "update", "(", "conf", ".", "bodies", ")", "\n", "", "return", "bodies", "\n", "", "def", "assign", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.assign": [[374, 377], ["conf.assign"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign"], ["", "def", "assign", "(", "self", ")", ":", "\n", "        ", "for", "conf", "in", "self", ".", "confs", ":", "# Assumed to be totally ordered", "\n", "            ", "conf", ".", "assign", "(", ")", "\n", "", "", "def", "get_world_from_reference", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.get_world_from_reference": [[377, 382], ["utils.RelPose.assign", "pybullet_tools.utils.get_link_pose", "pybullet_tools.utils.unit_pose"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign"], ["", "", "def", "get_world_from_reference", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "reference_body", "is", "None", ":", "\n", "            ", "return", "unit_pose", "(", ")", "\n", "", "self", ".", "assign", "(", ")", "\n", "return", "get_link_pose", "(", "self", ".", "reference_body", ",", "self", ".", "reference_link", ")", "\n", "", "def", "get_world_from_body", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.get_world_from_body": [[382, 385], ["utils.RelPose.assign", "pybullet_tools.utils.get_link_pose"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign"], ["", "def", "get_world_from_body", "(", "self", ")", ":", "\n", "        ", "self", ".", "assign", "(", ")", "\n", "return", "get_link_pose", "(", "self", ".", "body", ",", "BASE_LINK", ")", "\n", "", "def", "get_reference_from_body", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.get_reference_from_body": [[385, 388], ["pybullet_tools.utils.multiply", "pybullet_tools.utils.invert", "utils.RelPose.get_world_from_body", "utils.RelPose.get_world_from_reference"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.get_world_from_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.get_world_from_reference"], ["", "def", "get_reference_from_body", "(", "self", ")", ":", "\n", "        ", "return", "multiply", "(", "invert", "(", "self", ".", "get_world_from_reference", "(", ")", ")", ",", "\n", "self", ".", "get_world_from_body", "(", ")", ")", "\n", "", "def", "draw", "(", "self", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.draw": [[388, 394], ["pybullet_tools.utils.point_from_pose", "pybullet_tools.utils.draw_point", "utils.RelPose.get_reference_from_body", "pybullet_tools.utils.draw_point"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.get_reference_from_body"], ["", "def", "draw", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "point_reference", "=", "point_from_pose", "(", "self", ".", "get_reference_from_body", "(", ")", ")", "\n", "if", "self", ".", "reference_body", "is", "None", ":", "\n", "            ", "return", "draw_point", "(", "point_reference", ",", "**", "kwargs", ")", "\n", "", "return", "draw_point", "(", "point_reference", ",", "parent", "=", "self", ".", "reference_body", ",", "\n", "parent_link", "=", "self", ".", "reference_link", ",", "**", "kwargs", ")", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.__repr__": [[394, 398], ["id", "id"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "reference_body", "is", "None", ":", "\n", "            ", "return", "'wp{}'", ".", "format", "(", "id", "(", "self", ")", "%", "1000", ")", "\n", "", "return", "'rp{}'", ".", "format", "(", "id", "(", "self", ")", "%", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.__init__": [[454, 463], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "world", ",", "body_name", ",", "grasp_type", ",", "index", ",", "grasp_pose", ",", "pregrasp_pose", ",", "\n", "grasp_width", "=", "None", ")", ":", "\n", "        ", "self", ".", "world", "=", "world", "\n", "self", ".", "body_name", "=", "body_name", "\n", "self", ".", "grasp_type", "=", "grasp_type", "\n", "self", ".", "index", "=", "index", "\n", "self", ".", "grasp_pose", "=", "grasp_pose", "\n", "self", ".", "pregrasp_pose", "=", "pregrasp_pose", "\n", "self", ".", "grasp_width", "=", "grasp_width", "\n", "", "def", "assign", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign": [[463, 466], ["utils.Grasp.get_attachment", "utils.Grasp.assign"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.get_attachment", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign"], ["", "def", "assign", "(", "self", ")", ":", "\n", "        ", "attachment", "=", "self", ".", "get_attachment", "(", ")", "\n", "attachment", ".", "assign", "(", ")", "\n", "", "def", "get_attachment", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.get_attachment": [[466, 469], ["pybullet_tools.utils.Attachment", "utils.Grasp.world.get_body"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body"], ["", "def", "get_attachment", "(", "self", ")", ":", "\n", "        ", "return", "Attachment", "(", "self", ".", "world", ".", "robot", ",", "self", ".", "world", ".", "tool_link", ",", "\n", "self", ".", "grasp_pose", ",", "self", ".", "world", ".", "get_body", "(", "self", ".", "body_name", ")", ")", "\n", "", "def", "get_gripper_conf", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.get_gripper_conf": [[469, 472], ["utils.FConf", "len"], "methods", ["None"], ["", "def", "get_gripper_conf", "(", "self", ")", ":", "\n", "        ", "conf", "=", "[", "self", ".", "grasp_width", "]", "*", "len", "(", "self", ".", "world", ".", "gripper_joints", ")", "\n", "return", "FConf", "(", "self", ".", "world", ".", "robot", ",", "self", ".", "world", ".", "gripper_joints", ",", "conf", ")", "\n", "", "def", "set_gripper", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.set_gripper": [[472, 474], ["utils.Grasp.get_gripper_conf().assign", "utils.Grasp.get_gripper_conf"], "methods", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.get_gripper_conf"], ["", "def", "set_gripper", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_gripper_conf", "(", ")", ".", "assign", "(", ")", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.__repr__": [[474, 476], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, {})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "grasp_type", ",", "self", ".", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.ycb_type_from_file": [[206, 208], ["path.split"], "function", ["None"], ["def", "ycb_type_from_file", "(", "path", ")", ":", "\n", "    ", "return", "path", ".", "split", "(", "'_'", ",", "1", ")", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_ycb_types": [[209, 211], ["sorted", "map", "os.listdir"], "function", ["None"], ["", "def", "get_ycb_types", "(", ")", ":", "\n", "    ", "return", "sorted", "(", "map", "(", "ycb_type_from_file", ",", "os", ".", "listdir", "(", "YCB_PATH", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_ycb_obj_path": [[212, 221], ["os.path.join", "utils.ycb_type_from_file", "os.listdir"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.ycb_type_from_file"], ["", "def", "get_ycb_obj_path", "(", "ycb_type", ")", ":", "\n", "# TODO: simplify geometry (although pybullet does this automatically)", "\n", "    ", "ycb_path", "=", "YCB_PATH", "\n", "path_from_type", "=", "{", "ycb_type_from_file", "(", "path", ")", ":", "path", "for", "path", "in", "os", ".", "listdir", "(", "ycb_path", ")", "}", "\n", "if", "ycb_type", "not", "in", "path_from_type", ":", "\n", "        ", "return", "None", "\n", "# texture_map.png textured.mtl textured.obj textured_simple.obj textured_simple.obj.mtl", "\n", "#return os.path.join(ycb_path, path_from_type[ycb_type], 'textured_simple.obj')", "\n", "", "return", "os", ".", "path", ".", "join", "(", "ycb_path", ",", "path_from_type", "[", "ycb_type", "]", ",", "'textured.obj'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.load_ycb": [[222, 229], ["utils.type_from_name", "utils.get_ycb_obj_path", "pybullet_tools.utils.create_obj"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.type_from_name", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_ycb_obj_path"], ["", "def", "load_ycb", "(", "ycb_name", ",", "**", "kwargs", ")", ":", "\n", "# TODO: simplify geometry", "\n", "    ", "ycb_type", "=", "type_from_name", "(", "ycb_name", ")", "\n", "ycb_obj_path", "=", "get_ycb_obj_path", "(", "ycb_type", ")", "\n", "assert", "ycb_obj_path", "is", "not", "None", "\n", "# TODO: set color (as average) or texture", "\n", "return", "create_obj", "(", "ycb_obj_path", ",", "color", "=", "None", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.name_from_type": [[230, 232], ["NAME_TEMPLATE.format"], "function", ["None"], ["", "def", "name_from_type", "(", "obj_type", ",", "suffix", "=", "''", ")", ":", "\n", "    ", "return", "NAME_TEMPLATE", ".", "format", "(", "obj_type", ",", "suffix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.type_from_name": [[233, 235], ["name.strip"], "function", ["None"], ["", "def", "type_from_name", "(", "name", ")", ":", "\n", "    ", "return", "name", ".", "strip", "(", "string", ".", "digits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_block_path": [[236, 241], ["NotImplementedError", "utils.type_from_name", "type_from_name.split"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.type_from_name"], ["", "def", "get_block_path", "(", "block_name", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", "block_name", ")", "\n", "block_type", "=", "type_from_name", "(", "block_name", ")", "\n", "size", ",", "color", ",", "block", "=", "block_type", ".", "split", "(", "'_'", ")", "\n", "assert", "block", "==", "'block'", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_obj_path": [[242, 246], ["utils.get_ycb_obj_path", "utils.get_block_path"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_ycb_obj_path", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_block_path"], ["", "def", "get_obj_path", "(", "obj_type", ")", ":", "\n", "    ", "if", "'block'", "in", "obj_type", ":", "\n", "        ", "return", "get_block_path", "(", "obj_type", ")", "\n", "", "return", "get_ycb_obj_path", "(", "obj_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_tool_from_root": [[249, 254], ["pybullet_tools.utils.link_from_name", "pybullet_tools.utils.link_from_name", "pybullet_tools.utils.multiply", "utils.get_gripper_link", "utils.get_tool_link", "pybullet_tools.utils.invert", "pybullet_tools.utils.get_link_pose", "pybullet_tools.utils.get_link_pose"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_gripper_link", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_tool_link"], ["", "def", "get_tool_from_root", "(", "robot", ")", ":", "\n", "    ", "root_link", "=", "link_from_name", "(", "robot", ",", "get_gripper_link", "(", "robot", ")", ")", "\n", "tool_link", "=", "link_from_name", "(", "robot", ",", "get_tool_link", "(", "robot", ")", ")", "\n", "return", "multiply", "(", "invert", "(", "get_link_pose", "(", "robot", ",", "tool_link", ")", ")", ",", "\n", "get_link_pose", "(", "robot", ",", "root_link", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.set_tool_pose": [[255, 261], ["pybullet_tools.utils.unit_pose", "utils.get_tool_from_root", "pybullet_tools.utils.set_pose", "pybullet_tools.utils.multiply"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_tool_from_root"], ["", "def", "set_tool_pose", "(", "world", ",", "tool_pose", ")", ":", "\n", "#root_from_urdf = multiply(invert(get_pose(world.gripper, BASE_LINK)), # Previously 0?", "\n", "#                          get_pose(world.gripper))", "\n", "    ", "root_from_urdf", "=", "unit_pose", "(", ")", "\n", "tool_from_root", "=", "get_tool_from_root", "(", "world", ".", "robot", ")", "\n", "set_pose", "(", "world", ".", "gripper", ",", "multiply", "(", "tool_pose", ",", "tool_from_root", ",", "root_from_urdf", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.iterate_approach_path": [[262, 271], ["pose.get_world_from_body", "pybullet_tools.utils.multiply", "pybullet_tools.utils.multiply", "pybullet_tools.utils.interpolate_poses", "pybullet_tools.utils.invert", "pybullet_tools.utils.invert", "utils.set_tool_pose", "pybullet_tools.utils.set_pose", "pybullet_tools.utils.multiply"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.get_world_from_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.set_tool_pose"], ["", "def", "iterate_approach_path", "(", "world", ",", "pose", ",", "grasp", ",", "body", "=", "None", ")", ":", "\n", "    ", "world_from_body", "=", "pose", ".", "get_world_from_body", "(", ")", "\n", "grasp_pose", "=", "multiply", "(", "world_from_body", ",", "invert", "(", "grasp", ".", "grasp_pose", ")", ")", "\n", "approach_pose", "=", "multiply", "(", "world_from_body", ",", "invert", "(", "grasp", ".", "pregrasp_pose", ")", ")", "\n", "for", "tool_pose", "in", "interpolate_poses", "(", "grasp_pose", ",", "approach_pose", ")", ":", "\n", "        ", "set_tool_pose", "(", "world", ",", "tool_pose", ")", "\n", "if", "body", "is", "not", "None", ":", "\n", "            ", "set_pose", "(", "body", ",", "multiply", "(", "tool_pose", ",", "grasp", ".", "grasp_pose", ")", ")", "\n", "", "yield", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_gripper_link": [[272, 280], ["pybullet_tools.utils.get_body_name", "ValueError"], "function", ["None"], ["", "", "def", "get_gripper_link", "(", "robot", ")", ":", "\n", "    ", "robot_name", "=", "get_body_name", "(", "robot", ")", "\n", "if", "robot_name", "==", "FRANKA_CARTER", ":", "\n", "        ", "return", "FRANKA_GRIPPER_LINK", "\n", "#elif robot_name == EVE:", "\n", "#    #return EVE_GRIPPER_LINK.format(a='l') # TODO: issue copying *.dae", "\n", "#    return EVE_GRIPPER_LINK.format(arm=DEFAULT_ARM)", "\n", "", "raise", "ValueError", "(", "robot_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_tool_link": [[281, 288], ["pybullet_tools.utils.get_body_name", "ValueError"], "function", ["None"], ["", "def", "get_tool_link", "(", "robot", ")", ":", "\n", "    ", "robot_name", "=", "get_body_name", "(", "robot", ")", "\n", "if", "robot_name", "==", "FRANKA_CARTER", ":", "\n", "        ", "return", "FRANKA_TOOL_LINK", "\n", "#elif robot_name == EVE:", "\n", "#    return EVE_TOOL_LINK.format(arm=DEFAULT_ARM)", "\n", "", "raise", "ValueError", "(", "robot_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.create_gripper": [[289, 302], ["pybullet_tools.utils.link_from_name", "pybullet_tools.utils.get_link_descendants", "utils.get_gripper_link", "pybullet_tools.utils.LockRenderer", "pybullet_tools.utils.clone_body", "pybullet_tools.utils.get_all_links", "pybullet_tools.utils.set_color", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_gripper_link"], ["", "def", "create_gripper", "(", "robot", ",", "visual", "=", "False", ")", ":", "\n", "    ", "gripper_link", "=", "link_from_name", "(", "robot", ",", "get_gripper_link", "(", "robot", ")", ")", "\n", "links", "=", "get_link_descendants", "(", "robot", ",", "gripper_link", ")", "# get_link_descendants | get_link_subtree", "\n", "with", "LockRenderer", "(", ")", ":", "\n", "# Actually uses the parent of the first link", "\n", "        ", "gripper", "=", "clone_body", "(", "robot", ",", "links", "=", "links", ",", "visual", "=", "False", ",", "collision", "=", "True", ")", "# TODO: joint limits", "\n", "if", "not", "visual", ":", "\n", "            ", "for", "link", "in", "get_all_links", "(", "gripper", ")", ":", "\n", "                ", "set_color", "(", "gripper", ",", "np", ".", "zeros", "(", "4", ")", ",", "link", ")", "\n", "#dump_body(robot)", "\n", "#dump_body(gripper)", "\n", "#user_input()", "\n", "", "", "", "return", "gripper", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.surface_from_name": [[319, 321], ["SURFACE_FROM_NAME.get", "Surface"], "function", ["None"], ["", "", "def", "surface_from_name", "(", "surface_name", ")", ":", "\n", "    ", "return", "SURFACE_FROM_NAME", ".", "get", "(", "surface_name", ",", "Surface", "(", "surface_name", ",", "SURFACE_TOP", ",", "[", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.surface_from_joint": [[322, 327], ["SURFACE_FROM_NAME.items", "ValueError"], "function", ["None"], ["", "def", "surface_from_joint", "(", "joint_name", ")", ":", "\n", "    ", "for", "name", ",", "surface", "in", "SURFACE_FROM_NAME", ".", "items", "(", ")", ":", "\n", "        ", "if", "joint_name", "in", "surface", ".", "joints", ":", "\n", "            ", "return", "name", "\n", "", "", "raise", "ValueError", "(", "joint_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.create_surface_attachment": [[328, 338], ["world.get_body", "pybullet_tools.utils.create_attachment", "utils.surface_from_name", "pybullet_tools.utils.link_from_name"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.surface_from_name"], ["", "def", "create_surface_attachment", "(", "world", ",", "obj_name", ",", "surface_name", ")", ":", "\n", "    ", "body", "=", "world", ".", "get_body", "(", "obj_name", ")", "\n", "if", "surface_name", "in", "ENV_SURFACES", ":", "\n", "        ", "surface_body", "=", "world", ".", "environment_bodies", "[", "surface_name", "]", "\n", "surface_link", "=", "BASE_LINK", "\n", "", "else", ":", "\n", "        ", "surface", "=", "surface_from_name", "(", "surface_name", ")", "\n", "surface_body", "=", "world", ".", "kitchen", "\n", "surface_link", "=", "link_from_name", "(", "surface_body", ",", "surface", ".", "link", ")", "\n", "", "return", "create_attachment", "(", "surface_body", ",", "surface_link", ",", "body", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.pose_from_attachment": [[339, 342], ["utils.RelPose"], "function", ["None"], ["", "def", "pose_from_attachment", "(", "attachment", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "RelPose", "(", "attachment", ".", "child", ",", "reference_body", "=", "attachment", ".", "parent", ",", "\n", "reference_link", "=", "attachment", ".", "parent_link", ",", "confs", "=", "[", "attachment", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.create_relative_pose": [[343, 346], ["utils.create_surface_attachment", "utils.pose_from_attachment"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.create_surface_attachment", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.pose_from_attachment"], ["", "def", "create_relative_pose", "(", "world", ",", "name", ",", "surface", ",", "**", "kwargs", ")", ":", "\n", "    ", "attachment", "=", "create_surface_attachment", "(", "world", ",", "name", ",", "surface", ")", "\n", "return", "pose_from_attachment", "(", "attachment", ",", "support", "=", "surface", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.create_world_pose": [[347, 350], ["pybullet_tools.utils.create_attachment", "utils.pose_from_attachment", "world.get_body"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.pose_from_attachment", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body"], ["", "def", "create_world_pose", "(", "world", ",", "name", ",", "**", "kwargs", ")", ":", "\n", "    ", "attachment", "=", "create_attachment", "(", "world", ".", "kitchen", ",", "BASE_LINK", ",", "world", ".", "get_body", "(", "name", ")", ")", "\n", "return", "pose_from_attachment", "(", "attachment", ",", "support", "=", "None", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.compute_surface_aabb": [[399, 433], ["utils.surface_from_name", "pybullet_tools.utils.link_from_name", "pybullet_tools.utils.get_link_pose", "pybullet_tools.utils.get_aabb", "pybullet_tools.utils.get_aabb", "numpy.array", "pybullet_tools.utils.AABB", "pybullet_tools.utils.apply_affine", "pybullet_tools.utils.aabb_from_points", "filter", "pybullet_tools.utils.read_obj", "pybullet_tools.utils.tform_mesh", "pybullet_tools.utils.aabb_from_points", "sorted", "pybullet_tools.utils.get_data_extents", "pybullet_tools.utils.multiply", "pybullet_tools.utils.get_aabb_vertices", "pybullet_tools.utils.get_collision_data", "pybullet_tools.utils.multiply", "pybullet_tools.utils.get_collision_data", "pybullet_tools.utils.get_data_pose", "pybullet_tools.utils.get_data_pose", "pybullet_tools.utils.point_from_pose", "pybullet_tools.utils.get_data_pose"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.surface_from_name"], ["", "", "def", "compute_surface_aabb", "(", "world", ",", "surface_name", ")", ":", "\n", "    ", "if", "surface_name", "in", "ENV_SURFACES", ":", "# TODO: clean this up", "\n", "# TODO: the aabb for golf is off the table", "\n", "        ", "surface_body", "=", "world", ".", "environment_bodies", "[", "surface_name", "]", "\n", "return", "get_aabb", "(", "surface_body", ")", "\n", "", "surface_body", "=", "world", ".", "kitchen", "\n", "surface_name", ",", "shape_name", ",", "_", "=", "surface_from_name", "(", "surface_name", ")", "\n", "surface_link", "=", "link_from_name", "(", "surface_body", ",", "surface_name", ")", "\n", "surface_pose", "=", "get_link_pose", "(", "surface_body", ",", "surface_link", ")", "\n", "if", "shape_name", "==", "SURFACE_TOP", ":", "\n", "        ", "surface_aabb", "=", "get_aabb", "(", "surface_body", ",", "surface_link", ")", "\n", "", "elif", "shape_name", "==", "SURFACE_BOTTOM", ":", "\n", "        ", "data", "=", "sorted", "(", "get_collision_data", "(", "surface_body", ",", "surface_link", ")", ",", "\n", "key", "=", "lambda", "d", ":", "point_from_pose", "(", "get_data_pose", "(", "d", ")", ")", "[", "2", "]", ")", "[", "0", "]", "\n", "extent", "=", "np", ".", "array", "(", "get_data_extents", "(", "data", ")", ")", "\n", "aabb", "=", "AABB", "(", "-", "extent", "/", "2.", ",", "+", "extent", "/", "2.", ")", "\n", "vertices", "=", "apply_affine", "(", "multiply", "(", "surface_pose", ",", "get_data_pose", "(", "data", ")", ")", ",", "get_aabb_vertices", "(", "aabb", ")", ")", "\n", "surface_aabb", "=", "aabb_from_points", "(", "vertices", ")", "\n", "", "else", ":", "\n", "        ", "[", "data", "]", "=", "filter", "(", "lambda", "d", ":", "d", ".", "filename", "!=", "''", ",", "\n", "get_collision_data", "(", "surface_body", ",", "surface_link", ")", ")", "\n", "meshes", "=", "read_obj", "(", "data", ".", "filename", ")", "\n", "#colors = spaced_colors(len(meshes))", "\n", "#set_color(surface_body, link=surface_link, color=np.zeros(4))", "\n", "mesh", "=", "meshes", "[", "shape_name", "]", "\n", "#for i, (name, mesh) in enumerate(meshes.items()):", "\n", "mesh", "=", "tform_mesh", "(", "multiply", "(", "surface_pose", ",", "get_data_pose", "(", "data", ")", ")", ",", "mesh", "=", "mesh", ")", "\n", "surface_aabb", "=", "aabb_from_points", "(", "mesh", ".", "vertices", ")", "\n", "#add_text(surface_name, position=surface_aabb[1])", "\n", "#draw_mesh(mesh, color=colors[i])", "\n", "#wait_for_user()", "\n", "#draw_aabb(surface_aabb)", "\n", "#wait_for_user()", "\n", "", "return", "surface_aabb", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.is_valid_grasp_type": [[449, 452], ["utils.type_from_name", "INVALID_GRASPS.get"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.type_from_name"], ["def", "is_valid_grasp_type", "(", "obj_name", ",", "grasp_type", ")", ":", "\n", "    ", "obj_type", "=", "type_from_name", "(", "obj_name", ")", "\n", "return", "obj_type", "not", "in", "INVALID_GRASPS", ".", "get", "(", "grasp_type", ",", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_grasps": [[477, 537], ["world.get_body", "utils.type_from_name", "REFERENCE_POSE.get", "pybullet_tools.utils.approximate_as_prism", "pybullet_tools.utils.unit_pose", "pybullet_tools.utils.randomize", "enumerate", "pybullet_tools.utils.implies", "pybullet_tools.utils.unit_point", "pybullet_tools.pr2_utils.get_top_grasps", "list", "pybullet_tools.utils.multiply", "utils.Grasp", "world.is_real", "utils.is_valid_grasp_type", "pybullet_tools.utils.get_unit_vector", "pybullet_tools.pr2_utils.get_side_grasps", "ValueError", "pybullet_tools.utils.multiply", "pybullet_tools.utils.Pose", "pybullet_tools.utils.Pose", "pybullet_tools.utils.BodySaver", "Grasp.get_attachment().assign", "pybullet_tools.utils.get_unit_vector", "pybullet_tools.utils.multiply", "pybullet_tools.utils.Pose", "itertools.cycle", "pybullet_tools.utils.BodySaver", "pybullet_tools.pr2_utils.close_until_collision", "pybullet_tools.utils.Pose", "utils.Grasp.get_attachment", "pybullet_tools.utils.Euler", "pybullet_tools.utils.Euler", "random.uniform"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.type_from_name", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.is_real", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.is_valid_grasp_type", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.get_attachment"], ["", "", "def", "get_grasps", "(", "world", ",", "name", ",", "grasp_types", "=", "GRASP_TYPES", ",", "pre_distance", "=", "APPROACH_DISTANCE", ",", "**", "kwargs", ")", ":", "\n", "    ", "use_width", "=", "world", ".", "robot_name", "==", "FRANKA_CARTER", "\n", "body", "=", "world", ".", "get_body", "(", "name", ")", "\n", "#fraction = 0.25", "\n", "obj_type", "=", "type_from_name", "(", "name", ")", "\n", "body_pose", "=", "REFERENCE_POSE", ".", "get", "(", "obj_type", ",", "unit_pose", "(", ")", ")", "\n", "center", ",", "extent", "=", "approximate_as_prism", "(", "body", ",", "body_pose", ")", "\n", "\n", "for", "grasp_type", "in", "grasp_types", ":", "\n", "        ", "if", "not", "implies", "(", "world", ".", "is_real", "(", ")", ",", "is_valid_grasp_type", "(", "name", ",", "grasp_type", ")", ")", ":", "\n", "            ", "continue", "\n", "#assert is_valid_grasp_type(name, grasp_type)", "\n", "", "if", "grasp_type", "==", "TOP_GRASP", ":", "\n", "            ", "grasp_length", "=", "1.5", "*", "FINGER_EXTENT", "[", "2", "]", "# fraction = 0.5", "\n", "pre_direction", "=", "pre_distance", "*", "get_unit_vector", "(", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "post_direction", "=", "unit_point", "(", ")", "\n", "generator", "=", "get_top_grasps", "(", "body", ",", "under", "=", "True", ",", "tool_pose", "=", "TOOL_POSE", ",", "body_pose", "=", "body_pose", ",", "\n", "grasp_length", "=", "grasp_length", ",", "max_width", "=", "np", ".", "inf", ",", "**", "kwargs", ")", "\n", "", "elif", "grasp_type", "==", "SIDE_GRASP", ":", "\n", "# Take max of height and something", "\n", "            ", "grasp_length", "=", "1.75", "*", "FINGER_EXTENT", "[", "2", "]", "# No problem if pushing a little", "\n", "x", ",", "z", "=", "pre_distance", "*", "get_unit_vector", "(", "[", "3", ",", "-", "1", "]", ")", "\n", "pre_direction", "=", "[", "0", ",", "0", ",", "x", "]", "\n", "post_direction", "=", "[", "0", ",", "0", ",", "z", "]", "\n", "top_offset", "=", "extent", "[", "2", "]", "/", "2", "if", "obj_type", "in", "MID_SIDE_GRASPS", "else", "1.0", "*", "FINGER_EXTENT", "[", "0", "]", "\n", "# Under grasps are actually easier for this robot", "\n", "# TODO: bug in under in that it grasps at the bottom", "\n", "generator", "=", "get_side_grasps", "(", "body", ",", "under", "=", "False", ",", "tool_pose", "=", "TOOL_POSE", ",", "body_pose", "=", "body_pose", ",", "\n", "grasp_length", "=", "grasp_length", ",", "top_offset", "=", "top_offset", ",", "max_width", "=", "np", ".", "inf", ",", "**", "kwargs", ")", "\n", "# if world.robot_name == FRANKA_CARTER else unit_pose()", "\n", "generator", "=", "(", "multiply", "(", "Pose", "(", "euler", "=", "Euler", "(", "yaw", "=", "yaw", ")", ")", ",", "grasp", ")", "\n", "for", "grasp", "in", "generator", "for", "yaw", "in", "[", "0", ",", "np", ".", "pi", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "grasp_type", ")", "\n", "", "grasp_poses", "=", "randomize", "(", "list", "(", "generator", ")", ")", "\n", "if", "obj_type", "in", "CYLINDERS", ":", "\n", "# TODO: filter first", "\n", "            ", "grasp_poses", "=", "(", "multiply", "(", "grasp_pose", ",", "Pose", "(", "euler", "=", "Euler", "(", "\n", "yaw", "=", "random", ".", "uniform", "(", "-", "math", ".", "pi", ",", "math", ".", "pi", ")", ")", ")", ")", "for", "grasp_pose", "in", "cycle", "(", "grasp_poses", ")", ")", "\n", "", "for", "i", ",", "grasp_pose", "in", "enumerate", "(", "grasp_poses", ")", ":", "\n", "            ", "pregrasp_pose", "=", "multiply", "(", "Pose", "(", "point", "=", "pre_direction", ")", ",", "grasp_pose", ",", "\n", "Pose", "(", "point", "=", "post_direction", ")", ")", "\n", "grasp", "=", "Grasp", "(", "world", ",", "name", ",", "grasp_type", ",", "i", ",", "grasp_pose", ",", "pregrasp_pose", ")", "\n", "with", "BodySaver", "(", "body", ")", ":", "\n", "                ", "grasp", ".", "get_attachment", "(", ")", ".", "assign", "(", ")", "\n", "with", "BodySaver", "(", "world", ".", "robot", ")", ":", "\n", "                    ", "grasp", ".", "grasp_width", "=", "close_until_collision", "(", "\n", "world", ".", "robot", ",", "world", ".", "gripper_joints", ",", "bodies", "=", "[", "body", "]", ")", "\n", "#print(get_joint_positions(world.robot, world.arm_joints)[-1])", "\n", "#draw_pose(unit_pose(), parent=world.robot, parent_link=world.tool_link)", "\n", "#grasp.get_attachment().assign()", "\n", "#wait_for_user()", "\n", "##for value in get_joint_limits(world.robot, world.arm_joints[-1]):", "\n", "#for value in [-1.8973, 0, +1.8973]:", "\n", "#    set_joint_position(world.robot, world.arm_joints[-1], value)", "\n", "#    grasp.get_attachment().assign()", "\n", "#    wait_for_user()", "\n", "", "", "if", "use_width", "and", "(", "grasp", ".", "grasp_width", "is", "None", ")", ":", "\n", "                ", "continue", "\n", "", "yield", "grasp", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.custom_limits_from_base_limits": [[540, 551], ["zip", "pybullet_tools.utils.joint_from_name", "pybullet_tools.utils.joint_from_name", "custom_limits.update", "pybullet_tools.utils.joint_from_name"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.update"], ["", "", "", "def", "custom_limits_from_base_limits", "(", "robot", ",", "base_limits", ",", "yaw_limit", "=", "None", ")", ":", "\n", "    ", "x_limits", ",", "y_limits", "=", "zip", "(", "*", "base_limits", ")", "\n", "custom_limits", "=", "{", "\n", "joint_from_name", "(", "robot", ",", "'x'", ")", ":", "x_limits", ",", "\n", "joint_from_name", "(", "robot", ",", "'y'", ")", ":", "y_limits", ",", "\n", "}", "\n", "if", "yaw_limit", "is", "not", "None", ":", "\n", "        ", "custom_limits", ".", "update", "(", "{", "\n", "joint_from_name", "(", "robot", ",", "'theta'", ")", ":", "yaw_limit", ",", "\n", "}", ")", "\n", "", "return", "custom_limits", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_descendant_obstacles": [[552, 556], ["frozenset", "pybullet_tools.utils.get_link_subtree"], "function", ["None"], ["", "def", "get_descendant_obstacles", "(", "body", ",", "link", "=", "BASE_LINK", ")", ":", "\n", "# TODO: deprecate?", "\n", "    ", "return", "{", "(", "body", ",", "frozenset", "(", "[", "link", "]", ")", ")", "\n", "for", "link", "in", "get_link_subtree", "(", "body", ",", "link", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.open_surface_joints": [[562, 569], ["utils.surface_from_name", "pybullet_tools.utils.joint_from_name", "world.open_door"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.surface_from_name", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.open_door"], ["def", "open_surface_joints", "(", "world", ",", "surface_name", ",", "joint_names", "=", "ALL_JOINTS", ")", ":", "\n", "    ", "surface", "=", "surface_from_name", "(", "surface_name", ")", "\n", "for", "joint_name", "in", "surface", ".", "joints", ":", "\n", "        ", "joint", "=", "joint_from_name", "(", "world", ".", "kitchen", ",", "joint_name", ")", "\n", "if", "joint_name", "in", "joint_names", ":", "\n", "# TODO: remove this mechanic in the future", "\n", "            ", "world", ".", "open_door", "(", "joint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_surface_obstacles": [[570, 579], ["utils.surface_from_name", "set", "utils.open_surface_joints", "pybullet_tools.utils.child_link_from_joint", "set.update", "pybullet_tools.utils.joint_from_name", "utils.get_descendant_obstacles"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.surface_from_name", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.open_surface_joints", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.update", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_descendant_obstacles"], ["", "", "", "def", "get_surface_obstacles", "(", "world", ",", "surface_name", ")", ":", "\n", "    ", "surface", "=", "surface_from_name", "(", "surface_name", ")", "\n", "obstacles", "=", "set", "(", ")", "\n", "for", "joint_name", "in", "surface", ".", "joints", ":", "\n", "        ", "link", "=", "child_link_from_joint", "(", "joint_from_name", "(", "world", ".", "kitchen", ",", "joint_name", ")", ")", "\n", "obstacles", ".", "update", "(", "get_descendant_obstacles", "(", "world", ".", "kitchen", ",", "link", ")", ")", "\n", "# Be careful to call this before each check", "\n", "", "open_surface_joints", "(", "world", ",", "surface_name", ",", "joint_names", "=", "CABINET_JOINTS", ")", "\n", "return", "obstacles", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.test_supported": [[580, 592], ["utils.compute_surface_aabb", "pybullet_tools.utils.is_placed_on_aabb", "utils.get_surface_obstacles", "set", "any", "pybullet_tools.utils.pairwise_collision"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.compute_surface_aabb", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_surface_obstacles"], ["", "def", "test_supported", "(", "world", ",", "body", ",", "surface_name", ",", "collisions", "=", "True", ")", ":", "\n", "# TODO: is_center_on_aabb or is_placed_on_aabb", "\n", "    ", "surface_aabb", "=", "compute_surface_aabb", "(", "world", ",", "surface_name", ")", "\n", "# TODO: epsilon thresholds?", "\n", "if", "not", "is_placed_on_aabb", "(", "body", ",", "surface_aabb", ")", ":", "# , above_epsilon=z_offset+1e-3):", "\n", "        ", "return", "False", "\n", "", "obstacles", "=", "world", ".", "static_obstacles", "|", "get_surface_obstacles", "(", "world", ",", "surface_name", ")", "\n", "if", "not", "collisions", ":", "\n", "        ", "obstacles", "=", "set", "(", ")", "\n", "#print([get_link_name(obst[0], list(obst[1])[0]) for obst in obstacles", "\n", "#       if pairwise_collision(body, obst)])", "\n", "", "return", "not", "any", "(", "pairwise_collision", "(", "body", ",", "obst", ")", "for", "obst", "in", "obstacles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_link_obstacles": [[594, 602], ["set", "pybullet_tools.utils.flatten_links", "pybullet_tools.utils.has_link", "world.get_body", "pybullet_tools.utils.link_from_name", "pybullet_tools.utils.flatten_links", "pybullet_tools.utils.get_link_subtree"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body"], ["", "def", "get_link_obstacles", "(", "world", ",", "link_name", ")", ":", "\n", "    ", "if", "link_name", "in", "world", ".", "movable", ":", "\n", "        ", "return", "flatten_links", "(", "world", ".", "get_body", "(", "link_name", ")", ")", "\n", "", "elif", "has_link", "(", "world", ".", "kitchen", ",", "link_name", ")", ":", "\n", "        ", "link", "=", "link_from_name", "(", "world", ".", "kitchen", ",", "link_name", ")", "\n", "return", "flatten_links", "(", "world", ".", "kitchen", ",", "get_link_subtree", "(", "world", ".", "kitchen", ",", "link", ")", ")", "# subtree?", "\n", "", "assert", "link_name", "in", "SURFACE_FROM_NAME", "\n", "return", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.are_confs_close": [[605, 610], ["pybullet_tools.utils.get_difference_fn", "pybullet_tools.utils.get_difference_fn.", "numpy.allclose", "numpy.zeros", "len"], "function", ["None"], ["", "def", "are_confs_close", "(", "conf1", ",", "conf2", ",", "tol", "=", "1e-8", ")", ":", "\n", "    ", "assert", "(", "conf1", ".", "body", "==", "conf2", ".", "body", ")", "and", "(", "conf1", ".", "joints", "==", "conf2", ".", "joints", ")", "\n", "difference_fn", "=", "get_difference_fn", "(", "conf1", ".", "body", ",", "conf1", ".", "joints", ")", "\n", "difference", "=", "difference_fn", "(", "conf1", ".", "values", ",", "conf2", ".", "values", ")", "\n", "return", "np", ".", "allclose", "(", "difference", ",", "np", ".", "zeros", "(", "len", "(", "conf1", ".", "joints", ")", ")", ",", "rtol", "=", "0.", ",", "atol", "=", "tol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.translate_linearly": [[612, 619], ["pybullet_tools.utils.get_joint_positions", "numpy.array", "numpy.append", "pybullet_tools.utils.unit_from_theta"], "function", ["None"], ["", "def", "translate_linearly", "(", "world", ",", "distance", ")", ":", "\n", "# TODO: could just apply in the base frame", "\n", "    ", "x", ",", "y", ",", "theta", "=", "get_joint_positions", "(", "world", ".", "robot", ",", "world", ".", "base_joints", ")", "\n", "pos", "=", "np", ".", "array", "(", "[", "x", ",", "y", "]", ")", "\n", "goal_pos", "=", "pos", "+", "distance", "*", "unit_from_theta", "(", "theta", ")", "\n", "goal_pose", "=", "np", ".", "append", "(", "goal_pos", ",", "[", "theta", "]", ")", "\n", "return", "goal_pose", "", "", ""]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.Observation.__init__": [[242, 244], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "value", "=", "value", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.Observation.__repr__": [[244, 246], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'obs({})'", ".", "format", "(", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.base_cost_fn": [[73, 76], ["pybullet_tools.utils.get_distance"], "function", ["None"], ["def", "base_cost_fn", "(", "q1", ",", "q2", ")", ":", "\n", "    ", "distance", "=", "get_distance", "(", "q1", ".", "values", "[", ":", "2", "]", ",", "q2", ".", "values", "[", ":", "2", "]", ")", "\n", "return", "BASE_CONSTANT", "+", "distance", "/", "BASE_VELOCITY", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.trajectory_cost_fn": [[77, 80], ["t.distance", "pybullet_tools.utils.get_distance"], "function", ["None"], ["", "def", "trajectory_cost_fn", "(", "t", ")", ":", "\n", "    ", "distance", "=", "t", ".", "distance", "(", "distance_fn", "=", "lambda", "q1", ",", "q2", ":", "get_distance", "(", "q1", "[", ":", "2", "]", ",", "q2", "[", ":", "2", "]", ")", ")", "\n", "return", "BASE_CONSTANT", "+", "distance", "/", "BASE_VELOCITY", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.compute_detect_cost": [[81, 86], ["examples.discrete_belief.run.revisit_mdp_cost"], "function", ["None"], ["", "def", "compute_detect_cost", "(", "prob", ")", ":", "\n", "    ", "success_cost", "=", "DETECT_COST", "\n", "failure_cost", "=", "success_cost", "\n", "cost", "=", "revisit_mdp_cost", "(", "success_cost", ",", "failure_cost", ",", "prob", ")", "\n", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.detect_cost_fn": [[87, 95], ["examples.discrete_belief.run.clip_cost", "rp_dist.discrete_prob", "stream.compute_detect_cost"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.discrete_prob", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.compute_detect_cost"], ["", "def", "detect_cost_fn", "(", "obj_name", ",", "rp_dist", ",", "obs", ",", "rp_sample", ")", ":", "\n", "# TODO: extend to continuous rp_sample controls using densities", "\n", "# TODO: count samples in a nearby vicinity to be invariant to number of samples", "\n", "    ", "prob", "=", "1.", "if", "rp_dist", "==", "rp_sample", "else", "rp_dist", ".", "discrete_prob", "(", "rp_sample", ")", "\n", "cost", "=", "clip_cost", "(", "compute_detect_cost", "(", "prob", ")", ",", "max_cost", "=", "MAX_COST", ")", "\n", "#print('{}) Detect Prob: {:.3f} | Detect Cost: {:.3f}'.format(", "\n", "#    rp_dist.surface_name, prob, cost))", "\n", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_compute_pose_kin": [[100, 123], ["isinstance", "world.get_body", "src.utils.RelPose", "rp.project", "stream.get_compute_pose_kin.fn"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SurfaceDist.project"], ["", "def", "get_compute_pose_kin", "(", "world", ")", ":", "\n", "#obstacles = world.static_obstacles", "\n", "\n", "    ", "def", "fn", "(", "o1", ",", "rp", ",", "o2", ",", "p2", ")", ":", "\n", "        ", "if", "o1", "==", "o2", ":", "\n", "            ", "return", "None", "\n", "", "if", "isinstance", "(", "rp", ",", "SurfaceDist", ")", ":", "\n", "            ", "p1", "=", "rp", ".", "project", "(", "lambda", "x", ":", "fn", "(", "o1", ",", "x", ",", "o2", ",", "p2", ")", "[", "0", "]", ")", "# TODO: filter if any in collision", "\n", "return", "(", "p1", ",", ")", "\n", "#if np.allclose(p2.value, unit_pose()):", "\n", "#    return (rp,)", "\n", "#if np.allclose(rp.value, unit_pose()):", "\n", "#    return (p2,)", "\n", "# TODO: assert that the links align?", "\n", "", "body", "=", "world", ".", "get_body", "(", "o1", ")", "\n", "p1", "=", "RelPose", "(", "body", ",", "#reference_body=p2.reference_body, reference_link=p2.reference_link,", "\n", "support", "=", "rp", ".", "support", ",", "confs", "=", "(", "p2", ".", "confs", "+", "rp", ".", "confs", ")", ",", "\n", "init", "=", "(", "rp", ".", "init", "and", "p2", ".", "init", ")", ")", "\n", "#p1.assign()", "\n", "#if any(pairwise_collision(body, obst) for obst in obstacles):", "\n", "#    return None", "\n", "return", "(", "p1", ",", ")", "\n", "", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_compute_angle_kin": [[124, 131], ["pybullet_tools.utils.link_from_name", "src.utils.RelPose"], "function", ["None"], ["", "def", "get_compute_angle_kin", "(", "world", ")", ":", "\n", "    ", "def", "fn", "(", "o", ",", "j", ",", "a", ")", ":", "\n", "        ", "link", "=", "link_from_name", "(", "world", ".", "kitchen", ",", "o", ")", "# link not surface", "\n", "p", "=", "RelPose", "(", "world", ".", "kitchen", ",", "# link,", "\n", "confs", "=", "[", "a", "]", ",", "init", "=", "a", ".", "init", ")", "\n", "return", "(", "p", ",", ")", "\n", "", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.is_visible_by_camera": [[134, 142], ["pybullet_tools.utils.get_pose", "pybullet_tools.pr2_utils.is_visible_point"], "function", ["None"], ["", "def", "is_visible_by_camera", "(", "world", ",", "point", ")", ":", "\n", "    ", "for", "camera_name", "in", "world", ".", "cameras", ":", "\n", "        ", "camera_body", ",", "camera_matrix", ",", "camera_depth", "=", "world", ".", "cameras", "[", "camera_name", "]", "\n", "camera_pose", "=", "get_pose", "(", "camera_body", ")", "\n", "#camera_point = point_from_pose(camera_pose)", "\n", "if", "is_visible_point", "(", "camera_matrix", ",", "camera_depth", ",", "point", ",", "camera_pose", ")", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_compute_detect": [[143, 182], ["world.is_real", "world.get_body", "src.utils.open_surface_joints", "pybullet_tools.utils.get_pose", "pybullet_tools.utils.point_from_pose", "pybullet_tools.utils.point_from_pose", "pybullet_tools.pr2_utils.get_view_aabb", "pybullet_tools.utils.get_aabb_center", "numpy.multiply", "src.command.Detect", "pose.get_world_from_body", "pybullet_tools.utils.get_aabb_extent", "pybullet_tools.utils.apply_affine", "all", "pybullet_tools.utils.Ray", "stream.move_occluding", "src.utils.open_surface_joints", "src.command.Detect.pose.assign", "pybullet_tools.pr2_utils.support_from_aabb", "src.command.Detect.compute_occluding", "pybullet_tools.pr2_utils.is_visible_point"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.is_real", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.open_surface_joints", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.get_world_from_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.move_occluding", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.open_surface_joints", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Detect.compute_occluding"], ["", "def", "get_compute_detect", "(", "world", ",", "ray_trace", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "obstacles", "=", "world", ".", "static_obstacles", "\n", "detect_scale", "=", "1.25", "if", "world", ".", "is_real", "(", ")", "else", "0.5", "# 0.05 | 0.5 | 1.0 | 1.25", "\n", "\n", "def", "fn", "(", "obj_name", ",", "pose", ")", ":", "\n", "# TODO: incorporate probability mass", "\n", "# Ether sample observation (control) or target belief (next state)", "\n", "        ", "body", "=", "world", ".", "get_body", "(", "obj_name", ")", "\n", "open_surface_joints", "(", "world", ",", "pose", ".", "support", ")", "\n", "for", "camera_name", "in", "world", ".", "cameras", ":", "\n", "            ", "camera_body", ",", "camera_matrix", ",", "camera_depth", "=", "world", ".", "cameras", "[", "camera_name", "]", "\n", "camera_pose", "=", "get_pose", "(", "camera_body", ")", "\n", "camera_point", "=", "point_from_pose", "(", "camera_pose", ")", "\n", "obj_point", "=", "point_from_pose", "(", "pose", ".", "get_world_from_body", "(", ")", ")", "\n", "\n", "aabb", "=", "get_view_aabb", "(", "body", ",", "camera_pose", ")", "\n", "center", "=", "get_aabb_center", "(", "aabb", ")", "\n", "extent", "=", "np", ".", "multiply", "(", "[", "detect_scale", ",", "detect_scale", ",", "1", "]", ",", "get_aabb_extent", "(", "aabb", ")", ")", "\n", "view_aabb", "=", "(", "center", "-", "extent", "/", "2", ",", "center", "+", "extent", "/", "2", ")", "\n", "# print(is_visible_aabb(view_aabb, camera_matrix=camera_matrix))", "\n", "obj_points", "=", "apply_affine", "(", "camera_pose", ",", "support_from_aabb", "(", "view_aabb", ")", ")", "+", "[", "obj_point", "]", "\n", "# obj_points = [obj_point]", "\n", "if", "not", "all", "(", "is_visible_point", "(", "camera_matrix", ",", "camera_depth", ",", "point", ",", "camera_pose", ")", "\n", "for", "point", "in", "obj_points", ")", ":", "\n", "                ", "continue", "\n", "", "rays", "=", "[", "Ray", "(", "camera_point", ",", "point", ")", "for", "point", "in", "obj_points", "]", "\n", "detect", "=", "Detect", "(", "world", ",", "camera_name", ",", "obj_name", ",", "pose", ",", "rays", ")", "\n", "if", "ray_trace", ":", "\n", "# TODO: how should doors be handled?", "\n", "                ", "move_occluding", "(", "world", ")", "\n", "open_surface_joints", "(", "world", ",", "pose", ".", "support", ")", "\n", "detect", ".", "pose", ".", "assign", "(", ")", "\n", "if", "obstacles", "&", "detect", ".", "compute_occluding", "(", ")", ":", "\n", "                    ", "continue", "\n", "#detect.draw()", "\n", "#wait_for_user()", "\n", "", "", "return", "(", "detect", ",", ")", "\n", "", "return", "None", "\n", "", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.move_occluding": [[184, 196], ["world.set_base_conf", "pybullet_tools.utils.get_joint_name", "pybullet_tools.utils.set_pose", "world.open_door", "world.close_door", "world.get_body", "pybullet_tools.utils.Pose", "pybullet_tools.utils.Point"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.set_base_conf", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.open_door", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.close_door", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body"], ["", "def", "move_occluding", "(", "world", ")", ":", "\n", "# Prevent obstruction by other objects", "\n", "# TODO: this is a bit of a hack due to pybullet", "\n", "    ", "world", ".", "set_base_conf", "(", "[", "-", "5.0", ",", "0", ",", "0", "]", ")", "\n", "for", "joint", "in", "world", ".", "kitchen_joints", ":", "\n", "        ", "joint_name", "=", "get_joint_name", "(", "world", ".", "kitchen", ",", "joint", ")", "\n", "if", "joint_name", "in", "DRAWERS", ":", "\n", "            ", "world", ".", "open_door", "(", "joint", ")", "\n", "", "else", ":", "\n", "            ", "world", ".", "close_door", "(", "joint", ")", "\n", "", "", "for", "name", "in", "world", ".", "movable", ":", "\n", "        ", "set_pose", "(", "world", ".", "get_body", "(", "name", ")", ",", "Pose", "(", "Point", "(", "z", "=", "-", "5.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_ofree_ray_pose_test": [[197, 216], ["stream.move_occluding", "detect.pose.assign", "pose.assign", "world.get_body", "src.utils.get_link_obstacles", "any", "isinstance", "pybullet_tools.utils.pairwise_collision", "detect.compute_occluding"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.move_occluding", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_link_obstacles", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Detect.compute_occluding"], ["", "", "def", "get_ofree_ray_pose_test", "(", "world", ",", "**", "kwargs", ")", ":", "\n", "# TODO: detect the configuration of joints", "\n", "    ", "def", "test", "(", "detect", ",", "obj_name", ",", "pose", ")", ":", "\n", "        ", "if", "(", "detect", ".", "name", "==", "obj_name", ")", "or", "(", "detect", ".", "surface_name", "==", "obj_name", ")", "or", "isinstance", "(", "pose", ",", "SurfaceDist", ")", ":", "\n", "            ", "return", "True", "\n", "", "move_occluding", "(", "world", ")", "\n", "detect", ".", "pose", ".", "assign", "(", ")", "\n", "pose", ".", "assign", "(", ")", "\n", "body", "=", "world", ".", "get_body", "(", "detect", ".", "name", ")", "\n", "obstacles", "=", "get_link_obstacles", "(", "world", ",", "obj_name", ")", "\n", "if", "any", "(", "pairwise_collision", "(", "body", ",", "obst", ")", "for", "obst", "in", "obstacles", ")", ":", "\n", "            ", "return", "False", "\n", "", "visible", "=", "not", "obstacles", "&", "detect", ".", "compute_occluding", "(", ")", "\n", "#if not visible:", "\n", "#    handles = detect.draw()", "\n", "#    wait_for_user()", "\n", "#    remove_handles(handles)", "\n", "return", "visible", "\n", "", "return", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_ofree_ray_grasp_test": [[217, 239], ["stream.move_occluding", "bconf.assign", "aconf.assign", "detect.pose.assign", "grasp.assign", "src.utils.get_link_obstacles", "src.utils.get_descendant_obstacles", "detect.compute_occluding"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.move_occluding", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_link_obstacles", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_descendant_obstacles", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Detect.compute_occluding"], ["", "def", "get_ofree_ray_grasp_test", "(", "world", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "test", "(", "detect", ",", "bconf", ",", "aconf", ",", "obj_name", ",", "grasp", ")", ":", "\n", "        ", "if", "detect", ".", "name", "==", "obj_name", ":", "\n", "            ", "return", "True", "\n", "# TODO: check collisions with the placement distribution", "\n", "# Move top grasps more vertically", "\n", "", "move_occluding", "(", "world", ")", "\n", "bconf", ".", "assign", "(", ")", "\n", "aconf", ".", "assign", "(", ")", "\n", "detect", ".", "pose", ".", "assign", "(", ")", "\n", "if", "obj_name", "is", "not", "None", ":", "\n", "            ", "grasp", ".", "assign", "(", ")", "\n", "obstacles", "=", "get_link_obstacles", "(", "world", ",", "obj_name", ")", "\n", "", "else", ":", "\n", "            ", "obstacles", "=", "get_descendant_obstacles", "(", "world", ".", "robot", ")", "\n", "", "visible", "=", "not", "obstacles", "&", "detect", ".", "compute_occluding", "(", ")", "\n", "#if not visible:", "\n", "#    handles = detect.draw()", "\n", "#    wait_for_user()", "\n", "#    remove_handles(handles)", "\n", "return", "visible", "\n", "", "return", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_sample_belief_gen": [[247, 292], ["stream.get_compute_detect", "isinstance", "pose_dist.dist.support", "pose_dist.discrete_prob", "get_compute_detect.", "max", "stream.Observation", "sorted", "examples.discrete_belief.run.DDist", "examples.discrete_belief.run.DDist.sample", "stream.Observation", "stream.Observation"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_compute_detect", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.SurfaceDist.support", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.inference.PoseDist.discrete_prob", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.sample"], ["", "", "def", "get_sample_belief_gen", "(", "world", ",", "# min_prob=1. / NUM_PARTICLES,  # TODO: relative instead?", "\n", "max_observations", "=", "10", ",", "\n", "mlo_only", "=", "False", ",", "ordered", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "# TODO: incorporate ray tracing", "\n", "    ", "detect_fn", "=", "get_compute_detect", "(", "world", ",", "ray_trace", "=", "False", ",", "**", "kwargs", ")", "\n", "def", "gen", "(", "obj_name", ",", "pose_dist", ",", "surface_name", ")", ":", "\n", "# TODO: apply these checks to the whole surfaces", "\n", "        ", "if", "isinstance", "(", "pose_dist", ",", "RelPose", ")", ":", "\n", "            ", "yield", "(", "pose_dist", ",", ")", "\n", "return", "\n", "", "valid_samples", "=", "{", "}", "\n", "for", "rp", "in", "pose_dist", ".", "dist", ".", "support", "(", ")", ":", "\n", "            ", "if", "1", "<=", "rp", ".", "observations", ":", "\n", "                ", "continue", "\n", "", "prob", "=", "pose_dist", ".", "discrete_prob", "(", "rp", ")", "\n", "#cost = detect_cost_fn(obj_name, pose_dist, obs=None, rp_sample=rp)", "\n", "#if (cost < MAX_COST): # and (min_prob < prob):", "\n", "# pose = rp.get_world_from_body()", "\n", "result", "=", "detect_fn", "(", "obj_name", ",", "rp", ")", "\n", "if", "result", "is", "not", "None", ":", "\n", "# detect, = result", "\n", "# detect.draw()", "\n", "                ", "valid_samples", "[", "rp", "]", "=", "prob", "\n", "", "", "if", "not", "valid_samples", ":", "\n", "            ", "return", "\n", "\n", "", "if", "mlo_only", ":", "\n", "            ", "rp", "=", "max", "(", "valid_samples", ",", "key", "=", "valid_samples", ".", "__getitem__", ")", "\n", "obs", "=", "Observation", "(", "rp", ")", "\n", "yield", "(", "obs", ",", ")", "\n", "return", "\n", "", "if", "ordered", ":", "\n", "            ", "for", "rp", "in", "sorted", "(", "valid_samples", ",", "key", "=", "valid_samples", ".", "__getitem__", ",", "reverse", "=", "True", ")", ":", "\n", "                ", "obs", "=", "Observation", "(", "rp", ")", "\n", "yield", "(", "obs", ",", ")", "\n", "", "return", "\n", "", "observations", "=", "0", "\n", "while", "valid_samples", "and", "(", "observations", "<", "max_observations", ")", ":", "\n", "            ", "dist", "=", "DDist", "(", "valid_samples", ")", "\n", "rp", "=", "dist", ".", "sample", "(", ")", "\n", "del", "valid_samples", "[", "rp", "]", "\n", "obs", "=", "Observation", "(", "rp", ")", "\n", "yield", "(", "obs", ",", ")", "\n", "observations", "+=", "1", "\n", "", "", "return", "gen", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.update_belief_fn": [[293, 298], ["None"], "function", ["None"], ["", "def", "update_belief_fn", "(", "world", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "fn", "(", "obj_name", ",", "pose_dist", ",", "surface_name", ",", "obs", ")", ":", "\n", "        ", "rp", "=", "obs", ".", "value", "# TODO: proper Bayesian update", "\n", "return", "(", "rp", ",", ")", "\n", "", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_test_near_pose": [[301, 337], ["pybullet_tools.utils.grow_polygon", "map", "src.database.load_forward_placements", "base_conf.assign", "pose.assign", "src.utils.surface_from_name", "pybullet_tools.utils.get_link_pose", "pybullet_tools.utils.get_link_pose", "pybullet_tools.utils.multiply", "pybullet_tools.utils.is_point_in_polygon", "base_conf.assign", "pose.assign", "pybullet_tools.utils.get_link_pose", "pose.get_world_from_body", "pybullet_tools.utils.multiply", "pybullet_tools.utils.is_point_in_polygon", "pybullet_tools.utils.grow_polygon", "pybullet_tools.utils.link_from_name", "pybullet_tools.utils.invert", "pybullet_tools.utils.point_from_pose", "pybullet_tools.utils.invert", "pybullet_tools.utils.point_from_pose", "map", "src.database.load_inverse_placements"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_forward_placements", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.surface_from_name", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.get_world_from_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_inverse_placements"], ["", "def", "get_test_near_pose", "(", "world", ",", "grow_entity", "=", "GROW_FORWARD_RADIUS", ",", "collisions", "=", "False", ",", "teleport", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "base_from_objects", "=", "grow_polygon", "(", "map", "(", "point_from_pose", ",", "load_forward_placements", "(", "world", ",", "**", "kwargs", ")", ")", ",", "radius", "=", "grow_entity", ")", "\n", "vertices_from_surface", "=", "{", "}", "\n", "# TODO: alternatively, distance to hull", "\n", "\n", "def", "test", "(", "object_name", ",", "pose", ",", "base_conf", ")", ":", "\n", "        ", "if", "object_name", "in", "ALL_SURFACES", ":", "\n", "            ", "surface_name", "=", "object_name", "\n", "if", "surface_name", "not", "in", "vertices_from_surface", ":", "\n", "                ", "vertices_from_surface", "[", "surface_name", "]", "=", "grow_polygon", "(", "\n", "map", "(", "point_from_pose", ",", "load_inverse_placements", "(", "world", ",", "surface_name", ")", ")", ",", "radius", "=", "GROW_INVERSE_BASE", ")", "\n", "", "if", "not", "vertices_from_surface", "[", "surface_name", "]", ":", "\n", "                ", "return", "False", "\n", "", "base_conf", ".", "assign", "(", ")", "\n", "pose", ".", "assign", "(", ")", "\n", "surface", "=", "surface_from_name", "(", "surface_name", ")", "\n", "world_from_surface", "=", "get_link_pose", "(", "world", ".", "kitchen", ",", "link_from_name", "(", "world", ".", "kitchen", ",", "surface", ".", "link", ")", ")", "\n", "world_from_base", "=", "get_link_pose", "(", "world", ".", "robot", ",", "world", ".", "base_link", ")", "\n", "surface_from_base", "=", "multiply", "(", "invert", "(", "world_from_surface", ")", ",", "world_from_base", ")", "\n", "#result = is_point_in_polygon(point_from_pose(surface_from_base), vertices_from_surface[surface_name])", "\n", "#if not result:", "\n", "#    draw_pose(surface_from_base)", "\n", "#    points = [Point(x, y, 0) for x, y, in vertices_from_surface[surface_name]]", "\n", "#    add_segments(points, closed=True)", "\n", "#    wait_for_user()", "\n", "return", "is_point_in_polygon", "(", "point_from_pose", "(", "surface_from_base", ")", ",", "vertices_from_surface", "[", "surface_name", "]", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "base_from_objects", ":", "\n", "                ", "return", "False", "\n", "", "base_conf", ".", "assign", "(", ")", "\n", "pose", ".", "assign", "(", ")", "\n", "world_from_base", "=", "get_link_pose", "(", "world", ".", "robot", ",", "world", ".", "base_link", ")", "\n", "world_from_object", "=", "pose", ".", "get_world_from_body", "(", ")", "\n", "base_from_object", "=", "multiply", "(", "invert", "(", "world_from_base", ")", ",", "world_from_object", ")", "\n", "return", "is_point_in_polygon", "(", "point_from_pose", "(", "base_from_object", ")", ",", "base_from_objects", ")", "\n", "", "", "return", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_test_near_joint": [[338, 355], ["base_conf.assign", "pybullet_tools.utils.point_from_pose", "pybullet_tools.utils.is_point_in_polygon", "list", "pybullet_tools.utils.grow_polygon", "pybullet_tools.utils.get_link_pose", "src.database.load_pull_base_poses"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_pull_base_poses"], ["", "def", "get_test_near_joint", "(", "world", ",", "**", "kwargs", ")", ":", "\n", "    ", "vertices_from_joint", "=", "{", "}", "\n", "\n", "def", "test", "(", "joint_name", ",", "base_conf", ")", ":", "\n", "        ", "if", "not", "DOOR_PROXIMITY", ":", "\n", "            ", "return", "True", "\n", "", "if", "joint_name", "not", "in", "vertices_from_joint", ":", "\n", "            ", "base_confs", "=", "list", "(", "load_pull_base_poses", "(", "world", ",", "joint_name", ")", ")", "\n", "vertices_from_joint", "[", "joint_name", "]", "=", "grow_polygon", "(", "base_confs", ",", "radius", "=", "GROW_INVERSE_BASE", ")", "\n", "", "if", "not", "vertices_from_joint", "[", "joint_name", "]", ":", "\n", "            ", "return", "False", "\n", "# TODO: can't open hitman_drawer_top_joint any more", "\n", "# Likely due to conservative carter geometry", "\n", "", "base_conf", ".", "assign", "(", ")", "\n", "base_point", "=", "point_from_pose", "(", "get_link_pose", "(", "world", ".", "robot", ",", "world", ".", "base_link", ")", ")", "\n", "return", "is_point_in_polygon", "(", "base_point", "[", ":", "2", "]", ",", "vertices_from_joint", "[", "joint_name", "]", ")", "\n", "", "return", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_stable_gen": [[358, 432], ["world.get_body", "src.utils.compute_surface_aabb", "src.database.load_placements", "range", "pybullet_tools.utils.set_pose", "pybullet_tools.utils.link_from_name", "pybullet_tools.utils.get_link_pose", "random.uniform", "pybullet_tools.utils.Pose", "pybullet_tools.utils.multiply", "numpy.linspace", "src.utils.test_supported", "src.utils.create_relative_pose", "pybullet_tools.utils.stable_z_on_aabb", "pybullet_tools.utils.Point", "pybullet_tools.utils.Euler", "src.database.get_surface_reference_pose", "pybullet_tools.utils.multiply", "pybullet_tools.utils.point_from_pose", "pybullet_tools.utils.euler_from_quat", "pybullet_tools.utils.stable_z_on_aabb", "random.uniform", "pybullet_tools.utils.quat_from_euler", "pybullet_tools.utils.sample_placement_on_aabb", "stream.is_visible_by_camera", "pybullet_tools.utils.Pose", "pybullet_tools.utils.multiply", "pybullet_tools.utils.set_pose", "pybullet_tools.utils.point_from_pose", "random.choice", "pybullet_tools.utils.quat_from_pose", "numpy.random.normal", "numpy.zeros", "pybullet_tools.utils.Euler", "pybullet_tools.utils.point_from_pose", "pybullet_tools.utils.unit_from_theta", "pybullet_tools.utils.Point", "src.utils.test_supported"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.compute_surface_aabb", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_placements", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.test_supported", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.create_relative_pose", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.get_surface_reference_pose", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.is_visible_by_camera", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.test_supported"], ["", "def", "get_stable_gen", "(", "world", ",", "max_attempts", "=", "100", ",", "\n", "visibility", "=", "True", ",", "learned", "=", "True", ",", "collisions", "=", "True", ",", "\n", "pos_scale", "=", "0.01", ",", "rot_scale", "=", "np", ".", "pi", "/", "16", ",", "robust_radius", "=", "0.0", ",", "\n", "z_offset", "=", "Z_EPSILON", ",", "**", "kwargs", ")", ":", "\n", "\n", "# TODO: remove fixed collisions with contained surfaces", "\n", "# TODO: place where currently standing", "\n", "    ", "def", "gen", "(", "obj_name", ",", "surface_name", ")", ":", "\n", "        ", "obj_body", "=", "world", ".", "get_body", "(", "obj_name", ")", "\n", "surface_body", "=", "world", ".", "kitchen", "\n", "if", "surface_name", "in", "ENV_SURFACES", ":", "\n", "            ", "surface_body", "=", "world", ".", "environment_bodies", "[", "surface_name", "]", "\n", "", "surface_aabb", "=", "compute_surface_aabb", "(", "world", ",", "surface_name", ")", "\n", "learned_poses", "=", "load_placements", "(", "world", ",", "surface_name", ")", "if", "learned", "else", "[", "]", "# TODO: GROW_PLACEMENT", "\n", "\n", "yaw_range", "=", "(", "-", "np", ".", "pi", ",", "np", ".", "pi", ")", "\n", "#if world.is_real():", "\n", "#    center = -np.pi/4", "\n", "#    half_extent = np.pi / 16", "\n", "#    yaw_range = (center-half_extent, center+half_extent)", "\n", "while", "True", ":", "\n", "            ", "for", "_", "in", "range", "(", "max_attempts", ")", ":", "\n", "                ", "if", "surface_name", "in", "STOVES", ":", "\n", "                    ", "surface_link", "=", "link_from_name", "(", "world", ".", "kitchen", ",", "surface_name", ")", "\n", "world_from_surface", "=", "get_link_pose", "(", "world", ".", "kitchen", ",", "surface_link", ")", "\n", "z", "=", "stable_z_on_aabb", "(", "obj_body", ",", "surface_aabb", ")", "-", "point_from_pose", "(", "world_from_surface", ")", "[", "2", "]", "\n", "yaw", "=", "random", ".", "uniform", "(", "*", "yaw_range", ")", "\n", "body_pose_surface", "=", "Pose", "(", "Point", "(", "z", "=", "z", "+", "z_offset", ")", ",", "Euler", "(", "yaw", "=", "yaw", ")", ")", "\n", "body_pose_world", "=", "multiply", "(", "world_from_surface", ",", "body_pose_surface", ")", "\n", "", "elif", "learned", ":", "\n", "                    ", "if", "not", "learned_poses", ":", "\n", "                        ", "return", "\n", "", "surface_pose_world", "=", "get_surface_reference_pose", "(", "surface_body", ",", "surface_name", ")", "\n", "sampled_pose_surface", "=", "multiply", "(", "surface_pose_world", ",", "random", ".", "choice", "(", "learned_poses", ")", ")", "\n", "[", "x", ",", "y", ",", "_", "]", "=", "point_from_pose", "(", "sampled_pose_surface", ")", "\n", "_", ",", "_", ",", "yaw", "=", "euler_from_quat", "(", "quat_from_pose", "(", "sampled_pose_surface", ")", ")", "\n", "dx", ",", "dy", "=", "np", ".", "random", ".", "normal", "(", "scale", "=", "pos_scale", ",", "size", "=", "2", ")", "if", "pos_scale", "else", "np", ".", "zeros", "(", "2", ")", "\n", "# TODO: avoid reloading", "\n", "z", "=", "stable_z_on_aabb", "(", "obj_body", ",", "surface_aabb", ")", "\n", "yaw", "=", "random", ".", "uniform", "(", "*", "yaw_range", ")", "\n", "#yaw = wrap_angle(yaw + np.random.normal(scale=rot_scale))", "\n", "quat", "=", "quat_from_euler", "(", "Euler", "(", "yaw", "=", "yaw", ")", ")", "\n", "body_pose_world", "=", "(", "[", "x", "+", "dx", ",", "y", "+", "dy", ",", "z", "+", "z_offset", "]", ",", "quat", ")", "\n", "# TODO: project onto the surface", "\n", "", "else", ":", "\n", "# TODO: halton sequence", "\n", "# unit_generator(d, use_halton=True)", "\n", "                    ", "body_pose_world", "=", "sample_placement_on_aabb", "(", "obj_body", ",", "surface_aabb", ",", "\n", "epsilon", "=", "z_offset", ",", "percent", "=", "2.0", ")", "\n", "if", "body_pose_world", "is", "None", ":", "\n", "                        ", "continue", "# return?", "\n", "", "", "if", "visibility", "and", "not", "is_visible_by_camera", "(", "world", ",", "point_from_pose", "(", "body_pose_world", ")", ")", ":", "\n", "                    ", "continue", "\n", "# TODO: make sure the surface is open when doing this", "\n", "\n", "", "robust", "=", "True", "\n", "if", "robust_radius", "!=", "0.", ":", "\n", "                    ", "for", "theta", "in", "np", ".", "linspace", "(", "0", ",", "5", "*", "np", ".", "pi", ",", "num", "=", "8", ")", ":", "\n", "                        ", "x", ",", "y", "=", "robust_radius", "*", "unit_from_theta", "(", "theta", ")", "\n", "delta_body", "=", "Pose", "(", "Point", "(", "x", ",", "y", ")", ")", "\n", "delta_world", "=", "multiply", "(", "body_pose_world", ",", "delta_body", ")", "\n", "set_pose", "(", "obj_body", ",", "delta_world", ")", "\n", "if", "not", "test_supported", "(", "world", ",", "obj_body", ",", "surface_name", ",", "collisions", "=", "collisions", ")", ":", "\n", "                            ", "robust", "=", "False", "\n", "break", "\n", "\n", "", "", "", "set_pose", "(", "obj_body", ",", "body_pose_world", ")", "\n", "if", "robust", "and", "test_supported", "(", "world", ",", "obj_body", ",", "surface_name", ",", "collisions", "=", "collisions", ")", ":", "\n", "                    ", "rp", "=", "create_relative_pose", "(", "world", ",", "obj_name", ",", "surface_name", ")", "\n", "yield", "(", "rp", ",", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "yield", "None", "\n", "", "", "", "return", "gen", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_nearby_stable_gen": [[433, 454], ["stream.get_stable_gen", "stream.get_test_near_pose", "stream.get_compute_pose_kin", "itertools.islice", "get_stable_gen.", "get_compute_pose_kin.", "get_test_near_pose."], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_stable_gen", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_test_near_pose", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_compute_pose_kin"], ["", "def", "get_nearby_stable_gen", "(", "world", ",", "max_attempts", "=", "25", ",", "**", "kwargs", ")", ":", "\n", "    ", "stable_gen", "=", "get_stable_gen", "(", "world", ",", "**", "kwargs", ")", "\n", "test_near_pose", "=", "get_test_near_pose", "(", "world", ",", "#surface_names=[],", "\n", "grasp_types", "=", "[", "TOP_GRASP", "]", ",", "grow_entity", "=", "0.0", ")", "\n", "compute_pose_kin", "=", "get_compute_pose_kin", "(", "world", ")", "\n", "\n", "def", "gen", "(", "obj_name", ",", "surface_name", ",", "pose2", ",", "base_conf", ")", ":", "\n", "#base_conf.assign()", "\n", "#pose2.assign()", "\n", "        ", "max_failures", "=", "FIXED_FAILURES", "if", "world", ".", "task", ".", "movable_base", "else", "INF", "\n", "failures", "=", "0", "\n", "while", "failures", "<=", "max_failures", ":", "\n", "            ", "for", "rel_pose", ",", "in", "islice", "(", "stable_gen", "(", "obj_name", ",", "surface_name", ")", ",", "max_attempts", ")", ":", "\n", "                ", "pose1", ",", "=", "compute_pose_kin", "(", "obj_name", ",", "rel_pose", ",", "surface_name", ",", "pose2", ")", "\n", "if", "test_near_pose", "(", "obj_name", ",", "pose1", ",", "base_conf", ")", ":", "\n", "                    ", "yield", "(", "pose1", ",", "rel_pose", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "yield", "None", "\n", "failures", "+=", "1", "\n", "", "", "", "return", "gen", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_grasp_gen": [[455, 461], ["src.utils.get_grasps"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_grasps"], ["", "def", "get_grasp_gen", "(", "world", ",", "collisions", "=", "False", ",", "randomize", "=", "True", ",", "**", "kwargs", ")", ":", "# teleport=False,", "\n", "# TODO: produce carry arm confs here", "\n", "    ", "def", "gen", "(", "name", ",", "grasp_type", ")", ":", "\n", "        ", "for", "grasp", "in", "get_grasps", "(", "world", ",", "name", ",", "grasp_types", "=", "[", "grasp_type", "]", ",", "**", "kwargs", ")", ":", "\n", "            ", "yield", "(", "grasp", ",", ")", "\n", "", "", "return", "gen", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.is_robot_visible": [[464, 479], ["pybullet_tools.utils.point_from_pose", "world.cameras.values", "pybullet_tools.utils.get_link_pose", "pybullet_tools.utils.get_pose", "pybullet_tools.pr2_utils.is_visible_point"], "function", ["None"], ["", "def", "is_robot_visible", "(", "world", ",", "links", ")", ":", "\n", "    ", "for", "link", "in", "links", ":", "\n", "        ", "link_point", "=", "point_from_pose", "(", "get_link_pose", "(", "world", ".", "robot", ",", "link", ")", ")", "\n", "visible", "=", "False", "\n", "for", "camera_body", ",", "camera_matrix", ",", "camera_depth", "in", "world", ".", "cameras", ".", "values", "(", ")", ":", "\n", "            ", "camera_pose", "=", "get_pose", "(", "camera_body", ")", "\n", "#camera_point = point_from_pose(camera_pose)", "\n", "#add_line(link_point, camera_point)", "\n", "if", "is_visible_point", "(", "camera_matrix", ",", "camera_depth", ",", "link_point", ",", "camera_pose", ")", ":", "\n", "                ", "visible", "=", "True", "\n", "break", "\n", "", "", "if", "not", "visible", ":", "\n", "            ", "return", "False", "\n", "#wait_for_user()", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.test_base_conf": [[480, 490], ["bq.assign", "world.is_real", "conf.assign", "any", "stream.is_robot_visible", "pybullet_tools.utils.pairwise_collision"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.is_real", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.is_robot_visible"], ["", "def", "test_base_conf", "(", "world", ",", "bq", ",", "obstacles", ",", "min_distance", "=", "0.0", ")", ":", "\n", "    ", "robot_links", "=", "[", "world", ".", "franka_link", ",", "world", ".", "gripper_link", "]", "if", "world", ".", "is_real", "(", ")", "else", "[", "]", "\n", "bq", ".", "assign", "(", ")", "\n", "for", "conf", "in", "world", ".", "special_confs", ":", "\n", "# Could even sample a special visible conf for this base_conf", "\n", "        ", "conf", ".", "assign", "(", ")", "\n", "if", "not", "is_robot_visible", "(", "world", ",", "robot_links", ")", "or", "any", "(", "pairwise_collision", "(", "\n", "world", ".", "robot", ",", "b", ",", "max_distance", "=", "min_distance", ")", "for", "b", "in", "obstacles", ")", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.inverse_reachability": [[491, 524], ["set", "pybullet_tools.utils.get_custom_limits", "itertools.islice", "src.utils.FConf", "world.is_real", "src.utils.FConf.assign", "pybullet_tools.utils.all_between", "stream.test_base_conf", "src.utils.translate_linearly", "src.utils.FConf", "print", "stream.test_base_conf"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.is_real", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.test_base_conf", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.translate_linearly", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.test_base_conf"], ["", "def", "inverse_reachability", "(", "world", ",", "base_generator", ",", "obstacles", "=", "set", "(", ")", ",", "\n", "max_attempts", "=", "25", ",", "**", "kwargs", ")", ":", "\n", "    ", "min_distance", "=", "0.01", "#if world.is_real() else 0.0", "\n", "min_nearby_distance", "=", "0.1", "# if world.is_real() else 0.0", "\n", "lower_limits", ",", "upper_limits", "=", "get_custom_limits", "(", "\n", "world", ".", "robot", ",", "world", ".", "base_joints", ",", "world", ".", "custom_limits", ")", "\n", "while", "True", ":", "\n", "        ", "attempt", "=", "0", "\n", "for", "base_conf", "in", "islice", "(", "base_generator", ",", "max_attempts", ")", ":", "\n", "            ", "attempt", "+=", "1", "\n", "if", "not", "all_between", "(", "lower_limits", ",", "base_conf", ",", "upper_limits", ")", ":", "\n", "                ", "continue", "\n", "", "bq", "=", "FConf", "(", "world", ".", "robot", ",", "world", ".", "base_joints", ",", "base_conf", ")", "\n", "#wait_for_user()", "\n", "if", "not", "test_base_conf", "(", "world", ",", "bq", ",", "obstacles", ",", "min_distance", "=", "min_distance", ")", ":", "\n", "                ", "continue", "\n", "", "if", "world", ".", "is_real", "(", ")", ":", "\n", "# TODO: could also rotate in place", "\n", "# TODO: restrict orientation to face the counter", "\n", "                ", "nearby_values", "=", "translate_linearly", "(", "world", ",", "distance", "=", "-", "REVERSE_DISTANCE", ")", "\n", "bq", ".", "nearby_bq", "=", "FConf", "(", "world", ".", "robot", ",", "world", ".", "base_joints", ",", "nearby_values", ")", "\n", "if", "not", "test_base_conf", "(", "world", ",", "bq", ".", "nearby_bq", ",", "obstacles", ",", "min_distance", "=", "min_nearby_distance", ")", ":", "\n", "                    ", "continue", "\n", "#if PRINT_FAILURES: print('Success after {} IR attempts:'.format(attempt))", "\n", "", "", "bq", ".", "assign", "(", ")", "\n", "#wait_for_user()", "\n", "yield", "bq", "\n", "break", "\n", "", "else", ":", "\n", "            ", "if", "PRINT_FAILURES", ":", "print", "(", "'Failed after {} IR attempts:'", ".", "format", "(", "attempt", ")", ")", "\n", "if", "attempt", "<", "max_attempts", "-", "1", ":", "\n", "                ", "return", "\n", "", "yield", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.plan_approach": [[525, 581], ["set", "pybullet_tools.utils.get_distance_fn", "pybullet_tools.utils.get_joint_positions", "world.solve_inverse_kinematics", "pybullet_tools.utils.get_moving_links", "any", "pybullet_tools.utils.get_joint_positions", "pybullet_tools.utils.get_distance_fn.", "pybullet_tools.utils.plan_direct_joint_motion", "aq.assign", "pybullet_tools.utils.plan_joint_motion", "frozenset", "numpy.ones", "print", "pybullet_tools.utils.pairwise_collision", "print", "print", "len", "print", "print"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.solve_inverse_kinematics", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign"], ["", "", "", "def", "plan_approach", "(", "world", ",", "approach_pose", ",", "attachments", "=", "[", "]", ",", "obstacles", "=", "set", "(", ")", ",", "\n", "teleport", "=", "False", ",", "switches_only", "=", "False", ",", "\n", "approach_path", "=", "not", "MOVE_ARM", ",", "**", "kwargs", ")", ":", "\n", "# TODO: use velocities in the distance function", "\n", "    ", "distance_fn", "=", "get_distance_fn", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ")", "\n", "aq", "=", "world", ".", "carry_conf", "\n", "grasp_conf", "=", "get_joint_positions", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ")", "\n", "if", "switches_only", ":", "\n", "        ", "return", "[", "aq", ".", "values", ",", "grasp_conf", "]", "\n", "\n", "# TODO: could extract out collision function", "\n", "# TODO: track the full approach motion", "\n", "", "full_approach_conf", "=", "world", ".", "solve_inverse_kinematics", "(", "\n", "approach_pose", ",", "nearby_tolerance", "=", "NEARBY_APPROACH", ")", "\n", "if", "full_approach_conf", "is", "None", ":", "# TODO: | {obj}", "\n", "        ", "if", "PRINT_FAILURES", ":", "print", "(", "'Pregrasp kinematic failure'", ")", "\n", "return", "None", "\n", "", "moving_links", "=", "get_moving_links", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ")", "\n", "robot_obstacle", "=", "(", "world", ".", "robot", ",", "frozenset", "(", "moving_links", ")", ")", "\n", "#robot_obstacle = world.robot", "\n", "if", "any", "(", "pairwise_collision", "(", "robot_obstacle", ",", "b", ")", "for", "b", "in", "obstacles", ")", ":", "# TODO: | {obj}", "\n", "        ", "if", "PRINT_FAILURES", ":", "print", "(", "'Pregrasp collision failure'", ")", "\n", "return", "None", "\n", "", "approach_conf", "=", "get_joint_positions", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ")", "\n", "if", "teleport", ":", "\n", "        ", "return", "[", "aq", ".", "values", ",", "approach_conf", ",", "grasp_conf", "]", "\n", "", "distance", "=", "distance_fn", "(", "grasp_conf", ",", "approach_conf", ")", "\n", "if", "MAX_CONF_DISTANCE", "<", "distance", ":", "\n", "        ", "if", "PRINT_FAILURES", ":", "print", "(", "'Pregrasp proximity failure (distance={:.5f})'", ".", "format", "(", "distance", ")", ")", "\n", "return", "None", "\n", "\n", "", "resolutions", "=", "ARM_RESOLUTION", "*", "np", ".", "ones", "(", "len", "(", "world", ".", "arm_joints", ")", ")", "\n", "grasp_path", "=", "plan_direct_joint_motion", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ",", "grasp_conf", ",", "\n", "attachments", "=", "attachments", ",", "obstacles", "=", "obstacles", ",", "\n", "self_collisions", "=", "SELF_COLLISIONS", ",", "\n", "disabled_collisions", "=", "world", ".", "disabled_collisions", ",", "\n", "custom_limits", "=", "world", ".", "custom_limits", ",", "resolutions", "=", "resolutions", "/", "4.", ")", "\n", "if", "grasp_path", "is", "None", ":", "\n", "        ", "if", "PRINT_FAILURES", ":", "print", "(", "'Pregrasp path failure'", ")", "\n", "return", "None", "\n", "", "if", "not", "approach_path", ":", "\n", "        ", "return", "grasp_path", "\n", "# TODO: plan one with attachment placed and one held", "\n", "# TODO: can still use this as a witness that the conf is reachable", "\n", "", "aq", ".", "assign", "(", ")", "\n", "approach_path", "=", "plan_joint_motion", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ",", "approach_conf", ",", "\n", "attachments", "=", "attachments", ",", "\n", "obstacles", "=", "obstacles", ",", "\n", "self_collisions", "=", "SELF_COLLISIONS", ",", "\n", "disabled_collisions", "=", "world", ".", "disabled_collisions", ",", "\n", "custom_limits", "=", "world", ".", "custom_limits", ",", "resolutions", "=", "resolutions", ",", "\n", "restarts", "=", "2", ",", "iterations", "=", "25", ",", "smooth", "=", "25", ")", "\n", "if", "approach_path", "is", "None", ":", "\n", "        ", "if", "PRINT_FAILURES", ":", "print", "(", "'Approach path failure'", ")", "\n", "return", "None", "\n", "", "return", "approach_path", "+", "grasp_path", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.plan_workspace": [[582, 613], ["pybullet_tools.utils.get_moving_links", "pybullet_tools.utils.get_distance_fn", "enumerate", "frozenset", "pybullet_tools.utils.get_sample_fn", "pybullet_tools.utils.set_joint_positions", "world.carry_conf.assign", "world.solve_inverse_kinematics", "any", "pybullet_tools.utils.get_joint_positions", "arm_path.append", "pybullet_tools.utils.get_sample_fn.", "pybullet_tools.utils.get_distance_fn.", "print", "pybullet_tools.utils.pairwise_collision", "print", "print"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.solve_inverse_kinematics"], ["", "def", "plan_workspace", "(", "world", ",", "tool_path", ",", "obstacles", ",", "randomize", "=", "True", ",", "teleport", "=", "False", ")", ":", "\n", "# Assuming that pairs of fixed things aren't in collision at this point", "\n", "    ", "moving_links", "=", "get_moving_links", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ")", "\n", "robot_obstacle", "=", "(", "world", ".", "robot", ",", "frozenset", "(", "moving_links", ")", ")", "\n", "distance_fn", "=", "get_distance_fn", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ")", "\n", "if", "randomize", ":", "\n", "        ", "sample_fn", "=", "get_sample_fn", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ")", "\n", "set_joint_positions", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ",", "sample_fn", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "world", ".", "carry_conf", ".", "assign", "(", ")", "\n", "", "arm_path", "=", "[", "]", "\n", "for", "i", ",", "tool_pose", "in", "enumerate", "(", "tool_path", ")", ":", "\n", "#set_joint_positions(world.kitchen, [door_joint], door_path[i])", "\n", "        ", "tolerance", "=", "INF", "if", "i", "==", "0", "else", "NEARBY_PULL", "\n", "full_arm_conf", "=", "world", ".", "solve_inverse_kinematics", "(", "tool_pose", ",", "nearby_tolerance", "=", "tolerance", ")", "\n", "if", "full_arm_conf", "is", "None", ":", "\n", "# TODO: this fails when teleport=True", "\n", "            ", "if", "PRINT_FAILURES", ":", "print", "(", "'Workspace kinematic failure'", ")", "\n", "return", "None", "\n", "", "if", "any", "(", "pairwise_collision", "(", "robot_obstacle", ",", "b", ")", "for", "b", "in", "obstacles", ")", ":", "\n", "            ", "if", "PRINT_FAILURES", ":", "print", "(", "'Workspace collision failure'", ")", "\n", "return", "None", "\n", "", "arm_conf", "=", "get_joint_positions", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ")", "\n", "if", "arm_path", "and", "not", "teleport", ":", "\n", "            ", "distance", "=", "distance_fn", "(", "arm_path", "[", "-", "1", "]", ",", "arm_conf", ")", "\n", "if", "MAX_CONF_DISTANCE", "<", "distance", ":", "\n", "                ", "if", "PRINT_FAILURES", ":", "print", "(", "'Workspace proximity failure (distance={:.5f})'", ".", "format", "(", "distance", ")", ")", "\n", "return", "None", "\n", "", "", "arm_path", ".", "append", "(", "arm_conf", ")", "\n", "# wait_for_user()", "\n", "", "return", "arm_path", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_handle_grasps": [[619, 641], ["pybullet_tools.utils.get_link_subtree", "pybullet_tools.utils.get_unit_vector", "pybullet_tools.utils.get_link_name", "pybullet_tools.utils.multiply", "grasps.append", "pybullet_tools.utils.Point", "pybullet_tools.utils.quat_from_euler", "HandleGrasp", "pybullet_tools.utils.Euler", "pybullet_tools.utils.unit_quat"], "function", ["None"], ["def", "get_handle_grasps", "(", "world", ",", "joint", ",", "pull", "=", "True", ",", "pre_distance", "=", "APPROACH_DISTANCE", ")", ":", "\n", "    ", "pre_direction", "=", "pre_distance", "*", "get_unit_vector", "(", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "#half_extent = 1.0*FINGER_EXTENT[2] # Collides", "\n", "half_extent", "=", "1.05", "*", "FINGER_EXTENT", "[", "2", "]", "\n", "\n", "grasps", "=", "[", "]", "\n", "for", "link", "in", "get_link_subtree", "(", "world", ".", "kitchen", ",", "joint", ")", ":", "\n", "        ", "if", "'handle'", "in", "get_link_name", "(", "world", ".", "kitchen", ",", "link", ")", ":", "\n", "# TODO: can adjust the position and orientation on the handle", "\n", "            ", "for", "yaw", "in", "[", "0", ",", "np", ".", "pi", "]", ":", "# yaw=0 DOESN'T WORK WITH LULA", "\n", "                ", "handle_grasp", "=", "(", "Point", "(", "z", "=", "-", "half_extent", ")", ",", "quat_from_euler", "(", "Euler", "(", "roll", "=", "np", ".", "pi", ",", "pitch", "=", "np", ".", "pi", "/", "2", ",", "yaw", "=", "yaw", ")", ")", ")", "\n", "#if not pull:", "\n", "#    handle_pose = get_link_pose(world.kitchen, link)", "\n", "#    for distance in np.arange(0., 0.05, step=0.001):", "\n", "#        pregrasp = multiply(([0, 0, -distance], unit_quat()), handle_grasp)", "\n", "#        tool_pose = multiply(handle_pose, invert(pregrasp))", "\n", "#        set_tool_pose(world, tool_pose)", "\n", "#        # TODO: check collisions", "\n", "#        wait_for_user()", "\n", "handle_pregrasp", "=", "multiply", "(", "(", "pre_direction", ",", "unit_quat", "(", ")", ")", ",", "handle_grasp", ")", "\n", "grasps", ".", "append", "(", "HandleGrasp", "(", "link", ",", "handle_grasp", ",", "handle_pregrasp", ")", ")", "\n", "", "", "", "return", "grasps", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.compute_door_paths": [[642, 687], ["set", "pybullet_tools.utils.joint_from_name", "pybullet_tools.utils.get_extend_fn", "world.get_door_sign", "stream.get_handle_grasps", "list", "pybullet_tools.utils.set_configuration", "enumerate", "pybullet_tools.utils.get_extend_fn.", "pybullet_tools.utils.set_joint_positions", "handle_path.append", "pybullet_tools.utils.multiply", "pybullet_tools.utils.set_joint_positions", "src.utils.set_tool_pose", "any", "door_paths.append", "pybullet_tools.utils.get_link_pose", "pybullet_tools.utils.invert", "DoorPath", "pybullet_tools.utils.pairwise_collision"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_door_sign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_handle_grasps", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.set_tool_pose"], ["", "def", "compute_door_paths", "(", "world", ",", "joint_name", ",", "door_conf1", ",", "door_conf2", ",", "obstacles", "=", "set", "(", ")", ",", "teleport", "=", "False", ")", ":", "\n", "    ", "door_paths", "=", "[", "]", "\n", "if", "door_conf1", "==", "door_conf2", ":", "\n", "        ", "return", "door_paths", "\n", "", "door_joint", "=", "joint_from_name", "(", "world", ".", "kitchen", ",", "joint_name", ")", "\n", "door_joints", "=", "[", "door_joint", "]", "\n", "# TODO: could unify with grasp path", "\n", "door_extend_fn", "=", "get_extend_fn", "(", "world", ".", "kitchen", ",", "door_joints", ",", "resolutions", "=", "[", "DOOR_RESOLUTION", "]", ")", "\n", "door_path", "=", "[", "door_conf1", ".", "values", "]", "+", "list", "(", "door_extend_fn", "(", "door_conf1", ".", "values", ",", "door_conf2", ".", "values", ")", ")", "\n", "if", "teleport", ":", "\n", "        ", "door_path", "=", "[", "door_conf1", ".", "values", ",", "door_conf2", ".", "values", "]", "\n", "# TODO: open until collision for the drawers", "\n", "\n", "", "sign", "=", "world", ".", "get_door_sign", "(", "door_joint", ")", "\n", "pull", "=", "(", "sign", "*", "door_path", "[", "0", "]", "[", "0", "]", "<", "sign", "*", "door_path", "[", "-", "1", "]", "[", "0", "]", ")", "\n", "# door_obstacles = get_descendant_obstacles(world.kitchen, door_joint)", "\n", "for", "handle_grasp", "in", "get_handle_grasps", "(", "world", ",", "door_joint", ",", "pull", "=", "pull", ")", ":", "\n", "        ", "link", ",", "grasp", ",", "pregrasp", "=", "handle_grasp", "\n", "handle_path", "=", "[", "]", "\n", "for", "door_conf", "in", "door_path", ":", "\n", "            ", "set_joint_positions", "(", "world", ".", "kitchen", ",", "door_joints", ",", "door_conf", ")", "\n", "# if any(pairwise_collision(door_obst, obst)", "\n", "#       for door_obst, obst in product(door_obstacles, obstacles)):", "\n", "#    return", "\n", "handle_path", ".", "append", "(", "get_link_pose", "(", "world", ".", "kitchen", ",", "link", ")", ")", "\n", "# Collide due to adjacency", "\n", "\n", "# TODO: check pregrasp path as well", "\n", "# TODO: check gripper self-collisions with the robot", "\n", "", "set_configuration", "(", "world", ".", "gripper", ",", "world", ".", "open_gq", ".", "values", ")", "\n", "tool_path", "=", "[", "multiply", "(", "handle_pose", ",", "invert", "(", "grasp", ")", ")", "\n", "for", "handle_pose", "in", "handle_path", "]", "\n", "for", "i", ",", "tool_pose", "in", "enumerate", "(", "tool_path", ")", ":", "\n", "            ", "set_joint_positions", "(", "world", ".", "kitchen", ",", "door_joints", ",", "door_path", "[", "i", "]", ")", "\n", "set_tool_pose", "(", "world", ",", "tool_pose", ")", "\n", "# handles = draw_pose(handle_path[i], length=0.25)", "\n", "# handles.extend(draw_aabb(get_aabb(world.kitchen, link=link)))", "\n", "# wait_for_user()", "\n", "# for handle in handles:", "\n", "#    remove_debug(handle)", "\n", "if", "any", "(", "pairwise_collision", "(", "world", ".", "gripper", ",", "obst", ")", "for", "obst", "in", "obstacles", ")", ":", "\n", "                ", "break", "\n", "", "", "else", ":", "\n", "            ", "door_paths", ".", "append", "(", "DoorPath", "(", "door_path", ",", "handle_path", ",", "handle_grasp", ",", "tool_path", ")", ")", "\n", "", "", "return", "door_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_calibrate_gen": [[690, 705], ["bq.assign", "pybullet_tools.utils.BodySaver", "src.command.Sequence", "src.command.State"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign"], ["", "def", "get_calibrate_gen", "(", "world", ",", "collisions", "=", "True", ",", "teleport", "=", "False", ")", ":", "\n", "\n", "    ", "def", "fn", "(", "bq", ",", "*", "args", ")", ":", "#, aq):", "\n", "# TODO: include if holding anything?", "\n", "        ", "bq", ".", "assign", "(", ")", "\n", "aq", "=", "world", ".", "carry_conf", "\n", "#aq.assign() # TODO: could sample aq instead achieve it by move actions", "\n", "#world.open_gripper()", "\n", "robot_saver", "=", "BodySaver", "(", "world", ".", "robot", ")", "\n", "cmd", "=", "Sequence", "(", "State", "(", "world", ",", "savers", "=", "[", "robot_saver", "]", ")", ",", "commands", "=", "[", "\n", "#Trajectory(world, world.robot, world.arm_joints, approach_path),", "\n", "# TODO: calibrate command", "\n", "]", ",", "name", "=", "'calibrate'", ")", "\n", "return", "(", "cmd", ",", ")", "\n", "", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_gripper_open_test": [[713, 722], ["numpy.less_equal().all", "numpy.array", "numpy.array", "numpy.less_equal"], "function", ["None"], ["def", "get_gripper_open_test", "(", "world", ",", "error_percent", "=", "0.1", ")", ":", "#, tolerance=1e-2", "\n", "    ", "open_gq", "=", "error_percent", "*", "np", ".", "array", "(", "world", ".", "closed_gq", ".", "values", ")", "+", "(", "1", "-", "error_percent", ")", "*", "np", ".", "array", "(", "world", ".", "open_gq", ".", "values", ")", "\n", "#open_gq = world.open_gq.values - tolerance * np.ones(len(world.gripper_joints))", "\n", "def", "test", "(", "gq", ")", ":", "\n", "#if gq == world.open_gq:", "\n", "#    print('Initial grasp:', gq)", "\n", "        ", "return", "np", ".", "less_equal", "(", "open_gq", ",", "gq", ".", "values", ")", ".", "all", "(", ")", "\n", "", "return", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_door_test": [[723, 743], ["world.get_door_sign", "NotImplementedError", "world.closed_conf", "world.open_conf", "world.closed_conf", "world.open_conf"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_door_sign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.closed_conf", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.open_conf", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.closed_conf", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.open_conf"], ["", "def", "get_door_test", "(", "world", ",", "error_percent", "=", "0.35", ")", ":", "#, tolerance=1e-2):", "\n", "# TODO: separate error for open/closed", "\n", "    ", "def", "test", "(", "joint_name", ",", "conf", ",", "status", ")", ":", "\n", "        ", "[", "joint", "]", "=", "conf", ".", "joints", "\n", "sign", "=", "world", ".", "get_door_sign", "(", "joint", ")", "\n", "#print(joint_name, world.closed_conf(joint), conf.values[0],", "\n", "#      world.open_conf(joint), status)", "\n", "position", "=", "sign", "*", "conf", ".", "values", "[", "0", "]", "\n", "if", "status", "==", "OPEN", ":", "\n", "            ", "open_position", "=", "sign", "*", "(", "error_percent", "*", "world", ".", "closed_conf", "(", "joint", ")", "+", "\n", "(", "1", "-", "error_percent", ")", "*", "world", ".", "open_conf", "(", "joint", ")", ")", "\n", "#open_position = sign * world.open_conf(joint) - tolerance", "\n", "return", "open_position", "<=", "position", "\n", "", "elif", "status", "==", "CLOSED", ":", "\n", "            ", "closed_position", "=", "sign", "*", "(", "(", "1", "-", "error_percent", ")", "*", "world", ".", "closed_conf", "(", "joint", ")", "+", "\n", "error_percent", "*", "world", ".", "open_conf", "(", "joint", ")", ")", "\n", "#closed_position = sign * world.closed_conf(joint) + tolerance", "\n", "return", "position", "<=", "closed_position", "\n", "", "raise", "NotImplementedError", "(", "status", ")", "\n", "", "return", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_cfree_relpose_relpose_test": [[746, 756], ["rp1.assign", "rp2.assign", "isinstance", "isinstance", "pybullet_tools.utils.pairwise_collision", "world.get_body", "world.get_body"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body"], ["", "def", "get_cfree_relpose_relpose_test", "(", "world", ",", "collisions", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "test", "(", "o1", ",", "rp1", ",", "o2", ",", "rp2", ",", "s", ")", ":", "\n", "        ", "if", "not", "collisions", "or", "(", "o1", "==", "o2", ")", ":", "\n", "            ", "return", "True", "\n", "", "if", "isinstance", "(", "rp1", ",", "SurfaceDist", ")", "or", "isinstance", "(", "rp2", ",", "SurfaceDist", ")", ":", "\n", "            ", "return", "True", "# TODO: perform this probabilistically", "\n", "", "rp1", ".", "assign", "(", ")", "\n", "rp2", ".", "assign", "(", ")", "\n", "return", "not", "pairwise_collision", "(", "world", ".", "get_body", "(", "o1", ")", ",", "world", ".", "get_body", "(", "o2", ")", ")", "\n", "", "return", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_cfree_worldpose_test": [[757, 770], ["isinstance", "world.get_body", "wp1.assign", "any", "pybullet_tools.utils.pairwise_collision"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign"], ["", "def", "get_cfree_worldpose_test", "(", "world", ",", "collisions", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "test", "(", "o1", ",", "wp1", ")", ":", "\n", "        ", "if", "isinstance", "(", "wp1", ",", "SurfaceDist", ")", ":", "\n", "            ", "return", "True", "\n", "", "if", "not", "collisions", "or", "(", "wp1", ".", "support", "not", "in", "DRAWERS", ")", ":", "\n", "            ", "return", "True", "\n", "", "body", "=", "world", ".", "get_body", "(", "o1", ")", "\n", "wp1", ".", "assign", "(", ")", "\n", "obstacles", "=", "world", ".", "static_obstacles", "\n", "if", "any", "(", "pairwise_collision", "(", "body", ",", "obst", ")", "for", "obst", "in", "obstacles", ")", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "", "return", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_cfree_worldpose_worldpose_test": [[771, 784], ["world.get_body", "wp1.assign", "wp2.assign", "any", "isinstance", "isinstance", "pybullet_tools.utils.pairwise_collision", "src.utils.get_surface_obstacles"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_surface_obstacles"], ["", "def", "get_cfree_worldpose_worldpose_test", "(", "world", ",", "collisions", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "test", "(", "o1", ",", "wp1", ",", "o2", ",", "wp2", ")", ":", "\n", "        ", "if", "isinstance", "(", "wp1", ",", "SurfaceDist", ")", "or", "isinstance", "(", "wp2", ",", "SurfaceDist", ")", ":", "\n", "            ", "return", "True", "\n", "", "if", "not", "collisions", "or", "(", "o1", "==", "o2", ")", "or", "(", "o2", "==", "wp1", ".", "support", ")", ":", "# DRAWERS", "\n", "            ", "return", "True", "\n", "", "body", "=", "world", ".", "get_body", "(", "o1", ")", "\n", "wp1", ".", "assign", "(", ")", "\n", "wp2", ".", "assign", "(", ")", "\n", "if", "any", "(", "pairwise_collision", "(", "body", ",", "obst", ")", "for", "obst", "in", "get_surface_obstacles", "(", "world", ",", "o2", ")", ")", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "", "return", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_cfree_bconf_pose_test": [[785, 797], ["isinstance", "bq.assign", "world.carry_conf.assign", "wp2.assign", "src.utils.get_link_obstacles", "any", "pybullet_tools.utils.pairwise_collision"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_link_obstacles"], ["", "def", "get_cfree_bconf_pose_test", "(", "world", ",", "collisions", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "test", "(", "bq", ",", "o2", ",", "wp2", ")", ":", "\n", "        ", "if", "not", "collisions", ":", "\n", "            ", "return", "True", "\n", "", "if", "isinstance", "(", "wp2", ",", "SurfaceDist", ")", ":", "\n", "            ", "return", "True", "# TODO: perform this probabilistically", "\n", "", "bq", ".", "assign", "(", ")", "\n", "world", ".", "carry_conf", ".", "assign", "(", ")", "\n", "wp2", ".", "assign", "(", ")", "\n", "obstacles", "=", "get_link_obstacles", "(", "world", ",", "o2", ")", "\n", "return", "not", "any", "(", "pairwise_collision", "(", "world", ".", "robot", ",", "obst", ")", "for", "obst", "in", "obstacles", ")", "\n", "", "return", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_cfree_approach_pose_test": [[798, 820], ["isinstance", "world.get_body", "wp2.assign", "src.utils.get_link_obstacles", "src.utils.iterate_approach_path", "any", "pybullet_tools.utils.pairwise_collision"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_link_obstacles", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.iterate_approach_path"], ["", "def", "get_cfree_approach_pose_test", "(", "world", ",", "collisions", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "test", "(", "o1", ",", "wp1", ",", "g1", ",", "o2", ",", "wp2", ")", ":", "\n", "# o1 will always be a movable object", "\n", "        ", "if", "isinstance", "(", "wp2", ",", "SurfaceDist", ")", ":", "\n", "            ", "return", "True", "# TODO: perform this probabilistically", "\n", "", "if", "not", "collisions", "or", "(", "o1", "==", "o2", ")", "or", "(", "o2", "==", "wp1", ".", "support", ")", ":", "\n", "            ", "return", "True", "\n", "# TODO: could define these on sets of samples to prune all at once", "\n", "", "body", "=", "world", ".", "get_body", "(", "o1", ")", "\n", "wp2", ".", "assign", "(", ")", "\n", "obstacles", "=", "get_link_obstacles", "(", "world", ",", "o2", ")", "# - {body}", "\n", "if", "not", "obstacles", ":", "\n", "            ", "return", "True", "\n", "", "for", "_", "in", "iterate_approach_path", "(", "world", ",", "wp1", ",", "g1", ",", "body", "=", "body", ")", ":", "\n", "            ", "if", "any", "(", "pairwise_collision", "(", "part", ",", "obst", ")", "for", "part", "in", "\n", "[", "world", ".", "gripper", ",", "body", "]", "for", "obst", "in", "obstacles", ")", ":", "\n", "# TODO: some collisions the bottom drawer and the top drawer handle", "\n", "#print(o1, wp1.support, o2, wp2.support)", "\n", "#wait_for_user()", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "", "return", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_cfree_angle_angle_test": [[821, 839], ["wp.assign", "pybullet_tools.utils.set_configuration", "stream.compute_door_paths", "src.utils.get_link_obstacles"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.compute_door_paths", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_link_obstacles"], ["", "def", "get_cfree_angle_angle_test", "(", "world", ",", "collisions", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "test", "(", "j1", ",", "a1", ",", "a2", ",", "o2", ",", "wp", ")", ":", "\n", "        ", "if", "not", "collisions", "or", "(", "o2", "in", "j1", ")", ":", "# (j1 == JOINT_TEMPLATE.format(o2)):", "\n", "            ", "return", "True", "\n", "# TODO: check pregrasp path as well", "\n", "# TODO: pull path collisions", "\n", "", "wp", ".", "assign", "(", ")", "\n", "set_configuration", "(", "world", ".", "gripper", ",", "world", ".", "open_gq", ".", "values", ")", "\n", "status", "=", "compute_door_paths", "(", "world", ",", "j1", ",", "a1", ",", "a2", ",", "obstacles", "=", "get_link_obstacles", "(", "world", ",", "o2", ")", ")", "\n", "#print(j1, a1, a2, o2, wp)", "\n", "#if not status:", "\n", "#    set_renderer(enable=True)", "\n", "#    for a in [a1, a2]:", "\n", "#        a.assign()", "\n", "#        wait_for_user()", "\n", "#    set_renderer(enable=False)", "\n", "return", "status", "\n", "", "return", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.get_cfree_traj_pose_test": [[842, 877], ["isinstance", "wp.assign", "at.context.copy", "at.context.copy.assign", "isinstance", "command.iterate", "src.utils.get_link_obstacles", "pybullet_tools.utils.get_link_name", "at.context.copy.derive", "any", "pybullet_tools.utils.child_link_from_joint", "pybullet_tools.utils.pairwise_collision"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.State.copy", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Wait.iterate", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_link_obstacles", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.State.derive"], ["", "def", "get_cfree_traj_pose_test", "(", "world", ",", "collisions", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "test", "(", "at", ",", "o", ",", "wp", ")", ":", "\n", "        ", "if", "not", "collisions", ":", "\n", "            ", "return", "True", "\n", "# TODO: check door collisions", "\n", "# TODO: still need to check static links at least once", "\n", "", "if", "isinstance", "(", "wp", ",", "SurfaceDist", ")", ":", "\n", "            ", "return", "True", "# TODO: perform this probabilistically", "\n", "", "wp", ".", "assign", "(", ")", "\n", "state", "=", "at", ".", "context", ".", "copy", "(", ")", "\n", "state", ".", "assign", "(", ")", "\n", "all_bodies", "=", "{", "body", "for", "command", "in", "at", ".", "commands", "for", "body", "in", "command", ".", "bodies", "}", "\n", "for", "command", "in", "at", ".", "commands", ":", "\n", "            ", "obstacles", "=", "get_link_obstacles", "(", "world", ",", "o", ")", "-", "all_bodies", "\n", "# TODO: why did I previously remove o at p?", "\n", "#obstacles = get_link_obstacles(world, o) - command.bodies  # - p.bodies # Doesn't include o at p", "\n", "if", "not", "obstacles", ":", "\n", "                ", "continue", "\n", "", "if", "isinstance", "(", "command", ",", "DoorTrajectory", ")", ":", "\n", "                ", "[", "door_joint", "]", "=", "command", ".", "door_joints", "\n", "surface_name", "=", "get_link_name", "(", "world", ".", "kitchen", ",", "child_link_from_joint", "(", "door_joint", ")", ")", "\n", "if", "wp", ".", "support", "==", "surface_name", ":", "\n", "                    ", "return", "True", "\n", "", "", "for", "_", "in", "command", ".", "iterate", "(", "state", ")", ":", "\n", "                ", "state", ".", "derive", "(", ")", "\n", "#for attachment in state.attachments.values():", "\n", "#    if any(pairwise_collision(attachment.child, obst) for obst in obstacles):", "\n", "#        return False", "\n", "# TODO: just check collisions with moving links", "\n", "if", "any", "(", "pairwise_collision", "(", "world", ".", "robot", ",", "obst", ")", "for", "obst", "in", "obstacles", ")", ":", "\n", "#print(at, o, p)", "\n", "#wait_for_user()", "\n", "                    ", "return", "False", "\n", "", "", "", "return", "True", "\n", "", "return", "test", "\n", "", ""]], "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pick.is_approach_safe": [[12, 28], ["world.get_body", "pose.assign", "pybullet_tools.utils.set_joint_positions", "src.utils.iterate_approach_path", "pybullet_tools.utils.get_movable_joints", "any", "print", "pybullet_tools.utils.pairwise_collision"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.iterate_approach_path"], ["def", "is_approach_safe", "(", "world", ",", "obj_name", ",", "pose", ",", "grasp", ",", "obstacles", ")", ":", "\n", "    ", "assert", "pose", ".", "support", "is", "not", "None", "\n", "obj_body", "=", "world", ".", "get_body", "(", "obj_name", ")", "\n", "pose", ".", "assign", "(", ")", "# May set the drawer confs as well", "\n", "set_joint_positions", "(", "world", ".", "gripper", ",", "get_movable_joints", "(", "world", ".", "gripper", ")", ",", "world", ".", "open_gq", ".", "values", ")", "\n", "#set_renderer(enable=True)", "\n", "for", "_", "in", "iterate_approach_path", "(", "world", ",", "pose", ",", "grasp", ",", "body", "=", "obj_body", ")", ":", "\n", "#for link in get_all_links(world.gripper):", "\n", "#    set_color(world.gripper, apply_alpha(np.zeros(3)), link)", "\n", "#wait_for_user()", "\n", "        ", "if", "any", "(", "pairwise_collision", "(", "world", ".", "gripper", ",", "obst", ")", "# or pairwise_collision(obj_body, obst)", "\n", "for", "obst", "in", "obstacles", ")", ":", "\n", "            ", "print", "(", "'Unsafe approach!'", ")", "\n", "#wait_for_user()", "\n", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pick.plan_pick": [[29, 85], ["world.get_body", "pose.assign", "base_conf.assign", "world.open_gripper", "pybullet_tools.utils.BodySaver", "pybullet_tools.utils.BodySaver", "pose.get_world_from_body", "pybullet_tools.utils.multiply", "world.solve_inverse_kinematics", "pybullet_tools.utils.get_moving_links", "any", "pybullet_tools.utils.multiply", "src.stream.plan_approach", "src.streams.move.get_gripper_motion_gen", "src.streams.move.get_gripper_motion_gen.", "src.utils.create_surface_attachment", "src.command.Sequence", "pybullet_tools.utils.get_sample_fn", "pybullet_tools.utils.set_joint_positions", "world.carry_conf.assign", "pybullet_tools.utils.invert", "frozenset", "pybullet_tools.utils.invert", "src.utils.FConf", "grasp.get_gripper_conf", "src.command.State", "pybullet_tools.utils.get_sample_fn.", "print", "pybullet_tools.utils.pairwise_collision", "print", "print", "src.command.ApproachTrajectory", "src.command.Detach", "src.command.AttachGripper", "src.command.ApproachTrajectory", "reversed"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.open_gripper", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.get_world_from_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.solve_inverse_kinematics", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.plan_approach", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.move.get_gripper_motion_gen", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.create_surface_attachment", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.get_gripper_conf"], ["", "def", "plan_pick", "(", "world", ",", "obj_name", ",", "pose", ",", "grasp", ",", "base_conf", ",", "obstacles", ",", "randomize", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "# TODO: check if within database convex hull", "\n", "# TODO: flag to check if initially in collision", "\n", "\n", "    ", "obj_body", "=", "world", ".", "get_body", "(", "obj_name", ")", "\n", "pose", ".", "assign", "(", ")", "\n", "base_conf", ".", "assign", "(", ")", "\n", "world", ".", "open_gripper", "(", ")", "\n", "robot_saver", "=", "BodySaver", "(", "world", ".", "robot", ")", "\n", "obj_saver", "=", "BodySaver", "(", "obj_body", ")", "\n", "\n", "if", "randomize", ":", "\n", "        ", "sample_fn", "=", "get_sample_fn", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ")", "\n", "set_joint_positions", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ",", "sample_fn", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "world", ".", "carry_conf", ".", "assign", "(", ")", "\n", "", "world_from_body", "=", "pose", ".", "get_world_from_body", "(", ")", "\n", "gripper_pose", "=", "multiply", "(", "world_from_body", ",", "invert", "(", "grasp", ".", "grasp_pose", ")", ")", "# w_f_g = w_f_o * (g_f_o)^-1", "\n", "full_grasp_conf", "=", "world", ".", "solve_inverse_kinematics", "(", "gripper_pose", ")", "\n", "if", "full_grasp_conf", "is", "None", ":", "\n", "        ", "if", "PRINT_FAILURES", ":", "print", "(", "'Grasp kinematic failure'", ")", "\n", "return", "\n", "", "moving_links", "=", "get_moving_links", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ")", "\n", "robot_obstacle", "=", "(", "world", ".", "robot", ",", "frozenset", "(", "moving_links", ")", ")", "\n", "#robot_obstacle = get_descendant_obstacles(world.robot, child_link_from_joint(world.arm_joints[0]))", "\n", "#robot_obstacle = world.robot", "\n", "if", "any", "(", "pairwise_collision", "(", "robot_obstacle", ",", "b", ")", "for", "b", "in", "obstacles", ")", ":", "\n", "        ", "if", "PRINT_FAILURES", ":", "print", "(", "'Grasp collision failure'", ")", "\n", "#set_renderer(enable=True)", "\n", "#wait_for_user()", "\n", "#set_renderer(enable=False)", "\n", "return", "\n", "", "approach_pose", "=", "multiply", "(", "world_from_body", ",", "invert", "(", "grasp", ".", "pregrasp_pose", ")", ")", "\n", "approach_path", "=", "plan_approach", "(", "world", ",", "approach_pose", ",", "# attachments=[grasp.get_attachment()],", "\n", "obstacles", "=", "obstacles", ",", "**", "kwargs", ")", "\n", "if", "approach_path", "is", "None", ":", "\n", "        ", "if", "PRINT_FAILURES", ":", "print", "(", "'Approach plan failure'", ")", "\n", "return", "\n", "", "if", "MOVE_ARM", ":", "\n", "        ", "aq", "=", "FConf", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ",", "approach_path", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "aq", "=", "world", ".", "carry_conf", "\n", "\n", "", "gripper_motion_fn", "=", "get_gripper_motion_gen", "(", "world", ",", "**", "kwargs", ")", "\n", "finger_cmd", ",", "=", "gripper_motion_fn", "(", "world", ".", "open_gq", ",", "grasp", ".", "get_gripper_conf", "(", ")", ")", "\n", "attachment", "=", "create_surface_attachment", "(", "world", ",", "obj_name", ",", "pose", ".", "support", ")", "\n", "objects", "=", "[", "obj_name", "]", "\n", "cmd", "=", "Sequence", "(", "State", "(", "world", ",", "savers", "=", "[", "robot_saver", ",", "obj_saver", "]", ",", "\n", "attachments", "=", "[", "attachment", "]", ")", ",", "commands", "=", "[", "\n", "ApproachTrajectory", "(", "objects", ",", "world", ",", "world", ".", "robot", ",", "world", ".", "arm_joints", ",", "approach_path", ")", ",", "\n", "finger_cmd", ".", "commands", "[", "0", "]", ",", "\n", "Detach", "(", "world", ",", "attachment", ".", "parent", ",", "attachment", ".", "parent_link", ",", "attachment", ".", "child", ")", ",", "\n", "AttachGripper", "(", "world", ",", "obj_body", ",", "grasp", "=", "grasp", ")", ",", "\n", "ApproachTrajectory", "(", "objects", ",", "world", ",", "world", ".", "robot", ",", "world", ".", "arm_joints", ",", "reversed", "(", "approach_path", ")", ")", ",", "\n", "]", ",", "name", "=", "'pick'", ")", "\n", "yield", "(", "aq", ",", "cmd", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pick.get_fixed_pick_gen_fn": [[88, 116], ["src.utils.get_surface_obstacles", "pick.is_approach_safe", "range", "next", "random.random", "pick.plan_pick", "print", "print"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_surface_obstacles", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pick.is_approach_safe", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pick.plan_pick"], ["", "def", "get_fixed_pick_gen_fn", "(", "world", ",", "max_attempts", "=", "25", ",", "collisions", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "def", "gen", "(", "obj_name", ",", "pose", ",", "grasp", ",", "base_conf", ")", ":", "\n", "        ", "obstacles", "=", "world", ".", "static_obstacles", "|", "get_surface_obstacles", "(", "world", ",", "pose", ".", "support", ")", "# | {obj_body}", "\n", "#if not collisions:", "\n", "#    obstacles = set()", "\n", "if", "not", "is_approach_safe", "(", "world", ",", "obj_name", ",", "pose", ",", "grasp", ",", "obstacles", ")", ":", "\n", "            ", "return", "\n", "# TODO: increase timeouts if a previously successful value", "\n", "# TODO: seed IK using the previous solution", "\n", "", "max_failures", "=", "FIXED_FAILURES", "if", "world", ".", "task", ".", "movable_base", "else", "INF", "\n", "failures", "=", "0", "\n", "while", "failures", "<=", "max_failures", ":", "\n", "            ", "for", "i", "in", "range", "(", "max_attempts", ")", ":", "\n", "                ", "randomize", "=", "(", "random", ".", "random", "(", ")", "<", "P_RANDOMIZE_IK", ")", "\n", "ik_outputs", "=", "next", "(", "plan_pick", "(", "world", ",", "obj_name", ",", "pose", ",", "grasp", ",", "base_conf", ",", "obstacles", ",", "\n", "randomize", "=", "randomize", ",", "**", "kwargs", ")", ",", "None", ")", "\n", "if", "ik_outputs", "is", "not", "None", ":", "\n", "                    ", "print", "(", "'Fixed pick succeeded after {} attempts'", ".", "format", "(", "i", ")", ")", "\n", "yield", "ik_outputs", "\n", "break", "# return", "\n", "", "", "else", ":", "\n", "                ", "if", "PRINT_FAILURES", ":", "print", "(", "'Fixed pick failure after {} attempts'", ".", "format", "(", "max_attempts", ")", ")", "\n", "#if not pose.init:", "\n", "#    break", "\n", "yield", "None", "\n", "failures", "+=", "1", "\n", "", "", "", "return", "gen", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pick.get_pick_gen_fn": [[118, 157], ["pybullet_tools.utils.multiply", "src.stream.inverse_reachability", "src.utils.get_surface_obstacles", "pick.is_approach_safe", "pose.get_world_from_body", "pybullet_tools.utils.invert", "itertools.cycle", "pybullet_tools.utils.uniform_pose_generator", "range", "src.database.load_place_base_poses", "next", "next", "random.random", "pick.plan_pick", "print", "print"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.inverse_reachability", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_surface_obstacles", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pick.is_approach_safe", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.get_world_from_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_place_base_poses", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pick.plan_pick"], ["", "def", "get_pick_gen_fn", "(", "world", ",", "max_attempts", "=", "25", ",", "collisions", "=", "True", ",", "learned", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "# TODO: sample in the neighborhood of the base conf to ensure robust", "\n", "\n", "    ", "def", "gen", "(", "obj_name", ",", "pose", ",", "grasp", ",", "*", "args", ")", ":", "\n", "        ", "obstacles", "=", "world", ".", "static_obstacles", "|", "get_surface_obstacles", "(", "world", ",", "pose", ".", "support", ")", "\n", "#if not collisions:", "\n", "#    obstacles = set()", "\n", "if", "not", "is_approach_safe", "(", "world", ",", "obj_name", ",", "pose", ",", "grasp", ",", "obstacles", ")", ":", "\n", "            ", "return", "\n", "\n", "# TODO: check collisions with obj at pose", "\n", "", "gripper_pose", "=", "multiply", "(", "pose", ".", "get_world_from_body", "(", ")", ",", "invert", "(", "grasp", ".", "grasp_pose", ")", ")", "# w_f_g = w_f_o * (g_f_o)^-1", "\n", "if", "learned", ":", "\n", "            ", "base_generator", "=", "cycle", "(", "load_place_base_poses", "(", "world", ",", "gripper_pose", ",", "pose", ".", "support", ",", "grasp", ".", "grasp_type", ")", ")", "\n", "", "else", ":", "\n", "            ", "base_generator", "=", "uniform_pose_generator", "(", "world", ".", "robot", ",", "gripper_pose", ")", "\n", "", "safe_base_generator", "=", "inverse_reachability", "(", "world", ",", "base_generator", ",", "obstacles", "=", "obstacles", ",", "**", "kwargs", ")", "\n", "while", "True", ":", "\n", "            ", "for", "i", "in", "range", "(", "max_attempts", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "base_conf", "=", "next", "(", "safe_base_generator", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "return", "\n", "", "if", "base_conf", "is", "None", ":", "\n", "                    ", "yield", "None", "\n", "continue", "# TODO: could break if not pose.init", "\n", "", "randomize", "=", "(", "random", ".", "random", "(", ")", "<", "P_RANDOMIZE_IK", ")", "\n", "ik_outputs", "=", "next", "(", "plan_pick", "(", "world", ",", "obj_name", ",", "pose", ",", "grasp", ",", "base_conf", ",", "obstacles", ",", "\n", "randomize", "=", "randomize", ",", "**", "kwargs", ")", ",", "None", ")", "\n", "if", "ik_outputs", "is", "not", "None", ":", "\n", "                    ", "print", "(", "'Pick succeeded after {} attempts'", ".", "format", "(", "i", ")", ")", "\n", "yield", "(", "base_conf", ",", ")", "+", "ik_outputs", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "if", "PRINT_FAILURES", ":", "print", "(", "'Pick failure after {} attempts'", ".", "format", "(", "max_attempts", ")", ")", "\n", "#if not pose.init: # Might be an intended placement blocked by a drawer", "\n", "#    break", "\n", "yield", "None", "\n", "", "", "", "return", "gen", "\n", "", ""]], "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.move.parse_fluents": [[12, 62], ["set", "q.assign", "p.lower", "a.assign", "pybullet_tools.utils.child_link_from_joint", "set.update", "p.lower", "src.utils.get_descendant_obstacles", "RuntimeError", "RuntimeError", "isinstance", "rp.assign", "set.update", "NotImplementedError", "src.utils.get_link_obstacles", "NotImplementedError", "attachments.append", "attachments[].assign", "g.get_attachment"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.update", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_descendant_obstacles", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.update", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_link_obstacles", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.get_attachment"], ["def", "parse_fluents", "(", "world", ",", "fluents", ")", ":", "\n", "    ", "obstacles", "=", "set", "(", ")", "\n", "for", "fluent", "in", "fluents", ":", "\n", "        ", "predicate", ",", "args", "=", "fluent", "[", "0", "]", ",", "fluent", "[", "1", ":", "]", "\n", "if", "predicate", "in", "{", "p", ".", "lower", "(", ")", "for", "p", "in", "[", "'AtBConf'", ",", "'AtAConf'", ",", "'AtGConf'", "]", "}", ":", "\n", "            ", "q", ",", "=", "args", "\n", "q", ".", "assign", "(", ")", "\n", "", "elif", "predicate", "==", "'AtAngle'", ".", "lower", "(", ")", ":", "\n", "            ", "j", ",", "a", "=", "args", "\n", "a", ".", "assign", "(", ")", "\n", "link", "=", "child_link_from_joint", "(", "a", ".", "joints", "[", "0", "]", ")", "\n", "obstacles", ".", "update", "(", "get_descendant_obstacles", "(", "a", ".", "body", ",", "link", ")", ")", "\n", "", "elif", "predicate", "in", "'AtWorldPose'", ".", "lower", "(", ")", ":", "\n", "# TODO: conditional effects are not being correctly updated in pddlstream", "\n", "#b, p = args", "\n", "#if isinstance(p, SurfaceDist):", "\n", "#    continue", "\n", "#p.assign()", "\n", "#obstacles.update(get_link_obstacles(world, b))", "\n", "            ", "raise", "RuntimeError", "(", ")", "\n", "", "elif", "predicate", "in", "'AtRelPose'", ".", "lower", "(", ")", ":", "\n", "            ", "pass", "\n", "", "elif", "predicate", "==", "'AtGrasp'", ".", "lower", "(", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "predicate", ")", "\n", "\n", "", "", "attachments", "=", "[", "]", "\n", "for", "fluent", "in", "fluents", ":", "\n", "        ", "predicate", ",", "args", "=", "fluent", "[", "0", "]", ",", "fluent", "[", "1", ":", "]", "\n", "if", "predicate", "in", "{", "p", ".", "lower", "(", ")", "for", "p", "in", "[", "'AtBConf'", ",", "'AtAConf'", ",", "'AtGConf'", "]", "}", ":", "\n", "            ", "pass", "\n", "", "elif", "predicate", "==", "'AtAngle'", ".", "lower", "(", ")", ":", "\n", "            ", "pass", "\n", "", "elif", "predicate", "in", "'AtWorldPose'", ".", "lower", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", ")", "\n", "", "elif", "predicate", "in", "'AtRelPose'", ".", "lower", "(", ")", ":", "\n", "            ", "o1", ",", "rp", ",", "o2", "=", "args", "\n", "if", "isinstance", "(", "rp", ",", "SurfaceDist", ")", ":", "\n", "                ", "continue", "\n", "", "rp", ".", "assign", "(", ")", "\n", "obstacles", ".", "update", "(", "get_link_obstacles", "(", "world", ",", "o1", ")", ")", "\n", "", "elif", "predicate", "==", "'AtGrasp'", ".", "lower", "(", ")", ":", "\n", "            ", "o", ",", "g", "=", "args", "\n", "if", "o", "is", "not", "None", ":", "\n", "                ", "attachments", ".", "append", "(", "g", ".", "get_attachment", "(", ")", ")", "\n", "attachments", "[", "-", "1", "]", ".", "assign", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "predicate", ")", "\n", "", "", "return", "attachments", ",", "obstacles", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.move.get_base_motion_fn": [[67, 127], ["aq.assign", "move.parse_fluents", "set.update", "hasattr", "hasattr", "bq1.assign", "pybullet_tools.utils.BodySaver", "src.command.Sequence", "set", "bq1.assign", "pybullet_tools.utils.plan_nonholonomic_motion", "bq2.nearby_bq.assign", "pybullet_tools.utils.plan_nonholonomic_motion", "pybullet_tools.utils.plan_nonholonomic_motion", "src.command.State", "print", "print", "print", "pybullet_tools.utils.set_renderer", "print", "pybullet_tools.utils.set_renderer", "src.command.Trajectory", "bq.assign", "pybullet_tools.utils.wait_for_user"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.move.parse_fluents", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.update", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign"], ["", "def", "get_base_motion_fn", "(", "world", ",", "teleport_base", "=", "False", ",", "collisions", "=", "True", ",", "teleport", "=", "False", ",", "\n", "restarts", "=", "4", ",", "iterations", "=", "75", ",", "smooth", "=", "100", ")", ":", "\n", "# TODO: lazy planning on a common base roadmap", "\n", "\n", "    ", "def", "fn", "(", "bq1", ",", "bq2", ",", "aq", ",", "fluents", "=", "[", "]", ")", ":", "\n", "#if bq1 == bq2:", "\n", "#    return None", "\n", "        ", "aq", ".", "assign", "(", ")", "\n", "attachments", ",", "obstacles", "=", "parse_fluents", "(", "world", ",", "fluents", ")", "\n", "obstacles", ".", "update", "(", "world", ".", "static_obstacles", ")", "\n", "if", "not", "collisions", ":", "\n", "            ", "obstacles", "=", "set", "(", ")", "\n", "\n", "", "start_path", ",", "end_path", "=", "[", "]", ",", "[", "]", "\n", "if", "hasattr", "(", "bq1", ",", "'nearby_bq'", ")", ":", "\n", "            ", "bq1", ".", "assign", "(", ")", "\n", "start_path", "=", "plan_nonholonomic_motion", "(", "world", ".", "robot", ",", "bq2", ".", "joints", ",", "bq1", ".", "nearby_bq", ".", "values", ",", "attachments", "=", "attachments", ",", "\n", "obstacles", "=", "obstacles", ",", "custom_limits", "=", "world", ".", "custom_limits", ",", "\n", "reversible", "=", "True", ",", "self_collisions", "=", "False", ",", "restarts", "=", "-", "1", ")", "\n", "if", "start_path", "is", "None", ":", "\n", "                ", "print", "(", "'Failed to find nearby base conf!'", ")", "\n", "return", "\n", "", "bq1", "=", "bq1", ".", "nearby_bq", "\n", "", "if", "hasattr", "(", "bq2", ",", "'nearby_bq'", ")", ":", "\n", "            ", "bq2", ".", "nearby_bq", ".", "assign", "(", ")", "\n", "end_path", "=", "plan_nonholonomic_motion", "(", "world", ".", "robot", ",", "bq2", ".", "joints", ",", "bq2", ".", "values", ",", "attachments", "=", "attachments", ",", "\n", "obstacles", "=", "obstacles", ",", "custom_limits", "=", "world", ".", "custom_limits", ",", "\n", "reversible", "=", "True", ",", "self_collisions", "=", "False", ",", "restarts", "=", "-", "1", ")", "\n", "if", "end_path", "is", "None", ":", "\n", "                ", "print", "(", "'Failed to find nearby base conf!'", ")", "\n", "return", "\n", "", "bq2", "=", "bq2", ".", "nearby_bq", "\n", "\n", "", "bq1", ".", "assign", "(", ")", "\n", "robot_saver", "=", "BodySaver", "(", "world", ".", "robot", ")", "\n", "if", "(", "bq1", "==", "bq2", ")", "or", "teleport_base", "or", "teleport", ":", "\n", "            ", "path", "=", "[", "bq1", ".", "values", ",", "bq2", ".", "values", "]", "\n", "", "else", ":", "\n", "# It's important that the extend function is reversible to avoid getting trapped", "\n", "            ", "path", "=", "plan_nonholonomic_motion", "(", "world", ".", "robot", ",", "bq2", ".", "joints", ",", "bq2", ".", "values", ",", "attachments", "=", "attachments", ",", "\n", "obstacles", "=", "obstacles", ",", "custom_limits", "=", "world", ".", "custom_limits", ",", "\n", "reversible", "=", "True", ",", "self_collisions", "=", "False", ",", "\n", "restarts", "=", "restarts", ",", "iterations", "=", "iterations", ",", "smooth", "=", "smooth", ")", "\n", "if", "path", "is", "None", ":", "\n", "                ", "print", "(", "'Failed to find an arm motion plan for {}->{}'", ".", "format", "(", "bq1", ",", "bq2", ")", ")", "\n", "if", "PAUSE_MOTION_FAILURES", ":", "\n", "                    ", "set_renderer", "(", "enable", "=", "True", ")", "\n", "print", "(", "fluents", ")", "\n", "for", "bq", "in", "[", "bq1", ",", "bq2", "]", ":", "\n", "                        ", "bq", ".", "assign", "(", ")", "\n", "wait_for_user", "(", ")", "\n", "", "set_renderer", "(", "enable", "=", "False", ")", "\n", "", "return", "None", "\n", "\n", "# TODO: could actually plan with all joints as long as we return to the same config", "\n", "", "", "cmd", "=", "Sequence", "(", "State", "(", "world", ",", "savers", "=", "[", "robot_saver", "]", ")", ",", "commands", "=", "[", "\n", "Trajectory", "(", "world", ",", "world", ".", "robot", ",", "world", ".", "base_joints", ",", "path", ")", "\n", "for", "path", "in", "[", "start_path", ",", "path", ",", "end_path", "]", "if", "path", "]", ",", "name", "=", "'base'", ")", "\n", "return", "(", "cmd", ",", ")", "\n", "", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.move.get_reachability_test": [[129, 139], ["move.get_base_motion_fn", "src.utils.FConf", "get_base_motion_fn."], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.streams.move.get_base_motion_fn"], ["", "def", "get_reachability_test", "(", "world", ",", "**", "kwargs", ")", ":", "\n", "    ", "base_motion_fn", "=", "get_base_motion_fn", "(", "world", ",", "restarts", "=", "2", ",", "iterations", "=", "50", ",", "smooth", "=", "0", ",", "**", "kwargs", ")", "\n", "bq0", "=", "FConf", "(", "world", ".", "robot", ",", "world", ".", "base_joints", ")", "\n", "# TODO: can check for arm motions as well", "\n", "\n", "def", "test", "(", "bq", ")", ":", "\n", "        ", "aq", "=", "world", ".", "carry_conf", "\n", "outputs", "=", "base_motion_fn", "(", "aq", ",", "bq0", ",", "bq", ",", "fluents", "=", "[", "]", ")", "\n", "return", "outputs", "is", "not", "None", "\n", "", "return", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.move.get_arm_motion_gen": [[141, 178], ["numpy.ones", "bq.assign", "aq1.assign", "move.parse_fluents", "set.update", "pybullet_tools.utils.BodySaver", "src.command.Sequence", "len", "set", "pybullet_tools.utils.plan_joint_motion", "src.command.State", "print", "pybullet_tools.utils.set_renderer", "print", "pybullet_tools.utils.set_renderer", "src.command.Trajectory", "bq.assign", "pybullet_tools.utils.wait_for_user"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.move.parse_fluents", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.belief.Belief.update", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign"], ["", "def", "get_arm_motion_gen", "(", "world", ",", "collisions", "=", "True", ",", "teleport", "=", "False", ")", ":", "\n", "    ", "resolutions", "=", "ARM_RESOLUTION", "*", "np", ".", "ones", "(", "len", "(", "world", ".", "arm_joints", ")", ")", "\n", "\n", "def", "fn", "(", "bq", ",", "aq1", ",", "aq2", ",", "fluents", "=", "[", "]", ")", ":", "\n", "#if aq1 == aq2:", "\n", "#    return None", "\n", "        ", "bq", ".", "assign", "(", ")", "\n", "aq1", ".", "assign", "(", ")", "\n", "attachments", ",", "obstacles", "=", "parse_fluents", "(", "world", ",", "fluents", ")", "\n", "obstacles", ".", "update", "(", "world", ".", "static_obstacles", ")", "\n", "if", "not", "collisions", ":", "\n", "            ", "obstacles", "=", "set", "(", ")", "\n", "", "robot_saver", "=", "BodySaver", "(", "world", ".", "robot", ")", "\n", "if", "teleport", ":", "\n", "            ", "path", "=", "[", "aq1", ".", "values", ",", "aq2", ".", "values", "]", "\n", "", "else", ":", "\n", "            ", "path", "=", "plan_joint_motion", "(", "world", ".", "robot", ",", "aq2", ".", "joints", ",", "aq2", ".", "values", ",", "\n", "attachments", "=", "attachments", ",", "obstacles", "=", "obstacles", ",", "\n", "self_collisions", "=", "SELF_COLLISIONS", ",", "\n", "disabled_collisions", "=", "world", ".", "disabled_collisions", ",", "\n", "custom_limits", "=", "world", ".", "custom_limits", ",", "resolutions", "=", "resolutions", ",", "\n", "restarts", "=", "2", ",", "iterations", "=", "50", ",", "smooth", "=", "50", ")", "\n", "if", "path", "is", "None", ":", "\n", "                ", "print", "(", "'Failed to find an arm motion plan for {}->{}'", ".", "format", "(", "aq1", ",", "aq2", ")", ")", "\n", "if", "PAUSE_MOTION_FAILURES", ":", "\n", "                    ", "set_renderer", "(", "enable", "=", "True", ")", "\n", "print", "(", "fluents", ")", "\n", "for", "bq", "in", "[", "aq1", ",", "aq2", "]", ":", "\n", "                        ", "bq", ".", "assign", "(", ")", "\n", "wait_for_user", "(", ")", "\n", "", "set_renderer", "(", "enable", "=", "False", ")", "\n", "", "return", "None", "\n", "", "", "cmd", "=", "Sequence", "(", "State", "(", "world", ",", "savers", "=", "[", "robot_saver", "]", ")", ",", "commands", "=", "[", "\n", "Trajectory", "(", "world", ",", "world", ".", "robot", ",", "world", ".", "arm_joints", ",", "path", ")", ",", "\n", "]", ",", "name", "=", "'arm'", ")", "\n", "return", "(", "cmd", ",", ")", "\n", "", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.move.get_gripper_motion_gen": [[180, 196], ["numpy.ones", "src.command.Sequence", "len", "pybullet_tools.utils.get_extend_fn", "src.command.State", "list", "pybullet_tools.utils.get_extend_fn.", "src.command.Trajectory"], "function", ["None"], ["", "def", "get_gripper_motion_gen", "(", "world", ",", "teleport", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "resolutions", "=", "GRIPPER_RESOLUTION", "*", "np", ".", "ones", "(", "len", "(", "world", ".", "gripper_joints", ")", ")", "\n", "\n", "def", "fn", "(", "gq1", ",", "gq2", ")", ":", "\n", "#if gq1 == gq2:", "\n", "#    return None", "\n", "        ", "if", "teleport", ":", "\n", "            ", "path", "=", "[", "gq1", ".", "values", ",", "gq2", ".", "values", "]", "\n", "", "else", ":", "\n", "            ", "extend_fn", "=", "get_extend_fn", "(", "gq2", ".", "body", ",", "gq2", ".", "joints", ",", "resolutions", "=", "resolutions", ")", "\n", "path", "=", "[", "gq1", ".", "values", "]", "+", "list", "(", "extend_fn", "(", "gq1", ".", "values", ",", "gq2", ".", "values", ")", ")", "\n", "", "cmd", "=", "Sequence", "(", "State", "(", "world", ")", ",", "commands", "=", "[", "\n", "Trajectory", "(", "world", ",", "gq2", ".", "body", ",", "gq2", ".", "joints", ",", "path", ")", ",", "\n", "]", ",", "name", "=", "'gripper'", ")", "\n", "return", "(", "cmd", ",", ")", "\n", "", "return", "fn", "\n", "", ""]], "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pour.pour_path_from_parameter": [[18, 68], ["world.get_body", "pybullet_tools.utils.approximate_as_cylinder", "world.get_body", "pybullet_tools.utils.approximate_as_prism", "src.utils.type_from_name", "numpy.array", "numpy.math.atan2", "numpy.linalg.norm", "pybullet_tools.utils.Point", "pybullet_tools.utils.Pose", "pybullet_tools.utils.Point", "pybullet_tools.utils.Point", "pybullet_tools.utils.Point", "pybullet_tools.utils.Pose", "cup_path_in_bowl.append", "list", "pybullet_tools.utils.multiply", "numpy.arange", "pybullet_tools.utils.Euler", "pybullet_tools.utils.Pose", "pybullet_tools.utils.Pose", "pybullet_tools.utils.invert", "pybullet_tools.utils.invert", "numpy.math.sin", "pybullet_tools.utils.Pose", "numpy.math.cos"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.type_from_name"], ["def", "pour_path_from_parameter", "(", "world", ",", "bowl_name", ",", "cup_name", ")", ":", "\n", "    ", "bowl_body", "=", "world", ".", "get_body", "(", "bowl_name", ")", "\n", "bowl_center", ",", "(", "bowl_d", ",", "bowl_h", ")", "=", "approximate_as_cylinder", "(", "bowl_body", ")", "\n", "cup_body", "=", "world", ".", "get_body", "(", "cup_name", ")", "\n", "cup_center", ",", "(", "cup_d", ",", "_", ",", "cup_h", ")", "=", "approximate_as_prism", "(", "cup_body", ")", "\n", "\n", "#####", "\n", "\n", "obj_type", "=", "type_from_name", "(", "cup_name", ")", "\n", "if", "obj_type", "in", "[", "MUSTARD", "]", ":", "\n", "        ", "initial_pitch", "=", "final_pitch", "=", "-", "np", ".", "pi", "\n", "radius", "=", "0", "\n", "", "else", ":", "\n", "        ", "initial_pitch", "=", "0", "# different if mustard", "\n", "final_pitch", "=", "-", "3", "*", "np", ".", "pi", "/", "4", "\n", "radius", "=", "bowl_d", "/", "2", "\n", "\n", "#axis_in_cup_center_x = -0.05", "\n", "", "axis_in_cup_center_x", "=", "0", "# meters", "\n", "#axis_in_cup_center_z = -cup_h/2.", "\n", "axis_in_cup_center_z", "=", "0.", "# meters", "\n", "#axis_in_cup_center_z = +cup_h/2.", "\n", "\n", "# tl := top left | tr := top right", "\n", "cup_tl_in_center", "=", "np", ".", "array", "(", "[", "-", "cup_d", "/", "2", ",", "0", ",", "cup_h", "/", "2", "]", ")", "\n", "cup_tl_in_axis", "=", "cup_tl_in_center", "-", "Point", "(", "z", "=", "axis_in_cup_center_z", ")", "\n", "cup_tl_angle", "=", "np", ".", "math", ".", "atan2", "(", "cup_tl_in_axis", "[", "2", "]", ",", "cup_tl_in_axis", "[", "0", "]", ")", "\n", "cup_tl_pour_pitch", "=", "final_pitch", "-", "cup_tl_angle", "\n", "\n", "cup_radius2d", "=", "np", ".", "linalg", ".", "norm", "(", "[", "cup_tl_in_axis", "]", ")", "\n", "pivot_in_bowl_tr", "=", "Point", "(", "\n", "x", "=", "-", "(", "cup_radius2d", "*", "np", ".", "math", ".", "cos", "(", "cup_tl_pour_pitch", ")", "+", "0.01", ")", ",", "\n", "z", "=", "(", "cup_radius2d", "*", "np", ".", "math", ".", "sin", "(", "cup_tl_pour_pitch", ")", "+", "Z_OFFSET", ")", ")", "\n", "\n", "pivot_in_bowl_center", "=", "Point", "(", "x", "=", "radius", ",", "z", "=", "bowl_h", "/", "2", ")", "+", "pivot_in_bowl_tr", "\n", "base_from_pivot", "=", "Pose", "(", "Point", "(", "x", "=", "axis_in_cup_center_x", ",", "z", "=", "axis_in_cup_center_z", ")", ")", "\n", "\n", "#####", "\n", "\n", "assert", "-", "np", ".", "pi", "<=", "final_pitch", "<=", "initial_pitch", "\n", "pitches", "=", "[", "initial_pitch", "]", "\n", "if", "final_pitch", "!=", "initial_pitch", ":", "\n", "        ", "pitches", "=", "list", "(", "np", ".", "arange", "(", "final_pitch", ",", "initial_pitch", ",", "np", ".", "pi", "/", "16", ")", ")", "+", "pitches", "\n", "", "cup_path_in_bowl", "=", "[", "]", "\n", "for", "pitch", "in", "pitches", ":", "\n", "        ", "rotate_pivot", "=", "Pose", "(", "euler", "=", "Euler", "(", "pitch", "=", "pitch", ")", ")", "# Can also interpolate directly between start and end quat", "\n", "cup_path_in_bowl", ".", "append", "(", "multiply", "(", "Pose", "(", "point", "=", "bowl_center", ")", ",", "Pose", "(", "pivot_in_bowl_center", ")", ",", "\n", "rotate_pivot", ",", "invert", "(", "base_from_pivot", ")", ",", "\n", "invert", "(", "Pose", "(", "point", "=", "cup_center", ")", ")", ")", ")", "\n", "", "return", "cup_path_in_bowl", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pour.visualize_cartesian_path": [[69, 74], ["enumerate", "pybullet_tools.utils.set_pose", "print", "pybullet_tools.utils.wait_for_user", "len"], "function", ["None"], ["", "def", "visualize_cartesian_path", "(", "body", ",", "pose_path", ")", ":", "\n", "    ", "for", "i", ",", "pose", "in", "enumerate", "(", "pose_path", ")", ":", "\n", "        ", "set_pose", "(", "body", ",", "pose", ")", "\n", "print", "(", "'{}/{}) continue?'", ".", "format", "(", "i", ",", "len", "(", "pose_path", ")", ")", ")", "\n", "wait_for_user", "(", ")", "\n", "#handles = draw_pose(get_pose(body))", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pour.get_fixed_pour_gen_fn": [[81, 128], ["world.get_body", "pour.pour_path_from_parameter", "set", "range", "wp.get_world_from_body", "pybullet_tools.utils.Pose", "pybullet_tools.utils.Pose", "bq.assign", "grasp.set_gripper", "world.carry_conf.assign", "src.stream.plan_workspace", "src.utils.FConf", "pybullet_tools.utils.BodySaver", "src.utils.type_from_name", "src.command.Sequence", "pybullet_tools.utils.multiply", "pybullet_tools.utils.multiply", "src.command.State", "pybullet_tools.utils.Euler", "pybullet_tools.utils.Euler", "pybullet_tools.utils.invert", "pybullet_tools.utils.invert", "src.command.ApproachTrajectory", "src.command.Wait", "src.command.ApproachTrajectory", "random.uniform", "random.uniform"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pour.pour_path_from_parameter", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.get_world_from_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.set_gripper", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.plan_workspace", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.type_from_name"], ["", "", "def", "get_fixed_pour_gen_fn", "(", "world", ",", "max_attempts", "=", "50", ",", "collisions", "=", "True", ",", "teleport", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "gen", "(", "bowl_name", ",", "wp", ",", "cup_name", ",", "grasp", ",", "bq", ")", ":", "\n", "# https://github.mit.edu/Learning-and-Intelligent-Systems/ltamp_pr2/blob/d1e6024c5c13df7edeab3a271b745e656a794b02/plan_tools/samplers/pour.py", "\n", "        ", "if", "bowl_name", "==", "cup_name", ":", "\n", "            ", "return", "\n", "#attachment = get_grasp_attachment(world, arm, grasp)", "\n", "", "bowl_body", "=", "world", ".", "get_body", "(", "bowl_name", ")", "\n", "#cup_body = world.get_body(cup_name)", "\n", "obstacles", "=", "(", "world", ".", "static_obstacles", "|", "{", "bowl_body", "}", ")", "if", "collisions", "else", "set", "(", ")", "\n", "cup_path_bowl", "=", "pour_path_from_parameter", "(", "world", ",", "bowl_name", ",", "cup_name", ")", "\n", "while", "True", ":", "\n", "            ", "for", "_", "in", "range", "(", "max_attempts", ")", ":", "\n", "                ", "bowl_pose", "=", "wp", ".", "get_world_from_body", "(", ")", "\n", "rotate_bowl", "=", "Pose", "(", "euler", "=", "Euler", "(", "yaw", "=", "random", ".", "uniform", "(", "-", "np", ".", "pi", ",", "np", ".", "pi", ")", ")", ")", "\n", "rotate_cup", "=", "Pose", "(", "euler", "=", "Euler", "(", "yaw", "=", "random", ".", "uniform", "(", "-", "np", ".", "pi", ",", "np", ".", "pi", ")", ")", ")", "\n", "cup_path", "=", "[", "multiply", "(", "bowl_pose", ",", "invert", "(", "rotate_bowl", ")", ",", "cup_pose_bowl", ",", "rotate_cup", ")", "\n", "for", "cup_pose_bowl", "in", "cup_path_bowl", "]", "\n", "#visualize_cartesian_path(cup_body, cup_path)", "\n", "#if cartesian_path_collision(cup_body, cup_path, obstacles + [bowl_body]):", "\n", "#    continue", "\n", "tool_path", "=", "[", "multiply", "(", "p", ",", "invert", "(", "grasp", ".", "grasp_pose", ")", ")", "for", "p", "in", "cup_path", "]", "\n", "# TODO: extra collision test for visibility", "\n", "# TODO: orientation constraint while moving", "\n", "\n", "bq", ".", "assign", "(", ")", "\n", "grasp", ".", "set_gripper", "(", ")", "\n", "world", ".", "carry_conf", ".", "assign", "(", ")", "\n", "arm_path", "=", "plan_workspace", "(", "world", ",", "tool_path", ",", "obstacles", ",", "randomize", "=", "True", ")", "# tilt to upright", "\n", "if", "arm_path", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "assert", "MOVE_ARM", "\n", "aq", "=", "FConf", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ",", "arm_path", "[", "-", "1", "]", ")", "\n", "robot_saver", "=", "BodySaver", "(", "world", ".", "robot", ")", "\n", "\n", "obj_type", "=", "type_from_name", "(", "cup_name", ")", "\n", "duration", "=", "5.0", "if", "obj_type", "in", "[", "MUSTARD", "]", "else", "1.0", "\n", "objects", "=", "[", "bowl_name", ",", "cup_name", "]", "\n", "cmd", "=", "Sequence", "(", "State", "(", "world", ",", "savers", "=", "[", "robot_saver", "]", ")", ",", "commands", "=", "[", "\n", "ApproachTrajectory", "(", "objects", ",", "world", ",", "world", ".", "robot", ",", "world", ".", "arm_joints", ",", "arm_path", "[", ":", ":", "-", "1", "]", ")", ",", "\n", "Wait", "(", "world", ",", "duration", "=", "duration", ")", ",", "\n", "ApproachTrajectory", "(", "objects", ",", "world", ",", "world", ".", "robot", ",", "world", ".", "arm_joints", ",", "arm_path", ")", ",", "\n", "]", ",", "name", "=", "'pour'", ")", "\n", "yield", "(", "aq", ",", "cmd", ",", ")", "\n", "break", "\n", "", "else", ":", "\n", "                ", "yield", "None", "\n", "", "", "", "return", "gen", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pour.get_pour_gen_fn": [[130, 170], ["pour.get_fixed_pour_gen_fn", "world.get_body", "pose.get_world_from_body", "src.stream.inverse_reachability", "itertools.cycle", "pybullet_tools.utils.uniform_pose_generator", "range", "src.database.load_pour_base_poses", "next", "next", "get_fixed_pour_gen_fn.", "print", "print"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pour.get_fixed_pour_gen_fn", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.RelPose.get_world_from_body", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.inverse_reachability", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_pour_base_poses"], ["", "def", "get_pour_gen_fn", "(", "world", ",", "max_attempts", "=", "50", ",", "learned", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "ik_gen", "=", "get_fixed_pour_gen_fn", "(", "world", ",", "max_attempts", "=", "1", ",", "**", "kwargs", ")", "\n", "\n", "def", "gen", "(", "bowl_name", ",", "pose", ",", "cup_name", ",", "grasp", ")", ":", "\n", "        ", "if", "bowl_name", "==", "cup_name", ":", "\n", "            ", "return", "\n", "", "obstacles", "=", "world", ".", "static_obstacles", "\n", "bowl_body", "=", "world", ".", "get_body", "(", "bowl_name", ")", "\n", "bowl_pose", "=", "pose", ".", "get_world_from_body", "(", ")", "\n", "if", "learned", ":", "\n", "# TODO: do this properly", "\n", "#grasp_pose = next(iter(get_top_grasps(bowl_body, tool_pose=TOOL_POSE, grasp_length=-Z_OFFSET, max_width=np.inf)))", "\n", "#gripper_pose = multiply(bowl_pose, invert(grasp_pose))  # w_f_g = w_f_o * (g_f_o)^-1", "\n", "#set_tool_pose(world, gripper_pose)", "\n", "#base_generator = cycle(load_place_base_poses(world, gripper_pose, pose.support, TOP_GRASP))", "\n", "            ", "base_generator", "=", "cycle", "(", "load_pour_base_poses", "(", "world", ",", "pose", ".", "support", ")", ")", "\n", "", "else", ":", "\n", "            ", "base_generator", "=", "uniform_pose_generator", "(", "world", ".", "robot", ",", "bowl_pose", ")", "\n", "", "safe_base_generator", "=", "inverse_reachability", "(", "world", ",", "base_generator", ",", "obstacles", "=", "obstacles", ",", "**", "kwargs", ")", "\n", "while", "True", ":", "\n", "            ", "for", "i", "in", "range", "(", "max_attempts", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "base_conf", "=", "next", "(", "safe_base_generator", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "return", "\n", "", "if", "base_conf", "is", "None", ":", "\n", "                    ", "yield", "None", "\n", "continue", "\n", "#randomize = (random.random() < P_RANDOMIZE_IK)", "\n", "", "ik_outputs", "=", "next", "(", "ik_gen", "(", "bowl_name", ",", "pose", ",", "cup_name", ",", "grasp", ",", "base_conf", ")", ",", "None", ")", "\n", "if", "ik_outputs", "is", "not", "None", ":", "\n", "                    ", "print", "(", "'Pour succeeded after {} attempts'", ".", "format", "(", "i", ")", ")", "\n", "yield", "(", "base_conf", ",", ")", "+", "ik_outputs", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "if", "PRINT_FAILURES", ":", "print", "(", "'Pour failure after {} attempts'", ".", "format", "(", "max_attempts", ")", ")", "\n", "#if not pose.init:", "\n", "#    break", "\n", "yield", "None", "\n", "", "", "", "return", "gen", "\n", "", ""]], "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pull.is_pull_safe": [[15, 26], ["src.utils.get_descendant_obstacles", "pybullet_tools.utils.set_joint_positions", "any", "pybullet_tools.utils.pairwise_collision", "print"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_descendant_obstacles"], ["def", "is_pull_safe", "(", "world", ",", "door_joint", ",", "door_plan", ")", ":", "\n", "    ", "obstacles", "=", "get_descendant_obstacles", "(", "world", ".", "kitchen", ",", "door_joint", ")", "\n", "door_path", ",", "handle_path", ",", "handle_plan", ",", "tool_path", "=", "door_plan", "\n", "for", "door_conf", "in", "[", "door_path", "[", "0", "]", ",", "door_path", "[", "-", "1", "]", "]", ":", "\n", "# TODO: check the whole door trajectory", "\n", "        ", "set_joint_positions", "(", "world", ".", "kitchen", ",", "[", "door_joint", "]", ",", "door_conf", ")", "\n", "# TODO: just check collisions with the base of the robot", "\n", "if", "any", "(", "pairwise_collision", "(", "world", ".", "robot", ",", "b", ")", "for", "b", "in", "obstacles", ")", ":", "\n", "            ", "if", "PRINT_FAILURES", ":", "print", "(", "'Door start/end failure'", ")", "\n", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pull.plan_pull": [[28, 87], ["src.utils.get_descendant_obstacles", "base_conf.assign", "world.open_gripper", "world.carry_conf.assign", "pybullet_tools.utils.BodySaver", "src.stream.plan_workspace", "pybullet_tools.utils.set_joint_positions", "pybullet_tools.utils.set_joint_positions", "pybullet_tools.pr2_utils.close_until_collision", "src.streams.move.get_gripper_motion_gen", "src.utils.FConf", "src.streams.move.get_gripper_motion_gen.", "world.get_door_sign", "src.command.Sequence", "pull.is_pull_safe", "pybullet_tools.utils.set_joint_positions", "pybullet_tools.utils.set_joint_positions", "pybullet_tools.utils.multiply", "src.stream.plan_approach", "approach_paths.append", "src.utils.FConf", "src.utils.FConf", "src.command.ApproachTrajectory", "src.command.DoorTrajectory", "src.command.ApproachTrajectory", "commands.insert", "commands.insert", "src.command.State", "pybullet_tools.utils.invert", "len", "reversed", "finger_cmd.commands[].reverse"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_descendant_obstacles", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.open_gripper", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.plan_workspace", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.move.get_gripper_motion_gen", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.get_door_sign", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pull.is_pull_safe", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.plan_approach", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.command.Wait.reverse"], ["", "def", "plan_pull", "(", "world", ",", "door_joint", ",", "door_plan", ",", "base_conf", ",", "\n", "randomize", "=", "True", ",", "collisions", "=", "True", ",", "teleport", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "door_path", ",", "handle_path", ",", "handle_plan", ",", "tool_path", "=", "door_plan", "\n", "handle_link", ",", "handle_grasp", ",", "handle_pregrasp", "=", "handle_plan", "\n", "\n", "door_obstacles", "=", "get_descendant_obstacles", "(", "world", ".", "kitchen", ",", "door_joint", ")", "# if collisions else set()", "\n", "obstacles", "=", "(", "world", ".", "static_obstacles", "|", "door_obstacles", ")", "# if collisions else set()", "\n", "\n", "base_conf", ".", "assign", "(", ")", "\n", "world", ".", "open_gripper", "(", ")", "\n", "world", ".", "carry_conf", ".", "assign", "(", ")", "\n", "robot_saver", "=", "BodySaver", "(", "world", ".", "robot", ")", "# TODO: door_saver?", "\n", "if", "not", "is_pull_safe", "(", "world", ",", "door_joint", ",", "door_plan", ")", ":", "\n", "        ", "return", "\n", "\n", "", "arm_path", "=", "plan_workspace", "(", "world", ",", "tool_path", ",", "world", ".", "static_obstacles", ",", "\n", "randomize", "=", "randomize", ",", "teleport", "=", "collisions", ")", "\n", "if", "arm_path", "is", "None", ":", "\n", "        ", "return", "\n", "", "approach_paths", "=", "[", "]", "\n", "for", "index", "in", "[", "0", ",", "-", "1", "]", ":", "\n", "        ", "set_joint_positions", "(", "world", ".", "kitchen", ",", "[", "door_joint", "]", ",", "door_path", "[", "index", "]", ")", "\n", "set_joint_positions", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ",", "arm_path", "[", "index", "]", ")", "\n", "tool_pose", "=", "multiply", "(", "handle_path", "[", "index", "]", ",", "invert", "(", "handle_pregrasp", ")", ")", "\n", "approach_path", "=", "plan_approach", "(", "world", ",", "tool_pose", ",", "obstacles", "=", "obstacles", ",", "teleport", "=", "teleport", ",", "**", "kwargs", ")", "\n", "if", "approach_path", "is", "None", ":", "\n", "            ", "return", "\n", "", "approach_paths", ".", "append", "(", "approach_path", ")", "\n", "\n", "", "if", "MOVE_ARM", ":", "\n", "        ", "aq1", "=", "FConf", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ",", "approach_paths", "[", "0", "]", "[", "0", "]", ")", "\n", "aq2", "=", "FConf", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ",", "approach_paths", "[", "-", "1", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "aq1", "=", "world", ".", "carry_conf", "\n", "aq2", "=", "aq1", "\n", "\n", "", "set_joint_positions", "(", "world", ".", "kitchen", ",", "[", "door_joint", "]", ",", "door_path", "[", "0", "]", ")", "\n", "set_joint_positions", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ",", "arm_path", "[", "0", "]", ")", "\n", "grasp_width", "=", "close_until_collision", "(", "world", ".", "robot", ",", "world", ".", "gripper_joints", ",", "\n", "bodies", "=", "[", "(", "world", ".", "kitchen", ",", "[", "handle_link", "]", ")", "]", ")", "\n", "gripper_motion_fn", "=", "get_gripper_motion_gen", "(", "world", ",", "teleport", "=", "teleport", ",", "collisions", "=", "collisions", ",", "**", "kwargs", ")", "\n", "gripper_conf", "=", "FConf", "(", "world", ".", "robot", ",", "world", ".", "gripper_joints", ",", "[", "grasp_width", "]", "*", "len", "(", "world", ".", "gripper_joints", ")", ")", "\n", "finger_cmd", ",", "=", "gripper_motion_fn", "(", "world", ".", "open_gq", ",", "gripper_conf", ")", "\n", "\n", "objects", "=", "[", "]", "\n", "commands", "=", "[", "\n", "ApproachTrajectory", "(", "objects", ",", "world", ",", "world", ".", "robot", ",", "world", ".", "arm_joints", ",", "approach_paths", "[", "0", "]", ")", ",", "\n", "DoorTrajectory", "(", "world", ",", "world", ".", "robot", ",", "world", ".", "arm_joints", ",", "arm_path", ",", "\n", "world", ".", "kitchen", ",", "[", "door_joint", "]", ",", "door_path", ")", ",", "\n", "ApproachTrajectory", "(", "objects", ",", "world", ",", "world", ".", "robot", ",", "world", ".", "arm_joints", ",", "reversed", "(", "approach_paths", "[", "-", "1", "]", ")", ")", ",", "\n", "]", "\n", "door_path", ",", "_", ",", "_", ",", "_", "=", "door_plan", "\n", "sign", "=", "world", ".", "get_door_sign", "(", "door_joint", ")", "\n", "pull", "=", "(", "sign", "*", "door_path", "[", "0", "]", "[", "0", "]", "<", "sign", "*", "door_path", "[", "-", "1", "]", "[", "0", "]", ")", "\n", "if", "pull", ":", "\n", "        ", "commands", ".", "insert", "(", "1", ",", "finger_cmd", ".", "commands", "[", "0", "]", ")", "\n", "commands", ".", "insert", "(", "3", ",", "finger_cmd", ".", "commands", "[", "0", "]", ".", "reverse", "(", ")", ")", "\n", "", "cmd", "=", "Sequence", "(", "State", "(", "world", ",", "savers", "=", "[", "robot_saver", "]", ")", ",", "commands", ",", "name", "=", "'pull'", ")", "\n", "yield", "(", "aq1", ",", "aq2", ",", "cmd", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pull.get_fixed_pull_gen_fn": [[90, 127], ["pybullet_tools.utils.joint_from_name", "base_conf.assign", "world.carry_conf.assign", "src.utils.get_descendant_obstacles", "print", "range", "src.stream.compute_door_paths", "pull.is_pull_safe", "random.choice", "next", "random.random", "pull.plan_pull", "print", "print"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.get_descendant_obstacles", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.compute_door_paths", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pull.is_pull_safe", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pull.plan_pull"], ["", "def", "get_fixed_pull_gen_fn", "(", "world", ",", "max_attempts", "=", "25", ",", "collisions", "=", "True", ",", "teleport", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "def", "gen", "(", "joint_name", ",", "door_conf1", ",", "door_conf2", ",", "base_conf", ")", ":", "\n", "#if door_conf1 == door_conf2:", "\n", "#    return", "\n", "# TODO: check if within database convex hull", "\n", "        ", "door_joint", "=", "joint_from_name", "(", "world", ".", "kitchen", ",", "joint_name", ")", "\n", "obstacles", "=", "(", "world", ".", "static_obstacles", "|", "get_descendant_obstacles", "(", "\n", "world", ".", "kitchen", ",", "door_joint", ")", ")", "# if collisions else set()", "\n", "\n", "base_conf", ".", "assign", "(", ")", "\n", "world", ".", "carry_conf", ".", "assign", "(", ")", "\n", "door_plans", "=", "[", "door_plan", "for", "door_plan", "in", "compute_door_paths", "(", "\n", "world", ",", "joint_name", ",", "door_conf1", ",", "door_conf2", ",", "obstacles", ",", "teleport", "=", "teleport", ")", "\n", "if", "is_pull_safe", "(", "world", ",", "door_joint", ",", "door_plan", ")", "]", "\n", "if", "not", "door_plans", ":", "\n", "            ", "print", "(", "'Unable to open door {} at fixed config'", ".", "format", "(", "joint_name", ")", ")", "\n", "return", "\n", "", "max_failures", "=", "FIXED_FAILURES", "if", "world", ".", "task", ".", "movable_base", "else", "INF", "\n", "failures", "=", "0", "\n", "while", "failures", "<=", "max_failures", ":", "\n", "            ", "for", "i", "in", "range", "(", "max_attempts", ")", ":", "\n", "                ", "door_path", "=", "random", ".", "choice", "(", "door_plans", ")", "\n", "# TracIK is itself stochastic", "\n", "randomize", "=", "(", "random", ".", "random", "(", ")", "<", "P_RANDOMIZE_IK", ")", "\n", "ik_outputs", "=", "next", "(", "plan_pull", "(", "world", ",", "door_joint", ",", "door_path", ",", "base_conf", ",", "\n", "randomize", "=", "randomize", ",", "collisions", "=", "collisions", ",", "teleport", "=", "teleport", ",", "**", "kwargs", ")", ",", "\n", "None", ")", "\n", "if", "ik_outputs", "is", "not", "None", ":", "\n", "                    ", "print", "(", "'Fixed pull succeeded after {} attempts'", ".", "format", "(", "i", ")", ")", "\n", "yield", "ik_outputs", "\n", "break", "# return", "\n", "", "", "else", ":", "\n", "                ", "if", "PRINT_FAILURES", ":", "print", "(", "'Fixed pull failure'", ")", "\n", "yield", "None", "\n", "failures", "+=", "1", "\n", "", "", "", "return", "gen", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pull.get_pull_gen_fn": [[129, 171], ["pybullet_tools.utils.joint_from_name", "src.stream.compute_door_paths", "src.stream.inverse_reachability", "itertools.cycle", "int", "pybullet_tools.utils.uniform_pose_generator", "range", "src.database.load_pull_base_poses", "random.choice", "next", "len", "next", "random.random", "pull.plan_pull", "print", "print"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.compute_door_paths", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.inverse_reachability", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_pull_base_poses", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.pull.plan_pull"], ["", "def", "get_pull_gen_fn", "(", "world", ",", "max_attempts", "=", "50", ",", "collisions", "=", "True", ",", "teleport", "=", "False", ",", "learned", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "# TODO: could condition pick/place into cabinet on the joint angle", "\n", "    ", "obstacles", "=", "world", ".", "static_obstacles", "\n", "#if not collisions:", "\n", "#    obstacles = set()", "\n", "\n", "def", "gen", "(", "joint_name", ",", "door_conf1", ",", "door_conf2", ",", "*", "args", ")", ":", "\n", "        ", "if", "door_conf1", "==", "door_conf2", ":", "\n", "            ", "return", "\n", "", "door_joint", "=", "joint_from_name", "(", "world", ".", "kitchen", ",", "joint_name", ")", "\n", "door_paths", "=", "compute_door_paths", "(", "world", ",", "joint_name", ",", "door_conf1", ",", "door_conf2", ",", "obstacles", ",", "teleport", "=", "teleport", ")", "\n", "if", "not", "door_paths", ":", "\n", "            ", "return", "\n", "", "if", "learned", ":", "\n", "            ", "base_generator", "=", "cycle", "(", "load_pull_base_poses", "(", "world", ",", "joint_name", ")", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "_", ",", "_", ",", "tool_path", "=", "door_paths", "[", "0", "]", "\n", "index", "=", "int", "(", "len", "(", "tool_path", ")", "/", "2", ")", "# index = 0", "\n", "target_pose", "=", "tool_path", "[", "index", "]", "\n", "base_generator", "=", "uniform_pose_generator", "(", "world", ".", "robot", ",", "target_pose", ")", "\n", "", "safe_base_generator", "=", "inverse_reachability", "(", "world", ",", "base_generator", ",", "obstacles", "=", "obstacles", ",", "**", "kwargs", ")", "\n", "while", "True", ":", "\n", "            ", "for", "i", "in", "range", "(", "max_attempts", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "base_conf", "=", "next", "(", "safe_base_generator", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "return", "\n", "", "if", "base_conf", "is", "None", ":", "\n", "                    ", "yield", "None", "\n", "continue", "\n", "", "door_path", "=", "random", ".", "choice", "(", "door_paths", ")", "\n", "randomize", "=", "(", "random", ".", "random", "(", ")", "<", "P_RANDOMIZE_IK", ")", "\n", "ik_outputs", "=", "next", "(", "plan_pull", "(", "world", ",", "door_joint", ",", "door_path", ",", "base_conf", ",", "\n", "randomize", "=", "randomize", ",", "collisions", "=", "collisions", ",", "teleport", "=", "teleport", ",", "**", "kwargs", ")", ",", "None", ")", "\n", "if", "ik_outputs", "is", "not", "None", ":", "\n", "                    ", "print", "(", "'Pull succeeded after {} attempts'", ".", "format", "(", "i", ")", ")", "\n", "yield", "(", "base_conf", ",", ")", "+", "ik_outputs", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "if", "PRINT_FAILURES", ":", "print", "(", "'Pull failure'", ")", "\n", "yield", "None", "\n", "", "", "", "return", "gen", "", "", ""]], "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.press.get_grasp_presses": [[13, 23], ["pybullet_tools.utils.link_from_name", "pybullet_tools.utils.unit_point", "enumerate", "pybullet_tools.utils.get_unit_vector", "pybullet_tools.pr2_utils.get_top_presses", "pybullet_tools.utils.multiply", "src.utils.Grasp", "pybullet_tools.utils.Pose", "pybullet_tools.utils.Pose"], "function", ["None"], ["def", "get_grasp_presses", "(", "world", ",", "knob", ",", "pre_distance", "=", "APPROACH_DISTANCE", ")", ":", "\n", "    ", "knob_link", "=", "link_from_name", "(", "world", ".", "kitchen", ",", "knob", ")", "\n", "pre_direction", "=", "pre_distance", "*", "get_unit_vector", "(", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "post_direction", "=", "unit_point", "(", ")", "\n", "for", "i", ",", "grasp_pose", "in", "enumerate", "(", "get_top_presses", "(", "world", ".", "kitchen", ",", "link", "=", "knob_link", ",", "\n", "tool_pose", "=", "TOOL_POSE", ",", "top_offset", "=", "FINGER_EXTENT", "[", "0", "]", "/", "2", "+", "5e-3", ")", ")", ":", "\n", "        ", "pregrasp_pose", "=", "multiply", "(", "Pose", "(", "point", "=", "pre_direction", ")", ",", "grasp_pose", ",", "\n", "Pose", "(", "point", "=", "post_direction", ")", ")", "\n", "grasp", "=", "Grasp", "(", "world", ",", "knob", ",", "TOP_GRASP", ",", "i", ",", "grasp_pose", ",", "pregrasp_pose", ")", "\n", "yield", "grasp", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.press.plan_press": [[24, 63], ["base_conf.assign", "world.close_gripper", "pybullet_tools.utils.BodySaver", "pybullet_tools.utils.multiply", "world.solve_inverse_kinematics", "any", "pybullet_tools.utils.multiply", "src.stream.plan_approach", "src.command.Sequence", "pybullet_tools.utils.get_sample_fn", "pybullet_tools.utils.set_joint_positions", "world.carry_conf.assign", "pybullet_tools.utils.invert", "frozenset", "pybullet_tools.utils.invert", "src.utils.FConf", "src.command.State", "pybullet_tools.utils.get_sample_fn.", "pybullet_tools.utils.get_moving_links", "pybullet_tools.utils.pairwise_collision", "src.command.ApproachTrajectory", "src.command.ApproachTrajectory", "src.command.Wait", "reversed"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.close_gripper", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.world.World.solve_inverse_kinematics", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.plan_approach", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.utils.Grasp.assign"], ["", "", "def", "plan_press", "(", "world", ",", "knob_name", ",", "pose", ",", "grasp", ",", "base_conf", ",", "obstacles", ",", "randomize", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "base_conf", ".", "assign", "(", ")", "\n", "world", ".", "close_gripper", "(", ")", "\n", "robot_saver", "=", "BodySaver", "(", "world", ".", "robot", ")", "\n", "\n", "if", "randomize", ":", "\n", "        ", "sample_fn", "=", "get_sample_fn", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ")", "\n", "set_joint_positions", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ",", "sample_fn", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "world", ".", "carry_conf", ".", "assign", "(", ")", "\n", "", "gripper_pose", "=", "multiply", "(", "pose", ",", "invert", "(", "grasp", ".", "grasp_pose", ")", ")", "# w_f_g = w_f_o * (g_f_o)^-1", "\n", "#set_joint_positions(world.gripper, get_movable_joints(world.gripper), world.closed_gq.values)", "\n", "#set_tool_pose(world, gripper_pose)", "\n", "full_grasp_conf", "=", "world", ".", "solve_inverse_kinematics", "(", "gripper_pose", ")", "\n", "#wait_for_user()", "\n", "if", "full_grasp_conf", "is", "None", ":", "\n", "# if PRINT_FAILURES: print('Grasp kinematic failure')", "\n", "        ", "return", "\n", "", "robot_obstacle", "=", "(", "world", ".", "robot", ",", "frozenset", "(", "get_moving_links", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ")", ")", ")", "\n", "if", "any", "(", "pairwise_collision", "(", "robot_obstacle", ",", "b", ")", "for", "b", "in", "obstacles", ")", ":", "\n", "#if PRINT_FAILURES: print('Grasp collision failure')", "\n", "        ", "return", "\n", "", "approach_pose", "=", "multiply", "(", "pose", ",", "invert", "(", "grasp", ".", "pregrasp_pose", ")", ")", "\n", "approach_path", "=", "plan_approach", "(", "world", ",", "approach_pose", ",", "obstacles", "=", "obstacles", ",", "**", "kwargs", ")", "\n", "if", "approach_path", "is", "None", ":", "\n", "        ", "return", "\n", "", "aq", "=", "FConf", "(", "world", ".", "robot", ",", "world", ".", "arm_joints", ",", "approach_path", "[", "0", "]", ")", "if", "MOVE_ARM", "else", "world", ".", "carry_conf", "\n", "\n", "#gripper_motion_fn = get_gripper_motion_gen(world, **kwargs)", "\n", "#finger_cmd, = gripper_motion_fn(world.open_gq, world.closed_gq)", "\n", "objects", "=", "[", "]", "\n", "cmd", "=", "Sequence", "(", "State", "(", "world", ",", "savers", "=", "[", "robot_saver", "]", ")", ",", "commands", "=", "[", "\n", "#finger_cmd.commands[0],", "\n", "ApproachTrajectory", "(", "objects", ",", "world", ",", "world", ".", "robot", ",", "world", ".", "arm_joints", ",", "approach_path", ")", ",", "\n", "ApproachTrajectory", "(", "objects", ",", "world", ",", "world", ".", "robot", ",", "world", ".", "arm_joints", ",", "reversed", "(", "approach_path", ")", ")", ",", "\n", "#finger_cmd.commands[0].reverse(),", "\n", "Wait", "(", "world", ",", "duration", "=", "1.0", ")", ",", "\n", "]", ",", "name", "=", "'press'", ")", "\n", "yield", "(", "aq", ",", "cmd", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.press.get_fixed_press_gen_fn": [[66, 89], ["pybullet_tools.utils.link_from_name", "pybullet_tools.utils.get_link_pose", "itertools.cycle", "press.get_grasp_presses", "range", "next", "next", "random.random", "press.plan_press", "print", "print"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.streams.press.get_grasp_presses", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.press.plan_press"], ["", "def", "get_fixed_press_gen_fn", "(", "world", ",", "max_attempts", "=", "25", ",", "collisions", "=", "True", ",", "teleport", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "def", "gen", "(", "knob_name", ",", "base_conf", ")", ":", "\n", "        ", "knob_link", "=", "link_from_name", "(", "world", ".", "kitchen", ",", "knob_name", ")", "\n", "pose", "=", "get_link_pose", "(", "world", ".", "kitchen", ",", "knob_link", ")", "\n", "presses", "=", "cycle", "(", "get_grasp_presses", "(", "world", ",", "knob_name", ")", ")", "\n", "max_failures", "=", "FIXED_FAILURES", "if", "world", ".", "task", ".", "movable_base", "else", "INF", "\n", "failures", "=", "0", "\n", "while", "failures", "<=", "max_failures", ":", "\n", "            ", "for", "i", "in", "range", "(", "max_attempts", ")", ":", "\n", "                ", "grasp", "=", "next", "(", "presses", ")", "\n", "randomize", "=", "(", "random", ".", "random", "(", ")", "<", "P_RANDOMIZE_IK", ")", "\n", "ik_outputs", "=", "next", "(", "plan_press", "(", "world", ",", "knob_name", ",", "pose", ",", "grasp", ",", "base_conf", ",", "world", ".", "static_obstacles", ",", "\n", "randomize", "=", "randomize", ",", "**", "kwargs", ")", ",", "None", ")", "\n", "if", "ik_outputs", "is", "not", "None", ":", "\n", "                    ", "print", "(", "'Fixed press succeeded after {} attempts'", ".", "format", "(", "i", ")", ")", "\n", "yield", "ik_outputs", "\n", "break", "# return", "\n", "", "", "else", ":", "\n", "                ", "if", "PRINT_FAILURES", ":", "print", "(", "'Fixed pull failure after {} attempts'", ".", "format", "(", "max_attempts", ")", ")", "\n", "yield", "None", "\n", "max_failures", "+=", "1", "\n", "", "", "", "return", "gen", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.press.get_press_gen_fn": [[90, 127], ["pybullet_tools.utils.link_from_name", "pybullet_tools.utils.get_link_pose", "itertools.cycle", "next", "pybullet_tools.utils.multiply", "src.stream.inverse_reachability", "press.get_grasp_presses", "pybullet_tools.utils.invert", "itertools.cycle", "pybullet_tools.utils.uniform_pose_generator", "range", "src.database.load_pull_base_poses", "next", "next", "next", "random.random", "press.plan_press", "print", "print"], "function", ["home.repos.pwc.inspect_result.caelan_SS-Replan.src.stream.inverse_reachability", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.press.get_grasp_presses", "home.repos.pwc.inspect_result.caelan_SS-Replan.src.database.load_pull_base_poses", "home.repos.pwc.inspect_result.caelan_SS-Replan.streams.press.plan_press"], ["", "def", "get_press_gen_fn", "(", "world", ",", "max_attempts", "=", "50", ",", "collisions", "=", "True", ",", "teleport", "=", "False", ",", "learned", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "gen", "(", "knob_name", ")", ":", "\n", "        ", "obstacles", "=", "world", ".", "static_obstacles", "\n", "knob_link", "=", "link_from_name", "(", "world", ".", "kitchen", ",", "knob_name", ")", "\n", "pose", "=", "get_link_pose", "(", "world", ".", "kitchen", ",", "knob_link", ")", "\n", "#pose = RelPose(world.kitchen, knob_link, init=True)", "\n", "presses", "=", "cycle", "(", "get_grasp_presses", "(", "world", ",", "knob_name", ")", ")", "\n", "grasp", "=", "next", "(", "presses", ")", "\n", "gripper_pose", "=", "multiply", "(", "pose", ",", "invert", "(", "grasp", ".", "grasp_pose", ")", ")", "# w_f_g = w_f_o * (g_f_o)^-1", "\n", "if", "learned", ":", "\n", "            ", "base_generator", "=", "cycle", "(", "load_pull_base_poses", "(", "world", ",", "knob_name", ")", ")", "\n", "", "else", ":", "\n", "            ", "base_generator", "=", "uniform_pose_generator", "(", "world", ".", "robot", ",", "gripper_pose", ")", "\n", "", "safe_base_generator", "=", "inverse_reachability", "(", "world", ",", "base_generator", ",", "obstacles", "=", "obstacles", ",", "**", "kwargs", ")", "\n", "while", "True", ":", "\n", "            ", "for", "i", "in", "range", "(", "max_attempts", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "base_conf", "=", "next", "(", "safe_base_generator", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "return", "\n", "", "if", "base_conf", "is", "None", ":", "\n", "                    ", "yield", "None", "\n", "continue", "\n", "", "grasp", "=", "next", "(", "presses", ")", "\n", "randomize", "=", "(", "random", ".", "random", "(", ")", "<", "P_RANDOMIZE_IK", ")", "\n", "ik_outputs", "=", "next", "(", "plan_press", "(", "world", ",", "knob_name", ",", "pose", ",", "grasp", ",", "base_conf", ",", "obstacles", ",", "\n", "randomize", "=", "randomize", ",", "**", "kwargs", ")", ",", "None", ")", "\n", "if", "ik_outputs", "is", "not", "None", ":", "\n", "                    ", "print", "(", "'Press succeeded after {} attempts'", ".", "format", "(", "i", ")", ")", "\n", "yield", "(", "base_conf", ",", ")", "+", "ik_outputs", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "if", "PRINT_FAILURES", ":", "print", "(", "'Press failure after {} attempts'", ".", "format", "(", "max_attempts", ")", ")", "\n", "#if not pose.init:", "\n", "#    break", "\n", "yield", "None", "\n", "", "", "", "return", "gen", "\n", "", ""]]}