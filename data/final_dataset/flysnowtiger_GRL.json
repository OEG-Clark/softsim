{"home.repos.pwc.inspect_result.flysnowtiger_GRL.None.mars_train.save_checkpoint": [[24, 36], ["utils.serialization.save_cnn_checkpoint", "utils.serialization.save_siamese_checkpoint", "cnn_model.state_dict", "os.join", "siamese_model.state_dict", "os.join"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.save_cnn_checkpoint", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.save_siamese_checkpoint"], ["def", "save_checkpoint", "(", "cnn_model", ",", "siamese_model", ",", "epoch", ",", "best_top1", ",", "is_best", ")", ":", "\n", "    ", "save_cnn_checkpoint", "(", "{", "\n", "'state_dict'", ":", "cnn_model", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'best_top1'", ":", "best_top1", ",", "\n", "}", ",", "is_best", ",", "fpath", "=", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'cnn_checkpoint.pth.tar'", ")", ")", "\n", "\n", "save_siamese_checkpoint", "(", "{", "\n", "'state_dict'", ":", "siamese_model", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'best_top1'", ":", "best_top1", ",", "\n", "}", ",", "is_best", ",", "fpath", "=", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'siamese_checkpoint.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.None.mars_train.load_best_checkpoint": [[38, 44], ["utils.serialization.load_checkpoint", "cnn_model.load_state_dict", "utils.serialization.load_checkpoint", "siamese_model.load_state_dict", "os.join", "os.join"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.load_checkpoint", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.load_checkpoint"], ["", "def", "load_best_checkpoint", "(", "cnn_model", ",", "siamese_model", ")", ":", "\n", "    ", "checkpoint0", "=", "load_checkpoint", "(", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'cnnmodel_best.pth.tar'", ")", ")", "\n", "cnn_model", ".", "load_state_dict", "(", "checkpoint0", "[", "'state_dict'", "]", ")", "\n", "\n", "checkpoint1", "=", "load_checkpoint", "(", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'siamesemodel_best.pth.tar'", ")", ")", "\n", "siamese_model", ".", "load_state_dict", "(", "checkpoint1", "[", "'state_dict'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.None.mars_train.main": [[46, 143], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.device", "torch.device", "print", "reid.data.get_data", "reid.models.create", "reid.models.create", "reid.models.create", "torch.nn.DataParallel().to", "torch.nn.DataParallel().to", "siamese_model.to.to", "siamese_model_uncorr.to.to", "reid.loss.OIMLoss", "reid.loss.OIMLoss", "reid.loss.PairLoss", "reid.loss.OIMLoss.to", "reid.loss.OIMLoss.to", "reid.loss.PairLoss.to", "set", "torch.optim.SGD", "torch.optim.SGD", "reid.evaluator.ATTEvaluator", "os.exists", "utils.logging.Logger", "os.exists", "utils.logging.Logger", "map", "print", "mars_train.load_best_checkpoint", "reid.evaluator.ATTEvaluator.evaluate", "print", "os.join", "utils.serialization.remove_repeat_tensorboard_files", "reid.train.SEQTrainer", "range", "torch.cuda.is_available", "torch.cuda.is_available", "os.join", "os.join", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel().to.module.backbone.parameters", "torch.nn.DataParallel().to.parameters", "torch.nn.DataParallel().to.module.backbone.parameters", "siamese_model.to.parameters", "siamese_model_uncorr.to.parameters", "mars_train.main.adjust_lr"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.data.dataloader.get_data", "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.__init__.create", "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.__init__.create", "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.__init__.create", "home.repos.pwc.inspect_result.flysnowtiger_GRL.None.test_all.load_best_checkpoint", "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.eva_functions.evaluate", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.remove_repeat_tensorboard_files"], ["", "def", "main", "(", "args", ")", ":", "\n", "\n", "    ", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "'0,1'", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "# log file \u65e5\u5fd7\u6587\u4ef6  \u9632\u6b62\u91cd\u540d\u8986\u76d6", "\n", "run", "=", "0", "\n", "if", "args", ".", "evaluate", "==", "1", ":", "\n", "        ", "while", "osp", ".", "exists", "(", "\"%s\"", "%", "(", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'log_test{}.txt'", ".", "format", "(", "run", ")", ")", ")", ")", ":", "\n", "            ", "run", "+=", "1", "\n", "\n", "", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'log_test{}.txt'", ".", "format", "(", "run", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "while", "osp", ".", "exists", "(", "\"%s\"", "%", "(", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'log_train{}.txt'", ".", "format", "(", "run", ")", ")", ")", ")", ":", "\n", "            ", "run", "+=", "1", "\n", "\n", "", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'log_train{}.txt'", ".", "format", "(", "run", ")", ")", ")", "\n", "", "print", "(", "\"==========\\nArgs:{}\\n==========\"", ".", "format", "(", "args", ")", ")", "\n", "\n", "#", "\n", "dataset", ",", "num_classes", ",", "train_loader", ",", "query_loader", ",", "gallery_loader", "=", "get_data", "(", "args", ".", "dataset", ",", "args", ".", "split", ",", "args", ".", "data_dir", ",", "\n", "args", ".", "batch_size", ",", "args", ".", "seq_len", ",", "args", ".", "seq_srd", ",", "\n", "args", ".", "workers", ",", "only_eval", "=", "False", ")", "\n", "\n", "# create model", "\n", "cnn_model", "=", "models", ".", "create", "(", "args", ".", "arch1", ",", "num_features", "=", "args", ".", "features", ",", "dropout", "=", "args", ".", "dropout", ",", "numclasses", "=", "num_classes", ")", "\n", "siamese_model", "=", "models", ".", "create", "(", "args", ".", "arch2", ",", "input_num", "=", "args", ".", "features", ",", "output_num", "=", "512", ",", "class_num", "=", "2", ")", "\n", "siamese_model_uncorr", "=", "models", ".", "create", "(", "'siamese_video'", ",", "input_num", "=", "2048", ",", "output_num", "=", "512", ",", "class_num", "=", "2", ")", "\n", "\n", "cnn_model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "cnn_model", ")", ".", "to", "(", "device", ")", "\n", "siamese_model", "=", "siamese_model", ".", "to", "(", "device", ")", "\n", "siamese_model_uncorr", "=", "siamese_model_uncorr", ".", "to", "(", "device", ")", "\n", "\n", "# Loss function", "\n", "criterion_corr", "=", "OIMLoss", "(", "2048", ",", "num_classes", ",", "scalar", "=", "args", ".", "oim_scalar", ",", "momentum", "=", "args", ".", "oim_momentum", ")", "\n", "criterion_uncorr", "=", "OIMLoss", "(", "2048", ",", "num_classes", ",", "scalar", "=", "args", ".", "oim_scalar", ",", "momentum", "=", "args", ".", "oim_momentum", ")", "\n", "criterion_veri", "=", "PairLoss", "(", ")", "\n", "\n", "criterion_corr", ".", "to", "(", "device", ")", "\n", "criterion_uncorr", ".", "to", "(", "device", ")", "\n", "criterion_veri", ".", "to", "(", "device", ")", "\n", "\n", "# Optimizer", "\n", "base_param_ids", "=", "set", "(", "map", "(", "id", ",", "cnn_model", ".", "module", ".", "backbone", ".", "parameters", "(", ")", ")", ")", "\n", "new_params", "=", "[", "p", "for", "p", "in", "cnn_model", ".", "parameters", "(", ")", "if", "\n", "id", "(", "p", ")", "not", "in", "base_param_ids", "]", "\n", "\n", "param_groups", "=", "[", "\n", "{", "'params'", ":", "cnn_model", ".", "module", ".", "backbone", ".", "parameters", "(", ")", ",", "'lr_mult'", ":", "1", "}", ",", "\n", "{", "'params'", ":", "new_params", ",", "'lr_mult'", ":", "2", "}", ",", "\n", "{", "'params'", ":", "siamese_model", ".", "parameters", "(", ")", ",", "'lr_mult'", ":", "2", "}", ",", "\n", "{", "'params'", ":", "siamese_model_uncorr", ".", "parameters", "(", ")", ",", "'lr_mult'", ":", "2", "}", "\n", "]", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "param_groups", ",", "lr", "=", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "nesterov", "=", "True", ")", "\n", "\n", "def", "adjust_lr", "(", "epoch", ")", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "(", "0.1", "**", "(", "epoch", "//", "args", ".", "lr_step", ")", ")", "\n", "print", "(", "lr", ")", "\n", "for", "g", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "g", "[", "'lr'", "]", "=", "lr", "*", "g", ".", "get", "(", "'lr_mult'", ",", "1", ")", "\n", "\n", "# Evaluator  \u6d4b\u8bd5", "\n", "", "", "evaluator", "=", "ATTEvaluator", "(", "cnn_model", ",", "siamese_model", ",", "only_eval", "=", "False", ")", "\n", "best_top1", "=", "0", "\n", "if", "args", ".", "evaluate", "==", "1", ":", "\n", "        ", "load_best_checkpoint", "(", "cnn_model", ",", "siamese_model", ")", "\n", "top1", "=", "evaluator", ".", "evaluate", "(", "dataset", ".", "query", ",", "dataset", ".", "gallery", ",", "query_loader", ",", "gallery_loader", ",", "args", ".", "logs_dir", ",", "args", ".", "visual", ",", "args", ".", "rerank", ")", "\n", "print", "(", "'best rank-1 accuracy is'", ",", "top1", ")", "\n", "", "else", ":", "\n", "# Trainer  \u8bad\u7ec3\u5668,\u7c7b\u7684\u5b9e\u4f8b\u5316", "\n", "        ", "tensorboard_train_logdir", "=", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'train_log'", ")", "\n", "remove_repeat_tensorboard_files", "(", "tensorboard_train_logdir", ")", "\n", "\n", "trainer", "=", "SEQTrainer", "(", "cnn_model", ",", "siamese_model", ",", "siamese_model_uncorr", ",", "criterion_veri", ",", "criterion_corr", ",", "criterion_uncorr", ",", "\n", "tensorboard_train_logdir", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "            ", "adjust_lr", "(", "epoch", ")", "\n", "trainer", ".", "train", "(", "epoch", ",", "train_loader", ",", "optimizer", ")", "\n", "\n", "# \u6bcf\u8bad\u7ec33\u4e2aepoch\u8fdb\u884c\u4e00\u6b21\u8bc4\u4f30.", "\n", "if", "(", "epoch", "+", "1", ")", "%", "5", "==", "0", "or", "(", "epoch", "+", "1", ")", "==", "args", ".", "epochs", "or", "(", "(", "epoch", "+", "1", ")", ">", "30", "and", "(", "epoch", "+", "1", ")", "%", "3", "==", "0", ")", ":", "\n", "                ", "top1", "=", "evaluator", ".", "evaluate", "(", "dataset", ".", "query", ",", "dataset", ".", "gallery", ",", "query_loader", ",", "gallery_loader", ",", "args", ".", "logs_dir", ",", "args", ".", "visual", ",", "args", ".", "rerank", ")", "\n", "is_best", "=", "top1", ">", "best_top1", "\n", "if", "is_best", ":", "\n", "                    ", "best_top1", "=", "top1", "\n", "", "save_checkpoint", "(", "cnn_model", ",", "siamese_model", ",", "epoch", ",", "best_top1", ",", "is_best", ")", "\n", "del", "top1", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.None.test_all.save_checkpoint": [[27, 39], ["utils.serialization.save_cnn_checkpoint", "utils.serialization.save_siamese_checkpoint", "cnn_model.state_dict", "os.join", "siamese_model.state_dict", "os.join"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.save_cnn_checkpoint", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.save_siamese_checkpoint"], ["def", "save_checkpoint", "(", "cnn_model", ",", "siamese_model", ",", "epoch", ",", "best_top1", ",", "is_best", ")", ":", "\n", "    ", "save_cnn_checkpoint", "(", "{", "\n", "'state_dict'", ":", "cnn_model", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'best_top1'", ":", "best_top1", ",", "\n", "}", ",", "is_best", ",", "fpath", "=", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'cnn_checkpoint.pth.tar'", ")", ")", "\n", "\n", "save_siamese_checkpoint", "(", "{", "\n", "'state_dict'", ":", "siamese_model", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'best_top1'", ":", "best_top1", ",", "\n", "}", ",", "is_best", ",", "fpath", "=", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'siamese_checkpoint.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.None.test_all.load_best_checkpoint": [[41, 47], ["utils.serialization.load_checkpoint", "cnn_model.load_state_dict", "utils.serialization.load_checkpoint", "siamese_model.load_state_dict", "os.join", "os.join"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.load_checkpoint", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.load_checkpoint"], ["", "def", "load_best_checkpoint", "(", "cnn_model", ",", "siamese_model", ")", ":", "\n", "    ", "checkpoint0", "=", "load_checkpoint", "(", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'cnnmodel_best.pth.tar'", ")", ")", "\n", "cnn_model", ".", "load_state_dict", "(", "checkpoint0", "[", "'state_dict'", "]", ")", "\n", "\n", "checkpoint1", "=", "load_checkpoint", "(", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'siamesemodel_best.pth.tar'", ")", ")", "\n", "siamese_model", ".", "load_state_dict", "(", "checkpoint1", "[", "'state_dict'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.None.test_all.main": [[49, 93], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.device", "torch.device", "print", "reid.data.get_data", "reid.models.create", "reid.models.create", "torch.nn.DataParallel().to", "torch.nn.DataParallel().to", "siamese_model.to.to", "os.join", "utils.serialization.remove_repeat_tensorboard_files", "reid.evaluator.ATTEvaluator", "test_all.load_best_checkpoint", "reid.evaluator.ATTEvaluator.evaluate", "os.exists", "utils.logging.Logger", "os.exists", "utils.logging.Logger", "torch.cuda.is_available", "torch.cuda.is_available", "os.join", "os.join", "torch.nn.DataParallel", "torch.nn.DataParallel", "os.join", "os.join"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.data.dataloader.get_data", "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.__init__.create", "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.__init__.create", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.remove_repeat_tensorboard_files", "home.repos.pwc.inspect_result.flysnowtiger_GRL.None.test_all.load_best_checkpoint", "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.eva_functions.evaluate"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "# os.environ['CUDA_VISIBLE_DEVICES'] = '1'", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "# log file \u65e5\u5fd7\u6587\u4ef6  \u9632\u6b62\u91cd\u540d\u8986\u76d6", "\n", "run", "=", "0", "\n", "if", "args", ".", "evaluate", "==", "1", ":", "\n", "        ", "while", "osp", ".", "exists", "(", "\"%s\"", "%", "(", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'log_testall{}.txt'", ".", "format", "(", "run", ")", ")", ")", ")", ":", "\n", "            ", "run", "+=", "1", "\n", "\n", "", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'log_testall{}.txt'", ".", "format", "(", "run", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "while", "osp", ".", "exists", "(", "\"%s\"", "%", "(", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'log_train{}.txt'", ".", "format", "(", "run", ")", ")", ")", ")", ":", "\n", "            ", "run", "+=", "1", "\n", "\n", "", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'log_train{}.txt'", ".", "format", "(", "run", ")", ")", ")", "\n", "", "print", "(", "\"==========\\nArgs:{}\\n==========\"", ".", "format", "(", "args", ")", ")", "\n", "\n", "dataset", ",", "num_classes", ",", "train_loader", ",", "query_loader", ",", "gallery_loader", "=", "get_data", "(", "args", ".", "dataset", ",", "args", ".", "split", ",", "args", ".", "data_dir", ",", "\n", "args", ".", "batch_size", ",", "args", ".", "seq_len", ",", "args", ".", "seq_srd", ",", "\n", "args", ".", "workers", ",", "only_eval", "=", "True", ")", "\n", "\n", "cnn_model", "=", "models", ".", "create", "(", "args", ".", "arch1", ",", "num_features", "=", "args", ".", "features", ",", "dropout", "=", "args", ".", "dropout", ",", "numclasses", "=", "num_classes", ")", "\n", "\n", "# create Siamese model", "\n", "siamese_model", "=", "models", ".", "create", "(", "args", ".", "arch2", ",", "input_num", "=", "args", ".", "features", ",", "output_num", "=", "512", ",", "class_num", "=", "2", ")", "\n", "\n", "cnn_model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "cnn_model", ")", ".", "to", "(", "device", ")", "\n", "siamese_model", "=", "siamese_model", ".", "to", "(", "device", ")", "\n", "\n", "tensorboard_train_logdir", "=", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'train_log'", ")", "\n", "remove_repeat_tensorboard_files", "(", "tensorboard_train_logdir", ")", "\n", "# Evaluator  \u6d4b\u8bd5", "\n", "\n", "evaluator", "=", "ATTEvaluator", "(", "cnn_model", ",", "siamese_model", ",", "only_eval", "=", "True", ")", "\n", "\n", "load_best_checkpoint", "(", "cnn_model", ",", "siamese_model", ")", "\n", "top1", "=", "evaluator", ".", "evaluate", "(", "dataset", ".", "query", ",", "dataset", ".", "gallery", ",", "query_loader", ",", "gallery_loader", ",", "args", ".", "logs_dir1", ",", "args", ".", "visul", ",", "\n", "args", ".", "rerank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.None.cam_functions.visual_batch": [[21, 55], ["cam.squeeze.squeeze", "cam.squeeze.size", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "image.view.view", "utils.osutils.mkdir_if_missing", "range", "cam.squeeze.size", "plt.figure", "range", "plt.figure.savefig", "torch.stack", "torch.stack", "torch.stack", "cam.squeeze.size", "plt.subplot", "plt.subplot.axis", "plt.title", "plt.imshow", "plt.subplot", "plt.subplot.axis", "plt.title", "[].unsqueeze", "cam_ij.unsqueeze.unsqueeze", "visualize.visualize", "heatmap.squeeze().cpu().numpy().transpose.squeeze().cpu().numpy().transpose", "plt.imshow", "plt.subplot", "plt.subplot.axis", "plt.title", "raw_image.squeeze().cpu().numpy().transpose.squeeze().cpu().numpy().transpose", "plt.imshow", "image.view.size", "[].detach().cpu().numpy", "heatmap.squeeze().cpu().numpy().transpose.squeeze().cpu().numpy", "raw_image.squeeze().cpu().numpy().transpose.squeeze().cpu().numpy", "[].detach().cpu", "heatmap.squeeze().cpu().numpy().transpose.squeeze().cpu", "raw_image.squeeze().cpu().numpy().transpose.squeeze().cpu", "[].detach", "heatmap.squeeze().cpu().numpy().transpose.squeeze", "raw_image.squeeze().cpu().numpy().transpose.squeeze"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing", "home.repos.pwc.inspect_result.flysnowtiger_GRL.None.visualize.visualize"], ["def", "visual_batch", "(", "cam", ",", "image", ",", "k", ",", "save_dir", ",", "mode", ")", ":", "\n", "    ", "cam", "=", "cam", ".", "squeeze", "(", ")", "# b, t, 16, 8                            torch.Size([240, 16, 8])", "\n", "b", ",", "t", ",", "h", ",", "w", "=", "cam", ".", "size", "(", ")", "# b, t, 16, 8                            torch.Size([240, 16, 8])", "\n", "image", "=", "torch", ".", "stack", "(", "image", ",", "0", ")", ".", "contiguous", "(", ")", "# [bt, 1, 3, 256, 128] torch.Size([240, 1, 3, 256, 128])", "\n", "# cam = cam.view(8, 8, *cam.size()[1:])  # 8,8,16,8", "\n", "\n", "image", "=", "image", ".", "view", "(", "b", ",", "t", ",", "1", ",", "*", "image", ".", "size", "(", ")", "[", "-", "3", ":", "]", ")", "# b, t, 1, 3, 256, 128", "\n", "path", "=", "PATH", "+", "save_dir", "\n", "mkdir_if_missing", "(", "path", ")", "\n", "for", "i", "in", "range", "(", "cam", ".", "size", "(", "0", ")", ")", ":", "# b", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "15", ",", "15", ")", ")", "\n", "for", "j", "in", "range", "(", "cam", ".", "size", "(", "1", ")", ")", ":", "# t", "\n", "            ", "ax1", "=", "plt", ".", "subplot", "(", "3", ",", "8", ",", "j", "+", "1", ")", "\n", "ax1", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'cam'", ",", "fontsize", "=", "18", ")", "\n", "plt", ".", "imshow", "(", "cam", "[", "i", "]", "[", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "alpha", "=", "0.6", ",", "cmap", "=", "'jet'", ")", "\n", "\n", "ax3", "=", "plt", ".", "subplot", "(", "3", ",", "8", ",", "j", "+", "17", ")", "\n", "ax3", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'cam+img'", ",", "fontsize", "=", "18", ")", "\n", "cam_ij", "=", "cam", "[", "i", "]", "[", "j", "]", ".", "unsqueeze", "(", "0", ")", "\n", "cam_ij", "=", "cam_ij", ".", "unsqueeze", "(", "0", ")", "\n", "images_ij", "=", "image", "[", "i", "]", "[", "j", "]", "\n", "heatmap", ",", "raw_image", "=", "visualize", "(", "images_ij", ",", "cam_ij", ")", "\n", "heatmap", "=", "heatmap", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "plt", ".", "imshow", "(", "heatmap", ")", "\n", "\n", "ax4", "=", "plt", ".", "subplot", "(", "3", ",", "8", ",", "j", "+", "9", ")", "\n", "ax4", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'raw_image'", ",", "fontsize", "=", "18", ")", "\n", "raw_image", "=", "raw_image", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "plt", ".", "imshow", "(", "raw_image", ")", "\n", "# fig.tight_layout()", "\n", "", "fig", ".", "savefig", "(", "path", "+", "\"/iter_{}index_{}_{}.jpg\"", ".", "format", "(", "k", ",", "i", ",", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.None.cam_functions.visual_batch_eval": [[57, 91], ["torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "cam.view.view", "image.view.view", "utils.osutils.mkdir_if_missing", "range", "cam.view.size", "plt.figure", "range", "plt.figure.savefig", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "cam.view.size", "plt.subplot", "plt.subplot.axis", "plt.title", "plt.imshow", "plt.subplot", "plt.subplot.axis", "plt.title", "[].unsqueeze", "cam_ij.unsqueeze.unsqueeze", "visualize.visualize", "heatmap.squeeze().cpu().numpy().transpose.squeeze().cpu().numpy().transpose", "plt.imshow", "plt.subplot", "plt.subplot.axis", "plt.title", "raw_image.squeeze().cpu().numpy().transpose.squeeze().cpu().numpy().transpose", "plt.imshow", "[].detach().cpu().numpy", "heatmap.squeeze().cpu().numpy().transpose.squeeze().cpu().numpy", "raw_image.squeeze().cpu().numpy().transpose.squeeze().cpu().numpy", "[].detach().cpu", "heatmap.squeeze().cpu().numpy().transpose.squeeze().cpu", "raw_image.squeeze().cpu().numpy().transpose.squeeze().cpu", "[].detach", "heatmap.squeeze().cpu().numpy().transpose.squeeze", "raw_image.squeeze().cpu().numpy().transpose.squeeze"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing", "home.repos.pwc.inspect_result.flysnowtiger_GRL.None.visualize.visualize"], ["", "", "def", "visual_batch_eval", "(", "cam", ",", "image", ",", "length", ",", "k", ")", ":", "\n", "    ", "cam", "=", "torch", ".", "stack", "(", "cam", ",", "0", ")", ".", "contiguous", "(", ")", "# torch.Size([240, 16, 8])", "\n", "image", "=", "torch", ".", "stack", "(", "image", ",", "0", ")", ".", "contiguous", "(", ")", "# torch.Size([240, 1, 3, 256, 128])", "\n", "\n", "cam", "=", "cam", ".", "view", "(", "30", ",", "8", ",", "16", ",", "-", "1", ")", "# 8,8,16,8", "\n", "\n", "image", "=", "image", ".", "view", "(", "30", ",", "8", ",", "1", ",", "3", ",", "256", ",", "-", "1", ")", "\n", "path", "=", "PATH_EVAL", "+", "\"fenzhi{}\"", ".", "format", "(", "k", ")", "\n", "mkdir_if_missing", "(", "path", ")", "\n", "for", "i", "in", "range", "(", "cam", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "15", ",", "15", ")", ")", "\n", "for", "j", "in", "range", "(", "cam", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "ax1", "=", "plt", ".", "subplot", "(", "3", ",", "8", ",", "j", "+", "1", ")", "\n", "ax1", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'cam'", ",", "fontsize", "=", "18", ")", "\n", "plt", ".", "imshow", "(", "cam", "[", "i", "]", "[", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "alpha", "=", "0.6", ",", "cmap", "=", "'jet'", ")", "\n", "\n", "ax3", "=", "plt", ".", "subplot", "(", "3", ",", "8", ",", "j", "+", "17", ")", "\n", "ax3", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'cam+img'", ",", "fontsize", "=", "18", ")", "\n", "cam_ij", "=", "cam", "[", "i", "]", "[", "j", "]", ".", "unsqueeze", "(", "0", ")", "\n", "cam_ij", "=", "cam_ij", ".", "unsqueeze", "(", "0", ")", "\n", "images_ij", "=", "image", "[", "i", "]", "[", "j", "]", "\n", "heatmap", ",", "raw_image", "=", "visualize", "(", "images_ij", ",", "cam_ij", ")", "\n", "heatmap", "=", "heatmap", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "plt", ".", "imshow", "(", "heatmap", ")", "\n", "\n", "ax4", "=", "plt", ".", "subplot", "(", "3", ",", "8", ",", "j", "+", "9", ")", "\n", "ax4", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'raw_image'", ",", "fontsize", "=", "18", ")", "\n", "raw_image", "=", "raw_image", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "plt", ".", "imshow", "(", "raw_image", ")", "\n", "# fig.tight_layout()", "\n", "", "fig", ".", "savefig", "(", "PATH_EVAL", "+", "\"fenzhi{}/cambatch_{}.jpg\"", ".", "format", "(", "k", ",", "i", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.None.visualize.reverse_normalize": [[10, 15], ["None"], "function", ["None"], ["def", "reverse_normalize", "(", "x", ",", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ":", "\n", "    ", "x", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "x", "[", ":", ",", "0", ",", ":", ",", ":", "]", "*", "std", "[", "0", "]", "+", "mean", "[", "0", "]", "\n", "x", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "x", "[", ":", ",", "1", ",", ":", ",", ":", "]", "*", "std", "[", "1", "]", "+", "mean", "[", "1", "]", "\n", "x", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "x", "[", ":", ",", "2", ",", ":", ",", ":", "]", "*", "std", "[", "2", "]", "+", "mean", "[", "2", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.None.visualize.visualize": [[17, 42], ["torch.interpolate", "cam.detach().cpu.detach().cpu", "cv2.applyColorMap", "torch.from_numpy", "torch.from_numpy", "torch.cat.split", "torch.cat", "torch.cat", "result.div.div", "cam.detach().cpu.squeeze", "numpy.uint8", "torch.cat.transpose", "torch.cat.float", "img.cpu", "result.div.max", "img.cpu", "cam.detach().cpu.detach"], "function", ["None"], ["", "def", "visualize", "(", "img", ",", "cam", ")", ":", "\n", "    ", "\"\"\"\n    Synthesize an image with CAM to make a result image.\n    Args:\n        img: (Tensor) shape => (1, 3, H, W)\n        cam: (Tensor) shape => (1, 1, H', W')\n    Return:\n        synthesized image (Tensor): shape =>(1, 3, H, W)\n    \"\"\"", "\n", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "img", ".", "shape", "\n", "cam", "=", "F", ".", "interpolate", "(", "cam", ",", "size", "=", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "# torch.Size([1, 1, 256, 128])", "\n", "cam", "=", "255", "*", "cam", ".", "squeeze", "(", ")", "# torch.Size([256, 128])", "\n", "cam", "=", "cam", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "cam", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "# <class 'tuple'>: (256, 128, 3)", "\n", "heatmap", "=", "torch", ".", "from_numpy", "(", "heatmap", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "# torch.Size([3, 256, 128])", "\n", "heatmap", "=", "heatmap", ".", "float", "(", ")", "/", "255", "# torch.Size([3, 256, 128])", "\n", "b", ",", "g", ",", "r", "=", "heatmap", ".", "split", "(", "1", ")", "\n", "heatmap", "=", "torch", ".", "cat", "(", "[", "r", ",", "g", ",", "b", "]", ")", "# torch.Size([3, 256, 128])", "\n", "\n", "result", "=", "heatmap", "+", "img", ".", "cpu", "(", ")", "\n", "# result = heatmap", "\n", "result", "=", "result", ".", "div", "(", "result", ".", "max", "(", ")", ")", "\n", "\n", "return", "result", ",", "img", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.None.visualize.visualize2": [[44, 67], ["torch.interpolate", "cam.detach().cpu.detach().cpu", "cv2.applyColorMap", "torch.from_numpy", "torch.from_numpy", "torch.cat.split", "torch.cat", "torch.cat", "result.div.div", "cam.detach().cpu.squeeze", "numpy.uint8", "torch.cat.transpose", "torch.cat.float", "result.div.max", "cam.detach().cpu.detach"], "function", ["None"], ["", "def", "visualize2", "(", "cam", ")", ":", "\n", "    ", "\"\"\"\n    Synthesize an image with CAM to make a result image.\n    Args:\n        cam: (Tensor) shape => (1, 1, H', W')\n    Return:\n        synthesized image (Tensor): shape =>(1, 3, H, W)\n    \"\"\"", "\n", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "cam", ".", "shape", "\n", "cam", "=", "F", ".", "interpolate", "(", "cam", ",", "size", "=", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "cam", "=", "255", "*", "cam", ".", "squeeze", "(", ")", "\n", "cam", "=", "cam", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "cam", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "heatmap", "=", "torch", ".", "from_numpy", "(", "heatmap", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "heatmap", "=", "heatmap", ".", "float", "(", ")", "/", "255", "\n", "b", ",", "g", ",", "r", "=", "heatmap", ".", "split", "(", "1", ")", "\n", "heatmap", "=", "torch", ".", "cat", "(", "[", "r", ",", "g", ",", "b", "]", ")", "\n", "\n", "result", "=", "heatmap", "\n", "result", "=", "result", ".", "div", "(", "result", ".", "max", "(", ")", ")", "\n", "\n", "return", "result", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.logging.Logger.__init__": [[9, 15], ["osutils.mkdir_if_missing", "open", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing"], ["    ", "def", "__init__", "(", "self", ",", "fpath", "=", "None", ")", ":", "\n", "        ", "self", ".", "console", "=", "sys", ".", "stdout", "\n", "self", ".", "file", "=", "None", "\n", "if", "fpath", "is", "not", "None", ":", "\n", "            ", "mkdir_if_missing", "(", "os", ".", "path", ".", "dirname", "(", "fpath", ")", ")", "\n", "self", ".", "file", "=", "open", "(", "fpath", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.logging.Logger.__del__": [[16, 18], ["logging.Logger.close"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.logging.Logger.close"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.logging.Logger.__enter__": [[19, 21], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.logging.Logger.__exit__": [[22, 24], ["logging.Logger.close"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.logging.Logger.close"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.logging.Logger.write": [[25, 29], ["logging.Logger.console.write", "logging.Logger.file.write"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.logging.Logger.write", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.logging.Logger.write"], ["", "def", "write", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "console", ".", "write", "(", "msg", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.logging.Logger.flush": [[30, 35], ["logging.Logger.console.flush", "logging.Logger.file.flush", "os.fsync", "logging.Logger.file.fileno"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.logging.Logger.flush", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.logging.Logger.flush"], ["", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "flush", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "flush", "(", ")", "\n", "os", ".", "fsync", "(", "self", ".", "file", ".", "fileno", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.logging.Logger.close": [[36, 40], ["logging.Logger.console.close", "logging.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.logging.Logger.close", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.logging.Logger.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "close", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing": [[6, 12], ["os.makedirs"], "function", ["None"], ["def", "mkdir_if_missing", "(", "dir_path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.meters.AverageMeter.__init__": [[7, 12], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.meters.AverageMeter.reset": [[13, 18], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.meters.AverageMeter.update": [[19, 24], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.read_json": [[13, 17], ["open", "json.load"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.data.datasequence.Datasequence.load"], ["def", "read_json", "(", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "obj", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.write_json": [[19, 23], ["osutils.mkdir_if_missing", "os.dirname", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing"], ["", "def", "write_json", "(", "obj", ",", "fpath", ")", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "with", "open", "(", "fpath", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "obj", ",", "f", ",", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "': '", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.save_cnn_checkpoint": [[25, 30], ["osutils.mkdir_if_missing", "torch.save", "os.dirname", "shutil.copy", "os.join", "os.dirname"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing"], ["", "", "def", "save_cnn_checkpoint", "(", "state", ",", "is_best", ",", "fpath", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "fpath", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copy", "(", "fpath", ",", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "fpath", ")", ",", "'cnnmodel_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.save_att_checkpoint": [[32, 37], ["osutils.mkdir_if_missing", "torch.save", "os.dirname", "shutil.copy", "os.join", "os.dirname"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing"], ["", "", "def", "save_att_checkpoint", "(", "state", ",", "is_best", ",", "fpath", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "fpath", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copy", "(", "fpath", ",", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "fpath", ")", ",", "'attmodel_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.save_siamese_checkpoint": [[39, 44], ["osutils.mkdir_if_missing", "torch.save", "os.dirname", "shutil.copy", "os.join", "os.dirname"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing"], ["", "", "def", "save_siamese_checkpoint", "(", "state", ",", "is_best", ",", "fpath", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "fpath", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copy", "(", "fpath", ",", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "fpath", ")", ",", "'siamesemodel_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.save_cls_checkpoint": [[46, 51], ["osutils.mkdir_if_missing", "torch.save", "os.dirname", "shutil.copy", "os.join", "os.dirname"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing"], ["", "", "def", "save_cls_checkpoint", "(", "state", ",", "is_best", ",", "fpath", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "fpath", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copy", "(", "fpath", ",", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "fpath", ")", ",", "'clsmodel_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.load_checkpoint": [[53, 60], ["os.isfile", "torch.load", "print", "ValueError"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.data.datasequence.Datasequence.load"], ["", "", "def", "load_checkpoint", "(", "fpath", ")", ":", "\n", "    ", "if", "osp", ".", "isfile", "(", "fpath", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "fpath", ")", "\n", "print", "(", "\"=> Loaded checkpoint '{}'\"", ".", "format", "(", "fpath", ")", ")", "\n", "return", "checkpoint", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"=> No checkpoint found at '{}'\"", ".", "format", "(", "fpath", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.copy_state_dict": [[62, 83], ["model.state_dict", "set", "state_dict.items", "isinstance", "tgt_state[].copy_", "set.add", "set", "len", "print", "name.startswith", "param.size", "tgt_state[].size", "print", "model.state_dict.keys", "param.size", "tgt_state[].size", "len"], "function", ["None"], ["", "", "def", "copy_state_dict", "(", "state_dict", ",", "model", ",", "strip", "=", "None", ")", ":", "\n", "    ", "tgt_state", "=", "model", ".", "state_dict", "(", ")", "\n", "copied_names", "=", "set", "(", ")", "\n", "for", "name", ",", "param", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "strip", "is", "not", "None", "and", "name", ".", "startswith", "(", "strip", ")", ":", "\n", "            ", "name", "=", "name", "[", "len", "(", "strip", ")", ":", "]", "\n", "", "if", "name", "not", "in", "tgt_state", ":", "\n", "            ", "continue", "\n", "", "if", "isinstance", "(", "param", ",", "Parameter", ")", ":", "\n", "            ", "param", "=", "param", ".", "data", "\n", "", "if", "param", ".", "size", "(", ")", "!=", "tgt_state", "[", "name", "]", ".", "size", "(", ")", ":", "\n", "            ", "print", "(", "'mismatch:'", ",", "name", ",", "param", ".", "size", "(", ")", ",", "tgt_state", "[", "name", "]", ".", "size", "(", ")", ")", "\n", "continue", "\n", "", "tgt_state", "[", "name", "]", ".", "copy_", "(", "param", ")", "\n", "copied_names", ".", "add", "(", "name", ")", "\n", "\n", "", "missing", "=", "set", "(", "tgt_state", ".", "keys", "(", ")", ")", "-", "copied_names", "\n", "if", "len", "(", "missing", ")", ">", "0", ":", "\n", "        ", "print", "(", "\"missing keys in state_dict:\"", ",", "missing", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.remove_repeat_tensorboard_files": [[85, 92], ["os.exists", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.join", "os.remove", "os.remove"], "function", ["None"], ["", "def", "remove_repeat_tensorboard_files", "(", "path", ")", ":", "\n", "    ", "if", "osp", ".", "exists", "(", "path", ")", ":", "# 1./home/zpy/Desktop/SCAN/logs/test_log \u6587\u4ef6\u5939\u5b58\u5728", "\n", "        ", "if", "os", ".", "listdir", "(", "path", ")", ":", "# \u8fd9\u4e2a\u6587\u4ef6\u5939\u4e2d\u5b58\u5728\u6587\u4ef6", "\n", "            ", "files", "=", "os", ".", "listdir", "(", "path", ")", "\n", "for", "file", "in", "files", ":", "\n", "                ", "file_path", "=", "osp", ".", "join", "(", "path", ",", "file", ")", "# \u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84", "\n", "os", ".", "remove", "(", "file_path", ")", "# \u5220\u9664\u6587\u4ef6", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.__init__.to_numpy": [[4, 11], ["torch.is_tensor", "tensor.cpu().numpy", "ValueError", "tensor.cpu", "type", "type"], "function", ["None"], ["def", "to_numpy", "(", "tensor", ")", ":", "\n", "    ", "if", "torch", ".", "is_tensor", "(", "tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "type", "(", "tensor", ")", ".", "__module__", "!=", "'numpy'", ":", "\n", "        ", "raise", "ValueError", "(", "\"Cannot convert {} to numpy array\"", "\n", ".", "format", "(", "type", "(", "tensor", ")", ")", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.__init__.to_torch": [[13, 20], ["torch.from_numpy", "type", "torch.is_tensor", "ValueError", "type"], "function", ["None"], ["", "def", "to_torch", "(", "ndarray", ")", ":", "\n", "    ", "if", "type", "(", "ndarray", ")", ".", "__module__", "==", "'numpy'", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "ndarray", ")", "\n", "", "elif", "not", "torch", ".", "is_tensor", "(", "ndarray", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Cannot convert {} to torch tensor\"", "\n", ".", "format", "(", "type", "(", "ndarray", ")", ")", ")", "\n", "", "return", "ndarray", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.ilidsvidsequence.iLIDSVIDSEQUENCE.__init__": [[22, 47], ["reid.data.datasequence.Datasequence.__init__", "ilidsvidsequence.iLIDSVIDSEQUENCE.load", "ilidsvidsequence.iLIDSVIDSEQUENCE._pluckseq_cam", "ilidsvidsequence.infostruct", "ilidsvidsequence.iLIDSVIDSEQUENCE._pluckseq_cam", "ilidsvidsequence.infostruct", "ilidsvidsequence.iLIDSVIDSEQUENCE.download", "ilidsvidsequence.iLIDSVIDSEQUENCE._check_integrity", "ilidsvidsequence.iLIDSVIDSEQUENCE.imgextract"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.datasequence.Datasequence.load", "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.prid2011sequence.PRID2011SEQUENCE._pluckseq_cam", "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.prid2011sequence.PRID2011SEQUENCE._pluckseq_cam", "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.prid2011sequence.PRID2011SEQUENCE.download", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.datasequence.Datasequence._check_integrity", "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.prid2011sequence.PRID2011SEQUENCE.imgextract"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "split_id", "=", "0", ",", "seq_len", "=", "12", ",", "seq_srd", "=", "6", ",", "num_val", "=", "1", ",", "download", "=", "False", ")", ":", "\n", "        ", "super", "(", "iLIDSVIDSEQUENCE", ",", "self", ")", ".", "__init__", "(", "root", ",", "split_id", "=", "split_id", ")", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "self", ".", "imgextract", "(", ")", "\n", "\n", "", "self", ".", "load", "(", "seq_len", ",", "seq_srd", ",", "num_val", ")", "\n", "\n", "self", ".", "query", ",", "query_pid", ",", "query_camid", ",", "query_num", "=", "self", ".", "_pluckseq_cam", "(", "self", ".", "identities", ",", "self", ".", "split", "[", "'query'", "]", ",", "\n", "seq_len", ",", "seq_srd", ",", "0", ")", "\n", "self", ".", "queryinfo", "=", "infostruct", "(", ")", "\n", "self", ".", "queryinfo", ".", "pid", "=", "query_pid", "\n", "self", ".", "queryinfo", ".", "camid", "=", "query_camid", "\n", "self", ".", "queryinfo", ".", "tranum", "=", "query_num", "\n", "\n", "self", ".", "gallery", ",", "gallery_pid", ",", "gallery_camid", ",", "gallery_num", "=", "self", ".", "_pluckseq_cam", "(", "self", ".", "identities", ",", "\n", "self", ".", "split", "[", "'gallery'", "]", ",", "\n", "seq_len", ",", "seq_srd", ",", "1", ")", "\n", "self", ".", "galleryinfo", "=", "infostruct", "(", ")", "\n", "self", ".", "galleryinfo", ".", "pid", "=", "gallery_pid", "\n", "self", ".", "galleryinfo", ".", "camid", "=", "gallery_camid", "\n", "self", ".", "galleryinfo", ".", "tranum", "=", "gallery_num", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.ilidsvidsequence.iLIDSVIDSEQUENCE.other_dir": [[48, 51], ["os.join", "os.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "other_dir", "(", "self", ")", ":", "\n", "        ", "return", "osp", ".", "join", "(", "self", ".", "root", ",", "'others'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.ilidsvidsequence.iLIDSVIDSEQUENCE.download": [[52, 69], ["ilidsvidsequence.iLIDSVIDSEQUENCE._check_integrity", "os.join", "os.join", "utils.osutils.mkdir_if_missing", "os.join", "os.join", "os.join", "os.join", "print", "os.isfile", "os.isfile", "os.isfile", "os.isfile", "print", "print", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.data.datasequence.Datasequence._check_integrity", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing"], ["", "def", "download", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "print", "(", "\"Files already downloaded and verified\"", ")", "\n", "return", "\n", "\n", "", "raw_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'raw'", ")", "\n", "mkdir_if_missing", "(", "raw_dir", ")", "\n", "\n", "fpath1", "=", "osp", ".", "join", "(", "raw_dir", ",", "datasetname", "+", "'.tar'", ")", "\n", "fpath2", "=", "osp", ".", "join", "(", "raw_dir", ",", "flowname", "+", "'.tar'", ")", "\n", "\n", "if", "osp", ".", "isfile", "(", "fpath1", ")", "and", "osp", ".", "isfile", "(", "fpath2", ")", ":", "\n", "            ", "print", "(", "\"Using the download file:\"", "+", "fpath1", "+", "\" \"", "+", "fpath2", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Please firstly download the files\"", ")", "\n", "raise", "RuntimeError", "(", "\"Downloaded file missing!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.ilidsvidsequence.iLIDSVIDSEQUENCE.imgextract": [[70, 195], ["os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.isdir", "os.isdir", "print", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "tarfile.open", "utils.osutils.mkdir_if_missing", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "tarfile.open.extractall", "tarfile.open.close", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.isdir", "os.isdir", "print", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "tarfile.open", "utils.osutils.mkdir_if_missing", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "tarfile.open.extractall", "tarfile.open.close", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.join", "os.join", "utils.osutils.mkdir_if_missing", "os.join", "os.join", "utils.osutils.mkdir_if_missing", "os.join", "os.join", "utils.osutils.mkdir_if_missing", "os.join", "os.join", "utils.osutils.mkdir_if_missing", "sorted", "sorted", "range", "shutil.rmtree", "range", "shutil.rmtree", "utils.serialization.write_json", "os.join", "os.join", "scipy.loadmat", "len", "range", "utils.serialization.write_json", "glob.glob.glob", "glob.glob.glob", "os.basename", "os.basename", "os.basename.split", "int", "int", "[].append", "shutil.copy", "len", "range", "os.basename", "os.basename", "os.basename.split", "int", "int", "[].append", "shutil.copy", "len", "range", "os.join", "os.join", "sorted", "sorted", "splits.append", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "range", "range", "len", "os.join", "os.join", "range", "len", "os.join", "os.join", "range", "range", "range", "len", "shutil.copy", "len", "shutil.copy", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.logging.Logger.close", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.logging.Logger.close", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.write_json", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.write_json"], ["", "", "def", "imgextract", "(", "self", ")", ":", "\n", "\n", "        ", "raw_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'raw'", ")", "\n", "exdir1", "=", "osp", ".", "join", "(", "raw_dir", ",", "datasetname", ")", "\n", "exdir2", "=", "osp", ".", "join", "(", "raw_dir", ",", "flowname", ")", "\n", "fpath1", "=", "osp", ".", "join", "(", "raw_dir", ",", "datasetname", "+", "'.tar'", ")", "\n", "fpath2", "=", "osp", ".", "join", "(", "raw_dir", ",", "flowname", "+", "'.tar'", ")", "\n", "\n", "if", "not", "osp", ".", "isdir", "(", "exdir1", ")", ":", "\n", "            ", "print", "(", "\"Extracting tar file\"", ")", "\n", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "tar", "=", "tarfile", ".", "open", "(", "fpath1", ")", "\n", "mkdir_if_missing", "(", "exdir1", ")", "\n", "os", ".", "chdir", "(", "exdir1", ")", "\n", "tar", ".", "extractall", "(", ")", "\n", "tar", ".", "close", "(", ")", "\n", "os", ".", "chdir", "(", "cwd", ")", "\n", "\n", "", "if", "not", "osp", ".", "isdir", "(", "exdir2", ")", ":", "\n", "            ", "print", "(", "\"Extracting tar file\"", ")", "\n", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "tar", "=", "tarfile", ".", "open", "(", "fpath2", ")", "\n", "mkdir_if_missing", "(", "exdir2", ")", "\n", "os", ".", "chdir", "(", "exdir2", ")", "\n", "tar", ".", "extractall", "(", ")", "\n", "tar", ".", "close", "(", ")", "\n", "os", ".", "chdir", "(", "cwd", ")", "\n", "\n", "# reorganzing the dataset", "\n", "# Format", "\n", "\n", "temp_images_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'temp_images'", ")", "\n", "mkdir_if_missing", "(", "temp_images_dir", ")", "\n", "\n", "temp_others_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'temp_others'", ")", "\n", "mkdir_if_missing", "(", "temp_others_dir", ")", "\n", "\n", "images_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'images'", ")", "\n", "mkdir_if_missing", "(", "images_dir", ")", "\n", "\n", "others_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'others'", ")", "\n", "mkdir_if_missing", "(", "others_dir", ")", "\n", "\n", "fpaths1", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "exdir1", ",", "'i-LIDS-VID/sequences'", ",", "'*/*/*.png'", ")", ")", ")", "\n", "fpaths2", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "exdir2", ",", "flowname", ",", "'*/*/*.png'", ")", ")", ")", "\n", "\n", "identities_imgraw", "=", "[", "[", "[", "]", "for", "_", "in", "range", "(", "2", ")", "]", "for", "_", "in", "range", "(", "319", ")", "]", "\n", "identities_otherraw", "=", "[", "[", "[", "]", "for", "_", "in", "range", "(", "2", ")", "]", "for", "_", "in", "range", "(", "319", ")", "]", "\n", "\n", "# image information", "\n", "for", "fpath", "in", "fpaths1", ":", "\n", "                ", "fname", "=", "osp", ".", "basename", "(", "fpath", ")", "\n", "fname_list", "=", "fname", ".", "split", "(", "'_'", ")", "\n", "cam_name", "=", "fname_list", "[", "0", "]", "\n", "pid_name", "=", "fname_list", "[", "1", "]", "\n", "cam", "=", "int", "(", "cam_name", "[", "-", "1", "]", ")", "\n", "pid", "=", "int", "(", "pid_name", "[", "-", "3", ":", "]", ")", "\n", "temp_fname", "=", "(", "'{:08d}_{:02d}_{:04d}.png'", "\n", ".", "format", "(", "pid", ",", "cam", ",", "len", "(", "identities_imgraw", "[", "pid", "-", "1", "]", "[", "cam", "-", "1", "]", ")", ")", ")", "\n", "identities_imgraw", "[", "pid", "-", "1", "]", "[", "cam", "-", "1", "]", ".", "append", "(", "temp_fname", ")", "\n", "shutil", ".", "copy", "(", "fpath", ",", "osp", ".", "join", "(", "temp_images_dir", ",", "temp_fname", ")", ")", "\n", "\n", "", "identities_temp", "=", "[", "x", "for", "x", "in", "identities_imgraw", "if", "x", "!=", "[", "[", "]", ",", "[", "]", "]", "]", "\n", "identities_images", "=", "identities_temp", "\n", "\n", "for", "pid", "in", "range", "(", "len", "(", "identities_temp", ")", ")", ":", "\n", "                ", "for", "cam", "in", "range", "(", "2", ")", ":", "\n", "                    ", "for", "img", "in", "range", "(", "len", "(", "identities_images", "[", "pid", "]", "[", "cam", "]", ")", ")", ":", "\n", "                        ", "temp_fname", "=", "identities_temp", "[", "pid", "]", "[", "cam", "]", "[", "img", "]", "\n", "fname", "=", "(", "'{:08d}_{:02d}_{:04d}.png'", "\n", ".", "format", "(", "pid", ",", "cam", ",", "img", ")", ")", "\n", "identities_images", "[", "pid", "]", "[", "cam", "]", "[", "img", "]", "=", "fname", "\n", "shutil", ".", "copy", "(", "osp", ".", "join", "(", "temp_images_dir", ",", "temp_fname", ")", ",", "osp", ".", "join", "(", "images_dir", ",", "fname", ")", ")", "\n", "\n", "", "", "", "shutil", ".", "rmtree", "(", "temp_images_dir", ")", "\n", "\n", "# flow information", "\n", "\n", "for", "fpath", "in", "fpaths2", ":", "\n", "                ", "fname", "=", "osp", ".", "basename", "(", "fpath", ")", "\n", "fname_list", "=", "fname", ".", "split", "(", "'_'", ")", "\n", "cam_name", "=", "fname_list", "[", "0", "]", "\n", "pid_name", "=", "fname_list", "[", "1", "]", "\n", "cam", "=", "int", "(", "cam_name", "[", "-", "1", "]", ")", "\n", "pid", "=", "int", "(", "pid_name", "[", "-", "3", ":", "]", ")", "\n", "temp_fname", "=", "(", "'{:08d}_{:02d}_{:04d}.png'", "\n", ".", "format", "(", "pid", ",", "cam", ",", "len", "(", "identities_otherraw", "[", "pid", "-", "1", "]", "[", "cam", "-", "1", "]", ")", ")", ")", "\n", "identities_otherraw", "[", "pid", "-", "1", "]", "[", "cam", "-", "1", "]", ".", "append", "(", "temp_fname", ")", "\n", "shutil", ".", "copy", "(", "fpath", ",", "osp", ".", "join", "(", "temp_others_dir", ",", "temp_fname", ")", ")", "\n", "\n", "", "identities_temp", "=", "[", "x", "for", "x", "in", "identities_otherraw", "if", "x", "!=", "[", "[", "]", ",", "[", "]", "]", "]", "\n", "identities_others", "=", "identities_temp", "\n", "\n", "for", "pid", "in", "range", "(", "len", "(", "identities_temp", ")", ")", ":", "\n", "                ", "for", "cam", "in", "range", "(", "2", ")", ":", "\n", "                    ", "for", "img", "in", "range", "(", "len", "(", "identities_others", "[", "pid", "]", "[", "cam", "]", ")", ")", ":", "\n", "                        ", "temp_fname", "=", "identities_temp", "[", "pid", "]", "[", "cam", "]", "[", "img", "]", "\n", "fname", "=", "(", "'{:08d}_{:02d}_{:04d}.png'", "\n", ".", "format", "(", "pid", ",", "cam", ",", "img", ")", ")", "\n", "identities_others", "[", "pid", "]", "[", "cam", "]", "[", "img", "]", "=", "fname", "\n", "shutil", ".", "copy", "(", "osp", ".", "join", "(", "temp_others_dir", ",", "temp_fname", ")", ",", "osp", ".", "join", "(", "others_dir", ",", "fname", ")", ")", "\n", "\n", "", "", "", "shutil", ".", "rmtree", "(", "temp_others_dir", ")", "\n", "\n", "meta", "=", "{", "'name'", ":", "'iLIDS-sequence'", ",", "'shot'", ":", "'sequence'", ",", "'num_cameras'", ":", "2", ",", "\n", "'identities'", ":", "identities_images", "}", "\n", "\n", "write_json", "(", "meta", ",", "osp", ".", "join", "(", "self", ".", "root", ",", "'meta.json'", ")", ")", "\n", "\n", "# Consider fixed training and testing split", "\n", "splitmat_name", "=", "osp", ".", "join", "(", "exdir1", ",", "'train-test people splits'", ",", "'train_test_splits_ilidsvid.mat'", ")", "\n", "data", "=", "sio", ".", "loadmat", "(", "splitmat_name", ")", "\n", "person_list", "=", "data", "[", "'ls_set'", "]", "\n", "num", "=", "len", "(", "identities_images", ")", "\n", "splits", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                ", "pids", "=", "(", "person_list", "[", "i", "]", "-", "1", ")", ".", "tolist", "(", ")", "\n", "trainval_pids", "=", "sorted", "(", "pids", "[", ":", "num", "//", "2", "]", ")", "\n", "test_pids", "=", "sorted", "(", "pids", "[", "num", "//", "2", ":", "]", ")", "\n", "split", "=", "{", "'trainval'", ":", "trainval_pids", ",", "\n", "'query'", ":", "test_pids", ",", "\n", "'gallery'", ":", "test_pids", "}", "\n", "splits", ".", "append", "(", "split", ")", "\n", "", "write_json", "(", "splits", ",", "osp", ".", "join", "(", "self", ".", "root", ",", "'splits.json'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.ilidsvidsequence.iLIDSVIDSEQUENCE._pluckseq_cam": [[196, 215], ["enumerate", "len", "per_id.append", "cam_id.append", "tra_num.append", "ret.append", "len", "range"], "methods", ["None"], ["", "", "def", "_pluckseq_cam", "(", "self", ",", "identities", ",", "indices", ",", "seq_len", ",", "seq_str", ",", "camid", ")", ":", "\n", "        ", "ret", "=", "[", "]", "\n", "per_id", "=", "[", "]", "\n", "cam_id", "=", "[", "]", "\n", "tra_num", "=", "[", "]", "\n", "\n", "for", "index", ",", "pid", "in", "enumerate", "(", "indices", ")", ":", "\n", "            ", "pid_images", "=", "identities", "[", "pid", "]", "\n", "cam_images", "=", "pid_images", "[", "camid", "]", "\n", "seqall", "=", "len", "(", "cam_images", ")", "\n", "seq_inds", "=", "[", "(", "start_ind", ",", "start_ind", "+", "seq_len", ")", "for", "start_ind", "in", "range", "(", "0", ",", "seqall", "-", "seq_len", ",", "seq_str", ")", "]", "\n", "if", "not", "seq_inds", ":", "\n", "                ", "seq_inds", "=", "[", "(", "0", ",", "seqall", ")", "]", "\n", "", "for", "seq_ind", "in", "seq_inds", ":", "\n", "                ", "ret", ".", "append", "(", "(", "seq_ind", "[", "0", "]", ",", "seq_ind", "[", "1", "]", ",", "pid", ",", "index", ",", "camid", ")", ")", "\n", "", "per_id", ".", "append", "(", "pid", ")", "\n", "cam_id", ".", "append", "(", "camid", ")", "\n", "tra_num", ".", "append", "(", "len", "(", "seq_inds", ")", ")", "\n", "", "return", "ret", ",", "per_id", ",", "cam_id", ",", "tra_num", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.mars.Mars.__init__": [[25, 92], ["mars.Mars._check_before_run", "mars.Mars._get_names", "mars.Mars._get_names", "[].squeeze", "mars.Mars._process_data", "mars.Mars._process_gallery_data", "mars.Mars._process_gallery_data", "numpy.min", "numpy.max", "numpy.mean", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "mars.infostruct", "mars.infostruct", "scipy.io.loadmat", "scipy.io.loadmat", "range", "scipy.io.loadmat"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._check_before_run", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._get_names", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._get_names", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._process_data", "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.mars.Mars._process_gallery_data", "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.mars.Mars._process_gallery_data"], ["def", "__init__", "(", "self", ",", "min_seq_len", "=", "0", ")", ":", "\n", "\n", "        ", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "train_names", "=", "self", ".", "_get_names", "(", "self", ".", "train_name_path", ")", "# <class 'list'>: <Len: 509914> '0001C1T0001F001.jpg'", "\n", "test_names", "=", "self", ".", "_get_names", "(", "self", ".", "test_name_path", ")", "# <class 'list'>: <Len: 681089> '00-1C1T0001F001.jpg'", "\n", "track_train", "=", "loadmat", "(", "self", ".", "track_train_info_path", ")", "[", "\n", "'track_train_info'", "]", "# numpy.ndarray (8298, 4) [[1 16 1 1],[17 95 1 1] ...]", "\n", "track_test", "=", "loadmat", "(", "self", ".", "track_test_info_path", ")", "[", "\n", "'track_test_info'", "]", "# numpy.ndarray (12180, 4)  [[1 24 -1 1][25 34 -1 1]]", "\n", "query_IDX", "=", "loadmat", "(", "self", ".", "query_IDX_path", ")", "[", "'query_IDX'", "]", ".", "squeeze", "(", ")", "# numpy.ndarray (1980,)  [4130, 4138...]", "\n", "query_IDX", "-=", "1", "# index from 0 [4129,4137....]", "\n", "track_query", "=", "track_test", "[", "query_IDX", ",", ":", "]", "# \u5bf9\u5e94\u884c\u7684\u5c0f\u6bb5\u89c6\u9891\u4fe1\u606f,[[171610 171649 2 1],[172214 172313 2 2]...]", "\n", "gallery_IDX", "=", "[", "i", "for", "i", "in", "range", "(", "track_test", ".", "shape", "[", "0", "]", ")", "if", "i", "not", "in", "query_IDX", "]", "# gallery = 10200", "\n", "# gallery_IDX = [i for i in range(track_test.shape[0])]  # gallery = 12180", "\n", "track_gallery", "=", "track_test", "[", "gallery_IDX", ",", ":", "]", "# <class 'tuple'>: (12180, 4)      [[1 24 -1 1][25 34 -1 1]...]", "\n", "\n", "train", ",", "num_train_tracklets", ",", "num_train_pids", ",", "num_train_imgs", "=", "self", ".", "_process_data", "(", "train_names", ",", "track_train", ",", "home_dir", "=", "'bbox_train'", ",", "relabel", "=", "True", ",", "\n", "min_seq_len", "=", "min_seq_len", ",", "json_path", "=", "self", ".", "split_train_json_path", ")", "\n", "\n", "query", ",", "num_query_tracklets", ",", "num_query_pids", ",", "num_query_imgs", ",", "query_pid", ",", "query_camid", "=", "self", ".", "_process_gallery_data", "(", "test_names", ",", "track_query", ",", "home_dir", "=", "'bbox_test'", ",", "relabel", "=", "False", ",", "\n", "min_seq_len", "=", "min_seq_len", ",", "json_path", "=", "self", ".", "split_query_json_path", ",", ")", "\n", "\n", "gallery", ",", "num_gallery_tracklets", ",", "num_gallery_pids", ",", "num_gallery_imgs", ",", "gallery_pid", ",", "gallery_camid", "=", "self", ".", "_process_gallery_data", "(", "test_names", ",", "track_gallery", ",", "home_dir", "=", "'bbox_test'", ",", "relabel", "=", "False", ",", "\n", "min_seq_len", "=", "min_seq_len", ",", "json_path", "=", "self", ".", "split_gallery_json_path", ")", "\n", "\n", "num_imgs_per_tracklet", "=", "num_train_imgs", "+", "num_query_imgs", "+", "num_gallery_imgs", "\n", "min_num", "=", "np", ".", "min", "(", "num_imgs_per_tracklet", ")", "\n", "max_num", "=", "np", ".", "max", "(", "num_imgs_per_tracklet", ")", "\n", "avg_num", "=", "np", ".", "mean", "(", "num_imgs_per_tracklet", ")", "\n", "\n", "num_total_pids", "=", "num_train_pids", "+", "num_query_pids", "\n", "num_total_tracklets", "=", "num_train_tracklets", "+", "num_query_tracklets", "+", "num_gallery_tracklets", "\n", "\n", "print", "(", "\"=> MARS loaded\"", ")", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # tracklets\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_tracklets", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_tracklets", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_tracklets", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  total    | {:5d} | {:8d}\"", ".", "format", "(", "num_total_pids", ",", "num_total_tracklets", ")", ")", "\n", "print", "(", "\"  number of images per tracklet: {} ~ {}, average {:.1f}\"", ".", "format", "(", "min_num", ",", "max_num", ",", "avg_num", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", "=", "num_train_pids", "\n", "self", ".", "num_query_pids", "=", "num_query_pids", "\n", "self", ".", "num_gallery_pids", "=", "num_gallery_pids", "\n", "\n", "self", ".", "queryinfo", "=", "infostruct", "(", ")", "\n", "self", ".", "queryinfo", ".", "pid", "=", "query_pid", "\n", "self", ".", "queryinfo", ".", "camid", "=", "query_camid", "\n", "self", ".", "queryinfo", ".", "tranum", "=", "num_query_imgs", "\n", "\n", "self", ".", "galleryinfo", "=", "infostruct", "(", ")", "\n", "self", ".", "galleryinfo", ".", "pid", "=", "gallery_pid", "\n", "self", ".", "galleryinfo", ".", "camid", "=", "gallery_camid", "\n", "self", ".", "galleryinfo", ".", "tranum", "=", "num_gallery_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.mars.Mars._check_before_run": [[93, 107], ["os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "root", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "root", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_name_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_name_path", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "test_name_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "test_name_path", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "track_train_info_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "track_train_info_path", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "track_test_info_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "track_test_info_path", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "query_IDX_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "query_IDX_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.mars.Mars._get_names": [[108, 115], ["open", "line.rstrip", "names.append"], "methods", ["None"], ["", "", "def", "_get_names", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "new_line", "=", "line", ".", "rstrip", "(", ")", "\n", "names", ".", "append", "(", "new_line", ")", "\n", "", "", "return", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.mars.Mars._process_data": [[116, 173], ["os.exists", "print", "list", "len", "range", "len", "print", "utils.serialization.write_json", "print", "utils.serialization.read_json", "set", "meta_data[].tolist", "len", "len", "os.join", "len", "tuple", "tracklets.append", "num_imgs_per_tracklet.append", "enumerate", "set", "set", "len", "int", "int"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.write_json", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.read_json"], ["", "def", "_process_data", "(", "self", ",", "names", ",", "meta_data", ",", "home_dir", "=", "None", ",", "relabel", "=", "False", ",", "min_seq_len", "=", "0", ",", "json_path", "=", "''", ")", ":", "\n", "        ", "if", "osp", ".", "exists", "(", "json_path", ")", ":", "\n", "            ", "print", "(", "\"=> {} generated before, awesome!\"", ".", "format", "(", "json_path", ")", ")", "\n", "split", "=", "read_json", "(", "json_path", ")", "\n", "return", "split", "[", "'tracklets'", "]", ",", "split", "[", "'num_tracklets'", "]", ",", "split", "[", "'num_pids'", "]", ",", "split", "[", "'num_imgs_per_tracklet'", "]", "\n", "", "print", "(", "\"=> Automatically generating split (might take a while for the first time, have a coffe)\"", ")", "\n", "assert", "home_dir", "in", "[", "'bbox_train'", ",", "'bbox_test'", "]", "\n", "num_tracklets", "=", "meta_data", ".", "shape", "[", "0", "]", "# 8298  TODO: \u8981\u4e0d\u8981\u589e\u52a0?", "\n", "pid_list", "=", "list", "(", "set", "(", "meta_data", "[", ":", ",", "2", "]", ".", "tolist", "(", ")", ")", ")", "# pid = 625 => [1 3 5 7 9...]", "\n", "num_pids", "=", "len", "(", "pid_list", ")", "\n", "\n", "if", "relabel", ":", "\n", "            ", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_list", ")", "}", "# {1:0,3:1,5:2,...}", "\n", "", "tracklets", "=", "[", "]", "\n", "num_imgs_per_tracklet", "=", "[", "]", "\n", "\n", "for", "tracklet_idx", "in", "range", "(", "num_tracklets", ")", ":", "\n", "            ", "data", "=", "meta_data", "[", "tracklet_idx", ",", "...", "]", "# [1 16 1 1]", "\n", "start_index", ",", "end_index", ",", "pid", ",", "camid", "=", "data", "\n", "if", "pid", "==", "-", "1", ":", "\n", "                ", "continue", "# junk images are just ignored", "\n", "", "assert", "1", "<=", "camid", "<=", "6", "\n", "if", "relabel", ":", "\n", "                ", "pid", "=", "pid2label", "[", "pid", "]", "# pid = 0", "\n", "", "camid", "-=", "1", "\n", "# index starts from 0", "\n", "img_names", "=", "names", "[", "start_index", "-", "1", ":", "end_index", "]", "\n", "# <class 'list'>:['0001C1T0001F001.jpg'.. '0001C1T0001F016.jpg']", "\n", "\n", "# make sure image names correspond to the same person", "\n", "pnames", "=", "[", "img_name", "[", ":", "4", "]", "for", "img_name", "in", "img_names", "]", "# pnames = ['0001','0001'...]", "\n", "assert", "len", "(", "set", "(", "pnames", ")", ")", "==", "1", ",", "\"Error: a single tracklet contains different person images\"", "\n", "\n", "# make sure all images are captured under the same camera", "\n", "camnames", "=", "[", "img_name", "[", "5", "]", "for", "img_name", "in", "img_names", "]", "# camnames = ['1','1'...]", "\n", "assert", "len", "(", "set", "(", "camnames", ")", ")", "==", "1", ",", "\"Error: images are captured under different cameras!\"", "\n", "\n", "# append image names with directory information", "\n", "# '/media/ying/0BDD17830BDD1783/ReIdDataset/Mars/bbox_train/0001/0001C1T0001F001.jpg'", "\n", "img_paths", "=", "[", "osp", ".", "join", "(", "self", ".", "root", ",", "home_dir", ",", "img_name", "[", ":", "4", "]", ",", "img_name", ")", "for", "img_name", "in", "img_names", "]", "# list<16>", "\n", "if", "len", "(", "img_paths", ")", ">=", "min_seq_len", ":", "\n", "                ", "img_paths", "=", "tuple", "(", "img_paths", ")", "\n", "tracklets", ".", "append", "(", "(", "img_paths", ",", "int", "(", "pid", ")", ",", "int", "(", "camid", ")", ")", ")", "# (('.jpg','.jpg','\u6bcf\u5f20\u56fe\u7247\u7684\u8def\u5f84'), 0'\u884c\u4ebaid', 0'camid' )", "\n", "num_imgs_per_tracklet", ".", "append", "(", "len", "(", "img_paths", ")", ")", "# [16,79,15...'\u6bcf\u4e2a\u5c0f\u6bb5\u89c6\u9891\u5305\u542b\u7684\u56fe\u7247\u5e27\u6570\u76ee']", "\n", "\n", "", "", "num_tracklets", "=", "len", "(", "tracklets", ")", "# 8298", "\n", "\n", "print", "(", "\"Saving split to {}\"", ".", "format", "(", "json_path", ")", ")", "\n", "split_dict", "=", "{", "\n", "'tracklets'", ":", "tracklets", ",", "\n", "'num_tracklets'", ":", "num_tracklets", ",", "\n", "'num_pids'", ":", "num_pids", ",", "\n", "'num_imgs_per_tracklet'", ":", "num_imgs_per_tracklet", ",", "\n", "}", "\n", "write_json", "(", "split_dict", ",", "json_path", ")", "\n", "\n", "return", "tracklets", ",", "num_tracklets", ",", "num_pids", ",", "num_imgs_per_tracklet", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.mars.Mars._process_gallery_data": [[174, 235], ["os.exists", "list", "len", "range", "len", "print", "utils.serialization.write_json", "print", "utils.serialization.read_json", "set", "gallery_pid.append", "gallery_camid.append", "meta_data[].tolist", "len", "len", "os.join", "len", "tuple", "tracklets.append", "num_imgs_per_tracklet.append", "int", "int", "enumerate", "set", "set", "len", "int", "int"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.write_json", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.read_json"], ["", "def", "_process_gallery_data", "(", "self", ",", "names", ",", "meta_data", ",", "home_dir", "=", "None", ",", "relabel", "=", "False", ",", "min_seq_len", "=", "0", ",", "json_path", "=", "''", ")", ":", "\n", "        ", "if", "osp", ".", "exists", "(", "json_path", ")", ":", "\n", "            ", "print", "(", "\"=> {} generated before, awesome!\"", ".", "format", "(", "json_path", ")", ")", "\n", "split", "=", "read_json", "(", "json_path", ")", "\n", "return", "split", "[", "'tracklets'", "]", ",", "split", "[", "'num_tracklets'", "]", ",", "split", "[", "'num_pids'", "]", ",", "split", "[", "'num_imgs_per_tracklet'", "]", ",", "split", "[", "'pids'", "]", ",", "split", "[", "'camid'", "]", "\n", "\n", "", "assert", "home_dir", "in", "[", "'bbox_train'", ",", "'bbox_test'", "]", "\n", "num_tracklets", "=", "meta_data", ".", "shape", "[", "0", "]", "# 8298  TODO: \u8981\u4e0d\u8981\u589e\u52a0?", "\n", "pid_list", "=", "list", "(", "set", "(", "meta_data", "[", ":", ",", "2", "]", ".", "tolist", "(", ")", ")", ")", "# pid = 625 => [1 3 5 7 9...]", "\n", "num_pids", "=", "len", "(", "pid_list", ")", "# 626  622", "\n", "\n", "if", "relabel", ":", "\n", "            ", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_list", ")", "}", "# {1:0,3:1,5:2,...}", "\n", "", "tracklets", "=", "[", "]", "\n", "num_imgs_per_tracklet", "=", "[", "]", "\n", "gallery_pid", "=", "[", "]", "\n", "gallery_camid", "=", "[", "]", "\n", "\n", "for", "tracklet_idx", "in", "range", "(", "num_tracklets", ")", ":", "\n", "            ", "data", "=", "meta_data", "[", "tracklet_idx", ",", "...", "]", "# [1 16 1 1]", "\n", "start_index", ",", "end_index", ",", "pid", ",", "camid", "=", "data", "\n", "\n", "if", "pid", "==", "-", "1", ":", "\n", "                ", "continue", "# junk images are just ignored", "\n", "", "assert", "1", "<=", "camid", "<=", "6", "\n", "if", "relabel", ":", "\n", "                ", "pid", "=", "pid2label", "[", "pid", "]", "# pid = 0", "\n", "", "camid", "-=", "1", "\n", "# index starts from 0", "\n", "img_names", "=", "names", "[", "start_index", "-", "1", ":", "end_index", "]", "\n", "# <class 'list'>:['0001C1T0001F001.jpg'.. '0001C1T0001F016.jpg']", "\n", "\n", "# make sure image names correspond to the same person", "\n", "pnames", "=", "[", "img_name", "[", ":", "4", "]", "for", "img_name", "in", "img_names", "]", "# pnames = ['0001','0001'...]", "\n", "assert", "len", "(", "set", "(", "pnames", ")", ")", "==", "1", ",", "\"Error: a single tracklet contains different person images\"", "\n", "\n", "# make sure all images are captured under the same camera", "\n", "camnames", "=", "[", "img_name", "[", "5", "]", "for", "img_name", "in", "img_names", "]", "# camnames = ['1','1'...]", "\n", "assert", "len", "(", "set", "(", "camnames", ")", ")", "==", "1", ",", "\"Error: images are captured under different cameras!\"", "\n", "\n", "# append image names with directory information", "\n", "# '/media/ying/0BDD17830BDD1783/ReIdDataset/Mars/bbox_train/0001/0001C1T0001F001.jpg'", "\n", "img_paths", "=", "[", "osp", ".", "join", "(", "self", ".", "root", ",", "home_dir", ",", "img_name", "[", ":", "4", "]", ",", "img_name", ")", "for", "img_name", "in", "img_names", "]", "# list<16>", "\n", "if", "len", "(", "img_paths", ")", ">=", "min_seq_len", ":", "\n", "                ", "img_paths", "=", "tuple", "(", "img_paths", ")", "\n", "tracklets", ".", "append", "(", "(", "img_paths", ",", "int", "(", "pid", ")", ",", "int", "(", "camid", ")", ")", ")", "# (('.jpg','.jpg','\u6bcf\u5f20\u56fe\u7247\u7684\u8def\u5f84'), 0'\u884c\u4ebaid', 0'camid' )", "\n", "num_imgs_per_tracklet", ".", "append", "(", "len", "(", "img_paths", ")", ")", "# [16,79,15...'\u6bcf\u4e2a\u5c0f\u6bb5\u89c6\u9891\u5305\u542b\u7684\u56fe\u7247\u5e27\u6570\u76ee']", "\n", "", "gallery_pid", ".", "append", "(", "int", "(", "pid", ")", ")", "\n", "gallery_camid", ".", "append", "(", "int", "(", "camid", ")", ")", "\n", "", "num_tracklets", "=", "len", "(", "tracklets", ")", "# 8298", "\n", "print", "(", "\"Saving split to {}\"", ".", "format", "(", "json_path", ")", ")", "\n", "split_dict", "=", "{", "\n", "'tracklets'", ":", "tracklets", ",", "\n", "'num_tracklets'", ":", "num_tracklets", ",", "\n", "'num_pids'", ":", "num_pids", ",", "\n", "'num_imgs_per_tracklet'", ":", "num_imgs_per_tracklet", ",", "\n", "'pids'", ":", "gallery_pid", ",", "\n", "'camid'", ":", "gallery_camid", ",", "\n", "}", "\n", "write_json", "(", "split_dict", ",", "json_path", ")", "\n", "return", "tracklets", ",", "num_tracklets", ",", "num_pids", ",", "num_imgs_per_tracklet", ",", "gallery_pid", ",", "gallery_camid", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.duke.DukeMTMCVidReID.__init__": [[32, 89], ["os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "duke.DukeMTMCVidReID._check_before_run", "print", "duke.DukeMTMCVidReID._process_dir", "duke.DukeMTMCVidReID._process_dir_dense", "duke.DukeMTMCVidReID._process_dir", "duke.DukeMTMCVidReID._process_dir", "print", "numpy.min", "numpy.max", "numpy.mean", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._check_before_run", "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.duke.DukeMTMCVidReID._process_dir", "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.duke.DukeMTMCVidReID._process_dir_dense", "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.duke.DukeMTMCVidReID._process_dir", "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.duke.DukeMTMCVidReID._process_dir"], ["def", "__init__", "(", "self", ",", "min_seq_len", "=", "0", ",", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "dataset_dir", "=", "self", ".", "root", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'train'", ")", "\n", "self", ".", "query_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'query'", ")", "\n", "self", ".", "gallery_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'gallery'", ")", "\n", "self", ".", "split_train_json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'split_train.json'", ")", "\n", "self", ".", "split_train_dense_json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'split_train_dense.json'", ")", "\n", "self", ".", "split_query_json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'split_query.json'", ")", "\n", "self", ".", "split_gallery_json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'split_gallery.json'", ")", "\n", "\n", "self", ".", "min_seq_len", "=", "min_seq_len", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "print", "(", "\n", "\"Note: if root path is changed, the previously generated json files need to be re-generated (so delete them first)\"", ")", "\n", "\n", "train", ",", "num_train_tracklets", ",", "num_train_pids", ",", "num_imgs_train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "self", ".", "split_train_json_path", ",", "relabel", "=", "True", ")", "\n", "train_dense", ",", "num_train_tracklets_dense", ",", "num_train_pids_dense", ",", "num_imgs_train_dense", "=", "self", ".", "_process_dir_dense", "(", "self", ".", "train_dir", ",", "self", ".", "split_train_dense_json_path", ",", "relabel", "=", "True", ",", "sampling_step", "=", "32", ")", "\n", "query", ",", "num_query_tracklets", ",", "num_query_pids", ",", "num_imgs_query", "=", "self", ".", "_process_dir", "(", "self", ".", "query_dir", ",", "self", ".", "split_query_json_path", ",", "relabel", "=", "False", ")", "\n", "gallery", ",", "num_gallery_tracklets", ",", "num_gallery_pids", ",", "num_imgs_gallery", "=", "self", ".", "_process_dir", "(", "self", ".", "gallery_dir", ",", "self", ".", "split_gallery_json_path", ",", "relabel", "=", "False", ")", "\n", "\n", "print", "(", "\"the number of tracklets under dense sampling for train set: {}\"", ".", "format", "(", "num_train_tracklets_dense", ")", ")", "\n", "\n", "num_imgs_per_tracklet", "=", "num_imgs_train", "+", "num_imgs_query", "+", "num_imgs_gallery", "\n", "min_num", "=", "np", ".", "min", "(", "num_imgs_per_tracklet", ")", "\n", "max_num", "=", "np", ".", "max", "(", "num_imgs_per_tracklet", ")", "\n", "avg_num", "=", "np", ".", "mean", "(", "num_imgs_per_tracklet", ")", "\n", "\n", "num_total_pids", "=", "num_train_pids", "+", "num_query_pids", "\n", "num_total_tracklets", "=", "num_train_tracklets", "+", "num_query_tracklets", "+", "num_gallery_tracklets", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> DukeMTMC-VideoReID loaded\"", ")", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  subset         | # ids | # tracklets\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  train          | {:5d} | {:8d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_tracklets", ")", ")", "\n", "print", "(", "\"  train_dense    | {:5d} | {:8d}\"", ".", "format", "(", "num_train_pids_dense", ",", "num_train_tracklets_dense", ")", ")", "\n", "print", "(", "\"  query          | {:5d} | {:8d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_tracklets", ")", ")", "\n", "print", "(", "\"  gallery        | {:5d} | {:8d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_tracklets", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  total          | {:5d} | {:8d}\"", ".", "format", "(", "num_total_pids", ",", "num_total_tracklets", ")", ")", "\n", "print", "(", "\"  number of images per tracklet: {} ~ {}, average {:.1f}\"", ".", "format", "(", "min_num", ",", "max_num", ",", "avg_num", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "train_dense", "=", "train_dense", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", "=", "num_train_pids", "\n", "self", ".", "num_query_pids", "=", "num_query_pids", "\n", "self", ".", "num_gallery_pids", "=", "num_gallery_pids", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.duke.DukeMTMCVidReID._check_before_run": [[90, 100], ["os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "query_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "query_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "gallery_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "gallery_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.duke.DukeMTMCVidReID._process_dir": [[101, 163], ["os.exists", "os.exists", "print", "glob.glob", "print", "set", "len", "len", "print", "utils.serialization.write_json", "print", "utils.serialization.read_json", "os.join", "os.join", "int", "set.add", "int", "glob.glob", "len", "os.basename", "os.basename", "enumerate", "os.basename", "os.basename", "os.join", "os.join", "glob.glob", "len", "num_imgs_per_tracklet.append", "range", "os.basename", "os.basename", "tuple", "tracklets.append", "os.join", "os.join", "glob.glob", "tuple.append", "os.basename.find", "str().zfill", "os.join", "os.join", "len", "print", "int", "int", "str"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.write_json", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.read_json"], ["", "", "def", "_process_dir", "(", "self", ",", "dir_path", ",", "json_path", ",", "relabel", ")", ":", "\n", "        ", "if", "osp", ".", "exists", "(", "json_path", ")", ":", "\n", "            ", "print", "(", "\"=> {} generated before, awesome!\"", ".", "format", "(", "json_path", ")", ")", "\n", "split", "=", "read_json", "(", "json_path", ")", "\n", "return", "split", "[", "'tracklets'", "]", ",", "split", "[", "'num_tracklets'", "]", ",", "split", "[", "'num_pids'", "]", ",", "split", "[", "'num_imgs_per_tracklet'", "]", "\n", "\n", "", "print", "(", "\"=> Automatically generating split (might take a while for the first time, have a coffe)\"", ")", "\n", "pdirs", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dir_path", ",", "'*'", ")", ")", "# avoid .DS_Store  \u5f97\u5230\u6570\u636e\u96c6\u4e2d\u7684\u6240\u6709\u6587\u4ef6\u5939", "\n", "print", "(", "\"Processing {} with {} person identities\"", ".", "format", "(", "dir_path", ",", "len", "(", "pdirs", ")", ")", ")", "\n", "\n", "pid_container", "=", "set", "(", ")", "# \u5f97\u5230\u6587\u4ef6\u5939\u7684\u540d\u5b57\uff0c\u5373\u884c\u4eba\u7684id\uff0c\u96c6\u5408\u7684\u5f62\u5f0f\uff0c\u4e00\u5171\u6709702\u4e2a\u6587\u4ef6\u5939\uff0c\u5373702\u4e2a\u884c\u4ebaid", "\n", "for", "pdir", "in", "pdirs", ":", "\n", "            ", "pid", "=", "int", "(", "osp", ".", "basename", "(", "pdir", ")", ")", "\n", "pid_container", ".", "add", "(", "pid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "# relabel\u3002\u3002", "\n", "\n", "tracklets", "=", "[", "]", "\n", "num_imgs_per_tracklet", "=", "[", "]", "# \u5b58\u653e\u6bcf\u4e2atracklet\u7684\u56fe\u7247\u6570\u76ee\u7684\u5217\u8868", "\n", "for", "pdir", "in", "pdirs", ":", "# \u904d\u5386\u6bcf\u4e2a\u5b50\u6587\u4ef6\u5939\uff0c\u5f97\u5230\u5176\u4e2d\u7684\u56fe\u7247\uff0c\u5373\u6bcf\u4e2aid\u5bf9\u5e94\u7684\u89c6\u9891\u56fe\u7247\u96c6", "\n", "            ", "pid", "=", "int", "(", "osp", ".", "basename", "(", "pdir", ")", ")", "# pid=817.\u3002", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "# relabel\u3002\u3002", "\n", "tdirs", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "pdir", ",", "'*'", ")", ")", "# \u5f97\u5230\u6587\u4ef6\u5939\u4e2d\u7684\u6240\u6709tracklets\uff0c\u4e00\u4e2aid\u6709\u591a\u4e2a\u89c6\u9891\u5e8f\u5217", "\n", "for", "tdir", "in", "tdirs", ":", "\n", "                ", "raw_img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "tdir", ",", "'*.jpg'", ")", ")", "# \u5f97\u5230\u6bcf\u4e2atracklet\u4e2d\u56fe\u7247\u7684\u7edd\u5bf9\u8def\u5f84\uff0c\u4e71\u5e8f", "\n", "num_imgs", "=", "len", "(", "raw_img_paths", ")", "# 162 tracklet\u7684\u957f\u5ea6=\u56fe\u7247\u7684\u6570\u76ee", "\n", "\n", "if", "num_imgs", "<", "self", ".", "min_seq_len", ":", "\n", "                    ", "continue", "\n", "\n", "", "num_imgs_per_tracklet", ".", "append", "(", "num_imgs", ")", "\n", "img_paths", "=", "[", "]", "\n", "for", "img_idx", "in", "range", "(", "num_imgs", ")", ":", "# \u5728\u8fd9\u91cc\uff0c\u5c06\u6bcf\u4e2atracklet\u4e2d\u56fe\u7247\u7684\u4e71\u5e8f\u7d22\u5f15\uff0c\u8fdb\u884c\u6392\u5e8f\u3002", "\n", "# some tracklet starts from 0002 instead of 0001", "\n", "                    ", "img_idx_name", "=", "'F'", "+", "str", "(", "img_idx", "+", "1", ")", ".", "zfill", "(", "4", ")", "# F0001", "\n", "res", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "tdir", ",", "'*'", "+", "img_idx_name", "+", "'*.jpg'", ")", ")", "# \u627e\u5230\u5bf9\u5e94img\u7d22\u5f15\u7684\u56fe\u7247\u7684\u7edd\u5bf9\u8def\u5f84", "\n", "if", "len", "(", "res", ")", "==", "0", ":", "# \u6709\u4e9b\u5e27\u7684\u7d22\u5f15\u53ef\u80fd\u4e0d\u5b58\u5728\uff0c\u8fd9\u65f6\u9700\u8981\u8df3\u8fc7", "\n", "                        ", "print", "(", "\"Warn: index name {} in {} is missing, jump to next\"", ".", "format", "(", "img_idx_name", ",", "tdir", ")", ")", "\n", "continue", "\n", "", "img_paths", ".", "append", "(", "res", "[", "0", "]", ")", "\n", "", "img_name", "=", "osp", ".", "basename", "(", "img_paths", "[", "0", "]", ")", "# \u56fe\u7247\u7684\u683c\u5f0f\uff1a'0817_C1_F0001_X207382.jpg'", "\n", "if", "img_name", ".", "find", "(", "'_'", ")", "==", "-", "1", ":", "\n", "# old naming format: 0001C6F0099X30823.jpg", "\n", "                    ", "camid", "=", "int", "(", "img_name", "[", "5", "]", ")", "-", "1", "\n", "", "else", ":", "\n", "# new naming format: 0001_C6_F0099_X30823.jpg", "\n", "                    ", "camid", "=", "int", "(", "img_name", "[", "6", "]", ")", "-", "1", "\n", "", "img_paths", "=", "tuple", "(", "img_paths", ")", "\n", "tracklets", ".", "append", "(", "(", "img_paths", ",", "pid", ",", "camid", ")", ")", "# \u5f97\u5230\u6bcf\u4e2atracklet\u7684\u6240\u6709\u56fe\u7247\u7684\u7edd\u5bf9\u8def\u5f84\uff0c\u884c\u4ebaid\uff0ccamid =\u300b \u548cMars\u6570\u636e\u96c6\u7c7b\u4f3c", "\n", "\n", "", "", "num_pids", "=", "len", "(", "pid_container", ")", "# \u8bad\u7ec3\u96c6\u4e2d\u7684id\u6570\u76ee", "\n", "num_tracklets", "=", "len", "(", "tracklets", ")", "\n", "\n", "print", "(", "\"Saving split to {}\"", ".", "format", "(", "json_path", ")", ")", "\n", "split_dict", "=", "{", "\n", "'tracklets'", ":", "tracklets", ",", "\n", "'num_tracklets'", ":", "num_tracklets", ",", "\n", "'num_pids'", ":", "num_pids", ",", "\n", "'num_imgs_per_tracklet'", ":", "num_imgs_per_tracklet", ",", "\n", "}", "\n", "write_json", "(", "split_dict", ",", "json_path", ")", "\n", "\n", "return", "tracklets", ",", "num_tracklets", ",", "num_pids", ",", "num_imgs_per_tracklet", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.duke.DukeMTMCVidReID._process_dir_dense": [[164, 236], ["os.exists", "os.exists", "print", "glob.glob", "print", "set", "len", "len", "print", "utils.serialization.write_json", "print", "utils.serialization.read_json", "os.join", "os.join", "int", "set.add", "int", "glob.glob", "len", "os.basename", "os.basename", "enumerate", "os.basename", "os.basename", "os.join", "os.join", "glob.glob", "len", "num_imgs_per_tracklet.append", "range", "os.basename", "os.basename", "tuple", "os.join", "os.join", "glob.glob", "tuple.append", "os.basename.find", "len", "tracklets.append", "range", "str().zfill", "os.join", "os.join", "len", "print", "int", "int", "tracklets.append", "tracklets.append", "str"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.write_json", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.read_json"], ["", "def", "_process_dir_dense", "(", "self", ",", "dir_path", ",", "json_path", ",", "relabel", ",", "sampling_step", "=", "32", ")", ":", "\n", "        ", "if", "osp", ".", "exists", "(", "json_path", ")", ":", "\n", "            ", "print", "(", "\"=> {} generated before, awesome!\"", ".", "format", "(", "json_path", ")", ")", "\n", "split", "=", "read_json", "(", "json_path", ")", "\n", "return", "split", "[", "'tracklets'", "]", ",", "split", "[", "'num_tracklets'", "]", ",", "split", "[", "'num_pids'", "]", ",", "split", "[", "'num_imgs_per_tracklet'", "]", "\n", "\n", "", "print", "(", "\"=> Automatically generating split (might take a while for the first time, have a coffe)\"", ")", "\n", "pdirs", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dir_path", ",", "'*'", ")", ")", "# avoid .DS_Store", "\n", "print", "(", "\"Processing {} with {} person identities\"", ".", "format", "(", "dir_path", ",", "len", "(", "pdirs", ")", ")", ")", "\n", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "pdir", "in", "pdirs", ":", "\n", "            ", "pid", "=", "int", "(", "osp", ".", "basename", "(", "pdir", ")", ")", "\n", "pid_container", ".", "add", "(", "pid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "\n", "\n", "tracklets", "=", "[", "]", "\n", "num_imgs_per_tracklet", "=", "[", "]", "\n", "for", "pdir", "in", "pdirs", ":", "\n", "            ", "pid", "=", "int", "(", "osp", ".", "basename", "(", "pdir", ")", ")", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "tdirs", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "pdir", ",", "'*'", ")", ")", "\n", "for", "tdir", "in", "tdirs", ":", "\n", "                ", "raw_img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "tdir", ",", "'*.jpg'", ")", ")", "\n", "num_imgs", "=", "len", "(", "raw_img_paths", ")", "\n", "\n", "if", "num_imgs", "<", "self", ".", "min_seq_len", ":", "\n", "                    ", "continue", "\n", "\n", "", "num_imgs_per_tracklet", ".", "append", "(", "num_imgs", ")", "\n", "img_paths", "=", "[", "]", "\n", "for", "img_idx", "in", "range", "(", "num_imgs", ")", ":", "\n", "# some tracklet starts from 0002 instead of 0001", "\n", "                    ", "img_idx_name", "=", "'F'", "+", "str", "(", "img_idx", "+", "1", ")", ".", "zfill", "(", "4", ")", "\n", "res", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "tdir", ",", "'*'", "+", "img_idx_name", "+", "'*.jpg'", ")", ")", "\n", "if", "len", "(", "res", ")", "==", "0", ":", "\n", "                        ", "print", "(", "\"Warn: index name {} in {} is missing, jump to next\"", ".", "format", "(", "img_idx_name", ",", "tdir", ")", ")", "\n", "continue", "\n", "", "img_paths", ".", "append", "(", "res", "[", "0", "]", ")", "\n", "", "img_name", "=", "osp", ".", "basename", "(", "img_paths", "[", "0", "]", ")", "\n", "if", "img_name", ".", "find", "(", "'_'", ")", "==", "-", "1", ":", "\n", "# old naming format: 0001C6F0099X30823.jpg", "\n", "                    ", "camid", "=", "int", "(", "img_name", "[", "5", "]", ")", "-", "1", "\n", "", "else", ":", "\n", "# new naming format: 0001_C6_F0099_X30823.jpg", "\n", "                    ", "camid", "=", "int", "(", "img_name", "[", "6", "]", ")", "-", "1", "\n", "", "img_paths", "=", "tuple", "(", "img_paths", ")", "\n", "\n", "# dense sampling", "\n", "num_sampling", "=", "len", "(", "img_paths", ")", "//", "sampling_step", "\n", "if", "num_sampling", "==", "0", ":", "\n", "                    ", "tracklets", ".", "append", "(", "(", "img_paths", ",", "pid", ",", "camid", ")", ")", "\n", "", "else", ":", "\n", "                    ", "for", "idx", "in", "range", "(", "num_sampling", ")", ":", "\n", "                        ", "if", "idx", "==", "num_sampling", "-", "1", ":", "\n", "                            ", "tracklets", ".", "append", "(", "(", "img_paths", "[", "idx", "*", "sampling_step", ":", "]", ",", "pid", ",", "camid", ")", ")", "\n", "", "else", ":", "\n", "                            ", "tracklets", ".", "append", "(", "(", "img_paths", "[", "idx", "*", "sampling_step", ":", "(", "idx", "+", "1", ")", "*", "sampling_step", "]", ",", "pid", ",", "camid", ")", ")", "\n", "\n", "", "", "", "", "", "num_pids", "=", "len", "(", "pid_container", ")", "\n", "num_tracklets", "=", "len", "(", "tracklets", ")", "\n", "\n", "print", "(", "\"Saving split to {}\"", ".", "format", "(", "json_path", ")", ")", "\n", "split_dict", "=", "{", "\n", "'tracklets'", ":", "tracklets", ",", "\n", "'num_tracklets'", ":", "num_tracklets", ",", "\n", "'num_pids'", ":", "num_pids", ",", "\n", "'num_imgs_per_tracklet'", ":", "num_imgs_per_tracklet", ",", "\n", "}", "\n", "write_json", "(", "split_dict", ",", "json_path", ")", "\n", "\n", "return", "tracklets", ",", "num_tracklets", ",", "num_pids", ",", "num_imgs_per_tracklet", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.__init__.get_sequence": [[8, 19], ["KeyError"], "function", ["None"], ["        ", "raise", "ValueError", "(", "\"Cannot convert {} to numpy array\"", "\n", ".", "format", "(", "type", "(", "tensor", ")", ")", ")", "\n", "", "return", "tensor", "\n", "\n", "\n", "", "def", "to_torch", "(", "ndarray", ")", ":", "\n", "    ", "if", "type", "(", "ndarray", ")", ".", "__module__", "==", "'numpy'", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "ndarray", ")", "\n", "", "elif", "not", "torch", ".", "is_tensor", "(", "ndarray", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Cannot convert {} to torch tensor\"", "\n", ".", "format", "(", "type", "(", "ndarray", ")", ")", ")", "\n", "", "return", "ndarray", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.prid2011sequence.PRID2011SEQUENCE.__init__": [[22, 47], ["reid.data.datasequence.Datasequence.__init__", "prid2011sequence.PRID2011SEQUENCE.load", "prid2011sequence.PRID2011SEQUENCE._pluckseq_cam", "prid2011sequence.infostruct", "prid2011sequence.PRID2011SEQUENCE._pluckseq_cam", "prid2011sequence.infostruct", "prid2011sequence.PRID2011SEQUENCE.download", "prid2011sequence.PRID2011SEQUENCE._check_integrity", "prid2011sequence.PRID2011SEQUENCE.imgextract"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.datasequence.Datasequence.load", "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.prid2011sequence.PRID2011SEQUENCE._pluckseq_cam", "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.prid2011sequence.PRID2011SEQUENCE._pluckseq_cam", "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.prid2011sequence.PRID2011SEQUENCE.download", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.datasequence.Datasequence._check_integrity", "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.prid2011sequence.PRID2011SEQUENCE.imgextract"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "split_id", "=", "0", ",", "seq_len", "=", "12", ",", "seq_srd", "=", "6", ",", "num_val", "=", "1", ",", "download", "=", "False", ")", ":", "\n", "        ", "super", "(", "PRID2011SEQUENCE", ",", "self", ")", ".", "__init__", "(", "root", ",", "split_id", "=", "split_id", ")", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "self", ".", "imgextract", "(", ")", "\n", "\n", "", "self", ".", "load", "(", "seq_len", ",", "seq_srd", ",", "num_val", ")", "\n", "\n", "self", ".", "query", ",", "query_pid", ",", "query_camid", ",", "query_num", "=", "self", ".", "_pluckseq_cam", "(", "self", ".", "identities", ",", "self", ".", "split", "[", "'query'", "]", ",", "\n", "seq_len", ",", "seq_srd", ",", "0", ")", "\n", "self", ".", "queryinfo", "=", "infostruct", "(", ")", "\n", "self", ".", "queryinfo", ".", "pid", "=", "query_pid", "\n", "self", ".", "queryinfo", ".", "camid", "=", "query_camid", "\n", "self", ".", "queryinfo", ".", "tranum", "=", "query_num", "\n", "\n", "self", ".", "gallery", ",", "gallery_pid", ",", "gallery_camid", ",", "gallery_num", "=", "self", ".", "_pluckseq_cam", "(", "self", ".", "identities", ",", "\n", "self", ".", "split", "[", "'gallery'", "]", ",", "\n", "seq_len", ",", "seq_srd", ",", "1", ")", "\n", "self", ".", "galleryinfo", "=", "infostruct", "(", ")", "\n", "self", ".", "galleryinfo", ".", "pid", "=", "gallery_pid", "\n", "self", ".", "galleryinfo", ".", "camid", "=", "gallery_camid", "\n", "self", ".", "galleryinfo", ".", "tranum", "=", "gallery_num", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.prid2011sequence.PRID2011SEQUENCE.other_dir": [[48, 51], ["os.join", "os.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "other_dir", "(", "self", ")", ":", "\n", "        ", "return", "osp", ".", "join", "(", "self", ".", "root", ",", "'others'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.prid2011sequence.PRID2011SEQUENCE.download": [[52, 69], ["prid2011sequence.PRID2011SEQUENCE._check_integrity", "os.join", "os.join", "utils.osutils.mkdir_if_missing", "os.join", "os.join", "os.join", "os.join", "print", "os.isfile", "os.isfile", "os.isfile", "os.isfile", "print", "print", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.data.datasequence.Datasequence._check_integrity", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing"], ["", "def", "download", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "print", "(", "\"Files already downloaded and verified\"", ")", "\n", "return", "\n", "\n", "", "raw_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'raw'", ")", "\n", "mkdir_if_missing", "(", "raw_dir", ")", "\n", "\n", "fpath1", "=", "osp", ".", "join", "(", "raw_dir", ",", "datasetname", "+", "'.tar'", ")", "\n", "fpath2", "=", "osp", ".", "join", "(", "raw_dir", ",", "flowname", "+", "'.tar'", ")", "\n", "\n", "if", "osp", ".", "isfile", "(", "fpath1", ")", "and", "osp", ".", "isfile", "(", "fpath2", ")", ":", "\n", "            ", "print", "(", "\"Using the download file:\"", "+", "fpath1", "+", "\" \"", "+", "fpath2", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Please firstly download the files\"", ")", "\n", "raise", "RuntimeError", "(", "\"Downloaded file missing!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.prid2011sequence.PRID2011SEQUENCE.imgextract": [[70, 201], ["os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "utils.osutils.mkdir_if_missing", "os.join", "os.join", "utils.osutils.mkdir_if_missing", "os.join", "os.join", "utils.osutils.mkdir_if_missing", "os.join", "os.join", "utils.osutils.mkdir_if_missing", "sorted", "sorted", "range", "shutil.rmtree", "range", "shutil.rmtree", "utils.serialization.write_json", "len", "range", "utils.serialization.write_json", "os.isdir", "os.isdir", "print", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "tarfile.open", "utils.osutils.mkdir_if_missing", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "tarfile.open.extractall", "tarfile.open.close", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.isdir", "os.isdir", "print", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "tarfile.open", "utils.osutils.mkdir_if_missing", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "tarfile.open.extractall", "tarfile.open.close", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "glob.glob.glob", "glob.glob.glob", "fname.split", "int", "int", "[].append", "shutil.copy", "len", "range", "fname.split", "int", "int", "[].append", "shutil.copy", "len", "range", "os.join", "os.join", "numpy.random.permutation", "splits.append", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "range", "range", "os.join", "os.join", "range", "os.join", "os.join", "range", "range", "range", "pid_name.split", "frame_name.split", "len", "shutil.copy", "pid_name.split", "frame_name.split", "len", "shutil.copy", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.write_json", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.write_json", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.logging.Logger.close", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.logging.Logger.close"], ["", "", "def", "imgextract", "(", "self", ")", ":", "\n", "\n", "        ", "raw_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'raw'", ")", "\n", "# raw_dir = /media/ying/0BDD17830BDD1783/video_reid _prid/data/prid2011sequence/raw", "\n", "exdir1", "=", "osp", ".", "join", "(", "raw_dir", ",", "datasetname", ")", "\n", "# exdir1 = /media/ying/0BDD17830BDD1783/video_reid _prid/data/prid2011sequence/raw/prid_2011", "\n", "exdir2", "=", "osp", ".", "join", "(", "raw_dir", ",", "flowname", ")", "\n", "# exdir2 = /media/ying/0BDD17830BDD1783/video_reid _prid/data/prid2011sequence/raw/prid2011flow", "\n", "fpath1", "=", "osp", ".", "join", "(", "raw_dir", ",", "datasetname", "+", "'.tar'", ")", "\n", "# fpath1 = /media/ying/0BDD17830BDD1783/video_reid _prid/data/prid2011sequence/raw/prid_2011.tar", "\n", "fpath2", "=", "osp", ".", "join", "(", "raw_dir", ",", "flowname", "+", "'.tar'", ")", "\n", "# fpath2 = /media/ying/0BDD17830BDD1783/video_reid _prid/data/prid2011sequence/raw/prid2011flow.tar", "\n", "\n", "if", "not", "osp", ".", "isdir", "(", "exdir1", ")", ":", "\n", "            ", "print", "(", "\"Extracting tar file\"", ")", "\n", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "tar_ref", "=", "tarfile", ".", "open", "(", "fpath1", ")", "\n", "mkdir_if_missing", "(", "exdir1", ")", "\n", "os", ".", "chdir", "(", "exdir1", ")", "\n", "tar_ref", ".", "extractall", "(", ")", "\n", "tar_ref", ".", "close", "(", ")", "\n", "os", ".", "chdir", "(", "cwd", ")", "\n", "\n", "", "if", "not", "osp", ".", "isdir", "(", "exdir2", ")", ":", "\n", "            ", "print", "(", "\"Extracting tar file\"", ")", "\n", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "tar_ref", "=", "tarfile", ".", "open", "(", "fpath2", ")", "\n", "mkdir_if_missing", "(", "exdir2", ")", "\n", "os", ".", "chdir", "(", "exdir2", ")", "\n", "tar_ref", ".", "extractall", "(", ")", "\n", "tar_ref", ".", "close", "(", ")", "\n", "os", ".", "chdir", "(", "cwd", ")", "\n", "\n", "# recognizing the dataset", "\n", "# Format", "\n", "", "temp_images_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'temp_images'", ")", "\n", "mkdir_if_missing", "(", "temp_images_dir", ")", "\n", "\n", "temp_others_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'temp_others'", ")", "\n", "mkdir_if_missing", "(", "temp_others_dir", ")", "\n", "\n", "images_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'images'", ")", "\n", "mkdir_if_missing", "(", "images_dir", ")", "\n", "# images_dir = /media/ying/0BDD17830BDD1783/video_reid _prid/data/prid2011sequence/images", "\n", "\n", "others_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'others'", ")", "\n", "mkdir_if_missing", "(", "others_dir", ")", "\n", "# others_dir = /media/ying/0BDD17830BDD1783/video_reid _prid/data/prid2011sequence/others", "\n", "\n", "fpaths1", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "exdir1", ",", "'prid_2011/multi_shot'", ",", "'*/*/*.png'", ")", ")", ")", "# \u5b58\u653e\u6240\u6709\u56fe\u7247\u7684\u7edd\u5bf9\u8def\u5f84", "\n", "fpaths2", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "exdir2", ",", "'prid2011flow'", ",", "'*/*/*.png'", ")", ")", ")", "\n", "\n", "identities_imgraw", "=", "[", "[", "[", "]", "for", "_", "in", "range", "(", "2", ")", "]", "for", "_", "in", "range", "(", "200", ")", "]", "# 200\u4e2a[ []..[] ]", "\n", "identities_otherraw", "=", "[", "[", "[", "]", "for", "_", "in", "range", "(", "2", ")", "]", "for", "_", "in", "range", "(", "200", ")", "]", "\n", "\n", "for", "fpath", "in", "fpaths1", ":", "\n", "            ", "fname", "=", "fpath", "\n", "fname_list", "=", "fname", ".", "split", "(", "'/'", ")", "\n", "cam_name", "=", "fname_list", "[", "-", "3", "]", "# cam_a  / cam_b", "\n", "pid_name", "=", "fname_list", "[", "-", "2", "]", "# person_001", "\n", "frame_name", "=", "fname_list", "[", "-", "1", "]", "# 0001.png", "\n", "cam_id", "=", "1", "if", "cam_name", "==", "'cam_a'", "else", "2", "# cam_id = 1 / 2", "\n", "pid_id", "=", "int", "(", "pid_name", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "# pid_id = 001", "\n", "if", "pid_id", ">", "200", ":", "\n", "                ", "continue", "\n", "", "frame_id", "=", "int", "(", "frame_name", ".", "split", "(", "'.'", ")", "[", "-", "2", "]", ")", "# frame_id = 0001", "\n", "temp_fname", "=", "(", "'{:08d}_{:02d}_{:04d}.png'", "\n", ".", "format", "(", "pid_id", "-", "1", ",", "cam_id", "-", "1", ",", "frame_id", "-", "1", ")", ")", "\n", "identities_imgraw", "[", "pid_id", "-", "1", "]", "[", "cam_id", "-", "1", "]", ".", "append", "(", "temp_fname", ")", "\n", "shutil", ".", "copy", "(", "fpath", ",", "osp", ".", "join", "(", "temp_images_dir", ",", "temp_fname", ")", ")", "\n", "\n", "", "identities_temp", "=", "[", "x", "for", "x", "in", "identities_imgraw", "if", "x", "!=", "[", "[", "]", ",", "[", "]", "]", "]", "\n", "identities_images", "=", "identities_temp", "\n", "\n", "for", "pid", "in", "range", "(", "len", "(", "identities_temp", ")", ")", ":", "\n", "            ", "for", "cam", "in", "range", "(", "2", ")", ":", "\n", "                ", "for", "img", "in", "range", "(", "len", "(", "identities_images", "[", "pid", "]", "[", "cam", "]", ")", ")", ":", "\n", "                    ", "temp_fname", "=", "identities_temp", "[", "pid", "]", "[", "cam", "]", "[", "img", "]", "\n", "fname", "=", "(", "'{:08d}_{:02d}_{:04d}.png'", ".", "format", "(", "pid", ",", "cam", ",", "img", ")", ")", "\n", "identities_images", "[", "pid", "]", "[", "cam", "]", "[", "img", "]", "=", "fname", "\n", "shutil", ".", "copy", "(", "osp", ".", "join", "(", "temp_images_dir", ",", "temp_fname", ")", ",", "osp", ".", "join", "(", "images_dir", ",", "fname", ")", ")", "\n", "\n", "", "", "", "shutil", ".", "rmtree", "(", "temp_images_dir", ")", "\n", "\n", "for", "fpath", "in", "fpaths2", ":", "\n", "            ", "fname", "=", "fpath", "\n", "fname_list", "=", "fname", ".", "split", "(", "'/'", ")", "\n", "cam_name", "=", "fname_list", "[", "-", "3", "]", "# cam_a  / cam_b", "\n", "pid_name", "=", "fname_list", "[", "-", "2", "]", "# person_001", "\n", "frame_name", "=", "fname_list", "[", "-", "1", "]", "# 0001.png", "\n", "cam_id", "=", "1", "if", "cam_name", "==", "'cam_a'", "else", "2", "# cam_id = 1 / 2", "\n", "pid_id", "=", "int", "(", "pid_name", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "# pid_id = 001", "\n", "if", "pid_id", ">", "200", ":", "\n", "                ", "continue", "\n", "", "frame_id", "=", "int", "(", "frame_name", ".", "split", "(", "'.'", ")", "[", "-", "2", "]", ")", "# frame_id = 0001", "\n", "temp_fname", "=", "(", "'{:08d}_{:02d}_{:04d}.png'", "\n", ".", "format", "(", "pid_id", "-", "1", ",", "cam_id", "-", "1", ",", "frame_id", "-", "1", ")", ")", "\n", "identities_otherraw", "[", "pid_id", "-", "1", "]", "[", "cam_id", "-", "1", "]", ".", "append", "(", "temp_fname", ")", "\n", "shutil", ".", "copy", "(", "fpath", ",", "osp", ".", "join", "(", "temp_others_dir", ",", "temp_fname", ")", ")", "\n", "\n", "", "identities_temp", "=", "[", "x", "for", "x", "in", "identities_otherraw", "if", "x", "!=", "[", "[", "]", ",", "[", "]", "]", "]", "\n", "identities_others", "=", "identities_temp", "\n", "\n", "for", "pid", "in", "range", "(", "len", "(", "identities_temp", ")", ")", ":", "\n", "            ", "for", "cam", "in", "range", "(", "2", ")", ":", "\n", "                ", "for", "img", "in", "range", "(", "len", "(", "identities_others", "[", "pid", "]", "[", "cam", "]", ")", ")", ":", "\n", "                    ", "temp_fname", "=", "identities_temp", "[", "pid", "]", "[", "cam", "]", "[", "img", "]", "\n", "fname", "=", "(", "'{:08d}_{:02d}_{:04d}.png'", ".", "format", "(", "pid", ",", "cam", ",", "img", ")", ")", "\n", "identities_images", "[", "pid", "]", "[", "cam", "]", "[", "img", "]", "=", "fname", "\n", "shutil", ".", "copy", "(", "osp", ".", "join", "(", "temp_others_dir", ",", "temp_fname", ")", ",", "osp", ".", "join", "(", "others_dir", ",", "fname", ")", ")", "\n", "\n", "", "", "", "shutil", ".", "rmtree", "(", "temp_others_dir", ")", "\n", "\n", "meta", "=", "{", "'name'", ":", "'prid-sequence'", ",", "'shot'", ":", "'sequence'", ",", "'num_cameras'", ":", "2", ",", "\n", "'identities'", ":", "identities_images", "}", "\n", "\n", "write_json", "(", "meta", ",", "osp", ".", "join", "(", "self", ".", "root", ",", "'meta.json'", ")", ")", "\n", "# Consider fixed training and testing split", "\n", "num", "=", "len", "(", "identities_images", ")", "\n", "splits", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "20", ")", ":", "\n", "            ", "pids", "=", "np", ".", "random", ".", "permutation", "(", "num", ")", "\n", "pids", "=", "(", "pids", "-", "1", ")", ".", "tolist", "(", ")", "\n", "trainval_pids", "=", "pids", "[", ":", "num", "//", "2", "]", "\n", "test_pids", "=", "pids", "[", "num", "//", "2", ":", "]", "\n", "split", "=", "{", "'trainval'", ":", "trainval_pids", ",", "\n", "'query'", ":", "test_pids", ",", "\n", "'gallery'", ":", "test_pids", "}", "\n", "\n", "splits", ".", "append", "(", "split", ")", "\n", "", "write_json", "(", "splits", ",", "osp", ".", "join", "(", "self", ".", "root", ",", "'splits.json'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.prid2011sequence.PRID2011SEQUENCE._pluckseq_cam": [[202, 221], ["enumerate", "len", "per_id.append", "cam_id.append", "tra_num.append", "ret.append", "len", "range"], "methods", ["None"], ["", "def", "_pluckseq_cam", "(", "self", ",", "identities", ",", "indices", ",", "seq_len", ",", "seq_str", ",", "camid", ")", ":", "\n", "        ", "ret", "=", "[", "]", "\n", "per_id", "=", "[", "]", "\n", "cam_id", "=", "[", "]", "\n", "tra_num", "=", "[", "]", "\n", "\n", "for", "index", ",", "pid", "in", "enumerate", "(", "indices", ")", ":", "\n", "            ", "pid_images", "=", "identities", "[", "pid", "]", "\n", "cam_images", "=", "pid_images", "[", "camid", "]", "\n", "seqall", "=", "len", "(", "cam_images", ")", "\n", "seq_inds", "=", "[", "(", "start_ind", ",", "start_ind", "+", "seq_len", ")", "for", "start_ind", "in", "range", "(", "0", ",", "seqall", "-", "seq_len", ",", "seq_str", ")", "]", "\n", "if", "not", "seq_inds", ":", "\n", "                ", "seq_inds", "=", "[", "(", "0", ",", "seqall", ")", "]", "\n", "", "for", "seq_ind", "in", "seq_inds", ":", "\n", "                ", "ret", ".", "append", "(", "(", "seq_ind", "[", "0", "]", ",", "seq_ind", "[", "1", "]", ",", "pid", ",", "index", ",", "camid", ")", ")", "\n", "", "per_id", ".", "append", "(", "pid", ")", "\n", "cam_id", ".", "append", "(", "camid", ")", "\n", "tra_num", ".", "append", "(", "len", "(", "seq_inds", ")", ")", "\n", "", "return", "ret", ",", "per_id", ",", "cam_id", ",", "tra_num", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.Siamese_video.Siamese_video.__init__": [[44, 82], ["torch.nn.Module.__init__", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "Siamese_video.Siamese_video.classifierBN.apply", "Siamese_video.Siamese_video.classifierlinear.apply"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_num", "=", "2048", ",", "output_num", "=", "2048", ",", "class_num", "=", "2", ")", ":", "\n", "        ", "super", "(", "Siamese_video", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# self.input_num = 2048", "\n", "# self.output_num = 512", "\n", "self", ".", "class_num", "=", "class_num", "\n", "self", ".", "feat_num", "=", "input_num", "\n", "# linear_Q", "\n", "# self.featQ = nn.Linear(self.input_num, self.output_num)", "\n", "# self.featQ_bn = nn.BatchNorm1d(self.output_num)", "\n", "# self.featQ.apply(weights_init_kaiming)", "\n", "# self.featQ_bn.apply(weights_init_kaiming)", "\n", "#", "\n", "# # linear_K", "\n", "# self.featK = nn.Linear(self.input_num, self.output_num)", "\n", "# self.featK_bn = nn.BatchNorm1d(self.output_num)", "\n", "# self.featK.apply(weights_init_kaiming)", "\n", "# self.featK_bn.apply(weights_init_kaiming)", "\n", "#", "\n", "# # linear_V", "\n", "# self.featV = nn.Linear(self.input_num, self.output_num)", "\n", "# self.featV_bn = nn.BatchNorm1d(self.output_num)", "\n", "# self.featV.apply(weights_init_kaiming)", "\n", "# self.featV_bn.apply(weights_init_kaiming)", "\n", "#", "\n", "# # Softmax", "\n", "# self.softmax = nn.Softmax(dim=-1)", "\n", "#", "\n", "# # numti_head", "\n", "# self.d_k = 128", "\n", "# self.head = 4", "\n", "\n", "# BCE classifier", "\n", "self", ".", "classifierBN", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "feat_num", ")", "\n", "self", ".", "classifierlinear", "=", "nn", ".", "Linear", "(", "self", ".", "feat_num", ",", "self", ".", "class_num", ")", "\n", "self", ".", "classifierBN", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "self", ".", "classifierlinear", ".", "apply", "(", "weights_init_classifier", ")", "\n", "self", ".", "muti_head", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.Siamese_video.Siamese_video.self_attention": [[83, 128], ["probe_value.size", "probe_base.view", "Siamese_video.Siamese_video.featQ", "Siamese_video.Siamese_video.featQ_bn", "probe_base.view", "Siamese_video.Siamese_video.featK", "Siamese_video.Siamese_video.featK_bn", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "Siamese_video.Siamese_video.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "pool_probe.view.view.sum", "pool_probe.view.view.squeeze", "Qs.contiguous().view.contiguous().view.norm().unsqueeze().expand_as", "Qs.contiguous().view.contiguous().view.contiguous().view().transpose", "Qs.contiguous().view.contiguous().view.contiguous().view", "Siamese_video.Siamese_video.norm().unsqueeze().expand_as", "Siamese_video.Siamese_video.view().transpose", "Siamese_video.Siamese_video.view", "Siamese_video.Siamese_video.view.transpose", "probe_value.view().transpose", "probe_value.view", "pool_probe.view.view.transpose().contiguous", "pool_probe.view.view.view", "pool_probe.view.view.norm().unsqueeze().expand_as", "Qs.contiguous().view.contiguous().view.norm().unsqueeze", "Qs.contiguous().view.contiguous().view.contiguous().view", "Qs.contiguous().view.contiguous().view.contiguous", "Siamese_video.Siamese_video.norm().unsqueeze", "Siamese_video.Siamese_video.view", "probe_value.view", "pool_probe.view.view.transpose", "pool_probe.view.view.norm().unsqueeze", "Qs.contiguous().view.contiguous().view.norm", "Qs.contiguous().view.contiguous().view.contiguous", "Siamese_video.Siamese_video.norm", "pool_probe.view.view.norm"], "methods", ["None"], ["", "def", "self_attention", "(", "self", ",", "probe_value", ",", "probe_base", ")", ":", "\n", "        ", "pro_size", "=", "probe_value", ".", "size", "(", ")", "# torch.Size([4, 8, 128])", "\n", "pro_batch", "=", "pro_size", "[", "0", "]", "\n", "pro_len", "=", "pro_size", "[", "1", "]", "\n", "\n", "Qs", "=", "probe_base", ".", "view", "(", "pro_batch", "*", "pro_len", ",", "-", "1", ")", "# 32 , 2048", "\n", "Qs", "=", "self", ".", "featQ", "(", "Qs", ")", "\n", "Qs", "=", "self", ".", "featQ_bn", "(", "Qs", ")", "# 32, 128", "\n", "Qs", "=", "Qs", "/", "Qs", ".", "norm", "(", "2", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "Qs", ")", "# torch.Size([32, 256])", "\n", "if", "self", ".", "muti_head", ":", "\n", "            ", "Qs", "=", "Qs", ".", "contiguous", "(", ")", ".", "view", "(", "pro_batch", ",", "-", "1", ",", "self", ".", "head", ",", "self", ".", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", "# torch.Size([4, 4, 8, 64])", "\n", "", "else", ":", "\n", "            ", "Qs", "=", "Qs", ".", "contiguous", "(", ")", ".", "view", "(", "pro_batch", ",", "pro_len", ",", "-", "1", ")", "# torch.Size([4, 8, 512])", "\n", "\n", "# generating Keys, key \u4e0d\u7b49\u4e8e value", "\n", "", "K", "=", "probe_base", ".", "view", "(", "pro_batch", "*", "pro_len", ",", "-", "1", ")", "\n", "K", "=", "self", ".", "featK", "(", "K", ")", "\n", "K", "=", "self", ".", "featK_bn", "(", "K", ")", "\n", "K", "=", "K", "/", "K", ".", "norm", "(", "2", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "K", ")", "\n", "if", "self", ".", "muti_head", ":", "\n", "            ", "tmp_k", "=", "K", ".", "view", "(", "pro_batch", ",", "-", "1", ",", "self", ".", "head", ",", "self", ".", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", "# torch.Size([4, 4, 8, 64])", "\n", "", "else", ":", "\n", "            ", "tmp_k", "=", "K", ".", "view", "(", "pro_batch", ",", "pro_len", ",", "-", "1", ")", "# torch.Size([4, 8, 512])", "\n", "\n", "# 1.single= [4,8, 512] * [4, 512, 8] = 4, 8, 8", "\n", "", "weights", "=", "torch", ".", "matmul", "(", "Qs", ",", "tmp_k", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "# 2. muti:torch.Size([4, 4, 8, 8])", "\n", "\n", "weights", "=", "self", ".", "softmax", "(", "weights", ")", "# 4 * 8 * 8  torch.Size([4, 4, 8, 8])", "\n", "\n", "if", "self", ".", "muti_head", ":", "\n", "            ", "V", "=", "probe_value", ".", "view", "(", "pro_batch", ",", "-", "1", ",", "self", ".", "head", ",", "self", ".", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "V", "=", "probe_value", ".", "view", "(", "pro_batch", ",", "pro_len", ",", "-", "1", ")", "\n", "\n", "", "pool_probe", "=", "torch", ".", "matmul", "(", "weights", ",", "V", ")", "# ([4, 8, 8]) * ([4, 8, 512]) = 4 * 8 * 512   torch.Size([4, 4, 8, 64])", "\n", "if", "self", ".", "muti_head", ":", "\n", "            ", "pool_probe", "=", "pool_probe", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "# torch.Size([4, 8, 4, 64])", "\n", "pool_probe", "=", "pool_probe", ".", "view", "(", "pro_batch", ",", "-", "1", ",", "self", ".", "head", "*", "self", ".", "d_k", ")", "# torch.Size([4, 8, 512])", "\n", "\n", "", "pool_probe", "=", "pool_probe", ".", "sum", "(", "1", ")", "# torch.Size([4, 128])", "\n", "# pool_probe = torch.mean(probe_value, dim=1)", "\n", "pool_probe", "=", "pool_probe", "/", "pool_probe", ".", "norm", "(", "2", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "pool_probe", ")", "# \u5355\u4f4d\u5411\u91cf", "\n", "pool_probe", "=", "pool_probe", ".", "squeeze", "(", "1", ")", "\n", "\n", "return", "pool_probe", ",", "pool_probe", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.Siamese_video.Siamese_video.forward": [[129, 185], ["x.reshape.reshape.size", "x.reshape.reshape.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pooled_probe.unsqueeze.unsqueeze.size", "pooled_gallery.unsqueeze.unsqueeze.size", "pooled_gallery.unsqueeze.unsqueeze.unsqueeze", "pooled_probe.unsqueeze.unsqueeze.unsqueeze", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "Siamese_video.Siamese_video.view().contiguous", "Siamese_video.Siamese_video.classifierBN", "Siamese_video.Siamese_video.classifierlinear", "cls_encode.view.view.view", "int", "Siamese_video.Siamese_video.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# xsize = x.size()  # 12,8,128", "\n", "# sample_num = xsize[0]  # 12", "\n", "#", "\n", "# if sample_num % 2 != 0:", "\n", "#     raise RuntimeError(\"the batch size should be even number!\")", "\n", "#", "\n", "# seq_len = x.size()[1]  # 8", "\n", "# x = x.view(int(sample_num/2), 2, seq_len, -1)  # torch.Size([6, 2, 8, 128])", "\n", "# input = input.view(int(sample_num/2), 2, seq_len, -1)  # torch.Size([6, 2, 8, 2048])  => raw", "\n", "# probe_x = x[:, 0, :, :]", "\n", "# probe_x = probe_x.contiguous()  # torch.Size([6, 8, 128])", "\n", "# gallery_x = x[:, 1, :, :]", "\n", "# gallery_x = gallery_x.contiguous()  # torch.Size([6, 8, 128])", "\n", "#", "\n", "# probe_input = input[:, 0, :, :]", "\n", "# probe_input = probe_input.contiguous()  # torch.Size([6, 8, 2048])", "\n", "# gallery_input = input[:, 1, :, :]", "\n", "# gallery_input = gallery_input.contiguous()  # torch.Size([6, 8, 2048])", "\n", "#", "\n", "# # self-pooling  pooled_probe:torch.Size([6, 128])    hidden_probe:torch.Size([6, 128])", "\n", "# pooled_probe, probe_out_raw = self.self_attention(probe_x, probe_input)", "\n", "# # pooled_probe = probe_x.mean(dim=1)", "\n", "# # probe_out_raw = probe_input.mean(dim=1)", "\n", "# #", "\n", "# pooled_gallery, gallery_out_raw = self.self_attention(gallery_x, gallery_input)", "\n", "# # pooled_gallery = gallery_x.mean(dim=1)", "\n", "# # gallery_out_raw = gallery_input.mean(dim=1)", "\n", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "x", "=", "x", ".", "reshape", "(", "int", "(", "batchsize", "/", "2", ")", ",", "2", ",", "-", "1", ")", "\n", "pooled_probe", "=", "x", "[", ":", ",", "0", ",", ":", "]", "\n", "pooled_gallery", "=", "x", "[", ":", ",", "1", ",", ":", "]", "\n", "\n", "\n", "siamese_out", "=", "torch", ".", "cat", "(", "(", "pooled_probe", ",", "pooled_gallery", ")", ")", "\n", "probesize", "=", "pooled_probe", ".", "size", "(", ")", "# 4, 2048", "\n", "gallerysize", "=", "pooled_gallery", ".", "size", "(", ")", "# 4, 2048", "\n", "probe_batch", "=", "probesize", "[", "0", "]", "# 4", "\n", "gallery_batch", "=", "gallerysize", "[", "0", "]", "# 4", "\n", "\n", "# pooled_gallery: 4, 4, 2048", "\n", "pooled_gallery", "=", "pooled_gallery", ".", "unsqueeze", "(", "0", ")", "# 1, 4, 2048", "\n", "\n", "pooled_probe", "=", "pooled_probe", ".", "unsqueeze", "(", "1", ")", "# 4, 1, 2048", "\n", "\n", "diff", "=", "pooled_probe", "-", "pooled_gallery", "\n", "diff", "=", "torch", ".", "pow", "(", "diff", ",", "2", ")", "# torch.Size([4, 4, 2048])", "\n", "diff", "=", "diff", ".", "view", "(", "probe_batch", "*", "gallery_batch", ",", "-", "1", ")", ".", "contiguous", "(", ")", "# torch.Size([16, 2048])", "\n", "diff", "=", "self", ".", "classifierBN", "(", "diff", ")", "\n", "# diff = diff / diff.norm(2, 1).unsqueeze(1).expand_as(diff)", "\n", "cls_encode", "=", "self", ".", "classifierlinear", "(", "diff", ")", "# torch.Size([16, 2])", "\n", "cls_encode", "=", "cls_encode", ".", "view", "(", "probe_batch", ",", "gallery_batch", ",", "-", "1", ")", "# torch.Size([4, 4, 2])", "\n", "\n", "return", "cls_encode", ",", "siamese_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.Siamese_video.weights_init_kaiming": [[18, 31], ["classname.find", "torch.nn.init.kaiming_uniform_", "torch.nn.init.constant_", "classname.find", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "classname.find", "torch.nn.init.constant_", "torch.nn.init.constant_"], "function", ["None"], ["def", "weights_init_kaiming", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "if", "m", ".", "affine", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.Siamese_video.weights_init_classifier": [[33, 40], ["classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "", "def", "weights_init_classifier", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "# if m.bias:", "\n", "#     nn.init.constant_(m.bias, 0.0)", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnets1.BasicBlock.__init__": [[28, 37], ["torch.Module.__init__", "resnets1.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnets1.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__", "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnets1.conv3x3", "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnets1.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnets1.BasicBlock.forward": [[38, 55], ["resnets1.BasicBlock.conv1", "resnets1.BasicBlock.bn1", "resnets1.BasicBlock.relu", "resnets1.BasicBlock.conv2", "resnets1.BasicBlock.bn2", "resnets1.BasicBlock.relu", "resnets1.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnets1.Bottleneck.__init__": [[60, 72], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnets1.Bottleneck.forward": [[73, 94], ["resnets1.Bottleneck.conv1", "resnets1.Bottleneck.bn1", "resnets1.Bottleneck.relu", "resnets1.Bottleneck.conv2", "resnets1.Bottleneck.bn2", "resnets1.Bottleneck.relu", "resnets1.Bottleneck.conv3", "resnets1.Bottleneck.bn3", "resnets1.Bottleneck.relu", "resnets1.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnets1.ResNet.__init__": [[98, 120], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnets1.ResNet._make_layer", "resnets1.ResNet._make_layer", "resnets1.ResNet._make_layer", "resnets1.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnets1.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__", "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnets1.ResNet._make_layer", "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnets1.ResNet._make_layer", "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnets1.ResNet._make_layer", "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnets1.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnets1.ResNet._make_layer": [[121, 137], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnets1.ResNet.forward": [[138, 154], ["resnets1.ResNet.conv1", "resnets1.ResNet.bn1", "resnets1.ResNet.relu", "resnets1.ResNet.maxpool", "resnets1.ResNet.layer1", "resnets1.ResNet.layer2", "resnets1.ResNet.layer3", "resnets1.ResNet.layer4", "resnets1.ResNet.avgpool", "resnets1.ResNet.view", "resnets1.ResNet.fc", "resnets1.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnets1.conv3x3": [[19, 23], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnets1.resnet18": [[156, 166], ["resnets1.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnets1.resnet34": [[168, 178], ["resnets1.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnets1.resnet50_s1": [[180, 190], ["resnets1.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50_s1", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnets1.resnet101": [[199, 209], ["resnets1.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnets1.resnet152": [[211, 221], ["resnets1.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.grl_model.BasicBlock.__init__": [[53, 66], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "\n", "# stride=stride,", "\n", "# padding=1,", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.grl_model.BasicBlock.forward": [[67, 86], ["grl_model.BasicBlock.conv1", "grl_model.BasicBlock.bn1", "grl_model.BasicBlock.relu", "grl_model.BasicBlock.conv2", "grl_model.BasicBlock.bn2", "grl_model.BasicBlock.relu", "grl_model.BasicBlock.conv3", "grl_model.BasicBlock.bn3", "grl_model.BasicBlock.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x", "=", "x1", "+", "x2", "\n", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.grl_model.TRLBlock.__init__": [[88, 128], ["torch.nn.Module.__init__", "int", "grl_model.BasicBlock", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "grl_model.BasicBlock", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feat_num", ")", ":", "\n", "        ", "super", "(", "TRLBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feat_num", "=", "feat_num", "\n", "self", ".", "feat_num_half", "=", "int", "(", "feat_num", "/", "2", ")", "\n", "\n", "self", ".", "uncorr_memo_forward", "=", "BasicBlock", "(", "2048", ",", "512", ")", "\n", "\n", "self", ".", "forward_f1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "2048", ",", "2048", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "forward_f2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "2048", ",", "2048", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "channel_atte_foreward_corr", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2048", ",", "2048", "//", "16", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "2048", "//", "16", ",", "2048", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n", "\n", "\n", "####################################################3", "\n", "\n", "self", ".", "uncorr_memo_backward", "=", "BasicBlock", "(", "2048", ",", "512", ")", "\n", "\n", "self", ".", "backward_f1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "2048", ",", "2048", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "backward_f2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "2048", ",", "2048", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "channel_atte_backward_corr", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2048", ",", "2048", "//", "16", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "2048", "//", "16", ",", "2048", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.grl_model.TRLBlock.forward": [[131, 181], ["x_corr.size", "x_uncorr.mean", "x_uncorr.mean", "range", "range", "torch.stack", "torch.stack", "grl_model.TRLBlock.forward_f1", "grl_model.TRLBlock.forward_f2", "grl_model.TRLBlock.channel_atte_foreward_corr", "torch.stack.append", "grl_model.TRLBlock.uncorr_memo_forward", "grl_model.TRLBlock.backward_f1", "grl_model.TRLBlock.backward_f2", "grl_model.TRLBlock.channel_atte_backward_corr", "torch.stack.append", "grl_model.TRLBlock.uncorr_memo_backward", "temp.append", "grl_model.TRLBlock.mean().mean", "grl_model.TRLBlock.mean().mean", "x_temp.mean().mean", "x_temp.mean().mean", "grl_model.TRLBlock.view().contiguous().expand", "grl_model.TRLBlock.view().contiguous().expand", "grl_model.TRLBlock.mean", "grl_model.TRLBlock.mean", "x_temp.mean", "x_temp.mean", "grl_model.TRLBlock.view().contiguous", "grl_model.TRLBlock.view().contiguous", "grl_model.TRLBlock.view", "grl_model.TRLBlock.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_uncorr", ",", "x_corr", ")", ":", "\n", "        ", "b", ",", "t", ",", "c", ",", "h", ",", "w", "=", "x_corr", ".", "size", "(", ")", "\n", "\n", "f_step_forward", "=", "[", "]", "\n", "f_step_backward", "=", "[", "]", "\n", "\n", "x_uncorr_memo_forward", "=", "x_uncorr", ".", "mean", "(", "dim", "=", "1", ")", "## b*c*h*w", "\n", "x_uncorr_memo_backward", "=", "x_uncorr", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "t", ",", "1", ")", ":", "\n", "            ", "x_corr_forward", "=", "x_corr", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", "\n", "x_uncorr_forward", "=", "x_uncorr", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "\n", "f11", "=", "self", ".", "forward_f1", "(", "x_uncorr_memo_forward", ")", "\n", "f21", "=", "self", ".", "forward_f2", "(", "x_corr_forward", ")", "#", "\n", "\n", "c_atte", "=", "self", ".", "channel_atte_foreward_corr", "(", "(", "f11", "-", "f21", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", ")", "\n", "x_temp", "=", "x_corr_forward", "*", "c_atte", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", ".", "contiguous", "(", ")", ".", "expand", "(", "b", ",", "c", ",", "h", ",", "w", ")", "+", "x_corr_forward", "\n", "f_step_forward", ".", "append", "(", "x_temp", ".", "mean", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", ")", "\n", "\n", "x_uncorr_memo_forward", "=", "self", ".", "uncorr_memo_forward", "(", "x_uncorr_memo_forward", ",", "x_uncorr_forward", ")", "\n", "\n", "#########################", "\n", "\n", "x_corr_backward", "=", "x_corr", "[", ":", ",", "t", "-", "1", "-", "i", ",", ":", ",", ":", ",", ":", "]", "\n", "x_uncorr_backward", "=", "x_uncorr", "[", ":", ",", "t", "-", "1", "-", "i", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "f12", "=", "self", ".", "backward_f1", "(", "x_uncorr_memo_backward", ")", "\n", "f22", "=", "self", ".", "backward_f2", "(", "x_corr_backward", ")", "#", "\n", "\n", "c_atte", "=", "self", ".", "channel_atte_backward_corr", "(", "(", "f12", "-", "f22", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", ")", "\n", "x_temp", "=", "x_corr_backward", "*", "c_atte", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", ".", "contiguous", "(", ")", ".", "expand", "(", "b", ",", "c", ",", "h", ",", "w", ")", "+", "x_corr_backward", "\n", "f_step_backward", ".", "append", "(", "x_temp", ".", "mean", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", ")", "\n", "\n", "x_uncorr_memo_backward", "=", "self", ".", "uncorr_memo_backward", "(", "x_uncorr_memo_backward", ",", "x_uncorr_backward", ")", "\n", "\n", "\n", "", "temp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "t", ")", ":", "\n", "            ", "temp", ".", "append", "(", "f_step_backward", "[", "t", "-", "1", "-", "i", "]", ")", "\n", "", "f_step_backward", "=", "torch", ".", "stack", "(", "temp", ",", "dim", "=", "1", ")", "\n", "f_step_forward", "=", "torch", ".", "stack", "(", "f_step_forward", ",", "dim", "=", "1", ")", "\n", "\n", "f_corr", "=", "f_step_forward", "+", "f_step_backward", "\n", "\n", "f_uncorr", "=", "x_uncorr_memo_forward", ".", "mean", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", "+", "x_uncorr_memo_backward", ".", "mean", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "\n", "return", "f_uncorr", ",", "f_corr", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.grl_model.ResNet50_GRL_Model.__init__": [[189, 210], ["torch.nn.Module.__init__", "print", "basebranch.Backbone", "grl_model.TRLBlock", "torch.nn.BatchNorm1d", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.BatchNorm1d", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__"], ["def", "__init__", "(", "self", ",", "num_feat", "=", "2048", ",", "num_features", "=", "512", ",", "height", "=", "256", ",", "width", "=", "128", ",", "pretrained", "=", "True", ",", "\n", "dropout", "=", "0", ",", "numclasses", "=", "0", ")", ":", "\n", "        ", "super", "(", "ResNet50_GRL_Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "num_feat", "=", "num_feat", "# resnet output", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "num_classes", "=", "numclasses", "\n", "self", ".", "output_dim", "=", "num_features", "# bnneck", "\n", "print", "(", "'Num of features: {}.'", ".", "format", "(", "self", ".", "num_feat", ")", ")", "\n", "\n", "self", ".", "backbone", "=", "Backbone", "(", "height", "=", "height", ",", "width", "=", "width", ")", "\n", "\n", "self", ".", "temporal_learning_block", "=", "TRLBlock", "(", "2048", ")", "\n", "# #", "\n", "self", ".", "corr_bn", "=", "nn", ".", "BatchNorm1d", "(", "2048", ")", "\n", "init", ".", "constant_", "(", "self", ".", "corr_bn", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "self", ".", "corr_bn", ".", "bias", ",", "0", ")", "\n", "\n", "self", ".", "uncorr_bn", "=", "nn", ".", "BatchNorm1d", "(", "2048", ")", "\n", "init", ".", "constant_", "(", "self", ".", "uncorr_bn", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "self", ".", "uncorr_bn", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.grl_model.ResNet50_GRL_Model.forward": [[211, 229], ["inputs.size", "inputs.view", "grl_model.ResNet50_GRL_Model.backbone", "torch.nn.functional.normalize.view", "torch.nn.functional.normalize.view", "grl_model.ResNet50_GRL_Model.temporal_learning_block", "grl_model.ResNet50_GRL_Model.corr_bn().view", "torch.nn.functional.normalize", "grl_model.ResNet50_GRL_Model.uncorr_bn().view", "torch.nn.functional.normalize", "torch.nn.functional.normalize.size", "torch.nn.functional.normalize.size", "torch.nn.functional.normalize.size", "torch.nn.functional.normalize.size", "torch.nn.functional.normalize.size", "torch.nn.functional.normalize.size", "grl_model.ResNet50_GRL_Model.corr_bn", "grl_model.ResNet50_GRL_Model.uncorr_bn", "torch.nn.functional.normalize.view", "torch.nn.functional.normalize.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "training", "=", "True", ")", ":", "\n", "        ", "b", ",", "t", ",", "c", ",", "h", ",", "w", "=", "inputs", ".", "size", "(", ")", "\n", "im_input", "=", "inputs", ".", "view", "(", "b", "*", "t", ",", "c", ",", "h", ",", "w", ")", "# 80, 3, 256, 128", "\n", "x_uncorr", ",", "x_corr", ",", "corr_map", "=", "self", ".", "backbone", "(", "im_input", ",", "b", ",", "t", ")", "# b*t,2048,16,8", "\n", "\n", "###########################", "\n", "x_corr", "=", "x_corr", ".", "view", "(", "b", ",", "t", ",", "x_corr", ".", "size", "(", "1", ")", ",", "x_corr", ".", "size", "(", "2", ")", ",", "x_corr", ".", "size", "(", "3", ")", ")", "\n", "x_uncorr", "=", "x_uncorr", ".", "view", "(", "b", ",", "t", ",", "x_uncorr", ".", "size", "(", "1", ")", ",", "x_uncorr", ".", "size", "(", "2", ")", ",", "x_uncorr", ".", "size", "(", "3", ")", ")", "\n", "\n", "x_uncorr", ",", "x_corr", "=", "self", ".", "temporal_learning_block", "(", "x_uncorr", ",", "x_corr", ")", "#", "\n", "\n", "x_corr", "=", "self", ".", "corr_bn", "(", "x_corr", ".", "view", "(", "b", "*", "t", ",", "2048", ")", ")", ".", "view", "(", "b", ",", "t", ",", "2048", ")", "\n", "x_corr", "=", "F", ".", "normalize", "(", "x_corr", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "\n", "\n", "x_uncorr", "=", "self", ".", "uncorr_bn", "(", "x_uncorr", ".", "view", "(", "b", ",", "2048", ")", ")", ".", "view", "(", "b", ",", "2048", ")", "\n", "x_uncorr", "=", "F", ".", "normalize", "(", "x_uncorr", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "return", "x_uncorr", ",", "x_corr", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.grl_model.weights_init_kaiming": [[27, 40], ["classname.find", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "classname.find", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "classname.find", "torch.nn.init.constant_", "torch.nn.init.constant_"], "function", ["None"], ["def", "weights_init_kaiming", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_out'", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "if", "m", ".", "affine", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.grl_model.weights_init_classifier": [[42, 48], ["classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "", "def", "weights_init_classifier", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "if", "m", ".", "bias", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.grl_model.resnet50_grl": [[231, 233], ["grl_model.ResNet50_GRL_Model"], "function", ["None"], ["", "", "def", "resnet50_grl", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet50_GRL_Model", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.Siamese.Siamese.__init__": [[44, 77], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "Siamese.Siamese.featQ.apply", "Siamese.Siamese.featQ_bn.apply", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "Siamese.Siamese.featK.apply", "Siamese.Siamese.featK_bn.apply", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "Siamese.Siamese.featV.apply", "Siamese.Siamese.featV_bn.apply", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "Siamese.Siamese.classifierBN.apply", "Siamese.Siamese.classifierlinear.apply"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_num", ",", "output_num", ",", "class_num", ")", ":", "\n", "        ", "super", "(", "Siamese", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_num", "=", "input_num", "\n", "self", ".", "output_num", "=", "output_num", "\n", "self", ".", "class_num", "=", "class_num", "\n", "self", ".", "feat_num", "=", "input_num", "\n", "# linear_Q", "\n", "self", ".", "featQ", "=", "nn", ".", "Linear", "(", "self", ".", "input_num", ",", "self", ".", "output_num", ")", "\n", "self", ".", "featQ_bn", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "output_num", ")", "\n", "self", ".", "featQ", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "self", ".", "featQ_bn", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "\n", "# linear_K", "\n", "self", ".", "featK", "=", "nn", ".", "Linear", "(", "self", ".", "input_num", ",", "self", ".", "output_num", ")", "\n", "self", ".", "featK_bn", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "output_num", ")", "\n", "self", ".", "featK", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "self", ".", "featK_bn", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "\n", "# linear_V", "\n", "self", ".", "featV", "=", "nn", ".", "Linear", "(", "self", ".", "input_num", ",", "self", ".", "output_num", ")", "\n", "self", ".", "featV_bn", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "output_num", ")", "\n", "self", ".", "featV", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "self", ".", "featV_bn", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "\n", "# Softmax", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n", "# BCE classifier", "\n", "self", ".", "classifierBN", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "feat_num", ")", "\n", "self", ".", "classifierlinear", "=", "nn", ".", "Linear", "(", "self", ".", "feat_num", ",", "self", ".", "class_num", ")", "\n", "self", ".", "classifierBN", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "self", ".", "classifierlinear", ".", "apply", "(", "weights_init_classifier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.Siamese.Siamese.self_attention": [[79, 107], ["input.size", "input.view", "Siamese.Siamese.featQ", "Siamese.Siamese.featQ_bn", "Qs.contiguous().view.contiguous().view.contiguous().view", "input.view", "Siamese.Siamese.featK", "Siamese.Siamese.featK_bn", "K.view.view.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "Siamese.Siamese.softmax", "input.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "pool_input.squeeze.squeeze.sum", "pool_input.squeeze.squeeze.squeeze", "Qs.contiguous().view.contiguous().view.norm().unsqueeze().expand_as", "K.view.view.norm().unsqueeze().expand_as", "K.view.view.transpose", "pool_input.squeeze.squeeze.norm().unsqueeze().expand_as", "Qs.contiguous().view.contiguous().view.contiguous", "Qs.contiguous().view.contiguous().view.norm().unsqueeze", "K.view.view.norm().unsqueeze", "pool_input.squeeze.squeeze.norm().unsqueeze", "Qs.contiguous().view.contiguous().view.norm", "K.view.view.norm", "pool_input.squeeze.squeeze.norm"], "methods", ["None"], ["", "def", "self_attention", "(", "self", ",", "input", ")", ":", "\n", "        ", "size", "=", "input", ".", "size", "(", ")", "\n", "batch", "=", "size", "[", "0", "]", "\n", "len", "=", "size", "[", "1", "]", "\n", "\n", "Qs", "=", "input", ".", "view", "(", "batch", "*", "len", ",", "-", "1", ")", "\n", "Qs", "=", "self", ".", "featQ", "(", "Qs", ")", "\n", "Qs", "=", "self", ".", "featQ_bn", "(", "Qs", ")", "\n", "Qs", "=", "Qs", "/", "Qs", ".", "norm", "(", "2", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "Qs", ")", "\n", "Qs", "=", "Qs", ".", "contiguous", "(", ")", ".", "view", "(", "batch", ",", "len", ",", "-", "1", ")", "\n", "\n", "K", "=", "input", ".", "view", "(", "batch", "*", "len", ",", "-", "1", ")", "\n", "K", "=", "self", ".", "featK", "(", "K", ")", "\n", "K", "=", "self", ".", "featK_bn", "(", "K", ")", "\n", "K", "=", "K", "/", "K", ".", "norm", "(", "2", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "K", ")", "\n", "K", "=", "K", ".", "view", "(", "batch", ",", "len", ",", "-", "1", ")", "\n", "\n", "weights", "=", "torch", ".", "matmul", "(", "Qs", ",", "K", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "weights", "=", "self", ".", "softmax", "(", "weights", ")", "\n", "\n", "V", "=", "input", ".", "view", "(", "batch", ",", "len", ",", "-", "1", ")", "\n", "pool_input", "=", "torch", ".", "matmul", "(", "weights", ",", "V", ")", "\n", "\n", "pool_input", "=", "pool_input", ".", "sum", "(", "1", ")", "\n", "pool_input", "=", "pool_input", "/", "pool_input", ".", "norm", "(", "2", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "pool_input", ")", "\n", "pool_input", "=", "pool_input", ".", "squeeze", "(", "1", ")", "\n", "\n", "return", "pool_input", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.Siamese.Siamese.forward": [[108, 143], ["x.view.view.size", "x.view.view.view", "probe_x.contiguous.contiguous.contiguous", "gallery_x.contiguous.contiguous.contiguous", "Siamese.Siamese.self_attention", "Siamese.Siamese.self_attention", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pooled_probe.unsqueeze.unsqueeze.size", "pooled_gallery.unsqueeze.unsqueeze.size", "pooled_gallery.unsqueeze.unsqueeze.unsqueeze", "pooled_probe.unsqueeze.unsqueeze.unsqueeze", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "Siamese.Siamese.view().contiguous", "Siamese.Siamese.classifierBN", "Siamese.Siamese.classifierlinear", "cls_encode.view.view.view", "RuntimeError", "x.view.view.size", "int", "Siamese.Siamese.view"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.models.Siamese.Siamese.self_attention", "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.Siamese.Siamese.self_attention"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "xsize", "=", "x", ".", "size", "(", ")", "\n", "sample_num", "=", "xsize", "[", "0", "]", "\n", "\n", "if", "sample_num", "%", "2", "!=", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"the batch size should be even number!\"", ")", "\n", "\n", "", "seq_len", "=", "x", ".", "size", "(", ")", "[", "1", "]", "# 8", "\n", "x", "=", "x", ".", "view", "(", "int", "(", "sample_num", "/", "2", ")", ",", "2", ",", "seq_len", ",", "-", "1", ")", "\n", "\n", "probe_x", "=", "x", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "probe_x", "=", "probe_x", ".", "contiguous", "(", ")", "\n", "gallery_x", "=", "x", "[", ":", ",", "1", ",", ":", ",", ":", "]", "\n", "gallery_x", "=", "gallery_x", ".", "contiguous", "(", ")", "\n", "\n", "pooled_probe", "=", "self", ".", "self_attention", "(", "probe_x", ")", "\n", "pooled_gallery", "=", "self", ".", "self_attention", "(", "gallery_x", ")", "\n", "\n", "siamese_out", "=", "torch", ".", "cat", "(", "(", "pooled_probe", ",", "pooled_gallery", ")", ")", "\n", "probesize", "=", "pooled_probe", ".", "size", "(", ")", "\n", "gallerysize", "=", "pooled_gallery", ".", "size", "(", ")", "\n", "probe_batch", "=", "probesize", "[", "0", "]", "\n", "gallery_batch", "=", "gallerysize", "[", "0", "]", "\n", "\n", "pooled_gallery", "=", "pooled_gallery", ".", "unsqueeze", "(", "0", ")", "\n", "pooled_probe", "=", "pooled_probe", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "diff", "=", "pooled_probe", "-", "pooled_gallery", "\n", "diff", "=", "torch", ".", "pow", "(", "diff", ",", "2", ")", "\n", "diff", "=", "diff", ".", "view", "(", "probe_batch", "*", "gallery_batch", ",", "-", "1", ")", ".", "contiguous", "(", ")", "\n", "diff", "=", "self", ".", "classifierBN", "(", "diff", ")", "\n", "cls_encode", "=", "self", ".", "classifierlinear", "(", "diff", ")", "\n", "cls_encode", "=", "cls_encode", ".", "view", "(", "probe_batch", ",", "gallery_batch", ",", "-", "1", ")", "\n", "\n", "return", "cls_encode", ",", "siamese_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.Siamese.weights_init_kaiming": [[18, 31], ["classname.find", "torch.nn.init.kaiming_uniform_", "torch.nn.init.constant_", "classname.find", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "classname.find", "torch.nn.init.constant_", "torch.nn.init.constant_"], "function", ["None"], ["def", "weights_init_kaiming", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "if", "m", ".", "affine", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.Siamese.weights_init_classifier": [[33, 40], ["classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "", "def", "weights_init_classifier", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "# if m.bias:", "\n", "#     nn.init.constant_(m.bias, 0.0)", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnet.ResNet.__init__": [[21, 64], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.kaiming_uniform_", "torch.kaiming_uniform_", "torch.kaiming_uniform_", "torch.constant_", "torch.constant_", "torch.constant_", "KeyError", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "resnet.ResNet.reset_params", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.kaiming_uniform_", "torch.kaiming_uniform_", "torch.kaiming_uniform_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__", "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnet.ResNet.reset_params"], ["def", "__init__", "(", "self", ",", "depth", ",", "pretrained", "=", "True", ",", "cut_at_pooling", "=", "False", ",", "\n", "num_features", "=", "0", ",", "dropout", "=", "0", ",", "numclasses", "=", "0", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "cut_at_pooling", "=", "cut_at_pooling", "\n", "\n", "# Construct base (pretrain) resnet", "\n", "if", "depth", "not", "in", "ResNet", ".", "__factory", ":", "\n", "            ", "raise", "KeyError", "(", "\"Unsupported depth:\"", ",", "depth", ")", "\n", "", "self", ".", "base", "=", "ResNet", ".", "__factory", "[", "depth", "]", "(", "pretrained", "=", "pretrained", ")", "\n", "self", ".", "base", ".", "layer4", "[", "0", "]", ".", "conv2", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "self", ".", "base", ".", "layer4", "[", "0", "]", ".", "downsample", "[", "0", "]", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "base", ".", "fc", ".", "in_features", ",", "numclasses", ")", "# 2048, C", "\n", "init", ".", "kaiming_uniform_", "(", "self", ".", "classifier", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "init", ".", "constant_", "(", "self", ".", "classifier", ".", "bias", ",", "0", ")", "\n", "if", "not", "self", ".", "cut_at_pooling", ":", "\n", "            ", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "has_embedding", "=", "num_features", ">", "0", "\n", "\n", "out_planes", "=", "self", ".", "base", ".", "fc", ".", "in_features", "\n", "self", ".", "feat_bn2", "=", "nn", ".", "BatchNorm1d", "(", "out_planes", ")", "\n", "init", ".", "constant_", "(", "self", ".", "feat_bn2", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "self", ".", "feat_bn2", ".", "bias", ",", "0", ")", "\n", "# Append new layers", "\n", "if", "self", ".", "has_embedding", ":", "\n", "                ", "self", ".", "feat", "=", "nn", ".", "Linear", "(", "out_planes", ",", "self", ".", "num_features", ")", "\n", "self", ".", "feat_bn", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "num_features", ")", "\n", "init", ".", "kaiming_uniform_", "(", "self", ".", "feat", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "init", ".", "constant_", "(", "self", ".", "feat", ".", "bias", ",", "0", ")", "\n", "init", ".", "constant_", "(", "self", ".", "feat_bn", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "self", ".", "feat_bn", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "num_features", "=", "out_planes", "\n", "\n", "", "if", "self", ".", "dropout", ">", "0", ":", "\n", "                ", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout", ")", "\n", "\n", "", "", "if", "not", "self", ".", "pretrained", ":", "\n", "            ", "self", ".", "reset_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnet.ResNet.forward": [[65, 97], ["imgs.view.view.size", "imgs.view.view.view", "resnet.ResNet.base._modules.items", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "module.view", "resnet.ResNet.feat_bn2", "raw.view.view.squeeze", "raw.view.view.view", "resnet.ResNet.feat", "resnet.ResNet.feat_bn", "module.squeeze", "module.view", "module", "module.size", "raw.view.view.norm().unsqueeze().expand_as", "module.norm().unsqueeze().expand_as", "module", "module.size", "raw.view.view.norm().unsqueeze", "module.norm().unsqueeze", "raw.view.view.norm", "module.norm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "imgs", ")", ":", "\n", "# todo: change the base model", "\n", "        ", "img_size", "=", "imgs", ".", "size", "(", ")", "\n", "# motion_size = motions.size()", "\n", "batch_sz", "=", "img_size", "[", "0", "]", "\n", "seq_len", "=", "img_size", "[", "1", "]", "\n", "imgs", "=", "imgs", ".", "view", "(", "-", "1", ",", "img_size", "[", "2", "]", ",", "img_size", "[", "3", "]", ",", "img_size", "[", "4", "]", ")", "\n", "\n", "for", "name", ",", "module", "in", "self", ".", "base", ".", "_modules", ".", "items", "(", ")", ":", "\n", "\n", "            ", "if", "name", "==", "'conv1'", ":", "\n", "# x = module(imgs) + self.conv0(motions)", "\n", "                ", "x", "=", "module", "(", "imgs", ")", "\n", "continue", "\n", "", "if", "name", "==", "'avgpool'", ":", "\n", "                ", "break", "\n", "", "x", "=", "module", "(", "x", ")", "\n", "\n", "", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "# torch.Size([64, 2048, 1, 1])", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# torch.Size([64, 2048])", "\n", "raw", "=", "self", ".", "feat_bn2", "(", "x", ")", "\n", "raw", "=", "raw", "/", "raw", ".", "norm", "(", "2", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "raw", ")", "\n", "raw", "=", "raw", ".", "squeeze", "(", "1", ")", "\n", "raw", "=", "raw", ".", "view", "(", "batch_sz", ",", "seq_len", ",", "-", "1", ")", "# torch.Size([8, 8, 2048])", "\n", "\n", "x", "=", "self", ".", "feat", "(", "x", ")", "# 64,128", "\n", "x", "=", "self", ".", "feat_bn", "(", "x", ")", "\n", "\n", "x", "=", "x", "/", "x", ".", "norm", "(", "2", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "x", ")", "\n", "x", "=", "x", ".", "squeeze", "(", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_sz", ",", "seq_len", ",", "-", "1", ")", "# 8,8,128", "\n", "return", "x", ",", "raw", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnet.ResNet.reset_params": [[98, 111], ["resnet.ResNet.modules", "isinstance", "torch.kaiming_uniform_", "torch.kaiming_uniform_", "torch.kaiming_uniform_", "isinstance", "torch.constant", "torch.constant", "torch.constant", "torch.constant", "torch.constant", "torch.constant", "torch.constant", "torch.constant", "torch.constant", "isinstance", "torch.normal", "torch.normal", "torch.normal", "torch.constant", "torch.constant", "torch.constant"], "methods", ["None"], ["", "def", "reset_params", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "normal", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnet.ResNet.guiyihua": [[112, 117], ["x.min", "x.max"], "methods", ["None"], ["", "", "", "", "def", "guiyihua", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_min", "=", "x", ".", "min", "(", ")", "\n", "x_max", "=", "x", ".", "max", "(", ")", "\n", "x_1", "=", "(", "x", "-", "x_min", ")", "/", "(", "x_max", "-", "x_min", ")", "\n", "return", "x_1", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnet.resnet18": [[119, 121], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "18", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnet.resnet34": [[123, 125], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet34", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "34", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnet.resnet50": [[127, 129], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "50", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnet.resnet101": [[131, 133], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "101", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnet.resnet152": [[135, 137], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet152", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "152", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.basebranch.Backbone.__init__": [[22, 50], ["torch.nn.Module.__init__", "resnets1.resnet50_s1", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__", "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.resnets1.resnet50_s1"], ["\t", "def", "__init__", "(", "self", ",", "height", "=", "256", ",", "width", "=", "128", ")", ":", "\n", "\t\t", "super", "(", "Backbone", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# resnet50", "\n", "resnet2d", "=", "resnet50_s1", "(", "pretrained", "=", "True", ")", "\n", "\n", "self", ".", "base", "=", "nn", ".", "Sequential", "(", "\n", "resnet2d", ".", "conv1", ",", "\n", "resnet2d", ".", "bn1", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "resnet2d", ".", "maxpool", ",", "\n", "resnet2d", ".", "layer1", ",", "\n", "resnet2d", ".", "layer2", ",", "\n", "resnet2d", ".", "layer3", ",", "\n", "resnet2d", ".", "layer4", ",", "\n", ")", "\n", "\n", "self", ".", "glo_fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "2048", ",", "1024", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "1024", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "corr_atte", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "2048", "+", "1024", ",", "1024", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "1024", ")", ",", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "256", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "1", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.basebranch.Backbone.forward": [[52, 69], ["basebranch.Backbone.base", "basebranch.Backbone.view", "basebranch.Backbone.view.mean().mean().mean", "basebranch.Backbone.glo_fc().view().contiguous().expand().contiguous().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "basebranch.Backbone.corr_atte", "torch.sigmoid().view().contiguous", "torch.sigmoid().view().contiguous", "torch.sigmoid().view().contiguous", "basebranch.Backbone.size", "basebranch.Backbone.size", "basebranch.Backbone.size", "basebranch.Backbone.view.mean().mean", "basebranch.Backbone.glo_fc().view().contiguous().expand().contiguous", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "basebranch.Backbone.view.mean", "basebranch.Backbone.glo_fc().view().contiguous().expand", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "basebranch.Backbone.glo_fc().view().contiguous", "basebranch.Backbone.glo_fc().view", "basebranch.Backbone.glo_fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "b", ",", "t", ")", ":", "\n", "\n", "\t\t", "x", "=", "self", ".", "base", "(", "x", ")", "\n", "\n", "x_4", "=", "x", ".", "view", "(", "b", ",", "t", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "\n", "x_glo", "=", "x_4", ".", "mean", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "glo", "=", "self", ".", "glo_fc", "(", "x_glo", ")", ".", "view", "(", "b", ",", "1", ",", "1024", ",", "1", ",", "1", ")", ".", "contiguous", "(", ")", ".", "expand", "(", "b", ",", "t", ",", "1024", ",", "16", ",", "8", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", "*", "t", ",", "1024", ",", "16", ",", "8", ")", "\n", "\n", "x_corr", "=", "torch", ".", "cat", "(", "(", "x", ",", "glo", ")", ",", "dim", "=", "1", ")", "\n", "corr_map", "=", "self", ".", "corr_atte", "(", "x_corr", ")", "\n", "corr_map", "=", "F", ".", "sigmoid", "(", "corr_map", ")", ".", "view", "(", "b", "*", "t", ",", "1", ",", "16", ",", "8", ")", ".", "contiguous", "(", ")", "\n", "\n", "x_corr", "=", "x", "*", "corr_map", "\n", "x_uncorr", "=", "x", "*", "(", "1", "-", "corr_map", ")", "\n", "\n", "return", "x_uncorr", ",", "x_corr", ",", "corr_map", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.__init__.names": [[16, 18], ["sorted", "__factory.keys"], "function", ["None"], ["", "elif", "not", "torch", ".", "is_tensor", "(", "ndarray", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Cannot convert {} to torch tensor\"", "\n", ".", "format", "(", "type", "(", "ndarray", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.__init__.create": [[20, 50], ["KeyError"], "function", ["None"], ["\n", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.train.trainer.BaseTrainer.__init__": [[18, 24], ["object.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "criterion", ")", ":", "\n", "        ", "super", "(", "BaseTrainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "criterion_ver", "=", "criterion", "\n", "self", ".", "criterion_ver_uncorr", "=", "criterion", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.train.trainer.BaseTrainer.train": [[25, 78], ["trainer.BaseTrainer.model.train", "utils.meters.AverageMeter", "utils.meters.AverageMeter", "utils.meters.AverageMeter", "utils.meters.AverageMeter", "utils.meters.AverageMeter", "utils.meters.AverageMeter", "time.time", "enumerate", "utils.meters.AverageMeter.update", "trainer.BaseTrainer._parse_data", "trainer.BaseTrainer._forward", "utils.meters.AverageMeter.update", "utils.meters.AverageMeter.update", "utils.meters.AverageMeter.update", "utils.meters.AverageMeter.update", "optimizer1.zero_grad", "loss.backward", "optimizer1.step", "utils.meters.AverageMeter.update", "time.time", "len", "trainer.BaseTrainer.writer.add_scalar", "trainer.BaseTrainer.writer.add_scalar", "loss.item", "targets.size", "targets.size", "targets.size", "targets.size", "print", "time.time", "time.time", "len"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.train.trainer.SEQTrainer.train", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.meters.AverageMeter.update", "home.repos.pwc.inspect_result.flysnowtiger_GRL.train.trainer.SEQTrainer._parse_data", "home.repos.pwc.inspect_result.flysnowtiger_GRL.train.trainer.SEQTrainer._forward", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.meters.AverageMeter.update", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.meters.AverageMeter.update", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.meters.AverageMeter.update", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.meters.AverageMeter.update", "home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIM.backward", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.meters.AverageMeter.update"], ["", "def", "train", "(", "self", ",", "epoch", ",", "data_loader", ",", "optimizer1", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "precisions", "=", "AverageMeter", "(", ")", "\n", "precisions1", "=", "AverageMeter", "(", ")", "\n", "precisions2", "=", "AverageMeter", "(", ")", "\n", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "inputs", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "inputs", ",", "targets", "=", "self", ".", "_parse_data", "(", "inputs", ")", "\n", "\n", "all_loss", ",", "uncorr_prec_id_vid", ",", "corr_prec_id_vid", ",", "corr_prec_id_frame", "=", "self", ".", "_forward", "(", "inputs", ",", "targets", ",", "i", ",", "epoch", ")", "\n", "loss", "=", "all_loss", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "targets", ".", "size", "(", "0", ")", ")", "\n", "\n", "precisions", ".", "update", "(", "uncorr_prec_id_vid", ",", "targets", ".", "size", "(", "0", ")", ")", "\n", "precisions1", ".", "update", "(", "corr_prec_id_vid", ",", "targets", ".", "size", "(", "0", ")", ")", "\n", "precisions2", ".", "update", "(", "corr_prec_id_frame", ",", "targets", ".", "size", "(", "0", ")", ")", "\n", "\n", "\n", "optimizer1", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer1", ".", "step", "(", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print_freq", "=", "100", "\n", "num_step", "=", "len", "(", "data_loader", ")", "\n", "num_iter", "=", "num_step", "*", "epoch", "+", "i", "\n", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'train/total_loss_step'", ",", "losses", ".", "val", ",", "num_iter", ")", "\n", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'train/total_loss_avg'", ",", "losses", ".", "avg", ",", "num_iter", ")", "\n", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch: [{}][{}/{}]\\t'", "\n", "'Loss {:.3f} ({:.3f})\\t'", "\n", "'uncorr_vid {:.2%} ({:.2%})\\t'", "\n", "'corr_vid {:.2%} ({:.2%})\\t'", "\n", "'corr_frame {:.2%} ({:.2%})\\t'", "\n", ".", "format", "(", "epoch", ",", "i", "+", "1", ",", "len", "(", "data_loader", ")", ",", "losses", ".", "val", ",", "losses", ".", "avg", ",", "\n", "precisions", ".", "val", ",", "precisions", ".", "avg", ",", "\n", "precisions1", ".", "val", ",", "precisions1", ".", "avg", ",", "\n", "precisions2", ".", "val", ",", "precisions2", ".", "avg", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.train.trainer.BaseTrainer._parse_data": [[80, 82], ["None"], "methods", ["None"], ["", "", "", "def", "_parse_data", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.train.trainer.BaseTrainer._forward": [[83, 85], ["None"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "inputs", ",", "targets", ",", "i", ",", "epoch", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.train.trainer.SEQTrainer.__init__": [[89, 98], ["trainer.BaseTrainer.__init__", "tensorboardX.SummaryWriter"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__"], ["        ", "def", "__init__", "(", "self", ",", "cnn_model", ",", "siamese_model", ",", "siamese_model_uncorr", ",", "criterion_veri", ",", "criterion_corr", ",", "criterion_uncorr", ",", "logdir", ")", ":", "\n", "            ", "super", "(", "SEQTrainer", ",", "self", ")", ".", "__init__", "(", "cnn_model", ",", "criterion_veri", ")", "\n", "self", ".", "siamese_model", "=", "siamese_model", "\n", "self", ".", "siamese_model_uncorr", "=", "siamese_model_uncorr", "\n", "\n", "self", ".", "criterion_uncorr", "=", "criterion_uncorr", "\n", "self", ".", "criterion_corr", "=", "criterion_corr", "\n", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "logdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.train.trainer.SEQTrainer._parse_data": [[99, 106], ["imgs.to.to.to", "pids.to"], "methods", ["None"], ["", "def", "_parse_data", "(", "self", ",", "inputs", ")", ":", "\n", "            ", "imgs", ",", "pids", ",", "_", "=", "inputs", "\n", "imgs", "=", "imgs", ".", "to", "(", "self", ".", "device", ")", "\n", "inputs", "=", "[", "imgs", "]", "\n", "\n", "targets", "=", "pids", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "inputs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.train.trainer.SEQTrainer._forward": [[107, 171], ["inputs[].size", "inputs[].size", "trainer.SEQTrainer.model", "x_corr.view", "targets.view.view.unsqueeze", "targetX.squeeze.squeeze.expand", "targetX.squeeze.squeeze.contiguous", "targetX.squeeze.squeeze.view", "targetX.squeeze.squeeze.squeeze", "trainer.SEQTrainer.criterion_corr", "reid.evaluator.accuracy", "targets.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "trainer.SEQTrainer.siamese_model", "trainer.SEQTrainer.criterion_corr", "reid.evaluator.accuracy", "criterion_triplet().mean", "encode_scores.size", "encode_scores.view", "torch.softmax", "torch.softmax", "encodemat.view.view.view", "trainer.SEQTrainer.criterion_ver", "trainer.SEQTrainer.siamese_model_uncorr", "trainer.SEQTrainer.criterion_uncorr", "reid.evaluator.accuracy", "encode_scores.size", "encode_scores.view", "torch.softmax", "torch.softmax", "encodemat.view.view.view", "trainer.SEQTrainer.criterion_ver_uncorr", "int", "criterion_triplet"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.eva_functions.accuracy", "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.eva_functions.accuracy", "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.eva_functions.accuracy"], ["", "def", "_forward", "(", "self", ",", "inputs", ",", "targets", ",", "i", ",", "epoch", ")", ":", "\n", "            ", "batch_size", "=", "inputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "seq_len", "=", "inputs", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "\n", "x_uncorr", ",", "x_corr", "=", "self", ".", "model", "(", "inputs", "[", "0", "]", ")", "\n", "\n", "# uncorr_id_loss_vid, output_id = self.criterion_uncorr(x_uncorr, targets)", "\n", "# uncorr_prec_id_vid, = accuracy(output_id.data, targets.data)", "\n", "\n", "# expand the target label ID loss", "\n", "frame_corr", "=", "x_corr", ".", "view", "(", "batch_size", "*", "seq_len", ",", "-", "1", ")", "\n", "\n", "targetX", "=", "targets", ".", "unsqueeze", "(", "1", ")", "\n", "targetX", "=", "targetX", ".", "expand", "(", "batch_size", ",", "seq_len", ")", "\n", "targetX", "=", "targetX", ".", "contiguous", "(", ")", "\n", "targetX", "=", "targetX", ".", "view", "(", "batch_size", "*", "seq_len", ",", "-", "1", ")", "#", "\n", "targetX", "=", "targetX", ".", "squeeze", "(", "1", ")", "\n", "\n", "#######", "\n", "corr_id_loss_frame", ",", "output_id", "=", "self", ".", "criterion_corr", "(", "frame_corr", ",", "targetX", ")", "\n", "corr_prec_id_frame", ",", "=", "accuracy", "(", "output_id", ".", "data", ",", "targetX", ".", "data", ")", "\n", "\n", "# verification label", "\n", "targets", "=", "targets", ".", "data", "\n", "targets", "=", "targets", ".", "view", "(", "int", "(", "batch_size", "/", "2", ")", ",", "-", "1", ")", "\n", "tar_probe", "=", "targets", "[", ":", ",", "0", "]", "\n", "tar_gallery", "=", "targets", "[", ":", ",", "1", "]", "\n", "\n", "target", "=", "torch", ".", "cat", "(", "(", "tar_probe", ",", "tar_gallery", ")", ")", "\n", "\n", "encode_scores", ",", "siamese_out", "=", "self", ".", "siamese_model", "(", "x_corr", ")", "\n", "corr_id_loss_vid", ",", "output_id", "=", "self", ".", "criterion_corr", "(", "siamese_out", ",", "target", ")", "\n", "corr_prec_id_vid", ",", "=", "accuracy", "(", "output_id", ".", "data", ",", "target", ".", "data", ")", "\n", "\n", "corr_loss_tri", "=", "criterion_triplet", "(", "siamese_out", ",", "target", ")", ".", "mean", "(", ")", "\n", "\n", "### verification loss for pair-wise video feature", "\n", "encode_size", "=", "encode_scores", ".", "size", "(", ")", "\n", "encodemat", "=", "encode_scores", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "encodemat", "=", "F", ".", "softmax", "(", "encodemat", ",", "dim", "=", "-", "1", ")", "\n", "encodemat", "=", "encodemat", ".", "view", "(", "encode_size", "[", "0", "]", ",", "encode_size", "[", "1", "]", ",", "2", ")", "\n", "encodemat0", "=", "encodemat", "[", ":", ",", ":", ",", "1", "]", "\n", "corr_loss_ver", ",", "corr_prec_ver", "=", "self", ".", "criterion_ver", "(", "encodemat0", ",", "tar_probe", ",", "tar_gallery", ")", "\n", "\n", "encode_scores", ",", "siamese_out", "=", "self", ".", "siamese_model_uncorr", "(", "x_uncorr", ")", "\n", "uncorr_id_loss_vid", ",", "output_id", "=", "self", ".", "criterion_uncorr", "(", "siamese_out", ",", "target", ")", "\n", "uncorr_prec_id_vid", ",", "=", "accuracy", "(", "output_id", ".", "data", ",", "target", ".", "data", ")", "\n", "\n", "# uncorr_loss_tri = criterion_triplet(siamese_out, target).mean()", "\n", "\n", "encode_size", "=", "encode_scores", ".", "size", "(", ")", "\n", "encodemat", "=", "encode_scores", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "encodemat", "=", "F", ".", "softmax", "(", "encodemat", ",", "dim", "=", "-", "1", ")", "\n", "encodemat", "=", "encodemat", ".", "view", "(", "encode_size", "[", "0", "]", ",", "encode_size", "[", "1", "]", ",", "2", ")", "\n", "encodemat0", "=", "encodemat", "[", ":", ",", ":", ",", "1", "]", "\n", "uncorr_loss_ver", ",", "uncorr_prec_ver", "=", "self", ".", "criterion_ver_uncorr", "(", "encodemat0", ",", "tar_probe", ",", "tar_gallery", ")", "\n", "\n", "\n", "corr_loss", "=", "corr_id_loss_frame", "+", "corr_id_loss_vid", "+", "corr_loss_ver", "*", "20", "+", "corr_loss_tri", "\n", "uncorr_loss", "=", "uncorr_id_loss_vid", "#+ corr_loss_ver*10", "\n", "\n", "all_loss", "=", "uncorr_loss", "+", "corr_loss", "\n", "\n", "return", "all_loss", ",", "uncorr_prec_id_vid", ",", "corr_prec_id_vid", ",", "corr_prec_id_frame", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.train.trainer.SEQTrainer.train": [[172, 177], ["trainer.SEQTrainer.siamese_model.train", "trainer.SEQTrainer.siamese_model_uncorr.train", "trainer.BaseTrainer.train"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.train.trainer.SEQTrainer.train", "home.repos.pwc.inspect_result.flysnowtiger_GRL.train.trainer.SEQTrainer.train", "home.repos.pwc.inspect_result.flysnowtiger_GRL.train.trainer.SEQTrainer.train"], ["", "def", "train", "(", "self", ",", "epoch", ",", "data_loader", ",", "optimizer1", ")", ":", "\n", "            ", "self", ".", "siamese_model", ".", "train", "(", ")", "\n", "self", ".", "siamese_model_uncorr", ".", "train", "(", ")", "\n", "\n", "super", "(", "SEQTrainer", ",", "self", ")", ".", "train", "(", "epoch", ",", "data_loader", ",", "optimizer1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.rerank.re_ranking": [[37, 105], ["numpy.concatenate", "numpy.power().astype", "numpy.transpose", "numpy.zeros_like().astype", "numpy.argsort().astype", "range", "range", "numpy.zeros_like", "range", "range", "numpy.unique", "numpy.exp", "numpy.zeros_like", "range", "invIndex.append", "numpy.zeros", "range", "numpy.concatenate", "numpy.concatenate", "numpy.power", "numpy.max", "numpy.zeros_like", "numpy.argsort", "numpy.where", "len", "numpy.sum", "numpy.mean", "numpy.where", "len", "numpy.where", "len", "numpy.append", "numpy.where", "numpy.minimum", "numpy.intersect1d", "len", "int", "int", "numpy.around", "numpy.around"], "function", ["None"], ["def", "re_ranking", "(", "q_g_dist", ",", "q_q_dist", ",", "g_g_dist", ",", "k1", "=", "20", ",", "k2", "=", "6", ",", "lambda_value", "=", "0.3", ")", ":", "\n", "# The following naming, e.g. gallery_num, is different from outer scope.", "\n", "# Don't care about it.", "\n", "\n", "    ", "original_dist", "=", "np", ".", "concatenate", "(", "\n", "[", "np", ".", "concatenate", "(", "[", "q_q_dist", ",", "q_g_dist", "]", ",", "axis", "=", "1", ")", ",", "\n", "np", ".", "concatenate", "(", "[", "q_g_dist", ".", "T", ",", "g_g_dist", "]", ",", "axis", "=", "1", ")", "]", ",", "\n", "axis", "=", "0", ")", "# <class 'tuple'>: (11310, 11310)", "\n", "original_dist", "=", "np", ".", "power", "(", "original_dist", ",", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "# <class 'tuple'>: (11310, 11310)", "\n", "original_dist", "=", "np", ".", "transpose", "(", "1.", "*", "original_dist", "/", "np", ".", "max", "(", "original_dist", ",", "axis", "=", "0", ")", ")", "# <class 'tuple'>: (11310, 11310)", "\n", "V", "=", "np", ".", "zeros_like", "(", "original_dist", ")", ".", "astype", "(", "np", ".", "float32", ")", "# <class 'tuple'>: (11310, 11310)", "\n", "initial_rank", "=", "np", ".", "argsort", "(", "original_dist", ")", ".", "astype", "(", "np", ".", "int32", ")", "# <class 'tuple'>: (11310, 11310)", "\n", "\n", "query_num", "=", "q_g_dist", ".", "shape", "[", "0", "]", "# 1980", "\n", "gallery_num", "=", "q_g_dist", ".", "shape", "[", "0", "]", "+", "q_g_dist", ".", "shape", "[", "1", "]", "# 11310", "\n", "all_num", "=", "gallery_num", "# 11310", "\n", "\n", "for", "i", "in", "range", "(", "all_num", ")", ":", "\n", "# k-reciprocal neighbors", "\n", "        ", "forward_k_neigh_index", "=", "initial_rank", "[", "i", ",", ":", "k1", "+", "1", "]", "# 21", "\n", "backward_k_neigh_index", "=", "initial_rank", "[", "forward_k_neigh_index", ",", ":", "k1", "+", "1", "]", "# <class 'tuple'>: (21, 21)", "\n", "fi", "=", "np", ".", "where", "(", "backward_k_neigh_index", "==", "i", ")", "[", "0", "]", "# [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]", "\n", "k_reciprocal_index", "=", "forward_k_neigh_index", "[", "fi", "]", "# <class 'tuple'>: (20,)", "\n", "k_reciprocal_expansion_index", "=", "k_reciprocal_index", "# <class 'tuple'>: (20,)", "\n", "for", "j", "in", "range", "(", "len", "(", "k_reciprocal_index", ")", ")", ":", "\n", "            ", "candidate", "=", "k_reciprocal_index", "[", "j", "]", "# 0", "\n", "candidate_forward_k_neigh_index", "=", "initial_rank", "[", "candidate", ",", ":", "int", "(", "np", ".", "around", "(", "k1", "/", "2.", ")", ")", "+", "1", "]", "# <class 'tuple'>: (11,)", "\n", "candidate_backward_k_neigh_index", "=", "initial_rank", "[", "candidate_forward_k_neigh_index", ",", "\n", ":", "int", "(", "np", ".", "around", "(", "k1", "/", "2.", ")", ")", "+", "1", "]", "# <class 'tuple'>: (11, 11)", "\n", "fi_candidate", "=", "np", ".", "where", "(", "candidate_backward_k_neigh_index", "==", "candidate", ")", "[", "0", "]", "# <class 'tuple'>: (7,)", "\n", "candidate_k_reciprocal_index", "=", "candidate_forward_k_neigh_index", "[", "fi_candidate", "]", "# [   0 5238 5251 5245    1 5252    2]", "\n", "if", "len", "(", "np", ".", "intersect1d", "(", "candidate_k_reciprocal_index", ",", "k_reciprocal_index", ")", ")", ">", "2.", "/", "3", "*", "len", "(", "\n", "candidate_k_reciprocal_index", ")", ":", "\n", "                ", "k_reciprocal_expansion_index", "=", "np", ".", "append", "(", "k_reciprocal_expansion_index", ",", "candidate_k_reciprocal_index", ")", "\n", "\n", "", "", "k_reciprocal_expansion_index", "=", "np", ".", "unique", "(", "k_reciprocal_expansion_index", ")", "# <class 'tuple'>: (23,)", "\n", "weight", "=", "np", ".", "exp", "(", "-", "original_dist", "[", "i", ",", "k_reciprocal_expansion_index", "]", ")", "# <class 'tuple'>: (23,)", "\n", "V", "[", "i", ",", "k_reciprocal_expansion_index", "]", "=", "1.", "*", "weight", "/", "np", ".", "sum", "(", "weight", ")", "\n", "", "original_dist", "=", "original_dist", "[", ":", "query_num", ",", "]", "# <class 'tuple'>: (11310, 11310)", "\n", "if", "k2", "!=", "1", ":", "\n", "        ", "V_qe", "=", "np", ".", "zeros_like", "(", "V", ",", "dtype", "=", "np", ".", "float32", ")", "# <class 'tuple'>: (11310, 11310)", "\n", "for", "i", "in", "range", "(", "all_num", ")", ":", "\n", "            ", "V_qe", "[", "i", ",", ":", "]", "=", "np", ".", "mean", "(", "V", "[", "initial_rank", "[", "i", ",", ":", "k2", "]", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "", "V", "=", "V_qe", "# <class 'tuple'>: (11310, 11310)", "\n", "del", "V_qe", "\n", "", "del", "initial_rank", "\n", "invIndex", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "gallery_num", ")", ":", "\n", "        ", "invIndex", ".", "append", "(", "np", ".", "where", "(", "V", "[", ":", ",", "i", "]", "!=", "0", ")", "[", "0", "]", ")", "\n", "\n", "", "jaccard_dist", "=", "np", ".", "zeros_like", "(", "original_dist", ",", "dtype", "=", "np", ".", "float32", ")", "# <class 'tuple'>: (1980, 11310)", "\n", "\n", "for", "i", "in", "range", "(", "query_num", ")", ":", "\n", "        ", "temp_min", "=", "np", ".", "zeros", "(", "shape", "=", "[", "1", ",", "gallery_num", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "indNonZero", "=", "np", ".", "where", "(", "V", "[", "i", ",", ":", "]", "!=", "0", ")", "[", "0", "]", "\n", "indImages", "=", "[", "]", "\n", "indImages", "=", "[", "invIndex", "[", "ind", "]", "for", "ind", "in", "indNonZero", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "indNonZero", ")", ")", ":", "\n", "            ", "temp_min", "[", "0", ",", "indImages", "[", "j", "]", "]", "=", "temp_min", "[", "0", ",", "indImages", "[", "j", "]", "]", "+", "np", ".", "minimum", "(", "V", "[", "i", ",", "indNonZero", "[", "j", "]", "]", ",", "\n", "V", "[", "indImages", "[", "j", "]", ",", "indNonZero", "[", "j", "]", "]", ")", "\n", "", "jaccard_dist", "[", "i", "]", "=", "1", "-", "temp_min", "/", "(", "2.", "-", "temp_min", ")", "\n", "\n", "", "final_dist", "=", "jaccard_dist", "*", "(", "1", "-", "lambda_value", ")", "+", "original_dist", "*", "lambda_value", "# <class 'tuple'>: (1980, 11310)", "\n", "del", "original_dist", "\n", "del", "V", "\n", "del", "jaccard_dist", "\n", "final_dist", "=", "final_dist", "[", ":", "query_num", ",", "query_num", ":", "]", "# <class 'tuple'>: (1980, 9330)", "\n", "return", "final_dist", "\n", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.attevaluator.ATTEvaluator.__init__": [[51, 57], ["object.__init__", "torch.nn.Softmax"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cnn_model", ",", "Siamese_model", ",", "only_eval", ")", ":", "\n", "        ", "super", "(", "ATTEvaluator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cnn_model", "=", "cnn_model", "\n", "self", ".", "siamese_model", "=", "Siamese_model", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "only_eval", "=", "only_eval", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.attevaluator.ATTEvaluator.extract_feature": [[58, 124], ["torch.no_grad", "attevaluator.ATTEvaluator.cnn_model.eval", "attevaluator.ATTEvaluator.siamese_model.eval", "enumerate", "torch.cat", "numpy.asarray", "numpy.asarray", "imgs.to.to.size", "imgs.to.to.view().cuda", "torch.cuda.empty_cache", "imgs.to.to.size", "imgs.to.to.view", "utils.to_torch", "torch.device", "imgs.to.to.to", "torch.cuda.empty_cache", "torch.no_grad", "torch.no_grad", "attevaluator.ATTEvaluator.cnn_model", "attevaluator.ATTEvaluator.siamese_model.self_attention", "torch.cat", "torch.cat.append", "numpy.asarray.extend", "numpy.asarray.extend", "imgs.to.to.view", "int", "range", "torch.cat", "torch.mean", "torch.cat.append", "numpy.asarray.extend", "numpy.asarray.extend", "attevaluator.ATTEvaluator.cnn_model", "attevaluator.ATTEvaluator.siamese_model.self_attention", "torch.cat", "torch.cat.view", "torch.mean", "torch.cat.append", "numpy.asarray.extend", "numpy.asarray.extend", "torch.cuda.is_available", "math.ceil", "imgs[].cuda", "attevaluator.ATTEvaluator.cnn_model", "attevaluator.ATTEvaluator.siamese_model.self_attention", "torch.cat", "torch.mean.append", "torch.mean.unsqueeze", "torch.cat.unsqueeze", "feats_corr.mean", "feats_corr.mean", "feats_corr.mean"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.__init__.to_torch", "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.Siamese.Siamese.self_attention", "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.Siamese.Siamese.self_attention", "home.repos.pwc.inspect_result.flysnowtiger_GRL.models.Siamese.Siamese.self_attention"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "extract_feature", "(", "self", ",", "data_loader", ")", ":", "\n", "\n", "        ", "self", ".", "cnn_model", ".", "eval", "(", ")", "\n", "self", ".", "siamese_model", ".", "eval", "(", ")", "\n", "\n", "qf", ",", "q_pids", ",", "q_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "inputs", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "imgs", ",", "pids", ",", "camids", "=", "inputs", "\n", "\n", "if", "self", ".", "only_eval", ":", "\n", "                ", "b", ",", "n", ",", "s", ",", "c", ",", "h", ",", "w", "=", "imgs", ".", "size", "(", ")", "# 1, 5, 8, c, h, w", "\n", "imgs", "=", "imgs", ".", "view", "(", "b", "*", "n", ",", "s", ",", "c", ",", "h", ",", "w", ")", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "if", "b", "*", "n", ">", "8", ":", "# \u5982\u679c\u5e8f\u5217\u8fc7\u957f\uff0c\u5219\u5206\u6210\u82e5\u5e72\u4e2a15\u4e2abatch_size", "\n", "                        ", "feat_list", "=", "[", "]", "# \u5f04\u4e00\u4e2a\u4e34\u65f6\u5217\u8868\uff0c\u5b58\u653e\u7279\u5f81", "\n", "num", "=", "int", "(", "math", ".", "ceil", "(", "b", "*", "n", "*", "1.0", "/", "8", ")", ")", "# \u6709\u51e0\u4e2a32", "\n", "for", "y", "in", "range", "(", "num", ")", ":", "\n", "                            ", "clips", "=", "imgs", "[", "y", "*", "8", ":", "(", "y", "+", "1", ")", "*", "8", ",", ":", ",", ":", ",", ":", ",", ":", "]", ".", "cuda", "(", ")", "# 32, 8, c, h, w", "\n", "x_uncorr", ",", "feats_corr", "=", "self", ".", "cnn_model", "(", "clips", ")", "\n", "\n", "out_frame", "=", "self", ".", "siamese_model", ".", "self_attention", "(", "feats_corr", ")", "\n", "out_feat", "=", "torch", ".", "cat", "(", "(", "x_uncorr", ",", "out_frame", ",", "feats_corr", ".", "mean", "(", "dim", "=", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "feat_list", ".", "append", "(", "out_feat", ")", "\n", "", "feat_list", "=", "torch", ".", "cat", "(", "feat_list", ",", "0", ")", "\n", "feat_list", "=", "torch", ".", "mean", "(", "feat_list", ",", "dim", "=", "0", ")", "\n", "qf", ".", "append", "(", "feat_list", ".", "unsqueeze", "(", "0", ")", ")", "\n", "q_pids", ".", "extend", "(", "pids", ")", "\n", "q_camids", ".", "extend", "(", "camids", ")", "\n", "", "else", ":", "\n", "                        ", "x_uncorr", ",", "feats_corr", "=", "self", ".", "cnn_model", "(", "imgs", ")", "\n", "\n", "out_frame", "=", "self", ".", "siamese_model", ".", "self_attention", "(", "feats_corr", ")", "\n", "out_feat", "=", "torch", ".", "cat", "(", "(", "x_uncorr", ",", "out_frame", ",", "feats_corr", ".", "mean", "(", "dim", "=", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "out_feat", "=", "out_feat", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "out_feat", "=", "torch", ".", "mean", "(", "out_feat", ",", "dim", "=", "0", ")", "\n", "qf", ".", "append", "(", "out_feat", ".", "unsqueeze", "(", "0", ")", ")", "\n", "q_pids", ".", "extend", "(", "pids", ")", "\n", "q_camids", ".", "extend", "(", "camids", ")", "\n", "", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "else", ":", "\n", "                ", "b", ",", "s", ",", "c", ",", "h", ",", "w", "=", "imgs", ".", "size", "(", ")", "\n", "imgs", "=", "imgs", ".", "view", "(", "b", ",", "s", ",", "c", ",", "h", ",", "w", ")", "\n", "imgs", "=", "to_torch", "(", "imgs", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "x_uncorr", ",", "feats_corr", "=", "self", ".", "cnn_model", "(", "imgs", ")", "\n", "\n", "out_frame", "=", "self", ".", "siamese_model", ".", "self_attention", "(", "feats_corr", ")", "\n", "out_feat", "=", "torch", ".", "cat", "(", "(", "x_uncorr", ",", "out_frame", ",", "feats_corr", ".", "mean", "(", "dim", "=", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "qf", ".", "append", "(", "out_feat", ")", "\n", "q_pids", ".", "extend", "(", "pids", ")", "\n", "q_camids", ".", "extend", "(", "camids", ")", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "", "qf", "=", "torch", ".", "cat", "(", "qf", ",", "0", ")", "\n", "q_pids", "=", "np", ".", "asarray", "(", "q_pids", ")", "\n", "q_camids", "=", "np", ".", "asarray", "(", "q_camids", ")", "\n", "\n", "return", "qf", ",", "q_pids", ",", "q_camids", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.attevaluator.ATTEvaluator.evaluate": [[125, 164], ["attevaluator.evaluate_seq", "torch.cuda.empty_cache", "scipy.io.loadmat", "visualize.visualize_in_pic", "attevaluator.ATTEvaluator.extract_feature", "torch.cuda.empty_cache", "print", "attevaluator.ATTEvaluator.extract_feature", "torch.cat", "numpy.append", "numpy.append", "print", "print", "cosin_dist().cpu().numpy", "print", "print", "pairwise_distance_tensor().cpu().numpy", "pairwise_distance_tensor().cpu().numpy", "rerank.re_ranking", "qf.size", "qf.size", "torch.cat.size", "torch.cat.size", "cosin_dist().cpu", "pairwise_distance_tensor().cpu", "pairwise_distance_tensor().cpu", "attevaluator.cosin_dist", "attevaluator.pairwise_distance_tensor", "attevaluator.pairwise_distance_tensor"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.evaluator.evaluate_seq", "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.visualize.visualize_in_pic", "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.evaluator.CNNEvaluator.extract_feature", "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.evaluator.CNNEvaluator.extract_feature", "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.rerank.re_ranking", "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.attevaluator.cosin_dist", "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.evaluator.pairwise_distance_tensor", "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.evaluator.pairwise_distance_tensor"], ["", "def", "evaluate", "(", "self", ",", "query", ",", "gallery", ",", "query_loader", ",", "gallery_loader", ",", "path", ",", "visual", ",", "rerank", ")", ":", "\n", "# 1", "\n", "        ", "rerank", "=", "rerank", "\n", "path", "=", "path", "\n", "\n", "if", "visual", ":", "\n", "            ", "result", "=", "scipy", ".", "io", ".", "loadmat", "(", "path", "+", "'dist.mat'", ")", "\n", "distmat", "=", "result", "[", "'distmat'", "]", "\n", "save_dir", "=", "path", "+", "'visual'", "\n", "visual_id", "=", "4", "\n", "visualize_in_pic", "(", "distmat", ",", "query", ",", "gallery", ",", "save_dir", ",", "visual_id", ")", "\n", "\n", "", "else", ":", "\n", "            ", "qf", ",", "q_pids", ",", "q_camids", "=", "self", ".", "extract_feature", "(", "query_loader", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "print", "(", "'Done, obtained {}-by-{} matrix'", ".", "format", "(", "qf", ".", "size", "(", "0", ")", ",", "qf", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "gf", ",", "g_pids", ",", "g_camids", "=", "self", ".", "extract_feature", "(", "gallery_loader", ")", "\n", "gf", "=", "torch", ".", "cat", "(", "(", "qf", ",", "gf", ")", ",", "0", ")", "\n", "g_pids", "=", "np", ".", "append", "(", "q_pids", ",", "g_pids", ")", "\n", "g_camids", "=", "np", ".", "append", "(", "q_camids", ",", "g_camids", ")", "\n", "print", "(", "'Done, obtained {}-by-{} matrix'", ".", "format", "(", "gf", ".", "size", "(", "0", ")", ",", "gf", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "print", "(", "\"Computing distance matrix\"", ")", "\n", "\n", "distmat", "=", "cosin_dist", "(", "qf", ",", "gf", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "rerank", ":", "\n", "                ", "print", "(", "'Applying person re-ranking ...'", ")", "\n", "distmat_qq", "=", "pairwise_distance_tensor", "(", "qf", ",", "qf", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "distmat_gg", "=", "pairwise_distance_tensor", "(", "gf", ",", "gf", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "distmat", "=", "re_ranking", "(", "distmat", ",", "distmat_qq", ",", "distmat_gg", ")", "\n", "\n", "", "print", "(", "\"save matrixs for visualization\"", ")", "\n", "\n", "", "del", "query_loader", "\n", "del", "gallery_loader", "\n", "final", "=", "evaluate_seq", "(", "distmat", ",", "q_pids", ",", "q_camids", ",", "g_pids", ",", "g_camids", ",", "path", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "return", "final", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.attevaluator.evaluate_seq": [[15, 31], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "eva_functions.evaluate", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.eva_functions.evaluate"], ["def", "evaluate_seq", "(", "distmat", ",", "query_pids", ",", "query_camids", ",", "gallery_pids", ",", "gallery_camids", ",", "path", ",", "cmc_topk", "=", "[", "1", ",", "5", ",", "10", ",", "20", "]", ")", ":", "\n", "    ", "query_ids", "=", "np", ".", "array", "(", "query_pids", ")", "# <class 'tuple'>: (1980,)", "\n", "gallery_ids", "=", "np", ".", "array", "(", "gallery_pids", ")", "# <class 'tuple'>: (9330,)", "\n", "query_cams", "=", "np", ".", "array", "(", "query_camids", ")", "# <class 'tuple'>: (1980,)", "\n", "gallery_cams", "=", "np", ".", "array", "(", "gallery_camids", ")", "# <class 'tuple'>: (9330,)", "\n", "\n", "##", "\n", "cmc_scores", ",", "mAP", "=", "evaluate", "(", "distmat", ",", "query_ids", ",", "gallery_ids", ",", "query_cams", ",", "gallery_cams", ")", "\n", "\n", "print", "(", "'Mean AP: {:4.1%}'", ".", "format", "(", "mAP", ")", ")", "\n", "\n", "for", "r", "in", "cmc_topk", ":", "\n", "        ", "print", "(", "\"Rank-{:<3}: {:.1%}\"", ".", "format", "(", "r", ",", "cmc_scores", "[", "r", "-", "1", "]", ")", ")", "\n", "", "print", "(", "\"------------------\"", ")", "\n", "\n", "return", "cmc_scores", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.attevaluator.pairwise_distance_tensor": [[33, 42], ["query_x.view", "gallery_x.view", "dist.clamp().sqrt.addmm_", "dist.clamp().sqrt.clamp().sqrt", "query_x.size", "gallery_x.size", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "gallery_x.view.t", "dist.clamp().sqrt.clamp", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow", "torch.pow().sum", "torch.pow"], "function", ["None"], ["", "def", "pairwise_distance_tensor", "(", "query_x", ",", "gallery_x", ")", ":", "\n", "    ", "m", ",", "n", "=", "query_x", ".", "size", "(", "0", ")", ",", "gallery_x", ".", "size", "(", "0", ")", "\n", "x", "=", "query_x", ".", "view", "(", "m", ",", "-", "1", ")", "\n", "y", "=", "gallery_x", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "dist", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "+", "torch", ".", "pow", "(", "y", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "x", ",", "y", ".", "t", "(", ")", ")", "\n", "dist", "=", "dist", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.attevaluator.cosin_dist": [[44, 47], ["torch.mm", "gf.t"], "function", ["None"], ["", "def", "cosin_dist", "(", "qf", ",", "gf", ")", ":", "\n", "    ", "dist", "=", "-", "torch", ".", "mm", "(", "qf", ",", "gf", ".", "t", "(", ")", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.visualize.visualize_ranked_results": [[17, 82], ["print", "print", "print", "numpy.argsort", "utils.osutils.mkdir_if_missing", "range", "print", "len", "len", "isinstance", "isinstance", "os.join", "utils.osutils.mkdir_if_missing", "os.join", "shutil.copy", "utils.osutils.mkdir_if_missing", "visualize.visualize_ranked_results._cp_img_to"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing"], ["", "def", "visualize", "(", "img", ",", "cam", ")", ":", "\n", "    ", "\"\"\"\n    Synthesize an image with CAM to make a result image.\n    Args:\n        img: (Tensor) shape => (1, 3, H, W)\n        cam: (Tensor) shape => (1, 1, H', W')\n    Return:\n        synthesized image (Tensor): shape =>(1, 3, H, W)\n    \"\"\"", "\n", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "img", ".", "shape", "\n", "cam", "=", "F", ".", "interpolate", "(", "cam", ",", "size", "=", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "# torch.Size([1, 1, 256, 128])", "\n", "cam", "=", "255", "*", "cam", ".", "squeeze", "(", ")", "# torch.Size([256, 128])", "\n", "cam", "=", "cam", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "cam", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "# <class 'tuple'>: (256, 128, 3)", "\n", "heatmap", "=", "torch", ".", "from_numpy", "(", "heatmap", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "# torch.Size([3, 256, 128])", "\n", "heatmap", "=", "heatmap", ".", "float", "(", ")", "/", "255", "# torch.Size([3, 256, 128])", "\n", "b", ",", "g", ",", "r", "=", "heatmap", ".", "split", "(", "1", ")", "\n", "heatmap", "=", "torch", ".", "cat", "(", "[", "r", ",", "g", ",", "b", "]", ")", "# torch.Size([3, 256, 128])", "\n", "\n", "result", "=", "heatmap", "+", "img", ".", "cpu", "(", ")", "\n", "# result = heatmap", "\n", "result", "=", "result", ".", "div", "(", "result", ".", "max", "(", ")", ")", "\n", "\n", "return", "result", ",", "img", ".", "cpu", "(", ")", "\n", "\n", "\n", "", "def", "visualize2", "(", "cam", ")", ":", "\n", "    ", "\"\"\"\n    Synthesize an image with CAM to make a result image.\n    Args:\n        cam: (Tensor) shape => (1, 1, H', W')\n    Return:\n        synthesized image (Tensor): shape =>(1, 3, H, W)\n    \"\"\"", "\n", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "cam", ".", "shape", "\n", "cam", "=", "F", ".", "interpolate", "(", "cam", ",", "size", "=", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "cam", "=", "255", "*", "cam", ".", "squeeze", "(", ")", "\n", "cam", "=", "cam", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "cam", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "heatmap", "=", "torch", ".", "from_numpy", "(", "heatmap", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "heatmap", "=", "heatmap", ".", "float", "(", ")", "/", "255", "\n", "b", ",", "g", ",", "r", "=", "heatmap", ".", "split", "(", "1", ")", "\n", "heatmap", "=", "torch", ".", "cat", "(", "[", "r", ",", "g", ",", "b", "]", ")", "\n", "\n", "result", "=", "heatmap", "\n", "result", "=", "result", ".", "div", "(", "result", ".", "max", "(", ")", ")", "\n", "\n", "return", "result", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.visualize.visualize_in_pic": [[84, 149], ["print", "print", "print", "numpy.argsort", "utils.osutils.mkdir_if_missing", "range", "len", "len", "plt.imread", "plt.imshow", "print", "print", "plt.title", "plt.figure", "plt.subplot", "plt.subplot.axis", "visualize.visualize_in_pic.imshow"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing"], []], "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.evaluator.CNNEvaluator.__init__": [[61, 65], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cnn_model", ",", "mode", ")", ":", "\n", "        ", "super", "(", "CNNEvaluator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cnn_model", "=", "cnn_model", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.evaluator.CNNEvaluator.extract_feature": [[66, 109], ["cnn_model.eval", "utils.meters.AverageMeter", "utils.meters.AverageMeter", "time.time", "enumerate", "utils.meters.AverageMeter.update", "torch.autograd.Variable", "torch.autograd.Variable", "utils.meters.AverageMeter.update", "time.time", "evaluator.CNNEvaluator.cnn_model", "print", "time.time", "torch.cat.size", "torch.cat.size", "torch.cat", "torch.cat", "evaluator.CNNEvaluator.cnn_model", "torch.cat", "cnn_model", "torch.cat", "time.time", "len"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.meters.AverageMeter.update", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.meters.AverageMeter.update"], ["", "def", "extract_feature", "(", "self", ",", "cnn_model", ",", "data_loader", ")", ":", "\n", "        ", "print_freq", "=", "50", "\n", "cnn_model", ".", "eval", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "allfeatures", "=", "0", "\n", "\n", "for", "i", ",", "(", "imgs", ",", "flows", ",", "_", ",", "_", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "imgs", "=", "Variable", "(", "imgs", ",", "volatile", "=", "True", ")", "\n", "flows", "=", "Variable", "(", "flows", ",", "volatile", "=", "True", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                ", "out_feat", "=", "self", ".", "cnn_model", "(", "imgs", ",", "flows", ",", "self", ".", "mode", ")", "\n", "allfeatures", "=", "out_feat", ".", "data", "\n", "preimgs", "=", "imgs", "\n", "preflows", "=", "flows", "\n", "", "elif", "imgs", ".", "size", "(", "0", ")", "<", "data_loader", ".", "batch_size", ":", "\n", "                ", "flaw_batchsize", "=", "imgs", ".", "size", "(", "0", ")", "\n", "cat_batchsize", "=", "data_loader", ".", "batch_size", "-", "flaw_batchsize", "\n", "imgs", "=", "torch", ".", "cat", "(", "(", "imgs", ",", "preimgs", "[", "0", ":", "cat_batchsize", "]", ")", ",", "0", ")", "\n", "flows", "=", "torch", ".", "cat", "(", "(", "flows", ",", "preflows", "[", "0", ":", "cat_batchsize", "]", ")", ",", "0", ")", "\n", "out_feat", "=", "self", ".", "cnn_model", "(", "imgs", ",", "flows", ",", "self", ".", "mode", ")", "\n", "out_feat", "=", "out_feat", "[", "0", ":", "flaw_batchsize", "]", "\n", "allfeatures", "=", "torch", ".", "cat", "(", "(", "allfeatures", ",", "out_feat", ".", "data", ")", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "out_feat", "=", "cnn_model", "(", "imgs", ",", "flows", ",", "self", ".", "mode", ")", "\n", "allfeatures", "=", "torch", ".", "cat", "(", "(", "allfeatures", ",", "out_feat", ".", "data", ")", ",", "0", ")", "\n", "\n", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "                ", "print", "(", "'Extract Features: [{}/{}]\\t'", "\n", "'Time {:.3f} ({:.3f})\\t'", "\n", "'Data {:.3f} ({:.3f})\\t'", "\n", ".", "format", "(", "i", "+", "1", ",", "len", "(", "data_loader", ")", ",", "\n", "batch_time", ".", "val", ",", "batch_time", ".", "avg", ",", "\n", "data_time", ".", "val", ",", "data_time", ".", "avg", ")", ")", "\n", "\n", "", "", "return", "allfeatures", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.evaluator.CNNEvaluator.evaluate": [[110, 209], ["evaluator.CNNEvaluator.cnn_model.eval", "evaluator.CNNEvaluator.extract_feature", "len", "len", "numpy.zeros", "utils.meters.AverageMeter", "time.time", "enumerate", "evaluator.evaluate_seq", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat.size", "evaluator.CNNEvaluator.cnn_model", "evaluator.pairwise_distance_tensor", "enumerate", "utils.meters.AverageMeter.update", "time.time", "torch.cat.size", "torch.cat.size", "torch.cat", "torch.cat", "evaluator.CNNEvaluator.cnn_model", "torch.cat", "evaluator.CNNEvaluator.cnn_model", "torch.cat", "print", "distmat_qg.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.percentile", "numpy.mean", "numpy.mean", "time.time", "distmat_qg.cpu().numpy.cpu().numpy.cpu"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.evaluator.CNNEvaluator.extract_feature", "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.evaluator.evaluate_seq", "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.evaluator.pairwise_distance_tensor", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.meters.AverageMeter.update"], ["", "def", "evaluate", "(", "self", ",", "query_loader", ",", "gallery_loader", ",", "queryinfo", ",", "galleryinfo", ")", ":", "\n", "\n", "        ", "self", ".", "cnn_model", ".", "eval", "(", ")", "\n", "\n", "querypid", "=", "queryinfo", ".", "pid", "\n", "querycamid", "=", "queryinfo", ".", "camid", "\n", "querytranum", "=", "queryinfo", ".", "tranum", "\n", "\n", "gallerypid", "=", "galleryinfo", ".", "pid", "\n", "gallerycamid", "=", "galleryinfo", ".", "camid", "\n", "gallerytranum", "=", "galleryinfo", ".", "tranum", "\n", "\n", "\n", "query_features", "=", "self", ".", "extract_feature", "(", "self", ".", "cnn_model", ",", "query_loader", ")", "\n", "\n", "querylen", "=", "len", "(", "querypid", ")", "\n", "gallerylen", "=", "len", "(", "gallerypid", ")", "\n", "\n", "# online gallery extraction", "\n", "single_distmat", "=", "np", ".", "zeros", "(", "(", "querylen", ",", "gallerylen", ")", ")", "\n", "gallery_resize", "=", "0", "\n", "gallery_popindex", "=", "0", "\n", "gallery_popsize", "=", "gallerytranum", "[", "gallery_popindex", "]", "\n", "gallery_resfeatures", "=", "0", "\n", "gallery_empty", "=", "True", "\n", "preimgs", "=", "0", "\n", "preflows", "=", "0", "\n", "\n", "# time", "\n", "gallery_time", "=", "AverageMeter", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", ",", "(", "imgs", ",", "flows", ",", "_", ",", "_", ")", "in", "enumerate", "(", "gallery_loader", ")", ":", "\n", "            ", "imgs", "=", "Variable", "(", "imgs", ",", "volatile", "=", "True", ")", "\n", "flows", "=", "Variable", "(", "flows", ",", "volatile", "=", "True", ")", "\n", "seqnum", "=", "imgs", ".", "size", "(", "0", ")", "\n", "##############", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                ", "preimgs", "=", "imgs", "\n", "preflows", "=", "flows", "\n", "\n", "", "if", "gallery_empty", ":", "\n", "                ", "out_feat", "=", "self", ".", "cnn_model", "(", "imgs", ",", "flows", ",", "self", ".", "mode", ")", "\n", "\n", "gallery_resfeatures", "=", "out_feat", ".", "data", "\n", "gallery_empty", "=", "False", "\n", "\n", "", "elif", "imgs", ".", "size", "(", "0", ")", "<", "gallery_loader", ".", "batch_size", ":", "\n", "                ", "flaw_batchsize", "=", "imgs", ".", "size", "(", "0", ")", "\n", "cat_batchsize", "=", "gallery_loader", ".", "batch_size", "-", "flaw_batchsize", "\n", "imgs", "=", "torch", ".", "cat", "(", "(", "imgs", ",", "preimgs", "[", "0", ":", "cat_batchsize", "]", ")", ",", "0", ")", "\n", "flows", "=", "torch", ".", "cat", "(", "(", "flows", ",", "preflows", "[", "0", ":", "cat_batchsize", "]", ")", ",", "0", ")", "\n", "out_feat", "=", "self", ".", "cnn_model", "(", "imgs", ",", "flows", ",", "self", ".", "mode", ")", "\n", "out_feat", "=", "out_feat", "[", "0", ":", "flaw_batchsize", "]", "\n", "gallery_resfeatures", "=", "torch", ".", "cat", "(", "(", "gallery_resfeatures", ",", "out_feat", ".", "data", ")", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "out_feat", "=", "self", ".", "cnn_model", "(", "imgs", ",", "flows", ",", "self", ".", "mode", ")", "\n", "gallery_resfeatures", "=", "torch", ".", "cat", "(", "(", "gallery_resfeatures", ",", "out_feat", ".", "data", ")", ",", "0", ")", "\n", "\n", "", "gallery_resize", "=", "gallery_resize", "+", "seqnum", "\n", "\n", "while", "gallery_popsize", "<=", "gallery_resize", ":", "\n", "                ", "if", "(", "gallery_popindex", "+", "1", ")", "%", "50", "==", "0", ":", "\n", "                    ", "print", "(", "'gallery--{:04d}'", ".", "format", "(", "gallery_popindex", ")", ")", "\n", "", "if", "gallery_popsize", "==", "1", ":", "\n", "                    ", "gallery_popfeatures", "=", "gallery_resfeatures", "\n", "", "else", ":", "\n", "                    ", "gallery_popfeatures", "=", "gallery_resfeatures", "[", "0", ":", "gallery_popsize", ",", ":", "]", "\n", "", "if", "gallery_popsize", "<", "gallery_resize", ":", "\n", "                    ", "gallery_resfeatures", "=", "gallery_resfeatures", "[", "gallery_popsize", ":", "gallery_resize", ",", ":", "]", "\n", "", "else", ":", "\n", "                    ", "gallery_resfeatures", "=", "0", "\n", "gallery_empty", "=", "True", "\n", "", "gallery_resize", "=", "gallery_resize", "-", "gallery_popsize", "\n", "distmat_qall_g", "=", "pairwise_distance_tensor", "(", "query_features", ",", "gallery_popfeatures", ")", "\n", "\n", "q_start", "=", "0", "\n", "for", "qind", ",", "qnum", "in", "enumerate", "(", "querytranum", ")", ":", "\n", "                    ", "distmat_qg", "=", "distmat_qall_g", "[", "q_start", ":", "q_start", "+", "qnum", ",", ":", "]", "\n", "distmat_qg", "=", "distmat_qg", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "percile", "=", "np", ".", "percentile", "(", "distmat_qg", ",", "50", ")", "\n", "\n", "if", "distmat_qg", "[", "distmat_qg", "<", "percile", "]", "is", "not", "None", ":", "\n", "                        ", "distmean", "=", "np", ".", "mean", "(", "distmat_qg", "[", "distmat_qg", "<", "percile", "]", ")", "\n", "", "else", ":", "\n", "                        ", "distmean", "=", "np", ".", "mean", "(", "distmat_qg", ")", "\n", "\n", "", "single_distmat", "[", "qind", ",", "gallery_popindex", "]", "=", "distmean", "\n", "q_start", "=", "q_start", "+", "qnum", "\n", "\n", "", "gallery_popindex", "=", "gallery_popindex", "+", "1", "\n", "\n", "if", "gallery_popindex", "<", "gallerylen", ":", "\n", "                    ", "gallery_popsize", "=", "gallerytranum", "[", "gallery_popindex", "]", "\n", "", "gallery_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "return", "evaluate_seq", "(", "single_distmat", ",", "querypid", ",", "querycamid", ",", "gallerypid", ",", "gallerycamid", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.evaluator.evaluate_seq": [[11, 45], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "eva_functions.mean_ap", "print", "print", "dict", "dict", "dict", "eva_functions.cmc", "print", "cmc_configs.items"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.eva_functions.mean_ap", "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.eva_functions.cmc"], ["def", "evaluate_seq", "(", "distmat", ",", "query_pids", ",", "query_camids", ",", "gallery_pids", ",", "gallery_camids", ",", "cmc_topk", "=", "(", "1", ",", "5", ",", "10", ")", ")", ":", "\n", "    ", "query_ids", "=", "np", ".", "array", "(", "query_pids", ")", "\n", "gallery_ids", "=", "np", ".", "array", "(", "gallery_pids", ")", "\n", "query_cams", "=", "np", ".", "array", "(", "query_camids", ")", "\n", "gallery_cams", "=", "np", ".", "array", "(", "gallery_camids", ")", "\n", "\n", "##", "\n", "mAP", "=", "mean_ap", "(", "distmat", ",", "query_ids", ",", "gallery_ids", ",", "query_cams", ",", "gallery_cams", ")", "\n", "print", "(", "'Mean AP: {:4.1%}'", ".", "format", "(", "mAP", ")", ")", "\n", "\n", "cmc_configs", "=", "{", "\n", "'allshots'", ":", "dict", "(", "separate_camera_set", "=", "False", ",", "\n", "single_gallery_shot", "=", "False", ",", "\n", "first_match_break", "=", "False", ")", ",", "\n", "'cuhk03'", ":", "dict", "(", "separate_camera_set", "=", "True", ",", "\n", "single_gallery_shot", "=", "True", ",", "\n", "first_match_break", "=", "False", ")", ",", "\n", "'market1501'", ":", "dict", "(", "separate_camera_set", "=", "False", ",", "\n", "single_gallery_shot", "=", "False", ",", "\n", "first_match_break", "=", "True", ")", "}", "\n", "cmc_scores", "=", "{", "name", ":", "cmc", "(", "distmat", ",", "query_ids", ",", "gallery_ids", ",", "\n", "query_cams", ",", "gallery_cams", ",", "**", "params", ")", "\n", "for", "name", ",", "params", "in", "cmc_configs", ".", "items", "(", ")", "}", "\n", "\n", "print", "(", "'CMC Scores{:>12}{:>12}{:>12}'", "\n", ".", "format", "(", "'allshots'", ",", "'cuhk03'", ",", "'market1501'", ")", ")", "\n", "for", "k", "in", "cmc_topk", ":", "\n", "        ", "print", "(", "'  top-{:<4}{:12.1%}{:12.1%}{:12.1%}'", "\n", ".", "format", "(", "k", ",", "cmc_scores", "[", "'allshots'", "]", "[", "k", "-", "1", "]", ",", "\n", "cmc_scores", "[", "'cuhk03'", "]", "[", "k", "-", "1", "]", ",", "\n", "cmc_scores", "[", "'market1501'", "]", "[", "k", "-", "1", "]", ")", ")", "\n", "\n", "# Use the allshots cmc top-1 score for validation criterion", "\n", "", "return", "mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.evaluator.pairwise_distance_tensor": [[47, 57], ["query_x.view", "gallery_x.view", "dist.addmm_", "query_x.size", "gallery_x.size", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "gallery_x.view.t", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow", "torch.pow().sum", "torch.pow"], "function", ["None"], ["", "def", "pairwise_distance_tensor", "(", "query_x", ",", "gallery_x", ")", ":", "\n", "\n", "    ", "m", ",", "n", "=", "query_x", ".", "size", "(", "0", ")", ",", "gallery_x", ".", "size", "(", "0", ")", "\n", "x", "=", "query_x", ".", "view", "(", "m", ",", "-", "1", ")", "\n", "y", "=", "gallery_x", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "dist", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "+", "torch", ".", "pow", "(", "y", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "x", ",", "y", ".", "t", "(", ")", ")", "\n", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.eva_functions._unique_sample": [[10, 16], ["numpy.zeros", "ids_dict.items", "numpy.random.choice"], "function", ["None"], ["def", "_unique_sample", "(", "ids_dict", ",", "num", ")", ":", "\n", "    ", "mask", "=", "np", ".", "zeros", "(", "num", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "for", "_", ",", "indices", "in", "ids_dict", ".", "items", "(", ")", ":", "\n", "        ", "i", "=", "np", ".", "random", ".", "choice", "(", "indices", ")", "\n", "mask", "[", "i", "]", "=", "True", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.eva_functions.cmc": [[18, 80], ["utils.to_numpy", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.argsort", "numpy.zeros", "range", "numpy.arange", "numpy.arange", "numpy.zeros().astype", "numpy.ones().astype", "range", "RuntimeError", "np.zeros.cumsum", "numpy.any", "collections.defaultdict", "zip", "enumerate", "numpy.zeros", "numpy.ones", "numpy.where", "ids_dict[].append", "eva_functions._unique_sample", "numpy.nonzero", "numpy.nonzero", "len", "len"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.eva_functions._unique_sample"], ["", "def", "cmc", "(", "distmat", ",", "query_ids", "=", "None", ",", "gallery_ids", "=", "None", ",", "\n", "query_cams", "=", "None", ",", "gallery_cams", "=", "None", ",", "topk", "=", "100", ",", "\n", "separate_camera_set", "=", "False", ",", "\n", "single_gallery_shot", "=", "False", ",", "\n", "first_match_break", "=", "False", ")", ":", "\n", "    ", "distmat", "=", "to_numpy", "(", "distmat", ")", "\n", "m", ",", "n", "=", "distmat", ".", "shape", "\n", "# Fill up default values", "\n", "if", "query_ids", "is", "None", ":", "\n", "        ", "query_ids", "=", "np", ".", "arange", "(", "m", ")", "\n", "", "if", "gallery_ids", "is", "None", ":", "\n", "        ", "gallery_ids", "=", "np", ".", "arange", "(", "n", ")", "\n", "", "if", "query_cams", "is", "None", ":", "\n", "        ", "query_cams", "=", "np", ".", "zeros", "(", "m", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "", "if", "gallery_cams", "is", "None", ":", "\n", "        ", "gallery_cams", "=", "np", ".", "ones", "(", "n", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "# Ensure numpy array", "\n", "", "query_ids", "=", "np", ".", "asarray", "(", "query_ids", ")", "\n", "gallery_ids", "=", "np", ".", "asarray", "(", "gallery_ids", ")", "\n", "query_cams", "=", "np", ".", "asarray", "(", "query_cams", ")", "\n", "gallery_cams", "=", "np", ".", "asarray", "(", "gallery_cams", ")", "\n", "# Sort and find correct matches", "\n", "indices", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "\n", "matches", "=", "(", "gallery_ids", "[", "indices", "]", "==", "query_ids", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "# Compute CMC for each query", "\n", "ret", "=", "np", ".", "zeros", "(", "topk", ")", "\n", "num_valid_queries", "=", "0", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "# Filter out the same id and same camera", "\n", "        ", "valid", "=", "(", "(", "gallery_ids", "[", "indices", "[", "i", "]", "]", "!=", "query_ids", "[", "i", "]", ")", "|", "\n", "(", "gallery_cams", "[", "indices", "[", "i", "]", "]", "!=", "query_cams", "[", "i", "]", ")", ")", "\n", "if", "separate_camera_set", ":", "\n", "# Filter out samples from same camera", "\n", "            ", "valid", "&=", "(", "gallery_cams", "[", "indices", "[", "i", "]", "]", "!=", "query_cams", "[", "i", "]", ")", "\n", "", "if", "not", "np", ".", "any", "(", "matches", "[", "i", ",", "valid", "]", ")", ":", "continue", "\n", "if", "single_gallery_shot", ":", "\n", "            ", "repeat", "=", "10", "\n", "gids", "=", "gallery_ids", "[", "indices", "[", "i", "]", "[", "valid", "]", "]", "\n", "inds", "=", "np", ".", "where", "(", "valid", ")", "[", "0", "]", "\n", "ids_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "j", ",", "x", "in", "zip", "(", "inds", ",", "gids", ")", ":", "\n", "                ", "ids_dict", "[", "x", "]", ".", "append", "(", "j", ")", "\n", "", "", "else", ":", "\n", "            ", "repeat", "=", "1", "\n", "", "for", "_", "in", "range", "(", "repeat", ")", ":", "\n", "            ", "if", "single_gallery_shot", ":", "\n", "# Randomly choose one instance for each id", "\n", "                ", "sampled", "=", "(", "valid", "&", "_unique_sample", "(", "ids_dict", ",", "len", "(", "valid", ")", ")", ")", "\n", "index", "=", "np", ".", "nonzero", "(", "matches", "[", "i", ",", "sampled", "]", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "index", "=", "np", ".", "nonzero", "(", "matches", "[", "i", ",", "valid", "]", ")", "[", "0", "]", "\n", "", "delta", "=", "1.", "/", "(", "len", "(", "index", ")", "*", "repeat", ")", "\n", "for", "j", ",", "k", "in", "enumerate", "(", "index", ")", ":", "\n", "                ", "if", "k", "-", "j", ">=", "topk", ":", "break", "\n", "if", "first_match_break", ":", "\n", "                    ", "ret", "[", "k", "-", "j", "]", "+=", "1", "\n", "break", "\n", "", "ret", "[", "k", "-", "j", "]", "+=", "delta", "\n", "", "", "num_valid_queries", "+=", "1", "\n", "", "if", "num_valid_queries", "==", "0", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"No valid query\"", ")", "\n", "", "return", "ret", ".", "cumsum", "(", ")", "/", "num_valid_queries", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.eva_functions.mean_ap": [[82, 116], ["utils.to_numpy", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.argsort", "range", "numpy.mean", "numpy.arange", "numpy.arange", "numpy.zeros().astype", "numpy.ones().astype", "aps.append", "len", "RuntimeError", "numpy.any", "sklearn.metrics.average_precision_score", "numpy.zeros", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.__init__.to_numpy"], ["", "def", "mean_ap", "(", "distmat", ",", "query_ids", "=", "None", ",", "gallery_ids", "=", "None", ",", "\n", "query_cams", "=", "None", ",", "gallery_cams", "=", "None", ")", ":", "\n", "    ", "distmat", "=", "to_numpy", "(", "distmat", ")", "# <class 'tuple'>: (100, 100)", "\n", "m", ",", "n", "=", "distmat", ".", "shape", "\n", "# Fill up default values", "\n", "if", "query_ids", "is", "None", ":", "\n", "        ", "query_ids", "=", "np", ".", "arange", "(", "m", ")", "\n", "", "if", "gallery_ids", "is", "None", ":", "\n", "        ", "gallery_ids", "=", "np", ".", "arange", "(", "n", ")", "\n", "", "if", "query_cams", "is", "None", ":", "\n", "        ", "query_cams", "=", "np", ".", "zeros", "(", "m", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "", "if", "gallery_cams", "is", "None", ":", "\n", "        ", "gallery_cams", "=", "np", ".", "ones", "(", "n", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "# Ensure numpy array", "\n", "", "query_ids", "=", "np", ".", "asarray", "(", "query_ids", ")", "\n", "gallery_ids", "=", "np", ".", "asarray", "(", "gallery_ids", ")", "\n", "query_cams", "=", "np", ".", "asarray", "(", "query_cams", ")", "\n", "gallery_cams", "=", "np", ".", "asarray", "(", "gallery_cams", ")", "\n", "# Sort and find correct matches", "\n", "indices", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "\n", "matches", "=", "(", "gallery_ids", "[", "indices", "]", "==", "query_ids", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "# Compute AP for each query", "\n", "aps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "# Filter out the same id and same camera", "\n", "        ", "valid", "=", "(", "(", "gallery_ids", "[", "indices", "[", "i", "]", "]", "!=", "query_ids", "[", "i", "]", ")", "|", "\n", "(", "gallery_cams", "[", "indices", "[", "i", "]", "]", "!=", "query_cams", "[", "i", "]", ")", ")", "\n", "y_true", "=", "matches", "[", "i", ",", "valid", "]", "\n", "y_score", "=", "-", "distmat", "[", "i", "]", "[", "indices", "[", "i", "]", "]", "[", "valid", "]", "\n", "if", "not", "np", ".", "any", "(", "y_true", ")", ":", "continue", "\n", "aps", ".", "append", "(", "average_precision_score", "(", "y_true", ",", "y_score", ")", ")", "\n", "", "if", "len", "(", "aps", ")", "==", "0", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"No valid query\"", ")", "\n", "", "return", "np", ".", "mean", "(", "aps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.eva_functions.accuracy": [[118, 132], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "utils.to_torch", "utils.to_torch", "target.view().expand_as", "correct[].view().float().sum", "ret.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.__init__.to_torch", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.__init__.to_torch"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "output", ",", "target", "=", "to_torch", "(", "output", ")", ",", "to_torch", "(", "target", ")", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "ret", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "ret", ".", "append", "(", "correct_k", ".", "mul_", "(", "1.", "/", "batch_size", ")", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.eva_functions.evaluate": [[134, 185], ["numpy.argsort", "range", "numpy.asarray().astype", "numpy.mean", "print", "numpy.invert", "orig_cmc.cumsum", "np.asarray().astype.append", "orig_cmc.sum", "orig_cmc.cumsum", "all_AP.append", "np.asarray().astype.sum", "numpy.any", "numpy.asarray", "orig_cmc.cumsum.sum", "numpy.asarray", "enumerate"], "function", ["None"], ["", "def", "evaluate", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "max_rank", "=", "100", ")", ":", "\n", "    ", "num_q", ",", "num_g", "=", "distmat", ".", "shape", "# 1980,9330", "\n", "if", "num_g", "<", "max_rank", ":", "\n", "        ", "max_rank", "=", "num_g", "\n", "print", "(", "\"Note: number of gallery samples is quite small, got {}\"", ".", "format", "(", "num_g", ")", ")", "\n", "", "indices", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "# torch.Size([1980, 9330])", "\n", "\n", "matches", "=", "(", "g_pids", "[", "indices", "]", "==", "q_pids", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "# torch.Size([1980, 9330])", "\n", "\n", "# compute cmc curve for each query", "\n", "all_cmc", "=", "[", "]", "\n", "all_AP", "=", "[", "]", "\n", "num_valid_q", "=", "0.", "\n", "for", "q_idx", "in", "range", "(", "num_q", ")", ":", "\n", "# get query pid and camid", "\n", "        ", "q_pid", "=", "q_pids", "[", "q_idx", "]", "\n", "q_camid", "=", "q_camids", "[", "q_idx", "]", "\n", "# remove gallery samples that have the same pid and camid with query", "\n", "order", "=", "indices", "[", "q_idx", "]", "# torch.Size([9330])", "\n", "remove", "=", "(", "g_pids", "[", "order", "]", "==", "q_pid", ")", "&", "(", "g_camids", "[", "order", "]", "==", "q_camid", ")", "\n", "keep", "=", "np", ".", "invert", "(", "remove", ")", "\n", "\n", "# compute cmc curve", "\n", "orig_cmc", "=", "matches", "[", "q_idx", "]", "[", "keep", "]", "# binary vector, positions with value 1 are correct matches", "\n", "\n", "if", "not", "np", ".", "any", "(", "orig_cmc", ")", ":", "\n", "# this condition is true when query identity does not appear in gallery", "\n", "            ", "continue", "\n", "\n", "", "cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "cmc", "[", "cmc", ">", "1", "]", "=", "1", "\n", "all_cmc", ".", "append", "(", "cmc", "[", ":", "max_rank", "]", ")", "\n", "num_valid_q", "+=", "1.", "\n", "\n", "# compute average precision", "\n", "# reference: https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Average_precision", "\n", "num_rel", "=", "orig_cmc", ".", "sum", "(", ")", "\n", "tmp_cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "tmp_cmc", "=", "[", "x", "/", "(", "i", "+", "1.", ")", "for", "i", ",", "x", "in", "enumerate", "(", "tmp_cmc", ")", "]", "\n", "tmp_cmc", "=", "np", ".", "asarray", "(", "tmp_cmc", ")", "*", "orig_cmc", "\n", "AP", "=", "tmp_cmc", ".", "sum", "(", ")", "/", "num_rel", "\n", "\n", "all_AP", ".", "append", "(", "AP", ")", "\n", "\n", "", "assert", "num_valid_q", ">", "0", ",", "\"Error: all query identities do not appear in gallery\"", "\n", "\n", "all_cmc", "=", "np", ".", "asarray", "(", "all_cmc", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "all_cmc", "=", "all_cmc", ".", "sum", "(", "0", ")", "/", "num_valid_q", "# <class 'tuple'>: (50,)", "\n", "mAP", "=", "np", ".", "mean", "(", "all_AP", ")", "\n", "\n", "return", "all_cmc", ",", "mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.eva_functions.evaluate_zhengliang": [[187, 211], ["numpy.zeros", "numpy.zeros", "range", "numpy.asarray().astype", "numpy.mean", "eva_functions.Compute_AP", "np.asarray().astype.sum", "numpy.where", "len", "numpy.where", "numpy.argsort", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.eva_functions.Compute_AP"], ["", "def", "evaluate_zhengliang", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "max_rank", "=", "100", ")", ":", "\n", "    ", "cmc", "=", "np", ".", "zeros", "(", "(", "distmat", ".", "shape", "[", "0", "]", ",", "max_rank", ")", ")", "# (1980, 100)", "\n", "ap", "=", "np", ".", "zeros", "(", "distmat", ".", "shape", "[", "0", "]", ")", "# (1980,)", "\n", "\n", "junk_mask0", "=", "(", "g_pids", "==", "-", "1", ")", "# gallery\u4e2did\u4e3a-1\u7684\u6837\u672c\u662f\u65e0\u610f\u4e49\u7684\uff0c\u5ffd\u7565  9330", "\n", "num_valid_q", "=", "0.", "\n", "for", "k", "in", "range", "(", "distmat", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "score", "=", "distmat", "[", "k", ",", ":", "]", "\n", "good_idx", "=", "np", ".", "where", "(", "(", "q_pids", "[", "k", "]", "==", "g_pids", ")", "&", "(", "q_camids", "[", "k", "]", "!=", "g_camids", ")", ")", "[", "0", "]", "# 18", "\n", "if", "len", "(", "good_idx", ")", "==", "0", ":", "\n", "            ", "num_valid_q", "=", "num_valid_q", "\n", "continue", "\n", "", "else", ":", "\n", "            ", "num_valid_q", "+=", "1", "\n", "", "junk_mask1", "=", "(", "(", "q_pids", "[", "k", "]", "==", "g_pids", ")", "&", "(", "q_camids", "[", "k", "]", "==", "g_camids", ")", ")", "\n", "junk_idx", "=", "np", ".", "where", "(", "junk_mask0", "|", "junk_mask1", ")", "[", "0", "]", "\n", "sort_idx", "=", "np", ".", "argsort", "(", "score", ")", "[", ":", "max_rank", "]", "\n", "ap", "[", "k", "]", ",", "cmc", "[", "k", ",", ":", "]", "=", "Compute_AP", "(", "good_idx", ",", "junk_idx", ",", "sort_idx", ")", "\n", "\n", "", "all_cmc", "=", "np", ".", "asarray", "(", "cmc", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "CMC", "=", "all_cmc", ".", "sum", "(", "0", ")", "/", "num_valid_q", "# <class 'tuple'>: (50,)", "\n", "\n", "mAP", "=", "np", ".", "mean", "(", "ap", ")", "\n", "return", "CMC", ",", "mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.eva_functions.Compute_AP": [[213, 246], ["numpy.zeros", "len", "range", "len", "numpy.any", "numpy.any", "len"], "function", ["None"], ["", "def", "Compute_AP", "(", "good_idx", ",", "junk_idx", ",", "index", ")", ":", "\n", "    ", "cmc", "=", "np", ".", "zeros", "(", "(", "len", "(", "index", ")", ",", ")", ")", "\n", "num_real", "=", "len", "(", "good_idx", ")", "\n", "\n", "old_recall", "=", "0", "\n", "old_precision", "=", "1.", "\n", "ap", "=", "0", "\n", "intersect_size", "=", "0", "\n", "j", "=", "0", "\n", "good_now", "=", "0", "\n", "njunk", "=", "0", "\n", "for", "n", "in", "range", "(", "len", "(", "index", ")", ")", ":", "# rank N", "\n", "        ", "flag", "=", "0", "\n", "if", "np", ".", "any", "(", "good_idx", "==", "index", "[", "n", "]", ")", ":", "\n", "            ", "cmc", "[", "n", "-", "njunk", ":", "]", "=", "1", "\n", "flag", "=", "1", "# good image", "\n", "good_now", "+=", "1", "\n", "", "if", "np", ".", "any", "(", "junk_idx", "==", "index", "[", "n", "]", ")", ":", "\n", "            ", "njunk", "+=", "1", "\n", "continue", "# junk image", "\n", "\n", "", "if", "flag", "==", "1", ":", "\n", "            ", "intersect_size", "+=", "1", "\n", "", "recall", "=", "intersect_size", "/", "num_real", "# 1 / 21 = 0.047", "\n", "precision", "=", "intersect_size", "/", "(", "j", "+", "1", ")", "# 1", "\n", "ap", "+=", "(", "recall", "-", "old_recall", ")", "*", "(", "old_precision", "+", "precision", ")", "/", "2", "\n", "old_recall", "=", "recall", "\n", "old_precision", "=", "precision", "\n", "j", "+=", "1", "\n", "\n", "if", "good_now", "==", "num_real", ":", "\n", "            ", "return", "ap", ",", "cmc", "\n", "", "", "return", "ap", ",", "cmc", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.Mars.__init__": [[41, 96], ["os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "data_manager.Mars._check_before_run", "data_manager.Mars._get_names", "data_manager.Mars._get_names", "[].squeeze", "data_manager.Mars._process_data", "data_manager.Mars._process_data", "data_manager.Mars._process_data", "numpy.min", "numpy.max", "numpy.mean", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "scipy.io.loadmat", "scipy.io.loadmat", "range", "scipy.io.loadmat"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._check_before_run", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._get_names", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._get_names", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._process_data", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._process_data", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._process_data"], ["def", "__init__", "(", "self", ",", "root", ",", "min_seq_len", "=", "0", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "train_name_path", "=", "osp", ".", "join", "(", "root", ",", "'info/train_name.txt'", ")", "\n", "self", ".", "test_name_path", "=", "osp", ".", "join", "(", "root", ",", "'info/test_name.txt'", ")", "\n", "self", ".", "track_train_info_path", "=", "osp", ".", "join", "(", "root", ",", "'info/tracks_train_info.mat'", ")", "\n", "self", ".", "track_test_info_path", "=", "osp", ".", "join", "(", "root", ",", "'info/tracks_test_info.mat'", ")", "\n", "self", ".", "query_IDX_path", "=", "osp", ".", "join", "(", "root", ",", "'info/query_IDX.mat'", ")", "\n", "# self.attributes_path = osp.join(root, \"mars_attributes.csv\")", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "# prepare meta data", "\n", "train_names", "=", "self", ".", "_get_names", "(", "self", ".", "train_name_path", ")", "\n", "test_names", "=", "self", ".", "_get_names", "(", "self", ".", "test_name_path", ")", "\n", "# self.attributes = pd.read_csv(osp.join(self.root, \"mars_attr.csv\"), encoding=\"gbk\")", "\n", "track_train", "=", "loadmat", "(", "self", ".", "track_train_info_path", ")", "[", "'track_train_info'", "]", "# numpy.ndarray (8298, 4)", "\n", "track_test", "=", "loadmat", "(", "self", ".", "track_test_info_path", ")", "[", "'track_test_info'", "]", "# numpy.ndarray (12180, 4)", "\n", "query_IDX", "=", "loadmat", "(", "self", ".", "query_IDX_path", ")", "[", "'query_IDX'", "]", ".", "squeeze", "(", ")", "# numpy.ndarray (1980,)", "\n", "query_IDX", "-=", "1", "# index from 0", "\n", "track_query", "=", "track_test", "[", "query_IDX", ",", ":", "]", "\n", "gallery_IDX", "=", "[", "i", "for", "i", "in", "range", "(", "track_test", ".", "shape", "[", "0", "]", ")", "if", "i", "not", "in", "query_IDX", "]", "\n", "track_gallery", "=", "track_test", "[", "gallery_IDX", ",", ":", "]", "\n", "train", ",", "num_train_tracklets", ",", "num_train_pids", ",", "num_train_imgs", "=", "self", ".", "_process_data", "(", "train_names", ",", "track_train", ",", "home_dir", "=", "'bbox_train'", ",", "relabel", "=", "True", ",", "min_seq_len", "=", "min_seq_len", ")", "\n", "query", ",", "num_query_tracklets", ",", "num_query_pids", ",", "num_query_imgs", "=", "self", ".", "_process_data", "(", "test_names", ",", "track_query", ",", "home_dir", "=", "'bbox_test'", ",", "relabel", "=", "False", ",", "min_seq_len", "=", "min_seq_len", ")", "\n", "gallery", ",", "num_gallery_tracklets", ",", "num_gallery_pids", ",", "num_gallery_imgs", "=", "self", ".", "_process_data", "(", "test_names", ",", "track_gallery", ",", "home_dir", "=", "'bbox_test'", ",", "relabel", "=", "False", ",", "min_seq_len", "=", "min_seq_len", ")", "\n", "\n", "num_imgs_per_tracklet", "=", "num_train_imgs", "+", "num_query_imgs", "+", "num_gallery_imgs", "\n", "min_num", "=", "np", ".", "min", "(", "num_imgs_per_tracklet", ")", "\n", "max_num", "=", "np", ".", "max", "(", "num_imgs_per_tracklet", ")", "\n", "avg_num", "=", "np", ".", "mean", "(", "num_imgs_per_tracklet", ")", "\n", "\n", "num_total_pids", "=", "num_train_pids", "+", "num_query_pids", "\n", "num_total_tracklets", "=", "num_train_tracklets", "+", "num_query_tracklets", "+", "num_gallery_tracklets", "\n", "\n", "print", "(", "\"=> MARS loaded\"", ")", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # tracklets\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_tracklets", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_tracklets", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_tracklets", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  total    | {:5d} | {:8d}\"", ".", "format", "(", "num_total_pids", ",", "num_total_tracklets", ")", ")", "\n", "print", "(", "\"  number of images per tracklet: {} ~ {}, average {:.1f}\"", ".", "format", "(", "min_num", ",", "max_num", ",", "avg_num", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", "=", "num_train_pids", "\n", "self", ".", "num_query_pids", "=", "num_query_pids", "\n", "self", ".", "num_gallery_pids", "=", "num_gallery_pids", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.Mars._check_before_run": [[98, 112], ["os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "root", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "root", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_name_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_name_path", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "test_name_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "test_name_path", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "track_train_info_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "track_train_info_path", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "track_test_info_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "track_test_info_path", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "query_IDX_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "query_IDX_path", ")", ")", "\n", "# if not osp.exists(self.attributes_path):", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.Mars._get_names": [[116, 123], ["open", "line.rstrip", "names.append"], "methods", ["None"], ["", "", "def", "_get_names", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "new_line", "=", "line", ".", "rstrip", "(", ")", "\n", "names", ".", "append", "(", "new_line", ")", "\n", "", "", "return", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.Mars._process_data": [[124, 161], ["list", "len", "range", "len", "set", "meta_data[].tolist", "len", "len", "os.join", "os.join", "len", "tuple", "tracklets.append", "num_imgs_per_tracklet.append", "enumerate", "set", "set", "len"], "methods", ["None"], ["", "def", "_process_data", "(", "self", ",", "names", ",", "meta_data", ",", "home_dir", "=", "None", ",", "relabel", "=", "False", ",", "min_seq_len", "=", "0", ")", ":", "\n", "        ", "assert", "home_dir", "in", "[", "'bbox_train'", ",", "'bbox_test'", "]", "\n", "num_tracklets", "=", "meta_data", ".", "shape", "[", "0", "]", "\n", "pid_list", "=", "list", "(", "set", "(", "meta_data", "[", ":", ",", "2", "]", ".", "tolist", "(", ")", ")", ")", "\n", "num_pids", "=", "len", "(", "pid_list", ")", "\n", "\n", "if", "relabel", ":", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_list", ")", "}", "\n", "tracklets", "=", "[", "]", "\n", "num_imgs_per_tracklet", "=", "[", "]", "\n", "for", "tracklet_idx", "in", "range", "(", "num_tracklets", ")", ":", "\n", "            ", "data", "=", "meta_data", "[", "tracklet_idx", ",", "...", "]", "\n", "start_index", ",", "end_index", ",", "pid", ",", "camid", "=", "data", "\n", "if", "pid", "==", "-", "1", ":", "continue", "# junk images are just ignored", "\n", "img_names", "=", "names", "[", "start_index", "-", "1", ":", "end_index", "]", "\n", "assert", "1", "<=", "camid", "<=", "6", "\n", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "camid", "-=", "1", "# index starts from 0", "\n", "# make sure image names correspond to the same person", "\n", "pnames", "=", "[", "img_name", "[", ":", "4", "]", "for", "img_name", "in", "img_names", "]", "\n", "assert", "len", "(", "set", "(", "pnames", ")", ")", "==", "1", ",", "\"Error: a single tracklet contains different person images\"", "\n", "\n", "# make sure all images are captured under the same camera*", "\n", "camnames", "=", "[", "img_name", "[", "5", "]", "for", "img_name", "in", "img_names", "]", "\n", "assert", "len", "(", "set", "(", "camnames", ")", ")", "==", "1", ",", "\"Error: images are captured under different cameras!\"", "\n", "\n", "# append image names with directory information", "\n", "img_paths", "=", "[", "osp", ".", "join", "(", "self", ".", "root", ",", "home_dir", ",", "img_name", "[", ":", "4", "]", ",", "img_name", ")", "for", "img_name", "in", "img_names", "]", "\n", "\n", "if", "len", "(", "img_paths", ")", ">=", "min_seq_len", ":", "\n", "# random.shuffle(img_paths)", "\n", "                ", "img_paths", "=", "tuple", "(", "img_paths", ")", "\n", "tracklets", ".", "append", "(", "(", "img_paths", ",", "pid", ",", "camid", ",", "tracklet_idx", ")", ")", "\n", "num_imgs_per_tracklet", ".", "append", "(", "len", "(", "img_paths", ")", ")", "\n", "\n", "", "", "num_tracklets", "=", "len", "(", "tracklets", ")", "\n", "return", "tracklets", ",", "num_tracklets", ",", "num_pids", ",", "num_imgs_per_tracklet", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.iLIDSVID.__init__": [[186, 234], ["data_manager.iLIDSVID._download_data", "data_manager.iLIDSVID._check_before_run", "data_manager.iLIDSVID._prepare_split", "utils.read_json", "print", "data_manager.iLIDSVID._process_data", "data_manager.iLIDSVID._process_data", "data_manager.iLIDSVID._process_data", "numpy.min", "numpy.max", "numpy.mean", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "len", "ValueError", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.iLIDSVID._download_data", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._check_before_run", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.iLIDSVID._prepare_split", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.read_json", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._process_data", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._process_data", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._process_data"], ["def", "__init__", "(", "self", ",", "split_id", "=", "0", ")", ":", "\n", "        ", "self", ".", "_download_data", "(", ")", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "self", ".", "_prepare_split", "(", ")", "\n", "splits", "=", "read_json", "(", "self", ".", "split_path", ")", "\n", "if", "split_id", ">=", "len", "(", "splits", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"split_id exceeds range, received {}, but expected between 0 and {}\"", ".", "format", "(", "split_id", ",", "len", "(", "splits", ")", "-", "1", ")", ")", "\n", "", "split", "=", "splits", "[", "split_id", "]", "\n", "train_dirs", ",", "test_dirs", "=", "split", "[", "'train'", "]", ",", "split", "[", "'test'", "]", "\n", "print", "(", "\"# train identites: {}, # test identites {}\"", ".", "format", "(", "len", "(", "train_dirs", ")", ",", "len", "(", "test_dirs", ")", ")", ")", "\n", "\n", "train", ",", "num_train_tracklets", ",", "num_train_pids", ",", "num_imgs_train", "=", "self", ".", "_process_data", "(", "train_dirs", ",", "cam1", "=", "True", ",", "cam2", "=", "True", ")", "\n", "query", ",", "num_query_tracklets", ",", "num_query_pids", ",", "num_imgs_query", "=", "self", ".", "_process_data", "(", "test_dirs", ",", "cam1", "=", "True", ",", "cam2", "=", "False", ")", "\n", "gallery", ",", "num_gallery_tracklets", ",", "num_gallery_pids", ",", "num_imgs_gallery", "=", "self", ".", "_process_data", "(", "test_dirs", ",", "cam1", "=", "False", ",", "cam2", "=", "True", ")", "\n", "\n", "num_imgs_per_tracklet", "=", "num_imgs_train", "+", "num_imgs_query", "+", "num_imgs_gallery", "\n", "min_num", "=", "np", ".", "min", "(", "num_imgs_per_tracklet", ")", "\n", "max_num", "=", "np", ".", "max", "(", "num_imgs_per_tracklet", ")", "\n", "avg_num", "=", "np", ".", "mean", "(", "num_imgs_per_tracklet", ")", "\n", "\n", "num_total_pids", "=", "num_train_pids", "+", "num_query_pids", "\n", "num_total_tracklets", "=", "num_train_tracklets", "+", "num_query_tracklets", "+", "num_gallery_tracklets", "\n", "\n", "print", "(", "\"=> iLIDS-VID loaded\"", ")", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # tracklets\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_tracklets", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_tracklets", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_tracklets", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  total    | {:5d} | {:8d}\"", ".", "format", "(", "num_total_pids", ",", "num_total_tracklets", ")", ")", "\n", "print", "(", "\"  number of images per tracklet: {} ~ {}, average {:.1f}\"", ".", "format", "(", "min_num", ",", "max_num", ",", "avg_num", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "\n", "self", ".", "train", "=", "train", "\n", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", "=", "num_train_pids", "\n", "self", ".", "num_query_pids", "=", "num_query_pids", "\n", "self", ".", "num_gallery_pids", "=", "num_gallery_pids", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.iLIDSVID._download_data": [[235, 251], ["os.exists", "os.exists", "utils.mkdir_if_missing", "os.join", "os.join", "print", "urllib.URLopener", "urllib.URLopener.retrieve", "print", "tarfile.open", "tarfile.open.extractall", "tarfile.open.close", "print", "os.basename", "os.basename"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.osutils.mkdir_if_missing", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.logging.Logger.close"], ["", "def", "_download_data", "(", "self", ")", ":", "\n", "        ", "if", "osp", ".", "exists", "(", "self", ".", "root", ")", ":", "\n", "            ", "print", "(", "\"This dataset has been downloaded.\"", ")", "\n", "return", "\n", "\n", "", "mkdir_if_missing", "(", "self", ".", "root", ")", "\n", "fpath", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "osp", ".", "basename", "(", "self", ".", "dataset_url", ")", ")", "\n", "\n", "print", "(", "\"Downloading iLIDS-VID dataset\"", ")", "\n", "url_opener", "=", "urllib", ".", "URLopener", "(", ")", "\n", "url_opener", ".", "retrieve", "(", "self", ".", "dataset_url", ",", "fpath", ")", "\n", "\n", "print", "(", "\"Extracting files\"", ")", "\n", "tar", "=", "tarfile", ".", "open", "(", "fpath", ")", "\n", "tar", ".", "extractall", "(", "path", "=", "self", ".", "root", ")", "\n", "tar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.iLIDSVID._check_before_run": [[252, 260], ["os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "root", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "root", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "data_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "data_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "split_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "split_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.iLIDSVID._prepare_split": [[261, 301], ["print", "os.exists", "os.exists", "print", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "range", "print", "print", "utils.write_json", "scipy.io.loadmat", "set", "set", "sorted", "sorted", "splits.append", "list", "list", "len", "int", "int"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.write_json"], ["", "", "def", "_prepare_split", "(", "self", ")", ":", "\n", "        ", "if", "not", "osp", ".", "exists", "(", "self", ".", "split_path", ")", ":", "\n", "            ", "print", "(", "\"Creating splits\"", ")", "\n", "mat_split_data", "=", "loadmat", "(", "self", ".", "split_mat_path", ")", "[", "'ls_set'", "]", "\n", "\n", "num_splits", "=", "mat_split_data", ".", "shape", "[", "0", "]", "\n", "num_total_ids", "=", "mat_split_data", ".", "shape", "[", "1", "]", "\n", "assert", "num_splits", "==", "10", "\n", "assert", "num_total_ids", "==", "300", "\n", "num_ids_each", "=", "num_total_ids", "/", "2", "\n", "\n", "# pids in mat_split_data are indices, so we need to transform them", "\n", "# to real pids", "\n", "person_cam1_dirs", "=", "os", ".", "listdir", "(", "self", ".", "cam_1_path", ")", "\n", "person_cam2_dirs", "=", "os", ".", "listdir", "(", "self", ".", "cam_2_path", ")", "\n", "\n", "# make sure persons in one camera view can be found in the other camera view", "\n", "assert", "set", "(", "person_cam1_dirs", ")", "==", "set", "(", "person_cam2_dirs", ")", "\n", "\n", "splits", "=", "[", "]", "\n", "for", "i_split", "in", "range", "(", "num_splits", ")", ":", "\n", "# first 50% for testing and the remaining for training, following Wang et al. ECCV'14.", "\n", "                ", "train_idxs", "=", "sorted", "(", "list", "(", "mat_split_data", "[", "i_split", ",", "num_ids_each", ":", "]", ")", ")", "\n", "test_idxs", "=", "sorted", "(", "list", "(", "mat_split_data", "[", "i_split", ",", ":", "num_ids_each", "]", ")", ")", "\n", "\n", "train_idxs", "=", "[", "int", "(", "i", ")", "-", "1", "for", "i", "in", "train_idxs", "]", "\n", "test_idxs", "=", "[", "int", "(", "i", ")", "-", "1", "for", "i", "in", "test_idxs", "]", "\n", "\n", "# transform pids to person dir names", "\n", "train_dirs", "=", "[", "person_cam1_dirs", "[", "i", "]", "for", "i", "in", "train_idxs", "]", "\n", "test_dirs", "=", "[", "person_cam1_dirs", "[", "i", "]", "for", "i", "in", "test_idxs", "]", "\n", "\n", "split", "=", "{", "'train'", ":", "train_dirs", ",", "'test'", ":", "test_dirs", "}", "\n", "splits", ".", "append", "(", "split", ")", "\n", "\n", "", "print", "(", "\"Totally {} splits are created, following Wang et al. ECCV'14\"", ".", "format", "(", "len", "(", "splits", ")", ")", ")", "\n", "print", "(", "\"Split file is saved to {}\"", ".", "format", "(", "self", ".", "split_path", ")", ")", "\n", "write_json", "(", "splits", ",", "self", ".", "split_path", ")", "\n", "\n", "", "print", "(", "\"Splits created\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.iLIDSVID._process_data": [[302, 330], ["len", "len", "enumerate", "os.join", "os.join", "glob.glob", "tuple", "tracklets.append", "num_imgs_per_tracklet.append", "os.join", "os.join", "glob.glob", "tuple", "tracklets.append", "num_imgs_per_tracklet.append", "os.join", "os.join", "len", "len", "os.join", "os.join", "len", "len"], "methods", ["None"], ["", "def", "_process_data", "(", "self", ",", "dirnames", ",", "cam1", "=", "True", ",", "cam2", "=", "True", ")", ":", "\n", "        ", "tracklets", "=", "[", "]", "\n", "num_imgs_per_tracklet", "=", "[", "]", "\n", "dirname2pid", "=", "{", "dirname", ":", "i", "for", "i", ",", "dirname", "in", "enumerate", "(", "dirnames", ")", "}", "\n", "\n", "for", "dirname", "in", "dirnames", ":", "\n", "            ", "if", "cam1", ":", "\n", "                ", "person_dir", "=", "osp", ".", "join", "(", "self", ".", "cam_1_path", ",", "dirname", ")", "\n", "img_names", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "person_dir", ",", "'*.png'", ")", ")", "\n", "assert", "len", "(", "img_names", ")", ">", "0", "\n", "img_names", "=", "tuple", "(", "img_names", ")", "\n", "pid", "=", "dirname2pid", "[", "dirname", "]", "\n", "tracklets", ".", "append", "(", "(", "img_names", ",", "pid", ",", "0", ")", ")", "\n", "num_imgs_per_tracklet", ".", "append", "(", "len", "(", "img_names", ")", ")", "\n", "\n", "", "if", "cam2", ":", "\n", "                ", "person_dir", "=", "osp", ".", "join", "(", "self", ".", "cam_2_path", ",", "dirname", ")", "\n", "img_names", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "person_dir", ",", "'*.png'", ")", ")", "\n", "assert", "len", "(", "img_names", ")", ">", "0", "\n", "img_names", "=", "tuple", "(", "img_names", ")", "\n", "pid", "=", "dirname2pid", "[", "dirname", "]", "\n", "tracklets", ".", "append", "(", "(", "img_names", ",", "pid", ",", "1", ")", ")", "\n", "num_imgs_per_tracklet", ".", "append", "(", "len", "(", "img_names", ")", ")", "\n", "\n", "", "", "num_tracklets", "=", "len", "(", "tracklets", ")", "\n", "num_pids", "=", "len", "(", "dirnames", ")", "\n", "\n", "return", "tracklets", ",", "num_tracklets", ",", "num_pids", ",", "num_imgs_per_tracklet", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.PRID.__init__": [[353, 397], ["data_manager.PRID._check_before_run", "utils.read_json", "print", "data_manager.PRID._process_data", "data_manager.PRID._process_data", "data_manager.PRID._process_data", "numpy.min", "numpy.max", "numpy.mean", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "len", "ValueError", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._check_before_run", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.read_json", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._process_data", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._process_data", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._process_data"], ["def", "__init__", "(", "self", ",", "split_id", "=", "0", ",", "min_seq_len", "=", "0", ")", ":", "\n", "        ", "self", ".", "_check_before_run", "(", ")", "\n", "splits", "=", "read_json", "(", "self", ".", "split_path", ")", "\n", "if", "split_id", ">=", "len", "(", "splits", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"split_id exceeds range, received {}, but expected between 0 and {}\"", ".", "format", "(", "split_id", ",", "len", "(", "splits", ")", "-", "1", ")", ")", "\n", "", "split", "=", "splits", "[", "split_id", "]", "\n", "train_dirs", ",", "test_dirs", "=", "split", "[", "'train'", "]", ",", "split", "[", "'test'", "]", "\n", "print", "(", "\"# train identites: {}, # test identites {}\"", ".", "format", "(", "len", "(", "train_dirs", ")", ",", "len", "(", "test_dirs", ")", ")", ")", "\n", "\n", "train", ",", "num_train_tracklets", ",", "num_train_pids", ",", "num_imgs_train", "=", "self", ".", "_process_data", "(", "train_dirs", ",", "cam1", "=", "True", ",", "cam2", "=", "True", ")", "\n", "query", ",", "num_query_tracklets", ",", "num_query_pids", ",", "num_imgs_query", "=", "self", ".", "_process_data", "(", "test_dirs", ",", "cam1", "=", "True", ",", "cam2", "=", "False", ")", "\n", "gallery", ",", "num_gallery_tracklets", ",", "num_gallery_pids", ",", "num_imgs_gallery", "=", "self", ".", "_process_data", "(", "test_dirs", ",", "cam1", "=", "False", ",", "cam2", "=", "True", ")", "\n", "\n", "num_imgs_per_tracklet", "=", "num_imgs_train", "+", "num_imgs_query", "+", "num_imgs_gallery", "\n", "min_num", "=", "np", ".", "min", "(", "num_imgs_per_tracklet", ")", "\n", "max_num", "=", "np", ".", "max", "(", "num_imgs_per_tracklet", ")", "\n", "avg_num", "=", "np", ".", "mean", "(", "num_imgs_per_tracklet", ")", "\n", "\n", "num_total_pids", "=", "num_train_pids", "+", "num_query_pids", "\n", "num_total_tracklets", "=", "num_train_tracklets", "+", "num_query_tracklets", "+", "num_gallery_tracklets", "\n", "\n", "print", "(", "\"=> PRID-2011 loaded\"", ")", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # tracklets\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_tracklets", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_tracklets", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_tracklets", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  total    | {:5d} | {:8d}\"", ".", "format", "(", "num_total_pids", ",", "num_total_tracklets", ")", ")", "\n", "print", "(", "\"  number of images per tracklet: {} ~ {}, average {:.1f}\"", ".", "format", "(", "min_num", ",", "max_num", ",", "avg_num", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", "=", "num_train_pids", "\n", "self", ".", "num_query_pids", "=", "num_query_pids", "\n", "self", ".", "num_gallery_pids", "=", "num_gallery_pids", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.PRID._check_before_run": [[398, 402], ["os.exists", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "root", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "root", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.PRID._process_data": [[403, 431], ["len", "len", "enumerate", "os.join", "os.join", "glob.glob", "tuple", "tracklets.append", "num_imgs_per_tracklet.append", "os.join", "os.join", "glob.glob", "tuple", "tracklets.append", "num_imgs_per_tracklet.append", "os.join", "os.join", "len", "len", "os.join", "os.join", "len", "len"], "methods", ["None"], ["", "", "def", "_process_data", "(", "self", ",", "dirnames", ",", "cam1", "=", "True", ",", "cam2", "=", "True", ")", ":", "\n", "        ", "tracklets", "=", "[", "]", "\n", "num_imgs_per_tracklet", "=", "[", "]", "\n", "dirname2pid", "=", "{", "dirname", ":", "i", "for", "i", ",", "dirname", "in", "enumerate", "(", "dirnames", ")", "}", "\n", "\n", "for", "dirname", "in", "dirnames", ":", "\n", "            ", "if", "cam1", ":", "\n", "                ", "person_dir", "=", "osp", ".", "join", "(", "self", ".", "cam_a_path", ",", "dirname", ")", "\n", "img_names", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "person_dir", ",", "'*.png'", ")", ")", "\n", "assert", "len", "(", "img_names", ")", ">", "0", "\n", "img_names", "=", "tuple", "(", "img_names", ")", "\n", "pid", "=", "dirname2pid", "[", "dirname", "]", "\n", "tracklets", ".", "append", "(", "(", "img_names", ",", "pid", ",", "0", ")", ")", "\n", "num_imgs_per_tracklet", ".", "append", "(", "len", "(", "img_names", ")", ")", "\n", "\n", "", "if", "cam2", ":", "\n", "                ", "person_dir", "=", "osp", ".", "join", "(", "self", ".", "cam_b_path", ",", "dirname", ")", "\n", "img_names", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "person_dir", ",", "'*.png'", ")", ")", "\n", "assert", "len", "(", "img_names", ")", ">", "0", "\n", "img_names", "=", "tuple", "(", "img_names", ")", "\n", "pid", "=", "dirname2pid", "[", "dirname", "]", "\n", "tracklets", ".", "append", "(", "(", "img_names", ",", "pid", ",", "1", ")", ")", "\n", "num_imgs_per_tracklet", ".", "append", "(", "len", "(", "img_names", ")", ")", "\n", "\n", "", "", "num_tracklets", "=", "len", "(", "tracklets", ")", "\n", "num_pids", "=", "len", "(", "dirnames", ")", "\n", "\n", "return", "tracklets", ",", "num_tracklets", ",", "num_pids", ",", "num_imgs_per_tracklet", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video.__init__": [[447, 492], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.join", "os.join", "data_manager.DukeMTMC_Video._check_before_run", "pandas.read_csv", "data_manager.DukeMTMC_Video._process_data", "data_manager.DukeMTMC_Video._process_data", "data_manager.DukeMTMC_Video._process_data", "numpy.min", "numpy.max", "numpy.mean", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._check_before_run", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._process_data", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._process_data", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._process_data"], ["def", "__init__", "(", "self", ",", "root", ",", "min_seq_len", "=", "0", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "train_name_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"train\"", ")", "\n", "self", ".", "gallery_name_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"gallery\"", ")", "\n", "self", ".", "query_name_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"query\"", ")", "\n", "self", ".", "attributes_path", "=", "osp", ".", "join", "(", "root", ",", "\"duke_attributes.csv\"", ")", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "self", ".", "attributes", "=", "pd", ".", "read_csv", "(", "self", ".", "attributes_path", ")", "\n", "train", ",", "num_train_tracklets", ",", "num_train_pids", ",", "num_train_imgs", ",", "train_t_list", "=", "self", ".", "_process_data", "(", "self", ".", "train_name_path", ",", "relabel", "=", "True", ",", "min_seq_len", "=", "min_seq_len", ")", "\n", "query", ",", "num_query_tracklets", ",", "num_query_pids", ",", "num_query_imgs", ",", "query_t_list", "=", "self", ".", "_process_data", "(", "self", ".", "query_name_path", ",", "relabel", "=", "False", ",", "min_seq_len", "=", "min_seq_len", ")", "\n", "\n", "\n", "gallery", ",", "num_gallery_tracklets", ",", "num_gallery_pids", ",", "num_gallery_imgs", ",", "gallery_t_list", "=", "self", ".", "_process_data", "(", "self", ".", "gallery_name_path", ",", "relabel", "=", "False", ",", "min_seq_len", "=", "min_seq_len", ",", "exclude_tracklets", "=", "query_t_list", ")", "\n", "\n", "num_imgs_per_tracklet", "=", "num_train_imgs", "+", "num_query_imgs", "+", "num_gallery_imgs", "\n", "min_num", "=", "np", ".", "min", "(", "num_imgs_per_tracklet", ")", "\n", "max_num", "=", "np", ".", "max", "(", "num_imgs_per_tracklet", ")", "\n", "avg_num", "=", "np", ".", "mean", "(", "num_imgs_per_tracklet", ")", "\n", "\n", "num_total_pids", "=", "num_train_pids", "+", "num_gallery_pids", "\n", "num_total_tracklets", "=", "num_train_tracklets", "+", "num_query_tracklets", "+", "num_gallery_tracklets", "\n", "\n", "print", "(", "\"=> MARS loaded\"", ")", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # tracklets\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_tracklets", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_tracklets", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_tracklets", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  total    | {:5d} | {:8d}\"", ".", "format", "(", "num_total_pids", ",", "num_total_tracklets", ")", ")", "\n", "print", "(", "\"  number of images per tracklet: {} ~ {}, average {:.1f}\"", ".", "format", "(", "min_num", ",", "max_num", ",", "avg_num", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", "=", "num_train_pids", "\n", "self", ".", "num_query_pids", "=", "num_query_pids", "\n", "self", ".", "num_gallery_pids", "=", "num_gallery_pids", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video.get_mean_and_var": [[493, 508], ["numpy.zeros", "numpy.zeros", "tqdm.tqdm.tqdm", "numpy.sqrt", "print", "imgs.extend", "x.mean().numpy", "len", "x.mean", "len", "transforms.ToTensor", "video_loader.read_image"], "methods", ["None"], ["", "def", "get_mean_and_var", "(", "self", ")", ":", "\n", "        ", "imgs", "=", "[", "]", "\n", "for", "t", "in", "self", ".", "train", ":", "\n", "            ", "imgs", ".", "extend", "(", "t", "[", "0", "]", ")", "\n", "", "channel", "=", "3", "\n", "x_tot", "=", "np", ".", "zeros", "(", "channel", ")", "\n", "x2_tot", "=", "np", ".", "zeros", "(", "channel", ")", "\n", "for", "img", "in", "tqdm", "(", "imgs", ")", ":", "\n", "            ", "x", "=", "T", ".", "ToTensor", "(", ")", "(", "read_image", "(", "img", ")", ")", ".", "view", "(", "3", ",", "-", "1", ")", "\n", "x_tot", "+=", "x", ".", "mean", "(", "dim", "=", "1", ")", ".", "numpy", "(", ")", "\n", "x2_tot", "+=", "(", "x", "**", "2", ")", ".", "mean", "(", "dim", "=", "1", ")", ".", "numpy", "(", ")", "\n", "\n", "", "channel_avr", "=", "x_tot", "/", "len", "(", "imgs", ")", "\n", "channel_std", "=", "np", ".", "sqrt", "(", "x2_tot", "/", "len", "(", "imgs", ")", "-", "channel_avr", "**", "2", ")", "\n", "print", "(", "channel_avr", ",", "channel_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._check_before_run": [[509, 521], ["os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "root", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "root", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_name_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_name_path", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "gallery_name_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "gallery_name_path", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "query_name_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "query_name_path", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "attributes_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "attributes_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._get_names": [[522, 529], ["open", "line.rstrip", "names.append"], "methods", ["None"], ["", "", "def", "_get_names", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "new_line", "=", "line", ".", "rstrip", "(", ")", "\n", "names", ".", "append", "(", "new_line", ")", "\n", "", "", "return", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.DukeMTMC_Video._process_data": [[530, 570], ["os.listdir", "os.listdir", "os.listdir", "os.listdir", "set", "range", "len", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "len", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "int", "int", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "len", "os.join", "os.join", "len", "random.shuffle", "tuple", "tracklets.append", "num_imgs_per_tracklet.append", "set.append", "tracklets_path.append", "tracklets_list.append", "enumerate", "img_names[].split", "[].split", "set", "set", "len", "int", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "img_names[].split"], "methods", ["None"], ["", "def", "_process_data", "(", "self", ",", "home_dir", ",", "relabel", "=", "False", ",", "min_seq_len", "=", "0", ",", "attr", "=", "False", ",", "exclude_tracklets", "=", "None", ")", ":", "\n", "        ", "pid_list", "=", "[", "]", "\n", "tracklets_path", "=", "[", "]", "\n", "tracklets_list", "=", "[", "]", "\n", "for", "p", "in", "os", ".", "listdir", "(", "home_dir", ")", ":", "\n", "            ", "for", "t", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "home_dir", ",", "p", ")", ")", ":", "\n", "                ", "if", "exclude_tracklets", "is", "None", "or", "t", "not", "in", "exclude_tracklets", ":", "\n", "                    ", "pid_list", ".", "append", "(", "int", "(", "p", ")", ")", "\n", "tracklets_path", ".", "append", "(", "os", ".", "path", ".", "join", "(", "home_dir", ",", "p", "+", "\"/\"", "+", "t", ")", ")", "\n", "tracklets_list", ".", "append", "(", "t", ")", "\n", "", "", "", "pid_list", "=", "set", "(", "pid_list", ")", "\n", "if", "relabel", ":", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_list", ")", "}", "\n", "tracklets", "=", "[", "]", "\n", "num_imgs_per_tracklet", "=", "[", "]", "\n", "for", "tracklet_idx", "in", "range", "(", "len", "(", "tracklets_path", ")", ")", ":", "\n", "            ", "img_names", "=", "os", ".", "listdir", "(", "tracklets_path", "[", "tracklet_idx", "]", ")", "\n", "pid", "=", "int", "(", "img_names", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ")", "\n", "camid", "=", "int", "(", "img_names", "[", "0", "]", ".", "split", "(", "\"C\"", ")", "[", "1", "]", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ")", "\n", "assert", "1", "<=", "camid", "<=", "8", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "camid", "-=", "1", "# index starts from 0", "\n", "# make sure image names correspond to the same person", "\n", "pnames", "=", "[", "img_name", "[", ":", "4", "]", "for", "img_name", "in", "img_names", "]", "\n", "assert", "len", "(", "set", "(", "pnames", ")", ")", "==", "1", ",", "\"Error: a single tracklet contains different person images\"", "\n", "\n", "# make sure all images are captured under the same camera*", "\n", "camnames", "=", "[", "img_name", "[", "6", "]", "for", "img_name", "in", "img_names", "]", "\n", "assert", "len", "(", "set", "(", "camnames", ")", ")", "==", "1", ",", "\"Error: images are captured under different cameras!\"", "\n", "\n", "# append image names with directory information", "\n", "img_paths", "=", "[", "osp", ".", "join", "(", "tracklets_path", "[", "tracklet_idx", "]", ",", "img_name", ")", "for", "img_name", "in", "img_names", "]", "\n", "\n", "if", "len", "(", "img_paths", ")", ">=", "min_seq_len", ":", "\n", "                ", "random", ".", "shuffle", "(", "img_paths", ")", "\n", "img_paths", "=", "tuple", "(", "img_paths", ")", "\n", "tracklets", ".", "append", "(", "(", "img_paths", ",", "pid", ",", "camid", ")", ")", "\n", "num_imgs_per_tracklet", ".", "append", "(", "len", "(", "img_paths", ")", ")", "\n", "\n", "", "", "num_tracklets", "=", "len", "(", "tracklets", ")", "\n", "return", "tracklets", ",", "num_tracklets", ",", "len", "(", "pid_list", ")", ",", "num_imgs_per_tracklet", ",", "tracklets_list", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.get_names": [[580, 582], ["__factory.keys"], "function", ["None"], ["def", "get_names", "(", ")", ":", "\n", "    ", "return", "__factory", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.data_manager.init_dataset": [[583, 587], ["__factory.keys", "KeyError"], "function", ["None"], ["", "def", "init_dataset", "(", "name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "name", "not", "in", "__factory", ".", "keys", "(", ")", ":", "\n", "        ", "raise", "KeyError", "(", "\"Unknown dataset: {}\"", ".", "format", "(", "name", ")", ")", "\n", "", "return", "__factory", "[", "name", "]", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.samplers.RandomIdentitySampler.__init__": [[21, 30], ["torch.utils.data.sampler.Sampler.__init__", "collections.defaultdict", "enumerate", "list", "len", "samplers.RandomIdentitySampler.index_dic[].append", "samplers.RandomIdentitySampler.index_dic.keys"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__"], ["def", "__init__", "(", "self", ",", "data_source", ",", "num_instances", "=", "4", ")", ":", "\n", "        ", "super", "(", "RandomIdentitySampler", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "self", ".", "index_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "_", ",", "sid", ")", "in", "enumerate", "(", "data_source", ")", ":", "\n", "            ", "self", ".", "index_dic", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "", "self", ".", "pids", "=", "list", "(", "self", ".", "index_dic", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_identities", "=", "len", "(", "self", ".", "pids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.samplers.RandomIdentitySampler.__iter__": [[31, 42], ["torch.randperm", "iter", "numpy.random.choice", "ret.extend", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "torch", ".", "randperm", "(", "self", ".", "num_identities", ")", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "indices", ":", "\n", "            ", "pid", "=", "self", ".", "pids", "[", "i", "]", "\n", "t", "=", "self", ".", "index_dic", "[", "pid", "]", "\n", "replace", "=", "False", "if", "len", "(", "t", ")", ">=", "self", ".", "num_instances", "else", "True", "\n", "t", "=", "np", ".", "random", ".", "choice", "(", "t", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "replace", ")", "\n", "ret", ".", "extend", "(", "t", ")", "\n", "# print(ret)", "\n", "", "return", "iter", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.samplers.RandomIdentitySampler.__len__": [[43, 45], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_identities", "*", "self", ".", "num_instances", "\n", "", "", "class", "RandomIdentitySamplerStrongBasaline", "(", "Sampler", ")", ":", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.samplers.RandomIdentitySamplerStrongBasaline.__init__": [[55, 73], ["collections.defaultdict", "enumerate", "list", "samplers.RandomIdentitySamplerStrongBasaline.index_dic[].append", "samplers.RandomIdentitySamplerStrongBasaline.index_dic.keys", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_source", ",", "batch_size", ",", "num_instances", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "self", ".", "num_pids_per_batch", "=", "self", ".", "batch_size", "//", "self", ".", "num_instances", "\n", "self", ".", "index_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "_", ")", "in", "enumerate", "(", "self", ".", "data_source", ")", ":", "\n", "            ", "self", ".", "index_dic", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "", "self", ".", "pids", "=", "list", "(", "self", ".", "index_dic", ".", "keys", "(", ")", ")", "\n", "\n", "# estimate number of examples in an epoch", "\n", "self", ".", "length", "=", "0", "\n", "for", "pid", "in", "self", ".", "pids", ":", "\n", "            ", "idxs", "=", "self", ".", "index_dic", "[", "pid", "]", "\n", "num", "=", "len", "(", "idxs", ")", "\n", "if", "num", "<", "self", ".", "num_instances", ":", "\n", "                ", "num", "=", "self", ".", "num_instances", "\n", "", "self", ".", "length", "+=", "num", "-", "num", "%", "self", ".", "num_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.samplers.RandomIdentitySamplerStrongBasaline.__iter__": [[74, 102], ["collections.defaultdict", "copy.deepcopy", "len", "iter", "copy.deepcopy", "random.shuffle", "len", "random.sample", "len", "numpy.random.choice", "batch_idxs_dict[].pop.append", "batch_idxs_dict[].pop", "final_idxs.extend", "len", "batch_idxs_dict[].append", "len", "copy.deepcopy.remove"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "batch_idxs_dict", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "pid", "in", "self", ".", "pids", ":", "\n", "            ", "idxs", "=", "copy", ".", "deepcopy", "(", "self", ".", "index_dic", "[", "pid", "]", ")", "\n", "if", "len", "(", "idxs", ")", "<", "self", ".", "num_instances", ":", "\n", "                ", "idxs", "=", "np", ".", "random", ".", "choice", "(", "idxs", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "True", ")", "\n", "", "random", ".", "shuffle", "(", "idxs", ")", "\n", "batch_idxs", "=", "[", "]", "\n", "for", "idx", "in", "idxs", ":", "\n", "                ", "batch_idxs", ".", "append", "(", "idx", ")", "\n", "if", "len", "(", "batch_idxs", ")", "==", "self", ".", "num_instances", ":", "\n", "                    ", "batch_idxs_dict", "[", "pid", "]", ".", "append", "(", "batch_idxs", ")", "\n", "batch_idxs", "=", "[", "]", "\n", "\n", "", "", "", "avai_pids", "=", "copy", ".", "deepcopy", "(", "self", ".", "pids", ")", "\n", "final_idxs", "=", "[", "]", "\n", "\n", "while", "len", "(", "avai_pids", ")", ">=", "self", ".", "num_pids_per_batch", ":", "\n", "            ", "selected_pids", "=", "random", ".", "sample", "(", "avai_pids", ",", "self", ".", "num_pids_per_batch", ")", "\n", "for", "pid", "in", "selected_pids", ":", "\n", "                ", "batch_idxs", "=", "batch_idxs_dict", "[", "pid", "]", ".", "pop", "(", "0", ")", "\n", "final_idxs", ".", "extend", "(", "batch_idxs", ")", "\n", "if", "len", "(", "batch_idxs_dict", "[", "pid", "]", ")", "==", "0", ":", "\n", "                    ", "avai_pids", ".", "remove", "(", "pid", ")", "\n", "\n", "", "", "", "self", ".", "length", "=", "len", "(", "final_idxs", ")", "\n", "return", "iter", "(", "final_idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.samplers.RandomIdentitySamplerStrongBasaline.__len__": [[103, 105], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.samplers.RandomIdentitySampler_alignedreid.__init__": [[119, 127], ["collections.defaultdict", "enumerate", "list", "len", "samplers.RandomIdentitySampler_alignedreid.index_dic[].append", "samplers.RandomIdentitySampler_alignedreid.index_dic.keys"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_source", ",", "num_instances", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "self", ".", "index_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "_", ")", "in", "enumerate", "(", "data_source", ")", ":", "\n", "            ", "self", ".", "index_dic", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "", "self", ".", "pids", "=", "list", "(", "self", ".", "index_dic", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_identities", "=", "len", "(", "self", ".", "pids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.samplers.RandomIdentitySampler_alignedreid.__iter__": [[128, 138], ["torch.randperm", "iter", "numpy.random.choice", "ret.extend", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "torch", ".", "randperm", "(", "self", ".", "num_identities", ")", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "indices", ":", "\n", "            ", "pid", "=", "self", ".", "pids", "[", "i", "]", "\n", "t", "=", "self", ".", "index_dic", "[", "pid", "]", "\n", "replace", "=", "False", "if", "len", "(", "t", ")", ">=", "self", ".", "num_instances", "else", "True", "\n", "t", "=", "np", ".", "random", ".", "choice", "(", "t", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "replace", ")", "\n", "ret", ".", "extend", "(", "t", ")", "\n", "", "return", "iter", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.samplers.RandomIdentitySampler_alignedreid.__len__": [[139, 141], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_identities", "*", "self", ".", "num_instances", "", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqpreprocessor.SeqTrainPreprocessor.__init__": [[8, 16], ["object.__init__", "seqpreprocessor.SeqTrainPreprocessor.root.append"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seqset", ",", "dataset", ",", "seq_len", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "SeqTrainPreprocessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "seqset", "=", "seqset", "\n", "self", ".", "identities", "=", "dataset", ".", "identities", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "root", "=", "[", "dataset", ".", "images_dir", "]", "\n", "self", ".", "root", ".", "append", "(", "dataset", ".", "other_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqpreprocessor.SeqTrainPreprocessor.__len__": [[17, 19], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "seqset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqpreprocessor.SeqTrainPreprocessor.__getitem__": [[20, 24], ["isinstance", "seqpreprocessor.SeqTrainPreprocessor._get_single_item", "seqpreprocessor.SeqTrainPreprocessor._get_single_item"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqpreprocessor.SeqTestPreprocessor._get_single_item", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqpreprocessor.SeqTestPreprocessor._get_single_item"], ["", "def", "__getitem__", "(", "self", ",", "indices", ")", ":", "\n", "        ", "if", "isinstance", "(", "indices", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "return", "[", "self", ".", "_get_single_item", "(", "index", ")", "for", "index", "in", "indices", "]", "\n", "", "return", "self", ".", "_get_single_item", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqpreprocessor.SeqTrainPreprocessor._get_single_item": [[25, 54], ["range", "torch.stack", "torch.stack", "os.join", "PIL.Image.open().convert", "os.join", "PIL.Image.open().convert", "imgseq.append", "flowseq.append", "len", "imgseq.append", "flowseq.append", "seqpreprocessor.SeqTrainPreprocessor.transform", "PIL.Image.open", "PIL.Image.open"], "methods", ["None"], ["", "def", "_get_single_item", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "start_ind", ",", "end_ind", ",", "pid", ",", "label", ",", "camid", "=", "self", ".", "seqset", "[", "index", "]", "\n", "\n", "imgseq", "=", "[", "]", "\n", "flowseq", "=", "[", "]", "\n", "for", "ind", "in", "range", "(", "start_ind", ",", "end_ind", ")", ":", "\n", "            ", "fname", "=", "self", ".", "identities", "[", "pid", "]", "[", "camid", "]", "[", "ind", "]", "\n", "fpath_img", "=", "osp", ".", "join", "(", "self", ".", "root", "[", "0", "]", ",", "fname", ")", "\n", "imgrgb", "=", "Image", ".", "open", "(", "fpath_img", ")", ".", "convert", "(", "'RGB'", ")", "\n", "fpath_flow", "=", "osp", ".", "join", "(", "self", ".", "root", "[", "1", "]", ",", "fname", ")", "\n", "flowrgb", "=", "Image", ".", "open", "(", "fpath_flow", ")", ".", "convert", "(", "'RGB'", ")", "\n", "imgseq", ".", "append", "(", "imgrgb", ")", "\n", "flowseq", ".", "append", "(", "flowrgb", ")", "\n", "\n", "", "while", "len", "(", "imgseq", ")", "<", "self", ".", "seq_len", ":", "\n", "            ", "imgseq", ".", "append", "(", "imgrgb", ")", "\n", "flowseq", ".", "append", "(", "flowrgb", ")", "\n", "\n", "", "seq", "=", "[", "imgseq", ",", "flowseq", "]", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "seq", "=", "self", ".", "transform", "(", "seq", ")", "\n", "\n", "", "img_tensor", "=", "torch", ".", "stack", "(", "seq", "[", "0", "]", ",", "0", ")", "\n", "\n", "flow_tensor", "=", "torch", ".", "stack", "(", "seq", "[", "1", "]", ",", "0", ")", "\n", "\n", "return", "img_tensor", ",", "flow_tensor", ",", "label", ",", "camid", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqpreprocessor.SeqTestPreprocessor.__init__": [[58, 66], ["object.__init__", "seqpreprocessor.SeqTestPreprocessor.root.append"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seqset", ",", "dataset", ",", "seq_len", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "SeqTestPreprocessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "seqset", "=", "seqset", "\n", "self", ".", "identities", "=", "dataset", ".", "identities", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "root", "=", "[", "dataset", ".", "images_dir", "]", "\n", "self", ".", "root", ".", "append", "(", "dataset", ".", "other_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqpreprocessor.SeqTestPreprocessor.__len__": [[67, 69], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "seqset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqpreprocessor.SeqTestPreprocessor.__getitem__": [[70, 74], ["isinstance", "seqpreprocessor.SeqTestPreprocessor._get_single_item", "seqpreprocessor.SeqTestPreprocessor._get_single_item"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqpreprocessor.SeqTestPreprocessor._get_single_item", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqpreprocessor.SeqTestPreprocessor._get_single_item"], ["", "def", "__getitem__", "(", "self", ",", "indices", ")", ":", "\n", "        ", "if", "isinstance", "(", "indices", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "return", "[", "self", ".", "_get_single_item", "(", "index", ")", "for", "index", "in", "indices", "]", "\n", "", "return", "self", ".", "_get_single_item", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqpreprocessor.SeqTestPreprocessor._get_single_item": [[75, 107], ["range", "torch.stack", "os.join", "PIL.Image.open().convert", "os.join", "PIL.Image.open().convert", "imgseq.append", "flowseq.append", "len", "imgseq.append", "flowseq.append", "seqpreprocessor.SeqTestPreprocessor.transform", "len", "torch.stack", "PIL.Image.open", "PIL.Image.open"], "methods", ["None"], ["", "def", "_get_single_item", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "start_ind", ",", "end_ind", ",", "pid", ",", "label", ",", "camid", "=", "self", ".", "seqset", "[", "index", "]", "\n", "\n", "imgseq", "=", "[", "]", "\n", "flowseq", "=", "[", "]", "\n", "for", "ind", "in", "range", "(", "start_ind", ",", "end_ind", ")", ":", "\n", "            ", "fname", "=", "self", ".", "identities", "[", "pid", "]", "[", "camid", "]", "[", "ind", "]", "\n", "fpath_img", "=", "osp", ".", "join", "(", "self", ".", "root", "[", "0", "]", ",", "fname", ")", "\n", "imgrgb", "=", "Image", ".", "open", "(", "fpath_img", ")", ".", "convert", "(", "'RGB'", ")", "\n", "fpath_flow", "=", "osp", ".", "join", "(", "self", ".", "root", "[", "1", "]", ",", "fname", ")", "\n", "flowrgb", "=", "Image", ".", "open", "(", "fpath_flow", ")", ".", "convert", "(", "'RGB'", ")", "\n", "imgseq", ".", "append", "(", "imgrgb", ")", "\n", "flowseq", ".", "append", "(", "flowrgb", ")", "\n", "\n", "", "while", "len", "(", "imgseq", ")", "<", "self", ".", "seq_len", ":", "\n", "            ", "imgseq", ".", "append", "(", "imgrgb", ")", "\n", "flowseq", ".", "append", "(", "flowrgb", ")", "\n", "\n", "", "seq", "=", "[", "imgseq", ",", "flowseq", "]", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "seq", "=", "self", ".", "transform", "(", "seq", ")", "\n", "\n", "", "img_tensor", "=", "torch", ".", "stack", "(", "seq", "[", "0", "]", ",", "0", ")", "\n", "\n", "if", "len", "(", "self", ".", "root", ")", "==", "2", ":", "\n", "            ", "flow_tensor", "=", "torch", ".", "stack", "(", "seq", "[", "1", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "flow_tensor", "=", "None", "\n", "\n", "", "return", "img_tensor", ",", "flow_tensor", ",", "pid", ",", "camid", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.datasequence.Datasequence.__init__": [[25, 34], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "split_id", "=", "0", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "split_id", "=", "split_id", "\n", "self", ".", "meta", "=", "None", "\n", "self", ".", "split", "=", "None", "\n", "self", ".", "train", ",", "self", ".", "val", ",", "self", ".", "trainval", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "self", ".", "query", ",", "self", ".", "gallery", "=", "[", "]", ",", "[", "]", "\n", "self", ".", "num_train_ids", ",", "self", ".", "num_val_ids", ",", "self", ".", "num_trainval_ids", "=", "0", ",", "0", ",", "0", "\n", "self", ".", "identities", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.datasequence.Datasequence.images_dir": [[35, 38], ["os.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "images_dir", "(", "self", ")", ":", "\n", "        ", "return", "osp", ".", "join", "(", "self", ".", "root", ",", "'images'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.datasequence.Datasequence.load": [[39, 92], ["utils.serialization.read_json", "numpy.asarray", "numpy.random.shuffle", "len", "isinstance", "sorted", "sorted", "utils.serialization.read_json", "datasequence._pluckseq", "datasequence._pluckseq", "datasequence._pluckseq", "len", "len", "len", "os.join", "len", "ValueError", "int", "ValueError", "os.join", "print", "print", "print", "print", "print", "print", "print", "print", "round", "len", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.read_json", "home.repos.pwc.inspect_result.flysnowtiger_GRL.utils.serialization.read_json", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.datasequence._pluckseq", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.datasequence._pluckseq", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.datasequence._pluckseq"], ["", "def", "load", "(", "self", ",", "seq_len", ",", "seq_str", ",", "num_val", "=", "0.3", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "splits", "=", "read_json", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "'splits.json'", ")", ")", "# \u6839\u636esplits.json\u6587\u4ef6", "\n", "if", "self", ".", "split_id", ">=", "len", "(", "splits", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"split_id exceeds total splits {}\"", "\n", ".", "format", "(", "len", "(", "splits", ")", ")", ")", "\n", "\n", "", "self", ".", "split", "=", "splits", "[", "self", ".", "split_id", "]", "\n", "\n", "# Randomly split train / val", "\n", "trainval_pids", "=", "np", ".", "asarray", "(", "self", ".", "split", "[", "'trainval'", "]", ")", "# 100\u4e2a\u5143\u7d20\u7684\u6570\u7ec4", "\n", "np", ".", "random", ".", "shuffle", "(", "trainval_pids", ")", "\n", "num", "=", "len", "(", "trainval_pids", ")", "# 100", "\n", "\n", "if", "isinstance", "(", "num_val", ",", "float", ")", ":", "\n", "            ", "num_val", "=", "int", "(", "round", "(", "num", "*", "num_val", ")", ")", "\n", "", "if", "num_val", ">=", "num", "or", "num_val", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"num_val exceeds total identities {}\"", "\n", ".", "format", "(", "num", ")", ")", "\n", "\n", "", "train_pids", "=", "sorted", "(", "trainval_pids", "[", ":", "-", "num_val", "]", ")", "# 99", "\n", "val_pids", "=", "sorted", "(", "trainval_pids", "[", "-", "num_val", ":", "]", ")", "# 1", "\n", "\n", "# comments validation set changes every time it loads", "\n", "\n", "self", ".", "meta", "=", "read_json", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "'meta.json'", ")", ")", "# \u5b57\u5178", "\n", "identities", "=", "self", ".", "meta", "[", "'identities'", "]", "\n", "self", ".", "identities", "=", "identities", "\n", "self", ".", "train", "=", "_pluckseq", "(", "identities", ",", "train_pids", ",", "seq_len", ",", "seq_str", ")", "# \u8fd9\u91cc\u786e\u5b9atracklets\u7684\u957f\u5ea6", "\n", "self", ".", "val", "=", "_pluckseq", "(", "identities", ",", "val_pids", ",", "seq_len", ",", "seq_str", ")", "\n", "self", ".", "trainval", "=", "_pluckseq", "(", "identities", ",", "trainval_pids", ",", "seq_len", ",", "seq_str", ")", "\n", "# res = len(self.trainval) % 4", "\n", "# length1 = len(self.trainval) - res", "\n", "# length2 = len(self.val) - res", "\n", "# self.val = self.val[0:length2]", "\n", "# self.trainval = self.trainval[0:length1]", "\n", "self", ".", "num_train_ids", "=", "len", "(", "train_pids", ")", "\n", "self", ".", "num_val_ids", "=", "len", "(", "val_pids", ")", "\n", "self", ".", "num_trainval_ids", "=", "len", "(", "trainval_pids", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "self", ".", "__class__", ".", "__name__", ",", "\"dataset loaded\"", ")", "\n", "print", "(", "\"  subset   | # ids | # sequences\"", ")", "\n", "print", "(", "\"  ---------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d}\"", "\n", ".", "format", "(", "self", ".", "num_train_ids", ",", "len", "(", "self", ".", "train", ")", ")", ")", "\n", "print", "(", "\"  val      | {:5d} | {:8d}\"", "\n", ".", "format", "(", "self", ".", "num_val_ids", ",", "len", "(", "self", ".", "val", ")", ")", ")", "\n", "print", "(", "\"  trainval | {:5d} | {:8d}\"", "\n", ".", "format", "(", "self", ".", "num_trainval_ids", ",", "len", "(", "self", ".", "trainval", ")", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d}\"", "\n", ".", "format", "(", "len", "(", "self", ".", "split", "[", "'query'", "]", ")", ",", "len", "(", "self", ".", "split", "[", "'query'", "]", ")", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d}\"", "\n", ".", "format", "(", "len", "(", "self", ".", "split", "[", "'gallery'", "]", ")", ",", "len", "(", "self", ".", "split", "[", "'gallery'", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.datasequence.Datasequence._check_integrity": [[93, 97], ["os.isdir", "os.isfile", "os.isfile", "os.join", "os.join", "os.join"], "methods", ["None"], ["", "", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "return", "osp", ".", "isdir", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "'images'", ")", ")", "and", "osp", ".", "isfile", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "'meta.json'", ")", ")", "and", "osp", ".", "isfile", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "'splits.json'", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.datasequence._pluckseq": [[8, 22], ["enumerate", "enumerate", "len", "ret.append", "range"], "function", ["None"], ["def", "_pluckseq", "(", "identities", ",", "indices", ",", "seq_len", ",", "seq_str", ")", ":", "\n", "    ", "ret", "=", "[", "]", "\n", "for", "index", ",", "pid", "in", "enumerate", "(", "indices", ")", ":", "\n", "        ", "pid_images", "=", "identities", "[", "pid", "]", "\n", "for", "camid", ",", "cam_images", "in", "enumerate", "(", "pid_images", ")", ":", "\n", "            ", "seqall", "=", "len", "(", "cam_images", ")", "\n", "seq_inds", "=", "[", "(", "start_ind", ",", "start_ind", "+", "seq_len", ")", "for", "start_ind", "in", "range", "(", "0", ",", "seqall", "-", "seq_len", ",", "seq_str", ")", "]", "\n", "\n", "if", "not", "seq_inds", ":", "\n", "                ", "seq_inds", "=", "[", "(", "0", ",", "seqall", ")", "]", "\n", "", "for", "seq_ind", "in", "seq_inds", ":", "\n", "                ", "ret", ".", "append", "(", "(", "seq_ind", "[", "0", "]", ",", "seq_ind", "[", "1", "]", ",", "pid", ",", "index", ",", "camid", ")", ")", "\n", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.sampler.RandomIdentitySampler.__init__": [[19, 27], ["collections.defaultdict", "enumerate", "list", "len", "sampler.RandomIdentitySampler.index_dic[].append", "sampler.RandomIdentitySampler.index_dic.keys"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ",", "num_instances", "=", "1", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "self", ".", "index_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "_", ")", "in", "enumerate", "(", "data_source", ")", ":", "\n", "            ", "self", ".", "index_dic", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "", "self", ".", "pids", "=", "list", "(", "self", ".", "index_dic", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_samples", "=", "len", "(", "data_source", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.sampler.RandomIdentitySampler.__len__": [[28, 30], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "*", "self", ".", "num_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.sampler.RandomIdentitySampler.__iter__": [[31, 43], ["torch.randperm", "iter", "ret.extend", "len", "numpy.random.choice", "numpy.random.choice"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "torch", ".", "randperm", "(", "self", ".", "num_samples", ")", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "indices", ":", "\n", "            ", "pid", "=", "self", ".", "pids", "[", "i", "]", "\n", "t", "=", "self", ".", "index_dic", "[", "pid", "]", "\n", "if", "len", "(", "t", ")", ">=", "self", ".", "num_instances", ":", "\n", "                ", "t", "=", "np", ".", "random", ".", "choice", "(", "t", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "t", "=", "np", ".", "random", ".", "choice", "(", "t", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "True", ")", "\n", "", "ret", ".", "extend", "(", "t", ")", "\n", "", "return", "iter", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.sampler.RandomPairSampler.__init__": [[46, 56], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "len", "enumerate", "sampler.RandomPairSampler.pid_cam[].append", "sampler.RandomPairSampler.pid_index[].append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "index_pid", "=", "defaultdict", "(", "int", ")", "\n", "self", ".", "pid_cam", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "pid_index", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "num_samples", "=", "len", "(", "data_source", ")", "\n", "for", "index", ",", "(", "_", ",", "_", ",", "_", ",", "pid", ",", "cam", ")", "in", "enumerate", "(", "data_source", ")", ":", "\n", "            ", "self", ".", "index_pid", "[", "index", "]", "=", "pid", "\n", "self", ".", "pid_cam", "[", "pid", "]", ".", "append", "(", "cam", ")", "\n", "self", ".", "pid_index", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.sampler.RandomPairSampler.__len__": [[57, 59], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.sampler.RandomPairSampler.__iter__": [[60, 81], ["torch.randperm", "iter", "int", "ret.append", "sampler.No_index", "ret.append", "numpy.random.choice", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.data.sampler.No_index"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "torch", ".", "randperm", "(", "self", ".", "num_samples", ")", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "indices", ":", "\n", "            ", "i", "=", "int", "(", "i", ")", "\n", "_", ",", "_", ",", "i_label", ",", "i_pid", ",", "i_cam", "=", "self", ".", "data_source", "[", "i", "]", "# relabel ?", "\n", "ret", ".", "append", "(", "i", ")", "\n", "pid_i", "=", "self", ".", "index_pid", "[", "i", "]", "\n", "cams", "=", "self", ".", "pid_cam", "[", "pid_i", "]", "\n", "index", "=", "self", ".", "pid_index", "[", "pid_i", "]", "\n", "select_cams", "=", "No_index", "(", "cams", ",", "i_cam", ")", "\n", "try", ":", "\n", "                ", "select_camind", "=", "np", ".", "random", ".", "choice", "(", "select_cams", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "print", "(", "cams", ")", "\n", "print", "(", "pid_i", ")", "\n", "print", "(", "i_label", ")", "\n", "", "select_ind", "=", "index", "[", "select_camind", "]", "\n", "ret", ".", "append", "(", "select_ind", ")", "\n", "\n", "", "return", "iter", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.sampler.RandomPairSamplerForMars.__init__": [[84, 94], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "len", "enumerate", "sampler.RandomPairSamplerForMars.pid_cam[].append", "sampler.RandomPairSamplerForMars.pid_index[].append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "index_pid", "=", "defaultdict", "(", "int", ")", "\n", "self", ".", "pid_cam", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "pid_index", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "num_samples", "=", "len", "(", "data_source", ")", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "cam", ")", "in", "enumerate", "(", "data_source", ")", ":", "\n", "            ", "self", ".", "index_pid", "[", "index", "]", "=", "pid", "\n", "self", ".", "pid_cam", "[", "pid", "]", ".", "append", "(", "cam", ")", "\n", "self", ".", "pid_index", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.sampler.RandomPairSamplerForMars.__len__": [[95, 97], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.sampler.RandomPairSamplerForMars.__iter__": [[98, 126], ["torch.randperm", "iter", "int", "ret.append", "ret.append", "len", "sampler.No_index", "set", "len", "sampler.No_index", "numpy.random.choice", "numpy.random.choice", "print", "print"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.data.sampler.No_index", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.sampler.No_index"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "torch", ".", "randperm", "(", "self", ".", "num_samples", ")", "# 8298  \u6253\u4e71\u987a\u5e8f", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "indices", ":", "\n", "            ", "i", "=", "int", "(", "i", ")", "# \u7b2c3367\u884c", "\n", "_", ",", "i_pid", ",", "i_cam", "=", "self", ".", "data_source", "[", "i", "]", "# relabel ?", "\n", "ret", ".", "append", "(", "i", ")", "# [3367]", "\n", "pid_i", "=", "self", ".", "index_pid", "[", "i", "]", "# pid_i = 182", "\n", "cams", "=", "self", ".", "pid_cam", "[", "pid_i", "]", "# <class 'list'>: [2, 2, 3, 4, 4, 4]", "\n", "index", "=", "self", ".", "pid_index", "[", "pid_i", "]", "# <class 'list'>: [3363, 3364, 3365, 3366, 3367, 3368]", "\n", "if", "len", "(", "set", "(", "cams", ")", ")", "==", "1", ":", "# \u53ea\u67091\u4e2acam", "\n", "                ", "if", "len", "(", "index", ")", "==", "1", ":", "# \u53ea\u67091\u4e2acam\u5e76\u4e14\u53ea\u6709\u4e00\u4e2atracklet", "\n", "                    ", "select_camind", "=", "0", "\n", "", "else", ":", "\n", "                    ", "select_cams", "=", "No_index", "(", "index", ",", "i", ")", "\n", "select_camind", "=", "np", ".", "random", ".", "choice", "(", "select_cams", ")", "\n", "", "", "else", ":", "\n", "                ", "select_cams", "=", "No_index", "(", "cams", ",", "i_cam", ")", "\n", "try", ":", "\n", "                    ", "select_camind", "=", "np", ".", "random", ".", "choice", "(", "select_cams", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "print", "(", "cams", ")", "\n", "print", "(", "pid_i", ")", "\n", "# print(i_label)", "\n", "", "", "select_ind", "=", "index", "[", "select_camind", "]", "\n", "ret", ".", "append", "(", "select_ind", ")", "\n", "\n", "", "return", "iter", "(", "ret", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.sampler.No_index": [[12, 15], ["isinstance", "enumerate"], "function", ["None"], ["def", "No_index", "(", "a", ",", "b", ")", ":", "# a = <class 'list'>: [2, 2, 3, 4, 4, 4]  b = 4", "\n", "    ", "assert", "isinstance", "(", "a", ",", "list", ")", "\n", "return", "[", "i", "for", "i", ",", "j", "in", "enumerate", "(", "a", ")", "if", "j", "!=", "b", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.video_loader.VideoDataset.__init__": [[17, 22], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "seq_len", "=", "15", ",", "sample", "=", "'evenly'", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "sample", "=", "sample", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.video_loader.VideoDataset.__len__": [[23, 25], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.video_loader.VideoDataset.__getitem__": [[26, 30], ["isinstance", "video_loader.VideoDataset.__get_single_item__", "video_loader.VideoDataset.__get_single_item__"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.data.video_loader.VideoDataset.__get_single_item__", "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.video_loader.VideoDataset.__get_single_item__"], ["", "def", "__getitem__", "(", "self", ",", "indices", ")", ":", "\n", "        ", "if", "isinstance", "(", "indices", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "return", "[", "self", ".", "__get_single_item__", "(", "index", ")", "for", "index", "in", "indices", "]", "\n", "", "return", "self", ".", "__get_single_item__", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.video_loader.VideoDataset.__get_single_item__": [[31, 158], ["len", "list", "numpy.array", "range", "range", "math.ceil", "range", "list", "max", "random.randint", "min", "numpy.array", "torch.stack", "list", "numpy.array.append", "list", "numpy.array.append", "range", "len", "numpy.array.append", "int", "PIL.Image.open().convert", "imgseq.append", "video_loader.VideoDataset.transform", "list", "indices_list.append", "torch.stack", "range", "list", "range", "list", "len", "range", "indices_list.append", "last_seq.append", "torch.stack", "imgs_list.append", "numpy.random.choice", "numpy.array", "torch.stack", "len", "PIL.Image.open", "len", "int", "PIL.Image.open().convert", "video_loader.VideoDataset.append", "video_loader.VideoDataset.transform", "list", "PIL.Image.open().convert", "video_loader.VideoDataset.transform", "numpy.array", "torch.stack", "KeyError", "list", "PIL.Image.open().convert", "video_loader.VideoDataset.transform", "PIL.Image.open", "numpy.arange", "PIL.Image.open", "len", "PIL.Image.open"], "methods", ["None"], ["", "def", "__get_single_item__", "(", "self", ",", "index", ")", ":", "\n", "        ", "S", "=", "self", ".", "seq_len", "\n", "img_paths", ",", "pid", ",", "camid", "=", "self", ".", "dataset", "[", "index", "]", "\n", "num", "=", "len", "(", "img_paths", ")", "# 27", "\n", "\"\"\"rss \u64cd\u4f5c\"\"\"", "\n", "sample_clip", "=", "[", "]", "\n", "frame_indices", "=", "list", "(", "range", "(", "num", ")", ")", "\n", "if", "num", "<", "S", ":", "# 8 = chunk\u7684\u6570\u76ee\uff0c\u6bcf\u4e2atracklet\u5206\u62108\u6bb5\uff0c\u6bcf\u6bb5\u968f\u673a\u9009\u4e00\u5e27", "\n", "            ", "strip", "=", "list", "(", "range", "(", "num", ")", ")", "+", "[", "frame_indices", "[", "-", "1", "]", "]", "*", "(", "S", "-", "num", ")", "\n", "for", "s", "in", "range", "(", "S", ")", ":", "\n", "                ", "pool", "=", "strip", "[", "s", "*", "1", ":", "(", "s", "+", "1", ")", "*", "1", "]", "\n", "sample_clip", ".", "append", "(", "list", "(", "pool", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "inter_val", "=", "math", ".", "ceil", "(", "num", "/", "S", ")", "\n", "strip", "=", "list", "(", "range", "(", "num", ")", ")", "+", "[", "frame_indices", "[", "-", "1", "]", "]", "*", "(", "inter_val", "*", "S", "-", "num", ")", "\n", "for", "s", "in", "range", "(", "S", ")", ":", "\n", "                ", "pool", "=", "strip", "[", "inter_val", "*", "s", ":", "inter_val", "*", "(", "s", "+", "1", ")", "]", "\n", "sample_clip", ".", "append", "(", "list", "(", "pool", ")", ")", "\n", "\n", "", "", "sample_clip", "=", "np", ".", "array", "(", "sample_clip", ")", "\n", "\n", "if", "self", ".", "sample", "==", "'random'", ":", "\n", "            ", "\"\"\"\n            Randomly sample seq_len consecutive frames from num frames,\n            if num is smaller than seq_len, then replicate items.\n            This sampling strategy is used in training phase.\n            \"\"\"", "\n", "frame_indices", "=", "list", "(", "range", "(", "num", ")", ")", "\n", "rand_end", "=", "max", "(", "0", ",", "len", "(", "frame_indices", ")", "-", "self", ".", "seq_len", "-", "1", ")", "\n", "begin_index", "=", "random", ".", "randint", "(", "0", ",", "rand_end", ")", "\n", "end_index", "=", "min", "(", "begin_index", "+", "self", ".", "seq_len", ",", "len", "(", "frame_indices", ")", ")", "\n", "\n", "indices", "=", "frame_indices", "[", "begin_index", ":", "end_index", "]", "\n", "\n", "for", "index", "in", "indices", ":", "\n", "                ", "if", "len", "(", "indices", ")", ">=", "self", ".", "seq_len", ":", "\n", "                    ", "break", "\n", "", "indices", ".", "append", "(", "index", ")", "\n", "", "indices", "=", "np", ".", "array", "(", "indices", ")", "\n", "imgseq", "=", "[", "]", "\n", "for", "index", "in", "indices", ":", "\n", "                ", "index", "=", "int", "(", "index", ")", "\n", "img_path", "=", "img_paths", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "# 3x224x112", "\n", "imgseq", ".", "append", "(", "img", ")", "\n", "\n", "", "seq", "=", "[", "imgseq", "]", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "seq", "=", "self", ".", "transform", "(", "seq", ")", "\n", "\n", "", "img_tensor", "=", "torch", ".", "stack", "(", "seq", "[", "0", "]", ",", "dim", "=", "0", ")", "# seq_len 4x3x224x112", "\n", "flow_tensor", "=", "None", "\n", "\n", "return", "img_tensor", ",", "pid", ",", "camid", "\n", "\n", "", "elif", "self", ".", "sample", "==", "'dense'", ":", "\n", "            ", "\"\"\"\n            Sample all frames in a video into a list of clips, each clip contains seq_len frames, batch_size needs to be set to 1.\n            This sampling strategy is used in test phase.\n            \"\"\"", "\n", "cur_index", "=", "0", "\n", "frame_indices", "=", "list", "(", "range", "(", "num", ")", ")", "# 27", "\n", "indices_list", "=", "[", "]", "\n", "while", "num", "-", "cur_index", ">", "self", ".", "seq_len", ":", "\n", "                ", "indices_list", ".", "append", "(", "frame_indices", "[", "cur_index", ":", "cur_index", "+", "self", ".", "seq_len", "]", ")", "\n", "cur_index", "+=", "self", ".", "seq_len", "\n", "\n", "", "last_seq", "=", "frame_indices", "[", "cur_index", ":", "]", "\n", "\n", "for", "index", "in", "last_seq", ":", "\n", "                ", "if", "len", "(", "last_seq", ")", ">=", "self", ".", "seq_len", ":", "\n", "                    ", "break", "\n", "", "last_seq", ".", "append", "(", "index", ")", "\n", "\n", "", "indices_list", ".", "append", "(", "last_seq", ")", "# <class 'list'>: [[0, 1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21, 22, 23], [24, 25, 24, 25, 24, 25, 24, 25]]", "\n", "imgs_list", "=", "[", "]", "\n", "for", "indices", "in", "indices_list", ":", "# <class 'list'>: [0, 1, 2, 3, 4, 5, 6, 7]", "\n", "                ", "imgs", "=", "[", "]", "\n", "for", "index", "in", "indices", ":", "\n", "                    ", "index", "=", "int", "(", "index", ")", "\n", "img_path", "=", "img_paths", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "# img = img.unsqueeze(0)", "\n", "imgs", ".", "append", "(", "img", ")", "\n", "\n", "", "imgs", "=", "[", "imgs", "]", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                    ", "imgs", "=", "self", ".", "transform", "(", "imgs", ")", "\n", "", "imgs", "=", "torch", ".", "stack", "(", "imgs", "[", "0", "]", ",", "0", ")", "# torch.Size([8, 3, 224, 112])", "\n", "imgs_list", ".", "append", "(", "imgs", ")", "\n", "", "imgs_tensor", "=", "torch", ".", "stack", "(", "imgs_list", ")", "# torch.Size([13, 8, 3, 224, 112])", "\n", "flow_tensor", "=", "None", "\n", "return", "imgs_tensor", ",", "pid", ",", "camid", "\n", "", "elif", "self", ".", "sample", "==", "'rrs_train'", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "choice", "(", "sample_clip", ".", "shape", "[", "1", "]", ",", "sample_clip", ".", "shape", "[", "0", "]", ")", "\n", "number", "=", "sample_clip", "[", "np", ".", "arange", "(", "len", "(", "sample_clip", ")", ")", ",", "idx", "]", "\n", "# imgseq = []", "\n", "img_paths", "=", "np", ".", "array", "(", "list", "(", "img_paths", ")", ")", "# img_paths\u539f\u59cb\u4e3atuple\uff0c\u8f6c\u6362\u6210\u6570\u7ec4", "\n", "# flow_paths = np.array([img_path.replace('Mars', 'Mars_optical') for img_path in img_paths])", "\n", "imgseq", "=", "[", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "for", "img_path", "in", "img_paths", "[", "number", "]", "]", "\n", "# flowseq = [Image.open(flow_path).convert('RGB') for flow_path in flow_paths[number]]", "\n", "\n", "seq", "=", "[", "imgseq", "]", "\n", "# seq = [imgseq, flowseq]", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "seq", "=", "self", ".", "transform", "(", "seq", ")", "\n", "\n", "", "img_tensor", "=", "torch", ".", "stack", "(", "seq", "[", "0", "]", ",", "dim", "=", "0", ")", "# seq_len 4x3x224x112", "\n", "# flow_tensor = torch.stack(seq[1], dim=0)  # seq_len 4x3x224x112", "\n", "\n", "return", "img_tensor", ",", "pid", ",", "camid", "\n", "", "elif", "self", ".", "sample", "==", "'rrs_test'", ":", "\n", "            ", "number", "=", "sample_clip", "[", ":", ",", "0", "]", "\n", "img_paths", "=", "np", ".", "array", "(", "list", "(", "img_paths", ")", ")", "# img_paths\u539f\u59cb\u4e3atuple\uff0c\u8f6c\u6362\u6210\u6570\u7ec4", "\n", "# flow_paths = np.array([img_path.replace('Mars', 'Mars_optical') for img_path in img_paths])", "\n", "imgseq", "=", "[", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "for", "img_path", "in", "img_paths", "[", "number", "]", "]", "\n", "# flowseq = [Image.open(flow_path).convert('RGB') for flow_path in flow_paths[number]]", "\n", "\n", "seq", "=", "[", "imgseq", "]", "\n", "# seq = [imgseq, flowseq]", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "seq", "=", "self", ".", "transform", "(", "seq", ")", "\n", "", "img_tensor", "=", "torch", ".", "stack", "(", "seq", "[", "0", "]", ",", "dim", "=", "0", ")", "# torch.Size([8, 3, 256, 128])", "\n", "# flow_tensor = torch.stack(seq[1], dim=0)", "\n", "return", "img_tensor", ",", "pid", ",", "camid", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "\"Unknown sample method: {}. Expected one of {}\"", ".", "format", "(", "self", ".", "sample", ",", "self", ".", "sample_methods", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqtransforms.Compose.__init__": [[21, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqtransforms.Compose.__call__": [[24, 28], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "seqs", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "seqs", "=", "t", "(", "seqs", ")", "\n", "", "return", "seqs", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqtransforms.RectScale.__init__": [[31, 35], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "height", ",", "width", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqtransforms.RectScale.__call__": [[36, 50], ["len", "len", "enumerate", "enumerate", "range", "range", "frame.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "seqs", ")", ":", "# seqs = list[[image0,...,image8]]", "\n", "        ", "modallen", "=", "len", "(", "seqs", ")", "# 1\u4e2alist", "\n", "framelen", "=", "len", "(", "seqs", "[", "0", "]", ")", "# 8", "\n", "new_seqs", "=", "[", "[", "[", "]", "for", "_", "in", "range", "(", "framelen", ")", "]", "for", "_", "in", "range", "(", "modallen", ")", "]", "# <class 'list'>: [[[], [], [], [], [], [], [], []]]", "\n", "\n", "for", "modal_ind", ",", "modal", "in", "enumerate", "(", "seqs", ")", ":", "# \u904d\u5386modal\uff0c\u603b\u5171\u67091\u4e2a", "\n", "            ", "for", "frame_ind", ",", "frame", "in", "enumerate", "(", "modal", ")", ":", "# \u904d\u5386\u6bcf\u4e00\u5e27\u56fe\u7247", "\n", "                ", "w", ",", "h", "=", "frame", ".", "size", "# w\uff1a128\uff0ch\uff1a256", "\n", "if", "h", "==", "self", ".", "height", "and", "w", "==", "self", ".", "width", ":", "\n", "                    ", "new_seqs", "[", "modal_ind", "]", "[", "frame_ind", "]", "=", "frame", "\n", "", "else", ":", "\n", "                    ", "new_seqs", "[", "modal_ind", "]", "[", "frame_ind", "]", "=", "frame", ".", "resize", "(", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "self", ".", "interpolation", ")", "\n", "\n", "", "", "", "return", "new_seqs", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqtransforms.RandomSizedRectCrop.__init__": [[53, 57], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "height", ",", "width", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqtransforms.RandomSizedRectCrop.__call__": [[58, 90], ["range", "seqtransforms.RectScale", "RectScale.", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.randint", "random.randint", "sample_img.crop.crop.crop", "len", "len", "enumerate", "math.sqrt", "math.sqrt", "enumerate", "range", "frame.crop.crop.crop", "frame.crop.crop.resize", "range"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "seqs", ")", ":", "\n", "        ", "sample_img", "=", "seqs", "[", "0", "]", "[", "0", "]", "\n", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "sample_img", ".", "size", "[", "0", "]", "*", "sample_img", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "0.64", ",", "1.0", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "2", ",", "3", ")", "\n", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "w", "<=", "sample_img", ".", "size", "[", "0", "]", "and", "h", "<=", "sample_img", ".", "size", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "sample_img", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "sample_img", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "\n", "sample_img", "=", "sample_img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "assert", "(", "sample_img", ".", "size", "==", "(", "w", ",", "h", ")", ")", "\n", "modallen", "=", "len", "(", "seqs", ")", "\n", "framelen", "=", "len", "(", "seqs", "[", "0", "]", ")", "\n", "new_seqs", "=", "[", "[", "[", "]", "for", "_", "in", "range", "(", "framelen", ")", "]", "for", "_", "in", "range", "(", "modallen", ")", "]", "\n", "\n", "for", "modal_ind", ",", "modal", "in", "enumerate", "(", "seqs", ")", ":", "\n", "                    ", "for", "frame_ind", ",", "frame", "in", "enumerate", "(", "modal", ")", ":", "\n", "\n", "                        ", "frame", "=", "frame", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "new_seqs", "[", "modal_ind", "]", "[", "frame_ind", "]", "=", "frame", ".", "resize", "(", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "self", ".", "interpolation", ")", "\n", "\n", "", "", "return", "new_seqs", "\n", "\n", "# Fallback", "\n", "", "", "scale", "=", "RectScale", "(", "self", ".", "height", ",", "self", ".", "width", ",", "\n", "interpolation", "=", "self", ".", "interpolation", ")", "\n", "return", "scale", "(", "seqs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqtransforms.RandomSizedEarser.__init__": [[94, 99], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sl", "=", "0.02", ",", "sh", "=", "0.2", ",", "asratio", "=", "0.3", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "sl", "=", "sl", "\n", "self", ".", "sh", "=", "sh", "\n", "self", ".", "asratio", "=", "asratio", "\n", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqtransforms.RandomSizedEarser.__call__": [[100, 138], ["len", "len", "enumerate", "enumerate", "range", "random.uniform", "range", "random.uniform", "numpy.sqrt", "numpy.sqrt", "random.uniform", "random.uniform", "random.uniform", "int", "int", "int", "int", "frame.crop", "random.randint", "random.randint", "random.randint", "PIL.Image.new", "frame.paste", "numpy.ceil", "numpy.ceil", "numpy.floor", "numpy.floor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "seqs", ")", ":", "\n", "        ", "modallen", "=", "len", "(", "seqs", ")", "\n", "framelen", "=", "len", "(", "seqs", "[", "0", "]", ")", "\n", "new_seqs", "=", "[", "[", "[", "]", "for", "_", "in", "range", "(", "framelen", ")", "]", "for", "_", "in", "range", "(", "modallen", ")", "]", "\n", "for", "modal_ind", ",", "modal", "in", "enumerate", "(", "seqs", ")", ":", "\n", "            ", "for", "frame_ind", ",", "frame", "in", "enumerate", "(", "modal", ")", ":", "\n", "                ", "p1", "=", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "W", "=", "frame", ".", "size", "[", "0", "]", "\n", "H", "=", "frame", ".", "size", "[", "1", "]", "\n", "area", "=", "H", "*", "W", "\n", "\n", "if", "p1", ">", "self", ".", "p", ":", "\n", "                    ", "new_seqs", "[", "modal_ind", "]", "[", "frame_ind", "]", "=", "frame", "\n", "", "else", ":", "\n", "                    ", "gen", "=", "True", "\n", "while", "gen", ":", "\n", "                        ", "Se", "=", "random", ".", "uniform", "(", "self", ".", "sl", ",", "self", ".", "sh", ")", "*", "area", "\n", "re", "=", "random", ".", "uniform", "(", "self", ".", "asratio", ",", "1", "/", "self", ".", "asratio", ")", "\n", "He", "=", "np", ".", "sqrt", "(", "Se", "*", "re", ")", "\n", "We", "=", "np", ".", "sqrt", "(", "Se", "/", "re", ")", "\n", "xe", "=", "random", ".", "uniform", "(", "0", ",", "W", "-", "We", ")", "\n", "ye", "=", "random", ".", "uniform", "(", "0", ",", "H", "-", "He", ")", "\n", "if", "xe", "+", "We", "<=", "W", "and", "ye", "+", "He", "<=", "H", "and", "xe", ">", "0", "and", "ye", ">", "0", ":", "\n", "                            ", "x1", "=", "int", "(", "np", ".", "ceil", "(", "xe", ")", ")", "\n", "y1", "=", "int", "(", "np", ".", "ceil", "(", "ye", ")", ")", "\n", "x2", "=", "int", "(", "np", ".", "floor", "(", "x1", "+", "We", ")", ")", "\n", "y2", "=", "int", "(", "np", ".", "floor", "(", "y1", "+", "He", ")", ")", "\n", "part1", "=", "frame", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "Rc", "=", "random", ".", "randint", "(", "0", ",", "255", ")", "\n", "Gc", "=", "random", ".", "randint", "(", "0", ",", "255", ")", "\n", "Bc", "=", "random", ".", "randint", "(", "0", ",", "255", ")", "\n", "I", "=", "Image", ".", "new", "(", "'RGB'", ",", "part1", ".", "size", ",", "(", "Rc", ",", "Gc", ",", "Bc", ")", ")", "\n", "frame", ".", "paste", "(", "I", ",", "part1", ".", "size", ")", "\n", "break", "\n", "\n", "", "", "new_seqs", "[", "modal_ind", "]", "[", "frame_ind", "]", "=", "frame", "\n", "\n", "", "", "", "return", "new_seqs", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqtransforms.RandomHorizontalFlip.__call__": [[143, 153], ["random.random", "len", "len", "enumerate", "enumerate", "range", "frame.transpose", "range"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "seqs", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "modallen", "=", "len", "(", "seqs", ")", "\n", "framelen", "=", "len", "(", "seqs", "[", "0", "]", ")", "\n", "new_seqs", "=", "[", "[", "[", "]", "for", "_", "in", "range", "(", "framelen", ")", "]", "for", "_", "in", "range", "(", "modallen", ")", "]", "\n", "for", "modal_ind", ",", "modal", "in", "enumerate", "(", "seqs", ")", ":", "\n", "                ", "for", "frame_ind", ",", "frame", "in", "enumerate", "(", "modal", ")", ":", "\n", "                    ", "new_seqs", "[", "modal_ind", "]", "[", "frame_ind", "]", "=", "frame", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "", "return", "new_seqs", "\n", "", "return", "seqs", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqtransforms.ToTensor.__call__": [[157, 193], ["len", "len", "enumerate", "range", "len", "enumerate", "enumerate", "enumerate", "range", "torch.from_numpy", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.view", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose().contiguous", "enumerate", "enumerate", "numpy.array", "torch.from_numpy", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.view", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose().contiguous", "torch.ByteTensor", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.view", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose().contiguous", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float().div", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose", "numpy.array", "torch.ByteStorage.from_buffer", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose", "frame.tobytes", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "seqs", ")", ":", "\n", "        ", "modallen", "=", "len", "(", "seqs", ")", "\n", "framelen", "=", "len", "(", "seqs", "[", "0", "]", ")", "\n", "new_seqs", "=", "[", "[", "[", "]", "for", "_", "in", "range", "(", "framelen", ")", "]", "for", "_", "in", "range", "(", "modallen", ")", "]", "\n", "pic", "=", "seqs", "[", "0", "]", "[", "0", "]", "\n", "\n", "# PIL image mode: 1, L, P, I, F, RGB, YCbCr, RGBA, CMYK", "\n", "if", "pic", ".", "mode", "==", "'YCbCr'", ":", "\n", "            ", "nchannel", "=", "3", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "            ", "nchannel", "=", "1", "\n", "", "else", ":", "\n", "            ", "nchannel", "=", "len", "(", "pic", ".", "mode", ")", "\n", "\n", "", "if", "pic", ".", "mode", "==", "'I'", ":", "\n", "            ", "for", "modal_ind", ",", "modal", "in", "enumerate", "(", "seqs", ")", ":", "\n", "                ", "for", "frame_ind", ",", "frame", "in", "enumerate", "(", "modal", ")", ":", "\n", "                    ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "frame", ",", "np", ".", "int32", ",", "copy", "=", "False", ")", ")", "\n", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "nchannel", ")", "\n", "new_seqs", "[", "modal_ind", "]", "[", "frame_ind", "]", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "            ", "for", "modal_ind", ",", "modal", "in", "enumerate", "(", "seqs", ")", ":", "\n", "                ", "for", "frame_ind", ",", "frame", "in", "enumerate", "(", "modal", ")", ":", "\n", "                    ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "frame", ",", "np", ".", "int16", ",", "copy", "=", "False", ")", ")", "\n", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "nchannel", ")", "\n", "new_seqs", "[", "modal_ind", "]", "[", "frame_ind", "]", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "", "", "else", ":", "\n", "            ", "for", "modal_ind", ",", "modal", "in", "enumerate", "(", "seqs", ")", ":", "\n", "                ", "for", "frame_ind", ",", "frame", "in", "enumerate", "(", "modal", ")", ":", "\n", "                    ", "img", "=", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "frame", ".", "tobytes", "(", ")", ")", ")", "\n", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "nchannel", ")", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "new_seqs", "[", "modal_ind", "]", "[", "frame_ind", "]", "=", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "\n", "", "", "", "return", "new_seqs", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqtransforms.Normalize.__init__": [[200, 203], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.seqtransforms.Normalize.__call__": [[204, 217], ["len", "len", "enumerate", "enumerate", "range", "zip", "range", "t.sub_().div_", "t.sub_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "seqs", ")", ":", "\n", "# TODO: make efficient", "\n", "        ", "modallen", "=", "len", "(", "seqs", ")", "\n", "framelen", "=", "len", "(", "seqs", "[", "0", "]", ")", "\n", "new_seqs", "=", "[", "[", "[", "]", "for", "_", "in", "range", "(", "framelen", ")", "]", "for", "_", "in", "range", "(", "modallen", ")", "]", "\n", "\n", "for", "modal_ind", ",", "modal", "in", "enumerate", "(", "seqs", ")", ":", "\n", "            ", "for", "frame_ind", ",", "frame", "in", "enumerate", "(", "modal", ")", ":", "\n", "                ", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "frame", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "                    ", "t", ".", "sub_", "(", "m", ")", ".", "div_", "(", "s", ")", "\n", "new_seqs", "[", "modal_ind", "]", "[", "frame_ind", "]", "=", "frame", "\n", "\n", "", "", "", "return", "new_seqs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.data.dataloader.get_data": [[12, 82], ["os.join", "reid.dataset.get_sequence", "reid.data.seqtransforms.Normalize", "reid.data.SeqTrainPreprocessor", "reid.data.SeqTestPreprocessor", "reid.data.SeqTestPreprocessor", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "reid.dataset.get_sequence", "reid.data.seqtransforms.Normalize", "reid.data.video_loader.VideoDataset", "reid.data.video_loader.VideoDataset", "reid.data.video_loader.VideoDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "reid.data.seqtransforms.Compose", "reid.data.seqtransforms.Compose", "reid.data.seqtransforms.Compose", "reid.data.RandomPairSampler", "reid.data.seqtransforms.Compose", "reid.data.seqtransforms.Compose", "reid.data.seqtransforms.Compose", "reid.data.RandomPairSamplerForMars", "reid.data.seqtransforms.RectScale", "reid.data.seqtransforms.RandomHorizontalFlip", "reid.data.seqtransforms.RandomSizedEarser", "reid.data.seqtransforms.ToTensor", "reid.data.seqtransforms.RectScale", "reid.data.seqtransforms.ToTensor", "reid.data.seqtransforms.RectScale", "reid.data.seqtransforms.ToTensor", "reid.data.seqtransforms.RectScale", "reid.data.seqtransforms.RandomHorizontalFlip", "reid.data.seqtransforms.RandomSizedEarser", "reid.data.seqtransforms.ToTensor", "reid.data.seqtransforms.RectScale", "reid.data.seqtransforms.ToTensor", "reid.data.seqtransforms.RectScale", "reid.data.seqtransforms.ToTensor"], "function", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.__init__.get_sequence", "home.repos.pwc.inspect_result.flysnowtiger_GRL.dataset.__init__.get_sequence"], ["def", "get_data", "(", "dataset_name", ",", "split_id", ",", "data_dir", ",", "batch_size", ",", "seq_len", ",", "seq_srd", ",", "workers", ",", "only_eval", ")", ":", "\n", "\n", "    ", "if", "dataset_name", "!=", "'mars'", "and", "dataset_name", "!=", "'duke'", ":", "\n", "        ", "root", "=", "osp", ".", "join", "(", "data_dir", ",", "dataset_name", ")", "\n", "dataset", "=", "get_sequence", "(", "dataset_name", ",", "root", ",", "split_id", "=", "split_id", ",", "\n", "seq_len", "=", "seq_len", ",", "seq_srd", "=", "seq_srd", ",", "num_val", "=", "1", ",", "download", "=", "True", ")", "\n", "train_set", "=", "dataset", ".", "trainval", "\n", "num_classes", "=", "dataset", ".", "num_trainval_ids", "\n", "normalizer", "=", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "train_processor", "=", "SeqTrainPreprocessor", "(", "train_set", ",", "dataset", ",", "seq_len", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "RectScale", "(", "256", ",", "128", ")", ",", "\n", "T", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "T", ".", "RandomSizedEarser", "(", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "normalizer", "]", ")", ")", "\n", "\n", "query_processor", "=", "SeqTestPreprocessor", "(", "dataset", ".", "query", ",", "dataset", ",", "seq_len", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "RectScale", "(", "256", ",", "128", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "normalizer", "]", ")", ")", "\n", "\n", "gallery_processor", "=", "SeqTestPreprocessor", "(", "dataset", ".", "gallery", ",", "dataset", ",", "seq_len", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "RectScale", "(", "256", ",", "128", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "normalizer", "]", ")", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "train_processor", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "workers", ",", "\n", "sampler", "=", "RandomPairSampler", "(", "train_set", ")", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "query_loader", "=", "DataLoader", "(", "query_processor", ",", "batch_size", "=", "8", ",", "\n", "num_workers", "=", "workers", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "\n", "gallery_loader", "=", "DataLoader", "(", "gallery_processor", ",", "batch_size", "=", "8", ",", "\n", "num_workers", "=", "workers", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "get_sequence", "(", "dataset_name", ")", "# mars\u6570\u636e\u96c6", "\n", "train_set", "=", "dataset", ".", "train", "# 8298", "\n", "\n", "num_classes", "=", "dataset", ".", "num_train_pids", "# 625", "\n", "\n", "normalizer", "=", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "train_processor", "=", "VideoDataset", "(", "train_set", ",", "seq_len", "=", "seq_len", ",", "sample", "=", "'rrs_train'", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "RectScale", "(", "256", ",", "128", ")", ",", "\n", "T", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "T", ".", "RandomSizedEarser", "(", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "normalizer", "]", ")", ")", "\n", "\n", "\n", "if", "only_eval", ":", "\n", "            ", "sampler_method", "=", "'dense'", "\n", "batch_size_eval", "=", "1", "\n", "", "else", ":", "\n", "            ", "sampler_method", "=", "'rrs_test'", "\n", "batch_size_eval", "=", "30", "\n", "", "query_processor", "=", "VideoDataset", "(", "dataset", ".", "query", ",", "seq_len", "=", "seq_len", ",", "sample", "=", "sampler_method", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "RectScale", "(", "256", ",", "128", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "normalizer", "]", ")", ")", "\n", "\n", "gallery_processor", "=", "VideoDataset", "(", "dataset", ".", "gallery", ",", "seq_len", "=", "seq_len", ",", "sample", "=", "sampler_method", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "RectScale", "(", "256", ",", "128", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "normalizer", "]", ")", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "train_processor", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "workers", ",", "\n", "sampler", "=", "RandomPairSamplerForMars", "(", "train_set", ")", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "query_loader", "=", "DataLoader", "(", "query_processor", ",", "batch_size", "=", "batch_size_eval", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "\n", "gallery_loader", "=", "DataLoader", "(", "gallery_processor", ",", "batch_size", "=", "batch_size_eval", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "\n", "", "return", "dataset", ",", "num_classes", ",", "train_loader", ",", "query_loader", ",", "gallery_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.triplet_oim.TripletLoss_OIM.__init__": [[7, 15], ["torch.Module.__init__", "isinstance", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "margin", "=", "0", ",", "batch_hard", "=", "False", ",", "dim", "=", "2048", ")", ":", "\n", "        ", "super", "(", "TripletLoss_OIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_hard", "=", "batch_hard", "# True", "\n", "if", "isinstance", "(", "margin", ",", "float", ")", "or", "margin", "==", "'soft'", ":", "\n", "            ", "self", ".", "margin", "=", "margin", "# \u2018soft\u2019", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'The margin {} is not recognized in TripletLoss()'", ".", "format", "(", "margin", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.triplet_oim.TripletLoss_OIM.forward": [[16, 80], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "isinstance", "feat_OIM.append", "triplet_oim.TripletLoss_OIM.cdist", "[].view", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "[].view", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "lut[].unsqueeze", "feat.norm", "triplet_oim.TripletLoss_OIM.cdist", "RuntimeError", "torch.eye().byte", "torch.eye().byte", "torch.eye().byte", "torch.eye().byte", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "ValueError", "NotImplementedError", "torch.eye().byte.cuda", "torch.eye().byte.cuda", "id.unsqueeze", "id.unsqueeze", "RuntimeError", "dist[].min", "positive_mask.float", "max_positive.max", "torch.eq.float", "torch.eq.float", "min_negative.min", "torch.log", "torch.log", "torch.log", "torch.log", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "positive_mask.topk", "negative_mask.topk", "torch.log", "torch.log", "torch.log", "torch.log", "feat.size", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "positive_mask[].float", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "same_id_mask[].float"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.triplet.TripletLoss.cdist", "home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.triplet.TripletLoss.cdist"], ["", "", "def", "forward", "(", "self", ",", "feat", ",", "lut", ",", "id", "=", "None", ",", "pos_mask", "=", "None", ",", "neg_mask", "=", "None", ",", "mode", "=", "'id'", ",", "dis_func", "=", "'eu'", ",", "n_dis", "=", "0", ")", ":", "\n", "        ", "feat_OIM", "=", "[", "]", "\n", "for", "i", "in", "id", ":", "\n", "            ", "feat_OIM", ".", "append", "(", "lut", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "feat_oim", "=", "torch", ".", "cat", "(", "feat_OIM", ",", "dim", "=", "0", ")", "\n", "if", "dis_func", "==", "'cdist'", ":", "\n", "            ", "feat", "=", "feat", "/", "feat", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "dist", "=", "self", ".", "cdist", "(", "feat", ",", "feat", ")", "\n", "", "elif", "dis_func", "==", "'eu'", ":", "\n", "            ", "dist", "=", "self", ".", "cdist", "(", "feat", ",", "feat_oim", ")", "# torch.Size([8, 8])", "\n", "\n", "", "if", "mode", "==", "'id'", ":", "\n", "            ", "if", "id", "is", "None", ":", "\n", "                ", "raise", "RuntimeError", "(", "'foward is in id mode, please input id!'", ")", "\n", "", "else", ":", "\n", "                ", "identity_mask", "=", "torch", ".", "eye", "(", "feat", ".", "size", "(", "0", ")", ")", ".", "byte", "(", ")", "# torch.Size([8, 8])", "\n", "identity_mask", "=", "identity_mask", ".", "cuda", "(", ")", "if", "id", ".", "is_cuda", "else", "identity_mask", "\n", "same_id_mask", "=", "torch", ".", "eq", "(", "id", ".", "unsqueeze", "(", "1", ")", ",", "id", ".", "unsqueeze", "(", "0", ")", ")", "\n", "negative_mask", "=", "same_id_mask", "^", "1", "# ^ \u5f02\u6216\u64cd\u4f5c\uff0c\u540c\u4e3a0\uff0c\u5f02\u4e3a1", "\n", "positive_mask", "=", "same_id_mask", "^", "identity_mask", "\n", "", "", "elif", "mode", "==", "'mask'", ":", "\n", "            ", "if", "pos_mask", "is", "None", "or", "neg_mask", "is", "None", ":", "\n", "                ", "raise", "RuntimeError", "(", "'foward is in mask mode, please input pos_mask & neg_mask!'", ")", "\n", "", "else", ":", "\n", "                ", "positive_mask", "=", "pos_mask", "\n", "same_id_mask", "=", "neg_mask", "^", "1", "\n", "negative_mask", "=", "neg_mask", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'unrecognized mode'", ")", "\n", "\n", "", "if", "self", ".", "batch_hard", ":", "\n", "            ", "if", "n_dis", "!=", "0", ":", "\n", "                ", "img_dist", "=", "dist", "[", ":", "-", "n_dis", ",", ":", "-", "n_dis", "]", "\n", "max_positive", "=", "(", "img_dist", "*", "positive_mask", "[", ":", "-", "n_dis", ",", ":", "-", "n_dis", "]", ".", "float", "(", ")", ")", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "min_negative", "=", "(", "img_dist", "+", "1e5", "*", "same_id_mask", "[", ":", "-", "n_dis", ",", ":", "-", "n_dis", "]", ".", "float", "(", ")", ")", ".", "min", "(", "1", ")", "[", "0", "]", "\n", "dis_min_negative", "=", "dist", "[", ":", "-", "n_dis", ",", "-", "n_dis", ":", "]", ".", "min", "(", "1", ")", "[", "0", "]", "\n", "z_origin", "=", "max_positive", "-", "min_negative", "\n", "# z_dis = max_positive - dis_min_negative", "\n", "", "else", ":", "\n", "                ", "max_positive", "=", "dist", "*", "positive_mask", ".", "float", "(", ")", "\n", "max_positive", "=", "max_positive", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "# tensor([11.2461, 11.0022, 11.2461, 11.1370,  8.9170,  8.4666,  8.9170,  8.4710])", "\n", "same_id_mask", "=", "1e5", "*", "same_id_mask", ".", "float", "(", ")", "\n", "min_negative", "=", "dist", "+", "same_id_mask", "\n", "min_negative", "=", "min_negative", ".", "min", "(", "1", ")", "[", "\n", "0", "]", "# tensor([ 9.5545, 10.7909,  9.3813, 10.1063, 10.7909, 10.1282,  9.3813, 11.3685],", "\n", "z", "=", "max_positive", "-", "min_negative", "# tensor([3.6010, 2.3646, 2.0217, 2.9059, 0.7020, 2.2440, 1.1459, 1.0037],", "\n", "", "", "else", ":", "\n", "            ", "pos", "=", "positive_mask", ".", "topk", "(", "k", "=", "1", ",", "dim", "=", "1", ")", "[", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "positive", "=", "torch", ".", "gather", "(", "dist", ",", "dim", "=", "1", ",", "index", "=", "pos", ")", "\n", "pos", "=", "negative_mask", ".", "topk", "(", "k", "=", "1", ",", "dim", "=", "1", ")", "[", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "negative", "=", "torch", ".", "gather", "(", "dist", ",", "dim", "=", "1", ",", "index", "=", "pos", ")", "\n", "z", "=", "positive", "-", "negative", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "margin", ",", "float", ")", ":", "\n", "            ", "b_loss", "=", "torch", ".", "clamp", "(", "z", "+", "self", ".", "margin", ",", "min", "=", "0", ")", "\n", "", "elif", "self", ".", "margin", "==", "'soft'", ":", "\n", "            ", "if", "n_dis", "!=", "0", ":", "\n", "                ", "b_loss", "=", "torch", ".", "log", "(", "1", "+", "torch", ".", "exp", "(", "z_origin", ")", ")", "+", "-", "0.5", "*", "dis_min_negative", "# + torch.log(1+torch.exp(z_dis))", "\n", "", "else", ":", "\n", "                ", "b_loss", "=", "torch", ".", "log", "(", "1", "+", "torch", ".", "exp", "(", "z", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"How do you even get here!\"", ")", "\n", "", "return", "b_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.triplet_oim.TripletLoss_OIM.cdist": [[81, 94], ["a.unsqueeze", "b.unsqueeze"], "methods", ["None"], ["", "def", "cdist", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "'''\n        Returns euclidean distance between a and b\n\n        Args:\n             a (2D Tensor): A batch of vectors shaped (B1, D)\n             b (2D Tensor): A batch of vectors shaped (B2, D)\n        Returns:\n             A matrix of all pairwise distance between all vectors in a and b,\n             will be shape of (B1, B2)\n        '''", "\n", "diff", "=", "a", ".", "unsqueeze", "(", "1", ")", "-", "b", ".", "unsqueeze", "(", "0", ")", "\n", "return", "(", "(", "diff", "**", "2", ")", ".", "sum", "(", "2", ")", "+", "1e-12", ")", ".", "sqrt", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.pairloss.PairLoss.__init__": [[10, 17], ["torch.nn.Module.__init__", "torch.nn.BCELoss", "torch.device", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "PairLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# self.sigmod = nn.Sigmoid()", "\n", "self", ".", "BCE", "=", "nn", ".", "BCELoss", "(", ")", "\n", "self", ".", "BCE", ".", "size_average", "=", "True", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.pairloss.PairLoss.forward": [[18, 46], ["score.contiguous.contiguous.size", "tar_gallery.unsqueeze.unsqueeze.unsqueeze", "tar_probe.unsqueeze.unsqueeze.unsqueeze", "tar_probe.unsqueeze.unsqueeze.expand().eq", "mask.view().cpu().numpy().tolist.view().cpu().numpy().tolist.view().cpu().numpy().tolist", "score.contiguous.contiguous.contiguous", "score.contiguous.contiguous.view", "torch.Tensor().to", "pairloss.PairLoss.BCE", "torch.cat", "torch.LongTensor().to", "reid.evaluator.accuracy", "tar_gallery.unsqueeze.unsqueeze.expand", "tar_probe.unsqueeze.unsqueeze.expand", "mask.view().cpu().numpy().tolist.view().cpu().numpy().tolist.view().cpu().numpy", "torch.Tensor", "samplers_neg.unsqueeze", "samplers_data.unsqueeze", "torch.LongTensor", "mask.view().cpu().numpy().tolist.view().cpu().numpy().tolist.view().cpu", "mask.view().cpu().numpy().tolist.view().cpu().numpy().tolist.view"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.evaluator.eva_functions.accuracy"], ["", "def", "forward", "(", "self", ",", "score", ",", "tar_probe", ",", "tar_gallery", ")", ":", "\n", "        ", "cls_Size", "=", "score", ".", "size", "(", ")", "# torch.Size([4, 2])", "\n", "N_probe", "=", "cls_Size", "[", "0", "]", "# 4", "\n", "N_gallery", "=", "cls_Size", "[", "0", "]", "\n", "\n", "tar_gallery", "=", "tar_gallery", ".", "unsqueeze", "(", "1", ")", "# 6,1   tensor([[ 94],[ 10],[ 15],[ 16],[ 75],[ 39]])", "\n", "tar_probe", "=", "tar_probe", ".", "unsqueeze", "(", "0", ")", "# 1,6 tensor([[ 94,  10,  15,  16,  75,  39]])", "\n", "mask", "=", "tar_probe", ".", "expand", "(", "N_probe", ",", "N_gallery", ")", ".", "eq", "(", "tar_gallery", ".", "expand", "(", "N_probe", ",", "N_gallery", ")", ")", "\n", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "# [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1]", "\n", "\n", "score", "=", "score", ".", "contiguous", "(", ")", "# torch.Size([4, 4])", "\n", "samplers", "=", "score", ".", "view", "(", "-", "1", ")", "# torch.Size([16])", "\n", "\n", "# samplers = self.sigmod(samplers)", "\n", "# labels = Variable(torch.Tensor(mask).cuda())", "\n", "labels", "=", "torch", ".", "Tensor", "(", "mask", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "loss", "=", "self", ".", "BCE", "(", "samplers", ",", "labels", ")", "\n", "\n", "samplers_data", "=", "samplers", ".", "data", "# torch.Size([36])", "\n", "samplers_neg", "=", "1", "-", "samplers_data", "\n", "samplerdata", "=", "torch", ".", "cat", "(", "(", "samplers_neg", ".", "unsqueeze", "(", "1", ")", ",", "samplers_data", ".", "unsqueeze", "(", "1", ")", ")", ",", "1", ")", "# torch.Size([36, 2])", "\n", "\n", "labeldata", "=", "torch", ".", "LongTensor", "(", "mask", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "prec", ",", "=", "accuracy", "(", "samplerdata", ",", "labeldata", ")", "\n", "\n", "return", "loss", ",", "prec", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.triplet.TripletLoss.__init__": [[7, 15], ["torch.Module.__init__", "isinstance", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__"], ["\t", "def", "__init__", "(", "self", ",", "margin", "=", "0", ",", "batch_hard", "=", "False", ",", "dim", "=", "2048", ")", ":", "\n", "\t\t", "super", "(", "TripletLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_hard", "=", "batch_hard", "# True", "\n", "if", "isinstance", "(", "margin", ",", "float", ")", "or", "margin", "==", "'soft'", ":", "\n", "\t\t\t", "self", ".", "margin", "=", "margin", "# \u2018soft\u2019", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "(", "\n", "'The margin {} is not recognized in TripletLoss()'", ".", "format", "(", "margin", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.triplet.TripletLoss.forward": [[16, 77], ["isinstance", "triplet.TripletLoss.cdist", "[].view", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "[].view", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "feat.norm", "triplet.TripletLoss.cdist", "RuntimeError", "torch.eye().byte", "torch.eye().byte", "torch.eye().byte", "torch.eye().byte", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "ValueError", "NotImplementedError", "torch.eye().byte.cuda", "torch.eye().byte.cuda", "id.unsqueeze", "id.unsqueeze", "RuntimeError", "dist[].min", "positive_mask.float", "max_positive.max", "torch.eq.float", "torch.eq.float", "min_negative.min", "torch.log", "torch.log", "torch.log", "torch.log", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "positive_mask.topk", "negative_mask.topk", "torch.log", "torch.log", "torch.log", "torch.log", "feat.size", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "positive_mask[].float", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "same_id_mask[].float"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.triplet.TripletLoss.cdist", "home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.triplet.TripletLoss.cdist"], ["", "", "def", "forward", "(", "self", ",", "feat", ",", "id", "=", "None", ",", "pos_mask", "=", "None", ",", "neg_mask", "=", "None", ",", "mode", "=", "'id'", ",", "dis_func", "=", "'eu'", ",", "n_dis", "=", "0", ")", ":", "\n", "\t\t", "if", "dis_func", "==", "'cdist'", ":", "\n", "\t\t\t", "feat", "=", "feat", "/", "feat", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "dist", "=", "self", ".", "cdist", "(", "feat", ",", "feat", ")", "\n", "", "elif", "dis_func", "==", "'eu'", ":", "\n", "\t\t\t", "dist", "=", "self", ".", "cdist", "(", "feat", ",", "feat", ")", "# torch.Size([8, 8])", "\n", "\n", "", "if", "mode", "==", "'id'", ":", "\n", "\t\t\t", "if", "id", "is", "None", ":", "\n", "\t\t\t\t", "raise", "RuntimeError", "(", "'foward is in id mode, please input id!'", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "identity_mask", "=", "torch", ".", "eye", "(", "feat", ".", "size", "(", "0", ")", ")", ".", "byte", "(", ")", "# torch.Size([8, 8])", "\n", "identity_mask", "=", "identity_mask", ".", "cuda", "(", ")", "if", "id", ".", "is_cuda", "else", "identity_mask", "\n", "same_id_mask", "=", "torch", ".", "eq", "(", "id", ".", "unsqueeze", "(", "1", ")", ",", "id", ".", "unsqueeze", "(", "0", ")", ")", "\n", "negative_mask", "=", "same_id_mask", "^", "1", "# ^ \u5f02\u6216\u64cd\u4f5c\uff0c\u540c\u4e3a0\uff0c\u5f02\u4e3a1", "\n", "positive_mask", "=", "same_id_mask", "^", "identity_mask", "\n", "", "", "elif", "mode", "==", "'mask'", ":", "\n", "\t\t\t", "if", "pos_mask", "is", "None", "or", "neg_mask", "is", "None", ":", "\n", "\t\t\t\t", "raise", "RuntimeError", "(", "'foward is in mask mode, please input pos_mask & neg_mask!'", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "positive_mask", "=", "pos_mask", "\n", "same_id_mask", "=", "neg_mask", "^", "1", "\n", "negative_mask", "=", "neg_mask", "\n", "", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "'unrecognized mode'", ")", "\n", "\n", "", "if", "self", ".", "batch_hard", ":", "\n", "\t\t\t", "if", "n_dis", "!=", "0", ":", "\n", "\t\t\t\t", "img_dist", "=", "dist", "[", ":", "-", "n_dis", ",", ":", "-", "n_dis", "]", "\n", "max_positive", "=", "(", "img_dist", "*", "positive_mask", "[", ":", "-", "n_dis", ",", ":", "-", "n_dis", "]", ".", "float", "(", ")", ")", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "min_negative", "=", "(", "img_dist", "+", "1e5", "*", "same_id_mask", "[", ":", "-", "n_dis", ",", ":", "-", "n_dis", "]", ".", "float", "(", ")", ")", ".", "min", "(", "1", ")", "[", "0", "]", "\n", "dis_min_negative", "=", "dist", "[", ":", "-", "n_dis", ",", "-", "n_dis", ":", "]", ".", "min", "(", "1", ")", "[", "0", "]", "\n", "z_origin", "=", "max_positive", "-", "min_negative", "\n", "# z_dis = max_positive - dis_min_negative", "\n", "", "else", ":", "\n", "\t\t\t\t", "max_positive", "=", "dist", "*", "positive_mask", ".", "float", "(", ")", "\n", "max_positive", "=", "max_positive", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "# tensor([11.2461, 11.0022, 11.2461, 11.1370,  8.9170,  8.4666,  8.9170,  8.4710])", "\n", "same_id_mask", "=", "1e5", "*", "same_id_mask", ".", "float", "(", ")", "\n", "min_negative", "=", "dist", "+", "same_id_mask", "\n", "min_negative", "=", "min_negative", ".", "min", "(", "1", ")", "[", "\n", "0", "]", "# tensor([ 9.5545, 10.7909,  9.3813, 10.1063, 10.7909, 10.1282,  9.3813, 11.3685],", "\n", "z", "=", "max_positive", "-", "min_negative", "\n", "# tensor([3.6010, 2.3646, 2.0217, 2.9059, 0.7020, 2.2440, 1.1459, 1.0037],", "\n", "", "", "else", ":", "\n", "\t\t\t", "pos", "=", "positive_mask", ".", "topk", "(", "k", "=", "1", ",", "dim", "=", "1", ")", "[", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "positive", "=", "torch", ".", "gather", "(", "dist", ",", "dim", "=", "1", ",", "index", "=", "pos", ")", "\n", "pos", "=", "negative_mask", ".", "topk", "(", "k", "=", "1", ",", "dim", "=", "1", ")", "[", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "negative", "=", "torch", ".", "gather", "(", "dist", ",", "dim", "=", "1", ",", "index", "=", "pos", ")", "\n", "z", "=", "positive", "-", "negative", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "margin", ",", "float", ")", ":", "\n", "\t\t\t", "b_loss", "=", "torch", ".", "clamp", "(", "z", "+", "self", ".", "margin", ",", "min", "=", "0", ")", "\n", "", "elif", "self", ".", "margin", "==", "'soft'", ":", "\n", "\t\t\t", "if", "n_dis", "!=", "0", ":", "\n", "\t\t\t\t", "b_loss", "=", "torch", ".", "log", "(", "1", "+", "torch", ".", "exp", "(", "z_origin", ")", ")", "+", "-", "0.5", "*", "dis_min_negative", "# + torch.log(1+torch.exp(z_dis))", "\n", "", "else", ":", "\n", "\t\t\t\t", "b_loss", "=", "torch", ".", "log", "(", "1", "+", "torch", ".", "exp", "(", "z", ")", ")", "\n", "", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "(", "\"How do you even get here!\"", ")", "\n", "", "return", "b_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.triplet.TripletLoss.cdist": [[78, 91], ["a.unsqueeze", "b.unsqueeze"], "methods", ["None"], ["", "def", "cdist", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "\t\t", "'''\n\t\tReturns euclidean distance between a and b\n\n\t\tArgs:\n\t\t\t a (2D Tensor): A batch of vectors shaped (B1, D)\n\t\t\t b (2D Tensor): A batch of vectors shaped (B2, D)\n\t\tReturns:\n\t\t\t A matrix of all pairwise distance between all vectors in a and b,\n\t\t\t will be shape of (B1, B2)\n\t\t'''", "\n", "diff", "=", "a", ".", "unsqueeze", "(", "1", ")", "-", "b", ".", "unsqueeze", "(", "0", ")", "\n", "return", "(", "(", "diff", "**", "2", ")", ".", "sum", "(", "2", ")", "+", "1e-12", ")", ".", "sqrt", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIM.__init__": [[9, 13], ["torch.autograd.Function.__init__"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lut", ",", "momentum", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "OIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lut", "=", "lut", "# torch.Size([625, 128])", "\n", "self", ".", "momentum", "=", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIM.forward": [[14, 18], ["oim.OIM.save_for_backward", "inputs.mm", "oim.OIM.lut.t"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "self", ".", "save_for_backward", "(", "inputs", ",", "targets", ")", "# inputs: torch.Size([64, 128])", "\n", "outputs", "=", "inputs", ".", "mm", "(", "self", ".", "lut", ".", "t", "(", ")", ")", "# (64, 128) * (128, 625)", "\n", "return", "outputs", "# torch.Size([64, 625])", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIM.backward": [[19, 28], ["zip", "grad_outputs.mm", "oim.OIM.lut[].norm"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_outputs", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "self", ".", "saved_tensors", "\n", "grad_inputs", "=", "None", "\n", "if", "self", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_inputs", "=", "grad_outputs", ".", "mm", "(", "self", ".", "lut", ")", "\n", "", "for", "x", ",", "y", "in", "zip", "(", "inputs", ",", "targets", ")", ":", "\n", "            ", "self", ".", "lut", "[", "y", "]", "=", "self", ".", "momentum", "*", "self", ".", "lut", "[", "y", "]", "+", "(", "1.", "-", "self", ".", "momentum", ")", "*", "x", "\n", "self", ".", "lut", "[", "y", "]", "/=", "self", ".", "lut", "[", "y", "]", ".", "norm", "(", ")", "\n", "", "return", "grad_inputs", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__": [[35, 45], ["torch.nn.Module.__init__", "oim.OIMLoss.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ",", "scalar", "=", "1.0", ",", "momentum", "=", "0.5", ",", "\n", "weight", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "OIMLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "# 512", "\n", "self", ".", "num_classes", "=", "num_classes", "# 625", "\n", "self", ".", "momentum", "=", "momentum", "# 0.5", "\n", "self", ".", "scalar", "=", "scalar", "# 30", "\n", "self", ".", "weight", "=", "weight", "# None", "\n", "self", ".", "register_buffer", "(", "'lut'", ",", "torch", ".", "zeros", "(", "num_classes", ",", "num_features", ")", ")", "\n", "self", ".", "size_average", "=", "size_average", "# True", "\n", "\n"]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.OIMLoss.forward": [[46, 54], ["oim.oim", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.oim"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "#", "\n", "\n", "        ", "inputs", "=", "oim", "(", "inputs", ",", "targets", ",", "self", ".", "lut", ",", "momentum", "=", "self", ".", "momentum", ")", "\n", "\n", "inputs", "*=", "self", ".", "scalar", "\n", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "inputs", ",", "targets", ",", "weight", "=", "self", ".", "weight", ")", "\n", "return", "loss", ",", "inputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.flysnowtiger_GRL.loss.oim.oim": [[30, 32], ["oim.OIM"], "function", ["None"], ["", "", "def", "oim", "(", "inputs", ",", "targets", ",", "lut", ",", "momentum", "=", "0.5", ")", ":", "\n", "    ", "return", "OIM", "(", "lut", ",", "momentum", "=", "momentum", ")", "(", "inputs", ",", "targets", ")", "\n", "\n"]]}