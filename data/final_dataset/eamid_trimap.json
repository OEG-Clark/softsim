{"home.repos.pwc.inspect_result.eamid_trimap.None.setup.readme": [[3, 6], ["open", "readme_file.read"], "function", ["None"], ["def", "readme", "(", ")", ":", "\n", "    ", "with", "open", "(", "'README.rst'", ")", "as", "readme_file", ":", "\n", "        ", "return", "readme_file", ".", "read", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.TRIMAP.__init__": [[689, 774], ["ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "warnings.warn", "warnings.warn", "print", "print"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_dims", "=", "2", ",", "\n", "n_inliers", "=", "12", ",", "\n", "n_outliers", "=", "4", ",", "\n", "n_random", "=", "3", ",", "\n", "distance", "=", "\"euclidean\"", ",", "\n", "lr", "=", "0.1", ",", "\n", "n_iters", "=", "400", ",", "\n", "triplets", "=", "None", ",", "\n", "weights", "=", "None", ",", "\n", "use_dist_matrix", "=", "False", ",", "\n", "knn_tuple", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", "weight_adj", "=", "None", ",", "\n", "weight_temp", "=", "0.5", ",", "\n", "apply_pca", "=", "True", ",", "\n", "opt_method", "=", "\"dbd\"", ",", "\n", "return_seq", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "n_dims", "=", "n_dims", "\n", "self", ".", "n_inliers", "=", "n_inliers", "\n", "self", ".", "n_outliers", "=", "n_outliers", "\n", "self", ".", "n_random", "=", "n_random", "\n", "self", ".", "distance", "=", "distance", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "n_iters", "=", "n_iters", "\n", "self", ".", "triplets", "=", "triplets", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "use_dist_matrix", "=", "use_dist_matrix", "\n", "self", ".", "knn_tuple", "=", "knn_tuple", "\n", "self", ".", "weight_adj", "=", "weight_adj", "\n", "self", ".", "weight_temp", "=", "weight_temp", "\n", "self", ".", "apply_pca", "=", "apply_pca", "\n", "self", ".", "opt_method", "=", "opt_method", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "return_seq", "=", "return_seq", "\n", "\n", "if", "self", ".", "n_dims", "<", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\"The number of output dimensions must be at least 2.\"", ")", "\n", "", "if", "self", ".", "n_inliers", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"The number of inliers must be a positive number.\"", ")", "\n", "", "if", "self", ".", "n_outliers", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"The number of outliers must be a positive number.\"", ")", "\n", "", "if", "self", ".", "n_random", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The number of random triplets must be a non-negative number.\"", "\n", ")", "\n", "", "if", "self", ".", "lr", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"The learning rate must be a positive value.\"", ")", "\n", "", "if", "self", ".", "use_dist_matrix", ":", "\n", "            ", "distance", "=", "\"pre-computed\"", "\n", "self", ".", "distance", "=", "distance", "\n", "", "if", "self", ".", "distance", "==", "\"hamming\"", "and", "apply_pca", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"apply_pca = True for Hamming distance.\"", ")", "\n", "", "if", "self", ".", "distance", "==", "\"cosine\"", ":", "\n", "            ", "self", ".", "distance", "=", "\"angular\"", "\n", "", "if", "weight_adj", "is", "not", "None", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"'weight_adj' is deprecated and will not be applied.\"", "\n", "\" Adjust 'weight_temp' if needed.\"", "\n", ")", "\n", "\n", "", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\n", "\"TRIMAP(n_inliers={}, n_outliers={}, n_random={}, distance={}, weight_temp={}, \"", "\n", "\"lr={}, n_iters={}, apply_pca={}, opt_method={}, verbose={}, return_seq={})\"", ".", "format", "(", "\n", "n_inliers", ",", "\n", "n_outliers", ",", "\n", "n_random", ",", "\n", "distance", ",", "\n", "weight_temp", ",", "\n", "lr", ",", "\n", "n_iters", ",", "\n", "apply_pca", ",", "\n", "opt_method", ",", "\n", "verbose", ",", "\n", "return_seq", ",", "\n", ")", "\n", ")", "\n", "if", "not", "self", ".", "apply_pca", ":", "\n", "                ", "print", "(", "\n", "_BOLD", "\n", "+", "\"running ANNOY on high-dimensional data. nearest-neighbor search may be slow!\"", "\n", "+", "_RESET", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.TRIMAP.fit": [[776, 809], ["X.astype.astype.astype", "trimap_.trimap"], "methods", ["home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.trimap"], ["", "", "", "def", "fit", "(", "self", ",", "X", ",", "init", "=", "None", ")", ":", "\n", "        ", "\"\"\"Runs TriMap on the input data X.\n\n        Input\n        ------\n\n        X: Instance matrix\n\n        init: Initial solution\n        \"\"\"", "\n", "X", "=", "X", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "self", ".", "embedding_", ",", "self", ".", "triplets", ",", "self", ".", "weights", "=", "trimap", "(", "\n", "X", ",", "\n", "self", ".", "triplets", ",", "\n", "self", ".", "weights", ",", "\n", "self", ".", "knn_tuple", ",", "\n", "self", ".", "use_dist_matrix", ",", "\n", "self", ".", "n_dims", ",", "\n", "self", ".", "n_inliers", ",", "\n", "self", ".", "n_outliers", ",", "\n", "self", ".", "n_random", ",", "\n", "self", ".", "distance", ",", "\n", "self", ".", "lr", ",", "\n", "self", ".", "n_iters", ",", "\n", "init", ",", "\n", "self", ".", "weight_temp", ",", "\n", "self", ".", "apply_pca", ",", "\n", "self", ".", "opt_method", ",", "\n", "self", ".", "verbose", ",", "\n", "self", ".", "return_seq", ",", "\n", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.TRIMAP.fit_transform": [[810, 823], ["trimap_.TRIMAP.fit"], "methods", ["home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.TRIMAP.fit"], ["", "def", "fit_transform", "(", "self", ",", "X", ",", "init", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Runs the TriMap algorithm on the input data X and returns the embedding\n\n        Input\n        ------\n\n        X: Instance matrix\n\n        init: Initial solution\n        \"\"\"", "\n", "self", ".", "fit", "(", "X", ",", "init", ")", "\n", "return", "self", ".", "embedding_", "\n", "\n"]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.TRIMAP.sample_triplets": [[824, 859], ["sklearn.decomposition.TruncatedSVD().fit_transform.astype", "trimap_.generate_triplets", "print", "print", "numpy.mean", "sklearn.decomposition.TruncatedSVD().fit_transform", "numpy.min", "numpy.max", "numpy.mean", "print", "sklearn.decomposition.TruncatedSVD"], "methods", ["home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.generate_triplets", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.TRIMAP.fit_transform"], ["", "def", "sample_triplets", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Samples and stores triplets\n\n        Input\n        ------\n\n        X: Instance matrix\n        \"\"\"", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\"pre-processing\"", ")", "\n", "", "X", "=", "X", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "self", ".", "distance", "!=", "\"hamming\"", ":", "\n", "            ", "if", "X", ".", "shape", "[", "1", "]", ">", "_PCA_DIM", "and", "self", ".", "apply_pca", ":", "\n", "                ", "X", "-=", "np", ".", "mean", "(", "X", ",", "axis", "=", "0", ")", "\n", "X", "=", "TruncatedSVD", "(", "n_components", "=", "_PCA_DIM", ",", "random_state", "=", "0", ")", ".", "fit_transform", "(", "X", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                    ", "print", "(", "\"applied PCA\"", ")", "\n", "", "", "else", ":", "\n", "                ", "X", "-=", "np", ".", "min", "(", "X", ")", "\n", "X", "/=", "np", ".", "max", "(", "X", ")", "\n", "X", "-=", "np", ".", "mean", "(", "X", ",", "axis", "=", "0", ")", "\n", "", "", "self", ".", "triplets", ",", "self", ".", "weights", "=", "generate_triplets", "(", "\n", "X", ",", "\n", "self", ".", "n_inliers", ",", "\n", "self", ".", "n_outliers", ",", "\n", "self", ".", "n_random", ",", "\n", "self", ".", "distance", ",", "\n", "self", ".", "verbose", ",", "\n", "self", ".", "weight_temp", ",", "\n", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\"sampled triplets\"", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.TRIMAP.del_triplets": [[860, 868], ["None"], "methods", ["None"], ["", "def", "del_triplets", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Deletes the stored triplets\n        \"\"\"", "\n", "self", ".", "triplets", "=", "None", "\n", "self", ".", "weights", "=", "None", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.TRIMAP.global_score": [[869, 891], ["sklearn.decomposition.PCA().fit_transform", "trimap_.TRIMAP.global_score.global_loss_"], "methods", ["home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.TRIMAP.fit_transform"], ["", "def", "global_score", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "\"\"\"\n        Global score\n\n        Input\n        ------\n\n        X: Instance matrix\n        Y: Embedding\n        \"\"\"", "\n", "\n", "def", "global_loss_", "(", "X", ",", "Y", ")", ":", "\n", "            ", "X", "=", "X", "-", "np", ".", "mean", "(", "X", ",", "axis", "=", "0", ")", "\n", "Y", "=", "Y", "-", "np", ".", "mean", "(", "Y", ",", "axis", "=", "0", ")", "\n", "A", "=", "X", ".", "T", "@", "(", "Y", "@", "np", ".", "linalg", ".", "inv", "(", "Y", ".", "T", "@", "Y", ")", ")", "\n", "return", "np", ".", "mean", "(", "np", ".", "power", "(", "X", ".", "T", "-", "A", "@", "Y", ".", "T", ",", "2", ")", ")", "\n", "\n", "", "n_dims", "=", "Y", ".", "shape", "[", "1", "]", "\n", "Y_pca", "=", "PCA", "(", "n_components", "=", "n_dims", ")", ".", "fit_transform", "(", "X", ")", "\n", "gs_pca", "=", "global_loss_", "(", "X", ",", "Y_pca", ")", "\n", "gs_emb", "=", "global_loss_", "(", "X", ",", "Y", ")", "\n", "return", "np", ".", "exp", "(", "-", "(", "gs_emb", "-", "gs_pca", ")", "/", "gs_pca", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.tempered_log": [[50, 56], ["numpy.abs", "numpy.log", "numpy.power"], "function", ["None"], ["def", "tempered_log", "(", "x", ",", "t", ")", ":", "\n", "    ", "\"\"\"Tempered log with temperature t\"\"\"", "\n", "if", "np", ".", "abs", "(", "t", "-", "1.0", ")", "<", "1e-5", ":", "\n", "        ", "return", "np", ".", "log", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "return", "1.0", "/", "(", "1.0", "-", "t", ")", "*", "(", "np", ".", "power", "(", "x", ",", "1.0", "-", "t", ")", "-", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.l2_norm": [[58, 65], ["numba.njit", "range", "numpy.sqrt"], "function", ["None"], ["", "", "@", "njit", "(", "\"f4(f4[:])\"", ")", "\n", "def", "l2_norm", "(", "x", ")", ":", "\n", "    ", "\"\"\"L2 norm of a vector.\"\"\"", "\n", "result", "=", "0.0", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "result", "+=", "x", "[", "i", "]", "**", "2", "\n", "", "return", "np", ".", "sqrt", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.euclid_dist": [[67, 74], ["numba.njit", "range", "numpy.sqrt"], "function", ["None"], ["", "@", "njit", "(", "\"f4(f4[:],f4[:])\"", ")", "\n", "def", "euclid_dist", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "\"\"\"Euclidean distance between two vectors.\"\"\"", "\n", "result", "=", "0.0", "\n", "for", "i", "in", "range", "(", "x1", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "result", "+=", "(", "x1", "[", "i", "]", "-", "x2", "[", "i", "]", ")", "**", "2", "\n", "", "return", "np", ".", "sqrt", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.manhattan_dist": [[76, 83], ["numba.njit", "range", "numpy.abs"], "function", ["None"], ["", "@", "njit", "(", "\"f4(f4[:],f4[:])\"", ")", "\n", "def", "manhattan_dist", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "\"\"\"Manhattan distance between two vectors.\"\"\"", "\n", "result", "=", "0.0", "\n", "for", "i", "in", "range", "(", "x1", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "result", "+=", "np", ".", "abs", "(", "x1", "[", "i", "]", "-", "x2", "[", "i", "]", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.angular_dist": [[85, 95], ["numba.njit", "numpy.maximum", "numpy.maximum", "range", "trimap_.l2_norm", "trimap_.l2_norm"], "function", ["home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.l2_norm", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.l2_norm"], ["", "@", "njit", "(", "\"f4(f4[:],f4[:])\"", ")", "\n", "def", "angular_dist", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "\"\"\"Angular (i.e. cosine) distance between two vectors.\"\"\"", "\n", "x1_norm", "=", "np", ".", "maximum", "(", "l2_norm", "(", "x1", ")", ",", "1e-20", ")", "\n", "x2_norm", "=", "np", ".", "maximum", "(", "l2_norm", "(", "x2", ")", ",", "1e-20", ")", "\n", "result", "=", "0.0", "\n", "for", "i", "in", "range", "(", "x1", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "result", "+=", "x1", "[", "i", "]", "*", "x2", "[", "i", "]", "\n", "# angular is multiplied by a factor of 2.0 in annoy", "\n", "", "return", "2.0", "*", "(", "1.0", "-", "result", "/", "x1_norm", "/", "x2_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.hamming_dist": [[97, 105], ["numba.njit", "range"], "function", ["None"], ["", "@", "njit", "(", "\"f4(f4[:],f4[:])\"", ")", "\n", "def", "hamming_dist", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "\"\"\"Hamming distance between two vectors.\"\"\"", "\n", "result", "=", "0.0", "\n", "for", "i", "in", "range", "(", "x1", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "x1", "[", "i", "]", "!=", "x2", "[", "i", "]", ":", "\n", "            ", "result", "+=", "1.0", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.calculate_dist": [[107, 117], ["numba.njit", "trimap_.euclid_dist", "trimap_.manhattan_dist", "trimap_.angular_dist", "trimap_.hamming_dist"], "function", ["home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.euclid_dist", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.manhattan_dist", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.angular_dist", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.hamming_dist"], ["", "@", "njit", "(", ")", "\n", "def", "calculate_dist", "(", "x1", ",", "x2", ",", "distance_index", ")", ":", "\n", "    ", "if", "distance_index", "==", "0", ":", "\n", "        ", "return", "euclid_dist", "(", "x1", ",", "x2", ")", "\n", "", "elif", "distance_index", "==", "1", ":", "\n", "        ", "return", "manhattan_dist", "(", "x1", ",", "x2", ")", "\n", "", "elif", "distance_index", "==", "2", ":", "\n", "        ", "return", "angular_dist", "(", "x1", ",", "x2", ")", "\n", "", "elif", "distance_index", "==", "3", ":", "\n", "        ", "return", "hamming_dist", "(", "x1", ",", "x2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.rejection_sample": [[119, 142], ["numba.njit", "numpy.empty", "range", "numpy.random.randint", "range", "range"], "function", ["None"], ["", "", "@", "njit", "(", ")", "\n", "def", "rejection_sample", "(", "n_samples", ",", "max_int", ",", "rejects", ")", ":", "\n", "    ", "\"\"\"Rejection sampling.\n\n    Samples \"n_samples\" integers from a given interval [0,max_int] while\n    rejecting the values that are in the \"rejects\".\n\n    \"\"\"", "\n", "result", "=", "np", ".", "empty", "(", "n_samples", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "        ", "reject_sample", "=", "True", "\n", "while", "reject_sample", ":", "\n", "            ", "j", "=", "np", ".", "random", ".", "randint", "(", "max_int", ")", "\n", "for", "k", "in", "range", "(", "i", ")", ":", "\n", "                ", "if", "j", "==", "result", "[", "k", "]", ":", "\n", "                    ", "break", "\n", "", "", "for", "k", "in", "range", "(", "rejects", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "if", "j", "==", "rejects", "[", "k", "]", ":", "\n", "                    ", "break", "\n", "", "", "else", ":", "\n", "                ", "reject_sample", "=", "False", "\n", "", "", "result", "[", "i", "]", "=", "j", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.sample_knn_triplets": [[144, 180], ["numba.njit", "numpy.empty", "numba.prange", "numpy.argsort", "numba.prange", "trimap_.rejection_sample", "numba.prange"], "function", ["home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.rejection_sample"], ["", "@", "njit", "(", "\"i4[:,:](f4[:,:],i4[:,:],i4,i4)\"", ",", "parallel", "=", "True", ",", "nogil", "=", "True", ")", "\n", "def", "sample_knn_triplets", "(", "P", ",", "nbrs", ",", "n_inliers", ",", "n_outliers", ")", ":", "\n", "    ", "\"\"\"Sample nearest neighbors triplets based on the similarity values in P.\n\n    Input\n    ------\n\n    nbrs: Nearest neighbors indices for each point. The similarity values\n        are given in matrix P. Row i corresponds to the i-th point.\n\n    P: Matrix of pairwise similarities between each point and its neighbors\n        given in matrix nbrs\n\n    n_inliers: Number of inlier points\n\n    n_outliers: Number of outlier points\n\n    Output\n    ------\n\n    triplets: Sampled triplets\n    \"\"\"", "\n", "n", ",", "n_neighbors", "=", "nbrs", ".", "shape", "\n", "triplets", "=", "np", ".", "empty", "(", "(", "n", "*", "n_inliers", "*", "n_outliers", ",", "3", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "prange", "(", "n", ")", ":", "\n", "        ", "sort_indices", "=", "np", ".", "argsort", "(", "-", "P", "[", "i", "]", ")", "\n", "for", "j", "in", "prange", "(", "n_inliers", ")", ":", "\n", "            ", "sim", "=", "nbrs", "[", "i", "]", "[", "sort_indices", "[", "j", "+", "1", "]", "]", "\n", "samples", "=", "rejection_sample", "(", "n_outliers", ",", "n", ",", "nbrs", "[", "i", "]", "[", "sort_indices", "[", ":", "j", "+", "2", "]", "]", ")", "\n", "for", "k", "in", "prange", "(", "n_outliers", ")", ":", "\n", "                ", "index", "=", "i", "*", "n_inliers", "*", "n_outliers", "+", "j", "*", "n_outliers", "+", "k", "\n", "out", "=", "samples", "[", "k", "]", "\n", "triplets", "[", "index", "]", "[", "0", "]", "=", "i", "\n", "triplets", "[", "index", "]", "[", "1", "]", "=", "sim", "\n", "triplets", "[", "index", "]", "[", "2", "]", "=", "out", "\n", "", "", "", "return", "triplets", "\n", "\n"]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.sample_random_triplets": [[182, 230], ["numba.njit", "numpy.empty", "numba.prange", "numba.prange", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "trimap_.calculate_dist", "trimap_.calculate_dist"], "function", ["home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.calculate_dist", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.calculate_dist"], ["", "@", "njit", "(", "\"f4[:,:](f4[:,:],i4,f4[:],i4)\"", ",", "parallel", "=", "True", ",", "nogil", "=", "True", ")", "\n", "def", "sample_random_triplets", "(", "X", ",", "n_random", ",", "sig", ",", "distance_index", ")", ":", "\n", "    ", "\"\"\"Sample uniformly random triplets.\n\n    Input\n    ------\n\n    X: Instance matrix or pairwise distances\n\n    n_random: Number of random triplets per point\n\n    sig: Scaling factor for the distances\n\n    distance_index: index of the distance measure\n\n    Output\n    ------\n\n    rand_triplets: Sampled triplets\n    \"\"\"", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "\n", "rand_triplets", "=", "np", ".", "empty", "(", "(", "n", "*", "n_random", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "prange", "(", "n", ")", ":", "\n", "        ", "for", "j", "in", "prange", "(", "n_random", ")", ":", "\n", "            ", "sim", "=", "np", ".", "random", ".", "choice", "(", "n", ")", "\n", "while", "sim", "==", "i", ":", "\n", "                ", "sim", "=", "np", ".", "random", ".", "choice", "(", "n", ")", "\n", "", "out", "=", "np", ".", "random", ".", "choice", "(", "n", ")", "\n", "while", "out", "==", "i", "or", "out", "==", "sim", ":", "\n", "                ", "out", "=", "np", ".", "random", ".", "choice", "(", "n", ")", "\n", "", "if", "distance_index", "==", "-", "1", ":", "\n", "                ", "d_sim", "=", "X", "[", "i", ",", "sim", "]", "\n", "", "else", ":", "\n", "                ", "d_sim", "=", "calculate_dist", "(", "X", "[", "i", "]", ",", "X", "[", "sim", "]", ",", "distance_index", ")", "\n", "", "p_sim", "=", "-", "(", "d_sim", "**", "2", ")", "/", "(", "sig", "[", "i", "]", "*", "sig", "[", "sim", "]", ")", "\n", "if", "distance_index", "==", "-", "1", ":", "\n", "                ", "d_out", "=", "X", "[", "i", ",", "out", "]", "\n", "", "else", ":", "\n", "                ", "d_out", "=", "calculate_dist", "(", "X", "[", "i", "]", ",", "X", "[", "out", "]", ",", "distance_index", ")", "\n", "", "p_out", "=", "-", "(", "d_out", "**", "2", ")", "/", "(", "sig", "[", "i", "]", "*", "sig", "[", "out", "]", ")", "\n", "if", "p_sim", "<", "p_out", ":", "\n", "                ", "sim", ",", "out", "=", "out", ",", "sim", "\n", "p_sim", ",", "p_out", "=", "p_out", ",", "p_sim", "\n", "", "rand_triplets", "[", "i", "*", "n_random", "+", "j", "]", "[", "0", "]", "=", "i", "\n", "rand_triplets", "[", "i", "*", "n_random", "+", "j", "]", "[", "1", "]", "=", "sim", "\n", "rand_triplets", "[", "i", "*", "n_random", "+", "j", "]", "[", "2", "]", "=", "out", "\n", "rand_triplets", "[", "i", "*", "n_random", "+", "j", "]", "[", "3", "]", "=", "p_sim", "-", "p_out", "\n", "", "", "return", "rand_triplets", "\n", "\n"]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.find_p": [[232, 256], ["numba.njit", "numpy.zeros", "numba.prange", "numba.prange"], "function", ["None"], ["", "@", "njit", "(", "\"f4[:,:](f4[:,:],f4[:],i4[:,:])\"", ",", "parallel", "=", "True", ",", "nogil", "=", "True", ")", "\n", "def", "find_p", "(", "knn_distances", ",", "sig", ",", "nbrs", ")", ":", "\n", "    ", "\"\"\"Calculates the similarity matrix P.\n\n    Input\n    ------\n\n    knn_distances: Matrix of pairwise knn distances\n\n    sig: Scaling factor for the distances\n\n    nbrs: Nearest neighbors\n\n    Output\n    ------\n\n    P: Pairwise similarity matrix\n    \"\"\"", "\n", "n", ",", "n_neighbors", "=", "knn_distances", ".", "shape", "\n", "P", "=", "np", ".", "zeros", "(", "(", "n", ",", "n_neighbors", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "prange", "(", "n", ")", ":", "\n", "        ", "for", "j", "in", "prange", "(", "n_neighbors", ")", ":", "\n", "            ", "P", "[", "i", "]", "[", "j", "]", "=", "-", "knn_distances", "[", "i", "]", "[", "j", "]", "**", "2", "/", "(", "sig", "[", "i", "]", "*", "sig", "[", "nbrs", "[", "i", "]", "[", "j", "]", "]", ")", "\n", "", "", "return", "P", "\n", "\n"]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.find_weights": [[258, 291], ["numba.njit", "numpy.empty", "numba.prange"], "function", ["None"], ["", "@", "njit", "(", "\"f4[:](i4[:,:],f4[:,:],i4[:,:],f4[:],f4[:])\"", ",", "parallel", "=", "True", ",", "nogil", "=", "True", ")", "\n", "def", "find_weights", "(", "triplets", ",", "P", ",", "nbrs", ",", "outlier_distances", ",", "sig", ")", ":", "\n", "    ", "\"\"\"Calculates the weights for the sampled nearest neighbors triplets.\n\n    Input\n    ------\n\n    triplets: Sampled triplets\n\n    P: Pairwise similarity matrix\n\n    nbrs: Nearest neighbors\n\n    outlier_distances: Matrix of pairwise outlier distances\n\n    sig: Scaling factor for the distances\n\n    Output\n    ------\n\n    weights: Weights for the triplets\n    \"\"\"", "\n", "n_triplets", "=", "triplets", ".", "shape", "[", "0", "]", "\n", "weights", "=", "np", ".", "empty", "(", "n_triplets", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "t", "in", "prange", "(", "n_triplets", ")", ":", "\n", "        ", "i", "=", "triplets", "[", "t", "]", "[", "0", "]", "\n", "sim", "=", "0", "\n", "while", "nbrs", "[", "i", "]", "[", "sim", "]", "!=", "triplets", "[", "t", "]", "[", "1", "]", ":", "\n", "            ", "sim", "+=", "1", "\n", "", "p_sim", "=", "P", "[", "i", "]", "[", "sim", "]", "\n", "p_out", "=", "-", "outlier_distances", "[", "t", "]", "**", "2", "/", "(", "sig", "[", "i", "]", "*", "sig", "[", "triplets", "[", "t", "]", "[", "2", "]", "]", ")", "\n", "weights", "[", "t", "]", "=", "p_sim", "-", "p_out", "\n", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.generate_triplets": [[293, 338], ["min", "annoy.AnnoyIndex", "range", "annoy.AnnoyIndex.build", "numpy.empty", "numpy.empty", "range", "numpy.maximum", "trimap_.find_p", "trimap_.sample_knn_triplets", "numpy.empty", "range", "trimap_.find_weights", "numpy.min", "trimap_.tempered_log", "annoy.AnnoyIndex.add_item", "annoy.AnnoyIndex.get_nns_by_item", "range", "print", "numpy.mean", "trimap_.calculate_dist", "trimap_.sample_random_triplets", "rand_triplets[].astype", "numpy.vstack", "numpy.hstack", "annoy.AnnoyIndex.get_distance", "numpy.isnan"], "function", ["home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.find_p", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.sample_knn_triplets", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.find_weights", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.tempered_log", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.calculate_dist", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.sample_random_triplets"], ["", "def", "generate_triplets", "(", "\n", "X", ",", "\n", "n_inliers", ",", "\n", "n_outliers", ",", "\n", "n_random", ",", "\n", "distance", "=", "\"euclidean\"", ",", "\n", "verbose", "=", "False", ",", "\n", "weight_temp", "=", "0.5", ",", "\n", ")", ":", "\n", "    ", "distance_dict", "=", "{", "\"euclidean\"", ":", "0", ",", "\"manhattan\"", ":", "1", ",", "\"angular\"", ":", "2", ",", "\"hamming\"", ":", "3", "}", "\n", "distance_index", "=", "distance_dict", "[", "distance", "]", "\n", "n", ",", "dim", "=", "X", ".", "shape", "\n", "n_extra", "=", "min", "(", "n_inliers", "+", "_NUM_EXTRA_KNN", ",", "n", ")", "\n", "tree", "=", "AnnoyIndex", "(", "dim", ",", "metric", "=", "distance", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "tree", ".", "add_item", "(", "i", ",", "X", "[", "i", ",", ":", "]", ")", "\n", "", "tree", ".", "build", "(", "_NUM_TREES", ")", "\n", "nbrs", "=", "np", ".", "empty", "(", "(", "n", ",", "n_extra", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "knn_distances", "=", "np", ".", "empty", "(", "(", "n", ",", "n_extra", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "nbrs", "[", "i", ",", ":", "]", "=", "tree", ".", "get_nns_by_item", "(", "i", ",", "n_extra", ")", "\n", "for", "j", "in", "range", "(", "n_extra", ")", ":", "\n", "            ", "knn_distances", "[", "i", ",", "j", "]", "=", "tree", ".", "get_distance", "(", "i", ",", "nbrs", "[", "i", ",", "j", "]", ")", "\n", "", "", "if", "verbose", ":", "\n", "        ", "print", "(", "\"found nearest neighbors\"", ")", "\n", "", "sig", "=", "np", ".", "maximum", "(", "np", ".", "mean", "(", "knn_distances", "[", ":", ",", "3", ":", "6", "]", ",", "axis", "=", "1", ")", ",", "1e-10", ")", "# scale parameter", "\n", "P", "=", "find_p", "(", "knn_distances", ",", "sig", ",", "nbrs", ")", "\n", "triplets", "=", "sample_knn_triplets", "(", "P", ",", "nbrs", ",", "n_inliers", ",", "n_outliers", ")", "\n", "n_triplets", "=", "triplets", ".", "shape", "[", "0", "]", "\n", "outlier_distances", "=", "np", ".", "empty", "(", "n_triplets", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "t", "in", "range", "(", "n_triplets", ")", ":", "\n", "        ", "outlier_distances", "[", "t", "]", "=", "calculate_dist", "(", "\n", "X", "[", "triplets", "[", "t", ",", "0", "]", ",", ":", "]", ",", "X", "[", "triplets", "[", "t", ",", "2", "]", ",", ":", "]", ",", "distance_index", "\n", ")", "\n", "", "weights", "=", "find_weights", "(", "triplets", ",", "P", ",", "nbrs", ",", "outlier_distances", ",", "sig", ")", "\n", "if", "n_random", ">", "0", ":", "\n", "        ", "rand_triplets", "=", "sample_random_triplets", "(", "X", ",", "n_random", ",", "sig", ",", "distance_index", ")", "\n", "rand_weights", "=", "rand_triplets", "[", ":", ",", "-", "1", "]", "\n", "rand_triplets", "=", "rand_triplets", "[", ":", ",", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "triplets", "=", "np", ".", "vstack", "(", "(", "triplets", ",", "rand_triplets", ")", ")", "\n", "weights", "=", "np", ".", "hstack", "(", "(", "weights", ",", "_RAND_WEIGHT_SCALE", "*", "rand_weights", ")", ")", "\n", "", "weights", "[", "np", ".", "isnan", "(", "weights", ")", "]", "=", "0.0", "\n", "weights", "-=", "np", ".", "min", "(", "weights", ")", "\n", "weights", "=", "tempered_log", "(", "1.0", "+", "weights", ",", "weight_temp", ")", "\n", "return", "(", "triplets", ",", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.generate_triplets_known_knn": [[340, 400], ["numpy.maximum", "trimap_.find_p", "trimap_.sample_knn_triplets", "numpy.empty", "range", "trimap_.find_weights", "numpy.min", "trimap_.tempered_log", "numpy.hstack().astype", "numpy.hstack().astype", "numpy.mean", "rand_triplets[].astype", "numpy.vstack", "numpy.hstack", "trimap_.calculate_dist", "trimap_.sample_random_triplets", "trimap_.sample_random_triplets", "numpy.isnan", "numpy.hstack", "numpy.hstack", "numpy.zeros", "numpy.array", "range"], "function", ["home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.find_p", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.sample_knn_triplets", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.find_weights", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.tempered_log", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.calculate_dist", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.sample_random_triplets", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.sample_random_triplets"], ["", "def", "generate_triplets_known_knn", "(", "\n", "X", ",", "\n", "knn_nbrs", ",", "\n", "knn_distances", ",", "\n", "n_inliers", ",", "\n", "n_outliers", ",", "\n", "n_random", ",", "\n", "pairwise_dist_matrix", "=", "None", ",", "\n", "distance", "=", "\"euclidean\"", ",", "\n", "verbose", "=", "False", ",", "\n", "weight_temp", "=", "0.5", ",", "\n", ")", ":", "\n", "    ", "all_distances", "=", "pairwise_dist_matrix", "is", "not", "None", "\n", "if", "all_distances", ":", "\n", "        ", "distance", "=", "\"other\"", "\n", "", "distance_dict", "=", "{", "\n", "\"euclidean\"", ":", "0", ",", "\n", "\"manhattan\"", ":", "1", ",", "\n", "\"angular\"", ":", "2", ",", "\n", "\"hamming\"", ":", "3", ",", "\n", "\"other\"", ":", "-", "1", ",", "\n", "}", "\n", "distance_index", "=", "distance_dict", "[", "distance", "]", "\n", "# check whether the first nn of each point is itself", "\n", "# TODO(eamid): use index shifting instead", "\n", "if", "knn_nbrs", "[", "0", ",", "0", "]", "!=", "0", ":", "\n", "        ", "knn_nbrs", "=", "np", ".", "hstack", "(", "\n", "(", "np", ".", "array", "(", "range", "(", "knn_nbrs", ".", "shape", "[", "0", "]", ")", ")", "[", ":", ",", "np", ".", "newaxis", "]", ",", "knn_nbrs", ")", "\n", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "knn_distances", "=", "np", ".", "hstack", "(", "\n", "(", "np", ".", "zeros", "(", "(", "knn_distances", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ",", "knn_distances", ")", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "sig", "=", "np", ".", "maximum", "(", "np", ".", "mean", "(", "knn_distances", "[", ":", ",", "3", ":", "6", "]", ",", "axis", "=", "1", ")", ",", "1e-10", ")", "# scale parameter", "\n", "P", "=", "find_p", "(", "knn_distances", ",", "sig", ",", "knn_nbrs", ")", "\n", "triplets", "=", "sample_knn_triplets", "(", "P", ",", "knn_nbrs", ",", "n_inliers", ",", "n_outliers", ")", "\n", "n_triplets", "=", "triplets", ".", "shape", "[", "0", "]", "\n", "outlier_distances", "=", "np", ".", "empty", "(", "n_triplets", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "t", "in", "range", "(", "n_triplets", ")", ":", "\n", "        ", "if", "all_distances", ":", "\n", "            ", "outlier_distances", "[", "t", "]", "=", "pairwise_dist_matrix", "[", "triplets", "[", "t", ",", "0", "]", ",", "triplets", "[", "t", ",", "2", "]", "]", "\n", "", "else", ":", "\n", "            ", "outlier_distances", "[", "t", "]", "=", "calculate_dist", "(", "\n", "X", "[", "triplets", "[", "t", ",", "0", "]", ",", ":", "]", ",", "X", "[", "triplets", "[", "t", ",", "2", "]", ",", ":", "]", ",", "distance_index", "\n", ")", "\n", "", "", "weights", "=", "find_weights", "(", "triplets", ",", "P", ",", "knn_nbrs", ",", "outlier_distances", ",", "sig", ")", "\n", "if", "n_random", ">", "0", ":", "\n", "        ", "if", "all_distances", ":", "\n", "            ", "rand_triplets", "=", "sample_random_triplets", "(", "\n", "pairwise_dist_matrix", ",", "n_random", ",", "sig", ",", "distance_index", "\n", ")", "\n", "", "else", ":", "\n", "            ", "rand_triplets", "=", "sample_random_triplets", "(", "X", ",", "n_random", ",", "sig", ",", "distance_index", ")", "\n", "", "rand_weights", "=", "rand_triplets", "[", ":", ",", "-", "1", "]", "\n", "rand_triplets", "=", "rand_triplets", "[", ":", ",", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "triplets", "=", "np", ".", "vstack", "(", "(", "triplets", ",", "rand_triplets", ")", ")", "\n", "weights", "=", "np", ".", "hstack", "(", "(", "weights", ",", "rand_weights", ")", ")", "\n", "", "weights", "[", "np", ".", "isnan", "(", "weights", ")", "]", "=", "0.0", "\n", "weights", "-=", "np", ".", "min", "(", "weights", ")", "\n", "weights", "=", "tempered_log", "(", "1.0", "+", "weights", ",", "weight_temp", ")", "\n", "return", "(", "triplets", ",", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.update_embedding": [[402, 415], ["numba.njit", "numba.prange", "numba.prange", "numba.prange", "numba.prange"], "function", ["None"], ["", "@", "njit", "(", "\"void(f4[:,:],f4[:,:],f4[:,:],f4,i4,i4)\"", ",", "parallel", "=", "True", ",", "nogil", "=", "True", ")", "\n", "def", "update_embedding", "(", "Y", ",", "grad", ",", "vel", ",", "lr", ",", "iter_num", ",", "opt_method", ")", ":", "\n", "    ", "n", ",", "dim", "=", "Y", ".", "shape", "\n", "if", "opt_method", "==", "0", ":", "# sd", "\n", "        ", "for", "i", "in", "prange", "(", "n", ")", ":", "\n", "            ", "for", "d", "in", "prange", "(", "dim", ")", ":", "\n", "                ", "Y", "[", "i", "]", "[", "d", "]", "-=", "lr", "*", "grad", "[", "i", "]", "[", "d", "]", "\n", "", "", "", "elif", "opt_method", "==", "1", ":", "# momentum", "\n", "        ", "gamma", "=", "_FINAL_MOMENTUM", "if", "iter_num", ">", "_SWITCH_ITER_MOMENTUM", "else", "_INIT_MOMENTUM", "\n", "for", "i", "in", "prange", "(", "n", ")", ":", "\n", "            ", "for", "d", "in", "prange", "(", "dim", ")", ":", "\n", "                ", "vel", "[", "i", "]", "[", "d", "]", "=", "gamma", "*", "vel", "[", "i", "]", "[", "d", "]", "-", "lr", "*", "grad", "[", "i", "]", "[", "d", "]", "# - 1e-5 * Y[i,d]", "\n", "Y", "[", "i", "]", "[", "d", "]", "+=", "vel", "[", "i", "]", "[", "d", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.update_embedding_dbd": [[417, 431], ["numba.njit", "numba.prange", "numba.prange", "numpy.maximum", "numpy.sign", "numpy.sign"], "function", ["None"], ["", "", "", "", "@", "njit", "(", "\"void(f4[:,:],f4[:,:],f4[:,:],f4[:,:],f4,i4)\"", ",", "parallel", "=", "True", ",", "nogil", "=", "True", ")", "\n", "def", "update_embedding_dbd", "(", "Y", ",", "grad", ",", "vel", ",", "gain", ",", "lr", ",", "iter_num", ")", ":", "\n", "    ", "n", ",", "dim", "=", "Y", ".", "shape", "\n", "# momentum parameter", "\n", "gamma", "=", "_FINAL_MOMENTUM", "if", "iter_num", ">", "_SWITCH_ITER_MOMENTUM", "else", "_INIT_MOMENTUM", "\n", "for", "i", "in", "prange", "(", "n", ")", ":", "\n", "        ", "for", "d", "in", "prange", "(", "dim", ")", ":", "\n", "            ", "gain", "[", "i", "]", "[", "d", "]", "=", "(", "\n", "(", "gain", "[", "i", "]", "[", "d", "]", "+", "_INCREASE_GAIN", ")", "\n", "if", "(", "np", ".", "sign", "(", "vel", "[", "i", "]", "[", "d", "]", ")", "!=", "np", ".", "sign", "(", "grad", "[", "i", "]", "[", "d", "]", ")", ")", "\n", "else", "np", ".", "maximum", "(", "gain", "[", "i", "]", "[", "d", "]", "*", "_DAMP_GAIN", ",", "_MIN_GAIN", ")", "\n", ")", "\n", "vel", "[", "i", "]", "[", "d", "]", "=", "gamma", "*", "vel", "[", "i", "]", "[", "d", "]", "-", "lr", "*", "gain", "[", "i", "]", "[", "d", "]", "*", "grad", "[", "i", "]", "[", "d", "]", "\n", "Y", "[", "i", "]", "[", "d", "]", "+=", "vel", "[", "i", "]", "[", "d", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.trimap_grad": [[433, 475], ["numba.njit", "numpy.zeros", "numpy.empty", "numpy.empty", "range", "range", "range", "range"], "function", ["None"], ["", "", "", "@", "njit", "(", "\"f4[:,:](f4[:,:],i4,i4,i4[:,:],f4[:])\"", ",", "parallel", "=", "True", ",", "nogil", "=", "True", ")", "\n", "def", "trimap_grad", "(", "Y", ",", "n_inliers", ",", "n_outliers", ",", "triplets", ",", "weights", ")", ":", "\n", "    ", "n", ",", "dim", "=", "Y", ".", "shape", "\n", "n_triplets", "=", "triplets", ".", "shape", "[", "0", "]", "\n", "grad", "=", "np", ".", "zeros", "(", "(", "n", "+", "1", ",", "dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y_ij", "=", "np", ".", "empty", "(", "dim", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y_ik", "=", "np", ".", "empty", "(", "dim", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "n_viol", "=", "0.0", "\n", "loss", "=", "0.0", "\n", "n_knn_triplets", "=", "n", "*", "n_inliers", "*", "n_outliers", "\n", "for", "t", "in", "range", "(", "n_triplets", ")", ":", "\n", "        ", "i", "=", "triplets", "[", "t", ",", "0", "]", "\n", "j", "=", "triplets", "[", "t", ",", "1", "]", "\n", "k", "=", "triplets", "[", "t", ",", "2", "]", "\n", "if", "(", "t", "%", "n_outliers", ")", "==", "0", "or", "(", "\n", "t", ">=", "n_knn_triplets", "\n", ")", ":", "# update y_ij, y_ik, d_ij, d_ik", "\n", "            ", "d_ij", "=", "1.0", "\n", "d_ik", "=", "1.0", "\n", "for", "d", "in", "range", "(", "dim", ")", ":", "\n", "                ", "y_ij", "[", "d", "]", "=", "Y", "[", "i", ",", "d", "]", "-", "Y", "[", "j", ",", "d", "]", "\n", "y_ik", "[", "d", "]", "=", "Y", "[", "i", ",", "d", "]", "-", "Y", "[", "k", ",", "d", "]", "\n", "d_ij", "+=", "y_ij", "[", "d", "]", "**", "2", "\n", "d_ik", "+=", "y_ik", "[", "d", "]", "**", "2", "\n", "", "", "else", ":", "# update y_ik and d_ik only", "\n", "            ", "d_ik", "=", "1.0", "\n", "for", "d", "in", "range", "(", "dim", ")", ":", "\n", "                ", "y_ik", "[", "d", "]", "=", "Y", "[", "i", ",", "d", "]", "-", "Y", "[", "k", ",", "d", "]", "\n", "d_ik", "+=", "y_ik", "[", "d", "]", "**", "2", "\n", "", "", "if", "d_ij", ">", "d_ik", ":", "\n", "            ", "n_viol", "+=", "1.0", "\n", "", "loss", "+=", "weights", "[", "t", "]", "*", "1.0", "/", "(", "1.0", "+", "d_ik", "/", "d_ij", ")", "\n", "w", "=", "weights", "[", "t", "]", "/", "(", "d_ij", "+", "d_ik", ")", "**", "2", "\n", "for", "d", "in", "range", "(", "dim", ")", ":", "\n", "            ", "gs", "=", "y_ij", "[", "d", "]", "*", "d_ik", "*", "w", "\n", "go", "=", "y_ik", "[", "d", "]", "*", "d_ij", "*", "w", "\n", "grad", "[", "i", ",", "d", "]", "+=", "gs", "-", "go", "\n", "grad", "[", "j", ",", "d", "]", "-=", "gs", "\n", "grad", "[", "k", ",", "d", "]", "+=", "go", "\n", "", "", "grad", "[", "-", "1", ",", "0", "]", "=", "loss", "\n", "grad", "[", "-", "1", ",", "1", "]", "=", "n_viol", "\n", "return", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.trimap": [[477, 639], ["float", "numpy.zeros_like", "range", "time.time", "print", "numpy.zeros", "print", "numpy.ones_like", "str", "print", "np.zeros.astype", "np.zeros.astype", "trimap_.generate_triplets_known_knn", "print", "numpy.random.normal().astype", "Yinit.astype", "trimap_.trimap_grad", "trimap_.trimap_grad", "trimap_.update_embedding", "trimap_.update_embedding_dbd", "datetime.timedelta", "print", "numpy.array", "min", "numpy.zeros", "numpy.zeros", "range", "trimap_.generate_triplets_known_knn", "trimap_.generate_triplets", "int", "print", "print", "numpy.argsort", "print", "print", "numpy.random.normal", "sklearn.decomposition.PCA().fit_transform().astype", "numpy.argpartition", "numpy.mean", "sklearn.decomposition.TruncatedSVD().fit_transform", "numpy.min", "numpy.max", "numpy.mean", "int", "time.time", "print", "sklearn.decomposition.PCA().fit_transform", "sklearn.decomposition.TruncatedSVD", "sklearn.decomposition.PCA"], "function", ["home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.generate_triplets_known_knn", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.trimap_grad", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.trimap_grad", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.update_embedding", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.update_embedding_dbd", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.generate_triplets_known_knn", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.generate_triplets", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.TRIMAP.fit_transform", "home.repos.pwc.inspect_result.eamid_trimap.trimap.trimap_.TRIMAP.fit_transform"], ["", "def", "trimap", "(", "\n", "X", ",", "\n", "triplets", ",", "\n", "weights", ",", "\n", "knn_tuple", ",", "\n", "use_dist_matrix", ",", "\n", "n_dims", ",", "\n", "n_inliers", ",", "\n", "n_outliers", ",", "\n", "n_random", ",", "\n", "distance", ",", "\n", "lr", ",", "\n", "n_iters", ",", "\n", "Yinit", ",", "\n", "weight_temp", ",", "\n", "apply_pca", ",", "\n", "opt_method", ",", "\n", "verbose", ",", "\n", "return_seq", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Apply TriMap.\"\"\"", "\n", "\n", "opt_method_dict", "=", "{", "\"sd\"", ":", "0", ",", "\"momentum\"", ":", "1", ",", "\"dbd\"", ":", "2", "}", "\n", "if", "verbose", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "", "n", ",", "dim", "=", "X", ".", "shape", "\n", "assert", "n_inliers", "<", "n", "-", "1", ",", "\"n_inliers must be less than (number of data points - 1).\"", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"running TriMap on %d points with dimension %d\"", "%", "(", "n", ",", "dim", ")", ")", "\n", "", "pca_solution", "=", "False", "\n", "if", "triplets", "is", "None", ":", "\n", "        ", "if", "knn_tuple", "is", "not", "None", ":", "\n", "            ", "if", "verbose", ":", "\n", "                ", "print", "(", "\"using pre-computed knn\"", ")", "\n", "", "knn_nbrs", ",", "knn_distances", "=", "knn_tuple", "\n", "knn_nbrs", "=", "knn_nbrs", ".", "astype", "(", "np", ".", "int32", ")", "\n", "knn_distances", "=", "knn_distances", ".", "astype", "(", "np", ".", "float32", ")", "\n", "triplets", ",", "weights", "=", "generate_triplets_known_knn", "(", "\n", "X", ",", "\n", "knn_nbrs", ",", "\n", "knn_distances", ",", "\n", "n_inliers", ",", "\n", "n_outliers", ",", "\n", "n_random", ",", "\n", "None", ",", "\n", "distance", ",", "\n", "verbose", ",", "\n", "weight_temp", ",", "\n", ")", "\n", "", "elif", "use_dist_matrix", ":", "\n", "            ", "if", "verbose", ":", "\n", "                ", "print", "(", "\"using distance matrix\"", ")", "\n", "", "pairwise_dist_matrix", "=", "np", ".", "array", "(", "X", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "n_extra", "=", "min", "(", "n_inliers", "+", "50", ",", "n", ")", "\n", "knn_nbrs", "=", "np", ".", "zeros", "(", "(", "n", ",", "n_extra", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "knn_distances", "=", "np", ".", "zeros", "(", "(", "n", ",", "n_extra", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "nn", "in", "range", "(", "n", ")", ":", "\n", "                ", "bottom_k_indices", "=", "np", ".", "argpartition", "(", "\n", "pairwise_dist_matrix", "[", "nn", ",", ":", "]", ",", "n_extra", "\n", ")", "[", ":", "n_extra", "]", "\n", "bottom_k_distances", "=", "pairwise_dist_matrix", "[", "nn", ",", "bottom_k_indices", "]", "\n", "sort_indices", "=", "np", ".", "argsort", "(", "bottom_k_distances", ")", "\n", "knn_nbrs", "[", "nn", ",", ":", "]", "=", "bottom_k_indices", "[", "sort_indices", "]", "\n", "knn_distances", "[", "nn", ",", ":", "]", "=", "bottom_k_distances", "[", "sort_indices", "]", "\n", "", "triplets", ",", "weights", "=", "generate_triplets_known_knn", "(", "\n", "X", ",", "\n", "knn_nbrs", ",", "\n", "knn_distances", ",", "\n", "n_inliers", ",", "\n", "n_outliers", ",", "\n", "n_random", ",", "\n", "pairwise_dist_matrix", ",", "\n", "distance", ",", "\n", "verbose", ",", "\n", "weight_temp", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "if", "verbose", ":", "\n", "                ", "print", "(", "\"pre-processing\"", ")", "\n", "", "if", "distance", "!=", "\"hamming\"", ":", "\n", "                ", "if", "dim", ">", "_PCA_DIM", "and", "apply_pca", ":", "\n", "                    ", "X", "-=", "np", ".", "mean", "(", "X", ",", "axis", "=", "0", ")", "\n", "X", "=", "TruncatedSVD", "(", "\n", "n_components", "=", "_PCA_DIM", ",", "random_state", "=", "0", "\n", ")", ".", "fit_transform", "(", "X", ")", "\n", "pca_solution", "=", "True", "\n", "if", "verbose", ":", "\n", "                        ", "print", "(", "\"applied PCA\"", ")", "\n", "", "", "else", ":", "\n", "                    ", "X", "-=", "np", ".", "min", "(", "X", ")", "\n", "X", "/=", "np", ".", "max", "(", "X", ")", "\n", "X", "-=", "np", ".", "mean", "(", "X", ",", "axis", "=", "0", ")", "\n", "", "", "triplets", ",", "weights", "=", "generate_triplets", "(", "\n", "X", ",", "n_inliers", ",", "n_outliers", ",", "n_random", ",", "distance", ",", "verbose", ",", "weight_temp", "\n", ")", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "\"sampled triplets\"", ")", "\n", "", "", "", "else", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\"using stored triplets\"", ")", "\n", "\n", "", "", "if", "Yinit", "==", "\"random\"", ":", "\n", "        ", "Y", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "[", "n", ",", "n_dims", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "*", "_INIT_RAND_SCALE", "\n", "", "elif", "not", "Yinit", "or", "Yinit", "==", "\"pca\"", ":", "\n", "        ", "if", "pca_solution", ":", "\n", "            ", "Y", "=", "_INIT_PCA_SCALE", "*", "X", "[", ":", ",", ":", "n_dims", "]", "\n", "", "else", ":", "\n", "            ", "Y", "=", "_INIT_PCA_SCALE", "*", "PCA", "(", "n_components", "=", "n_dims", ")", ".", "fit_transform", "(", "X", ")", ".", "astype", "(", "\n", "np", ".", "float32", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "Y", "=", "Yinit", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "if", "return_seq", ":", "\n", "        ", "Y_all", "=", "np", ".", "zeros", "(", "(", "n", ",", "n_dims", ",", "int", "(", "n_iters", "/", "_RETURN_EVERY", "+", "1", ")", ")", ")", "\n", "Y_all", "[", ":", ",", ":", ",", "0", "]", "=", "Yinit", "\n", "\n", "", "C", "=", "np", ".", "inf", "\n", "tol", "=", "1e-7", "\n", "n_triplets", "=", "float", "(", "triplets", ".", "shape", "[", "0", "]", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"running TriMap with \"", "+", "opt_method", ")", "\n", "", "vel", "=", "np", ".", "zeros_like", "(", "Y", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "opt_method_dict", "[", "opt_method", "]", "==", "2", ":", "\n", "        ", "gain", "=", "np", ".", "ones_like", "(", "Y", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "for", "itr", "in", "range", "(", "n_iters", ")", ":", "\n", "        ", "old_C", "=", "C", "\n", "if", "opt_method_dict", "[", "opt_method", "]", "==", "0", ":", "\n", "            ", "grad", "=", "trimap_grad", "(", "Y", ",", "n_inliers", ",", "n_outliers", ",", "triplets", ",", "weights", ")", "\n", "", "else", ":", "\n", "# momentum parameter", "\n", "            ", "gamma", "=", "_FINAL_MOMENTUM", "if", "itr", ">", "_SWITCH_ITER_MOMENTUM", "else", "_INIT_MOMENTUM", "\n", "grad", "=", "trimap_grad", "(", "\n", "Y", "+", "gamma", "*", "vel", ",", "n_inliers", ",", "n_outliers", ",", "triplets", ",", "weights", "\n", ")", "\n", "", "C", "=", "grad", "[", "-", "1", ",", "0", "]", "/", "n_triplets", "\n", "n_viol", "=", "grad", "[", "-", "1", ",", "1", "]", "\n", "\n", "# update Y", "\n", "if", "opt_method_dict", "[", "opt_method", "]", "<", "2", ":", "\n", "            ", "update_embedding", "(", "Y", ",", "grad", ",", "vel", ",", "lr", ",", "itr", ",", "opt_method_dict", "[", "opt_method", "]", ")", "\n", "", "else", ":", "\n", "            ", "update_embedding_dbd", "(", "Y", ",", "grad", ",", "vel", ",", "gain", ",", "lr", ",", "itr", ")", "\n", "\n", "# update the learning rate", "\n", "", "if", "opt_method_dict", "[", "opt_method", "]", "<", "2", ":", "\n", "            ", "lr", "=", "lr", "*", "1.01", "if", "old_C", ">", "C", "+", "tol", "else", "lr", "*", "0.9", "\n", "", "if", "return_seq", "and", "(", "itr", "+", "1", ")", "%", "_RETURN_EVERY", "==", "0", ":", "\n", "            ", "Y_all", "[", ":", ",", ":", ",", "int", "(", "(", "itr", "+", "1", ")", "/", "_RETURN_EVERY", ")", "]", "=", "Y", "\n", "", "if", "verbose", ":", "\n", "            ", "if", "(", "itr", "+", "1", ")", "%", "_DISP_ITER", "==", "0", ":", "\n", "                ", "print", "(", "\n", "\"Iteration: %4d / %4d, Loss: %3.3f, Violated triplets: %0.4f\"", "\n", "%", "(", "itr", "+", "1", ",", "n_iters", ",", "C", ",", "n_viol", "/", "n_triplets", "*", "100.0", ")", "\n", ")", "\n", "", "", "", "if", "verbose", ":", "\n", "        ", "elapsed", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "print", "(", "\"Elapsed time: %s\"", "%", "(", "elapsed", ")", ")", "\n", "", "if", "return_seq", ":", "\n", "        ", "return", "(", "Y_all", ",", "triplets", ",", "weights", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "Y", ",", "triplets", ",", "weights", ")", "\n", "\n"]]}