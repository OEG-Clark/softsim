{"home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.Schema.__init__": [[52, 55], ["process_sql.Schema._map"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.preprocess.schema.Schema._map"], ["def", "__init__", "(", "self", ",", "schema", ")", ":", "\n", "        ", "self", ".", "_schema", "=", "schema", "\n", "self", ".", "_idMap", "=", "self", ".", "_map", "(", "self", ".", "_schema", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.Schema.schema": [[56, 59], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "schema", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_schema", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.Schema.idMap": [[60, 63], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "idMap", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_idMap", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.Schema._map": [[64, 77], ["schema.items", "key.lower", "key.lower", "val.lower", "val.lower", "key.lower", "key.lower"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], ["", "def", "_map", "(", "self", ",", "schema", ")", ":", "\n", "        ", "idMap", "=", "{", "'*'", ":", "\"__all__\"", "}", "\n", "id", "=", "1", "\n", "for", "key", ",", "vals", "in", "schema", ".", "items", "(", ")", ":", "\n", "            ", "for", "val", "in", "vals", ":", "\n", "                ", "idMap", "[", "key", ".", "lower", "(", ")", "+", "\".\"", "+", "val", ".", "lower", "(", ")", "]", "=", "\"__\"", "+", "key", ".", "lower", "(", ")", "+", "\".\"", "+", "val", ".", "lower", "(", ")", "+", "\"__\"", "\n", "id", "+=", "1", "\n", "\n", "", "", "for", "key", "in", "schema", ":", "\n", "            ", "idMap", "[", "key", ".", "lower", "(", ")", "]", "=", "\"__\"", "+", "key", ".", "lower", "(", ")", "+", "\"__\"", "\n", "id", "+=", "1", "\n", "\n", "", "return", "idMap", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.get_schema": [[79, 101], ["sqlite3.connect", "sqlite3.connect.cursor", "conn.cursor.execute", "str", "conn.cursor.execute", "table[].lower", "conn.cursor.fetchall", "str", "col[].lower", "conn.cursor.fetchall"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.execute", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.execute"], ["", "", "def", "get_schema", "(", "db", ")", ":", "\n", "    ", "\"\"\"\n    Get database's schema, which is a dict with table name as key\n    and list of column names as value\n    :param db: database path\n    :return: schema dict\n    \"\"\"", "\n", "\n", "schema", "=", "{", "}", "\n", "conn", "=", "sqlite3", ".", "connect", "(", "db", ")", "\n", "cursor", "=", "conn", ".", "cursor", "(", ")", "\n", "\n", "# fetch table names", "\n", "cursor", ".", "execute", "(", "\"SELECT name FROM sqlite_master WHERE type='table';\"", ")", "\n", "tables", "=", "[", "str", "(", "table", "[", "0", "]", ".", "lower", "(", ")", ")", "for", "table", "in", "cursor", ".", "fetchall", "(", ")", "]", "\n", "\n", "# fetch table info", "\n", "for", "table", "in", "tables", ":", "\n", "        ", "cursor", ".", "execute", "(", "\"PRAGMA table_info({})\"", ".", "format", "(", "table", ")", ")", "\n", "schema", "[", "table", "]", "=", "[", "str", "(", "col", "[", "1", "]", ".", "lower", "(", ")", ")", "for", "col", "in", "cursor", ".", "fetchall", "(", ")", "]", "\n", "\n", "", "return", "schema", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.get_schema_from_json": [[103, 114], ["open", "json.load", "str", "entry[].lower", "str", "col[].lower"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load"], ["", "def", "get_schema_from_json", "(", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "schema", "=", "{", "}", "\n", "for", "entry", "in", "data", ":", "\n", "        ", "table", "=", "str", "(", "entry", "[", "'table'", "]", ".", "lower", "(", ")", ")", "\n", "cols", "=", "[", "str", "(", "col", "[", "'column_name'", "]", ".", "lower", "(", ")", ")", "for", "col", "in", "entry", "[", "'col_data'", "]", "]", "\n", "schema", "[", "table", "]", "=", "cols", "\n", "\n", "", "return", "schema", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.tokenize": [[116, 148], ["str", "string.replace.replace", "range", "range", "eq_idxs.reverse", "word.lower", "len", "enumerate", "len", "len", "nltk.word_tokenize", "enumerate"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.reverse"], ["", "def", "tokenize", "(", "string", ")", ":", "\n", "    ", "string", "=", "str", "(", "string", ")", "\n", "string", "=", "string", ".", "replace", "(", "\"\\'\"", ",", "\"\\\"\"", ")", "# ensures all string values wrapped by \"\" problem??", "\n", "quote_idxs", "=", "[", "idx", "for", "idx", ",", "char", "in", "enumerate", "(", "string", ")", "if", "char", "==", "'\"'", "]", "\n", "assert", "len", "(", "quote_idxs", ")", "%", "2", "==", "0", ",", "\"Unexpected quote\"", "\n", "\n", "# keep string value as token", "\n", "vals", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "quote_idxs", ")", "-", "1", ",", "-", "1", ",", "-", "2", ")", ":", "\n", "        ", "qidx1", "=", "quote_idxs", "[", "i", "-", "1", "]", "\n", "qidx2", "=", "quote_idxs", "[", "i", "]", "\n", "val", "=", "string", "[", "qidx1", ":", "qidx2", "+", "1", "]", "\n", "key", "=", "\"__val_{}_{}__\"", ".", "format", "(", "qidx1", ",", "qidx2", ")", "\n", "string", "=", "string", "[", ":", "qidx1", "]", "+", "key", "+", "string", "[", "qidx2", "+", "1", ":", "]", "\n", "vals", "[", "key", "]", "=", "val", "\n", "\n", "", "toks", "=", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "word_tokenize", "(", "string", ")", "]", "\n", "# replace with string value token", "\n", "for", "i", "in", "range", "(", "len", "(", "toks", ")", ")", ":", "\n", "        ", "if", "toks", "[", "i", "]", "in", "vals", ":", "\n", "            ", "toks", "[", "i", "]", "=", "vals", "[", "toks", "[", "i", "]", "]", "\n", "\n", "# find if there exists !=, >=, <=", "\n", "", "", "eq_idxs", "=", "[", "idx", "for", "idx", ",", "tok", "in", "enumerate", "(", "toks", ")", "if", "tok", "==", "\"=\"", "]", "\n", "eq_idxs", ".", "reverse", "(", ")", "\n", "prefix", "=", "(", "'!'", ",", "'>'", ",", "'<'", ")", "\n", "for", "eq_idx", "in", "eq_idxs", ":", "\n", "        ", "pre_tok", "=", "toks", "[", "eq_idx", "-", "1", "]", "\n", "if", "pre_tok", "in", "prefix", ":", "\n", "            ", "toks", "=", "toks", "[", ":", "eq_idx", "-", "1", "]", "+", "[", "pre_tok", "+", "\"=\"", "]", "+", "toks", "[", "eq_idx", "+", "1", ":", "]", "\n", "\n", "", "", "return", "toks", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.scan_alias": [[150, 157], ["enumerate"], "function", ["None"], ["", "def", "scan_alias", "(", "toks", ")", ":", "\n", "    ", "\"\"\"Scan the index of 'as' and build the map for all alias\"\"\"", "\n", "as_idxs", "=", "[", "idx", "for", "idx", ",", "tok", "in", "enumerate", "(", "toks", ")", "if", "tok", "==", "'as'", "]", "\n", "alias", "=", "{", "}", "\n", "for", "idx", "in", "as_idxs", ":", "\n", "        ", "alias", "[", "toks", "[", "idx", "+", "1", "]", "]", "=", "toks", "[", "idx", "-", "1", "]", "\n", "", "return", "alias", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.get_tables_with_alias": [[159, 165], ["process_sql.scan_alias"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.scan_alias"], ["", "def", "get_tables_with_alias", "(", "schema", ",", "toks", ")", ":", "\n", "    ", "tables", "=", "scan_alias", "(", "toks", ")", "\n", "for", "key", "in", "schema", ":", "\n", "        ", "assert", "key", "not", "in", "tables", ",", "\"Alias {} has the same name in table\"", ".", "format", "(", "key", ")", "\n", "tables", "[", "key", "]", "=", "key", "\n", "", "return", "tables", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.parse_col": [[167, 189], ["tok.split", "len"], "function", ["None"], ["", "def", "parse_col", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n        :returns next idx, column id\n    \"\"\"", "\n", "tok", "=", "toks", "[", "start_idx", "]", "\n", "if", "tok", "==", "\"*\"", ":", "\n", "        ", "return", "start_idx", "+", "1", ",", "schema", ".", "idMap", "[", "tok", "]", "\n", "\n", "", "if", "'.'", "in", "tok", ":", "# if token is a composite", "\n", "        ", "alias", ",", "col", "=", "tok", ".", "split", "(", "'.'", ")", "\n", "key", "=", "tables_with_alias", "[", "alias", "]", "+", "\".\"", "+", "col", "\n", "return", "start_idx", "+", "1", ",", "schema", ".", "idMap", "[", "key", "]", "\n", "\n", "", "assert", "default_tables", "is", "not", "None", "and", "len", "(", "default_tables", ")", ">", "0", ",", "\"Default tables should not be None or empty\"", "\n", "\n", "for", "alias", "in", "default_tables", ":", "\n", "        ", "table", "=", "tables_with_alias", "[", "alias", "]", "\n", "if", "tok", "in", "schema", ".", "schema", "[", "table", "]", ":", "\n", "            ", "key", "=", "table", "+", "\".\"", "+", "tok", "\n", "return", "start_idx", "+", "1", ",", "schema", ".", "idMap", "[", "key", "]", "\n", "\n", "", "", "assert", "False", ",", "\"Error col: {}\"", ".", "format", "(", "tok", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.parse_col_unit": [[191, 227], ["len", "AGG_OPS.index", "process_sql.parse_col", "AGG_OPS.index", "process_sql.parse_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_col"], ["", "def", "parse_col_unit", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n        :returns next idx, (agg_op id, col_id)\n    \"\"\"", "\n", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "isBlock", "=", "False", "\n", "isDistinct", "=", "False", "\n", "if", "toks", "[", "idx", "]", "==", "'('", ":", "\n", "        ", "isBlock", "=", "True", "\n", "idx", "+=", "1", "\n", "\n", "", "if", "toks", "[", "idx", "]", "in", "AGG_OPS", ":", "\n", "        ", "agg_id", "=", "AGG_OPS", ".", "index", "(", "toks", "[", "idx", "]", ")", "\n", "idx", "+=", "1", "\n", "assert", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "'('", "\n", "idx", "+=", "1", "\n", "if", "toks", "[", "idx", "]", "==", "\"distinct\"", ":", "\n", "            ", "idx", "+=", "1", "\n", "isDistinct", "=", "True", "\n", "", "idx", ",", "col_id", "=", "parse_col", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "assert", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "')'", "\n", "idx", "+=", "1", "\n", "return", "idx", ",", "(", "agg_id", ",", "col_id", ",", "isDistinct", ")", "\n", "\n", "", "if", "toks", "[", "idx", "]", "==", "\"distinct\"", ":", "\n", "        ", "idx", "+=", "1", "\n", "isDistinct", "=", "True", "\n", "", "agg_id", "=", "AGG_OPS", ".", "index", "(", "\"none\"", ")", "\n", "idx", ",", "col_id", "=", "parse_col", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "\n", "if", "isBlock", ":", "\n", "        ", "assert", "toks", "[", "idx", "]", "==", "')'", "\n", "idx", "+=", "1", "# skip ')'", "\n", "\n", "", "return", "idx", ",", "(", "agg_id", ",", "col_id", ",", "isDistinct", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.parse_val_unit": [[229, 254], ["len", "UNIT_OPS.index", "process_sql.parse_col_unit", "UNIT_OPS.index", "process_sql.parse_col_unit"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_col_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_col_unit"], ["", "def", "parse_val_unit", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", "=", "None", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "isBlock", "=", "False", "\n", "if", "toks", "[", "idx", "]", "==", "'('", ":", "\n", "        ", "isBlock", "=", "True", "\n", "idx", "+=", "1", "\n", "\n", "", "col_unit1", "=", "None", "\n", "col_unit2", "=", "None", "\n", "unit_op", "=", "UNIT_OPS", ".", "index", "(", "'none'", ")", "\n", "\n", "idx", ",", "col_unit1", "=", "parse_col_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "in", "UNIT_OPS", ":", "\n", "        ", "unit_op", "=", "UNIT_OPS", ".", "index", "(", "toks", "[", "idx", "]", ")", "\n", "idx", "+=", "1", "\n", "idx", ",", "col_unit2", "=", "parse_col_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "\n", "", "if", "isBlock", ":", "\n", "        ", "assert", "toks", "[", "idx", "]", "==", "')'", "\n", "if", "toks", "[", "idx", "]", "==", "')'", ":", "\n", "# skip ')'", "\n", "             ", "idx", "+=", "1", "\n", "\n", "", "", "return", "idx", ",", "(", "unit_op", ",", "col_unit1", ",", "col_unit2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.parse_table_unit": [[256, 278], ["len"], "function", ["None"], ["", "def", "parse_table_unit", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ")", ":", "\n", "    ", "\"\"\"\n        :returns next idx, table id, table name\n    \"\"\"", "\n", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "# =============================================================================", "\n", "#     print(tables_with_alias, '\\n' * 2)", "\n", "#     print(tables_with_alias[toks[idx]], '\\n' * 2)", "\n", "#     print(toks, idx, '\\n'*4)", "\n", "# =============================================================================", "\n", "key", "=", "tables_with_alias", "[", "toks", "[", "idx", "]", "]", "\n", "\n", "if", "idx", "+", "1", "<", "len_", "and", "toks", "[", "idx", "+", "1", "]", "==", "\"as\"", ":", "\n", "        ", "idx", "+=", "3", "\n", "if", "toks", "[", "idx", "]", "==", "\",\"", ":", "\n", "# multiple aliases exist", "\n", "            ", "idx", "+=", "1", "\n", "", "", "else", ":", "\n", "        ", "idx", "+=", "1", "\n", "\n", "", "return", "idx", ",", "schema", ".", "idMap", "[", "key", "]", ",", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.parse_value": [[280, 313], ["len", "process_sql.parse_sql", "float", "process_sql.parse_col_unit"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_sql", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_col_unit"], ["", "def", "parse_value", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", "=", "None", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "\n", "isBlock", "=", "False", "\n", "if", "toks", "[", "idx", "]", "==", "'('", ":", "\n", "        ", "isBlock", "=", "True", "\n", "idx", "+=", "1", "\n", "\n", "", "if", "toks", "[", "idx", "]", "==", "'select'", ":", "\n", "        ", "idx", ",", "val", "=", "parse_sql", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ")", "\n", "", "elif", "\"\\\"\"", "in", "toks", "[", "idx", "]", ":", "# token is a string value", "\n", "        ", "val", "=", "toks", "[", "idx", "]", "\n", "idx", "+=", "1", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "val", "=", "float", "(", "toks", "[", "idx", "]", ")", "\n", "idx", "+=", "1", "\n", "", "except", ":", "\n", "            ", "end_idx", "=", "idx", "\n", "while", "end_idx", "<", "len_", "and", "toks", "[", "end_idx", "]", "!=", "','", "and", "toks", "[", "end_idx", "]", "!=", "')'", "and", "toks", "[", "end_idx", "]", "!=", "'and'", "and", "toks", "[", "end_idx", "]", "not", "in", "CLAUSE_KEYWORDS", "and", "toks", "[", "end_idx", "]", "not", "in", "JOIN_KEYWORDS", ":", "\n", "                    ", "end_idx", "+=", "1", "\n", "\n", "", "idx", ",", "val", "=", "parse_col_unit", "(", "toks", "[", "start_idx", ":", "end_idx", "]", ",", "0", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "idx", "=", "end_idx", "\n", "\n", "", "", "if", "isBlock", ":", "\n", "# assert toks[idx] == ')'", "\n", "        ", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "')'", ":", "\n", "            ", "idx", "+=", "1", "\n", "\n", "", "", "return", "idx", ",", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.parse_condition": [[315, 360], ["len", "process_sql.parse_val_unit", "WHERE_OPS.index", "conds.append", "process_sql.parse_condition", "conds.append", "conds.append", "WHERE_OPS.index", "process_sql.parse_value", "process_sql.parse_value", "process_sql.parse_value"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_val_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_condition", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_value", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_value", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_value"], ["", "def", "parse_condition", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", "=", "None", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "conds", "=", "[", "]", "\n", "while", "idx", "<", "len_", ":", "\n", "\n", "        ", "if", "toks", "[", "idx", "]", "==", "'('", ":", "\n", "            ", "idx", ",", "subcond", "=", "parse_condition", "(", "toks", ",", "idx", "+", "1", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "conds", ".", "append", "(", "subcond", ")", "\n", "continue", "\n", "\n", "", "if", "toks", "[", "idx", "]", "==", "\")\"", ":", "\n", "            ", "if", "toks", "[", "idx", "+", "1", "]", "!=", "\";\"", ":", "\n", "                ", "idx", "+=", "1", "\n", "", "break", "\n", "\n", "", "if", "idx", ">=", "len_", "or", "(", "idx", "<", "len_", "and", "(", "toks", "[", "idx", "]", "in", "CLAUSE_KEYWORDS", "or", "toks", "[", "idx", "]", "==", "\";\"", "or", "toks", "[", "idx", "]", "in", "JOIN_KEYWORDS", ")", ")", ":", "\n", "            ", "break", "\n", "\n", "", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "in", "COND_OPS", ":", "\n", "            ", "conds", ".", "append", "(", "toks", "[", "idx", "]", ")", "\n", "idx", "+=", "1", "# skip and/or", "\n", "# continue", "\n", "", "idx", ",", "val_unit", "=", "parse_val_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "not_op", "=", "False", "\n", "if", "toks", "[", "idx", "]", "==", "'not'", ":", "\n", "            ", "not_op", "=", "True", "\n", "idx", "+=", "1", "\n", "\n", "", "assert", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "in", "WHERE_OPS", ",", "\"Error condition: idx: {}, tok: {}\"", ".", "format", "(", "idx", ",", "toks", "[", "idx", "]", ")", "\n", "op_id", "=", "WHERE_OPS", ".", "index", "(", "toks", "[", "idx", "]", ")", "\n", "idx", "+=", "1", "\n", "val1", "=", "val2", "=", "None", "\n", "if", "op_id", "==", "WHERE_OPS", ".", "index", "(", "'between'", ")", ":", "# between..and... special case: dual values", "\n", "            ", "idx", ",", "val1", "=", "parse_value", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "assert", "toks", "[", "idx", "]", "==", "'and'", "\n", "idx", "+=", "1", "\n", "idx", ",", "val2", "=", "parse_value", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "", "else", ":", "# normal case: single value", "\n", "            ", "idx", ",", "val1", "=", "parse_value", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "val2", "=", "None", "\n", "\n", "", "conds", ".", "append", "(", "(", "not_op", ",", "op_id", ",", "val_unit", ",", "val1", ",", "val2", ")", ")", "\n", "\n", "", "return", "idx", ",", "conds", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.parse_select": [[362, 384], ["len", "AGG_OPS.index", "process_sql.parse_val_unit", "val_units.append", "AGG_OPS.index"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_val_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["", "def", "parse_select", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", "=", "None", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "\n", "assert", "toks", "[", "idx", "]", "==", "'select'", ",", "\"'select' not found\"", "\n", "idx", "+=", "1", "\n", "isDistinct", "=", "False", "\n", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "'distinct'", ":", "\n", "        ", "idx", "+=", "1", "\n", "isDistinct", "=", "True", "\n", "", "val_units", "=", "[", "]", "\n", "while", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "not", "in", "CLAUSE_KEYWORDS", ":", "\n", "        ", "agg_id", "=", "AGG_OPS", ".", "index", "(", "\"none\"", ")", "\n", "if", "toks", "[", "idx", "]", "in", "AGG_OPS", ":", "\n", "            ", "agg_id", "=", "AGG_OPS", ".", "index", "(", "toks", "[", "idx", "]", ")", "\n", "idx", "+=", "1", "\n", "", "idx", ",", "val_unit", "=", "parse_val_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "val_units", ".", "append", "(", "(", "agg_id", ",", "val_unit", ")", ")", "\n", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "','", ":", "\n", "            ", "idx", "+=", "1", "# skip ','", "\n", "\n", "", "", "return", "idx", ",", "(", "isDistinct", ",", "val_units", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.parse_from": [[386, 426], ["len", "toks.index", "process_sql.parse_sql", "table_units.append", "process_sql.parse_table_unit", "table_units.append", "default_tables.append", "process_sql.parse_condition", "conds.extend", "len", "conds.append"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_sql", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_table_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_condition", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "parse_from", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ")", ":", "\n", "    ", "\"\"\"\n    Assume in the from clause, all table units are combined with join\n    \"\"\"", "\n", "assert", "'from'", "in", "toks", "[", "start_idx", ":", "]", ",", "\"'from' not found\"", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "idx", "=", "toks", ".", "index", "(", "'from'", ",", "start_idx", ")", "+", "1", "\n", "default_tables", "=", "[", "]", "\n", "table_units", "=", "[", "]", "\n", "conds", "=", "[", "]", "\n", "while", "idx", "<", "len_", ":", "\n", "        ", "isBlock", "=", "False", "\n", "if", "toks", "[", "idx", "]", "==", "'('", ":", "\n", "            ", "isBlock", "=", "True", "\n", "idx", "+=", "1", "\n", "\n", "", "if", "toks", "[", "idx", "]", "==", "'select'", ":", "\n", "            ", "idx", ",", "sql", "=", "parse_sql", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ")", "\n", "table_units", ".", "append", "(", "(", "TABLE_TYPE", "[", "'sql'", "]", ",", "sql", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "'join'", ":", "\n", "                ", "idx", "+=", "1", "# skip join", "\n", "", "idx", ",", "table_unit", ",", "table_name", "=", "parse_table_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ")", "\n", "table_units", ".", "append", "(", "(", "TABLE_TYPE", "[", "'table_unit'", "]", ",", "table_unit", ")", ")", "\n", "default_tables", ".", "append", "(", "table_name", ")", "\n", "", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "\"on\"", ":", "\n", "            ", "idx", "+=", "1", "# skip on", "\n", "idx", ",", "this_conds", "=", "parse_condition", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "if", "len", "(", "conds", ")", ">", "0", ":", "\n", "                ", "conds", ".", "append", "(", "'and'", ")", "\n", "", "conds", ".", "extend", "(", "this_conds", ")", "\n", "\n", "", "if", "isBlock", ":", "\n", "# assert toks[idx] == ')'", "\n", "            ", "if", "toks", "[", "idx", "]", "==", "\")\"", ":", "\n", "                ", "idx", "+=", "1", "\n", "", "", "if", "idx", "<", "len_", "and", "(", "toks", "[", "idx", "]", "in", "CLAUSE_KEYWORDS", "or", "toks", "[", "idx", "]", "in", "(", "\")\"", ",", "\";\"", ")", ")", ":", "\n", "            ", "break", "\n", "\n", "", "", "return", "idx", ",", "table_units", ",", "conds", ",", "default_tables", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.parse_where": [[428, 438], ["len", "process_sql.parse_condition"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_condition"], ["", "def", "parse_where", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "\n", "if", "idx", ">=", "len_", "or", "toks", "[", "idx", "]", "!=", "'where'", ":", "\n", "        ", "return", "idx", ",", "[", "]", "\n", "\n", "", "idx", "+=", "1", "\n", "idx", ",", "conds", "=", "parse_condition", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "return", "idx", ",", "conds", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.parse_group_by": [[440, 461], ["len", "process_sql.parse_col_unit", "col_units.append"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_col_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "parse_group_by", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "col_units", "=", "[", "]", "\n", "\n", "if", "idx", ">=", "len_", "or", "toks", "[", "idx", "]", "!=", "'group'", ":", "\n", "        ", "return", "idx", ",", "col_units", "\n", "\n", "", "idx", "+=", "1", "\n", "assert", "toks", "[", "idx", "]", "==", "'by'", "\n", "idx", "+=", "1", "\n", "\n", "while", "idx", "<", "len_", "and", "not", "(", "toks", "[", "idx", "]", "in", "CLAUSE_KEYWORDS", "or", "toks", "[", "idx", "]", "in", "(", "\")\"", ",", "\";\"", ")", ")", ":", "\n", "        ", "idx", ",", "col_unit", "=", "parse_col_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "col_units", ".", "append", "(", "col_unit", ")", "\n", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "','", ":", "\n", "            ", "idx", "+=", "1", "# skip ','", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "", "return", "idx", ",", "col_units", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.parse_order_by": [[463, 488], ["len", "process_sql.parse_val_unit", "val_units.append"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_val_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "parse_order_by", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "val_units", "=", "[", "]", "\n", "order_type", "=", "'asc'", "# default type is 'asc'", "\n", "\n", "if", "idx", ">=", "len_", "or", "toks", "[", "idx", "]", "!=", "'order'", ":", "\n", "        ", "return", "idx", ",", "val_units", "\n", "\n", "", "idx", "+=", "1", "\n", "assert", "toks", "[", "idx", "]", "==", "'by'", "\n", "idx", "+=", "1", "\n", "\n", "while", "idx", "<", "len_", "and", "not", "(", "toks", "[", "idx", "]", "in", "CLAUSE_KEYWORDS", "or", "toks", "[", "idx", "]", "in", "(", "\")\"", ",", "\";\"", ")", ")", ":", "\n", "        ", "idx", ",", "val_unit", "=", "parse_val_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "val_units", ".", "append", "(", "val_unit", ")", "\n", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "in", "ORDER_OPS", ":", "\n", "            ", "order_type", "=", "toks", "[", "idx", "]", "\n", "idx", "+=", "1", "\n", "", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "','", ":", "\n", "            ", "idx", "+=", "1", "# skip ','", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "", "return", "idx", ",", "(", "order_type", ",", "val_units", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.parse_having": [[490, 500], ["len", "process_sql.parse_condition"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_condition"], ["", "def", "parse_having", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "\n", "if", "idx", ">=", "len_", "or", "toks", "[", "idx", "]", "!=", "'having'", ":", "\n", "        ", "return", "idx", ",", "[", "]", "\n", "\n", "", "idx", "+=", "1", "\n", "idx", ",", "conds", "=", "parse_condition", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "return", "idx", ",", "conds", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.parse_limit": [[502, 511], ["len", "int"], "function", ["None"], ["", "def", "parse_limit", "(", "toks", ",", "start_idx", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "\n", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "'limit'", ":", "\n", "        ", "idx", "+=", "2", "\n", "return", "idx", ",", "int", "(", "toks", "[", "idx", "-", "1", "]", ")", "\n", "\n", "", "return", "idx", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.parse_sql": [[513, 560], ["len", "process_sql.parse_from", "process_sql.parse_select", "process_sql.parse_where", "process_sql.parse_group_by", "process_sql.parse_having", "process_sql.parse_order_by", "process_sql.parse_limit", "process_sql.skip_semicolon", "process_sql.skip_semicolon", "process_sql.parse_sql"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_from", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_select", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_where", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_group_by", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_having", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_order_by", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_limit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.skip_semicolon", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.skip_semicolon", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_sql"], ["", "def", "parse_sql", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ")", ":", "\n", "    ", "isBlock", "=", "False", "# indicate whether this is a block of sql/sub-sql", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "idx", "=", "start_idx", "\n", "\n", "sql", "=", "{", "}", "\n", "if", "toks", "[", "idx", "]", "==", "'('", ":", "\n", "        ", "isBlock", "=", "True", "\n", "idx", "+=", "1", "\n", "# parse from clause in order to get default tables", "\n", "", "from_end_idx", ",", "table_units", ",", "conds", ",", "default_tables", "=", "parse_from", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ")", "\n", "sql", "[", "'from'", "]", "=", "{", "'table_units'", ":", "table_units", ",", "'conds'", ":", "conds", "}", "\n", "# select clause", "\n", "_", ",", "select_col_units", "=", "parse_select", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "idx", "=", "from_end_idx", "\n", "sql", "[", "'select'", "]", "=", "select_col_units", "\n", "# where clause", "\n", "idx", ",", "where_conds", "=", "parse_where", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "sql", "[", "'where'", "]", "=", "where_conds", "\n", "# group by clause", "\n", "idx", ",", "group_col_units", "=", "parse_group_by", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "sql", "[", "'groupBy'", "]", "=", "group_col_units", "\n", "# having clause", "\n", "idx", ",", "having_conds", "=", "parse_having", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "sql", "[", "'having'", "]", "=", "having_conds", "\n", "# order by clause", "\n", "idx", ",", "order_col_units", "=", "parse_order_by", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "sql", "[", "'orderBy'", "]", "=", "order_col_units", "\n", "# limit clause", "\n", "idx", ",", "limit_val", "=", "parse_limit", "(", "toks", ",", "idx", ")", "\n", "sql", "[", "'limit'", "]", "=", "limit_val", "\n", "\n", "idx", "=", "skip_semicolon", "(", "toks", ",", "idx", ")", "\n", "if", "isBlock", ":", "\n", "        ", "assert", "toks", "[", "idx", "]", "==", "')'", "\n", "idx", "+=", "1", "# skip ')'", "\n", "", "idx", "=", "skip_semicolon", "(", "toks", ",", "idx", ")", "\n", "\n", "# intersect/union/except clause", "\n", "for", "op", "in", "SQL_OPS", ":", "# initialize IUE", "\n", "        ", "sql", "[", "op", "]", "=", "None", "\n", "", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "in", "SQL_OPS", ":", "\n", "        ", "sql_op", "=", "toks", "[", "idx", "]", "\n", "idx", "+=", "1", "\n", "idx", ",", "IUE_sql", "=", "parse_sql", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ")", "\n", "sql", "[", "sql_op", "]", "=", "IUE_sql", "\n", "", "return", "idx", ",", "sql", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.load_data": [[562, 566], ["open", "json.load"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load"], ["", "def", "load_data", "(", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.preprocess": [[568, 574], ["sql.replace.replace", "sql.replace.replace", "sql.replace.replace"], "function", ["None"], ["", "def", "preprocess", "(", "sql", ")", ":", "\n", "# inner join is the same as join", "\n", "    ", "sql", "=", "sql", ".", "replace", "(", "\"inner join\"", ",", "\"join\"", ")", "\n", "sql", "=", "sql", ".", "replace", "(", "\"<>\"", ",", "\"!=\"", ")", "\n", "sql", "=", "sql", ".", "replace", "(", "\"count( 1 )\"", ",", "\"count( * )\"", ")", "\n", "return", "sql", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.get_sql": [[576, 583], ["process_sql.preprocess", "process_sql.tokenize", "process_sql.get_tables_with_alias", "process_sql.parse_sql"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.preprocess", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEncPreproc.tokenize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.get_tables_with_alias", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_sql"], ["", "def", "get_sql", "(", "schema", ",", "query", ")", ":", "\n", "    ", "query", "=", "preprocess", "(", "query", ")", "\n", "toks", "=", "tokenize", "(", "query", ")", "\n", "tables_with_alias", "=", "get_tables_with_alias", "(", "schema", ".", "schema", ",", "toks", ")", "\n", "_", ",", "sql", "=", "parse_sql", "(", "toks", ",", "0", ",", "tables_with_alias", ",", "schema", ")", "\n", "\n", "return", "sql", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.process_sql.skip_semicolon": [[585, 590], ["len"], "function", ["None"], ["", "def", "skip_semicolon", "(", "toks", ",", "start_idx", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "while", "idx", "<", "len", "(", "toks", ")", "and", "toks", "[", "idx", "]", "==", "\";\"", ":", "\n", "        ", "idx", "+=", "1", "\n", "", "return", "idx", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.schema.Schema.__init__": [[8, 12], ["schema.Schema._map"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.preprocess.schema.Schema._map"], ["def", "__init__", "(", "self", ",", "schema", ",", "table", ")", ":", "\n", "        ", "self", ".", "_schema", "=", "schema", "\n", "self", ".", "_table", "=", "table", "\n", "self", ".", "_idMap", "=", "self", ".", "_map", "(", "self", ".", "_schema", ",", "self", ".", "_table", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.schema.Schema.schema": [[13, 16], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "schema", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_schema", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.schema.Schema.idMap": [[17, 20], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "idMap", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_idMap", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.schema.Schema._map": [[21, 39], ["enumerate", "enumerate", "tab.lower", "table_names_original[].lower", "col.lower"], "methods", ["None"], ["", "def", "_map", "(", "self", ",", "schema", ",", "table", ")", ":", "\n", "        ", "column_names_original", "=", "table", "[", "'column_names_original'", "]", "\n", "table_names_original", "=", "table", "[", "'table_names_original'", "]", "\n", "#print 'column_names_original: ', column_names_original", "\n", "#print 'table_names_original: ', table_names_original", "\n", "for", "i", ",", "(", "tab_id", ",", "col", ")", "in", "enumerate", "(", "column_names_original", ")", ":", "\n", "            ", "if", "tab_id", "==", "-", "1", ":", "\n", "                ", "idMap", "=", "{", "'*'", ":", "i", "}", "\n", "", "else", ":", "\n", "                ", "key", "=", "table_names_original", "[", "tab_id", "]", ".", "lower", "(", ")", "\n", "val", "=", "col", ".", "lower", "(", ")", "\n", "idMap", "[", "key", "+", "\".\"", "+", "val", "]", "=", "i", "\n", "\n", "", "", "for", "i", ",", "tab", "in", "enumerate", "(", "table_names_original", ")", ":", "\n", "            ", "key", "=", "tab", ".", "lower", "(", ")", "\n", "idMap", "[", "key", "]", "=", "i", "\n", "\n", "", "return", "idMap", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.schema.get_schemas_from_json": [[40, 60], ["open", "json.load", "enumerate", "str", "tabn.lower", "str", "col.lower"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load"], ["", "", "def", "get_schemas_from_json", "(", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "db_names", "=", "[", "db", "[", "'db_id'", "]", "for", "db", "in", "data", "]", "\n", "\n", "tables", "=", "{", "}", "\n", "schemas", "=", "{", "}", "\n", "for", "db", "in", "data", ":", "\n", "        ", "db_id", "=", "db", "[", "'db_id'", "]", "\n", "schema", "=", "{", "}", "#{'table': [col.lower, ..., ]} * -> __all__", "\n", "column_names_original", "=", "db", "[", "'column_names_original'", "]", "\n", "table_names_original", "=", "db", "[", "'table_names_original'", "]", "\n", "tables", "[", "db_id", "]", "=", "{", "'column_names_original'", ":", "column_names_original", ",", "'table_names_original'", ":", "table_names_original", "}", "\n", "for", "i", ",", "tabn", "in", "enumerate", "(", "table_names_original", ")", ":", "\n", "            ", "table", "=", "str", "(", "tabn", ".", "lower", "(", ")", ")", "\n", "cols", "=", "[", "str", "(", "col", ".", "lower", "(", ")", ")", "for", "td", ",", "col", "in", "column_names_original", "if", "td", "==", "i", "]", "\n", "schema", "[", "table", "]", "=", "cols", "\n", "", "schemas", "[", "db_id", "]", "=", "schema", "\n", "\n", "", "return", "schemas", ",", "db_names", ",", "tables", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.Evaluator.__init__": [[363, 387], ["evaluation.Evaluator.kmaps.keys", "os.path.join", "third_party.ssp.process_sql.Schema", "third_party.ssp.process_sql.get_schema"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.get_schema"], ["def", "__init__", "(", "self", ",", "db_dir", ",", "kmaps", ",", "etype", ")", ":", "\n", "        ", "self", ".", "db_dir", "=", "db_dir", "\n", "self", ".", "kmaps", "=", "kmaps", "\n", "self", ".", "etype", "=", "etype", "\n", "\n", "self", ".", "db_paths", "=", "{", "}", "\n", "self", ".", "schemas", "=", "{", "}", "\n", "for", "db_name", "in", "self", ".", "kmaps", ".", "keys", "(", ")", ":", "\n", "            ", "db_path", "=", "os", ".", "path", ".", "join", "(", "db_dir", ",", "db_name", ",", "db_name", "+", "'.sqlite'", ")", "\n", "self", ".", "db_paths", "[", "db_name", "]", "=", "db_path", "\n", "self", ".", "schemas", "[", "db_name", "]", "=", "Schema", "(", "get_schema", "(", "db_path", ")", ")", "\n", "\n", "", "self", ".", "scores", "=", "{", "\n", "level", ":", "{", "\n", "'count'", ":", "0", ",", "\n", "'partial'", ":", "{", "\n", "type_", ":", "{", "'acc'", ":", "0.", ",", "'rec'", ":", "0.", ",", "'f1'", ":", "0.", ",", "'acc_count'", ":", "0", ",", "'rec_count'", ":", "0", "}", "\n", "for", "type_", "in", "PARTIAL_TYPES", "\n", "}", ",", "\n", "'exact'", ":", "0.", ",", "\n", "'exec'", ":", "0", ",", "\n", "'empty_sql'", ":", "0", ",", "\n", "}", "\n", "for", "level", "in", "LEVELS", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.Evaluator.eval_hardness": [[389, 406], ["evaluation.count_component1", "evaluation.count_component2", "evaluation.count_others"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_component1", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_component2", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_others"], ["", "@", "staticmethod", "\n", "def", "eval_hardness", "(", "sql", ")", ":", "\n", "        ", "count_comp1_", "=", "count_component1", "(", "sql", ")", "\n", "count_comp2_", "=", "count_component2", "(", "sql", ")", "\n", "count_others_", "=", "count_others", "(", "sql", ")", "\n", "\n", "if", "count_comp1_", "<=", "1", "and", "count_others_", "==", "0", "and", "count_comp2_", "==", "0", ":", "\n", "            ", "return", "\"easy\"", "\n", "", "elif", "(", "count_others_", "<=", "2", "and", "count_comp1_", "<=", "1", "and", "count_comp2_", "==", "0", ")", "or", "(", "count_comp1_", "<=", "2", "and", "count_others_", "<", "2", "and", "count_comp2_", "==", "0", ")", ":", "\n", "            ", "return", "\"medium\"", "\n", "", "elif", "(", "count_others_", ">", "2", "and", "count_comp1_", "<=", "2", "and", "count_comp2_", "==", "0", ")", "or", "(", "2", "<", "count_comp1_", "<=", "3", "and", "count_others_", "<=", "2", "and", "count_comp2_", "==", "0", ")", "or", "(", "count_comp1_", "<=", "1", "and", "count_others_", "==", "0", "and", "count_comp2_", "<=", "1", ")", ":", "\n", "            ", "return", "\"hard\"", "\n", "", "else", ":", "\n", "            ", "return", "\"extra\"", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.Evaluator.eval_exact_match": [[407, 417], ["list", "partial_scores.items", "len", "sorted", "sorted"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], ["", "", "@", "classmethod", "\n", "def", "eval_exact_match", "(", "cls", ",", "pred", ",", "label", ",", "partial_scores", ")", ":", "\n", "        ", "for", "_", ",", "score", "in", "list", "(", "partial_scores", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "score", "[", "'f1'", "]", "!=", "1", ":", "\n", "                ", "return", "0", "\n", "", "", "if", "len", "(", "label", "[", "'from'", "]", "[", "'table_units'", "]", ")", ">", "0", ":", "\n", "            ", "label_tables", "=", "sorted", "(", "label", "[", "'from'", "]", "[", "'table_units'", "]", ")", "\n", "pred_tables", "=", "sorted", "(", "pred", "[", "'from'", "]", "[", "'table_units'", "]", ")", "\n", "return", "label_tables", "==", "pred_tables", "\n", "", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.Evaluator.eval_partial_match": [[418, 459], ["evaluation.eval_sel", "evaluation.get_scores", "evaluation.get_scores", "evaluation.eval_where", "evaluation.get_scores", "evaluation.get_scores", "evaluation.eval_group", "evaluation.get_scores", "evaluation.eval_having", "evaluation.get_scores", "evaluation.eval_order", "evaluation.get_scores", "evaluation.eval_and_or", "evaluation.get_scores", "evaluation.eval_IUEN", "evaluation.get_scores", "evaluation.eval_keywords", "evaluation.get_scores"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_sel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_where", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_group", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_having", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_order", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_and_or", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_IUEN", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_keywords", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores"], ["", "@", "classmethod", "\n", "def", "eval_partial_match", "(", "cls", ",", "pred", ",", "label", ")", ":", "\n", "        ", "res", "=", "{", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", ",", "cnt_wo_agg", "=", "eval_sel", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'select'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt_wo_agg", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'select(no AGG)'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", ",", "cnt_wo_agg", "=", "eval_where", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'where'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt_wo_agg", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'where(no OP)'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_group", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'group(no Having)'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_having", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'group'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_order", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'order'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_and_or", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'and/or'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_IUEN", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'IUEN'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_keywords", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'keywords'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.Evaluator.evaluate_one_by_exec_only": [[460, 503], ["sqlite3.connect", "sqlite3.connect.cursor", "timeout_decorator.timeout", "evaluation.Evaluator.evaluate_one_by_exec_only._execute"], "methods", ["None"], ["", "def", "evaluate_one_by_exec_only", "(", "self", ",", "db_name", ",", "gold", ",", "predicted", ")", ":", "\n", "        ", "conn", "=", "sqlite3", ".", "connect", "(", "self", ".", "db_paths", "[", "db_name", "]", ")", "\n", "conn", ".", "text_factory", "=", "str", "#handle encoding errors", "\n", "cursor", "=", "conn", ".", "cursor", "(", ")", "\n", "\n", "@", "timeout_decorator", ".", "timeout", "(", "10", ",", "use_signals", "=", "False", ")", "\n", "def", "__inner_execute", "(", "query_str", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "cursor", ".", "execute", "(", "query_str", ")", "\n", "ret", "=", "cursor", ".", "fetchall", "(", ")", "\n", "", "except", ":", "\n", "                ", "ret", "=", "None", "\n", "", "return", "ret", "\n", "\n", "", "def", "_execute", "(", "query_str", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "ret", "=", "__inner_execute", "(", "query_str", ")", "\n", "return", "ret", "\n", "", "except", "timeout_decorator", ".", "TimeoutError", "as", "e", ":", "\n", "                ", "print", "(", "\"Execution Timeout\"", ")", "\n", "return", "None", "\n", "\n", "", "", "g_denotation", "=", "_execute", "(", "gold", ")", "\n", "p_denotation", "=", "_execute", "(", "predicted", ")", "\n", "\n", "if", "g_denotation", "is", "None", ":", "\n", "            ", "print", "(", "\"Gold SQL Execution Error\"", ")", "\n", "\n", "", "if", "g_denotation", "is", "None", "or", "len", "(", "g_denotation", ")", "==", "0", ":", "\n", "            ", "emptiness_flag", "=", "True", "\n", "self", ".", "scores", "[", "'all'", "]", "[", "'empty_sql'", "]", "+=", "1.0", "\n", "", "else", ":", "\n", "            ", "emptiness_flag", "=", "False", "\n", "\n", "", "if", "g_denotation", "==", "p_denotation", ":", "\n", "            ", "exe_flag", "=", "True", "\n", "", "else", ":", "\n", "            ", "exe_flag", "=", "False", "\n", "\n", "", "self", ".", "scores", "[", "\"all\"", "]", "[", "\"count\"", "]", "+=", "1", "\n", "if", "exe_flag", ":", "\n", "            ", "self", ".", "scores", "[", "'all'", "]", "[", "'exec'", "]", "+=", "1.0", "\n", "", "return", "{", "\"execution\"", ":", "exe_flag", ",", "\"predicted\"", ":", "predicted", ",", "\"gold\"", ":", "gold", ",", "\"empty_return\"", ":", "emptiness_flag", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.Evaluator.evaluate_one": [[504, 588], ["third_party.ssp.process_sql.get_sql", "evaluation.Evaluator.eval_hardness", "evaluation.build_valid_col_units", "evaluation.rebuild_sql_val", "evaluation.rebuild_sql_col", "evaluation.build_valid_col_units", "evaluation.rebuild_sql_val", "evaluation.rebuild_sql_col", "third_party.ssp.process_sql.get_sql", "evaluation.eval_exec_match", "evaluation.Evaluator.eval_partial_match", "evaluation.Evaluator.eval_exact_match"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.get_sql", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.eval_hardness", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.build_valid_col_units", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.build_valid_col_units", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.get_sql", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_exec_match", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.eval_partial_match", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.eval_exact_match"], ["", "def", "evaluate_one", "(", "self", ",", "db_name", ",", "gold", ",", "predicted", ")", ":", "\n", "        ", "schema", "=", "self", ".", "schemas", "[", "db_name", "]", "\n", "g_sql", "=", "get_sql", "(", "schema", ",", "gold", ")", "\n", "hardness", "=", "self", ".", "eval_hardness", "(", "g_sql", ")", "\n", "self", ".", "scores", "[", "hardness", "]", "[", "'count'", "]", "+=", "1", "\n", "self", ".", "scores", "[", "'all'", "]", "[", "'count'", "]", "+=", "1", "\n", "\n", "parse_error", "=", "False", "\n", "try", ":", "\n", "            ", "p_sql", "=", "get_sql", "(", "schema", ",", "predicted", ")", "\n", "", "except", ":", "\n", "# If p_sql is not valid, then we will use an empty sql to evaluate with the correct sql", "\n", "            ", "p_sql", "=", "{", "\n", "\"except\"", ":", "None", ",", "\n", "\"from\"", ":", "{", "\n", "\"conds\"", ":", "[", "]", ",", "\n", "\"table_units\"", ":", "[", "]", "\n", "}", ",", "\n", "\"groupBy\"", ":", "[", "]", ",", "\n", "\"having\"", ":", "[", "]", ",", "\n", "\"intersect\"", ":", "None", ",", "\n", "\"limit\"", ":", "None", ",", "\n", "\"orderBy\"", ":", "[", "]", ",", "\n", "\"select\"", ":", "[", "\n", "False", ",", "\n", "[", "]", "\n", "]", ",", "\n", "\"union\"", ":", "None", ",", "\n", "\"where\"", ":", "[", "]", "\n", "}", "\n", "\n", "# TODO fix", "\n", "parse_error", "=", "True", "\n", "\n", "# rebuild sql for value evaluation", "\n", "", "kmap", "=", "self", ".", "kmaps", "[", "db_name", "]", "\n", "g_valid_col_units", "=", "build_valid_col_units", "(", "g_sql", "[", "'from'", "]", "[", "'table_units'", "]", ",", "schema", ")", "\n", "g_sql", "=", "rebuild_sql_val", "(", "g_sql", ")", "\n", "g_sql", "=", "rebuild_sql_col", "(", "g_valid_col_units", ",", "g_sql", ",", "kmap", ")", "\n", "p_valid_col_units", "=", "build_valid_col_units", "(", "p_sql", "[", "'from'", "]", "[", "'table_units'", "]", ",", "schema", ")", "\n", "p_sql", "=", "rebuild_sql_val", "(", "p_sql", ")", "\n", "p_sql", "=", "rebuild_sql_col", "(", "p_valid_col_units", ",", "p_sql", ",", "kmap", ")", "\n", "\n", "if", "self", ".", "etype", "in", "[", "\"all\"", ",", "\"exec\"", "]", ":", "\n", "# added by bailin", "\n", "            ", "exe_flag", "=", "eval_exec_match", "(", "self", ".", "db_paths", "[", "db_name", "]", ",", "predicted", ",", "gold", ",", "p_sql", ",", "g_sql", ")", "\n", "if", "exe_flag", ":", "\n", "                ", "self", ".", "scores", "[", "hardness", "]", "[", "'exec'", "]", "+=", "1.0", "\n", "self", ".", "scores", "[", "'all'", "]", "[", "'exec'", "]", "+=", "1.0", "\n", "", "", "else", ":", "\n", "            ", "exe_flag", "=", "None", "\n", "\n", "", "if", "self", ".", "etype", "in", "[", "\"all\"", ",", "\"match\"", "]", ":", "\n", "            ", "partial_scores", "=", "self", ".", "eval_partial_match", "(", "p_sql", ",", "g_sql", ")", "\n", "exact_score", "=", "self", ".", "eval_exact_match", "(", "p_sql", ",", "g_sql", ",", "partial_scores", ")", "\n", "self", ".", "scores", "[", "hardness", "]", "[", "'exact'", "]", "+=", "exact_score", "\n", "self", ".", "scores", "[", "'all'", "]", "[", "'exact'", "]", "+=", "exact_score", "\n", "for", "type_", "in", "PARTIAL_TYPES", ":", "\n", "                ", "if", "partial_scores", "[", "type_", "]", "[", "'pred_total'", "]", ">", "0", ":", "\n", "                    ", "self", ".", "scores", "[", "hardness", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "+=", "partial_scores", "[", "type_", "]", "[", "'acc'", "]", "\n", "self", ".", "scores", "[", "hardness", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc_count'", "]", "+=", "1", "\n", "", "if", "partial_scores", "[", "type_", "]", "[", "'label_total'", "]", ">", "0", ":", "\n", "                    ", "self", ".", "scores", "[", "hardness", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "+=", "partial_scores", "[", "type_", "]", "[", "'rec'", "]", "\n", "self", ".", "scores", "[", "hardness", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec_count'", "]", "+=", "1", "\n", "", "self", ".", "scores", "[", "hardness", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'f1'", "]", "+=", "partial_scores", "[", "type_", "]", "[", "'f1'", "]", "\n", "if", "partial_scores", "[", "type_", "]", "[", "'pred_total'", "]", ">", "0", ":", "\n", "                    ", "self", ".", "scores", "[", "'all'", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "+=", "partial_scores", "[", "type_", "]", "[", "'acc'", "]", "\n", "self", ".", "scores", "[", "'all'", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc_count'", "]", "+=", "1", "\n", "", "if", "partial_scores", "[", "type_", "]", "[", "'label_total'", "]", ">", "0", ":", "\n", "                    ", "self", ".", "scores", "[", "'all'", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "+=", "partial_scores", "[", "type_", "]", "[", "'rec'", "]", "\n", "self", ".", "scores", "[", "'all'", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec_count'", "]", "+=", "1", "\n", "", "self", ".", "scores", "[", "'all'", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'f1'", "]", "+=", "partial_scores", "[", "type_", "]", "[", "'f1'", "]", "\n", "", "", "else", ":", "\n", "            ", "exact_score", "=", "None", "\n", "partial_scores", "=", "None", "\n", "\n", "", "return", "{", "\n", "'predicted'", ":", "predicted", ",", "\n", "'gold'", ":", "gold", ",", "\n", "'execution'", ":", "exe_flag", ",", "\n", "'predicted_parse_error'", ":", "parse_error", ",", "\n", "'hardness'", ":", "hardness", ",", "\n", "'exact'", ":", "exact_score", ",", "\n", "'partial'", ":", "partial_scores", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.Evaluator.finalize": [[590, 618], ["None"], "methods", ["None"], ["", "def", "finalize", "(", "self", ")", ":", "\n", "        ", "scores", "=", "self", ".", "scores", "\n", "for", "level", "in", "LEVELS", ":", "\n", "            ", "if", "scores", "[", "level", "]", "[", "'count'", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "self", ".", "etype", "in", "[", "\"all\"", ",", "\"exec\"", "]", ":", "\n", "                ", "scores", "[", "level", "]", "[", "'exec'", "]", "/=", "scores", "[", "level", "]", "[", "'count'", "]", "\n", "scores", "[", "level", "]", "[", "'empty_sql'", "]", "/=", "scores", "[", "level", "]", "[", "'count'", "]", "\n", "\n", "", "if", "self", ".", "etype", "in", "[", "\"all\"", ",", "\"match\"", "]", ":", "\n", "                ", "scores", "[", "level", "]", "[", "'exact'", "]", "/=", "scores", "[", "level", "]", "[", "'count'", "]", "\n", "for", "type_", "in", "PARTIAL_TYPES", ":", "\n", "                    ", "if", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc_count'", "]", "==", "0", ":", "\n", "                        ", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "=", "0", "\n", "", "else", ":", "\n", "                        ", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "=", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "/", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc_count'", "]", "*", "1.0", "\n", "", "if", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec_count'", "]", "==", "0", ":", "\n", "                        ", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "=", "0", "\n", "", "else", ":", "\n", "                        ", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "=", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "/", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec_count'", "]", "*", "1.0", "\n", "", "if", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "==", "0", "and", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "==", "0", ":", "\n", "                        ", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'f1'", "]", "=", "1", "\n", "", "else", ":", "\n", "                        ", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'f1'", "]", "=", "2.0", "*", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "*", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "/", "(", "\n", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "+", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.Evaluator.isValidSQL": [[620, 629], ["sqlite3.connect", "sqlite3.connect.cursor", "sqlite3.connect.cursor.execute"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.execute"], ["", "", "", "", "", "def", "isValidSQL", "(", "self", ",", "sql", ",", "db_id", ")", ":", "\n", "        ", "db", "=", "self", ".", "db_paths", "[", "db_id", "]", "\n", "conn", "=", "sqlite3", ".", "connect", "(", "db", ")", "\n", "cursor", "=", "conn", ".", "cursor", "(", ")", "\n", "try", ":", "\n", "            ", "cursor", ".", "execute", "(", "sql", ")", "\n", "", "except", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.condition_has_or": [[62, 64], ["None"], "function", ["None"], ["def", "condition_has_or", "(", "conds", ")", ":", "\n", "    ", "return", "'or'", "in", "conds", "[", "1", ":", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.condition_has_like": [[66, 68], ["WHERE_OPS.index"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["", "def", "condition_has_like", "(", "conds", ")", ":", "\n", "    ", "return", "WHERE_OPS", ".", "index", "(", "'like'", ")", "in", "[", "cond_unit", "[", "1", "]", "for", "cond_unit", "in", "conds", "[", ":", ":", "2", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.condition_has_sql": [[70, 78], ["type", "type"], "function", ["None"], ["", "def", "condition_has_sql", "(", "conds", ")", ":", "\n", "    ", "for", "cond_unit", "in", "conds", "[", ":", ":", "2", "]", ":", "\n", "        ", "val1", ",", "val2", "=", "cond_unit", "[", "3", "]", ",", "cond_unit", "[", "4", "]", "\n", "if", "val1", "is", "not", "None", "and", "type", "(", "val1", ")", "is", "dict", ":", "\n", "            ", "return", "True", "\n", "", "if", "val2", "is", "not", "None", "and", "type", "(", "val2", ")", "is", "dict", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.val_has_op": [[80, 82], ["UNIT_OPS.index"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["", "def", "val_has_op", "(", "val_unit", ")", ":", "\n", "    ", "return", "val_unit", "[", "0", "]", "!=", "UNIT_OPS", ".", "index", "(", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.has_agg": [[84, 86], ["AGG_OPS.index"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["", "def", "has_agg", "(", "unit", ")", ":", "\n", "    ", "return", "unit", "[", "0", "]", "!=", "AGG_OPS", ".", "index", "(", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.accuracy": [[88, 92], ["None"], "function", ["None"], ["", "def", "accuracy", "(", "count", ",", "total", ")", ":", "\n", "    ", "if", "count", "==", "total", ":", "\n", "        ", "return", "1", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.recall": [[94, 98], ["None"], "function", ["None"], ["", "def", "recall", "(", "count", ",", "total", ")", ":", "\n", "    ", "if", "count", "==", "total", ":", "\n", "        ", "return", "1", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.F1": [[100, 104], ["None"], "function", ["None"], ["", "def", "F1", "(", "acc", ",", "rec", ")", ":", "\n", "    ", "if", "(", "acc", "+", "rec", ")", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "return", "(", "2.", "*", "acc", "*", "rec", ")", "/", "(", "acc", "+", "rec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.get_scores": [[106, 112], ["None"], "function", ["None"], ["", "def", "get_scores", "(", "count", ",", "pred_total", ",", "label_total", ")", ":", "\n", "    ", "if", "pred_total", "!=", "label_total", ":", "\n", "        ", "return", "0", ",", "0", ",", "0", "\n", "", "elif", "count", "==", "pred_total", ":", "\n", "        ", "return", "1", ",", "1", ",", "1", "\n", "", "return", "0", ",", "0", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.eval_sel": [[114, 132], ["len", "len", "label_sel.remove", "label_wo_agg.remove"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.remove", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.remove"], ["", "def", "eval_sel", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_sel", "=", "pred", "[", "'select'", "]", "[", "1", "]", "\n", "label_sel", "=", "label", "[", "'select'", "]", "[", "1", "]", "\n", "label_wo_agg", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "label_sel", "]", "\n", "pred_total", "=", "len", "(", "pred_sel", ")", "\n", "label_total", "=", "len", "(", "label_sel", ")", "\n", "cnt", "=", "0", "\n", "cnt_wo_agg", "=", "0", "\n", "\n", "for", "unit", "in", "pred_sel", ":", "\n", "        ", "if", "unit", "in", "label_sel", ":", "\n", "            ", "cnt", "+=", "1", "\n", "label_sel", ".", "remove", "(", "unit", ")", "\n", "", "if", "unit", "[", "1", "]", "in", "label_wo_agg", ":", "\n", "            ", "cnt_wo_agg", "+=", "1", "\n", "label_wo_agg", ".", "remove", "(", "unit", "[", "1", "]", ")", "\n", "\n", "", "", "return", "label_total", ",", "pred_total", ",", "cnt", ",", "cnt_wo_agg", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.eval_where": [[134, 152], ["len", "len", "label_conds.remove", "label_wo_agg.remove"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.remove", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.remove"], ["", "def", "eval_where", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_conds", "=", "[", "unit", "for", "unit", "in", "pred", "[", "'where'", "]", "[", ":", ":", "2", "]", "]", "\n", "label_conds", "=", "[", "unit", "for", "unit", "in", "label", "[", "'where'", "]", "[", ":", ":", "2", "]", "]", "\n", "label_wo_agg", "=", "[", "unit", "[", "2", "]", "for", "unit", "in", "label_conds", "]", "\n", "pred_total", "=", "len", "(", "pred_conds", ")", "\n", "label_total", "=", "len", "(", "label_conds", ")", "\n", "cnt", "=", "0", "\n", "cnt_wo_agg", "=", "0", "\n", "\n", "for", "unit", "in", "pred_conds", ":", "\n", "        ", "if", "unit", "in", "label_conds", ":", "\n", "            ", "cnt", "+=", "1", "\n", "label_conds", ".", "remove", "(", "unit", ")", "\n", "", "if", "unit", "[", "2", "]", "in", "label_wo_agg", ":", "\n", "            ", "cnt_wo_agg", "+=", "1", "\n", "label_wo_agg", ".", "remove", "(", "unit", "[", "2", "]", ")", "\n", "\n", "", "", "return", "label_total", ",", "pred_total", ",", "cnt", ",", "cnt_wo_agg", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.eval_group": [[154, 167], ["len", "len", "label_cols.remove", "pred.split", "label.split"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.remove"], ["", "def", "eval_group", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_cols", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "pred", "[", "'groupBy'", "]", "]", "\n", "label_cols", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "label", "[", "'groupBy'", "]", "]", "\n", "pred_total", "=", "len", "(", "pred_cols", ")", "\n", "label_total", "=", "len", "(", "label_cols", ")", "\n", "cnt", "=", "0", "\n", "pred_cols", "=", "[", "pred", ".", "split", "(", "\".\"", ")", "[", "1", "]", "if", "\".\"", "in", "pred", "else", "pred", "for", "pred", "in", "pred_cols", "]", "\n", "label_cols", "=", "[", "label", ".", "split", "(", "\".\"", ")", "[", "1", "]", "if", "\".\"", "in", "label", "else", "label", "for", "label", "in", "label_cols", "]", "\n", "for", "col", "in", "pred_cols", ":", "\n", "        ", "if", "col", "in", "label_cols", ":", "\n", "            ", "cnt", "+=", "1", "\n", "label_cols", ".", "remove", "(", "col", ")", "\n", "", "", "return", "label_total", ",", "pred_total", ",", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.eval_having": [[169, 184], ["len", "len"], "function", ["None"], ["", "def", "eval_having", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_total", "=", "label_total", "=", "cnt", "=", "0", "\n", "if", "len", "(", "pred", "[", "'groupBy'", "]", ")", ">", "0", ":", "\n", "        ", "pred_total", "=", "1", "\n", "", "if", "len", "(", "label", "[", "'groupBy'", "]", ")", ">", "0", ":", "\n", "        ", "label_total", "=", "1", "\n", "\n", "", "pred_cols", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "pred", "[", "'groupBy'", "]", "]", "\n", "label_cols", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "label", "[", "'groupBy'", "]", "]", "\n", "if", "pred_total", "==", "label_total", "==", "1", "and", "pred_cols", "==", "label_cols", "and", "pred", "[", "'having'", "]", "==", "label", "[", "'having'", "]", ":", "\n", "        ", "cnt", "=", "1", "\n", "\n", "", "return", "label_total", ",", "pred_total", ",", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.eval_order": [[186, 196], ["len", "len", "len"], "function", ["None"], ["", "def", "eval_order", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_total", "=", "label_total", "=", "cnt", "=", "0", "\n", "if", "len", "(", "pred", "[", "'orderBy'", "]", ")", ">", "0", ":", "\n", "        ", "pred_total", "=", "1", "\n", "", "if", "len", "(", "label", "[", "'orderBy'", "]", ")", ">", "0", ":", "\n", "        ", "label_total", "=", "1", "\n", "", "if", "len", "(", "label", "[", "'orderBy'", "]", ")", ">", "0", "and", "pred", "[", "'orderBy'", "]", "==", "label", "[", "'orderBy'", "]", "and", "(", "(", "pred", "[", "'limit'", "]", "is", "None", "and", "label", "[", "'limit'", "]", "is", "None", ")", "or", "(", "pred", "[", "'limit'", "]", "is", "not", "None", "and", "label", "[", "'limit'", "]", "is", "not", "None", ")", ")", ":", "\n", "        ", "cnt", "=", "1", "\n", "", "return", "label_total", ",", "pred_total", ",", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.eval_and_or": [[198, 207], ["set", "set", "len", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set"], ["", "def", "eval_and_or", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_ao", "=", "pred", "[", "'where'", "]", "[", "1", ":", ":", "2", "]", "\n", "label_ao", "=", "label", "[", "'where'", "]", "[", "1", ":", ":", "2", "]", "\n", "pred_ao", "=", "set", "(", "pred_ao", ")", "\n", "label_ao", "=", "set", "(", "label_ao", ")", "\n", "\n", "if", "pred_ao", "==", "label_ao", ":", "\n", "        ", "return", "1", ",", "1", ",", "1", "\n", "", "return", "len", "(", "pred_ao", ")", ",", "len", "(", "label_ao", ")", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.get_nestedSQL": [[209, 223], ["nested.append", "nested.append", "nested.append", "type", "nested.append", "type", "nested.append"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "get_nestedSQL", "(", "sql", ")", ":", "\n", "    ", "nested", "=", "[", "]", "\n", "for", "cond_unit", "in", "sql", "[", "'from'", "]", "[", "'conds'", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "'where'", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "'having'", "]", "[", ":", ":", "2", "]", ":", "\n", "        ", "if", "type", "(", "cond_unit", "[", "3", "]", ")", "is", "dict", ":", "\n", "            ", "nested", ".", "append", "(", "cond_unit", "[", "3", "]", ")", "\n", "", "if", "type", "(", "cond_unit", "[", "4", "]", ")", "is", "dict", ":", "\n", "            ", "nested", ".", "append", "(", "cond_unit", "[", "4", "]", ")", "\n", "", "", "if", "sql", "[", "'intersect'", "]", "is", "not", "None", ":", "\n", "        ", "nested", ".", "append", "(", "sql", "[", "'intersect'", "]", ")", "\n", "", "if", "sql", "[", "'except'", "]", "is", "not", "None", ":", "\n", "        ", "nested", ".", "append", "(", "sql", "[", "'except'", "]", ")", "\n", "", "if", "sql", "[", "'union'", "]", "is", "not", "None", ":", "\n", "        ", "nested", ".", "append", "(", "sql", "[", "'union'", "]", ")", "\n", "", "return", "nested", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.eval_nested": [[225, 237], ["evaluation.Evaluator.eval_partial_match", "evaluation.Evaluator.eval_exact_match"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.eval_partial_match", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.eval_exact_match"], ["", "def", "eval_nested", "(", "pred", ",", "label", ")", ":", "\n", "    ", "label_total", "=", "0", "\n", "pred_total", "=", "0", "\n", "cnt", "=", "0", "\n", "if", "pred", "is", "not", "None", ":", "\n", "        ", "pred_total", "+=", "1", "\n", "", "if", "label", "is", "not", "None", ":", "\n", "        ", "label_total", "+=", "1", "\n", "", "if", "pred", "is", "not", "None", "and", "label", "is", "not", "None", ":", "\n", "        ", "partial_scores", "=", "Evaluator", ".", "eval_partial_match", "(", "pred", ",", "label", ")", "\n", "cnt", "+=", "Evaluator", ".", "eval_exact_match", "(", "pred", ",", "label", ",", "partial_scores", ")", "\n", "", "return", "label_total", ",", "pred_total", ",", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.eval_IUEN": [[239, 247], ["evaluation.eval_nested", "evaluation.eval_nested", "evaluation.eval_nested"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_nested", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_nested", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_nested"], ["", "def", "eval_IUEN", "(", "pred", ",", "label", ")", ":", "\n", "    ", "lt1", ",", "pt1", ",", "cnt1", "=", "eval_nested", "(", "pred", "[", "'intersect'", "]", ",", "label", "[", "'intersect'", "]", ")", "\n", "lt2", ",", "pt2", ",", "cnt2", "=", "eval_nested", "(", "pred", "[", "'except'", "]", ",", "label", "[", "'except'", "]", ")", "\n", "lt3", ",", "pt3", ",", "cnt3", "=", "eval_nested", "(", "pred", "[", "'union'", "]", ",", "label", "[", "'union'", "]", ")", "\n", "label_total", "=", "lt1", "+", "lt2", "+", "lt3", "\n", "pred_total", "=", "pt1", "+", "pt2", "+", "pt3", "\n", "cnt", "=", "cnt1", "+", "cnt2", "+", "cnt3", "\n", "return", "label_total", ",", "pred_total", ",", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.get_keywords": [[249, 288], ["set", "len", "set.add", "len", "set.add", "len", "set.add", "len", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add", "len", "set.add", "len", "set.add", "len", "set.add", "len", "set.add", "WHERE_OPS.index", "WHERE_OPS.index"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["", "def", "get_keywords", "(", "sql", ")", ":", "\n", "    ", "res", "=", "set", "(", ")", "\n", "if", "len", "(", "sql", "[", "'where'", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "'where'", ")", "\n", "", "if", "len", "(", "sql", "[", "'groupBy'", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "'group'", ")", "\n", "", "if", "len", "(", "sql", "[", "'having'", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "'having'", ")", "\n", "", "if", "len", "(", "sql", "[", "'orderBy'", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "sql", "[", "'orderBy'", "]", "[", "0", "]", ")", "\n", "res", ".", "add", "(", "'order'", ")", "\n", "", "if", "sql", "[", "'limit'", "]", "is", "not", "None", ":", "\n", "        ", "res", ".", "add", "(", "'limit'", ")", "\n", "", "if", "sql", "[", "'except'", "]", "is", "not", "None", ":", "\n", "        ", "res", ".", "add", "(", "'except'", ")", "\n", "", "if", "sql", "[", "'union'", "]", "is", "not", "None", ":", "\n", "        ", "res", ".", "add", "(", "'union'", ")", "\n", "", "if", "sql", "[", "'intersect'", "]", "is", "not", "None", ":", "\n", "        ", "res", ".", "add", "(", "'intersect'", ")", "\n", "\n", "# or keyword", "\n", "", "ao", "=", "sql", "[", "'from'", "]", "[", "'conds'", "]", "[", "1", ":", ":", "2", "]", "+", "sql", "[", "'where'", "]", "[", "1", ":", ":", "2", "]", "+", "sql", "[", "'having'", "]", "[", "1", ":", ":", "2", "]", "\n", "if", "len", "(", "[", "token", "for", "token", "in", "ao", "if", "token", "==", "'or'", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "'or'", ")", "\n", "\n", "", "cond_units", "=", "sql", "[", "'from'", "]", "[", "'conds'", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "'where'", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "'having'", "]", "[", ":", ":", "2", "]", "\n", "# not keyword", "\n", "if", "len", "(", "[", "cond_unit", "for", "cond_unit", "in", "cond_units", "if", "cond_unit", "[", "0", "]", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "'not'", ")", "\n", "\n", "# in keyword", "\n", "", "if", "len", "(", "[", "cond_unit", "for", "cond_unit", "in", "cond_units", "if", "cond_unit", "[", "1", "]", "==", "WHERE_OPS", ".", "index", "(", "'in'", ")", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "'in'", ")", "\n", "\n", "# like keyword", "\n", "", "if", "len", "(", "[", "cond_unit", "for", "cond_unit", "in", "cond_units", "if", "cond_unit", "[", "1", "]", "==", "WHERE_OPS", ".", "index", "(", "'like'", ")", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "'like'", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.eval_keywords": [[290, 301], ["evaluation.get_keywords", "evaluation.get_keywords", "len", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_keywords", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_keywords"], ["", "def", "eval_keywords", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_keywords", "=", "get_keywords", "(", "pred", ")", "\n", "label_keywords", "=", "get_keywords", "(", "label", ")", "\n", "pred_total", "=", "len", "(", "pred_keywords", ")", "\n", "label_total", "=", "len", "(", "label_keywords", ")", "\n", "cnt", "=", "0", "\n", "\n", "for", "k", "in", "pred_keywords", ":", "\n", "        ", "if", "k", "in", "label_keywords", ":", "\n", "            ", "cnt", "+=", "1", "\n", "", "", "return", "label_total", ",", "pred_total", ",", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.count_agg": [[303, 305], ["len", "evaluation.has_agg"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.has_agg"], ["", "def", "count_agg", "(", "units", ")", ":", "\n", "    ", "return", "len", "(", "[", "unit", "for", "unit", "in", "units", "if", "has_agg", "(", "unit", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.count_component1": [[307, 326], ["len", "len", "len", "len", "len", "len", "len", "WHERE_OPS.index"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["", "def", "count_component1", "(", "sql", ")", ":", "\n", "    ", "count", "=", "0", "\n", "if", "len", "(", "sql", "[", "'where'", "]", ")", ">", "0", ":", "\n", "        ", "count", "+=", "1", "\n", "", "if", "len", "(", "sql", "[", "'groupBy'", "]", ")", ">", "0", ":", "\n", "        ", "count", "+=", "1", "\n", "", "if", "len", "(", "sql", "[", "'orderBy'", "]", ")", ">", "0", ":", "\n", "        ", "count", "+=", "1", "\n", "", "if", "sql", "[", "'limit'", "]", "is", "not", "None", ":", "\n", "        ", "count", "+=", "1", "\n", "", "if", "len", "(", "sql", "[", "'from'", "]", "[", "'table_units'", "]", ")", ">", "0", ":", "# JOIN", "\n", "        ", "count", "+=", "len", "(", "sql", "[", "'from'", "]", "[", "'table_units'", "]", ")", "-", "1", "\n", "\n", "", "ao", "=", "sql", "[", "'from'", "]", "[", "'conds'", "]", "[", "1", ":", ":", "2", "]", "+", "sql", "[", "'where'", "]", "[", "1", ":", ":", "2", "]", "+", "sql", "[", "'having'", "]", "[", "1", ":", ":", "2", "]", "\n", "count", "+=", "len", "(", "[", "token", "for", "token", "in", "ao", "if", "token", "==", "'or'", "]", ")", "\n", "cond_units", "=", "sql", "[", "'from'", "]", "[", "'conds'", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "'where'", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "'having'", "]", "[", ":", ":", "2", "]", "\n", "count", "+=", "len", "(", "[", "cond_unit", "for", "cond_unit", "in", "cond_units", "if", "cond_unit", "[", "1", "]", "==", "WHERE_OPS", ".", "index", "(", "'like'", ")", "]", ")", "\n", "\n", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.count_component2": [[328, 331], ["evaluation.get_nestedSQL", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_nestedSQL"], ["", "def", "count_component2", "(", "sql", ")", ":", "\n", "    ", "nested", "=", "get_nestedSQL", "(", "sql", ")", "\n", "return", "len", "(", "nested", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.count_others": [[333, 359], ["evaluation.count_agg", "evaluation.count_agg", "evaluation.count_agg", "evaluation.count_agg", "len", "evaluation.count_agg", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_agg", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_agg", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_agg", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_agg", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_agg"], ["", "def", "count_others", "(", "sql", ")", ":", "\n", "    ", "count", "=", "0", "\n", "# number of aggregation", "\n", "agg_count", "=", "count_agg", "(", "sql", "[", "'select'", "]", "[", "1", "]", ")", "\n", "agg_count", "+=", "count_agg", "(", "sql", "[", "'where'", "]", "[", ":", ":", "2", "]", ")", "\n", "agg_count", "+=", "count_agg", "(", "sql", "[", "'groupBy'", "]", ")", "\n", "if", "len", "(", "sql", "[", "'orderBy'", "]", ")", ">", "0", ":", "\n", "        ", "agg_count", "+=", "count_agg", "(", "[", "unit", "[", "1", "]", "for", "unit", "in", "sql", "[", "'orderBy'", "]", "[", "1", "]", "if", "unit", "[", "1", "]", "]", "+", "\n", "[", "unit", "[", "2", "]", "for", "unit", "in", "sql", "[", "'orderBy'", "]", "[", "1", "]", "if", "unit", "[", "2", "]", "]", ")", "\n", "", "agg_count", "+=", "count_agg", "(", "sql", "[", "'having'", "]", ")", "\n", "if", "agg_count", ">", "1", ":", "\n", "        ", "count", "+=", "1", "\n", "\n", "# number of select columns", "\n", "", "if", "len", "(", "sql", "[", "'select'", "]", "[", "1", "]", ")", ">", "1", ":", "\n", "        ", "count", "+=", "1", "\n", "\n", "# number of where conditions", "\n", "", "if", "len", "(", "sql", "[", "'where'", "]", ")", ">", "1", ":", "\n", "        ", "count", "+=", "1", "\n", "\n", "# number of group by clauses", "\n", "", "if", "len", "(", "sql", "[", "'groupBy'", "]", ")", ">", "1", ":", "\n", "        ", "count", "+=", "1", "\n", "\n", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.print_scores": [[631, 663], ["print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "function", ["None"], ["", "", "def", "print_scores", "(", "scores", ",", "etype", ")", ":", "\n", "    ", "LEVELS", "=", "[", "'easy'", ",", "'medium'", ",", "'hard'", ",", "'extra'", ",", "'all'", "]", "\n", "PARTIAL_TYPES", "=", "[", "'select'", ",", "'select(no AGG)'", ",", "'where'", ",", "'where(no OP)'", ",", "'group(no Having)'", ",", "\n", "'group'", ",", "'order'", ",", "'and/or'", ",", "'IUEN'", ",", "'keywords'", "]", "\n", "\n", "print", "(", "\"{:20} {:20} {:20} {:20} {:20} {:20}\"", ".", "format", "(", "\"\"", ",", "*", "LEVELS", ")", ")", "\n", "counts", "=", "[", "scores", "[", "level", "]", "[", "'count'", "]", "for", "level", "in", "LEVELS", "]", "\n", "print", "(", "\"{:20} {:<20d} {:<20d} {:<20d} {:<20d} {:<20d}\"", ".", "format", "(", "\"count\"", ",", "*", "counts", ")", ")", "\n", "\n", "if", "etype", "in", "[", "\"all\"", ",", "\"exec\"", "]", ":", "\n", "        ", "print", "(", "'=====================   EXECUTION ACCURACY     ====================='", ")", "\n", "this_scores", "=", "[", "scores", "[", "level", "]", "[", "'exec'", "]", "for", "level", "in", "LEVELS", "]", "\n", "print", "(", "\"{:20} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f}\"", ".", "format", "(", "\"execution\"", ",", "*", "this_scores", ")", ")", "\n", "\n", "", "if", "etype", "in", "[", "\"all\"", ",", "\"match\"", "]", ":", "\n", "        ", "print", "(", "'\\n====================== EXACT MATCHING ACCURACY ====================='", ")", "\n", "exact_scores", "=", "[", "scores", "[", "level", "]", "[", "'exact'", "]", "for", "level", "in", "LEVELS", "]", "\n", "print", "(", "\"{:20} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f}\"", ".", "format", "(", "\"exact match\"", ",", "*", "exact_scores", ")", ")", "\n", "print", "(", "'\\n---------------------PARTIAL MATCHING ACCURACY----------------------'", ")", "\n", "for", "type_", "in", "PARTIAL_TYPES", ":", "\n", "            ", "this_scores", "=", "[", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "for", "level", "in", "LEVELS", "]", "\n", "print", "(", "\"{:20} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f}\"", ".", "format", "(", "type_", ",", "*", "this_scores", ")", ")", "\n", "\n", "", "print", "(", "'---------------------- PARTIAL MATCHING RECALL ----------------------'", ")", "\n", "for", "type_", "in", "PARTIAL_TYPES", ":", "\n", "            ", "this_scores", "=", "[", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "for", "level", "in", "LEVELS", "]", "\n", "print", "(", "\"{:20} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f}\"", ".", "format", "(", "type_", ",", "*", "this_scores", ")", ")", "\n", "\n", "", "print", "(", "'---------------------- PARTIAL MATCHING F1 --------------------------'", ")", "\n", "for", "type_", "in", "PARTIAL_TYPES", ":", "\n", "            ", "this_scores", "=", "[", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'f1'", "]", "for", "level", "in", "LEVELS", "]", "\n", "print", "(", "\"{:20} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f}\"", ".", "format", "(", "type_", ",", "*", "this_scores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.evaluate": [[665, 685], ["evaluation.Evaluator", "zip", "evaluation.Evaluator.finalize", "evaluation.print_scores", "open", "open", "results.append", "l.strip().split", "l.strip().split", "evaluation.Evaluator.evaluate_one", "f.readlines", "f.readlines", "l.strip", "len", "l.strip", "len", "l.strip", "l.strip"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.infer_tree_traversal.InferenceTreeTraversal.finalize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.print_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.evaluate_one"], ["", "", "", "def", "evaluate", "(", "gold", ",", "predict", ",", "db_dir", ",", "etype", ",", "kmaps", ")", ":", "\n", "    ", "with", "open", "(", "gold", ")", "as", "f", ":", "\n", "        ", "glist", "=", "[", "l", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "for", "l", "in", "f", ".", "readlines", "(", ")", "if", "len", "(", "l", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "\n", "", "with", "open", "(", "predict", ")", "as", "f", ":", "\n", "        ", "plist", "=", "[", "l", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "for", "l", "in", "f", ".", "readlines", "(", ")", "if", "len", "(", "l", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "# plist = [(\"select max(Share),min(Share) from performance where Type != 'terminal'\", \"orchestra\")]", "\n", "# glist = [(\"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != 'Live final'\", \"orchestra\")]", "\n", "", "evaluator", "=", "Evaluator", "(", "db_dir", ",", "kmaps", ",", "etype", ")", "\n", "results", "=", "[", "]", "\n", "for", "p", ",", "g", "in", "zip", "(", "plist", ",", "glist", ")", ":", "\n", "        ", "predicted", ",", "=", "p", "\n", "gold", ",", "db_name", "=", "g", "\n", "results", ".", "append", "(", "evaluator", ".", "evaluate_one", "(", "db_name", ",", "gold", ",", "predicted", ")", ")", "\n", "", "evaluator", ".", "finalize", "(", ")", "\n", "\n", "print_scores", "(", "evaluator", ".", "scores", ",", "etype", ")", "\n", "return", "{", "\n", "'per_item'", ":", "results", ",", "\n", "'total_scores'", ":", "evaluator", ".", "scores", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.eval_exec_match": [[688, 715], ["sqlite3.connect", "sqlite3.connect.cursor", "conn.cursor.execute", "conn.cursor.fetchall", "conn.cursor.execute", "conn.cursor.fetchall", "enumerate", "evaluation.eval_exec_match.res_map"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.execute", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.execute"], ["", "def", "eval_exec_match", "(", "db", ",", "p_str", ",", "g_str", ",", "pred", ",", "gold", ")", ":", "\n", "    ", "\"\"\"\n    return 1 if the values between prediction and gold are matching\n    in the corresponding index. Currently not support multiple col_unit(pairs).\n    \"\"\"", "\n", "conn", "=", "sqlite3", ".", "connect", "(", "db", ")", "\n", "conn", ".", "text_factory", "=", "bytes", "#handle encoding errors", "\n", "cursor", "=", "conn", ".", "cursor", "(", ")", "\n", "try", ":", "\n", "        ", "cursor", ".", "execute", "(", "p_str", ")", "\n", "p_res", "=", "cursor", ".", "fetchall", "(", ")", "\n", "", "except", ":", "\n", "        ", "return", "False", "\n", "\n", "", "cursor", ".", "execute", "(", "g_str", ")", "\n", "q_res", "=", "cursor", ".", "fetchall", "(", ")", "\n", "\n", "def", "res_map", "(", "res", ",", "val_units", ")", ":", "\n", "        ", "rmap", "=", "{", "}", "\n", "for", "idx", ",", "val_unit", "in", "enumerate", "(", "val_units", ")", ":", "\n", "            ", "key", "=", "tuple", "(", "val_unit", "[", "1", "]", ")", "if", "not", "val_unit", "[", "2", "]", "else", "(", "val_unit", "[", "0", "]", ",", "tuple", "(", "val_unit", "[", "1", "]", ")", ",", "tuple", "(", "val_unit", "[", "2", "]", ")", ")", "\n", "rmap", "[", "key", "]", "=", "[", "r", "[", "idx", "]", "for", "r", "in", "res", "]", "\n", "", "return", "rmap", "\n", "\n", "", "p_val_units", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "pred", "[", "'select'", "]", "[", "1", "]", "]", "\n", "q_val_units", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "gold", "[", "'select'", "]", "[", "1", "]", "]", "\n", "return", "res_map", "(", "p_res", ",", "p_val_units", ")", "==", "res_map", "(", "q_res", ",", "q_val_units", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.rebuild_cond_unit_val": [[718, 732], ["type", "evaluation.rebuild_sql_val", "type", "evaluation.rebuild_sql_val"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_val"], ["", "def", "rebuild_cond_unit_val", "(", "cond_unit", ")", ":", "\n", "    ", "if", "cond_unit", "is", "None", "or", "not", "DISABLE_VALUE", ":", "\n", "        ", "return", "cond_unit", "\n", "\n", "", "not_op", ",", "op_id", ",", "val_unit", ",", "val1", ",", "val2", "=", "cond_unit", "\n", "if", "type", "(", "val1", ")", "is", "not", "dict", ":", "\n", "        ", "val1", "=", "None", "\n", "", "else", ":", "\n", "        ", "val1", "=", "rebuild_sql_val", "(", "val1", ")", "\n", "", "if", "type", "(", "val2", ")", "is", "not", "dict", ":", "\n", "        ", "val2", "=", "None", "\n", "", "else", ":", "\n", "        ", "val2", "=", "rebuild_sql_val", "(", "val2", ")", "\n", "", "return", "not_op", ",", "op_id", ",", "val_unit", ",", "val1", ",", "val2", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.rebuild_condition_val": [[734, 745], ["enumerate", "res.append", "res.append", "evaluation.rebuild_cond_unit_val"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_cond_unit_val"], ["", "def", "rebuild_condition_val", "(", "condition", ")", ":", "\n", "    ", "if", "condition", "is", "None", "or", "not", "DISABLE_VALUE", ":", "\n", "        ", "return", "condition", "\n", "\n", "", "res", "=", "[", "]", "\n", "for", "idx", ",", "it", "in", "enumerate", "(", "condition", ")", ":", "\n", "        ", "if", "idx", "%", "2", "==", "0", ":", "\n", "            ", "res", ".", "append", "(", "rebuild_cond_unit_val", "(", "it", ")", ")", "\n", "", "else", ":", "\n", "            ", "res", ".", "append", "(", "it", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.rebuild_sql_val": [[747, 759], ["evaluation.rebuild_condition_val", "evaluation.rebuild_condition_val", "evaluation.rebuild_condition_val", "evaluation.rebuild_sql_val", "evaluation.rebuild_sql_val", "evaluation.rebuild_sql_val"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_condition_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_condition_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_condition_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_val"], ["", "def", "rebuild_sql_val", "(", "sql", ")", ":", "\n", "    ", "if", "sql", "is", "None", "or", "not", "DISABLE_VALUE", ":", "\n", "        ", "return", "sql", "\n", "\n", "", "sql", "[", "'from'", "]", "[", "'conds'", "]", "=", "rebuild_condition_val", "(", "sql", "[", "'from'", "]", "[", "'conds'", "]", ")", "\n", "sql", "[", "'having'", "]", "=", "rebuild_condition_val", "(", "sql", "[", "'having'", "]", ")", "\n", "sql", "[", "'where'", "]", "=", "rebuild_condition_val", "(", "sql", "[", "'where'", "]", ")", "\n", "sql", "[", "'intersect'", "]", "=", "rebuild_sql_val", "(", "sql", "[", "'intersect'", "]", ")", "\n", "sql", "[", "'except'", "]", "=", "rebuild_sql_val", "(", "sql", "[", "'except'", "]", ")", "\n", "sql", "[", "'union'", "]", "=", "rebuild_sql_val", "(", "sql", "[", "'union'", "]", ")", "\n", "\n", "return", "sql", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.build_valid_col_units": [[762, 770], ["list", "schema.idMap.values", "valid_col_units.append", "value.index"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.values", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["", "def", "build_valid_col_units", "(", "table_units", ",", "schema", ")", ":", "\n", "    ", "col_ids", "=", "[", "table_unit", "[", "1", "]", "for", "table_unit", "in", "table_units", "if", "table_unit", "[", "0", "]", "==", "TABLE_TYPE", "[", "'table_unit'", "]", "]", "\n", "prefixs", "=", "[", "col_id", "[", ":", "-", "2", "]", "for", "col_id", "in", "col_ids", "]", "\n", "valid_col_units", "=", "[", "]", "\n", "for", "value", "in", "list", "(", "schema", ".", "idMap", ".", "values", "(", ")", ")", ":", "\n", "        ", "if", "'.'", "in", "value", "and", "value", "[", ":", "value", ".", "index", "(", "'.'", ")", "]", "in", "prefixs", ":", "\n", "            ", "valid_col_units", ".", "append", "(", "value", ")", "\n", "", "", "return", "valid_col_units", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.rebuild_col_unit_col": [[772, 782], ["None"], "function", ["None"], ["", "def", "rebuild_col_unit_col", "(", "valid_col_units", ",", "col_unit", ",", "kmap", ")", ":", "\n", "    ", "if", "col_unit", "is", "None", ":", "\n", "        ", "return", "col_unit", "\n", "\n", "", "agg_id", ",", "col_id", ",", "distinct", "=", "col_unit", "\n", "if", "col_id", "in", "kmap", "and", "col_id", "in", "valid_col_units", ":", "\n", "        ", "col_id", "=", "kmap", "[", "col_id", "]", "\n", "", "if", "DISABLE_DISTINCT", ":", "\n", "        ", "distinct", "=", "None", "\n", "", "return", "agg_id", ",", "col_id", ",", "distinct", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.rebuild_val_unit_col": [[784, 792], ["evaluation.rebuild_col_unit_col", "evaluation.rebuild_col_unit_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_col_unit_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_col_unit_col"], ["", "def", "rebuild_val_unit_col", "(", "valid_col_units", ",", "val_unit", ",", "kmap", ")", ":", "\n", "    ", "if", "val_unit", "is", "None", ":", "\n", "        ", "return", "val_unit", "\n", "\n", "", "unit_op", ",", "col_unit1", ",", "col_unit2", "=", "val_unit", "\n", "col_unit1", "=", "rebuild_col_unit_col", "(", "valid_col_units", ",", "col_unit1", ",", "kmap", ")", "\n", "col_unit2", "=", "rebuild_col_unit_col", "(", "valid_col_units", ",", "col_unit2", ",", "kmap", ")", "\n", "return", "unit_op", ",", "col_unit1", ",", "col_unit2", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.rebuild_table_unit_col": [[794, 802], ["isinstance", "evaluation.rebuild_col_unit_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_col_unit_col"], ["", "def", "rebuild_table_unit_col", "(", "valid_col_units", ",", "table_unit", ",", "kmap", ")", ":", "\n", "    ", "if", "table_unit", "is", "None", ":", "\n", "        ", "return", "table_unit", "\n", "\n", "", "table_type", ",", "col_unit_or_sql", "=", "table_unit", "\n", "if", "isinstance", "(", "col_unit_or_sql", ",", "tuple", ")", ":", "\n", "        ", "col_unit_or_sql", "=", "rebuild_col_unit_col", "(", "valid_col_units", ",", "col_unit_or_sql", ",", "kmap", ")", "\n", "", "return", "table_type", ",", "col_unit_or_sql", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.rebuild_cond_unit_col": [[804, 811], ["evaluation.rebuild_val_unit_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_val_unit_col"], ["", "def", "rebuild_cond_unit_col", "(", "valid_col_units", ",", "cond_unit", ",", "kmap", ")", ":", "\n", "    ", "if", "cond_unit", "is", "None", ":", "\n", "        ", "return", "cond_unit", "\n", "\n", "", "not_op", ",", "op_id", ",", "val_unit", ",", "val1", ",", "val2", "=", "cond_unit", "\n", "val_unit", "=", "rebuild_val_unit_col", "(", "valid_col_units", ",", "val_unit", ",", "kmap", ")", "\n", "return", "not_op", ",", "op_id", ",", "val_unit", ",", "val1", ",", "val2", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.rebuild_condition_col": [[813, 818], ["range", "len", "evaluation.rebuild_cond_unit_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_cond_unit_col"], ["", "def", "rebuild_condition_col", "(", "valid_col_units", ",", "condition", ",", "kmap", ")", ":", "\n", "    ", "for", "idx", "in", "range", "(", "len", "(", "condition", ")", ")", ":", "\n", "        ", "if", "idx", "%", "2", "==", "0", ":", "\n", "            ", "condition", "[", "idx", "]", "=", "rebuild_cond_unit_col", "(", "valid_col_units", ",", "condition", "[", "idx", "]", ",", "kmap", ")", "\n", "", "", "return", "condition", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.rebuild_select_col": [[820, 831], ["new_list.append", "evaluation.rebuild_val_unit_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_val_unit_col"], ["", "def", "rebuild_select_col", "(", "valid_col_units", ",", "sel", ",", "kmap", ")", ":", "\n", "    ", "if", "sel", "is", "None", ":", "\n", "        ", "return", "sel", "\n", "", "distinct", ",", "_list", "=", "sel", "\n", "new_list", "=", "[", "]", "\n", "for", "it", "in", "_list", ":", "\n", "        ", "agg_id", ",", "val_unit", "=", "it", "\n", "new_list", ".", "append", "(", "(", "agg_id", ",", "rebuild_val_unit_col", "(", "valid_col_units", ",", "val_unit", ",", "kmap", ")", ")", ")", "\n", "", "if", "DISABLE_DISTINCT", ":", "\n", "        ", "distinct", "=", "None", "\n", "", "return", "distinct", ",", "new_list", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.rebuild_from_col": [[833, 840], ["evaluation.rebuild_condition_col", "evaluation.rebuild_table_unit_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_condition_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_table_unit_col"], ["", "def", "rebuild_from_col", "(", "valid_col_units", ",", "from_", ",", "kmap", ")", ":", "\n", "    ", "if", "from_", "is", "None", ":", "\n", "        ", "return", "from_", "\n", "\n", "", "from_", "[", "'table_units'", "]", "=", "[", "rebuild_table_unit_col", "(", "valid_col_units", ",", "table_unit", ",", "kmap", ")", "for", "table_unit", "in", "from_", "[", "'table_units'", "]", "]", "\n", "from_", "[", "'conds'", "]", "=", "rebuild_condition_col", "(", "valid_col_units", ",", "from_", "[", "'conds'", "]", ",", "kmap", ")", "\n", "return", "from_", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.rebuild_group_by_col": [[842, 847], ["evaluation.rebuild_col_unit_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_col_unit_col"], ["", "def", "rebuild_group_by_col", "(", "valid_col_units", ",", "group_by", ",", "kmap", ")", ":", "\n", "    ", "if", "group_by", "is", "None", ":", "\n", "        ", "return", "group_by", "\n", "\n", "", "return", "[", "rebuild_col_unit_col", "(", "valid_col_units", ",", "col_unit", ",", "kmap", ")", "for", "col_unit", "in", "group_by", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.rebuild_order_by_col": [[849, 856], ["evaluation.rebuild_val_unit_col", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_val_unit_col"], ["", "def", "rebuild_order_by_col", "(", "valid_col_units", ",", "order_by", ",", "kmap", ")", ":", "\n", "    ", "if", "order_by", "is", "None", "or", "len", "(", "order_by", ")", "==", "0", ":", "\n", "        ", "return", "order_by", "\n", "\n", "", "direction", ",", "val_units", "=", "order_by", "\n", "new_val_units", "=", "[", "rebuild_val_unit_col", "(", "valid_col_units", ",", "val_unit", ",", "kmap", ")", "for", "val_unit", "in", "val_units", "]", "\n", "return", "direction", ",", "new_val_units", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.rebuild_sql_col": [[858, 873], ["evaluation.rebuild_select_col", "evaluation.rebuild_from_col", "evaluation.rebuild_condition_col", "evaluation.rebuild_group_by_col", "evaluation.rebuild_order_by_col", "evaluation.rebuild_condition_col", "evaluation.rebuild_sql_col", "evaluation.rebuild_sql_col", "evaluation.rebuild_sql_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_select_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_from_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_condition_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_group_by_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_order_by_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_condition_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_col"], ["", "def", "rebuild_sql_col", "(", "valid_col_units", ",", "sql", ",", "kmap", ")", ":", "\n", "    ", "if", "sql", "is", "None", ":", "\n", "        ", "return", "sql", "\n", "\n", "", "sql", "[", "'select'", "]", "=", "rebuild_select_col", "(", "valid_col_units", ",", "sql", "[", "'select'", "]", ",", "kmap", ")", "\n", "sql", "[", "'from'", "]", "=", "rebuild_from_col", "(", "valid_col_units", ",", "sql", "[", "'from'", "]", ",", "kmap", ")", "\n", "sql", "[", "'where'", "]", "=", "rebuild_condition_col", "(", "valid_col_units", ",", "sql", "[", "'where'", "]", ",", "kmap", ")", "\n", "sql", "[", "'groupBy'", "]", "=", "rebuild_group_by_col", "(", "valid_col_units", ",", "sql", "[", "'groupBy'", "]", ",", "kmap", ")", "\n", "sql", "[", "'orderBy'", "]", "=", "rebuild_order_by_col", "(", "valid_col_units", ",", "sql", "[", "'orderBy'", "]", ",", "kmap", ")", "\n", "sql", "[", "'having'", "]", "=", "rebuild_condition_col", "(", "valid_col_units", ",", "sql", "[", "'having'", "]", ",", "kmap", ")", "\n", "sql", "[", "'intersect'", "]", "=", "rebuild_sql_col", "(", "valid_col_units", ",", "sql", "[", "'intersect'", "]", ",", "kmap", ")", "\n", "sql", "[", "'except'", "]", "=", "rebuild_sql_col", "(", "valid_col_units", ",", "sql", "[", "'except'", "]", ",", "kmap", ")", "\n", "sql", "[", "'union'", "]", "=", "rebuild_sql_col", "(", "valid_col_units", ",", "sql", "[", "'union'", "]", ",", "kmap", ")", "\n", "\n", "return", "sql", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.build_foreign_key_map": [[875, 913], ["set", "k_list.append", "evaluation.build_foreign_key_map.keyset_in_list"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "build_foreign_key_map", "(", "entry", ")", ":", "\n", "    ", "cols_orig", "=", "entry", "[", "\"column_names_original\"", "]", "\n", "tables_orig", "=", "entry", "[", "\"table_names_original\"", "]", "\n", "\n", "# rebuild cols corresponding to idmap in Schema", "\n", "cols", "=", "[", "]", "\n", "for", "col_orig", "in", "cols_orig", ":", "\n", "        ", "if", "col_orig", "[", "0", "]", ">=", "0", ":", "\n", "            ", "t", "=", "tables_orig", "[", "col_orig", "[", "0", "]", "]", "\n", "c", "=", "col_orig", "[", "1", "]", "\n", "cols", ".", "append", "(", "\"__\"", "+", "t", ".", "lower", "(", ")", "+", "\".\"", "+", "c", ".", "lower", "(", ")", "+", "\"__\"", ")", "\n", "", "else", ":", "\n", "            ", "cols", ".", "append", "(", "\"__all__\"", ")", "\n", "\n", "", "", "def", "keyset_in_list", "(", "k1", ",", "k2", ",", "k_list", ")", ":", "\n", "        ", "for", "k_set", "in", "k_list", ":", "\n", "            ", "if", "k1", "in", "k_set", "or", "k2", "in", "k_set", ":", "\n", "                ", "return", "k_set", "\n", "", "", "new_k_set", "=", "set", "(", ")", "\n", "k_list", ".", "append", "(", "new_k_set", ")", "\n", "return", "new_k_set", "\n", "\n", "", "foreign_key_list", "=", "[", "]", "\n", "foreign_keys", "=", "entry", "[", "\"foreign_keys\"", "]", "\n", "for", "fkey", "in", "foreign_keys", ":", "\n", "        ", "key1", ",", "key2", "=", "fkey", "\n", "key_set", "=", "keyset_in_list", "(", "key1", ",", "key2", ",", "foreign_key_list", ")", "\n", "key_set", ".", "add", "(", "key1", ")", "\n", "key_set", ".", "add", "(", "key2", ")", "\n", "\n", "", "foreign_key_map", "=", "{", "}", "\n", "for", "key_set", "in", "foreign_key_list", ":", "\n", "        ", "sorted_list", "=", "sorted", "(", "list", "(", "key_set", ")", ")", "\n", "midx", "=", "sorted_list", "[", "0", "]", "\n", "for", "idx", "in", "sorted_list", ":", "\n", "            ", "foreign_key_map", "[", "cols", "[", "idx", "]", "]", "=", "cols", "[", "midx", "]", "\n", "\n", "", "", "return", "foreign_key_map", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ssp.evaluation.build_foreign_key_map_from_json": [[915, 922], ["open", "json.load", "evaluation.build_foreign_key_map"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.build_foreign_key_map"], ["", "def", "build_foreign_key_map_from_json", "(", "table", ")", ":", "\n", "    ", "with", "open", "(", "table", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "tables", "=", "{", "}", "\n", "for", "entry", "in", "data", ":", "\n", "        ", "tables", "[", "entry", "[", "'db_id'", "]", "]", "=", "build_foreign_key_map", "(", "entry", ")", "\n", "", "return", "tables", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.Schema.__init__": [[52, 55], ["process_sql.Schema._map"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.preprocess.schema.Schema._map"], ["def", "__init__", "(", "self", ",", "schema", ")", ":", "\n", "        ", "self", ".", "_schema", "=", "schema", "\n", "self", ".", "_idMap", "=", "self", ".", "_map", "(", "self", ".", "_schema", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.Schema.schema": [[56, 59], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "schema", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_schema", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.Schema.idMap": [[60, 63], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "idMap", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_idMap", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.Schema._map": [[64, 77], ["schema.items", "key.lower", "key.lower", "val.lower", "val.lower", "key.lower", "key.lower"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], ["", "def", "_map", "(", "self", ",", "schema", ")", ":", "\n", "        ", "idMap", "=", "{", "'*'", ":", "\"__all__\"", "}", "\n", "id", "=", "1", "\n", "for", "key", ",", "vals", "in", "schema", ".", "items", "(", ")", ":", "\n", "            ", "for", "val", "in", "vals", ":", "\n", "                ", "idMap", "[", "key", ".", "lower", "(", ")", "+", "\".\"", "+", "val", ".", "lower", "(", ")", "]", "=", "\"__\"", "+", "key", ".", "lower", "(", ")", "+", "\".\"", "+", "val", ".", "lower", "(", ")", "+", "\"__\"", "\n", "id", "+=", "1", "\n", "\n", "", "", "for", "key", "in", "schema", ":", "\n", "            ", "idMap", "[", "key", ".", "lower", "(", ")", "]", "=", "\"__\"", "+", "key", ".", "lower", "(", ")", "+", "\"__\"", "\n", "id", "+=", "1", "\n", "\n", "", "return", "idMap", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.get_schema": [[79, 101], ["sqlite3.connect", "sqlite3.connect.cursor", "conn.cursor.execute", "str", "conn.cursor.execute", "table[].lower", "conn.cursor.fetchall", "str", "col[].lower", "conn.cursor.fetchall"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.execute", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.execute"], ["", "", "def", "get_schema", "(", "db", ")", ":", "\n", "    ", "\"\"\"\n    Get database's schema, which is a dict with table name as key\n    and list of column names as value\n    :param db: database path\n    :return: schema dict\n    \"\"\"", "\n", "\n", "schema", "=", "{", "}", "\n", "conn", "=", "sqlite3", ".", "connect", "(", "db", ")", "\n", "cursor", "=", "conn", ".", "cursor", "(", ")", "\n", "\n", "# fetch table names", "\n", "cursor", ".", "execute", "(", "\"SELECT name FROM sqlite_master WHERE type='table';\"", ")", "\n", "tables", "=", "[", "str", "(", "table", "[", "0", "]", ".", "lower", "(", ")", ")", "for", "table", "in", "cursor", ".", "fetchall", "(", ")", "]", "\n", "\n", "# fetch table info", "\n", "for", "table", "in", "tables", ":", "\n", "        ", "cursor", ".", "execute", "(", "\"PRAGMA table_info({})\"", ".", "format", "(", "table", ")", ")", "\n", "schema", "[", "table", "]", "=", "[", "str", "(", "col", "[", "1", "]", ".", "lower", "(", ")", ")", "for", "col", "in", "cursor", ".", "fetchall", "(", ")", "]", "\n", "\n", "", "return", "schema", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.get_schema_from_json": [[103, 114], ["open", "json.load", "str", "entry[].lower", "str", "col[].lower"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load"], ["", "def", "get_schema_from_json", "(", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "schema", "=", "{", "}", "\n", "for", "entry", "in", "data", ":", "\n", "        ", "table", "=", "str", "(", "entry", "[", "'table'", "]", ".", "lower", "(", ")", ")", "\n", "cols", "=", "[", "str", "(", "col", "[", "'column_name'", "]", ".", "lower", "(", ")", ")", "for", "col", "in", "entry", "[", "'col_data'", "]", "]", "\n", "schema", "[", "table", "]", "=", "cols", "\n", "\n", "", "return", "schema", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.tokenize": [[116, 148], ["str", "string.replace.replace", "range", "range", "eq_idxs.reverse", "word.lower", "len", "enumerate", "len", "len", "nltk.word_tokenize", "enumerate"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.reverse"], ["", "def", "tokenize", "(", "string", ")", ":", "\n", "    ", "string", "=", "str", "(", "string", ")", "\n", "string", "=", "string", ".", "replace", "(", "\"\\'\"", ",", "\"\\\"\"", ")", "# ensures all string values wrapped by \"\" problem??", "\n", "quote_idxs", "=", "[", "idx", "for", "idx", ",", "char", "in", "enumerate", "(", "string", ")", "if", "char", "==", "'\"'", "]", "\n", "assert", "len", "(", "quote_idxs", ")", "%", "2", "==", "0", ",", "\"Unexpected quote\"", "\n", "\n", "# keep string value as token", "\n", "vals", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "quote_idxs", ")", "-", "1", ",", "-", "1", ",", "-", "2", ")", ":", "\n", "        ", "qidx1", "=", "quote_idxs", "[", "i", "-", "1", "]", "\n", "qidx2", "=", "quote_idxs", "[", "i", "]", "\n", "val", "=", "string", "[", "qidx1", ":", "qidx2", "+", "1", "]", "\n", "key", "=", "\"__val_{}_{}__\"", ".", "format", "(", "qidx1", ",", "qidx2", ")", "\n", "string", "=", "string", "[", ":", "qidx1", "]", "+", "key", "+", "string", "[", "qidx2", "+", "1", ":", "]", "\n", "vals", "[", "key", "]", "=", "val", "\n", "\n", "", "toks", "=", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "word_tokenize", "(", "string", ")", "]", "\n", "# replace with string value token", "\n", "for", "i", "in", "range", "(", "len", "(", "toks", ")", ")", ":", "\n", "        ", "if", "toks", "[", "i", "]", "in", "vals", ":", "\n", "            ", "toks", "[", "i", "]", "=", "vals", "[", "toks", "[", "i", "]", "]", "\n", "\n", "# find if there exists !=, >=, <=", "\n", "", "", "eq_idxs", "=", "[", "idx", "for", "idx", ",", "tok", "in", "enumerate", "(", "toks", ")", "if", "tok", "==", "\"=\"", "]", "\n", "eq_idxs", ".", "reverse", "(", ")", "\n", "prefix", "=", "(", "'!'", ",", "'>'", ",", "'<'", ")", "\n", "for", "eq_idx", "in", "eq_idxs", ":", "\n", "        ", "pre_tok", "=", "toks", "[", "eq_idx", "-", "1", "]", "\n", "if", "pre_tok", "in", "prefix", ":", "\n", "            ", "toks", "=", "toks", "[", ":", "eq_idx", "-", "1", "]", "+", "[", "pre_tok", "+", "\"=\"", "]", "+", "toks", "[", "eq_idx", "+", "1", ":", "]", "\n", "\n", "", "", "return", "toks", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.scan_alias": [[150, 157], ["enumerate"], "function", ["None"], ["", "def", "scan_alias", "(", "toks", ")", ":", "\n", "    ", "\"\"\"Scan the index of 'as' and build the map for all alias\"\"\"", "\n", "as_idxs", "=", "[", "idx", "for", "idx", ",", "tok", "in", "enumerate", "(", "toks", ")", "if", "tok", "==", "'as'", "]", "\n", "alias", "=", "{", "}", "\n", "for", "idx", "in", "as_idxs", ":", "\n", "        ", "alias", "[", "toks", "[", "idx", "+", "1", "]", "]", "=", "toks", "[", "idx", "-", "1", "]", "\n", "", "return", "alias", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.get_tables_with_alias": [[159, 165], ["process_sql.scan_alias"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.scan_alias"], ["", "def", "get_tables_with_alias", "(", "schema", ",", "toks", ")", ":", "\n", "    ", "tables", "=", "scan_alias", "(", "toks", ")", "\n", "for", "key", "in", "schema", ":", "\n", "        ", "assert", "key", "not", "in", "tables", ",", "\"Alias {} has the same name in table\"", ".", "format", "(", "key", ")", "\n", "tables", "[", "key", "]", "=", "key", "\n", "", "return", "tables", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_col": [[167, 189], ["tok.split", "len"], "function", ["None"], ["", "def", "parse_col", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n        :returns next idx, column id\n    \"\"\"", "\n", "tok", "=", "toks", "[", "start_idx", "]", "\n", "if", "tok", "==", "\"*\"", ":", "\n", "        ", "return", "start_idx", "+", "1", ",", "schema", ".", "idMap", "[", "tok", "]", "\n", "\n", "", "if", "'.'", "in", "tok", ":", "# if token is a composite", "\n", "        ", "alias", ",", "col", "=", "tok", ".", "split", "(", "'.'", ")", "\n", "key", "=", "tables_with_alias", "[", "alias", "]", "+", "\".\"", "+", "col", "\n", "return", "start_idx", "+", "1", ",", "schema", ".", "idMap", "[", "key", "]", "\n", "\n", "", "assert", "default_tables", "is", "not", "None", "and", "len", "(", "default_tables", ")", ">", "0", ",", "\"Default tables should not be None or empty\"", "\n", "\n", "for", "alias", "in", "default_tables", ":", "\n", "        ", "table", "=", "tables_with_alias", "[", "alias", "]", "\n", "if", "tok", "in", "schema", ".", "schema", "[", "table", "]", ":", "\n", "            ", "key", "=", "table", "+", "\".\"", "+", "tok", "\n", "return", "start_idx", "+", "1", ",", "schema", ".", "idMap", "[", "key", "]", "\n", "\n", "", "", "assert", "False", ",", "\"Error col: {}\"", ".", "format", "(", "tok", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_col_unit": [[191, 227], ["len", "AGG_OPS.index", "process_sql.parse_col", "AGG_OPS.index", "process_sql.parse_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_col"], ["", "def", "parse_col_unit", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n        :returns next idx, (agg_op id, col_id)\n    \"\"\"", "\n", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "isBlock", "=", "False", "\n", "isDistinct", "=", "False", "\n", "if", "toks", "[", "idx", "]", "==", "'('", ":", "\n", "        ", "isBlock", "=", "True", "\n", "idx", "+=", "1", "\n", "\n", "", "if", "toks", "[", "idx", "]", "in", "AGG_OPS", ":", "\n", "        ", "agg_id", "=", "AGG_OPS", ".", "index", "(", "toks", "[", "idx", "]", ")", "\n", "idx", "+=", "1", "\n", "assert", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "'('", "\n", "idx", "+=", "1", "\n", "if", "toks", "[", "idx", "]", "==", "\"distinct\"", ":", "\n", "            ", "idx", "+=", "1", "\n", "isDistinct", "=", "True", "\n", "", "idx", ",", "col_id", "=", "parse_col", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "assert", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "')'", "\n", "idx", "+=", "1", "\n", "return", "idx", ",", "(", "agg_id", ",", "col_id", ",", "isDistinct", ")", "\n", "\n", "", "if", "toks", "[", "idx", "]", "==", "\"distinct\"", ":", "\n", "        ", "idx", "+=", "1", "\n", "isDistinct", "=", "True", "\n", "", "agg_id", "=", "AGG_OPS", ".", "index", "(", "\"none\"", ")", "\n", "idx", ",", "col_id", "=", "parse_col", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "\n", "if", "isBlock", ":", "\n", "        ", "assert", "toks", "[", "idx", "]", "==", "')'", "\n", "idx", "+=", "1", "# skip ')'", "\n", "\n", "", "return", "idx", ",", "(", "agg_id", ",", "col_id", ",", "isDistinct", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_val_unit": [[229, 252], ["len", "UNIT_OPS.index", "process_sql.parse_col_unit", "UNIT_OPS.index", "process_sql.parse_col_unit"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_col_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_col_unit"], ["", "def", "parse_val_unit", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", "=", "None", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "isBlock", "=", "False", "\n", "if", "toks", "[", "idx", "]", "==", "'('", ":", "\n", "        ", "isBlock", "=", "True", "\n", "idx", "+=", "1", "\n", "\n", "", "col_unit1", "=", "None", "\n", "col_unit2", "=", "None", "\n", "unit_op", "=", "UNIT_OPS", ".", "index", "(", "'none'", ")", "\n", "\n", "idx", ",", "col_unit1", "=", "parse_col_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "in", "UNIT_OPS", ":", "\n", "        ", "unit_op", "=", "UNIT_OPS", ".", "index", "(", "toks", "[", "idx", "]", ")", "\n", "idx", "+=", "1", "\n", "idx", ",", "col_unit2", "=", "parse_col_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "\n", "", "if", "isBlock", ":", "\n", "        ", "assert", "toks", "[", "idx", "]", "==", "')'", "\n", "if", "toks", "[", "idx", "]", "==", "')'", ":", "\n", "# skip ')'", "\n", "             ", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_table_unit": [[254, 268], ["len"], "function", ["None"], ["\n", "\n", "", "def", "parse_table_unit", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ")", ":", "\n", "    ", "\"\"\"\n        :returns next idx, table id, table name\n    \"\"\"", "\n", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "# =============================================================================", "\n", "#     print(tables_with_alias, '\\n' * 2)", "\n", "#     print(tables_with_alias[toks[idx]], '\\n' * 2)", "\n", "#     print(toks, idx, '\\n'*4)", "\n", "# =============================================================================", "\n", "key", "=", "tables_with_alias", "[", "toks", "[", "idx", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_value": [[270, 302], ["len", "process_sql.parse_sql", "float", "process_sql.parse_col_unit"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_sql", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_col_unit"], ["        ", "idx", "+=", "3", "\n", "if", "toks", "[", "idx", "]", "==", "\",\"", ":", "\n", "# multiple aliases exist", "\n", "            ", "idx", "+=", "1", "\n", "", "", "else", ":", "\n", "        ", "idx", "+=", "1", "\n", "\n", "", "return", "idx", ",", "schema", ".", "idMap", "[", "key", "]", ",", "key", "\n", "\n", "\n", "", "def", "parse_value", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", "=", "None", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "\n", "isBlock", "=", "False", "\n", "if", "toks", "[", "idx", "]", "==", "'('", ":", "\n", "        ", "isBlock", "=", "True", "\n", "idx", "+=", "1", "\n", "\n", "", "if", "toks", "[", "idx", "]", "==", "'select'", ":", "\n", "        ", "idx", ",", "val", "=", "parse_sql", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ")", "\n", "", "elif", "\"\\\"\"", "in", "toks", "[", "idx", "]", ":", "# token is a string value", "\n", "        ", "val", "=", "toks", "[", "idx", "]", "\n", "idx", "+=", "1", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "val", "=", "float", "(", "toks", "[", "idx", "]", ")", "\n", "idx", "+=", "1", "\n", "", "except", ":", "\n", "            ", "end_idx", "=", "idx", "\n", "while", "end_idx", "<", "len_", "and", "toks", "[", "end_idx", "]", "!=", "','", "and", "toks", "[", "end_idx", "]", "!=", "')'", "and", "toks", "[", "end_idx", "]", "!=", "'and'", "and", "toks", "[", "end_idx", "]", "not", "in", "CLAUSE_KEYWORDS", "and", "toks", "[", "end_idx", "]", "not", "in", "JOIN_KEYWORDS", ":", "\n", "                    ", "end_idx", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_condition": [[304, 339], ["len", "process_sql.parse_val_unit", "WHERE_OPS.index", "conds.append", "WHERE_OPS.index", "process_sql.parse_value", "process_sql.parse_value", "process_sql.parse_value", "conds.append"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_val_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_value", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_value", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_value", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "idx", ",", "val", "=", "parse_col_unit", "(", "toks", "[", "start_idx", ":", "end_idx", "]", ",", "0", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "idx", "=", "end_idx", "\n", "\n", "", "", "if", "isBlock", ":", "\n", "# assert toks[idx] == ')'", "\n", "        ", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "')'", ":", "\n", "            ", "idx", "+=", "1", "\n", "\n", "", "", "return", "idx", ",", "val", "\n", "\n", "\n", "", "def", "parse_condition", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", "=", "None", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "conds", "=", "[", "]", "\n", "while", "idx", "<", "len_", ":", "\n", "\n", "        ", "if", "toks", "[", "idx", "]", "==", "'('", ":", "\n", "            ", "idx", ",", "subcond", "=", "parse_condition", "(", "toks", ",", "idx", "+", "1", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "conds", ".", "append", "(", "subcond", ")", "\n", "continue", "\n", "\n", "", "if", "toks", "[", "idx", "]", "==", "\")\"", ":", "\n", "            ", "if", "toks", "[", "idx", "+", "1", "]", "!=", "\";\"", ":", "\n", "                ", "idx", "+=", "1", "\n", "", "break", "\n", "\n", "", "if", "idx", ">=", "len_", "or", "(", "idx", "<", "len_", "and", "(", "toks", "[", "idx", "]", "in", "CLAUSE_KEYWORDS", "or", "toks", "[", "idx", "]", "==", "\";\"", "or", "toks", "[", "idx", "]", "in", "JOIN_KEYWORDS", ")", ")", ":", "\n", "            ", "break", "\n", "\n", "", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "in", "COND_OPS", ":", "\n", "            ", "conds", ".", "append", "(", "toks", "[", "idx", "]", ")", "\n", "idx", "+=", "1", "# skip and/or", "\n", "# continue", "\n", "", "idx", ",", "val_unit", "=", "parse_val_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "not_op", "=", "False", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_select": [[341, 364], ["len", "AGG_OPS.index", "process_sql.parse_val_unit", "val_units.append", "AGG_OPS.index"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_val_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["            ", "not_op", "=", "True", "\n", "idx", "+=", "1", "\n", "\n", "", "assert", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "in", "WHERE_OPS", ",", "\"Error condition: idx: {}, tok: {}\"", ".", "format", "(", "idx", ",", "toks", "[", "idx", "]", ")", "\n", "op_id", "=", "WHERE_OPS", ".", "index", "(", "toks", "[", "idx", "]", ")", "\n", "idx", "+=", "1", "\n", "val1", "=", "val2", "=", "None", "\n", "if", "op_id", "==", "WHERE_OPS", ".", "index", "(", "'between'", ")", ":", "# between..and... special case: dual values", "\n", "            ", "idx", ",", "val1", "=", "parse_value", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "assert", "toks", "[", "idx", "]", "==", "'and'", "\n", "idx", "+=", "1", "\n", "idx", ",", "val2", "=", "parse_value", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "", "else", ":", "# normal case: single value", "\n", "            ", "idx", ",", "val1", "=", "parse_value", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "val2", "=", "None", "\n", "\n", "", "conds", ".", "append", "(", "(", "not_op", ",", "op_id", ",", "val_unit", ",", "val1", ",", "val2", ")", ")", "\n", "\n", "", "return", "idx", ",", "conds", "\n", "\n", "\n", "", "def", "parse_select", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", "=", "None", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_from": [[366, 407], ["len", "toks.index", "process_sql.parse_sql", "table_units.append", "process_sql.parse_table_unit", "table_units.append", "default_tables.append", "process_sql.parse_condition", "conds.extend", "len", "conds.append"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_sql", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_table_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_condition", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["assert", "toks", "[", "idx", "]", "==", "'select'", ",", "\"'select' not found\"", "\n", "idx", "+=", "1", "\n", "isDistinct", "=", "False", "\n", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "'distinct'", ":", "\n", "        ", "idx", "+=", "1", "\n", "isDistinct", "=", "True", "\n", "", "val_units", "=", "[", "]", "\n", "while", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "not", "in", "CLAUSE_KEYWORDS", ":", "\n", "        ", "agg_id", "=", "AGG_OPS", ".", "index", "(", "\"none\"", ")", "\n", "if", "toks", "[", "idx", "]", "in", "AGG_OPS", ":", "\n", "            ", "agg_id", "=", "AGG_OPS", ".", "index", "(", "toks", "[", "idx", "]", ")", "\n", "idx", "+=", "1", "\n", "", "idx", ",", "val_unit", "=", "parse_val_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "val_units", ".", "append", "(", "(", "agg_id", ",", "val_unit", ")", ")", "\n", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "','", ":", "\n", "            ", "idx", "+=", "1", "# skip ','", "\n", "\n", "", "", "return", "idx", ",", "(", "isDistinct", ",", "val_units", ")", "\n", "\n", "\n", "", "def", "parse_from", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ")", ":", "\n", "    ", "\"\"\"\n    Assume in the from clause, all table units are combined with join\n    \"\"\"", "\n", "assert", "'from'", "in", "toks", "[", "start_idx", ":", "]", ",", "\"'from' not found\"", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "idx", "=", "toks", ".", "index", "(", "'from'", ",", "start_idx", ")", "+", "1", "\n", "default_tables", "=", "[", "]", "\n", "table_units", "=", "[", "]", "\n", "conds", "=", "[", "]", "\n", "while", "idx", "<", "len_", ":", "\n", "        ", "isBlock", "=", "False", "\n", "if", "toks", "[", "idx", "]", "==", "'('", ":", "\n", "            ", "isBlock", "=", "True", "\n", "idx", "+=", "1", "\n", "\n", "", "if", "toks", "[", "idx", "]", "==", "'select'", ":", "\n", "            ", "idx", ",", "sql", "=", "parse_sql", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ")", "\n", "table_units", ".", "append", "(", "(", "TABLE_TYPE", "[", "'sql'", "]", ",", "sql", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "'join'", ":", "\n", "                ", "idx", "+=", "1", "# skip join", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_where": [[409, 419], ["len", "process_sql.parse_condition"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_condition"], ["table_units", ".", "append", "(", "(", "TABLE_TYPE", "[", "'table_unit'", "]", ",", "table_unit", ")", ")", "\n", "default_tables", ".", "append", "(", "table_name", ")", "\n", "", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "\"on\"", ":", "\n", "            ", "idx", "+=", "1", "# skip on", "\n", "idx", ",", "this_conds", "=", "parse_condition", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "if", "len", "(", "conds", ")", ">", "0", ":", "\n", "                ", "conds", ".", "append", "(", "'and'", ")", "\n", "", "conds", ".", "extend", "(", "this_conds", ")", "\n", "\n", "", "if", "isBlock", ":", "\n", "# assert toks[idx] == ')'", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_group_by": [[421, 442], ["len", "process_sql.parse_col_unit", "col_units.append"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_col_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["                ", "idx", "+=", "1", "\n", "", "", "if", "idx", "<", "len_", "and", "(", "toks", "[", "idx", "]", "in", "CLAUSE_KEYWORDS", "or", "toks", "[", "idx", "]", "in", "(", "\")\"", ",", "\";\"", ")", ")", ":", "\n", "            ", "break", "\n", "\n", "", "", "return", "idx", ",", "table_units", ",", "conds", ",", "default_tables", "\n", "\n", "\n", "", "def", "parse_where", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "\n", "if", "idx", ">=", "len_", "or", "toks", "[", "idx", "]", "!=", "'where'", ":", "\n", "        ", "return", "idx", ",", "[", "]", "\n", "\n", "", "idx", "+=", "1", "\n", "idx", ",", "conds", "=", "parse_condition", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "return", "idx", ",", "conds", "\n", "\n", "\n", "", "def", "parse_group_by", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_order_by": [[444, 469], ["len", "process_sql.parse_val_unit", "val_units.append"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_val_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["\n", "if", "idx", ">=", "len_", "or", "toks", "[", "idx", "]", "!=", "'group'", ":", "\n", "        ", "return", "idx", ",", "col_units", "\n", "\n", "", "idx", "+=", "1", "\n", "assert", "toks", "[", "idx", "]", "==", "'by'", "\n", "idx", "+=", "1", "\n", "\n", "while", "idx", "<", "len_", "and", "not", "(", "toks", "[", "idx", "]", "in", "CLAUSE_KEYWORDS", "or", "toks", "[", "idx", "]", "in", "(", "\")\"", ",", "\";\"", ")", ")", ":", "\n", "        ", "idx", ",", "col_unit", "=", "parse_col_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "col_units", ".", "append", "(", "col_unit", ")", "\n", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "','", ":", "\n", "            ", "idx", "+=", "1", "# skip ','", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "", "return", "idx", ",", "col_units", "\n", "\n", "\n", "", "def", "parse_order_by", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "val_units", "=", "[", "]", "\n", "order_type", "=", "'asc'", "# default type is 'asc'", "\n", "\n", "if", "idx", ">=", "len_", "or", "toks", "[", "idx", "]", "!=", "'order'", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_having": [[471, 481], ["len", "process_sql.parse_condition"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_condition"], ["\n", "", "idx", "+=", "1", "\n", "assert", "toks", "[", "idx", "]", "==", "'by'", "\n", "idx", "+=", "1", "\n", "\n", "while", "idx", "<", "len_", "and", "not", "(", "toks", "[", "idx", "]", "in", "CLAUSE_KEYWORDS", "or", "toks", "[", "idx", "]", "in", "(", "\")\"", ",", "\";\"", ")", ")", ":", "\n", "        ", "idx", ",", "val_unit", "=", "parse_val_unit", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "val_units", ".", "append", "(", "val_unit", ")", "\n", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "in", "ORDER_OPS", ":", "\n", "            ", "order_type", "=", "toks", "[", "idx", "]", "\n", "idx", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_limit": [[483, 492], ["len", "int"], "function", ["None"], ["            ", "idx", "+=", "1", "# skip ','", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "", "return", "idx", ",", "(", "order_type", ",", "val_units", ")", "\n", "\n", "\n", "", "def", "parse_having", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_sql": [[494, 542], ["len", "process_sql.parse_from", "process_sql.parse_select", "process_sql.parse_where", "process_sql.parse_group_by", "process_sql.parse_having", "process_sql.parse_order_by", "process_sql.parse_limit", "process_sql.skip_semicolon", "process_sql.skip_semicolon", "process_sql.parse_sql"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_from", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_select", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_where", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_group_by", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_having", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_order_by", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.parse_limit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.skip_semicolon", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.skip_semicolon", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_sql"], ["if", "idx", ">=", "len_", "or", "toks", "[", "idx", "]", "!=", "'having'", ":", "\n", "        ", "return", "idx", ",", "[", "]", "\n", "\n", "", "idx", "+=", "1", "\n", "idx", ",", "conds", "=", "parse_condition", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "return", "idx", ",", "conds", "\n", "\n", "\n", "", "def", "parse_limit", "(", "toks", ",", "start_idx", ")", ":", "\n", "    ", "idx", "=", "start_idx", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "\n", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "==", "'limit'", ":", "\n", "        ", "idx", "+=", "2", "\n", "return", "idx", ",", "int", "(", "toks", "[", "idx", "-", "1", "]", ")", "\n", "\n", "", "return", "idx", ",", "None", "\n", "\n", "\n", "", "def", "parse_sql", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ")", ":", "\n", "    ", "isBlock", "=", "False", "# indicate whether this is a block of sql/sub-sql", "\n", "len_", "=", "len", "(", "toks", ")", "\n", "idx", "=", "start_idx", "\n", "\n", "sql", "=", "{", "}", "\n", "if", "toks", "[", "idx", "]", "==", "'('", ":", "\n", "        ", "isBlock", "=", "True", "\n", "idx", "+=", "1", "\n", "# parse from clause in order to get default tables", "\n", "", "from_end_idx", ",", "table_units", ",", "conds", ",", "default_tables", "=", "parse_from", "(", "toks", ",", "start_idx", ",", "tables_with_alias", ",", "schema", ")", "\n", "sql", "[", "'from'", "]", "=", "{", "'table_units'", ":", "table_units", ",", "'conds'", ":", "conds", "}", "\n", "# select clause", "\n", "_", ",", "select_col_units", "=", "parse_select", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "idx", "=", "from_end_idx", "\n", "sql", "[", "'select'", "]", "=", "select_col_units", "\n", "# where clause", "\n", "idx", ",", "where_conds", "=", "parse_where", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "sql", "[", "'where'", "]", "=", "where_conds", "\n", "# group by clause", "\n", "idx", ",", "group_col_units", "=", "parse_group_by", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "sql", "[", "'groupBy'", "]", "=", "group_col_units", "\n", "# having clause", "\n", "idx", ",", "having_conds", "=", "parse_having", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "sql", "[", "'having'", "]", "=", "having_conds", "\n", "# order by clause", "\n", "idx", ",", "order_col_units", "=", "parse_order_by", "(", "toks", ",", "idx", ",", "tables_with_alias", ",", "schema", ",", "default_tables", ")", "\n", "sql", "[", "'orderBy'", "]", "=", "order_col_units", "\n", "# limit clause", "\n", "idx", ",", "limit_val", "=", "parse_limit", "(", "toks", ",", "idx", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.load_data": [[544, 548], ["open", "json.load"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load"], ["\n", "idx", "=", "skip_semicolon", "(", "toks", ",", "idx", ")", "\n", "if", "isBlock", ":", "\n", "        ", "assert", "toks", "[", "idx", "]", "==", "')'", "\n", "idx", "+=", "1", "# skip ')'", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.get_sql": [[550, 556], ["process_sql.tokenize", "process_sql.get_tables_with_alias", "process_sql.parse_sql"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEncPreproc.tokenize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.get_tables_with_alias", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_sql"], ["\n", "# intersect/union/except clause", "\n", "for", "op", "in", "SQL_OPS", ":", "# initialize IUE", "\n", "        ", "sql", "[", "op", "]", "=", "None", "\n", "", "if", "idx", "<", "len_", "and", "toks", "[", "idx", "]", "in", "SQL_OPS", ":", "\n", "        ", "sql_op", "=", "toks", "[", "idx", "]", "\n", "idx", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.skip_semicolon": [[558, 563], ["len"], "function", ["None"], ["sql", "[", "sql_op", "]", "=", "IUE_sql", "\n", "", "return", "idx", ",", "sql", "\n", "\n", "\n", "", "def", "load_data", "(", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ")", "as", "f", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.Evaluator.__init__": [[362, 385], ["evaluation.Evaluator.kmaps.keys", "os.path.join", "third_party.spider.process_sql.Schema", "third_party.spider.process_sql.get_schema"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.get_schema"], ["    ", "\"\"\"A simple evaluator\"\"\"", "\n", "def", "__init__", "(", "self", ",", "db_dir", ",", "kmaps", ",", "etype", ")", ":", "\n", "        ", "self", ".", "db_dir", "=", "db_dir", "\n", "self", ".", "kmaps", "=", "kmaps", "\n", "self", ".", "etype", "=", "etype", "\n", "\n", "self", ".", "db_paths", "=", "{", "}", "\n", "self", ".", "schemas", "=", "{", "}", "\n", "for", "db_name", "in", "self", ".", "kmaps", ".", "keys", "(", ")", ":", "\n", "            ", "db_path", "=", "os", ".", "path", ".", "join", "(", "db_dir", ",", "db_name", ",", "db_name", "+", "'.sqlite'", ")", "\n", "self", ".", "db_paths", "[", "db_name", "]", "=", "db_path", "\n", "self", ".", "schemas", "[", "db_name", "]", "=", "Schema", "(", "get_schema", "(", "db_path", ")", ")", "\n", "\n", "", "self", ".", "scores", "=", "{", "\n", "level", ":", "{", "\n", "'count'", ":", "0", ",", "\n", "'partial'", ":", "{", "\n", "type_", ":", "{", "'acc'", ":", "0.", ",", "'rec'", ":", "0.", ",", "'f1'", ":", "0.", ",", "'acc_count'", ":", "0", ",", "'rec_count'", ":", "0", "}", "\n", "for", "type_", "in", "PARTIAL_TYPES", "\n", "}", ",", "\n", "'exact'", ":", "0.", ",", "\n", "'exec'", ":", "0", ",", "\n", "'empty_sql'", ":", "0", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.Evaluator.eval_hardness": [[387, 404], ["evaluation.count_component1", "evaluation.count_component2", "evaluation.count_others"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_component1", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_component2", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_others"], ["}", "\n", "\n", "", "@", "staticmethod", "\n", "def", "eval_hardness", "(", "sql", ")", ":", "\n", "        ", "count_comp1_", "=", "count_component1", "(", "sql", ")", "\n", "count_comp2_", "=", "count_component2", "(", "sql", ")", "\n", "count_others_", "=", "count_others", "(", "sql", ")", "\n", "\n", "if", "count_comp1_", "<=", "1", "and", "count_others_", "==", "0", "and", "count_comp2_", "==", "0", ":", "\n", "            ", "return", "\"easy\"", "\n", "", "elif", "(", "count_others_", "<=", "2", "and", "count_comp1_", "<=", "1", "and", "count_comp2_", "==", "0", ")", "or", "(", "count_comp1_", "<=", "2", "and", "count_others_", "<", "2", "and", "count_comp2_", "==", "0", ")", ":", "\n", "            ", "return", "\"medium\"", "\n", "", "elif", "(", "count_others_", ">", "2", "and", "count_comp1_", "<=", "2", "and", "count_comp2_", "==", "0", ")", "or", "(", "2", "<", "count_comp1_", "<=", "3", "and", "count_others_", "<=", "2", "and", "count_comp2_", "==", "0", ")", "or", "(", "count_comp1_", "<=", "1", "and", "count_others_", "==", "0", "and", "count_comp2_", "<=", "1", ")", ":", "\n", "            ", "return", "\"hard\"", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.Evaluator.eval_exact_match": [[405, 415], ["list", "partial_scores.items", "len", "sorted", "sorted"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], ["            ", "return", "\"extra\"", "\n", "\n", "", "", "@", "classmethod", "\n", "def", "eval_exact_match", "(", "cls", ",", "pred", ",", "label", ",", "partial_scores", ")", ":", "\n", "        ", "for", "_", ",", "score", "in", "list", "(", "partial_scores", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "score", "[", "'f1'", "]", "!=", "1", ":", "\n", "                ", "return", "0", "\n", "", "", "if", "len", "(", "label", "[", "'from'", "]", "[", "'table_units'", "]", ")", ">", "0", ":", "\n", "            ", "label_tables", "=", "sorted", "(", "label", "[", "'from'", "]", "[", "'table_units'", "]", ")", "\n", "pred_tables", "=", "sorted", "(", "pred", "[", "'from'", "]", "[", "'table_units'", "]", ")", "\n", "return", "label_tables", "==", "pred_tables", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.Evaluator.eval_partial_match": [[416, 457], ["evaluation.eval_sel", "evaluation.get_scores", "evaluation.get_scores", "evaluation.eval_where", "evaluation.get_scores", "evaluation.get_scores", "evaluation.eval_group", "evaluation.get_scores", "evaluation.eval_having", "evaluation.get_scores", "evaluation.eval_order", "evaluation.get_scores", "evaluation.eval_and_or", "evaluation.get_scores", "evaluation.eval_IUEN", "evaluation.get_scores", "evaluation.eval_keywords", "evaluation.get_scores"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_sel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_where", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_group", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_having", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_order", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_and_or", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_IUEN", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_keywords", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores"], ["", "return", "1", "\n", "\n", "", "@", "classmethod", "\n", "def", "eval_partial_match", "(", "cls", ",", "pred", ",", "label", ")", ":", "\n", "        ", "res", "=", "{", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", ",", "cnt_wo_agg", "=", "eval_sel", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'select'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt_wo_agg", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'select(no AGG)'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", ",", "cnt_wo_agg", "=", "eval_where", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'where'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt_wo_agg", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'where(no OP)'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_group", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'group(no Having)'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_having", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'group'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_order", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'order'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_and_or", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'and/or'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_IUEN", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'IUEN'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_keywords", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "'keywords'", "]", "=", "{", "'acc'", ":", "acc", ",", "'rec'", ":", "rec", ",", "'f1'", ":", "f1", ",", "'label_total'", ":", "label_total", ",", "'pred_total'", ":", "pred_total", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.Evaluator.evaluate_one": [[458, 542], ["third_party.spider.process_sql.get_sql", "evaluation.Evaluator.eval_hardness", "evaluation.build_valid_col_units", "evaluation.rebuild_sql_val", "evaluation.rebuild_sql_col", "evaluation.build_valid_col_units", "evaluation.rebuild_sql_val", "evaluation.rebuild_sql_col", "third_party.spider.process_sql.get_sql", "evaluation.eval_exec_match", "evaluation.Evaluator.eval_partial_match", "evaluation.Evaluator.eval_exact_match"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.get_sql", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.eval_hardness", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.build_valid_col_units", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.build_valid_col_units", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.get_sql", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_exec_match", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.eval_partial_match", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.eval_exact_match"], ["return", "res", "\n", "\n", "", "def", "evaluate_one_by_exec_only", "(", "self", ",", "db_name", ",", "gold", ",", "predicted", ")", ":", "\n", "        ", "conn", "=", "sqlite3", ".", "connect", "(", "self", ".", "db_paths", "[", "db_name", "]", ")", "\n", "conn", ".", "text_factory", "=", "str", "#handle encoding errors", "\n", "cursor", "=", "conn", ".", "cursor", "(", ")", "\n", "\n", "@", "timeout_decorator", ".", "timeout", "(", "10", ",", "use_signals", "=", "False", ")", "\n", "def", "__inner_execute", "(", "query_str", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "cursor", ".", "execute", "(", "query_str", ")", "\n", "ret", "=", "cursor", ".", "fetchall", "(", ")", "\n", "", "except", ":", "\n", "                ", "ret", "=", "None", "\n", "", "return", "ret", "\n", "\n", "", "def", "_execute", "(", "query_str", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "ret", "=", "__inner_execute", "(", "query_str", ")", "\n", "return", "ret", "\n", "", "except", "timeout_decorator", ".", "TimeoutError", "as", "e", ":", "\n", "                ", "print", "(", "\"Execution Timeout\"", ")", "\n", "return", "None", "\n", "\n", "", "", "g_denotation", "=", "_execute", "(", "gold", ")", "\n", "p_denotation", "=", "_execute", "(", "predicted", ")", "\n", "\n", "if", "g_denotation", "is", "None", ":", "\n", "            ", "print", "(", "\"Gold SQL Execution Error\"", ")", "\n", "\n", "", "if", "g_denotation", "is", "None", "or", "len", "(", "g_denotation", ")", "==", "0", ":", "\n", "            ", "emptiness_flag", "=", "True", "\n", "self", ".", "scores", "[", "'all'", "]", "[", "'empty_sql'", "]", "+=", "1.0", "\n", "", "else", ":", "\n", "            ", "emptiness_flag", "=", "False", "\n", "\n", "", "if", "g_denotation", "==", "p_denotation", ":", "\n", "            ", "exe_flag", "=", "True", "\n", "", "else", ":", "\n", "            ", "exe_flag", "=", "False", "\n", "\n", "", "self", ".", "scores", "[", "\"all\"", "]", "[", "\"count\"", "]", "+=", "1", "\n", "if", "exe_flag", ":", "\n", "            ", "self", ".", "scores", "[", "'all'", "]", "[", "'exec'", "]", "+=", "1.0", "\n", "", "return", "{", "\"execution\"", ":", "exe_flag", ",", "\"predicted\"", ":", "predicted", ",", "\"gold\"", ":", "gold", ",", "\"empty_return\"", ":", "emptiness_flag", "}", "\n", "\n", "", "def", "evaluate_one", "(", "self", ",", "db_name", ",", "gold", ",", "predicted", ")", ":", "\n", "        ", "schema", "=", "self", ".", "schemas", "[", "db_name", "]", "\n", "g_sql", "=", "get_sql", "(", "schema", ",", "gold", ")", "\n", "hardness", "=", "self", ".", "eval_hardness", "(", "g_sql", ")", "\n", "self", ".", "scores", "[", "hardness", "]", "[", "'count'", "]", "+=", "1", "\n", "self", ".", "scores", "[", "'all'", "]", "[", "'count'", "]", "+=", "1", "\n", "\n", "parse_error", "=", "False", "\n", "try", ":", "\n", "            ", "p_sql", "=", "get_sql", "(", "schema", ",", "predicted", ")", "\n", "", "except", ":", "\n", "# If p_sql is not valid, then we will use an empty sql to evaluate with the correct sql", "\n", "            ", "p_sql", "=", "{", "\n", "\"except\"", ":", "None", ",", "\n", "\"from\"", ":", "{", "\n", "\"conds\"", ":", "[", "]", ",", "\n", "\"table_units\"", ":", "[", "]", "\n", "}", ",", "\n", "\"groupBy\"", ":", "[", "]", ",", "\n", "\"having\"", ":", "[", "]", ",", "\n", "\"intersect\"", ":", "None", ",", "\n", "\"limit\"", ":", "None", ",", "\n", "\"orderBy\"", ":", "[", "]", ",", "\n", "\"select\"", ":", "[", "\n", "False", ",", "\n", "[", "]", "\n", "]", ",", "\n", "\"union\"", ":", "None", ",", "\n", "\"where\"", ":", "[", "]", "\n", "}", "\n", "\n", "# TODO fix", "\n", "parse_error", "=", "True", "\n", "\n", "# rebuild sql for value evaluation", "\n", "", "kmap", "=", "self", ".", "kmaps", "[", "db_name", "]", "\n", "g_valid_col_units", "=", "build_valid_col_units", "(", "g_sql", "[", "'from'", "]", "[", "'table_units'", "]", ",", "schema", ")", "\n", "g_sql", "=", "rebuild_sql_val", "(", "g_sql", ")", "\n", "g_sql", "=", "rebuild_sql_col", "(", "g_valid_col_units", ",", "g_sql", ",", "kmap", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.Evaluator.finalize": [[544, 571], ["None"], "methods", ["None"], ["p_sql", "=", "rebuild_sql_val", "(", "p_sql", ")", "\n", "p_sql", "=", "rebuild_sql_col", "(", "p_valid_col_units", ",", "p_sql", ",", "kmap", ")", "\n", "\n", "if", "self", ".", "etype", "in", "[", "\"all\"", ",", "\"exec\"", "]", ":", "\n", "# added by bailin", "\n", "            ", "exe_flag", "=", "eval_exec_match", "(", "self", ".", "db_paths", "[", "db_name", "]", ",", "predicted", ",", "gold", ",", "p_sql", ",", "g_sql", ")", "\n", "if", "exe_flag", ":", "\n", "                ", "self", ".", "scores", "[", "hardness", "]", "[", "'exec'", "]", "+=", "1.0", "\n", "self", ".", "scores", "[", "'all'", "]", "[", "'exec'", "]", "+=", "1.0", "\n", "", "", "else", ":", "\n", "            ", "exe_flag", "=", "None", "\n", "\n", "", "if", "self", ".", "etype", "in", "[", "\"all\"", ",", "\"match\"", "]", ":", "\n", "            ", "partial_scores", "=", "self", ".", "eval_partial_match", "(", "p_sql", ",", "g_sql", ")", "\n", "exact_score", "=", "self", ".", "eval_exact_match", "(", "p_sql", ",", "g_sql", ",", "partial_scores", ")", "\n", "self", ".", "scores", "[", "hardness", "]", "[", "'exact'", "]", "+=", "exact_score", "\n", "self", ".", "scores", "[", "'all'", "]", "[", "'exact'", "]", "+=", "exact_score", "\n", "for", "type_", "in", "PARTIAL_TYPES", ":", "\n", "                ", "if", "partial_scores", "[", "type_", "]", "[", "'pred_total'", "]", ">", "0", ":", "\n", "                    ", "self", ".", "scores", "[", "hardness", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "+=", "partial_scores", "[", "type_", "]", "[", "'acc'", "]", "\n", "self", ".", "scores", "[", "hardness", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc_count'", "]", "+=", "1", "\n", "", "if", "partial_scores", "[", "type_", "]", "[", "'label_total'", "]", ">", "0", ":", "\n", "                    ", "self", ".", "scores", "[", "hardness", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "+=", "partial_scores", "[", "type_", "]", "[", "'rec'", "]", "\n", "self", ".", "scores", "[", "hardness", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec_count'", "]", "+=", "1", "\n", "", "self", ".", "scores", "[", "hardness", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'f1'", "]", "+=", "partial_scores", "[", "type_", "]", "[", "'f1'", "]", "\n", "if", "partial_scores", "[", "type_", "]", "[", "'pred_total'", "]", ">", "0", ":", "\n", "                    ", "self", ".", "scores", "[", "'all'", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "+=", "partial_scores", "[", "type_", "]", "[", "'acc'", "]", "\n", "self", ".", "scores", "[", "'all'", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc_count'", "]", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.Evaluator.isValidSQL": [[573, 582], ["sqlite3.connect", "sqlite3.connect.cursor", "sqlite3.connect.cursor.execute"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.execute"], ["                    ", "self", ".", "scores", "[", "'all'", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "+=", "partial_scores", "[", "type_", "]", "[", "'rec'", "]", "\n", "self", ".", "scores", "[", "'all'", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec_count'", "]", "+=", "1", "\n", "", "self", ".", "scores", "[", "'all'", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'f1'", "]", "+=", "partial_scores", "[", "type_", "]", "[", "'f1'", "]", "\n", "", "", "else", ":", "\n", "            ", "exact_score", "=", "None", "\n", "partial_scores", "=", "None", "\n", "\n", "", "return", "{", "\n", "'predicted'", ":", "predicted", ",", "\n", "'gold'", ":", "gold", ",", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.condition_has_or": [[61, 63], ["None"], "function", ["None"], ["\n", "def", "condition_has_or", "(", "conds", ")", ":", "\n", "    ", "return", "'or'", "in", "conds", "[", "1", ":", ":", "2", "]", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.condition_has_like": [[65, 67], ["WHERE_OPS.index"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["\n", "", "def", "condition_has_like", "(", "conds", ")", ":", "\n", "    ", "return", "WHERE_OPS", ".", "index", "(", "'like'", ")", "in", "[", "cond_unit", "[", "1", "]", "for", "cond_unit", "in", "conds", "[", ":", ":", "2", "]", "]", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.condition_has_sql": [[69, 77], ["type", "type"], "function", ["None"], ["\n", "", "def", "condition_has_sql", "(", "conds", ")", ":", "\n", "    ", "for", "cond_unit", "in", "conds", "[", ":", ":", "2", "]", ":", "\n", "        ", "val1", ",", "val2", "=", "cond_unit", "[", "3", "]", ",", "cond_unit", "[", "4", "]", "\n", "if", "val1", "is", "not", "None", "and", "type", "(", "val1", ")", "is", "dict", ":", "\n", "            ", "return", "True", "\n", "", "if", "val2", "is", "not", "None", "and", "type", "(", "val2", ")", "is", "dict", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.val_has_op": [[79, 81], ["UNIT_OPS.index"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["\n", "", "def", "val_has_op", "(", "val_unit", ")", ":", "\n", "    ", "return", "val_unit", "[", "0", "]", "!=", "UNIT_OPS", ".", "index", "(", "'none'", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.has_agg": [[83, 85], ["AGG_OPS.index"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["\n", "", "def", "has_agg", "(", "unit", ")", ":", "\n", "    ", "return", "unit", "[", "0", "]", "!=", "AGG_OPS", ".", "index", "(", "'none'", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.accuracy": [[87, 91], ["None"], "function", ["None"], ["\n", "", "def", "accuracy", "(", "count", ",", "total", ")", ":", "\n", "    ", "if", "count", "==", "total", ":", "\n", "        ", "return", "1", "\n", "", "return", "0", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.recall": [[93, 97], ["None"], "function", ["None"], ["\n", "", "def", "recall", "(", "count", ",", "total", ")", ":", "\n", "    ", "if", "count", "==", "total", ":", "\n", "        ", "return", "1", "\n", "", "return", "0", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.F1": [[99, 103], ["None"], "function", ["None"], ["\n", "", "def", "F1", "(", "acc", ",", "rec", ")", ":", "\n", "    ", "if", "(", "acc", "+", "rec", ")", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "return", "(", "2.", "*", "acc", "*", "rec", ")", "/", "(", "acc", "+", "rec", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.get_scores": [[105, 111], ["None"], "function", ["None"], ["\n", "", "def", "get_scores", "(", "count", ",", "pred_total", ",", "label_total", ")", ":", "\n", "    ", "if", "pred_total", "!=", "label_total", ":", "\n", "        ", "return", "0", ",", "0", ",", "0", "\n", "", "elif", "count", "==", "pred_total", ":", "\n", "        ", "return", "1", ",", "1", ",", "1", "\n", "", "return", "0", ",", "0", ",", "0", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.eval_sel": [[113, 131], ["len", "len", "label_sel.remove", "label_wo_agg.remove"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.remove", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.remove"], ["\n", "", "def", "eval_sel", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_sel", "=", "pred", "[", "'select'", "]", "[", "1", "]", "\n", "label_sel", "=", "label", "[", "'select'", "]", "[", "1", "]", "\n", "label_wo_agg", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "label_sel", "]", "\n", "pred_total", "=", "len", "(", "pred_sel", ")", "\n", "label_total", "=", "len", "(", "label_sel", ")", "\n", "cnt", "=", "0", "\n", "cnt_wo_agg", "=", "0", "\n", "\n", "for", "unit", "in", "pred_sel", ":", "\n", "        ", "if", "unit", "in", "label_sel", ":", "\n", "            ", "cnt", "+=", "1", "\n", "label_sel", ".", "remove", "(", "unit", ")", "\n", "", "if", "unit", "[", "1", "]", "in", "label_wo_agg", ":", "\n", "            ", "cnt_wo_agg", "+=", "1", "\n", "label_wo_agg", ".", "remove", "(", "unit", "[", "1", "]", ")", "\n", "\n", "", "", "return", "label_total", ",", "pred_total", ",", "cnt", ",", "cnt_wo_agg", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.eval_where": [[133, 151], ["len", "len", "label_conds.remove", "label_wo_agg.remove"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.remove", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.remove"], ["\n", "", "def", "eval_where", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_conds", "=", "[", "unit", "for", "unit", "in", "pred", "[", "'where'", "]", "[", ":", ":", "2", "]", "]", "\n", "label_conds", "=", "[", "unit", "for", "unit", "in", "label", "[", "'where'", "]", "[", ":", ":", "2", "]", "]", "\n", "label_wo_agg", "=", "[", "unit", "[", "2", "]", "for", "unit", "in", "label_conds", "]", "\n", "pred_total", "=", "len", "(", "pred_conds", ")", "\n", "label_total", "=", "len", "(", "label_conds", ")", "\n", "cnt", "=", "0", "\n", "cnt_wo_agg", "=", "0", "\n", "\n", "for", "unit", "in", "pred_conds", ":", "\n", "        ", "if", "unit", "in", "label_conds", ":", "\n", "            ", "cnt", "+=", "1", "\n", "label_conds", ".", "remove", "(", "unit", ")", "\n", "", "if", "unit", "[", "2", "]", "in", "label_wo_agg", ":", "\n", "            ", "cnt_wo_agg", "+=", "1", "\n", "label_wo_agg", ".", "remove", "(", "unit", "[", "2", "]", ")", "\n", "\n", "", "", "return", "label_total", ",", "pred_total", ",", "cnt", ",", "cnt_wo_agg", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.eval_group": [[153, 166], ["len", "len", "label_cols.remove", "pred.split", "label.split"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.remove"], ["\n", "", "def", "eval_group", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_cols", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "pred", "[", "'groupBy'", "]", "]", "\n", "label_cols", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "label", "[", "'groupBy'", "]", "]", "\n", "pred_total", "=", "len", "(", "pred_cols", ")", "\n", "label_total", "=", "len", "(", "label_cols", ")", "\n", "cnt", "=", "0", "\n", "pred_cols", "=", "[", "pred", ".", "split", "(", "\".\"", ")", "[", "1", "]", "if", "\".\"", "in", "pred", "else", "pred", "for", "pred", "in", "pred_cols", "]", "\n", "label_cols", "=", "[", "label", ".", "split", "(", "\".\"", ")", "[", "1", "]", "if", "\".\"", "in", "label", "else", "label", "for", "label", "in", "label_cols", "]", "\n", "for", "col", "in", "pred_cols", ":", "\n", "        ", "if", "col", "in", "label_cols", ":", "\n", "            ", "cnt", "+=", "1", "\n", "label_cols", ".", "remove", "(", "col", ")", "\n", "", "", "return", "label_total", ",", "pred_total", ",", "cnt", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.eval_having": [[168, 183], ["len", "len"], "function", ["None"], ["\n", "", "def", "eval_having", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_total", "=", "label_total", "=", "cnt", "=", "0", "\n", "if", "len", "(", "pred", "[", "'groupBy'", "]", ")", ">", "0", ":", "\n", "        ", "pred_total", "=", "1", "\n", "", "if", "len", "(", "label", "[", "'groupBy'", "]", ")", ">", "0", ":", "\n", "        ", "label_total", "=", "1", "\n", "\n", "", "pred_cols", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "pred", "[", "'groupBy'", "]", "]", "\n", "label_cols", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "label", "[", "'groupBy'", "]", "]", "\n", "if", "pred_total", "==", "label_total", "==", "1", "and", "pred_cols", "==", "label_cols", "and", "pred", "[", "'having'", "]", "==", "label", "[", "'having'", "]", ":", "\n", "        ", "cnt", "=", "1", "\n", "\n", "", "return", "label_total", ",", "pred_total", ",", "cnt", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.eval_order": [[185, 195], ["len", "len", "len"], "function", ["None"], ["\n", "", "def", "eval_order", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_total", "=", "label_total", "=", "cnt", "=", "0", "\n", "if", "len", "(", "pred", "[", "'orderBy'", "]", ")", ">", "0", ":", "\n", "        ", "pred_total", "=", "1", "\n", "", "if", "len", "(", "label", "[", "'orderBy'", "]", ")", ">", "0", ":", "\n", "        ", "label_total", "=", "1", "\n", "", "if", "len", "(", "label", "[", "'orderBy'", "]", ")", ">", "0", "and", "pred", "[", "'orderBy'", "]", "==", "label", "[", "'orderBy'", "]", "and", "(", "(", "pred", "[", "'limit'", "]", "is", "None", "and", "label", "[", "'limit'", "]", "is", "None", ")", "or", "(", "pred", "[", "'limit'", "]", "is", "not", "None", "and", "label", "[", "'limit'", "]", "is", "not", "None", ")", ")", ":", "\n", "        ", "cnt", "=", "1", "\n", "", "return", "label_total", ",", "pred_total", ",", "cnt", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.eval_and_or": [[197, 206], ["set", "set", "len", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set"], ["\n", "", "def", "eval_and_or", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_ao", "=", "pred", "[", "'where'", "]", "[", "1", ":", ":", "2", "]", "\n", "label_ao", "=", "label", "[", "'where'", "]", "[", "1", ":", ":", "2", "]", "\n", "pred_ao", "=", "set", "(", "pred_ao", ")", "\n", "label_ao", "=", "set", "(", "label_ao", ")", "\n", "\n", "if", "pred_ao", "==", "label_ao", ":", "\n", "        ", "return", "1", ",", "1", ",", "1", "\n", "", "return", "len", "(", "pred_ao", ")", ",", "len", "(", "label_ao", ")", ",", "0", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.get_nestedSQL": [[208, 222], ["nested.append", "nested.append", "nested.append", "type", "nested.append", "type", "nested.append"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["\n", "", "def", "get_nestedSQL", "(", "sql", ")", ":", "\n", "    ", "nested", "=", "[", "]", "\n", "for", "cond_unit", "in", "sql", "[", "'from'", "]", "[", "'conds'", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "'where'", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "'having'", "]", "[", ":", ":", "2", "]", ":", "\n", "        ", "if", "type", "(", "cond_unit", "[", "3", "]", ")", "is", "dict", ":", "\n", "            ", "nested", ".", "append", "(", "cond_unit", "[", "3", "]", ")", "\n", "", "if", "type", "(", "cond_unit", "[", "4", "]", ")", "is", "dict", ":", "\n", "            ", "nested", ".", "append", "(", "cond_unit", "[", "4", "]", ")", "\n", "", "", "if", "sql", "[", "'intersect'", "]", "is", "not", "None", ":", "\n", "        ", "nested", ".", "append", "(", "sql", "[", "'intersect'", "]", ")", "\n", "", "if", "sql", "[", "'except'", "]", "is", "not", "None", ":", "\n", "        ", "nested", ".", "append", "(", "sql", "[", "'except'", "]", ")", "\n", "", "if", "sql", "[", "'union'", "]", "is", "not", "None", ":", "\n", "        ", "nested", ".", "append", "(", "sql", "[", "'union'", "]", ")", "\n", "", "return", "nested", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.eval_nested": [[224, 236], ["evaluation.Evaluator.eval_partial_match", "evaluation.Evaluator.eval_exact_match"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.eval_partial_match", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.eval_exact_match"], ["\n", "", "def", "eval_nested", "(", "pred", ",", "label", ")", ":", "\n", "    ", "label_total", "=", "0", "\n", "pred_total", "=", "0", "\n", "cnt", "=", "0", "\n", "if", "pred", "is", "not", "None", ":", "\n", "        ", "pred_total", "+=", "1", "\n", "", "if", "label", "is", "not", "None", ":", "\n", "        ", "label_total", "+=", "1", "\n", "", "if", "pred", "is", "not", "None", "and", "label", "is", "not", "None", ":", "\n", "        ", "partial_scores", "=", "Evaluator", ".", "eval_partial_match", "(", "pred", ",", "label", ")", "\n", "cnt", "+=", "Evaluator", ".", "eval_exact_match", "(", "pred", ",", "label", ",", "partial_scores", ")", "\n", "", "return", "label_total", ",", "pred_total", ",", "cnt", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.eval_IUEN": [[238, 246], ["evaluation.eval_nested", "evaluation.eval_nested", "evaluation.eval_nested"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_nested", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_nested", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_nested"], ["\n", "", "def", "eval_IUEN", "(", "pred", ",", "label", ")", ":", "\n", "    ", "lt1", ",", "pt1", ",", "cnt1", "=", "eval_nested", "(", "pred", "[", "'intersect'", "]", ",", "label", "[", "'intersect'", "]", ")", "\n", "lt2", ",", "pt2", ",", "cnt2", "=", "eval_nested", "(", "pred", "[", "'except'", "]", ",", "label", "[", "'except'", "]", ")", "\n", "lt3", ",", "pt3", ",", "cnt3", "=", "eval_nested", "(", "pred", "[", "'union'", "]", ",", "label", "[", "'union'", "]", ")", "\n", "label_total", "=", "lt1", "+", "lt2", "+", "lt3", "\n", "pred_total", "=", "pt1", "+", "pt2", "+", "pt3", "\n", "cnt", "=", "cnt1", "+", "cnt2", "+", "cnt3", "\n", "return", "label_total", ",", "pred_total", ",", "cnt", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.get_keywords": [[248, 287], ["set", "len", "set.add", "len", "set.add", "len", "set.add", "len", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add", "len", "set.add", "len", "set.add", "len", "set.add", "len", "set.add", "WHERE_OPS.index", "WHERE_OPS.index"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["\n", "", "def", "get_keywords", "(", "sql", ")", ":", "\n", "    ", "res", "=", "set", "(", ")", "\n", "if", "len", "(", "sql", "[", "'where'", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "'where'", ")", "\n", "", "if", "len", "(", "sql", "[", "'groupBy'", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "'group'", ")", "\n", "", "if", "len", "(", "sql", "[", "'having'", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "'having'", ")", "\n", "", "if", "len", "(", "sql", "[", "'orderBy'", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "sql", "[", "'orderBy'", "]", "[", "0", "]", ")", "\n", "res", ".", "add", "(", "'order'", ")", "\n", "", "if", "sql", "[", "'limit'", "]", "is", "not", "None", ":", "\n", "        ", "res", ".", "add", "(", "'limit'", ")", "\n", "", "if", "sql", "[", "'except'", "]", "is", "not", "None", ":", "\n", "        ", "res", ".", "add", "(", "'except'", ")", "\n", "", "if", "sql", "[", "'union'", "]", "is", "not", "None", ":", "\n", "        ", "res", ".", "add", "(", "'union'", ")", "\n", "", "if", "sql", "[", "'intersect'", "]", "is", "not", "None", ":", "\n", "        ", "res", ".", "add", "(", "'intersect'", ")", "\n", "\n", "# or keyword", "\n", "", "ao", "=", "sql", "[", "'from'", "]", "[", "'conds'", "]", "[", "1", ":", ":", "2", "]", "+", "sql", "[", "'where'", "]", "[", "1", ":", ":", "2", "]", "+", "sql", "[", "'having'", "]", "[", "1", ":", ":", "2", "]", "\n", "if", "len", "(", "[", "token", "for", "token", "in", "ao", "if", "token", "==", "'or'", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "'or'", ")", "\n", "\n", "", "cond_units", "=", "sql", "[", "'from'", "]", "[", "'conds'", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "'where'", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "'having'", "]", "[", ":", ":", "2", "]", "\n", "# not keyword", "\n", "if", "len", "(", "[", "cond_unit", "for", "cond_unit", "in", "cond_units", "if", "cond_unit", "[", "0", "]", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "'not'", ")", "\n", "\n", "# in keyword", "\n", "", "if", "len", "(", "[", "cond_unit", "for", "cond_unit", "in", "cond_units", "if", "cond_unit", "[", "1", "]", "==", "WHERE_OPS", ".", "index", "(", "'in'", ")", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "'in'", ")", "\n", "\n", "# like keyword", "\n", "", "if", "len", "(", "[", "cond_unit", "for", "cond_unit", "in", "cond_units", "if", "cond_unit", "[", "1", "]", "==", "WHERE_OPS", ".", "index", "(", "'like'", ")", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "'like'", ")", "\n", "\n", "", "return", "res", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.eval_keywords": [[289, 300], ["evaluation.get_keywords", "evaluation.get_keywords", "len", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_keywords", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_keywords"], ["\n", "", "def", "eval_keywords", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_keywords", "=", "get_keywords", "(", "pred", ")", "\n", "label_keywords", "=", "get_keywords", "(", "label", ")", "\n", "pred_total", "=", "len", "(", "pred_keywords", ")", "\n", "label_total", "=", "len", "(", "label_keywords", ")", "\n", "cnt", "=", "0", "\n", "\n", "for", "k", "in", "pred_keywords", ":", "\n", "        ", "if", "k", "in", "label_keywords", ":", "\n", "            ", "cnt", "+=", "1", "\n", "", "", "return", "label_total", ",", "pred_total", ",", "cnt", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.count_agg": [[302, 304], ["len", "evaluation.has_agg"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.has_agg"], ["\n", "", "def", "count_agg", "(", "units", ")", ":", "\n", "    ", "return", "len", "(", "[", "unit", "for", "unit", "in", "units", "if", "has_agg", "(", "unit", ")", "]", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.count_component1": [[306, 325], ["len", "len", "len", "len", "len", "len", "len", "WHERE_OPS.index"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["\n", "", "def", "count_component1", "(", "sql", ")", ":", "\n", "    ", "count", "=", "0", "\n", "if", "len", "(", "sql", "[", "'where'", "]", ")", ">", "0", ":", "\n", "        ", "count", "+=", "1", "\n", "", "if", "len", "(", "sql", "[", "'groupBy'", "]", ")", ">", "0", ":", "\n", "        ", "count", "+=", "1", "\n", "", "if", "len", "(", "sql", "[", "'orderBy'", "]", ")", ">", "0", ":", "\n", "        ", "count", "+=", "1", "\n", "", "if", "sql", "[", "'limit'", "]", "is", "not", "None", ":", "\n", "        ", "count", "+=", "1", "\n", "", "if", "len", "(", "sql", "[", "'from'", "]", "[", "'table_units'", "]", ")", ">", "0", ":", "# JOIN", "\n", "        ", "count", "+=", "len", "(", "sql", "[", "'from'", "]", "[", "'table_units'", "]", ")", "-", "1", "\n", "\n", "", "ao", "=", "sql", "[", "'from'", "]", "[", "'conds'", "]", "[", "1", ":", ":", "2", "]", "+", "sql", "[", "'where'", "]", "[", "1", ":", ":", "2", "]", "+", "sql", "[", "'having'", "]", "[", "1", ":", ":", "2", "]", "\n", "count", "+=", "len", "(", "[", "token", "for", "token", "in", "ao", "if", "token", "==", "'or'", "]", ")", "\n", "cond_units", "=", "sql", "[", "'from'", "]", "[", "'conds'", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "'where'", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "'having'", "]", "[", ":", ":", "2", "]", "\n", "count", "+=", "len", "(", "[", "cond_unit", "for", "cond_unit", "in", "cond_units", "if", "cond_unit", "[", "1", "]", "==", "WHERE_OPS", ".", "index", "(", "'like'", ")", "]", ")", "\n", "\n", "return", "count", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.count_component2": [[327, 330], ["evaluation.get_nestedSQL", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_nestedSQL"], ["\n", "", "def", "count_component2", "(", "sql", ")", ":", "\n", "    ", "nested", "=", "get_nestedSQL", "(", "sql", ")", "\n", "return", "len", "(", "nested", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.count_others": [[332, 358], ["evaluation.count_agg", "evaluation.count_agg", "evaluation.count_agg", "evaluation.count_agg", "len", "evaluation.count_agg", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_agg", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_agg", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_agg", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_agg", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_agg"], ["\n", "", "def", "count_others", "(", "sql", ")", ":", "\n", "    ", "count", "=", "0", "\n", "# number of aggregation", "\n", "agg_count", "=", "count_agg", "(", "sql", "[", "'select'", "]", "[", "1", "]", ")", "\n", "agg_count", "+=", "count_agg", "(", "sql", "[", "'where'", "]", "[", ":", ":", "2", "]", ")", "\n", "agg_count", "+=", "count_agg", "(", "sql", "[", "'groupBy'", "]", ")", "\n", "if", "len", "(", "sql", "[", "'orderBy'", "]", ")", ">", "0", ":", "\n", "        ", "agg_count", "+=", "count_agg", "(", "[", "unit", "[", "1", "]", "for", "unit", "in", "sql", "[", "'orderBy'", "]", "[", "1", "]", "if", "unit", "[", "1", "]", "]", "+", "\n", "[", "unit", "[", "2", "]", "for", "unit", "in", "sql", "[", "'orderBy'", "]", "[", "1", "]", "if", "unit", "[", "2", "]", "]", ")", "\n", "", "agg_count", "+=", "count_agg", "(", "sql", "[", "'having'", "]", ")", "\n", "if", "agg_count", ">", "1", ":", "\n", "        ", "count", "+=", "1", "\n", "\n", "# number of select columns", "\n", "", "if", "len", "(", "sql", "[", "'select'", "]", "[", "1", "]", ")", ">", "1", ":", "\n", "        ", "count", "+=", "1", "\n", "\n", "# number of where conditions", "\n", "", "if", "len", "(", "sql", "[", "'where'", "]", ")", ">", "1", ":", "\n", "        ", "count", "+=", "1", "\n", "\n", "# number of group by clauses", "\n", "", "if", "len", "(", "sql", "[", "'groupBy'", "]", ")", ">", "1", ":", "\n", "        ", "count", "+=", "1", "\n", "\n", "", "return", "count", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.print_scores": [[584, 616], ["print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "function", ["None"], ["'predicted_parse_error'", ":", "parse_error", ",", "\n", "'hardness'", ":", "hardness", ",", "\n", "'exact'", ":", "exact_score", ",", "\n", "'partial'", ":", "partial_scores", "\n", "}", "\n", "\n", "", "def", "finalize", "(", "self", ")", ":", "\n", "        ", "scores", "=", "self", ".", "scores", "\n", "for", "level", "in", "LEVELS", ":", "\n", "            ", "if", "scores", "[", "level", "]", "[", "'count'", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "self", ".", "etype", "in", "[", "\"all\"", ",", "\"exec\"", "]", ":", "\n", "                ", "scores", "[", "level", "]", "[", "'exec'", "]", "/=", "scores", "[", "level", "]", "[", "'count'", "]", "\n", "scores", "[", "level", "]", "[", "'empty_sql'", "]", "/=", "scores", "[", "level", "]", "[", "'count'", "]", "\n", "\n", "", "if", "self", ".", "etype", "in", "[", "\"all\"", ",", "\"match\"", "]", ":", "\n", "                ", "scores", "[", "level", "]", "[", "'exact'", "]", "/=", "scores", "[", "level", "]", "[", "'count'", "]", "\n", "for", "type_", "in", "PARTIAL_TYPES", ":", "\n", "                    ", "if", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc_count'", "]", "==", "0", ":", "\n", "                        ", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "=", "0", "\n", "", "else", ":", "\n", "                        ", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "=", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "/", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc_count'", "]", "*", "1.0", "\n", "", "if", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec_count'", "]", "==", "0", ":", "\n", "                        ", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "=", "0", "\n", "", "else", ":", "\n", "                        ", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "=", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "/", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec_count'", "]", "*", "1.0", "\n", "", "if", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "==", "0", "and", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "==", "0", ":", "\n", "                        ", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'f1'", "]", "=", "1", "\n", "", "else", ":", "\n", "                        ", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'f1'", "]", "=", "2.0", "*", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "*", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "/", "(", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.evaluate": [[618, 638], ["evaluation.Evaluator", "zip", "evaluation.Evaluator.finalize", "evaluation.print_scores", "open", "open", "results.append", "l.strip().split", "l.strip().split", "evaluation.Evaluator.evaluate_one", "f.readlines", "f.readlines", "l.strip", "len", "l.strip", "len", "l.strip", "l.strip"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.infer_tree_traversal.InferenceTreeTraversal.finalize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.print_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.evaluate_one"], ["\n", "\n", "", "", "", "", "", "def", "isValidSQL", "(", "self", ",", "sql", ",", "db_id", ")", ":", "\n", "        ", "db", "=", "self", ".", "db_paths", "[", "db_id", "]", "\n", "conn", "=", "sqlite3", ".", "connect", "(", "db", ")", "\n", "cursor", "=", "conn", ".", "cursor", "(", ")", "\n", "try", ":", "\n", "            ", "cursor", ".", "execute", "(", "sql", ")", "\n", "", "except", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n", "\n", "", "", "def", "print_scores", "(", "scores", ",", "etype", ")", ":", "\n", "    ", "LEVELS", "=", "[", "'easy'", ",", "'medium'", ",", "'hard'", ",", "'extra'", ",", "'all'", "]", "\n", "PARTIAL_TYPES", "=", "[", "'select'", ",", "'select(no AGG)'", ",", "'where'", ",", "'where(no OP)'", ",", "'group(no Having)'", ",", "\n", "'group'", ",", "'order'", ",", "'and/or'", ",", "'IUEN'", ",", "'keywords'", "]", "\n", "\n", "print", "(", "\"{:20} {:20} {:20} {:20} {:20} {:20}\"", ".", "format", "(", "\"\"", ",", "*", "LEVELS", ")", ")", "\n", "counts", "=", "[", "scores", "[", "level", "]", "[", "'count'", "]", "for", "level", "in", "LEVELS", "]", "\n", "print", "(", "\"{:20} {:<20d} {:<20d} {:<20d} {:<20d} {:<20d}\"", ".", "format", "(", "\"count\"", ",", "*", "counts", ")", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.eval_exec_match": [[641, 668], ["sqlite3.connect", "sqlite3.connect.cursor", "conn.cursor.execute", "conn.cursor.fetchall", "conn.cursor.execute", "conn.cursor.fetchall", "enumerate", "evaluation.eval_exec_match.res_map"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.execute", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.execute"], ["        ", "print", "(", "'=====================   EXECUTION ACCURACY     ====================='", ")", "\n", "this_scores", "=", "[", "scores", "[", "level", "]", "[", "'exec'", "]", "for", "level", "in", "LEVELS", "]", "\n", "print", "(", "\"{:20} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f}\"", ".", "format", "(", "\"execution\"", ",", "*", "this_scores", ")", ")", "\n", "\n", "", "if", "etype", "in", "[", "\"all\"", ",", "\"match\"", "]", ":", "\n", "        ", "print", "(", "'\\n====================== EXACT MATCHING ACCURACY ====================='", ")", "\n", "exact_scores", "=", "[", "scores", "[", "level", "]", "[", "'exact'", "]", "for", "level", "in", "LEVELS", "]", "\n", "print", "(", "\"{:20} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f}\"", ".", "format", "(", "\"exact match\"", ",", "*", "exact_scores", ")", ")", "\n", "print", "(", "'\\n---------------------PARTIAL MATCHING ACCURACY----------------------'", ")", "\n", "for", "type_", "in", "PARTIAL_TYPES", ":", "\n", "            ", "this_scores", "=", "[", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'acc'", "]", "for", "level", "in", "LEVELS", "]", "\n", "print", "(", "\"{:20} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f}\"", ".", "format", "(", "type_", ",", "*", "this_scores", ")", ")", "\n", "\n", "", "print", "(", "'---------------------- PARTIAL MATCHING RECALL ----------------------'", ")", "\n", "for", "type_", "in", "PARTIAL_TYPES", ":", "\n", "            ", "this_scores", "=", "[", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'rec'", "]", "for", "level", "in", "LEVELS", "]", "\n", "print", "(", "\"{:20} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f}\"", ".", "format", "(", "type_", ",", "*", "this_scores", ")", ")", "\n", "\n", "", "print", "(", "'---------------------- PARTIAL MATCHING F1 --------------------------'", ")", "\n", "for", "type_", "in", "PARTIAL_TYPES", ":", "\n", "            ", "this_scores", "=", "[", "scores", "[", "level", "]", "[", "'partial'", "]", "[", "type_", "]", "[", "'f1'", "]", "for", "level", "in", "LEVELS", "]", "\n", "print", "(", "\"{:20} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f}\"", ".", "format", "(", "type_", ",", "*", "this_scores", ")", ")", "\n", "\n", "\n", "", "", "", "def", "evaluate", "(", "gold", ",", "predict", ",", "db_dir", ",", "etype", ",", "kmaps", ")", ":", "\n", "    ", "with", "open", "(", "gold", ")", "as", "f", ":", "\n", "        ", "glist", "=", "[", "l", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "for", "l", "in", "f", ".", "readlines", "(", ")", "if", "len", "(", "l", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.rebuild_cond_unit_val": [[671, 685], ["type", "evaluation.rebuild_sql_val", "type", "evaluation.rebuild_sql_val"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_val"], ["# plist = [(\"select max(Share),min(Share) from performance where Type != 'terminal'\", \"orchestra\")]", "\n", "# glist = [(\"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != 'Live final'\", \"orchestra\")]", "\n", "", "evaluator", "=", "Evaluator", "(", "db_dir", ",", "kmaps", ",", "etype", ")", "\n", "results", "=", "[", "]", "\n", "for", "p", ",", "g", "in", "zip", "(", "plist", ",", "glist", ")", ":", "\n", "        ", "predicted", ",", "=", "p", "\n", "gold", ",", "db_name", "=", "g", "\n", "results", ".", "append", "(", "evaluator", ".", "evaluate_one", "(", "db_name", ",", "gold", ",", "predicted", ")", ")", "\n", "", "evaluator", ".", "finalize", "(", ")", "\n", "\n", "print_scores", "(", "evaluator", ".", "scores", ",", "etype", ")", "\n", "return", "{", "\n", "'per_item'", ":", "results", ",", "\n", "'total_scores'", ":", "evaluator", ".", "scores", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.rebuild_condition_val": [[687, 698], ["enumerate", "res.append", "res.append", "evaluation.rebuild_cond_unit_val"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_cond_unit_val"], ["\n", "", "def", "eval_exec_match", "(", "db", ",", "p_str", ",", "g_str", ",", "pred", ",", "gold", ")", ":", "\n", "    ", "\"\"\"\n    return 1 if the values between prediction and gold are matching\n    in the corresponding index. Currently not support multiple col_unit(pairs).\n    \"\"\"", "\n", "conn", "=", "sqlite3", ".", "connect", "(", "db", ")", "\n", "conn", ".", "text_factory", "=", "bytes", "#handle encoding errors", "\n", "cursor", "=", "conn", ".", "cursor", "(", ")", "\n", "try", ":", "\n", "        ", "cursor", ".", "execute", "(", "p_str", ")", "\n", "p_res", "=", "cursor", ".", "fetchall", "(", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.rebuild_sql_val": [[700, 712], ["evaluation.rebuild_condition_val", "evaluation.rebuild_condition_val", "evaluation.rebuild_condition_val", "evaluation.rebuild_sql_val", "evaluation.rebuild_sql_val", "evaluation.rebuild_sql_val"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_condition_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_condition_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_condition_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_val"], ["        ", "return", "False", "\n", "\n", "", "cursor", ".", "execute", "(", "g_str", ")", "\n", "q_res", "=", "cursor", ".", "fetchall", "(", ")", "\n", "\n", "def", "res_map", "(", "res", ",", "val_units", ")", ":", "\n", "        ", "rmap", "=", "{", "}", "\n", "for", "idx", ",", "val_unit", "in", "enumerate", "(", "val_units", ")", ":", "\n", "            ", "key", "=", "tuple", "(", "val_unit", "[", "1", "]", ")", "if", "not", "val_unit", "[", "2", "]", "else", "(", "val_unit", "[", "0", "]", ",", "tuple", "(", "val_unit", "[", "1", "]", ")", ",", "tuple", "(", "val_unit", "[", "2", "]", ")", ")", "\n", "rmap", "[", "key", "]", "=", "[", "r", "[", "idx", "]", "for", "r", "in", "res", "]", "\n", "", "return", "rmap", "\n", "\n", "", "p_val_units", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "pred", "[", "'select'", "]", "[", "1", "]", "]", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.build_valid_col_units": [[715, 723], ["list", "schema.idMap.values", "valid_col_units.append", "value.index"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.values", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["\n", "\n", "# Rebuild SQL functions for value evaluation", "\n", "", "def", "rebuild_cond_unit_val", "(", "cond_unit", ")", ":", "\n", "    ", "if", "cond_unit", "is", "None", "or", "not", "DISABLE_VALUE", ":", "\n", "        ", "return", "cond_unit", "\n", "\n", "", "not_op", ",", "op_id", ",", "val_unit", ",", "val1", ",", "val2", "=", "cond_unit", "\n", "if", "type", "(", "val1", ")", "is", "not", "dict", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.rebuild_col_unit_col": [[725, 735], ["None"], "function", ["None"], ["", "else", ":", "\n", "        ", "val1", "=", "rebuild_sql_val", "(", "val1", ")", "\n", "", "if", "type", "(", "val2", ")", "is", "not", "dict", ":", "\n", "        ", "val2", "=", "None", "\n", "", "else", ":", "\n", "        ", "val2", "=", "rebuild_sql_val", "(", "val2", ")", "\n", "", "return", "not_op", ",", "op_id", ",", "val_unit", ",", "val1", ",", "val2", "\n", "\n", "\n", "", "def", "rebuild_condition_val", "(", "condition", ")", ":", "\n", "    ", "if", "condition", "is", "None", "or", "not", "DISABLE_VALUE", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.rebuild_val_unit_col": [[737, 745], ["evaluation.rebuild_col_unit_col", "evaluation.rebuild_col_unit_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_col_unit_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_col_unit_col"], ["\n", "", "res", "=", "[", "]", "\n", "for", "idx", ",", "it", "in", "enumerate", "(", "condition", ")", ":", "\n", "        ", "if", "idx", "%", "2", "==", "0", ":", "\n", "            ", "res", ".", "append", "(", "rebuild_cond_unit_val", "(", "it", ")", ")", "\n", "", "else", ":", "\n", "            ", "res", ".", "append", "(", "it", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.rebuild_table_unit_col": [[747, 755], ["isinstance", "evaluation.rebuild_col_unit_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_col_unit_col"], ["", "def", "rebuild_sql_val", "(", "sql", ")", ":", "\n", "    ", "if", "sql", "is", "None", "or", "not", "DISABLE_VALUE", ":", "\n", "        ", "return", "sql", "\n", "\n", "", "sql", "[", "'from'", "]", "[", "'conds'", "]", "=", "rebuild_condition_val", "(", "sql", "[", "'from'", "]", "[", "'conds'", "]", ")", "\n", "sql", "[", "'having'", "]", "=", "rebuild_condition_val", "(", "sql", "[", "'having'", "]", ")", "\n", "sql", "[", "'where'", "]", "=", "rebuild_condition_val", "(", "sql", "[", "'where'", "]", ")", "\n", "sql", "[", "'intersect'", "]", "=", "rebuild_sql_val", "(", "sql", "[", "'intersect'", "]", ")", "\n", "sql", "[", "'except'", "]", "=", "rebuild_sql_val", "(", "sql", "[", "'except'", "]", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.rebuild_cond_unit_col": [[757, 764], ["evaluation.rebuild_val_unit_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_val_unit_col"], ["\n", "return", "sql", "\n", "\n", "\n", "# Rebuild SQL functions for foreign key evaluation", "\n", "", "def", "build_valid_col_units", "(", "table_units", ",", "schema", ")", ":", "\n", "    ", "col_ids", "=", "[", "table_unit", "[", "1", "]", "for", "table_unit", "in", "table_units", "if", "table_unit", "[", "0", "]", "==", "TABLE_TYPE", "[", "'table_unit'", "]", "]", "\n", "prefixs", "=", "[", "col_id", "[", ":", "-", "2", "]", "for", "col_id", "in", "col_ids", "]", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.rebuild_condition_col": [[766, 771], ["range", "len", "evaluation.rebuild_cond_unit_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_cond_unit_col"], ["for", "value", "in", "list", "(", "schema", ".", "idMap", ".", "values", "(", ")", ")", ":", "\n", "        ", "if", "'.'", "in", "value", "and", "value", "[", ":", "value", ".", "index", "(", "'.'", ")", "]", "in", "prefixs", ":", "\n", "            ", "valid_col_units", ".", "append", "(", "value", ")", "\n", "", "", "return", "valid_col_units", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.rebuild_select_col": [[773, 784], ["new_list.append", "evaluation.rebuild_val_unit_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_val_unit_col"], ["    ", "if", "col_unit", "is", "None", ":", "\n", "        ", "return", "col_unit", "\n", "\n", "", "agg_id", ",", "col_id", ",", "distinct", "=", "col_unit", "\n", "if", "col_id", "in", "kmap", "and", "col_id", "in", "valid_col_units", ":", "\n", "        ", "col_id", "=", "kmap", "[", "col_id", "]", "\n", "", "if", "DISABLE_DISTINCT", ":", "\n", "        ", "distinct", "=", "None", "\n", "", "return", "agg_id", ",", "col_id", ",", "distinct", "\n", "\n", "\n", "", "def", "rebuild_val_unit_col", "(", "valid_col_units", ",", "val_unit", ",", "kmap", ")", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.rebuild_from_col": [[786, 793], ["evaluation.rebuild_condition_col", "evaluation.rebuild_table_unit_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_condition_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_table_unit_col"], ["        ", "return", "val_unit", "\n", "\n", "", "unit_op", ",", "col_unit1", ",", "col_unit2", "=", "val_unit", "\n", "col_unit1", "=", "rebuild_col_unit_col", "(", "valid_col_units", ",", "col_unit1", ",", "kmap", ")", "\n", "col_unit2", "=", "rebuild_col_unit_col", "(", "valid_col_units", ",", "col_unit2", ",", "kmap", ")", "\n", "return", "unit_op", ",", "col_unit1", ",", "col_unit2", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.rebuild_group_by_col": [[795, 800], ["evaluation.rebuild_col_unit_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_col_unit_col"], ["    ", "if", "table_unit", "is", "None", ":", "\n", "        ", "return", "table_unit", "\n", "\n", "", "table_type", ",", "col_unit_or_sql", "=", "table_unit", "\n", "if", "isinstance", "(", "col_unit_or_sql", ",", "tuple", ")", ":", "\n", "        ", "col_unit_or_sql", "=", "rebuild_col_unit_col", "(", "valid_col_units", ",", "col_unit_or_sql", ",", "kmap", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.rebuild_order_by_col": [[802, 809], ["evaluation.rebuild_val_unit_col", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_val_unit_col"], ["\n", "\n", "", "def", "rebuild_cond_unit_col", "(", "valid_col_units", ",", "cond_unit", ",", "kmap", ")", ":", "\n", "    ", "if", "cond_unit", "is", "None", ":", "\n", "        ", "return", "cond_unit", "\n", "\n", "", "not_op", ",", "op_id", ",", "val_unit", ",", "val1", ",", "val2", "=", "cond_unit", "\n", "val_unit", "=", "rebuild_val_unit_col", "(", "valid_col_units", ",", "val_unit", ",", "kmap", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.rebuild_sql_col": [[811, 826], ["evaluation.rebuild_select_col", "evaluation.rebuild_from_col", "evaluation.rebuild_condition_col", "evaluation.rebuild_group_by_col", "evaluation.rebuild_order_by_col", "evaluation.rebuild_condition_col", "evaluation.rebuild_sql_col", "evaluation.rebuild_sql_col", "evaluation.rebuild_sql_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_select_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_from_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_condition_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_group_by_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_order_by_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_condition_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_col"], ["\n", "\n", "", "def", "rebuild_condition_col", "(", "valid_col_units", ",", "condition", ",", "kmap", ")", ":", "\n", "    ", "for", "idx", "in", "range", "(", "len", "(", "condition", ")", ")", ":", "\n", "        ", "if", "idx", "%", "2", "==", "0", ":", "\n", "            ", "condition", "[", "idx", "]", "=", "rebuild_cond_unit_col", "(", "valid_col_units", ",", "condition", "[", "idx", "]", ",", "kmap", ")", "\n", "", "", "return", "condition", "\n", "\n", "\n", "", "def", "rebuild_select_col", "(", "valid_col_units", ",", "sel", ",", "kmap", ")", ":", "\n", "    ", "if", "sel", "is", "None", ":", "\n", "        ", "return", "sel", "\n", "", "distinct", ",", "_list", "=", "sel", "\n", "new_list", "=", "[", "]", "\n", "for", "it", "in", "_list", ":", "\n", "        ", "agg_id", ",", "val_unit", "=", "it", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.build_foreign_key_map": [[828, 866], ["set", "k_list.append", "evaluation.build_foreign_key_map.keyset_in_list"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "if", "DISABLE_DISTINCT", ":", "\n", "        ", "distinct", "=", "None", "\n", "", "return", "distinct", ",", "new_list", "\n", "\n", "\n", "", "def", "rebuild_from_col", "(", "valid_col_units", ",", "from_", ",", "kmap", ")", ":", "\n", "    ", "if", "from_", "is", "None", ":", "\n", "        ", "return", "from_", "\n", "\n", "", "from_", "[", "'table_units'", "]", "=", "[", "rebuild_table_unit_col", "(", "valid_col_units", ",", "table_unit", ",", "kmap", ")", "for", "table_unit", "in", "from_", "[", "'table_units'", "]", "]", "\n", "from_", "[", "'conds'", "]", "=", "rebuild_condition_col", "(", "valid_col_units", ",", "from_", "[", "'conds'", "]", ",", "kmap", ")", "\n", "return", "from_", "\n", "\n", "\n", "", "def", "rebuild_group_by_col", "(", "valid_col_units", ",", "group_by", ",", "kmap", ")", ":", "\n", "    ", "if", "group_by", "is", "None", ":", "\n", "        ", "return", "group_by", "\n", "\n", "", "return", "[", "rebuild_col_unit_col", "(", "valid_col_units", ",", "col_unit", ",", "kmap", ")", "for", "col_unit", "in", "group_by", "]", "\n", "\n", "\n", "", "def", "rebuild_order_by_col", "(", "valid_col_units", ",", "order_by", ",", "kmap", ")", ":", "\n", "    ", "if", "order_by", "is", "None", "or", "len", "(", "order_by", ")", "==", "0", ":", "\n", "        ", "return", "order_by", "\n", "\n", "", "direction", ",", "val_units", "=", "order_by", "\n", "new_val_units", "=", "[", "rebuild_val_unit_col", "(", "valid_col_units", ",", "val_unit", ",", "kmap", ")", "for", "val_unit", "in", "val_units", "]", "\n", "return", "direction", ",", "new_val_units", "\n", "\n", "\n", "", "def", "rebuild_sql_col", "(", "valid_col_units", ",", "sql", ",", "kmap", ")", ":", "\n", "    ", "if", "sql", "is", "None", ":", "\n", "        ", "return", "sql", "\n", "\n", "", "sql", "[", "'select'", "]", "=", "rebuild_select_col", "(", "valid_col_units", ",", "sql", "[", "'select'", "]", ",", "kmap", ")", "\n", "sql", "[", "'from'", "]", "=", "rebuild_from_col", "(", "valid_col_units", ",", "sql", "[", "'from'", "]", ",", "kmap", ")", "\n", "sql", "[", "'where'", "]", "=", "rebuild_condition_col", "(", "valid_col_units", ",", "sql", "[", "'where'", "]", ",", "kmap", ")", "\n", "sql", "[", "'groupBy'", "]", "=", "rebuild_group_by_col", "(", "valid_col_units", ",", "sql", "[", "'groupBy'", "]", ",", "kmap", ")", "\n", "sql", "[", "'orderBy'", "]", "=", "rebuild_order_by_col", "(", "valid_col_units", ",", "sql", "[", "'orderBy'", "]", ",", "kmap", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.evaluation.build_foreign_key_map_from_json": [[868, 875], ["open", "json.load", "evaluation.build_foreign_key_map"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.build_foreign_key_map"], ["sql", "[", "'intersect'", "]", "=", "rebuild_sql_col", "(", "valid_col_units", ",", "sql", "[", "'intersect'", "]", ",", "kmap", ")", "\n", "sql", "[", "'except'", "]", "=", "rebuild_sql_col", "(", "valid_col_units", ",", "sql", "[", "'except'", "]", ",", "kmap", ")", "\n", "sql", "[", "'union'", "]", "=", "rebuild_sql_col", "(", "valid_col_units", ",", "sql", "[", "'union'", "]", ",", "kmap", ")", "\n", "\n", "return", "sql", "\n", "\n", "\n", "", "def", "build_foreign_key_map", "(", "entry", ")", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc_bert.SpiderEncoderState.find_word_occurrences": [[40, 46], ["len", "enumerate"], "methods", ["None"], ["def", "find_word_occurrences", "(", "self", ",", "token", ")", ":", "\n", "        ", "occurrences", "=", "[", "i", "for", "i", ",", "w", "in", "enumerate", "(", "self", ".", "words_for_copying", ")", "if", "w", "==", "token", "]", "\n", "if", "len", "(", "occurrences", ")", ">", "0", ":", "\n", "            ", "return", "occurrences", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc_bert.SpiderEncoderBertPreproc.__init__": [[48, 71], ["os.path.join", "collections.defaultdict", "set"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "save_path", ",", "\n", "context", ",", "\n", "bert_version", "=", "\"bert-base-uncased\"", ",", "\n", "compute_sc_link", "=", "True", ",", "\n", "compute_cv_link", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "data_dir", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"enc\"", ")", "\n", "self", ".", "texts", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "self", ".", "compute_sc_link", "=", "compute_sc_link", "\n", "self", ".", "compute_cv_link", "=", "compute_cv_link", "\n", "self", ".", "context_config", "=", "context", "\n", "\n", "self", ".", "relations", "=", "set", "(", ")", "\n", "\n", "# TODO: should get types from the data", "\n", "# column_types = [\"text\", \"number\", \"time\", \"boolean\", \"others\"]", "\n", "# self.tokenizer.add_tokens([f\"<type: {t}>\" for t in column_types])", "\n", "self", ".", "tokenizer_config", "=", "bert_version", "# lazy init", "\n", "\n", "self", ".", "context_cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc_bert.SpiderEncoderBertPreproc.tokenizer": [[72, 77], ["hasattr", "tensor2struct.modules.bert_tokenizer.BERTokenizer"], "methods", ["None"], ["", "@", "property", "\n", "def", "tokenizer", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "\"_tokenizer\"", ")", ":", "\n", "            ", "self", ".", "_tokenizer", "=", "bert_tokenizer", ".", "BERTokenizer", "(", "self", ".", "tokenizer_config", ")", "\n", "", "return", "self", ".", "_tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc_bert.SpiderEncoderBertPreproc.validate_item": [[78, 89], ["sum", "logger.info", "len", "sum", "len", "len"], "methods", ["None"], ["", "def", "validate_item", "(", "self", ",", "item", ",", "section", ")", ":", "\n", "        ", "num_words", "=", "(", "\n", "len", "(", "item", ".", "text", ")", "\n", "+", "sum", "(", "len", "(", "c", ".", "name", ")", "for", "c", "in", "item", ".", "schema", ".", "columns", ")", "\n", "+", "sum", "(", "len", "(", "t", ".", "name", ")", "for", "t", "in", "item", ".", "schema", ".", "tables", ")", "\n", ")", "\n", "if", "num_words", ">", "512", ":", "\n", "            ", "logger", ".", "info", "(", "f\"Found long seq in {item.schema.db_id}\"", ")", "\n", "return", "False", ",", "None", "\n", "", "else", ":", "\n", "            ", "return", "True", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc_bert.SpiderEncoderBertPreproc.add_item": [[90, 101], ["spider_enc_bert.SpiderEncoderBertPreproc.preprocess_item", "spider_enc_bert.SpiderEncoderBertPreproc.texts[].append", "itertools.chain", "preprocessed[].keys", "preprocessed[].keys", "preprocessed[].keys", "spider_enc_bert.SpiderEncoderBertPreproc.relations.add"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.DecoderPreproc.preprocess_item", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add"], ["", "", "def", "add_item", "(", "self", ",", "item", ",", "section", ",", "validation_info", ")", ":", "\n", "        ", "preprocessed", "=", "self", ".", "preprocess_item", "(", "item", ",", "validation_info", ")", "\n", "self", ".", "texts", "[", "section", "]", ".", "append", "(", "preprocessed", ")", "\n", "\n", "if", "section", "==", "\"train\"", ":", "\n", "            ", "for", "relation_name", "in", "itertools", ".", "chain", "(", "\n", "preprocessed", "[", "\"schema_relations\"", "]", ".", "keys", "(", ")", ",", "\n", "preprocessed", "[", "\"sc_relations\"", "]", ".", "keys", "(", ")", ",", "\n", "preprocessed", "[", "\"cv_relations\"", "]", ".", "keys", "(", ")", ",", "\n", ")", ":", "\n", "                ", "self", ".", "relations", ".", "add", "(", "relation_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc_bert.SpiderEncoderBertPreproc.clear_items": [[102, 104], ["collections.defaultdict"], "methods", ["None"], ["", "", "", "def", "clear_items", "(", "self", ")", ":", "\n", "        ", "self", ".", "texts", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc_bert.SpiderEncoderBertPreproc.preprocess_item": [[105, 147], ["spider_enc_bert.SpiderEncoderBertPreproc.tokenizer.tokenize_with_orig", "tensor2struct.utils.registry.construct.compute_schema_relations", "tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.construct.compute_schema_linking", "tensor2struct.utils.registry.construct.compute_cell_value_linking"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer.tokenize_with_orig", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.compute_schema_relations", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.compute_schema_linking", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.compute_cell_value_linking"], ["", "def", "preprocess_item", "(", "self", ",", "item", ",", "validation_info", ")", ":", "\n", "        ", "q_text", "=", "\" \"", ".", "join", "(", "item", ".", "text", ")", "\n", "\n", "# use the original words for copying, while they are not necessarily used for encoding", "\n", "# question_for_copying = self.tokenizer.tokenize_and_lemmatize(q_text)", "\n", "question_for_copying", "=", "self", ".", "tokenizer", ".", "tokenize_with_orig", "(", "q_text", ")", "\n", "\n", "if", "item", ".", "schema", ".", "db_id", "in", "self", ".", "context_cache", ":", "\n", "            ", "context", "=", "self", ".", "context_cache", "[", "item", ".", "schema", ".", "db_id", "]", "\n", "", "else", ":", "\n", "            ", "context", "=", "registry", ".", "construct", "(", "\n", "\"context\"", ",", "\n", "self", ".", "context_config", ",", "\n", "schema", "=", "item", ".", "schema", ",", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", ")", "\n", "self", ".", "context_cache", "[", "item", ".", "schema", ".", "db_id", "]", "=", "context", "\n", "\n", "", "preproc_schema", "=", "context", ".", "preproc_schema", "\n", "schema_relations", "=", "context", ".", "compute_schema_relations", "(", ")", "\n", "sc_relations", "=", "(", "\n", "context", ".", "compute_schema_linking", "(", "q_text", ")", "if", "self", ".", "compute_sc_link", "else", "{", "}", "\n", ")", "\n", "cv_relations", "=", "(", "\n", "context", ".", "compute_cell_value_linking", "(", "q_text", ")", "if", "self", ".", "compute_cv_link", "else", "{", "}", "\n", ")", "\n", "\n", "return", "{", "\n", "\"question_text\"", ":", "q_text", ",", "\n", "\"question_for_copying\"", ":", "question_for_copying", ",", "\n", "\"db_id\"", ":", "item", ".", "schema", ".", "db_id", ",", "\n", "\"schema_relations\"", ":", "schema_relations", ",", "\n", "\"sc_relations\"", ":", "sc_relations", ",", "\n", "\"cv_relations\"", ":", "cv_relations", ",", "\n", "\"columns\"", ":", "preproc_schema", ".", "column_names", ",", "\n", "\"tables\"", ":", "preproc_schema", ".", "table_names", ",", "\n", "\"table_bounds\"", ":", "preproc_schema", ".", "table_bounds", ",", "\n", "\"column_to_table\"", ":", "preproc_schema", ".", "column_to_table", ",", "\n", "\"table_to_columns\"", ":", "preproc_schema", ".", "table_to_columns", ",", "\n", "\"foreign_keys\"", ":", "preproc_schema", ".", "foreign_keys", ",", "\n", "\"foreign_keys_tables\"", ":", "preproc_schema", ".", "foreign_keys_tables", ",", "\n", "\"primary_keys\"", ":", "preproc_schema", ".", "primary_keys", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc_bert.SpiderEncoderBertPreproc.save": [[149, 165], ["os.makedirs", "tensor2struct.utils.registry.lookup().get_default_relations", "sorted", "print", "spider_enc_bert.SpiderEncoderBertPreproc.texts.items", "spider_enc_bert.SpiderEncoderBertPreproc.relations.union", "open", "json.dump", "tensor2struct.utils.registry.lookup", "os.path.join", "open", "len", "os.path.join", "f.write", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext.get_default_relations", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.dump", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "self", ".", "data_dir", ",", "exist_ok", "=", "True", ")", "\n", "# self.tokenizer.save_pretrained(self.data_dir)", "\n", "\n", "default_relations", "=", "registry", ".", "lookup", "(", "\n", "\"context\"", ",", "self", ".", "context_config", "[", "\"name\"", "]", "\n", ")", ".", "get_default_relations", "(", ")", "\n", "self", ".", "relations", "=", "sorted", "(", "self", ".", "relations", ".", "union", "(", "default_relations", ")", ")", "\n", "print", "(", "f\"{len(self.relations)} relations extracted\"", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"relations.json\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "relations", ",", "f", ")", "\n", "\n", "", "for", "section", ",", "texts", "in", "self", ".", "texts", ".", "items", "(", ")", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "section", "+", "\".jsonl\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "for", "text", "in", "texts", ":", "\n", "                    ", "f", ".", "write", "(", "json", ".", "dumps", "(", "text", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc_bert.SpiderEncoderBertPreproc.load": [[166, 172], ["open", "json.load", "sorted", "os.path.join", "enumerate"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["", "", "", "", "def", "load", "(", "self", ")", ":", "\n", "# self.tokenizer = BertTokenizer.from_pretrained(self.data_dir)", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"relations.json\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "relations", "=", "json", ".", "load", "(", "f", ")", "\n", "self", ".", "relations", "=", "sorted", "(", "relations", ")", "\n", "", "self", ".", "relations2id", "=", "{", "r", ":", "ind", "for", "ind", ",", "r", "in", "enumerate", "(", "self", ".", "relations", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc_bert.SpiderEncoderBertPreproc.dataset": [[173, 181], ["len", "json.loads", "open", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["", "def", "dataset", "(", "self", ",", "section", ")", ":", "\n", "# for codalab eval", "\n", "        ", "if", "len", "(", "self", ".", "texts", "[", "section", "]", ")", ">", "0", ":", "\n", "            ", "return", "self", ".", "texts", "[", "section", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "\n", "json", ".", "loads", "(", "line", ")", "\n", "for", "line", "in", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "section", "+", "\".jsonl\"", ")", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc_bert.SpiderEncoderBert.__init__": [[190, 247], ["super().__init__", "tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.instantiate", "tensor2struct.modules.rat.AlignmentWithRAT", "modelclass.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.instantiate"], ["def", "__init__", "(", "\n", "self", ",", "\n", "device", ",", "\n", "preproc", ",", "\n", "bert_token_type", "=", "False", ",", "\n", "bert_version", "=", "\"bert-base-uncased\"", ",", "\n", "summarize_header", "=", "\"avg\"", ",", "\n", "include_in_memory", "=", "(", "\"question\"", ",", "\"column\"", ",", "\"table\"", ")", ",", "\n", "rat_config", "=", "{", "}", ",", "\n", "linking_config", "=", "{", "}", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "preproc", "=", "preproc", "\n", "self", ".", "bert_token_type", "=", "bert_token_type", "\n", "self", ".", "base_enc_hidden_size", "=", "(", "\n", "1024", "if", "\"large\"", "in", "bert_version", "else", "768", "\n", ")", "\n", "self", ".", "include_in_memory", "=", "include_in_memory", "\n", "\n", "# ways to summarize header", "\n", "assert", "summarize_header", "in", "[", "\"first\"", ",", "\"avg\"", "]", "\n", "self", ".", "summarize_header", "=", "summarize_header", "\n", "self", ".", "enc_hidden_size", "=", "self", ".", "base_enc_hidden_size", "\n", "\n", "# matching", "\n", "self", ".", "schema_linking", "=", "registry", ".", "construct", "(", "\n", "\"schema_linking\"", ",", "linking_config", ",", "preproc", "=", "preproc", ",", "device", "=", "device", ",", "\n", ")", "\n", "\n", "# rat", "\n", "rat_modules", "=", "{", "\"rat\"", ":", "rat", ".", "RAT", ",", "\"none\"", ":", "rat", ".", "NoOpUpdate", "}", "\n", "self", ".", "rat_update", "=", "registry", ".", "instantiate", "(", "\n", "rat_modules", "[", "rat_config", "[", "\"name\"", "]", "]", ",", "\n", "rat_config", ",", "\n", "unused_keys", "=", "{", "\"name\"", "}", ",", "\n", "device", "=", "self", ".", "_device", ",", "\n", "relations2id", "=", "preproc", ".", "relations2id", ",", "\n", "hidden_size", "=", "self", ".", "enc_hidden_size", ",", "\n", ")", "\n", "\n", "# aligner", "\n", "self", ".", "aligner", "=", "rat", ".", "AlignmentWithRAT", "(", "\n", "device", "=", "device", ",", "\n", "hidden_size", "=", "self", ".", "enc_hidden_size", ",", "\n", "relations2id", "=", "preproc", ".", "relations2id", ",", "\n", "enable_latent_relations", "=", "False", ",", "\n", ")", "\n", "\n", "if", "\"electra\"", "in", "bert_version", ":", "\n", "            ", "modelclass", "=", "ElectraModel", "\n", "", "elif", "\"bert\"", "in", "bert_version", ":", "\n", "            ", "modelclass", "=", "BertModel", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "bert_model", "=", "modelclass", ".", "from_pretrained", "(", "bert_version", ")", "\n", "self", ".", "tokenizer", "=", "self", ".", "preproc", ".", "tokenizer", "\n", "# self.bert_model.resize_token_embeddings(", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc_bert.SpiderEncoderBert.forward": [[251, 431], ["set", "enumerate", "spider_enc_bert.SpiderEncoderBert.tokenizer.pad_sequence_for_bert_batch", "torch.LongTensor().to", "torch.LongTensor().to", "enumerate", "spider_enc_bert.SpiderEncoderBert.tokenizer.text_to_ids", "spider_enc_bert.SpiderEncoderBert.tokenizer.check_bert_input_seq", "len", "numpy.cumsum().tolist", "numpy.cumsum().tolist", "batch_token_lists.append", "torch.LongTensor().to", "batch_id_to_retrieve_question.append", "torch.LongTensor().to", "batch_id_to_retrieve_column.append", "torch.LongTensor().to", "batch_id_to_retrieve_table.append", "len", "torch.LongTensor().to", "len", "spider_enc_bert.SpiderEncoderBert.schema_linking", "spider_enc_bert.SpiderEncoderBert.rat_update.forward_unbatched", "torch.cat", "spider_enc_bert.SpiderEncoderBert.aligner", "result.append", "spider_enc_bert.SpiderEncoderBert.tokenizer.text_to_ids", "spider_enc_bert.SpiderEncoderBert.tokenizer.text_to_ids", "len", "set.add", "sum", "list", "all", "torch.LongTensor().to", "batch_id_to_retrieve_column_2.append", "all", "torch.LongTensor().to", "batch_id_to_retrieve_table_2.append", "torch.LongTensor", "torch.LongTensor", "spider_enc_bert.SpiderEncoderBert.bert_model", "spider_enc_bert.SpiderEncoderBert.bert_model", "len", "len", "len", "q_enc.unsqueeze", "col_enc.unsqueeze", "tab_enc.unsqueeze", "torch.cat.append", "torch.cat.append", "torch.cat.append", "spider_enc_bert.SpiderEncoderState", "range", "numpy.cumsum", "numpy.cumsum", "numpy.cumsum().tolist", "numpy.cumsum().tolist", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "range", "q_enc.size", "col_enc.size", "tab_enc.size", "len", "torch.LongTensor", "torch.LongTensor", "len", "len", "torch.cat", "numpy.cumsum", "numpy.cumsum", "zip", "zip", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer.pad_sequence_for_bert_batch", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer.text_to_ids", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer.check_bert_input_seq", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.NoOpUpdate.forward_unbatched", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer.text_to_ids", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer.text_to_ids", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size"], ["", "def", "forward", "(", "self", ",", "descs", ")", ":", "\n", "# TODO: abstract the operations of batching for bert", "\n", "        ", "batch_token_lists", "=", "[", "]", "\n", "batch_id_to_retrieve_question", "=", "[", "]", "\n", "batch_id_to_retrieve_column", "=", "[", "]", "\n", "batch_id_to_retrieve_table", "=", "[", "]", "\n", "if", "self", ".", "summarize_header", "==", "\"avg\"", ":", "\n", "            ", "batch_id_to_retrieve_column_2", "=", "[", "]", "\n", "batch_id_to_retrieve_table_2", "=", "[", "]", "\n", "", "long_seq_set", "=", "set", "(", ")", "\n", "batch_id_map", "=", "{", "}", "# some long examples are not included", "\n", "\n", "# 1) retrieve bert pre-trained embeddings", "\n", "for", "batch_idx", ",", "desc", "in", "enumerate", "(", "descs", ")", ":", "\n", "            ", "qs", "=", "self", ".", "tokenizer", ".", "text_to_ids", "(", "desc", "[", "\"question_text\"", "]", ",", "cls", "=", "True", ")", "\n", "cols", "=", "[", "self", ".", "tokenizer", ".", "text_to_ids", "(", "c", ",", "cls", "=", "False", ")", "for", "c", "in", "desc", "[", "\"columns\"", "]", "]", "\n", "tabs", "=", "[", "self", ".", "tokenizer", ".", "text_to_ids", "(", "t", ",", "cls", "=", "False", ")", "for", "t", "in", "desc", "[", "\"tables\"", "]", "]", "\n", "\n", "token_list", "=", "(", "\n", "qs", "+", "[", "c", "for", "col", "in", "cols", "for", "c", "in", "col", "]", "+", "[", "t", "for", "tab", "in", "tabs", "for", "t", "in", "tab", "]", "\n", ")", "\n", "assert", "self", ".", "tokenizer", ".", "check_bert_input_seq", "(", "token_list", ")", "\n", "if", "len", "(", "token_list", ")", ">", "512", ":", "\n", "                ", "long_seq_set", ".", "add", "(", "batch_idx", ")", "\n", "continue", "\n", "\n", "", "q_b", "=", "len", "(", "qs", ")", "\n", "col_b", "=", "q_b", "+", "sum", "(", "len", "(", "c", ")", "for", "c", "in", "cols", ")", "\n", "# leave out [CLS] and [SEP]", "\n", "question_indexes", "=", "list", "(", "range", "(", "q_b", ")", ")", "[", "1", ":", "-", "1", "]", "\n", "# use the first/avg representation for column/table", "\n", "column_indexes", "=", "np", ".", "cumsum", "(", "\n", "[", "q_b", "]", "+", "[", "len", "(", "token_list", ")", "for", "token_list", "in", "cols", "[", ":", "-", "1", "]", "]", "\n", ")", ".", "tolist", "(", ")", "\n", "table_indexes", "=", "np", ".", "cumsum", "(", "\n", "[", "col_b", "]", "+", "[", "len", "(", "token_list", ")", "for", "token_list", "in", "tabs", "[", ":", "-", "1", "]", "]", "\n", ")", ".", "tolist", "(", ")", "\n", "if", "self", ".", "summarize_header", "==", "\"avg\"", ":", "\n", "                ", "column_indexes_2", "=", "np", ".", "cumsum", "(", "\n", "[", "q_b", "-", "2", "]", "+", "[", "len", "(", "token_list", ")", "for", "token_list", "in", "cols", "]", "\n", ")", ".", "tolist", "(", ")", "[", "1", ":", "]", "\n", "table_indexes_2", "=", "np", ".", "cumsum", "(", "\n", "[", "col_b", "-", "2", "]", "+", "[", "len", "(", "token_list", ")", "for", "token_list", "in", "tabs", "]", "\n", ")", ".", "tolist", "(", ")", "[", "1", ":", "]", "\n", "\n", "# token_list is already indexed", "\n", "", "indexed_token_list", "=", "token_list", "\n", "batch_token_lists", ".", "append", "(", "indexed_token_list", ")", "\n", "\n", "# add index for retrieving representations", "\n", "question_rep_ids", "=", "torch", ".", "LongTensor", "(", "question_indexes", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "batch_id_to_retrieve_question", ".", "append", "(", "question_rep_ids", ")", "\n", "column_rep_ids", "=", "torch", ".", "LongTensor", "(", "column_indexes", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "batch_id_to_retrieve_column", ".", "append", "(", "column_rep_ids", ")", "\n", "table_rep_ids", "=", "torch", ".", "LongTensor", "(", "table_indexes", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "batch_id_to_retrieve_table", ".", "append", "(", "table_rep_ids", ")", "\n", "if", "self", ".", "summarize_header", "==", "\"avg\"", ":", "\n", "                ", "assert", "all", "(", "i2", ">=", "i1", "for", "i1", ",", "i2", "in", "zip", "(", "column_indexes", ",", "column_indexes_2", ")", ")", "\n", "column_rep_ids_2", "=", "torch", ".", "LongTensor", "(", "column_indexes_2", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "batch_id_to_retrieve_column_2", ".", "append", "(", "column_rep_ids_2", ")", "\n", "assert", "all", "(", "i2", ">=", "i1", "for", "i1", ",", "i2", "in", "zip", "(", "table_indexes", ",", "table_indexes_2", ")", ")", "\n", "table_rep_ids_2", "=", "torch", ".", "LongTensor", "(", "table_indexes_2", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "batch_id_to_retrieve_table_2", ".", "append", "(", "table_rep_ids_2", ")", "\n", "\n", "", "batch_id_map", "[", "batch_idx", "]", "=", "len", "(", "batch_id_map", ")", "\n", "\n", "", "(", "\n", "padded_token_lists", ",", "\n", "att_mask_lists", ",", "\n", "tok_type_lists", ",", "\n", ")", "=", "self", ".", "tokenizer", ".", "pad_sequence_for_bert_batch", "(", "batch_token_lists", ")", "\n", "tokens_tensor", "=", "torch", ".", "LongTensor", "(", "padded_token_lists", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "att_masks_tensor", "=", "torch", ".", "LongTensor", "(", "att_mask_lists", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n", "if", "self", ".", "bert_token_type", ":", "\n", "            ", "tok_type_tensor", "=", "torch", ".", "LongTensor", "(", "tok_type_lists", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "bert_output", "=", "self", ".", "bert_model", "(", "\n", "tokens_tensor", ",", "\n", "attention_mask", "=", "att_masks_tensor", ",", "\n", "token_type_ids", "=", "tok_type_tensor", ",", "\n", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "bert_output", "=", "self", ".", "bert_model", "(", "\n", "tokens_tensor", ",", "attention_mask", "=", "att_masks_tensor", "\n", ")", "[", "0", "]", "\n", "\n", "", "enc_output", "=", "bert_output", "\n", "\n", "column_pointer_maps", "=", "[", "\n", "{", "i", ":", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "desc", "[", "\"columns\"", "]", ")", ")", "}", "for", "desc", "in", "descs", "\n", "]", "\n", "table_pointer_maps", "=", "[", "\n", "{", "i", ":", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "desc", "[", "\"tables\"", "]", ")", ")", "}", "for", "desc", "in", "descs", "\n", "]", "\n", "\n", "assert", "len", "(", "long_seq_set", ")", "==", "0", "# remove them for now", "\n", "\n", "# 2) rat update", "\n", "result", "=", "[", "]", "\n", "for", "batch_idx", ",", "desc", "in", "enumerate", "(", "descs", ")", ":", "\n", "# retrieve representations", "\n", "            ", "bert_batch_idx", "=", "batch_id_map", "[", "batch_idx", "]", "\n", "q_enc", "=", "enc_output", "[", "bert_batch_idx", "]", "[", "\n", "batch_id_to_retrieve_question", "[", "bert_batch_idx", "]", "\n", "]", "\n", "col_enc", "=", "enc_output", "[", "bert_batch_idx", "]", "[", "\n", "batch_id_to_retrieve_column", "[", "bert_batch_idx", "]", "\n", "]", "\n", "tab_enc", "=", "enc_output", "[", "bert_batch_idx", "]", "[", "\n", "batch_id_to_retrieve_table", "[", "bert_batch_idx", "]", "\n", "]", "\n", "\n", "if", "self", ".", "summarize_header", "==", "\"avg\"", ":", "\n", "                ", "col_enc_2", "=", "enc_output", "[", "bert_batch_idx", "]", "[", "\n", "batch_id_to_retrieve_column_2", "[", "bert_batch_idx", "]", "\n", "]", "\n", "tab_enc_2", "=", "enc_output", "[", "bert_batch_idx", "]", "[", "\n", "batch_id_to_retrieve_table_2", "[", "bert_batch_idx", "]", "\n", "]", "\n", "\n", "col_enc", "=", "(", "col_enc", "+", "col_enc_2", ")", "/", "2.0", "# avg of first and last token", "\n", "tab_enc", "=", "(", "tab_enc", "+", "tab_enc_2", ")", "/", "2.0", "# avg of first and last token", "\n", "\n", "", "words_for_copying", "=", "desc", "[", "\"question_for_copying\"", "]", "\n", "assert", "q_enc", ".", "size", "(", ")", "[", "0", "]", "==", "len", "(", "words_for_copying", ")", "\n", "assert", "col_enc", ".", "size", "(", ")", "[", "0", "]", "==", "len", "(", "desc", "[", "\"columns\"", "]", ")", "\n", "assert", "tab_enc", ".", "size", "(", ")", "[", "0", "]", "==", "len", "(", "desc", "[", "\"tables\"", "]", ")", "\n", "\n", "# rat update", "\n", "# TODO: change this, question is in the protocal of build relations", "\n", "desc", "[", "\"question\"", "]", "=", "words_for_copying", "\n", "relation", "=", "self", ".", "schema_linking", "(", "desc", ")", "\n", "(", "\n", "q_enc_new_item", ",", "\n", "c_enc_new_item", ",", "\n", "t_enc_new_item", ",", "\n", ")", "=", "self", ".", "rat_update", ".", "forward_unbatched", "(", "\n", "desc", ",", "\n", "q_enc", ".", "unsqueeze", "(", "1", ")", ",", "\n", "col_enc", ".", "unsqueeze", "(", "1", ")", ",", "\n", "tab_enc", ".", "unsqueeze", "(", "1", ")", ",", "\n", "relation", ",", "\n", ")", "\n", "\n", "# attention memory", "\n", "memory", "=", "[", "]", "\n", "if", "\"question\"", "in", "self", ".", "include_in_memory", ":", "\n", "                ", "memory", ".", "append", "(", "q_enc_new_item", ")", "\n", "", "if", "\"column\"", "in", "self", ".", "include_in_memory", ":", "\n", "                ", "memory", ".", "append", "(", "c_enc_new_item", ")", "\n", "", "if", "\"table\"", "in", "self", ".", "include_in_memory", ":", "\n", "                ", "memory", ".", "append", "(", "t_enc_new_item", ")", "\n", "", "memory", "=", "torch", ".", "cat", "(", "memory", ",", "dim", "=", "1", ")", "\n", "\n", "# alignment matrix", "\n", "align_mat_item", "=", "self", ".", "aligner", "(", "\n", "desc", ",", "q_enc_new_item", ",", "c_enc_new_item", ",", "t_enc_new_item", ",", "relation", "\n", ")", "\n", "\n", "result", ".", "append", "(", "\n", "SpiderEncoderState", "(", "\n", "state", "=", "None", ",", "\n", "words_for_copying", "=", "words_for_copying", ",", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "memory", "=", "memory", ",", "\n", "question_memory", "=", "q_enc_new_item", ",", "\n", "schema_memory", "=", "torch", ".", "cat", "(", "(", "c_enc_new_item", ",", "t_enc_new_item", ")", ",", "dim", "=", "1", ")", ",", "\n", "pointer_memories", "=", "{", "\n", "\"column\"", ":", "c_enc_new_item", ",", "\n", "\"table\"", ":", "t_enc_new_item", ",", "\n", "}", ",", "\n", "pointer_maps", "=", "{", "\n", "\"column\"", ":", "column_pointer_maps", "[", "batch_idx", "]", ",", "\n", "\"table\"", ":", "table_pointer_maps", "[", "batch_idx", "]", ",", "\n", "}", ",", "\n", "m2c_align_mat", "=", "align_mat_item", "[", "0", "]", ",", "\n", "m2t_align_mat", "=", "align_mat_item", "[", "1", "]", ",", "\n", ")", "\n", ")", "\n", "", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc.SpiderEncoderState.find_word_occurrences": [[34, 40], ["len", "enumerate"], "methods", ["None"], ["def", "find_word_occurrences", "(", "self", ",", "token", ")", ":", "\n", "        ", "occurrences", "=", "[", "i", "for", "i", ",", "w", "in", "enumerate", "(", "self", ".", "words_for_copying", ")", "if", "w", "==", "token", "]", "\n", "if", "len", "(", "occurrences", ")", ">", "0", ":", "\n", "            ", "return", "occurrences", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc.SpiderEncoderV3Preproc.__init__": [[43, 88], ["os.path.join", "collections.defaultdict", "tensor2struct.utils.vocab.VocabBuilder", "os.path.join", "os.path.join", "set", "set", "tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.construct", "tensor2struct.utils.vocab.VocabBuilder", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "save_path", ",", "\n", "context", ",", "\n", "min_freq", "=", "3", ",", "\n", "max_count", "=", "5000", ",", "\n", "include_table_name_in_column", "=", "True", ",", "\n", "word_emb", "=", "None", ",", "\n", "count_tokens_in_word_emb_for_vocab", "=", "False", ",", "\n", "compute_sc_link", "=", "False", ",", "\n", "compute_cv_link", "=", "False", ",", "\n", "use_ch_vocab", "=", "False", ",", "\n", "ch_word_emb", "=", "None", ",", "\n", ")", ":", "\n", "        ", "if", "word_emb", "is", "None", ":", "\n", "            ", "self", ".", "word_emb", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "word_emb", "=", "registry", ".", "construct", "(", "\"word_emb\"", ",", "word_emb", ")", "\n", "\n", "", "self", ".", "data_dir", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"enc\"", ")", "\n", "self", ".", "include_table_name_in_column", "=", "include_table_name_in_column", "\n", "self", ".", "count_tokens_in_word_emb_for_vocab", "=", "count_tokens_in_word_emb_for_vocab", "\n", "self", ".", "compute_sc_link", "=", "compute_sc_link", "\n", "self", ".", "compute_cv_link", "=", "compute_cv_link", "\n", "self", ".", "context_config", "=", "context", "\n", "\n", "self", ".", "texts", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "self", ".", "vocab_builder", "=", "vocab", ".", "VocabBuilder", "(", "min_freq", ",", "max_count", ")", "\n", "self", ".", "vocab_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"enc_vocab.json\"", ")", "\n", "self", ".", "vocab_word_freq_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"enc_word_freq.json\"", ")", "\n", "self", ".", "vocab", "=", "None", "\n", "self", ".", "use_ch_vocab", "=", "use_ch_vocab", "\n", "if", "use_ch_vocab", ":", "\n", "            ", "assert", "ch_word_emb", "is", "not", "None", "\n", "self", ".", "ch_word_emb", "=", "registry", ".", "construct", "(", "\"word_emb\"", ",", "ch_word_emb", ")", "\n", "self", ".", "ch_vocab_builder", "=", "vocab", ".", "VocabBuilder", "(", "min_freq", ",", "max_count", ")", "\n", "self", ".", "ch_vocab_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"ch_enc_vocab.json\"", ")", "\n", "self", ".", "ch_vocab_word_freq_path", "=", "os", ".", "path", ".", "join", "(", "\n", "save_path", ",", "\"ch_enc_word_freq.json\"", "\n", ")", "\n", "self", ".", "ch_vocab", "=", "None", "\n", "", "self", ".", "counted_db_ids", "=", "set", "(", ")", "\n", "self", ".", "relations", "=", "set", "(", ")", "\n", "\n", "self", ".", "context_cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc.SpiderEncoderV3Preproc.validate_item": [[89, 91], ["None"], "methods", ["None"], ["", "def", "validate_item", "(", "self", ",", "item", ",", "section", ")", ":", "\n", "        ", "return", "True", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc.SpiderEncoderV3Preproc.add_item": [[92, 134], ["spider_enc.SpiderEncoderV3Preproc.preprocess_item", "spider_enc.SpiderEncoderV3Preproc.texts[].append", "itertools.chain", "preprocessed[].keys", "preprocessed[].keys", "preprocessed[].keys", "spider_enc.SpiderEncoderV3Preproc.relations.add", "spider_enc.SpiderEncoderV3Preproc.counted_db_ids.add", "itertools.chain", "itertools.chain", "spider_enc.SpiderEncoderV3Preproc.vocab_builder.add_word", "spider_enc.SpiderEncoderV3Preproc.ch_vocab_builder.add_word", "spider_enc.SpiderEncoderV3Preproc.word_emb.lookup", "spider_enc.SpiderEncoderV3Preproc.ch_word_emb.lookup"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.DecoderPreproc.preprocess_item", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.add_word", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.add_word", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup"], ["", "def", "add_item", "(", "self", ",", "item", ",", "section", ",", "validation_info", ")", ":", "\n", "        ", "preprocessed", "=", "self", ".", "preprocess_item", "(", "item", ",", "validation_info", ")", "\n", "self", ".", "texts", "[", "section", "]", ".", "append", "(", "preprocessed", ")", "\n", "\n", "if", "section", "==", "\"train\"", ":", "\n", "            ", "for", "relation_name", "in", "itertools", ".", "chain", "(", "\n", "preprocessed", "[", "\"schema_relations\"", "]", ".", "keys", "(", ")", ",", "\n", "preprocessed", "[", "\"sc_relations\"", "]", ".", "keys", "(", ")", ",", "\n", "preprocessed", "[", "\"cv_relations\"", "]", ".", "keys", "(", ")", ",", "\n", ")", ":", "\n", "                ", "self", ".", "relations", ".", "add", "(", "relation_name", ")", "\n", "\n", "", "q_to_count", "=", "preprocessed", "[", "\"question\"", "]", "\n", "if", "item", ".", "schema", ".", "db_id", "not", "in", "self", ".", "counted_db_ids", ":", "\n", "                ", "self", ".", "counted_db_ids", ".", "add", "(", "item", ".", "schema", ".", "db_id", ")", "\n", "to_count", "=", "itertools", ".", "chain", "(", "\n", "*", "preprocessed", "[", "\"columns\"", "]", ",", "*", "preprocessed", "[", "\"tables\"", "]", "\n", ")", "\n", "", "else", ":", "\n", "                ", "to_count", "=", "[", "]", "\n", "\n", "# only question is possibly chinese", "\n", "", "if", "self", ".", "use_ch_vocab", ":", "\n", "                ", "for", "token", "in", "q_to_count", ":", "\n", "                    ", "count_token", "=", "(", "\n", "self", ".", "ch_word_emb", "is", "None", "\n", "or", "self", ".", "count_tokens_in_word_emb_for_vocab", "\n", "or", "self", ".", "ch_word_emb", ".", "lookup", "(", "token", ")", "is", "None", "\n", ")", "\n", "if", "count_token", ":", "\n", "                        ", "self", ".", "ch_vocab_builder", ".", "add_word", "(", "token", ")", "\n", "", "", "", "else", ":", "\n", "                ", "to_count", "=", "itertools", ".", "chain", "(", "to_count", ",", "q_to_count", ")", "\n", "\n", "", "for", "token", "in", "to_count", ":", "\n", "                ", "count_token", "=", "(", "\n", "self", ".", "word_emb", "is", "None", "\n", "or", "self", ".", "count_tokens_in_word_emb_for_vocab", "\n", "or", "self", ".", "word_emb", ".", "lookup", "(", "token", ")", "is", "None", "\n", ")", "\n", "if", "count_token", ":", "\n", "                    ", "self", ".", "vocab_builder", ".", "add_word", "(", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc.SpiderEncoderV3Preproc.clear_items": [[135, 137], ["collections.defaultdict"], "methods", ["None"], ["", "", "", "", "def", "clear_items", "(", "self", ")", ":", "\n", "        ", "self", ".", "texts", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc.SpiderEncoderV3Preproc.preprocess_item": [[138, 184], ["tensor2struct.utils.registry.construct.compute_schema_relations", "spider_enc.SpiderEncoderV3Preproc._ch_tokenize_for_copying", "spider_enc.SpiderEncoderV3Preproc._tokenize_for_copying", "tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.construct.compute_schema_linking", "tensor2struct.utils.registry.construct.compute_schema_linking"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.compute_schema_relations", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc.SpiderEncoderV3Preproc._ch_tokenize_for_copying", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc.SpiderEncoderV3Preproc._tokenize_for_copying", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.compute_schema_linking", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.compute_schema_linking"], ["", "def", "preprocess_item", "(", "self", ",", "item", ",", "validation_info", ")", ":", "\n", "        ", "if", "self", ".", "use_ch_vocab", ":", "\n", "            ", "question", ",", "question_for_copying", "=", "self", ".", "_ch_tokenize_for_copying", "(", "\n", "item", ".", "text", ",", "item", ".", "orig", "[", "\"question\"", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "question", ",", "question_for_copying", "=", "self", ".", "_tokenize_for_copying", "(", "\n", "item", ".", "text", ",", "item", ".", "orig", "[", "\"question\"", "]", "\n", ")", "\n", "\n", "", "if", "item", ".", "schema", ".", "db_id", "in", "self", ".", "context_cache", ":", "\n", "            ", "context", "=", "self", ".", "context_cache", "[", "item", ".", "schema", ".", "db_id", "]", "\n", "", "else", ":", "\n", "            ", "context", "=", "registry", ".", "construct", "(", "\n", "\"context\"", ",", "\n", "self", ".", "context_config", ",", "\n", "schema", "=", "item", ".", "schema", ",", "\n", "word_emb", "=", "self", ".", "word_emb", ",", "\n", ")", "\n", "self", ".", "context_cache", "[", "item", ".", "schema", ".", "db_id", "]", "=", "context", "\n", "\n", "", "preproc_schema", "=", "context", ".", "preproc_schema", "\n", "schema_relations", "=", "context", ".", "compute_schema_relations", "(", ")", "\n", "sc_relations", "=", "(", "\n", "context", ".", "compute_schema_linking", "(", "question", ")", "if", "self", ".", "compute_sc_link", "else", "{", "}", "\n", ")", "\n", "cv_relations", "=", "(", "\n", "context", ".", "compute_schema_linking", "(", "question", ")", "if", "self", ".", "compute_cv_link", "else", "{", "}", "\n", ")", "\n", "\n", "return", "{", "\n", "\"raw_question\"", ":", "item", ".", "orig", "[", "\"question\"", "]", ",", "\n", "\"question\"", ":", "question", ",", "\n", "\"question_for_copying\"", ":", "question_for_copying", ",", "\n", "\"db_id\"", ":", "item", ".", "schema", ".", "db_id", ",", "\n", "\"schema_relations\"", ":", "schema_relations", ",", "\n", "\"sc_relations\"", ":", "sc_relations", ",", "\n", "\"cv_relations\"", ":", "cv_relations", ",", "\n", "\"columns\"", ":", "preproc_schema", ".", "column_names", ",", "\n", "\"tables\"", ":", "preproc_schema", ".", "table_names", ",", "\n", "\"table_bounds\"", ":", "preproc_schema", ".", "table_bounds", ",", "\n", "\"column_to_table\"", ":", "preproc_schema", ".", "column_to_table", ",", "\n", "\"table_to_columns\"", ":", "preproc_schema", ".", "table_to_columns", ",", "\n", "\"foreign_keys\"", ":", "preproc_schema", ".", "foreign_keys", ",", "\n", "\"foreign_keys_tables\"", ":", "preproc_schema", ".", "foreign_keys_tables", ",", "\n", "\"primary_keys\"", ":", "preproc_schema", ".", "primary_keys", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc.SpiderEncoderV3Preproc._tokenize": [[186, 190], ["spider_enc.SpiderEncoderV3Preproc.word_emb.tokenize"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEncPreproc.tokenize"], ["", "def", "_tokenize", "(", "self", ",", "presplit", ",", "unsplit", ")", ":", "\n", "        ", "if", "self", ".", "word_emb", ":", "\n", "            ", "return", "self", ".", "word_emb", ".", "tokenize", "(", "unsplit", ")", "\n", "", "return", "presplit", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc.SpiderEncoderV3Preproc._ch_tokenize": [[191, 195], ["spider_enc.SpiderEncoderV3Preproc.ch_word_emb.tokenize"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEncPreproc.tokenize"], ["", "def", "_ch_tokenize", "(", "self", ",", "presplit", ",", "unsplit", ")", ":", "\n", "        ", "if", "self", ".", "ch_word_emb", ":", "\n", "            ", "return", "self", ".", "ch_word_emb", ".", "tokenize", "(", "unsplit", ")", "\n", "", "return", "presplit", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc.SpiderEncoderV3Preproc._tokenize_for_copying": [[196, 200], ["spider_enc.SpiderEncoderV3Preproc.word_emb.tokenize_for_copying"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.tokenize_for_copying"], ["", "def", "_tokenize_for_copying", "(", "self", ",", "presplit", ",", "unsplit", ")", ":", "\n", "        ", "if", "self", ".", "word_emb", ":", "\n", "            ", "return", "self", ".", "word_emb", ".", "tokenize_for_copying", "(", "unsplit", ")", "\n", "", "return", "presplit", ",", "presplit", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc.SpiderEncoderV3Preproc._ch_tokenize_for_copying": [[201, 205], ["spider_enc.SpiderEncoderV3Preproc.ch_word_emb.tokenize_for_copying"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.tokenize_for_copying"], ["", "def", "_ch_tokenize_for_copying", "(", "self", ",", "presplit", ",", "unsplit", ")", ":", "\n", "        ", "if", "self", ".", "ch_word_emb", ":", "\n", "            ", "return", "self", ".", "ch_word_emb", ".", "tokenize_for_copying", "(", "unsplit", ")", "\n", "", "return", "presplit", ",", "presplit", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc.SpiderEncoderV3Preproc.save": [[206, 230], ["os.makedirs", "spider_enc.SpiderEncoderV3Preproc.vocab_builder.finish", "print", "spider_enc.SpiderEncoderV3Preproc.vocab.save", "spider_enc.SpiderEncoderV3Preproc.vocab_builder.save", "tensor2struct.utils.registry.lookup().get_default_relations", "sorted", "print", "spider_enc.SpiderEncoderV3Preproc.texts.items", "spider_enc.SpiderEncoderV3Preproc.ch_vocab_builder.finish", "print", "spider_enc.SpiderEncoderV3Preproc.ch_vocab.save", "spider_enc.SpiderEncoderV3Preproc.ch_vocab_builder.save", "spider_enc.SpiderEncoderV3Preproc.relations.union", "open", "json.dump", "tensor2struct.utils.registry.lookup", "os.path.join", "open", "len", "len", "os.path.join", "f.write", "len", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.finish", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.save", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.save", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext.get_default_relations", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.finish", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.save", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.save", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.dump", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "self", ".", "data_dir", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "vocab", "=", "self", ".", "vocab_builder", ".", "finish", "(", ")", "\n", "print", "(", "f\"{len(self.vocab)} words in vocab\"", ")", "\n", "self", ".", "vocab", ".", "save", "(", "self", ".", "vocab_path", ")", "\n", "self", ".", "vocab_builder", ".", "save", "(", "self", ".", "vocab_word_freq_path", ")", "\n", "if", "self", ".", "use_ch_vocab", ":", "\n", "            ", "self", ".", "ch_vocab", "=", "self", ".", "ch_vocab_builder", ".", "finish", "(", ")", "\n", "print", "(", "f\"{len(self.ch_vocab)} chinese words in vocab\"", ")", "\n", "self", ".", "ch_vocab", ".", "save", "(", "self", ".", "ch_vocab_path", ")", "\n", "self", ".", "ch_vocab_builder", ".", "save", "(", "self", ".", "ch_vocab_word_freq_path", ")", "\n", "\n", "", "default_relations", "=", "registry", ".", "lookup", "(", "\n", "\"context\"", ",", "self", ".", "context_config", "[", "\"name\"", "]", "\n", ")", ".", "get_default_relations", "(", ")", "\n", "self", ".", "relations", "=", "sorted", "(", "self", ".", "relations", ".", "union", "(", "default_relations", ")", ")", "\n", "print", "(", "f\"{len(self.relations)} relations extracted\"", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"relations.json\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "relations", ",", "f", ")", "\n", "\n", "", "for", "section", ",", "texts", "in", "self", ".", "texts", ".", "items", "(", ")", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "section", "+", "\".jsonl\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "for", "text", "in", "texts", ":", "\n", "                    ", "f", ".", "write", "(", "json", ".", "dumps", "(", "text", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc.SpiderEncoderV3Preproc.deprecated_load": [[231, 239], ["tensor2struct.utils.vocab.Vocab.load", "spider_enc.SpiderEncoderV3Preproc.vocab_builder.load", "tensor2struct.utils.vocab.Vocab.load", "spider_enc.SpiderEncoderV3Preproc.ch_vocab_builder.load", "open", "json.load", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["", "", "", "", "def", "deprecated_load", "(", "self", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "vocab", ".", "Vocab", ".", "load", "(", "self", ".", "vocab_path", ")", "\n", "self", ".", "vocab_builder", ".", "load", "(", "self", ".", "vocab_word_freq_path", ")", "\n", "if", "self", ".", "use_ch_vocab", ":", "\n", "            ", "self", ".", "ch_vocab", "=", "vocab", ".", "Vocab", ".", "load", "(", "self", ".", "ch_vocab_path", ")", "\n", "self", ".", "ch_vocab_builder", ".", "load", "(", "self", ".", "ch_vocab_word_freq_path", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"relation2id.json\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "self", ".", "relations2id", "=", "json", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc.SpiderEncoderV3Preproc.load": [[240, 250], ["tensor2struct.utils.vocab.Vocab.load", "spider_enc.SpiderEncoderV3Preproc.vocab_builder.load", "tensor2struct.utils.vocab.Vocab.load", "spider_enc.SpiderEncoderV3Preproc.ch_vocab_builder.load", "open", "json.load", "sorted", "os.path.join", "enumerate"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["", "", "def", "load", "(", "self", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "vocab", ".", "Vocab", ".", "load", "(", "self", ".", "vocab_path", ")", "\n", "self", ".", "vocab_builder", ".", "load", "(", "self", ".", "vocab_word_freq_path", ")", "\n", "if", "self", ".", "use_ch_vocab", ":", "\n", "            ", "self", ".", "ch_vocab", "=", "vocab", ".", "Vocab", ".", "load", "(", "self", ".", "ch_vocab_path", ")", "\n", "self", ".", "ch_vocab_builder", ".", "load", "(", "self", ".", "ch_vocab_word_freq_path", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"relations.json\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "relations", "=", "json", ".", "load", "(", "f", ")", "\n", "self", ".", "relations", "=", "sorted", "(", "relations", ")", "\n", "", "self", ".", "relations2id", "=", "{", "r", ":", "ind", "for", "ind", ",", "r", "in", "enumerate", "(", "self", ".", "relations", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc.SpiderEncoderV3Preproc.dataset": [[251, 259], ["len", "json.loads", "open", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["", "def", "dataset", "(", "self", ",", "section", ")", ":", "\n", "# for codalab eval", "\n", "        ", "if", "len", "(", "self", ".", "texts", "[", "section", "]", ")", ">", "0", ":", "\n", "            ", "return", "self", ".", "texts", "[", "section", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "\n", "json", ".", "loads", "(", "line", ")", "\n", "for", "line", "in", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "section", "+", "\".jsonl\"", ")", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc.SpiderEncoderV3.__init__": [[268, 381], ["super().__init__", "set", "set", "spider_enc.SpiderEncoderV3._build_modules", "spider_enc.SpiderEncoderV3._build_modules", "spider_enc.SpiderEncoderV3._build_modules", "tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.instantiate", "tensor2struct.modules.rat.AlignmentWithRAT", "tensor2struct.modules.embedders.LookupEmbeddings", "tensor2struct.modules.lstm.BiLSTM", "set", "tensor2struct.modules.embedders.LookupEmbeddings", "tensor2struct.modules.lstm.BiLSTM", "tensor2struct.modules.lstm.BiLSTM", "rat_config.get", "word_freq.most_common", "ch_word_freq.most_common"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEnc._build_modules", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEnc._build_modules", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEnc._build_modules", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.instantiate", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get"], ["def", "__init__", "(", "\n", "self", ",", "\n", "device", ",", "\n", "preproc", ",", "\n", "word_emb_size", "=", "128", ",", "\n", "recurrent_size", "=", "256", ",", "\n", "dropout", "=", "0.0", ",", "\n", "question_encoder", "=", "(", "\"emb\"", ",", "\"bilstm\"", ")", ",", "\n", "column_encoder", "=", "(", "\"emb\"", ",", "\"bilstm\"", ")", ",", "\n", "table_encoder", "=", "(", "\"emb\"", ",", "\"bilstm\"", ")", ",", "\n", "linking_config", "=", "{", "}", ",", "\n", "rat_config", "=", "{", "}", ",", "\n", "top_k_learnable", "=", "0", ",", "\n", "include_in_memory", "=", "(", "\"question\"", ",", "\"column\"", ",", "\"table\"", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "preproc", "=", "preproc", "\n", "\n", "self", ".", "vocab", "=", "preproc", ".", "vocab", "\n", "self", ".", "word_emb_size", "=", "word_emb_size", "\n", "self", ".", "recurrent_size", "=", "recurrent_size", "\n", "assert", "self", ".", "recurrent_size", "%", "2", "==", "0", "\n", "word_freq", "=", "self", ".", "preproc", ".", "vocab_builder", ".", "word_freq", "\n", "top_k_words", "=", "set", "(", "[", "_a", "[", "0", "]", "for", "_a", "in", "word_freq", ".", "most_common", "(", "top_k_learnable", ")", "]", ")", "\n", "self", ".", "learnable_words", "=", "top_k_words", "\n", "self", ".", "include_in_memory", "=", "set", "(", "include_in_memory", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "shared_modules", "=", "{", "\n", "\"shared-en-emb\"", ":", "embedders", ".", "LookupEmbeddings", "(", "\n", "self", ".", "_device", ",", "\n", "self", ".", "vocab", ",", "\n", "self", ".", "preproc", ".", "word_emb", ",", "\n", "self", ".", "word_emb_size", ",", "\n", "self", ".", "learnable_words", ",", "\n", ")", ",", "\n", "\"shared-bilstm\"", ":", "lstm", ".", "BiLSTM", "(", "\n", "input_size", "=", "self", ".", "word_emb_size", ",", "\n", "output_size", "=", "self", ".", "recurrent_size", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "summarize", "=", "False", ",", "\n", ")", ",", "\n", "}", "\n", "\n", "# chinese vocab and module", "\n", "if", "self", ".", "preproc", ".", "use_ch_vocab", ":", "\n", "            ", "self", ".", "ch_vocab", "=", "preproc", ".", "ch_vocab", "\n", "ch_word_freq", "=", "self", ".", "preproc", ".", "ch_vocab_builder", ".", "word_freq", "\n", "ch_top_k_words", "=", "set", "(", "\n", "[", "_a", "[", "0", "]", "for", "_a", "in", "ch_word_freq", ".", "most_common", "(", "top_k_learnable", ")", "]", "\n", ")", "\n", "self", ".", "ch_learnable_words", "=", "ch_top_k_words", "\n", "shared_modules", "[", "\"shared-ch-emb\"", "]", "=", "embedders", ".", "LookupEmbeddings", "(", "\n", "self", ".", "_device", ",", "\n", "self", ".", "ch_vocab", ",", "\n", "self", ".", "preproc", ".", "ch_word_emb", ",", "\n", "self", ".", "preproc", ".", "ch_word_emb", ".", "dim", ",", "\n", "self", ".", "ch_learnable_words", ",", "\n", ")", "\n", "shared_modules", "[", "\"ch-bilstm\"", "]", "=", "lstm", ".", "BiLSTM", "(", "\n", "input_size", "=", "self", ".", "preproc", ".", "ch_word_emb", ".", "dim", ",", "\n", "output_size", "=", "self", ".", "recurrent_size", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "use_native", "=", "False", ",", "\n", "summarize", "=", "False", ",", "\n", ")", "\n", "shared_modules", "[", "\"ch-bilstm-native\"", "]", "=", "lstm", ".", "BiLSTM", "(", "\n", "input_size", "=", "self", ".", "preproc", ".", "ch_word_emb", ".", "dim", ",", "\n", "output_size", "=", "self", ".", "recurrent_size", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "use_native", "=", "True", ",", "\n", "summarize", "=", "False", ",", "\n", ")", "\n", "\n", "", "self", ".", "question_encoder", "=", "self", ".", "_build_modules", "(", "\n", "question_encoder", ",", "shared_modules", "=", "shared_modules", "\n", ")", "\n", "self", ".", "column_encoder", "=", "self", ".", "_build_modules", "(", "\n", "column_encoder", ",", "shared_modules", "=", "shared_modules", "\n", ")", "\n", "self", ".", "table_encoder", "=", "self", ".", "_build_modules", "(", "\n", "table_encoder", ",", "shared_modules", "=", "shared_modules", "\n", ")", "\n", "\n", "# matching", "\n", "self", ".", "schema_linking", "=", "registry", ".", "construct", "(", "\n", "\"schema_linking\"", ",", "\n", "linking_config", ",", "\n", "device", "=", "device", ",", "\n", "word_emb_size", "=", "word_emb_size", ",", "\n", "preproc", "=", "preproc", ",", "\n", ")", "\n", "\n", "# rat", "\n", "rat_modules", "=", "{", "\"rat\"", ":", "rat", ".", "RAT", ",", "\"none\"", ":", "rat", ".", "NoOpUpdate", "}", "\n", "self", ".", "rat_update", "=", "registry", ".", "instantiate", "(", "\n", "rat_modules", "[", "rat_config", "[", "\"name\"", "]", "]", ",", "\n", "rat_config", ",", "\n", "unused_keys", "=", "{", "\"name\"", "}", ",", "\n", "device", "=", "self", ".", "_device", ",", "\n", "relations2id", "=", "preproc", ".", "relations2id", ",", "\n", "hidden_size", "=", "recurrent_size", ",", "\n", ")", "\n", "\n", "# aligner", "\n", "self", ".", "aligner", "=", "rat", ".", "AlignmentWithRAT", "(", "\n", "device", "=", "device", ",", "\n", "hidden_size", "=", "recurrent_size", ",", "\n", "relations2id", "=", "preproc", ".", "relations2id", ",", "\n", "enable_latent_relations", "=", "rat_config", "[", "\"enable_latent_relations\"", "]", ",", "\n", "num_latent_relations", "=", "rat_config", ".", "get", "(", "\"num_latent_relations\"", ",", "None", ")", ",", "\n", "combine_latent_relations", "=", "rat_config", "[", "\"combine_latent_relations\"", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc.SpiderEncoderV3._build_modules": [[383, 427], ["torch.nn.Sequential", "tensor2struct.modules.embedders.LookupEmbeddings", "tensor2struct.modules.lstm.BiLSTM", "tensor2struct.modules.lstm.BiLSTM", "tensor2struct.modules.lstm.BiLSTM", "tensor2struct.modules.lstm.BiLSTM", "modules.append", "modules.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "_build_modules", "(", "self", ",", "module_types", ",", "shared_modules", "=", "None", ")", ":", "\n", "        ", "module_builder", "=", "{", "\n", "\"emb\"", ":", "lambda", ":", "embedders", ".", "LookupEmbeddings", "(", "\n", "self", ".", "_device", ",", "\n", "self", ".", "vocab", ",", "\n", "self", ".", "preproc", ".", "word_emb", ",", "\n", "self", ".", "word_emb_size", ",", "\n", "self", ".", "learnable_words", ",", "\n", ")", ",", "\n", "\"bilstm\"", ":", "lambda", ":", "lstm", ".", "BiLSTM", "(", "\n", "input_size", "=", "self", ".", "word_emb_size", ",", "\n", "output_size", "=", "self", ".", "recurrent_size", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "summarize", "=", "False", ",", "\n", ")", ",", "\n", "\"bilstm-native\"", ":", "lambda", ":", "lstm", ".", "BiLSTM", "(", "\n", "input_size", "=", "self", ".", "word_emb_size", ",", "\n", "output_size", "=", "self", ".", "recurrent_size", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "summarize", "=", "False", ",", "\n", "use_native", "=", "True", ",", "\n", ")", ",", "\n", "\"bilstm-summarize\"", ":", "lambda", ":", "lstm", ".", "BiLSTM", "(", "\n", "input_size", "=", "self", ".", "word_emb_size", ",", "\n", "output_size", "=", "self", ".", "recurrent_size", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "summarize", "=", "True", ",", "\n", ")", ",", "\n", "\"bilstm-native-summarize\"", ":", "lambda", ":", "lstm", ".", "BiLSTM", "(", "\n", "input_size", "=", "self", ".", "word_emb_size", ",", "\n", "output_size", "=", "self", ".", "recurrent_size", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "summarize", "=", "True", ",", "\n", "use_native", "=", "True", ",", "\n", ")", ",", "\n", "}", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "module_type", "in", "module_types", ":", "\n", "            ", "if", "module_type", "in", "shared_modules", ":", "\n", "                ", "modules", ".", "append", "(", "shared_modules", "[", "module_type", "]", ")", "\n", "", "else", ":", "\n", "                ", "modules", ".", "append", "(", "module_builder", "[", "module_type", "]", "(", ")", ")", "\n", "", "", "return", "torch", ".", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc.SpiderEncoderV3.forward": [[428, 503], ["spider_enc.SpiderEncoderV3.question_encoder", "spider_enc.SpiderEncoderV3.column_encoder", "spider_enc.SpiderEncoderV3.table_encoder", "enumerate", "spider_enc.SpiderEncoderV3.schema_linking", "spider_enc.SpiderEncoderV3.rat_update", "spider_enc.SpiderEncoderV3.aligner", "torch.cat", "result.append", "list", "enumerate", "list", "enumerate", "q_enc.select().unsqueeze", "c_enc.select().unsqueeze", "t_enc.select().unsqueeze", "torch.cat.append", "torch.cat.append", "torch.cat.append", "spider_enc.SpiderEncoderState", "range", "enumerate", "range", "enumerate", "zip", "zip", "zip", "q_enc.select", "c_enc.select", "t_enc.select", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.select", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.select", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.select"], ["", "def", "forward", "(", "self", ",", "descs", ")", ":", "\n", "        ", "qs", "=", "[", "[", "desc", "[", "\"question\"", "]", "]", "for", "desc", "in", "descs", "]", "\n", "q_enc", ",", "_", "=", "self", ".", "question_encoder", "(", "qs", ")", "\n", "\n", "c_enc", ",", "c_boundaries", "=", "self", ".", "column_encoder", "(", "[", "desc", "[", "\"columns\"", "]", "for", "desc", "in", "descs", "]", ")", "\n", "column_pointer_maps", "=", "[", "\n", "{", "\n", "i", ":", "list", "(", "range", "(", "left", ",", "right", ")", ")", "\n", "for", "i", ",", "(", "left", ",", "right", ")", "in", "enumerate", "(", "\n", "zip", "(", "c_boundaries_for_item", ",", "c_boundaries_for_item", "[", "1", ":", "]", ")", "\n", ")", "\n", "}", "\n", "for", "batch_idx", ",", "c_boundaries_for_item", "in", "enumerate", "(", "c_boundaries", ")", "\n", "]", "\n", "\n", "t_enc", ",", "t_boundaries", "=", "self", ".", "table_encoder", "(", "[", "desc", "[", "\"tables\"", "]", "for", "desc", "in", "descs", "]", ")", "\n", "table_pointer_maps", "=", "[", "\n", "{", "\n", "i", ":", "list", "(", "range", "(", "left", ",", "right", ")", ")", "\n", "for", "i", ",", "(", "left", ",", "right", ")", "in", "enumerate", "(", "\n", "zip", "(", "t_boundaries_for_item", ",", "t_boundaries_for_item", "[", "1", ":", "]", ")", "\n", ")", "\n", "}", "\n", "for", "batch_idx", ",", "(", "desc", ",", "t_boundaries_for_item", ")", "in", "enumerate", "(", "\n", "zip", "(", "descs", ",", "t_boundaries", ")", "\n", ")", "\n", "]", "\n", "\n", "result", "=", "[", "]", "\n", "# TODO: support batching", "\n", "for", "batch_idx", ",", "desc", "in", "enumerate", "(", "descs", ")", ":", "\n", "            ", "relation", "=", "self", ".", "schema_linking", "(", "descs", "[", "batch_idx", "]", ")", "\n", "q_enc_new_item", ",", "c_enc_new_item", ",", "t_enc_new_item", "=", "self", ".", "rat_update", "(", "\n", "desc", ",", "\n", "q_enc", ".", "select", "(", "batch_idx", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "c_enc", ".", "select", "(", "batch_idx", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "t_enc", ".", "select", "(", "batch_idx", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "relation", ",", "\n", ")", "\n", "\n", "align_mat_item", "=", "self", ".", "aligner", "(", "\n", "desc", ",", "q_enc_new_item", ",", "c_enc_new_item", ",", "t_enc_new_item", ",", "relation", "\n", ")", "\n", "\n", "memory", "=", "[", "]", "\n", "if", "\"question\"", "in", "self", ".", "include_in_memory", ":", "\n", "                ", "memory", ".", "append", "(", "q_enc_new_item", ")", "\n", "", "if", "\"column\"", "in", "self", ".", "include_in_memory", ":", "\n", "                ", "memory", ".", "append", "(", "c_enc_new_item", ")", "\n", "", "if", "\"table\"", "in", "self", ".", "include_in_memory", ":", "\n", "                ", "memory", ".", "append", "(", "t_enc_new_item", ")", "\n", "", "memory", "=", "torch", ".", "cat", "(", "memory", ",", "dim", "=", "1", ")", "\n", "\n", "result", ".", "append", "(", "\n", "SpiderEncoderState", "(", "\n", "state", "=", "None", ",", "\n", "words_for_copying", "=", "desc", "[", "\"question\"", "]", ",", "\n", "memory", "=", "memory", ",", "\n", "question_memory", "=", "q_enc_new_item", ",", "\n", "schema_memory", "=", "torch", ".", "cat", "(", "(", "c_enc_new_item", ",", "t_enc_new_item", ")", ",", "dim", "=", "1", ")", ",", "\n", "pointer_memories", "=", "{", "\n", "\"column\"", ":", "c_enc_new_item", ",", "\n", "# \"table\": torch.cat((c_enc_new_item, t_enc_new_item), dim=1),", "\n", "\"table\"", ":", "t_enc_new_item", ",", "\n", "}", ",", "\n", "pointer_maps", "=", "{", "\n", "\"column\"", ":", "column_pointer_maps", "[", "batch_idx", "]", ",", "\n", "\"table\"", ":", "table_pointer_maps", "[", "batch_idx", "]", ",", "\n", "}", ",", "\n", "relation", "=", "relation", ",", "\n", "m2c_align_mat", "=", "align_mat_item", "[", "0", "]", ",", "\n", "m2t_align_mat", "=", "align_mat_item", "[", "1", "]", ",", "\n", ")", "\n", ")", "\n", "", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.StringLinking.__init__": [[67, 70], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "preproc", ")", ":", "\n", "        ", "self", ".", "_device", "=", "device", "\n", "self", ".", "relations2id", "=", "preproc", ".", "relations2id", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.StringLinking.__call__": [[71, 73], ["spider_linking.StringLinking.link_one_example"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_linking.StringLinking.link_one_example"], ["", "def", "__call__", "(", "self", ",", "desc", ")", ":", "\n", "        ", "return", "self", ".", "link_one_example", "(", "desc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.StringLinking.link_one_example": [[74, 84], ["spider_linking.get_graph_from_relations", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "spider_linking.RelationMap", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_linking.get_graph_from_relations", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["", "def", "link_one_example", "(", "self", ",", "desc", ")", ":", "\n", "        ", "relation_np", "=", "get_graph_from_relations", "(", "desc", ",", "self", ".", "relations2id", ")", "\n", "relations_t", "=", "torch", ".", "LongTensor", "(", "relation_np", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "relation_obj", "=", "RelationMap", "(", "\n", "q_len", "=", "len", "(", "desc", "[", "\"question\"", "]", ")", ",", "\n", "c_len", "=", "len", "(", "desc", "[", "\"columns\"", "]", ")", ",", "\n", "t_len", "=", "len", "(", "desc", "[", "\"tables\"", "]", ")", ",", "\n", "predefined_relation", "=", "relations_t", ",", "\n", ")", "\n", "return", "relation_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.BilinearLinking.__init__": [[94, 206], ["torch.nn.Module.__init__", "spider_linking.BilinearLinking._build_modules", "spider_linking.BilinearLinking._build_modules", "spider_linking.BilinearLinking._build_modules", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "tensor2struct.modules.embedders.LookupEmbeddings", "tensor2struct.modules.embedders.LookupEmbeddings", "tensor2struct.modules.lstm.BiLSTM", "tensor2struct.modules.lstm.BiLSTM", "spider_linking.StringLinking", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "tensor2struct.modules.energys.Bilinear", "tensor2struct.modules.energys.MLP", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEnc._build_modules", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEnc._build_modules", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEnc._build_modules"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "device", ",", "\n", "preproc", ",", "\n", "word_emb_size", ",", "\n", "num_latent_relations", ",", "\n", "hidden_size", "=", "300", ",", "\n", "recurrent_size", "=", "256", ",", "\n", "discrete_relation", "=", "True", ",", "\n", "norm_relation", "=", "True", ",", "\n", "symmetric_relation", "=", "False", ",", "\n", "combine_latent_relations", "=", "False", ",", "\n", "score_type", "=", "\"bilinear\"", ",", "\n", "learnable_embeddings", "=", "False", ",", "\n", "question_encoder", "=", "(", "\"shared-en-emb\"", ",", ")", ",", "\n", "column_encoder", "=", "(", "\"shared-en-emb\"", ",", ")", ",", "\n", "table_encoder", "=", "(", "\"shared-en-emb\"", ",", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "preproc", "=", "preproc", "\n", "self", ".", "vocab", "=", "preproc", ".", "vocab", "\n", "self", ".", "word_emb_size", "=", "word_emb_size", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "discrete_relation", "=", "discrete_relation", "\n", "self", ".", "norm_relation", "=", "norm_relation", "\n", "self", ".", "num_latent_relations", "=", "num_latent_relations", "\n", "self", ".", "relations2id", "=", "preproc", ".", "relations2id", "\n", "self", ".", "recurrent_size", "=", "recurrent_size", "\n", "self", ".", "dropout", "=", "0.0", "\n", "\n", "score_funcs", "=", "{", "\n", "\"bilinear\"", ":", "lambda", ":", "energys", ".", "Bilinear", "(", "\n", "hidden_size", ",", "num_latent_relations", ",", "include_id", "=", "True", "\n", ")", ",", "\n", "\"mlp\"", ":", "lambda", ":", "energys", ".", "MLP", "(", "hidden_size", ",", "num_latent_relations", ")", ",", "\n", "}", "\n", "\n", "# build modules", "\n", "if", "learnable_embeddings", ":", "\n", "            ", "self", ".", "en_learnable_words", "=", "self", ".", "vocab", "\n", "", "else", ":", "\n", "            ", "self", ".", "en_learnable_words", "=", "None", "\n", "", "shared_modules", "=", "{", "\n", "\"shared-en-emb\"", ":", "embedders", ".", "LookupEmbeddings", "(", "\n", "self", ".", "_device", ",", "\n", "self", ".", "vocab", ",", "\n", "self", ".", "preproc", ".", "word_emb", ",", "\n", "self", ".", "word_emb_size", ",", "\n", "learnable_words", "=", "self", ".", "en_learnable_words", ",", "\n", ")", ",", "\n", "}", "\n", "\n", "if", "self", ".", "preproc", ".", "use_ch_vocab", ":", "\n", "            ", "self", ".", "ch_vocab", "=", "preproc", ".", "ch_vocab", "\n", "if", "learnable_embeddings", ":", "\n", "                ", "self", ".", "ch_learnable_words", "=", "self", ".", "ch_vocab", "\n", "", "else", ":", "\n", "                ", "self", ".", "ch_learnable_words", "=", "None", "\n", "", "shared_modules", "[", "\"shared-ch-emb\"", "]", "=", "embedders", ".", "LookupEmbeddings", "(", "\n", "self", ".", "_device", ",", "\n", "self", ".", "ch_vocab", ",", "\n", "self", ".", "preproc", ".", "ch_word_emb", ",", "\n", "self", ".", "preproc", ".", "ch_word_emb", ".", "dim", ",", "\n", "learnable_words", "=", "self", ".", "ch_learnable_words", ",", "\n", ")", "\n", "shared_modules", "[", "\"ch-bilstm\"", "]", "=", "lstm", ".", "BiLSTM", "(", "\n", "input_size", "=", "self", ".", "preproc", ".", "ch_word_emb", ".", "dim", ",", "\n", "output_size", "=", "self", ".", "recurrent_size", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "use_native", "=", "False", ",", "\n", "summarize", "=", "False", ",", "\n", ")", "\n", "shared_modules", "[", "\"ch-bilstm-native\"", "]", "=", "lstm", ".", "BiLSTM", "(", "\n", "input_size", "=", "self", ".", "preproc", ".", "ch_word_emb", ".", "dim", ",", "\n", "output_size", "=", "self", ".", "recurrent_size", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "use_native", "=", "True", ",", "\n", "summarize", "=", "False", ",", "\n", ")", "\n", "\n", "", "self", ".", "question_encoder", "=", "self", ".", "_build_modules", "(", "\n", "question_encoder", ",", "shared_modules", "=", "shared_modules", "\n", ")", "\n", "self", ".", "column_encoder", "=", "self", ".", "_build_modules", "(", "\n", "column_encoder", ",", "shared_modules", "=", "shared_modules", "\n", ")", "\n", "self", ".", "table_encoder", "=", "self", ".", "_build_modules", "(", "\n", "table_encoder", ",", "shared_modules", "=", "shared_modules", "\n", ")", "\n", "\n", "self", ".", "combine_latent_relations", "=", "combine_latent_relations", "\n", "if", "combine_latent_relations", ":", "\n", "            ", "self", ".", "string_link", "=", "StringLinking", "(", "device", ",", "preproc", ")", "\n", "\n", "", "self", ".", "symmetric_relation", "=", "symmetric_relation", "\n", "assert", "self", ".", "symmetric_relation", "\n", "if", "self", ".", "symmetric_relation", ":", "\n", "            ", "relations", "=", "(", "\"qc\"", ",", "\"qt\"", ")", "\n", "", "else", ":", "\n", "            ", "relations", "=", "(", "\"qc\"", ",", "\"cq\"", ",", "\"tq\"", ",", "\"qt\"", ")", "\n", "", "self", ".", "relation_score_dic", "=", "nn", ".", "ModuleDict", "(", "\n", "{", "k", ":", "score_funcs", "[", "score_type", "]", "(", ")", "for", "k", "in", "relations", "}", "\n", ")", "\n", "\n", "if", "discrete_relation", ":", "\n", "            ", "self", ".", "temperature", "=", "1", "# for gumbel", "\n", "\n", "", "if", "not", "norm_relation", ":", "# then norm q/col/tab", "\n", "            ", "self", ".", "null_q_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "1", ",", "hidden_size", "]", ")", ")", "\n", "self", ".", "null_c_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "1", ",", "hidden_size", "]", ")", ")", "\n", "self", ".", "null_t_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "1", ",", "hidden_size", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.BilinearLinking._build_modules": [[207, 239], ["torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "tensor2struct.modules.embedders.LookupEmbeddings", "tensor2struct.modules.lstm.BiLSTM", "tensor2struct.modules.lstm.BiLSTM", "modules.append", "modules.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "", "def", "_build_modules", "(", "self", ",", "module_types", ",", "shared_modules", "=", "None", ")", ":", "\n", "        ", "module_builder", "=", "{", "\n", "\"en-emb\"", ":", "lambda", ":", "embedders", ".", "LookupEmbeddings", "(", "\n", "self", ".", "_device", ",", "\n", "self", ".", "vocab", ",", "\n", "self", ".", "preproc", ".", "word_emb", ",", "\n", "self", ".", "word_emb_size", ",", "\n", "learnable_words", "=", "self", ".", "en_learnable_words", ",", "\n", ")", ",", "\n", "\"bilstm\"", ":", "lambda", ":", "lstm", ".", "BiLSTM", "(", "\n", "input_size", "=", "self", ".", "word_emb_size", ",", "\n", "output_size", "=", "self", ".", "recurrent_size", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "summarize", "=", "False", ",", "\n", "use_native", "=", "False", ",", "\n", ")", ",", "\n", "\"bilstm-native\"", ":", "lambda", ":", "lstm", ".", "BiLSTM", "(", "\n", "input_size", "=", "self", ".", "word_emb_size", ",", "\n", "output_size", "=", "self", ".", "recurrent_size", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "summarize", "=", "False", ",", "\n", "use_native", "=", "True", ",", "\n", ")", ",", "\n", "}", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "module_type", "in", "module_types", ":", "\n", "            ", "if", "module_type", "in", "shared_modules", ":", "\n", "                ", "modules", ".", "append", "(", "shared_modules", "[", "module_type", "]", ")", "\n", "", "else", ":", "\n", "                ", "modules", ".", "append", "(", "module_builder", "[", "module_type", "]", "(", ")", ")", "\n", "", "", "return", "torch", ".", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.BilinearLinking.compute_relation_score": [[240, 258], ["x1.size", "x2.size", "x1.expand", "x2.expand().transpose", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x1.unsqueeze", "x2.unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "res.append", "x2.expand"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.expand", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.expand"], ["", "def", "compute_relation_score", "(", "self", ",", "x1", ",", "x2", ",", "boudaries", ",", "score_type", ")", ":", "\n", "        ", "\"\"\"\n        x1, x2: len * relation_emb_size\n        \"\"\"", "\n", "x1", ",", "x2", "=", "x1", ".", "unsqueeze", "(", "1", ")", ",", "x2", ".", "unsqueeze", "(", "1", ")", "# len * 1 * emb_size", "\n", "len_1", ",", "_", ",", "rs", "=", "x1", ".", "size", "(", ")", "\n", "len_2", ",", "_", ",", "rs", "=", "x2", ".", "size", "(", ")", "\n", "_x1", "=", "x1", ".", "expand", "(", "len_1", ",", "len_2", ",", "rs", ")", "\n", "_x2", "=", "x2", ".", "expand", "(", "len_2", ",", "len_1", ",", "rs", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "relation_scores", "=", "self", ".", "relation_score_dic", "[", "score_type", "]", "(", "_x1", ",", "_x2", ")", "\n", "\n", "# TODO: optimize this code", "\n", "res", "=", "[", "]", "\n", "for", "s", ",", "e", "in", "zip", "(", "boudaries", ",", "boudaries", "[", "1", ":", "]", ")", ":", "\n", "            ", "max_val", ",", "max_id", "=", "torch", ".", "max", "(", "relation_scores", "[", ":", ",", "s", ":", "e", ",", ":", "]", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "max_val", ")", "\n", "", "res_v", "=", "torch", ".", "cat", "(", "res", ",", "dim", "=", "1", ")", "\n", "return", "res_v", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.BilinearLinking.normalize_relation_score": [[259, 279], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "tensor2struct.utils.gumbel.gumbel_softmax_sample", "spider_linking.argmax"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gumbel.gumbel_softmax_sample", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.argmax"], ["", "def", "normalize_relation_score", "(", "self", ",", "relation_scores", ")", ":", "\n", "        ", "\"\"\"\n        relation_scores: either dim_1 or dim_2 will be normalized\n        \"\"\"", "\n", "if", "not", "self", ".", "norm_relation", ":", "\n", "            ", "norm_dim", "=", "1", "\n", "", "else", ":", "\n", "            ", "norm_dim", "=", "2", "\n", "\n", "", "if", "self", ".", "discrete_relation", ":", "\n", "            ", "device", "=", "relation_scores", ".", "device", "\n", "if", "self", ".", "training", ":", "\n", "                ", "r", "=", "gumbel", ".", "gumbel_softmax_sample", "(", "\n", "relation_scores", ",", "self", ".", "temperature", ",", "device", ",", "norm_dim", "\n", ")", "\n", "", "else", ":", "\n", "                ", "r", "=", "argmax", "(", "relation_scores", ",", "device", ",", "norm_dim", ")", "\n", "", "", "else", ":", "\n", "            ", "r", "=", "torch", ".", "softmax", "(", "relation_scores", ",", "dim", "=", "norm_dim", ")", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.BilinearLinking.get_symmetric_relation": [[280, 300], ["spider_linking.BilinearLinking.compute_relation_score", "spider_linking.BilinearLinking.normalize_relation_score", "spider_linking.BilinearLinking.normalize_relation_score", "getattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "getattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "boudaries.append", "spider_linking.BilinearLinking.transpose"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.SinkhornLinking.compute_relation_score", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.SinkhornLinking.normalize_relation_score", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.SinkhornLinking.normalize_relation_score", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "get_symmetric_relation", "(", "self", ",", "x1", ",", "x2", ",", "boudaries", ",", "score_type", ",", "ignore_null", "=", "True", ")", ":", "\n", "        ", "x1_type", ",", "x2_type", "=", "score_type", "\n", "assert", "x1_type", "==", "\"q\"", "# qc, qt", "\n", "# pack the null token", "\n", "if", "not", "self", ".", "norm_relation", ":", "\n", "            ", "null_token_1", "=", "getattr", "(", "self", ",", "f\"null_{x1_type}_token\"", ")", "\n", "x1", "=", "torch", ".", "cat", "(", "[", "x1", ",", "null_token_1", "]", ",", "0", ")", "\n", "null_token_2", "=", "getattr", "(", "self", ",", "f\"null_{x2_type}_token\"", ")", "\n", "x2", "=", "torch", ".", "cat", "(", "[", "x2", ",", "null_token_2", "]", ",", "0", ")", "\n", "boudaries", ".", "append", "(", "boudaries", "[", "-", "1", "]", "+", "1", ")", "\n", "\n", "", "relation_scores", "=", "self", ".", "compute_relation_score", "(", "x1", ",", "x2", ",", "boudaries", ",", "score_type", ")", "\n", "r1", "=", "self", ".", "normalize_relation_score", "(", "relation_scores", ")", "\n", "r2", "=", "self", ".", "normalize_relation_score", "(", "relation_scores", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "\n", "# unpack the null tokens", "\n", "if", "not", "self", ".", "norm_relation", "and", "ignore_null", ":", "\n", "            ", "r1", "=", "r1", "[", ":", "-", "1", ",", ":", "-", "1", ",", ":", "]", "\n", "r2", "=", "r2", "[", ":", "-", "1", ",", ":", "-", "1", ",", ":", "]", "\n", "", "return", "r1", ",", "r2", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.BilinearLinking.get_q_ct_relations": [[301, 322], ["spider_linking.BilinearLinking.question_encoder", "spider_linking.BilinearLinking.table_encoder", "spider_linking.BilinearLinking.get_symmetric_relation", "spider_linking.BilinearLinking.get_symmetric_relation", "spider_linking.BilinearLinking.column_encoder", "spider_linking.BilinearLinking.column_encoder", "q_enc.select", "c_enc.select", "t_enc.select", "c_boudaries[].tolist", "t_boudaries[].tolist"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.SinkhornLinking.get_symmetric_relation", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.SinkhornLinking.get_symmetric_relation", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.select", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.select", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.select"], ["", "def", "get_q_ct_relations", "(", "self", ",", "desc", ",", "ignore_null", ",", "column_type", ")", ":", "\n", "        ", "q_enc", ",", "_", "=", "self", ".", "question_encoder", "(", "[", "[", "desc", "[", "\"question\"", "]", "]", "]", ")", "\n", "if", "column_type", ":", "\n", "            ", "c_enc", ",", "c_boudaries", "=", "self", ".", "column_encoder", "(", "\n", "[", "[", "col", "[", "1", ":", "]", "for", "col", "in", "desc", "[", "\"columns\"", "]", "]", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "c_enc", ",", "c_boudaries", "=", "self", ".", "column_encoder", "(", "[", "desc", "[", "\"columns\"", "]", "]", ")", "\n", "\n", "", "t_enc", ",", "t_boudaries", "=", "self", ".", "table_encoder", "(", "[", "desc", "[", "\"tables\"", "]", "]", ")", "\n", "\n", "q_enc", ",", "c_enc", ",", "t_enc", "=", "q_enc", ".", "select", "(", "0", ")", ",", "c_enc", ".", "select", "(", "0", ")", ",", "t_enc", ".", "select", "(", "0", ")", "\n", "c_boudaries", ",", "t_boudaries", "=", "c_boudaries", "[", "0", "]", ".", "tolist", "(", ")", ",", "t_boudaries", "[", "0", "]", ".", "tolist", "(", ")", "\n", "\n", "qc_relation", ",", "cq_relation", "=", "self", ".", "get_symmetric_relation", "(", "\n", "q_enc", ",", "c_enc", ",", "c_boudaries", ",", "\"qc\"", ",", "ignore_null", "=", "ignore_null", "\n", ")", "\n", "qt_relation", ",", "tq_relation", "=", "self", ".", "get_symmetric_relation", "(", "\n", "q_enc", ",", "t_enc", ",", "t_boudaries", ",", "\"qt\"", ",", "ignore_null", "=", "ignore_null", "\n", ")", "\n", "return", "qc_relation", ",", "cq_relation", ",", "qt_relation", ",", "tq_relation", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.BilinearLinking.forward_unbatched": [[323, 349], ["spider_linking.BilinearLinking.get_q_ct_relations", "spider_linking.get_schema_graph_from_relations", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "spider_linking.RelationMap", "spider_linking.BilinearLinking.string_link", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.SinkhornLinking.get_q_ct_relations", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_linking.get_schema_graph_from_relations", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["", "def", "forward_unbatched", "(", "self", ",", "desc", ",", "ignore_null", "=", "True", ",", "column_type", "=", "True", ")", ":", "\n", "        ", "qc_relation", ",", "cq_relation", ",", "qt_relation", ",", "tq_relation", "=", "self", ".", "get_q_ct_relations", "(", "\n", "desc", ",", "ignore_null", ",", "column_type", "\n", ")", "\n", "\n", "ct_relation_np", "=", "get_schema_graph_from_relations", "(", "desc", ",", "self", ".", "relations2id", ")", "\n", "ct_relation", "=", "torch", ".", "LongTensor", "(", "ct_relation_np", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n", "if", "self", ".", "combine_latent_relations", ":", "\n", "            ", "r", "=", "self", ".", "string_link", "(", "desc", ")", "\n", "predefined_relation", "=", "r", ".", "predefined_relation", "\n", "", "else", ":", "\n", "            ", "predefined_relation", "=", "None", "\n", "\n", "", "relations", "=", "RelationMap", "(", "\n", "q_len", "=", "len", "(", "desc", "[", "\"question\"", "]", ")", ",", "\n", "c_len", "=", "len", "(", "desc", "[", "\"columns\"", "]", ")", ",", "\n", "t_len", "=", "len", "(", "desc", "[", "\"tables\"", "]", ")", ",", "\n", "predefined_relation", "=", "predefined_relation", ",", "\n", "qc_relation", "=", "qc_relation", ",", "\n", "cq_relation", "=", "cq_relation", ",", "\n", "qt_relation", "=", "qt_relation", ",", "\n", "tq_relation", "=", "tq_relation", ",", "\n", "ct_relation", "=", "ct_relation", ",", "\n", ")", "\n", "return", "relations", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.BilinearLinking.forward": [[350, 353], ["spider_linking.BilinearLinking.forward_unbatched"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.NoOpUpdate.forward_unbatched"], ["", "def", "forward", "(", "self", ",", "desc", ",", "ignore_null", "=", "True", ",", "column_type", "=", "True", ")", ":", "\n", "        ", "return", "self", ".", "forward_unbatched", "(", "\n", "desc", ",", "ignore_null", "=", "ignore_null", ",", "column_type", "=", "column_type", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.SinkhornLinking.__init__": [[358, 396], ["spider_linking.BilinearLinking.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "device", ",", "\n", "preproc", ",", "\n", "num_latent_relations", ",", "\n", "word_emb_size", ",", "\n", "recurrent_size", "=", "256", ",", "\n", "discrete_relation", "=", "True", ",", "\n", "norm_relation", "=", "True", ",", "\n", "symmetric_relation", "=", "False", ",", "\n", "combine_latent_relations", "=", "False", ",", "\n", "question_encoder", "=", "(", "\"shared-en-emb\"", ",", "\"bilstm-native\"", ")", ",", "\n", "column_encoder", "=", "(", "\"shared-en-emb\"", ",", "\"bilstm-native\"", ")", ",", "\n", "table_encoder", "=", "(", "\"shared-en-emb\"", ",", "\"bilstm-native\"", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "device", "=", "device", ",", "\n", "preproc", "=", "preproc", ",", "\n", "word_emb_size", "=", "word_emb_size", ",", "\n", "num_latent_relations", "=", "num_latent_relations", ",", "\n", "discrete_relation", "=", "False", ",", "\n", "norm_relation", "=", "False", ",", "\n", "symmetric_relation", "=", "True", ",", "\n", "hidden_size", "=", "recurrent_size", ",", "\n", "recurrent_size", "=", "recurrent_size", ",", "\n", "combine_latent_relations", "=", "combine_latent_relations", ",", "\n", "question_encoder", "=", "question_encoder", ",", "\n", "column_encoder", "=", "column_encoder", ",", "\n", "table_encoder", "=", "table_encoder", ",", "\n", "score_type", "=", "\"bilinear\"", ",", "\n", "learnable_embeddings", "=", "False", ",", "\n", ")", "\n", "self", ".", "sh_temperature", "=", "0.8", "\n", "self", ".", "num_sh_it", "=", "16", "\n", "\n", "self", ".", "null_q_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "1", ",", "recurrent_size", "]", ")", ")", "\n", "self", ".", "null_c_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "1", ",", "recurrent_size", "]", ")", ")", "\n", "self", ".", "null_t_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "1", ",", "recurrent_size", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.SinkhornLinking.normalize_relation_score": [[397, 406], ["relation_scores.size", "range", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size"], ["", "def", "normalize_relation_score", "(", "self", ",", "relation_scores", ")", ":", "\n", "        ", "x_len", ",", "_x_len", ",", "num_r", "=", "relation_scores", ".", "size", "(", ")", "\n", "assert", "x_len", "==", "_x_len", "\n", "it_scores", "=", "relation_scores", "\n", "for", "_", "in", "range", "(", "self", ".", "num_sh_it", ")", ":", "\n", "            ", "it_scores", "=", "it_scores", "-", "torch", ".", "logsumexp", "(", "it_scores", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "it_scores", "=", "it_scores", "-", "torch", ".", "logsumexp", "(", "it_scores", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "", "prob_m", "=", "torch", ".", "exp", "(", "it_scores", ")", "\n", "return", "prob_m", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.SinkhornLinking.compute_relation_score": [[407, 418], ["x1.size", "x2.size", "x1.expand", "x2.expand().transpose", "x1.unsqueeze", "x2.unsqueeze", "x2.expand"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.expand", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.expand"], ["", "def", "compute_relation_score", "(", "self", ",", "x1", ",", "x2", ",", "score_type", ")", ":", "\n", "        ", "\"\"\"\n        x1, x2: len * relation_emb_size\n        \"\"\"", "\n", "x1", ",", "x2", "=", "x1", ".", "unsqueeze", "(", "1", ")", ",", "x2", ".", "unsqueeze", "(", "1", ")", "# len * 1 * emb_size", "\n", "len_1", ",", "_", ",", "rs", "=", "x1", ".", "size", "(", ")", "\n", "len_2", ",", "_", ",", "rs", "=", "x2", ".", "size", "(", ")", "\n", "_x1", "=", "x1", ".", "expand", "(", "len_1", ",", "len_2", ",", "rs", ")", "\n", "_x2", "=", "x2", ".", "expand", "(", "len_2", ",", "len_1", ",", "rs", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "relation_scores", "=", "self", ".", "relation_score_dic", "[", "score_type", "]", "(", "_x1", ",", "_x2", ")", "\n", "return", "relation_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.SinkhornLinking.get_symmetric_relation": [[419, 449], ["x1.size", "x2.size", "getattr().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "getattr().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "spider_linking.SinkhornLinking.compute_relation_score", "spider_linking.SinkhornLinking.normalize_relation_score", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.transpose", "torch.cat.transpose", "max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "m_q_ct_r_sum.append", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.cat.append", "torch.cat.append", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.expand", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.expand", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.SinkhornLinking.compute_relation_score", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.SinkhornLinking.normalize_relation_score", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "get_symmetric_relation", "(", "self", ",", "x1", ",", "x2", ",", "boudaries", ",", "score_type", ",", "ignore_null", "=", "True", ")", ":", "\n", "        ", "q_type", ",", "ct_type", "=", "score_type", "\n", "assert", "q_type", "==", "\"q\"", "# qc, qt", "\n", "q_len", ",", "feat_dim", "=", "x1", ".", "size", "(", ")", "\n", "ct_len", ",", "feat_dim", "=", "x2", ".", "size", "(", ")", "\n", "\n", "pad_len", "=", "max", "(", "q_len", ",", "ct_len", ")", "+", "1", "\n", "null_token_q", "=", "getattr", "(", "self", ",", "f\"null_{q_type}_token\"", ")", ".", "expand", "(", "pad_len", "-", "q_len", ",", "-", "1", ")", "\n", "q_input", "=", "torch", ".", "cat", "(", "[", "x1", ",", "null_token_q", "]", ",", "0", ")", "\n", "null_token_ct", "=", "getattr", "(", "self", ",", "f\"null_{ct_type}_token\"", ")", ".", "expand", "(", "\n", "pad_len", "-", "ct_len", ",", "-", "1", "\n", ")", "\n", "ct_input", "=", "torch", ".", "cat", "(", "[", "x2", ",", "null_token_ct", "]", ",", "0", ")", "\n", "\n", "relation_scores", "=", "self", ".", "compute_relation_score", "(", "q_input", ",", "ct_input", ",", "score_type", ")", "\n", "q_ct_r", "=", "self", ".", "normalize_relation_score", "(", "relation_scores", ")", "\n", "\n", "# merge prob mass of ct", "\n", "m_q_ct_r_sum", "=", "[", "]", "\n", "m_q_ct_r_avg", "=", "[", "]", "\n", "for", "s", ",", "e", "in", "zip", "(", "boudaries", ",", "boudaries", "[", "1", ":", "]", ")", ":", "\n", "            ", "sum_val", "=", "torch", ".", "sum", "(", "q_ct_r", "[", ":", "q_len", ",", "s", ":", "e", ",", ":", "]", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "m_q_ct_r_sum", ".", "append", "(", "sum_val", ")", "\n", "avg_val", "=", "torch", ".", "mean", "(", "q_ct_r", "[", ":", "q_len", ",", "s", ":", "e", ",", ":", "]", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "m_q_ct_r_avg", ".", "append", "(", "avg_val", ")", "\n", "", "m_q_ct_r", "=", "torch", ".", "cat", "(", "m_q_ct_r_sum", ",", "dim", "=", "1", ")", "\n", "\n", "m_q_ct_r_avg", "=", "torch", ".", "cat", "(", "m_q_ct_r_avg", ",", "dim", "=", "1", ")", "\n", "m_ct_q_r", "=", "m_q_ct_r_avg", ".", "transpose", "(", "0", ",", "1", ")", "\n", "return", "m_q_ct_r", ",", "m_ct_q_r", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.SinkhornLinking.merge_duplicates": [[450, 462], ["enumerate", "tuple", "id_map.append", "len", "new_item_list.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "merge_duplicates", "(", "self", ",", "items", ")", ":", "\n", "# input: list of list of words", "\n", "        ", "new_item_list", "=", "[", "]", "\n", "new_item2id", "=", "{", "}", "\n", "id_map", "=", "[", "]", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "items", ")", ":", "\n", "            ", "t_item", "=", "tuple", "(", "item", ")", "\n", "if", "t_item", "not", "in", "new_item_list", ":", "\n", "                ", "new_item2id", "[", "t_item", "]", "=", "len", "(", "new_item_list", ")", "\n", "new_item_list", ".", "append", "(", "t_item", ")", "\n", "", "id_map", ".", "append", "(", "new_item2id", "[", "t_item", "]", ")", "\n", "", "return", "new_item_list", ",", "id_map", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.SinkhornLinking.get_q_ct_relations": [[463, 494], ["spider_linking.SinkhornLinking.question_encoder", "spider_linking.SinkhornLinking.merge_duplicates", "spider_linking.SinkhornLinking.column_encoder", "spider_linking.SinkhornLinking.merge_duplicates", "spider_linking.SinkhornLinking.table_encoder", "spider_linking.SinkhornLinking.get_symmetric_relation", "spider_linking.SinkhornLinking.get_symmetric_relation", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "m_qc_relation.index_select", "m_cq_relation.index_select", "m_qt_relation.index_select", "m_tq_relation.index_select", "q_enc.select", "c_enc.select", "t_enc.select", "c_boudaries[].tolist", "t_boudaries[].tolist", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.SinkhornLinking.merge_duplicates", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.SinkhornLinking.merge_duplicates", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.SinkhornLinking.get_symmetric_relation", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.SinkhornLinking.get_symmetric_relation", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.select", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.select", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.select"], ["", "def", "get_q_ct_relations", "(", "self", ",", "desc", ",", "ignore_null", ",", "column_type", ")", ":", "\n", "# create mapping", "\n", "        ", "q_enc", ",", "_", "=", "self", ".", "question_encoder", "(", "[", "[", "desc", "[", "\"question\"", "]", "]", "]", ")", "\n", "if", "column_type", ":", "\n", "            ", "raw_columns", "=", "[", "col", "[", "1", ":", "]", "for", "col", "in", "desc", "[", "\"columns\"", "]", "]", "\n", "", "else", ":", "\n", "            ", "raw_columns", "=", "desc", "[", "\"columns\"", "]", "\n", "", "new_columns", ",", "column_id_map", "=", "self", ".", "merge_duplicates", "(", "raw_columns", ")", "\n", "c_enc", ",", "c_boudaries", "=", "self", ".", "column_encoder", "(", "[", "new_columns", "]", ")", "\n", "new_tables", ",", "table_id_map", "=", "self", ".", "merge_duplicates", "(", "desc", "[", "\"tables\"", "]", ")", "\n", "t_enc", ",", "t_boudaries", "=", "self", ".", "table_encoder", "(", "[", "new_tables", "]", ")", "\n", "\n", "# compute relations", "\n", "q_enc", ",", "c_enc", ",", "t_enc", "=", "q_enc", ".", "select", "(", "0", ")", ",", "c_enc", ".", "select", "(", "0", ")", ",", "t_enc", ".", "select", "(", "0", ")", "\n", "c_boudaries", ",", "t_boudaries", "=", "c_boudaries", "[", "0", "]", ".", "tolist", "(", ")", ",", "t_boudaries", "[", "0", "]", ".", "tolist", "(", ")", "\n", "m_qc_relation", ",", "m_cq_relation", "=", "self", ".", "get_symmetric_relation", "(", "\n", "q_enc", ",", "c_enc", ",", "c_boudaries", ",", "\"qc\"", ",", "ignore_null", "=", "ignore_null", "\n", ")", "\n", "m_qt_relation", ",", "m_tq_relation", "=", "self", ".", "get_symmetric_relation", "(", "\n", "q_enc", ",", "t_enc", ",", "t_boudaries", ",", "\"qt\"", ",", "ignore_null", "=", "ignore_null", "\n", ")", "\n", "\n", "# map it back", "\n", "column_id_map", "=", "torch", ".", "LongTensor", "(", "column_id_map", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "table_id_map", "=", "torch", ".", "LongTensor", "(", "table_id_map", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "qc_relation", "=", "m_qc_relation", ".", "index_select", "(", "1", ",", "column_id_map", ")", "\n", "cq_relation", "=", "m_cq_relation", ".", "index_select", "(", "0", ",", "column_id_map", ")", "\n", "qt_relation", "=", "m_qt_relation", ".", "index_select", "(", "1", ",", "table_id_map", ")", "\n", "tq_relation", "=", "m_tq_relation", ".", "index_select", "(", "0", ",", "table_id_map", ")", "\n", "\n", "return", "qc_relation", ",", "cq_relation", ",", "qt_relation", ",", "tq_relation", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.get_graph_from_relations": [[18, 35], ["tensor2struct.contexts.knowledge_graph.KnowledgeGraph", "knowledge_graph.KnowledgeGraph.get_relation_graph", "sections.append", "sections.append", "knowledge_graph.KnowledgeGraph.add_relations_to_graph", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.knowledge_graph.KnowledgeGraph.get_relation_graph", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.knowledge_graph.KnowledgeGraph.add_relations_to_graph"], ["def", "get_graph_from_relations", "(", "desc", ",", "relations2id", ")", ":", "\n", "    ", "\"\"\"\n    Protocol: the graph is contructed based on four keys of desc:\n    question, columns, tables\n    **MIND THE ORDER OF SECTIONS**\n    \"\"\"", "\n", "sections", "=", "[", "(", "\"q\"", ",", "len", "(", "desc", "[", "\"question\"", "]", ")", ")", "]", "\n", "if", "\"columns\"", "in", "desc", ":", "\n", "        ", "sections", ".", "append", "(", "(", "\"col\"", ",", "len", "(", "desc", "[", "\"columns\"", "]", ")", ")", ")", "\n", "", "if", "\"tables\"", "in", "desc", ":", "\n", "        ", "sections", ".", "append", "(", "(", "\"tab\"", ",", "len", "(", "desc", "[", "\"tables\"", "]", ")", ")", ")", "\n", "\n", "", "relations", "=", "[", "desc", "[", "\"schema_relations\"", "]", ",", "desc", "[", "\"sc_relations\"", "]", ",", "desc", "[", "\"cv_relations\"", "]", "]", "\n", "relation_graph", "=", "knowledge_graph", ".", "KnowledgeGraph", "(", "sections", ",", "relations2id", ")", "\n", "for", "relation", "in", "relations", ":", "\n", "        ", "relation_graph", ".", "add_relations_to_graph", "(", "relation", ")", "\n", "", "return", "relation_graph", ".", "get_relation_graph", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.get_schema_graph_from_relations": [[37, 48], ["tensor2struct.contexts.knowledge_graph.KnowledgeGraph", "knowledge_graph.KnowledgeGraph.get_relation_graph", "sections.append", "sections.append", "knowledge_graph.KnowledgeGraph.add_relations_to_graph", "len", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.knowledge_graph.KnowledgeGraph.get_relation_graph", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.knowledge_graph.KnowledgeGraph.add_relations_to_graph"], ["", "def", "get_schema_graph_from_relations", "(", "desc", ",", "relations2id", ")", ":", "\n", "    ", "sections", "=", "[", "]", "\n", "if", "\"columns\"", "in", "desc", ":", "\n", "        ", "sections", ".", "append", "(", "(", "\"col\"", ",", "len", "(", "desc", "[", "\"columns\"", "]", ")", ")", ")", "\n", "", "if", "\"tables\"", "in", "desc", ":", "\n", "        ", "sections", ".", "append", "(", "(", "\"tab\"", ",", "len", "(", "desc", "[", "\"tables\"", "]", ")", ")", ")", "\n", "", "relations", "=", "[", "desc", "[", "\"schema_relations\"", "]", "]", "\n", "relation_graph", "=", "knowledge_graph", ".", "KnowledgeGraph", "(", "sections", ",", "relations2id", ")", "\n", "for", "relation", "in", "relations", ":", "\n", "        ", "relation_graph", ".", "add_relations_to_graph", "(", "relation", ")", "\n", "", "return", "relation_graph", ".", "get_relation_graph", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.argmax": [[86, 90], ["torch.argmax", "torch.argmax", "torch.zeros_like().to().scatter_", "torch.zeros_like().to().scatter_", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like", "torch.zeros_like"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.argmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.argmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["", "", "def", "argmax", "(", "logits", ",", "device", ",", "dim", ")", ":", "\n", "    ", "max_id", "=", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "dim", ",", "keepdim", "=", "True", ")", "\n", "one_hot", "=", "torch", ".", "zeros_like", "(", "logits", ")", ".", "to", "(", "device", ")", ".", "scatter_", "(", "dim", ",", "max_id", ",", "1", ")", "\n", "return", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_beam_search.beam_search_with_heuristics": [[18, 248], ["tensor2struct.utils.registry.register", "model", "spider_beam_search.Hypothesis4Filtering", "range", "prefixes2fill_from.sort", "range", "unfiltered_finished.sort", "filtered_finished.sort", "prefixes_unfinished.sort", "spider_beam_search.merge_beams", "candidates.sort", "candidates.sort", "set", "set", "set", "set", "filtered_finished.append", "cached_finished_seqs.sort", "len", "hyp.inference_state.clone", "hyp.inference_state.clone.step", "beam_prefix.append", "operator.attrgetter", "hyp.inference_state.clone", "hyp.inference_state.clone.step", "operator.attrgetter", "len", "len", "set", "set", "sorted", "set.issubset", "operator.attrgetter", "operator.attrgetter", "len", "prefixes2fill_from.append", "operator.itemgetter", "spider_beam_search.Hypothesis4Filtering", "len", "len", "prefixes_unfinished.append", "operator.itemgetter", "unfiltered_finished.append", "beam_from.append", "zip", "set.add", "operator.attrgetter", "len", "len", "spider_beam_search.Hypothesis4Filtering", "spider_beam_search.Hypothesis4Filtering", "networkx.shortest_path", "set.add", "set.add", "choice_score.item", "choice_score.item", "set.add", "choice_score.item", "choice_score.item"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.register", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_beam_search.merge_beams", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.clone", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.clone", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add"], ["", "@", "registry", ".", "register", "(", "\"infer_method\"", ",", "\"spider_beam_search_with_heuristic\"", ")", "\n", "def", "beam_search_with_heuristics", "(", "\n", "model", ",", "orig_item", ",", "preproc_item", ",", "beam_size", ",", "max_steps", ",", "from_cond", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Find the valid FROM clasue with beam search\n    \"\"\"", "\n", "ret_state", "=", "model", "(", "orig_item", ",", "preproc_item", ",", "compute_loss", "=", "False", ",", "infer", "=", "True", ")", "\n", "inference_state", ",", "next_choices", "=", "(", "\n", "ret_state", "[", "\"initial_state\"", "]", ",", "\n", "ret_state", "[", "\"initial_choices\"", "]", ",", "\n", ")", "\n", "beam", "=", "[", "Hypothesis4Filtering", "(", "inference_state", ",", "next_choices", ")", "]", "\n", "\n", "cached_finished_seqs", "=", "[", "]", "# cache filtered trajectories", "\n", "beam_prefix", "=", "beam", "\n", "while", "True", ":", "\n", "# search prefixes with beam search", "\n", "        ", "prefixes2fill_from", "=", "[", "]", "\n", "for", "step", "in", "range", "(", "max_steps", ")", ":", "\n", "            ", "if", "len", "(", "prefixes2fill_from", ")", ">=", "beam_size", ":", "\n", "                ", "break", "\n", "\n", "", "candidates", "=", "[", "]", "\n", "for", "hyp", "in", "beam_prefix", ":", "\n", "# print(hyp.inference_state.cur_item.state, hyp.inference_state.cur_item.node_type )", "\n", "                ", "if", "(", "\n", "hyp", ".", "inference_state", ".", "cur_item", ".", "state", "\n", "==", "TreeTraversal", ".", "State", ".", "CHILDREN_APPLY", "\n", "and", "hyp", ".", "inference_state", ".", "cur_item", ".", "node_type", "==", "\"from\"", "\n", ")", ":", "\n", "                    ", "prefixes2fill_from", ".", "append", "(", "hyp", ")", "\n", "", "else", ":", "\n", "                    ", "candidates", "+=", "[", "\n", "(", "\n", "hyp", ",", "\n", "choice", ",", "\n", "choice_score", ".", "item", "(", ")", ",", "\n", "hyp", ".", "score", "+", "choice_score", ".", "item", "(", ")", ",", "\n", ")", "\n", "for", "choice", ",", "choice_score", "in", "hyp", ".", "next_choices", "\n", "]", "\n", "", "", "candidates", ".", "sort", "(", "key", "=", "operator", ".", "itemgetter", "(", "3", ")", ",", "reverse", "=", "True", ")", "\n", "candidates", "=", "candidates", "[", ":", "beam_size", "-", "len", "(", "prefixes2fill_from", ")", "]", "\n", "\n", "# Create the new hypotheses from the expansions", "\n", "beam_prefix", "=", "[", "]", "\n", "for", "hyp", ",", "choice", ",", "choice_score", ",", "cum_score", "in", "candidates", ":", "\n", "                ", "inference_state", "=", "hyp", ".", "inference_state", ".", "clone", "(", ")", "\n", "\n", "# cache column choice", "\n", "column_history", "=", "hyp", ".", "column_history", "[", ":", "]", "\n", "if", "(", "\n", "hyp", ".", "inference_state", ".", "cur_item", ".", "state", "\n", "==", "TreeTraversal", ".", "State", ".", "POINTER_APPLY", "\n", "and", "hyp", ".", "inference_state", ".", "cur_item", ".", "node_type", "==", "\"column\"", "\n", ")", ":", "\n", "                    ", "column_history", "=", "column_history", "+", "[", "choice", "]", "\n", "\n", "", "next_choices", "=", "inference_state", ".", "step", "(", "choice", ")", "\n", "assert", "next_choices", "is", "not", "None", "\n", "beam_prefix", ".", "append", "(", "\n", "Hypothesis4Filtering", "(", "\n", "inference_state", ",", "\n", "next_choices", ",", "\n", "cum_score", ",", "\n", "hyp", ".", "choice_history", "+", "[", "choice", "]", ",", "\n", "hyp", ".", "score_history", "+", "[", "choice_score", "]", ",", "\n", "column_history", ",", "\n", ")", "\n", ")", "\n", "\n", "", "", "prefixes2fill_from", ".", "sort", "(", "key", "=", "operator", ".", "attrgetter", "(", "\"score\"", ")", ",", "reverse", "=", "True", ")", "\n", "# assert len(prefixes) == beam_size", "\n", "\n", "# emuerating", "\n", "beam_from", "=", "prefixes2fill_from", "\n", "max_size", "=", "6", "\n", "unfiltered_finished", "=", "[", "]", "\n", "prefixes_unfinished", "=", "[", "]", "\n", "for", "step", "in", "range", "(", "max_steps", ")", ":", "\n", "            ", "if", "len", "(", "unfiltered_finished", ")", "+", "len", "(", "prefixes_unfinished", ")", ">", "max_size", ":", "\n", "                ", "break", "\n", "\n", "", "candidates", "=", "[", "]", "\n", "for", "hyp", "in", "beam_from", ":", "\n", "                ", "if", "(", "\n", "step", ">", "0", "\n", "and", "hyp", ".", "inference_state", ".", "cur_item", ".", "state", "\n", "==", "TreeTraversal", ".", "State", ".", "CHILDREN_APPLY", "\n", "and", "hyp", ".", "inference_state", ".", "cur_item", ".", "node_type", "==", "\"from\"", "\n", ")", ":", "\n", "                    ", "prefixes_unfinished", ".", "append", "(", "hyp", ")", "\n", "", "else", ":", "\n", "                    ", "candidates", "+=", "[", "\n", "(", "\n", "hyp", ",", "\n", "choice", ",", "\n", "choice_score", ".", "item", "(", ")", ",", "\n", "hyp", ".", "score", "+", "choice_score", ".", "item", "(", ")", ",", "\n", ")", "\n", "for", "choice", ",", "choice_score", "in", "hyp", ".", "next_choices", "\n", "]", "\n", "", "", "candidates", ".", "sort", "(", "key", "=", "operator", ".", "itemgetter", "(", "3", ")", ",", "reverse", "=", "True", ")", "\n", "candidates", "=", "candidates", "[", ":", "max_size", "-", "len", "(", "prefixes_unfinished", ")", "]", "\n", "\n", "beam_from", "=", "[", "]", "\n", "for", "hyp", ",", "choice", ",", "choice_score", ",", "cum_score", "in", "candidates", ":", "\n", "                ", "inference_state", "=", "hyp", ".", "inference_state", ".", "clone", "(", ")", "\n", "\n", "# cache table choice", "\n", "table_history", "=", "hyp", ".", "table_history", "[", ":", "]", "\n", "key_column_history", "=", "hyp", ".", "key_column_history", "[", ":", "]", "\n", "if", "(", "\n", "hyp", ".", "inference_state", ".", "cur_item", ".", "state", "\n", "==", "TreeTraversal", ".", "State", ".", "POINTER_APPLY", "\n", ")", ":", "\n", "                    ", "if", "hyp", ".", "inference_state", ".", "cur_item", ".", "node_type", "==", "\"table\"", ":", "\n", "                        ", "table_history", "=", "table_history", "+", "[", "choice", "]", "\n", "", "elif", "hyp", ".", "inference_state", ".", "cur_item", ".", "node_type", "==", "\"column\"", ":", "\n", "                        ", "key_column_history", "=", "key_column_history", "+", "[", "choice", "]", "\n", "\n", "", "", "next_choices", "=", "inference_state", ".", "step", "(", "choice", ")", "\n", "if", "next_choices", "is", "None", ":", "\n", "                    ", "unfiltered_finished", ".", "append", "(", "\n", "Hypothesis4Filtering", "(", "\n", "inference_state", ",", "\n", "None", ",", "\n", "cum_score", ",", "\n", "hyp", ".", "choice_history", "+", "[", "choice", "]", ",", "\n", "hyp", ".", "score_history", "+", "[", "choice_score", "]", ",", "\n", "hyp", ".", "column_history", ",", "\n", "table_history", ",", "\n", "key_column_history", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "beam_from", ".", "append", "(", "\n", "Hypothesis4Filtering", "(", "\n", "inference_state", ",", "\n", "next_choices", ",", "\n", "cum_score", ",", "\n", "hyp", ".", "choice_history", "+", "[", "choice", "]", ",", "\n", "hyp", ".", "score_history", "+", "[", "choice_score", "]", ",", "\n", "hyp", ".", "column_history", ",", "\n", "table_history", ",", "\n", "key_column_history", ",", "\n", ")", "\n", ")", "\n", "\n", "", "", "", "unfiltered_finished", ".", "sort", "(", "key", "=", "operator", ".", "attrgetter", "(", "\"score\"", ")", ",", "reverse", "=", "True", ")", "\n", "\n", "# filtering", "\n", "filtered_finished", "=", "[", "]", "\n", "for", "hyp", "in", "unfiltered_finished", ":", "\n", "            ", "mentioned_column_ids", "=", "set", "(", "hyp", ".", "column_history", ")", "\n", "mentioned_key_column_ids", "=", "set", "(", "hyp", ".", "key_column_history", ")", "\n", "mentioned_table_ids", "=", "set", "(", "hyp", ".", "table_history", ")", "\n", "\n", "# duplicate tables", "\n", "if", "len", "(", "mentioned_table_ids", ")", "!=", "len", "(", "hyp", ".", "table_history", ")", ":", "\n", "                ", "continue", "\n", "\n", "# the foreign key should be correctly used", "\n", "# NOTE: the new version does not predict conditions in FROM clause anymore", "\n", "", "if", "from_cond", ":", "\n", "                ", "covered_tables", "=", "set", "(", ")", "\n", "must_include_key_columns", "=", "set", "(", ")", "\n", "candidate_table_ids", "=", "sorted", "(", "mentioned_table_ids", ")", "\n", "start_table_id", "=", "candidate_table_ids", "[", "0", "]", "\n", "for", "table_id", "in", "candidate_table_ids", "[", "1", ":", "]", ":", "\n", "                    ", "if", "table_id", "in", "covered_tables", ":", "\n", "                        ", "continue", "\n", "", "try", ":", "\n", "                        ", "path", "=", "nx", ".", "shortest_path", "(", "\n", "orig_item", ".", "schema", ".", "foreign_key_graph", ",", "\n", "source", "=", "start_table_id", ",", "\n", "target", "=", "table_id", ",", "\n", ")", "\n", "", "except", "(", "nx", ".", "NetworkXNoPath", ",", "nx", ".", "NodeNotFound", ")", ":", "\n", "                        ", "covered_tables", ".", "add", "(", "table_id", ")", "\n", "continue", "\n", "\n", "", "for", "source_table_id", ",", "target_table_id", "in", "zip", "(", "path", ",", "path", "[", "1", ":", "]", ")", ":", "\n", "                        ", "if", "target_table_id", "in", "covered_tables", ":", "\n", "                            ", "continue", "\n", "", "if", "target_table_id", "not", "in", "mentioned_table_ids", ":", "\n", "                            ", "continue", "\n", "", "col1", ",", "col2", "=", "orig_item", ".", "schema", ".", "foreign_key_graph", "[", "\n", "source_table_id", "\n", "]", "[", "target_table_id", "]", "[", "\"columns\"", "]", "\n", "must_include_key_columns", ".", "add", "(", "col1", ")", "\n", "must_include_key_columns", ".", "add", "(", "col2", ")", "\n", "", "", "if", "not", "must_include_key_columns", "==", "mentioned_key_column_ids", ":", "\n", "                    ", "continue", "\n", "\n", "# tables whose columns are mentioned should also exist", "\n", "", "", "must_table_ids", "=", "set", "(", ")", "\n", "for", "col", "in", "mentioned_column_ids", ":", "\n", "                ", "tab_", "=", "orig_item", ".", "schema", ".", "columns", "[", "col", "]", ".", "table", "\n", "if", "tab_", "is", "not", "None", ":", "\n", "                    ", "must_table_ids", ".", "add", "(", "tab_", ".", "id", ")", "\n", "", "", "if", "not", "must_table_ids", ".", "issubset", "(", "mentioned_table_ids", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "filtered_finished", ".", "append", "(", "hyp", ")", "\n", "\n", "", "filtered_finished", ".", "sort", "(", "key", "=", "operator", ".", "attrgetter", "(", "\"score\"", ")", ",", "reverse", "=", "True", ")", "\n", "# filtered.sort(key=lambda x: x.score / len(x.choice_history), reverse=True)", "\n", "prefixes_unfinished", ".", "sort", "(", "key", "=", "operator", ".", "attrgetter", "(", "\"score\"", ")", ",", "reverse", "=", "True", ")", "\n", "# new_prefixes.sort(key=lambda x: x.score / len(x.choice_history), reverse=True)", "\n", "\n", "prefixes_", ",", "filtered_", "=", "merge_beams", "(", "\n", "prefixes_unfinished", ",", "filtered_finished", ",", "beam_size", "\n", ")", "\n", "\n", "if", "filtered_", ":", "\n", "            ", "cached_finished_seqs", "=", "cached_finished_seqs", "+", "filtered_", "\n", "cached_finished_seqs", ".", "sort", "(", "key", "=", "operator", ".", "attrgetter", "(", "\"score\"", ")", ",", "reverse", "=", "True", ")", "\n", "\n", "", "if", "prefixes_", "and", "len", "(", "prefixes_", "[", "0", "]", ".", "choice_history", ")", "<", "200", ":", "\n", "            ", "beam_prefix", "=", "prefixes_", "\n", "for", "hyp", "in", "beam_prefix", ":", "\n", "                ", "hyp", ".", "table_history", "=", "[", "]", "\n", "hyp", ".", "column_history", "=", "[", "]", "\n", "hyp", ".", "key_column_history", "=", "[", "]", "\n", "", "", "elif", "cached_finished_seqs", ":", "\n", "            ", "return", "cached_finished_seqs", "[", ":", "beam_size", "]", "\n", "", "else", ":", "\n", "            ", "return", "unfiltered_finished", "[", ":", "beam_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_beam_search.merge_beams": [[251, 269], ["merged_beams.sort", "len", "len", "ret_beam_1.append", "ret_beam_2.append"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "", "", "def", "merge_beams", "(", "beam_1", ",", "beam_2", ",", "beam_size", ")", ":", "\n", "    ", "if", "len", "(", "beam_1", ")", "==", "0", "or", "len", "(", "beam_2", ")", "==", "0", ":", "\n", "        ", "return", "beam_1", ",", "beam_2", "\n", "\n", "", "annoated_beam_1", "=", "[", "(", "\"beam_1\"", ",", "b", ")", "for", "b", "in", "beam_1", "]", "\n", "annoated_beam_2", "=", "[", "(", "\"beam_2\"", ",", "b", ")", "for", "b", "in", "beam_2", "]", "\n", "merged_beams", "=", "annoated_beam_1", "+", "annoated_beam_2", "\n", "merged_beams", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ".", "score", ",", "reverse", "=", "True", ")", "\n", "\n", "ret_beam_1", "=", "[", "]", "\n", "ret_beam_2", "=", "[", "]", "\n", "for", "label", ",", "beam", "in", "merged_beams", "[", ":", "beam_size", "]", ":", "\n", "        ", "if", "label", "==", "\"beam_1\"", ":", "\n", "            ", "ret_beam_1", ".", "append", "(", "beam", ")", "\n", "", "else", ":", "\n", "            ", "assert", "label", "==", "\"beam_2\"", "\n", "ret_beam_2", ".", "append", "(", "beam", ")", "\n", "", "", "return", "ret_beam_1", ",", "ret_beam_2", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_beam_search.beam_search_with_oracle_column": [[271, 399], ["tensor2struct.utils.registry.register", "model", "list", "list", "range", "finished.sort", "tensor2struct.models.beam_search.Hypothesis", "reversed", "reversed", "candidates.sort", "print", "print", "len", "len", "hyp.inference_state.clone", "hyp.inference_state.clone.step", "len", "len", "operator.attrgetter", "operator.itemgetter", "finished.append", "beam.append", "model.decoder.ast_wrapper.find_all_descendants_of_type", "model.decoder.ast_wrapper.find_all_descendants_of_type", "len", "choice_score.item", "len", "tensor2struct.models.beam_search.Hypothesis", "tensor2struct.models.beam_search.Hypothesis", "len", "choice_score.item"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.register", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.clone", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper.find_all_descendants_of_type", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper.find_all_descendants_of_type"], ["", "@", "registry", ".", "register", "(", "\"infer_method\"", ",", "\"spider_beam_search_with_orable_column\"", ")", "\n", "def", "beam_search_with_oracle_column", "(", "\n", "model", ",", "orig_item", ",", "preproc_item", ",", "beam_size", ",", "max_steps", ",", "visualize_flag", "=", "False", "\n", ")", ":", "\n", "    ", "ret_state", "=", "model", "(", "orig_item", ",", "preproc_item", ",", "compute_loss", "=", "False", ",", "infer", "=", "True", ")", "\n", "inference_state", ",", "next_choices", "=", "(", "\n", "ret_state", "[", "\"initial_state\"", "]", ",", "\n", "ret_state", "[", "\"initial_choices\"", "]", ",", "\n", ")", "\n", "beam", "=", "[", "Hypothesis", "(", "inference_state", ",", "next_choices", ")", "]", "\n", "finished", "=", "[", "]", "\n", "assert", "beam_size", "==", "1", "\n", "\n", "# identify all the cols mentioned in the gold sql", "\n", "root_node", "=", "preproc_item", "[", "1", "]", ".", "tree", "\n", "\n", "col_queue", "=", "list", "(", "\n", "reversed", "(", "\n", "[", "\n", "val", "\n", "for", "val", "in", "model", ".", "decoder", ".", "ast_wrapper", ".", "find_all_descendants_of_type", "(", "\n", "root_node", ",", "\"column\"", "\n", ")", "\n", "]", "\n", ")", "\n", ")", "\n", "tab_queue", "=", "list", "(", "\n", "reversed", "(", "\n", "[", "\n", "val", "\n", "for", "val", "in", "model", ".", "decoder", ".", "ast_wrapper", ".", "find_all_descendants_of_type", "(", "\n", "root_node", ",", "\"table\"", "\n", ")", "\n", "]", "\n", ")", "\n", ")", "\n", "col_queue_copy", "=", "col_queue", "[", ":", "]", "\n", "tab_queue_copy", "=", "tab_queue", "[", ":", "]", "\n", "\n", "predict_counter", "=", "0", "\n", "\n", "for", "step", "in", "range", "(", "max_steps", ")", ":", "\n", "        ", "if", "visualize_flag", ":", "\n", "            ", "print", "(", "\"step:\"", ")", "\n", "print", "(", "step", ")", "\n", "# Check if all beams are finished", "\n", "", "if", "len", "(", "finished", ")", "==", "beam_size", ":", "\n", "            ", "break", "\n", "\n", "# hijack the next choice using the gold col", "\n", "", "assert", "len", "(", "beam", ")", "==", "1", "\n", "hyp", "=", "beam", "[", "0", "]", "\n", "if", "hyp", ".", "inference_state", ".", "cur_item", ".", "state", "==", "TreeTraversal", ".", "State", ".", "POINTER_APPLY", ":", "\n", "            ", "if", "(", "\n", "hyp", ".", "inference_state", ".", "cur_item", ".", "node_type", "==", "\"column\"", "\n", "and", "len", "(", "col_queue", ")", ">", "0", "\n", ")", ":", "\n", "                ", "gold_col", "=", "col_queue", "[", "0", "]", "\n", "\n", "flag", "=", "False", "\n", "for", "_choice", "in", "hyp", ".", "next_choices", ":", "\n", "                    ", "if", "_choice", "[", "0", "]", "==", "gold_col", ":", "\n", "                        ", "flag", "=", "True", "\n", "hyp", ".", "next_choices", "=", "[", "_choice", "]", "\n", "col_queue", "=", "col_queue", "[", "1", ":", "]", "\n", "break", "\n", "", "", "assert", "flag", "\n", "", "elif", "(", "\n", "hyp", ".", "inference_state", ".", "cur_item", ".", "node_type", "==", "\"table\"", "and", "len", "(", "tab_queue", ")", ">", "0", "\n", ")", ":", "\n", "                ", "gold_tab", "=", "tab_queue", "[", "0", "]", "\n", "\n", "flag", "=", "False", "\n", "for", "_choice", "in", "hyp", ".", "next_choices", ":", "\n", "                    ", "if", "_choice", "[", "0", "]", "==", "gold_tab", ":", "\n", "                        ", "flag", "=", "True", "\n", "hyp", ".", "next_choices", "=", "[", "_choice", "]", "\n", "tab_queue", "=", "tab_queue", "[", "1", ":", "]", "\n", "break", "\n", "", "", "assert", "flag", "\n", "\n", "# for debug", "\n", "", "", "if", "hyp", ".", "inference_state", ".", "cur_item", ".", "state", "==", "TreeTraversal", ".", "State", ".", "POINTER_APPLY", ":", "\n", "            ", "predict_counter", "+=", "1", "\n", "\n", "# For each hypothesis, get possible expansions", "\n", "# Score each expansion", "\n", "", "candidates", "=", "[", "]", "\n", "for", "hyp", "in", "beam", ":", "\n", "            ", "candidates", "+=", "[", "\n", "(", "hyp", ",", "choice", ",", "choice_score", ".", "item", "(", ")", ",", "hyp", ".", "score", "+", "choice_score", ".", "item", "(", ")", ")", "\n", "for", "choice", ",", "choice_score", "in", "hyp", ".", "next_choices", "\n", "]", "\n", "\n", "# Keep the top K expansions", "\n", "", "candidates", ".", "sort", "(", "key", "=", "operator", ".", "itemgetter", "(", "3", ")", ",", "reverse", "=", "True", ")", "\n", "candidates", "=", "candidates", "[", ":", "beam_size", "-", "len", "(", "finished", ")", "]", "\n", "\n", "# Create the new hypotheses from the expansions", "\n", "beam", "=", "[", "]", "\n", "for", "hyp", ",", "choice", ",", "choice_score", ",", "cum_score", "in", "candidates", ":", "\n", "            ", "inference_state", "=", "hyp", ".", "inference_state", ".", "clone", "(", ")", "\n", "next_choices", "=", "inference_state", ".", "step", "(", "choice", ")", "\n", "if", "next_choices", "is", "None", ":", "\n", "                ", "finished", ".", "append", "(", "\n", "Hypothesis", "(", "\n", "inference_state", ",", "\n", "None", ",", "\n", "cum_score", ",", "\n", "hyp", ".", "choice_history", "+", "[", "choice", "]", ",", "\n", "hyp", ".", "score_history", "+", "[", "choice_score", "]", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "beam", ".", "append", "(", "\n", "Hypothesis", "(", "\n", "inference_state", ",", "\n", "next_choices", ",", "\n", "cum_score", ",", "\n", "hyp", ".", "choice_history", "+", "[", "choice", "]", ",", "\n", "hyp", ".", "score_history", "+", "[", "choice_score", "]", ",", "\n", ")", "\n", ")", "\n", "", "", "", "if", "(", "len", "(", "col_queue_copy", ")", "+", "len", "(", "tab_queue_copy", ")", ")", "!=", "predict_counter", ":", "\n", "# print(\"The number of column/tables are not matched\")", "\n", "        ", "pass", "\n", "", "finished", ".", "sort", "(", "key", "=", "operator", ".", "attrgetter", "(", "\"score\"", ")", ",", "reverse", "=", "True", ")", "\n", "return", "finished", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_beam_search.beam_search_with_oracle_sketch": [[401, 538], ["tensor2struct.utils.registry.register", "model", "tensor2struct.models.beam_search.Hypothesis", "model.decoder.preproc.grammar.parse", "tensor2struct.models.ast_decoder.tree_traversal.TreeState", "queue.pop", "isinstance", "reversed", "inference_state.step", "reversed", "tensor2struct.models.beam_search.Hypothesis", "isinstance", "inference_state.step", "tensor2struct.models.beam_search.Hypothesis", "tensor2struct.models.beam_search.Hypothesis", "inference_state.step", "tensor2struct.models.beam_search.Hypothesis", "tensor2struct.models.ast_decoder.utils.get_field_presence_info", "inference_state.step", "tensor2struct.models.beam_search.Hypothesis", "queue.append", "len", "list", "queue.append", "model.decoder.preproc.grammar.tokenize_field_value", "inference_state.step", "tuple", "tensor2struct.models.ast_decoder.tree_traversal.TreeState", "enumerate", "tensor2struct.models.ast_decoder.tree_traversal.TreeState", "node.get"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.register", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.utils.get_field_presence_info", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.tokenize_field_value", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get"], ["", "@", "registry", ".", "register", "(", "\"infer_method\"", ",", "\"spider_beam_search_with_orable_sketch\"", ")", "\n", "def", "beam_search_with_oracle_sketch", "(", "\n", "model", ",", "orig_item", ",", "preproc_item", ",", "beam_size", ",", "max_steps", ",", "visualize_flag", "=", "False", "\n", ")", ":", "\n", "    ", "ret_state", "=", "model", "(", "orig_item", ",", "preproc_item", ",", "compute_loss", "=", "False", ",", "infer", "=", "True", ")", "\n", "inference_state", ",", "next_choices", "=", "(", "\n", "ret_state", "[", "\"initial_state\"", "]", ",", "\n", "ret_state", "[", "\"initial_choices\"", "]", ",", "\n", ")", "\n", "hyp", "=", "Hypothesis", "(", "inference_state", ",", "next_choices", ")", "\n", "\n", "parsed", "=", "model", ".", "decoder", ".", "preproc", ".", "grammar", ".", "parse", "(", "orig_item", ".", "code", ",", "\"val\"", ")", "\n", "if", "not", "parsed", ":", "\n", "        ", "return", "[", "]", "\n", "\n", "", "queue", "=", "[", "\n", "TreeState", "(", "\n", "node", "=", "preproc_item", "[", "1", "]", ".", "tree", ",", "\n", "parent_field_type", "=", "model", ".", "decoder", ".", "preproc", ".", "grammar", ".", "root_type", ",", "\n", ")", "\n", "]", "\n", "\n", "while", "queue", ":", "\n", "        ", "item", "=", "queue", ".", "pop", "(", ")", "\n", "node", "=", "item", ".", "node", "\n", "parent_field_type", "=", "item", ".", "parent_field_type", "\n", "\n", "if", "isinstance", "(", "node", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "node_type", "=", "parent_field_type", "+", "\"*\"", "\n", "rule", "=", "(", "node_type", ",", "len", "(", "node", ")", ")", "\n", "if", "rule", "not", "in", "model", ".", "decoder", ".", "rules_index", ":", "\n", "                ", "return", "[", "]", "\n", "", "rule_idx", "=", "model", ".", "decoder", ".", "rules_index", "[", "rule", "]", "\n", "assert", "(", "\n", "inference_state", ".", "cur_item", ".", "state", "==", "TreeTraversal", ".", "State", ".", "LIST_LENGTH_APPLY", "\n", ")", "\n", "next_choices", "=", "inference_state", ".", "step", "(", "rule_idx", ")", "\n", "\n", "if", "(", "\n", "model", ".", "decoder", ".", "preproc", ".", "use_seq_elem_rules", "\n", "and", "parent_field_type", "in", "model", ".", "decoder", ".", "ast_wrapper", ".", "sum_types", "\n", ")", ":", "\n", "                ", "parent_field_type", "+=", "\"_seq_elem\"", "\n", "\n", "", "for", "i", ",", "elem", "in", "reversed", "(", "list", "(", "enumerate", "(", "node", ")", ")", ")", ":", "\n", "                ", "queue", ".", "append", "(", "TreeState", "(", "node", "=", "elem", ",", "parent_field_type", "=", "parent_field_type", ")", ")", "\n", "\n", "", "hyp", "=", "Hypothesis", "(", "\n", "inference_state", ",", "\n", "None", ",", "\n", "0", ",", "\n", "hyp", ".", "choice_history", "+", "[", "rule_idx", "]", ",", "\n", "hyp", ".", "score_history", "+", "[", "0", "]", ",", "\n", ")", "\n", "continue", "\n", "\n", "", "if", "parent_field_type", "in", "model", ".", "decoder", ".", "preproc", ".", "grammar", ".", "pointers", ":", "\n", "            ", "assert", "inference_state", ".", "cur_item", ".", "state", "==", "TreeTraversal", ".", "State", ".", "POINTER_APPLY", "\n", "# best_choice = max(next_choices, key=lambda x: x[1])", "\n", "# node = best_choice[0] # override the node", "\n", "\n", "assert", "isinstance", "(", "node", ",", "int", ")", "\n", "next_choices", "=", "inference_state", ".", "step", "(", "node", ")", "\n", "hyp", "=", "Hypothesis", "(", "\n", "inference_state", ",", "\n", "None", ",", "\n", "0", ",", "\n", "hyp", ".", "choice_history", "+", "[", "node", "]", ",", "\n", "hyp", ".", "score_history", "+", "[", "0", "]", ",", "\n", ")", "\n", "continue", "\n", "\n", "", "if", "parent_field_type", "in", "model", ".", "decoder", ".", "ast_wrapper", ".", "primitive_types", ":", "\n", "            ", "field_value_split", "=", "model", ".", "decoder", ".", "preproc", ".", "grammar", ".", "tokenize_field_value", "(", "\n", "node", "\n", ")", "+", "[", "\"<EOS>\"", "]", "\n", "\n", "for", "token", "in", "field_value_split", ":", "\n", "                ", "next_choices", "=", "inference_state", ".", "step", "(", "token", ")", "\n", "", "hyp", "=", "Hypothesis", "(", "\n", "inference_state", ",", "\n", "None", ",", "\n", "0", ",", "\n", "hyp", ".", "choice_history", "+", "field_value_split", ",", "\n", "hyp", ".", "score_history", "+", "[", "0", "]", ",", "\n", ")", "\n", "continue", "\n", "\n", "", "type_info", "=", "model", ".", "decoder", ".", "ast_wrapper", ".", "singular_types", "[", "node", "[", "\"_type\"", "]", "]", "\n", "\n", "if", "parent_field_type", "in", "model", ".", "decoder", ".", "preproc", ".", "sum_type_constructors", ":", "\n", "# ApplyRule, like expr -> Call", "\n", "            ", "rule", "=", "(", "parent_field_type", ",", "type_info", ".", "name", ")", "\n", "rule_idx", "=", "model", ".", "decoder", ".", "rules_index", "[", "rule", "]", "\n", "inference_state", ".", "cur_item", ".", "state", "==", "TreeTraversal", ".", "State", ".", "SUM_TYPE_APPLY", "\n", "extra_rules", "=", "[", "\n", "model", ".", "decoder", ".", "rules_index", "[", "parent_field_type", ",", "extra_type", "]", "\n", "for", "extra_type", "in", "node", ".", "get", "(", "\"_extra_types\"", ",", "[", "]", ")", "\n", "]", "\n", "next_choices", "=", "inference_state", ".", "step", "(", "rule_idx", ",", "extra_rules", ")", "\n", "\n", "hyp", "=", "Hypothesis", "(", "\n", "inference_state", ",", "\n", "None", ",", "\n", "0", ",", "\n", "hyp", ".", "choice_history", "+", "[", "rule_idx", "]", ",", "\n", "hyp", ".", "score_history", "+", "[", "0", "]", ",", "\n", ")", "\n", "\n", "", "if", "type_info", ".", "fields", ":", "\n", "# ApplyRule, like Call -> expr[func] expr*[args] keyword*[keywords]", "\n", "# Figure out which rule needs to be applied", "\n", "            ", "present", "=", "get_field_presence_info", "(", "\n", "model", ".", "decoder", ".", "ast_wrapper", ",", "node", ",", "type_info", ".", "fields", "\n", ")", "\n", "rule", "=", "(", "node", "[", "\"_type\"", "]", ",", "tuple", "(", "present", ")", ")", "\n", "rule_idx", "=", "model", ".", "decoder", ".", "rules_index", "[", "rule", "]", "\n", "next_choices", "=", "inference_state", ".", "step", "(", "rule_idx", ")", "\n", "\n", "hyp", "=", "Hypothesis", "(", "\n", "inference_state", ",", "\n", "None", ",", "\n", "0", ",", "\n", "hyp", ".", "choice_history", "+", "[", "rule_idx", "]", ",", "\n", "hyp", ".", "score_history", "+", "[", "0", "]", ",", "\n", ")", "\n", "\n", "# reversed so that we perform a DFS in left-to-right order", "\n", "", "for", "field_info", "in", "reversed", "(", "type_info", ".", "fields", ")", ":", "\n", "            ", "if", "field_info", ".", "name", "not", "in", "node", ":", "\n", "                ", "continue", "\n", "\n", "", "queue", ".", "append", "(", "\n", "TreeState", "(", "node", "=", "node", "[", "field_info", ".", "name", "]", ",", "parent_field_type", "=", "field_info", ".", "type", ")", "\n", ")", "\n", "\n", "", "", "return", "[", "hyp", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.bin.train.create_experiment": [[121, 219], ["tensorflow.contrib.learn.python.learn.estimators.run_config.RunConfig", "seq2seq.training.utils.TrainOptions", "seq2seq.data.input_pipeline.make_input_pipeline_from_def", "seq2seq.training.utils.create_input_fn", "seq2seq.data.input_pipeline.make_input_pipeline_from_def", "seq2seq.training.utils.create_input_fn", "tensorflow.contrib.learn.Estimator", "seq2seq.contrib.experiment.Experiment", "tensorflow.gfile.MakeDirs", "training_utils.TrainOptions.dump", "list", "seq2seq.configurable._create_from_dict", "seq2seq.configurable._create_from_dict.", "seq2seq.configurable._create_from_dict", "train_hooks.append", "seq2seq.configurable._create_from_dict", "map", "FLAGS.buckets.split"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.create_input_fn", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.create_input_fn", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.dump", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable._create_from_dict", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable._create_from_dict", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable._create_from_dict"], ["def", "create_experiment", "(", "output_dir", ")", ":", "\n", "  ", "\"\"\"\n  Creates a new Experiment instance.\n\n  Args:\n    output_dir: Output directory for model checkpoints and summaries.\n  \"\"\"", "\n", "\n", "config", "=", "run_config", ".", "RunConfig", "(", "\n", "tf_random_seed", "=", "FLAGS", ".", "tf_random_seed", ",", "\n", "save_checkpoints_secs", "=", "FLAGS", ".", "save_checkpoints_secs", ",", "\n", "save_checkpoints_steps", "=", "FLAGS", ".", "save_checkpoints_steps", ",", "\n", "keep_checkpoint_max", "=", "FLAGS", ".", "keep_checkpoint_max", ",", "\n", "keep_checkpoint_every_n_hours", "=", "FLAGS", ".", "keep_checkpoint_every_n_hours", ",", "\n", "gpu_memory_fraction", "=", "FLAGS", ".", "gpu_memory_fraction", ")", "\n", "config", ".", "tf_config", ".", "gpu_options", ".", "allow_growth", "=", "FLAGS", ".", "gpu_allow_growth", "\n", "config", ".", "tf_config", ".", "log_device_placement", "=", "FLAGS", ".", "log_device_placement", "\n", "\n", "train_options", "=", "training_utils", ".", "TrainOptions", "(", "\n", "model_class", "=", "FLAGS", ".", "model", ",", "\n", "model_params", "=", "FLAGS", ".", "model_params", ")", "\n", "# On the main worker, save training options", "\n", "if", "config", ".", "is_chief", ":", "\n", "    ", "gfile", ".", "MakeDirs", "(", "output_dir", ")", "\n", "train_options", ".", "dump", "(", "output_dir", ")", "\n", "\n", "", "bucket_boundaries", "=", "None", "\n", "if", "FLAGS", ".", "buckets", ":", "\n", "    ", "bucket_boundaries", "=", "list", "(", "map", "(", "int", ",", "FLAGS", ".", "buckets", ".", "split", "(", "\",\"", ")", ")", ")", "\n", "\n", "# Training data input pipeline", "\n", "", "train_input_pipeline", "=", "input_pipeline", ".", "make_input_pipeline_from_def", "(", "\n", "def_dict", "=", "FLAGS", ".", "input_pipeline_train", ",", "\n", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "\n", "# Create training input function", "\n", "train_input_fn", "=", "training_utils", ".", "create_input_fn", "(", "\n", "pipeline", "=", "train_input_pipeline", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "\n", "bucket_boundaries", "=", "bucket_boundaries", ",", "\n", "scope", "=", "\"train_input_fn\"", ")", "\n", "\n", "# Development data input pipeline", "\n", "dev_input_pipeline", "=", "input_pipeline", ".", "make_input_pipeline_from_def", "(", "\n", "def_dict", "=", "FLAGS", ".", "input_pipeline_dev", ",", "\n", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "EVAL", ",", "\n", "shuffle", "=", "False", ",", "num_epochs", "=", "1", ")", "\n", "\n", "# Create eval input function", "\n", "eval_input_fn", "=", "training_utils", ".", "create_input_fn", "(", "\n", "pipeline", "=", "dev_input_pipeline", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "\n", "allow_smaller_final_batch", "=", "True", ",", "\n", "scope", "=", "\"dev_input_fn\"", ")", "\n", "\n", "\n", "def", "model_fn", "(", "features", ",", "labels", ",", "params", ",", "mode", ")", ":", "\n", "    ", "\"\"\"Builds the model graph\"\"\"", "\n", "model", "=", "_create_from_dict", "(", "{", "\n", "\"class\"", ":", "train_options", ".", "model_class", ",", "\n", "\"params\"", ":", "train_options", ".", "model_params", "\n", "}", ",", "models", ",", "mode", "=", "mode", ")", "\n", "return", "model", "(", "features", ",", "labels", ",", "params", ")", "\n", "\n", "", "estimator", "=", "tf", ".", "contrib", ".", "learn", ".", "Estimator", "(", "\n", "model_fn", "=", "model_fn", ",", "\n", "model_dir", "=", "output_dir", ",", "\n", "config", "=", "config", ",", "\n", "params", "=", "FLAGS", ".", "model_params", ")", "\n", "\n", "# Create hooks", "\n", "train_hooks", "=", "[", "]", "\n", "for", "dict_", "in", "FLAGS", ".", "hooks", ":", "\n", "    ", "hook", "=", "_create_from_dict", "(", "\n", "dict_", ",", "hooks", ",", "\n", "model_dir", "=", "estimator", ".", "model_dir", ",", "\n", "run_config", "=", "config", ")", "\n", "train_hooks", ".", "append", "(", "hook", ")", "\n", "\n", "# Create metrics", "\n", "", "eval_metrics", "=", "{", "}", "\n", "for", "dict_", "in", "FLAGS", ".", "metrics", ":", "\n", "    ", "metric", "=", "_create_from_dict", "(", "dict_", ",", "metric_specs", ")", "\n", "eval_metrics", "[", "metric", ".", "name", "]", "=", "metric", "\n", "\n", "## what is PatchedExperiment", "\n", "", "experiment", "=", "PatchedExperiment", "(", "\n", "\n", "estimator", "=", "estimator", ",", "\n", "train_input_fn", "=", "train_input_fn", ",", "\n", "eval_input_fn", "=", "eval_input_fn", ",", "\n", "min_eval_frequency", "=", "FLAGS", ".", "eval_every_n_steps", ",", "\n", "train_steps", "=", "FLAGS", ".", "train_steps", ",", "\n", "eval_steps", "=", "None", ",", "\n", "eval_metrics", "=", "eval_metrics", ",", "\n", "train_monitors", "=", "train_hooks", ")", "\n", "\n", "return", "experiment", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.bin.train.main": [[221, 275], ["seq2seq.configurable._maybe_load_yaml", "seq2seq.configurable._maybe_load_yaml", "seq2seq.configurable._maybe_load_yaml", "seq2seq.configurable._maybe_load_yaml", "seq2seq.configurable._maybe_load_yaml", "tensorflow.logging.info", "seq2seq.configurable._deep_merge_dict.items", "tensorflow.contrib.learn.python.learn.learn_runner.run", "FLAGS.config_paths.split", "yaml.dump", "tensorflow.logging.info", "tempfile.mkdtemp", "ValueError", "ValueError", "os.path.abspath.strip", "os.path.abspath", "tensorflow.logging.info", "hasattr", "isinstance", "seq2seq.configurable._deep_merge_dict", "setattr", "hasattr", "tensorflow.gfile.GFile", "yaml.load", "seq2seq.configurable._deep_merge_dict", "getattr", "getattr", "setattr", "tensorflow.logging.warning", "os.path.abspath.strip"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable._maybe_load_yaml", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable._maybe_load_yaml", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable._maybe_load_yaml", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable._maybe_load_yaml", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable._maybe_load_yaml", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.dump", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable._deep_merge_dict", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable._deep_merge_dict"], ["", "def", "main", "(", "_argv", ")", ":", "\n", "  ", "\"\"\"The entrypoint for the script\"\"\"", "\n", "\n", "# Parse YAML FLAGS", "\n", "FLAGS", ".", "hooks", "=", "_maybe_load_yaml", "(", "FLAGS", ".", "hooks", ")", "\n", "FLAGS", ".", "metrics", "=", "_maybe_load_yaml", "(", "FLAGS", ".", "metrics", ")", "\n", "FLAGS", ".", "model_params", "=", "_maybe_load_yaml", "(", "FLAGS", ".", "model_params", ")", "\n", "FLAGS", ".", "input_pipeline_train", "=", "_maybe_load_yaml", "(", "FLAGS", ".", "input_pipeline_train", ")", "\n", "FLAGS", ".", "input_pipeline_dev", "=", "_maybe_load_yaml", "(", "FLAGS", ".", "input_pipeline_dev", ")", "\n", "\n", "# Load flags from config file", "\n", "final_config", "=", "{", "}", "\n", "if", "FLAGS", ".", "config_paths", ":", "\n", "    ", "for", "config_path", "in", "FLAGS", ".", "config_paths", ".", "split", "(", "\",\"", ")", ":", "\n", "      ", "config_path", "=", "config_path", ".", "strip", "(", ")", "\n", "if", "not", "config_path", ":", "\n", "        ", "continue", "\n", "", "config_path", "=", "os", ".", "path", ".", "abspath", "(", "config_path", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Loading config from %s\"", ",", "config_path", ")", "\n", "with", "gfile", ".", "GFile", "(", "config_path", ".", "strip", "(", ")", ")", "as", "config_file", ":", "\n", "        ", "config_flags", "=", "yaml", ".", "load", "(", "config_file", ")", "\n", "final_config", "=", "_deep_merge_dict", "(", "final_config", ",", "config_flags", ")", "\n", "\n", "", "", "", "tf", ".", "logging", ".", "info", "(", "\"Final Config:\\n%s\"", ",", "yaml", ".", "dump", "(", "final_config", ")", ")", "\n", "\n", "# Merge flags with config values", "\n", "for", "flag_key", ",", "flag_value", "in", "final_config", ".", "items", "(", ")", ":", "\n", "    ", "if", "hasattr", "(", "FLAGS", ",", "flag_key", ")", "and", "isinstance", "(", "getattr", "(", "FLAGS", ",", "flag_key", ")", ",", "dict", ")", ":", "\n", "      ", "merged_value", "=", "_deep_merge_dict", "(", "flag_value", ",", "getattr", "(", "FLAGS", ",", "flag_key", ")", ")", "\n", "setattr", "(", "FLAGS", ",", "flag_key", ",", "merged_value", ")", "\n", "", "elif", "hasattr", "(", "FLAGS", ",", "flag_key", ")", ":", "\n", "      ", "setattr", "(", "FLAGS", ",", "flag_key", ",", "flag_value", ")", "\n", "", "else", ":", "\n", "      ", "tf", ".", "logging", ".", "warning", "(", "\"Ignoring config flag: %s\"", ",", "flag_key", ")", "\n", "\n", "", "", "if", "FLAGS", ".", "save_checkpoints_secs", "is", "None", "and", "FLAGS", ".", "save_checkpoints_steps", "is", "None", ":", "\n", "    ", "FLAGS", ".", "save_checkpoints_secs", "=", "600", "\n", "tf", ".", "logging", ".", "info", "(", "\"Setting save_checkpoints_secs to %d\"", ",", "\n", "FLAGS", ".", "save_checkpoints_secs", ")", "\n", "\n", "", "if", "not", "FLAGS", ".", "output_dir", ":", "\n", "    ", "FLAGS", ".", "output_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "", "if", "not", "FLAGS", ".", "input_pipeline_train", ":", "\n", "    ", "raise", "ValueError", "(", "\"You must specify input_pipeline_train\"", ")", "\n", "\n", "", "if", "not", "FLAGS", ".", "input_pipeline_dev", ":", "\n", "    ", "raise", "ValueError", "(", "\"You must specify input_pipeline_dev\"", ")", "\n", "\n", "", "learn_runner", ".", "run", "(", "\n", "experiment_fn", "=", "create_experiment", ",", "\n", "output_dir", "=", "FLAGS", ".", "output_dir", ",", "\n", "schedule", "=", "FLAGS", ".", "schedule", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.bin.infer.main": [[59, 126], ["isinstance", "isinstance", "seq2seq.data.input_pipeline.make_input_pipeline_from_def", "seq2seq.training.utils.TrainOptions.load", "seq2seq.configurable._deep_merge_dict", "model_cls", "seq2seq.inference.create_inference_graph", "tensorflow.train.Saver", "tensorflow.train.Scaffold", "tensorflow.train.ChiefSessionCreator", "seq2seq.configurable._maybe_load_yaml", "seq2seq.configurable._maybe_load_yaml", "pydoc.locate", "getattr", "seq2seq.configurable._maybe_load_yaml", "task_cls", "hooks.append", "tensorflow.train.latest_checkpoint", "tf.train.Saver.restore", "tensorflow.logging.info", "tensorflow.train.MonitoredSession", "tensorflow.gfile.GFile", "yaml.load", "yaml.load.items", "pydoc.locate", "getattr", "sess.should_stop", "sess.run", "setattr"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable._deep_merge_dict", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.inference.inference.create_inference_graph", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable._maybe_load_yaml", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable._maybe_load_yaml", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable._maybe_load_yaml", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.Saver.restore", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["def", "main", "(", "_argv", ")", ":", "\n", "  ", "\"\"\"Program entry point.\n  \"\"\"", "\n", "\n", "# Load flags from config file", "\n", "if", "FLAGS", ".", "config_path", ":", "\n", "    ", "with", "gfile", ".", "GFile", "(", "FLAGS", ".", "config_path", ")", "as", "config_file", ":", "\n", "      ", "config_flags", "=", "yaml", ".", "load", "(", "config_file", ")", "\n", "for", "flag_key", ",", "flag_value", "in", "config_flags", ".", "items", "(", ")", ":", "\n", "        ", "setattr", "(", "FLAGS", ",", "flag_key", ",", "flag_value", ")", "\n", "\n", "", "", "", "if", "isinstance", "(", "FLAGS", ".", "tasks", ",", "string_types", ")", ":", "\n", "    ", "FLAGS", ".", "tasks", "=", "_maybe_load_yaml", "(", "FLAGS", ".", "tasks", ")", "\n", "\n", "", "if", "isinstance", "(", "FLAGS", ".", "input_pipeline", ",", "string_types", ")", ":", "\n", "    ", "FLAGS", ".", "input_pipeline", "=", "_maybe_load_yaml", "(", "FLAGS", ".", "input_pipeline", ")", "\n", "\n", "", "input_pipeline_infer", "=", "input_pipeline", ".", "make_input_pipeline_from_def", "(", "\n", "FLAGS", ".", "input_pipeline", ",", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "INFER", ",", "\n", "shuffle", "=", "False", ",", "num_epochs", "=", "1", ")", "\n", "\n", "# Load saved training options", "\n", "train_options", "=", "training_utils", ".", "TrainOptions", ".", "load", "(", "FLAGS", ".", "model_dir", ")", "\n", "\n", "# Create the model", "\n", "model_cls", "=", "locate", "(", "train_options", ".", "model_class", ")", "or", "getattr", "(", "models", ",", "train_options", ".", "model_class", ")", "\n", "model_params", "=", "train_options", ".", "model_params", "\n", "model_params", "=", "_deep_merge_dict", "(", "\n", "model_params", ",", "_maybe_load_yaml", "(", "FLAGS", ".", "model_params", ")", ")", "\n", "model", "=", "model_cls", "(", "\n", "params", "=", "model_params", ",", "\n", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "INFER", ")", "\n", "\n", "# Load inference tasks", "\n", "hooks", "=", "[", "]", "\n", "for", "tdict", "in", "FLAGS", ".", "tasks", ":", "\n", "    ", "if", "not", "\"params\"", "in", "tdict", ":", "\n", "      ", "tdict", "[", "\"params\"", "]", "=", "{", "}", "\n", "", "task_cls", "=", "locate", "(", "tdict", "[", "\"class\"", "]", ")", "or", "getattr", "(", "tasks", ",", "tdict", "[", "\"class\"", "]", ")", "\n", "task", "=", "task_cls", "(", "tdict", "[", "\"params\"", "]", ")", "\n", "hooks", ".", "append", "(", "task", ")", "\n", "\n", "# Create the graph used for inference", "\n", "", "predictions", ",", "_", ",", "_", "=", "create_inference_graph", "(", "\n", "model", "=", "model", ",", "\n", "input_pipeline", "=", "input_pipeline_infer", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ")", "\n", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "checkpoint_path", "=", "FLAGS", ".", "checkpoint_path", "\n", "if", "not", "checkpoint_path", ":", "\n", "    ", "checkpoint_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "FLAGS", ".", "model_dir", ")", "\n", "\n", "", "def", "session_init_op", "(", "_scaffold", ",", "sess", ")", ":", "\n", "    ", "saver", ".", "restore", "(", "sess", ",", "checkpoint_path", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Restored model from %s\"", ",", "checkpoint_path", ")", "\n", "\n", "", "scaffold", "=", "tf", ".", "train", ".", "Scaffold", "(", "init_fn", "=", "session_init_op", ")", "\n", "session_creator", "=", "tf", ".", "train", ".", "ChiefSessionCreator", "(", "scaffold", "=", "scaffold", ")", "\n", "with", "tf", ".", "train", ".", "MonitoredSession", "(", "\n", "session_creator", "=", "session_creator", ",", "\n", "hooks", "=", "hooks", ")", "as", "sess", ":", "\n", "\n", "# Run until the inputs are exhausted", "\n", "    ", "while", "not", "sess", ".", "should_stop", "(", ")", ":", "\n", "      ", "sess", ".", "run", "(", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.generate_beam_viz._add_graph_level": [[66, 77], ["enumerate", "graph.add_node", "str", "graph.add_edge"], "function", ["None"], ["def", "_add_graph_level", "(", "graph", ",", "level", ",", "parent_ids", ",", "names", ",", "scores", ")", ":", "\n", "  ", "\"\"\"Adds a levelto the passed graph\"\"\"", "\n", "for", "i", ",", "parent_id", "in", "enumerate", "(", "parent_ids", ")", ":", "\n", "    ", "new_node", "=", "(", "level", ",", "i", ")", "\n", "parent_node", "=", "(", "level", "-", "1", ",", "parent_id", ")", "\n", "graph", ".", "add_node", "(", "new_node", ")", "\n", "graph", ".", "node", "[", "new_node", "]", "[", "\"name\"", "]", "=", "names", "[", "i", "]", "\n", "graph", ".", "node", "[", "new_node", "]", "[", "\"score\"", "]", "=", "str", "(", "scores", "[", "i", "]", ")", "\n", "graph", ".", "node", "[", "new_node", "]", "[", "\"size\"", "]", "=", "100", "\n", "# Add an edge to the parent", "\n", "graph", ".", "add_edge", "(", "parent_node", ",", "new_node", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.generate_beam_viz.create_graph": [[78, 89], ["networkx.DiGraph", "range", "generate_beam_viz._add_graph_level", "str", "generate_beam_viz.create_graph.get_node_name"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.generate_beam_viz._add_graph_level"], ["", "", "def", "create_graph", "(", "predicted_ids", ",", "parent_ids", ",", "scores", ",", "vocab", "=", "None", ")", ":", "\n", "  ", "def", "get_node_name", "(", "pred", ")", ":", "\n", "    ", "return", "vocab", "[", "pred", "]", "if", "vocab", "else", "str", "(", "pred", ")", "\n", "\n", "", "seq_length", "=", "predicted_ids", ".", "shape", "[", "0", "]", "\n", "graph", "=", "nx", ".", "DiGraph", "(", ")", "\n", "for", "level", "in", "range", "(", "seq_length", ")", ":", "\n", "    ", "names", "=", "[", "get_node_name", "(", "pred", ")", "for", "pred", "in", "predicted_ids", "[", "level", "]", "]", "\n", "_add_graph_level", "(", "graph", ",", "level", "+", "1", ",", "parent_ids", "[", "level", "]", ",", "names", ",", "scores", "[", "level", "]", ")", "\n", "", "graph", ".", "node", "[", "(", "0", ",", "0", ")", "]", "[", "\"name\"", "]", "=", "\"START\"", "\n", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.generate_beam_viz.main": [[91, 129], ["numpy.load", "shutil.copy2", "shutil.copy2", "range", "os.path.exists", "os.makedirs", "len", "generate_beam_viz.create_graph", "json.dumps", "HTML_TEMPLATE.substitute", "os.path.join", "print", "open", "file.readlines", "_.strip", "networkx.readwrite.json_graph.tree_data", "open", "file.write"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.exists", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.generate_beam_viz.create_graph", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["", "def", "main", "(", ")", ":", "\n", "  ", "beam_data", "=", "np", ".", "load", "(", "ARGS", ".", "data", ")", "\n", "\n", "# Optionally load vocabulary data", "\n", "vocab", "=", "None", "\n", "if", "ARGS", ".", "vocab", ":", "\n", "    ", "with", "open", "(", "ARGS", ".", "vocab", ")", "as", "file", ":", "\n", "      ", "vocab", "=", "file", ".", "readlines", "(", ")", "\n", "", "vocab", "=", "[", "_", ".", "strip", "(", ")", "for", "_", "in", "vocab", "]", "\n", "vocab", "+=", "[", "\"UNK\"", ",", "\"SEQUENCE_START\"", ",", "\"SEQUENCE_END\"", "]", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "ARGS", ".", "output_dir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "ARGS", ".", "output_dir", ")", "\n", "\n", "# Copy required files", "\n", "", "shutil", ".", "copy2", "(", "\"./bin/tools/beam_search_viz/tree.css\"", ",", "ARGS", ".", "output_dir", ")", "\n", "shutil", ".", "copy2", "(", "\"./bin/tools/beam_search_viz/tree.js\"", ",", "ARGS", ".", "output_dir", ")", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "beam_data", "[", "\"predicted_ids\"", "]", ")", ")", ":", "\n", "    ", "predicted_ids", "=", "beam_data", "[", "\"predicted_ids\"", "]", "[", "idx", "]", "\n", "parent_ids", "=", "beam_data", "[", "\"beam_parent_ids\"", "]", "[", "idx", "]", "\n", "scores", "=", "beam_data", "[", "\"scores\"", "]", "[", "idx", "]", "\n", "\n", "graph", "=", "create_graph", "(", "\n", "predicted_ids", "=", "predicted_ids", ",", "\n", "parent_ids", "=", "parent_ids", ",", "\n", "scores", "=", "scores", ",", "\n", "vocab", "=", "vocab", ")", "\n", "\n", "json_str", "=", "json", ".", "dumps", "(", "\n", "json_graph", ".", "tree_data", "(", "graph", ",", "(", "0", ",", "0", ")", ")", ",", "\n", "ensure_ascii", "=", "False", ")", "\n", "\n", "html_str", "=", "HTML_TEMPLATE", ".", "substitute", "(", "DATA", "=", "json_str", ")", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "ARGS", ".", "output_dir", ",", "\"{:06d}.html\"", ".", "format", "(", "idx", ")", ")", "\n", "with", "open", "(", "output_path", ",", "\"w\"", ")", "as", "file", ":", "\n", "      ", "file", ".", "write", "(", "html_str", ")", "\n", "", "print", "(", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.generate_toy_data.make_copy": [[58, 77], ["range", "numpy.random.choice", "numpy.random.choice", "numpy.arange", "list"], "function", ["None"], ["def", "make_copy", "(", "num_examples", ",", "min_len", ",", "max_len", ")", ":", "\n", "  ", "\"\"\"\n  Generates a dataset where the target is equal to the source.\n  Sequence lengths are chosen randomly from [min_len, max_len].\n\n  Args:\n    num_examples: Number of examples to generate\n    min_len: Minimum sequence length\n    max_len: Maximum sequence length\n\n  Returns:\n    An iterator of (source, target) string tuples.\n  \"\"\"", "\n", "for", "_", "in", "range", "(", "num_examples", ")", ":", "\n", "    ", "turn_length", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "min_len", ",", "max_len", "+", "1", ")", ")", "\n", "source_tokens", "=", "np", ".", "random", ".", "choice", "(", "\n", "list", "(", "VOCABULARY", ")", ",", "size", "=", "turn_length", ",", "replace", "=", "True", ")", "\n", "target_tokens", "=", "source_tokens", "\n", "yield", "\" \"", ".", "join", "(", "source_tokens", ")", ",", "\" \"", ".", "join", "(", "target_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.generate_toy_data.make_reverse": [[79, 98], ["range", "numpy.random.choice", "numpy.random.choice", "numpy.arange", "list"], "function", ["None"], ["", "", "def", "make_reverse", "(", "num_examples", ",", "min_len", ",", "max_len", ")", ":", "\n", "  ", "\"\"\"\n  Generates a dataset where the target is equal to the source reversed.\n  Sequence lengths are chosen randomly from [min_len, max_len].\n\n  Args:\n    num_examples: Number of examples to generate\n    min_len: Minimum sequence length\n    max_len: Maximum sequence length\n\n  Returns:\n    An iterator of (source, target) string tuples.\n  \"\"\"", "\n", "for", "_", "in", "range", "(", "num_examples", ")", ":", "\n", "    ", "turn_length", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "min_len", ",", "max_len", "+", "1", ")", ")", "\n", "source_tokens", "=", "np", ".", "random", ".", "choice", "(", "\n", "list", "(", "VOCABULARY", ")", ",", "size", "=", "turn_length", ",", "replace", "=", "True", ")", "\n", "target_tokens", "=", "source_tokens", "[", ":", ":", "-", "1", "]", "\n", "yield", "\" \"", ".", "join", "(", "source_tokens", ")", ",", "\" \"", ".", "join", "(", "target_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.generate_toy_data.write_parallel_text": [[100, 123], ["os.path.abspath", "os.path.abspath", "print", "print", "os.path.join", "os.path.join", "io.open", "io.open", "source_file.write", "target_file.write"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["", "", "def", "write_parallel_text", "(", "sources", ",", "targets", ",", "output_prefix", ")", ":", "\n", "  ", "\"\"\"\n  Writes two files where each line corresponds to one example\n    - [output_prefix].sources.txt\n    - [output_prefix].targets.txt\n\n  Args:\n    sources: Iterator of source strings\n    targets: Iterator of target strings\n    output_prefix: Prefix for the output file\n  \"\"\"", "\n", "source_filename", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "output_prefix", ",", "\"sources.txt\"", ")", ")", "\n", "target_filename", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "output_prefix", ",", "\"targets.txt\"", ")", ")", "\n", "\n", "with", "io", ".", "open", "(", "source_filename", ",", "\"w\"", ",", "encoding", "=", "'utf8'", ")", "as", "source_file", ":", "\n", "    ", "for", "record", "in", "sources", ":", "\n", "      ", "source_file", ".", "write", "(", "record", "+", "\"\\n\"", ")", "\n", "", "", "print", "(", "\"Wrote {}\"", ".", "format", "(", "source_filename", ")", ")", "\n", "\n", "with", "io", ".", "open", "(", "target_filename", ",", "\"w\"", ",", "encoding", "=", "'utf8'", ")", "as", "target_file", ":", "\n", "    ", "for", "record", "in", "targets", ":", "\n", "      ", "target_file", ".", "write", "(", "record", "+", "\"\\n\"", ")", "\n", "", "", "print", "(", "\"Wrote {}\"", ".", "format", "(", "target_filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.generate_toy_data.main": [[125, 144], ["list", "zip", "generate_toy_data.write_parallel_text", "generate_fn", "os.makedirs", "os.path.isdir"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.generate_toy_data.write_parallel_text"], ["", "def", "main", "(", ")", ":", "\n", "  ", "\"\"\"Main function\"\"\"", "\n", "\n", "if", "ARGS", ".", "type", "==", "\"copy\"", ":", "\n", "    ", "generate_fn", "=", "make_copy", "\n", "", "elif", "ARGS", ".", "type", "==", "\"reverse\"", ":", "\n", "    ", "generate_fn", "=", "make_reverse", "\n", "\n", "# Generate dataset", "\n", "", "examples", "=", "list", "(", "generate_fn", "(", "ARGS", ".", "num_examples", ",", "ARGS", ".", "min_len", ",", "ARGS", ".", "max_len", ")", ")", "\n", "try", ":", "\n", "    ", "os", ".", "makedirs", "(", "ARGS", ".", "output_dir", ")", "\n", "", "except", "OSError", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "ARGS", ".", "output_dir", ")", ":", "\n", "      ", "raise", "\n", "\n", "# Write train data", "\n", "", "", "train_sources", ",", "train_targets", "=", "zip", "(", "*", "examples", ")", "\n", "write_parallel_text", "(", "train_sources", ",", "train_targets", ",", "ARGS", ".", "output_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.profile._register_function_ops": [[48, 58], ["tensorflow.python.framework.op_def_registry.get_registered_ops", "func._create_definition_if_needed", "tensorflow.python.framework.ops.RegisterShape"], "function", ["None"], ["def", "_register_function_ops", "(", "func_list", ")", ":", "\n", "  ", "\"\"\"Registers custom ops in the default graph. This is needed\n  Because our checkpoint is saved with ops that are not part of Tensorflow.\"\"\"", "\n", "op_dict", "=", "op_def_registry", ".", "get_registered_ops", "(", ")", "\n", "for", "func", "in", "func_list", ":", "\n", "#pylint: disable=W0212", "\n", "    ", "func", ".", "_create_definition_if_needed", "(", ")", "\n", "op_def", "=", "func", ".", "_definition", ".", "signature", "\n", "op_dict", "[", "op_def", ".", "name", "]", "=", "op_def", "\n", "RegisterShape", "(", "op_def", ".", "name", ")", "(", "common_shapes", ".", "unknown_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.profile.load_metadata": [[59, 97], ["os.path.join", "tensorflow.RunMetadata", "tensorflow.gfile.Exists", "os.path.join", "tensorflow.Graph", "tensorflow.gfile.Exists", "os.path.join", "tensorflow.tools.tfprof.tfprof_log_pb2.OpLog", "tensorflow.gfile.Exists", "print", "print", "print", "print", "tensorflow.gfile.GFile", "tf.RunMetadata.MergeFromString", "tf.Graph.as_default", "profile._register_function_ops", "tensorflow.GraphDef", "tensorflow.import_graph_def", "print", "tensorflow.gfile.GFile", "tfprof_log_pb2.OpLog.MergeFromString", "print", "file.read", "tensorflow.gfile.GFile", "google.protobuf.text_format.Parse", "file.read", "file.read"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.profile._register_function_ops", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.read", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.read", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.read"], ["", "", "def", "load_metadata", "(", "model_dir", ")", ":", "\n", "  ", "\"\"\"Loads RunMetadata, Graph and OpLog from files\n  \"\"\"", "\n", "# Import RunMetadata", "\n", "run_meta_path", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"metadata/run_meta\"", ")", "\n", "run_meta", "=", "tf", ".", "RunMetadata", "(", ")", "\n", "if", "gfile", ".", "Exists", "(", "run_meta_path", ")", ":", "\n", "    ", "with", "gfile", ".", "GFile", "(", "run_meta_path", ",", "\"rb\"", ")", "as", "file", ":", "\n", "      ", "run_meta", ".", "MergeFromString", "(", "file", ".", "read", "(", ")", ")", "\n", "", "print", "(", "\"Loaded RunMetadata from {}\"", ".", "format", "(", "run_meta_path", ")", ")", "\n", "", "else", ":", "\n", "    ", "print", "(", "\"RunMetadata does not exist a {}. Skipping.\"", ".", "format", "(", "run_meta_path", ")", ")", "\n", "\n", "# Import Graph", "\n", "", "graph_def_path", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"graph.pbtxt\"", ")", "\n", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "if", "gfile", ".", "Exists", "(", "graph_def_path", ")", ":", "\n", "    ", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "      ", "_register_function_ops", "(", "CUSTOM_OP_FUNCTIONS", ")", "\n", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "with", "gfile", ".", "GFile", "(", "graph_def_path", ",", "\"rb\"", ")", "as", "file", ":", "\n", "        ", "text_format", ".", "Parse", "(", "file", ".", "read", "(", ")", ",", "graph_def", ")", "\n", "", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "\"\"", ")", "\n", "print", "(", "\"Loaded Graph from {}\"", ".", "format", "(", "graph_def_path", ")", ")", "\n", "", "", "else", ":", "\n", "    ", "print", "(", "\"Graph does not exist a {}. Skipping.\"", ".", "format", "(", "graph_def_path", ")", ")", "\n", "\n", "# Import OpLog", "\n", "", "op_log_path", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"metadata/tfprof_log\"", ")", "\n", "op_log", "=", "tfprof_log_pb2", ".", "OpLog", "(", ")", "\n", "if", "gfile", ".", "Exists", "(", "op_log_path", ")", ":", "\n", "    ", "with", "gfile", ".", "GFile", "(", "op_log_path", ",", "\"rb\"", ")", "as", "file", ":", "\n", "      ", "op_log", ".", "MergeFromString", "(", "file", ".", "read", "(", ")", ")", "\n", "print", "(", "\"Loaded OpLog from {}\"", ".", "format", "(", "op_log_path", ")", ")", "\n", "", "", "else", ":", "\n", "    ", "print", "(", "\"OpLog does not exist a {}. Skipping.\"", ".", "format", "(", "op_log_path", ")", ")", "\n", "\n", "", "return", "run_meta", ",", "graph", ",", "op_log", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.profile.merge_default_with_oplog": [[99, 122], ["tensorflow.tools.tfprof.tfprof_log_pb2.OpLog", "tensorflow.contrib.tfprof.python.tools.tfprof.tfprof_logger._get_logged_ops", "tfprof_log_pb2.OpLog.log_entries.extend", "dict", "six.iteritems", "tfprof_log_pb2.OpLog.log_entries.extend", "tfprof_logger._get_logged_ops.values", "dict.values", "all_ops[].types.extend"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.iteritems", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.values", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.values"], ["", "def", "merge_default_with_oplog", "(", "graph", ",", "op_log", "=", "None", ",", "run_meta", "=", "None", ")", ":", "\n", "  ", "\"\"\"Monkeypatch. There currently is a bug in tfprof_logger that\n    prevents it from being used with Python 3. So we override the method\n    manually until the fix comes in.\n  \"\"\"", "\n", "tmp_op_log", "=", "tfprof_log_pb2", ".", "OpLog", "(", ")", "\n", "# pylint: disable=W0212", "\n", "logged_ops", "=", "tfprof_logger", ".", "_get_logged_ops", "(", "graph", ",", "run_meta", ")", "\n", "if", "not", "op_log", ":", "\n", "    ", "tmp_op_log", ".", "log_entries", ".", "extend", "(", "logged_ops", ".", "values", "(", ")", ")", "\n", "", "else", ":", "\n", "    ", "all_ops", "=", "dict", "(", ")", "\n", "for", "entry", "in", "op_log", ".", "log_entries", ":", "\n", "      ", "all_ops", "[", "entry", ".", "name", "]", "=", "entry", "\n", "", "for", "op_name", ",", "entry", "in", "six", ".", "iteritems", "(", "logged_ops", ")", ":", "\n", "      ", "if", "op_name", "in", "all_ops", ":", "\n", "        ", "all_ops", "[", "op_name", "]", ".", "types", ".", "extend", "(", "entry", ".", "types", ")", "\n", "if", "entry", ".", "float_ops", ">", "0", "and", "all_ops", "[", "op_name", "]", ".", "float_ops", "==", "0", ":", "\n", "          ", "all_ops", "[", "op_name", "]", ".", "float_ops", "=", "entry", ".", "float_ops", "\n", "", "", "else", ":", "\n", "        ", "all_ops", "[", "op_name", "]", "=", "entry", "\n", "", "", "tmp_op_log", ".", "log_entries", ".", "extend", "(", "all_ops", ".", "values", "(", ")", ")", "\n", "", "return", "tmp_op_log", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.profile.param_analysis_options": [[124, 134], ["tensorflow.contrib.tfprof.model_analyzer.TRAINABLE_VARS_PARAMS_STAT_OPTIONS.copy", "os.path.join"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["", "def", "param_analysis_options", "(", "output_dir", ")", ":", "\n", "  ", "\"\"\"Options for model parameter analysis\n  \"\"\"", "\n", "options", "=", "model_analyzer", ".", "TRAINABLE_VARS_PARAMS_STAT_OPTIONS", ".", "copy", "(", ")", "\n", "options", "[", "\"select\"", "]", "=", "[", "\"params\"", ",", "\"bytes\"", "]", "\n", "options", "[", "\"order_by\"", "]", "=", "\"params\"", "\n", "options", "[", "\"account_type_regexes\"", "]", "=", "[", "\"Variable\"", "]", "\n", "if", "output_dir", ":", "\n", "    ", "options", "[", "\"dump_to_file\"", "]", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"params.txt\"", ")", "\n", "", "return", "\"scope\"", ",", "options", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.profile.micro_anaylsis_options": [[136, 147], ["tensorflow.contrib.tfprof.model_analyzer.TRAINABLE_VARS_PARAMS_STAT_OPTIONS.copy", "os.path.join"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["", "def", "micro_anaylsis_options", "(", "output_dir", ")", ":", "\n", "  ", "\"\"\"Options for microsecond analysis\n  \"\"\"", "\n", "options", "=", "model_analyzer", ".", "TRAINABLE_VARS_PARAMS_STAT_OPTIONS", ".", "copy", "(", ")", "\n", "options", "[", "\"select\"", "]", "=", "[", "\"micros\"", ",", "\"device\"", "]", "\n", "options", "[", "\"min_micros\"", "]", "=", "1000", "\n", "options", "[", "\"account_type_regexes\"", "]", "=", "[", "\".*\"", "]", "\n", "options", "[", "\"order_by\"", "]", "=", "\"micros\"", "\n", "if", "output_dir", ":", "\n", "    ", "options", "[", "\"dump_to_file\"", "]", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"micro.txt\"", ")", "\n", "", "return", "\"graph\"", ",", "options", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.profile.flops_analysis_options": [[149, 160], ["tensorflow.contrib.tfprof.model_analyzer.TRAINABLE_VARS_PARAMS_STAT_OPTIONS.copy", "os.path.join"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["", "def", "flops_analysis_options", "(", "output_dir", ")", ":", "\n", "  ", "\"\"\"Options for FLOPS analysis\n  \"\"\"", "\n", "options", "=", "model_analyzer", ".", "TRAINABLE_VARS_PARAMS_STAT_OPTIONS", ".", "copy", "(", ")", "\n", "options", "[", "\"select\"", "]", "=", "[", "\"float_ops\"", ",", "\"micros\"", ",", "\"device\"", "]", "\n", "options", "[", "\"min_float_ops\"", "]", "=", "1", "\n", "options", "[", "\"order_by\"", "]", "=", "\"float_ops\"", "\n", "options", "[", "\"account_type_regexes\"", "]", "=", "[", "\".*\"", "]", "\n", "if", "output_dir", ":", "\n", "    ", "options", "[", "\"dump_to_file\"", "]", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"flops.txt\"", ")", "\n", "", "return", "\"scope\"", ",", "options", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.profile.device_analysis_options": [[162, 172], ["tensorflow.contrib.tfprof.model_analyzer.TRAINABLE_VARS_PARAMS_STAT_OPTIONS.copy", "os.path.join"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["", "def", "device_analysis_options", "(", "output_dir", ")", ":", "\n", "  ", "\"\"\"Options for device placement analysis\n  \"\"\"", "\n", "options", "=", "model_analyzer", ".", "TRAINABLE_VARS_PARAMS_STAT_OPTIONS", ".", "copy", "(", ")", "\n", "options", "[", "\"select\"", "]", "=", "[", "\"device\"", ",", "\"float_ops\"", ",", "\"micros\"", "]", "\n", "options", "[", "\"order_by\"", "]", "=", "\"name\"", "\n", "options", "[", "\"account_type_regexes\"", "]", "=", "[", "\".*\"", "]", "\n", "if", "output_dir", ":", "\n", "    ", "options", "[", "\"dump_to_file\"", "]", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"device.txt\"", ")", "\n", "", "return", "\"scope\"", ",", "options", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.profile.main": [[174, 202], ["os.path.abspath", "os.path.join", "tensorflow.gfile.MakeDirs", "profile.load_metadata", "os.path.expanduser", "profile.param_analysis_options", "profile.micro_anaylsis_options", "profile.flops_analysis_options", "profile.device_analysis_options", "tensorflow.contrib.tfprof.model_analyzer.print_model_analysis", "print"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.profile.load_metadata", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.profile.param_analysis_options", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.profile.micro_anaylsis_options", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.profile.flops_analysis_options", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tools.profile.device_analysis_options"], ["", "def", "main", "(", "_argv", ")", ":", "\n", "  ", "\"\"\"Main functions. Runs all anaylses.\"\"\"", "\n", "# pylint: disable=W0212", "\n", "tfprof_logger", ".", "_merge_default_with_oplog", "=", "merge_default_with_oplog", "\n", "\n", "FLAGS", ".", "model_dir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "expanduser", "(", "FLAGS", ".", "model_dir", ")", ")", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "model_dir", ",", "\"profile\"", ")", "\n", "gfile", ".", "MakeDirs", "(", "output_dir", ")", "\n", "\n", "run_meta", ",", "graph", ",", "op_log", "=", "load_metadata", "(", "FLAGS", ".", "model_dir", ")", "\n", "\n", "param_arguments", "=", "[", "\n", "param_analysis_options", "(", "output_dir", ")", ",", "\n", "micro_anaylsis_options", "(", "output_dir", ")", ",", "\n", "flops_analysis_options", "(", "output_dir", ")", ",", "\n", "device_analysis_options", "(", "output_dir", ")", ",", "\n", "]", "\n", "\n", "for", "tfprof_cmd", ",", "params", "in", "param_arguments", ":", "\n", "    ", "model_analyzer", ".", "print_model_analysis", "(", "\n", "graph", "=", "graph", ",", "\n", "run_meta", "=", "run_meta", ",", "\n", "op_log", "=", "op_log", ",", "\n", "tfprof_cmd", "=", "tfprof_cmd", ",", "\n", "tfprof_options", "=", "params", ")", "\n", "\n", "if", "params", "[", "\"dump_to_file\"", "]", "!=", "\"\"", ":", "\n", "      ", "print", "(", "\"Wrote {}\"", ".", "format", "(", "params", "[", "\"dump_to_file\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.templatemethod": [[24, 43], ["tensorflow.make_template", "tf.make_template."], "function", ["None"], ["def", "templatemethod", "(", "name_", ")", ":", "\n", "  ", "\"\"\"This decorator wraps a method with `tf.make_template`. For example,\n\n  @templatemethod\n  def my_method():\n    # Create variables\n  \"\"\"", "\n", "\n", "def", "template_decorator", "(", "func", ")", ":", "\n", "    ", "\"\"\"Inner decorator function\"\"\"", "\n", "\n", "def", "func_wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "      ", "\"\"\"Inner wrapper function\"\"\"", "\n", "templated_func", "=", "tf", ".", "make_template", "(", "name_", ",", "func", ")", "\n", "return", "templated_func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "func_wrapper", "\n", "\n", "", "return", "template_decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.add_dict_to_collection": [[45, 57], ["dict_.items", "tensorflow.add_to_collection", "tensorflow.add_to_collection"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], ["", "def", "add_dict_to_collection", "(", "dict_", ",", "collection_name", ")", ":", "\n", "  ", "\"\"\"Adds a dictionary to a graph collection.\n\n  Args:\n    dict_: A dictionary of string keys to tensor values\n    collection_name: The name of the collection to add the dictionary to\n  \"\"\"", "\n", "key_collection", "=", "collection_name", "+", "\"_keys\"", "\n", "value_collection", "=", "collection_name", "+", "\"_values\"", "\n", "for", "key", ",", "value", "in", "dict_", ".", "items", "(", ")", ":", "\n", "    ", "tf", ".", "add_to_collection", "(", "key_collection", ",", "key", ")", "\n", "tf", ".", "add_to_collection", "(", "value_collection", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.get_dict_from_collection": [[59, 73], ["tensorflow.get_collection", "tensorflow.get_collection", "dict", "zip"], "function", ["None"], ["", "", "def", "get_dict_from_collection", "(", "collection_name", ")", ":", "\n", "  ", "\"\"\"Gets a dictionary from a graph collection.\n\n  Args:\n    collection_name: A collection name to read a dictionary from\n\n  Returns:\n    A dictionary with string keys and tensor values\n  \"\"\"", "\n", "key_collection", "=", "collection_name", "+", "\"_keys\"", "\n", "value_collection", "=", "collection_name", "+", "\"_values\"", "\n", "keys", "=", "tf", ".", "get_collection", "(", "key_collection", ")", "\n", "values", "=", "tf", ".", "get_collection", "(", "value_collection", ")", "\n", "return", "dict", "(", "zip", "(", "keys", ",", "values", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable.abstractstaticmethod.__init__": [[37, 40], ["staticmethod.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "function", ")", ":", "\n", "    ", "super", "(", "abstractstaticmethod", ",", "self", ")", ".", "__init__", "(", "function", ")", "\n", "function", ".", "__isabstractmethod__", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable.Configurable.__init__": [[131, 135], ["configurable._parse_params", "configurable.Configurable._print_params", "configurable.Configurable.default_params"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable._parse_params", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable.Configurable._print_params", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.LogPerplexityMetricSpec.default_params"], ["def", "__init__", "(", "self", ",", "params", ",", "mode", ")", ":", "\n", "    ", "self", ".", "_params", "=", "_parse_params", "(", "params", ",", "self", ".", "default_params", "(", ")", ")", "\n", "self", ".", "_mode", "=", "mode", "\n", "self", ".", "_print_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable.Configurable._print_params": [[136, 141], ["tensorflow.logging.info", "tensorflow.logging.info", "yaml.dump"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.dump"], ["", "def", "_print_params", "(", "self", ")", ":", "\n", "    ", "\"\"\"Logs parameter values\"\"\"", "\n", "classname", "=", "self", ".", "__class__", ".", "__name__", "\n", "tf", ".", "logging", ".", "info", "(", "\"Creating %s in mode=%s\"", ",", "classname", ",", "self", ".", "_mode", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"\\n%s\"", ",", "yaml", ".", "dump", "(", "{", "classname", ":", "self", ".", "_params", "}", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable.Configurable.mode": [[142, 147], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mode", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns a value in tf.contrib.learn.ModeKeys.\n    \"\"\"", "\n", "return", "self", ".", "_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable.Configurable.params": [[148, 153], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "params", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns a dictionary of parsed parameters.\n    \"\"\"", "\n", "return", "self", ".", "_params", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable.Configurable.default_params": [[154, 161], ["None"], "methods", ["None"], ["", "@", "abstractstaticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "\"\"\"Returns a dictionary of default parameters. The default parameters\n    are used to define the expected type of passed parameters. Missing\n    parameter values are replaced with the defaults returned by this method.\n    \"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable._create_from_dict": [[44, 55], ["class_", "pydoc.locate", "getattr"], "function", ["None"], ["", "def", "_create_from_dict", "(", "dict_", ",", "default_module", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Creates a configurable class from a dictionary. The dictionary must have\n  \"class\" and \"params\" properties. The class can be either fully qualified, or\n  it is looked up in the modules passed via `default_module`.\n  \"\"\"", "\n", "class_", "=", "locate", "(", "dict_", "[", "\"class\"", "]", ")", "or", "getattr", "(", "default_module", ",", "dict_", "[", "\"class\"", "]", ")", "\n", "params", "=", "{", "}", "\n", "if", "\"params\"", "in", "dict_", ":", "\n", "    ", "params", "=", "dict_", "[", "\"params\"", "]", "\n", "", "instance", "=", "class_", "(", "params", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "instance", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable._maybe_load_yaml": [[57, 67], ["isinstance", "yaml.load", "isinstance", "ValueError", "type"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load"], ["", "def", "_maybe_load_yaml", "(", "item", ")", ":", "\n", "  ", "\"\"\"Parses `item` only if it is a string. If `item` is a dictionary\n  it is returned as-is.\n  \"\"\"", "\n", "if", "isinstance", "(", "item", ",", "six", ".", "string_types", ")", ":", "\n", "    ", "return", "yaml", ".", "load", "(", "item", ")", "\n", "", "elif", "isinstance", "(", "item", ",", "dict", ")", ":", "\n", "    ", "return", "item", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Got {}, expected YAML string or dict\"", ",", "type", "(", "item", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable._deep_merge_dict": [[69, 84], ["isinstance", "isinstance", "configurable._deep_merge_dict", "str"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable._deep_merge_dict"], ["", "", "def", "_deep_merge_dict", "(", "dict_x", ",", "dict_y", ",", "path", "=", "None", ")", ":", "\n", "  ", "\"\"\"Recursively merges dict_y into dict_x.\n  \"\"\"", "\n", "if", "path", "is", "None", ":", "path", "=", "[", "]", "\n", "for", "key", "in", "dict_y", ":", "\n", "    ", "if", "key", "in", "dict_x", ":", "\n", "      ", "if", "isinstance", "(", "dict_x", "[", "key", "]", ",", "dict", ")", "and", "isinstance", "(", "dict_y", "[", "key", "]", ",", "dict", ")", ":", "\n", "        ", "_deep_merge_dict", "(", "dict_x", "[", "key", "]", ",", "dict_y", "[", "key", "]", ",", "path", "+", "[", "str", "(", "key", ")", "]", ")", "\n", "", "elif", "dict_x", "[", "key", "]", "==", "dict_y", "[", "key", "]", ":", "\n", "        ", "pass", "# same leaf value", "\n", "", "else", ":", "\n", "        ", "dict_x", "[", "key", "]", "=", "dict_y", "[", "key", "]", "\n", "", "", "else", ":", "\n", "      ", "dict_x", "[", "key", "]", "=", "dict_y", "[", "key", "]", "\n", "", "", "return", "dict_x", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable._parse_params": [[86, 119], ["copy.deepcopy", "params.items", "isinstance", "print", "isinstance", "ValueError", "configurable._parse_params", "type"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.configurable._parse_params"], ["", "def", "_parse_params", "(", "params", ",", "default_params", ")", ":", "\n", "  ", "\"\"\"Parses parameter values to the types defined by the default parameters.\n  Default parameters are used for missing values.\n  \"\"\"", "\n", "# Cast parameters to correct types", "\n", "if", "params", "is", "None", ":", "\n", "    ", "params", "=", "{", "}", "\n", "", "result", "=", "copy", ".", "deepcopy", "(", "default_params", ")", "\n", "for", "key", ",", "value", "in", "params", ".", "items", "(", ")", ":", "\n", "# If param is unknown, drop it to stay compatible with past versions", "\n", "    ", "if", "key", "not", "in", "default_params", ":", "\n", "        ", "print", "(", "\"unknown key\"", ",", "key", ",", "value", ")", "\n", "continue", "\n", "#where to set the default? What is such an error?", "\n", "#raise ValueError(\"%s is not a valid model parameter\" % key)", "\n", "# Param is a dictionary", "\n", "", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "      ", "default_dict", "=", "default_params", "[", "key", "]", "\n", "if", "not", "isinstance", "(", "default_dict", ",", "dict", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"%s should not be a dictionary\"", ",", "key", ")", "\n", "", "if", "default_dict", ":", "\n", "        ", "value", "=", "_parse_params", "(", "value", ",", "default_dict", ")", "\n", "", "else", ":", "\n", "# If the default is an empty dict we do not typecheck it", "\n", "# and assume it's done downstream", "\n", "        ", "pass", "\n", "", "", "if", "value", "is", "None", ":", "\n", "      ", "continue", "\n", "", "if", "default_params", "[", "key", "]", "is", "None", ":", "\n", "      ", "result", "[", "key", "]", "=", "value", "\n", "", "else", ":", "\n", "      ", "result", "[", "key", "]", "=", "type", "(", "default_params", "[", "key", "]", ")", "(", "value", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.__init__": [[36, 49], ["tensorflow.make_template"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "    ", "\"\"\"\n    Initialize the module. Each subclass must call this constructor with a name.\n\n    Args:\n      name: Name of this module. Used for `tf.make_template`.\n    \"\"\"", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "_template", "=", "tf", ".", "make_template", "(", "name", ",", "self", ".", "_build", ",", "create_scope_now_", "=", "True", ")", "\n", "# Docstrings for the class should be the docstring for the _build method", "\n", "self", ".", "__doc__", "=", "self", ".", "_build", ".", "__doc__", "\n", "# pylint: disable=E1101", "\n", "self", ".", "__call__", ".", "__func__", ".", "__doc__", "=", "self", ".", "_build", ".", "__doc__", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule._build": [[50, 54], ["None"], "methods", ["None"], ["", "def", "_build", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Subclasses should implement their logic here.\n    \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.__call__": [[55, 58], ["graph_module.GraphModule._template"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# pylint: disable=missing-docstring", "\n", "    ", "return", "self", ".", "_template", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope": [[59, 63], ["tensorflow.variable_scope"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope"], ["", "def", "variable_scope", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns the proper variable scope for this module.\n    \"\"\"", "\n", "return", "tf", ".", "variable_scope", "(", "self", ".", "_template", ".", "variable_scope", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.losses.cross_entropy_sequence_loss": [[24, 47], ["tensorflow.name_scope", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.sequence_mask", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.transpose", "tensorflow.to_float", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape"], ["def", "cross_entropy_sequence_loss", "(", "logits", ",", "targets", ",", "sequence_length", ")", ":", "\n", "  ", "\"\"\"Calculates the per-example cross-entropy loss for a sequence of logits and\n    masks out all losses passed the sequence length.\n\n  Args:\n    logits: Logits of shape `[T, B, vocab_size]`\n    targets: Target classes of shape `[T, B]`\n    sequence_length: An int32 tensor of shape `[B]` corresponding\n      to the length of each input\n\n  Returns:\n    A tensor of shape [T, B] that contains the loss per example, per time step.\n  \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"cross_entropy_sequence_loss\"", ")", ":", "\n", "    ", "losses", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "logits", ",", "labels", "=", "targets", ")", "\n", "\n", "# Mask out the losses we don't care about", "\n", "loss_mask", "=", "tf", ".", "sequence_mask", "(", "\n", "tf", ".", "to_int32", "(", "sequence_length", ")", ",", "tf", ".", "to_int32", "(", "tf", ".", "shape", "(", "targets", ")", "[", "0", "]", ")", ")", "\n", "losses", "=", "losses", "*", "tf", ".", "transpose", "(", "tf", ".", "to_float", "(", "loss_mask", ")", ",", "[", "1", ",", "0", "]", ")", "\n", "\n", "return", "losses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.decoder.Decoder.batch_size": [[84, 88], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "batch_size", "(", "self", ")", ":", "\n", "    ", "\"\"\"The batch size of the inputs returned by `sample`.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.decoder.Decoder.output_size": [[89, 93], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "    ", "\"\"\"A (possibly nested tuple of...) integer[s] or `TensorShape` object[s].\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.decoder.Decoder.output_dtype": [[94, 98], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_dtype", "(", "self", ")", ":", "\n", "    ", "\"\"\"A (possibly nested tuple of...) dtype[s].\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.decoder.Decoder.initialize": [[99, 110], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "initialize", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Called before any decoding iterations.\n\n    Args:\n      name: Name scope for any created operations.\n\n    Returns:\n      `(finished, first_inputs, initial_state)`.\n    \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.decoder.Decoder.step": [[111, 125], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "step", "(", "self", ",", "time", ",", "inputs", ",", "state", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Called per step of decoding (but only once for dynamic decoding).\n\n    Args:\n      time: Scalar `int32` tensor.\n      inputs: Input (possibly nested tuple of) tensor[s] for this time step.\n      state: State (possibly nested tuple of) tensor[s] from previous time step.\n      name: Name scope for any created operations.\n\n    Returns:\n      `(outputs, next_state, next_inputs, finished)`.\n    \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.decoder._transpose_batch_time": [[50, 78], ["x.get_shape", "tensorflow.python.ops.array_ops.rank", "tensorflow.python.ops.array_ops.transpose", "array_ops.transpose.set_shape", "ValueError", "tensorflow.python.ops.array_ops.concat", "tensorflow.python.framework.tensor_shape.TensorShape().concatenate", "tensorflow.python.ops.math_ops.range", "tensorflow.python.framework.tensor_shape.TensorShape"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.concat"], ["def", "_transpose_batch_time", "(", "x", ")", ":", "\n", "  ", "\"\"\"Transpose the batch and time dimensions of a Tensor.\n\n  Retains as much of the static shape information as possible.\n\n  Args:\n    x: A tensor of rank 2 or higher.\n\n  Returns:\n    x transposed along the first two dimensions.\n\n  Raises:\n    ValueError: if `x` is rank 1 or lower.\n  \"\"\"", "\n", "x_static_shape", "=", "x", ".", "get_shape", "(", ")", "\n", "if", "x_static_shape", ".", "ndims", "is", "not", "None", "and", "x_static_shape", ".", "ndims", "<", "2", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"Expected input tensor %s to have rank at least 2, but saw shape: %s\"", "%", "\n", "(", "x", ",", "x_static_shape", ")", ")", "\n", "", "x_rank", "=", "array_ops", ".", "rank", "(", "x", ")", "\n", "x_t", "=", "array_ops", ".", "transpose", "(", "\n", "x", ",", "array_ops", ".", "concat", "(", "\n", "(", "[", "1", ",", "0", "]", ",", "math_ops", ".", "range", "(", "2", ",", "x_rank", ")", ")", ",", "axis", "=", "0", ")", ")", "\n", "x_t", ".", "set_shape", "(", "\n", "tensor_shape", ".", "TensorShape", "(", "[", "\n", "x_static_shape", "[", "1", "]", ".", "value", ",", "x_static_shape", "[", "0", "]", ".", "value", "\n", "]", ")", ".", "concatenate", "(", "x_static_shape", "[", "2", ":", "]", ")", ")", "\n", "return", "x_t", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.decoder._create_zero_outputs": [[127, 141], ["tensorflow.python.util.nest.map_structure", "tensorflow.python.ops.array_ops.zeros", "isinstance", "tensorflow.python.framework.constant_op.constant", "tensorflow.python.ops.array_ops.concat", "tensorflow.python.framework.tensor_shape.TensorShape().as_list", "decoder._create_zero_outputs._t"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.concat"], ["", "", "def", "_create_zero_outputs", "(", "size", ",", "dtype", ",", "batch_size", ")", ":", "\n", "  ", "\"\"\"Create a zero outputs Tensor structure.\"\"\"", "\n", "def", "_t", "(", "s", ")", ":", "\n", "    ", "return", "(", "s", "if", "isinstance", "(", "s", ",", "ops", ".", "Tensor", ")", "else", "constant_op", ".", "constant", "(", "\n", "tensor_shape", ".", "TensorShape", "(", "s", ")", ".", "as_list", "(", ")", ",", "\n", "dtype", "=", "dtypes", ".", "int32", ",", "\n", "name", "=", "\"zero_suffix_shape\"", ")", ")", "\n", "\n", "", "def", "_create", "(", "s", ",", "d", ")", ":", "\n", "    ", "return", "array_ops", ".", "zeros", "(", "\n", "array_ops", ".", "concat", "(", "\n", "(", "[", "batch_size", "]", ",", "_t", "(", "s", ")", ")", ",", "axis", "=", "0", ")", ",", "dtype", "=", "d", ")", "\n", "\n", "", "return", "nest", ".", "map_structure", "(", "_create", ",", "size", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.decoder.dynamic_decode": [[143, 297], ["isinstance", "TypeError", "tensorflow.python.ops.variable_scope.variable_scope", "decoder.initialize", "decoder._create_zero_outputs", "tensorflow.python.framework.constant_op.constant", "tensorflow.python.util.nest.map_structure", "tensorflow.python.ops.control_flow_ops.while_loop", "tensorflow.python.util.nest.map_structure", "varscope.set_caching_device", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.ops.math_ops.logical_or", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.math_ops.logical_not", "decoder.step", "tensorflow.python.ops.math_ops.logical_or", "tensorflow.python.util.nest.assert_same_structure", "tensorflow.python.util.nest.assert_same_structure", "tensorflow.python.util.nest.assert_same_structure", "tensorflow.python.util.nest.map_structure", "tensorflow.python.util.nest.map_structure", "type", "ValueError", "isinstance", "tensorflow.python.framework.tensor_shape.TensorShape", "tensorflow.python.framework.tensor_util.constant_value", "tensorflow.python.framework.tensor_shape.TensorShape().concatenate", "tensorflow.python.ops.math_ops.reduce_all", "tensorflow.python.ops.math_ops.logical_or", "tensorflow.python.util.nest.map_structure", "isinstance", "tensorflow.python.util.nest.map_structure", "ta.stack", "ops.convert_to_tensor.get_shape", "tensorflow.python.framework.ops.convert_to_tensor", "decoder.dynamic_decode._shape"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder.initialize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.decoder._create_zero_outputs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step"], ["", "def", "dynamic_decode", "(", "decoder", ",", "\n", "output_time_major", "=", "False", ",", "\n", "impute_finished", "=", "False", ",", "\n", "maximum_iterations", "=", "None", ",", "\n", "parallel_iterations", "=", "32", ",", "\n", "swap_memory", "=", "False", ",", "\n", "scope", "=", "None", ")", ":", "\n", "  ", "\"\"\"Perform dynamic decoding with `decoder`.\n\n  Args:\n    decoder: A `Decoder` instance.\n    output_time_major: Python boolean.  Default: `False` (batch major).  If\n      `True`, outputs are returned as time major tensors (this mode is faster).\n      Otherwise, outputs are returned as batch major tensors (this adds extra\n      time to the computation).\n    impute_finished: Python boolean.  If `True`, then states for batch\n      entries which are marked as finished get copied through and the\n      corresponding outputs get zeroed out.  This causes some slowdown at\n      each time step, but ensures that the final state and outputs have\n      the correct values and that backprop ignores time steps that were\n      marked as finished.\n    maximum_iterations: `int32` scalar, maximum allowed number of decoding\n       steps.  Default is `None` (decode until the decoder is fully done).\n    parallel_iterations: Argument passed to `tf.while_loop`.\n    swap_memory: Argument passed to `tf.while_loop`.\n    scope: Optional variable scope to use.\n\n  Returns:\n    `(final_outputs, final_state)`.\n\n  Raises:\n    TypeError: if `decoder` is not an instance of `Decoder`.\n    ValueError: if maximum_iterations is provided but is not a scalar.\n  \"\"\"", "\n", "if", "not", "isinstance", "(", "decoder", ",", "Decoder", ")", ":", "\n", "    ", "raise", "TypeError", "(", "\"Expected decoder to be type Decoder, but saw: %s\"", "%", "\n", "type", "(", "decoder", ")", ")", "\n", "\n", "", "with", "variable_scope", ".", "variable_scope", "(", "scope", "or", "\"decoder\"", ")", "as", "varscope", ":", "\n", "# Properly cache variable values inside the while_loop", "\n", "    ", "if", "varscope", ".", "caching_device", "is", "None", ":", "\n", "      ", "varscope", ".", "set_caching_device", "(", "lambda", "op", ":", "op", ".", "device", ")", "\n", "\n", "", "if", "maximum_iterations", "is", "not", "None", ":", "\n", "      ", "maximum_iterations", "=", "ops", ".", "convert_to_tensor", "(", "\n", "maximum_iterations", ",", "dtype", "=", "dtypes", ".", "int32", ",", "name", "=", "\"maximum_iterations\"", ")", "\n", "if", "maximum_iterations", ".", "get_shape", "(", ")", ".", "ndims", "!=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"maximum_iterations must be a scalar\"", ")", "\n", "\n", "", "", "initial_finished", ",", "initial_inputs", ",", "initial_state", "=", "decoder", ".", "initialize", "(", ")", "\n", "\n", "zero_outputs", "=", "_create_zero_outputs", "(", "decoder", ".", "output_size", ",", "\n", "decoder", ".", "output_dtype", ",", "\n", "decoder", ".", "batch_size", ")", "\n", "\n", "if", "maximum_iterations", "is", "not", "None", ":", "\n", "      ", "initial_finished", "=", "math_ops", ".", "logical_or", "(", "\n", "initial_finished", ",", "0", ">=", "maximum_iterations", ")", "\n", "", "initial_time", "=", "constant_op", ".", "constant", "(", "0", ",", "dtype", "=", "dtypes", ".", "int32", ")", "\n", "\n", "def", "_shape", "(", "batch_size", ",", "from_shape", ")", ":", "\n", "      ", "if", "not", "isinstance", "(", "from_shape", ",", "tensor_shape", ".", "TensorShape", ")", ":", "\n", "        ", "return", "tensor_shape", ".", "TensorShape", "(", "None", ")", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "tensor_util", ".", "constant_value", "(", "\n", "ops", ".", "convert_to_tensor", "(", "\n", "batch_size", ",", "name", "=", "\"batch_size\"", ")", ")", "\n", "return", "tensor_shape", ".", "TensorShape", "(", "[", "batch_size", "]", ")", ".", "concatenate", "(", "from_shape", ")", "\n", "\n", "", "", "def", "_create_ta", "(", "s", ",", "d", ")", ":", "\n", "      ", "return", "tensor_array_ops", ".", "TensorArray", "(", "\n", "dtype", "=", "d", ",", "\n", "size", "=", "0", ",", "\n", "dynamic_size", "=", "True", ",", "\n", "element_shape", "=", "_shape", "(", "decoder", ".", "batch_size", ",", "s", ")", ")", "\n", "\n", "", "initial_outputs_ta", "=", "nest", ".", "map_structure", "(", "_create_ta", ",", "decoder", ".", "output_size", ",", "\n", "decoder", ".", "output_dtype", ")", "\n", "\n", "def", "condition", "(", "unused_time", ",", "unused_outputs_ta", ",", "unused_state", ",", "unused_inputs", ",", "\n", "finished", ")", ":", "\n", "      ", "return", "math_ops", ".", "logical_not", "(", "math_ops", ".", "reduce_all", "(", "finished", ")", ")", "\n", "\n", "", "def", "body", "(", "time", ",", "outputs_ta", ",", "state", ",", "inputs", ",", "finished", ")", ":", "\n", "      ", "\"\"\"Internal while_loop body.\n\n      Args:\n        time: scalar int32 tensor.\n        outputs_ta: structure of TensorArray.\n        state: (structure of) state tensors and TensorArrays.\n        inputs: (structure of) input tensors.\n        finished: 1-D bool tensor.\n\n      Returns:\n        `(time + 1, outputs_ta, next_state, next_inputs, next_finished)`.\n      \"\"\"", "\n", "(", "next_outputs", ",", "decoder_state", ",", "next_inputs", ",", "\n", "decoder_finished", ")", "=", "decoder", ".", "step", "(", "time", ",", "inputs", ",", "state", ")", "\n", "next_finished", "=", "math_ops", ".", "logical_or", "(", "decoder_finished", ",", "finished", ")", "\n", "if", "maximum_iterations", "is", "not", "None", ":", "\n", "        ", "next_finished", "=", "math_ops", ".", "logical_or", "(", "\n", "next_finished", ",", "time", "+", "1", ">=", "maximum_iterations", ")", "\n", "\n", "", "nest", ".", "assert_same_structure", "(", "state", ",", "decoder_state", ")", "\n", "nest", ".", "assert_same_structure", "(", "outputs_ta", ",", "next_outputs", ")", "\n", "nest", ".", "assert_same_structure", "(", "inputs", ",", "next_inputs", ")", "\n", "\n", "# Zero out output values past finish", "\n", "if", "impute_finished", ":", "\n", "        ", "emit", "=", "nest", ".", "map_structure", "(", "\n", "lambda", "out", ",", "zero", ":", "array_ops", ".", "where", "(", "finished", ",", "zero", ",", "out", ")", ",", "\n", "next_outputs", ",", "\n", "zero_outputs", ")", "\n", "", "else", ":", "\n", "        ", "emit", "=", "next_outputs", "\n", "\n", "# Copy through states past finish", "\n", "", "def", "_maybe_copy_state", "(", "new", ",", "cur", ")", ":", "\n", "# TensorArrays and scalar states get passed through.", "\n", "        ", "if", "isinstance", "(", "cur", ",", "tensor_array_ops", ".", "TensorArray", ")", ":", "\n", "          ", "pass_through", "=", "True", "\n", "", "else", ":", "\n", "          ", "new", ".", "set_shape", "(", "cur", ".", "shape", ")", "\n", "pass_through", "=", "(", "new", ".", "shape", ".", "ndims", "==", "0", ")", "\n", "", "return", "new", "if", "pass_through", "else", "array_ops", ".", "where", "(", "finished", ",", "cur", ",", "new", ")", "\n", "\n", "", "if", "impute_finished", ":", "\n", "        ", "next_state", "=", "nest", ".", "map_structure", "(", "\n", "_maybe_copy_state", ",", "decoder_state", ",", "state", ")", "\n", "", "else", ":", "\n", "        ", "next_state", "=", "decoder_state", "\n", "\n", "", "outputs_ta", "=", "nest", ".", "map_structure", "(", "lambda", "ta", ",", "out", ":", "ta", ".", "write", "(", "time", ",", "out", ")", ",", "\n", "outputs_ta", ",", "emit", ")", "\n", "return", "(", "time", "+", "1", ",", "outputs_ta", ",", "next_state", ",", "next_inputs", ",", "next_finished", ")", "\n", "\n", "", "res", "=", "control_flow_ops", ".", "while_loop", "(", "\n", "condition", ",", "\n", "body", ",", "\n", "loop_vars", "=", "[", "\n", "initial_time", ",", "initial_outputs_ta", ",", "initial_state", ",", "initial_inputs", ",", "\n", "initial_finished", "\n", "]", ",", "\n", "parallel_iterations", "=", "parallel_iterations", ",", "\n", "swap_memory", "=", "swap_memory", ")", "\n", "\n", "final_outputs_ta", "=", "res", "[", "1", "]", "\n", "final_state", "=", "res", "[", "2", "]", "\n", "\n", "final_outputs", "=", "nest", ".", "map_structure", "(", "lambda", "ta", ":", "ta", ".", "stack", "(", ")", ",", "final_outputs_ta", ")", "\n", "if", "not", "output_time_major", ":", "\n", "      ", "final_outputs", "=", "nest", ".", "map_structure", "(", "_transpose_batch_time", ",", "final_outputs", ")", "\n", "\n", "", "", "return", "final_outputs", ",", "final_state", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.Helper.batch_size": [[72, 76], ["NotImplementedError"], "methods", ["None"], ["@", "abc", ".", "abstractproperty", "\n", "def", "batch_size", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns a scalar int32 tensor.\"\"\"", "\n", "raise", "NotImplementedError", "(", "\"batch_size has not been implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.Helper.initialize": [[77, 81], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "initialize", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Returns `(initial_finished, initial_inputs)`.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.Helper.sample": [[82, 86], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "sample", "(", "self", ",", "time", ",", "outputs", ",", "state", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Returns `sample_ids`.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.Helper.next_inputs": [[87, 91], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "next_inputs", "(", "self", ",", "time", ",", "outputs", ",", "state", ",", "sample_ids", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Returns `(finished, next_inputs, next_state)`.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.CustomHelper.__init__": [[96, 111], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "initialize_fn", ",", "sample_fn", ",", "next_inputs_fn", ")", ":", "\n", "    ", "\"\"\"Initializer.\n\n    Args:\n      initialize_fn: callable that returns `(finished, next_inputs)`\n        for the first iteration.\n      sample_fn: callable that takes `(time, outputs, state)`\n        and emits tensor `sample_ids`.\n      next_inputs_fn: callable that takes `(time, outputs, state, sample_ids)`\n        and emits `(finished, next_inputs, next_state)`.\n    \"\"\"", "\n", "self", ".", "_initialize_fn", "=", "initialize_fn", "\n", "self", ".", "_sample_fn", "=", "sample_fn", "\n", "self", ".", "_next_inputs_fn", "=", "next_inputs_fn", "\n", "self", ".", "_batch_size", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.CustomHelper.batch_size": [[112, 117], ["ValueError"], "methods", ["None"], ["", "@", "property", "\n", "def", "batch_size", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "_batch_size", "is", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"batch_size accessed before initialize was called\"", ")", "\n", "", "return", "self", ".", "_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.CustomHelper.initialize": [[118, 124], ["tensorflow.python.framework.ops.name_scope", "helper.CustomHelper._initialize_fn", "tensorflow.python.ops.array_ops.size", "type"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size"], ["", "def", "initialize", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "    ", "with", "ops", ".", "name_scope", "(", "name", ",", "\"%sInitialize\"", "%", "type", "(", "self", ")", ".", "__name__", ")", ":", "\n", "      ", "(", "finished", ",", "next_inputs", ")", "=", "self", ".", "_initialize_fn", "(", ")", "\n", "if", "self", ".", "_batch_size", "is", "None", ":", "\n", "        ", "self", ".", "_batch_size", "=", "array_ops", ".", "size", "(", "finished", ")", "\n", "", "", "return", "(", "finished", ",", "next_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.CustomHelper.sample": [[125, 129], ["tensorflow.python.framework.ops.name_scope", "helper.CustomHelper._sample_fn", "type"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "time", ",", "outputs", ",", "state", ",", "name", "=", "None", ")", ":", "\n", "    ", "with", "ops", ".", "name_scope", "(", "\n", "name", ",", "\"%sSample\"", "%", "type", "(", "self", ")", ".", "__name__", ",", "(", "time", ",", "outputs", ",", "state", ")", ")", ":", "\n", "      ", "return", "self", ".", "_sample_fn", "(", "time", "=", "time", ",", "outputs", "=", "outputs", ",", "state", "=", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.CustomHelper.next_inputs": [[130, 135], ["tensorflow.python.framework.ops.name_scope", "helper.CustomHelper._next_inputs_fn", "type"], "methods", ["None"], ["", "", "def", "next_inputs", "(", "self", ",", "time", ",", "outputs", ",", "state", ",", "sample_ids", ",", "name", "=", "None", ")", ":", "\n", "    ", "with", "ops", ".", "name_scope", "(", "\n", "name", ",", "\"%sNextInputs\"", "%", "type", "(", "self", ")", ".", "__name__", ",", "(", "time", ",", "outputs", ",", "state", ")", ")", ":", "\n", "      ", "return", "self", ".", "_next_inputs_fn", "(", "\n", "time", "=", "time", ",", "outputs", "=", "outputs", ",", "state", "=", "state", ",", "sample_ids", "=", "sample_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.TrainingHelper.__init__": [[143, 173], ["tensorflow.python.framework.ops.name_scope", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.util.nest.map_structure", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.util.nest.map_structure", "tensorflow.python.ops.array_ops.size", "tensorflow.python.util.nest.map_structure", "ValueError", "helper.TrainingHelper._sequence_length.get_shape", "tensorflow.python.ops.array_ops.zeros_like", "helper.TrainingHelper._sequence_length.get_shape"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size"], ["def", "__init__", "(", "self", ",", "inputs", ",", "sequence_length", ",", "time_major", "=", "False", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Initializer.\n\n    Args:\n      inputs: A (structure of) input tensors.\n      sequence_length: An int32 vector tensor.\n      time_major: Python bool.  Whether the tensors in `inputs` are time major.\n        If `False` (default), they are assumed to be batch major.\n      name: Name scope for any created operations.\n\n    Raises:\n      ValueError: if `sequence_length` is not a 1D tensor.\n    \"\"\"", "\n", "with", "ops", ".", "name_scope", "(", "name", ",", "\"TrainingHelper\"", ",", "[", "inputs", ",", "sequence_length", "]", ")", ":", "\n", "      ", "inputs", "=", "ops", ".", "convert_to_tensor", "(", "inputs", ",", "name", "=", "\"inputs\"", ")", "\n", "if", "not", "time_major", ":", "\n", "        ", "inputs", "=", "nest", ".", "map_structure", "(", "_transpose_batch_time", ",", "inputs", ")", "\n", "\n", "", "self", ".", "_input_tas", "=", "nest", ".", "map_structure", "(", "_unstack_ta", ",", "inputs", ")", "\n", "self", ".", "_sequence_length", "=", "ops", ".", "convert_to_tensor", "(", "\n", "sequence_length", ",", "name", "=", "\"sequence_length\"", ")", "\n", "if", "self", ".", "_sequence_length", ".", "get_shape", "(", ")", ".", "ndims", "!=", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Expected sequence_length to be a vector, but received shape: %s\"", "%", "\n", "self", ".", "_sequence_length", ".", "get_shape", "(", ")", ")", "\n", "\n", "", "self", ".", "_zero_inputs", "=", "nest", ".", "map_structure", "(", "\n", "lambda", "inp", ":", "array_ops", ".", "zeros_like", "(", "inp", "[", "0", ",", ":", "]", ")", ",", "inputs", ")", "\n", "\n", "self", ".", "_batch_size", "=", "array_ops", ".", "size", "(", "sequence_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.TrainingHelper.batch_size": [[174, 177], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "batch_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.TrainingHelper.initialize": [[178, 186], ["tensorflow.python.framework.ops.name_scope", "tensorflow.python.ops.math_ops.equal", "tensorflow.python.ops.math_ops.reduce_all", "tensorflow.python.ops.control_flow_ops.cond", "tensorflow.python.util.nest.map_structure", "inp.read"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.read"], ["", "def", "initialize", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "    ", "with", "ops", ".", "name_scope", "(", "name", ",", "\"TrainingHelperInitialize\"", ")", ":", "\n", "      ", "finished", "=", "math_ops", ".", "equal", "(", "0", ",", "self", ".", "_sequence_length", ")", "\n", "all_finished", "=", "math_ops", ".", "reduce_all", "(", "finished", ")", "\n", "next_inputs", "=", "control_flow_ops", ".", "cond", "(", "\n", "all_finished", ",", "lambda", ":", "self", ".", "_zero_inputs", ",", "\n", "lambda", ":", "nest", ".", "map_structure", "(", "lambda", "inp", ":", "inp", ".", "read", "(", "0", ")", ",", "self", ".", "_input_tas", ")", ")", "\n", "return", "(", "finished", ",", "next_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.TrainingHelper.sample": [[187, 192], ["tensorflow.python.framework.ops.name_scope", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.argmax"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.argmax"], ["", "", "def", "sample", "(", "self", ",", "time", ",", "outputs", ",", "name", "=", "None", ",", "**", "unused_kwargs", ")", ":", "\n", "    ", "with", "ops", ".", "name_scope", "(", "name", ",", "\"TrainingHelperSample\"", ",", "[", "time", ",", "outputs", "]", ")", ":", "\n", "      ", "sample_ids", "=", "math_ops", ".", "cast", "(", "\n", "math_ops", ".", "argmax", "(", "outputs", ",", "axis", "=", "-", "1", ")", ",", "dtypes", ".", "int32", ")", "\n", "return", "sample_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.TrainingHelper.next_inputs": [[193, 206], ["tensorflow.python.framework.ops.name_scope", "tensorflow.python.ops.math_ops.reduce_all", "tensorflow.python.ops.control_flow_ops.cond", "inp.read", "tensorflow.python.util.nest.map_structure"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.read"], ["", "", "def", "next_inputs", "(", "self", ",", "time", ",", "outputs", ",", "state", ",", "name", "=", "None", ",", "**", "unused_kwargs", ")", ":", "\n", "    ", "\"\"\"next_inputs_fn for TrainingHelper.\"\"\"", "\n", "with", "ops", ".", "name_scope", "(", "name", ",", "\"TrainingHelperNextInputs\"", ",", "\n", "[", "time", ",", "outputs", ",", "state", "]", ")", ":", "\n", "      ", "next_time", "=", "time", "+", "1", "\n", "finished", "=", "(", "next_time", ">=", "self", ".", "_sequence_length", ")", "\n", "all_finished", "=", "math_ops", ".", "reduce_all", "(", "finished", ")", "\n", "def", "read_from_ta", "(", "inp", ")", ":", "\n", "        ", "return", "inp", ".", "read", "(", "next_time", ")", "\n", "", "next_inputs", "=", "control_flow_ops", ".", "cond", "(", "\n", "all_finished", ",", "lambda", ":", "self", ".", "_zero_inputs", ",", "\n", "lambda", ":", "nest", ".", "map_structure", "(", "read_from_ta", ",", "self", ".", "_input_tas", ")", ")", "\n", "return", "(", "finished", ",", "next_inputs", ",", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.ScheduledEmbeddingTrainingHelper.__init__": [[215, 256], ["tensorflow.python.framework.ops.name_scope", "callable", "tensorflow.python.framework.ops.convert_to_tensor", "helper.TrainingHelper.__init__", "ValueError", "tensorflow.python.ops.embedding_ops.embedding_lookup", "helper.ScheduledEmbeddingTrainingHelper._sampling_probability.get_shape", "helper.ScheduledEmbeddingTrainingHelper._sampling_probability.get_shape"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "inputs", ",", "sequence_length", ",", "embedding", ",", "sampling_probability", ",", "\n", "time_major", "=", "False", ",", "seed", "=", "None", ",", "scheduling_seed", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Initializer.\n\n    Args:\n      inputs: A (structure of) input tensors.\n      sequence_length: An int32 vector tensor.\n      embedding: A callable that takes a vector tensor of `ids` (argmax ids),\n        or the `params` argument for `embedding_lookup`.\n      sampling_probability: A 0D `float32` tensor: the probability of sampling\n        categorically from the output ids instead of reading directly from the\n        inputs.\n      time_major: Python bool.  Whether the tensors in `inputs` are time major.\n        If `False` (default), they are assumed to be batch major.\n      seed: The sampling seed.\n      scheduling_seed: The schedule decision rule sampling seed.\n      name: Name scope for any created operations.\n\n    Raises:\n      ValueError: if `sampling_probability` is not a scalar or vector.\n    \"\"\"", "\n", "with", "ops", ".", "name_scope", "(", "name", ",", "\"ScheduledEmbeddingSamplingWrapper\"", ",", "\n", "[", "embedding", ",", "sampling_probability", "]", ")", ":", "\n", "      ", "if", "callable", "(", "embedding", ")", ":", "\n", "        ", "self", ".", "_embedding_fn", "=", "embedding", "\n", "", "else", ":", "\n", "        ", "self", ".", "_embedding_fn", "=", "(", "\n", "lambda", "ids", ":", "embedding_ops", ".", "embedding_lookup", "(", "embedding", ",", "ids", ")", ")", "\n", "", "self", ".", "_sampling_probability", "=", "ops", ".", "convert_to_tensor", "(", "\n", "sampling_probability", ",", "name", "=", "\"sampling_probability\"", ")", "\n", "if", "self", ".", "_sampling_probability", ".", "get_shape", "(", ")", ".", "ndims", "not", "in", "(", "0", ",", "1", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"sampling_probability must be either a scalar or a vector. \"", "\n", "\"saw shape: %s\"", "%", "(", "self", ".", "_sampling_probability", ".", "get_shape", "(", ")", ")", ")", "\n", "", "self", ".", "_seed", "=", "seed", "\n", "self", ".", "_scheduling_seed", "=", "scheduling_seed", "\n", "super", "(", "ScheduledEmbeddingTrainingHelper", ",", "self", ")", ".", "__init__", "(", "\n", "inputs", "=", "inputs", ",", "\n", "sequence_length", "=", "sequence_length", ",", "\n", "time_major", "=", "time_major", ",", "\n", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.ScheduledEmbeddingTrainingHelper.initialize": [[257, 259], ["helper.TrainingHelper.initialize"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder.initialize"], ["", "", "def", "initialize", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "    ", "return", "super", "(", "ScheduledEmbeddingTrainingHelper", ",", "self", ")", ".", "initialize", "(", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.ScheduledEmbeddingTrainingHelper.sample": [[260, 272], ["tensorflow.python.framework.ops.name_scope", "tensorflow.python.ops.random_ops.random_uniform", "tensorflow.python.ops.distributions.categorical.Categorical", "tensorflow.python.ops.array_ops.where", "tensorflow.python.ops.distributions.categorical.Categorical.sample", "tensorflow.python.ops.array_ops.tile"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.sample"], ["", "def", "sample", "(", "self", ",", "time", ",", "outputs", ",", "state", ",", "name", "=", "None", ")", ":", "\n", "    ", "with", "ops", ".", "name_scope", "(", "name", ",", "\"ScheduledEmbeddingTrainingHelperSample\"", ",", "\n", "[", "time", ",", "outputs", ",", "state", "]", ")", ":", "\n", "# Return -1s where we did not sample, and sample_ids elsewhere", "\n", "      ", "select_sample_noise", "=", "random_ops", ".", "random_uniform", "(", "\n", "[", "self", ".", "batch_size", "]", ",", "seed", "=", "self", ".", "_scheduling_seed", ")", "\n", "select_sample", "=", "(", "self", ".", "_sampling_probability", ">", "select_sample_noise", ")", "\n", "sample_id_sampler", "=", "categorical", ".", "Categorical", "(", "logits", "=", "outputs", ")", "\n", "return", "array_ops", ".", "where", "(", "\n", "select_sample", ",", "\n", "sample_id_sampler", ".", "sample", "(", "seed", "=", "self", ".", "_seed", ")", ",", "\n", "array_ops", ".", "tile", "(", "[", "-", "1", "]", ",", "[", "self", ".", "batch_size", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.ScheduledEmbeddingTrainingHelper.next_inputs": [[273, 308], ["tensorflow.python.framework.ops.name_scope", "helper.TrainingHelper.next_inputs", "tensorflow.python.ops.math_ops.reduce_all", "tensorflow.python.ops.control_flow_ops.cond", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.array_ops.reshape", "tensorflow.python.ops.array_ops.reshape", "tensorflow.python.ops.array_ops.gather", "tensorflow.python.ops.array_ops.gather", "helper.ScheduledEmbeddingTrainingHelper._embedding_fn", "tensorflow.python.ops.array_ops.shape", "tensorflow.python.ops.array_ops.where", "tensorflow.python.ops.array_ops.where", "tensorflow.python.ops.array_ops.scatter_nd", "tensorflow.python.ops.array_ops.scatter_nd"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.GreedyEmbeddingHelper.next_inputs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape"], ["", "", "def", "next_inputs", "(", "self", ",", "time", ",", "outputs", ",", "state", ",", "sample_ids", ",", "name", "=", "None", ")", ":", "\n", "    ", "with", "ops", ".", "name_scope", "(", "name", ",", "\"ScheduledEmbeddingTrainingHelperSample\"", ",", "\n", "[", "time", ",", "outputs", ",", "state", ",", "sample_ids", "]", ")", ":", "\n", "      ", "(", "finished", ",", "base_next_inputs", ",", "state", ")", "=", "(", "\n", "super", "(", "ScheduledEmbeddingTrainingHelper", ",", "self", ")", ".", "next_inputs", "(", "\n", "time", "=", "time", ",", "\n", "outputs", "=", "outputs", ",", "\n", "state", "=", "state", ",", "\n", "sample_ids", "=", "sample_ids", ",", "\n", "name", "=", "name", ")", ")", "\n", "\n", "def", "maybe_sample", "(", ")", ":", "\n", "        ", "\"\"\"Perform scheduled sampling.\"\"\"", "\n", "where_sampling", "=", "math_ops", ".", "cast", "(", "\n", "array_ops", ".", "where", "(", "sample_ids", ">", "-", "1", ")", ",", "dtypes", ".", "int32", ")", "\n", "where_not_sampling", "=", "math_ops", ".", "cast", "(", "\n", "array_ops", ".", "where", "(", "sample_ids", "<=", "-", "1", ")", ",", "dtypes", ".", "int32", ")", "\n", "where_sampling_flat", "=", "array_ops", ".", "reshape", "(", "where_sampling", ",", "[", "-", "1", "]", ")", "\n", "where_not_sampling_flat", "=", "array_ops", ".", "reshape", "(", "where_not_sampling", ",", "[", "-", "1", "]", ")", "\n", "sample_ids_sampling", "=", "array_ops", ".", "gather", "(", "sample_ids", ",", "where_sampling_flat", ")", "\n", "inputs_not_sampling", "=", "array_ops", ".", "gather", "(", "\n", "base_next_inputs", ",", "where_not_sampling_flat", ")", "\n", "sampled_next_inputs", "=", "self", ".", "_embedding_fn", "(", "sample_ids_sampling", ")", "\n", "base_shape", "=", "array_ops", ".", "shape", "(", "base_next_inputs", ")", "\n", "return", "(", "array_ops", ".", "scatter_nd", "(", "indices", "=", "where_sampling", ",", "\n", "updates", "=", "sampled_next_inputs", ",", "\n", "shape", "=", "base_shape", ")", "\n", "+", "array_ops", ".", "scatter_nd", "(", "indices", "=", "where_not_sampling", ",", "\n", "updates", "=", "inputs_not_sampling", ",", "\n", "shape", "=", "base_shape", ")", ")", "\n", "\n", "", "all_finished", "=", "math_ops", ".", "reduce_all", "(", "finished", ")", "\n", "next_inputs", "=", "control_flow_ops", ".", "cond", "(", "\n", "all_finished", ",", "lambda", ":", "base_next_inputs", ",", "maybe_sample", ")", "\n", "return", "(", "finished", ",", "next_inputs", ",", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.ScheduledOutputTrainingHelper.__init__": [[316, 380], ["tensorflow.python.framework.ops.name_scope", "tensorflow.python.framework.ops.convert_to_tensor", "helper.TrainingHelper.__init__", "ValueError", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.util.nest.map_structure", "tensorflow.python.util.nest.map_structure", "TypeError", "helper.ScheduledOutputTrainingHelper._sampling_probability.get_shape", "tensorflow.python.util.nest.map_structure", "isinstance", "helper.ScheduledOutputTrainingHelper._sampling_probability.get_shape", "tensorflow.python.ops.array_ops.concat", "type"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.concat"], ["def", "__init__", "(", "self", ",", "inputs", ",", "sequence_length", ",", "sampling_probability", ",", "\n", "time_major", "=", "False", ",", "seed", "=", "None", ",", "next_input_layer", "=", "None", ",", "\n", "auxiliary_inputs", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Initializer.\n\n    Args:\n      inputs: A (structure) of input tensors.\n      sequence_length: An int32 vector tensor.\n      sampling_probability: A 0D `float32` tensor: the probability of sampling\n        from the outputs instead of reading directly from the inputs.\n      time_major: Python bool.  Whether the tensors in `inputs` are time major.\n        If `False` (default), they are assumed to be batch major.\n      seed: The sampling seed.\n      next_input_layer: (Optional) An instance of `tf.layers.Layer`, i.e.,\n        `tf.layers.Dense`.  Optional layer to apply to the RNN output to create\n        the next input.\n      auxiliary_inputs: An optional (structure of) auxiliary input tensors with\n        a shape that matches `inputs` in all but (potentially) the final\n        dimension. These tensors will be concatenated to the sampled output or\n        the `inputs` when not sampling for use as the next input.\n      name: Name scope for any created operations.\n\n    Raises:\n      ValueError: if `sampling_probability` is not a scalar or vector.\n    \"\"\"", "\n", "with", "ops", ".", "name_scope", "(", "name", ",", "\"ScheduledOutputTrainingHelper\"", ",", "\n", "[", "inputs", ",", "auxiliary_inputs", ",", "sampling_probability", "]", ")", ":", "\n", "      ", "self", ".", "_sampling_probability", "=", "ops", ".", "convert_to_tensor", "(", "\n", "sampling_probability", ",", "name", "=", "\"sampling_probability\"", ")", "\n", "if", "self", ".", "_sampling_probability", ".", "get_shape", "(", ")", ".", "ndims", "not", "in", "(", "0", ",", "1", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"sampling_probability must be either a scalar or a vector. \"", "\n", "\"saw shape: %s\"", "%", "(", "self", ".", "_sampling_probability", ".", "get_shape", "(", ")", ")", ")", "\n", "\n", "", "if", "auxiliary_inputs", "is", "None", ":", "\n", "        ", "maybe_concatenated_inputs", "=", "inputs", "\n", "", "else", ":", "\n", "        ", "inputs", "=", "ops", ".", "convert_to_tensor", "(", "inputs", ",", "name", "=", "\"inputs\"", ")", "\n", "auxiliary_inputs", "=", "ops", ".", "convert_to_tensor", "(", "\n", "auxiliary_inputs", ",", "name", "=", "\"auxiliary_inputs\"", ")", "\n", "maybe_concatenated_inputs", "=", "nest", ".", "map_structure", "(", "\n", "lambda", "x", ",", "y", ":", "array_ops", ".", "concat", "(", "(", "x", ",", "y", ")", ",", "-", "1", ")", ",", "\n", "inputs", ",", "auxiliary_inputs", ")", "\n", "if", "not", "time_major", ":", "\n", "          ", "auxiliary_inputs", "=", "nest", ".", "map_structure", "(", "\n", "_transpose_batch_time", ",", "auxiliary_inputs", ")", "\n", "\n", "", "", "self", ".", "_auxiliary_input_tas", "=", "(", "\n", "nest", ".", "map_structure", "(", "_unstack_ta", ",", "auxiliary_inputs", ")", "\n", "if", "auxiliary_inputs", "is", "not", "None", "else", "None", ")", "\n", "\n", "self", ".", "_seed", "=", "seed", "\n", "\n", "if", "(", "next_input_layer", "is", "not", "None", "and", "not", "isinstance", "(", "next_input_layer", ",", "\n", "layers_base", ".", "_Layer", ")", ")", ":", "# pylint: disable=protected-access", "\n", "        ", "raise", "TypeError", "(", "\"next_input_layer must be a Layer, received: %s\"", "%", "\n", "type", "(", "next_input_layer", ")", ")", "\n", "", "self", ".", "_next_input_layer", "=", "next_input_layer", "\n", "\n", "super", "(", "ScheduledOutputTrainingHelper", ",", "self", ")", ".", "__init__", "(", "\n", "inputs", "=", "maybe_concatenated_inputs", ",", "\n", "sequence_length", "=", "sequence_length", ",", "\n", "time_major", "=", "time_major", ",", "\n", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.ScheduledOutputTrainingHelper.initialize": [[381, 383], ["helper.TrainingHelper.initialize"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder.initialize"], ["", "", "def", "initialize", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "    ", "return", "super", "(", "ScheduledOutputTrainingHelper", ",", "self", ")", ".", "initialize", "(", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.ScheduledOutputTrainingHelper.sample": [[384, 391], ["tensorflow.python.framework.ops.name_scope", "tensorflow.python.ops.distributions.bernoulli.Bernoulli", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.distributions.bernoulli.Bernoulli.sample"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.sample"], ["", "def", "sample", "(", "self", ",", "time", ",", "outputs", ",", "state", ",", "name", "=", "None", ")", ":", "\n", "    ", "with", "ops", ".", "name_scope", "(", "name", ",", "\"ScheduledOutputTrainingHelperSample\"", ",", "\n", "[", "time", ",", "outputs", ",", "state", "]", ")", ":", "\n", "      ", "sampler", "=", "bernoulli", ".", "Bernoulli", "(", "probs", "=", "self", ".", "_sampling_probability", ")", "\n", "return", "math_ops", ".", "cast", "(", "\n", "sampler", ".", "sample", "(", "sample_shape", "=", "self", ".", "batch_size", ",", "seed", "=", "self", ".", "_seed", ")", ",", "\n", "dtypes", ".", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.ScheduledOutputTrainingHelper.next_inputs": [[392, 447], ["tensorflow.python.framework.ops.name_scope", "helper.TrainingHelper.next_inputs", "tensorflow.python.ops.math_ops.reduce_all", "tensorflow.python.ops.control_flow_ops.cond", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.array_ops.gather_nd", "tensorflow.python.ops.array_ops.gather_nd", "maybe_concatenate_auxiliary_inputs"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.GreedyEmbeddingHelper.next_inputs"], ["", "", "def", "next_inputs", "(", "self", ",", "time", ",", "outputs", ",", "state", ",", "sample_ids", ",", "name", "=", "None", ")", ":", "\n", "    ", "with", "ops", ".", "name_scope", "(", "name", ",", "\"ScheduledOutputTrainingHelperNextInputs\"", ",", "\n", "[", "time", ",", "outputs", ",", "state", ",", "sample_ids", "]", ")", ":", "\n", "      ", "(", "finished", ",", "base_next_inputs", ",", "state", ")", "=", "(", "\n", "super", "(", "ScheduledOutputTrainingHelper", ",", "self", ")", ".", "next_inputs", "(", "\n", "time", "=", "time", ",", "\n", "outputs", "=", "outputs", ",", "\n", "state", "=", "state", ",", "\n", "sample_ids", "=", "sample_ids", ",", "\n", "name", "=", "name", ")", ")", "\n", "\n", "def", "maybe_sample", "(", ")", ":", "\n", "        ", "\"\"\"Perform scheduled sampling.\"\"\"", "\n", "\n", "def", "maybe_concatenate_auxiliary_inputs", "(", "outputs_", ",", "indices", "=", "None", ")", ":", "\n", "          ", "\"\"\"Concatenate outputs with auxiliary inputs, if they exist.\"\"\"", "\n", "if", "self", ".", "_auxiliary_input_tas", "is", "None", ":", "\n", "            ", "return", "outputs_", "\n", "\n", "", "next_time", "=", "time", "+", "1", "\n", "auxiliary_inputs", "=", "nest", ".", "map_structure", "(", "\n", "lambda", "ta", ":", "ta", ".", "read", "(", "next_time", ")", ",", "self", ".", "_auxiliary_input_tas", ")", "\n", "if", "indices", "is", "not", "None", ":", "\n", "            ", "auxiliary_inputs", "=", "array_ops", ".", "gather_nd", "(", "auxiliary_inputs", ",", "indices", ")", "\n", "", "return", "nest", ".", "map_structure", "(", "\n", "lambda", "x", ",", "y", ":", "array_ops", ".", "concat", "(", "(", "x", ",", "y", ")", ",", "-", "1", ")", ",", "\n", "outputs_", ",", "auxiliary_inputs", ")", "\n", "\n", "", "if", "self", ".", "_next_input_layer", "is", "None", ":", "\n", "          ", "return", "array_ops", ".", "where", "(", "\n", "sample_ids", ",", "maybe_concatenate_auxiliary_inputs", "(", "outputs", ")", ",", "\n", "base_next_inputs", ")", "\n", "\n", "", "where_sampling", "=", "math_ops", ".", "cast", "(", "\n", "array_ops", ".", "where", "(", "sample_ids", ")", ",", "dtypes", ".", "int32", ")", "\n", "where_not_sampling", "=", "math_ops", ".", "cast", "(", "\n", "array_ops", ".", "where", "(", "math_ops", ".", "logical_not", "(", "sample_ids", ")", ")", ",", "dtypes", ".", "int32", ")", "\n", "outputs_sampling", "=", "array_ops", ".", "gather_nd", "(", "outputs", ",", "where_sampling", ")", "\n", "inputs_not_sampling", "=", "array_ops", ".", "gather_nd", "(", "base_next_inputs", ",", "\n", "where_not_sampling", ")", "\n", "sampled_next_inputs", "=", "maybe_concatenate_auxiliary_inputs", "(", "\n", "self", ".", "_next_input_layer", "(", "outputs_sampling", ")", ",", "where_sampling", ")", "\n", "\n", "base_shape", "=", "array_ops", ".", "shape", "(", "base_next_inputs", ")", "\n", "return", "(", "array_ops", ".", "scatter_nd", "(", "indices", "=", "where_sampling", ",", "\n", "updates", "=", "sampled_next_inputs", ",", "\n", "shape", "=", "base_shape", ")", "\n", "+", "array_ops", ".", "scatter_nd", "(", "indices", "=", "where_not_sampling", ",", "\n", "updates", "=", "inputs_not_sampling", ",", "\n", "shape", "=", "base_shape", ")", ")", "\n", "\n", "", "all_finished", "=", "math_ops", ".", "reduce_all", "(", "finished", ")", "\n", "next_inputs", "=", "control_flow_ops", ".", "cond", "(", "\n", "all_finished", ",", "lambda", ":", "base_next_inputs", ",", "maybe_sample", ")", "\n", "return", "(", "finished", ",", "next_inputs", ",", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.GreedyEmbeddingHelper.__init__": [[456, 484], ["callable", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.ops.array_ops.size", "helper.GreedyEmbeddingHelper._embedding_fn", "ValueError", "ValueError", "tensorflow.python.ops.embedding_ops.embedding_lookup", "helper.GreedyEmbeddingHelper._start_tokens.get_shape", "helper.GreedyEmbeddingHelper._end_token.get_shape"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size"], ["def", "__init__", "(", "self", ",", "embedding", ",", "start_tokens", ",", "end_token", ")", ":", "\n", "    ", "\"\"\"Initializer.\n\n    Args:\n      embedding: A callable that takes a vector tensor of `ids` (argmax ids),\n        or the `params` argument for `embedding_lookup`.\n      start_tokens: `int32` vector shaped `[batch_size]`, the start tokens.\n      end_token: `int32` scalar, the token that marks end of decoding.\n\n    Raises:\n      ValueError: if `sequence_length` is not a 1D tensor.\n    \"\"\"", "\n", "if", "callable", "(", "embedding", ")", ":", "\n", "      ", "self", ".", "_embedding_fn", "=", "embedding", "\n", "", "else", ":", "\n", "      ", "self", ".", "_embedding_fn", "=", "(", "\n", "lambda", "ids", ":", "embedding_ops", ".", "embedding_lookup", "(", "embedding", ",", "ids", ")", ")", "\n", "\n", "", "self", ".", "_start_tokens", "=", "ops", ".", "convert_to_tensor", "(", "\n", "start_tokens", ",", "dtype", "=", "dtypes", ".", "int32", ",", "name", "=", "\"start_tokens\"", ")", "\n", "self", ".", "_end_token", "=", "ops", ".", "convert_to_tensor", "(", "\n", "end_token", ",", "dtype", "=", "dtypes", ".", "int32", ",", "name", "=", "\"end_token\"", ")", "\n", "if", "self", ".", "_start_tokens", ".", "get_shape", "(", ")", ".", "ndims", "!=", "1", ":", "\n", "      ", "raise", "ValueError", "(", "\"start_tokens must be a vector\"", ")", "\n", "", "self", ".", "_batch_size", "=", "array_ops", ".", "size", "(", "start_tokens", ")", "\n", "if", "self", ".", "_end_token", ".", "get_shape", "(", ")", ".", "ndims", "!=", "0", ":", "\n", "      ", "raise", "ValueError", "(", "\"end_token must be a scalar\"", ")", "\n", "", "self", ".", "_start_inputs", "=", "self", ".", "_embedding_fn", "(", "self", ".", "_start_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.GreedyEmbeddingHelper.batch_size": [[485, 488], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "batch_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.GreedyEmbeddingHelper.initialize": [[489, 492], ["tensorflow.python.ops.array_ops.tile"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "    ", "finished", "=", "array_ops", ".", "tile", "(", "[", "False", "]", ",", "[", "self", ".", "_batch_size", "]", ")", "\n", "return", "(", "finished", ",", "self", ".", "_start_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.GreedyEmbeddingHelper.sample": [[493, 503], ["tensorflow.python.ops.math_ops.cast", "isinstance", "TypeError", "tensorflow.python.ops.math_ops.argmax", "type"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.argmax"], ["", "def", "sample", "(", "self", ",", "time", ",", "outputs", ",", "state", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"sample for GreedyEmbeddingHelper.\"\"\"", "\n", "del", "time", ",", "state", "# unused by sample_fn", "\n", "# Outputs are logits, use argmax to get the most probable id", "\n", "if", "not", "isinstance", "(", "outputs", ",", "ops", ".", "Tensor", ")", ":", "\n", "      ", "raise", "TypeError", "(", "\"Expected outputs to be a single Tensor, got: %s\"", "%", "\n", "type", "(", "outputs", ")", ")", "\n", "", "sample_ids", "=", "math_ops", ".", "cast", "(", "\n", "math_ops", ".", "argmax", "(", "outputs", ",", "axis", "=", "-", "1", ")", ",", "dtypes", ".", "int32", ")", "\n", "return", "sample_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.GreedyEmbeddingHelper.next_inputs": [[504, 515], ["tensorflow.python.ops.math_ops.equal", "tensorflow.python.ops.math_ops.reduce_all", "tensorflow.python.ops.control_flow_ops.cond", "helper.GreedyEmbeddingHelper._embedding_fn"], "methods", ["None"], ["", "def", "next_inputs", "(", "self", ",", "time", ",", "outputs", ",", "state", ",", "sample_ids", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"next_inputs_fn for GreedyEmbeddingHelper.\"\"\"", "\n", "del", "time", ",", "outputs", "# unused by next_inputs_fn", "\n", "finished", "=", "math_ops", ".", "equal", "(", "sample_ids", ",", "self", ".", "_end_token", ")", "\n", "all_finished", "=", "math_ops", ".", "reduce_all", "(", "finished", ")", "\n", "next_inputs", "=", "control_flow_ops", ".", "cond", "(", "\n", "all_finished", ",", "\n", "# If we're finished, the next_inputs value doesn't matter", "\n", "lambda", ":", "self", ".", "_start_inputs", ",", "\n", "lambda", ":", "self", ".", "_embedding_fn", "(", "sample_ids", ")", ")", "\n", "return", "(", "finished", ",", "next_inputs", ",", "state", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper._unstack_ta": [[62, 66], ["tensorflow.python.ops.tensor_array_ops.TensorArray().unstack", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.array_ops.shape", "inp.get_shape"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape"], ["def", "_unstack_ta", "(", "inp", ")", ":", "\n", "  ", "return", "tensor_array_ops", ".", "TensorArray", "(", "\n", "dtype", "=", "inp", ".", "dtype", ",", "size", "=", "array_ops", ".", "shape", "(", "inp", ")", "[", "0", "]", ",", "\n", "element_shape", "=", "inp", ".", "get_shape", "(", ")", "[", "1", ":", "]", ")", ".", "unstack", "(", "inp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.train_utils_test.TestGetRNNCell.test_single_layer": [[38, 43], ["seq2seq.training.utils.get_rnn_cell", "train_utils_test.TestGetRNNCell.assertIsInstance", "train_utils_test.TestGetRNNCell.assertEqual"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.get_rnn_cell"], ["def", "test_single_layer", "(", "self", ")", ":", "\n", "    ", "cell", "=", "training_utils", ".", "get_rnn_cell", "(", "\n", "cell_class", "=", "\"BasicLSTMCell\"", ",", "cell_params", "=", "{", "\"num_units\"", ":", "16", "}", ",", "num_layers", "=", "1", ")", "\n", "self", ".", "assertIsInstance", "(", "cell", ",", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", ")", "\n", "self", ".", "assertEqual", "(", "cell", ".", "output_size", ",", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.train_utils_test.TestGetRNNCell.test_multi_layer": [[44, 49], ["seq2seq.training.utils.get_rnn_cell", "train_utils_test.TestGetRNNCell.assertIsInstance", "train_utils_test.TestGetRNNCell.assertEqual"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.get_rnn_cell"], ["", "def", "test_multi_layer", "(", "self", ")", ":", "\n", "    ", "cell", "=", "training_utils", ".", "get_rnn_cell", "(", "\n", "cell_class", "=", "\"BasicLSTMCell\"", ",", "cell_params", "=", "{", "\"num_units\"", ":", "16", "}", ",", "num_layers", "=", "2", ")", "\n", "self", ".", "assertIsInstance", "(", "cell", ",", "rnn_cell", ".", "ExtendedMultiRNNCell", ")", "\n", "self", ".", "assertEqual", "(", "cell", ".", "output_size", ",", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.train_utils_test.TestGetRNNCell.test_full_class_path": [[50, 57], ["seq2seq.training.utils.get_rnn_cell", "train_utils_test.TestGetRNNCell.assertIsInstance", "train_utils_test.TestGetRNNCell.assertEqual"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.get_rnn_cell"], ["", "def", "test_full_class_path", "(", "self", ")", ":", "\n", "    ", "cell", "=", "training_utils", ".", "get_rnn_cell", "(", "\n", "cell_class", "=", "\"tensorflow.contrib.rnn.BasicRNNCell\"", ",", "\n", "cell_params", "=", "{", "\"num_units\"", ":", "16", "}", ",", "\n", "num_layers", "=", "1", ")", "\n", "self", ".", "assertIsInstance", "(", "cell", ",", "tf", ".", "contrib", ".", "rnn", ".", "BasicRNNCell", ")", "\n", "self", ".", "assertEqual", "(", "cell", ".", "output_size", ",", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.train_utils_test.TestGetRNNCell.test_dropout": [[58, 66], ["seq2seq.training.utils.get_rnn_cell", "train_utils_test.TestGetRNNCell.assertIsInstance", "train_utils_test.TestGetRNNCell.assertEqual"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.get_rnn_cell"], ["", "def", "test_dropout", "(", "self", ")", ":", "\n", "    ", "cell", "=", "training_utils", ".", "get_rnn_cell", "(", "\n", "cell_class", "=", "\"BasicLSTMCell\"", ",", "\n", "cell_params", "=", "{", "\"num_units\"", ":", "16", "}", ",", "\n", "num_layers", "=", "1", ",", "\n", "dropout_input_keep_prob", "=", "0.5", ")", "\n", "self", ".", "assertIsInstance", "(", "cell", ",", "tf", ".", "contrib", ".", "rnn", ".", "DropoutWrapper", ")", "\n", "self", ".", "assertEqual", "(", "cell", ".", "output_size", ",", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.train_utils_test.TestGetRNNCell.test_extra_args": [[67, 87], ["seq2seq.training.utils.get_rnn_cell", "train_utils_test.TestGetRNNCell.assertIsInstance", "train_utils_test.TestGetRNNCell.assertEqual", "train_utils_test.TestGetRNNCell.assertEqual", "train_utils_test.TestGetRNNCell.assertEqual", "train_utils_test.TestGetRNNCell.assertRaises", "seq2seq.training.utils.get_rnn_cell"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.get_rnn_cell", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.get_rnn_cell"], ["", "def", "test_extra_args", "(", "self", ")", ":", "\n", "# Invalid args should raise a ValueError", "\n", "    ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "training_utils", ".", "get_rnn_cell", "(", "\n", "cell_class", "=", "\"LSTMCell\"", ",", "\n", "cell_params", "=", "{", "\"num_units\"", ":", "16", ",", "\n", "\"use_peepholesERROR\"", ":", "True", "}", ",", "\n", "num_layers", "=", "1", ")", "\n", "\n", "", "cell", "=", "training_utils", ".", "get_rnn_cell", "(", "\n", "cell_class", "=", "\"LSTMCell\"", ",", "\n", "cell_params", "=", "{", "\"num_units\"", ":", "8", ",", "\n", "\"use_peepholes\"", ":", "True", ",", "\n", "\"forget_bias\"", ":", "0.5", "}", ",", "\n", "num_layers", "=", "1", ")", "\n", "self", ".", "assertIsInstance", "(", "cell", ",", "tf", ".", "contrib", ".", "rnn", ".", "LSTMCell", ")", "\n", "#pylint: disable=E1101,W0212", "\n", "self", ".", "assertEqual", "(", "cell", ".", "_use_peepholes", ",", "True", ")", "\n", "self", ".", "assertEqual", "(", "cell", ".", "_forget_bias", ",", "0.5", ")", "\n", "self", ".", "assertEqual", "(", "cell", ".", "output_size", ",", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.train_utils_test.TestTrainOptions.setUp": [[92, 97], ["super().setUp", "tempfile.mkdtemp"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.setUp"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "TestTrainOptions", ",", "self", ")", ".", "setUp", "(", ")", "\n", "self", ".", "model_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "self", ".", "model_params", "=", "{", "\"num_layers\"", ":", "4", "}", "\n", "self", ".", "model_class", "=", "\"AttentionSeq2Seq\"", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.train_utils_test.TestTrainOptions.test_read_write": [[98, 107], ["seq2seq.training.utils.TrainOptions", "seq2seq.training.utils.TrainOptions.dump", "seq2seq.training.utils.TrainOptions.load", "train_utils_test.TestTrainOptions.assertEqual", "train_utils_test.TestTrainOptions.assertEqual"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.dump", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load"], ["", "def", "test_read_write", "(", "self", ")", ":", "\n", "    ", "saved_opts", "=", "training_utils", ".", "TrainOptions", "(", "\n", "model_class", "=", "self", ".", "model_class", ",", "model_params", "=", "self", ".", "model_params", ")", "\n", "saved_opts", ".", "dump", "(", "self", ".", "model_dir", ")", "\n", "\n", "loaded_opt", "=", "training_utils", ".", "TrainOptions", ".", "load", "(", "model_dir", "=", "self", ".", "model_dir", ")", "\n", "\n", "self", ".", "assertEqual", "(", "saved_opts", ".", "model_params", ",", "loaded_opt", ".", "model_params", ")", "\n", "self", ".", "assertEqual", "(", "saved_opts", ".", "model_class", ",", "loaded_opt", ".", "model_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.train_utils_test.TestInputFn._test_with_args": [[112, 133], ["seq2seq.test.utils.create_temp_parallel_data", "seq2seq.data.input_pipeline.ParallelTextInputPipeline", "seq2seq.training.utils.create_input_fn", "seq2seq.training.utils.create_input_fn.", "train_utils_test.TestInputFn.assertEqual", "train_utils_test.TestInputFn.assertEqual", "train_utils_test.TestInputFn.test_session", "set", "set", "set", "set", "tensorflow.contrib.slim.queues.QueueRunners", "sess.run", "features_.keys", "labels_.keys"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.utils.create_temp_parallel_data", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.create_input_fn", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys"], ["def", "_test_with_args", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Helper function to test create_input_fn with keyword arguments\"\"\"", "\n", "sources_file", ",", "targets_file", "=", "test_utils", ".", "create_temp_parallel_data", "(", "\n", "sources", "=", "[", "\"Hello World .\"", "]", ",", "targets", "=", "[", "\"Goodbye .\"", "]", ")", "\n", "\n", "pipeline", "=", "input_pipeline", ".", "ParallelTextInputPipeline", "(", "\n", "params", "=", "{", "\n", "\"source_files\"", ":", "[", "sources_file", ".", "name", "]", ",", "\n", "\"target_files\"", ":", "[", "targets_file", ".", "name", "]", "\n", "}", ",", "\n", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "input_fn", "=", "training_utils", ".", "create_input_fn", "(", "pipeline", "=", "pipeline", ",", "**", "kwargs", ")", "\n", "features", ",", "labels", "=", "input_fn", "(", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "with", "tf", ".", "contrib", ".", "slim", ".", "queues", ".", "QueueRunners", "(", "sess", ")", ":", "\n", "        ", "features_", ",", "labels_", "=", "sess", ".", "run", "(", "[", "features", ",", "labels", "]", ")", "\n", "\n", "", "", "self", ".", "assertEqual", "(", "\n", "set", "(", "features_", ".", "keys", "(", ")", ")", ",", "set", "(", "[", "\"source_tokens\"", ",", "\"source_len\"", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "set", "(", "labels_", ".", "keys", "(", ")", ")", ",", "set", "(", "[", "\"target_tokens\"", ",", "\"target_len\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.train_utils_test.TestInputFn.test_without_buckets": [[134, 136], ["train_utils_test.TestInputFn._test_with_args"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.train_utils_test.TestInputFn._test_with_args"], ["", "def", "test_without_buckets", "(", "self", ")", ":", "\n", "    ", "self", ".", "_test_with_args", "(", "batch_size", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.train_utils_test.TestInputFn.test_wit_buckets": [[137, 139], ["train_utils_test.TestInputFn._test_with_args"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.train_utils_test.TestInputFn._test_with_args"], ["", "def", "test_wit_buckets", "(", "self", ")", ":", "\n", "    ", "self", ".", "_test_with_args", "(", "batch_size", "=", "10", ",", "bucket_boundaries", "=", "[", "0", ",", "5", ",", "10", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.train_utils_test.TestLRDecay.test_no_decay": [[145, 153], ["seq2seq.training.utils.create_learning_rate_decay_fn", "train_utils_test.TestLRDecay.assertEqual", "seq2seq.training.utils.create_learning_rate_decay_fn", "train_utils_test.TestLRDecay.assertEqual"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.create_learning_rate_decay_fn", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.create_learning_rate_decay_fn"], ["def", "test_no_decay", "(", "self", ")", ":", "\n", "    ", "decay_fn", "=", "training_utils", ".", "create_learning_rate_decay_fn", "(", "\n", "decay_type", "=", "None", ",", "decay_steps", "=", "5", ",", "decay_rate", "=", "2.0", ")", "\n", "self", ".", "assertEqual", "(", "decay_fn", ",", "None", ")", "\n", "\n", "decay_fn", "=", "training_utils", ".", "create_learning_rate_decay_fn", "(", "\n", "decay_type", "=", "\"\"", ",", "decay_steps", "=", "5", ",", "decay_rate", "=", "2.0", ")", "\n", "self", ".", "assertEqual", "(", "decay_fn", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.train_utils_test.TestLRDecay.test_decay_without_min": [[154, 174], ["seq2seq.training.utils.create_learning_rate_decay_fn", "train_utils_test.TestLRDecay.test_session", "numpy.testing.assert_equal", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "sess.run", "sess.run", "sess.run", "seq2seq.training.utils.create_learning_rate_decay_fn.", "seq2seq.training.utils.create_learning_rate_decay_fn.", "seq2seq.training.utils.create_learning_rate_decay_fn."], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.create_learning_rate_decay_fn", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "def", "test_decay_without_min", "(", "self", ")", ":", "\n", "    ", "decay_fn", "=", "training_utils", ".", "create_learning_rate_decay_fn", "(", "\n", "decay_type", "=", "\"exponential_decay\"", ",", "\n", "decay_steps", "=", "10", ",", "\n", "decay_rate", "=", "0.9", ",", "\n", "start_decay_at", "=", "100", ",", "\n", "stop_decay_at", "=", "1000", ",", "\n", "staircase", "=", "False", ")", "\n", "\n", "initial_lr", "=", "1.0", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "# Should not decay before start_decay_at", "\n", "      ", "np", ".", "testing", ".", "assert_equal", "(", "sess", ".", "run", "(", "decay_fn", "(", "initial_lr", ",", "50", ")", ")", ",", "initial_lr", ")", "\n", "# Proper decay", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "\n", "sess", ".", "run", "(", "decay_fn", "(", "initial_lr", ",", "115", ")", ")", ",", "initial_lr", "*", "0.9", "**", "(", "15.0", "/", "10.0", ")", ")", "\n", "# Should not decay past stop_decay_at", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "\n", "sess", ".", "run", "(", "decay_fn", "(", "initial_lr", ",", "5000", ")", ")", ",", "initial_lr", "*", "0.9", "**", "(", "\n", "(", "1000.0", "-", "100.0", ")", "/", "10.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.train_utils_test.TestLRDecay.test_decay_with_min": [[175, 189], ["seq2seq.training.utils.create_learning_rate_decay_fn", "train_utils_test.TestLRDecay.test_session", "numpy.testing.assert_almost_equal", "sess.run", "seq2seq.training.utils.create_learning_rate_decay_fn."], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.create_learning_rate_decay_fn", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "", "def", "test_decay_with_min", "(", "self", ")", ":", "\n", "    ", "decay_fn", "=", "training_utils", ".", "create_learning_rate_decay_fn", "(", "\n", "decay_type", "=", "\"exponential_decay\"", ",", "\n", "decay_steps", "=", "10", ",", "\n", "decay_rate", "=", "0.9", ",", "\n", "start_decay_at", "=", "100", ",", "\n", "stop_decay_at", "=", "1000.0", ",", "\n", "min_learning_rate", "=", "0.01", ",", "\n", "staircase", "=", "False", ")", "\n", "\n", "initial_lr", "=", "1.0", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "# Should not decay past min_learning_rate", "\n", "      ", "np", ".", "testing", ".", "assert_almost_equal", "(", "sess", ".", "run", "(", "decay_fn", "(", "initial_lr", ",", "900", ")", ")", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.pipeline_test.PipelineTest.setUp": [[52, 58], ["super().setUp", "tempfile.mkdtemp", "os.path.abspath", "tensorflow.contrib.framework.get_or_create_global_step", "os.path.join", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.setUp", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "PipelineTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "self", ".", "output_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "self", ".", "bin_folder", "=", "os", ".", "path", ".", "abspath", "(", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"../../bin\"", ")", ")", "\n", "tf", ".", "contrib", ".", "framework", ".", "get_or_create_global_step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.pipeline_test.PipelineTest.tearDown": [[59, 62], ["shutil.rmtree", "super().tearDown"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.data_test.ParallelDataProviderTest.tearDown"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "    ", "shutil", ".", "rmtree", "(", "self", ".", "output_dir", ",", "ignore_errors", "=", "True", ")", "\n", "super", "(", "PipelineTest", ",", "self", ")", ".", "tearDown", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.pipeline_test.PipelineTest.test_train_infer": [[63, 237], ["seq2seq.test.utils.create_temp_parallel_data", "seq2seq.test.utils.create_temp_parallel_data", "seq2seq.test.utils.create_temporary_vocab_file", "seq2seq.test.utils.create_temporary_vocab_file", "pipeline_test._clear_flags", "tensorflow.reset_default_graph", "imp.load_source", "os.path.join", "tensorflow.logging.set_verbosity", "imp.load_source.main", "os.path.join", "pipeline_test.PipelineTest.assertTrue", "pipeline_test._clear_flags", "tensorflow.reset_default_graph", "imp.load_source", "os.path.join", "os.path.join", "imp.load_source.main", "pipeline_test.PipelineTest.assertTrue", "pipeline_test.PipelineTest.assertTrue", "numpy.load", "pipeline_test.PipelineTest.assertIn", "pipeline_test.PipelineTest.assertEqual", "pipeline_test.PipelineTest.assertIn", "pipeline_test.PipelineTest.assertEqual", "pipeline_test.PipelineTest.assertIn", "pipeline_test.PipelineTest.assertEqual", "pipeline_test.PipelineTest.assertIn", "pipeline_test.PipelineTest.assertEqual", "pipeline_test._clear_flags", "tensorflow.reset_default_graph", "imp.load_source", "os.path.join", "imp.load_source.main", "pipeline_test.PipelineTest.assertTrue", "os.path.join", "tensorflow.gfile.GFile", "yaml.dump", "os.path.exists", "os.path.join", "os.path.exists", "os.path.exists", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.utils.create_temp_parallel_data", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.utils.create_temp_parallel_data", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.utils.create_temporary_vocab_file", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.utils.create_temporary_vocab_file", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.pipeline_test._clear_flags", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.main", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.pipeline_test._clear_flags", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.main", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.pipeline_test._clear_flags", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.main", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.dump", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.exists", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.exists", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.exists", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.exists", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["", "def", "test_train_infer", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests training and inference scripts.\n    \"\"\"", "\n", "# Create dummy data", "\n", "sources_train", ",", "targets_train", "=", "test_utils", ".", "create_temp_parallel_data", "(", "\n", "sources", "=", "[", "\"a a a a\"", ",", "\"b b b b\"", ",", "\"c c c c\"", ",", "\"\u7b11 \u7b11 \u7b11 \u7b11\"", "]", ",", "\n", "targets", "=", "[", "\"b b b b\"", ",", "\"a a a a\"", ",", "\"c c c c\"", ",", "\"\u6ce3 \u6ce3 \u6ce3 \u6ce3\"", "]", ")", "\n", "sources_dev", ",", "targets_dev", "=", "test_utils", ".", "create_temp_parallel_data", "(", "\n", "sources", "=", "[", "\"a a\"", ",", "\"b b\"", ",", "\"c c c\"", ",", "\"\u7b11 \u7b11 \u7b11\"", "]", ",", "\n", "targets", "=", "[", "\"b b\"", ",", "\"a a\"", ",", "\"c c c\"", ",", "\"\u6ce3 \u6ce3 \u6ce3\"", "]", ")", "\n", "vocab_source", "=", "test_utils", ".", "create_temporary_vocab_file", "(", "[", "\"a\"", ",", "\"b\"", ",", "\"c\"", ",", "\"\u7b11\"", "]", ")", "\n", "vocab_target", "=", "test_utils", ".", "create_temporary_vocab_file", "(", "[", "\"a\"", ",", "\"b\"", ",", "\"c\"", ",", "\"\u6ce3\"", "]", ")", "\n", "\n", "_clear_flags", "(", ")", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "train_script", "=", "imp", ".", "load_source", "(", "\"seq2seq.test.train_bin\"", ",", "\n", "os", ".", "path", ".", "join", "(", "BIN_FOLDER", ",", "\"train.py\"", ")", ")", "\n", "\n", "# Set training flags", "\n", "tf", ".", "app", ".", "flags", ".", "FLAGS", ".", "output_dir", "=", "self", ".", "output_dir", "\n", "tf", ".", "app", ".", "flags", ".", "FLAGS", ".", "hooks", "=", "\"\"\"\n      - class: PrintModelAnalysisHook\n      - class: MetadataCaptureHook\n      - class: TrainSampleHook\n    \"\"\"", "\n", "tf", ".", "app", ".", "flags", ".", "FLAGS", ".", "metrics", "=", "\"\"\"\n      - class: LogPerplexityMetricSpec\n      - class: BleuMetricSpec\n      - class: RougeMetricSpec\n        params:\n          rouge_type: rouge_1/f_score\n    \"\"\"", "\n", "tf", ".", "app", ".", "flags", ".", "FLAGS", ".", "model", "=", "\"AttentionSeq2Seq\"", "\n", "tf", ".", "app", ".", "flags", ".", "FLAGS", ".", "model_params", "=", "\"\"\"\n    attention.params:\n      num_units: 10\n    vocab_source: {}\n    vocab_target: {}\n    \"\"\"", ".", "format", "(", "vocab_source", ".", "name", ",", "vocab_target", ".", "name", ")", "\n", "tf", ".", "app", ".", "flags", ".", "FLAGS", ".", "batch_size", "=", "2", "\n", "\n", "# We pass a few flags via a config file", "\n", "config_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\"train_config.yml\"", ")", "\n", "with", "gfile", ".", "GFile", "(", "config_path", ",", "\"w\"", ")", "as", "config_file", ":", "\n", "      ", "yaml", ".", "dump", "(", "{", "\n", "\"input_pipeline_train\"", ":", "{", "\n", "\"class\"", ":", "\"ParallelTextInputPipeline\"", ",", "\n", "\"params\"", ":", "{", "\n", "\"source_files\"", ":", "[", "sources_train", ".", "name", "]", ",", "\n", "\"target_files\"", ":", "[", "targets_train", ".", "name", "]", ",", "\n", "}", "\n", "}", ",", "\n", "\"input_pipeline_dev\"", ":", "{", "\n", "\"class\"", ":", "\"ParallelTextInputPipeline\"", ",", "\n", "\"params\"", ":", "{", "\n", "\"source_files\"", ":", "[", "sources_dev", ".", "name", "]", ",", "\n", "\"target_files\"", ":", "[", "targets_dev", ".", "name", "]", ",", "\n", "}", "\n", "}", ",", "\n", "\"train_steps\"", ":", "50", ",", "\n", "\"model_params\"", ":", "{", "\n", "\"embedding.dim\"", ":", "10", ",", "\n", "\"decoder.params\"", ":", "{", "\n", "\"rnn_cell\"", ":", "{", "\n", "\"cell_class\"", ":", "\"GRUCell\"", ",", "\n", "\"cell_params\"", ":", "{", "\n", "\"num_units\"", ":", "8", "\n", "}", "\n", "}", "\n", "}", ",", "\n", "\"encoder.params\"", ":", "{", "\n", "\"rnn_cell\"", ":", "{", "\n", "\"cell_class\"", ":", "\"GRUCell\"", ",", "\n", "\"cell_params\"", ":", "{", "\n", "\"num_units\"", ":", "8", "\n", "}", "\n", "}", "\n", "}", "\n", "}", "\n", "}", ",", "config_file", ")", "\n", "\n", "", "tf", ".", "app", ".", "flags", ".", "FLAGS", ".", "config_paths", "=", "config_path", "\n", "\n", "# Run training", "\n", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "train_script", ".", "main", "(", "[", "]", ")", "\n", "\n", "# Make sure a checkpoint was written", "\n", "expected_checkpoint", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\n", "\"model.ckpt-50.data-00000-of-00001\"", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "exists", "(", "expected_checkpoint", ")", ")", "\n", "\n", "# Reset flags and import inference script", "\n", "_clear_flags", "(", ")", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "infer_script", "=", "imp", ".", "load_source", "(", "\"seq2seq.test.infer_bin\"", ",", "\n", "os", ".", "path", ".", "join", "(", "BIN_FOLDER", ",", "\"infer.py\"", ")", ")", "\n", "\n", "# Set inference flags", "\n", "attention_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\"att\"", ")", "\n", "tf", ".", "app", ".", "flags", ".", "FLAGS", ".", "model_dir", "=", "self", ".", "output_dir", "\n", "tf", ".", "app", ".", "flags", ".", "FLAGS", ".", "input_pipeline", "=", "\"\"\"\n      class: ParallelTextInputPipeline\n      params:\n        source_files:\n          - {}\n        target_files:\n          - {}\n    \"\"\"", ".", "format", "(", "sources_dev", ".", "name", ",", "targets_dev", ".", "name", ")", "\n", "tf", ".", "app", ".", "flags", ".", "FLAGS", ".", "batch_size", "=", "2", "\n", "tf", ".", "app", ".", "flags", ".", "FLAGS", ".", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\n", "\"model.ckpt-50\"", ")", "\n", "\n", "# Use DecodeText Task", "\n", "tf", ".", "app", ".", "flags", ".", "FLAGS", ".", "tasks", "=", "\"\"\"\n    - class: DecodeText\n    - class: DumpAttention\n      params:\n        output_dir: {}\n    \"\"\"", ".", "format", "(", "attention_dir", ")", "\n", "\n", "# Make sure inference runs successfully", "\n", "infer_script", ".", "main", "(", "[", "]", ")", "\n", "\n", "# Make sure attention scores and visualizations exist", "\n", "self", ".", "assertTrue", "(", "\n", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "attention_dir", ",", "\"attention_scores.npz\"", ")", ")", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "attention_dir", ",", "\"00002.png\"", ")", ")", ")", "\n", "\n", "# Load attention scores and assert shape", "\n", "scores", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "attention_dir", ",", "\"attention_scores.npz\"", ")", ")", "\n", "self", ".", "assertIn", "(", "\"arr_0\"", ",", "scores", ")", "\n", "self", ".", "assertEqual", "(", "scores", "[", "\"arr_0\"", "]", ".", "shape", "[", "1", "]", ",", "3", ")", "\n", "self", ".", "assertIn", "(", "\"arr_1\"", ",", "scores", ")", "\n", "self", ".", "assertEqual", "(", "scores", "[", "\"arr_1\"", "]", ".", "shape", "[", "1", "]", ",", "3", ")", "\n", "self", ".", "assertIn", "(", "\"arr_2\"", ",", "scores", ")", "\n", "self", ".", "assertEqual", "(", "scores", "[", "\"arr_2\"", "]", ".", "shape", "[", "1", "]", ",", "4", ")", "\n", "self", ".", "assertIn", "(", "\"arr_3\"", ",", "scores", ")", "\n", "self", ".", "assertEqual", "(", "scores", "[", "\"arr_3\"", "]", ".", "shape", "[", "1", "]", ",", "4", ")", "\n", "\n", "# Test inference with beam search", "\n", "_clear_flags", "(", ")", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "infer_script", "=", "imp", ".", "load_source", "(", "\"seq2seq.test.infer_bin\"", ",", "\n", "os", ".", "path", ".", "join", "(", "BIN_FOLDER", ",", "\"infer.py\"", ")", ")", "\n", "\n", "# Set inference flags", "\n", "tf", ".", "app", ".", "flags", ".", "FLAGS", ".", "model_dir", "=", "self", ".", "output_dir", "\n", "tf", ".", "app", ".", "flags", ".", "FLAGS", ".", "input_pipeline", "=", "\"\"\"\n      class: ParallelTextInputPipeline\n      params:\n        source_files:\n          - {}\n        target_files:\n          - {}\n    \"\"\"", ".", "format", "(", "sources_dev", ".", "name", ",", "targets_dev", ".", "name", ")", "\n", "tf", ".", "app", ".", "flags", ".", "FLAGS", ".", "batch_size", "=", "2", "\n", "tf", ".", "app", ".", "flags", ".", "FLAGS", ".", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\n", "\"model.ckpt-50\"", ")", "\n", "tf", ".", "app", ".", "flags", ".", "FLAGS", ".", "model_params", "=", "\"\"\"\n      inference.beam_search.beam_width: 5\n    \"\"\"", "\n", "tf", ".", "app", ".", "flags", ".", "FLAGS", ".", "tasks", "=", "\"\"\"\n    - class: DecodeText\n      params:\n        postproc_fn: seq2seq.data.postproc.decode_sentencepiece\n    - class: DumpBeams\n      params:\n        file: {}\n    \"\"\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\"beams.npz\"", ")", ")", "\n", "\n", "# Run inference w/ beam search", "\n", "infer_script", ".", "main", "(", "[", "]", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\"beams.npz\"", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.pipeline_test._clear_flags": [[41, 46], ["tensorflow.app.flags._FlagValues", "argparse.ArgumentParser"], "function", ["None"], ["def", "_clear_flags", "(", ")", ":", "\n", "  ", "\"\"\"Resets Tensorflow's FLAG values\"\"\"", "\n", "#pylint: disable=W0212", "\n", "tf", ".", "app", ".", "flags", ".", "FLAGS", "=", "tf", ".", "app", ".", "flags", ".", "_FlagValues", "(", ")", "\n", "tf", ".", "app", ".", "flags", ".", "_global_parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.conv_encoder_test.ConvEncoderTest.setUp": [[34, 40], ["super().setUp"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.setUp"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "ConvEncoderTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "self", ".", "batch_size", "=", "4", "\n", "self", ".", "sequence_length", "=", "16", "\n", "self", ".", "input_depth", "=", "10", "\n", "self", ".", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.conv_encoder_test.ConvEncoderTest._test_with_params": [[41, 67], ["tensorflow.random_normal", "seq2seq.encoders.ConvEncoder", "seq2seq.encoders.ConvEncoder.", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "tensorflow.ones", "conv_encoder_test.ConvEncoderTest.test_session", "sess.run", "sess.run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "def", "_test_with_params", "(", "self", ",", "params", ")", ":", "\n", "    ", "\"\"\"Tests the encoder with a given parameter configuration\"\"\"", "\n", "inputs", "=", "tf", ".", "random_normal", "(", "\n", "[", "self", ".", "batch_size", ",", "self", ".", "sequence_length", ",", "self", ".", "input_depth", "]", ")", "\n", "example_length", "=", "tf", ".", "ones", "(", "\n", "self", ".", "batch_size", ",", "dtype", "=", "tf", ".", "int32", ")", "*", "self", ".", "sequence_length", "\n", "\n", "encode_fn", "=", "ConvEncoder", "(", "params", ",", "self", ".", "mode", ")", "\n", "encoder_output", "=", "encode_fn", "(", "inputs", ",", "example_length", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "encoder_output_", "=", "sess", ".", "run", "(", "encoder_output", ")", "\n", "\n", "", "att_value_units", "=", "encode_fn", ".", "params", "[", "\"attention_cnn.units\"", "]", "\n", "output_units", "=", "encode_fn", ".", "params", "[", "\"output_cnn.units\"", "]", "\n", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "encoder_output_", ".", "outputs", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "self", ".", "sequence_length", ",", "att_value_units", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "encoder_output_", ".", "attention_values", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "self", ".", "sequence_length", ",", "output_units", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "encoder_output_", ".", "final_state", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "output_units", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.conv_encoder_test.ConvEncoderTest.test_encode_with_pos": [[68, 74], ["conv_encoder_test.ConvEncoderTest._test_with_params"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.pooling_encoder_test.PoolingEncoderTest._test_with_params"], ["", "def", "test_encode_with_pos", "(", "self", ")", ":", "\n", "    ", "self", ".", "_test_with_params", "(", "{", "\n", "\"position_embeddings.enable\"", ":", "True", ",", "\n", "\"position_embeddings.num_positions\"", ":", "self", ".", "sequence_length", ",", "\n", "\"attention_cnn.units\"", ":", "5", ",", "\n", "\"output_cnn.units\"", ":", "6", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.vocab_test.VocabInfoTest.setUp": [[34, 39], ["super().setUp", "tensorflow.logging.set_verbosity", "seq2seq.test.utils.create_temporary_vocab_file"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.setUp", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.utils.create_temporary_vocab_file"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "VocabInfoTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "self", ".", "vocab_list", "=", "[", "\"Hello\"", ",", "\".\"", ",", "\"Bye\"", "]", "\n", "self", ".", "vocab_file", "=", "test_utils", ".", "create_temporary_vocab_file", "(", "self", ".", "vocab_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.vocab_test.VocabInfoTest.tearDown": [[40, 43], ["super().tearDown", "vocab_test.VocabInfoTest.vocab_file.close"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.data_test.ParallelDataProviderTest.tearDown", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "    ", "super", "(", "VocabInfoTest", ",", "self", ")", ".", "tearDown", "(", ")", "\n", "self", ".", "vocab_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.vocab_test.VocabInfoTest.test_vocab_info": [[44, 52], ["seq2seq.data.vocab.get_vocab_info", "vocab_test.VocabInfoTest.assertEqual", "vocab_test.VocabInfoTest.assertEqual", "vocab_test.VocabInfoTest.assertEqual", "vocab_test.VocabInfoTest.assertEqual", "vocab_test.VocabInfoTest.assertEqual", "vocab_test.VocabInfoTest.assertEqual"], "methods", ["None"], ["", "def", "test_vocab_info", "(", "self", ")", ":", "\n", "    ", "vocab_info", "=", "vocab", ".", "get_vocab_info", "(", "self", ".", "vocab_file", ".", "name", ")", "\n", "self", ".", "assertEqual", "(", "vocab_info", ".", "vocab_size", ",", "3", ")", "\n", "self", ".", "assertEqual", "(", "vocab_info", ".", "path", ",", "self", ".", "vocab_file", ".", "name", ")", "\n", "self", ".", "assertEqual", "(", "vocab_info", ".", "special_vocab", ".", "UNK", ",", "3", ")", "\n", "self", ".", "assertEqual", "(", "vocab_info", ".", "special_vocab", ".", "SEQUENCE_START", ",", "4", ")", "\n", "self", ".", "assertEqual", "(", "vocab_info", ".", "special_vocab", ".", "SEQUENCE_END", ",", "5", ")", "\n", "self", ".", "assertEqual", "(", "vocab_info", ".", "total_size", ",", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.vocab_test.CreateVocabularyLookupTableTest.test_without_counts": [[59, 85], ["seq2seq.test.utils.create_temporary_vocab_file", "seq2seq.data.vocab.create_vocabulary_lookup_table", "vocab_test.CreateVocabularyLookupTableTest.assertEqual", "vocab_test.CreateVocabularyLookupTableTest.test_session", "sess.run", "sess.run", "sess.run", "vocab_to_id_table.lookup", "sess.run", "numpy.testing.assert_array_equal", "id_to_vocab_table.lookup", "sess.run", "numpy.testing.assert_array_equal", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "tensorflow.tables_initializer", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "numpy.char.decode", "sess.run.astype"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.utils.create_temporary_vocab_file", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode"], ["def", "test_without_counts", "(", "self", ")", ":", "\n", "    ", "vocab_list", "=", "[", "\"Hello\"", ",", "\".\"", ",", "\"\u7b11\"", "]", "\n", "vocab_file", "=", "test_utils", ".", "create_temporary_vocab_file", "(", "vocab_list", ")", "\n", "\n", "vocab_to_id_table", ",", "id_to_vocab_table", ",", "_", ",", "vocab_size", "=", "vocab", ".", "create_vocabulary_lookup_table", "(", "vocab_file", ".", "name", ")", "\n", "\n", "self", ".", "assertEqual", "(", "vocab_size", ",", "6", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "tables_initializer", "(", ")", ")", "\n", "\n", "ids", "=", "vocab_to_id_table", ".", "lookup", "(", "\n", "tf", ".", "convert_to_tensor", "(", "[", "\"Hello\"", ",", "\".\"", ",", "\"\u7b11\"", ",", "\"??\"", ",", "\"xxx\"", "]", ")", ")", "\n", "ids", "=", "sess", ".", "run", "(", "ids", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "ids", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "3", "]", ")", "\n", "\n", "words", "=", "id_to_vocab_table", ".", "lookup", "(", "\n", "tf", ".", "convert_to_tensor", "(", "\n", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "dtype", "=", "tf", ".", "int64", ")", ")", "\n", "words", "=", "sess", ".", "run", "(", "words", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "np", ".", "char", ".", "decode", "(", "words", ".", "astype", "(", "\"S\"", ")", ",", "\"utf-8\"", ")", ",", "\n", "[", "\"Hello\"", ",", "\".\"", ",", "\"\u7b11\"", ",", "\"UNK\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.vocab_test.CreateVocabularyLookupTableTest.test_with_counts": [[86, 119], ["seq2seq.test.utils.create_temporary_vocab_file", "seq2seq.data.vocab.create_vocabulary_lookup_table", "vocab_test.CreateVocabularyLookupTableTest.assertEqual", "vocab_test.CreateVocabularyLookupTableTest.test_session", "sess.run", "sess.run", "sess.run", "vocab_to_id_table.lookup", "sess.run", "numpy.testing.assert_array_equal", "id_to_vocab_table.lookup", "sess.run", "numpy.testing.assert_array_equal", "word_to_count_table.lookup", "sess.run", "numpy.testing.assert_array_equal", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "tensorflow.tables_initializer", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "numpy.char.decode", "tensorflow.convert_to_tensor", "sess.run.astype"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.utils.create_temporary_vocab_file", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode"], ["", "", "def", "test_with_counts", "(", "self", ")", ":", "\n", "    ", "vocab_list", "=", "[", "\"Hello\"", ",", "\".\"", ",", "\"\u7b11\"", "]", "\n", "vocab_counts", "=", "[", "100", ",", "200", ",", "300", "]", "\n", "vocab_file", "=", "test_utils", ".", "create_temporary_vocab_file", "(", "vocab_list", ",", "\n", "vocab_counts", ")", "\n", "\n", "vocab_to_id_table", ",", "id_to_vocab_table", ",", "word_to_count_table", ",", "vocab_size", "=", "vocab", ".", "create_vocabulary_lookup_table", "(", "vocab_file", ".", "name", ")", "\n", "\n", "self", ".", "assertEqual", "(", "vocab_size", ",", "6", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "tables_initializer", "(", ")", ")", "\n", "\n", "ids", "=", "vocab_to_id_table", ".", "lookup", "(", "\n", "tf", ".", "convert_to_tensor", "(", "[", "\"Hello\"", ",", "\".\"", ",", "\"\u7b11\"", ",", "\"??\"", ",", "\"xxx\"", "]", ")", ")", "\n", "ids", "=", "sess", ".", "run", "(", "ids", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "ids", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "3", "]", ")", "\n", "\n", "words", "=", "id_to_vocab_table", ".", "lookup", "(", "\n", "tf", ".", "convert_to_tensor", "(", "\n", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "dtype", "=", "tf", ".", "int64", ")", ")", "\n", "words", "=", "sess", ".", "run", "(", "words", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "np", ".", "char", ".", "decode", "(", "words", ".", "astype", "(", "\"S\"", ")", ",", "\"utf-8\"", ")", ",", "\n", "[", "\"Hello\"", ",", "\".\"", ",", "\"\u7b11\"", ",", "\"UNK\"", "]", ")", "\n", "\n", "counts", "=", "word_to_count_table", ".", "lookup", "(", "\n", "tf", ".", "convert_to_tensor", "(", "[", "\"Hello\"", ",", "\".\"", ",", "\"\u7b11\"", ",", "\"??\"", ",", "\"xxx\"", "]", ")", ")", "\n", "counts", "=", "sess", ".", "run", "(", "counts", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "counts", ",", "[", "100", ",", "200", ",", "300", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_cell_test.ExtendedMultiRNNCellTest.test_without_residuals": [[33, 55], ["tensorflow.constant", "rnn_cell_test.ExtendedMultiRNNCellTest.assertAllClose", "rnn_cell_test.ExtendedMultiRNNCellTest.assertAllClose", "rnn_cell_test.ExtendedMultiRNNCellTest.assertAllClose", "numpy.random.randn", "tensorflow.constant", "tensorflow.constant", "tensorflow.variable_scope", "tensorflow.contrib.rnn.MultiRNNCell", "tensorflow.contrib.rnn.MultiRNNCell.", "seq2seq.contrib.rnn_cell.ExtendedMultiRNNCell", "seq2seq.contrib.rnn_cell.ExtendedMultiRNNCell.", "rnn_cell_test.ExtendedMultiRNNCellTest.test_session", "sess.run", "sess.run", "numpy.random.randn", "numpy.random.randn", "tensorflow.constant_initializer", "tensorflow.contrib.rnn.GRUCell", "tensorflow.contrib.rnn.GRUCell", "tensorflow.global_variables_initializer", "range", "range"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["def", "test_without_residuals", "(", "self", ")", ":", "\n", "    ", "inputs", "=", "tf", ".", "constant", "(", "np", ".", "random", ".", "randn", "(", "1", ",", "2", ")", ")", "\n", "state", "=", "(", "tf", ".", "constant", "(", "np", ".", "random", ".", "randn", "(", "1", ",", "2", ")", ")", ",", "\n", "tf", ".", "constant", "(", "np", ".", "random", ".", "randn", "(", "1", ",", "2", ")", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"root\"", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.5", ")", ")", ":", "\n", "      ", "standard_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "MultiRNNCell", "(", "\n", "[", "tf", ".", "contrib", ".", "rnn", ".", "GRUCell", "(", "2", ")", "for", "_", "in", "range", "(", "2", ")", "]", ",", "state_is_tuple", "=", "True", ")", "\n", "res_standard", "=", "standard_cell", "(", "inputs", ",", "state", ",", "scope", "=", "\"standard\"", ")", "\n", "\n", "test_cell", "=", "rnn_cell", ".", "ExtendedMultiRNNCell", "(", "\n", "[", "tf", ".", "contrib", ".", "rnn", ".", "GRUCell", "(", "2", ")", "for", "_", "in", "range", "(", "2", ")", "]", ")", "\n", "res_test", "=", "test_cell", "(", "inputs", ",", "state", ",", "scope", "=", "\"test\"", ")", "\n", "\n", "", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "[", "tf", ".", "global_variables_initializer", "(", ")", "]", ")", "\n", "res_standard_", ",", "res_test_", ",", "=", "sess", ".", "run", "(", "[", "res_standard", ",", "res_test", "]", ")", "\n", "\n", "# Make sure it produces the same results as the standard cell", "\n", "", "self", ".", "assertAllClose", "(", "res_standard_", "[", "0", "]", ",", "res_test_", "[", "0", "]", ")", "\n", "self", ".", "assertAllClose", "(", "res_standard_", "[", "1", "]", "[", "0", "]", ",", "res_test_", "[", "1", "]", "[", "0", "]", ")", "\n", "self", ".", "assertAllClose", "(", "res_standard_", "[", "1", "]", "[", "1", "]", ",", "res_test_", "[", "1", "]", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_cell_test.ExtendedMultiRNNCellTest._test_with_residuals": [[56, 72], ["tensorflow.convert_to_tensor", "tensorflow.constant", "tensorflow.constant", "tensorflow.variable_scope", "seq2seq.contrib.rnn_cell.ExtendedMultiRNNCell", "seq2seq.contrib.rnn_cell.ExtendedMultiRNNCell.", "rnn_cell_test.ExtendedMultiRNNCellTest.test_session", "sess.run", "sess.run", "numpy.random.randn", "numpy.random.randn", "tensorflow.constant_initializer", "tensorflow.contrib.rnn.GRUCell", "tensorflow.global_variables_initializer", "range"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "def", "_test_with_residuals", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Runs the cell in a session\"\"\"", "\n", "inputs", "=", "tf", ".", "convert_to_tensor", "(", "inputs", ")", "\n", "state", "=", "(", "tf", ".", "constant", "(", "np", ".", "random", ".", "randn", "(", "1", ",", "2", ")", ")", ",", "\n", "tf", ".", "constant", "(", "np", ".", "random", ".", "randn", "(", "1", ",", "2", ")", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"root\"", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.5", ")", ")", ":", "\n", "      ", "test_cell", "=", "rnn_cell", ".", "ExtendedMultiRNNCell", "(", "\n", "[", "tf", ".", "contrib", ".", "rnn", ".", "GRUCell", "(", "2", ")", "for", "_", "in", "range", "(", "2", ")", "]", ",", "\n", "residual_connections", "=", "True", ",", "\n", "**", "kwargs", ")", "\n", "res_test", "=", "test_cell", "(", "inputs", ",", "state", ",", "scope", "=", "\"test\"", ")", "\n", "\n", "", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "[", "tf", ".", "global_variables_initializer", "(", ")", "]", ")", "\n", "return", "sess", ".", "run", "(", "res_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_cell_test.ExtendedMultiRNNCellTest._test_constant_shape": [[73, 104], ["numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "tensorflow.variable_scope", "rnn_cell_test.ExtendedMultiRNNCellTest._test_with_residuals", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual", "tensorflow.variable_scope", "rnn_cell_test.ExtendedMultiRNNCellTest._test_with_residuals", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual", "tensorflow.variable_scope", "rnn_cell_test.ExtendedMultiRNNCellTest._test_with_residuals", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual", "tensorflow.variable_scope", "rnn_cell_test.ExtendedMultiRNNCellTest._test_with_residuals", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_cell_test.ExtendedMultiRNNCellTest._test_with_residuals", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_cell_test.ExtendedMultiRNNCellTest._test_with_residuals", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_cell_test.ExtendedMultiRNNCellTest._test_with_residuals", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_cell_test.ExtendedMultiRNNCellTest._test_with_residuals"], ["", "", "def", "_test_constant_shape", "(", "self", ",", "combiner", ")", ":", "\n", "    ", "\"\"\"Tests a residual combiner whose shape doesn't change\n    with depth\"\"\"", "\n", "inputs", "=", "np", ".", "random", ".", "randn", "(", "1", ",", "2", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"same_input_size\"", ")", ":", "\n", "      ", "res_", "=", "self", ".", "_test_with_residuals", "(", "inputs", ",", "residual_combiner", "=", "combiner", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "0", "]", ".", "shape", ",", "(", "1", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "1", "]", "[", "0", "]", ".", "shape", ",", "(", "1", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "1", "]", "[", "1", "]", ".", "shape", ",", "(", "1", ",", "2", ")", ")", "\n", "\n", "", "inputs", "=", "np", ".", "random", ".", "randn", "(", "1", ",", "5", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"diff_input_size\"", ")", ":", "\n", "      ", "res_", "=", "self", ".", "_test_with_residuals", "(", "inputs", ",", "residual_combiner", "=", "combiner", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "0", "]", ".", "shape", ",", "(", "1", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "1", "]", "[", "0", "]", ".", "shape", ",", "(", "1", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "1", "]", "[", "1", "]", ".", "shape", ",", "(", "1", ",", "2", ")", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"same_input_size_dense\"", ")", ":", "\n", "      ", "res_", "=", "self", ".", "_test_with_residuals", "(", "\n", "inputs", ",", "residual_combiner", "=", "combiner", ",", "residual_dense", "=", "True", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "0", "]", ".", "shape", ",", "(", "1", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "1", "]", "[", "0", "]", ".", "shape", ",", "(", "1", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "1", "]", "[", "1", "]", ".", "shape", ",", "(", "1", ",", "2", ")", ")", "\n", "\n", "", "inputs", "=", "np", ".", "random", ".", "randn", "(", "1", ",", "5", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"diff_input_size_dense\"", ")", ":", "\n", "      ", "res_", "=", "self", ".", "_test_with_residuals", "(", "\n", "inputs", ",", "residual_combiner", "=", "combiner", ",", "residual_dense", "=", "True", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "0", "]", ".", "shape", ",", "(", "1", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "1", "]", "[", "0", "]", ".", "shape", ",", "(", "1", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "1", "]", "[", "1", "]", ".", "shape", ",", "(", "1", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_cell_test.ExtendedMultiRNNCellTest.test_residuals_mean": [[105, 107], ["rnn_cell_test.ExtendedMultiRNNCellTest._test_constant_shape"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_cell_test.ExtendedMultiRNNCellTest._test_constant_shape"], ["", "", "def", "test_residuals_mean", "(", "self", ")", ":", "\n", "    ", "self", ".", "_test_constant_shape", "(", "combiner", "=", "\"mean\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_cell_test.ExtendedMultiRNNCellTest.test_residuals_add": [[108, 110], ["rnn_cell_test.ExtendedMultiRNNCellTest._test_constant_shape"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_cell_test.ExtendedMultiRNNCellTest._test_constant_shape"], ["", "def", "test_residuals_add", "(", "self", ")", ":", "\n", "    ", "self", ".", "_test_constant_shape", "(", "combiner", "=", "\"add\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_cell_test.ExtendedMultiRNNCellTest.test_residuals_concat": [[111, 141], ["numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "tensorflow.variable_scope", "rnn_cell_test.ExtendedMultiRNNCellTest._test_with_residuals", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual", "tensorflow.variable_scope", "rnn_cell_test.ExtendedMultiRNNCellTest._test_with_residuals", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual", "tensorflow.variable_scope", "rnn_cell_test.ExtendedMultiRNNCellTest._test_with_residuals", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual", "tensorflow.variable_scope", "rnn_cell_test.ExtendedMultiRNNCellTest._test_with_residuals", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual", "rnn_cell_test.ExtendedMultiRNNCellTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_cell_test.ExtendedMultiRNNCellTest._test_with_residuals", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_cell_test.ExtendedMultiRNNCellTest._test_with_residuals", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_cell_test.ExtendedMultiRNNCellTest._test_with_residuals", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_cell_test.ExtendedMultiRNNCellTest._test_with_residuals"], ["", "def", "test_residuals_concat", "(", "self", ")", ":", "\n", "    ", "inputs", "=", "np", ".", "random", ".", "randn", "(", "1", ",", "2", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"same_input_size\"", ")", ":", "\n", "      ", "res_", "=", "self", ".", "_test_with_residuals", "(", "inputs", ",", "residual_combiner", "=", "\"concat\"", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "0", "]", ".", "shape", ",", "(", "1", ",", "6", ")", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "1", "]", "[", "0", "]", ".", "shape", ",", "(", "1", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "1", "]", "[", "1", "]", ".", "shape", ",", "(", "1", ",", "2", ")", ")", "\n", "\n", "", "inputs", "=", "np", ".", "random", ".", "randn", "(", "1", ",", "5", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"diff_input_size\"", ")", ":", "\n", "      ", "res_", "=", "self", ".", "_test_with_residuals", "(", "inputs", ",", "residual_combiner", "=", "\"concat\"", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "0", "]", ".", "shape", ",", "(", "1", ",", "5", "+", "2", "+", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "1", "]", "[", "0", "]", ".", "shape", ",", "(", "1", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "1", "]", "[", "1", "]", ".", "shape", ",", "(", "1", ",", "2", ")", ")", "\n", "\n", "", "inputs", "=", "np", ".", "random", ".", "randn", "(", "1", ",", "2", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"same_input_size_dense\"", ")", ":", "\n", "      ", "res_", "=", "self", ".", "_test_with_residuals", "(", "\n", "inputs", ",", "residual_combiner", "=", "\"concat\"", ",", "residual_dense", "=", "True", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "0", "]", ".", "shape", ",", "(", "1", ",", "2", "+", "4", "+", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "1", "]", "[", "0", "]", ".", "shape", ",", "(", "1", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "1", "]", "[", "1", "]", ".", "shape", ",", "(", "1", ",", "2", ")", ")", "\n", "\n", "", "inputs", "=", "np", ".", "random", ".", "randn", "(", "1", ",", "5", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"diff_input_size_dense\"", ")", ":", "\n", "      ", "res_", "=", "self", ".", "_test_with_residuals", "(", "\n", "inputs", ",", "residual_combiner", "=", "\"concat\"", ",", "residual_dense", "=", "True", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "0", "]", ".", "shape", ",", "(", "1", ",", "2", "+", "(", "5", "+", "2", ")", "+", "5", ")", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "1", "]", "[", "0", "]", ".", "shape", ",", "(", "1", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "res_", "[", "1", "]", "[", "1", "]", ".", "shape", ",", "(", "1", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.hooks_test.TestPrintModelAnalysisHook.test_begin": [[39, 53], ["tempfile.mkdtemp", "tempfile.NamedTemporaryFile", "tensorflow.get_variable", "seq2seq.training.hooks.PrintModelAnalysisHook", "seq2seq.training.hooks.PrintModelAnalysisHook.begin", "hooks_test.TestPrintModelAnalysisHook.assertEqual", "tempfile.NamedTemporaryFile.close", "tensorflow.gfile.GFile", "file.read().strip", "file.read().strip.decode", "tensorflow.contrib.learn.RunConfig", "os.path.join", "file.read"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.inference_task.InferenceTask.begin", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.read"], ["def", "test_begin", "(", "self", ")", ":", "\n", "    ", "model_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "outfile", "=", "tempfile", ".", "NamedTemporaryFile", "(", ")", "\n", "tf", ".", "get_variable", "(", "\"weigths\"", ",", "[", "128", ",", "128", "]", ")", "\n", "hook", "=", "hooks", ".", "PrintModelAnalysisHook", "(", "\n", "params", "=", "{", "}", ",", "model_dir", "=", "model_dir", ",", "run_config", "=", "tf", ".", "contrib", ".", "learn", ".", "RunConfig", "(", ")", ")", "\n", "hook", ".", "begin", "(", ")", "\n", "\n", "with", "gfile", ".", "GFile", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"model_analysis.txt\"", ")", ")", "as", "file", ":", "\n", "      ", "file_contents", "=", "file", ".", "read", "(", ")", ".", "strip", "(", ")", "\n", "\n", "", "self", ".", "assertEqual", "(", "file_contents", ".", "decode", "(", ")", ",", "\"_TFProfRoot (--/16.38k params)\\n\"", "\n", "\"  weigths (128x128, 16.38k/16.38k params)\"", ")", "\n", "outfile", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.hooks_test.TestTrainSampleHook.setUp": [[59, 70], ["super().setUp", "tempfile.mkdtemp", "os.path.join", "tensorflow.constant", "tensorflow.constant", "seq2seq.graph_utils.add_dict_to_collection", "tensorflow.constant"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.setUp", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.add_dict_to_collection"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "TestTrainSampleHook", ",", "self", ")", ".", "setUp", "(", ")", "\n", "self", ".", "model_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "self", ".", "sample_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "\"samples\"", ")", "\n", "\n", "# The hook expects these collections to be in the graph", "\n", "pred_dict", "=", "{", "}", "\n", "pred_dict", "[", "\"predicted_tokens\"", "]", "=", "tf", ".", "constant", "(", "[", "[", "\"Hello\"", ",", "\"World\"", ",", "\"\u7b11w\"", "]", "]", ")", "\n", "pred_dict", "[", "\"labels.target_tokens\"", "]", "=", "tf", ".", "constant", "(", "[", "[", "\"Hello\"", ",", "\"World\"", ",", "\"\u7b11w\"", "]", "]", ")", "\n", "pred_dict", "[", "\"labels.target_len\"", "]", "=", "tf", ".", "constant", "(", "2", ")", ",", "\n", "graph_utils", ".", "add_dict_to_collection", "(", "pred_dict", ",", "\"predictions\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.hooks_test.TestTrainSampleHook.tearDown": [[71, 74], ["super().tearDown", "shutil.rmtree"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.data_test.ParallelDataProviderTest.tearDown"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "    ", "super", "(", "TestTrainSampleHook", ",", "self", ")", ".", "tearDown", "(", ")", "\n", "shutil", ".", "rmtree", "(", "self", ".", "model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.hooks_test.TestTrainSampleHook.test_sampling": [[75, 112], ["seq2seq.training.hooks.TrainSampleHook", "tensorflow.contrib.framework.get_or_create_global_step", "tensorflow.no_op", "seq2seq.training.hooks.TrainSampleHook.begin", "hooks_test.TestTrainSampleHook.test_session", "sess.run", "sess.run", "sess.run", "tensorflow.python.training.monitored_session._HookedSession", "sess.run", "tensorflow.python.training.monitored_session._HookedSession.run", "os.path.join", "sess.run", "tensorflow.python.training.monitored_session._HookedSession.run", "os.path.join", "hooks_test.TestTrainSampleHook.assertFalse", "sess.run", "tensorflow.python.training.monitored_session._HookedSession.run", "os.path.join", "tensorflow.contrib.learn.RunConfig", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "tensorflow.tables_initializer", "tensorflow.assign", "open", "hooks_test.TestTrainSampleHook.assertIn", "tensorflow.assign", "os.path.exists", "tensorflow.assign", "open", "hooks_test.TestTrainSampleHook.assertIn", "readfile.read().decode", "readfile.read().decode", "readfile.read", "readfile.read"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.inference_task.InferenceTask.begin", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.exists", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.read", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.read"], ["", "def", "test_sampling", "(", "self", ")", ":", "\n", "    ", "hook", "=", "hooks", ".", "TrainSampleHook", "(", "\n", "params", "=", "{", "\"every_n_steps\"", ":", "10", "}", ",", "model_dir", "=", "self", ".", "model_dir", ",", "\n", "run_config", "=", "tf", ".", "contrib", ".", "learn", ".", "RunConfig", "(", ")", ")", "\n", "\n", "global_step", "=", "tf", ".", "contrib", ".", "framework", ".", "get_or_create_global_step", "(", ")", "\n", "no_op", "=", "tf", ".", "no_op", "(", ")", "\n", "hook", ".", "begin", "(", ")", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "tables_initializer", "(", ")", ")", "\n", "\n", "#pylint: disable=W0212", "\n", "mon_sess", "=", "monitored_session", ".", "_HookedSession", "(", "sess", ",", "[", "hook", "]", ")", "\n", "# Should trigger for step 0", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "global_step", ",", "0", ")", ")", "\n", "mon_sess", ".", "run", "(", "no_op", ")", "\n", "\n", "outfile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "sample_dir", ",", "\"samples_000000.txt\"", ")", "\n", "with", "open", "(", "outfile", ",", "\"rb\"", ")", "as", "readfile", ":", "\n", "        ", "self", ".", "assertIn", "(", "\"Prediction followed by Target @ Step 0\"", ",", "\n", "readfile", ".", "read", "(", ")", ".", "decode", "(", "\"utf-8\"", ")", ")", "\n", "\n", "# Should not trigger for step 9", "\n", "", "sess", ".", "run", "(", "tf", ".", "assign", "(", "global_step", ",", "9", ")", ")", "\n", "mon_sess", ".", "run", "(", "no_op", ")", "\n", "outfile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "sample_dir", ",", "\"samples_000009.txt\"", ")", "\n", "self", ".", "assertFalse", "(", "os", ".", "path", ".", "exists", "(", "outfile", ")", ")", "\n", "\n", "# Should trigger for step 10", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "global_step", ",", "10", ")", ")", "\n", "mon_sess", ".", "run", "(", "no_op", ")", "\n", "outfile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "sample_dir", ",", "\"samples_000010.txt\"", ")", "\n", "with", "open", "(", "outfile", ",", "\"rb\"", ")", "as", "readfile", ":", "\n", "        ", "self", ".", "assertIn", "(", "\"Prediction followed by Target @ Step 10\"", ",", "\n", "readfile", ".", "read", "(", ")", ".", "decode", "(", "\"utf-8\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.hooks_test.TestMetadataCaptureHook.setUp": [[117, 120], ["super().setUp", "tempfile.mkdtemp"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.setUp"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "TestMetadataCaptureHook", ",", "self", ")", ".", "setUp", "(", ")", "\n", "self", ".", "model_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.hooks_test.TestMetadataCaptureHook.tearDown": [[121, 124], ["super().tearDown", "shutil.rmtree"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.data_test.ParallelDataProviderTest.tearDown"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "    ", "super", "(", "TestMetadataCaptureHook", ",", "self", ")", ".", "tearDown", "(", ")", "\n", "shutil", ".", "rmtree", "(", "self", ".", "model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.hooks_test.TestMetadataCaptureHook.test_capture": [[125, 152], ["tensorflow.contrib.framework.get_or_create_global_step", "tensorflow.get_variable", "tensorflow.nn.softmax", "seq2seq.training.hooks.MetadataCaptureHook", "seq2seq.training.hooks.MetadataCaptureHook.begin", "hooks_test.TestMetadataCaptureHook.test_session", "sess.run", "tensorflow.python.training.monitored_session._HookedSession", "sess.run", "tensorflow.python.training.monitored_session._HookedSession.run", "hooks_test.TestMetadataCaptureHook.assertEqual", "sess.run", "tensorflow.python.training.monitored_session._HookedSession.run", "hooks_test.TestMetadataCaptureHook.assertEqual", "tensorflow.python.training.monitored_session._HookedSession.run", "hooks_test.TestMetadataCaptureHook.assertEqual", "tensorflow.contrib.learn.RunConfig", "tensorflow.global_variables_initializer", "tensorflow.assign", "tensorflow.gfile.ListDirectory", "tensorflow.assign", "tensorflow.gfile.ListDirectory", "set", "set", "tensorflow.gfile.ListDirectory"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.inference_task.InferenceTask.begin", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set"], ["", "def", "test_capture", "(", "self", ")", ":", "\n", "    ", "global_step", "=", "tf", ".", "contrib", ".", "framework", ".", "get_or_create_global_step", "(", ")", "\n", "# Some test computation", "\n", "some_weights", "=", "tf", ".", "get_variable", "(", "\"weigths\"", ",", "[", "2", ",", "128", "]", ")", "\n", "computation", "=", "tf", ".", "nn", ".", "softmax", "(", "some_weights", ")", "\n", "\n", "hook", "=", "hooks", ".", "MetadataCaptureHook", "(", "\n", "params", "=", "{", "\"step\"", ":", "5", "}", ",", "model_dir", "=", "self", ".", "model_dir", ",", "\n", "run_config", "=", "tf", ".", "contrib", ".", "learn", ".", "RunConfig", "(", ")", ")", "\n", "hook", ".", "begin", "(", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "#pylint: disable=W0212", "\n", "mon_sess", "=", "monitored_session", ".", "_HookedSession", "(", "sess", ",", "[", "hook", "]", ")", "\n", "# Should not trigger for step 0", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "global_step", ",", "0", ")", ")", "\n", "mon_sess", ".", "run", "(", "computation", ")", "\n", "self", ".", "assertEqual", "(", "gfile", ".", "ListDirectory", "(", "self", ".", "model_dir", ")", ",", "[", "]", ")", "\n", "# Should trigger *after* step 5", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "global_step", ",", "5", ")", ")", "\n", "mon_sess", ".", "run", "(", "computation", ")", "\n", "self", ".", "assertEqual", "(", "gfile", ".", "ListDirectory", "(", "self", ".", "model_dir", ")", ",", "[", "]", ")", "\n", "mon_sess", ".", "run", "(", "computation", ")", "\n", "self", ".", "assertEqual", "(", "\n", "set", "(", "gfile", ".", "ListDirectory", "(", "self", ".", "model_dir", ")", ")", ",", "\n", "set", "(", "[", "\"run_meta\"", ",", "\"tfprof_log\"", ",", "\"timeline.json\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.input_pipeline_test.TestInputPipelineDef.test_without_extra_args": [[35, 52], ["yaml.load", "seq2seq.data.input_pipeline.make_input_pipeline_from_def", "input_pipeline_test.TestInputPipelineDef.assertIsInstance", "input_pipeline_test.TestInputPipelineDef.assertEqual", "input_pipeline_test.TestInputPipelineDef.assertEqual", "input_pipeline_test.TestInputPipelineDef.assertEqual", "input_pipeline_test.TestInputPipelineDef.assertEqual"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load"], ["def", "test_without_extra_args", "(", "self", ")", ":", "\n", "    ", "pipeline_def", "=", "yaml", ".", "load", "(", "\"\"\"\n      class: ParallelTextInputPipeline\n      params:\n        source_files: [\"file1\"]\n        target_files: [\"file2\"]\n        num_epochs: 1\n        shuffle: True\n    \"\"\"", ")", "\n", "pipeline", "=", "input_pipeline", ".", "make_input_pipeline_from_def", "(", "\n", "pipeline_def", ",", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "self", ".", "assertIsInstance", "(", "pipeline", ",", "input_pipeline", ".", "ParallelTextInputPipeline", ")", "\n", "#pylint: disable=W0212", "\n", "self", ".", "assertEqual", "(", "pipeline", ".", "params", "[", "\"source_files\"", "]", ",", "[", "\"file1\"", "]", ")", "\n", "self", ".", "assertEqual", "(", "pipeline", ".", "params", "[", "\"target_files\"", "]", ",", "[", "\"file2\"", "]", ")", "\n", "self", ".", "assertEqual", "(", "pipeline", ".", "params", "[", "\"num_epochs\"", "]", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "pipeline", ".", "params", "[", "\"shuffle\"", "]", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.input_pipeline_test.TestInputPipelineDef.test_with_extra_args": [[53, 73], ["yaml.load", "seq2seq.data.input_pipeline.make_input_pipeline_from_def", "input_pipeline_test.TestInputPipelineDef.assertIsInstance", "input_pipeline_test.TestInputPipelineDef.assertEqual", "input_pipeline_test.TestInputPipelineDef.assertEqual", "input_pipeline_test.TestInputPipelineDef.assertEqual", "input_pipeline_test.TestInputPipelineDef.assertEqual"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load"], ["", "def", "test_with_extra_args", "(", "self", ")", ":", "\n", "    ", "pipeline_def", "=", "yaml", ".", "load", "(", "\"\"\"\n      class: ParallelTextInputPipeline\n      params:\n        source_files: [\"file1\"]\n        target_files: [\"file2\"]\n        num_epochs: 1\n        shuffle: True\n    \"\"\"", ")", "\n", "pipeline", "=", "input_pipeline", ".", "make_input_pipeline_from_def", "(", "\n", "def_dict", "=", "pipeline_def", ",", "\n", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", ",", "\n", "num_epochs", "=", "5", ",", "\n", "shuffle", "=", "False", ")", "\n", "self", ".", "assertIsInstance", "(", "pipeline", ",", "input_pipeline", ".", "ParallelTextInputPipeline", ")", "\n", "#pylint: disable=W0212", "\n", "self", ".", "assertEqual", "(", "pipeline", ".", "params", "[", "\"source_files\"", "]", ",", "[", "\"file1\"", "]", ")", "\n", "self", ".", "assertEqual", "(", "pipeline", ".", "params", "[", "\"target_files\"", "]", ",", "[", "\"file2\"", "]", ")", "\n", "self", ".", "assertEqual", "(", "pipeline", ".", "params", "[", "\"num_epochs\"", "]", ",", "5", ")", "\n", "self", ".", "assertEqual", "(", "pipeline", ".", "params", "[", "\"shuffle\"", "]", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.input_pipeline_test.TFRecordsInputPipelineTest.setUp": [[80, 83], ["super().setUp", "tensorflow.logging.set_verbosity"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.setUp"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "TFRecordsInputPipelineTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.input_pipeline_test.TFRecordsInputPipelineTest.test_pipeline": [[84, 116], ["seq2seq.test.utils.create_temp_tfrecords", "seq2seq.data.input_pipeline.TFRecordInputPipeline", "seq2seq.data.input_pipeline.TFRecordInputPipeline.make_data_provider", "seq2seq.data.input_pipeline.TFRecordInputPipeline.read_from_data_provider", "input_pipeline_test.TFRecordsInputPipelineTest.assertEqual", "input_pipeline_test.TFRecordsInputPipelineTest.assertEqual", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "input_pipeline_test.TFRecordsInputPipelineTest.test_session", "sess.run", "sess.run", "numpy.char.decode", "numpy.char.decode", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "tensorflow.contrib.slim.queues.QueueRunners", "sess.run", "res[].astype", "res[].astype"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.utils.create_temp_tfrecords", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "def", "test_pipeline", "(", "self", ")", ":", "\n", "    ", "tfrecords_file", "=", "test_utils", ".", "create_temp_tfrecords", "(", "\n", "sources", "=", "[", "\"Hello World . \u7b11\"", "]", ",", "targets", "=", "[", "\"Bye \u6ce3\"", "]", ")", "\n", "\n", "pipeline", "=", "input_pipeline", ".", "TFRecordInputPipeline", "(", "\n", "params", "=", "{", "\n", "\"files\"", ":", "[", "tfrecords_file", ".", "name", "]", ",", "\n", "\"source_field\"", ":", "\"source\"", ",", "\n", "\"target_field\"", ":", "\"target\"", ",", "\n", "\"num_epochs\"", ":", "5", ",", "\n", "\"shuffle\"", ":", "False", "\n", "}", ",", "\n", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "\n", "data_provider", "=", "pipeline", ".", "make_data_provider", "(", ")", "\n", "\n", "features", "=", "pipeline", ".", "read_from_data_provider", "(", "data_provider", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "with", "tf", ".", "contrib", ".", "slim", ".", "queues", ".", "QueueRunners", "(", "sess", ")", ":", "\n", "        ", "res", "=", "sess", ".", "run", "(", "features", ")", "\n", "\n", "", "", "self", ".", "assertEqual", "(", "res", "[", "\"source_len\"", "]", ",", "5", ")", "\n", "self", ".", "assertEqual", "(", "res", "[", "\"target_len\"", "]", ",", "4", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "np", ".", "char", ".", "decode", "(", "res", "[", "\"source_tokens\"", "]", ".", "astype", "(", "\"S\"", ")", ",", "\"utf-8\"", ")", ",", "\n", "[", "\"Hello\"", ",", "\"World\"", ",", "\".\"", ",", "\"\u7b11\"", ",", "\"SEQUENCE_END\"", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "np", ".", "char", ".", "decode", "(", "res", "[", "\"target_tokens\"", "]", ".", "astype", "(", "\"S\"", ")", ",", "\"utf-8\"", ")", ",", "\n", "[", "\"SEQUENCE_START\"", ",", "\"Bye\"", ",", "\"\u6ce3\"", ",", "\"SEQUENCE_END\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.input_pipeline_test.ParallelTextInputPipelineTest.setUp": [[123, 126], ["super().setUp", "tensorflow.logging.set_verbosity"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.setUp"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "ParallelTextInputPipelineTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.input_pipeline_test.ParallelTextInputPipelineTest.test_pipeline": [[127, 158], ["seq2seq.test.utils.create_temp_parallel_data", "seq2seq.data.input_pipeline.ParallelTextInputPipeline", "seq2seq.data.input_pipeline.ParallelTextInputPipeline.make_data_provider", "seq2seq.data.input_pipeline.ParallelTextInputPipeline.read_from_data_provider", "input_pipeline_test.ParallelTextInputPipelineTest.assertEqual", "input_pipeline_test.ParallelTextInputPipelineTest.assertEqual", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "input_pipeline_test.ParallelTextInputPipelineTest.test_session", "sess.run", "sess.run", "numpy.char.decode", "numpy.char.decode", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "tensorflow.contrib.slim.queues.QueueRunners", "sess.run", "res[].astype", "res[].astype"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.utils.create_temp_parallel_data", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "def", "test_pipeline", "(", "self", ")", ":", "\n", "    ", "file_source", ",", "file_target", "=", "test_utils", ".", "create_temp_parallel_data", "(", "\n", "sources", "=", "[", "\"Hello World . \u7b11\"", "]", ",", "targets", "=", "[", "\"Bye \u6ce3\"", "]", ")", "\n", "\n", "pipeline", "=", "input_pipeline", ".", "ParallelTextInputPipeline", "(", "\n", "params", "=", "{", "\n", "\"source_files\"", ":", "[", "file_source", ".", "name", "]", ",", "\n", "\"target_files\"", ":", "[", "file_target", ".", "name", "]", ",", "\n", "\"num_epochs\"", ":", "5", ",", "\n", "\"shuffle\"", ":", "False", "\n", "}", ",", "\n", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "\n", "data_provider", "=", "pipeline", ".", "make_data_provider", "(", ")", "\n", "\n", "features", "=", "pipeline", ".", "read_from_data_provider", "(", "data_provider", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "with", "tf", ".", "contrib", ".", "slim", ".", "queues", ".", "QueueRunners", "(", "sess", ")", ":", "\n", "        ", "res", "=", "sess", ".", "run", "(", "features", ")", "\n", "\n", "", "", "self", ".", "assertEqual", "(", "res", "[", "\"source_len\"", "]", ",", "5", ")", "\n", "self", ".", "assertEqual", "(", "res", "[", "\"target_len\"", "]", ",", "4", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "np", ".", "char", ".", "decode", "(", "res", "[", "\"source_tokens\"", "]", ".", "astype", "(", "\"S\"", ")", ",", "\"utf-8\"", ")", ",", "\n", "[", "\"Hello\"", ",", "\"World\"", ",", "\".\"", ",", "\"\u7b11\"", ",", "\"SEQUENCE_END\"", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "np", ".", "char", ".", "decode", "(", "res", "[", "\"target_tokens\"", "]", ".", "astype", "(", "\"S\"", ")", ",", "\"utf-8\"", ")", ",", "\n", "[", "\"SEQUENCE_START\"", ",", "\"Bye\"", ",", "\"\u6ce3\"", ",", "\"SEQUENCE_END\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.models_test.EncoderDecoderTests.setUp": [[58, 73], ["super().setUp", "tensorflow.logging.set_verbosity", "len", "seq2seq.test.utils.create_temporary_vocab_file", "seq2seq.data.vocab.get_vocab_info", "tensorflow.contrib.framework.get_or_create_global_step", "str", "range"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.setUp", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.utils.create_temporary_vocab_file"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "EncoderDecoderTests", ",", "self", ")", ".", "setUp", "(", ")", "\n", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "self", ".", "batch_size", "=", "2", "\n", "self", ".", "input_depth", "=", "4", "\n", "self", ".", "sequence_length", "=", "10", "\n", "\n", "# Create vocabulary", "\n", "self", ".", "vocab_list", "=", "[", "str", "(", "_", ")", "for", "_", "in", "range", "(", "10", ")", "]", "\n", "self", ".", "vocab_list", "+=", "[", "\"\u7b11\u3046\"", ",", "\"\u6ce3\u304f\"", ",", "\"\u4e86\u89e3\"", ",", "\"\u306f\u3044\"", ",", "\"\uff3e\uff3f\uff3e\"", "]", "\n", "self", ".", "vocab_size", "=", "len", "(", "self", ".", "vocab_list", ")", "\n", "self", ".", "vocab_file", "=", "test_utils", ".", "create_temporary_vocab_file", "(", "self", ".", "vocab_list", ")", "\n", "self", ".", "vocab_info", "=", "vocab", ".", "get_vocab_info", "(", "self", ".", "vocab_file", ".", "name", ")", "\n", "\n", "tf", ".", "contrib", ".", "framework", ".", "get_or_create_global_step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.models_test.EncoderDecoderTests.tearDown": [[74, 76], ["models_test.EncoderDecoderTests.vocab_file.close"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "    ", "self", ".", "vocab_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.models_test.EncoderDecoderTests.create_model": [[77, 81], ["models_test.EncoderDecoderTests.skipTest"], "methods", ["None"], ["", "def", "create_model", "(", "self", ",", "_mode", ",", "_params", "=", "None", ")", ":", "\n", "    ", "\"\"\"Creates model class to be tested. Subclasses must implement this method.\n    \"\"\"", "\n", "self", ".", "skipTest", "(", "\"Base module should not be tested.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.models_test.EncoderDecoderTests._create_example": [[82, 97], ["numpy.random.randn", "numpy.random.randint", "numpy.random.randint", "numpy.random.randn", "numpy.random.randint", "collections.namedtuple", "collections.namedtuple.", "numpy.max", "numpy.max"], "methods", ["None"], ["", "def", "_create_example", "(", "self", ")", ":", "\n", "    ", "\"\"\"Creates example data for a test\"\"\"", "\n", "source", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "batch_size", ",", "self", ".", "sequence_length", ",", "\n", "self", ".", "input_depth", ")", "\n", "source_len", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "sequence_length", ",", "[", "self", ".", "batch_size", "]", ")", "\n", "target_len", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "sequence_length", "*", "2", ",", "\n", "[", "self", ".", "batch_size", "]", ")", "\n", "target", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "batch_size", ",", "\n", "np", ".", "max", "(", "target_len", ")", ",", "self", ".", "input_depth", ")", "\n", "labels", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "vocab_size", ",", "\n", "[", "self", ".", "batch_size", ",", "np", ".", "max", "(", "target_len", ")", "-", "1", "]", ")", "\n", "\n", "example_", "=", "namedtuple", "(", "\n", "\"Example\"", ",", "[", "\"source\"", ",", "\"source_len\"", ",", "\"target\"", ",", "\"target_len\"", ",", "\"labels\"", "]", ")", "\n", "return", "example_", "(", "source", ",", "source_len", ",", "target", ",", "target_len", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.models_test.EncoderDecoderTests._test_pipeline": [[98, 134], ["seq2seq.test.utils.create_temp_parallel_data", "models_test.EncoderDecoderTests.create_model", "seq2seq.data.input_pipeline.ParallelTextInputPipeline", "seq2seq.training.utils.create_input_fn", "seq2seq.training.utils.create_input_fn.", "models_test.EncoderDecoderTests.", "sources_file.close", "targets_file.close", "numpy.random.choice", "numpy.random.choice", "models_test.EncoderDecoderTests.test_session", "sess.run", "sess.run", "sess.run", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "tensorflow.tables_initializer", "tensorflow.contrib.slim.queues.QueueRunners", "sess.run"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.utils.create_temp_parallel_data", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.example_config_test.ExampleConfigTest.create_model", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.create_input_fn", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "def", "_test_pipeline", "(", "self", ",", "mode", ",", "params", "=", "None", ")", ":", "\n", "    ", "\"\"\"Helper function to test the full model pipeline.\n    \"\"\"", "\n", "# Create source and target example", "\n", "source_len", "=", "self", ".", "sequence_length", "+", "5", "\n", "target_len", "=", "self", ".", "sequence_length", "+", "10", "\n", "source", "=", "\" \"", ".", "join", "(", "np", ".", "random", ".", "choice", "(", "self", ".", "vocab_list", ",", "source_len", ")", ")", "\n", "target", "=", "\" \"", ".", "join", "(", "np", ".", "random", ".", "choice", "(", "self", ".", "vocab_list", ",", "target_len", ")", ")", "\n", "sources_file", ",", "targets_file", "=", "test_utils", ".", "create_temp_parallel_data", "(", "\n", "sources", "=", "[", "source", "]", ",", "targets", "=", "[", "target", "]", ")", "\n", "\n", "# Build model graph", "\n", "model", "=", "self", ".", "create_model", "(", "mode", ",", "params", ")", "\n", "input_pipeline_", "=", "input_pipeline", ".", "ParallelTextInputPipeline", "(", "\n", "params", "=", "{", "\n", "\"source_files\"", ":", "[", "sources_file", ".", "name", "]", ",", "\n", "\"target_files\"", ":", "[", "targets_file", ".", "name", "]", "\n", "}", ",", "\n", "mode", "=", "mode", ")", "\n", "input_fn", "=", "training_utils", ".", "create_input_fn", "(", "\n", "pipeline", "=", "input_pipeline_", ",", "batch_size", "=", "self", ".", "batch_size", ")", "\n", "features", ",", "labels", "=", "input_fn", "(", ")", "\n", "fetches", "=", "model", "(", "features", ",", "labels", ",", "None", ")", "\n", "fetches", "=", "[", "_", "for", "_", "in", "fetches", "if", "_", "is", "not", "None", "]", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "tables_initializer", "(", ")", ")", "\n", "with", "tf", ".", "contrib", ".", "slim", ".", "queues", ".", "QueueRunners", "(", "sess", ")", ":", "\n", "        ", "fetches_", "=", "sess", ".", "run", "(", "fetches", ")", "\n", "\n", "", "", "sources_file", ".", "close", "(", ")", "\n", "targets_file", ".", "close", "(", ")", "\n", "\n", "return", "model", ",", "fetches_", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.models_test.EncoderDecoderTests.test_train": [[135, 152], ["models_test.EncoderDecoderTests._test_pipeline", "numpy.minimum", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "models_test.EncoderDecoderTests.assertFalse", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.models_test.EncoderDecoderTests._test_pipeline"], ["", "def", "test_train", "(", "self", ")", ":", "\n", "    ", "model", ",", "fetches_", "=", "self", ".", "_test_pipeline", "(", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "predictions_", ",", "loss_", ",", "_", "=", "fetches_", "\n", "\n", "target_len", "=", "self", ".", "sequence_length", "+", "10", "+", "2", "\n", "max_decode_length", "=", "model", ".", "params", "[", "\"target.max_seq_len\"", "]", "\n", "expected_decode_len", "=", "np", ".", "minimum", "(", "target_len", ",", "max_decode_length", ")", "\n", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "predictions_", "[", "\"logits\"", "]", ".", "shape", ",", "[", "\n", "self", ".", "batch_size", ",", "expected_decode_len", "-", "1", ",", "\n", "model", ".", "target_vocab_info", ".", "total_size", "\n", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "predictions_", "[", "\"losses\"", "]", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "expected_decode_len", "-", "1", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "predictions_", "[", "\"predicted_ids\"", "]", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "expected_decode_len", "-", "1", "]", ")", "\n", "self", ".", "assertFalse", "(", "np", ".", "isnan", "(", "loss_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.models_test.EncoderDecoderTests.test_infer": [[153, 163], ["models_test.EncoderDecoderTests._test_pipeline", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.models_test.EncoderDecoderTests._test_pipeline"], ["", "def", "test_infer", "(", "self", ")", ":", "\n", "    ", "model", ",", "fetches_", "=", "self", ".", "_test_pipeline", "(", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "INFER", ")", "\n", "predictions_", ",", "=", "fetches_", "\n", "pred_len", "=", "predictions_", "[", "\"predicted_ids\"", "]", ".", "shape", "[", "1", "]", "\n", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "predictions_", "[", "\"logits\"", "]", ".", "shape", ",", "[", "\n", "self", ".", "batch_size", ",", "pred_len", ",", "model", ".", "target_vocab_info", ".", "total_size", "\n", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "predictions_", "[", "\"predicted_ids\"", "]", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "pred_len", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.models_test.EncoderDecoderTests.test_infer_beam_search": [[164, 188], ["models_test.EncoderDecoderTests._test_pipeline", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.models_test.EncoderDecoderTests._test_pipeline"], ["", "def", "test_infer_beam_search", "(", "self", ")", ":", "\n", "    ", "self", ".", "batch_size", "=", "1", "\n", "beam_width", "=", "10", "\n", "model", ",", "fetches_", "=", "self", ".", "_test_pipeline", "(", "\n", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "INFER", ",", "\n", "params", "=", "{", "\"inference.beam_search.beam_width\"", ":", "10", "}", ")", "\n", "predictions_", ",", "=", "fetches_", "\n", "pred_len", "=", "predictions_", "[", "\"predicted_ids\"", "]", ".", "shape", "[", "1", "]", "\n", "\n", "vocab_size", "=", "model", ".", "target_vocab_info", ".", "total_size", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "predictions_", "[", "\"predicted_ids\"", "]", ".", "shape", ",", "\n", "[", "1", ",", "pred_len", ",", "beam_width", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "predictions_", "[", "\"beam_search_output.beam_parent_ids\"", "]", ".", "shape", ",", "\n", "[", "1", ",", "pred_len", ",", "beam_width", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "predictions_", "[", "\"beam_search_output.scores\"", "]", ".", "shape", ",", "\n", "[", "1", ",", "pred_len", ",", "beam_width", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "predictions_", "[", "\"beam_search_output.original_outputs.predicted_ids\"", "]", ".", "shape", ",", "\n", "[", "1", ",", "pred_len", ",", "beam_width", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "predictions_", "[", "\"beam_search_output.original_outputs.logits\"", "]", ".", "shape", ",", "\n", "[", "1", ",", "pred_len", ",", "beam_width", ",", "vocab_size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.models_test.TestBasicSeq2Seq.setUp": [[194, 196], ["models_test.EncoderDecoderTests.setUp"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.setUp"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "TestBasicSeq2Seq", ",", "self", ")", ".", "setUp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.models_test.TestBasicSeq2Seq.create_model": [[197, 207], ["seq2seq.models.BasicSeq2Seq.default_params().copy", "seq2seq.models.BasicSeq2Seq.default_params().copy.update", "seq2seq.models.BasicSeq2Seq.default_params().copy.update", "seq2seq.models.BasicSeq2Seq.default_params().copy.update", "seq2seq.models.BasicSeq2Seq", "seq2seq.models.BasicSeq2Seq.default_params"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.LogPerplexityMetricSpec.default_params"], ["", "def", "create_model", "(", "self", ",", "mode", ",", "params", "=", "None", ")", ":", "\n", "    ", "params_", "=", "BasicSeq2Seq", ".", "default_params", "(", ")", ".", "copy", "(", ")", "\n", "params_", ".", "update", "(", "TEST_PARAMS", ")", "\n", "params_", ".", "update", "(", "{", "\n", "\"vocab_source\"", ":", "self", ".", "vocab_file", ".", "name", ",", "\n", "\"vocab_target\"", ":", "self", ".", "vocab_file", ".", "name", ",", "\n", "\"bridge.class\"", ":", "\"PassThroughBridge\"", "\n", "}", ")", "\n", "params_", ".", "update", "(", "params", "or", "{", "}", ")", "\n", "return", "BasicSeq2Seq", "(", "params", "=", "params_", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.models_test.TestAttentionSeq2Seq.setUp": [[213, 218], ["models_test.EncoderDecoderTests.setUp", "tensorflow.contrib.rnn.LSTMCell", "tensorflow.contrib.rnn.LSTMCell"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.setUp"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "TestAttentionSeq2Seq", ",", "self", ")", ".", "setUp", "(", ")", "\n", "self", ".", "encoder_rnn_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "LSTMCell", "(", "32", ")", "\n", "self", ".", "decoder_rnn_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "LSTMCell", "(", "32", ")", "\n", "self", ".", "attention_dim", "=", "128", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.models_test.TestAttentionSeq2Seq.create_model": [[219, 229], ["seq2seq.models.AttentionSeq2Seq.default_params().copy", "seq2seq.models.AttentionSeq2Seq.default_params().copy.update", "seq2seq.models.AttentionSeq2Seq.default_params().copy.update", "seq2seq.models.AttentionSeq2Seq.default_params().copy.update", "seq2seq.models.AttentionSeq2Seq", "seq2seq.models.AttentionSeq2Seq.default_params"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.LogPerplexityMetricSpec.default_params"], ["", "def", "create_model", "(", "self", ",", "mode", ",", "params", "=", "None", ")", ":", "\n", "    ", "params_", "=", "AttentionSeq2Seq", ".", "default_params", "(", ")", ".", "copy", "(", ")", "\n", "params_", ".", "update", "(", "TEST_PARAMS", ")", "\n", "params_", ".", "update", "(", "{", "\n", "\"source.reverse\"", ":", "True", ",", "\n", "\"vocab_source\"", ":", "self", ".", "vocab_file", ".", "name", ",", "\n", "\"vocab_target\"", ":", "self", ".", "vocab_file", ".", "name", ",", "\n", "}", ")", "\n", "params_", ".", "update", "(", "params", "or", "{", "}", ")", "\n", "return", "AttentionSeq2Seq", "(", "params", "=", "params_", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.beam_search_test.TestGatherTree.test_gather_tree": [[32, 43], ["numpy.array", "numpy.array", "numpy.array", "seq2seq.inference.beam_search.gather_tree", "numpy.testing.assert_array_equal", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "beam_search_test.TestGatherTree.test_session", "sess.run"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.inference.beam_search.gather_tree", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["def", "test_gather_tree", "(", "self", ")", ":", "\n", "    ", "predicted_ids", "=", "np", ".", "array", "(", "[", "[", "1", ",", "2", ",", "3", "]", ",", "[", "4", ",", "5", ",", "6", "]", ",", "[", "7", ",", "8", ",", "9", "]", "]", ")", "\n", "parent_ids", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "1", "]", ",", "[", "2", ",", "1", ",", "2", "]", "]", ")", "\n", "expected_result", "=", "np", ".", "array", "(", "[", "[", "2", ",", "2", ",", "2", "]", ",", "[", "6", ",", "5", ",", "6", "]", ",", "[", "7", ",", "8", ",", "9", "]", "]", ")", "\n", "\n", "res", "=", "beam_search", ".", "gather_tree", "(", "\n", "tf", ".", "convert_to_tensor", "(", "predicted_ids", ")", ",", "tf", ".", "convert_to_tensor", "(", "parent_ids", ")", ")", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "res_", "=", "sess", ".", "run", "(", "res", ")", "\n", "\n", "", "np", ".", "testing", ".", "assert_array_equal", "(", "expected_result", ",", "res_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.beam_search_test.TestLengthNorm.test_length_norm": [[48, 62], ["numpy.array", "seq2seq.inference.beam_search.length_penalty", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "beam_search_test.TestLengthNorm.test_session", "sess.run", "tensorflow.convert_to_tensor"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.inference.beam_search.length_penalty", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["def", "test_length_norm", "(", "self", ")", ":", "\n", "#log_probs_ = np.ones([2, 3]) / 3.0", "\n", "    ", "lengths_", "=", "np", ".", "array", "(", "[", "[", "1", ",", "2", ",", "3", "]", ",", "[", "3", ",", "3", ",", "3", "]", "]", ")", "\n", "penalty_factor_", "=", "0.6", "\n", "length_pen", "=", "beam_search", ".", "length_penalty", "(", "\n", "sequence_lengths", "=", "tf", ".", "convert_to_tensor", "(", "lengths_", ")", ",", "\n", "penalty_factor", "=", "penalty_factor_", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "length_pen_", "=", "sess", ".", "run", "(", "length_pen", ")", "\n", "\n", "", "np", ".", "testing", ".", "assert_almost_equal", "(", "length_pen_", "[", "0", ",", "0", "]", ",", "1.0", ",", "decimal", "=", "5", ")", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "length_pen_", "[", "0", ",", "1", "]", ",", "1.0969027", ",", "decimal", "=", "4", ")", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "length_pen_", "[", "0", ",", "2", "]", ",", "1.1884017", ",", "decimal", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.beam_search_test.TestBeamStep.setUp": [[68, 78], ["super().setUp", "seq2seq.inference.beam_search.BeamSearchConfig"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.setUp"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "TestBeamStep", ",", "self", ")", ".", "setUp", "(", ")", "\n", "self", ".", "state_size", "=", "10", "\n", "config", "=", "beam_search", ".", "BeamSearchConfig", "(", "\n", "beam_width", "=", "3", ",", "\n", "vocab_size", "=", "5", ",", "\n", "eos_token", "=", "0", ",", "\n", "length_penalty_weight", "=", "0.6", ",", "\n", "choose_successors_fn", "=", "beam_search", ".", "choose_top_k", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.beam_search_test.TestBeamStep.test_step": [[79, 112], ["seq2seq.inference.beam_search.BeamSearchState", "numpy.full", "tensorflow.convert_to_tensor", "tensorflow.nn.log_softmax", "seq2seq.inference.beam_search.beam_search_step", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "beam_search_test.TestBeamStep.test_session", "sess.run", "tensorflow.nn.log_softmax", "tensorflow.constant", "tensorflow.zeros", "tensorflow.ones"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.inference.beam_search.beam_search_step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "def", "test_step", "(", "self", ")", ":", "\n", "    ", "beam_state", "=", "beam_search", ".", "BeamSearchState", "(", "\n", "log_probs", "=", "tf", ".", "nn", ".", "log_softmax", "(", "tf", ".", "ones", "(", "self", ".", "config", ".", "beam_width", ")", ")", ",", "\n", "lengths", "=", "tf", ".", "constant", "(", "\n", "2", ",", "shape", "=", "[", "self", ".", "config", ".", "beam_width", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "finished", "=", "tf", ".", "zeros", "(", "\n", "[", "self", ".", "config", ".", "beam_width", "]", ",", "dtype", "=", "tf", ".", "bool", ")", ")", "\n", "\n", "logits_", "=", "np", ".", "full", "(", "[", "self", ".", "config", ".", "beam_width", ",", "self", ".", "config", ".", "vocab_size", "]", ",", "0.0001", ")", "\n", "logits_", "[", "0", ",", "2", "]", "=", "1.9", "\n", "logits_", "[", "0", ",", "3", "]", "=", "2.1", "\n", "logits_", "[", "1", ",", "3", "]", "=", "3.1", "\n", "logits_", "[", "1", ",", "4", "]", "=", "0.9", "\n", "logits", "=", "tf", ".", "convert_to_tensor", "(", "logits_", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "log_probs", "=", "tf", ".", "nn", ".", "log_softmax", "(", "logits", ")", "\n", "\n", "outputs", ",", "next_beam_state", "=", "beam_search", ".", "beam_search_step", "(", "\n", "time_", "=", "2", ",", "logits", "=", "logits", ",", "beam_state", "=", "beam_state", ",", "config", "=", "self", ".", "config", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "outputs_", ",", "next_state_", ",", "state_", ",", "log_probs_", "=", "sess", ".", "run", "(", "\n", "[", "outputs", ",", "next_beam_state", ",", "beam_state", ",", "log_probs", "]", ")", "\n", "\n", "", "np", ".", "testing", ".", "assert_array_equal", "(", "outputs_", ".", "predicted_ids", ",", "[", "3", ",", "3", ",", "2", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "outputs_", ".", "beam_parent_ids", ",", "[", "1", ",", "0", ",", "0", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "next_state_", ".", "lengths", ",", "[", "3", ",", "3", ",", "3", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "next_state_", ".", "finished", ",", "[", "False", ",", "False", ",", "False", "]", ")", "\n", "\n", "expected_log_probs", "=", "state_", ".", "log_probs", "[", "[", "1", ",", "0", ",", "0", "]", "]", "\n", "expected_log_probs", "[", "0", "]", "+=", "log_probs_", "[", "1", ",", "3", "]", "\n", "expected_log_probs", "[", "1", "]", "+=", "log_probs_", "[", "0", ",", "3", "]", "\n", "expected_log_probs", "[", "2", "]", "+=", "log_probs_", "[", "0", ",", "2", "]", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "next_state_", ".", "log_probs", ",", "expected_log_probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.beam_search_test.TestBeamStep.test_step_with_eos": [[113, 144], ["seq2seq.inference.beam_search.BeamSearchState", "numpy.full", "tensorflow.convert_to_tensor", "tensorflow.nn.log_softmax", "seq2seq.inference.beam_search.beam_search_step", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "beam_search_test.TestBeamStep.test_session", "sess.run", "tensorflow.nn.log_softmax", "tensorflow.convert_to_tensor", "tensorflow.constant", "tensorflow.ones"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.inference.beam_search.beam_search_step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "def", "test_step_with_eos", "(", "self", ")", ":", "\n", "    ", "beam_state", "=", "beam_search", ".", "BeamSearchState", "(", "\n", "log_probs", "=", "tf", ".", "nn", ".", "log_softmax", "(", "tf", ".", "ones", "(", "self", ".", "config", ".", "beam_width", ")", ")", ",", "\n", "lengths", "=", "tf", ".", "convert_to_tensor", "(", "\n", "[", "2", ",", "1", ",", "2", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "finished", "=", "tf", ".", "constant", "(", "\n", "[", "False", ",", "True", ",", "False", "]", ",", "dtype", "=", "tf", ".", "bool", ")", ")", "\n", "\n", "logits_", "=", "np", ".", "full", "(", "[", "self", ".", "config", ".", "beam_width", ",", "self", ".", "config", ".", "vocab_size", "]", ",", "0.0001", ")", "\n", "logits_", "[", "0", ",", "2", "]", "=", "1.1", "\n", "logits_", "[", "1", ",", "2", "]", "=", "1.0", "\n", "logits_", "[", "2", ",", "2", "]", "=", "1.0", "\n", "logits", "=", "tf", ".", "convert_to_tensor", "(", "logits_", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "log_probs", "=", "tf", ".", "nn", ".", "log_softmax", "(", "logits", ")", "\n", "\n", "outputs", ",", "next_beam_state", "=", "beam_search", ".", "beam_search_step", "(", "\n", "time_", "=", "2", ",", "logits", "=", "logits", ",", "beam_state", "=", "beam_state", ",", "config", "=", "self", ".", "config", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "outputs_", ",", "next_state_", ",", "state_", ",", "log_probs_", "=", "sess", ".", "run", "(", "\n", "[", "outputs", ",", "next_beam_state", ",", "beam_state", ",", "log_probs", "]", ")", "\n", "\n", "", "np", ".", "testing", ".", "assert_array_equal", "(", "outputs_", ".", "predicted_ids", ",", "[", "0", ",", "2", ",", "2", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "outputs_", ".", "beam_parent_ids", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "next_state_", ".", "lengths", ",", "[", "1", ",", "3", ",", "3", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "next_state_", ".", "finished", ",", "[", "True", ",", "False", ",", "False", "]", ")", "\n", "\n", "expected_log_probs", "=", "state_", ".", "log_probs", "[", "outputs_", ".", "beam_parent_ids", "]", "\n", "expected_log_probs", "[", "1", "]", "+=", "log_probs_", "[", "0", ",", "2", "]", "\n", "expected_log_probs", "[", "2", "]", "+=", "log_probs_", "[", "2", ",", "2", "]", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "next_state_", ".", "log_probs", ",", "expected_log_probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.beam_search_test.TestBeamStep.test_step_with_new_eos": [[145, 178], ["seq2seq.inference.beam_search.BeamSearchState", "numpy.full", "tensorflow.convert_to_tensor", "tensorflow.nn.log_softmax", "seq2seq.inference.beam_search.beam_search_step", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "beam_search_test.TestBeamStep.test_session", "sess.run", "tensorflow.nn.log_softmax", "tensorflow.constant", "tensorflow.zeros", "tensorflow.ones"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.inference.beam_search.beam_search_step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "def", "test_step_with_new_eos", "(", "self", ")", ":", "\n", "    ", "beam_state", "=", "beam_search", ".", "BeamSearchState", "(", "\n", "log_probs", "=", "tf", ".", "nn", ".", "log_softmax", "(", "tf", ".", "ones", "(", "self", ".", "config", ".", "beam_width", ")", ")", ",", "\n", "lengths", "=", "tf", ".", "constant", "(", "\n", "2", ",", "shape", "=", "[", "self", ".", "config", ".", "beam_width", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "finished", "=", "tf", ".", "zeros", "(", "\n", "[", "self", ".", "config", ".", "beam_width", "]", ",", "dtype", "=", "tf", ".", "bool", ")", ")", "\n", "\n", "logits_", "=", "np", ".", "full", "(", "[", "self", ".", "config", ".", "beam_width", ",", "self", ".", "config", ".", "vocab_size", "]", ",", "0.0001", ")", "\n", "logits_", "[", "0", ",", "0", "]", "=", "1.9", "\n", "logits_", "[", "0", ",", "3", "]", "=", "2.1", "\n", "logits_", "[", "1", ",", "3", "]", "=", "3.1", "\n", "logits_", "[", "1", ",", "4", "]", "=", "0.9", "\n", "logits", "=", "tf", ".", "convert_to_tensor", "(", "logits_", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "log_probs", "=", "tf", ".", "nn", ".", "log_softmax", "(", "logits", ")", "\n", "\n", "outputs", ",", "next_beam_state", "=", "beam_search", ".", "beam_search_step", "(", "\n", "time_", "=", "2", ",", "logits", "=", "logits", ",", "beam_state", "=", "beam_state", ",", "config", "=", "self", ".", "config", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "outputs_", ",", "next_state_", ",", "state_", ",", "log_probs_", "=", "sess", ".", "run", "(", "\n", "[", "outputs", ",", "next_beam_state", ",", "beam_state", ",", "log_probs", "]", ")", "\n", "\n", "", "np", ".", "testing", ".", "assert_array_equal", "(", "outputs_", ".", "predicted_ids", ",", "[", "3", ",", "3", ",", "0", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "outputs_", ".", "beam_parent_ids", ",", "[", "1", ",", "0", ",", "0", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "next_state_", ".", "lengths", ",", "[", "3", ",", "3", ",", "2", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "next_state_", ".", "finished", ",", "[", "False", ",", "False", ",", "True", "]", ")", "\n", "\n", "expected_log_probs", "=", "state_", ".", "log_probs", "[", "[", "1", ",", "0", ",", "0", "]", "]", "\n", "expected_log_probs", "[", "0", "]", "+=", "log_probs_", "[", "1", ",", "3", "]", "\n", "expected_log_probs", "[", "1", "]", "+=", "log_probs_", "[", "0", ",", "3", "]", "\n", "expected_log_probs", "[", "2", "]", "+=", "log_probs_", "[", "0", ",", "0", "]", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "next_state_", ".", "log_probs", ",", "expected_log_probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.beam_search_test.TestEosMasking.test_eos_masking": [[184, 202], ["tensorflow.constant", "tensorflow.constant", "seq2seq.inference.beam_search.mask_probs", "beam_search_test.TestEosMasking.test_session", "sess.run", "sess.run", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_equal", "numpy.testing.assert_approx_equal", "numpy.testing.assert_approx_equal", "numpy.testing.assert_approx_equal", "numpy.testing.assert_approx_equal", "numpy.finfo", "numpy.finfo", "numpy.finfo", "numpy.finfo"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.inference.beam_search.mask_probs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["def", "test_eos_masking", "(", "self", ")", ":", "\n", "    ", "probs", "=", "tf", ".", "constant", "(", "[", "[", "-", ".2", ",", "-", ".2", ",", "-", ".2", ",", "-", ".2", ",", "-", ".2", "]", ",", "[", "-", ".3", ",", "-", ".3", ",", "-", ".3", ",", "3", ",", "0", "]", ",", "\n", "[", "5", ",", "6", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "eos_token", "=", "0", "\n", "previously_finished", "=", "tf", ".", "constant", "(", "[", "0", ",", "1", ",", "0", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "masked", "=", "beam_search", ".", "mask_probs", "(", "probs", ",", "eos_token", ",", "previously_finished", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "probs", "=", "sess", ".", "run", "(", "probs", ")", "\n", "masked", "=", "sess", ".", "run", "(", "masked", ")", "\n", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "probs", "[", "0", "]", ",", "masked", "[", "0", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "probs", "[", "2", "]", ",", "masked", "[", "2", "]", ")", "\n", "np", ".", "testing", ".", "assert_equal", "(", "masked", "[", "1", "]", "[", "0", "]", ",", "0", ")", "\n", "np", ".", "testing", ".", "assert_approx_equal", "(", "masked", "[", "1", "]", "[", "1", "]", ",", "np", ".", "finfo", "(", "'float32'", ")", ".", "min", ")", "\n", "np", ".", "testing", ".", "assert_approx_equal", "(", "masked", "[", "1", "]", "[", "2", "]", ",", "np", ".", "finfo", "(", "'float32'", ")", ".", "min", ")", "\n", "np", ".", "testing", ".", "assert_approx_equal", "(", "masked", "[", "1", "]", "[", "3", "]", ",", "np", ".", "finfo", "(", "'float32'", ")", ".", "min", ")", "\n", "np", ".", "testing", ".", "assert_approx_equal", "(", "masked", "[", "1", "]", "[", "4", "]", ",", "np", ".", "finfo", "(", "'float32'", ")", ".", "min", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.BridgeTest.setUp": [[39, 58], ["super().setUp", "tensorflow.contrib.rnn.MultiRNNCell", "tensorflow.contrib.rnn.MultiRNNCell", "tensorflow.python.util.nest.map_structure", "seq2seq.encoders.encoder.EncoderOutput", "tensorflow.contrib.rnn.GRUCell", "tensorflow.contrib.rnn.GRUCell", "tensorflow.contrib.rnn.LSTMCell", "tensorflow.contrib.rnn.GRUCell", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "numpy.full", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.setUp"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "BridgeTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "self", ".", "batch_size", "=", "4", "\n", "self", ".", "encoder_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "MultiRNNCell", "(", "\n", "[", "tf", ".", "contrib", ".", "rnn", ".", "GRUCell", "(", "4", ")", ",", "tf", ".", "contrib", ".", "rnn", ".", "GRUCell", "(", "8", ")", "]", ")", "\n", "self", ".", "decoder_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "MultiRNNCell", "(", "\n", "[", "tf", ".", "contrib", ".", "rnn", ".", "LSTMCell", "(", "16", ")", ",", "tf", ".", "contrib", ".", "rnn", ".", "GRUCell", "(", "8", ")", "]", ")", "\n", "final_encoder_state", "=", "nest", ".", "map_structure", "(", "\n", "lambda", "x", ":", "tf", ".", "convert_to_tensor", "(", "\n", "value", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "batch_size", ",", "x", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "self", ".", "encoder_cell", ".", "state_size", ")", "\n", "self", ".", "encoder_outputs", "=", "EncoderOutput", "(", "\n", "outputs", "=", "tf", ".", "convert_to_tensor", "(", "\n", "value", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "batch_size", ",", "10", ",", "16", ")", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "attention_values", "=", "tf", ".", "convert_to_tensor", "(", "\n", "value", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "batch_size", ",", "10", ",", "16", ")", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "attention_values_length", "=", "np", ".", "full", "(", "[", "self", ".", "batch_size", "]", ",", "10", ")", ",", "\n", "final_state", "=", "final_encoder_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.BridgeTest._create_bridge": [[59, 63], ["NotImplementedError"], "methods", ["None"], ["", "def", "_create_bridge", "(", "self", ")", ":", "\n", "    ", "\"\"\"Creates the bridge class to be tests. Must be implemented by\n    child classes\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.BridgeTest._assert_correct_outputs": [[64, 68], ["NotImplementedError"], "methods", ["None"], ["", "def", "_assert_correct_outputs", "(", "self", ")", ":", "\n", "    ", "\"\"\"Asserts bridge outputs are correct. Must be implemented by\n    child classes\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.BridgeTest._run": [[69, 82], ["tensorflow.variable_scope", "bridges_test.BridgeTest._create_bridge", "bridges_test.BridgeTest.", "bridges_test.BridgeTest.test_session", "sess.run", "sess.run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.basic_seq2seq.BasicSeq2Seq._create_bridge", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "def", "_run", "(", "self", ",", "scope", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Runs the bridge with the given arguments\n    \"\"\"", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"bridge\"", ")", ":", "\n", "      ", "bridge", "=", "self", ".", "_create_bridge", "(", "**", "kwargs", ")", "\n", "initial_state", "=", "bridge", "(", ")", "\n", "\n", "", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "initial_state_", "=", "sess", ".", "run", "(", "initial_state", ")", "\n", "\n", "", "return", "initial_state_", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.TestZeroBridge._create_bridge": [[87, 93], ["seq2seq.models.bridges.ZeroBridge"], "methods", ["None"], ["def", "_create_bridge", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "ZeroBridge", "(", "\n", "encoder_outputs", "=", "self", ".", "encoder_outputs", ",", "\n", "decoder_state_size", "=", "self", ".", "decoder_cell", ".", "state_size", ",", "\n", "params", "=", "kwargs", ",", "\n", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.TestZeroBridge._assert_correct_outputs": [[94, 98], ["tensorflow.python.util.nest.flatten", "numpy.testing.assert_array_equal", "numpy.zeros_like"], "methods", ["None"], ["", "def", "_assert_correct_outputs", "(", "self", ",", "initial_state_", ")", ":", "\n", "    ", "initial_state_flat_", "=", "nest", ".", "flatten", "(", "initial_state_", ")", "\n", "for", "element", "in", "initial_state_flat_", ":", "\n", "      ", "np", ".", "testing", ".", "assert_array_equal", "(", "element", ",", "np", ".", "zeros_like", "(", "element", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.TestZeroBridge.test_zero_bridge": [[99, 101], ["bridges_test.TestZeroBridge._assert_correct_outputs", "bridges_test.TestZeroBridge._run"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.TestInitialStateBridge._assert_correct_outputs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.BridgeTest._run"], ["", "", "def", "test_zero_bridge", "(", "self", ")", ":", "\n", "    ", "self", ".", "_assert_correct_outputs", "(", "self", ".", "_run", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.TestPassThroughBridge._create_bridge": [[106, 112], ["seq2seq.models.bridges.PassThroughBridge"], "methods", ["None"], ["def", "_create_bridge", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "PassThroughBridge", "(", "\n", "encoder_outputs", "=", "self", ".", "encoder_outputs", ",", "\n", "decoder_state_size", "=", "self", ".", "decoder_cell", ".", "state_size", ",", "\n", "params", "=", "kwargs", ",", "\n", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.TestPassThroughBridge._assert_correct_outputs": [[113, 124], ["tensorflow.python.util.nest.assert_same_structure", "tensorflow.python.util.nest.assert_same_structure", "tensorflow.python.util.nest.flatten", "tensorflow.python.util.nest.flatten", "zip", "bridges_test.TestPassThroughBridge.test_session", "sess.run", "numpy.testing.assert_array_equal"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "def", "_assert_correct_outputs", "(", "self", ",", "initial_state_", ")", ":", "\n", "    ", "nest", ".", "assert_same_structure", "(", "initial_state_", ",", "self", ".", "decoder_cell", ".", "state_size", ")", "\n", "nest", ".", "assert_same_structure", "(", "initial_state_", ",", "self", ".", "encoder_outputs", ".", "final_state", ")", "\n", "\n", "encoder_state_flat", "=", "nest", ".", "flatten", "(", "self", ".", "encoder_outputs", ".", "final_state", ")", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "encoder_state_flat_", "=", "sess", ".", "run", "(", "encoder_state_flat", ")", "\n", "\n", "", "initial_state_flat_", "=", "nest", ".", "flatten", "(", "initial_state_", ")", "\n", "for", "e_dec", ",", "e_enc", "in", "zip", "(", "initial_state_flat_", ",", "encoder_state_flat_", ")", ":", "\n", "      ", "np", ".", "testing", ".", "assert_array_equal", "(", "e_dec", ",", "e_enc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.TestPassThroughBridge.test_passthrough_bridge": [[125, 128], ["bridges_test.TestPassThroughBridge._assert_correct_outputs", "bridges_test.TestPassThroughBridge._run"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.TestInitialStateBridge._assert_correct_outputs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.BridgeTest._run"], ["", "", "def", "test_passthrough_bridge", "(", "self", ")", ":", "\n", "    ", "self", ".", "decoder_cell", "=", "self", ".", "encoder_cell", "\n", "self", ".", "_assert_correct_outputs", "(", "self", ".", "_run", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.TestInitialStateBridge._create_bridge": [[133, 139], ["seq2seq.models.bridges.InitialStateBridge"], "methods", ["None"], ["def", "_create_bridge", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "InitialStateBridge", "(", "\n", "encoder_outputs", "=", "self", ".", "encoder_outputs", ",", "\n", "decoder_state_size", "=", "self", ".", "decoder_cell", ".", "state_size", ",", "\n", "params", "=", "kwargs", ",", "\n", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.TestInitialStateBridge._assert_correct_outputs": [[140, 142], ["tensorflow.python.util.nest.assert_same_structure"], "methods", ["None"], ["", "def", "_assert_correct_outputs", "(", "self", ",", "initial_state_", ")", ":", "\n", "    ", "nest", ".", "assert_same_structure", "(", "initial_state_", ",", "self", ".", "decoder_cell", ".", "state_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.TestInitialStateBridge.test_with_final_state": [[143, 145], ["bridges_test.TestInitialStateBridge._assert_correct_outputs", "bridges_test.TestInitialStateBridge._run"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.TestInitialStateBridge._assert_correct_outputs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.BridgeTest._run"], ["", "def", "test_with_final_state", "(", "self", ")", ":", "\n", "    ", "self", ".", "_assert_correct_outputs", "(", "self", ".", "_run", "(", "bridge_input", "=", "\"final_state\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.TestInitialStateBridge.test_with_outputs": [[146, 148], ["bridges_test.TestInitialStateBridge._assert_correct_outputs", "bridges_test.TestInitialStateBridge._run"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.TestInitialStateBridge._assert_correct_outputs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.BridgeTest._run"], ["", "def", "test_with_outputs", "(", "self", ")", ":", "\n", "    ", "self", ".", "_assert_correct_outputs", "(", "self", ".", "_run", "(", "bridge_input", "=", "\"outputs\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.TestInitialStateBridge.test_with_activation_fn": [[149, 153], ["bridges_test.TestInitialStateBridge._assert_correct_outputs", "bridges_test.TestInitialStateBridge._run"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.TestInitialStateBridge._assert_correct_outputs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.bridges_test.BridgeTest._run"], ["", "def", "test_with_activation_fn", "(", "self", ")", ":", "\n", "    ", "self", ".", "_assert_correct_outputs", "(", "\n", "self", ".", "_run", "(", "\n", "bridge_input", "=", "\"final_state\"", ",", "activation_fn", "=", "\"tanh\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.losses_test.CrossEntropySequenceLossTest.setUp": [[33, 39], ["super().setUp", "tensorflow.logging.set_verbosity"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.setUp"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "CrossEntropySequenceLossTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "self", ".", "batch_size", "=", "4", "\n", "self", ".", "sequence_length", "=", "10", "\n", "self", ".", "vocab_size", "=", "50", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.losses_test.CrossEntropySequenceLossTest.test_op": [[40, 62], ["numpy.random.randn", "logits.astype.astype.astype", "numpy.array", "numpy.random.randint", "seq2seq.losses.cross_entropy_sequence_loss", "numpy.testing.assert_array_less", "numpy.testing.assert_array_less", "numpy.testing.assert_array_less", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "losses_test.CrossEntropySequenceLossTest.test_session", "sess.run", "numpy.zeros_like", "numpy.zeros_like", "numpy.zeros_like", "numpy.zeros_like", "numpy.zeros_like", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.losses.cross_entropy_sequence_loss", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "def", "test_op", "(", "self", ")", ":", "\n", "    ", "logits", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "sequence_length", ",", "self", ".", "batch_size", ",", "\n", "self", ".", "vocab_size", ")", "\n", "logits", "=", "logits", ".", "astype", "(", "np", ".", "float32", ")", "\n", "sequence_length", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", "\n", "targets", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "vocab_size", ",", "\n", "[", "self", ".", "sequence_length", ",", "self", ".", "batch_size", "]", ")", "\n", "losses", "=", "seq2seq_losses", ".", "cross_entropy_sequence_loss", "(", "logits", ",", "targets", ",", "\n", "sequence_length", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "losses_", "=", "sess", ".", "run", "(", "losses", ")", "\n", "\n", "# Make sure all losses not past the sequence length are > 0", "\n", "", "np", ".", "testing", ".", "assert_array_less", "(", "np", ".", "zeros_like", "(", "losses_", "[", ":", "1", ",", "0", "]", ")", ",", "losses_", "[", ":", "1", ",", "0", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_less", "(", "np", ".", "zeros_like", "(", "losses_", "[", ":", "2", ",", "1", "]", ")", ",", "losses_", "[", ":", "2", ",", "1", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_less", "(", "np", ".", "zeros_like", "(", "losses_", "[", ":", "3", ",", "2", "]", ")", ",", "losses_", "[", ":", "3", ",", "2", "]", ")", "\n", "\n", "# Make sure all losses past the sequence length are 0", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "losses_", "[", "1", ":", ",", "0", "]", ",", "np", ".", "zeros_like", "(", "losses_", "[", "1", ":", ",", "0", "]", ")", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "losses_", "[", "2", ":", ",", "1", "]", ",", "np", ".", "zeros_like", "(", "losses_", "[", "2", ":", ",", "1", "]", ")", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "losses_", "[", "3", ":", ",", "2", "]", ",", "np", ".", "zeros_like", "(", "losses_", "[", "3", ":", ",", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.example_config_test.ExampleConfigTest.__init__": [[57, 60], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "ExampleConfigTest", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "vocab_file", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.example_config_test.ExampleConfigTest._config_path": [[61, 64], ["NotImplementedError"], "methods", ["None"], ["", "def", "_config_path", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns the path to the configuration to be tested\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.example_config_test.ExampleConfigTest.create_model": [[65, 72], ["example_config_test._load_model_from_config", "example_config_test.ExampleConfigTest._config_path"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.example_config_test._load_model_from_config", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.example_config_test.TestNMTConv._config_path"], ["", "def", "create_model", "(", "self", ",", "mode", ",", "params", "=", "None", ")", ":", "\n", "    ", "\"\"\"Creates the model\"\"\"", "\n", "return", "_load_model_from_config", "(", "\n", "config_path", "=", "self", ".", "_config_path", "(", ")", ",", "\n", "hparam_overrides", "=", "params", ",", "\n", "vocab_file", "=", "self", ".", "vocab_file", ".", "name", ",", "\n", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.example_config_test.TestNMTLarge._config_path": [[77, 79], ["os.path.join"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["def", "_config_path", "(", "self", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "EXAMPLE_CONFIG_DIR", ",", "\"nmt_large.yml\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.example_config_test.TestNMTMedium._config_path": [[84, 86], ["os.path.join"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["def", "_config_path", "(", "self", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "EXAMPLE_CONFIG_DIR", ",", "\"nmt_medium.yml\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.example_config_test.TestNMTSmall._config_path": [[91, 93], ["os.path.join"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["def", "_config_path", "(", "self", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "EXAMPLE_CONFIG_DIR", ",", "\"nmt_small.yml\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.example_config_test.TestNMTConv._config_path": [[97, 99], ["os.path.join"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["def", "_config_path", "(", "self", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "EXAMPLE_CONFIG_DIR", ",", "\"nmt_conv.yml\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.example_config_test._load_model_from_config": [[39, 52], ["model_cls", "tensorflow.gfile.GFile", "yaml.load", "pydoc.locate", "getattr", "model_params.update"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update"], ["def", "_load_model_from_config", "(", "config_path", ",", "hparam_overrides", ",", "vocab_file", ",", "mode", ")", ":", "\n", "  ", "\"\"\"Loads model from a configuration file\"\"\"", "\n", "with", "gfile", ".", "GFile", "(", "config_path", ")", "as", "config_file", ":", "\n", "    ", "config", "=", "yaml", ".", "load", "(", "config_file", ")", "\n", "", "model_cls", "=", "locate", "(", "config", "[", "\"model\"", "]", ")", "or", "getattr", "(", "models", ",", "config", "[", "\"model\"", "]", ")", "\n", "model_params", "=", "config", "[", "\"model_params\"", "]", "\n", "if", "hparam_overrides", ":", "\n", "    ", "model_params", ".", "update", "(", "hparam_overrides", ")", "\n", "# Change the max decode length to make the test run faster", "\n", "", "model_params", "[", "\"decoder.params\"", "]", "[", "\"max_decode_length\"", "]", "=", "5", "\n", "model_params", "[", "\"vocab_source\"", "]", "=", "vocab_file", "\n", "model_params", "[", "\"vocab_target\"", "]", "=", "vocab_file", "\n", "return", "model_cls", "(", "params", "=", "model_params", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.attention_test.AttentionLayerTest.setUp": [[35, 43], ["super().setUp", "tensorflow.logging.set_verbosity"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.setUp"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "AttentionLayerTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "self", ".", "batch_size", "=", "8", "\n", "self", ".", "attention_dim", "=", "128", "\n", "self", ".", "input_dim", "=", "16", "\n", "self", ".", "seq_len", "=", "10", "\n", "self", ".", "state_dim", "=", "32", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.attention_test.AttentionLayerTest._create_layer": [[44, 47], ["None"], "methods", ["None"], ["", "def", "_create_layer", "(", "self", ")", ":", "\n", "    ", "\"\"\"Creates the attention layer. Should be implemented by child classes\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.attention_test.AttentionLayerTest._test_layer": [[48, 81], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "attention_test.AttentionLayerTest._create_layer", "attention_test.AttentionLayerTest.", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "enumerate", "numpy.sum", "numpy.testing.assert_array_almost_equal", "attention_test.AttentionLayerTest.test_session", "sess.run", "numpy.random.randn", "numpy.random.randn", "sess.run", "numpy.testing.assert_array_equal", "numpy.ones", "tensorflow.global_variables_initializer", "numpy.arange", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.attention_test.AttentionLayerBahdanauTest._create_layer", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "def", "_test_layer", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests Attention layer with a  given score type\"\"\"", "\n", "inputs_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "None", ",", "self", ".", "input_dim", ")", ")", "\n", "inputs_length_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", "\n", "state_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "self", ".", "state_dim", ")", ")", "\n", "attention_fn", "=", "self", ".", "_create_layer", "(", ")", "\n", "scores", ",", "context", "=", "attention_fn", "(", "\n", "query", "=", "state_pl", ",", "\n", "keys", "=", "inputs_pl", ",", "\n", "values", "=", "inputs_pl", ",", "\n", "values_length", "=", "inputs_length_pl", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "feed_dict", "=", "{", "}", "\n", "feed_dict", "[", "inputs_pl", "]", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "batch_size", ",", "self", ".", "seq_len", ",", "\n", "self", ".", "input_dim", ")", "\n", "feed_dict", "[", "state_pl", "]", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "batch_size", ",", "self", ".", "state_dim", ")", "\n", "feed_dict", "[", "inputs_length_pl", "]", "=", "np", ".", "arange", "(", "self", ".", "batch_size", ")", "+", "1", "\n", "scores_", ",", "context_", "=", "sess", ".", "run", "(", "[", "scores", ",", "context", "]", ",", "feed_dict", ")", "\n", "\n", "", "np", ".", "testing", ".", "assert_array_equal", "(", "scores_", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "self", ".", "seq_len", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "context_", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "self", ".", "input_dim", "]", ")", "\n", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "scores_", ",", "1", ")", ":", "\n", "# All scores that are padded should be zero", "\n", "      ", "np", ".", "testing", ".", "assert_array_equal", "(", "batch", "[", "idx", ":", "]", ",", "np", ".", "zeros_like", "(", "batch", "[", "idx", ":", "]", ")", ")", "\n", "\n", "# Scores should sum to 1", "\n", "", "scores_sum", "=", "np", ".", "sum", "(", "scores_", ",", "axis", "=", "1", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "scores_sum", ",", "np", ".", "ones", "(", "[", "self", ".", "batch_size", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.attention_test.AttentionLayerDotTest._create_layer": [[86, 90], ["seq2seq.decoders.attention.AttentionLayerDot"], "methods", ["None"], ["def", "_create_layer", "(", "self", ")", ":", "\n", "    ", "return", "AttentionLayerDot", "(", "\n", "params", "=", "{", "\"num_units\"", ":", "self", ".", "attention_dim", "}", ",", "\n", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.attention_test.AttentionLayerDotTest.test_layer": [[91, 93], ["attention_test.AttentionLayerDotTest._test_layer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.attention_test.AttentionLayerTest._test_layer"], ["", "def", "test_layer", "(", "self", ")", ":", "\n", "    ", "self", ".", "_test_layer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.attention_test.AttentionLayerBahdanauTest._create_layer": [[98, 102], ["seq2seq.decoders.attention.AttentionLayerBahdanau"], "methods", ["None"], ["def", "_create_layer", "(", "self", ")", ":", "\n", "    ", "return", "AttentionLayerBahdanau", "(", "\n", "params", "=", "{", "\"num_units\"", ":", "self", ".", "attention_dim", "}", ",", "\n", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.attention_test.AttentionLayerBahdanauTest.test_layer": [[103, 105], ["attention_test.AttentionLayerBahdanauTest._test_layer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.attention_test.AttentionLayerTest._test_layer"], ["", "def", "test_layer", "(", "self", ")", ":", "\n", "    ", "self", ".", "_test_layer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.pooling_encoder_test.PoolingEncoderTest.setUp": [[34, 40], ["super().setUp"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.setUp"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "PoolingEncoderTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "self", ".", "batch_size", "=", "4", "\n", "self", ".", "sequence_length", "=", "16", "\n", "self", ".", "input_depth", "=", "10", "\n", "self", ".", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.pooling_encoder_test.PoolingEncoderTest._test_with_params": [[41, 63], ["tensorflow.random_normal", "seq2seq.encoders.PoolingEncoder", "seq2seq.encoders.PoolingEncoder.", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "tensorflow.ones", "pooling_encoder_test.PoolingEncoderTest.test_session", "sess.run", "sess.run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "def", "_test_with_params", "(", "self", ",", "params", ")", ":", "\n", "    ", "\"\"\"Tests the encoder with a given parameter configuration\"\"\"", "\n", "inputs", "=", "tf", ".", "random_normal", "(", "\n", "[", "self", ".", "batch_size", ",", "self", ".", "sequence_length", ",", "self", ".", "input_depth", "]", ")", "\n", "example_length", "=", "tf", ".", "ones", "(", "\n", "self", ".", "batch_size", ",", "dtype", "=", "tf", ".", "int32", ")", "*", "self", ".", "sequence_length", "\n", "\n", "encode_fn", "=", "PoolingEncoder", "(", "params", ",", "self", ".", "mode", ")", "\n", "encoder_output", "=", "encode_fn", "(", "inputs", ",", "example_length", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "encoder_output_", "=", "sess", ".", "run", "(", "encoder_output", ")", "\n", "\n", "", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "encoder_output_", ".", "outputs", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "self", ".", "sequence_length", ",", "self", ".", "input_depth", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "encoder_output_", ".", "attention_values", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "self", ".", "sequence_length", ",", "self", ".", "input_depth", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "encoder_output_", ".", "final_state", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "self", ".", "input_depth", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.pooling_encoder_test.PoolingEncoderTest.test_encode_with_pos": [[64, 68], ["pooling_encoder_test.PoolingEncoderTest._test_with_params"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.pooling_encoder_test.PoolingEncoderTest._test_with_params"], ["", "def", "test_encode_with_pos", "(", "self", ")", ":", "\n", "    ", "self", ".", "_test_with_params", "(", "{", "\n", "\"position_embeddings.enable\"", ":", "True", ",", "\n", "\"position_embeddings.num_positions\"", ":", "self", ".", "sequence_length", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.pooling_encoder_test.PoolingEncoderTest.test_encode_without_pos": [[70, 74], ["pooling_encoder_test.PoolingEncoderTest._test_with_params"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.pooling_encoder_test.PoolingEncoderTest._test_with_params"], ["", "def", "test_encode_without_pos", "(", "self", ")", ":", "\n", "    ", "self", ".", "_test_with_params", "(", "{", "\n", "\"position_embeddings.enable\"", ":", "False", ",", "\n", "\"position_embeddings.num_positions\"", ":", "0", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.metrics_test.TestMosesBleu._test_multi_bleu": [[37, 43], ["seq2seq.metrics.bleu.moses_multi_bleu", "numpy.testing.assert_almost_equal"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.bleu.moses_multi_bleu"], ["def", "_test_multi_bleu", "(", "self", ",", "hypotheses", ",", "references", ",", "lowercase", ",", "expected_bleu", ")", ":", "\n", "#pylint: disable=R0201", "\n", "    ", "\"\"\"Runs a multi-bleu test.\"\"\"", "\n", "result", "=", "bleu", ".", "moses_multi_bleu", "(", "\n", "hypotheses", "=", "hypotheses", ",", "references", "=", "references", ",", "lowercase", "=", "lowercase", ")", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "result", ",", "expected_bleu", ",", "decimal", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.metrics_test.TestMosesBleu.test_multi_bleu": [[44, 56], ["metrics_test.TestMosesBleu._test_multi_bleu", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.metrics_test.TestMosesBleu._test_multi_bleu"], ["", "def", "test_multi_bleu", "(", "self", ")", ":", "\n", "    ", "self", ".", "_test_multi_bleu", "(", "\n", "hypotheses", "=", "np", ".", "array", "(", "[", "\n", "\"The brown fox jumps over the dog \u7b11\"", ",", "\n", "\"The brown fox jumps over the dog 2 \u7b11\"", "\n", "]", ")", ",", "\n", "references", "=", "np", ".", "array", "(", "[", "\n", "\"The quick brown fox jumps over the lazy dog \u7b11\"", ",", "\n", "\"The quick brown fox jumps over the lazy dog \u7b11\"", "\n", "]", ")", ",", "\n", "lowercase", "=", "False", ",", "\n", "expected_bleu", "=", "46.51", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.metrics_test.TestMosesBleu.test_empty": [[57, 63], ["metrics_test.TestMosesBleu._test_multi_bleu", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.metrics_test.TestMosesBleu._test_multi_bleu"], ["", "def", "test_empty", "(", "self", ")", ":", "\n", "    ", "self", ".", "_test_multi_bleu", "(", "\n", "hypotheses", "=", "np", ".", "array", "(", "[", "]", ")", ",", "\n", "references", "=", "np", ".", "array", "(", "[", "]", ")", ",", "\n", "lowercase", "=", "False", ",", "\n", "expected_bleu", "=", "0.00", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.metrics_test.TestMosesBleu.test_multi_bleu_lowercase": [[64, 76], ["metrics_test.TestMosesBleu._test_multi_bleu", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.metrics_test.TestMosesBleu._test_multi_bleu"], ["", "def", "test_multi_bleu_lowercase", "(", "self", ")", ":", "\n", "    ", "self", ".", "_test_multi_bleu", "(", "\n", "hypotheses", "=", "np", ".", "array", "(", "[", "\n", "\"The brown fox jumps over The Dog \u7b11\"", ",", "\n", "\"The brown fox jumps over The Dog 2 \u7b11\"", "\n", "]", ")", ",", "\n", "references", "=", "np", ".", "array", "(", "[", "\n", "\"The quick brown fox jumps over the lazy dog \u7b11\"", ",", "\n", "\"The quick brown fox jumps over the lazy dog \u7b11\"", "\n", "]", ")", ",", "\n", "lowercase", "=", "True", ",", "\n", "expected_bleu", "=", "46.51", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.metrics_test.TestTextMetricSpec._test_metric_spec": [[82, 106], ["metric_spec.create_metric_ops", "tensorflow.placeholder", "tensorflow.placeholder", "metrics_test.TestTextMetricSpec.test_session", "sess.run", "sess.run", "zip", "zip", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "hyp.split.split.split", "ref.split.split.split", "sess.run", "scores.append", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "sess.run"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.LogPerplexityMetricSpec.create_metric_ops", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["def", "_test_metric_spec", "(", "self", ",", "metric_spec", ",", "hyps", ",", "refs", ",", "expected_scores", ")", ":", "\n", "    ", "\"\"\"Tests a MetricSpec\"\"\"", "\n", "predictions", "=", "{", "\"predicted_tokens\"", ":", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "string", ")", "}", "\n", "labels", "=", "{", "\"target_tokens\"", ":", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "string", ")", "}", "\n", "\n", "value", ",", "update_op", "=", "metric_spec", ".", "create_metric_ops", "(", "None", ",", "labels", ",", "predictions", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "\n", "scores", "=", "[", "]", "\n", "for", "hyp", ",", "ref", "in", "zip", "(", "hyps", ",", "refs", ")", ":", "\n", "        ", "hyp", "=", "hyp", ".", "split", "(", "\" \"", ")", "\n", "ref", "=", "ref", ".", "split", "(", "\" \"", ")", "\n", "sess", ".", "run", "(", "update_op", ",", "{", "\n", "predictions", "[", "\"predicted_tokens\"", "]", ":", "[", "hyp", "]", ",", "\n", "labels", "[", "\"target_tokens\"", "]", ":", "[", "ref", "]", "\n", "}", ")", "\n", "scores", ".", "append", "(", "sess", ".", "run", "(", "value", ")", ")", "\n", "\n", "", "for", "score", ",", "expected", "in", "zip", "(", "scores", ",", "expected_scores", ")", ":", "\n", "        ", "np", ".", "testing", ".", "assert_almost_equal", "(", "score", ",", "expected", ",", "decimal", "=", "2", ")", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "score", ",", "expected", ",", "decimal", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.metrics_test.TestBleuMetricSpec.test_bleu": [[111, 118], ["seq2seq.metrics.metric_specs.BleuMetricSpec", "metrics_test.TestBleuMetricSpec._test_metric_spec"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.metrics_test.TestTextMetricSpec._test_metric_spec"], ["def", "test_bleu", "(", "self", ")", ":", "\n", "    ", "metric_spec", "=", "BleuMetricSpec", "(", "{", "}", ")", "\n", "return", "self", ".", "_test_metric_spec", "(", "\n", "metric_spec", "=", "metric_spec", ",", "\n", "hyps", "=", "[", "\"A B C D E F\"", ",", "\"A B C D E F\"", "]", ",", "\n", "refs", "=", "[", "\"A B C D E F\"", ",", "\"A B A D E F\"", "]", ",", "\n", "expected_scores", "=", "[", "100.0", ",", "69.19", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.metrics_test.TestRougeMetricSpec.test_rouge_1_f_score": [[123, 142], ["seq2seq.metrics.metric_specs.RougeMetricSpec", "metrics_test.TestRougeMetricSpec._test_metric_spec", "metrics_test.TestRougeMetricSpec._test_metric_spec", "metrics_test.TestRougeMetricSpec._test_metric_spec"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.metrics_test.TestTextMetricSpec._test_metric_spec", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.metrics_test.TestTextMetricSpec._test_metric_spec", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.metrics_test.TestTextMetricSpec._test_metric_spec"], ["def", "test_rouge_1_f_score", "(", "self", ")", ":", "\n", "    ", "metric_spec", "=", "RougeMetricSpec", "(", "{", "\"rouge_type\"", ":", "\"rouge_1/f_score\"", "}", ")", "\n", "self", ".", "_test_metric_spec", "(", "\n", "metric_spec", "=", "metric_spec", ",", "\n", "hyps", "=", "[", "\"A B C D E F\"", ",", "\"A B C D E F\"", "]", ",", "\n", "refs", "=", "[", "\"A B C D E F\"", ",", "\"A B A D E F\"", "]", ",", "\n", "expected_scores", "=", "[", "1.0", ",", "0.954", "]", ")", "\n", "\n", "self", ".", "_test_metric_spec", "(", "\n", "metric_spec", "=", "metric_spec", ",", "\n", "hyps", "=", "[", "]", ",", "\n", "refs", "=", "[", "]", ",", "\n", "expected_scores", "=", "[", "0.0", "]", ")", "\n", "\n", "self", ".", "_test_metric_spec", "(", "\n", "metric_spec", "=", "metric_spec", ",", "\n", "hyps", "=", "[", "\"A\"", "]", ",", "\n", "refs", "=", "[", "\"B\"", "]", ",", "\n", "expected_scores", "=", "[", "0.0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.metrics_test.TestRougeMetricSpec.test_rouge_2_f_score": [[144, 163], ["seq2seq.metrics.metric_specs.RougeMetricSpec", "metrics_test.TestRougeMetricSpec._test_metric_spec", "metrics_test.TestRougeMetricSpec._test_metric_spec", "metrics_test.TestRougeMetricSpec._test_metric_spec"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.metrics_test.TestTextMetricSpec._test_metric_spec", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.metrics_test.TestTextMetricSpec._test_metric_spec", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.metrics_test.TestTextMetricSpec._test_metric_spec"], ["", "def", "test_rouge_2_f_score", "(", "self", ")", ":", "\n", "    ", "metric_spec", "=", "RougeMetricSpec", "(", "{", "\"rouge_type\"", ":", "\"rouge_2/f_score\"", "}", ")", "\n", "self", ".", "_test_metric_spec", "(", "\n", "metric_spec", "=", "metric_spec", ",", "\n", "hyps", "=", "[", "\"A B C D E F\"", ",", "\"A B C D E F\"", "]", ",", "\n", "refs", "=", "[", "\"A B C D E F\"", ",", "\"A B A D E F\"", "]", ",", "\n", "expected_scores", "=", "[", "1.0", ",", "0.8", "]", ")", "\n", "\n", "self", ".", "_test_metric_spec", "(", "\n", "metric_spec", "=", "metric_spec", ",", "\n", "hyps", "=", "[", "]", ",", "\n", "refs", "=", "[", "]", ",", "\n", "expected_scores", "=", "[", "0.0", "]", ")", "\n", "\n", "self", ".", "_test_metric_spec", "(", "\n", "metric_spec", "=", "metric_spec", ",", "\n", "hyps", "=", "[", "\"A\"", "]", ",", "\n", "refs", "=", "[", "\"B\"", "]", ",", "\n", "expected_scores", "=", "[", "0.0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.metrics_test.TestRougeMetricSpec.test_rouge_l_f_score": [[164, 184], ["seq2seq.metrics.metric_specs.RougeMetricSpec", "metrics_test.TestRougeMetricSpec._test_metric_spec", "metrics_test.TestRougeMetricSpec._test_metric_spec", "metrics_test.TestRougeMetricSpec._test_metric_spec"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.metrics_test.TestTextMetricSpec._test_metric_spec", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.metrics_test.TestTextMetricSpec._test_metric_spec", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.metrics_test.TestTextMetricSpec._test_metric_spec"], ["", "def", "test_rouge_l_f_score", "(", "self", ")", ":", "\n", "    ", "metric_spec", "=", "RougeMetricSpec", "(", "{", "\"rouge_type\"", ":", "\"rouge_l/f_score\"", "}", ")", "\n", "\n", "self", ".", "_test_metric_spec", "(", "\n", "metric_spec", "=", "metric_spec", ",", "\n", "hyps", "=", "[", "\"A B C D E F\"", ",", "\"A B C D E F\"", "]", ",", "\n", "refs", "=", "[", "\"A B C D E F\"", ",", "\"A B A D E F\"", "]", ",", "\n", "expected_scores", "=", "[", "1.0", ",", "0.916", "]", ")", "\n", "\n", "self", ".", "_test_metric_spec", "(", "\n", "metric_spec", "=", "metric_spec", ",", "\n", "hyps", "=", "[", "]", ",", "\n", "refs", "=", "[", "]", ",", "\n", "expected_scores", "=", "[", "0.0", "]", ")", "\n", "\n", "self", ".", "_test_metric_spec", "(", "\n", "metric_spec", "=", "metric_spec", ",", "\n", "hyps", "=", "[", "\"A\"", "]", ",", "\n", "refs", "=", "[", "\"B\"", "]", ",", "\n", "expected_scores", "=", "[", "0.0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.metrics_test.TestRougeMetric.test_rouge": [[189, 206], ["numpy.array", "numpy.array", "seq2seq.metrics.rouge.rouge", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge.rouge"], ["def", "test_rouge", "(", "self", ")", ":", "\n", "#pylint: disable=R0201", "\n", "    ", "hypotheses", "=", "np", ".", "array", "(", "[", "\n", "\"The brown fox jumps over the dog \u7b11\"", ",", "\n", "\"The brown fox jumps over the dog 2 \u7b11\"", "\n", "]", ")", "\n", "references", "=", "np", ".", "array", "(", "[", "\n", "\"The quick brown fox jumps over the lazy dog \u7b11\"", ",", "\n", "\"The quick brown fox jumps over the lazy dog \u7b11\"", "\n", "]", ")", "\n", "output", "=", "rouge", ".", "rouge", "(", "hypotheses", ",", "references", ")", "\n", "# pyrouge result: 0.84926", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "output", "[", "\"rouge_1/f_score\"", "]", ",", "0.865", ",", "decimal", "=", "2", ")", "\n", "# pyrouge result: 0.55238", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "output", "[", "\"rouge_2/f_score\"", "]", ",", "0.548", ",", "decimal", "=", "2", ")", "\n", "# pyrouge result 0.84926", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "output", "[", "\"rouge_l/f_score\"", "]", ",", "0.852", ",", "decimal", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.decoder_test.DecoderTests.__init__": [[38, 44], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "batch_size", "=", "4", "\n", "self", ".", "sequence_length", "=", "16", "\n", "self", ".", "input_depth", "=", "10", "\n", "self", ".", "vocab_size", "=", "100", "\n", "self", ".", "max_decode_length", "=", "20", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.decoder_test.DecoderTests.create_decoder": [[45, 52], ["None"], "methods", ["None"], ["", "def", "create_decoder", "(", "self", ",", "helper", ",", "mode", ")", ":", "\n", "    ", "\"\"\"Creates the decoder module.\n\n    This must be implemented by child classes and instantiate the appropriate\n    decoder to be tested.\n    \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.decoder_test.DecoderTests.test_with_fixed_inputs": [[53, 78], ["tensorflow.random_normal", "seq2seq.contrib.seq2seq.helper.TrainingHelper", "decoder_test.DecoderTests.create_decoder", "decoder_test.DecoderTests.cell.zero_state", "decoder_test.DecoderTests.", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "tensorflow.ones", "decoder_test.DecoderTests.test_session", "sess.run", "sess.run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.decoder_test.AttentionDecoderTest.create_decoder", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "def", "test_with_fixed_inputs", "(", "self", ")", ":", "\n", "    ", "inputs", "=", "tf", ".", "random_normal", "(", "\n", "[", "self", ".", "batch_size", ",", "self", ".", "sequence_length", ",", "self", ".", "input_depth", "]", ")", "\n", "seq_length", "=", "tf", ".", "ones", "(", "self", ".", "batch_size", ",", "dtype", "=", "tf", ".", "int32", ")", "*", "self", ".", "sequence_length", "\n", "\n", "helper", "=", "decode_helper", ".", "TrainingHelper", "(", "\n", "inputs", "=", "inputs", ",", "sequence_length", "=", "seq_length", ")", "\n", "decoder_fn", "=", "self", ".", "create_decoder", "(", "\n", "helper", "=", "helper", ",", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "initial_state", "=", "decoder_fn", ".", "cell", ".", "zero_state", "(", "\n", "self", ".", "batch_size", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "decoder_output", ",", "_", "=", "decoder_fn", "(", "initial_state", ",", "helper", ")", "\n", "\n", "#pylint: disable=E1101", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "decoder_output_", "=", "sess", ".", "run", "(", "decoder_output", ")", "\n", "\n", "", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "decoder_output_", ".", "logits", ".", "shape", ",", "\n", "[", "self", ".", "sequence_length", ",", "self", ".", "batch_size", ",", "self", ".", "vocab_size", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "decoder_output_", ".", "predicted_ids", ".", "shape", ",", "\n", "[", "self", ".", "sequence_length", ",", "self", ".", "batch_size", "]", ")", "\n", "\n", "return", "decoder_output_", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.decoder_test.DecoderTests.test_gradients": [[79, 108], ["tensorflow.random_normal", "numpy.random.randint", "seq2seq.contrib.seq2seq.helper.TrainingHelper", "decoder_test.DecoderTests.create_decoder", "decoder_test.DecoderTests.cell.zero_state", "decoder_test.DecoderTests.", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.compute_gradients", "tensorflow.ones", "tensorflow.reduce_mean", "decoder_test.DecoderTests.test_session", "sess.run", "sess.run", "decoder_test.DecoderTests.assertFalse", "tensorflow.global_variables_initializer", "numpy.isnan().any", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.decoder_test.AttentionDecoderTest.create_decoder", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "def", "test_gradients", "(", "self", ")", ":", "\n", "    ", "inputs", "=", "tf", ".", "random_normal", "(", "\n", "[", "self", ".", "batch_size", ",", "self", ".", "sequence_length", ",", "self", ".", "input_depth", "]", ")", "\n", "seq_length", "=", "tf", ".", "ones", "(", "self", ".", "batch_size", ",", "dtype", "=", "tf", ".", "int32", ")", "*", "self", ".", "sequence_length", "\n", "labels", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "vocab_size", ",", "\n", "[", "self", ".", "batch_size", ",", "self", ".", "sequence_length", "]", ")", "\n", "\n", "helper", "=", "decode_helper", ".", "TrainingHelper", "(", "\n", "inputs", "=", "inputs", ",", "sequence_length", "=", "seq_length", ")", "\n", "decoder_fn", "=", "self", ".", "create_decoder", "(", "\n", "helper", "=", "helper", ",", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "initial_state", "=", "decoder_fn", ".", "cell", ".", "zero_state", "(", "\n", "self", ".", "batch_size", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "decoder_output", ",", "_", "=", "decoder_fn", "(", "initial_state", ",", "helper", ")", "\n", "\n", "losses", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "decoder_output", ".", "logits", ",", "labels", "=", "labels", ")", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "0.001", ")", "\n", "grads_and_vars", "=", "optimizer", ".", "compute_gradients", "(", "tf", ".", "reduce_mean", "(", "losses", ")", ")", "\n", "\n", "#pylint: disable=E1101", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "grads_and_vars_", "=", "sess", ".", "run", "(", "grads_and_vars", ")", "\n", "\n", "", "for", "grad", ",", "_", "in", "grads_and_vars_", ":", "\n", "      ", "self", ".", "assertFalse", "(", "np", ".", "isnan", "(", "grad", ")", ".", "any", "(", ")", ")", "\n", "\n", "", "return", "grads_and_vars_", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.decoder_test.DecoderTests.test_with_dynamic_inputs": [[109, 130], ["tensorflow.get_variable", "seq2seq.contrib.seq2seq.helper.GreedyEmbeddingHelper", "decoder_test.DecoderTests.create_decoder", "decoder_test.DecoderTests.cell.zero_state", "decoder_test.DecoderTests.", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "decoder_test.DecoderTests.test_session", "sess.run", "sess.run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.decoder_test.AttentionDecoderTest.create_decoder", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "def", "test_with_dynamic_inputs", "(", "self", ")", ":", "\n", "    ", "embeddings", "=", "tf", ".", "get_variable", "(", "\"W_embed\"", ",", "[", "self", ".", "vocab_size", ",", "self", ".", "input_depth", "]", ")", "\n", "\n", "helper", "=", "decode_helper", ".", "GreedyEmbeddingHelper", "(", "\n", "embedding", "=", "embeddings", ",", "start_tokens", "=", "[", "0", "]", "*", "self", ".", "batch_size", ",", "end_token", "=", "-", "1", ")", "\n", "decoder_fn", "=", "self", ".", "create_decoder", "(", "\n", "helper", "=", "helper", ",", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "INFER", ")", "\n", "initial_state", "=", "decoder_fn", ".", "cell", ".", "zero_state", "(", "\n", "self", ".", "batch_size", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "decoder_output", ",", "_", "=", "decoder_fn", "(", "initial_state", ",", "helper", ")", "\n", "\n", "#pylint: disable=E1101", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "decoder_output_", "=", "sess", ".", "run", "(", "decoder_output", ")", "\n", "\n", "", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "decoder_output_", ".", "logits", ".", "shape", ",", "\n", "[", "self", ".", "max_decode_length", ",", "self", ".", "batch_size", ",", "self", ".", "vocab_size", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "decoder_output_", ".", "predicted_ids", ".", "shape", ",", "\n", "[", "self", ".", "max_decode_length", ",", "self", ".", "batch_size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.decoder_test.DecoderTests.test_with_beam_search": [[131, 179], ["seq2seq.inference.beam_search.BeamSearchConfig", "tensorflow.get_variable", "seq2seq.contrib.seq2seq.helper.GreedyEmbeddingHelper", "decoder_test.DecoderTests.create_decoder", "seq2seq.decoders.beam_search_decoder.BeamSearchDecoder", "seq2seq.decoders.beam_search_decoder.BeamSearchDecoder.cell.zero_state", "seq2seq.decoders.beam_search_decoder.BeamSearchDecoder.", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "decoder_test.DecoderTests.test_session", "sess.run", "sess.run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.decoder_test.AttentionDecoderTest.create_decoder", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "def", "test_with_beam_search", "(", "self", ")", ":", "\n", "    ", "self", ".", "batch_size", "=", "1", "\n", "\n", "# Batch size for beam search must be 1.", "\n", "config", "=", "beam_search", ".", "BeamSearchConfig", "(", "\n", "beam_width", "=", "10", ",", "\n", "vocab_size", "=", "self", ".", "vocab_size", ",", "\n", "eos_token", "=", "self", ".", "vocab_size", "-", "2", ",", "\n", "length_penalty_weight", "=", "0.6", ",", "\n", "choose_successors_fn", "=", "beam_search", ".", "choose_top_k", ")", "\n", "\n", "embeddings", "=", "tf", ".", "get_variable", "(", "\"W_embed\"", ",", "[", "self", ".", "vocab_size", ",", "self", ".", "input_depth", "]", ")", "\n", "\n", "helper", "=", "decode_helper", ".", "GreedyEmbeddingHelper", "(", "\n", "embedding", "=", "embeddings", ",", "\n", "start_tokens", "=", "[", "0", "]", "*", "config", ".", "beam_width", ",", "\n", "end_token", "=", "-", "1", ")", "\n", "decoder_fn", "=", "self", ".", "create_decoder", "(", "\n", "helper", "=", "helper", ",", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "INFER", ")", "\n", "decoder_fn", "=", "beam_search_decoder", ".", "BeamSearchDecoder", "(", "\n", "decoder", "=", "decoder_fn", ",", "config", "=", "config", ")", "\n", "\n", "initial_state", "=", "decoder_fn", ".", "cell", ".", "zero_state", "(", "\n", "self", ".", "batch_size", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "decoder_output", ",", "_", "=", "decoder_fn", "(", "initial_state", ",", "helper", ")", "\n", "\n", "#pylint: disable=E1101", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "decoder_output_", "=", "sess", ".", "run", "(", "decoder_output", ")", "\n", "\n", "", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "decoder_output_", ".", "predicted_ids", ".", "shape", ",", "\n", "[", "self", ".", "max_decode_length", ",", "1", ",", "config", ".", "beam_width", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "decoder_output_", ".", "beam_search_output", ".", "beam_parent_ids", ".", "shape", ",", "\n", "[", "self", ".", "max_decode_length", ",", "1", ",", "config", ".", "beam_width", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "decoder_output_", ".", "beam_search_output", ".", "scores", ".", "shape", ",", "\n", "[", "self", ".", "max_decode_length", ",", "1", ",", "config", ".", "beam_width", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "decoder_output_", ".", "beam_search_output", ".", "original_outputs", ".", "predicted_ids", ".", "shape", ",", "\n", "[", "self", ".", "max_decode_length", ",", "1", ",", "config", ".", "beam_width", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "decoder_output_", ".", "beam_search_output", ".", "original_outputs", ".", "logits", ".", "shape", ",", "\n", "[", "self", ".", "max_decode_length", ",", "1", ",", "config", ".", "beam_width", ",", "self", ".", "vocab_size", "]", ")", "\n", "\n", "return", "decoder_output", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.decoder_test.BasicDecoderTest.setUp": [[185, 189], ["tensorflow.test.TestCase.setUp", "tensorflow.logging.set_verbosity", "decoder_test.DecoderTests.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.setUp", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "tf", ".", "test", ".", "TestCase", ".", "setUp", "(", "self", ")", "\n", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "DecoderTests", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.decoder_test.BasicDecoderTest.create_decoder": [[190, 196], ["seq2seq.decoders.BasicDecoder.default_params", "seq2seq.decoders.BasicDecoder"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.LogPerplexityMetricSpec.default_params"], ["", "def", "create_decoder", "(", "self", ",", "helper", ",", "mode", ")", ":", "\n", "    ", "params", "=", "BasicDecoder", ".", "default_params", "(", ")", "\n", "params", "[", "\"max_decode_length\"", "]", "=", "self", ".", "max_decode_length", "\n", "decoder", "=", "BasicDecoder", "(", "params", "=", "params", ",", "mode", "=", "mode", ",", "vocab_size", "=", "self", ".", "vocab_size", ")", "\n", "\n", "return", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.decoder_test.AttentionDecoderTest.setUp": [[202, 208], ["tensorflow.test.TestCase.setUp", "tensorflow.logging.set_verbosity", "decoder_test.DecoderTests.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.setUp", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "tf", ".", "test", ".", "TestCase", ".", "setUp", "(", "self", ")", "\n", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "DecoderTests", ".", "__init__", "(", "self", ")", "\n", "self", ".", "attention_dim", "=", "64", "\n", "self", ".", "input_seq_len", "=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.decoder_test.AttentionDecoderTest.create_decoder": [[209, 229], ["seq2seq.decoders.AttentionLayerDot", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "seq2seq.decoders.AttentionDecoder.default_params", "seq2seq.decoders.AttentionDecoder", "numpy.random.randn", "numpy.random.randn", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.LogPerplexityMetricSpec.default_params"], ["", "def", "create_decoder", "(", "self", ",", "helper", ",", "mode", ")", ":", "\n", "    ", "attention_fn", "=", "AttentionLayerDot", "(", "\n", "params", "=", "{", "\"num_units\"", ":", "self", ".", "attention_dim", "}", ",", "\n", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "attention_values", "=", "tf", ".", "convert_to_tensor", "(", "\n", "np", ".", "random", ".", "randn", "(", "self", ".", "batch_size", ",", "self", ".", "input_seq_len", ",", "32", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "attention_keys", "=", "tf", ".", "convert_to_tensor", "(", "\n", "np", ".", "random", ".", "randn", "(", "self", ".", "batch_size", ",", "self", ".", "input_seq_len", ",", "32", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "params", "=", "AttentionDecoder", ".", "default_params", "(", ")", "\n", "params", "[", "\"max_decode_length\"", "]", "=", "self", ".", "max_decode_length", "\n", "return", "AttentionDecoder", "(", "\n", "params", "=", "params", ",", "\n", "mode", "=", "mode", ",", "\n", "vocab_size", "=", "self", ".", "vocab_size", ",", "\n", "attention_keys", "=", "attention_keys", ",", "\n", "attention_values", "=", "attention_values", ",", "\n", "attention_values_length", "=", "np", ".", "arange", "(", "self", ".", "batch_size", ")", "+", "1", ",", "\n", "attention_fn", "=", "attention_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.decoder_test.AttentionDecoderTest.test_attention_scores": [[230, 240], ["decoder_test.AttentionDecoderTest.test_with_fixed_inputs", "numpy.testing.assert_array_equal", "numpy.sum", "numpy.testing.assert_array_almost_equal", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.decoder_test.DecoderTests.test_with_fixed_inputs"], ["", "def", "test_attention_scores", "(", "self", ")", ":", "\n", "    ", "decoder_output_", "=", "self", ".", "test_with_fixed_inputs", "(", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "decoder_output_", ".", "attention_scores", ".", "shape", ",", "\n", "[", "self", ".", "sequence_length", ",", "self", ".", "batch_size", ",", "self", ".", "input_seq_len", "]", ")", "\n", "\n", "# Make sure the attention scores sum to 1 for each step", "\n", "scores_sum", "=", "np", ".", "sum", "(", "decoder_output_", ".", "attention_scores", ",", "axis", "=", "2", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "\n", "scores_sum", ",", "np", ".", "ones", "(", "[", "self", ".", "sequence_length", ",", "self", ".", "batch_size", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.utils.create_temp_parallel_data": [[26, 44], ["tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile.write", "tempfile.NamedTemporaryFile.flush", "tempfile.NamedTemporaryFile.write", "tempfile.NamedTemporaryFile.flush"], "function", ["None"], ["def", "create_temp_parallel_data", "(", "sources", ",", "targets", ")", ":", "\n", "  ", "\"\"\"\n  Creates a temporary TFRecords file.\n\n  Args:\n    source: List of source sentences\n    target: List of target sentences\n\n  Returns:\n    A tuple (sources_file, targets_file).\n  \"\"\"", "\n", "file_source", "=", "tempfile", ".", "NamedTemporaryFile", "(", ")", "\n", "file_target", "=", "tempfile", ".", "NamedTemporaryFile", "(", ")", "\n", "file_source", ".", "write", "(", "\"\\n\"", ".", "join", "(", "sources", ")", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "file_source", ".", "flush", "(", ")", "\n", "file_target", ".", "write", "(", "\"\\n\"", ".", "join", "(", "targets", ")", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "file_target", ".", "flush", "(", ")", "\n", "return", "file_source", ",", "file_target", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.utils.create_temp_tfrecords": [[46, 71], ["tempfile.NamedTemporaryFile", "tensorflow.python_io.TFRecordWriter", "zip", "tf.python_io.TFRecordWriter.close", "tensorflow.train.Example", "tf.train.Example.features.feature[].bytes_list.value.extend", "tf.train.Example.features.feature[].bytes_list.value.extend", "tf.python_io.TFRecordWriter.write", "tf.train.Example.SerializeToString", "source.encode", "target.encode"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.encode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.encode"], ["", "def", "create_temp_tfrecords", "(", "sources", ",", "targets", ")", ":", "\n", "  ", "\"\"\"\n  Creates a temporary TFRecords file.\n\n  Args:\n    source: List of source sentences\n    target: List of target sentences\n\n  Returns:\n    A tuple (sources_file, targets_file).\n  \"\"\"", "\n", "\n", "output_file", "=", "tempfile", ".", "NamedTemporaryFile", "(", ")", "\n", "writer", "=", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "output_file", ".", "name", ")", "\n", "for", "source", ",", "target", "in", "zip", "(", "sources", ",", "targets", ")", ":", "\n", "    ", "ex", "=", "tf", ".", "train", ".", "Example", "(", ")", "\n", "#pylint: disable=E1101", "\n", "ex", ".", "features", ".", "feature", "[", "\"source\"", "]", ".", "bytes_list", ".", "value", ".", "extend", "(", "\n", "[", "source", ".", "encode", "(", "\"utf-8\"", ")", "]", ")", "\n", "ex", ".", "features", ".", "feature", "[", "\"target\"", "]", ".", "bytes_list", ".", "value", ".", "extend", "(", "\n", "[", "target", ".", "encode", "(", "\"utf-8\"", ")", "]", ")", "\n", "writer", ".", "write", "(", "ex", ".", "SerializeToString", "(", ")", ")", "\n", "", "writer", ".", "close", "(", ")", "\n", "\n", "return", "output_file", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.utils.create_temporary_vocab_file": [[73, 92], ["tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile.flush", "zip", "tempfile.NamedTemporaryFile.write", "tempfile.NamedTemporaryFile.write"], "function", ["None"], ["", "def", "create_temporary_vocab_file", "(", "words", ",", "counts", "=", "None", ")", ":", "\n", "  ", "\"\"\"\n  Creates a temporary vocabulary file.\n\n  Args:\n    words: List of words in the vocabulary\n\n  Returns:\n    A temporary file object with one word per line\n  \"\"\"", "\n", "vocab_file", "=", "tempfile", ".", "NamedTemporaryFile", "(", ")", "\n", "if", "counts", "is", "None", ":", "\n", "    ", "for", "token", "in", "words", ":", "\n", "      ", "vocab_file", ".", "write", "(", "(", "token", "+", "\"\\n\"", ")", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "", "", "else", ":", "\n", "    ", "for", "token", ",", "count", "in", "zip", "(", "words", ",", "counts", ")", ":", "\n", "      ", "vocab_file", ".", "write", "(", "\"{}\\t{}\\n\"", ".", "format", "(", "token", ",", "count", ")", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "", "", "vocab_file", ".", "flush", "(", ")", "\n", "return", "vocab_file", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.data_test.SplitTokensDecoderTest.test_decode": [[36, 64], ["seq2seq.data.split_tokens_decoder.SplitTokensDecoder", "data_test.SplitTokensDecoderTest.assertEqual", "tensorflow.constant", "seq2seq.data.split_tokens_decoder.SplitTokensDecoder.decode", "seq2seq.data.split_tokens_decoder.SplitTokensDecoder.decode", "seq2seq.data.split_tokens_decoder.SplitTokensDecoder.decode", "data_test.SplitTokensDecoderTest.assertEqual", "numpy.testing.assert_array_equal", "data_test.SplitTokensDecoderTest.assertEqual", "numpy.testing.assert_array_equal", "seq2seq.data.split_tokens_decoder.SplitTokensDecoder.list_items", "seq2seq.data.split_tokens_decoder.SplitTokensDecoder.list_items", "data_test.SplitTokensDecoderTest.test_session", "sess.run", "numpy.char.decode", "numpy.char.decode", "sess.run", "sess.run", "decoded_tokens_.astype", "decoded_both_[].astype"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["def", "test_decode", "(", "self", ")", ":", "\n", "    ", "decoder", "=", "split_tokens_decoder", ".", "SplitTokensDecoder", "(", "\n", "delimiter", "=", "\" \"", ",", "\n", "tokens_feature_name", "=", "\"source_tokens\"", ",", "\n", "length_feature_name", "=", "\"source_len\"", ")", "\n", "\n", "self", ".", "assertEqual", "(", "decoder", ".", "list_items", "(", ")", ",", "[", "\"source_tokens\"", ",", "\"source_len\"", "]", ")", "\n", "\n", "data", "=", "tf", ".", "constant", "(", "\"Hello world ! \u7b11\uff57\"", ")", "\n", "\n", "decoded_tokens", "=", "decoder", ".", "decode", "(", "data", ",", "[", "\"source_tokens\"", "]", ")", "\n", "decoded_length", "=", "decoder", ".", "decode", "(", "data", ",", "[", "\"source_len\"", "]", ")", "\n", "decoded_both", "=", "decoder", ".", "decode", "(", "data", ",", "decoder", ".", "list_items", "(", ")", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "decoded_tokens_", "=", "sess", ".", "run", "(", "decoded_tokens", ")", "[", "0", "]", "\n", "decoded_length_", "=", "sess", ".", "run", "(", "decoded_length", ")", "[", "0", "]", "\n", "decoded_both_", "=", "sess", ".", "run", "(", "decoded_both", ")", "\n", "\n", "", "self", ".", "assertEqual", "(", "decoded_length_", ",", "4", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "np", ".", "char", ".", "decode", "(", "decoded_tokens_", ".", "astype", "(", "\"S\"", ")", ",", "\"utf-8\"", ")", ",", "\n", "[", "\"Hello\"", ",", "\"world\"", ",", "\"!\"", ",", "\"\u7b11\uff57\"", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "decoded_both_", "[", "1", "]", ",", "4", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "np", ".", "char", ".", "decode", "(", "decoded_both_", "[", "0", "]", ".", "astype", "(", "\"S\"", ")", ",", "\"utf-8\"", ")", ",", "\n", "[", "\"Hello\"", ",", "\"world\"", ",", "\"!\"", ",", "\"\u7b11\uff57\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.data_test.ParallelDataProviderTest.setUp": [[70, 84], ["super().setUp", "dict", "tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile", "data_test.ParallelDataProviderTest.source_file.write", "data_test.ParallelDataProviderTest.source_file.flush", "data_test.ParallelDataProviderTest.target_file.write", "data_test.ParallelDataProviderTest.target_file.flush", "zip"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.setUp"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "ParallelDataProviderTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "# Our data", "\n", "self", ".", "source_lines", "=", "[", "\"Hello\"", ",", "\"World\"", ",", "\"!\"", ",", "\"\u7b11\"", "]", "\n", "self", ".", "target_lines", "=", "[", "\"1\"", ",", "\"2\"", ",", "\"3\"", ",", "\"\u7b11\"", "]", "\n", "self", ".", "source_to_target", "=", "dict", "(", "zip", "(", "self", ".", "source_lines", ",", "self", ".", "target_lines", ")", ")", "\n", "\n", "# Create two parallel text files", "\n", "self", ".", "source_file", "=", "tempfile", ".", "NamedTemporaryFile", "(", ")", "\n", "self", ".", "target_file", "=", "tempfile", ".", "NamedTemporaryFile", "(", ")", "\n", "self", ".", "source_file", ".", "write", "(", "\"\\n\"", ".", "join", "(", "self", ".", "source_lines", ")", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "self", ".", "source_file", ".", "flush", "(", ")", "\n", "self", ".", "target_file", ".", "write", "(", "\"\\n\"", ".", "join", "(", "self", ".", "target_lines", ")", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "self", ".", "target_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.data_test.ParallelDataProviderTest.tearDown": [[85, 89], ["super().tearDown", "data_test.ParallelDataProviderTest.source_file.close", "data_test.ParallelDataProviderTest.target_file.close"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.data_test.ParallelDataProviderTest.tearDown", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "    ", "super", "(", "ParallelDataProviderTest", ",", "self", ")", ".", "tearDown", "(", ")", "\n", "self", ".", "source_file", ".", "close", "(", ")", "\n", "self", ".", "target_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.data_test.ParallelDataProviderTest.test_reading": [[90, 132], ["seq2seq.data.parallel_data_provider.make_parallel_data_provider", "list", "seq2seq.data.parallel_data_provider.make_parallel_data_provider.get", "dict", "data_test.ParallelDataProviderTest.assertEqual", "seq2seq.data.parallel_data_provider.make_parallel_data_provider.list_items", "zip", "set", "set", "data_test.ParallelDataProviderTest.test_session", "sess.run", "sess.run", "numpy.char.decode", "numpy.char.decode", "data_test.ParallelDataProviderTest.assertEqual", "data_test.ParallelDataProviderTest.assertEqual", "data_test.ParallelDataProviderTest.assertEqual", "data_test.ParallelDataProviderTest.assertEqual", "data_test.ParallelDataProviderTest.assertEqual", "numpy.testing.assert_array_equal", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "tensorflow.contrib.slim.queues.QueueRunners", "item_dict[].astype", "item_dict[].astype", "sess.run", "range", "expected_target.split"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "def", "test_reading", "(", "self", ")", ":", "\n", "    ", "num_epochs", "=", "50", "\n", "data_provider", "=", "make_parallel_data_provider", "(", "\n", "data_sources_source", "=", "[", "self", ".", "source_file", ".", "name", "]", ",", "\n", "data_sources_target", "=", "[", "self", ".", "target_file", ".", "name", "]", ",", "\n", "num_epochs", "=", "num_epochs", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n", "item_keys", "=", "list", "(", "data_provider", ".", "list_items", "(", ")", ")", "\n", "item_values", "=", "data_provider", ".", "get", "(", "item_keys", ")", "\n", "items_dict", "=", "dict", "(", "zip", "(", "item_keys", ",", "item_values", ")", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "set", "(", "item_keys", ")", ",", "\n", "set", "(", "[", "\"source_tokens\"", ",", "\"source_len\"", ",", "\"target_tokens\"", ",", "\"target_len\"", "]", ")", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "with", "tf", ".", "contrib", ".", "slim", ".", "queues", ".", "QueueRunners", "(", "sess", ")", ":", "\n", "        ", "item_dicts_", "=", "[", "sess", ".", "run", "(", "items_dict", ")", "for", "_", "in", "range", "(", "num_epochs", "*", "3", ")", "]", "\n", "\n", "", "", "for", "item_dict", "in", "item_dicts_", ":", "\n", "      ", "item_dict", "[", "\"target_tokens\"", "]", "=", "np", ".", "char", ".", "decode", "(", "\n", "item_dict", "[", "\"target_tokens\"", "]", ".", "astype", "(", "\"S\"", ")", ",", "\"utf-8\"", ")", "\n", "item_dict", "[", "\"source_tokens\"", "]", "=", "np", ".", "char", ".", "decode", "(", "\n", "item_dict", "[", "\"source_tokens\"", "]", ".", "astype", "(", "\"S\"", ")", ",", "\"utf-8\"", ")", "\n", "\n", "# Source is Data + SEQUENCE_END", "\n", "self", ".", "assertEqual", "(", "item_dict", "[", "\"source_len\"", "]", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "item_dict", "[", "\"source_tokens\"", "]", "[", "-", "1", "]", ",", "\"SEQUENCE_END\"", ")", "\n", "# Target is SEQUENCE_START + Data + SEQUENCE_END", "\n", "self", ".", "assertEqual", "(", "item_dict", "[", "\"target_len\"", "]", ",", "3", ")", "\n", "self", ".", "assertEqual", "(", "item_dict", "[", "\"target_tokens\"", "]", "[", "0", "]", ",", "\"SEQUENCE_START\"", ")", "\n", "self", ".", "assertEqual", "(", "item_dict", "[", "\"target_tokens\"", "]", "[", "-", "1", "]", ",", "\"SEQUENCE_END\"", ")", "\n", "\n", "# Make sure data is aligned", "\n", "source_joined", "=", "\" \"", ".", "join", "(", "item_dict", "[", "\"source_tokens\"", "]", "[", ":", "-", "1", "]", ")", "\n", "expected_target", "=", "self", ".", "source_to_target", "[", "source_joined", "]", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "item_dict", "[", "\"target_tokens\"", "]", ",", "\n", "[", "\"SEQUENCE_START\"", "]", "+", "expected_target", ".", "split", "(", "\" \"", ")", "+", "[", "\"SEQUENCE_END\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.data_test.ParallelDataProviderTest.test_reading_without_targets": [[133, 158], ["seq2seq.data.parallel_data_provider.make_parallel_data_provider", "list", "seq2seq.data.parallel_data_provider.make_parallel_data_provider.get", "dict", "data_test.ParallelDataProviderTest.assertEqual", "seq2seq.data.parallel_data_provider.make_parallel_data_provider.list_items", "zip", "set", "set", "data_test.ParallelDataProviderTest.test_session", "sess.run", "sess.run", "data_test.ParallelDataProviderTest.assertEqual", "numpy.char.decode", "data_test.ParallelDataProviderTest.assertEqual", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "tensorflow.contrib.slim.queues.QueueRunners", "item_dict[].astype", "sess.run", "range"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "", "def", "test_reading_without_targets", "(", "self", ")", ":", "\n", "    ", "num_epochs", "=", "50", "\n", "data_provider", "=", "make_parallel_data_provider", "(", "\n", "data_sources_source", "=", "[", "self", ".", "source_file", ".", "name", "]", ",", "\n", "data_sources_target", "=", "None", ",", "\n", "num_epochs", "=", "num_epochs", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n", "item_keys", "=", "list", "(", "data_provider", ".", "list_items", "(", ")", ")", "\n", "item_values", "=", "data_provider", ".", "get", "(", "item_keys", ")", "\n", "items_dict", "=", "dict", "(", "zip", "(", "item_keys", ",", "item_values", ")", ")", "\n", "\n", "self", ".", "assertEqual", "(", "set", "(", "item_keys", ")", ",", "set", "(", "[", "\"source_tokens\"", ",", "\"source_len\"", "]", ")", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "with", "tf", ".", "contrib", ".", "slim", ".", "queues", ".", "QueueRunners", "(", "sess", ")", ":", "\n", "        ", "item_dicts_", "=", "[", "sess", ".", "run", "(", "items_dict", ")", "for", "_", "in", "range", "(", "num_epochs", "*", "3", ")", "]", "\n", "\n", "", "", "for", "item_dict", "in", "item_dicts_", ":", "\n", "      ", "self", ".", "assertEqual", "(", "item_dict", "[", "\"source_len\"", "]", ",", "2", ")", "\n", "item_dict", "[", "\"source_tokens\"", "]", "=", "np", ".", "char", ".", "decode", "(", "\n", "item_dict", "[", "\"source_tokens\"", "]", ".", "astype", "(", "\"S\"", ")", ",", "\"utf-8\"", ")", "\n", "self", ".", "assertEqual", "(", "item_dict", "[", "\"source_tokens\"", "]", "[", "-", "1", "]", ",", "\"SEQUENCE_END\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.UnidirectionalRNNEncoderTest.setUp": [[34, 44], ["super().setUp", "tensorflow.logging.set_verbosity", "seq2seq.encoders.rnn_encoder.UnidirectionalRNNEncoder.default_params"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.setUp", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.LogPerplexityMetricSpec.default_params"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "UnidirectionalRNNEncoderTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "self", ".", "batch_size", "=", "4", "\n", "self", ".", "sequence_length", "=", "16", "\n", "self", ".", "input_depth", "=", "10", "\n", "self", ".", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", "\n", "self", ".", "params", "=", "rnn_encoder", ".", "UnidirectionalRNNEncoder", ".", "default_params", "(", ")", "\n", "self", ".", "params", "[", "\"rnn_cell\"", "]", "[", "\"cell_params\"", "]", "[", "\"num_units\"", "]", "=", "32", "\n", "self", ".", "params", "[", "\"rnn_cell\"", "]", "[", "\"cell_class\"", "]", "=", "\"BasicLSTMCell\"", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.UnidirectionalRNNEncoderTest.test_encode": [[45, 66], ["tensorflow.random_normal", "seq2seq.encoders.rnn_encoder.UnidirectionalRNNEncoder", "seq2seq.encoders.rnn_encoder.UnidirectionalRNNEncoder.", "numpy.testing.assert_array_equal", "rnn_encoder_test.UnidirectionalRNNEncoderTest.assertIsInstance", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "tensorflow.ones", "rnn_encoder_test.UnidirectionalRNNEncoderTest.test_session", "sess.run", "sess.run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "def", "test_encode", "(", "self", ")", ":", "\n", "    ", "inputs", "=", "tf", ".", "random_normal", "(", "\n", "[", "self", ".", "batch_size", ",", "self", ".", "sequence_length", ",", "self", ".", "input_depth", "]", ")", "\n", "example_length", "=", "tf", ".", "ones", "(", "\n", "self", ".", "batch_size", ",", "dtype", "=", "tf", ".", "int32", ")", "*", "self", ".", "sequence_length", "\n", "\n", "encode_fn", "=", "rnn_encoder", ".", "UnidirectionalRNNEncoder", "(", "self", ".", "params", ",", "self", ".", "mode", ")", "\n", "encoder_output", "=", "encode_fn", "(", "inputs", ",", "example_length", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "encoder_output_", "=", "sess", ".", "run", "(", "encoder_output", ")", "\n", "\n", "", "np", ".", "testing", ".", "assert_array_equal", "(", "encoder_output_", ".", "outputs", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "self", ".", "sequence_length", ",", "32", "]", ")", "\n", "self", ".", "assertIsInstance", "(", "encoder_output_", ".", "final_state", ",", "\n", "tf", ".", "contrib", ".", "rnn", ".", "LSTMStateTuple", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "encoder_output_", ".", "final_state", ".", "h", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "32", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "encoder_output_", ".", "final_state", ".", "c", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "32", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.BidirectionalRNNEncoderTest.setUp": [[73, 83], ["super().setUp", "tensorflow.logging.set_verbosity", "seq2seq.encoders.rnn_encoder.BidirectionalRNNEncoder.default_params"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.setUp", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.LogPerplexityMetricSpec.default_params"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "BidirectionalRNNEncoderTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "self", ".", "batch_size", "=", "4", "\n", "self", ".", "sequence_length", "=", "16", "\n", "self", ".", "input_depth", "=", "10", "\n", "self", ".", "params", "=", "rnn_encoder", ".", "BidirectionalRNNEncoder", ".", "default_params", "(", ")", "\n", "self", ".", "params", "[", "\"rnn_cell\"", "]", "[", "\"cell_params\"", "]", "[", "\"num_units\"", "]", "=", "32", "\n", "self", ".", "params", "[", "\"rnn_cell\"", "]", "[", "\"cell_class\"", "]", "=", "\"BasicLSTMCell\"", "\n", "self", ".", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.BidirectionalRNNEncoderTest.test_encode": [[84, 113], ["tensorflow.random_normal", "seq2seq.encoders.rnn_encoder.BidirectionalRNNEncoder", "seq2seq.encoders.rnn_encoder.BidirectionalRNNEncoder.", "numpy.testing.assert_array_equal", "rnn_encoder_test.BidirectionalRNNEncoderTest.assertIsInstance", "rnn_encoder_test.BidirectionalRNNEncoderTest.assertIsInstance", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "tensorflow.ones", "rnn_encoder_test.BidirectionalRNNEncoderTest.test_session", "sess.run", "sess.run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "def", "test_encode", "(", "self", ")", ":", "\n", "    ", "inputs", "=", "tf", ".", "random_normal", "(", "\n", "[", "self", ".", "batch_size", ",", "self", ".", "sequence_length", ",", "self", ".", "input_depth", "]", ")", "\n", "example_length", "=", "tf", ".", "ones", "(", "\n", "self", ".", "batch_size", ",", "dtype", "=", "tf", ".", "int32", ")", "*", "self", ".", "sequence_length", "\n", "\n", "encode_fn", "=", "rnn_encoder", ".", "BidirectionalRNNEncoder", "(", "self", ".", "params", ",", "self", ".", "mode", ")", "\n", "encoder_output", "=", "encode_fn", "(", "inputs", ",", "example_length", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "encoder_output_", "=", "sess", ".", "run", "(", "encoder_output", ")", "\n", "\n", "", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "encoder_output_", ".", "outputs", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "self", ".", "sequence_length", ",", "32", "*", "2", "]", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "encoder_output_", ".", "final_state", "[", "0", "]", ",", "\n", "tf", ".", "contrib", ".", "rnn", ".", "LSTMStateTuple", ")", "\n", "self", ".", "assertIsInstance", "(", "encoder_output_", ".", "final_state", "[", "1", "]", ",", "\n", "tf", ".", "contrib", ".", "rnn", ".", "LSTMStateTuple", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "encoder_output_", ".", "final_state", "[", "0", "]", ".", "h", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "32", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "encoder_output_", ".", "final_state", "[", "0", "]", ".", "c", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "32", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "encoder_output_", ".", "final_state", "[", "1", "]", ".", "h", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "32", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "encoder_output_", ".", "final_state", "[", "1", "]", ".", "c", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "32", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.setUp": [[120, 127], ["super().setUp", "tensorflow.logging.set_verbosity"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.setUp"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "StackBidirectionalRNNEncoderTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "self", ".", "batch_size", "=", "4", "\n", "self", ".", "sequence_length", "=", "16", "\n", "self", ".", "input_depth", "=", "10", "\n", "self", ".", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest._test_encode_with_params": [[128, 149], ["tensorflow.random_normal", "seq2seq.encoders.rnn_encoder.StackBidirectionalRNNEncoder", "seq2seq.encoders.rnn_encoder.StackBidirectionalRNNEncoder.", "numpy.testing.assert_array_equal", "tensorflow.ones", "rnn_encoder_test.StackBidirectionalRNNEncoderTest.test_session", "sess.run", "sess.run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "def", "_test_encode_with_params", "(", "self", ",", "params", ")", ":", "\n", "    ", "\"\"\"Tests the StackBidirectionalRNNEncoder with a specific cell\"\"\"", "\n", "inputs", "=", "tf", ".", "random_normal", "(", "\n", "[", "self", ".", "batch_size", ",", "self", ".", "sequence_length", ",", "self", ".", "input_depth", "]", ")", "\n", "example_length", "=", "tf", ".", "ones", "(", "\n", "self", ".", "batch_size", ",", "dtype", "=", "tf", ".", "int32", ")", "*", "self", ".", "sequence_length", "\n", "\n", "encode_fn", "=", "rnn_encoder", ".", "StackBidirectionalRNNEncoder", "(", "params", ",", "self", ".", "mode", ")", "\n", "encoder_output", "=", "encode_fn", "(", "inputs", ",", "example_length", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "encoder_output_", "=", "sess", ".", "run", "(", "encoder_output", ")", "\n", "\n", "", "output_size", "=", "encode_fn", ".", "params", "[", "\"rnn_cell\"", "]", "[", "\"cell_params\"", "]", "[", "\"num_units\"", "]", "\n", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "encoder_output_", ".", "outputs", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "self", ".", "sequence_length", ",", "output_size", "*", "2", "]", ")", "\n", "\n", "return", "encoder_output_", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.test_encode_with_single_cell": [[150, 172], ["rnn_encoder_test.StackBidirectionalRNNEncoderTest._test_encode_with_params", "rnn_encoder_test.StackBidirectionalRNNEncoderTest.assertIsInstance", "rnn_encoder_test.StackBidirectionalRNNEncoderTest.assertIsInstance", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest._test_encode_with_params"], ["", "def", "test_encode_with_single_cell", "(", "self", ")", ":", "\n", "    ", "encoder_output_", "=", "self", ".", "_test_encode_with_params", "(", "{", "\n", "\"rnn_cell\"", ":", "{", "\n", "\"num_layers\"", ":", "1", ",", "\n", "\"cell_params\"", ":", "{", "\n", "\"num_units\"", ":", "32", "\n", "}", "\n", "}", "\n", "}", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "encoder_output_", ".", "final_state", "[", "0", "]", "[", "0", "]", ",", "\n", "tf", ".", "contrib", ".", "rnn", ".", "LSTMStateTuple", ")", "\n", "self", ".", "assertIsInstance", "(", "encoder_output_", ".", "final_state", "[", "1", "]", "[", "0", "]", ",", "\n", "tf", ".", "contrib", ".", "rnn", ".", "LSTMStateTuple", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "encoder_output_", ".", "final_state", "[", "0", "]", "[", "0", "]", ".", "h", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "32", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "encoder_output_", ".", "final_state", "[", "0", "]", "[", "0", "]", ".", "c", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "32", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "encoder_output_", ".", "final_state", "[", "1", "]", "[", "0", "]", ".", "h", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "32", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "encoder_output_", ".", "final_state", "[", "1", "]", "[", "0", "]", ".", "c", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "32", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest.test_encode_with_multi_cell": [[173, 200], ["rnn_encoder_test.StackBidirectionalRNNEncoderTest._test_encode_with_params", "range", "rnn_encoder_test.StackBidirectionalRNNEncoderTest.assertIsInstance", "rnn_encoder_test.StackBidirectionalRNNEncoderTest.assertIsInstance", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.test.rnn_encoder_test.StackBidirectionalRNNEncoderTest._test_encode_with_params"], ["", "def", "test_encode_with_multi_cell", "(", "self", ")", ":", "\n", "    ", "encoder_output_", "=", "self", ".", "_test_encode_with_params", "(", "{", "\n", "\"rnn_cell\"", ":", "{", "\n", "\"num_layers\"", ":", "4", ",", "\n", "\"cell_params\"", ":", "{", "\n", "\"num_units\"", ":", "32", "\n", "}", "\n", "}", "\n", "}", ")", "\n", "\n", "for", "layer_idx", "in", "range", "(", "4", ")", ":", "\n", "      ", "self", ".", "assertIsInstance", "(", "encoder_output_", ".", "final_state", "[", "0", "]", "[", "layer_idx", "]", ",", "\n", "tf", ".", "contrib", ".", "rnn", ".", "LSTMStateTuple", ")", "\n", "self", ".", "assertIsInstance", "(", "encoder_output_", ".", "final_state", "[", "1", "]", "[", "layer_idx", "]", ",", "\n", "tf", ".", "contrib", ".", "rnn", ".", "LSTMStateTuple", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "encoder_output_", ".", "final_state", "[", "0", "]", "[", "layer_idx", "]", ".", "h", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "32", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "encoder_output_", ".", "final_state", "[", "0", "]", "[", "layer_idx", "]", ".", "c", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "32", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "encoder_output_", ".", "final_state", "[", "1", "]", "[", "layer_idx", "]", ".", "h", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "32", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "encoder_output_", ".", "final_state", "[", "1", "]", "[", "layer_idx", "]", ".", "c", ".", "shape", ",", "\n", "[", "self", ".", "batch_size", ",", "32", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contrib.rnn_cell.ExtendedMultiRNNCell.__init__": [[42, 73], ["tensorflow.contrib.rnn.MultiRNNCell.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "\n", "cells", ",", "\n", "residual_connections", "=", "False", ",", "\n", "residual_combiner", "=", "\"add\"", ",", "\n", "residual_dense", "=", "False", ")", ":", "\n", "    ", "\"\"\"Create a RNN cell composed sequentially of a number of RNNCells.\n\n    Args:\n      cells: list of RNNCells that will be composed in this order.\n      state_is_tuple: If True, accepted and returned states are n-tuples, where\n        `n = len(cells)`.  If False, the states are all\n        concatenated along the column axis.  This latter behavior will soon be\n        deprecated.\n      residual_connections: If true, add residual connections between all cells.\n        This requires all cells to have the same output_size. Also, iff the\n        input size is not equal to the cell output size, a linear transform\n        is added before the first layer.\n      residual_combiner: One of \"add\" or \"concat\". To create inputs for layer\n        t+1 either \"add\" the inputs from the prev layer or concat them.\n      residual_dense: Densely connect each layer to all other layers\n\n    Raises:\n      ValueError: if cells is empty (not allowed), or at least one of the cells\n        returns a state tuple but the flag `state_is_tuple` is `False`.\n    \"\"\"", "\n", "super", "(", "ExtendedMultiRNNCell", ",", "self", ")", ".", "__init__", "(", "cells", ",", "state_is_tuple", "=", "True", ")", "\n", "assert", "residual_combiner", "in", "[", "\"add\"", ",", "\"concat\"", ",", "\"mean\"", "]", "\n", "\n", "self", ".", "_residual_connections", "=", "residual_connections", "\n", "self", ".", "_residual_combiner", "=", "residual_combiner", "\n", "self", ".", "_residual_dense", "=", "residual_dense", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contrib.rnn_cell.ExtendedMultiRNNCell.__call__": [[74, 125], ["super().__call__", "tensorflow.variable_scope", "enumerate", "tuple", "tensorflow.python.ops.array_ops.concat", "tensorflow.contrib.layers.fully_connected", "tensorflow.variable_scope", "cell", "prev_inputs.append", "new_states.append", "tensorflow.contrib.layers.fully_connected.get_shape().as_list", "tensorflow.python.util.nest.is_sequence", "ValueError", "tensorflow.reduce_mean", "sum", "tensorflow.stack", "tensorflow.concat", "tensorflow.contrib.layers.fully_connected.get_shape", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_linking.StringLinking.__call__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.concat", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.concat"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "state", ",", "scope", "=", "None", ")", ":", "\n", "    ", "\"\"\"Run this multi-layer cell on inputs, starting from state.\"\"\"", "\n", "if", "not", "self", ".", "_residual_connections", ":", "\n", "      ", "return", "super", "(", "ExtendedMultiRNNCell", ",", "self", ")", ".", "__call__", "(", "\n", "inputs", ",", "state", ",", "(", "scope", "or", "\"extended_multi_rnn_cell\"", ")", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"extended_multi_rnn_cell\"", ")", ":", "\n", "# Adding Residual connections are only possible when input and output", "\n", "# sizes are equal. Optionally transform the initial inputs to", "\n", "# `cell[0].output_size`", "\n", "      ", "if", "self", ".", "_cells", "[", "0", "]", ".", "output_size", "!=", "inputs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "and", "(", "self", ".", "_residual_combiner", "in", "[", "\"add\"", ",", "\"mean\"", "]", ")", ":", "\n", "        ", "inputs", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "\n", "inputs", "=", "inputs", ",", "\n", "num_outputs", "=", "self", ".", "_cells", "[", "0", "]", ".", "output_size", ",", "\n", "activation_fn", "=", "None", ",", "\n", "scope", "=", "\"input_transform\"", ")", "\n", "\n", "# Iterate through all layers (code from MultiRNNCell)", "\n", "", "cur_inp", "=", "inputs", "\n", "prev_inputs", "=", "[", "cur_inp", "]", "\n", "new_states", "=", "[", "]", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "_cells", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"cell_%d\"", "%", "i", ")", ":", "\n", "          ", "if", "not", "nest", ".", "is_sequence", "(", "state", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Expected state to be a tuple of length %d, but received: %s\"", "%", "\n", "(", "len", "(", "self", ".", "state_size", ")", ",", "state", ")", ")", "\n", "", "cur_state", "=", "state", "[", "i", "]", "\n", "next_input", ",", "new_state", "=", "cell", "(", "cur_inp", ",", "cur_state", ")", "\n", "\n", "# Either combine all previous inputs or only the current input", "\n", "input_to_combine", "=", "prev_inputs", "[", "-", "1", ":", "]", "\n", "if", "self", ".", "_residual_dense", ":", "\n", "            ", "input_to_combine", "=", "prev_inputs", "\n", "\n", "# Add Residual connection", "\n", "", "if", "self", ".", "_residual_combiner", "==", "\"add\"", ":", "\n", "            ", "next_input", "=", "next_input", "+", "sum", "(", "input_to_combine", ")", "\n", "", "if", "self", ".", "_residual_combiner", "==", "\"mean\"", ":", "\n", "            ", "combined_mean", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "stack", "(", "input_to_combine", ")", ",", "0", ")", "\n", "next_input", "=", "next_input", "+", "combined_mean", "\n", "", "elif", "self", ".", "_residual_combiner", "==", "\"concat\"", ":", "\n", "            ", "next_input", "=", "tf", ".", "concat", "(", "[", "next_input", "]", "+", "input_to_combine", ",", "1", ")", "\n", "", "cur_inp", "=", "next_input", "\n", "prev_inputs", ".", "append", "(", "cur_inp", ")", "\n", "\n", "new_states", ".", "append", "(", "new_state", ")", "\n", "", "", "", "new_states", "=", "(", "tuple", "(", "new_states", ")", "\n", "if", "self", ".", "_state_is_tuple", "else", "array_ops", ".", "concat", "(", "new_states", ",", "1", ")", ")", "\n", "return", "cur_inp", ",", "new_states", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contrib.experiment.Experiment.__init__": [[25, 28], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "train_steps_per_iteration", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "Experiment", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_train_steps_per_iteration", "=", "train_steps_per_iteration", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contrib.experiment.Experiment._has_training_stopped": [[29, 37], ["eval_result.get"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get"], ["", "def", "_has_training_stopped", "(", "self", ",", "eval_result", ")", ":", "\n", "    ", "\"\"\"Determines whether the training has stopped.\"\"\"", "\n", "if", "not", "eval_result", ":", "\n", "      ", "return", "False", "\n", "\n", "", "global_step", "=", "eval_result", ".", "get", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_STEP", ")", "\n", "return", "global_step", "and", "self", ".", "_train_steps", "and", "(", "\n", "global_step", ">=", "self", ".", "_train_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contrib.experiment.Experiment.continuous_train_and_eval": [[38, 117], ["ValueError", "continuous_eval_predicate_fn", "experiment.Experiment._has_training_stopped", "tensorflow.logging.info", "experiment.Experiment._estimator.fit", "tensorflow.logging.info", "tensorflow.get_default_graph().finalize", "experiment.Experiment._estimator.evaluate", "experiment.Experiment._maybe_export", "callable", "min", "tensorflow.logging.info", "tensorflow.get_default_graph"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.contrib.experiment.Experiment._has_training_stopped", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.BPEncoder.fit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.infer_tree_traversal.InferenceTreeTraversal.finalize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.plot-1.evaluate"], ["", "def", "continuous_train_and_eval", "(", "self", ",", "\n", "continuous_eval_predicate_fn", "=", "None", ")", ":", "\n", "    ", "\"\"\"Interleaves training and evaluation.\n\n    The frequency of evaluation is controlled by the `train_steps_per_iteration`\n    (via constructor). The model will be first trained for\n    `train_steps_per_iteration`, and then be evaluated in turns.\n\n    This differs from `train_and_evaluate` as follows:\n      1. The procedure will have train and evaluation in turns. The model\n      will be trained for a number of steps (usuallly smaller than `train_steps`\n      if provided) and then be evaluated.  `train_and_evaluate` will train the\n      model for `train_steps` (no small training iteraions).\n\n      2. Due to the different approach this schedule takes, it leads to two\n      differences in resource control. First, the resources (e.g., memory) used\n      by training will be released before evaluation (`train_and_evaluate` takes\n      double resources). Second, more checkpoints will be saved as a checkpoint\n      is generated at the end of each small trainning iteration.\n\n    Args:\n      continuous_eval_predicate_fn: A predicate function determining whether to\n        continue after each iteration. `predicate_fn` takes the evaluation\n        results as its arguments. At the beginning of evaluation, the passed\n        eval results will be None so it's expected that the predicate function\n        handles that gracefully. When `predicate_fn` is not specified, this will\n        run in an infinite loop or exit when global_step reaches `train_steps`.\n\n    Returns:\n      A tuple of the result of the `evaluate` call to the `Estimator` and the\n      export results using the specified `ExportStrategy`.\n\n    Raises:\n      ValueError: if `continuous_eval_predicate_fn` is neither None nor\n        callable.\n    \"\"\"", "\n", "\n", "if", "(", "continuous_eval_predicate_fn", "is", "not", "None", "and", "\n", "not", "callable", "(", "continuous_eval_predicate_fn", ")", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"`continuous_eval_predicate_fn` must be a callable, or None.\"", ")", "\n", "\n", "", "eval_result", "=", "None", "\n", "\n", "# Set the default value for train_steps_per_iteration, which will be", "\n", "# overriden by other settings.", "\n", "train_steps_per_iteration", "=", "1000", "\n", "if", "self", ".", "_train_steps_per_iteration", "is", "not", "None", ":", "\n", "      ", "train_steps_per_iteration", "=", "self", ".", "_train_steps_per_iteration", "\n", "", "elif", "self", ".", "_train_steps", "is", "not", "None", ":", "\n", "# train_steps_per_iteration = int(self._train_steps / 10)", "\n", "      ", "train_steps_per_iteration", "=", "min", "(", "\n", "self", ".", "_min_eval_frequency", ",", "self", ".", "_train_steps", ")", "\n", "\n", "", "while", "(", "not", "continuous_eval_predicate_fn", "or", "\n", "continuous_eval_predicate_fn", "(", "eval_result", ")", ")", ":", "\n", "\n", "      ", "if", "self", ".", "_has_training_stopped", "(", "eval_result", ")", ":", "\n", "# Exits once max steps of training is satisfied.", "\n", "        ", "tf", ".", "logging", ".", "info", "(", "\"Stop training model as max steps reached\"", ")", "\n", "break", "\n", "\n", "", "tf", ".", "logging", ".", "info", "(", "\"Training model for %s steps\"", ",", "train_steps_per_iteration", ")", "\n", "self", ".", "_estimator", ".", "fit", "(", "\n", "input_fn", "=", "self", ".", "_train_input_fn", ",", "\n", "steps", "=", "train_steps_per_iteration", ",", "\n", "monitors", "=", "self", ".", "_train_monitors", ")", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"Evaluating model now.\"", ")", "\n", "tf", ".", "get_default_graph", "(", ")", ".", "finalize", "(", ")", "\n", "\n", "eval_result", "=", "self", ".", "_estimator", ".", "evaluate", "(", "\n", "input_fn", "=", "self", ".", "_eval_input_fn", ",", "\n", "steps", "=", "self", ".", "_eval_steps", ",", "\n", "metrics", "=", "self", ".", "_eval_metrics", ",", "\n", "name", "=", "\"one_pass\"", ",", "\n", "hooks", "=", "self", ".", "_eval_hooks", ")", "\n", "\n", "", "return", "eval_result", ",", "self", ".", "_maybe_export", "(", "eval_result", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.TrainingHook.__init__": [[48, 53], ["tensorflow.train.SessionRunHook.__init__", "seq2seq.configurable.Configurable.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "model_dir", ",", "run_config", ")", ":", "\n", "    ", "tf", ".", "train", ".", "SessionRunHook", ".", "__init__", "(", "self", ")", "\n", "Configurable", ".", "__init__", "(", "self", ",", "params", ",", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "self", ".", "_model_dir", "=", "model_dir", "\n", "self", ".", "_run_config", "=", "run_config", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.TrainingHook.model_dir": [[54, 59], ["os.path.abspath"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_dir", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns the directory model checkpoints are written to.\n    \"\"\"", "\n", "return", "os", ".", "path", ".", "abspath", "(", "self", ".", "_model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.TrainingHook.is_chief": [[60, 66], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_chief", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns true if and only if the current process is the chief.\n    This is used for distributed training.\n    \"\"\"", "\n", "return", "self", ".", "_run_config", ".", "is_chief", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.TrainingHook.default_params": [[67, 70], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractstaticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.MetadataCaptureHook.__init__": [[81, 87], ["hooks.TrainingHook.__init__", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "model_dir", ",", "run_config", ")", ":", "\n", "    ", "super", "(", "MetadataCaptureHook", ",", "self", ")", ".", "__init__", "(", "params", ",", "model_dir", ",", "run_config", ")", "\n", "self", ".", "_active", "=", "False", "\n", "self", ".", "_done", "=", "False", "\n", "self", ".", "_global_step", "=", "None", "\n", "self", ".", "_output_dir", "=", "os", ".", "path", ".", "abspath", "(", "self", ".", "model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.MetadataCaptureHook.default_params": [[88, 91], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "return", "{", "\"step\"", ":", "10", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.MetadataCaptureHook.begin": [[92, 94], ["tensorflow.train.get_global_step"], "methods", ["None"], ["", "def", "begin", "(", "self", ")", ":", "\n", "    ", "self", ".", "_global_step", "=", "tf", ".", "train", ".", "get_global_step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.MetadataCaptureHook.before_run": [[95, 104], ["tensorflow.train.SessionRunArgs", "tensorflow.logging.info", "tensorflow.RunOptions", "tensorflow.train.SessionRunArgs"], "methods", ["None"], ["", "def", "before_run", "(", "self", ",", "_run_context", ")", ":", "\n", "    ", "if", "not", "self", ".", "is_chief", "or", "self", ".", "_done", ":", "\n", "      ", "return", "\n", "", "if", "not", "self", ".", "_active", ":", "\n", "      ", "return", "tf", ".", "train", ".", "SessionRunArgs", "(", "self", ".", "_global_step", ")", "\n", "", "else", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"Performing full trace on next step.\"", ")", "\n", "run_options", "=", "tf", ".", "RunOptions", "(", "trace_level", "=", "tf", ".", "RunOptions", ".", "FULL_TRACE", ")", "#pylint: disable=E1101", "\n", "return", "tf", ".", "train", ".", "SessionRunArgs", "(", "self", ".", "_global_step", ",", "options", "=", "run_options", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.MetadataCaptureHook.after_run": [[105, 139], ["tensorflow.logging.info", "tensorflow.gfile.MakeDirs", "os.path.join", "os.path.join", "tensorflow.contrib.tfprof.tfprof_logger.write_op_log", "tensorflow.logging.info", "tensorflow.gfile.GFile", "trace_file.write", "tensorflow.logging.info", "tensorflow.gfile.GFile", "tensorflow.python.client.timeline.Timeline", "tensorflow.python.client.timeline.Timeline.generate_chrome_trace_format", "timeline_file.write", "tensorflow.logging.info", "run_values.run_metadata.SerializeToString", "tensorflow.get_default_graph"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["", "", "def", "after_run", "(", "self", ",", "_run_context", ",", "run_values", ")", ":", "\n", "    ", "if", "not", "self", ".", "is_chief", "or", "self", ".", "_done", ":", "\n", "      ", "return", "\n", "\n", "", "step_done", "=", "run_values", ".", "results", "\n", "if", "self", ".", "_active", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"Captured full trace at step %s\"", ",", "step_done", ")", "\n", "# Create output directory", "\n", "gfile", ".", "MakeDirs", "(", "self", ".", "_output_dir", ")", "\n", "\n", "# Save run metadata", "\n", "trace_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_output_dir", ",", "\"run_meta\"", ")", "\n", "with", "gfile", ".", "GFile", "(", "trace_path", ",", "\"wb\"", ")", "as", "trace_file", ":", "\n", "        ", "trace_file", ".", "write", "(", "run_values", ".", "run_metadata", ".", "SerializeToString", "(", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Saved run_metadata to %s\"", ",", "trace_path", ")", "\n", "\n", "# Save timeline", "\n", "", "timeline_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_output_dir", ",", "\"timeline.json\"", ")", "\n", "with", "gfile", ".", "GFile", "(", "timeline_path", ",", "\"w\"", ")", "as", "timeline_file", ":", "\n", "        ", "tl_info", "=", "timeline", ".", "Timeline", "(", "run_values", ".", "run_metadata", ".", "step_stats", ")", "\n", "tl_chrome", "=", "tl_info", ".", "generate_chrome_trace_format", "(", "show_memory", "=", "True", ")", "\n", "timeline_file", ".", "write", "(", "tl_chrome", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Saved timeline to %s\"", ",", "timeline_path", ")", "\n", "\n", "# Save tfprof op log", "\n", "", "tf", ".", "contrib", ".", "tfprof", ".", "tfprof_logger", ".", "write_op_log", "(", "\n", "graph", "=", "tf", ".", "get_default_graph", "(", ")", ",", "\n", "log_dir", "=", "self", ".", "_output_dir", ",", "\n", "run_meta", "=", "run_values", ".", "run_metadata", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Saved op log to %s\"", ",", "self", ".", "_output_dir", ")", "\n", "self", ".", "_active", "=", "False", "\n", "self", ".", "_done", "=", "True", "\n", "\n", "", "self", ".", "_active", "=", "(", "step_done", ">=", "self", ".", "params", "[", "\"step\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.TrainSampleHook.__init__": [[155, 167], ["hooks.TrainingHook.__init__", "os.path.join", "tensorflow.python.training.basic_session_run_hooks.SecondOrStepTimer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["def", "__init__", "(", "self", ",", "params", ",", "model_dir", ",", "run_config", ")", ":", "\n", "    ", "super", "(", "TrainSampleHook", ",", "self", ")", ".", "__init__", "(", "params", ",", "model_dir", ",", "run_config", ")", "\n", "self", ".", "_sample_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "\"samples\"", ")", "\n", "self", ".", "_timer", "=", "SecondOrStepTimer", "(", "\n", "every_secs", "=", "self", ".", "params", "[", "\"every_n_secs\"", "]", ",", "\n", "every_steps", "=", "self", ".", "params", "[", "\"every_n_steps\"", "]", ")", "\n", "self", ".", "_pred_dict", "=", "{", "}", "\n", "self", ".", "_should_trigger", "=", "False", "\n", "self", ".", "_iter_count", "=", "0", "\n", "self", ".", "_global_step", "=", "None", "\n", "self", ".", "_source_delimiter", "=", "self", ".", "params", "[", "\"source_delimiter\"", "]", "\n", "self", ".", "_target_delimiter", "=", "self", ".", "params", "[", "\"target_delimiter\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.TrainSampleHook.default_params": [[168, 175], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "return", "{", "\n", "\"every_n_secs\"", ":", "None", ",", "\n", "\"every_n_steps\"", ":", "1000", ",", "\n", "\"source_delimiter\"", ":", "\" \"", ",", "\n", "\"target_delimiter\"", ":", "\" \"", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.TrainSampleHook.begin": [[177, 184], ["tensorflow.train.get_global_step", "seq2seq.graph_utils.get_dict_from_collection", "tensorflow.gfile.MakeDirs"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.get_dict_from_collection"], ["", "def", "begin", "(", "self", ")", ":", "\n", "    ", "self", ".", "_iter_count", "=", "0", "\n", "self", ".", "_global_step", "=", "tf", ".", "train", ".", "get_global_step", "(", ")", "\n", "self", ".", "_pred_dict", "=", "graph_utils", ".", "get_dict_from_collection", "(", "\"predictions\"", ")", "\n", "# Create the sample directory", "\n", "if", "self", ".", "_sample_dir", "is", "not", "None", ":", "\n", "      ", "gfile", ".", "MakeDirs", "(", "self", ".", "_sample_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.TrainSampleHook.before_run": [[185, 195], ["hooks.TrainSampleHook._timer.should_trigger_for_step", "tensorflow.train.SessionRunArgs", "tensorflow.train.SessionRunArgs"], "methods", ["None"], ["", "", "def", "before_run", "(", "self", ",", "_run_context", ")", ":", "\n", "    ", "self", ".", "_should_trigger", "=", "self", ".", "_timer", ".", "should_trigger_for_step", "(", "self", ".", "_iter_count", ")", "\n", "if", "self", ".", "_should_trigger", ":", "\n", "      ", "fetches", "=", "{", "\n", "\"predicted_tokens\"", ":", "self", ".", "_pred_dict", "[", "\"predicted_tokens\"", "]", ",", "\n", "\"target_words\"", ":", "self", ".", "_pred_dict", "[", "\"labels.target_tokens\"", "]", ",", "\n", "\"target_len\"", ":", "self", ".", "_pred_dict", "[", "\"labels.target_len\"", "]", "\n", "}", "\n", "return", "tf", ".", "train", ".", "SessionRunArgs", "(", "[", "fetches", ",", "self", ".", "_global_step", "]", ")", "\n", "", "return", "tf", ".", "train", ".", "SessionRunArgs", "(", "[", "{", "}", ",", "self", ".", "_global_step", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.TrainSampleHook.after_create_session": [[196, 199], ["print", "session.graph.finalize"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.infer_tree_traversal.InferenceTreeTraversal.finalize"], ["", "def", "after_create_session", "(", "self", ",", "session", ",", "coord", ")", ":", "\n", "    ", "print", "(", "\"Session created. Finalizing graph.\"", ")", "\n", "session", ".", "graph", ".", "finalize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.TrainSampleHook.after_run": [[200, 232], ["tensorflow.logging.info", "hooks.TrainSampleHook._timer.update_last_triggered_step", "dict", "os.path.join", "zip", "zip", "hooks.TrainSampleHook._target_delimiter.encode().join().decode", "hooks.TrainSampleHook._target_delimiter.encode().join().decode", "tensorflow.gfile.GFile", "file.write", "result_dict.values", "hooks.TrainSampleHook._target_delimiter.encode().join", "hooks.TrainSampleHook._target_delimiter.encode().join", "hooks.TrainSampleHook._target_delimiter.encode", "hooks.TrainSampleHook._target_delimiter.encode"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.values", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.encode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.encode"], ["", "def", "after_run", "(", "self", ",", "_run_context", ",", "run_values", ")", ":", "\n", "    ", "result_dict", ",", "step", "=", "run_values", ".", "results", "\n", "self", ".", "_iter_count", "=", "step", "\n", "\n", "if", "not", "self", ".", "_should_trigger", ":", "\n", "      ", "return", "None", "\n", "\n", "# Convert dict of lists to list of dicts", "\n", "", "result_dicts", "=", "[", "\n", "dict", "(", "zip", "(", "result_dict", ",", "t", ")", ")", "for", "t", "in", "zip", "(", "*", "result_dict", ".", "values", "(", ")", ")", "\n", "]", "\n", "\n", "# Print results", "\n", "result_str", "=", "\"\"", "\n", "result_str", "+=", "\"Prediction followed by Target @ Step {}\\n\"", ".", "format", "(", "step", ")", "\n", "result_str", "+=", "(", "\"=\"", "*", "100", ")", "+", "\"\\n\"", "\n", "for", "result", "in", "result_dicts", ":", "\n", "      ", "target_len", "=", "result", "[", "\"target_len\"", "]", "\n", "predicted_slice", "=", "result", "[", "\"predicted_tokens\"", "]", "[", ":", "target_len", "-", "1", "]", "\n", "target_slice", "=", "result", "[", "\"target_words\"", "]", "[", "1", ":", "target_len", "]", "\n", "result_str", "+=", "self", ".", "_target_delimiter", ".", "encode", "(", "\"utf-8\"", ")", ".", "join", "(", "\n", "predicted_slice", ")", ".", "decode", "(", "\"utf-8\"", ")", "+", "\"\\n\"", "\n", "result_str", "+=", "self", ".", "_target_delimiter", ".", "encode", "(", "\"utf-8\"", ")", ".", "join", "(", "\n", "target_slice", ")", ".", "decode", "(", "\"utf-8\"", ")", "+", "\"\\n\\n\"", "\n", "", "result_str", "+=", "(", "\"=\"", "*", "100", ")", "+", "\"\\n\\n\"", "\n", "tf", ".", "logging", ".", "info", "(", "result_str", ")", "\n", "if", "self", ".", "_sample_dir", ":", "\n", "      ", "filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_sample_dir", ",", "\n", "\"samples_{:06d}.txt\"", ".", "format", "(", "step", ")", ")", "\n", "with", "gfile", ".", "GFile", "(", "filepath", ",", "\"w\"", ")", "as", "file", ":", "\n", "        ", "file", ".", "write", "(", "result_str", ")", "\n", "", "", "self", ".", "_timer", ".", "update_last_triggered_step", "(", "self", ".", "_iter_count", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.PrintModelAnalysisHook.__init__": [[239, 242], ["hooks.TrainingHook.__init__", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["def", "__init__", "(", "self", ",", "params", ",", "model_dir", ",", "run_config", ")", ":", "\n", "    ", "super", "(", "PrintModelAnalysisHook", ",", "self", ")", ".", "__init__", "(", "params", ",", "model_dir", ",", "run_config", ")", "\n", "self", ".", "_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "\"model_analysis.txt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.PrintModelAnalysisHook.default_params": [[243, 246], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.PrintModelAnalysisHook.begin": [[247, 258], ["os.path.abspath", "tensorflow.contrib.tfprof.model_analyzer.print_model_analysis", "tensorflow.gfile.GFile", "tensorflow.logging.info", "tensorflow.get_default_graph", "file.read"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.read"], ["", "def", "begin", "(", "self", ")", ":", "\n", "# Dump to file on the chief worker", "\n", "    ", "if", "self", ".", "is_chief", ":", "\n", "      ", "opts", "=", "tf", ".", "contrib", ".", "tfprof", ".", "model_analyzer", ".", "TRAINABLE_VARS_PARAMS_STAT_OPTIONS", "\n", "opts", "[", "'dump_to_file'", "]", "=", "os", ".", "path", ".", "abspath", "(", "self", ".", "_filename", ")", "\n", "tf", ".", "contrib", ".", "tfprof", ".", "model_analyzer", ".", "print_model_analysis", "(", "\n", "tf", ".", "get_default_graph", "(", ")", ",", "tfprof_options", "=", "opts", ")", "\n", "\n", "# Print the model analysis", "\n", "", "with", "gfile", ".", "GFile", "(", "self", ".", "_filename", ")", "as", "file", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "file", ".", "read", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.VariableRestoreHook.__init__": [[268, 271], ["hooks.TrainingHook.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "model_dir", ",", "run_config", ")", ":", "\n", "    ", "super", "(", "VariableRestoreHook", ",", "self", ")", ".", "__init__", "(", "params", ",", "model_dir", ",", "run_config", ")", "\n", "self", ".", "_saver", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.VariableRestoreHook.default_params": [[272, 275], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "return", "{", "\"prefix\"", ":", "\"\"", ",", "\"checkpoint_path\"", ":", "\"\"", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.VariableRestoreHook.begin": [[276, 294], ["tensorflow.contrib.framework.get_variables", "tensorflow.logging.info", "tensorflow.train.Saver", "hooks.VariableRestoreHook.params[].split", "name.replace", "hooks.VariableRestoreHook.begin.varname_in_checkpoint"], "methods", ["None"], ["", "def", "begin", "(", "self", ")", ":", "\n", "    ", "variables", "=", "tf", ".", "contrib", ".", "framework", ".", "get_variables", "(", "scope", "=", "self", ".", "params", "[", "\"prefix\"", "]", ")", "\n", "\n", "def", "varname_in_checkpoint", "(", "name", ")", ":", "\n", "      ", "\"\"\"Removes the prefix from the variable name.\n      \"\"\"", "\n", "prefix_parts", "=", "self", ".", "params", "[", "\"prefix\"", "]", ".", "split", "(", "\"/\"", ")", "\n", "checkpoint_prefix", "=", "\"/\"", ".", "join", "(", "prefix_parts", "[", ":", "-", "1", "]", ")", "\n", "return", "name", ".", "replace", "(", "checkpoint_prefix", "+", "\"/\"", ",", "\"\"", ")", "\n", "\n", "", "target_names", "=", "[", "varname_in_checkpoint", "(", "_", ".", "op", ".", "name", ")", "for", "_", "in", "variables", "]", "\n", "restore_map", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "target_names", ",", "variables", ")", "}", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"Restoring variables: \\n%s\"", ",", "\n", "yaml", ".", "dump", "(", "{", "k", ":", "v", ".", "op", ".", "name", "\n", "for", "k", ",", "v", "in", "restore_map", ".", "items", "(", ")", "}", ")", ")", "\n", "\n", "self", ".", "_saver", "=", "tf", ".", "train", ".", "Saver", "(", "restore_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.VariableRestoreHook.after_create_session": [[295, 298], ["hooks.VariableRestoreHook._saver.restore", "tensorflow.logging.info"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.Saver.restore"], ["", "def", "after_create_session", "(", "self", ",", "session", ",", "coord", ")", ":", "\n", "    ", "self", ".", "_saver", ".", "restore", "(", "session", ",", "self", ".", "params", "[", "\"checkpoint_path\"", "]", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Successfully restored all variables\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.DelayStartHook.__init__": [[304, 310], ["hooks.TrainingHook.__init__", "int", "tensorflow.train.GlobalStepWaiterHook.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "model_dir", ",", "run_config", ")", ":", "\n", "    ", "TrainingHook", ".", "__init__", "(", "self", ",", "params", ",", "model_dir", ",", "run_config", ")", "\n", "self", ".", "_task_id", "=", "self", ".", "_run_config", ".", "task_id", "\n", "self", ".", "_delay_k", "=", "self", ".", "params", "[", "\"delay_k\"", "]", "\n", "self", ".", "_wait_until_step", "=", "int", "(", "self", ".", "_delay_k", "*", "self", ".", "_task_id", ")", "\n", "tf", ".", "train", ".", "GlobalStepWaiterHook", ".", "__init__", "(", "self", ",", "self", ".", "_wait_until_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.DelayStartHook.default_params": [[311, 314], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "return", "{", "\"delay_k\"", ":", "500", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.SyncReplicasOptimizerHook.__init__": [[319, 329], ["hooks.TrainingHook.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "model_dir", ",", "run_config", ")", ":", "\n", "    ", "super", "(", "SyncReplicasOptimizerHook", ",", "self", ")", ".", "__init__", "(", "\n", "params", ",", "model_dir", ",", "run_config", ")", "\n", "self", ".", "_sync_optimizer", "=", "None", "\n", "self", ".", "_num_tokens", "=", "-", "1", "\n", "\n", "self", ".", "_local_init_op", "=", "None", "\n", "self", ".", "_ready_for_local_init_op", "=", "None", "\n", "self", ".", "_q_runner", "=", "None", "\n", "self", ".", "_init_tokens_op", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.SyncReplicasOptimizerHook.default_params": [[330, 333], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.SyncReplicasOptimizerHook.begin": [[334, 357], ["ValueError", "hooks.SyncReplicasOptimizerHook._sync_optimizer.get_chief_queue_runner", "hooks.SyncReplicasOptimizerHook._sync_optimizer.get_init_tokens_op"], "methods", ["None"], ["", "def", "begin", "(", "self", ")", ":", "\n", "    ", "if", "global_vars", ".", "SYNC_REPLICAS_OPTIMIZER", "is", "not", "None", ":", "\n", "      ", "self", ".", "_sync_optimizer", "=", "global_vars", ".", "SYNC_REPLICAS_OPTIMIZER", "\n", "", "else", ":", "\n", "      ", "return", "\n", "\n", "", "if", "self", ".", "_sync_optimizer", ".", "_gradients_applied", "is", "False", ":", "# pylint: disable=protected-access", "\n", "      ", "raise", "ValueError", "(", "\n", "\"SyncReplicasOptimizer.apply_gradient should be called before using \"", "\n", "\"the hook.\"", ")", "\n", "", "if", "self", ".", "is_chief", ":", "\n", "      ", "self", ".", "_local_init_op", "=", "self", ".", "_sync_optimizer", ".", "chief_init_op", "\n", "self", ".", "_ready_for_local_init_op", "=", "(", "\n", "self", ".", "_sync_optimizer", ".", "ready_for_local_init_op", ")", "\n", "self", ".", "_q_runner", "=", "self", ".", "_sync_optimizer", ".", "get_chief_queue_runner", "(", ")", "\n", "self", ".", "_init_tokens_op", "=", "self", ".", "_sync_optimizer", ".", "get_init_tokens_op", "(", "\n", "self", ".", "_num_tokens", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "_local_init_op", "=", "self", ".", "_sync_optimizer", ".", "local_step_init_op", "\n", "self", ".", "_ready_for_local_init_op", "=", "(", "\n", "self", ".", "_sync_optimizer", ".", "ready_for_local_init_op", ")", "\n", "self", ".", "_q_runner", "=", "None", "\n", "self", ".", "_init_tokens_op", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.hooks.SyncReplicasOptimizerHook.after_create_session": [[358, 380], ["tensorflow.logging.info", "tensorflow.python.training.session_manager._ready", "session.run", "RuntimeError", "session.run", "hooks.SyncReplicasOptimizerHook._q_runner.create_threads"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run"], ["", "", "def", "after_create_session", "(", "self", ",", "session", ",", "coord", ")", ":", "\n", "    ", "\"\"\"Runs SyncReplicasOptimizer initialization ops.\"\"\"", "\n", "\n", "if", "not", "self", ".", "_sync_optimizer", ":", "\n", "      ", "return", "\n", "\n", "", "tf", ".", "logging", ".", "info", "(", "\"Found SyncReplicasOptimizer. Initializing.\"", ")", "\n", "\n", "local_init_success", ",", "msg", "=", "session_manager", ".", "_ready", "(", "# pylint: disable=protected-access", "\n", "self", ".", "_ready_for_local_init_op", ",", "session", ",", "\n", "\"Model is not ready for SyncReplicasOptimizer local init.\"", ")", "\n", "if", "not", "local_init_success", ":", "\n", "      ", "raise", "RuntimeError", "(", "\n", "\"Init operations did not make model ready for SyncReplicasOptimizer \"", "\n", "\"local_init. Init op: %s, error: %s\"", "%", "\n", "(", "self", ".", "_local_init_op", ".", "name", ",", "msg", ")", ")", "\n", "", "session", ".", "run", "(", "self", ".", "_local_init_op", ")", "\n", "if", "self", ".", "_init_tokens_op", "is", "not", "None", ":", "\n", "      ", "session", ".", "run", "(", "self", ".", "_init_tokens_op", ")", "\n", "", "if", "self", ".", "_q_runner", "is", "not", "None", ":", "\n", "      ", "self", ".", "_q_runner", ".", "create_threads", "(", "\n", "session", ",", "coord", "=", "coord", ",", "daemon", "=", "True", ",", "start", "=", "True", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.__init__": [[46, 49], ["None"], "methods", ["None"], ["", "def", "create_temp_tfrecords", "(", "sources", ",", "targets", ")", ":", "\n", "  "]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.model_class": [[50, 54], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.model_params": [[55, 59], ["None"], "methods", ["None"], ["\n", "\n", "output_file", "=", "tempfile", ".", "NamedTemporaryFile", "(", ")", "\n", "writer", "=", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "output_file", ".", "name", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.path": [[60, 68], ["os.path.join"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["for", "source", ",", "target", "in", "zip", "(", "sources", ",", "targets", ")", ":", "\n", "    ", "ex", "=", "tf", ".", "train", ".", "Example", "(", ")", "\n", "#pylint: disable=E1101", "\n", "ex", ".", "features", ".", "feature", "[", "\"source\"", "]", ".", "bytes_list", ".", "value", ".", "extend", "(", "\n", "[", "source", ".", "encode", "(", "\"utf-8\"", ")", "]", ")", "\n", "ex", ".", "features", ".", "feature", "[", "\"target\"", "]", ".", "bytes_list", ".", "value", ".", "extend", "(", "\n", "[", "target", ".", "encode", "(", "\"utf-8\"", ")", "]", ")", "\n", "writer", ".", "write", "(", "ex", ".", "SerializeToString", "(", ")", ")", "\n", "", "writer", ".", "close", "(", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.dump": [[69, 84], ["tensorflow.gfile.MakeDirs", "tensorflow.gfile.GFile", "file.write", "utils.TrainOptions.path", "json.dumps().encode", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.path", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.encode"], ["\n", "return", "output_file", "\n", "\n", "\n", "", "def", "create_temporary_vocab_file", "(", "words", ",", "counts", "=", "None", ")", ":", "\n", "  ", "\"\"\"\n  Creates a temporary vocabulary file.\n\n  Args:\n    words: List of words in the vocabulary\n\n  Returns:\n    A temporary file object with one word per line\n  \"\"\"", "\n", "vocab_file", "=", "tempfile", ".", "NamedTemporaryFile", "(", ")", "\n", "if", "counts", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.load": [[85, 99], ["collections.defaultdict", "utils.TrainOptions", "tensorflow.gfile.GFile", "json.loads", "utils.TrainOptions.path", "file.read().decode", "file.read"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.path", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.read"], ["    ", "for", "token", "in", "words", ":", "\n", "      ", "vocab_file", ".", "write", "(", "(", "token", "+", "\"\\n\"", ")", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "", "", "else", ":", "\n", "    ", "for", "token", ",", "count", "in", "zip", "(", "words", ",", "counts", ")", ":", "\n", "      ", "vocab_file", ".", "write", "(", "\"{}\\t{}\\n\"", ".", "format", "(", "token", ",", "count", ")", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "", "", "vocab_file", ".", "flush", "(", ")", "\n", "return", "vocab_file", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.cell_from_spec": [[101, 127], ["cell_params.copy.copy", "set", "cell_params.copy.keys", "cell_class", "pydoc.locate", "getattr", "ValueError", "inspect.getargspec"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.get_rnn_cell": [[129, 175], ["range", "utils.cell_from_spec", "cells.append", "len", "seq2seq.contrib.rnn_cell.ExtendedMultiRNNCell", "tensorflow.contrib.rnn.DropoutWrapper"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.cell_from_spec", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.create_learning_rate_decay_fn": [[177, 232], ["tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.to_int32", "getattr", "getattr.", "tensorflow.train.piecewise_constant", "tensorflow.maximum", "tensorflow.minimum"], "function", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.create_input_fn": [[234, 294], ["tensorflow.variable_scope", "pipeline.make_data_provider", "pipeline.read_from_data_provider", "set().intersection", "tensorflow.contrib.training.bucket_by_sequence_length", "tensorflow.train.batch", "set", "tf.train.batch.keys"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.__init__": [[440, 469], ["spider_eval.Evaluator.kmaps.keys", "os.path.join", "third_party.spider.process_sql.Schema", "third_party.spider.process_sql.get_schema"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.get_schema"], ["def", "__init__", "(", "self", ",", "db_dir", ",", "kmaps", ",", "etype", ")", ":", "\n", "        ", "self", ".", "db_dir", "=", "db_dir", "\n", "self", ".", "kmaps", "=", "kmaps", "\n", "self", ".", "etype", "=", "etype", "\n", "\n", "self", ".", "db_paths", "=", "{", "}", "\n", "self", ".", "schemas", "=", "{", "}", "\n", "for", "db_name", "in", "self", ".", "kmaps", ".", "keys", "(", ")", ":", "\n", "            ", "db_path", "=", "os", ".", "path", ".", "join", "(", "db_dir", ",", "db_name", ",", "db_name", "+", "\".sqlite\"", ")", "\n", "self", ".", "db_paths", "[", "db_name", "]", "=", "db_path", "\n", "self", ".", "schemas", "[", "db_name", "]", "=", "Schema", "(", "get_schema", "(", "db_path", ")", ")", "\n", "\n", "", "self", ".", "scores", "=", "{", "\n", "level", ":", "{", "\n", "\"count\"", ":", "0", ",", "\n", "\"partial\"", ":", "{", "\n", "type_", ":", "{", "\n", "\"acc\"", ":", "0.0", ",", "\n", "\"rec\"", ":", "0.0", ",", "\n", "\"f1\"", ":", "0.0", ",", "\n", "\"acc_count\"", ":", "0", ",", "\n", "\"rec_count\"", ":", "0", ",", "\n", "}", "\n", "for", "type_", "in", "PARTIAL_TYPES", "\n", "}", ",", "\n", "\"exact\"", ":", "0.0", ",", "\n", "\"exec\"", ":", "0", ",", "\n", "}", "\n", "for", "level", "in", "LEVELS", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.eval_hardness": [[471, 491], ["spider_eval.count_component1", "spider_eval.count_component2", "spider_eval.count_others"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_component1", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_component2", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_others"], ["", "@", "staticmethod", "\n", "def", "eval_hardness", "(", "sql", ")", ":", "\n", "        ", "count_comp1_", "=", "count_component1", "(", "sql", ")", "\n", "count_comp2_", "=", "count_component2", "(", "sql", ")", "\n", "count_others_", "=", "count_others", "(", "sql", ")", "\n", "\n", "if", "count_comp1_", "<=", "1", "and", "count_others_", "==", "0", "and", "count_comp2_", "==", "0", ":", "\n", "            ", "return", "\"easy\"", "\n", "", "elif", "(", "count_others_", "<=", "2", "and", "count_comp1_", "<=", "1", "and", "count_comp2_", "==", "0", ")", "or", "(", "\n", "count_comp1_", "<=", "2", "and", "count_others_", "<", "2", "and", "count_comp2_", "==", "0", "\n", ")", ":", "\n", "            ", "return", "\"medium\"", "\n", "", "elif", "(", "\n", "(", "count_others_", ">", "2", "and", "count_comp1_", "<=", "2", "and", "count_comp2_", "==", "0", ")", "\n", "or", "(", "2", "<", "count_comp1_", "<=", "3", "and", "count_others_", "<=", "2", "and", "count_comp2_", "==", "0", ")", "\n", "or", "(", "count_comp1_", "<=", "1", "and", "count_others_", "==", "0", "and", "count_comp2_", "<=", "1", ")", "\n", ")", ":", "\n", "            ", "return", "\"hard\"", "\n", "", "else", ":", "\n", "            ", "return", "\"extra\"", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.eval_hardness_2": [[492, 508], ["spider_eval.count_component1", "spider_eval.count_component2", "spider_eval.count_others"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_component1", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_component2", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_others"], ["", "", "@", "staticmethod", "\n", "def", "eval_hardness_2", "(", "sql", ")", ":", "\n", "        ", "\"\"\"\n        Eval the level of composition \n        \"\"\"", "\n", "count_comp1_", "=", "count_component1", "(", "sql", ")", "\n", "count_comp2_", "=", "count_component2", "(", "sql", ")", "\n", "count_others_", "=", "count_others", "(", "sql", ")", "\n", "\n", "if", "count_comp2_", "==", "0", "and", "count_others_", "==", "0", ":", "\n", "            ", "return", "\"basic\"", "\n", "", "elif", "count_others_", ">", "0", "and", "count_comp2_", "==", "0", ":", "\n", "            ", "return", "\"comp1\"", "\n", "", "else", ":", "\n", "            ", "assert", "count_comp2_", ">", "0", "\n", "return", "\"comp2\"", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.eval_exact_match": [[509, 519], ["list", "partial_scores.items", "len", "sorted", "sorted"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], ["", "", "@", "classmethod", "\n", "def", "eval_exact_match", "(", "cls", ",", "pred", ",", "label", ",", "partial_scores", ")", ":", "\n", "        ", "for", "_", ",", "score", "in", "list", "(", "partial_scores", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "score", "[", "\"f1\"", "]", "!=", "1", ":", "\n", "                ", "return", "0", "\n", "", "", "if", "len", "(", "label", "[", "\"from\"", "]", "[", "\"table_units\"", "]", ")", ">", "0", ":", "\n", "            ", "label_tables", "=", "sorted", "(", "label", "[", "\"from\"", "]", "[", "\"table_units\"", "]", ")", "\n", "pred_tables", "=", "sorted", "(", "pred", "[", "\"from\"", "]", "[", "\"table_units\"", "]", ")", "\n", "return", "label_tables", "==", "pred_tables", "\n", "", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.eval_partial_match": [[520, 621], ["spider_eval.eval_sel", "spider_eval.get_scores", "spider_eval.get_scores", "spider_eval.eval_where", "spider_eval.get_scores", "spider_eval.get_scores", "spider_eval.eval_group", "spider_eval.get_scores", "spider_eval.eval_having", "spider_eval.get_scores", "spider_eval.eval_order", "spider_eval.get_scores", "spider_eval.eval_and_or", "spider_eval.get_scores", "spider_eval.eval_IUEN", "spider_eval.get_scores", "spider_eval.eval_keywords", "spider_eval.get_scores"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_sel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_where", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_group", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_having", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_order", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_and_or", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_IUEN", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_keywords", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores"], ["", "@", "classmethod", "\n", "def", "eval_partial_match", "(", "cls", ",", "pred", ",", "label", ")", ":", "\n", "        ", "res", "=", "{", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", ",", "cnt_wo_agg", "=", "eval_sel", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "\"select\"", "]", "=", "{", "\n", "\"acc\"", ":", "acc", ",", "\n", "\"rec\"", ":", "rec", ",", "\n", "\"f1\"", ":", "f1", ",", "\n", "\"label_total\"", ":", "label_total", ",", "\n", "\"pred_total\"", ":", "pred_total", ",", "\n", "}", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt_wo_agg", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "\"select(no AGG)\"", "]", "=", "{", "\n", "\"acc\"", ":", "acc", ",", "\n", "\"rec\"", ":", "rec", ",", "\n", "\"f1\"", ":", "f1", ",", "\n", "\"label_total\"", ":", "label_total", ",", "\n", "\"pred_total\"", ":", "pred_total", ",", "\n", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", ",", "cnt_wo_agg", "=", "eval_where", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "\"where\"", "]", "=", "{", "\n", "\"acc\"", ":", "acc", ",", "\n", "\"rec\"", ":", "rec", ",", "\n", "\"f1\"", ":", "f1", ",", "\n", "\"label_total\"", ":", "label_total", ",", "\n", "\"pred_total\"", ":", "pred_total", ",", "\n", "}", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt_wo_agg", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "\"where(no OP)\"", "]", "=", "{", "\n", "\"acc\"", ":", "acc", ",", "\n", "\"rec\"", ":", "rec", ",", "\n", "\"f1\"", ":", "f1", ",", "\n", "\"label_total\"", ":", "label_total", ",", "\n", "\"pred_total\"", ":", "pred_total", ",", "\n", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_group", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "\"group(no Having)\"", "]", "=", "{", "\n", "\"acc\"", ":", "acc", ",", "\n", "\"rec\"", ":", "rec", ",", "\n", "\"f1\"", ":", "f1", ",", "\n", "\"label_total\"", ":", "label_total", ",", "\n", "\"pred_total\"", ":", "pred_total", ",", "\n", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_having", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "\"group\"", "]", "=", "{", "\n", "\"acc\"", ":", "acc", ",", "\n", "\"rec\"", ":", "rec", ",", "\n", "\"f1\"", ":", "f1", ",", "\n", "\"label_total\"", ":", "label_total", ",", "\n", "\"pred_total\"", ":", "pred_total", ",", "\n", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_order", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "\"order\"", "]", "=", "{", "\n", "\"acc\"", ":", "acc", ",", "\n", "\"rec\"", ":", "rec", ",", "\n", "\"f1\"", ":", "f1", ",", "\n", "\"label_total\"", ":", "label_total", ",", "\n", "\"pred_total\"", ":", "pred_total", ",", "\n", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_and_or", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "\"and/or\"", "]", "=", "{", "\n", "\"acc\"", ":", "acc", ",", "\n", "\"rec\"", ":", "rec", ",", "\n", "\"f1\"", ":", "f1", ",", "\n", "\"label_total\"", ":", "label_total", ",", "\n", "\"pred_total\"", ":", "pred_total", ",", "\n", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_IUEN", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "\"IUEN\"", "]", "=", "{", "\n", "\"acc\"", ":", "acc", ",", "\n", "\"rec\"", ":", "rec", ",", "\n", "\"f1\"", ":", "f1", ",", "\n", "\"label_total\"", ":", "label_total", ",", "\n", "\"pred_total\"", ":", "pred_total", ",", "\n", "}", "\n", "\n", "label_total", ",", "pred_total", ",", "cnt", "=", "eval_keywords", "(", "pred", ",", "label", ")", "\n", "acc", ",", "rec", ",", "f1", "=", "get_scores", "(", "cnt", ",", "pred_total", ",", "label_total", ")", "\n", "res", "[", "\"keywords\"", "]", "=", "{", "\n", "\"acc\"", ":", "acc", ",", "\n", "\"rec\"", ":", "rec", ",", "\n", "\"f1\"", ":", "f1", ",", "\n", "\"label_total\"", ":", "label_total", ",", "\n", "\"pred_total\"", ":", "pred_total", ",", "\n", "}", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.evaluate_one": [[622, 704], ["third_party.spider.process_sql.get_sql", "spider_eval.Evaluator.eval_hardness", "spider_eval.build_valid_col_units", "spider_eval.rebuild_sql_val", "spider_eval.rebuild_sql_col", "spider_eval.build_valid_col_units", "spider_eval.rebuild_sql_val", "spider_eval.rebuild_sql_col", "third_party.spider.process_sql.get_sql", "spider_eval.eval_exec_match", "spider_eval.Evaluator.eval_partial_match", "spider_eval.Evaluator.eval_exact_match"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.get_sql", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.eval_hardness", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.build_valid_col_units", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.build_valid_col_units", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.get_sql", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_exec_match", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.eval_partial_match", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.eval_exact_match"], ["", "def", "evaluate_one", "(", "self", ",", "db_name", ",", "gold", ",", "predicted", ")", ":", "\n", "        ", "schema", "=", "self", ".", "schemas", "[", "db_name", "]", "\n", "g_sql", "=", "get_sql", "(", "schema", ",", "gold", ")", "\n", "hardness", "=", "self", ".", "eval_hardness", "(", "g_sql", ")", "\n", "self", ".", "scores", "[", "hardness", "]", "[", "\"count\"", "]", "+=", "1", "\n", "self", ".", "scores", "[", "\"all\"", "]", "[", "\"count\"", "]", "+=", "1", "\n", "\n", "parse_error", "=", "False", "\n", "try", ":", "\n", "            ", "p_sql", "=", "get_sql", "(", "schema", ",", "predicted", ")", "\n", "", "except", ":", "\n", "# If p_sql is not valid, then we will use an empty sql to evaluate with the correct sql", "\n", "            ", "p_sql", "=", "{", "\n", "\"except\"", ":", "None", ",", "\n", "\"from\"", ":", "{", "\"conds\"", ":", "[", "]", ",", "\"table_units\"", ":", "[", "]", "}", ",", "\n", "\"groupBy\"", ":", "[", "]", ",", "\n", "\"having\"", ":", "[", "]", ",", "\n", "\"intersect\"", ":", "None", ",", "\n", "\"limit\"", ":", "None", ",", "\n", "\"orderBy\"", ":", "[", "]", ",", "\n", "\"select\"", ":", "[", "False", ",", "[", "]", "]", ",", "\n", "\"union\"", ":", "None", ",", "\n", "\"where\"", ":", "[", "]", ",", "\n", "}", "\n", "\n", "# TODO fix", "\n", "parse_error", "=", "True", "\n", "\n", "# rebuild sql for value evaluation", "\n", "", "kmap", "=", "self", ".", "kmaps", "[", "db_name", "]", "\n", "g_valid_col_units", "=", "build_valid_col_units", "(", "g_sql", "[", "\"from\"", "]", "[", "\"table_units\"", "]", ",", "schema", ")", "\n", "g_sql", "=", "rebuild_sql_val", "(", "g_sql", ")", "\n", "g_sql", "=", "rebuild_sql_col", "(", "g_valid_col_units", ",", "g_sql", ",", "kmap", ")", "\n", "p_valid_col_units", "=", "build_valid_col_units", "(", "p_sql", "[", "\"from\"", "]", "[", "\"table_units\"", "]", ",", "schema", ")", "\n", "p_sql", "=", "rebuild_sql_val", "(", "p_sql", ")", "\n", "p_sql", "=", "rebuild_sql_col", "(", "p_valid_col_units", ",", "p_sql", ",", "kmap", ")", "\n", "\n", "if", "self", ".", "etype", "in", "[", "\"all\"", ",", "\"exec\"", "]", ":", "\n", "            ", "self", ".", "scores", "[", "hardness", "]", "[", "\"exec\"", "]", "+=", "eval_exec_match", "(", "\n", "self", ".", "db_paths", "[", "db_name", "]", ",", "predicted", ",", "gold", ",", "p_sql", ",", "g_sql", "\n", ")", "\n", "\n", "", "if", "self", ".", "etype", "in", "[", "\"all\"", ",", "\"match\"", "]", ":", "\n", "            ", "partial_scores", "=", "self", ".", "eval_partial_match", "(", "p_sql", ",", "g_sql", ")", "\n", "exact_score", "=", "self", ".", "eval_exact_match", "(", "p_sql", ",", "g_sql", ",", "partial_scores", ")", "\n", "self", ".", "scores", "[", "hardness", "]", "[", "\"exact\"", "]", "+=", "exact_score", "\n", "self", ".", "scores", "[", "\"all\"", "]", "[", "\"exact\"", "]", "+=", "exact_score", "\n", "for", "type_", "in", "PARTIAL_TYPES", ":", "\n", "                ", "if", "partial_scores", "[", "type_", "]", "[", "\"pred_total\"", "]", ">", "0", ":", "\n", "                    ", "self", ".", "scores", "[", "hardness", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"acc\"", "]", "+=", "partial_scores", "[", "\n", "type_", "\n", "]", "[", "\"acc\"", "]", "\n", "self", ".", "scores", "[", "hardness", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"acc_count\"", "]", "+=", "1", "\n", "", "if", "partial_scores", "[", "type_", "]", "[", "\"label_total\"", "]", ">", "0", ":", "\n", "                    ", "self", ".", "scores", "[", "hardness", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"rec\"", "]", "+=", "partial_scores", "[", "\n", "type_", "\n", "]", "[", "\"rec\"", "]", "\n", "self", ".", "scores", "[", "hardness", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"rec_count\"", "]", "+=", "1", "\n", "", "self", ".", "scores", "[", "hardness", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"f1\"", "]", "+=", "partial_scores", "[", "type_", "]", "[", "\n", "\"f1\"", "\n", "]", "\n", "if", "partial_scores", "[", "type_", "]", "[", "\"pred_total\"", "]", ">", "0", ":", "\n", "                    ", "self", ".", "scores", "[", "\"all\"", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"acc\"", "]", "+=", "partial_scores", "[", "\n", "type_", "\n", "]", "[", "\"acc\"", "]", "\n", "self", ".", "scores", "[", "\"all\"", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"acc_count\"", "]", "+=", "1", "\n", "", "if", "partial_scores", "[", "type_", "]", "[", "\"label_total\"", "]", ">", "0", ":", "\n", "                    ", "self", ".", "scores", "[", "\"all\"", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"rec\"", "]", "+=", "partial_scores", "[", "\n", "type_", "\n", "]", "[", "\"rec\"", "]", "\n", "self", ".", "scores", "[", "\"all\"", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"rec_count\"", "]", "+=", "1", "\n", "", "self", ".", "scores", "[", "\"all\"", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"f1\"", "]", "+=", "partial_scores", "[", "type_", "]", "[", "\n", "\"f1\"", "\n", "]", "\n", "\n", "", "", "return", "{", "\n", "\"predicted\"", ":", "predicted", ",", "\n", "\"gold\"", ":", "gold", ",", "\n", "\"predicted_parse_error\"", ":", "parse_error", ",", "\n", "\"hardness\"", ":", "hardness", ",", "\n", "\"exact\"", ":", "exact_score", ",", "\n", "\"partial\"", ":", "partial_scores", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.finalize": [[706, 746], ["None"], "methods", ["None"], ["", "def", "finalize", "(", "self", ")", ":", "\n", "        ", "scores", "=", "self", ".", "scores", "\n", "for", "level", "in", "LEVELS", ":", "\n", "            ", "if", "scores", "[", "level", "]", "[", "\"count\"", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "self", ".", "etype", "in", "[", "\"all\"", ",", "\"exec\"", "]", ":", "\n", "                ", "scores", "[", "level", "]", "[", "\"exec\"", "]", "/=", "scores", "[", "level", "]", "[", "\"count\"", "]", "\n", "\n", "", "if", "self", ".", "etype", "in", "[", "\"all\"", ",", "\"match\"", "]", ":", "\n", "                ", "scores", "[", "level", "]", "[", "\"exact\"", "]", "/=", "scores", "[", "level", "]", "[", "\"count\"", "]", "\n", "for", "type_", "in", "PARTIAL_TYPES", ":", "\n", "                    ", "if", "scores", "[", "level", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"acc_count\"", "]", "==", "0", ":", "\n", "                        ", "scores", "[", "level", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"acc\"", "]", "=", "0", "\n", "", "else", ":", "\n", "                        ", "scores", "[", "level", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"acc\"", "]", "=", "(", "\n", "scores", "[", "level", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"acc\"", "]", "\n", "/", "scores", "[", "level", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"acc_count\"", "]", "\n", "*", "1.0", "\n", ")", "\n", "", "if", "scores", "[", "level", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"rec_count\"", "]", "==", "0", ":", "\n", "                        ", "scores", "[", "level", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"rec\"", "]", "=", "0", "\n", "", "else", ":", "\n", "                        ", "scores", "[", "level", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"rec\"", "]", "=", "(", "\n", "scores", "[", "level", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"rec\"", "]", "\n", "/", "scores", "[", "level", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"rec_count\"", "]", "\n", "*", "1.0", "\n", ")", "\n", "", "if", "(", "\n", "scores", "[", "level", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"acc\"", "]", "==", "0", "\n", "and", "scores", "[", "level", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"rec\"", "]", "==", "0", "\n", ")", ":", "\n", "                        ", "scores", "[", "level", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"f1\"", "]", "=", "1", "\n", "", "else", ":", "\n", "                        ", "scores", "[", "level", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"f1\"", "]", "=", "(", "\n", "2.0", "\n", "*", "scores", "[", "level", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"acc\"", "]", "\n", "*", "scores", "[", "level", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"rec\"", "]", "\n", "/", "(", "\n", "scores", "[", "level", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"rec\"", "]", "\n", "+", "scores", "[", "level", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"acc\"", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.condition_has_or": [[102, 104], ["None"], "function", ["None"], ["def", "condition_has_or", "(", "conds", ")", ":", "\n", "    ", "return", "\"or\"", "in", "conds", "[", "1", ":", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.condition_has_like": [[106, 108], ["WHERE_OPS.index"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["", "def", "condition_has_like", "(", "conds", ")", ":", "\n", "    ", "return", "WHERE_OPS", ".", "index", "(", "\"like\"", ")", "in", "[", "cond_unit", "[", "1", "]", "for", "cond_unit", "in", "conds", "[", ":", ":", "2", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.condition_has_sql": [[110, 118], ["type", "type"], "function", ["None"], ["", "def", "condition_has_sql", "(", "conds", ")", ":", "\n", "    ", "for", "cond_unit", "in", "conds", "[", ":", ":", "2", "]", ":", "\n", "        ", "val1", ",", "val2", "=", "cond_unit", "[", "3", "]", ",", "cond_unit", "[", "4", "]", "\n", "if", "val1", "is", "not", "None", "and", "type", "(", "val1", ")", "is", "dict", ":", "\n", "            ", "return", "True", "\n", "", "if", "val2", "is", "not", "None", "and", "type", "(", "val2", ")", "is", "dict", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.val_has_op": [[120, 122], ["UNIT_OPS.index"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["", "def", "val_has_op", "(", "val_unit", ")", ":", "\n", "    ", "return", "val_unit", "[", "0", "]", "!=", "UNIT_OPS", ".", "index", "(", "\"none\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.has_agg": [[124, 126], ["AGG_OPS.index"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["", "def", "has_agg", "(", "unit", ")", ":", "\n", "    ", "return", "unit", "[", "0", "]", "!=", "AGG_OPS", ".", "index", "(", "\"none\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.accuracy": [[128, 132], ["None"], "function", ["None"], ["", "def", "accuracy", "(", "count", ",", "total", ")", ":", "\n", "    ", "if", "count", "==", "total", ":", "\n", "        ", "return", "1", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.recall": [[134, 138], ["None"], "function", ["None"], ["", "def", "recall", "(", "count", ",", "total", ")", ":", "\n", "    ", "if", "count", "==", "total", ":", "\n", "        ", "return", "1", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.F1": [[140, 144], ["None"], "function", ["None"], ["", "def", "F1", "(", "acc", ",", "rec", ")", ":", "\n", "    ", "if", "(", "acc", "+", "rec", ")", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "return", "(", "2.0", "*", "acc", "*", "rec", ")", "/", "(", "acc", "+", "rec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_scores": [[146, 152], ["None"], "function", ["None"], ["", "def", "get_scores", "(", "count", ",", "pred_total", ",", "label_total", ")", ":", "\n", "    ", "if", "pred_total", "!=", "label_total", ":", "\n", "        ", "return", "0", ",", "0", ",", "0", "\n", "", "elif", "count", "==", "pred_total", ":", "\n", "        ", "return", "1", ",", "1", ",", "1", "\n", "", "return", "0", ",", "0", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_sel": [[154, 172], ["len", "len", "label_sel.remove", "label_wo_agg.remove"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.remove", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.remove"], ["", "def", "eval_sel", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_sel", "=", "pred", "[", "\"select\"", "]", "[", "1", "]", "\n", "label_sel", "=", "label", "[", "\"select\"", "]", "[", "1", "]", "\n", "label_wo_agg", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "label_sel", "]", "\n", "pred_total", "=", "len", "(", "pred_sel", ")", "\n", "label_total", "=", "len", "(", "label_sel", ")", "\n", "cnt", "=", "0", "\n", "cnt_wo_agg", "=", "0", "\n", "\n", "for", "unit", "in", "pred_sel", ":", "\n", "        ", "if", "unit", "in", "label_sel", ":", "\n", "            ", "cnt", "+=", "1", "\n", "label_sel", ".", "remove", "(", "unit", ")", "\n", "", "if", "unit", "[", "1", "]", "in", "label_wo_agg", ":", "\n", "            ", "cnt_wo_agg", "+=", "1", "\n", "label_wo_agg", ".", "remove", "(", "unit", "[", "1", "]", ")", "\n", "\n", "", "", "return", "label_total", ",", "pred_total", ",", "cnt", ",", "cnt_wo_agg", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_where": [[174, 192], ["len", "len", "label_conds.remove", "label_wo_agg.remove"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.remove", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.remove"], ["", "def", "eval_where", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_conds", "=", "[", "unit", "for", "unit", "in", "pred", "[", "\"where\"", "]", "[", ":", ":", "2", "]", "]", "\n", "label_conds", "=", "[", "unit", "for", "unit", "in", "label", "[", "\"where\"", "]", "[", ":", ":", "2", "]", "]", "\n", "label_wo_agg", "=", "[", "unit", "[", "2", "]", "for", "unit", "in", "label_conds", "]", "\n", "pred_total", "=", "len", "(", "pred_conds", ")", "\n", "label_total", "=", "len", "(", "label_conds", ")", "\n", "cnt", "=", "0", "\n", "cnt_wo_agg", "=", "0", "\n", "\n", "for", "unit", "in", "pred_conds", ":", "\n", "        ", "if", "unit", "in", "label_conds", ":", "\n", "            ", "cnt", "+=", "1", "\n", "label_conds", ".", "remove", "(", "unit", ")", "\n", "", "if", "unit", "[", "2", "]", "in", "label_wo_agg", ":", "\n", "            ", "cnt_wo_agg", "+=", "1", "\n", "label_wo_agg", ".", "remove", "(", "unit", "[", "2", "]", ")", "\n", "\n", "", "", "return", "label_total", ",", "pred_total", ",", "cnt", ",", "cnt_wo_agg", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_group": [[194, 209], ["len", "len", "label_cols.remove", "pred.split", "label.split"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.remove"], ["", "def", "eval_group", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_cols", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "pred", "[", "\"groupBy\"", "]", "]", "\n", "label_cols", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "label", "[", "\"groupBy\"", "]", "]", "\n", "pred_total", "=", "len", "(", "pred_cols", ")", "\n", "label_total", "=", "len", "(", "label_cols", ")", "\n", "cnt", "=", "0", "\n", "pred_cols", "=", "[", "pred", ".", "split", "(", "\".\"", ")", "[", "1", "]", "if", "\".\"", "in", "pred", "else", "pred", "for", "pred", "in", "pred_cols", "]", "\n", "label_cols", "=", "[", "\n", "label", ".", "split", "(", "\".\"", ")", "[", "1", "]", "if", "\".\"", "in", "label", "else", "label", "for", "label", "in", "label_cols", "\n", "]", "\n", "for", "col", "in", "pred_cols", ":", "\n", "        ", "if", "col", "in", "label_cols", ":", "\n", "            ", "cnt", "+=", "1", "\n", "label_cols", ".", "remove", "(", "col", ")", "\n", "", "", "return", "label_total", ",", "pred_total", ",", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_having": [[211, 228], ["len", "len"], "function", ["None"], ["", "def", "eval_having", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_total", "=", "label_total", "=", "cnt", "=", "0", "\n", "if", "len", "(", "pred", "[", "\"groupBy\"", "]", ")", ">", "0", ":", "\n", "        ", "pred_total", "=", "1", "\n", "", "if", "len", "(", "label", "[", "\"groupBy\"", "]", ")", ">", "0", ":", "\n", "        ", "label_total", "=", "1", "\n", "\n", "", "pred_cols", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "pred", "[", "\"groupBy\"", "]", "]", "\n", "label_cols", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "label", "[", "\"groupBy\"", "]", "]", "\n", "if", "(", "\n", "pred_total", "==", "label_total", "==", "1", "\n", "and", "pred_cols", "==", "label_cols", "\n", "and", "pred", "[", "\"having\"", "]", "==", "label", "[", "\"having\"", "]", "\n", ")", ":", "\n", "        ", "cnt", "=", "1", "\n", "\n", "", "return", "label_total", ",", "pred_total", ",", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_order": [[230, 246], ["len", "len", "len"], "function", ["None"], ["", "def", "eval_order", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_total", "=", "label_total", "=", "cnt", "=", "0", "\n", "if", "len", "(", "pred", "[", "\"orderBy\"", "]", ")", ">", "0", ":", "\n", "        ", "pred_total", "=", "1", "\n", "", "if", "len", "(", "label", "[", "\"orderBy\"", "]", ")", ">", "0", ":", "\n", "        ", "label_total", "=", "1", "\n", "", "if", "(", "\n", "len", "(", "label", "[", "\"orderBy\"", "]", ")", ">", "0", "\n", "and", "pred", "[", "\"orderBy\"", "]", "==", "label", "[", "\"orderBy\"", "]", "\n", "and", "(", "\n", "(", "pred", "[", "\"limit\"", "]", "is", "None", "and", "label", "[", "\"limit\"", "]", "is", "None", ")", "\n", "or", "(", "pred", "[", "\"limit\"", "]", "is", "not", "None", "and", "label", "[", "\"limit\"", "]", "is", "not", "None", ")", "\n", ")", "\n", ")", ":", "\n", "        ", "cnt", "=", "1", "\n", "", "return", "label_total", ",", "pred_total", ",", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_and_or": [[248, 257], ["set", "set", "len", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set"], ["", "def", "eval_and_or", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_ao", "=", "pred", "[", "\"where\"", "]", "[", "1", ":", ":", "2", "]", "\n", "label_ao", "=", "label", "[", "\"where\"", "]", "[", "1", ":", ":", "2", "]", "\n", "pred_ao", "=", "set", "(", "pred_ao", ")", "\n", "label_ao", "=", "set", "(", "label_ao", ")", "\n", "\n", "if", "pred_ao", "==", "label_ao", ":", "\n", "        ", "return", "1", ",", "1", ",", "1", "\n", "", "return", "len", "(", "pred_ao", ")", ",", "len", "(", "label_ao", ")", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_nestedSQL": [[259, 273], ["nested.append", "nested.append", "nested.append", "type", "nested.append", "type", "nested.append"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "get_nestedSQL", "(", "sql", ")", ":", "\n", "    ", "nested", "=", "[", "]", "\n", "for", "cond_unit", "in", "sql", "[", "\"from\"", "]", "[", "\"conds\"", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "\"where\"", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "\"having\"", "]", "[", ":", ":", "2", "]", ":", "\n", "        ", "if", "type", "(", "cond_unit", "[", "3", "]", ")", "is", "dict", ":", "\n", "            ", "nested", ".", "append", "(", "cond_unit", "[", "3", "]", ")", "\n", "", "if", "type", "(", "cond_unit", "[", "4", "]", ")", "is", "dict", ":", "\n", "            ", "nested", ".", "append", "(", "cond_unit", "[", "4", "]", ")", "\n", "", "", "if", "sql", "[", "\"intersect\"", "]", "is", "not", "None", ":", "\n", "        ", "nested", ".", "append", "(", "sql", "[", "\"intersect\"", "]", ")", "\n", "", "if", "sql", "[", "\"except\"", "]", "is", "not", "None", ":", "\n", "        ", "nested", ".", "append", "(", "sql", "[", "\"except\"", "]", ")", "\n", "", "if", "sql", "[", "\"union\"", "]", "is", "not", "None", ":", "\n", "        ", "nested", ".", "append", "(", "sql", "[", "\"union\"", "]", ")", "\n", "", "return", "nested", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_nested": [[275, 287], ["spider_eval.Evaluator.eval_partial_match", "spider_eval.Evaluator.eval_exact_match"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.eval_partial_match", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.eval_exact_match"], ["", "def", "eval_nested", "(", "pred", ",", "label", ")", ":", "\n", "    ", "label_total", "=", "0", "\n", "pred_total", "=", "0", "\n", "cnt", "=", "0", "\n", "if", "pred", "is", "not", "None", ":", "\n", "        ", "pred_total", "+=", "1", "\n", "", "if", "label", "is", "not", "None", ":", "\n", "        ", "label_total", "+=", "1", "\n", "", "if", "pred", "is", "not", "None", "and", "label", "is", "not", "None", ":", "\n", "        ", "partial_scores", "=", "Evaluator", ".", "eval_partial_match", "(", "pred", ",", "label", ")", "\n", "cnt", "+=", "Evaluator", ".", "eval_exact_match", "(", "pred", ",", "label", ",", "partial_scores", ")", "\n", "", "return", "label_total", ",", "pred_total", ",", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_IUEN": [[289, 297], ["spider_eval.eval_nested", "spider_eval.eval_nested", "spider_eval.eval_nested"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_nested", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_nested", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_nested"], ["", "def", "eval_IUEN", "(", "pred", ",", "label", ")", ":", "\n", "    ", "lt1", ",", "pt1", ",", "cnt1", "=", "eval_nested", "(", "pred", "[", "\"intersect\"", "]", ",", "label", "[", "\"intersect\"", "]", ")", "\n", "lt2", ",", "pt2", ",", "cnt2", "=", "eval_nested", "(", "pred", "[", "\"except\"", "]", ",", "label", "[", "\"except\"", "]", ")", "\n", "lt3", ",", "pt3", ",", "cnt3", "=", "eval_nested", "(", "pred", "[", "\"union\"", "]", ",", "label", "[", "\"union\"", "]", ")", "\n", "label_total", "=", "lt1", "+", "lt2", "+", "lt3", "\n", "pred_total", "=", "pt1", "+", "pt2", "+", "pt3", "\n", "cnt", "=", "cnt1", "+", "cnt2", "+", "cnt3", "\n", "return", "label_total", ",", "pred_total", ",", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_keywords": [[299, 356], ["set", "len", "set.add", "len", "set.add", "len", "set.add", "len", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add", "len", "set.add", "len", "set.add", "len", "set.add", "len", "set.add", "WHERE_OPS.index", "WHERE_OPS.index"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["", "def", "get_keywords", "(", "sql", ")", ":", "\n", "    ", "res", "=", "set", "(", ")", "\n", "if", "len", "(", "sql", "[", "\"where\"", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "\"where\"", ")", "\n", "", "if", "len", "(", "sql", "[", "\"groupBy\"", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "\"group\"", ")", "\n", "", "if", "len", "(", "sql", "[", "\"having\"", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "\"having\"", ")", "\n", "", "if", "len", "(", "sql", "[", "\"orderBy\"", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "sql", "[", "\"orderBy\"", "]", "[", "0", "]", ")", "\n", "res", ".", "add", "(", "\"order\"", ")", "\n", "", "if", "sql", "[", "\"limit\"", "]", "is", "not", "None", ":", "\n", "        ", "res", ".", "add", "(", "\"limit\"", ")", "\n", "", "if", "sql", "[", "\"except\"", "]", "is", "not", "None", ":", "\n", "        ", "res", ".", "add", "(", "\"except\"", ")", "\n", "", "if", "sql", "[", "\"union\"", "]", "is", "not", "None", ":", "\n", "        ", "res", ".", "add", "(", "\"union\"", ")", "\n", "", "if", "sql", "[", "\"intersect\"", "]", "is", "not", "None", ":", "\n", "        ", "res", ".", "add", "(", "\"intersect\"", ")", "\n", "\n", "# or keyword", "\n", "", "ao", "=", "sql", "[", "\"from\"", "]", "[", "\"conds\"", "]", "[", "1", ":", ":", "2", "]", "+", "sql", "[", "\"where\"", "]", "[", "1", ":", ":", "2", "]", "+", "sql", "[", "\"having\"", "]", "[", "1", ":", ":", "2", "]", "\n", "if", "len", "(", "[", "token", "for", "token", "in", "ao", "if", "token", "==", "\"or\"", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "\"or\"", ")", "\n", "\n", "", "cond_units", "=", "sql", "[", "\"from\"", "]", "[", "\"conds\"", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "\"where\"", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "\"having\"", "]", "[", ":", ":", "2", "]", "\n", "# not keyword", "\n", "if", "len", "(", "[", "cond_unit", "for", "cond_unit", "in", "cond_units", "if", "cond_unit", "[", "0", "]", "]", ")", ">", "0", ":", "\n", "        ", "res", ".", "add", "(", "\"not\"", ")", "\n", "\n", "# in keyword", "\n", "", "if", "(", "\n", "len", "(", "\n", "[", "\n", "cond_unit", "\n", "for", "cond_unit", "in", "cond_units", "\n", "if", "cond_unit", "[", "1", "]", "==", "WHERE_OPS", ".", "index", "(", "\"in\"", ")", "\n", "]", "\n", ")", "\n", ">", "0", "\n", ")", ":", "\n", "        ", "res", ".", "add", "(", "\"in\"", ")", "\n", "\n", "# like keyword", "\n", "", "if", "(", "\n", "len", "(", "\n", "[", "\n", "cond_unit", "\n", "for", "cond_unit", "in", "cond_units", "\n", "if", "cond_unit", "[", "1", "]", "==", "WHERE_OPS", ".", "index", "(", "\"like\"", ")", "\n", "]", "\n", ")", "\n", ">", "0", "\n", ")", ":", "\n", "        ", "res", ".", "add", "(", "\"like\"", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_keywords": [[358, 369], ["spider_eval.get_keywords", "spider_eval.get_keywords", "len", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_keywords", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_keywords"], ["", "def", "eval_keywords", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred_keywords", "=", "get_keywords", "(", "pred", ")", "\n", "label_keywords", "=", "get_keywords", "(", "label", ")", "\n", "pred_total", "=", "len", "(", "pred_keywords", ")", "\n", "label_total", "=", "len", "(", "label_keywords", ")", "\n", "cnt", "=", "0", "\n", "\n", "for", "k", "in", "pred_keywords", ":", "\n", "        ", "if", "k", "in", "label_keywords", ":", "\n", "            ", "cnt", "+=", "1", "\n", "", "", "return", "label_total", ",", "pred_total", ",", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_agg": [[371, 373], ["len", "spider_eval.has_agg"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.has_agg"], ["", "def", "count_agg", "(", "units", ")", ":", "\n", "    ", "return", "len", "(", "[", "unit", "for", "unit", "in", "units", "if", "has_agg", "(", "unit", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_component1": [[375, 400], ["len", "len", "len", "len", "len", "len", "len", "WHERE_OPS.index"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["", "def", "count_component1", "(", "sql", ")", ":", "\n", "    ", "count", "=", "0", "\n", "if", "len", "(", "sql", "[", "\"where\"", "]", ")", ">", "0", ":", "\n", "        ", "count", "+=", "1", "\n", "", "if", "len", "(", "sql", "[", "\"groupBy\"", "]", ")", ">", "0", ":", "\n", "        ", "count", "+=", "1", "\n", "", "if", "len", "(", "sql", "[", "\"orderBy\"", "]", ")", ">", "0", ":", "\n", "        ", "count", "+=", "1", "\n", "", "if", "sql", "[", "\"limit\"", "]", "is", "not", "None", ":", "\n", "        ", "count", "+=", "1", "\n", "", "if", "len", "(", "sql", "[", "\"from\"", "]", "[", "\"table_units\"", "]", ")", ">", "0", ":", "# JOIN", "\n", "        ", "count", "+=", "len", "(", "sql", "[", "\"from\"", "]", "[", "\"table_units\"", "]", ")", "-", "1", "\n", "\n", "", "ao", "=", "sql", "[", "\"from\"", "]", "[", "\"conds\"", "]", "[", "1", ":", ":", "2", "]", "+", "sql", "[", "\"where\"", "]", "[", "1", ":", ":", "2", "]", "+", "sql", "[", "\"having\"", "]", "[", "1", ":", ":", "2", "]", "\n", "count", "+=", "len", "(", "[", "token", "for", "token", "in", "ao", "if", "token", "==", "\"or\"", "]", ")", "\n", "cond_units", "=", "sql", "[", "\"from\"", "]", "[", "\"conds\"", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "\"where\"", "]", "[", ":", ":", "2", "]", "+", "sql", "[", "\"having\"", "]", "[", ":", ":", "2", "]", "\n", "count", "+=", "len", "(", "\n", "[", "\n", "cond_unit", "\n", "for", "cond_unit", "in", "cond_units", "\n", "if", "cond_unit", "[", "1", "]", "==", "WHERE_OPS", ".", "index", "(", "\"like\"", ")", "\n", "]", "\n", ")", "\n", "\n", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_component2": [[402, 405], ["spider_eval.get_nestedSQL", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.get_nestedSQL"], ["", "def", "count_component2", "(", "sql", ")", ":", "\n", "    ", "nested", "=", "get_nestedSQL", "(", "sql", ")", "\n", "return", "len", "(", "nested", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_others": [[407, 435], ["spider_eval.count_agg", "spider_eval.count_agg", "spider_eval.count_agg", "spider_eval.count_agg", "len", "spider_eval.count_agg", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_agg", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_agg", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_agg", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_agg", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.count_agg"], ["", "def", "count_others", "(", "sql", ")", ":", "\n", "    ", "count", "=", "0", "\n", "# number of aggregation", "\n", "agg_count", "=", "count_agg", "(", "sql", "[", "\"select\"", "]", "[", "1", "]", ")", "\n", "agg_count", "+=", "count_agg", "(", "sql", "[", "\"where\"", "]", "[", ":", ":", "2", "]", ")", "\n", "agg_count", "+=", "count_agg", "(", "sql", "[", "\"groupBy\"", "]", ")", "\n", "if", "len", "(", "sql", "[", "\"orderBy\"", "]", ")", ">", "0", ":", "\n", "        ", "agg_count", "+=", "count_agg", "(", "\n", "[", "unit", "[", "1", "]", "for", "unit", "in", "sql", "[", "\"orderBy\"", "]", "[", "1", "]", "if", "unit", "[", "1", "]", "]", "\n", "+", "[", "unit", "[", "2", "]", "for", "unit", "in", "sql", "[", "\"orderBy\"", "]", "[", "1", "]", "if", "unit", "[", "2", "]", "]", "\n", ")", "\n", "", "agg_count", "+=", "count_agg", "(", "sql", "[", "\"having\"", "]", ")", "\n", "if", "agg_count", ">", "1", ":", "\n", "        ", "count", "+=", "1", "\n", "\n", "# number of select columns", "\n", "", "if", "len", "(", "sql", "[", "\"select\"", "]", "[", "1", "]", ")", ">", "1", ":", "\n", "        ", "count", "+=", "1", "\n", "\n", "# number of where conditions", "\n", "", "if", "len", "(", "sql", "[", "\"where\"", "]", ")", ">", "1", ":", "\n", "        ", "count", "+=", "1", "\n", "\n", "# number of group by clauses", "\n", "", "if", "len", "(", "sql", "[", "\"groupBy\"", "]", ")", ">", "1", ":", "\n", "        ", "count", "+=", "1", "\n", "\n", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.isValidSQL": [[750, 758], ["sqlite3.connect", "sqlite3.connect.cursor", "conn.cursor.execute"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.execute"], ["", "", "", "", "", "", "def", "isValidSQL", "(", "sql", ",", "db", ")", ":", "\n", "    ", "conn", "=", "sqlite3", ".", "connect", "(", "db", ")", "\n", "cursor", "=", "conn", ".", "cursor", "(", ")", "\n", "try", ":", "\n", "        ", "cursor", ".", "execute", "(", "sql", ")", "\n", "", "except", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.print_scores": [[760, 820], ["print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "function", ["None"], ["", "def", "print_scores", "(", "scores", ",", "etype", ")", ":", "\n", "    ", "LEVELS", "=", "[", "\"easy\"", ",", "\"medium\"", ",", "\"hard\"", ",", "\"extra\"", ",", "\"all\"", "]", "\n", "PARTIAL_TYPES", "=", "[", "\n", "\"select\"", ",", "\n", "\"select(no AGG)\"", ",", "\n", "\"where\"", ",", "\n", "\"where(no OP)\"", ",", "\n", "\"group(no Having)\"", ",", "\n", "\"group\"", ",", "\n", "\"order\"", ",", "\n", "\"and/or\"", ",", "\n", "\"IUEN\"", ",", "\n", "\"keywords\"", ",", "\n", "]", "\n", "\n", "print", "(", "\"{:20} {:20} {:20} {:20} {:20} {:20}\"", ".", "format", "(", "\"\"", ",", "*", "LEVELS", ")", ")", "\n", "counts", "=", "[", "scores", "[", "level", "]", "[", "\"count\"", "]", "for", "level", "in", "LEVELS", "]", "\n", "print", "(", "\"{:20} {:<20d} {:<20d} {:<20d} {:<20d} {:<20d}\"", ".", "format", "(", "\"count\"", ",", "*", "counts", ")", ")", "\n", "\n", "if", "etype", "in", "[", "\"all\"", ",", "\"exec\"", "]", ":", "\n", "        ", "print", "(", "\"=====================   EXECUTION ACCURACY     =====================\"", ")", "\n", "this_scores", "=", "[", "scores", "[", "level", "]", "[", "\"exec\"", "]", "for", "level", "in", "LEVELS", "]", "\n", "print", "(", "\n", "\"{:20} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f}\"", ".", "format", "(", "\n", "\"execution\"", ",", "*", "this_scores", "\n", ")", "\n", ")", "\n", "\n", "", "if", "etype", "in", "[", "\"all\"", ",", "\"match\"", "]", ":", "\n", "        ", "print", "(", "\"\\n====================== EXACT MATCHING ACCURACY =====================\"", ")", "\n", "exact_scores", "=", "[", "scores", "[", "level", "]", "[", "\"exact\"", "]", "for", "level", "in", "LEVELS", "]", "\n", "print", "(", "\n", "\"{:20} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f}\"", ".", "format", "(", "\n", "\"exact match\"", ",", "*", "exact_scores", "\n", ")", "\n", ")", "\n", "print", "(", "\"\\n---------------------PARTIAL MATCHING ACCURACY----------------------\"", ")", "\n", "for", "type_", "in", "PARTIAL_TYPES", ":", "\n", "            ", "this_scores", "=", "[", "scores", "[", "level", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"acc\"", "]", "for", "level", "in", "LEVELS", "]", "\n", "print", "(", "\n", "\"{:20} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f}\"", ".", "format", "(", "\n", "type_", ",", "*", "this_scores", "\n", ")", "\n", ")", "\n", "\n", "", "print", "(", "\"---------------------- PARTIAL MATCHING RECALL ----------------------\"", ")", "\n", "for", "type_", "in", "PARTIAL_TYPES", ":", "\n", "            ", "this_scores", "=", "[", "scores", "[", "level", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"rec\"", "]", "for", "level", "in", "LEVELS", "]", "\n", "print", "(", "\n", "\"{:20} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f}\"", ".", "format", "(", "\n", "type_", ",", "*", "this_scores", "\n", ")", "\n", ")", "\n", "\n", "", "print", "(", "\"---------------------- PARTIAL MATCHING F1 --------------------------\"", ")", "\n", "for", "type_", "in", "PARTIAL_TYPES", ":", "\n", "            ", "this_scores", "=", "[", "scores", "[", "level", "]", "[", "\"partial\"", "]", "[", "type_", "]", "[", "\"f1\"", "]", "for", "level", "in", "LEVELS", "]", "\n", "print", "(", "\n", "\"{:20} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f} {:<20.3f}\"", ".", "format", "(", "\n", "type_", ",", "*", "this_scores", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.evaluate": [[824, 842], ["spider_eval.Evaluator", "zip", "spider_eval.Evaluator.finalize", "spider_eval.print_scores", "open", "open", "results.append", "l.strip().split", "l.strip().split", "spider_eval.Evaluator.evaluate_one", "f.readlines", "f.readlines", "l.strip", "len", "l.strip", "len", "l.strip", "l.strip"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.infer_tree_traversal.InferenceTreeTraversal.finalize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.print_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.Evaluator.evaluate_one"], ["", "", "", "def", "evaluate", "(", "gold", ",", "predict", ",", "db_dir", ",", "etype", ",", "kmaps", ")", ":", "\n", "    ", "with", "open", "(", "gold", ")", "as", "f", ":", "\n", "        ", "glist", "=", "[", "l", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "for", "l", "in", "f", ".", "readlines", "(", ")", "if", "len", "(", "l", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "\n", "", "with", "open", "(", "predict", ")", "as", "f", ":", "\n", "        ", "plist", "=", "[", "l", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "for", "l", "in", "f", ".", "readlines", "(", ")", "if", "len", "(", "l", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "# plist = [(\"select max(Share),min(Share) from performance where Type != 'terminal'\", \"orchestra\")]", "\n", "# glist = [(\"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != 'Live final'\", \"orchestra\")]", "\n", "", "evaluator", "=", "Evaluator", "(", "db_dir", ",", "kmaps", ",", "etype", ")", "\n", "results", "=", "[", "]", "\n", "for", "p", ",", "g", "in", "zip", "(", "plist", ",", "glist", ")", ":", "\n", "        ", "(", "predicted", ",", ")", "=", "p", "\n", "gold", ",", "db_name", "=", "g", "\n", "results", ".", "append", "(", "evaluator", ".", "evaluate_one", "(", "db_name", ",", "gold", ",", "predicted", ")", ")", "\n", "", "evaluator", ".", "finalize", "(", ")", "\n", "\n", "print_scores", "(", "evaluator", ".", "scores", ",", "etype", ")", "\n", "return", "{", "\"per_item\"", ":", "results", ",", "\"total_scores\"", ":", "evaluator", ".", "scores", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.eval_exec_match": [[844, 874], ["sqlite3.connect", "sqlite3.connect.cursor", "conn.cursor.execute", "conn.cursor.fetchall", "conn.cursor.execute", "conn.cursor.fetchall", "enumerate", "spider_eval.eval_exec_match.res_map"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.execute", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.execute"], ["", "def", "eval_exec_match", "(", "db", ",", "p_str", ",", "g_str", ",", "pred", ",", "gold", ")", ":", "\n", "    ", "\"\"\"\n    return 1 if the values between prediction and gold are matching\n    in the corresponding index. Currently not support multiple col_unit(pairs).\n    \"\"\"", "\n", "conn", "=", "sqlite3", ".", "connect", "(", "db", ")", "\n", "cursor", "=", "conn", ".", "cursor", "(", ")", "\n", "try", ":", "\n", "        ", "cursor", ".", "execute", "(", "p_str", ")", "\n", "p_res", "=", "cursor", ".", "fetchall", "(", ")", "\n", "", "except", ":", "\n", "        ", "return", "False", "\n", "\n", "", "cursor", ".", "execute", "(", "g_str", ")", "\n", "q_res", "=", "cursor", ".", "fetchall", "(", ")", "\n", "\n", "def", "res_map", "(", "res", ",", "val_units", ")", ":", "\n", "        ", "rmap", "=", "{", "}", "\n", "for", "idx", ",", "val_unit", "in", "enumerate", "(", "val_units", ")", ":", "\n", "            ", "key", "=", "(", "\n", "tuple", "(", "val_unit", "[", "1", "]", ")", "\n", "if", "not", "val_unit", "[", "2", "]", "\n", "else", "(", "val_unit", "[", "0", "]", ",", "tuple", "(", "val_unit", "[", "1", "]", ")", ",", "tuple", "(", "val_unit", "[", "2", "]", ")", ")", "\n", ")", "\n", "rmap", "[", "key", "]", "=", "[", "r", "[", "idx", "]", "for", "r", "in", "res", "]", "\n", "", "return", "rmap", "\n", "\n", "", "p_val_units", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "pred", "[", "\"select\"", "]", "[", "1", "]", "]", "\n", "q_val_units", "=", "[", "unit", "[", "1", "]", "for", "unit", "in", "gold", "[", "\"select\"", "]", "[", "1", "]", "]", "\n", "return", "res_map", "(", "p_res", ",", "p_val_units", ")", "==", "res_map", "(", "q_res", ",", "q_val_units", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_cond_unit_val": [[877, 891], ["type", "spider_eval.rebuild_sql_val", "type", "spider_eval.rebuild_sql_val"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_val"], ["", "def", "rebuild_cond_unit_val", "(", "cond_unit", ")", ":", "\n", "    ", "if", "cond_unit", "is", "None", "or", "not", "DISABLE_VALUE", ":", "\n", "        ", "return", "cond_unit", "\n", "\n", "", "not_op", ",", "op_id", ",", "val_unit", ",", "val1", ",", "val2", "=", "cond_unit", "\n", "if", "type", "(", "val1", ")", "is", "not", "dict", ":", "\n", "        ", "val1", "=", "None", "\n", "", "else", ":", "\n", "        ", "val1", "=", "rebuild_sql_val", "(", "val1", ")", "\n", "", "if", "type", "(", "val2", ")", "is", "not", "dict", ":", "\n", "        ", "val2", "=", "None", "\n", "", "else", ":", "\n", "        ", "val2", "=", "rebuild_sql_val", "(", "val2", ")", "\n", "", "return", "not_op", ",", "op_id", ",", "val_unit", ",", "val1", ",", "val2", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_condition_val": [[893, 904], ["enumerate", "res.append", "res.append", "spider_eval.rebuild_cond_unit_val"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_cond_unit_val"], ["", "def", "rebuild_condition_val", "(", "condition", ")", ":", "\n", "    ", "if", "condition", "is", "None", "or", "not", "DISABLE_VALUE", ":", "\n", "        ", "return", "condition", "\n", "\n", "", "res", "=", "[", "]", "\n", "for", "idx", ",", "it", "in", "enumerate", "(", "condition", ")", ":", "\n", "        ", "if", "idx", "%", "2", "==", "0", ":", "\n", "            ", "res", ".", "append", "(", "rebuild_cond_unit_val", "(", "it", ")", ")", "\n", "", "else", ":", "\n", "            ", "res", ".", "append", "(", "it", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_val": [[906, 918], ["spider_eval.rebuild_condition_val", "spider_eval.rebuild_condition_val", "spider_eval.rebuild_condition_val", "spider_eval.rebuild_sql_val", "spider_eval.rebuild_sql_val", "spider_eval.rebuild_sql_val"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_condition_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_condition_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_condition_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_val"], ["", "def", "rebuild_sql_val", "(", "sql", ")", ":", "\n", "    ", "if", "sql", "is", "None", "or", "not", "DISABLE_VALUE", ":", "\n", "        ", "return", "sql", "\n", "\n", "", "sql", "[", "\"from\"", "]", "[", "\"conds\"", "]", "=", "rebuild_condition_val", "(", "sql", "[", "\"from\"", "]", "[", "\"conds\"", "]", ")", "\n", "sql", "[", "\"having\"", "]", "=", "rebuild_condition_val", "(", "sql", "[", "\"having\"", "]", ")", "\n", "sql", "[", "\"where\"", "]", "=", "rebuild_condition_val", "(", "sql", "[", "\"where\"", "]", ")", "\n", "sql", "[", "\"intersect\"", "]", "=", "rebuild_sql_val", "(", "sql", "[", "\"intersect\"", "]", ")", "\n", "sql", "[", "\"except\"", "]", "=", "rebuild_sql_val", "(", "sql", "[", "\"except\"", "]", ")", "\n", "sql", "[", "\"union\"", "]", "=", "rebuild_sql_val", "(", "sql", "[", "\"union\"", "]", ")", "\n", "\n", "return", "sql", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.build_valid_col_units": [[921, 933], ["list", "schema.idMap.values", "valid_col_units.append", "value.index"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.values", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["", "def", "build_valid_col_units", "(", "table_units", ",", "schema", ")", ":", "\n", "    ", "col_ids", "=", "[", "\n", "table_unit", "[", "1", "]", "\n", "for", "table_unit", "in", "table_units", "\n", "if", "table_unit", "[", "0", "]", "==", "TABLE_TYPE", "[", "\"table_unit\"", "]", "\n", "]", "\n", "prefixs", "=", "[", "col_id", "[", ":", "-", "2", "]", "for", "col_id", "in", "col_ids", "]", "\n", "valid_col_units", "=", "[", "]", "\n", "for", "value", "in", "list", "(", "schema", ".", "idMap", ".", "values", "(", ")", ")", ":", "\n", "        ", "if", "\".\"", "in", "value", "and", "value", "[", ":", "value", ".", "index", "(", "\".\"", ")", "]", "in", "prefixs", ":", "\n", "            ", "valid_col_units", ".", "append", "(", "value", ")", "\n", "", "", "return", "valid_col_units", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_col_unit_col": [[935, 945], ["None"], "function", ["None"], ["", "def", "rebuild_col_unit_col", "(", "valid_col_units", ",", "col_unit", ",", "kmap", ")", ":", "\n", "    ", "if", "col_unit", "is", "None", ":", "\n", "        ", "return", "col_unit", "\n", "\n", "", "agg_id", ",", "col_id", ",", "distinct", "=", "col_unit", "\n", "if", "col_id", "in", "kmap", "and", "col_id", "in", "valid_col_units", ":", "\n", "        ", "col_id", "=", "kmap", "[", "col_id", "]", "\n", "", "if", "DISABLE_DISTINCT", ":", "\n", "        ", "distinct", "=", "None", "\n", "", "return", "agg_id", ",", "col_id", ",", "distinct", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_val_unit_col": [[947, 955], ["spider_eval.rebuild_col_unit_col", "spider_eval.rebuild_col_unit_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_col_unit_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_col_unit_col"], ["", "def", "rebuild_val_unit_col", "(", "valid_col_units", ",", "val_unit", ",", "kmap", ")", ":", "\n", "    ", "if", "val_unit", "is", "None", ":", "\n", "        ", "return", "val_unit", "\n", "\n", "", "unit_op", ",", "col_unit1", ",", "col_unit2", "=", "val_unit", "\n", "col_unit1", "=", "rebuild_col_unit_col", "(", "valid_col_units", ",", "col_unit1", ",", "kmap", ")", "\n", "col_unit2", "=", "rebuild_col_unit_col", "(", "valid_col_units", ",", "col_unit2", ",", "kmap", ")", "\n", "return", "unit_op", ",", "col_unit1", ",", "col_unit2", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_table_unit_col": [[957, 965], ["isinstance", "spider_eval.rebuild_col_unit_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_col_unit_col"], ["", "def", "rebuild_table_unit_col", "(", "valid_col_units", ",", "table_unit", ",", "kmap", ")", ":", "\n", "    ", "if", "table_unit", "is", "None", ":", "\n", "        ", "return", "table_unit", "\n", "\n", "", "table_type", ",", "col_unit_or_sql", "=", "table_unit", "\n", "if", "isinstance", "(", "col_unit_or_sql", ",", "tuple", ")", ":", "\n", "        ", "col_unit_or_sql", "=", "rebuild_col_unit_col", "(", "valid_col_units", ",", "col_unit_or_sql", ",", "kmap", ")", "\n", "", "return", "table_type", ",", "col_unit_or_sql", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_cond_unit_col": [[967, 974], ["spider_eval.rebuild_val_unit_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_val_unit_col"], ["", "def", "rebuild_cond_unit_col", "(", "valid_col_units", ",", "cond_unit", ",", "kmap", ")", ":", "\n", "    ", "if", "cond_unit", "is", "None", ":", "\n", "        ", "return", "cond_unit", "\n", "\n", "", "not_op", ",", "op_id", ",", "val_unit", ",", "val1", ",", "val2", "=", "cond_unit", "\n", "val_unit", "=", "rebuild_val_unit_col", "(", "valid_col_units", ",", "val_unit", ",", "kmap", ")", "\n", "return", "not_op", ",", "op_id", ",", "val_unit", ",", "val1", ",", "val2", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_condition_col": [[976, 983], ["range", "len", "spider_eval.rebuild_cond_unit_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_cond_unit_col"], ["", "def", "rebuild_condition_col", "(", "valid_col_units", ",", "condition", ",", "kmap", ")", ":", "\n", "    ", "for", "idx", "in", "range", "(", "len", "(", "condition", ")", ")", ":", "\n", "        ", "if", "idx", "%", "2", "==", "0", ":", "\n", "            ", "condition", "[", "idx", "]", "=", "rebuild_cond_unit_col", "(", "\n", "valid_col_units", ",", "condition", "[", "idx", "]", ",", "kmap", "\n", ")", "\n", "", "", "return", "condition", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_select_col": [[985, 996], ["new_list.append", "spider_eval.rebuild_val_unit_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_val_unit_col"], ["", "def", "rebuild_select_col", "(", "valid_col_units", ",", "sel", ",", "kmap", ")", ":", "\n", "    ", "if", "sel", "is", "None", ":", "\n", "        ", "return", "sel", "\n", "", "distinct", ",", "_list", "=", "sel", "\n", "new_list", "=", "[", "]", "\n", "for", "it", "in", "_list", ":", "\n", "        ", "agg_id", ",", "val_unit", "=", "it", "\n", "new_list", ".", "append", "(", "(", "agg_id", ",", "rebuild_val_unit_col", "(", "valid_col_units", ",", "val_unit", ",", "kmap", ")", ")", ")", "\n", "", "if", "DISABLE_DISTINCT", ":", "\n", "        ", "distinct", "=", "None", "\n", "", "return", "distinct", ",", "new_list", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_from_col": [[998, 1008], ["spider_eval.rebuild_condition_col", "spider_eval.rebuild_table_unit_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_condition_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_table_unit_col"], ["", "def", "rebuild_from_col", "(", "valid_col_units", ",", "from_", ",", "kmap", ")", ":", "\n", "    ", "if", "from_", "is", "None", ":", "\n", "        ", "return", "from_", "\n", "\n", "", "from_", "[", "\"table_units\"", "]", "=", "[", "\n", "rebuild_table_unit_col", "(", "valid_col_units", ",", "table_unit", ",", "kmap", ")", "\n", "for", "table_unit", "in", "from_", "[", "\"table_units\"", "]", "\n", "]", "\n", "from_", "[", "\"conds\"", "]", "=", "rebuild_condition_col", "(", "valid_col_units", ",", "from_", "[", "\"conds\"", "]", ",", "kmap", ")", "\n", "return", "from_", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_group_by_col": [[1010, 1016], ["spider_eval.rebuild_col_unit_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_col_unit_col"], ["", "def", "rebuild_group_by_col", "(", "valid_col_units", ",", "group_by", ",", "kmap", ")", ":", "\n", "    ", "if", "group_by", "is", "None", ":", "\n", "        ", "return", "group_by", "\n", "\n", "", "return", "[", "\n", "rebuild_col_unit_col", "(", "valid_col_units", ",", "col_unit", ",", "kmap", ")", "for", "col_unit", "in", "group_by", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_order_by_col": [[1019, 1028], ["spider_eval.rebuild_val_unit_col", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_val_unit_col"], ["", "def", "rebuild_order_by_col", "(", "valid_col_units", ",", "order_by", ",", "kmap", ")", ":", "\n", "    ", "if", "order_by", "is", "None", "or", "len", "(", "order_by", ")", "==", "0", ":", "\n", "        ", "return", "order_by", "\n", "\n", "", "direction", ",", "val_units", "=", "order_by", "\n", "new_val_units", "=", "[", "\n", "rebuild_val_unit_col", "(", "valid_col_units", ",", "val_unit", ",", "kmap", ")", "for", "val_unit", "in", "val_units", "\n", "]", "\n", "return", "direction", ",", "new_val_units", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_col": [[1030, 1045], ["spider_eval.rebuild_select_col", "spider_eval.rebuild_from_col", "spider_eval.rebuild_condition_col", "spider_eval.rebuild_group_by_col", "spider_eval.rebuild_order_by_col", "spider_eval.rebuild_condition_col", "spider_eval.rebuild_sql_col", "spider_eval.rebuild_sql_col", "spider_eval.rebuild_sql_col"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_select_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_from_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_condition_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_group_by_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_order_by_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_condition_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_col", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.rebuild_sql_col"], ["", "def", "rebuild_sql_col", "(", "valid_col_units", ",", "sql", ",", "kmap", ")", ":", "\n", "    ", "if", "sql", "is", "None", ":", "\n", "        ", "return", "sql", "\n", "\n", "", "sql", "[", "\"select\"", "]", "=", "rebuild_select_col", "(", "valid_col_units", ",", "sql", "[", "\"select\"", "]", ",", "kmap", ")", "\n", "sql", "[", "\"from\"", "]", "=", "rebuild_from_col", "(", "valid_col_units", ",", "sql", "[", "\"from\"", "]", ",", "kmap", ")", "\n", "sql", "[", "\"where\"", "]", "=", "rebuild_condition_col", "(", "valid_col_units", ",", "sql", "[", "\"where\"", "]", ",", "kmap", ")", "\n", "sql", "[", "\"groupBy\"", "]", "=", "rebuild_group_by_col", "(", "valid_col_units", ",", "sql", "[", "\"groupBy\"", "]", ",", "kmap", ")", "\n", "sql", "[", "\"orderBy\"", "]", "=", "rebuild_order_by_col", "(", "valid_col_units", ",", "sql", "[", "\"orderBy\"", "]", ",", "kmap", ")", "\n", "sql", "[", "\"having\"", "]", "=", "rebuild_condition_col", "(", "valid_col_units", ",", "sql", "[", "\"having\"", "]", ",", "kmap", ")", "\n", "sql", "[", "\"intersect\"", "]", "=", "rebuild_sql_col", "(", "valid_col_units", ",", "sql", "[", "\"intersect\"", "]", ",", "kmap", ")", "\n", "sql", "[", "\"except\"", "]", "=", "rebuild_sql_col", "(", "valid_col_units", ",", "sql", "[", "\"except\"", "]", ",", "kmap", ")", "\n", "sql", "[", "\"union\"", "]", "=", "rebuild_sql_col", "(", "valid_col_units", ",", "sql", "[", "\"union\"", "]", ",", "kmap", ")", "\n", "\n", "return", "sql", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.build_foreign_key_map": [[1047, 1085], ["set", "k_list.append", "spider_eval.build_foreign_key_map.keyset_in_list"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "build_foreign_key_map", "(", "entry", ")", ":", "\n", "    ", "cols_orig", "=", "entry", "[", "\"column_names_original\"", "]", "\n", "tables_orig", "=", "entry", "[", "\"table_names_original\"", "]", "\n", "\n", "# rebuild cols corresponding to idmap in Schema", "\n", "cols", "=", "[", "]", "\n", "for", "col_orig", "in", "cols_orig", ":", "\n", "        ", "if", "col_orig", "[", "0", "]", ">=", "0", ":", "\n", "            ", "t", "=", "tables_orig", "[", "col_orig", "[", "0", "]", "]", "\n", "c", "=", "col_orig", "[", "1", "]", "\n", "cols", ".", "append", "(", "\"__\"", "+", "t", ".", "lower", "(", ")", "+", "\".\"", "+", "c", ".", "lower", "(", ")", "+", "\"__\"", ")", "\n", "", "else", ":", "\n", "            ", "cols", ".", "append", "(", "\"__all__\"", ")", "\n", "\n", "", "", "def", "keyset_in_list", "(", "k1", ",", "k2", ",", "k_list", ")", ":", "\n", "        ", "for", "k_set", "in", "k_list", ":", "\n", "            ", "if", "k1", "in", "k_set", "or", "k2", "in", "k_set", ":", "\n", "                ", "return", "k_set", "\n", "", "", "new_k_set", "=", "set", "(", ")", "\n", "k_list", ".", "append", "(", "new_k_set", ")", "\n", "return", "new_k_set", "\n", "\n", "", "foreign_key_list", "=", "[", "]", "\n", "foreign_keys", "=", "entry", "[", "\"foreign_keys\"", "]", "\n", "for", "fkey", "in", "foreign_keys", ":", "\n", "        ", "key1", ",", "key2", "=", "fkey", "\n", "key_set", "=", "keyset_in_list", "(", "key1", ",", "key2", ",", "foreign_key_list", ")", "\n", "key_set", ".", "add", "(", "key1", ")", "\n", "key_set", ".", "add", "(", "key2", ")", "\n", "\n", "", "foreign_key_map", "=", "{", "}", "\n", "for", "key_set", "in", "foreign_key_list", ":", "\n", "        ", "sorted_list", "=", "sorted", "(", "list", "(", "key_set", ")", ")", "\n", "midx", "=", "sorted_list", "[", "0", "]", "\n", "for", "idx", "in", "sorted_list", ":", "\n", "            ", "foreign_key_map", "[", "cols", "[", "idx", "]", "]", "=", "cols", "[", "midx", "]", "\n", "\n", "", "", "return", "foreign_key_map", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.build_foreign_key_map_from_json": [[1087, 1094], ["open", "json.load", "spider_eval.build_foreign_key_map"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.build_foreign_key_map"], ["", "def", "build_foreign_key_map_from_json", "(", "table", ")", ":", "\n", "    ", "with", "open", "(", "table", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "tables", "=", "{", "}", "\n", "for", "entry", "in", "data", ":", "\n", "        ", "tables", "[", "entry", "[", "\"db_id\"", "]", "]", "=", "build_foreign_key_map", "(", "entry", ")", "\n", "", "return", "tables", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.sampler.sample_seq_topk": [[9, 65], ["model.begin_inference", "range", "finished.sort", "tensor2struct.models.beam_search.Hypothesis", "candidates.sort", "len", "enumerate", "hyp.inference_state.clone", "hyp.inference_state.clone.step", "operator.attrgetter", "candidates.append", "operator.itemgetter", "finished.append", "beam.append", "len", "tensor2struct.models.beam_search.Hypothesis", "tensor2struct.models.beam_search.Hypothesis", "choice_score.item"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.begin_inference", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.clone", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["def", "sample_seq_topk", "(", "\n", "model", ",", "\n", "orig_item", ",", "\n", "preproc_item", ",", "\n", "sample_size", "=", "1", ",", "\n", "max_steps", "=", "1000", ",", "\n", "gumbel_temperature", "=", "0.1", ",", "\n", ")", ":", "\n", "    ", "inference_state", ",", "next_choices", "=", "model", ".", "begin_inference", "(", "orig_item", ",", "preproc_item", ")", "\n", "beam", "=", "[", "Hypothesis", "(", "inference_state", ",", "next_choices", ")", "]", "\n", "finished", "=", "[", "]", "\n", "\n", "for", "step", "in", "range", "(", "max_steps", ")", ":", "\n", "# Check if all beams are finished", "\n", "        ", "if", "len", "(", "finished", ")", "==", "sample_size", ":", "\n", "            ", "break", "\n", "\n", "", "candidates", "=", "[", "]", "\n", "for", "hyp", "in", "beam", ":", "\n", "            ", "for", "i", ",", "(", "choice", ",", "choice_score", ")", "in", "enumerate", "(", "hyp", ".", "next_choices", ")", ":", "\n", "                ", "candidates", ".", "append", "(", "\n", "(", "hyp", ",", "choice", ",", "choice_score", ",", "hyp", ".", "score", "+", "choice_score", ".", "item", "(", ")", ")", "\n", ")", "\n", "\n", "# Keep the top K expansions", "\n", "", "", "candidates", ".", "sort", "(", "key", "=", "operator", ".", "itemgetter", "(", "3", ")", ",", "reverse", "=", "True", ")", "\n", "candidates", "=", "candidates", "[", ":", "sample_size", "-", "len", "(", "finished", ")", "]", "\n", "\n", "# Create the new hypotheses from the expansions", "\n", "beam", "=", "[", "]", "\n", "for", "hyp", ",", "choice", ",", "choice_score", ",", "hyp_score", "in", "candidates", ":", "\n", "            ", "inference_state", "=", "hyp", ".", "inference_state", ".", "clone", "(", ")", "\n", "next_choices", "=", "inference_state", ".", "step", "(", "choice", ")", "\n", "if", "next_choices", "is", "None", ":", "\n", "                ", "finished", ".", "append", "(", "\n", "Hypothesis", "(", "\n", "inference_state", ",", "\n", "None", ",", "\n", "hyp_score", ",", "\n", "hyp", ".", "choice_history", "+", "[", "choice", "]", ",", "\n", "hyp", ".", "score_history", "+", "[", "choice_score", "]", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "beam", ".", "append", "(", "\n", "Hypothesis", "(", "\n", "inference_state", ",", "\n", "next_choices", ",", "\n", "hyp_score", ",", "\n", "hyp", ".", "choice_history", "+", "[", "choice", "]", ",", "\n", "hyp", ".", "score_history", "+", "[", "choice_score", "]", ",", "\n", ")", "\n", ")", "\n", "\n", "", "", "", "finished", ".", "sort", "(", "key", "=", "operator", ".", "attrgetter", "(", "\"score\"", ")", ",", "reverse", "=", "True", ")", "\n", "return", "finished", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.sampler.sample_gumbel": [[67, 70], ["torch.rand().to", "torch.log", "torch.rand", "torch.log"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["", "def", "sample_gumbel", "(", "shape", ",", "device", ",", "eps", "=", "1e-20", ")", ":", "\n", "    ", "U", "=", "torch", ".", "rand", "(", "shape", ")", ".", "to", "(", "device", ")", "\n", "return", "-", "1", "*", "torch", ".", "log", "(", "-", "torch", ".", "log", "(", "U", "+", "eps", ")", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.sampler.gumbel_log_softmax_sample": [[72, 75], ["torch.nn.functional.log_softmax", "sampler.sample_gumbel"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gumbel.sample_gumbel"], ["", "def", "gumbel_log_softmax_sample", "(", "logits", ",", "temperature", ",", "device", ")", ":", "\n", "    ", "y", "=", "logits", "+", "sample_gumbel", "(", "logits", ".", "shape", ",", "device", ")", "\n", "return", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "y", "/", "temperature", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.sampler.sample_seq_with_gumbel": [[77, 138], ["model.begin_inference", "range", "finished.sort", "tensor2struct.models.beam_search.Hypothesis", "candidates.sort", "len", "torch.stack", "sampler.gumbel_log_softmax_sample", "enumerate", "hyp.inference_state.clone", "hyp.inference_state.clone.step", "operator.attrgetter", "candidates.append", "operator.itemgetter", "choice_score.item", "finished.append", "beam.append", "len", "tensor2struct.models.beam_search.Hypothesis", "tensor2struct.models.beam_search.Hypothesis", "perturbed_score_v[].item"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.begin_inference", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.sampler.gumbel_log_softmax_sample", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.clone", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "sample_seq_with_gumbel", "(", "\n", "model", ",", "orig_item", ",", "preproc_item", ",", "sample_size", "=", "1", ",", "max_steps", "=", "1000", ",", "gumbel_temperature", "=", "1", "\n", ")", ":", "\n", "    ", "inference_state", ",", "next_choices", "=", "model", ".", "begin_inference", "(", "orig_item", ",", "preproc_item", ")", "\n", "beam", "=", "[", "Hypothesis", "(", "inference_state", ",", "next_choices", ")", "]", "\n", "finished", "=", "[", "]", "\n", "\n", "assert", "sample_size", "==", "1", "\n", "\n", "for", "step", "in", "range", "(", "max_steps", ")", ":", "\n", "# Check if all beams are finished", "\n", "        ", "if", "len", "(", "finished", ")", "==", "sample_size", ":", "\n", "            ", "break", "\n", "\n", "", "candidates", "=", "[", "]", "\n", "for", "hyp", "in", "beam", ":", "\n", "            ", "orig_score", "=", "[", "choice_score", "for", "_", ",", "choice_score", "in", "hyp", ".", "next_choices", "]", "\n", "orig_score_v", "=", "torch", ".", "stack", "(", "orig_score", ",", "dim", "=", "0", ")", "\n", "perturbed_score_v", "=", "gumbel_log_softmax_sample", "(", "\n", "orig_score_v", ",", "gumbel_temperature", ",", "model", ".", "decoder", ".", "_device", "\n", ")", "\n", "\n", "for", "i", ",", "(", "choice", ",", "real_choice_score", ")", "in", "enumerate", "(", "hyp", ".", "next_choices", ")", ":", "\n", "# gumbel_loss = -1 * torch.exp(perturbed_score_v) * orig_score_v", "\n", "                ", "candidates", ".", "append", "(", "\n", "(", "hyp", ",", "choice", ",", "real_choice_score", ",", "perturbed_score_v", "[", "i", "]", ".", "item", "(", ")", ")", "\n", ")", "\n", "\n", "# Keep the top K expansions", "\n", "", "", "candidates", ".", "sort", "(", "key", "=", "operator", ".", "itemgetter", "(", "3", ")", ",", "reverse", "=", "True", ")", "\n", "candidates", "=", "candidates", "[", ":", "sample_size", "-", "len", "(", "finished", ")", "]", "\n", "\n", "# Create the new hypotheses from the expansions", "\n", "beam", "=", "[", "]", "\n", "for", "hyp", ",", "choice", ",", "choice_score", ",", "perturbed_score", "in", "candidates", ":", "\n", "            ", "inference_state", "=", "hyp", ".", "inference_state", ".", "clone", "(", ")", "\n", "next_choices", "=", "inference_state", ".", "step", "(", "choice", ")", "\n", "cum_score", "=", "hyp", ".", "score", "+", "choice_score", ".", "item", "(", ")", "\n", "if", "next_choices", "is", "None", ":", "\n", "                ", "finished", ".", "append", "(", "\n", "Hypothesis", "(", "\n", "inference_state", ",", "\n", "None", ",", "\n", "cum_score", ",", "\n", "hyp", ".", "choice_history", "+", "[", "choice", "]", ",", "\n", "hyp", ".", "score_history", "+", "[", "choice_score", "]", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "beam", ".", "append", "(", "\n", "Hypothesis", "(", "\n", "inference_state", ",", "\n", "next_choices", ",", "\n", "cum_score", ",", "\n", "hyp", ".", "choice_history", "+", "[", "choice", "]", ",", "\n", "hyp", ".", "score_history", "+", "[", "choice_score", "]", ",", "\n", ")", "\n", ")", "\n", "\n", "", "", "", "finished", ".", "sort", "(", "key", "=", "operator", ".", "attrgetter", "(", "\"score\"", ")", ",", "reverse", "=", "True", ")", "\n", "return", "finished", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.data_scheduler.DataScheduler.get_batch": [[18, 24], ["None"], "methods", ["None"], ["\n", "\n", "def", "load_ssk_module", "(", ")", ":", "\n", "    ", "import", "pyximport", "\n", "\n", "pyximport", ".", "install", "(", ")", "\n", "import", "tensor2struct", ".", "utils", ".", "string_kernel", "as", "ssk", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.data_scheduler.RandScheduler.__init__": [[32, 37], ["data_scheduler.RandScheduler._get_generator"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsRandScheduler._get_generator"], ["\n", "\n", "def", "__init__", "(", "self", ",", "examples", ",", "batch_size", ",", "num_batch_per_train", ")", ":", "\n", "        ", "self", ".", "examples", "=", "examples", "\n", "self", ".", "batch_size", "=", "batch_size", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.data_scheduler.RandScheduler._get_generator": [[38, 48], ["torch.utils.data.DataLoader"], "methods", ["None"], ["self", ".", "num_batch_per_train", "=", "num_batch_per_train", "\n", "self", ".", "iterator", "=", "self", ".", "_create_iterator", "(", ")", "\n", "\n", "", "def", "_get_comp_tasks", "(", "self", ",", "step", ")", ":", "\n", "        ", "examples", "=", "next", "(", "self", ".", "iterator", ")", "\n", "sorted_examples", "=", "sorted", "(", "examples", ",", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "1", "]", "[", "\"actions\"", "]", ")", ")", "\n", "inner_task", "=", "sorted_examples", "[", ":", "self", ".", "batch_size", "]", "\n", "outer_tasks", "=", "[", "sorted_examples", "[", "self", ".", "batch_size", ":", "]", "]", "\n", "return", "inner_task", ",", "outer_tasks", "\n", "\n", "", "def", "_create_iterator", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.data_scheduler.RandScheduler.get_batch": [[49, 55], ["next", "next", "range"], "methods", ["None"], ["        ", "def", "_yield_batches", "(", "x", ",", "bs", ")", ":", "\n", "            ", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "x", ",", "batch_size", "=", "bs", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "collate_fn", "=", "lambda", "x", ":", "x", "\n", ")", "\n", "while", "True", ":", "\n", "                ", "yield", "from", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.data_scheduler.DBScheduler.__init__": [[63, 106], ["data_scheduler.DBScheduler._create_iterators", "logger.info", "data_scheduler.DBScheduler._yield_tasks_by_id", "sum", "len", "data_scheduler.DBScheduler.obtain_large_db", "list", "list", "spacy.load", "data_scheduler.DBScheduler._compute_cached_sim_matrix", "data_scheduler.DBScheduler.dbid2count.values", "data_scheduler.DBScheduler.iterators_by_db.keys", "data_scheduler.DBScheduler.iterators_by_db.keys", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.data_scheduler.DBScheduler._create_iterators", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.data_scheduler.DBScheduler._yield_tasks_by_id", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.data_scheduler.DBScheduler.obtain_large_db", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.data_scheduler.DBScheduler._compute_cached_sim_matrix", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.values", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys"], ["    ", "src_example", "=", "attr", ".", "ib", "(", "default", "=", "None", ")", "\n", "tgt_examples", "=", "attr", ".", "ib", "(", "default", "=", "attr", ".", "Factory", "(", "list", ")", ")", "\n", "edists", "=", "attr", ".", "ib", "(", "default", "=", "attr", ".", "Factory", "(", "list", ")", ")", "\n", "probs", "=", "attr", ".", "ib", "(", "default", "=", "None", ")", "\n", "\n", "\n", "", "@", "registry", ".", "register", "(", "\"data_scheduler\"", ",", "\"cogs_edist_scheduler\"", ")", "\n", "class", "CogsEdistDataScheduler", "(", "data_scheduler", ".", "DataScheduler", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "examples", ",", "\n", "batch_size", ",", "\n", "num_batch_per_train", ",", "\n", "topk", "=", "100", ",", "\n", "temp", "=", "1", ",", "\n", "cache_dir", "=", "\".vector_cache/cogs\"", ",", "\n", "cache_file_prefix", "=", "\"edist\"", ",", "\n", ")", ":", "\n", "        ", "self", ".", "examples", "=", "examples", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_batch_per_train", "=", "num_batch_per_train", "\n", "\n", "# build cache", "\n", "self", ".", "topk", "=", "topk", "\n", "self", ".", "cache_dir", "=", "cache_dir", "\n", "self", ".", "cache_file", "=", "f\"{self.cache_dir}/{cache_file_prefix}_top{self.topk}.pkl\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "cache_file", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "cache_dir", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "self", ".", "cache_dir", ")", "\n", "", "self", ".", "build_cache", "(", "examples", ",", "self", ".", "cache_file", ")", "\n", "", "self", ".", "neighbours_list", ",", "self", ".", "edists_list", "=", "self", ".", "load_from_cache", "(", "self", ".", "cache_file", ")", "\n", "\n", "self", ".", "temp", "=", "temp", "\n", "self", ".", "src_examples", ",", "self", ".", "probs_list", "=", "self", ".", "build_sampling_prob", "(", "\n", "self", ".", "neighbours_list", ",", "self", ".", "edists_list", ",", "self", ".", "temp", "\n", ")", "\n", "self", ".", "generator", "=", "self", ".", "_get_generator", "(", "self", ".", "src_examples", ")", "\n", "\n", "", "def", "_get_generator", "(", "self", ",", "examples", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "examples", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.data_scheduler.DBScheduler.obtain_large_db": [[107, 118], ["set", "set", "logger.info", "data_scheduler.DBScheduler.group_func", "set.add", "len", "set.add"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add"], ["drop_last", "=", "False", ",", "\n", "collate_fn", "=", "lambda", "x", ":", "x", ",", "\n", ")", "\n", "yield", "from", "dataloader", "\n", "\n", "", "", "def", "_get_comp_tasks", "(", "self", ",", "step", ")", ":", "\n", "        ", "inner_batch_ids", "=", "next", "(", "self", ".", "generator", ")", "\n", "inner_batch", "=", "[", "]", "\n", "outer_batch", "=", "[", "]", "\n", "\n", "for", "src_id", "in", "inner_batch_ids", ":", "\n", "            ", "src_example", "=", "self", ".", "examples", "[", "src_id", "]", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.data_scheduler.DBScheduler._compute_cached_sim_matrix": [[119, 142], ["logger.info", "spacy.load", "collections.deepcopy", "collections.deepcopy.remove", "db1.replace", "db2.replace", "data_scheduler.DBScheduler.sp_nlp", "data_scheduler.DBScheduler.sp_nlp", "data_scheduler.DBScheduler.similarity"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.remove"], ["neighbours", "=", "self", ".", "neighbours_list", "[", "src_id", "]", "\n", "sampled_ids", "=", "np", ".", "random", ".", "choice", "(", "\n", "len", "(", "neighbours", ")", ",", "\n", "self", ".", "num_batch_per_train", "-", "1", ",", "\n", "replace", "=", "False", ",", "\n", "p", "=", "self", ".", "probs_list", "[", "src_id", "]", ",", "\n", ")", "\n", "tgt_examples", "=", "[", "self", ".", "examples", "[", "neighbours", "[", "i", "]", "]", "for", "i", "in", "sampled_ids", "]", "\n", "\n", "inner_batch", ".", "append", "(", "src_example", ")", "\n", "outer_batch", "+=", "tgt_examples", "\n", "\n", "", "return", "inner_batch", ",", "[", "outer_batch", "]", "\n", "\n", "", "def", "build_cache", "(", "self", ",", "examples", ",", "cache_file", ")", ":", "\n", "# for testing only", "\n", "# _examples = [examples[i] for i in range(100)]", "\n", "# examples = _examples", "\n", "\n", "# compute token edist", "\n", "        ", "def", "attr_f", "(", "example", ")", ":", "\n", "            ", "return", "example", "[", "0", "]", "[", "\"tokens\"", "]", "\n", "\n", "# compute action edist", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.data_scheduler.DBScheduler.compute_sim": [[143, 145], ["None"], "methods", ["None"], ["# def attr_f(example):", "\n", "#     return example[1][\"actions\"][1:-1]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.data_scheduler.DBScheduler._yield_tasks_by_id": [[146, 179], ["sum", "next", "other_ids.remove", "logger.info", "random.sample", "torch.softmax().numpy", "numpy.random.choice", "numpy.random.choice", "next", "data_scheduler.DBScheduler.compute_sim", "torch.softmax", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.remove", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.sample", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.data_scheduler.DBScheduler.compute_sim", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax"], ["", "window_size", "=", "1000", "# deactive it with a large number", "\n", "neighbours_list", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "edists_list", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "src_example", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "examples", ")", ",", "desc", "=", "\"edist\"", ",", "total", "=", "len", "(", "examples", ")", "\n", ")", ":", "\n", "            ", "src_text_tokens", "=", "attr_f", "(", "src_example", ")", "\n", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "examples", ")", ")", ":", "\n", "                ", "tgt_example", "=", "examples", "[", "j", "]", "\n", "tgt_text_tokens", "=", "attr_f", "(", "tgt_example", ")", "\n", "\n", "if", "(", "\n", "src_text_tokens", "!=", "tgt_text_tokens", "\n", "and", "len", "(", "tgt_text_tokens", ")", ">=", "len", "(", "src_text_tokens", ")", "-", "window_size", "\n", "and", "len", "(", "tgt_text_tokens", ")", "<=", "len", "(", "src_text_tokens", ")", "+", "window_size", "\n", ")", ":", "\n", "                    ", "edist", ",", "_", "=", "edit_utils", ".", "compute_levenshtein_distance", "(", "\n", "src_text_tokens", ",", "tgt_text_tokens", "\n", ")", "\n", "\n", "neighbours_list", "[", "i", "]", ".", "append", "(", "j", ")", "\n", "edists_list", "[", "i", "]", ".", "append", "(", "edist", ")", "\n", "\n", "neighbours_list", "[", "j", "]", ".", "append", "(", "i", ")", "\n", "edists_list", "[", "j", "]", ".", "append", "(", "edist", ")", "\n", "\n", "", "", "", "self", ".", "filter_topk", "(", "neighbours_list", ",", "edists_list", ",", "self", ".", "topk", ")", "\n", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "[", "neighbours_list", ",", "edists_list", "]", ",", "f", ")", "\n", "", "return", "neighbours_list", ",", "edists_list", "\n", "\n", "", "def", "load_from_cache", "(", "self", ",", "cache_file", ")", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.data_scheduler.DBScheduler._create_iterators": [[180, 210], ["itertools.groupby", "collections.defaultdict", "torch.utils.data.DataLoader", "sorted", "list", "data_scheduler.DBScheduler._create_iterators._yield_batches"], "methods", ["None"], ["        ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "neighbours_list", ",", "edists_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "neighbours_list", ",", "edists_list", "\n", "\n", "", "def", "filter_topk", "(", "self", ",", "neighbours_list", ",", "edists_list", ",", "k", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "examples", ")", ")", ":", "\n", "            ", "orig_neighbours", "=", "neighbours_list", "[", "i", "]", "\n", "orig_edists", "=", "edists_list", "[", "i", "]", "\n", "\n", "if", "len", "(", "orig_neighbours", ")", "<", "k", ":", "\n", "                ", "continue", "\n", "\n", "", "sorted_pairs", "=", "sorted", "(", "zip", "(", "orig_neighbours", ",", "orig_edists", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "topk_pairs", "=", "sorted_pairs", "[", ":", "k", "]", "\n", "filtered_neighbours", ",", "filtered_edists", "=", "zip", "(", "*", "topk_pairs", ")", "\n", "\n", "neighbours_list", "[", "i", "]", "=", "filtered_neighbours", "\n", "edists_list", "[", "i", "]", "=", "filtered_edists", "\n", "\n", "", "", "def", "build_sampling_prob", "(", "self", ",", "neighbours_list", ",", "edists_list", ",", "temp", ")", ":", "\n", "        ", "probs_list", "=", "{", "}", "\n", "src_examples", "=", "list", "(", "neighbours_list", ")", "\n", "logger", ".", "info", "(", "\n", "f\"Obtain {len(src_examples)} examples out of {len(self.examples)} that have neighbours\"", "\n", ")", "\n", "for", "src_example", "in", "src_examples", ":", "\n", "            ", "edists", "=", "edists_list", "[", "src_example", "]", "\n", "edists_v", "=", "torch", ".", "Tensor", "(", "edists", ")", "\n", "probs", "=", "torch", ".", "softmax", "(", "-", "edists_v", "/", "temp", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", "\n", "probs_list", "[", "src_example", "]", "=", "probs", "\n", "", "return", "src_examples", ",", "probs_list", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.data_scheduler.DBScheduler.get_batch": [[211, 213], ["next"], "methods", ["None"], ["\n", "", "def", "get_batch", "(", "self", ",", "step", ")", ":", "\n", "        ", "return", "self", ".", "_get_comp_tasks", "(", "step", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.maml.ModelAgnosticMetaLearning.__init__": [[14, 22], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "model", "=", "None", ",", "inner_opt", "=", "None", ",", "first_order", "=", "False", ",", "device", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inner_opt", "=", "inner_opt", "\n", "self", ".", "first_order", "=", "first_order", "\n", "self", ".", "inner_steps", "=", "1", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.maml.ModelAgnosticMetaLearning.get_inner_opt_params": [[23, 28], ["None"], "methods", ["None"], ["", "def", "get_inner_opt_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Equvalent to self.parameters()\n        \"\"\"", "\n", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.maml.ModelAgnosticMetaLearning.meta_train": [[29, 32], ["maml.ModelAgnosticMetaLearning.maml_train"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.maml.ModelAgnosticMetaLearning.maml_train"], ["", "def", "meta_train", "(", "self", ",", "model", ",", "inner_batch", ",", "outer_batches", ")", ":", "\n", "        ", "assert", "not", "self", ".", "first_order", "\n", "return", "self", ".", "maml_train", "(", "model", ",", "inner_batch", ",", "outer_batches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.maml.ModelAgnosticMetaLearning.maml_train": [[33, 79], ["final_loss.item", "higher.innerloop_ctx", "torch.backends.cudnn.flags", "torch.backends.cudnn.flags", "torch.backends.cudnn.flags", "torch.backends.cudnn.flags", "range", "logger.info", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to.div_", "torch.Tensor().to.div_", "logger.info", "final_loss.backward", "gc.collect", "fmodel", "diffopt.step", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "enumerate", "len", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "fmodel", "inner_loss.item", "torch.Tensor().to.item", "torch.Tensor().to.item"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step"], ["", "def", "maml_train", "(", "self", ",", "model", ",", "inner_batch", ",", "outer_batches", ")", ":", "\n", "        ", "assert", "model", ".", "training", "\n", "ret_dic", "=", "{", "}", "\n", "with", "higher", ".", "innerloop_ctx", "(", "\n", "model", ",", "self", ".", "inner_opt", ",", "copy_initial_weights", "=", "False", ",", "device", "=", "self", ".", "device", "\n", ")", "as", "(", "fmodel", ",", "diffopt", ")", ",", "torch", ".", "backends", ".", "cudnn", ".", "flags", "(", "enabled", "=", "False", ")", ":", "\n", "            ", "for", "_step", "in", "range", "(", "self", ".", "inner_steps", ")", ":", "\n", "                ", "inner_ret_dic", "=", "fmodel", "(", "inner_batch", ")", "\n", "inner_loss", "=", "inner_ret_dic", "[", "\"loss\"", "]", "\n", "\n", "# use the snippet for checking higher", "\n", "# def test(params):", "\n", "#     params = [p for p in params if p.requires_grad]", "\n", "#     all_grads = torch.autograd.grad(", "\n", "#         loss,", "\n", "#         params,", "\n", "#         retain_graph=True,", "\n", "#         allow_unused=True,", "\n", "#     )", "\n", "#     print(len(params), sum(p is not None for p in all_grads))", "\n", "# import pdb; pdb.set_trace()", "\n", "# test(model.parameters())", "\n", "# test(fmodel.fast_params)", "\n", "\n", "diffopt", ".", "step", "(", "inner_loss", ")", "\n", "", "logger", ".", "info", "(", "f\"Inner loss: {inner_loss.item()}\"", ")", "\n", "\n", "mean_outer_loss", "=", "torch", ".", "Tensor", "(", "[", "0.0", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "with", "torch", ".", "set_grad_enabled", "(", "model", ".", "training", ")", ":", "\n", "                ", "for", "batch_id", ",", "outer_batch", "in", "enumerate", "(", "outer_batches", ")", ":", "\n", "                    ", "outer_ret_dic", "=", "fmodel", "(", "outer_batch", ")", "\n", "mean_outer_loss", "+=", "outer_ret_dic", "[", "\"loss\"", "]", "\n", "", "", "mean_outer_loss", ".", "div_", "(", "len", "(", "outer_batches", ")", ")", "\n", "logger", ".", "info", "(", "f\"Outer loss: {mean_outer_loss.item()}\"", ")", "\n", "\n", "final_loss", "=", "inner_loss", "+", "mean_outer_loss", "\n", "final_loss", ".", "backward", "(", ")", "\n", "\n", "# not sure if it helps", "\n", "del", "fmodel", "\n", "import", "gc", "\n", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "", "ret_dic", "[", "\"loss\"", "]", "=", "final_loss", ".", "item", "(", ")", "\n", "return", "ret_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.tensors_to_device": [[5, 22], ["torch.device", "isinstance", "tensors.to", "isinstance", "isinstance", "type", "NotImplementedError", "utils.tensors_to_device", "type", "utils.tensors_to_device", "tensors.items"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.tensors_to_device", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.tensors_to_device", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], ["# You may obtain a copy of the License at", "\n", "#", "\n", "#      http://www.apache.org/licenses/LICENSE-2.0", "\n", "#", "\n", "# Unless required by applicable law or agreed to in writing, software", "\n", "# distributed under the License is distributed on an \"AS IS\" BASIS,", "\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "\n", "# See the License for the specific language governing permissions and", "\n", "# limitations under the License.", "\n", "\"\"\"Various testing utilities\n\"\"\"", "\n", "\n", "from", "__future__", "import", "absolute_import", "\n", "from", "__future__", "import", "division", "\n", "from", "__future__", "import", "print_function", "\n", "from", "__future__", "import", "unicode_literals", "\n", "\n", "import", "tempfile", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.optimizers.WarmupPolynomialLRScheduler.update_lr": [[24, 36], ["None"], "methods", ["None"], ["", "class", "Optimizer", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "kwargs", ")", "\n", "self", ".", "updates", "=", "[", "]", "\n", "\n", "", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "return", "[", "u", "[", "0", "]", ".", "get_value", "(", ")", "for", "u", "in", "self", ".", "updates", "]", "\n", "\n", "", "def", "set_state", "(", "self", ",", "value_list", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "updates", ")", "==", "len", "(", "value_list", ")", "\n", "for", "u", ",", "v", "in", "zip", "(", "self", ".", "updates", ",", "value_list", ")", ":", "\n", "            ", "u", "[", "0", "]", ".", "set_value", "(", "floatX", "(", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.optimizers.WarmupPolynomialLRSchedulerGroup.update_lr": [[47, 61], ["zip", "new_lrs.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["grads", "=", "[", "clip_norm", "(", "g", ",", "self", ".", "clip_grad", ",", "norm", ")", "for", "g", "in", "grads", "]", "\n", "\n", "", "return", "grads", "\n", "\n", "", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"name\"", ":", "self", ".", "__class__", ".", "__name__", "}", "\n", "\n", "\n", "", "", "class", "SGD", "(", "Optimizer", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "lr", "=", "0.01", ",", "momentum", "=", "0.", ",", "decay", "=", "0.", ",", "nesterov", "=", "False", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SGD", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "locals", "(", ")", ")", "\n", "self", ".", "iterations", "=", "shared_scalar", "(", "0", ")", "\n", "self", ".", "lr", "=", "shared_scalar", "(", "lr", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.optimizers.WarmupCosineLRScheduler.update_lr": [[72, 87], ["math.cos"], "methods", ["None"], ["self", ".", "updates", ".", "append", "(", "(", "m", ",", "v", ")", ")", "\n", "\n", "if", "self", ".", "nesterov", ":", "\n", "                ", "new_p", "=", "p", "+", "self", ".", "momentum", "*", "v", "-", "lr", "*", "g", "\n", "", "else", ":", "\n", "                ", "new_p", "=", "p", "+", "v", "\n", "\n", "", "self", ".", "updates", ".", "append", "(", "(", "p", ",", "new_p", ")", ")", "\n", "", "return", "self", ".", "updates", "\n", "\n", "", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"name\"", ":", "self", ".", "__class__", ".", "__name__", ",", "\n", "\"lr\"", ":", "float", "(", "self", ".", "lr", ".", "get_value", "(", ")", ")", ",", "\n", "\"momentum\"", ":", "float", "(", "self", ".", "momentum", ".", "get_value", "(", ")", ")", ",", "\n", "\"decay\"", ":", "float", "(", "self", ".", "decay", ".", "get_value", "(", ")", ")", ",", "\n", "\"nesterov\"", ":", "self", ".", "nesterov", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.optimizers.NoOpLRScheduler.__init__": [[91, 93], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lr", "=", "0.001", ",", "rho", "=", "0.9", ",", "epsilon", "=", "1e-6", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RMSprop", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "locals", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.optimizers.NoOpLRScheduler.update_lr": [[94, 96], ["None"], "methods", ["None"], ["self", ".", "lr", "=", "shared_scalar", "(", "lr", ")", "\n", "self", ".", "rho", "=", "shared_scalar", "(", "rho", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.optimizers.BertAdamW.__init__": [[110, 123], ["transformers.AdamW.__init__", "kwargs.copy.copy.copy"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"name\"", ":", "self", ".", "__class__", ".", "__name__", ",", "\n", "\"lr\"", ":", "float", "(", "self", ".", "lr", ".", "get_value", "(", ")", ")", ",", "\n", "\"rho\"", ":", "float", "(", "self", ".", "rho", ".", "get_value", "(", ")", ")", ",", "\n", "\"epsilon\"", ":", "self", ".", "epsilon", "}", "\n", "\n", "\n", "", "", "class", "Adagrad", "(", "Optimizer", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "lr", "=", "0.01", ",", "epsilon", "=", "1e-6", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Adagrad", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "locals", "(", ")", ")", "\n", "self", ".", "lr", "=", "shared_scalar", "(", "lr", ")", "\n", "\n", "", "def", "get_updates", "(", "self", ",", "params", ",", "constraints", ",", "loss", ")", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.optimizers.TorchAdamW.__init__": [[132, 146], ["super().__init__", "kwargs.copy.copy.copy"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy"], ["self", ".", "updates", ".", "append", "(", "(", "p", ",", "c", "(", "new_p", ")", ")", ")", "# apply constraints", "\n", "", "return", "self", ".", "updates", "\n", "\n", "", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"name\"", ":", "self", ".", "__class__", ".", "__name__", ",", "\n", "\"lr\"", ":", "float", "(", "self", ".", "lr", ".", "get_value", "(", ")", ")", ",", "\n", "\"epsilon\"", ":", "self", ".", "epsilon", "}", "\n", "\n", "\n", "", "", "class", "Adadelta", "(", "Optimizer", ")", ":", "\n", "    ", "'''\n        Reference: http://arxiv.org/abs/1212.5701\n    '''", "\n", "def", "__init__", "(", "self", ",", "lr", "=", "1.0", ",", "rho", "=", "0.95", ",", "epsilon", "=", "1e-6", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Adadelta", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.optimizers.BertWarmupPolynomialLRSchedulerGroup.update_lr": [[158, 178], ["enumerate", "zip", "new_lrs.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["self", ".", "updates", ".", "append", "(", "(", "a", ",", "new_a", ")", ")", "\n", "\n", "# use the new accumulator and the *old* delta_accumulator", "\n", "update", "=", "g", "*", "T", ".", "sqrt", "(", "d_a", "+", "self", ".", "epsilon", ")", "/", "T", ".", "sqrt", "(", "new_a", "+", "\n", "self", ".", "epsilon", ")", "\n", "\n", "new_p", "=", "p", "-", "self", ".", "lr", "*", "update", "\n", "self", ".", "updates", ".", "append", "(", "(", "p", ",", "new_p", ")", ")", "\n", "\n", "# update delta_accumulator", "\n", "new_d_a", "=", "self", ".", "rho", "*", "d_a", "+", "(", "1", "-", "self", ".", "rho", ")", "*", "update", "**", "2", "\n", "self", ".", "updates", ".", "append", "(", "(", "d_a", ",", "new_d_a", ")", ")", "\n", "", "return", "self", ".", "updates", ",", "grads", "\n", "\n", "", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"name\"", ":", "self", ".", "__class__", ".", "__name__", ",", "\n", "\"lr\"", ":", "float", "(", "self", ".", "lr", ".", "get_value", "(", ")", ")", ",", "\n", "\"rho\"", ":", "self", ".", "rho", ",", "\n", "\"epsilon\"", ":", "self", ".", "epsilon", "}", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.optimizers.BertWarmupPolynomialLRSchedulerGroupV2.update_lr": [[190, 206], ["enumerate", "zip", "new_lrs.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["        ", "grads", "=", "self", ".", "get_gradients", "(", "loss", ",", "params", ")", "\n", "accumulators", "=", "[", "shared_zeros", "(", "p", ".", "get_value", "(", ")", ".", "shape", ")", "for", "p", "in", "params", "]", "\n", "delta_accumulators", "=", "[", "shared_zeros", "(", "p", ".", "get_value", "(", ")", ".", "shape", ")", "for", "p", "in", "params", "]", "\n", "self", ".", "updates", "=", "[", "]", "\n", "n_step", "=", "theano", ".", "shared", "(", "1.0", ")", "\n", "self", ".", "updates", ".", "append", "(", "(", "n_step", ",", "n_step", "+", "1", ")", ")", "\n", "\n", "for", "p", ",", "g", ",", "a", ",", "d_a", "in", "zip", "(", "params", ",", "grads", ",", "accumulators", ",", "delta_accumulators", ")", ":", "\n", "            ", "g_noise", "=", "self", ".", "rng", ".", "normal", "(", "p", ".", "shape", ",", "0", ",", "T", ".", "sqrt", "(", "n_step", "**", "-", "0.55", ")", ",", "dtype", "=", "'float32'", ")", "\n", "g_deviated", "=", "g", "+", "g_noise", "\n", "\n", "new_a", "=", "self", ".", "rho", "*", "a", "+", "(", "1", "-", "self", ".", "rho", ")", "*", "g_deviated", "**", "2", "# update accumulator", "\n", "self", ".", "updates", ".", "append", "(", "(", "a", ",", "new_a", ")", ")", "\n", "\n", "# use the new accumulator and the *old* delta_accumulator", "\n", "update", "=", "g_deviated", "*", "T", ".", "sqrt", "(", "d_a", "+", "self", ".", "epsilon", ")", "/", "T", ".", "sqrt", "(", "new_a", "+", "\n", "self", ".", "epsilon", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.dump_attention.DumpAttention.__init__": [[87, 94], ["seq2seq.tasks.inference_task.InferenceTask.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "    ", "super", "(", "DumpAttention", ",", "self", ")", ".", "__init__", "(", "params", ")", "\n", "self", ".", "_attention_scores_accum", "=", "[", "]", "\n", "self", ".", "_idx", "=", "0", "\n", "\n", "if", "not", "self", ".", "params", "[", "\"output_dir\"", "]", ":", "\n", "      ", "raise", "ValueError", "(", "\"Must specify output_dir for DumpAttention\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.dump_attention.DumpAttention.default_params": [[95, 100], ["params.update"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update"], ["", "", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "params", "=", "{", "}", "\n", "params", ".", "update", "(", "{", "\"output_dir\"", ":", "\"\"", ",", "\"dump_plots\"", ":", "True", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.dump_attention.DumpAttention.begin": [[101, 104], ["super().begin", "tensorflow.gfile.MakeDirs"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.inference_task.InferenceTask.begin"], ["", "def", "begin", "(", "self", ")", ":", "\n", "    ", "super", "(", "DumpAttention", ",", "self", ")", ".", "begin", "(", ")", "\n", "gfile", ".", "MakeDirs", "(", "self", ".", "params", "[", "\"output_dir\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.dump_attention.DumpAttention.before_run": [[105, 113], ["tensorflow.train.SessionRunArgs"], "methods", ["None"], ["", "def", "before_run", "(", "self", ",", "_run_context", ")", ":", "\n", "    ", "fetches", "=", "{", "}", "\n", "fetches", "[", "\"predicted_tokens\"", "]", "=", "self", ".", "_predictions", "[", "\"predicted_tokens\"", "]", "\n", "fetches", "[", "\"features.source_len\"", "]", "=", "self", ".", "_predictions", "[", "\"features.source_len\"", "]", "\n", "fetches", "[", "\"features.source_tokens\"", "]", "=", "self", ".", "_predictions", "[", "\n", "\"features.source_tokens\"", "]", "\n", "fetches", "[", "\"attention_scores\"", "]", "=", "self", ".", "_predictions", "[", "\"attention_scores\"", "]", "\n", "return", "tf", ".", "train", ".", "SessionRunArgs", "(", "fetches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.dump_attention.DumpAttention.after_run": [[114, 132], ["seq2seq.tasks.inference_task.unbatch_dict", "numpy.char.decode", "numpy.char.decode", "dump_attention.DumpAttention._attention_scores_accum.append", "fetches[].astype", "fetches[].astype", "os.path.join", "dump_attention._create_figure", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "tensorflow.logging.info", "dump_attention._get_scores"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.inference_task.unbatch_dict", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.dump_attention._create_figure", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.dump_attention._get_scores"], ["", "def", "after_run", "(", "self", ",", "_run_context", ",", "run_values", ")", ":", "\n", "    ", "fetches_batch", "=", "run_values", ".", "results", "\n", "for", "fetches", "in", "unbatch_dict", "(", "fetches_batch", ")", ":", "\n", "# Convert to unicode", "\n", "      ", "fetches", "[", "\"predicted_tokens\"", "]", "=", "np", ".", "char", ".", "decode", "(", "\n", "fetches", "[", "\"predicted_tokens\"", "]", ".", "astype", "(", "\"S\"", ")", ",", "\"utf-8\"", ")", "\n", "fetches", "[", "\"features.source_tokens\"", "]", "=", "np", ".", "char", ".", "decode", "(", "\n", "fetches", "[", "\"features.source_tokens\"", "]", ".", "astype", "(", "\"S\"", ")", ",", "\"utf-8\"", ")", "\n", "\n", "if", "self", ".", "params", "[", "\"dump_plots\"", "]", ":", "\n", "        ", "output_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "params", "[", "\"output_dir\"", "]", ",", "\n", "\"{:05d}.png\"", ".", "format", "(", "self", ".", "_idx", ")", ")", "\n", "_create_figure", "(", "fetches", ")", "\n", "plt", ".", "savefig", "(", "output_path", ")", "\n", "plt", ".", "close", "(", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Wrote %s\"", ",", "output_path", ")", "\n", "self", ".", "_idx", "+=", "1", "\n", "", "self", ".", "_attention_scores_accum", ".", "append", "(", "_get_scores", "(", "fetches", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.dump_attention.DumpAttention.end": [[133, 138], ["os.path.join", "numpy.savez", "tensorflow.logging.info"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["", "", "def", "end", "(", "self", ",", "_session", ")", ":", "\n", "    ", "scores_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "params", "[", "\"output_dir\"", "]", ",", "\n", "\"attention_scores.npz\"", ")", "\n", "np", ".", "savez", "(", "scores_path", ",", "*", "self", ".", "_attention_scores_accum", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Wrote %s\"", ",", "scores_path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.dump_attention._get_scores": [[35, 41], ["seq2seq.tasks.decode_text._get_prediction_length"], "function", ["None"], ["def", "_get_scores", "(", "predictions_dict", ")", ":", "\n", "  ", "\"\"\"Returns the attention scores, sliced by source and target length.\n  \"\"\"", "\n", "prediction_len", "=", "_get_prediction_length", "(", "predictions_dict", ")", "\n", "source_len", "=", "predictions_dict", "[", "\"features.source_len\"", "]", "\n", "return", "predictions_dict", "[", "\"attention_scores\"", "]", "[", ":", "prediction_len", ",", ":", "source_len", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.dump_attention._create_figure": [[43, 68], ["list", "seq2seq.tasks.decode_text._get_prediction_length", "matplotlib.pyplot.figure", "matplotlib.pyplot.imshow", "matplotlib.pyplot.xticks", "matplotlib.pyplot.yticks", "plt.figure.tight_layout", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "_create_figure", "(", "predictions_dict", ")", ":", "\n", "  ", "\"\"\"Creates and returns a new figure that visualizes\n  attention scores for for a single model predictions.\n  \"\"\"", "\n", "\n", "# Find out how long the predicted sequence is", "\n", "target_words", "=", "list", "(", "predictions_dict", "[", "\"predicted_tokens\"", "]", ")", "\n", "\n", "prediction_len", "=", "_get_prediction_length", "(", "predictions_dict", ")", "\n", "\n", "# Get source words", "\n", "source_len", "=", "predictions_dict", "[", "\"features.source_len\"", "]", "\n", "source_words", "=", "predictions_dict", "[", "\"features.source_tokens\"", "]", "[", ":", "source_len", "]", "\n", "\n", "# Plot", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "8", ")", ")", "\n", "plt", ".", "imshow", "(", "\n", "X", "=", "predictions_dict", "[", "\"attention_scores\"", "]", "[", ":", "prediction_len", ",", ":", "source_len", "]", ",", "\n", "interpolation", "=", "\"nearest\"", ",", "\n", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", "\n", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "source_len", ")", ",", "source_words", ",", "rotation", "=", "45", ")", "\n", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "prediction_len", ")", ",", "target_words", ",", "rotation", "=", "-", "45", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.inference_task.InferenceTask.__init__": [[57, 60], ["seq2seq.configurable.Configurable.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "    ", "Configurable", ".", "__init__", "(", "self", ",", "params", ",", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "INFER", ")", "\n", "self", ".", "_predictions", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.inference_task.InferenceTask.begin": [[61, 63], ["seq2seq.graph_utils.get_dict_from_collection"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.get_dict_from_collection"], ["", "def", "begin", "(", "self", ")", ":", "\n", "    ", "self", ".", "_predictions", "=", "graph_utils", ".", "get_dict_from_collection", "(", "\"predictions\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.inference_task.InferenceTask.default_params": [[64, 67], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractstaticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.inference_task.unbatch_dict": [[32, 39], ["range", "list", "dict_.values", "dict_.items"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.values", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], ["def", "unbatch_dict", "(", "dict_", ")", ":", "\n", "  ", "\"\"\"Converts a dictionary of batch items to a batch/list of\n  dictionary items.\n  \"\"\"", "\n", "batch_size", "=", "list", "(", "dict_", ".", "values", "(", ")", ")", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "    ", "yield", "{", "key", ":", "value", "[", "i", "]", "for", "key", ",", "value", "in", "dict_", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.dump_beams.DumpBeams.__init__": [[38, 49], ["seq2seq.tasks.inference_task.InferenceTask.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "    ", "super", "(", "DumpBeams", ",", "self", ")", ".", "__init__", "(", "params", ")", "\n", "self", ".", "_beam_accum", "=", "{", "\n", "\"predicted_ids\"", ":", "[", "]", ",", "\n", "\"beam_parent_ids\"", ":", "[", "]", ",", "\n", "\"scores\"", ":", "[", "]", ",", "\n", "\"log_probs\"", ":", "[", "]", "\n", "}", "\n", "\n", "if", "not", "self", ".", "params", "[", "\"file\"", "]", ":", "\n", "      ", "raise", "ValueError", "(", "\"Must specify file for DumpBeams\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.dump_beams.DumpBeams.default_params": [[50, 55], ["params.update"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update"], ["", "", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "params", "=", "{", "}", "\n", "params", ".", "update", "(", "{", "\"file\"", ":", "\"\"", ",", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.dump_beams.DumpBeams.before_run": [[56, 67], ["tensorflow.train.SessionRunArgs"], "methods", ["None"], ["", "def", "before_run", "(", "self", ",", "_run_context", ")", ":", "\n", "    ", "fetches", "=", "{", "}", "\n", "fetches", "[", "\"beam_search_output.predicted_ids\"", "]", "=", "self", ".", "_predictions", "[", "\n", "\"beam_search_output.predicted_ids\"", "]", "\n", "fetches", "[", "\"beam_search_output.beam_parent_ids\"", "]", "=", "self", ".", "_predictions", "[", "\n", "\"beam_search_output.beam_parent_ids\"", "]", "\n", "fetches", "[", "\"beam_search_output.scores\"", "]", "=", "self", ".", "_predictions", "[", "\n", "\"beam_search_output.scores\"", "]", "\n", "fetches", "[", "\"beam_search_output.log_probs\"", "]", "=", "self", ".", "_predictions", "[", "\n", "\"beam_search_output.log_probs\"", "]", "\n", "return", "tf", ".", "train", ".", "SessionRunArgs", "(", "fetches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.dump_beams.DumpBeams.after_run": [[68, 78], ["seq2seq.tasks.inference_task.unbatch_dict", "dump_beams.DumpBeams._beam_accum[].append", "dump_beams.DumpBeams._beam_accum[].append", "dump_beams.DumpBeams._beam_accum[].append", "dump_beams.DumpBeams._beam_accum[].append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.inference_task.unbatch_dict", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "after_run", "(", "self", ",", "_run_context", ",", "run_values", ")", ":", "\n", "    ", "fetches_batch", "=", "run_values", ".", "results", "\n", "for", "fetches", "in", "unbatch_dict", "(", "fetches_batch", ")", ":", "\n", "      ", "self", ".", "_beam_accum", "[", "\"predicted_ids\"", "]", ".", "append", "(", "fetches", "[", "\n", "\"beam_search_output.predicted_ids\"", "]", ")", "\n", "self", ".", "_beam_accum", "[", "\"beam_parent_ids\"", "]", ".", "append", "(", "fetches", "[", "\n", "\"beam_search_output.beam_parent_ids\"", "]", ")", "\n", "self", ".", "_beam_accum", "[", "\"scores\"", "]", ".", "append", "(", "fetches", "[", "\"beam_search_output.scores\"", "]", ")", "\n", "self", ".", "_beam_accum", "[", "\"log_probs\"", "]", ".", "append", "(", "fetches", "[", "\n", "\"beam_search_output.log_probs\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.tasks.dump_beams.DumpBeams.end": [[79, 81], ["numpy.savez"], "methods", ["None"], ["", "", "def", "end", "(", "self", ",", "_session", ")", ":", "\n", "    ", "np", ".", "savez", "(", "self", ".", "params", "[", "\"file\"", "]", ",", "**", "self", ".", "_beam_accum", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.attention_decoder.AttentionDecoder.__init__": [[65, 84], ["seq2seq.decoders.rnn_decoder.RNNDecoder.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "\n", "params", ",", "\n", "mode", ",", "\n", "vocab_size", ",", "\n", "attention_keys", ",", "\n", "attention_values", ",", "\n", "attention_values_length", ",", "\n", "attention_fn", ",", "\n", "reverse_scores_lengths", "=", "None", ",", "\n", "decoder_mask", "=", "None", ",", "\n", "name", "=", "\"attention_decoder\"", ")", ":", "\n", "    ", "super", "(", "AttentionDecoder", ",", "self", ")", ".", "__init__", "(", "params", ",", "mode", ",", "name", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "attention_keys", "=", "attention_keys", "\n", "self", ".", "attention_values", "=", "attention_values", "\n", "self", ".", "attention_values_length", "=", "attention_values_length", "\n", "self", ".", "attention_fn", "=", "attention_fn", "\n", "self", ".", "reverse_scores_lengths", "=", "reverse_scores_lengths", "\n", "self", ".", "decoder_mask", "=", "decoder_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.attention_decoder.AttentionDecoder.output_size": [[85, 93], ["attention_decoder.AttentionDecoderOutput", "tensorflow.TensorShape", "tensorflow.shape", "attention_decoder.AttentionDecoder.attention_values.get_shape"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "    ", "return", "AttentionDecoderOutput", "(", "\n", "logits", "=", "self", ".", "vocab_size", ",", "\n", "predicted_ids", "=", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "cell_output", "=", "self", ".", "cell", ".", "output_size", ",", "\n", "attention_scores", "=", "tf", ".", "shape", "(", "self", ".", "attention_values", ")", "[", "1", ":", "-", "1", "]", ",", "\n", "attention_context", "=", "self", ".", "attention_values", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.attention_decoder.AttentionDecoder.output_dtype": [[94, 102], ["attention_decoder.AttentionDecoderOutput"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_dtype", "(", "self", ")", ":", "\n", "    ", "return", "AttentionDecoderOutput", "(", "\n", "logits", "=", "tf", ".", "float32", ",", "\n", "predicted_ids", "=", "tf", ".", "int32", ",", "\n", "cell_output", "=", "tf", ".", "float32", ",", "\n", "attention_scores", "=", "tf", ".", "float32", ",", "\n", "attention_context", "=", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.attention_decoder.AttentionDecoder.initialize": [[103, 114], ["attention_decoder.AttentionDecoder.helper.initialize", "tensorflow.zeros", "tensorflow.concat", "tensorflow.shape", "attention_decoder.AttentionDecoder.attention_values.get_shape().as_list", "attention_decoder.AttentionDecoder.attention_values.get_shape"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder.initialize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.concat", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape"], ["", "def", "initialize", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "    ", "finished", ",", "first_inputs", "=", "self", ".", "helper", ".", "initialize", "(", ")", "\n", "\n", "# Concat empty attention context", "\n", "attention_context", "=", "tf", ".", "zeros", "(", "[", "\n", "tf", ".", "shape", "(", "first_inputs", ")", "[", "0", "]", ",", "\n", "self", ".", "attention_values", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "]", ")", "\n", "first_inputs", "=", "tf", ".", "concat", "(", "[", "first_inputs", ",", "attention_context", "]", ",", "1", ")", "\n", "\n", "return", "finished", ",", "first_inputs", ",", "self", ".", "initial_state", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.attention_decoder.AttentionDecoder.compute_output": [[115, 144], ["attention_decoder.AttentionDecoder.attention_fn", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.concat"], ["", "def", "compute_output", "(", "self", ",", "cell_output", ")", ":", "\n", "    ", "\"\"\"Computes the decoder outputs.\"\"\"", "\n", "\n", "# Compute attention", "\n", "att_scores", ",", "attention_context", "=", "self", ".", "attention_fn", "(", "\n", "query", "=", "cell_output", ",", "\n", "keys", "=", "self", ".", "attention_keys", ",", "\n", "values", "=", "self", ".", "attention_values", ",", "\n", "values_length", "=", "self", ".", "attention_values_length", ")", "\n", "\n", "# TODO: Make this a parameter: We may or may not want this.", "\n", "# Transform attention context.", "\n", "# This makes the softmax smaller and allows us to synthesize information", "\n", "# between decoder state and attention context", "\n", "# see https://arxiv.org/abs/1508.04025v5", "\n", "softmax_input", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "\n", "inputs", "=", "tf", ".", "concat", "(", "[", "cell_output", ",", "attention_context", "]", ",", "1", ")", ",", "\n", "num_outputs", "=", "self", ".", "cell", ".", "output_size", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "tanh", ",", "\n", "scope", "=", "\"attention_mix\"", ")", "\n", "\n", "# Softmax computation", "\n", "logits", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "\n", "inputs", "=", "softmax_input", ",", "\n", "num_outputs", "=", "self", ".", "vocab_size", ",", "\n", "activation_fn", "=", "None", ",", "\n", "scope", "=", "\"logits\"", ")", "\n", "\n", "return", "softmax_input", ",", "logits", ",", "att_scores", ",", "attention_context", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.attention_decoder.AttentionDecoder._setup": [[145, 165], ["seq2seq.contrib.seq2seq.helper.CustomHelper", "helper.next_inputs", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.GreedyEmbeddingHelper.next_inputs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.concat"], ["", "def", "_setup", "(", "self", ",", "initial_state", ",", "helper", ")", ":", "\n", "    ", "self", ".", "initial_state", "=", "initial_state", "\n", "\n", "def", "att_next_inputs", "(", "time", ",", "outputs", ",", "state", ",", "sample_ids", ",", "name", "=", "None", ")", ":", "\n", "      ", "\"\"\"Wraps the original decoder helper function to append the attention\n      context.\n      \"\"\"", "\n", "finished", ",", "next_inputs", ",", "next_state", "=", "helper", ".", "next_inputs", "(", "\n", "time", "=", "time", ",", "\n", "outputs", "=", "outputs", ",", "\n", "state", "=", "state", ",", "\n", "sample_ids", "=", "sample_ids", ",", "\n", "name", "=", "name", ")", "\n", "next_inputs", "=", "tf", ".", "concat", "(", "[", "next_inputs", ",", "outputs", ".", "attention_context", "]", ",", "1", ")", "\n", "return", "(", "finished", ",", "next_inputs", ",", "next_state", ")", "\n", "\n", "", "self", ".", "helper", "=", "CustomHelper", "(", "\n", "initialize_fn", "=", "helper", ".", "initialize", ",", "\n", "sample_fn", "=", "helper", ".", "sample", ",", "\n", "next_inputs_fn", "=", "att_next_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.attention_decoder.AttentionDecoder.step": [[166, 198], ["attention_decoder.AttentionDecoder.cell", "attention_decoder.AttentionDecoder.compute_output", "attention_decoder.AttentionDecoderOutput", "attention_decoder.AttentionDecoder.helper.next_inputs", "tensorflow.reverse_sequence", "attention_decoder.AttentionDecoder.helper.sample", "attention_decoder.AttentionDecoder.helper.sample", "tensorflow.reduce_min"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder.compute_output", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.GreedyEmbeddingHelper.next_inputs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.sample", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.sample"], ["", "def", "step", "(", "self", ",", "time_", ",", "inputs", ",", "state", ",", "name", "=", "None", ")", ":", "\n", "    ", "cell_output", ",", "cell_state", "=", "self", ".", "cell", "(", "inputs", ",", "state", ")", "\n", "cell_output_new", ",", "logits", ",", "attention_scores", ",", "attention_context", "=", "self", ".", "compute_output", "(", "cell_output", ")", "\n", "\n", "if", "self", ".", "reverse_scores_lengths", "is", "not", "None", ":", "\n", "      ", "attention_scores", "=", "tf", ".", "reverse_sequence", "(", "\n", "input", "=", "attention_scores", ",", "\n", "seq_lengths", "=", "self", ".", "reverse_scores_lengths", ",", "\n", "seq_dim", "=", "1", ",", "\n", "batch_dim", "=", "0", ")", "\n", "", "if", "self", ".", "mode", "==", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "INFER", ":", "\n", "# print (\"type\", self.decoder_mask.get_shape(), self.decoder_mask.dtype)", "\n", "      ", "pred", "=", "logits", "*", "self", ".", "decoder_mask", "+", "(", "tf", ".", "reduce_min", "(", "logits", ")", "-", "1", ")", "*", "(", "1", "-", "self", ".", "decoder_mask", ")", "\n", "\n", "sample_ids", "=", "self", ".", "helper", ".", "sample", "(", "\n", "time", "=", "time_", ",", "outputs", "=", "pred", ",", "state", "=", "cell_state", ")", "\n", "", "else", ":", "\n", "      ", "sample_ids", "=", "self", ".", "helper", ".", "sample", "(", "\n", "time", "=", "time_", ",", "outputs", "=", "logits", ",", "state", "=", "cell_state", ")", "\n", "\n", "", "outputs", "=", "AttentionDecoderOutput", "(", "\n", "logits", "=", "logits", ",", "\n", "predicted_ids", "=", "sample_ids", ",", "\n", "cell_output", "=", "cell_output_new", ",", "\n", "attention_scores", "=", "attention_scores", ",", "\n", "attention_context", "=", "attention_context", ")", "\n", "\n", "finished", ",", "next_inputs", ",", "next_state", "=", "self", ".", "helper", ".", "next_inputs", "(", "\n", "time", "=", "time_", ",", "outputs", "=", "outputs", ",", "state", "=", "cell_state", ",", "sample_ids", "=", "sample_ids", ")", "\n", "\n", "return", "(", "outputs", ",", "next_state", ",", "next_inputs", ",", "finished", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.beam_search_decoder.BeamSearchDecoder.__init__": [[81, 86], ["seq2seq.decoders.rnn_decoder.RNNDecoder.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "decoder", ",", "config", ")", ":", "\n", "    ", "super", "(", "BeamSearchDecoder", ",", "self", ")", ".", "__init__", "(", "decoder", ".", "params", ",", "decoder", ".", "mode", ",", "\n", "decoder", ".", "name", ")", "\n", "self", ".", "decoder", "=", "decoder", "\n", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.beam_search_decoder.BeamSearchDecoder.__call__": [[87, 90], ["beam_search_decoder.BeamSearchDecoder.decoder.variable_scope", "beam_search_decoder.BeamSearchDecoder._build"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.encoder.Encoder._build"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "self", ".", "decoder", ".", "variable_scope", "(", ")", ":", "\n", "      ", "return", "self", ".", "_build", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.beam_search_decoder.BeamSearchDecoder.output_size": [[91, 100], ["beam_search_decoder.BeamDecoderOutput", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "    ", "return", "BeamDecoderOutput", "(", "\n", "logits", "=", "self", ".", "decoder", ".", "vocab_size", ",", "\n", "predicted_ids", "=", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "log_probs", "=", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "scores", "=", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "beam_parent_ids", "=", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "original_outputs", "=", "self", ".", "decoder", ".", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.beam_search_decoder.BeamSearchDecoder.output_dtype": [[101, 110], ["beam_search_decoder.BeamDecoderOutput"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_dtype", "(", "self", ")", ":", "\n", "    ", "return", "BeamDecoderOutput", "(", "\n", "logits", "=", "tf", ".", "float32", ",", "\n", "predicted_ids", "=", "tf", ".", "int32", ",", "\n", "log_probs", "=", "tf", ".", "float32", ",", "\n", "scores", "=", "tf", ".", "float32", ",", "\n", "beam_parent_ids", "=", "tf", ".", "int32", ",", "\n", "original_outputs", "=", "self", ".", "decoder", ".", "output_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.beam_search_decoder.BeamSearchDecoder.batch_size": [[111, 114], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "batch_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "config", ".", "beam_width", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.beam_search_decoder.BeamSearchDecoder.initialize": [[115, 121], ["beam_search_decoder.BeamSearchDecoder.decoder.initialize", "seq2seq.inference.beam_search.create_initial_beam_state"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder.initialize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.inference.beam_search.create_initial_beam_state"], ["", "def", "initialize", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "    ", "finished", ",", "first_inputs", ",", "initial_state", "=", "self", ".", "decoder", ".", "initialize", "(", ")", "\n", "\n", "# Create beam state", "\n", "beam_state", "=", "beam_search", ".", "create_initial_beam_state", "(", "config", "=", "self", ".", "config", ")", "\n", "return", "finished", ",", "first_inputs", ",", "(", "initial_state", ",", "beam_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.beam_search_decoder.BeamSearchDecoder.finalize": [[122, 137], ["seq2seq.inference.beam_search.gather_tree", "tensorflow.python.util.nest.map_structure", "beam_search_decoder.FinalBeamDecoderOutput", "tensorflow.expand_dims", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.inference.beam_search.gather_tree"], ["", "def", "finalize", "(", "self", ",", "outputs", ",", "final_state", ")", ":", "\n", "# Gather according to beam search result", "\n", "    ", "predicted_ids", "=", "beam_search", ".", "gather_tree", "(", "outputs", ".", "predicted_ids", ",", "\n", "outputs", ".", "beam_parent_ids", ")", "\n", "\n", "# We're using a batch size of 1, so we add an extra dimension to", "\n", "# convert tensors to [1, beam_width, ...] shape. This way Tensorflow", "\n", "# doesn't confuse batch_size with beam_width", "\n", "outputs", "=", "nest", ".", "map_structure", "(", "lambda", "x", ":", "tf", ".", "expand_dims", "(", "x", ",", "1", ")", ",", "outputs", ")", "\n", "\n", "final_outputs", "=", "FinalBeamDecoderOutput", "(", "\n", "predicted_ids", "=", "tf", ".", "expand_dims", "(", "predicted_ids", ",", "1", ")", ",", "\n", "beam_search_output", "=", "outputs", ")", "\n", "\n", "return", "final_outputs", ",", "final_state", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.beam_search_decoder.BeamSearchDecoder._build": [[138, 145], ["tensorflow.python.util.nest.map_structure", "beam_search_decoder.BeamSearchDecoder.decoder._setup", "super()._build", "tensorflow.tile"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder._setup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.encoder.Encoder._build"], ["", "def", "_build", "(", "self", ",", "initial_state", ",", "helper", ")", ":", "\n", "# Tile initial state", "\n", "    ", "initial_state", "=", "nest", ".", "map_structure", "(", "\n", "lambda", "x", ":", "tf", ".", "tile", "(", "x", ",", "[", "self", ".", "batch_size", ",", "1", "]", ")", ",", "initial_state", ")", "\n", "self", ".", "decoder", ".", "_setup", "(", "initial_state", ",", "helper", ")", "#pylint: disable=W0212", "\n", "return", "super", "(", "BeamSearchDecoder", ",", "self", ")", ".", "_build", "(", "self", ".", "decoder", ".", "initial_state", ",", "\n", "self", ".", "decoder", ".", "helper", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.beam_search_decoder.BeamSearchDecoder.step": [[146, 184], ["beam_search_decoder.BeamSearchDecoder.decoder.step", "seq2seq.inference.beam_search.beam_search_step", "tensorflow.python.util.nest.map_structure", "tensorflow.python.util.nest.map_structure", "beam_search_decoder.BeamDecoderOutput", "beam_search_decoder.BeamSearchDecoder.decoder.helper.next_inputs", "next_inputs.set_shape", "tensorflow.gather", "tensorflow.gather", "tensorflow.zeros"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.inference.beam_search.beam_search_step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.GreedyEmbeddingHelper.next_inputs"], ["", "def", "step", "(", "self", ",", "time_", ",", "inputs", ",", "state", ",", "name", "=", "None", ")", ":", "\n", "    ", "decoder_state", ",", "beam_state", "=", "state", "\n", "\n", "# Call the original decoder", "\n", "(", "decoder_output", ",", "decoder_state", ",", "_", ",", "_", ")", "=", "self", ".", "decoder", ".", "step", "(", "time_", ",", "inputs", ",", "\n", "decoder_state", ")", "\n", "\n", "# Perform a step of beam search", "\n", "bs_output", ",", "beam_state", "=", "beam_search", ".", "beam_search_step", "(", "\n", "time_", "=", "time_", ",", "\n", "logits", "=", "decoder_output", ".", "logits", ",", "\n", "beam_state", "=", "beam_state", ",", "\n", "config", "=", "self", ".", "config", ")", "\n", "\n", "# Shuffle everything according to beam search result", "\n", "decoder_state", "=", "nest", ".", "map_structure", "(", "\n", "lambda", "x", ":", "tf", ".", "gather", "(", "x", ",", "bs_output", ".", "beam_parent_ids", ")", ",", "decoder_state", ")", "\n", "decoder_output", "=", "nest", ".", "map_structure", "(", "\n", "lambda", "x", ":", "tf", ".", "gather", "(", "x", ",", "bs_output", ".", "beam_parent_ids", ")", ",", "decoder_output", ")", "\n", "\n", "next_state", "=", "(", "decoder_state", ",", "beam_state", ")", "\n", "\n", "outputs", "=", "BeamDecoderOutput", "(", "\n", "logits", "=", "tf", ".", "zeros", "(", "[", "self", ".", "config", ".", "beam_width", ",", "self", ".", "config", ".", "vocab_size", "]", ")", ",", "\n", "predicted_ids", "=", "bs_output", ".", "predicted_ids", ",", "\n", "log_probs", "=", "beam_state", ".", "log_probs", ",", "\n", "scores", "=", "bs_output", ".", "scores", ",", "\n", "beam_parent_ids", "=", "bs_output", ".", "beam_parent_ids", ",", "\n", "original_outputs", "=", "decoder_output", ")", "\n", "\n", "finished", ",", "next_inputs", ",", "next_state", "=", "self", ".", "decoder", ".", "helper", ".", "next_inputs", "(", "\n", "time", "=", "time_", ",", "\n", "outputs", "=", "decoder_output", ",", "\n", "state", "=", "next_state", ",", "\n", "sample_ids", "=", "bs_output", ".", "predicted_ids", ")", "\n", "next_inputs", ".", "set_shape", "(", "[", "self", ".", "batch_size", ",", "None", "]", ")", "\n", "\n", "return", "(", "outputs", ",", "next_state", ",", "next_inputs", ",", "finished", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.basic_decoder.BasicDecoder.__init__": [[31, 35], ["seq2seq.decoders.rnn_decoder.RNNDecoder.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "mode", ",", "vocab_size", ",", "decoder_mask", "=", "None", ",", "name", "=", "\"basic_decoder\"", ")", ":", "\n", "    ", "super", "(", "BasicDecoder", ",", "self", ")", ".", "__init__", "(", "params", ",", "mode", ",", "name", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "decoder_mask", "=", "decoder_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.basic_decoder.BasicDecoder.compute_output": [[36, 40], ["tensorflow.contrib.layers.fully_connected"], "methods", ["None"], ["", "def", "compute_output", "(", "self", ",", "cell_output", ")", ":", "\n", "    ", "\"\"\"Computes the decoder outputs.\"\"\"", "\n", "return", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "\n", "inputs", "=", "cell_output", ",", "num_outputs", "=", "self", ".", "vocab_size", ",", "activation_fn", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.basic_decoder.BasicDecoder.output_size": [[41, 47], ["seq2seq.decoders.rnn_decoder.DecoderOutput", "tensorflow.TensorShape"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "    ", "return", "DecoderOutput", "(", "\n", "logits", "=", "self", ".", "vocab_size", ",", "\n", "predicted_ids", "=", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "cell_output", "=", "self", ".", "cell", ".", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.basic_decoder.BasicDecoder.output_dtype": [[48, 52], ["seq2seq.decoders.rnn_decoder.DecoderOutput"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_dtype", "(", "self", ")", ":", "\n", "    ", "return", "DecoderOutput", "(", "\n", "logits", "=", "tf", ".", "float32", ",", "predicted_ids", "=", "tf", ".", "int32", ",", "cell_output", "=", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.basic_decoder.BasicDecoder.initialize": [[53, 56], ["basic_decoder.BasicDecoder.helper.initialize"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder.initialize"], ["", "def", "initialize", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "    ", "finished", ",", "first_inputs", "=", "self", ".", "helper", ".", "initialize", "(", ")", "\n", "return", "finished", ",", "first_inputs", ",", "self", ".", "initial_state", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.basic_decoder.BasicDecoder.step": [[57, 82], ["basic_decoder.BasicDecoder.cell", "basic_decoder.BasicDecoder.compute_output", "seq2seq.decoders.rnn_decoder.DecoderOutput", "basic_decoder.BasicDecoder.helper.next_inputs", "basic_decoder.BasicDecoder.helper.sample", "basic_decoder.BasicDecoder.helper.sample", "tensorflow.reduce_min"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder.compute_output", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.GreedyEmbeddingHelper.next_inputs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.sample", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.sample"], ["", "def", "step", "(", "self", ",", "time_", ",", "inputs", ",", "state", ",", "name", "=", "None", ")", ":", "\n", "    ", "cell_output", ",", "cell_state", "=", "self", ".", "cell", "(", "inputs", ",", "state", ")", "\n", "logits", "=", "self", ".", "compute_output", "(", "cell_output", ")", "\n", "\n", "\n", "\n", "\n", "if", "self", ".", "mode", "==", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "INFER", ":", "\n", "      ", "pred", "=", "logits", "*", "self", ".", "decoder_mask", "+", "(", "tf", ".", "reduce_min", "(", "logits", ")", "-", "1", ")", "*", "(", "1", "-", "self", ".", "decoder_mask", ")", "\n", "\n", "sample_ids", "=", "self", ".", "helper", ".", "sample", "(", "\n", "time", "=", "time_", ",", "outputs", "=", "pred", ",", "state", "=", "cell_state", ")", "\n", "", "else", ":", "\n", "      ", "sample_ids", "=", "self", ".", "helper", ".", "sample", "(", "\n", "time", "=", "time_", ",", "outputs", "=", "logits", ",", "state", "=", "cell_state", ")", "\n", "\n", "\n", "\n", "# sample_ids = self.helper.sample(", "\n", "#     time=time_, outputs=logits, state=cell_state)", "\n", "", "outputs", "=", "DecoderOutput", "(", "\n", "logits", "=", "logits", ",", "predicted_ids", "=", "sample_ids", ",", "cell_output", "=", "cell_output", ")", "\n", "finished", ",", "next_inputs", ",", "next_state", "=", "self", ".", "helper", ".", "next_inputs", "(", "\n", "time", "=", "time_", ",", "outputs", "=", "outputs", ",", "state", "=", "cell_state", ",", "sample_ids", "=", "sample_ids", ")", "\n", "return", "(", "outputs", ",", "next_state", ",", "next_inputs", ",", "finished", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.rnn_decoder.RNNDecoder.__init__": [[61, 69], ["seq2seq.graph_module.GraphModule.__init__", "seq2seq.configurable.Configurable.__init__", "seq2seq.encoders.rnn_encoder._toggle_dropout", "seq2seq.training.utils.get_rnn_cell"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.rnn_encoder._toggle_dropout", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.get_rnn_cell"], ["def", "__init__", "(", "self", ",", "params", ",", "mode", ",", "name", ")", ":", "\n", "    ", "GraphModule", ".", "__init__", "(", "self", ",", "name", ")", "\n", "Configurable", ".", "__init__", "(", "self", ",", "params", ",", "mode", ")", "\n", "self", ".", "params", "[", "\"rnn_cell\"", "]", "=", "_toggle_dropout", "(", "self", ".", "params", "[", "\"rnn_cell\"", "]", ",", "mode", ")", "\n", "self", ".", "cell", "=", "training_utils", ".", "get_rnn_cell", "(", "**", "self", ".", "params", "[", "\"rnn_cell\"", "]", ")", "\n", "# Not initialized yet", "\n", "self", ".", "initial_state", "=", "None", "\n", "self", ".", "helper", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.rnn_decoder.RNNDecoder.initialize": [[70, 73], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "initialize", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.rnn_decoder.RNNDecoder.step": [[74, 77], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "step", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.rnn_decoder.RNNDecoder.batch_size": [[78, 81], ["tensorflow.shape", "tensorflow.python.util.nest.flatten"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape"], ["", "@", "property", "\n", "def", "batch_size", "(", "self", ")", ":", "\n", "    ", "return", "tf", ".", "shape", "(", "nest", ".", "flatten", "(", "[", "self", ".", "initial_state", "]", ")", "[", "0", "]", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.rnn_decoder.RNNDecoder._setup": [[82, 87], ["None"], "methods", ["None"], ["", "def", "_setup", "(", "self", ",", "initial_state", ",", "helper", ")", ":", "\n", "    ", "\"\"\"Sets the initial state and helper for the decoder.\n    \"\"\"", "\n", "self", ".", "initial_state", "=", "initial_state", "\n", "self", ".", "helper", "=", "helper", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.rnn_decoder.RNNDecoder.finalize": [[88, 94], ["None"], "methods", ["None"], ["", "def", "finalize", "(", "self", ",", "outputs", ",", "final_state", ")", ":", "\n", "    ", "\"\"\"Applies final transformation to the decoder output once decoding is\n    finished.\n    \"\"\"", "\n", "#pylint: disable=R0201", "\n", "return", "(", "outputs", ",", "final_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.rnn_decoder.RNNDecoder.default_params": [[95, 101], ["seq2seq.encoders.rnn_encoder._default_rnn_cell_params"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.rnn_encoder._default_rnn_cell_params"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "return", "{", "\n", "\"max_decode_length\"", ":", "100", ",", "\n", "\"rnn_cell\"", ":", "_default_rnn_cell_params", "(", ")", ",", "\n", "\"init_scale\"", ":", "0.04", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.rnn_decoder.RNNDecoder._build": [[103, 122], ["tensorflow.get_variable_scope", "tensorflow.get_variable_scope.set_initializer", "seq2seq.contrib.seq2seq.decoder.dynamic_decode", "rnn_decoder.RNNDecoder.finalize", "rnn_decoder.RNNDecoder._setup", "tensorflow.random_uniform_initializer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.decoder.dynamic_decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.infer_tree_traversal.InferenceTreeTraversal.finalize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder._setup"], ["", "def", "_build", "(", "self", ",", "initial_state", ",", "helper", ")", ":", "\n", "    ", "if", "not", "self", ".", "initial_state", ":", "\n", "      ", "self", ".", "_setup", "(", "initial_state", ",", "helper", ")", "\n", "\n", "", "scope", "=", "tf", ".", "get_variable_scope", "(", ")", "\n", "scope", ".", "set_initializer", "(", "tf", ".", "random_uniform_initializer", "(", "\n", "-", "self", ".", "params", "[", "\"init_scale\"", "]", ",", "\n", "self", ".", "params", "[", "\"init_scale\"", "]", ")", ")", "\n", "\n", "maximum_iterations", "=", "None", "\n", "if", "self", ".", "mode", "==", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "INFER", ":", "\n", "      ", "maximum_iterations", "=", "self", ".", "params", "[", "\"max_decode_length\"", "]", "\n", "\n", "", "outputs", ",", "final_state", "=", "dynamic_decode", "(", "\n", "decoder", "=", "self", ",", "\n", "output_time_major", "=", "True", ",", "\n", "impute_finished", "=", "False", ",", "\n", "maximum_iterations", "=", "maximum_iterations", ")", "\n", "return", "self", ".", "finalize", "(", "outputs", ",", "final_state", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaAttentionDecoder.__init__": [[82, 111], ["seq2seq.decoders.rnn_decoder.RNNDecoder.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "\n", "params", ",", "\n", "mode", ",", "\n", "vocab_size", ",", "\n", "attention_keys", ",", "\n", "attention_values", ",", "\n", "attention_values_length", ",", "\n", "attention_fn", ",", "\n", "# 4 extra values", "\n", "reverse_scores_lengths", "=", "None", ",", "\n", "schema_attention_keys", "=", "None", ",", "\n", "schema_attention_values", "=", "None", ",", "\n", "schema_attention_values_length", "=", "None", ",", "\n", "schema_attention_fn", "=", "None", ",", "\n", "name", "=", "\"schema_attention_decoder\"", ")", ":", "\n", "    ", "super", "(", "SchemaAttentionDecoder", ",", "self", ")", ".", "__init__", "(", "params", ",", "mode", ",", "name", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "attention_keys", "=", "attention_keys", "\n", "self", ".", "attention_values", "=", "attention_values", "\n", "self", ".", "attention_values_length", "=", "attention_values_length", "\n", "self", ".", "attention_fn", "=", "attention_fn", "\n", "self", ".", "reverse_scores_lengths", "=", "reverse_scores_lengths", "\n", "self", ".", "schema_attention_keys", "=", "schema_attention_keys", "\n", "self", ".", "schema_attention_values", "=", "schema_attention_values", "\n", "self", ".", "schema_attention_values_length", "=", "schema_attention_values_length", "\n", "if", "schema_attention_fn", ":", "\n", "      ", "self", ".", "schema_attention_fn", "=", "schema_attention_fn", "\n", "", "else", ":", "\n", "      ", "self", ".", "schema_attention_fn", "=", "attention_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaAttentionDecoder.output_size": [[112, 122], ["schema_attention_decoder.SchemaAttentionDecoderOutput", "tensorflow.TensorShape", "tensorflow.shape", "schema_attention_decoder.SchemaAttentionDecoder.attention_values.get_shape", "tensorflow.shape", "schema_attention_decoder.SchemaAttentionDecoder.schema_attention_values.get_shape"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape"], ["", "", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "    ", "return", "SchemaAttentionDecoderOutput", "(", "\n", "logits", "=", "self", ".", "vocab_size", ",", "\n", "predicted_ids", "=", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "cell_output", "=", "self", ".", "cell", ".", "output_size", ",", "\n", "attention_scores", "=", "tf", ".", "shape", "(", "self", ".", "attention_values", ")", "[", "1", ":", "-", "1", "]", ",", "\n", "attention_context", "=", "self", ".", "attention_values", ".", "get_shape", "(", ")", "[", "-", "1", "]", ",", "\n", "schema_attention_scores", "=", "tf", ".", "shape", "(", "self", ".", "schema_attention_values", ")", "[", "1", ":", "-", "1", "]", ",", "\n", "schema_attention_context", "=", "self", ".", "schema_attention_values", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaAttentionDecoder.output_dtype": [[123, 133], ["schema_attention_decoder.SchemaAttentionDecoderOutput"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_dtype", "(", "self", ")", ":", "\n", "    ", "return", "SchemaAttentionDecoderOutput", "(", "\n", "logits", "=", "tf", ".", "float32", ",", "\n", "predicted_ids", "=", "tf", ".", "int32", ",", "\n", "cell_output", "=", "tf", ".", "float32", ",", "\n", "attention_scores", "=", "tf", ".", "float32", ",", "\n", "attention_context", "=", "tf", ".", "float32", ",", "\n", "schema_attention_scores", "=", "tf", ".", "float32", ",", "\n", "schema_attention_context", "=", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaAttentionDecoder.initialize": [[134, 149], ["schema_attention_decoder.SchemaAttentionDecoder.helper.initialize", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.concat", "tensorflow.shape", "schema_attention_decoder.SchemaAttentionDecoder.attention_values.get_shape().as_list", "tensorflow.shape", "schema_attention_decoder.SchemaAttentionDecoder.schema_attention_values.get_shape().as_list", "schema_attention_decoder.SchemaAttentionDecoder.attention_values.get_shape", "schema_attention_decoder.SchemaAttentionDecoder.schema_attention_values.get_shape"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder.initialize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.concat", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape"], ["", "def", "initialize", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "    ", "finished", ",", "first_inputs", "=", "self", ".", "helper", ".", "initialize", "(", ")", "\n", "\n", "# Concat empty attention context", "\n", "attention_context", "=", "tf", ".", "zeros", "(", "[", "\n", "tf", ".", "shape", "(", "first_inputs", ")", "[", "0", "]", ",", "\n", "self", ".", "attention_values", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "]", ")", "\n", "schema_attention_context", "=", "tf", ".", "zeros", "(", "[", "\n", "tf", ".", "shape", "(", "first_inputs", ")", "[", "0", "]", ",", "\n", "self", ".", "schema_attention_values", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "]", ")", "\n", "first_inputs", "=", "tf", ".", "concat", "(", "[", "first_inputs", ",", "attention_context", ",", "schema_attention_context", "]", ",", "1", ")", "\n", "\n", "return", "finished", ",", "first_inputs", ",", "self", ".", "initial_state", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaAttentionDecoder.compute_output": [[150, 174], ["schema_attention_decoder.SchemaAttentionDecoder.attention_fn", "schema_attention_decoder.SchemaAttentionDecoder.schema_attention_fn", "schema_attention_decoder.SchemaAttentionDecoder._calculate_softmax"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaAttentionDecoder._calculate_softmax"], ["", "def", "compute_output", "(", "self", ",", "cell_output", ",", "calculate_softmax", "=", "True", ")", ":", "\n", "    ", "\"\"\"Computes the decoder outputs.\"\"\"", "\n", "\n", "# Compute attention", "\n", "att_scores", ",", "attention_context", "=", "self", ".", "attention_fn", "(", "\n", "query", "=", "cell_output", ",", "\n", "keys", "=", "self", ".", "attention_keys", ",", "\n", "values", "=", "self", ".", "attention_values", ",", "\n", "values_length", "=", "self", ".", "attention_values_length", ")", "\n", "# there is a key and a schema attention value", "\n", "# which is key? where to find the schema attention function?", "\n", "schema_att_scores", ",", "schema_attention_context", "=", "self", ".", "schema_attention_fn", "(", "\n", "query", "=", "cell_output", ",", "\n", "keys", "=", "self", ".", "schema_attention_keys", ",", "\n", "values", "=", "self", ".", "schema_attention_values", ",", "\n", "values_length", "=", "self", ".", "schema_attention_values_length", ")", "\n", "\n", "softmax_input", "=", "None", "\n", "logits", "=", "None", "\n", "if", "calculate_softmax", ":", "\n", "      ", "softmax_input", ",", "logits", "=", "self", ".", "_calculate_softmax", "(", "\n", "[", "cell_output", ",", "attention_context", ",", "schema_attention_context", "]", ")", "\n", "\n", "", "return", "softmax_input", ",", "logits", ",", "att_scores", ",", "attention_context", ",", "schema_att_scores", ",", "schema_attention_context", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaAttentionDecoder._calculate_softmax": [[175, 189], ["tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.concat"], ["", "def", "_calculate_softmax", "(", "self", ",", "list_of_contexts", ")", ":", "\n", "    ", "softmax_input", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "\n", "inputs", "=", "tf", ".", "concat", "(", "list_of_contexts", ",", "1", ")", ",", "\n", "num_outputs", "=", "self", ".", "cell", ".", "output_size", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "tanh", ",", "\n", "scope", "=", "\"attention_mix\"", ")", "\n", "\n", "# Softmax computation", "\n", "logits", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "\n", "inputs", "=", "softmax_input", ",", "\n", "num_outputs", "=", "self", ".", "vocab_size", ",", "\n", "activation_fn", "=", "None", ",", "\n", "scope", "=", "\"logits\"", ")", "\n", "return", "softmax_input", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaAttentionDecoder._setup": [[190, 210], ["seq2seq.contrib.seq2seq.helper.CustomHelper", "helper.next_inputs", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.GreedyEmbeddingHelper.next_inputs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.concat"], ["", "def", "_setup", "(", "self", ",", "initial_state", ",", "helper", ")", ":", "\n", "    ", "self", ".", "initial_state", "=", "initial_state", "\n", "\n", "def", "att_next_inputs", "(", "time", ",", "outputs", ",", "state", ",", "sample_ids", ",", "name", "=", "None", ")", ":", "\n", "      ", "\"\"\"Wraps the original decoder helper function to append the attention\n      context.\n      \"\"\"", "\n", "finished", ",", "next_inputs", ",", "next_state", "=", "helper", ".", "next_inputs", "(", "\n", "time", "=", "time", ",", "\n", "outputs", "=", "outputs", ",", "\n", "state", "=", "state", ",", "\n", "sample_ids", "=", "sample_ids", ",", "\n", "name", "=", "name", ")", "\n", "next_inputs", "=", "tf", ".", "concat", "(", "[", "next_inputs", ",", "outputs", ".", "attention_context", ",", "outputs", ".", "schema_attention_context", "]", ",", "1", ")", "\n", "return", "(", "finished", ",", "next_inputs", ",", "next_state", ")", "\n", "\n", "", "self", ".", "helper", "=", "CustomHelper", "(", "\n", "initialize_fn", "=", "helper", ".", "initialize", ",", "\n", "sample_fn", "=", "helper", ".", "sample", ",", "\n", "next_inputs_fn", "=", "att_next_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaAttentionDecoder.step": [[211, 240], ["schema_attention_decoder.SchemaAttentionDecoder.cell", "schema_attention_decoder.SchemaAttentionDecoder.compute_output", "schema_attention_decoder.SchemaAttentionDecoder.helper.sample", "schema_attention_decoder.SchemaAttentionDecoderOutput", "schema_attention_decoder.SchemaAttentionDecoder.helper.next_inputs", "tensorflow.reverse_sequence"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder.compute_output", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.sample", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.GreedyEmbeddingHelper.next_inputs"], ["", "def", "step", "(", "self", ",", "time_", ",", "inputs", ",", "state", ",", "name", "=", "None", ")", ":", "\n", "    ", "cell_output", ",", "cell_state", "=", "self", ".", "cell", "(", "inputs", ",", "state", ")", "\n", "(", "cell_output_new", ",", "logits", ",", "attention_scores", ",", "attention_context", ",", "\n", "schema_attention_scores", ",", "schema_attention_context", ")", "=", "self", ".", "compute_output", "(", "cell_output", ")", "\n", "\n", "if", "self", ".", "reverse_scores_lengths", "is", "not", "None", ":", "\n", "      ", "attention_scores", "=", "tf", ".", "reverse_sequence", "(", "\n", "input", "=", "attention_scores", ",", "\n", "seq_lengths", "=", "self", ".", "reverse_scores_lengths", ",", "\n", "seq_dim", "=", "1", ",", "\n", "batch_dim", "=", "0", ")", "\n", "\n", "", "sample_ids", "=", "self", ".", "helper", ".", "sample", "(", "\n", "time", "=", "time_", ",", "outputs", "=", "logits", ",", "state", "=", "cell_state", ")", "\n", "\n", "outputs", "=", "SchemaAttentionDecoderOutput", "(", "\n", "logits", "=", "logits", ",", "\n", "predicted_ids", "=", "sample_ids", ",", "\n", "cell_output", "=", "cell_output_new", ",", "\n", "attention_scores", "=", "attention_scores", ",", "\n", "attention_context", "=", "attention_context", ",", "\n", "schema_attention_scores", "=", "schema_attention_scores", ",", "\n", "schema_attention_context", "=", "schema_attention_context", ")", "\n", "\n", "finished", ",", "next_inputs", ",", "next_state", "=", "self", ".", "helper", ".", "next_inputs", "(", "\n", "time", "=", "time_", ",", "outputs", "=", "outputs", ",", "state", "=", "cell_state", ",", "sample_ids", "=", "sample_ids", ")", "\n", "\n", "return", "(", "outputs", ",", "next_state", ",", "next_inputs", ",", "finished", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaAttentionCopyingDecoder.__init__": [[247, 267], ["schema_attention_decoder.SchemaAttentionDecoder.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "\n", "params", ",", "\n", "mode", ",", "\n", "vocab_size", ",", "\n", "attention_keys", ",", "\n", "attention_values", ",", "\n", "attention_values_length", ",", "\n", "attention_fn", ",", "\n", "reverse_scores_lengths", "=", "None", ",", "\n", "schema_attention_keys", "=", "None", ",", "\n", "schema_attention_values", "=", "None", ",", "\n", "schema_attention_values_length", "=", "None", ",", "\n", "schema_attention_fn", "=", "None", ",", "\n", "name", "=", "\"schema_attention_copying_decoder\"", ")", ":", "\n", "    ", "super", "(", "SchemaAttentionCopyingDecoder", ",", "self", ")", ".", "__init__", "(", "\n", "params", ",", "mode", ",", "vocab_size", ",", "attention_keys", ",", "attention_values", ",", "\n", "attention_values_length", ",", "attention_fn", ",", "reverse_scores_lengths", ",", "\n", "schema_attention_keys", ",", "schema_attention_values", ",", "\n", "schema_attention_values_length", ",", "schema_attention_fn", ",", "name", ")", "\n", "self", ".", "schema_embs", "=", "schema_attention_values", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaAttentionCopyingDecoder.output_size": [[268, 279], ["schema_attention_decoder.SchemaCopyingAttentionDecoderOutput", "tensorflow.TensorShape", "tensorflow.shape", "schema_attention_decoder.SchemaAttentionCopyingDecoder.attention_values.get_shape", "tensorflow.shape", "schema_attention_decoder.SchemaAttentionCopyingDecoder.schema_attention_values.get_shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "    ", "return", "SchemaCopyingAttentionDecoderOutput", "(", "\n", "logits", "=", "self", ".", "vocab_size", ",", "\n", "predicted_ids", "=", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "cell_output", "=", "self", ".", "cell", ".", "output_size", ",", "\n", "attention_scores", "=", "tf", ".", "shape", "(", "self", ".", "attention_values", ")", "[", "1", ":", "-", "1", "]", ",", "\n", "attention_context", "=", "self", ".", "attention_values", ".", "get_shape", "(", ")", "[", "-", "1", "]", ",", "\n", "schema_attention_scores", "=", "tf", ".", "shape", "(", "self", ".", "schema_attention_values", ")", "[", "1", ":", "-", "1", "]", ",", "\n", "schema_attention_context", "=", "self", ".", "schema_attention_values", ".", "get_shape", "(", ")", "[", "-", "1", "]", ",", "\n", "schema_attention_copy_vals", "=", "tf", ".", "shape", "(", "self", ".", "schema_attention_values", ")", "[", "1", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaAttentionCopyingDecoder.output_dtype": [[280, 291], ["schema_attention_decoder.SchemaCopyingAttentionDecoderOutput"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_dtype", "(", "self", ")", ":", "\n", "    ", "return", "SchemaCopyingAttentionDecoderOutput", "(", "\n", "logits", "=", "tf", ".", "float32", ",", "\n", "predicted_ids", "=", "tf", ".", "int32", ",", "\n", "cell_output", "=", "tf", ".", "float32", ",", "\n", "attention_scores", "=", "tf", ".", "float32", ",", "\n", "attention_context", "=", "tf", ".", "float32", ",", "\n", "schema_attention_scores", "=", "tf", ".", "float32", ",", "\n", "schema_attention_context", "=", "tf", ".", "float32", ",", "\n", "schema_attention_copy_vals", "=", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaAttentionCopyingDecoder.compute_output": [[292, 312], ["schema_attention_decoder.SchemaAttentionDecoder.compute_output", "tensorflow.contrib.layers.fully_connected", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.squeeze", "schema_attention_decoder.SchemaAttentionCopyingDecoder.attention_values.get_shape().as_list", "tensorflow.matmul", "schema_attention_decoder.SchemaAttentionCopyingDecoder.attention_values.get_shape"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder.compute_output", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.concat"], ["", "def", "compute_output", "(", "self", ",", "cell_output", ")", ":", "\n", "    ", "(", "softmax_input", ",", "logits", ",", "att_scores", ",", "\n", "attention_context", ",", "schema_att_scores", ",", "\n", "schema_attention_context", ")", "=", "super", "(", "\n", "SchemaAttentionCopyingDecoder", ",", "self", ")", ".", "compute_output", "(", "cell_output", ")", "\n", "schema_attention_copy_vals", "=", "schema_att_scores", "\n", "weighted_schema_embs_size", "=", "self", ".", "cell", ".", "output_size", "+", "self", ".", "attention_values", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "weighted_schema_embs", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "\n", "inputs", "=", "self", ".", "schema_embs", ",", "\n", "num_outputs", "=", "weighted_schema_embs_size", ",", "\n", "activation_fn", "=", "None", ",", "\n", "scope", "=", "\"weighted_schema_embs\"", ")", "\n", "\n", "concatenated", "=", "tf", ".", "expand_dims", "(", "\n", "tf", ".", "concat", "(", "[", "cell_output", ",", "attention_context", "]", ",", "1", ")", ",", "axis", "=", "2", ")", "\n", "schema_attention_copy_vals", "=", "schema_att_scores", "*", "tf", ".", "squeeze", "(", "tf", ".", "matmul", "(", "\n", "weighted_schema_embs", ",", "concatenated", ")", ",", "axis", "=", "2", ")", "\n", "\n", "return", "softmax_input", ",", "logits", ",", "att_scores", ",", "attention_context", ",", "schema_att_scores", ",", "schema_attention_context", ",", "schema_attention_copy_vals", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaAttentionCopyingDecoder._setup": [[313, 334], ["seq2seq.contrib.seq2seq.helper.CustomHelper", "helper.next_inputs", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.GreedyEmbeddingHelper.next_inputs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.concat"], ["", "def", "_setup", "(", "self", ",", "initial_state", ",", "helper", ")", ":", "\n", "#TODO: Take advantage of inheritance rather than copy-paste", "\n", "    ", "self", ".", "initial_state", "=", "initial_state", "\n", "\n", "def", "att_next_inputs", "(", "time", ",", "outputs", ",", "state", ",", "sample_ids", ",", "name", "=", "None", ")", ":", "\n", "      ", "\"\"\"Wraps the original decoder helper function to append the attention\n      context.\n      \"\"\"", "\n", "finished", ",", "next_inputs", ",", "next_state", "=", "helper", ".", "next_inputs", "(", "\n", "time", "=", "time", ",", "\n", "outputs", "=", "outputs", ",", "\n", "state", "=", "state", ",", "\n", "sample_ids", "=", "sample_ids", ",", "\n", "name", "=", "name", ")", "\n", "next_inputs", "=", "tf", ".", "concat", "(", "[", "next_inputs", ",", "outputs", ".", "attention_context", ",", "outputs", ".", "schema_attention_context", "]", ",", "1", ")", "\n", "return", "(", "finished", ",", "next_inputs", ",", "next_state", ")", "\n", "\n", "", "self", ".", "helper", "=", "CustomHelper", "(", "\n", "initialize_fn", "=", "helper", ".", "initialize", ",", "\n", "sample_fn", "=", "helper", ".", "sample", ",", "\n", "next_inputs_fn", "=", "att_next_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaAttentionCopyingDecoder.step": [[335, 364], ["schema_attention_decoder.SchemaAttentionCopyingDecoder.cell", "schema_attention_decoder.SchemaAttentionCopyingDecoder.compute_output", "schema_attention_decoder.SchemaAttentionCopyingDecoder.helper.sample", "schema_attention_decoder.SchemaCopyingAttentionDecoderOutput", "schema_attention_decoder.SchemaAttentionCopyingDecoder.helper.next_inputs", "tensorflow.reverse_sequence"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder.compute_output", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.sample", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.GreedyEmbeddingHelper.next_inputs"], ["", "def", "step", "(", "self", ",", "time_", ",", "inputs", ",", "state", ",", "name", "=", "None", ")", ":", "\n", "    ", "cell_output", ",", "cell_state", "=", "self", ".", "cell", "(", "inputs", ",", "state", ")", "\n", "(", "cell_output_new", ",", "logits", ",", "attention_scores", ",", "attention_context", ",", "\n", "schema_attention_scores", ",", "schema_attention_context", ",", "\n", "schema_attention_copy_vals", ")", "=", "self", ".", "compute_output", "(", "cell_output", ")", "\n", "\n", "if", "self", ".", "reverse_scores_lengths", "is", "not", "None", ":", "\n", "      ", "attention_scores", "=", "tf", ".", "reverse_sequence", "(", "\n", "input", "=", "attention_scores", ",", "\n", "seq_lengths", "=", "self", ".", "reverse_scores_lengths", ",", "\n", "seq_dim", "=", "1", ",", "\n", "batch_dim", "=", "0", ")", "\n", "\n", "", "sample_ids", "=", "self", ".", "helper", ".", "sample", "(", "\n", "time", "=", "time_", ",", "outputs", "=", "logits", ",", "state", "=", "cell_state", ")", "\n", "outputs", "=", "SchemaCopyingAttentionDecoderOutput", "(", "\n", "logits", "=", "logits", ",", "\n", "predicted_ids", "=", "sample_ids", ",", "\n", "cell_output", "=", "cell_output_new", ",", "\n", "attention_scores", "=", "attention_scores", ",", "\n", "attention_context", "=", "attention_context", ",", "\n", "schema_attention_scores", "=", "schema_attention_scores", ",", "\n", "schema_attention_context", "=", "schema_attention_context", ",", "\n", "schema_attention_copy_vals", "=", "schema_attention_copy_vals", ")", "\n", "\n", "finished", ",", "next_inputs", ",", "next_state", "=", "self", ".", "helper", ".", "next_inputs", "(", "\n", "time", "=", "time_", ",", "outputs", "=", "outputs", ",", "state", "=", "cell_state", ",", "sample_ids", "=", "sample_ids", ")", "\n", "return", "(", "outputs", ",", "next_state", ",", "next_inputs", ",", "finished", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder.__init__": [[391, 421], ["schema_attention_decoder.SchemaAttentionDecoder.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "\n", "params", ",", "\n", "mode", ",", "\n", "vocab_size", ",", "\n", "attention_keys", ",", "\n", "attention_values", ",", "\n", "attention_values_length", ",", "\n", "attention_fn", ",", "\n", "reverse_scores_lengths", "=", "None", ",", "\n", "schema_attention_keys", "=", "None", ",", "\n", "schema_attention_values", "=", "None", ",", "\n", "schema_attention_values_length", "=", "None", ",", "\n", "schema_attention_fn", "=", "None", ",", "\n", "schema_map_attention_keys", "=", "None", ",", "\n", "schema_map_attention_values", "=", "None", ",", "\n", "schema_map_attention_values_length", "=", "None", ",", "\n", "schema_map_attention_fn", "=", "None", ",", "\n", "name", "=", "\"schema_map_attention_decoder\"", ")", ":", "\n", "    ", "super", "(", "SchemaMapAttentionDecoder", ",", "self", ")", ".", "__init__", "(", "\n", "params", ",", "mode", ",", "vocab_size", ",", "attention_keys", ",", "attention_values", ",", "\n", "attention_values_length", ",", "attention_fn", ",", "reverse_scores_lengths", ",", "\n", "schema_attention_keys", ",", "schema_attention_values", ",", "\n", "schema_attention_values_length", ",", "schema_attention_fn", ",", "name", ")", "\n", "self", ".", "schema_map_attention_keys", "=", "schema_attention_keys", "\n", "self", ".", "schema_map_attention_values", "=", "schema_attention_values", "\n", "self", ".", "schema_map_attention_values_length", "=", "schema_attention_values_length", "\n", "if", "schema_map_attention_fn", ":", "\n", "      ", "self", ".", "schema_map_attention_fn", "=", "schema_map_attention_fn", "\n", "", "else", ":", "\n", "      ", "self", ".", "schema_map_attention_fn", "=", "attention_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder.output_size": [[422, 434], ["schema_attention_decoder.SchemaMapAttentionDecoderOutput", "tensorflow.TensorShape", "tensorflow.shape", "schema_attention_decoder.SchemaMapAttentionDecoder.attention_values.get_shape", "tensorflow.shape", "schema_attention_decoder.SchemaMapAttentionDecoder.schema_attention_values.get_shape", "tensorflow.shape", "schema_attention_decoder.SchemaMapAttentionDecoder.schema_map_attention_values.get_shape"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape"], ["", "", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "    ", "return", "SchemaMapAttentionDecoderOutput", "(", "\n", "logits", "=", "self", ".", "vocab_size", ",", "\n", "predicted_ids", "=", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "cell_output", "=", "self", ".", "cell", ".", "output_size", ",", "\n", "attention_scores", "=", "tf", ".", "shape", "(", "self", ".", "attention_values", ")", "[", "1", ":", "-", "1", "]", ",", "\n", "attention_context", "=", "self", ".", "attention_values", ".", "get_shape", "(", ")", "[", "-", "1", "]", ",", "\n", "schema_attention_scores", "=", "tf", ".", "shape", "(", "self", ".", "schema_attention_values", ")", "[", "1", ":", "-", "1", "]", ",", "\n", "schema_attention_context", "=", "self", ".", "schema_attention_values", ".", "get_shape", "(", ")", "[", "-", "1", "]", ",", "\n", "schema_map_attention_scores", "=", "tf", ".", "shape", "(", "self", ".", "schema_map_attention_values", ")", "[", "1", ":", "-", "1", "]", ",", "\n", "schema_map_attention_context", "=", "self", ".", "schema_map_attention_values", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder.output_dtype": [[435, 447], ["schema_attention_decoder.SchemaMapAttentionDecoderOutput"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_dtype", "(", "self", ")", ":", "\n", "    ", "return", "SchemaMapAttentionDecoderOutput", "(", "\n", "logits", "=", "tf", ".", "float32", ",", "\n", "predicted_ids", "=", "tf", ".", "int32", ",", "\n", "cell_output", "=", "tf", ".", "float32", ",", "\n", "attention_scores", "=", "tf", ".", "float32", ",", "\n", "attention_context", "=", "tf", ".", "float32", ",", "\n", "schema_attention_scores", "=", "tf", ".", "float32", ",", "\n", "schema_attention_context", "=", "tf", ".", "float32", ",", "\n", "schema_map_attention_scores", "=", "tf", ".", "float32", ",", "\n", "schema_map_attention_context", "=", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder.initialize": [[448, 461], ["schema_attention_decoder.SchemaAttentionDecoder.initialize", "tensorflow.zeros", "tensorflow.concat", "tensorflow.shape", "schema_attention_decoder.SchemaMapAttentionDecoder.schema_attention_values.get_shape().as_list", "schema_attention_decoder.SchemaMapAttentionDecoder.schema_attention_values.get_shape"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder.initialize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.concat", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape"], ["", "def", "initialize", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "    ", "(", "finished", ",", "first_inputs", ",", "\n", "initial_state", ")", "=", "super", "(", "\n", "SchemaMapAttentionDecoder", ",", "self", ")", ".", "initialize", "(", "name", "=", "name", ")", "\n", "\n", "# Concat empty schema map attention context", "\n", "schema_map_attention_context", "=", "tf", ".", "zeros", "(", "[", "\n", "tf", ".", "shape", "(", "first_inputs", ")", "[", "0", "]", ",", "\n", "self", ".", "schema_attention_values", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "]", ")", "\n", "first_inputs", "=", "tf", ".", "concat", "(", "[", "first_inputs", ",", "schema_map_attention_context", "]", ",", "1", ")", "\n", "\n", "return", "finished", ",", "first_inputs", ",", "initial_state", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder.compute_output": [[462, 483], ["schema_attention_decoder.SchemaAttentionDecoder.compute_output", "tensorflow.variable_scope", "schema_attention_decoder.SchemaMapAttentionDecoder.schema_map_attention_fn", "schema_attention_decoder.SchemaMapAttentionDecoder._calculate_softmax"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder.compute_output", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaAttentionDecoder._calculate_softmax"], ["", "def", "compute_output", "(", "self", ",", "cell_output", ",", "calculate_softmax", "=", "True", ")", ":", "\n", "    ", "(", "softmax_input", ",", "logits", ",", "att_scores", ",", "attention_context", ",", "\n", "schema_att_scores", ",", "schema_attention_context", ")", "=", "super", "(", "\n", "SchemaMapAttentionDecoder", ",", "self", ")", ".", "compute_output", "(", "cell_output", ",", "\n", "calculate_softmax", "=", "False", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"schema_map_att\"", ")", ":", "\n", "      ", "(", "schema_map_att_scores", ",", "\n", "schema_map_attention_context", ")", "=", "self", ".", "schema_map_attention_fn", "(", "\n", "query", "=", "cell_output", ",", "\n", "keys", "=", "self", ".", "schema_map_attention_keys", ",", "\n", "values", "=", "self", ".", "schema_map_attention_values", ",", "\n", "values_length", "=", "self", ".", "schema_map_attention_values_length", ")", "\n", "\n", "", "if", "calculate_softmax", ":", "\n", "      ", "softmax_input", ",", "logits", "=", "self", ".", "_calculate_softmax", "(", "\n", "[", "cell_output", ",", "attention_context", ",", "schema_attention_context", ",", "\n", "schema_map_attention_context", "]", ")", "\n", "\n", "", "return", "(", "softmax_input", ",", "logits", ",", "att_scores", ",", "attention_context", ",", "\n", "schema_att_scores", ",", "schema_attention_context", ",", "\n", "schema_map_att_scores", ",", "schema_map_attention_context", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder._setup": [[485, 505], ["seq2seq.contrib.seq2seq.helper.CustomHelper", "helper.next_inputs", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.GreedyEmbeddingHelper.next_inputs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.concat"], ["", "def", "_setup", "(", "self", ",", "initial_state", ",", "helper", ")", ":", "\n", "    ", "self", ".", "initial_state", "=", "initial_state", "\n", "\n", "def", "att_next_inputs", "(", "time", ",", "outputs", ",", "state", ",", "sample_ids", ",", "name", "=", "None", ")", ":", "\n", "      ", "\"\"\"Wraps the original decoder helper function to append the attention\n      context.\n      \"\"\"", "\n", "finished", ",", "next_inputs", ",", "next_state", "=", "helper", ".", "next_inputs", "(", "\n", "time", "=", "time", ",", "\n", "outputs", "=", "outputs", ",", "\n", "state", "=", "state", ",", "\n", "sample_ids", "=", "sample_ids", ",", "\n", "name", "=", "name", ")", "\n", "next_inputs", "=", "tf", ".", "concat", "(", "[", "next_inputs", ",", "outputs", ".", "attention_context", ",", "outputs", ".", "schema_attention_context", ",", "outputs", ".", "schema_map_attention_context", "]", ",", "1", ")", "\n", "return", "(", "finished", ",", "next_inputs", ",", "next_state", ")", "\n", "\n", "", "self", ".", "helper", "=", "CustomHelper", "(", "\n", "initialize_fn", "=", "helper", ".", "initialize", ",", "\n", "sample_fn", "=", "helper", ".", "sample", ",", "\n", "next_inputs_fn", "=", "att_next_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder.step": [[506, 538], ["schema_attention_decoder.SchemaMapAttentionDecoder.cell", "schema_attention_decoder.SchemaMapAttentionDecoder.compute_output", "schema_attention_decoder.SchemaMapAttentionDecoder.helper.sample", "schema_attention_decoder.SchemaMapAttentionDecoderOutput", "schema_attention_decoder.SchemaMapAttentionDecoder.helper.next_inputs", "tensorflow.reverse_sequence"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.schema_attention_decoder.SchemaMapAttentionDecoder.compute_output", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.sample", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.helper.GreedyEmbeddingHelper.next_inputs"], ["", "def", "step", "(", "self", ",", "time_", ",", "inputs", ",", "state", ",", "name", "=", "None", ")", ":", "\n", "    ", "cell_output", ",", "cell_state", "=", "self", ".", "cell", "(", "inputs", ",", "state", ")", "\n", "(", "cell_output_new", ",", "logits", ",", "attention_scores", ",", "attention_context", ",", "\n", "schema_attention_scores", ",", "schema_attention_context", ",", "\n", "schema_map_attention_scores", ",", "schema_map_attention_context", ")", "=", "self", ".", "compute_output", "(", "cell_output", ")", "\n", "\n", "if", "self", ".", "reverse_scores_lengths", "is", "not", "None", ":", "\n", "      ", "attention_scores", "=", "tf", ".", "reverse_sequence", "(", "\n", "input", "=", "attention_scores", ",", "\n", "seq_lengths", "=", "self", ".", "reverse_scores_lengths", ",", "\n", "seq_dim", "=", "1", ",", "\n", "batch_dim", "=", "0", ")", "\n", "\n", "", "sample_ids", "=", "self", ".", "helper", ".", "sample", "(", "\n", "time", "=", "time_", ",", "outputs", "=", "logits", ",", "state", "=", "cell_state", ")", "\n", "\n", "outputs", "=", "SchemaMapAttentionDecoderOutput", "(", "\n", "logits", "=", "logits", ",", "\n", "predicted_ids", "=", "sample_ids", ",", "\n", "cell_output", "=", "cell_output_new", ",", "\n", "attention_scores", "=", "attention_scores", ",", "\n", "attention_context", "=", "attention_context", ",", "\n", "schema_attention_scores", "=", "schema_attention_scores", ",", "\n", "schema_attention_context", "=", "schema_attention_context", ",", "\n", "schema_map_attention_scores", "=", "schema_map_attention_scores", ",", "\n", "schema_map_attention_context", "=", "schema_map_attention_context", ")", "\n", "\n", "finished", ",", "next_inputs", ",", "next_state", "=", "self", ".", "helper", ".", "next_inputs", "(", "\n", "time", "=", "time_", ",", "outputs", "=", "outputs", ",", "state", "=", "cell_state", ",", "sample_ids", "=", "sample_ids", ")", "\n", "\n", "return", "(", "outputs", ",", "next_state", ",", "next_inputs", ",", "finished", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.attention.AttentionLayer.__init__": [[58, 61], ["seq2seq.graph_module.GraphModule.__init__", "seq2seq.configurable.Configurable.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "mode", ",", "name", "=", "\"attention\"", ")", ":", "\n", "    ", "GraphModule", ".", "__init__", "(", "self", ",", "name", ")", "\n", "Configurable", ".", "__init__", "(", "self", ",", "params", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.attention.AttentionLayer.default_params": [[62, 65], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "return", "{", "\"num_units\"", ":", "128", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.attention.AttentionLayer.score_fn": [[66, 70], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "score_fn", "(", "self", ",", "keys", ",", "query", ")", ":", "\n", "    ", "\"\"\"Computes the attention score\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.attention.AttentionLayer._build": [[71, 131], ["tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "attention.AttentionLayer.score_fn", "tensorflow.sequence_mask", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "tensorflow.reduce_sum.set_shape", "values.get_shape().as_list", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.to_int32", "tensorflow.to_int32", "values.get_shape"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.attention.AttentionLayerBahdanau.score_fn", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape"], ["", "def", "_build", "(", "self", ",", "query", ",", "keys", ",", "values", ",", "values_length", ")", ":", "\n", "    ", "\"\"\"Computes attention scores and outputs.\n\n    Args:\n      query: The query used to calculate attention scores.\n        In seq2seq this is typically the current state of the decoder.\n        A tensor of shape `[B, ...]`\n      keys: The keys used to calculate attention scores. In seq2seq, these\n        are typically the outputs of the encoder and equivalent to `values`.\n        A tensor of shape `[B, T, ...]` where each element in the `T`\n        dimension corresponds to the key for that value.\n      values: The elements to compute attention over. In seq2seq, this is\n        typically the sequence of encoder outputs.\n        A tensor of shape `[B, T, input_dim]`.\n      values_length: An int32 tensor of shape `[B]` defining the sequence\n        length of the attention values.\n\n    Returns:\n      A tuple `(scores, context)`.\n      `scores` is vector of length `T` where each element is the\n      normalized \"score\" of the corresponding `inputs` element.\n      `context` is the final attention layer output corresponding to\n      the weighted inputs.\n      A tensor fo shape `[B, input_dim]`.\n    \"\"\"", "\n", "values_depth", "=", "values", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "\n", "# Fully connected layers to transform both keys and query", "\n", "# into a tensor with `num_units` units", "\n", "att_keys", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "\n", "inputs", "=", "keys", ",", "\n", "num_outputs", "=", "self", ".", "params", "[", "\"num_units\"", "]", ",", "\n", "activation_fn", "=", "None", ",", "\n", "scope", "=", "\"att_keys\"", ")", "\n", "att_query", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "\n", "inputs", "=", "query", ",", "\n", "num_outputs", "=", "self", ".", "params", "[", "\"num_units\"", "]", ",", "\n", "activation_fn", "=", "None", ",", "\n", "scope", "=", "\"att_query\"", ")", "\n", "\n", "scores", "=", "self", ".", "score_fn", "(", "att_keys", ",", "att_query", ")", "\n", "\n", "# Replace all scores for padded inputs with tf.float32.min", "\n", "num_scores", "=", "tf", ".", "shape", "(", "scores", ")", "[", "1", "]", "\n", "scores_mask", "=", "tf", ".", "sequence_mask", "(", "\n", "lengths", "=", "tf", ".", "to_int32", "(", "values_length", ")", ",", "\n", "maxlen", "=", "tf", ".", "to_int32", "(", "num_scores", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "scores", "=", "scores", "*", "scores_mask", "+", "(", "(", "1.0", "-", "scores_mask", ")", "*", "tf", ".", "float32", ".", "min", ")", "\n", "\n", "# Normalize the scores", "\n", "scores_normalized", "=", "tf", ".", "nn", ".", "softmax", "(", "scores", ",", "name", "=", "\"scores_normalized\"", ")", "\n", "\n", "# Calculate the weighted average of the attention inputs", "\n", "# according to the scores", "\n", "context", "=", "tf", ".", "expand_dims", "(", "scores_normalized", ",", "2", ")", "*", "values", "\n", "context", "=", "tf", ".", "reduce_sum", "(", "context", ",", "1", ",", "name", "=", "\"context\"", ")", "\n", "context", ".", "set_shape", "(", "[", "None", ",", "values_depth", "]", ")", "\n", "\n", "return", "(", "scores_normalized", ",", "context", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.attention.AttentionLayerDot.score_fn": [[138, 140], ["attention.att_sum_dot"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.attention.att_sum_dot"], ["def", "score_fn", "(", "self", ",", "keys", ",", "query", ")", ":", "\n", "    ", "return", "att_sum_dot", "(", "keys", ",", "query", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.attention.AttentionLayerBahdanau.score_fn": [[146, 150], ["tensorflow.get_variable", "attention.att_sum_bahdanau"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.attention.att_sum_bahdanau"], ["def", "score_fn", "(", "self", ",", "keys", ",", "query", ")", ":", "\n", "    ", "v_att", "=", "tf", ".", "get_variable", "(", "\n", "\"v_att\"", ",", "shape", "=", "[", "self", ".", "params", "[", "\"num_units\"", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "att_sum_bahdanau", "(", "v_att", ",", "keys", ",", "query", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.attention.att_sum_bahdanau": [[32, 41], ["tensorflow.python.framework.function.Defun", "tensorflow.reduce_sum", "tensorflow.tanh", "tensorflow.expand_dims"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh"], ["@", "function", ".", "Defun", "(", "\n", "tf", ".", "float32", ",", "\n", "tf", ".", "float32", ",", "\n", "tf", ".", "float32", ",", "\n", "func_name", "=", "\"att_sum_bahdanau\"", ",", "\n", "noinline", "=", "True", ")", "\n", "def", "att_sum_bahdanau", "(", "v_att", ",", "keys", ",", "query", ")", ":", "\n", "  ", "\"\"\"Calculates a batch- and timweise dot product with a variable\"\"\"", "\n", "return", "tf", ".", "reduce_sum", "(", "v_att", "*", "tf", ".", "tanh", "(", "keys", "+", "tf", ".", "expand_dims", "(", "query", ",", "1", ")", ")", ",", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.attention.att_sum_dot": [[43, 47], ["tensorflow.python.framework.function.Defun", "tensorflow.reduce_sum", "tensorflow.expand_dims"], "function", ["None"], ["", "@", "function", ".", "Defun", "(", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "func_name", "=", "\"att_sum_dot\"", ",", "noinline", "=", "True", ")", "\n", "def", "att_sum_dot", "(", "keys", ",", "query", ")", ":", "\n", "  ", "\"\"\"Calculates a batch- and timweise dot product\"\"\"", "\n", "return", "tf", ".", "reduce_sum", "(", "keys", "*", "tf", ".", "expand_dims", "(", "query", ",", "1", ")", ",", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.schema_attention_seq2seq.SchemaAttentionSeq2Seq.__init__": [[47, 49], ["seq2seq.models.basic_seq2seq.BasicSeq2Seq.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "mode", ",", "name", "=", "\"schema_att_seq2seq\"", ")", ":", "\n", "    ", "super", "(", "SchemaAttentionSeq2Seq", ",", "self", ")", ".", "__init__", "(", "params", ",", "mode", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.schema_attention_seq2seq.SchemaAttentionSeq2Seq.default_params": [[50, 82], ["seq2seq.models.basic_seq2seq.BasicSeq2Seq.default_params().copy", "seq2seq.models.basic_seq2seq.BasicSeq2Seq.default_params().copy.update", "seq2seq.models.basic_seq2seq.BasicSeq2Seq.default_params"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.LogPerplexityMetricSpec.default_params"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "params", "=", "BasicSeq2Seq", ".", "default_params", "(", ")", ".", "copy", "(", ")", "\n", "params", ".", "update", "(", "{", "\n", "\"attention.class\"", ":", "\"AttentionLayerBahdanau\"", ",", "\n", "\"attention.params\"", ":", "{", "\"num_units\"", ":", "150", "}", ",", "\n", "\"bridge.class\"", ":", "\"seq2seq.models.bridges.ZeroBridge\"", ",", "\n", "\"encoder.class\"", ":", "\"seq2seq.encoders.BidirectionalRNNEncoder\"", ",", "\n", "\"encoder.params\"", ":", "{", "\"rnn_cell\"", ":", "{", "\"cell_class\"", ":", "\"LSTMCell\"", ",", "\n", "\"cell_params\"", ":", "\n", "{", "\"num_units\"", ":", "150", "}", ",", "\n", "\"dropout_input_keep_prob\"", ":", "0.5", ",", "\n", "\"dropout_output_keep_prob\"", ":", "0.5", ",", "\n", "\"num_layers\"", ":", "1", "}", "}", ",", "\n", "\"decoder.class\"", ":", "\"seq2seq.decoders.SchemaAttentionDecoder\"", ",", "\n", "\"decoder.params\"", ":", "{", "\"max_decode_length\"", ":", "250", ",", "\n", "\"rnn_cell\"", ":", "{", "\"cell_class\"", ":", "\"LSTMCell\"", ",", "\n", "\"cell_params\"", ":", "\n", "{", "\"num_units\"", ":", "150", "}", ",", "\n", "\"dropout_input_keep_prob\"", ":", "0.5", ",", "\n", "\"dropout_output_keep_prob\"", ":", "0.5", ",", "\n", "\"num_layers\"", ":", "1", "}", "}", ",", "\n", "\"optimizer.name\"", ":", "\"Adam\"", ",", "\n", "\"optimizer.params\"", ":", "{", "\"epsilon\"", ":", "0.0000008", "}", ",", "\n", "\"optimizer.learning_rate\"", ":", "0.0005", ",", "\n", "\"schema.attention.class\"", ":", "\"AttentionLayerBahdanau\"", ",", "\n", "\"schema.attention.params\"", ":", "{", "\"num_units\"", ":", "150", "}", ",", "\n", "\"source.max_seq_len\"", ":", "50", ",", "\n", "\"source.reverse\"", ":", "False", ",", "\n", "\"target.max_seq_len\"", ":", "250", ",", "\n", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.schema_attention_seq2seq.SchemaAttentionSeq2Seq._get_tables_and_ids": [[83, 89], ["seq2seq.graph_utils.get_dict_from_collection", "table.lookup"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.get_dict_from_collection", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup"], ["", "def", "_get_tables_and_ids", "(", "self", ",", "features", ")", ":", "\n", "    ", "schema_tables", "=", "graph_utils", ".", "get_dict_from_collection", "(", "\"schema_tables\"", ")", "\n", "schema_locs", "=", "features", "[", "'schema_loc'", "]", "\n", "table", "=", "schema_tables", "[", "\"schema_file_lookup_table\"", "]", "\n", "ids", "=", "table", ".", "lookup", "(", "schema_locs", ")", "\n", "return", "(", "schema_tables", ",", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.schema_attention_seq2seq.SchemaAttentionSeq2Seq._schema_lookups": [[90, 98], ["schema_attention_seq2seq.SchemaAttentionSeq2Seq._get_tables_and_ids", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.gather", "tensorflow.gather"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.schema_attention_seq2seq.SchemaAttentionSeq2Seq._get_tables_and_ids"], ["", "def", "_schema_lookups", "(", "self", ",", "features", ")", ":", "\n", "    ", "schema_tables", ",", "ids", "=", "self", ".", "_get_tables_and_ids", "(", "features", ")", "\n", "all_schema_embeddings", "=", "schema_tables", "[", "\"all_schema_embeddings\"", "]", "\n", "schema_embeddings_3d", "=", "tf", ".", "squeeze", "(", "tf", ".", "gather", "(", "all_schema_embeddings", ",", "ids", ")", ",", "[", "1", "]", ")", "\n", "schema_lengths", "=", "schema_tables", "[", "\"schema_lengths\"", "]", "\n", "schema_attn_values_length", "=", "tf", ".", "squeeze", "(", "tf", ".", "gather", "(", "schema_lengths", ",", "ids", ")", ",", "[", "1", "]", ")", "\n", "return", "(", "schema_embeddings_3d", ",", "\n", "schema_embeddings_3d", ",", "schema_attn_values_length", ")", "\n", "# provides the decode attention function", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.schema_attention_seq2seq.SchemaAttentionSeq2Seq._get_decoder_args": [[99, 126], ["attention_class", "schema_attention_class", "pydoc.locate", "getattr", "pydoc.locate", "getattr", "tensorflow.tile"], "methods", ["None"], ["", "def", "_get_decoder_args", "(", "self", ",", "encoder_output", ",", "features", ",", "_labels", ")", ":", "\n", "    ", "attention_class", "=", "locate", "(", "self", ".", "params", "[", "\"attention.class\"", "]", ")", "or", "getattr", "(", "decoders", ".", "attention", ",", "self", ".", "params", "[", "\"attention.class\"", "]", ")", "\n", "attention_layer", "=", "attention_class", "(", "\n", "params", "=", "self", ".", "params", "[", "\"attention.params\"", "]", ",", "mode", "=", "self", ".", "mode", ")", "\n", "# dynamicly load a class!!!", "\n", "schema_attention_class", "=", "locate", "(", "self", ".", "params", "[", "\"schema.attention.class\"", "]", ")", "or", "getattr", "(", "decoders", ".", "attention", ",", "self", ".", "params", "[", "\"schema.attention.class\"", "]", ")", "\n", "schema_attention_layer", "=", "schema_attention_class", "(", "\n", "params", "=", "self", ".", "params", "[", "\"schema.attention.params\"", "]", ",", "mode", "=", "self", ".", "mode", ")", "\n", "\n", "# If the input sequence is reversed we also need to reverse", "\n", "# the attention scores.", "\n", "reverse_scores_lengths", "=", "None", "\n", "if", "self", ".", "params", "[", "\"source.reverse\"", "]", ":", "\n", "      ", "reverse_scores_lengths", "=", "features", "[", "\"source_len\"", "]", "\n", "if", "self", ".", "use_beam_search", ":", "\n", "        ", "reverse_scores_lengths", "=", "tf", ".", "tile", "(", "\n", "input", "=", "reverse_scores_lengths", ",", "\n", "multiples", "=", "[", "self", ".", "params", "[", "\"inference.beam_search.beam_width\"", "]", "]", ")", "\n", "\n", "", "", "mode", "=", "self", ".", "mode", "\n", "params", "=", "self", ".", "params", "[", "\"decoder.params\"", "]", "\n", "vocab_size", "=", "self", ".", "target_vocab_info", ".", "total_size", "\n", "return", "(", "params", ",", "mode", ",", "vocab_size", ",", "encoder_output", ".", "attention_values", ",", "\n", "encoder_output", ".", "attention_values_length", ",", "encoder_output", ".", "outputs", ",", "\n", "attention_layer", ",", "reverse_scores_lengths", ",", "schema_attention_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.schema_attention_seq2seq.SchemaAttentionSeq2Seq._create_decoder": [[127, 148], ["schema_attention_seq2seq.SchemaAttentionSeq2Seq._get_decoder_args", "schema_attention_seq2seq.SchemaAttentionSeq2Seq._schema_lookups", "schema_attention_seq2seq.SchemaAttentionSeq2Seq.decoder_class"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.schema_attention_seq2seq.SchemaAttentionSeq2Seq._get_decoder_args", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.schema_attention_seq2seq.SchemaMapAttentionSeq2Seq._schema_lookups"], ["", "def", "_create_decoder", "(", "self", ",", "encoder_output", ",", "features", ",", "_labels", ")", ":", "\n", "    ", "(", "params", ",", "mode", ",", "vocab_size", ",", "attention_values", ",", "attention_values_length", ",", "\n", "attention_keys", ",", "attention_fn", ",", "reverse_scores_lengths", ",", "\n", "schema_attention_fn", ")", "=", "self", ".", "_get_decoder_args", "(", "encoder_output", ",", "\n", "features", ",", "_labels", ")", "\n", "(", "schema_attention_keys", ",", "schema_attention_values", ",", "\n", "schema_attention_values_length", ")", "=", "self", ".", "_schema_lookups", "(", "features", ")", "\n", "\n", "return", "self", ".", "decoder_class", "(", "\n", "params", "=", "params", ",", "\n", "mode", "=", "mode", ",", "\n", "vocab_size", "=", "vocab_size", ",", "\n", "attention_values", "=", "attention_values", ",", "\n", "attention_values_length", "=", "attention_values_length", ",", "\n", "attention_keys", "=", "attention_keys", ",", "\n", "attention_fn", "=", "attention_fn", ",", "\n", "reverse_scores_lengths", "=", "reverse_scores_lengths", ",", "\n", "schema_attention_keys", "=", "schema_attention_keys", ",", "\n", "schema_attention_values", "=", "schema_attention_values", ",", "\n", "schema_attention_values_length", "=", "schema_attention_values_length", ",", "\n", "schema_attention_fn", "=", "schema_attention_fn", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.schema_attention_seq2seq.SchemaMapAttentionSeq2Seq.__init__": [[159, 161], ["schema_attention_seq2seq.SchemaAttentionSeq2Seq.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "mode", ",", "name", "=", "\"schema_map_att_seq2seq\"", ")", ":", "\n", "    ", "super", "(", "SchemaAttentionSeq2Seq", ",", "self", ")", ".", "__init__", "(", "params", ",", "mode", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.schema_attention_seq2seq.SchemaMapAttentionSeq2Seq.default_params": [[162, 171], ["SchemaAttentionSeq2Seq.default_params().copy", "SchemaAttentionSeq2Seq.default_params().copy.update", "schema_attention_seq2seq.SchemaAttentionSeq2Seq.default_params"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.LogPerplexityMetricSpec.default_params"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "params", "=", "SchemaAttentionSeq2Seq", ".", "default_params", "(", ")", ".", "copy", "(", ")", "\n", "params", ".", "update", "(", "{", "\n", "\"decoder.class\"", ":", "\"seq2seq.decoders.SchemaMapAttentionDecoder\"", ",", "\n", "\"schema_map.attention.class\"", ":", "\"AttentionLayerBahdanau\"", ",", "\n", "\"schema_map.attention.params\"", ":", "{", "\"num_units\"", ":", "150", "}", "\n", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.schema_attention_seq2seq.SchemaMapAttentionSeq2Seq._schema_lookups": [[172, 187], ["schema_attention_seq2seq.SchemaMapAttentionSeq2Seq._get_tables_and_ids", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.schema_attention_seq2seq.SchemaAttentionSeq2Seq._get_tables_and_ids"], ["", "def", "_schema_lookups", "(", "self", ",", "features", ")", ":", "\n", "    ", "schema_tables", ",", "ids", "=", "self", ".", "_get_tables_and_ids", "(", "features", ")", "\n", "all_schema_embeddings", "=", "schema_tables", "[", "\"all_schema_embeddings\"", "]", "\n", "schema_embeddings_3d", "=", "tf", ".", "squeeze", "(", "tf", ".", "gather", "(", "all_schema_embeddings", ",", "ids", ")", ",", "[", "1", "]", ")", "\n", "all_schema_maps", "=", "schema_tables", "[", "\"all_schema_maps\"", "]", "\n", "schema_maps_3d", "=", "tf", ".", "squeeze", "(", "tf", ".", "gather", "(", "all_schema_maps", ",", "ids", ")", ",", "[", "1", "]", ")", "\n", "schema_lengths", "=", "schema_tables", "[", "\"schema_lengths\"", "]", "\n", "schema_attn_values_length", "=", "tf", ".", "squeeze", "(", "tf", ".", "gather", "(", "schema_lengths", ",", "ids", ")", ",", "[", "1", "]", ")", "\n", "schema_map_lengths", "=", "schema_tables", "[", "\"schema_map_lengths\"", "]", "\n", "schema_map_attn_values_length", "=", "tf", ".", "squeeze", "(", "\n", "tf", ".", "gather", "(", "schema_map_lengths", ",", "ids", ")", ",", "[", "1", "]", ")", "\n", "\n", "return", "(", "schema_embeddings_3d", ",", "schema_embeddings_3d", ",", "\n", "schema_attn_values_length", ",", "schema_maps_3d", ",", "\n", "schema_maps_3d", ",", "schema_map_attn_values_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.schema_attention_seq2seq.SchemaMapAttentionSeq2Seq._create_decoder": [[188, 221], ["schema_attention_seq2seq.SchemaMapAttentionSeq2Seq._get_decoder_args", "schema_attention_seq2seq.SchemaMapAttentionSeq2Seq._schema_lookups", "schema_map_attention_class", "schema_attention_seq2seq.SchemaMapAttentionSeq2Seq.decoder_class", "pydoc.locate", "getattr"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.schema_attention_seq2seq.SchemaAttentionSeq2Seq._get_decoder_args", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.schema_attention_seq2seq.SchemaMapAttentionSeq2Seq._schema_lookups"], ["", "def", "_create_decoder", "(", "self", ",", "encoder_output", ",", "features", ",", "_labels", ")", ":", "\n", "    ", "(", "params", ",", "mode", ",", "vocab_size", ",", "attention_values", ",", "attention_values_length", ",", "\n", "attention_keys", ",", "attention_fn", ",", "reverse_scores_lengths", ",", "\n", "schema_attention_fn", ")", "=", "self", ".", "_get_decoder_args", "(", "encoder_output", ",", "\n", "features", ",", "_labels", ")", "\n", "(", "schema_attention_keys", ",", "schema_attention_values", ",", "\n", "schema_attention_values_length", ",", "\n", "schema_map_attention_keys", ",", "schema_map_attention_values", ",", "\n", "schema_map_attention_values_length", ")", "=", "self", ".", "_schema_lookups", "(", "features", ")", "\n", "\n", "schema_map_attention_class", "=", "locate", "(", "\n", "self", ".", "params", "[", "\"schema_map.attention.class\"", "]", ")", "or", "getattr", "(", "decoders", ".", "attention", ",", "self", ".", "params", "[", "\"schema.attention.class\"", "]", ")", "\n", "schema_map_attention_layer", "=", "schema_map_attention_class", "(", "\n", "params", "=", "self", ".", "params", "[", "\"schema_map.attention.params\"", "]", ",", "mode", "=", "self", ".", "mode", ")", "\n", "\n", "return", "self", ".", "decoder_class", "(", "\n", "params", "=", "params", ",", "\n", "mode", "=", "mode", ",", "\n", "vocab_size", "=", "vocab_size", ",", "\n", "attention_values", "=", "attention_values", ",", "\n", "attention_values_length", "=", "attention_values_length", ",", "\n", "attention_keys", "=", "attention_keys", ",", "\n", "attention_fn", "=", "attention_fn", ",", "\n", "reverse_scores_lengths", "=", "reverse_scores_lengths", ",", "\n", "schema_attention_keys", "=", "schema_attention_keys", ",", "\n", "schema_attention_values", "=", "schema_attention_values", ",", "\n", "schema_attention_values_length", "=", "schema_attention_values_length", ",", "\n", "schema_attention_fn", "=", "schema_attention_fn", ",", "\n", "schema_map_attention_keys", "=", "schema_map_attention_keys", ",", "\n", "schema_map_attention_values", "=", "schema_map_attention_values", ",", "\n", "schema_map_attention_values_length", "=", "schema_map_attention_values_length", ",", "\n", "schema_map_attention_fn", "=", "schema_map_attention_layer", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.bridges.Bridge.__init__": [[54, 60], ["seq2seq.configurable.Configurable.__init__", "tensorflow.shape", "tensorflow.python.util.nest.flatten"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape"], ["def", "__init__", "(", "self", ",", "encoder_outputs", ",", "decoder_state_size", ",", "params", ",", "mode", ")", ":", "\n", "    ", "Configurable", ".", "__init__", "(", "self", ",", "params", ",", "mode", ")", "\n", "self", ".", "encoder_outputs", "=", "encoder_outputs", "\n", "self", ".", "decoder_state_size", "=", "decoder_state_size", "\n", "self", ".", "batch_size", "=", "tf", ".", "shape", "(", "\n", "nest", ".", "flatten", "(", "self", ".", "encoder_outputs", ".", "final_state", ")", "[", "0", "]", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.bridges.Bridge.__call__": [[61, 68], ["bridges.Bridge._create"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.bridges.InitialStateBridge._create"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "    ", "\"\"\"Runs the bridge function.\n\n    Returns:\n      An initial decoder_state tensor or tuple of tensors.\n    \"\"\"", "\n", "return", "self", ".", "_create", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.bridges.Bridge._create": [[69, 78], ["NotImplementedError"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_create", "(", "self", ")", ":", "\n", "    ", "\"\"\" Implements the logic for this bridge.\n    This function should be implemented by child classes.\n\n    Returns:\n      A tuple initial_decoder_state tensor or tuple of tensors.\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Must be implemented by child class\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.bridges.ZeroBridge.default_params": [[85, 88], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.bridges.ZeroBridge._create": [[89, 94], ["tensorflow.python.util.nest.map_structure", "tensorflow.zeros"], "methods", ["None"], ["", "def", "_create", "(", "self", ")", ":", "\n", "    ", "zero_state", "=", "nest", ".", "map_structure", "(", "\n", "lambda", "x", ":", "tf", ".", "zeros", "(", "[", "self", ".", "batch_size", ",", "x", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "self", ".", "decoder_state_size", ")", "\n", "return", "zero_state", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.bridges.PassThroughBridge.default_params": [[102, 105], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.bridges.PassThroughBridge._create": [[106, 110], ["tensorflow.python.util.nest.assert_same_structure"], "methods", ["None"], ["", "def", "_create", "(", "self", ")", ":", "\n", "    ", "nest", ".", "assert_same_structure", "(", "self", ".", "encoder_outputs", ".", "final_state", ",", "\n", "self", ".", "decoder_state_size", ")", "\n", "return", "self", ".", "encoder_outputs", ".", "final_state", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.bridges.InitialStateBridge.__init__": [[130, 139], ["bridges.Bridge.__init__", "getattr", "pydoc.locate", "hasattr", "ValueError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "encoder_outputs", ",", "decoder_state_size", ",", "params", ",", "mode", ")", ":", "\n", "    ", "super", "(", "InitialStateBridge", ",", "self", ")", ".", "__init__", "(", "encoder_outputs", ",", "\n", "decoder_state_size", ",", "params", ",", "mode", ")", "\n", "\n", "if", "not", "hasattr", "(", "encoder_outputs", ",", "self", ".", "params", "[", "\"bridge_input\"", "]", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\"Invalid bridge_input not in encoder outputs.\"", ")", "\n", "\n", "", "self", ".", "_bridge_input", "=", "getattr", "(", "encoder_outputs", ",", "self", ".", "params", "[", "\"bridge_input\"", "]", ")", "\n", "self", ".", "_activation_fn", "=", "locate", "(", "self", ".", "params", "[", "\"activation_fn\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.bridges.InitialStateBridge.default_params": [[140, 145], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "return", "{", "\n", "\"bridge_input\"", ":", "\"final_state\"", ",", "\n", "\"activation_fn\"", ":", "\"tensorflow.identity\"", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.bridges.InitialStateBridge._create": [[147, 167], ["tensorflow.python.util.nest.map_structure", "tensorflow.python.util.nest.flatten", "tensorflow.concat", "tensorflow.python.util.nest.flatten", "sum", "tensorflow.contrib.layers.fully_connected", "tensorflow.split", "tensorflow.python.util.nest.pack_sequence_as", "tensorflow.reshape", "bridges._total_tensor_depth"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.concat", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.bridges._total_tensor_depth"], ["", "def", "_create", "(", "self", ")", ":", "\n", "# Concat bridge inputs on the depth dimensions", "\n", "    ", "bridge_input", "=", "nest", ".", "map_structure", "(", "\n", "lambda", "x", ":", "tf", ".", "reshape", "(", "x", ",", "[", "self", ".", "batch_size", ",", "_total_tensor_depth", "(", "x", ")", "]", ")", ",", "\n", "self", ".", "_bridge_input", ")", "\n", "bridge_input_flat", "=", "nest", ".", "flatten", "(", "[", "bridge_input", "]", ")", "\n", "bridge_input_concat", "=", "tf", ".", "concat", "(", "bridge_input_flat", ",", "1", ")", "\n", "\n", "state_size_splits", "=", "nest", ".", "flatten", "(", "self", ".", "decoder_state_size", ")", "\n", "total_decoder_state_size", "=", "sum", "(", "state_size_splits", ")", "\n", "\n", "# Pass bridge inputs through a fully connected layer layer", "\n", "initial_state_flat", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "\n", "inputs", "=", "bridge_input_concat", ",", "\n", "num_outputs", "=", "total_decoder_state_size", ",", "\n", "activation_fn", "=", "self", ".", "_activation_fn", ")", "\n", "\n", "# Shape back into required state size", "\n", "initial_state", "=", "tf", ".", "split", "(", "initial_state_flat", ",", "state_size_splits", ",", "axis", "=", "1", ")", "\n", "return", "nest", ".", "pack_sequence_as", "(", "self", ".", "decoder_state_size", ",", "initial_state", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.bridges._total_tensor_depth": [[35, 38], ["numpy.prod", "tensor.get_shape().as_list", "tensor.get_shape"], "function", ["None"], ["def", "_total_tensor_depth", "(", "tensor", ")", ":", "\n", "  ", "\"\"\"Returns the size of a tensor without the first (batch) dimension\"\"\"", "\n", "return", "np", ".", "prod", "(", "tensor", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.basic_seq2seq.BasicSeq2Seq.__init__": [[45, 49], ["seq2seq.models.seq2seq_model.Seq2SeqModel.__init__", "pydoc.locate", "pydoc.locate"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "mode", ",", "name", "=", "\"basic_seq2seq\"", ")", ":", "\n", "    ", "super", "(", "BasicSeq2Seq", ",", "self", ")", ".", "__init__", "(", "params", ",", "mode", ",", "name", ")", "\n", "self", ".", "encoder_class", "=", "locate", "(", "self", ".", "params", "[", "\"encoder.class\"", "]", ")", "\n", "self", ".", "decoder_class", "=", "locate", "(", "self", ".", "params", "[", "\"decoder.class\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.basic_seq2seq.BasicSeq2Seq.default_params": [[50, 62], ["seq2seq.models.seq2seq_model.Seq2SeqModel.default_params().copy", "seq2seq.models.seq2seq_model.Seq2SeqModel.default_params().copy.update", "seq2seq.models.seq2seq_model.Seq2SeqModel.default_params"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.LogPerplexityMetricSpec.default_params"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "params", "=", "Seq2SeqModel", ".", "default_params", "(", ")", ".", "copy", "(", ")", "\n", "params", ".", "update", "(", "{", "\n", "\"bridge.class\"", ":", "\"seq2seq.models.bridges.InitialStateBridge\"", ",", "\n", "\"bridge.params\"", ":", "{", "}", ",", "\n", "\"encoder.class\"", ":", "\"seq2seq.encoders.UnidirectionalRNNEncoder\"", ",", "\n", "\"encoder.params\"", ":", "{", "}", ",", "# Arbitrary parameters for the encoder", "\n", "\"decoder.class\"", ":", "\"seq2seq.decoders.BasicDecoder\"", ",", "\n", "\"decoder.params\"", ":", "{", "}", "# Arbitrary parameters for the decoder", "\n", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.basic_seq2seq.BasicSeq2Seq._create_bridge": [[63, 72], ["bridge_class", "pydoc.locate", "getattr"], "methods", ["None"], ["", "def", "_create_bridge", "(", "self", ",", "encoder_outputs", ",", "decoder_state_size", ")", ":", "\n", "    ", "\"\"\"Creates the bridge to be used between encoder and decoder\"\"\"", "\n", "bridge_class", "=", "locate", "(", "self", ".", "params", "[", "\"bridge.class\"", "]", ")", "or", "getattr", "(", "bridges", ",", "self", ".", "params", "[", "\"bridge.class\"", "]", ")", "\n", "return", "bridge_class", "(", "\n", "encoder_outputs", "=", "encoder_outputs", ",", "\n", "decoder_state_size", "=", "decoder_state_size", ",", "\n", "params", "=", "self", ".", "params", "[", "\"bridge.params\"", "]", ",", "\n", "mode", "=", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.basic_seq2seq.BasicSeq2Seq._create_decoder": [[73, 82], ["basic_seq2seq.BasicSeq2Seq.decoder_class"], "methods", ["None"], ["", "def", "_create_decoder", "(", "self", ",", "_encoder_output", ",", "_features", ",", "_labels", ")", ":", "\n", "    ", "\"\"\"Creates a decoder instance based on the passed parameters.\"\"\"", "\n", "decoder_mask", "=", "_features", "[", "\"decoder_mask\"", "]", "\n", "\n", "return", "self", ".", "decoder_class", "(", "\n", "params", "=", "self", ".", "params", "[", "\"decoder.params\"", "]", ",", "\n", "mode", "=", "self", ".", "mode", ",", "\n", "vocab_size", "=", "self", ".", "target_vocab_info", ".", "total_size", ",", "\n", "decoder_mask", "=", "decoder_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.basic_seq2seq.BasicSeq2Seq._decode_train": [[83, 92], ["tensorflow.nn.embedding_lookup", "seq2seq.contrib.seq2seq.helper.TrainingHelper", "bridge", "decoder"], "methods", ["None"], ["", "def", "_decode_train", "(", "self", ",", "decoder", ",", "bridge", ",", "_encoder_output", ",", "_features", ",", "labels", ")", ":", "# where are the labels from?", "\n", "    ", "\"\"\"Runs decoding in training mode\"\"\"", "\n", "target_embedded", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "target_embedding", ",", "\n", "labels", "[", "\"target_ids\"", "]", ")", "\n", "helper_train", "=", "tf_decode_helper", ".", "TrainingHelper", "(", "\n", "inputs", "=", "target_embedded", "[", ":", ",", ":", "-", "1", "]", ",", "\n", "sequence_length", "=", "labels", "[", "\"target_len\"", "]", "-", "1", ")", "\n", "decoder_initial_state", "=", "bridge", "(", ")", "\n", "return", "decoder", "(", "decoder_initial_state", ",", "helper_train", ")", "\n", "# todo:check", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.basic_seq2seq.BasicSeq2Seq._decode_infer": [[93, 106], ["basic_seq2seq.BasicSeq2Seq.batch_size", "seq2seq.contrib.seq2seq.helper.GreedyEmbeddingHelper", "bridge", "decoder", "tensorflow.fill"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.model_base.ModelBase.batch_size"], ["", "def", "_decode_infer", "(", "self", ",", "decoder", ",", "bridge", ",", "_encoder_output", ",", "features", ",", "labels", ",", "mask", "=", "None", ")", ":", "\n", "    ", "\"\"\"Runs decoding in inference mode\"\"\"", "\n", "batch_size", "=", "self", ".", "batch_size", "(", "features", ",", "labels", ")", "\n", "if", "self", ".", "use_beam_search", ":", "\n", "      ", "batch_size", "=", "self", ".", "params", "[", "\"inference.beam_search.beam_width\"", "]", "\n", "\n", "", "target_start_id", "=", "self", ".", "target_vocab_info", ".", "special_vocab", ".", "SEQUENCE_START", "\n", "helper_infer", "=", "tf_decode_helper", ".", "GreedyEmbeddingHelper", "(", "\n", "embedding", "=", "self", ".", "target_embedding", ",", "\n", "start_tokens", "=", "tf", ".", "fill", "(", "[", "batch_size", "]", ",", "target_start_id", ")", ",", "\n", "end_token", "=", "self", ".", "target_vocab_info", ".", "special_vocab", ".", "SEQUENCE_END", ")", "\n", "decoder_initial_state", "=", "bridge", "(", ")", "\n", "return", "decoder", "(", "decoder_initial_state", ",", "helper_infer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.basic_seq2seq.BasicSeq2Seq.encode": [[107, 113], ["seq2seq.graph_utils.templatemethod", "tensorflow.nn.embedding_lookup", "basic_seq2seq.BasicSeq2Seq.encoder_class", "basic_seq2seq.BasicSeq2Seq."], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.templatemethod"], ["", "@", "templatemethod", "(", "\"encode\"", ")", "\n", "def", "encode", "(", "self", ",", "features", ",", "labels", ")", ":", "# what is the features?", "\n", "    ", "source_embedded", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "source_embedding", ",", "\n", "features", "[", "\"source_ids\"", "]", ")", "\n", "encoder_fn", "=", "self", ".", "encoder_class", "(", "self", ".", "params", "[", "\"encoder.params\"", "]", ",", "self", ".", "mode", ")", "\n", "return", "encoder_fn", "(", "source_embedded", ",", "features", "[", "\"source_len\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.basic_seq2seq.BasicSeq2Seq.decode": [[114, 129], ["seq2seq.graph_utils.templatemethod", "basic_seq2seq.BasicSeq2Seq._create_decoder", "basic_seq2seq.BasicSeq2Seq._create_bridge", "basic_seq2seq.BasicSeq2Seq._get_beam_search_decoder", "basic_seq2seq.BasicSeq2Seq._decode_infer", "basic_seq2seq.BasicSeq2Seq._decode_train"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.templatemethod", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_seq2seq.AttentionSeq2Seq._create_decoder", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.basic_seq2seq.BasicSeq2Seq._create_bridge", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.seq2seq_model.Seq2SeqModel._get_beam_search_decoder", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.basic_seq2seq.BasicSeq2Seq._decode_infer", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.basic_seq2seq.BasicSeq2Seq._decode_train"], ["", "@", "templatemethod", "(", "\"decode\"", ")", "\n", "def", "decode", "(", "self", ",", "encoder_output", ",", "features", ",", "labels", ")", ":", "\n", "    ", "decoder", "=", "self", ".", "_create_decoder", "(", "encoder_output", ",", "features", ",", "labels", ")", "\n", "if", "self", ".", "use_beam_search", ":", "\n", "      ", "decoder", "=", "self", ".", "_get_beam_search_decoder", "(", "decoder", ")", "\n", "\n", "", "bridge", "=", "self", ".", "_create_bridge", "(", "\n", "encoder_outputs", "=", "encoder_output", ",", "\n", "decoder_state_size", "=", "decoder", ".", "cell", ".", "state_size", ")", "\n", "if", "self", ".", "mode", "==", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "INFER", ":", "\n", "      ", "return", "self", ".", "_decode_infer", "(", "decoder", ",", "bridge", ",", "encoder_output", ",", "features", ",", "\n", "labels", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "_decode_train", "(", "decoder", ",", "bridge", ",", "encoder_output", ",", "features", ",", "\n", "labels", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.seq2seq_model.Seq2SeqModel.__init__": [[41, 58], ["seq2seq.models.model_base.ModelBase.__init__", "seq2seq.data.vocab.get_vocab_info", "seq2seq.data.vocab.get_vocab_info", "seq2seq.data.embeddings.read_embeddings", "seq2seq.data.embeddings.read_embeddings"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "mode", ",", "name", ")", ":", "\n", "    ", "super", "(", "Seq2SeqModel", ",", "self", ")", ".", "__init__", "(", "params", ",", "mode", ",", "name", ")", "\n", "\n", "self", ".", "source_vocab_info", "=", "None", "\n", "if", "\"vocab_source\"", "in", "self", ".", "params", "and", "self", ".", "params", "[", "\"vocab_source\"", "]", ":", "\n", "      ", "self", ".", "source_vocab_info", "=", "vocab", ".", "get_vocab_info", "(", "self", ".", "params", "[", "\"vocab_source\"", "]", ")", "\n", "\n", "", "self", ".", "target_vocab_info", "=", "None", "\n", "if", "\"vocab_target\"", "in", "self", ".", "params", "and", "self", ".", "params", "[", "\"vocab_target\"", "]", ":", "\n", "      ", "self", ".", "target_vocab_info", "=", "vocab", ".", "get_vocab_info", "(", "self", ".", "params", "[", "\"vocab_target\"", "]", ")", "\n", "\n", "", "self", ".", "embedding_mat_source", "=", "None", "\n", "self", ".", "embedding_mat_target", "=", "None", "\n", "# added for pretrain", "\n", "if", "\"embedding.file\"", "in", "self", ".", "params", "and", "self", ".", "params", "[", "\"embedding.file\"", "]", ":", "\n", "        ", "self", ".", "embedding_mat_source", "=", "read_embeddings", "(", "self", ".", "params", "[", "'embedding.file'", "]", ",", "self", ".", "source_vocab_info", ".", "path", ",", "self", ".", "params", "[", "\"embedding.dim\"", "]", ",", "\"source\"", ")", "\n", "self", ".", "embedding_mat_target", "=", "read_embeddings", "(", "self", ".", "params", "[", "'embedding.file'", "]", ",", "self", ".", "target_vocab_info", ".", "path", ",", "self", ".", "params", "[", "\"embedding.dim\"", "]", ",", "\"target\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.seq2seq_model.Seq2SeqModel.default_params": [[59, 82], ["seq2seq.models.model_base.ModelBase.default_params", "seq2seq.models.model_base.ModelBase.default_params.update"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.LogPerplexityMetricSpec.default_params", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update"], ["", "", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "params", "=", "ModelBase", ".", "default_params", "(", ")", "\n", "params", ".", "update", "(", "{", "\n", "\"source.max_seq_len\"", ":", "50", ",", "\n", "\"source.reverse\"", ":", "True", ",", "\n", "\"target.max_seq_len\"", ":", "50", ",", "\n", "\"embedding.dim\"", ":", "100", ",", "\n", "\"embedding.init_scale\"", ":", "0.04", ",", "\n", "# added for pretrain", "\n", "# todo: add the params for all configs", "\n", "\"embedding.file\"", ":", "None", ",", "\n", "\"embedding.tune\"", ":", "False", ",", "\n", "\n", "\"embedding.share\"", ":", "False", ",", "\n", "\"inference.beam_search.beam_width\"", ":", "0", ",", "\n", "\"inference.beam_search.length_penalty_weight\"", ":", "0.0", ",", "\n", "\"inference.beam_search.choose_successors_fn\"", ":", "\"choose_top_k\"", ",", "\n", "\"optimizer.clip_embed_gradients\"", ":", "0.1", ",", "\n", "\"vocab_source\"", ":", "\"\"", ",", "\n", "\"vocab_target\"", ":", "\"\"", ",", "\n", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.seq2seq_model.Seq2SeqModel._clip_gradients": [[83, 99], ["super()._clip_gradients", "list", "clipped_gradients.append", "variables.append", "zip", "print", "tensorflow.clip_by_norm", "tensorflow.IndexedSlices"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.model_base.ModelBase._clip_gradients", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "_clip_gradients", "(", "self", ",", "grads_and_vars", ")", ":", "\n", "    ", "\"\"\"In addition to standard gradient clipping, also clips embedding\n    gradients to a specified value.\"\"\"", "\n", "grads_and_vars", "=", "super", "(", "Seq2SeqModel", ",", "self", ")", ".", "_clip_gradients", "(", "grads_and_vars", ")", "\n", "\n", "clipped_gradients", "=", "[", "]", "\n", "variables", "=", "[", "]", "\n", "for", "gradient", ",", "variable", "in", "grads_and_vars", ":", "\n", "      ", "if", "\"embedding\"", "in", "variable", ".", "name", ":", "\n", "        ", "print", "(", "\"variable name\"", ",", "variable", ".", "name", ")", "\n", "tmp", "=", "tf", ".", "clip_by_norm", "(", "\n", "gradient", ".", "values", ",", "self", ".", "params", "[", "\"optimizer.clip_embed_gradients\"", "]", ")", "\n", "gradient", "=", "tf", ".", "IndexedSlices", "(", "tmp", ",", "gradient", ".", "indices", ",", "gradient", ".", "dense_shape", ")", "\n", "", "clipped_gradients", ".", "append", "(", "gradient", ")", "\n", "variables", ".", "append", "(", "variable", ")", "\n", "", "return", "list", "(", "zip", "(", "clipped_gradients", ",", "variables", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.seq2seq_model.Seq2SeqModel._create_predictions": [[100, 134], ["predictions.update", "collections.OrderedDict", "seq2seq.models.model_base._flatten_dict", "predictions.update", "seq2seq.models.model_base._flatten_dict", "predictions.update", "seq2seq.contrib.seq2seq.decoder._transpose_batch_time", "zip", "seq2seq.contrib.seq2seq.decoder._transpose_batch_time", "predictions.keys", "seq2seq.graph_utils.get_dict_from_collection", "target_id_to_vocab.lookup", "seq2seq.models.model_base._flatten_dict", "seq2seq.models.model_base._flatten_dict.items", "tensorflow.to_int64"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.model_base._flatten_dict", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.model_base._flatten_dict", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.decoder._transpose_batch_time", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.decoder._transpose_batch_time", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.get_dict_from_collection", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.model_base._flatten_dict", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], ["", "def", "_create_predictions", "(", "self", ",", "decoder_output", ",", "features", ",", "labels", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Creates the dictionary of predictions that is returned by the model.\n    \"\"\"", "\n", "predictions", "=", "{", "}", "\n", "\n", "# Add features and, if available, labels to predictions", "\n", "predictions", ".", "update", "(", "_flatten_dict", "(", "{", "\"features\"", ":", "features", "}", ")", ")", "\n", "if", "labels", "is", "not", "None", ":", "\n", "      ", "predictions", ".", "update", "(", "_flatten_dict", "(", "{", "\"labels\"", ":", "labels", "}", ")", ")", "\n", "\n", "", "if", "losses", "is", "not", "None", ":", "\n", "      ", "predictions", "[", "\"losses\"", "]", "=", "_transpose_batch_time", "(", "losses", ")", "\n", "\n", "# Decoders returns output in time-major form [T, B, ...]", "\n", "# Here we transpose everything back to batch-major for the user", "\n", "", "output_dict", "=", "collections", ".", "OrderedDict", "(", "\n", "zip", "(", "decoder_output", ".", "_fields", ",", "decoder_output", ")", ")", "\n", "decoder_output_flat", "=", "_flatten_dict", "(", "output_dict", ")", "\n", "decoder_output_flat", "=", "{", "\n", "k", ":", "_transpose_batch_time", "(", "v", ")", "\n", "for", "k", ",", "v", "in", "decoder_output_flat", ".", "items", "(", ")", "\n", "}", "\n", "predictions", ".", "update", "(", "decoder_output_flat", ")", "\n", "\n", "# If we predict the ids also map them back into the vocab and process them", "\n", "if", "\"predicted_ids\"", "in", "predictions", ".", "keys", "(", ")", ":", "\n", "      ", "vocab_tables", "=", "graph_utils", ".", "get_dict_from_collection", "(", "\"vocab_tables\"", ")", "\n", "target_id_to_vocab", "=", "vocab_tables", "[", "\"target_id_to_vocab\"", "]", "\n", "predicted_tokens", "=", "target_id_to_vocab", ".", "lookup", "(", "\n", "tf", ".", "to_int64", "(", "predictions", "[", "\"predicted_ids\"", "]", ")", ")", "\n", "# Raw predicted tokens", "\n", "predictions", "[", "\"predicted_tokens\"", "]", "=", "predicted_tokens", "\n", "\n", "", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.seq2seq_model.Seq2SeqModel.batch_size": [[135, 140], ["tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape"], ["", "def", "batch_size", "(", "self", ",", "features", ",", "labels", ")", ":", "\n", "    ", "\"\"\"Returns the batch size of the curren batch based on the passed\n    features.\n    \"\"\"", "\n", "return", "tf", ".", "shape", "(", "features", "[", "\"source_ids\"", "]", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.seq2seq_model.Seq2SeqModel.source_embedding": [[141, 164], ["seq2seq.graph_utils.templatemethod", "tensorflow.get_variable", "type", "type", "seq2seq_model.Seq2SeqModel.params.update", "tensorflow.random_uniform_initializer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.templatemethod", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update"], ["", "@", "property", "\n", "@", "templatemethod", "(", "\"source_embedding\"", ")", "\n", "def", "source_embedding", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns the embedding used for the source sequence.\n    \"\"\"", "\n", "# return tf.get_variable(", "\n", "#     name=\"W\",", "\n", "#     shape=[self.source_vocab_info.total_size, self.params[\"embedding.dim\"]],", "\n", "#     initializer=tf.random_uniform_initializer(", "\n", "#         -self.params[\"embedding.init_scale\"],", "\n", "#         self.params[\"embedding.init_scale\"]))", "\n", "assert", "type", "(", "self", ".", "params", "[", "'embedding.tune'", "]", ")", "==", "type", "(", "True", ")", "\n", "if", "self", ".", "embedding_mat_source", "is", "not", "None", ":", "\n", "      ", "self", ".", "params", ".", "update", "(", "{", "\"embedding.dim\"", ":", "self", ".", "embedding_mat_source", ".", "shape", "[", "1", "]", "}", ")", "\n", "initializer", "=", "self", ".", "embedding_mat_source", "\n", "shape_", "=", "None", "\n", "", "else", ":", "\n", "      ", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "self", ".", "params", "[", "\"embedding.init_scale\"", "]", ",", "\n", "self", ".", "params", "[", "\"embedding.init_scale\"", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "shape_", "=", "[", "self", ".", "source_vocab_info", ".", "total_size", ",", "self", ".", "params", "[", "\"embedding.dim\"", "]", "]", "\n", "\n", "", "return", "tf", ".", "get_variable", "(", "name", "=", "\"W\"", ",", "shape", "=", "shape_", ",", "initializer", "=", "initializer", ",", "\n", "trainable", "=", "self", ".", "params", "[", "'embedding.tune'", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.seq2seq_model.Seq2SeqModel.target_embedding": [[165, 189], ["seq2seq.graph_utils.templatemethod", "tensorflow.get_variable", "seq2seq_model.Seq2SeqModel.params.update", "tensorflow.random_uniform_initializer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.templatemethod", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update"], ["", "@", "property", "\n", "@", "templatemethod", "(", "\"target_embedding\"", ")", "\n", "def", "target_embedding", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns the embedding used for the target sequence.\n    \"\"\"", "\n", "# if self.params[\"embedding.share\"]:", "\n", "#   return self.source_embedding", "\n", "# return tf.get_variable(", "\n", "#     name=\"W\",", "\n", "#     shape=[self.target_vocab_info.total_size, self.params[\"embedding.dim\"]],", "\n", "#     initializer=tf.random_uniform_initializer(", "\n", "#         -self.params[\"embedding.init_scale\"],", "\n", "#         self.params[\"embedding.init_scale\"]))", "\n", "if", "self", ".", "embedding_mat_target", "is", "not", "None", ":", "\n", "      ", "self", ".", "params", ".", "update", "(", "{", "\"embedding.dim\"", ":", "self", ".", "embedding_mat_target", ".", "shape", "[", "1", "]", "}", ")", "\n", "initializer", "=", "self", ".", "embedding_mat_target", "\n", "shape_", "=", "None", "\n", "", "else", ":", "\n", "      ", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "self", ".", "params", "[", "\"embedding.init_scale\"", "]", ",", "\n", "self", ".", "params", "[", "\"embedding.init_scale\"", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "shape_", "=", "[", "self", ".", "target_vocab_info", ".", "total_size", ",", "self", ".", "params", "[", "\"embedding.dim\"", "]", "]", "\n", "\n", "", "return", "tf", ".", "get_variable", "(", "name", "=", "\"W\"", ",", "shape", "=", "shape_", ",", "initializer", "=", "initializer", ",", "\n", "trainable", "=", "self", ".", "params", "[", "'embedding.tune'", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.seq2seq_model.Seq2SeqModel.encode": [[191, 196], ["seq2seq.graph_utils.templatemethod", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.templatemethod"], ["", "@", "templatemethod", "(", "\"encode\"", ")", "\n", "def", "encode", "(", "self", ",", "features", ",", "labels", ")", ":", "\n", "    ", "\"\"\"Encodes the inputs.\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.seq2seq_model.Seq2SeqModel.decode": [[197, 202], ["seq2seq.graph_utils.templatemethod", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.templatemethod"], ["", "@", "templatemethod", "(", "\"decode\"", ")", "\n", "def", "decode", "(", "self", ",", "encoder_output", ",", "features", ",", "labels", ")", ":", "\n", "    ", "\"\"\"Runs decoding based on the encoder outputs.\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.seq2seq_model.Seq2SeqModel._get_beam_search_decoder": [[203, 222], ["seq2seq.inference.beam_search.BeamSearchConfig", "seq2seq.decoders.beam_search_decoder.BeamSearchDecoder", "getattr"], "methods", ["None"], ["", "def", "_get_beam_search_decoder", "(", "self", ",", "decoder", ")", ":", "\n", "    ", "\"\"\"Wraps a decoder into a Beam Search decoder.\n\n    Args:\n      decoder: The original decoder\n\n    Returns:\n      A BeamSearchDecoder with the same interfaces as the original decoder.\n    \"\"\"", "\n", "config", "=", "beam_search", ".", "BeamSearchConfig", "(", "\n", "beam_width", "=", "self", ".", "params", "[", "\"inference.beam_search.beam_width\"", "]", ",", "\n", "vocab_size", "=", "self", ".", "target_vocab_info", ".", "total_size", ",", "\n", "eos_token", "=", "self", ".", "target_vocab_info", ".", "special_vocab", ".", "SEQUENCE_END", ",", "\n", "length_penalty_weight", "=", "self", ".", "params", "[", "\n", "\"inference.beam_search.length_penalty_weight\"", "]", ",", "\n", "choose_successors_fn", "=", "getattr", "(", "\n", "beam_search", ",", "\n", "self", ".", "params", "[", "\"inference.beam_search.choose_successors_fn\"", "]", ")", ")", "\n", "return", "BeamSearchDecoder", "(", "decoder", "=", "decoder", ",", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.seq2seq_model.Seq2SeqModel.use_beam_search": [[223, 228], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "use_beam_search", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns true iff the model should perform beam search.\n    \"\"\"", "\n", "return", "self", ".", "params", "[", "\"inference.beam_search.beam_width\"", "]", ">", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.seq2seq_model.Seq2SeqModel._preprocess": [[229, 312], ["seq2seq.data.vocab.create_vocabulary_lookup_table", "seq2seq.data.vocab.create_vocabulary_lookup_table", "seq2seq.graph_utils.add_dict_to_collection", "source_vocab_to_id.lookup", "tensorflow.to_int32", "tensorflow.summary.histogram", "labels.copy.copy.copy", "target_vocab_to_id.lookup", "tensorflow.to_int32", "tensorflow.summary.histogram", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.Variable", "tensorflow.assign_add", "tensorflow.summary.scalar", "seq2seq.graph_utils.add_dict_to_collection", "tensorflow.minimum", "tensorflow.reverse_sequence", "tensorflow.to_float", "tensorflow.minimum", "tensorflow.to_float", "tensorflow.control_dependencies", "tensorflow.identity", "seq2seq.graph_utils.add_dict_to_collection"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.add_dict_to_collection", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.add_dict_to_collection", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.identity", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.add_dict_to_collection"], ["", "def", "_preprocess", "(", "self", ",", "features", ",", "labels", ")", ":", "\n", "    ", "\"\"\"Model-specific preprocessing for features and labels:\n\n    - Creates vocabulary lookup tables for source and target vocab\n    - Converts tokens into vocabulary ids\n    \"\"\"", "\n", "\n", "# Create vocabulary lookup for source", "\n", "source_vocab_to_id", ",", "source_id_to_vocab", ",", "source_word_to_count", ",", "_", "=", "vocab", ".", "create_vocabulary_lookup_table", "(", "self", ".", "source_vocab_info", ".", "path", ")", "\n", "\n", "# Create vocabulary look for target", "\n", "target_vocab_to_id", ",", "target_id_to_vocab", ",", "target_word_to_count", ",", "_", "=", "vocab", ".", "create_vocabulary_lookup_table", "(", "self", ".", "target_vocab_info", ".", "path", ")", "\n", "\n", "# Add vocab tables to graph colection so that we can access them in", "\n", "# other places.", "\n", "graph_utils", ".", "add_dict_to_collection", "(", "{", "\n", "\"source_vocab_to_id\"", ":", "source_vocab_to_id", ",", "\n", "\"source_id_to_vocab\"", ":", "source_id_to_vocab", ",", "\n", "\"source_word_to_count\"", ":", "source_word_to_count", ",", "\n", "\"target_vocab_to_id\"", ":", "target_vocab_to_id", ",", "\n", "\"target_id_to_vocab\"", ":", "target_id_to_vocab", ",", "\n", "\"target_word_to_count\"", ":", "target_word_to_count", "\n", "}", ",", "\"vocab_tables\"", ")", "\n", "\n", "# Slice source to max_len", "\n", "if", "self", ".", "params", "[", "\"source.max_seq_len\"", "]", "is", "not", "None", ":", "\n", "      ", "features", "[", "\"source_tokens\"", "]", "=", "features", "[", "\"source_tokens\"", "]", "[", ":", ",", ":", "self", ".", "params", "[", "\n", "\"source.max_seq_len\"", "]", "]", "\n", "features", "[", "\"source_len\"", "]", "=", "tf", ".", "minimum", "(", "features", "[", "\"source_len\"", "]", ",", "\n", "self", ".", "params", "[", "\"source.max_seq_len\"", "]", ")", "\n", "\n", "# Look up the source ids in the vocabulary", "\n", "", "features", "[", "\"source_ids\"", "]", "=", "source_vocab_to_id", ".", "lookup", "(", "features", "[", "\n", "\"source_tokens\"", "]", ")", "\n", "\n", "# Maybe reverse the source", "\n", "if", "self", ".", "params", "[", "\"source.reverse\"", "]", "is", "True", ":", "\n", "      ", "features", "[", "\"source_ids\"", "]", "=", "tf", ".", "reverse_sequence", "(", "\n", "input", "=", "features", "[", "\"source_ids\"", "]", ",", "\n", "seq_lengths", "=", "features", "[", "\"source_len\"", "]", ",", "\n", "seq_dim", "=", "1", ",", "\n", "batch_dim", "=", "0", ",", "\n", "name", "=", "None", ")", "\n", "\n", "", "features", "[", "\"source_len\"", "]", "=", "tf", ".", "to_int32", "(", "features", "[", "\"source_len\"", "]", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"source_len\"", ",", "tf", ".", "to_float", "(", "features", "[", "\"source_len\"", "]", ")", ")", "\n", "\n", "if", "labels", "is", "None", ":", "\n", "      ", "return", "features", ",", "None", "\n", "\n", "", "labels", "=", "labels", ".", "copy", "(", ")", "\n", "\n", "# Slices targets to max length", "\n", "if", "self", ".", "params", "[", "\"target.max_seq_len\"", "]", "is", "not", "None", ":", "\n", "      ", "labels", "[", "\"target_tokens\"", "]", "=", "labels", "[", "\"target_tokens\"", "]", "[", ":", ",", ":", "self", ".", "params", "[", "\n", "\"target.max_seq_len\"", "]", "]", "\n", "labels", "[", "\"target_len\"", "]", "=", "tf", ".", "minimum", "(", "labels", "[", "\"target_len\"", "]", ",", "\n", "self", ".", "params", "[", "\"target.max_seq_len\"", "]", ")", "\n", "\n", "# Look up the target ids in the vocabulary", "\n", "", "labels", "[", "\"target_ids\"", "]", "=", "target_vocab_to_id", ".", "lookup", "(", "labels", "[", "\"target_tokens\"", "]", ")", "\n", "\n", "labels", "[", "\"target_len\"", "]", "=", "tf", ".", "to_int32", "(", "labels", "[", "\"target_len\"", "]", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"target_len\"", ",", "tf", ".", "to_float", "(", "labels", "[", "\"target_len\"", "]", ")", ")", "\n", "\n", "# Keep track of the number of processed tokens", "\n", "num_tokens", "=", "tf", ".", "reduce_sum", "(", "labels", "[", "\"target_len\"", "]", ")", "\n", "num_tokens", "+=", "tf", ".", "reduce_sum", "(", "features", "[", "\"source_len\"", "]", ")", "\n", "token_counter_var", "=", "tf", ".", "Variable", "(", "0", ",", "\"tokens_counter\"", ")", "\n", "total_tokens", "=", "tf", ".", "assign_add", "(", "token_counter_var", ",", "num_tokens", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"num_tokens\"", ",", "total_tokens", ")", "\n", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "total_tokens", "]", ")", ":", "\n", "      ", "features", "[", "\"source_tokens\"", "]", "=", "tf", ".", "identity", "(", "features", "[", "\"source_tokens\"", "]", ")", "\n", "\n", "# Add to graph collection for later use", "\n", "", "graph_utils", ".", "add_dict_to_collection", "(", "features", ",", "\"features\"", ")", "\n", "if", "labels", ":", "\n", "      ", "graph_utils", ".", "add_dict_to_collection", "(", "labels", ",", "\"labels\"", ")", "\n", "\n", "", "return", "features", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.seq2seq_model.Seq2SeqModel.compute_loss": [[313, 331], ["seq2seq.losses.cross_entropy_sequence_loss", "tensorflow.reduce_sum", "tensorflow.to_float", "tensorflow.transpose", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.losses.cross_entropy_sequence_loss"], ["", "def", "compute_loss", "(", "self", ",", "decoder_output", ",", "_features", ",", "labels", ")", ":", "\n", "    ", "\"\"\"Computes the loss for this model.\n\n    Returns a tuple `(losses, loss)`, where `losses` are the per-batch\n    losses and loss is a single scalar tensor to minimize.\n    \"\"\"", "\n", "#pylint: disable=R0201", "\n", "# Calculate loss per example-timestep of shape [B, T]", "\n", "losses", "=", "seq2seq_losses", ".", "cross_entropy_sequence_loss", "(", "\n", "logits", "=", "decoder_output", ".", "logits", "[", ":", ",", ":", ",", ":", "]", ",", "\n", "targets", "=", "tf", ".", "transpose", "(", "labels", "[", "\"target_ids\"", "]", "[", ":", ",", "1", ":", "]", ",", "[", "1", ",", "0", "]", ")", ",", "\n", "sequence_length", "=", "labels", "[", "\"target_len\"", "]", "-", "1", ")", "\n", "\n", "# Calculate the average log perplexity", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "losses", ")", "/", "tf", ".", "to_float", "(", "\n", "tf", ".", "reduce_sum", "(", "labels", "[", "\"target_len\"", "]", "-", "1", ")", ")", "\n", "\n", "return", "losses", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.seq2seq_model.Seq2SeqModel._build": [[332, 362], ["seq2seq_model.Seq2SeqModel._preprocess", "seq2seq_model.Seq2SeqModel.encode", "seq2seq_model.Seq2SeqModel.decode", "seq2seq.graph_utils.add_dict_to_collection", "seq2seq_model.Seq2SeqModel._create_predictions", "seq2seq_model.Seq2SeqModel.compute_loss", "seq2seq_model.Seq2SeqModel._create_predictions", "seq2seq_model.Seq2SeqModel._build_train_op"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.SchemaAndInputAttentionCopyingSeq2Seq._preprocess", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.encode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.add_dict_to_collection", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.SchemaAndInputAttentionCopyingSeq2Seq._create_predictions", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_loss", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.SchemaAndInputAttentionCopyingSeq2Seq._create_predictions", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.model_base.ModelBase._build_train_op"], ["", "def", "_build", "(", "self", ",", "features", ",", "labels", ",", "params", ")", ":", "\n", "# Pre-process features and labels", "\n", "    ", "features", ",", "labels", "=", "self", ".", "_preprocess", "(", "features", ",", "labels", ")", "\n", "\n", "encoder_output", "=", "self", ".", "encode", "(", "features", ",", "labels", ")", "\n", "decoder_output", ",", "_", ",", "=", "self", ".", "decode", "(", "encoder_output", ",", "features", ",", "labels", ")", "\n", "\n", "if", "self", ".", "mode", "==", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "INFER", ":", "\n", "      ", "predictions", "=", "self", ".", "_create_predictions", "(", "\n", "decoder_output", "=", "decoder_output", ",", "features", "=", "features", ",", "labels", "=", "labels", ")", "\n", "loss", "=", "None", "\n", "train_op", "=", "None", "\n", "", "else", ":", "\n", "      ", "losses", ",", "loss", "=", "self", ".", "compute_loss", "(", "decoder_output", ",", "features", ",", "labels", ")", "\n", "\n", "train_op", "=", "None", "\n", "if", "self", ".", "mode", "==", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "        ", "train_op", "=", "self", ".", "_build_train_op", "(", "loss", ")", "\n", "\n", "", "predictions", "=", "self", ".", "_create_predictions", "(", "\n", "decoder_output", "=", "decoder_output", ",", "\n", "features", "=", "features", ",", "\n", "labels", "=", "labels", ",", "\n", "losses", "=", "losses", ")", "\n", "\n", "# We add \"useful\" tensors to the graph collection so that we", "\n", "# can easly find them in our hooks/monitors.", "\n", "", "graph_utils", ".", "add_dict_to_collection", "(", "predictions", ",", "\"predictions\"", ")", "\n", "\n", "return", "predictions", ",", "loss", ",", "train_op", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.image2seq.Image2Seq.__init__": [[37, 41], ["seq2seq.models.attention_seq2seq.AttentionSeq2Seq.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "mode", ",", "name", "=", "\"image_seq2seq\"", ")", ":", "\n", "    ", "super", "(", "Image2Seq", ",", "self", ")", ".", "__init__", "(", "params", ",", "mode", ",", "name", ")", "\n", "self", ".", "params", "[", "\"source.reverse\"", "]", "=", "False", "\n", "self", ".", "params", "[", "\"embedding.share\"", "]", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.image2seq.Image2Seq.default_params": [[42, 64], ["seq2seq.models.model_base.ModelBase.default_params", "seq2seq.models.model_base.ModelBase.default_params.update"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.LogPerplexityMetricSpec.default_params", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "params", "=", "ModelBase", ".", "default_params", "(", ")", "\n", "params", ".", "update", "(", "{", "\n", "\"attention.class\"", ":", "\"AttentionLayerBahdanau\"", ",", "\n", "\"attention.params\"", ":", "{", "\n", "\"num_units\"", ":", "128", "\n", "}", ",", "\n", "\"bridge.class\"", ":", "\"seq2seq.models.bridges.ZeroBridge\"", ",", "\n", "\"bridge.params\"", ":", "{", "}", ",", "\n", "\"encoder.class\"", ":", "\"seq2seq.encoders.InceptionV3Encoder\"", ",", "\n", "\"encoder.params\"", ":", "{", "}", ",", "# Arbitrary parameters for the encoder", "\n", "\"decoder.class\"", ":", "\"seq2seq.decoders.AttentionDecoder\"", ",", "\n", "\"decoder.params\"", ":", "{", "}", ",", "# Arbitrary parameters for the decoder", "\n", "\"target.max_seq_len\"", ":", "50", ",", "\n", "\"embedding.dim\"", ":", "100", ",", "\n", "\"inference.beam_search.beam_width\"", ":", "0", ",", "\n", "\"inference.beam_search.length_penalty_weight\"", ":", "0.0", ",", "\n", "\"inference.beam_search.choose_successors_fn\"", ":", "\"choose_top_k\"", ",", "\n", "\"vocab_target\"", ":", "\"\"", ",", "\n", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.image2seq.Image2Seq.encode": [[65, 69], ["seq2seq.graph_utils.templatemethod", "image2seq.Image2Seq.encoder_class", "image2seq.Image2Seq."], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.templatemethod"], ["", "@", "templatemethod", "(", "\"encode\"", ")", "\n", "def", "encode", "(", "self", ",", "features", ",", "_labels", ")", ":", "\n", "    ", "encoder_fn", "=", "self", ".", "encoder_class", "(", "self", ".", "params", "[", "\"encoder.params\"", "]", ",", "self", ".", "mode", ")", "\n", "return", "encoder_fn", "(", "features", "[", "\"image\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.image2seq.Image2Seq.batch_size": [[70, 72], ["tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape"], ["", "def", "batch_size", "(", "self", ",", "features", ",", "_labels", ")", ":", "\n", "    ", "return", "tf", ".", "shape", "(", "features", "[", "\"image\"", "]", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.image2seq.Image2Seq._preprocess": [[73, 118], ["seq2seq.data.vocab.create_vocabulary_lookup_table", "seq2seq.graph_utils.add_dict_to_collection", "labels.copy.copy.copy", "target_vocab_to_id.lookup", "tensorflow.to_int32", "tensorflow.summary.histogram", "seq2seq.graph_utils.add_dict_to_collection", "tensorflow.minimum", "tensorflow.to_float", "seq2seq.graph_utils.add_dict_to_collection"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.add_dict_to_collection", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.add_dict_to_collection", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.add_dict_to_collection"], ["", "def", "_preprocess", "(", "self", ",", "features", ",", "labels", ")", ":", "\n", "    ", "\"\"\"Model-specific preprocessing for features and labels:\n\n    - Creates vocabulary lookup tables for target vocab\n    - Converts tokens into vocabulary ids\n    - Prepends a speical \"SEQUENCE_START\" token to the target\n    - Appends a speical \"SEQUENCE_END\" token to the target\n    \"\"\"", "\n", "\n", "# Create vocabulary look for target", "\n", "target_vocab_to_id", ",", "target_id_to_vocab", ",", "target_word_to_count", ",", "_", "=", "vocab", ".", "create_vocabulary_lookup_table", "(", "self", ".", "target_vocab_info", ".", "path", ")", "\n", "\n", "# Add vocab tables to graph colection so that we can access them in", "\n", "# other places.", "\n", "graph_utils", ".", "add_dict_to_collection", "(", "{", "\n", "\"target_vocab_to_id\"", ":", "target_vocab_to_id", ",", "\n", "\"target_id_to_vocab\"", ":", "target_id_to_vocab", ",", "\n", "\"target_word_to_count\"", ":", "target_word_to_count", "\n", "}", ",", "\"vocab_tables\"", ")", "\n", "\n", "if", "labels", "is", "None", ":", "\n", "      ", "return", "features", ",", "None", "\n", "\n", "", "labels", "=", "labels", ".", "copy", "(", ")", "\n", "\n", "# Slices targets to max length", "\n", "if", "self", ".", "params", "[", "\"target.max_seq_len\"", "]", "is", "not", "None", ":", "\n", "      ", "labels", "[", "\"target_tokens\"", "]", "=", "labels", "[", "\"target_tokens\"", "]", "[", ":", ",", ":", "self", ".", "params", "[", "\n", "\"target.max_seq_len\"", "]", "]", "\n", "labels", "[", "\"target_len\"", "]", "=", "tf", ".", "minimum", "(", "labels", "[", "\"target_len\"", "]", ",", "\n", "self", ".", "params", "[", "\"target.max_seq_len\"", "]", ")", "\n", "\n", "# Look up the target ids in the vocabulary", "\n", "", "labels", "[", "\"target_ids\"", "]", "=", "target_vocab_to_id", ".", "lookup", "(", "labels", "[", "\"target_tokens\"", "]", ")", "\n", "\n", "labels", "[", "\"target_len\"", "]", "=", "tf", ".", "to_int32", "(", "labels", "[", "\"target_len\"", "]", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"target_len\"", ",", "tf", ".", "to_float", "(", "labels", "[", "\"target_len\"", "]", ")", ")", "\n", "\n", "# Add to graph collection for later use", "\n", "graph_utils", ".", "add_dict_to_collection", "(", "features", ",", "\"features\"", ")", "\n", "if", "labels", ":", "\n", "      ", "graph_utils", ".", "add_dict_to_collection", "(", "labels", ",", "\"labels\"", ")", "\n", "\n", "", "return", "features", ",", "labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq.__init__": [[33, 36], ["seq2seq.models.attention_seq2seq.AttentionSeq2Seq.__init__", "tensorflow.train.get_global_step"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "mode", ",", "name", "=", "\"att_copying_seq2seq\"", ")", ":", "\n", "        ", "super", "(", "BaseAttentionCopyingSeq2Seq", ",", "self", ")", ".", "__init__", "(", "params", ",", "mode", ",", "name", ")", "\n", "self", ".", "_global_step", "=", "tf", ".", "train", ".", "get_global_step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq.default_params": [[37, 47], ["seq2seq.models.attention_seq2seq.AttentionSeq2Seq.default_params().copy", "seq2seq.models.attention_seq2seq.AttentionSeq2Seq.default_params().copy.update", "seq2seq.models.attention_seq2seq.AttentionSeq2Seq.default_params"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.LogPerplexityMetricSpec.default_params"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "        ", "params", "=", "AttentionSeq2Seq", ".", "default_params", "(", ")", ".", "copy", "(", ")", "\n", "params", ".", "update", "(", "{", "\n", "# \"decoder.class\": \"seq2seq.decoders.SchemaAttentionCopyingDecoder\",", "\n", "\"decoder.class\"", ":", "\"seq2seq.decoders.AttentionDecoder\"", ",", "\n", "\"schema.attention.class\"", ":", "\"AttentionLayerBahdanau\"", ",", "\n", "\"schema.attention.params\"", ":", "{", "\"num_units\"", ":", "150", "}", "\n", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._create_decoder": [[48, 115], ["print", "attention_class", "attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq.decoder_class", "decoder_mask.get_shape", "pydoc.locate", "getattr", "tensorflow.tile", "attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq.params[].lower", "schema_attention_class", "seq2seq.graph_utils.get_dict_from_collection", "table.lookup", "tensorflow.squeeze", "tensorflow.squeeze", "attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq.decoder_class", "pydoc.locate", "getattr", "tensorflow.gather", "tensorflow.gather"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.get_dict_from_collection", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup"], ["", "def", "_create_decoder", "(", "self", ",", "encoder_output", ",", "features", ",", "_labels", ")", ":", "\n", "# assert \"decoder_mask\" in features", "\n", "        ", "decoder_mask", "=", "features", "[", "\"decoder_mask\"", "]", "\n", "print", "(", "\"decoder mask type\"", ",", "decoder_mask", ".", "get_shape", "(", ")", ")", "\n", "attention_class", "=", "locate", "(", "self", ".", "params", "[", "\"attention.class\"", "]", ")", "or", "getattr", "(", "decoders", ".", "attention", ",", "\n", "self", ".", "params", "[", "\"attention.class\"", "]", ")", "\n", "attention_layer", "=", "attention_class", "(", "\n", "params", "=", "self", ".", "params", "[", "\"attention.params\"", "]", ",", "mode", "=", "self", ".", "mode", ",", "\n", "name", "=", "\"attention_to_input_layer\"", ")", "\n", "\n", "# If the input sequence is reversed we also need to reverse", "\n", "# the attention scores.", "\n", "reverse_scores_lengths", "=", "None", "\n", "if", "self", ".", "params", "[", "\"source.reverse\"", "]", ":", "\n", "            ", "reverse_scores_lengths", "=", "features", "[", "\"source_len\"", "]", "\n", "", "if", "self", ".", "use_beam_search", ":", "\n", "            ", "reverse_scores_lengths", "=", "tf", ".", "tile", "(", "\n", "input", "=", "reverse_scores_lengths", ",", "\n", "multiples", "=", "[", "self", ".", "params", "[", "\"inference.beam_search.beam_width\"", "]", "]", ")", "\n", "\n", "", "if", "\"schema\"", "in", "self", ".", "params", "[", "\"decoder.class\"", "]", ".", "lower", "(", ")", ":", "\n", "            ", "schema_attention_class", "=", "locate", "(", "\n", "self", ".", "params", "[", "\"schema.attention.class\"", "]", ")", "or", "getattr", "(", "decoders", ".", "attention", ",", "\n", "self", ".", "params", "[", "\"schema.attention.class\"", "]", ")", "\n", "schema_attention_layer", "=", "schema_attention_class", "(", "\n", "params", "=", "self", ".", "params", "[", "\"schema.attention.params\"", "]", ",", "mode", "=", "self", ".", "mode", ",", "\n", "name", "=", "\"attention_to_schema_layer\"", ")", "\n", "\n", "schema_tables", "=", "graph_utils", ".", "get_dict_from_collection", "(", "\"schema_tables\"", ")", "\n", "schema_locs", "=", "features", "[", "'schema_loc'", "]", "\n", "table", "=", "schema_tables", "[", "\"schema_file_lookup_table\"", "]", "\n", "ids", "=", "table", ".", "lookup", "(", "schema_locs", ")", "\n", "all_schema_embeddings", "=", "schema_tables", "[", "\"all_schema_embeddings\"", "]", "\n", "schema_embeddings_3d", "=", "tf", ".", "squeeze", "(", "tf", ".", "gather", "(", "\n", "all_schema_embeddings", ",", "ids", ")", ",", "[", "1", "]", ")", "\n", "schema_lengths", "=", "schema_tables", "[", "\"schema_lengths\"", "]", "\n", "schema_attn_values_length", "=", "tf", ".", "squeeze", "(", "tf", ".", "gather", "(", "\n", "schema_lengths", ",", "ids", ")", ",", "[", "1", "]", ")", "\n", "\n", "\n", "return", "self", ".", "decoder_class", "(", "\n", "params", "=", "self", ".", "params", "[", "\"decoder.params\"", "]", ",", "\n", "mode", "=", "self", ".", "mode", ",", "\n", "vocab_size", "=", "self", ".", "target_vocab_info", ".", "total_size", ",", "\n", "attention_values", "=", "encoder_output", ".", "attention_values", ",", "\n", "attention_values_length", "=", "encoder_output", ".", "attention_values_length", ",", "\n", "attention_keys", "=", "encoder_output", ".", "outputs", ",", "\n", "attention_fn", "=", "attention_layer", ",", "\n", "reverse_scores_lengths", "=", "reverse_scores_lengths", ",", "\n", "schema_attention_keys", "=", "schema_embeddings_3d", ",", "\n", "schema_attention_values", "=", "schema_embeddings_3d", ",", "\n", "schema_attention_values_length", "=", "schema_attn_values_length", ",", "\n", "schema_attention_fn", "=", "schema_attention_layer", ",", "\n", "decoder_mask", "=", "decoder_mask", "\n", ")", "\n", "", "return", "self", ".", "decoder_class", "(", "\n", "params", "=", "self", ".", "params", "[", "\"decoder.params\"", "]", ",", "\n", "mode", "=", "self", ".", "mode", ",", "\n", "vocab_size", "=", "self", ".", "target_vocab_info", ".", "total_size", ",", "\n", "attention_values", "=", "encoder_output", ".", "attention_values", ",", "\n", "attention_values_length", "=", "encoder_output", ".", "attention_values_length", ",", "\n", "attention_keys", "=", "encoder_output", ".", "outputs", ",", "\n", "attention_fn", "=", "attention_layer", ",", "\n", "reverse_scores_lengths", "=", "reverse_scores_lengths", ",", "\n", "decoder_mask", "=", "decoder_mask", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._trim_copy_indices": [[117, 123], ["None"], "methods", ["None"], ["", "def", "_trim_copy_indices", "(", "self", ",", "labels", ",", "indices_name", ")", ":", "\n", "# Slices source copy indices to max length", "\n", "        ", "if", "self", ".", "params", "[", "\"target.max_seq_len\"", "]", "is", "not", "None", ":", "\n", "            ", "labels", "[", "indices_name", "]", "=", "labels", "[", "\n", "indices_name", "]", "[", ":", ",", ":", "self", ".", "params", "[", "\"target.max_seq_len\"", "]", "]", "\n", "", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._set_special_vocab_ids": [[124, 132], ["seq2seq.graph_utils.get_dict_from_collection", "target_vocab_to_id.lookup", "target_vocab_to_id.lookup", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.get_dict_from_collection", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup"], ["", "def", "_set_special_vocab_ids", "(", "self", ")", ":", "\n", "# Find out the IDs for special vocab", "\n", "        ", "vocab_tables", "=", "graph_utils", ".", "get_dict_from_collection", "(", "\"vocab_tables\"", ")", "\n", "target_vocab_to_id", "=", "vocab_tables", "[", "\"target_vocab_to_id\"", "]", "\n", "self", ".", "copy_word_id", "=", "target_vocab_to_id", ".", "lookup", "(", "\n", "tf", ".", "convert_to_tensor", "(", "\"COPY_WORD\"", ",", "dtype", "=", "tf", ".", "string", ")", ")", "\n", "self", ".", "copy_schema_id", "=", "target_vocab_to_id", ".", "lookup", "(", "\n", "tf", ".", "convert_to_tensor", "(", "\"COPY_SCHEMA\"", ",", "dtype", "=", "tf", ".", "string", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._get_predicted_tokens": [[133, 142], ["predictions.keys", "seq2seq.graph_utils.get_dict_from_collection", "target_id_to_vocab.lookup", "tensorflow.to_int64"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.get_dict_from_collection", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup"], ["", "def", "_get_predicted_tokens", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "if", "\"predicted_tokens\"", "in", "predictions", ".", "keys", "(", ")", ":", "\n", "            ", "output_predicted_tokens", "=", "predictions", "[", "\"predicted_tokens\"", "]", "\n", "", "else", ":", "\n", "            ", "vocab_tables", "=", "graph_utils", ".", "get_dict_from_collection", "(", "\"vocab_tables\"", ")", "\n", "target_id_to_vocab", "=", "vocab_tables", "[", "\"target_id_to_vocab\"", "]", "\n", "output_predicted_tokens", "=", "target_id_to_vocab", ".", "lookup", "(", "\n", "tf", ".", "to_int64", "(", "predictions", "[", "\"predicted_ids\"", "]", ")", ")", "\n", "", "return", "output_predicted_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._fill_in_copies": [[143, 167], ["tensorflow.python.ops.math_ops.cast", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.gather_nd", "tensorflow.equal", "tensorflow.where", "tensorflow.python.ops.math_ops.argmax", "tensorflow.tile", "tensorflow.to_int32", "tensorflow.expand_dims", "tensorflow.range", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.concat", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.argmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape"], ["", "def", "_fill_in_copies", "(", "self", ",", "prediction_ids", ",", "predicted_tokens", ",", "\n", "attn_scores", ",", "copy_source_tokens", ",", "\n", "copy_id", ")", ":", "\n", "        ", "predicted_copy_indices", "=", "math_ops", ".", "cast", "(", "\n", "math_ops", ".", "argmax", "(", "attn_scores", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "int32", ")", "\n", "\n", "# Now index into the input sequences using those indices.", "\n", "# tf.gather_nd will need [row_num, index] format to index", "\n", "# into the input sequences, so need to build 3d tensor,", "\n", "# batch x output_seq_len x 2.", "\n", "row_nums_3d", "=", "tf", ".", "expand_dims", "(", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "\n", "tf", ".", "range", "(", "0", ",", "limit", "=", "tf", ".", "shape", "(", "predicted_copy_indices", ")", "[", "0", "]", ")", ",", "\n", "axis", "=", "1", ")", ",", "[", "1", ",", "tf", ".", "shape", "(", "predicted_copy_indices", ")", "[", "1", "]", "]", ")", ",", "2", ")", "\n", "indices_3d", "=", "tf", ".", "expand_dims", "(", "predicted_copy_indices", ",", "2", ")", "\n", "indices_3d", "=", "tf", ".", "concat", "(", "[", "row_nums_3d", ",", "indices_3d", "]", ",", "axis", "=", "2", ")", "\n", "copy_predicted_tokens", "=", "tf", ".", "gather_nd", "(", "copy_source_tokens", ",", "indices_3d", ")", "\n", "\n", "# Where prediction_id == copy_id, fill in the token", "\n", "# the model predicts will be copied. In all other locations,", "\n", "# keep the predicted token we already had.", "\n", "copy_map", "=", "tf", ".", "equal", "(", "prediction_ids", ",", "tf", ".", "to_int32", "(", "copy_id", ")", ")", "\n", "predicted_tokens", "=", "tf", ".", "where", "(", "copy_map", ",", "copy_predicted_tokens", ",", "\n", "predicted_tokens", ")", "\n", "return", "predicted_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._copy_loss": [[168, 183], ["tensorflow.transpose", "seq2seq.losses.cross_entropy_sequence_loss", "tensorflow.equal", "tensorflow.to_float"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.losses.cross_entropy_sequence_loss"], ["", "def", "_copy_loss", "(", "self", ",", "targets", ",", "seq_len", ",", "attention_scores", ",", "\n", "copy_indices", ",", "copy_id", ")", ":", "\n", "        ", "copy_logits", "=", "attention_scores", "[", ":", ",", ":", ",", ":", "]", "\n", "copy_targets", "=", "tf", ".", "transpose", "(", "copy_indices", "[", ":", ",", "1", ":", "]", ",", "[", "1", ",", "0", "]", ")", "\n", "\n", "copy_loss", "=", "seq2seq_losses", ".", "cross_entropy_sequence_loss", "(", "\n", "logits", "=", "copy_logits", ",", "\n", "targets", "=", "copy_targets", ",", "\n", "sequence_length", "=", "seq_len", ")", "\n", "\n", "copy_mask", "=", "tf", ".", "equal", "(", "targets", ",", "copy_id", ",", "\n", "\"target_equals_copy_id\"", ")", "\n", "copy_mask", "=", "tf", ".", "to_float", "(", "copy_mask", ",", "\"copy_mask_to_float\"", ")", "\n", "masked_loss", "=", "copy_loss", "*", "copy_mask", "\n", "return", "masked_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._targets_and_seq_len": [[184, 188], ["tensorflow.transpose"], "methods", ["None"], ["", "def", "_targets_and_seq_len", "(", "self", ",", "labels", ")", ":", "\n", "        ", "targets", "=", "tf", ".", "transpose", "(", "labels", "[", "\"target_ids\"", "]", "[", ":", ",", "1", ":", "]", ",", "[", "1", ",", "0", "]", ")", "\n", "seq_length", "=", "labels", "[", "\"target_len\"", "]", "-", "1", "\n", "return", "targets", ",", "seq_length", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq.compute_loss": [[189, 201], ["attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._targets_and_seq_len", "seq2seq.losses.cross_entropy_sequence_loss"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._targets_and_seq_len", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.losses.cross_entropy_sequence_loss"], ["", "def", "compute_loss", "(", "self", ",", "decoder_output", ",", "_features", ",", "labels", ")", ":", "\n", "        ", "\"\"\"Computes the sequence loss for this model.\n        seq_loss is the cross entropy loss for the output sequence.\n        Returns a tuple `(losses, loss)`, where `losses` are the per-batch\n        losses and loss is a single scalar tensor to minimize.\n        \"\"\"", "\n", "targets", ",", "seq_len", "=", "self", ".", "_targets_and_seq_len", "(", "labels", ")", "\n", "seq_loss", "=", "seq2seq_losses", ".", "cross_entropy_sequence_loss", "(", "\n", "logits", "=", "decoder_output", ".", "logits", "[", ":", ",", ":", ",", ":", "]", ",", "\n", "targets", "=", "targets", ",", "\n", "sequence_length", "=", "seq_len", ")", "\n", "return", "seq_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.SchemaAttentionCopyingSeq2Seq.__init__": [[212, 215], ["attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "mode", ",", "name", "=", "\"schema_att_copying_seq2seq\"", ")", ":", "\n", "        ", "super", "(", "SchemaAttentionCopyingSeq2Seq", ",", "self", ")", ".", "__init__", "(", "params", ",", "mode", ",", "name", ")", "\n", "self", ".", "copy_schema_id", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.SchemaAttentionCopyingSeq2Seq._preprocess": [[216, 231], ["super()._preprocess", "attention_copying_seq2seq.SchemaAttentionCopyingSeq2Seq._trim_copy_indices", "attention_copying_seq2seq.SchemaAttentionCopyingSeq2Seq._set_special_vocab_ids"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.SchemaAndInputAttentionCopyingSeq2Seq._preprocess", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._trim_copy_indices", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._set_special_vocab_ids"], ["", "def", "_preprocess", "(", "self", ",", "features", ",", "labels", ")", ":", "\n", "        ", "\"\"\"Model-specific preprocessing for features and labels:\n        - Creates vocabulary lookup tables for source and target vocab\n        - Converts tokens into vocabulary ids\n        - Trims copy indices to target.max_seq_len\n        \"\"\"", "\n", "features", ",", "labels", "=", "super", "(", "SchemaAttentionCopyingSeq2Seq", ",", "\n", "self", ")", ".", "_preprocess", "(", "features", ",", "labels", ")", "\n", "\n", "if", "not", "labels", "or", "not", "\"schema_copy_indices\"", "in", "labels", ":", "\n", "            ", "return", "features", ",", "labels", "\n", "\n", "", "labels", "=", "self", ".", "_trim_copy_indices", "(", "labels", ",", "\"schema_copy_indices\"", ")", "\n", "self", ".", "_set_special_vocab_ids", "(", ")", "\n", "return", "features", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.SchemaAttentionCopyingSeq2Seq._create_predictions": [[232, 264], ["super()._create_predictions", "super()._create_predictions.keys", "attention_copying_seq2seq.SchemaAttentionCopyingSeq2Seq._get_predicted_tokens", "seq2seq.graph_utils.get_dict_from_collection", "table.lookup", "tensorflow.squeeze", "tensorflow.sparse_tensor_to_dense", "attention_copying_seq2seq.SchemaAttentionCopyingSeq2Seq._fill_in_copies", "attention_copying_seq2seq.SchemaAttentionCopyingSeq2Seq._set_special_vocab_ids", "all_schema_strings.lookup", "tensorflow.string_split"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.SchemaAndInputAttentionCopyingSeq2Seq._create_predictions", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._get_predicted_tokens", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_utils.get_dict_from_collection", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._fill_in_copies", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._set_special_vocab_ids", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup"], ["", "def", "_create_predictions", "(", "self", ",", "decoder_output", ",", "features", ",", "labels", ",", "\n", "losses", "=", "None", ")", ":", "\n", "        ", "predictions", "=", "super", "(", "SchemaAttentionCopyingSeq2Seq", ",", "\n", "self", ")", ".", "_create_predictions", "(", "decoder_output", ",", "\n", "features", ",", "labels", ",", "losses", ")", "\n", "if", "\"predicted_ids\"", "in", "predictions", ".", "keys", "(", ")", ":", "\n", "            ", "prediction_ids", "=", "predictions", "[", "\"predicted_ids\"", "]", "\n", "output_predicted_tokens", "=", "self", ".", "_get_predicted_tokens", "(", "predictions", ")", "\n", "if", "self", ".", "copy_schema_id", "is", "None", ":", "\n", "                ", "self", ".", "_set_special_vocab_ids", "(", ")", "\n", "\n", "", "schema_attention_copy_vals", "=", "predictions", "[", "\"schema_attention_copy_vals\"", "]", "\n", "\n", "# Build the schema_tokens structure from the list of schema locations.", "\n", "schema_tables", "=", "graph_utils", ".", "get_dict_from_collection", "(", "\"schema_tables\"", ")", "\n", "schema_locs", "=", "features", "[", "'schema_loc'", "]", "\n", "table", "=", "schema_tables", "[", "\"schema_file_lookup_table\"", "]", "\n", "ids", "=", "table", ".", "lookup", "(", "schema_locs", ")", "\n", "all_schema_strings", "=", "schema_tables", "[", "\"all_schema_strings\"", "]", "\n", "schema_tokens", "=", "tf", ".", "squeeze", "(", "all_schema_strings", ".", "lookup", "(", "ids", ")", ",", "axis", "=", "1", ")", "\n", "schema_tokens", "=", "tf", ".", "sparse_tensor_to_dense", "(", "\n", "tf", ".", "string_split", "(", "schema_tokens", ")", ",", "default_value", "=", "\"UNK\"", ",", "\n", "name", "=", "\"desparsifying_schema_tokens\"", ")", "\n", "\n", "# Figure out copy_schema_predicted_tokens", "\n", "predicted_tokens", "=", "self", ".", "_fill_in_copies", "(", "\n", "prediction_ids", ",", "output_predicted_tokens", ",", "\n", "schema_attention_copy_vals", ",", "\n", "schema_tokens", ",", "self", ".", "copy_schema_id", ")", "\n", "\n", "predictions", "[", "\"predicted_tokens\"", "]", "=", "predicted_tokens", "\n", "", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.SchemaAttentionCopyingSeq2Seq.compute_loss": [[265, 290], ["attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq.compute_loss", "attention_copying_seq2seq.SchemaAttentionCopyingSeq2Seq._targets_and_seq_len", "attention_copying_seq2seq.SchemaAttentionCopyingSeq2Seq._copy_loss", "tensorflow.reduce_sum", "tensorflow.to_float", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_loss", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._targets_and_seq_len", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._copy_loss"], ["", "def", "compute_loss", "(", "self", ",", "decoder_output", ",", "_features", ",", "labels", ")", ":", "\n", "        ", "\"\"\"Computes the loss for this model.\n        Loss = seq_loss + schema_copy_loss.\n        seq_loss is the cross entropy loss for the output sequence.\n        schema_copy_loss is zero at any time step where output is not\n        copy_schema, and the cross entropy loss for the schema attention\n        score otherwise.\n        Returns a tuple `(losses, loss)`, where `losses` are the per-batch\n        losses and loss is a single scalar tensor to minimize.\n        \"\"\"", "\n", "seq_loss", "=", "super", "(", "SchemaAttentionCopyingSeq2Seq", ",", "self", ")", ".", "compute_loss", "(", "\n", "decoder_output", ",", "_features", ",", "labels", ")", "\n", "\n", "targets", ",", "seq_length", "=", "self", ".", "_targets_and_seq_len", "(", "labels", ")", "\n", "schema_copy_loss", "=", "self", ".", "_copy_loss", "(", "\n", "targets", ",", "seq_length", ",", "decoder_output", ".", "schema_attention_copy_vals", ",", "\n", "labels", "[", "\"schema_copy_indices\"", "]", ",", "self", ".", "copy_schema_id", ")", "\n", "\n", "losses", "=", "seq_loss", "+", "schema_copy_loss", "\n", "\n", "# Calculate the average log perplexity", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "losses", ")", "/", "tf", ".", "to_float", "(", "\n", "tf", ".", "reduce_sum", "(", "labels", "[", "\"target_len\"", "]", "-", "1", ")", ")", "\n", "\n", "return", "losses", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.InputAttentionCopyingSeq2Seq.__init__": [[301, 304], ["attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "mode", ",", "name", "=", "\"input_att_copying_seq2seq\"", ")", ":", "\n", "        ", "super", "(", "InputAttentionCopyingSeq2Seq", ",", "self", ")", ".", "__init__", "(", "params", ",", "mode", ",", "name", ")", "\n", "self", ".", "copy_word_id", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.InputAttentionCopyingSeq2Seq._preprocess": [[305, 321], ["super()._preprocess", "attention_copying_seq2seq.InputAttentionCopyingSeq2Seq._trim_copy_indices", "attention_copying_seq2seq.InputAttentionCopyingSeq2Seq._set_special_vocab_ids"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.SchemaAndInputAttentionCopyingSeq2Seq._preprocess", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._trim_copy_indices", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._set_special_vocab_ids"], ["", "def", "_preprocess", "(", "self", ",", "features", ",", "labels", ")", ":", "\n", "        ", "\"\"\"Model-specific preprocessing for features and labels:\n        - Creates vocabulary lookup tables for source and target vocab\n        - Converts tokens into vocabulary ids\n        - Trims copy indices to target.max_seq_len\n        \"\"\"", "\n", "features", ",", "labels", "=", "super", "(", "InputAttentionCopyingSeq2Seq", ",", "\n", "self", ")", ".", "_preprocess", "(", "features", ",", "labels", ")", "\n", "if", "not", "labels", "or", "not", "\"source_copy_indices\"", "in", "labels", ":", "\n", "            ", "return", "features", ",", "labels", "\n", "\n", "# Slices source copy indices to max length", "\n", "", "labels", "=", "self", ".", "_trim_copy_indices", "(", "labels", ",", "\"source_copy_indices\"", ")", "\n", "\n", "self", ".", "_set_special_vocab_ids", "(", ")", "\n", "return", "features", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.InputAttentionCopyingSeq2Seq._create_predictions": [[322, 343], ["super()._create_predictions", "print", "super()._create_predictions.keys", "attention_copying_seq2seq.InputAttentionCopyingSeq2Seq._get_predicted_tokens", "attention_copying_seq2seq.InputAttentionCopyingSeq2Seq._fill_in_copies", "attention_copying_seq2seq.InputAttentionCopyingSeq2Seq._set_special_vocab_ids"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.SchemaAndInputAttentionCopyingSeq2Seq._create_predictions", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._get_predicted_tokens", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._fill_in_copies", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._set_special_vocab_ids"], ["", "def", "_create_predictions", "(", "self", ",", "decoder_output", ",", "features", ",", "labels", ",", "losses", "=", "None", ")", ":", "\n", "        ", "predictions", "=", "super", "(", "InputAttentionCopyingSeq2Seq", ",", "\n", "self", ")", ".", "_create_predictions", "(", "decoder_output", ",", "\n", "features", ",", "labels", ",", "losses", ")", "\n", "\n", "print", "(", "\"predictions\"", ",", "predictions", "[", "\"predicted_ids\"", "]", ")", "\n", "if", "\"predicted_ids\"", "in", "predictions", ".", "keys", "(", ")", ":", "\n", "            ", "prediction_ids", "=", "predictions", "[", "\"predicted_ids\"", "]", "\n", "output_predicted_tokens", "=", "self", ".", "_get_predicted_tokens", "(", "predictions", ")", "\n", "if", "self", ".", "copy_word_id", "is", "None", ":", "\n", "                ", "self", ".", "_set_special_vocab_ids", "(", ")", "\n", "\n", "# Figure out copy_word_predicted_tokens", "\n", "", "predicted_tokens", "=", "self", ".", "_fill_in_copies", "(", "\n", "prediction_ids", ",", "output_predicted_tokens", ",", "\n", "predictions", "[", "\"attention_scores\"", "]", ",", "\n", "features", "[", "\"source_tokens\"", "]", ",", "\n", "self", ".", "copy_word_id", ")", "\n", "\n", "predictions", "[", "\"predicted_tokens\"", "]", "=", "predicted_tokens", "\n", "", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.InputAttentionCopyingSeq2Seq.compute_loss": [[344, 368], ["attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq.compute_loss", "attention_copying_seq2seq.InputAttentionCopyingSeq2Seq._targets_and_seq_len", "attention_copying_seq2seq.InputAttentionCopyingSeq2Seq._copy_loss", "tensorflow.reduce_sum", "tensorflow.to_float", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_loss", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._targets_and_seq_len", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._copy_loss"], ["", "def", "compute_loss", "(", "self", ",", "decoder_output", ",", "_features", ",", "labels", ")", ":", "\n", "        ", "\"\"\"Computes the loss for this model.\n        Loss = seq_loss + word_copy_loss.\n        seq_loss is the cross entropy loss for the output sequence.\n        word_copy_loss is zero at any time step where output is not copy_word,\n        and the cross entropy loss for the input attention score otherwise.\n        Returns a tuple `(losses, loss)`, where `losses` are the per-batch\n        losses and loss is a single scalar tensor to minimize.\n        \"\"\"", "\n", "seq_loss", "=", "super", "(", "InputAttentionCopyingSeq2Seq", ",", "self", ")", ".", "compute_loss", "(", "\n", "decoder_output", ",", "_features", ",", "labels", ")", "\n", "targets", ",", "seq_length", "=", "self", ".", "_targets_and_seq_len", "(", "labels", ")", "\n", "word_copy_loss", "=", "self", ".", "_copy_loss", "(", "targets", ",", "seq_length", ",", "\n", "decoder_output", ".", "attention_scores", ",", "\n", "labels", "[", "\"source_copy_indices\"", "]", ",", "\n", "self", ".", "copy_word_id", ")", "\n", "\n", "losses", "=", "seq_loss", "+", "word_copy_loss", "\n", "\n", "# Calculate the average log perplexity", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "losses", ")", "/", "tf", ".", "to_float", "(", "\n", "tf", ".", "reduce_sum", "(", "labels", "[", "\"target_len\"", "]", "-", "1", ")", ")", "\n", "\n", "return", "losses", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.SchemaAndInputAttentionCopyingSeq2Seq.__init__": [[380, 384], ["attention_copying_seq2seq.SchemaAttentionCopyingSeq2Seq.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "mode", ",", "name", "=", "\"schema_att_copying_seq2seq\"", ")", ":", "\n", "        ", "super", "(", "SchemaAndInputAttentionCopyingSeq2Seq", ",", "self", ")", ".", "__init__", "(", "\n", "params", ",", "mode", ",", "name", ")", "\n", "self", ".", "copy_word_id", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.SchemaAndInputAttentionCopyingSeq2Seq._preprocess": [[385, 404], ["attention_copying_seq2seq.SchemaAttentionCopyingSeq2Seq._preprocess", "attention_copying_seq2seq.SchemaAndInputAttentionCopyingSeq2Seq._trim_copy_indices", "attention_copying_seq2seq.SchemaAndInputAttentionCopyingSeq2Seq._set_special_vocab_ids"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.SchemaAndInputAttentionCopyingSeq2Seq._preprocess", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._trim_copy_indices", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._set_special_vocab_ids"], ["", "def", "_preprocess", "(", "self", ",", "features", ",", "labels", ")", ":", "\n", "        ", "\"\"\"Model-specific preprocessing for features and labels:\n        - Creates vocabulary lookup tables for source and target vocab\n        - Converts tokens into vocabulary ids\n        - Trims copy indices to target.max_seq_len\n        \"\"\"", "\n", "# features, labels already include schema-related", "\n", "# preprocessing, since this inherits from", "\n", "# SchemaAttentionCopyingSeq2Seq.", "\n", "features", ",", "labels", "=", "super", "(", "SchemaAndInputAttentionCopyingSeq2Seq", ",", "\n", "self", ")", ".", "_preprocess", "(", "features", ",", "labels", ")", "\n", "\n", "if", "not", "labels", "or", "not", "\"source_copy_indices\"", "in", "labels", ":", "\n", "            ", "return", "features", ",", "labels", "\n", "\n", "# Slices source copy indices to max length", "\n", "", "labels", "=", "self", ".", "_trim_copy_indices", "(", "labels", ",", "\"source_copy_indices\"", ")", "\n", "self", ".", "_set_special_vocab_ids", "(", ")", "\n", "return", "features", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.SchemaAndInputAttentionCopyingSeq2Seq._create_predictions": [[405, 425], ["attention_copying_seq2seq.SchemaAttentionCopyingSeq2Seq._create_predictions", "super()._create_predictions.keys", "attention_copying_seq2seq.SchemaAndInputAttentionCopyingSeq2Seq._get_predicted_tokens", "attention_copying_seq2seq.SchemaAndInputAttentionCopyingSeq2Seq._fill_in_copies", "attention_copying_seq2seq.SchemaAndInputAttentionCopyingSeq2Seq._set_special_vocab_ids"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.SchemaAndInputAttentionCopyingSeq2Seq._create_predictions", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._get_predicted_tokens", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._fill_in_copies", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._set_special_vocab_ids"], ["", "def", "_create_predictions", "(", "self", ",", "decoder_output", ",", "features", ",", "labels", ",", "losses", "=", "None", ")", ":", "\n", "        ", "predictions", "=", "super", "(", "SchemaAndInputAttentionCopyingSeq2Seq", ",", "\n", "self", ")", ".", "_create_predictions", "(", "decoder_output", ",", "\n", "features", ",", "labels", ",", "losses", ")", "\n", "if", "\"predicted_ids\"", "in", "predictions", ".", "keys", "(", ")", ":", "\n", "            ", "prediction_ids", "=", "predictions", "[", "\"predicted_ids\"", "]", "\n", "output_predicted_tokens", "=", "self", ".", "_get_predicted_tokens", "(", "predictions", ")", "\n", "\n", "if", "self", ".", "copy_word_id", "is", "None", ":", "\n", "                ", "self", ".", "_set_special_vocab_ids", "(", ")", "\n", "\n", "# Figure out copy_word_predicted_tokens", "\n", "", "predicted_tokens", "=", "self", ".", "_fill_in_copies", "(", "\n", "prediction_ids", ",", "output_predicted_tokens", ",", "\n", "predictions", "[", "\"attention_scores\"", "]", ",", "\n", "features", "[", "\"source_tokens\"", "]", ",", "\n", "self", ".", "copy_word_id", ")", "\n", "\n", "predictions", "[", "\"predicted_tokens\"", "]", "=", "predicted_tokens", "\n", "", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.SchemaAndInputAttentionCopyingSeq2Seq.compute_loss": [[426, 451], ["attention_copying_seq2seq.SchemaAttentionCopyingSeq2Seq.compute_loss", "attention_copying_seq2seq.SchemaAndInputAttentionCopyingSeq2Seq._targets_and_seq_len", "attention_copying_seq2seq.SchemaAndInputAttentionCopyingSeq2Seq._copy_loss", "tensorflow.reduce_sum", "tensorflow.to_float", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_loss", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._targets_and_seq_len", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_copying_seq2seq.BaseAttentionCopyingSeq2Seq._copy_loss"], ["", "def", "compute_loss", "(", "self", ",", "decoder_output", ",", "_features", ",", "labels", ")", ":", "\n", "        ", "\"\"\"Computes the loss for this model.\n        Loss = seq_loss + schema_copy_loss + word_copy_loss.\n        seq_loss is the cross entropy loss for the output sequence.\n        word_copy_loss is zero at any time step where output is not copy_word,\n        and the cross entropy loss for the input attention score otherwise.\n        schema_copy_loss is like word_copy_loss, only for schema copying.\n        Returns a tuple `(losses, loss)`, where `losses` are the per-batch\n        losses and loss is a single scalar tensor to minimize.\n        \"\"\"", "\n", "seq_and_schema_loss", ",", "_", "=", "super", "(", "SchemaAndInputAttentionCopyingSeq2Seq", ",", "\n", "self", ")", ".", "compute_loss", "(", "decoder_output", ",", "\n", "_features", ",", "labels", ")", "\n", "targets", ",", "seq_length", "=", "self", ".", "_targets_and_seq_len", "(", "labels", ")", "\n", "word_copy_loss", "=", "self", ".", "_copy_loss", "(", "targets", ",", "seq_length", ",", "\n", "decoder_output", ".", "attention_scores", ",", "\n", "labels", "[", "\"source_copy_indices\"", "]", ",", "\n", "self", ".", "copy_word_id", ")", "\n", "losses", "=", "seq_and_schema_loss", "+", "word_copy_loss", "\n", "\n", "# Calculate the average log perplexity", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "losses", ")", "/", "tf", ".", "to_float", "(", "\n", "tf", ".", "reduce_sum", "(", "labels", "[", "\"target_len\"", "]", "-", "1", ")", ")", "\n", "\n", "return", "losses", ",", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.model_base.ModelBase.__init__": [[63, 66], ["seq2seq.configurable.Configurable.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "mode", ",", "name", ")", ":", "\n", "    ", "self", ".", "name", "=", "name", "\n", "Configurable", ".", "__init__", "(", "self", ",", "params", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.model_base.ModelBase._clip_gradients": [[67, 73], ["zip", "tensorflow.clip_by_global_norm", "list", "zip"], "methods", ["None"], ["", "def", "_clip_gradients", "(", "self", ",", "grads_and_vars", ")", ":", "\n", "    ", "\"\"\"Clips gradients by global norm.\"\"\"", "\n", "gradients", ",", "variables", "=", "zip", "(", "*", "grads_and_vars", ")", "\n", "clipped_gradients", ",", "_", "=", "tf", ".", "clip_by_global_norm", "(", "\n", "gradients", ",", "self", ".", "params", "[", "\"optimizer.clip_gradients\"", "]", ")", "\n", "return", "list", "(", "zip", "(", "clipped_gradients", ",", "variables", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.model_base.ModelBase._create_optimizer": [[74, 93], ["tensorflow.train.SyncReplicasOptimizer"], "methods", ["None"], ["", "def", "_create_optimizer", "(", "self", ")", ":", "\n", "    ", "\"\"\"Creates the optimizer\"\"\"", "\n", "name", "=", "self", ".", "params", "[", "\"optimizer.name\"", "]", "\n", "optimizer", "=", "tf", ".", "contrib", ".", "layers", ".", "OPTIMIZER_CLS_NAMES", "[", "name", "]", "(", "\n", "learning_rate", "=", "self", ".", "params", "[", "\"optimizer.learning_rate\"", "]", ",", "\n", "**", "self", ".", "params", "[", "\"optimizer.params\"", "]", ")", "\n", "\n", "# Optionally wrap with SyncReplicasOptimizer", "\n", "if", "self", ".", "params", "[", "\"optimizer.sync_replicas\"", "]", ">", "0", ":", "\n", "      ", "optimizer", "=", "tf", ".", "train", ".", "SyncReplicasOptimizer", "(", "\n", "opt", "=", "optimizer", ",", "\n", "replicas_to_aggregate", "=", "self", ".", "params", "[", "\n", "\"optimizer.sync_replicas_to_aggregate\"", "]", ",", "\n", "total_num_replicas", "=", "self", ".", "params", "[", "\"optimizer.sync_replicas\"", "]", ")", "\n", "# This is really ugly, but we need to do this to make the optimizer", "\n", "# accessible outside of the model.", "\n", "global_vars", ".", "SYNC_REPLICAS_OPTIMIZER", "=", "optimizer", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.model_base.ModelBase._build_train_op": [[94, 116], ["seq2seq.training.utils.create_learning_rate_decay_fn", "model_base.ModelBase._create_optimizer", "tensorflow.contrib.layers.optimize_loss", "tensorflow.contrib.framework.get_global_step"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.create_learning_rate_decay_fn", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.model_base.ModelBase._create_optimizer"], ["", "def", "_build_train_op", "(", "self", ",", "loss", ")", ":", "\n", "    ", "\"\"\"Creates the training operation\"\"\"", "\n", "learning_rate_decay_fn", "=", "training_utils", ".", "create_learning_rate_decay_fn", "(", "\n", "decay_type", "=", "self", ".", "params", "[", "\"optimizer.lr_decay_type\"", "]", "or", "None", ",", "\n", "decay_steps", "=", "self", ".", "params", "[", "\"optimizer.lr_decay_steps\"", "]", ",", "\n", "decay_rate", "=", "self", ".", "params", "[", "\"optimizer.lr_decay_rate\"", "]", ",", "\n", "start_decay_at", "=", "self", ".", "params", "[", "\"optimizer.lr_start_decay_at\"", "]", ",", "\n", "stop_decay_at", "=", "self", ".", "params", "[", "\"optimizer.lr_stop_decay_at\"", "]", ",", "\n", "min_learning_rate", "=", "self", ".", "params", "[", "\"optimizer.lr_min_learning_rate\"", "]", ",", "\n", "staircase", "=", "self", ".", "params", "[", "\"optimizer.lr_staircase\"", "]", ")", "\n", "\n", "optimizer", "=", "self", ".", "_create_optimizer", "(", ")", "\n", "train_op", "=", "tf", ".", "contrib", ".", "layers", ".", "optimize_loss", "(", "\n", "loss", "=", "loss", ",", "\n", "global_step", "=", "tf", ".", "contrib", ".", "framework", ".", "get_global_step", "(", ")", ",", "\n", "learning_rate", "=", "self", ".", "params", "[", "\"optimizer.learning_rate\"", "]", ",", "\n", "learning_rate_decay_fn", "=", "learning_rate_decay_fn", ",", "\n", "clip_gradients", "=", "self", ".", "_clip_gradients", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "summaries", "=", "[", "\"learning_rate\"", ",", "\"loss\"", ",", "\"gradients\"", ",", "\"gradient_norm\"", "]", ")", "\n", "\n", "return", "train_op", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.model_base.ModelBase.default_params": [[117, 134], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "\"\"\"Returns a dictionary of default parameters for this model.\"\"\"", "\n", "return", "{", "\n", "\"optimizer.name\"", ":", "\"Adam\"", ",", "\n", "\"optimizer.learning_rate\"", ":", "1e-4", ",", "\n", "\"optimizer.params\"", ":", "{", "}", ",", "# Arbitrary parameters for the optimizer", "\n", "\"optimizer.lr_decay_type\"", ":", "\"\"", ",", "\n", "\"optimizer.lr_decay_steps\"", ":", "100", ",", "\n", "\"optimizer.lr_decay_rate\"", ":", "0.99", ",", "\n", "\"optimizer.lr_start_decay_at\"", ":", "0", ",", "\n", "\"optimizer.lr_stop_decay_at\"", ":", "tf", ".", "int32", ".", "max", ",", "\n", "\"optimizer.lr_min_learning_rate\"", ":", "1e-12", ",", "\n", "\"optimizer.lr_staircase\"", ":", "False", ",", "\n", "\"optimizer.clip_gradients\"", ":", "5.0", ",", "\n", "\"optimizer.sync_replicas\"", ":", "0", ",", "\n", "\"optimizer.sync_replicas_to_aggregate\"", ":", "0", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.model_base.ModelBase.batch_size": [[136, 139], ["NotImplementedError"], "methods", ["None"], ["", "def", "batch_size", "(", "self", ",", "features", ",", "labels", ")", ":", "\n", "    ", "\"\"\"Returns the batch size for a batch of examples\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.model_base.ModelBase.__call__": [[140, 147], ["tensorflow.variable_scope", "tensorflow.variable_scope", "model_base.ModelBase._build"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.encoder.Encoder._build"], ["", "def", "__call__", "(", "self", ",", "features", ",", "labels", ",", "params", ")", ":", "\n", "    ", "\"\"\"Creates the model graph. See the model_fn documentation in\n    tf.contrib.learn.Estimator class for a more detailed explanation.\n    \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\"model\"", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "        ", "return", "self", ".", "_build", "(", "features", ",", "labels", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.model_base.ModelBase._build": [[148, 153], ["None"], "methods", ["None"], ["", "", "", "def", "_build", "(", "self", ",", "features", ",", "labels", ",", "params", ")", ":", "\n", "    ", "\"\"\"Subclasses should implement this method. See the `model_fn` documentation\n    in tf.contrib.learn.Estimator class for a more detailed explanation.\n    \"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.model_base._flatten_dict": [[29, 53], ["dict_.items", "dict", "isinstance", "items.extend", "_flatten_dict().items", "isinstance", "hasattr", "collections.OrderedDict", "items.extend", "items.append", "zip", "_flatten_dict().items", "model_base._flatten_dict", "model_base._flatten_dict"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.model_base._flatten_dict", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.model_base._flatten_dict"], ["def", "_flatten_dict", "(", "dict_", ",", "parent_key", "=", "\"\"", ",", "sep", "=", "\".\"", ")", ":", "\n", "  ", "\"\"\"Flattens a nested dictionary. Namedtuples within\n  the dictionary are converted to dicts.\n\n  Args:\n    dict_: The dictionary to flatten.\n    parent_key: A prefix to prepend to each key.\n    sep: Separator between parent and child keys, a string. For example\n      { \"a\": { \"b\": 3 } } will become { \"a.b\": 3 } if the separator is \".\".\n\n  Returns:\n    A new flattened dictionary.\n  \"\"\"", "\n", "items", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "dict_", ".", "items", "(", ")", ":", "\n", "    ", "new_key", "=", "parent_key", "+", "sep", "+", "key", "if", "parent_key", "else", "key", "\n", "if", "isinstance", "(", "value", ",", "collections", ".", "MutableMapping", ")", ":", "\n", "      ", "items", ".", "extend", "(", "_flatten_dict", "(", "value", ",", "new_key", ",", "sep", "=", "sep", ")", ".", "items", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "tuple", ")", "and", "hasattr", "(", "value", ",", "\"_asdict\"", ")", ":", "\n", "      ", "dict_items", "=", "collections", ".", "OrderedDict", "(", "zip", "(", "value", ".", "_fields", ",", "value", ")", ")", "\n", "items", ".", "extend", "(", "_flatten_dict", "(", "dict_items", ",", "new_key", ",", "sep", "=", "sep", ")", ".", "items", "(", ")", ")", "\n", "", "else", ":", "\n", "      ", "items", ".", "append", "(", "(", "new_key", ",", "value", ")", ")", "\n", "", "", "return", "dict", "(", "items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_seq2seq.AttentionSeq2Seq.__init__": [[42, 44], ["seq2seq.models.basic_seq2seq.BasicSeq2Seq.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "mode", ",", "name", "=", "\"att_seq2seq\"", ")", ":", "\n", "    ", "super", "(", "AttentionSeq2Seq", ",", "self", ")", ".", "__init__", "(", "params", ",", "mode", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_seq2seq.AttentionSeq2Seq.default_params": [[45, 75], ["seq2seq.models.basic_seq2seq.BasicSeq2Seq.default_params().copy", "seq2seq.models.basic_seq2seq.BasicSeq2Seq.default_params().copy.update", "seq2seq.models.basic_seq2seq.BasicSeq2Seq.default_params"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.LogPerplexityMetricSpec.default_params"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "params", "=", "BasicSeq2Seq", ".", "default_params", "(", ")", ".", "copy", "(", ")", "\n", "params", ".", "update", "(", "{", "\n", "\"attention.class\"", ":", "\"AttentionLayerBahdanau\"", ",", "\n", "\"attention.params\"", ":", "{", "\"num_units\"", ":", "150", "}", ",", "\n", "\"bridge.class\"", ":", "\"seq2seq.models.bridges.ZeroBridge\"", ",", "\n", "\"encoder.class\"", ":", "\"seq2seq.encoders.BidirectionalRNNEncoder\"", ",", "\n", "\"encoder.params\"", ":", "{", "\"rnn_cell\"", ":", "{", "\"cell_class\"", ":", "\"LSTMCell\"", ",", "\n", "\"cell_params\"", ":", "\n", "{", "\"num_units\"", ":", "150", "}", ",", "\n", "\"dropout_input_keep_prob\"", ":", "0.5", ",", "\n", "\"dropout_output_keep_prob\"", ":", "0.5", ",", "\n", "\"num_layers\"", ":", "1", "}", "}", ",", "\n", "\"decoder.class\"", ":", "\"seq2seq.decoders.AttentionDecoder\"", ",", "\n", "\"decoder.params\"", ":", "{", "\"max_decode_length\"", ":", "250", ",", "\n", "\"rnn_cell\"", ":", "{", "\"cell_class\"", ":", "\"LSTMCell\"", ",", "\n", "\"cell_params\"", ":", "\n", "{", "\"num_units\"", ":", "150", "}", ",", "\n", "\"dropout_input_keep_prob\"", ":", "0.5", ",", "\n", "\"dropout_output_keep_prob\"", ":", "0.5", ",", "\n", "\"num_layers\"", ":", "1", "}", "}", ",", "\n", "\"optimizer.name\"", ":", "\"Adam\"", ",", "\n", "\"optimizer.params\"", ":", "{", "\"epsilon\"", ":", "0.0000008", "}", ",", "\n", "\"optimizer.learning_rate\"", ":", "0.0005", ",", "\n", "\"source.max_seq_len\"", ":", "50", ",", "\n", "\"source.reverse\"", ":", "False", ",", "\n", "\"target.max_seq_len\"", ":", "250", ",", "\n", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.attention_seq2seq.AttentionSeq2Seq._create_decoder": [[76, 103], ["attention_class", "attention_seq2seq.AttentionSeq2Seq.decoder_class", "pydoc.locate", "getattr", "tensorflow.tile"], "methods", ["None"], ["", "def", "_create_decoder", "(", "self", ",", "encoder_output", ",", "features", ",", "_labels", ")", ":", "\n", "    ", "attention_class", "=", "locate", "(", "self", ".", "params", "[", "\"attention.class\"", "]", ")", "or", "getattr", "(", "decoders", ".", "attention", ",", "self", ".", "params", "[", "\"attention.class\"", "]", ")", "\n", "attention_layer", "=", "attention_class", "(", "\n", "params", "=", "self", ".", "params", "[", "\"attention.params\"", "]", ",", "mode", "=", "self", ".", "mode", ")", "\n", "\n", "# If the input sequence is reversed we also need to reverse", "\n", "# the attention scores.", "\n", "reverse_scores_lengths", "=", "None", "\n", "if", "self", ".", "params", "[", "\"source.reverse\"", "]", ":", "\n", "      ", "reverse_scores_lengths", "=", "features", "[", "\"source_len\"", "]", "\n", "if", "self", ".", "use_beam_search", ":", "\n", "        ", "reverse_scores_lengths", "=", "tf", ".", "tile", "(", "\n", "input", "=", "reverse_scores_lengths", ",", "\n", "multiples", "=", "[", "self", ".", "params", "[", "\"inference.beam_search.beam_width\"", "]", "]", ")", "\n", "\n", "", "", "decoder_mask", "=", "features", "[", "\"decoder_mask\"", "]", "\n", "return", "self", ".", "decoder_class", "(", "\n", "params", "=", "self", ".", "params", "[", "\"decoder.params\"", "]", ",", "\n", "mode", "=", "self", ".", "mode", ",", "\n", "vocab_size", "=", "self", ".", "target_vocab_info", ".", "total_size", ",", "\n", "attention_values", "=", "encoder_output", ".", "attention_values", ",", "\n", "attention_values_length", "=", "encoder_output", ".", "attention_values_length", ",", "\n", "attention_keys", "=", "encoder_output", ".", "outputs", ",", "\n", "attention_fn", "=", "attention_layer", ",", "\n", "reverse_scores_lengths", "=", "reverse_scores_lengths", ",", "\n", "decoder_mask", "=", "decoder_mask", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.beam_search.beam_search": [[20, 83], ["tensor2struct.utils.registry.register", "model.begin_inference", "range", "finished.sort", "beam_search.Hypothesis", "candidates.sort", "pdb.set_trace", "len", "hyp.inference_state.clone", "hyp.inference_state.clone.step", "len", "len", "operator.attrgetter", "operator.itemgetter", "finished.append", "beam.append", "choice_score.item", "len", "beam_search.Hypothesis", "beam_search.Hypothesis", "choice_score.item"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.register", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.begin_inference", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.clone", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["\n", "from", "collections", "import", "namedtuple", "\n", "import", "numpy", "as", "np", "\n", "\n", "import", "tensorflow", "as", "tf", "\n", "from", "tensorflow", ".", "python", ".", "util", "import", "nest", "# pylint: disable=E0611", "\n", "\n", "\n", "class", "BeamSearchState", "(", "\n", "namedtuple", "(", "\"BeamSearchState\"", ",", "[", "\"log_probs\"", ",", "\"finished\"", ",", "\"lengths\"", "]", ")", ")", ":", "\n", "  ", "\"\"\"State for a single step of beam search.\n\n  Args:\n    log_probs: The current log probabilities of all beams\n    finished: A boolean vector that specifies which beams are finished\n    lengths: Lengths of all beams\n  \"\"\"", "\n", "pass", "\n", "\n", "\n", "", "class", "BeamSearchStepOutput", "(", "\n", "namedtuple", "(", "\"BeamSearchStepOutput\"", ",", "\n", "[", "\"scores\"", ",", "\"predicted_ids\"", ",", "\"beam_parent_ids\"", "]", ")", ")", ":", "\n", "  ", "\"\"\"Outputs for a single step of beam search.\n\n  Args:\n    scores: Score for each beam, a float32 vector\n    predicted_ids: predictions for this step step, an int32 vector\n    beam_parent_ids: an int32 vector containing the beam indices of the\n      continued beams from the previous step\n  \"\"\"", "\n", "pass", "\n", "\n", "\n", "", "class", "BeamSearchConfig", "(", "\n", "namedtuple", "(", "\"BeamSearchConfig\"", ",", "[", "\n", "\"beam_width\"", ",", "\"vocab_size\"", ",", "\"eos_token\"", ",", "\"length_penalty_weight\"", ",", "\n", "\"choose_successors_fn\"", "\n", "]", ")", ")", ":", "\n", "  ", "\"\"\"Configuration object for beam search.\n\n  Args:\n    beam_width: Number of beams to use, an integer\n    vocab_size: Output vocabulary size\n    eos_token: The id of the EOS token, used to mark beams as \"done\"\n    length_penalty_weight: Weight for the length penalty factor. 0.0 disables\n      the penalty.\n    choose_successors_fn: A function used to choose beam successors based\n      on their scores. Maps from (scores, config) => (chosen scores, chosen_ids)\n  \"\"\"", "\n", "pass", "\n", "\n", "\n", "", "def", "gather_tree_py", "(", "values", ",", "parents", ")", ":", "\n", "  ", "\"\"\"Gathers path through a tree backwards from the leave nodes. Used\n  to reconstruct beams given their parents.\"\"\"", "\n", "beam_length", "=", "values", ".", "shape", "[", "0", "]", "\n", "num_beams", "=", "values", ".", "shape", "[", "1", "]", "\n", "res", "=", "np", ".", "zeros_like", "(", "values", ")", "\n", "res", "[", "-", "1", ",", ":", "]", "=", "values", "[", "-", "1", ",", ":", "]", "\n", "for", "beam_id", "in", "range", "(", "num_beams", ")", ":", "\n", "    ", "parent", "=", "parents", "[", "-", "1", "]", "[", "beam_id", "]", "\n", "for", "level", "in", "reversed", "(", "range", "(", "beam_length", "-", "1", ")", ")", ":", "\n", "      ", "res", "[", "level", ",", "beam_id", "]", "=", "values", "[", "level", "]", "[", "parent", "]", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.encoder.EncPreproc.__init__": [[22, 35], ["os.path.join", "collections.defaultdict", "tensor2struct.utils.vocab.VocabBuilder", "os.path.join", "tensor2struct.utils.registry.construct"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct"], ["import", "abc", "\n", "from", "collections", "import", "namedtuple", "\n", "\n", "import", "six", "\n", "\n", "from", "seq2seq", ".", "configurable", "import", "Configurable", "\n", "from", "seq2seq", ".", "graph_module", "import", "GraphModule", "\n", "\n", "EncoderOutput", "=", "namedtuple", "(", "\n", "\"EncoderOutput\"", ",", "\n", "\"outputs final_state attention_values attention_values_length\"", ")", "\n", "\n", "\n", "@", "six", ".", "add_metaclass", "(", "abc", ".", "ABCMeta", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.encoder.EncPreproc._tokenize": [[36, 40], ["encoder.EncPreproc.embedder.tokenize"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEncPreproc.tokenize"], ["class", "Encoder", "(", "GraphModule", ",", "Configurable", ")", ":", "\n", "  "]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.encoder.EncPreproc.validate_item": [[41, 43], ["None"], "methods", ["None"], ["\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.encoder.EncPreproc.add_item": [[44, 56], ["isinstance", "encoder.EncPreproc.texts[].append", "encoder.EncPreproc._tokenize", "encoder.EncPreproc._tokenize", "item.src.split", "encoder.EncPreproc.vocab_builder.add_word"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext._tokenize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext._tokenize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.add_word"], ["def", "__init__", "(", "self", ",", "params", ",", "mode", ",", "name", ")", ":", "\n", "    ", "GraphModule", ".", "__init__", "(", "self", ",", "name", ")", "\n", "Configurable", ".", "__init__", "(", "self", ",", "params", ",", "mode", ")", "\n", "\n", "", "def", "_build", "(", "self", ",", "inputs", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "self", ".", "encode", "(", "inputs", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "@", "abc", ".", "abstractmethod", "\n", "def", "encode", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.encoder.EncPreproc.clear_items": [[57, 59], ["collections.defaultdict"], "methods", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.encoder.EncPreproc.save": [[60, 70], ["os.makedirs", "encoder.EncPreproc.vocab_builder.finish", "print", "encoder.EncPreproc.vocab.save", "encoder.EncPreproc.texts.items", "open", "len", "os.path.join", "f.write", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.finish", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.save", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.encoder.EncPreproc.load": [[71, 73], ["tensor2struct.utils.vocab.Vocab.load"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.encoder.EncPreproc.dataset": [[74, 78], ["json.loads", "open", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.encoder.Encoder.__init__": [[86, 107], ["super().__init__", "encoder.Encoder._build_modules"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEnc._build_modules"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.encoder.Encoder._build_modules": [[108, 142], ["torch.nn.Sequential", "modules.append", "tensor2struct.modules.embedders.LookupEmbeddings", "tensor2struct.modules.lstm.BiLSTM", "tensor2struct.modules.rat.PadCLS", "tensor2struct.modules.rat.PadCLS", "tensor2struct.modules.rat.TransformerEncoder"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.encoder.Encoder.forward": [[143, 146], ["encoder.Encoder.compute_encoding"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_encoder.Encoder.compute_encoding"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.encoder.Encoder.compute_encoding": [[147, 170], ["encoder.Encoder.encoder", "range", "len", "ret_list.append", "encoder.Encoder.select", "tensor2struct.modules.lstm.extract_last_hidden_state", "src_memory.unsqueeze.unsqueeze.unsqueeze", "src_summary.unsqueeze.unsqueeze.unsqueeze", "encoder.EncoderState", "src_rep.size", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.select", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.extract_last_hidden_state", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.abstract_preproc.AbstractPreproc.validate_item": [[18, 24], ["None"], "methods", ["None"], ["@", "abc", ".", "abstractmethod", "\n", "def", "validate_item", "(", "self", ",", "item", ",", "section", ")", ":", "\n", "        ", "\"\"\"Checks whether item can be successfully preprocessed.\n        \n        Returns a boolean and an arbitrary object.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.abstract_preproc.AbstractPreproc.add_item": [[25, 29], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "add_item", "(", "self", ",", "item", ",", "section", ",", "validation_info", ")", ":", "\n", "        ", "\"\"\"Add an item to be preprocessed.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.abstract_preproc.AbstractPreproc.clear_items": [[30, 34], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "clear_items", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clear the preprocessed items\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.abstract_preproc.AbstractPreproc.save": [[35, 41], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "save", "(", "self", ")", ":", "\n", "        ", "\"\"\"Marks that all of the items have been preprocessed. Save state to disk.\n\n        Used in preprocess.py, after reading all of the data.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.abstract_preproc.AbstractPreproc.load": [[42, 46], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "load", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load state from disk.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.abstract_preproc.AbstractPreproc.dataset": [[47, 51], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "dataset", "(", "self", ",", "section", ")", ":", "\n", "        ", "\"\"\"Returns a torch.data.utils.Dataset instance.\"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_beam_search.Hypothesis.add_actions": [[18, 25], ["zip", "history.append", "range", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["def", "add_actions", "(", "self", ",", "actions", ")", ":", "\n", "        ", "if", "self", ".", "choices_history", "is", "None", ":", "\n", "            ", "self", ".", "choices_history", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "actions", ")", ")", "]", "\n", "\n", "", "for", "history", ",", "action", "in", "zip", "(", "self", ".", "choices_history", ",", "actions", ")", ":", "\n", "            ", "if", "action", "is", "not", "None", ":", "\n", "                ", "history", ".", "append", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_beam_search.Hypothesis.add_scores": [[26, 32], ["range", "len", "range"], "methods", ["None"], ["", "", "", "def", "add_scores", "(", "self", ",", "scores", ")", ":", "\n", "        ", "if", "self", ".", "score_list", "is", "None", ":", "\n", "            ", "self", ".", "score_list", "=", "[", "[", "0", "]", "for", "_", "in", "range", "(", "scores", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "scores", ")", ")", ":", "\n", "            ", "self", ".", "score_list", "[", "i", "]", "+=", "scores", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_beam_search.batched_greedy_search": [[34, 69], ["tensor2struct.utils.registry.register", "model", "getattr", "len", "batched_beam_search.Hypothesis", "range", "Hypothesis.inference_state.finalize", "range", "batched_beam_search.Hypothesis.add_actions", "batched_beam_search.Hypothesis.add_scores", "inference_state.step", "max", "chosen_candidates.append", "choice_score.item"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.register", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.infer_tree_traversal.InferenceTreeTraversal.finalize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_beam_search.Hypothesis.add_actions", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_beam_search.Hypothesis.add_scores", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "", "", "@", "registry", ".", "register", "(", "\"infer_method\"", ",", "\"batched_greedy_search\"", ")", "\n", "def", "batched_greedy_search", "(", "model", ",", "orig_items", ",", "preproc_items", ",", "beam_size", ",", "max_steps", ")", ":", "\n", "    ", "assert", "beam_size", "==", "1", "\n", "enc_items", ",", "dec_items", "=", "preproc_items", "\n", "ret_state", "=", "model", "(", "enc_items", ",", "compute_loss", "=", "False", ",", "infer", "=", "True", ")", "\n", "inference_state", ",", "next_choices_list", "=", "(", "\n", "ret_state", "[", "\"initial_state\"", "]", ",", "\n", "ret_state", "[", "\"initial_choices_list\"", "]", ",", "\n", ")", "\n", "assert", "getattr", "(", "inference_state", ",", "\"batched\"", ")", "\n", "\n", "bs", "=", "len", "(", "enc_items", ")", "\n", "hyp", "=", "Hypothesis", "(", "inference_state", ",", "score_list", "=", "[", "0.0", "]", "*", "bs", ")", "\n", "for", "_", "in", "range", "(", "max_steps", ")", ":", "\n", "        ", "if", "next_choices_list", "is", "None", ":", "\n", "            ", "break", "\n", "\n", "", "chosen_candidates", "=", "[", "]", "\n", "for", "batch_idx", "in", "range", "(", "bs", ")", ":", "\n", "            ", "candidates", "=", "[", "\n", "(", "choice", ",", "hyp", ".", "score_list", "[", "batch_idx", "]", "+", "choice_score", ".", "item", "(", ")", ")", "\n", "for", "choice", ",", "choice_score", "in", "next_choices_list", "[", "batch_idx", "]", "\n", "]", "\n", "best_one", "=", "max", "(", "candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "chosen_candidates", ".", "append", "(", "best_one", ")", "\n", "\n", "", "cur_actions", "=", "[", "item", "[", "0", "]", "for", "item", "in", "chosen_candidates", "]", "\n", "cur_scores", "=", "[", "item", "[", "1", "]", "for", "item", "in", "chosen_candidates", "]", "\n", "hyp", ".", "add_actions", "(", "cur_actions", ")", "\n", "hyp", ".", "add_scores", "(", "cur_scores", ")", "\n", "\n", "next_choices_list", "=", "inference_state", ".", "step", "(", "cur_actions", ")", "\n", "\n", "", "codes_list", "=", "hyp", ".", "inference_state", ".", "finalize", "(", ")", "\n", "return", "codes_list", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_beam_search.batched_greedy_search_v": [[71, 96], ["tensor2struct.utils.registry.register", "model", "getattr", "range", "inference_state.finalize", "inference_state.step"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.register", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.infer_tree_traversal.InferenceTreeTraversal.finalize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step"], ["", "@", "registry", ".", "register", "(", "\"infer_method\"", ",", "\"batched_greedy_search_v\"", ")", "\n", "def", "batched_greedy_search_v", "(", "model", ",", "orig_items", ",", "preproc_items", ",", "beam_size", ",", "max_steps", ")", ":", "\n", "    ", "\"\"\"\n    Compared with batched_greedy_search, intermedia representation is vectorized\n    \"\"\"", "\n", "assert", "beam_size", "==", "1", "\n", "\n", "enc_items", ",", "dec_items", "=", "preproc_items", "\n", "ret_state", "=", "model", "(", "enc_items", ",", "compute_loss", "=", "False", ",", "infer", "=", "True", ")", "\n", "inference_state", ",", "next_choices_list", "=", "(", "\n", "ret_state", "[", "\"initial_state\"", "]", ",", "\n", "ret_state", "[", "\"initial_choices_list\"", "]", ",", "\n", ")", "\n", "assert", "getattr", "(", "inference_state", ",", "\"batched\"", ")", "\n", "\n", "for", "_", "in", "range", "(", "max_steps", ")", ":", "\n", "        ", "if", "next_choices_list", "is", "None", ":", "\n", "            ", "break", "\n", "\n", "# bs * candidate_num", "\n", "", "candidates_v", ",", "candidates_score_v", "=", "next_choices_list", "\n", "next_choices_list", "=", "inference_state", ".", "step", "(", "candidates_v", ")", "\n", "\n", "", "codes_list", "=", "inference_state", ".", "finalize", "(", ")", "\n", "return", "codes_list", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_beam_search.beam_search": [[97, 102], ["tensor2struct.utils.registry.register", "model", "ret_state[].tolist"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.register"], ["", "@", "registry", ".", "register", "(", "\"infer_method\"", ",", "\"batched_classify\"", ")", "\n", "def", "beam_search", "(", "model", ",", "orig_items", ",", "preproc_items", ",", "beam_size", ",", "max_steps", ")", ":", "\n", "    ", "enc_items", ",", "dec_items", "=", "preproc_items", "\n", "ret_state", "=", "model", "(", "enc_items", ",", "compute_loss", "=", "False", ",", "infer", "=", "True", ")", "\n", "return", "ret_state", "[", "\"predictions\"", "]", ".", "tolist", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.LatPerEncoder.__init__": [[49, 101], ["tensor2struct.models.batched_encoder.Encoder.__init__", "tensor2struct.modules.permutation.BinarizableTree", "latper_encoder.LatPerEncoder._build_modules", "latper_encoder.LatPerEncoder._build_modules"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEnc._build_modules", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEnc._build_modules"], ["def", "__init__", "(", "\n", "self", ",", "\n", "device", ",", "\n", "preproc", ",", "\n", "dropout", "=", "0.1", ",", "\n", "word_emb_size", "=", "128", ",", "\n", "recurrent_size", "=", "256", ",", "\n", "num_heads", "=", "4", ",", "\n", "use_native_lstm", "=", "True", ",", "\n", "bert_version", "=", "\"bert-base-uncased\"", ",", "\n", "syntax_encoder", "=", "(", "\"emb\"", ",", "\"bilstm\"", ")", ",", "\n", "semantic_encoder", "=", "(", "\"emb\"", ",", ")", ",", "\n", "postorder_encoder", "=", "None", ",", "\n", "forward_relaxed", "=", "True", ",", "\n", "gumbel_temperature", "=", "None", ",", "\n", "use_map_decode", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "device", "=", "device", ",", "\n", "preproc", "=", "preproc", ",", "\n", "dropout", "=", "dropout", ",", "\n", "word_emb_size", "=", "word_emb_size", ",", "\n", "recurrent_size", "=", "recurrent_size", ",", "\n", "encoder", "=", "syntax_encoder", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "use_native_lstm", "=", "use_native_lstm", ",", "\n", "bert_version", "=", "bert_version", ",", "\n", ")", "\n", "\n", "# another encoder for obtain semantic info", "\n", "self", ".", "semantic_encoder_modules", "=", "semantic_encoder", "\n", "if", "self", ".", "semantic_encoder_modules", "is", "not", "None", ":", "\n", "            ", "self", ".", "semantic_encoder", "=", "self", ".", "_build_modules", "(", "self", ".", "semantic_encoder_modules", ")", "\n", "\n", "", "self", ".", "postorder_encoder_modules", "=", "postorder_encoder", "\n", "if", "postorder_encoder", "is", "not", "None", ":", "\n", "            ", "self", ".", "postorder_encoder", "=", "self", ".", "_build_modules", "(", "self", ".", "postorder_encoder_modules", ")", "\n", "\n", "", "if", "self", ".", "postorder_encoder_modules", ":", "\n", "            ", "self", ".", "last_enc_module", "=", "self", ".", "postorder_encoder_modules", "[", "-", "1", "]", "\n", "", "elif", "self", ".", "semantic_encoder_modules", ":", "\n", "            ", "self", ".", "last_enc_module", "=", "self", ".", "semantic_encoder_modules", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "last_enc_module", "=", "self", ".", "encoder_modules", "[", "-", "1", "]", "\n", "\n", "", "self", ".", "permutator", "=", "permutation", ".", "BinarizableTree", "(", "\n", "device", "=", "device", ",", "\n", "input_size", "=", "recurrent_size", ",", "\n", "forward_relaxed", "=", "forward_relaxed", ",", "\n", "gumbel_temperature", "=", "gumbel_temperature", ",", "\n", "use_map_decode", "=", "use_map_decode", ",", "\n", "dropout", "=", "dropout", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.LatPerEncoder._pad": [[103, 111], ["res.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "_pad", "(", "self", ",", "tokens_list", ")", ":", "\n", "        ", "\"\"\"\n        Add BOS and EOS to use LSTM-minus features\n        \"\"\"", "\n", "res", "=", "[", "]", "\n", "for", "tokens", "in", "tokens_list", ":", "\n", "            ", "res", ".", "append", "(", "[", "vocab", ".", "BOS", "]", "+", "tokens", "+", "[", "vocab", ".", "EOS", "]", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.LatPerEncoder.compute_encoding": [[112, 116], ["latper_encoder.LatPerEncoder.compute_encoding_batched"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.LatPerSSNTEncoder.compute_encoding_batched"], ["", "def", "compute_encoding", "(", "self", ",", "tokens_list", ")", ":", "\n", "        ", "res", "=", "self", ".", "compute_encoding_batched", "(", "tokens_list", ")", "\n", "# res = self.compute_encoding_unbatched(tokens_list)", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.LatPerEncoder.extract_lstm_enc": [[117, 125], ["src_enc.pad", "tensor2struct.modules.lstm.extract_last_hidden_state_batched"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.pad", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.extract_last_hidden_state_batched"], ["", "def", "extract_lstm_enc", "(", "self", ",", "src_enc", ",", "enc_module", ")", ":", "\n", "        ", "assert", "enc_module", "in", "[", "\"bilstm\"", ",", "\"unilstm\"", "]", "\n", "src_memory", ",", "lengths", "=", "src_enc", ".", "pad", "(", "batch_first", "=", "True", ")", "\n", "bidirectional", "=", "enc_module", "==", "\"bilstm\"", "\n", "src_summary", "=", "lstm", ".", "extract_last_hidden_state_batched", "(", "\n", "src_memory", ",", "lengths", ",", "bidirectional", "=", "bidirectional", "\n", ")", "\n", "return", "src_memory", ",", "lengths", ",", "src_summary", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.LatPerEncoder.extract_trans_enc": [[126, 137], ["range", "len"], "methods", ["None"], ["", "def", "extract_trans_enc", "(", "self", ",", "src_enc", ",", "enc_module", ")", ":", "\n", "        ", "assert", "enc_module", "in", "[", "\"transformer\"", "]", "\n", "raw_src_enc_memory", ",", "lengths", "=", "src_enc", "\n", "\n", "# unpack CLS representation as the summary, recover original lengths", "\n", "src_summary", "=", "raw_src_enc_memory", "[", ":", ",", "0", ",", ":", "]", "\n", "src_memory", "=", "raw_src_enc_memory", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "lengths", ")", ")", ":", "\n", "            ", "lengths", "[", "i", "]", "=", "lengths", "[", "i", "]", "-", "1", "\n", "\n", "", "return", "src_memory", ",", "lengths", ",", "src_summary", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.LatPerEncoder.extract_enc": [[138, 146], ["latper_encoder.LatPerEncoder.extract_lstm_enc", "latper_encoder.LatPerEncoder.extract_trans_enc", "src_enc.pad"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.LatPerEncoder.extract_lstm_enc", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.LatPerEncoder.extract_trans_enc", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.pad"], ["", "def", "extract_enc", "(", "self", ",", "src_enc", ",", "enc_module", ")", ":", "\n", "        ", "if", "enc_module", "in", "[", "\"bilstm\"", ",", "\"unilstm\"", "]", ":", "\n", "            ", "return", "self", ".", "extract_lstm_enc", "(", "src_enc", ",", "enc_module", ")", "\n", "", "elif", "enc_module", "in", "[", "\"transformer\"", "]", ":", "\n", "            ", "return", "self", ".", "extract_trans_enc", "(", "src_enc", ",", "enc_module", ")", "\n", "", "elif", "enc_module", "in", "[", "\"emb\"", "]", ":", "\n", "            ", "src_memory", ",", "lengths", "=", "src_enc", ".", "pad", "(", "batch_first", "=", "True", ")", "\n", "return", "src_memory", ",", "lengths", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.LatPerEncoder.compute_encoding_batched": [[147, 203], ["latper_encoder.LatPerEncoder._pad", "latper_encoder.LatPerEncoder.encoder", "latper_encoder.LatPerEncoder.pad", "latper_encoder.EncoderState", "tensor2struct.modules.lstm.SpanRepresentation", "latper_encoder.LatPerEncoder.permutator", "zip", "latper_encoder.LatPerEncoder.semantic_encoder", "latper_encoder.LatPerEncoder.apply_raw", "latper_encoder.LatPerEncoder.postorder_encoder", "latper_encoder.LatPerEncoder.extract_enc", "latper_encoder.LatPerEncoder.semantic_encoder", "latper_encoder.LatPerEncoder.extract_enc", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "int", "tensor2struct.modules.lstm.SpanRepresentation.get_lengths", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.LatPerEncoder._pad", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.pad", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.apply_raw", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.LatPerEncoder.extract_enc", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.LatPerEncoder.extract_enc", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.SpanRepresentation.get_lengths"], ["", "", "def", "compute_encoding_batched", "(", "self", ",", "tokens_list", ")", ":", "\n", "        ", "\"\"\"\n        For syntax encoding, each sentence is padded with bos and eos to obtain\n        the LSTM-minus span-level features.\n        \"\"\"", "\n", "# 1. obtain permutation from syntax representations", "\n", "padded_tokens_list", "=", "self", ".", "_pad", "(", "tokens_list", ")", "\n", "syntax_src_enc", "=", "self", ".", "encoder", "(", "padded_tokens_list", ")", "\n", "syntax_src_enc_batched", ",", "padded_lengths", "=", "syntax_src_enc", ".", "pad", "(", "batch_first", "=", "True", ")", "\n", "\n", "if", "self", ".", "semantic_encoder_modules", "is", "None", ":", "\n", "# 2.a baseline without any the reodering", "\n", "            ", "permutation_matrix", "=", "None", "\n", "permuted_memory", "=", "syntax_src_enc_batched", "\n", "lengths", "=", "padded_lengths", "\n", "", "else", ":", "\n", "            ", "syntax_span_rep", "=", "lstm", ".", "SpanRepresentation", "(", "\n", "syntax_src_enc_batched", ",", "padded_lengths", "\n", ")", "\n", "permutation_matrix", ",", "_", "=", "self", ".", "permutator", "(", "\n", "syntax_span_rep", "\n", ")", "# use span_rep to handle bos and eos", "\n", "\n", "# 2.b use permutation matrix to obtain reordered semantic representations", "\n", "# optional: postorder encoder is applied after permutation", "\n", "if", "self", ".", "postorder_encoder_modules", ":", "\n", "                ", "preorder_src_enc", "=", "self", ".", "semantic_encoder", "(", "tokens_list", ")", "\n", "postorder_input", "=", "preorder_src_enc", ".", "apply_raw", "(", "\n", "lambda", "x", ":", "torch", ".", "bmm", "(", "permutation_matrix", ",", "x", ")", "\n", ")", "\n", "postorder_src_enc", "=", "self", ".", "postorder_encoder", "(", "postorder_input", ")", "\n", "permuted_memory", ",", "lengths", ",", "src_summary", "=", "self", ".", "extract_enc", "(", "\n", "postorder_src_enc", ",", "self", ".", "last_enc_module", "\n", ")", "\n", "", "else", ":", "\n", "                ", "semantic_src_enc", "=", "self", ".", "semantic_encoder", "(", "tokens_list", ")", "\n", "semantic_src_enc_batched", ",", "lengths", ",", "src_summary", "=", "self", ".", "extract_enc", "(", "\n", "semantic_src_enc", ",", "self", ".", "last_enc_module", "\n", ")", "\n", "permuted_memory", "=", "torch", ".", "bmm", "(", "\n", "permutation_matrix", ",", "semantic_src_enc_batched", "\n", ")", "\n", "\n", "# optional: check lengths", "\n", "# span_rep.get_length() remove bos and eos", "\n", "", "lengths", "=", "[", "int", "(", "l", ")", "for", "l", "in", "lengths", "]", "# tensor to int", "\n", "for", "l1", ",", "l2", "in", "zip", "(", "syntax_span_rep", ".", "get_lengths", "(", ")", ",", "lengths", ")", ":", "\n", "                ", "assert", "l1", "==", "l2", "\n", "\n", "", "", "res", "=", "EncoderState", "(", "\n", "src_memory", "=", "permuted_memory", ",", "\n", "lengths", "=", "lengths", ",", "\n", "src_summary", "=", "src_summary", ",", "\n", "permutation", "=", "permutation_matrix", ",", "\n", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.LatPerSSNTEncoder.__init__": [[217, 254], ["latper_encoder.LatPerEncoder.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["def", "__init__", "(", "\n", "self", ",", "\n", "device", ",", "\n", "preproc", ",", "\n", "dropout", "=", "0.1", ",", "\n", "word_emb_size", "=", "128", ",", "\n", "recurrent_size", "=", "256", ",", "\n", "num_heads", "=", "4", ",", "\n", "use_native_lstm", "=", "True", ",", "\n", "bert_version", "=", "\"bert-base-uncased\"", ",", "\n", "syntax_encoder", "=", "(", "\"emb\"", ",", "\"bilstm\"", ")", ",", "\n", "semantic_encoder", "=", "(", "\"emb\"", ",", ")", ",", "\n", "postorder_encoder", "=", "None", ",", "\n", "forward_relaxed", "=", "True", ",", "\n", "gumbel_temperature", "=", "None", ",", "\n", "use_map_decode", "=", "False", ",", "\n", "semantic_dropout", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "device", ",", "\n", "preproc", ",", "\n", "dropout", "=", "dropout", ",", "\n", "word_emb_size", "=", "word_emb_size", ",", "\n", "recurrent_size", "=", "recurrent_size", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "use_native_lstm", "=", "use_native_lstm", ",", "\n", "bert_version", "=", "bert_version", ",", "\n", "syntax_encoder", "=", "syntax_encoder", ",", "\n", "semantic_encoder", "=", "semantic_encoder", ",", "\n", "postorder_encoder", "=", "postorder_encoder", ",", "\n", "forward_relaxed", "=", "forward_relaxed", ",", "\n", "gumbel_temperature", "=", "gumbel_temperature", ",", "\n", "use_map_decode", "=", "use_map_decode", ",", "\n", ")", "\n", "\n", "self", ".", "semantic_dropout", "=", "semantic_dropout", "\n", "self", ".", "eos_emb", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "word_emb_size", ")", ".", "to", "(", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.LatPerSSNTEncoder.compute_encoding_batched": [[255, 337], ["latper_encoder.LatPerSSNTEncoder._pad", "latper_encoder.LatPerSSNTEncoder.encoder", "latper_encoder.LatPerSSNTEncoder.pad", "tensor2struct.modules.lstm.SpanRepresentation", "latper_encoder.LatPerSSNTEncoder.permutator", "latper_encoder.LatPerSSNTEncoder.semantic_encoder", "latper_encoder.LatPerSSNTEncoder.apply_raw", "latper_encoder.LatPerSSNTEncoder.compute_encoding_batched.add_eos"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.LatPerEncoder._pad", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.pad", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.apply_raw"], ["", "def", "compute_encoding_batched", "(", "self", ",", "tokens_list", ")", ":", "\n", "        ", "\"\"\"\n        Add a special token at the end of each sentence\n        \"\"\"", "\n", "padded_tokens_list", "=", "self", ".", "_pad", "(", "tokens_list", ")", "\n", "syntax_src_enc", "=", "self", ".", "encoder", "(", "padded_tokens_list", ")", "\n", "syntax_src_enc_batched", ",", "padded_lengths", "=", "syntax_src_enc", ".", "pad", "(", "batch_first", "=", "True", ")", "\n", "\n", "# 1. syntax rep", "\n", "syntax_span_rep", "=", "lstm", ".", "SpanRepresentation", "(", "\n", "syntax_src_enc_batched", ",", "padded_lengths", "\n", ")", "\n", "permutation_matrix", ",", "reorder_loss", "=", "self", ".", "permutator", "(", "\n", "syntax_span_rep", "\n", ")", "# use span_rep to handle bos and eos", "\n", "\n", "# 2. use permutation matrix to obtain reordered semantic representations", "\n", "assert", "self", ".", "postorder_encoder_modules", "\n", "\n", "preorder_src_enc", "=", "self", ".", "semantic_encoder", "(", "tokens_list", ")", "\n", "postorder_input", "=", "preorder_src_enc", ".", "apply_raw", "(", "\n", "lambda", "x", ":", "torch", ".", "bmm", "(", "permutation_matrix", ",", "x", ")", "\n", ")", "\n", "\n", "# 3. add EOS to the permuted embedding", "\n", "def", "add_eos", "(", "x", ")", ":", "\n", "            ", "padded_x", ",", "lengths", "=", "x", ".", "pad", "(", ")", "\n", "bs", ",", "_", ",", "rs", "=", "padded_x", ".", "size", "(", ")", "\n", "zero_pad", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "1", ",", "rs", "]", ")", ".", "to", "(", "padded_x", ".", "device", ")", "\n", "x_with_zero_padded", "=", "torch", ".", "cat", "(", "[", "padded_x", ",", "zero_pad", "]", ",", "dim", "=", "1", ")", "\n", "\n", "aux_t", "=", "torch", ".", "zeros_like", "(", "x_with_zero_padded", ")", "\n", "for", "batch_idx", ",", "eos_idx", "in", "enumerate", "(", "lengths", ")", ":", "\n", "                ", "aux_t", "[", "batch_idx", ",", "eos_idx", "]", "=", "self", ".", "eos_emb", "\n", "", "new_x", "=", "x_with_zero_padded", "+", "aux_t", "\n", "\n", "# increase the sorted length of packed seq by 1", "\n", "sorted_lengths", "=", "[", "length", "+", "1", "for", "length", "in", "x", ".", "lengths", "]", "\n", "per_idx_t", "=", "torch", ".", "LongTensor", "(", "x", ".", "orig_to_sort", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "per_data", "=", "new_x", "[", "per_idx_t", "]", "\n", "new_ps", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "per_data", ",", "sorted_lengths", ",", "batch_first", "=", "True", "\n", ")", "\n", "return", "attr", ".", "evolve", "(", "x", ",", "ps", "=", "new_ps", ",", "lengths", "=", "sorted_lengths", ")", "\n", "\n", "", "postorder_input_with_eos", "=", "add_eos", "(", "postorder_input", ")", "\n", "\n", "# 4. apply postoder update", "\n", "postorder_src_enc", "=", "self", ".", "postorder_encoder", "(", "postorder_input_with_eos", ")", "\n", "permuted_memory", ",", "lengths", ",", "src_summary", "=", "self", ".", "extract_enc", "(", "\n", "postorder_src_enc", ",", "self", ".", "last_enc_module", "\n", ")", "\n", "\n", "# 5. optional: apply semantic dropout", "\n", "postorder_emb", ",", "_", "=", "postorder_input_with_eos", ".", "pad", "(", "batch_first", "=", "True", ")", "\n", "if", "self", ".", "training", "and", "self", ".", "semantic_dropout", ":", "\n", "            ", "p_mask", "=", "self", ".", "semantic_dropout", "*", "torch", ".", "ones", "(", "permuted_memory", ".", "size", "(", ")", "[", ":", "2", "]", ")", ".", "to", "(", "\n", "self", ".", "_device", "\n", ")", "\n", "mask", "=", "torch", ".", "bernoulli", "(", "p_mask", ")", "\n", "batch_mask", "=", "mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "permuted_memory", ".", "size", "(", ")", "[", "-", "1", "]", ")", "\n", "\n", "permuted_memory", "=", "permuted_memory", "*", "(", "1", "-", "batch_mask", ")", "+", "postorder_emb", "*", "batch_mask", "\n", "", "elif", "self", ".", "semantic_dropout", "==", "1.0", ":", "\n", "# if semantic_dropout is 1.0, we skip the postordering model", "\n", "            ", "permuted_memory", "=", "postorder_emb", "\n", "\n", "# optional: check lengths", "\n", "# span_rep.get_length() remove bos and eos", "\n", "", "lengths", "=", "[", "int", "(", "l", ")", "for", "l", "in", "lengths", "]", "# tensor to int", "\n", "for", "l1", ",", "l2", "in", "zip", "(", "syntax_span_rep", ".", "get_lengths", "(", ")", ",", "lengths", ")", ":", "\n", "            ", "assert", "l1", "+", "1", "==", "l2", "\n", "\n", "", "res", "=", "EncoderState", "(", "\n", "src_memory", "=", "permuted_memory", ",", "\n", "lengths", "=", "lengths", ",", "\n", "permutation", "=", "permutation_matrix", ",", "\n", "src_summary", "=", "src_summary", ",", "\n", "src_embedding", "=", "postorder_emb", ",", "\n", "enc_loss", "=", "reorder_loss", ",", "\n", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.LatPerSemiBatchedEncoder.compute_encoding": [[348, 351], ["latper_encoder.LatPerSemiBatchedEncoder.compute_encoding_unbatched"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.LatPerSemiBatchedEncoder.compute_encoding_unbatched"], ["def", "compute_encoding", "(", "self", ",", "tokens_list", ")", ":", "\n", "        ", "res", "=", "self", ".", "compute_encoding_unbatched", "(", "tokens_list", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.LatPerSemiBatchedEncoder.compute_encoding_unbatched": [[352, 378], ["latper_encoder.LatPerSemiBatchedEncoder._pad", "latper_encoder.LatPerSemiBatchedEncoder.encoder", "range", "len", "latper_encoder.LatPerSemiBatchedEncoder.select", "tensor2struct.modules.lstm.extract_last_hidden_state", "tensor2struct.modules.lstm.SpanRepresentation", "latper_encoder.LatPerSemiBatchedEncoder.permutator", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "permuted_memory.unsqueeze.unsqueeze.unsqueeze", "src_summary.unsqueeze.unsqueeze.unsqueeze", "ret_list.append", "latper_encoder.EncoderState"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.LatPerEncoder._pad", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.select", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.extract_last_hidden_state", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "compute_encoding_unbatched", "(", "self", ",", "tokens_list", ")", ":", "\n", "        ", "tokens_list", "=", "self", ".", "_pad", "(", "tokens_list", ")", "\n", "src_enc", "=", "self", ".", "encoder", "(", "tokens_list", ")", "\n", "\n", "ret_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "tokens_list", ")", ")", ":", "\n", "# does not transformer for now", "\n", "            ", "assert", "\"transformer\"", "not", "in", "self", ".", "encoder_modules", "\n", "assert", "self", ".", "encoder_modules", "[", "-", "1", "]", "==", "\"bilstm\"", "\n", "src_memory", "=", "src_enc", ".", "select", "(", "i", ")", "\n", "src_summary", "=", "lstm", ".", "extract_last_hidden_state", "(", "src_memory", ")", "\n", "\n", "# extract and apply latent permutation", "\n", "span_rep", "=", "lstm", ".", "SpanRepresentation", "(", "src_memory", ")", "\n", "permutation_matrix", "=", "self", ".", "permutator", "(", "span_rep", ")", "\n", "real_src_memory", "=", "src_memory", "[", "1", ":", "-", "1", ",", ":", "]", "# remove bos and eos", "\n", "permuted_memory", "=", "torch", ".", "matmul", "(", "permutation_matrix", ",", "real_src_memory", ")", "\n", "\n", "# attach a batch dimension", "\n", "permuted_memory", "=", "permuted_memory", ".", "unsqueeze", "(", "0", ")", "\n", "src_summary", "=", "src_summary", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "ret_list", ".", "append", "(", "\n", "EncoderState", "(", "src_memory", "=", "permuted_memory", ",", "src_summary", "=", "src_summary", ")", "\n", ")", "\n", "", "return", "ret_list", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.SinkhornEncoder.__init__": [[384, 408], ["tensor2struct.models.batched_encoder.Encoder.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "latper_encoder.SinkhornEncoder._build_modules"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEnc._build_modules"], ["def", "__init__", "(", "\n", "self", ",", "\n", "device", ",", "\n", "preproc", ",", "\n", "dropout", "=", "0.1", ",", "\n", "word_emb_size", "=", "128", ",", "\n", "recurrent_size", "=", "256", ",", "\n", "encoder", "=", "(", "\"emb\"", ",", "\"bilstm\"", ")", ",", "\n", "semantic_encoder", "=", "(", "\"emb\"", ",", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "device", ",", "preproc", ",", "dropout", ",", "word_emb_size", ",", "recurrent_size", ",", "encoder", "\n", ")", "\n", "\n", "query_size", "=", "recurrent_size", "\n", "key_size", "=", "recurrent_size", "\n", "self", ".", "query_proj", "=", "torch", ".", "nn", ".", "Linear", "(", "recurrent_size", ",", "query_size", ")", "\n", "self", ".", "key_proj", "=", "torch", ".", "nn", ".", "Linear", "(", "recurrent_size", ",", "key_size", ")", "\n", "# self.temp = np.power(key_size, 0.5)", "\n", "self", ".", "temp", "=", "1", "\n", "self", ".", "num_sh_it", "=", "32", "\n", "\n", "self", ".", "semantic_encoder_modules", "=", "semantic_encoder", "\n", "self", ".", "semantic_encoder", "=", "self", ".", "_build_modules", "(", "self", ".", "semantic_encoder_modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.SinkhornEncoder.sinkhorn_attention": [[409, 421], ["latper_encoder.SinkhornEncoder.query_proj", "latper_encoder.SinkhornEncoder.key_proj", "range", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp"], "methods", ["None"], ["", "def", "sinkhorn_attention", "(", "self", ",", "input_v", ")", ":", "\n", "        ", "\"\"\" input_v: sent_len * recurent_size \"\"\"", "\n", "query_v", "=", "self", ".", "query_proj", "(", "input_v", ")", "\n", "key_v", "=", "self", ".", "key_proj", "(", "input_v", ")", "\n", "score_mat", "=", "torch", ".", "einsum", "(", "\"ij,kj->ik\"", ",", "[", "key_v", ",", "query_v", "]", ")", "/", "self", ".", "temp", "\n", "\n", "it_scores", "=", "score_mat", "\n", "for", "_", "in", "range", "(", "self", ".", "num_sh_it", ")", ":", "\n", "            ", "it_scores", "=", "it_scores", "-", "torch", ".", "logsumexp", "(", "it_scores", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "it_scores", "=", "it_scores", "-", "torch", ".", "logsumexp", "(", "it_scores", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "", "prob_m", "=", "torch", ".", "exp", "(", "it_scores", ")", "\n", "return", "prob_m", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.SinkhornEncoder.compute_encoding": [[422, 444], ["latper_encoder.SinkhornEncoder.encoder", "latper_encoder.SinkhornEncoder.semantic_encoder", "max", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "latper_encoder.EncoderState", "len", "latper_encoder.SinkhornEncoder.select", "latper_encoder.SinkhornEncoder.select", "latper_encoder.SinkhornEncoder.sinkhorn_attention", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "len", "torch.pad", "torch.pad", "memory_list.append", "length_list.append", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.select", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.select", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.latper_encoder.SinkhornEncoder.sinkhorn_attention", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.pad", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.pad", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "compute_encoding", "(", "self", ",", "tokens_list", ")", ":", "\n", "        ", "syntax_enc", "=", "self", ".", "encoder", "(", "tokens_list", ")", "\n", "semantic_enc", "=", "self", ".", "semantic_encoder", "(", "tokens_list", ")", "\n", "max_len", "=", "max", "(", "len", "(", "tokens", ")", "for", "tokens", "in", "tokens_list", ")", "\n", "\n", "memory_list", "=", "[", "]", "\n", "length_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "tokens_list", ")", ")", ":", "\n", "            ", "src_memory", "=", "syntax_enc", ".", "select", "(", "i", ")", "\n", "semantic_memory", "=", "semantic_enc", ".", "select", "(", "i", ")", "\n", "\n", "permutation_mat", "=", "self", ".", "sinkhorn_attention", "(", "src_memory", ")", "\n", "permutated_memory", "=", "torch", ".", "einsum", "(", "\"ji,jk->ik\"", ",", "[", "permutation_mat", ",", "semantic_memory", "]", ")", "\n", "\n", "cur_length", "=", "len", "(", "tokens_list", "[", "i", "]", ")", "\n", "reshaped_permutated_memory", "=", "F", ".", "pad", "(", "permutated_memory", ",", "(", "0", ",", "0", ",", "0", ",", "max_len", "-", "cur_length", ")", ",", "\"constant\"", ",", "0", ")", "\n", "\n", "memory_list", ".", "append", "(", "reshaped_permutated_memory", ")", "\n", "length_list", ".", "append", "(", "cur_length", ")", "\n", "\n", "", "src_enc_memory", "=", "torch", ".", "stack", "(", "memory_list", ",", "dim", "=", "0", ")", "\n", "return", "EncoderState", "(", "src_enc_memory", ",", "length_list", ",", "None", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.decoder.DecoderPreproc.__init__": [[29, 35], ["os.path.join", "tensor2struct.utils.vocab.VocabBuilder", "os.path.join", "collections.defaultdict"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["from", "__future__", "import", "print_function", "\n", "\n", "import", "abc", "\n", "\n", "import", "six", "\n", "\n", "from", "tensorflow", ".", "python", ".", "framework", "import", "constant_op", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.decoder.DecoderPreproc.validate_item": [[36, 38], ["None"], "methods", ["None"], ["from", "tensorflow", ".", "python", ".", "framework", "import", "dtypes", "\n", "from", "tensorflow", ".", "python", ".", "framework", "import", "ops", "\n", "from", "tensorflow", ".", "python", ".", "framework", "import", "tensor_shape", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.decoder.DecoderPreproc.add_item": [[39, 47], ["decoder.DecoderPreproc.items[].append", "decoder.DecoderPreproc.vocab_builder.add_word"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.add_word"], ["from", "tensorflow", ".", "python", ".", "framework", "import", "tensor_util", "\n", "from", "tensorflow", ".", "python", ".", "ops", "import", "array_ops", "\n", "from", "tensorflow", ".", "python", ".", "ops", "import", "control_flow_ops", "\n", "from", "tensorflow", ".", "python", ".", "ops", "import", "math_ops", "\n", "from", "tensorflow", ".", "python", ".", "ops", "import", "tensor_array_ops", "\n", "from", "tensorflow", ".", "python", ".", "ops", "import", "variable_scope", "\n", "from", "tensorflow", ".", "python", ".", "util", "import", "nest", "\n", "\n", "__all__", "=", "[", "\"Decoder\"", ",", "\"dynamic_decode\"", "]", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.decoder.DecoderPreproc.clear_items": [[48, 50], ["collections.defaultdict"], "methods", ["None"], ["\n", "\n", "def", "_transpose_batch_time", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.decoder.DecoderPreproc.save": [[51, 61], ["os.makedirs", "decoder.DecoderPreproc.vocab_builder.finish", "print", "decoder.DecoderPreproc.vocab.save", "decoder.DecoderPreproc.items.items", "open", "len", "os.path.join", "f.write", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.finish", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.save", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["  "]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.decoder.DecoderPreproc.load": [[62, 64], ["tensor2struct.utils.vocab.Vocab.load"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load"], ["\n", "x_static_shape", "=", "x", ".", "get_shape", "(", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.decoder.DecoderPreproc.dataset": [[65, 69], ["json.loads", "open", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["if", "x_static_shape", ".", "ndims", "is", "not", "None", "and", "x_static_shape", ".", "ndims", "<", "2", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"Expected input tensor %s to have rank at least 2, but saw shape: %s\"", "%", "\n", "(", "x", ",", "x_static_shape", ")", ")", "\n", "", "x_rank", "=", "array_ops", ".", "rank", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.decoder.MLP.__init__": [[73, 77], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["x_t", ".", "set_shape", "(", "\n", "tensor_shape", ".", "TensorShape", "(", "[", "\n", "x_static_shape", "[", "1", "]", ".", "value", ",", "x_static_shape", "[", "0", "]", ".", "value", "\n", "]", ")", ".", "concatenate", "(", "x_static_shape", "[", "2", ":", "]", ")", ")", "\n", "return", "x_t", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.decoder.MLP.forward": [[78, 80], ["decoder.MLP.feat2output().squeeze", "decoder.MLP.feat2output", "torch.relu", "torch.relu", "torch.relu", "decoder.MLP.input2feat"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.relu", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.relu", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.relu"], ["\n", "\n", "", "@", "six", ".", "add_metaclass", "(", "abc", ".", "ABCMeta", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.decoder.Decoder.__init__": [[87, 145], ["super().__init__", "tensor2struct.modules.attention.BahdanauAttention", "tensor2struct.modules.embedders.LookupEmbeddings", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "tensor2struct.modules.lstm.UniLSTM", "decoder.MLP", "tensor2struct.modules.lstm.UniLSTM", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["raise", "NotImplementedError", "\n", "\n", "", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "    ", "\"\"\"A (possibly nested tuple of...) integer[s] or `TensorShape` object[s].\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n", "", "@", "property", "\n", "def", "output_dtype", "(", "self", ")", ":", "\n", "    ", "\"\"\"A (possibly nested tuple of...) dtype[s].\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n", "", "@", "abc", ".", "abstractmethod", "\n", "def", "initialize", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Called before any decoding iterations.\n\n    Args:\n      name: Name scope for any created operations.\n\n    Returns:\n      `(finished, first_inputs, initial_state)`.\n    \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n", "", "@", "abc", ".", "abstractmethod", "\n", "def", "step", "(", "self", ",", "time", ",", "inputs", ",", "state", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Called per step of decoding (but only once for dynamic decoding).\n\n    Args:\n      time: Scalar `int32` tensor.\n      inputs: Input (possibly nested tuple of) tensor[s] for this time step.\n      state: State (possibly nested tuple of) tensor[s] from previous time step.\n      name: Name scope for any created operations.\n\n    Returns:\n      `(outputs, next_state, next_inputs, finished)`.\n    \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n", "\n", "", "", "def", "_create_zero_outputs", "(", "size", ",", "dtype", ",", "batch_size", ")", ":", "\n", "  ", "\"\"\"Create a zero outputs Tensor structure.\"\"\"", "\n", "def", "_t", "(", "s", ")", ":", "\n", "    ", "return", "(", "s", "if", "isinstance", "(", "s", ",", "ops", ".", "Tensor", ")", "else", "constant_op", ".", "constant", "(", "\n", "tensor_shape", ".", "TensorShape", "(", "s", ")", ".", "as_list", "(", ")", ",", "\n", "dtype", "=", "dtypes", ".", "int32", ",", "\n", "name", "=", "\"zero_suffix_shape\"", ")", ")", "\n", "\n", "", "def", "_create", "(", "s", ",", "d", ")", ":", "\n", "    ", "return", "array_ops", ".", "zeros", "(", "\n", "array_ops", ".", "concat", "(", "\n", "(", "[", "batch_size", "]", ",", "_t", "(", "s", ")", ")", ",", "axis", "=", "0", ")", ",", "dtype", "=", "d", ")", "\n", "\n", "", "return", "nest", ".", "map_structure", "(", "_create", ",", "size", ",", "dtype", ")", "\n", "\n", "\n", "", "def", "dynamic_decode", "(", "decoder", ",", "\n", "output_time_major", "=", "False", ",", "\n", "impute_finished", "=", "False", ",", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.decoder.Decoder.forward": [[147, 156], ["decoder.Decoder.compute_loss", "decoder.Decoder.begin_inference"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_loss", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.begin_inference"], ["parallel_iterations", "=", "32", ",", "\n", "swap_memory", "=", "False", ",", "\n", "scope", "=", "None", ")", ":", "\n", "  "]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.decoder.Decoder.compute_loss": [[157, 167], ["decoder.Decoder.compute_loss_with_input_feeding", "decoder.Decoder.compute_loss_without_input_feeding"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.Decoder.compute_loss_with_input_feeding", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.Decoder.compute_loss_without_input_feeding"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.decoder.Decoder.compute_loss_without_input_feeding": [[168, 187], ["decoder.Decoder.embedder", "decoder.Decoder.lstm", "decoder.Decoder.select", "decoder.Decoder.desc_attn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder.Decoder.score_action", "decoder.Decoder.obtain_gold_action", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "enc_output.src_memory.expand", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.select", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.tagging_decoder.TaggingDecoder.obtain_gold_action", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.expand"], ["\n", "if", "not", "isinstance", "(", "decoder", ",", "Decoder", ")", ":", "\n", "    ", "raise", "TypeError", "(", "\"Expected decoder to be type Decoder, but saw: %s\"", "%", "\n", "type", "(", "decoder", ")", ")", "\n", "\n", "", "with", "variable_scope", ".", "variable_scope", "(", "scope", "or", "\"decoder\"", ")", "as", "varscope", ":", "\n", "# Properly cache variable values inside the while_loop", "\n", "    ", "if", "varscope", ".", "caching_device", "is", "None", ":", "\n", "      ", "varscope", ".", "set_caching_device", "(", "lambda", "op", ":", "op", ".", "device", ")", "\n", "\n", "", "if", "maximum_iterations", "is", "not", "None", ":", "\n", "      ", "maximum_iterations", "=", "ops", ".", "convert_to_tensor", "(", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.decoder.Decoder.compute_loss_with_input_feeding": [[188, 216], ["decoder.Decoder.embedder", "lstm_cell.set_dropout_masks", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "enumerate", "sum", "decoder.Decoder.ps.data[].unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lstm_cell", "decoder.Decoder.desc_attn", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "decoder.Decoder.vocab.index", "losses.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "decoder.Decoder.feat2hidden", "decoder.Decoder.hidden2action", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.RecurrentDropoutLSTMCell.set_dropout_masks", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["maximum_iterations", ",", "dtype", "=", "dtypes", ".", "int32", ",", "name", "=", "\"maximum_iterations\"", ")", "\n", "if", "maximum_iterations", ".", "get_shape", "(", ")", ".", "ndims", "!=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"maximum_iterations must be a scalar\"", ")", "\n", "\n", "", "", "initial_finished", ",", "initial_inputs", ",", "initial_state", "=", "decoder", ".", "initialize", "(", ")", "\n", "\n", "zero_outputs", "=", "_create_zero_outputs", "(", "decoder", ".", "output_size", ",", "\n", "decoder", ".", "output_dtype", ",", "\n", "decoder", ".", "batch_size", ")", "\n", "\n", "if", "maximum_iterations", "is", "not", "None", ":", "\n", "      ", "initial_finished", "=", "math_ops", ".", "logical_or", "(", "\n", "initial_finished", ",", "0", ">=", "maximum_iterations", ")", "\n", "", "initial_time", "=", "constant_op", ".", "constant", "(", "0", ",", "dtype", "=", "dtypes", ".", "int32", ")", "\n", "\n", "def", "_shape", "(", "batch_size", ",", "from_shape", ")", ":", "\n", "      ", "if", "not", "isinstance", "(", "from_shape", ",", "tensor_shape", ".", "TensorShape", ")", ":", "\n", "        ", "return", "tensor_shape", ".", "TensorShape", "(", "None", ")", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "tensor_util", ".", "constant_value", "(", "\n", "ops", ".", "convert_to_tensor", "(", "\n", "batch_size", ",", "name", "=", "\"batch_size\"", ")", ")", "\n", "return", "tensor_shape", ".", "TensorShape", "(", "[", "batch_size", "]", ")", ".", "concatenate", "(", "from_shape", ")", "\n", "\n", "", "", "def", "_create_ta", "(", "s", ",", "d", ")", ":", "\n", "      ", "return", "tensor_array_ops", ".", "TensorArray", "(", "\n", "dtype", "=", "d", ",", "\n", "size", "=", "0", ",", "\n", "dynamic_size", "=", "True", ",", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.decoder.Decoder.obtain_gold_action": [[217, 221], ["torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "decoder.Decoder.vocab.index", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["element_shape", "=", "_shape", "(", "decoder", ".", "batch_size", ",", "s", ")", ")", "\n", "\n", "", "initial_outputs_ta", "=", "nest", ".", "map_structure", "(", "_create_ta", ",", "decoder", ".", "output_size", ",", "\n", "decoder", ".", "output_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.decoder.Decoder.begin_inference": [[222, 226], ["decoder.Inference", "decoder.Inference.step"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step"], ["def", "condition", "(", "unused_time", ",", "unused_outputs_ta", ",", "unused_state", ",", "unused_inputs", ",", "\n", "finished", ")", ":", "\n", "      ", "return", "math_ops", ".", "logical_not", "(", "math_ops", ".", "reduce_all", "(", "finished", ")", ")", "\n", "\n", "", "def", "body", "(", "time", ",", "outputs_ta", ",", "state", ",", "inputs", ",", "finished", ")", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.decoder.Decoder.record": [[227, 253], ["decoder.Decoder.embedder", "lstm_cell.set_dropout_masks", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "enumerate", "list", "decoder.Decoder.vocab.index", "decoder.Decoder.ps.data[].unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lstm_cell", "decoder.Decoder.desc_attn", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "h_input_lists.append", "zip", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "decoder.Decoder.feat2hidden", "torch.tanh.squeeze", "torch.tanh.squeeze", "torch.tanh.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.RecurrentDropoutLSTMCell.set_dropout_masks", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["      ", "\"\"\"Internal while_loop body.\n\n      Args:\n        time: scalar int32 tensor.\n        outputs_ta: structure of TensorArray.\n        state: (structure of) state tensors and TensorArrays.\n        inputs: (structure of) input tensors.\n        finished: 1-D bool tensor.\n\n      Returns:\n        `(time + 1, outputs_ta, next_state, next_inputs, next_finished)`.\n      \"\"\"", "\n", "(", "next_outputs", ",", "decoder_state", ",", "next_inputs", ",", "\n", "decoder_finished", ")", "=", "decoder", ".", "step", "(", "time", ",", "inputs", ",", "state", ")", "\n", "next_finished", "=", "math_ops", ".", "logical_or", "(", "decoder_finished", ",", "finished", ")", "\n", "if", "maximum_iterations", "is", "not", "None", ":", "\n", "        ", "next_finished", "=", "math_ops", ".", "logical_or", "(", "\n", "next_finished", ",", "time", "+", "1", ">=", "maximum_iterations", ")", "\n", "\n", "", "nest", ".", "assert_same_structure", "(", "state", ",", "decoder_state", ")", "\n", "nest", ".", "assert_same_structure", "(", "outputs_ta", ",", "next_outputs", ")", "\n", "nest", ".", "assert_same_structure", "(", "inputs", ",", "next_inputs", ")", "\n", "\n", "# Zero out output values past finish", "\n", "if", "impute_finished", ":", "\n", "        ", "emit", "=", "nest", ".", "map_structure", "(", "\n", "lambda", "out", ",", "zero", ":", "array_ops", ".", "where", "(", "finished", ",", "zero", ",", "out", ")", ",", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.decoder.Inference.__init__": [[256, 275], ["decoder.Inference.rnn_cell.set_dropout_masks", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "pyrsistent.pvector", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.RecurrentDropoutLSTMCell.set_dropout_masks", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["", "else", ":", "\n", "        ", "emit", "=", "next_outputs", "\n", "\n", "# Copy through states past finish", "\n", "", "def", "_maybe_copy_state", "(", "new", ",", "cur", ")", ":", "\n", "# TensorArrays and scalar states get passed through.", "\n", "        ", "if", "isinstance", "(", "cur", ",", "tensor_array_ops", ".", "TensorArray", ")", ":", "\n", "          ", "pass_through", "=", "True", "\n", "", "else", ":", "\n", "          ", "new", ".", "set_shape", "(", "cur", ".", "shape", ")", "\n", "pass_through", "=", "(", "new", ".", "shape", ".", "ndims", "==", "0", ")", "\n", "", "return", "new", "if", "pass_through", "else", "array_ops", ".", "where", "(", "finished", ",", "cur", ",", "new", ")", "\n", "\n", "", "if", "impute_finished", ":", "\n", "        ", "next_state", "=", "nest", ".", "map_structure", "(", "\n", "_maybe_copy_state", ",", "decoder_state", ",", "state", ")", "\n", "", "else", ":", "\n", "        ", "next_state", "=", "decoder_state", "\n", "\n", "", "outputs_ta", "=", "nest", ".", "map_structure", "(", "lambda", "ta", ",", "out", ":", "ta", ".", "write", "(", "time", ",", "out", ")", ",", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.decoder.Inference.clone": [[276, 290], ["decoder.Inference.__class__"], "methods", ["None"], ["outputs_ta", ",", "emit", ")", "\n", "return", "(", "time", "+", "1", ",", "outputs_ta", ",", "next_state", ",", "next_inputs", ",", "next_finished", ")", "\n", "\n", "", "res", "=", "control_flow_ops", ".", "while_loop", "(", "\n", "condition", ",", "\n", "body", ",", "\n", "loop_vars", "=", "[", "\n", "initial_time", ",", "initial_outputs_ta", ",", "initial_state", ",", "initial_inputs", ",", "\n", "initial_finished", "\n", "]", ",", "\n", "parallel_iterations", "=", "parallel_iterations", ",", "\n", "swap_memory", "=", "swap_memory", ")", "\n", "\n", "final_outputs_ta", "=", "res", "[", "1", "]", "\n", "final_state", "=", "res", "[", "2", "]", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.decoder.Inference.step": [[291, 296], ["decoder.Inference.step_with_input_feed", "decoder.Inference.step_without_input_feed"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.BatchedInference.step_with_input_feed", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.BatchedInference.step_without_input_feed"], ["\n", "final_outputs", "=", "nest", ".", "map_structure", "(", "lambda", "ta", ":", "ta", ".", "stack", "(", ")", ",", "final_outputs_ta", ")", "\n", "if", "not", "output_time_major", ":", "\n", "      ", "final_outputs", "=", "nest", ".", "map_structure", "(", "_transpose_batch_time", ",", "final_outputs", ")", "\n", "\n", "", "", "return", "final_outputs", ",", "final_state", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.decoder.Inference.step_without_input_feed": [[297, 316], ["decoder.Inference.actions.append", "decoder.Inference.embedder._embed_token", "decoder.Inference.rnn_cell", "decoder.Inference.model.desc_attn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "decoder.Inference.model.score_action", "range", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.LookupEmbeddings._embed_token"], ["", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.decoder.Inference.step_with_input_feed": [[317, 342], ["decoder.Inference.actions.append", "decoder.Inference.embedder._embed_token().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder.Inference.rnn_cell", "decoder.Inference.model.desc_attn", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.log_softmax().squeeze", "torch.log_softmax().squeeze", "torch.log_softmax().squeeze", "decoder.Inference.model.feat2hidden", "decoder.Inference.embedder._embed_token", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "range", "decoder.Inference.model.hidden2action", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.LookupEmbeddings._embed_token"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.decoder.Inference.finalize": [[343, 347], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.tagging_decoder.MLP.__init__": [[23, 27], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "output_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input2feat", "=", "nn", ".", "Linear", "(", "input_size", ",", "hidden_size", ")", "\n", "self", ".", "feat2output", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.tagging_decoder.MLP.forward": [[28, 30], ["tagging_decoder.MLP.feat2output().squeeze", "tagging_decoder.MLP.feat2output", "torch.relu", "torch.relu", "torch.relu", "tagging_decoder.MLP.input2feat"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.relu", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.relu", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.relu"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "feat2output", "(", "F", ".", "relu", "(", "self", ".", "input2feat", "(", "x", ")", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.tagging_decoder.TaggingPreproc.add_item": [[33, 41], ["tagging_decoder.TaggingPreproc.items[].append", "tagging_decoder.TaggingPreproc.vocab_builder.add_word"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.add_word"], ["    ", "def", "add_item", "(", "self", ",", "item", ",", "section", ",", "validation_info", ")", ":", "\n", "        ", "actions", "=", "item", ".", "tgt", "\n", "\n", "if", "section", "==", "\"train\"", ":", "\n", "            ", "for", "action", "in", "actions", ":", "\n", "                ", "self", ".", "vocab_builder", ".", "add_word", "(", "action", ")", "\n", "\n", "", "", "self", ".", "items", "[", "section", "]", ".", "append", "(", "{", "\"actions\"", ":", "actions", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.tagging_decoder.TaggingDecoder.__init__": [[52, 66], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "tagging_decoder.MLP", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "device", ",", "preproc", ",", "enc_recurrent_size", "=", "256", ",", "score_f", "=", "\"linear\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "preproc", "=", "preproc", "\n", "self", ".", "vocab", "=", "preproc", ".", "vocab", "\n", "self", ".", "enc_recurrent_size", "=", "enc_recurrent_size", "\n", "\n", "if", "score_f", "==", "\"linear\"", ":", "\n", "# use Linear layer instead of MLP results to a convex loss function", "\n", "            ", "self", ".", "score_f", "=", "torch", ".", "nn", ".", "Linear", "(", "enc_recurrent_size", ",", "len", "(", "self", ".", "vocab", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "score_f", "==", "\"mlp\"", "\n", "self", ".", "score_f", "=", "MLP", "(", "\n", "enc_recurrent_size", ",", "enc_recurrent_size", "*", "2", ",", "len", "(", "self", ".", "vocab", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.tagging_decoder.TaggingDecoder.forward": [[68, 79], ["tagging_decoder.TaggingDecoder.compute_loss", "enc_state.src_memory.squeeze_", "tagging_decoder.TaggingDecoder.begin_inference"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_loss", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.begin_inference"], ["", "", "def", "forward", "(", "self", ",", "dec_batch", ",", "enc_state", ",", "compute_loss", "=", "True", ",", "infer", "=", "False", ")", ":", "\n", "        ", "ret_dic", "=", "{", "}", "\n", "if", "compute_loss", ":", "\n", "            ", "ret_dic", "[", "\"loss\"", "]", "=", "self", ".", "compute_loss", "(", "dec_batch", ",", "enc_state", ")", "\n", "", "if", "infer", ":", "\n", "            ", "dec_item", "=", "dec_batch", "# by default, inference model is with bs 1", "\n", "enc_state", ".", "src_memory", ".", "squeeze_", "(", "0", ")", "# enc_state is 1 * seq_len * hidden_size", "\n", "traversal", ",", "initial_choices", "=", "self", ".", "begin_inference", "(", "dec_item", ",", "enc_state", ")", "\n", "ret_dic", "[", "\"initial_state\"", "]", "=", "traversal", "\n", "ret_dic", "[", "\"initial_choices\"", "]", "=", "initial_choices", "\n", "", "return", "ret_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.tagging_decoder.TaggingDecoder.compute_loss": [[80, 95], ["len", "tagging_decoder.TaggingDecoder.obtain_gold_action", "tagging_decoder.TaggingDecoder.score_f", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "len", "tagging_decoder.TaggingDecoder.view", "tagging_decoder.TaggingDecoder.view", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.tagging_decoder.TaggingDecoder.obtain_gold_action"], ["", "def", "compute_loss", "(", "self", ",", "dec_batch", ",", "enc_state", ")", ":", "\n", "        ", "bs", "=", "len", "(", "dec_batch", ")", "\n", "src_memory", "=", "enc_state", ".", "src_memory", "\n", "ignore_index", "=", "len", "(", "self", ".", "vocab", ")", "+", "1", "\n", "gold", "=", "self", ".", "obtain_gold_action", "(", "dec_batch", ",", "ignore_index", "=", "ignore_index", ")", "\n", "logits", "=", "self", ".", "score_f", "(", "src_memory", ")", "\n", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "\n", "logits", ".", "view", "(", "-", "1", ",", "len", "(", "self", ".", "vocab", ")", ")", ",", "\n", "gold", ".", "view", "(", "-", "1", ")", ",", "\n", "reduction", "=", "\"sum\"", ",", "\n", "ignore_index", "=", "ignore_index", ",", "\n", ")", "\n", "loss", "=", "loss", "/", "bs", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.tagging_decoder.TaggingDecoder.obtain_gold_action": [[96, 109], ["max", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "res_list.append", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "tagging_decoder.TaggingDecoder.vocab.index", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["", "def", "obtain_gold_action", "(", "self", ",", "dec_batch", ",", "ignore_index", ")", ":", "\n", "        ", "actions_list", "=", "[", "dec_item", "[", "\"actions\"", "]", "for", "dec_item", "in", "dec_batch", "]", "\n", "max_len", "=", "max", "(", "len", "(", "al", ")", "for", "al", "in", "actions_list", ")", "\n", "\n", "res_list", "=", "[", "]", "\n", "for", "al", "in", "actions_list", ":", "\n", "            ", "action_ids", "=", "[", "self", ".", "vocab", ".", "index", "(", "a", ")", "for", "a", "in", "al", "]", "+", "[", "ignore_index", "]", "*", "(", "\n", "max_len", "-", "len", "(", "al", ")", "\n", ")", "\n", "al_t", "=", "torch", ".", "LongTensor", "(", "action_ids", ")", "\n", "res_list", ".", "append", "(", "al_t", ")", "\n", "", "res", "=", "torch", ".", "stack", "(", "res_list", ",", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.tagging_decoder.TaggingDecoder.begin_inference": [[110, 119], ["torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "tagging_decoder.Inference", "tagging_decoder.Inference.step", "tagging_decoder.TaggingDecoder.score_f"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step"], ["", "def", "begin_inference", "(", "self", ",", "dec_item", ",", "enc_output", ")", ":", "\n", "        ", "\"\"\"\n        In inference mode, inputs are not batched\n        For batched inference, use \"python experiments/permutation/run.py eval_aligned configfile\" for now\n        \"\"\"", "\n", "logits", "=", "F", ".", "log_softmax", "(", "self", ".", "score_f", "(", "enc_output", ".", "src_memory", ")", ",", "dim", "=", "1", ")", "\n", "inferer", "=", "Inference", "(", "self", ",", "logits", ")", "\n", "choices", "=", "inferer", ".", "step", "(", ")", "\n", "return", "inferer", ",", "choices", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.tagging_decoder.Inference.__init__": [[122, 132], ["pyrsistent.pvector"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "logits", ")", ":", "\n", "        ", "if", "model", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "self", ".", "model", "=", "model", "\n", "self", ".", "logits", "=", "logits", "\n", "self", ".", "vocab", "=", "model", ".", "vocab", "\n", "\n", "self", ".", "decode_idx", "=", "0", "\n", "self", ".", "actions", "=", "pyrsistent", ".", "pvector", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.tagging_decoder.Inference.clone": [[133, 142], ["tagging_decoder.Inference.__class__"], "methods", ["None"], ["", "def", "clone", "(", "self", ")", ":", "\n", "        ", "other", "=", "self", ".", "__class__", "(", "None", ",", "None", ")", "\n", "other", ".", "model", "=", "self", ".", "model", "\n", "other", ".", "vocab", "=", "self", ".", "vocab", "\n", "other", ".", "logits", "=", "self", ".", "logits", "\n", "\n", "other", ".", "actions", "=", "self", ".", "actions", "\n", "other", ".", "decode_idx", "=", "self", ".", "decode_idx", "\n", "return", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.tagging_decoder.Inference.step": [[143, 155], ["tagging_decoder.Inference.actions.append", "tagging_decoder.Inference.logits.size", "range", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size"], ["", "def", "step", "(", "self", ",", "action", "=", "None", ")", ":", "\n", "        ", "if", "action", "is", "not", "None", ":", "\n", "            ", "self", ".", "actions", "=", "self", ".", "actions", ".", "append", "(", "action", ")", "\n", "\n", "# last word", "\n", "", "num_tokens", "=", "self", ".", "logits", ".", "size", "(", ")", "[", "0", "]", "\n", "if", "self", ".", "decode_idx", ">=", "num_tokens", "-", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "scores", "=", "self", ".", "logits", "[", "self", ".", "decode_idx", "]", "\n", "self", ".", "decode_idx", "+=", "1", "\n", "return", "[", "(", "self", ".", "vocab", "[", "i", "]", ",", "scores", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "vocab", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.tagging_decoder.Inference.finalize": [[156, 160], ["None"], "methods", ["None"], ["", "def", "finalize", "(", "self", ")", ":", "\n", "        ", "res_actions", "=", "[", "a", "for", "a", "in", "self", ".", "actions", "]", "\n", "code", "=", "\" \"", ".", "join", "(", "res_actions", ")", "\n", "return", "res_actions", ",", "code", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.Decoder.__init__": [[53, 124], ["super().__init__", "tensor2struct.modules.attention.BahdanauAttention", "tensor2struct.modules.embedders.LookupEmbeddings", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "tensor2struct.modules.lstm.UniLSTM", "torch.Linear", "torch.Linear", "torch.Linear", "tensor2struct.modules.lstm.UniLSTM", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "device", ",", "\n", "preproc", ",", "\n", "action_emb_size", ",", "\n", "desc_attn", "=", "\"bahdanau\"", ",", "\n", "enc_recurrent_size", "=", "256", ",", "\n", "recurrent_size", "=", "256", ",", "\n", "dropout", "=", "0.1", ",", "\n", "input_feed", "=", "True", ",", "\n", "tie_weights", "=", "False", ",", "\n", "layernorm", "=", "False", ",", "\n", "label_smooth", "=", "0.0", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "preproc", "=", "preproc", "\n", "self", ".", "vocab", "=", "preproc", ".", "vocab", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "action_emb_size", "=", "action_emb_size", "\n", "self", ".", "enc_recurrent_size", "=", "enc_recurrent_size", "\n", "self", ".", "recurrent_size", "=", "recurrent_size", "\n", "self", ".", "input_feed", "=", "input_feed", "\n", "self", ".", "tie_weights", "=", "tie_weights", "\n", "self", ".", "label_smooth", "=", "label_smooth", "\n", "self", ".", "layernorm", "=", "layernorm", "\n", "\n", "# attention", "\n", "self", ".", "attn_type", "=", "desc_attn", "\n", "self", ".", "desc_attn", "=", "attention", ".", "BahdanauAttention", "(", "\n", "query_size", "=", "self", ".", "recurrent_size", ",", "\n", "value_size", "=", "self", ".", "enc_recurrent_size", ",", "\n", "proj_size", "=", "50", ",", "\n", ")", "\n", "self", ".", "embedder", "=", "embedders", ".", "LookupEmbeddings", "(", "\n", "device", "=", "self", ".", "_device", ",", "\n", "vocab", "=", "self", ".", "vocab", ",", "\n", "embedder", "=", "None", ",", "\n", "emb_size", "=", "self", ".", "action_emb_size", ",", "\n", "learnable_words", "=", "None", ",", "\n", ")", "\n", "\n", "if", "self", ".", "input_feed", ":", "\n", "            ", "self", ".", "h_input_size", "=", "recurrent_size", "\n", "self", ".", "feat2hidden", "=", "nn", ".", "Linear", "(", "\n", "enc_recurrent_size", "+", "recurrent_size", ",", "self", ".", "h_input_size", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "hidden2action", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "h_input_size", ",", "len", "(", "self", ".", "vocab", ")", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "lstm", "=", "lstm", ".", "UniLSTM", "(", "\n", "input_size", "=", "self", ".", "action_emb_size", "+", "self", ".", "h_input_size", ",", "\n", "hidden_size", "=", "recurrent_size", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "layernorm", "=", "self", ".", "layernorm", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "h_input_size", "=", "recurrent_size", "\n", "self", ".", "hidden2action", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "h_input_size", ",", "len", "(", "self", ".", "vocab", ")", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "lstm", "=", "lstm", ".", "UniLSTM", "(", "\n", "input_size", "=", "self", ".", "action_emb_size", ",", "\n", "hidden_size", "=", "recurrent_size", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "layernorm", "=", "self", ".", "layernorm", ",", "\n", ")", "\n", "\n", "", "if", "tie_weights", ":", "\n", "            ", "self", ".", "hidden2action", ".", "weight", "=", "self", ".", "embedder", ".", "embedding", ".", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.Decoder.forward": [[125, 136], ["batched_decoder.Decoder.compute_loss", "batched_decoder.Decoder.begin_batched_inference"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_loss", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.BatchedEncDecModel.begin_batched_inference"], ["", "", "def", "forward", "(", "self", ",", "dec_input", ",", "enc_output", ",", "compute_loss", "=", "True", ",", "infer", "=", "False", ")", ":", "\n", "        ", "ret_dic", "=", "{", "}", "\n", "if", "compute_loss", ":", "\n", "            ", "ret_dic", "[", "\"loss\"", "]", "=", "self", ".", "compute_loss", "(", "dec_input", ",", "enc_output", ")", "\n", "", "if", "infer", ":", "\n", "            ", "traversal", ",", "initial_choices_list", "=", "self", ".", "begin_batched_inference", "(", "\n", "dec_input", ",", "enc_output", "\n", ")", "\n", "ret_dic", "[", "\"initial_state\"", "]", "=", "traversal", "\n", "ret_dic", "[", "\"initial_choices_list\"", "]", "=", "initial_choices_list", "\n", "", "return", "ret_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.Decoder.compute_loss": [[137, 143], ["batched_decoder.Decoder.compute_loss_with_input_feeding", "batched_decoder.Decoder.compute_loss_without_input_feeding"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.Decoder.compute_loss_with_input_feeding", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.Decoder.compute_loss_without_input_feeding"], ["", "def", "compute_loss", "(", "self", ",", "dec_input", ",", "enc_output", ")", ":", "\n", "        ", "if", "self", ".", "input_feed", ":", "\n", "            ", "loss", "=", "self", ".", "compute_loss_with_input_feeding", "(", "dec_input", ",", "enc_output", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "self", ".", "compute_loss_without_input_feeding", "(", "dec_input", ",", "enc_output", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.Decoder.compute_loss_without_input_feeding": [[144, 168], ["logger.warn", "batched_decoder.Decoder.embedder", "batched_decoder.Decoder.lstm", "batched_decoder.Decoder.desc_attn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "batched_decoder.Decoder.score_action", "batched_decoder.Decoder.obtain_gold_action", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "enc_output.src_memory.expand", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.tagging_decoder.TaggingDecoder.obtain_gold_action", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.expand"], ["", "def", "compute_loss_without_input_feeding", "(", "self", ",", "dec_input", ",", "enc_output", ")", ":", "\n", "        ", "\"\"\"\n        TODO: haven't test this function yet\n        \"\"\"", "\n", "logger", ".", "warn", "(", "\"Decoder without input feeding has not been tested\"", ")", "\n", "\n", "input_actions", "=", "[", "item", "[", "\"actions\"", "]", "[", ":", "-", "1", "]", "for", "item", "in", "dec_input", "]", "\n", "embed", "=", "self", ".", "embedder", "(", "input_actions", ")", "\n", "init_hidden", "=", "enc_output", ".", "src_summary", "\n", "dec_rep_packed", ",", "_", "=", "self", ".", "lstm", "(", "embed", ".", "ps", ",", "hidden_state", "=", "(", "init_hidden", ",", "init_hidden", ")", ")", "\n", "dec_rep", "=", "dec_rep_packed", ".", "data", "\n", "\n", "# attention", "\n", "context", ",", "_", "=", "self", ".", "desc_attn", "(", "\n", "dec_rep", ",", "enc_output", ".", "src_memory", ".", "expand", "(", "len", "(", "input_actions", ")", ",", "-", "1", ",", "-", "1", ")", ",", "\n", ")", "\n", "feat", "=", "torch", ".", "cat", "(", "[", "dec_rep", ",", "context", "]", ",", "dim", "=", "1", ")", "\n", "logits", "=", "self", ".", "score_action", "(", "feat", ")", "\n", "\n", "ignore_index", "=", "len", "(", "self", ".", "vocab", ")", "+", "1", "\n", "gold", "=", "self", ".", "obtain_gold_action", "(", "input_actions", ",", "ignore_index", "=", "1", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "gold", ",", "reduction", "=", "\"sum\"", ",", "ignore_index", "=", "ignore_index", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.Decoder.compute_loss_with_input_feeding": [[169, 224], ["batched_decoder.Decoder.embedder", "batched_decoder.Decoder.pad", "len", "lstm_cell.set_dropout_masks", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "embed_batched.transpose", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "batched_decoder.Decoder.vocab.index", "batched_decoder.Decoder.actions_list_to_idx", "len", "max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lstm_cell", "batched_decoder.Decoder.desc_attn", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "logits_list.append", "batched_decoder.label_smoothed_nll_loss", "sum", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "batched_decoder.Decoder.feat2hidden", "batched_decoder.Decoder.hidden2action", "torch.log_softmax.view", "torch.log_softmax.view", "torch.log_softmax.view", "batched_decoder.Decoder.view", "torch.log_softmax.view", "torch.log_softmax.view", "torch.log_softmax.view", "batched_decoder.Decoder.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.pad", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.RecurrentDropoutLSTMCell.set_dropout_masks", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.TransformerDecoder.actions_list_to_idx", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.label_smoothed_nll_loss"], ["", "def", "compute_loss_with_input_feeding", "(", "self", ",", "dec_input", ",", "enc_output", ")", ":", "\n", "        ", "input_actions", "=", "[", "item", "[", "\"actions\"", "]", "[", ":", "-", "1", "]", "for", "item", "in", "dec_input", "]", "\n", "embed_packed", "=", "self", ".", "embedder", "(", "input_actions", ")", "\n", "embed_batched", ",", "tgt_lengths", "=", "embed_packed", ".", "pad", "(", "batch_first", "=", "True", ")", "\n", "\n", "bs", "=", "len", "(", "dec_input", ")", "\n", "init_hidden", "=", "enc_output", ".", "src_summary", "\n", "assert", "len", "(", "self", ".", "lstm", ".", "lstm_cells", ")", "==", "1", "\n", "lstm_cell", "=", "self", ".", "lstm", ".", "lstm_cells", "[", "0", "]", "\n", "lstm_cell", ".", "set_dropout_masks", "(", "batch_size", "=", "bs", ")", "\n", "\n", "h_input", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "self", ".", "h_input_size", "]", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "recurrent_state", "=", "(", "init_hidden", ",", "init_hidden", ")", "\n", "embed_batch_second", "=", "embed_batched", ".", "transpose", "(", "0", ",", "1", ")", "\n", "logits_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "max", "(", "tgt_lengths", ")", ")", ":", "\n", "            ", "embed", "=", "embed_batch_second", "[", "i", "]", "\n", "_input", "=", "torch", ".", "cat", "(", "[", "embed", ",", "h_input", "]", ",", "dim", "=", "1", ")", "\n", "recurrent_state", "=", "lstm_cell", "(", "_input", ",", "recurrent_state", ")", "\n", "h", "=", "recurrent_state", "[", "0", "]", "\n", "c", ",", "_", "=", "self", ".", "desc_attn", "(", "h", ",", "enc_output", ".", "src_memory", ")", "\n", "\n", "h_input", "=", "torch", ".", "tanh", "(", "self", ".", "feat2hidden", "(", "torch", ".", "cat", "(", "[", "c", ",", "h", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "logits", "=", "torch", ".", "log_softmax", "(", "self", ".", "hidden2action", "(", "h_input", ")", ",", "dim", "=", "1", ")", "\n", "logits_list", ".", "append", "(", "logits", ")", "\n", "\n", "", "logits", "=", "torch", ".", "stack", "(", "logits_list", ",", "dim", "=", "1", ")", "# bs * seq_len * vocab_len", "\n", "ignore_index", "=", "self", ".", "vocab", ".", "index", "(", "vocab", ".", "BOS", ")", "\n", "target_actions", "=", "[", "item", "[", "\"actions\"", "]", "[", "1", ":", "]", "for", "item", "in", "dec_input", "]", "\n", "target_idx", "=", "self", ".", "actions_list_to_idx", "(", "target_actions", ",", "ignore_index", ")", "\n", "\n", "# TODO: make token_nll and seq_nll more explicit", "\n", "if", "self", ".", "label_smooth", ">", "0", ":", "\n", "            ", "smooth_loss", ",", "nll_loss", "=", "label_smoothed_nll_loss", "(", "\n", "logits", ".", "view", "(", "-", "1", ",", "len", "(", "self", ".", "vocab", ")", ")", ",", "\n", "target_idx", ".", "view", "(", "-", "1", ")", ",", "\n", "self", ".", "label_smooth", ",", "\n", "ignore_index", "=", "ignore_index", ",", "\n", ")", "\n", "\n", "num_tgts", "=", "sum", "(", "tgt_lengths", ")", "\n", "if", "self", ".", "training", ":", "\n", "                ", "loss", "=", "smooth_loss", "/", "num_tgts", "\n", "", "else", ":", "\n", "                ", "loss", "=", "nll_loss", "/", "num_tgts", "\n", "", "", "else", ":", "\n", "            ", "sum_loss", "=", "F", ".", "cross_entropy", "(", "\n", "logits", ".", "view", "(", "-", "1", ",", "len", "(", "self", ".", "vocab", ")", ")", ",", "\n", "target_idx", ".", "view", "(", "-", "1", ")", ",", "\n", "reduction", "=", "\"sum\"", ",", "\n", "ignore_index", "=", "ignore_index", ",", "\n", ")", "\n", "loss", "=", "sum_loss", "/", "bs", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.Decoder.actions_list_to_idx": [[225, 239], ["max", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "res_list.append", "len", "batched_decoder.Decoder.vocab.index", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["", "def", "actions_list_to_idx", "(", "self", ",", "actions_list", ",", "ignore_index", ")", ":", "\n", "        ", "max_len", "=", "max", "(", "len", "(", "al", ")", "for", "al", "in", "actions_list", ")", "\n", "\n", "res_list", "=", "[", "]", "\n", "for", "al", "in", "actions_list", ":", "\n", "            ", "true_action_ids", "=", "[", "self", ".", "vocab", ".", "index", "(", "a", ")", "for", "a", "in", "al", "]", "\n", "assert", "ignore_index", "not", "in", "true_action_ids", "\n", "action_ids", "=", "true_action_ids", "+", "[", "ignore_index", "]", "*", "(", "\n", "max_len", "-", "len", "(", "al", ")", "\n", ")", "\n", "al_t", "=", "torch", ".", "LongTensor", "(", "action_ids", ")", "\n", "res_list", ".", "append", "(", "al_t", ")", "\n", "", "res", "=", "torch", ".", "stack", "(", "res_list", ",", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.Decoder.begin_batched_inference": [[240, 244], ["batched_decoder.BatchedInference", "batched_decoder.BatchedInference.step"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step"], ["", "def", "begin_batched_inference", "(", "self", ",", "orig_item", ",", "enc_state", ")", ":", "\n", "        ", "inferer", "=", "BatchedInference", "(", "self", ",", "enc_state", ")", "\n", "choices", "=", "inferer", ".", "step", "(", ")", "\n", "return", "inferer", ",", "choices", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.Decoder.begin_inference": [[245, 249], ["tensor2struct.models.decoder.Inference", "tensor2struct.models.decoder.Inference.step"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step"], ["", "def", "begin_inference", "(", "self", ",", "orig_item", ",", "enc_state", ")", ":", "\n", "        ", "inferer", "=", "decoder", ".", "Inference", "(", "self", ",", "enc_state", ")", "\n", "choices", "=", "inferer", ".", "step", "(", ")", "\n", "return", "inferer", ",", "choices", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.BatchedInference.__init__": [[254, 274], ["batched_decoder.BatchedInference.rnn_cell.set_dropout_masks", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "batched_decoder.BatchedInference.src_memory.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "pyrsistent.pvector"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.RecurrentDropoutLSTMCell.set_dropout_masks", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size"], ["def", "__init__", "(", "self", ",", "model", ",", "enc_output", ")", ":", "\n", "        ", "if", "model", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "self", ".", "model", "=", "model", "\n", "self", ".", "vocab", "=", "model", ".", "vocab", "\n", "self", ".", "embedder", "=", "model", ".", "embedder", ".", "embedding", "\n", "self", ".", "src_memory", "=", "enc_output", ".", "src_memory", "\n", "self", ".", "_device", "=", "model", ".", "_device", "\n", "\n", "self", ".", "bs", "=", "self", ".", "src_memory", ".", "size", "(", ")", "[", "0", "]", "\n", "self", ".", "rnn_cell", "=", "model", ".", "lstm", ".", "lstm_cells", "[", "0", "]", "\n", "self", ".", "rnn_cell", ".", "set_dropout_masks", "(", "batch_size", "=", "self", ".", "bs", ")", "\n", "\n", "# init state", "\n", "init_hidden", "=", "enc_output", ".", "src_summary", "\n", "self", ".", "recurrent_state", "=", "(", "init_hidden", ",", "init_hidden", ")", "\n", "self", ".", "h_input", "=", "torch", ".", "zeros", "(", "[", "self", ".", "bs", ",", "self", ".", "model", ".", "h_input_size", "]", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n", "self", ".", "actions_list", "=", "[", "pyrsistent", ".", "pvector", "(", ")", "]", "*", "self", ".", "bs", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.BatchedInference.clone": [[275, 290], ["batched_decoder.BatchedInference.__class__"], "methods", ["None"], ["", "def", "clone", "(", "self", ")", ":", "\n", "        ", "other", "=", "self", ".", "__class__", "(", "None", ",", "None", ")", "\n", "other", ".", "model", "=", "self", ".", "model", "\n", "other", ".", "embedder", "=", "self", ".", "embedder", "\n", "other", ".", "rnn_cell", "=", "self", ".", "rnn_cell", "\n", "\n", "other", ".", "vocab", "=", "self", ".", "vocab", "\n", "other", ".", "_device", "=", "self", ".", "_device", "\n", "\n", "other", ".", "bs", "=", "self", ".", "bs", "\n", "other", ".", "src_memory", "=", "self", ".", "src_memory", "\n", "other", ".", "recurrent_state", "=", "self", ".", "recurrent_state", "\n", "other", ".", "h_input", "=", "self", ".", "h_input", "\n", "other", ".", "actions_list", "=", "self", ".", "actions_list", "\n", "return", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.BatchedInference.step": [[291, 296], ["batched_decoder.BatchedInference.step_with_input_feed", "batched_decoder.BatchedInference.step_without_input_feed"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.BatchedInference.step_with_input_feed", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.BatchedInference.step_without_input_feed"], ["", "def", "step", "(", "self", ",", "action", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "model", ".", "input_feed", ":", "\n", "            ", "return", "self", ".", "step_with_input_feed", "(", "action", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "step_without_input_feed", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.BatchedInference.step_without_input_feed": [[297, 299], ["None"], "methods", ["None"], ["", "", "def", "step_without_input_feed", "(", "self", ",", "action", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.BatchedInference.step_with_input_feed": [[300, 337], ["enumerate", "all", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "batched_decoder.BatchedInference.embedder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "batched_decoder.BatchedInference.rnn_cell", "batched_decoder.BatchedInference.model.desc_attn", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.log_softmax().squeeze", "torch.log_softmax().squeeze", "torch.log_softmax().squeeze", "torch.log_softmax().squeeze.topk", "range", "batched_decoder.BatchedInference.actions_list[].append", "batched_decoder.BatchedInference.model.feat2hidden", "len", "res.append", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "len", "batched_decoder.BatchedInference.model.hidden2action", "batched_decoder.BatchedInference.vocab.index", "i.item"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["", "def", "step_with_input_feed", "(", "self", ",", "actions", "=", "None", ")", ":", "\n", "        ", "if", "actions", "is", "None", ":", "\n", "            ", "actions", "=", "[", "vocab", ".", "BOS", "]", "*", "self", ".", "bs", "\n", "\n", "", "for", "i", ",", "ac", "in", "enumerate", "(", "actions", ")", ":", "\n", "            ", "self", ".", "actions_list", "[", "i", "]", "=", "self", ".", "actions_list", "[", "i", "]", ".", "append", "(", "ac", ")", "\n", "\n", "", "if", "all", "(", "vocab", ".", "EOS", "in", "ac", "for", "ac", "in", "self", ".", "actions_list", ")", ":", "\n", "            ", "return", "None", "\n", "\n", "", "action_idx", "=", "torch", ".", "LongTensor", "(", "\n", "[", "self", ".", "vocab", ".", "index", "(", "action", ")", "for", "action", "in", "actions", "]", "\n", ")", ".", "to", "(", "self", ".", "model", ".", "_device", ")", "\n", "action_emb", "=", "self", ".", "embedder", "(", "action_idx", ")", "\n", "lstm_input", "=", "torch", ".", "cat", "(", "[", "action_emb", ",", "self", ".", "h_input", "]", ",", "dim", "=", "1", ")", "\n", "\n", "new_state", "=", "self", ".", "rnn_cell", "(", "lstm_input", ",", "self", ".", "recurrent_state", ")", "\n", "self", ".", "recurrent_state", "=", "new_state", "\n", "\n", "hidden_state", "=", "new_state", "[", "0", "]", "\n", "context", ",", "_", "=", "self", ".", "model", ".", "desc_attn", "(", "hidden_state", ",", "self", ".", "src_memory", ")", "\n", "\n", "h_input", "=", "torch", ".", "tanh", "(", "\n", "self", ".", "model", ".", "feat2hidden", "(", "torch", ".", "cat", "(", "[", "context", ",", "hidden_state", "]", ",", "dim", "=", "1", ")", ")", "\n", ")", "\n", "scores", "=", "F", ".", "log_softmax", "(", "self", ".", "model", ".", "hidden2action", "(", "h_input", ")", ",", "dim", "=", "1", ")", ".", "squeeze", "(", "0", ")", "\n", "self", ".", "h_input", "=", "h_input", "\n", "\n", "res", "=", "[", "]", "\n", "num_k", "=", "60", "if", "len", "(", "self", ".", "model", ".", "vocab", ")", ">", "60", "else", "len", "(", "self", ".", "model", ".", "vocab", ")", "\n", "topk_values", ",", "topk_indices", "=", "scores", ".", "topk", "(", "k", "=", "num_k", ",", "dim", "=", "1", ")", "\n", "for", "b_idx", "in", "range", "(", "self", ".", "bs", ")", ":", "\n", "            ", "candidates", "=", "[", "\n", "(", "self", ".", "vocab", "[", "i", ".", "item", "(", ")", "]", ",", "scores", "[", "b_idx", ",", "i", "]", ")", "for", "i", "in", "topk_indices", "[", "b_idx", "]", "\n", "]", "\n", "res", ".", "append", "(", "candidates", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.BatchedInference.finalize": [[338, 348], ["res.append", "actions.index", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["", "def", "finalize", "(", "self", ",", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "for", "actions", "in", "self", ".", "actions_list", ":", "\n", "            ", "if", "vocab", ".", "EOS", "in", "actions", ":", "\n", "                ", "eos_idx", "=", "actions", ".", "index", "(", "vocab", ".", "EOS", ")", "\n", "", "else", ":", "\n", "                ", "eos_idx", "=", "len", "(", "actions", ")", "-", "1", "\n", "", "code", "=", "\" \"", ".", "join", "(", "actions", "[", "1", ":", "eos_idx", "]", ")", "\n", "res", ".", "append", "(", "code", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.TransformerDecoder.__init__": [[355, 399], ["super().__init__", "tensor2struct.modules.embedders.LookupEmbeddings", "tensor2struct.modules.rat.TransformerDecoder", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "device", ",", "\n", "preproc", ",", "\n", "action_emb_size", ",", "\n", "num_layers", "=", "2", ",", "\n", "num_heads", "=", "4", ",", "\n", "enc_recurrent_size", "=", "256", ",", "\n", "recurrent_size", "=", "256", ",", "\n", "dropout", "=", "0.1", ",", "\n", "tie_weights", "=", "False", ",", "\n", "label_smooth", "=", "0.0", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "preproc", "=", "preproc", "\n", "self", ".", "vocab", "=", "preproc", ".", "vocab", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "action_emb_size", "=", "action_emb_size", "\n", "self", ".", "enc_recurrent_size", "=", "enc_recurrent_size", "\n", "self", ".", "recurrent_size", "=", "recurrent_size", "\n", "self", ".", "tie_weights", "=", "tie_weights", "\n", "self", ".", "label_smooth", "=", "label_smooth", "\n", "\n", "self", ".", "embedder", "=", "embedders", ".", "LookupEmbeddings", "(", "\n", "device", "=", "device", ",", "\n", "vocab", "=", "self", ".", "vocab", ",", "\n", "embedder", "=", "None", ",", "\n", "emb_size", "=", "self", ".", "action_emb_size", ",", "\n", "learnable_words", "=", "None", ",", "\n", ")", "\n", "\n", "self", ".", "decoder", "=", "rat", ".", "TransformerDecoder", "(", "\n", "device", "=", "device", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "hidden_size", "=", "recurrent_size", ",", "\n", "dropout", "=", "dropout", "\n", ")", "\n", "\n", "self", ".", "score_fn", "=", "torch", ".", "nn", ".", "Linear", "(", "recurrent_size", ",", "len", "(", "self", ".", "vocab", ")", ")", "\n", "if", "tie_weights", ":", "\n", "            ", "self", ".", "score_fn", ".", "weight", "=", "self", ".", "embedder", ".", "embedding", ".", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.TransformerDecoder.forward": [[400, 411], ["batched_decoder.TransformerDecoder.compute_loss", "batched_decoder.TransformerDecoder.begin_batched_inference"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_loss", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.BatchedEncDecModel.begin_batched_inference"], ["", "", "def", "forward", "(", "self", ",", "dec_input", ",", "enc_output", ",", "compute_loss", "=", "True", ",", "infer", "=", "False", ")", ":", "\n", "        ", "ret_dic", "=", "{", "}", "\n", "if", "compute_loss", ":", "\n", "            ", "ret_dic", "[", "\"loss\"", "]", "=", "self", ".", "compute_loss", "(", "dec_input", ",", "enc_output", ")", "\n", "", "if", "infer", ":", "\n", "            ", "traversal", ",", "initial_choices_list", "=", "self", ".", "begin_batched_inference", "(", "\n", "dec_input", ",", "enc_output", "\n", ")", "\n", "ret_dic", "[", "\"initial_state\"", "]", "=", "traversal", "\n", "ret_dic", "[", "\"initial_choices_list\"", "]", "=", "initial_choices_list", "\n", "", "return", "ret_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.TransformerDecoder.compute_loss": [[412, 454], ["len", "tensor2struct.modules.rat.get_src_attn_mask().to", "batched_decoder.TransformerDecoder.embedder", "batched_decoder.TransformerDecoder.pad", "batched_decoder.TransformerDecoder.actions_list_to_idx", "tensor2struct.modules.rat.make_std_mask().to", "batched_decoder.TransformerDecoder.actions_list_to_idx", "batched_decoder.TransformerDecoder.decoder", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "len", "batched_decoder.TransformerDecoder.score_fn", "sum", "batched_decoder.label_smoothed_nll_loss", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "tensor2struct.modules.rat.get_src_attn_mask", "tensor2struct.modules.rat.make_std_mask", "torch.log_softmax.view", "torch.log_softmax.view", "torch.log_softmax.view", "batched_decoder.TransformerDecoder.view", "torch.log_softmax.view", "torch.log_softmax.view", "torch.log_softmax.view", "batched_decoder.TransformerDecoder.view", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.pad", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.TransformerDecoder.actions_list_to_idx", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.TransformerDecoder.actions_list_to_idx", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.attention.AttentionLayerBahdanau.score_fn", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.label_smoothed_nll_loss", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.get_src_attn_mask", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.make_std_mask"], ["", "def", "compute_loss", "(", "self", ",", "dec_input", ",", "enc_output", ")", ":", "\n", "        ", "bs", "=", "len", "(", "dec_input", ")", "\n", "src_memory", "=", "enc_output", ".", "src_memory", "\n", "src_mask", "=", "rat", ".", "get_src_attn_mask", "(", "enc_output", ".", "lengths", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n", "input_actions", "=", "[", "item", "[", "\"actions\"", "]", "[", ":", "-", "1", "]", "for", "item", "in", "dec_input", "]", "\n", "embed_packed", "=", "self", ".", "embedder", "(", "input_actions", ")", "\n", "tgt_emb", ",", "tgt_lengths", "=", "embed_packed", ".", "pad", "(", "batch_first", "=", "True", ")", "\n", "\n", "ignore_index", "=", "len", "(", "self", ".", "vocab", ")", "+", "1", "\n", "tgt_input_idx", "=", "self", ".", "actions_list_to_idx", "(", "input_actions", ",", "ignore_index", ")", "\n", "tgt_mask", "=", "rat", ".", "make_std_mask", "(", "tgt_input_idx", ",", "ignore_index", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n", "output_actions", "=", "[", "item", "[", "\"actions\"", "]", "[", "1", ":", "]", "for", "item", "in", "dec_input", "]", "\n", "tgt_output_idx", "=", "self", ".", "actions_list_to_idx", "(", "output_actions", ",", "ignore_index", ")", "\n", "\n", "target_enc", "=", "self", ".", "decoder", "(", "tgt_emb", ",", "src_memory", ",", "src_mask", ",", "tgt_mask", ")", "\n", "logits", "=", "torch", ".", "log_softmax", "(", "self", ".", "score_fn", "(", "target_enc", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "self", ".", "label_smooth", ">", "0", ":", "\n", "            ", "num_tgts", "=", "sum", "(", "tgt_lengths", ")", "\n", "smooth_loss", ",", "nll_loss", "=", "label_smoothed_nll_loss", "(", "\n", "logits", ".", "view", "(", "-", "1", ",", "len", "(", "self", ".", "vocab", ")", ")", ",", "\n", "tgt_output_idx", ".", "view", "(", "-", "1", ")", ",", "\n", "self", ".", "label_smooth", ",", "\n", "ignore_index", "=", "ignore_index", ",", "\n", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "loss", "=", "smooth_loss", "/", "num_tgts", "\n", "", "else", ":", "\n", "                ", "loss", "=", "nll_loss", "/", "num_tgts", "\n", "", "", "else", ":", "\n", "            ", "sum_loss", "=", "F", ".", "cross_entropy", "(", "\n", "logits", ".", "view", "(", "-", "1", ",", "len", "(", "self", ".", "vocab", ")", ")", ",", "\n", "tgt_output_idx", ".", "view", "(", "-", "1", ")", ",", "\n", "reduction", "=", "\"sum\"", ",", "\n", "ignore_index", "=", "ignore_index", ",", "\n", ")", "\n", "loss", "=", "sum_loss", "/", "bs", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.TransformerDecoder.actions_list_to_idx": [[455, 467], ["max", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "res_list.append", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "batched_decoder.TransformerDecoder.vocab.index", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["", "def", "actions_list_to_idx", "(", "self", ",", "actions_list", ",", "ignore_index", ")", ":", "\n", "        ", "max_len", "=", "max", "(", "len", "(", "al", ")", "for", "al", "in", "actions_list", ")", "\n", "\n", "res_list", "=", "[", "]", "\n", "for", "al", "in", "actions_list", ":", "\n", "            ", "action_ids", "=", "[", "self", ".", "vocab", ".", "index", "(", "a", ")", "for", "a", "in", "al", "]", "+", "[", "ignore_index", "]", "*", "(", "\n", "max_len", "-", "len", "(", "al", ")", "\n", ")", "\n", "al_t", "=", "torch", ".", "LongTensor", "(", "action_ids", ")", "\n", "res_list", ".", "append", "(", "al_t", ")", "\n", "", "res", "=", "torch", ".", "stack", "(", "res_list", ",", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.TransformerDecoder.begin_batched_inference": [[468, 472], ["batched_decoder.BatchedTransformerInference", "batched_decoder.BatchedTransformerInference.step"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step"], ["", "def", "begin_batched_inference", "(", "self", ",", "dec_input", ",", "enc_state", ")", ":", "\n", "        ", "inferer", "=", "BatchedTransformerInference", "(", "self", ",", "enc_state", ")", "\n", "choices", "=", "inferer", ".", "step", "(", ")", "\n", "return", "inferer", ",", "choices", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.TransformerDecoder.begin_inference": [[473, 477], ["batched_decoder.UnBatchedTransformerInference", "batched_decoder.UnBatchedTransformerInference.step"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step"], ["", "def", "begin_inference", "(", "self", ",", "orig_item", ",", "enc_state", ")", ":", "\n", "        ", "inferer", "=", "UnBatchedTransformerInference", "(", "self", ",", "enc_state", ")", "\n", "choices", "=", "inferer", ".", "step", "(", ")", "\n", "return", "inferer", ",", "choices", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.BatchedTransformerInference.__init__": [[482, 494], ["tensor2struct.modules.rat.get_src_attn_mask().to", "batched_decoder.BatchedTransformerInference.src_memory.size", "pyrsistent.pvector", "tensor2struct.modules.rat.get_src_attn_mask", "range"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.get_src_attn_mask"], ["def", "__init__", "(", "self", ",", "model", ",", "enc_output", ")", ":", "\n", "        ", "if", "model", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "self", ".", "model", "=", "model", "\n", "self", ".", "vocab", "=", "model", ".", "vocab", "\n", "self", ".", "_device", "=", "model", ".", "_device", "\n", "self", ".", "src_memory", "=", "enc_output", ".", "src_memory", "\n", "self", ".", "src_mask", "=", "rat", ".", "get_src_attn_mask", "(", "enc_output", ".", "lengths", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n", "self", ".", "bs", "=", "self", ".", "src_memory", ".", "size", "(", ")", "[", "0", "]", "\n", "self", ".", "actions_list", "=", "[", "pyrsistent", ".", "pvector", "(", ")", "for", "_", "in", "range", "(", "self", ".", "bs", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.BatchedTransformerInference.clone": [[495, 506], ["batched_decoder.BatchedTransformerInference.__class__"], "methods", ["None"], ["", "def", "clone", "(", "self", ")", ":", "\n", "        ", "other", "=", "self", ".", "__class__", "(", "None", ",", "None", ")", "\n", "other", ".", "model", "=", "self", ".", "model", "\n", "other", ".", "vocab", "=", "self", ".", "vocab", "\n", "other", ".", "_device", "=", "self", ".", "_device", "\n", "\n", "other", ".", "bs", "=", "self", ".", "bs", "\n", "other", ".", "src_memory", "=", "self", ".", "src_memory", "\n", "other", ".", "src_mask", "=", "self", ".", "src_mask", "\n", "other", ".", "actions_list", "=", "self", ".", "actions_list", "\n", "return", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.BatchedTransformerInference.step": [[507, 538], ["enumerate", "all", "batched_decoder.BatchedTransformerInference.model.embedder", "batched_decoder.BatchedTransformerInference.pad", "tensor2struct.modules.rat.subsequent_mask().to", "batched_decoder.BatchedTransformerInference.model.decoder", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.topk", "range", "batched_decoder.BatchedTransformerInference.actions_list[].append", "batched_decoder.BatchedTransformerInference.model.score_fn", "len", "res.append", "tensor2struct.modules.rat.subsequent_mask", "len", "len", "i.item"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.pad", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.attention.AttentionLayerBahdanau.score_fn", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.subsequent_mask"], ["", "def", "step", "(", "self", ",", "actions", "=", "None", ")", ":", "\n", "        ", "if", "actions", "is", "None", ":", "\n", "            ", "actions", "=", "[", "vocab", ".", "BOS", "]", "*", "self", ".", "bs", "\n", "\n", "", "for", "i", ",", "ac", "in", "enumerate", "(", "actions", ")", ":", "\n", "            ", "self", ".", "actions_list", "[", "i", "]", "=", "self", ".", "actions_list", "[", "i", "]", ".", "append", "(", "ac", ")", "\n", "\n", "", "if", "all", "(", "vocab", ".", "EOS", "in", "ac", "for", "ac", "in", "self", ".", "actions_list", ")", ":", "\n", "            ", "return", "None", "\n", "\n", "", "action_emb_packed", "=", "self", ".", "model", ".", "embedder", "(", "self", ".", "actions_list", ")", "\n", "action_emb", ",", "_", "=", "action_emb_packed", ".", "pad", "(", "batch_first", "=", "True", ")", "\n", "\n", "# TODO: use incremental decoding", "\n", "tgt_mask", "=", "rat", ".", "subsequent_mask", "(", "len", "(", "self", ".", "actions_list", "[", "0", "]", ")", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "tgt_enc", "=", "self", ".", "model", ".", "decoder", "(", "\n", "action_emb", ",", "self", ".", "src_memory", ",", "self", ".", "src_mask", ",", "tgt_mask", "\n", ")", "\n", "tgt_enc", "=", "tgt_enc", "[", ":", ",", "-", "1", "]", "\n", "scores", "=", "F", ".", "log_softmax", "(", "self", ".", "model", ".", "score_fn", "(", "tgt_enc", ")", ",", "dim", "=", "1", ")", "\n", "\n", "res", "=", "[", "]", "\n", "# TODO: this num should be set per task, not fixed", "\n", "num_k", "=", "3", "if", "len", "(", "self", ".", "model", ".", "vocab", ")", ">", "3", "else", "len", "(", "self", ".", "model", ".", "vocab", ")", "\n", "topk_values", ",", "topk_indices", "=", "scores", ".", "topk", "(", "k", "=", "num_k", ",", "dim", "=", "1", ")", "\n", "for", "b_idx", "in", "range", "(", "self", ".", "bs", ")", ":", "\n", "            ", "candidates", "=", "[", "\n", "(", "self", ".", "vocab", "[", "i", ".", "item", "(", ")", "]", ",", "scores", "[", "b_idx", ",", "i", "]", ")", "for", "i", "in", "topk_indices", "[", "b_idx", "]", "\n", "]", "\n", "res", ".", "append", "(", "candidates", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.BatchedTransformerInference.finalize": [[539, 549], ["res.append", "actions.index", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["", "def", "finalize", "(", "self", ",", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "for", "actions", "in", "self", ".", "actions_list", ":", "\n", "            ", "if", "vocab", ".", "EOS", "in", "actions", ":", "\n", "                ", "eos_idx", "=", "actions", ".", "index", "(", "vocab", ".", "EOS", ")", "\n", "", "else", ":", "\n", "                ", "eos_idx", "=", "len", "(", "actions", ")", "-", "1", "\n", "", "code", "=", "\" \"", ".", "join", "(", "actions", "[", "1", ":", "eos_idx", "]", ")", "# exclude bos and eos", "\n", "res", ".", "append", "(", "code", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.UnBatchedTransformerInference.__init__": [[554, 565], ["tensor2struct.modules.rat.get_src_attn_mask().to", "pyrsistent.pvector", "tensor2struct.modules.rat.get_src_attn_mask"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.get_src_attn_mask"], ["def", "__init__", "(", "self", ",", "model", ",", "enc_output", ")", ":", "\n", "        ", "if", "model", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "self", ".", "model", "=", "model", "\n", "self", ".", "vocab", "=", "model", ".", "vocab", "\n", "self", ".", "_device", "=", "model", ".", "_device", "\n", "self", ".", "src_memory", "=", "enc_output", ".", "src_memory", "\n", "self", ".", "src_mask", "=", "rat", ".", "get_src_attn_mask", "(", "enc_output", ".", "lengths", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n", "self", ".", "actions", "=", "pyrsistent", ".", "pvector", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.UnBatchedTransformerInference.clone": [[566, 576], ["batched_decoder.UnBatchedTransformerInference.__class__"], "methods", ["None"], ["", "def", "clone", "(", "self", ")", ":", "\n", "        ", "other", "=", "self", ".", "__class__", "(", "None", ",", "None", ")", "\n", "other", ".", "model", "=", "self", ".", "model", "\n", "other", ".", "vocab", "=", "self", ".", "vocab", "\n", "other", ".", "_device", "=", "self", ".", "_device", "\n", "\n", "other", ".", "src_memory", "=", "self", ".", "src_memory", "\n", "other", ".", "src_mask", "=", "self", ".", "src_mask", "\n", "other", ".", "actions", "=", "self", ".", "actions", "\n", "return", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.UnBatchedTransformerInference.step": [[577, 600], ["batched_decoder.UnBatchedTransformerInference.actions.append", "batched_decoder.UnBatchedTransformerInference.model.embedder", "batched_decoder.UnBatchedTransformerInference.pad", "tensor2struct.modules.rat.subsequent_mask().to", "batched_decoder.UnBatchedTransformerInference.model.decoder", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.topk", "batched_decoder.UnBatchedTransformerInference.model.score_fn", "len", "tensor2struct.modules.rat.subsequent_mask", "len", "len", "i.item"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.pad", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.decoders.attention.AttentionLayerBahdanau.score_fn", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.subsequent_mask"], ["", "def", "step", "(", "self", ",", "action", "=", "None", ")", ":", "\n", "        ", "if", "action", "is", "None", ":", "\n", "            ", "action", "=", "vocab", ".", "BOS", "\n", "\n", "", "self", ".", "actions", "=", "self", ".", "actions", ".", "append", "(", "action", ")", "\n", "\n", "if", "action", "==", "vocab", ".", "EOS", ":", "\n", "            ", "return", "None", "\n", "\n", "", "action_emb_packed", "=", "self", ".", "model", ".", "embedder", "(", "[", "self", ".", "actions", "]", ")", "\n", "action_emb", ",", "_", "=", "action_emb_packed", ".", "pad", "(", "batch_first", "=", "True", ")", "\n", "\n", "tgt_mask", "=", "rat", ".", "subsequent_mask", "(", "len", "(", "self", ".", "actions", ")", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "tgt_enc", "=", "self", ".", "model", ".", "decoder", "(", "\n", "action_emb", ",", "self", ".", "src_memory", ",", "self", ".", "src_mask", ",", "tgt_mask", "\n", ")", "\n", "tgt_enc", "=", "tgt_enc", "[", ":", ",", "-", "1", "]", "\n", "scores", "=", "F", ".", "log_softmax", "(", "self", ".", "model", ".", "score_fn", "(", "tgt_enc", ")", ",", "dim", "=", "1", ")", "\n", "\n", "num_k", "=", "100", "if", "len", "(", "self", ".", "model", ".", "vocab", ")", ">", "100", "else", "len", "(", "self", ".", "model", ".", "vocab", ")", "\n", "topk_values", ",", "topk_indices", "=", "scores", ".", "topk", "(", "k", "=", "num_k", ",", "dim", "=", "1", ")", "\n", "candidates", "=", "[", "(", "self", ".", "vocab", "[", "i", ".", "item", "(", ")", "]", ",", "scores", "[", "0", ",", "i", "]", ")", "for", "i", "in", "topk_indices", "[", "0", "]", "]", "\n", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.UnBatchedTransformerInference.finalize": [[601, 605], ["None"], "methods", ["None"], ["", "def", "finalize", "(", "self", ",", ")", ":", "\n", "        ", "actions", "=", "[", "a", "for", "a", "in", "self", ".", "actions", "]", "\n", "code", "=", "\" \"", ".", "join", "(", "actions", "[", "1", ":", "-", "1", "]", ")", "# exclude bos and eos", "\n", "return", "actions", ",", "code", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_decoder.label_smoothed_nll_loss": [[23, 41], ["target.unsqueeze.dim", "target.unsqueeze.unsqueeze", "lprobs.gather", "lprobs.sum", "target.unsqueeze.eq", "nll_loss.sum.masked_fill_", "smooth_loss.sum.masked_fill_", "nll_loss.sum.squeeze", "smooth_loss.sum.squeeze", "nll_loss.sum.sum", "smooth_loss.sum.sum", "lprobs.dim", "lprobs.size"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size"], ["def", "label_smoothed_nll_loss", "(", "lprobs", ",", "target", ",", "epsilon", ",", "ignore_index", "=", "None", ",", "reduce", "=", "True", ")", ":", "\n", "    ", "if", "target", ".", "dim", "(", ")", "==", "lprobs", ".", "dim", "(", ")", "-", "1", ":", "\n", "        ", "target", "=", "target", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "nll_loss", "=", "-", "lprobs", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "target", ")", "\n", "smooth_loss", "=", "-", "lprobs", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "if", "ignore_index", "is", "not", "None", ":", "\n", "        ", "pad_mask", "=", "target", ".", "eq", "(", "ignore_index", ")", "\n", "nll_loss", ".", "masked_fill_", "(", "pad_mask", ",", "0.0", ")", "\n", "smooth_loss", ".", "masked_fill_", "(", "pad_mask", ",", "0.0", ")", "\n", "", "else", ":", "\n", "        ", "nll_loss", "=", "nll_loss", ".", "squeeze", "(", "-", "1", ")", "\n", "smooth_loss", "=", "smooth_loss", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "reduce", ":", "\n", "        ", "nll_loss", "=", "nll_loss", ".", "sum", "(", ")", "\n", "smooth_loss", "=", "smooth_loss", ".", "sum", "(", ")", "\n", "", "eps_i", "=", "epsilon", "/", "(", "lprobs", ".", "size", "(", "-", "1", ")", "-", "1", ")", "\n", "loss", "=", "(", "1.0", "-", "epsilon", "-", "eps_i", ")", "*", "nll_loss", "+", "eps_i", "*", "smooth_loss", "\n", "return", "loss", ",", "nll_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_encoder.Encoder.__init__": [[27, 69], ["super().__init__", "any", "batched_encoder.Encoder._build_modules", "tensor2struct.modules.bert.BERTEncoder", "m.startswith"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEnc._build_modules"], ["def", "__init__", "(", "\n", "self", ",", "\n", "device", ",", "\n", "preproc", ",", "\n", "dropout", "=", "0.1", ",", "\n", "word_emb_size", "=", "128", ",", "\n", "recurrent_size", "=", "256", ",", "\n", "num_heads", "=", "4", ",", "\n", "use_native_lstm", "=", "True", ",", "\n", "bert_version", "=", "\"bert-base-uncased\"", ",", "\n", "encoder", "=", "(", "\"emb\"", ",", "\"bilstm\"", ")", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            num_heads: attention heads for transformer module if used\n            use_native_lstm: whether using native lstm is lstm is used\n            bert_version: which bert to use if bert is a encoder moduel\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "preproc", "=", "preproc", "\n", "self", ".", "vocab", "=", "preproc", ".", "vocab", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "word_emb_size", "=", "word_emb_size", "\n", "self", ".", "recurrent_size", "=", "recurrent_size", "\n", "self", ".", "use_native_lstm", "=", "use_native_lstm", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "bert_version", "=", "bert_version", "\n", "\n", "# with batching", "\n", "self", ".", "encoder_modules", "=", "encoder", "\n", "self", ".", "last_enc_module", "=", "self", ".", "encoder_modules", "[", "-", "1", "]", "\n", "\n", "# shared modules", "\n", "self", ".", "shared_modules", "=", "{", "}", "\n", "if", "any", "(", "m", ".", "startswith", "(", "\"shared\"", ")", "for", "m", "in", "encoder", ")", ":", "\n", "            ", "self", ".", "shared_modules", "[", "\"shared-bert\"", "]", "=", "bert", ".", "BERTEncoder", "(", "\n", "device", "=", "self", ".", "_device", ",", "bert_version", "=", "self", ".", "bert_version", "\n", ")", "\n", "\n", "", "self", ".", "encoder", "=", "self", ".", "_build_modules", "(", "encoder", ",", "self", ".", "shared_modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_encoder.Encoder._build_modules": [[70, 125], ["torch.nn.Sequential", "tensor2struct.modules.bert.BERTEncoder", "tensor2struct.modules.bert.BERT2Embed", "tensor2struct.modules.embedders.LookupEmbeddings", "tensor2struct.modules.lstm.BiLSTM", "tensor2struct.modules.lstm.BiLSTM", "tensor2struct.modules.rat.PadCLS", "tensor2struct.modules.rat.PadCLS", "tensor2struct.modules.rat.TransformerEncoder", "modules.append", "modules.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "_build_modules", "(", "self", ",", "module_types", ",", "shared_modules", "=", "None", ")", ":", "\n", "        ", "module_builder", "=", "{", "\n", "\"bert\"", ":", "lambda", ":", "bert", ".", "BERTEncoder", "(", "\n", "device", "=", "self", ".", "_device", ",", "bert_version", "=", "self", ".", "bert_version", "\n", ")", ",", "\n", "\"bert2emb\"", ":", "lambda", ":", "bert", ".", "BERT2Embed", "(", "\n", "device", "=", "self", ".", "_device", ",", "\n", "bert_version", "=", "self", ".", "bert_version", ",", "\n", "emb_size", "=", "self", ".", "word_emb_size", ",", "\n", ")", ",", "\n", "\"emb\"", ":", "lambda", ":", "embedders", ".", "LookupEmbeddings", "(", "\n", "device", "=", "self", ".", "_device", ",", "\n", "vocab", "=", "self", ".", "vocab", ",", "\n", "embedder", "=", "self", ".", "preproc", ".", "embedder", ",", "\n", "emb_size", "=", "self", ".", "word_emb_size", ",", "\n", "learnable_words", "=", "self", ".", "preproc", ".", "learnable_words", ",", "\n", ")", ",", "\n", "\"unilstm\"", ":", "lambda", ":", "lstm", ".", "BiLSTM", "(", "\n", "input_size", "=", "self", ".", "word_emb_size", ",", "\n", "output_size", "=", "self", ".", "recurrent_size", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "use_native", "=", "self", ".", "use_native_lstm", ",", "\n", "summarize", "=", "False", ",", "\n", "bidirectional", "=", "False", ",", "\n", ")", ",", "\n", "\"bilstm\"", ":", "lambda", ":", "lstm", ".", "BiLSTM", "(", "\n", "input_size", "=", "self", ".", "word_emb_size", ",", "\n", "output_size", "=", "self", ".", "recurrent_size", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "use_native", "=", "self", ".", "use_native_lstm", ",", "\n", "summarize", "=", "False", ",", "\n", "bidirectional", "=", "True", ",", "\n", ")", ",", "\n", "\"cls_glue\"", ":", "lambda", ":", "rat", ".", "PadCLS", "(", "\n", "device", "=", "self", ".", "_device", ",", "hidden_size", "=", "self", ".", "recurrent_size", ",", "pos_encode", "=", "False", ",", "\n", ")", ",", "\n", "\"cls_glue_p\"", ":", "lambda", ":", "rat", ".", "PadCLS", "(", "\n", "device", "=", "self", ".", "_device", ",", "hidden_size", "=", "self", ".", "recurrent_size", ",", "pos_encode", "=", "True", ",", "\n", ")", ",", "\n", "\"transformer\"", ":", "lambda", ":", "rat", ".", "TransformerEncoder", "(", "\n", "device", "=", "self", ".", "_device", ",", "\n", "num_layers", "=", "1", ",", "\n", "num_heads", "=", "self", ".", "num_heads", ",", "\n", "hidden_size", "=", "self", ".", "recurrent_size", ",", "\n", "dropout", "=", "self", ".", "dropout", "\n", ")", ",", "\n", "}", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "module_type", "in", "module_types", ":", "\n", "            ", "if", "shared_modules", "and", "module_type", "in", "shared_modules", ":", "\n", "                ", "modules", ".", "append", "(", "shared_modules", "[", "module_type", "]", ")", "\n", "", "else", ":", "\n", "                ", "modules", ".", "append", "(", "module_builder", "[", "module_type", "]", "(", ")", ")", "\n", "", "", "return", "torch", ".", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_encoder.Encoder.forward": [[126, 129], ["batched_encoder.Encoder.compute_encoding"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_encoder.Encoder.compute_encoding"], ["", "def", "forward", "(", "self", ",", "enc_inputs", ")", ":", "\n", "        ", "tokens_list", "=", "[", "desc", "[", "\"tokens\"", "]", "for", "desc", "in", "enc_inputs", "]", "\n", "return", "self", ".", "compute_encoding", "(", "tokens_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.batched_encoder.Encoder.compute_encoding": [[130, 149], ["batched_encoder.Encoder.encoder", "batched_encoder.EncoderState", "batched_encoder.Encoder.pad", "tensor2struct.modules.lstm.extract_last_hidden_state_batched", "range", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.pad", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.extract_last_hidden_state_batched"], ["", "def", "compute_encoding", "(", "self", ",", "tokens_list", ")", ":", "\n", "        ", "src_enc", "=", "self", ".", "encoder", "(", "tokens_list", ")", "\n", "if", "self", ".", "last_enc_module", "in", "[", "\"bilstm\"", ",", "\"lstm\"", "]", ":", "\n", "            ", "src_enc_memory", ",", "lengths", "=", "src_enc", ".", "pad", "(", "batch_first", "=", "True", ")", "\n", "bidirectional", "=", "self", ".", "last_enc_module", "==", "\"bilstm\"", "\n", "src_enc_summary", "=", "lstm", ".", "extract_last_hidden_state_batched", "(", "\n", "src_enc_memory", ",", "lengths", ",", "bidirectional", "=", "bidirectional", "\n", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "last_enc_module", "==", "\"transformer\"", "\n", "raw_src_enc_memory", ",", "lengths", "=", "src_enc", "\n", "\n", "# unpack CLS representation as the summary, recover original lengths", "\n", "src_enc_summary", "=", "raw_src_enc_memory", "[", ":", ",", "0", ",", ":", "]", "\n", "src_enc_memory", "=", "raw_src_enc_memory", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "lengths", ")", ")", ":", "\n", "                ", "lengths", "[", "i", "]", "=", "lengths", "[", "i", "]", "-", "1", "\n", "\n", "", "", "return", "EncoderState", "(", "src_enc_memory", ",", "lengths", ",", "src_enc_summary", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.ZippedDataset.__init__": [[12, 19], ["all", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "components", ")", ":", "\n", "        ", "assert", "len", "(", "components", ")", ">=", "1", "\n", "lengths", "=", "[", "len", "(", "c", ")", "for", "c", "in", "components", "]", "\n", "assert", "all", "(", "\n", "lengths", "[", "0", "]", "==", "other", "for", "other", "in", "lengths", "[", "1", ":", "]", "\n", ")", ",", "\"Lengths don't match: {}\"", ".", "format", "(", "lengths", ")", "\n", "self", ".", "components", "=", "components", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.ZippedDataset.__getitem__": [[20, 22], ["tuple"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "tuple", "(", "c", "[", "idx", "]", "for", "c", "in", "self", ".", "components", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.ZippedDataset.__len__": [[23, 25], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "components", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.ZippedDataset.concat": [[26, 30], ["isinstance", "enumerate", "enc_dec.ZippedDataset.components[].extend"], "methods", ["None"], ["", "def", "concat", "(", "self", ",", "other", ")", ":", "\n", "        ", "assert", "isinstance", "(", "other", ",", "ZippedDataset", ")", "\n", "for", "i", ",", "comp", "in", "enumerate", "(", "self", ".", "components", ")", ":", "\n", "            ", "self", ".", "components", "[", "i", "]", ".", "extend", "(", "other", ".", "components", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.EncDecPreproc.__init__": [[33, 41], ["tensor2struct.models.abstract_preproc.AbstractPreproc.__init__", "tensor2struct.utils.registry.lookup().Preproc", "tensor2struct.utils.registry.lookup().Preproc", "tensor2struct.utils.registry.lookup", "tensor2struct.utils.registry.lookup"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ",", "encoder_preproc", ",", "decoder_preproc", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "enc_preproc", "=", "registry", ".", "lookup", "(", "\"encoder\"", ",", "encoder", "[", "\"name\"", "]", ")", ".", "Preproc", "(", "\n", "**", "encoder_preproc", "\n", ")", "\n", "self", ".", "dec_preproc", "=", "registry", ".", "lookup", "(", "\"decoder\"", ",", "decoder", "[", "\"name\"", "]", ")", ".", "Preproc", "(", "\n", "**", "decoder_preproc", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.EncDecPreproc.validate_item": [[43, 48], ["enc_dec.EncDecPreproc.enc_preproc.validate_item", "enc_dec.EncDecPreproc.dec_preproc.validate_item"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.validate_item", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.validate_item"], ["", "def", "validate_item", "(", "self", ",", "item", ",", "section", ")", ":", "\n", "        ", "enc_result", ",", "enc_info", "=", "self", ".", "enc_preproc", ".", "validate_item", "(", "item", ",", "section", ")", "\n", "dec_result", ",", "dec_info", "=", "self", ".", "dec_preproc", ".", "validate_item", "(", "item", ",", "section", ")", "\n", "\n", "return", "enc_result", "and", "dec_result", ",", "(", "enc_info", ",", "dec_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.EncDecPreproc.add_item": [[49, 53], ["enc_dec.EncDecPreproc.enc_preproc.add_item", "enc_dec.EncDecPreproc.dec_preproc.add_item"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.scan.scan_enc.ScanEncPreproc.add_item", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.scan.scan_enc.ScanEncPreproc.add_item"], ["", "def", "add_item", "(", "self", ",", "item", ",", "section", ",", "validation_info", ")", ":", "\n", "        ", "enc_info", ",", "dec_info", "=", "validation_info", "\n", "self", ".", "enc_preproc", ".", "add_item", "(", "item", ",", "section", ",", "enc_info", ")", "\n", "self", ".", "dec_preproc", ".", "add_item", "(", "item", ",", "section", ",", "dec_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.EncDecPreproc.clear_items": [[54, 57], ["enc_dec.EncDecPreproc.enc_preproc.clear_items", "enc_dec.EncDecPreproc.dec_preproc.clear_items"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.clear_items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.clear_items"], ["", "def", "clear_items", "(", "self", ")", ":", "\n", "        ", "self", ".", "enc_preproc", ".", "clear_items", "(", ")", "\n", "self", ".", "dec_preproc", ".", "clear_items", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.EncDecPreproc.save": [[58, 61], ["enc_dec.EncDecPreproc.enc_preproc.save", "enc_dec.EncDecPreproc.dec_preproc.save"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.save", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.save"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "self", ".", "enc_preproc", ".", "save", "(", ")", "\n", "self", ".", "dec_preproc", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.EncDecPreproc.load": [[62, 65], ["enc_dec.EncDecPreproc.enc_preproc.load", "enc_dec.EncDecPreproc.dec_preproc.load"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "self", ".", "enc_preproc", ".", "load", "(", ")", "\n", "self", ".", "dec_preproc", ".", "load", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.EncDecPreproc.dataset": [[66, 69], ["enc_dec.ZippedDataset", "enc_dec.EncDecPreproc.enc_preproc.dataset", "enc_dec.EncDecPreproc.dec_preproc.dataset"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.dataset", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.dataset"], ["", "def", "dataset", "(", "self", ",", "section", ")", ":", "\n", "        ", "return", "ZippedDataset", "(", "\n", "self", ".", "enc_preproc", ".", "dataset", "(", "section", ")", ",", "self", ".", "dec_preproc", ".", "dataset", "(", "section", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.__init__": [[80, 91], ["super().__init__", "tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.construct", "getattr"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct"], ["def", "__init__", "(", "self", ",", "preproc", ",", "device", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "preproc", "=", "preproc", "\n", "self", ".", "encoder", "=", "registry", ".", "construct", "(", "\n", "\"encoder\"", ",", "encoder", ",", "device", "=", "device", ",", "preproc", "=", "preproc", ".", "enc_preproc", "\n", ")", "\n", "self", ".", "decoder", "=", "registry", ".", "construct", "(", "\n", "\"decoder\"", ",", "decoder", ",", "device", "=", "device", ",", "preproc", "=", "preproc", ".", "dec_preproc", "\n", ")", "\n", "\n", "assert", "getattr", "(", "self", ".", "encoder", ",", "\"batched\"", ")", "# use batched enc by default", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.forward": [[92, 114], ["enc_dec.SemiBatchedEncDecModel._compute_loss_enc_batched", "enc_dec.SemiBatchedEncDecModel.begin_inference", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.semi_enc_dec.SemiSupEncDecModel._compute_loss_enc_batched", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.begin_inference"], ["", "def", "forward", "(", "self", ",", "*", "input_items", ",", "compute_loss", "=", "True", ",", "infer", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        The only entry point. In this unbatched version, input_items is \n        the input_batch during training; it is a tuple (orig_item, preproc_item)\n        during inference time.\n        Args:\n            input_items: if it is a list, then we infer that it is a batch\n            of examples for training; if is not a single list, then we infer\n            that it's in inference mode\n        \"\"\"", "\n", "ret_dic", "=", "{", "}", "\n", "if", "compute_loss", ":", "\n", "            ", "assert", "len", "(", "input_items", ")", "==", "1", "# it's a batched version", "\n", "loss", "=", "self", ".", "_compute_loss_enc_batched", "(", "input_items", "[", "0", "]", ")", "\n", "ret_dic", "[", "\"loss\"", "]", "=", "loss", "\n", "\n", "", "if", "infer", ":", "\n", "            ", "assert", "len", "(", "input_items", ")", "==", "2", "# unbatched version of inference", "\n", "orig_item", ",", "preproc_item", "=", "input_items", "\n", "infer_dic", "=", "self", ".", "begin_inference", "(", "orig_item", ",", "preproc_item", ")", "\n", "ret_dic", "=", "{", "**", "ret_dic", ",", "**", "infer_dic", "}", "\n", "", "return", "ret_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel._compute_loss_enc_batched": [[115, 127], ["enc_dec.SemiBatchedEncDecModel.encoder", "zip", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "enc_dec.SemiBatchedEncDecModel.decoder", "losses.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "_compute_loss_enc_batched", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n        Default way of computing loss: enc returns a list, \n        dec process enc outputs sequentially\n        \"\"\"", "\n", "losses", "=", "[", "]", "\n", "enc_states", "=", "self", ".", "encoder", "(", "[", "enc_input", "for", "enc_input", ",", "dec_output", "in", "batch", "]", ")", "\n", "\n", "for", "enc_state", ",", "(", "enc_input", ",", "dec_output", ")", "in", "zip", "(", "enc_states", ",", "batch", ")", ":", "\n", "            ", "ret_dic", "=", "self", ".", "decoder", "(", "dec_output", ",", "enc_state", ")", "\n", "losses", ".", "append", "(", "ret_dic", "[", "\"loss\"", "]", ")", "\n", "", "return", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "losses", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.begin_inference": [[128, 132], ["enc_dec.SemiBatchedEncDecModel.encoder", "enc_dec.SemiBatchedEncDecModel.decoder"], "methods", ["None"], ["", "def", "begin_inference", "(", "self", ",", "orig_item", ",", "preproc_item", ")", ":", "\n", "        ", "enc_input", ",", "_", "=", "preproc_item", "\n", "(", "enc_state", ",", ")", "=", "self", ".", "encoder", "(", "[", "enc_input", "]", ")", "\n", "return", "self", ".", "decoder", "(", "orig_item", ",", "enc_state", ",", "compute_loss", "=", "False", ",", "infer", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.get_trainable_parameters": [[133, 135], ["filter", "enc_dec.SemiBatchedEncDecModel.parameters"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.filter"], ["", "def", "get_trainable_parameters", "(", "self", ")", ":", "\n", "        ", "return", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.get_bert_parameters_legacy": [[136, 140], ["list", "enc_dec.SemiBatchedEncDecModel.encoder.bert_model.parameters", "len"], "methods", ["None"], ["", "def", "get_bert_parameters_legacy", "(", "self", ")", ":", "\n", "        ", "bert_params", "=", "list", "(", "self", ".", "encoder", ".", "bert_model", ".", "parameters", "(", ")", ")", "\n", "assert", "len", "(", "bert_params", ")", ">", "0", "\n", "return", "bert_params", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.get_bert_parameters": [[141, 147], ["enc_dec.SemiBatchedEncDecModel.named_parameters", "bert_params.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "get_bert_parameters", "(", "self", ")", ":", "\n", "        ", "bert_params", "=", "[", "]", "\n", "for", "name", ",", "_param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "\"bert\"", "in", "name", ":", "\n", "                ", "bert_params", ".", "append", "(", "_param", ")", "\n", "", "", "return", "bert_params", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.get_non_bert_parameters": [[148, 156], ["set", "enc_dec.SemiBatchedEncDecModel.named_parameters", "enc_dec.SemiBatchedEncDecModel.get_bert_parameters", "non_bert_params.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.get_bert_parameters", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "get_non_bert_parameters", "(", "self", ")", ":", "\n", "        ", "non_bert_params", "=", "[", "]", "\n", "bert_params", "=", "set", "(", "self", ".", "get_bert_parameters", "(", ")", ")", "\n", "for", "name", ",", "_param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "_param", "not", "in", "bert_params", ":", "\n", "# if \"bert\" not in name:", "\n", "                ", "non_bert_params", ".", "append", "(", "_param", ")", "\n", "", "", "return", "non_bert_params", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.UnBatchedEncDecModel.forward": [[166, 184], ["enc_dec.UnBatchedEncDecModel._compute_loss_enc_unbatched", "enc_dec.UnBatchedEncDecModel.begin_inference", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.begin_inference"], ["def", "forward", "(", "self", ",", "*", "input_items", ",", "compute_loss", "=", "True", ",", "infer", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Similar to SemiBatchedEncDec, in training mode, input_items is a list \n        of length 1, containing a training batch; in decoding mode input_items is\n        a pair of orig_item and preproc_item\n        \"\"\"", "\n", "ret_dic", "=", "{", "}", "\n", "if", "compute_loss", ":", "\n", "            ", "assert", "len", "(", "input_items", ")", "==", "1", "# it's a batch of training data", "\n", "loss", "=", "self", ".", "_compute_loss_enc_unbatched", "(", "input_items", "[", "0", "]", ")", "\n", "ret_dic", "[", "\"loss\"", "]", "=", "loss", "\n", "\n", "", "if", "infer", ":", "\n", "            ", "assert", "len", "(", "input_items", ")", "==", "2", "# unbatched version of inference", "\n", "orig_item", ",", "preproc_item", "=", "input_items", "\n", "infer_dic", "=", "self", ".", "begin_inference", "(", "orig_item", ",", "preproc_item", ")", "\n", "ret_dic", "=", "{", "**", "ret_dic", ",", "**", "infer_dic", "}", "\n", "", "return", "ret_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.UnBatchedEncDecModel._compute_loss_unbatched": [[185, 192], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "enc_dec.UnBatchedEncDecModel.encoder", "enc_dec.UnBatchedEncDecModel.decoder", "losses.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "_compute_loss_unbatched", "(", "self", ",", "batch", ")", ":", "\n", "        ", "losses", "=", "[", "]", "\n", "for", "enc_input", ",", "dec_output", "in", "batch", ":", "\n", "            ", "enc_state", "=", "self", ".", "encoder", "(", "enc_input", ")", "\n", "ret_dic", "=", "self", ".", "decoder", "(", "dec_output", ",", "enc_state", ")", "\n", "losses", ".", "append", "(", "ret_dic", "[", "\"loss\"", "]", ")", "\n", "", "return", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "losses", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.UnBatchedEncDecModel.begin_inference": [[193, 197], ["enc_dec.UnBatchedEncDecModel.encoder", "enc_dec.UnBatchedEncDecModel.decoder"], "methods", ["None"], ["", "def", "begin_inference", "(", "self", ",", "orig_item", ",", "preproc_item", ")", ":", "\n", "        ", "enc_input", ",", "_", "=", "preproc_item", "\n", "enc_state", "=", "self", ".", "encoder", "(", "enc_input", ")", "\n", "return", "self", ".", "decoder", "(", "orig_item", ",", "enc_state", ",", "compute_loss", "=", "False", ",", "infer", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.BatchedEncDecModel.__init__": [[203, 206], ["enc_dec.SemiBatchedEncDecModel.__init__", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "preproc", ",", "device", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "preproc", ",", "device", ",", "encoder", ",", "decoder", ")", "\n", "assert", "getattr", "(", "self", ".", "encoder", ",", "\"batched\"", ")", "and", "getattr", "(", "self", ".", "decoder", ",", "\"batched\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.BatchedEncDecModel.forward": [[207, 224], ["enc_dec.BatchedEncDecModel.compute_loss_batched", "enc_dec.BatchedEncDecModel.begin_batched_inference"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.BatchedEncDecModel.compute_loss_batched", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.BatchedEncDecModel.begin_batched_inference"], ["", "def", "forward", "(", "self", ",", "input_batch", ",", "compute_loss", "=", "True", ",", "infer", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        The only entry point of encdec. In this batched version, training \n        and inference also takes a preprocessed input batch\n\n        Args:\n            input_batch: for training, it contains both input and output; for decoding,\n                it only contains input\n        \"\"\"", "\n", "ret_dic", "=", "{", "}", "\n", "if", "compute_loss", ":", "\n", "            ", "loss", "=", "self", ".", "compute_loss_batched", "(", "input_batch", ")", "\n", "ret_dic", "[", "\"loss\"", "]", "=", "loss", "\n", "", "if", "infer", ":", "\n", "            ", "infer_dic", "=", "self", ".", "begin_batched_inference", "(", "input_batch", ")", "\n", "ret_dic", "=", "{", "**", "ret_dic", ",", "**", "infer_dic", "}", "\n", "", "return", "ret_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.BatchedEncDecModel.compute_loss_batched": [[225, 236], ["enc_dec.BatchedEncDecModel.encoder", "enc_dec.BatchedEncDecModel.decoder", "getattr"], "methods", ["None"], ["", "def", "compute_loss_batched", "(", "self", ",", "batch", ")", ":", "\n", "        ", "enc_batch", "=", "[", "enc_input", "for", "enc_input", ",", "dec_output", "in", "batch", "]", "\n", "dec_batch", "=", "[", "dec_output", "for", "enc_input", ",", "dec_output", "in", "batch", "]", "\n", "enc_state", "=", "self", ".", "encoder", "(", "enc_batch", ")", "\n", "ret_dic", "=", "self", ".", "decoder", "(", "dec_batch", ",", "enc_state", ")", "\n", "\n", "# encoder might have some auxilary loss", "\n", "if", "getattr", "(", "enc_state", ",", "\"enc_loss\"", ",", "None", ")", ":", "\n", "            ", "return", "ret_dic", "[", "\"loss\"", "]", "+", "enc_state", ".", "enc_loss", "\n", "", "else", ":", "\n", "            ", "return", "ret_dic", "[", "\"loss\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.BatchedEncDecModel.begin_batched_inference": [[237, 244], ["enc_dec.BatchedEncDecModel.encoder", "enc_dec.BatchedEncDecModel.decoder"], "methods", ["None"], ["", "", "def", "begin_batched_inference", "(", "self", ",", "enc_batch", ")", ":", "\n", "        ", "\"\"\"\n        Unlike UnbatchedEncDec, enc_batch does not contain orig_items now. This\n        might need to be supported in the future\n        \"\"\"", "\n", "enc_state", "=", "self", ".", "encoder", "(", "enc_batch", ")", "\n", "return", "self", ".", "decoder", "(", "None", ",", "enc_state", ",", "compute_loss", "=", "False", ",", "infer", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.BatchedEncDecModel.begin_inference": [[245, 253], ["enc_dec.BatchedEncDecModel.encoder", "enc_dec.BatchedEncDecModel.decoder.begin_inference"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.begin_inference"], ["", "def", "begin_inference", "(", "self", ",", "orig_item", ",", "preproc_item", ")", ":", "\n", "        ", "\"\"\"\n        This function will be used in unbatched inference methods, such \n        as unbatched beam search\n        \"\"\"", "\n", "enc_input", ",", "_", "=", "preproc_item", "\n", "enc_state", "=", "self", ".", "encoder", "(", "[", "enc_input", "]", ")", "\n", "return", "self", ".", "decoder", ".", "begin_inference", "(", "orig_item", ",", "enc_state", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.sampling.top_k_top_p_filtering": [[20, 50], ["min", "float", "logits.dim", "logits.size", "torch.sort", "torch.sort", "torch.cumsum", "torch.cumsum", "sorted_indices_to_remove[].clone", "torch.softmax", "torch.topk", "torch.topk"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.clone", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax"], ["", "def", "top_k_top_p_filtering", "(", "logits", ",", "top_k", "=", "0", ",", "top_p", "=", "0.0", ",", "filter_value", "=", "-", "float", "(", "\"Inf\"", ")", ")", ":", "\n", "    ", "\"\"\" Filter a distribution of logits using top-k and/or nucleus (top-p) filtering\n        Args:\n            logits: logits distribution shape (vocabulary size)\n            top_k >0: keep only top k tokens with highest probability (top-k filtering).\n            top_p >0.0: keep the top tokens with cumulative probability >= top_p (nucleus filtering).\n                Nucleus filtering is described in Holtzman et al. (http://arxiv.org/abs/1904.09751)\n    \"\"\"", "\n", "assert", "(", "\n", "logits", ".", "dim", "(", ")", "==", "1", "\n", ")", "# batch size 1 for now - could be updated for more but the code would be less clear", "\n", "top_k", "=", "min", "(", "top_k", ",", "logits", ".", "size", "(", "-", "1", ")", ")", "# Safety check", "\n", "if", "top_k", ">", "0", ":", "\n", "# Remove all tokens with a probability less than the last token of the top-k", "\n", "        ", "indices_to_remove", "=", "logits", "<", "torch", ".", "topk", "(", "logits", ",", "top_k", ")", "[", "0", "]", "[", "...", ",", "-", "1", ",", "None", "]", "\n", "logits", "[", "indices_to_remove", "]", "=", "filter_value", "\n", "\n", "", "if", "top_p", ">", "0.0", ":", "\n", "        ", "sorted_logits", ",", "sorted_indices", "=", "torch", ".", "sort", "(", "logits", ",", "descending", "=", "True", ")", "\n", "cumulative_probs", "=", "torch", ".", "cumsum", "(", "F", ".", "softmax", "(", "sorted_logits", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Remove tokens with cumulative probability above the threshold", "\n", "sorted_indices_to_remove", "=", "cumulative_probs", ">", "top_p", "\n", "# Shift the indices to the right to keep also the first token above the threshold", "\n", "sorted_indices_to_remove", "[", "...", ",", "1", ":", "]", "=", "sorted_indices_to_remove", "[", "...", ",", ":", "-", "1", "]", ".", "clone", "(", ")", "\n", "sorted_indices_to_remove", "[", "...", ",", "0", "]", "=", "0", "\n", "\n", "indices_to_remove", "=", "sorted_indices", "[", "sorted_indices_to_remove", "]", "\n", "logits", "[", "indices_to_remove", "]", "=", "filter_value", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.sampling.top_k_top_p_sampling": [[52, 120], ["tensor2struct.utils.registry.register", "model", "range", "finished.sort", "sampling.Hypothesis", "candidates.sort", "len", "torch.stack", "torch.stack", "enumerate", "hyp.inference_state.clone", "hyp.inference_state.clone.step", "sampling.Hypothesis", "operator.attrgetter", "sampling.top_k_top_p_filtering", "score_v[].item", "candidates.append", "operator.itemgetter", "finished.append", "beam.append", "len", "float", "choice_score.item"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.register", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.clone", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.sampling.top_k_top_p_filtering", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "@", "registry", ".", "register", "(", "\"infer_method\"", ",", "\"beam_search_sampling\"", ")", "\n", "def", "top_k_top_p_sampling", "(", "\n", "model", ",", "\n", "orig_item", ",", "\n", "preproc_item", ",", "\n", "sample_size", "=", "1", ",", "\n", "max_steps", "=", "100", ",", "\n", "top_p", "=", "0.0", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Beam search, if top_p > 0.0, we also do filtering based on nuclues sampling\n    Score history stores log-potential in the form of tensors, rather than scalars\n    \"\"\"", "\n", "ret_state", "=", "model", "(", "orig_item", ",", "preproc_item", ",", "compute_loss", "=", "False", ",", "infer", "=", "True", ")", "\n", "inference_state", ",", "next_choices", "=", "(", "\n", "ret_state", "[", "\"initial_state\"", "]", ",", "\n", "ret_state", "[", "\"initial_choices\"", "]", ",", "\n", ")", "\n", "beam", "=", "[", "Hypothesis", "(", "inference_state", ",", "next_choices", ")", "]", "\n", "finished", "=", "[", "]", "\n", "\n", "for", "step", "in", "range", "(", "max_steps", ")", ":", "\n", "        ", "if", "len", "(", "finished", ")", "==", "sample_size", ":", "\n", "            ", "break", "\n", "\n", "", "candidates", "=", "[", "]", "\n", "for", "hyp", "in", "beam", ":", "\n", "# collect scores for sorting", "\n", "            ", "scores", "=", "[", "choice_score", "for", "_", ",", "choice_score", "in", "hyp", ".", "next_choices", "]", "\n", "score_v", "=", "torch", ".", "stack", "(", "scores", ",", "dim", "=", "0", ")", "\n", "if", "top_p", ">", "0", ":", "\n", "                ", "score_v", "=", "top_k_top_p_filtering", "(", "score_v", ",", "top_p", "=", "top_p", ")", "\n", "\n", "", "for", "i", ",", "(", "choice", ",", "choice_score", ")", "in", "enumerate", "(", "hyp", ".", "next_choices", ")", ":", "\n", "                ", "filtered_score", "=", "score_v", "[", "i", "]", ".", "item", "(", ")", "\n", "if", "filtered_score", "==", "-", "float", "(", "\"Inf\"", ")", ":", "\n", "                    ", "continue", "\n", "", "candidates", ".", "append", "(", "\n", "(", "\n", "hyp", ",", "\n", "choice", ",", "\n", "choice_score", ",", "\n", "hyp", ".", "score", "+", "choice_score", ".", "item", "(", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "# Keep the top K expansions", "\n", "", "", "candidates", ".", "sort", "(", "key", "=", "operator", ".", "itemgetter", "(", "3", ")", ",", "reverse", "=", "True", ")", "\n", "candidates", "=", "candidates", "[", ":", "sample_size", "-", "len", "(", "finished", ")", "]", "\n", "\n", "# Create the new hypotheses from the expansions", "\n", "beam", "=", "[", "]", "\n", "for", "hyp", ",", "choice", ",", "choice_score", ",", "cum_score", "in", "candidates", ":", "\n", "            ", "inference_state", "=", "hyp", ".", "inference_state", ".", "clone", "(", ")", "\n", "next_choices", "=", "inference_state", ".", "step", "(", "choice", ")", "\n", "new_hyp", "=", "Hypothesis", "(", "\n", "inference_state", "=", "inference_state", ",", "\n", "next_choices", "=", "next_choices", ",", "\n", "score", "=", "cum_score", ",", "\n", "choice_history", "=", "hyp", ".", "choice_history", "+", "[", "choice", "]", ",", "\n", "score_history", "=", "hyp", ".", "score_history", "+", "[", "choice_score", "]", ",", "\n", ")", "\n", "if", "next_choices", "is", "None", ":", "\n", "                ", "finished", ".", "append", "(", "new_hyp", ")", "\n", "", "else", ":", "\n", "                ", "beam", ".", "append", "(", "new_hyp", ")", "\n", "", "", "", "finished", ".", "sort", "(", "key", "=", "operator", ".", "attrgetter", "(", "\"score\"", ")", ",", "reverse", "=", "True", ")", "\n", "return", "finished", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.sampling.stochastic_beam_search_sampling": [[122, 199], ["tensor2struct.utils.registry.register", "model", "range", "finished.sort", "sampling.Hypothesis", "candidates.sort", "torch.stack().detach", "torch.stack().detach", "enumerate", "hyp.inference_state.clone", "hyp.inference_state.clone.step", "sampling.Hypothesis", "operator.attrgetter", "len", "len", "torch.Tensor().to", "torch.Tensor().to", "score_v.unsqueeze.unsqueeze", "tensor2struct.utils.gumbel.gumbel_with_maximum", "gumbel_score_v.squeeze.squeeze", "gumbel_score_v[].item", "candidates.append", "operator.itemgetter", "finished.append", "beam.append", "torch.stack", "torch.stack", "tensor2struct.utils.gumbel.gumbel_like", "torch.Tensor", "torch.Tensor", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.register", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.clone", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gumbel.gumbel_with_maximum", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gumbel.gumbel_like"], ["", "@", "registry", ".", "register", "(", "\"infer_method\"", ",", "\"stochastic_beam_search_sampling\"", ")", "\n", "def", "stochastic_beam_search_sampling", "(", "\n", "model", ",", "\n", "orig_item", ",", "\n", "preproc_item", ",", "\n", "sample_size", "=", "1", ",", "\n", "max_steps", "=", "100", ",", "\n", "early_stop", "=", "False", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Accoding to stochastic beam search paper.\n    Note that theorectically early stopping should not be used, so max_steps matters in this method.\n    Score history will still store the original logits but score will store perturbed scores for searching\n    \"\"\"", "\n", "ret_state", "=", "model", "(", "orig_item", ",", "preproc_item", ",", "compute_loss", "=", "False", ",", "infer", "=", "True", ")", "\n", "inference_state", ",", "next_choices", "=", "(", "\n", "ret_state", "[", "\"initial_state\"", "]", ",", "\n", "ret_state", "[", "\"initial_choices\"", "]", ",", "\n", ")", "\n", "beam", "=", "[", "Hypothesis", "(", "inference_state", ",", "next_choices", ")", "]", "\n", "finished", "=", "[", "]", "\n", "\n", "for", "step", "in", "range", "(", "max_steps", ")", ":", "\n", "        ", "if", "early_stop", "and", "len", "(", "finished", ")", "==", "sample_size", ":", "\n", "            ", "break", "\n", "", "elif", "len", "(", "finished", ")", ">", "sample_size", "*", "6", ":", "# to avoid too many samples", "\n", "            ", "break", "\n", "\n", "", "candidates", "=", "[", "]", "\n", "for", "hyp", "in", "beam", ":", "\n", "# collect scores for sorting", "\n", "            ", "scores", "=", "[", "choice_score", "for", "_", ",", "choice_score", "in", "hyp", ".", "next_choices", "]", "\n", "score_v", "=", "torch", ".", "stack", "(", "scores", ",", "dim", "=", "0", ")", ".", "detach", "(", ")", "\n", "\n", "if", "step", "==", "0", ":", "\n", "                ", "gumbel_score_v", "=", "gumbel", ".", "gumbel_like", "(", "score_v", ")", "+", "score_v", "\n", "", "else", ":", "\n", "                ", "parent_score", "=", "torch", ".", "Tensor", "(", "[", "hyp", ".", "score", "]", ")", ".", "to", "(", "score_v", ".", "device", ")", "\n", "score_v", "=", "score_v", ".", "unsqueeze", "(", "0", ")", "# 1 * num_cand", "\n", "gumbel_score_v", ",", "_", "=", "gumbel", ".", "gumbel_with_maximum", "(", "score_v", ",", "parent_score", ")", "\n", "gumbel_score_v", "=", "gumbel_score_v", ".", "squeeze", "(", "0", ")", "\n", "\n", "", "for", "i", ",", "(", "choice", ",", "choice_score", ")", "in", "enumerate", "(", "hyp", ".", "next_choices", ")", ":", "\n", "                ", "gumbel_score", "=", "gumbel_score_v", "[", "i", "]", ".", "item", "(", ")", "\n", "candidates", ".", "append", "(", "\n", "(", "\n", "hyp", ",", "\n", "choice", ",", "\n", "choice_score", ",", "\n", "hyp", ".", "score", "+", "gumbel_score", ",", "\n", ")", "\n", ")", "\n", "# Keep the top K expansions", "\n", "", "", "candidates", ".", "sort", "(", "key", "=", "operator", ".", "itemgetter", "(", "3", ")", ",", "reverse", "=", "True", ")", "\n", "if", "early_stop", ":", "\n", "            ", "candidates", "=", "candidates", "[", ":", "sample_size", "-", "len", "(", "finished", ")", "]", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "candidates", "[", ":", "sample_size", "]", "\n", "\n", "# Create the new hypotheses from the expansions", "\n", "", "beam", "=", "[", "]", "\n", "for", "hyp", ",", "choice", ",", "choice_score", ",", "cum_score", "in", "candidates", ":", "\n", "            ", "inference_state", "=", "hyp", ".", "inference_state", ".", "clone", "(", ")", "\n", "next_choices", "=", "inference_state", ".", "step", "(", "choice", ")", "\n", "new_hyp", "=", "Hypothesis", "(", "\n", "inference_state", "=", "inference_state", ",", "\n", "next_choices", "=", "next_choices", ",", "\n", "score", "=", "cum_score", ",", "\n", "choice_history", "=", "hyp", ".", "choice_history", "+", "[", "choice", "]", ",", "\n", "score_history", "=", "hyp", ".", "score_history", "+", "[", "choice_score", "]", ",", "\n", ")", "\n", "if", "next_choices", "is", "None", ":", "\n", "                ", "finished", ".", "append", "(", "new_hyp", ")", "\n", "", "else", ":", "\n", "                ", "beam", ".", "append", "(", "new_hyp", ")", "\n", "", "", "", "finished", ".", "sort", "(", "key", "=", "operator", ".", "attrgetter", "(", "\"score\"", ")", ",", "reverse", "=", "True", ")", "\n", "return", "finished", "[", ":", "sample_size", "]", "# not returning all beams", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.encoder.Encoder.__init__": [[44, 47], ["seq2seq.graph_module.GraphModule.__init__", "seq2seq.configurable.Configurable.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "mode", ",", "name", ")", ":", "\n", "    ", "GraphModule", ".", "__init__", "(", "self", ",", "name", ")", "\n", "Configurable", ".", "__init__", "(", "self", ",", "params", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.encoder.Encoder._build": [[48, 50], ["encoder.Encoder.encode"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.encode"], ["", "def", "_build", "(", "self", ",", "inputs", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "self", ".", "encode", "(", "inputs", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.encoder.Encoder.encode": [[51, 64], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "encode", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Encodes an input sequence.\n\n    Args:\n      inputs: The inputs to encode. A float32 tensor of shape [B, T, ...].\n      sequence_length: The length of each input. An int32 tensor of shape [T].\n\n    Returns:\n      An `EncoderOutput` tuple containing the outputs and final state.\n    \"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.rnn_encoder.UnidirectionalRNNEncoder.__init__": [[76, 79], ["seq2seq.encoders.encoder.Encoder.__init__", "rnn_encoder._toggle_dropout"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.rnn_encoder._toggle_dropout"], ["def", "__init__", "(", "self", ",", "params", ",", "mode", ",", "name", "=", "\"forward_rnn_encoder\"", ")", ":", "\n", "    ", "super", "(", "UnidirectionalRNNEncoder", ",", "self", ")", ".", "__init__", "(", "params", ",", "mode", ",", "name", ")", "\n", "self", ".", "params", "[", "\"rnn_cell\"", "]", "=", "_toggle_dropout", "(", "self", ".", "params", "[", "\"rnn_cell\"", "]", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.rnn_encoder.UnidirectionalRNNEncoder.default_params": [[80, 85], ["rnn_encoder._default_rnn_cell_params"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.rnn_encoder._default_rnn_cell_params"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "return", "{", "\n", "\"rnn_cell\"", ":", "_default_rnn_cell_params", "(", ")", ",", "\n", "\"init_scale\"", ":", "0.04", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.rnn_encoder.UnidirectionalRNNEncoder.encode": [[87, 105], ["tensorflow.get_variable_scope", "tensorflow.get_variable_scope.set_initializer", "seq2seq.training.utils.get_rnn_cell", "tensorflow.nn.dynamic_rnn", "seq2seq.encoders.encoder.EncoderOutput", "tensorflow.random_uniform_initializer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.get_rnn_cell"], ["", "def", "encode", "(", "self", ",", "inputs", ",", "sequence_length", ",", "**", "kwargs", ")", ":", "\n", "    ", "scope", "=", "tf", ".", "get_variable_scope", "(", ")", "\n", "scope", ".", "set_initializer", "(", "tf", ".", "random_uniform_initializer", "(", "\n", "-", "self", ".", "params", "[", "\"init_scale\"", "]", ",", "\n", "self", ".", "params", "[", "\"init_scale\"", "]", ")", ")", "\n", "\n", "cell", "=", "training_utils", ".", "get_rnn_cell", "(", "**", "self", ".", "params", "[", "\"rnn_cell\"", "]", ")", "\n", "outputs", ",", "state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "cell", "=", "cell", ",", "\n", "inputs", "=", "inputs", ",", "\n", "sequence_length", "=", "sequence_length", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "**", "kwargs", ")", "\n", "return", "EncoderOutput", "(", "\n", "outputs", "=", "outputs", ",", "\n", "final_state", "=", "state", ",", "\n", "attention_values", "=", "outputs", ",", "\n", "attention_values_length", "=", "sequence_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.rnn_encoder.BidirectionalRNNEncoder.__init__": [[118, 121], ["seq2seq.encoders.encoder.Encoder.__init__", "rnn_encoder._toggle_dropout"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.rnn_encoder._toggle_dropout"], ["def", "__init__", "(", "self", ",", "params", ",", "mode", ",", "name", "=", "\"bidi_rnn_encoder\"", ")", ":", "\n", "    ", "super", "(", "BidirectionalRNNEncoder", ",", "self", ")", ".", "__init__", "(", "params", ",", "mode", ",", "name", ")", "\n", "self", ".", "params", "[", "\"rnn_cell\"", "]", "=", "_toggle_dropout", "(", "self", ".", "params", "[", "\"rnn_cell\"", "]", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.rnn_encoder.BidirectionalRNNEncoder.default_params": [[122, 127], ["rnn_encoder._default_rnn_cell_params"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.rnn_encoder._default_rnn_cell_params"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "return", "{", "\n", "\"rnn_cell\"", ":", "_default_rnn_cell_params", "(", ")", ",", "\n", "\"init_scale\"", ":", "0.04", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.rnn_encoder.BidirectionalRNNEncoder.encode": [[129, 153], ["tensorflow.get_variable_scope", "tensorflow.get_variable_scope.set_initializer", "seq2seq.training.utils.get_rnn_cell", "seq2seq.training.utils.get_rnn_cell", "tensorflow.nn.bidirectional_dynamic_rnn", "tensorflow.concat", "seq2seq.encoders.encoder.EncoderOutput", "tensorflow.random_uniform_initializer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.get_rnn_cell", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.get_rnn_cell", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.concat"], ["", "def", "encode", "(", "self", ",", "inputs", ",", "sequence_length", ",", "**", "kwargs", ")", ":", "\n", "    ", "scope", "=", "tf", ".", "get_variable_scope", "(", ")", "\n", "scope", ".", "set_initializer", "(", "tf", ".", "random_uniform_initializer", "(", "\n", "-", "self", ".", "params", "[", "\"init_scale\"", "]", ",", "\n", "self", ".", "params", "[", "\"init_scale\"", "]", ")", ")", "\n", "\n", "cell_fw", "=", "training_utils", ".", "get_rnn_cell", "(", "**", "self", ".", "params", "[", "\"rnn_cell\"", "]", ")", "\n", "cell_bw", "=", "training_utils", ".", "get_rnn_cell", "(", "**", "self", ".", "params", "[", "\"rnn_cell\"", "]", ")", "\n", "outputs", ",", "states", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "\n", "cell_fw", "=", "cell_fw", ",", "\n", "cell_bw", "=", "cell_bw", ",", "\n", "inputs", "=", "inputs", ",", "\n", "sequence_length", "=", "sequence_length", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "**", "kwargs", ")", "\n", "\n", "# Concatenate outputs and states of the forward and backward RNNs", "\n", "outputs_concat", "=", "tf", ".", "concat", "(", "outputs", ",", "2", ")", "\n", "\n", "return", "EncoderOutput", "(", "\n", "outputs", "=", "outputs_concat", ",", "\n", "final_state", "=", "states", ",", "\n", "attention_values", "=", "outputs_concat", ",", "\n", "attention_values_length", "=", "sequence_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.rnn_encoder.StackBidirectionalRNNEncoder.__init__": [[166, 169], ["seq2seq.encoders.encoder.Encoder.__init__", "rnn_encoder._toggle_dropout"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.rnn_encoder._toggle_dropout"], ["def", "__init__", "(", "self", ",", "params", ",", "mode", ",", "name", "=", "\"stacked_bidi_rnn_encoder\"", ")", ":", "\n", "    ", "super", "(", "StackBidirectionalRNNEncoder", ",", "self", ")", ".", "__init__", "(", "params", ",", "mode", ",", "name", ")", "\n", "self", ".", "params", "[", "\"rnn_cell\"", "]", "=", "_toggle_dropout", "(", "self", ".", "params", "[", "\"rnn_cell\"", "]", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.rnn_encoder.StackBidirectionalRNNEncoder.default_params": [[170, 175], ["rnn_encoder._default_rnn_cell_params"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.rnn_encoder._default_rnn_cell_params"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "return", "{", "\n", "\"rnn_cell\"", ":", "_default_rnn_cell_params", "(", ")", ",", "\n", "\"init_scale\"", ":", "0.04", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.rnn_encoder.StackBidirectionalRNNEncoder.encode": [[177, 203], ["tensorflow.get_variable_scope", "tensorflow.get_variable_scope.set_initializer", "seq2seq.training.utils.get_rnn_cell", "seq2seq.training.utils.get_rnn_cell", "rnn_encoder._unpack_cell", "rnn_encoder._unpack_cell", "tensorflow.contrib.rnn.python.ops.rnn.stack_bidirectional_dynamic_rnn", "seq2seq.encoders.encoder.EncoderOutput", "tensorflow.random_uniform_initializer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.get_rnn_cell", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.get_rnn_cell", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.rnn_encoder._unpack_cell", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.rnn_encoder._unpack_cell"], ["", "def", "encode", "(", "self", ",", "inputs", ",", "sequence_length", ",", "**", "kwargs", ")", ":", "\n", "    ", "scope", "=", "tf", ".", "get_variable_scope", "(", ")", "\n", "scope", ".", "set_initializer", "(", "tf", ".", "random_uniform_initializer", "(", "\n", "-", "self", ".", "params", "[", "\"init_scale\"", "]", ",", "\n", "self", ".", "params", "[", "\"init_scale\"", "]", ")", ")", "\n", "\n", "cell_fw", "=", "training_utils", ".", "get_rnn_cell", "(", "**", "self", ".", "params", "[", "\"rnn_cell\"", "]", ")", "\n", "cell_bw", "=", "training_utils", ".", "get_rnn_cell", "(", "**", "self", ".", "params", "[", "\"rnn_cell\"", "]", ")", "\n", "\n", "cells_fw", "=", "_unpack_cell", "(", "cell_fw", ")", "\n", "cells_bw", "=", "_unpack_cell", "(", "cell_bw", ")", "\n", "\n", "result", "=", "rnn", ".", "stack_bidirectional_dynamic_rnn", "(", "\n", "cells_fw", "=", "cells_fw", ",", "\n", "cells_bw", "=", "cells_bw", ",", "\n", "inputs", "=", "inputs", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "sequence_length", "=", "sequence_length", ",", "\n", "**", "kwargs", ")", "\n", "outputs_concat", ",", "_output_state_fw", ",", "_output_state_bw", "=", "result", "\n", "final_state", "=", "(", "_output_state_fw", ",", "_output_state_bw", ")", "\n", "return", "EncoderOutput", "(", "\n", "outputs", "=", "outputs_concat", ",", "\n", "final_state", "=", "final_state", ",", "\n", "attention_values", "=", "outputs_concat", ",", "\n", "attention_values_length", "=", "sequence_length", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.rnn_encoder._unpack_cell": [[30, 37], ["isinstance"], "function", ["None"], ["def", "_unpack_cell", "(", "cell", ")", ":", "\n", "  ", "\"\"\"Unpack the cells because the stack_bidirectional_dynamic_rnn\n  expects a list of cells, one per layer.\"\"\"", "\n", "if", "isinstance", "(", "cell", ",", "tf", ".", "contrib", ".", "rnn", ".", "MultiRNNCell", ")", ":", "\n", "    ", "return", "cell", ".", "_cells", "#pylint: disable=W0212", "\n", "", "else", ":", "\n", "    ", "return", "[", "cell", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.rnn_encoder._default_rnn_cell_params": [[39, 53], ["None"], "function", ["None"], ["", "", "def", "_default_rnn_cell_params", "(", ")", ":", "\n", "  ", "\"\"\"Creates default parameters used by multiple RNN encoders.\n  \"\"\"", "\n", "return", "{", "\n", "\"cell_class\"", ":", "\"BasicLSTMCell\"", ",", "\n", "\"cell_params\"", ":", "{", "\n", "\"num_units\"", ":", "128", "\n", "}", ",", "\n", "\"dropout_input_keep_prob\"", ":", "1.0", ",", "\n", "\"dropout_output_keep_prob\"", ":", "1.0", ",", "\n", "\"num_layers\"", ":", "1", ",", "\n", "\"residual_connections\"", ":", "False", ",", "\n", "\"residual_combiner\"", ":", "\"add\"", ",", "\n", "\"residual_dense\"", ":", "False", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.rnn_encoder._toggle_dropout": [[56, 64], ["copy.deepcopy"], "function", ["None"], ["", "def", "_toggle_dropout", "(", "cell_params", ",", "mode", ")", ":", "\n", "  ", "\"\"\"Disables dropout during eval/inference mode\n  \"\"\"", "\n", "cell_params", "=", "copy", ".", "deepcopy", "(", "cell_params", ")", "\n", "if", "mode", "!=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "    ", "cell_params", "[", "\"dropout_input_keep_prob\"", "]", "=", "1.0", "\n", "cell_params", "[", "\"dropout_output_keep_prob\"", "]", "=", "1.0", "\n", "", "return", "cell_params", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.image_encoder.InceptionV3Encoder.__init__": [[41, 43], ["seq2seq.encoders.encoder.Encoder.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "mode", ",", "name", "=", "\"image_encoder\"", ")", ":", "\n", "    ", "super", "(", "InceptionV3Encoder", ",", "self", ")", ".", "__init__", "(", "params", ",", "mode", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.image_encoder.InceptionV3Encoder.default_params": [[44, 49], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "return", "{", "\n", "\"resize_height\"", ":", "299", ",", "\n", "\"resize_width\"", ":", "299", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.image_encoder.InceptionV3Encoder.encode": [[51, 76], ["tensorflow.image.resize_images", "tensorflow.contrib.slim.python.slim.nets.inception_v3.inception_v3_base", "outputs.get_shape", "outputs.get_shape.as_list", "tensorflow.reshape", "tensorflow.contrib.slim.avg_pool2d", "tensorflow.contrib.slim.flatten", "seq2seq.encoders.encoder.EncoderOutput", "tensorflow.to_float", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape"], ["", "def", "encode", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "inputs", "=", "tf", ".", "image", ".", "resize_images", "(", "\n", "images", "=", "inputs", ",", "\n", "size", "=", "[", "self", ".", "params", "[", "\"resize_height\"", "]", ",", "self", ".", "params", "[", "\"resize_width\"", "]", "]", ",", "\n", "method", "=", "tf", ".", "image", ".", "ResizeMethod", ".", "BILINEAR", ")", "\n", "\n", "outputs", ",", "_", "=", "inception_v3_base", "(", "tf", ".", "to_float", "(", "inputs", ")", ")", "\n", "output_shape", "=", "outputs", ".", "get_shape", "(", ")", "#pylint: disable=E1101", "\n", "shape_list", "=", "output_shape", ".", "as_list", "(", ")", "\n", "\n", "# Take attentin over output elemnts in width and height dimension:", "\n", "# Shape: [B, W*H, ...]", "\n", "outputs_flat", "=", "tf", ".", "reshape", "(", "outputs", ",", "[", "shape_list", "[", "0", "]", ",", "-", "1", ",", "shape_list", "[", "-", "1", "]", "]", ")", "\n", "\n", "# Final state is the pooled output", "\n", "# Shape: [B, W*H*...]", "\n", "final_state", "=", "tf", ".", "contrib", ".", "slim", ".", "avg_pool2d", "(", "\n", "outputs", ",", "output_shape", "[", "1", ":", "3", "]", ",", "padding", "=", "\"VALID\"", ",", "scope", "=", "\"pool\"", ")", "\n", "final_state", "=", "tf", ".", "contrib", ".", "slim", ".", "flatten", "(", "outputs", ",", "scope", "=", "\"flatten\"", ")", "\n", "\n", "return", "EncoderOutput", "(", "\n", "outputs", "=", "outputs_flat", ",", "\n", "final_state", "=", "final_state", ",", "\n", "attention_values", "=", "outputs_flat", ",", "\n", "attention_values_length", "=", "tf", ".", "shape", "(", "outputs_flat", ")", "[", "1", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.pooling_encoder.PoolingEncoder.__init__": [[109, 113], ["seq2seq.encoders.encoder.Encoder.__init__", "pydoc.locate", "pydoc.locate"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "mode", ",", "name", "=", "\"pooling_encoder\"", ")", ":", "\n", "    ", "super", "(", "PoolingEncoder", ",", "self", ")", ".", "__init__", "(", "params", ",", "mode", ",", "name", ")", "\n", "self", ".", "_pooling_fn", "=", "locate", "(", "self", ".", "params", "[", "\"pooling_fn\"", "]", ")", "\n", "self", ".", "_combiner_fn", "=", "locate", "(", "self", ".", "params", "[", "\"position_embeddings.combiner_fn\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.pooling_encoder.PoolingEncoder.default_params": [[114, 124], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "return", "{", "\n", "\"dropout_keep_prob\"", ":", "0.8", ",", "\n", "\"pooling_fn\"", ":", "\"tensorflow.layers.average_pooling1d\"", ",", "\n", "\"pool_size\"", ":", "5", ",", "\n", "\"strides\"", ":", "1", ",", "\n", "\"position_embeddings.enable\"", ":", "True", ",", "\n", "\"position_embeddings.combiner_fn\"", ":", "\"tensorflow.multiply\"", ",", "\n", "\"position_embeddings.num_positions\"", ":", "100", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.pooling_encoder.PoolingEncoder.encode": [[126, 155], ["tensorflow.contrib.layers.dropout", "pooling_encoder.PoolingEncoder._pooling_fn", "tensorflow.reduce_mean", "seq2seq.encoders.encoder.EncoderOutput", "pooling_encoder._create_position_embedding", "pooling_encoder.PoolingEncoder._combiner_fn", "pooling_encoder.PoolingEncoder.get_shape().as_list", "tensorflow.shape", "pooling_encoder.PoolingEncoder.get_shape"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.pooling_encoder._create_position_embedding", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape"], ["", "def", "encode", "(", "self", ",", "inputs", ",", "sequence_length", ")", ":", "\n", "    ", "if", "self", ".", "params", "[", "\"position_embeddings.enable\"", "]", ":", "\n", "      ", "positions_embed", "=", "_create_position_embedding", "(", "\n", "embedding_dim", "=", "inputs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", ",", "\n", "num_positions", "=", "self", ".", "params", "[", "\"position_embeddings.num_positions\"", "]", ",", "\n", "lengths", "=", "sequence_length", ",", "\n", "maxlen", "=", "tf", ".", "shape", "(", "inputs", ")", "[", "1", "]", ")", "\n", "inputs", "=", "self", ".", "_combiner_fn", "(", "inputs", ",", "positions_embed", ")", "\n", "\n", "# Apply dropout", "\n", "", "inputs", "=", "tf", ".", "contrib", ".", "layers", ".", "dropout", "(", "\n", "inputs", "=", "inputs", ",", "\n", "keep_prob", "=", "self", ".", "params", "[", "\"dropout_keep_prob\"", "]", ",", "\n", "is_training", "=", "self", ".", "mode", "==", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "\n", "outputs", "=", "self", ".", "_pooling_fn", "(", "\n", "inputs", "=", "inputs", ",", "\n", "pool_size", "=", "self", ".", "params", "[", "\"pool_size\"", "]", ",", "\n", "strides", "=", "self", ".", "params", "[", "\"strides\"", "]", ",", "\n", "padding", "=", "\"SAME\"", ")", "\n", "\n", "# Final state is the average representation of the pooled embeddings", "\n", "final_state", "=", "tf", ".", "reduce_mean", "(", "outputs", ",", "1", ")", "\n", "\n", "return", "EncoderOutput", "(", "\n", "outputs", "=", "outputs", ",", "\n", "final_state", "=", "final_state", ",", "\n", "attention_values", "=", "inputs", ",", "\n", "attention_values_length", "=", "sequence_length", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.pooling_encoder.position_encoding": [[31, 52], ["numpy.ones", "range", "range", "float", "float", "float"], "function", ["None"], ["def", "position_encoding", "(", "sentence_size", ",", "embedding_size", ")", ":", "\n", "  ", "\"\"\"\n  Position Encoding described in section 4.1 of\n  End-To-End Memory Networks (https://arxiv.org/abs/1503.08895).\n\n  Args:\n    sentence_size: length of the sentence\n    embedding_size: dimensionality of the embeddings\n\n  Returns:\n    A numpy array of shape [sentence_size, embedding_size] containing\n    the fixed position encodings for each sentence position.\n  \"\"\"", "\n", "encoding", "=", "np", ".", "ones", "(", "(", "sentence_size", ",", "embedding_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ls", "=", "sentence_size", "+", "1", "\n", "le", "=", "embedding_size", "+", "1", "\n", "for", "k", "in", "range", "(", "1", ",", "le", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "1", ",", "ls", ")", ":", "\n", "      ", "encoding", "[", "j", "-", "1", ",", "k", "-", "1", "]", "=", "(", "1.0", "-", "j", "/", "float", "(", "ls", ")", ")", "-", "(", "\n", "k", "/", "float", "(", "le", ")", ")", "*", "(", "1.", "-", "2.", "*", "j", "/", "float", "(", "ls", ")", ")", "\n", "", "", "return", "encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.pooling_encoder._create_position_embedding": [[54, 87], ["tensorflow.constant", "tensorflow.tile", "tensorflow.sequence_mask", "pooling_encoder.position_encoding", "tensorflow.shape", "tensorflow.expand_dims"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.pooling_encoder.position_encoding", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape"], ["", "def", "_create_position_embedding", "(", "embedding_dim", ",", "num_positions", ",", "lengths", ",", "maxlen", ")", ":", "\n", "  ", "\"\"\"Creates position embeddings.\n\n  Args:\n    embedding_dim: Dimensionality of the embeddings. An integer.\n    num_positions: The number of positions to be embedded. For example,\n      if you have inputs of length up to 100, this should be 100. An integer.\n    lengths: The lengths of the inputs to create position embeddings for.\n      An int32 tensor of shape `[batch_size]`.\n    maxlen: The maximum length of the input sequence to create position\n      embeddings for. An int32 tensor.\n\n  Returns:\n    A tensor of shape `[batch_size, maxlen, embedding_dim]` that contains\n    embeddings for each position. All elements past `lengths` are zero.\n  \"\"\"", "\n", "# Create constant position encodings", "\n", "position_encodings", "=", "tf", ".", "constant", "(", "\n", "position_encoding", "(", "num_positions", ",", "embedding_dim", ")", ",", "\n", "name", "=", "\"position_encoding\"", ")", "\n", "\n", "# Slice to size of current sequence", "\n", "pe_slice", "=", "position_encodings", "[", ":", "maxlen", ",", ":", "]", "\n", "# Replicate encodings for each element in the batch", "\n", "batch_size", "=", "tf", ".", "shape", "(", "lengths", ")", "[", "0", "]", "\n", "pe_batch", "=", "tf", ".", "tile", "(", "[", "pe_slice", "]", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "\n", "# Mask out positions that are padded", "\n", "positions_mask", "=", "tf", ".", "sequence_mask", "(", "\n", "lengths", "=", "lengths", ",", "maxlen", "=", "maxlen", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "positions_embed", "=", "pe_batch", "*", "tf", ".", "expand_dims", "(", "positions_mask", ",", "2", ")", "\n", "\n", "return", "positions_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.conv_encoder.ConvEncoder.__init__": [[53, 56], ["seq2seq.encoders.encoder.Encoder.__init__", "pydoc.locate"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "mode", ",", "name", "=", "\"conv_encoder\"", ")", ":", "\n", "    ", "super", "(", "ConvEncoder", ",", "self", ")", ".", "__init__", "(", "params", ",", "mode", ",", "name", ")", "\n", "self", ".", "_combiner_fn", "=", "locate", "(", "self", ".", "params", "[", "\"position_embeddings.combiner_fn\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.conv_encoder.ConvEncoder.default_params": [[57, 70], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "return", "{", "\n", "\"attention_cnn.units\"", ":", "512", ",", "\n", "\"attention_cnn.kernel_size\"", ":", "3", ",", "\n", "\"attention_cnn.layers\"", ":", "15", ",", "\n", "\"embedding_dropout_keep_prob\"", ":", "0.8", ",", "\n", "\"output_cnn.units\"", ":", "256", ",", "\n", "\"output_cnn.kernel_size\"", ":", "3", ",", "\n", "\"output_cnn.layers\"", ":", "5", ",", "\n", "\"position_embeddings.enable\"", ":", "True", ",", "\n", "\"position_embeddings.combiner_fn\"", ":", "\"tensorflow.multiply\"", ",", "\n", "\"position_embeddings.num_positions\"", ":", "100", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.conv_encoder.ConvEncoder.encode": [[72, 122], ["tensorflow.contrib.layers.dropout", "tensorflow.reduce_mean", "seq2seq.encoders.encoder.EncoderOutput", "seq2seq.encoders.pooling_encoder._create_position_embedding", "conv_encoder.ConvEncoder._combiner_fn", "tensorflow.variable_scope", "range", "tensorflow.variable_scope", "range", "tensorflow.contrib.layers.conv2d", "tensorflow.tanh", "tensorflow.contrib.layers.conv2d", "tensorflow.tanh", "conv_encoder.ConvEncoder.get_shape().as_list", "tensorflow.shape", "conv_encoder.ConvEncoder.get_shape"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.encoders.pooling_encoder._create_position_embedding", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape"], ["", "def", "encode", "(", "self", ",", "inputs", ",", "sequence_length", ")", ":", "\n", "    ", "if", "self", ".", "params", "[", "\"position_embeddings.enable\"", "]", ":", "\n", "      ", "positions_embed", "=", "_create_position_embedding", "(", "\n", "embedding_dim", "=", "inputs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", ",", "\n", "num_positions", "=", "self", ".", "params", "[", "\"position_embeddings.num_positions\"", "]", ",", "\n", "lengths", "=", "sequence_length", ",", "\n", "maxlen", "=", "tf", ".", "shape", "(", "inputs", ")", "[", "1", "]", ")", "\n", "inputs", "=", "self", ".", "_combiner_fn", "(", "inputs", ",", "positions_embed", ")", "\n", "\n", "# Apply dropout to embeddings", "\n", "", "inputs", "=", "tf", ".", "contrib", ".", "layers", ".", "dropout", "(", "\n", "inputs", "=", "inputs", ",", "\n", "keep_prob", "=", "self", ".", "params", "[", "\"embedding_dropout_keep_prob\"", "]", ",", "\n", "is_training", "=", "self", ".", "mode", "==", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"cnn_a\"", ")", ":", "\n", "      ", "cnn_a_output", "=", "inputs", "\n", "for", "layer_idx", "in", "range", "(", "self", ".", "params", "[", "\"attention_cnn.layers\"", "]", ")", ":", "\n", "        ", "next_layer", "=", "tf", ".", "contrib", ".", "layers", ".", "conv2d", "(", "\n", "inputs", "=", "cnn_a_output", ",", "\n", "num_outputs", "=", "self", ".", "params", "[", "\"attention_cnn.units\"", "]", ",", "\n", "kernel_size", "=", "self", ".", "params", "[", "\"attention_cnn.kernel_size\"", "]", ",", "\n", "padding", "=", "\"SAME\"", ",", "\n", "activation_fn", "=", "None", ")", "\n", "# Add a residual connection, except for the first layer", "\n", "if", "layer_idx", ">", "0", ":", "\n", "          ", "next_layer", "+=", "cnn_a_output", "\n", "", "cnn_a_output", "=", "tf", ".", "tanh", "(", "next_layer", ")", "\n", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "\"cnn_c\"", ")", ":", "\n", "      ", "cnn_c_output", "=", "inputs", "\n", "for", "layer_idx", "in", "range", "(", "self", ".", "params", "[", "\"output_cnn.layers\"", "]", ")", ":", "\n", "        ", "next_layer", "=", "tf", ".", "contrib", ".", "layers", ".", "conv2d", "(", "\n", "inputs", "=", "cnn_c_output", ",", "\n", "num_outputs", "=", "self", ".", "params", "[", "\"output_cnn.units\"", "]", ",", "\n", "kernel_size", "=", "self", ".", "params", "[", "\"output_cnn.kernel_size\"", "]", ",", "\n", "padding", "=", "\"SAME\"", ",", "\n", "activation_fn", "=", "None", ")", "\n", "# Add a residual connection, except for the first layer", "\n", "if", "layer_idx", ">", "0", ":", "\n", "          ", "next_layer", "+=", "cnn_c_output", "\n", "", "cnn_c_output", "=", "tf", ".", "tanh", "(", "next_layer", ")", "\n", "\n", "", "", "final_state", "=", "tf", ".", "reduce_mean", "(", "cnn_c_output", ",", "1", ")", "\n", "\n", "return", "EncoderOutput", "(", "\n", "outputs", "=", "cnn_a_output", ",", "\n", "final_state", "=", "final_state", ",", "\n", "attention_values", "=", "cnn_c_output", ",", "\n", "attention_values_length", "=", "sequence_length", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.inference.beam_search.gather_tree_py": [[73, 86], ["numpy.zeros_like", "range", "numpy.array().astype", "reversed", "range", "numpy.array"], "function", ["None"], ["", "def", "gather_tree_py", "(", "values", ",", "parents", ")", ":", "\n", "  ", "\"\"\"Gathers path through a tree backwards from the leave nodes. Used\n  to reconstruct beams given their parents.\"\"\"", "\n", "beam_length", "=", "values", ".", "shape", "[", "0", "]", "\n", "num_beams", "=", "values", ".", "shape", "[", "1", "]", "\n", "res", "=", "np", ".", "zeros_like", "(", "values", ")", "\n", "res", "[", "-", "1", ",", ":", "]", "=", "values", "[", "-", "1", ",", ":", "]", "\n", "for", "beam_id", "in", "range", "(", "num_beams", ")", ":", "\n", "    ", "parent", "=", "parents", "[", "-", "1", "]", "[", "beam_id", "]", "\n", "for", "level", "in", "reversed", "(", "range", "(", "beam_length", "-", "1", ")", ")", ":", "\n", "      ", "res", "[", "level", ",", "beam_id", "]", "=", "values", "[", "level", "]", "[", "parent", "]", "\n", "parent", "=", "parents", "[", "level", "]", "[", "parent", "]", "\n", "", "", "return", "np", ".", "array", "(", "res", ")", ".", "astype", "(", "values", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.inference.beam_search.gather_tree": [[88, 94], ["tensorflow.py_func", "tf.py_func.set_shape", "values.get_shape().as_list", "values.get_shape"], "function", ["None"], ["", "def", "gather_tree", "(", "values", ",", "parents", ")", ":", "\n", "  ", "\"\"\"Tensor version of gather_tree_py\"\"\"", "\n", "res", "=", "tf", ".", "py_func", "(", "\n", "func", "=", "gather_tree_py", ",", "inp", "=", "[", "values", ",", "parents", "]", ",", "Tout", "=", "values", ".", "dtype", ")", "\n", "res", ".", "set_shape", "(", "values", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.inference.beam_search.create_initial_beam_state": [[96, 112], ["beam_search.BeamSearchState", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros"], "function", ["None"], ["", "def", "create_initial_beam_state", "(", "config", ")", ":", "\n", "  ", "\"\"\"Creates an instance of `BeamState` that can be used on the first\n  call to `beam_step`.\n\n  Args:\n    config: A BeamSearchConfig\n\n  Returns:\n    An instance of `BeamState`.\n  \"\"\"", "\n", "return", "BeamSearchState", "(", "\n", "log_probs", "=", "tf", ".", "zeros", "(", "[", "config", ".", "beam_width", "]", ")", ",", "\n", "finished", "=", "tf", ".", "zeros", "(", "\n", "[", "config", ".", "beam_width", "]", ",", "dtype", "=", "tf", ".", "bool", ")", ",", "\n", "lengths", "=", "tf", ".", "zeros", "(", "\n", "[", "config", ".", "beam_width", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.inference.beam_search.length_penalty": [[114, 128], ["tensorflow.div", "tensorflow.to_float"], "function", ["None"], ["", "def", "length_penalty", "(", "sequence_lengths", ",", "penalty_factor", ")", ":", "\n", "  ", "\"\"\"Calculates the length penalty according to\n  https://arxiv.org/abs/1609.08144\n\n   Args:\n    sequence_lengths: The sequence length of all hypotheses, a tensor\n      of shape [beam_size, vocab_size].\n    penalty_factor: A scalar that weights the length penalty.\n\n  Returns:\n    The length penalty factor, a tensor fo shape [beam_size].\n   \"\"\"", "\n", "return", "tf", ".", "div", "(", "(", "5.", "+", "tf", ".", "to_float", "(", "sequence_lengths", ")", ")", "**", "penalty_factor", ",", "(", "5.", "+", "1.", ")", "\n", "**", "penalty_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.inference.beam_search.hyp_score": [[130, 141], ["beam_search.length_penalty"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.inference.beam_search.length_penalty"], ["", "def", "hyp_score", "(", "log_probs", ",", "sequence_lengths", ",", "config", ")", ":", "\n", "  ", "\"\"\"Calculates scores for beam search hypotheses.\n  \"\"\"", "\n", "\n", "# Calculate the length penality", "\n", "length_penality_", "=", "length_penalty", "(", "\n", "sequence_lengths", "=", "sequence_lengths", ",", "\n", "penalty_factor", "=", "config", ".", "length_penalty_weight", ")", "\n", "\n", "score", "=", "log_probs", "/", "length_penality_", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.inference.beam_search.choose_top_k": [[143, 148], ["tensorflow.nn.top_k"], "function", ["None"], ["", "def", "choose_top_k", "(", "scores_flat", ",", "config", ")", ":", "\n", "  ", "\"\"\"Chooses the top-k beams as successors.\n  \"\"\"", "\n", "next_beam_scores", ",", "word_indices", "=", "tf", ".", "nn", ".", "top_k", "(", "scores_flat", ",", "k", "=", "config", ".", "beam_width", ")", "\n", "return", "next_beam_scores", ",", "word_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.inference.beam_search.nest_map": [[150, 162], ["tensorflow.python.util.nest.is_sequence", "tensorflow.python.util.nest.flatten", "tensorflow.python.util.nest.pack_sequence_as", "map_fn", "tensorflow.identity", "map_fn"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.identity"], ["", "def", "nest_map", "(", "inputs", ",", "map_fn", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Applies a function to (possibly nested) tuple of tensors.\n  \"\"\"", "\n", "if", "nest", ".", "is_sequence", "(", "inputs", ")", ":", "\n", "    ", "inputs_flat", "=", "nest", ".", "flatten", "(", "inputs", ")", "\n", "y_flat", "=", "[", "map_fn", "(", "_", ")", "for", "_", "in", "inputs_flat", "]", "\n", "outputs", "=", "nest", ".", "pack_sequence_as", "(", "inputs", ",", "y_flat", ")", "\n", "", "else", ":", "\n", "    ", "outputs", "=", "map_fn", "(", "inputs", ")", "\n", "", "if", "name", ":", "\n", "    ", "outputs", "=", "tf", ".", "identity", "(", "outputs", ",", "name", "=", "name", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.inference.beam_search.mask_probs": [[164, 194], ["tensorflow.expand_dims", "tensorflow.one_hot", "tensorflow.shape", "tensorflow.to_float", "tensorflow.to_float"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape"], ["", "def", "mask_probs", "(", "probs", ",", "eos_token", ",", "finished", ")", ":", "\n", "  ", "\"\"\"Masks log probabilities such that finished beams\n  allocate all probability mass to eos. Unfinished beams remain unchanged.\n\n  Args:\n    probs: Log probabiltiies of shape `[beam_width, vocab_size]`\n    eos_token: An int32 id corresponding to the EOS token to allocate\n      probability to\n    finished: A boolean tensor of shape `[beam_width]` that specifies which\n      elements in the beam are finished already.\n\n  Returns:\n    A tensor of shape `[beam_width, vocab_size]`, where unfinished beams\n    stay unchanged and finished beams are replaced with a tensor that has all\n    probability on the EOS token.\n  \"\"\"", "\n", "vocab_size", "=", "tf", ".", "shape", "(", "probs", ")", "[", "1", "]", "\n", "finished_mask", "=", "tf", ".", "expand_dims", "(", "tf", ".", "to_float", "(", "1.", "-", "tf", ".", "to_float", "(", "finished", ")", ")", ",", "1", ")", "\n", "# These examples are not finished and we leave them", "\n", "non_finished_examples", "=", "finished_mask", "*", "probs", "\n", "# All finished examples are replaced with a vector that has all", "\n", "# probability on EOS", "\n", "finished_row", "=", "tf", ".", "one_hot", "(", "\n", "eos_token", ",", "\n", "vocab_size", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "on_value", "=", "0.", ",", "\n", "off_value", "=", "tf", ".", "float32", ".", "min", ")", "\n", "finished_examples", "=", "(", "1.", "-", "finished_mask", ")", "*", "finished_row", "\n", "return", "finished_examples", "+", "non_finished_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.inference.beam_search.beam_search_step": [[196, 280], ["tensorflow.nn.log_softmax", "beam_search.mask_probs", "tensorflow.one_hot", "beam_search.hyp_score", "tensorflow.reshape", "tensorflow.cond", "config.choose_successors_fn", "next_beam_scores.set_shape", "word_indices.set_shape", "tensorflow.reshape", "tensorflow.gather", "tf.gather.set_shape", "tensorflow.mod", "tensorflow.div", "tensorflow.logical_or", "tensorflow.to_int32", "tensorflow.gather", "beam_search.BeamSearchState", "beam_search.BeamSearchStepOutput", "tensorflow.expand_dims", "tensorflow.to_int32", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.gather", "tensorflow.equal", "tensorflow.not_equal", "tensorflow.convert_to_tensor", "tensorflow.to_int32"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.inference.beam_search.mask_probs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.inference.beam_search.hyp_score"], ["", "def", "beam_search_step", "(", "time_", ",", "logits", ",", "beam_state", ",", "config", ")", ":", "\n", "  ", "\"\"\"Performs a single step of Beam Search Decoding.\n\n  Args:\n    time_: Beam search time step, should start at 0. At time 0 we assume\n      that all beams are equal and consider only the first beam for\n      continuations.\n    logits: Logits at the current time step. A tensor of shape `[B, vocab_size]`\n    beam_state: Current state of the beam search. An instance of `BeamState`\n    config: An instance of `BeamSearchConfig`\n\n  Returns:\n    A new beam state.\n  \"\"\"", "\n", "\n", "# Calculate the current lengths of the predictions", "\n", "prediction_lengths", "=", "beam_state", ".", "lengths", "\n", "previously_finished", "=", "beam_state", ".", "finished", "\n", "\n", "# Calculate the total log probs for the new hypotheses", "\n", "# Final Shape: [beam_width, vocab_size]", "\n", "probs", "=", "tf", ".", "nn", ".", "log_softmax", "(", "logits", ")", "\n", "probs", "=", "mask_probs", "(", "probs", ",", "config", ".", "eos_token", ",", "previously_finished", ")", "\n", "total_probs", "=", "tf", ".", "expand_dims", "(", "beam_state", ".", "log_probs", ",", "1", ")", "+", "probs", "\n", "\n", "# Calculate the continuation lengths", "\n", "# We add 1 to all continuations that are not EOS and were not", "\n", "# finished previously", "\n", "lengths_to_add", "=", "tf", ".", "one_hot", "(", "[", "config", ".", "eos_token", "]", "*", "config", ".", "beam_width", ",", "\n", "config", ".", "vocab_size", ",", "0", ",", "1", ")", "\n", "add_mask", "=", "(", "1", "-", "tf", ".", "to_int32", "(", "previously_finished", ")", ")", "\n", "lengths_to_add", "=", "tf", ".", "expand_dims", "(", "add_mask", ",", "1", ")", "*", "lengths_to_add", "\n", "new_prediction_lengths", "=", "tf", ".", "expand_dims", "(", "prediction_lengths", ",", "\n", "1", ")", "+", "lengths_to_add", "\n", "\n", "# Calculate the scores for each beam", "\n", "scores", "=", "hyp_score", "(", "\n", "log_probs", "=", "total_probs", ",", "\n", "sequence_lengths", "=", "new_prediction_lengths", ",", "\n", "config", "=", "config", ")", "\n", "\n", "scores_flat", "=", "tf", ".", "reshape", "(", "scores", ",", "[", "-", "1", "]", ")", "\n", "# During the first time step we only consider the initial beam", "\n", "scores_flat", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "convert_to_tensor", "(", "time_", ")", ">", "0", ",", "lambda", ":", "scores_flat", ",", "lambda", ":", "scores", "[", "0", "]", ")", "\n", "\n", "# Pick the next beams according to the specified successors function", "\n", "next_beam_scores", ",", "word_indices", "=", "config", ".", "choose_successors_fn", "(", "scores_flat", ",", "\n", "config", ")", "\n", "next_beam_scores", ".", "set_shape", "(", "[", "config", ".", "beam_width", "]", ")", "\n", "word_indices", ".", "set_shape", "(", "[", "config", ".", "beam_width", "]", ")", "\n", "\n", "# Pick out the probs, beam_ids, and states according to the chosen predictions", "\n", "total_probs_flat", "=", "tf", ".", "reshape", "(", "total_probs", ",", "[", "-", "1", "]", ",", "name", "=", "\"total_probs_flat\"", ")", "\n", "next_beam_probs", "=", "tf", ".", "gather", "(", "total_probs_flat", ",", "word_indices", ")", "\n", "next_beam_probs", ".", "set_shape", "(", "[", "config", ".", "beam_width", "]", ")", "\n", "next_word_ids", "=", "tf", ".", "mod", "(", "word_indices", ",", "config", ".", "vocab_size", ")", "\n", "next_beam_ids", "=", "tf", ".", "div", "(", "word_indices", ",", "config", ".", "vocab_size", ")", "\n", "\n", "# Append new ids to current predictions", "\n", "next_finished", "=", "tf", ".", "logical_or", "(", "\n", "tf", ".", "gather", "(", "beam_state", ".", "finished", ",", "next_beam_ids", ")", ",", "\n", "tf", ".", "equal", "(", "next_word_ids", ",", "config", ".", "eos_token", ")", ")", "\n", "\n", "# Calculate the length of the next predictions.", "\n", "# 1. Finished beams remain unchanged", "\n", "# 2. Beams that are now finished (EOS predicted) remain unchanged", "\n", "# 3. Beams that are not yet finished have their length increased by 1", "\n", "lengths_to_add", "=", "tf", ".", "to_int32", "(", "tf", ".", "not_equal", "(", "next_word_ids", ",", "config", ".", "eos_token", ")", ")", "\n", "lengths_to_add", "=", "(", "1", "-", "tf", ".", "to_int32", "(", "next_finished", ")", ")", "*", "lengths_to_add", "\n", "next_prediction_len", "=", "tf", ".", "gather", "(", "beam_state", ".", "lengths", ",", "next_beam_ids", ")", "\n", "next_prediction_len", "+=", "lengths_to_add", "\n", "\n", "next_state", "=", "BeamSearchState", "(", "\n", "log_probs", "=", "next_beam_probs", ",", "\n", "lengths", "=", "next_prediction_len", ",", "\n", "finished", "=", "next_finished", ")", "\n", "\n", "output", "=", "BeamSearchStepOutput", "(", "\n", "scores", "=", "next_beam_scores", ",", "\n", "predicted_ids", "=", "next_word_ids", ",", "\n", "beam_parent_ids", "=", "next_beam_ids", ")", "\n", "\n", "return", "output", ",", "next_state", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.inference.inference.create_inference_graph": [[26, 55], ["hasattr", "seq2seq.training.utils.create_input_fn", "training_utils.create_input_fn.", "model", "tensorflow.logging.info"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.create_input_fn"], ["def", "create_inference_graph", "(", "model", ",", "input_pipeline", ",", "batch_size", "=", "32", ")", ":", "\n", "  ", "\"\"\"Creates a graph to perform inference.\n\n  Args:\n    task: An `InferenceTask` instance.\n    input_pipeline: An instance of `InputPipeline` that defines\n      how to read and parse data.\n    batch_size: The batch size used for inference\n\n  Returns:\n    The return value of the model function, typically a tuple of\n    (predictions, loss, train_op).\n  \"\"\"", "\n", "\n", "# TODO: This doesn't really belong here.", "\n", "# How to get rid of this?", "\n", "if", "hasattr", "(", "model", ",", "\"use_beam_search\"", ")", ":", "\n", "    ", "if", "model", ".", "use_beam_search", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"Setting batch size to 1 for beam search.\"", ")", "\n", "batch_size", "=", "1", "\n", "\n", "", "", "input_fn", "=", "training_utils", ".", "create_input_fn", "(", "\n", "pipeline", "=", "input_pipeline", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "allow_smaller_final_batch", "=", "True", ")", "\n", "\n", "# Build the graph", "\n", "features", ",", "labels", "=", "input_fn", "(", ")", "\n", "return", "model", "(", "features", "=", "features", ",", "labels", "=", "labels", ",", "params", "=", "None", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.bleu.moses_multi_bleu": [[33, 94], ["tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile.write", "tempfile.NamedTemporaryFile.write", "tempfile.NamedTemporaryFile.flush", "tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile.write", "tempfile.NamedTemporaryFile.write", "tempfile.NamedTemporaryFile.flush", "tempfile.NamedTemporaryFile.close", "tempfile.NamedTemporaryFile.close", "numpy.float32", "numpy.size", "numpy.float32", "six.moves.urllib.request.urlretrieve", "os.chmod", "open", "tensorflow.logging.info", "os.path.dirname", "os.path.abspath", "os.path.join", "subprocess.check_output", "bleu_out.decode.decode", "re.search().group", "float", "os.path.realpath", "os.path.join", "numpy.float32", "re.search", "tensorflow.logging.warning", "tensorflow.logging.warning"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["def", "moses_multi_bleu", "(", "hypotheses", ",", "references", ",", "lowercase", "=", "False", ")", ":", "\n", "  ", "\"\"\"Calculate the bleu score for hypotheses and references\n  using the MOSES ulti-bleu.perl script.\n\n  Args:\n    hypotheses: A numpy array of strings where each string is a single example.\n    references: A numpy array of strings where each string is a single example.\n    lowercase: If true, pass the \"-lc\" flag to the multi-bleu script\n\n  Returns:\n    The BLEU score as a float32 value.\n  \"\"\"", "\n", "\n", "if", "np", ".", "size", "(", "hypotheses", ")", "==", "0", ":", "\n", "    ", "return", "np", ".", "float32", "(", "0.0", ")", "\n", "\n", "# Get MOSES multi-bleu script", "\n", "", "try", ":", "\n", "    ", "multi_bleu_path", ",", "_", "=", "urllib", ".", "request", ".", "urlretrieve", "(", "\n", "\"https://raw.githubusercontent.com/moses-smt/mosesdecoder/\"", "\n", "\"master/scripts/generic/multi-bleu.perl\"", ")", "\n", "os", ".", "chmod", "(", "multi_bleu_path", ",", "0o755", ")", "\n", "", "except", ":", "#pylint: disable=W0702", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Unable to fetch multi-bleu.perl script, using local.\"", ")", "\n", "metrics_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "bin_dir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "metrics_dir", ",", "\"..\"", ",", "\"..\"", ",", "\"bin\"", ")", ")", "\n", "multi_bleu_path", "=", "os", ".", "path", ".", "join", "(", "bin_dir", ",", "\"tools/multi-bleu.perl\"", ")", "\n", "\n", "# Dump hypotheses and references to tempfiles", "\n", "", "hypothesis_file", "=", "tempfile", ".", "NamedTemporaryFile", "(", ")", "\n", "hypothesis_file", ".", "write", "(", "\"\\n\"", ".", "join", "(", "hypotheses", ")", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "hypothesis_file", ".", "write", "(", "b\"\\n\"", ")", "\n", "hypothesis_file", ".", "flush", "(", ")", "\n", "reference_file", "=", "tempfile", ".", "NamedTemporaryFile", "(", ")", "\n", "reference_file", ".", "write", "(", "\"\\n\"", ".", "join", "(", "references", ")", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "reference_file", ".", "write", "(", "b\"\\n\"", ")", "\n", "reference_file", ".", "flush", "(", ")", "\n", "\n", "# Calculate BLEU using multi-bleu script", "\n", "with", "open", "(", "hypothesis_file", ".", "name", ",", "\"r\"", ")", "as", "read_pred", ":", "\n", "    ", "bleu_cmd", "=", "[", "multi_bleu_path", "]", "\n", "if", "lowercase", ":", "\n", "      ", "bleu_cmd", "+=", "[", "\"-lc\"", "]", "\n", "", "bleu_cmd", "+=", "[", "reference_file", ".", "name", "]", "\n", "try", ":", "\n", "      ", "bleu_out", "=", "subprocess", ".", "check_output", "(", "\n", "bleu_cmd", ",", "stdin", "=", "read_pred", ",", "stderr", "=", "subprocess", ".", "STDOUT", ")", "\n", "bleu_out", "=", "bleu_out", ".", "decode", "(", "\"utf-8\"", ")", "\n", "bleu_score", "=", "re", ".", "search", "(", "r\"BLEU = (.+?),\"", ",", "bleu_out", ")", ".", "group", "(", "1", ")", "\n", "bleu_score", "=", "float", "(", "bleu_score", ")", "\n", "", "except", "subprocess", ".", "CalledProcessError", "as", "error", ":", "\n", "      ", "if", "error", ".", "output", "is", "not", "None", ":", "\n", "        ", "tf", ".", "logging", ".", "warning", "(", "\"multi-bleu.perl script returned non-zero exit code\"", ")", "\n", "tf", ".", "logging", ".", "warning", "(", "error", ".", "output", ")", "\n", "", "bleu_score", "=", "np", ".", "float32", "(", "0.0", ")", "\n", "\n", "# Close temp files", "\n", "", "", "hypothesis_file", ".", "close", "(", ")", "\n", "reference_file", ".", "close", "(", ")", "\n", "\n", "return", "np", ".", "float32", "(", "bleu_score", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._get_ngrams": [[32, 48], ["set", "len", "range", "set.add", "tuple"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add"], ["def", "_get_ngrams", "(", "n", ",", "text", ")", ":", "\n", "  ", "\"\"\"Calcualtes n-grams.\n\n  Args:\n    n: which n-grams to calculate\n    text: An array of tokens\n\n  Returns:\n    A set of n-grams\n  \"\"\"", "\n", "ngram_set", "=", "set", "(", ")", "\n", "text_length", "=", "len", "(", "text", ")", "\n", "max_index_ngram_start", "=", "text_length", "-", "n", "\n", "for", "i", "in", "range", "(", "max_index_ngram_start", "+", "1", ")", ":", "\n", "    ", "ngram_set", ".", "add", "(", "tuple", "(", "text", "[", "i", ":", "i", "+", "n", "]", ")", ")", "\n", "", "return", "ngram_set", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._split_into_words": [[50, 53], ["list", "itertools.chain", "_.split"], "function", ["None"], ["", "def", "_split_into_words", "(", "sentences", ")", ":", "\n", "  ", "\"\"\"Splits multiple sentences into words and flattens the result\"\"\"", "\n", "return", "list", "(", "itertools", ".", "chain", "(", "*", "[", "_", ".", "split", "(", "\" \"", ")", "for", "_", "in", "sentences", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._get_word_ngrams": [[55, 63], ["rouge._split_into_words", "rouge._get_ngrams", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._split_into_words", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._get_ngrams"], ["", "def", "_get_word_ngrams", "(", "n", ",", "sentences", ")", ":", "\n", "  ", "\"\"\"Calculates word n-grams for multiple sentences.\n  \"\"\"", "\n", "assert", "len", "(", "sentences", ")", ">", "0", "\n", "assert", "n", ">", "0", "\n", "\n", "words", "=", "_split_into_words", "(", "sentences", ")", "\n", "return", "_get_ngrams", "(", "n", ",", "words", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._len_lcs": [[65, 81], ["rouge._lcs", "len", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._lcs"], ["", "def", "_len_lcs", "(", "x", ",", "y", ")", ":", "\n", "  ", "\"\"\"\n  Returns the length of the Longest Common Subsequence between sequences x\n  and y.\n  Source: http://www.algorithmist.com/index.php/Longest_Common_Subsequence\n\n  Args:\n    x: sequence of words\n    y: sequence of words\n\n  Returns\n    integer: Length of LCS between x and y\n  \"\"\"", "\n", "table", "=", "_lcs", "(", "x", ",", "y", ")", "\n", "n", ",", "m", "=", "len", "(", "x", ")", ",", "len", "(", "y", ")", "\n", "return", "table", "[", "n", ",", "m", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._lcs": [[83, 108], ["dict", "range", "len", "len", "range", "max"], "function", ["None"], ["", "def", "_lcs", "(", "x", ",", "y", ")", ":", "\n", "  ", "\"\"\"\n  Computes the length of the longest common subsequence (lcs) between two\n  strings. The implementation below uses a DP programming algorithm and runs\n  in O(nm) time where n = len(x) and m = len(y).\n  Source: http://www.algorithmist.com/index.php/Longest_Common_Subsequence\n\n  Args:\n    x: collection of words\n    y: collection of words\n\n  Returns:\n    Table of dictionary of coord and len lcs\n  \"\"\"", "\n", "n", ",", "m", "=", "len", "(", "x", ")", ",", "len", "(", "y", ")", "\n", "table", "=", "dict", "(", ")", "\n", "for", "i", "in", "range", "(", "n", "+", "1", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", "+", "1", ")", ":", "\n", "      ", "if", "i", "==", "0", "or", "j", "==", "0", ":", "\n", "        ", "table", "[", "i", ",", "j", "]", "=", "0", "\n", "", "elif", "x", "[", "i", "-", "1", "]", "==", "y", "[", "j", "-", "1", "]", ":", "\n", "        ", "table", "[", "i", ",", "j", "]", "=", "table", "[", "i", "-", "1", ",", "j", "-", "1", "]", "+", "1", "\n", "", "else", ":", "\n", "        ", "table", "[", "i", ",", "j", "]", "=", "max", "(", "table", "[", "i", "-", "1", ",", "j", "]", ",", "table", "[", "i", ",", "j", "-", "1", "]", ")", "\n", "", "", "", "return", "table", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._recon_lcs": [[110, 138], ["rouge._lcs", "tuple", "len", "len", "map", "rouge._recon_lcs._recon"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._lcs"], ["", "def", "_recon_lcs", "(", "x", ",", "y", ")", ":", "\n", "  ", "\"\"\"\n  Returns the Longest Subsequence between x and y.\n  Source: http://www.algorithmist.com/index.php/Longest_Common_Subsequence\n\n  Args:\n    x: sequence of words\n    y: sequence of words\n\n  Returns:\n    sequence: LCS of x and y\n  \"\"\"", "\n", "i", ",", "j", "=", "len", "(", "x", ")", ",", "len", "(", "y", ")", "\n", "table", "=", "_lcs", "(", "x", ",", "y", ")", "\n", "\n", "def", "_recon", "(", "i", ",", "j", ")", ":", "\n", "    ", "\"\"\"private recon calculation\"\"\"", "\n", "if", "i", "==", "0", "or", "j", "==", "0", ":", "\n", "      ", "return", "[", "]", "\n", "", "elif", "x", "[", "i", "-", "1", "]", "==", "y", "[", "j", "-", "1", "]", ":", "\n", "      ", "return", "_recon", "(", "i", "-", "1", ",", "j", "-", "1", ")", "+", "[", "(", "x", "[", "i", "-", "1", "]", ",", "i", ")", "]", "\n", "", "elif", "table", "[", "i", "-", "1", ",", "j", "]", ">", "table", "[", "i", ",", "j", "-", "1", "]", ":", "\n", "      ", "return", "_recon", "(", "i", "-", "1", ",", "j", ")", "\n", "", "else", ":", "\n", "      ", "return", "_recon", "(", "i", ",", "j", "-", "1", ")", "\n", "\n", "", "", "recon_tuple", "=", "tuple", "(", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "_recon", "(", "i", ",", "j", ")", ")", ")", "\n", "return", "recon_tuple", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge.rouge_n": [[140, 184], ["rouge._get_word_ngrams", "rouge._get_word_ngrams", "len", "len", "_get_word_ngrams.intersection", "len", "ValueError", "len", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._get_word_ngrams", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._get_word_ngrams"], ["", "def", "rouge_n", "(", "evaluated_sentences", ",", "reference_sentences", ",", "n", "=", "2", ")", ":", "\n", "  ", "\"\"\"\n  Computes ROUGE-N of two text collections of sentences.\n  Sourece: http://research.microsoft.com/en-us/um/people/cyl/download/\n  papers/rouge-working-note-v1.3.1.pdf\n\n  Args:\n    evaluated_sentences: The sentences that have been picked by the summarizer\n    reference_sentences: The sentences from the referene set\n    n: Size of ngram.  Defaults to 2.\n\n  Returns:\n    A tuple (f1, precision, recall) for ROUGE-N\n\n  Raises:\n    ValueError: raises exception if a param has len <= 0\n  \"\"\"", "\n", "if", "len", "(", "evaluated_sentences", ")", "<=", "0", "or", "len", "(", "reference_sentences", ")", "<=", "0", ":", "\n", "    ", "raise", "ValueError", "(", "\"Collections must contain at least 1 sentence.\"", ")", "\n", "\n", "", "evaluated_ngrams", "=", "_get_word_ngrams", "(", "n", ",", "evaluated_sentences", ")", "\n", "reference_ngrams", "=", "_get_word_ngrams", "(", "n", ",", "reference_sentences", ")", "\n", "reference_count", "=", "len", "(", "reference_ngrams", ")", "\n", "evaluated_count", "=", "len", "(", "evaluated_ngrams", ")", "\n", "\n", "# Gets the overlapping ngrams between evaluated and reference", "\n", "overlapping_ngrams", "=", "evaluated_ngrams", ".", "intersection", "(", "reference_ngrams", ")", "\n", "overlapping_count", "=", "len", "(", "overlapping_ngrams", ")", "\n", "\n", "# Handle edge case. This isn't mathematically correct, but it's good enough", "\n", "if", "evaluated_count", "==", "0", ":", "\n", "    ", "precision", "=", "0.0", "\n", "", "else", ":", "\n", "    ", "precision", "=", "overlapping_count", "/", "evaluated_count", "\n", "\n", "", "if", "reference_count", "==", "0", ":", "\n", "    ", "recall", "=", "0.0", "\n", "", "else", ":", "\n", "    ", "recall", "=", "overlapping_count", "/", "reference_count", "\n", "\n", "", "f1_score", "=", "2.0", "*", "(", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", "+", "1e-8", ")", ")", "\n", "\n", "# return overlapping_count / reference_count", "\n", "return", "f1_score", ",", "precision", ",", "recall", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._f_p_r_lcs": [[186, 207], ["None"], "function", ["None"], ["", "def", "_f_p_r_lcs", "(", "llcs", ",", "m", ",", "n", ")", ":", "\n", "  ", "\"\"\"\n  Computes the LCS-based F-measure score\n  Source: http://research.microsoft.com/en-us/um/people/cyl/download/papers/\n  rouge-working-note-v1.3.1.pdf\n\n  Args:\n    llcs: Length of LCS\n    m: number of words in reference summary\n    n: number of words in candidate summary\n\n  Returns:\n    Float. LCS-based F-measure score\n  \"\"\"", "\n", "r_lcs", "=", "llcs", "/", "m", "\n", "p_lcs", "=", "llcs", "/", "n", "\n", "beta", "=", "p_lcs", "/", "(", "r_lcs", "+", "1e-12", ")", "\n", "num", "=", "(", "1", "+", "(", "beta", "**", "2", ")", ")", "*", "r_lcs", "*", "p_lcs", "\n", "denom", "=", "r_lcs", "+", "(", "(", "beta", "**", "2", ")", "*", "p_lcs", ")", "\n", "f_lcs", "=", "num", "/", "(", "denom", "+", "1e-12", ")", "\n", "return", "f_lcs", ",", "p_lcs", ",", "r_lcs", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge.rouge_l_sentence_level": [[209, 244], ["rouge._split_into_words", "rouge._split_into_words", "len", "len", "rouge._len_lcs", "rouge._f_p_r_lcs", "ValueError", "len", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._split_into_words", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._split_into_words", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._len_lcs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._f_p_r_lcs"], ["", "def", "rouge_l_sentence_level", "(", "evaluated_sentences", ",", "reference_sentences", ")", ":", "\n", "  ", "\"\"\"\n  Computes ROUGE-L (sentence level) of two text collections of sentences.\n  http://research.microsoft.com/en-us/um/people/cyl/download/papers/\n  rouge-working-note-v1.3.1.pdf\n\n  Calculated according to:\n  R_lcs = LCS(X,Y)/m\n  P_lcs = LCS(X,Y)/n\n  F_lcs = ((1 + beta^2)*R_lcs*P_lcs) / (R_lcs + (beta^2) * P_lcs)\n\n  where:\n  X = reference summary\n  Y = Candidate summary\n  m = length of reference summary\n  n = length of candidate summary\n\n  Args:\n    evaluated_sentences: The sentences that have been picked by the summarizer\n    reference_sentences: The sentences from the referene set\n\n  Returns:\n    A float: F_lcs\n\n  Raises:\n    ValueError: raises exception if a param has len <= 0\n  \"\"\"", "\n", "if", "len", "(", "evaluated_sentences", ")", "<=", "0", "or", "len", "(", "reference_sentences", ")", "<=", "0", ":", "\n", "    ", "raise", "ValueError", "(", "\"Collections must contain at least 1 sentence.\"", ")", "\n", "", "reference_words", "=", "_split_into_words", "(", "reference_sentences", ")", "\n", "evaluated_words", "=", "_split_into_words", "(", "evaluated_sentences", ")", "\n", "m", "=", "len", "(", "reference_words", ")", "\n", "n", "=", "len", "(", "evaluated_words", ")", "\n", "lcs", "=", "_len_lcs", "(", "evaluated_words", ",", "reference_words", ")", "\n", "return", "_f_p_r_lcs", "(", "lcs", ",", "m", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._union_lcs": [[246, 281], ["set", "rouge._split_into_words", "len", "len", "ValueError", "rouge._split_into_words", "set", "len", "lcs_union.union.union", "rouge._recon_lcs"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._split_into_words", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._split_into_words", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._recon_lcs"], ["", "def", "_union_lcs", "(", "evaluated_sentences", ",", "reference_sentence", ")", ":", "\n", "  ", "\"\"\"\n  Returns LCS_u(r_i, C) which is the LCS score of the union longest common\n  subsequence between reference sentence ri and candidate summary C. For example\n  if r_i= w1 w2 w3 w4 w5, and C contains two sentences: c1 = w1 w2 w6 w7 w8 and\n  c2 = w1 w3 w8 w9 w5, then the longest common subsequence of r_i and c1 is\n  \u201cw1 w2\u201d and the longest common subsequence of r_i and c2 is \u201cw1 w3 w5\u201d. The\n  union longest common subsequence of r_i, c1, and c2 is \u201cw1 w2 w3 w5\u201d and\n  LCS_u(r_i, C) = 4/5.\n\n  Args:\n    evaluated_sentences: The sentences that have been picked by the summarizer\n    reference_sentence: One of the sentences in the reference summaries\n\n  Returns:\n    float: LCS_u(r_i, C)\n\n  ValueError:\n    Raises exception if a param has len <= 0\n  \"\"\"", "\n", "if", "len", "(", "evaluated_sentences", ")", "<=", "0", ":", "\n", "    ", "raise", "ValueError", "(", "\"Collections must contain at least 1 sentence.\"", ")", "\n", "\n", "", "lcs_union", "=", "set", "(", ")", "\n", "reference_words", "=", "_split_into_words", "(", "[", "reference_sentence", "]", ")", "\n", "combined_lcs_length", "=", "0", "\n", "for", "eval_s", "in", "evaluated_sentences", ":", "\n", "    ", "evaluated_words", "=", "_split_into_words", "(", "[", "eval_s", "]", ")", "\n", "lcs", "=", "set", "(", "_recon_lcs", "(", "reference_words", ",", "evaluated_words", ")", ")", "\n", "combined_lcs_length", "+=", "len", "(", "lcs", ")", "\n", "lcs_union", "=", "lcs_union", ".", "union", "(", "lcs", ")", "\n", "\n", "", "union_lcs_count", "=", "len", "(", "lcs_union", ")", "\n", "union_lcs_value", "=", "union_lcs_count", "/", "combined_lcs_length", "\n", "return", "union_lcs_value", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge.rouge_l_summary_level": [[283, 325], ["len", "len", "rouge._f_p_r_lcs", "ValueError", "rouge._split_into_words", "rouge._split_into_words", "rouge._union_lcs", "len", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._f_p_r_lcs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._split_into_words", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._split_into_words", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge._union_lcs"], ["", "def", "rouge_l_summary_level", "(", "evaluated_sentences", ",", "reference_sentences", ")", ":", "\n", "  ", "\"\"\"\n  Computes ROUGE-L (summary level) of two text collections of sentences.\n  http://research.microsoft.com/en-us/um/people/cyl/download/papers/\n  rouge-working-note-v1.3.1.pdf\n\n  Calculated according to:\n  R_lcs = SUM(1, u)[LCS<union>(r_i,C)]/m\n  P_lcs = SUM(1, u)[LCS<union>(r_i,C)]/n\n  F_lcs = ((1 + beta^2)*R_lcs*P_lcs) / (R_lcs + (beta^2) * P_lcs)\n\n  where:\n  SUM(i,u) = SUM from i through u\n  u = number of sentences in reference summary\n  C = Candidate summary made up of v sentences\n  m = number of words in reference summary\n  n = number of words in candidate summary\n\n  Args:\n    evaluated_sentences: The sentences that have been picked by the summarizer\n    reference_sentence: One of the sentences in the reference summaries\n\n  Returns:\n    A float: F_lcs\n\n  Raises:\n    ValueError: raises exception if a param has len <= 0\n  \"\"\"", "\n", "if", "len", "(", "evaluated_sentences", ")", "<=", "0", "or", "len", "(", "reference_sentences", ")", "<=", "0", ":", "\n", "    ", "raise", "ValueError", "(", "\"Collections must contain at least 1 sentence.\"", ")", "\n", "\n", "# total number of words in reference sentences", "\n", "", "m", "=", "len", "(", "_split_into_words", "(", "reference_sentences", ")", ")", "\n", "\n", "# total number of words in evaluated sentences", "\n", "n", "=", "len", "(", "_split_into_words", "(", "evaluated_sentences", ")", ")", "\n", "\n", "union_lcs_sum_across_all_references", "=", "0", "\n", "for", "ref_s", "in", "reference_sentences", ":", "\n", "    ", "union_lcs_sum_across_all_references", "+=", "_union_lcs", "(", "evaluated_sentences", ",", "\n", "ref_s", ")", "\n", "", "return", "_f_p_r_lcs", "(", "union_lcs_sum_across_all_references", ",", "m", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge.rouge": [[327, 365], ["map", "map", "map", "rouge.rouge_n", "zip", "rouge.rouge_n", "zip", "rouge.rouge_l_sentence_level", "zip", "zip", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge.rouge_n", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge.rouge_n", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge.rouge_l_sentence_level"], ["", "def", "rouge", "(", "hypotheses", ",", "references", ")", ":", "\n", "  ", "\"\"\"Calculates average rouge scores for a list of hypotheses and\n  references\"\"\"", "\n", "\n", "# Filter out hyps that are of 0 length", "\n", "# hyps_and_refs = zip(hypotheses, references)", "\n", "# hyps_and_refs = [_ for _ in hyps_and_refs if len(_[0]) > 0]", "\n", "# hypotheses, references = zip(*hyps_and_refs)", "\n", "\n", "# Calculate ROUGE-1 F1, precision, recall scores", "\n", "rouge_1", "=", "[", "\n", "rouge_n", "(", "[", "hyp", "]", ",", "[", "ref", "]", ",", "1", ")", "for", "hyp", ",", "ref", "in", "zip", "(", "hypotheses", ",", "references", ")", "\n", "]", "\n", "rouge_1_f", ",", "rouge_1_p", ",", "rouge_1_r", "=", "map", "(", "np", ".", "mean", ",", "zip", "(", "*", "rouge_1", ")", ")", "\n", "\n", "# Calculate ROUGE-2 F1, precision, recall scores", "\n", "rouge_2", "=", "[", "\n", "rouge_n", "(", "[", "hyp", "]", ",", "[", "ref", "]", ",", "2", ")", "for", "hyp", ",", "ref", "in", "zip", "(", "hypotheses", ",", "references", ")", "\n", "]", "\n", "rouge_2_f", ",", "rouge_2_p", ",", "rouge_2_r", "=", "map", "(", "np", ".", "mean", ",", "zip", "(", "*", "rouge_2", ")", ")", "\n", "\n", "# Calculate ROUGE-L F1, precision, recall scores", "\n", "rouge_l", "=", "[", "\n", "rouge_l_sentence_level", "(", "[", "hyp", "]", ",", "[", "ref", "]", ")", "\n", "for", "hyp", ",", "ref", "in", "zip", "(", "hypotheses", ",", "references", ")", "\n", "]", "\n", "rouge_l_f", ",", "rouge_l_p", ",", "rouge_l_r", "=", "map", "(", "np", ".", "mean", ",", "zip", "(", "*", "rouge_l", ")", ")", "\n", "\n", "return", "{", "\n", "\"rouge_1/f_score\"", ":", "rouge_1_f", ",", "\n", "\"rouge_1/r_score\"", ":", "rouge_1_r", ",", "\n", "\"rouge_1/p_score\"", ":", "rouge_1_p", ",", "\n", "\"rouge_2/f_score\"", ":", "rouge_2_f", ",", "\n", "\"rouge_2/r_score\"", ":", "rouge_2_r", ",", "\n", "\"rouge_2/p_score\"", ":", "rouge_2_p", ",", "\n", "\"rouge_l/f_score\"", ":", "rouge_l_f", ",", "\n", "\"rouge_l/r_score\"", ":", "rouge_l_r", ",", "\n", "\"rouge_l/p_score\"", ":", "rouge_l_p", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.TextMetricSpec.__init__": [[74, 89], ["seq2seq.configurable.Configurable.__init__", "pydoc.locate", "ValueError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "name", ")", ":", "\n", "# We don't call the super constructor on purpose", "\n", "#pylint: disable=W0231", "\n", "    ", "\"\"\"Initializer\"\"\"", "\n", "Configurable", ".", "__init__", "(", "self", ",", "params", ",", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "EVAL", ")", "\n", "self", ".", "_name", "=", "name", "\n", "self", ".", "_eos_token", "=", "self", ".", "params", "[", "\"eos_token\"", "]", "\n", "self", ".", "_sos_token", "=", "self", ".", "params", "[", "\"sos_token\"", "]", "\n", "self", ".", "_separator", "=", "self", ".", "params", "[", "\"separator\"", "]", "\n", "self", ".", "_postproc_fn", "=", "None", "\n", "if", "self", ".", "params", "[", "\"postproc_fn\"", "]", ":", "\n", "      ", "self", ".", "_postproc_fn", "=", "locate", "(", "self", ".", "params", "[", "\"postproc_fn\"", "]", ")", "\n", "if", "self", ".", "_postproc_fn", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"postproc_fn not found: {}\"", ".", "format", "(", "\n", "self", ".", "params", "[", "\"postproc_fn\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.TextMetricSpec.name": [[90, 94], ["None"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "    ", "\"\"\"Name of the metric\"\"\"", "\n", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.TextMetricSpec.default_params": [[95, 102], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "return", "{", "\n", "\"sos_token\"", ":", "\"SEQUENCE_START\"", ",", "\n", "\"eos_token\"", ":", "\"SEQUENCE_END\"", ",", "\n", "\"separator\"", ":", "\" \"", ",", "\n", "\"postproc_fn\"", ":", "\"\"", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.TextMetricSpec.create_metric_ops": [[104, 130], ["tensorflow.variable_scope", "tensorflow.reduce_join", "tensorflow.reduce_join", "metric_specs.accumulate_strings", "metric_specs.accumulate_strings", "tensorflow.py_func", "tensorflow.control_dependencies", "tensorflow.identity"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.seq2seq.graph_module.GraphModule.variable_scope", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.accumulate_strings", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.accumulate_strings", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.identity"], ["", "def", "create_metric_ops", "(", "self", ",", "_inputs", ",", "labels", ",", "predictions", ")", ":", "\n", "    ", "\"\"\"Creates (value, update_op) tensors\n    \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "_name", ")", ":", "\n", "\n", "# Join tokens into single strings", "\n", "      ", "predictions_flat", "=", "tf", ".", "reduce_join", "(", "\n", "predictions", "[", "\"predicted_tokens\"", "]", ",", "1", ",", "separator", "=", "self", ".", "_separator", ")", "\n", "labels_flat", "=", "tf", ".", "reduce_join", "(", "\n", "labels", "[", "\"target_tokens\"", "]", ",", "1", ",", "separator", "=", "self", ".", "_separator", ")", "\n", "\n", "sources_value", ",", "sources_update", "=", "accumulate_strings", "(", "\n", "values", "=", "predictions_flat", ",", "name", "=", "\"sources\"", ")", "\n", "targets_value", ",", "targets_update", "=", "accumulate_strings", "(", "\n", "values", "=", "labels_flat", ",", "name", "=", "\"targets\"", ")", "\n", "\n", "metric_value", "=", "tf", ".", "py_func", "(", "\n", "func", "=", "self", ".", "_py_func", ",", "\n", "inp", "=", "[", "sources_value", ",", "targets_value", "]", ",", "\n", "Tout", "=", "tf", ".", "float32", ",", "\n", "name", "=", "\"value\"", ")", "\n", "\n", "", "with", "tf", ".", "control_dependencies", "(", "[", "sources_update", ",", "targets_update", "]", ")", ":", "\n", "      ", "update_op", "=", "tf", ".", "identity", "(", "metric_value", ",", "name", "=", "\"update_op\"", ")", "\n", "\n", "", "return", "metric_value", ",", "update_op", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.TextMetricSpec._py_func": [[131, 157], ["metric_specs.TextMetricSpec.metric_fn", "numpy.dtype", "numpy.char.encode", "numpy.dtype", "numpy.char.encode", "_.decode", "_.decode", "seq2seq.data.postproc.slice_text", "seq2seq.data.postproc.slice_text", "metric_specs.TextMetricSpec._postproc_fn", "metric_specs.TextMetricSpec._postproc_fn"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.RougeMetricSpec.metric_fn", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.encode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.encode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode"], ["", "def", "_py_func", "(", "self", ",", "hypotheses", ",", "references", ")", ":", "\n", "    ", "\"\"\"Wrapper function that converts tensors to unicode and slices\n      them until the EOS token is found.\n    \"\"\"", "\n", "# Deal with byte chars", "\n", "if", "hypotheses", ".", "dtype", ".", "kind", "==", "np", ".", "dtype", "(", "\"U\"", ")", ":", "\n", "      ", "hypotheses", "=", "np", ".", "char", ".", "encode", "(", "hypotheses", ",", "\"utf-8\"", ")", "\n", "", "if", "references", ".", "dtype", ".", "kind", "==", "np", ".", "dtype", "(", "\"U\"", ")", ":", "\n", "      ", "references", "=", "np", ".", "char", ".", "encode", "(", "references", ",", "\"utf-8\"", ")", "\n", "\n", "# Convert back to unicode object", "\n", "", "hypotheses", "=", "[", "_", ".", "decode", "(", "\"utf-8\"", ")", "for", "_", "in", "hypotheses", "]", "\n", "references", "=", "[", "_", ".", "decode", "(", "\"utf-8\"", ")", "for", "_", "in", "references", "]", "\n", "\n", "# Slice all hypotheses and references up to SOS -> EOS", "\n", "sliced_hypotheses", "=", "[", "postproc", ".", "slice_text", "(", "\n", "_", ",", "self", ".", "_eos_token", ",", "self", ".", "_sos_token", ")", "for", "_", "in", "hypotheses", "]", "\n", "sliced_references", "=", "[", "postproc", ".", "slice_text", "(", "\n", "_", ",", "self", ".", "_eos_token", ",", "self", ".", "_sos_token", ")", "for", "_", "in", "references", "]", "\n", "\n", "# Apply postprocessing function", "\n", "if", "self", ".", "_postproc_fn", ":", "\n", "      ", "sliced_hypotheses", "=", "[", "self", ".", "_postproc_fn", "(", "_", ")", "for", "_", "in", "sliced_hypotheses", "]", "\n", "sliced_references", "=", "[", "self", ".", "_postproc_fn", "(", "_", ")", "for", "_", "in", "sliced_references", "]", "\n", "\n", "", "return", "self", ".", "metric_fn", "(", "sliced_hypotheses", ",", "sliced_references", ")", "#pylint: disable=E1102", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.TextMetricSpec.metric_fn": [[158, 171], ["NotImplementedError"], "methods", ["None"], ["", "def", "metric_fn", "(", "self", ",", "hypotheses", ",", "references", ")", ":", "\n", "    ", "\"\"\"Calculates the value of the metric.\n\n    Args:\n      hypotheses: A python list of strings, each corresponding to a\n        single hypothesis/example.\n      references: A python list of strings, each corresponds to a single\n        reference. Must have the same number of elements of `hypotheses`.\n\n    Returns:\n      A float value.\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.BleuMetricSpec.__init__": [[177, 179], ["metric_specs.TextMetricSpec.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "    ", "super", "(", "BleuMetricSpec", ",", "self", ")", ".", "__init__", "(", "params", ",", "\"bleu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.BleuMetricSpec.metric_fn": [[180, 182], ["seq2seq.metrics.bleu.moses_multi_bleu"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.bleu.moses_multi_bleu"], ["", "def", "metric_fn", "(", "self", ",", "hypotheses", ",", "references", ")", ":", "\n", "    ", "return", "bleu", ".", "moses_multi_bleu", "(", "hypotheses", ",", "references", ",", "lowercase", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.RougeMetricSpec.__init__": [[188, 194], ["metric_specs.TextMetricSpec.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "not", "params", "[", "\"rouge_type\"", "]", ":", "\n", "      ", "raise", "ValueError", "(", "\"You must provide a rouge_type for ROUGE\"", ")", "\n", "", "super", "(", "RougeMetricSpec", ",", "self", ")", ".", "__init__", "(", "\n", "params", ",", "params", "[", "\"rouge_type\"", "]", ",", "**", "kwargs", ")", "\n", "self", ".", "_rouge_type", "=", "self", ".", "params", "[", "\"rouge_type\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.RougeMetricSpec.default_params": [[195, 202], ["metric_specs.TextMetricSpec.default_params", "metric_specs.TextMetricSpec.default_params"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.LogPerplexityMetricSpec.default_params", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.LogPerplexityMetricSpec.default_params"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "params", "=", "TextMetricSpec", ".", "default_params", "(", ")", "\n", "params", ".", "update", "(", "{", "\n", "\"rouge_type\"", ":", "\"\"", ",", "\n", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.RougeMetricSpec.metric_fn": [[203, 207], ["numpy.float32", "numpy.float32", "seq2seq.metrics.rouge.rouge"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.rouge.rouge"], ["", "def", "metric_fn", "(", "self", ",", "hypotheses", ",", "references", ")", ":", "\n", "    ", "if", "not", "hypotheses", "or", "not", "references", ":", "\n", "      ", "return", "np", ".", "float32", "(", "0.0", ")", "\n", "", "return", "np", ".", "float32", "(", "rouge", ".", "rouge", "(", "hypotheses", ",", "references", ")", "[", "self", ".", "_rouge_type", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.LogPerplexityMetricSpec.__init__": [[212, 217], ["seq2seq.configurable.Configurable.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "    ", "\"\"\"Initializer\"\"\"", "\n", "# We don't call the super constructor on purpose", "\n", "#pylint: disable=W0231", "\n", "Configurable", ".", "__init__", "(", "self", ",", "params", ",", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "EVAL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.LogPerplexityMetricSpec.default_params": [[218, 221], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.LogPerplexityMetricSpec.name": [[222, 226], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "    ", "\"\"\"Name of the metric\"\"\"", "\n", "return", "\"log_perplexity\"", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.LogPerplexityMetricSpec.create_metric_ops": [[227, 233], ["tensorflow.sequence_mask", "tensorflow.contrib.metrics.streaming_mean", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape"], ["", "def", "create_metric_ops", "(", "self", ",", "_inputs", ",", "labels", ",", "predictions", ")", ":", "\n", "    ", "\"\"\"Creates the metric op\"\"\"", "\n", "loss_mask", "=", "tf", ".", "sequence_mask", "(", "\n", "lengths", "=", "tf", ".", "to_int32", "(", "labels", "[", "\"target_len\"", "]", "-", "1", ")", ",", "\n", "maxlen", "=", "tf", ".", "to_int32", "(", "tf", ".", "shape", "(", "predictions", "[", "\"losses\"", "]", ")", "[", "1", "]", ")", ")", "\n", "return", "metrics", ".", "streaming_mean", "(", "predictions", "[", "\"losses\"", "]", ",", "loss_mask", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.metrics.metric_specs.accumulate_strings": [[39, 60], ["tensorflow.assert_type", "tensorflow.Variable", "tensorflow.identity", "tensorflow.assign", "tensorflow.concat"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.identity", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.concat"], ["def", "accumulate_strings", "(", "values", ",", "name", "=", "\"strings\"", ")", ":", "\n", "  ", "\"\"\"Accumulates strings into a vector.\n\n  Args:\n    values: A 1-d string tensor that contains values to add to the accumulator.\n\n  Returns:\n    A tuple (value_tensor, update_op).\n  \"\"\"", "\n", "tf", ".", "assert_type", "(", "values", ",", "tf", ".", "string", ")", "\n", "strings", "=", "tf", ".", "Variable", "(", "\n", "name", "=", "name", ",", "\n", "initial_value", "=", "[", "]", ",", "\n", "dtype", "=", "tf", ".", "string", ",", "\n", "trainable", "=", "False", ",", "\n", "collections", "=", "[", "]", ",", "\n", "validate_shape", "=", "True", ")", "\n", "value_tensor", "=", "tf", ".", "identity", "(", "strings", ")", "\n", "update_op", "=", "tf", ".", "assign", "(", "\n", "ref", "=", "strings", ",", "value", "=", "tf", ".", "concat", "(", "[", "strings", ",", "values", "]", ",", "0", ")", ",", "validate_shape", "=", "False", ")", "\n", "return", "value_tensor", ",", "update_op", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.scripts.create_spider_json.remove_from_conditions": [[5, 30], ["astree.copy.copy", "len", "queue.pop", "queue.pop.items", "isinstance", "isinstance", "empty_children.append", "queue.append", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["def", "remove_from_conditions", "(", "astree", ")", ":", "\n", "    ", "astree", "=", "astree", ".", "copy", "(", ")", "\n", "queue", "=", "[", "astree", "]", "\n", "while", "len", "(", "queue", ")", ">", "0", ":", "\n", "        ", "node", "=", "queue", ".", "pop", "(", ")", "\n", "\n", "if", "not", "isinstance", "(", "node", ",", "dict", ")", "or", "\"_type\"", "not", "in", "node", ":", "\n", "            ", "continue", "\n", "\n", "", "empty_children", "=", "[", "]", "\n", "for", "child_name", ",", "child_node", "in", "node", ".", "items", "(", ")", ":", "\n", "            ", "if", "child_name", "==", "\"_type\"", ":", "\n", "                ", "continue", "\n", "", "elif", "child_name", "==", "\"from\"", ":", "\n", "                ", "if", "\"conds\"", "in", "child_node", ":", "\n", "                    ", "del", "child_node", "[", "\"conds\"", "]", "\n", "", "", "elif", "isinstance", "(", "child_node", ",", "(", "list", ",", "tuple", ")", ")", "and", "len", "(", "child_node", ")", "==", "0", ":", "\n", "                ", "empty_children", ".", "append", "(", "child_name", ")", "# empty child", "\n", "", "else", ":", "\n", "                ", "queue", ".", "append", "(", "child_node", ")", "\n", "\n", "# delete empty nodes", "\n", "", "", "for", "child_name", "in", "empty_children", ":", "\n", "            ", "del", "node", "[", "child_name", "]", "\n", "", "", "return", "astree", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.lib.dbengine.DBEngine.__init__": [[14, 17], ["records.Database"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fdb", ")", ":", "\n", "#fdb = 'data/test.db'", "\n", "        ", "self", ".", "db", "=", "records", ".", "Database", "(", "'sqlite:///{}'", ".", "format", "(", "fdb", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.lib.dbengine.DBEngine.execute_query": [[18, 20], ["dbengine.DBEngine.execute"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.execute"], ["", "def", "execute_query", "(", "self", ",", "table_id", ",", "query", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "execute", "(", "table_id", ",", "query", ".", "sel_index", ",", "query", ".", "agg_index", ",", "query", ".", "conditions", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.lib.dbengine.DBEngine.execute": [[21, 53], ["[].sql.replace", "schema_str.split", "dbengine.DBEngine.db.query", "table_id.startswith", "schema_re.findall", "tup.split", "where_clause.append", "table_id.replace", "float.lower", "isinstance", "isinstance", "isinstance", "float", "dbengine.DBEngine.db.query().all", "babel.numbers.parse_decimal", "float", "dbengine.DBEngine.db.query", "num_re.findall"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "execute", "(", "self", ",", "table_id", ",", "select_index", ",", "aggregation_index", ",", "conditions", ",", "lower", "=", "True", ")", ":", "\n", "        ", "if", "not", "table_id", ".", "startswith", "(", "'table'", ")", ":", "\n", "            ", "table_id", "=", "'table_{}'", ".", "format", "(", "table_id", ".", "replace", "(", "'-'", ",", "'_'", ")", ")", "\n", "", "table_info", "=", "self", ".", "db", ".", "query", "(", "'SELECT sql from sqlite_master WHERE tbl_name = :name'", ",", "name", "=", "table_id", ")", ".", "all", "(", ")", "[", "0", "]", ".", "sql", ".", "replace", "(", "'\\n'", ",", "''", ")", "\n", "schema_str", "=", "schema_re", ".", "findall", "(", "table_info", ")", "[", "0", "]", "\n", "schema", "=", "{", "}", "\n", "for", "tup", "in", "schema_str", ".", "split", "(", "', '", ")", ":", "\n", "            ", "c", ",", "t", "=", "tup", ".", "split", "(", ")", "\n", "schema", "[", "c", "]", "=", "t", "\n", "", "select", "=", "'col{}'", ".", "format", "(", "select_index", ")", "\n", "agg", "=", "agg_ops", "[", "aggregation_index", "]", "\n", "if", "agg", ":", "\n", "            ", "select", "=", "'{}({})'", ".", "format", "(", "agg", ",", "select", ")", "\n", "", "where_clause", "=", "[", "]", "\n", "where_map", "=", "{", "}", "\n", "for", "col_index", ",", "op", ",", "val", "in", "conditions", ":", "\n", "            ", "if", "lower", "and", "(", "isinstance", "(", "val", ",", "str", ")", "or", "isinstance", "(", "val", ",", "unicode", ")", ")", ":", "\n", "                ", "val", "=", "val", ".", "lower", "(", ")", "\n", "", "if", "schema", "[", "'col{}'", ".", "format", "(", "col_index", ")", "]", "==", "'real'", "and", "not", "isinstance", "(", "val", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "val", "=", "float", "(", "parse_decimal", "(", "val", ")", ")", "\n", "", "except", "NumberFormatError", "as", "e", ":", "\n", "                    ", "val", "=", "float", "(", "num_re", ".", "findall", "(", "val", ")", "[", "0", "]", ")", "\n", "", "", "where_clause", ".", "append", "(", "'col{} {} :col{}'", ".", "format", "(", "col_index", ",", "cond_ops", "[", "op", "]", ",", "col_index", ")", ")", "\n", "where_map", "[", "'col{}'", ".", "format", "(", "col_index", ")", "]", "=", "val", "\n", "", "where_str", "=", "''", "\n", "if", "where_clause", ":", "\n", "            ", "where_str", "=", "'WHERE '", "+", "' AND '", ".", "join", "(", "where_clause", ")", "\n", "", "query", "=", "'SELECT {} AS result FROM {} {}'", ".", "format", "(", "select", ",", "table_id", ",", "where_str", ")", "\n", "#print query", "\n", "out", "=", "self", ".", "db", ".", "query", "(", "query", ",", "**", "where_map", ")", "\n", "return", "[", "o", ".", "result", "for", "o", "in", "out", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.cond_predict.CondPredictor.__init__": [[11, 46], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.MultiLabelSoftMarginLoss", "torch.MultiLabelSoftMarginLoss", "torch.MultiLabelSoftMarginLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "cond_predict.CondPredictor.cuda"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.cuda"], ["    ", "def", "__init__", "(", "self", ",", "N_word", ",", "N_h", ",", "N_depth", ",", "gpu", ")", ":", "\n", "        ", "super", "(", "CondPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "N_h", "=", "N_h", "\n", "self", ".", "gpu", "=", "gpu", "\n", "\n", "self", ".", "q_lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "N_word", ",", "hidden_size", "=", "N_h", "/", "2", ",", "\n", "num_layers", "=", "N_depth", ",", "batch_first", "=", "True", ",", "\n", "dropout", "=", "0.3", ",", "bidirectional", "=", "True", ")", "\n", "\n", "self", ".", "col_lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "N_word", ",", "hidden_size", "=", "N_h", "/", "2", ",", "\n", "num_layers", "=", "N_depth", ",", "batch_first", "=", "True", ",", "\n", "dropout", "=", "0.3", ",", "bidirectional", "=", "True", ")", "\n", "\n", "self", ".", "q_num_att", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "col_num_out_q", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "col_num_out", "=", "nn", ".", "Sequential", "(", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "N_h", ",", "6", ")", ")", "# num of cols: 0-4", "\n", "\n", "self", ".", "q_att", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "col_out_q", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "col_out_c", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "col_out", "=", "nn", ".", "Sequential", "(", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "N_h", ",", "1", ")", ")", "\n", "\n", "self", ".", "op_att", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "op_out_q", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "op_out_c", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "op_out", "=", "nn", ".", "Sequential", "(", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "N_h", ",", "12", ")", ")", "#to 5", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "#dim=1", "\n", "self", ".", "CE", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "log_softmax", "=", "nn", ".", "LogSoftmax", "(", ")", "\n", "self", ".", "mlsml", "=", "nn", ".", "MultiLabelSoftMarginLoss", "(", ")", "\n", "self", ".", "bce_logit", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "self", ".", "sigm", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "if", "gpu", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.cond_predict.CondPredictor.forward": [[47, 116], ["max", "max", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "net_utils.run_lstm", "net_utils.run_lstm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "enumerate", "enumerate", "cond_predict.CondPredictor.softmax().view", "cond_predict.CondPredictor.col_num_out", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "enumerate", "cond_predict.CondPredictor.softmax().view", "cond_predict.CondPredictor.col_out().squeeze", "enumerate", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "enumerate", "cond_predict.CondPredictor.softmax().view", "cond_predict.CondPredictor.op_out().squeeze", "cond_predict.CondPredictor.q_num_att().transpose", "cond_predict.CondPredictor.col_num_out_q", "cond_predict.CondPredictor.q_att().transpose", "numpy.argmax", "cond_predict.CondPredictor.data.cpu().numpy", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.append", "torch.stack.append", "torch.stack.append", "cond_predict.CondPredictor.softmax", "cond_predict.CondPredictor.softmax", "cond_predict.CondPredictor.col_out", "cond_predict.CondPredictor.data.cpu().numpy", "list", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "cond_predict.CondPredictor.softmax", "cond_predict.CondPredictor.op_out", "cond_predict.CondPredictor.q_num_att", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "cond_predict.CondPredictor.q_att", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "q_enc.unsqueeze", "cond_predict.CondPredictor.unsqueeze", "cond_predict.CondPredictor.data.cpu", "range", "cond_predict.CondPredictor.op_att().unsqueeze", "torch.stack.unsqueeze", "torch.stack.unsqueeze", "torch.stack.unsqueeze", "torch.matmul().squeeze.view", "torch.matmul().squeeze.view", "torch.matmul().squeeze.view", "q_enc.unsqueeze", "cond_predict.CondPredictor.unsqueeze", "cond_predict.CondPredictor.col_out_q", "cond_predict.CondPredictor.col_out_c", "cond_predict.CondPredictor.data.cpu", "numpy.argsort", "len", "cond_predict.CondPredictor.op_out_q", "cond_predict.CondPredictor.op_out_c", "q_enc.unsqueeze", "cond_predict.CondPredictor.unsqueeze", "len", "cond_predict.CondPredictor.op_att"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.net_utils.run_lstm", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.net_utils.run_lstm", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.argmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.argsort"], ["", "", "def", "forward", "(", "self", ",", "q_emb_var", ",", "q_len", ",", "col_emb_var", ",", "col_len", ",", "col_num", ",", "col_name_len", ",", "gt_cond", ")", ":", "\n", "        ", "max_q_len", "=", "max", "(", "q_len", ")", "\n", "max_col_len", "=", "max", "(", "col_len", ")", "\n", "B", "=", "len", "(", "q_len", ")", "\n", "\n", "q_enc", ",", "_", "=", "run_lstm", "(", "self", ".", "q_lstm", ",", "q_emb_var", ",", "q_len", ")", "\n", "col_enc", ",", "_", "=", "col_name_encode", "(", "col_emb_var", ",", "col_name_len", ",", "col_len", ",", "self", ".", "col_lstm", ")", "\n", "\n", "# Predict column number: 0-4", "\n", "# att_val_qc_num: (B, max_col_len, max_q_len)", "\n", "att_val_qc_num", "=", "torch", ".", "bmm", "(", "col_enc", ",", "self", ".", "q_num_att", "(", "q_enc", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "for", "idx", ",", "num", "in", "enumerate", "(", "col_len", ")", ":", "\n", "            ", "if", "num", "<", "max_col_len", ":", "\n", "                ", "att_val_qc_num", "[", "idx", ",", "num", ":", ",", ":", "]", "=", "-", "100", "\n", "", "", "for", "idx", ",", "num", "in", "enumerate", "(", "q_len", ")", ":", "\n", "            ", "if", "num", "<", "max_q_len", ":", "\n", "                ", "att_val_qc_num", "[", "idx", ",", ":", ",", "num", ":", "]", "=", "-", "100", "\n", "", "", "att_prob_qc_num", "=", "self", ".", "softmax", "(", "att_val_qc_num", ".", "view", "(", "(", "-", "1", ",", "max_q_len", ")", ")", ")", ".", "view", "(", "B", ",", "-", "1", ",", "max_q_len", ")", "\n", "# q_weighted_num: (B, hid_dim)", "\n", "q_weighted_num", "=", "(", "q_enc", ".", "unsqueeze", "(", "1", ")", "*", "att_prob_qc_num", ".", "unsqueeze", "(", "3", ")", ")", ".", "sum", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "# self.col_num_out: (B, 4)", "\n", "col_num_score", "=", "self", ".", "col_num_out", "(", "self", ".", "col_num_out_q", "(", "q_weighted_num", ")", ")", "\n", "\n", "# Predict columns.", "\n", "att_val_qc", "=", "torch", ".", "bmm", "(", "col_enc", ",", "self", ".", "q_att", "(", "q_enc", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "for", "idx", ",", "num", "in", "enumerate", "(", "q_len", ")", ":", "\n", "            ", "if", "num", "<", "max_q_len", ":", "\n", "                ", "att_val_qc", "[", "idx", ",", ":", ",", "num", ":", "]", "=", "-", "100", "\n", "", "", "att_prob_qc", "=", "self", ".", "softmax", "(", "att_val_qc", ".", "view", "(", "(", "-", "1", ",", "max_q_len", ")", ")", ")", ".", "view", "(", "B", ",", "-", "1", ",", "max_q_len", ")", "\n", "# q_weighted: (B, max_col_len, hid_dim)", "\n", "q_weighted", "=", "(", "q_enc", ".", "unsqueeze", "(", "1", ")", "*", "att_prob_qc", ".", "unsqueeze", "(", "3", ")", ")", ".", "sum", "(", "2", ")", "\n", "# Compute prediction scores", "\n", "# self.col_out.squeeze(): (B, max_col_len)", "\n", "col_score", "=", "self", ".", "col_out", "(", "self", ".", "col_out_q", "(", "q_weighted", ")", "+", "self", ".", "col_out_c", "(", "col_enc", ")", ")", ".", "squeeze", "(", ")", "\n", "for", "idx", ",", "num", "in", "enumerate", "(", "col_len", ")", ":", "\n", "            ", "if", "num", "<", "max_col_len", ":", "\n", "                ", "col_score", "[", "idx", ",", "num", ":", "]", "=", "-", "100", "\n", "# get select columns for op prediction", "\n", "", "", "chosen_col_gt", "=", "[", "]", "\n", "if", "gt_cond", "is", "None", ":", "\n", "            ", "cond_nums", "=", "np", ".", "argmax", "(", "col_num_score", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "1", ")", "\n", "col_scores", "=", "col_score", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "chosen_col_gt", "=", "[", "list", "(", "np", ".", "argsort", "(", "-", "col_scores", "[", "b", "]", ")", "[", ":", "cond_nums", "[", "b", "]", "]", ")", "for", "b", "in", "range", "(", "len", "(", "cond_nums", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "chosen_col_gt", "=", "[", "[", "x", "[", "0", "]", "for", "x", "in", "one_gt_cond", "]", "for", "one_gt_cond", "in", "gt_cond", "]", "\n", "\n", "", "col_emb", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "            ", "cur_col_emb", "=", "torch", ".", "stack", "(", "[", "col_enc", "[", "b", ",", "x", "]", "\n", "for", "x", "in", "chosen_col_gt", "[", "b", "]", "]", "+", "[", "col_enc", "[", "b", ",", "0", "]", "]", "*", "(", "5", "-", "len", "(", "chosen_col_gt", "[", "b", "]", ")", ")", ")", "\n", "col_emb", ".", "append", "(", "cur_col_emb", ")", "\n", "", "col_emb", "=", "torch", ".", "stack", "(", "col_emb", ")", "\n", "\n", "# Predict op", "\n", "op_att_val", "=", "torch", ".", "matmul", "(", "self", ".", "op_att", "(", "q_enc", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "col_emb", ".", "unsqueeze", "(", "3", ")", ")", ".", "squeeze", "(", ")", "\n", "for", "idx", ",", "num", "in", "enumerate", "(", "q_len", ")", ":", "\n", "            ", "if", "num", "<", "max_q_len", ":", "\n", "                ", "op_att_val", "[", "idx", ",", ":", ",", "num", ":", "]", "=", "-", "100", "\n", "", "", "op_att", "=", "self", ".", "softmax", "(", "op_att_val", ".", "view", "(", "-", "1", ",", "max_q_len", ")", ")", ".", "view", "(", "B", ",", "-", "1", ",", "max_q_len", ")", "\n", "q_weighted_op", "=", "(", "q_enc", ".", "unsqueeze", "(", "1", ")", "*", "op_att", ".", "unsqueeze", "(", "3", ")", ")", ".", "sum", "(", "2", ")", "\n", "\n", "op_score", "=", "self", ".", "op_out", "(", "self", ".", "op_out_q", "(", "q_weighted_op", ")", "+", "\n", "self", ".", "op_out_c", "(", "col_emb", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "score", "=", "(", "col_num_score", ",", "col_score", ",", "op_score", ")", "\n", "\n", "return", "score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.net_utils.run_lstm": [[6, 29], ["numpy.array", "numpy.argsort", "torch.utils.rnn.pack_padded_sequence", "lstm", "sorted", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "range", "torch.utils.rnn.pad_packed_sequence", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.argsort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.cuda", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.cuda", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.cuda", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.cuda"], ["def", "run_lstm", "(", "lstm", ",", "inp", ",", "inp_len", ",", "hidden", "=", "None", ")", ":", "\n", "# Run the LSTM using packed sequence.", "\n", "# This requires to first sort the input according to its length.", "\n", "    ", "sort_perm", "=", "np", ".", "array", "(", "sorted", "(", "range", "(", "len", "(", "inp_len", ")", ")", ",", "\n", "key", "=", "lambda", "k", ":", "inp_len", "[", "k", "]", ",", "reverse", "=", "True", ")", ")", "\n", "sort_inp_len", "=", "inp_len", "[", "sort_perm", "]", "\n", "sort_perm_inv", "=", "np", ".", "argsort", "(", "sort_perm", ")", "\n", "if", "inp", ".", "is_cuda", ":", "\n", "        ", "sort_perm", "=", "torch", ".", "LongTensor", "(", "sort_perm", ")", ".", "cuda", "(", ")", "\n", "sort_perm_inv", "=", "torch", ".", "LongTensor", "(", "sort_perm_inv", ")", ".", "cuda", "(", ")", "\n", "\n", "", "lstm_inp", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "inp", "[", "sort_perm", "]", ",", "\n", "sort_inp_len", ",", "batch_first", "=", "True", ")", "\n", "if", "hidden", "is", "None", ":", "\n", "        ", "lstm_hidden", "=", "None", "\n", "", "else", ":", "\n", "        ", "lstm_hidden", "=", "(", "hidden", "[", "0", "]", "[", ":", ",", "sort_perm", "]", ",", "hidden", "[", "1", "]", "[", ":", ",", "sort_perm", "]", ")", "\n", "\n", "", "sort_ret_s", ",", "sort_ret_h", "=", "lstm", "(", "lstm_inp", ",", "lstm_hidden", ")", "\n", "ret_s", "=", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "\n", "sort_ret_s", ",", "batch_first", "=", "True", ")", "[", "0", "]", "[", "sort_perm_inv", "]", "\n", "ret_h", "=", "(", "sort_ret_h", "[", "0", "]", "[", ":", ",", "sort_perm_inv", "]", ",", "sort_ret_h", "[", "1", "]", "[", ":", ",", "sort_perm_inv", "]", ")", "\n", "return", "ret_s", ",", "ret_h", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.net_utils.col_name_encode": [[31, 48], ["net_utils.run_lstm", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "enumerate", "torch.autograd.Variable", "ret.cuda.cuda", "torch.FloatTensor", "torch.FloatTensor", "tuple", "len", "max", "range", "name_out.size", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.net_utils.run_lstm", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.cuda", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size"], ["", "def", "col_name_encode", "(", "name_inp_var", ",", "name_len", ",", "col_len", ",", "enc_lstm", ")", ":", "\n", "#Encode the columns.", "\n", "#The embedding of a column name is the last state of its LSTM output.", "\n", "    ", "name_hidden", ",", "_", "=", "run_lstm", "(", "enc_lstm", ",", "name_inp_var", ",", "name_len", ")", "\n", "name_out", "=", "name_hidden", "[", "tuple", "(", "range", "(", "len", "(", "name_len", ")", ")", ")", ",", "name_len", "-", "1", "]", "\n", "ret", "=", "torch", ".", "FloatTensor", "(", "\n", "len", "(", "col_len", ")", ",", "max", "(", "col_len", ")", ",", "name_out", ".", "size", "(", ")", "[", "1", "]", ")", ".", "zero_", "(", ")", "\n", "if", "name_out", ".", "is_cuda", ":", "\n", "        ", "ret", "=", "ret", ".", "cuda", "(", ")", "\n", "\n", "", "st", "=", "0", "\n", "for", "idx", ",", "cur_len", "in", "enumerate", "(", "col_len", ")", ":", "\n", "        ", "ret", "[", "idx", ",", ":", "cur_len", "]", "=", "name_out", ".", "data", "[", "st", ":", "st", "+", "cur_len", "]", "\n", "st", "+=", "cur_len", "\n", "", "ret_var", "=", "Variable", "(", "ret", ")", "\n", "\n", "return", "ret_var", ",", "col_len", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.group_predict.GroupPredictor.__init__": [[11, 61], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.MultiLabelSoftMarginLoss", "torch.MultiLabelSoftMarginLoss", "torch.MultiLabelSoftMarginLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "group_predict.GroupPredictor.cuda"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.cuda"], ["    ", "def", "__init__", "(", "self", ",", "N_word", ",", "N_h", ",", "N_depth", ",", "gpu", ")", ":", "\n", "        ", "super", "(", "GroupPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "N_h", "=", "N_h", "\n", "self", ".", "gpu", "=", "gpu", "\n", "\n", "self", ".", "q_lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "N_word", ",", "hidden_size", "=", "N_h", "/", "2", ",", "\n", "num_layers", "=", "N_depth", ",", "batch_first", "=", "True", ",", "\n", "dropout", "=", "0.3", ",", "bidirectional", "=", "True", ")", "\n", "\n", "self", ".", "col_lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "N_word", ",", "hidden_size", "=", "N_h", "/", "2", ",", "\n", "num_layers", "=", "N_depth", ",", "batch_first", "=", "True", ",", "\n", "dropout", "=", "0.3", ",", "bidirectional", "=", "True", ")", "\n", "\n", "self", ".", "gby_num_h", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "gby_num_l", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "gby_num_out", "=", "nn", ".", "Sequential", "(", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "N_h", ",", "4", ")", ")", "\n", "\n", "self", ".", "gby_att", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "gby_out_K", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "gby_out_col", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "gby_out", "=", "nn", ".", "Sequential", "(", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "N_h", ",", "1", ")", ")", "\n", "\n", "self", ".", "hv_att", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "hv_out_q", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "hv_out_c", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "hv_out", "=", "nn", ".", "Sequential", "(", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "N_h", ",", "2", ")", ")", "#for having/none", "\n", "\n", "self", ".", "q_att", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "col_out_q", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "col_out_c", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "col_out", "=", "nn", ".", "Sequential", "(", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "N_h", ",", "1", ")", ")", "\n", "\n", "self", ".", "agg_att", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "agg_out_q", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "agg_out_c", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "agg_out", "=", "nn", ".", "Sequential", "(", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "N_h", ",", "6", ")", ")", "#to 5", "\n", "\n", "self", ".", "op_att", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "op_out_q", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "op_out_c", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "op_out", "=", "nn", ".", "Sequential", "(", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "N_h", ",", "12", ")", ")", "#to 5", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "#dim=1", "\n", "self", ".", "CE", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "log_softmax", "=", "nn", ".", "LogSoftmax", "(", ")", "\n", "self", ".", "mlsml", "=", "nn", ".", "MultiLabelSoftMarginLoss", "(", ")", "\n", "self", ".", "bce_logit", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "self", ".", "sigm", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "if", "gpu", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.group_predict.GroupPredictor.forward": [[62, 153], ["max", "max", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "net_utils.run_lstm", "net_utils.run_lstm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "enumerate", "enumerate", "group_predict.GroupPredictor.softmax().view", "group_predict.GroupPredictor.gby_num_out", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "enumerate", "group_predict.GroupPredictor.softmax().view", "group_predict.GroupPredictor.gby_out().squeeze", "enumerate", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "enumerate", "enumerate", "group_predict.GroupPredictor.softmax().view", "group_predict.GroupPredictor.hv_out", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "enumerate", "group_predict.GroupPredictor.softmax().view", "group_predict.GroupPredictor.col_out().squeeze", "enumerate", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "enumerate", "enumerate", "group_predict.GroupPredictor.softmax().view", "group_predict.GroupPredictor.agg_out", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "enumerate", "group_predict.GroupPredictor.softmax().view", "group_predict.GroupPredictor.op_out", "group_predict.GroupPredictor.gby_num_h().transpose", "group_predict.GroupPredictor.gby_num_l", "group_predict.GroupPredictor.gby_att().transpose", "group_predict.GroupPredictor.hv_att().transpose", "group_predict.GroupPredictor.hv_out_q", "group_predict.GroupPredictor.q_att().transpose", "group_predict.GroupPredictor.agg_att().transpose", "group_predict.GroupPredictor.agg_out_q", "group_predict.GroupPredictor.agg_att().transpose", "group_predict.GroupPredictor.op_out_q", "group_predict.GroupPredictor.softmax", "group_predict.GroupPredictor.softmax", "group_predict.GroupPredictor.gby_out", "group_predict.GroupPredictor.softmax", "group_predict.GroupPredictor.softmax", "group_predict.GroupPredictor.col_out", "group_predict.GroupPredictor.softmax", "group_predict.GroupPredictor.softmax", "group_predict.GroupPredictor.gby_num_h", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "group_predict.GroupPredictor.gby_att", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "q_enc.unsqueeze", "group_predict.GroupPredictor.unsqueeze", "group_predict.GroupPredictor.hv_att", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "group_predict.GroupPredictor.q_att", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "q_enc.unsqueeze", "group_predict.GroupPredictor.unsqueeze", "group_predict.GroupPredictor.agg_att", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "group_predict.GroupPredictor.agg_att", "torch.matmul.view", "torch.matmul.view", "torch.matmul.view", "group_predict.GroupPredictor.gby_out_K", "group_predict.GroupPredictor.gby_out_col", "group_predict.GroupPredictor.col_out_q", "group_predict.GroupPredictor.col_out_c", "q_enc.unsqueeze", "group_predict.GroupPredictor.unsqueeze", "q_enc.unsqueeze", "group_predict.GroupPredictor.unsqueeze", "q_enc.unsqueeze", "group_predict.GroupPredictor.unsqueeze", "q_enc.unsqueeze", "group_predict.GroupPredictor.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.net_utils.run_lstm", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.net_utils.run_lstm", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax"], ["", "", "def", "forward", "(", "self", ",", "q_emb_var", ",", "q_len", ",", "col_emb_var", ",", "col_len", ",", "col_num", ",", "col_name_len", ")", ":", "\n", "        ", "max_q_len", "=", "max", "(", "q_len", ")", "\n", "max_col_len", "=", "max", "(", "col_len", ")", "\n", "B", "=", "len", "(", "q_len", ")", "\n", "\n", "q_enc", ",", "_", "=", "run_lstm", "(", "self", ".", "q_lstm", ",", "q_emb_var", ",", "q_len", ")", "\n", "col_enc", ",", "_", "=", "col_name_encode", "(", "col_emb_var", ",", "col_name_len", ",", "col_len", ",", "self", ".", "col_lstm", ")", "\n", "\n", "# Predict group column number", "\n", "gby_num_att", "=", "torch", ".", "bmm", "(", "col_enc", ",", "self", ".", "gby_num_h", "(", "q_enc", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "for", "idx", ",", "num", "in", "enumerate", "(", "col_len", ")", ":", "\n", "            ", "if", "num", "<", "max_col_len", ":", "\n", "                ", "gby_num_att", "[", "idx", ",", "num", ":", ",", ":", "]", "=", "-", "100", "\n", "", "", "for", "idx", ",", "num", "in", "enumerate", "(", "q_len", ")", ":", "\n", "            ", "if", "num", "<", "max_q_len", ":", "\n", "                ", "gby_num_att", "[", "idx", ",", ":", ",", "num", ":", "]", "=", "-", "100", "\n", "\n", "", "", "gby_num_att_val", "=", "self", ".", "softmax", "(", "gby_num_att", ".", "view", "(", "(", "-", "1", ",", "max_q_len", ")", ")", ")", ".", "view", "(", "B", ",", "-", "1", ",", "max_q_len", ")", "\n", "gby_num_K", "=", "(", "q_enc", ".", "unsqueeze", "(", "1", ")", "*", "gby_num_att_val", ".", "unsqueeze", "(", "3", ")", ")", ".", "sum", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "gby_num_score", "=", "self", ".", "gby_num_out", "(", "self", ".", "gby_num_l", "(", "gby_num_K", ")", ")", "\n", "\n", "# Predict the group by columns", "\n", "gby_att_val", "=", "torch", ".", "bmm", "(", "col_enc", ",", "self", ".", "gby_att", "(", "q_enc", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "for", "idx", ",", "num", "in", "enumerate", "(", "q_len", ")", ":", "\n", "            ", "if", "num", "<", "max_q_len", ":", "\n", "                ", "gby_att_val", "[", "idx", ",", ":", ",", "num", ":", "]", "=", "-", "100", "\n", "", "", "gby_att", "=", "self", ".", "softmax", "(", "gby_att_val", ".", "view", "(", "(", "-", "1", ",", "max_q_len", ")", ")", ")", ".", "view", "(", "B", ",", "-", "1", ",", "max_q_len", ")", "\n", "K_gby_expand", "=", "(", "q_enc", ".", "unsqueeze", "(", "1", ")", "*", "gby_att", ".", "unsqueeze", "(", "3", ")", ")", ".", "sum", "(", "2", ")", "\n", "gby_score", "=", "self", ".", "gby_out", "(", "self", ".", "gby_out_K", "(", "K_gby_expand", ")", "+", "self", ".", "gby_out_col", "(", "col_enc", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "for", "idx", ",", "num", "in", "enumerate", "(", "col_len", ")", ":", "\n", "            ", "if", "num", "<", "max_col_len", ":", "\n", "                ", "gby_score", "[", "idx", ",", "num", ":", "]", "=", "-", "100", "\n", "\n", "# Predict Having", "\n", "", "", "hv_att_val", "=", "torch", ".", "bmm", "(", "col_enc", ",", "self", ".", "hv_att", "(", "q_enc", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "for", "idx", ",", "num", "in", "enumerate", "(", "col_len", ")", ":", "\n", "            ", "if", "num", "<", "max_col_len", ":", "\n", "                ", "hv_att_val", "[", "idx", ",", "num", ":", ",", ":", "]", "=", "-", "100", "\n", "", "", "for", "idx", ",", "num", "in", "enumerate", "(", "q_len", ")", ":", "\n", "            ", "if", "num", "<", "max_q_len", ":", "\n", "                ", "hv_att_val", "[", "idx", ",", ":", ",", "num", ":", "]", "=", "-", "100", "\n", "\n", "", "", "hv_att_prob", "=", "self", ".", "softmax", "(", "hv_att_val", ".", "view", "(", "(", "-", "1", ",", "max_q_len", ")", ")", ")", ".", "view", "(", "B", ",", "-", "1", ",", "max_q_len", ")", "\n", "hv_weighted", "=", "(", "q_enc", ".", "unsqueeze", "(", "1", ")", "*", "hv_att_prob", ".", "unsqueeze", "(", "3", ")", ")", ".", "sum", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "hv_score", "=", "self", ".", "hv_out", "(", "self", ".", "hv_out_q", "(", "hv_weighted", ")", ")", "\n", "\n", "# Predict columns.", "\n", "att_val_qc", "=", "torch", ".", "bmm", "(", "col_enc", ",", "self", ".", "q_att", "(", "q_enc", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "for", "idx", ",", "num", "in", "enumerate", "(", "q_len", ")", ":", "\n", "            ", "if", "num", "<", "max_q_len", ":", "\n", "                ", "att_val_qc", "[", "idx", ",", ":", ",", "num", ":", "]", "=", "-", "100", "\n", "", "", "att_prob_qc", "=", "self", ".", "softmax", "(", "att_val_qc", ".", "view", "(", "(", "-", "1", ",", "max_q_len", ")", ")", ")", ".", "view", "(", "B", ",", "-", "1", ",", "max_q_len", ")", "\n", "# q_weighted: (B, max_col_len, hid_dim)", "\n", "q_weighted", "=", "(", "q_enc", ".", "unsqueeze", "(", "1", ")", "*", "att_prob_qc", ".", "unsqueeze", "(", "3", ")", ")", ".", "sum", "(", "2", ")", "\n", "# Compute prediction scores", "\n", "# self.col_out.squeeze(): (B, max_col_len)", "\n", "col_score", "=", "self", ".", "col_out", "(", "self", ".", "col_out_q", "(", "q_weighted", ")", "+", "self", ".", "col_out_c", "(", "col_enc", ")", ")", ".", "squeeze", "(", ")", "\n", "for", "idx", ",", "num", "in", "enumerate", "(", "col_len", ")", ":", "\n", "            ", "if", "num", "<", "max_col_len", ":", "\n", "                ", "col_score", "[", "idx", ",", "num", ":", "]", "=", "-", "100", "\n", "# Predict aggregation", "\n", "", "", "agg_att_val", "=", "torch", ".", "bmm", "(", "col_enc", ",", "self", ".", "agg_att", "(", "q_enc", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "for", "idx", ",", "num", "in", "enumerate", "(", "col_len", ")", ":", "\n", "            ", "if", "num", "<", "max_col_len", ":", "\n", "                ", "agg_att_val", "[", "idx", ",", "num", ":", ",", ":", "]", "=", "-", "100", "\n", "", "", "for", "idx", ",", "num", "in", "enumerate", "(", "q_len", ")", ":", "\n", "            ", "if", "num", "<", "max_q_len", ":", "\n", "                ", "agg_att_val", "[", "idx", ",", ":", ",", "num", ":", "]", "=", "-", "100", "\n", "", "", "agg_att", "=", "self", ".", "softmax", "(", "agg_att_val", ".", "view", "(", "(", "-", "1", ",", "max_q_len", ")", ")", ")", ".", "view", "(", "B", ",", "-", "1", ",", "max_q_len", ")", "\n", "# q_weighted_num: (B, hid_dim)", "\n", "q_weighted_agg", "=", "(", "q_enc", ".", "unsqueeze", "(", "1", ")", "*", "agg_att", ".", "unsqueeze", "(", "3", ")", ")", ".", "sum", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "# self.col_num_out: (B, 4)", "\n", "agg_score", "=", "self", ".", "agg_out", "(", "self", ".", "agg_out_q", "(", "q_weighted_agg", ")", ")", "\n", "\n", "\n", "# Predict op", "\n", "op_att_val", "=", "torch", ".", "matmul", "(", "col_enc", ",", "self", ".", "agg_att", "(", "q_enc", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "for", "idx", ",", "num", "in", "enumerate", "(", "q_len", ")", ":", "\n", "            ", "if", "num", "<", "max_q_len", ":", "\n", "                ", "op_att_val", "[", "idx", ",", ":", ",", "num", ":", "]", "=", "-", "100", "\n", "", "", "op_att", "=", "self", ".", "softmax", "(", "op_att_val", ".", "view", "(", "-", "1", ",", "max_q_len", ")", ")", ".", "view", "(", "B", ",", "-", "1", ",", "max_q_len", ")", "\n", "q_weighted_op", "=", "(", "q_enc", ".", "unsqueeze", "(", "1", ")", "*", "op_att", ".", "unsqueeze", "(", "3", ")", ")", ".", "sum", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "\n", "op_score", "=", "self", ".", "op_out", "(", "self", ".", "op_out_q", "(", "q_weighted_op", ")", ")", "\n", "\n", "score", "=", "(", "gby_num_score", ",", "gby_score", ",", "hv_score", ",", "col_score", ",", "agg_score", ",", "op_score", ")", "\n", "\n", "return", "score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.order_predict.OrderPredictor.__init__": [[11, 51], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.MultiLabelSoftMarginLoss", "torch.MultiLabelSoftMarginLoss", "torch.MultiLabelSoftMarginLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "order_predict.OrderPredictor.cuda"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.cuda"], ["    ", "def", "__init__", "(", "self", ",", "N_word", ",", "N_h", ",", "N_depth", ",", "gpu", ")", ":", "\n", "        ", "super", "(", "OrderPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "N_h", "=", "N_h", "\n", "self", ".", "gpu", "=", "gpu", "\n", "\n", "self", ".", "q_lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "N_word", ",", "hidden_size", "=", "N_h", "/", "2", ",", "\n", "num_layers", "=", "N_depth", ",", "batch_first", "=", "True", ",", "\n", "dropout", "=", "0.3", ",", "bidirectional", "=", "True", ")", "\n", "\n", "self", ".", "col_lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "N_word", ",", "hidden_size", "=", "N_h", "/", "2", ",", "\n", "num_layers", "=", "N_depth", ",", "batch_first", "=", "True", ",", "\n", "dropout", "=", "0.3", ",", "bidirectional", "=", "True", ")", "\n", "\n", "self", ".", "gby_num_h", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "gby_num_l", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "gby_num_out", "=", "nn", ".", "Sequential", "(", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "N_h", ",", "2", ")", ")", "\n", "\n", "self", ".", "q_att", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "col_out_q", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "col_out_c", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "col_out", "=", "nn", ".", "Sequential", "(", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "N_h", ",", "1", ")", ")", "\n", "\n", "self", ".", "agg_att", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "agg_out_q", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "agg_out_c", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "agg_out", "=", "nn", ".", "Sequential", "(", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "N_h", ",", "6", ")", ")", "#to 5", "\n", "\n", "self", ".", "dat_att", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "dat_out_q", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "dat_out_c", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "dat_out", "=", "nn", ".", "Sequential", "(", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "N_h", ",", "5", ")", ")", "#for 4 desc/asc limit/none combinations", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "#dim=1", "\n", "self", ".", "CE", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "log_softmax", "=", "nn", ".", "LogSoftmax", "(", ")", "\n", "self", ".", "mlsml", "=", "nn", ".", "MultiLabelSoftMarginLoss", "(", ")", "\n", "self", ".", "bce_logit", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "self", ".", "sigm", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "if", "gpu", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.order_predict.OrderPredictor.forward": [[52, 121], ["max", "max", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "net_utils.run_lstm", "net_utils.run_lstm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "enumerate", "enumerate", "order_predict.OrderPredictor.softmax().view", "order_predict.OrderPredictor.gby_num_out", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "enumerate", "order_predict.OrderPredictor.softmax().view", "order_predict.OrderPredictor.col_out().squeeze", "enumerate", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "enumerate", "enumerate", "order_predict.OrderPredictor.softmax().view", "order_predict.OrderPredictor.agg_out", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "enumerate", "enumerate", "order_predict.OrderPredictor.softmax().view", "order_predict.OrderPredictor.dat_out", "order_predict.OrderPredictor.gby_num_h().transpose", "order_predict.OrderPredictor.gby_num_l", "order_predict.OrderPredictor.q_att().transpose", "order_predict.OrderPredictor.agg_att().transpose", "order_predict.OrderPredictor.agg_out_q", "order_predict.OrderPredictor.dat_att().transpose", "order_predict.OrderPredictor.dat_out_q", "order_predict.OrderPredictor.softmax", "order_predict.OrderPredictor.softmax", "order_predict.OrderPredictor.col_out", "order_predict.OrderPredictor.softmax", "order_predict.OrderPredictor.softmax", "order_predict.OrderPredictor.gby_num_h", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "order_predict.OrderPredictor.q_att", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "q_enc.unsqueeze", "order_predict.OrderPredictor.unsqueeze", "order_predict.OrderPredictor.agg_att", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "order_predict.OrderPredictor.dat_att", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "order_predict.OrderPredictor.col_out_q", "order_predict.OrderPredictor.col_out_c", "q_enc.unsqueeze", "order_predict.OrderPredictor.unsqueeze", "q_enc.unsqueeze", "order_predict.OrderPredictor.unsqueeze", "q_enc.unsqueeze", "order_predict.OrderPredictor.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.net_utils.run_lstm", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.net_utils.run_lstm", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax"], ["", "", "def", "forward", "(", "self", ",", "q_emb_var", ",", "q_len", ",", "col_emb_var", ",", "col_len", ",", "col_num", ",", "col_name_len", ")", ":", "\n", "        ", "max_q_len", "=", "max", "(", "q_len", ")", "\n", "max_col_len", "=", "max", "(", "col_len", ")", "\n", "B", "=", "len", "(", "q_len", ")", "\n", "\n", "q_enc", ",", "_", "=", "run_lstm", "(", "self", ".", "q_lstm", ",", "q_emb_var", ",", "q_len", ")", "\n", "col_enc", ",", "_", "=", "col_name_encode", "(", "col_emb_var", ",", "col_name_len", ",", "col_len", ",", "self", ".", "col_lstm", ")", "\n", "\n", "\n", "# Predict number", "\n", "gby_num_att", "=", "torch", ".", "bmm", "(", "col_enc", ",", "self", ".", "gby_num_h", "(", "q_enc", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "for", "idx", ",", "num", "in", "enumerate", "(", "col_len", ")", ":", "\n", "            ", "if", "num", "<", "max_col_len", ":", "\n", "                ", "gby_num_att", "[", "idx", ",", "num", ":", ",", ":", "]", "=", "-", "100", "\n", "", "", "for", "idx", ",", "num", "in", "enumerate", "(", "q_len", ")", ":", "\n", "            ", "if", "num", "<", "max_q_len", ":", "\n", "                ", "gby_num_att", "[", "idx", ",", ":", ",", "num", ":", "]", "=", "-", "100", "\n", "\n", "", "", "gby_num_att_val", "=", "self", ".", "softmax", "(", "gby_num_att", ".", "view", "(", "(", "-", "1", ",", "max_q_len", ")", ")", ")", ".", "view", "(", "B", ",", "-", "1", ",", "max_q_len", ")", "\n", "gby_num_K", "=", "(", "q_enc", ".", "unsqueeze", "(", "1", ")", "*", "gby_num_att_val", ".", "unsqueeze", "(", "3", ")", ")", ".", "sum", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "ody_num_score", "=", "self", ".", "gby_num_out", "(", "self", ".", "gby_num_l", "(", "gby_num_K", ")", ")", "\n", "\n", "# Predict columns.", "\n", "att_val_qc", "=", "torch", ".", "bmm", "(", "col_enc", ",", "self", ".", "q_att", "(", "q_enc", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "for", "idx", ",", "num", "in", "enumerate", "(", "q_len", ")", ":", "\n", "            ", "if", "num", "<", "max_q_len", ":", "\n", "                ", "att_val_qc", "[", "idx", ",", ":", ",", "num", ":", "]", "=", "-", "100", "\n", "", "", "att_prob_qc", "=", "self", ".", "softmax", "(", "att_val_qc", ".", "view", "(", "(", "-", "1", ",", "max_q_len", ")", ")", ")", ".", "view", "(", "B", ",", "-", "1", ",", "max_q_len", ")", "\n", "# q_weighted: (B, max_col_len, hid_dim)", "\n", "q_weighted", "=", "(", "q_enc", ".", "unsqueeze", "(", "1", ")", "*", "att_prob_qc", ".", "unsqueeze", "(", "3", ")", ")", ".", "sum", "(", "2", ")", "\n", "# Compute prediction scores", "\n", "# self.col_out.squeeze(): (B, max_col_len)", "\n", "col_score", "=", "self", ".", "col_out", "(", "self", ".", "col_out_q", "(", "q_weighted", ")", "+", "self", ".", "col_out_c", "(", "col_enc", ")", ")", ".", "squeeze", "(", ")", "\n", "for", "idx", ",", "num", "in", "enumerate", "(", "col_len", ")", ":", "\n", "            ", "if", "num", "<", "max_col_len", ":", "\n", "                ", "col_score", "[", "idx", ",", "num", ":", "]", "=", "-", "100", "\n", "\n", "# Predict aggregation", "\n", "", "", "agg_att_val", "=", "torch", ".", "bmm", "(", "col_enc", ",", "self", ".", "agg_att", "(", "q_enc", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "for", "idx", ",", "num", "in", "enumerate", "(", "col_len", ")", ":", "\n", "            ", "if", "num", "<", "max_col_len", ":", "\n", "                ", "agg_att_val", "[", "idx", ",", "num", ":", ",", ":", "]", "=", "-", "100", "\n", "", "", "for", "idx", ",", "num", "in", "enumerate", "(", "q_len", ")", ":", "\n", "            ", "if", "num", "<", "max_q_len", ":", "\n", "                ", "agg_att_val", "[", "idx", ",", ":", ",", "num", ":", "]", "=", "-", "100", "\n", "", "", "agg_att", "=", "self", ".", "softmax", "(", "agg_att_val", ".", "view", "(", "(", "-", "1", ",", "max_q_len", ")", ")", ")", ".", "view", "(", "B", ",", "-", "1", ",", "max_q_len", ")", "\n", "# q_weighted_num: (B, hid_dim)", "\n", "q_weighted_agg", "=", "(", "q_enc", ".", "unsqueeze", "(", "1", ")", "*", "agg_att", ".", "unsqueeze", "(", "3", ")", ")", ".", "sum", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "# self.col_num_out: (B, 4)", "\n", "agg_score", "=", "self", ".", "agg_out", "(", "self", ".", "agg_out_q", "(", "q_weighted_agg", ")", ")", "\n", "\n", "# Predict desc asc limit", "\n", "dat_att_val", "=", "torch", ".", "bmm", "(", "col_enc", ",", "self", ".", "dat_att", "(", "q_enc", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "for", "idx", ",", "num", "in", "enumerate", "(", "col_len", ")", ":", "\n", "            ", "if", "num", "<", "max_col_len", ":", "\n", "                ", "dat_att_val", "[", "idx", ",", "num", ":", ",", ":", "]", "=", "-", "100", "\n", "", "", "for", "idx", ",", "num", "in", "enumerate", "(", "q_len", ")", ":", "\n", "            ", "if", "num", "<", "max_q_len", ":", "\n", "                ", "dat_att_val", "[", "idx", ",", ":", ",", "num", ":", "]", "=", "-", "100", "\n", "", "", "dat_att", "=", "self", ".", "softmax", "(", "dat_att_val", ".", "view", "(", "(", "-", "1", ",", "max_q_len", ")", ")", ")", ".", "view", "(", "B", ",", "-", "1", ",", "max_q_len", ")", "\n", "# q_weighted_num: (B, hid_dim)", "\n", "q_weighted_dat", "=", "(", "q_enc", ".", "unsqueeze", "(", "1", ")", "*", "dat_att", ".", "unsqueeze", "(", "3", ")", ")", ".", "sum", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "# self.col_num_out: (B, 4)", "\n", "dat_score", "=", "self", ".", "dat_out", "(", "self", ".", "dat_out_q", "(", "q_weighted_dat", ")", ")", "\n", "\n", "score", "=", "(", "ody_num_score", ",", "col_score", ",", "agg_score", ",", "dat_score", ")", "\n", "\n", "return", "score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.sel_predict.SelPredictor.__init__": [[11, 51], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.MultiLabelSoftMarginLoss", "torch.MultiLabelSoftMarginLoss", "torch.MultiLabelSoftMarginLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "sel_predict.SelPredictor.cuda"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.cuda"], ["    ", "def", "__init__", "(", "self", ",", "N_word", ",", "N_h", ",", "N_depth", ",", "gpu", ")", ":", "\n", "        ", "super", "(", "SelPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "N_h", "=", "N_h", "\n", "self", ".", "gpu", "=", "gpu", "\n", "\n", "self", ".", "q_lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "N_word", ",", "hidden_size", "=", "N_h", "/", "2", ",", "\n", "num_layers", "=", "N_depth", ",", "batch_first", "=", "True", ",", "\n", "dropout", "=", "0.3", ",", "bidirectional", "=", "True", ")", "\n", "\n", "self", ".", "col_lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "N_word", ",", "hidden_size", "=", "N_h", "/", "2", ",", "\n", "num_layers", "=", "N_depth", ",", "batch_first", "=", "True", ",", "\n", "dropout", "=", "0.3", ",", "bidirectional", "=", "True", ")", "\n", "\n", "self", ".", "q_num_att", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "col_num_out_q", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "col_num_out", "=", "nn", ".", "Sequential", "(", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "N_h", ",", "5", ")", ")", "# num of cols: 1-4", "\n", "\n", "self", ".", "q_att", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "col_out_q", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "col_out_c", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "col_out", "=", "nn", ".", "Sequential", "(", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "N_h", ",", "1", ")", ")", "\n", "\n", "self", ".", "agg_num_att", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "agg_num_out_q", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "agg_num_out_c", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "agg_num_out", "=", "nn", ".", "Sequential", "(", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "N_h", ",", "5", ")", ")", "\n", "\n", "self", ".", "agg_att", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "agg_out_q", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "agg_out_c", "=", "nn", ".", "Linear", "(", "N_h", ",", "N_h", ")", "\n", "self", ".", "agg_out", "=", "nn", ".", "Sequential", "(", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "N_h", ",", "6", ")", ")", "#to 5", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "#dim=1", "\n", "self", ".", "CE", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "log_softmax", "=", "nn", ".", "LogSoftmax", "(", ")", "\n", "self", ".", "mlsml", "=", "nn", ".", "MultiLabelSoftMarginLoss", "(", ")", "\n", "self", ".", "bce_logit", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "self", ".", "sigm", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "if", "gpu", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.sel_predict.SelPredictor.forward": [[52, 143], ["max", "max", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "net_utils.run_lstm", "net_utils.run_lstm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "enumerate", "enumerate", "sel_predict.SelPredictor.softmax().view", "sel_predict.SelPredictor.col_num_out", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "enumerate", "sel_predict.SelPredictor.softmax().view", "sel_predict.SelPredictor.col_out().squeeze", "enumerate", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "enumerate", "sel_predict.SelPredictor.softmax().view", "sel_predict.SelPredictor.agg_num_out().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "enumerate", "sel_predict.SelPredictor.softmax().view", "sel_predict.SelPredictor.agg_out().squeeze", "sel_predict.SelPredictor.q_num_att().transpose", "sel_predict.SelPredictor.col_num_out_q", "sel_predict.SelPredictor.q_att().transpose", "sel_predict.SelPredictor.data.cpu().numpy", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.append", "torch.stack.append", "torch.stack.append", "sel_predict.SelPredictor.softmax", "sel_predict.SelPredictor.softmax", "sel_predict.SelPredictor.col_out", "list", "chosen_sel_gt.append", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "sel_predict.SelPredictor.softmax", "sel_predict.SelPredictor.agg_num_out", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "sel_predict.SelPredictor.softmax", "sel_predict.SelPredictor.agg_out", "sel_predict.SelPredictor.q_num_att", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "sel_predict.SelPredictor.q_att", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "q_enc.unsqueeze", "sel_predict.SelPredictor.unsqueeze", "list", "sel_predict.SelPredictor.data.cpu", "range", "sel_predict.SelPredictor.agg_num_att().unsqueeze", "torch.stack.unsqueeze", "torch.stack.unsqueeze", "torch.stack.unsqueeze", "torch.matmul().squeeze.view", "torch.matmul().squeeze.view", "torch.matmul().squeeze.view", "q_enc.unsqueeze", "sel_predict.SelPredictor.unsqueeze", "sel_predict.SelPredictor.agg_att().unsqueeze", "torch.stack.unsqueeze", "torch.stack.unsqueeze", "torch.stack.unsqueeze", "torch.matmul().squeeze.view", "torch.matmul().squeeze.view", "torch.matmul().squeeze.view", "q_enc.unsqueeze", "sel_predict.SelPredictor.unsqueeze", "sel_predict.SelPredictor.col_out_q", "sel_predict.SelPredictor.col_out_c", "numpy.argmax", "numpy.argsort", "len", "curr_sel.append", "sel_predict.SelPredictor.agg_num_out_q", "sel_predict.SelPredictor.agg_num_out_c", "sel_predict.SelPredictor.agg_out_q", "sel_predict.SelPredictor.agg_out_c", "q_enc.unsqueeze", "sel_predict.SelPredictor.unsqueeze", "sel_predict.SelPredictor.data.cpu().numpy", "len", "sel_predict.SelPredictor.agg_num_att", "sel_predict.SelPredictor.agg_att", "sel_predict.SelPredictor.data.cpu"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.net_utils.run_lstm", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.net_utils.run_lstm", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.argmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.argsort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "", "def", "forward", "(", "self", ",", "q_emb_var", ",", "q_len", ",", "col_emb_var", ",", "col_len", ",", "col_num", ",", "col_name_len", ",", "gt_sel", ")", ":", "\n", "        ", "max_q_len", "=", "max", "(", "q_len", ")", "\n", "max_col_len", "=", "max", "(", "col_len", ")", "\n", "B", "=", "len", "(", "q_len", ")", "\n", "\n", "q_enc", ",", "_", "=", "run_lstm", "(", "self", ".", "q_lstm", ",", "q_emb_var", ",", "q_len", ")", "\n", "col_enc", ",", "_", "=", "col_name_encode", "(", "col_emb_var", ",", "col_name_len", ",", "col_len", ",", "self", ".", "col_lstm", ")", "\n", "#col_enc, _ = run_lstm(self.col_lstm, col_emb_var, col_len)", "\n", "\n", "# Predict column number: 1-3", "\n", "# att_val_qc_num: (B, max_col_len, max_q_len)", "\n", "att_val_qc_num", "=", "torch", ".", "bmm", "(", "col_enc", ",", "self", ".", "q_num_att", "(", "q_enc", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "for", "idx", ",", "num", "in", "enumerate", "(", "col_len", ")", ":", "\n", "            ", "if", "num", "<", "max_col_len", ":", "\n", "                ", "att_val_qc_num", "[", "idx", ",", "num", ":", ",", ":", "]", "=", "-", "100", "\n", "", "", "for", "idx", ",", "num", "in", "enumerate", "(", "q_len", ")", ":", "\n", "            ", "if", "num", "<", "max_q_len", ":", "\n", "                ", "att_val_qc_num", "[", "idx", ",", ":", ",", "num", ":", "]", "=", "-", "100", "\n", "", "", "att_prob_qc_num", "=", "self", ".", "softmax", "(", "att_val_qc_num", ".", "view", "(", "(", "-", "1", ",", "max_q_len", ")", ")", ")", ".", "view", "(", "B", ",", "-", "1", ",", "max_q_len", ")", "\n", "# q_weighted_num: (B, hid_dim)", "\n", "q_weighted_num", "=", "(", "q_enc", ".", "unsqueeze", "(", "1", ")", "*", "att_prob_qc_num", ".", "unsqueeze", "(", "3", ")", ")", ".", "sum", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "# self.col_num_out: (B, 4)", "\n", "col_num_score", "=", "self", ".", "col_num_out", "(", "self", ".", "col_num_out_q", "(", "q_weighted_num", ")", ")", "\n", "\n", "# Predict columns.", "\n", "att_val_qc", "=", "torch", ".", "bmm", "(", "col_enc", ",", "self", ".", "q_att", "(", "q_enc", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "for", "idx", ",", "num", "in", "enumerate", "(", "q_len", ")", ":", "\n", "            ", "if", "num", "<", "max_q_len", ":", "\n", "                ", "att_val_qc", "[", "idx", ",", ":", ",", "num", ":", "]", "=", "-", "100", "\n", "", "", "att_prob_qc", "=", "self", ".", "softmax", "(", "att_val_qc", ".", "view", "(", "(", "-", "1", ",", "max_q_len", ")", ")", ")", ".", "view", "(", "B", ",", "-", "1", ",", "max_q_len", ")", "\n", "# q_weighted: (B, max_col_len, hid_dim)", "\n", "q_weighted", "=", "(", "q_enc", ".", "unsqueeze", "(", "1", ")", "*", "att_prob_qc", ".", "unsqueeze", "(", "3", ")", ")", ".", "sum", "(", "2", ")", "\n", "# Compute prediction scores", "\n", "# self.col_out.squeeze(): (B, max_col_len)", "\n", "col_score", "=", "self", ".", "col_out", "(", "self", ".", "col_out_q", "(", "q_weighted", ")", "+", "self", ".", "col_out_c", "(", "col_enc", ")", ")", ".", "squeeze", "(", ")", "\n", "for", "idx", ",", "num", "in", "enumerate", "(", "col_len", ")", ":", "\n", "            ", "if", "num", "<", "max_col_len", ":", "\n", "                ", "col_score", "[", "idx", ",", "num", ":", "]", "=", "-", "100", "\n", "\n", "# get select columns for agg prediction", "\n", "", "", "chosen_sel_gt", "=", "[", "]", "\n", "if", "gt_sel", "is", "None", ":", "\n", "            ", "sel_nums", "=", "[", "x", "+", "1", "for", "x", "in", "list", "(", "np", ".", "argmax", "(", "col_num_score", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "1", ")", ")", "]", "\n", "sel_col_scores", "=", "col_score", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "chosen_sel_gt", "=", "[", "list", "(", "np", ".", "argsort", "(", "-", "sel_col_scores", "[", "b", "]", ")", "[", ":", "sel_nums", "[", "b", "]", "]", ")", "\n", "for", "b", "in", "range", "(", "len", "(", "sel_nums", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "for", "x", "in", "gt_sel", ":", "\n", "                ", "curr", "=", "x", "[", "0", "]", "\n", "curr_sel", "=", "[", "curr", "]", "\n", "for", "col", "in", "x", ":", "\n", "                    ", "if", "col", "!=", "curr", ":", "\n", "                        ", "curr_sel", ".", "append", "(", "col", ")", "\n", "", "", "chosen_sel_gt", ".", "append", "(", "curr_sel", ")", "\n", "\n", "", "", "col_emb", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "            ", "cur_col_emb", "=", "torch", ".", "stack", "(", "[", "col_enc", "[", "b", ",", "x", "]", "\n", "for", "x", "in", "chosen_sel_gt", "[", "b", "]", "]", "+", "[", "col_enc", "[", "b", ",", "0", "]", "]", "*", "(", "5", "-", "len", "(", "chosen_sel_gt", "[", "b", "]", ")", ")", ")", "\n", "col_emb", ".", "append", "(", "cur_col_emb", ")", "\n", "", "col_emb", "=", "torch", ".", "stack", "(", "col_emb", ")", "# (B, 4, hd)", "\n", "\n", "# Predict aggregation", "\n", "# q_enc.unsqueeze(1): (B, 1, max_x_len, hd)", "\n", "# col_emb.unsqueeze(3): (B, 4, hd, 1)", "\n", "# agg_num_att_val.squeeze: (B, 4, max_x_len)", "\n", "agg_num_att_val", "=", "torch", ".", "matmul", "(", "self", ".", "agg_num_att", "(", "q_enc", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "col_emb", ".", "unsqueeze", "(", "3", ")", ")", ".", "squeeze", "(", ")", "\n", "for", "idx", ",", "num", "in", "enumerate", "(", "q_len", ")", ":", "\n", "            ", "if", "num", "<", "max_q_len", ":", "\n", "                ", "agg_num_att_val", "[", "idx", ",", ":", ",", "num", ":", "]", "=", "-", "100", "\n", "", "", "agg_num_att", "=", "self", ".", "softmax", "(", "agg_num_att_val", ".", "view", "(", "-", "1", ",", "max_q_len", ")", ")", ".", "view", "(", "B", ",", "-", "1", ",", "max_q_len", ")", "\n", "q_weighted_agg_num", "=", "(", "q_enc", ".", "unsqueeze", "(", "1", ")", "*", "agg_num_att", ".", "unsqueeze", "(", "3", ")", ")", ".", "sum", "(", "2", ")", "\n", "# (B, 4, 4)", "\n", "agg_num_score", "=", "self", ".", "agg_num_out", "(", "self", ".", "agg_num_out_q", "(", "q_weighted_agg_num", ")", "+", "\n", "self", ".", "agg_num_out_c", "(", "col_emb", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "agg_att_val", "=", "torch", ".", "matmul", "(", "self", ".", "agg_att", "(", "q_enc", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "col_emb", ".", "unsqueeze", "(", "3", ")", ")", ".", "squeeze", "(", ")", "\n", "for", "idx", ",", "num", "in", "enumerate", "(", "q_len", ")", ":", "\n", "            ", "if", "num", "<", "max_q_len", ":", "\n", "                ", "agg_att_val", "[", "idx", ",", ":", ",", "num", ":", "]", "=", "-", "100", "\n", "", "", "agg_att", "=", "self", ".", "softmax", "(", "agg_att_val", ".", "view", "(", "-", "1", ",", "max_q_len", ")", ")", ".", "view", "(", "B", ",", "-", "1", ",", "max_q_len", ")", "\n", "q_weighted_agg", "=", "(", "q_enc", ".", "unsqueeze", "(", "1", ")", "*", "agg_att", ".", "unsqueeze", "(", "3", ")", ")", ".", "sum", "(", "2", ")", "\n", "\n", "agg_score", "=", "self", ".", "agg_out", "(", "self", ".", "agg_out_q", "(", "q_weighted_agg", ")", "+", "\n", "self", ".", "agg_out_c", "(", "col_emb", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "score", "=", "(", "col_num_score", ",", "col_score", ",", "agg_num_score", ",", "agg_score", ")", "\n", "\n", "return", "score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert.BERTEncoder.__init__": [[14, 19], ["super().__init__", "transformers.BertModel.from_pretrained", "tensor2struct.modules.bert_tokenizer.BERTokenizer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "bert_version", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "bert_model", "=", "BertModel", ".", "from_pretrained", "(", "bert_version", ")", "\n", "self", ".", "tokenizer", "=", "bert_tokenizer", ".", "BERTokenizer", "(", "bert_version", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert.BERTEncoder.forward": [[20, 60], ["bert.BERTEncoder.tokenizer.pad_sequence_for_bert_batch", "torch.LongTensor().to", "torch.LongTensor().to", "tensor2struct.utils.batched_sequence.PackedSequencePlus.from_gather", "lengths.append", "bert.BERTEncoder.tokenizer.text_to_ids", "token_ids_list.append", "bert.BERTEncoder.bert_model", "torch.stack", "len", "torch.LongTensor", "torch.LongTensor", "torch.stack.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer.pad_sequence_for_bert_batch", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.from_gather", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer.text_to_ids", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "forward", "(", "self", ",", "tokens_list", ")", ":", "\n", "        ", "\"\"\"\n        Remove CLS and SEP representation\n        \"\"\"", "\n", "token_ids_list", "=", "[", "]", "\n", "lengths", "=", "[", "]", "\n", "for", "tokens", "in", "tokens_list", ":", "\n", "            ", "lengths", ".", "append", "(", "len", "(", "tokens", ")", ")", "\n", "ids", "=", "self", ".", "tokenizer", ".", "text_to_ids", "(", "tokens", ")", "\n", "token_ids_list", ".", "append", "(", "ids", ")", "\n", "\n", "", "(", "\n", "padded_token_lists", ",", "\n", "att_mask_lists", ",", "\n", "tok_type_lists", ",", "\n", ")", "=", "self", ".", "tokenizer", ".", "pad_sequence_for_bert_batch", "(", "token_ids_list", ")", "\n", "\n", "tokens_tensor", "=", "torch", ".", "LongTensor", "(", "padded_token_lists", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "att_masks_tensor", "=", "torch", ".", "LongTensor", "(", "att_mask_lists", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n", "# token type is not used", "\n", "bert_output", "=", "self", ".", "bert_model", "(", "tokens_tensor", ",", "attention_mask", "=", "att_masks_tensor", ")", "[", "0", "]", "\n", "\n", "def", "map_index", "(", "batch_idx", ",", "seq_idx", ")", ":", "\n", "            ", "return", "(", "batch_idx", ",", "seq_idx", "+", "1", ")", "# because of CLS", "\n", "\n", "", "def", "gather_from_indices", "(", "indices", ")", ":", "\n", "# TODO: better indexing", "\n", "            ", "res", "=", "[", "]", "\n", "for", "inds", "in", "indices", ":", "\n", "                ", "t", "=", "bert_output", "[", "inds", "]", "\n", "res", ".", "append", "(", "t", ")", "\n", "\n", "", "res", "=", "torch", ".", "stack", "(", "res", ",", "dim", "=", "0", ")", "\n", "return", "res", "\n", "\n", "", "packed_seq", "=", "batched_sequence", ".", "PackedSequencePlus", ".", "from_gather", "(", "\n", "lengths", ",", "map_index", ",", "gather_from_indices", "\n", ")", "\n", "return", "packed_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert.BERT2Embed.__init__": [[67, 75], ["super().__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "device", ",", "bert_version", ",", "emb_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "\"base\"", "in", "bert_version", ":", "\n", "            ", "input_size", "=", "768", "\n", "", "else", ":", "\n", "            ", "input_size", "=", "1024", "\n", "", "self", ".", "map", "=", "torch", ".", "nn", ".", "Linear", "(", "input_size", ",", "emb_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert.BERT2Embed.forward": [[76, 78], ["packed_seq.apply"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.apply"], ["", "def", "forward", "(", "self", ",", "packed_seq", ")", ":", "\n", "        ", "return", "packed_seq", ".", "apply", "(", "self", ".", "map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.BinarizableTree.__init__": [[98, 125], ["torch.Module.__init__", "tensor2struct.modules.energys.MLP"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "device", ",", "\n", "input_size", ",", "\n", "forward_relaxed", "=", "True", ",", "\n", "gumbel_temperature", "=", "None", ",", "\n", "use_map_decode", "=", "True", ",", "\n", "wcfg", "=", "True", ",", "\n", "dropout", "=", "0.1", ",", "\n", "invert_prior", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "score_f", "=", "energys", ".", "MLP", "(", "\n", "input_size", "=", "input_size", ",", "output_size", "=", "2", ",", "dropout", "=", "dropout", "\n", ")", "\n", "\n", "self", ".", "forward_relaxed", "=", "forward_relaxed", "# whether straight-through", "\n", "self", ".", "forward_hard", "=", "not", "self", ".", "forward_relaxed", "\n", "self", ".", "add_gumbel_noise", "=", "(", "\n", "gumbel_temperature", "is", "not", "None", "\n", ")", "# whether add Gumbel noise for sampling", "\n", "self", ".", "gumbel_temperature", "=", "gumbel_temperature", "\n", "self", ".", "use_map_decode", "=", "use_map_decode", "# whether use discrete during decoding", "\n", "self", ".", "wcfg", "=", "wcfg", "# if false, use pcfg parameterization", "\n", "self", ".", "invert_prior", "=", "invert_prior", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.BinarizableTree.inside": [[126, 187], ["span_rep.num_tokens", "len", "range", "range", "permutation.sort_span_dict", "permutation.sort_span_dict", "permutation.sort_span_dict", "enumerate", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "partitions.append", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "permutation.BinarizableTree.score_f", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "left_spans.append", "right_spans.append", "gamma_score_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "span_rep.get_span", "span_rep.get_span", "beta_ijk.unsqueeze().expand", "beta_ijk.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.SpanRepresentation.num_tokens", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.sort_span_dict", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.sort_span_dict", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.sort_span_dict", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.SpanRepresentation.get_span", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.SpanRepresentation.get_span", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.expand"], ["", "def", "inside", "(", "self", ",", "span_rep", ",", "lengths", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            span_rep: an object which support get_span(i,j)\n            lengths: the lenght of input sentences\n\n        Return:\n            partition: a vector of parition values\n            decision_scores: a dict that maps i,j to a vector of size j-i-1 * bs * 2\n            beta: a dict that maps i,j to a vector of score bs\n            gamma: a `global' version of decision_scores, size j-i-1 * bs * 2\n        \"\"\"", "\n", "beta", "=", "{", "}", "# scores in log space", "\n", "gamma", "=", "{", "}", "# intermedia beta scores", "\n", "decision_scores", "=", "{", "}", "# scores for straight or invert", "\n", "\n", "n", "=", "span_rep", ".", "num_tokens", "(", ")", "\n", "bs", "=", "len", "(", "lengths", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "beta", "[", "i", ",", "i", "+", "1", "]", "=", "torch", ".", "zeros", "(", "[", "bs", "]", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n", "", "for", "w", "in", "range", "(", "2", ",", "n", "+", "1", ")", ":", "# span length", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "n", "-", "w", "+", "1", ")", ":", "# span start", "\n", "                ", "k", "=", "i", "+", "w", "# span end", "\n", "\n", "# compute decision scores", "\n", "left_spans", ",", "right_spans", "=", "[", "]", ",", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "k", ")", ":", "\n", "                    ", "left_spans", ".", "append", "(", "span_rep", ".", "get_span", "(", "i", ",", "j", ")", ")", "\n", "right_spans", ".", "append", "(", "span_rep", ".", "get_span", "(", "j", ",", "k", ")", ")", "\n", "", "left_span_m", "=", "torch", ".", "stack", "(", "left_spans", ",", "dim", "=", "0", ")", "\n", "right_span_m", "=", "torch", ".", "stack", "(", "right_spans", ",", "dim", "=", "0", ")", "\n", "score_v", "=", "self", ".", "score_f", "(", "left_span_m", ",", "right_span_m", ")", "\n", "decision_scores", "[", "i", ",", "k", "]", "=", "score_v", "\n", "\n", "# compute beta and gamma", "\n", "gamma_score_list", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "k", ")", ":", "\n", "                    ", "score_idx", "=", "j", "-", "(", "i", "+", "1", ")", "\n", "beta_ijk", "=", "beta", "[", "i", ",", "j", "]", "+", "beta", "[", "j", ",", "k", "]", "\n", "gamma_score_list", ".", "append", "(", "\n", "score_v", "[", "score_idx", "]", "+", "beta_ijk", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "-", "1", ",", "2", ")", "\n", ")", "\n", "", "gamma", "[", "i", ",", "k", "]", "=", "torch", ".", "stack", "(", "gamma_score_list", ",", "dim", "=", "0", ")", "# j-i-1 * bs * 2", "\n", "beta", "[", "i", ",", "k", "]", "=", "torch", ".", "logsumexp", "(", "\n", "torch", ".", "cat", "(", "gamma_score_list", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "-", "1", "\n", ")", "\n", "\n", "# sort the span-based score dict", "\n", "", "", "beta", "=", "sort_span_dict", "(", "beta", ")", "\n", "gamma", "=", "sort_span_dict", "(", "gamma", ")", "\n", "decision_scores", "=", "sort_span_dict", "(", "decision_scores", ")", "\n", "\n", "# extract the partition value", "\n", "partitions", "=", "[", "]", "\n", "for", "batch_idx", ",", "length", "in", "enumerate", "(", "lengths", ")", ":", "\n", "            ", "partition", "=", "beta", "[", "0", ",", "length", "]", "[", "batch_idx", "]", "\n", "partitions", ".", "append", "(", "partition", ")", "\n", "", "partition_v", "=", "torch", ".", "stack", "(", "partitions", ",", "dim", "=", "0", ")", "\n", "\n", "return", "partition_v", ",", "beta", ",", "gamma", ",", "decision_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.BinarizableTree.marginals": [[188, 208], ["list", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "enumerate", "decision_scores.keys"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys"], ["", "def", "marginals", "(", "self", ",", "partition", ",", "decision_scores", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            decision_scores: local decision scores\n        Returns the marginal for each production rule, the marginals of scores \n        are computed by backpropagation.\n        \"\"\"", "\n", "idtotuple", "=", "list", "(", "decision_scores", ".", "keys", "(", ")", ")", "\n", "grad_inputs", "=", "[", "decision_scores", "[", "i", "]", "for", "i", "in", "idtotuple", "]", "\n", "raw_marginals", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "partition", ",", "\n", "grad_inputs", ",", "\n", "create_graph", "=", "True", ",", "\n", "only_inputs", "=", "True", ",", "\n", "allow_unused", "=", "False", ",", "\n", ")", "\n", "marginals", "=", "{", "}", "\n", "for", "i", ",", "_marginal", "in", "enumerate", "(", "raw_marginals", ")", ":", "\n", "            ", "marginals", "[", "idtotuple", "[", "i", "]", "]", "=", "_marginal", "\n", "", "return", "marginals", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.BinarizableTree.coverto_pcfg": [[209, 266], ["decision_scores[].size", "decision_scores[].transpose().reshape", "torch.softmax().view().sum", "torch.softmax().view().sum", "torch.softmax().view().sum", "torch.softmax().view().sum", "torch.softmax().view().sum", "torch.softmax().view().sum", "torch.softmax().view().sum", "torch.softmax().view().sum", "torch.softmax().view().sum", "op_probs_list.append", "torch.gumbel_softmax.view().transpose", "torch.cat().mean().log", "torch.cat().mean().log", "torch.cat().mean().log", "torch.cat().mean().log", "torch.cat().mean().log", "torch.cat().mean().log", "torch.cat().mean().log", "torch.cat().mean().log", "torch.cat().mean().log", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "decision_scores[].transpose", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.gumbel_softmax", "torch.gumbel_softmax", "torch.gumbel_softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.gumbel_softmax.view", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.softmax.max", "torch.softmax.max", "torch.softmax.max", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to.scatter_", "torch.zeros_like().to.scatter_", "torch.zeros_like().to.scatter_", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "max_ind.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gumbel.gumbel_softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gumbel.gumbel_softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gumbel.gumbel_softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax"], ["", "def", "coverto_pcfg", "(", "self", ",", "decision_scores", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            decision_scores: this can be a global (gamma) or local score (decision_scores)\n            If perturb is True, we use gumbel-softmax with temperature tau\n            if invert_prior is not None, we control the posterior of p(inverted_prior) and output a rule_loss\n        \"\"\"", "\n", "rule_probs", "=", "{", "}", "\n", "op_probs_list", "=", "[", "]", "# p(straight) and p(inverted) for compute rule_loss", "\n", "for", "i", ",", "k", "in", "decision_scores", ":", "\n", "            ", "num_split", "=", "k", "-", "i", "-", "1", "\n", "_num_split", ",", "bs", ",", "_d", "=", "decision_scores", "[", "i", ",", "k", "]", ".", "size", "(", ")", "\n", "assert", "_num_split", "==", "num_split", "and", "_d", "==", "2", "\n", "unnorm_score", "=", "decision_scores", "[", "i", ",", "k", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "bs", ",", "-", "1", ")", "\n", "\n", "# essentially soft_norm_score below", "\n", "cat_dist", "=", "(", "\n", "torch", ".", "softmax", "(", "unnorm_score", ",", "dim", "=", "1", ")", ".", "view", "(", "[", "bs", ",", "num_split", ",", "2", "]", ")", ".", "sum", "(", "1", ")", "\n", ")", "\n", "op_probs_list", ".", "append", "(", "cat_dist", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "if", "self", ".", "add_gumbel_noise", ":", "\n", "                    ", "norm_score", "=", "F", ".", "gumbel_softmax", "(", "\n", "unnorm_score", ",", "\n", "tau", "=", "self", ".", "gumbel_temperature", ",", "\n", "hard", "=", "self", ".", "forward_hard", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", "", "else", ":", "\n", "# non-stochastic relaxation using straight-through estimation", "\n", "                    ", "soft_norm_score", "=", "torch", ".", "softmax", "(", "unnorm_score", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "forward_hard", ":", "\n", "                        ", "_", ",", "max_ind", "=", "soft_norm_score", ".", "max", "(", "dim", "=", "1", ")", "\n", "one_hot", "=", "torch", ".", "zeros_like", "(", "soft_norm_score", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "one_hot", ".", "scatter_", "(", "1", ",", "max_ind", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "norm_score", "=", "(", "\n", "one_hot", "-", "soft_norm_score", "\n", ")", ".", "detach", "(", ")", "+", "soft_norm_score", "\n", "", "else", ":", "\n", "                        ", "norm_score", "=", "soft_norm_score", "\n", "", "", "", "else", ":", "\n", "                ", "norm_score", "=", "torch", ".", "softmax", "(", "unnorm_score", ",", "dim", "=", "1", ")", "\n", "", "norm_score", "=", "norm_score", ".", "view", "(", "[", "bs", ",", "num_split", ",", "2", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "rule_probs", "[", "i", ",", "k", "]", "=", "norm_score", "\n", "\n", "# compute the rule loss", "\n", "", "if", "self", ".", "invert_prior", ":", "\n", "            ", "log_mean_rule_prob", "=", "torch", ".", "cat", "(", "op_probs_list", ",", "dim", "=", "0", ")", ".", "mean", "(", "0", ")", ".", "log", "(", ")", "\n", "rule_loss", "=", "(", "\n", "-", "self", ".", "invert_prior", "*", "log_mean_rule_prob", "[", "1", "]", "\n", "-", "(", "1", "-", "self", ".", "invert_prior", ")", "*", "log_mean_rule_prob", "[", "0", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "rule_loss", "=", "None", "\n", "\n", "", "return", "rule_probs", ",", "rule_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.BinarizableTree.compute_entropy": [[267, 269], ["None"], "methods", ["None"], ["", "def", "compute_entropy", "(", "self", ",", "rule_probs", ",", "lengths", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.BinarizableTree.bottom_up_compute_permutation": [[270, 316], ["len", "range", "enumerate", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "list", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "range", "sum", "rule_probs.keys", "permutation.batched_block_diag", "rule_prob[].unsqueeze().expand_as", "m_list.append", "permutation.batched_anti_block_diag", "rule_prob[].unsqueeze().expand_as", "m_list.append", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "res_list.append", "res_list.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "rule_prob[].unsqueeze", "rule_prob[].unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.batched_block_diag", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.batched_anti_block_diag", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "bottom_up_compute_permutation", "(", "self", ",", "rule_probs", ",", "lengths", ")", ":", "\n", "        ", "\"\"\"\n        Compute permutation matrix in a bottom-up manner\n        \"\"\"", "\n", "p_matrices", "=", "{", "}", "\n", "bs", "=", "len", "(", "lengths", ")", "\n", "_", ",", "seq_len", "=", "list", "(", "rule_probs", ".", "keys", "(", ")", ")", "[", "-", "1", "]", "\n", "for", "i", "in", "range", "(", "seq_len", ")", ":", "\n", "            ", "p_matrices", "[", "i", ",", "i", "+", "1", "]", "=", "torch", ".", "ones", "(", "[", "bs", ",", "1", ",", "1", "]", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "", "for", "i", ",", "k", "in", "rule_probs", ":", "\n", "            ", "rule_prob_v", "=", "rule_probs", "[", "i", ",", "k", "]", "\n", "m_list", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "k", ")", ":", "\n", "                ", "idx", "=", "j", "-", "i", "-", "1", "# split point starts from i + 1", "\n", "rule_prob", "=", "rule_prob_v", "[", "idx", "]", "\n", "\n", "left_m", "=", "p_matrices", "[", "i", ",", "j", "]", "\n", "right_m", "=", "p_matrices", "[", "j", ",", "k", "]", "\n", "\n", "#  batch-wise product, some test code included", "\n", "s_mat", "=", "batched_block_diag", "(", "left_m", ",", "right_m", ")", "\n", "# _s_mat = batched_block_diag_forloop(left_m, right_m, torch.block_diag)", "\n", "# assert torch.all(torch.eq(s_mat, _s_mat))", "\n", "s_prob", "=", "rule_prob", "[", ":", ",", "0", ":", "1", "]", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "expand_as", "(", "s_mat", ")", "\n", "straight", "=", "s_prob", "*", "s_mat", "\n", "m_list", ".", "append", "(", "straight", ")", "\n", "\n", "i_mat", "=", "batched_anti_block_diag", "(", "left_m", ",", "right_m", ")", "\n", "# _i_mat = batched_block_diag_forloop(left_m, right_m, anti_block_diag)", "\n", "# assert torch.all(torch.eq(i_mat, _i_mat))", "\n", "i_prob", "=", "rule_prob", "[", ":", ",", "1", ":", "2", "]", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "expand_as", "(", "i_mat", ")", "\n", "inverted", "=", "i_prob", "*", "i_mat", "\n", "m_list", ".", "append", "(", "inverted", ")", "\n", "", "p_matrices", "[", "i", ",", "k", "]", "=", "sum", "(", "m_list", ")", "\n", "\n", "", "res_list", "=", "[", "]", "\n", "for", "batch_idx", ",", "length", "in", "enumerate", "(", "lengths", ")", ":", "\n", "            ", "real_p_mat", "=", "p_matrices", "[", "0", ",", "length", "]", "[", "batch_idx", "]", "\n", "if", "length", "<", "seq_len", ":", "\n", "                ", "pad_mat", "=", "torch", ".", "zeros", "(", "[", "seq_len", ",", "seq_len", "]", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "pad_mat", "[", ":", "length", ",", ":", "length", "]", "=", "real_p_mat", "\n", "res_list", ".", "append", "(", "pad_mat", ")", "\n", "", "else", ":", "\n", "                ", "res_list", ".", "append", "(", "real_p_mat", ")", "\n", "", "", "res", "=", "torch", ".", "stack", "(", "res_list", ",", "dim", "=", "0", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.BinarizableTree.bottom_up_map_decode": [[317, 361], ["len", "range", "enumerate", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "list", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.sum().sum().max", "torch.stack.sum().sum().max", "torch.stack.sum().sum().max", "cat_mat[].ceil", "rule_probs.keys", "permutation.batched_block_diag", "rule_prob[].unsqueeze().expand_as", "m_list.append", "permutation.batched_anti_block_diag", "rule_prob[].unsqueeze().expand_as", "m_list.append", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "res_list.append", "res_list.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.stack.sum().sum", "torch.stack.sum().sum", "torch.stack.sum().sum", "rule_prob[].unsqueeze", "rule_prob[].unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.stack.sum", "torch.stack.sum", "torch.stack.sum", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.batched_block_diag", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.batched_anti_block_diag", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "bottom_up_map_decode", "(", "self", ",", "rule_probs", ",", "lengths", ")", ":", "\n", "        ", "p_matrices", "=", "{", "}", "\n", "bs", "=", "len", "(", "lengths", ")", "\n", "_", ",", "seq_len", "=", "list", "(", "rule_probs", ".", "keys", "(", ")", ")", "[", "-", "1", "]", "\n", "for", "i", "in", "range", "(", "seq_len", ")", ":", "\n", "            ", "p_matrices", "[", "i", ",", "i", "+", "1", "]", "=", "torch", ".", "ones", "(", "[", "bs", ",", "1", ",", "1", "]", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "", "for", "i", ",", "k", "in", "rule_probs", ":", "\n", "            ", "rule_prob_v", "=", "rule_probs", "[", "i", ",", "k", "]", "\n", "m_list", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "k", ")", ":", "\n", "                ", "idx", "=", "j", "-", "i", "-", "1", "# split point starts from i + 1", "\n", "rule_prob", "=", "rule_prob_v", "[", "idx", "]", "\n", "\n", "left_m", "=", "p_matrices", "[", "i", ",", "j", "]", "\n", "right_m", "=", "p_matrices", "[", "j", ",", "k", "]", "\n", "\n", "#  batch-wise product, some test code included", "\n", "s_mat", "=", "batched_block_diag", "(", "left_m", ",", "right_m", ")", "\n", "s_prob", "=", "rule_prob", "[", ":", ",", "0", ":", "1", "]", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "expand_as", "(", "s_mat", ")", "\n", "straight", "=", "s_prob", "*", "s_mat", "\n", "m_list", ".", "append", "(", "straight", ")", "\n", "\n", "i_mat", "=", "batched_anti_block_diag", "(", "left_m", ",", "right_m", ")", "\n", "i_prob", "=", "rule_prob", "[", ":", ",", "1", ":", "2", "]", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "expand_as", "(", "i_mat", ")", "\n", "inverted", "=", "i_prob", "*", "i_mat", "\n", "m_list", ".", "append", "(", "inverted", ")", "\n", "\n", "", "cat_mat", "=", "torch", ".", "stack", "(", "m_list", ",", "dim", "=", "1", ")", "# bs * num_splits * n * n", "\n", "_", ",", "max_ids", "=", "cat_mat", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "max", "(", "dim", "=", "-", "1", ")", "# batch_size", "\n", "p_matrices", "[", "i", ",", "k", "]", "=", "cat_mat", "[", "\n", "torch", ".", "arange", "(", "bs", ")", ",", "max_ids", "\n", "]", ".", "ceil", "(", ")", "# ceil prob to 1", "\n", "\n", "", "res_list", "=", "[", "]", "\n", "for", "batch_idx", ",", "length", "in", "enumerate", "(", "lengths", ")", ":", "\n", "            ", "real_p_mat", "=", "p_matrices", "[", "0", ",", "length", "]", "[", "batch_idx", "]", "\n", "if", "length", "<", "seq_len", ":", "\n", "                ", "pad_mat", "=", "torch", ".", "zeros", "(", "[", "seq_len", ",", "seq_len", "]", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "pad_mat", "[", ":", "length", ",", ":", "length", "]", "=", "real_p_mat", "\n", "res_list", ".", "append", "(", "pad_mat", ")", "\n", "", "else", ":", "\n", "                ", "res_list", ".", "append", "(", "real_p_mat", ")", "\n", "", "", "res", "=", "torch", ".", "stack", "(", "res_list", ",", "dim", "=", "0", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.BinarizableTree.top_down_compute_permutation": [[362, 416], ["len", "permutation.BinarizableTree.top_down_compute_permutation.recur_compute"], "methods", ["None"], ["", "def", "top_down_compute_permutation", "(", "self", ",", "rule_probs", ",", "lengths", ")", ":", "\n", "        ", "\"\"\"\n        Previous unbatched version support top-k inference to save time; for \n        the current batched version, we might also do this\n        \"\"\"", "\n", "bs", "=", "len", "(", "lengths", ")", "\n", "_", ",", "seq_len", "=", "list", "(", "rule_probs", ".", "keys", "(", ")", ")", "[", "-", "1", "]", "\n", "\n", "p_matrices", "=", "{", "}", "\n", "\n", "def", "recur_compute", "(", "i", ",", "k", ")", ":", "\n", "            ", "if", "i", "+", "1", "==", "k", ":", "\n", "                ", "p_matrices", "[", "i", ",", "k", "]", "=", "torch", ".", "ones", "(", "[", "bs", ",", "1", ",", "1", "]", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n", "", "if", "(", "i", ",", "k", ")", "in", "p_matrices", ":", "\n", "                ", "return", "p_matrices", "[", "i", ",", "k", "]", "\n", "\n", "", "rule_prob_v", "=", "rule_probs", "[", "i", ",", "k", "]", "\n", "assert", "k", "-", "i", "-", "1", "==", "rule_prob_v", ".", "size", "(", ")", "[", "0", "]", "# from i+1 to k-1", "\n", "\n", "m_list", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "k", ")", ":", "\n", "                ", "idx", "=", "j", "-", "i", "-", "1", "\n", "rule_prob", "=", "rule_prob_v", "[", "idx", "]", "\n", "\n", "left_m", "=", "recur_compute", "(", "i", ",", "j", ")", "\n", "right_m", "=", "recur_compute", "(", "j", ",", "k", ")", "\n", "\n", "s_mat", "=", "batched_block_diag", "(", "left_m", ",", "right_m", ")", "\n", "s_prob", "=", "rule_prob", "[", ":", ",", "0", ":", "1", "]", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "expand_as", "(", "s_mat", ")", "\n", "straight", "=", "s_prob", "*", "s_mat", "\n", "m_list", ".", "append", "(", "straight", ")", "\n", "\n", "i_mat", "=", "batched_anti_block_diag", "(", "left_m", ",", "right_m", ")", "\n", "i_prob", "=", "rule_prob", "[", ":", ",", "1", ":", "2", "]", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "expand_as", "(", "i_mat", ")", "\n", "inverted", "=", "i_prob", "*", "i_mat", "\n", "m_list", ".", "append", "(", "inverted", ")", "\n", "\n", "", "p_matrices", "[", "i", ",", "k", "]", "=", "sum", "(", "m_list", ")", "\n", "return", "p_matrices", "[", "i", ",", "k", "]", "\n", "\n", "", "recur_compute", "(", "0", ",", "seq_len", ")", "\n", "\n", "res_list", "=", "[", "]", "\n", "for", "batch_idx", ",", "length", "in", "enumerate", "(", "lengths", ")", ":", "\n", "            ", "real_p_mat", "=", "p_matrices", "[", "0", ",", "length", "]", "[", "batch_idx", "]", "\n", "if", "length", "<", "seq_len", ":", "\n", "                ", "pad_mat", "=", "torch", ".", "zeros", "(", "[", "seq_len", ",", "seq_len", "]", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "pad_mat", "[", ":", "length", ",", ":", "length", "]", "=", "real_p_mat", "\n", "res_list", ".", "append", "(", "pad_mat", ")", "\n", "", "else", ":", "\n", "                ", "res_list", ".", "append", "(", "real_p_mat", ")", "\n", "", "", "res", "=", "torch", ".", "stack", "(", "res_list", ",", "dim", "=", "0", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.BinarizableTree.forward": [[417, 452], ["span_rep.num_batches", "span_rep.get_lengths", "permutation.BinarizableTree.inside", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "permutation.BinarizableTree.coverto_pcfg", "permutation.BinarizableTree.coverto_pcfg", "permutation.BinarizableTree.bottom_up_map_decode", "permutation.BinarizableTree.bottom_up_compute_permutation", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.SpanRepresentation.num_batches", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.SpanRepresentation.get_lengths", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.BinarizableTree.inside", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.BinarizableTree.coverto_pcfg", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.BinarizableTree.coverto_pcfg", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.BinarizableTree.bottom_up_map_decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.BinarizableTree.bottom_up_compute_permutation"], ["", "def", "forward", "(", "self", ",", "span_rep", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            span_rep: an object defined in lstm.py\n\n        Return: \n            a n*n matrix M, M[i,j] means the marginal \n            prob that j_th token is reordered to i. \n        \"\"\"", "\n", "bs", "=", "span_rep", ".", "num_batches", "(", ")", "\n", "lengths", "=", "span_rep", ".", "get_lengths", "(", ")", "\n", "\n", "if", "span_rep", ".", "num_tokens", "==", "1", ":", "\n", "            ", "return", "torch", ".", "ones", "(", "[", "bs", ",", "1", "]", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n", "", "partition", ",", "beta", ",", "gamma", ",", "decision_scores", "=", "self", ".", "inside", "(", "span_rep", ",", "lengths", ")", "\n", "# marginals = self.marginals(partition, decision_scores)", "\n", "\n", "# it can als be locally normalized", "\n", "if", "self", ".", "wcfg", ":", "\n", "            ", "rule_probs", ",", "rule_loss", "=", "self", ".", "coverto_pcfg", "(", "gamma", ")", "\n", "", "else", ":", "\n", "            ", "rule_probs", ",", "rule_loss", "=", "self", ".", "coverto_pcfg", "(", "decision_scores", ")", "\n", "\n", "# use map for decoding if set; otherwise use marginal", "\n", "", "if", "not", "self", ".", "training", "and", "self", ".", "use_map_decode", ":", "\n", "            ", "permutation_matrix", "=", "self", ".", "bottom_up_map_decode", "(", "rule_probs", ",", "lengths", ")", "\n", "", "else", ":", "\n", "#  use marginal for forward, could be 1) marginal as attention 2) soft sample with gumbel noise", "\n", "#  equivalent two ways to compute the marginal exactly", "\n", "# TODO: use top-down to filter out paths that are with probs 0", "\n", "            ", "permutation_matrix", "=", "self", ".", "bottom_up_compute_permutation", "(", "rule_probs", ",", "lengths", ")", "\n", "# permutation_matrix = self.top_down_compute_permutation(rule_probs, lengths)", "\n", "\n", "", "return", "permutation_matrix", ",", "rule_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation._anti_block_diag": [[15, 21], ["torch.flip", "torch.flip", "torch.flip", "torch.block_diag", "torch.block_diag", "torch.block_diag", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip"], "function", ["None"], ["def", "_anti_block_diag", "(", "m1", ",", "m2", ")", ":", "\n", "    ", "\"\"\"\n    m1, m2:  2-d tensors\n    \"\"\"", "\n", "return", "torch", ".", "flip", "(", "\n", "torch", ".", "block_diag", "(", "torch", ".", "flip", "(", "m1", ",", "dims", "=", "[", "0", "]", ")", ",", "torch", ".", "flip", "(", "m2", ",", "dims", "=", "[", "0", "]", ")", ")", ",", "dims", "=", "[", "0", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.anti_block_diag": [[24, 41], ["m1.unsqueeze.size", "m2.unsqueeze.size", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "len", "m1.unsqueeze.unsqueeze", "len", "m2.unsqueeze.unsqueeze", "m1.unsqueeze.size", "m2.unsqueeze.size", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size"], ["", "def", "anti_block_diag", "(", "m1", ",", "m2", ")", ":", "\n", "    ", "\"\"\"\n    Returns: [0, m2; m1, 0]\n    TODO: test which one works faster vs. _anti_block_diag\n    \"\"\"", "\n", "if", "len", "(", "m1", ".", "size", "(", ")", ")", "==", "1", ":", "\n", "        ", "m1", "=", "m1", ".", "unsqueeze", "(", "0", ")", "\n", "", "l1", ",", "_", "=", "m1", ".", "size", "(", ")", "\n", "\n", "if", "len", "(", "m2", ".", "size", "(", ")", ")", "==", "1", ":", "\n", "        ", "m2", "=", "m2", ".", "unsqueeze", "(", "0", ")", "\n", "", "l2", ",", "_", "=", "m2", ".", "size", "(", ")", "\n", "\n", "res", "=", "torch", ".", "zeros", "(", "[", "l1", "+", "l2", ",", "l1", "+", "l2", "]", ")", ".", "to", "(", "m1", ".", "device", ")", "\n", "res", "[", "l2", ":", ",", ":", "l1", "]", "=", "m1", "\n", "res", "[", ":", "l2", ",", "l1", ":", "]", "=", "m2", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.batched_block_diag_forloop": [[43, 56], ["m1.size", "range", "torch.stack", "torch.stack", "torch.stack", "res_list.append", "f"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "batched_block_diag_forloop", "(", "m1", ",", "m2", ",", "f", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        m1, m2: 3-d tensors\n\n        f: either torch.block_diag or anti_block_diag\n    \"\"\"", "\n", "bs", ",", "_", ",", "_", "=", "m1", ".", "size", "(", ")", "\n", "res_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "        ", "res_list", ".", "append", "(", "f", "(", "m1", "[", "i", "]", ",", "m2", "[", "i", "]", ")", ")", "\n", "", "res", "=", "torch", ".", "stack", "(", "res_list", ",", "dim", "=", "0", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.batched_block_diag": [[58, 70], ["m1.size", "m2.size", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["", "def", "batched_block_diag", "(", "m1", ",", "m2", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        m1, m2: 3-d tensors\n    \"\"\"", "\n", "bs", ",", "l1", ",", "_", "=", "m1", ".", "size", "(", ")", "\n", "_bs", ",", "l2", ",", "_", "=", "m2", ".", "size", "(", ")", "\n", "assert", "bs", "==", "_bs", "\n", "res", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "l1", "+", "l2", ",", "l1", "+", "l2", "]", ")", ".", "to", "(", "m1", ".", "device", ")", "\n", "res", "[", ":", ",", ":", "l1", ",", ":", "l1", "]", "=", "m1", "\n", "res", "[", ":", ",", "l1", ":", ",", "l1", ":", "]", "=", "m2", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.batched_anti_block_diag": [[72, 84], ["m1.size", "m2.size", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["", "def", "batched_anti_block_diag", "(", "m1", ",", "m2", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        m1, m2: 3-d tensors\n    \"\"\"", "\n", "bs", ",", "l1", ",", "_", "=", "m1", ".", "size", "(", ")", "\n", "_bs", ",", "l2", ",", "_", "=", "m2", ".", "size", "(", ")", "\n", "assert", "bs", "==", "_bs", "\n", "res", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "l1", "+", "l2", ",", "l1", "+", "l2", "]", ")", ".", "to", "(", "m1", ".", "device", ")", "\n", "res", "[", ":", ",", "l2", ":", ",", ":", "l1", "]", "=", "m1", "\n", "res", "[", ":", ",", ":", "l2", ",", "l1", ":", "]", "=", "m2", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.permutation.sort_span_dict": [[86, 91], ["collections.OrderedDict", "sorted", "score_dic.keys"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys"], ["", "def", "sort_span_dict", "(", "score_dic", ")", ":", "\n", "    ", "sorted_score_dic", "=", "collections", ".", "OrderedDict", "(", "\n", "{", "k", ":", "score_dic", "[", "k", "]", "for", "k", "in", "sorted", "(", "score_dic", ".", "keys", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "-", "x", "[", "0", "]", ")", "}", "\n", ")", "\n", "return", "sorted_score_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.energys.MLP.__init__": [[11, 18], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ",", "hidden_size", "=", "None", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "hidden_size", "is", "None", ":", "\n", "            ", "hidden_size", "=", "input_size", "*", "4", "\n", "", "self", ".", "w_1", "=", "nn", ".", "Linear", "(", "input_size", "*", "2", ",", "hidden_size", ")", "\n", "self", ".", "w_2", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "output_size", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.energys.MLP.forward": [[19, 22], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "energys.MLP.w_2", "energys.MLP.dropout", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "energys.MLP.w_1"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.relu", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.relu", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.relu", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.relu", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.relu", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.relu", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.relu", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.relu", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.relu"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "-", "1", ")", "\n", "return", "self", ".", "w_2", "(", "self", ".", "dropout", "(", "torch", ".", "nn", ".", "functional", ".", "relu", "(", "self", ".", "w_1", "(", "x", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.energys.Bilinear.__init__": [[25, 44], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "logger.info", "int", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ",", "dropout", "=", "0.1", ",", "include_id", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "include_id", "=", "include_id", "\n", "if", "include_id", ":", "\n", "            ", "output_size", "=", "output_size", "-", "1", "\n", "\n", "", "if", "output_size", "==", "0", ":", "\n", "            ", "assert", "include_id", "\n", "logger", ".", "info", "(", "\"Only dot-product is enabled for computing matching scores\"", ")", "\n", "self", ".", "enable_learnable_bilinear", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "enable_learnable_bilinear", "=", "True", "\n", "\n", "", "if", "self", ".", "enable_learnable_bilinear", ":", "\n", "            ", "hidden_size", "=", "int", "(", "input_size", "/", "4", ")", "\n", "self", ".", "bilinear_mat", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "torch", ".", "empty", "(", "input_size", ",", "hidden_size", ",", "output_size", ")", ")", "\n", ")", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.energys.Bilinear.apply_linear": [[45, 49], ["torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "energys.Bilinear.lin_bias.expand_as"], "methods", ["None"], ["", "def", "apply_linear", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "torch", ".", "einsum", "(", "\"bcl,lr->bcr\"", ",", "[", "x", ",", "self", ".", "lin_mat", "]", ")", "\n", "h", "=", "h", "+", "self", ".", "lin_bias", ".", "expand_as", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.energys.Bilinear.apply_bilinear": [[50, 60], ["torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x1.contiguous", "x2.contiguous", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum"], "methods", ["None"], ["", "def", "apply_bilinear", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "h1", "=", "torch", ".", "einsum", "(", "\"bcl,lho->bcoh\"", ",", "[", "x1", ",", "self", ".", "bilinear_mat", "]", ")", "\n", "h2", "=", "torch", ".", "einsum", "(", "\"bcl,lho->bcoh\"", ",", "[", "x2", ",", "self", ".", "bilinear_mat", "]", ")", "\n", "scores", "=", "torch", ".", "einsum", "(", "\"bcol,bcor->bco\"", ",", "[", "h1", ",", "h2", "]", ")", "# dot product", "\n", "\n", "if", "self", ".", "include_id", ":", "\n", "            ", "x1", ",", "x2", "=", "x1", ".", "contiguous", "(", ")", ",", "x2", ".", "contiguous", "(", ")", "\n", "id_score", "=", "torch", ".", "einsum", "(", "\"bci,bci->bc\"", ",", "[", "x1", ",", "x2", "]", ")", ".", "unsqueeze", "(", "2", ")", "\n", "scores", "=", "torch", ".", "cat", "(", "[", "scores", ",", "id_score", "]", ",", "dim", "=", "2", ")", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.energys.Bilinear.forward": [[61, 69], ["energys.Bilinear.dropout", "energys.Bilinear.dropout", "energys.Bilinear.apply_bilinear", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.energys.Bilinear.apply_bilinear"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "if", "self", ".", "enable_learnable_bilinear", ":", "\n", "            ", "x1", "=", "self", ".", "dropout", "(", "x1", ")", "\n", "x2", "=", "self", ".", "dropout", "(", "x2", ")", "\n", "return", "self", ".", "apply_bilinear", "(", "x1", ",", "x2", ")", "\n", "", "else", ":", "\n", "            ", "id_score", "=", "torch", ".", "einsum", "(", "\"bci,bci->bc\"", ",", "[", "x1", ",", "x2", "]", ")", ".", "unsqueeze", "(", "2", ")", "\n", "return", "id_score", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.SpanRepresentation.__init__": [[105, 117], ["hidden_state.transpose", "lstm.extract_all_span_features"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.extract_all_span_features"], ["def", "__init__", "(", "self", ",", "hidden_state", ",", "lengths", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            hidden_state: bs * length * hidden_size; we need to transform it\n            into bs second for the convenience of parsing\n\n            lengths: lengths of sequences including bos and eos, but get_lengths \n            function should return the real length\n        \"\"\"", "\n", "self", ".", "hidden_state", "=", "hidden_state", ".", "transpose", "(", "0", ",", "1", ")", "# Length * Bath * Hidden_size", "\n", "self", ".", "lengths", "=", "lengths", "\n", "self", ".", "span_v", "=", "extract_all_span_features", "(", "self", ".", "hidden_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.SpanRepresentation.num_tokens": [[118, 121], ["lstm.SpanRepresentation.hidden_state.size"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size"], ["", "def", "num_tokens", "(", "self", ")", ":", "\n", "# discard bos and eos", "\n", "        ", "return", "self", ".", "hidden_state", ".", "size", "(", ")", "[", "0", "]", "-", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.SpanRepresentation.num_batches": [[122, 124], ["lstm.SpanRepresentation.hidden_state.size"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size"], ["", "def", "num_batches", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "hidden_state", ".", "size", "(", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.SpanRepresentation.get_lengths": [[125, 129], ["int"], "methods", ["None"], ["", "def", "get_lengths", "(", "self", ")", ":", "\n", "# convert tensor to int, remove bos and eos", "\n", "        ", "lengths", "=", "[", "int", "(", "l", ")", "-", "2", "for", "l", "in", "self", ".", "lengths", "]", "\n", "return", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.SpanRepresentation.get_span": [[130, 136], ["None"], "methods", ["None"], ["", "def", "get_span", "(", "self", ",", "i", ",", "j", ")", ":", "\n", "        ", "\"\"\"\n        Obtain vector for span from i to j (exclusive)\n        \"\"\"", "\n", "assert", "j", ">", "i", "\n", "return", "self", ".", "span_v", "[", "i", "]", "[", "j", "-", "i", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.BiLSTM.__init__": [[139, 187], ["torch.nn.Module.__init__", "torch.nn.LSTM", "torch.nn.Dropout", "tensor2struct.modules.variational_lstm.BiLSTM", "tensor2struct.modules.variational_lstm.UniLSTM", "int"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_size", ",", "\n", "output_size", ",", "\n", "dropout", ",", "\n", "summarize", ",", "\n", "bidirectional", "=", "True", ",", "\n", "use_native", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        A wrapper over lstm that handles batched_sequence as input\n        This is mostly used for encoding. For decoding, use the UniLSTM below\n\n        summarize:\n        - True: return Tensor of 1 x batch x emb size\n        - False: return Tensor of seq len x batch x emb size\n\n        Native vs VarLSTM\n        1. in native lstm, dropout is applied in the input, whereas varlstm use Gal. dropout\n        2. ValLSTM use layernorm by default\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "use_native", ":", "\n", "            ", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "\n", "input_size", "=", "input_size", ",", "\n", "hidden_size", "=", "output_size", "//", "2", "if", "bidirectional", "else", "output_size", ",", "\n", "bidirectional", "=", "bidirectional", ",", "\n", "dropout", "=", "0.0", ",", "\n", ")", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "if", "bidirectional", ":", "\n", "                ", "self", ".", "lstm", "=", "variational_lstm", ".", "BiLSTM", "(", "\n", "input_size", "=", "input_size", ",", "\n", "hidden_size", "=", "int", "(", "output_size", "//", "2", ")", ",", "\n", "dropout", "=", "dropout", ",", "\n", "layernorm", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "lstm", "=", "variational_lstm", ".", "UniLSTM", "(", "\n", "input_size", "=", "input_size", ",", "\n", "hidden_size", "=", "output_size", ",", "\n", "dropout", "=", "dropout", ",", "\n", "layernorm", "=", "True", ",", "\n", ")", "\n", "", "", "self", ".", "summarize", "=", "summarize", "\n", "self", ".", "use_native", "=", "use_native", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.BiLSTM.forward_unbatched_3d": [[188, 214], ["zip", "outputs.append", "torch.cat", "lstm.BiLSTM.dropout", "lstm.BiLSTM.lstm", "lstm.BiLSTM.lstm", "torch.cat().unsqueeze", "new_boundaries.append", "new_boundaries.append", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "forward_unbatched_3d", "(", "self", ",", "input_", ")", ":", "\n", "# all_embs shape: sum of desc lengths x batch (=1) x input_size", "\n", "        ", "all_embs", ",", "boundaries", "=", "input_", "\n", "\n", "new_boundaries", "=", "[", "0", "]", "\n", "outputs", "=", "[", "]", "\n", "for", "left", ",", "right", "in", "zip", "(", "boundaries", ",", "boundaries", "[", "1", ":", "]", ")", ":", "\n", "# state shape:", "\n", "# - h: num_layers (=1) * num_directions (=2) x batch (=1) x recurrent_size / 2", "\n", "# - c: num_layers (=1) * num_directions (=2) x batch (=1) x recurrent_size / 2", "\n", "# output shape: seq len x batch size x output_size", "\n", "            ", "if", "self", ".", "use_native", ":", "\n", "                ", "inp", "=", "self", ".", "dropout", "(", "all_embs", "[", "left", ":", "right", "]", ")", "\n", "output", ",", "(", "h", ",", "c", ")", "=", "self", ".", "lstm", "(", "inp", ")", "\n", "", "else", ":", "\n", "                ", "output", ",", "(", "h", ",", "c", ")", "=", "self", ".", "lstm", "(", "all_embs", "[", "left", ":", "right", "]", ")", "\n", "\n", "", "if", "self", ".", "summarize", ":", "\n", "                ", "seq_emb", "=", "torch", ".", "cat", "(", "(", "h", "[", "0", "]", ",", "h", "[", "1", "]", ")", ",", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "new_boundaries", ".", "append", "(", "new_boundaries", "[", "-", "1", "]", "+", "1", ")", "\n", "", "else", ":", "\n", "                ", "seq_emb", "=", "output", "\n", "new_boundaries", ".", "append", "(", "new_boundaries", "[", "-", "1", "]", "+", "output", ".", "shape", "[", "0", "]", ")", "\n", "", "outputs", ".", "append", "(", "seq_emb", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "outputs", ",", "dim", "=", "0", ")", ",", "new_boundaries", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.BiLSTM.forward_batched_3d": [[215, 290], ["enumerate", "tensor2struct.utils.batched_sequence.PackedSequencePlus.from_gather", "tuple", "lstm.BiLSTM.lstm", "enumerate", "zip", "all_embs.raw_index", "rearranged_all_embs.apply.apply.apply", "torch.cat", "tensor2struct.utils.batched_sequence.PackedSequencePlus.from_gather", "all_embs.apply", "zip", "desc_lengths.append", "len", "list", "torch.LongTensor", "sorted", "range", "enumerate", "len", "operator.itemgetter", "len", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.from_gather", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.raw_index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.apply", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.from_gather", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.apply", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "forward_batched_3d", "(", "self", ",", "input_", ")", ":", "\n", "# all_embs shape: PackedSequencePlus with shape [batch, sum of desc lengths, input_size]", "\n", "# boundaries: list of lists with shape [batch, num descs + 1]", "\n", "        ", "all_embs", ",", "boundaries", "=", "input_", "\n", "\n", "# List of the following:", "\n", "# (batch_idx, desc_idx, length)", "\n", "desc_lengths", "=", "[", "]", "\n", "batch_desc_to_flat_map", "=", "{", "}", "\n", "for", "batch_idx", ",", "boundaries_for_item", "in", "enumerate", "(", "boundaries", ")", ":", "\n", "            ", "for", "desc_idx", ",", "(", "left", ",", "right", ")", "in", "enumerate", "(", "\n", "zip", "(", "boundaries_for_item", ",", "boundaries_for_item", "[", "1", ":", "]", ")", "\n", ")", ":", "\n", "                ", "desc_lengths", ".", "append", "(", "(", "batch_idx", ",", "desc_idx", ",", "right", "-", "left", ")", ")", "\n", "batch_desc_to_flat_map", "[", "batch_idx", ",", "desc_idx", "]", "=", "len", "(", "\n", "batch_desc_to_flat_map", "\n", ")", "\n", "\n", "# Recreate PackedSequencePlus into shape", "\n", "# [batch * num descs, desc length, input_size]", "\n", "# with name `rearranged_all_embs`", "\n", "", "", "remapped_ps_indices", "=", "[", "]", "\n", "\n", "def", "rearranged_all_embs_map_index", "(", "desc_lengths_idx", ",", "seq_idx", ")", ":", "\n", "            ", "batch_idx", ",", "desc_idx", ",", "_", "=", "desc_lengths", "[", "desc_lengths_idx", "]", "\n", "return", "batch_idx", ",", "boundaries", "[", "batch_idx", "]", "[", "desc_idx", "]", "+", "seq_idx", "\n", "\n", "", "def", "rearranged_all_embs_gather_from_indices", "(", "indices", ")", ":", "\n", "            ", "batch_indices", ",", "seq_indices", "=", "zip", "(", "*", "indices", ")", "\n", "remapped_ps_indices", "[", ":", "]", "=", "all_embs", ".", "raw_index", "(", "batch_indices", ",", "seq_indices", ")", "\n", "return", "all_embs", ".", "ps", ".", "data", "[", "torch", ".", "LongTensor", "(", "remapped_ps_indices", ")", "]", "\n", "\n", "", "rearranged_all_embs", "=", "batched_sequence", ".", "PackedSequencePlus", ".", "from_gather", "(", "\n", "lengths", "=", "[", "length", "for", "_", ",", "_", ",", "length", "in", "desc_lengths", "]", ",", "\n", "map_index", "=", "rearranged_all_embs_map_index", ",", "\n", "gather_from_indices", "=", "rearranged_all_embs_gather_from_indices", ",", "\n", ")", "\n", "rev_remapped_ps_indices", "=", "tuple", "(", "\n", "x", "[", "0", "]", "\n", "for", "x", "in", "sorted", "(", "enumerate", "(", "remapped_ps_indices", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")", "\n", ")", "\n", "\n", "# output shape: PackedSequence, [batch * num_descs, desc length, output_size]", "\n", "# state shape:", "\n", "# - h: [num_layers (=1) * num_directions (=2), batch, output_size / 2]", "\n", "# - c: [num_layers (=1) * num_directions (=2), batch, output_size / 2]", "\n", "if", "self", ".", "use_native", ":", "\n", "            ", "rearranged_all_embs", "=", "rearranged_all_embs", ".", "apply", "(", "self", ".", "dropout", ")", "\n", "", "output", ",", "(", "h", ",", "c", ")", "=", "self", ".", "lstm", "(", "rearranged_all_embs", ".", "ps", ")", "\n", "if", "self", ".", "summarize", ":", "\n", "# h shape: [batch * num descs, output_size]", "\n", "            ", "h", "=", "torch", ".", "cat", "(", "(", "h", "[", "0", "]", ",", "h", "[", "1", "]", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# new_all_embs: PackedSequencePlus, [batch, num descs, input_size]", "\n", "new_all_embs", "=", "batched_sequence", ".", "PackedSequencePlus", ".", "from_gather", "(", "\n", "lengths", "=", "[", "\n", "len", "(", "boundaries_for_item", ")", "-", "1", "for", "boundaries_for_item", "in", "boundaries", "\n", "]", ",", "\n", "map_index", "=", "lambda", "batch_idx", ",", "desc_idx", ":", "rearranged_all_embs", ".", "sort_to_orig", "[", "\n", "batch_desc_to_flat_map", "[", "batch_idx", ",", "desc_idx", "]", "\n", "]", ",", "\n", "gather_from_indices", "=", "lambda", "indices", ":", "h", "[", "torch", ".", "LongTensor", "(", "indices", ")", "]", ",", "\n", ")", "\n", "\n", "new_boundaries", "=", "[", "\n", "list", "(", "range", "(", "len", "(", "boundaries_for_item", ")", ")", ")", "\n", "for", "boundaries_for_item", "in", "boundaries", "\n", "]", "\n", "", "else", ":", "\n", "            ", "new_all_embs", "=", "all_embs", ".", "apply", "(", "\n", "lambda", "_", ":", "output", ".", "data", "[", "torch", ".", "LongTensor", "(", "rev_remapped_ps_indices", ")", "]", "\n", ")", "\n", "new_boundaries", "=", "boundaries", "\n", "\n", "", "return", "new_all_embs", ",", "new_boundaries", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.BiLSTM.forward_batched_2d": [[291, 298], ["lstm.BiLSTM.lstm", "all_embs.apply.apply.with_new_ps", "all_embs.apply.apply.apply"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.with_new_ps", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.apply"], ["", "def", "forward_batched_2d", "(", "self", ",", "all_embs", ")", ":", "\n", "        ", "if", "self", ".", "use_native", ":", "\n", "            ", "all_embs", "=", "all_embs", ".", "apply", "(", "self", ".", "dropout", ")", "\n", "", "output", ",", "(", "h", ",", "c", ")", "=", "self", ".", "lstm", "(", "all_embs", ".", "ps", ")", "\n", "assert", "not", "self", ".", "summarize", "# return the full output", "\n", "new_all_embs", "=", "all_embs", ".", "with_new_ps", "(", "output", ")", "\n", "return", "new_all_embs", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.BiLSTM.forward": [[299, 308], ["isinstance", "isinstance", "lstm.BiLSTM.forward_batched_3d", "lstm.BiLSTM.forward_batched_2d"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.LookupEmbeddings.forward_batched_3d", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.LookupEmbeddings.forward_batched_2d"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "\"\"\"\n        3d input is a tuple (data, boundaries)\n        2d input does not need bondaries\n        \"\"\"", "\n", "if", "isinstance", "(", "input_", ",", "list", ")", "or", "isinstance", "(", "input_", ",", "tuple", ")", ":", "\n", "            ", "return", "self", ".", "forward_batched_3d", "(", "input_", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "forward_batched_2d", "(", "input_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.VarLSTMCell.__init__": [[316, 354], ["super().__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.empty", "torch.empty", "lstm.VarLSTMCell.reset_parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.RecurrentDropoutLSTMCell.reset_parameters"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "dropout", "=", "0.0", ",", "layernorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "VarLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "W_i", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "hidden_size", ",", "input_size", ")", ")", "\n", "self", ".", "U_i", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "hidden_size", ",", "hidden_size", ")", ")", "\n", "\n", "self", ".", "W_f", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "hidden_size", ",", "input_size", ")", ")", "\n", "self", ".", "U_f", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "hidden_size", ",", "hidden_size", ")", ")", "\n", "\n", "self", ".", "W_c", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "hidden_size", ",", "input_size", ")", ")", "\n", "self", ".", "U_c", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "hidden_size", ",", "hidden_size", ")", ")", "\n", "\n", "self", ".", "W_o", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "hidden_size", ",", "input_size", ")", ")", "\n", "self", ".", "U_o", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "hidden_size", ",", "hidden_size", ")", ")", "\n", "\n", "self", ".", "bias_ih", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "4", "*", "hidden_size", ")", ")", "\n", "self", ".", "bias_hh", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "4", "*", "hidden_size", ")", ")", "\n", "\n", "self", ".", "layernorm", "=", "layernorm", "\n", "if", "self", ".", "layernorm", ":", "\n", "            ", "self", ".", "ln_xi2h", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "hidden_size", ")", "\n", "self", ".", "ln_xf2h", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "hidden_size", ")", "\n", "self", ".", "ln_xc2h", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "hidden_size", ")", "\n", "self", ".", "ln_xo2h", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "hidden_size", ")", "\n", "\n", "self", ".", "ln_hi2h", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "hidden_size", ")", "\n", "self", ".", "ln_hf2h", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "hidden_size", ")", "\n", "self", ".", "ln_hc2h", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "hidden_size", ")", "\n", "self", ".", "ln_ho2h", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "hidden_size", ")", "\n", "\n", "self", ".", "ln_cell", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "hidden_size", ")", "\n", "\n", "", "self", ".", "_input_dropout_mask", "=", "torch", ".", "empty", "(", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "_h_dropout_mask", "=", "torch", ".", "empty", "(", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.VarLSTMCell.reset_parameters": [[355, 368], ["torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "lstm.VarLSTMCell.bias_ih.data.fill_", "lstm.VarLSTMCell.bias_ih.data[].fill_", "lstm.VarLSTMCell.bias_hh.data.fill_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "W_i", ")", "\n", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "U_i", ")", "\n", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "W_f", ")", "\n", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "U_f", ")", "\n", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "W_c", ")", "\n", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "U_c", ")", "\n", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "W_o", ")", "\n", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "U_o", ")", "\n", "self", ".", "bias_ih", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "# forget gate set to 1.", "\n", "self", ".", "bias_ih", ".", "data", "[", "self", ".", "hidden_size", ":", "2", "*", "self", ".", "hidden_size", "]", ".", "fill_", "(", "1.0", ")", "\n", "self", ".", "bias_hh", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.VarLSTMCell.set_dropout_masks": [[369, 395], ["torch.tensor().reshape().expand().to", "lstm.VarLSTMCell.set_dropout_masks.constant_mask"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["", "def", "set_dropout_masks", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "def", "constant_mask", "(", "v", ")", ":", "\n", "            ", "return", "(", "\n", "torch", ".", "tensor", "(", "v", ")", "\n", ".", "reshape", "(", "1", ",", "1", ",", "1", ")", "\n", ".", "expand", "(", "4", ",", "batch_size", ",", "-", "1", ")", "\n", ".", "to", "(", "self", ".", "W_i", ".", "device", ")", "\n", ")", "\n", "\n", "", "if", "self", ".", "dropout", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "new_tensor", "=", "self", ".", "W_i", ".", "data", ".", "new", "\n", "self", ".", "_input_dropout_mask", "=", "torch", ".", "bernoulli", "(", "\n", "new_tensor", "(", "4", ",", "batch_size", ",", "self", ".", "input_size", ")", ".", "fill_", "(", "1", "-", "self", ".", "dropout", ")", "\n", ")", "\n", "self", ".", "_h_dropout_mask", "=", "torch", ".", "bernoulli", "(", "\n", "new_tensor", "(", "4", ",", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "fill_", "(", "1", "-", "self", ".", "dropout", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "mask", "=", "constant_mask", "(", "1", "-", "self", ".", "dropout", ")", "\n", "self", ".", "_input_dropout_mask", "=", "mask", "\n", "self", ".", "_h_dropout_mask", "=", "mask", "\n", "", "", "else", ":", "\n", "            ", "mask", "=", "constant_mask", "(", "1.0", ")", "\n", "self", ".", "_input_dropout_mask", "=", "mask", "\n", "self", ".", "_h_dropout_mask", "=", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.VarLSTMCell.forward": [[396, 467], ["torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "lstm.VarLSTMCell.ln_xi2h", "lstm.VarLSTMCell.ln_xf2h", "lstm.VarLSTMCell.ln_xc2h", "lstm.VarLSTMCell.ln_xo2h", "lstm.VarLSTMCell.ln_hi2h", "lstm.VarLSTMCell.ln_hf2h", "lstm.VarLSTMCell.ln_hc2h", "lstm.VarLSTMCell.ln_ho2h", "torch.tanh", "torch.tanh", "torch.tanh", "lstm.VarLSTMCell.ln_cell"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.linear", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.linear", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.linear", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.linear", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.linear", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.linear", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.linear", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.linear", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.sigmoid", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.sigmoid", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.sigmoid", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "hidden_state", ")", ":", "\n", "        ", "h_tm1", ",", "c_tm1", "=", "hidden_state", "\n", "\n", "xi_t", "=", "torch", ".", "nn", ".", "functional", ".", "linear", "(", "\n", "input", "*", "self", ".", "_input_dropout_mask", "[", "0", ",", ":", "input", ".", "shape", "[", "0", "]", "]", ",", "self", ".", "W_i", "\n", ")", "\n", "xf_t", "=", "torch", ".", "nn", ".", "functional", ".", "linear", "(", "\n", "input", "*", "self", ".", "_input_dropout_mask", "[", "1", ",", ":", "input", ".", "shape", "[", "0", "]", "]", ",", "self", ".", "W_f", "\n", ")", "\n", "xc_t", "=", "torch", ".", "nn", ".", "functional", ".", "linear", "(", "\n", "input", "*", "self", ".", "_input_dropout_mask", "[", "2", ",", ":", "input", ".", "shape", "[", "0", "]", "]", ",", "self", ".", "W_c", "\n", ")", "\n", "xo_t", "=", "torch", ".", "nn", ".", "functional", ".", "linear", "(", "\n", "input", "*", "self", ".", "_input_dropout_mask", "[", "3", ",", ":", "input", ".", "shape", "[", "0", "]", "]", ",", "self", ".", "W_o", "\n", ")", "\n", "\n", "hi_t", "=", "torch", ".", "nn", ".", "functional", ".", "linear", "(", "\n", "h_tm1", "*", "self", ".", "_h_dropout_mask", "[", "0", ",", ":", "input", ".", "shape", "[", "0", "]", "]", ",", "self", ".", "U_i", "\n", ")", "\n", "hf_t", "=", "torch", ".", "nn", ".", "functional", ".", "linear", "(", "\n", "h_tm1", "*", "self", ".", "_h_dropout_mask", "[", "1", ",", ":", "input", ".", "shape", "[", "0", "]", "]", ",", "self", ".", "U_f", "\n", ")", "\n", "hc_t", "=", "torch", ".", "nn", ".", "functional", ".", "linear", "(", "\n", "h_tm1", "*", "self", ".", "_h_dropout_mask", "[", "2", ",", ":", "input", ".", "shape", "[", "0", "]", "]", ",", "self", ".", "U_c", "\n", ")", "\n", "ho_t", "=", "torch", ".", "nn", ".", "functional", ".", "linear", "(", "\n", "h_tm1", "*", "self", ".", "_h_dropout_mask", "[", "3", ",", ":", "input", ".", "shape", "[", "0", "]", "]", ",", "self", ".", "U_o", "\n", ")", "\n", "\n", "if", "self", ".", "layernorm", ":", "\n", "            ", "xi_t", "=", "self", ".", "ln_xi2h", "(", "xi_t", ")", "\n", "xf_t", "=", "self", ".", "ln_xf2h", "(", "xf_t", ")", "\n", "xc_t", "=", "self", ".", "ln_xc2h", "(", "xc_t", ")", "\n", "xo_t", "=", "self", ".", "ln_xo2h", "(", "xo_t", ")", "\n", "\n", "hi_t", "=", "self", ".", "ln_hi2h", "(", "hi_t", ")", "\n", "hf_t", "=", "self", ".", "ln_hf2h", "(", "hf_t", ")", "\n", "hc_t", "=", "self", ".", "ln_hc2h", "(", "hc_t", ")", "\n", "ho_t", "=", "self", ".", "ln_ho2h", "(", "ho_t", ")", "\n", "\n", "", "i_t", "=", "torch", ".", "sigmoid", "(", "\n", "xi_t", "\n", "+", "self", ".", "bias_ih", "[", ":", "self", ".", "hidden_size", "]", "\n", "+", "hi_t", "\n", "+", "self", ".", "bias_hh", "[", ":", "self", ".", "hidden_size", "]", "\n", ")", "\n", "f_t", "=", "torch", ".", "sigmoid", "(", "\n", "xf_t", "\n", "+", "self", ".", "bias_ih", "[", "self", ".", "hidden_size", ":", "2", "*", "self", ".", "hidden_size", "]", "\n", "+", "hf_t", "\n", "+", "self", ".", "bias_hh", "[", "self", ".", "hidden_size", ":", "2", "*", "self", ".", "hidden_size", "]", "\n", ")", "\n", "c_t", "=", "f_t", "*", "c_tm1", "+", "i_t", "*", "torch", ".", "tanh", "(", "\n", "xc_t", "\n", "+", "self", ".", "bias_ih", "[", "2", "*", "self", ".", "hidden_size", ":", "3", "*", "self", ".", "hidden_size", "]", "\n", "+", "hc_t", "\n", "+", "self", ".", "bias_hh", "[", "2", "*", "self", ".", "hidden_size", ":", "3", "*", "self", ".", "hidden_size", "]", "\n", ")", "\n", "o_t", "=", "torch", ".", "sigmoid", "(", "\n", "xo_t", "\n", "+", "self", ".", "bias_ih", "[", "3", "*", "self", ".", "hidden_size", ":", "4", "*", "self", ".", "hidden_size", "]", "\n", "+", "ho_t", "\n", "+", "self", ".", "bias_hh", "[", "3", "*", "self", ".", "hidden_size", ":", "4", "*", "self", ".", "hidden_size", "]", "\n", ")", "\n", "\n", "if", "self", ".", "layernorm", ":", "\n", "            ", "h_t", "=", "o_t", "*", "torch", ".", "tanh", "(", "self", ".", "ln_cell", "(", "c_t", ")", ")", "\n", "", "else", ":", "\n", "            ", "h_t", "=", "o_t", "*", "torch", ".", "tanh", "(", "c_t", ")", "\n", "\n", "", "return", "h_t", ",", "c_t", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.UniLSTM.__init__": [[475, 498], ["super().__init__", "cell_factory", "lstm.UniLSTM.lstm_cells.append", "lstm.UniLSTM.add_module"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["def", "__init__", "(", "\n", "self", ",", "\n", "input_size", ",", "\n", "hidden_size", ",", "\n", "dropout", "=", "0.0", ",", "\n", "layernorm", "=", "False", ",", "\n", "cell_factory", "=", "VarLSTMCell", ",", "\n", ")", ":", "\n", "        ", "super", "(", "UniLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "cell_factory", "=", "cell_factory", "\n", "self", ".", "lstm_cells", "=", "[", "]", "\n", "\n", "cell", "=", "cell_factory", "(", "\n", "input_size", ",", "hidden_size", ",", "dropout", "=", "dropout", ",", "layernorm", "=", "layernorm", "\n", ")", "\n", "self", ".", "lstm_cells", ".", "append", "(", "cell", ")", "\n", "\n", "suffix", "=", "\"\"", "\n", "cell_name", "=", "\"cell{}\"", ".", "format", "(", "suffix", ")", "\n", "self", ".", "add_module", "(", "cell_name", ",", "cell", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.UniLSTM.forward": [[499, 522], ["isinstance", "tuple", "lstm.UniLSTM._forward_packed", "torch.nn.utils.rnn.PackedSequence", "input.with_new_ps", "cell.set_dropout_masks", "input.ps.data.new_zeros"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.UniLSTM._forward_packed", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.with_new_ps", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.RecurrentDropoutLSTMCell.set_dropout_masks"], ["", "def", "forward", "(", "self", ",", "input", ",", "hidden_state", "=", "None", ")", ":", "\n", "        ", "is_packed", "=", "isinstance", "(", "input", ",", "batched_sequence", ".", "PackedSequencePlus", ")", "\n", "if", "not", "is_packed", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "max_batch_size", "=", "input", ".", "ps", ".", "batch_sizes", "[", "0", "]", "\n", "for", "cell", "in", "self", ".", "lstm_cells", ":", "\n", "            ", "cell", ".", "set_dropout_masks", "(", "max_batch_size", ")", "\n", "\n", "", "if", "hidden_state", "is", "None", ":", "\n", "            ", "num_directions", "=", "1", "\n", "hx", "=", "input", ".", "ps", ".", "data", ".", "new_zeros", "(", "\n", "num_directions", ",", "max_batch_size", ",", "self", ".", "hidden_size", ",", "requires_grad", "=", "False", "\n", ")", "\n", "hidden_state", "=", "(", "hx", ",", "hx", ")", "\n", "\n", "", "forward_hidden_state", "=", "tuple", "(", "v", "[", "0", "]", "for", "v", "in", "hidden_state", ")", "\n", "output", ",", "next_hidden", "=", "self", ".", "_forward_packed", "(", "\n", "input", ".", "ps", ".", "data", ",", "input", ".", "ps", ".", "batch_sizes", ",", "forward_hidden_state", "\n", ")", "\n", "\n", "output_ps", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "PackedSequence", "(", "output", ",", "input", ".", "ps", ".", "batch_sizes", ",", ")", "\n", "return", "input", ".", "with_new_ps", "(", "output_ps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.UniLSTM._forward_packed": [[523, 569], ["torch.zeros", "range", "hs.append", "cs.append", "hs.reverse", "cs.reverse", "torch.cat", "torch.cat", "input.narrow", "lstm.UniLSTM.cell", "step_outputs.append", "torch.cat", "hs.append", "cs.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.reverse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.reverse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "_forward_packed", "(", "\n", "self", ",", "\n", "input", ":", "torch", ".", "Tensor", ",", "\n", "batch_sizes", ":", "torch", ".", "Tensor", ",", "\n", "hidden_state", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ",", "\n", ")", ":", "\n", "# Derived from", "\n", "# https://github.com/pytorch/pytorch/blob/6a4ca9abec1c18184635881c08628737c8ed2497/aten/src/ATen/native/RNN.cpp#L589", "\n", "\n", "        ", "step_outputs", "=", "[", "]", "\n", "hs", "=", "[", "]", "\n", "cs", "=", "[", "]", "\n", "input_offset", "=", "torch", ".", "zeros", "(", "(", ")", ",", "dtype", "=", "torch", ".", "int64", ")", "# scalar zero", "\n", "num_steps", "=", "batch_sizes", ".", "shape", "[", "0", "]", "\n", "last_batch_size", "=", "batch_sizes", "[", "0", "]", "\n", "\n", "# Batch sizes is a sequence of decreasing lengths, which are offsets", "\n", "# into a 1D list of inputs. At every step we slice out batch_size elements,", "\n", "# and possibly account for the decrease in the batch size since the last step,", "\n", "# which requires us to slice the hidden state (since some sequences", "\n", "# are completed now). The sliced parts are also saved, because we will need", "\n", "# to return a tensor of final hidden state.", "\n", "h", ",", "c", "=", "hidden_state", "\n", "for", "i", "in", "range", "(", "num_steps", ")", ":", "\n", "            ", "batch_size", "=", "batch_sizes", "[", "i", "]", "\n", "step_input", "=", "input", ".", "narrow", "(", "0", ",", "input_offset", ",", "batch_size", ")", "\n", "input_offset", "+=", "batch_size", "\n", "dec", "=", "last_batch_size", "-", "batch_size", "\n", "if", "dec", ">", "0", ":", "\n", "                ", "hs", ".", "append", "(", "h", "[", "last_batch_size", "-", "dec", ":", "last_batch_size", "]", ")", "\n", "cs", ".", "append", "(", "c", "[", "last_batch_size", "-", "dec", ":", "last_batch_size", "]", ")", "\n", "h", "=", "h", "[", ":", "last_batch_size", "-", "dec", "]", "\n", "c", "=", "c", "[", ":", "last_batch_size", "-", "dec", "]", "\n", "", "last_batch_size", "=", "batch_size", "\n", "h", ",", "c", "=", "self", ".", "cell", "(", "step_input", ",", "(", "h", ",", "c", ")", ")", "\n", "step_outputs", ".", "append", "(", "h", ")", "\n", "\n", "", "hs", ".", "append", "(", "h", ")", "\n", "cs", ".", "append", "(", "c", ")", "\n", "hs", ".", "reverse", "(", ")", "\n", "cs", ".", "reverse", "(", ")", "\n", "\n", "concat_h", "=", "torch", ".", "cat", "(", "hs", ")", "\n", "concat_c", "=", "torch", ".", "cat", "(", "cs", ")", "\n", "\n", "return", "(", "torch", ".", "cat", "(", "step_outputs", ",", "dim", "=", "0", ")", ",", "(", "concat_h", ",", "concat_c", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.UniLSTM._set_dropout_masks": [[570, 575], ["lstm.UniLSTM.lstm_cells[].set_dropout_masks"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.RecurrentDropoutLSTMCell.set_dropout_masks"], ["", "def", "_set_dropout_masks", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"\n        For decoding where we need to manually set dropout masks\n        \"\"\"", "\n", "self", ".", "lstm_cells", "[", "0", "]", ".", "set_dropout_masks", "(", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.UniLSTM._step": [[576, 585], ["rnn_cell", "len"], "methods", ["None"], ["", "def", "_step", "(", "self", ",", "input", ",", "rnn_state", ")", ":", "\n", "        ", "\"\"\"\n        Used in decoding at test time, make sure set_dropout_mask \n        is used during decoding\n        \"\"\"", "\n", "assert", "len", "(", "self", ".", "lstm_cells", ")", "==", "1", "\n", "rnn_cell", "=", "self", ".", "lstm_cells", "[", "0", "]", "\n", "new_rnn_state", "=", "rnn_cell", "(", "input", ",", "rnn_state", ")", "\n", "return", "new_rnn_state", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.extract_last_hidden_state": [[11, 25], ["hidden_state.size", "torch.cat"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size"], ["def", "extract_last_hidden_state", "(", "hidden_state", ")", ":", "\n", "    ", "\"\"\"\n    Extract last hidden state from output of lstm\n    Args:\n        hidden_state: length * hidden_size, the current version is\n        not batched yet\n    \"\"\"", "\n", "seq_len", ",", "hidden_size", "=", "hidden_state", ".", "size", "(", ")", "\n", "assert", "hidden_size", "%", "2", "==", "0", "\n", "split_point", "=", "hidden_size", "//", "2", "\n", "last_hidden_state", "=", "torch", ".", "cat", "(", "\n", "[", "hidden_state", "[", "-", "1", ",", ":", "split_point", "]", ",", "hidden_state", "[", "0", ",", "split_point", ":", "]", "]", ",", "dim", "=", "0", "\n", ")", "\n", "return", "last_hidden_state", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.extract_last_hidden_state_batched": [[27, 57], ["hidden_state.size", "torch.stack", "len", "torch.zeros", "torch.cat().to", "torch.gather().squeeze", "torch.gather().squeeze", "torch.cat", "torch.gather", "torch.gather"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["", "def", "extract_last_hidden_state_batched", "(", "hidden_state", ",", "lengths", ",", "bidirectional", ")", ":", "\n", "    ", "\"\"\"\n    Use torch.gather for efficient retrieving last hidden states\n    Args:\n        hidden_state: batch_size * length * hidden_size\n    \"\"\"", "\n", "bs", ",", "seq_len", ",", "hidden_size", "=", "hidden_state", ".", "size", "(", ")", "\n", "assert", "bs", "==", "len", "(", "lengths", ")", "\n", "assert", "hidden_size", "%", "2", "==", "0", "\n", "split_point", "=", "hidden_size", "//", "2", "\n", "\n", "length_v", "=", "torch", ".", "stack", "(", "lengths", ",", "dim", "=", "0", ")", "\n", "if", "bidirectional", ":", "\n", "        ", "last_idx", "=", "(", "length_v", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "bs", ",", "1", ",", "split_point", ")", "\n", "first_idx", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "1", ",", "split_point", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "batched_idx", "=", "torch", ".", "cat", "(", "[", "last_idx", ",", "first_idx", "]", ",", "dim", "=", "-", "1", ")", ".", "to", "(", "hidden_state", ".", "device", ")", "\n", "last_hidden_state", "=", "torch", ".", "gather", "(", "\n", "hidden_state", ",", "dim", "=", "1", ",", "index", "=", "batched_idx", "\n", ")", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "        ", "last_idx", "=", "(", "\n", "(", "length_v", "-", "1", ")", "\n", ".", "unsqueeze", "(", "-", "1", ")", "\n", ".", "unsqueeze", "(", "-", "1", ")", "\n", ".", "expand", "(", "bs", ",", "1", ",", "hidden_size", ")", "\n", ".", "to", "(", "hidden_state", ".", "device", ")", "\n", ")", "\n", "last_hidden_state", "=", "torch", ".", "gather", "(", "hidden_state", ",", "dim", "=", "1", ",", "index", "=", "last_idx", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "return", "last_hidden_state", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.extract_lstm_minus_feature": [[59, 78], ["hidden_state.size", "torch.cat"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size"], ["", "def", "extract_lstm_minus_feature", "(", "hidden_state", ",", "i", ",", "j", ")", ":", "\n", "    ", "\"\"\"\n    Extract span representation using lstm-minus feature,\n    \n    Args:\n        hidden_state: Length * Batch * Hidden_size\n        i, j: start and end pos, note that i, j is the \n        real index of words, discarding bos and eos:\n        ... i, [i+1, ... , j+1], j+2, ...\n    \"\"\"", "\n", "seq_len", ",", "bs", ",", "hidden_size", "=", "hidden_state", ".", "size", "(", ")", "\n", "assert", "hidden_size", "%", "2", "==", "0", "\n", "split_point", "=", "hidden_size", "//", "2", "\n", "hidden_f", "=", "hidden_state", "[", "j", "+", "1", ",", ":", ",", ":", "split_point", "]", "-", "hidden_state", "[", "i", ",", ":", ",", ":", "split_point", "]", "\n", "hidden_b", "=", "(", "\n", "hidden_state", "[", "i", "+", "1", ",", ":", ",", "split_point", ":", "]", "-", "hidden_state", "[", "j", "+", "2", ",", ":", ",", "split_point", ":", "]", "\n", ")", "\n", "span_v", "=", "torch", ".", "cat", "(", "[", "hidden_f", ",", "hidden_b", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "span_v", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.extract_all_span_features": [[80, 97], ["hidden_state.size", "range", "range", "torch.stack", "ret.append", "lstm.extract_lstm_minus_feature", "temp_list.append"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.lstm.extract_lstm_minus_feature", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "extract_all_span_features", "(", "hidden_state", ")", ":", "\n", "    ", "\"\"\"\n    Return: ret[i] of size  n * bs * hidden_size, where n = seq_len - i\n    \"\"\"", "\n", "_seq_len", ",", "bs", ",", "hidden_size", "=", "hidden_state", ".", "size", "(", ")", "\n", "assert", "hidden_size", "%", "2", "==", "0", "# bilstm by default", "\n", "seq_len", "=", "_seq_len", "-", "2", "# discard bos and eos", "\n", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "seq_len", ")", ":", "\n", "        ", "temp_list", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ",", "seq_len", ")", ":", "\n", "            ", "span_v", "=", "extract_lstm_minus_feature", "(", "hidden_state", ",", "i", ",", "j", ")", "\n", "temp_list", ".", "append", "(", "span_v", ")", "\n", "", "temp_v", "=", "torch", ".", "stack", "(", "temp_list", ",", "dim", "=", "0", ")", "\n", "ret", ".", "append", "(", "temp_v", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.seq2seq.RnnStatelet.__init__": [[52, 67], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "hidden_state", ":", "torch", ".", "Tensor", ",", "\n", "memory_cell", ":", "torch", ".", "Tensor", ",", "\n", "previous_action_embedding", ":", "torch", ".", "Tensor", ",", "\n", "attended_input", ":", "torch", ".", "Tensor", ",", "\n", "encoder_outputs", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "encoder_output_mask", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", ")", "->", "None", ":", "\n", "        ", "self", ".", "hidden_state", "=", "hidden_state", "\n", "self", ".", "memory_cell", "=", "memory_cell", "\n", "self", ".", "previous_action_embedding", "=", "previous_action_embedding", "\n", "self", ".", "attended_input", "=", "attended_input", "\n", "self", ".", "encoder_outputs", "=", "encoder_outputs", "\n", "self", ".", "encoder_output_mask", "=", "encoder_output_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.seq2seq.RnnStatelet.__eq__": [[68, 70], ["None"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.seq2seq.Seq2Seq.__init__": [[77, 111], ["torch.Module.__init__", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "len", "seq2seq.Seq2Seq.score_action_mlp_2", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "seq2seq.Seq2Seq.score_action_mlp_1"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh"], ["def", "__init__", "(", "\n", "self", ",", "\n", "encode_hidden_size", ":", "int", ",", "\n", "sketch_embed", ":", "nn", ".", "Embedding", ",", "\n", "sketch_prod2id", ":", "Dict", ",", "\n", "sketch_decoder_rnn_size", ":", "int", ",", "\n", "device", ":", "torch", ".", "device", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Seq2Seq", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "encode_hidden_size", "==", "sketch_decoder_rnn_size", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "encode_hidden_size", "=", "encode_hidden_size", "\n", "self", ".", "sketch_embed", "=", "sketch_embed", "\n", "self", ".", "sketch_prod_embed_size", "=", "sketch_embed", ".", "embedding_dim", "\n", "self", ".", "sketch_prod2id", "=", "sketch_prod2id", "\n", "self", ".", "sketch_decoder_rnn_size", "=", "sketch_decoder_rnn_size", "\n", "\n", "# decode", "\n", "# self.first_action_embed = nn.Parameter(nn.init.normal_(torch.empty(self.sketch_prod_embed_size)).to(device))", "\n", "self", ".", "decoder_lstm", "=", "nn", ".", "LSTMCell", "(", "\n", "self", ".", "sketch_prod_embed_size", ",", "sketch_decoder_rnn_size", "\n", ")", "\n", "self", ".", "_max_decoding_steps", "=", "20", "\n", "\n", "# score", "\n", "self", ".", "score_action_mlp_1", "=", "nn", ".", "Linear", "(", "\n", "sketch_decoder_rnn_size", "*", "2", ",", "sketch_decoder_rnn_size", "\n", ")", "\n", "self", ".", "score_action_mlp_2", "=", "nn", ".", "Linear", "(", "\n", "sketch_decoder_rnn_size", ",", "len", "(", "sketch_prod2id", ")", "\n", ")", "\n", "self", ".", "score_action", "=", "lambda", "x", ":", "self", ".", "score_action_mlp_2", "(", "\n", "torch", ".", "tanh", "(", "self", ".", "score_action_mlp_1", "(", "x", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.seq2seq.Seq2Seq._get_right_side_parts": [[113, 121], ["action.split", "right_side[].split"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_right_side_parts", "(", "action", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "_", ",", "right_side", "=", "action", ".", "split", "(", "\" -> \"", ")", "\n", "if", "\"[\"", "==", "right_side", "[", "0", "]", ":", "\n", "            ", "right_side_parts", "=", "right_side", "[", "1", ":", "-", "1", "]", ".", "split", "(", "\", \"", ")", "\n", "", "else", ":", "\n", "            ", "right_side_parts", "=", "[", "right_side", "]", "\n", "", "return", "right_side_parts", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.seq2seq.Seq2Seq._get_initial_state": [[122, 133], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "seq2seq.RnnStatelet", "token_rep.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["", "def", "_get_initial_state", "(", "self", ",", "token_rep", ":", "torch", ".", "Tensor", ")", "->", "RnnStatelet", ":", "\n", "        ", "\"\"\"\n        The hidden state of the first hidden state is initialized by token_rep\n        It consume the encoder output as the first action\n        \"\"\"", "\n", "hidden_state", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "sketch_decoder_rnn_size", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "memory_cell", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "sketch_decoder_rnn_size", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "initial_rnn_state", "=", "RnnStatelet", "(", "\n", "hidden_state", ",", "memory_cell", ",", "token_rep", ".", "unsqueeze", "(", "0", ")", ",", "None", ",", "None", ",", "None", "\n", ")", "\n", "return", "initial_rnn_state", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.seq2seq.Seq2Seq.forward": [[134, 180], ["world._get_sketch_productions", "seq2seq.Seq2Seq._get_initial_state", "enumerate", "sum", "world.get_nonterminal_productions", "prod.split", "seq2seq.Seq2Seq.decoder_lstm", "next_hidden.transpose", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.softmax", "torch.softmax", "torch.softmax", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "seq2seq.Seq2Seq.score_action().squeeze", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "candidate_ids.index", "seq_likeli.append", "seq2seq.Seq2Seq.sketch_embed.weight[].unsqueeze", "seq2seq.RnnStatelet", "torch.softmax.transpose", "seq2seq.Seq2Seq.score_action"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.Decoder._get_initial_state", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.get_nonterminal_productions", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "world", ":", "Any", ",", "\n", "token_rep", ":", "torch", ".", "Tensor", ",", "\n", "token_encodes", ":", "torch", ".", "Tensor", ",", "\n", "sketch_actions", ":", "List", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Input: a sequence of sketch actions\n        \"\"\"", "\n", "action_dict", "=", "world", ".", "_get_sketch_productions", "(", "world", ".", "get_nonterminal_productions", "(", ")", ")", "\n", "initial_rnn_state", "=", "self", ".", "_get_initial_state", "(", "token_rep", ")", "\n", "\n", "seq_likeli", "=", "[", "]", "\n", "rnn_state", "=", "initial_rnn_state", "\n", "for", "i", ",", "prod", "in", "enumerate", "(", "sketch_actions", ")", ":", "\n", "            ", "left_side", ",", "_", "=", "prod", ".", "split", "(", "\" -> \"", ")", "\n", "candidates", "=", "action_dict", "[", "left_side", "]", "\n", "candidate_ids", "=", "[", "self", ".", "sketch_prod2id", "[", "ac", "]", "for", "ac", "in", "candidates", "]", "\n", "\n", "cur_hidden", ",", "cur_memory", "=", "rnn_state", ".", "hidden_state", ",", "rnn_state", ".", "memory_cell", "\n", "next_hidden", ",", "next_memory", "=", "self", ".", "decoder_lstm", "(", "\n", "rnn_state", ".", "previous_action_embedding", ",", "(", "cur_hidden", ",", "cur_memory", ")", "\n", ")", "\n", "hidden_tran", "=", "next_hidden", ".", "transpose", "(", "0", ",", "1", ")", "\n", "att_feat_v", "=", "torch", ".", "mm", "(", "token_encodes", ",", "hidden_tran", ")", "# sent_len * 1", "\n", "att_v", "=", "F", ".", "softmax", "(", "att_feat_v", ",", "dim", "=", "0", ")", "\n", "att_ret_v", "=", "torch", ".", "mm", "(", "att_v", ".", "transpose", "(", "0", ",", "1", ")", ",", "token_encodes", ")", "\n", "\n", "score_feat_v", "=", "torch", ".", "cat", "(", "[", "next_hidden", ",", "att_ret_v", "]", ",", "1", ")", "\n", "score_v", "=", "self", ".", "score_action", "(", "score_feat_v", ")", ".", "squeeze", "(", ")", "\n", "filter_score_v_list", "=", "[", "score_v", "[", "_id", "]", "for", "_id", "in", "candidate_ids", "]", "\n", "filter_score_v", "=", "torch", ".", "stack", "(", "filter_score_v_list", ",", "0", ")", "\n", "log_likeli", "=", "F", ".", "log_softmax", "(", "filter_score_v", ",", "dim", "=", "0", ")", "\n", "\n", "gold_id", "=", "candidate_ids", ".", "index", "(", "self", ".", "sketch_prod2id", "[", "prod", "]", ")", "\n", "seq_likeli", ".", "append", "(", "log_likeli", "[", "gold_id", "]", ")", "\n", "\n", "next_action_embed", "=", "self", ".", "sketch_embed", ".", "weight", "[", "\n", "self", ".", "sketch_prod2id", "[", "prod", "]", "\n", "]", ".", "unsqueeze", "(", "0", ")", "\n", "rnn_state", "=", "RnnStatelet", "(", "\n", "next_hidden", ",", "next_memory", ",", "next_action_embed", ",", "None", ",", "None", ",", "None", "\n", ")", "\n", "\n", "", "return", "sum", "(", "seq_likeli", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.seq2seq.Seq2Seq.decode": [[181, 233], ["world._get_sketch_productions", "seq2seq.Seq2Seq._get_initial_state", "range", "tuple", "world.get_nonterminal_productions", "stack.pop", "seq2seq.Seq2Seq.decoder_lstm", "next_hidden.transpose", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.softmax", "torch.softmax", "torch.softmax", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "seq2seq.Seq2Seq.score_action().squeeze", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.softmax", "torch.softmax", "torch.softmax", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "pred_id.cpu().item.cpu().item.cpu().item", "seq2seq.Seq2Seq.sketch_embed.weight[].unsqueeze", "seq2seq.RnnStatelet", "history.append", "seq2seq.Seq2Seq._get_right_side_parts", "list", "len", "torch.softmax.transpose", "reversed", "seq2seq.Seq2Seq.score_action", "pred_id.cpu().item.cpu().item.cpu"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.Decoder._get_initial_state", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.get_nonterminal_productions", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker._get_right_side_parts"], ["", "def", "decode", "(", "self", ",", "world", ":", "Any", ",", "token_rep", ":", "torch", ".", "Tensor", ",", "token_encodes", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        Input: a sequence of sketch actions\n        Output: the most probable sequence\n        \"\"\"", "\n", "action_dict", "=", "world", ".", "_get_sketch_productions", "(", "world", ".", "get_nonterminal_productions", "(", ")", ")", "\n", "initial_rnn_state", "=", "self", ".", "_get_initial_state", "(", "token_rep", ")", "\n", "\n", "stack", "=", "[", "START_SYMBOL", "]", "\n", "history", "=", "[", "]", "\n", "rnn_state", "=", "initial_rnn_state", "\n", "for", "i", "in", "range", "(", "self", ".", "_max_decoding_steps", ")", ":", "\n", "            ", "if", "len", "(", "stack", ")", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "", "cur_non_terminal", "=", "stack", ".", "pop", "(", ")", "\n", "if", "cur_non_terminal", "not", "in", "action_dict", ":", "\n", "                ", "continue", "\n", "", "candidates", "=", "action_dict", "[", "cur_non_terminal", "]", "\n", "candidate_ids", "=", "[", "self", ".", "sketch_prod2id", "[", "ac", "]", "for", "ac", "in", "candidates", "]", "\n", "\n", "cur_hidden", ",", "cur_memory", "=", "rnn_state", ".", "hidden_state", ",", "rnn_state", ".", "memory_cell", "\n", "next_hidden", ",", "next_memory", "=", "self", ".", "decoder_lstm", "(", "\n", "rnn_state", ".", "previous_action_embedding", ",", "(", "cur_hidden", ",", "cur_memory", ")", "\n", ")", "\n", "hidden_tran", "=", "next_hidden", ".", "transpose", "(", "0", ",", "1", ")", "\n", "att_feat_v", "=", "torch", ".", "mm", "(", "token_encodes", ",", "hidden_tran", ")", "# sent_len * 1", "\n", "att_v", "=", "F", ".", "softmax", "(", "att_feat_v", ",", "dim", "=", "0", ")", "\n", "att_ret_v", "=", "torch", ".", "mm", "(", "att_v", ".", "transpose", "(", "0", ",", "1", ")", ",", "token_encodes", ")", "\n", "\n", "score_feat_v", "=", "torch", ".", "cat", "(", "[", "next_hidden", ",", "att_ret_v", "]", ",", "1", ")", "\n", "score_v", "=", "self", ".", "score_action", "(", "score_feat_v", ")", ".", "squeeze", "(", ")", "\n", "filter_score_v_list", "=", "[", "score_v", "[", "_id", "]", "for", "_id", "in", "candidate_ids", "]", "\n", "filter_score_v", "=", "torch", ".", "stack", "(", "filter_score_v_list", ",", "0", ")", "\n", "prob_v", "=", "F", ".", "softmax", "(", "filter_score_v", ",", "dim", "=", "0", ")", "\n", "\n", "_", ",", "pred_id", "=", "torch", ".", "max", "(", "prob_v", ",", "dim", "=", "0", ")", "\n", "pred_id", "=", "pred_id", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "\n", "next_action_embed", "=", "self", ".", "sketch_embed", ".", "weight", "[", "\n", "candidate_ids", "[", "pred_id", "]", "\n", "]", ".", "unsqueeze", "(", "0", ")", "\n", "rnn_state", "=", "RnnStatelet", "(", "\n", "next_hidden", ",", "next_memory", ",", "next_action_embed", ",", "None", ",", "None", ",", "None", "\n", ")", "\n", "\n", "prod", "=", "candidates", "[", "pred_id", "]", "\n", "history", ".", "append", "(", "prod", ")", "\n", "non_terminals", "=", "self", ".", "_get_right_side_parts", "(", "prod", ")", "\n", "stack", "+=", "list", "(", "reversed", "(", "non_terminals", ")", ")", "\n", "\n", "", "return", "tuple", "(", "history", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.seq2seq.Seq2Seq.beam_decode": [[234, 323], ["world._get_sketch_productions", "seq2seq.Seq2Seq._get_initial_state", "range", "sorted", "world.get_nonterminal_productions", "stack.pop", "seq2seq.Seq2Seq.decoder_lstm", "next_hidden.transpose", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.softmax", "torch.softmax", "torch.softmax", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "seq2seq.Seq2Seq.score_action().squeeze", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "zip", "len", "len", "sorted", "torch.softmax.transpose", "min", "seq2seq.Seq2Seq.sketch_embed.weight[].unsqueeze", "seq2seq.RnnStatelet", "_history.append", "seq2seq.Seq2Seq._get_right_side_parts", "reversed", "next_paths.append", "len", "sorted.append", "seq2seq.Seq2Seq.score_action", "world.action_sequence_to_logical_form", "sorted.append", "torch.log_softmax.size", "_stack.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.Decoder._get_initial_state", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.get_nonterminal_productions", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker._get_right_side_parts", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.action_sequence_to_logical_form", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "beam_decode", "(", "\n", "self", ",", "\n", "world", ":", "Any", ",", "\n", "token_rep", ":", "torch", ".", "Tensor", ",", "\n", "token_encodes", ":", "torch", ".", "Tensor", ",", "\n", "beam_size", ":", "int", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Input: a sequence of sketch actions\n        Output: output top-k most probable sequence\n        \"\"\"", "\n", "action_dict", "=", "world", ".", "_get_sketch_productions", "(", "world", ".", "get_nonterminal_productions", "(", ")", ")", "\n", "initial_rnn_state", "=", "self", ".", "_get_initial_state", "(", "token_rep", ")", "\n", "\n", "incomplete", "=", "[", "\n", "(", "[", "START_SYMBOL", "]", ",", "[", "]", ",", "initial_rnn_state", ",", "None", ")", "\n", "]", "# stack,history,rnn_state", "\n", "completed", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "_max_decoding_steps", ")", ":", "\n", "            ", "next_paths", "=", "[", "]", "\n", "for", "stack", ",", "history", ",", "rnn_state", ",", "seq_score", "in", "incomplete", ":", "\n", "                ", "cur_non_terminal", "=", "stack", ".", "pop", "(", ")", "\n", "if", "cur_non_terminal", "not", "in", "action_dict", ":", "\n", "                    ", "continue", "\n", "", "candidates", "=", "action_dict", "[", "cur_non_terminal", "]", "\n", "candidate_ids", "=", "[", "self", ".", "sketch_prod2id", "[", "ac", "]", "for", "ac", "in", "candidates", "]", "\n", "\n", "cur_hidden", ",", "cur_memory", "=", "rnn_state", ".", "hidden_state", ",", "rnn_state", ".", "memory_cell", "\n", "next_hidden", ",", "next_memory", "=", "self", ".", "decoder_lstm", "(", "\n", "rnn_state", ".", "previous_action_embedding", ",", "(", "cur_hidden", ",", "cur_memory", ")", "\n", ")", "\n", "hidden_tran", "=", "next_hidden", ".", "transpose", "(", "0", ",", "1", ")", "\n", "att_feat_v", "=", "torch", ".", "mm", "(", "token_encodes", ",", "hidden_tran", ")", "# sent_len * 1", "\n", "att_v", "=", "F", ".", "softmax", "(", "att_feat_v", ",", "dim", "=", "0", ")", "\n", "att_ret_v", "=", "torch", ".", "mm", "(", "att_v", ".", "transpose", "(", "0", ",", "1", ")", ",", "token_encodes", ")", "\n", "\n", "score_feat_v", "=", "torch", ".", "cat", "(", "[", "next_hidden", ",", "att_ret_v", "]", ",", "1", ")", "\n", "score_v", "=", "self", ".", "score_action", "(", "score_feat_v", ")", ".", "squeeze", "(", ")", "\n", "filter_score_v_list", "=", "[", "score_v", "[", "_id", "]", "for", "_id", "in", "candidate_ids", "]", "\n", "filter_score_v", "=", "torch", ".", "stack", "(", "filter_score_v_list", ",", "0", ")", "\n", "prob_v", "=", "F", ".", "log_softmax", "(", "filter_score_v", ",", "dim", "=", "0", ")", "\n", "\n", "pred_logits", ",", "pred_ids", "=", "torch", ".", "topk", "(", "\n", "prob_v", ",", "min", "(", "beam_size", ",", "prob_v", ".", "size", "(", ")", "[", "0", "]", ")", ",", "dim", "=", "0", "\n", ")", "\n", "\n", "for", "_logits", ",", "_idx", "in", "zip", "(", "pred_logits", ",", "pred_ids", ")", ":", "\n", "                    ", "next_action_embed", "=", "self", ".", "sketch_embed", ".", "weight", "[", "\n", "candidate_ids", "[", "_idx", "]", "\n", "]", ".", "unsqueeze", "(", "0", ")", "\n", "rnn_state", "=", "RnnStatelet", "(", "\n", "next_hidden", ",", "next_memory", ",", "next_action_embed", ",", "None", ",", "None", ",", "None", "\n", ")", "\n", "\n", "prod", "=", "candidates", "[", "_idx", "]", "\n", "_history", "=", "history", "[", ":", "]", "\n", "_history", ".", "append", "(", "prod", ")", "\n", "non_terminals", "=", "self", ".", "_get_right_side_parts", "(", "prod", ")", "\n", "_stack", "=", "stack", "[", ":", "]", "\n", "for", "ac", "in", "reversed", "(", "non_terminals", ")", ":", "\n", "                        ", "if", "ac", "in", "action_dict", ":", "\n", "                            ", "_stack", ".", "append", "(", "ac", ")", "\n", "", "", "if", "seq_score", "is", "None", ":", "\n", "                        ", "_score", "=", "_logits", "\n", "", "else", ":", "\n", "                        ", "_score", "=", "_logits", "+", "seq_score", "\n", "\n", "", "next_paths", ".", "append", "(", "(", "_stack", ",", "_history", ",", "rnn_state", ",", "_score", ")", ")", "\n", "\n", "", "", "incomplete", "=", "[", "]", "\n", "for", "stack", ",", "history", ",", "rnn_state", ",", "seq_score", "in", "next_paths", ":", "\n", "                ", "if", "len", "(", "stack", ")", "==", "0", ":", "\n", "                    ", "if", "world", ".", "action_sequence_to_logical_form", "(", "history", ")", "!=", "\"#PH#\"", ":", "\n", "                        ", "completed", ".", "append", "(", "(", "history", ",", "seq_score", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "incomplete", ".", "append", "(", "(", "stack", ",", "history", ",", "rnn_state", ",", "seq_score", ")", ")", "\n", "\n", "", "", "if", "len", "(", "completed", ")", ">", "beam_size", ":", "\n", "                ", "break", "\n", "\n", "", "if", "len", "(", "incomplete", ")", ">", "beam_size", ":", "\n", "                ", "incomplete", "=", "sorted", "(", "incomplete", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "3", "]", ")", "\n", "incomplete", "=", "incomplete", "[", ":", "beam_size", "]", "\n", "\n", "", "", "completed", "=", "sorted", "(", "completed", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", ")", "\n", "completed", "=", "completed", "[", ":", "beam_size", "]", "\n", "\n", "return", "completed", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.attention.Attention.__init__": [[21, 25], ["super().__init__", "torch.nn.Softmax"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["\n", "import", "abc", "\n", "import", "six", "\n", "\n", "import", "tensorflow", "as", "tf", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.attention.Attention.forward": [[26, 38], ["attention.Attention.pointer", "attention.Attention.softmax", "torch.bmm", "output.squeeze.squeeze.squeeze", "attention.Attention.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax"], ["from", "tensorflow", ".", "python", ".", "framework", "import", "function", "# pylint: disable=E0611", "\n", "\n", "from", "seq2seq", ".", "graph_module", "import", "GraphModule", "\n", "from", "seq2seq", ".", "configurable", "import", "Configurable", "\n", "\n", "\n", "@", "function", ".", "Defun", "(", "\n", "tf", ".", "float32", ",", "\n", "tf", ".", "float32", ",", "\n", "tf", ".", "float32", ",", "\n", "func_name", "=", "\"att_sum_bahdanau\"", ",", "\n", "noinline", "=", "True", ")", "\n", "def", "att_sum_bahdanau", "(", "v_att", ",", "keys", ",", "query", ")", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.attention.ScaledDotProductPointer.__init__": [[42, 46], ["super().__init__", "torch.nn.Linear", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["\n", "", "@", "function", ".", "Defun", "(", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "func_name", "=", "\"att_sum_dot\"", ",", "noinline", "=", "True", ")", "\n", "def", "att_sum_dot", "(", "keys", ",", "query", ")", ":", "\n", "  ", "\"\"\"Calculates a batch- and timweise dot product\"\"\"", "\n", "return", "tf", ".", "reduce_sum", "(", "keys", "*", "tf", ".", "expand_dims", "(", "query", ",", "1", ")", ",", "[", "2", "]", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.attention.ScaledDotProductPointer.forward": [[47, 58], ["attention.ScaledDotProductPointer.query_proj().unsqueeze", "attention.maybe_mask", "torch.bmm().squeeze", "attention.ScaledDotProductPointer.query_proj", "torch.bmm"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.attention.maybe_mask"], ["\n", "\n", "", "@", "six", ".", "add_metaclass", "(", "abc", ".", "ABCMeta", ")", "\n", "class", "AttentionLayer", "(", "GraphModule", ",", "Configurable", ")", ":", "\n", "  ", "\"\"\"\n  Attention layer according to https://arxiv.org/abs/1409.0473.\n\n  Params:\n    num_units: Number of units used in the attention layer\n  \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "params", ",", "mode", ",", "name", "=", "\"attention\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.attention.ScaledDotProductAttention.__init__": [[62, 64], ["attention.Attention.__init__", "attention.ScaledDotProductPointer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["", "@", "staticmethod", "\n", "def", "default_params", "(", ")", ":", "\n", "    ", "return", "{", "\"num_units\"", ":", "128", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.attention.BahdanauPointer.__init__": [[68, 74], ["super().__init__", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["    ", "\"\"\"Computes the attention score\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n", "", "def", "_build", "(", "self", ",", "query", ",", "keys", ",", "values", ",", "values_length", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.attention.BahdanauPointer.forward": [[76, 92], ["query.unsqueeze().expand", "attention.BahdanauPointer.compute_scores", "attn_logits.squeeze.squeeze.squeeze", "attention.maybe_mask", "torch.cat", "query.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.expand", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.attention.maybe_mask"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.attention.BahdanauAttention.__init__": [[96, 98], ["attention.Attention.__init__", "attention.BahdanauPointer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["values_depth", "=", "values", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "\n", "# Fully connected layers to transform both keys and query", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.attention.MultiHeadedAttention.__init__": [[102, 122], ["super().__init__", "torch.nn.ModuleList", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["num_outputs", "=", "self", ".", "params", "[", "\"num_units\"", "]", ",", "\n", "activation_fn", "=", "None", ",", "\n", "scope", "=", "\"att_keys\"", ")", "\n", "att_query", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "\n", "inputs", "=", "query", ",", "\n", "num_outputs", "=", "self", ".", "params", "[", "\"num_units\"", "]", ",", "\n", "activation_fn", "=", "None", ",", "\n", "scope", "=", "\"att_query\"", ")", "\n", "\n", "scores", "=", "self", ".", "score_fn", "(", "att_keys", ",", "att_query", ")", "\n", "\n", "# Replace all scores for padded inputs with tf.float32.min", "\n", "num_scores", "=", "tf", ".", "shape", "(", "scores", ")", "[", "1", "]", "\n", "scores_mask", "=", "tf", ".", "sequence_mask", "(", "\n", "lengths", "=", "tf", ".", "to_int32", "(", "values_length", ")", ",", "\n", "maxlen", "=", "tf", ".", "to_int32", "(", "num_scores", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "scores", "=", "scores", "*", "scores_mask", "+", "(", "(", "1.0", "-", "scores_mask", ")", "*", "tf", ".", "float32", ".", "min", ")", "\n", "\n", "# Normalize the scores", "\n", "scores_normalized", "=", "tf", ".", "nn", ".", "softmax", "(", "scores", ",", "name", "=", "\"scores_normalized\"", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.attention.MultiHeadedAttention.forward": [[123, 146], ["query.size", "tensor2struct.modules.transformer.attention", "x.squeeze.squeeze.transpose().contiguous().view", "x.squeeze.squeeze.squeeze", "attn_mask.unsqueeze.unsqueeze.unsqueeze", "l().view().transpose", "zip", "x.squeeze.squeeze.transpose().contiguous", "l().view", "x.squeeze.squeeze.transpose", "l"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.attention"], ["\n", "# Calculate the weighted average of the attention inputs", "\n", "# according to the scores", "\n", "context", "=", "tf", ".", "expand_dims", "(", "scores_normalized", ",", "2", ")", "*", "values", "\n", "context", "=", "tf", ".", "reduce_sum", "(", "context", ",", "1", ",", "name", "=", "\"context\"", ")", "\n", "context", ".", "set_shape", "(", "[", "None", ",", "values_depth", "]", ")", "\n", "\n", "return", "(", "scores_normalized", ",", "context", ")", "\n", "\n", "\n", "", "", "class", "AttentionLayerDot", "(", "AttentionLayer", ")", ":", "\n", "  ", "\"\"\"An attention layer that calculates attention scores using\n  a dot product.\n  \"\"\"", "\n", "\n", "def", "score_fn", "(", "self", ",", "keys", ",", "query", ")", ":", "\n", "    ", "return", "att_sum_dot", "(", "keys", ",", "query", ")", "\n", "\n", "\n", "", "", "class", "AttentionLayerBahdanau", "(", "AttentionLayer", ")", ":", "\n", "  ", "\"\"\"An attention layer that calculates attention scores using\n  a parameterized multiplication.\"\"\"", "\n", "\n", "def", "score_fn", "(", "self", ",", "keys", ",", "query", ")", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.attention.maybe_mask": [[8, 18], ["all", "attn.data.masked_fill_", "float", "zip"], "function", ["None"], ["#", "\n", "# Unless required by applicable law or agreed to in writing, software", "\n", "# distributed under the License is distributed on an \"AS IS\" BASIS,", "\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "\n", "# See the License for the specific language governing permissions and", "\n", "# limitations under the License.", "\n", "\"\"\" Implementations of attention layers.\n\"\"\"", "\n", "\n", "from", "__future__", "import", "absolute_import", "\n", "from", "__future__", "import", "division", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.RecurrentDropoutLSTMCell.__init__": [[9, 64], ["super().__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.jit.Attribute", "torch.jit.Attribute", "super()._register_state_dict_hook", "super()._register_load_state_dict_pre_hook", "variational_lstm.RecurrentDropoutLSTMCell.reset_parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.RecurrentDropoutLSTMCell.reset_parameters"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "dropout", "=", "0.0", ",", "layernorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "RecurrentDropoutLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "W_i", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "hidden_size", ",", "input_size", ")", ")", "\n", "self", ".", "U_i", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "hidden_size", ",", "hidden_size", ")", ")", "\n", "\n", "self", ".", "W_f", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "hidden_size", ",", "input_size", ")", ")", "\n", "self", ".", "U_f", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "hidden_size", ",", "hidden_size", ")", ")", "\n", "\n", "self", ".", "W_c", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "hidden_size", ",", "input_size", ")", ")", "\n", "self", ".", "U_c", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "hidden_size", ",", "hidden_size", ")", ")", "\n", "\n", "self", ".", "W_o", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "hidden_size", ",", "input_size", ")", ")", "\n", "self", ".", "U_o", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "hidden_size", ",", "hidden_size", ")", ")", "\n", "\n", "self", ".", "bias_ih", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "4", "*", "hidden_size", ")", ")", "\n", "self", ".", "bias_hh", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "4", "*", "hidden_size", ")", ")", "\n", "\n", "\n", "# TODO: maybe torchscript cannot handle if else when compiling, i.e., layernorm is False does not work", "\n", "self", ".", "layernorm", "=", "layernorm", "\n", "if", "self", ".", "layernorm", ":", "\n", "            ", "self", ".", "ln_xi2h", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "hidden_size", ")", "\n", "self", ".", "ln_xf2h", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "hidden_size", ")", "\n", "self", ".", "ln_xc2h", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "hidden_size", ")", "\n", "self", ".", "ln_xo2h", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "hidden_size", ")", "\n", "\n", "self", ".", "ln_hi2h", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "hidden_size", ")", "\n", "self", ".", "ln_hf2h", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "hidden_size", ")", "\n", "self", ".", "ln_hc2h", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "hidden_size", ")", "\n", "self", ".", "ln_ho2h", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "hidden_size", ")", "\n", "\n", "self", ".", "ln_cell", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "hidden_size", ")", "\n", "\n", "", "self", ".", "_input_dropout_mask", "=", "torch", ".", "jit", ".", "Attribute", "(", "\n", "torch", ".", "empty", "(", "(", ")", ",", "requires_grad", "=", "False", ")", ",", "torch", ".", "Tensor", "\n", ")", "\n", "self", ".", "_h_dropout_mask", "=", "torch", ".", "jit", ".", "Attribute", "(", "\n", "torch", ".", "empty", "(", "(", ")", ",", "requires_grad", "=", "False", ")", ",", "torch", ".", "Tensor", "\n", ")", "\n", "# call to super is needed because torch.jit.ScriptModule deletes the", "\n", "# _register_state_dict_hook and _register_load_state_dict_pre_hook methods.", "\n", "# TODO: In Torch 1.3, discontinue use of torch.jit.Attribute so that", "\n", "# the dropout masks don't end up in the state dict in the first place.", "\n", "super", "(", "torch", ".", "jit", ".", "ScriptModule", ",", "self", ")", ".", "_register_state_dict_hook", "(", "\n", "self", ".", "_hook_remove_dropout_masks_from_state_dict", "\n", ")", "\n", "super", "(", "torch", ".", "jit", ".", "ScriptModule", ",", "self", ")", ".", "_register_load_state_dict_pre_hook", "(", "\n", "self", ".", "_hook_add_dropout_masks_to_state_dict", "\n", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.RecurrentDropoutLSTMCell.reset_parameters": [[65, 78], ["torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "variational_lstm.RecurrentDropoutLSTMCell.bias_ih.data.fill_", "variational_lstm.RecurrentDropoutLSTMCell.bias_ih.data[].fill_", "variational_lstm.RecurrentDropoutLSTMCell.bias_hh.data.fill_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "W_i", ")", "\n", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "U_i", ")", "\n", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "W_f", ")", "\n", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "U_f", ")", "\n", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "W_c", ")", "\n", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "U_c", ")", "\n", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "W_o", ")", "\n", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "U_o", ")", "\n", "self", ".", "bias_ih", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "# forget gate set to 1.", "\n", "self", ".", "bias_ih", ".", "data", "[", "self", ".", "hidden_size", ":", "2", "*", "self", ".", "hidden_size", "]", ".", "fill_", "(", "1.0", ")", "\n", "self", ".", "bias_hh", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.RecurrentDropoutLSTMCell.set_dropout_masks": [[80, 106], ["torch.tensor().reshape().expand().to", "variational_lstm.RecurrentDropoutLSTMCell.set_dropout_masks.constant_mask"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["", "def", "set_dropout_masks", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "def", "constant_mask", "(", "v", ")", ":", "\n", "            ", "return", "(", "\n", "torch", ".", "tensor", "(", "v", ")", "\n", ".", "reshape", "(", "1", ",", "1", ",", "1", ")", "\n", ".", "expand", "(", "4", ",", "batch_size", ",", "-", "1", ")", "\n", ".", "to", "(", "self", ".", "W_i", ".", "device", ")", "\n", ")", "\n", "\n", "", "if", "self", ".", "dropout", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "new_tensor", "=", "self", ".", "W_i", ".", "data", ".", "new", "\n", "self", ".", "_input_dropout_mask", "=", "torch", ".", "bernoulli", "(", "\n", "new_tensor", "(", "4", ",", "batch_size", ",", "self", ".", "input_size", ")", ".", "fill_", "(", "1", "-", "self", ".", "dropout", ")", "\n", ")", "\n", "self", ".", "_h_dropout_mask", "=", "torch", ".", "bernoulli", "(", "\n", "new_tensor", "(", "4", ",", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "fill_", "(", "1", "-", "self", ".", "dropout", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "mask", "=", "constant_mask", "(", "1", "-", "self", ".", "dropout", ")", "\n", "self", ".", "_input_dropout_mask", "=", "mask", "\n", "self", ".", "_h_dropout_mask", "=", "mask", "\n", "", "", "else", ":", "\n", "            ", "mask", "=", "constant_mask", "(", "1.0", ")", "\n", "self", ".", "_input_dropout_mask", "=", "mask", "\n", "self", ".", "_h_dropout_mask", "=", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.RecurrentDropoutLSTMCell._hook_remove_dropout_masks_from_state_dict": [[107, 113], ["None"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "_hook_remove_dropout_masks_from_state_dict", "(", "\n", "cls", ",", "instance", ",", "state_dict", ",", "prefix", ",", "local_metadata", "\n", ")", ":", "\n", "        ", "del", "state_dict", "[", "prefix", "+", "\"_input_dropout_mask\"", "]", "\n", "del", "state_dict", "[", "prefix", "+", "\"_h_dropout_mask\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.RecurrentDropoutLSTMCell._hook_add_dropout_masks_to_state_dict": [[114, 126], ["None"], "methods", ["None"], ["", "def", "_hook_add_dropout_masks_to_state_dict", "(", "\n", "self", ",", "\n", "state_dict", ",", "\n", "prefix", ",", "\n", "local_metadata", ",", "\n", "strict", ",", "\n", "missing_keys", ",", "\n", "unexpected_keys", ",", "\n", "error_msgs", ",", "\n", ")", ":", "\n", "        ", "state_dict", "[", "prefix", "+", "\"_input_dropout_mask\"", "]", "=", "self", ".", "_input_dropout_mask", "\n", "state_dict", "[", "prefix", "+", "\"_h_dropout_mask\"", "]", "=", "self", ".", "_h_dropout_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.RecurrentDropoutLSTMCell.forward": [[127, 202], ["torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "variational_lstm.RecurrentDropoutLSTMCell.ln_xi2h", "variational_lstm.RecurrentDropoutLSTMCell.ln_xf2h", "variational_lstm.RecurrentDropoutLSTMCell.ln_xc2h", "variational_lstm.RecurrentDropoutLSTMCell.ln_xo2h", "variational_lstm.RecurrentDropoutLSTMCell.ln_hi2h", "variational_lstm.RecurrentDropoutLSTMCell.ln_hf2h", "variational_lstm.RecurrentDropoutLSTMCell.ln_hc2h", "variational_lstm.RecurrentDropoutLSTMCell.ln_ho2h", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "variational_lstm.RecurrentDropoutLSTMCell.ln_cell"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.linear", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.linear", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.linear", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.linear", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.linear", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.linear", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.linear", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.linear", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.sigmoid", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.sigmoid", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.sigmoid", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh"], ["", "@", "torch", ".", "jit", ".", "script_method", "\n", "def", "forward", "(", "\n", "self", ",", "input", ":", "torch", ".", "Tensor", ",", "hidden_state", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", "\n", ")", ":", "\n", "        ", "h_tm1", ",", "c_tm1", "=", "hidden_state", "\n", "\n", "xi_t", "=", "torch", ".", "nn", ".", "functional", ".", "linear", "(", "\n", "input", "*", "self", ".", "_input_dropout_mask", "[", "0", ",", ":", "input", ".", "shape", "[", "0", "]", "]", ",", "self", ".", "W_i", "\n", ")", "\n", "xf_t", "=", "torch", ".", "nn", ".", "functional", ".", "linear", "(", "\n", "input", "*", "self", ".", "_input_dropout_mask", "[", "1", ",", ":", "input", ".", "shape", "[", "0", "]", "]", ",", "self", ".", "W_f", "\n", ")", "\n", "xc_t", "=", "torch", ".", "nn", ".", "functional", ".", "linear", "(", "\n", "input", "*", "self", ".", "_input_dropout_mask", "[", "2", ",", ":", "input", ".", "shape", "[", "0", "]", "]", ",", "self", ".", "W_c", "\n", ")", "\n", "xo_t", "=", "torch", ".", "nn", ".", "functional", ".", "linear", "(", "\n", "input", "*", "self", ".", "_input_dropout_mask", "[", "3", ",", ":", "input", ".", "shape", "[", "0", "]", "]", ",", "self", ".", "W_o", "\n", ")", "\n", "\n", "hi_t", "=", "torch", ".", "nn", ".", "functional", ".", "linear", "(", "\n", "h_tm1", "*", "self", ".", "_h_dropout_mask", "[", "0", ",", ":", "input", ".", "shape", "[", "0", "]", "]", ",", "self", ".", "U_i", "\n", ")", "\n", "hf_t", "=", "torch", ".", "nn", ".", "functional", ".", "linear", "(", "\n", "h_tm1", "*", "self", ".", "_h_dropout_mask", "[", "1", ",", ":", "input", ".", "shape", "[", "0", "]", "]", ",", "self", ".", "U_f", "\n", ")", "\n", "hc_t", "=", "torch", ".", "nn", ".", "functional", ".", "linear", "(", "\n", "h_tm1", "*", "self", ".", "_h_dropout_mask", "[", "2", ",", ":", "input", ".", "shape", "[", "0", "]", "]", ",", "self", ".", "U_c", "\n", ")", "\n", "ho_t", "=", "torch", ".", "nn", ".", "functional", ".", "linear", "(", "\n", "h_tm1", "*", "self", ".", "_h_dropout_mask", "[", "3", ",", ":", "input", ".", "shape", "[", "0", "]", "]", ",", "self", ".", "U_o", "\n", ")", "\n", "\n", "if", "self", ".", "layernorm", ":", "\n", "            ", "xi_t", "=", "self", ".", "ln_xi2h", "(", "xi_t", ")", "\n", "xf_t", "=", "self", ".", "ln_xf2h", "(", "xf_t", ")", "\n", "xc_t", "=", "self", ".", "ln_xc2h", "(", "xc_t", ")", "\n", "xo_t", "=", "self", ".", "ln_xo2h", "(", "xo_t", ")", "\n", "\n", "hi_t", "=", "self", ".", "ln_hi2h", "(", "hi_t", ")", "\n", "hf_t", "=", "self", ".", "ln_hf2h", "(", "hf_t", ")", "\n", "hc_t", "=", "self", ".", "ln_hc2h", "(", "hc_t", ")", "\n", "ho_t", "=", "self", ".", "ln_ho2h", "(", "ho_t", ")", "\n", "\n", "", "i_t", "=", "torch", ".", "sigmoid", "(", "\n", "xi_t", "\n", "+", "self", ".", "bias_ih", "[", ":", "self", ".", "hidden_size", "]", "\n", "+", "hi_t", "\n", "+", "self", ".", "bias_hh", "[", ":", "self", ".", "hidden_size", "]", "\n", ")", "\n", "f_t", "=", "torch", ".", "sigmoid", "(", "\n", "xf_t", "\n", "+", "self", ".", "bias_ih", "[", "self", ".", "hidden_size", ":", "2", "*", "self", ".", "hidden_size", "]", "\n", "+", "hf_t", "\n", "+", "self", ".", "bias_hh", "[", "self", ".", "hidden_size", ":", "2", "*", "self", ".", "hidden_size", "]", "\n", ")", "\n", "c_t", "=", "f_t", "*", "c_tm1", "+", "i_t", "*", "torch", ".", "tanh", "(", "\n", "xc_t", "\n", "+", "self", ".", "bias_ih", "[", "2", "*", "self", ".", "hidden_size", ":", "3", "*", "self", ".", "hidden_size", "]", "\n", "+", "hc_t", "\n", "+", "self", ".", "bias_hh", "[", "2", "*", "self", ".", "hidden_size", ":", "3", "*", "self", ".", "hidden_size", "]", "\n", ")", "\n", "o_t", "=", "torch", ".", "sigmoid", "(", "\n", "xo_t", "\n", "+", "self", ".", "bias_ih", "[", "3", "*", "self", ".", "hidden_size", ":", "4", "*", "self", ".", "hidden_size", "]", "\n", "+", "ho_t", "\n", "+", "self", ".", "bias_hh", "[", "3", "*", "self", ".", "hidden_size", ":", "4", "*", "self", ".", "hidden_size", "]", "\n", ")", "\n", "h_t", "=", "o_t", "*", "torch", ".", "tanh", "(", "c_t", ")", "\n", "\n", "if", "self", ".", "layernorm", ":", "\n", "            ", "h_t", "=", "o_t", "*", "torch", ".", "tanh", "(", "self", ".", "ln_cell", "(", "c_t", ")", ")", "\n", "", "else", ":", "\n", "            ", "h_t", "=", "o_t", "*", "torch", ".", "tanh", "(", "c_t", ")", "\n", "\n", "", "return", "h_t", ",", "c_t", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.BiLSTM.__init__": [[210, 235], ["super().__init__", "range", "cell_factory", "variational_lstm.BiLSTM.lstm_cells.append", "variational_lstm.BiLSTM.add_module"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["def", "__init__", "(", "\n", "self", ",", "\n", "input_size", ",", "\n", "hidden_size", ",", "\n", "dropout", "=", "0.0", ",", "\n", "layernorm", "=", "False", ",", "\n", "cell_factory", "=", "RecurrentDropoutLSTMCell", ",", "\n", ")", ":", "\n", "        ", "super", "(", "BiLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "cell_factory", "=", "cell_factory", "\n", "self", ".", "lstm_cells", "=", "[", "]", "\n", "\n", "self", ".", "bidirectional", "=", "True", "\n", "num_directions", "=", "2", "\n", "\n", "for", "direction", "in", "range", "(", "num_directions", ")", ":", "\n", "            ", "cell", "=", "cell_factory", "(", "input_size", ",", "hidden_size", ",", "dropout", "=", "dropout", ",", "layernorm", "=", "layernorm", ")", "\n", "self", ".", "lstm_cells", ".", "append", "(", "cell", ")", "\n", "\n", "suffix", "=", "\"_reverse\"", "if", "direction", "==", "1", "else", "\"\"", "\n", "cell_name", "=", "\"cell{}\"", ".", "format", "(", "suffix", ")", "\n", "self", ".", "add_module", "(", "cell_name", ",", "cell", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.BiLSTM.forward": [[236, 273], ["isinstance", "tuple", "tuple", "variational_lstm.BiLSTM._forward_packed", "variational_lstm.BiLSTM._reverse_packed", "cell.set_dropout_masks", "input.data.new_zeros", "torch.nn.utils.rnn.PackedSequence", "torch.cat", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.UniLSTM._forward_packed", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.BiLSTM._reverse_packed", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.RecurrentDropoutLSTMCell.set_dropout_masks"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "hidden_state", "=", "None", ")", ":", "\n", "        ", "is_packed", "=", "isinstance", "(", "input", ",", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "PackedSequence", ")", "\n", "if", "not", "is_packed", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "max_batch_size", "=", "input", ".", "batch_sizes", "[", "0", "]", "\n", "for", "cell", "in", "self", ".", "lstm_cells", ":", "\n", "            ", "cell", ".", "set_dropout_masks", "(", "max_batch_size", ")", "\n", "\n", "", "if", "hidden_state", "is", "None", ":", "\n", "            ", "num_directions", "=", "2", "if", "self", ".", "bidirectional", "else", "1", "\n", "hx", "=", "input", ".", "data", ".", "new_zeros", "(", "\n", "num_directions", ",", "max_batch_size", ",", "self", ".", "hidden_size", ",", "requires_grad", "=", "False", "\n", ")", "\n", "hidden_state", "=", "(", "hx", ",", "hx", ")", "\n", "\n", "", "forward_hidden_state", "=", "tuple", "(", "v", "[", "0", "]", "for", "v", "in", "hidden_state", ")", "\n", "reverse_hidden_state", "=", "tuple", "(", "v", "[", "1", "]", "for", "v", "in", "hidden_state", ")", "\n", "\n", "forward_output", ",", "(", "forward_h", ",", "forward_c", ")", "=", "self", ".", "_forward_packed", "(", "\n", "input", ".", "data", ",", "input", ".", "batch_sizes", ",", "forward_hidden_state", "\n", ")", "\n", "reverse_output", ",", "(", "reverse_h", ",", "reverse_c", ")", "=", "self", ".", "_reverse_packed", "(", "\n", "input", ".", "data", ",", "input", ".", "batch_sizes", ",", "reverse_hidden_state", "\n", ")", "\n", "return", "(", "\n", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "PackedSequence", "(", "\n", "torch", ".", "cat", "(", "(", "forward_output", ",", "reverse_output", ")", ",", "dim", "=", "-", "1", ")", ",", "\n", "input", ".", "batch_sizes", ",", "\n", "input", ".", "sorted_indices", ",", "\n", "input", ".", "unsorted_indices", ",", "\n", ")", ",", "\n", "# TODO: Support multiple layers", "\n", "# TODO: Support batch_first", "\n", "(", "\n", "torch", ".", "stack", "(", "(", "forward_h", ",", "reverse_h", ")", ",", "dim", "=", "0", ")", ",", "\n", "torch", ".", "stack", "(", "(", "forward_c", ",", "reverse_c", ")", ",", "dim", "=", "0", ")", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.BiLSTM._forward_packed": [[276, 323], ["torch.zeros", "range", "hs.append", "cs.append", "hs.reverse", "cs.reverse", "torch.cat", "torch.cat", "input.narrow", "variational_lstm.BiLSTM.cell", "step_outputs.append", "torch.cat", "hs.append", "cs.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.reverse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.reverse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "@", "torch", ".", "jit", ".", "script_method", "\n", "def", "_forward_packed", "(", "\n", "self", ",", "\n", "input", ":", "torch", ".", "Tensor", ",", "\n", "batch_sizes", ":", "torch", ".", "Tensor", ",", "\n", "hidden_state", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ",", "\n", ")", ":", "\n", "# Derived from", "\n", "# https://github.com/pytorch/pytorch/blob/6a4ca9abec1c18184635881c08628737c8ed2497/aten/src/ATen/native/RNN.cpp#L589", "\n", "\n", "        ", "step_outputs", "=", "[", "]", "\n", "hs", "=", "[", "]", "\n", "cs", "=", "[", "]", "\n", "input_offset", "=", "torch", ".", "zeros", "(", "(", ")", ",", "dtype", "=", "torch", ".", "int64", ")", "# scalar zero", "\n", "num_steps", "=", "batch_sizes", ".", "shape", "[", "0", "]", "\n", "last_batch_size", "=", "batch_sizes", "[", "0", "]", "\n", "\n", "# Batch sizes is a sequence of decreasing lengths, which are offsets", "\n", "# into a 1D list of inputs. At every step we slice out batch_size elements,", "\n", "# and possibly account for the decrease in the batch size since the last step,", "\n", "# which requires us to slice the hidden state (since some sequences", "\n", "# are completed now). The sliced parts are also saved, because we will need", "\n", "# to return a tensor of final hidden state.", "\n", "h", ",", "c", "=", "hidden_state", "\n", "for", "i", "in", "range", "(", "num_steps", ")", ":", "\n", "            ", "batch_size", "=", "batch_sizes", "[", "i", "]", "\n", "step_input", "=", "input", ".", "narrow", "(", "0", ",", "input_offset", ",", "batch_size", ")", "\n", "input_offset", "+=", "batch_size", "\n", "dec", "=", "last_batch_size", "-", "batch_size", "\n", "if", "dec", ">", "0", ":", "\n", "                ", "hs", ".", "append", "(", "h", "[", "last_batch_size", "-", "dec", ":", "last_batch_size", "]", ")", "\n", "cs", ".", "append", "(", "c", "[", "last_batch_size", "-", "dec", ":", "last_batch_size", "]", ")", "\n", "h", "=", "h", "[", ":", "last_batch_size", "-", "dec", "]", "\n", "c", "=", "c", "[", ":", "last_batch_size", "-", "dec", "]", "\n", "", "last_batch_size", "=", "batch_size", "\n", "h", ",", "c", "=", "self", ".", "cell", "(", "step_input", ",", "(", "h", ",", "c", ")", ")", "\n", "step_outputs", ".", "append", "(", "h", ")", "\n", "\n", "", "hs", ".", "append", "(", "h", ")", "\n", "cs", ".", "append", "(", "c", ")", "\n", "hs", ".", "reverse", "(", ")", "\n", "cs", ".", "reverse", "(", ")", "\n", "\n", "concat_h", "=", "torch", ".", "cat", "(", "hs", ")", "\n", "concat_c", "=", "torch", ".", "cat", "(", "cs", ")", "\n", "\n", "return", "(", "torch", ".", "cat", "(", "step_outputs", ",", "dim", "=", "0", ")", ",", "(", "concat_h", ",", "concat_c", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.BiLSTM._reverse_packed": [[324, 365], ["torch.zeros", "step_outputs.reverse", "input.narrow", "variational_lstm.BiLSTM.cell_reverse", "step_outputs.append", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.reverse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "@", "torch", ".", "jit", ".", "script_method", "\n", "def", "_reverse_packed", "(", "\n", "self", ",", "\n", "input", ":", "torch", ".", "Tensor", ",", "\n", "batch_sizes", ":", "torch", ".", "Tensor", ",", "\n", "hidden_state", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ",", "\n", ")", ":", "\n", "# Derived from", "\n", "# https://github.com/pytorch/pytorch/blob/6a4ca9abec1c18184635881c08628737c8ed2497/aten/src/ATen/native/RNN.cpp#L650", "\n", "\n", "        ", "step_outputs", "=", "[", "]", "\n", "input_offset", "=", "torch", ".", "zeros", "(", "(", ")", ",", "dtype", "=", "torch", ".", "int64", ")", "# scalar zero", "\n", "num_steps", "=", "batch_sizes", ".", "shape", "[", "0", "]", "\n", "last_batch_size", "=", "batch_sizes", "[", "-", "1", "]", "\n", "\n", "# Here the situation is similar to that above, except we start out with", "\n", "# the smallest batch size (and a small set of hidden states we actually use),", "\n", "# and progressively expand the hidden states, as we move backwards over the", "\n", "# 1D list of inputs.", "\n", "h", ",", "c", "=", "hidden_state", "\n", "input_h", ",", "input_c", "=", "hidden_state", "\n", "h", "=", "h", "[", ":", "batch_sizes", "[", "-", "1", "]", "]", "\n", "c", "=", "c", "[", ":", "batch_sizes", "[", "-", "1", "]", "]", "\n", "\n", "# for i in range(num_steps - 1, -1, -1):    # Not supported in torchscript 1.1, so we do a workaround:", "\n", "i", "=", "num_steps", "-", "1", "\n", "while", "i", ">", "-", "1", ":", "\n", "            ", "batch_size", "=", "batch_sizes", "[", "i", "]", "\n", "inc", "=", "batch_size", "-", "last_batch_size", "\n", "if", "inc", ">", "0", ":", "\n", "                ", "h", "=", "torch", ".", "cat", "(", "(", "h", ",", "input_h", "[", "last_batch_size", ":", "batch_size", "]", ")", ")", "\n", "c", "=", "torch", ".", "cat", "(", "(", "c", ",", "input_c", "[", "last_batch_size", ":", "batch_size", "]", ")", ")", "\n", "", "step_input", "=", "input", ".", "narrow", "(", "0", ",", "input_offset", "-", "batch_size", ",", "batch_size", ")", "\n", "input_offset", "-=", "batch_size", "\n", "last_batch_size", "=", "batch_size", "\n", "h", ",", "c", "=", "self", ".", "cell_reverse", "(", "step_input", ",", "(", "h", ",", "c", ")", ")", "\n", "step_outputs", ".", "append", "(", "h", ")", "\n", "i", "-=", "1", "\n", "\n", "", "step_outputs", ".", "reverse", "(", ")", "\n", "return", "(", "torch", ".", "cat", "(", "step_outputs", ",", "dim", "=", "0", ")", ",", "(", "h", ",", "c", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.UniLSTM.__init__": [[367, 389], ["super().__init__", "cell_factory", "variational_lstm.UniLSTM.lstm_cells.append", "variational_lstm.UniLSTM.add_module"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_size", ",", "\n", "hidden_size", ",", "\n", "dropout", "=", "0.0", ",", "\n", "layernorm", "=", "False", ",", "\n", "cell_factory", "=", "RecurrentDropoutLSTMCell", ",", "\n", ")", ":", "\n", "        ", "super", "(", "UniLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "cell_factory", "=", "cell_factory", "\n", "self", ".", "lstm_cells", "=", "[", "]", "\n", "\n", "self", ".", "bidirecitional", "=", "False", "\n", "\n", "cell", "=", "cell_factory", "(", "input_size", ",", "hidden_size", ",", "dropout", "=", "dropout", ",", "layernorm", "=", "layernorm", ")", "\n", "self", ".", "lstm_cells", ".", "append", "(", "cell", ")", "\n", "suffix", "=", "\"\"", "\n", "cell_name", "=", "\"cell{}\"", ".", "format", "(", "suffix", ")", "\n", "self", ".", "add_module", "(", "cell_name", ",", "cell", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.UniLSTM.forward": [[390, 415], ["isinstance", "tuple", "variational_lstm.UniLSTM._forward_packed", "cell.set_dropout_masks", "input.data.new_zeros", "torch.nn.utils.rnn.PackedSequence"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.UniLSTM._forward_packed", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.RecurrentDropoutLSTMCell.set_dropout_masks"], ["", "def", "forward", "(", "self", ",", "input", ",", "hidden_state", "=", "None", ")", ":", "\n", "        ", "is_packed", "=", "isinstance", "(", "input", ",", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "PackedSequence", ")", "\n", "if", "not", "is_packed", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "max_batch_size", "=", "input", ".", "batch_sizes", "[", "0", "]", "\n", "for", "cell", "in", "self", ".", "lstm_cells", ":", "\n", "            ", "cell", ".", "set_dropout_masks", "(", "max_batch_size", ")", "\n", "\n", "", "if", "hidden_state", "is", "None", ":", "\n", "            ", "num_directions", "=", "1", "\n", "hx", "=", "input", ".", "data", ".", "new_zeros", "(", "\n", "num_directions", ",", "max_batch_size", ",", "self", ".", "hidden_size", ",", "requires_grad", "=", "False", "\n", ")", "\n", "hidden_state", "=", "(", "hx", ",", "hx", ")", "\n", "\n", "", "forward_hidden_state", "=", "tuple", "(", "v", "[", "0", "]", "for", "v", "in", "hidden_state", ")", "\n", "output", ",", "next_hidden", "=", "self", ".", "_forward_packed", "(", "\n", "input", ".", "data", ",", "input", ".", "batch_sizes", ",", "forward_hidden_state", "\n", ")", "\n", "return", "(", "\n", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "PackedSequence", "(", "\n", "output", ",", "input", ".", "batch_sizes", ",", "input", ".", "sorted_indices", ",", "input", ".", "unsorted_indices", "\n", ")", ",", "\n", "next_hidden", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.UniLSTM._forward_packed": [[417, 464], ["torch.zeros", "range", "hs.append", "cs.append", "hs.reverse", "cs.reverse", "torch.cat", "torch.cat", "input.narrow", "variational_lstm.UniLSTM.cell", "step_outputs.append", "torch.cat", "hs.append", "cs.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.reverse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.reverse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "@", "torch", ".", "jit", ".", "script_method", "\n", "def", "_forward_packed", "(", "\n", "self", ",", "\n", "input", ":", "torch", ".", "Tensor", ",", "\n", "batch_sizes", ":", "torch", ".", "Tensor", ",", "\n", "hidden_state", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ",", "\n", ")", ":", "\n", "# Derived from", "\n", "# https://github.com/pytorch/pytorch/blob/6a4ca9abec1c18184635881c08628737c8ed2497/aten/src/ATen/native/RNN.cpp#L589", "\n", "\n", "        ", "step_outputs", "=", "[", "]", "\n", "hs", "=", "[", "]", "\n", "cs", "=", "[", "]", "\n", "input_offset", "=", "torch", ".", "zeros", "(", "(", ")", ",", "dtype", "=", "torch", ".", "int64", ")", "# scalar zero", "\n", "num_steps", "=", "batch_sizes", ".", "shape", "[", "0", "]", "\n", "last_batch_size", "=", "batch_sizes", "[", "0", "]", "\n", "\n", "# Batch sizes is a sequence of decreasing lengths, which are offsets", "\n", "# into a 1D list of inputs. At every step we slice out batch_size elements,", "\n", "# and possibly account for the decrease in the batch size since the last step,", "\n", "# which requires us to slice the hidden state (since some sequences", "\n", "# are completed now). The sliced parts are also saved, because we will need", "\n", "# to return a tensor of final hidden state.", "\n", "h", ",", "c", "=", "hidden_state", "\n", "for", "i", "in", "range", "(", "num_steps", ")", ":", "\n", "            ", "batch_size", "=", "batch_sizes", "[", "i", "]", "\n", "step_input", "=", "input", ".", "narrow", "(", "0", ",", "input_offset", ",", "batch_size", ")", "\n", "input_offset", "+=", "batch_size", "\n", "dec", "=", "last_batch_size", "-", "batch_size", "\n", "if", "dec", ">", "0", ":", "\n", "                ", "hs", ".", "append", "(", "h", "[", "last_batch_size", "-", "dec", ":", "last_batch_size", "]", ")", "\n", "cs", ".", "append", "(", "c", "[", "last_batch_size", "-", "dec", ":", "last_batch_size", "]", ")", "\n", "h", "=", "h", "[", ":", "last_batch_size", "-", "dec", "]", "\n", "c", "=", "c", "[", ":", "last_batch_size", "-", "dec", "]", "\n", "", "last_batch_size", "=", "batch_size", "\n", "h", ",", "c", "=", "self", ".", "cell", "(", "step_input", ",", "(", "h", ",", "c", ")", ")", "\n", "step_outputs", ".", "append", "(", "h", ")", "\n", "\n", "", "hs", ".", "append", "(", "h", ")", "\n", "cs", ".", "append", "(", "c", ")", "\n", "hs", ".", "reverse", "(", ")", "\n", "cs", ".", "reverse", "(", ")", "\n", "\n", "concat_h", "=", "torch", ".", "cat", "(", "hs", ")", "\n", "concat_c", "=", "torch", ".", "cat", "(", "cs", ")", "\n", "\n", "return", "(", "torch", ".", "cat", "(", "step_outputs", ",", "dim", "=", "0", ")", ",", "(", "concat_h", ",", "concat_c", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer.__init__": [[24, 52], ["os.path.join", "os.path.join", "bert_tokenizer.BERTokenizer.tokenizer.token_to_id", "bert_tokenizer.BERTokenizer.tokenizer.token_to_id", "bert_tokenizer.BERTokenizer.tokenizer.token_to_id", "os.environ.get", "os.path.exists", "transformers.AutoTokenizer.from_pretrained", "transformers.AutoTokenizer.from_pretrained.save_pretrained", "version.startswith", "os.path.join", "tokenizers.BertWordPieceTokenizer", "version.startswith", "os.getcwd", "os.path.join", "os.path.join", "tokenizers.ByteLevelBPETokenizer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.exists", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["def", "__init__", "(", "self", ",", "version", ")", ":", "\n", "# download vocab files", "\n", "        ", "cache", "=", "os", ".", "path", ".", "join", "(", "os", ".", "environ", ".", "get", "(", "\"CACHE_DIR\"", ",", "os", ".", "getcwd", "(", ")", ")", ",", "\".vector_cache\"", ")", "\n", "vocab_dir", "=", "os", ".", "path", ".", "join", "(", "cache", ",", "f\"{version}\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "vocab_dir", ")", ":", "\n", "            ", "pretrained_tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "version", ")", "\n", "pretrained_tokenizer", ".", "save_pretrained", "(", "vocab_dir", ")", "\n", "\n", "", "if", "\"uncased\"", "in", "version", "or", "\"cased\"", "not", "in", "version", ":", "\n", "            ", "lowercase", "=", "True", "# roberta, electra, bert-base-uncased", "\n", "", "else", ":", "\n", "            ", "lowercase", "=", "False", "# bert-cased", "\n", "", "if", "version", ".", "startswith", "(", "\"bert\"", ")", "or", "\"electra\"", "in", "version", ":", "\n", "            ", "vocab_path", "=", "os", ".", "path", ".", "join", "(", "vocab_dir", ",", "\"vocab.txt\"", ")", "\n", "self", ".", "tokenizer", "=", "BertWordPieceTokenizer", "(", "vocab_path", ",", "lowercase", "=", "lowercase", ")", "\n", "", "elif", "version", ".", "startswith", "(", "\"roberta\"", ")", ":", "\n", "            ", "vocab_path", "=", "os", ".", "path", ".", "join", "(", "vocab_dir", ",", "\"vocab.json\"", ")", "\n", "merge_path", "=", "os", ".", "path", ".", "join", "(", "vocab_dir", ",", "\"merges.txt\"", ")", "\n", "self", ".", "tokenizer", "=", "ByteLevelBPETokenizer", "(", "vocab_path", ",", "merge_path", ",", "lowercase", "=", "lowercase", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "cls_token", "=", "self", ".", "tokenizer", ".", "_parameters", "[", "\"cls_token\"", "]", "\n", "self", ".", "cls_token_id", "=", "self", ".", "tokenizer", ".", "token_to_id", "(", "self", ".", "cls_token", ")", "\n", "self", ".", "sep_token", "=", "self", ".", "tokenizer", ".", "_parameters", "[", "\"sep_token\"", "]", "\n", "self", ".", "sep_token_id", "=", "self", ".", "tokenizer", ".", "token_to_id", "(", "self", ".", "sep_token", ")", "\n", "self", ".", "pad_token", "=", "self", ".", "tokenizer", ".", "_parameters", "[", "\"pad_token\"", "]", "\n", "self", ".", "pad_token_id", "=", "self", ".", "tokenizer", ".", "token_to_id", "(", "self", ".", "pad_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer._encode": [[53, 59], ["isinstance", "isinstance", "bert_tokenizer.BERTokenizer.tokenizer.encode", "bert_tokenizer.BERTokenizer.tokenizer.encode"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.encode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.encode"], ["", "def", "_encode", "(", "self", ",", "input_", ")", ":", "\n", "        ", "if", "isinstance", "(", "input_", ",", "list", ")", "or", "isinstance", "(", "input_", ",", "tuple", ")", ":", "\n", "            ", "encodes", "=", "self", ".", "tokenizer", ".", "encode", "(", "input_", ",", "is_pretokenized", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "encodes", "=", "self", ".", "tokenizer", ".", "encode", "(", "input_", ")", "\n", "", "return", "encodes", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer.tokenize": [[60, 64], ["bert_tokenizer.BERTokenizer._encode"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer._encode"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "encodes", "=", "self", ".", "_encode", "(", "text", ")", "\n", "tokens", "=", "encodes", ".", "tokens", "[", "1", ":", "-", "1", "]", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer.tokenize_and_lemmatize": [[65, 78], ["bert_tokenizer.BERTokenizer._encode", "stanza.Pipeline", "spacy_stanza.StanzaLanguage", "bert_tokenizer.BERTokenizer.sp_nlp"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer._encode"], ["", "def", "tokenize_and_lemmatize", "(", "self", ",", "text", ",", "lang", "=", "\"en\"", ")", ":", "\n", "        ", "\"\"\"\n        This will be used for matching \n        1) remove cls and sep\n        2) lemmatize \n        \"\"\"", "\n", "if", "BERTokenizer", ".", "sp_nlp", "is", "None", ":", "\n", "            ", "snlp", "=", "stanza", ".", "Pipeline", "(", "lang", "=", "lang", ",", "use_gpu", "=", "True", ",", "tokenize_pretokenized", "=", "True", ")", "\n", "BERTokenizer", ".", "sp_nlp", "=", "StanzaLanguage", "(", "snlp", ")", "\n", "", "encodes", "=", "self", ".", "_encode", "(", "text", ")", "\n", "tokens", "=", "encodes", ".", "tokens", "[", "1", ":", "-", "1", "]", "\n", "norm_tokens", "=", "[", "t", ".", "lemma_", "for", "t", "in", "self", ".", "sp_nlp", "(", "[", "tokens", "]", ")", "]", "\n", "return", "norm_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer.tokenize_with_orig": [[79, 88], ["isinstance", "bert_tokenizer.BERTokenizer._encode"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer._encode"], ["", "def", "tokenize_with_orig", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        Tokenize but return the original chars, this would be helpful for copying operations.\n        \"\"\"", "\n", "# TODO: if text is a list, change accordingly how the offset is computed", "\n", "assert", "isinstance", "(", "text", ",", "str", ")", "\n", "encodes", "=", "self", ".", "_encode", "(", "text", ")", "\n", "orig_tokens", "=", "[", "text", "[", "i", ":", "j", "]", "for", "i", ",", "j", "in", "encodes", ".", "offsets", "[", "1", ":", "-", "1", "]", "]", "\n", "return", "orig_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer.tokenize_and_spacy": [[89, 99], ["bert_tokenizer.BERTokenizer.sp_nlp", "stanza.Pipeline", "spacy_stanza.StanzaLanguage", "bert_tokenizer.BERTokenizer.tokenizer.encode"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.encode"], ["", "def", "tokenize_and_spacy", "(", "self", ",", "text", ",", "lang", "=", "\"en\"", ")", ":", "\n", "        ", "\"\"\"\n        Keep meta information from spacy, used for matching\n        \"\"\"", "\n", "if", "BERTokenizer", ".", "sp_nlp", "is", "None", ":", "\n", "            ", "snlp", "=", "stanza", ".", "Pipeline", "(", "lang", "=", "lang", ",", "use_gpu", "=", "True", ",", "tokenize_pretokenized", "=", "True", ")", "\n", "BERTokenizer", ".", "sp_nlp", "=", "StanzaLanguage", "(", "snlp", ")", "\n", "\n", "", "tokens", "=", "self", ".", "tokenizer", ".", "encode", "(", "text", ")", ".", "tokens", "[", "1", ":", "-", "1", "]", "\n", "return", "self", ".", "sp_nlp", "(", "[", "tokens", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer.check_bert_input_seq": [[100, 105], ["None"], "methods", ["None"], ["", "def", "check_bert_input_seq", "(", "self", ",", "toks", ")", ":", "\n", "        ", "if", "toks", "[", "0", "]", "==", "self", ".", "cls_token_id", "and", "toks", "[", "-", "1", "]", "==", "self", ".", "sep_token_id", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer.pieces_to_words": [[106, 120], ["piece.startswith", "words.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "", "def", "pieces_to_words", "(", "self", ",", "pieces", ")", ":", "\n", "        ", "\"\"\"\n        TODO: use general variable of prefix\n        \"\"\"", "\n", "words", "=", "[", "]", "\n", "cur_word", "=", "None", "\n", "for", "piece", "in", "pieces", ":", "\n", "            ", "if", "piece", ".", "startswith", "(", "\"##\"", ")", ":", "\n", "                ", "cur_word", "=", "cur_word", "+", "piece", "[", "2", ":", "]", "\n", "", "else", ":", "\n", "                ", "if", "cur_word", "is", "not", "None", ":", "\n", "                    ", "words", ".", "append", "(", "cur_word", ")", "\n", "", "cur_word", "=", "piece", "\n", "", "", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer.text_to_ids": [[121, 131], ["bert_tokenizer.BERTokenizer._encode"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer._encode"], ["", "def", "text_to_ids", "(", "self", ",", "sent", ",", "cls", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        This function is primarily used convert text to bpe token ids\n        \"\"\"", "\n", "encs", "=", "self", ".", "_encode", "(", "sent", ")", "\n", "if", "cls", ":", "\n", "            ", "return", "encs", ".", "ids", "\n", "", "else", ":", "\n", "            ", "assert", "encs", ".", "tokens", "[", "0", "]", "==", "self", ".", "cls_token", "\n", "return", "encs", ".", "ids", "[", "1", ":", "]", "# remove CLS", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer.pad_sequence_for_bert_batch": [[132, 157], ["max", "toks_ids.append", "att_masks.append", "padded_item_toks.index", "tok_type_lists.append", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "", "def", "pad_sequence_for_bert_batch", "(", "self", ",", "tokens_lists", ")", ":", "\n", "        ", "\"\"\"\n        1) Pad with pad token\n        2) Generate token_type_list\n        \"\"\"", "\n", "pad_id", "=", "self", ".", "pad_token_id", "\n", "max_len", "=", "max", "(", "[", "len", "(", "it", ")", "for", "it", "in", "tokens_lists", "]", ")", "\n", "assert", "max_len", "<=", "512", "\n", "toks_ids", "=", "[", "]", "\n", "att_masks", "=", "[", "]", "\n", "tok_type_lists", "=", "[", "]", "\n", "for", "item_toks", "in", "tokens_lists", ":", "\n", "            ", "padded_item_toks", "=", "item_toks", "+", "[", "pad_id", "]", "*", "(", "max_len", "-", "len", "(", "item_toks", ")", ")", "\n", "toks_ids", ".", "append", "(", "padded_item_toks", ")", "\n", "\n", "_att_mask", "=", "[", "1", "]", "*", "len", "(", "item_toks", ")", "+", "[", "0", "]", "*", "(", "max_len", "-", "len", "(", "item_toks", ")", ")", "\n", "att_masks", ".", "append", "(", "_att_mask", ")", "\n", "\n", "first_sep_id", "=", "padded_item_toks", ".", "index", "(", "self", ".", "sep_token_id", ")", "\n", "assert", "first_sep_id", ">", "0", "\n", "_tok_type_list", "=", "[", "0", "]", "*", "(", "first_sep_id", "+", "1", ")", "+", "[", "1", "]", "*", "(", "\n", "max_len", "-", "first_sep_id", "-", "1", "\n", ")", "\n", "tok_type_lists", ".", "append", "(", "_tok_type_list", ")", "\n", "", "return", "toks_ids", ",", "att_masks", ",", "tok_type_lists", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.MultiHeadedAttention.__init__": [[149, 159], ["torch.Module.__init__", "transformer.clones", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.clones"], ["    ", "def", "__init__", "(", "self", ",", "h", ",", "d_model", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "\"Take in model size and number of heads.\"", "\n", "super", "(", "MultiHeadedAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "d_model", "%", "h", "==", "0", "\n", "# We assume d_v always equals d_k", "\n", "self", ".", "d_k", "=", "d_model", "//", "h", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "linears", "=", "clones", "(", "lambda", ":", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", ",", "4", ")", "\n", "self", ".", "attn", "=", "None", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.MultiHeadedAttention.forward": [[160, 181], ["query.size", "transformer.attention", "x.squeeze.squeeze.transpose().contiguous().view", "mask.unsqueeze.unsqueeze.unsqueeze", "l().view().transpose", "query.dim", "x.squeeze.squeeze.squeeze", "zip", "x.squeeze.squeeze.transpose().contiguous", "l().view", "x.squeeze.squeeze.transpose", "l"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.attention"], ["", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"Implements Figure 2\"", "\n", "if", "mask", "is", "not", "None", ":", "\n", "# Same mask applied to all h heads.", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "", "nbatches", "=", "query", ".", "size", "(", "0", ")", "\n", "\n", "# 1) Do all the linear projections in batch from d_model => h x d_k", "\n", "query", ",", "key", ",", "value", "=", "[", "\n", "l", "(", "x", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", ",", "self", ".", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "for", "l", ",", "x", "in", "zip", "(", "self", ".", "linears", ",", "(", "query", ",", "key", ",", "value", ")", ")", "\n", "]", "\n", "\n", "# 2) Apply attention on all the projected vectors in batch.", "\n", "x", ",", "self", ".", "attn", "=", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "mask", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "\n", "# 3) \"Concat\" using a view and apply a final linear.", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", "*", "self", ".", "d_k", ")", "\n", "if", "query", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "x", "=", "x", ".", "squeeze", "(", "1", ")", "\n", "", "return", "self", ".", "linears", "[", "-", "1", "]", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.MultiHeadedAttentionWithRelations.__init__": [[185, 195], ["torch.Module.__init__", "transformer.clones", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.clones"], ["    ", "def", "__init__", "(", "self", ",", "h", ",", "d_model", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "\"Take in model size and number of heads.\"", "\n", "super", "(", "MultiHeadedAttentionWithRelations", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "d_model", "%", "h", "==", "0", "\n", "# We assume d_v always equals d_k", "\n", "self", ".", "d_k", "=", "d_model", "//", "h", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "linears", "=", "clones", "(", "lambda", ":", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", ",", "4", ")", "\n", "self", ".", "attn", "=", "None", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.MultiHeadedAttentionWithRelations.forward": [[196, 224], ["query.size", "transformer.attention_with_relations", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "mask.unsqueeze.unsqueeze.unsqueeze", "l().view().transpose", "zip", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "l().view", "x.transpose().contiguous().view.transpose().contiguous().view.transpose", "l"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.attention_with_relations"], ["", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "relation_k", ",", "relation_v", ",", "mask", "=", "None", ")", ":", "\n", "# query shape: [batch, num queries, d_model]", "\n", "# key shape: [batch, num kv, d_model]", "\n", "# value shape: [batch, num kv, d_model]", "\n", "# relations_k shape: [batch, num queries, num kv, (d_model // h)]", "\n", "# relations_v shape: [batch, num queries, num kv, (d_model // h)]", "\n", "# mask shape: [batch, num queries, num kv]", "\n", "        ", "if", "mask", "is", "not", "None", ":", "\n", "# Same mask applied to all h heads.", "\n", "# mask shape: [batch, 1, num queries, num kv]", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "", "nbatches", "=", "query", ".", "size", "(", "0", ")", "\n", "\n", "# 1) Do all the linear projections in batch from d_model => h x d_k", "\n", "query", ",", "key", ",", "value", "=", "[", "\n", "l", "(", "x", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", ",", "self", ".", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "for", "l", ",", "x", "in", "zip", "(", "self", ".", "linears", ",", "(", "query", ",", "key", ",", "value", ")", ")", "\n", "]", "\n", "\n", "# 2) Apply attention on all the projected vectors in batch.", "\n", "# x shape: [batch, heads, num queries, depth]", "\n", "x", ",", "self", ".", "attn", "=", "attention_with_relations", "(", "\n", "query", ",", "key", ",", "value", ",", "relation_k", ",", "relation_v", ",", "mask", "=", "mask", ",", "dropout", "=", "self", ".", "dropout", "\n", ")", "\n", "\n", "# 3) \"Concat\" using a view and apply a final linear.", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", "*", "self", ".", "d_k", ")", "\n", "return", "self", ".", "linears", "[", "-", "1", "]", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.RATEncoder.__init__": [[230, 238], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "layer", "transformer.clones", "range"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.clones"], ["def", "__init__", "(", "self", ",", "layer", ",", "layer_size", ",", "N", ",", "tie_layers", "=", "False", ")", ":", "\n", "        ", "super", "(", "RATEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "tie_layers", ":", "\n", "            ", "self", ".", "layer", "=", "layer", "(", ")", "\n", "self", ".", "layers", "=", "[", "self", ".", "layer", "for", "_", "in", "range", "(", "N", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "layers", "=", "clones", "(", "layer", ",", "N", ")", "\n", "", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "layer_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.RATEncoder.forward": [[241, 246], ["transformer.RATEncoder.norm", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "relation", ",", "mask", ")", ":", "\n", "        ", "\"Pass the input (and mask) through each layer in turn.\"", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "relation", ",", "mask", ")", "\n", "", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.Encoder.__init__": [[252, 260], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "layer", "transformer.clones", "range"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.clones"], ["def", "__init__", "(", "self", ",", "layer", ",", "layer_size", ",", "N", ",", "tie_layers", "=", "False", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "tie_layers", ":", "\n", "            ", "self", ".", "layer", "=", "layer", "(", ")", "\n", "self", ".", "layers", "=", "[", "self", ".", "layer", "for", "_", "in", "range", "(", "N", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "layers", "=", "clones", "(", "layer", ",", "N", ")", "\n", "", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "layer_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.Encoder.forward": [[261, 266], ["transformer.Encoder.norm", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "\"Pass the input (and mask) through each layer in turn.\"", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "mask", ")", "\n", "", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.SublayerConnection.__init__": [[275, 279], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "size", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "SublayerConnection", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "size", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.SublayerConnection.forward": [[280, 283], ["transformer.SublayerConnection.dropout", "sublayer", "transformer.SublayerConnection.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "sublayer", ")", ":", "\n", "        ", "\"Apply residual connection to any sublayer with the same size.\"", "\n", "return", "x", "+", "self", ".", "dropout", "(", "sublayer", "(", "self", ".", "norm", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.EncoderLayer.__init__": [[289, 295], ["torch.Module.__init__", "transformer.clones", "transformer.SublayerConnection"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.clones"], ["def", "__init__", "(", "self", ",", "size", ",", "self_attn", ",", "feed_forward", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "EncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "self_attn", "\n", "self", ".", "feed_forward", "=", "feed_forward", "\n", "self", ".", "sublayer", "=", "clones", "(", "lambda", ":", "SublayerConnection", "(", "size", ",", "dropout", ")", ",", "2", ")", "\n", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.EncoderLayer.forward": [[296, 300], ["transformer.EncoderLayer.self_attn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "\"Follow Figure 1 (left) for connections.\"", "\n", "x", "=", "self", ".", "sublayer", "[", "0", "]", "(", "x", ",", "lambda", "x", ":", "self", ".", "self_attn", "(", "x", ",", "x", ",", "x", ",", "mask", ")", ")", "\n", "return", "self", ".", "sublayer", "[", "1", "]", "(", "x", ",", "self", ".", "feed_forward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.RATEncoderLayer.__init__": [[306, 315], ["torch.Module.__init__", "transformer.clones", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "transformer.SublayerConnection"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.clones"], ["def", "__init__", "(", "self", ",", "size", ",", "self_attn", ",", "feed_forward", ",", "num_relation_kinds", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "RATEncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "self_attn", "\n", "self", ".", "feed_forward", "=", "feed_forward", "\n", "self", ".", "sublayer", "=", "clones", "(", "lambda", ":", "SublayerConnection", "(", "size", ",", "dropout", ")", ",", "2", ")", "\n", "self", ".", "size", "=", "size", "\n", "\n", "self", ".", "relation_k_emb", "=", "nn", ".", "Embedding", "(", "num_relation_kinds", ",", "self", ".", "self_attn", ".", "d_k", ")", "\n", "self", ".", "relation_v_emb", "=", "nn", ".", "Embedding", "(", "num_relation_kinds", ",", "self", ".", "self_attn", ".", "d_k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.RATEncoderLayer.forward": [[316, 325], ["transformer.RATEncoderLayer.relation_k_emb", "transformer.RATEncoderLayer.relation_v_emb", "transformer.RATEncoderLayer.self_attn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "relation", ",", "mask", ")", ":", "\n", "        ", "\"Follow Figure 1 (left) for connections.\"", "\n", "relation_k", "=", "self", ".", "relation_k_emb", "(", "relation", ")", "\n", "relation_v", "=", "self", ".", "relation_v_emb", "(", "relation", ")", "\n", "\n", "x", "=", "self", ".", "sublayer", "[", "0", "]", "(", "\n", "x", ",", "lambda", "x", ":", "self", ".", "self_attn", "(", "x", ",", "x", ",", "x", ",", "relation_k", ",", "relation_v", ",", "mask", ")", "\n", ")", "\n", "return", "self", ".", "sublayer", "[", "1", "]", "(", "x", ",", "self", ".", "feed_forward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.PositionwiseFeedForward.__init__": [[331, 336], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_ff", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "PositionwiseFeedForward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_1", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_ff", ")", "\n", "self", ".", "w_2", "=", "nn", ".", "Linear", "(", "d_ff", ",", "d_model", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.PositionwiseFeedForward.forward": [[337, 339], ["transformer.PositionwiseFeedForward.w_2", "transformer.PositionwiseFeedForward.dropout", "torch.relu", "torch.relu", "torch.relu", "transformer.PositionwiseFeedForward.w_1"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.relu", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.relu", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.relu"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "w_2", "(", "self", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "w_1", "(", "x", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.PositionalEncoding.__init__": [[345, 359], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "pe.unsqueeze.unsqueeze.unsqueeze", "transformer.PositionalEncoding.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "dropout", ",", "max_len", "=", "5000", ")", ":", "\n", "        ", "super", "(", "PositionalEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "# Compute the positional encodings once in log space.", "\n", "pe", "=", "torch", ".", "zeros", "(", "max_len", ",", "d_model", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "\n", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ")", "*", "-", "(", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", "\n", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "pe", "=", "pe", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "register_buffer", "(", "\"pe\"", ",", "pe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.PositionalEncoding.forward": [[360, 363], ["transformer.PositionalEncoding.dropout", "x.size"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "pe", "[", ":", ",", ":", "x", ".", "size", "(", "1", ")", "]", "\n", "return", "self", ".", "dropout", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.Decoder.__init__": [[369, 373], ["torch.Module.__init__", "transformer.clones", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.clones"], ["def", "__init__", "(", "self", ",", "layer", ",", "N", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "clones", "(", "layer", ",", "N", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "self", ".", "layers", "[", "0", "]", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.Decoder.forward": [[374, 378], ["transformer.Decoder.norm", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "memory", ",", "src_mask", ",", "tgt_mask", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "memory", ",", "src_mask", ",", "tgt_mask", ")", "\n", "", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.DecoderLayer.__init__": [[384, 391], ["torch.Module.__init__", "transformer.clones", "transformer.SublayerConnection"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.clones"], ["def", "__init__", "(", "self", ",", "size", ",", "self_attn", ",", "src_attn", ",", "feed_forward", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "DecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "self_attn", "=", "self_attn", "\n", "self", ".", "src_attn", "=", "src_attn", "\n", "self", ".", "feed_forward", "=", "feed_forward", "\n", "self", ".", "sublayer", "=", "clones", "(", "lambda", ":", "SublayerConnection", "(", "size", ",", "dropout", ")", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.DecoderLayer.forward": [[392, 398], ["transformer.DecoderLayer.self_attn", "transformer.DecoderLayer.src_attn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "memory", ",", "src_mask", ",", "tgt_mask", ")", ":", "\n", "        ", "\"Follow Figure 1 (right) for connections.\"", "\n", "m", "=", "memory", "\n", "x", "=", "self", ".", "sublayer", "[", "0", "]", "(", "x", ",", "lambda", "x", ":", "self", ".", "self_attn", "(", "x", ",", "x", ",", "x", ",", "tgt_mask", ")", ")", "\n", "x", "=", "self", ".", "sublayer", "[", "1", "]", "(", "x", ",", "lambda", "x", ":", "self", ".", "src_attn", "(", "x", ",", "m", ",", "m", ",", "src_mask", ")", ")", "\n", "return", "self", ".", "sublayer", "[", "2", "]", "(", "x", ",", "self", ".", "feed_forward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.EncoderLayerWithLatentRelations.__init__": [[401, 455], ["torch.Module.__init__", "transformer.clones", "len", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "transformer.SublayerConnection"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.clones"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "size", ",", "\n", "self_attn", ",", "\n", "feed_forward", ",", "\n", "relations2id", ",", "\n", "num_latent_relations", "=", "3", ",", "\n", "dropout", "=", "0.1", ",", "\n", "enable_latent_relations", "=", "False", ",", "\n", "combine_latent_relations", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "self_attn", "\n", "self", ".", "feed_forward", "=", "feed_forward", "\n", "self", ".", "sublayer", "=", "clones", "(", "lambda", ":", "SublayerConnection", "(", "size", ",", "dropout", ")", ",", "2", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "relations2id", "=", "relations2id", "\n", "num_relation_kinds", "=", "len", "(", "relations2id", ")", "\n", "\n", "self", ".", "default_qq", "=", "\"q:q-default\"", "\n", "self", ".", "default_qq_id", "=", "self", ".", "relations2id", "[", "self", ".", "default_qq", "]", "\n", "self", ".", "relation_k_emb", "=", "nn", ".", "Embedding", "(", "num_relation_kinds", ",", "self", ".", "self_attn", ".", "d_k", ")", "\n", "self", ".", "relation_v_emb", "=", "nn", ".", "Embedding", "(", "num_relation_kinds", ",", "self", ".", "self_attn", ".", "d_k", ")", "\n", "\n", "self", ".", "enable_latent_relations", "=", "enable_latent_relations", "\n", "self", ".", "combine_latent_relations", "=", "combine_latent_relations", "\n", "if", "enable_latent_relations", ":", "\n", "            ", "num_qc_relations", "=", "num_latent_relations", "\n", "num_qt_relations", "=", "num_latent_relations", "\n", "num_cq_relations", "=", "num_latent_relations", "\n", "num_tq_relations", "=", "num_latent_relations", "\n", "self", ".", "latent_qc_relation_k_emb", "=", "nn", ".", "Embedding", "(", "\n", "num_qc_relations", ",", "self", ".", "self_attn", ".", "d_k", "\n", ")", "\n", "self", ".", "latent_qc_relation_v_emb", "=", "nn", ".", "Embedding", "(", "\n", "num_qc_relations", ",", "self", ".", "self_attn", ".", "d_k", "\n", ")", "\n", "self", ".", "latent_cq_relation_k_emb", "=", "nn", ".", "Embedding", "(", "\n", "num_cq_relations", ",", "self", ".", "self_attn", ".", "d_k", "\n", ")", "\n", "self", ".", "latent_cq_relation_v_emb", "=", "nn", ".", "Embedding", "(", "\n", "num_cq_relations", ",", "self", ".", "self_attn", ".", "d_k", "\n", ")", "\n", "self", ".", "latent_qt_relation_k_emb", "=", "nn", ".", "Embedding", "(", "\n", "num_qt_relations", ",", "self", ".", "self_attn", ".", "d_k", "\n", ")", "\n", "self", ".", "latent_qt_relation_v_emb", "=", "nn", ".", "Embedding", "(", "\n", "num_qt_relations", ",", "self", ".", "self_attn", ".", "d_k", "\n", ")", "\n", "self", ".", "latent_tq_relation_k_emb", "=", "nn", ".", "Embedding", "(", "\n", "num_tq_relations", ",", "self", ".", "self_attn", ".", "d_k", "\n", ")", "\n", "self", ".", "latent_tq_relation_v_emb", "=", "nn", ".", "Embedding", "(", "\n", "num_tq_relations", ",", "self", ".", "self_attn", ".", "d_k", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.EncoderLayerWithLatentRelations.encode_merge_relations": [[457, 522], ["qc_relation.size", "torch.LongTensor().fill_().to", "torch.LongTensor().fill_().to", "torch.LongTensor().fill_().to", "torch.LongTensor().fill_().to", "torch.LongTensor().fill_().to", "torch.LongTensor().fill_().to", "torch.LongTensor().fill_().to", "torch.LongTensor().fill_().to", "torch.LongTensor().fill_().to", "transformer.EncoderLayerWithLatentRelations.relation_k_emb", "transformer.EncoderLayerWithLatentRelations.relation_v_emb", "transformer.EncoderLayerWithLatentRelations.relation_k_emb", "transformer.EncoderLayerWithLatentRelations.relation_v_emb", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["", "", "def", "encode_merge_relations", "(", "self", ",", "relations", ")", ":", "\n", "        ", "ct_relation", ",", "qc_relation", ",", "cq_relation", ",", "qt_relation", ",", "tq_relation", "=", "(", "\n", "relations", ".", "ct_relation", ",", "\n", "relations", ".", "qc_relation", ",", "\n", "relations", ".", "cq_relation", ",", "\n", "relations", ".", "qt_relation", ",", "\n", "relations", ".", "tq_relation", ",", "\n", ")", "\n", "\n", "_device", "=", "ct_relation", ".", "device", "\n", "# qq relation", "\n", "q_len", "=", "qc_relation", ".", "size", "(", "0", ")", "\n", "qq_relation_t", "=", "(", "\n", "torch", ".", "LongTensor", "(", "q_len", ",", "q_len", ")", ".", "fill_", "(", "self", ".", "default_qq_id", ")", ".", "to", "(", "_device", ")", "\n", ")", "\n", "qq_relation_k", "=", "self", ".", "relation_k_emb", "(", "qq_relation_t", ")", "\n", "qq_relation_v", "=", "self", ".", "relation_v_emb", "(", "qq_relation_t", ")", "\n", "\n", "# ct relation", "\n", "ct_relation_k", "=", "self", ".", "relation_k_emb", "(", "ct_relation", ")", "\n", "ct_relation_v", "=", "self", ".", "relation_v_emb", "(", "ct_relation", ")", "\n", "\n", "# qc relation", "\n", "qc_relation_k", "=", "torch", ".", "einsum", "(", "\n", "\"qcf,fl->qcl\"", ",", "[", "qc_relation", ",", "self", ".", "latent_qc_relation_k_emb", ".", "weight", "]", "\n", ")", "\n", "qc_relation_v", "=", "torch", ".", "einsum", "(", "\n", "\"qcf,fl->qcl\"", ",", "[", "qc_relation", ",", "self", ".", "latent_qc_relation_v_emb", ".", "weight", "]", "\n", ")", "\n", "\n", "# cq relation", "\n", "cq_relation_k", "=", "torch", ".", "einsum", "(", "\n", "\"cqf,fl->cql\"", ",", "[", "cq_relation", ",", "self", ".", "latent_cq_relation_k_emb", ".", "weight", "]", "\n", ")", "\n", "cq_relation_v", "=", "torch", ".", "einsum", "(", "\n", "\"cqf,fl->cql\"", ",", "[", "cq_relation", ",", "self", ".", "latent_cq_relation_v_emb", ".", "weight", "]", "\n", ")", "\n", "\n", "# qt relation", "\n", "qt_relation_k", "=", "torch", ".", "einsum", "(", "\n", "\"qtf,fl->qtl\"", ",", "[", "qt_relation", ",", "self", ".", "latent_qt_relation_k_emb", ".", "weight", "]", "\n", ")", "\n", "qt_relation_v", "=", "torch", ".", "einsum", "(", "\n", "\"qtf,fl->qtl\"", ",", "[", "qt_relation", ",", "self", ".", "latent_qt_relation_v_emb", ".", "weight", "]", "\n", ")", "\n", "\n", "# cq relation", "\n", "tq_relation_k", "=", "torch", ".", "einsum", "(", "\n", "\"tqf,fl->tql\"", ",", "[", "tq_relation", ",", "self", ".", "latent_tq_relation_k_emb", ".", "weight", "]", "\n", ")", "\n", "tq_relation_v", "=", "torch", ".", "einsum", "(", "\n", "\"tqf,fl->tql\"", ",", "[", "tq_relation", ",", "self", ".", "latent_tq_relation_v_emb", ".", "weight", "]", "\n", ")", "\n", "\n", "q_relation_k", "=", "torch", ".", "cat", "(", "[", "qq_relation_k", ",", "qc_relation_k", ",", "qt_relation_k", "]", ",", "1", ")", "\n", "q_relation_v", "=", "torch", ".", "cat", "(", "[", "qq_relation_v", ",", "qc_relation_v", ",", "qt_relation_v", "]", ",", "1", ")", "\n", "\n", "q_ct_relation_k", "=", "torch", ".", "cat", "(", "[", "cq_relation_k", ",", "tq_relation_k", "]", ",", "0", ")", "\n", "q_ct_relation_v", "=", "torch", ".", "cat", "(", "[", "cq_relation_v", ",", "tq_relation_v", "]", ",", "0", ")", "\n", "qct_relation_k", "=", "torch", ".", "cat", "(", "[", "q_ct_relation_k", ",", "ct_relation_k", "]", ",", "1", ")", "\n", "qct_relation_v", "=", "torch", ".", "cat", "(", "[", "q_ct_relation_v", ",", "ct_relation_v", "]", ",", "1", ")", "\n", "\n", "relation_k", "=", "torch", ".", "cat", "(", "[", "q_relation_k", ",", "qct_relation_k", "]", ",", "0", ")", "\n", "relation_v", "=", "torch", ".", "cat", "(", "[", "q_relation_v", ",", "qct_relation_v", "]", ",", "0", ")", "\n", "return", "relation_k", ",", "relation_v", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.EncoderLayerWithLatentRelations.forward": [[523, 551], ["transformer.EncoderLayerWithLatentRelations.encode_merge_relations", "transformer.EncoderLayerWithLatentRelations.relation_k_emb", "transformer.EncoderLayerWithLatentRelations.relation_v_emb", "transformer.EncoderLayerWithLatentRelations.unsqueeze", "transformer.EncoderLayerWithLatentRelations.unsqueeze", "transformer.EncoderLayerWithLatentRelations.relation_k_emb", "transformer.EncoderLayerWithLatentRelations.relation_v_emb", "transformer.EncoderLayerWithLatentRelations.self_attn"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.EncoderLayerWithLatentRelations.encode_merge_relations"], ["", "def", "forward", "(", "self", ",", "x", ",", "relations", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        x: 1 * len * feat_size\n        ct_relation: ct_len * ct_len\n        \"\"\"", "\n", "if", "self", ".", "enable_latent_relations", ":", "\n", "            ", "relation_k_latent", ",", "relation_v_latent", "=", "self", ".", "encode_merge_relations", "(", "\n", "relations", "\n", ")", "\n", "if", "self", ".", "combine_latent_relations", ":", "\n", "                ", "relation_k_fixed", "=", "self", ".", "relation_k_emb", "(", "relations", ".", "predefined_relation", ")", "\n", "relation_v_fixed", "=", "self", ".", "relation_v_emb", "(", "relations", ".", "predefined_relation", ")", "\n", "\n", "relation_k", "=", "relation_k_fixed", "+", "relation_k_latent", "\n", "relation_v", "=", "relation_v_fixed", "+", "relation_v_latent", "\n", "", "else", ":", "\n", "                ", "relation_k", "=", "relation_k_latent", "\n", "relation_v", "=", "relation_v_latent", "\n", "", "", "else", ":", "\n", "            ", "relation_k", "=", "self", ".", "relation_k_emb", "(", "relations", ".", "predefined_relation", ")", "\n", "relation_v", "=", "self", ".", "relation_v_emb", "(", "relations", ".", "predefined_relation", ")", "\n", "\n", "", "relation_k", ",", "relation_v", "=", "relation_k", ".", "unsqueeze", "(", "0", ")", ",", "relation_v", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "x", "=", "self", ".", "sublayer", "[", "0", "]", "(", "\n", "x", ",", "lambda", "x", ":", "self", ".", "self_attn", "(", "x", ",", "x", ",", "x", ",", "relation_k", ",", "relation_v", ",", "mask", ")", "\n", ")", "\n", "return", "self", ".", "sublayer", "[", "1", "]", "(", "x", ",", "self", ".", "feed_forward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.PointerWithLatentRelations.__init__": [[554, 605], ["torch.Module.__init__", "len", "transformer.clones", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.clones"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "hidden_size", ",", "\n", "relations2id", ",", "\n", "dropout", "=", "0.1", ",", "\n", "enable_latent_relations", "=", "False", ",", "\n", "num_latent_relations", "=", "None", ",", "\n", "combine_latent_relations", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "relations2id", "=", "relations2id", "\n", "num_relation_kinds", "=", "len", "(", "relations2id", ")", "\n", "self", ".", "linears", "=", "clones", "(", "lambda", ":", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ",", "3", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "self", ".", "default_qq", "=", "\"q:q-default\"", "\n", "self", ".", "default_qq_id", "=", "self", ".", "relations2id", "[", "self", ".", "default_qq", "]", "\n", "self", ".", "relation_k_emb", "=", "nn", ".", "Embedding", "(", "num_relation_kinds", ",", "hidden_size", ")", "\n", "self", ".", "relation_v_emb", "=", "nn", ".", "Embedding", "(", "num_relation_kinds", ",", "hidden_size", ")", "\n", "\n", "self", ".", "enable_latent_relations", "=", "enable_latent_relations", "\n", "self", ".", "combine_latent_relations", "=", "combine_latent_relations", "\n", "if", "enable_latent_relations", ":", "\n", "            ", "num_qc_relations", "=", "num_latent_relations", "\n", "num_qt_relations", "=", "num_latent_relations", "\n", "num_cq_relations", "=", "num_latent_relations", "\n", "num_tq_relations", "=", "num_latent_relations", "\n", "self", ".", "latent_qc_relation_k_emb", "=", "nn", ".", "Embedding", "(", "\n", "num_qc_relations", ",", "self", ".", "hidden_size", "\n", ")", "\n", "self", ".", "latent_qc_relation_v_emb", "=", "nn", ".", "Embedding", "(", "\n", "num_qc_relations", ",", "self", ".", "hidden_size", "\n", ")", "\n", "self", ".", "latent_cq_relation_k_emb", "=", "nn", ".", "Embedding", "(", "\n", "num_cq_relations", ",", "self", ".", "hidden_size", "\n", ")", "\n", "self", ".", "latent_cq_relation_v_emb", "=", "nn", ".", "Embedding", "(", "\n", "num_cq_relations", ",", "self", ".", "hidden_size", "\n", ")", "\n", "self", ".", "latent_qt_relation_k_emb", "=", "nn", ".", "Embedding", "(", "\n", "num_qt_relations", ",", "self", ".", "hidden_size", "\n", ")", "\n", "self", ".", "latent_qt_relation_v_emb", "=", "nn", ".", "Embedding", "(", "\n", "num_qt_relations", ",", "self", ".", "hidden_size", "\n", ")", "\n", "self", ".", "latent_tq_relation_k_emb", "=", "nn", ".", "Embedding", "(", "\n", "num_tq_relations", ",", "self", ".", "hidden_size", "\n", ")", "\n", "self", ".", "latent_tq_relation_v_emb", "=", "nn", ".", "Embedding", "(", "\n", "num_tq_relations", ",", "self", ".", "hidden_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.PointerWithLatentRelations.encode_merge_column_relations": [[607, 627], ["transformer.PointerWithLatentRelations.relation_k_emb", "transformer.PointerWithLatentRelations.relation_v_emb", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "encode_merge_column_relations", "(", "self", ",", "relations", ")", ":", "\n", "        ", "ct_relation", ",", "qc_relation", "=", "(", "relations", ".", "ct_relation", ",", "relations", ".", "qc_relation", ")", "\n", "\n", "# sc relation", "\n", "t_base", "=", "relations", ".", "c_len", "\n", "sc_relation", "=", "ct_relation", "[", ":", ",", ":", "t_base", "]", "\n", "sc_relation_k", "=", "self", ".", "relation_k_emb", "(", "sc_relation", ")", "\n", "sc_relation_v", "=", "self", ".", "relation_v_emb", "(", "sc_relation", ")", "\n", "\n", "# qc relation", "\n", "qc_relation_k", "=", "torch", ".", "einsum", "(", "\n", "\"qcf,fl->qcl\"", ",", "[", "qc_relation", ",", "self", ".", "latent_qc_relation_k_emb", ".", "weight", "]", "\n", ")", "\n", "qc_relation_v", "=", "torch", ".", "einsum", "(", "\n", "\"qcf,fl->qcl\"", ",", "[", "qc_relation", ",", "self", ".", "latent_qc_relation_v_emb", ".", "weight", "]", "\n", ")", "\n", "\n", "mc_relation_k", "=", "torch", ".", "cat", "(", "[", "qc_relation_k", ",", "sc_relation_k", "]", ",", "0", ")", "\n", "mc_relation_v", "=", "torch", ".", "cat", "(", "[", "qc_relation_v", ",", "sc_relation_v", "]", ",", "0", ")", "\n", "return", "mc_relation_k", ",", "mc_relation_v", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.PointerWithLatentRelations.encode_merge_table_relations": [[628, 648], ["transformer.PointerWithLatentRelations.relation_k_emb", "transformer.PointerWithLatentRelations.relation_v_emb", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "encode_merge_table_relations", "(", "self", ",", "relations", ")", ":", "\n", "        ", "ct_relation", ",", "qt_relation", "=", "(", "relations", ".", "ct_relation", ",", "relations", ".", "qt_relation", ")", "\n", "\n", "# st relation", "\n", "t_base", "=", "relations", ".", "c_len", "\n", "st_relation", "=", "ct_relation", "[", ":", ",", "t_base", ":", "]", "\n", "st_relation_k", "=", "self", ".", "relation_k_emb", "(", "st_relation", ")", "\n", "st_relation_v", "=", "self", ".", "relation_v_emb", "(", "st_relation", ")", "\n", "\n", "# qt relation", "\n", "qt_relation_k", "=", "torch", ".", "einsum", "(", "\n", "\"qtf,fl->qtl\"", ",", "[", "qt_relation", ",", "self", ".", "latent_qt_relation_k_emb", ".", "weight", "]", "\n", ")", "\n", "qt_relation_v", "=", "torch", ".", "einsum", "(", "\n", "\"qtf,fl->qtl\"", ",", "[", "qt_relation", ",", "self", ".", "latent_qt_relation_v_emb", ".", "weight", "]", "\n", ")", "\n", "\n", "mt_relation_k", "=", "torch", ".", "cat", "(", "[", "qt_relation_k", ",", "st_relation_k", "]", ",", "0", ")", "\n", "mt_relation_v", "=", "torch", ".", "cat", "(", "[", "qt_relation_v", ",", "st_relation_v", "]", ",", "0", ")", "\n", "return", "mt_relation_k", ",", "mt_relation_v", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.PointerWithLatentRelations.get_fixed_column_relation": [[649, 656], ["transformer.PointerWithLatentRelations.relation_k_emb", "transformer.PointerWithLatentRelations.relation_v_emb"], "methods", ["None"], ["", "def", "get_fixed_column_relation", "(", "self", ",", "relations", ")", ":", "\n", "        ", "c_base", "=", "relations", ".", "q_len", "\n", "t_base", "=", "relations", ".", "q_len", "+", "+", "relations", ".", "c_len", "\n", "mc_relation", "=", "relations", ".", "predefined_relation", "[", ":", ",", "c_base", ":", "t_base", "]", "# 1 * len * len", "\n", "relation_k", "=", "self", ".", "relation_k_emb", "(", "mc_relation", ")", "\n", "relation_v", "=", "self", ".", "relation_v_emb", "(", "mc_relation", ")", "\n", "return", "relation_k", ",", "relation_v", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.PointerWithLatentRelations.get_fixed_table_relation": [[657, 663], ["transformer.PointerWithLatentRelations.relation_k_emb", "transformer.PointerWithLatentRelations.relation_v_emb"], "methods", ["None"], ["", "def", "get_fixed_table_relation", "(", "self", ",", "relations", ")", ":", "\n", "        ", "t_base", "=", "relations", ".", "q_len", "+", "+", "relations", ".", "c_len", "\n", "mc_relation", "=", "relations", ".", "predefined_relation", "[", ":", ",", "t_base", ":", "]", "\n", "relation_k", "=", "self", ".", "relation_k_emb", "(", "mc_relation", ")", "\n", "relation_v", "=", "self", ".", "relation_v_emb", "(", "mc_relation", ")", "\n", "return", "relation_k", ",", "relation_v", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.PointerWithLatentRelations.get_latent_relation": [[664, 669], ["transformer.PointerWithLatentRelations.encode_merge_column_relations", "transformer.PointerWithLatentRelations.encode_merge_table_relations"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.PointerWithLatentRelations.encode_merge_column_relations", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.PointerWithLatentRelations.encode_merge_table_relations"], ["", "def", "get_latent_relation", "(", "self", ",", "relations", ",", "kind", ")", ":", "\n", "        ", "if", "kind", "==", "\"column\"", ":", "\n", "            ", "return", "self", ".", "encode_merge_column_relations", "(", "relations", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "encode_merge_table_relations", "(", "relations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.PointerWithLatentRelations.get_fixed_relation": [[670, 675], ["transformer.PointerWithLatentRelations.get_fixed_column_relation", "transformer.PointerWithLatentRelations.get_fixed_table_relation"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.PointerWithLatentRelations.get_fixed_column_relation", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.PointerWithLatentRelations.get_fixed_table_relation"], ["", "", "def", "get_fixed_relation", "(", "self", ",", "relations", ",", "kind", ")", ":", "\n", "        ", "if", "kind", "==", "\"column\"", ":", "\n", "            ", "return", "self", ".", "get_fixed_column_relation", "(", "relations", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "get_fixed_table_relation", "(", "relations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.PointerWithLatentRelations.forward": [[676, 703], ["query.size", "transformer.attention_with_relations", "transformer.PointerWithLatentRelations.get_latent_relation", "transformer.PointerWithLatentRelations.get_fixed_relation", "l().view().transpose", "relation_k.unsqueeze", "relation_v.unsqueeze", "transformer.PointerWithLatentRelations.get_fixed_relation", "zip", "l().view", "l"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.attention_with_relations", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.PointerWithLatentRelations.get_latent_relation", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.PointerWithLatentRelations.get_fixed_relation", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.PointerWithLatentRelations.get_fixed_relation"], ["", "", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "relations", ",", "kind", "=", "\"column\"", ")", ":", "\n", "        ", "if", "self", ".", "enable_latent_relations", ":", "\n", "            ", "relation_k", ",", "relation_v", "=", "self", ".", "get_latent_relation", "(", "relations", ",", "kind", ")", "\n", "\n", "if", "self", ".", "combine_latent_relations", ":", "\n", "                ", "relation_k_fixed", ",", "relation_v_fixed", "=", "self", ".", "get_fixed_relation", "(", "\n", "relations", ",", "kind", "\n", ")", "\n", "relation_k", "=", "relation_k", "+", "relation_k_fixed", "\n", "relation_v", "=", "relation_v", "+", "relation_v_fixed", "\n", "", "", "else", ":", "\n", "            ", "relation_k", ",", "relation_v", "=", "self", ".", "get_fixed_relation", "(", "relations", ",", "kind", ")", "\n", "\n", "", "nbatches", "=", "query", ".", "size", "(", "0", ")", "\n", "query", ",", "key", ",", "value", "=", "[", "\n", "l", "(", "x", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "1", ",", "self", ".", "hidden_size", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "for", "l", ",", "x", "in", "zip", "(", "self", ".", "linears", ",", "(", "query", ",", "key", ",", "value", ")", ")", "\n", "]", "\n", "\n", "assert", "nbatches", "==", "1", "# TODO, support batching", "\n", "relation_k", ",", "relation_v", "=", "relation_k", ".", "unsqueeze", "(", "0", ")", ",", "relation_v", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "_", ",", "self", ".", "attn", "=", "attention_with_relations", "(", "\n", "query", ",", "key", ",", "value", ",", "relation_k", ",", "relation_v", ",", "mask", "=", "None", ",", "dropout", "=", "self", ".", "dropout", "\n", ")", "\n", "\n", "return", "self", ".", "attn", "[", "0", ",", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.relative_attention_logits": [[15, 43], ["torch.matmul", "torch.matmul", "torch.matmul", "query.permute", "relation.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.permute", "key.transpose", "math.sqrt"], "function", ["None"], ["def", "relative_attention_logits", "(", "query", ",", "key", ",", "relation", ")", ":", "\n", "# We can't reuse the same logic as tensor2tensor because we don't share relation vectors across the batch.", "\n", "# In this version, relation vectors are shared across heads.", "\n", "# query: [batch, heads, num queries, depth].", "\n", "# key: [batch, heads, num kvs, depth].", "\n", "# relation: [batch, num queries, num kvs, depth].", "\n", "\n", "# qk_matmul is [batch, heads, num queries, num kvs]", "\n", "    ", "qk_matmul", "=", "torch", ".", "matmul", "(", "query", ",", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "# q_t is [batch, num queries, heads, depth]", "\n", "q_t", "=", "query", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "# r_t is [batch, num queries, depth, num kvs]", "\n", "r_t", "=", "relation", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "\n", "#   [batch, num queries, heads, depth]", "\n", "# * [batch, num queries, depth, num kvs]", "\n", "# = [batch, num queries, heads, num kvs]", "\n", "# For each batch and query, we have a query vector per head.", "\n", "# We take its dot product with the relation vector for each kv.", "\n", "q_tr_t_matmul", "=", "torch", ".", "matmul", "(", "q_t", ",", "r_t", ")", "\n", "\n", "# qtr_t_matmul_t is [batch, heads, num queries, num kvs]", "\n", "q_tr_tmatmul_t", "=", "q_tr_t_matmul", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "# [batch, heads, num queries, num kvs]", "\n", "return", "(", "qk_matmul", "+", "q_tr_tmatmul_t", ")", "/", "math", ".", "sqrt", "(", "query", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.relative_attention_values": [[74, 95], ["torch.matmul", "torch.matmul", "torch.matmul", "weight.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.permute"], "function", ["None"], ["", "def", "relative_attention_values", "(", "weight", ",", "value", ",", "relation", ")", ":", "\n", "# In this version, relation vectors are shared across heads.", "\n", "# weight: [batch, heads, num queries, num kvs].", "\n", "# value: [batch, heads, num kvs, depth].", "\n", "# relation: [batch, num queries, num kvs, depth].", "\n", "\n", "# wv_matmul is [batch, heads, num queries, depth]", "\n", "    ", "wv_matmul", "=", "torch", ".", "matmul", "(", "weight", ",", "value", ")", "\n", "\n", "# w_t is [batch, num queries, heads, num kvs]", "\n", "w_t", "=", "weight", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "#   [batch, num queries, heads, num kvs]", "\n", "# * [batch, num queries, num kvs, depth]", "\n", "# = [batch, num queries, heads, depth]", "\n", "w_tr_matmul", "=", "torch", ".", "matmul", "(", "w_t", ",", "relation", ")", "\n", "\n", "# w_tr_matmul_t is [batch, heads, num queries, depth]", "\n", "w_tr_matmul_t", "=", "w_tr_matmul", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "return", "wv_matmul", "+", "w_tr_matmul_t", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.clones": [[98, 100], ["torch.ModuleList", "module_fn", "range"], "function", ["None"], ["", "def", "clones", "(", "module_fn", ",", "N", ")", ":", "\n", "    ", "return", "nn", ".", "ModuleList", "(", "[", "module_fn", "(", ")", "for", "_", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.attention": [[102, 113], ["query.size", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "scores.masked_fill.masked_fill", "dropout", "torch.matmul", "torch.matmul", "torch.matmul", "key.transpose"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax"], ["", "def", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ",", "dropout", "=", "None", ")", ":", "\n", "    ", "\"Compute 'Scaled Dot Product Attention'\"", "\n", "d_k", "=", "query", ".", "size", "(", "-", "1", ")", "\n", "scores", "=", "torch", ".", "matmul", "(", "query", ",", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "d_k", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "scores", "=", "scores", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", "\n", "", "p_attn", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "        ", "p_attn", "=", "dropout", "(", "p_attn", ")", "\n", "# return torch.matmul(p_attn, value), scores.squeeze(1).squeeze(1)", "\n", "", "return", "torch", ".", "matmul", "(", "p_attn", ",", "value", ")", ",", "p_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.sparse_attention": [[115, 131], ["query.size", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "scores.masked_fill.masked_fill", "entmax.sparsemax", "dropout", "torch.matmul", "torch.matmul", "torch.matmul", "key.transpose", "entmax.entmax15"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size"], ["", "def", "sparse_attention", "(", "query", ",", "key", ",", "value", ",", "alpha", ",", "mask", "=", "None", ",", "dropout", "=", "None", ")", ":", "\n", "    ", "\"Use sparse activation function\"", "\n", "d_k", "=", "query", ".", "size", "(", "-", "1", ")", "\n", "scores", "=", "torch", ".", "matmul", "(", "query", ",", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "d_k", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "scores", "=", "scores", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", "\n", "", "if", "alpha", "==", "2", ":", "\n", "        ", "p_attn", "=", "entmax", ".", "sparsemax", "(", "scores", ",", "-", "1", ")", "\n", "", "elif", "alpha", "==", "1.5", ":", "\n", "        ", "p_attn", "=", "entmax", ".", "entmax15", "(", "scores", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "if", "dropout", "is", "not", "None", ":", "\n", "        ", "p_attn", "=", "dropout", "(", "p_attn", ")", "\n", "# return torch.matmul(p_attn, value), scores.squeeze(1).squeeze(1)", "\n", "", "return", "torch", ".", "matmul", "(", "p_attn", ",", "value", ")", ",", "p_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.attention_with_relations": [[133, 145], ["query.size", "transformer.relative_attention_logits", "torch.softmax", "scores.masked_fill.masked_fill", "dropout", "transformer.relative_attention_values"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.relative_attention_logits", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.transformer.relative_attention_values"], ["", "def", "attention_with_relations", "(", "\n", "query", ",", "key", ",", "value", ",", "relation_k", ",", "relation_v", ",", "mask", "=", "None", ",", "dropout", "=", "None", "\n", ")", ":", "\n", "    ", "\"Compute 'Scaled Dot Product Attention'\"", "\n", "d_k", "=", "query", ".", "size", "(", "-", "1", ")", "\n", "scores", "=", "relative_attention_logits", "(", "query", ",", "key", ",", "relation_k", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "scores", "=", "scores", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", "\n", "", "p_attn_orig", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "        ", "p_attn", "=", "dropout", "(", "p_attn_orig", ")", "\n", "", "return", "relative_attention_values", "(", "p_attn", ",", "value", ",", "relation_v", ")", ",", "p_attn_orig", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.Embedder.tokenize": [[21, 25], ["None"], "methods", ["None"], ["    ", "@", "abc", ".", "abstractmethod", "\n", "def", "tokenize", "(", "self", ",", "sentence", ")", ":", "\n", "        ", "\"\"\"Given a string, return a list of tokens suitable for lookup.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.Embedder.untokenize": [[26, 30], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "untokenize", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"Undo tokenize.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.Embedder.lookup": [[31, 37], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "lookup", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\"Given a token, return a vector embedding if token is in vocabulary.\n\n        If token is not in the vocabulary, then return None.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.Embedder.contains": [[38, 41], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "contains", "(", "self", ",", "token", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.Embedder.to": [[42, 46], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "\"\"\"Transfer the pretrained embeddings to the given device.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.GloVe.__init__": [[50, 58], ["os.path.join", "torchtext.vocab.GloVe", "os.environ.get", "os.getcwd"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get"], ["    ", "def", "__init__", "(", "self", ",", "kind", ",", "lemmatize", "=", "False", ")", ":", "\n", "        ", "cache", "=", "os", ".", "path", ".", "join", "(", "os", ".", "environ", ".", "get", "(", "\"CACHE_DIR\"", ",", "os", ".", "getcwd", "(", ")", ")", ",", "\".vector_cache\"", ")", "\n", "self", ".", "glove", "=", "torchtext", ".", "vocab", ".", "GloVe", "(", "name", "=", "kind", ",", "cache", "=", "cache", ")", "\n", "self", ".", "dim", "=", "self", ".", "glove", ".", "dim", "\n", "self", ".", "vectors", "=", "self", ".", "glove", ".", "vectors", "\n", "self", ".", "lemmatize", "=", "lemmatize", "\n", "\n", "self", ".", "sp_nlp", "=", "None", "# lazy initialization", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.GloVe.tokenize": [[59, 70], ["embedders.GloVe.sp_nlp", "stanza.Pipeline", "spacy_stanza.StanzaLanguage", "tok.lemma_.lower", "tok.text.lower"], "methods", ["None"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "# might be better to keep the Token object to serve string matching", "\n", "        ", "if", "self", ".", "sp_nlp", "is", "None", ":", "\n", "# self.sp_nlp = spacy.load(\"en_core_web_sm\")", "\n", "            ", "snlp", "=", "stanza", ".", "Pipeline", "(", "lang", "=", "\"en\"", ",", "use_gpu", "=", "True", ")", "\n", "self", ".", "sp_nlp", "=", "StanzaLanguage", "(", "snlp", ")", "\n", "", "tokens", "=", "self", ".", "sp_nlp", "(", "text", ")", "\n", "if", "self", ".", "lemmatize", ":", "\n", "            ", "return", "[", "tok", ".", "lemma_", ".", "lower", "(", ")", "for", "tok", "in", "tokens", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "tok", ".", "text", ".", "lower", "(", ")", "for", "tok", "in", "tokens", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.GloVe.tokenize_for_copying": [[71, 75], ["embedders.GloVe.tokenize"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEncPreproc.tokenize"], ["", "", "def", "tokenize_for_copying", "(", "self", ",", "text", ")", ":", "\n", "        ", "tokens", "=", "self", ".", "tokenize", "(", "text", ")", "\n", "tokens_for_copying", "=", "tokens", "# TODO, change this", "\n", "return", "tokens", ",", "tokens_for_copying", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.GloVe.untokenize": [[76, 78], ["None"], "methods", ["None"], ["", "def", "untokenize", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "return", "\" \"", ".", "join", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.GloVe.lookup": [[79, 84], ["embedders.GloVe.glove.stoi.get"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get"], ["", "def", "lookup", "(", "self", ",", "token", ")", ":", "\n", "        ", "i", "=", "self", ".", "glove", ".", "stoi", ".", "get", "(", "token", ")", "\n", "if", "i", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "return", "self", ".", "vectors", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.GloVe.contains": [[85, 87], ["None"], "methods", ["None"], ["", "def", "contains", "(", "self", ",", "token", ")", ":", "\n", "        ", "return", "token", "in", "self", ".", "glove", ".", "stoi", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.GloVe.to": [[88, 90], ["embedders.GloVe.vectors.to"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "vectors", "=", "self", ".", "vectors", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.__init__": [[94, 108], ["os.path.join", "os.path.join", "os.path.exists", "os.environ.get", "embedders.BaiduEmbedder.load_stored_vectors", "os.path.join", "embedders.BaiduEmbedder.load_vector", "torch.Tensor", "embedders.BaiduEmbedder.save_vectors", "os.getcwd"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.exists", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.load_stored_vectors", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.load_vector", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.save_vectors"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "cache", "=", "os", ".", "path", ".", "join", "(", "os", ".", "environ", ".", "get", "(", "\"CACHE_DIR\"", ",", "os", ".", "getcwd", "(", ")", ")", ",", "\".vector_cache\"", ")", "\n", "ch_w2v_path", "=", "os", ".", "path", ".", "join", "(", "cache", ",", "\"sgns.baidubaike.bigram-char.pkl\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "ch_w2v_path", ")", ":", "\n", "            ", "self", ".", "id2w", ",", "self", ".", "w2id", ",", "self", ".", "vectors", ",", "self", ".", "dim", "=", "self", ".", "load_stored_vectors", "(", "\n", "ch_w2v_path", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raw_ch_w2v_path", "=", "os", ".", "path", ".", "join", "(", "cache", ",", "\"sgns.baidubaike.bigram-char\"", ")", "\n", "self", ".", "id2w", ",", "self", ".", "w2id", ",", "_vectors", ",", "self", ".", "dim", "=", "self", ".", "load_vector", "(", "raw_ch_w2v_path", ")", "\n", "self", ".", "vectors", "=", "torch", ".", "Tensor", "(", "_vectors", ")", "\n", "self", ".", "save_vectors", "(", "ch_w2v_path", ")", "\n", "\n", "", "self", ".", "sp_nlp", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.load_stored_vectors": [[109, 113], ["open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load"], ["", "def", "load_stored_vectors", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "ret", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.save_vectors": [[114, 117], ["open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.dump"], ["", "def", "save_vectors", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "[", "self", ".", "id2w", ",", "self", ".", "w2id", ",", "self", ".", "vectors", ",", "self", ".", "dim", "]", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.load_vector": [[118, 137], ["open", "len", "line.rstrip().split", "numpy.asarray", "vectors.append", "id2w.append", "enumerate", "line.rstrip().split", "map", "line.rstrip", "float", "line.rstrip"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "", "def", "load_vector", "(", "self", ",", "path", ")", ":", "\n", "        ", "id2w", "=", "[", "]", "\n", "vectors", "=", "[", "]", "\n", "num_words", ",", "dim", "=", "None", ",", "None", "\n", "with", "open", "(", "path", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"ignore\"", ")", "as", "f", ":", "\n", "            ", "first_line", "=", "True", "\n", "for", "line", "in", "f", ":", "\n", "                ", "if", "first_line", ":", "\n", "                    ", "first_line", "=", "False", "\n", "items", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", ")", "\n", "num_words", ",", "dim", "=", "map", "(", "int", ",", "items", ")", "\n", "continue", "\n", "", "tokens", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "_vec", "=", "np", ".", "asarray", "(", "[", "float", "(", "x", ")", "for", "x", "in", "tokens", "[", "1", ":", "]", "]", ")", "\n", "vectors", ".", "append", "(", "_vec", ")", "\n", "id2w", ".", "append", "(", "tokens", "[", "0", "]", ")", "\n", "", "", "assert", "len", "(", "vectors", ")", "==", "num_words", "\n", "w2id", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "enumerate", "(", "id2w", ")", "}", "\n", "return", "id2w", ",", "w2id", ",", "vectors", ",", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.tokenize": [[138, 144], ["embedders.BaiduEmbedder.sp_nlp", "stanza.Pipeline", "spacy_stanza.StanzaLanguage"], "methods", ["None"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "if", "self", ".", "sp_nlp", "is", "None", ":", "\n", "            ", "snlp", "=", "stanza", ".", "Pipeline", "(", "lang", "=", "\"zh\"", ",", "use_gpu", "=", "False", ")", "\n", "self", ".", "sp_nlp", "=", "StanzaLanguage", "(", "snlp", ")", "\n", "", "tokens", "=", "self", ".", "sp_nlp", "(", "text", ")", "\n", "return", "[", "token", ".", "lemma_", "for", "token", "in", "tokens", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.tokenize_for_copying": [[145, 148], ["embedders.BaiduEmbedder.tokenize"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEncPreproc.tokenize"], ["", "def", "tokenize_for_copying", "(", "self", ",", "text", ")", ":", "\n", "        ", "tokens", "=", "self", ".", "tokenize", "(", "text", ")", "\n", "return", "tokens", ",", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.untokenize": [[149, 151], ["None"], "methods", ["None"], ["", "def", "untokenize", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "return", "\" \"", ".", "join", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.lookup": [[152, 158], ["None"], "methods", ["None"], ["", "def", "lookup", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "token", "in", "self", ".", "w2id", ":", "\n", "            ", "ind", "=", "self", ".", "w2id", "[", "token", "]", "\n", "return", "self", ".", "vectors", "[", "ind", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.contains": [[159, 161], ["None"], "methods", ["None"], ["", "", "def", "contains", "(", "self", ",", "token", ")", ":", "\n", "        ", "return", "token", "in", "self", ".", "w2id", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to": [[162, 164], ["embedders.BaiduEmbedder.vectors.to"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "vectors", "=", "self", ".", "vectors", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.TencentEmbedder.__init__": [[168, 182], ["os.path.join", "os.path.join", "os.path.exists", "os.environ.get", "embedders.TencentEmbedder.load_stored_vectors", "os.path.join", "embedders.TencentEmbedder.load_vector", "torch.Tensor", "embedders.TencentEmbedder.save_vectors", "os.getcwd"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.exists", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.load_stored_vectors", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.load_vector", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.save_vectors"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "cache", "=", "os", ".", "path", ".", "join", "(", "os", ".", "environ", ".", "get", "(", "\"CACHE_DIR\"", ",", "os", ".", "getcwd", "(", ")", ")", ",", "\".vector_cache\"", ")", "\n", "ch_w2v_path", "=", "os", ".", "path", ".", "join", "(", "cache", ",", "\"filtered_tencent.pkl\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "ch_w2v_path", ")", ":", "\n", "            ", "self", ".", "id2w", ",", "self", ".", "w2id", ",", "self", ".", "vectors", ",", "self", ".", "dim", "=", "self", ".", "load_stored_vectors", "(", "\n", "ch_w2v_path", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raw_ch_w2v_path", "=", "os", ".", "path", ".", "join", "(", "cache", ",", "\"filtered_tencent.txt\"", ")", "\n", "self", ".", "id2w", ",", "self", ".", "w2id", ",", "_vectors", ",", "self", ".", "dim", "=", "self", ".", "load_vector", "(", "raw_ch_w2v_path", ")", "\n", "self", ".", "vectors", "=", "torch", ".", "Tensor", "(", "_vectors", ")", "\n", "self", ".", "save_vectors", "(", "ch_w2v_path", ")", "\n", "\n", "", "self", ".", "sp_nlp", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.VanillaEmbeddings.__init__": [[185, 194], ["super().__init__", "torch.nn.Embedding", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "vocab", ",", "embedder", ",", "emb_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "embedder", "=", "embedder", "\n", "self", ".", "emb_size", "=", "emb_size", "\n", "\n", "self", ".", "embedding", "=", "torch", ".", "nn", ".", "Embedding", "(", "\n", "num_embeddings", "=", "len", "(", "self", ".", "vocab", ")", ",", "embedding_dim", "=", "emb_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.VanillaEmbeddings.forward_unbatched": [[196, 200], ["torch.LongTensor().to", "embedders.VanillaEmbeddings.embedding", "embedders.VanillaEmbeddings.vocab.index", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["", "def", "forward_unbatched", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "tok_ids", "=", "[", "self", ".", "vocab", ".", "index", "(", "t", ")", "for", "t", "in", "tokens", "]", "\n", "tok_ids_t", "=", "torch", ".", "LongTensor", "(", "tok_ids", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "return", "self", ".", "embedding", "(", "tok_ids_t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.VanillaEmbeddings.forward": [[201, 203], ["embedders.VanillaEmbeddings.forward_unbatched"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.NoOpUpdate.forward_unbatched"], ["", "def", "forward", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "return", "self", ".", "forward_unbatched", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.LookupEmbeddings.__init__": [[215, 249], ["super().__init__", "torch.nn.Embedding", "enumerate", "logger.info", "torch.stack", "torch.nn.Parameter", "set", "len", "embedders.LookupEmbeddings.embedder.contains", "init_embed_list.append", "init_embed_list.append", "embedders.LookupEmbeddings.embedder.lookup"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.contains", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup"], ["def", "__init__", "(", "self", ",", "device", ",", "vocab", ",", "embedder", ",", "emb_size", ",", "learnable_words", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "embedder", "=", "embedder", "\n", "self", ".", "emb_size", "=", "emb_size", "\n", "\n", "# trainable embeddings", "\n", "self", ".", "embedding", "=", "torch", ".", "nn", ".", "Embedding", "(", "\n", "num_embeddings", "=", "len", "(", "self", ".", "vocab", ")", ",", "embedding_dim", "=", "emb_size", "\n", ")", "\n", "\n", "# init embeddings with pretrained_embeddings", "\n", "if", "self", ".", "embedder", ":", "\n", "            ", "assert", "emb_size", "==", "self", ".", "embedder", ".", "dim", "\n", "\n", "init_embed_list", "=", "[", "]", "\n", "count_not_in_embed", "=", "0", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "self", ".", "vocab", ")", ":", "\n", "                ", "if", "self", ".", "embedder", ".", "contains", "(", "word", ")", ":", "\n", "                    ", "init_embed_list", ".", "append", "(", "self", ".", "embedder", ".", "lookup", "(", "word", ")", ")", "\n", "", "else", ":", "\n", "                    ", "count_not_in_embed", "+=", "1", "\n", "init_embed_list", ".", "append", "(", "self", ".", "embedding", ".", "weight", "[", "i", "]", ")", "\n", "", "", "logger", ".", "info", "(", "f\"{count_not_in_embed} words not in fixed embedder\"", ")", "\n", "\n", "init_embed_weight", "=", "torch", ".", "stack", "(", "init_embed_list", ",", "0", ")", "\n", "self", ".", "embedding", ".", "weight", "=", "nn", ".", "Parameter", "(", "init_embed_weight", ")", "\n", "\n", "# init learnable words", "\n", "", "if", "learnable_words", "is", "None", ":", "\n", "            ", "self", ".", "learnable_words", "=", "set", "(", ")", "# empty set", "\n", "", "else", ":", "\n", "            ", "self", ".", "learnable_words", "=", "learnable_words", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.LookupEmbeddings.forward_unbatched_3d": [[250, 279], ["torch.cat", "numpy.cumsum", "torch.tensor().unsqueeze", "embedders.LookupEmbeddings.embedding", "emb.transpose.transpose.transpose", "embs.append", "torch.tensor", "embedders.LookupEmbeddings.vocab.indices"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.indices"], ["", "", "def", "forward_unbatched_3d", "(", "self", ",", "token_lists", ")", ":", "\n", "# token_lists: list of list of lists", "\n", "# [batch, num descs, desc length]", "\n", "# - each list contains tokens", "\n", "# - each list corresponds to a column name, table name, etc.", "\n", "\n", "        ", "embs", "=", "[", "]", "\n", "for", "tokens", "in", "token_lists", ":", "\n", "# token_indices shape: batch (=1) x length", "\n", "            ", "token_indices", "=", "torch", ".", "tensor", "(", "\n", "self", ".", "vocab", ".", "indices", "(", "tokens", ")", ",", "device", "=", "self", ".", "_device", "\n", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# emb shape: batch (=1) x length x word_emb_size", "\n", "emb", "=", "self", ".", "embedding", "(", "token_indices", ")", "\n", "\n", "# emb shape: desc length x batch (=1) x word_emb_size", "\n", "emb", "=", "emb", ".", "transpose", "(", "0", ",", "1", ")", "\n", "embs", ".", "append", "(", "emb", ")", "\n", "\n", "# all_embs shape: sum of desc lengths x batch (=1) x word_emb_size", "\n", "", "all_embs", "=", "torch", ".", "cat", "(", "embs", ",", "dim", "=", "0", ")", "\n", "\n", "# boundaries shape: num of descs + 1", "\n", "# If desc lengths are [2, 3, 4],", "\n", "# then boundaries is [0, 2, 5, 9]", "\n", "boundaries", "=", "np", ".", "cumsum", "(", "[", "0", "]", "+", "[", "emb", ".", "shape", "[", "0", "]", "for", "emb", "in", "embs", "]", ")", "\n", "\n", "return", "all_embs", ",", "boundaries", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.LookupEmbeddings._compute_boundaries": [[280, 291], ["numpy.cumsum", "len"], "methods", ["None"], ["", "def", "_compute_boundaries", "(", "self", ",", "token_lists", ")", ":", "\n", "# token_lists: list of list of lists", "\n", "# [batch, num descs, desc length]", "\n", "# - each list contains tokens", "\n", "# - each list corresponds to a column name, table name, etc.", "\n", "        ", "boundaries", "=", "[", "\n", "np", ".", "cumsum", "(", "[", "0", "]", "+", "[", "len", "(", "token_list", ")", "for", "token_list", "in", "token_lists_for_item", "]", ")", "\n", "for", "token_lists_for_item", "in", "token_lists", "\n", "]", "\n", "\n", "return", "boundaries", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.LookupEmbeddings._embed_token": [[292, 302], ["embedders.LookupEmbeddings.embedder.lookup", "embedders.LookupEmbeddings.to", "embedders.LookupEmbeddings.embedder.contains", "embedders.LookupEmbeddings.vocab.index"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.contains", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["", "def", "_embed_token", "(", "self", ",", "token", ",", "batch_idx", "=", "None", ")", ":", "\n", "        ", "if", "(", "\n", "(", "token", "in", "self", ".", "learnable_words", ")", "\n", "or", "(", "self", ".", "embedder", "is", "None", ")", "\n", "or", "(", "not", "self", ".", "embedder", ".", "contains", "(", "token", ")", ")", "\n", ")", ":", "\n", "            ", "return", "self", ".", "embedding", ".", "weight", "[", "self", ".", "vocab", ".", "index", "(", "token", ")", "]", "\n", "", "else", ":", "\n", "            ", "emb", "=", "self", ".", "embedder", ".", "lookup", "(", "token", ")", "\n", "return", "emb", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.LookupEmbeddings.forward_batched_3d": [[303, 321], ["tensor2struct.utils.batched_sequence.PackedSequencePlus.from_lists", "all_embs.apply.apply.apply", "embedders.LookupEmbeddings._compute_boundaries", "d.to"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.from_lists", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.apply", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.LookupEmbeddings._compute_boundaries", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["", "", "def", "forward_batched_3d", "(", "self", ",", "token_lists", ")", ":", "\n", "# token_lists: list of list of lists", "\n", "# [batch, num descs, desc length]", "\n", "# - each list contains tokens", "\n", "# - each list corresponds to a column name, table name, etc.", "\n", "# PackedSequencePlus, with shape: [batch, sum of desc lengths, emb_size]", "\n", "        ", "all_embs", "=", "batched_sequence", ".", "PackedSequencePlus", ".", "from_lists", "(", "\n", "lists", "=", "[", "\n", "[", "token", "for", "token_list", "in", "token_lists_for_item", "for", "token", "in", "token_list", "]", "\n", "for", "token_lists_for_item", "in", "token_lists", "\n", "]", ",", "\n", "item_shape", "=", "(", "self", ".", "emb_size", ",", ")", ",", "\n", "device", "=", "self", ".", "_device", ",", "\n", "item_to_tensor", "=", "self", ".", "_embed_token", ",", "\n", ")", "\n", "all_embs", "=", "all_embs", ".", "apply", "(", "lambda", "d", ":", "d", ".", "to", "(", "self", ".", "_device", ")", ")", "\n", "\n", "return", "all_embs", ",", "self", ".", "_compute_boundaries", "(", "token_lists", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.LookupEmbeddings.forward_batched_2d": [[322, 332], ["tensor2struct.utils.batched_sequence.PackedSequencePlus.from_lists", "all_embs.apply.apply.apply", "d.to"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.from_lists", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.apply", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["", "def", "forward_batched_2d", "(", "self", ",", "token_lists", ")", ":", "\n", "        ", "all_embs", "=", "batched_sequence", ".", "PackedSequencePlus", ".", "from_lists", "(", "\n", "lists", "=", "[", "[", "token", "for", "token", "in", "token_list", "]", "for", "token_list", "in", "token_lists", "]", ",", "\n", "item_shape", "=", "(", "self", ".", "emb_size", ",", ")", ",", "\n", "device", "=", "self", ".", "_device", ",", "\n", "item_to_tensor", "=", "self", ".", "_embed_token", ",", "\n", ")", "\n", "all_embs", "=", "all_embs", ".", "apply", "(", "lambda", "d", ":", "d", ".", "to", "(", "self", ".", "_device", ")", ")", "\n", "\n", "return", "all_embs", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.LookupEmbeddings.forward": [[333, 338], ["isinstance", "isinstance", "embedders.LookupEmbeddings.forward_batched_3d", "embedders.LookupEmbeddings.forward_batched_2d"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.LookupEmbeddings.forward_batched_3d", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.LookupEmbeddings.forward_batched_2d"], ["", "def", "forward", "(", "self", ",", "token_lists", ")", ":", "\n", "        ", "if", "isinstance", "(", "token_lists", "[", "0", "]", "[", "0", "]", ",", "list", ")", "or", "isinstance", "(", "token_lists", "[", "0", "]", "[", "0", "]", ",", "tuple", ")", ":", "\n", "            ", "return", "self", ".", "forward_batched_3d", "(", "token_lists", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "forward_batched_2d", "(", "token_lists", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.TransformerEncoder.__init__": [[47, 80], ["super().__init__", "tensor2struct.modules.transformer.Encoder", "rat.TransformerEncoder.parameters", "tensor2struct.modules.transformer.EncoderLayer", "p.dim", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "tensor2struct.modules.transformer.MultiHeadedAttention", "tensor2struct.modules.transformer.PositionwiseFeedForward"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "device", ",", "\n", "num_layers", ",", "\n", "num_heads", ",", "\n", "hidden_size", ",", "\n", "tie_layers", "=", "False", ",", "\n", "ff_size", "=", "None", ",", "\n", "dropout", "=", "0.1", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "\n", "if", "ff_size", "is", "None", ":", "\n", "            ", "ff_size", "=", "hidden_size", "*", "4", "\n", "\n", "", "self", ".", "encoder", "=", "transformer", ".", "Encoder", "(", "\n", "lambda", ":", "transformer", ".", "EncoderLayer", "(", "\n", "hidden_size", ",", "\n", "transformer", ".", "MultiHeadedAttention", "(", "num_heads", ",", "hidden_size", ",", "dropout", ")", ",", "\n", "transformer", ".", "PositionwiseFeedForward", "(", "hidden_size", ",", "ff_size", ",", "dropout", ")", ",", "\n", "dropout", ",", "\n", ")", ",", "\n", "hidden_size", ",", "\n", "num_layers", ",", "\n", "tie_layers", ",", "\n", ")", "\n", "\n", "# init with xavier", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.TransformerEncoder.forward_unbatched": [[81, 91], ["rat.TransformerEncoder.encoder", "ret.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "", "", "def", "forward_unbatched", "(", "self", ",", "embeds", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            embeds: a list of tensors return by Glue layers\n        \"\"\"", "\n", "ret", "=", "[", "]", "\n", "for", "embed", "in", "embeds", ":", "\n", "            ", "enc", "=", "self", ".", "encoder", "(", "embed", ",", "mask", "=", "None", ")", "\n", "ret", ".", "append", "(", "enc", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.TransformerEncoder.forward": [[92, 101], ["get_attn_mask().to", "rat.TransformerEncoder.encoder", "rat.get_attn_mask"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.get_attn_mask"], ["", "def", "forward", "(", "self", ",", "embeds", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            embeds: a pair of tensor and lengths\n        \"\"\"", "\n", "enc_memory", ",", "lengths", "=", "embeds", "\n", "attn_mask", "=", "get_attn_mask", "(", "lengths", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "new_enc_memory", "=", "self", ".", "encoder", "(", "enc_memory", ",", "mask", "=", "attn_mask", ")", "\n", "return", "new_enc_memory", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.TransformerDecoder.__init__": [[103, 134], ["super().__init__", "tensor2struct.modules.transformer.Decoder", "rat.TransformerDecoder.parameters", "tensor2struct.modules.transformer.DecoderLayer", "p.dim", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "tensor2struct.modules.transformer.MultiHeadedAttention", "tensor2struct.modules.transformer.MultiHeadedAttention", "tensor2struct.modules.transformer.PositionwiseFeedForward"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "device", ",", "\n", "num_layers", ",", "\n", "num_heads", ",", "\n", "hidden_size", ",", "\n", "ff_size", "=", "None", ",", "\n", "dropout", "=", "0.1", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "\n", "if", "ff_size", "is", "None", ":", "\n", "            ", "ff_size", "=", "hidden_size", "*", "4", "\n", "\n", "", "self", ".", "decoder", "=", "transformer", ".", "Decoder", "(", "\n", "lambda", ":", "transformer", ".", "DecoderLayer", "(", "\n", "hidden_size", ",", "\n", "transformer", ".", "MultiHeadedAttention", "(", "num_heads", ",", "hidden_size", ",", "dropout", ")", ",", "\n", "transformer", ".", "MultiHeadedAttention", "(", "num_heads", ",", "hidden_size", ",", "dropout", ")", ",", "\n", "transformer", ".", "PositionwiseFeedForward", "(", "hidden_size", ",", "ff_size", ",", "dropout", ")", ",", "\n", "dropout", ",", "\n", ")", ",", "\n", "num_layers", "\n", ")", "\n", "\n", "# init with xavier", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.TransformerDecoder.forward": [[135, 138], ["rat.TransformerDecoder.decoder"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "tgt", ",", "src_memory", ",", "src_mask", ",", "tgt_mask", ")", ":", "\n", "        ", "tgt_enc", "=", "self", ".", "decoder", "(", "tgt", ",", "src_memory", ",", "src_mask", ",", "tgt_mask", ")", "\n", "return", "tgt_enc", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.PadCLS.__init__": [[147, 157], ["super().__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn().to().requires_grad_", "torch.randn().to().requires_grad_", "torch.randn().to().requires_grad_", "torch.randn().to().requires_grad_", "tensor2struct.modules.transformer.PositionalEncoding", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["def", "__init__", "(", "self", ",", "device", ",", "hidden_size", ",", "pos_encode", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "1", ",", "hidden_size", ")", ".", "to", "(", "self", ".", "_device", ")", ".", "requires_grad_", "(", ")", "\n", ")", "\n", "\n", "self", ".", "pos_encode", "=", "pos_encode", "\n", "if", "pos_encode", ":", "\n", "            ", "self", ".", "pos", "=", "transformer", ".", "PositionalEncoding", "(", "hidden_size", ",", "dropout", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.PadCLS.forward_unbatched": [[158, 170], ["range", "len", "embeds.select().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "encs.append", "rat.PadCLS.pos", "embeds.select", "rat.PadCLS.cls_token.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.select"], ["", "", "def", "forward_unbatched", "(", "self", ",", "embeds", ")", ":", "\n", "        ", "\"\"\"\n        Return a list of tensors (with batch size one)\n        \"\"\"", "\n", "encs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "embeds", ".", "lengths", ")", ")", ":", "\n", "            ", "enc", "=", "embeds", ".", "select", "(", "i", ")", ".", "unsqueeze", "(", "0", ")", "\n", "if", "self", ".", "pos_encode", ":", "\n", "                ", "enc", "=", "self", ".", "pos", "(", "enc", ")", "\n", "", "cls_enc", "=", "torch", ".", "cat", "(", "[", "self", ".", "cls_token", ".", "unsqueeze", "(", "0", ")", ",", "enc", "]", ",", "dim", "=", "1", ")", "\n", "encs", ".", "append", "(", "cls_enc", ")", "# batch 1", "\n", "", "return", "encs", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.PadCLS.forward": [[171, 184], ["embeds.pad", "rat.PadCLS.cls_token.unsqueeze().expand", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rat.PadCLS.pos", "len", "len", "rat.PadCLS.cls_token.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.pad", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.expand"], ["", "def", "forward", "(", "self", ",", "embeds", ")", ":", "\n", "        ", "enc_memory", ",", "lengths", "=", "embeds", ".", "pad", "(", "batch_first", "=", "True", ")", "\n", "\n", "# add pos embedding", "\n", "if", "self", ".", "pos_encode", ":", "\n", "            ", "enc_memory", "=", "self", ".", "pos", "(", "enc_memory", ")", "\n", "\n", "# add cls token", "\n", "", "cls_emb", "=", "self", ".", "cls_token", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "len", "(", "lengths", ")", ",", "1", ",", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "lengths", ")", ")", ":", "\n", "            ", "lengths", "[", "i", "]", "=", "lengths", "[", "i", "]", "+", "1", "\n", "", "enc_memory", "=", "torch", ".", "cat", "(", "[", "cls_emb", ",", "enc_memory", "]", ",", "dim", "=", "1", ")", "\n", "return", "enc_memory", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.RAT.__init__": [[187, 226], ["super().__init__", "tensor2struct.modules.transformer.RATEncoder", "encoder_class", "tensor2struct.modules.transformer.MultiHeadedAttentionWithRelations", "tensor2struct.modules.transformer.PositionwiseFeedForward"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "device", ",", "\n", "num_layers", ",", "\n", "num_heads", ",", "\n", "hidden_size", ",", "\n", "relations2id", ",", "\n", "enable_latent_relations", "=", "False", ",", "\n", "num_latent_relations", "=", "None", ",", "\n", "combine_latent_relations", "=", "False", ",", "\n", "tie_layers", "=", "False", ",", "\n", "ff_size", "=", "None", ",", "\n", "dropout", "=", "0.1", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "\n", "if", "ff_size", "is", "None", ":", "\n", "            ", "ff_size", "=", "hidden_size", "*", "4", "\n", "\n", "", "if", "combine_latent_relations", ":", "\n", "            ", "assert", "enable_latent_relations", "\n", "", "encoder_class", "=", "transformer", ".", "EncoderLayerWithLatentRelations", "\n", "self", ".", "encoder", "=", "transformer", ".", "RATEncoder", "(", "\n", "lambda", ":", "encoder_class", "(", "\n", "hidden_size", ",", "\n", "transformer", ".", "MultiHeadedAttentionWithRelations", "(", "\n", "num_heads", ",", "hidden_size", ",", "dropout", "\n", ")", ",", "\n", "transformer", ".", "PositionwiseFeedForward", "(", "hidden_size", ",", "ff_size", ",", "dropout", ")", ",", "\n", "relations2id", ",", "\n", "num_latent_relations", ",", "\n", "enable_latent_relations", "=", "enable_latent_relations", ",", "\n", "combine_latent_relations", "=", "combine_latent_relations", ",", "\n", ")", ",", "\n", "hidden_size", ",", "\n", "num_layers", ",", "\n", "tie_layers", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.RAT.forward_unbatched": [[228, 243], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "enc.transpose.transpose.transpose", "rat.RAT.encoder"], "methods", ["None"], ["", "def", "forward_unbatched", "(", "self", ",", "desc", ",", "q_enc", ",", "c_enc", ",", "t_enc", ",", "relation", ")", ":", "\n", "# enc shape: total len x batch (=1) x recurrent size", "\n", "        ", "enc", "=", "torch", ".", "cat", "(", "(", "q_enc", ",", "c_enc", ",", "t_enc", ")", ",", "dim", "=", "0", ")", "\n", "\n", "# enc shape: batch (=1) x total len x recurrent size", "\n", "enc", "=", "enc", ".", "transpose", "(", "0", ",", "1", ")", "\n", "enc_new", "=", "self", ".", "encoder", "(", "enc", ",", "relation", ",", "mask", "=", "None", ")", "\n", "\n", "c_base", "=", "q_enc", ".", "shape", "[", "0", "]", "\n", "t_base", "=", "q_enc", ".", "shape", "[", "0", "]", "+", "c_enc", ".", "shape", "[", "0", "]", "\n", "q_enc_new", "=", "enc_new", "[", ":", ",", ":", "c_base", "]", "\n", "c_enc_new", "=", "enc_new", "[", ":", ",", "c_base", ":", "t_base", "]", "\n", "t_enc_new", "=", "enc_new", "[", ":", ",", "t_base", ":", "]", "\n", "\n", "return", "q_enc_new", ",", "c_enc_new", ",", "t_enc_new", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.RAT.forward": [[244, 246], ["rat.RAT.forward_unbatched"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.NoOpUpdate.forward_unbatched"], ["", "def", "forward", "(", "self", ",", "descs", ",", "q_enc", ",", "c_enc", ",", "t_enc", ",", "relations", ")", ":", "\n", "        ", "return", "self", ".", "forward_unbatched", "(", "descs", ",", "q_enc", ",", "c_enc", ",", "t_enc", ",", "relations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.AlignmentWithRAT.__init__": [[253, 276], ["super().__init__", "tensor2struct.modules.transformer.PointerWithLatentRelations"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "hidden_size", ",", "\n", "relations2id", ",", "\n", "device", ",", "\n", "enable_latent_relations", "=", "False", ",", "\n", "num_latent_relations", "=", "None", ",", "\n", "dropout", "=", "0.1", ",", "\n", "combine_latent_relations", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "enable_latent_relations", "=", "enable_latent_relations", "\n", "self", ".", "align_attn", "=", "transformer", ".", "PointerWithLatentRelations", "(", "\n", "hidden_size", ",", "\n", "relations2id", ",", "\n", "enable_latent_relations", "=", "enable_latent_relations", ",", "\n", "num_latent_relations", "=", "num_latent_relations", ",", "\n", "combine_latent_relations", "=", "combine_latent_relations", ",", "\n", ")", "\n", "\n", "if", "combine_latent_relations", ":", "\n", "            ", "assert", "enable_latent_relations", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.AlignmentWithRAT.forward_unbatched": [[277, 282], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "rat.AlignmentWithRAT.align_attn", "rat.AlignmentWithRAT.align_attn"], "methods", ["None"], ["", "", "def", "forward_unbatched", "(", "self", ",", "desc", ",", "q_enc", ",", "c_enc", ",", "t_enc", ",", "relation", ")", ":", "\n", "        ", "enc", "=", "torch", ".", "cat", "(", "(", "q_enc", ",", "c_enc", ",", "t_enc", ")", ",", "dim", "=", "1", ")", "\n", "m2c_align_mat", "=", "self", ".", "align_attn", "(", "enc", ",", "c_enc", ",", "c_enc", ",", "relation", ",", "\"column\"", ")", "\n", "m2t_align_mat", "=", "self", ".", "align_attn", "(", "enc", ",", "t_enc", ",", "t_enc", ",", "relation", ",", "\"table\"", ")", "\n", "return", "(", "m2c_align_mat", ",", "m2t_align_mat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.AlignmentWithRAT.forward": [[283, 285], ["rat.AlignmentWithRAT.forward_unbatched"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.NoOpUpdate.forward_unbatched"], ["", "def", "forward", "(", "self", ",", "desc", ",", "q_enc", ",", "c_enc", ",", "t_enc", ",", "relations", ")", ":", "\n", "        ", "return", "self", ".", "forward_unbatched", "(", "desc", ",", "q_enc", ",", "c_enc", ",", "t_enc", ",", "relations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.NoOpUpdate.__init__": [[288, 290], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "hidden_size", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.NoOpUpdate.__call__": [[291, 294], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "desc", ",", "q_enc", ",", "c_enc", ",", "t_enc", ")", ":", "\n", "# return q_enc.transpose(0, 1), c_enc.transpose(0, 1), t_enc.transpose(0, 1)", "\n", "        ", "return", "q_enc", ",", "c_enc", ",", "t_enc", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.NoOpUpdate.forward_unbatched": [[295, 301], ["q_enc.transpose", "c_enc.transpose", "t_enc.transpose"], "methods", ["None"], ["", "def", "forward_unbatched", "(", "self", ",", "desc", ",", "q_enc", ",", "c_enc", ",", "t_enc", ")", ":", "\n", "        ", "\"\"\"\n        The same interface with RAT\n        return: encodings with size: length * embed_size, alignment matrix\n        \"\"\"", "\n", "return", "(", "q_enc", ".", "transpose", "(", "0", ",", "1", ")", ",", "c_enc", ".", "transpose", "(", "0", ",", "1", ")", ",", "t_enc", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.NoOpUpdate.forward": [[302, 304], ["rat.NoOpUpdate.forward_unbatched"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.NoOpUpdate.forward_unbatched"], ["", "def", "forward", "(", "self", ",", "desc", ",", "q_enc", ",", "c_enc", ",", "t_enc", ")", ":", "\n", "        ", "return", "self", ".", "forward_unbatched", "(", "desc", ",", "q_enc", ",", "c_enc", ",", "t_enc", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.clamp": [[12, 16], ["max", "min"], "function", ["None"], ["def", "clamp", "(", "value", ",", "abs_max", ")", ":", "\n", "    ", "value", "=", "max", "(", "-", "abs_max", ",", "value", ")", "\n", "value", "=", "min", "(", "abs_max", ",", "value", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.get_attn_mask": [[18, 25], ["torch.LongTensor().fill_", "torch.LongTensor().fill_", "enumerate", "int", "len", "max", "torch.LongTensor", "torch.LongTensor"], "function", ["None"], ["", "def", "get_attn_mask", "(", "seq_lengths", ")", ":", "\n", "    ", "\"\"\"attention mask for encoder\"\"\"", "\n", "max_length", ",", "batch_size", "=", "int", "(", "max", "(", "seq_lengths", ")", ")", ",", "len", "(", "seq_lengths", ")", "\n", "attn_mask", "=", "torch", ".", "LongTensor", "(", "batch_size", ",", "max_length", ",", "max_length", ")", ".", "fill_", "(", "0", ")", "\n", "for", "batch_idx", ",", "seq_length", "in", "enumerate", "(", "seq_lengths", ")", ":", "\n", "        ", "attn_mask", "[", "batch_idx", ",", ":", "seq_length", ",", ":", "seq_length", "]", "=", "1", "\n", "", "return", "attn_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.get_src_attn_mask": [[26, 33], ["torch.LongTensor().fill_", "torch.LongTensor().fill_", "enumerate", "int", "len", "max", "torch.LongTensor", "torch.LongTensor"], "function", ["None"], ["", "def", "get_src_attn_mask", "(", "seq_lengths", ")", ":", "\n", "    ", "\"\"\"encoder memory attention mask for decoder, second dim is 1 for broadcasting\"\"\"", "\n", "max_length", ",", "batch_size", "=", "int", "(", "max", "(", "seq_lengths", ")", ")", ",", "len", "(", "seq_lengths", ")", "\n", "attn_mask", "=", "torch", ".", "LongTensor", "(", "batch_size", ",", "1", ",", "max_length", ")", ".", "fill_", "(", "0", ")", "\n", "for", "batch_idx", ",", "seq_length", "in", "enumerate", "(", "seq_lengths", ")", ":", "\n", "        ", "attn_mask", "[", "batch_idx", ",", "0", ",", ":", "seq_length", "]", "=", "1", "\n", "", "return", "attn_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.subsequent_mask": [[34, 39], ["numpy.triu().astype", "torch.from_numpy", "torch.from_numpy", "numpy.triu", "numpy.ones"], "function", ["None"], ["", "def", "subsequent_mask", "(", "size", ")", ":", "\n", "    ", "\"Mask out subsequent positions for transformer decoding\"", "\n", "attn_shape", "=", "(", "1", ",", "size", ",", "size", ")", "\n", "subsequent_mask", "=", "np", ".", "triu", "(", "np", ".", "ones", "(", "attn_shape", ")", ",", "k", "=", "1", ")", ".", "astype", "(", "'uint8'", ")", "\n", "return", "torch", ".", "from_numpy", "(", "subsequent_mask", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.make_std_mask": [[40, 45], ["subsequent_mask().type_as", "rat.subsequent_mask", "tgt.size"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.subsequent_mask", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size"], ["", "def", "make_std_mask", "(", "tgt", ",", "pad", ")", ":", "\n", "    ", "\"Create a mask to hide padding and future words.\"", "\n", "tgt_mask", "=", "(", "tgt", "!=", "pad", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "tgt_mask", "=", "tgt_mask", "&", "subsequent_mask", "(", "tgt", ".", "size", "(", "-", "1", ")", ")", ".", "type_as", "(", "tgt_mask", ".", "data", ")", "\n", "return", "tgt_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.parse_hiro.typename": [[6, 8], ["type"], "function", ["None"], ["def", "typename", "(", "x", ")", ":", "\n", "    ", "return", "type", "(", "x", ")", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.parse_hiro.escape": [[9, 20], ["text.replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace", "text.replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace", "repr", "text.replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace", "text.replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace", "text.replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace", "text.replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace", "text.replace().replace().replace().replace().replace().replace().replace().replace.replace().replace", "text.replace().replace().replace().replace().replace().replace().replace().replace.replace"], "function", ["None"], ["", "def", "escape", "(", "text", ")", ":", "\n", "    ", "text", "=", "text", ".", "replace", "(", "'\"'", ",", "'`'", ")", ".", "replace", "(", "'\\''", ",", "'`'", ")", ".", "replace", "(", "' '", ",", "'-SP-'", ")", ".", "replace", "(", "'\\t'", ",", "'-TAB-'", ")", ".", "replace", "(", "'\\n'", ",", "'-NL-'", ")", ".", "replace", "(", "'('", ",", "'-LRB-'", ")", ".", "replace", "(", "')'", ",", "'-RRB-'", ")", ".", "replace", "(", "'|'", ",", "'-BAR-'", ")", "\n", "return", "repr", "(", "text", ")", "[", "1", ":", "-", "1", "]", "if", "text", "else", "'-NONE-'", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.parse_hiro.makestr": [[21, 59], ["isinstance", "parse_hiro.typename", "ast.iter_fields", "isinstance", "parse_hiro.makestr", "isinstance", "parse_hiro.makestr", "isinstance", "parse_hiro.escape", "parse_hiro.escape", "str", "str", "parse_hiro.typename"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.lang.util.typename", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.parse_hiro.makestr", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.parse_hiro.makestr", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.lang.util.escape", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.lang.util.escape", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.lang.util.typename"], ["", "def", "makestr", "(", "node", ")", ":", "\n", "\n", "#if node is None or isinstance(node, ast.Pass):", "\n", "#    return ''", "\n", "\n", "    ", "if", "isinstance", "(", "node", ",", "ast", ".", "AST", ")", ":", "\n", "        ", "n", "=", "0", "\n", "nodename", "=", "typename", "(", "node", ")", "\n", "s", "=", "'('", "+", "nodename", "\n", "for", "chname", ",", "chval", "in", "ast", ".", "iter_fields", "(", "node", ")", ":", "\n", "            ", "chstr", "=", "makestr", "(", "chval", ")", "\n", "if", "chstr", ":", "\n", "                ", "s", "+=", "' ('", "+", "chname", "+", "' '", "+", "chstr", "+", "')'", "\n", "n", "+=", "1", "\n", "", "", "if", "not", "n", ":", "\n", "            ", "s", "+=", "' -'", "+", "nodename", "+", "'-'", "# (Foo) -> (Foo -Foo-)", "\n", "", "s", "+=", "')'", "\n", "return", "s", "\n", "\n", "", "elif", "isinstance", "(", "node", ",", "list", ")", ":", "\n", "        ", "n", "=", "0", "\n", "s", "=", "'(list'", "\n", "for", "ch", "in", "node", ":", "\n", "            ", "chstr", "=", "makestr", "(", "ch", ")", "\n", "if", "chstr", ":", "\n", "                ", "s", "+=", "' '", "+", "chstr", "\n", "n", "+=", "1", "\n", "", "", "s", "+=", "')'", "\n", "return", "s", "if", "n", "else", "''", "\n", "\n", "", "elif", "isinstance", "(", "node", ",", "str", ")", ":", "\n", "        ", "return", "'(str '", "+", "escape", "(", "node", ")", "+", "')'", "\n", "\n", "", "elif", "isinstance", "(", "node", ",", "bytes", ")", ":", "\n", "        ", "return", "'(bytes '", "+", "escape", "(", "str", "(", "node", ")", ")", "+", "')'", "\n", "\n", "", "else", ":", "\n", "        ", "return", "'('", "+", "typename", "(", "node", ")", "+", "' '", "+", "str", "(", "node", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.parse_hiro.main": [[61, 91], ["re.compile", "re.compile", "re.compile", "re.compile", "re.compile", "re.compile", "l.strip.strip", "re.compile.match", "re.compile.match", "re.compile.match", "re.compile.match", "ast.parse", "parse_hiro.makestr", "print", "sys.stdout.flush", "print", "sys.stdout.flush", "re.compile.match", "re.compile.match"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.parse_hiro.makestr"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "p_elif", "=", "re", ".", "compile", "(", "r'^elif\\s?'", ")", "\n", "p_else", "=", "re", ".", "compile", "(", "r'^else\\s?'", ")", "\n", "p_try", "=", "re", ".", "compile", "(", "r'^try\\s?'", ")", "\n", "p_except", "=", "re", ".", "compile", "(", "r'^except\\s?'", ")", "\n", "p_finally", "=", "re", ".", "compile", "(", "r'^finally\\s?'", ")", "\n", "p_decorator", "=", "re", ".", "compile", "(", "r'^@.*'", ")", "\n", "\n", "for", "l", "in", "[", "\"\"\"val = Header ( val , encoding ) . encode ( )\"\"\"", "]", ":", "# val = ', ' . join ( sanitize_address ( addr , encoding )  for addr in getaddresses ( ( val , ) ) )", "\n", "        ", "l", "=", "l", ".", "strip", "(", ")", "\n", "if", "not", "l", ":", "\n", "            ", "print", "(", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "continue", "\n", "\n", "", "if", "p_elif", ".", "match", "(", "l", ")", ":", "l", "=", "'if True: pass\\n'", "+", "l", "\n", "if", "p_else", ".", "match", "(", "l", ")", ":", "l", "=", "'if True: pass\\n'", "+", "l", "\n", "\n", "if", "p_try", ".", "match", "(", "l", ")", ":", "l", "=", "l", "+", "'pass\\nexcept: pass'", "\n", "elif", "p_except", ".", "match", "(", "l", ")", ":", "l", "=", "'try: pass\\n'", "+", "l", "\n", "elif", "p_finally", ".", "match", "(", "l", ")", ":", "l", "=", "'try: pass\\n'", "+", "l", "\n", "\n", "if", "p_decorator", ".", "match", "(", "l", ")", ":", "l", "=", "l", "+", "'\\ndef dummy(): pass'", "\n", "if", "l", "[", "-", "1", "]", "==", "':'", ":", "l", "=", "l", "+", "'pass'", "\n", "\n", "parse", "=", "ast", ".", "parse", "(", "l", ")", "\n", "parse", "=", "parse", ".", "body", "[", "0", "]", "\n", "dump", "=", "makestr", "(", "parse", ")", "\n", "print", "(", "dump", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.model.Model.__init__": [[31, 73], ["nn.layers.embeddings.Embedding", "nn.layers.embeddings.Embedding", "model.Model.query_embedding.init_pretrained", "components.CondAttLSTM", "components.PointerNet", "nn.layers.core.Dense", "nn.layers.core.Dense", "nn.utils.theano_utils.shared_zeros", "nn.utils.theano_utils.shared_zeros", "nn.utils.theano_utils.shared_zeros", "nn.utils.theano_utils.shared_zeros", "nn.layers.core.Dense", "nn.layers.core.Dense", "nn.layers.core.Dense", "nn.layers.core.Dense", "theano.sandbox.rng_mrg.MRG_RandomStreams", "theano.sandbox.rng_mrg.MRG_RandomStreams", "nn.layers.recurrent.BiLSTM", "nn.layers.recurrent.BiLSTM", "nn.layers.recurrent.LSTM", "nn.layers.recurrent.LSTM", "nn.get", "nn.get", "nn.get", "nn.get", "nn.get", "nn.get"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.embeddings.Embedding.init_pretrained", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get"], ["    ", "def", "__init__", "(", "self", ",", "vocab", ",", "glove_path", ")", ":", "\n", "# self.node_embedding = Embedding(config.node_num, config.node_embed_dim, name='node_embed')", "\n", "\n", "        ", "self", ".", "query_embedding", "=", "Embedding", "(", "config", ".", "source_vocab_size", ",", "config", ".", "word_embed_dim", ",", "name", "=", "'query_embed'", ")", "\n", "self", ".", "query_embedding", ".", "init_pretrained", "(", "glove_path", ",", "vocab", ")", "\n", "if", "config", ".", "encoder", "==", "'bilstm'", ":", "\n", "            ", "self", ".", "query_encoder_lstm", "=", "BiLSTM", "(", "config", ".", "word_embed_dim", ",", "config", ".", "encoder_hidden_dim", "/", "2", ",", "return_sequences", "=", "True", ",", "\n", "name", "=", "'query_encoder_lstm'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "query_encoder_lstm", "=", "LSTM", "(", "config", ".", "word_embed_dim", ",", "config", ".", "encoder_hidden_dim", ",", "return_sequences", "=", "True", ",", "\n", "name", "=", "'query_encoder_lstm'", ")", "\n", "\n", "", "self", ".", "decoder_lstm", "=", "CondAttLSTM", "(", "config", ".", "rule_embed_dim", "+", "config", ".", "node_embed_dim", "+", "config", ".", "rule_embed_dim", ",", "\n", "config", ".", "decoder_hidden_dim", ",", "config", ".", "encoder_hidden_dim", ",", "config", ".", "attention_hidden_dim", ",", "\n", "name", "=", "'decoder_lstm'", ")", "\n", "\n", "self", ".", "src_ptr_net", "=", "PointerNet", "(", ")", "\n", "\n", "self", ".", "terminal_gen_softmax", "=", "Dense", "(", "config", ".", "decoder_hidden_dim", ",", "2", ",", "activation", "=", "'softmax'", ",", "name", "=", "'terminal_gen_softmax'", ")", "\n", "\n", "self", ".", "rule_embedding_W", "=", "initializations", ".", "get", "(", "'normal'", ")", "(", "(", "config", ".", "rule_num", ",", "config", ".", "rule_embed_dim", ")", ",", "name", "=", "'rule_embedding_W'", ",", "scale", "=", "0.1", ")", "\n", "self", ".", "rule_embedding_b", "=", "shared_zeros", "(", "config", ".", "rule_num", ",", "name", "=", "'rule_embedding_b'", ")", "\n", "\n", "self", ".", "node_embedding", "=", "initializations", ".", "get", "(", "'normal'", ")", "(", "(", "config", ".", "node_num", ",", "config", ".", "node_embed_dim", ")", ",", "name", "=", "'node_embed'", ",", "scale", "=", "0.1", ")", "\n", "\n", "self", ".", "vocab_embedding_W", "=", "initializations", ".", "get", "(", "'normal'", ")", "(", "(", "config", ".", "target_vocab_size", ",", "config", ".", "rule_embed_dim", ")", ",", "name", "=", "'vocab_embedding_W'", ",", "scale", "=", "0.1", ")", "\n", "self", ".", "vocab_embedding_b", "=", "shared_zeros", "(", "config", ".", "target_vocab_size", ",", "name", "=", "'vocab_embedding_b'", ")", "\n", "\n", "# decoder_hidden_dim -> action embed", "\n", "self", ".", "decoder_hidden_state_W_rule", "=", "Dense", "(", "config", ".", "decoder_hidden_dim", ",", "config", ".", "rule_embed_dim", ",", "name", "=", "'decoder_hidden_state_W_rule'", ")", "\n", "\n", "# decoder_hidden_dim -> action embed", "\n", "self", ".", "decoder_hidden_state_W_token", "=", "Dense", "(", "config", ".", "decoder_hidden_dim", "+", "config", ".", "encoder_hidden_dim", ",", "config", ".", "rule_embed_dim", ",", "\n", "name", "=", "'decoder_hidden_state_W_token'", ")", "\n", "\n", "# self.rule_encoder_lstm.params", "\n", "self", ".", "params", "=", "self", ".", "query_encoder_lstm", ".", "params", "+", "self", ".", "decoder_lstm", ".", "params", "+", "self", ".", "src_ptr_net", ".", "params", "+", "self", ".", "terminal_gen_softmax", ".", "params", "+", "[", "self", ".", "rule_embedding_W", ",", "self", ".", "rule_embedding_b", ",", "self", ".", "node_embedding", ",", "self", ".", "vocab_embedding_W", ",", "self", ".", "vocab_embedding_b", "]", "+", "self", ".", "decoder_hidden_state_W_rule", ".", "params", "+", "self", ".", "decoder_hidden_state_W_token", ".", "params", "\n", "\n", "self", ".", "srng", "=", "RandomStreams", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.model.Model.build": [[74, 220], ["nn.utils.theano_utils.ndim_itensor", "nn.utils.theano_utils.ndim_itensor", "nn.utils.theano_utils.ndim_itensor", "nn.utils.theano_utils.ndim_itensor", "nn.utils.theano_utils.ndim_itensor", "nn.utils.theano_utils.ndim_itensor", "nn.utils.theano_utils.ndim_itensor", "nn.utils.theano_utils.ndim_itensor", "nn.utils.theano_utils.ndim_itensor", "nn.utils.theano_utils.ndim_itensor", "nn.utils.theano_utils.ndim_itensor", "nn.utils.theano_utils.ndim_itensor", "model.Model.query_embedding", "theano.switch", "theano.switch", "nn.utils.theano_utils.tensor_right_shift", "nn.utils.theano_utils.tensor_right_shift", "theano.switch", "theano.switch", "theano.concatenate", "theano.concatenate", "model.Model.query_encoder_lstm", "theano.any", "theano.any", "model.Model.decoder_lstm", "model.Model.decoder_hidden_state_W_rule", "model.Model.decoder_hidden_state_W_token", "nn.activations.softmax", "nn.activations.softmax", "model.Model.terminal_gen_softmax", "nn.activations.softmax().transpose", "nn.activations.softmax().transpose", "theano.concatenate", "theano.concatenate", "model.Model.src_ptr_net", "theano.log", "theano.log", "theano.mean", "theano.mean", "nn.get", "nn.get", "nn.get.get_updates", "theano.function", "theano.function", "theano.function", "theano.function", "model.Model.build_decoder", "theano.TensorType", "theano.TensorType", "theano.shape_padright", "theano.shape_padright", "theano.alloc", "theano.alloc", "theano.concatenate", "theano.concatenate", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.transpose", "theano.transpose", "nn.activations.softmax", "nn.activations.softmax", "theano.transpose", "theano.transpose", "theano.shape_padright", "theano.shape_padright", "theano.shape_padleft", "theano.shape_padleft", "theano.shape_padright", "theano.shape_padright", "theano.shape_padleft", "theano.shape_padleft", "theano.shape_padright", "theano.shape_padright", "theano.shape_padleft", "theano.shape_padleft", "theano.arange", "theano.arange", "theano.arange", "theano.arange", "theano.arange", "theano.arange", "theano.arange", "theano.arange", "theano.arange", "theano.arange", "theano.arange", "theano.arange", "logits.transpose", "theano.min", "theano.min", "logits.transpose"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.ndim_itensor", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.ndim_itensor", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.ndim_itensor", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.ndim_itensor", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.ndim_itensor", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.ndim_itensor", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.ndim_itensor", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.ndim_itensor", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.ndim_itensor", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.ndim_itensor", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.ndim_itensor", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.ndim_itensor", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.tensor_right_shift", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.tensor_right_shift", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Adam.get_updates", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.model.Model.build_decoder", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax"], ["", "def", "build", "(", "self", ")", ":", "\n", "# (batch_size, max_example_action_num, action_type)", "\n", "        ", "tgt_action_seq", "=", "ndim_itensor", "(", "3", ",", "'tgt_action_seq'", ")", "\n", "\n", "# (batch_size, max_example_action_num, action_type)", "\n", "tgt_action_seq_type", "=", "ndim_itensor", "(", "3", ",", "'tgt_action_seq_type'", ")", "\n", "\n", "# (batch_size, max_example_action_num)", "\n", "tgt_node_seq", "=", "ndim_itensor", "(", "2", ",", "'tgt_node_seq'", ")", "\n", "\n", "# (batch_size, max_example_action_num)", "\n", "tgt_par_rule_seq", "=", "ndim_itensor", "(", "2", ",", "'tgt_par_rule_seq'", ")", "\n", "\n", "# (batch_size, max_example_action_num)", "\n", "tgt_par_t_seq", "=", "ndim_itensor", "(", "2", ",", "'tgt_par_t_seq'", ")", "\n", "\n", "# (batch_size, max_example_action_num, symbol_embed_dim)", "\n", "# tgt_node_embed = self.node_embedding(tgt_node_seq, mask_zero=False)", "\n", "tgt_node_embed", "=", "self", ".", "node_embedding", "[", "tgt_node_seq", "]", "\n", "\n", "# (batch_size, max_query_length)", "\n", "query_tokens", "=", "ndim_itensor", "(", "2", ",", "'query_tokens'", ")", "\n", "\n", "mask", "=", "T", ".", "TensorType", "(", "dtype", "=", "'int32'", ",", "name", "=", "'mask'", ",", "broadcastable", "=", "(", "True", ",", "False", ")", ")", "(", ")", "\n", "\n", "# (batch_size, max_query_length, query_token_embed_dim)", "\n", "# (batch_size, max_query_length)", "\n", "query_token_embed", ",", "query_token_embed_mask", "=", "self", ".", "query_embedding", "(", "query_tokens", ",", "mask_zero", "=", "True", ")", "\n", "\n", "# if WORD_DROPOUT > 0:", "\n", "#     logging.info('used word dropout for source, p = %f', WORD_DROPOUT)", "\n", "#     query_token_embed, query_token_embed_intact = WordDropout(WORD_DROPOUT, self.srng)(query_token_embed, False)", "\n", "\n", "batch_size", "=", "tgt_action_seq", ".", "shape", "[", "0", "]", "\n", "max_example_action_num", "=", "tgt_action_seq", ".", "shape", "[", "1", "]", "\n", "\n", "# previous action embeddings", "\n", "# (batch_size, max_example_action_num, action_embed_dim)", "\n", "tgt_action_seq_embed", "=", "T", ".", "switch", "(", "T", ".", "shape_padright", "(", "tgt_action_seq", "[", ":", ",", ":", ",", "0", "]", ">", "0", ")", ",", "\n", "self", ".", "rule_embedding_W", "[", "tgt_action_seq", "[", ":", ",", ":", ",", "0", "]", "]", ",", "\n", "self", ".", "vocab_embedding_W", "[", "tgt_action_seq", "[", ":", ",", ":", ",", "1", "]", "]", ")", "\n", "\n", "tgt_action_seq_embed_tm1", "=", "tensor_right_shift", "(", "tgt_action_seq_embed", ")", "\n", "\n", "# parent rule application embeddings", "\n", "tgt_par_rule_embed", "=", "T", ".", "switch", "(", "tgt_par_rule_seq", "[", ":", ",", ":", ",", "None", "]", "<", "0", ",", "\n", "T", ".", "alloc", "(", "0.", ",", "1", ",", "config", ".", "rule_embed_dim", ")", ",", "\n", "self", ".", "rule_embedding_W", "[", "tgt_par_rule_seq", "]", ")", "\n", "\n", "if", "not", "config", ".", "frontier_node_type_feed", ":", "\n", "            ", "tgt_node_embed", "*=", "0.", "\n", "\n", "", "if", "not", "config", ".", "parent_action_feed", ":", "\n", "            ", "tgt_par_rule_embed", "*=", "0.", "\n", "\n", "# (batch_size, max_example_action_num, action_embed_dim + symbol_embed_dim + action_embed_dim)", "\n", "", "decoder_input", "=", "T", ".", "concatenate", "(", "[", "tgt_action_seq_embed_tm1", ",", "tgt_node_embed", ",", "tgt_par_rule_embed", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# (batch_size, max_query_length, query_embed_dim)", "\n", "query_embed", "=", "self", ".", "query_encoder_lstm", "(", "query_token_embed", ",", "mask", "=", "query_token_embed_mask", ",", "\n", "dropout", "=", "config", ".", "dropout", ",", "srng", "=", "self", ".", "srng", ")", "\n", "\n", "# (batch_size, max_example_action_num)", "\n", "tgt_action_seq_mask", "=", "T", ".", "any", "(", "tgt_action_seq_type", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# decoder_hidden_states: (batch_size, max_example_action_num, lstm_hidden_state)", "\n", "# ctx_vectors: (batch_size, max_example_action_num, encoder_hidden_dim)", "\n", "decoder_hidden_states", ",", "_", ",", "ctx_vectors", "=", "self", ".", "decoder_lstm", "(", "decoder_input", ",", "\n", "context", "=", "query_embed", ",", "\n", "context_mask", "=", "query_token_embed_mask", ",", "\n", "mask", "=", "tgt_action_seq_mask", ",", "\n", "parent_t_seq", "=", "tgt_par_t_seq", ",", "\n", "dropout", "=", "config", ".", "dropout", ",", "\n", "srng", "=", "self", ".", "srng", ")", "\n", "\n", "# if DECODER_DROPOUT > 0:", "\n", "#     logging.info('used dropout for decoder output, p = %f', DECODER_DROPOUT)", "\n", "#     decoder_hidden_states = Dropout(DECODER_DROPOUT, self.srng)(decoder_hidden_states)", "\n", "\n", "# ====================================================", "\n", "# apply additional non-linearity transformation before", "\n", "# predicting actions", "\n", "# ====================================================", "\n", "\n", "decoder_hidden_state_trans_rule", "=", "self", ".", "decoder_hidden_state_W_rule", "(", "decoder_hidden_states", ")", "\n", "decoder_hidden_state_trans_token", "=", "self", ".", "decoder_hidden_state_W_token", "(", "T", ".", "concatenate", "(", "[", "decoder_hidden_states", ",", "ctx_vectors", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n", "# (batch_size, max_example_action_num, rule_num)", "\n", "rule_predict", "=", "softmax", "(", "T", ".", "dot", "(", "decoder_hidden_state_trans_rule", ",", "T", ".", "transpose", "(", "self", ".", "rule_embedding_W", ")", ")", "+", "self", ".", "rule_embedding_b", ")", "\n", "\n", "# (batch_size, max_example_action_num, 2)", "\n", "terminal_gen_action_prob", "=", "self", ".", "terminal_gen_softmax", "(", "decoder_hidden_states", ")", "\n", "\n", "# (batch_size, max_example_action_num, target_vocab_size)", "\n", "logits", "=", "T", ".", "dot", "(", "decoder_hidden_state_trans_token", ",", "T", ".", "transpose", "(", "self", ".", "vocab_embedding_W", ")", ")", "+", "self", ".", "vocab_embedding_b", "\n", "# vocab_predict = softmax(T.dot(decoder_hidden_state_trans_token, T.transpose(self.vocab_embedding_W)) + self.vocab_embedding_b)", "\n", "vocab_predict", "=", "softmax", "(", "logits", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "*", "mask", "+", "(", "T", ".", "min", "(", "logits", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "-", "1", ")", "*", "(", "1", "-", "mask", ")", ")", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "# (batch_size, max_example_action_num, lstm_hidden_state + encoder_hidden_dim)", "\n", "ptr_net_decoder_state", "=", "T", ".", "concatenate", "(", "[", "decoder_hidden_states", ",", "ctx_vectors", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# (batch_size, max_example_action_num, max_query_length)", "\n", "copy_prob", "=", "self", ".", "src_ptr_net", "(", "query_embed", ",", "query_token_embed_mask", ",", "ptr_net_decoder_state", ")", "\n", "\n", "# (batch_size, max_example_action_num)", "\n", "rule_tgt_prob", "=", "rule_predict", "[", "T", ".", "shape_padright", "(", "T", ".", "arange", "(", "batch_size", ")", ")", ",", "\n", "T", ".", "shape_padleft", "(", "T", ".", "arange", "(", "max_example_action_num", ")", ")", ",", "\n", "tgt_action_seq", "[", ":", ",", ":", ",", "0", "]", "]", "\n", "\n", "# (batch_size, max_example_action_num)", "\n", "vocab_tgt_prob", "=", "vocab_predict", "[", "T", ".", "shape_padright", "(", "T", ".", "arange", "(", "batch_size", ")", ")", ",", "\n", "T", ".", "shape_padleft", "(", "T", ".", "arange", "(", "max_example_action_num", ")", ")", ",", "\n", "tgt_action_seq", "[", ":", ",", ":", ",", "1", "]", "]", "\n", "\n", "# (batch_size, max_example_action_num)", "\n", "copy_tgt_prob", "=", "copy_prob", "[", "T", ".", "shape_padright", "(", "T", ".", "arange", "(", "batch_size", ")", ")", ",", "\n", "T", ".", "shape_padleft", "(", "T", ".", "arange", "(", "max_example_action_num", ")", ")", ",", "\n", "tgt_action_seq", "[", ":", ",", ":", ",", "2", "]", "]", "\n", "\n", "\n", "# (batch_size, max_example_action_num)", "\n", "tgt_prob", "=", "tgt_action_seq_type", "[", ":", ",", ":", ",", "0", "]", "*", "rule_tgt_prob", "+", "tgt_action_seq_type", "[", ":", ",", ":", ",", "1", "]", "*", "terminal_gen_action_prob", "[", ":", ",", ":", ",", "0", "]", "*", "vocab_tgt_prob", "+", "tgt_action_seq_type", "[", ":", ",", ":", ",", "2", "]", "*", "terminal_gen_action_prob", "[", ":", ",", ":", ",", "1", "]", "*", "copy_tgt_prob", "\n", "\n", "likelihood", "=", "T", ".", "log", "(", "tgt_prob", "+", "1.e-7", "*", "(", "1", "-", "tgt_action_seq_mask", ")", ")", "\n", "loss", "=", "-", "(", "likelihood", "*", "tgt_action_seq_mask", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", "# / tgt_action_seq_mask.sum(axis=-1)", "\n", "loss", "=", "T", ".", "mean", "(", "loss", ")", "\n", "\n", "# let's build the function!", "\n", "train_inputs", "=", "[", "query_tokens", ",", "tgt_action_seq", ",", "tgt_action_seq_type", ",", "\n", "tgt_node_seq", ",", "tgt_par_rule_seq", ",", "tgt_par_t_seq", ",", "mask", "]", "\n", "optimizer", "=", "optimizers", ".", "get", "(", "config", ".", "optimizer", ")", "\n", "optimizer", ".", "clip_grad", "=", "config", ".", "clip_grad", "\n", "updates", ",", "grads", "=", "optimizer", ".", "get_updates", "(", "self", ".", "params", ",", "loss", ")", "\n", "self", ".", "train_func", "=", "theano", ".", "function", "(", "train_inputs", ",", "[", "loss", "]", ",", "\n", "# [loss, tgt_action_seq_type, tgt_action_seq,", "\n", "#  rule_tgt_prob, vocab_tgt_prob, copy_tgt_prob,", "\n", "#  copy_prob, terminal_gen_action_prob],", "\n", "updates", "=", "updates", ")", "\n", "\n", "# if WORD_DROPOUT > 0:", "\n", "#     self.build_decoder(query_tokens, query_token_embed_intact, query_token_embed_mask)", "\n", "# else:", "\n", "#     self.build_decoder(query_tokens, query_token_embed, query_token_embed_mask)", "\n", "\n", "self", ".", "build_decoder", "(", "query_tokens", ",", "query_token_embed", ",", "query_token_embed_mask", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.model.Model.build_decoder": [[221, 337], ["logging.info", "nn.utils.theano_utils.ndim_tensor", "nn.utils.theano_utils.ndim_tensor", "nn.utils.theano_utils.ndim_tensor", "nn.utils.theano_utils.ndim_tensor", "nn.utils.theano_utils.ndim_tensor", "nn.utils.theano_utils.ndim_tensor", "nn.utils.theano_utils.ndim_tensor", "nn.utils.theano_utils.ndim_tensor", "theano.ivector", "theano.ivector", "theano.ivector", "theano.ivector", "theano.switch", "theano.switch", "theano.ivector", "theano.ivector", "theano.ivector", "theano.ivector", "theano.shape_padright", "theano.shape_padright", "model.Model.query_encoder_lstm", "nn.utils.theano_utils.ndim_tensor.dimshuffle", "nn.utils.theano_utils.ndim_tensor.dimshuffle", "node_embed.dimshuffle", "theano.switch.dimshuffle", "theano.concatenate", "theano.concatenate", "model.Model.decoder_lstm", "decoder_next_state_dim3.flatten", "decoder_next_cell_dim3.flatten", "model.Model.decoder_hidden_state_W_rule", "model.Model.decoder_hidden_state_W_token", "nn.activations.softmax", "nn.activations.softmax", "model.Model.terminal_gen_softmax", "theano.dot", "theano.dot", "nn.activations.softmax", "nn.activations.softmax", "theano.concatenate", "theano.concatenate", "model.Model.src_ptr_net", "copy_prob.flatten.flatten.flatten", "theano.function", "theano.function", "theano.function", "theano.function", "theano.function", "theano.function", "theano.function", "theano.function", "theano.alloc", "theano.alloc", "theano.concatenate", "theano.concatenate", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.transpose", "theano.transpose", "theano.min", "theano.min", "ctx_vectors.flatten", "theano.transpose", "theano.transpose"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.ndim_tensor", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.ndim_tensor", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.ndim_tensor", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.ndim_tensor", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.ndim_tensor", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.ndim_tensor", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.ndim_tensor", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.ndim_tensor", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax"], ["", "def", "build_decoder", "(", "self", ",", "query_tokens", ",", "query_token_embed", ",", "query_token_embed_mask", ",", "mask", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'building decoder ...'", ")", "\n", "\n", "# mask = ndim_itensor(2, 'mask')", "\n", "\n", "# (batch_size, decoder_state_dim)", "\n", "decoder_prev_state", "=", "ndim_tensor", "(", "2", ",", "name", "=", "'decoder_prev_state'", ")", "\n", "\n", "# (batch_size, decoder_state_dim)", "\n", "decoder_prev_cell", "=", "ndim_tensor", "(", "2", ",", "name", "=", "'decoder_prev_cell'", ")", "\n", "\n", "# (batch_size, n_timestep, decoder_state_dim)", "\n", "hist_h", "=", "ndim_tensor", "(", "3", ",", "name", "=", "'hist_h'", ")", "\n", "\n", "# (batch_size, decoder_state_dim)", "\n", "prev_action_embed", "=", "ndim_tensor", "(", "2", ",", "name", "=", "'prev_action_embed'", ")", "\n", "\n", "# (batch_size)", "\n", "node_id", "=", "T", ".", "ivector", "(", "name", "=", "'node_id'", ")", "\n", "\n", "# (batch_size, node_embed_dim)", "\n", "node_embed", "=", "self", ".", "node_embedding", "[", "node_id", "]", "\n", "\n", "# (batch_size)", "\n", "par_rule_id", "=", "T", ".", "ivector", "(", "name", "=", "'par_rule_id'", ")", "\n", "\n", "# (batch_size, decoder_state_dim)", "\n", "par_rule_embed", "=", "T", ".", "switch", "(", "par_rule_id", "[", ":", ",", "None", "]", "<", "0", ",", "\n", "T", ".", "alloc", "(", "0.", ",", "1", ",", "config", ".", "rule_embed_dim", ")", ",", "\n", "self", ".", "rule_embedding_W", "[", "par_rule_id", "]", ")", "\n", "\n", "# ([time_step])", "\n", "time_steps", "=", "T", ".", "ivector", "(", "name", "=", "'time_steps'", ")", "\n", "\n", "# (batch_size)", "\n", "parent_t", "=", "T", ".", "ivector", "(", "name", "=", "'parent_t'", ")", "\n", "\n", "# (batch_size, 1)", "\n", "parent_t_reshaped", "=", "T", ".", "shape_padright", "(", "parent_t", ")", "\n", "\n", "# mask = ndim_itensor(2, 'mask')", "\n", "\n", "query_embed", "=", "self", ".", "query_encoder_lstm", "(", "query_token_embed", ",", "mask", "=", "query_token_embed_mask", ",", "\n", "dropout", "=", "config", ".", "dropout", ",", "train", "=", "False", ")", "\n", "\n", "# (batch_size, 1, decoder_state_dim)", "\n", "prev_action_embed_reshaped", "=", "prev_action_embed", ".", "dimshuffle", "(", "(", "0", ",", "'x'", ",", "1", ")", ")", "\n", "\n", "# (batch_size, 1, node_embed_dim)", "\n", "node_embed_reshaped", "=", "node_embed", ".", "dimshuffle", "(", "(", "0", ",", "'x'", ",", "1", ")", ")", "\n", "\n", "# (batch_size, 1, node_embed_dim)", "\n", "par_rule_embed_reshaped", "=", "par_rule_embed", ".", "dimshuffle", "(", "(", "0", ",", "'x'", ",", "1", ")", ")", "\n", "\n", "if", "not", "config", ".", "frontier_node_type_feed", ":", "\n", "            ", "node_embed_reshaped", "*=", "0.", "\n", "\n", "", "if", "not", "config", ".", "parent_action_feed", ":", "\n", "            ", "par_rule_embed_reshaped", "*=", "0.", "\n", "\n", "", "decoder_input", "=", "T", ".", "concatenate", "(", "[", "prev_action_embed_reshaped", ",", "node_embed_reshaped", ",", "par_rule_embed_reshaped", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# (batch_size, 1, decoder_state_dim)", "\n", "# (batch_size, 1, decoder_state_dim)", "\n", "# (batch_size, 1, field_token_encode_dim)", "\n", "decoder_next_state_dim3", ",", "decoder_next_cell_dim3", ",", "ctx_vectors", "=", "self", ".", "decoder_lstm", "(", "decoder_input", ",", "\n", "init_state", "=", "decoder_prev_state", ",", "\n", "init_cell", "=", "decoder_prev_cell", ",", "\n", "hist_h", "=", "hist_h", ",", "\n", "context", "=", "query_embed", ",", "\n", "context_mask", "=", "query_token_embed_mask", ",", "\n", "parent_t_seq", "=", "parent_t_reshaped", ",", "\n", "dropout", "=", "config", ".", "dropout", ",", "\n", "train", "=", "False", ",", "\n", "time_steps", "=", "time_steps", ")", "\n", "\n", "decoder_next_state", "=", "decoder_next_state_dim3", ".", "flatten", "(", "2", ")", "\n", "# decoder_output = decoder_next_state * (1 - DECODER_DROPOUT)", "\n", "\n", "decoder_next_cell", "=", "decoder_next_cell_dim3", ".", "flatten", "(", "2", ")", "\n", "\n", "decoder_next_state_trans_rule", "=", "self", ".", "decoder_hidden_state_W_rule", "(", "decoder_next_state", ")", "\n", "decoder_next_state_trans_token", "=", "self", ".", "decoder_hidden_state_W_token", "(", "T", ".", "concatenate", "(", "[", "decoder_next_state", ",", "ctx_vectors", ".", "flatten", "(", "2", ")", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n", "rule_prob", "=", "softmax", "(", "T", ".", "dot", "(", "decoder_next_state_trans_rule", ",", "T", ".", "transpose", "(", "self", ".", "rule_embedding_W", ")", ")", "+", "self", ".", "rule_embedding_b", ")", "\n", "\n", "gen_action_prob", "=", "self", ".", "terminal_gen_softmax", "(", "decoder_next_state", ")", "\n", "\n", "# vocab_prob = softmax(T.dot(decoder_next_state_trans_token, T.transpose(self.vocab_embedding_W)) + self.vocab_embedding_b)", "\n", "logits", "=", "T", ".", "dot", "(", "decoder_next_state_trans_token", ",", "T", ".", "transpose", "(", "self", ".", "vocab_embedding_W", ")", ")", "+", "self", ".", "vocab_embedding_b", "\n", "# vocab_predict = softmax(T.dot(decoder_hidden_state_trans_token, T.transpose(self.vocab_embedding_W)) + self.vocab_embedding_b)", "\n", "test", "=", "T", ".", "dot", "(", "(", "T", ".", "min", "(", "logits", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "-", "1", ")", ",", "(", "1", "-", "mask", ")", ".", "reshape", "(", "(", "1", ",", "mask", ".", "shape", "[", "1", "]", ")", ")", ")", "\n", "vocab_prob", "=", "softmax", "(", "logits", "*", "mask", "+", "test", ")", "\n", "# vocab_prob = softmax(", "\n", "#     logits.transpose(1, 0, 2) * mask + (T.min(logits.transpose(1, 0, 2), axis=1, keepdims=True) - 1) * (", "\n", "#     1 - mask)).transpose(1, 0, 2)", "\n", "\n", "ptr_net_decoder_state", "=", "T", ".", "concatenate", "(", "[", "decoder_next_state_dim3", ",", "ctx_vectors", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "copy_prob", "=", "self", ".", "src_ptr_net", "(", "query_embed", ",", "query_token_embed_mask", ",", "ptr_net_decoder_state", ")", "\n", "\n", "copy_prob", "=", "copy_prob", ".", "flatten", "(", "2", ")", "\n", "\n", "inputs", "=", "[", "query_tokens", "]", "\n", "outputs", "=", "[", "query_embed", ",", "query_token_embed_mask", "]", "\n", "\n", "self", ".", "decoder_func_init", "=", "theano", ".", "function", "(", "inputs", ",", "outputs", ")", "\n", "\n", "inputs", "=", "[", "time_steps", ",", "decoder_prev_state", ",", "decoder_prev_cell", ",", "hist_h", ",", "prev_action_embed", ",", "\n", "node_id", ",", "par_rule_id", ",", "parent_t", ",", "\n", "query_embed", ",", "query_token_embed_mask", ",", "mask", "]", "\n", "\n", "outputs", "=", "[", "decoder_next_state", ",", "decoder_next_cell", ",", "\n", "rule_prob", ",", "gen_action_prob", ",", "vocab_prob", ",", "copy_prob", "]", "\n", "\n", "self", ".", "decoder_func_next_step", "=", "theano", ".", "function", "(", "inputs", ",", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.model.Model.decode": [[338, 588], ["model.Model.vocab_embedding_W.get_value", "model.Model.rule_embedding_W.get_value", "example.mask.reshape", "model.Model.decoder_func_init", "components.Hyp", "numpy.zeros().astype", "numpy.zeros().astype", "numpy.zeros().astype", "grammar.get_node_type_id", "set", "enumerate", "xrange", "sorted", "len", "numpy.array().astype", "numpy.array().astype", "numpy.zeros().astype", "numpy.array().astype", "numpy.array", "numpy.array", "numpy.array", "numpy.tile", "numpy.tile", "model.Model.decoder_func_next_step", "numpy.array", "xrange", "numpy.log", "len", "len", "min", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "set.add", "enumerate", "numpy.array", "hyp.frontier_nt", "hyp_frontier_nts.append", "word_gen_cand_scores.flatten", "numpy.concatenate", "numpy.array", "components.Hyp.frontier_nt", "len", "numpy.array", "numpy.array", "numpy.zeros", "numpy.array", "hyp.get_action_parent_t", "grammar.is_value_node", "enumerate", "word_gen_hyp_ids.append", "cand_copy_probs.append", "components.Hyp", "components.Hyp.apply_rule", "copy.copy", "components.Hyp.hist_h.append", "copy.copy", "components.Hyp", "components.Hyp.append_token", "copy.copy", "components.Hyp.hist_h.append", "copy.copy", "grammar.get_node_type_id", "sorted.append", "grammar.get_node_type_id", "new_hyp_samples.append", "len", "numpy.log", "rule_apply_cand_hyp_ids.append", "rule_apply_cand_scores.append", "rule_apply_cand_rules.append", "rule_apply_cand_rule_ids.append", "len", "copy_prob[].argmax", "unk_words.append", "copy.copy", "copy.copy", "len", "str", "components.Hyp.frontier_nt"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.lang.grammar.Grammar.get_node_type_id", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.Hyp.frontier_nt", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.Hyp.frontier_nt", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.Hyp.get_action_parent_t", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.py.grammar.PythonGrammar.is_value_node", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.apply_rule", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.Hyp.append_token", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.lang.grammar.Grammar.get_node_type_id", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.lang.grammar.Grammar.get_node_type_id", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.argmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.Hyp.frontier_nt"], ["", "def", "decode", "(", "self", ",", "example", ",", "grammar", ",", "terminal_vocab", ",", "beam_size", ",", "max_time_step", ",", "log", "=", "False", ")", ":", "\n", "# beam search decoding", "\n", "\n", "        ", "eos", "=", "1", "\n", "unk", "=", "terminal_vocab", ".", "unk", "\n", "vocab_embedding", "=", "self", ".", "vocab_embedding_W", ".", "get_value", "(", "borrow", "=", "True", ")", "\n", "rule_embedding", "=", "self", ".", "rule_embedding_W", ".", "get_value", "(", "borrow", "=", "True", ")", "\n", "\n", "query_tokens", "=", "example", ".", "data", "[", "0", "]", "\n", "mask", "=", "example", ".", "mask", ".", "reshape", "(", "(", "1", ",", "example", ".", "mask", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "query_embed", ",", "query_token_embed_mask", "=", "self", ".", "decoder_func_init", "(", "query_tokens", ")", "\n", "\n", "completed_hyps", "=", "[", "]", "\n", "completed_hyp_num", "=", "0", "\n", "live_hyp_num", "=", "1", "\n", "\n", "root_hyp", "=", "Hyp", "(", "grammar", ")", "\n", "root_hyp", ".", "state", "=", "np", ".", "zeros", "(", "config", ".", "decoder_hidden_dim", ")", ".", "astype", "(", "'float32'", ")", "\n", "root_hyp", ".", "cell", "=", "np", ".", "zeros", "(", "config", ".", "decoder_hidden_dim", ")", ".", "astype", "(", "'float32'", ")", "\n", "root_hyp", ".", "action_embed", "=", "np", ".", "zeros", "(", "config", ".", "rule_embed_dim", ")", ".", "astype", "(", "'float32'", ")", "\n", "root_hyp", ".", "node_id", "=", "grammar", ".", "get_node_type_id", "(", "root_hyp", ".", "tree", ".", "type", ")", "\n", "root_hyp", ".", "parent_rule_id", "=", "-", "1", "\n", "\n", "hyp_samples", "=", "[", "root_hyp", "]", "# [list() for i in range(live_hyp_num)]", "\n", "\n", "# source word id in the terminal vocab", "\n", "src_token_id", "=", "[", "terminal_vocab", "[", "t", "]", "for", "t", "in", "example", ".", "query", "]", "[", ":", "config", ".", "max_query_length", "]", "\n", "unk_pos_list", "=", "[", "x", "for", "x", ",", "t", "in", "enumerate", "(", "src_token_id", ")", "if", "t", "==", "unk", "]", "\n", "\n", "# sometimes a word may appear multi-times in the source, in this case,", "\n", "# we just copy its first appearing position. Therefore we mask the words", "\n", "# appearing second and onwards to -1", "\n", "token_set", "=", "set", "(", ")", "\n", "for", "i", ",", "tid", "in", "enumerate", "(", "src_token_id", ")", ":", "\n", "            ", "if", "tid", "in", "token_set", ":", "\n", "                ", "src_token_id", "[", "i", "]", "=", "-", "1", "\n", "", "else", ":", "token_set", ".", "add", "(", "tid", ")", "\n", "\n", "", "for", "t", "in", "xrange", "(", "max_time_step", ")", ":", "\n", "            ", "hyp_num", "=", "len", "(", "hyp_samples", ")", "\n", "# print 'time step [%d]' % t", "\n", "decoder_prev_state", "=", "np", ".", "array", "(", "[", "hyp", ".", "state", "for", "hyp", "in", "hyp_samples", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "decoder_prev_cell", "=", "np", ".", "array", "(", "[", "hyp", ".", "cell", "for", "hyp", "in", "hyp_samples", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "hist_h", "=", "np", ".", "zeros", "(", "(", "hyp_num", ",", "max_time_step", ",", "config", ".", "decoder_hidden_dim", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "if", "t", ">", "0", ":", "\n", "                ", "for", "i", ",", "hyp", "in", "enumerate", "(", "hyp_samples", ")", ":", "\n", "                    ", "hist_h", "[", "i", ",", ":", "len", "(", "hyp", ".", "hist_h", ")", ",", ":", "]", "=", "hyp", ".", "hist_h", "\n", "# for j, h in enumerate(hyp.hist_h):", "\n", "#    hist_h[i, j] = h", "\n", "\n", "", "", "prev_action_embed", "=", "np", ".", "array", "(", "[", "hyp", ".", "action_embed", "for", "hyp", "in", "hyp_samples", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "node_id", "=", "np", ".", "array", "(", "[", "hyp", ".", "node_id", "for", "hyp", "in", "hyp_samples", "]", ",", "dtype", "=", "'int32'", ")", "\n", "parent_rule_id", "=", "np", ".", "array", "(", "[", "hyp", ".", "parent_rule_id", "for", "hyp", "in", "hyp_samples", "]", ",", "dtype", "=", "'int32'", ")", "\n", "parent_t", "=", "np", ".", "array", "(", "[", "hyp", ".", "get_action_parent_t", "(", ")", "for", "hyp", "in", "hyp_samples", "]", ",", "dtype", "=", "'int32'", ")", "\n", "query_embed_tiled", "=", "np", ".", "tile", "(", "query_embed", ",", "[", "live_hyp_num", ",", "1", ",", "1", "]", ")", "\n", "query_token_embed_mask_tiled", "=", "np", ".", "tile", "(", "query_token_embed_mask", ",", "[", "live_hyp_num", ",", "1", "]", ")", "\n", "\n", "inputs", "=", "[", "np", ".", "array", "(", "[", "t", "]", ",", "dtype", "=", "'int32'", ")", ",", "decoder_prev_state", ",", "decoder_prev_cell", ",", "hist_h", ",", "prev_action_embed", ",", "\n", "node_id", ",", "parent_rule_id", ",", "parent_t", ",", "\n", "query_embed_tiled", ",", "query_token_embed_mask_tiled", ",", "mask", "]", "\n", "\n", "decoder_next_state", ",", "decoder_next_cell", ",", "rule_prob", ",", "gen_action_prob", ",", "vocab_prob", ",", "copy_prob", "=", "self", ".", "decoder_func_next_step", "(", "*", "inputs", ")", "\n", "\n", "new_hyp_samples", "=", "[", "]", "\n", "\n", "cut_off_k", "=", "beam_size", "\n", "score_heap", "=", "[", "]", "\n", "\n", "# iterating over items in the beam", "\n", "# print 'time step: %d, hyp num: %d' % (t, live_hyp_num)", "\n", "\n", "word_prob", "=", "gen_action_prob", "[", ":", ",", "0", ":", "1", "]", "*", "vocab_prob", "\n", "word_prob", "[", ":", ",", "unk", "]", "=", "0", "\n", "\n", "hyp_scores", "=", "np", ".", "array", "(", "[", "hyp", ".", "score", "for", "hyp", "in", "hyp_samples", "]", ")", "\n", "\n", "# word_prob[:, src_token_id] += gen_action_prob[:, 1:2] * copy_prob[:, :len(src_token_id)]", "\n", "# word_prob[:, unk] = 0", "\n", "\n", "rule_apply_cand_hyp_ids", "=", "[", "]", "\n", "rule_apply_cand_scores", "=", "[", "]", "\n", "rule_apply_cand_rules", "=", "[", "]", "\n", "rule_apply_cand_rule_ids", "=", "[", "]", "\n", "\n", "hyp_frontier_nts", "=", "[", "]", "\n", "word_gen_hyp_ids", "=", "[", "]", "\n", "cand_copy_probs", "=", "[", "]", "\n", "unk_words", "=", "[", "]", "\n", "\n", "for", "k", "in", "xrange", "(", "live_hyp_num", ")", ":", "\n", "                ", "hyp", "=", "hyp_samples", "[", "k", "]", "\n", "\n", "# if k == 0:", "\n", "#     print 'Top Hyp: %s' % hyp.tree.__repr__()", "\n", "\n", "frontier_nt", "=", "hyp", ".", "frontier_nt", "(", ")", "\n", "hyp_frontier_nts", ".", "append", "(", "frontier_nt", ")", "\n", "\n", "assert", "hyp", ",", "'none hyp!'", "\n", "\n", "# if it's not a leaf", "\n", "if", "not", "grammar", ".", "is_value_node", "(", "frontier_nt", ")", ":", "\n", "# iterate over all the possible rules", "\n", "                    ", "rules", "=", "grammar", "[", "frontier_nt", ".", "as_type_node", "]", "if", "config", ".", "head_nt_constraint", "else", "grammar", "\n", "assert", "len", "(", "rules", ")", ">", "0", ",", "'fail to expand nt node %s'", "%", "frontier_nt", "\n", "for", "rule", "in", "rules", ":", "\n", "                        ", "rule_id", "=", "grammar", ".", "rule_to_id", "[", "rule", "]", "\n", "\n", "cur_rule_score", "=", "np", ".", "log", "(", "rule_prob", "[", "k", ",", "rule_id", "]", ")", "\n", "new_hyp_score", "=", "hyp", ".", "score", "+", "cur_rule_score", "\n", "\n", "rule_apply_cand_hyp_ids", ".", "append", "(", "k", ")", "\n", "rule_apply_cand_scores", ".", "append", "(", "new_hyp_score", ")", "\n", "rule_apply_cand_rules", ".", "append", "(", "rule", ")", "\n", "rule_apply_cand_rule_ids", ".", "append", "(", "rule_id", ")", "\n", "\n", "", "", "else", ":", "# it's a leaf that holds values", "\n", "                    ", "cand_copy_prob", "=", "0.0", "\n", "for", "i", ",", "tid", "in", "enumerate", "(", "src_token_id", ")", ":", "\n", "                        ", "if", "tid", "!=", "-", "1", ":", "\n", "                            ", "word_prob", "[", "k", ",", "tid", "]", "+=", "gen_action_prob", "[", "k", ",", "1", "]", "*", "copy_prob", "[", "k", ",", "i", "]", "\n", "cand_copy_prob", "=", "gen_action_prob", "[", "k", ",", "1", "]", "\n", "\n", "# and unk copy probability", "\n", "", "", "if", "len", "(", "unk_pos_list", ")", ">", "0", ":", "\n", "                        ", "unk_pos", "=", "copy_prob", "[", "k", ",", "unk_pos_list", "]", ".", "argmax", "(", ")", "\n", "unk_pos", "=", "unk_pos_list", "[", "unk_pos", "]", "\n", "\n", "unk_copy_score", "=", "gen_action_prob", "[", "k", ",", "1", "]", "*", "copy_prob", "[", "k", ",", "unk_pos", "]", "\n", "word_prob", "[", "k", ",", "unk", "]", "=", "unk_copy_score", "\n", "\n", "unk_word", "=", "example", ".", "query", "[", "unk_pos", "]", "\n", "unk_words", ".", "append", "(", "unk_word", ")", "\n", "\n", "cand_copy_prob", "=", "gen_action_prob", "[", "k", ",", "1", "]", "\n", "\n", "", "word_gen_hyp_ids", ".", "append", "(", "k", ")", "\n", "cand_copy_probs", ".", "append", "(", "cand_copy_prob", ")", "\n", "\n", "# prune the hyp space", "\n", "", "", "if", "completed_hyp_num", ">=", "beam_size", ":", "\n", "                ", "break", "\n", "\n", "", "word_prob", "=", "np", ".", "log", "(", "word_prob", ")", "\n", "\n", "word_gen_hyp_num", "=", "len", "(", "word_gen_hyp_ids", ")", "\n", "rule_apply_cand_num", "=", "len", "(", "rule_apply_cand_scores", ")", "\n", "\n", "if", "word_gen_hyp_num", ">", "0", ":", "\n", "                ", "word_gen_cand_scores", "=", "hyp_scores", "[", "word_gen_hyp_ids", ",", "None", "]", "+", "word_prob", "[", "word_gen_hyp_ids", ",", ":", "]", "\n", "word_gen_cand_scores_flat", "=", "word_gen_cand_scores", ".", "flatten", "(", ")", "\n", "\n", "cand_scores", "=", "np", ".", "concatenate", "(", "[", "rule_apply_cand_scores", ",", "word_gen_cand_scores_flat", "]", ")", "\n", "", "else", ":", "\n", "                ", "cand_scores", "=", "np", ".", "array", "(", "rule_apply_cand_scores", ")", "\n", "\n", "", "top_cand_ids", "=", "(", "-", "cand_scores", ")", ".", "argsort", "(", ")", "[", ":", "beam_size", "-", "completed_hyp_num", "]", "\n", "\n", "# expand_cand_num = 0", "\n", "for", "cand_id", "in", "top_cand_ids", ":", "\n", "# cand is rule application", "\n", "                ", "new_hyp", "=", "None", "\n", "if", "cand_id", "<", "rule_apply_cand_num", ":", "\n", "                    ", "hyp_id", "=", "rule_apply_cand_hyp_ids", "[", "cand_id", "]", "\n", "hyp", "=", "hyp_samples", "[", "hyp_id", "]", "\n", "rule_id", "=", "rule_apply_cand_rule_ids", "[", "cand_id", "]", "\n", "rule", "=", "rule_apply_cand_rules", "[", "cand_id", "]", "\n", "new_hyp_score", "=", "rule_apply_cand_scores", "[", "cand_id", "]", "\n", "\n", "new_hyp", "=", "Hyp", "(", "hyp", ")", "\n", "new_hyp", ".", "apply_rule", "(", "rule", ")", "\n", "\n", "new_hyp", ".", "score", "=", "new_hyp_score", "\n", "new_hyp", ".", "state", "=", "copy", ".", "copy", "(", "decoder_next_state", "[", "hyp_id", "]", ")", "\n", "new_hyp", ".", "hist_h", ".", "append", "(", "copy", ".", "copy", "(", "new_hyp", ".", "state", ")", ")", "\n", "new_hyp", ".", "cell", "=", "copy", ".", "copy", "(", "decoder_next_cell", "[", "hyp_id", "]", ")", "\n", "new_hyp", ".", "action_embed", "=", "rule_embedding", "[", "rule_id", "]", "\n", "", "else", ":", "\n", "                    ", "tid", "=", "(", "cand_id", "-", "rule_apply_cand_num", ")", "%", "word_prob", ".", "shape", "[", "1", "]", "\n", "word_gen_hyp_id", "=", "(", "cand_id", "-", "rule_apply_cand_num", ")", "/", "word_prob", ".", "shape", "[", "1", "]", "\n", "hyp_id", "=", "word_gen_hyp_ids", "[", "word_gen_hyp_id", "]", "\n", "\n", "if", "tid", "==", "unk", ":", "\n", "                        ", "token", "=", "unk_words", "[", "word_gen_hyp_id", "]", "\n", "", "else", ":", "\n", "                        ", "token", "=", "terminal_vocab", ".", "id_token_map", "[", "tid", "]", "\n", "\n", "", "frontier_nt", "=", "hyp_frontier_nts", "[", "hyp_id", "]", "\n", "# if frontier_nt.type == int and (not (is_numeric(token) or token == '<eos>')):", "\n", "#     continue", "\n", "\n", "hyp", "=", "hyp_samples", "[", "hyp_id", "]", "\n", "new_hyp_score", "=", "word_gen_cand_scores", "[", "word_gen_hyp_id", ",", "tid", "]", "\n", "\n", "new_hyp", "=", "Hyp", "(", "hyp", ")", "\n", "new_hyp", ".", "append_token", "(", "token", ")", "\n", "\n", "if", "log", ":", "\n", "                        ", "cand_copy_prob", "=", "cand_copy_probs", "[", "word_gen_hyp_id", "]", "\n", "if", "cand_copy_prob", ">", "0.5", ":", "\n", "                            ", "new_hyp", ".", "log", "+=", "' || '", "+", "str", "(", "new_hyp", ".", "frontier_nt", "(", ")", ")", "+", "'{copy[%s][p=%f]}'", "%", "(", "token", ",", "cand_copy_prob", ")", "\n", "\n", "", "", "new_hyp", ".", "score", "=", "new_hyp_score", "\n", "new_hyp", ".", "state", "=", "copy", ".", "copy", "(", "decoder_next_state", "[", "hyp_id", "]", ")", "\n", "new_hyp", ".", "hist_h", ".", "append", "(", "copy", ".", "copy", "(", "new_hyp", ".", "state", ")", ")", "\n", "new_hyp", ".", "cell", "=", "copy", ".", "copy", "(", "decoder_next_cell", "[", "hyp_id", "]", ")", "\n", "new_hyp", ".", "action_embed", "=", "vocab_embedding", "[", "tid", "]", "\n", "new_hyp", ".", "node_id", "=", "grammar", ".", "get_node_type_id", "(", "frontier_nt", ")", "\n", "\n", "\n", "# get the new frontier nt after rule application", "\n", "", "new_frontier_nt", "=", "new_hyp", ".", "frontier_nt", "(", ")", "\n", "\n", "# if new_frontier_nt is None, then we have a new completed hyp!", "\n", "if", "new_frontier_nt", "is", "None", ":", "\n", "# if t <= 1:", "\n", "#     continue", "\n", "\n", "                    ", "new_hyp", ".", "n_timestep", "=", "t", "+", "1", "\n", "completed_hyps", ".", "append", "(", "new_hyp", ")", "\n", "completed_hyp_num", "+=", "1", "\n", "\n", "", "else", ":", "\n", "                    ", "new_hyp", ".", "node_id", "=", "grammar", ".", "get_node_type_id", "(", "new_frontier_nt", ".", "type", ")", "\n", "# new_hyp.parent_rule_id = grammar.rule_to_id[", "\n", "#     new_frontier_nt.parent.to_rule(include_value=False)]", "\n", "new_hyp", ".", "parent_rule_id", "=", "grammar", ".", "rule_to_id", "[", "new_frontier_nt", ".", "parent", ".", "applied_rule", "]", "\n", "\n", "new_hyp_samples", ".", "append", "(", "new_hyp", ")", "\n", "\n", "# expand_cand_num += 1", "\n", "# if expand_cand_num >= beam_size - completed_hyp_num:", "\n", "#     break", "\n", "\n", "# cand is word generation", "\n", "\n", "", "", "live_hyp_num", "=", "min", "(", "len", "(", "new_hyp_samples", ")", ",", "beam_size", "-", "completed_hyp_num", ")", "\n", "if", "live_hyp_num", "<", "1", ":", "\n", "                ", "break", "\n", "\n", "", "hyp_samples", "=", "new_hyp_samples", "\n", "# hyp_samples = sorted(new_hyp_samples, key=lambda x: x.score, reverse=True)[:live_hyp_num]", "\n", "\n", "", "completed_hyps", "=", "sorted", "(", "completed_hyps", ",", "key", "=", "lambda", "x", ":", "x", ".", "score", ",", "reverse", "=", "True", ")", "\n", "\n", "return", "completed_hyps", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.model.Model.params_name_to_id": [[589, 599], ["dict", "enumerate"], "methods", ["None"], ["", "@", "property", "\n", "def", "params_name_to_id", "(", "self", ")", ":", "\n", "        ", "name_to_id", "=", "dict", "(", ")", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "self", ".", "params", ")", ":", "\n", "            ", "assert", "p", ".", "name", "is", "not", "None", "\n", "# print 'parameter [%s]' % p.name", "\n", "\n", "name_to_id", "[", "p", ".", "name", "]", "=", "i", "\n", "\n", "", "return", "name_to_id", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.model.Model.params_dict": [[600, 604], ["collections.OrderedDict", "len", "len", "set"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set"], ["", "@", "property", "\n", "def", "params_dict", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "set", "(", "p", ".", "name", "for", "p", "in", "self", ".", "params", ")", ")", "==", "len", "(", "self", ".", "params", ")", ",", "'param name clashes!'", "\n", "return", "OrderedDict", "(", "(", "p", ".", "name", ",", "p", ")", "for", "p", "in", "self", ".", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.model.Model.pull_params": [[605, 607], ["collections.OrderedDict", "p.get_value", "model.Model.params_dict.iteritems"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.iteritems"], ["", "def", "pull_params", "(", "self", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "[", "(", "p_name", ",", "p", ".", "get_value", "(", "borrow", "=", "False", ")", ")", "for", "(", "p_name", ",", "p", ")", "in", "self", ".", "params_dict", ".", "iteritems", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.model.Model.save": [[608, 616], ["logging.info", "model.Model.pull_params", "kwargs.iteritems", "numpy.savez"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.model.Model.pull_params", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.iteritems"], ["", "def", "save", "(", "self", ",", "model_file", ",", "**", "kwargs", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'save model to [%s]'", ",", "model_file", ")", "\n", "\n", "weights_dict", "=", "self", ".", "pull_params", "(", ")", "\n", "for", "k", ",", "v", "in", "kwargs", ".", "iteritems", "(", ")", ":", "\n", "            ", "weights_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "np", ".", "savez", "(", "model_file", ",", "**", "weights_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.model.Model.load": [[617, 632], ["logging.info", "numpy.load", "model.Model.params_dict.iteritems", "RuntimeError", "logging.info", "numpy.array_equal", "p.set_value", "p.shape.eval", "p.shape.eval"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.iteritems"], ["", "def", "load", "(", "self", ",", "model_file", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'load model from [%s]'", ",", "model_file", ")", "\n", "weights_dict", "=", "np", ".", "load", "(", "model_file", ")", "\n", "\n", "# assert len(weights_dict.files) == len(self.params_dict)", "\n", "\n", "for", "p_name", ",", "p", "in", "self", ".", "params_dict", ".", "iteritems", "(", ")", ":", "\n", "            ", "if", "p_name", "not", "in", "weights_dict", ":", "\n", "                ", "raise", "RuntimeError", "(", "'parameter [%s] not in saved weights file'", ",", "p_name", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "info", "(", "'loading parameter [%s]'", ",", "p_name", ")", "\n", "assert", "np", ".", "array_equal", "(", "p", ".", "shape", ".", "eval", "(", ")", ",", "weights_dict", "[", "p_name", "]", ".", "shape", ")", ",", "'shape mis-match for [%s]!, %s != %s'", "%", "(", "p_name", ",", "p", ".", "shape", ".", "eval", "(", ")", ",", "weights_dict", "[", "p_name", "]", ".", "shape", ")", "\n", "\n", "p", ".", "set_value", "(", "weights_dict", "[", "p_name", "]", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.util.is_numeric": [[1, 5], ["s.isdigit", "s[].isdigit"], "function", ["None"], ["def", "is_numeric", "(", "s", ")", ":", "\n", "    ", "if", "s", "[", "0", "]", "in", "(", "'-'", ",", "'+'", ")", ":", "\n", "        ", "return", "s", "[", "1", ":", "]", ".", "isdigit", "(", ")", "\n", "", "return", "s", ".", "isdigit", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.PointerNet.__init__": [[22, 34], ["nn.layers.core.Layer.__init__", "nn.layers.core.Dense", "nn.layers.core.Dense", "nn.layers.core.Dense", "nn.layers.core.Dense", "nn.layers.core.Dense", "nn.layers.core.Dense", "nn.layers.core.Dense", "nn.layers.core.Dense", "nn.layers.core.Dense", "components.PointerNet.set_name"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Dense.set_name"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "'PointerNet'", ")", ":", "\n", "        ", "super", "(", "PointerNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dense1_input", "=", "Dense", "(", "config", ".", "encoder_hidden_dim", ",", "config", ".", "ptrnet_hidden_dim", ",", "activation", "=", "'linear'", ",", "name", "=", "'Dense1_input'", ")", "\n", "\n", "self", ".", "dense1_h", "=", "Dense", "(", "config", ".", "decoder_hidden_dim", "+", "config", ".", "encoder_hidden_dim", ",", "config", ".", "ptrnet_hidden_dim", ",", "activation", "=", "'linear'", ",", "name", "=", "'Dense1_h'", ")", "\n", "\n", "self", ".", "dense2", "=", "Dense", "(", "config", ".", "ptrnet_hidden_dim", ",", "1", ",", "activation", "=", "'linear'", ",", "name", "=", "'Dense2'", ")", "\n", "\n", "self", ".", "params", "+=", "self", ".", "dense1_input", ".", "params", "+", "self", ".", "dense1_h", ".", "params", "+", "self", ".", "dense2", ".", "params", "\n", "\n", "self", ".", "set_name", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.PointerNet.__call__": [[35, 52], ["components.PointerNet.dense1_input", "components.PointerNet.dense1_h", "query_embed_trans.dimshuffle.dimshuffle.dimshuffle", "h_trans.dimshuffle.dimshuffle.dimshuffle", "theano.tanh", "theano.tanh", "components.PointerNet.dense2().flatten", "theano.exp", "theano.exp", "query_token_embed_mask.dimshuffle", "theano.sum", "theano.sum", "components.PointerNet.dense2", "theano.max", "theano.max"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh"], ["", "def", "__call__", "(", "self", ",", "query_embed", ",", "query_token_embed_mask", ",", "decoder_states", ")", ":", "\n", "        ", "query_embed_trans", "=", "self", ".", "dense1_input", "(", "query_embed", ")", "\n", "h_trans", "=", "self", ".", "dense1_h", "(", "decoder_states", ")", "\n", "\n", "query_embed_trans", "=", "query_embed_trans", ".", "dimshuffle", "(", "(", "0", ",", "'x'", ",", "1", ",", "2", ")", ")", "\n", "h_trans", "=", "h_trans", ".", "dimshuffle", "(", "(", "0", ",", "1", ",", "'x'", ",", "2", ")", ")", "\n", "\n", "# (batch_size, max_decode_step, query_token_num, ptr_net_hidden_dim)", "\n", "dense1_trans", "=", "T", ".", "tanh", "(", "query_embed_trans", "+", "h_trans", ")", "\n", "\n", "scores", "=", "self", ".", "dense2", "(", "dense1_trans", ")", ".", "flatten", "(", "3", ")", "\n", "\n", "scores", "=", "T", ".", "exp", "(", "scores", "-", "T", ".", "max", "(", "scores", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "scores", "*=", "query_token_embed_mask", ".", "dimshuffle", "(", "(", "0", ",", "'x'", ",", "1", ")", ")", "\n", "scores", "=", "scores", "/", "T", ".", "sum", "(", "scores", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.Hyp.__init__": [[54, 77], ["isinstance", "hyp.tree.copy", "list", "isinstance", "DecodeTree"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "if", "isinstance", "(", "args", "[", "0", "]", ",", "Hyp", ")", ":", "\n", "            ", "hyp", "=", "args", "[", "0", "]", "\n", "self", ".", "grammar", "=", "hyp", ".", "grammar", "\n", "self", ".", "tree", "=", "hyp", ".", "tree", ".", "copy", "(", ")", "\n", "self", ".", "t", "=", "hyp", ".", "t", "\n", "self", ".", "hist_h", "=", "list", "(", "hyp", ".", "hist_h", ")", "\n", "self", ".", "log", "=", "hyp", ".", "log", "\n", "self", ".", "has_grammar_error", "=", "hyp", ".", "has_grammar_error", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "args", "[", "0", "]", ",", "Grammar", ")", "\n", "grammar", "=", "args", "[", "0", "]", "\n", "self", ".", "grammar", "=", "grammar", "\n", "self", ".", "tree", "=", "DecodeTree", "(", "grammar", ".", "root_node", ".", "type", ")", "\n", "self", ".", "t", "=", "-", "1", "\n", "self", ".", "hist_h", "=", "[", "]", "\n", "self", ".", "log", "=", "''", "\n", "self", ".", "has_grammar_error", "=", "False", "\n", "\n", "", "self", ".", "score", "=", "0.0", "\n", "\n", "self", ".", "__frontier_nt", "=", "self", ".", "tree", "\n", "self", ".", "__frontier_nt_t", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.Hyp.__repr__": [[78, 80], ["components.Hyp.tree.__repr__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.FunctionType.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tree", ".", "__repr__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.Hyp.can_expand": [[81, 103], ["components.Hyp.grammar.is_value_node", "components.Hyp.grammar.is_terminal", "node.value.endswith"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.py.grammar.PythonGrammar.is_value_node", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.lang.grammar.Grammar.is_terminal"], ["", "def", "can_expand", "(", "self", ",", "node", ")", ":", "\n", "        ", "if", "self", ".", "grammar", ".", "is_value_node", "(", "node", ")", ":", "\n", "# if the node is finished", "\n", "            ", "if", "node", ".", "value", "is", "not", "None", "and", "node", ".", "value", ".", "endswith", "(", "'<eos>'", ")", ":", "\n", "                ", "return", "False", "\n", "", "return", "True", "\n", "", "elif", "self", ".", "grammar", ".", "is_terminal", "(", "node", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "# elif node.type == 'epsilon':", "\n", "#     return False", "\n", "# elif is_terminal_ast_type(node.type):", "\n", "#     return False", "\n", "\n", "# if node.type == 'root':", "\n", "#     return True", "\n", "# elif inspect.isclass(node.type) and issubclass(node.type, ast.AST) and not is_terminal_ast_type(node.type):", "\n", "#     return True", "\n", "# elif node.holds_value and not node.label.endswith('<eos>'):", "\n", "#     return True", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.Hyp.apply_rule": [[104, 125], ["components.Hyp.frontier_nt", "DecodeTree", "components.Hyp.add_child"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.Hyp.frontier_nt"], ["", "def", "apply_rule", "(", "self", ",", "rule", ",", "nt", "=", "None", ")", ":", "\n", "        ", "if", "nt", "is", "None", ":", "\n", "            ", "nt", "=", "self", ".", "frontier_nt", "(", ")", "\n", "\n", "# assert rule.parent.type == nt.type", "\n", "", "if", "rule", ".", "parent", ".", "type", "!=", "nt", ".", "type", ":", "\n", "            ", "self", ".", "has_grammar_error", "=", "True", "\n", "\n", "", "self", ".", "t", "+=", "1", "\n", "# set the time step when the rule leading by this nt is applied", "\n", "nt", ".", "t", "=", "self", ".", "t", "\n", "# record the ApplyRule action that is used to expand the current node", "\n", "nt", ".", "applied_rule", "=", "rule", "\n", "\n", "for", "child_node", "in", "rule", ".", "children", ":", "\n", "            ", "child", "=", "DecodeTree", "(", "child_node", ".", "type", ",", "child_node", ".", "label", ",", "child_node", ".", "value", ")", "\n", "# if is_builtin_type(rule.parent.type):", "\n", "#     child.label = None", "\n", "#     child.holds_value = True", "\n", "\n", "nt", ".", "add_child", "(", "child", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.Hyp.append_token": [[126, 138], ["components.Hyp.frontier_nt"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.Hyp.frontier_nt"], ["", "", "def", "append_token", "(", "self", ",", "token", ",", "nt", "=", "None", ")", ":", "\n", "        ", "if", "nt", "is", "None", ":", "\n", "            ", "nt", "=", "self", ".", "frontier_nt", "(", ")", "\n", "\n", "", "self", ".", "t", "+=", "1", "\n", "\n", "if", "nt", ".", "value", "is", "None", ":", "\n", "# this terminal node is empty", "\n", "            ", "nt", ".", "t", "=", "self", ".", "t", "\n", "nt", ".", "value", "=", "token", "\n", "", "else", ":", "\n", "            ", "nt", ".", "value", "+=", "token", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.Hyp.frontier_nt_helper": [[139, 152], ["components.Hyp.can_expand", "components.Hyp.frontier_nt_helper"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.Hyp.can_expand", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.Hyp.frontier_nt_helper"], ["", "", "def", "frontier_nt_helper", "(", "self", ",", "node", ")", ":", "\n", "        ", "if", "node", ".", "is_leaf", ":", "\n", "            ", "if", "self", ".", "can_expand", "(", "node", ")", ":", "\n", "                ", "return", "node", "\n", "", "else", ":", "\n", "                ", "return", "None", "\n", "\n", "", "", "for", "child", "in", "node", ".", "children", ":", "\n", "            ", "result", "=", "self", ".", "frontier_nt_helper", "(", "child", ")", "\n", "if", "result", ":", "\n", "                ", "return", "result", "\n", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.Hyp.frontier_nt": [[153, 162], ["components.Hyp.frontier_nt_helper"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.Hyp.frontier_nt_helper"], ["", "def", "frontier_nt", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "__frontier_nt_t", "==", "self", ".", "t", ":", "\n", "            ", "return", "self", ".", "__frontier_nt", "\n", "", "else", ":", "\n", "            ", "_frontier_nt", "=", "self", ".", "frontier_nt_helper", "(", "self", ".", "tree", ")", "\n", "self", ".", "__frontier_nt", "=", "_frontier_nt", "\n", "self", ".", "__frontier_nt_t", "=", "self", ".", "t", "\n", "\n", "return", "_frontier_nt", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.Hyp.get_action_parent_t": [[163, 179], ["components.Hyp.frontier_nt"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.Hyp.frontier_nt"], ["", "", "def", "get_action_parent_t", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        get the time step when the parent of the current\n        action was generated\n        WARNING: 0 will be returned if parent if None\n        \"\"\"", "\n", "nt", "=", "self", ".", "frontier_nt", "(", ")", "\n", "\n", "# if nt is a non-finishing leaf", "\n", "# if nt.holds_value:", "\n", "#     return nt.t", "\n", "\n", "if", "nt", ".", "parent", ":", "\n", "            ", "return", "nt", ".", "parent", ".", "t", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.CondAttLSTM.__init__": [[199, 279], ["nn.layers.core.Layer.__init__", "nn.get", "nn.get", "nn.get", "nn.get", "nn.get", "nn.get", "nn.get", "nn.get", "nn.get", "nn.get", "nn.get", "nn.get", "nn.get", "nn.get", "nn.get", "components.CondAttLSTM.init", "components.CondAttLSTM.inner_init", "components.CondAttLSTM.inner_init", "components.CondAttLSTM.inner_init", "components.CondAttLSTM.inner_init", "nn.utils.theano_utils.shared_zeros", "nn.utils.theano_utils.shared_zeros", "nn.utils.theano_utils.shared_zeros", "components.CondAttLSTM.init", "components.CondAttLSTM.inner_init", "components.CondAttLSTM.inner_init", "components.CondAttLSTM.inner_init", "components.CondAttLSTM.inner_init", "components.CondAttLSTM.forget_bias_init", "components.CondAttLSTM.init", "components.CondAttLSTM.inner_init", "components.CondAttLSTM.inner_init", "components.CondAttLSTM.inner_init", "components.CondAttLSTM.inner_init", "nn.utils.theano_utils.shared_zeros", "nn.utils.theano_utils.shared_zeros", "nn.utils.theano_utils.shared_zeros", "components.CondAttLSTM.init", "components.CondAttLSTM.inner_init", "components.CondAttLSTM.inner_init", "components.CondAttLSTM.inner_init", "components.CondAttLSTM.inner_init", "nn.utils.theano_utils.shared_zeros", "nn.utils.theano_utils.shared_zeros", "nn.utils.theano_utils.shared_zeros", "components.CondAttLSTM.init", "components.CondAttLSTM.init", "nn.utils.theano_utils.shared_zeros", "nn.utils.theano_utils.shared_zeros", "nn.utils.theano_utils.shared_zeros", "components.CondAttLSTM.init", "nn.utils.theano_utils.shared_zeros", "nn.utils.theano_utils.shared_zeros", "nn.utils.theano_utils.shared_zeros", "components.CondAttLSTM.init", "components.CondAttLSTM.init", "nn.utils.theano_utils.shared_zeros", "nn.utils.theano_utils.shared_zeros", "nn.utils.theano_utils.shared_zeros", "components.CondAttLSTM.init", "nn.utils.theano_utils.shared_zeros", "nn.utils.theano_utils.shared_zeros", "nn.utils.theano_utils.shared_zeros", "components.CondAttLSTM.set_name"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Dense.set_name"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "\n", "context_dim", ",", "att_hidden_dim", ",", "\n", "init", "=", "'glorot_uniform'", ",", "inner_init", "=", "'orthogonal'", ",", "forget_bias_init", "=", "'one'", ",", "\n", "activation", "=", "'tanh'", ",", "inner_activation", "=", "'sigmoid'", ",", "name", "=", "'CondAttLSTM'", ")", ":", "\n", "\n", "        ", "super", "(", "CondAttLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "init", "=", "initializations", ".", "get", "(", "init", ")", "\n", "self", ".", "inner_init", "=", "initializations", ".", "get", "(", "inner_init", ")", "\n", "self", ".", "forget_bias_init", "=", "initializations", ".", "get", "(", "forget_bias_init", ")", "\n", "self", ".", "activation", "=", "activations", ".", "get", "(", "activation", ")", "\n", "self", ".", "inner_activation", "=", "activations", ".", "get", "(", "inner_activation", ")", "\n", "self", ".", "context_dim", "=", "context_dim", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "\n", "# regular LSTM layer", "\n", "\n", "self", ".", "W_i", "=", "self", ".", "init", "(", "(", "input_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "U_i", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "C_i", "=", "self", ".", "inner_init", "(", "(", "self", ".", "context_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "H_i", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "P_i", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "b_i", "=", "shared_zeros", "(", "(", "self", ".", "output_dim", ")", ")", "\n", "\n", "self", ".", "W_f", "=", "self", ".", "init", "(", "(", "input_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "U_f", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "C_f", "=", "self", ".", "inner_init", "(", "(", "self", ".", "context_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "H_f", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "P_f", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "b_f", "=", "self", ".", "forget_bias_init", "(", "(", "self", ".", "output_dim", ")", ")", "\n", "\n", "self", ".", "W_c", "=", "self", ".", "init", "(", "(", "input_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "U_c", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "C_c", "=", "self", ".", "inner_init", "(", "(", "self", ".", "context_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "H_c", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "P_c", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "b_c", "=", "shared_zeros", "(", "(", "self", ".", "output_dim", ")", ")", "\n", "\n", "self", ".", "W_o", "=", "self", ".", "init", "(", "(", "input_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "U_o", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "C_o", "=", "self", ".", "inner_init", "(", "(", "self", ".", "context_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "H_o", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "P_o", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "b_o", "=", "shared_zeros", "(", "(", "self", ".", "output_dim", ")", ")", "\n", "\n", "self", ".", "params", "=", "[", "\n", "self", ".", "W_i", ",", "self", ".", "U_i", ",", "self", ".", "b_i", ",", "self", ".", "C_i", ",", "self", ".", "H_i", ",", "self", ".", "P_i", ",", "\n", "self", ".", "W_c", ",", "self", ".", "U_c", ",", "self", ".", "b_c", ",", "self", ".", "C_c", ",", "self", ".", "H_c", ",", "self", ".", "P_c", ",", "\n", "self", ".", "W_f", ",", "self", ".", "U_f", ",", "self", ".", "b_f", ",", "self", ".", "C_f", ",", "self", ".", "H_f", ",", "self", ".", "P_f", ",", "\n", "self", ".", "W_o", ",", "self", ".", "U_o", ",", "self", ".", "b_o", ",", "self", ".", "C_o", ",", "self", ".", "H_o", ",", "self", ".", "P_o", ",", "\n", "]", "\n", "\n", "# attention layer", "\n", "self", ".", "att_ctx_W1", "=", "self", ".", "init", "(", "(", "context_dim", ",", "att_hidden_dim", ")", ")", "\n", "self", ".", "att_h_W1", "=", "self", ".", "init", "(", "(", "output_dim", ",", "att_hidden_dim", ")", ")", "\n", "self", ".", "att_b1", "=", "shared_zeros", "(", "(", "att_hidden_dim", ")", ")", "\n", "\n", "self", ".", "att_W2", "=", "self", ".", "init", "(", "(", "att_hidden_dim", ",", "1", ")", ")", "\n", "self", ".", "att_b2", "=", "shared_zeros", "(", "(", "1", ")", ")", "\n", "\n", "self", ".", "params", "+=", "[", "\n", "self", ".", "att_ctx_W1", ",", "self", ".", "att_h_W1", ",", "self", ".", "att_b1", ",", "\n", "self", ".", "att_W2", ",", "self", ".", "att_b2", "\n", "]", "\n", "\n", "# attention over history", "\n", "self", ".", "hatt_h_W1", "=", "self", ".", "init", "(", "(", "output_dim", ",", "att_hidden_dim", ")", ")", "\n", "self", ".", "hatt_hist_W1", "=", "self", ".", "init", "(", "(", "output_dim", ",", "att_hidden_dim", ")", ")", "\n", "self", ".", "hatt_b1", "=", "shared_zeros", "(", "(", "att_hidden_dim", ")", ")", "\n", "\n", "self", ".", "hatt_W2", "=", "self", ".", "init", "(", "(", "att_hidden_dim", ",", "1", ")", ")", "\n", "self", ".", "hatt_b2", "=", "shared_zeros", "(", "(", "1", ")", ")", "\n", "\n", "self", ".", "params", "+=", "[", "\n", "self", ".", "hatt_h_W1", ",", "self", ".", "hatt_hist_W1", ",", "self", ".", "hatt_b1", ",", "\n", "self", ".", "hatt_W2", ",", "self", ".", "hatt_b2", "\n", "]", "\n", "\n", "self", ".", "set_name", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.CondAttLSTM._step": [[280, 384], ["theano.dot", "theano.dot", "theano.tanh", "theano.tanh", "att_raw.reshape.reshape.reshape", "theano.exp", "theano.exp", "theano.sum", "theano.sum", "theano.switch", "theano.switch", "theano.switch", "theano.switch", "theano.set_subtensor", "theano.set_subtensor", "theano.dot", "theano.dot", "theano.sum", "theano.sum", "theano.zeros", "theano.zeros", "theano.set_subtensor", "theano.set_subtensor", "theano.dot", "theano.dot", "theano.tanh", "theano.tanh", "hatt_raw.reshape.reshape.reshape", "theano.sum", "theano.sum", "components.CondAttLSTM._step._attention_over_history"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh"], ["", "def", "_step", "(", "self", ",", "\n", "t", ",", "xi_t", ",", "xf_t", ",", "xo_t", ",", "xc_t", ",", "mask_t", ",", "parent_t", ",", "\n", "h_tm1", ",", "c_tm1", ",", "hist_h", ",", "\n", "u_i", ",", "u_f", ",", "u_o", ",", "u_c", ",", "\n", "c_i", ",", "c_f", ",", "c_o", ",", "c_c", ",", "\n", "h_i", ",", "h_f", ",", "h_o", ",", "h_c", ",", "\n", "p_i", ",", "p_f", ",", "p_o", ",", "p_c", ",", "\n", "att_h_w1", ",", "att_w2", ",", "att_b2", ",", "\n", "context", ",", "context_mask", ",", "context_att_trans", ",", "\n", "b_u", ")", ":", "\n", "\n", "# context: (batch_size, context_size, context_dim)", "\n", "\n", "# (batch_size, att_layer1_dim)", "\n", "        ", "h_tm1_att_trans", "=", "T", ".", "dot", "(", "h_tm1", ",", "att_h_w1", ")", "\n", "\n", "# h_tm1_att_trans = theano.printing.Print('h_tm1_att_trans')(h_tm1_att_trans)", "\n", "\n", "# (batch_size, context_size, att_layer1_dim)", "\n", "att_hidden", "=", "T", ".", "tanh", "(", "context_att_trans", "+", "h_tm1_att_trans", "[", ":", ",", "None", ",", ":", "]", ")", "\n", "# (batch_size, context_size, 1)", "\n", "att_raw", "=", "T", ".", "dot", "(", "att_hidden", ",", "att_w2", ")", "+", "att_b2", "\n", "att_raw", "=", "att_raw", ".", "reshape", "(", "(", "att_raw", ".", "shape", "[", "0", "]", ",", "att_raw", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "# (batch_size, context_size)", "\n", "ctx_att", "=", "T", ".", "exp", "(", "att_raw", "-", "T", ".", "max", "(", "att_raw", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "\n", "if", "context_mask", ":", "\n", "            ", "ctx_att", "=", "ctx_att", "*", "context_mask", "\n", "\n", "", "ctx_att", "=", "ctx_att", "/", "T", ".", "sum", "(", "ctx_att", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "# (batch_size, context_dim)", "\n", "ctx_vec", "=", "T", ".", "sum", "(", "context", "*", "ctx_att", "[", ":", ",", ":", ",", "None", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# t = theano.printing.Print('t')(t)", "\n", "\n", "##### attention over history #####", "\n", "\n", "def", "_attention_over_history", "(", ")", ":", "\n", "            ", "hist_h_mask", "=", "T", ".", "zeros", "(", "(", "hist_h", ".", "shape", "[", "0", "]", ",", "hist_h", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "'int8'", ")", "\n", "hist_h_mask", "=", "T", ".", "set_subtensor", "(", "hist_h_mask", "[", ":", ",", "T", ".", "arange", "(", "t", ")", "]", ",", "1", ")", "\n", "\n", "hist_h_att_trans", "=", "T", ".", "dot", "(", "hist_h", ",", "self", ".", "hatt_hist_W1", ")", "+", "self", ".", "hatt_b1", "\n", "h_tm1_hatt_trans", "=", "T", ".", "dot", "(", "h_tm1", ",", "self", ".", "hatt_h_W1", ")", "\n", "\n", "hatt_hidden", "=", "T", ".", "tanh", "(", "hist_h_att_trans", "+", "h_tm1_hatt_trans", "[", ":", ",", "None", ",", ":", "]", ")", "\n", "hatt_raw", "=", "T", ".", "dot", "(", "hatt_hidden", ",", "self", ".", "hatt_W2", ")", "+", "self", ".", "hatt_b2", "\n", "hatt_raw", "=", "hatt_raw", ".", "reshape", "(", "(", "hist_h", ".", "shape", "[", "0", "]", ",", "hist_h", ".", "shape", "[", "1", "]", ")", ")", "\n", "# hatt_raw = theano.printing.Print('hatt_raw')(hatt_raw)", "\n", "hatt_exp", "=", "T", ".", "exp", "(", "hatt_raw", "-", "T", ".", "max", "(", "hatt_raw", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", ")", "*", "hist_h_mask", "\n", "# hatt_exp = theano.printing.Print('hatt_exp')(hatt_exp)", "\n", "# hatt_exp = hatt_exp.flatten(2)", "\n", "h_att_weights", "=", "hatt_exp", "/", "(", "T", ".", "sum", "(", "hatt_exp", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "+", "1e-7", ")", "\n", "# h_att_weights = theano.printing.Print('h_att_weights')(h_att_weights)", "\n", "\n", "# (batch_size, output_dim)", "\n", "_h_ctx_vec", "=", "T", ".", "sum", "(", "hist_h", "*", "h_att_weights", "[", ":", ",", ":", ",", "None", "]", ",", "axis", "=", "1", ")", "\n", "\n", "return", "_h_ctx_vec", "\n", "\n", "", "h_ctx_vec", "=", "T", ".", "switch", "(", "t", ",", "\n", "_attention_over_history", "(", ")", ",", "\n", "T", ".", "zeros_like", "(", "h_tm1", ")", ")", "\n", "\n", "# h_ctx_vec = theano.printing.Print('h_ctx_vec')(h_ctx_vec)", "\n", "\n", "##### attention over history #####", "\n", "\n", "##### feed in parent hidden state #####", "\n", "\n", "if", "not", "config", ".", "parent_hidden_state_feed", ":", "\n", "            ", "t", "=", "0", "\n", "\n", "", "par_h", "=", "T", ".", "switch", "(", "t", ",", "\n", "hist_h", "[", "T", ".", "arange", "(", "hist_h", ".", "shape", "[", "0", "]", ")", ",", "parent_t", ",", ":", "]", ",", "\n", "T", ".", "zeros_like", "(", "h_tm1", ")", ")", "\n", "\n", "##### feed in parent hidden state #####", "\n", "if", "config", ".", "tree_attention", ":", "\n", "            ", "i_t", "=", "self", ".", "inner_activation", "(", "\n", "xi_t", "+", "T", ".", "dot", "(", "h_tm1", "*", "b_u", "[", "0", "]", ",", "u_i", ")", "+", "T", ".", "dot", "(", "ctx_vec", ",", "c_i", ")", "+", "T", ".", "dot", "(", "par_h", ",", "p_i", ")", "+", "T", ".", "dot", "(", "h_ctx_vec", ",", "h_i", ")", ")", "\n", "f_t", "=", "self", ".", "inner_activation", "(", "\n", "xf_t", "+", "T", ".", "dot", "(", "h_tm1", "*", "b_u", "[", "1", "]", ",", "u_f", ")", "+", "T", ".", "dot", "(", "ctx_vec", ",", "c_f", ")", "+", "T", ".", "dot", "(", "par_h", ",", "p_f", ")", "+", "T", ".", "dot", "(", "h_ctx_vec", ",", "h_f", ")", ")", "\n", "c_t", "=", "f_t", "*", "c_tm1", "+", "i_t", "*", "self", ".", "activation", "(", "\n", "xc_t", "+", "T", ".", "dot", "(", "h_tm1", "*", "b_u", "[", "2", "]", ",", "u_c", ")", "+", "T", ".", "dot", "(", "ctx_vec", ",", "c_c", ")", "+", "T", ".", "dot", "(", "par_h", ",", "p_c", ")", "+", "T", ".", "dot", "(", "h_ctx_vec", ",", "h_c", ")", ")", "\n", "o_t", "=", "self", ".", "inner_activation", "(", "\n", "xo_t", "+", "T", ".", "dot", "(", "h_tm1", "*", "b_u", "[", "3", "]", ",", "u_o", ")", "+", "T", ".", "dot", "(", "ctx_vec", ",", "c_o", ")", "+", "T", ".", "dot", "(", "par_h", ",", "p_o", ")", "+", "T", ".", "dot", "(", "h_ctx_vec", ",", "h_o", ")", ")", "\n", "", "else", ":", "\n", "            ", "i_t", "=", "self", ".", "inner_activation", "(", "\n", "xi_t", "+", "T", ".", "dot", "(", "h_tm1", "*", "b_u", "[", "0", "]", ",", "u_i", ")", "+", "T", ".", "dot", "(", "ctx_vec", ",", "c_i", ")", "+", "T", ".", "dot", "(", "par_h", ",", "p_i", ")", ")", "# + T.dot(h_ctx_vec, h_i)", "\n", "f_t", "=", "self", ".", "inner_activation", "(", "\n", "xf_t", "+", "T", ".", "dot", "(", "h_tm1", "*", "b_u", "[", "1", "]", ",", "u_f", ")", "+", "T", ".", "dot", "(", "ctx_vec", ",", "c_f", ")", "+", "T", ".", "dot", "(", "par_h", ",", "p_f", ")", ")", "# + T.dot(h_ctx_vec, h_f)", "\n", "c_t", "=", "f_t", "*", "c_tm1", "+", "i_t", "*", "self", ".", "activation", "(", "\n", "xc_t", "+", "T", ".", "dot", "(", "h_tm1", "*", "b_u", "[", "2", "]", ",", "u_c", ")", "+", "T", ".", "dot", "(", "ctx_vec", ",", "c_c", ")", "+", "T", ".", "dot", "(", "par_h", ",", "p_c", ")", ")", "# + T.dot(h_ctx_vec, h_c)", "\n", "o_t", "=", "self", ".", "inner_activation", "(", "\n", "xo_t", "+", "T", ".", "dot", "(", "h_tm1", "*", "b_u", "[", "3", "]", ",", "u_o", ")", "+", "T", ".", "dot", "(", "ctx_vec", ",", "c_o", ")", "+", "T", ".", "dot", "(", "par_h", ",", "p_o", ")", ")", "# + T.dot(h_ctx_vec, h_o)", "\n", "", "h_t", "=", "o_t", "*", "self", ".", "activation", "(", "c_t", ")", "\n", "\n", "h_t", "=", "(", "1", "-", "mask_t", ")", "*", "h_tm1", "+", "mask_t", "*", "h_t", "\n", "c_t", "=", "(", "1", "-", "mask_t", ")", "*", "c_tm1", "+", "mask_t", "*", "c_t", "\n", "\n", "new_hist_h", "=", "T", ".", "set_subtensor", "(", "hist_h", "[", ":", ",", "t", ",", ":", "]", ",", "h_t", ")", "\n", "\n", "return", "h_t", ",", "c_t", ",", "ctx_vec", ",", "new_hist_h", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.CondAttLSTM._for_step": [[385, 445], ["theano.dot", "theano.dot", "theano.tanh", "theano.tanh", "theano.exp().reshape", "theano.exp().reshape", "theano.sum", "theano.sum", "components.CondAttLSTM.inner_activation", "components.CondAttLSTM.inner_activation", "components.CondAttLSTM.inner_activation", "theano.dot", "theano.dot", "theano.sum", "theano.sum", "theano.stack().dimshuffle", "theano.stack().dimshuffle", "theano.stack().dimshuffle", "theano.stack().dimshuffle", "theano.dot", "theano.dot", "theano.tanh", "theano.tanh", "hatt_raw.flatten.flatten.flatten", "theano.nnet.softmax", "theano.nnet.softmax", "theano.sum", "theano.sum", "theano.zeros_like", "theano.zeros_like", "components.CondAttLSTM.activation", "theano.exp", "theano.exp", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "components.CondAttLSTM.activation", "theano.dot", "theano.dot", "theano.stack", "theano.stack", "theano.stack", "theano.stack", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax"], ["", "def", "_for_step", "(", "self", ",", "\n", "xi_t", ",", "xf_t", ",", "xo_t", ",", "xc_t", ",", "mask_t", ",", "\n", "h_tm1", ",", "c_tm1", ",", "\n", "context", ",", "context_mask", ",", "context_att_trans", ",", "\n", "hist_h", ",", "hist_h_att_trans", ",", "\n", "b_u", ")", ":", "\n", "\n", "# context: (batch_size, context_size, context_dim)", "\n", "\n", "# (batch_size, att_layer1_dim)", "\n", "        ", "h_tm1_att_trans", "=", "T", ".", "dot", "(", "h_tm1", ",", "self", ".", "att_h_W1", ")", "\n", "\n", "# (batch_size, context_size, att_layer1_dim)", "\n", "att_hidden", "=", "T", ".", "tanh", "(", "context_att_trans", "+", "h_tm1_att_trans", "[", ":", ",", "None", ",", ":", "]", ")", "\n", "\n", "# (batch_size, context_size, 1)", "\n", "att_raw", "=", "T", ".", "dot", "(", "att_hidden", ",", "self", ".", "att_W2", ")", "+", "self", ".", "att_b2", "\n", "\n", "# (batch_size, context_size)", "\n", "ctx_att", "=", "T", ".", "exp", "(", "att_raw", ")", ".", "reshape", "(", "(", "att_raw", ".", "shape", "[", "0", "]", ",", "att_raw", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "if", "context_mask", ":", "\n", "            ", "ctx_att", "=", "ctx_att", "*", "context_mask", "\n", "\n", "", "ctx_att", "=", "ctx_att", "/", "T", ".", "sum", "(", "ctx_att", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "# (batch_size, context_dim)", "\n", "ctx_vec", "=", "T", ".", "sum", "(", "context", "*", "ctx_att", "[", ":", ",", ":", ",", "None", "]", ",", "axis", "=", "1", ")", "\n", "\n", "##### attention over history #####", "\n", "\n", "if", "hist_h", ":", "\n", "            ", "hist_h", "=", "T", ".", "stack", "(", "hist_h", ")", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "hist_h_att_trans", "=", "T", ".", "stack", "(", "hist_h_att_trans", ")", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "h_tm1_hatt_trans", "=", "T", ".", "dot", "(", "h_tm1", ",", "self", ".", "hatt_h_W1", ")", "\n", "\n", "hatt_hidden", "=", "T", ".", "tanh", "(", "hist_h_att_trans", "+", "h_tm1_hatt_trans", "[", ":", ",", "None", ",", ":", "]", ")", "\n", "hatt_raw", "=", "T", ".", "dot", "(", "hatt_hidden", ",", "self", ".", "hatt_W2", ")", "+", "self", ".", "hatt_b2", "\n", "hatt_raw", "=", "hatt_raw", ".", "flatten", "(", "2", ")", "\n", "h_att_weights", "=", "T", ".", "nnet", ".", "softmax", "(", "hatt_raw", ")", "\n", "\n", "# (batch_size, output_dim)", "\n", "h_ctx_vec", "=", "T", ".", "sum", "(", "hist_h", "*", "h_att_weights", "[", ":", ",", ":", ",", "None", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "h_ctx_vec", "=", "T", ".", "zeros_like", "(", "h_tm1", ")", "\n", "\n", "##### attention over history #####", "\n", "\n", "", "i_t", "=", "self", ".", "inner_activation", "(", "xi_t", "+", "T", ".", "dot", "(", "h_tm1", "*", "b_u", "[", "0", "]", ",", "self", ".", "U_i", ")", "+", "T", ".", "dot", "(", "ctx_vec", ",", "self", ".", "C_i", ")", "+", "T", ".", "dot", "(", "h_ctx_vec", ",", "self", ".", "H_i", ")", ")", "\n", "f_t", "=", "self", ".", "inner_activation", "(", "xf_t", "+", "T", ".", "dot", "(", "h_tm1", "*", "b_u", "[", "1", "]", ",", "self", ".", "U_f", ")", "+", "T", ".", "dot", "(", "ctx_vec", ",", "self", ".", "C_f", ")", "+", "T", ".", "dot", "(", "h_ctx_vec", ",", "self", ".", "H_f", ")", ")", "\n", "c_t", "=", "f_t", "*", "c_tm1", "+", "i_t", "*", "self", ".", "activation", "(", "xc_t", "+", "T", ".", "dot", "(", "h_tm1", "*", "b_u", "[", "2", "]", ",", "self", ".", "U_c", ")", "+", "T", ".", "dot", "(", "ctx_vec", ",", "self", ".", "C_c", ")", "+", "T", ".", "dot", "(", "h_ctx_vec", ",", "self", ".", "H_c", ")", ")", "\n", "o_t", "=", "self", ".", "inner_activation", "(", "xo_t", "+", "T", ".", "dot", "(", "h_tm1", "*", "b_u", "[", "3", "]", ",", "self", ".", "U_o", ")", "+", "T", ".", "dot", "(", "ctx_vec", ",", "self", ".", "C_o", ")", "+", "T", ".", "dot", "(", "h_ctx_vec", ",", "self", ".", "H_o", ")", ")", "\n", "h_t", "=", "o_t", "*", "self", ".", "activation", "(", "c_t", ")", "\n", "\n", "h_t", "=", "(", "1", "-", "mask_t", ")", "*", "h_tm1", "+", "mask_t", "*", "h_t", "\n", "c_t", "=", "(", "1", "-", "mask_t", ")", "*", "c_tm1", "+", "mask_t", "*", "c_t", "\n", "\n", "# ctx_vec = theano.printing.Print('ctx_vec')(ctx_vec)", "\n", "\n", "return", "h_t", ",", "c_t", ",", "ctx_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.CondAttLSTM.__call__": [[446, 527], ["components.CondAttLSTM.get_mask", "X.dimshuffle.dimshuffle.dimshuffle", "numpy.ones", "numpy.ones", "parent_t_seq.dimshuffle.dimshuffle.dimshuffle", "theano.scan", "theano.scan", "theano.scan", "theano.scan", "outputs.dimshuffle.dimshuffle.dimshuffle", "ctx_vectors.dimshuffle.dimshuffle.dimshuffle", "cells.dimshuffle.dimshuffle.dimshuffle", "logging.info", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.unbroadcast", "theano.unbroadcast", "theano.unbroadcast", "theano.unbroadcast", "theano.unbroadcast", "theano.unbroadcast", "theano.unbroadcast", "theano.unbroadcast", "nn.utils.theano_utils.alloc_zeros_matrix", "nn.utils.theano_utils.alloc_zeros_matrix", "nn.utils.theano_utils.alloc_zeros_matrix", "theano.arange", "theano.arange", "srng.binomial", "srng.binomial", "nn.utils.theano_utils.alloc_zeros_matrix", "nn.utils.theano_utils.alloc_zeros_matrix", "nn.utils.theano_utils.alloc_zeros_matrix", "nn.utils.theano_utils.alloc_zeros_matrix", "nn.utils.theano_utils.alloc_zeros_matrix", "nn.utils.theano_utils.alloc_zeros_matrix"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.CondAttLSTM.get_mask", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.alloc_zeros_matrix", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.alloc_zeros_matrix", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.alloc_zeros_matrix", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.alloc_zeros_matrix", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.alloc_zeros_matrix", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.alloc_zeros_matrix", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.alloc_zeros_matrix", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.alloc_zeros_matrix", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.alloc_zeros_matrix"], ["", "def", "__call__", "(", "self", ",", "X", ",", "context", ",", "parent_t_seq", ",", "init_state", "=", "None", ",", "init_cell", "=", "None", ",", "hist_h", "=", "None", ",", "\n", "mask", "=", "None", ",", "context_mask", "=", "None", ",", "\n", "dropout", "=", "0", ",", "train", "=", "True", ",", "srng", "=", "None", ",", "\n", "time_steps", "=", "None", ")", ":", "\n", "        ", "assert", "context_mask", ".", "dtype", "==", "'int8'", ",", "'context_mask is not int8, got %s'", "%", "context_mask", ".", "dtype", "\n", "\n", "# (n_timestep, batch_size)", "\n", "mask", "=", "self", ".", "get_mask", "(", "mask", ",", "X", ")", "\n", "# (n_timestep, batch_size, input_dim)", "\n", "X", "=", "X", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "\n", "retain_prob", "=", "1.", "-", "dropout", "\n", "B_w", "=", "np", ".", "ones", "(", "(", "4", ",", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "B_u", "=", "np", ".", "ones", "(", "(", "4", ",", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "if", "dropout", ">", "0", ":", "\n", "            ", "logging", ".", "info", "(", "'applying dropout with p = %f'", ",", "dropout", ")", "\n", "if", "train", ":", "\n", "                ", "B_w", "=", "srng", ".", "binomial", "(", "(", "4", ",", "X", ".", "shape", "[", "1", "]", ",", "self", ".", "input_dim", ")", ",", "p", "=", "retain_prob", ",", "\n", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "B_u", "=", "srng", ".", "binomial", "(", "(", "4", ",", "X", ".", "shape", "[", "1", "]", ",", "self", ".", "output_dim", ")", ",", "p", "=", "retain_prob", ",", "\n", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "", "else", ":", "\n", "                ", "B_w", "*=", "retain_prob", "\n", "B_u", "*=", "retain_prob", "\n", "\n", "# (n_timestep, batch_size, output_dim)", "\n", "", "", "xi", "=", "T", ".", "dot", "(", "X", "*", "B_w", "[", "0", "]", ",", "self", ".", "W_i", ")", "+", "self", ".", "b_i", "\n", "xf", "=", "T", ".", "dot", "(", "X", "*", "B_w", "[", "1", "]", ",", "self", ".", "W_f", ")", "+", "self", ".", "b_f", "\n", "xc", "=", "T", ".", "dot", "(", "X", "*", "B_w", "[", "2", "]", ",", "self", ".", "W_c", ")", "+", "self", ".", "b_c", "\n", "xo", "=", "T", ".", "dot", "(", "X", "*", "B_w", "[", "3", "]", ",", "self", ".", "W_o", ")", "+", "self", ".", "b_o", "\n", "\n", "# (batch_size, context_size, att_layer1_dim)", "\n", "context_att_trans", "=", "T", ".", "dot", "(", "context", ",", "self", ".", "att_ctx_W1", ")", "+", "self", ".", "att_b1", "\n", "\n", "if", "init_state", ":", "\n", "# (batch_size, output_dim)", "\n", "            ", "first_state", "=", "T", ".", "unbroadcast", "(", "init_state", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "first_state", "=", "T", ".", "unbroadcast", "(", "alloc_zeros_matrix", "(", "X", ".", "shape", "[", "1", "]", ",", "self", ".", "output_dim", ")", ",", "1", ")", "\n", "\n", "", "if", "init_cell", ":", "\n", "# (batch_size, output_dim)", "\n", "            ", "first_cell", "=", "T", ".", "unbroadcast", "(", "init_cell", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "first_cell", "=", "T", ".", "unbroadcast", "(", "alloc_zeros_matrix", "(", "X", ".", "shape", "[", "1", "]", ",", "self", ".", "output_dim", ")", ",", "1", ")", "\n", "\n", "", "if", "not", "hist_h", ":", "\n", "# (batch_size, n_timestep, output_dim)", "\n", "            ", "hist_h", "=", "alloc_zeros_matrix", "(", "X", ".", "shape", "[", "1", "]", ",", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "output_dim", ")", "\n", "\n", "", "if", "train", ":", "\n", "            ", "n_timestep", "=", "X", ".", "shape", "[", "0", "]", "\n", "time_steps", "=", "T", ".", "arange", "(", "n_timestep", ",", "dtype", "=", "'int32'", ")", "\n", "\n", "# (n_timestep, batch_size)", "\n", "", "parent_t_seq", "=", "parent_t_seq", ".", "dimshuffle", "(", "(", "1", ",", "0", ")", ")", "\n", "\n", "[", "outputs", ",", "cells", ",", "ctx_vectors", ",", "hist_h_outputs", "]", ",", "updates", "=", "theano", ".", "scan", "(", "\n", "self", ".", "_step", ",", "\n", "sequences", "=", "[", "time_steps", ",", "xi", ",", "xf", ",", "xo", ",", "xc", ",", "mask", ",", "parent_t_seq", "]", ",", "\n", "outputs_info", "=", "[", "\n", "first_state", ",", "# for h", "\n", "first_cell", ",", "# for cell", "\n", "None", ",", "# T.unbroadcast(alloc_zeros_matrix(X.shape[1], self.context_dim), 1),  # for ctx vector", "\n", "hist_h", ",", "# for hist_h", "\n", "]", ",", "\n", "non_sequences", "=", "[", "\n", "self", ".", "U_i", ",", "self", ".", "U_f", ",", "self", ".", "U_o", ",", "self", ".", "U_c", ",", "\n", "self", ".", "C_i", ",", "self", ".", "C_f", ",", "self", ".", "C_o", ",", "self", ".", "C_c", ",", "\n", "self", ".", "H_i", ",", "self", ".", "H_f", ",", "self", ".", "H_o", ",", "self", ".", "H_c", ",", "\n", "self", ".", "P_i", ",", "self", ".", "P_f", ",", "self", ".", "P_o", ",", "self", ".", "P_c", ",", "\n", "self", ".", "att_h_W1", ",", "self", ".", "att_W2", ",", "self", ".", "att_b2", ",", "\n", "context", ",", "context_mask", ",", "context_att_trans", ",", "\n", "B_u", "\n", "]", ")", "\n", "\n", "outputs", "=", "outputs", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "ctx_vectors", "=", "ctx_vectors", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "cells", "=", "cells", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "\n", "return", "outputs", ",", "cells", ",", "ctx_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nl2code.components.CondAttLSTM.get_mask": [[528, 538], ["theano.shape_padright", "theano.shape_padright", "theano.addbroadcast", "theano.addbroadcast", "theano.ones.dimshuffle", "theano.ones.astype", "theano.ones", "theano.ones"], "methods", ["None"], ["", "def", "get_mask", "(", "self", ",", "mask", ",", "X", ")", ":", "\n", "        ", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "T", ".", "ones", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "", "mask", "=", "T", ".", "shape_padright", "(", "mask", ")", "# (nb_samples, time, 1)", "\n", "mask", "=", "T", ".", "addbroadcast", "(", "mask", ",", "-", "1", ")", "# (time, nb_samples, 1) matrix.", "\n", "mask", "=", "mask", ".", "dimshuffle", "(", "1", ",", "0", ",", "2", ")", "# (time, nb_samples, 1)", "\n", "mask", "=", "mask", ".", "astype", "(", "'int8'", ")", "\n", "\n", "return", "mask", "", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.get_fans": [[8, 12], ["numpy.prod", "len", "len"], "function", ["None"], ["def", "get_fans", "(", "shape", ")", ":", "\n", "    ", "fan_in", "=", "shape", "[", "0", "]", "if", "len", "(", "shape", ")", "==", "2", "else", "np", ".", "prod", "(", "shape", "[", "1", ":", "]", ")", "\n", "fan_out", "=", "shape", "[", "1", "]", "if", "len", "(", "shape", ")", "==", "2", "else", "shape", "[", "0", "]", "\n", "return", "fan_in", ",", "fan_out", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.uniform": [[14, 16], ["utils.theano_utils.sharedX", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.sharedX", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.uniform"], ["", "def", "uniform", "(", "shape", ",", "scale", "=", "0.01", ",", "name", "=", "None", ")", ":", "\n", "    ", "return", "sharedX", "(", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "scale", ",", "high", "=", "scale", ",", "size", "=", "shape", ")", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.normal": [[18, 20], ["utils.theano_utils.sharedX", "numpy.random.randn"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.sharedX"], ["", "def", "normal", "(", "shape", ",", "scale", "=", "0.01", ",", "name", "=", "None", ")", ":", "\n", "    ", "return", "sharedX", "(", "np", ".", "random", ".", "randn", "(", "*", "shape", ")", "*", "scale", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.lecun_uniform": [[22, 29], ["initializations.get_fans", "numpy.sqrt", "initializations.uniform"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.get_fans", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.uniform"], ["", "def", "lecun_uniform", "(", "shape", ")", ":", "\n", "    ", "''' Reference: LeCun 98, Efficient Backprop\n        http://yann.lecun.com/exdb/publis/pdf/lecun-98b.pdf\n    '''", "\n", "fan_in", ",", "fan_out", "=", "get_fans", "(", "shape", ")", "\n", "scale", "=", "np", ".", "sqrt", "(", "3.", "/", "fan_in", ")", "\n", "return", "uniform", "(", "shape", ",", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.glorot_normal": [[31, 37], ["initializations.get_fans", "numpy.sqrt", "initializations.normal"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.get_fans", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.normal"], ["", "def", "glorot_normal", "(", "shape", ")", ":", "\n", "    ", "''' Reference: Glorot & Bengio, AISTATS 2010\n    '''", "\n", "fan_in", ",", "fan_out", "=", "get_fans", "(", "shape", ")", "\n", "s", "=", "np", ".", "sqrt", "(", "2.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "return", "normal", "(", "shape", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.glorot_uniform": [[39, 43], ["initializations.get_fans", "numpy.sqrt", "initializations.uniform"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.get_fans", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.uniform"], ["", "def", "glorot_uniform", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "fan_in", ",", "fan_out", "=", "get_fans", "(", "shape", ")", "\n", "s", "=", "np", ".", "sqrt", "(", "6.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "return", "uniform", "(", "shape", ",", "s", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.he_normal": [[45, 51], ["initializations.get_fans", "numpy.sqrt", "initializations.normal"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.get_fans", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.normal"], ["", "def", "he_normal", "(", "shape", ")", ":", "\n", "    ", "''' Reference:  He et al., http://arxiv.org/abs/1502.01852\n    '''", "\n", "fan_in", ",", "fan_out", "=", "get_fans", "(", "shape", ")", "\n", "s", "=", "np", ".", "sqrt", "(", "2.", "/", "fan_in", ")", "\n", "return", "normal", "(", "shape", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.he_uniform": [[53, 57], ["initializations.get_fans", "numpy.sqrt", "initializations.uniform"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.get_fans", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.uniform"], ["", "def", "he_uniform", "(", "shape", ")", ":", "\n", "    ", "fan_in", ",", "fan_out", "=", "get_fans", "(", "shape", ")", "\n", "s", "=", "np", ".", "sqrt", "(", "6.", "/", "fan_in", ")", "\n", "return", "uniform", "(", "shape", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.orthogonal": [[59, 69], ["numpy.random.normal", "numpy.linalg.svd", "q.reshape.reshape", "utils.theano_utils.sharedX", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.normal", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.sharedX"], ["", "def", "orthogonal", "(", "shape", ",", "scale", "=", "1.1", ")", ":", "\n", "    ", "''' From Lasagne\n    '''", "\n", "flat_shape", "=", "(", "shape", "[", "0", "]", ",", "np", ".", "prod", "(", "shape", "[", "1", ":", "]", ")", ")", "\n", "a", "=", "np", ".", "random", ".", "normal", "(", "0.0", ",", "1.0", ",", "flat_shape", ")", "\n", "u", ",", "_", ",", "v", "=", "np", ".", "linalg", ".", "svd", "(", "a", ",", "full_matrices", "=", "False", ")", "\n", "# pick the one with the correct shape", "\n", "q", "=", "u", "if", "u", ".", "shape", "==", "flat_shape", "else", "v", "\n", "q", "=", "q", ".", "reshape", "(", "shape", ")", "\n", "return", "sharedX", "(", "scale", "*", "q", "[", ":", "shape", "[", "0", "]", ",", ":", "shape", "[", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.identity": [[71, 76], ["Exception", "utils.theano_utils.sharedX", "len", "numpy.identity"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.sharedX", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.identity"], ["", "def", "identity", "(", "shape", ",", "scale", "=", "1", ")", ":", "\n", "    ", "if", "len", "(", "shape", ")", "!=", "2", "or", "shape", "[", "0", "]", "!=", "shape", "[", "1", "]", ":", "\n", "        ", "raise", "Exception", "(", "\"Identity matrix initialization can only be used for 2D square matrices\"", ")", "\n", "", "else", ":", "\n", "        ", "return", "sharedX", "(", "scale", "*", "np", ".", "identity", "(", "shape", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.zero": [[78, 80], ["utils.theano_utils.shared_zeros"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros"], ["", "", "def", "zero", "(", "shape", ")", ":", "\n", "    ", "return", "shared_zeros", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.one": [[82, 84], ["utils.theano_utils.shared_ones"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_ones"], ["", "def", "one", "(", "shape", ")", ":", "\n", "    ", "return", "shared_ones", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.get": [[87, 89], ["utils.generic_utils.get_from_module", "globals"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.generic_utils.get_from_module"], ["def", "get", "(", "identifier", ")", ":", "\n", "    ", "return", "get_from_module", "(", "identifier", ",", "globals", "(", ")", ",", "'initialization'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax": [[4, 6], ["theano.nnet.softmax().reshape", "theano.nnet.softmax", "x.reshape"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax"], ["def", "softmax", "(", "x", ")", ":", "\n", "    ", "return", "T", ".", "nnet", ".", "softmax", "(", "x", ".", "reshape", "(", "(", "-", "1", ",", "x", ".", "shape", "[", "-", "1", "]", ")", ")", ")", ".", "reshape", "(", "x", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.time_distributed_softmax": [[8, 12], ["warnings.warn", "activations.softmax"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax"], ["", "def", "time_distributed_softmax", "(", "x", ")", ":", "\n", "    ", "import", "warnings", "\n", "warnings", ".", "warn", "(", "\"time_distributed_softmax is deprecated. Just use softmax!\"", ",", "DeprecationWarning", ")", "\n", "return", "softmax", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softplus": [[14, 16], ["theano.nnet.softplus"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softplus"], ["", "def", "softplus", "(", "x", ")", ":", "\n", "    ", "return", "T", ".", "nnet", ".", "softplus", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.relu": [[18, 20], ["theano.nnet.relu"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.relu"], ["", "def", "relu", "(", "x", ")", ":", "\n", "    ", "return", "T", ".", "nnet", ".", "relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh": [[22, 24], ["theano.tanh"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh"], ["", "def", "tanh", "(", "x", ")", ":", "\n", "    ", "return", "T", ".", "tanh", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.sigmoid": [[26, 28], ["theano.nnet.sigmoid"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.sigmoid"], ["", "def", "sigmoid", "(", "x", ")", ":", "\n", "    ", "return", "T", ".", "nnet", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.hard_sigmoid": [[30, 32], ["theano.nnet.hard_sigmoid"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.hard_sigmoid"], ["", "def", "hard_sigmoid", "(", "x", ")", ":", "\n", "    ", "return", "T", ".", "nnet", ".", "hard_sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.linear": [[34, 39], ["None"], "function", ["None"], ["", "def", "linear", "(", "x", ")", ":", "\n", "    ", "'''\n    The function returns the variable that is passed in, so all types work\n    '''", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.get": [[42, 44], ["utils.generic_utils.get_from_module", "globals"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.generic_utils.get_from_module"], ["def", "get", "(", "identifier", ")", ":", "\n", "    ", "return", "get_from_module", "(", "identifier", ",", "globals", "(", ")", ",", "'activation function'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.objectives.mean_squared_error": [[13, 15], ["theano.sqr().mean", "theano.sqr"], "function", ["None"], ["", "def", "mean_squared_error", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "return", "T", ".", "sqr", "(", "y_pred", "-", "y_true", ")", ".", "mean", "(", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.objectives.mean_absolute_error": [[17, 19], ["theano.abs_().mean", "theano.abs_"], "function", ["None"], ["", "def", "mean_absolute_error", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "return", "T", ".", "abs_", "(", "y_pred", "-", "y_true", ")", ".", "mean", "(", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.objectives.mean_absolute_percentage_error": [[21, 23], ["theano.abs_().mean", "theano.abs_", "theano.clip", "theano.abs_"], "function", ["None"], ["", "def", "mean_absolute_percentage_error", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "return", "T", ".", "abs_", "(", "(", "y_true", "-", "y_pred", ")", "/", "T", ".", "clip", "(", "T", ".", "abs_", "(", "y_true", ")", ",", "epsilon", ",", "np", ".", "inf", ")", ")", ".", "mean", "(", "axis", "=", "-", "1", ")", "*", "100.", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.objectives.mean_squared_logarithmic_error": [[25, 27], ["theano.sqr().mean", "theano.sqr", "theano.log", "theano.log", "theano.clip", "theano.clip"], "function", ["None"], ["", "def", "mean_squared_logarithmic_error", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "return", "T", ".", "sqr", "(", "T", ".", "log", "(", "T", ".", "clip", "(", "y_pred", ",", "epsilon", ",", "np", ".", "inf", ")", "+", "1.", ")", "-", "T", ".", "log", "(", "T", ".", "clip", "(", "y_true", ",", "epsilon", ",", "np", ".", "inf", ")", "+", "1.", ")", ")", ".", "mean", "(", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.objectives.squared_hinge": [[29, 31], ["theano.sqr().mean", "theano.sqr", "theano.maximum"], "function", ["None"], ["", "def", "squared_hinge", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "return", "T", ".", "sqr", "(", "T", ".", "maximum", "(", "1.", "-", "y_true", "*", "y_pred", ",", "0.", ")", ")", ".", "mean", "(", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.objectives.hinge": [[33, 35], ["theano.maximum().mean", "theano.maximum"], "function", ["None"], ["", "def", "hinge", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "return", "T", ".", "maximum", "(", "1.", "-", "y_true", "*", "y_pred", ",", "0.", ")", ".", "mean", "(", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.objectives.categorical_crossentropy": [[37, 45], ["theano.clip", "T.clip.sum", "theano.nnet.categorical_crossentropy"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.objectives.categorical_crossentropy"], ["", "def", "categorical_crossentropy", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "'''Expects a binary class matrix instead of a vector of scalar classes\n    '''", "\n", "y_pred", "=", "T", ".", "clip", "(", "y_pred", ",", "epsilon", ",", "1.0", "-", "epsilon", ")", "\n", "# scale preds so that the class probas of each sample sum to 1", "\n", "y_pred", "/=", "y_pred", ".", "sum", "(", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "cce", "=", "T", ".", "nnet", ".", "categorical_crossentropy", "(", "y_pred", ",", "y_true", ")", "\n", "return", "cce", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.objectives.binary_crossentropy": [[47, 51], ["theano.clip", "theano.nnet.binary_crossentropy().mean", "theano.nnet.binary_crossentropy"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.objectives.binary_crossentropy"], ["", "def", "binary_crossentropy", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "y_pred", "=", "T", ".", "clip", "(", "y_pred", ",", "epsilon", ",", "1.0", "-", "epsilon", ")", "\n", "bce", "=", "T", ".", "nnet", ".", "binary_crossentropy", "(", "y_pred", ",", "y_true", ")", ".", "mean", "(", "axis", "=", "-", "1", ")", "\n", "return", "bce", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.objectives.poisson_loss": [[53, 55], ["theano.mean", "theano.log"], "function", ["None"], ["", "def", "poisson_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "return", "T", ".", "mean", "(", "y_pred", "-", "y_true", "*", "T", ".", "log", "(", "y_pred", "+", "epsilon", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.objectives.get": [[63, 65], ["utils.generic_utils.get_from_module", "globals"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.generic_utils.get_from_module"], ["def", "get", "(", "identifier", ")", ":", "\n", "    ", "return", "get_from_module", "(", "identifier", ",", "globals", "(", ")", ",", "'objective'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Optimizer.__init__": [[25, 28], ["optimizers.Optimizer.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "kwargs", ")", "\n", "self", ".", "updates", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Optimizer.get_state": [[29, 31], ["u[].get_value"], "methods", ["None"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "return", "[", "u", "[", "0", "]", ".", "get_value", "(", ")", "for", "u", "in", "self", ".", "updates", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Optimizer.set_state": [[32, 36], ["six.moves.zip", "len", "len", "u[].set_value", "utils.theano_utils.floatX"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.floatX"], ["", "def", "set_state", "(", "self", ",", "value_list", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "updates", ")", "==", "len", "(", "value_list", ")", "\n", "for", "u", ",", "v", "in", "zip", "(", "self", ".", "updates", ",", "value_list", ")", ":", "\n", "            ", "u", "[", "0", "]", ".", "set_value", "(", "floatX", "(", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Optimizer.get_updates": [[37, 39], ["None"], "methods", ["None"], ["", "", "def", "get_updates", "(", "self", ",", "params", ",", "constraints", ",", "loss", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Optimizer.get_gradients": [[40, 50], ["theano.grad", "theano.grad", "hasattr", "theano.sqrt", "theano.sqrt", "sum", "optimizers.clip_norm", "theano.sum", "theano.sum"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.clip_norm"], ["", "def", "get_gradients", "(", "self", ",", "loss", ",", "params", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "grads", "=", "T", ".", "grad", "(", "loss", ",", "params", ",", "disconnected_inputs", "=", "'warn'", ",", "**", "kwargs", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'clip_grad'", ")", "and", "self", ".", "clip_grad", ">", "0", ":", "\n", "            ", "norm", "=", "T", ".", "sqrt", "(", "sum", "(", "[", "T", ".", "sum", "(", "g", "**", "2", ")", "for", "g", "in", "grads", "]", ")", ")", "\n", "# norm = theano.printing.Print('gradient norm::')(norm)", "\n", "grads", "=", "[", "clip_norm", "(", "g", ",", "self", ".", "clip_grad", ",", "norm", ")", "for", "g", "in", "grads", "]", "\n", "\n", "", "return", "grads", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Optimizer.get_config": [[51, 53], ["None"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"name\"", ":", "self", ".", "__class__", ".", "__name__", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.SGD.__init__": [[57, 63], ["optimizers.Optimizer.__init__", "optimizers.SGD.__dict__.update", "utils.theano_utils.shared_scalar", "utils.theano_utils.shared_scalar", "utils.theano_utils.shared_scalar", "locals"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_scalar", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_scalar", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_scalar"], ["    ", "def", "__init__", "(", "self", ",", "lr", "=", "0.01", ",", "momentum", "=", "0.", ",", "decay", "=", "0.", ",", "nesterov", "=", "False", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SGD", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "locals", "(", ")", ")", "\n", "self", ".", "iterations", "=", "shared_scalar", "(", "0", ")", "\n", "self", ".", "lr", "=", "shared_scalar", "(", "lr", ")", "\n", "self", ".", "momentum", "=", "shared_scalar", "(", "momentum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.SGD.get_updates": [[64, 81], ["optimizers.SGD.get_gradients", "six.moves.zip", "utils.theano_utils.shared_zeros", "optimizers.SGD.updates.append", "optimizers.SGD.updates.append", "p.get_value"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Optimizer.get_gradients", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "get_updates", "(", "self", ",", "params", ",", "loss", ")", ":", "\n", "        ", "grads", "=", "self", ".", "get_gradients", "(", "loss", ",", "params", ")", "\n", "lr", "=", "self", ".", "lr", "*", "(", "1.0", "/", "(", "1.0", "+", "self", ".", "decay", "*", "self", ".", "iterations", ")", ")", "\n", "self", ".", "updates", "=", "[", "(", "self", ".", "iterations", ",", "self", ".", "iterations", "+", "1.", ")", "]", "\n", "\n", "for", "p", ",", "g", "in", "zip", "(", "params", ",", "grads", ")", ":", "\n", "            ", "m", "=", "shared_zeros", "(", "p", ".", "get_value", "(", ")", ".", "shape", ")", "# momentum", "\n", "v", "=", "self", ".", "momentum", "*", "m", "-", "lr", "*", "g", "# velocity", "\n", "self", ".", "updates", ".", "append", "(", "(", "m", ",", "v", ")", ")", "\n", "\n", "if", "self", ".", "nesterov", ":", "\n", "                ", "new_p", "=", "p", "+", "self", ".", "momentum", "*", "v", "-", "lr", "*", "g", "\n", "", "else", ":", "\n", "                ", "new_p", "=", "p", "+", "v", "\n", "\n", "", "self", ".", "updates", ".", "append", "(", "(", "p", ",", "new_p", ")", ")", "\n", "", "return", "self", ".", "updates", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.SGD.get_config": [[82, 88], ["float", "float", "float", "optimizers.SGD.lr.get_value", "optimizers.SGD.momentum.get_value", "optimizers.SGD.decay.get_value"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"name\"", ":", "self", ".", "__class__", ".", "__name__", ",", "\n", "\"lr\"", ":", "float", "(", "self", ".", "lr", ".", "get_value", "(", ")", ")", ",", "\n", "\"momentum\"", ":", "float", "(", "self", ".", "momentum", ".", "get_value", "(", ")", ")", ",", "\n", "\"decay\"", ":", "float", "(", "self", ".", "decay", ".", "get_value", "(", ")", ")", ",", "\n", "\"nesterov\"", ":", "self", ".", "nesterov", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.RMSprop.__init__": [[91, 96], ["optimizers.Optimizer.__init__", "optimizers.RMSprop.__dict__.update", "utils.theano_utils.shared_scalar", "utils.theano_utils.shared_scalar", "locals"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_scalar", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_scalar"], ["    ", "def", "__init__", "(", "self", ",", "lr", "=", "0.001", ",", "rho", "=", "0.9", ",", "epsilon", "=", "1e-6", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RMSprop", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "locals", "(", ")", ")", "\n", "self", ".", "lr", "=", "shared_scalar", "(", "lr", ")", "\n", "self", ".", "rho", "=", "shared_scalar", "(", "rho", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.RMSprop.get_updates": [[97, 109], ["optimizers.RMSprop.get_gradients", "six.moves.zip", "utils.theano_utils.shared_zeros", "optimizers.RMSprop.updates.append", "optimizers.RMSprop.updates.append", "p.get_value", "theano.sqrt", "theano.sqrt", "c"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Optimizer.get_gradients", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "get_updates", "(", "self", ",", "params", ",", "constraints", ",", "loss", ")", ":", "\n", "        ", "grads", "=", "self", ".", "get_gradients", "(", "loss", ",", "params", ")", "\n", "accumulators", "=", "[", "shared_zeros", "(", "p", ".", "get_value", "(", ")", ".", "shape", ")", "for", "p", "in", "params", "]", "\n", "self", ".", "updates", "=", "[", "]", "\n", "\n", "for", "p", ",", "g", ",", "a", ",", "c", "in", "zip", "(", "params", ",", "grads", ",", "accumulators", ",", "constraints", ")", ":", "\n", "            ", "new_a", "=", "self", ".", "rho", "*", "a", "+", "(", "1", "-", "self", ".", "rho", ")", "*", "g", "**", "2", "# update accumulator", "\n", "self", ".", "updates", ".", "append", "(", "(", "a", ",", "new_a", ")", ")", "\n", "\n", "new_p", "=", "p", "-", "self", ".", "lr", "*", "g", "/", "T", ".", "sqrt", "(", "new_a", "+", "self", ".", "epsilon", ")", "\n", "self", ".", "updates", ".", "append", "(", "(", "p", ",", "c", "(", "new_p", ")", ")", ")", "# apply constraints", "\n", "", "return", "self", ".", "updates", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.RMSprop.get_config": [[110, 115], ["float", "float", "optimizers.RMSprop.lr.get_value", "optimizers.RMSprop.rho.get_value"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"name\"", ":", "self", ".", "__class__", ".", "__name__", ",", "\n", "\"lr\"", ":", "float", "(", "self", ".", "lr", ".", "get_value", "(", ")", ")", ",", "\n", "\"rho\"", ":", "float", "(", "self", ".", "rho", ".", "get_value", "(", ")", ")", ",", "\n", "\"epsilon\"", ":", "self", ".", "epsilon", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Adagrad.__init__": [[118, 122], ["optimizers.Optimizer.__init__", "optimizers.Adagrad.__dict__.update", "utils.theano_utils.shared_scalar", "locals"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_scalar"], ["    ", "def", "__init__", "(", "self", ",", "lr", "=", "0.01", ",", "epsilon", "=", "1e-6", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Adagrad", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "locals", "(", ")", ")", "\n", "self", ".", "lr", "=", "shared_scalar", "(", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Adagrad.get_updates": [[123, 134], ["optimizers.Adagrad.get_gradients", "six.moves.zip", "utils.theano_utils.shared_zeros", "optimizers.Adagrad.updates.append", "optimizers.Adagrad.updates.append", "p.get_value", "theano.sqrt", "theano.sqrt", "c"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Optimizer.get_gradients", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "get_updates", "(", "self", ",", "params", ",", "constraints", ",", "loss", ")", ":", "\n", "        ", "grads", "=", "self", ".", "get_gradients", "(", "loss", ",", "params", ")", "\n", "accumulators", "=", "[", "shared_zeros", "(", "p", ".", "get_value", "(", ")", ".", "shape", ")", "for", "p", "in", "params", "]", "\n", "self", ".", "updates", "=", "[", "]", "\n", "\n", "for", "p", ",", "g", ",", "a", ",", "c", "in", "zip", "(", "params", ",", "grads", ",", "accumulators", ",", "constraints", ")", ":", "\n", "            ", "new_a", "=", "a", "+", "g", "**", "2", "# update accumulator", "\n", "self", ".", "updates", ".", "append", "(", "(", "a", ",", "new_a", ")", ")", "\n", "new_p", "=", "p", "-", "self", ".", "lr", "*", "g", "/", "T", ".", "sqrt", "(", "new_a", "+", "self", ".", "epsilon", ")", "\n", "self", ".", "updates", ".", "append", "(", "(", "p", ",", "c", "(", "new_p", ")", ")", ")", "# apply constraints", "\n", "", "return", "self", ".", "updates", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Adagrad.get_config": [[135, 139], ["float", "optimizers.Adagrad.lr.get_value"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"name\"", ":", "self", ".", "__class__", ".", "__name__", ",", "\n", "\"lr\"", ":", "float", "(", "self", ".", "lr", ".", "get_value", "(", ")", ")", ",", "\n", "\"epsilon\"", ":", "self", ".", "epsilon", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Adadelta.__init__": [[145, 149], ["optimizers.Optimizer.__init__", "optimizers.Adadelta.__dict__.update", "utils.theano_utils.shared_scalar", "locals"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_scalar"], ["def", "__init__", "(", "self", ",", "lr", "=", "1.0", ",", "rho", "=", "0.95", ",", "epsilon", "=", "1e-6", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Adadelta", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "locals", "(", ")", ")", "\n", "self", ".", "lr", "=", "shared_scalar", "(", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Adadelta.get_updates": [[150, 171], ["optimizers.Adadelta.get_gradients", "six.moves.zip", "utils.theano_utils.shared_zeros", "utils.theano_utils.shared_zeros", "optimizers.Adadelta.updates.append", "optimizers.Adadelta.updates.append", "optimizers.Adadelta.updates.append", "theano.sqrt", "theano.sqrt", "p.get_value", "p.get_value", "theano.sqrt", "theano.sqrt"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Optimizer.get_gradients", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "get_updates", "(", "self", ",", "params", ",", "loss", ")", ":", "\n", "        ", "grads", "=", "self", ".", "get_gradients", "(", "loss", ",", "params", ")", "\n", "accumulators", "=", "[", "shared_zeros", "(", "p", ".", "get_value", "(", ")", ".", "shape", ")", "for", "p", "in", "params", "]", "\n", "delta_accumulators", "=", "[", "shared_zeros", "(", "p", ".", "get_value", "(", ")", ".", "shape", ")", "for", "p", "in", "params", "]", "\n", "self", ".", "updates", "=", "[", "]", "\n", "\n", "for", "p", ",", "g", ",", "a", ",", "d_a", "in", "zip", "(", "params", ",", "grads", ",", "accumulators", ",", "delta_accumulators", ")", ":", "\n", "            ", "new_a", "=", "self", ".", "rho", "*", "a", "+", "(", "1", "-", "self", ".", "rho", ")", "*", "g", "**", "2", "# update accumulator", "\n", "self", ".", "updates", ".", "append", "(", "(", "a", ",", "new_a", ")", ")", "\n", "\n", "# use the new accumulator and the *old* delta_accumulator", "\n", "update", "=", "g", "*", "T", ".", "sqrt", "(", "d_a", "+", "self", ".", "epsilon", ")", "/", "T", ".", "sqrt", "(", "new_a", "+", "\n", "self", ".", "epsilon", ")", "\n", "\n", "new_p", "=", "p", "-", "self", ".", "lr", "*", "update", "\n", "self", ".", "updates", ".", "append", "(", "(", "p", ",", "new_p", ")", ")", "\n", "\n", "# update delta_accumulator", "\n", "new_d_a", "=", "self", ".", "rho", "*", "d_a", "+", "(", "1", "-", "self", ".", "rho", ")", "*", "update", "**", "2", "\n", "self", ".", "updates", ".", "append", "(", "(", "d_a", ",", "new_d_a", ")", ")", "\n", "", "return", "self", ".", "updates", ",", "grads", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Adadelta.get_config": [[172, 177], ["float", "optimizers.Adadelta.lr.get_value"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"name\"", ":", "self", ".", "__class__", ".", "__name__", ",", "\n", "\"lr\"", ":", "float", "(", "self", ".", "lr", ".", "get_value", "(", ")", ")", ",", "\n", "\"rho\"", ":", "self", ".", "rho", ",", "\n", "\"epsilon\"", ":", "self", ".", "epsilon", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Adadelta_GaussianNoise.__init__": [[183, 188], ["optimizers.Optimizer.__init__", "optimizers.Adadelta_GaussianNoise.__dict__.update", "utils.theano_utils.shared_scalar", "theano.sandbox.rng_mrg.MRG_RandomStreams", "theano.sandbox.rng_mrg.MRG_RandomStreams", "locals", "nn.utils.config_factory.config.get"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_scalar", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get"], ["def", "__init__", "(", "self", ",", "lr", "=", "1.0", ",", "rho", "=", "0.95", ",", "epsilon", "=", "1e-6", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Adadelta_GaussianNoise", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "locals", "(", ")", ")", "\n", "self", ".", "lr", "=", "shared_scalar", "(", "lr", ")", "\n", "self", ".", "rng", "=", "MRG_RandomStreams", "(", "use_cuda", "=", "config", ".", "get", "(", "'run.use_cuda'", ")", ")", "#RandomStreams() #(use_cuda=False)", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Adadelta_GaussianNoise.get_updates": [[189, 215], ["optimizers.Adadelta_GaussianNoise.get_gradients", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "optimizers.Adadelta_GaussianNoise.updates.append", "six.moves.zip", "utils.theano_utils.shared_zeros", "utils.theano_utils.shared_zeros", "optimizers.Adadelta_GaussianNoise.rng.normal", "optimizers.Adadelta_GaussianNoise.updates.append", "optimizers.Adadelta_GaussianNoise.updates.append", "optimizers.Adadelta_GaussianNoise.updates.append", "theano.sqrt", "theano.sqrt", "theano.sqrt", "theano.sqrt", "p.get_value", "p.get_value", "theano.sqrt", "theano.sqrt"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Optimizer.get_gradients", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.normal", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "get_updates", "(", "self", ",", "params", ",", "loss", ")", ":", "\n", "        ", "grads", "=", "self", ".", "get_gradients", "(", "loss", ",", "params", ")", "\n", "accumulators", "=", "[", "shared_zeros", "(", "p", ".", "get_value", "(", ")", ".", "shape", ")", "for", "p", "in", "params", "]", "\n", "delta_accumulators", "=", "[", "shared_zeros", "(", "p", ".", "get_value", "(", ")", ".", "shape", ")", "for", "p", "in", "params", "]", "\n", "self", ".", "updates", "=", "[", "]", "\n", "n_step", "=", "theano", ".", "shared", "(", "1.0", ")", "\n", "self", ".", "updates", ".", "append", "(", "(", "n_step", ",", "n_step", "+", "1", ")", ")", "\n", "\n", "for", "p", ",", "g", ",", "a", ",", "d_a", "in", "zip", "(", "params", ",", "grads", ",", "accumulators", ",", "delta_accumulators", ")", ":", "\n", "            ", "g_noise", "=", "self", ".", "rng", ".", "normal", "(", "p", ".", "shape", ",", "0", ",", "T", ".", "sqrt", "(", "n_step", "**", "-", "0.55", ")", ",", "dtype", "=", "'float32'", ")", "\n", "g_deviated", "=", "g", "+", "g_noise", "\n", "\n", "new_a", "=", "self", ".", "rho", "*", "a", "+", "(", "1", "-", "self", ".", "rho", ")", "*", "g_deviated", "**", "2", "# update accumulator", "\n", "self", ".", "updates", ".", "append", "(", "(", "a", ",", "new_a", ")", ")", "\n", "\n", "# use the new accumulator and the *old* delta_accumulator", "\n", "update", "=", "g_deviated", "*", "T", ".", "sqrt", "(", "d_a", "+", "self", ".", "epsilon", ")", "/", "T", ".", "sqrt", "(", "new_a", "+", "\n", "self", ".", "epsilon", ")", "\n", "\n", "new_p", "=", "p", "-", "self", ".", "lr", "*", "update", "\n", "self", ".", "updates", ".", "append", "(", "(", "p", ",", "new_p", ")", ")", "\n", "\n", "# update delta_accumulator", "\n", "new_d_a", "=", "self", ".", "rho", "*", "d_a", "+", "(", "1", "-", "self", ".", "rho", ")", "*", "update", "**", "2", "\n", "self", ".", "updates", ".", "append", "(", "(", "d_a", ",", "new_d_a", ")", ")", "\n", "", "return", "self", ".", "updates", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Adadelta_GaussianNoise.get_config": [[216, 221], ["float", "optimizers.Adadelta_GaussianNoise.lr.get_value"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"name\"", ":", "self", ".", "__class__", ".", "__name__", ",", "\n", "\"lr\"", ":", "float", "(", "self", ".", "lr", ".", "get_value", "(", ")", ")", ",", "\n", "\"rho\"", ":", "self", ".", "rho", ",", "\n", "\"epsilon\"", ":", "self", ".", "epsilon", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Adam.__init__": [[229, 234], ["optimizers.Optimizer.__init__", "optimizers.Adam.__dict__.update", "utils.theano_utils.shared_scalar", "utils.theano_utils.shared_scalar", "locals"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_scalar", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_scalar"], ["def", "__init__", "(", "self", ",", "lr", "=", "0.001", ",", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-8", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Adam", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "locals", "(", ")", ")", "\n", "self", ".", "iterations", "=", "shared_scalar", "(", "0", ")", "\n", "self", ".", "lr", "=", "shared_scalar", "(", "lr", ")", "\n", "# self.rng = MRG_RandomStreams(use_cuda=config['use_gpu']) #RandomStreams() #(use_cuda=False)", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Adam.get_updates": [[236, 267], ["optimizers.Adam.get_gradients", "six.moves.zip", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "gradients.append", "optimizers.Adam.updates.append", "optimizers.Adam.updates.append", "optimizers.Adam.updates.append", "theano.sqrt", "theano.sqrt", "p.get_value", "p.get_value", "theano.sqrt", "theano.sqrt"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Optimizer.get_gradients", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "get_updates", "(", "self", ",", "params", ",", "loss", ",", "**", "kwargs", ")", ":", "\n", "        ", "grads", "=", "self", ".", "get_gradients", "(", "loss", ",", "params", ",", "**", "kwargs", ")", "\n", "self", ".", "updates", "=", "[", "(", "self", ".", "iterations", ",", "self", ".", "iterations", "+", "1.", ")", "]", "\n", "\n", "t", "=", "self", ".", "iterations", "+", "1", "\n", "lr_t", "=", "self", ".", "lr", "*", "T", ".", "sqrt", "(", "1", "-", "self", ".", "beta_2", "**", "t", ")", "/", "(", "1", "-", "self", ".", "beta_1", "**", "t", ")", "\n", "\n", "# n_step = theano.shared(1.0)", "\n", "# self.updates.append((n_step, n_step + 1))", "\n", "\n", "gradients", "=", "[", "]", "\n", "\n", "for", "p", ",", "g", "in", "zip", "(", "params", ",", "grads", ")", ":", "\n", "            ", "m", "=", "theano", ".", "shared", "(", "p", ".", "get_value", "(", ")", "*", "0.", ")", "# zero init of moment", "\n", "v", "=", "theano", ".", "shared", "(", "p", ".", "get_value", "(", ")", "*", "0.", ")", "# zero init of velocity", "\n", "\n", "# g_noise = self.rng.normal(g.shape, 0, T.sqrt(0.5 * n_step ** - 0.55), dtype='float32')", "\n", "# g_deviated = g + g_noise", "\n", "g_deviated", "=", "g", "\n", "\n", "# for debug purposes", "\n", "gradients", ".", "append", "(", "g", ")", "\n", "\n", "m_t", "=", "(", "self", ".", "beta_1", "*", "m", ")", "+", "(", "1", "-", "self", ".", "beta_1", ")", "*", "g_deviated", "\n", "v_t", "=", "(", "self", ".", "beta_2", "*", "v", ")", "+", "(", "1", "-", "self", ".", "beta_2", ")", "*", "(", "g_deviated", "**", "2", ")", "\n", "p_t", "=", "p", "-", "lr_t", "*", "m_t", "/", "(", "T", ".", "sqrt", "(", "v_t", ")", "+", "self", ".", "epsilon", ")", "\n", "\n", "self", ".", "updates", ".", "append", "(", "(", "m", ",", "m_t", ")", ")", "\n", "self", ".", "updates", ".", "append", "(", "(", "v", ",", "v_t", ")", ")", "\n", "self", ".", "updates", ".", "append", "(", "(", "p", ",", "p_t", ")", ")", "# apply constraints", "\n", "", "return", "self", ".", "updates", ",", "gradients", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Adam.get_config": [[268, 274], ["float", "optimizers.Adam.lr.get_value"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"name\"", ":", "self", ".", "__class__", ".", "__name__", ",", "\n", "\"lr\"", ":", "float", "(", "self", ".", "lr", ".", "get_value", "(", ")", ")", ",", "\n", "\"beta_1\"", ":", "self", ".", "beta_1", ",", "\n", "\"beta_2\"", ":", "self", ".", "beta_2", ",", "\n", "\"epsilon\"", ":", "self", ".", "epsilon", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.clip_norm": [[14, 18], ["theano.switch", "theano.ge"], "function", ["None"], ["def", "clip_norm", "(", "g", ",", "c", ",", "n", ")", ":", "\n", "    ", "if", "c", ">", "0", ":", "\n", "        ", "g", "=", "T", ".", "switch", "(", "T", ".", "ge", "(", "n", ",", "c", ")", ",", "g", "*", "c", "/", "n", ",", "g", ")", "\n", "", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.kl_divergence": [[20, 22], ["theano.log"], "function", ["None"], ["", "def", "kl_divergence", "(", "p", ",", "p_hat", ")", ":", "\n", "    ", "return", "p_hat", "-", "p", "+", "p", "*", "T", ".", "log", "(", "p", "/", "p_hat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get": [[284, 287], ["utils.generic_utils.get_from_module", "globals"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.generic_utils.get_from_module"], ["def", "get", "(", "identifier", ",", "kwargs", "=", "None", ")", ":", "\n", "    ", "return", "get_from_module", "(", "identifier", ",", "globals", "(", ")", ",", "'optimizer'", ",", "instantiate", "=", "True", ",", "\n", "kwargs", "=", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.floatX": [[7, 9], ["numpy.asarray"], "function", ["None"], ["def", "floatX", "(", "X", ")", ":", "\n", "    ", "return", "np", ".", "asarray", "(", "X", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.sharedX": [[11, 13], ["theano.shared", "theano.shared", "numpy.asarray"], "function", ["None"], ["", "def", "sharedX", "(", "X", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ",", "name", "=", "None", ")", ":", "\n", "    ", "return", "theano", ".", "shared", "(", "np", ".", "asarray", "(", "X", ",", "dtype", "=", "dtype", ")", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros": [[15, 17], ["theano_utils.sharedX", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.sharedX"], ["", "def", "shared_zeros", "(", "shape", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ",", "name", "=", "None", ")", ":", "\n", "    ", "return", "sharedX", "(", "np", ".", "zeros", "(", "shape", ")", ",", "dtype", "=", "dtype", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_scalar": [[19, 21], ["theano.shared", "theano.shared"], "function", ["None"], ["", "def", "shared_scalar", "(", "val", "=", "0.", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ",", "name", "=", "None", ")", ":", "\n", "    ", "return", "theano", ".", "shared", "(", "np", ".", "cast", "[", "dtype", "]", "(", "val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_ones": [[23, 25], ["theano_utils.sharedX", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.sharedX"], ["", "def", "shared_ones", "(", "shape", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ",", "name", "=", "None", ")", ":", "\n", "    ", "return", "sharedX", "(", "np", ".", "ones", "(", "shape", ")", ",", "dtype", "=", "dtype", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.alloc_zeros_matrix": [[27, 29], ["theano.alloc"], "function", ["None"], ["", "def", "alloc_zeros_matrix", "(", "*", "dims", ")", ":", "\n", "    ", "return", "T", ".", "alloc", "(", "np", ".", "cast", "[", "theano", ".", "config", ".", "floatX", "]", "(", "0.", ")", ",", "*", "dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.tensor_right_shift": [[31, 36], ["theano.zeros_like", "theano.set_subtensor"], "function", ["None"], ["", "def", "tensor_right_shift", "(", "tensor", ")", ":", "\n", "    ", "temp", "=", "T", ".", "zeros_like", "(", "tensor", ")", "\n", "temp", "=", "T", ".", "set_subtensor", "(", "temp", "[", ":", ",", "1", ":", ",", ":", "]", ",", "tensor", "[", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "\n", "return", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.ndim_tensor": [[38, 48], ["theano.matrix", "theano.vector", "theano.matrix", "theano.tensor3", "theano.tensor4"], "function", ["None"], ["", "def", "ndim_tensor", "(", "ndim", ",", "name", "=", "None", ")", ":", "\n", "    ", "if", "ndim", "==", "1", ":", "\n", "        ", "return", "T", ".", "vector", "(", ")", "\n", "", "elif", "ndim", "==", "2", ":", "\n", "        ", "return", "T", ".", "matrix", "(", ")", "\n", "", "elif", "ndim", "==", "3", ":", "\n", "        ", "return", "T", ".", "tensor3", "(", ")", "\n", "", "elif", "ndim", "==", "4", ":", "\n", "        ", "return", "T", ".", "tensor4", "(", ")", "\n", "", "return", "T", ".", "matrix", "(", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.ndim_itensor": [[51, 59], ["theano.imatrix", "theano.imatrix", "theano.itensor3", "theano.itensor4"], "function", ["None"], ["", "def", "ndim_itensor", "(", "ndim", ",", "name", "=", "None", ")", ":", "\n", "    ", "if", "ndim", "==", "2", ":", "\n", "        ", "return", "T", ".", "imatrix", "(", "name", ")", "\n", "", "elif", "ndim", "==", "3", ":", "\n", "        ", "return", "T", ".", "itensor3", "(", "name", ")", "\n", "", "elif", "ndim", "==", "4", ":", "\n", "        ", "return", "T", ".", "itensor4", "(", "name", ")", "\n", "", "return", "T", ".", "imatrix", "(", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.ndim_btensor": [[62, 70], ["theano.imatrix", "theano.bmatrix", "theano.btensor3", "theano.btensor4"], "function", ["None"], ["", "def", "ndim_btensor", "(", "ndim", ",", "name", "=", "None", ")", ":", "\n", "    ", "if", "ndim", "==", "2", ":", "\n", "        ", "return", "T", ".", "bmatrix", "(", "name", ")", "\n", "", "elif", "ndim", "==", "3", ":", "\n", "        ", "return", "T", ".", "btensor3", "(", "name", ")", "\n", "", "elif", "ndim", "==", "4", ":", "\n", "        ", "return", "T", ".", "btensor4", "(", "name", ")", "\n", "", "return", "T", ".", "imatrix", "(", "name", ")", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.np_utils.to_categorical": [[8, 19], ["numpy.asarray", "numpy.zeros", "six.moves.range", "len", "numpy.max", "len"], "function", ["None"], ["def", "to_categorical", "(", "y", ",", "nb_classes", "=", "None", ")", ":", "\n", "    ", "'''Convert class vector (integers from 0 to nb_classes)\n    to binary class matrix, for use with categorical_crossentropy\n    '''", "\n", "y", "=", "np", ".", "asarray", "(", "y", ",", "dtype", "=", "'int32'", ")", "\n", "if", "not", "nb_classes", ":", "\n", "        ", "nb_classes", "=", "np", ".", "max", "(", "y", ")", "+", "1", "\n", "", "Y", "=", "np", ".", "zeros", "(", "(", "len", "(", "y", ")", ",", "nb_classes", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "y", ")", ")", ":", "\n", "        ", "Y", "[", "i", ",", "y", "[", "i", "]", "]", "=", "1.", "\n", "", "return", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.np_utils.normalize": [[21, 25], ["numpy.atleast_1d", "numpy.linalg.norm", "numpy.expand_dims"], "function", ["None"], ["", "def", "normalize", "(", "a", ",", "axis", "=", "-", "1", ",", "order", "=", "2", ")", ":", "\n", "    ", "l2", "=", "np", ".", "atleast_1d", "(", "np", ".", "linalg", ".", "norm", "(", "a", ",", "order", ",", "axis", ")", ")", "\n", "l2", "[", "l2", "==", "0", "]", "=", "1", "\n", "return", "a", "/", "np", ".", "expand_dims", "(", "l2", ",", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.np_utils.binary_logloss": [[27, 34], ["scipy.maximum", "scipy.minimum", "sum", "len", "scipy.log", "scipy.subtract", "scipy.log", "scipy.subtract"], "function", ["None"], ["", "def", "binary_logloss", "(", "p", ",", "y", ")", ":", "\n", "    ", "epsilon", "=", "1e-15", "\n", "p", "=", "sp", ".", "maximum", "(", "epsilon", ",", "p", ")", "\n", "p", "=", "sp", ".", "minimum", "(", "1", "-", "epsilon", ",", "p", ")", "\n", "res", "=", "sum", "(", "y", "*", "sp", ".", "log", "(", "p", ")", "+", "sp", ".", "subtract", "(", "1", ",", "y", ")", "*", "sp", ".", "log", "(", "sp", ".", "subtract", "(", "1", ",", "p", ")", ")", ")", "\n", "res", "*=", "-", "1.0", "/", "len", "(", "y", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.np_utils.multiclass_logloss": [[36, 41], ["numpy.sum", "six.moves.range", "numpy.log", "len", "len"], "function", ["None"], ["", "def", "multiclass_logloss", "(", "P", ",", "Y", ")", ":", "\n", "    ", "score", "=", "0.", "\n", "npreds", "=", "[", "P", "[", "i", "]", "[", "Y", "[", "i", "]", "-", "1", "]", "for", "i", "in", "range", "(", "len", "(", "Y", ")", ")", "]", "\n", "score", "=", "-", "(", "1.", "/", "len", "(", "Y", ")", ")", "*", "np", ".", "sum", "(", "np", ".", "log", "(", "npreds", ")", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.np_utils.accuracy": [[43, 45], ["numpy.mean", "six.moves.zip"], "function", ["None"], ["", "def", "accuracy", "(", "p", ",", "y", ")", ":", "\n", "    ", "return", "np", ".", "mean", "(", "[", "a", "==", "b", "for", "a", ",", "b", "in", "zip", "(", "p", ",", "y", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.np_utils.probas_to_classes": [[47, 51], ["numpy.array", "np_utils.categorical_probas_to_classes", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.np_utils.categorical_probas_to_classes"], ["", "def", "probas_to_classes", "(", "y_pred", ")", ":", "\n", "    ", "if", "len", "(", "y_pred", ".", "shape", ")", ">", "1", "and", "y_pred", ".", "shape", "[", "1", "]", ">", "1", ":", "\n", "        ", "return", "categorical_probas_to_classes", "(", "y_pred", ")", "\n", "", "return", "np", ".", "array", "(", "[", "1", "if", "p", ">", "0.5", "else", "0", "for", "p", "in", "y_pred", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.np_utils.categorical_probas_to_classes": [[53, 55], ["numpy.argmax"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_linking.argmax"], ["", "def", "categorical_probas_to_classes", "(", "p", ")", ":", "\n", "    ", "return", "np", ".", "argmax", "(", "p", ",", "axis", "=", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.MetaConfig.__getitem__": [[5, 7], ["None"], "methods", ["None"], ["    ", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "config", ".", "_config", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.MetaConfig.__setitem__": [[8, 10], ["None"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "config", ".", "_config", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set": [[16, 19], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "set", "(", "key", ",", "val", ")", ":", "\n", "        ", "config", ".", "_config", "[", "key", "]", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.init_config": [[20, 29], ["logging.info", "execfile", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "init_config", "(", "file", "=", "'config.py'", ")", ":", "\n", "        ", "if", "len", "(", "config", ".", "_config", ")", ">", "0", ":", "\n", "            ", "return", "\n", "\n", "", "logging", ".", "info", "(", "'use configuration: %s'", ",", "file", ")", "\n", "data", "=", "{", "}", "\n", "execfile", "(", "file", ",", "data", ")", "\n", "config", ".", "_config", "=", "data", "[", "'config'", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.test_utils.get_test_data": [[4, 28], ["numpy.random.randint", "numpy.zeros", "range", "numpy.random.random", "numpy.zeros", "numpy.zeros", "range", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.normal", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.normal", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.initializations.normal"], ["def", "get_test_data", "(", "nb_train", "=", "1000", ",", "nb_test", "=", "500", ",", "input_shape", "=", "(", "10", ",", ")", ",", "output_shape", "=", "(", "2", ",", ")", ",", "\n", "classification", "=", "True", ",", "nb_class", "=", "2", ")", ":", "\n", "    ", "'''\n        classification=True overrides output_shape\n        (i.e. output_shape is set to (1,)) and the output\n        consists in integers in [0, nb_class-1].\n\n        Otherwise: float output with shape output_shape.\n    '''", "\n", "nb_sample", "=", "nb_train", "+", "nb_test", "\n", "if", "classification", ":", "\n", "        ", "y", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "nb_class", ",", "size", "=", "(", "nb_sample", ",", "1", ")", ")", "\n", "X", "=", "np", ".", "zeros", "(", "(", "nb_sample", ",", ")", "+", "input_shape", ")", "\n", "for", "i", "in", "range", "(", "nb_sample", ")", ":", "\n", "            ", "X", "[", "i", "]", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "y", "[", "i", "]", ",", "scale", "=", "1.0", ",", "size", "=", "input_shape", ")", "\n", "", "", "else", ":", "\n", "        ", "y_loc", "=", "np", ".", "random", ".", "random", "(", "(", "nb_sample", ",", ")", ")", "\n", "X", "=", "np", ".", "zeros", "(", "(", "nb_sample", ",", ")", "+", "input_shape", ")", "\n", "y", "=", "np", ".", "zeros", "(", "(", "nb_sample", ",", ")", "+", "output_shape", ")", "\n", "for", "i", "in", "range", "(", "nb_sample", ")", ":", "\n", "            ", "X", "[", "i", "]", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "y_loc", "[", "i", "]", ",", "scale", "=", "1.0", ",", "size", "=", "input_shape", ")", "\n", "y", "[", "i", "]", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "y_loc", "[", "i", "]", ",", "scale", "=", "1.0", ",", "size", "=", "output_shape", ")", "\n", "\n", "", "", "return", "(", "X", "[", ":", "nb_train", "]", ",", "y", "[", ":", "nb_train", "]", ")", ",", "(", "X", "[", "nb_train", ":", "]", ",", "y", "[", "nb_train", ":", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.generic_utils.Progbar.__init__": [[148, 160], ["time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "target", ",", "width", "=", "30", ",", "verbose", "=", "1", ")", ":", "\n", "        ", "'''\n            @param target: total number of steps expected\n        '''", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "target", "=", "target", "\n", "self", ".", "sum_values", "=", "{", "}", "\n", "self", ".", "unique_values", "=", "[", "]", "\n", "self", ".", "start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "total_width", "=", "0", "\n", "self", ".", "seen_so_far", "=", "0", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.generic_utils.Progbar.update": [[161, 227], ["time.time", "sys.stdout.write", "sys.stdout.write", "int", "sys.stdout.write", "len", "len", "sys.stdout.write", "sys.stdout.flush", "generic_utils.Progbar.unique_values.append", "int", "float", "sys.stdout.write", "sys.stdout.write", "numpy.floor", "numpy.log10", "max", "max"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "update", "(", "self", ",", "current", ",", "values", "=", "[", "]", ")", ":", "\n", "        ", "'''\n            @param current: index of current step\n            @param values: list of tuples (name, value_for_last_step).\n            The progress bar will display averages for these values.\n        '''", "\n", "for", "k", ",", "v", "in", "values", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "sum_values", ":", "\n", "                ", "self", ".", "sum_values", "[", "k", "]", "=", "[", "v", "*", "(", "current", "-", "self", ".", "seen_so_far", ")", ",", "current", "-", "self", ".", "seen_so_far", "]", "\n", "self", ".", "unique_values", ".", "append", "(", "k", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "sum_values", "[", "k", "]", "[", "0", "]", "+=", "v", "*", "(", "current", "-", "self", ".", "seen_so_far", ")", "\n", "self", ".", "sum_values", "[", "k", "]", "[", "1", "]", "+=", "(", "current", "-", "self", ".", "seen_so_far", ")", "\n", "", "", "self", ".", "seen_so_far", "=", "current", "\n", "\n", "now", "=", "time", ".", "time", "(", ")", "\n", "if", "self", ".", "verbose", "==", "1", ":", "\n", "            ", "prev_total_width", "=", "self", ".", "total_width", "\n", "sys", ".", "stdout", ".", "write", "(", "\"\\b\"", "*", "prev_total_width", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "\"\\r\"", ")", "\n", "\n", "numdigits", "=", "int", "(", "np", ".", "floor", "(", "np", ".", "log10", "(", "self", ".", "target", ")", ")", ")", "+", "1", "\n", "barstr", "=", "'%%%dd/%%%dd ['", "%", "(", "numdigits", ",", "numdigits", ")", "\n", "bar", "=", "barstr", "%", "(", "current", ",", "self", ".", "target", ")", "\n", "prog", "=", "float", "(", "current", ")", "/", "self", ".", "target", "\n", "prog_width", "=", "int", "(", "self", ".", "width", "*", "prog", ")", "\n", "if", "prog_width", ">", "0", ":", "\n", "                ", "bar", "+=", "(", "'='", "*", "(", "prog_width", "-", "1", ")", ")", "\n", "if", "current", "<", "self", ".", "target", ":", "\n", "                    ", "bar", "+=", "'>'", "\n", "", "else", ":", "\n", "                    ", "bar", "+=", "'='", "\n", "", "", "bar", "+=", "(", "'.'", "*", "(", "self", ".", "width", "-", "prog_width", ")", ")", "\n", "bar", "+=", "']'", "\n", "sys", ".", "stdout", ".", "write", "(", "bar", ")", "\n", "self", ".", "total_width", "=", "len", "(", "bar", ")", "\n", "\n", "if", "current", ":", "\n", "                ", "time_per_unit", "=", "(", "now", "-", "self", ".", "start", ")", "/", "current", "\n", "", "else", ":", "\n", "                ", "time_per_unit", "=", "0", "\n", "", "eta", "=", "time_per_unit", "*", "(", "self", ".", "target", "-", "current", ")", "\n", "info", "=", "''", "\n", "if", "current", "<", "self", ".", "target", ":", "\n", "                ", "info", "+=", "' - ETA: %ds'", "%", "eta", "\n", "", "else", ":", "\n", "                ", "info", "+=", "' - %ds'", "%", "(", "now", "-", "self", ".", "start", ")", "\n", "", "for", "k", "in", "self", ".", "unique_values", ":", "\n", "                ", "info", "+=", "' - %s: %.4f'", "%", "(", "k", ",", "self", ".", "sum_values", "[", "k", "]", "[", "0", "]", "/", "max", "(", "1", ",", "self", ".", "sum_values", "[", "k", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "self", ".", "total_width", "+=", "len", "(", "info", ")", "\n", "if", "prev_total_width", ">", "self", ".", "total_width", ":", "\n", "                ", "info", "+=", "(", "(", "prev_total_width", "-", "self", ".", "total_width", ")", "*", "\" \"", ")", "\n", "\n", "", "sys", ".", "stdout", ".", "write", "(", "info", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "if", "current", ">=", "self", ".", "target", ":", "\n", "                ", "sys", ".", "stdout", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "", "", "if", "self", ".", "verbose", "==", "2", ":", "\n", "            ", "if", "current", ">=", "self", ".", "target", ":", "\n", "                ", "info", "=", "'%ds'", "%", "(", "now", "-", "self", ".", "start", ")", "\n", "for", "k", "in", "self", ".", "unique_values", ":", "\n", "                    ", "info", "+=", "' - %s: %.4f'", "%", "(", "k", ",", "self", ".", "sum_values", "[", "k", "]", "[", "0", "]", "/", "max", "(", "1", ",", "self", ".", "sum_values", "[", "k", "]", "[", "1", "]", ")", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "info", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.generic_utils.Progbar.add": [[228, 230], ["generic_utils.Progbar.update"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update"], ["", "", "", "def", "add", "(", "self", ",", "n", ",", "values", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "update", "(", "self", ".", "seen_so_far", "+", "n", ",", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.generic_utils.get_from_module": [[9, 21], ["isinstance", "module_params.get", "Exception", "module_params.get.", "module_params.get.", "str", "str"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get"], ["def", "get_from_module", "(", "identifier", ",", "module_params", ",", "module_name", ",", "instantiate", "=", "False", ",", "kwargs", "=", "None", ")", ":", "\n", "    ", "if", "isinstance", "(", "identifier", ",", "six", ".", "string_types", ")", ":", "\n", "        ", "res", "=", "module_params", ".", "get", "(", "identifier", ")", "\n", "if", "not", "res", ":", "\n", "            ", "raise", "Exception", "(", "'Invalid '", "+", "str", "(", "module_name", ")", "+", "': '", "+", "str", "(", "identifier", ")", ")", "\n", "", "if", "instantiate", "and", "not", "kwargs", ":", "\n", "            ", "return", "res", "(", ")", "\n", "", "elif", "instantiate", "and", "kwargs", ":", "\n", "            ", "return", "res", "(", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "return", "res", "\n", "", "", "return", "identifier", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.generic_utils.make_tuple": [[23, 25], ["None"], "function", ["None"], ["", "def", "make_tuple", "(", "*", "args", ")", ":", "\n", "    ", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.generic_utils.printv": [[27, 47], ["type", "v.items", "print", "type", "enumerate", "print", "type", "print", "generic_utils.printv", "print", "print", "generic_utils.printv", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.generic_utils.printv", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.generic_utils.printv"], ["", "def", "printv", "(", "v", ",", "prefix", "=", "''", ")", ":", "\n", "    ", "if", "type", "(", "v", ")", "==", "dict", ":", "\n", "        ", "if", "'name'", "in", "v", ":", "\n", "            ", "print", "(", "prefix", "+", "'#'", "+", "v", "[", "'name'", "]", ")", "\n", "del", "v", "[", "'name'", "]", "\n", "", "prefix", "+=", "'...'", "\n", "for", "nk", ",", "nv", "in", "v", ".", "items", "(", ")", ":", "\n", "            ", "if", "type", "(", "nv", ")", "in", "[", "dict", ",", "list", "]", ":", "\n", "                ", "print", "(", "prefix", "+", "nk", "+", "':'", ")", "\n", "printv", "(", "nv", ",", "prefix", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "prefix", "+", "nk", "+", "':'", "+", "str", "(", "nv", ")", ")", "\n", "", "", "", "elif", "type", "(", "v", ")", "==", "list", ":", "\n", "        ", "prefix", "+=", "'...'", "\n", "for", "i", ",", "nv", "in", "enumerate", "(", "v", ")", ":", "\n", "            ", "print", "(", "prefix", "+", "'#'", "+", "str", "(", "i", ")", ")", "\n", "printv", "(", "nv", ",", "prefix", ")", "\n", "", "", "else", ":", "\n", "        ", "prefix", "+=", "'...'", "\n", "print", "(", "prefix", "+", "str", "(", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.generic_utils.make_batches": [[49, 52], ["int", "numpy.ceil", "min", "range", "float"], "function", ["None"], ["", "", "def", "make_batches", "(", "size", ",", "batch_size", ")", ":", "\n", "    ", "nb_batch", "=", "int", "(", "np", ".", "ceil", "(", "size", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "return", "[", "(", "i", "*", "batch_size", ",", "min", "(", "size", ",", "(", "i", "+", "1", ")", "*", "batch_size", ")", ")", "for", "i", "in", "range", "(", "0", ",", "nb_batch", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.generic_utils.slice_X": [[54, 65], ["type", "hasattr", "hasattr"], "function", ["None"], ["", "def", "slice_X", "(", "X", ",", "start", "=", "None", ",", "stop", "=", "None", ")", ":", "\n", "    ", "if", "type", "(", "X", ")", "==", "list", ":", "\n", "        ", "if", "hasattr", "(", "start", ",", "'__len__'", ")", ":", "\n", "            ", "return", "[", "x", "[", "start", "]", "for", "x", "in", "X", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "x", "[", "start", ":", "stop", "]", "for", "x", "in", "X", "]", "\n", "", "", "else", ":", "\n", "        ", "if", "hasattr", "(", "start", ",", "'__len__'", ")", ":", "\n", "            ", "return", "X", "[", "start", "]", "\n", "", "else", ":", "\n", "            ", "return", "X", "[", "start", ":", "stop", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.generic_utils.init_logging": [[67, 81], ["logging.Formatter", "logging.FileHandler", "logging.StreamHandler", "logging.FileHandler.setFormatter", "logging.StreamHandler.setFormatter", "logging.getLogger().addHandler", "logging.getLogger().addHandler", "logging.getLogger().setLevel", "logging.info", "logging.getLogger", "logging.getLogger", "logging.getLogger", "logging.getLogger"], "function", ["None"], ["", "", "", "def", "init_logging", "(", "file_name", ",", "level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s [%(levelname)s] %(module)s: %(message)s'", ",", "datefmt", "=", "'%m/%d/%Y %H:%M:%S'", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "file_name", ")", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "logging", ".", "getLogger", "(", ")", ".", "handlers", "=", "[", "]", "\n", "logging", ".", "getLogger", "(", ")", ".", "addHandler", "(", "ch", ")", "\n", "logging", ".", "getLogger", "(", ")", ".", "addHandler", "(", "fh", ")", "\n", "logging", ".", "getLogger", "(", ")", ".", "setLevel", "(", "level", ")", "\n", "\n", "logging", ".", "info", "(", "'init logging file [%s]'", "%", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.generic_utils.pad_sequences": [[83, 145], ["len", "tuple", "enumerate", "len", "numpy.max", "numpy.asarray", "len", "len", "ValueError", "numpy.ones", "ValueError", "ValueError", "numpy.asarray", "len", "len"], "function", ["None"], ["", "def", "pad_sequences", "(", "sequences", ",", "maxlen", "=", "None", ",", "dtype", "=", "'int32'", ",", "\n", "padding", "=", "'pre'", ",", "truncating", "=", "'pre'", ",", "value", "=", "0.", ")", ":", "\n", "    ", "'''Pads each sequence to the same length:\n    the length of the longest sequence.\n\n    If maxlen is provided, any sequence longer\n    than maxlen is truncated to maxlen.\n    Truncation happens off either the beginning (default) or\n    the end of the sequence.\n\n    Supports post-padding and pre-padding (default).\n\n    # Arguments\n        sequences: list of lists where each element is a sequence\n        maxlen: int, maximum length\n        dtype: type to cast the resulting sequence.\n        padding: 'pre' or 'post', pad either before or after each sequence.\n        truncating: 'pre' or 'post', remove values from sequences larger than\n            maxlen either in the beginning or in the end of the sequence\n        value: float, value to pad the sequences to the desired value.\n\n    # Returns\n        x: numpy array with dimensions (number_of_sequences, maxlen)\n    '''", "\n", "lengths", "=", "[", "len", "(", "s", ")", "for", "s", "in", "sequences", "]", "\n", "\n", "nb_samples", "=", "len", "(", "sequences", ")", "\n", "if", "maxlen", "is", "None", ":", "\n", "        ", "maxlen", "=", "np", ".", "max", "(", "lengths", ")", "\n", "\n", "# take the sample shape from the first non empty sequence", "\n", "# checking for consistency in the main loop below.", "\n", "", "sample_shape", "=", "tuple", "(", ")", "\n", "for", "s", "in", "sequences", ":", "\n", "        ", "if", "len", "(", "s", ")", ">", "0", ":", "\n", "            ", "sample_shape", "=", "np", ".", "asarray", "(", "s", ")", ".", "shape", "[", "1", ":", "]", "\n", "break", "\n", "\n", "", "", "x", "=", "(", "np", ".", "ones", "(", "(", "nb_samples", ",", "maxlen", ")", "+", "sample_shape", ")", "*", "value", ")", ".", "astype", "(", "dtype", ")", "\n", "for", "idx", ",", "s", "in", "enumerate", "(", "sequences", ")", ":", "\n", "        ", "if", "len", "(", "s", ")", "==", "0", ":", "\n", "            ", "continue", "# empty list was found", "\n", "", "if", "truncating", "==", "'pre'", ":", "\n", "            ", "trunc", "=", "s", "[", "-", "maxlen", ":", "]", "\n", "", "elif", "truncating", "==", "'post'", ":", "\n", "            ", "trunc", "=", "s", "[", ":", "maxlen", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Truncating type \"%s\" not understood'", "%", "truncating", ")", "\n", "\n", "# check `trunc` has expected shape", "\n", "", "trunc", "=", "np", ".", "asarray", "(", "trunc", ",", "dtype", "=", "dtype", ")", "\n", "if", "trunc", ".", "shape", "[", "1", ":", "]", "!=", "sample_shape", ":", "\n", "            ", "raise", "ValueError", "(", "'Shape of sample %s of sequence at position %s is different from expected shape %s'", "%", "\n", "(", "trunc", ".", "shape", "[", "1", ":", "]", ",", "idx", ",", "sample_shape", ")", ")", "\n", "\n", "", "if", "padding", "==", "'post'", ":", "\n", "            ", "x", "[", "idx", ",", ":", "len", "(", "trunc", ")", "]", "=", "trunc", "\n", "", "elif", "padding", "==", "'pre'", ":", "\n", "            ", "x", "[", "idx", ",", "-", "len", "(", "trunc", ")", ":", "]", "=", "trunc", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Padding type \"%s\" not understood'", "%", "padding", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.__init__": [[12, 22], ["list", "h5py.File", "io_utils.HDF5Matrix.refs.keys"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys"], ["def", "__init__", "(", "self", ",", "datapath", ",", "dataset", ",", "start", ",", "end", ",", "normalizer", "=", "None", ")", ":", "\n", "        ", "if", "datapath", "not", "in", "list", "(", "self", ".", "refs", ".", "keys", "(", ")", ")", ":", "\n", "            ", "f", "=", "h5py", ".", "File", "(", "datapath", ")", "\n", "self", ".", "refs", "[", "datapath", "]", "=", "f", "\n", "", "else", ":", "\n", "            ", "f", "=", "self", ".", "refs", "[", "datapath", "]", "\n", "", "self", ".", "start", "=", "start", "\n", "self", ".", "end", "=", "end", "\n", "self", ".", "data", "=", "f", "[", "dataset", "]", "\n", "self", ".", "normalizer", "=", "normalizer", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.__len__": [[23, 25], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "end", "-", "self", ".", "start", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.__getitem__": [[26, 51], ["isinstance", "isinstance", "io_utils.HDF5Matrix.normalizer", "slice", "isinstance", "isinstance", "numpy.max", "max"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "isinstance", "(", "key", ",", "slice", ")", ":", "\n", "            ", "if", "key", ".", "stop", "+", "self", ".", "start", "<=", "self", ".", "end", ":", "\n", "                ", "idx", "=", "slice", "(", "key", ".", "start", "+", "self", ".", "start", ",", "key", ".", "stop", "+", "self", ".", "start", ")", "\n", "", "else", ":", "\n", "                ", "raise", "IndexError", "\n", "", "", "elif", "isinstance", "(", "key", ",", "int", ")", ":", "\n", "            ", "if", "key", "+", "self", ".", "start", "<", "self", ".", "end", ":", "\n", "                ", "idx", "=", "key", "+", "self", ".", "start", "\n", "", "else", ":", "\n", "                ", "raise", "IndexError", "\n", "", "", "elif", "isinstance", "(", "key", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "if", "np", ".", "max", "(", "key", ")", "+", "self", ".", "start", "<", "self", ".", "end", ":", "\n", "                ", "idx", "=", "(", "self", ".", "start", "+", "key", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "                ", "raise", "IndexError", "\n", "", "", "elif", "isinstance", "(", "key", ",", "list", ")", ":", "\n", "            ", "if", "max", "(", "key", ")", "+", "self", ".", "start", "<", "self", ".", "end", ":", "\n", "                ", "idx", "=", "[", "x", "+", "self", ".", "start", "for", "x", "in", "key", "]", "\n", "", "else", ":", "\n", "                ", "raise", "IndexError", "\n", "", "", "if", "self", ".", "normalizer", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "normalizer", "(", "self", ".", "data", "[", "idx", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "data", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.HDF5Matrix.shape": [[52, 55], ["tuple"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "tuple", "(", "[", "self", ".", "end", "-", "self", ".", "start", ",", "self", ".", "data", ".", "shape", "[", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.save_array": [[57, 64], ["tables.open_file", "tables.Atom.from_dtype", "tables.open_file.createCArray", "tables.open_file.close"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close"], ["", "", "def", "save_array", "(", "array", ",", "name", ")", ":", "\n", "    ", "import", "tables", "\n", "f", "=", "tables", ".", "open_file", "(", "name", ",", "'w'", ")", "\n", "atom", "=", "tables", ".", "Atom", ".", "from_dtype", "(", "array", ".", "dtype", ")", "\n", "ds", "=", "f", ".", "createCArray", "(", "f", ".", "root", ",", "'data'", ",", "atom", ",", "array", ".", "shape", ")", "\n", "ds", "[", ":", "]", "=", "array", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.load_array": [[66, 74], ["tables.open_file", "numpy.empty", "tables.open_file.close"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close"], ["", "def", "load_array", "(", "name", ")", ":", "\n", "    ", "import", "tables", "\n", "f", "=", "tables", ".", "open_file", "(", "name", ")", "\n", "array", "=", "f", ".", "root", ".", "data", "\n", "a", "=", "np", ".", "empty", "(", "shape", "=", "array", ".", "shape", ",", "dtype", "=", "array", ".", "dtype", ")", "\n", "a", "[", ":", "]", "=", "array", "[", ":", "]", "\n", "f", ".", "close", "(", ")", "\n", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.serialize_to_file": [[76, 80], ["open", "cPickle.dump", "open.close"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.dump", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close"], ["", "def", "serialize_to_file", "(", "obj", ",", "path", ",", "protocol", "=", "cPickle", ".", "HIGHEST_PROTOCOL", ")", ":", "\n", "    ", "f", "=", "open", "(", "path", ",", "'wb'", ")", "\n", "cPickle", ".", "dump", "(", "obj", ",", "f", ",", "protocol", "=", "protocol", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.deserialize_from_file": [[82, 87], ["open", "cPickle.load", "open.close"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close"], ["", "def", "deserialize_from_file", "(", "path", ")", ":", "\n", "    ", "f", "=", "open", "(", "path", ",", "'rb'", ")", "\n", "obj", "=", "cPickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "return", "obj", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.SpiderUnparser.refine_from": [[23, 124], ["set", "set", "set", "set", "sorted", "pcfg.SpiderUnparser.conjoin_conds", "pcfg.SpiderUnparser.ast_wrapper.find_all_descendants_of_type", "len", "zip", "pcfg.SpiderUnparser.refine_from", "networkx.shortest_path", "all_from_table_ids.add", "conds.append", "sorted", "set.add", "table_unit_set.append", "set.add"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.conjoin_conds", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper.find_all_descendants_of_type", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.refine_from", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add"], ["def", "refine_from", "(", "self", ",", "tree", ")", ":", "\n", "        ", "\"\"\"\n        1) Inferring tables from columns predicted \n        2) Mix them with the predicted tables if any\n        3) Inferring conditions based on tables \n\n        Compared with original refine_from function, this refine_from take \n        either predicted tables or must_in_tables, instead the union of both\n        \"\"\"", "\n", "# nested query in from clause, recursively use the refinement", "\n", "if", "\"from\"", "in", "tree", "and", "tree", "[", "\"from\"", "]", "[", "\"table_units\"", "]", "[", "0", "]", "[", "\"_type\"", "]", "==", "\"TableUnitSql\"", ":", "\n", "            ", "for", "table_unit", "in", "tree", "[", "\"from\"", "]", "[", "\"table_units\"", "]", ":", "\n", "                ", "subquery_tree", "=", "table_unit", "[", "\"s\"", "]", "\n", "self", ".", "refine_from", "(", "subquery_tree", ")", "\n", "", "return", "\n", "\n", "# get predicted tables", "\n", "", "predicted_from_table_ids", "=", "set", "(", ")", "\n", "if", "\"from\"", "in", "tree", ":", "\n", "            ", "table_unit_set", "=", "[", "]", "\n", "for", "table_unit", "in", "tree", "[", "\"from\"", "]", "[", "\"table_units\"", "]", ":", "\n", "                ", "if", "\"table_id\"", "not", "in", "table_unit", ":", "\n", "                    ", "continue", "# TODO: might be mix of table units and tableunit sql", "\n", "", "if", "table_unit", "[", "\"table_id\"", "]", "not", "in", "predicted_from_table_ids", ":", "\n", "                    ", "predicted_from_table_ids", ".", "add", "(", "table_unit", "[", "\"table_id\"", "]", ")", "\n", "table_unit_set", ".", "append", "(", "table_unit", ")", "\n", "", "", "tree", "[", "\"from\"", "]", "[", "\"table_units\"", "]", "=", "table_unit_set", "# remove duplicate", "\n", "\n", "# Get all candidate columns", "\n", "", "candidate_column_ids", "=", "set", "(", "\n", "self", ".", "ast_wrapper", ".", "find_all_descendants_of_type", "(", "\n", "tree", ",", "\"column\"", ",", "lambda", "field", ":", "field", ".", "type", "!=", "\"sql\"", "\n", ")", "\n", ")", "\n", "candidate_columns", "=", "[", "self", ".", "schema", ".", "columns", "[", "i", "]", "for", "i", "in", "candidate_column_ids", "]", "\n", "must_in_from_table_ids", "=", "set", "(", "\n", "column", ".", "table", ".", "id", "for", "column", "in", "candidate_columns", "if", "column", ".", "table", "is", "not", "None", "\n", ")", "\n", "\n", "if", "len", "(", "must_in_from_table_ids", ")", "==", "0", ":", "\n", "            ", "all_from_table_ids", "=", "predicted_from_table_ids", "\n", "", "else", ":", "\n", "            ", "all_from_table_ids", "=", "must_in_from_table_ids", "\n", "", "assert", "all_from_table_ids", "\n", "\n", "covered_tables", "=", "set", "(", ")", "\n", "candidate_table_ids", "=", "sorted", "(", "all_from_table_ids", ")", "\n", "start_table_id", "=", "candidate_table_ids", "[", "0", "]", "\n", "conds", "=", "[", "]", "\n", "for", "table_id", "in", "candidate_table_ids", "[", "1", ":", "]", ":", "\n", "            ", "if", "table_id", "in", "covered_tables", ":", "\n", "                ", "continue", "\n", "", "try", ":", "\n", "                ", "path", "=", "nx", ".", "shortest_path", "(", "\n", "self", ".", "schema", ".", "foreign_key_graph", ",", "\n", "source", "=", "start_table_id", ",", "\n", "target", "=", "table_id", ",", "\n", ")", "\n", "", "except", "(", "nx", ".", "NetworkXNoPath", ",", "nx", ".", "NodeNotFound", ")", ":", "\n", "                ", "covered_tables", ".", "add", "(", "table_id", ")", "\n", "continue", "\n", "\n", "", "for", "source_table_id", ",", "target_table_id", "in", "zip", "(", "path", ",", "path", "[", "1", ":", "]", ")", ":", "\n", "                ", "if", "target_table_id", "in", "covered_tables", ":", "\n", "                    ", "continue", "\n", "", "all_from_table_ids", ".", "add", "(", "target_table_id", ")", "\n", "col1", ",", "col2", "=", "self", ".", "schema", ".", "foreign_key_graph", "[", "source_table_id", "]", "[", "\n", "target_table_id", "\n", "]", "[", "\"columns\"", "]", "\n", "conds", ".", "append", "(", "\n", "{", "\n", "\"_type\"", ":", "\"Eq\"", ",", "\n", "\"val_unit\"", ":", "{", "\n", "\"_type\"", ":", "\"Column\"", ",", "\n", "\"col_unit1\"", ":", "{", "\n", "\"_type\"", ":", "\"col_unit\"", ",", "\n", "\"agg_id\"", ":", "{", "\"_type\"", ":", "\"NoneAggOp\"", "}", ",", "\n", "\"col_id\"", ":", "col1", ",", "\n", "\"is_distinct\"", ":", "False", ",", "\n", "}", ",", "\n", "}", ",", "\n", "\"val1\"", ":", "{", "\n", "\"_type\"", ":", "\"ColUnit\"", ",", "\n", "\"c\"", ":", "{", "\n", "\"_type\"", ":", "\"col_unit\"", ",", "\n", "\"agg_id\"", ":", "{", "\"_type\"", ":", "\"NoneAggOp\"", "}", ",", "\n", "\"col_id\"", ":", "col2", ",", "\n", "\"is_distinct\"", ":", "False", ",", "\n", "}", ",", "\n", "}", ",", "\n", "}", "\n", ")", "\n", "", "", "table_units", "=", "[", "\n", "{", "\"_type\"", ":", "\"Table\"", ",", "\"table_id\"", ":", "i", "}", "for", "i", "in", "sorted", "(", "all_from_table_ids", ")", "\n", "]", "\n", "\n", "tree", "[", "\"from\"", "]", "=", "{", "\"_type\"", ":", "\"from\"", ",", "\"table_units\"", ":", "table_units", "}", "\n", "cond_node", "=", "self", ".", "conjoin_conds", "(", "conds", ")", "\n", "\n", "if", "cond_node", "is", "not", "None", ":", "\n", "            ", "tree", "[", "\"from\"", "]", "[", "\"conds\"", "]", "=", "cond_node", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.SpiderUnparser.unparse_cond": [[125, 161], ["pcfg.SpiderUnparser.unparse_val_unit", "tokens.append", "pcfg.SpiderUnparser.unparse_val", "pcfg.SpiderUnparser.unparse_cond", "pcfg.SpiderUnparser.unparse_cond", "pcfg.SpiderUnparser.unparse_cond", "pcfg.SpiderUnparser.unparse_cond", "pcfg.SpiderUnparser.unparse_cond", "pcfg.SpiderUnparser.unparse_val_unit", "tokens.append", "pcfg.SpiderUnparser.unparse_val", "pcfg.SpiderUnparser.unparse_val"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_val_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_cond", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_cond", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_cond", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_cond", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_cond", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_val_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_val"], ["", "", "def", "unparse_cond", "(", "self", ",", "cond", ",", "negated", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Change: if negated is mistakely set, correct it\n        \"\"\"", "\n", "if", "cond", "[", "\"_type\"", "]", "==", "\"And\"", ":", "\n", "# assert negated", "\n", "            ", "if", "negated", ":", "\n", "                ", "negated", "==", "False", "\n", "", "return", "\"{} AND {}\"", ".", "format", "(", "\n", "self", ".", "unparse_cond", "(", "cond", "[", "\"left\"", "]", ")", ",", "self", ".", "unparse_cond", "(", "cond", "[", "\"right\"", "]", ")", "\n", ")", "\n", "", "elif", "cond", "[", "\"_type\"", "]", "==", "\"Or\"", ":", "\n", "# assert negated", "\n", "            ", "if", "negated", ":", "\n", "                ", "negated", "==", "False", "\n", "", "return", "\"{} OR {}\"", ".", "format", "(", "\n", "self", ".", "unparse_cond", "(", "cond", "[", "\"left\"", "]", ")", ",", "self", ".", "unparse_cond", "(", "cond", "[", "\"right\"", "]", ")", "\n", ")", "\n", "", "elif", "cond", "[", "\"_type\"", "]", "==", "\"Not\"", ":", "\n", "            ", "return", "self", ".", "unparse_cond", "(", "cond", "[", "\"c\"", "]", ",", "negated", "=", "True", ")", "\n", "", "elif", "cond", "[", "\"_type\"", "]", "==", "\"Between\"", ":", "\n", "            ", "tokens", "=", "[", "self", ".", "unparse_val_unit", "(", "cond", "[", "\"val_unit\"", "]", ")", "]", "\n", "if", "negated", ":", "\n", "                ", "tokens", ".", "append", "(", "\"NOT\"", ")", "\n", "", "tokens", "+=", "[", "\n", "\"BETWEEN\"", ",", "\n", "self", ".", "unparse_val", "(", "cond", "[", "\"val1\"", "]", ")", ",", "\n", "\"AND\"", ",", "\n", "self", ".", "unparse_val", "(", "cond", "[", "\"val2\"", "]", ")", ",", "\n", "]", "\n", "return", "\" \"", ".", "join", "(", "tokens", ")", "\n", "", "tokens", "=", "[", "self", ".", "unparse_val_unit", "(", "cond", "[", "\"val_unit\"", "]", ")", "]", "\n", "if", "negated", ":", "\n", "            ", "tokens", ".", "append", "(", "\"NOT\"", ")", "\n", "", "tokens", "+=", "[", "self", ".", "COND_TYPES_B", "[", "cond", "[", "\"_type\"", "]", "]", ",", "self", ".", "unparse_val", "(", "cond", "[", "\"val1\"", "]", ")", "]", "\n", "return", "\" \"", ".", "join", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.SpiderUnparser.unparse_col_unit": [[162, 184], ["None"], "methods", ["None"], ["", "def", "unparse_col_unit", "(", "self", ",", "col_unit", ")", ":", "\n", "        ", "\"\"\"\n        Change: do not add table prefix to column\n        TODO: this might not be necessary\n        \"\"\"", "\n", "if", "\"col_id\"", "in", "col_unit", ":", "\n", "            ", "column", "=", "self", ".", "schema", ".", "columns", "[", "col_unit", "[", "\"col_id\"", "]", "]", "\n", "if", "column", ".", "table", "is", "None", ":", "\n", "                ", "column_name", "=", "column", ".", "orig_name", "\n", "", "else", ":", "\n", "# column_name = \"{}.{}\".format(column.table.orig_name, column.orig_name)", "\n", "                ", "column_name", "=", "column", ".", "orig_name", "\n", "", "", "else", ":", "\n", "            ", "column_name", "=", "\"some_col\"", "\n", "\n", "", "if", "col_unit", "[", "\"is_distinct\"", "]", ":", "\n", "            ", "column_name", "=", "\"DISTINCT {}\"", ".", "format", "(", "column_name", ")", "\n", "", "agg_type", "=", "col_unit", "[", "\"agg_id\"", "]", "[", "\"_type\"", "]", "\n", "if", "agg_type", "==", "\"NoneAggOp\"", ":", "\n", "            ", "return", "column_name", "\n", "", "else", ":", "\n", "            ", "return", "\"{}({})\"", ".", "format", "(", "agg_type", ",", "column_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.SpiderUnparser.unparse_str": [[185, 187], ["None"], "methods", ["None"], ["", "", "def", "unparse_str", "(", "self", ",", "raw_str", ")", ":", "\n", "        ", "return", "raw_str", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.SpiderUnparserSSP.refine_from": [[190, 192], ["pcfg.SpiderUnparser.refine_from"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.refine_from"], ["    ", "def", "refine_from", "(", "self", ",", "tree", ")", ":", "\n", "        ", "super", "(", ")", ".", "refine_from", "(", "tree", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.SpiderUnparserSSP.unparse_from": [[193, 204], ["enumerate", "from_.get"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get"], ["", "def", "unparse_from", "(", "self", ",", "from_", ")", ":", "\n", "        ", "tokens", "=", "[", "\"FROM\"", "]", "\n", "for", "i", ",", "table_unit", "in", "enumerate", "(", "from_", ".", "get", "(", "\"table_units\"", ",", "[", "]", ")", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "tokens", "+=", "[", "\",\"", "]", "\n", "\n", "", "if", "table_unit", "[", "\"_type\"", "]", "==", "\"Table\"", ":", "\n", "                ", "table_id", "=", "table_unit", "[", "\"table_id\"", "]", "\n", "tokens", "+=", "[", "self", ".", "schema", ".", "tables", "[", "table_id", "]", ".", "orig_name", "]", "\n", "", "", "from_str", "=", "\" \"", ".", "join", "(", "tokens", ")", "\n", "return", "from_str", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.PCFG.__init__": [[218, 233], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "grammar", ",", "schema", ",", "use_seq_elem_rules", "=", "False", ")", ":", "\n", "        ", "self", ".", "grammar", "=", "grammar", "\n", "self", ".", "schema", "=", "schema", "\n", "self", ".", "ast_wrapper", "=", "grammar", ".", "ast_wrapper", "\n", "self", ".", "use_seq_elem_rules", "=", "use_seq_elem_rules", "\n", "\n", "self", ".", "sum_type_constructors", "=", "collections", ".", "defaultdict", "(", "\n", "lambda", ":", "collections", ".", "defaultdict", "(", "int", ")", "\n", ")", "\n", "self", ".", "field_presence_infos", "=", "collections", ".", "defaultdict", "(", "\n", "lambda", ":", "collections", ".", "defaultdict", "(", "int", ")", "\n", ")", "\n", "self", ".", "seq_lengths", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "int", ")", ")", "\n", "self", ".", "primitives", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "int", ")", ")", "\n", "self", ".", "pointers", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.PCFG.record_productions": [[234, 285], ["queue.pop", "tensor2struct.models.ast_decoder.utils.get_field_presence_info", "node.get", "node.get", "isinstance", "queue.append", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.utils.get_field_presence_info", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "record_productions", "(", "self", ",", "tree", ")", ":", "\n", "        ", "queue", "=", "[", "(", "tree", ",", "False", ")", "]", "\n", "while", "queue", ":", "\n", "            ", "node", ",", "is_seq_elem", "=", "queue", ".", "pop", "(", ")", "\n", "node_type", "=", "node", "[", "\"_type\"", "]", "\n", "\n", "# sum type", "\n", "for", "type_name", "in", "[", "node_type", "]", "+", "node", ".", "get", "(", "\"_extra_types\"", ",", "[", "]", ")", ":", "\n", "                ", "if", "type_name", "in", "self", ".", "ast_wrapper", ".", "constructors", ":", "\n", "                    ", "sum_type_name", "=", "self", ".", "ast_wrapper", ".", "constructor_to_sum_type", "[", "type_name", "]", "\n", "if", "is_seq_elem", "and", "self", ".", "use_seq_elem_rules", ":", "\n", "                        ", "self", ".", "sum_type_constructors", "[", "sum_type_name", "+", "\"_seq_elem\"", "]", "[", "\n", "type_name", "\n", "]", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "self", ".", "sum_type_constructors", "[", "sum_type_name", "]", "[", "type_name", "]", "+=", "1", "\n", "\n", "# field", "\n", "", "", "", "assert", "node_type", "in", "self", ".", "ast_wrapper", ".", "singular_types", "\n", "field_presence_info", "=", "get_field_presence_info", "(", "\n", "self", ".", "ast_wrapper", ",", "\n", "node", ",", "\n", "self", ".", "ast_wrapper", ".", "singular_types", "[", "node_type", "]", ".", "fields", ",", "\n", ")", "\n", "self", ".", "field_presence_infos", "[", "node_type", "]", "[", "field_presence_info", "]", "+=", "1", "\n", "\n", "# seq elem", "\n", "for", "field_info", "in", "self", ".", "ast_wrapper", ".", "singular_types", "[", "node_type", "]", ".", "fields", ":", "\n", "                ", "field_value", "=", "node", ".", "get", "(", "field_info", ".", "name", ",", "[", "]", "if", "field_info", ".", "seq", "else", "None", ")", "\n", "\n", "# a field that is not present", "\n", "if", "field_value", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "", "to_enqueue", "=", "[", "]", "\n", "if", "field_info", ".", "seq", ":", "\n", "                    ", "self", ".", "seq_lengths", "[", "field_info", ".", "type", "+", "\"*\"", "]", "[", "len", "(", "field_value", ")", "]", "+=", "1", "\n", "to_enqueue", "=", "field_value", "\n", "", "else", ":", "\n", "                    ", "to_enqueue", "=", "[", "field_value", "]", "\n", "\n", "# process each field", "\n", "", "for", "child", "in", "to_enqueue", ":", "\n", "                    ", "if", "isinstance", "(", "child", ",", "collections", ".", "abc", ".", "Mapping", ")", "and", "\"_type\"", "in", "child", ":", "\n", "                        ", "queue", ".", "append", "(", "(", "child", ",", "field_info", ".", "seq", ")", ")", "\n", "", "elif", "field_info", ".", "type", "in", "self", ".", "grammar", ".", "pointers", ":", "\n", "                        ", "self", ".", "pointers", "[", "field_info", ".", "type", "]", "[", "child", "]", "+=", "1", "\n", "", "else", ":", "\n", "# str, int, bool primitives", "\n", "                        ", "assert", "field_info", ".", "type", "in", "self", ".", "ast_wrapper", ".", "primitive_types", "\n", "self", ".", "primitives", "[", "field_info", ".", "type", "]", "[", "child", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.PCFG.calculate_rules": [[286, 329], ["sorted", "sorted", "sorted", "sorted", "sorted", "pcfg.PCFG.sum_type_constructors.items", "list", "pcfg.PCFG.field_presence_infos.items", "list", "pcfg.PCFG.seq_lengths.items", "list", "pcfg.PCFG.primitives.items", "list", "pcfg.PCFG.pointers.items", "list", "isinstance", "children_with_freq.items", "isinstance", "field_presence_infos_with_freq.items", "isinstance", "lengths_with_freq.items", "prim_with_freq.items", "pointer_with_freq.items", "sum", "sum", "sum", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], ["", "", "", "", "", "def", "calculate_rules", "(", "self", ")", ":", "\n", "        ", "all_rules", "=", "{", "}", "\n", "rules_prob", "=", "{", "}", "\n", "\n", "for", "sum_parent", ",", "children_with_freq", "in", "sorted", "(", "\n", "self", ".", "sum_type_constructors", ".", "items", "(", ")", "\n", ")", ":", "\n", "            ", "assert", "not", "isinstance", "(", "children_with_freq", ",", "set", ")", "\n", "children_freq_pair", "=", "list", "(", "children_with_freq", ".", "items", "(", ")", ")", "\n", "all_rules", "[", "sum_parent", "]", "=", "[", "s", "[", "0", "]", "for", "s", "in", "children_freq_pair", "]", "\n", "freqs", "=", "[", "s", "[", "1", "]", "for", "s", "in", "children_freq_pair", "]", "\n", "rules_prob", "[", "sum_parent", "]", "=", "[", "f", "/", "sum", "(", "freqs", ")", "for", "f", "in", "freqs", "]", "\n", "\n", "", "for", "prod_name", ",", "field_presence_infos_with_freq", "in", "sorted", "(", "\n", "self", ".", "field_presence_infos", ".", "items", "(", ")", "\n", ")", ":", "\n", "            ", "assert", "not", "isinstance", "(", "field_presence_infos_with_freq", ",", "set", ")", "\n", "field_freq_pair", "=", "list", "(", "field_presence_infos_with_freq", ".", "items", "(", ")", ")", "\n", "all_rules", "[", "prod_name", "]", "=", "[", "s", "[", "0", "]", "for", "s", "in", "field_freq_pair", "]", "\n", "freqs", "=", "[", "s", "[", "1", "]", "for", "s", "in", "field_freq_pair", "]", "\n", "rules_prob", "[", "prod_name", "]", "=", "[", "f", "/", "sum", "(", "freqs", ")", "for", "f", "in", "freqs", "]", "\n", "\n", "", "for", "seq_type_name", ",", "lengths_with_freq", "in", "sorted", "(", "self", ".", "seq_lengths", ".", "items", "(", ")", ")", ":", "\n", "            ", "assert", "not", "isinstance", "(", "lengths_with_freq", ",", "set", ")", "\n", "length_freq_pair", "=", "list", "(", "lengths_with_freq", ".", "items", "(", ")", ")", "\n", "all_rules", "[", "seq_type_name", "]", "=", "[", "s", "[", "0", "]", "for", "s", "in", "length_freq_pair", "]", "\n", "freqs", "=", "[", "s", "[", "1", "]", "for", "s", "in", "length_freq_pair", "]", "\n", "rules_prob", "[", "seq_type_name", "]", "=", "[", "f", "/", "sum", "(", "freqs", ")", "for", "f", "in", "freqs", "]", "\n", "\n", "", "for", "prim_type", ",", "prim_with_freq", "in", "sorted", "(", "self", ".", "primitives", ".", "items", "(", ")", ")", ":", "\n", "            ", "prim_freq_pair", "=", "list", "(", "prim_with_freq", ".", "items", "(", ")", ")", "\n", "all_rules", "[", "prim_type", "]", "=", "[", "s", "[", "0", "]", "for", "s", "in", "prim_freq_pair", "]", "\n", "freqs", "=", "[", "s", "[", "1", "]", "for", "s", "in", "prim_freq_pair", "]", "\n", "rules_prob", "[", "prim_type", "]", "=", "[", "f", "/", "sum", "(", "freqs", ")", "for", "f", "in", "freqs", "]", "\n", "\n", "", "for", "pointer_type", ",", "pointer_with_freq", "in", "sorted", "(", "self", ".", "pointers", ".", "items", "(", ")", ")", ":", "\n", "            ", "pointer_freq_pair", "=", "list", "(", "pointer_with_freq", ".", "items", "(", ")", ")", "\n", "all_rules", "[", "pointer_type", "]", "=", "[", "s", "[", "0", "]", "for", "s", "in", "pointer_freq_pair", "]", "\n", "freqs", "=", "[", "s", "[", "1", "]", "for", "s", "in", "pointer_freq_pair", "]", "\n", "rules_prob", "[", "pointer_type", "]", "=", "[", "f", "/", "sum", "(", "freqs", ")", "for", "f", "in", "freqs", "]", "\n", "\n", "", "params", "=", "{", "k", ":", "(", "all_rules", "[", "k", "]", ",", "rules_prob", "[", "k", "]", ")", "for", "k", "in", "all_rules", "}", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.PCFG.estimate": [[330, 333], ["pcfg.PCFG.calculate_rules"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.PCFG.calculate_rules"], ["", "def", "estimate", "(", "self", ")", ":", "\n", "# rules and their probs", "\n", "        ", "self", ".", "params", "=", "self", ".", "calculate_rules", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.PCFG.sample": [[334, 343], ["tqdm.tqdm", "range", "pcfg.PCFG._sample", "pcfg.PCFG._is_valid", "results.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.PCFG._sample", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.PCFG._is_valid", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "sample", "(", "self", ",", "num_samples", ",", "max_actions", "=", "100", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "for", "_", "in", "tqdm", ".", "tqdm", "(", "range", "(", "num_samples", ")", ",", "total", "=", "num_samples", ")", ":", "\n", "            ", "ret", "=", "self", ".", "_sample", "(", "max_actions", "=", "max_actions", ")", "\n", "if", "ret", "is", "not", "None", ":", "\n", "                ", "sql_tree", ",", "sql_str", "=", "ret", "\n", "if", "self", ".", "_is_valid", "(", "sql_tree", ",", "sql_str", ")", ":", "\n", "                    ", "results", ".", "append", "(", "ret", ")", "# duplicate is fine", "\n", "", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.PCFG._sample": [[344, 358], ["pcfg.TreeTraversal", "pcfg.TreeTraversal.step", "range", "pcfg.TreeTraversal.finalize", "pcfg.TreeTraversal.step", "numpy.random.choice", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.infer_tree_traversal.InferenceTreeTraversal.finalize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step"], ["", "def", "_sample", "(", "self", ",", "max_actions", ")", ":", "\n", "        ", "traversal", "=", "TreeTraversal", "(", "self", ")", "\n", "choices", ",", "scores", "=", "traversal", ".", "step", "(", "None", ")", "\n", "\n", "for", "_", "in", "range", "(", "max_actions", ")", ":", "\n", "            ", "choice_idx", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "choices", ")", ",", "1", ",", "p", "=", "scores", ")", "[", "0", "]", "\n", "choice", "=", "choices", "[", "choice_idx", "]", "\n", "ret", "=", "traversal", ".", "step", "(", "choice", ")", "\n", "\n", "if", "ret", "is", "not", "None", ":", "\n", "                ", "choices", ",", "scores", "=", "ret", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "return", "traversal", ".", "finalize", "(", "self", ".", "schema", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.PCFG._is_valid": [[359, 381], ["list", "list", "pcfg.PCFG.ast_wrapper.find_all_descendants_of_type", "pcfg.PCFG.ast_wrapper.find_all_descendants_of_type", "sql_str.endswith", "list.count", "list.count", "list.count"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper.find_all_descendants_of_type", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper.find_all_descendants_of_type"], ["", "def", "_is_valid", "(", "self", ",", "sql_tree", ",", "sql_str", ")", ":", "\n", "# * column can only exists in SELECT clause", "\n", "        ", "column_ids", "=", "list", "(", "\n", "self", ".", "ast_wrapper", ".", "find_all_descendants_of_type", "(", "sql_tree", ",", "\"column\"", ")", "\n", ")", "\n", "select_column_ids", "=", "list", "(", "\n", "self", ".", "ast_wrapper", ".", "find_all_descendants_of_type", "(", "sql_tree", "[", "\"select\"", "]", ",", "\"column\"", ")", "\n", ")", "\n", "if", "select_column_ids", ".", "count", "(", "0", ")", ">", "1", "or", "column_ids", ".", "count", "(", "\n", "0", "\n", ")", ">", "select_column_ids", ".", "count", "(", "0", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "# Orderby must have groupby", "\n", "", "if", "\"ORDER BY\"", "in", "sql_str", "and", "\"GROUP BY\"", "not", "in", "sql_str", ":", "\n", "            ", "return", "False", "\n", "\n", "# Empty groupby", "\n", "", "if", "\"GROUP BY  \"", "in", "sql_str", "or", "sql_str", ".", "endswith", "(", "\"GROUP BY \"", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.TreeTraversal.__init__": [[447, 460], ["pyrsistent.pvector", "pyrsistent.pvector", "TreeTraversal.QueueItem"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "pcfg", ")", ":", "\n", "        ", "self", ".", "pcfg", "=", "pcfg", "\n", "self", ".", "params", "=", "pcfg", ".", "params", "\n", "\n", "self", ".", "actions", "=", "pyrsistent", ".", "pvector", "(", ")", "\n", "self", ".", "queue", "=", "pyrsistent", ".", "pvector", "(", ")", "\n", "root_type", "=", "pcfg", ".", "grammar", ".", "root_type", "\n", "if", "root_type", "in", "self", ".", "pcfg", ".", "ast_wrapper", ".", "sum_types", ":", "\n", "            ", "initial_state", "=", "TreeTraversal", ".", "State", ".", "SUM_TYPE_INQUIRE", "\n", "", "else", ":", "\n", "            ", "initial_state", "=", "TreeTraversal", ".", "State", ".", "CHILDREN_INQUIRE", "\n", "", "self", ".", "cur_item", "=", "TreeTraversal", ".", "QueueItem", "(", "\n", "state", "=", "initial_state", ",", "node_type", "=", "root_type", ",", "parent_field_name", "=", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.TreeTraversal.step": [[462, 473], ["pcfg.TreeTraversal.record_last_choice", "getattr", "getattr."], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.TreeTraversal.record_last_choice"], ["", "def", "step", "(", "self", ",", "last_choice", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "self", ".", "record_last_choice", "(", "last_choice", ")", "\n", "handler_name", "=", "TreeTraversal", ".", "Handler", ".", "handlers", "[", "self", ".", "cur_item", ".", "state", "]", "\n", "handler", "=", "getattr", "(", "self", ",", "handler_name", ")", "\n", "choices", ",", "continued", "=", "handler", "(", "last_choice", ")", "\n", "if", "continued", ":", "\n", "                ", "last_choice", "=", "choices", "\n", "continue", "\n", "", "else", ":", "\n", "                ", "return", "choices", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.TreeTraversal.process_sum_inquire": [[474, 480], ["Handler.register_handler", "attr.evolve"], "methods", ["None"], ["", "", "", "@", "Handler", ".", "register_handler", "(", "State", ".", "SUM_TYPE_INQUIRE", ")", "\n", "def", "process_sum_inquire", "(", "self", ",", "last_choice", ")", ":", "\n", "        ", "self", ".", "cur_item", "=", "attr", ".", "evolve", "(", "\n", "self", ".", "cur_item", ",", "state", "=", "TreeTraversal", ".", "State", ".", "SUM_TYPE_APPLY", "\n", ")", "\n", "return", "self", ".", "params", "[", "self", ".", "cur_item", ".", "node_type", "]", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.TreeTraversal.process_sum_apply": [[481, 490], ["Handler.register_handler", "attr.evolve"], "methods", ["None"], ["", "@", "Handler", ".", "register_handler", "(", "State", ".", "SUM_TYPE_APPLY", ")", "\n", "def", "process_sum_apply", "(", "self", ",", "last_choice", ")", ":", "\n", "        ", "singular_type", "=", "last_choice", "\n", "self", ".", "cur_item", "=", "attr", ".", "evolve", "(", "\n", "self", ".", "cur_item", ",", "\n", "node_type", "=", "singular_type", ",", "\n", "state", "=", "TreeTraversal", ".", "State", ".", "CHILDREN_INQUIRE", ",", "\n", ")", "\n", "return", "None", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.TreeTraversal.process_children_inquire": [[491, 506], ["Handler.register_handler", "attr.evolve", "pcfg.TreeTraversal.pop"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop"], ["", "@", "Handler", ".", "register_handler", "(", "State", ".", "CHILDREN_INQUIRE", ")", "\n", "def", "process_children_inquire", "(", "self", ",", "last_choice", ")", ":", "\n", "        ", "type_info", "=", "self", ".", "pcfg", ".", "ast_wrapper", ".", "singular_types", "[", "self", ".", "cur_item", ".", "node_type", "]", "\n", "if", "not", "type_info", ".", "fields", ":", "\n", "            ", "if", "self", ".", "pop", "(", ")", ":", "\n", "                ", "last_choice", "=", "None", "\n", "return", "last_choice", ",", "True", "\n", "", "else", ":", "\n", "                ", "return", "None", ",", "False", "\n", "\n", "", "", "self", ".", "cur_item", "=", "attr", ".", "evolve", "(", "\n", "self", ".", "cur_item", ",", "state", "=", "TreeTraversal", ".", "State", ".", "CHILDREN_APPLY", "\n", ")", "\n", "\n", "return", "self", ".", "params", "[", "self", ".", "cur_item", ".", "node_type", "]", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.TreeTraversal.process_children_apply": [[507, 558], ["Handler.register_handler", "pcfg.TreeTraversal.queue.append", "reversed", "pcfg.TreeTraversal.pop", "TreeTraversal.QueueItem", "list", "pcfg.TreeTraversal.queue.append", "zip", "TreeTraversal.QueueItem", "ValueError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "@", "Handler", ".", "register_handler", "(", "State", ".", "CHILDREN_APPLY", ")", "\n", "def", "process_children_apply", "(", "self", ",", "last_choice", ")", ":", "\n", "        ", "children_presence", "=", "last_choice", "\n", "\n", "self", ".", "queue", "=", "self", ".", "queue", ".", "append", "(", "\n", "TreeTraversal", ".", "QueueItem", "(", "\n", "state", "=", "TreeTraversal", ".", "State", ".", "NODE_FINISHED", ",", "\n", "node_type", "=", "None", ",", "\n", "parent_field_name", "=", "None", ",", "\n", ")", "\n", ")", "\n", "for", "field_info", ",", "present", "in", "reversed", "(", "\n", "list", "(", "\n", "zip", "(", "\n", "self", ".", "pcfg", ".", "ast_wrapper", ".", "singular_types", "[", "\n", "self", ".", "cur_item", ".", "node_type", "\n", "]", ".", "fields", ",", "\n", "children_presence", ",", "\n", ")", "\n", ")", "\n", ")", ":", "\n", "            ", "if", "not", "present", ":", "\n", "                ", "continue", "\n", "\n", "", "child_type", "=", "field_type", "=", "field_info", ".", "type", "\n", "if", "field_info", ".", "seq", ":", "\n", "                ", "child_state", "=", "TreeTraversal", ".", "State", ".", "LIST_LENGTH_INQUIRE", "\n", "", "elif", "field_type", "in", "self", ".", "pcfg", ".", "ast_wrapper", ".", "sum_types", ":", "\n", "                ", "child_state", "=", "TreeTraversal", ".", "State", ".", "SUM_TYPE_INQUIRE", "\n", "", "elif", "field_type", "in", "self", ".", "pcfg", ".", "ast_wrapper", ".", "product_types", ":", "\n", "                ", "assert", "self", ".", "pcfg", ".", "ast_wrapper", ".", "product_types", "[", "field_type", "]", ".", "fields", "\n", "child_state", "=", "TreeTraversal", ".", "State", ".", "CHILDREN_INQUIRE", "\n", "", "elif", "field_type", "in", "self", ".", "pcfg", ".", "grammar", ".", "pointers", ":", "\n", "                ", "child_state", "=", "TreeTraversal", ".", "State", ".", "POINTER_INQUIRE", "\n", "", "elif", "field_type", "in", "self", ".", "pcfg", ".", "ast_wrapper", ".", "primitive_types", ":", "\n", "                ", "child_state", "=", "TreeTraversal", ".", "State", ".", "GEN_TOKEN", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Unable to handle field type {}\"", ".", "format", "(", "field_type", ")", ")", "\n", "\n", "", "self", ".", "queue", "=", "self", ".", "queue", ".", "append", "(", "\n", "TreeTraversal", ".", "QueueItem", "(", "\n", "state", "=", "child_state", ",", "\n", "node_type", "=", "child_type", ",", "\n", "parent_field_name", "=", "field_info", ".", "name", ",", "\n", ")", "\n", ")", "\n", "\n", "", "advanced", "=", "self", ".", "pop", "(", ")", "\n", "assert", "advanced", "\n", "last_choice", "=", "None", "\n", "return", "last_choice", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.TreeTraversal.process_list_length_inquire": [[559, 566], ["Handler.register_handler", "attr.evolve"], "methods", ["None"], ["", "@", "Handler", ".", "register_handler", "(", "State", ".", "LIST_LENGTH_INQUIRE", ")", "\n", "def", "process_list_length_inquire", "(", "self", ",", "last_choice", ")", ":", "\n", "        ", "self", ".", "cur_item", "=", "attr", ".", "evolve", "(", "\n", "self", ".", "cur_item", ",", "state", "=", "TreeTraversal", ".", "State", ".", "LIST_LENGTH_APPLY", "\n", ")", "\n", "\n", "return", "self", ".", "params", "[", "self", ".", "cur_item", ".", "node_type", "+", "\"*\"", "]", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.TreeTraversal.process_list_length_apply": [[567, 601], ["Handler.register_handler", "range", "pcfg.TreeTraversal.pop", "pcfg.TreeTraversal.queue.append", "TreeTraversal.QueueItem", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "@", "Handler", ".", "register_handler", "(", "State", ".", "LIST_LENGTH_APPLY", ")", "\n", "def", "process_list_length_apply", "(", "self", ",", "last_choice", ")", ":", "\n", "        ", "num_children", "=", "last_choice", "\n", "elem_type", "=", "self", ".", "cur_item", ".", "node_type", "\n", "\n", "child_node_type", "=", "elem_type", "\n", "if", "elem_type", "in", "self", ".", "pcfg", ".", "ast_wrapper", ".", "sum_types", ":", "\n", "            ", "child_state", "=", "TreeTraversal", ".", "State", ".", "SUM_TYPE_INQUIRE", "\n", "if", "self", ".", "pcfg", ".", "use_seq_elem_rules", ":", "\n", "                ", "child_node_type", "=", "elem_type", "+", "\"_seq_elem\"", "\n", "", "", "elif", "elem_type", "in", "self", ".", "pcfg", ".", "ast_wrapper", ".", "product_types", ":", "\n", "            ", "child_state", "=", "TreeTraversal", ".", "State", ".", "CHILDREN_INQUIRE", "\n", "", "elif", "elem_type", "==", "\"identifier\"", ":", "\n", "            ", "child_state", "=", "TreeTraversal", ".", "State", ".", "GEN_TOKEN", "\n", "child_node_type", "=", "\"str\"", "\n", "", "elif", "elem_type", "in", "self", ".", "pcfg", ".", "ast_wrapper", ".", "primitive_types", ":", "\n", "# TODO: Fix this", "\n", "            ", "raise", "ValueError", "(", "\"sequential builtin types not supported\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unable to handle seq field type {}\"", ".", "format", "(", "elem_type", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_children", ")", ":", "\n", "            ", "self", ".", "queue", "=", "self", ".", "queue", ".", "append", "(", "\n", "TreeTraversal", ".", "QueueItem", "(", "\n", "state", "=", "child_state", ",", "\n", "node_type", "=", "child_node_type", ",", "\n", "parent_field_name", "=", "self", ".", "cur_item", ".", "parent_field_name", ",", "\n", ")", "\n", ")", "\n", "\n", "", "advanced", "=", "self", ".", "pop", "(", ")", "\n", "assert", "advanced", "\n", "last_choice", "=", "None", "\n", "return", "last_choice", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.TreeTraversal.process_gen_token": [[602, 611], ["Handler.register_handler", "pcfg.TreeTraversal.pop"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop"], ["", "@", "Handler", ".", "register_handler", "(", "State", ".", "GEN_TOKEN", ")", "\n", "def", "process_gen_token", "(", "self", ",", "last_choice", ")", ":", "\n", "        ", "if", "last_choice", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "pop", "(", ")", ":", "\n", "                ", "return", "None", ",", "True", "\n", "", "else", ":", "\n", "                ", "return", "None", ",", "False", "\n", "\n", "", "", "return", "self", ".", "params", "[", "self", ".", "cur_item", ".", "node_type", "]", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.TreeTraversal.process_pointer_inquire": [[612, 619], ["Handler.register_handler", "attr.evolve"], "methods", ["None"], ["", "@", "Handler", ".", "register_handler", "(", "State", ".", "POINTER_INQUIRE", ")", "\n", "def", "process_pointer_inquire", "(", "self", ",", "last_choice", ")", ":", "\n", "        ", "self", ".", "cur_item", "=", "attr", ".", "evolve", "(", "\n", "self", ".", "cur_item", ",", "state", "=", "TreeTraversal", ".", "State", ".", "POINTER_APPLY", "\n", ")", "\n", "\n", "return", "self", ".", "params", "[", "self", ".", "cur_item", ".", "node_type", "]", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.TreeTraversal.process_pointer_apply": [[620, 627], ["Handler.register_handler", "pcfg.TreeTraversal.pop"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop"], ["", "@", "Handler", ".", "register_handler", "(", "State", ".", "POINTER_APPLY", ")", "\n", "def", "process_pointer_apply", "(", "self", ",", "last_choice", ")", ":", "\n", "        ", "if", "self", ".", "pop", "(", ")", ":", "\n", "            ", "last_choice", "=", "None", "\n", "return", "last_choice", ",", "True", "\n", "", "else", ":", "\n", "            ", "return", "None", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.TreeTraversal.process_node_finished": [[628, 635], ["Handler.register_handler", "pcfg.TreeTraversal.pop"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop"], ["", "", "@", "Handler", ".", "register_handler", "(", "State", ".", "NODE_FINISHED", ")", "\n", "def", "process_node_finished", "(", "self", ",", "last_choice", ")", ":", "\n", "        ", "if", "self", ".", "pop", "(", ")", ":", "\n", "            ", "last_choice", "=", "None", "\n", "return", "last_choice", ",", "True", "\n", "", "else", ":", "\n", "            ", "return", "None", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.TreeTraversal.pop": [[636, 642], ["pcfg.TreeTraversal.queue.delete"], "methods", ["None"], ["", "", "def", "pop", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "queue", ":", "\n", "            ", "self", ".", "cur_item", "=", "self", ".", "queue", "[", "-", "1", "]", "\n", "self", ".", "queue", "=", "self", ".", "queue", ".", "delete", "(", "-", "1", ")", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.TreeTraversal.record_last_choice": [[643, 687], ["pcfg.TreeTraversal.actions.append", "pcfg.TreeTraversal.SetParentField", "pcfg.TreeTraversal.actions.append", "pcfg.TreeTraversal.actions.append", "pcfg.TreeTraversal.NodeFinished", "pcfg.TreeTraversal.CreateParentFieldList", "pcfg.TreeTraversal.actions.append", "pcfg.TreeTraversal.actions.append", "pcfg.TreeTraversal.actions.append", "pcfg.TreeTraversal.AppendTerminalToken", "pcfg.TreeTraversal.FinalizeTerminal", "pcfg.TreeTraversal.SetParentField", "pcfg.TreeTraversal.actions.append", "pcfg.TreeTraversal.NodeFinished"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "record_last_choice", "(", "self", ",", "last_choice", ")", ":", "\n", "# CHILDREN_INQUIRE", "\n", "        ", "if", "self", ".", "cur_item", ".", "state", "==", "TreeTraversal", ".", "State", ".", "CHILDREN_INQUIRE", ":", "\n", "            ", "self", ".", "actions", "=", "self", ".", "actions", ".", "append", "(", "\n", "self", ".", "SetParentField", "(", "\n", "self", ".", "cur_item", ".", "parent_field_name", ",", "self", ".", "cur_item", ".", "node_type", "\n", ")", "\n", ")", "\n", "type_info", "=", "self", ".", "pcfg", ".", "ast_wrapper", ".", "singular_types", "[", "self", ".", "cur_item", ".", "node_type", "]", "\n", "if", "not", "type_info", ".", "fields", ":", "\n", "                ", "self", ".", "actions", "=", "self", ".", "actions", ".", "append", "(", "self", ".", "NodeFinished", "(", ")", ")", "\n", "\n", "# LIST_LENGTH_APPLY", "\n", "", "", "elif", "self", ".", "cur_item", ".", "state", "==", "TreeTraversal", ".", "State", ".", "LIST_LENGTH_APPLY", ":", "\n", "            ", "self", ".", "actions", "=", "self", ".", "actions", ".", "append", "(", "\n", "self", ".", "CreateParentFieldList", "(", "self", ".", "cur_item", ".", "parent_field_name", ")", "\n", ")", "\n", "\n", "# GEN_TOKEN", "\n", "", "elif", "self", ".", "cur_item", ".", "state", "==", "TreeTraversal", ".", "State", ".", "GEN_TOKEN", ":", "\n", "            ", "if", "last_choice", "is", "not", "None", ":", "\n", "                ", "self", ".", "actions", "=", "self", ".", "actions", ".", "append", "(", "\n", "self", ".", "AppendTerminalToken", "(", "\n", "self", ".", "cur_item", ".", "parent_field_name", ",", "last_choice", "\n", ")", "\n", ")", "\n", "self", ".", "actions", "=", "self", ".", "actions", ".", "append", "(", "\n", "self", ".", "FinalizeTerminal", "(", "\n", "self", ".", "cur_item", ".", "parent_field_name", ",", "self", ".", "cur_item", ".", "node_type", "\n", ")", "\n", ")", "\n", "\n", "", "", "elif", "self", ".", "cur_item", ".", "state", "==", "TreeTraversal", ".", "State", ".", "POINTER_APPLY", ":", "\n", "            ", "self", ".", "actions", "=", "self", ".", "actions", ".", "append", "(", "\n", "self", ".", "SetParentField", "(", "\n", "self", ".", "cur_item", ".", "parent_field_name", ",", "\n", "node_type", "=", "None", ",", "\n", "node_value", "=", "last_choice", ",", "\n", ")", "\n", ")", "\n", "\n", "# NODE_FINISHED", "\n", "", "elif", "self", ".", "cur_item", ".", "state", "==", "TreeTraversal", ".", "State", ".", "NODE_FINISHED", ":", "\n", "            ", "self", ".", "actions", "=", "self", ".", "actions", ".", "append", "(", "self", ".", "NodeFinished", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.TreeTraversal.finalize": [[688, 749], ["enumerate", "isinstance", "stack.pop.get", "isinstance", "pcfg.unparse", "stack.append", "isinstance", "current[].append", "stack.append", "isinstance", "stack.pop.get", "stack.pop.get.append", "isinstance", "stack.pop.get", "isinstance", "len", "stack.pop", "ValueError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.unparse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop"], ["", "", "def", "finalize", "(", "self", ",", "schema", ")", ":", "\n", "        ", "root", "=", "current", "=", "None", "\n", "stack", "=", "[", "]", "\n", "for", "i", ",", "action", "in", "enumerate", "(", "self", ".", "actions", ")", ":", "\n", "            ", "if", "isinstance", "(", "action", ",", "self", ".", "SetParentField", ")", ":", "\n", "                ", "if", "action", ".", "node_value", "is", "None", ":", "\n", "                    ", "new_node", "=", "{", "\"_type\"", ":", "action", ".", "node_type", "}", "\n", "", "else", ":", "\n", "                    ", "new_node", "=", "action", ".", "node_value", "\n", "\n", "", "if", "action", ".", "parent_field_name", "is", "None", ":", "\n", "# Initial node in tree.", "\n", "                    ", "assert", "root", "is", "None", "\n", "root", "=", "current", "=", "new_node", "\n", "stack", ".", "append", "(", "root", ")", "\n", "continue", "\n", "\n", "", "existing_list", "=", "current", ".", "get", "(", "action", ".", "parent_field_name", ")", "\n", "if", "existing_list", "is", "None", ":", "\n", "                    ", "current", "[", "action", ".", "parent_field_name", "]", "=", "new_node", "\n", "", "else", ":", "\n", "                    ", "assert", "isinstance", "(", "existing_list", ",", "list", ")", "\n", "current", "[", "action", ".", "parent_field_name", "]", ".", "append", "(", "new_node", ")", "\n", "\n", "", "if", "action", ".", "node_value", "is", "None", ":", "\n", "                    ", "stack", ".", "append", "(", "current", ")", "\n", "current", "=", "new_node", "\n", "\n", "", "", "elif", "isinstance", "(", "action", ",", "self", ".", "CreateParentFieldList", ")", ":", "\n", "                ", "current", "[", "action", ".", "parent_field_name", "]", "=", "[", "]", "\n", "\n", "", "elif", "isinstance", "(", "action", ",", "self", ".", "AppendTerminalToken", ")", ":", "\n", "                ", "tokens", "=", "current", ".", "get", "(", "action", ".", "parent_field_name", ")", "\n", "if", "tokens", "is", "None", ":", "\n", "                    ", "tokens", "=", "current", "[", "action", ".", "parent_field_name", "]", "=", "[", "]", "\n", "", "tokens", ".", "append", "(", "action", ".", "value", ")", "\n", "\n", "", "elif", "isinstance", "(", "action", ",", "self", ".", "FinalizeTerminal", ")", ":", "\n", "                ", "tokens", "=", "current", ".", "get", "(", "action", ".", "parent_field_name", ",", "[", "]", ")", "\n", "assert", "len", "(", "tokens", ")", "==", "1", "\n", "value", "=", "tokens", "[", "0", "]", "\n", "current", "[", "action", ".", "parent_field_name", "]", "=", "value", "\n", "\n", "", "elif", "isinstance", "(", "action", ",", "self", ".", "NodeFinished", ")", ":", "\n", "                ", "current", "=", "stack", ".", "pop", "(", ")", "\n", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "action", ")", "\n", "\n", "", "", "if", "stack", ":", "\n", "# not finished", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "refine_from", "=", "self", ".", "pcfg", ".", "grammar", ".", "infer_from_conditions", "\n", "sql_str", "=", "unparse", "(", "\n", "self", ".", "pcfg", ".", "ast_wrapper", ",", "schema", ",", "root", ",", "refine_from", "=", "refine_from", "\n", ")", "\n", "return", "root", ",", "sql_str", "\n", "", "except", "KeyError", ":", "\n", "                ", "return", "None", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.pcfg.unparse": [[205, 211], ["SpiderUnparserSSP.unparse_sql", "pcfg.SpiderUnparser", "pcfg.SpiderUnparserSSP"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_sql"], ["", "", "def", "unparse", "(", "ast_wrapper", ",", "schema", ",", "tree", ",", "refine_from", "=", "True", ")", ":", "\n", "    ", "if", "refine_from", ":", "\n", "        ", "unparser", "=", "SpiderUnparser", "(", "ast_wrapper", ",", "schema", ")", "\n", "", "else", ":", "\n", "        ", "unparser", "=", "SpiderUnparserSSP", "(", "ast_wrapper", ",", "schema", ")", "\n", "", "return", "unparser", ".", "unparse_sql", "(", "tree", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Kernel.kernel": [[9, 20], ["tree_kernels.Kernel.preProcess", "tree_kernels.Kernel.preProcess", "tree_kernels.Kernel.evaluate", "isinstance", "print", "isinstance", "print"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPdakFast.preProcess", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPdakFast.preProcess", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.plot-1.evaluate"], ["    ", "def", "kernel", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "# compute the tree kernel on the trees a and b", "\n", "        ", "if", "not", "isinstance", "(", "a", ",", "tree", ".", "Tree", ")", ":", "\n", "            ", "print", "(", "\"ERROR: first parameter has to be a Tree Object\"", ")", "\n", "return", "\"\"", "\n", "", "if", "not", "isinstance", "(", "b", ",", "tree", ".", "Tree", ")", ":", "\n", "            ", "print", "(", "\"ERROR: second parameter has to be a Tree Object\"", ")", "\n", "return", "\"\"", "\n", "", "self", ".", "preProcess", "(", "a", ")", "\n", "self", ".", "preProcess", "(", "b", ")", "\n", "return", "self", ".", "evaluate", "(", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Kernel.preProcess": [[21, 26], ["print"], "methods", ["None"], ["", "def", "preProcess", "(", "self", ",", "a", ")", ":", "\n", "# Create any data structure useful for computing the kernel", "\n", "# To be instantiated in subclasses", "\n", "        ", "print", "(", "\"ERROR: prepProcess() must be executed in subclasses\"", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Kernel.evaluate": [[27, 31], ["print"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "# To be instantiated in subclasses", "\n", "        ", "print", "(", "\"ERROR: evaluated() must be executed in subclasses\"", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Kernel.printKernelMatrix": [[32, 42], ["len", "range", "isinstance", "print", "range", "print", "tree_kernels.Kernel.kernel", "dataset.getExample", "dataset.getExample"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.kernel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.getExample", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.getExample"], ["", "def", "printKernelMatrix", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "dataset", ",", "tree", ".", "Dataset", ")", ":", "\n", "            ", "print", "(", "\"ERROR: the first Parameter must be a Dataset object\"", ")", "\n", "return", "\n", "", "ne", "=", "len", "(", "dataset", ")", "\n", "for", "i", "in", "range", "(", "ne", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", ",", "ne", ")", ":", "\n", "                ", "print", "(", "\n", "\"%d %d %.2f\"", "\n", "%", "(", "i", ",", "j", ",", "self", ".", "kernel", "(", "dataset", ".", "getExample", "(", "i", ")", ",", "dataset", ".", "getExample", "(", "j", ")", ")", ",", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelST.__init__": [[46, 50], ["float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "l", ",", "savememory", "=", "1", ",", "hashsep", "=", "\"#\"", ")", ":", "\n", "        ", "self", ".", "l", "=", "float", "(", "l", ")", "\n", "self", ".", "hashsep", "=", "hashsep", "\n", "self", ".", "savememory", "=", "savememory", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelST.preProcess": [[51, 61], ["hasattr", "a.root.setHashSubtreeIdentifier", "tensor2struct.utils.tree.SubtreeIDSubtreeSizeList", "a.kernelstrepr.sort", "hasattr", "a.root.setSubtreeSize", "a.deleteRootTreeNode"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.setHashSubtreeIdentifier", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.setSubtreeSize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.deleteRootTreeNode"], ["", "def", "preProcess", "(", "self", ",", "a", ")", ":", "\n", "        ", "if", "hasattr", "(", "a", ",", "\"kernelstrepr\"", ")", ":", "# already preprocessed", "\n", "            ", "return", "\n", "", "if", "not", "hasattr", "(", "a", ".", "root", ",", "\"stsize\"", ")", ":", "\n", "            ", "a", ".", "root", ".", "setSubtreeSize", "(", ")", "\n", "", "a", ".", "root", ".", "setHashSubtreeIdentifier", "(", "self", ".", "hashsep", ")", "\n", "a", ".", "kernelstrepr", "=", "tree", ".", "SubtreeIDSubtreeSizeList", "(", "a", ".", "root", ")", "\n", "a", ".", "kernelstrepr", ".", "sort", "(", ")", "\n", "if", "self", ".", "savememory", "==", "1", ":", "\n", "            ", "a", ".", "deleteRootTreeNode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelST.evaluate": [[62, 80], ["len", "len", "ha.getSubtreeID", "hb.getSubtreeID", "ha.getSubtreeID", "hb.getSubtreeID", "ha.getSubtreeID", "ha.getSubtreeID", "hb.getSubtreeID", "hb.getSubtreeID", "ha.getSubtreeSize"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeSize"], ["", "", "def", "evaluate", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "ha", ",", "hb", "=", "(", "a", ".", "kernelstrepr", ",", "b", ".", "kernelstrepr", ")", "\n", "# Assumes ha and hb are ordered list of pairs (subtreeid, subtreesize)", "\n", "# a.kernelreprst,b.kernelreprst are checked or created in preProcess()", "\n", "i", ",", "j", ",", "k", ",", "toti", ",", "totj", "=", "(", "0", ",", "0", ",", "0", ",", "len", "(", "ha", ")", ",", "len", "(", "hb", ")", ")", "\n", "while", "i", "<", "toti", "and", "j", "<", "totj", ":", "\n", "            ", "if", "ha", ".", "getSubtreeID", "(", "i", ")", "==", "hb", ".", "getSubtreeID", "(", "j", ")", ":", "\n", "                ", "ci", ",", "cj", "=", "(", "i", ",", "j", ")", "\n", "while", "i", "<", "toti", "and", "ha", ".", "getSubtreeID", "(", "i", ")", "==", "ha", ".", "getSubtreeID", "(", "ci", ")", ":", "\n", "                    ", "i", "+=", "1", "\n", "", "while", "j", "<", "totj", "and", "hb", ".", "getSubtreeID", "(", "j", ")", "==", "hb", ".", "getSubtreeID", "(", "cj", ")", ":", "\n", "                    ", "j", "+=", "1", "\n", "", "k", "+=", "(", "i", "-", "ci", ")", "*", "(", "j", "-", "cj", ")", "*", "(", "self", ".", "l", "**", "ha", ".", "getSubtreeSize", "(", "ci", ")", ")", "\n", "", "elif", "ha", ".", "getSubtreeID", "(", "i", ")", "<", "hb", ".", "getSubtreeID", "(", "j", ")", ":", "\n", "                ", "i", "+=", "1", "\n", "", "else", ":", "\n", "                ", "j", "+=", "1", "\n", "", "", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelSST.__init__": [[83, 87], ["float", "tree_kernels.Cache"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "l", ",", "hashsep", "=", "\"#\"", ")", ":", "\n", "        ", "self", ".", "l", "=", "float", "(", "l", ")", "\n", "self", ".", "hashsep", "=", "hashsep", "\n", "self", ".", "cache", "=", "Cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelSST.preProcess": [[88, 94], ["hasattr", "a.root.setHashSubtreeIdentifier", "tensor2struct.utils.tree.ProdSubtreeList", "a.kernelsstrepr.sort"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.setHashSubtreeIdentifier", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort"], ["", "def", "preProcess", "(", "self", ",", "a", ")", ":", "\n", "        ", "if", "hasattr", "(", "a", ",", "\"kernelsstrepr\"", ")", ":", "# already preprocessed", "\n", "            ", "return", "\n", "", "a", ".", "root", ".", "setHashSubtreeIdentifier", "(", "self", ".", "hashsep", ")", "\n", "a", ".", "kernelsstrepr", "=", "tree", ".", "ProdSubtreeList", "(", "a", ".", "root", ")", "\n", "a", ".", "kernelsstrepr", ".", "sort", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelSST.CSST": [[95, 120], ["tree_kernels.KernelSST.cache.exists", "float", "c.getSubtreeID", "d.getSubtreeID", "float", "c.getOutdegree", "tree_kernels.KernelSST.cache.insert", "str", "str", "tree_kernels.KernelSST.cache.read", "d.getOutdegree", "range", "str", "d.getSubtreeID", "str", "c.getSubtreeID", "c.getSubtreeID", "d.getSubtreeID", "c.getChild().getProduction", "d.getChild().getProduction", "tree_kernels.KernelSST.CSST", "c.getChild().getSubtreeID", "d.getChild().getSubtreeID", "tree_kernels.KernelSST.cache.insert", "tree_kernels.KernelSST.cache.insert", "c.getChild", "d.getChild", "c.getChild", "d.getChild", "c.getChild", "d.getChild", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.exists", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getOutdegree", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.insert", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.read", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getOutdegree", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.ProdSubtreeList.getProduction", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.ProdSubtreeList.getProduction", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelSST.CSST", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.insert", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.insert", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getChild", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getChild", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getChild", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getChild", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getChild", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getChild"], ["", "def", "CSST", "(", "self", ",", "c", ",", "d", ")", ":", "\n", "        ", "if", "c", ".", "getSubtreeID", "(", ")", "<", "d", ".", "getSubtreeID", "(", ")", ":", "\n", "            ", "tmpkey", "=", "str", "(", "c", ".", "getSubtreeID", "(", ")", ")", "+", "\"#\"", "+", "str", "(", "d", ".", "getSubtreeID", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "tmpkey", "=", "str", "(", "d", ".", "getSubtreeID", "(", ")", ")", "+", "\"#\"", "+", "str", "(", "c", ".", "getSubtreeID", "(", ")", ")", "\n", "", "if", "self", ".", "cache", ".", "exists", "(", "tmpkey", ")", ":", "\n", "            ", "return", "float", "(", "self", ".", "cache", ".", "read", "(", "tmpkey", ")", ")", "\n", "", "else", ":", "\n", "            ", "prod", "=", "self", ".", "l", "\n", "nc", "=", "c", ".", "getOutdegree", "(", ")", "\n", "if", "nc", "==", "d", ".", "getOutdegree", "(", ")", ":", "\n", "                ", "for", "ci", "in", "range", "(", "nc", ")", ":", "\n", "                    ", "if", "c", ".", "getChild", "(", "ci", ")", ".", "getProduction", "(", ")", "==", "d", ".", "getChild", "(", "ci", ")", ".", "getProduction", "(", ")", ":", "\n", "                        ", "prod", "*=", "1", "+", "self", ".", "CSST", "(", "c", ".", "getChild", "(", "ci", ")", ",", "d", ".", "getChild", "(", "ci", ")", ")", "\n", "", "else", ":", "\n", "                        ", "cid", ",", "did", "=", "(", "\n", "c", ".", "getChild", "(", "ci", ")", ".", "getSubtreeID", "(", ")", ",", "\n", "d", ".", "getChild", "(", "ci", ")", ".", "getSubtreeID", "(", ")", ",", "\n", ")", "\n", "if", "cid", "<", "did", ":", "\n", "                            ", "self", ".", "cache", ".", "insert", "(", "str", "(", "cid", ")", "+", "str", "(", "did", ")", ",", "0", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "cache", ".", "insert", "(", "str", "(", "did", ")", "+", "str", "(", "cid", ")", ",", "0", ")", "\n", "", "", "", "", "self", ".", "cache", ".", "insert", "(", "tmpkey", ",", "prod", ")", "\n", "", "return", "float", "(", "prod", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelSST.evaluate": [[121, 142], ["tree_kernels.KernelSST.cache.removeAll", "len", "len", "pa.getProduction", "pb.getProduction", "pa.getProduction", "pa.getProduction", "tree_kernels.KernelSST.CSST", "len", "len", "pb.getProduction", "pb.getProduction", "pa.getTree", "pb.getTree", "pa.getProduction", "pb.getProduction", "len", "len", "pa.getProduction", "pb.getProduction", "pa.getProduction", "pb.getProduction"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.removeAll", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.ProdSubtreeList.getProduction", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.ProdSubtreeList.getProduction", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.ProdSubtreeList.getProduction", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.ProdSubtreeList.getProduction", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelSST.CSST", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.ProdSubtreeList.getProduction", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.ProdSubtreeList.getProduction", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.LabelSubtreeList.getTree", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.LabelSubtreeList.getTree", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.ProdSubtreeList.getProduction", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.ProdSubtreeList.getProduction", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.ProdSubtreeList.getProduction", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.ProdSubtreeList.getProduction", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.ProdSubtreeList.getProduction", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.ProdSubtreeList.getProduction"], ["", "def", "evaluate", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "pa", ",", "pb", "=", "(", "a", ".", "kernelsstrepr", ",", "b", ".", "kernelsstrepr", ")", "\n", "self", ".", "cache", ".", "removeAll", "(", ")", "\n", "i", ",", "j", ",", "k", ",", "toti", ",", "totj", "=", "(", "0", ",", "0", ",", "0", ",", "len", "(", "pa", ")", ",", "len", "(", "pb", ")", ")", "\n", "while", "i", "<", "toti", "and", "j", "<", "totj", ":", "\n", "            ", "if", "pa", ".", "getProduction", "(", "i", ")", "==", "pb", ".", "getProduction", "(", "j", ")", ":", "\n", "                ", "ci", ",", "cj", "=", "(", "i", ",", "j", ")", "\n", "while", "i", "<", "toti", "and", "pa", ".", "getProduction", "(", "i", ")", "==", "pa", ".", "getProduction", "(", "ci", ")", ":", "\n", "                    ", "j", "=", "cj", "\n", "while", "j", "<", "totj", "and", "pb", ".", "getProduction", "(", "j", ")", "==", "pb", ".", "getProduction", "(", "cj", ")", ":", "\n", "                        ", "k", "+=", "self", ".", "CSST", "(", "pa", ".", "getTree", "(", "i", ")", ",", "pb", ".", "getTree", "(", "j", ")", ")", "\n", "j", "+=", "1", "\n", "", "i", "+=", "1", "\n", "", "", "elif", "len", "(", "pa", ".", "getProduction", "(", "i", ")", ")", "<", "len", "(", "pb", ".", "getProduction", "(", "j", ")", ")", "or", "(", "\n", "len", "(", "pa", ".", "getProduction", "(", "i", ")", ")", "==", "len", "(", "pb", ".", "getProduction", "(", "j", ")", ")", "\n", "and", "pa", ".", "getProduction", "(", "i", ")", "<", "pb", ".", "getProduction", "(", "j", ")", "\n", ")", ":", "\n", "                ", "i", "+=", "1", "\n", "", "else", ":", "\n", "                ", "j", "+=", "1", "\n", "", "", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPT.__init__": [[145, 150], ["float", "float", "tree_kernels.Cache"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "l", ",", "m", ",", "hashsep", "=", "\"#\"", ")", ":", "\n", "        ", "self", ".", "l", "=", "float", "(", "l", ")", "\n", "self", ".", "m", "=", "float", "(", "m", ")", "\n", "self", ".", "hashsep", "=", "hashsep", "\n", "self", ".", "cache", "=", "Cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPT.preProcess": [[151, 157], ["hasattr", "a.root.setHashSubtreeIdentifier", "tensor2struct.utils.tree.LabelSubtreeList", "a.kernelptrepr.sort"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.setHashSubtreeIdentifier", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort"], ["", "def", "preProcess", "(", "self", ",", "a", ")", ":", "\n", "        ", "if", "hasattr", "(", "a", ",", "\"kernelptrepr\"", ")", ":", "# already preprocessed", "\n", "            ", "return", "\n", "", "a", ".", "root", ".", "setHashSubtreeIdentifier", "(", "self", ".", "hashsep", ")", "\n", "a", ".", "kernelptrepr", "=", "tree", ".", "LabelSubtreeList", "(", "a", ".", "root", ")", "\n", "a", ".", "kernelptrepr", ".", "sort", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPT.DeltaSk": [[158, 189], ["range", "range", "sum", "range", "min", "range", "range", "range", "range", "range", "range", "range", "range", "a.getChild().getLabel", "b.getChild().getLabel", "tree_kernels.KernelPT.CPT", "a.getChild", "b.getChild", "a.getChild().getLabel", "b.getChild().getLabel", "a.getChild", "b.getChild", "tree_kernels.KernelPT.CPT", "a.getChild", "b.getChild", "a.getChild", "b.getChild"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getLabel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getLabel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPT.CPT", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getChild", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getChild", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getLabel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getLabel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getChild", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getChild", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPT.CPT", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getChild", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getChild", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getChild", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getChild"], ["", "def", "DeltaSk", "(", "self", ",", "a", ",", "b", ",", "nca", ",", "ncb", ")", ":", "\n", "        ", "DPS", "=", "[", "[", "0", "for", "i", "in", "range", "(", "ncb", "+", "1", ")", "]", "for", "j", "in", "range", "(", "nca", "+", "1", ")", "]", "\n", "DP", "=", "[", "[", "0", "for", "i", "in", "range", "(", "ncb", "+", "1", ")", "]", "for", "j", "in", "range", "(", "nca", "+", "1", ")", "]", "\n", "kmat", "=", "[", "0", "]", "*", "(", "nca", "+", "1", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "nca", "+", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "1", ",", "ncb", "+", "1", ")", ":", "\n", "                ", "if", "a", ".", "getChild", "(", "i", "-", "1", ")", ".", "getLabel", "(", ")", "==", "b", ".", "getChild", "(", "j", "-", "1", ")", ".", "getLabel", "(", ")", ":", "\n", "                    ", "DPS", "[", "i", "]", "[", "j", "]", "=", "self", ".", "CPT", "(", "a", ".", "getChild", "(", "i", "-", "1", ")", ",", "b", ".", "getChild", "(", "j", "-", "1", ")", ")", "\n", "kmat", "[", "0", "]", "+=", "DPS", "[", "i", "]", "[", "j", "]", "\n", "", "else", ":", "\n", "                    ", "DPS", "[", "i", "]", "[", "j", "]", "=", "0", "\n", "", "", "", "for", "s", "in", "range", "(", "1", ",", "min", "(", "nca", ",", "ncb", ")", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "nca", "+", "1", ")", ":", "\n", "                ", "DP", "[", "i", "]", "[", "s", "-", "1", "]", "=", "0", "\n", "", "for", "j", "in", "range", "(", "ncb", "+", "1", ")", ":", "\n", "                ", "DP", "[", "s", "-", "1", "]", "[", "j", "]", "=", "0", "\n", "", "for", "i", "in", "range", "(", "s", ",", "nca", "+", "1", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "s", ",", "ncb", "+", "1", ")", ":", "\n", "                    ", "DP", "[", "i", "]", "[", "j", "]", "=", "(", "\n", "DPS", "[", "i", "]", "[", "j", "]", "\n", "+", "self", ".", "l", "*", "DP", "[", "i", "-", "1", "]", "[", "j", "]", "\n", "+", "self", ".", "l", "*", "DP", "[", "i", "]", "[", "j", "-", "1", "]", "\n", "-", "self", ".", "l", "**", "2", "*", "DP", "[", "i", "-", "1", "]", "[", "j", "-", "1", "]", "\n", ")", "\n", "if", "a", ".", "getChild", "(", "i", "-", "1", ")", ".", "getLabel", "(", ")", "==", "b", ".", "getChild", "(", "j", "-", "1", ")", ".", "getLabel", "(", ")", ":", "\n", "                        ", "DPS", "[", "i", "]", "[", "j", "]", "=", "(", "\n", "self", ".", "CPT", "(", "a", ".", "getChild", "(", "i", "-", "1", ")", ",", "b", ".", "getChild", "(", "j", "-", "1", ")", ")", "\n", "*", "DP", "[", "i", "-", "1", "]", "[", "j", "-", "1", "]", "\n", ")", "\n", "kmat", "[", "s", "]", "+=", "DPS", "[", "i", "]", "[", "j", "]", "\n", "", "", "", "", "return", "sum", "(", "kmat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPT.CPT": [[190, 206], ["tree_kernels.KernelPT.cache.exists", "c.getSubtreeID", "d.getSubtreeID", "tree_kernels.KernelPT.cache.read", "tree_kernels.KernelPT.cache.insert", "str", "str", "str", "d.getSubtreeID", "str", "c.getSubtreeID", "c.getOutdegree", "d.getOutdegree", "c.getSubtreeID", "d.getSubtreeID", "tree_kernels.KernelPT.DeltaSk", "c.getOutdegree", "d.getOutdegree"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.exists", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.read", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.insert", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getOutdegree", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getOutdegree", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPT.DeltaSk", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getOutdegree", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getOutdegree"], ["", "def", "CPT", "(", "self", ",", "c", ",", "d", ")", ":", "\n", "        ", "if", "c", ".", "getSubtreeID", "(", ")", "<", "d", ".", "getSubtreeID", "(", ")", ":", "\n", "            ", "tmpkey", "=", "str", "(", "c", ".", "getSubtreeID", "(", ")", ")", "+", "\"#\"", "+", "str", "(", "d", ".", "getSubtreeID", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "tmpkey", "=", "str", "(", "d", ".", "getSubtreeID", "(", ")", ")", "+", "\"#\"", "+", "str", "(", "c", ".", "getSubtreeID", "(", ")", ")", "\n", "", "if", "self", ".", "cache", ".", "exists", "(", "tmpkey", ")", ":", "\n", "            ", "return", "self", ".", "cache", ".", "read", "(", "tmpkey", ")", "\n", "", "else", ":", "\n", "            ", "if", "c", ".", "getOutdegree", "(", ")", "==", "0", "or", "d", ".", "getOutdegree", "(", ")", "==", "0", ":", "\n", "                ", "prod", "=", "self", ".", "m", "*", "self", ".", "l", "**", "2", "\n", "", "else", ":", "\n", "                ", "prod", "=", "self", ".", "m", "*", "(", "\n", "self", ".", "l", "**", "2", "+", "self", ".", "DeltaSk", "(", "c", ",", "d", ",", "c", ".", "getOutdegree", "(", ")", ",", "d", ".", "getOutdegree", "(", ")", ")", "\n", ")", "\n", "", "self", ".", "cache", ".", "insert", "(", "tmpkey", ",", "prod", ")", "\n", "return", "prod", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPT.evaluate": [[207, 225], ["tree_kernels.KernelPT.cache.removeAll", "len", "len", "la.getLabel", "lb.getLabel", "la.getLabel", "lb.getLabel", "la.getLabel", "la.getLabel", "tree_kernels.KernelPT.CPT", "lb.getLabel", "lb.getLabel", "la.getTree", "lb.getTree"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.removeAll", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getLabel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getLabel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getLabel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getLabel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getLabel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getLabel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPT.CPT", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getLabel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getLabel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.LabelSubtreeList.getTree", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.LabelSubtreeList.getTree"], ["", "", "def", "evaluate", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "self", ".", "cache", ".", "removeAll", "(", ")", "\n", "la", ",", "lb", "=", "(", "a", ".", "kernelptrepr", ",", "b", ".", "kernelptrepr", ")", "\n", "i", ",", "j", ",", "k", ",", "toti", ",", "totj", "=", "(", "0", ",", "0", ",", "0", ",", "len", "(", "la", ")", ",", "len", "(", "lb", ")", ")", "\n", "while", "i", "<", "toti", "and", "j", "<", "totj", ":", "\n", "            ", "if", "la", ".", "getLabel", "(", "i", ")", "==", "lb", ".", "getLabel", "(", "j", ")", ":", "\n", "                ", "ci", ",", "cj", "=", "(", "i", ",", "j", ")", "\n", "while", "i", "<", "toti", "and", "la", ".", "getLabel", "(", "i", ")", "==", "la", ".", "getLabel", "(", "ci", ")", ":", "\n", "                    ", "j", "=", "cj", "\n", "while", "j", "<", "totj", "and", "lb", ".", "getLabel", "(", "j", ")", "==", "lb", ".", "getLabel", "(", "cj", ")", ":", "\n", "                        ", "k", "+=", "self", ".", "CPT", "(", "la", ".", "getTree", "(", "i", ")", ",", "lb", ".", "getTree", "(", "j", ")", ")", "\n", "j", "+=", "1", "\n", "", "i", "+=", "1", "\n", "", "", "elif", "la", ".", "getLabel", "(", "i", ")", "<=", "lb", ".", "getLabel", "(", "j", ")", ":", "\n", "                ", "i", "+=", "1", "\n", "", "else", ":", "\n", "                ", "j", "+=", "1", "\n", "", "", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPdak.__init__": [[228, 233], ["float", "float", "float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "l", ",", "gamma", ",", "beta", ",", "hashsep", "=", "\"#\"", ")", ":", "\n", "        ", "self", ".", "l", "=", "float", "(", "l", ")", "\n", "self", ".", "gamma", "=", "float", "(", "gamma", ")", "\n", "self", ".", "beta", "=", "float", "(", "beta", ")", "\n", "self", ".", "hashsep", "=", "hashsep", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPdak.preProcess": [[234, 242], ["hasattr", "t.root.setHashSubtreeIdentifier", "t.computeNodesDepth", "tensor2struct.utils.tree.SubtreePositionIDLabelSubtreeSizeList", "hasattr", "t.root.setSubtreeSize"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.setHashSubtreeIdentifier", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.computeNodesDepth", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.setSubtreeSize"], ["", "def", "preProcess", "(", "self", ",", "t", ")", ":", "\n", "        ", "if", "hasattr", "(", "t", ",", "\"kernelpdakrepr\"", ")", ":", "# already preprocessed", "\n", "            ", "return", "\n", "", "if", "not", "hasattr", "(", "t", ".", "root", ",", "\"stsize\"", ")", ":", "\n", "            ", "t", ".", "root", ".", "setSubtreeSize", "(", ")", "\n", "", "t", ".", "root", ".", "setHashSubtreeIdentifier", "(", "self", ".", "hashsep", ")", "\n", "t", ".", "computeNodesDepth", "(", ")", "\n", "t", ".", "kernelpdakrepr", "=", "tree", ".", "SubtreePositionIDLabelSubtreeSizeList", "(", "t", ".", "root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPdak.mergetrees_with_depth": [[243, 260], ["None"], "methods", ["None"], ["", "def", "mergetrees_with_depth", "(", "self", ",", "tree1", ",", "tree2", ")", ":", "\n", "        ", "merge", "=", "{", "}", "\n", "for", "key", "in", "tree1", ":", "\n", "            ", "if", "key", "in", "tree2", ":", "\n", "                ", "merge", "[", "key", "]", "=", "(", "\n", "{", "(", "tree1", "[", "key", "]", "[", "0", "]", ",", "tree1", "[", "key", "]", "[", "2", "]", ")", ":", "{", "tree1", "[", "key", "]", "[", "1", "]", ":", "1", "}", "}", ",", "\n", "{", "(", "tree2", "[", "key", "]", "[", "0", "]", ",", "tree2", "[", "key", "]", "[", "2", "]", ")", ":", "{", "tree2", "[", "key", "]", "[", "1", "]", ":", "1", "}", "}", ",", "\n", ")", "\n", "del", "tree2", "[", "key", "]", "\n", "", "else", ":", "\n", "                ", "merge", "[", "key", "]", "=", "(", "\n", "{", "(", "tree1", "[", "key", "]", "[", "0", "]", ",", "tree1", "[", "key", "]", "[", "2", "]", ")", ":", "{", "tree1", "[", "key", "]", "[", "1", "]", ":", "1", "}", "}", ",", "\n", "None", ",", "\n", ")", "\n", "", "", "for", "key", "in", "tree2", ":", "\n", "            ", "merge", "[", "key", "]", "=", "(", "None", ",", "{", "(", "tree2", "[", "key", "]", "[", "0", "]", ",", "tree2", "[", "key", "]", "[", "2", "]", ")", ":", "{", "tree2", "[", "key", "]", "[", "1", "]", ":", "1", "}", "}", ")", "\n", "", "return", "merge", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPdak.visit_with_depth": [[261, 327], ["str", "hash", "str", "tree_kernels.KernelPdak.visit_with_depth", "hash", "str", "str", "math.exp", "math.exp"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPdakFast.visit_with_depth"], ["", "def", "visit_with_depth", "(", "self", ",", "jtree", ",", "node", ",", "depth", ",", "param", ",", "lambda_par", ",", "gamma_par", ")", ":", "\n", "        ", "kvalue", "=", "0", "\n", "if", "node", "is", "not", "None", ":", "\n", "            ", "child", "=", "0", "\n", "key", "=", "str", "(", "hash", "(", "node", "+", "\"#\"", "+", "str", "(", "child", ")", ")", ")", "\n", "\n", "while", "key", "in", "jtree", ":", "\n", "                ", "kvalue", "=", "kvalue", "+", "self", ".", "visit_with_depth", "(", "\n", "jtree", ",", "key", ",", "depth", "+", "1", ",", "param", ",", "lambda_par", ",", "gamma_par", "\n", ")", "\n", "if", "jtree", "[", "key", "]", "[", "0", "]", "is", "not", "None", ":", "\n", "                    ", "if", "jtree", "[", "node", "]", "[", "0", "]", "is", "None", ":", "\n", "# jtree[node][0] = jtree[key][0]", "\n", "                        ", "jtree", "[", "node", "]", "=", "(", "jtree", "[", "key", "]", "[", "0", "]", ",", "jtree", "[", "node", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                        ", "for", "tmpkey", "in", "jtree", "[", "key", "]", "[", "0", "]", ":", "\n", "                            ", "if", "tmpkey", "in", "jtree", "[", "node", "]", "[", "0", "]", ":", "\n", "                                ", "for", "tmpkey2", "in", "jtree", "[", "key", "]", "[", "0", "]", "[", "tmpkey", "]", ":", "\n", "                                    ", "if", "tmpkey2", "in", "jtree", "[", "node", "]", "[", "0", "]", "[", "tmpkey", "]", ":", "\n", "                                        ", "jtree", "[", "node", "]", "[", "0", "]", "[", "tmpkey", "]", "[", "tmpkey2", "]", "=", "(", "\n", "jtree", "[", "node", "]", "[", "0", "]", "[", "tmpkey", "]", "[", "tmpkey2", "]", "\n", "+", "jtree", "[", "key", "]", "[", "0", "]", "[", "tmpkey", "]", "[", "tmpkey2", "]", "\n", ")", "\n", "", "else", ":", "\n", "                                        ", "jtree", "[", "node", "]", "[", "0", "]", "[", "tmpkey", "]", "[", "tmpkey2", "]", "=", "jtree", "[", "key", "]", "[", "0", "]", "[", "\n", "tmpkey", "\n", "]", "[", "tmpkey2", "]", "\n", "", "", "", "else", ":", "\n", "                                ", "jtree", "[", "node", "]", "[", "0", "]", "[", "tmpkey", "]", "=", "jtree", "[", "key", "]", "[", "0", "]", "[", "tmpkey", "]", "\n", "", "", "", "", "if", "jtree", "[", "key", "]", "[", "1", "]", "is", "not", "None", ":", "\n", "                    ", "if", "jtree", "[", "node", "]", "[", "1", "]", "is", "None", ":", "\n", "# jtree[node][1]=jtree[key][1]", "\n", "                        ", "jtree", "[", "node", "]", "=", "(", "jtree", "[", "node", "]", "[", "0", "]", ",", "jtree", "[", "key", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                        ", "for", "tmpkey", "in", "jtree", "[", "key", "]", "[", "1", "]", ":", "\n", "                            ", "if", "tmpkey", "in", "jtree", "[", "node", "]", "[", "1", "]", ":", "\n", "                                ", "for", "tmpkey2", "in", "jtree", "[", "key", "]", "[", "1", "]", "[", "tmpkey", "]", ":", "\n", "                                    ", "if", "tmpkey2", "in", "jtree", "[", "node", "]", "[", "1", "]", "[", "tmpkey", "]", ":", "\n", "                                        ", "jtree", "[", "node", "]", "[", "1", "]", "[", "tmpkey", "]", "[", "tmpkey2", "]", "=", "(", "\n", "jtree", "[", "node", "]", "[", "1", "]", "[", "tmpkey", "]", "[", "tmpkey2", "]", "\n", "+", "jtree", "[", "key", "]", "[", "1", "]", "[", "tmpkey", "]", "[", "tmpkey2", "]", "\n", ")", "\n", "", "else", ":", "\n", "                                        ", "jtree", "[", "node", "]", "[", "1", "]", "[", "tmpkey", "]", "[", "tmpkey2", "]", "=", "jtree", "[", "key", "]", "[", "1", "]", "[", "\n", "tmpkey", "\n", "]", "[", "tmpkey2", "]", "\n", "", "", "", "else", ":", "\n", "                                ", "jtree", "[", "node", "]", "[", "1", "]", "[", "tmpkey", "]", "=", "jtree", "[", "key", "]", "[", "1", "]", "[", "tmpkey", "]", "\n", "", "", "", "", "child", "=", "child", "+", "1", "\n", "key", "=", "str", "(", "hash", "(", "node", "+", "\"#\"", "+", "str", "(", "child", ")", ")", ")", "\n", "# print jtree[node]", "\n", "", "if", "(", "jtree", "[", "node", "]", "[", "0", "]", "is", "not", "None", ")", "and", "(", "jtree", "[", "node", "]", "[", "1", "]", "is", "not", "None", ")", ":", "\n", "                ", "for", "lkey", "in", "jtree", "[", "node", "]", "[", "0", "]", ":", "\n", "                    ", "if", "lkey", "in", "jtree", "[", "node", "]", "[", "1", "]", ":", "\n", "                        ", "tmpk", "=", "0", "\n", "for", "fkey1", "in", "jtree", "[", "node", "]", "[", "0", "]", "[", "lkey", "]", ":", "\n", "                            ", "for", "fkey2", "in", "jtree", "[", "node", "]", "[", "1", "]", "[", "lkey", "]", ":", "\n", "                                ", "tmpk", "=", "tmpk", "+", "lambda_par", "**", "lkey", "[", "1", "]", "*", "jtree", "[", "node", "]", "[", "0", "]", "[", "\n", "lkey", "\n", "]", "[", "fkey1", "]", "*", "jtree", "[", "node", "]", "[", "1", "]", "[", "lkey", "]", "[", "fkey2", "]", "*", "math", ".", "exp", "(", "\n", "-", "param", "*", "(", "fkey1", "+", "fkey2", ")", "\n", ")", "\n", "", "", "kvalue", "=", "kvalue", "+", "(", "gamma_par", "**", "depth", ")", "*", "tmpk", "*", "math", ".", "exp", "(", "\n", "2", "*", "param", "*", "depth", "\n", ")", "\n", "", "", "", "return", "kvalue", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPdak.evaluate": [[328, 337], ["copy.deepcopy", "copy.deepcopy", "tree_kernels.KernelPdak.mergetrees_with_depth", "tree_kernels.KernelPdak.visit_with_depth", "str", "hash"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPdak.mergetrees_with_depth", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPdakFast.visit_with_depth"], ["", "", "def", "evaluate", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "tree1", "=", "deepcopy", "(", "a", ".", "kernelpdakrepr", ".", "sids", ")", "\n", "tree2", "=", "deepcopy", "(", "b", ".", "kernelpdakrepr", ".", "sids", ")", "\n", "m", "=", "self", ".", "mergetrees_with_depth", "(", "tree1", ",", "tree2", ")", "\n", "kvalue", "=", "self", ".", "visit_with_depth", "(", "\n", "m", ",", "str", "(", "hash", "(", "\"0\"", ")", ")", ",", "1", ",", "self", ".", "l", ",", "self", ".", "gamma", ",", "self", ".", "beta", "\n", ")", "\n", "del", "m", ",", "tree1", ",", "tree2", "\n", "return", "kvalue", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPdakMine.__init__": [[340, 347], ["float", "float", "float", "tree_kernels.Cache"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "l", ",", "gamma", ",", "beta", ",", "hashsep", "=", "\"#\"", ")", ":", "\n", "        ", "self", ".", "l", "=", "float", "(", "l", ")", "\n", "self", ".", "gamma", "=", "float", "(", "gamma", ")", "\n", "self", ".", "beta", "=", "float", "(", "beta", ")", "\n", "self", ".", "hashsep", "=", "hashsep", "\n", "self", ".", "cache", "=", "Cache", "(", ")", "\n", "self", ".", "cachesize", "=", "10000", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPdakMine.preProcess": [[348, 358], ["hasattr", "t.root.setHashSubtreeIdentifier", "t.computeNodesDepth", "t.computeRoutes", "tensor2struct.utils.tree.SubtreeIDSubtreeSizeRouteList", "t.kernelpdakrepr.sort", "hasattr", "t.root.setSubtreeSize"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.setHashSubtreeIdentifier", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.computeNodesDepth", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.computeRoutes", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.setSubtreeSize"], ["", "def", "preProcess", "(", "self", ",", "t", ")", ":", "\n", "        ", "if", "hasattr", "(", "t", ",", "\"kernelpdakrepr\"", ")", ":", "# already preprocessed", "\n", "            ", "return", "\n", "", "if", "not", "hasattr", "(", "t", ".", "root", ",", "\"stsize\"", ")", ":", "\n", "            ", "t", ".", "root", ".", "setSubtreeSize", "(", ")", "\n", "", "t", ".", "root", ".", "setHashSubtreeIdentifier", "(", "self", ".", "hashsep", ")", "\n", "t", ".", "computeNodesDepth", "(", ")", "\n", "t", ".", "computeRoutes", "(", ")", "\n", "t", ".", "kernelpdakrepr", "=", "tree", ".", "SubtreeIDSubtreeSizeRouteList", "(", "t", ".", "root", ")", "\n", "t", ".", "kernelpdakrepr", ".", "sort", "(", ")", "\n", "# print t.kernelpdakrepr.sids", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPdakMine.ntk": [[360, 386], ["tree_kernels.KernelPdakMine.cache.exists", "tree_kernels.KernelPdakMine.cache.insert", "float", "len", "len", "min", "len", "tree_kernels.KernelPdakMine.cache.removeAll", "str", "str", "tree_kernels.KernelPdakMine.cache.read", "str", "str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.exists", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.insert", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.removeAll", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.read"], ["", "def", "ntk", "(", "self", ",", "ra", ",", "da", ",", "rb", ",", "db", ",", "hra", ",", "hrb", ")", ":", "\n", "        ", "if", "hra", "<", "hrb", ":", "\n", "            ", "tmpkey", "=", "str", "(", "hra", ")", "+", "\"#\"", "+", "str", "(", "hrb", ")", "\n", "", "else", ":", "\n", "            ", "tmpkey", "=", "str", "(", "hrb", ")", "+", "\"#\"", "+", "str", "(", "hra", ")", "\n", "", "if", "self", ".", "cache", ".", "exists", "(", "tmpkey", ")", ":", "\n", "            ", "return", "float", "(", "self", ".", "cache", ".", "read", "(", "tmpkey", ")", ")", "\n", "", "lena", ",", "lenb", "=", "len", "(", "ra", ")", ",", "len", "(", "rb", ")", "\n", "c", ",", "p", ",", "minlen", "=", "0", ",", "0", ",", "min", "(", "lena", ",", "lenb", ")", "\n", "while", "c", "<", "minlen", "and", "ra", "[", "c", "]", "==", "rb", "[", "c", "]", ":", "\n", "            ", "if", "ra", "[", "c", "]", "==", "\"#\"", ":", "\n", "                ", "p", "+=", "1", "\n", "", "c", "+=", "1", "\n", "# print \"p = \", p, \"da, db\", da, db, ra, rb", "\n", "", "if", "self", ".", "gamma", "==", "1", ":", "\n", "            ", "r", "=", "(", "p", "+", "1", ")", "*", "(", "math", ".", "e", "**", "(", "-", "self", ".", "beta", "*", "(", "da", "+", "db", "-", "2", "*", "p", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "r", "=", "(", "\n", "(", "1", "-", "self", ".", "gamma", "**", "(", "p", "+", "1", ")", ")", "\n", "/", "(", "1", "-", "self", ".", "gamma", ")", "\n", "*", "(", "math", ".", "e", "**", "(", "-", "self", ".", "beta", "*", "(", "da", "+", "db", "-", "2", "*", "p", ")", ")", ")", "\n", ")", "\n", "", "if", "len", "(", "self", ".", "cache", ")", ">", "self", ".", "cachesize", ":", "\n", "            ", "self", ".", "cache", ".", "removeAll", "(", ")", "\n", "", "self", ".", "cache", ".", "insert", "(", "tmpkey", ",", "r", ")", "\n", "return", "r", "\n", "# if self.gamma == 1:", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPdakMine.evaluate": [[391, 422], ["len", "len", "ha.getLabel", "hb.getLabel", "ha.getLabel", "hb.getLabel", "ha.getLabel", "ha.getLabel", "hb.getLabel", "hb.getLabel", "ha.getSubtreeID", "hb.getSubtreeID", "tree_kernels.KernelPdakMine.ntk", "ha.getSubtreeSize", "ha.getRoute", "ha.getDepth", "hb.getRoute", "hb.getDepth", "ha.getRouteHash", "hb.getRouteHash"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getLabel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getLabel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getLabel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getLabel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getLabel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getLabel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getLabel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getLabel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPdakMine.ntk", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeSize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getRoute", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getDepth", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getRoute", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getDepth", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getRouteHash", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getRouteHash"], ["", "def", "evaluate", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "ha", ",", "hb", "=", "(", "a", ".", "kernelpdakrepr", ",", "b", ".", "kernelpdakrepr", ")", "\n", "# print ha, hb", "\n", "# Assumes ha and hb are ordered list of pairs (subtreeid, subtreesize, route)", "\n", "# a.kernelreprst,b.kernelreprst are checked or created in preProcess()", "\n", "i", ",", "j", ",", "k", ",", "toti", ",", "totj", "=", "(", "0", ",", "0", ",", "0", ",", "len", "(", "ha", ")", ",", "len", "(", "hb", ")", ")", "\n", "while", "i", "<", "toti", "and", "j", "<", "totj", ":", "\n", "            ", "if", "ha", ".", "getLabel", "(", "i", ")", "==", "hb", ".", "getLabel", "(", "j", ")", ":", "\n", "                ", "ci", ",", "cj", "=", "(", "i", ",", "j", ")", "\n", "while", "i", "<", "toti", "and", "ha", ".", "getLabel", "(", "i", ")", "==", "ha", ".", "getLabel", "(", "ci", ")", ":", "\n", "                    ", "j", "=", "cj", "\n", "while", "j", "<", "totj", "and", "hb", ".", "getLabel", "(", "j", ")", "==", "hb", ".", "getLabel", "(", "cj", ")", ":", "\n", "                        ", "cst", "=", "self", ".", "l", "\n", "if", "ha", ".", "getSubtreeID", "(", "i", ")", "==", "hb", ".", "getSubtreeID", "(", "j", ")", ":", "\n", "                            ", "cst", "+=", "self", ".", "l", "**", "ha", ".", "getSubtreeSize", "(", "i", ")", "\n", "# print ha.getLabel(i), hb.getLabel(j), cst, self.ntk(ha.getRoute(i), ha.getDepth(i), hb.getRoute(j), hb.getDepth(j))", "\n", "", "k", "+=", "cst", "*", "self", ".", "ntk", "(", "\n", "ha", ".", "getRoute", "(", "i", ")", ",", "\n", "ha", ".", "getDepth", "(", "i", ")", ",", "\n", "hb", ".", "getRoute", "(", "j", ")", ",", "\n", "hb", ".", "getDepth", "(", "j", ")", ",", "\n", "ha", ".", "getRouteHash", "(", "i", ")", ",", "\n", "hb", ".", "getRouteHash", "(", "j", ")", ",", "\n", ")", "\n", "j", "+=", "1", "\n", "", "i", "+=", "1", "\n", "", "", "elif", "ha", ".", "getLabel", "(", "i", ")", "<", "hb", ".", "getLabel", "(", "j", ")", ":", "\n", "                ", "i", "+=", "1", "\n", "", "else", ":", "\n", "                ", "j", "+=", "1", "\n", "", "", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPdakFast.preProcess": [[425, 434], ["hasattr", "t.root.setHashSubtreeIdentifier", "t.computeNodesDepth", "tensor2struct.utils.tree.SubtreePositionIDSubtreeIDSubtreeSizeListLabel", "hasattr", "t.root.setSubtreeSize"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.setHashSubtreeIdentifier", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.computeNodesDepth", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.setSubtreeSize"], ["    ", "def", "preProcess", "(", "self", ",", "t", ")", ":", "\n", "        ", "if", "hasattr", "(", "t", ",", "\"kernelpdakrepr\"", ")", ":", "# already preprocessed", "\n", "            ", "return", "\n", "", "if", "not", "hasattr", "(", "t", ".", "root", ",", "\"stsize\"", ")", ":", "\n", "            ", "t", ".", "root", ".", "setSubtreeSize", "(", ")", "\n", "", "t", ".", "root", ".", "setHashSubtreeIdentifier", "(", "self", ".", "hashsep", ")", "\n", "t", ".", "computeNodesDepth", "(", ")", "\n", "a", "=", "tree", ".", "SubtreePositionIDSubtreeIDSubtreeSizeListLabel", "(", "t", ".", "root", ")", "\n", "t", ".", "kernelpdakrepr", "=", "(", "a", ".", "sids", ",", "a", ".", "pinv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPdakFast.mergetrees_with_depth_del_labels": [[435, 471], ["None"], "methods", ["None"], ["", "def", "mergetrees_with_depth_del_labels", "(", "self", ",", "tree_labels1", ",", "tree_labels2", ")", ":", "\n", "        ", "tree1", ",", "labels1", "=", "tree_labels_1", "\n", "tree2", ",", "labels2", "=", "tree_labels_2", "\n", "merge", "=", "{", "}", "\n", "match", "=", "0", "\n", "for", "key", "in", "tree1", ":", "\n", "            ", "if", "key", "in", "tree2", ":", "\n", "                ", "if", "tree1", "[", "key", "]", "[", "0", "]", "in", "labels2", ":", "\n", "                    ", "match", "=", "match", "+", "1", "\n", "if", "tree2", "[", "key", "]", "[", "0", "]", "in", "labels1", ":", "\n", "                        ", "merge", "[", "key", "]", "=", "(", "\n", "{", "(", "tree1", "[", "key", "]", "[", "0", "]", ",", "tree1", "[", "key", "]", "[", "1", "]", ")", ":", "0", "}", ",", "\n", "{", "(", "tree2", "[", "key", "]", "[", "0", "]", ",", "tree2", "[", "key", "]", "[", "1", "]", ")", ":", "0", "}", ",", "\n", ")", "\n", "", "else", ":", "\n", "                        ", "merge", "[", "key", "]", "=", "(", "{", "(", "tree1", "[", "key", "]", "[", "0", "]", ",", "tree1", "[", "key", "]", "[", "1", "]", ")", ":", "0", "}", ",", "{", "}", ")", "\n", "", "", "else", ":", "\n", "                    ", "if", "tree2", "[", "key", "]", "[", "0", "]", "in", "labels1", ":", "\n", "                        ", "merge", "[", "key", "]", "=", "(", "{", "}", ",", "{", "(", "tree2", "[", "key", "]", "[", "0", "]", ",", "tree2", "[", "key", "]", "[", "1", "]", ")", ":", "0", "}", ")", "\n", "match", "=", "match", "+", "1", "\n", "", "else", ":", "\n", "                        ", "merge", "[", "key", "]", "=", "(", "{", "}", ",", "{", "}", ")", "\n", "", "", "del", "tree2", "[", "key", "]", "\n", "", "else", ":", "\n", "                ", "if", "tree1", "[", "key", "]", "[", "0", "]", "in", "labels2", ":", "\n", "                    ", "merge", "[", "key", "]", "=", "(", "{", "(", "tree1", "[", "key", "]", "[", "0", "]", ",", "tree1", "[", "key", "]", "[", "1", "]", ")", ":", "0", "}", ",", "{", "}", ")", "\n", "match", "=", "match", "+", "1", "\n", "", "else", ":", "\n", "                    ", "merge", "[", "key", "]", "=", "(", "{", "}", ",", "{", "}", ")", "\n", "", "", "", "for", "key", "in", "tree2", ":", "\n", "            ", "if", "tree2", "[", "key", "]", "[", "0", "]", "in", "labels1", ":", "\n", "                ", "merge", "[", "key", "]", "=", "(", "{", "}", ",", "{", "(", "tree2", "[", "key", "]", "[", "0", "]", ",", "tree2", "[", "key", "]", "[", "1", "]", ")", ":", "0", "}", ")", "\n", "match", "=", "match", "+", "1", "\n", "", "else", ":", "\n", "                ", "merge", "[", "key", "]", "=", "(", "{", "}", ",", "{", "}", ")", "\n", "", "", "return", "(", "merge", ",", "match", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPdakFast.visit_with_depth": [[472, 645], ["str", "hash", "str", "math.exp", "tree_kernels.KernelPdakFast.visit_with_depth", "hash", "str", "math.exp", "math.exp", "str", "len", "len", "len", "len", "hash", "str", "math.exp", "math.exp", "str", "math.exp", "math.exp", "math.exp", "math.exp", "math.exp", "math.exp"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPdakFast.visit_with_depth"], ["", "def", "visit_with_depth", "(", "self", ",", "jtree", ",", "node", ",", "depth", ",", "param", ",", "lambda_par", ",", "gamma_par", ")", ":", "\n", "        ", "kvalue", "=", "0", "\n", "tmpk", "=", "0", "\n", "if", "node", "is", "not", "None", ":", "\n", "            ", "child", "=", "0", "\n", "key", "=", "str", "(", "hash", "(", "node", "+", "\"#\"", "+", "str", "(", "child", ")", ")", ")", "\n", "startkey", "=", "key", "\n", "max_size", "=", "[", "0", ",", "None", "]", "\n", "while", "key", "in", "jtree", ":", "\n", "                ", "kvalue", "=", "kvalue", "+", "self", ".", "visit_with_depth", "(", "\n", "jtree", ",", "key", ",", "depth", "+", "1", ",", "param", ",", "lambda_par", ",", "gamma_par", "\n", ")", "\n", "if", "(", "len", "(", "jtree", "[", "key", "]", "[", "0", "]", ")", "+", "len", "(", "jtree", "[", "key", "]", "[", "1", "]", ")", ")", ">", "max_size", "[", "0", "]", ":", "\n", "                    ", "max_size", "[", "0", "]", "=", "len", "(", "jtree", "[", "key", "]", "[", "0", "]", ")", "+", "len", "(", "jtree", "[", "key", "]", "[", "1", "]", ")", "\n", "max_size", "[", "1", "]", "=", "key", "\n", "", "child", "=", "child", "+", "1", "\n", "key", "=", "str", "(", "hash", "(", "node", "+", "\"#\"", "+", "str", "(", "child", ")", ")", ")", "\n", "# print 'max_size',max_size[0]", "\n", "", "if", "max_size", "[", "0", "]", ">", "0", ":", "\n", "                ", "child", "=", "0", "\n", "while", "startkey", "in", "jtree", ":", "\n", "                    ", "if", "startkey", "!=", "max_size", "[", "1", "]", ":", "\n", "                        ", "if", "jtree", "[", "startkey", "]", "[", "0", "]", "is", "not", "{", "}", ":", "\n", "                            ", "for", "tmpkey", "in", "jtree", "[", "startkey", "]", "[", "0", "]", ":", "\n", "# calcolo kernel", "\n", "                                ", "if", "tmpkey", "in", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "1", "]", ":", "\n", "                                    ", "if", "gamma_par", "!=", "1.0", ":", "\n", "                                        ", "tmpk", "=", "(", "\n", "tmpk", "\n", "+", "(", "gamma_par", "**", "(", "depth", "+", "1", ")", "-", "gamma_par", ")", "\n", "/", "(", "gamma_par", "-", "1", ")", "\n", "*", "lambda_par", "**", "tmpkey", "[", "1", "]", "\n", "*", "jtree", "[", "startkey", "]", "[", "0", "]", "[", "tmpkey", "]", "\n", "*", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "1", "]", "[", "tmpkey", "]", "\n", ")", "\n", "", "else", ":", "\n", "                                        ", "tmpk", "=", "(", "\n", "tmpk", "\n", "+", "depth", "\n", "*", "lambda_par", "**", "tmpkey", "[", "1", "]", "\n", "*", "jtree", "[", "startkey", "]", "[", "0", "]", "[", "tmpkey", "]", "\n", "*", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "1", "]", "[", "tmpkey", "]", "\n", ")", "\n", "# fine calcolo kernel, inizio inserimento", "\n", "", "", "", "", "if", "jtree", "[", "startkey", "]", "[", "1", "]", "is", "not", "{", "}", ":", "\n", "                            ", "for", "tmpkey", "in", "jtree", "[", "startkey", "]", "[", "1", "]", ":", "\n", "# calcolo kernel", "\n", "                                ", "if", "tmpkey", "in", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "0", "]", ":", "\n", "                                    ", "if", "gamma_par", "!=", "1.0", ":", "\n", "                                        ", "tmpk", "=", "(", "\n", "tmpk", "\n", "+", "(", "gamma_par", "**", "(", "depth", "+", "1", ")", "-", "gamma_par", ")", "\n", "/", "(", "gamma_par", "-", "1", ")", "\n", "*", "lambda_par", "**", "tmpkey", "[", "1", "]", "\n", "*", "jtree", "[", "startkey", "]", "[", "1", "]", "[", "tmpkey", "]", "\n", "*", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "0", "]", "[", "tmpkey", "]", "\n", ")", "\n", "", "else", ":", "\n", "                                        ", "tmpk", "=", "(", "\n", "tmpk", "\n", "+", "depth", "\n", "*", "lambda_par", "**", "tmpkey", "[", "1", "]", "\n", "*", "jtree", "[", "startkey", "]", "[", "1", "]", "[", "tmpkey", "]", "\n", "*", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "0", "]", "[", "tmpkey", "]", "\n", ")", "\n", "# fine calcolo kernel, inizio inserimento", "\n", "", "", "if", "tmpkey", "in", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "1", "]", ":", "\n", "                                    ", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "1", "]", "[", "tmpkey", "]", "=", "(", "\n", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "1", "]", "[", "tmpkey", "]", "\n", "+", "jtree", "[", "startkey", "]", "[", "1", "]", "[", "tmpkey", "]", "\n", ")", "\n", "", "else", ":", "\n", "                                    ", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "1", "]", "[", "tmpkey", "]", "=", "jtree", "[", "startkey", "]", "[", "1", "]", "[", "\n", "tmpkey", "\n", "]", "\n", "# inserisco anche hash 0", "\n", "", "", "", "for", "tmpkey", "in", "jtree", "[", "startkey", "]", "[", "0", "]", ":", "\n", "                            ", "if", "tmpkey", "in", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "0", "]", ":", "\n", "                                ", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "0", "]", "[", "tmpkey", "]", "=", "(", "\n", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "0", "]", "[", "tmpkey", "]", "\n", "+", "jtree", "[", "startkey", "]", "[", "0", "]", "[", "tmpkey", "]", "\n", ")", "\n", "", "else", ":", "\n", "                                ", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "0", "]", "[", "tmpkey", "]", "=", "jtree", "[", "startkey", "]", "[", "0", "]", "[", "\n", "tmpkey", "\n", "]", "\n", "# next child", "\n", "", "", "", "child", "=", "child", "+", "1", "\n", "startkey", "=", "str", "(", "hash", "(", "node", "+", "\"#\"", "+", "str", "(", "child", ")", ")", ")", "\n", "# fine while figli", "\n", "", "if", "jtree", "[", "node", "]", "[", "0", "]", "is", "not", "{", "}", ":", "\n", "                    ", "for", "tmpkey", "in", "jtree", "[", "node", "]", "[", "0", "]", ":", "\n", "# calcolo kernel", "\n", "                        ", "if", "tmpkey", "in", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "1", "]", ":", "\n", "                            ", "if", "gamma_par", "!=", "1.0", ":", "\n", "                                ", "tmpk", "=", "(", "\n", "tmpk", "\n", "+", "(", "gamma_par", "**", "(", "depth", "+", "1", ")", "-", "gamma_par", ")", "\n", "/", "(", "gamma_par", "-", "1", ")", "\n", "*", "lambda_par", "**", "tmpkey", "[", "1", "]", "\n", "*", "math", ".", "exp", "(", "-", "param", "*", "depth", ")", "\n", "*", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "1", "]", "[", "tmpkey", "]", "\n", ")", "\n", "", "else", ":", "\n", "                                ", "tmpk", "=", "(", "\n", "tmpk", "\n", "+", "depth", "\n", "*", "lambda_par", "**", "tmpkey", "[", "1", "]", "\n", "*", "math", ".", "exp", "(", "-", "param", "*", "depth", ")", "\n", "*", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "1", "]", "[", "tmpkey", "]", "\n", ")", "\n", "# fine calcolo kernel, inizio inserimento", "\n", "", "", "if", "tmpkey", "in", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "0", "]", ":", "\n", "                            ", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "0", "]", "[", "tmpkey", "]", "=", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "0", "]", "[", "\n", "tmpkey", "\n", "]", "+", "math", ".", "exp", "(", "-", "param", "*", "depth", ")", "\n", "", "else", ":", "\n", "                            ", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "0", "]", "[", "tmpkey", "]", "=", "math", ".", "exp", "(", "-", "param", "*", "depth", ")", "\n", "", "", "", "if", "jtree", "[", "node", "]", "[", "1", "]", "is", "not", "{", "}", ":", "\n", "                    ", "for", "tmpkey", "in", "jtree", "[", "node", "]", "[", "1", "]", ":", "\n", "# calcolo kernel", "\n", "                        ", "if", "tmpkey", "in", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "0", "]", ":", "\n", "                            ", "if", "gamma_par", "!=", "1.0", ":", "\n", "                                ", "tmpk", "=", "(", "\n", "tmpk", "\n", "+", "(", "gamma_par", "**", "(", "depth", "+", "1", ")", "-", "gamma_par", ")", "\n", "/", "(", "gamma_par", "-", "1", ")", "\n", "*", "lambda_par", "**", "tmpkey", "[", "1", "]", "\n", "*", "math", ".", "exp", "(", "-", "param", "*", "depth", ")", "\n", "*", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "0", "]", "[", "tmpkey", "]", "\n", ")", "\n", "", "else", ":", "\n", "                                ", "tmpk", "=", "(", "\n", "tmpk", "\n", "+", "depth", "\n", "*", "lambda_par", "**", "tmpkey", "[", "1", "]", "\n", "*", "math", ".", "exp", "(", "-", "param", "*", "depth", ")", "\n", "*", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "0", "]", "[", "tmpkey", "]", "\n", ")", "\n", "# fine calcolo kernel, inizio inserimento", "\n", "", "", "if", "tmpkey", "in", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "1", "]", ":", "\n", "                            ", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "1", "]", "[", "tmpkey", "]", "=", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "1", "]", "[", "\n", "tmpkey", "\n", "]", "+", "math", ".", "exp", "(", "-", "param", "*", "depth", ")", "\n", "", "else", ":", "\n", "                            ", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "1", "]", "[", "tmpkey", "]", "=", "math", ".", "exp", "(", "-", "param", "*", "depth", ")", "\n", "", "", "", "jtree", "[", "node", "]", "=", "(", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "0", "]", ",", "jtree", "[", "max_size", "[", "1", "]", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "for", "tmpkey", "in", "jtree", "[", "node", "]", "[", "0", "]", ":", "\n", "                    ", "jtree", "[", "node", "]", "[", "0", "]", "[", "tmpkey", "]", "=", "math", ".", "exp", "(", "-", "param", "*", "depth", ")", "\n", "", "for", "tmpkey", "in", "jtree", "[", "node", "]", "[", "1", "]", ":", "\n", "                    ", "jtree", "[", "node", "]", "[", "1", "]", "[", "tmpkey", "]", "=", "math", ".", "exp", "(", "-", "param", "*", "depth", ")", "\n", "", "if", "jtree", "[", "node", "]", "[", "0", "]", "is", "not", "{", "}", "and", "jtree", "[", "node", "]", "[", "1", "]", "is", "not", "{", "}", ":", "\n", "                    ", "for", "tmpkey", "in", "jtree", "[", "node", "]", "[", "0", "]", ":", "\n", "                        ", "if", "tmpkey", "in", "jtree", "[", "node", "]", "[", "1", "]", ":", "\n", "                            ", "if", "gamma_par", "!=", "1.0", ":", "\n", "                                ", "tmpk", "=", "(", "\n", "tmpk", "\n", "+", "(", "gamma_par", "**", "(", "depth", "+", "1", ")", "-", "gamma_par", ")", "\n", "/", "(", "gamma_par", "-", "1", ")", "\n", "*", "lambda_par", "**", "tmpkey", "[", "1", "]", "\n", "*", "jtree", "[", "node", "]", "[", "0", "]", "[", "tmpkey", "]", "\n", "*", "jtree", "[", "node", "]", "[", "1", "]", "[", "tmpkey", "]", "\n", ")", "\n", "", "else", ":", "\n", "                                ", "tmpk", "=", "(", "\n", "tmpk", "\n", "+", "depth", "\n", "*", "lambda_par", "**", "tmpkey", "[", "1", "]", "\n", "*", "jtree", "[", "node", "]", "[", "0", "]", "[", "tmpkey", "]", "\n", "*", "jtree", "[", "node", "]", "[", "1", "]", "[", "tmpkey", "]", "\n", ")", "\n", "", "", "", "", "", "", "return", "kvalue", "+", "tmpk", "*", "math", ".", "exp", "(", "2", "*", "param", "*", "depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPdakFast.evaluate": [[646, 657], ["copy.deepcopy", "copy.deepcopy", "tree_kernels.KernelPdakFast.mergetrees_with_depth_del_labels", "tree_kernels.KernelPdakFast.visit_with_depth", "str", "hash"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPdakFast.mergetrees_with_depth_del_labels", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.KernelPdakFast.visit_with_depth"], ["", "def", "evaluate", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "tree1", "=", "deepcopy", "(", "a", ".", "kernelpdakrepr", ")", "\n", "tree2", "=", "deepcopy", "(", "b", ".", "kernelpdakrepr", ")", "\n", "(", "m", ",", "match", ")", "=", "self", ".", "mergetrees_with_depth_del_labels", "(", "tree1", ",", "tree2", ")", "\n", "kvalue", "=", "0", "\n", "if", "match", ">", "0", ":", "\n", "            ", "kvalue", "=", "self", ".", "visit_with_depth", "(", "\n", "m", ",", "str", "(", "hash", "(", "\"0\"", ")", ")", ",", "1", ",", "self", ".", "l", ",", "self", ".", "gamma", ",", "self", ".", "beta", "\n", ")", "\n", "", "del", "m", ",", "tree1", ",", "tree2", "\n", "return", "kvalue", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.__init__": [[664, 667], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "cache", "=", "{", "}", "\n", "self", ".", "size", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.exists": [[668, 670], ["None"], "methods", ["None"], ["", "def", "exists", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "key", "in", "self", ".", "cache", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.existsPair": [[671, 677], ["str", "str", "str", "str"], "methods", ["None"], ["", "def", "existsPair", "(", "self", ",", "keya", ",", "keyb", ")", ":", "\n", "        ", "if", "keya", "<", "keyb", ":", "\n", "            ", "tmpkey", "=", "str", "(", "keya", ")", "+", "\"#\"", "+", "str", "(", "keyb", ")", "\n", "", "else", ":", "\n", "            ", "tmpkey", "=", "str", "(", "keyb", ")", "+", "\"#\"", "+", "str", "(", "keya", ")", "\n", "", "return", "tmpkey", "in", "self", ".", "cache", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.insert": [[678, 681], ["None"], "methods", ["None"], ["", "def", "insert", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "self", ".", "cache", "[", "key", "]", "=", "value", "\n", "self", ".", "size", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.insertPairIfNew": [[682, 689], ["tree_kernels.Cache.insert", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.insert"], ["", "def", "insertPairIfNew", "(", "self", ",", "keya", ",", "keyb", ")", ":", "\n", "        ", "if", "keya", "<", "keyb", ":", "\n", "            ", "tmpkey", "=", "str", "(", "keya", ")", "+", "\"#\"", "+", "str", "(", "keyb", ")", "\n", "", "else", ":", "\n", "            ", "tmpkey", "=", "str", "(", "keyb", ")", "+", "\"#\"", "+", "str", "(", "keya", ")", "\n", "", "if", "not", "tmpkey", "in", "self", ".", "cache", ":", "\n", "            ", "self", ".", "insert", "(", "tmpkey", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.remove": [[690, 693], ["None"], "methods", ["None"], ["", "", "def", "remove", "(", "self", ",", "key", ")", ":", "\n", "        ", "del", "self", ".", "cache", "[", "key", "]", "\n", "self", ".", "size", "-=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.removeAll": [[694, 697], ["None"], "methods", ["None"], ["", "def", "removeAll", "(", "self", ")", ":", "\n", "        ", "self", ".", "cache", "=", "{", "}", "\n", "self", ".", "size", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.read": [[698, 700], ["None"], "methods", ["None"], ["", "def", "read", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "cache", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.__len__": [[701, 703], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie._Node.__init__": [[85, 88], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "children", "=", "{", "}", "\n", "self", ".", "value", "=", "_SENTINEL", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie._Node.iterate": [[89, 126], ["stack.append", "path.append", "iter", "next", "iteritems", "stack.pop", "path.pop"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.iter", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.iteritems", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop"], ["", "def", "iterate", "(", "self", ",", "path", ",", "shallow", ",", "iteritems", ")", ":", "\n", "        ", "\"\"\"Yields all the nodes with values associated to them in the trie.\n\n        Args:\n            path: Path leading to this node.  Used to construct the key when\n                returning value of this node and as a prefix for children.\n            shallow: Perform a shallow traversal, i.e. do not yield nodes if\n                their prefix has been yielded.\n            iteritems: A function taking dictionary as argument and returning\n                iterator over its items.  Something other than dict.iteritems\n                may be given to enable sorting.\n\n        Yields:\n            ``(path, value)`` tuples.\n        \"\"\"", "\n", "# Use iterative function with stack on the heap so we don't hit Python's", "\n", "# recursion depth limits.", "\n", "node", "=", "self", "\n", "stack", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "if", "node", ".", "value", "is", "not", "_SENTINEL", ":", "\n", "                ", "yield", "path", ",", "node", ".", "value", "\n", "\n", "", "if", "(", "not", "shallow", "or", "node", ".", "value", "is", "_SENTINEL", ")", "and", "node", ".", "children", ":", "\n", "                ", "stack", ".", "append", "(", "iter", "(", "iteritems", "(", "node", ".", "children", ")", ")", ")", "\n", "path", ".", "append", "(", "None", ")", "\n", "\n", "", "while", "True", ":", "\n", "                ", "try", ":", "\n", "                    ", "step", ",", "node", "=", "next", "(", "stack", "[", "-", "1", "]", ")", "\n", "path", "[", "-", "1", "]", "=", "step", "\n", "break", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "stack", ".", "pop", "(", ")", "\n", "path", ".", "pop", "(", ")", "\n", "", "except", "IndexError", ":", "\n", "                    ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie._Node.traverse": [[127, 157], ["node_factory", "iteritems", "tuple", "gtrie._Node.traverse.children"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.iteritems"], ["", "", "", "", "def", "traverse", "(", "self", ",", "node_factory", ",", "path_conv", ",", "path", ",", "iteritems", ")", ":", "\n", "        ", "\"\"\"Traverses the node and returns another type of node from factory.\n\n        Args:\n            node_factory: Callable function to construct new nodes.\n            path_conv: Callable function to convert node path to a key.\n            path: Current path for this node.\n            iteritems: A function taking dictionary as argument and returning\n                iterator over its items.  Something other than dict.iteritems\n                may be given to enable sorting.\n\n        Returns:\n            An object constructed by calling node_factory(path_conv, path,\n            children, value=...), where children are constructed by node_factory\n            from the children of this node. There doesn't need to be 1:1\n            correspondence between original nodes in the trie and constructed\n            nodes (see make_test_node_and_compress in test.py).\n        \"\"\"", "\n", "\n", "def", "children", "(", ")", ":", "\n", "            ", "\"\"\"Recursively traverses all of node's children.\"\"\"", "\n", "for", "step", ",", "node", "in", "iteritems", "(", "self", ".", "children", ")", ":", "\n", "                ", "yield", "node", ".", "traverse", "(", "node_factory", ",", "path_conv", ",", "path", "+", "[", "step", "]", ",", "iteritems", ")", "\n", "\n", "", "", "args", "=", "[", "path_conv", ",", "tuple", "(", "path", ")", ",", "children", "(", ")", "]", "\n", "\n", "if", "self", ".", "value", "is", "not", "_SENTINEL", ":", "\n", "            ", "args", ".", "append", "(", "self", ".", "value", ")", "\n", "\n", "", "return", "node_factory", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie._Node.__eq__": [[158, 181], ["stack.append", "len", "len", "next", "[].get", "_iteritems", "stack.pop"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._iteritems", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "# Like iterate, we don't recurse so this works on deep tries.", "\n", "        ", "a", ",", "b", "=", "self", ",", "other", "\n", "stack", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "if", "a", ".", "value", "!=", "b", ".", "value", "or", "len", "(", "a", ".", "children", ")", "!=", "len", "(", "b", ".", "children", ")", ":", "\n", "                ", "return", "False", "\n", "", "if", "a", ".", "children", ":", "\n", "                ", "stack", ".", "append", "(", "(", "_iteritems", "(", "a", ".", "children", ")", ",", "b", ".", "children", ")", ")", "\n", "\n", "", "while", "True", ":", "\n", "                ", "try", ":", "\n", "                    ", "key", ",", "a", "=", "next", "(", "stack", "[", "-", "1", "]", "[", "0", "]", ")", "\n", "b", "=", "stack", "[", "-", "1", "]", "[", "1", "]", ".", "get", "(", "key", ")", "\n", "if", "b", "is", "None", ":", "\n", "                        ", "return", "False", "\n", "", "break", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "stack", ".", "pop", "(", ")", "\n", "", "except", "IndexError", ":", "\n", "                    ", "return", "True", "\n", "\n", "", "", "", "return", "self", ".", "value", "==", "other", ".", "value", "and", "self", ".", "children", "==", "other", ".", "children", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie._Node.__ne__": [[182, 184], ["gtrie._Node.__eq__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.FunctionType.__eq__"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "not", "self", ".", "__eq__", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie._Node.__bool__": [[185, 187], ["bool"], "methods", ["None"], ["", "def", "__bool__", "(", "self", ")", ":", "\n", "        ", "return", "bool", "(", "self", ".", "value", "is", "not", "_SENTINEL", "or", "self", ".", "children", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie._Node.__getstate__": [[192, 265], ["stack.append", "state.append", "_iteritems", "state.append", "next", "state.append", "stack.pop", "state.append", "state.pop"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._iteritems", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop"], ["def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get state used for pickling.\n\n        The state is encoded as a list of simple commands which consist of an\n        integer and some command-dependent number of arguments.  The commands\n        modify what the current node is by navigating the trie up and down and\n        setting node values.  Possible commands are:\n\n        * [n, step0, step1, ..., stepn-1, value], for n >= 0, specifies step\n          needed to reach the next current node as well as its new value.  There\n          is no way to create a child node without setting its (or its\n          descendant's) value.\n\n        * [-n], for -n < 0, specifies to go up n steps in the trie.\n\n        When encoded as a state, the commands are flattened into a single list.\n\n        For example::\n\n            [ 0, 'Root',\n              2, 'Foo', 'Bar', 'Root/Foo/Bar Node',\n             -1,\n              1, 'Baz', 'Root/Foo/Baz Node',\n             -2,\n              1, 'Qux', 'Root/Qux Node' ]\n\n        Creates the following hierarchy::\n\n            -* value: Root\n             +-- Foo --* no value\n             |         +-- Bar -- * value: Root/Foo/Bar Node\n             |         +-- Baz -- * value: Root/Foo/Baz Node\n             +-- Qux -- * value: Root/Qux Node\n\n        Returns:\n            A pickable state which can be passed to :func:`_Node.__setstate__`\n            to reconstruct the node and its full hierarchy.\n        \"\"\"", "\n", "# Like iterate, we don't recurse so pickling works on deep tries.", "\n", "state", "=", "[", "]", "if", "self", ".", "value", "is", "_SENTINEL", "else", "[", "0", "]", "\n", "last_cmd", "=", "0", "\n", "node", "=", "self", "\n", "stack", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "if", "node", ".", "value", "is", "not", "_SENTINEL", ":", "\n", "                ", "last_cmd", "=", "0", "\n", "state", ".", "append", "(", "node", ".", "value", ")", "\n", "", "stack", ".", "append", "(", "_iteritems", "(", "node", ".", "children", ")", ")", "\n", "\n", "while", "True", ":", "\n", "                ", "try", ":", "\n", "                    ", "step", ",", "node", "=", "next", "(", "stack", "[", "-", "1", "]", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "if", "last_cmd", "<", "0", ":", "\n", "                        ", "state", "[", "-", "1", "]", "-=", "1", "\n", "", "else", ":", "\n", "                        ", "last_cmd", "=", "-", "1", "\n", "state", ".", "append", "(", "-", "1", ")", "\n", "", "stack", ".", "pop", "(", ")", "\n", "continue", "\n", "", "except", "IndexError", ":", "\n", "                    ", "if", "last_cmd", "<", "0", ":", "\n", "                        ", "state", ".", "pop", "(", ")", "\n", "", "return", "state", "\n", "\n", "", "if", "last_cmd", ">", "0", ":", "\n", "                    ", "last_cmd", "+=", "1", "\n", "state", "[", "-", "last_cmd", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "last_cmd", "=", "1", "\n", "state", ".", "append", "(", "1", ")", "\n", "", "state", ".", "append", "(", "step", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie._Node.__setstate__": [[266, 280], ["gtrie._Node.__init__", "iter", "next", "stack.append", "type", "next"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.iter", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "", "", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\"Unpickles node.  See :func:`_Node.__getstate__`.\"\"\"", "\n", "self", ".", "__init__", "(", ")", "\n", "state", "=", "iter", "(", "state", ")", "\n", "stack", "=", "[", "self", "]", "\n", "for", "cmd", "in", "state", ":", "\n", "            ", "if", "cmd", "<", "0", ":", "\n", "                ", "del", "stack", "[", "cmd", ":", "]", "\n", "", "else", ":", "\n", "                ", "while", "cmd", ">", "0", ":", "\n", "                    ", "stack", ".", "append", "(", "type", "(", "self", ")", "(", ")", ")", "\n", "stack", "[", "-", "2", "]", ".", "children", "[", "next", "(", "state", ")", "]", "=", "stack", "[", "-", "1", "]", "\n", "cmd", "-=", "1", "\n", "", "stack", "[", "-", "1", "]", ".", "value", "=", "next", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.__init__": [[303, 312], ["gtrie._Node", "gtrie.Trie.update"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Initialises the trie.\n\n        Arguments are interpreted the same way :func:`Trie.update` interprets\n        them.\n        \"\"\"", "\n", "self", ".", "_root", "=", "_Node", "(", ")", "\n", "self", ".", "_sorted", "=", "False", "\n", "self", ".", "update", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._iteritems": [[313, 324], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_iteritems", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns function yielding over dict's items possibly in sorted order.\n\n        Returns:\n            A function iterating over items of a dictionary given as an\n            argument. If child nodes sorting has been enabled (via\n            :func:`Trie.enable_sorting` method), returned function will go\n            through the items in sorted order..\n        \"\"\"", "\n", "return", "_sorted_iteritems", "if", "self", ".", "_sorted", "else", "_iteritems", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.enable_sorting": [[325, 347], ["None"], "methods", ["None"], ["", "def", "enable_sorting", "(", "self", ",", "enable", "=", "True", ")", ":", "\n", "        ", "\"\"\"Enables sorting of child nodes when iterating and traversing.\n\n        Normally, child nodes are not sorted when iterating or traversing over\n        the trie (just like dict elements are not sorted).  This method allows\n        sorting to be enabled (which was the behaviour prior to pygtrie 2.0\n        release).\n\n        For Trie class, enabling sorting of children is identical to simply\n        sorting the list of items since Trie returns keys as tuples.  However,\n        for other implementations such as StringTrie the two may behove subtly\n        different.  For example, sorting items might produce::\n\n            root/foo-bar\n            root/foo/baz\n\n        even though foo comes before foo-bar.\n\n        Args:\n            enable: Whether to enable sorting of child nodes.\n        \"\"\"", "\n", "self", ".", "_sorted", "=", "enable", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.clear": [[348, 351], ["gtrie._Node"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "\"\"\"Removes all the values from the trie.\"\"\"", "\n", "self", ".", "_root", "=", "_Node", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.update": [[352, 370], ["super().update", "len", "ValueError", "isinstance", "gtrie.Trie._iteritems"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._iteritems"], ["", "def", "update", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Updates stored values.  Works like :func:`dict.update`.\"\"\"", "\n", "if", "len", "(", "args", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"update() takes at most one positional argument, \"", "\n", "\"%d given.\"", "%", "len", "(", "args", ")", "\n", ")", "\n", "# We have this here instead of just letting MutableMapping.update()", "\n", "# handle things because it will iterate over keys and for each key", "\n", "# retrieve the value.  With Trie, this may be expensive since the path", "\n", "# to the node would have to be walked twice.  Instead, we have our own", "\n", "# implementation where iteritems() is used avoiding the unnecessary", "\n", "# value look-up.", "\n", "", "if", "args", "and", "isinstance", "(", "args", "[", "0", "]", ",", "Trie", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "_iteritems", "(", "args", "[", "0", "]", ")", ":", "\n", "                ", "self", "[", "key", "]", "=", "value", "\n", "", "args", "=", "(", ")", "\n", "", "super", "(", "Trie", ",", "self", ")", ".", "update", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.copy": [[371, 374], ["gtrie.Trie.__class__"], "methods", ["None"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a shallow copy of the trie.\"\"\"", "\n", "return", "self", ".", "__class__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.fromkeys": [[375, 394], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "fromkeys", "(", "cls", ",", "keys", ",", "value", "=", "None", ")", ":", "\n", "        ", "\"\"\"Creates a new trie with given keys set.\n\n        This is roughly equivalent to calling the constructor with a ``(key,\n        value) for key in keys`` generator.\n\n        Args:\n            keys: An iterable of keys that should be set in the new trie.\n            value: Value to associate with given keys.\n\n        Returns:\n            A new trie where each key from ``keys`` has been set to the given\n            value.\n        \"\"\"", "\n", "trie", "=", "cls", "(", ")", "\n", "for", "key", "in", "keys", ":", "\n", "            ", "trie", "[", "key", "]", "=", "value", "\n", "", "return", "trie", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._get_node": [[395, 425], ["gtrie.Trie.__path_from_key", "trace.append", "node.children.get.children.get.children.setdefault", "node.children.get.children.get.children.get", "gtrie._Node", "KeyError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.__path_from_key", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.setdefault", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get"], ["", "def", "_get_node", "(", "self", ",", "key", ",", "create", "=", "False", ")", ":", "\n", "        ", "\"\"\"Returns node for given key.  Creates it if requested.\n\n        Args:\n            key: A key to look for.\n            create: Whether to create the node if it does not exist.\n\n        Returns:\n            ``(node, trace)`` tuple where ``node`` is the node for given key and\n            ``trace`` is a list specifying path to reach the node including all\n            the encountered nodes.  Each element of trace is a ``(step, node)``\n            tuple where ``step`` is a step from parent node to given node and\n            ``node`` is node on the path.  The first element of the path is\n            always ``(None, self._root)``.\n\n        Raises:\n            KeyError: If there is no node for the key and ``create`` is\n                ``False``.\n        \"\"\"", "\n", "node", "=", "self", ".", "_root", "\n", "trace", "=", "[", "(", "None", ",", "node", ")", "]", "\n", "for", "step", "in", "self", ".", "__path_from_key", "(", "key", ")", ":", "\n", "            ", "if", "create", ":", "\n", "                ", "node", "=", "node", ".", "children", ".", "setdefault", "(", "step", ",", "_Node", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "node", "=", "node", ".", "children", ".", "get", "(", "step", ")", "\n", "if", "not", "node", ":", "\n", "                    ", "raise", "KeyError", "(", "key", ")", "\n", "", "", "trace", ".", "append", "(", "(", "step", ",", "node", ")", ")", "\n", "", "return", "node", ",", "trace", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.__iter__": [[426, 428], ["gtrie.Trie.iterkeys"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.iterkeys"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "iterkeys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.iteritems": [[431, 478], ["gtrie.Trie._get_node", "node.iterate", "list", "gtrie.Trie.__path_from_key", "gtrie.Trie._key_from_path"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._get_node", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie._Node.iterate", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.__path_from_key", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.StringTrie._key_from_path"], ["", "def", "iteritems", "(", "self", ",", "prefix", "=", "_SENTINEL", ",", "shallow", "=", "False", ")", ":", "\n", "        ", "\"\"\"Yields all nodes with associated values with given prefix.\n\n        Only nodes with values are output.  For example::\n\n            >>> import pygtrie\n            >>> t = pygtrie.StringTrie()\n            >>> t['foo'] = 'Foo'\n            >>> t['foo/bar/baz'] = 'Baz'\n            >>> t['qux'] = 'Qux'\n            >>> t.items()\n            [('qux', 'Qux'), ('foo', 'Foo'), ('foo/bar/baz', 'Baz')]\n\n        Items are generated in topological order but the order of siblings is\n        unspecified by default.  In other words, in the above example, the\n        ``('qux', 'Qux')`` pair might have been at the end of the list. At an\n        expense of efficiency, this can be changed via\n        :func:`Trie.enable_sorting`.\n\n        With ``prefix`` argument, only items with specified prefix are generated\n        (i.e. only given subtrie is traversed) as demonstrated by::\n\n            >>> t.items(prefix='foo/bar')\n            [('foo/bar/baz', 'Baz')]\n\n        With ``shallow`` argument, if a node has value associated with it, it's\n        children are not traversed even if they exist which can be seen in::\n\n            >>> t.items(shallow=True)\n            [('qux', 'Qux'), ('foo', 'Foo')]\n\n        Args:\n            prefix: Prefix to limit iteration to.\n            shallow: Perform a shallow traversal, i.e. do not yield items if\n                their prefix has been yielded.\n\n        Yields:\n            ``(key, value)`` tuples.\n\n        Raises:\n            KeyError: If ``prefix`` does not match any node.\n        \"\"\"", "\n", "node", ",", "_", "=", "self", ".", "_get_node", "(", "prefix", ")", "\n", "for", "path", ",", "value", "in", "node", ".", "iterate", "(", "\n", "list", "(", "self", ".", "__path_from_key", "(", "prefix", ")", ")", ",", "shallow", ",", "self", ".", "_iteritems", "\n", ")", ":", "\n", "            ", "yield", "(", "self", ".", "_key_from_path", "(", "path", ")", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.iterkeys": [[479, 498], ["gtrie.Trie.iteritems"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.iteritems"], ["", "", "def", "iterkeys", "(", "self", ",", "prefix", "=", "_SENTINEL", ",", "shallow", "=", "False", ")", ":", "\n", "        ", "\"\"\"Yields all keys having associated values with given prefix.\n\n        This is equivalent to taking first element of tuples generated by\n        :func:`Trie.iteritems` which see for more detailed documentation.\n\n        Args:\n            prefix: Prefix to limit iteration to.\n            shallow: Perform a shallow traversal, i.e. do not yield keys if\n                their prefix has been yielded.\n\n        Yields:\n            All the keys (with given prefix) with associated values in the trie.\n\n        Raises:\n            KeyError: If ``prefix`` does not match any node.\n        \"\"\"", "\n", "for", "key", ",", "_", "in", "self", ".", "iteritems", "(", "prefix", "=", "prefix", ",", "shallow", "=", "shallow", ")", ":", "\n", "            ", "yield", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.itervalues": [[499, 521], ["gtrie.Trie._get_node", "node.iterate", "list", "gtrie.Trie.__path_from_key"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._get_node", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie._Node.iterate", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.__path_from_key"], ["", "", "def", "itervalues", "(", "self", ",", "prefix", "=", "_SENTINEL", ",", "shallow", "=", "False", ")", ":", "\n", "        ", "\"\"\"Yields all values associated with keys with given prefix.\n\n        This is equivalent to taking second element of tuples generated by\n        :func:`Trie.iteritems` which see for more detailed documentation.\n\n        Args:\n            prefix: Prefix to limit iteration to.\n            shallow: Perform a shallow traversal, i.e. do not yield values if\n                their prefix has been yielded.\n\n        Yields:\n            All the values associated with keys (with given prefix) in the trie.\n\n        Raises:\n            KeyError: If ``prefix`` does not match any node.\n        \"\"\"", "\n", "node", ",", "_", "=", "self", ".", "_get_node", "(", "prefix", ")", "\n", "for", "_", ",", "value", "in", "node", ".", "iterate", "(", "\n", "list", "(", "self", ".", "__path_from_key", "(", "prefix", ")", ")", ",", "shallow", ",", "self", ".", "_iteritems", "\n", ")", ":", "\n", "            ", "yield", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items": [[522, 529], ["list", "gtrie.Trie.iteritems"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.iteritems"], ["", "", "def", "items", "(", "self", ",", "prefix", "=", "_SENTINEL", ",", "shallow", "=", "False", ")", ":", "\n", "        ", "\"\"\"Returns a list of ``(key, value)`` pairs in given subtrie.\n\n        This is equivalent to constructing a list from generator returned by\n        :func:`Trie.iteritems` which see for more detailed documentation.\n        \"\"\"", "\n", "return", "list", "(", "self", ".", "iteritems", "(", "prefix", "=", "prefix", ",", "shallow", "=", "shallow", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys": [[530, 537], ["list", "gtrie.Trie.iterkeys"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.iterkeys"], ["", "def", "keys", "(", "self", ",", "prefix", "=", "_SENTINEL", ",", "shallow", "=", "False", ")", ":", "\n", "        ", "\"\"\"Returns a list of all the keys, with given prefix, in the trie.\n\n        This is equivalent to constructing a list from generator returned by\n        :func:`Trie.iterkeys` which see for more detailed documentation.\n        \"\"\"", "\n", "return", "list", "(", "self", ".", "iterkeys", "(", "prefix", "=", "prefix", ",", "shallow", "=", "shallow", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.values": [[538, 545], ["list", "gtrie.Trie.itervalues"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.itervalues"], ["", "def", "values", "(", "self", ",", "prefix", "=", "_SENTINEL", ",", "shallow", "=", "False", ")", ":", "\n", "        ", "\"\"\"Returns a list of values in given subtrie.\n\n        This is equivalent to constructing a list from generator returned by\n        :func:`Trie.iterivalues` which see for more detailed documentation.\n        \"\"\"", "\n", "return", "list", "(", "self", ".", "itervalues", "(", "prefix", "=", "prefix", ",", "shallow", "=", "shallow", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.__len__": [[548, 554], ["sum", "gtrie.Trie.itervalues"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.itervalues"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns number of values in a trie.\n\n        Note that this method is expensive as it iterates over the whole trie.\n        \"\"\"", "\n", "return", "sum", "(", "1", "for", "_", "in", "self", ".", "itervalues", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.__nonzero__": [[555, 557], ["bool"], "methods", ["None"], ["", "def", "__nonzero__", "(", "self", ")", ":", "\n", "        ", "return", "bool", "(", "self", ".", "_root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.has_node": [[561, 611], ["gtrie.Trie._get_node", "int", "int", "bool"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._get_node"], ["def", "has_node", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"Returns whether given node is in the trie.\n\n        Return value is a bitwise or of ``HAS_VALUE`` and ``HAS_SUBTRIE``\n        constants indicating node has a value associated with it and that it is\n        a prefix of another existing key respectively.  Both of those are\n        independent of each other and all of the four combinations are possible.\n        For example::\n\n            >>> import pygtrie\n            >>> t = pygtrie.StringTrie()\n            >>> t['foo/bar'] = 'Bar'\n            >>> t['foo/bar/baz'] = 'Baz'\n            >>> t.has_node('qux') == 0\n            True\n            >>> t.has_node('foo/bar/baz') == pygtrie.Trie.HAS_VALUE\n            True\n            >>> t.has_node('foo') == pygtrie.Trie.HAS_SUBTRIE\n            True\n            >>> t.has_node('foo/bar') == (pygtrie.Trie.HAS_VALUE |\n            ...                           pygtrie.Trie.HAS_SUBTRIE)\n            True\n\n        There are two higher level methods built on top of this one which give\n        easier interface for the information. :func:`Trie.has_key` and returns\n        whether node has a value associated with it and :func:`Trie.has_subtrie`\n        checks whether node is a prefix.  Continuing previous example::\n\n            >>> t.has_key('qux'), t.has_subtrie('qux')\n            False, False\n            >>> t.has_key('foo/bar/baz'), t.has_subtrie('foo/bar/baz')\n            True, False\n            >>> t.has_key('foo'), t.has_subtrie('foo')\n            False, True\n            >>> t.has_key('foo/bar'), t.has_subtrie('foo/bar')\n            True, True\n\n        Args:\n            key: A key to look for.\n\n        Returns:\n            Non-zero if node exists and if it does a bit-field denoting whether\n            it has a value associated with it and whether it has a subtrie.\n        \"\"\"", "\n", "try", ":", "\n", "            ", "node", ",", "_", "=", "self", ".", "_get_node", "(", "key", ")", "\n", "", "except", "KeyError", ":", "\n", "            ", "return", "0", "\n", "", "return", "(", "self", ".", "HAS_VALUE", "*", "int", "(", "node", ".", "value", "is", "not", "_SENTINEL", ")", ")", "|", "(", "\n", "self", ".", "HAS_SUBTRIE", "*", "int", "(", "bool", "(", "node", ".", "children", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.has_key": [[613, 619], ["bool", "gtrie.Trie.has_node"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.has_node"], ["", "def", "has_key", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"Indicates whether given key has value associated with it.\n\n        See :func:`Trie.has_node` for more detailed documentation.\n        \"\"\"", "\n", "return", "bool", "(", "self", ".", "has_node", "(", "key", ")", "&", "self", ".", "HAS_VALUE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.has_subtrie": [[620, 626], ["bool", "gtrie.Trie.has_node"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.has_node"], ["", "def", "has_subtrie", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"Returns whether given key is a prefix of another key in the trie.\n\n        See :func:`Trie.has_node` for more detailed documentation.\n        \"\"\"", "\n", "return", "bool", "(", "self", ".", "has_node", "(", "key", ")", "&", "self", ".", "HAS_SUBTRIE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._slice_maybe": [[627, 648], ["isinstance", "TypeError"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_slice_maybe", "(", "key_or_slice", ")", ":", "\n", "        ", "\"\"\"Checks whether argument is a slice or a plain key.\n\n        Args:\n            key_or_slice: A key or a slice to test.\n\n        Returns:\n            ``(key, is_slice)`` tuple.  ``is_slice`` indicates whether\n            ``key_or_slice`` is a slice and ``key`` is either ``key_or_slice``\n            itself (if it's not a slice) or slice's start position.\n\n        Raises:\n            TypeError: If ``key_or_slice`` is a slice whose stop or step are not\n                ``None`` In other words, only ``[key:]`` slices are valid.\n        \"\"\"", "\n", "if", "isinstance", "(", "key_or_slice", ",", "slice", ")", ":", "\n", "            ", "if", "key_or_slice", ".", "stop", "is", "not", "None", "or", "key_or_slice", ".", "step", "is", "not", "None", ":", "\n", "                ", "raise", "TypeError", "(", "key_or_slice", ")", "\n", "", "return", "key_or_slice", ".", "start", ",", "True", "\n", "", "return", "key_or_slice", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.__getitem__": [[649, 698], ["gtrie.Trie._get_node", "gtrie.Trie._slice_maybe", "gtrie.Trie.itervalues", "gtrie.ShortKeyError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._get_node", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._slice_maybe", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.itervalues"], ["", "def", "__getitem__", "(", "self", ",", "key_or_slice", ")", ":", "\n", "        ", "\"\"\"Returns value associated with given key or raises KeyError.\n\n        When argument is a single key, value for that key is returned (or\n        :class:`KeyError` exception is thrown if the node does not exist or has\n        no value associated with it).\n\n        When argument is a slice, it must be one with only `start` set in which\n        case the access is identical to :func:`Trie.itervalues` invocation with\n        prefix argument.\n\n        Example:\n\n            >>> import pygtrie\n            >>> t = pygtrie.StringTrie()\n            >>> t['foo/bar'] = 'Bar'\n            >>> t['foo/baz'] = 'Baz'\n            >>> t['qux'] = 'Qux'\n            >>> t['foo/bar']\n            'Bar'\n            >>> list(t['foo':])\n            ['Baz', 'Bar']\n            >>> t['foo']\n            Traceback (most recent call last):\n                ...\n            pygtrie.ShortKeyError: 'foo'\n\n        Args:\n            key_or_slice: A key or a slice to look for.\n\n        Returns:\n            If a single key is passed, a value associated with given key.  If\n            a slice is passed, a generator of values in specified subtrie.\n\n        Raises:\n            ShortKeyError: If the key has no value associated with it but is\n                a prefix of some key with a value.  Note that\n                :class:`ShortKeyError` is subclass of :class:`KeyError`.\n            KeyError: If key has no value associated with it nor is a prefix of\n                an existing key.\n            TypeError: If ``key_or_slice`` is a slice but it's stop or step are\n                not ``None``.\n        \"\"\"", "\n", "if", "self", ".", "_slice_maybe", "(", "key_or_slice", ")", "[", "1", "]", ":", "\n", "            ", "return", "self", ".", "itervalues", "(", "key_or_slice", ".", "start", ")", "\n", "", "node", ",", "_", "=", "self", ".", "_get_node", "(", "key_or_slice", ")", "\n", "if", "node", ".", "value", "is", "_SENTINEL", ":", "\n", "            ", "raise", "ShortKeyError", "(", "key_or_slice", ")", "\n", "", "return", "node", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._set": [[699, 719], ["gtrie.Trie._get_node", "node.children.clear"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._get_node", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.clear"], ["", "def", "_set", "(", "self", ",", "key", ",", "value", ",", "only_if_missing", "=", "False", ",", "clear_children", "=", "False", ")", ":", "\n", "        ", "\"\"\"Sets value for a given key.\n\n        Args:\n            key: Key to set value of.\n            value: Value to set to.\n            only_if_missing: If ``True``, value won't be changed if the key is\n                    already associated with a value.\n            clear_children: If ``True``, all children of the node, if any, will\n                    be removed.\n\n        Returns:\n            Value of the node.\n        \"\"\"", "\n", "node", ",", "_", "=", "self", ".", "_get_node", "(", "key", ",", "create", "=", "True", ")", "\n", "if", "not", "only_if_missing", "or", "node", ".", "value", "is", "_SENTINEL", ":", "\n", "            ", "node", ".", "value", "=", "value", "\n", "", "if", "clear_children", ":", "\n", "            ", "node", ".", "children", ".", "clear", "(", ")", "\n", "", "return", "node", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.__setitem__": [[720, 748], ["gtrie.Trie._slice_maybe", "gtrie.Trie._set"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._slice_maybe", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._set"], ["", "def", "__setitem__", "(", "self", ",", "key_or_slice", ",", "value", ")", ":", "\n", "        ", "\"\"\"Sets value associated with given key.\n\n        If `key_or_slice` is a key, simply associate it with given value.  If it\n        is a slice (which must have `start` set only), it in addition clears any\n        subtrie that might have been attached to particular key.  For example::\n\n            >>> import pygtrie\n            >>> t = pygtrie.StringTrie()\n            >>> t['foo/bar'] = 'Bar'\n            >>> t['foo/baz'] = 'Baz'\n            >>> t.keys()\n            ['foo/baz', 'foo/bar']\n            >>> t['foo':] = 'Foo'\n            >>> t.keys()\n            ['foo']\n\n        Args:\n            key_or_slice: A key to look for or a slice.  If it is a slice, the\n                whole subtrie (if present) will be replaced by a single node\n                with given value set.\n            value: Value to set.\n\n        Raises:\n            TypeError: If key is a slice whose stop or step are not None.\n        \"\"\"", "\n", "key", ",", "is_slice", "=", "self", ".", "_slice_maybe", "(", "key_or_slice", ")", "\n", "self", ".", "_set", "(", "key", ",", "value", ",", "clear_children", "=", "is_slice", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.setdefault": [[749, 756], ["gtrie.Trie._set"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._set"], ["", "def", "setdefault", "(", "self", ",", "key", ",", "value", "=", "None", ")", ":", "\n", "        ", "\"\"\"Sets value of a given node if not set already.  Also returns it.\n\n        In contrast to :func:`Trie.__setitem__`, this method does not accept\n        slice as a key.\n        \"\"\"", "\n", "return", "self", ".", "_set", "(", "key", ",", "value", ",", "only_if_missing", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._cleanup_trace": [[757, 772], ["len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_cleanup_trace", "(", "trace", ")", ":", "\n", "        ", "\"\"\"Removes empty nodes present on specified trace.\n\n        Args:\n            trace: Trace to the node to cleanup as returned by\n                :func:`Trie._get_node`.\n        \"\"\"", "\n", "i", "=", "len", "(", "trace", ")", "-", "1", "# len(path) >= 1 since root is always there", "\n", "step", ",", "node", "=", "trace", "[", "i", "]", "\n", "while", "i", "and", "not", "node", ":", "\n", "            ", "i", "-=", "1", "\n", "parent_step", ",", "parent", "=", "trace", "[", "i", "]", "\n", "del", "parent", ".", "children", "[", "step", "]", "\n", "step", ",", "node", "=", "parent_step", ",", "parent", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._pop_from_node": [[773, 797], ["gtrie.Trie._cleanup_trace", "gtrie.ShortKeyError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._cleanup_trace"], ["", "", "def", "_pop_from_node", "(", "self", ",", "node", ",", "trace", ",", "default", "=", "_SENTINEL", ")", ":", "\n", "        ", "\"\"\"Removes a value from given node.\n\n        Args:\n            node: Node to get value of.\n            trace: Trace to that node as returned by :func:`Trie._get_node`.\n            default: A default value to return if node has no value set.\n\n        Returns:\n            Value of the node or ``default``.\n\n        Raises:\n            ShortKeyError: If the node has no value associated with it and\n                ``default`` has not been given.\n        \"\"\"", "\n", "if", "node", ".", "value", "is", "not", "_SENTINEL", ":", "\n", "            ", "value", "=", "node", ".", "value", "\n", "node", ".", "value", "=", "_SENTINEL", "\n", "self", ".", "_cleanup_trace", "(", "trace", ")", "\n", "return", "value", "\n", "", "elif", "default", "is", "_SENTINEL", ":", "\n", "            ", "raise", "ShortKeyError", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "default", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.pop": [[798, 825], ["gtrie.Trie._pop_from_node", "gtrie.Trie._get_node"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._pop_from_node", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._get_node"], ["", "", "def", "pop", "(", "self", ",", "key", ",", "default", "=", "_SENTINEL", ")", ":", "\n", "        ", "\"\"\"Deletes value associated with given key and returns it.\n\n        Args:\n            key: A key to look for.\n            default: If specified, value that will be returned if given key has\n                no value associated with it.  If not specified, method will\n                throw KeyError in such cases.\n\n        Returns:\n            Removed value, if key had value associated with it, or ``default``\n            (if given).\n\n        Raises:\n            ShortKeyError: If ``default`` has not been specified and the key has\n                no value associated with it but is a prefix of some key with\n                a value.  Note that :class:`ShortKeyError` is subclass of\n                :class:`KeyError`.\n            KeyError: If default has not been specified and key has no value\n                associated with it nor is a prefix of an existing key.\n        \"\"\"", "\n", "try", ":", "\n", "            ", "return", "self", ".", "_pop_from_node", "(", "*", "self", ".", "_get_node", "(", "key", ")", ")", "\n", "", "except", "KeyError", ":", "\n", "            ", "if", "default", "is", "not", "_SENTINEL", ":", "\n", "                ", "return", "default", "\n", "", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.popitem": [[826, 849], ["KeyError", "next", "trace.append", "gtrie.Trie._key_from_path", "gtrie.Trie._pop_from_node", "_iterkeys"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.StringTrie._key_from_path", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._pop_from_node"], ["", "", "def", "popitem", "(", "self", ")", ":", "\n", "        ", "\"\"\"Deletes an arbitrary value from the trie and returns it.\n\n        There is no guarantee as to which item is deleted and returned.  Neither\n        in respect to its lexicographical nor topological order.\n\n        Returns:\n            ``(key, value)`` tuple indicating deleted key.\n\n        Raises:\n            KeyError: If the trie is empty.\n        \"\"\"", "\n", "if", "not", "self", ":", "\n", "            ", "raise", "KeyError", "(", ")", "\n", "", "node", "=", "self", ".", "_root", "\n", "trace", "=", "[", "(", "None", ",", "node", ")", "]", "\n", "while", "node", ".", "value", "is", "_SENTINEL", ":", "\n", "            ", "step", "=", "next", "(", "_iterkeys", "(", "node", ".", "children", ")", ")", "\n", "node", "=", "node", ".", "children", "[", "step", "]", "\n", "trace", ".", "append", "(", "(", "step", ",", "node", ")", ")", "\n", "", "return", "(", "\n", "self", ".", "_key_from_path", "(", "(", "step", "for", "step", ",", "_", "in", "trace", "[", "1", ":", "]", ")", ")", ",", "\n", "self", ".", "_pop_from_node", "(", "node", ",", "trace", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.__delitem__": [[851, 893], ["gtrie.Trie._slice_maybe", "gtrie.Trie._get_node", "gtrie.Trie._cleanup_trace", "node.children.clear", "gtrie.ShortKeyError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._slice_maybe", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._get_node", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._cleanup_trace", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.clear"], ["", "def", "__delitem__", "(", "self", ",", "key_or_slice", ")", ":", "\n", "        ", "\"\"\"Deletes value associated with given key or raises KeyError.\n\n        If argument is a key, value associated with it is deleted.  If the key\n        is also a prefix, its descendents are not affected.  On the other hand,\n        if the argument is a slice (in which case it must have only start set),\n        the whole subtrie is removed.  For example::\n\n            >>> import pygtrie\n            >>> t = pygtrie.StringTrie()\n            >>> t['foo'] = 'Foo'\n            >>> t['foo/bar'] = 'Bar'\n            >>> t['foo/bar/baz'] = 'Baz'\n            >>> del t['foo/bar']\n            >>> t.keys()\n            ['foo', 'foo/bar/baz']\n            >>> del t['foo':]\n            >>> t.keys()\n            []\n\n        Args:\n            key_or_slice: A key to look for or a slice.  If key is a slice, the\n                    whole subtrie will be removed.\n\n        Raises:\n            ShortKeyError: If the key has no value associated with it but is\n                a prefix of some key with a value.  This is not thrown is\n                key_or_slice is a slice -- in such cases, the whole subtrie is\n                removed.  Note that :class:`ShortKeyError` is subclass of\n                :class:`KeyError`.\n            KeyError: If key has no value associated with it nor is a prefix of\n                an existing key.\n            TypeError: If key is a slice whose stop or step are not ``None``.\n        \"\"\"", "\n", "key", ",", "is_slice", "=", "self", ".", "_slice_maybe", "(", "key_or_slice", ")", "\n", "node", ",", "trace", "=", "self", ".", "_get_node", "(", "key", ")", "\n", "if", "is_slice", ":", "\n", "            ", "node", ".", "children", ".", "clear", "(", ")", "\n", "", "elif", "node", ".", "value", "is", "_SENTINEL", ":", "\n", "            ", "raise", "ShortKeyError", "(", "key", ")", "\n", "", "node", ".", "value", "=", "_SENTINEL", "\n", "self", ".", "_cleanup_trace", "(", "trace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.prefixes": [[894, 927], ["gtrie.Trie.__path_from_key", "node.children.get.children.get.children.get", "len", "gtrie.Trie._key_from_path"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.__path_from_key", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.StringTrie._key_from_path"], ["", "def", "prefixes", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"Walks towards the node specified by key and yields all found items.\n\n        Example:\n\n            >>> import pygtrie\n            >>> t = pygtrie.StringTrie()\n            >>> t['foo'] = 'Foo'\n            >>> t['foo/bar/baz'] = 'Baz'\n            >>> list(t.prefixes('foo/bar/baz/qux'))\n            [('foo', 'Foo'), ('foo/bar/baz', 'Baz')]\n            >>> list(t.prefixes('does/not/exist'))\n            []\n\n        Args:\n            key: Key to look for.\n\n        Yields:\n            ``(k, value)`` pairs denoting keys with associated values\n            encountered on the way towards the specified key.\n        \"\"\"", "\n", "node", "=", "self", ".", "_root", "\n", "path", "=", "self", ".", "__path_from_key", "(", "key", ")", "\n", "pos", "=", "0", "\n", "while", "True", ":", "\n", "            ", "if", "node", ".", "value", "is", "not", "_SENTINEL", ":", "\n", "                ", "yield", "self", ".", "_key_from_path", "(", "path", "[", ":", "pos", "]", ")", ",", "node", ".", "value", "\n", "", "if", "pos", "==", "len", "(", "path", ")", ":", "\n", "                ", "break", "\n", "", "node", "=", "node", ".", "children", ".", "get", "(", "path", "[", "pos", "]", ")", "\n", "if", "not", "node", ":", "\n", "                ", "break", "\n", "", "pos", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.shortest_prefix": [[928, 959], ["next", "gtrie.Trie.prefixes"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.prefixes"], ["", "", "def", "shortest_prefix", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"Finds the shortest prefix of a key with a value.\n\n        This is equivalent to taking the first object yielded by\n        :func:`Trie.prefixes` with a default of `(None, None)` if said method\n        yields no items.  As an added bonus, the pair in that case will be\n        a falsy value (as opposed to regular two-element tuple of ``None``\n        values).\n\n        Example:\n\n            >>> import pygtrie\n            >>> t = pygtrie.StringTrie()\n            >>> t['foo'] = 'Foo'\n            >>> t['foo/bar/baz'] = 'Baz'\n            >>> t.shortest_prefix('foo/bar/baz/qux')\n            ('foo', 'Foo')\n            >>> t.shortest_prefix('does/not/exist')\n            (None, None)\n            >>> bool(t.shortest_prefix('does/not/exist'))\n            False\n\n        Args:\n            key: Key to look for.\n\n        Returns:\n            ``(k, value)`` where ``k`` is the shortest prefix of ``key`` (it may\n            equal ``key``) and ``value`` is a value associated with that key.\n            If no node is found, ``(None, None)`` is returned.\n        \"\"\"", "\n", "return", "next", "(", "self", ".", "prefixes", "(", "key", ")", ",", "_NONE_PAIR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.longest_prefix": [[960, 994], ["gtrie.Trie.prefixes"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.prefixes"], ["", "def", "longest_prefix", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"Finds the longest prefix of a key with a value.\n\n        This is equivalent to taking the last object yielded by\n        :func:`Trie.prefixes` with a default of `(None, None)` if said method\n        yields no items.  As an added bonus, the pair in that case will be\n        a falsy value (as opposed to regular two-element tuple of ``None``\n        values).\n\n        Example:\n\n            >>> import pygtrie\n            >>> t = pygtrie.StringTrie()\n            >>> t['foo'] = 'Foo'\n            >>> t['foo/bar/baz'] = 'Baz'\n            >>> t.longest_prefix('foo/bar/baz/qux')\n            ('foo/bar/baz', 'Baz')\n            >>> t.longest_prefix('does/not/exist')\n            (None, None)\n            >>> bool(t.longest_prefix('does/not/exist'))\n            False\n\n        Args:\n            key: Key to look for.\n\n        Returns:\n            ``(k, value)`` where ``k`` is the longest prefix of ``key`` (it may\n            equal ``key``) and ``value`` is a value associated with that key.\n            If no node is found, ``(None, None)`` is returned.\n        \"\"\"", "\n", "ret", "=", "_NONE_PAIR", "\n", "for", "ret", "in", "self", ".", "prefixes", "(", "key", ")", ":", "\n", "            ", "pass", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.__eq__": [[995, 997], ["None"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "_root", "==", "other", ".", "_root", "# pylint: disable=protected-access", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.__ne__": [[998, 1000], ["None"], "methods", ["None"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "_root", "!=", "other", ".", "_root", "# pylint: disable=protected-access", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.__str__": [[1001, 1003], ["gtrie.Trie.iteritems"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.iteritems"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Trie(%s)\"", "%", "(", "\", \"", ".", "join", "(", "\"%s: %s\"", "%", "item", "for", "item", "in", "self", ".", "iteritems", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.__repr__": [[1004, 1011], ["gtrie.Trie.iteritems"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.iteritems"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "if", "self", ":", "\n", "            ", "return", "\"Trie((%s,))\"", "%", "(", "\n", "\", \"", ".", "join", "(", "\"(%r, %r)\"", "%", "item", "for", "item", "in", "self", ".", "iteritems", "(", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "\"Trie()\"", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.__path_from_key": [[1012, 1026], ["gtrie.Trie._path_from_key"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.StringTrie._path_from_key"], ["", "", "def", "__path_from_key", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"Converts a user visible key object to internal path representation.\n\n        Args:\n            key: User supplied key or ``_SENTINEL``.\n\n        Returns:\n            An empty tuple if ``key`` was ``_SENTINEL``, otherwise whatever\n            :func:`Trie._path_from_key` returns.\n\n        Raises:\n            TypeError: If ``key`` is of invalid type.\n        \"\"\"", "\n", "return", "(", ")", "if", "key", "is", "_SENTINEL", "else", "self", ".", "_path_from_key", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._path_from_key": [[1027, 1042], ["None"], "methods", ["None"], ["", "def", "_path_from_key", "(", "self", ",", "key", ")", ":", "# pylint: disable=no-self-use", "\n", "        ", "\"\"\"Converts a user visible key object to internal path representation.\n\n        The default implementation simply returns key.\n\n        Args:\n            key: User supplied key.\n\n        Returns:\n            A path, which is an iterable of steps.  Each step must be hashable.\n\n        Raises:\n            TypeError: If key is of invalid type.\n        \"\"\"", "\n", "return", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._key_from_path": [[1043, 1054], ["tuple"], "methods", ["None"], ["", "def", "_key_from_path", "(", "self", ",", "path", ")", ":", "# pylint: disable=no-self-use", "\n", "        ", "\"\"\"Converts an internal path into a user visible key object.\n\n        The default implementation creates a tuple from the path.\n\n        Args:\n            path: Internal path representation.\n        Returns:\n            A user visible key object.\n        \"\"\"", "\n", "return", "tuple", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.traverse": [[1055, 1171], ["gtrie.Trie._get_node", "node.traverse", "list", "gtrie.Trie.__path_from_key"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie._get_node", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.traverse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.__path_from_key"], ["", "def", "traverse", "(", "self", ",", "node_factory", ",", "prefix", "=", "_SENTINEL", ")", ":", "\n", "        ", "\"\"\"Traverses the tree using node_factory object.\n\n        node_factory is a callable function which accepts (path_conv, path,\n        children, value=...) arguments, where path_conv is a lambda converting\n        path representation to key, path is the path to this node, children is\n        an iterable of children nodes constructed by node_factory, optional\n        value is the value associated with the path.\n\n        node_factory's children argument is a generator which has a few\n        consequences:\n\n        * To traverse into node's children, the generator must be iterated over.\n          This can by accomplished by a simple \"children = list(children)\"\n          statement.\n        * Ignoring the argument allows node_factory to stop the traversal from\n          going into the children of the node.  In other words, whole subtrie\n          can be removed from traversal if node_factory chooses so.\n        * If children is stored as is (i.e. as a generator) when it is iterated\n          over later on it will see state of the trie as it is during the\n          iteration and not when traverse method was called.\n\n        :func:`Trie.traverse` has two advantages over :func:`Trie.iteritems` and\n        similar methods:\n\n        1. it allows subtries to be skipped completely when going through the\n           list of nodes based on the property of the parent node; and\n\n        2. it represents structure of the trie directly making it easy to\n           convert structure into a different representation.\n\n        For example, the below snippet prints all files in current directory\n        counting how many HTML files were found but ignores hidden files and\n        directories (i.e. those whose names start with a dot)::\n\n            import os\n            import pygtrie\n\n            t = pygtrie.StringTrie(separator=os.sep)\n\n            # Construct a trie with all files in current directory and all\n            # of its sub-directories.  Files get set a True value.\n            # Directories are represented implicitly by being prefixes of\n            # files.\n            for root, _, files in os.walk('.'):\n                for name in files: t[os.path.join(root, name)] = True\n\n            def traverse_callback(path_conv, path, children, is_file=False):\n                if path and path[-1] != '.' and path[-1][0] == '.':\n                    # Ignore hidden directory (but accept root node and '.')\n                    return 0\n                elif is_file:\n                    print path_conv(path)\n                    return int(path[-1].endswith('.html'))\n                else:\n                    # Otherwise, it's a directory.  Traverse into children.\n                    return sum(int(is_html) for is_html in children)\n\n            print t.traverse(traverse_callback)\n\n        As documented, ignoring the children argument causes subtrie to be\n        omitted and not walked into.\n\n        In the next example, the trie is converted to a tree representation\n        where child nodes include a pointer to their parent.  As before, hidden\n        files and directories are ignored::\n\n            import os\n            import pygtrie\n\n            t = pygtrie.StringTrie(separator=os.sep)\n            for root, _, files in os.walk('.'):\n                for name in files: t[os.path.join(root, name)] = True\n\n            class File(object):\n                def __init__(self, name):\n                    self.name = name\n                    self.parent = None\n\n            class Directory(File):\n                def __init__(self, name, children):\n                    super(Directory, self).__init__(name)\n                    self._children = children\n                    for child in children:\n                        child.parent = self\n\n            def traverse_callback(path_conv, path, children, is_file=False):\n                if not path or path[-1] == '.' or path[-1][0] != '.':\n                    if is_file:\n                        return File(path[-1])\n                    children = filter(None, children)\n                    return Directory(path[-1] if path else '', children)\n\n            root = t.traverse(traverse_callback)\n\n        Note: Unlike iterators, traverse method uses stack recursion which means\n        that using it on deep tries may lead to a RuntimeError exception thrown\n        once Python's maximum recursion depth is reached.\n\n        Args:\n            node_factory: Makes opaque objects from the keys and values of the\n                trie.\n            prefix: Prefix for node to start traversal, by default starts at\n                root.\n\n        Returns:\n            Node object constructed by node_factory corresponding to the root\n            node.\n\n        \"\"\"", "\n", "node", ",", "_", "=", "self", ".", "_get_node", "(", "prefix", ")", "\n", "return", "node", ".", "traverse", "(", "\n", "node_factory", ",", "\n", "self", ".", "_key_from_path", ",", "\n", "list", "(", "self", ".", "__path_from_key", "(", "prefix", ")", ")", ",", "\n", "self", ".", "_iteritems", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.CharTrie._key_from_path": [[1201, 1203], ["None"], "methods", ["None"], ["def", "_key_from_path", "(", "self", ",", "path", ")", ":", "\n", "        ", "return", "\"\"", ".", "join", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.StringTrie.__init__": [[1230, 1251], ["kwargs.pop", "gtrie.Trie.__init__", "isinstance", "TypeError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Initialises the trie.\n\n        Except for a ``separator`` named argument, all other arguments are\n        interpreted the same way :func:`Trie.update` interprets them.\n\n        Args:\n            *args: Passed to super class initialiser.\n            **kwargs: Passed to super class initialiser.\n            separator: A separator to use when splitting keys into paths used by\n                the trie.  \"/\" is used if this argument is not specified.  This\n                named argument is not specified on the function's prototype\n                because of Python's limitations.\n        \"\"\"", "\n", "separator", "=", "kwargs", ".", "pop", "(", "\"separator\"", ",", "\"/\"", ")", "\n", "if", "not", "isinstance", "(", "separator", ",", "_basestring", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"separator must be a string\"", ")", "\n", "", "if", "not", "separator", ":", "\n", "            ", "raise", "ValueError", "(", "\"separator can not be empty\"", ")", "\n", "", "self", ".", "_separator", "=", "separator", "\n", "super", "(", "StringTrie", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.StringTrie.fromkeys": [[1252, 1260], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "fromkeys", "(", "\n", "cls", ",", "keys", ",", "value", "=", "None", ",", "separator", "=", "\"/\"", "\n", ")", ":", "# pylint: disable=arguments-differ", "\n", "        ", "trie", "=", "cls", "(", "separator", "=", "separator", ")", "\n", "for", "key", "in", "keys", ":", "\n", "            ", "trie", "[", "key", "]", "=", "value", "\n", "", "return", "trie", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.StringTrie._path_from_key": [[1261, 1263], ["key.split"], "methods", ["None"], ["", "def", "_path_from_key", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "key", ".", "split", "(", "self", ".", "_separator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.StringTrie._key_from_path": [[1264, 1266], ["gtrie.StringTrie._separator.join"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["", "def", "_key_from_path", "(", "self", ",", "path", ")", ":", "\n", "        ", "return", "self", ".", "_separator", ".", "join", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.__init__": [[1281, 1295], ["collections.MutableSet.__init__", "factory", "factory.update"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update"], ["def", "__init__", "(", "self", ",", "iterable", "=", "None", ",", "factory", "=", "Trie", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Initialises the prefix set.\n\n        Args:\n            iterable: A sequence of keys to add to the set.\n            factory: A function used to create a trie used by the\n                    :class:`pygtrie.PrefixSet`.\n            kwargs: Additional keyword arguments passed to the factory function.\n        \"\"\"", "\n", "super", "(", "PrefixSet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "trie", "=", "factory", "(", "**", "kwargs", ")", "\n", "if", "iterable", ":", "\n", "            ", "trie", ".", "update", "(", "(", "key", ",", "True", ")", "for", "key", "in", "iterable", ")", "\n", "", "self", ".", "_trie", "=", "trie", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy": [[1296, 1299], ["gtrie.PrefixSet.__class__"], "methods", ["None"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a copy of the prefix set.\"\"\"", "\n", "return", "self", ".", "__class__", "(", "self", ".", "_trie", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.clear": [[1300, 1303], ["gtrie.PrefixSet._trie.clear"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.clear"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "\"\"\"Removes all keys from the set.\"\"\"", "\n", "self", ".", "_trie", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.__contains__": [[1304, 1307], ["bool", "gtrie.PrefixSet._trie.shortest_prefix"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.shortest_prefix"], ["", "def", "__contains__", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"Checks whether set contains key or its prefix.\"\"\"", "\n", "return", "bool", "(", "self", ".", "_trie", ".", "shortest_prefix", "(", "key", ")", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.__iter__": [[1308, 1314], ["gtrie.PrefixSet._trie.iterkeys"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.iterkeys"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return iterator over all prefixes in the set.\n\n        See :func:`PrefixSet.iter` method for more info.\n        \"\"\"", "\n", "return", "self", ".", "_trie", ".", "iterkeys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.iter": [[1315, 1346], ["gtrie.PrefixSet.iter"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.iter"], ["", "def", "iter", "(", "self", ",", "prefix", "=", "_SENTINEL", ")", ":", "\n", "        ", "\"\"\"Iterates over all keys in the set optionally starting with a prefix.\n\n        Since a key does not have to be explicitly added to the set to be an\n        element of the set, this method does not iterate over all possible keys\n        that the set contains, but only over the shortest set of prefixes of all\n        the keys the set contains.\n\n        For example, if \"foo\" has been added to the set, the set contains also\n        \"foobar\", but this method will *not* iterate over \"foobar\".\n\n        If ``prefix`` argument is given, method will iterate over keys with\n        given prefix only.  The keys yielded from the function if prefix is\n        given does not have to be a subset (in mathematical sense) of the keys\n        yielded when there is not prefix.  This happens, if the set contains\n        a prefix of the given prefix.\n\n        For example, if only \"foo\" has been added to the set, iter method called\n        with no arguments will yield \"foo\" only.  However, when called with\n        \"foobar\" argument, it will yield \"foobar\" only.\n        \"\"\"", "\n", "if", "prefix", "is", "_SENTINEL", ":", "\n", "            ", "return", "iter", "(", "self", ")", "\n", "", "elif", "self", ".", "_trie", ".", "has_node", "(", "prefix", ")", ":", "\n", "            ", "return", "self", ".", "_trie", ".", "iterkeys", "(", "prefix", "=", "prefix", ")", "\n", "", "elif", "prefix", "in", "self", ":", "\n", "# Make sure the type of returned keys is consistent.", "\n", "# pylint: disable=protected-access", "\n", "            ", "return", "(", "self", ".", "_trie", ".", "_key_from_path", "(", "self", ".", "_trie", ".", "_path_from_key", "(", "prefix", ")", ")", ",", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.__len__": [[1347, 1360], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns number of keys stored in the set.\n\n        Since a key does not have to be explicitly added to the set to be an\n        element of the set, this method does not count over all possible keys\n        that the set contains (since that would be infinity), but only over the\n        shortest set of prefixes of all the keys the set contains.\n\n        For example, if \"foo\" has been added to the set, the set contains also\n        \"foobar\", but this method will *not* count \"foobar\".\n\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "_trie", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add": [[1361, 1383], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"Adds given key to the set.\n\n        If the set already contains prefix of the key being added, this\n        operation has no effect.  If the key being added is a prefix of some\n        existing keys in the set, those keys are deleted and replaced by\n        a single entry for the key being added.\n\n        For example, if the set contains key \"foo\" adding a key \"foobar\" does\n        not change anything.  On the other hand, if the set contains keys\n        \"foobar\" and \"foobaz\", adding a key \"foo\" will replace those two keys\n        with a single key \"foo\".\n\n        This makes a difference when iterating over the keys or counting number\n        of keys.  Counter intuitively, adding of a key can *decrease* size of\n        the set.\n\n        Args:\n            key: Key to add.\n        \"\"\"", "\n", "if", "key", "not", "in", "self", ":", "\n", "            ", "self", ".", "_trie", "[", "key", ":", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.discard": [[1384, 1386], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "discard", "(", "self", ",", "key", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Removing keys from PrefixSet is not implemented.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.remove": [[1387, 1389], ["NotImplementedError"], "methods", ["None"], ["", "def", "remove", "(", "self", ",", "key", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Removing keys from PrefixSet is not implemented.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.pop": [[1390, 1392], ["NotImplementedError"], "methods", ["None"], ["", "def", "pop", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Removing keys from PrefixSet is not implemented.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.__init__": [[3, 5], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "items", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.isEmpty": [[6, 8], ["None"], "methods", ["None"], ["", "def", "isEmpty", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "items", "==", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.push": [[9, 11], ["infix_conversion.Stack.items.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "push", "(", "self", ",", "item", ")", ":", "\n", "        ", "self", ".", "items", ".", "append", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.pop": [[12, 14], ["infix_conversion.Stack.items.pop"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop"], ["", "def", "pop", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "items", ".", "pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.peek": [[15, 17], ["infix_conversion.Stack.size"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size"], ["", "def", "peek", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "items", "[", "self", ".", "size", "(", ")", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size": [[18, 20], ["len"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.InfixConverter.__init__": [[23, 26], ["infix_conversion.Stack"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "stack", "=", "Stack", "(", ")", "\n", "self", ".", "precedence", "=", "{", "\"+\"", ":", "1", ",", "\"-\"", ":", "1", ",", "\"*\"", ":", "2", ",", "\"/\"", ":", "2", ",", "\"^\"", ":", "3", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.InfixConverter.hasLessOrEqualPriority": [[27, 33], ["None"], "methods", ["None"], ["", "def", "hasLessOrEqualPriority", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "if", "a", "not", "in", "self", ".", "precedence", ":", "\n", "            ", "return", "False", "\n", "", "if", "b", "not", "in", "self", ".", "precedence", ":", "\n", "            ", "return", "False", "\n", "", "return", "self", ".", "precedence", "[", "a", "]", "<=", "self", ".", "precedence", "[", "b", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.InfixConverter.isOperator": [[34, 37], ["None"], "methods", ["None"], ["", "def", "isOperator", "(", "self", ",", "x", ")", ":", "\n", "        ", "ops", "=", "[", "\"+\"", ",", "\"-\"", ",", "\"/\"", ",", "\"*\"", "]", "\n", "return", "x", "in", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.InfixConverter.isOperand": [[38, 40], ["ch.isalpha", "ch.isdigit"], "methods", ["None"], ["", "def", "isOperand", "(", "self", ",", "ch", ")", ":", "\n", "        ", "return", "ch", ".", "isalpha", "(", ")", "or", "ch", ".", "isdigit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.InfixConverter.isOpenParenthesis": [[41, 43], ["None"], "methods", ["None"], ["", "def", "isOpenParenthesis", "(", "self", ",", "ch", ")", ":", "\n", "        ", "return", "ch", "==", "\"(\"", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.InfixConverter.isCloseParenthesis": [[44, 46], ["None"], "methods", ["None"], ["", "def", "isCloseParenthesis", "(", "self", ",", "ch", ")", ":", "\n", "        ", "return", "ch", "==", "\")\"", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.InfixConverter.toPostfix": [[47, 75], ["expr.replace.replace.replace", "infix_conversion.Stack", "infix_conversion.InfixConverter.isOperand", "infix_conversion.InfixConverter.stack.isEmpty", "infix_conversion.InfixConverter.stack.pop", "infix_conversion.InfixConverter.isOpenParenthesis", "infix_conversion.InfixConverter.stack.push", "infix_conversion.InfixConverter.isCloseParenthesis", "infix_conversion.InfixConverter.stack.pop", "infix_conversion.InfixConverter.stack.push", "infix_conversion.InfixConverter.isOpenParenthesis", "infix_conversion.InfixConverter.stack.pop", "infix_conversion.InfixConverter.hasLessOrEqualPriority", "infix_conversion.InfixConverter.stack.pop", "infix_conversion.InfixConverter.stack.isEmpty", "infix_conversion.InfixConverter.stack.peek"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.InfixConverter.isOperand", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.isEmpty", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.InfixConverter.isOpenParenthesis", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.push", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.InfixConverter.isCloseParenthesis", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.push", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.InfixConverter.isOpenParenthesis", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.InfixConverter.hasLessOrEqualPriority", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.isEmpty", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.peek"], ["", "def", "toPostfix", "(", "self", ",", "expr", ")", ":", "\n", "        ", "expr", "=", "expr", ".", "replace", "(", "\" \"", ",", "\"\"", ")", "\n", "self", ".", "stack", "=", "Stack", "(", ")", "\n", "output", "=", "\"\"", "\n", "\n", "for", "c", "in", "expr", ":", "\n", "            ", "if", "self", ".", "isOperand", "(", "c", ")", ":", "\n", "                ", "output", "+=", "c", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "isOpenParenthesis", "(", "c", ")", ":", "\n", "                    ", "self", ".", "stack", ".", "push", "(", "c", ")", "\n", "output", "+=", "c", "\n", "", "elif", "self", ".", "isCloseParenthesis", "(", "c", ")", ":", "\n", "                    ", "operator", "=", "self", ".", "stack", ".", "pop", "(", ")", "\n", "while", "not", "self", ".", "isOpenParenthesis", "(", "operator", ")", ":", "\n", "                        ", "output", "+=", "operator", "\n", "operator", "=", "self", ".", "stack", ".", "pop", "(", ")", "\n", "", "output", "+=", "c", "\n", "", "else", ":", "\n", "                    ", "while", "(", "not", "self", ".", "stack", ".", "isEmpty", "(", ")", ")", "and", "self", ".", "hasLessOrEqualPriority", "(", "\n", "c", ",", "self", ".", "stack", ".", "peek", "(", ")", "\n", ")", ":", "\n", "                        ", "output", "+=", "self", ".", "stack", ".", "pop", "(", ")", "\n", "", "self", ".", "stack", ".", "push", "(", "c", ")", "\n", "\n", "", "", "", "while", "not", "self", ".", "stack", ".", "isEmpty", "(", ")", ":", "\n", "            ", "output", "+=", "self", ".", "stack", ".", "pop", "(", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.InfixConverter._reverse": [[82, 92], ["None"], "methods", ["None"], ["def", "_reverse", "(", "self", ",", "expr", ")", ":", "\n", "        ", "reverse_expr", "=", "\"\"", "\n", "for", "c", "in", "expr", "[", ":", ":", "-", "1", "]", ":", "\n", "            ", "if", "c", "==", "\"(\"", ":", "\n", "                ", "reverse_expr", "+=", "\")\"", "\n", "", "elif", "c", "==", "\")\"", ":", "\n", "                ", "reverse_expr", "+=", "\"(\"", "\n", "", "else", ":", "\n", "                ", "reverse_expr", "+=", "c", "\n", "", "", "return", "reverse_expr", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.InfixConverter._reverse_p": [[93, 103], ["None"], "methods", ["None"], ["", "def", "_reverse_p", "(", "self", ",", "expr", ")", ":", "\n", "        ", "reverse_p", "=", "\"\"", "\n", "for", "c", "in", "expr", ":", "\n", "            ", "if", "c", "==", "\"(\"", ":", "\n", "                ", "reverse_p", "+=", "\")\"", "\n", "", "elif", "c", "==", "\")\"", ":", "\n", "                ", "reverse_p", "+=", "\"(\"", "\n", "", "else", ":", "\n", "                ", "reverse_p", "+=", "c", "\n", "", "", "return", "reverse_p", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.InfixConverter.toPrefix": [[104, 109], ["infix_conversion.InfixConverter._reverse", "infix_conversion.InfixConverter.toPostfix", "infix_conversion.InfixConverter._reverse_p"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.InfixConverter._reverse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.InfixConverter.toPostfix", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.InfixConverter._reverse_p"], ["", "def", "toPrefix", "(", "self", ",", "expr", ")", ":", "\n", "        ", "reverse_expr", "=", "self", ".", "_reverse", "(", "expr", ")", "\n", "reverse_postfix", "=", "self", ".", "toPostfix", "(", "reverse_expr", ")", "\n", "real_postfix", "=", "self", ".", "_reverse_p", "(", "reverse_postfix", "[", ":", ":", "-", "1", "]", ")", "\n", "return", "real_postfix", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.InfixConverter.convert": [[110, 123], ["print", "eval", "infix_conversion.InfixConverter.toPostfix", "infix_conversion.InfixConverter.toPrefix"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.InfixConverter.toPostfix", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.InfixConverter.toPrefix"], ["", "def", "convert", "(", "self", ",", "expr", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "result", "=", "eval", "(", "expr", ")", "\n", "", "except", ":", "\n", "            ", "result", "=", "expr", "\n", "", "print", "(", "\n", "\"\"\"\n            Original expr is: {}\n            Postfix is: {}\n            Prefix is: {}\n            result is: {}\n        \"\"\"", ".", "format", "(", "\n", "expr", ",", "self", ".", "toPostfix", "(", "expr", ")", ",", "self", ".", "toPrefix", "(", "expr", ")", ",", "result", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.register": [[10, 20], ["LookupError"], "function", ["None"], ["def", "register", "(", "kind", ",", "name", ")", ":", "\n", "    ", "kind_registry", "=", "_REGISTRY", "[", "kind", "]", "\n", "\n", "def", "decorator", "(", "obj", ")", ":", "\n", "        ", "if", "name", "in", "kind_registry", ":", "\n", "            ", "raise", "LookupError", "(", "\"{} already registered as kind {}\"", ".", "format", "(", "name", ",", "kind", ")", ")", "\n", "", "kind_registry", "[", "name", "]", "=", "obj", "\n", "return", "obj", "\n", "\n", "", "return", "decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup": [[22, 29], ["isinstance", "KeyError"], "function", ["None"], ["", "def", "lookup", "(", "kind", ",", "name", ")", ":", "\n", "    ", "if", "isinstance", "(", "name", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "        ", "name", "=", "name", "[", "\"name\"", "]", "\n", "\n", "", "if", "kind", "not", "in", "_REGISTRY", ":", "\n", "        ", "raise", "KeyError", "(", "'Nothing registered under \"{}\"'", ".", "format", "(", "kind", ")", ")", "\n", "", "return", "_REGISTRY", "[", "kind", "]", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct": [[31, 33], ["registry.instantiate", "registry.lookup"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.instantiate", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup"], ["", "def", "construct", "(", "kind", ",", "config", ",", "unused_keys", "=", "(", ")", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "instantiate", "(", "lookup", "(", "kind", ",", "config", ")", ",", "config", ",", "unused_keys", "+", "(", "\"name\"", ",", ")", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.instantiate": [[35, 62], ["inspect.signature", "inspect.signature.parameters.items", "any", "list", "callable", "callable", "merged.keys", "print", "ValueError", "merged.pop", "inspect.signature.parameters.values"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.values"], ["", "def", "instantiate", "(", "callable", ",", "config", ",", "unused_keys", "=", "(", ")", ",", "**", "kwargs", ")", ":", "\n", "    ", "merged", "=", "{", "**", "config", ",", "**", "kwargs", "}", "\n", "signature", "=", "inspect", ".", "signature", "(", "callable", ")", "\n", "for", "name", ",", "param", "in", "signature", ".", "parameters", ".", "items", "(", ")", ":", "\n", "        ", "if", "param", ".", "kind", "in", "(", "\n", "inspect", ".", "Parameter", ".", "POSITIONAL_ONLY", ",", "\n", "inspect", ".", "Parameter", ".", "VAR_POSITIONAL", ",", "\n", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Unsupported kind for param {}: {}\"", ".", "format", "(", "name", ",", "param", ".", "kind", ")", "\n", ")", "\n", "\n", "", "", "if", "any", "(", "\n", "param", ".", "kind", "==", "inspect", ".", "Parameter", ".", "VAR_KEYWORD", "\n", "for", "param", "in", "signature", ".", "parameters", ".", "values", "(", ")", "\n", ")", ":", "\n", "        ", "return", "callable", "(", "**", "merged", ")", "\n", "\n", "", "missing", "=", "{", "}", "\n", "for", "key", "in", "list", "(", "merged", ".", "keys", "(", ")", ")", ":", "\n", "        ", "if", "key", "not", "in", "signature", ".", "parameters", ":", "\n", "            ", "if", "key", "not", "in", "unused_keys", ":", "\n", "                ", "missing", "[", "key", "]", "=", "merged", "[", "key", "]", "\n", "", "merged", ".", "pop", "(", "key", ")", "\n", "", "", "if", "missing", ":", "\n", "        ", "print", "(", "\"WARNING {}: superfluous {}\"", ".", "format", "(", "callable", ",", "missing", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "", "return", "callable", "(", "**", "merged", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.dataset.Dataset.__getitem__": [[21, 23], ["None"], "methods", ["None"], ["APPLY_RULE", "=", "0", "\n", "GEN_TOKEN", "=", "1", "\n", "COPY_TOKEN", "=", "2", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.dataset.Dataset.__add__": [[24, 26], ["None"], "methods", ["None"], ["GEN_COPY_TOKEN", "=", "3", "\n", "\n", "ACTION_NAMES", "=", "{", "APPLY_RULE", ":", "'APPLY_RULE'", ",", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.__init__": [[18, 21], ["open", "open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "f", "=", "open", "(", "path", ",", "'wb'", ")", "\n", "self", ".", "index_f", "=", "open", "(", "path", "+", "'.index'", ",", "'wb'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append": [[22, 26], ["indexed_file.IndexedFileWriter.f.tell", "indexed_file.IndexedFileWriter.f.write", "indexed_file.IndexedFileWriter.index_f.write", "struct.pack"], "methods", ["None"], ["", "def", "append", "(", "self", ",", "record", ")", ":", "\n", "        ", "offset", "=", "self", ".", "f", ".", "tell", "(", ")", "\n", "self", ".", "f", ".", "write", "(", "record", ")", "\n", "self", ".", "index_f", ".", "write", "(", "struct", ".", "pack", "(", "'<Q'", ",", "offset", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close": [[27, 30], ["indexed_file.IndexedFileWriter.f.close", "indexed_file.IndexedFileWriter.index_f.close"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "f", ".", "close", "(", ")", "\n", "self", ".", "index_f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileReader.__init__": [[33, 41], ["open", "indexed_file.read_index", "zip", "os.path.getsize"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.read_index"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "f", "=", "open", "(", "path", ",", "'rb'", ")", "\n", "\n", "self", ".", "index", "=", "read_index", "(", "path", "+", "'.index'", ")", "\n", "self", ".", "lengths", "=", "[", "\n", "end", "-", "start", "\n", "for", "start", ",", "end", "in", "zip", "(", "[", "0", "]", "+", "self", ".", "index", ",", "self", ".", "index", "+", "\n", "[", "os", ".", "path", ".", "getsize", "(", "path", ")", "]", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileReader.__len__": [[43, 45], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileReader.__getitem__": [[46, 52], ["indexed_file.IndexedFileReader.file.seek", "indexed_file.IndexedFileReader.file.read", "isinstance", "TypeError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.read"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# TODO: support slices", "\n", "        ", "if", "not", "isinstance", "(", "idx", ",", "int", ")", ":", "\n", "            ", "return", "TypeError", "(", "'index must be integer'", ")", "\n", "", "self", ".", "file", ".", "seek", "(", "self", ".", "index", "[", "idx", "]", ")", "\n", "return", "self", ".", "file", ".", "read", "(", "self", ".", "lengths", "[", "idx", "]", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.read_index": [[5, 15], ["open", "index_file.read", "struct.unpack", "index.append"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.read", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["def", "read_index", "(", "filename", ")", ":", "\n", "    ", "index", "=", "[", "]", "\n", "with", "open", "(", "filename", ")", "as", "index_file", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "offset", "=", "index_file", ".", "read", "(", "8", ")", "\n", "if", "not", "offset", ":", "\n", "                ", "break", "\n", "", "offset", ",", "=", "struct", ".", "unpack", "(", "'<Q'", ",", "offset", ")", "\n", "index", ".", "append", "(", "offset", ")", "\n", "", "", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.SearchState.add_token": [[35, 38], ["bpe.SearchState.prefix.append", "bpe.SearchState.tokens.delete"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["def", "add_token", "(", "self", ",", "token", ")", ":", "\n", "        ", "self", ".", "prefix", "=", "self", ".", "prefix", ".", "append", "(", "token", ")", "\n", "self", ".", "tokens", "=", "self", ".", "tokens", ".", "delete", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.SearchState.cur_token": [[39, 42], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cur_token", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tokens", "[", "self", ".", "pointer", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.SearchState.cur_pair": [[43, 48], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "cur_pair", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "pointer", "<", "len", "(", "self", ".", "tokens", ")", "-", "1", "\n", "pair", "=", "(", "self", ".", "tokens", "[", "self", ".", "pointer", "]", ",", "self", ".", "tokens", "[", "self", ".", "pointer", "+", "1", "]", ")", "\n", "return", "pair", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.SearchState.merge": [[49, 52], ["bpe.SearchState.tokens.delete", "bpe.SearchState.tokens.set"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set"], ["", "def", "merge", "(", "self", ",", "token", ")", ":", "\n", "        ", "self", ".", "tokens", "=", "self", ".", "tokens", ".", "delete", "(", "0", ")", "\n", "self", ".", "tokens", "=", "self", ".", "tokens", ".", "set", "(", "0", ",", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.SearchState.is_last_token": [[53, 55], ["len"], "methods", ["None"], ["", "def", "is_last_token", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pointer", "==", "len", "(", "self", ".", "tokens", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.SearchState.is_subprefix": [[56, 58], ["None"], "methods", ["None"], ["", "def", "is_subprefix", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state", "==", "SearchState", ".", "State", ".", "SUBPREFIX", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.SearchState.set_subprefix_state": [[59, 61], ["None"], "methods", ["None"], ["", "def", "set_subprefix_state", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "SearchState", ".", "State", ".", "SUBPREFIX", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.SearchState.unset_subprefix_state": [[62, 64], ["None"], "methods", ["None"], ["", "def", "unset_subprefix_state", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "SearchState", ".", "State", ".", "OTHER", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.SearchState.finish": [[65, 67], ["tuple"], "methods", ["None"], ["", "def", "finish", "(", "self", ")", ":", "\n", "        ", "return", "tuple", "(", "self", ".", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.SearchState.clone": [[68, 74], ["bpe.SearchState.__class__"], "methods", ["None"], ["", "def", "clone", "(", "self", ")", ":", "\n", "        ", "other", "=", "self", ".", "__class__", "(", ")", "\n", "other", ".", "tokens", "=", "self", ".", "tokens", "\n", "other", ".", "prefix", "=", "self", ".", "prefix", "\n", "other", ".", "pointer", "=", "self", ".", "pointer", "\n", "return", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.BPEncoder.__init__": [[81, 85], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tokenize_func", "=", "None", ")", ":", "\n", "        ", "self", ".", "special_symbol", "=", "SPECIAL_SYMBOL", "\n", "self", ".", "tokenize_func", "=", "tokenize_func", "\n", "self", ".", "SEG_THRESHOLD", "=", "32", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.BPEncoder.get_stats": [[86, 93], ["collections.defaultdict", "bpe.BPEncoder.tokenize_func", "range", "len"], "methods", ["None"], ["", "def", "get_stats", "(", "self", ",", "text", ")", ":", "\n", "        ", "pairs", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "for", "sent_str", "in", "text", ":", "\n", "            ", "sent", "=", "self", ".", "tokenize_func", "(", "sent_str", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "sent", ")", "-", "1", ")", ":", "\n", "                ", "pairs", "[", "sent", "[", "i", "]", ",", "sent", "[", "i", "+", "1", "]", "]", "+=", "1", "\n", "", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.BPEncoder.merge_vocab": [[94, 103], ["bpe.BPEncoder.special_symbol.join", "sent_str.replace", "new_text.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "merge_vocab", "(", "self", ",", "pair", ",", "text", ")", ":", "\n", "        ", "bigram", "=", "\" \"", ".", "join", "(", "pair", ")", "\n", "merge", "=", "self", ".", "special_symbol", ".", "join", "(", "pair", ")", "\n", "\n", "new_text", "=", "[", "]", "\n", "for", "sent_str", "in", "text", ":", "\n", "            ", "new_sent", "=", "sent_str", ".", "replace", "(", "bigram", ",", "merge", ")", "\n", "new_text", ".", "append", "(", "new_sent", ")", "\n", "", "return", "new_text", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.BPEncoder.fit": [[104, 118], ["range", "tensor2struct.utils.vocab.Vocab", "bpe.BPEncoder.get_stats", "max", "merge_table.append", "bpe.BPEncoder.merge_vocab", "set", "bpe.BPEncoder.special_symbol.join", "itertools.chain.from_iterable", "bpe.BPEncoder.tokenize_func"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.BPEncoder.get_stats", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.BPEncoder.merge_vocab", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["", "def", "fit", "(", "self", ",", "text", ":", "List", "[", "str", "]", ",", "num_iterations", "=", "20", ")", ":", "\n", "        ", "_text", "=", "text", "[", ":", "]", "\n", "\n", "merge_table", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_iterations", ")", ":", "\n", "            ", "pairs", "=", "self", ".", "get_stats", "(", "_text", ")", "\n", "best_pair", "=", "max", "(", "pairs", ",", "key", "=", "pairs", ".", "get", ")", "\n", "merge_table", ".", "append", "(", "self", ".", "special_symbol", ".", "join", "(", "best_pair", ")", ")", "\n", "\n", "_text", "=", "self", ".", "merge_vocab", "(", "best_pair", ",", "_text", ")", "\n", "\n", "", "self", ".", "merge_table", "=", "merge_table", "\n", "self", ".", "vocab", "=", "vocab", ".", "Vocab", "(", "\n", "set", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "[", "self", ".", "tokenize_func", "(", "t", ")", "for", "t", "in", "_text", "]", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.BPEncoder.apply": [[120, 169], ["tensor2struct.utils.gtrie.StringTrie", "enumerate", "pyrsistent.pvector", "pyrsistent.pvector", "sorted", "bpe.BPEncoder.tokenize_func", "heapq.heappop", "item.is_last_token", "bpe.BPEncoder.special_symbol.join", "tensor2struct.utils.gtrie.StringTrie.has_subtrie", "tensor2struct.utils.gtrie.StringTrie.has_key", "set", "bpe.SearchState", "len", "item.is_subprefix", "item.clone", "item.clone.add_token", "heapq.heappush", "item.clone", "item.clone.merge", "item.clone.set_subprefix_state", "heapq.heappush", "item.clone", "item.clone.merge", "item.clone.unset_subprefix_state", "heapq.heappush", "item.is_subprefix", "item.add_token", "results.append", "item.finish", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.SearchState.is_last_token", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.has_subtrie", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.has_key", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.SearchState.is_subprefix", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.clone", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.add_token", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.clone", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.SearchState.merge", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.SearchState.set_subprefix_state", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.clone", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.SearchState.merge", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.SearchState.unset_subprefix_state", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.SearchState.is_subprefix", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.add_token", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.finish"], ["", "def", "apply", "(", "self", ",", "sent_str", ")", ":", "\n", "        ", "\"\"\"\n        Return all the possible segmentations (different from bpe) without recursion\n        \"\"\"", "\n", "results", "=", "[", "]", "\n", "\n", "bpe_trie", "=", "gtrie", ".", "StringTrie", "(", "separator", "=", "self", ".", "special_symbol", ")", "\n", "for", "i", ",", "seg", "in", "enumerate", "(", "self", ".", "vocab", ")", ":", "\n", "            ", "bpe_trie", "[", "seg", "]", "=", "i", "\n", "\n", "", "tokens", "=", "pyrsistent", ".", "pvector", "(", "self", ".", "tokenize_func", "(", "sent_str", ")", ")", "\n", "prefix", "=", "pyrsistent", ".", "pvector", "(", ")", "\n", "queue", "=", "[", "(", "0", ",", "SearchState", "(", "tokens", "=", "tokens", ",", "prefix", "=", "prefix", ",", "pointer", "=", "0", ")", ")", "]", "\n", "while", "queue", ":", "\n", "            ", "if", "len", "(", "results", ")", ">", "self", ".", "SEG_THRESHOLD", ":", "\n", "                ", "break", "\n", "\n", "", "_", ",", "item", "=", "heapq", ".", "heappop", "(", "queue", ")", "\n", "\n", "if", "item", ".", "is_last_token", "(", ")", ":", "\n", "                ", "if", "not", "item", ".", "is_subprefix", "(", ")", ":", "\n", "                    ", "item", ".", "add_token", "(", "item", ".", "cur_token", ")", "\n", "results", ".", "append", "(", "item", ".", "finish", "(", ")", ")", "\n", "", "continue", "\n", "\n", "# option 1: skip merge for current token", "\n", "", "if", "not", "item", ".", "is_subprefix", "(", ")", ":", "\n", "                ", "_item", "=", "item", ".", "clone", "(", ")", "\n", "_item", ".", "add_token", "(", "item", ".", "cur_token", ")", "\n", "heapq", ".", "heappush", "(", "queue", ",", "(", "len", "(", "_item", ".", "prefix", ")", "+", "_item", ".", "state", ",", "_item", ")", ")", "\n", "\n", "# option 2: try to merge to next word with subprefix", "\n", "", "pair", "=", "item", ".", "cur_pair", "\n", "merge_token", "=", "self", ".", "special_symbol", ".", "join", "(", "pair", ")", "\n", "if", "bpe_trie", ".", "has_subtrie", "(", "merge_token", ")", ":", "\n", "                ", "_item", "=", "item", ".", "clone", "(", ")", "\n", "_item", ".", "merge", "(", "merge_token", ")", "\n", "_item", ".", "set_subprefix_state", "(", ")", "\n", "heapq", ".", "heappush", "(", "queue", ",", "(", "len", "(", "_item", ".", "prefix", ")", "+", "_item", ".", "state", ",", "_item", ")", ")", "\n", "\n", "# option 3: try to merge to next word with prefix", "\n", "", "if", "bpe_trie", ".", "has_key", "(", "merge_token", ")", ":", "\n", "                ", "_item", "=", "item", ".", "clone", "(", ")", "\n", "_item", ".", "merge", "(", "merge_token", ")", "\n", "_item", ".", "unset_subprefix_state", "(", ")", "\n", "heapq", ".", "heappush", "(", "queue", ",", "(", "len", "(", "_item", ".", "prefix", ")", "+", "_item", ".", "state", ",", "_item", ")", ")", "\n", "\n", "# order-preserving set", "\n", "", "", "return", "sorted", "(", "set", "(", "results", ")", ",", "key", "=", "results", ".", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.BPEncoder._apply_recur": [[170, 204], ["bpe.BPEncoder._apply_recur.recur_find"], "methods", ["None"], ["", "def", "_apply_recur", "(", "self", ",", "sent_str", ")", ":", "\n", "        ", "\"\"\"\n        Return all the possible segmentations (different from bpe)\n        \"\"\"", "\n", "results", "=", "[", "]", "\n", "\n", "def", "recur_find", "(", "_prefix", ",", "_sent_str", ",", "_pointer", ")", ":", "\n", "            ", "_sent", "=", "self", ".", "tokenize_func", "(", "_sent_str", ")", "\n", "_cur_token", "=", "_sent", "[", "_pointer", "]", "\n", "\n", "# all merges are done", "\n", "if", "_pointer", "==", "len", "(", "_sent", ")", "-", "1", ":", "\n", "                ", "_new_seg", "=", "tuple", "(", "_prefix", "[", ":", "]", "+", "[", "_cur_token", "]", ")", "\n", "results", ".", "append", "(", "tuple", "(", "_new_seg", ")", ")", "\n", "return", "\n", "\n", "# option 1: skip merge for current token", "\n", "", "if", "_cur_token", "in", "self", ".", "vocab", ":", "\n", "                ", "recur_find", "(", "_prefix", "[", ":", "]", "+", "[", "_cur_token", "]", ",", "_sent_str", ",", "_pointer", "+", "1", ")", "\n", "\n", "# option 2: try to merge", "\n", "", "pair", "=", "(", "_sent", "[", "_pointer", "]", ",", "_sent", "[", "_pointer", "+", "1", "]", ")", "\n", "merge", "=", "self", ".", "special_symbol", ".", "join", "(", "pair", ")", "\n", "if", "merge", "in", "self", ".", "vocab", ":", "\n", "                ", "bigram", "=", "\" \"", ".", "join", "(", "pair", ")", "\n", "_sent_str", "=", "_sent_str", "[", ":", "]", "\n", "_sent_str", "=", "_sent_str", ".", "replace", "(", "bigram", ",", "merge", ")", "\n", "", "else", ":", "\n", "                ", "_prefix", "=", "_prefix", "[", ":", "]", "+", "[", "_cur_token", "]", "\n", "_pointer", "+=", "1", "\n", "", "recur_find", "(", "_prefix", ",", "_sent_str", ",", "_pointer", ")", "\n", "\n", "", "recur_find", "(", "[", "]", ",", "sent_str", "[", ":", "]", ",", "0", ")", "\n", "return", "results", "\n", "# return list(set(results))", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.split_bpe_subword": [[16, 18], ["input_str.split"], "function", ["None"], ["def", "split_bpe_subword", "(", "input_str", ")", ":", "\n", "    ", "return", "input_str", ".", "split", "(", "SPECIAL_SYMBOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.bpe.is_bpe_subword": [[20, 22], ["None"], "function", ["None"], ["", "def", "is_bpe_subword", "(", "input_str", ")", ":", "\n", "    ", "return", "SPECIAL_SYMBOL", "in", "input_str", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.serialization.to_dict_with_sorted_values": [[1, 3], ["sorted", "d.items"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], ["def", "to_dict_with_sorted_values", "(", "d", ",", "key", "=", "None", ")", ":", "\n", "    ", "return", "{", "k", ":", "sorted", "(", "v", ",", "key", "=", "key", ")", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.serialization.to_dict_with_set_values": [[5, 16], ["d.items", "set", "isinstance", "hashable_v.append", "hashable_v.append", "tuple"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "to_dict_with_set_values", "(", "d", ")", ":", "\n", "    ", "result", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "hashable_v", "=", "[", "]", "\n", "for", "v_elem", "in", "v", ":", "\n", "            ", "if", "isinstance", "(", "v_elem", ",", "list", ")", ":", "\n", "                ", "hashable_v", ".", "append", "(", "tuple", "(", "v_elem", ")", ")", "\n", "", "else", ":", "\n", "                ", "hashable_v", ".", "append", "(", "v_elem", ")", "\n", "", "", "result", "[", "k", "]", "=", "set", "(", "hashable_v", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.serialization.tuplify": [[18, 22], ["tuple", "isinstance", "serialization.tuplify"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.serialization.tuplify"], ["", "def", "tuplify", "(", "x", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "x", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "return", "x", "\n", "", "return", "tuple", "(", "tuplify", "(", "elem", ")", "for", "elem", "in", "x", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.string_utils.load_jsonl": [[6, 13], ["open", "json.loads", "examples.append"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["def", "load_jsonl", "(", "filename", ")", ":", "\n", "    ", "examples", "=", "[", "]", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "_example", "=", "json", ".", "loads", "(", "line", ")", "\n", "examples", ".", "append", "(", "_example", ")", "\n", "", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.string_utils.load_jsonl_table": [[15, 22], ["dict", "open", "json.loads"], "function", ["None"], ["", "def", "load_jsonl_table", "(", "filename", ")", ":", "\n", "    ", "tables", "=", "dict", "(", ")", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "_table", "=", "json", ".", "loads", "(", "line", ")", "\n", "tables", "[", "_table", "[", "\"id\"", "]", "]", "=", "_table", "\n", "", "", "return", "tables", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.string_utils.normalize_string": [[24, 57], ["unidecode.unidecode", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub().strip", "re.sub().strip", "re.sub.replace", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub.strip", "re.sub.lower", "re.sub", "re.sub"], "function", ["None"], ["", "def", "normalize_string", "(", "string", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    These are the transformation rules used to normalize cell in column names in Sempre.  See\n    ``edu.stanford.nlp.sempre.tables.StringNormalizationUtils.characterNormalize`` and\n    ``edu.stanford.nlp.sempre.tables.TableTypeSystem.canonicalizeName``.  We reproduce those\n    rules here to normalize and canonicalize cells and columns in the same way so that we can\n    match them against constants in logical forms appropriately.\n    \"\"\"", "\n", "# Normalization rules from Sempre", "\n", "# \\u201A -> ,", "\n", "string", "=", "unidecode", "(", "string", ".", "lower", "(", ")", ")", "\n", "string", "=", "re", ".", "sub", "(", "\"\u201a\"", ",", "\",\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "\"\u201e\"", ",", "\",,\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "\"[\u00b7\u30fb]\"", ",", "\".\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "\"\u2026\"", ",", "\"...\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "\"\u02c6\"", ",", "\"^\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "\"\u02dc\"", ",", "\"~\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "\"\u2039\"", ",", "\"<\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "\"\u203a\"", ",", "\">\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "\"[\u2018\u2019\u00b4`]\"", ",", "\"'\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "\"[\u201c\u201d\u00ab\u00bb]\"", ",", "'\"'", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "\"[\u2022\u2020\u2021\u00b2\u00b3]\"", ",", "\"\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "\"[\u2010\u2011\u2013\u2014\u2212]\"", ",", "\"-\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "\"[\u00f0\u00f8\u2032\u2033\u20ac\u2044\u00aa\u03a3]\"", ",", "\"_\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "\"[\\\\u0180-\\\\u0210]\"", ",", "\"\"", ",", "string", ")", ".", "strip", "(", ")", "\n", "string", "=", "re", ".", "sub", "(", "\"[\\\\u0220-\\\\uFFFF]\"", ",", "\"\"", ",", "string", ")", ".", "strip", "(", ")", "\n", "string", "=", "string", ".", "replace", "(", "\"\\\\n\"", ",", "\"_\"", ")", "\n", "string", "=", "re", ".", "sub", "(", "\"\\\\s+\"", ",", "\" \"", ",", "string", ")", "\n", "# Canonicalization rules from Sempre.", "\n", "string", "=", "re", ".", "sub", "(", "\"[^\\\\w]\"", ",", "\"_\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "\"_+\"", ",", "\"_\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "\"_$\"", ",", "\"\"", ",", "string", ")", "\n", "return", "string", ".", "strip", "(", "\"_\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.random_state.RandomState.__init__": [[9, 15], ["random.getstate", "numpy.random.get_state", "torch.get_rng_state", "torch.cuda.get_rng_state", "range", "torch.cuda.device_count"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Optimizer.get_state"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "random_mod_state", "=", "random", ".", "getstate", "(", ")", "\n", "self", ".", "np_state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "self", ".", "torch_cpu_state", "=", "torch", ".", "get_rng_state", "(", ")", "\n", "self", ".", "torch_gpu_states", "=", "[", "\n", "torch", ".", "cuda", ".", "get_rng_state", "(", "d", ")", "for", "d", "in", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.random_state.RandomState.restore": [[17, 23], ["random.setstate", "numpy.random.set_state", "torch.set_rng_state", "enumerate", "torch.cuda.set_rng_state"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.Optimizer.set_state"], ["", "def", "restore", "(", "self", ")", ":", "\n", "        ", "random", ".", "setstate", "(", "self", ".", "random_mod_state", ")", "\n", "np", ".", "random", ".", "set_state", "(", "self", ".", "np_state", ")", "\n", "torch", ".", "set_rng_state", "(", "self", ".", "torch_cpu_state", ")", "\n", "for", "d", ",", "state", "in", "enumerate", "(", "self", ".", "torch_gpu_states", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_rng_state", "(", "state", ",", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.random_state.RandomContext.__init__": [[28, 43], ["random_state.RandomState", "random.seed", "numpy.random.seed", "random_state.RandomState", "random_state.RandomState.restore", "torch.manual_seed", "torch.manual_seed", "random.randint"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.Saver.restore"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "outside_state", "=", "RandomState", "(", ")", "\n", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "if", "seed", "is", "None", ":", "\n", "            ", "torch", ".", "manual_seed", "(", "random", ".", "randint", "(", "-", "sys", ".", "maxsize", "-", "1", ",", "sys", ".", "maxsize", ")", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "# torch.cuda.manual_seed_all is called by torch.manual_seed", "\n", "", "self", ".", "inside_state", "=", "RandomState", "(", ")", "\n", "\n", "outside_state", ".", "restore", "(", ")", "\n", "\n", "self", ".", "_active", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.random_state.RandomContext.__enter__": [[44, 53], ["random_state.RandomState", "random_state.RandomContext.inside_state.restore", "Exception"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.Saver.restore"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_active", ":", "\n", "            ", "raise", "Exception", "(", "\"RandomContext can be active only once\"", ")", "\n", "\n", "# Save current state of RNG", "\n", "", "self", ".", "outside_state", "=", "RandomState", "(", ")", "\n", "# Restore saved state of RNG for this context", "\n", "self", ".", "inside_state", ".", "restore", "(", ")", "\n", "self", ".", "_active", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.random_state.RandomContext.__exit__": [[54, 63], ["random_state.RandomState", "random_state.RandomContext.outside_state.restore"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.Saver.restore"], ["", "def", "__exit__", "(", "self", ",", "exception_type", ",", "exception_value", ",", "traceback", ")", ":", "\n", "# Save current state of RNG", "\n", "        ", "self", ".", "inside_state", "=", "RandomState", "(", ")", "\n", "\n", "# Restore state of RNG saved in __enter__", "\n", "self", ".", "outside_state", ".", "restore", "(", ")", "\n", "self", ".", "outside_state", "=", "None", "\n", "\n", "self", ".", "_active", "=", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.ArgsDict.__init__": [[20, 25], ["dict.__init__", "kwargs.items"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ArgsDict", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "self", "[", "key", "]", "=", "value", "\n", "", "self", ".", "__dict__", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.Saver.__init__": [[132, 137], ["type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "items", ",", "keep_every_n", "=", "None", ")", ":", "\n", "        ", "assert", "type", "(", "items", ")", "==", "dict", "\n", "# assert \"model\" in items", "\n", "self", ".", "_items", "=", "items", "\n", "self", ".", "_keep_every_n", "=", "keep_every_n", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.Saver.restore": [[138, 150], ["saver.load_checkpoint"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.load_checkpoint"], ["", "def", "restore", "(", "\n", "self", ",", "model_dir", ",", "map_location", "=", "None", ",", "step", "=", "None", ",", "item_keys", "=", "[", "\"model\"", ",", "\"optimizer\"", "]", "\n", ")", ":", "\n", "        ", "\"\"\"Restores model and optimizer from given directory.\n            Specify what shoud be restored\n\n        Returns:\n           Last training step for the model restored.\n        \"\"\"", "\n", "items2restore", "=", "{", "k", ":", "self", ".", "_items", "[", "k", "]", "for", "k", "in", "item_keys", "}", "\n", "last_step", "=", "load_checkpoint", "(", "items2restore", ",", "model_dir", ",", "map_location", ",", "step", ")", "\n", "return", "last_step", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.Saver.save": [[151, 159], ["saver.save_checkpoint"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.save_checkpoint"], ["", "def", "save", "(", "self", ",", "model_dir", ",", "step", ")", ":", "\n", "        ", "\"\"\"Saves model and optimizer to given directory.\n\n        Args:\n           model_dir: Model directory to save.\n           step: Current training step.\n        \"\"\"", "\n", "save_checkpoint", "(", "self", ".", "_items", ",", "step", ",", "model_dir", ",", "keep_every_n", "=", "self", ".", "_keep_every_n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.Saver.save_by_keys": [[160, 172], ["saver.save_checkpoint"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.save_checkpoint"], ["", "def", "save_by_keys", "(", "self", ",", "model_dir", ",", "step", ",", "keys", "=", "(", "\"model\"", ",", ")", ")", ":", "\n", "        ", "\"\"\"Saves model and optimizer to given directory by keys.\n\n        Args:\n           model_dir: Model directory to save.\n           step: Current training step.\n           keys: items to save\n        \"\"\"", "\n", "items", "=", "{", "}", "\n", "for", "key", "in", "keys", ":", "\n", "            ", "items", "[", "key", "]", "=", "self", ".", "_items", "[", "key", "]", "\n", "", "save_checkpoint", "(", "items", ",", "step", ",", "model_dir", ",", "keep_every_n", "=", "self", ".", "_keep_every_n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.Saver.restore_part": [[173, 183], ["saver.load_and_map_checkpoint"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.load_and_map_checkpoint"], ["", "def", "restore_part", "(", "self", ",", "other_model_dir", ",", "remap", ")", ":", "\n", "        ", "\"\"\"Restores part of the model from other directory.\n\n        Useful to initialize part of the model with another pretrained model.\n\n        Args:\n            other_model_dir: Model directory to load from.\n            remap: dict, remapping current parameters to the other model's.\n        \"\"\"", "\n", "load_and_map_checkpoint", "(", "self", ".", "_items", "[", "\"model\"", "]", ",", "other_model_dir", ",", "remap", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.remove_prefix": [[27, 35], ["x.startswith"], "function", ["None"], ["", "", "def", "remove_prefix", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    DDP parameters using prefix module.\n    \"\"\"", "\n", "if", "x", ".", "startswith", "(", "\"module.\"", ")", ":", "\n", "        ", "return", "x", "[", "7", ":", "]", "\n", "", "else", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.add_prefix": [[36, 42], ["x.startswith"], "function", ["None"], ["", "", "def", "add_prefix", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    DDP parameters using prefix module.\n    \"\"\"", "\n", "assert", "not", "x", ".", "startswith", "(", "\"module.\"", ")", "\n", "return", "\"module.\"", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.load_checkpoint": [[43, 70], ["os.path.join", "os.path.exists", "print", "torch.load", "item_dict[].state_dict", "item_dict[].state_dict.keys", "torch.load.get", "saver.remove_prefix", "item_dict[].load_state_dict", "checkpoint[].items", "logger.warn", "logger.warn"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.exists", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.remove_prefix", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], ["", "def", "load_checkpoint", "(", "item_dict", ",", "model_dir", ",", "map_location", "=", "None", ",", "step", "=", "None", ")", ":", "\n", "    ", "\"\"\" item_dict: {\"model\": model, \"opt1\": opt1, ...}\"\"\"", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"model_checkpoint\"", ")", "\n", "if", "step", "is", "not", "None", ":", "\n", "        ", "path", "+=", "\"-{:08d}\"", ".", "format", "(", "step", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "print", "(", "\"Loading model from %s\"", "%", "path", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "map_location", ")", "\n", "\n", "# remove prefix for DDP checkpoints", "\n", "checkpoint", "[", "\"model\"", "]", "=", "{", "\n", "remove_prefix", "(", "k", ")", ":", "v", "for", "(", "k", ",", "v", ")", "in", "checkpoint", "[", "\"model\"", "]", ".", "items", "(", ")", "\n", "}", "\n", "\n", "old_state_dict", "=", "item_dict", "[", "\"model\"", "]", ".", "state_dict", "(", ")", "\n", "for", "key", "in", "old_state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "if", "key", "not", "in", "checkpoint", "[", "\"model\"", "]", ":", "\n", "                ", "logger", ".", "warn", "(", "f\"Module {key} is not found in the checkpoint {path}\"", ")", "\n", "checkpoint", "[", "\"model\"", "]", "[", "key", "]", "=", "old_state_dict", "[", "key", "]", "\n", "\n", "", "", "for", "item_name", "in", "item_dict", ":", "\n", "            ", "if", "item_name", "not", "in", "checkpoint", ":", "\n", "                ", "logger", ".", "warn", "(", "f\"{item_name} is not found in the checkpoint\"", ")", "\n", "continue", "\n", "", "item_dict", "[", "item_name", "]", ".", "load_state_dict", "(", "checkpoint", "[", "item_name", "]", ")", "\n", "", "return", "checkpoint", ".", "get", "(", "\"step\"", ",", "0", ")", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.load_and_map_checkpoint": [[72, 81], ["os.path.join", "print", "torch.load", "model.state_dict", "remap.items", "model.load_state_dict", "remap.keys"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys"], ["", "def", "load_and_map_checkpoint", "(", "model", ",", "model_dir", ",", "remap", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"model_checkpoint\"", ")", "\n", "print", "(", "\"Loading parameters %s from %s\"", "%", "(", "remap", ".", "keys", "(", ")", ",", "model_dir", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ")", "\n", "new_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "name", ",", "value", "in", "remap", ".", "items", "(", ")", ":", "\n", "# TODO: smarter mapping.", "\n", "        ", "new_state_dict", "[", "name", "]", "=", "checkpoint", "[", "\"model\"", "]", "[", "value", "]", "\n", "", "model", ".", "load_state_dict", "(", "new_state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.save_checkpoint": [[83, 127], ["os.path.join", "format", "items[].state_dict", "torch.save", "os.path.exists", "os.makedirs", "items[].state_dict.keys", "items[].state_dict", "os.unlink", "os.symlink", "os.listdir", "all_checkpoints.sort", "float", "os.path.basename", "shutil.copy2", "CHECKPOINT_PATTERN.match", "int", "all_checkpoints.append", "os.unlink", "key.startswith", "CHECKPOINT_PATTERN.match.group", "os.path.join", "items[].state_dict.pop", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.save", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.exists", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop"], ["", "def", "save_checkpoint", "(", "items", ",", "step", ",", "model_dir", ",", "ignore", "=", "[", "]", ",", "keep_every_n", "=", "10000000", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "model_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "model_dir", ")", "\n", "", "path_without_step", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"model_checkpoint\"", ")", "\n", "step_padded", "=", "format", "(", "step", ",", "\"08d\"", ")", "\n", "state_dict", "=", "items", "[", "\"model\"", "]", ".", "state_dict", "(", ")", "\n", "if", "ignore", ":", "\n", "        ", "for", "key", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "for", "item", "in", "ignore", ":", "\n", "                ", "if", "key", ".", "startswith", "(", "item", ")", ":", "\n", "                    ", "state_dict", ".", "pop", "(", "key", ")", "\n", "", "", "", "", "path_with_step", "=", "\"{}-{}\"", ".", "format", "(", "path_without_step", ",", "step_padded", ")", "\n", "\n", "saved_dic", "=", "{", "}", "\n", "for", "key", "in", "items", ":", "\n", "        ", "saved_dic", "[", "key", "]", "=", "items", "[", "key", "]", ".", "state_dict", "(", ")", "\n", "", "torch", ".", "save", "(", "{", "**", "saved_dic", ",", "\"step\"", ":", "step", "}", ",", "path_with_step", ")", "\n", "\n", "try", ":", "\n", "        ", "os", ".", "unlink", "(", "path_without_step", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "        ", "pass", "\n", "", "try", ":", "\n", "        ", "os", ".", "symlink", "(", "os", ".", "path", ".", "basename", "(", "path_with_step", ")", ",", "path_without_step", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "shutil", ".", "copy2", "(", "path_with_step", ",", "path_without_step", ")", "\n", "\n", "# Cull old checkpoints.", "\n", "", "if", "keep_every_n", "is", "not", "None", ":", "\n", "        ", "all_checkpoints", "=", "[", "]", "\n", "for", "name", "in", "os", ".", "listdir", "(", "model_dir", ")", ":", "\n", "            ", "m", "=", "CHECKPOINT_PATTERN", ".", "match", "(", "name", ")", "\n", "if", "m", "is", "None", "or", "name", "==", "os", ".", "path", ".", "basename", "(", "path_with_step", ")", ":", "\n", "                ", "continue", "\n", "", "checkpoint_step", "=", "int", "(", "m", ".", "group", "(", "1", ")", ")", "\n", "all_checkpoints", ".", "append", "(", "(", "checkpoint_step", ",", "name", ")", ")", "\n", "", "all_checkpoints", ".", "sort", "(", ")", "\n", "\n", "last_step", "=", "float", "(", "\"-inf\"", ")", "\n", "for", "checkpoint_step", ",", "name", "in", "all_checkpoints", ":", "\n", "            ", "if", "checkpoint_step", "-", "last_step", ">=", "keep_every_n", ":", "\n", "                ", "last_step", "=", "checkpoint_step", "\n", "continue", "\n", "", "os", ".", "unlink", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.__init__": [[11, 14], ["str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "val", "=", "None", ",", "chs", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "val", "=", "str", "(", "val", ")", "# node label", "\n", "self", ".", "chs", "=", "chs", "# list of children of the node", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.fromPrologString": [[15, 48], ["s.rstrip.rstrip.rstrip", "len", "len", "cls", "len", "aa[].chs.append", "aa.append", "aa.pop"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop"], ["", "@", "classmethod", "\n", "def", "fromPrologString", "(", "cls", ",", "s", ")", ":", "\n", "# to be invoked as tree.TreeNode.fromPrologString(s)", "\n", "# where s is the string encoding the tree", "\n", "# The format is as follows:", "\n", "        ", "s", "=", "s", ".", "rstrip", "(", "\"\\n\"", ")", "# remove trailing newlines", "\n", "i", ",", "tmps", ",", "lens", "=", "(", "0", ",", "\"\"", ",", "len", "(", "s", ")", ")", "\n", "while", "i", "<", "lens", "and", "s", "[", "i", "]", "in", "\"-+0123456789\"", ":", "\n", "            ", "tmps", "+=", "s", "[", "i", "]", "\n", "i", "+=", "1", "\n", "", "if", "i", ">=", "lens", "or", "s", "[", "i", "]", "!=", "\" \"", ":", "\n", "            ", "i", "=", "0", "\n", "", "else", ":", "\n", "            ", "i", "+=", "1", "\n", "", "aa", "=", "[", "]", "\n", "while", "i", "<", "lens", ":", "\n", "            ", "tmps", "=", "\"\"", "\n", "while", "(", "i", "<", "lens", ")", "and", "s", "[", "i", "]", "not", "in", "(", "\"(\"", ",", "\")\"", ",", "\",\"", ")", ":", "\n", "                ", "tmps", "+=", "s", "[", "i", "]", "\n", "i", "+=", "1", "\n", "", "if", "len", "(", "tmps", ")", ">", "0", ":", "\n", "                ", "t", "=", "cls", "(", "tmps", ",", "[", "]", ")", "\n", "if", "len", "(", "aa", ")", ">", "0", ":", "\n", "                    ", "aa", "[", "-", "1", "]", ".", "chs", ".", "append", "(", "t", ")", "\n", "", "", "if", "i", "<", "lens", ":", "\n", "                ", "if", "s", "[", "i", "]", "==", "\"(\"", ":", "\n", "                    ", "aa", ".", "append", "(", "t", ")", "\n", "", "elif", "s", "[", "i", "]", "==", "\")\"", ":", "\n", "                    ", "t", "=", "aa", ".", "pop", "(", ")", "\n", "", "elif", "s", "[", "i", "]", "==", "\",\"", ":", "\n", "                    ", "pass", "\n", "", "", "i", "+=", "1", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.tostring_prolog": [[49, 66], ["enumerate", "c.tostring_prolog", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.tostring_prolog"], ["", "def", "tostring_prolog", "(", "self", ")", ":", "\n", "# returns a string in which the subtree rooted", "\n", "# at self is represented in prolog-style", "\n", "        ", "if", "not", "self", ":", "\n", "            ", "return", "\n", "", "stri", "=", "\"\"", "\n", "# if hasattr(self,'chs') and", "\n", "if", "self", ".", "chs", ":", "\n", "            ", "stri", "+=", "\"%s(\"", "%", "self", ".", "val", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "chs", ")", ":", "\n", "                ", "stri", "+=", "c", ".", "tostring_prolog", "(", ")", "\n", "if", "i", "<", "len", "(", "self", ".", "chs", ")", "-", "1", ":", "\n", "                    ", "stri", "+=", "\",\"", "\n", "", "", "stri", "+=", "\")\"", "\n", "", "else", ":", "\n", "            ", "stri", "+=", "\"%s\"", "%", "self", ".", "val", "\n", "", "return", "stri", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.__str__": [[67, 70], ["tree.TreeNode.tostring_prolog"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.tostring_prolog"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "# return the tree in prolog format", "\n", "        ", "return", "self", ".", "tostring_prolog", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.tostring_svmlight": [[71, 85], ["enumerate", "c.tostring_svmlight"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.tostring_svmlight"], ["", "def", "tostring_svmlight", "(", "self", ")", ":", "\n", "# returns a string in which the subtree rooted", "\n", "# at self is represented in svmlight-style", "\n", "        ", "if", "not", "self", ":", "\n", "            ", "return", "\n", "", "stri", "=", "\"\"", "\n", "if", "self", ".", "chs", ":", "\n", "            ", "stri", "+=", "\"(%s \"", "%", "self", ".", "val", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "chs", ")", ":", "\n", "                ", "stri", "+=", "c", ".", "tostring_svmlight", "(", ")", "\n", "", "stri", "+=", "\")\"", "\n", "", "else", ":", "\n", "            ", "stri", "+=", "\"(%s -)\"", "%", "self", ".", "val", "\n", "", "return", "stri", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getLabel": [[86, 88], ["None"], "methods", ["None"], ["", "def", "getLabel", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getChild": [[89, 91], ["None"], "methods", ["None"], ["", "def", "getChild", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "chs", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getChildren": [[92, 94], ["None"], "methods", ["None"], ["", "def", "getChildren", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "chs", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getOutdegree": [[95, 100], ["len"], "methods", ["None"], ["", "def", "getOutdegree", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ":", "\n", "            ", "return", "0", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "chs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getMaxOutdegree": [[101, 109], ["tree.TreeNode.getOutdegree", "max", "c.getMaxOutdegree"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getOutdegree", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.getMaxOutdegree"], ["", "", "def", "getMaxOutdegree", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ":", "\n", "            ", "return", "0", "\n", "", "else", ":", "\n", "            ", "m", "=", "self", ".", "getOutdegree", "(", ")", "\n", "for", "c", "in", "self", ".", "chs", ":", "\n", "                ", "m", "=", "max", "(", "m", ",", "c", ".", "getMaxOutdegree", "(", ")", ")", "\n", "", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getNodeLabelList": [[110, 118], ["p.extend", "c.getNodeLabelList"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getNodeLabelList"], ["", "def", "getNodeLabelList", "(", "self", ")", ":", "\n", "# returns the list of labels of all descendants of self", "\n", "        ", "if", "not", "self", ":", "\n", "            ", "return", "[", "]", "\n", "", "p", "=", "[", "self", ".", "val", "]", "\n", "for", "c", "in", "self", ".", "chs", ":", "\n", "            ", "p", ".", "extend", "(", "c", ".", "getNodeLabelList", "(", ")", ")", "\n", "", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.labelList": [[119, 127], ["p.extend", "c.labelList"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.labelList"], ["", "def", "labelList", "(", "self", ")", ":", "\n", "# returns the list of labels of all descendants of self", "\n", "        ", "if", "not", "self", ":", "\n", "            ", "return", "[", "]", "\n", "", "p", "=", "[", "(", "self", ".", "val", ",", "self", ")", "]", "\n", "for", "c", "in", "self", ".", "chs", ":", "\n", "            ", "p", ".", "extend", "(", "c", ".", "labelList", "(", ")", ")", "\n", "", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getProduction": [[128, 134], ["None"], "methods", ["None"], ["", "def", "getProduction", "(", "self", ")", ":", "\n", "# return the label of the node concatenated with the labels of its children", "\n", "        ", "if", "not", "self", ":", "\n", "            ", "return", "\"\"", "\n", "", "self", ".", "production", "=", "self", ".", "val", "+", "\"(\"", "+", "\",\"", ".", "join", "(", "[", "c", ".", "val", "for", "c", "in", "self", ".", "chs", "]", ")", "+", "\")\"", "\n", "return", "self", ".", "production", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.productionlist": [[135, 144], ["p.extend", "tree.TreeNode.getProduction", "c.productionlist"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.ProdSubtreeList.getProduction", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.productionlist"], ["", "def", "productionlist", "(", "self", ")", ":", "\n", "# returns the list of productions of all nodes", "\n", "# in the subtree rooted at self", "\n", "        ", "if", "not", "self", ":", "\n", "            ", "return", "[", "]", "\n", "", "p", "=", "[", "(", "self", ".", "getProduction", "(", ")", ",", "self", ")", "]", "\n", "for", "c", "in", "self", ".", "chs", ":", "\n", "            ", "p", ".", "extend", "(", "c", ".", "productionlist", "(", ")", ")", "\n", "", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getSubtreeSize": [[145, 153], ["c.getSubtreeSize"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeSize"], ["", "def", "getSubtreeSize", "(", "self", ")", ":", "\n", "# returns the number of nodes in the subtree rooted at self", "\n", "        ", "if", "not", "self", ":", "\n", "            ", "return", "0", "\n", "", "n", "=", "1", "\n", "for", "c", "in", "self", ".", "chs", ":", "\n", "            ", "n", "+=", "c", ".", "getSubtreeSize", "(", ")", "\n", "", "return", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.setSubtreeSize": [[154, 165], ["c.setSubtreeSize"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.setSubtreeSize"], ["", "def", "setSubtreeSize", "(", "self", ")", ":", "\n", "# returns the number of nodes in the subtree rooted at self", "\n", "# for each visited node A such value is stored in A.stsize", "\n", "        ", "if", "not", "self", ":", "\n", "            ", "self", ".", "stsize", "=", "0", "\n", "return", "0", "\n", "", "n", "=", "1", "\n", "for", "c", "in", "self", ".", "chs", ":", "\n", "            ", "n", "+=", "c", ".", "setSubtreeSize", "(", ")", "\n", "", "self", ".", "stsize", "=", "n", "\n", "return", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.setSubtreeRoutes": [[166, 172], ["c.setSubtreeRoutes", "str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.setSubtreeRoutes"], ["", "def", "setSubtreeRoutes", "(", "self", ",", "r", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "route", "=", "r", "\n", "i", "=", "1", "\n", "for", "c", "in", "self", ".", "chs", ":", "\n", "            ", "c", ".", "setSubtreeRoutes", "(", "r", "+", "str", "(", "i", ")", "+", "\"#\"", ")", "\n", "i", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getDepth": [[173, 178], ["hasattr", "print"], "methods", ["None"], ["", "", "def", "getDepth", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "\"depth\"", ")", ":", "\n", "            ", "print", "(", "\"ERROR: node depth has not been computed!\"", ")", "\n", "return", "\"\"", "\n", "", "return", "self", ".", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.setDepth": [[179, 187], ["c.setDepth"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.setDepth"], ["", "def", "setDepth", "(", "self", ",", "subtreerootdepth", "=", "0", ")", ":", "\n", "# compute the depth (w.r.t self) of the descendants of self", "\n", "        ", "if", "not", "self", ":", "\n", "            ", "return", "\n", "", "self", ".", "depth", "=", "subtreerootdepth", "\n", "for", "c", "in", "self", ".", "chs", ":", "\n", "            ", "c", ".", "setDepth", "(", "subtreerootdepth", "+", "1", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.height": [[188, 197], ["max", "c.height"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.height"], ["", "def", "height", "(", "self", ")", ":", "\n", "# returns the length of the longest path", "\n", "# connecting self to its farthest leaf", "\n", "        ", "if", "not", "self", ":", "\n", "            ", "return", "0", "\n", "", "p", "=", "0", "\n", "for", "c", "in", "self", ".", "chs", ":", "\n", "            ", "p", "=", "max", "(", "p", ",", "c", ".", "height", "(", ")", ")", "\n", "", "return", "p", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getSubtreeID": [[198, 200], ["None"], "methods", ["None"], ["", "def", "getSubtreeID", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "subtreeId", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getLabelFrequencies": [[201, 212], ["c.getLabelFrequencies", "c.getLabelFrequencies.keys"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.getLabelFrequencies", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys"], ["", "def", "getLabelFrequencies", "(", "self", ")", ":", "\n", "        ", "lab", "=", "{", "}", "\n", "lab", "[", "self", ".", "val", "]", "=", "1", "\n", "for", "c", "in", "self", ".", "chs", ":", "\n", "            ", "l", "=", "c", ".", "getLabelFrequencies", "(", ")", "\n", "for", "lk", "in", "l", ".", "keys", "(", ")", ":", "\n", "                ", "if", "not", "lk", "in", "lab", ":", "\n", "                    ", "lab", "[", "lk", "]", "=", "l", "[", "lk", "]", "\n", "", "else", ":", "\n", "                    ", "lab", "[", "lk", "]", "+=", "l", "[", "lk", "]", "\n", "", "", "", "return", "lab", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getHashSubtreeIdentifier": [[213, 222], ["str", "hash", "c.getHashSubtreeIdentifier"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.getHashSubtreeIdentifier"], ["", "def", "getHashSubtreeIdentifier", "(", "self", ",", "sep", ")", ":", "\n", "# compute an hash value from the label of the node", "\n", "# self and the hash values of the children of self", "\n", "        ", "if", "not", "self", ":", "\n", "            ", "return", "\n", "", "stri", "=", "self", ".", "val", "\n", "for", "c", "in", "self", ".", "chs", ":", "\n", "            ", "stri", "+=", "sep", "+", "c", ".", "getHashSubtreeIdentifier", "(", ")", "\n", "", "return", "str", "(", "hash", "(", "stri", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.setHashSubtreeIdentifier": [[223, 237], ["str", "stri.find", "print", "hash", "c.setHashSubtreeIdentifier"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.setHashSubtreeIdentifier"], ["", "def", "setHashSubtreeIdentifier", "(", "self", ",", "sep", ")", ":", "\n", "# compute an hash value from the label of the node", "\n", "# self and the hash values of the children of self", "\n", "# For each visited node A the hash value is stored", "\n", "# into A.hash", "\n", "        ", "if", "not", "self", ":", "\n", "            ", "return", "\n", "", "stri", "=", "self", ".", "val", "\n", "if", "stri", ".", "find", "(", "sep", ")", "!=", "-", "1", ":", "\n", "            ", "print", "(", "\"ERROR: identifier \"", "+", "sep", "+", "\"used in label. Please set it with setHashSep(newsep)\"", ")", "\n", "", "for", "c", "in", "self", ".", "chs", ":", "\n", "            ", "stri", "+=", "sep", "+", "c", ".", "setHashSubtreeIdentifier", "(", "sep", ")", "\n", "", "self", ".", "subtreeId", "=", "str", "(", "hash", "(", "stri", ")", ")", "\n", "return", "self", ".", "subtreeId", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.computeSubtreeIDSubtreeSizeList": [[238, 246], ["p.extend", "c.computeSubtreeIDSubtreeSizeList"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.computeSubtreeIDSubtreeSizeList"], ["", "def", "computeSubtreeIDSubtreeSizeList", "(", "self", ")", ":", "\n", "# compute a list of pairs (subtree-hash-identifiers, subtree-size)", "\n", "        ", "if", "not", "self", ":", "\n", "            ", "return", "\n", "", "p", "=", "[", "(", "self", ".", "subtreeId", ",", "self", ".", "stsize", ")", "]", "\n", "for", "c", "in", "self", ".", "chs", ":", "\n", "            ", "p", ".", "extend", "(", "c", ".", "computeSubtreeIDSubtreeSizeList", "(", ")", ")", "\n", "", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.computeSubtreeIDSubtreeSizeRouteList": [[247, 254], ["p.extend", "c.computeSubtreeIDSubtreeSizeRouteList"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.computeSubtreeIDSubtreeSizeRouteList"], ["", "def", "computeSubtreeIDSubtreeSizeRouteList", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ":", "\n", "            ", "return", "\n", "", "p", "=", "[", "(", "self", ".", "val", ",", "self", ".", "subtreeId", ",", "self", ".", "stsize", ",", "self", ".", "depth", ",", "self", ".", "route", ")", "]", "\n", "for", "c", "in", "self", ".", "chs", ":", "\n", "            ", "p", ".", "extend", "(", "c", ".", "computeSubtreeIDSubtreeSizeRouteList", "(", ")", ")", "\n", "", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.computeSubtreeIDSubtreeSizeRouteRouteHashList": [[255, 268], ["p.extend", "c.computeSubtreeIDSubtreeSizeRouteRouteHashList", "str", "hash", "str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.computeSubtreeIDSubtreeSizeRouteRouteHashList"], ["", "def", "computeSubtreeIDSubtreeSizeRouteRouteHashList", "(", "self", ",", "h", ")", ":", "\n", "        ", "if", "not", "self", ":", "\n", "            ", "return", "\n", "", "p", "=", "[", "(", "self", ".", "val", ",", "self", ".", "subtreeId", ",", "self", ".", "stsize", ",", "self", ".", "depth", ",", "self", ".", "route", ",", "h", ")", "]", "\n", "i", "=", "1", "\n", "for", "c", "in", "self", ".", "chs", ":", "\n", "            ", "p", ".", "extend", "(", "\n", "c", ".", "computeSubtreeIDSubtreeSizeRouteRouteHashList", "(", "\n", "str", "(", "hash", "(", "h", "+", "\"#\"", "+", "str", "(", "i", ")", ")", ")", "\n", ")", "\n", ")", "\n", "i", "+=", "1", "\n", "", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.computeSubtreePositionIDLabelSubtreeSizeList": [[269, 286], ["tree.TreeNode.getDepth", "p.update", "c.computeSubtreePositionIDLabelSubtreeSizeList", "str", "hash", "str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getDepth", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.computeSubtreePositionIDLabelSubtreeSizeList"], ["", "def", "computeSubtreePositionIDLabelSubtreeSizeList", "(", "self", ",", "h", ")", ":", "\n", "# compute a hash whose key is the subtree-position-identifier and the value", "\n", "# is a triplet (subtree-hash-identifiers, node depth, subtree-size)", "\n", "# A key is constructed for each node", "\n", "        ", "if", "not", "self", ":", "\n", "            ", "return", "\n", "", "p", "=", "{", "}", "\n", "p", "[", "h", "]", "=", "(", "self", ".", "subtreeId", ",", "self", ".", "getDepth", "(", ")", ",", "self", ".", "stsize", ")", "\n", "i", "=", "-", "1", "\n", "for", "c", "in", "self", ".", "chs", ":", "\n", "            ", "i", "+=", "1", "\n", "p", ".", "update", "(", "\n", "c", ".", "computeSubtreePositionIDLabelSubtreeSizeList", "(", "\n", "str", "(", "hash", "(", "h", "+", "\"#\"", "+", "str", "(", "i", ")", ")", ")", "\n", ")", "\n", ")", "\n", "", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.computeSubtreePositionIDSubtreeIDSubtreeSizeListLabel": [[287, 302], ["c.computeSubtreePositionIDSubtreeIDSubtreeSizeListLabel", "p.update", "pinv.update", "str", "hash", "str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.computeSubtreePositionIDSubtreeIDSubtreeSizeListLabel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update"], ["", "def", "computeSubtreePositionIDSubtreeIDSubtreeSizeListLabel", "(", "self", ",", "h", ")", ":", "\n", "        ", "if", "not", "self", ":", "\n", "            ", "return", "\n", "", "p", ",", "pinv", "=", "(", "{", "}", ",", "{", "}", ")", "\n", "p", "[", "h", "]", "=", "(", "self", ".", "subtreeId", ",", "self", ".", "stsize", ")", "\n", "pinv", "[", "self", ".", "subtreeId", "]", "=", "h", "\n", "i", "=", "-", "1", "\n", "for", "c", "in", "self", ".", "chs", ":", "\n", "            ", "i", "+=", "1", "\n", "(", "tmpp", ",", "tmppinv", ")", "=", "c", ".", "computeSubtreePositionIDSubtreeIDSubtreeSizeListLabel", "(", "\n", "str", "(", "hash", "(", "h", "+", "\"#\"", "+", "str", "(", "i", ")", ")", ")", "\n", ")", "\n", "p", ".", "update", "(", "tmpp", ")", "\n", "pinv", ".", "update", "(", "tmppinv", ")", "\n", "", "return", "(", "p", ",", "pinv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.computeSubtreeIDTreeNodeList": [[303, 310], ["p.extend", "c.computeSubtreeIDTreeNode"], "methods", ["None"], ["", "def", "computeSubtreeIDTreeNodeList", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ":", "\n", "            ", "return", "\n", "", "p", "=", "[", "(", "self", ".", "subtreeId", ",", "self", ")", "]", "\n", "for", "c", "in", "self", ".", "chs", ":", "\n", "            ", "p", ".", "extend", "(", "c", ".", "computeSubtreeIDTreeNode", "(", ")", ")", "\n", "", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.RandomTrees.__init__": [[314, 319], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", ",", "d", ",", "outdegree", ",", "nodelabels", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "self", ".", "d", "=", "d", "\n", "self", ".", "outdegree", "=", "outdegree", "\n", "self", ".", "nodelabels", "=", "nodelabels", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.RandomTrees.__newTree": [[320, 329], ["range", "tree.TreeNode", "random.random", "tree.RandomTrees.__newTree", "tree.RandomTrees.randomLabel", "chs.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.RandomTrees.__newTree", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.RandomTreesPowerLawDistribution.randomLabel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "__newTree", "(", "self", ",", "p", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">", "p", ":", "\n", "            ", "return", "None", "\n", "", "chs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "outdegree", ")", ":", "\n", "            ", "t", "=", "self", ".", "__newTree", "(", "p", "*", "self", ".", "d", ")", "\n", "if", "t", ":", "\n", "                ", "chs", ".", "append", "(", "t", ")", "\n", "", "", "return", "TreeNode", "(", "self", ".", "randomLabel", "(", ")", ",", "chs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.RandomTrees.newTree": [[330, 335], ["tree.RandomTrees.__newTree", "tree.RandomTrees.__newTree"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.RandomTrees.__newTree", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.RandomTrees.__newTree"], ["", "def", "newTree", "(", "self", ")", ":", "\n", "        ", "t", "=", "self", ".", "__newTree", "(", "self", ".", "p", ")", "\n", "while", "not", "t", ":", "\n", "            ", "t", "=", "self", ".", "__newTree", "(", "self", ".", "p", ")", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.RandomTrees.randomLabel": [[336, 338], ["random.choice"], "methods", ["None"], ["", "def", "randomLabel", "(", "self", ")", ":", "\n", "        ", "return", "random", ".", "choice", "(", "self", ".", "nodelabels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.RandomTreesPowerLawDistribution.__init__": [[344, 355], ["tree.RandomTrees.__init__", "sum", "range", "range"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", ",", "d", ",", "outdegree", ",", "numberoflabels", ")", ":", "\n", "        ", "RandomTrees", ".", "__init__", "(", "self", ",", "p", ",", "d", ",", "outdegree", ",", "[", "]", ")", "\n", "s", "=", "0.99", "\n", "# self.labelfrequency = [0]*numberoflabels", "\n", "self", ".", "nodelabels", "=", "[", "1", "/", "(", "i", "**", "s", ")", "for", "i", "in", "range", "(", "1", ",", "numberoflabels", "+", "1", ")", "]", "\n", "norm", "=", "sum", "(", "self", ".", "nodelabels", ")", "\n", "self", ".", "nodelabels", "=", "[", "x", "/", "norm", "for", "x", "in", "self", ".", "nodelabels", "]", "\n", "cpd", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "numberoflabels", ")", ":", "\n", "            ", "cpd", "+=", "self", ".", "nodelabels", "[", "i", "]", "\n", "self", ".", "nodelabels", "[", "i", "]", "=", "cpd", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.RandomTreesPowerLawDistribution.randomLabel": [[356, 360], ["bisect.bisect", "random.random"], "methods", ["None"], ["", "", "def", "randomLabel", "(", "self", ")", ":", "\n", "        ", "r", "=", "bisect", ".", "bisect", "(", "self", ".", "nodelabels", ",", "random", ".", "random", "(", ")", ")", "\n", "# self.labelfrequency[r] += 1", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.__init__": [[366, 369], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "target", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "target", "=", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.fromPrologString": [[370, 383], ["cls", "tree.TreeNode.fromPrologString", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.fromPrologString"], ["", "@", "classmethod", "\n", "def", "fromPrologString", "(", "cls", ",", "s", ")", ":", "\n", "# to be invoked as tree.Tree.fromPrologString(s)", "\n", "# where s is the string encoding the tree", "\n", "# example: 12 a(b,c), not that string is not skipped, i.e., it's", "\n", "# different from 12 a(b, c)", "\n", "        ", "target", ",", "i", ",", "tmps", "=", "(", "\"\"", ",", "0", ",", "\"\"", ")", "\n", "while", "s", "[", "i", "]", "in", "\"-+0123456789\"", ":", "\n", "            ", "tmps", "+=", "s", "[", "i", "]", "\n", "i", "+=", "1", "\n", "", "if", "len", "(", "tmps", ")", ">", "0", "and", "s", "[", "i", "]", "==", "\" \"", ":", "# the target is valid", "\n", "            ", "target", "=", "tmps", "\n", "", "return", "cls", "(", "TreeNode", ".", "fromPrologString", "(", "s", ")", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.deleteRootTreeNode": [[384, 386], ["None"], "methods", ["None"], ["", "def", "deleteRootTreeNode", "(", "self", ")", ":", "\n", "        ", "self", ".", "root", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.getMaxDepth": [[387, 392], ["hasattr", "tree.Tree.root.height"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.height"], ["", "def", "getMaxDepth", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ".", "root", ",", "\"maxdepth\"", ")", ":", "\n", "            ", "return", "self", ".", "root", ".", "height", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "maxdepth", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.computeNodesDepth": [[393, 395], ["tree.Tree.root.setDepth"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.setDepth"], ["", "", "def", "computeNodesDepth", "(", "self", ")", ":", "\n", "        ", "self", ".", "root", ".", "setDepth", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.setMaxDepth": [[396, 398], ["tree.Tree.root.height"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.height"], ["", "def", "setMaxDepth", "(", "self", ")", ":", "\n", "        ", "self", ".", "maxdepth", "=", "self", ".", "root", ".", "height", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.getMaxOutdegree": [[399, 404], ["tree.Tree.root.getMaxOutdegree"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.getMaxOutdegree"], ["", "def", "getMaxOutdegree", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "root", ":", "\n", "            ", "return", "0", "# ERROR?", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "root", ".", "getMaxOutdegree", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.getLabelFrequencies": [[405, 410], ["tree.Tree.root.getLabelFrequencies"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.getLabelFrequencies"], ["", "", "def", "getLabelFrequencies", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "root", ":", "\n", "            ", "return", "{", "}", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "root", ".", "getLabelFrequencies", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.__str__": [[411, 416], ["str", "str", "str"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "target", ":", "\n", "            ", "return", "str", "(", "self", ".", "target", ")", "+", "\" \"", "+", "str", "(", "self", ".", "root", ")", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "self", ".", "root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.printFormat": [[417, 426], ["tree.Tree.root.tostring_prolog", "str", "tree.Tree.root.tostring_svmlight"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.tostring_prolog", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.tostring_svmlight"], ["", "", "def", "printFormat", "(", "self", ",", "frmt", "=", "\"prolog\"", ")", ":", "\n", "        ", "s", "=", "\"\"", "\n", "if", "self", ".", "target", ":", "\n", "            ", "s", "=", "str", "(", "self", ".", "target", ")", "+", "\" \"", "\n", "", "if", "frmt", "==", "\"prolog\"", ":", "\n", "            ", "s", "+=", "self", ".", "root", ".", "tostring_prolog", "(", ")", "\n", "", "elif", "frmt", "==", "\"svmlight\"", ":", "\n", "            ", "s", "+=", "\"|BT| \"", "+", "self", ".", "root", ".", "tostring_svmlight", "(", ")", "+", "\" |ET| \"", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.computeSubtreeIDs": [[427, 429], ["tree.Tree.root.setHashSubtreeIdentifier"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.setHashSubtreeIdentifier"], ["", "def", "computeSubtreeIDs", "(", "self", ",", "hashsep", ")", ":", "\n", "        ", "self", ".", "root", ".", "setHashSubtreeIdentifier", "(", "hashsep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.computeRoutes": [[430, 432], ["tree.Tree.root.setSubtreeRoutes"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.setSubtreeRoutes"], ["", "def", "computeRoutes", "(", "self", ",", "r", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "root", ".", "setSubtreeRoutes", "(", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeList.__init__": [[435, 437], ["root.computeSubtreeIDSubtreeSizeList"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.computeSubtreeIDSubtreeSizeList"], ["    ", "def", "__init__", "(", "self", ",", "root", ")", ":", "\n", "        ", "self", ".", "sids", "=", "root", ".", "computeSubtreeIDSubtreeSizeList", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeList.getSubtreeID": [[438, 440], ["None"], "methods", ["None"], ["", "def", "getSubtreeID", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "sids", "[", "i", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeList.getSubtreeSize": [[441, 443], ["None"], "methods", ["None"], ["", "def", "getSubtreeSize", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "sids", "[", "i", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeList.sort": [[444, 446], ["tree.SubtreeIDSubtreeSizeList.sids.sort"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort"], ["", "def", "sort", "(", "self", ")", ":", "\n", "        ", "self", ".", "sids", ".", "sort", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeList.__len__": [[447, 449], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.ProdSubtreeList.__init__": [[452, 454], ["root.productionlist"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.productionlist"], ["    ", "def", "__init__", "(", "self", ",", "root", ")", ":", "\n", "        ", "self", ".", "prodorderedlist", "=", "root", ".", "productionlist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.ProdSubtreeList.getProduction": [[455, 457], ["None"], "methods", ["None"], ["", "def", "getProduction", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "prodorderedlist", "[", "i", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.ProdSubtreeList.getTree": [[458, 460], ["None"], "methods", ["None"], ["", "def", "getTree", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "prodorderedlist", "[", "i", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.ProdSubtreeList.sort": [[461, 464], ["tree.ProdSubtreeList.prodorderedlist.sort", "tree.ProdSubtreeList.prodorderedlist.sort", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort"], ["", "def", "sort", "(", "self", ")", ":", "\n", "        ", "self", ".", "prodorderedlist", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "self", ".", "prodorderedlist", ".", "sort", "(", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.ProdSubtreeList.__len__": [[465, 467], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "prodorderedlist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.LabelSubtreeList.__init__": [[470, 472], ["root.labelList"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.labelList"], ["    ", "def", "__init__", "(", "self", ",", "root", ")", ":", "\n", "        ", "self", ".", "labelList", "=", "root", ".", "labelList", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.LabelSubtreeList.getLabel": [[473, 475], ["None"], "methods", ["None"], ["", "def", "getLabel", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "labelList", "[", "i", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.LabelSubtreeList.getTree": [[476, 478], ["None"], "methods", ["None"], ["", "def", "getTree", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "labelList", "[", "i", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.LabelSubtreeList.sort": [[479, 481], ["tree.LabelSubtreeList.labelList.sort"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort"], ["", "def", "sort", "(", "self", ")", ":", "\n", "        ", "self", ".", "labelList", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.LabelSubtreeList.__len__": [[482, 484], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labelList", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreePositionIDLabelSubtreeSizeList.__init__": [[487, 489], ["root.computeSubtreePositionIDLabelSubtreeSizeList", "str", "hash"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.computeSubtreePositionIDLabelSubtreeSizeList"], ["    ", "def", "__init__", "(", "self", ",", "root", ")", ":", "\n", "        ", "self", ".", "sids", "=", "root", ".", "computeSubtreePositionIDLabelSubtreeSizeList", "(", "str", "(", "hash", "(", "\"0\"", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreePositionIDLabelSubtreeSizeList.getSubtreeID": [[490, 492], ["None"], "methods", ["None"], ["", "def", "getSubtreeID", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "sids", "[", "i", "]", "[", "0", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreePositionIDLabelSubtreeSizeList.getLabel": [[493, 495], ["None"], "methods", ["None"], ["", "def", "getLabel", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "sids", "[", "i", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreePositionIDLabelSubtreeSizeList.getSubtreeSize": [[496, 498], ["None"], "methods", ["None"], ["", "def", "getSubtreeSize", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "sids", "[", "i", "]", "[", "0", "]", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreePositionIDLabelSubtreeSizeList.__len__": [[499, 501], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreePositionIDSubtreeIDSubtreeSizeListLabel.__init__": [[504, 509], ["root.computeSubtreePositionIDSubtreeIDSubtreeSizeListLabel", "str", "hash"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.computeSubtreePositionIDSubtreeIDSubtreeSizeListLabel"], ["    ", "def", "__init__", "(", "self", ",", "root", ")", ":", "\n", "        ", "(", "\n", "self", ".", "sids", ",", "\n", "self", ".", "pinv", ",", "\n", ")", "=", "root", ".", "computeSubtreePositionIDSubtreeIDSubtreeSizeListLabel", "(", "str", "(", "hash", "(", "\"0\"", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreePositionIDSubtreeIDSubtreeSizeListLabel.getSubtreeID": [[510, 512], ["None"], "methods", ["None"], ["", "def", "getSubtreeID", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "sids", "[", "i", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreePositionIDSubtreeIDSubtreeSizeListLabel.getPositionID": [[513, 515], ["None"], "methods", ["None"], ["", "def", "getPositionID", "(", "self", ",", "label", ")", ":", "\n", "        ", "return", "self", ".", "pinv", "[", "label", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreePositionIDSubtreeIDSubtreeSizeListLabel.getSubtreeSize": [[516, 518], ["None"], "methods", ["None"], ["", "def", "getSubtreeSize", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "sids", "[", "i", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreePositionIDSubtreeIDSubtreeSizeListLabel.__len__": [[519, 521], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.__init__": [[525, 527], ["root.computeSubtreeIDSubtreeSizeRouteRouteHashList"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.TreeNode.computeSubtreeIDSubtreeSizeRouteRouteHashList"], ["    ", "def", "__init__", "(", "self", ",", "root", ")", ":", "\n", "        ", "self", ".", "sids", "=", "root", ".", "computeSubtreeIDSubtreeSizeRouteRouteHashList", "(", "\"0\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getLabel": [[528, 530], ["None"], "methods", ["None"], ["", "def", "getLabel", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "sids", "[", "i", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeID": [[531, 533], ["None"], "methods", ["None"], ["", "def", "getSubtreeID", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "sids", "[", "i", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeSize": [[534, 536], ["None"], "methods", ["None"], ["", "def", "getSubtreeSize", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "sids", "[", "i", "]", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getDepth": [[537, 539], ["None"], "methods", ["None"], ["", "def", "getDepth", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "sids", "[", "i", "]", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getRoute": [[540, 542], ["None"], "methods", ["None"], ["", "def", "getRoute", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "sids", "[", "i", "]", "[", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getRouteHash": [[543, 545], ["None"], "methods", ["None"], ["", "def", "getRouteHash", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "sids", "[", "i", "]", "[", "5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort": [[546, 549], ["tree.SubtreeIDSubtreeSizeRouteList.sids.sort", "tree.SubtreeIDSubtreeSizeRouteList.sids.sort"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort"], ["", "def", "sort", "(", "self", ")", ":", "\n", "        ", "self", ".", "sids", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "self", ".", "sids", ".", "sort", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.__len__": [[550, 552], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.__init__": [[556, 558], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "treeList", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "examples", "=", "treeList", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.loadFromFilePrologFormat": [[559, 566], ["open", "open.close", "tree.Dataset.examples.append", "tree.Dataset.loadExamplePrologFormat"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.loadExamplePrologFormat"], ["", "def", "loadFromFilePrologFormat", "(", "self", ",", "filename", ")", ":", "\n", "        ", "self", ".", "filename", "=", "filename", "\n", "self", ".", "examples", "=", "[", "]", "\n", "f", "=", "open", "(", "filename", ",", "\"r\"", ")", "\n", "for", "line", "in", "f", ":", "\n", "            ", "self", ".", "examples", ".", "append", "(", "self", ".", "loadExamplePrologFormat", "(", "line", ")", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.generateRandomDataset": [[567, 571], ["range", "tree.Dataset.examples.append", "tree.Tree", "randObj.newTree"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.RandomTrees.newTree"], ["", "def", "generateRandomDataset", "(", "self", ",", "randObj", ",", "numberofexamples", ")", ":", "\n", "        ", "self", ".", "examples", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "numberofexamples", ")", ":", "\n", "            ", "self", ".", "examples", ".", "append", "(", "Tree", "(", "randObj", ".", "newTree", "(", ")", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.__len__": [[581, 583], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.getExample": [[575, 577], ["None"], "methods", ["None"], ["", "def", "getExample", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "examples", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.loadExamplePrologFormat": [[578, 580], ["tree.Tree.fromPrologString"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.fromPrologString"], ["", "def", "loadExamplePrologFormat", "(", "self", ",", "line", ")", ":", "\n", "        ", "return", "Tree", ".", "fromPrologString", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.getTotalNumberOfNodes": [[584, 592], ["hasattr", "range", "len", "tree.Dataset.examples[].root.getSubtreeSize"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.getSubtreeSize"], ["", "def", "getTotalNumberOfNodes", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"totalnodes\"", ")", ":", "\n", "            ", "return", "self", ".", "totalnodes", "\n", "", "else", ":", "\n", "            ", "s", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "examples", ")", ")", ":", "\n", "                ", "s", "+=", "self", ".", "examples", "[", "i", "]", ".", "root", ".", "getSubtreeSize", "(", ")", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.setTotalNumberOfNodes": [[593, 595], ["tree.Dataset.getTotalNumberOfNodes"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.getTotalNumberOfNodes"], ["", "", "def", "setTotalNumberOfNodes", "(", "self", ")", ":", "\n", "        ", "self", ".", "totalnodes", "=", "self", ".", "getTotalNumberOfNodes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.getNodesNumberAverage": [[596, 598], ["tree.Dataset.getTotalNumberOfNodes", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.getTotalNumberOfNodes"], ["", "def", "getNodesNumberAverage", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "getTotalNumberOfNodes", "(", ")", "/", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.getNodesNumberVariance": [[599, 605], ["tree.Dataset.getNodesNumberAverage", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.getNodesNumberAverage"], ["", "def", "getNodesNumberVariance", "(", "self", ")", ":", "\n", "        ", "avg", "=", "self", ".", "getNodesNumberAverage", "(", ")", "\n", "s", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "examples", ")", ")", ":", "\n", "            ", "s", "+=", "(", "avg", "-", "len", "(", "self", ".", "examples", "[", "i", "]", ")", ")", "**", "2", "\n", "", "return", "s", "/", "(", "len", "(", "self", ".", "examples", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.getAverageMaxOutdegree": [[606, 611], ["range", "len", "tree.Dataset.examples[].getMaxOutdegree"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.getMaxOutdegree"], ["", "def", "getAverageMaxOutdegree", "(", "self", ")", ":", "\n", "        ", "o", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "examples", ")", ")", ":", "\n", "            ", "o", "+=", "self", ".", "examples", "[", "i", "]", ".", "getMaxOutdegree", "(", ")", "\n", "", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.getMaxMaxOutdegree": [[612, 617], ["range", "len", "max", "tree.Dataset.examples[].getMaxOutdegree"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.getMaxOutdegree"], ["", "def", "getMaxMaxOutdegree", "(", "self", ")", ":", "\n", "        ", "o", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "examples", ")", ")", ":", "\n", "            ", "o", "=", "max", "(", "o", ",", "self", ".", "examples", "[", "i", "]", ".", "getMaxOutdegree", "(", ")", ")", "\n", "", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.getMaxAndAverageMaxOutdegree": [[618, 625], ["range", "len", "tree.Dataset.examples[].getMaxOutdegree", "max"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.getMaxOutdegree"], ["", "def", "getMaxAndAverageMaxOutdegree", "(", "self", ")", ":", "\n", "        ", "o", ",", "m", "=", "(", "0", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "examples", ")", ")", ":", "\n", "            ", "cm", "=", "self", ".", "examples", "[", "i", "]", ".", "getMaxOutdegree", "(", ")", "\n", "o", "+=", "cm", "\n", "m", "=", "max", "(", "m", ",", "cm", ")", "\n", "", "return", "o", ",", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.random_permutation": [[626, 628], ["None"], "methods", ["None"], ["", "def", "random_permutation", "(", "self", ",", "seed", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.getLabelFrequencies": [[629, 639], ["range", "len", "tree.Dataset.examples[].getLabelFrequencies", "tree.Dataset.keys"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.getLabelFrequencies", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys"], ["", "def", "getLabelFrequencies", "(", "self", ")", ":", "\n", "        ", "lab", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "examples", ")", ")", ":", "\n", "            ", "l", "=", "self", ".", "examples", "[", "i", "]", ".", "getLabelFrequencies", "(", ")", "\n", "for", "lk", "in", "l", ".", "keys", "(", ")", ":", "\n", "                ", "if", "lk", "not", "in", "lab", ":", "\n", "                    ", "lab", "[", "lk", "]", "=", "l", "[", "lk", "]", "\n", "", "else", ":", "\n", "                    ", "lab", "[", "lk", "]", "+=", "l", "[", "lk", "]", "\n", "", "", "", "return", "lab", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.getStats": [[640, 650], ["tree.Dataset.setTotalNumberOfNodes", "tree.Dataset.getMaxAndAverageMaxOutdegree", "tree.Dataset.getNodesNumberAverage", "tree.Dataset.getTotalNumberOfNodes"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.setTotalNumberOfNodes", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.getMaxAndAverageMaxOutdegree", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.getNodesNumberAverage", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.getTotalNumberOfNodes"], ["", "def", "getStats", "(", "self", ")", ":", "\n", "        ", "self", ".", "setTotalNumberOfNodes", "(", ")", "\n", "avgo", ",", "maxo", "=", "self", ".", "getMaxAndAverageMaxOutdegree", "(", ")", "\n", "s", "=", "\"%f %d %d %f\"", "%", "(", "\n", "self", ".", "getNodesNumberAverage", "(", ")", ",", "\n", "self", ".", "getTotalNumberOfNodes", "(", ")", ",", "\n", "maxo", ",", "\n", "avgo", ",", "\n", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.printToFile": [[651, 656], ["open", "range", "open.close", "len", "open.write", "str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close"], ["", "def", "printToFile", "(", "self", ",", "filename", ")", ":", "\n", "        ", "f", "=", "open", "(", "filename", ",", "\"w\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "examples", ")", ")", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "self", ".", "examples", "[", "i", "]", ")", "+", "\"\\n\"", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Dataset.printToFileSvmlightFormat": [[657, 662], ["open", "range", "open.close", "len", "open.write", "str", "tree.Dataset.examples[].printFormat"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.printFormat"], ["", "def", "printToFileSvmlightFormat", "(", "self", ",", "filename", ")", ":", "\n", "        ", "f", "=", "open", "(", "filename", ",", "\"w\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "examples", ")", ")", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "self", ".", "examples", "[", "i", "]", ".", "printFormat", "(", "\"svmlight\"", ")", ")", "+", "\"\\n\"", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.descending": [[71, 76], ["zip", "ValueError"], "methods", ["None"], ["@", "lengths", ".", "validator", "\n", "def", "descending", "(", "self", ",", "attribute", ",", "value", ")", ":", "\n", "        ", "for", "x", ",", "y", "in", "zip", "(", "value", ",", "value", "[", "1", ":", "]", ")", ":", "\n", "            ", "if", "not", "x", ">=", "y", ":", "\n", "                ", "raise", "ValueError", "(", "\"Lengths are not descending: {}\"", ".", "format", "(", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.__attrs_post_init__": [[77, 81], ["numpy.cumsum().astype", "numpy.cumsum", "batched_sequence.PackedSequencePlus.ps.batch_sizes[].tolist"], "methods", ["None"], ["", "", "", "def", "__attrs_post_init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "__dict__", "[", "\"cum_batch_sizes\"", "]", "=", "np", ".", "cumsum", "(", "\n", "[", "0", "]", "+", "self", ".", "ps", ".", "batch_sizes", "[", ":", "-", "1", "]", ".", "tolist", "(", ")", "\n", ")", ".", "astype", "(", "np", ".", "int_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.apply": [[82, 86], ["attr.evolve", "torch.nn.utils.rnn.PackedSequence", "fn"], "methods", ["None"], ["", "def", "apply", "(", "self", ",", "fn", ")", ":", "\n", "        ", "return", "attr", ".", "evolve", "(", "\n", "self", ",", "\n", "ps", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "PackedSequence", "(", "fn", "(", "self", ".", "ps", ".", "data", ")", ",", "self", ".", "ps", ".", "batch_sizes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.apply_raw": [[88, 95], ["batched_sequence.PackedSequencePlus.pad", "fn", "torch.LongTensor().to", "torch.nn.utils.rnn.pack_padded_sequence", "attr.evolve", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.pad", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["", "def", "apply_raw", "(", "self", ",", "fn", ")", ":", "\n", "        ", "padded", ",", "_lengths", "=", "self", ".", "pad", "(", ")", "\n", "new_data", "=", "fn", "(", "padded", ")", "\n", "per_idx_t", "=", "torch", ".", "LongTensor", "(", "self", ".", "orig_to_sort", ")", ".", "to", "(", "padded", ".", "device", ")", "\n", "per_data", "=", "new_data", "[", "per_idx_t", "]", "\n", "new_ps", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "per_data", ",", "self", ".", "lengths", ",", "batch_first", "=", "True", ")", "\n", "return", "attr", ".", "evolve", "(", "self", ",", "ps", "=", "new_ps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.with_new_ps": [[96, 98], ["attr.evolve"], "methods", ["None"], ["", "def", "with_new_ps", "(", "self", ",", "ps", ")", ":", "\n", "        ", "return", "attr", ".", "evolve", "(", "self", ",", "ps", "=", "ps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.pad": [[99, 109], ["torch.nn.utils.rnn.pad_packed_sequence", "tuple"], "methods", ["None"], ["", "def", "pad", "(", "self", ",", "batch_first", "=", "True", ",", "others_to_unsort", "=", "(", ")", ",", "padding_value", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        batch_first should be true, otherwise self.sort_to_orig does not make sense\n        \"\"\"", "\n", "assert", "batch_first", "\n", "padded", ",", "seq_lengths", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "\n", "self", ".", "ps", ",", "batch_first", "=", "batch_first", ",", "padding_value", "=", "padding_value", "\n", ")", "\n", "results", "=", "padded", "[", "self", ".", "sort_to_orig", "]", ",", "[", "seq_lengths", "[", "i", "]", "for", "i", "in", "self", ".", "sort_to_orig", "]", "\n", "return", "results", "+", "tuple", "(", "t", "[", "self", ".", "sort_to_orig", "]", "for", "t", "in", "others_to_unsort", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.cuda": [[110, 114], ["batched_sequence.PackedSequencePlus.apply", "d.cuda"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.apply", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "ps", ".", "data", ".", "is_cuda", ":", "\n", "            ", "return", "self", "\n", "", "return", "self", ".", "apply", "(", "lambda", "d", ":", "d", ".", "cuda", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.raw_index": [[115, 122], ["numpy.take", "numpy.take", "numpy.all", "len"], "methods", ["None"], ["", "def", "raw_index", "(", "self", ",", "orig_batch_idx", ",", "seq_idx", ")", ":", "\n", "        ", "result", "=", "np", ".", "take", "(", "self", ".", "cum_batch_sizes", ",", "seq_idx", ")", "+", "np", ".", "take", "(", "\n", "self", ".", "sort_to_orig", ",", "orig_batch_idx", "\n", ")", "\n", "if", "self", ".", "ps", ".", "data", "is", "not", "None", ":", "\n", "            ", "assert", "np", ".", "all", "(", "result", "<", "len", "(", "self", ".", "ps", ".", "data", ")", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.select": [[123, 132], ["batched_sequence.PackedSequencePlus.raw_index", "batched_sequence.PackedSequencePlus.raw_index", "range"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.raw_index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.raw_index"], ["", "def", "select", "(", "self", ",", "orig_batch_idx", ",", "seq_idx", "=", "None", ")", ":", "\n", "        ", "if", "seq_idx", "is", "None", ":", "\n", "            ", "return", "self", ".", "ps", ".", "data", "[", "\n", "self", ".", "raw_index", "(", "\n", "orig_batch_idx", ",", "\n", "range", "(", "self", ".", "lengths", "[", "self", ".", "sort_to_orig", "[", "orig_batch_idx", "]", "]", ")", ",", "\n", ")", "\n", "]", "\n", "", "return", "self", ".", "ps", ".", "data", "[", "self", ".", "raw_index", "(", "orig_batch_idx", ",", "seq_idx", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.select_subseq": [[133, 139], ["batched_sequence.PackedSequencePlus.from_gather", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.from_gather"], ["", "def", "select_subseq", "(", "self", ",", "orig_batch_indices", ")", ":", "\n", "        ", "lengths", "=", "[", "self", ".", "lengths", "[", "self", ".", "sort_to_orig", "[", "i", "]", "]", "for", "i", "in", "orig_batch_indices", "]", "\n", "return", "self", ".", "from_gather", "(", "\n", "lengths", "=", "lengths", ",", "\n", "map_index", "=", "self", ".", "raw_index", ",", "\n", "gather_from_indices", "=", "lambda", "indices", ":", "self", ".", "ps", ".", "data", "[", "torch", ".", "LongTensor", "(", "indices", ")", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.orig_index": [[141, 146], ["numpy.searchsorted"], "methods", ["None"], ["", "def", "orig_index", "(", "self", ",", "raw_idx", ")", ":", "\n", "        ", "seq_idx", "=", "np", ".", "searchsorted", "(", "self", ".", "cum_batch_sizes", ",", "raw_idx", ",", "side", "=", "\"right\"", ")", "-", "1", "\n", "batch_idx", "=", "raw_idx", "-", "self", ".", "cum_batch_sizes", "[", "seq_idx", "]", "\n", "orig_batch_idx", "=", "self", ".", "sort_to_orig", "[", "batch_idx", "]", "\n", "return", "orig_batch_idx", ",", "seq_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.orig_batch_indices": [[147, 152], ["numpy.array", "result.extend"], "methods", ["None"], ["", "def", "orig_batch_indices", "(", "self", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "bs", "in", "self", ".", "ps", ".", "batch_sizes", ":", "\n", "            ", "result", ".", "extend", "(", "self", ".", "orig_to_sort", "[", ":", "bs", "]", ")", "\n", "", "return", "np", ".", "array", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.orig_lengths": [[153, 156], ["None"], "methods", ["None"], ["", "def", "orig_lengths", "(", "self", ")", ":", "\n", "        ", "for", "sort_idx", "in", "self", ".", "sort_to_orig", ":", "\n", "            ", "yield", "self", ".", "lengths", "[", "sort_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.expand": [[157, 181], ["v.unsqueeze().repeat().view", "numpy.repeat().tolist", "batched_sequence.PackedSequencePlus", "batched_sequence._make_packed_sequence", "v.unsqueeze().repeat", "numpy.repeat", "range", "range", "numpy.array", "v.unsqueeze", "v.dim"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence._make_packed_sequence"], ["", "", "def", "expand", "(", "self", ",", "k", ")", ":", "\n", "# Conceptually, this function does the following:", "\n", "#   Input: d1 x ...", "\n", "#   Output: d1 * k x ... where", "\n", "#     out[0] = out[1] = ... out[k],", "\n", "#     out[k + 0] = out[k + 1] = ... out[k + k],", "\n", "#   and so on.", "\n", "        ", "v", "=", "self", ".", "ps", ".", "data", "\n", "ps_data", "=", "(", "\n", "v", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "k", ",", "*", "(", "[", "1", "]", "*", "(", "v", ".", "dim", "(", ")", "-", "1", ")", ")", ")", ".", "view", "(", "-", "1", ",", "*", "v", ".", "shape", "[", "1", ":", "]", ")", "\n", ")", "\n", "batch_sizes", "=", "(", "np", ".", "array", "(", "self", ".", "ps", ".", "batch_sizes", ")", "*", "k", ")", ".", "tolist", "(", ")", "\n", "lengths", "=", "np", ".", "repeat", "(", "self", ".", "lengths", ",", "k", ")", ".", "tolist", "(", ")", "\n", "sort_to_orig", "=", "[", "\n", "exp_i", "for", "i", "in", "self", ".", "sort_to_orig", "for", "exp_i", "in", "range", "(", "i", "*", "k", ",", "i", "*", "k", "+", "k", ")", "\n", "]", "\n", "orig_to_sort", "=", "[", "\n", "exp_i", "for", "i", "in", "self", ".", "orig_to_sort", "for", "exp_i", "in", "range", "(", "i", "*", "k", ",", "i", "*", "k", "+", "k", ")", "\n", "]", "\n", "return", "PackedSequencePlus", "(", "\n", "_make_packed_sequence", "(", "ps_data", ",", "batch_sizes", ")", ",", "\n", "lengths", ",", "\n", "sort_to_orig", ",", "\n", "orig_to_sort", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.from_lists": [[183, 205], ["batched_sequence.sort_lists_by_length", "batched_sequence.batch_bounds_for_packing", "enumerate", "torch.stack", "cls", "len", "enumerate", "batched_sequence._make_packed_sequence", "item_to_tensor", "result_list.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.sort_lists_by_length", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.batch_bounds_for_packing", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence._make_packed_sequence", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "@", "classmethod", "\n", "def", "from_lists", "(", "cls", ",", "lists", ",", "item_shape", ",", "device", ",", "item_to_tensor", ")", ":", "\n", "# result = tensor_type(sum(len(lst) for lst in lists), *item_shape)", "\n", "        ", "result_list", "=", "[", "]", "\n", "\n", "sorted_lists", ",", "sort_to_orig", ",", "orig_to_sort", "=", "sort_lists_by_length", "(", "lists", ")", "\n", "lengths", "=", "[", "len", "(", "lst", ")", "for", "lst", "in", "sorted_lists", "]", "\n", "batch_bounds", "=", "batch_bounds_for_packing", "(", "lengths", ")", "\n", "idx", "=", "0", "\n", "for", "i", ",", "bound", "in", "enumerate", "(", "batch_bounds", ")", ":", "\n", "            ", "for", "batch_idx", ",", "lst", "in", "enumerate", "(", "sorted_lists", "[", ":", "bound", "]", ")", ":", "\n", "# item_to_tensor(lst[i], batch_idx, result[idx])", "\n", "                ", "embed", "=", "item_to_tensor", "(", "lst", "[", "i", "]", ",", "batch_idx", ")", "\n", "result_list", ".", "append", "(", "embed", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "", "result", "=", "torch", ".", "stack", "(", "result_list", ",", "0", ")", "\n", "return", "cls", "(", "\n", "_make_packed_sequence", "(", "result", ",", "batch_bounds", ")", ",", "\n", "lengths", ",", "\n", "sort_to_orig", ",", "\n", "orig_to_sort", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.from_gather": [[207, 226], ["batched_sequence.argsort", "batched_sequence.batch_bounds_for_packing", "enumerate", "gather_from_indices", "cls", "batched_sequence._make_packed_sequence", "indices.append", "batched_sequence.PackedSequencePlus.cat_seqs.map_index"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.argsort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.batch_bounds_for_packing", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence._make_packed_sequence", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "@", "classmethod", "\n", "def", "from_gather", "(", "cls", ",", "lengths", ",", "map_index", ",", "gather_from_indices", ")", ":", "\n", "        ", "sorted_lengths", ",", "sort_to_orig", ",", "orig_to_sort", "=", "argsort", "(", "lengths", ",", "reverse", "=", "True", ")", "\n", "batch_bounds", "=", "batch_bounds_for_packing", "(", "sorted_lengths", ")", "\n", "\n", "indices", "=", "[", "]", "\n", "for", "seq_idx", ",", "bound", "in", "enumerate", "(", "batch_bounds", ")", ":", "\n", "            ", "for", "batch_idx", "in", "orig_to_sort", "[", ":", "bound", "]", ":", "\n", "# batch_idx: index into batch, when sequences in batch are in unsorted order", "\n", "# seq_idx: index of item in sequence", "\n", "                ", "assert", "seq_idx", "<", "lengths", "[", "batch_idx", "]", "\n", "indices", ".", "append", "(", "map_index", "(", "batch_idx", ",", "seq_idx", ")", ")", "\n", "", "", "result", "=", "gather_from_indices", "(", "indices", ")", "\n", "\n", "return", "cls", "(", "\n", "_make_packed_sequence", "(", "result", ",", "batch_bounds", ")", ",", "\n", "sorted_lengths", ",", "\n", "sort_to_orig", ",", "\n", "orig_to_sort", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.cat_seqs": [[228, 267], ["len", "all", "numpy.zeros", "torch.cat", "numpy.cumsum", "range", "cls.from_gather", "list", "item_map_per_batch_item.append", "item.orig_lengths", "item.raw_index", "len", "enumerate", "range", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.from_gather", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.orig_lengths", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.raw_index"], ["", "@", "classmethod", "\n", "def", "cat_seqs", "(", "cls", ",", "items", ")", ":", "\n", "# Check that all items have the same batch size", "\n", "        ", "batch_size", "=", "len", "(", "items", "[", "0", "]", ".", "lengths", ")", "\n", "assert", "all", "(", "len", "(", "item", ".", "lengths", ")", "==", "batch_size", "for", "item", "in", "items", "[", "1", ":", "]", ")", "\n", "\n", "# Get length of each sequence after concatenation", "\n", "unsorted_concat_lengths", "=", "np", ".", "zeros", "(", "batch_size", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "item", "in", "items", ":", "\n", "            ", "unsorted_concat_lengths", "+=", "list", "(", "item", ".", "orig_lengths", "(", ")", ")", "\n", "\n", "# For each sequence in the result, figure out which item each seq_idx belongs to", "\n", "", "concat_data", "=", "torch", ".", "cat", "(", "[", "item", ".", "ps", ".", "data", "for", "item", "in", "items", "]", ",", "dim", "=", "0", ")", "\n", "concat_data_base_indices", "=", "np", ".", "cumsum", "(", "\n", "[", "0", "]", "+", "[", "item", ".", "ps", ".", "data", ".", "shape", "[", "0", "]", "for", "item", "in", "items", "]", "\n", ")", "\n", "\n", "item_map_per_batch_item", "=", "[", "]", "\n", "for", "batch_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "item_map_per_batch_item", ".", "append", "(", "\n", "[", "\n", "(", "item_idx", ",", "item", ",", "i", ")", "\n", "for", "item_idx", ",", "item", "in", "enumerate", "(", "items", ")", "\n", "for", "i", "in", "range", "(", "item", ".", "lengths", "[", "item", ".", "sort_to_orig", "[", "batch_idx", "]", "]", ")", "\n", "]", "\n", ")", "\n", "\n", "", "def", "map_index", "(", "batch_idx", ",", "seq_idx", ")", ":", "\n", "            ", "item_idx", ",", "item", ",", "seq_idx_within_item", "=", "item_map_per_batch_item", "[", "batch_idx", "]", "[", "\n", "seq_idx", "\n", "]", "\n", "return", "concat_data_base_indices", "[", "item_idx", "]", "+", "item", ".", "raw_index", "(", "\n", "batch_idx", ",", "seq_idx_within_item", "\n", ")", "\n", "\n", "", "return", "cls", ".", "from_gather", "(", "\n", "lengths", "=", "unsorted_concat_lengths", ",", "\n", "map_index", "=", "map_index", ",", "\n", "gather_from_indices", "=", "lambda", "indices", ":", "concat_data", "[", "torch", ".", "LongTensor", "(", "indices", ")", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.argsort": [[9, 24], ["zip", "tuple", "sorted", "enumerate", "sorted", "enumerate", "key", "operator.itemgetter"], "function", ["None"], ["def", "argsort", "(", "items", ",", "key", "=", "lambda", "x", ":", "x", ",", "reverse", "=", "False", ")", ":", "\n", "# sorted_items: items sorted by key, descending", "\n", "# orig_to_sort: tuple of integers, satisfies the following:", "\n", "#   tuple(items[i] for i in orig_to_sort) == sorted_items", "\n", "#   items[orig_to_sort[i]] == sorted_items[i]", "\n", "# sort_to_orig: tuple of integers, satisfies the following:", "\n", "#   tuple(sorted_items[i] for i in sort_to_orig) == items", "\n", "#   sorted_items[sort_to_orig[i]] == items[i]", "\n", "    ", "orig_to_sort", ",", "sorted_items", "=", "zip", "(", "\n", "*", "sorted", "(", "enumerate", "(", "items", ")", ",", "key", "=", "lambda", "x", ":", "key", "(", "x", "[", "1", "]", ")", ",", "reverse", "=", "reverse", ")", "\n", ")", "\n", "sort_to_orig", "=", "tuple", "(", "\n", "x", "[", "0", "]", "for", "x", "in", "sorted", "(", "enumerate", "(", "orig_to_sort", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")", "\n", ")", "\n", "return", "sorted_items", ",", "sort_to_orig", ",", "orig_to_sort", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.sort_lists_by_length": [[26, 36], ["batched_sequence.argsort"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.argsort"], ["", "def", "sort_lists_by_length", "(", "lists", ")", ":", "\n", "# Returns the following 3 items:", "\n", "# - lists_sorted: lists sorted by length of each element, descending", "\n", "# - orig_to_sort: tuple of integers, satisfies the following:", "\n", "#     tuple(lists[i] for i in orig_to_sort) == lists_sorted", "\n", "#     lists[orig_to_sort[sort_idx]] == lists_sorted[sort_idx]", "\n", "# - sort_to_orig: list of integers, satisfies the following:", "\n", "#     [lists_sorted[i] for i in sort_to_orig] == lists", "\n", "#     lists_sorted[sort_to_orig[orig_idx]] == lists[orig_idx]", "\n", "    ", "return", "argsort", "(", "lists", ",", "key", "=", "len", ",", "reverse", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.batch_bounds_for_packing": [[38, 58], ["len", "enumerate", "itertools.groupby", "result.extend", "sum", "reversed", "ValueError"], "function", ["None"], ["", "def", "batch_bounds_for_packing", "(", "lengths", ")", ":", "\n", "    ", "\"\"\"Returns how many items in batch have length >= i at step i.\n    Examples:\n      [5] -> [1, 1, 1, 1, 1]\n      [5, 5] -> [2, 2, 2, 2, 2]\n      [5, 3] -> [2, 2, 2, 1, 1]\n      [5, 4, 1, 1] -> [4, 2, 2, 2, 1]\n    \"\"\"", "\n", "\n", "last_length", "=", "0", "\n", "count", "=", "len", "(", "lengths", ")", "\n", "result", "=", "[", "]", "\n", "for", "i", ",", "(", "length", ",", "group", ")", "in", "enumerate", "(", "itertools", ".", "groupby", "(", "reversed", "(", "lengths", ")", ")", ")", ":", "\n", "# TODO: Check that things don't blow up when some lengths are 0", "\n", "        ", "if", "i", ">", "0", "and", "length", "<=", "last_length", ":", "\n", "            ", "raise", "ValueError", "(", "\"lengths must be decreasing and positive\"", ")", "\n", "", "result", ".", "extend", "(", "[", "count", "]", "*", "(", "length", "-", "last_length", ")", ")", "\n", "count", "-=", "sum", "(", "1", "for", "_", "in", "group", ")", "\n", "last_length", "=", "length", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence._make_packed_sequence": [[60, 62], ["torch.nn.utils.rnn.PackedSequence", "torch.LongTensor"], "function", ["None"], ["", "def", "_make_packed_sequence", "(", "data", ",", "batch_sizes", ")", ":", "\n", "    ", "return", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "PackedSequence", "(", "data", ",", "torch", ".", "LongTensor", "(", "batch_sizes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Sentinel.__init__": [[13, 16], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "# type: (str) -> None", "\n", "        ", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Sentinel.__repr__": [[17, 20], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "# type: () -> str", "\n", "        ", "return", "\"<\"", "+", "self", ".", "name", "+", "\">\"", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Sentinel.__lt__": [[21, 26], ["isinstance"], "methods", ["None"], ["", "def", "__lt__", "(", "self", ",", "other", ")", ":", "\n", "# type: (object) -> bool", "\n", "        ", "if", "isinstance", "(", "other", ",", "IndexedSet", ".", "Sentinel", ")", ":", "\n", "            ", "return", "self", ".", "name", "<", "other", ".", "name", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.__init__": [[34, 45], ["list.extend", "list", "len", "len", "set", "enumerate", "enumerate"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set"], ["    ", "def", "__init__", "(", "self", ",", "iterable", ",", "special_elems", "=", "(", "UNK", ",", "BOS", ",", "EOS", ")", ")", ":", "\n", "# type: (Iterable[T]) -> None", "\n", "        ", "if", "special_elems", "is", "None", ":", "\n", "            ", "elements", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "elements", "=", "list", "(", "special_elems", ")", "\n", "", "elements", ".", "extend", "(", "iterable", ")", "\n", "assert", "len", "(", "elements", ")", "==", "len", "(", "set", "(", "elements", ")", ")", "\n", "\n", "self", ".", "id_to_elem", "=", "{", "i", ":", "elem", "for", "i", ",", "elem", "in", "enumerate", "(", "elements", ")", "}", "\n", "self", ".", "elem_to_id", "=", "{", "elem", ":", "i", "for", "i", ",", "elem", "in", "enumerate", "(", "elements", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.__iter__": [[46, 50], ["range", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# type: () -> Iterator[Union[T, IndexedSet.Sentinel]]", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "yield", "self", ".", "id_to_elem", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.__contains__": [[51, 54], ["None"], "methods", ["None"], ["", "", "def", "__contains__", "(", "self", ",", "value", ")", ":", "\n", "# type: (object) -> bool", "\n", "        ", "return", "value", "in", "self", ".", "elem_to_id", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.__len__": [[55, 58], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "# type: () -> int", "\n", "        ", "return", "len", "(", "self", ".", "elem_to_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.__getitem__": [[59, 64], ["isinstance", "TypeError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "# type: (int) -> Union[T, IndexedSet.Sentinel]", "\n", "        ", "if", "isinstance", "(", "key", ",", "slice", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"Slices not supported.\"", ")", "\n", "", "return", "self", ".", "id_to_elem", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.add_token": [[65, 70], ["len"], "methods", ["None"], ["", "def", "add_token", "(", "self", ",", "token", ")", ":", "\n", "        ", "assert", "token", "not", "in", "self", ".", "elem_to_id", "\n", "token_id", "=", "len", "(", "self", ".", "id_to_elem", ")", "\n", "self", ".", "id_to_elem", "[", "token_id", "]", "=", "token", "\n", "self", ".", "elem_to_id", "[", "token", "]", "=", "token_id", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index": [[72, 78], ["None"], "methods", ["None"], ["", "def", "index", "(", "self", ",", "value", ")", ":", "\n", "# type: (T) -> int", "\n", "        ", "try", ":", "\n", "            ", "return", "self", ".", "elem_to_id", "[", "value", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "return", "self", ".", "elem_to_id", "[", "UNK", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.indices": [[79, 82], ["vocab.Vocab.index"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["", "", "def", "indices", "(", "self", ",", "values", ")", ":", "\n", "# type: (Iterable[T]) -> List[int]", "\n", "        ", "return", "[", "self", ".", "index", "(", "value", ")", "for", "value", "in", "values", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.__hash__": [[83, 86], ["id"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "# type: () -> int", "\n", "        ", "return", "id", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.load": [[87, 90], ["vocab.Vocab", "json.load", "open"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load"], ["", "@", "classmethod", "\n", "def", "load", "(", "self", ",", "in_path", ")", ":", "\n", "        ", "return", "Vocab", "(", "json", ".", "load", "(", "open", "(", "in_path", ")", ")", ",", "special_elems", "=", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.save": [[91, 94], ["open", "json.dump", "range", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.dump"], ["", "def", "save", "(", "self", ",", "out_path", ")", ":", "\n", "        ", "with", "open", "(", "out_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "[", "self", ".", "id_to_elem", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "self", ".", "id_to_elem", ")", ")", "]", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.__init__": [[97, 101], ["collections.Counter", "collections.Counter", "collections.Counter", "collections.Counter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "min_freq", "=", "None", ",", "max_count", "=", "None", ")", ":", "\n", "        ", "self", ".", "word_freq", "=", "collections", ".", "Counter", "(", ")", "\n", "self", ".", "min_freq", "=", "min_freq", "\n", "self", ".", "max_count", "=", "max_count", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.add_word": [[102, 104], ["None"], "methods", ["None"], ["", "def", "add_word", "(", "self", ",", "word", ",", "count", "=", "1", ")", ":", "\n", "        ", "self", ".", "word_freq", "[", "word", "]", "+=", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.finish": [[105, 116], ["vocab.VocabBuilder.word_freq.most_common", "vocab.Vocab", "enumerate", "sorted"], "methods", ["None"], ["", "def", "finish", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# Select the `max_count` most frequent words. If `max_count` is None, then choose all of the words.", "\n", "        ", "eligible_words_and_freqs", "=", "self", ".", "word_freq", ".", "most_common", "(", "self", ".", "max_count", ")", "\n", "if", "self", ".", "min_freq", "is", "not", "None", ":", "\n", "            ", "for", "i", ",", "(", "word", ",", "freq", ")", "in", "enumerate", "(", "eligible_words_and_freqs", ")", ":", "\n", "                ", "if", "freq", "<", "self", ".", "min_freq", ":", "\n", "                    ", "eligible_words_and_freqs", "=", "eligible_words_and_freqs", "[", ":", "i", "]", "\n", "break", "\n", "\n", "", "", "", "return", "Vocab", "(", "\n", "(", "word", "for", "word", ",", "freq", "in", "sorted", "(", "eligible_words_and_freqs", ")", ")", ",", "*", "args", ",", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.save": [[118, 121], ["open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.dump"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "word_freq", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.load": [[122, 125], ["open", "collections.Counter", "collections.Counter", "collections.Counter", "collections.Counter", "json.load"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load"], ["", "", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "self", ".", "word_freq", "=", "collections", ".", "Counter", "(", "json", ".", "load", "(", "f", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gumbel.sample_gumbel": [[9, 15], ["torch.rand().to", "torch.rand().to", "torch.log", "torch.log", "torch.rand", "torch.rand", "torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["def", "sample_gumbel", "(", "shape", ",", "device", ",", "eps", "=", "1e-20", ")", ":", "\n", "    ", "\"\"\"\n    Essentially the same as _gumbel\n    \"\"\"", "\n", "U", "=", "torch", ".", "rand", "(", "shape", ")", ".", "to", "(", "device", ")", "\n", "return", "-", "1", "*", "torch", ".", "log", "(", "-", "torch", ".", "log", "(", "U", "+", "eps", ")", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gumbel.gumbel_softmax_sample": [[17, 21], ["torch.log_softmax", "gumbel.sample_gumbel"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gumbel.sample_gumbel"], ["", "def", "gumbel_softmax_sample", "(", "logits", ",", "temperature", ")", ":", "\n", "    ", "\"\"\" Draw a sample from the Gumbel-Softmax distribution\"\"\"", "\n", "y", "=", "logits", "+", "sample_gumbel", "(", "logits", ".", "shape", ",", "logits", ".", "device", ")", "\n", "return", "F", ".", "log_softmax", "(", "y", "/", "temperature", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gumbel.gumbel_softmax": [[23, 34], ["gumbel.gumbel_softmax_sample", "gumbel_softmax_sample.size", "gumbel_softmax_sample.max", "torch.zeros_like().view", "torch.zeros_like().view", "y_hard.view.scatter_", "y_hard.view.view", "ind.view", "torch.zeros_like", "torch.zeros_like"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gumbel.gumbel_softmax_sample", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size"], ["", "def", "gumbel_softmax", "(", "logits", ",", "temperature", ",", "hard", "=", "False", ")", ":", "\n", "    ", "\"\"\" https://gist.github.com/yzh119/fd2146d2aeb329d067568a493b20172f \"\"\"", "\n", "y", "=", "gumbel_softmax_sample", "(", "logits", ",", "temperature", ")", "\n", "if", "hard", ":", "\n", "        ", "shape", "=", "y", ".", "size", "(", ")", "\n", "_", ",", "ind", "=", "y", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "y_hard", "=", "torch", ".", "zeros_like", "(", "y", ")", ".", "view", "(", "-", "1", ",", "shape", "[", "-", "1", "]", ")", "\n", "y_hard", ".", "scatter_", "(", "1", ",", "ind", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "y_hard", "=", "y_hard", ".", "view", "(", "*", "shape", ")", "\n", "y", "=", "(", "y_hard", "-", "y", ")", ".", "detach", "(", ")", "+", "y", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gumbel._gumbel": [[36, 38], ["torch.log", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["", "def", "_gumbel", "(", "u", ")", ":", "\n", "    ", "return", "-", "torch", ".", "log", "(", "-", "torch", ".", "log", "(", "u", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gumbel.gumbel_like": [[40, 42], ["gumbel._gumbel", "torch.rand_like", "torch.rand_like"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gumbel._gumbel"], ["", "def", "gumbel_like", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_gumbel", "(", "torch", ".", "rand_like", "(", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gumbel.gumbel": [[44, 46], ["gumbel._gumbel", "torch.rand", "torch.rand"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gumbel._gumbel"], ["", "def", "gumbel", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_gumbel", "(", "torch", ".", "rand", "(", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gumbel.gumbel_log_survival": [[48, 60], ["torch.exp", "torch.exp", "torch.where", "torch.where", "torch.log", "torch.log", "torch.expm1", "torch.expm1", "torch.exp", "torch.exp"], "function", ["None"], ["", "def", "gumbel_log_survival", "(", "x", ")", ":", "\n", "    ", "\"\"\"Computes log P(g > x) = log(1 - P(g < x)) = log(1 - exp(-exp(-x))) for a standard Gumbel\"\"\"", "\n", "y", "=", "torch", ".", "exp", "(", "-", "x", ")", "\n", "return", "torch", ".", "where", "(", "\n", "x", "\n", ">=", "10", ",", "# means that y < 1e-4 so O(y^6) <= 1e-24 so we can use series expansion", "\n", "-", "x", "\n", "-", "y", "/", "2", "\n", "+", "y", "**", "2", "/", "24", "\n", "-", "y", "**", "4", "\n", "/", "2880", ",", "# + O(y^6), https://www.wolframalpha.com/input/?i=log(1+-+exp(-y))", "\n", "torch", ".", "log", "(", "-", "torch", ".", "expm1", "(", "-", "torch", ".", "exp", "(", "-", "x", ")", ")", ")", ",", "# Hope for the best", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gumbel.gumbel_with_maximum": [[63, 82], ["g_phi.max", "gumbel._shift_gumbel_maximum", "gumbel.gumbel_like", "gumbel._shift_gumbel_maximum"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gumbel._shift_gumbel_maximum", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gumbel.gumbel_like", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gumbel._shift_gumbel_maximum"], ["", "def", "gumbel_with_maximum", "(", "phi", ",", "T", ",", "dim", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"\n    Samples a set of gumbels which are conditioned on having a maximum along a dimension\n    phi.max(dim)[0] should be broadcastable with the desired maximum T\n    \"\"\"", "\n", "# Gumbel with location phi", "\n", "g_phi", "=", "phi", "+", "gumbel_like", "(", "phi", ")", "\n", "Z", ",", "argmax", "=", "g_phi", ".", "max", "(", "dim", ")", "\n", "g", "=", "_shift_gumbel_maximum", "(", "g_phi", ",", "T", ",", "dim", ",", "Z", "=", "Z", ")", "\n", "CHECK_VALIDITY", "=", "True", "\n", "if", "CHECK_VALIDITY", ":", "\n", "        ", "g_inv", "=", "_shift_gumbel_maximum", "(", "g", ",", "Z", ",", "dim", ")", "\n", "try", ":", "\n", "            ", "assert", "(", "(", "(", "g_phi", "-", "g_inv", ")", "<", "1e-3", ")", "|", "(", "g_phi", "==", "g_inv", ")", ")", ".", "all", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "# TODO: look into this", "\n", "# print(f\"Invalid gumbel with maximum found: {str(e)}\")", "\n", "            ", "pass", "\n", "", "", "return", "g", ",", "argmax", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gumbel._shift_gumbel_maximum": [[84, 89], ["g_phi.max", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "T.unsqueeze", "T.unsqueeze", "torch.relu", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "u.abs", "Z.unsqueeze"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.relu"], ["", "def", "_shift_gumbel_maximum", "(", "g_phi", ",", "T", ",", "dim", "=", "-", "1", ",", "Z", "=", "None", ")", ":", "\n", "    ", "if", "Z", "is", "None", ":", "\n", "        ", "Z", ",", "_", "=", "g_phi", ".", "max", "(", "dim", ")", "\n", "", "u", "=", "T", ".", "unsqueeze", "(", "dim", ")", "-", "g_phi", "+", "torch", ".", "log1p", "(", "-", "torch", ".", "exp", "(", "g_phi", "-", "Z", ".", "unsqueeze", "(", "dim", ")", ")", ")", "\n", "return", "T", ".", "unsqueeze", "(", "dim", ")", "-", "F", ".", "relu", "(", "u", ")", "-", "torch", ".", "log1p", "(", "torch", ".", "exp", "(", "-", "u", ".", "abs", "(", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Layer.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "params", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Layer.init_updates": [[19, 21], ["None"], "methods", ["None"], ["", "def", "init_updates", "(", "self", ")", ":", "\n", "        ", "self", ".", "updates", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Layer.__call__": [[22, 24], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Layer.supports_masked_input": [[25, 30], ["None"], "methods", ["None"], ["", "def", "supports_masked_input", "(", "self", ")", ":", "\n", "        ", "''' Whether or not this layer respects the output mask of its previous layer in its calculations. If you try\n        to attach a layer that does *not* support masked_input to a layer that gives a non-None output_mask() that is\n        an error'''", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Layer.get_output_mask": [[31, 46], ["None"], "methods", ["None"], ["", "def", "get_output_mask", "(", "self", ",", "train", "=", "None", ")", ":", "\n", "        ", "'''\n        For some models (such as RNNs) you want a way of being able to mark some output data-points as\n        \"masked\", so they are not used in future calculations. In such a model, get_output_mask() should return a mask\n        of one less dimension than get_output() (so if get_output is (nb_samples, nb_timesteps, nb_dimensions), then the mask\n        is (nb_samples, nb_timesteps), with a one for every unmasked datapoint, and a zero for every masked one.\n\n        If there is *no* masking then it shall return None. For instance if you attach an Activation layer (they support masking)\n        to a layer with an output_mask, then that Activation shall also have an output_mask. If you attach it to a layer with no\n        such mask, then the Activation's get_output_mask shall return None.\n\n        Some layers have an output_mask even if their input is unmasked, notably Embedding which can turn the entry \"0\" into\n        a mask.\n        '''", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Layer.set_weights": [[47, 52], ["zip", "p.set_value", "Exception", "floatX", "p.eval", "p.eval"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.floatX"], ["", "def", "set_weights", "(", "self", ",", "weights", ")", ":", "\n", "        ", "for", "p", ",", "w", "in", "zip", "(", "self", ".", "params", ",", "weights", ")", ":", "\n", "            ", "if", "p", ".", "eval", "(", ")", ".", "shape", "!=", "w", ".", "shape", ":", "\n", "                ", "raise", "Exception", "(", "\"Layer shape %s not compatible with weight shape %s.\"", "%", "(", "p", ".", "eval", "(", ")", ".", "shape", ",", "w", ".", "shape", ")", ")", "\n", "", "p", ".", "set_value", "(", "floatX", "(", "w", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Layer.get_weights": [[53, 58], ["weights.append", "p.get_value"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "", "def", "get_weights", "(", "self", ")", ":", "\n", "        ", "weights", "=", "[", "]", "\n", "for", "p", "in", "self", ".", "params", ":", "\n", "            ", "weights", ".", "append", "(", "p", ".", "get_value", "(", ")", ")", "\n", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Layer.get_params": [[59, 61], ["None"], "methods", ["None"], ["", "def", "get_params", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Layer.set_name": [[62, 71], ["range", "len"], "methods", ["None"], ["", "def", "set_name", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "params", ")", ")", ":", "\n", "                ", "if", "self", ".", "params", "[", "i", "]", ".", "name", "is", "None", ":", "\n", "                    ", "self", ".", "params", "[", "i", "]", ".", "name", "=", "'%s_p%d'", "%", "(", "name", ",", "i", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "params", "[", "i", "]", ".", "name", "=", "name", "+", "'_'", "+", "self", ".", "params", "[", "i", "]", ".", "name", "\n", "\n", "", "", "", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.MaskedLayer.supports_masked_input": [[78, 80], ["None"], "methods", ["None"], ["def", "supports_masked_input", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Dense.__init__": [[83, 99], ["core.Layer.__init__", "nn.get", "nn.get", "nn.get", "nn.get", "theano.matrix", "theano.matrix", "core.Dense.init", "shared_zeros", "core.Dense.set_name"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Dense.set_name"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "init", "=", "'glorot_uniform'", ",", "activation", "=", "'tanh'", ",", "name", "=", "'Dense'", ")", ":", "\n", "\n", "        ", "super", "(", "Dense", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "init", "=", "initializations", ".", "get", "(", "init", ")", "\n", "self", ".", "activation", "=", "activations", ".", "get", "(", "activation", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n", "self", ".", "input", "=", "T", ".", "matrix", "(", ")", "\n", "self", ".", "W", "=", "self", ".", "init", "(", "(", "self", ".", "input_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "b", "=", "shared_zeros", "(", "(", "self", ".", "output_dim", ")", ")", "\n", "\n", "self", ".", "params", "=", "[", "self", ".", "W", ",", "self", ".", "b", "]", "\n", "\n", "if", "name", "is", "not", "None", ":", "\n", "            ", "self", ".", "set_name", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Dense.set_name": [[100, 103], ["None"], "methods", ["None"], ["", "", "def", "set_name", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "W", ".", "name", "=", "'%s_W'", "%", "name", "\n", "self", ".", "b", ".", "name", "=", "'%s_b'", "%", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Dense.__call__": [[104, 107], ["core.Dense.activation", "theano.dot", "theano.dot"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "X", ")", ":", "\n", "        ", "output", "=", "self", ".", "activation", "(", "T", ".", "dot", "(", "X", ",", "self", ".", "W", ")", "+", "self", ".", "b", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Dropout.__init__": [[110, 120], ["core.Layer.__init__", "core.Dropout.set_name"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Dense.set_name"], ["    ", "def", "__init__", "(", "self", ",", "p", ",", "srng", ",", "name", "=", "'dropout'", ")", ":", "\n", "        ", "super", "(", "Dropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "0.", "<", "p", "<", "1.", "\n", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "srng", "=", "srng", "\n", "\n", "if", "name", "is", "not", "None", ":", "\n", "            ", "self", ".", "set_name", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Dropout.__call__": [[121, 131], ["core.Dropout.srng.binomial"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "X", ",", "train_only", "=", "True", ")", ":", "\n", "        ", "retain_prob", "=", "1.", "-", "self", ".", "p", "\n", "\n", "X_train", "=", "X", "*", "self", ".", "srng", ".", "binomial", "(", "X", ".", "shape", ",", "p", "=", "retain_prob", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "X_test", "=", "X", "*", "retain_prob", "\n", "\n", "if", "train_only", ":", "\n", "            ", "return", "X_train", "\n", "", "else", ":", "\n", "            ", "return", "X_train", ",", "X_test", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.WordDropout.__init__": [[133, 138], ["core.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", ",", "srng", ",", "name", "=", "'WordDropout'", ")", ":", "\n", "        ", "super", "(", "WordDropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "srng", "=", "srng", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.WordDropout.__call__": [[139, 149], ["core.WordDropout.srng.binomial", "theano.shape_padright", "theano.shape_padright"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "X", ",", "train_only", "=", "True", ")", ":", "\n", "        ", "retain_prob", "=", "1.", "-", "self", ".", "p", "\n", "\n", "mask", "=", "self", ".", "srng", ".", "binomial", "(", "X", ".", "shape", "[", ":", "-", "1", "]", ",", "p", "=", "retain_prob", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "X_train", "=", "X", "*", "T", ".", "shape_padright", "(", "mask", ")", "\n", "\n", "if", "train_only", ":", "\n", "            ", "return", "X_train", "\n", "", "else", ":", "\n", "            ", "return", "X_train", ",", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.GRU.__init__": [[33, 68], ["core.Layer.__init__", "initializations.get", "initializations.get", "activations.get", "activations.get", "recurrent.GRU.init", "recurrent.GRU.inner_init", "shared_zeros", "recurrent.GRU.init", "recurrent.GRU.inner_init", "shared_zeros", "recurrent.GRU.init", "recurrent.GRU.inner_init", "shared_zeros", "recurrent.GRU.set_name"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Dense.set_name"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", "=", "128", ",", "\n", "init", "=", "'glorot_uniform'", ",", "inner_init", "=", "'orthogonal'", ",", "\n", "activation", "=", "'tanh'", ",", "inner_activation", "=", "'sigmoid'", ",", "\n", "return_sequences", "=", "False", ",", "name", "=", "'GRU'", ")", ":", "\n", "\n", "        ", "super", "(", "GRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "return_sequences", "=", "return_sequences", "\n", "\n", "self", ".", "init", "=", "initializations", ".", "get", "(", "init", ")", "\n", "self", ".", "inner_init", "=", "initializations", ".", "get", "(", "inner_init", ")", "\n", "self", ".", "activation", "=", "activations", ".", "get", "(", "activation", ")", "\n", "self", ".", "inner_activation", "=", "activations", ".", "get", "(", "inner_activation", ")", "\n", "\n", "self", ".", "W_z", "=", "self", ".", "init", "(", "(", "self", ".", "input_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "U_z", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "b_z", "=", "shared_zeros", "(", "(", "self", ".", "output_dim", ")", ")", "\n", "\n", "self", ".", "W_r", "=", "self", ".", "init", "(", "(", "self", ".", "input_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "U_r", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "b_r", "=", "shared_zeros", "(", "(", "self", ".", "output_dim", ")", ")", "\n", "\n", "self", ".", "W_h", "=", "self", ".", "init", "(", "(", "self", ".", "input_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "U_h", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "b_h", "=", "shared_zeros", "(", "(", "self", ".", "output_dim", ")", ")", "\n", "\n", "self", ".", "params", "=", "[", "\n", "self", ".", "W_z", ",", "self", ".", "U_z", ",", "self", ".", "b_z", ",", "\n", "self", ".", "W_r", ",", "self", ".", "U_r", ",", "self", ".", "b_r", ",", "\n", "self", ".", "W_h", ",", "self", ".", "U_h", ",", "self", ".", "b_h", ",", "\n", "]", "\n", "\n", "if", "name", "is", "not", "None", ":", "\n", "            ", "self", ".", "set_name", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.GRU._step": [[69, 81], ["recurrent.GRU.inner_activation", "recurrent.GRU.inner_activation", "recurrent.GRU.activation", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot"], "methods", ["None"], ["", "", "def", "_step", "(", "self", ",", "\n", "xz_t", ",", "xr_t", ",", "xh_t", ",", "mask_tm1", ",", "\n", "h_tm1", ",", "\n", "u_z", ",", "u_r", ",", "u_h", ")", ":", "\n", "# h_tm1 = theano.printing.Print(self.name + 'h_tm1::')(h_tm1)", "\n", "        ", "h_mask_tm1", "=", "mask_tm1", "*", "h_tm1", "\n", "# h_mask_tm1 = theano.printing.Print(self.name + 'h_mask_tm1::')(h_mask_tm1)", "\n", "z", "=", "self", ".", "inner_activation", "(", "xz_t", "+", "T", ".", "dot", "(", "h_mask_tm1", ",", "u_z", ")", ")", "\n", "r", "=", "self", ".", "inner_activation", "(", "xr_t", "+", "T", ".", "dot", "(", "h_mask_tm1", ",", "u_r", ")", ")", "\n", "hh_t", "=", "self", ".", "activation", "(", "xh_t", "+", "T", ".", "dot", "(", "r", "*", "h_mask_tm1", ",", "u_h", ")", ")", "\n", "h_t", "=", "z", "*", "h_mask_tm1", "+", "(", "1", "-", "z", ")", "*", "hh_t", "\n", "return", "h_t", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.GRU.__call__": [[82, 105], ["recurrent.GRU.get_padded_shuffled_mask", "X.dimshuffle.dimshuffle.dimshuffle", "theano.scan", "theano.scan", "theano.scan", "theano.scan", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.unbroadcast", "theano.unbroadcast", "theano.unbroadcast", "theano.unbroadcast", "outputs.dimshuffle", "alloc_zeros_matrix"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.GRUDecoder.get_padded_shuffled_mask", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.alloc_zeros_matrix"], ["", "def", "__call__", "(", "self", ",", "X", ",", "mask", "=", "None", ",", "init_state", "=", "None", ")", ":", "\n", "        ", "padded_mask", "=", "self", ".", "get_padded_shuffled_mask", "(", "mask", ",", "X", ",", "pad", "=", "1", ")", "\n", "X", "=", "X", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "\n", "x_z", "=", "T", ".", "dot", "(", "X", ",", "self", ".", "W_z", ")", "+", "self", ".", "b_z", "\n", "x_r", "=", "T", ".", "dot", "(", "X", ",", "self", ".", "W_r", ")", "+", "self", ".", "b_r", "\n", "x_h", "=", "T", ".", "dot", "(", "X", ",", "self", ".", "W_h", ")", "+", "self", ".", "b_h", "\n", "\n", "if", "init_state", ":", "\n", "# (batch_size, output_dim)", "\n", "            ", "outputs_info", "=", "T", ".", "unbroadcast", "(", "init_state", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "outputs_info", "=", "T", ".", "unbroadcast", "(", "alloc_zeros_matrix", "(", "X", ".", "shape", "[", "1", "]", ",", "self", ".", "output_dim", ")", ",", "1", ")", "\n", "\n", "", "outputs", ",", "updates", "=", "theano", ".", "scan", "(", "\n", "self", ".", "_step", ",", "\n", "sequences", "=", "[", "x_z", ",", "x_r", ",", "x_h", ",", "padded_mask", "]", ",", "\n", "outputs_info", "=", "outputs_info", ",", "\n", "non_sequences", "=", "[", "self", ".", "U_z", ",", "self", ".", "U_r", ",", "self", ".", "U_h", "]", ")", "\n", "\n", "if", "self", ".", "return_sequences", ":", "\n", "            ", "return", "outputs", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "", "return", "outputs", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.GRU.get_padded_shuffled_mask": [[106, 120], ["theano.shape_padright", "theano.shape_padright", "theano.addbroadcast", "theano.addbroadcast", "theano.concatenate.dimshuffle", "theano.concatenate.astype", "theano.ones", "theano.ones", "alloc_zeros_matrix", "theano.concatenate", "theano.concatenate"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.alloc_zeros_matrix"], ["", "def", "get_padded_shuffled_mask", "(", "self", ",", "mask", ",", "X", ",", "pad", "=", "0", ")", ":", "\n", "# mask is (nb_samples, time)", "\n", "        ", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "T", ".", "ones", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "", "mask", "=", "T", ".", "shape_padright", "(", "mask", ")", "# (nb_samples, time, 1)", "\n", "mask", "=", "T", ".", "addbroadcast", "(", "mask", ",", "-", "1", ")", "# (time, nb_samples, 1) matrix.", "\n", "mask", "=", "mask", ".", "dimshuffle", "(", "1", ",", "0", ",", "2", ")", "# (time, nb_samples, 1)", "\n", "\n", "if", "pad", ">", "0", ":", "\n", "# left-pad in time with 0", "\n", "            ", "padding", "=", "alloc_zeros_matrix", "(", "pad", ",", "mask", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "mask", "=", "T", ".", "concatenate", "(", "[", "padding", ",", "mask", "]", ",", "axis", "=", "0", ")", "\n", "", "return", "mask", ".", "astype", "(", "'int8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.GRU_4BiRNN.__init__": [[144, 179], ["core.Layer.__init__", "initializations.get", "initializations.get", "activations.get", "activations.get", "recurrent.GRU_4BiRNN.init", "recurrent.GRU_4BiRNN.inner_init", "shared_zeros", "recurrent.GRU_4BiRNN.init", "recurrent.GRU_4BiRNN.inner_init", "shared_zeros", "recurrent.GRU_4BiRNN.init", "recurrent.GRU_4BiRNN.inner_init", "shared_zeros", "recurrent.GRU_4BiRNN.set_name"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Dense.set_name"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", "=", "128", ",", "\n", "init", "=", "'glorot_uniform'", ",", "inner_init", "=", "'orthogonal'", ",", "\n", "activation", "=", "'tanh'", ",", "inner_activation", "=", "'sigmoid'", ",", "\n", "return_sequences", "=", "False", ",", "name", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "GRU_4BiRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "return_sequences", "=", "return_sequences", "\n", "\n", "self", ".", "init", "=", "initializations", ".", "get", "(", "init", ")", "\n", "self", ".", "inner_init", "=", "initializations", ".", "get", "(", "inner_init", ")", "\n", "self", ".", "activation", "=", "activations", ".", "get", "(", "activation", ")", "\n", "self", ".", "inner_activation", "=", "activations", ".", "get", "(", "inner_activation", ")", "\n", "\n", "self", ".", "W_z", "=", "self", ".", "init", "(", "(", "self", ".", "input_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "U_z", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "b_z", "=", "shared_zeros", "(", "(", "self", ".", "output_dim", ")", ")", "\n", "\n", "self", ".", "W_r", "=", "self", ".", "init", "(", "(", "self", ".", "input_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "U_r", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "b_r", "=", "shared_zeros", "(", "(", "self", ".", "output_dim", ")", ")", "\n", "\n", "self", ".", "W_h", "=", "self", ".", "init", "(", "(", "self", ".", "input_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "U_h", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "b_h", "=", "shared_zeros", "(", "(", "self", ".", "output_dim", ")", ")", "\n", "\n", "self", ".", "params", "=", "[", "\n", "self", ".", "W_z", ",", "self", ".", "U_z", ",", "self", ".", "b_z", ",", "\n", "self", ".", "W_r", ",", "self", ".", "U_r", ",", "self", ".", "b_r", ",", "\n", "self", ".", "W_h", ",", "self", ".", "U_h", ",", "self", ".", "b_h", ",", "\n", "]", "\n", "\n", "if", "name", "is", "not", "None", ":", "\n", "            ", "self", ".", "set_name", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.GRU_4BiRNN._step": [[180, 199], ["recurrent.GRU_4BiRNN.inner_activation", "recurrent.GRU_4BiRNN.inner_activation", "recurrent.GRU_4BiRNN.activation", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot"], "methods", ["None"], ["", "", "def", "_step", "(", "self", ",", "\n", "# xz_t, xr_t, xh_t, mask_tm1, mask,", "\n", "xz_t", ",", "xr_t", ",", "xh_t", ",", "mask", ",", "\n", "h_tm1", ",", "\n", "u_z", ",", "u_r", ",", "u_h", ")", ":", "\n", "# h_mask_tm1 = mask_tm1 * h_tm1", "\n", "# h_tm1 = theano.printing.Print(self.name + '::h_tm1::')(h_tm1)", "\n", "# mask = theano.printing.Print(self.name + '::mask::')(mask)", "\n", "\n", "        ", "z", "=", "self", ".", "inner_activation", "(", "xz_t", "+", "T", ".", "dot", "(", "h_tm1", ",", "u_z", ")", ")", "\n", "r", "=", "self", ".", "inner_activation", "(", "xr_t", "+", "T", ".", "dot", "(", "h_tm1", ",", "u_r", ")", ")", "\n", "hh_t", "=", "self", ".", "activation", "(", "xh_t", "+", "T", ".", "dot", "(", "r", "*", "h_tm1", ",", "u_h", ")", ")", "\n", "h_t", "=", "z", "*", "h_tm1", "+", "(", "1", "-", "z", ")", "*", "hh_t", "\n", "\n", "# mask", "\n", "h_t", "=", "(", "1", "-", "mask", ")", "*", "h_tm1", "+", "mask", "*", "h_t", "\n", "# h_t = theano.printing.Print(self.name + '::h_t::')(h_t)", "\n", "\n", "return", "h_t", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.GRU_4BiRNN.__call__": [[200, 231], ["theano.shape_padright", "theano.shape_padright", "theano.addbroadcast", "theano.addbroadcast", "theano.ones.dimshuffle", "theano.ones.astype", "X.dimshuffle.dimshuffle.dimshuffle", "theano.scan", "theano.scan", "theano.scan", "theano.scan", "theano.ones", "theano.ones", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.unbroadcast", "theano.unbroadcast", "theano.unbroadcast", "theano.unbroadcast", "outputs.dimshuffle", "alloc_zeros_matrix"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.alloc_zeros_matrix"], ["", "def", "__call__", "(", "self", ",", "X", ",", "mask", "=", "None", ",", "init_state", "=", "None", ")", ":", "\n", "        ", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "T", ".", "ones", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "", "mask", "=", "T", ".", "shape_padright", "(", "mask", ")", "# (nb_samples, time, 1)", "\n", "mask", "=", "T", ".", "addbroadcast", "(", "mask", ",", "-", "1", ")", "# (time, nb_samples, 1) matrix.", "\n", "mask", "=", "mask", ".", "dimshuffle", "(", "1", ",", "0", ",", "2", ")", "# (time, nb_samples, 1)", "\n", "mask", "=", "mask", ".", "astype", "(", "'int8'", ")", "\n", "# mask, padded_mask = self.get_padded_shuffled_mask(mask, pad=1)", "\n", "X", "=", "X", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "\n", "x_z", "=", "T", ".", "dot", "(", "X", ",", "self", ".", "W_z", ")", "+", "self", ".", "b_z", "\n", "x_r", "=", "T", ".", "dot", "(", "X", ",", "self", ".", "W_r", ")", "+", "self", ".", "b_r", "\n", "x_h", "=", "T", ".", "dot", "(", "X", ",", "self", ".", "W_h", ")", "+", "self", ".", "b_h", "\n", "\n", "if", "init_state", ":", "\n", "# (batch_size, output_dim)", "\n", "            ", "outputs_info", "=", "T", ".", "unbroadcast", "(", "init_state", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "outputs_info", "=", "T", ".", "unbroadcast", "(", "alloc_zeros_matrix", "(", "X", ".", "shape", "[", "1", "]", ",", "self", ".", "output_dim", ")", ",", "1", ")", "\n", "\n", "", "outputs", ",", "updates", "=", "theano", ".", "scan", "(", "\n", "self", ".", "_step", ",", "\n", "# sequences=[x_z, x_r, x_h, padded_mask, mask],", "\n", "sequences", "=", "[", "x_z", ",", "x_r", ",", "x_h", ",", "mask", "]", ",", "\n", "outputs_info", "=", "outputs_info", ",", "\n", "non_sequences", "=", "[", "self", ".", "U_z", ",", "self", ".", "U_r", ",", "self", ".", "U_h", "]", ")", "\n", "\n", "if", "self", ".", "return_sequences", ":", "\n", "            ", "return", "outputs", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "", "return", "outputs", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.GRU_4BiRNN.get_padded_shuffled_mask": [[232, 244], ["theano.shape_padright", "theano.shape_padright", "theano.addbroadcast", "theano.addbroadcast", "mask.dimshuffle.dimshuffle.dimshuffle", "alloc_zeros_matrix", "theano.concatenate", "theano.concatenate", "mask.dimshuffle.dimshuffle.astype", "theano.concatenate.astype"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.alloc_zeros_matrix"], ["", "def", "get_padded_shuffled_mask", "(", "self", ",", "mask", ",", "pad", "=", "0", ")", ":", "\n", "        ", "assert", "mask", ",", "'mask cannot be None'", "\n", "# mask is (nb_samples, time)", "\n", "mask", "=", "T", ".", "shape_padright", "(", "mask", ")", "# (nb_samples, time, 1)", "\n", "mask", "=", "T", ".", "addbroadcast", "(", "mask", ",", "-", "1", ")", "# (time, nb_samples, 1) matrix.", "\n", "mask", "=", "mask", ".", "dimshuffle", "(", "1", ",", "0", ",", "2", ")", "# (time, nb_samples, 1)", "\n", "\n", "if", "pad", ">", "0", ":", "\n", "# left-pad in time with 0", "\n", "            ", "padding", "=", "alloc_zeros_matrix", "(", "pad", ",", "mask", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "padded_mask", "=", "T", ".", "concatenate", "(", "[", "padding", ",", "mask", "]", ",", "axis", "=", "0", ")", "\n", "", "return", "mask", ".", "astype", "(", "'int8'", ")", ",", "padded_mask", ".", "astype", "(", "'int8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.LSTM.__init__": [[247, 287], ["core.Layer.__init__", "initializations.get", "initializations.get", "initializations.get", "activations.get", "activations.get", "recurrent.LSTM.init", "recurrent.LSTM.inner_init", "shared_zeros", "recurrent.LSTM.init", "recurrent.LSTM.inner_init", "recurrent.LSTM.forget_bias_init", "recurrent.LSTM.init", "recurrent.LSTM.inner_init", "shared_zeros", "recurrent.LSTM.init", "recurrent.LSTM.inner_init", "shared_zeros", "recurrent.LSTM.set_name"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Dense.set_name"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "\n", "init", "=", "'glorot_uniform'", ",", "inner_init", "=", "'orthogonal'", ",", "forget_bias_init", "=", "'one'", ",", "\n", "activation", "=", "'tanh'", ",", "inner_activation", "=", "'sigmoid'", ",", "return_sequences", "=", "False", ",", "name", "=", "'LSTM'", ")", ":", "\n", "\n", "        ", "super", "(", "LSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "init", "=", "initializations", ".", "get", "(", "init", ")", "\n", "self", ".", "inner_init", "=", "initializations", ".", "get", "(", "inner_init", ")", "\n", "self", ".", "forget_bias_init", "=", "initializations", ".", "get", "(", "forget_bias_init", ")", "\n", "self", ".", "activation", "=", "activations", ".", "get", "(", "activation", ")", "\n", "self", ".", "inner_activation", "=", "activations", ".", "get", "(", "inner_activation", ")", "\n", "self", ".", "return_sequences", "=", "return_sequences", "\n", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "\n", "self", ".", "W_i", "=", "self", ".", "init", "(", "(", "input_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "U_i", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "b_i", "=", "shared_zeros", "(", "(", "self", ".", "output_dim", ")", ")", "\n", "\n", "self", ".", "W_f", "=", "self", ".", "init", "(", "(", "input_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "U_f", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "b_f", "=", "self", ".", "forget_bias_init", "(", "(", "self", ".", "output_dim", ")", ")", "\n", "\n", "self", ".", "W_c", "=", "self", ".", "init", "(", "(", "input_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "U_c", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "b_c", "=", "shared_zeros", "(", "(", "self", ".", "output_dim", ")", ")", "\n", "\n", "self", ".", "W_o", "=", "self", ".", "init", "(", "(", "input_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "U_o", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "b_o", "=", "shared_zeros", "(", "(", "self", ".", "output_dim", ")", ")", "\n", "\n", "self", ".", "params", "=", "[", "\n", "self", ".", "W_i", ",", "self", ".", "U_i", ",", "self", ".", "b_i", ",", "\n", "self", ".", "W_c", ",", "self", ".", "U_c", ",", "self", ".", "b_c", ",", "\n", "self", ".", "W_f", ",", "self", ".", "U_f", ",", "self", ".", "b_f", ",", "\n", "self", ".", "W_o", ",", "self", ".", "U_o", ",", "self", ".", "b_o", ",", "\n", "]", "\n", "\n", "self", ".", "set_name", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.LSTM._step": [[288, 303], ["recurrent.LSTM.inner_activation", "recurrent.LSTM.inner_activation", "recurrent.LSTM.inner_activation", "recurrent.LSTM.activation", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "recurrent.LSTM.activation", "theano.dot", "theano.dot", "theano.dot", "theano.dot"], "methods", ["None"], ["", "def", "_step", "(", "self", ",", "\n", "xi_t", ",", "xf_t", ",", "xo_t", ",", "xc_t", ",", "mask_t", ",", "\n", "h_tm1", ",", "c_tm1", ",", "\n", "u_i", ",", "u_f", ",", "u_o", ",", "u_c", ",", "b_u", ")", ":", "\n", "\n", "        ", "i_t", "=", "self", ".", "inner_activation", "(", "xi_t", "+", "T", ".", "dot", "(", "h_tm1", "*", "b_u", "[", "0", "]", ",", "u_i", ")", ")", "\n", "f_t", "=", "self", ".", "inner_activation", "(", "xf_t", "+", "T", ".", "dot", "(", "h_tm1", "*", "b_u", "[", "1", "]", ",", "u_f", ")", ")", "\n", "c_t", "=", "f_t", "*", "c_tm1", "+", "i_t", "*", "self", ".", "activation", "(", "xc_t", "+", "T", ".", "dot", "(", "h_tm1", "*", "b_u", "[", "2", "]", ",", "u_c", ")", ")", "\n", "o_t", "=", "self", ".", "inner_activation", "(", "xo_t", "+", "T", ".", "dot", "(", "h_tm1", "*", "b_u", "[", "3", "]", ",", "u_o", ")", ")", "\n", "h_t", "=", "o_t", "*", "self", ".", "activation", "(", "c_t", ")", "\n", "\n", "h_t", "=", "(", "1", "-", "mask_t", ")", "*", "h_tm1", "+", "mask_t", "*", "h_t", "\n", "c_t", "=", "(", "1", "-", "mask_t", ")", "*", "c_tm1", "+", "mask_t", "*", "c_t", "\n", "\n", "return", "h_t", ",", "c_t", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.LSTM.__call__": [[304, 345], ["recurrent.LSTM.get_mask", "X.dimshuffle.dimshuffle.dimshuffle", "numpy.ones", "numpy.ones", "theano.scan", "theano.scan", "theano.scan", "theano.scan", "logging.info", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.unbroadcast", "theano.unbroadcast", "theano.unbroadcast", "theano.unbroadcast", "outputs.dimshuffle", "srng.binomial", "srng.binomial", "alloc_zeros_matrix", "theano.unbroadcast", "theano.unbroadcast", "alloc_zeros_matrix"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.CondAttLSTM.get_mask", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.alloc_zeros_matrix", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.alloc_zeros_matrix"], ["", "def", "__call__", "(", "self", ",", "X", ",", "mask", "=", "None", ",", "init_state", "=", "None", ",", "dropout", "=", "0", ",", "train", "=", "True", ",", "srng", "=", "None", ")", ":", "\n", "        ", "mask", "=", "self", ".", "get_mask", "(", "mask", ",", "X", ")", "\n", "X", "=", "X", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "\n", "retain_prob", "=", "1.", "-", "dropout", "\n", "B_w", "=", "np", ".", "ones", "(", "(", "4", ",", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "B_u", "=", "np", ".", "ones", "(", "(", "4", ",", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "if", "dropout", ">", "0", ":", "\n", "            ", "logging", ".", "info", "(", "'applying dropout with p = %f'", ",", "dropout", ")", "\n", "if", "train", ":", "\n", "                ", "B_w", "=", "srng", ".", "binomial", "(", "(", "4", ",", "X", ".", "shape", "[", "1", "]", ",", "self", ".", "input_dim", ")", ",", "p", "=", "retain_prob", ",", "\n", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "B_u", "=", "srng", ".", "binomial", "(", "(", "4", ",", "X", ".", "shape", "[", "1", "]", ",", "self", ".", "output_dim", ")", ",", "p", "=", "retain_prob", ",", "\n", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "", "else", ":", "\n", "                ", "B_w", "*=", "retain_prob", "\n", "B_u", "*=", "retain_prob", "\n", "\n", "", "", "xi", "=", "T", ".", "dot", "(", "X", "*", "B_w", "[", "0", "]", ",", "self", ".", "W_i", ")", "+", "self", ".", "b_i", "\n", "xf", "=", "T", ".", "dot", "(", "X", "*", "B_w", "[", "1", "]", ",", "self", ".", "W_f", ")", "+", "self", ".", "b_f", "\n", "xc", "=", "T", ".", "dot", "(", "X", "*", "B_w", "[", "2", "]", ",", "self", ".", "W_c", ")", "+", "self", ".", "b_c", "\n", "xo", "=", "T", ".", "dot", "(", "X", "*", "B_w", "[", "3", "]", ",", "self", ".", "W_o", ")", "+", "self", ".", "b_o", "\n", "\n", "if", "init_state", ":", "\n", "# (batch_size, output_dim)", "\n", "            ", "first_state", "=", "T", ".", "unbroadcast", "(", "init_state", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "first_state", "=", "T", ".", "unbroadcast", "(", "alloc_zeros_matrix", "(", "X", ".", "shape", "[", "1", "]", ",", "self", ".", "output_dim", ")", ",", "1", ")", "\n", "\n", "", "[", "outputs", ",", "memories", "]", ",", "updates", "=", "theano", ".", "scan", "(", "\n", "self", ".", "_step", ",", "\n", "sequences", "=", "[", "xi", ",", "xf", ",", "xo", ",", "xc", ",", "mask", "]", ",", "\n", "outputs_info", "=", "[", "\n", "first_state", ",", "\n", "T", ".", "unbroadcast", "(", "alloc_zeros_matrix", "(", "X", ".", "shape", "[", "1", "]", ",", "self", ".", "output_dim", ")", ",", "1", ")", "\n", "]", ",", "\n", "non_sequences", "=", "[", "self", ".", "U_i", ",", "self", ".", "U_f", ",", "self", ".", "U_o", ",", "self", ".", "U_c", ",", "B_u", "]", ")", "\n", "\n", "if", "self", ".", "return_sequences", ":", "\n", "            ", "return", "outputs", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "", "return", "outputs", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.LSTM.get_mask": [[346, 356], ["theano.shape_padright", "theano.shape_padright", "theano.addbroadcast", "theano.addbroadcast", "theano.ones.dimshuffle", "theano.ones.astype", "theano.ones", "theano.ones"], "methods", ["None"], ["", "def", "get_mask", "(", "self", ",", "mask", ",", "X", ")", ":", "\n", "        ", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "T", ".", "ones", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "", "mask", "=", "T", ".", "shape_padright", "(", "mask", ")", "# (nb_samples, time, 1)", "\n", "mask", "=", "T", ".", "addbroadcast", "(", "mask", ",", "-", "1", ")", "# (time, nb_samples, 1) matrix.", "\n", "mask", "=", "mask", ".", "dimshuffle", "(", "1", ",", "0", ",", "2", ")", "# (time, nb_samples, 1)", "\n", "mask", "=", "mask", ".", "astype", "(", "'int8'", ")", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.BiLSTM.__init__": [[359, 379], ["core.Layer.__init__", "dict", "recurrent.LSTM", "recurrent.LSTM", "recurrent.BiLSTM.set_name", "locals"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Dense.set_name"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "\n", "init", "=", "'glorot_uniform'", ",", "inner_init", "=", "'orthogonal'", ",", "forget_bias_init", "=", "'one'", ",", "\n", "activation", "=", "'tanh'", ",", "inner_activation", "=", "'sigmoid'", ",", "return_sequences", "=", "False", ",", "name", "=", "'BiLSTM'", ")", ":", "\n", "        ", "super", "(", "BiLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "return_sequences", "=", "return_sequences", "\n", "\n", "params", "=", "dict", "(", "locals", "(", ")", ")", "\n", "del", "params", "[", "'self'", "]", "\n", "\n", "params", "[", "'name'", "]", "=", "'foward_lstm'", "\n", "self", ".", "forward_lstm", "=", "LSTM", "(", "**", "params", ")", "\n", "params", "[", "'name'", "]", "=", "'backward_lstm'", "\n", "self", ".", "backward_lstm", "=", "LSTM", "(", "**", "params", ")", "\n", "\n", "self", ".", "params", "=", "self", ".", "forward_lstm", ".", "params", "+", "self", ".", "backward_lstm", ".", "params", "\n", "\n", "self", ".", "set_name", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.BiLSTM.__call__": [[380, 395], ["recurrent.BiLSTM.forward_lstm", "recurrent.BiLSTM.backward_lstm", "theano.ones", "theano.ones", "theano.concatenate", "theano.concatenate", "NotImplementedError"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "X", ",", "mask", "=", "None", ",", "init_state", "=", "None", ",", "dropout", "=", "0", ",", "train", "=", "True", ",", "srng", "=", "None", ")", ":", "\n", "# X: (nb_samples, nb_time_steps, embed_dim)", "\n", "# mask: (nb_samples, nb_time_steps)", "\n", "        ", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "T", ".", "ones", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "", "hidden_states_forward", "=", "self", ".", "forward_lstm", "(", "X", ",", "mask", ",", "init_state", ",", "dropout", ",", "train", ",", "srng", ")", "\n", "hidden_states_backward", "=", "self", ".", "backward_lstm", "(", "X", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", ",", "mask", "[", ":", ",", ":", ":", "-", "1", "]", ",", "init_state", ",", "dropout", ",", "train", ",", "srng", ")", "\n", "\n", "if", "self", ".", "return_sequences", ":", "\n", "            ", "hidden_states", "=", "T", ".", "concatenate", "(", "[", "hidden_states_forward", ",", "hidden_states_backward", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.CondAttLSTM.__init__": [[401, 460], ["core.Layer.__init__", "initializations.get", "initializations.get", "initializations.get", "activations.get", "activations.get", "recurrent.CondAttLSTM.init", "recurrent.CondAttLSTM.inner_init", "recurrent.CondAttLSTM.inner_init", "shared_zeros", "recurrent.CondAttLSTM.init", "recurrent.CondAttLSTM.inner_init", "recurrent.CondAttLSTM.inner_init", "recurrent.CondAttLSTM.forget_bias_init", "recurrent.CondAttLSTM.init", "recurrent.CondAttLSTM.inner_init", "recurrent.CondAttLSTM.inner_init", "shared_zeros", "recurrent.CondAttLSTM.init", "recurrent.CondAttLSTM.inner_init", "recurrent.CondAttLSTM.inner_init", "shared_zeros", "recurrent.CondAttLSTM.init", "recurrent.CondAttLSTM.init", "shared_zeros", "recurrent.CondAttLSTM.init", "shared_zeros", "recurrent.CondAttLSTM.set_name"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Dense.set_name"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "\n", "context_dim", ",", "att_hidden_dim", ",", "\n", "init", "=", "'glorot_uniform'", ",", "inner_init", "=", "'orthogonal'", ",", "forget_bias_init", "=", "'one'", ",", "\n", "activation", "=", "'tanh'", ",", "inner_activation", "=", "'sigmoid'", ",", "name", "=", "'CondAttLSTM'", ")", ":", "\n", "\n", "        ", "super", "(", "CondAttLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "init", "=", "initializations", ".", "get", "(", "init", ")", "\n", "self", ".", "inner_init", "=", "initializations", ".", "get", "(", "inner_init", ")", "\n", "self", ".", "forget_bias_init", "=", "initializations", ".", "get", "(", "forget_bias_init", ")", "\n", "self", ".", "activation", "=", "activations", ".", "get", "(", "activation", ")", "\n", "self", ".", "inner_activation", "=", "activations", ".", "get", "(", "inner_activation", ")", "\n", "self", ".", "context_dim", "=", "context_dim", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "\n", "# regular LSTM layer", "\n", "\n", "self", ".", "W_i", "=", "self", ".", "init", "(", "(", "input_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "U_i", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "C_i", "=", "self", ".", "inner_init", "(", "(", "self", ".", "context_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "b_i", "=", "shared_zeros", "(", "(", "self", ".", "output_dim", ")", ")", "\n", "\n", "self", ".", "W_f", "=", "self", ".", "init", "(", "(", "input_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "U_f", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "C_f", "=", "self", ".", "inner_init", "(", "(", "self", ".", "context_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "b_f", "=", "self", ".", "forget_bias_init", "(", "(", "self", ".", "output_dim", ")", ")", "\n", "\n", "self", ".", "W_c", "=", "self", ".", "init", "(", "(", "input_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "U_c", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "C_c", "=", "self", ".", "inner_init", "(", "(", "self", ".", "context_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "b_c", "=", "shared_zeros", "(", "(", "self", ".", "output_dim", ")", ")", "\n", "\n", "self", ".", "W_o", "=", "self", ".", "init", "(", "(", "input_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "U_o", "=", "self", ".", "inner_init", "(", "(", "self", ".", "output_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "C_o", "=", "self", ".", "inner_init", "(", "(", "self", ".", "context_dim", ",", "self", ".", "output_dim", ")", ")", "\n", "self", ".", "b_o", "=", "shared_zeros", "(", "(", "self", ".", "output_dim", ")", ")", "\n", "\n", "self", ".", "params", "=", "[", "\n", "self", ".", "W_i", ",", "self", ".", "U_i", ",", "self", ".", "b_i", ",", "self", ".", "C_i", ",", "\n", "self", ".", "W_c", ",", "self", ".", "U_c", ",", "self", ".", "b_c", ",", "self", ".", "C_c", ",", "\n", "self", ".", "W_f", ",", "self", ".", "U_f", ",", "self", ".", "b_f", ",", "self", ".", "C_f", ",", "\n", "self", ".", "W_o", ",", "self", ".", "U_o", ",", "self", ".", "b_o", ",", "self", ".", "C_o", ",", "\n", "]", "\n", "\n", "# attention layer", "\n", "self", ".", "att_ctx_W1", "=", "self", ".", "init", "(", "(", "context_dim", ",", "att_hidden_dim", ")", ")", "\n", "self", ".", "att_h_W1", "=", "self", ".", "init", "(", "(", "output_dim", ",", "att_hidden_dim", ")", ")", "\n", "self", ".", "att_b1", "=", "shared_zeros", "(", "(", "att_hidden_dim", ")", ")", "\n", "\n", "self", ".", "att_W2", "=", "self", ".", "init", "(", "(", "att_hidden_dim", ",", "1", ")", ")", "\n", "self", ".", "att_b2", "=", "shared_zeros", "(", "(", "1", ")", ")", "\n", "\n", "self", ".", "params", "+=", "[", "\n", "self", ".", "att_ctx_W1", ",", "self", ".", "att_h_W1", ",", "self", ".", "att_b1", ",", "\n", "self", ".", "att_W2", ",", "self", ".", "att_b2", "\n", "]", "\n", "\n", "self", ".", "set_name", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.CondAttLSTM._step": [[461, 503], ["theano.dot", "theano.dot", "theano.tanh", "theano.tanh", "theano.exp().reshape", "theano.exp().reshape", "theano.sum", "theano.sum", "recurrent.CondAttLSTM.inner_activation", "recurrent.CondAttLSTM.inner_activation", "recurrent.CondAttLSTM.inner_activation", "theano.dot", "theano.dot", "theano.sum", "theano.sum", "recurrent.CondAttLSTM.activation", "theano.exp", "theano.exp", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "recurrent.CondAttLSTM.activation", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.tanh"], ["", "def", "_step", "(", "self", ",", "\n", "xi_t", ",", "xf_t", ",", "xo_t", ",", "xc_t", ",", "mask_t", ",", "\n", "h_tm1", ",", "c_tm1", ",", "ctx_vec_tm1", ",", "\n", "u_i", ",", "u_f", ",", "u_o", ",", "u_c", ",", "c_i", ",", "c_f", ",", "c_o", ",", "c_c", ",", "\n", "att_h_w1", ",", "att_w2", ",", "att_b2", ",", "\n", "context", ",", "context_mask", ",", "context_att_trans", ",", "\n", "b_u", ")", ":", "\n", "\n", "# context: (batch_size, context_size, context_dim)", "\n", "\n", "# (batch_size, att_layer1_dim)", "\n", "        ", "h_tm1_att_trans", "=", "T", ".", "dot", "(", "h_tm1", ",", "att_h_w1", ")", "\n", "\n", "# h_tm1_att_trans = theano.printing.Print('h_tm1_att_trans')(h_tm1_att_trans)", "\n", "\n", "# (batch_size, context_size, att_layer1_dim)", "\n", "att_hidden", "=", "T", ".", "tanh", "(", "context_att_trans", "+", "h_tm1_att_trans", "[", ":", ",", "None", ",", ":", "]", ")", "\n", "# (batch_size, context_size, 1)", "\n", "att_raw", "=", "T", ".", "dot", "(", "att_hidden", ",", "att_w2", ")", "+", "att_b2", "\n", "\n", "# (batch_size, context_size)", "\n", "ctx_att", "=", "T", ".", "exp", "(", "att_raw", ")", ".", "reshape", "(", "(", "att_raw", ".", "shape", "[", "0", "]", ",", "att_raw", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "if", "context_mask", ":", "\n", "            ", "ctx_att", "=", "ctx_att", "*", "context_mask", "\n", "\n", "", "ctx_att", "=", "ctx_att", "/", "T", ".", "sum", "(", "ctx_att", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "# (batch_size, context_dim)", "\n", "ctx_vec", "=", "T", ".", "sum", "(", "context", "*", "ctx_att", "[", ":", ",", ":", ",", "None", "]", ",", "axis", "=", "1", ")", "\n", "\n", "i_t", "=", "self", ".", "inner_activation", "(", "xi_t", "+", "T", ".", "dot", "(", "h_tm1", "*", "b_u", "[", "0", "]", ",", "u_i", ")", "+", "T", ".", "dot", "(", "ctx_vec", ",", "c_i", ")", ")", "\n", "f_t", "=", "self", ".", "inner_activation", "(", "xf_t", "+", "T", ".", "dot", "(", "h_tm1", "*", "b_u", "[", "1", "]", ",", "u_f", ")", "+", "T", ".", "dot", "(", "ctx_vec", ",", "c_f", ")", ")", "\n", "c_t", "=", "f_t", "*", "c_tm1", "+", "i_t", "*", "self", ".", "activation", "(", "xc_t", "+", "T", ".", "dot", "(", "h_tm1", "*", "b_u", "[", "2", "]", ",", "u_c", ")", "+", "T", ".", "dot", "(", "ctx_vec", ",", "c_c", ")", ")", "\n", "o_t", "=", "self", ".", "inner_activation", "(", "xo_t", "+", "T", ".", "dot", "(", "h_tm1", "*", "b_u", "[", "3", "]", ",", "u_o", ")", "+", "T", ".", "dot", "(", "ctx_vec", ",", "c_o", ")", ")", "\n", "h_t", "=", "o_t", "*", "self", ".", "activation", "(", "c_t", ")", "\n", "\n", "h_t", "=", "(", "1", "-", "mask_t", ")", "*", "h_tm1", "+", "mask_t", "*", "h_t", "\n", "c_t", "=", "(", "1", "-", "mask_t", ")", "*", "c_tm1", "+", "mask_t", "*", "c_t", "\n", "\n", "# ctx_vec = theano.printing.Print('ctx_vec')(ctx_vec)", "\n", "\n", "return", "h_t", ",", "c_t", ",", "ctx_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.CondAttLSTM.__call__": [[504, 566], ["recurrent.CondAttLSTM.get_mask", "X.dimshuffle.dimshuffle.dimshuffle", "numpy.ones", "numpy.ones", "theano.scan", "theano.scan", "theano.scan", "theano.scan", "outputs.dimshuffle.dimshuffle.dimshuffle", "ctx_vectors.dimshuffle.dimshuffle.dimshuffle", "cells.dimshuffle.dimshuffle.dimshuffle", "logging.info", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.unbroadcast", "theano.unbroadcast", "theano.unbroadcast", "theano.unbroadcast", "theano.unbroadcast", "theano.unbroadcast", "theano.unbroadcast", "theano.unbroadcast", "srng.binomial", "srng.binomial", "alloc_zeros_matrix", "alloc_zeros_matrix", "theano.unbroadcast", "theano.unbroadcast", "alloc_zeros_matrix"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.CondAttLSTM.get_mask", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.alloc_zeros_matrix", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.alloc_zeros_matrix", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.alloc_zeros_matrix"], ["", "def", "__call__", "(", "self", ",", "X", ",", "context", ",", "init_state", "=", "None", ",", "init_cell", "=", "None", ",", "mask", "=", "None", ",", "context_mask", "=", "None", ",", "\n", "dropout", "=", "0", ",", "train", "=", "True", ",", "srng", "=", "None", ")", ":", "\n", "        ", "assert", "context_mask", ".", "dtype", "==", "'int8'", ",", "'context_mask is not int8, got %s'", "%", "context_mask", ".", "dtype", "\n", "\n", "mask", "=", "self", ".", "get_mask", "(", "mask", ",", "X", ")", "\n", "X", "=", "X", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "\n", "retain_prob", "=", "1.", "-", "dropout", "\n", "B_w", "=", "np", ".", "ones", "(", "(", "4", ",", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "B_u", "=", "np", ".", "ones", "(", "(", "4", ",", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "if", "dropout", ">", "0", ":", "\n", "            ", "logging", ".", "info", "(", "'applying dropout with p = %f'", ",", "dropout", ")", "\n", "if", "train", ":", "\n", "                ", "B_w", "=", "srng", ".", "binomial", "(", "(", "4", ",", "X", ".", "shape", "[", "1", "]", ",", "self", ".", "input_dim", ")", ",", "p", "=", "retain_prob", ",", "\n", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "B_u", "=", "srng", ".", "binomial", "(", "(", "4", ",", "X", ".", "shape", "[", "1", "]", ",", "self", ".", "output_dim", ")", ",", "p", "=", "retain_prob", ",", "\n", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "", "else", ":", "\n", "                ", "B_w", "*=", "retain_prob", "\n", "B_u", "*=", "retain_prob", "\n", "\n", "", "", "xi", "=", "T", ".", "dot", "(", "X", "*", "B_w", "[", "0", "]", ",", "self", ".", "W_i", ")", "+", "self", ".", "b_i", "\n", "xf", "=", "T", ".", "dot", "(", "X", "*", "B_w", "[", "1", "]", ",", "self", ".", "W_f", ")", "+", "self", ".", "b_f", "\n", "xc", "=", "T", ".", "dot", "(", "X", "*", "B_w", "[", "2", "]", ",", "self", ".", "W_c", ")", "+", "self", ".", "b_c", "\n", "xo", "=", "T", ".", "dot", "(", "X", "*", "B_w", "[", "3", "]", ",", "self", ".", "W_o", ")", "+", "self", ".", "b_o", "\n", "\n", "# (batch_size, context_size, att_layer1_dim)", "\n", "context_att_trans", "=", "T", ".", "dot", "(", "context", ",", "self", ".", "att_ctx_W1", ")", "+", "self", ".", "att_b1", "\n", "\n", "if", "init_state", ":", "\n", "# (batch_size, output_dim)", "\n", "            ", "first_state", "=", "T", ".", "unbroadcast", "(", "init_state", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "first_state", "=", "T", ".", "unbroadcast", "(", "alloc_zeros_matrix", "(", "X", ".", "shape", "[", "1", "]", ",", "self", ".", "output_dim", ")", ",", "1", ")", "\n", "\n", "", "if", "init_cell", ":", "\n", "# (batch_size, output_dim)", "\n", "            ", "first_cell", "=", "T", ".", "unbroadcast", "(", "init_cell", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "first_cell", "=", "T", ".", "unbroadcast", "(", "alloc_zeros_matrix", "(", "X", ".", "shape", "[", "1", "]", ",", "self", ".", "output_dim", ")", ",", "1", ")", "\n", "\n", "", "[", "outputs", ",", "cells", ",", "ctx_vectors", "]", ",", "updates", "=", "theano", ".", "scan", "(", "\n", "self", ".", "_step", ",", "\n", "sequences", "=", "[", "xi", ",", "xf", ",", "xo", ",", "xc", ",", "mask", "]", ",", "\n", "outputs_info", "=", "[", "\n", "first_state", ",", "# for h", "\n", "first_cell", ",", "# for cell   T.unbroadcast(alloc_zeros_matrix(X.shape[1], self.output_dim), 1)", "\n", "T", ".", "unbroadcast", "(", "alloc_zeros_matrix", "(", "X", ".", "shape", "[", "1", "]", ",", "self", ".", "context_dim", ")", ",", "1", ")", "# for ctx vector", "\n", "]", ",", "\n", "non_sequences", "=", "[", "\n", "self", ".", "U_i", ",", "self", ".", "U_f", ",", "self", ".", "U_o", ",", "self", ".", "U_c", ",", "\n", "self", ".", "C_i", ",", "self", ".", "C_f", ",", "self", ".", "C_o", ",", "self", ".", "C_c", ",", "\n", "self", ".", "att_h_W1", ",", "self", ".", "att_W2", ",", "self", ".", "att_b2", ",", "\n", "context", ",", "context_mask", ",", "context_att_trans", ",", "\n", "B_u", "\n", "]", ")", "\n", "\n", "outputs", "=", "outputs", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "ctx_vectors", "=", "ctx_vectors", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "cells", "=", "cells", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "\n", "return", "outputs", ",", "cells", ",", "ctx_vectors", "\n", "# return outputs[-1]", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.CondAttLSTM.get_mask": [[568, 578], ["theano.shape_padright", "theano.shape_padright", "theano.addbroadcast", "theano.addbroadcast", "theano.ones.dimshuffle", "theano.ones.astype", "theano.ones", "theano.ones"], "methods", ["None"], ["", "def", "get_mask", "(", "self", ",", "mask", ",", "X", ")", ":", "\n", "        ", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "T", ".", "ones", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "", "mask", "=", "T", ".", "shape_padright", "(", "mask", ")", "# (nb_samples, time, 1)", "\n", "mask", "=", "T", ".", "addbroadcast", "(", "mask", ",", "-", "1", ")", "# (time, nb_samples, 1) matrix.", "\n", "mask", "=", "mask", ".", "dimshuffle", "(", "1", ",", "0", ",", "2", ")", "# (time, nb_samples, 1)", "\n", "mask", "=", "mask", ".", "astype", "(", "'int8'", ")", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.GRUDecoder.__init__": [[584, 630], ["core.Layer.__init__", "initializations.get", "initializations.get", "activations.get", "activations.get", "recurrent.GRUDecoder.init", "recurrent.GRUDecoder.inner_init", "recurrent.GRUDecoder.init", "shared_zeros", "recurrent.GRUDecoder.init", "recurrent.GRUDecoder.inner_init", "recurrent.GRUDecoder.init", "shared_zeros", "recurrent.GRUDecoder.init", "recurrent.GRUDecoder.inner_init", "recurrent.GRUDecoder.init", "shared_zeros", "recurrent.GRUDecoder.init", "recurrent.GRUDecoder.init", "shared_zeros", "recurrent.GRUDecoder.set_name"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Dense.set_name"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "context_dim", ",", "hidden_dim", ",", "vocab_num", ",", "\n", "init", "=", "'glorot_uniform'", ",", "inner_init", "=", "'orthogonal'", ",", "\n", "activation", "=", "'tanh'", ",", "inner_activation", "=", "'sigmoid'", ",", "\n", "name", "=", "'GRUDecoder'", ")", ":", "\n", "\n", "        ", "super", "(", "GRUDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "context_dim", "=", "context_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "vocab_num", "=", "vocab_num", "\n", "\n", "self", ".", "init", "=", "initializations", ".", "get", "(", "init", ")", "\n", "self", ".", "inner_init", "=", "initializations", ".", "get", "(", "inner_init", ")", "\n", "self", ".", "activation", "=", "activations", ".", "get", "(", "activation", ")", "\n", "self", ".", "inner_activation", "=", "activations", ".", "get", "(", "inner_activation", ")", "\n", "\n", "self", ".", "W_z", "=", "self", ".", "init", "(", "(", "self", ".", "input_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "U_z", "=", "self", ".", "inner_init", "(", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "C_z", "=", "self", ".", "init", "(", "(", "self", ".", "context_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "b_z", "=", "shared_zeros", "(", "(", "self", ".", "hidden_dim", ")", ")", "\n", "\n", "self", ".", "W_r", "=", "self", ".", "init", "(", "(", "self", ".", "input_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "U_r", "=", "self", ".", "inner_init", "(", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "C_r", "=", "self", ".", "init", "(", "(", "self", ".", "context_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "b_r", "=", "shared_zeros", "(", "(", "self", ".", "hidden_dim", ")", ")", "\n", "\n", "self", ".", "W_h", "=", "self", ".", "init", "(", "(", "self", ".", "input_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "U_h", "=", "self", ".", "inner_init", "(", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "C_h", "=", "self", ".", "init", "(", "(", "self", ".", "context_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "b_h", "=", "shared_zeros", "(", "(", "self", ".", "hidden_dim", ")", ")", "\n", "\n", "# self.W_y = self.init((self.input_dim, self.vocab_num))", "\n", "self", ".", "U_y", "=", "self", ".", "init", "(", "(", "self", ".", "hidden_dim", ",", "self", ".", "vocab_num", ")", ")", "\n", "self", ".", "C_y", "=", "self", ".", "init", "(", "(", "self", ".", "context_dim", ",", "self", ".", "vocab_num", ")", ")", "\n", "self", ".", "b_y", "=", "shared_zeros", "(", "(", "self", ".", "vocab_num", ")", ")", "\n", "\n", "self", ".", "params", "=", "[", "\n", "self", ".", "W_z", ",", "self", ".", "U_z", ",", "self", ".", "b_z", ",", "\n", "self", ".", "W_r", ",", "self", ".", "U_r", ",", "self", ".", "b_r", ",", "\n", "self", ".", "W_h", ",", "self", ".", "U_h", ",", "self", ".", "b_h", ",", "\n", "self", ".", "C_z", ",", "self", ".", "C_r", ",", "self", ".", "C_h", ",", "\n", "self", ".", "U_y", ",", "self", ".", "C_y", ",", "self", ".", "b_y", ",", "#self.W_y", "\n", "]", "\n", "\n", "if", "name", "is", "not", "None", ":", "\n", "            ", "self", ".", "set_name", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.GRUDecoder._step": [[631, 641], ["recurrent.GRUDecoder.inner_activation", "recurrent.GRUDecoder.inner_activation", "recurrent.GRUDecoder.activation", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot"], "methods", ["None"], ["", "", "def", "_step", "(", "self", ",", "\n", "xz_t", ",", "xr_t", ",", "xh_t", ",", "mask_tm1", ",", "\n", "h_tm1", ",", "\n", "u_z", ",", "u_r", ",", "u_h", ")", ":", "\n", "        ", "h_mask_tm1", "=", "mask_tm1", "*", "h_tm1", "\n", "z", "=", "self", ".", "inner_activation", "(", "xz_t", "+", "T", ".", "dot", "(", "h_mask_tm1", ",", "u_z", ")", ")", "\n", "r", "=", "self", ".", "inner_activation", "(", "xr_t", "+", "T", ".", "dot", "(", "h_mask_tm1", ",", "u_r", ")", ")", "\n", "hh_t", "=", "self", ".", "activation", "(", "xh_t", "+", "T", ".", "dot", "(", "r", "*", "h_mask_tm1", ",", "u_h", ")", ")", "\n", "h_t", "=", "z", "*", "h_mask_tm1", "+", "(", "1", "-", "z", ")", "*", "hh_t", "\n", "return", "h_t", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.GRUDecoder.__call__": [[642, 673], ["recurrent.GRUDecoder.get_padded_shuffled_mask", "theano.concatenate", "theano.concatenate", "theano.concatenate.dimshuffle", "context.dimshuffle", "theano.scan", "theano.scan", "theano.scan", "theano.scan", "h.dimshuffle.dimshuffle.dimshuffle", "predicts.reshape", "theano.nnet.softmax().reshape", "theano.nnet.softmax().reshape", "theano.cast", "theano.cast", "theano.shape_padright", "theano.shape_padright", "alloc_zeros_matrix", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.unbroadcast", "theano.unbroadcast", "theano.dot", "theano.dot", "theano.dot", "theano.dot", "theano.nnet.softmax", "theano.nnet.softmax", "alloc_zeros_matrix", "context.dimshuffle"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.GRUDecoder.get_padded_shuffled_mask", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.alloc_zeros_matrix", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.alloc_zeros_matrix"], ["", "def", "__call__", "(", "self", ",", "target", ",", "context", ",", "mask", "=", "None", ")", ":", "\n", "        ", "target", "=", "target", "*", "T", ".", "cast", "(", "T", ".", "shape_padright", "(", "mask", ")", ",", "'float32'", ")", "\n", "padded_mask", "=", "self", ".", "get_padded_shuffled_mask", "(", "mask", ",", "pad", "=", "1", ")", "\n", "# target = theano.printing.Print('X::' + self.name)(target)", "\n", "X_shifted", "=", "T", ".", "concatenate", "(", "[", "alloc_zeros_matrix", "(", "target", ".", "shape", "[", "0", "]", ",", "1", ",", "self", ".", "input_dim", ")", ",", "target", "[", ":", ",", "0", ":", "-", "1", ",", ":", "]", "]", ",", "axis", "=", "-", "2", ")", "\n", "\n", "# X = theano.printing.Print('X::' + self.name)(X)", "\n", "# X = T.zeros_like(target)", "\n", "# T.set_subtensor(X[:, 1:, :], target[:, 0:-1, :])", "\n", "\n", "X", "=", "X_shifted", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "\n", "ctx_step", "=", "context", ".", "dimshuffle", "(", "(", "'x'", ",", "0", ",", "1", ")", ")", "\n", "x_z", "=", "T", ".", "dot", "(", "X", ",", "self", ".", "W_z", ")", "+", "T", ".", "dot", "(", "ctx_step", ",", "self", ".", "C_z", ")", "+", "self", ".", "b_z", "\n", "x_r", "=", "T", ".", "dot", "(", "X", ",", "self", ".", "W_r", ")", "+", "T", ".", "dot", "(", "ctx_step", ",", "self", ".", "C_r", ")", "+", "self", ".", "b_r", "\n", "x_h", "=", "T", ".", "dot", "(", "X", ",", "self", ".", "W_h", ")", "+", "T", ".", "dot", "(", "ctx_step", ",", "self", ".", "C_h", ")", "+", "self", ".", "b_h", "\n", "\n", "h", ",", "updates", "=", "theano", ".", "scan", "(", "\n", "self", ".", "_step", ",", "\n", "sequences", "=", "[", "x_z", ",", "x_r", ",", "x_h", ",", "padded_mask", "]", ",", "\n", "outputs_info", "=", "T", ".", "unbroadcast", "(", "alloc_zeros_matrix", "(", "X", ".", "shape", "[", "1", "]", ",", "self", ".", "hidden_dim", ")", ",", "1", ")", ",", "\n", "non_sequences", "=", "[", "self", ".", "U_z", ",", "self", ".", "U_r", ",", "self", ".", "U_h", "]", ")", "\n", "\n", "# (batch_size, max_token_len, hidden_dim)", "\n", "h", "=", "h", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "\n", "# (batch_size, max_token_len, vocab_size)", "\n", "predicts", "=", "T", ".", "dot", "(", "h", ",", "self", ".", "U_y", ")", "+", "T", ".", "dot", "(", "context", ".", "dimshuffle", "(", "(", "0", ",", "'x'", ",", "1", ")", ")", ",", "self", ".", "C_y", ")", "+", "self", ".", "b_y", "# + T.dot(X_shifted, self.W_y)", "\n", "\n", "predicts_flatten", "=", "predicts", ".", "reshape", "(", "(", "-", "1", ",", "predicts", ".", "shape", "[", "2", "]", ")", ")", "\n", "return", "T", ".", "nnet", ".", "softmax", "(", "predicts_flatten", ")", ".", "reshape", "(", "(", "predicts", ".", "shape", "[", "0", "]", ",", "predicts", ".", "shape", "[", "1", "]", ",", "predicts", ".", "shape", "[", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.recurrent.GRUDecoder.get_padded_shuffled_mask": [[674, 686], ["theano.shape_padright", "theano.shape_padright", "theano.addbroadcast", "theano.addbroadcast", "theano.concatenate.dimshuffle", "theano.concatenate.astype", "alloc_zeros_matrix", "theano.concatenate", "theano.concatenate"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.alloc_zeros_matrix"], ["", "def", "get_padded_shuffled_mask", "(", "self", ",", "mask", ",", "pad", "=", "0", ")", ":", "\n", "        ", "assert", "mask", ",", "'mask cannot be None'", "\n", "# mask is (nb_samples, time)", "\n", "mask", "=", "T", ".", "shape_padright", "(", "mask", ")", "# (nb_samples, time, 1)", "\n", "mask", "=", "T", ".", "addbroadcast", "(", "mask", ",", "-", "1", ")", "# (time, nb_samples, 1) matrix.", "\n", "mask", "=", "mask", ".", "dimshuffle", "(", "1", ",", "0", ",", "2", ")", "# (time, nb_samples, 1)", "\n", "\n", "if", "pad", ">", "0", ":", "\n", "# left-pad in time with 0", "\n", "            ", "padding", "=", "alloc_zeros_matrix", "(", "pad", ",", "mask", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "mask", "=", "T", ".", "concatenate", "(", "[", "padding", ",", "mask", "]", ",", "axis", "=", "0", ")", "\n", "", "return", "mask", ".", "astype", "(", "'int8'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.convolution.Convolution2d.__init__": [[14, 34], ["core.Layer.__init__", "nn.get", "nn.get", "nn.get", "nn.get", "convolution.Convolution2d.init", "shared_zeros", "convolution.Convolution2d.set_name"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.theano_utils.shared_zeros", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Dense.set_name"], ["def", "__init__", "(", "self", ",", "max_sent_len", ",", "word_embed_dim", ",", "filter_num", ",", "filter_window_size", ",", "\n", "border_mode", "=", "'valid'", ",", "activation", "=", "'relu'", ",", "name", "=", "'Convolution2d'", ")", ":", "\n", "        ", "super", "(", "Convolution2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "init", "=", "initializations", ".", "get", "(", "'uniform'", ")", "\n", "self", ".", "activation", "=", "activations", ".", "get", "(", "activation", ")", "\n", "self", ".", "border_mode", "=", "border_mode", "\n", "\n", "self", ".", "W", "=", "self", ".", "init", "(", "(", "filter_num", ",", "1", ",", "filter_window_size", ",", "word_embed_dim", ")", ",", "scale", "=", "0.01", ",", "name", "=", "'W'", ")", "\n", "self", ".", "b", "=", "shared_zeros", "(", "(", "filter_num", ")", ",", "name", "=", "'b'", ")", "\n", "\n", "self", ".", "params", "=", "[", "self", ".", "W", ",", "self", ".", "b", "]", "\n", "\n", "if", "self", ".", "border_mode", "==", "'valid'", ":", "\n", "            ", "self", ".", "ds", "=", "(", "max_sent_len", "-", "filter_window_size", "+", "1", ",", "1", ")", "\n", "", "elif", "self", ".", "border_mode", "==", "'full'", ":", "\n", "            ", "self", ".", "ds", "=", "(", "max_sent_len", "+", "filter_window_size", "-", "1", ",", "1", ")", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "self", ".", "set_name", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.convolution.Convolution2d.__call__": [[35, 52], ["theano.tensor.nnet.conv.conv2d", "convolution.Convolution2d.activation", "theano.tensor.signal.pool.pool_2d", "output.flatten.flatten.flatten", "X.reshape", "convolution.Convolution2d.W.shape.eval", "convolution.Convolution2d.b.dimshuffle"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "X", ")", ":", "\n", "# X: (batch_size, max_sent_len, word_embed_dim)", "\n", "\n", "# valid: (batch_size, nb_filters, max_sent_len - filter_window_size + 1, 1)", "\n", "# full: (batch_size, nb_filters, max_sent_len + filter_window_size - 1, 1)", "\n", "        ", "conv_output", "=", "conv", ".", "conv2d", "(", "X", ".", "reshape", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ",", "X", ".", "shape", "[", "1", "]", ",", "X", ".", "shape", "[", "2", "]", ")", ")", ",", "\n", "filters", "=", "self", ".", "W", ",", "\n", "filter_shape", "=", "self", ".", "W", ".", "shape", ".", "eval", "(", ")", ",", "\n", "border_mode", "=", "self", ".", "border_mode", ")", "\n", "\n", "output", "=", "self", ".", "activation", "(", "conv_output", "+", "self", ".", "b", ".", "dimshuffle", "(", "(", "'x'", ",", "0", ",", "'x'", ",", "'x'", ")", ")", ")", "\n", "\n", "# (batch_size, nb_filters, 1, 1)", "\n", "output", "=", "pool", ".", "pool_2d", "(", "output", ",", "ds", "=", "self", ".", "ds", ",", "ignore_border", "=", "True", ",", "mode", "=", "'max'", ")", "\n", "# (batch_size, nb_filters)", "\n", "output", "=", "output", ".", "flatten", "(", "2", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.embeddings.Embedding.__init__": [[30, 42], ["core.Layer.__init__", "nn.get", "nn.get", "embeddings.Embedding.init", "embeddings.Embedding.set_name"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Dense.set_name"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "init", "=", "'uniform'", ",", "name", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "Embedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "init", "=", "initializations", ".", "get", "(", "init", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n", "self", ".", "W", "=", "self", ".", "init", "(", "(", "self", ".", "input_dim", ",", "self", ".", "output_dim", ")", ",", "scale", "=", "0.1", ")", "\n", "self", ".", "params", "=", "[", "self", ".", "W", "]", "\n", "\n", "if", "name", "is", "not", "None", ":", "\n", "            ", "self", ".", "set_name", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.embeddings.Embedding.get_output_mask": [[43, 45], ["T.ones_like", "T.eq"], "methods", ["None"], ["", "", "def", "get_output_mask", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "(", "T", ".", "ones_like", "(", "X", ")", "*", "(", "1", "-", "T", ".", "eq", "(", "X", ",", "0", ")", ")", ")", ".", "astype", "(", "'int8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.embeddings.Embedding.init_pretrained": [[46, 58], ["embeddings.Embedding.W.get_value", "set", "embeddings.get_embed_iter", "set.add"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.embeddings.get_embed_iter", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add"], ["", "def", "init_pretrained", "(", "self", ",", "file_path", ",", "vocab", ")", ":", "\n", "        ", "W", "=", "self", ".", "W", ".", "get_value", "(", "borrow", "=", "True", ")", "\n", "inited_words", "=", "set", "(", ")", "\n", "\n", "for", "word", ",", "embed", "in", "get_embed_iter", "(", "file_path", ")", ":", "\n", "            ", "if", "word", "in", "vocab", ":", "\n", "                ", "idx", "=", "vocab", "[", "word", "]", "\n", "W", "[", "idx", "]", "=", "embed", "\n", "\n", "inited_words", ".", "add", "(", "word", ")", "\n", "\n", "", "", "return", "inited_words", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.embeddings.Embedding.__call__": [[59, 65], ["embeddings.Embedding.get_output_mask"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.embeddings.HybridEmbedding.get_output_mask"], ["", "def", "__call__", "(", "self", ",", "X", ",", "mask_zero", "=", "False", ")", ":", "\n", "        ", "out", "=", "self", ".", "W", "[", "X", "]", "\n", "if", "mask_zero", ":", "\n", "            ", "return", "out", ",", "self", ".", "get_output_mask", "(", "X", ")", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.embeddings.HybridEmbedding.__init__": [[75, 94], ["core.Layer.__init__", "nn.get", "nn.get", "embeddings.HybridEmbedding.init", "embeddings.HybridEmbedding.init", "embeddings.HybridEmbedding.set_name"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.core.Dense.set_name"], ["def", "__init__", "(", "self", ",", "embed_size", ",", "unfixed_embed_size", ",", "embed_dim", ",", "init", "=", "'uniform'", ",", "name", "=", "'HybridEmbedding'", ")", ":", "\n", "\n", "        ", "super", "(", "HybridEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "init", "=", "initializations", ".", "get", "(", "init", ")", "\n", "\n", "self", ".", "unfixed_embed_size", "=", "unfixed_embed_size", "\n", "\n", "self", ".", "W_unfixed", "=", "self", ".", "init", "(", "(", "embed_size", ",", "embed_dim", ")", ")", "\n", "self", ".", "W_fixed", "=", "self", ".", "init", "(", "(", "embed_size", ",", "embed_dim", ")", ")", "\n", "self", ".", "W_fixed", ".", "name", "=", "'HybridEmbedding_fiexed_embed_matrix'", "\n", "\n", "# print W_fixed", "\n", "# for id, row in enumerate(self.W_fixed.get_value()):", "\n", "#     if id >= 400: print '[word %d]' % id, row", "\n", "\n", "self", ".", "params", "=", "[", "self", ".", "W_unfixed", "]", "\n", "\n", "if", "name", "is", "not", "None", ":", "\n", "            ", "self", ".", "set_name", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.embeddings.HybridEmbedding.get_output_mask": [[95, 97], ["T.ones_like", "T.eq"], "methods", ["None"], ["", "", "def", "get_output_mask", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "T", ".", "ones_like", "(", "X", ")", "*", "(", "1", "-", "T", ".", "eq", "(", "X", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.embeddings.HybridEmbedding.__call__": [[98, 106], ["T.lt", "T.switch", "T.shape_padright", "embeddings.HybridEmbedding.get_output_mask"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.embeddings.HybridEmbedding.get_output_mask"], ["", "def", "__call__", "(", "self", ",", "X", ",", "mask_zero", "=", "False", ")", ":", "\n", "        ", "cond", "=", "T", ".", "lt", "(", "X", ",", "self", ".", "unfixed_embed_size", ")", "\n", "out", "=", "T", ".", "switch", "(", "T", ".", "shape_padright", "(", "cond", ")", ",", "self", ".", "W_unfixed", "[", "X", "]", ",", "self", ".", "W_fixed", "[", "X", "]", ")", "\n", "\n", "if", "mask_zero", ":", "\n", "            ", "return", "out", ",", "self", ".", "get_output_mask", "(", "X", ")", "\n", "", "else", ":", "\n", "            ", "return", "out", "", "", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.layers.embeddings.get_embed_iter": [[11, 20], ["open", "line.strip.strip", "line.strip.split", "np.asarray", "float"], "function", ["None"], ["def", "get_embed_iter", "(", "file_path", ")", ":", "\n", "    ", "for", "line", "in", "open", "(", "file_path", ")", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "data", "=", "line", ".", "split", "(", "' '", ")", "\n", "\n", "word", "=", "data", "[", "0", "]", "\n", "embed", "=", "np", ".", "asarray", "(", "[", "float", "(", "e", ")", "for", "e", "in", "data", "[", "1", ":", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "yield", "word", ",", "embed", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.lang.grammar.Grammar.__init__": [[8, 50], ["collections.defaultdict", "collections.OrderedDict", "set", "set", "set", "next", "set", "collections.OrderedDict", "enumerate", "enumerate", "collections.OrderedDict", "logging.info", "logging.info", "logging.info", "logging.info", "grammar.Grammar.rule_index[].append", "set.add", "len", "iter", "len", "len", "set.add", "set.add", "lang.util.typename", "grammar.Grammar.rule_to_id.iteritems", "repr"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.iter", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.lang.util.typename", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.iteritems"], ["    ", "def", "__init__", "(", "self", ",", "rules", ")", ":", "\n", "        ", "\"\"\"\n        instantiate a grammar with a set of production rules of type Rule\n        \"\"\"", "\n", "self", ".", "rules", "=", "rules", "\n", "self", ".", "rule_index", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "rule_to_id", "=", "OrderedDict", "(", ")", "\n", "\n", "node_types", "=", "set", "(", ")", "\n", "lhs_nodes", "=", "set", "(", ")", "\n", "rhs_nodes", "=", "set", "(", ")", "\n", "for", "rule", "in", "self", ".", "rules", ":", "\n", "            ", "self", ".", "rule_index", "[", "rule", ".", "parent", "]", ".", "append", "(", "rule", ")", "\n", "\n", "# we also store all unique node types", "\n", "for", "node", "in", "rule", ".", "nodes", ":", "\n", "                ", "node_types", ".", "add", "(", "typename", "(", "node", ".", "type", ")", ")", "\n", "\n", "", "lhs_nodes", ".", "add", "(", "rule", ".", "parent", ")", "\n", "for", "child", "in", "rule", ".", "children", ":", "\n", "                ", "rhs_nodes", ".", "add", "(", "child", ".", "as_type_node", ")", "\n", "\n", "", "", "root_node", "=", "lhs_nodes", "-", "rhs_nodes", "\n", "assert", "len", "(", "root_node", ")", "==", "1", "\n", "self", ".", "root_node", "=", "next", "(", "iter", "(", "root_node", ")", ")", "\n", "\n", "self", ".", "terminal_nodes", "=", "rhs_nodes", "-", "lhs_nodes", "\n", "self", ".", "terminal_types", "=", "set", "(", "[", "n", ".", "type", "for", "n", "in", "self", ".", "terminal_nodes", "]", ")", "\n", "\n", "self", ".", "node_type_to_id", "=", "OrderedDict", "(", ")", "\n", "for", "i", ",", "type", "in", "enumerate", "(", "node_types", ",", "start", "=", "0", ")", ":", "\n", "            ", "self", ".", "node_type_to_id", "[", "type", "]", "=", "i", "\n", "\n", "", "for", "gid", ",", "rule", "in", "enumerate", "(", "rules", ",", "start", "=", "0", ")", ":", "\n", "            ", "self", ".", "rule_to_id", "[", "rule", "]", "=", "gid", "\n", "\n", "", "self", ".", "id_to_rule", "=", "OrderedDict", "(", "(", "v", ",", "k", ")", "for", "(", "k", ",", "v", ")", "in", "self", ".", "rule_to_id", ".", "iteritems", "(", ")", ")", "\n", "\n", "logging", ".", "info", "(", "'num. rules: %d'", ",", "len", "(", "self", ".", "rules", ")", ")", "\n", "logging", ".", "info", "(", "'num. types: %d'", ",", "len", "(", "self", ".", "node_type_to_id", ")", ")", "\n", "logging", ".", "info", "(", "'root: %s'", ",", "self", ".", "root_node", ")", "\n", "logging", ".", "info", "(", "'terminals: %s'", ",", "', '", ".", "join", "(", "repr", "(", "n", ")", "for", "n", "in", "self", ".", "terminal_nodes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.lang.grammar.Grammar.__iter__": [[51, 53], ["grammar.Grammar.rules.__iter__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.lang.grammar.Grammar.__iter__"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "rules", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.lang.grammar.Grammar.__len__": [[54, 56], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "rules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.lang.grammar.Grammar.__getitem__": [[57, 63], ["astnode.ASTNode", "KeyError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "lhs", ")", ":", "\n", "        ", "key_node", "=", "ASTNode", "(", "lhs", ".", "type", ",", "None", ")", "# Rules are indexed by types only", "\n", "if", "key_node", "in", "self", ".", "rule_index", ":", "\n", "            ", "return", "self", ".", "rule_index", "[", "key_node", "]", "\n", "", "else", ":", "\n", "            ", "KeyError", "(", "'key=%s'", "%", "key_node", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.lang.grammar.Grammar.get_node_type_id": [[64, 75], ["isinstance", "lang.util.typename", "lang.util.typename"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.lang.util.typename", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.lang.util.typename"], ["", "", "def", "get_node_type_id", "(", "self", ",", "node", ")", ":", "\n", "        ", "from", "astnode", "import", "ASTNode", "\n", "\n", "if", "isinstance", "(", "node", ",", "ASTNode", ")", ":", "\n", "            ", "type_repr", "=", "typename", "(", "node", ".", "type", ")", "\n", "return", "self", ".", "node_type_to_id", "[", "type_repr", "]", "\n", "", "else", ":", "\n", "# assert isinstance(node, str)", "\n", "# it is a type", "\n", "            ", "type_repr", "=", "typename", "(", "node", ")", "\n", "return", "self", ".", "node_type_to_id", "[", "type_repr", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.lang.grammar.Grammar.is_terminal": [[76, 78], ["None"], "methods", ["None"], ["", "", "def", "is_terminal", "(", "self", ",", "node", ")", ":", "\n", "        ", "return", "node", ".", "type", "in", "self", ".", "terminal_types", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.lang.grammar.Grammar.is_value_node": [[79, 81], ["None"], "methods", ["None"], ["", "def", "is_value_node", "(", "self", ",", "node", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.lang.util.typename": [[2, 6], ["isinstance"], "function", ["None"], ["    ", "if", "s", "[", "0", "]", "in", "(", "'-'", ",", "'+'", ")", ":", "\n", "        ", "return", "s", "[", "1", ":", "]", ".", "isdigit", "(", ")", "\n", "", "return", "s", ".", "isdigit", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.lang.util.escape": [[7, 25], ["text.replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace", "text.replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace", "text.replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace", "text.replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace", "text.replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace", "text.replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace", "text.replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace", "text.replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace", "text.replace().replace().replace().replace().replace().replace().replace().replace().replace.replace"], "function", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.lang.util.unescape": [[26, 43], ["text.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace", "text.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace", "text.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace", "text.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace", "text.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace", "text.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace", "text.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace", "text.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace", "text.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace", "text.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace"], "function", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ifttt.grammar.IFTTTGrammar.__init__": [[4, 6], ["lang.grammar.Grammar.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["from", "astnode", "import", "ASTNode", "\n", "from", "lang", ".", "util", "import", "typename", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ifttt.grammar.IFTTTGrammar.is_value_node": [[7, 9], ["None"], "methods", ["None"], ["class", "Grammar", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "rules", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.sql_dataset.extract_grammar": [[22, 77], ["open", "print", "lang.sql.parse.get_grammar", "line.strip", "lang.sql.parse.parse", "parse_trees.append", "lang.sql.parse.parse_tree_to_python_ast", "astor.to_source", "astor.to_source", "open", "open", "rule.__repr__", "f.write", "f.write", "ast.parse", "lang.sql.parse.canonicalize_code", "tree.__repr__"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.FunctionType.__repr__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.FunctionType.__repr__"], ["def", "extract_grammar", "(", "code_file", ",", "prefix", "=", "'py'", ")", ":", "\n", "    ", "line_num", "=", "0", "\n", "parse_trees", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "code_file", ")", ":", "\n", "        ", "code", "=", "line", ".", "strip", "(", ")", "\n", "parse_tree", "=", "parse", "(", "code", ")", "\n", "\n", "# leaves = parse_tree.get_leaves()", "\n", "# for leaf in leaves:", "\n", "#     if not is_terminal_type(leaf.type):", "\n", "#         print parse_tree", "\n", "\n", "# parse_tree = add_root(parse_tree)", "\n", "\n", "parse_trees", ".", "append", "(", "parse_tree", ")", "\n", "\n", "# sanity check", "\n", "ast_tree", "=", "parse_tree_to_python_ast", "(", "parse_tree", ")", "\n", "ref_ast_tree", "=", "ast", ".", "parse", "(", "canonicalize_code", "(", "code", ")", ")", ".", "body", "[", "0", "]", "\n", "source1", "=", "astor", ".", "to_source", "(", "ast_tree", ")", "\n", "source2", "=", "astor", ".", "to_source", "(", "ref_ast_tree", ")", "\n", "\n", "assert", "source1", "==", "source2", "\n", "\n", "# check rules", "\n", "# rule_list = parse_tree.get_rule_list(include_leaf=True)", "\n", "# for rule in rule_list:", "\n", "#     if rule.parent.type == int and rule.children[0].type == int:", "\n", "#         # rule.parent.type == str and rule.children[0].type == str:", "\n", "#         pass", "\n", "\n", "# ast_tree = tree_to_ast(parse_tree)", "\n", "# print astor.to_source(ast_tree)", "\n", "# print parse_tree", "\n", "# except Exception as e:", "\n", "#     error_num += 1", "\n", "#     #pass", "\n", "#     #print e", "\n", "\n", "line_num", "+=", "1", "\n", "\n", "", "print", "(", "'total line of code: %d'", "%", "line_num", ")", "\n", "\n", "grammar", "=", "get_grammar", "(", "parse_trees", ")", "\n", "\n", "with", "open", "(", "prefix", "+", "'.grammar.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "rule", "in", "grammar", ":", "\n", "            ", "str", "=", "rule", ".", "__repr__", "(", ")", "\n", "f", ".", "write", "(", "str", "+", "'\\n'", ")", "\n", "\n", "", "", "with", "open", "(", "prefix", "+", "'.parse_trees.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "tree", "in", "parse_trees", ":", "\n", "            ", "f", ".", "write", "(", "tree", ".", "__repr__", "(", ")", "+", "'\\n'", ")", "\n", "\n", "", "", "return", "grammar", ",", "parse_trees", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.sql_dataset.rule_vs_node_stat": [[79, 96], ["open", "print", "print", "line.replace().strip", "lang.sql.parse.parse", "len", "lang.sql.parse.parse.get_productions", "len", "parse_trees.append", "list", "line.replace"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "rule_vs_node_stat", "(", ")", ":", "\n", "    ", "line_num", "=", "0", "\n", "parse_trees", "=", "[", "]", "\n", "code_file", "=", "'/Users/yinpengcheng/Research/SemanticParsing/CodeGeneration/card_datasets/hearthstone/all_hs.out'", "# '/Users/yinpengcheng/Research/SemanticParsing/CodeGeneration/en-django/all.code'", "\n", "node_nums", "=", "rule_nums", "=", "0.", "\n", "for", "line", "in", "open", "(", "code_file", ")", ":", "\n", "        ", "code", "=", "line", ".", "replace", "(", "'\u00a7'", ",", "'\\n'", ")", ".", "strip", "(", ")", "\n", "parse_tree", "=", "parse", "(", "code", ")", "\n", "node_nums", "+=", "len", "(", "list", "(", "parse_tree", ".", "nodes", ")", ")", "\n", "rules", ",", "_", "=", "parse_tree", ".", "get_productions", "(", ")", "\n", "rule_nums", "+=", "len", "(", "rules", ")", "\n", "parse_trees", ".", "append", "(", "parse_tree", ")", "\n", "\n", "line_num", "+=", "1", "\n", "\n", "", "print", "(", "'avg. nums of nodes: %f'", "%", "(", "node_nums", "/", "line_num", ")", ")", "\n", "print", "(", "'avg. nums of rules: %f'", "%", "(", "rule_nums", "/", "line_num", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.sql_dataset.process_heart_stone_dataset": [[98, 134], ["open", "lang.sql.parse.get_grammar", "print", "line.replace().strip", "lang.sql.parse.parse", "lang.sql.parse.parse_tree_to_python_ast", "astor.to_source", "ast.parse", "astor.to_source", "lang.sql.parse.parse.get_productions", "len", "parse_trees.append", "open", "open", "RuntimeError", "rule.__repr__", "f.write", "f.write", "line.replace", "tree.__repr__"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.FunctionType.__repr__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.FunctionType.__repr__"], ["", "def", "process_heart_stone_dataset", "(", ")", ":", "\n", "    ", "data_file", "=", "'/Users/yinpengcheng/Research/SemanticParsing/CodeGeneration/card_datasets/hearthstone/all_hs.out'", "\n", "parse_trees", "=", "[", "]", "\n", "rule_num", "=", "0.", "\n", "example_num", "=", "0", "\n", "for", "line", "in", "open", "(", "data_file", ")", ":", "\n", "        ", "code", "=", "line", ".", "replace", "(", "'\u00a7'", ",", "'\\n'", ")", ".", "strip", "(", ")", "\n", "parse_tree", "=", "parse", "(", "code", ")", "\n", "# sanity check", "\n", "pred_ast", "=", "parse_tree_to_python_ast", "(", "parse_tree", ")", "\n", "pred_code", "=", "astor", ".", "to_source", "(", "pred_ast", ")", "\n", "ref_ast", "=", "ast", ".", "parse", "(", "code", ")", "\n", "ref_code", "=", "astor", ".", "to_source", "(", "ref_ast", ")", "\n", "\n", "if", "pred_code", "!=", "ref_code", ":", "\n", "            ", "raise", "RuntimeError", "(", "'code mismatch!'", ")", "\n", "\n", "", "rules", ",", "_", "=", "parse_tree", ".", "get_productions", "(", "include_value_node", "=", "False", ")", "\n", "rule_num", "+=", "len", "(", "rules", ")", "\n", "example_num", "+=", "1", "\n", "\n", "parse_trees", ".", "append", "(", "parse_tree", ")", "\n", "\n", "", "grammar", "=", "get_grammar", "(", "parse_trees", ")", "\n", "\n", "with", "open", "(", "'hs.grammar.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "rule", "in", "grammar", ":", "\n", "            ", "str", "=", "rule", ".", "__repr__", "(", ")", "\n", "f", ".", "write", "(", "str", "+", "'\\n'", ")", "\n", "\n", "", "", "with", "open", "(", "'hs.parse_trees.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "tree", "in", "parse_trees", ":", "\n", "            ", "f", ".", "write", "(", "tree", ".", "__repr__", "(", ")", "+", "'\\n'", ")", "\n", "\n", "\n", "", "", "print", "(", "'avg. nums of rules: %f'", "%", "(", "rule_num", "/", "example_num", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.sql_dataset.canonicalize_sql_example": [[136, 152], ["re.sub", "nltk.word_tokenize", "lang.sql.parse.parse_raw"], "function", ["None"], ["", "def", "canonicalize_sql_example", "(", "query", ",", "sql", ",", "ast", ")", ":", "\n", "    ", "query", "=", "re", ".", "sub", "(", "r'<.*?>'", ",", "''", ",", "query", ")", "\n", "query_tokens", "=", "nltk", ".", "word_tokenize", "(", "query", ")", "\n", "\n", "# sql = sql.replace('\u00a7', '\\n').strip()", "\n", "\n", "# sanity check", "\n", "parse_tree", "=", "parse_raw", "(", "ast", ")", "\n", "# gold_ast_tree = ast.parse(sql).body[0]", "\n", "# gold_source = astor.to_source(gold_ast_tree)", "\n", "# ast_tree = parse_tree_to_python_ast(parse_tree)", "\n", "# pred_source = astor.to_source(ast_tree)", "\n", "\n", "# assert gold_source == pred_source, 'sanity check fails: gold=[%s], actual=[%s]' % (gold_source, pred_source)", "\n", "\n", "return", "query_tokens", ",", "sql", ",", "parse_tree", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.sql_dataset.preprocess_sql_dataset": [[154, 185], ["open", "json.load", "json.load", "enumerate", "open.close", "print", "open", "open", "zip", "item[].lower", "sql_dataset.canonicalize_sql_example", "examples.append", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.sql_dataset.canonicalize_sql_example", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "preprocess_sql_dataset", "(", "data_file", ",", "ast_file", ")", ":", "\n", "    ", "f", "=", "open", "(", "'sql_dataset.examples.txt'", ",", "'w'", ")", "\n", "ast_data", "=", "json", ".", "load", "(", "open", "(", "ast_file", ",", "'r'", ")", ")", "\n", "data", "=", "json", ".", "load", "(", "open", "(", "data_file", ")", ")", "\n", "ast_data", "=", "ast_data", "[", "\"statement\"", "]", "\n", "examples", "=", "[", "]", "\n", "# print len(ast_data)", "\n", "for", "idx", ",", "(", "item", ",", "ast", ")", "in", "enumerate", "(", "zip", "(", "data", ",", "ast_data", ")", ")", ":", "\n", "# print(item)", "\n", "        ", "nl", "=", "item", "[", "\"question\"", "]", ".", "lower", "(", ")", "\n", "sql", "=", "\" \"", ".", "join", "(", "item", "[", "\"query_toks_no_value\"", "]", ")", "\n", "\n", "clean_query_tokens", ",", "clean_code", ",", "parse_tree", "=", "canonicalize_sql_example", "(", "nl", ",", "sql", ",", "ast", ")", "\n", "example", "=", "{", "'id'", ":", "idx", ",", "'query_tokens'", ":", "clean_query_tokens", ",", "'code'", ":", "clean_code", ",", "'parse_tree'", ":", "parse_tree", ",", "\n", "'str_map'", ":", "None", ",", "'raw_code'", ":", "sql", ",", "'db_id'", ":", "item", "[", "\"db_id\"", "]", "}", "\n", "examples", ".", "append", "(", "example", ")", "\n", "\n", "f", ".", "write", "(", "'*'", "*", "50", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "'example# %d\\n'", "%", "idx", ")", "\n", "f", ".", "write", "(", "' '", ".", "join", "(", "clean_query_tokens", ")", ".", "encode", "(", "\"utf-8\"", ")", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "f", ".", "write", "(", "clean_code", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "'*'", "*", "50", "+", "'\\n'", ")", "\n", "\n", "idx", "+=", "1", "\n", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "print", "(", "'preprocess_dataset: cleaned example num: %d'", "%", "len", "(", "examples", ")", ")", "\n", "\n", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.sql_dataset.get_terminal_tokens": [[186, 200], ["re.sub().split", "_terminal_tokens.extend", "_terminal_tokens.append", "_terminal_str.split", "len", "re.sub"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "get_terminal_tokens", "(", "_terminal_str", ")", ":", "\n", "    ", "\"\"\"\n    get terminal tokens\n    break words like MinionCards into [Minion, Cards]\n    \"\"\"", "\n", "tmp_terminal_tokens", "=", "[", "t", "for", "t", "in", "_terminal_str", ".", "split", "(", "' '", ")", "if", "len", "(", "t", ")", ">", "0", "]", "\n", "_terminal_tokens", "=", "[", "]", "\n", "for", "token", "in", "tmp_terminal_tokens", ":", "\n", "        ", "sub_tokens", "=", "re", ".", "sub", "(", "r'([a-z])([A-Z])'", ",", "r'\\1 \\2'", ",", "token", ")", ".", "split", "(", "' '", ")", "\n", "_terminal_tokens", ".", "extend", "(", "sub_tokens", ")", "\n", "\n", "_terminal_tokens", ".", "append", "(", "' '", ")", "\n", "\n", "", "return", "_terminal_tokens", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.sql_dataset.load_table_schema_data": [[201, 220], ["json.load", "dict", "open", "set", "terminal_tokens.append", "terminal_tokens.append"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "load_table_schema_data", "(", "inputfile", ")", ":", "\n", "    ", "data", "=", "json", ".", "load", "(", "open", "(", "inputfile", ")", ")", "\n", "terminal_tokens", "=", "[", "]", "\n", "db_dict", "=", "dict", "(", ")", "\n", "for", "db", "in", "data", ":", "\n", "        ", "db_dict", "[", "db", "[", "\"db_id\"", "]", "]", "=", "db", "\n", "for", "col", "in", "db", "[", "\"column_names_original\"", "]", ":", "\n", "# terminal_tokens = get_terminal_tokens(col)", "\n", "\n", "# for terminal_token in terminal_tokens:", "\n", "#     assert len(terminal_token) > 0", "\n", "            ", "terminal_tokens", ".", "append", "(", "col", "[", "1", "]", ")", "\n", "", "for", "table", "in", "db", "[", "\"table_names_original\"", "]", ":", "\n", "# terminal_tokens = get_terminal_tokens(table)", "\n", "\n", "# for terminal_token in terminal_tokens:", "\n", "#     assert len(terminal_token) > 0", "\n", "            ", "terminal_tokens", ".", "append", "(", "table", ")", "\n", "", "", "return", "db_dict", ",", "set", "(", "terminal_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.sql_dataset.gen_db_mask": [[221, 236], ["dict", "json.load", "open", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load"], ["", "def", "gen_db_mask", "(", "vocab", ",", "non_schema_vocab_size", ",", "db_file", ")", ":", "\n", "    ", "db_dict", "=", "dict", "(", ")", "\n", "vocab_size", "=", "vocab", ".", "size", "\n", "data", "=", "json", ".", "load", "(", "open", "(", "db_file", ")", ")", "\n", "for", "db", "in", "data", ":", "\n", "        ", "mask", "=", "np", ".", "zeros", "(", "vocab_size", ",", "dtype", "=", "'int32'", ")", "\n", "mask", "[", ":", "non_schema_vocab_size", "]", "=", "1", "\n", "for", "col", "in", "db", "[", "\"column_names_original\"", "]", ":", "\n", "            ", "idx", "=", "vocab", "[", "col", "[", "1", "]", "]", "\n", "mask", "[", "idx", "]", "=", "1", "\n", "", "for", "table", "in", "db", "[", "\"table_names_original\"", "]", ":", "\n", "            ", "idx", "=", "vocab", "[", "table", "]", "\n", "mask", "[", "idx", "]", "=", "1", "\n", "", "db_dict", "[", "db", "[", "\"db_id\"", "]", "]", "=", "mask", "\n", "", "return", "db_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.sql_dataset.parse_train_dataset": [[237, 424], ["sql_dataset.preprocess_sql_dataset", "sql_dataset.preprocess_sql_dataset", "sql_dataset.preprocess_sql_dataset", "print", "lang.sql.parse.get_grammar", "list", "dataset.gen_vocab", "dataset.gen_vocab", "sql_dataset.load_table_schema_data", "dataset.gen_schema_vocab", "sql_dataset.gen_db_mask", "dataset.DataSet", "dataset.DataSet", "dataset.DataSet", "enumerate", "max", "max", "logging.info", "logging.info", "logging.info", "logging.info", "dataset.DataSet.init_data_matrices", "dataset.DataSet.init_data_matrices", "dataset.DataSet.init_data_matrices", "print", "print", "print", "nn.utils.io_utils.serialize_to_file", "open", "itertools.chain", "parse_tree.get_leaves", "parse_tree.get_productions", "dict", "enumerate", "dataset.DataEntry", "all_examples.append", "len", "len", "f.write", "lang.sql.parse.get_grammar.is_value_node", "len", "dataset.DataSet.add", "len", "len", "len", "str", "sql_dataset.get_terminal_tokens", "lang.sql.parse.get_grammar.is_value_node", "len", "dataset.Action", "actions.append", "str", "sql_dataset.get_terminal_tokens", "actions.append", "dataset.DataSet.add", "dataset.DataSet.add", "rule.__repr__", "all_terminal_tokens.append", "actions.append", "dataset.Action", "len", "query_tokens.index", "dataset.Action", "dataset.Action", "dataset.Action"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.sql_dataset.preprocess_sql_dataset", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.sql_dataset.preprocess_sql_dataset", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.sql_dataset.preprocess_sql_dataset", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.sql_dataset.load_table_schema_data", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.sql_dataset.gen_db_mask", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.serialize_to_file", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.py.grammar.PythonGrammar.is_value_node", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.sql_dataset.get_terminal_tokens", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.py.grammar.PythonGrammar.is_value_node", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.sql_dataset.get_terminal_tokens", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.FunctionType.__repr__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["", "def", "parse_train_dataset", "(", "args", ")", ":", "\n", "    ", "MAX_QUERY_LENGTH", "=", "70", "# FIXME: figure out the best config!", "\n", "WORD_FREQ_CUT_OFF", "=", "0", "\n", "\n", "# nl_file = './data/mix.nl'", "\n", "# sql_file = './data/mix-1.sql'", "\n", "# data_file = './data/train.json'", "\n", "# ast_file = './data/mix.json'", "\n", "train_data", "=", "preprocess_sql_dataset", "(", "args", ".", "train_data", ",", "args", ".", "train_data_ast", ")", "\n", "dev_data", "=", "preprocess_sql_dataset", "(", "args", ".", "dev_data", ",", "args", ".", "dev_data_ast", ")", "\n", "test_data", "=", "preprocess_sql_dataset", "(", "args", ".", "test_data", ",", "args", ".", "test_data_ast", ")", "\n", "data", "=", "train_data", "+", "dev_data", "+", "test_data", "\n", "print", "(", "\"data size: {}\"", ".", "format", "(", "len", "(", "data", ")", ")", ")", "\n", "parse_trees", "=", "[", "e", "[", "'parse_tree'", "]", "for", "e", "in", "data", "]", "\n", "\n", "# apply unary closures", "\n", "# unary_closures = get_top_unary_closures(parse_trees, k=20)", "\n", "# for parse_tree in parse_trees:", "\n", "#     apply_unary_closures(parse_tree, unary_closures)", "\n", "\n", "# build the grammar", "\n", "grammar", "=", "get_grammar", "(", "parse_trees", ")", "\n", "\n", "with", "open", "(", "'sql.grammar.unary_closure.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "rule", "in", "grammar", ":", "\n", "            ", "f", ".", "write", "(", "rule", ".", "__repr__", "(", ")", "+", "'\\n'", ")", "\n", "\n", "", "", "nl_tokens", "=", "list", "(", "chain", "(", "*", "[", "e", "[", "'query_tokens'", "]", "for", "e", "in", "data", "]", ")", ")", "\n", "nl_vocab", "=", "gen_vocab", "(", "nl_tokens", ",", "vocab_size", "=", "5000", ",", "freq_cutoff", "=", "WORD_FREQ_CUT_OFF", ")", "\n", "\n", "\n", "# enumerate all terminal tokens to build up the terminal tokens vocabulary", "\n", "all_terminal_tokens", "=", "[", "]", "\n", "for", "entry", "in", "data", ":", "\n", "        ", "parse_tree", "=", "entry", "[", "'parse_tree'", "]", "\n", "for", "node", "in", "parse_tree", ".", "get_leaves", "(", ")", ":", "\n", "            ", "if", "grammar", ".", "is_value_node", "(", "node", ")", ":", "\n", "                ", "terminal_val", "=", "node", ".", "value", "\n", "terminal_str", "=", "str", "(", "terminal_val", ")", "\n", "\n", "terminal_tokens", "=", "get_terminal_tokens", "(", "terminal_str", ")", "\n", "\n", "for", "terminal_token", "in", "terminal_tokens", ":", "\n", "                    ", "assert", "len", "(", "terminal_token", ")", ">", "0", "\n", "all_terminal_tokens", ".", "append", "(", "terminal_token", ")", "\n", "\n", "# print all_terminal_tokens", "\n", "", "", "", "", "table_schema", "=", "args", ".", "table_schema", "\n", "\n", "terminal_vocab", "=", "gen_vocab", "(", "all_terminal_tokens", ",", "vocab_size", "=", "5000", ",", "freq_cutoff", "=", "WORD_FREQ_CUT_OFF", ")", "\n", "non_schema_vocab_size", "=", "terminal_vocab", ".", "size", "\n", "db_dict", ",", "schema_vocab", "=", "load_table_schema_data", "(", "table_schema", ")", "\n", "terminal_vocab", "=", "gen_schema_vocab", "(", "schema_vocab", ",", "terminal_vocab", ")", "\n", "db_mask", "=", "gen_db_mask", "(", "terminal_vocab", ",", "non_schema_vocab_size", ",", "table_schema", ")", "\n", "\n", "# print terminal_vocab", "\n", "# now generate the dataset!", "\n", "# print(terminal_vocab)", "\n", "# print(terminal_vocab.token_id_map.keys())", "\n", "train_data", "=", "DataSet", "(", "nl_vocab", ",", "terminal_vocab", ",", "grammar", ",", "db_mask", ",", "'sql.train_data'", ")", "\n", "dev_data", "=", "DataSet", "(", "nl_vocab", ",", "terminal_vocab", ",", "grammar", ",", "db_mask", ",", "'sql.dev_data'", ")", "\n", "test_data", "=", "DataSet", "(", "nl_vocab", ",", "terminal_vocab", ",", "grammar", ",", "db_mask", ",", "'sql.test_data'", ")", "\n", "\n", "all_examples", "=", "[", "]", "\n", "\n", "can_fully_reconstructed_examples_num", "=", "0", "\n", "examples_with_empty_actions_num", "=", "0", "\n", "# print(list(terminal_vocab.iteritems()))", "\n", "\n", "for", "index", ",", "entry", "in", "enumerate", "(", "data", ")", ":", "\n", "        ", "idx", "=", "entry", "[", "'id'", "]", "\n", "query_tokens", "=", "entry", "[", "'query_tokens'", "]", "\n", "code", "=", "entry", "[", "'code'", "]", "\n", "parse_tree", "=", "entry", "[", "'parse_tree'", "]", "\n", "\n", "rule_list", ",", "rule_parents", "=", "parse_tree", ".", "get_productions", "(", "include_value_node", "=", "True", ")", "\n", "\n", "actions", "=", "[", "]", "\n", "can_fully_reconstructed", "=", "True", "\n", "rule_pos_map", "=", "dict", "(", ")", "\n", "\n", "for", "rule_count", ",", "rule", "in", "enumerate", "(", "rule_list", ")", ":", "\n", "# if rule_count == 116:", "\n", "#     continue", "\n", "            ", "if", "not", "grammar", ".", "is_value_node", "(", "rule", ".", "parent", ")", ":", "\n", "                ", "assert", "rule", ".", "value", "is", "None", ",", "rule", ".", "value", "\n", "parent_rule", "=", "rule_parents", "[", "(", "rule_count", ",", "rule", ")", "]", "[", "0", "]", "\n", "if", "parent_rule", ":", "\n", "                    ", "parent_t", "=", "rule_pos_map", "[", "parent_rule", "]", "\n", "", "else", ":", "\n", "                    ", "parent_t", "=", "0", "\n", "\n", "", "rule_pos_map", "[", "rule", "]", "=", "len", "(", "actions", ")", "\n", "\n", "d", "=", "{", "'rule'", ":", "rule", ",", "'parent_t'", ":", "parent_t", ",", "'parent_rule'", ":", "parent_rule", "}", "\n", "action", "=", "Action", "(", "APPLY_RULE", ",", "d", ")", "\n", "\n", "actions", ".", "append", "(", "action", ")", "\n", "", "else", ":", "\n", "                ", "assert", "rule", ".", "is_leaf", ",", "(", "rule", ".", "type", ",", "rule", ".", "value", ",", "rule", ".", "label", ")", "\n", "\n", "parent_rule", "=", "rule_parents", "[", "(", "rule_count", ",", "rule", ")", "]", "[", "0", "]", "\n", "parent_t", "=", "rule_pos_map", "[", "parent_rule", "]", "\n", "\n", "terminal_val", "=", "rule", ".", "value", "\n", "terminal_str", "=", "str", "(", "terminal_val", ")", "\n", "terminal_tokens", "=", "get_terminal_tokens", "(", "terminal_str", ")", "\n", "\n", "# assert len(terminal_tokens) > 0", "\n", "\n", "for", "terminal_token", "in", "terminal_tokens", ":", "\n", "                    ", "term_tok_id", "=", "terminal_vocab", "[", "terminal_token", "]", "\n", "tok_src_idx", "=", "-", "1", "\n", "try", ":", "\n", "                        ", "tok_src_idx", "=", "query_tokens", ".", "index", "(", "terminal_token", ")", "\n", "", "except", "ValueError", ":", "\n", "                        ", "pass", "\n", "\n", "", "d", "=", "{", "'literal'", ":", "terminal_token", ",", "'rule'", ":", "rule", ",", "'parent_rule'", ":", "parent_rule", ",", "'parent_t'", ":", "parent_t", "}", "\n", "\n", "# cannot copy, only generation", "\n", "# could be unk!", "\n", "if", "tok_src_idx", "<", "0", "or", "tok_src_idx", ">=", "MAX_QUERY_LENGTH", ":", "\n", "                        ", "action", "=", "Action", "(", "GEN_TOKEN", ",", "d", ")", "\n", "if", "terminal_token", "not", "in", "terminal_vocab", ":", "\n", "                            ", "if", "terminal_token", "not", "in", "query_tokens", ":", "\n", "# print terminal_token", "\n", "                                ", "can_fully_reconstructed", "=", "False", "\n", "", "", "", "else", ":", "# copy", "\n", "                        ", "if", "term_tok_id", "!=", "terminal_vocab", ".", "unk", ":", "\n", "                            ", "d", "[", "'source_idx'", "]", "=", "tok_src_idx", "\n", "action", "=", "Action", "(", "GEN_COPY_TOKEN", ",", "d", ")", "\n", "", "else", ":", "\n", "                            ", "d", "[", "'source_idx'", "]", "=", "tok_src_idx", "\n", "action", "=", "Action", "(", "COPY_TOKEN", ",", "d", ")", "\n", "\n", "", "", "actions", ".", "append", "(", "action", ")", "\n", "\n", "", "d", "=", "{", "'literal'", ":", "'<eos>'", ",", "'rule'", ":", "rule", ",", "'parent_rule'", ":", "parent_rule", ",", "'parent_t'", ":", "parent_t", "}", "\n", "actions", ".", "append", "(", "Action", "(", "GEN_TOKEN", ",", "d", ")", ")", "\n", "\n", "", "", "if", "len", "(", "actions", ")", "==", "0", ":", "\n", "            ", "examples_with_empty_actions_num", "+=", "1", "\n", "continue", "\n", "", "mask", "=", "db_mask", "[", "entry", "[", "'db_id'", "]", "]", "\n", "example", "=", "DataEntry", "(", "idx", ",", "query_tokens", ",", "parse_tree", ",", "code", ",", "actions", ",", "mask", ",", "{", "'str_map'", ":", "None", ",", "'raw_code'", ":", "entry", "[", "'raw_code'", "]", "}", ")", "\n", "\n", "if", "can_fully_reconstructed", ":", "\n", "            ", "can_fully_reconstructed_examples_num", "+=", "1", "\n", "\n", "# train, valid, test splits", "\n", "", "if", "0", "<=", "index", "<", "args", ".", "train_data_size", ":", "\n", "            ", "train_data", ".", "add", "(", "example", ")", "\n", "", "elif", "index", "<", "args", ".", "train_data_size", "+", "args", ".", "dev_data_size", ":", "\n", "            ", "dev_data", ".", "add", "(", "example", ")", "\n", "", "else", ":", "\n", "            ", "test_data", ".", "add", "(", "example", ")", "\n", "\n", "", "all_examples", ".", "append", "(", "example", ")", "\n", "# print(\"test data size {}\".format(len(test_data)))", "\n", "# print statistics", "\n", "", "max_query_len", "=", "max", "(", "len", "(", "e", ".", "query", ")", "for", "e", "in", "all_examples", ")", "\n", "max_actions_len", "=", "max", "(", "len", "(", "e", ".", "actions", ")", "for", "e", "in", "all_examples", ")", "\n", "\n", "# serialize_to_file([len(e.query) for e in all_examples], 'query.len')", "\n", "# serialize_to_file([len(e.actions) for e in all_examples], 'actions.len')", "\n", "\n", "logging", ".", "info", "(", "'examples that can be fully reconstructed: %d/%d=%f'", ",", "\n", "can_fully_reconstructed_examples_num", ",", "len", "(", "all_examples", ")", ",", "\n", "can_fully_reconstructed_examples_num", "/", "len", "(", "all_examples", ")", ")", "\n", "logging", ".", "info", "(", "'empty_actions_count: %d'", ",", "examples_with_empty_actions_num", ")", "\n", "\n", "logging", ".", "info", "(", "'max_query_len: %d'", ",", "max_query_len", ")", "\n", "logging", ".", "info", "(", "'max_actions_len: %d'", ",", "max_actions_len", ")", "\n", "\n", "train_data", ".", "init_data_matrices", "(", "max_query_length", "=", "70", ",", "max_example_action_num", "=", "350", ")", "\n", "dev_data", ".", "init_data_matrices", "(", "max_query_length", "=", "70", ",", "max_example_action_num", "=", "350", ")", "\n", "test_data", ".", "init_data_matrices", "(", "max_query_length", "=", "70", ",", "max_example_action_num", "=", "350", ")", "\n", "\n", "# serialize_to_file((train_data, dev_data, test_data),", "\n", "#                   './data/sql.freq{WORD_FREQ_CUT_OFF}.max_action350.pre_suf.unary_closure.bin'.format(WORD_FREQ_CUT_OFF=WORD_FREQ_CUT_OFF))", "\n", "print", "(", "\"train data size:{}\"", ".", "format", "(", "train_data", ".", "count", ")", ")", "\n", "print", "(", "\"dev data size:{}\"", ".", "format", "(", "dev_data", ".", "count", ")", ")", "\n", "print", "(", "\"test data size:{}\"", ".", "format", "(", "test_data", ".", "count", ")", ")", "\n", "serialize_to_file", "(", "(", "train_data", ",", "dev_data", ",", "test_data", ")", ",", "\n", "args", ".", "output_path", ")", "\n", "return", "train_data", ",", "dev_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.sql_dataset.dump_data_for_evaluation": [[606, 637], ["nn.utils.io_utils.deserialize_from_file", "open", "open", "open.close", "open.close", "lang.sql.parse.de_canonicalize_code_for_seq2seq.strip", "lang.sql.parse.tokenize_code_adv", "open.write", "open.write", "lang.sql.parse.de_canonicalize_code_for_seq2seq", "tk.replace"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.io_utils.deserialize_from_file", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close"], ["", "def", "dump_data_for_evaluation", "(", "data_type", "=", "'django'", ",", "data_file", "=", "''", ",", "max_query_length", "=", "70", ")", ":", "\n", "    ", "train_data", ",", "dev_data", ",", "test_data", "=", "deserialize_from_file", "(", "data_file", ")", "\n", "prefix", "=", "'/Users/yinpengcheng/Projects/dl4mt-tutorial/codegen_data/'", "\n", "for", "dataset", ",", "output", "in", "[", "(", "train_data", ",", "prefix", "+", "'%s.train'", "%", "data_type", ")", ",", "\n", "(", "dev_data", ",", "prefix", "+", "'%s.dev'", "%", "data_type", ")", ",", "\n", "(", "test_data", ",", "prefix", "+", "'%s.test'", "%", "data_type", ")", "]", ":", "\n", "        ", "f_source", "=", "open", "(", "output", "+", "'.desc'", ",", "'w'", ")", "\n", "f_target", "=", "open", "(", "output", "+", "'.code'", ",", "'w'", ")", "\n", "\n", "for", "e", "in", "dataset", ".", "examples", ":", "\n", "            ", "query_tokens", "=", "e", ".", "query", "[", ":", "max_query_length", "]", "\n", "code", "=", "e", ".", "code", "\n", "if", "data_type", "==", "'django'", ":", "\n", "                ", "target_code", "=", "de_canonicalize_code_for_seq2seq", "(", "code", ",", "e", ".", "meta_data", "[", "'raw_code'", "]", ")", "\n", "", "else", ":", "\n", "                ", "target_code", "=", "code", "\n", "\n", "# tokenize code", "\n", "", "target_code", "=", "target_code", ".", "strip", "(", ")", "\n", "tokenized_target", "=", "tokenize_code_adv", "(", "target_code", ",", "breakCamelStr", "=", "False", "if", "data_type", "==", "'django'", "else", "True", ")", "\n", "tokenized_target", "=", "[", "tk", ".", "replace", "(", "'\\n'", ",", "'#NEWLINE#'", ")", "for", "tk", "in", "tokenized_target", "]", "\n", "tokenized_target", "=", "[", "tk", "for", "tk", "in", "tokenized_target", "if", "tk", "is", "not", "None", "]", "\n", "\n", "while", "tokenized_target", "[", "-", "1", "]", "==", "'#INDENT#'", ":", "\n", "                ", "tokenized_target", "=", "tokenized_target", "[", ":", "-", "1", "]", "\n", "\n", "", "f_source", ".", "write", "(", "' '", ".", "join", "(", "query_tokens", ")", "+", "'\\n'", ")", "\n", "f_target", ".", "write", "(", "' '", ".", "join", "(", "tokenized_target", ")", "+", "'\\n'", ")", "\n", "\n", "", "f_source", ".", "close", "(", ")", "\n", "f_target", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.grammar.SQLGrammar.__init__": [[813, 815], ["lang.grammar.Grammar.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.grammar.SQLGrammar.is_value_node": [[816, 818], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.grammar.is_builtin_type": [[704, 706], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.grammar.type_str_to_type": [[777, 779], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.grammar.is_compositional_leaf": [[796, 810], ["ast.iter_fields", "isinstance", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.plot-1.indexesFromSentence": [[53, 55], ["sentence.split", "prepare_data.EOS_token"], "function", ["None"], ["def", "indexesFromSentence", "(", "lang", ",", "sentence", ")", ":", "\n", "    ", "return", "[", "lang", ".", "word2index", "[", "word", "]", "for", "word", "in", "sentence", ".", "split", "(", "' '", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.plot-1.variableFromSentence": [[57, 65], ["plot-1.indexesFromSentence", "indexesFromSentence.append", "torch.autograd.Variable", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.autograd.Variable.cuda", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.plot-1.indexesFromSentence", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.cuda"], ["", "def", "variableFromSentence", "(", "lang", ",", "sentence", ")", ":", "\n", "    ", "indexes", "=", "indexesFromSentence", "(", "lang", ",", "sentence", ")", "\n", "indexes", ".", "append", "(", "EOS_token", ")", "\n", "result", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "indexes", ")", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "return", "result", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.plot-1.variablesFromPair": [[67, 71], ["plot-1.variableFromSentence", "plot-1.variableFromSentence"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.plot-1.variableFromSentence", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.plot-1.variableFromSentence"], ["", "", "def", "variablesFromPair", "(", "pair", ")", ":", "\n", "    ", "input_variable", "=", "variableFromSentence", "(", "input_lang", ",", "pair", "[", "0", "]", ")", "\n", "target_variable", "=", "variableFromSentence", "(", "output_lang", ",", "pair", "[", "1", "]", ")", "\n", "return", "(", "input_variable", ",", "target_variable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.plot-1.train": [[103, 166], ["encoder.initHidden", "encoder_optimizer.zero_grad", "decoder_optimizer.zero_grad", "torch.autograd.Variable", "range", "torch.autograd.Variable", "loss.backward", "encoder_optimizer.step", "decoder_optimizer.step", "input_variable.size", "target_variable.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.autograd.Variable.cuda", "encoder", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.autograd.Variable.cuda", "range", "range", "random.random", "criterion", "decoder_output.data.topk", "torch.autograd.Variable", "criterion", "decoder", "decoder", "decoder", "decoder", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.autograd.Variable.cuda"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.cuda", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.cuda", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.cuda"], ["def", "train", "(", "input_variable", ",", "target_variable", ",", "encoder", ",", "decoder", ",", "encoder_optimizer", ",", "decoder_optimizer", ",", "criterion", ",", "max_length", "=", "MAX_LENGTH", ",", "use_attention", "=", "True", ")", ":", "\n", "    ", "encoder_hidden", "=", "encoder", ".", "initHidden", "(", ")", "\n", "\n", "encoder_optimizer", ".", "zero_grad", "(", ")", "\n", "decoder_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "input_length", "=", "input_variable", ".", "size", "(", ")", "[", "0", "]", "\n", "target_length", "=", "target_variable", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "encoder_outputs", "=", "Variable", "(", "torch", ".", "zeros", "(", "max_length", ",", "encoder", ".", "hidden_size", ")", ")", "\n", "encoder_outputs", "=", "encoder_outputs", ".", "cuda", "(", ")", "if", "use_cuda", "else", "encoder_outputs", "\n", "\n", "loss", "=", "0", "\n", "\n", "for", "ei", "in", "range", "(", "input_length", ")", ":", "\n", "        ", "encoder_output", ",", "encoder_hidden", "=", "encoder", "(", "\n", "input_variable", "[", "ei", "]", ",", "encoder_hidden", ")", "\n", "encoder_outputs", "[", "ei", "]", "=", "encoder_output", "[", "0", "]", "[", "0", "]", "\n", "\n", "", "decoder_input", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "[", "[", "SOS_token", "]", "]", ")", ")", "\n", "decoder_input", "=", "decoder_input", ".", "cuda", "(", ")", "if", "use_cuda", "else", "decoder_input", "\n", "\n", "decoder_hidden", "=", "encoder_hidden", "\n", "\n", "use_teacher_forcing", "=", "True", "if", "random", ".", "random", "(", ")", "<", "teacher_forcing_ratio", "else", "False", "\n", "\n", "if", "use_teacher_forcing", ":", "\n", "# Teacher forcing: Feed the target as the next input", "\n", "        ", "for", "di", "in", "range", "(", "target_length", ")", ":", "\n", "            ", "if", "use_attention", ":", "\n", "                ", "decoder_output", ",", "decoder_hidden", ",", "decoder_attention", "=", "decoder", "(", "\n", "decoder_input", ",", "decoder_hidden", ",", "encoder_outputs", ")", "\n", "", "else", ":", "\n", "                ", "decoder_output", ",", "decoder_hidden", "=", "decoder", "(", "\n", "decoder_input", ",", "decoder_hidden", ")", "\n", "", "loss", "+=", "criterion", "(", "decoder_output", ",", "target_variable", "[", "di", "]", ")", "\n", "decoder_input", "=", "target_variable", "[", "di", "]", "# Teacher forcing", "\n", "\n", "", "", "else", ":", "\n", "# Without teacher forcing: use its own predictions as the next input", "\n", "        ", "for", "di", "in", "range", "(", "target_length", ")", ":", "\n", "            ", "if", "use_attention", ":", "\n", "                ", "decoder_output", ",", "decoder_hidden", ",", "decoder_attention", "=", "decoder", "(", "\n", "decoder_input", ",", "decoder_hidden", ",", "encoder_outputs", ")", "\n", "", "else", ":", "\n", "                ", "decoder_output", ",", "decoder_hidden", "=", "decoder", "(", "\n", "decoder_input", ",", "decoder_hidden", ")", "\n", "", "topv", ",", "topi", "=", "decoder_output", ".", "data", ".", "topk", "(", "1", ")", "\n", "ni", "=", "topi", "[", "0", "]", "[", "0", "]", "\n", "\n", "decoder_input", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "[", "[", "ni", "]", "]", ")", ")", "\n", "decoder_input", "=", "decoder_input", ".", "cuda", "(", ")", "if", "use_cuda", "else", "decoder_input", "\n", "\n", "loss", "+=", "criterion", "(", "decoder_output", ",", "target_variable", "[", "di", "]", ")", "\n", "if", "ni", "==", "EOS_token", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "loss", ".", "backward", "(", ")", "\n", "\n", "encoder_optimizer", ".", "step", "(", ")", "\n", "decoder_optimizer", ".", "step", "(", ")", "\n", "\n", "return", "loss", ".", "data", "[", "0", "]", "/", "target_length", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.plot-1.asMinutes": [[177, 181], ["math.floor"], "function", ["None"], ["def", "asMinutes", "(", "s", ")", ":", "\n", "    ", "m", "=", "math", ".", "floor", "(", "s", "/", "60", ")", "\n", "s", "-=", "m", "*", "60", "\n", "return", "'%dm %ds'", "%", "(", "m", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.plot-1.timeSince": [[183, 189], ["time.time", "plot-1.asMinutes", "plot-1.asMinutes"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.plot-1.asMinutes", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.plot-1.asMinutes"], ["", "def", "timeSince", "(", "since", ",", "percent", ")", ":", "\n", "    ", "now", "=", "time", ".", "time", "(", ")", "\n", "s", "=", "now", "-", "since", "\n", "es", "=", "s", "/", "(", "percent", ")", "\n", "rs", "=", "es", "-", "s", "\n", "return", "'%s (- %s)'", "%", "(", "asMinutes", "(", "s", ")", ",", "asMinutes", "(", "rs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.plot-1.trainIters": [[203, 235], ["time.time", "torch.optim.SGD", "torch.optim.SGD", "torch.NLLLoss", "range", "encoder.parameters", "decoder.parameters", "plot-1.variablesFromPair", "plot-1.train", "random.choice", "range", "print", "plot_losses.append", "plot-1.timeSince"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.plot-1.variablesFromPair", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.train", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.plot-1.timeSince"], ["", "def", "trainIters", "(", "encoder", ",", "decoder", ",", "n_iters", ",", "print_every", "=", "1000", ",", "plot_every", "=", "100", ",", "learning_rate", "=", "0.01", ",", "use_attention", "=", "True", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "plot_losses", "=", "[", "]", "\n", "print_loss_total", "=", "0", "# Reset every print_every", "\n", "plot_loss_total", "=", "0", "# Reset every plot_every", "\n", "\n", "encoder_optimizer", "=", "optim", ".", "SGD", "(", "encoder", ".", "parameters", "(", ")", ",", "lr", "=", "learning_rate", ")", "\n", "decoder_optimizer", "=", "optim", ".", "SGD", "(", "decoder", ".", "parameters", "(", ")", ",", "lr", "=", "learning_rate", ")", "\n", "training_pairs", "=", "[", "variablesFromPair", "(", "random", ".", "choice", "(", "train_pairs", ")", ")", "\n", "for", "i", "in", "range", "(", "n_iters", ")", "]", "\n", "criterion", "=", "nn", ".", "NLLLoss", "(", ")", "\n", "\n", "for", "iter", "in", "range", "(", "1", ",", "n_iters", "+", "1", ")", ":", "\n", "        ", "training_pair", "=", "training_pairs", "[", "iter", "-", "1", "]", "\n", "input_variable", "=", "training_pair", "[", "0", "]", "\n", "target_variable", "=", "training_pair", "[", "1", "]", "\n", "\n", "loss", "=", "train", "(", "input_variable", ",", "target_variable", ",", "encoder", ",", "\n", "decoder", ",", "encoder_optimizer", ",", "decoder_optimizer", ",", "criterion", ",", "use_attention", "=", "use_attention", ")", "\n", "print_loss_total", "+=", "loss", "\n", "plot_loss_total", "+=", "loss", "\n", "\n", "if", "iter", "%", "print_every", "==", "0", ":", "\n", "            ", "print_loss_avg", "=", "print_loss_total", "/", "print_every", "\n", "print_loss_total", "=", "0", "\n", "print", "(", "'%s (%d %d%%) %.4f'", "%", "(", "timeSince", "(", "start", ",", "iter", "/", "n_iters", ")", ",", "\n", "iter", ",", "iter", "/", "n_iters", "*", "100", ",", "print_loss_avg", ")", ")", "\n", "\n", "", "if", "iter", "%", "plot_every", "==", "0", ":", "\n", "            ", "plot_loss_avg", "=", "plot_loss_total", "/", "plot_every", "\n", "plot_losses", ".", "append", "(", "plot_loss_avg", ")", "\n", "plot_loss_total", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.plot-1.showPlot": [[253, 260], ["matplotlib.figure", "matplotlib.subplots", "matplotlib.MultipleLocator", "ax.yaxis.set_major_locator", "matplotlib.plot"], "function", ["None"], ["def", "showPlot", "(", "points", ")", ":", "\n", "    ", "plt", ".", "figure", "(", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "# this locator puts ticks at regular intervals", "\n", "loc", "=", "ticker", ".", "MultipleLocator", "(", "base", "=", "0.2", ")", "\n", "ax", ".", "yaxis", ".", "set_major_locator", "(", "loc", ")", "\n", "plt", ".", "plot", "(", "points", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.plot-1.evaluate": [[273, 314], ["plot-1.variableFromSentence", "encoder.initHidden", "torch.autograd.Variable", "range", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "range", "variableFromSentence.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.autograd.Variable.cuda", "encoder", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.autograd.Variable.cuda", "decoder_output.data.topk", "torch.autograd.Variable", "decoder", "decoder", "decoded_words.append", "decoded_words.append", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.autograd.Variable.cuda"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.plot-1.variableFromSentence", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.cuda", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.cuda", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.cuda"], ["", "def", "evaluate", "(", "encoder", ",", "decoder", ",", "sentence", ",", "max_length", "=", "MAX_LENGTH", ",", "use_attention", "=", "True", ")", ":", "\n", "    ", "input_variable", "=", "variableFromSentence", "(", "input_lang", ",", "sentence", ")", "\n", "input_length", "=", "input_variable", ".", "size", "(", ")", "[", "0", "]", "\n", "encoder_hidden", "=", "encoder", ".", "initHidden", "(", ")", "\n", "\n", "encoder_outputs", "=", "Variable", "(", "torch", ".", "zeros", "(", "max_length", ",", "encoder", ".", "hidden_size", ")", ")", "\n", "encoder_outputs", "=", "encoder_outputs", ".", "cuda", "(", ")", "if", "use_cuda", "else", "encoder_outputs", "\n", "\n", "for", "ei", "in", "range", "(", "input_length", ")", ":", "\n", "        ", "encoder_output", ",", "encoder_hidden", "=", "encoder", "(", "input_variable", "[", "ei", "]", ",", "\n", "encoder_hidden", ")", "\n", "encoder_outputs", "[", "ei", "]", "=", "encoder_outputs", "[", "ei", "]", "+", "encoder_output", "[", "0", "]", "[", "0", "]", "\n", "\n", "", "decoder_input", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "[", "[", "SOS_token", "]", "]", ")", ")", "# SOS", "\n", "decoder_input", "=", "decoder_input", ".", "cuda", "(", ")", "if", "use_cuda", "else", "decoder_input", "\n", "\n", "decoder_hidden", "=", "encoder_hidden", "\n", "\n", "decoded_words", "=", "[", "]", "\n", "decoder_attentions", "=", "torch", ".", "zeros", "(", "max_length", ",", "max_length", ")", "\n", "\n", "for", "di", "in", "range", "(", "max_length", ")", ":", "\n", "        ", "if", "use_attention", ":", "\n", "            ", "decoder_output", ",", "decoder_hidden", ",", "decoder_attention", "=", "decoder", "(", "\n", "decoder_input", ",", "decoder_hidden", ",", "encoder_outputs", ")", "\n", "decoder_attentions", "[", "di", "]", "=", "decoder_attention", ".", "data", "\n", "", "else", ":", "\n", "            ", "decoder_output", ",", "decoder_hidden", "=", "decoder", "(", "\n", "decoder_input", ",", "decoder_hidden", ")", "\n", "", "topv", ",", "topi", "=", "decoder_output", ".", "data", ".", "topk", "(", "1", ")", "\n", "ni", "=", "topi", "[", "0", "]", "[", "0", "]", "\n", "if", "ni", "==", "EOS_token", ":", "\n", "            ", "decoded_words", ".", "append", "(", "'<EOS>'", ")", "\n", "break", "\n", "", "else", ":", "\n", "            ", "decoded_words", ".", "append", "(", "output_lang", ".", "index2word", "[", "ni", "]", ")", "\n", "\n", "", "decoder_input", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "[", "[", "ni", "]", "]", ")", ")", "\n", "decoder_input", "=", "decoder_input", ".", "cuda", "(", ")", "if", "use_cuda", "else", "decoder_input", "\n", "\n", "", "return", "decoded_words", ",", "decoder_attentions", "[", ":", "di", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.plot-1.evaluateRandomly": [[321, 330], ["range", "random.choice", "print", "print", "plot-1.evaluate", "print", "print"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.plot-1.evaluate"], ["", "def", "evaluateRandomly", "(", "encoder", ",", "decoder", ",", "use_attention", "=", "True", ",", "n", "=", "10", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "pair", "=", "random", ".", "choice", "(", "train_pairs", ")", "\n", "print", "(", "'>'", ",", "pair", "[", "0", "]", ")", "\n", "print", "(", "'='", ",", "pair", "[", "1", "]", ")", "\n", "output_words", ",", "attentions", "=", "evaluate", "(", "encoder", ",", "decoder", ",", "pair", "[", "0", "]", ",", "use_attention", "=", "use_attention", ")", "\n", "output_sentence", "=", "' '", ".", "join", "(", "output_words", ")", "\n", "print", "(", "'<'", ",", "output_sentence", ")", "\n", "print", "(", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.plot-1.evaluateAll": [[331, 363], ["io.open", "range", "io.open.close", "bleu.get_bleu_score", "print", "len", "io.open.write", "io.open.write", "target_sentences.append", "plot-1.evaluate", "io.open.write", "translated_sentences.append"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql.plot-1.evaluate", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "", "def", "evaluateAll", "(", "encoder", ",", "decoder", ",", "split", "=", "'dev'", ",", "use_attention", "=", "True", ")", ":", "\n", "    ", "if", "use_attention", ":", "\n", "        ", "model", "=", "'attention'", "\n", "", "else", ":", "\n", "        ", "model", "=", "'simple'", "\n", "\n", "", "if", "split", "==", "'train'", ":", "\n", "        ", "eval_pairs", "=", "train_pairs", "\n", "", "elif", "split", "==", "'dev'", ":", "\n", "        ", "eval_pairs", "=", "dev_pairs", "\n", "\n", "", "translated_sentences", "=", "[", "]", "\n", "target_sentences", "=", "[", "]", "\n", "\n", "f_out", "=", "open", "(", "'%s_%s_out.txt'", "%", "(", "split", ",", "model", ")", ",", "'w'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "eval_pairs", ")", ")", ":", "\n", "        ", "pair", "=", "eval_pairs", "[", "i", "]", "\n", "f_out", ".", "write", "(", "'> '", "+", "pair", "[", "0", "]", "+", "'\\n'", ")", "\n", "f_out", ".", "write", "(", "'= '", "+", "pair", "[", "1", "]", "+", "'\\n'", ")", "\n", "target_sentences", ".", "append", "(", "pair", "[", "1", "]", ")", "\n", "#print('>', pair[0])", "\n", "#print('=', pair[1])", "\n", "output_words", ",", "attentions", "=", "evaluate", "(", "encoder", ",", "decoder", ",", "pair", "[", "0", "]", ",", "use_attention", "=", "use_attention", ")", "\n", "output_sentence", "=", "' '", ".", "join", "(", "output_words", ")", "\n", "f_out", ".", "write", "(", "'< '", "+", "output_sentence", "+", "'\\n\\n'", ")", "\n", "translated_sentences", ".", "append", "(", "output_sentence", ")", "\n", "#print('<', output_sentence)", "\n", "#print('')", "\n", "", "f_out", ".", "close", "(", ")", "\n", "\n", "bleu_score", "=", "get_bleu_score", "(", "translated_sentences", ",", "target_sentences", ")", "\n", "print", "(", "'BLEU score: '", ",", "bleu_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.py.grammar.PythonGrammar.__init__": [[833, 835], ["lang.grammar.Grammar.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.py.grammar.PythonGrammar.is_value_node": [[836, 838], ["grammar.is_builtin_type"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.py.grammar.is_builtin_type"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.py.grammar.is_builtin_type": [[722, 724], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.py.grammar.is_terminal_ast_type": [[726, 731], ["inspect.isclass"], "function", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.py.grammar.type_str_to_type": [[798, 814], ["type_str.endswith", "eval", "grammar.is_builtin_type", "eval", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.py.grammar.is_builtin_type"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.py.grammar.is_compositional_leaf": [[816, 830], ["ast.iter_fields", "isinstance", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.data_preprocess.clean_sql.clean_sql_file": [[6, 23], ["print", "open", "open", "open.readlines", "open.close", "open.close", "print", "print", "print", "line.split", "open.write", "sql.endswith"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close"], ["def", "clean_sql_file", "(", "input_sql_file", ",", "output_sql_file", ")", ":", "\n", "  ", "print", "(", "input_sql_file", ")", "\n", "f", "=", "open", "(", "input_sql_file", ")", "\n", "f_out", "=", "open", "(", "output_sql_file", ",", "'w'", ")", "\n", "cnt", "=", "0", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "    ", "sql", ",", "db", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "if", "not", "sql", ".", "endswith", "(", "';'", ")", ":", "\n", "      ", "sql", "=", "sql", "+", "';'", "\n", "", "f_out", ".", "write", "(", "sql", "+", "'\\n'", ")", "\n", "cnt", "+=", "1", "\n", "", "f", ".", "close", "(", ")", "\n", "f_out", ".", "close", "(", ")", "\n", "\n", "print", "(", "output_sql_file", ")", "\n", "print", "(", "cnt", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.preprocess.schema.Schema.__init__": [[8, 12], ["schema.Schema._map"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.preprocess.schema.Schema._map"], ["def", "__init__", "(", "self", ",", "schema", ",", "table", ")", ":", "\n", "        ", "self", ".", "_schema", "=", "schema", "\n", "self", ".", "_table", "=", "table", "\n", "self", ".", "_idMap", "=", "self", ".", "_map", "(", "self", ".", "_schema", ",", "self", ".", "_table", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.preprocess.schema.Schema.schema": [[13, 16], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "schema", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_schema", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.preprocess.schema.Schema.idMap": [[17, 20], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "idMap", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_idMap", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.preprocess.schema.Schema._map": [[21, 39], ["enumerate", "enumerate", "tab.lower", "table_names_original[].lower", "col.lower"], "methods", ["None"], ["", "def", "_map", "(", "self", ",", "schema", ",", "table", ")", ":", "\n", "        ", "column_names_original", "=", "table", "[", "'column_names_original'", "]", "\n", "table_names_original", "=", "table", "[", "'table_names_original'", "]", "\n", "#print 'column_names_original: ', column_names_original", "\n", "#print 'table_names_original: ', table_names_original", "\n", "for", "i", ",", "(", "tab_id", ",", "col", ")", "in", "enumerate", "(", "column_names_original", ")", ":", "\n", "            ", "if", "tab_id", "==", "-", "1", ":", "\n", "                ", "idMap", "=", "{", "'*'", ":", "i", "}", "\n", "", "else", ":", "\n", "                ", "key", "=", "table_names_original", "[", "tab_id", "]", ".", "lower", "(", ")", "\n", "val", "=", "col", ".", "lower", "(", ")", "\n", "idMap", "[", "key", "+", "\".\"", "+", "val", "]", "=", "i", "\n", "\n", "", "", "for", "i", ",", "tab", "in", "enumerate", "(", "table_names_original", ")", ":", "\n", "            ", "key", "=", "tab", ".", "lower", "(", ")", "\n", "idMap", "[", "key", "]", "=", "i", "\n", "\n", "", "return", "idMap", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.preprocess.schema.get_schemas_from_json": [[40, 60], ["open", "json.load", "enumerate", "str", "tabn.lower", "str", "col.lower"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load"], ["", "", "def", "get_schemas_from_json", "(", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "db_names", "=", "[", "db", "[", "'db_id'", "]", "for", "db", "in", "data", "]", "\n", "\n", "tables", "=", "{", "}", "\n", "schemas", "=", "{", "}", "\n", "for", "db", "in", "data", ":", "\n", "        ", "db_id", "=", "db", "[", "'db_id'", "]", "\n", "schema", "=", "{", "}", "#{'table': [col.lower, ..., ]} * -> __all__", "\n", "column_names_original", "=", "db", "[", "'column_names_original'", "]", "\n", "table_names_original", "=", "db", "[", "'table_names_original'", "]", "\n", "tables", "[", "db_id", "]", "=", "{", "'column_names_original'", ":", "column_names_original", ",", "'table_names_original'", ":", "table_names_original", "}", "\n", "for", "i", ",", "tabn", "in", "enumerate", "(", "table_names_original", ")", ":", "\n", "            ", "table", "=", "str", "(", "tabn", ".", "lower", "(", ")", ")", "\n", "cols", "=", "[", "str", "(", "col", ".", "lower", "(", ")", ")", "for", "td", ",", "col", "in", "column_names_original", "if", "td", "==", "i", "]", "\n", "schema", "[", "table", "]", "=", "cols", "\n", "", "schemas", "[", "db_id", "]", "=", "schema", "\n", "\n", "", "return", "schemas", ",", "db_names", ",", "tables", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.permutation.train.Trainer.load_train_config": [[28, 34], ["tensor2struct.utils.registry.instantiate", "tensor2struct.commands.train.Trainer.logger.info"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.instantiate"], ["\n", "import", "tensorflow", "as", "tf", "\n", "from", "tensorflow", ".", "contrib", ".", "learn", ".", "python", ".", "learn", "import", "learn_runner", "\n", "from", "tensorflow", ".", "contrib", ".", "learn", ".", "python", ".", "learn", ".", "estimators", "import", "run_config", "\n", "from", "tensorflow", "import", "gfile", "\n", "\n", "from", "seq2seq", "import", "models", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.permutation.train.Trainer._eval_model": [[35, 68], ["collections.defaultdict", "model.eval", "model.train", "logger.info", "wandb.log", "model", "len", "ret_dic[].item", "len", "collections.defaultdict.items", "collections.defaultdict.items"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.train", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], ["from", "seq2seq", ".", "contrib", ".", "experiment", "import", "Experiment", "as", "PatchedExperiment", "\n", "from", "seq2seq", ".", "configurable", "import", "_maybe_load_yaml", ",", "_create_from_dict", "\n", "from", "seq2seq", ".", "configurable", "import", "_deep_merge_dict", "\n", "from", "seq2seq", ".", "data", "import", "input_pipeline", "\n", "from", "seq2seq", ".", "metrics", "import", "metric_specs", "\n", "from", "seq2seq", ".", "training", "import", "hooks", "\n", "from", "seq2seq", ".", "training", "import", "utils", "as", "training_utils", "\n", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"config_paths\"", ",", "\"\"", ",", "\n", "\"\"\"Path to a YAML configuration files defining FLAG\n                       values. Multiple files can be separated by commas.\n                       Files are merged recursively. Setting a key in these\n                       files is equivalent to setting the FLAG value with\n                       the same name.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"hooks\"", ",", "\"[]\"", ",", "\n", "\"\"\"YAML configuration string for the\n                       training hooks to use.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"metrics\"", ",", "\"[]\"", ",", "\n", "\"\"\"YAML configuration string for the\n                       training metrics to use.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"model\"", ",", "\"\"", ",", "\n", "\"\"\"Name of the model class.\n                       Can be either a fully-qualified name, or the name\n                       of a class defined in `seq2seq.models`.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"model_params\"", ",", "\"{}\"", ",", "\n", "\"\"\"YAML configuration string for the model\n                       parameters.\"\"\"", ")", "\n", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"input_pipeline_train\"", ",", "\"{}\"", ",", "\n", "\"\"\"YAML configuration string for the training\n                       data input pipeline.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"input_pipeline_dev\"", ",", "\"{}\"", ",", "\n", "\"\"\"YAML configuration string for the development\n                       data input pipeline.\"\"\"", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.permutation.train.Trainer.load_optimizer": [[70, 106], ["logger.info", "tensor2struct.commands.train.Trainer.model.get_bert_parameters", "tensor2struct.commands.train.Trainer.model.get_non_bert_parameters", "logger.info", "tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.construct", "len", "config.get", "config.get", "len", "len", "list", "tensor2struct.commands.train.Trainer.model.get_trainable_parameters", "tensor2struct.commands.train.Trainer.model.parameters", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.get_bert_parameters", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.get_non_bert_parameters", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.get_trainable_parameters"], ["tf", ".", "flags", ".", "DEFINE_string", "(", "\"buckets\"", ",", "None", ",", "\n", "\"\"\"Buckets input sequences according to these length.\n                       A comma-separated list of sequence length buckets, e.g.\n                       \"10,20,30\" would result in 4 buckets:\n                       <10, 10-20, 20-30, >30. None disabled bucketing. \"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"batch_size\"", ",", "16", ",", "\n", "\"\"\"Batch size used for training and evaluation.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"output_dir\"", ",", "None", ",", "\n", "\"\"\"The directory to write model checkpoints and summaries\n                       to. If None, a local temporary directory is created.\"\"\"", ")", "\n", "\n", "# Training parameters", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"schedule\"", ",", "\"continuous_train_and_eval\"", ",", "\n", "\"\"\"Estimator function to call, defaults to\n                       continuous_train_and_eval for local run\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"train_steps\"", ",", "None", ",", "\n", "\"\"\"Maximum number of training steps to run.\n                         If None, train forever.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"eval_every_n_steps\"", ",", "1000", ",", "\n", "\"Run evaluation on validation data every N steps.\"", ")", "\n", "\n", "# RunConfig Flags", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"tf_random_seed\"", ",", "None", ",", "\n", "\"\"\"Random seed for TensorFlow initializers. Setting\n                        this value allows consistency between reruns.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"save_checkpoints_secs\"", ",", "None", ",", "\n", "\"\"\"Save checkpoints every this many seconds.\n                        Can not be specified with save_checkpoints_steps.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"save_checkpoints_steps\"", ",", "None", ",", "\n", "\"\"\"Save checkpoints every this many steps.\n                        Can not be specified with save_checkpoints_secs.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"keep_checkpoint_max\"", ",", "5", ",", "\n", "\"\"\"Maximum number of recent checkpoint files to keep.\n                        As new files are created, older files are deleted.\n                        If None or 0, all checkpoint files are kept.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"keep_checkpoint_every_n_hours\"", ",", "4", ",", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.permutation.train.Trainer.step": [[107, 136], ["range", "optimizer.step", "lr_scheduler.update_lr", "optimizer.zero_grad", "next", "tensor2struct.commands.train.Trainer.model", "norm_loss.backward", "tensor2struct.commands.train.Trainer.logger.info", "tensor2struct.commands.train.Trainer.logger.info", "wandb.log", "enumerate", "torch.nn.utils.clip_grad_norm_", "wandb.log", "loss.item", "loss.item"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.optimizers.BertWarmupPolynomialLRSchedulerGroupV2.update_lr"], [")", "\n", "tf", ".", "flags", ".", "DEFINE_float", "(", "\"gpu_memory_fraction\"", ",", "1.0", ",", "\n", "\"\"\"Fraction of GPU memory used by the process on\n                      each GPU uniformly on the same machine.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_boolean", "(", "\"gpu_allow_growth\"", ",", "False", ",", "\n", "\"\"\"Allow GPU memory allocation to grow\n                        dynamically.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_boolean", "(", "\"log_device_placement\"", ",", "False", ",", "\n", "\"\"\"Log the op placement to devices\"\"\"", ")", "\n", "\n", "\n", "FLAGS", "=", "tf", ".", "flags", ".", "FLAGS", "\n", "\n", "def", "create_experiment", "(", "output_dir", ")", ":", "\n", "  ", "\"\"\"\n  Creates a new Experiment instance.\n\n  Args:\n    output_dir: Output directory for model checkpoints and summaries.\n  \"\"\"", "\n", "\n", "config", "=", "run_config", ".", "RunConfig", "(", "\n", "tf_random_seed", "=", "FLAGS", ".", "tf_random_seed", ",", "\n", "save_checkpoints_secs", "=", "FLAGS", ".", "save_checkpoints_secs", ",", "\n", "save_checkpoints_steps", "=", "FLAGS", ".", "save_checkpoints_steps", ",", "\n", "keep_checkpoint_max", "=", "FLAGS", ".", "keep_checkpoint_max", ",", "\n", "keep_checkpoint_every_n_hours", "=", "FLAGS", ".", "keep_checkpoint_every_n_hours", ",", "\n", "gpu_memory_fraction", "=", "FLAGS", ".", "gpu_memory_fraction", ")", "\n", "config", ".", "tf_config", ".", "gpu_options", ".", "allow_growth", "=", "FLAGS", ".", "gpu_allow_growth", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.permutation.train.main": [[137, 144], ["tensor2struct.commands.train.setup", "train.Trainer", "Trainer.train"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.setup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.train"], ["config", ".", "tf_config", ".", "log_device_placement", "=", "FLAGS", ".", "log_device_placement", "\n", "\n", "train_options", "=", "training_utils", ".", "TrainOptions", "(", "\n", "model_class", "=", "FLAGS", ".", "model", ",", "\n", "model_params", "=", "FLAGS", ".", "model_params", ")", "\n", "# On the main worker, save training options", "\n", "if", "config", ".", "is_chief", ":", "\n", "    ", "gfile", ".", "MakeDirs", "(", "output_dir", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.permutation.infer_tagging.Inferer.infer": [[26, 54], ["open", "tensor2struct.utils.registry.lookup", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tensor2struct.utils.registry.construct", "infer_tagging.Inferer.model_preproc.dataset", "infer_tagging.chunks", "infer_tagging.chunks", "tqdm.tqdm", "infer_tagging.Inferer._inner_infer", "tqdm.tqdm.close", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.dataset", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.batched_infer.chunks", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.batched_infer.chunks", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.Inferer._inner_infer", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close"], ["    ", "def", "infer", "(", "self", ",", "model", ",", "output_path", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Manually set args.limit, TODO: pass the argument via run.py\n        \"\"\"", "\n", "output", "=", "open", "(", "output_path", ",", "\"w\"", ")", "\n", "args", ".", "limit", "=", "256", "\n", "\n", "infer_func", "=", "registry", ".", "lookup", "(", "\"infer_method\"", ",", "args", ".", "method", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "assert", "args", ".", "mode", "==", "\"infer\"", "\n", "orig_data", "=", "registry", ".", "construct", "(", "\n", "\"dataset\"", ",", "self", ".", "config", "[", "\"data\"", "]", "[", "args", ".", "section", "]", "\n", ")", "\n", "preproc_data", "=", "self", ".", "model_preproc", ".", "dataset", "(", "args", ".", "section", ")", "\n", "assert", "len", "(", "orig_data", ")", "==", "len", "(", "preproc_data", ")", "\n", "chunked_orig_data", "=", "chunks", "(", "orig_data", ",", "args", ".", "limit", ")", "\n", "chunked_preproc_data", "=", "chunks", "(", "preproc_data", ",", "args", ".", "limit", ")", "\n", "pbar", "=", "tqdm", ".", "tqdm", "(", "total", "=", "len", "(", "preproc_data", ")", ")", "\n", "self", ".", "_inner_infer", "(", "\n", "model", ",", "\n", "infer_func", ",", "\n", "args", ".", "beam_size", ",", "\n", "chunked_orig_data", ",", "\n", "chunked_preproc_data", ",", "\n", "output", ",", "\n", "pbar", ",", "\n", ")", "\n", "pbar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.permutation.infer_tagging.Inferer.batched_decode": [[55, 71], ["model.eval", "model.encoder", "model.decoder.score_f", "model.decoder.score_f.max", "range", "len", "range", "code_list.append", "int", "decoded_tokens.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "", "def", "batched_decode", "(", "self", ",", "model", ",", "preproc_data", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "enc_batch", "=", "[", "enc_input", "for", "enc_input", ",", "dec_output", "in", "preproc_data", "]", "\n", "enc_state", "=", "model", ".", "encoder", "(", "enc_batch", ")", "\n", "logits", "=", "model", ".", "decoder", ".", "score_f", "(", "enc_state", ".", "src_memory", ")", "\n", "\n", "# greedy decoding", "\n", "code_list", "=", "[", "]", "\n", "_", ",", "decode_t", "=", "logits", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "for", "batch_idx", "in", "range", "(", "len", "(", "enc_batch", ")", ")", ":", "\n", "            ", "decoded_tokens", "=", "[", "]", "\n", "for", "token_idx", "in", "range", "(", "enc_state", ".", "lengths", "[", "batch_idx", "]", ")", ":", "\n", "                ", "best_idx", "=", "int", "(", "decode_t", "[", "batch_idx", "]", "[", "token_idx", "]", ")", "\n", "decoded_tokens", ".", "append", "(", "model", ".", "decoder", ".", "vocab", "[", "best_idx", "]", ")", "\n", "", "code_list", ".", "append", "(", "\" \"", ".", "join", "(", "decoded_tokens", ")", ")", "\n", "", "return", "code_list", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.permutation.infer_tagging.Inferer._inner_infer": [[72, 101], ["zip", "zip", "infer_tagging.Inferer.batched_decode", "decoded.append", "output.write", "output.flush", "pbar.update", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.permutation.infer_tagging.Inferer.batched_decode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update"], ["", "def", "_inner_infer", "(", "\n", "self", ",", "\n", "model", ",", "\n", "infer_func", ",", "\n", "beam_size", ",", "\n", "chunked_orig_data", ",", "\n", "chunked_preproc_data", ",", "\n", "output", ",", "\n", "pbar", ",", "\n", ")", ":", "\n", "        ", "i", "=", "0", "\n", "for", "orig_data", ",", "preproc_data", "in", "zip", "(", "chunked_orig_data", ",", "chunked_preproc_data", ")", ":", "\n", "            ", "zipped_preproc_data", "=", "zip", "(", "*", "preproc_data", ")", "\n", "code_list", "=", "self", ".", "batched_decode", "(", "model", ",", "zipped_preproc_data", ")", "\n", "\n", "for", "inferred_code", "in", "code_list", ":", "\n", "                ", "decoded", "=", "[", "]", "\n", "decoded", ".", "append", "(", "\n", "{", "\n", "# \"model_output\": model_output,", "\n", "\"inferred_code\"", ":", "inferred_code", ",", "\n", "# \"score\": score,", "\n", "}", "\n", ")", "\n", "\n", "output", ".", "write", "(", "json", ".", "dumps", "(", "{", "\"index\"", ":", "i", ",", "\"beams\"", ":", "decoded", "}", ")", "+", "\"\\n\"", ")", "\n", "output", ".", "flush", "(", ")", "\n", "i", "+=", "1", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.permutation.infer_tagging.chunks": [[20, 24], ["range", "len"], "function", ["None"], ["def", "chunks", "(", "lst", ",", "n", ")", ":", "\n", "    ", "\"\"\"Yield successive n-sized chunks from lst.\"\"\"", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "lst", ")", ",", "n", ")", ":", "\n", "        ", "yield", "lst", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.permutation.infer_tagging.main": [[102, 107], ["tensor2struct.commands.infer.setup", "infer_tagging.Inferer", "Inferer.load_model", "infer_tagging.Inferer.infer"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.setup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.Inferer.load_model", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.Inferer.infer"], ["", "", "", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "config", ",", "output_path", "=", "infer", ".", "setup", "(", "args", ")", "\n", "inferer", "=", "Inferer", "(", "config", ")", "\n", "model", "=", "inferer", ".", "load_model", "(", "args", ".", "logdir", ",", "args", ".", "step", ")", "\n", "inferer", ".", "infer", "(", "model", ",", "output_path", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.permutation.run.main": [[21, 57], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "json.loads", "os.environ.get", "_jsonnet.evaluate_file", "json.dumps", "print", "os.path.join", "exp_config[].split", "wandb.init", "run.TrainConfig", "experiments.permutation.train.main", "tensor2struct.commands.run.eval_and_report", "os.getcwd"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.parse_args", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.main", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.eval_and_report"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"mode\"", ",", "choices", "=", "[", "\"train\"", ",", "\"eval_tagging\"", ",", "\"eval_ctc\"", ",", "\"eval_ssnt\"", ",", "\"eval_swan\"", "]", ",", "help", "=", "\"train/eval_aligned/eval_ctc\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"exp_config_file\"", ",", "help", "=", "\"jsonnet file for experiments\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "exp_config", "=", "json", ".", "loads", "(", "_jsonnet", ".", "evaluate_file", "(", "args", ".", "exp_config_file", ")", ")", "\n", "model_config_file", "=", "exp_config", "[", "\"model_config\"", "]", "\n", "if", "\"model_config_args\"", "in", "exp_config", ":", "\n", "        ", "model_config_args", "=", "json", ".", "dumps", "(", "exp_config", "[", "\"model_config_args\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "model_config_args", "=", "None", "\n", "\n", "# cluster base dir", "\n", "", "log_base_dir", "=", "os", ".", "environ", ".", "get", "(", "\"LOG_BASE_DIR\"", ",", "None", ")", "\n", "if", "log_base_dir", "is", "None", ":", "\n", "        ", "print", "(", "f\"Using default log base dir {os.getcwd()}\"", ")", "\n", "logdir", "=", "exp_config", "[", "\"logdir\"", "]", "\n", "", "else", ":", "\n", "        ", "logdir", "=", "os", ".", "path", ".", "join", "(", "log_base_dir", ",", "exp_config", "[", "\"logdir\"", "]", ")", "\n", "\n", "# wandb init", "\n", "", "expname", "=", "exp_config", "[", "\"logdir\"", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "project", "=", "exp_config", "[", "\"project\"", "]", "\n", "\n", "# dist train need to start a wandb session in each process, not a global one", "\n", "if", "args", ".", "mode", "in", "[", "\"train\"", ",", "\"eval_tagging\"", ",", "\"eval_ctc\"", ",", "\"eval_ssnt\"", ",", "\"eval_swan\"", "]", ":", "\n", "        ", "wandb", ".", "init", "(", "project", "=", "project", ",", "group", "=", "expname", ",", "job_type", "=", "args", ".", "mode", ")", "\n", "\n", "", "if", "args", ".", "mode", "==", "\"train\"", ":", "\n", "        ", "train_config", "=", "TrainConfig", "(", "model_config_file", ",", "model_config_args", ",", "logdir", ")", "\n", "train", ".", "main", "(", "train_config", ")", "\n", "", "elif", "args", ".", "mode", "in", "[", "\"eval_tagging\"", "]", ":", "\n", "        ", "run", ".", "eval_and_report", "(", "args", ",", "exp_config", ",", "model_config_args", ",", "logdir", ",", "infer_mod", "=", "infer_tagging", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CompDataSchedule.__init__": [[35, 40], ["tensor2struct.training.data_scheduler.CompDataSchedule._create_iterator"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CompDataSchedule._create_iterator"], ["def", "__init__", "(", "self", ",", "examples", ",", "batch_size", ",", "num_batch_per_train", ")", ":", "\n", "        ", "self", ".", "examples", "=", "examples", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_batch_per_train", "=", "num_batch_per_train", "\n", "self", ".", "iterator", "=", "self", ".", "_create_iterator", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CompDataSchedule._get_comp_tasks": [[41, 47], ["next", "sorted", "len"], "methods", ["None"], ["", "def", "_get_comp_tasks", "(", "self", ",", "step", ")", ":", "\n", "        ", "examples", "=", "next", "(", "self", ".", "iterator", ")", "\n", "sorted_examples", "=", "sorted", "(", "examples", ",", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "1", "]", "[", "\"actions\"", "]", ")", ")", "\n", "inner_task", "=", "sorted_examples", "[", ":", "self", ".", "batch_size", "]", "\n", "outer_tasks", "=", "[", "sorted_examples", "[", "self", ".", "batch_size", ":", "]", "]", "\n", "return", "inner_task", ",", "outer_tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CompDataSchedule._create_iterator": [[48, 57], ["tensor2struct.training.data_scheduler.CompDataSchedule._create_iterator._yield_batches"], "methods", ["None"], ["", "def", "_create_iterator", "(", "self", ")", ":", "\n", "        ", "def", "_yield_batches", "(", "x", ",", "bs", ")", ":", "\n", "            ", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "x", ",", "batch_size", "=", "bs", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "collate_fn", "=", "lambda", "x", ":", "x", "\n", ")", "\n", "while", "True", ":", "\n", "                ", "yield", "from", "dataloader", "\n", "\n", "", "", "return", "_yield_batches", "(", "self", ".", "examples", ",", "self", ".", "batch_size", "*", "self", ".", "num_batch_per_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CompDataSchedule.get_batch": [[58, 60], ["tensor2struct.training.data_scheduler.CompDataSchedule._get_comp_tasks"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsNLRandKerenlDataScheduler._get_comp_tasks"], ["", "def", "get_batch", "(", "self", ",", "step", ")", ":", "\n", "        ", "return", "self", ".", "_get_comp_tasks", "(", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsEdistDataScheduler.__init__": [[71, 100], ["tensor2struct.training.data_scheduler.CogsEdistDataScheduler.load_from_cache", "tensor2struct.training.data_scheduler.CogsEdistDataScheduler.build_sampling_prob", "tensor2struct.training.data_scheduler.CogsEdistDataScheduler._get_generator", "os.path.exists", "tensor2struct.training.data_scheduler.CogsEdistDataScheduler.build_cache", "os.path.exists", "os.mkdir"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsEdistDataScheduler.load_from_cache", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsEdistDataScheduler.build_sampling_prob", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsRandScheduler._get_generator", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.exists", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.ScanKernelDataScheduler.build_cache", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.exists"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "examples", ",", "\n", "batch_size", ",", "\n", "num_batch_per_train", ",", "\n", "topk", "=", "100", ",", "\n", "temp", "=", "1", ",", "\n", "cache_dir", "=", "\".vector_cache/cogs\"", ",", "\n", "cache_file_prefix", "=", "\"edist\"", ",", "\n", ")", ":", "\n", "        ", "self", ".", "examples", "=", "examples", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_batch_per_train", "=", "num_batch_per_train", "\n", "\n", "# build cache", "\n", "self", ".", "topk", "=", "topk", "\n", "self", ".", "cache_dir", "=", "cache_dir", "\n", "self", ".", "cache_file", "=", "f\"{self.cache_dir}/{cache_file_prefix}_top{self.topk}.pkl\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "cache_file", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "cache_dir", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "self", ".", "cache_dir", ")", "\n", "", "self", ".", "build_cache", "(", "examples", ",", "self", ".", "cache_file", ")", "\n", "", "self", ".", "neighbours_list", ",", "self", ".", "edists_list", "=", "self", ".", "load_from_cache", "(", "self", ".", "cache_file", ")", "\n", "\n", "self", ".", "temp", "=", "temp", "\n", "self", ".", "src_examples", ",", "self", ".", "probs_list", "=", "self", ".", "build_sampling_prob", "(", "\n", "self", ".", "neighbours_list", ",", "self", ".", "edists_list", ",", "self", ".", "temp", "\n", ")", "\n", "self", ".", "generator", "=", "self", ".", "_get_generator", "(", "self", ".", "src_examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsEdistDataScheduler._get_generator": [[101, 111], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "_get_generator", "(", "self", ",", "examples", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "examples", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", "collate_fn", "=", "lambda", "x", ":", "x", ",", "\n", ")", "\n", "yield", "from", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsEdistDataScheduler._get_comp_tasks": [[112, 132], ["next", "numpy.random.choice", "inner_batch.append", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "", "def", "_get_comp_tasks", "(", "self", ",", "step", ")", ":", "\n", "        ", "inner_batch_ids", "=", "next", "(", "self", ".", "generator", ")", "\n", "inner_batch", "=", "[", "]", "\n", "outer_batch", "=", "[", "]", "\n", "\n", "for", "src_id", "in", "inner_batch_ids", ":", "\n", "            ", "src_example", "=", "self", ".", "examples", "[", "src_id", "]", "\n", "neighbours", "=", "self", ".", "neighbours_list", "[", "src_id", "]", "\n", "sampled_ids", "=", "np", ".", "random", ".", "choice", "(", "\n", "len", "(", "neighbours", ")", ",", "\n", "self", ".", "num_batch_per_train", "-", "1", ",", "\n", "replace", "=", "False", ",", "\n", "p", "=", "self", ".", "probs_list", "[", "src_id", "]", ",", "\n", ")", "\n", "tgt_examples", "=", "[", "self", ".", "examples", "[", "neighbours", "[", "i", "]", "]", "for", "i", "in", "sampled_ids", "]", "\n", "\n", "inner_batch", ".", "append", "(", "src_example", ")", "\n", "outer_batch", "+=", "tgt_examples", "\n", "\n", "", "return", "inner_batch", ",", "[", "outer_batch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsEdistDataScheduler.build_cache": [[133, 178], ["collections.defaultdict", "collections.defaultdict", "tqdm.tqdm", "tensor2struct.training.data_scheduler.CogsEdistDataScheduler.filter_topk", "enumerate", "tensor2struct.training.data_scheduler.CogsEdistDataScheduler.build_cache.attr_f"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsEdistDataScheduler.filter_topk"], ["", "def", "build_cache", "(", "self", ",", "examples", ",", "cache_file", ")", ":", "\n", "# for testing only", "\n", "# _examples = [examples[i] for i in range(100)]", "\n", "# examples = _examples", "\n", "\n", "# compute token edist", "\n", "        ", "def", "attr_f", "(", "example", ")", ":", "\n", "            ", "return", "example", "[", "0", "]", "[", "\"tokens\"", "]", "\n", "\n", "# compute action edist", "\n", "# def attr_f(example):", "\n", "#     return example[1][\"actions\"][1:-1]", "\n", "\n", "", "window_size", "=", "1000", "# deactive it with a large number", "\n", "neighbours_list", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "edists_list", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "src_example", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "examples", ")", ",", "desc", "=", "\"edist\"", ",", "total", "=", "len", "(", "examples", ")", "\n", ")", ":", "\n", "            ", "src_text_tokens", "=", "attr_f", "(", "src_example", ")", "\n", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "examples", ")", ")", ":", "\n", "                ", "tgt_example", "=", "examples", "[", "j", "]", "\n", "tgt_text_tokens", "=", "attr_f", "(", "tgt_example", ")", "\n", "\n", "if", "(", "\n", "src_text_tokens", "!=", "tgt_text_tokens", "\n", "and", "len", "(", "tgt_text_tokens", ")", ">=", "len", "(", "src_text_tokens", ")", "-", "window_size", "\n", "and", "len", "(", "tgt_text_tokens", ")", "<=", "len", "(", "src_text_tokens", ")", "+", "window_size", "\n", ")", ":", "\n", "                    ", "edist", ",", "_", "=", "edit_utils", ".", "compute_levenshtein_distance", "(", "\n", "src_text_tokens", ",", "tgt_text_tokens", "\n", ")", "\n", "\n", "neighbours_list", "[", "i", "]", ".", "append", "(", "j", ")", "\n", "edists_list", "[", "i", "]", ".", "append", "(", "edist", ")", "\n", "\n", "neighbours_list", "[", "j", "]", ".", "append", "(", "i", ")", "\n", "edists_list", "[", "j", "]", ".", "append", "(", "edist", ")", "\n", "\n", "", "", "", "self", ".", "filter_topk", "(", "neighbours_list", ",", "edists_list", ",", "self", ".", "topk", ")", "\n", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "[", "neighbours_list", ",", "edists_list", "]", ",", "f", ")", "\n", "", "return", "neighbours_list", ",", "edists_list", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsEdistDataScheduler.load_from_cache": [[179, 183], ["open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load"], ["", "def", "load_from_cache", "(", "self", ",", "cache_file", ")", ":", "\n", "        ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "neighbours_list", ",", "edists_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "neighbours_list", ",", "edists_list", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsEdistDataScheduler.filter_topk": [[184, 198], ["range", "len", "sorted", "zip", "len", "zip"], "methods", ["None"], ["", "def", "filter_topk", "(", "self", ",", "neighbours_list", ",", "edists_list", ",", "k", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "examples", ")", ")", ":", "\n", "            ", "orig_neighbours", "=", "neighbours_list", "[", "i", "]", "\n", "orig_edists", "=", "edists_list", "[", "i", "]", "\n", "\n", "if", "len", "(", "orig_neighbours", ")", "<", "k", ":", "\n", "                ", "continue", "\n", "\n", "", "sorted_pairs", "=", "sorted", "(", "zip", "(", "orig_neighbours", ",", "orig_edists", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "topk_pairs", "=", "sorted_pairs", "[", ":", "k", "]", "\n", "filtered_neighbours", ",", "filtered_edists", "=", "zip", "(", "*", "topk_pairs", ")", "\n", "\n", "neighbours_list", "[", "i", "]", "=", "filtered_neighbours", "\n", "edists_list", "[", "i", "]", "=", "filtered_edists", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsEdistDataScheduler.build_sampling_prob": [[199, 211], ["list", "logger.info", "torch.Tensor", "torch.softmax().numpy", "len", "len", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax"], ["", "", "def", "build_sampling_prob", "(", "self", ",", "neighbours_list", ",", "edists_list", ",", "temp", ")", ":", "\n", "        ", "probs_list", "=", "{", "}", "\n", "src_examples", "=", "list", "(", "neighbours_list", ")", "\n", "logger", ".", "info", "(", "\n", "f\"Obtain {len(src_examples)} examples out of {len(self.examples)} that have neighbours\"", "\n", ")", "\n", "for", "src_example", "in", "src_examples", ":", "\n", "            ", "edists", "=", "edists_list", "[", "src_example", "]", "\n", "edists_v", "=", "torch", ".", "Tensor", "(", "edists", ")", "\n", "probs", "=", "torch", ".", "softmax", "(", "-", "edists_v", "/", "temp", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", "\n", "probs_list", "[", "src_example", "]", "=", "probs", "\n", "", "return", "src_examples", ",", "probs_list", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsEdistDataScheduler.get_batch": [[212, 214], ["tensor2struct.training.data_scheduler.CogsEdistDataScheduler._get_comp_tasks"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsNLRandKerenlDataScheduler._get_comp_tasks"], ["", "def", "get_batch", "(", "self", ",", "step", ")", ":", "\n", "        ", "return", "self", ".", "_get_comp_tasks", "(", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsRandEdistDataScheduler._get_comp_tasks": [[218, 246], ["next", "inner_batch.append", "random.random", "numpy.random.choice", "numpy.random.choice", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["    ", "def", "_get_comp_tasks", "(", "self", ",", "step", ")", ":", "\n", "        ", "inner_batch_ids", "=", "next", "(", "self", ".", "generator", ")", "\n", "inner_batch", "=", "[", "]", "\n", "outer_batch", "=", "[", "]", "\n", "\n", "for", "src_id", "in", "inner_batch_ids", ":", "\n", "            ", "src_example", "=", "self", ".", "examples", "[", "src_id", "]", "\n", "\n", "eta", "=", "0.5", "\n", "if", "random", ".", "random", "(", ")", ">=", "eta", ":", "\n", "                ", "sampled_ids", "=", "np", ".", "random", ".", "choice", "(", "\n", "len", "(", "self", ".", "src_examples", ")", ",", "self", ".", "num_batch_per_train", "-", "1", ",", "replace", "=", "False", ",", "\n", ")", "\n", "tgt_examples", "=", "[", "self", ".", "examples", "[", "i", "]", "for", "i", "in", "sampled_ids", "]", "\n", "", "else", ":", "\n", "                ", "neighbours", "=", "self", ".", "neighbours_list", "[", "src_id", "]", "\n", "sampled_ids", "=", "np", ".", "random", ".", "choice", "(", "\n", "len", "(", "neighbours", ")", ",", "\n", "self", ".", "num_batch_per_train", "-", "1", ",", "\n", "replace", "=", "False", ",", "\n", "p", "=", "self", ".", "probs_list", "[", "src_id", "]", ",", "\n", ")", "\n", "tgt_examples", "=", "[", "self", ".", "examples", "[", "neighbours", "[", "i", "]", "]", "for", "i", "in", "sampled_ids", "]", "\n", "\n", "", "inner_batch", ".", "append", "(", "src_example", ")", "\n", "outer_batch", "+=", "tgt_examples", "\n", "\n", "", "return", "inner_batch", ",", "[", "outer_batch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsKernelDataScheduler.__init__": [[250, 280], ["tensor2struct.training.data_scheduler.CogsEdistDataScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "examples", ",", "\n", "batch_size", ",", "\n", "num_batch_per_train", ",", "\n", "topk", "=", "100", ",", "\n", "temp", "=", "1", ",", "\n", "cache_dir", "=", "\".vector_cache/cogs\"", ",", "\n", "cache_file_prefix", "=", "\"kernel\"", ",", "\n", "kernel_name", "=", "\"sst\"", ",", "\n", "norm_kernel", "=", "False", ",", "\n", "lamb", "=", "1.0", ",", "\n", "mu", "=", "1.0", ",", "\n", ")", ":", "\n", "        ", "self", ".", "kernel_name", ",", "self", ".", "lamb", ",", "self", ".", "mu", "=", "kernel_name", ",", "lamb", ",", "mu", "\n", "self", ".", "norm_kernel", "=", "norm_kernel", "\n", "\n", "if", "not", "self", ".", "norm_kernel", ":", "\n", "            ", "prefix", "=", "f\"{cache_file_prefix}-{kernel_name}-{lamb}-{mu}\"", "\n", "", "else", ":", "\n", "            ", "prefix", "=", "f\"{cache_file_prefix}-norm-{kernel_name}-{lamb}-{mu}\"", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "\n", "examples", ",", "\n", "batch_size", ",", "\n", "num_batch_per_train", ",", "\n", "topk", "=", "topk", ",", "\n", "temp", "=", "temp", ",", "\n", "cache_dir", "=", "cache_dir", ",", "\n", "cache_file_prefix", "=", "prefix", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsKernelDataScheduler.save_parse": [[282, 289], ["open", "zip", "open.close", "open.write", "str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close"], ["", "def", "save_parse", "(", "self", ",", "parse_list", ")", ":", "\n", "        ", "f", "=", "open", "(", "f\"{self.cache_dir}/parse.tsv\"", ",", "\"w\"", ")", "\n", "for", "example", ",", "parse", "in", "zip", "(", "self", ".", "examples", ",", "parse_list", ")", ":", "\n", "            ", "f", ".", "write", "(", "\n", "f\"{' '.join(example[0]['tokens'])}\\t{' '.join(example[1]['actions'][1:-1])}\\t{str(parse)}\\n\"", "\n", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsKernelDataScheduler.build_cache": [[290, 333], ["tensor2struct.languages.dsl.cogs.CogsGrammar", "tqdm.tqdm", "tensor2struct.training.data_scheduler.CogsKernelDataScheduler.save_parse", "collections.defaultdict", "collections.defaultdict", "tqdm.tqdm", "tensor2struct.training.data_scheduler.CogsKernelDataScheduler.filter_topk", "enumerate", "parse_list.append", "enumerate", "range", "open", "pickle.dump", "len", "tensor2struct.languages.dsl.cogs.CogsGrammar.parse", "len", "len", "tensor2struct.languages.dsl.cogs.CogsGrammar.kernel", "neighbours_list[].append", "edists_list[].append", "neighbours_list[].append", "edists_list[].append", "tensor2struct.training.data_scheduler.CogsKernelDataScheduler.build_cache.attr_f"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.ScanKernelDataScheduler.save_parse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsEdistDataScheduler.filter_topk", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.dump", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.kernel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "build_cache", "(", "self", ",", "examples", ",", "cache_file", ")", ":", "\n", "# for testing only", "\n", "# _examples = [examples[i] for i in range(120)]", "\n", "# examples = _examples", "\n", "\n", "        ", "parser", "=", "cogs", ".", "CogsGrammar", "(", "self", ".", "kernel_name", ",", "self", ".", "lamb", ",", "self", ".", "mu", ")", "\n", "\n", "def", "attr_f", "(", "example", ")", ":", "\n", "            ", "return", "\" \"", ".", "join", "(", "example", "[", "0", "]", "[", "\"tokens\"", "]", ")", ",", "\" \"", ".", "join", "(", "example", "[", "1", "]", "[", "\"actions\"", "]", "[", "1", ":", "-", "1", "]", ")", "\n", "\n", "", "parse_list", "=", "[", "]", "# grammar reprentation of a neighbour", "\n", "for", "i", ",", "src_example", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "examples", ")", ",", "desc", "=", "\"parsing\"", ",", "total", "=", "len", "(", "examples", ")", "\n", ")", ":", "\n", "            ", "parse_list", ".", "append", "(", "parser", ".", "parse", "(", "*", "attr_f", "(", "src_example", ")", ")", ")", "\n", "", "self", ".", "save_parse", "(", "parse_list", ")", "# for debug", "\n", "\n", "neighbours_list", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "edists_list", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "src_example", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "examples", ")", ",", "desc", "=", "\"kernel\"", ",", "total", "=", "len", "(", "examples", ")", "\n", ")", ":", "\n", "            ", "src_parse", "=", "parse_list", "[", "i", "]", "\n", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "examples", ")", ")", ":", "\n", "                ", "tgt_parse", "=", "parse_list", "[", "j", "]", "\n", "\n", "sstkerenl", "=", "parser", ".", "kernel", "(", "src_parse", ",", "tgt_parse", ",", "self", ".", "norm_kernel", ")", "\n", "if", "self", ".", "norm_kernel", ":", "\n", "                    ", "assert", "sstkerenl", ">=", "0", "and", "sstkerenl", "<=", "1", "\n", "", "edist", "=", "-", "1", "*", "sstkerenl", "# make it compatible with edist", "\n", "\n", "neighbours_list", "[", "i", "]", ".", "append", "(", "j", ")", "\n", "edists_list", "[", "i", "]", ".", "append", "(", "edist", ")", "\n", "\n", "neighbours_list", "[", "j", "]", ".", "append", "(", "i", ")", "\n", "edists_list", "[", "j", "]", ".", "append", "(", "edist", ")", "\n", "\n", "", "", "self", ".", "filter_topk", "(", "neighbours_list", ",", "edists_list", ",", "self", ".", "topk", ")", "\n", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "[", "neighbours_list", ",", "edists_list", "]", ",", "f", ")", "\n", "", "return", "neighbours_list", ",", "edists_list", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsRandKerenlDataScheduler._get_comp_tasks": [[337, 365], ["next", "inner_batch.append", "random.random", "numpy.random.choice", "numpy.random.choice", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["    ", "def", "_get_comp_tasks", "(", "self", ",", "step", ")", ":", "\n", "        ", "inner_batch_ids", "=", "next", "(", "self", ".", "generator", ")", "\n", "inner_batch", "=", "[", "]", "\n", "outer_batch", "=", "[", "]", "\n", "\n", "for", "src_id", "in", "inner_batch_ids", ":", "\n", "            ", "src_example", "=", "self", ".", "examples", "[", "src_id", "]", "\n", "\n", "eta", "=", "0.5", "\n", "if", "random", ".", "random", "(", ")", ">=", "eta", ":", "\n", "                ", "sampled_ids", "=", "np", ".", "random", ".", "choice", "(", "\n", "len", "(", "self", ".", "src_examples", ")", ",", "self", ".", "num_batch_per_train", "-", "1", ",", "replace", "=", "False", ",", "\n", ")", "\n", "tgt_examples", "=", "[", "self", ".", "examples", "[", "i", "]", "for", "i", "in", "sampled_ids", "]", "\n", "", "else", ":", "\n", "                ", "neighbours", "=", "self", ".", "neighbours_list", "[", "src_id", "]", "\n", "sampled_ids", "=", "np", ".", "random", ".", "choice", "(", "\n", "len", "(", "neighbours", ")", ",", "\n", "self", ".", "num_batch_per_train", "-", "1", ",", "\n", "replace", "=", "False", ",", "\n", "p", "=", "self", ".", "probs_list", "[", "src_id", "]", ",", "\n", ")", "\n", "tgt_examples", "=", "[", "self", ".", "examples", "[", "neighbours", "[", "i", "]", "]", "for", "i", "in", "sampled_ids", "]", "\n", "\n", "", "inner_batch", ".", "append", "(", "src_example", ")", "\n", "outer_batch", "+=", "tgt_examples", "\n", "\n", "", "return", "inner_batch", ",", "[", "outer_batch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsStringKernelDataScheduler.__init__": [[369, 403], ["tensor2struct.training.data_scheduler.CogsEdistDataScheduler.__init__", "data_scheduler.load_ssk_module"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.load_ssk_module"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "examples", ",", "\n", "batch_size", ",", "\n", "num_batch_per_train", ",", "\n", "topk", "=", "100", ",", "\n", "temp", "=", "1", ",", "\n", "cache_dir", "=", "\".vector_cache/cogs\"", ",", "\n", "cache_file_prefix", "=", "\"string-kernel\"", ",", "\n", "norm_kernel", "=", "True", ",", "\n", "max_subseq", "=", "4", ",", "\n", "lamb", "=", "1.0", ",", "\n", ")", ":", "\n", "        ", "self", ".", "lamb", "=", "lamb", "\n", "self", ".", "max_subseq", "=", "4", "\n", "self", ".", "norm_kernel", "=", "norm_kernel", "\n", "\n", "if", "not", "self", ".", "norm_kernel", ":", "\n", "            ", "prefix", "=", "f\"{cache_file_prefix}-{lamb}\"", "\n", "", "else", ":", "\n", "            ", "prefix", "=", "f\"{cache_file_prefix}-norm-{lamb}\"", "\n", "\n", "# load ssk module when needed", "\n", "", "if", "\"tensor2struct.utils.string_kernel\"", "not", "in", "sys", ".", "modules", ":", "\n", "            ", "load_ssk_module", "(", ")", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "\n", "examples", ",", "\n", "batch_size", ",", "\n", "num_batch_per_train", ",", "\n", "topk", "=", "topk", ",", "\n", "temp", "=", "temp", ",", "\n", "cache_dir", "=", "cache_dir", ",", "\n", "cache_file_prefix", "=", "prefix", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsStringKernelDataScheduler.build_vocab": [[405, 413], ["set", "list", "set.add", "enumerate"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add"], ["", "def", "build_vocab", "(", "self", ",", "examples", ")", ":", "\n", "        ", "vocab", "=", "set", "(", ")", "\n", "for", "example", "in", "examples", ":", "\n", "            ", "for", "token", "in", "example", "[", "0", "]", "[", "\"tokens\"", "]", ":", "\n", "                ", "vocab", ".", "add", "(", "token", ")", "\n", "", "", "id2word", "=", "list", "(", "vocab", ")", "\n", "word2id", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "enumerate", "(", "id2word", ")", "}", "\n", "return", "id2word", ",", "word2id", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsStringKernelDataScheduler.build_cache": [[414, 465], ["tensor2struct.training.data_scheduler.CogsStringKernelDataScheduler.build_vocab", "collections.defaultdict", "collections.defaultdict", "tqdm.tqdm", "tensor2struct.training.data_scheduler.CogsStringKernelDataScheduler.filter_topk", "ssk.ssk_list", "enumerate", "range", "open", "pickle.dump", "ssk.ssk_list", "ssk.ssk_list", "len", "len", "tensor2struct.training.data_scheduler.CogsStringKernelDataScheduler.build_cache.kernel"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsStringKernelDataScheduler.build_vocab", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsEdistDataScheduler.filter_topk", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.dump", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.kernel"], ["", "def", "build_cache", "(", "self", ",", "examples", ",", "cache_file", ")", ":", "\n", "# for testing only", "\n", "# _examples = [examples[i] for i in range(120)]", "\n", "# examples = _examples", "\n", "\n", "        ", "id2word", ",", "word2id", "=", "self", ".", "build_vocab", "(", "examples", ")", "\n", "\n", "def", "attr_f", "(", "example", ")", ":", "\n", "            ", "return", "example", "[", "0", "]", "[", "\"tokens\"", "]", "\n", "\n", "", "def", "kernel", "(", "l1", ",", "l2", ")", ":", "\n", "# remove puntuation, only works for COGS", "\n", "            ", "if", "l1", "[", "-", "1", "]", "==", "\".\"", ":", "\n", "                ", "l1", "=", "l1", "[", ":", "-", "1", "]", "\n", "", "if", "l2", "[", "-", "1", "]", "==", "\".\"", ":", "\n", "                ", "l2", "=", "l2", "[", ":", "-", "1", "]", "\n", "\n", "", "ids_1", "=", "[", "word2id", "[", "w", "]", "for", "w", "in", "l1", "]", "\n", "ids_2", "=", "[", "word2id", "[", "w", "]", "for", "w", "in", "l2", "]", "\n", "\n", "k", "=", "ssk", ".", "ssk_list", "(", "ids_1", ",", "ids_2", ",", "self", ".", "max_subseq", ",", "self", ".", "lamb", ")", "\n", "if", "self", ".", "norm_kernel", ":", "\n", "                ", "n1", "=", "ssk", ".", "ssk_list", "(", "ids_1", ",", "ids_1", ",", "self", ".", "max_subseq", ",", "self", ".", "lamb", ")", "\n", "n2", "=", "ssk", ".", "ssk_list", "(", "ids_2", ",", "ids_2", ",", "self", ".", "max_subseq", ",", "self", ".", "lamb", ")", "\n", "dnorm", "=", "(", "n1", "*", "n2", ")", "**", "0.5", "\n", "k", "=", "k", "/", "dnorm", "\n", "", "return", "k", "\n", "\n", "", "neighbours_list", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "edists_list", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "src_example", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "examples", ")", ",", "desc", "=", "\"string-kernel\"", ",", "total", "=", "len", "(", "examples", ")", "\n", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "examples", ")", ")", ":", "\n", "                ", "tgt_example", "=", "examples", "[", "j", "]", "\n", "str_kerenl", "=", "kernel", "(", "attr_f", "(", "src_example", ")", ",", "attr_f", "(", "tgt_example", ")", ")", "\n", "if", "self", ".", "norm_kernel", ":", "\n", "                    ", "assert", "str_kerenl", ">=", "0", "and", "str_kerenl", "<=", "1", "\n", "", "edist", "=", "-", "1", "*", "str_kerenl", "# make it compatible with edist", "\n", "\n", "neighbours_list", "[", "i", "]", ".", "append", "(", "j", ")", "\n", "edists_list", "[", "i", "]", ".", "append", "(", "edist", ")", "\n", "\n", "neighbours_list", "[", "j", "]", ".", "append", "(", "i", ")", "\n", "edists_list", "[", "j", "]", ".", "append", "(", "edist", ")", "\n", "\n", "", "", "self", ".", "filter_topk", "(", "neighbours_list", ",", "edists_list", ",", "self", ".", "topk", ")", "\n", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "[", "neighbours_list", ",", "edists_list", "]", ",", "f", ")", "\n", "", "return", "neighbours_list", ",", "edists_list", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsRandStringKernelDataScheduler._get_comp_tasks": [[469, 497], ["next", "inner_batch.append", "random.random", "numpy.random.choice", "numpy.random.choice", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["    ", "def", "_get_comp_tasks", "(", "self", ",", "step", ")", ":", "\n", "        ", "inner_batch_ids", "=", "next", "(", "self", ".", "generator", ")", "\n", "inner_batch", "=", "[", "]", "\n", "outer_batch", "=", "[", "]", "\n", "\n", "for", "src_id", "in", "inner_batch_ids", ":", "\n", "            ", "src_example", "=", "self", ".", "examples", "[", "src_id", "]", "\n", "\n", "eta", "=", "0.5", "\n", "if", "random", ".", "random", "(", ")", ">=", "eta", ":", "\n", "                ", "sampled_ids", "=", "np", ".", "random", ".", "choice", "(", "\n", "len", "(", "self", ".", "src_examples", ")", ",", "self", ".", "num_batch_per_train", "-", "1", ",", "replace", "=", "False", ",", "\n", ")", "\n", "tgt_examples", "=", "[", "self", ".", "examples", "[", "i", "]", "for", "i", "in", "sampled_ids", "]", "\n", "", "else", ":", "\n", "                ", "neighbours", "=", "self", ".", "neighbours_list", "[", "src_id", "]", "\n", "sampled_ids", "=", "np", ".", "random", ".", "choice", "(", "\n", "len", "(", "neighbours", ")", ",", "\n", "self", ".", "num_batch_per_train", "-", "1", ",", "\n", "replace", "=", "False", ",", "\n", "p", "=", "self", ".", "probs_list", "[", "src_id", "]", ",", "\n", ")", "\n", "tgt_examples", "=", "[", "self", ".", "examples", "[", "neighbours", "[", "i", "]", "]", "for", "i", "in", "sampled_ids", "]", "\n", "\n", "", "inner_batch", ".", "append", "(", "src_example", ")", "\n", "outer_batch", "+=", "tgt_examples", "\n", "\n", "", "return", "inner_batch", ",", "[", "outer_batch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsNLKernelDataScheduler.__init__": [[501, 531], ["tensor2struct.training.data_scheduler.CogsEdistDataScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "examples", ",", "\n", "batch_size", ",", "\n", "num_batch_per_train", ",", "\n", "topk", "=", "100", ",", "\n", "temp", "=", "1", ",", "\n", "cache_dir", "=", "\".vector_cache/cogs\"", ",", "\n", "cache_file_prefix", "=", "\"nl-kernel\"", ",", "\n", "kernel_name", "=", "\"sst\"", ",", "\n", "norm_kernel", "=", "False", ",", "\n", "lamb", "=", "1.0", ",", "\n", "mu", "=", "1.0", ",", "\n", ")", ":", "\n", "        ", "self", ".", "kernel_name", ",", "self", ".", "lamb", ",", "self", ".", "mu", "=", "kernel_name", ",", "lamb", ",", "mu", "\n", "self", ".", "norm_kernel", "=", "norm_kernel", "\n", "\n", "if", "not", "self", ".", "norm_kernel", ":", "\n", "            ", "prefix", "=", "f\"{cache_file_prefix}-{kernel_name}-{lamb}-{mu}\"", "\n", "", "else", ":", "\n", "            ", "prefix", "=", "f\"{cache_file_prefix}-norm-{kernel_name}-{lamb}-{mu}\"", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "\n", "examples", ",", "\n", "batch_size", ",", "\n", "num_batch_per_train", ",", "\n", "topk", "=", "topk", ",", "\n", "temp", "=", "temp", ",", "\n", "cache_dir", "=", "cache_dir", ",", "\n", "cache_file_prefix", "=", "prefix", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsNLKernelDataScheduler.save_parse": [[533, 540], ["open", "zip", "open.close", "open.write", "str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close"], ["", "def", "save_parse", "(", "self", ",", "parse_list", ")", ":", "\n", "        ", "f", "=", "open", "(", "f\"{self.cache_dir}/nl-parse.tsv\"", ",", "\"w\"", ")", "\n", "for", "example", ",", "parse", "in", "zip", "(", "self", ".", "examples", ",", "parse_list", ")", ":", "\n", "            ", "f", ".", "write", "(", "\n", "f\"{' '.join(example[0]['tokens'])}\\t{' '.join(example[1]['actions'][1:-1])}\\t{str(parse)}\\n\"", "\n", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsNLKernelDataScheduler.build_cache": [[541, 584], ["tensor2struct.languages.dsl.cogs.CogsGrammar", "tqdm.tqdm", "tensor2struct.training.data_scheduler.CogsNLKernelDataScheduler.save_parse", "collections.defaultdict", "collections.defaultdict", "tqdm.tqdm", "tensor2struct.training.data_scheduler.CogsNLKernelDataScheduler.filter_topk", "enumerate", "parse_list.append", "enumerate", "range", "open", "pickle.dump", "len", "tensor2struct.languages.dsl.cogs.CogsGrammar.parse_nl", "len", "len", "tensor2struct.languages.dsl.cogs.CogsGrammar.kernel", "neighbours_list[].append", "edists_list[].append", "neighbours_list[].append", "edists_list[].append", "tensor2struct.training.data_scheduler.CogsNLKernelDataScheduler.build_cache.attr_f"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.ScanKernelDataScheduler.save_parse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsEdistDataScheduler.filter_topk", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.dump", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.cogs.CogsGrammar.parse_nl", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.kernel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "build_cache", "(", "self", ",", "examples", ",", "cache_file", ")", ":", "\n", "# for testing only", "\n", "# _examples = [examples[i] for i in range(120)]", "\n", "# examples = _examples", "\n", "\n", "        ", "parser", "=", "cogs", ".", "CogsGrammar", "(", "self", ".", "kernel_name", ",", "self", ".", "lamb", ",", "self", ".", "mu", ")", "\n", "\n", "def", "attr_f", "(", "example", ")", ":", "\n", "            ", "return", "\" \"", ".", "join", "(", "example", "[", "0", "]", "[", "\"tokens\"", "]", ")", "\n", "\n", "", "parse_list", "=", "[", "]", "# grammar reprentation of a neighbour", "\n", "for", "i", ",", "src_example", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "examples", ")", ",", "desc", "=", "\"parsing\"", ",", "total", "=", "len", "(", "examples", ")", "\n", ")", ":", "\n", "            ", "parse_list", ".", "append", "(", "parser", ".", "parse_nl", "(", "attr_f", "(", "src_example", ")", ")", ")", "\n", "", "self", ".", "save_parse", "(", "parse_list", ")", "# for debug", "\n", "\n", "neighbours_list", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "edists_list", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "src_example", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "examples", ")", ",", "desc", "=", "\"nl-kernel\"", ",", "total", "=", "len", "(", "examples", ")", "\n", ")", ":", "\n", "            ", "src_parse", "=", "parse_list", "[", "i", "]", "\n", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "examples", ")", ")", ":", "\n", "                ", "tgt_parse", "=", "parse_list", "[", "j", "]", "\n", "\n", "sstkerenl", "=", "parser", ".", "kernel", "(", "src_parse", ",", "tgt_parse", ",", "self", ".", "norm_kernel", ")", "\n", "if", "self", ".", "norm_kernel", ":", "\n", "                    ", "assert", "sstkerenl", ">=", "0", "and", "sstkerenl", "<=", "1", "\n", "", "edist", "=", "-", "1", "*", "sstkerenl", "# make it compatible with edist", "\n", "\n", "neighbours_list", "[", "i", "]", ".", "append", "(", "j", ")", "\n", "edists_list", "[", "i", "]", ".", "append", "(", "edist", ")", "\n", "\n", "neighbours_list", "[", "j", "]", ".", "append", "(", "i", ")", "\n", "edists_list", "[", "j", "]", ".", "append", "(", "edist", ")", "\n", "\n", "", "", "self", ".", "filter_topk", "(", "neighbours_list", ",", "edists_list", ",", "self", ".", "topk", ")", "\n", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "[", "neighbours_list", ",", "edists_list", "]", ",", "f", ")", "\n", "", "return", "neighbours_list", ",", "edists_list", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsNLRandKerenlDataScheduler._get_comp_tasks": [[588, 616], ["next", "inner_batch.append", "random.random", "numpy.random.choice", "numpy.random.choice", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["    ", "def", "_get_comp_tasks", "(", "self", ",", "step", ")", ":", "\n", "        ", "inner_batch_ids", "=", "next", "(", "self", ".", "generator", ")", "\n", "inner_batch", "=", "[", "]", "\n", "outer_batch", "=", "[", "]", "\n", "\n", "for", "src_id", "in", "inner_batch_ids", ":", "\n", "            ", "src_example", "=", "self", ".", "examples", "[", "src_id", "]", "\n", "\n", "eta", "=", "0.5", "\n", "if", "random", ".", "random", "(", ")", ">=", "eta", ":", "\n", "                ", "sampled_ids", "=", "np", ".", "random", ".", "choice", "(", "\n", "len", "(", "self", ".", "src_examples", ")", ",", "self", ".", "num_batch_per_train", "-", "1", ",", "replace", "=", "False", ",", "\n", ")", "\n", "tgt_examples", "=", "[", "self", ".", "examples", "[", "i", "]", "for", "i", "in", "sampled_ids", "]", "\n", "", "else", ":", "\n", "                ", "neighbours", "=", "self", ".", "neighbours_list", "[", "src_id", "]", "\n", "sampled_ids", "=", "np", ".", "random", ".", "choice", "(", "\n", "len", "(", "neighbours", ")", ",", "\n", "self", ".", "num_batch_per_train", "-", "1", ",", "\n", "replace", "=", "False", ",", "\n", "p", "=", "self", ".", "probs_list", "[", "src_id", "]", ",", "\n", ")", "\n", "tgt_examples", "=", "[", "self", ".", "examples", "[", "neighbours", "[", "i", "]", "]", "for", "i", "in", "sampled_ids", "]", "\n", "\n", "", "inner_batch", ".", "append", "(", "src_example", ")", "\n", "outer_batch", "+=", "tgt_examples", "\n", "\n", "", "return", "inner_batch", ",", "[", "outer_batch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsRandScheduler.__init__": [[625, 630], ["tensor2struct.training.data_scheduler.CogsRandScheduler._get_generator"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsRandScheduler._get_generator"], ["def", "__init__", "(", "self", ",", "examples", ",", "batch_size", ",", "num_batch_per_train", ")", ":", "\n", "        ", "self", ".", "examples", "=", "examples", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_batch_per_train", "=", "num_batch_per_train", "\n", "self", ".", "generator", "=", "self", ".", "_get_generator", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsRandScheduler._get_generator": [[631, 641], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "_get_generator", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "examples", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", "collate_fn", "=", "lambda", "x", ":", "x", ",", "\n", ")", "\n", "yield", "from", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsRandScheduler.get_batch": [[642, 650], ["next", "range", "random.choice", "outer_batch.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "", "def", "get_batch", "(", "self", ",", "step", "=", "None", ")", ":", "\n", "        ", "inner_batch", "=", "next", "(", "self", ".", "generator", ")", "\n", "\n", "outer_batch", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "example", "=", "random", ".", "choice", "(", "self", ".", "examples", ")", "\n", "outer_batch", ".", "append", "(", "example", ")", "\n", "", "return", "inner_batch", ",", "[", "outer_batch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.ScanEdistDataScheduler.__init__": [[659, 678], ["tensor2struct.training.data_scheduler.CogsEdistDataScheduler.__init__", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "split", ",", "\n", "examples", ",", "\n", "batch_size", ",", "\n", "num_batch_per_train", ",", "\n", "topk", "=", "100", ",", "\n", "temp", "=", "1", ",", "\n", "cache_dir", "=", "\".vector_cache/scan\"", ",", "\n", "cache_file_prefix", "=", "\"edist\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "examples", ",", "\n", "batch_size", ",", "\n", "num_batch_per_train", ",", "\n", "topk", "=", "topk", ",", "\n", "temp", "=", "temp", ",", "\n", "cache_dir", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "split", ")", ",", "\n", "cache_file_prefix", "=", "cache_file_prefix", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.ScanRandEdistDataScheduler.__init__": [[683, 702], ["tensor2struct.training.data_scheduler.CogsEdistDataScheduler.__init__", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "split", ",", "\n", "examples", ",", "\n", "batch_size", ",", "\n", "num_batch_per_train", ",", "\n", "topk", "=", "100", ",", "\n", "temp", "=", "1", ",", "\n", "cache_dir", "=", "\".vector_cache/scan\"", ",", "\n", "cache_file_prefix", "=", "\"edist\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "examples", ",", "\n", "batch_size", ",", "\n", "num_batch_per_train", ",", "\n", "topk", "=", "topk", ",", "\n", "temp", "=", "temp", ",", "\n", "cache_dir", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "split", ")", ",", "\n", "cache_file_prefix", "=", "cache_file_prefix", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.ScanStringKernelDataScheduler.__init__": [[706, 725], ["tensor2struct.training.data_scheduler.CogsStringKernelDataScheduler.__init__", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "split", ",", "\n", "examples", ",", "\n", "batch_size", ",", "\n", "num_batch_per_train", ",", "\n", "topk", "=", "100", ",", "\n", "temp", "=", "1", ",", "\n", "cache_dir", "=", "\".vector_cache/scan\"", ",", "\n", "cache_file_prefix", "=", "\"string-kernel\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "examples", ",", "\n", "batch_size", ",", "\n", "num_batch_per_train", ",", "\n", "topk", "=", "topk", ",", "\n", "temp", "=", "temp", ",", "\n", "cache_dir", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "split", ")", ",", "\n", "cache_file_prefix", "=", "cache_file_prefix", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.ScanRandStringDataScheduler.__init__": [[730, 749], ["tensor2struct.training.data_scheduler.CogsStringKernelDataScheduler.__init__", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "split", ",", "\n", "examples", ",", "\n", "batch_size", ",", "\n", "num_batch_per_train", ",", "\n", "topk", "=", "100", ",", "\n", "temp", "=", "1", ",", "\n", "cache_dir", "=", "\".vector_cache/scan\"", ",", "\n", "cache_file_prefix", "=", "\"string-kernel\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "examples", ",", "\n", "batch_size", ",", "\n", "num_batch_per_train", ",", "\n", "topk", "=", "topk", ",", "\n", "temp", "=", "temp", ",", "\n", "cache_dir", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "split", ")", ",", "\n", "cache_file_prefix", "=", "cache_file_prefix", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.ScanKernelDataScheduler.__init__": [[753, 771], ["tensor2struct.training.data_scheduler.CogsEdistDataScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "examples", ",", "\n", "batch_size", ",", "\n", "num_batch_per_train", ",", "\n", "topk", "=", "100", ",", "\n", "temp", "=", "1", ",", "\n", "cache_dir", "=", "\".vector_cache/scan\"", ",", "\n", "cache_file_prefix", "=", "\"kernel\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "examples", ",", "\n", "batch_size", ",", "\n", "num_batch_per_train", ",", "\n", "topk", "=", "topk", ",", "\n", "temp", "=", "temp", ",", "\n", "cache_dir", "=", "cache_dir", ",", "\n", "cache_file_prefix", "=", "cache_file_prefix", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.ScanKernelDataScheduler.save_parse": [[773, 778], ["open", "zip", "open.close", "open.write", "str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close"], ["", "def", "save_parse", "(", "self", ",", "parse_list", ")", ":", "\n", "        ", "f", "=", "open", "(", "f\"{self.cache_dir}/parse.tsv\"", ",", "\"w\"", ")", "\n", "for", "example", ",", "parse", "in", "zip", "(", "self", ".", "examples", ",", "parse_list", ")", ":", "\n", "            ", "f", ".", "write", "(", "f\"{' '.join(example[0]['tokens'])}\\t{str(parse)}\\n\"", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.ScanKernelDataScheduler.build_cache": [[779, 820], ["tensor2struct.languages.dsl.scan.ScanGrammar", "tqdm.tqdm", "tensor2struct.training.data_scheduler.ScanKernelDataScheduler.save_parse", "collections.defaultdict", "collections.defaultdict", "tqdm.tqdm", "tensor2struct.training.data_scheduler.ScanKernelDataScheduler.filter_topk", "enumerate", "parse_list.append", "enumerate", "range", "open", "pickle.dump", "len", "tensor2struct.languages.dsl.scan.ScanGrammar.parse_command", "len", "len", "tensor2struct.languages.dsl.scan.ScanGrammar.kernel", "neighbours_list[].append", "edists_list[].append", "neighbours_list[].append", "edists_list[].append", "tensor2struct.training.data_scheduler.ScanKernelDataScheduler.build_cache.attr_f"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.ScanKernelDataScheduler.save_parse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsEdistDataScheduler.filter_topk", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.dump", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.parse_command", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.kernel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "build_cache", "(", "self", ",", "examples", ",", "cache_file", ")", ":", "\n", "# for testing only", "\n", "# _examples = [examples[i] for i in range(120)]", "\n", "# examples = _examples", "\n", "\n", "        ", "parser", "=", "scan", ".", "ScanGrammar", "(", ")", "\n", "\n", "def", "attr_f", "(", "example", ")", ":", "\n", "            ", "return", "\" \"", ".", "join", "(", "example", "[", "0", "]", "[", "\"tokens\"", "]", ")", "\n", "\n", "", "parse_list", "=", "[", "]", "# grammar reprentation of a neighbour", "\n", "for", "i", ",", "src_example", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "examples", ")", ",", "desc", "=", "\"parsing\"", ",", "total", "=", "len", "(", "examples", ")", "\n", ")", ":", "\n", "            ", "parse_list", ".", "append", "(", "parser", ".", "parse_command", "(", "attr_f", "(", "src_example", ")", ")", ")", "\n", "", "self", ".", "save_parse", "(", "parse_list", ")", "# for debug", "\n", "\n", "neighbours_list", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "edists_list", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "src_example", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "examples", ")", ",", "desc", "=", "\"kernel\"", ",", "total", "=", "len", "(", "examples", ")", "\n", ")", ":", "\n", "            ", "src_parse", "=", "parse_list", "[", "i", "]", "\n", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "examples", ")", ")", ":", "\n", "                ", "tgt_parse", "=", "parse_list", "[", "j", "]", "\n", "\n", "sstkerenl", "=", "parser", ".", "kernel", "(", "src_parse", ",", "tgt_parse", ")", "\n", "edist", "=", "-", "1", "*", "sstkerenl", "# make it compatible with edist", "\n", "\n", "neighbours_list", "[", "i", "]", ".", "append", "(", "j", ")", "\n", "edists_list", "[", "i", "]", ".", "append", "(", "edist", ")", "\n", "\n", "neighbours_list", "[", "j", "]", ".", "append", "(", "i", ")", "\n", "edists_list", "[", "j", "]", ".", "append", "(", "edist", ")", "\n", "\n", "", "", "self", ".", "filter_topk", "(", "neighbours_list", ",", "edists_list", ",", "self", ".", "topk", ")", "\n", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "[", "neighbours_list", ",", "edists_list", "]", ",", "f", ")", "\n", "", "return", "neighbours_list", ",", "edists_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.load_ssk_module": [[20, 25], ["pyximport.install"], "function", ["None"], ["def", "load_ssk_module", "(", ")", ":", "\n", "    ", "import", "pyximport", "\n", "\n", "pyximport", ".", "install", "(", ")", "\n", "import", "tensor2struct", ".", "utils", ".", "string_kernel", "as", "ssk", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.run.parse_args": [[17, 28], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.parse_args"], ["config_args", "=", "attr", ".", "ib", "(", ")", "\n", "logdir", "=", "attr", ".", "ib", "(", ")", "\n", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"mode\"", ",", "choices", "=", "[", "\"train\"", ",", "\"eval_tagging\"", ",", "\"eval_ctc\"", ",", "\"eval_ssnt\"", ",", "\"eval_swan\"", "]", ",", "help", "=", "\"train/eval_aligned/eval_ctc\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"exp_config_file\"", ",", "help", "=", "\"jsonnet file for experiments\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.run.eval_and_report_cogs": [[30, 123], ["collections.defaultdict", "print", "tensor2struct.commands.run.InferConfig", "tensor2struct.commands.run.EvalConfig", "wandb.config.update", "print", "str", "tensor2struct.commands.eval.main", "wandb.config.update", "wandb.log", "print", "str"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.main", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update"], ["model_config_file", "=", "exp_config", "[", "\"model_config\"", "]", "\n", "if", "\"model_config_args\"", "in", "exp_config", ":", "\n", "        ", "model_config_args", "=", "json", ".", "dumps", "(", "exp_config", "[", "\"model_config_args\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "model_config_args", "=", "None", "\n", "\n", "# cluster base dir", "\n", "", "log_base_dir", "=", "os", ".", "environ", ".", "get", "(", "\"LOG_BASE_DIR\"", ",", "None", ")", "\n", "if", "log_base_dir", "is", "None", ":", "\n", "        ", "print", "(", "f\"Using default log base dir {os.getcwd()}\"", ")", "\n", "logdir", "=", "exp_config", "[", "\"logdir\"", "]", "\n", "", "else", ":", "\n", "        ", "logdir", "=", "os", ".", "path", ".", "join", "(", "log_base_dir", ",", "exp_config", "[", "\"logdir\"", "]", ")", "\n", "\n", "# wandb init", "\n", "", "expname", "=", "exp_config", "[", "\"logdir\"", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "project", "=", "exp_config", "[", "\"project\"", "]", "\n", "\n", "# dist train need to start a wandb session in each process, not a global one", "\n", "if", "args", ".", "mode", "in", "[", "\"train\"", ",", "\"eval_tagging\"", ",", "\"eval_ctc\"", ",", "\"eval_ssnt\"", ",", "\"eval_swan\"", "]", ":", "\n", "        ", "wandb", ".", "init", "(", "project", "=", "project", ",", "group", "=", "expname", ",", "job_type", "=", "args", ".", "mode", ")", "\n", "\n", "", "if", "args", ".", "mode", "==", "\"train\"", ":", "\n", "        ", "train_config", "=", "TrainConfig", "(", "model_config_file", ",", "model_config_args", ",", "logdir", ")", "\n", "train", ".", "main", "(", "train_config", ")", "\n", "", "elif", "args", ".", "mode", "in", "[", "\"eval_tagging\"", "]", ":", "\n", "        ", "run", ".", "eval_and_report", "(", "args", ",", "exp_config", ",", "model_config_args", ",", "logdir", ",", "infer_mod", "=", "infer_tagging", ")", "\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.run.main": [[125, 151], ["run.parse_args", "tensor2struct.commands.run.load_args", "os.environ.get", "print", "os.path.join", "wandb.init", "run.eval_and_report_cogs", "exp_config[].split", "run.eval_and_report_cogs", "os.getcwd"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.parse_args", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.load_args", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.run.eval_and_report_cogs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.run.eval_and_report_cogs"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.__init__": [[91, 93], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.initializer": [[94, 97], ["fairseq.data.encoders.gpt2_bpe.get_encoder"], "methods", ["None"], ["", "def", "initializer", "(", "self", ")", ":", "\n", "        ", "global", "bpe", "\n", "bpe", "=", "get_encoder", "(", "self", ".", "args", ".", "encoder_json", ",", "self", ".", "args", ".", "vocab_bpe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.encode": [[98, 102], ["bpe.encode", "list", "map"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.encode"], ["", "def", "encode", "(", "self", ",", "line", ")", ":", "\n", "        ", "global", "bpe", "\n", "ids", "=", "bpe", ".", "encode", "(", "line", ")", "\n", "return", "list", "(", "map", "(", "str", ",", "ids", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode": [[103, 106], ["bpe.decode"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode"], ["", "def", "decode", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "global", "bpe", "\n", "return", "bpe", ".", "decode", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.encode_lines": [[107, 119], ["line.strip.strip.strip", "bpe_encoder.MultiprocessingEncoder.encode", "enc_lines.append", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.encode", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "encode_lines", "(", "self", ",", "lines", ")", ":", "\n", "        ", "\"\"\"\n        Encode a set of lines. All lines will be encoded together.\n        \"\"\"", "\n", "enc_lines", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "len", "(", "line", ")", "==", "0", "and", "not", "self", ".", "args", ".", "keep_empty", ":", "\n", "                ", "return", "[", "\"EMPTY\"", ",", "None", "]", "\n", "", "tokens", "=", "self", ".", "encode", "(", "line", ")", "\n", "enc_lines", ".", "append", "(", "\" \"", ".", "join", "(", "tokens", ")", ")", "\n", "", "return", "[", "\"PASS\"", ",", "enc_lines", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode_lines": [[120, 126], ["map", "dec_lines.append", "line.strip().split", "bpe_encoder.MultiprocessingEncoder.decode", "line.strip"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode"], ["", "def", "decode_lines", "(", "self", ",", "lines", ")", ":", "\n", "        ", "dec_lines", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "tokens", "=", "map", "(", "int", ",", "line", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "dec_lines", ".", "append", "(", "self", ".", "decode", "(", "tokens", ")", ")", "\n", "", "return", "[", "\"PASS\"", ",", "dec_lines", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.main": [[18, 87], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "len", "contextlib.ExitStack", "bpe_encoder.MultiprocessingEncoder", "multiprocessing.Pool", "multiprocessing.Pool.imap", "collections.Counter", "enumerate", "collections.Counter.most_common", "zip", "print", "stack.enter_context", "stack.enter_context", "zip", "print", "open", "open", "print"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.parse_args"], ["def", "main", "(", ")", ":", "\n", "    ", "\"\"\"\n    Helper script to encode raw text with the GPT-2 BPE using multiple processes.\n\n    The encoder.json and vocab.bpe files can be obtained here:\n    - https://dl.fbaipublicfiles.com/fairseq/gpt2_bpe/encoder.json\n    - https://dl.fbaipublicfiles.com/fairseq/gpt2_bpe/vocab.bpe\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--encoder-json\"", ",", "\n", "help", "=", "'path to encoder.json'", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--vocab-bpe\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'path to vocab.bpe'", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--inputs\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "'-'", "]", ",", "\n", "help", "=", "\"input files to filter/encode\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outputs\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "'-'", "]", ",", "\n", "help", "=", "\"path to save encoded outputs\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--keep-empty\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"keep empty lines\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--workers\"", ",", "type", "=", "int", ",", "default", "=", "20", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "assert", "len", "(", "args", ".", "inputs", ")", "==", "len", "(", "args", ".", "outputs", ")", ",", "\"number of input and output paths should match\"", "\n", "\n", "with", "contextlib", ".", "ExitStack", "(", ")", "as", "stack", ":", "\n", "        ", "inputs", "=", "[", "\n", "stack", ".", "enter_context", "(", "open", "(", "input", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", ")", "\n", "if", "input", "!=", "\"-\"", "else", "sys", ".", "stdin", "\n", "for", "input", "in", "args", ".", "inputs", "\n", "]", "\n", "outputs", "=", "[", "\n", "stack", ".", "enter_context", "(", "open", "(", "output", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", ")", "\n", "if", "output", "!=", "\"-\"", "else", "sys", ".", "stdout", "\n", "for", "output", "in", "args", ".", "outputs", "\n", "]", "\n", "\n", "encoder", "=", "MultiprocessingEncoder", "(", "args", ")", "\n", "pool", "=", "Pool", "(", "args", ".", "workers", ",", "initializer", "=", "encoder", ".", "initializer", ")", "\n", "encoded_lines", "=", "pool", ".", "imap", "(", "encoder", ".", "encode_lines", ",", "zip", "(", "*", "inputs", ")", ",", "100", ")", "\n", "\n", "stats", "=", "Counter", "(", ")", "\n", "for", "i", ",", "(", "filt", ",", "enc_lines", ")", "in", "enumerate", "(", "encoded_lines", ",", "start", "=", "1", ")", ":", "\n", "            ", "if", "filt", "==", "\"PASS\"", ":", "\n", "                ", "for", "enc_line", ",", "output_h", "in", "zip", "(", "enc_lines", ",", "outputs", ")", ":", "\n", "                    ", "print", "(", "enc_line", ",", "file", "=", "output_h", ")", "\n", "", "", "else", ":", "\n", "                ", "stats", "[", "\"num_filtered_\"", "+", "filt", "]", "+=", "1", "\n", "", "if", "i", "%", "10000", "==", "0", ":", "\n", "                ", "print", "(", "\"processed {} lines\"", ".", "format", "(", "i", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "", "", "for", "k", ",", "v", "in", "stats", ".", "most_common", "(", ")", ":", "\n", "            ", "print", "(", "\"[{}] filtered {} lines\"", ".", "format", "(", "k", ",", "v", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.train.Trainer.load_train_config": [[31, 33], ["tensor2struct.utils.registry.instantiate"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.instantiate"], ["from", "tensorflow", ".", "contrib", ".", "learn", ".", "python", ".", "learn", ".", "estimators", "import", "run_config", "\n", "from", "tensorflow", "import", "gfile", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.train.Trainer.load_optimizer": [[34, 68], ["tensor2struct.commands.train.Trainer.model.get_bert_parameters", "tensor2struct.commands.train.Trainer.model.get_non_bert_parameters", "tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.construct", "len", "config.get", "config.get", "len", "len", "list", "tensor2struct.commands.train.Trainer.model.get_trainable_parameters", "tensor2struct.commands.train.Trainer.model.parameters"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.get_bert_parameters", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.get_non_bert_parameters", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.get_trainable_parameters"], ["from", "seq2seq", "import", "models", "\n", "from", "seq2seq", ".", "contrib", ".", "experiment", "import", "Experiment", "as", "PatchedExperiment", "\n", "from", "seq2seq", ".", "configurable", "import", "_maybe_load_yaml", ",", "_create_from_dict", "\n", "from", "seq2seq", ".", "configurable", "import", "_deep_merge_dict", "\n", "from", "seq2seq", ".", "data", "import", "input_pipeline", "\n", "from", "seq2seq", ".", "metrics", "import", "metric_specs", "\n", "from", "seq2seq", ".", "training", "import", "hooks", "\n", "from", "seq2seq", ".", "training", "import", "utils", "as", "training_utils", "\n", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"config_paths\"", ",", "\"\"", ",", "\n", "\"\"\"Path to a YAML configuration files defining FLAG\n                       values. Multiple files can be separated by commas.\n                       Files are merged recursively. Setting a key in these\n                       files is equivalent to setting the FLAG value with\n                       the same name.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"hooks\"", ",", "\"[]\"", ",", "\n", "\"\"\"YAML configuration string for the\n                       training hooks to use.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"metrics\"", ",", "\"[]\"", ",", "\n", "\"\"\"YAML configuration string for the\n                       training metrics to use.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"model\"", ",", "\"\"", ",", "\n", "\"\"\"Name of the model class.\n                       Can be either a fully-qualified name, or the name\n                       of a class defined in `seq2seq.models`.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"model_params\"", ",", "\"{}\"", ",", "\n", "\"\"\"YAML configuration string for the model\n                       parameters.\"\"\"", ")", "\n", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"input_pipeline_train\"", ",", "\"{}\"", ",", "\n", "\"\"\"YAML configuration string for the training\n                       data input pipeline.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"input_pipeline_dev\"", ",", "\"{}\"", ",", "\n", "\"\"\"YAML configuration string for the development\n                       data input pipeline.\"\"\"", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.train.Trainer.load_train_data": [[69, 91], ["tensor2struct.commands.train.Trainer.model_preproc.dataset", "tensor2struct.commands.train.Trainer.model_preproc.dataset", "tensor2struct.commands.train.Trainer.logger.info", "tensor2struct.utils.registry.construct", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.dataset", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.dataset", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct"], ["\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"buckets\"", ",", "None", ",", "\n", "\"\"\"Buckets input sequences according to these length.\n                       A comma-separated list of sequence length buckets, e.g.\n                       \"10,20,30\" would result in 4 buckets:\n                       <10, 10-20, 20-30, >30. None disabled bucketing. \"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"batch_size\"", ",", "16", ",", "\n", "\"\"\"Batch size used for training and evaluation.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"output_dir\"", ",", "None", ",", "\n", "\"\"\"The directory to write model checkpoints and summaries\n                       to. If None, a local temporary directory is created.\"\"\"", ")", "\n", "\n", "# Training parameters", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"schedule\"", ",", "\"continuous_train_and_eval\"", ",", "\n", "\"\"\"Estimator function to call, defaults to\n                       continuous_train_and_eval for local run\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"train_steps\"", ",", "None", ",", "\n", "\"\"\"Maximum number of training steps to run.\n                         If None, train forever.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"eval_every_n_steps\"", ",", "1000", ",", "\n", "\"Run evaluation on validation data every N steps.\"", ")", "\n", "\n", "# RunConfig Flags", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.train.Trainer._inner_forward": [[92, 116], ["model.encoder", "zip", "torch.mean", "model", "losses.append", "torch.stack", "model.decoder.compute_mle_loss", "tensor2struct.commands.train.Trainer.logger.warn", "torch.Tensor().to", "torch.Tensor", "str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_mle_loss", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["tf", ".", "flags", ".", "DEFINE_integer", "(", "\"tf_random_seed\"", ",", "None", ",", "\n", "\"\"\"Random seed for TensorFlow initializers. Setting\n                        this value allows consistency between reruns.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"save_checkpoints_secs\"", ",", "None", ",", "\n", "\"\"\"Save checkpoints every this many seconds.\n                        Can not be specified with save_checkpoints_steps.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"save_checkpoints_steps\"", ",", "None", ",", "\n", "\"\"\"Save checkpoints every this many steps.\n                        Can not be specified with save_checkpoints_secs.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"keep_checkpoint_max\"", ",", "5", ",", "\n", "\"\"\"Maximum number of recent checkpoint files to keep.\n                        As new files are created, older files are deleted.\n                        If None or 0, all checkpoint files are kept.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"keep_checkpoint_every_n_hours\"", ",", "4", ",", "\n", "\"\"\"In addition to keeping the most recent checkpoint\n                        files, keep one checkpoint file for every N hours of\n                        training.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_float", "(", "\"gpu_memory_fraction\"", ",", "1.0", ",", "\n", "\"\"\"Fraction of GPU memory used by the process on\n                      each GPU uniformly on the same machine.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_boolean", "(", "\"gpu_allow_growth\"", ",", "False", ",", "\n", "\"\"\"Allow GPU memory allocation to grow\n                        dynamically.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_boolean", "(", "\"log_device_placement\"", ",", "False", ",", "\n", "\"\"\"Log the op placement to devices\"\"\"", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.train.Trainer.step": [[117, 143], ["range", "optimizer.step", "lr_scheduler.update_lr", "optimizer.zero_grad", "train_data_scheduler.get_batch", "tensor2struct.commands.train.Trainer._inner_forward", "norm_loss.backward", "tensor2struct.commands.train.Trainer.logger.info", "tensor2struct.commands.train.Trainer.logger.info", "wandb.log", "range", "torch.nn.utils.clip_grad_norm_", "len", "wandb.log", "loss.item", "loss.item"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.optimizers.BertWarmupPolynomialLRSchedulerGroupV2.update_lr", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsRandScheduler.get_batch", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.train.Trainer._inner_forward"], ["\n", "\n", "FLAGS", "=", "tf", ".", "flags", ".", "FLAGS", "\n", "\n", "def", "create_experiment", "(", "output_dir", ")", ":", "\n", "  ", "\"\"\"\n  Creates a new Experiment instance.\n\n  Args:\n    output_dir: Output directory for model checkpoints and summaries.\n  \"\"\"", "\n", "\n", "config", "=", "run_config", ".", "RunConfig", "(", "\n", "tf_random_seed", "=", "FLAGS", ".", "tf_random_seed", ",", "\n", "save_checkpoints_secs", "=", "FLAGS", ".", "save_checkpoints_secs", ",", "\n", "save_checkpoints_steps", "=", "FLAGS", ".", "save_checkpoints_steps", ",", "\n", "keep_checkpoint_max", "=", "FLAGS", ".", "keep_checkpoint_max", ",", "\n", "keep_checkpoint_every_n_hours", "=", "FLAGS", ".", "keep_checkpoint_every_n_hours", ",", "\n", "gpu_memory_fraction", "=", "FLAGS", ".", "gpu_memory_fraction", ")", "\n", "config", ".", "tf_config", ".", "gpu_options", ".", "allow_growth", "=", "FLAGS", ".", "gpu_allow_growth", "\n", "config", ".", "tf_config", ".", "log_device_placement", "=", "FLAGS", ".", "log_device_placement", "\n", "\n", "train_options", "=", "training_utils", ".", "TrainOptions", "(", "\n", "model_class", "=", "FLAGS", ".", "model", ",", "\n", "model_params", "=", "FLAGS", ".", "model_params", ")", "\n", "# On the main worker, save training options", "\n", "if", "config", ".", "is_chief", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.train.main": [[145, 152], ["tensor2struct.commands.train.setup", "train.Trainer", "Trainer.train"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.setup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.train"], ["train_options", ".", "dump", "(", "output_dir", ")", "\n", "\n", "", "bucket_boundaries", "=", "None", "\n", "if", "FLAGS", ".", "buckets", ":", "\n", "    ", "bucket_boundaries", "=", "list", "(", "map", "(", "int", ",", "FLAGS", ".", "buckets", ".", "split", "(", "\",\"", ")", ")", ")", "\n", "\n", "# Training data input pipeline", "\n", "", "train_input_pipeline", "=", "input_pipeline", ".", "make_input_pipeline_from_def", "(", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.run.main": [[48, 82], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "json.loads", "os.environ.get", "_jsonnet.evaluate_file", "json.dumps", "print", "os.path.join", "exp_config[].split", "wandb.init", "run.TrainConfig", "experiments.sql2nl.train.main", "os.getcwd"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.parse_args", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.main"], ["# dist train need to start a wandb session in each process, not a global one", "\n", "if", "args", ".", "mode", "in", "[", "\"train\"", ",", "\"eval_tagging\"", ",", "\"eval_ctc\"", ",", "\"eval_ssnt\"", ",", "\"eval_swan\"", "]", ":", "\n", "        ", "wandb", ".", "init", "(", "project", "=", "project", ",", "group", "=", "expname", ",", "job_type", "=", "args", ".", "mode", ")", "\n", "\n", "", "if", "args", ".", "mode", "==", "\"train\"", ":", "\n", "        ", "train_config", "=", "TrainConfig", "(", "model_config_file", ",", "model_config_args", ",", "logdir", ")", "\n", "train", ".", "main", "(", "train_config", ")", "\n", "", "elif", "args", ".", "mode", "in", "[", "\"eval_tagging\"", "]", ":", "\n", "        ", "run", ".", "eval_and_report", "(", "args", ",", "exp_config", ",", "model_config_args", ",", "logdir", ",", "infer_mod", "=", "infer_tagging", ")", "\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.unsup_enc_dec.Buffer.add_item": [[38, 42], ["unsup_enc_dec.Buffer.prods_set.add"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add"], ["def", "add_item", "(", "self", ",", "prods", ",", "prob", ")", ":", "\n", "        ", "if", "prods", "not", "in", "self", ".", "prods2probs", ":", "\n", "            ", "self", ".", "prods_set", ".", "add", "(", "prods", ")", "\n", "", "self", ".", "prods2probs", "[", "prods", "]", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.unsup_enc_dec.Buffer.get_items": [[43, 58], ["len", "list", "list", "sorted", "enumerate", "ret_list.append", "unsup_enc_dec.Buffer.prods_set.remove"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.remove"], ["", "def", "get_items", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "prods_set", ")", "<", "self", ".", "max_size", ":", "\n", "            ", "return", "list", "(", "self", ".", "prods_set", ")", "\n", "", "else", ":", "\n", "            ", "all_prods", "=", "list", "(", "self", ".", "prods_set", ")", "\n", "sorted_prods", "=", "sorted", "(", "all_prods", ",", "key", "=", "lambda", "x", ":", "-", "self", ".", "prods2probs", "[", "x", "]", ")", "\n", "\n", "ret_list", "=", "[", "]", "\n", "for", "i", ",", "prods", "in", "enumerate", "(", "sorted_prods", ")", ":", "\n", "                ", "if", "i", "<", "self", ".", "max_size", ":", "\n", "                    ", "ret_list", ".", "append", "(", "prods", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "prods_set", ".", "remove", "(", "prods", ")", "\n", "del", "self", ".", "prods2probs", "[", "prods", "]", "\n", "", "", "return", "ret_list", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.unsup_enc_dec.OnlineSearchScheduler.__init__": [[68, 81], ["collections.Counter"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "sample_size", "=", "16", ",", "use_cache", "=", "False", ",", "use_gumbel", "=", "False", ",", "top_p", "=", "0.99", ",", "ratio", "=", "1.2", ",", "\n", ")", ":", "\n", "        ", "self", ".", "sample_size", "=", "sample_size", "\n", "self", ".", "use_gumbel", "=", "use_gumbel", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "top_p", "=", "top_p", "\n", "\n", "self", ".", "counter", "=", "collections", ".", "Counter", "(", ")", "\n", "\n", "self", ".", "use_cache", "=", "use_cache", "\n", "if", "use_cache", ":", "\n", "            ", "self", ".", "buffer", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.unsup_enc_dec.OnlineSearchScheduler.step": [[82, 94], ["None"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "question", ")", ":", "\n", "        ", "infer_config", "=", "{", "}", "\n", "infer_config", "[", "\"need_new_sample\"", "]", "=", "True", "\n", "self", ".", "counter", "[", "question", "]", "+=", "1", "\n", "cur_step", "=", "self", ".", "counter", "[", "question", "]", "\n", "infer_config", "[", "\"num_epoch\"", "]", "=", "cur_step", "\n", "\n", "infer_config", "[", "\"use_gumbel\"", "]", "=", "self", ".", "use_gumbel", "\n", "infer_config", "[", "\"ratio\"", "]", "=", "self", ".", "ratio", "\n", "infer_config", "[", "\"top_p\"", "]", "=", "self", ".", "top_p", "\n", "infer_config", "[", "\"sample_size\"", "]", "=", "self", ".", "sample_size", "\n", "return", "infer_config", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.unsup_enc_dec.OnlineSearchScheduler.update": [[95, 99], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "question", ",", "prods_list", ")", ":", "\n", "        ", "if", "self", ".", "use_cache", ":", "\n", "# only keep a fixed-size list of programs for efficiency", "\n", "            ", "self", ".", "buffer", "[", "question", "]", "=", "prods_list", "[", ":", "self", ".", "sample_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.unsup_enc_dec.OnlineSearchScheduler.get_cached_samples": [[100, 105], ["None"], "methods", ["None"], ["", "", "def", "get_cached_samples", "(", "self", ",", "question", ")", ":", "\n", "        ", "if", "self", ".", "use_cache", "and", "question", "in", "self", ".", "buffer", ":", "\n", "            ", "return", "self", ".", "buffer", "[", "question", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.unsup_enc_dec.OnlineSearchScheduler.need_warmup": [[106, 108], ["None"], "methods", ["None"], ["", "", "def", "need_warmup", "(", "self", ",", "question", ")", ":", "\n", "        ", "return", "self", ".", "use_cache", "and", "question", "not", "in", "self", ".", "buffer", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.unsup_enc_dec.UnSupEncDecModel.__init__": [[116, 121], ["tensor2struct.models.enc_dec.SemiBatchedEncDecModel.__init__", "tensor2struct.utils.registry.construct", "collections.Counter"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct"], ["def", "__init__", "(", "self", ",", "preproc", ",", "device", ",", "encoder", ",", "decoder", ",", "search_scheduler", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "preproc", ",", "device", ",", "encoder", ",", "decoder", ")", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "search_scheduler", "=", "registry", ".", "construct", "(", "\"search_scheduler\"", ",", "search_scheduler", ")", "\n", "self", ".", "debug_stat", "=", "collections", ".", "Counter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.unsup_enc_dec.UnSupEncDecModel._summarize": [[122, 147], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_summarize", "(", "debug_stat", ")", ":", "\n", "        ", "ret_dic", "=", "{", "}", "\n", "\n", "if", "debug_stat", "[", "\"num_all_exs\"", "]", ">", "0", ":", "\n", "            ", "ret_dic", "[", "\"coverage_by_search\"", "]", "=", "(", "\n", "debug_stat", "[", "\"num_of_covered_exs_by_search\"", "]", "/", "debug_stat", "[", "\"num_all_exs\"", "]", "\n", ")", "\n", "ret_dic", "[", "\"coverage_after_filter\"", "]", "=", "(", "\n", "debug_stat", "[", "\"num_of_covered_exs_after_filter\"", "]", "\n", "/", "debug_stat", "[", "\"num_all_exs\"", "]", "\n", ")", "\n", "\n", "", "if", "debug_stat", "[", "\"num_of_pseudo_labels\"", "]", ">", "0", ":", "\n", "            ", "ret_dic", "[", "\"percents_of_executable_programs\"", "]", "=", "(", "\n", "debug_stat", "[", "\"num_of_pseudo_labels_after_filter\"", "]", "\n", "/", "debug_stat", "[", "\"num_of_pseudo_labels\"", "]", "\n", ")", "\n", "\n", "", "ret_dic", "[", "\"avg_gold_ratio\"", "]", "=", "debug_stat", "[", "\"avg_gold_ratio\"", "]", "\n", "ret_dic", "[", "\"avg_ratio\"", "]", "=", "debug_stat", "[", "\"avg_ratio\"", "]", "\n", "ret_dic", "[", "\"avg_prob_mass\"", "]", "=", "debug_stat", "[", "\"avg_prob_mass\"", "]", "\n", "ret_dic", "[", "\"avg_prob_mass_filtered\"", "]", "=", "debug_stat", "[", "\"avg_prob_mass_filtered\"", "]", "\n", "\n", "return", "ret_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.unsup_enc_dec.UnSupEncDecModel.forward": [[148, 167], ["unsup_enc_dec.UnSupEncDecModel.compute_loss", "unsup_enc_dec.UnSupEncDecModel.begin_inference", "len", "unsup_enc_dec.UnSupEncDecModel._summarize", "logger.info", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_loss", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.begin_inference", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.unsup_enc_dec.UnSupEncDecModel._summarize"], ["", "def", "forward", "(", "self", ",", "*", "input_items", ",", "compute_loss", "=", "True", ",", "infer", "=", "False", ")", ":", "\n", "        ", "\"The only entry point of encdec\"", "\n", "ret_dic", "=", "{", "}", "\n", "if", "compute_loss", ":", "\n", "            ", "assert", "len", "(", "input_items", ")", "==", "1", "# it's a batched version", "\n", "loss", "=", "self", ".", "compute_loss", "(", "input_items", "[", "0", "]", ")", "\n", "ret_dic", "[", "\"loss\"", "]", "=", "loss", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "summary", "=", "self", ".", "_summarize", "(", "self", ".", "debug_stat", ")", "\n", "logger", ".", "info", "(", "f\"Global stat: {summary}\"", ")", "\n", "ret_dic", "[", "\"summary\"", "]", "=", "summary", "\n", "\n", "", "", "if", "infer", ":", "\n", "            ", "len", "(", "input_items", ")", "==", "2", "# unbatched version of inference", "\n", "orig_item", ",", "preproc_item", "=", "input_items", "\n", "infer_dic", "=", "self", ".", "begin_inference", "(", "orig_item", ",", "preproc_item", ")", "\n", "ret_dic", "=", "{", "**", "ret_dic", ",", "**", "infer_dic", "}", "\n", "", "return", "ret_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.unsup_enc_dec.UnSupEncDecModel.get_executable_seqs": [[168, 322], ["unsup_enc_dec.UnSupEncDecModel.search_scheduler.step", "tensor2struct.datasets.overnight.execute", "enumerate", "unsup_enc_dec.UnSupEncDecModel.search_scheduler.get_cached_samples", "logger.info", "len", "len", "len", "len", "sum", "sum", "sum", "logger.info", "logger.info", "unsup_enc_dec.UnSupEncDecModel.search_scheduler.need_warmup", "tensor2struct.utils.registry.lookup", "tensor2struct.utils.registry.lookup.", "tensor2struct.utils.registry.lookup", "tensor2struct.utils.registry.lookup.", "beam.inference_state.finalize", "lfs.append", "prods_list.append", "log_probs.append", "zip", "len", "logger.info", "isinstance", "len", "zip", "unsup_enc_dec.UnSupEncDecModel.search_scheduler.update", "len", "len", "tuple", "len", "sum", "s1_prods.append", "s1_lfs.append", "s1_log_probs.append", "s2_log_probs.append", "unsup_enc_dec.UnSupEncDecModel.decoder", "more_s1_prods.append", "more_s1_log_probs.append", "len", "math.exp", "math.exp", "tuple", "unsup_enc_dec.UnSupEncDecModel.encoder", "sorted", "len", "float", "float", "len", "len", "len", "len", "zip", "tuple"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.execute", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.unsup_enc_dec.OnlineSearchScheduler.get_cached_samples", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.unsup_enc_dec.OnlineSearchScheduler.need_warmup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.infer_tree_traversal.InferenceTreeTraversal.finalize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "get_executable_seqs", "(", "self", ",", "example", ",", "preproc_example", ")", ":", "\n", "        ", "\"\"\"\n        Sampling programs according beam search, etc. \n        Then filter programs based on executability and ratio\n        \"\"\"", "\n", "# assert not self.training", "\n", "\n", "enc_item", ",", "dec_item", "=", "preproc_example", "\n", "gold_prods", "=", "dec_item", "[", "\"productions\"", "]", "# for debugging purpose", "\n", "question_tokens", "=", "enc_item", "[", "\"question\"", "]", "\n", "question", "=", "\" \"", ".", "join", "(", "question_tokens", ")", "# used as the identity of the example", "\n", "\n", "infer_config", "=", "self", ".", "search_scheduler", ".", "step", "(", "question", ")", "\n", "assert", "infer_config", "[", "\"need_new_sample\"", "]", "\n", "# if not infer_config[\"need_new_sample\"]:", "\n", "#     return list(self.search_scheduler.get_cached_samples(question))", "\n", "\n", "if", "not", "infer_config", "[", "\"use_gumbel\"", "]", "or", "self", ".", "search_scheduler", ".", "need_warmup", "(", "\n", "question", "\n", ")", ":", "\n", "            ", "infer_method", "=", "registry", ".", "lookup", "(", "\"infer_method\"", ",", "\"beam_search_sampling\"", ")", "\n", "beams", "=", "infer_method", "(", "\n", "self", ",", "\n", "example", ",", "\n", "preproc_example", ",", "\n", "sample_size", "=", "infer_config", "[", "\"sample_size\"", "]", ",", "\n", "top_p", "=", "infer_config", "[", "\"top_p\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "infer_method", "=", "registry", ".", "lookup", "(", "\n", "\"infer_method\"", ",", "\"stochastic_beam_search_sampling\"", "\n", ")", "\n", "beams", "=", "infer_method", "(", "\n", "self", ",", "\n", "example", ",", "\n", "preproc_example", ",", "\n", "sample_size", "=", "infer_config", "[", "\"sample_size\"", "]", ",", "\n", "max_steps", "=", "len", "(", "question_tokens", ")", "*", "3", ",", "# ratio maximally 3", "\n", "early_stop", "=", "True", ",", "\n", ")", "\n", "\n", "# collect logical form, production rules and log probs", "\n", "", "prods_list", "=", "[", "]", "\n", "lfs", "=", "[", "]", "\n", "log_probs", "=", "[", "]", "\n", "for", "beam", "in", "beams", ":", "\n", "            ", "prods", ",", "lf", "=", "beam", ".", "inference_state", ".", "finalize", "(", ")", "\n", "lfs", ".", "append", "(", "lf", ")", "\n", "prods_list", ".", "append", "(", "prods", ")", "\n", "log_probs", ".", "append", "(", "sum", "(", "beam", ".", "score_history", ")", ")", "\n", "\n", "# filter examples by executability and ratio", "\n", "", "s1_prods", "=", "[", "]", "\n", "s1_lfs", "=", "[", "]", "\n", "s1_log_probs", "=", "[", "]", "\n", "s2_log_probs", "=", "[", "]", "\n", "denotations", "=", "overnight", ".", "execute", "(", "lfs", ",", "example", ".", "domain", ")", "\n", "for", "i", ",", "(", "prods", ",", "d", ")", "in", "enumerate", "(", "zip", "(", "prods_list", ",", "denotations", ")", ")", ":", "\n", "            ", "if", "(", "\n", "d", "is", "not", "None", "\n", "and", "(", "len", "(", "prods", ")", "/", "len", "(", "question_tokens", ")", ")", ">=", "infer_config", "[", "\"ratio\"", "]", "\n", ")", ":", "\n", "                ", "s1_prods", ".", "append", "(", "tuple", "(", "prods", ")", ")", "\n", "s1_lfs", ".", "append", "(", "lfs", "[", "i", "]", ")", "\n", "s1_log_probs", ".", "append", "(", "log_probs", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "s2_log_probs", ".", "append", "(", "log_probs", "[", "i", "]", ")", "\n", "\n", "# retrieve cached programs", "\n", "", "", "cached_seqs", "=", "self", ".", "search_scheduler", ".", "get_cached_samples", "(", "question", ")", "\n", "if", "len", "(", "cached_seqs", ")", ">", "0", ":", "\n", "            ", "logger", ".", "info", "(", "f\"Obtain {len(cached_seqs)} seqs from cache\"", ")", "\n", "\n", "", "more_s1_log_probs", "=", "[", "]", "\n", "more_s1_prods", "=", "[", "]", "\n", "for", "cached_seq", "in", "cached_seqs", ":", "\n", "            ", "assert", "isinstance", "(", "cached_seq", ",", "tuple", ")", "\n", "if", "cached_seq", "not", "in", "s1_prods", ":", "\n", "                ", "enc_state", "=", "self", ".", "encoder", "(", "[", "enc_item", "]", ")", "[", "0", "]", "# batch size 1", "\n", "_dec_item", "=", "{", "\"domain\"", ":", "dec_item", "[", "\"domain\"", "]", ",", "\"productions\"", ":", "cached_seq", "}", "\n", "ret_dict", "=", "self", ".", "decoder", "(", "_dec_item", ",", "enc_state", ")", "\n", "\n", "more_s1_prods", ".", "append", "(", "cached_seq", ")", "\n", "more_s1_log_probs", ".", "append", "(", "-", "ret_dict", "[", "\"loss\"", "]", ")", "\n", "\n", "# merge and sort", "\n", "", "", "s1_prods", "+=", "more_s1_prods", "\n", "s1_log_probs", "+=", "more_s1_log_probs", "\n", "\n", "if", "len", "(", "s1_prods", ")", ">", "0", ":", "\n", "            ", "s1_prods", ",", "s1_log_probs", "=", "zip", "(", "\n", "*", "sorted", "(", "zip", "(", "s1_prods", ",", "s1_log_probs", ")", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", ")", "\n", ")", "\n", "\n", "# update the cache", "\n", "self", ".", "search_scheduler", ".", "update", "(", "question", ",", "s1_prods", ")", "\n", "\n", "", "logger", ".", "info", "(", "\n", "f\"Epoch {infer_config['num_epoch']}, collected {len(s1_prods)} plausible programs\"", "\n", ")", "\n", "\n", "# debug information", "\n", "self", ".", "debug_stat", "[", "\"num_all_exs\"", "]", "+=", "1", "\n", "self", ".", "debug_stat", "[", "\"num_of_pseudo_labels\"", "]", "+=", "len", "(", "prods_list", ")", "\n", "self", ".", "debug_stat", "[", "\"num_of_pseudo_labels_after_filter\"", "]", "+=", "len", "(", "s1_prods", ")", "\n", "self", ".", "debug_stat", "[", "\"num_of_tokens_for_gold_labels\"", "]", "+=", "len", "(", "question_tokens", ")", "\n", "self", ".", "debug_stat", "[", "\"num_of_actions_for_gold_labels\"", "]", "+=", "len", "(", "gold_prods", ")", "\n", "self", ".", "debug_stat", "[", "\"num_of_tokens_for_filtered_pseudo_labels\"", "]", "+=", "len", "(", "\n", "question_tokens", "\n", ")", "*", "len", "(", "s1_prods", ")", "\n", "self", ".", "debug_stat", "[", "\"num_of_actions_for_filtered_pseudo_labels\"", "]", "+=", "sum", "(", "\n", "len", "(", "prods", ")", "for", "prods", "in", "s1_prods", "\n", ")", "\n", "self", ".", "debug_stat", "[", "\"acc_prob_mass_for_pseudo_labels\"", "]", "+=", "sum", "(", "\n", "math", ".", "exp", "(", "float", "(", "log_prob", ")", ")", "for", "log_prob", "in", "log_probs", "\n", ")", "\n", "self", ".", "debug_stat", "[", "\"acc_prob_mass_for_filtered_pseudo_labels\"", "]", "+=", "sum", "(", "\n", "math", ".", "exp", "(", "float", "(", "log_prob", ")", ")", "for", "log_prob", "in", "s1_log_probs", "\n", ")", "\n", "\n", "if", "gold_prods", "in", "prods_list", ":", "\n", "            ", "self", ".", "debug_stat", "[", "\"num_of_covered_exs_by_search\"", "]", "+=", "1", "\n", "", "logger", ".", "info", "(", "\n", "f\"Catched gold programs after beam search: {gold_prods in prods_list}\"", "\n", ")", "\n", "\n", "if", "tuple", "(", "gold_prods", ")", "in", "s1_prods", ":", "\n", "            ", "self", ".", "debug_stat", "[", "\"num_of_covered_exs_after_filter\"", "]", "+=", "1", "\n", "", "logger", ".", "info", "(", "\n", "f\"Catched gold programs after filter(exe, ratio): {tuple(gold_prods) in s1_prods}\"", "\n", ")", "\n", "\n", "self", ".", "debug_stat", "[", "\"avg_gold_ratio\"", "]", "=", "(", "\n", "self", ".", "debug_stat", "[", "\"num_of_actions_for_gold_labels\"", "]", "\n", "/", "self", ".", "debug_stat", "[", "\"num_of_tokens_for_gold_labels\"", "]", "\n", ")", "\n", "self", ".", "debug_stat", "[", "\"avg_prob_mass\"", "]", "=", "(", "\n", "self", ".", "debug_stat", "[", "\"acc_prob_mass_for_pseudo_labels\"", "]", "\n", "/", "self", ".", "debug_stat", "[", "\"num_all_exs\"", "]", "\n", ")", "\n", "\n", "if", "len", "(", "s1_prods", ")", ">", "0", ":", "\n", "            ", "self", ".", "debug_stat", "[", "\"avg_ratio\"", "]", "=", "(", "\n", "self", ".", "debug_stat", "[", "\"num_of_actions_for_filtered_pseudo_labels\"", "]", "\n", "/", "self", ".", "debug_stat", "[", "\"num_of_tokens_for_filtered_pseudo_labels\"", "]", "\n", ")", "\n", "\n", "self", ".", "debug_stat", "[", "\"avg_prob_mass_filtered\"", "]", "=", "(", "\n", "self", ".", "debug_stat", "[", "\"acc_prob_mass_for_filtered_pseudo_labels\"", "]", "\n", "/", "self", ".", "debug_stat", "[", "\"num_all_exs\"", "]", "\n", ")", "\n", "\n", "# return", "\n", "", "return", "s1_prods", ",", "s1_log_probs", ",", "s2_log_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.unsup_enc_dec.UnSupEncDecModel._compute_loss_enc_batched": [[323, 328], ["unsup_enc_dec.UnSupEncDecModel.compute_unsup_loss_by_beam_search", "super()._compute_loss_enc_batched"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.semi_enc_dec.SemiSupEncDecModel.compute_unsup_loss_by_beam_search", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.semi_enc_dec.SemiSupEncDecModel._compute_loss_enc_batched"], ["", "def", "_compute_loss_enc_batched", "(", "self", ",", "batch", ")", ":", "\n", "        ", "if", "not", "self", ".", "training", ":", "\n", "# eval on train set", "\n", "            ", "return", "super", "(", ")", ".", "_compute_loss_enc_batched", "(", "batch", ")", "\n", "", "return", "self", ".", "compute_unsup_loss_by_beam_search", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.unsup_enc_dec.UnSupEncDecModel.compute_unsup_loss_by_beam_search": [[329, 358], ["unsup_enc_dec.UnSupEncDecModel.encoder", "zip", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "unsup_enc_dec.Example", "losses.append", "len", "torch.Tensor().requires_grad_", "torch.Tensor().requires_grad_", "torch.Tensor().requires_grad_", "torch.Tensor().requires_grad_", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "unsup_enc_dec.UnSupEncDecModel.eval", "unsup_enc_dec.UnSupEncDecModel.get_executable_seqs", "unsup_enc_dec.UnSupEncDecModel.train", "unsup_enc_dec.UnSupEncDecModel.decoder", "_loss.append", "len", "min", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.unsup_enc_dec.UnSupEncDecModel.get_executable_seqs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.train", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "compute_unsup_loss_by_beam_search", "(", "self", ",", "batch", ",", "use_top1", "=", "False", ")", ":", "\n", "        ", "losses", "=", "[", "]", "\n", "enc_states", "=", "self", ".", "encoder", "(", "[", "enc_input", "for", "enc_input", ",", "dec_output", "in", "batch", "]", ")", "\n", "\n", "for", "enc_state", ",", "(", "enc_input", ",", "_dec_output", ")", "in", "zip", "(", "enc_states", ",", "batch", ")", ":", "\n", "            ", "example", "=", "Example", "(", "_dec_output", "[", "\"domain\"", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "eval", "(", ")", "\n", "# seqs = self.get_executable_seqs(example, (enc_input, None))", "\n", "seqs", ",", "_", "=", "self", ".", "get_executable_seqs", "(", "example", ",", "(", "enc_input", ",", "_dec_output", ")", ")", "\n", "# seqs = [_dec_output[\"productions\"]]", "\n", "self", ".", "train", "(", ")", "\n", "\n", "", "_loss", "=", "[", "]", "\n", "for", "seq", "in", "seqs", ":", "\n", "                ", "dec_output", "=", "{", "\"domain\"", ":", "_dec_output", "[", "\"domain\"", "]", ",", "\"productions\"", ":", "seq", "}", "\n", "ret_dict", "=", "self", ".", "decoder", "(", "dec_output", ",", "enc_state", ")", "\n", "_loss", ".", "append", "(", "ret_dict", "[", "\"loss\"", "]", ")", "\n", "", "if", "len", "(", "_loss", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "use_top1", ":", "\n", "                ", "loss", "=", "min", "(", "_loss", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "-", "1", "*", "torch", ".", "logsumexp", "(", "-", "1", "*", "torch", ".", "stack", "(", "_loss", ",", "0", ")", ",", "dim", "=", "0", ")", "\n", "", "losses", ".", "append", "(", "loss", ")", "\n", "", "if", "len", "(", "losses", ")", "==", "0", ":", "\n", "            ", "return", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ".", "requires_grad_", "(", ")", "\n", "", "return", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "losses", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.semi_enc_dec.SemiSupEncDecModel.__init__": [[29, 39], ["experiments.semi_sup.unsup_enc_dec.UnSupEncDecModel.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "\n", "self", ",", "preproc", ",", "device", ",", "encoder", ",", "decoder", ",", "search_scheduler", ",", "unsup_config", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "preproc", ",", "device", ",", "encoder", ",", "decoder", ",", "search_scheduler", ")", "\n", "\n", "# unsupervised loss config", "\n", "self", ".", "enable_unsup_loss", "=", "unsup_config", "[", "\"enable_unsup_loss\"", "]", "\n", "self", ".", "alpha", "=", "unsup_config", "[", "\"alpha\"", "]", "\n", "self", ".", "unsup_loss_type", "=", "unsup_config", "[", "\"unsup_loss_type\"", "]", "\n", "self", ".", "eps", "=", "1e-6", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.semi_enc_dec.SemiSupEncDecModel.forward": [[40, 60], ["semi_enc_dec.SemiSupEncDecModel._compute_loss_enc_batched", "semi_enc_dec.SemiSupEncDecModel.begin_inference", "semi_enc_dec.SemiSupEncDecModel._summarize", "logger.info", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.semi_enc_dec.SemiSupEncDecModel._compute_loss_enc_batched", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.begin_inference", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.unsup_enc_dec.UnSupEncDecModel._summarize"], ["", "def", "forward", "(", "self", ",", "*", "input_items", ",", "compute_loss", "=", "True", ",", "infer", "=", "False", ")", ":", "\n", "        ", "\"The only entry point of encdec\"", "\n", "ret_dic", "=", "{", "}", "\n", "if", "compute_loss", ":", "\n", "            ", "batch", "=", "input_items", "[", "0", "]", "\n", "unlabel_batch", "=", "None", "if", "len", "(", "input_items", ")", "==", "1", "else", "input_items", "[", "1", "]", "\n", "loss", "=", "self", ".", "_compute_loss_enc_batched", "(", "batch", ",", "unlabel_batch", ")", "\n", "ret_dic", "[", "\"loss\"", "]", "=", "loss", "\n", "\n", "if", "unlabel_batch", ":", "\n", "                ", "summary", "=", "self", ".", "_summarize", "(", "self", ".", "debug_stat", ")", "\n", "logger", ".", "info", "(", "f\"Global stat: {summary}\"", ")", "\n", "ret_dic", "[", "\"summary\"", "]", "=", "summary", "\n", "\n", "", "", "if", "infer", ":", "\n", "            ", "len", "(", "input_items", ")", "==", "2", "# unbatched version of inference", "\n", "orig_item", ",", "preproc_item", "=", "input_items", "\n", "infer_dic", "=", "self", ".", "begin_inference", "(", "orig_item", ",", "preproc_item", ")", "\n", "ret_dic", "=", "{", "**", "ret_dic", ",", "**", "infer_dic", "}", "\n", "", "return", "ret_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.semi_enc_dec.SemiSupEncDecModel._compute_loss_enc_batched": [[61, 87], ["semi_enc_dec.SemiSupEncDecModel.compute_unsup_loss_by_beam_search", "super()._compute_loss_enc_batched"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.semi_enc_dec.SemiSupEncDecModel.compute_unsup_loss_by_beam_search", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.semi_enc_dec.SemiSupEncDecModel._compute_loss_enc_batched"], ["", "def", "_compute_loss_enc_batched", "(", "self", ",", "batch", ",", "unlabel_batch", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Compute supervised loss for batch and unsupervised loss for unlabel batch\n\n        \"\"\"", "\n", "if", "batch", ":", "\n", "            ", "sup_loss", "=", "super", "(", "\n", "unsup_enc_dec", ".", "UnSupEncDecModel", ",", "self", "\n", ")", ".", "_compute_loss_enc_batched", "(", "batch", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "enable_unsup_loss", "and", "unlabel_batch", "is", "not", "None", "\n", "sup_loss", "=", "None", "\n", "\n", "# eval on train set", "\n", "", "if", "not", "self", ".", "training", "or", "not", "self", ".", "enable_unsup_loss", "or", "unlabel_batch", "is", "None", ":", "\n", "            ", "return", "sup_loss", "\n", "\n", "", "assert", "self", ".", "unsup_loss_type", "!=", "\"gradsim\"", "\n", "unsup_loss", "=", "self", ".", "compute_unsup_loss_by_beam_search", "(", "\n", "unlabel_batch", ",", "self", ".", "unsup_loss_type", "\n", ")", "\n", "\n", "if", "sup_loss", ":", "\n", "            ", "return", "self", ".", "alpha", "*", "unsup_loss", "+", "sup_loss", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "alpha", "*", "unsup_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.semi_enc_dec.SemiSupEncDecModel.compute_unsup_loss_by_beam_search": [[88, 185], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "experiments.semi_sup.unsup_enc_dec.Example", "semi_enc_dec.SemiSupEncDecModel.get_executable_seqs", "len", "torch.Tensor().to().requires_grad_", "torch.Tensor().to().requires_grad_", "torch.Tensor().to().requires_grad_", "torch.Tensor().to().requires_grad_", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "len", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "len", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.detach", "torch.stack.detach", "torch.logsumexp.detach", "torch.logsumexp.detach", "losses.append", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.log", "torch.log", "torch.log", "torch.log", "losses.append", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "losses.append", "len", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.log", "torch.log", "torch.log", "torch.log", "logger.warn", "losses.append", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "len", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "losses.append", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "losses.append", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "losses.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "entmax.sparsemax", "losses.append", "torch.stack.detach", "torch.stack.detach", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "entmax.sparsemax", "losses.append", "torch.stack.detach", "torch.stack.detach"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.unsup_enc_dec.UnSupEncDecModel.get_executable_seqs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "", "def", "compute_unsup_loss_by_beam_search", "(", "self", ",", "batch", ",", "unsup_loss_type", "=", "\"topk\"", ")", ":", "\n", "        ", "\"\"\"\n        Compute unsup loss using beam search\n        s1, s2: beam search retrieved programs\n        s1, s3: plausible/executable programs\n        \"\"\"", "\n", "losses", "=", "[", "]", "\n", "\n", "for", "enc_item", ",", "dec_item", "in", "batch", ":", "\n", "            ", "example", "=", "unsup_enc_dec", ".", "Example", "(", "dec_item", "[", "\"domain\"", "]", ")", "\n", "\n", "# obtain seqs in eval mode", "\n", "# with torch.no_grad():", "\n", "#     self.eval()", "\n", "#     sampled_seqs, sampled_seq_log_probs = self.get_executable_seqs(", "\n", "#         example, (enc_input, _dec_output)", "\n", "#     )", "\n", "#     self.train()", "\n", "\n", "# obtain seqs in train mode, more efficient", "\n", "s1_seqs", ",", "s1_log_probs", ",", "s2_log_probs", "=", "self", ".", "get_executable_seqs", "(", "\n", "example", ",", "(", "enc_item", ",", "dec_item", ")", "\n", ")", "\n", "assert", "len", "(", "s1_seqs", ")", "==", "len", "(", "s1_log_probs", ")", "\n", "\n", "if", "len", "(", "s1_log_probs", ")", ">", "0", "and", "len", "(", "s2_log_probs", ")", ">", "0", ":", "\n", "                ", "s1_log_prob", "=", "torch", ".", "logsumexp", "(", "torch", ".", "stack", "(", "s1_log_probs", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "s2_log_prob", "=", "torch", ".", "logsumexp", "(", "torch", ".", "stack", "(", "s2_log_probs", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "s1s2_log_prob", "=", "torch", ".", "logsumexp", "(", "\n", "torch", ".", "stack", "(", "[", "s1_log_prob", ",", "s2_log_prob", "]", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", "\n", ")", "\n", "s3s4_log_prob", "=", "torch", ".", "log", "(", "1", "-", "torch", ".", "exp", "(", "s1s2_log_prob", ")", ")", "\n", "\n", "# compute different q", "\n", "l0", "=", "-", "s1_log_probs", "[", "0", "]", "\n", "l1", "=", "-", "s1_log_prob", "\n", "\n", "s1_34_logits", "=", "[", "s1_log_prob", ",", "s3s4_log_prob", "]", "\n", "s1_34_log_p_v", "=", "torch", ".", "stack", "(", "s1_34_logits", ",", "dim", "=", "0", ")", "\n", "q_l2", "=", "torch", ".", "softmax", "(", "s1_34_log_p_v", ".", "detach", "(", ")", ",", "dim", "=", "0", ")", "\n", "l2", "=", "(", "-", "q_l2", "*", "s1_34_log_p_v", ")", ".", "sum", "(", ")", "\n", "\n", "q_l3", "=", "torch", ".", "exp", "(", "s1s2_log_prob", ".", "detach", "(", ")", ")", "\n", "l3", "=", "-", "q_l3", "*", "s1_log_prob", "-", "(", "1", "-", "q_l3", ")", "*", "s3s4_log_prob", "\n", "\n", "if", "self", ".", "unsup_loss_type", "==", "\"self-train\"", ":", "\n", "                    ", "losses", ".", "append", "(", "l0", ")", "\n", "", "elif", "self", ".", "unsup_loss_type", "==", "\"top-k\"", ":", "\n", "                    ", "losses", ".", "append", "(", "l1", ")", "\n", "", "elif", "self", ".", "unsup_loss_type", "==", "\"repulsion\"", ":", "\n", "                    ", "losses", ".", "append", "(", "l2", ")", "\n", "", "elif", "self", ".", "unsup_loss_type", "==", "\"gentle\"", ":", "\n", "                    ", "losses", ".", "append", "(", "l3", ")", "\n", "", "elif", "self", ".", "unsup_loss_type", "==", "\"sparse\"", ":", "\n", "                    ", "l5_logits", "=", "torch", ".", "stack", "(", "s1_log_probs", ",", "dim", "=", "0", ")", "\n", "q_l5", "=", "sparsemax", "(", "l5_logits", ".", "detach", "(", ")", ",", "dim", "=", "0", ")", "\n", "l5", "=", "(", "-", "q_l5", "*", "l5_logits", ")", ".", "sum", "(", ")", "\n", "losses", ".", "append", "(", "l5", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "\n", "", "", "elif", "len", "(", "s1_log_probs", ")", "==", "0", "and", "len", "(", "s2_log_probs", ")", ">", "0", ":", "\n", "                ", "s2_log_prob", "=", "torch", ".", "logsumexp", "(", "torch", ".", "stack", "(", "s2_log_probs", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "s3s4_log_prob", "=", "torch", ".", "log", "(", "1", "-", "torch", ".", "exp", "(", "s2_log_prob", ")", ")", "\n", "\n", "l2", "=", "-", "s3s4_log_prob", "\n", "losses", ".", "append", "(", "l2", ")", "# which means this is the only valid loss", "\n", "", "elif", "len", "(", "s1_log_probs", ")", ">", "0", "and", "len", "(", "s2_log_probs", ")", "==", "0", ":", "\n", "                ", "s1_log_prob", "=", "torch", ".", "logsumexp", "(", "torch", ".", "stack", "(", "s1_log_probs", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "s3s4_log_prob", "=", "torch", ".", "log", "(", "1", "-", "torch", ".", "exp", "(", "s1_log_prob", ")", ")", "\n", "\n", "l0", "=", "-", "s1_log_probs", "[", "0", "]", "\n", "l1", "=", "-", "s1_log_prob", "\n", "\n", "if", "self", ".", "unsup_loss_type", "==", "\"self-train\"", ":", "\n", "                    ", "losses", ".", "append", "(", "l0", ")", "\n", "", "elif", "self", ".", "unsup_loss_type", "==", "\"top-k\"", ":", "\n", "                    ", "losses", ".", "append", "(", "l1", ")", "\n", "", "elif", "self", ".", "unsup_loss_type", "==", "\"replusion\"", ":", "\n", "# l2, l3 loss would result in zero gradient", "\n", "                    ", "continue", "\n", "", "elif", "self", ".", "unsup_loss_type", "==", "\"gentle\"", ":", "\n", "                    ", "continue", "\n", "", "elif", "self", ".", "unsup_loss_type", "==", "\"sparse\"", ":", "\n", "                    ", "l5_logits", "=", "torch", ".", "stack", "(", "s1_log_probs", ",", "dim", "=", "0", ")", "\n", "q_l5", "=", "sparsemax", "(", "l5_logits", ".", "detach", "(", ")", ",", "dim", "=", "0", ")", "\n", "l5", "=", "(", "-", "q_l5", "*", "l5_logits", ")", ".", "sum", "(", ")", "\n", "losses", ".", "append", "(", "l5", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "                ", "logger", ".", "warn", "(", "\"semi_enc_dec obtains empty seqs from searching\"", ")", "\n", "continue", "\n", "\n", "", "", "if", "len", "(", "losses", ")", "==", "0", ":", "\n", "            ", "return", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ".", "to", "(", "self", ".", "_device", ")", ".", "requires_grad_", "(", ")", "\n", "", "return", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "losses", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.semi_enc_dec.SemiSupEncDecModel.collect_seq_and_orig_losses": [[186, 206], ["semi_enc_dec.SemiSupEncDecModel.encoder", "zip", "experiments.semi_sup.unsup_enc_dec.Example", "seqs.append", "losses.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "semi_enc_dec.SemiSupEncDecModel.get_executable_seqs", "semi_enc_dec.SemiSupEncDecModel.decoder", "_loss.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.unsup_enc_dec.UnSupEncDecModel.get_executable_seqs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "collect_seq_and_orig_losses", "(", "self", ",", "batch", ")", ":", "\n", "        ", "seqs", "=", "[", "]", "\n", "losses", "=", "[", "]", "\n", "enc_states", "=", "self", ".", "encoder", "(", "[", "enc_input", "for", "enc_input", ",", "dec_output", "in", "batch", "]", ")", "\n", "\n", "for", "enc_state", ",", "(", "enc_input", ",", "_dec_output", ")", "in", "zip", "(", "enc_states", ",", "batch", ")", ":", "\n", "            ", "example", "=", "unsup_enc_dec", ".", "Example", "(", "_dec_output", "[", "\"domain\"", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "seqs_of_one_example", ",", "_", "=", "self", ".", "get_executable_seqs", "(", "\n", "example", ",", "(", "enc_input", ",", "_dec_output", ")", "\n", ")", "\n", "", "seqs", ".", "append", "(", "seqs_of_one_example", ")", "\n", "\n", "_loss", "=", "[", "]", "\n", "for", "seq", "in", "seqs_of_one_example", ":", "\n", "                ", "dec_output", "=", "{", "\"domain\"", ":", "_dec_output", "[", "\"domain\"", "]", ",", "\"productions\"", ":", "seq", "}", "\n", "ret_dict", "=", "self", ".", "decoder", "(", "dec_output", ",", "enc_state", ")", "\n", "_loss", ".", "append", "(", "ret_dict", "[", "\"loss\"", "]", ")", "\n", "", "losses", ".", "append", "(", "_loss", ")", "\n", "", "return", "seqs", ",", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.semi_enc_dec.SemiSupEncDecModel.collect_update_losses": [[207, 221], ["zip", "losses.append", "semi_enc_dec.SemiSupEncDecModel.get_loss_of_single_example", "loss_l_of_one_example.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.semi_enc_dec.SemiSupEncDecModel.get_loss_of_single_example", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "collect_update_losses", "(", "self", ",", "model", ",", "batch", ",", "seqs", ")", ":", "\n", "        ", "\"\"\"\n        Inefficient way of obtaining loss\n        \"\"\"", "\n", "losses", "=", "[", "]", "\n", "for", "seqs_of_one_example", ",", "(", "enc_input", ",", "_dec_output", ")", "in", "zip", "(", "seqs", ",", "batch", ")", ":", "\n", "            ", "loss_l_of_one_example", "=", "[", "]", "\n", "for", "seq", "in", "seqs_of_one_example", ":", "\n", "                ", "_loss", "=", "self", ".", "get_loss_of_single_example", "(", "\n", "model", ",", "enc_input", ",", "_dec_output", ",", "seq", "\n", ")", "\n", "loss_l_of_one_example", ".", "append", "(", "_loss", ")", "\n", "", "losses", ".", "append", "(", "loss_l_of_one_example", ")", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.semi_enc_dec.SemiSupEncDecModel.get_loss_of_single_example": [[222, 227], ["model"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_loss_of_single_example", "(", "model", ",", "enc_input", ",", "_dec_output", ",", "seq", ")", ":", "\n", "        ", "dec_output", "=", "{", "\"domain\"", ":", "_dec_output", "[", "\"domain\"", "]", ",", "\"productions\"", ":", "seq", "}", "\n", "loss_dict", "=", "model", "(", "[", "[", "enc_input", ",", "dec_output", "]", "]", ")", "\n", "return", "loss_dict", "[", "\"loss\"", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.run.parse_args": [[20, 27], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.parse_args"], ["\n", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"mode\"", ",", "choices", "=", "[", "\"train\"", ",", "\"eval_tagging\"", ",", "\"eval_ctc\"", ",", "\"eval_ssnt\"", ",", "\"eval_swan\"", "]", ",", "help", "=", "\"train/eval_aligned/eval_ctc\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"exp_config_file\"", ",", "help", "=", "\"jsonnet file for experiments\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.run.main": [[28, 54], ["run.parse_args", "tensor2struct.commands.run.load_args", "os.environ.get", "print", "os.path.join", "wandb.init", "run.SemiTrainConfig", "experiments.semi_sup.semi_train.main", "exp_config[].split", "os.getcwd"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.parse_args", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.load_args", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.main"], ["\n", "exp_config", "=", "json", ".", "loads", "(", "_jsonnet", ".", "evaluate_file", "(", "args", ".", "exp_config_file", ")", ")", "\n", "model_config_file", "=", "exp_config", "[", "\"model_config\"", "]", "\n", "if", "\"model_config_args\"", "in", "exp_config", ":", "\n", "        ", "model_config_args", "=", "json", ".", "dumps", "(", "exp_config", "[", "\"model_config_args\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "model_config_args", "=", "None", "\n", "\n", "# cluster base dir", "\n", "", "log_base_dir", "=", "os", ".", "environ", ".", "get", "(", "\"LOG_BASE_DIR\"", ",", "None", ")", "\n", "if", "log_base_dir", "is", "None", ":", "\n", "        ", "print", "(", "f\"Using default log base dir {os.getcwd()}\"", ")", "\n", "logdir", "=", "exp_config", "[", "\"logdir\"", "]", "\n", "", "else", ":", "\n", "        ", "logdir", "=", "os", ".", "path", ".", "join", "(", "log_base_dir", ",", "exp_config", "[", "\"logdir\"", "]", ")", "\n", "\n", "# wandb init", "\n", "", "expname", "=", "exp_config", "[", "\"logdir\"", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "project", "=", "exp_config", "[", "\"project\"", "]", "\n", "\n", "# dist train need to start a wandb session in each process, not a global one", "\n", "if", "args", ".", "mode", "in", "[", "\"train\"", ",", "\"eval_tagging\"", ",", "\"eval_ctc\"", ",", "\"eval_ssnt\"", ",", "\"eval_swan\"", "]", ":", "\n", "        ", "wandb", ".", "init", "(", "project", "=", "project", ",", "group", "=", "expname", ",", "job_type", "=", "args", ".", "mode", ")", "\n", "\n", "", "if", "args", ".", "mode", "==", "\"train\"", ":", "\n", "        ", "train_config", "=", "TrainConfig", "(", "model_config_file", ",", "model_config_args", ",", "logdir", ")", "\n", "train", ".", "main", "(", "train_config", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.semi_train.Trainer.load_train_config": [[26, 28], ["tensor2struct.utils.registry.instantiate"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.instantiate"], ["    ", "def", "load_train_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_config", "=", "registry", ".", "instantiate", "(", "TrainConfig", ",", "self", ".", "config", "[", "\"train\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.semi_train.Trainer.load_train_data": [[29, 57], ["semi_train.Trainer.model_preproc.dataset", "semi_train.Trainer._yield_batches_from_epochs", "semi_train.Trainer.model_preproc.dataset", "semi_train.Trainer._yield_batches_from_epochs", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.dataset", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer._yield_batches_from_epochs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.dataset", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer._yield_batches_from_epochs"], ["", "def", "load_train_data", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "data_random", ":", "\n", "            ", "try", ":", "\n", "                ", "train_data", "=", "self", ".", "model_preproc", ".", "dataset", "(", "\"train\"", ")", "\n", "train_data_loader", "=", "self", ".", "_yield_batches_from_epochs", "(", "\n", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "\n", "batch_size", "=", "self", ".", "train_config", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", "collate_fn", "=", "lambda", "x", ":", "x", ",", "\n", ")", "\n", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "# unsupervised learning does not have training data at all", "\n", "                ", "train_data_loader", "=", "None", "\n", "\n", "", "unlabel_train_data", "=", "self", ".", "model_preproc", ".", "dataset", "(", "\"unlabel_train\"", ")", "\n", "unlabel_train_data_loader", "=", "self", ".", "_yield_batches_from_epochs", "(", "\n", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "unlabel_train_data", ",", "\n", "batch_size", "=", "self", ".", "train_config", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", "collate_fn", "=", "lambda", "x", ":", "x", ",", "\n", ")", "\n", ")", "\n", "", "return", "(", "train_data_loader", ",", "unlabel_train_data_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.semi_train.Trainer.load_eval_data": [[58, 78], ["semi_train.Trainer.model_preproc.dataset", "torch.utils.data.DataLoader", "semi_train.Trainer.model_preproc.dataset", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.dataset", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.dataset"], ["", "def", "load_eval_data", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "data_random", ":", "\n", "            ", "try", ":", "\n", "                ", "train_data", "=", "self", ".", "model_preproc", ".", "dataset", "(", "\"train\"", ")", "\n", "train_eval_data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "\n", "batch_size", "=", "self", ".", "train_config", ".", "eval_batch_size", ",", "\n", "collate_fn", "=", "lambda", "x", ":", "x", ",", "\n", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "# unsupervised learning does not have training data at all", "\n", "                ", "train_eval_data_loader", "=", "None", "\n", "\n", "", "val_data", "=", "self", ".", "model_preproc", ".", "dataset", "(", "\"val\"", ")", "\n", "val_data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_data", ",", "\n", "batch_size", "=", "self", ".", "train_config", ".", "eval_batch_size", ",", "\n", "collate_fn", "=", "lambda", "x", ":", "x", ",", "\n", ")", "\n", "", "return", "train_eval_data_loader", ",", "val_data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.semi_train.Trainer.step": [[79, 116], ["range", "optimizer.step", "lr_scheduler.update_lr", "optimizer.zero_grad", "norm_loss.backward", "semi_train.Trainer.logger.warn", "semi_train.Trainer.logger.info", "semi_train.Trainer.logger.info", "next", "semi_train.Trainer.model", "next", "semi_train.Trainer.model", "wandb.log", "wandb.log", "loss.item", "loss.item", "loss.item"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.optimizers.BertWarmupPolynomialLRSchedulerGroupV2.update_lr"], ["", "def", "step", "(", "self", ",", "config", ",", "train_data_loader", ",", "optimizer", ",", "lr_scheduler", ",", "last_step", ")", ":", "\n", "        ", "labelled_data_loader", ",", "unlabelled_data_loader", "=", "train_data_loader", "\n", "with", "self", ".", "model_random", ":", "\n", "            ", "for", "_i", "in", "range", "(", "self", ".", "train_config", ".", "num_batch_accumulated", ")", ":", "\n", "                ", "if", "labelled_data_loader", ":", "\n", "                    ", "labelled_batch", "=", "next", "(", "labelled_data_loader", ")", "\n", "", "else", ":", "\n", "                    ", "labelled_batch", "=", "None", "\n", "\n", "", "if", "last_step", "<", "self", ".", "train_config", ".", "pretrain_threshold", ":", "\n", "                    ", "ret_dic", "=", "self", ".", "model", "(", "labelled_batch", ")", "\n", "loss", "=", "ret_dic", "[", "\"loss\"", "]", "\n", "", "else", ":", "\n", "                    ", "unlabelled_batch", "=", "next", "(", "unlabelled_data_loader", ")", "\n", "ret_dic", "=", "self", ".", "model", "(", "labelled_batch", ",", "unlabelled_batch", ")", "\n", "loss", "=", "ret_dic", "[", "\"loss\"", "]", "\n", "", "norm_loss", "=", "loss", "/", "self", ".", "train_config", ".", "num_batch_accumulated", "\n", "norm_loss", ".", "backward", "(", ")", "\n", "\n", "", "if", "self", ".", "train_config", ".", "clip_grad", ":", "\n", "                ", "self", ".", "logger", ".", "warn", "(", "\"Clip grad is only designed for BERT finetune\"", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "new_lr", "=", "lr_scheduler", ".", "update_lr", "(", "last_step", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "new_lr", "is", "None", ":", "\n", "                ", "new_lr", "=", "[", "param", "[", "\"lr\"", "]", "for", "param", "in", "optimizer", ".", "param_groups", "]", "\n", "\n", "", "if", "last_step", "%", "self", ".", "train_config", ".", "report_every_n", "==", "0", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"Step {}: loss={:.4f}\"", ".", "format", "(", "last_step", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "f\"Step {last_step}, lr={new_lr}\"", ")", "\n", "\n", "if", "\"summary\"", "in", "ret_dic", ":", "\n", "                    ", "wandb", ".", "log", "(", "{", "\"train_loss\"", ":", "loss", ".", "item", "(", ")", ",", "**", "ret_dic", "[", "\"summary\"", "]", "}", ",", "step", "=", "last_step", ")", "\n", "", "else", ":", "\n", "                    ", "wandb", ".", "log", "(", "{", "\"train_loss\"", ":", "loss", ".", "item", "(", ")", "}", ",", "step", "=", "last_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.semi_sup.semi_train.main": [[118, 125], ["tensor2struct.commands.train.setup", "semi_train.Trainer", "Trainer.train"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.setup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.train"], ["", "", "", "", "", "def", "main", "(", "args", ")", ":", "\n", "# setup logger etc", "\n", "    ", "config", ",", "logger", "=", "train", ".", "setup", "(", "args", ")", "\n", "\n", "# Construct trainer and do training", "\n", "trainer", "=", "Trainer", "(", "logger", ",", "config", ")", "\n", "trainer", ".", "train", "(", "config", ",", "modeldir", "=", "args", ".", "logdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider_dg.meta_train.MetaTrainer.load_train_config": [[27, 38], ["tensor2struct.utils.registry.instantiate", "tensor2struct.commands.meta_train.MetaTrainer.logger.warn", "tensor2struct.commands.meta_train.MetaTrainer.logger.info"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.instantiate"], ["    ", "def", "load_train_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_config", "=", "registry", ".", "instantiate", "(", "\n", "MetaTrainConfig", ",", "self", ".", "config", "[", "\"meta_train\"", "]", "\n", ")", "\n", "\n", "if", "self", ".", "train_config", ".", "num_batch_accumulated", ">", "1", ":", "\n", "            ", "self", ".", "logger", ".", "warn", "(", "\"Batch accumulation is used only at MAML-step level\"", ")", "\n", "\n", "", "if", "self", ".", "train_config", ".", "use_bert_training", ":", "\n", "            ", "if", "self", ".", "train_config", ".", "clip_grad", "is", "None", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"Gradient clipping is recommended for BERT training\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider_dg.meta_train.MetaTrainer.load_optimizer": [[39, 103], ["list", "tensor2struct.utils.registry.construct", "tensor2struct.commands.meta_train.MetaTrainer.logger.info", "tensor2struct.training.maml.MAML", "tensor2struct.training.maml.MAML.to", "tensor2struct.training.maml.MAML.get_inner_opt_params", "tensor2struct.commands.meta_train.MetaTrainer.logger.info", "tensor2struct.utils.registry.construct", "tensor2struct.commands.meta_train.MetaTrainer.model.get_non_bert_parameters", "tensor2struct.commands.meta_train.MetaTrainer.model.get_bert_parameters", "tensor2struct.commands.meta_train.MetaTrainer.model.get_non_bert_parameters", "tensor2struct.commands.meta_train.MetaTrainer.logger.info", "tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.construct", "config.get", "len", "len", "config.get", "config.get", "len", "len", "len", "len", "list", "tensor2struct.commands.meta_train.MetaTrainer.model.get_trainable_parameters", "tensor2struct.commands.meta_train.MetaTrainer.model.parameters", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.maml.ModelAgnosticMetaLearning.get_inner_opt_params", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.get_non_bert_parameters", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.get_bert_parameters", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.get_non_bert_parameters", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.get_trainable_parameters"], ["", "", "", "def", "load_optimizer", "(", "self", ",", "config", ")", ":", "\n", "        ", "with", "self", ".", "init_random", ":", "\n", "# 0. create inner_optimizer", "\n", "# inner_parameters = list(self.model.get_trainable_parameters())", "\n", "            ", "inner_parameters", "=", "list", "(", "self", ".", "model", ".", "get_non_bert_parameters", "(", ")", ")", "\n", "inner_optimizer", "=", "registry", ".", "construct", "(", "\n", "\"optimizer\"", ",", "self", ".", "train_config", ".", "inner_opt", ",", "params", "=", "inner_parameters", "\n", ")", "\n", "self", ".", "logger", ".", "info", "(", "f\"{len(inner_parameters)} parameters for inner update\"", ")", "\n", "\n", "# 1. MAML trainer, might add new parameters to the optimizer, e.g., step size", "\n", "maml_trainer", "=", "maml", ".", "MAML", "(", "\n", "model", "=", "self", ".", "model", ",", "inner_opt", "=", "inner_optimizer", ",", "device", "=", "self", ".", "device", ",", "\n", ")", "\n", "maml_trainer", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "opt_params", "=", "maml_trainer", ".", "get_inner_opt_params", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "f\"{len(opt_params)} opt meta parameters\"", ")", "\n", "\n", "# 2. Outer optimizer", "\n", "# if config[\"optimizer\"].get(\"name\", None) in [\"bertAdamw\", \"torchAdamw\"]:", "\n", "if", "self", ".", "train_config", ".", "use_bert_training", ":", "\n", "                ", "bert_params", "=", "self", ".", "model", ".", "get_bert_parameters", "(", ")", "\n", "non_bert_params", "=", "self", ".", "model", ".", "get_non_bert_parameters", "(", ")", "\n", "assert", "len", "(", "non_bert_params", ")", "+", "len", "(", "bert_params", ")", "==", "len", "(", "\n", "list", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", ")", "\n", "assert", "len", "(", "bert_params", ")", ">", "0", "\n", "self", ".", "logger", ".", "info", "(", "\n", "f\"{len(bert_params)} BERT parameters and {len(non_bert_params)} non-BERT parameters\"", "\n", ")", "\n", "\n", "optimizer", "=", "registry", ".", "construct", "(", "\n", "\"optimizer\"", ",", "\n", "config", "[", "\"optimizer\"", "]", ",", "\n", "non_bert_params", "=", "non_bert_params", ",", "\n", "bert_params", "=", "bert_params", ",", "\n", ")", "\n", "lr_scheduler", "=", "registry", ".", "construct", "(", "\n", "\"lr_scheduler\"", ",", "\n", "config", ".", "get", "(", "\"lr_scheduler\"", ",", "{", "\"name\"", ":", "\"noop\"", "}", ")", ",", "\n", "param_groups", "=", "[", "\n", "optimizer", ".", "non_bert_param_group", ",", "\n", "optimizer", ".", "bert_param_group", ",", "\n", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "optimizer", "=", "registry", ".", "construct", "(", "\n", "\"optimizer\"", ",", "\n", "config", "[", "\"optimizer\"", "]", ",", "\n", "params", "=", "self", ".", "model", ".", "get_trainable_parameters", "(", ")", ",", "\n", ")", "\n", "lr_scheduler", "=", "registry", ".", "construct", "(", "\n", "\"lr_scheduler\"", ",", "\n", "config", ".", "get", "(", "\"lr_scheduler\"", ",", "{", "\"name\"", ":", "\"noop\"", "}", ")", ",", "\n", "param_groups", "=", "optimizer", ".", "param_groups", ",", "\n", ")", "\n", "\n", "", "lr_scheduler", "=", "registry", ".", "construct", "(", "\n", "\"lr_scheduler\"", ",", "\n", "config", ".", "get", "(", "\"lr_scheduler\"", ",", "{", "\"name\"", ":", "\"noop\"", "}", ")", ",", "\n", "param_groups", "=", "optimizer", ".", "param_groups", ",", "\n", ")", "\n", "return", "inner_optimizer", ",", "maml_trainer", ",", "optimizer", ",", "lr_scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider_dg.meta_train.MetaTrainer.step": [[104, 148], ["range", "optimizer.step", "optimizer.zero_grad", "lr_scheduler.update_lr", "tensor2struct.commands.meta_train.MetaTrainer.logger.info", "tensor2struct.commands.meta_train.MetaTrainer.logger.info", "wandb.log", "enumerate", "enumerate", "train_data_scheduler.get_batch", "maml_trainer.meta_train", "wandb.log", "wandb.log", "torch.nn.utils.clip_grad_norm_"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.optimizers.BertWarmupPolynomialLRSchedulerGroupV2.update_lr", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsRandScheduler.get_batch", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.maml.ModelAgnosticMetaLearning.meta_train"], ["", "", "def", "step", "(", "\n", "self", ",", "\n", "config", ",", "\n", "train_data_scheduler", ",", "\n", "maml_trainer", ",", "\n", "optimizer", ",", "\n", "lr_scheduler", ",", "\n", "last_step", ",", "\n", ")", ":", "\n", "        ", "with", "self", ".", "model_random", ":", "\n", "            ", "for", "_i", "in", "range", "(", "self", ".", "train_config", ".", "num_batch_accumulated", ")", ":", "\n", "                ", "task", "=", "train_data_scheduler", ".", "get_batch", "(", "last_step", ")", "\n", "inner_batch", ",", "outer_batches", "=", "task", "\n", "ret_dic", "=", "maml_trainer", ".", "meta_train", "(", "\n", "self", ".", "model", ",", "inner_batch", ",", "outer_batches", "\n", ")", "\n", "loss", "=", "ret_dic", "[", "\"loss\"", "]", "\n", "\n", "# clip bert grad", "\n", "", "if", "self", ".", "train_config", ".", "clip_grad", "and", "self", ".", "train_config", ".", "use_bert_training", ":", "\n", "                ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "\n", "param_group", "[", "\"params\"", "]", ",", "self", ".", "train_config", ".", "clip_grad", ",", "\n", ")", "\n", "\n", "\n", "", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# log lr for each step", "\n", "outer_lr", "=", "lr_scheduler", ".", "update_lr", "(", "last_step", ")", "\n", "if", "outer_lr", "is", "None", ":", "\n", "                ", "outer_lr", "=", "[", "param", "[", "\"lr\"", "]", "for", "param", "in", "optimizer", ".", "param_groups", "]", "\n", "", "inner_lr", "=", "[", "param", "[", "\"lr\"", "]", "for", "param", "in", "maml_trainer", ".", "inner_opt", ".", "param_groups", "]", "\n", "\n", "# Report metrics and lr", "\n", "", "if", "last_step", "%", "self", ".", "train_config", ".", "report_every_n", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Step {}: loss={:.4f}\"", ".", "format", "(", "last_step", ",", "loss", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "f\"Step {last_step}, lr={inner_lr, outer_lr}\"", ")", "\n", "wandb", ".", "log", "(", "{", "\"train_loss\"", ":", "loss", "}", ",", "step", "=", "last_step", ")", "\n", "for", "idx", ",", "lr", "in", "enumerate", "(", "inner_lr", ")", ":", "\n", "                ", "wandb", ".", "log", "(", "{", "f\"inner_lr_{idx}\"", ":", "lr", "}", ",", "step", "=", "last_step", ")", "\n", "", "for", "idx", ",", "lr", "in", "enumerate", "(", "outer_lr", ")", ":", "\n", "                ", "wandb", ".", "log", "(", "{", "f\"outer_lr_{idx}\"", ":", "lr", "}", ",", "step", "=", "last_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider_dg.meta_train.main": [[150, 157], ["tensor2struct.commands.train.setup", "meta_train.MetaTrainer", "MetaTrainer.train"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.setup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.train"], ["", "", "", "", "def", "main", "(", "args", ")", ":", "\n", "# setup logger etc", "\n", "    ", "config", ",", "logger", "=", "train", ".", "setup", "(", "args", ")", "\n", "\n", "# Construct trainer and do training", "\n", "trainer", "=", "MetaTrainer", "(", "logger", ",", "config", ")", "\n", "trainer", ".", "train", "(", "config", ",", "modeldir", "=", "args", ".", "logdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider_dg.train.Trainer.load_train_config": [[22, 28], ["tensor2struct.utils.registry.instantiate", "tensor2struct.commands.train.Trainer.logger.info"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.instantiate"], ["from", "__future__", "import", "unicode_literals", "\n", "\n", "import", "os", "\n", "import", "tempfile", "\n", "\n", "import", "yaml", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider_dg.train.Trainer.load_optimizer": [[29, 63], ["tensor2struct.commands.train.Trainer.model.get_bert_parameters", "tensor2struct.commands.train.Trainer.model.get_non_bert_parameters", "tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.construct", "len", "config.get", "config.get", "len", "len", "list", "tensor2struct.commands.train.Trainer.model.get_trainable_parameters", "tensor2struct.commands.train.Trainer.model.parameters"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.get_bert_parameters", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.get_non_bert_parameters", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.get_trainable_parameters"], ["import", "tensorflow", "as", "tf", "\n", "from", "tensorflow", ".", "contrib", ".", "learn", ".", "python", ".", "learn", "import", "learn_runner", "\n", "from", "tensorflow", ".", "contrib", ".", "learn", ".", "python", ".", "learn", ".", "estimators", "import", "run_config", "\n", "from", "tensorflow", "import", "gfile", "\n", "\n", "from", "seq2seq", "import", "models", "\n", "from", "seq2seq", ".", "contrib", ".", "experiment", "import", "Experiment", "as", "PatchedExperiment", "\n", "from", "seq2seq", ".", "configurable", "import", "_maybe_load_yaml", ",", "_create_from_dict", "\n", "from", "seq2seq", ".", "configurable", "import", "_deep_merge_dict", "\n", "from", "seq2seq", ".", "data", "import", "input_pipeline", "\n", "from", "seq2seq", ".", "metrics", "import", "metric_specs", "\n", "from", "seq2seq", ".", "training", "import", "hooks", "\n", "from", "seq2seq", ".", "training", "import", "utils", "as", "training_utils", "\n", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"config_paths\"", ",", "\"\"", ",", "\n", "\"\"\"Path to a YAML configuration files defining FLAG\n                       values. Multiple files can be separated by commas.\n                       Files are merged recursively. Setting a key in these\n                       files is equivalent to setting the FLAG value with\n                       the same name.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"hooks\"", ",", "\"[]\"", ",", "\n", "\"\"\"YAML configuration string for the\n                       training hooks to use.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"metrics\"", ",", "\"[]\"", ",", "\n", "\"\"\"YAML configuration string for the\n                       training metrics to use.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"model\"", ",", "\"\"", ",", "\n", "\"\"\"Name of the model class.\n                       Can be either a fully-qualified name, or the name\n                       of a class defined in `seq2seq.models`.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"model_params\"", ",", "\"{}\"", ",", "\n", "\"\"\"YAML configuration string for the model\n                       parameters.\"\"\"", ")", "\n", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"input_pipeline_train\"", ",", "\"{}\"", ",", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider_dg.train.Trainer.step": [[64, 93], ["range", "optimizer.step", "lr_scheduler.update_lr", "optimizer.zero_grad", "next", "tensor2struct.commands.train.Trainer.model", "norm_loss.backward", "tensor2struct.commands.train.Trainer.logger.info", "tensor2struct.commands.train.Trainer.logger.info", "wandb.log", "enumerate", "torch.nn.utils.clip_grad_norm_", "wandb.log", "loss.item", "loss.item"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.optimizers.BertWarmupPolynomialLRSchedulerGroupV2.update_lr"], ["\"\"\"YAML configuration string for the training\n                       data input pipeline.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"input_pipeline_dev\"", ",", "\"{}\"", ",", "\n", "\"\"\"YAML configuration string for the development\n                       data input pipeline.\"\"\"", ")", "\n", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"buckets\"", ",", "None", ",", "\n", "\"\"\"Buckets input sequences according to these length.\n                       A comma-separated list of sequence length buckets, e.g.\n                       \"10,20,30\" would result in 4 buckets:\n                       <10, 10-20, 20-30, >30. None disabled bucketing. \"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"batch_size\"", ",", "16", ",", "\n", "\"\"\"Batch size used for training and evaluation.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"output_dir\"", ",", "None", ",", "\n", "\"\"\"The directory to write model checkpoints and summaries\n                       to. If None, a local temporary directory is created.\"\"\"", ")", "\n", "\n", "# Training parameters", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"schedule\"", ",", "\"continuous_train_and_eval\"", ",", "\n", "\"\"\"Estimator function to call, defaults to\n                       continuous_train_and_eval for local run\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"train_steps\"", ",", "None", ",", "\n", "\"\"\"Maximum number of training steps to run.\n                         If None, train forever.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"eval_every_n_steps\"", ",", "1000", ",", "\n", "\"Run evaluation on validation data every N steps.\"", ")", "\n", "\n", "# RunConfig Flags", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"tf_random_seed\"", ",", "None", ",", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider_dg.train.Trainer.train": [[94, 135], ["tensor2struct.commands.train.Trainer.load_optimizer", "tensor2struct.commands.train.Trainer.load_saver", "tensor2struct.commands.train.Trainer.load_train_data", "tensor2struct.commands.train.Trainer.load_eval_data", "tensor2struct.utils.saver.save", "tensor2struct.commands.train.Trainer.eval_model", "tensor2struct.commands.train.Trainer.step", "tensor2struct.commands.train.Trainer.save_state", "int", "tensor2struct.utils.saver.save", "tensor2struct.commands.train.Trainer.model.to", "train._optimizer_to", "torch.cuda.empty_cache", "gc.collect", "tensor2struct.commands.train.Trainer.load_model", "tensor2struct.commands.train.Trainer.load_optimizer", "tensor2struct.commands.train.Trainer.load_saver", "os.unlink", "str", "tensor2struct.commands.train.Trainer.logger.warn", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.load_optimizer", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.load_saver", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.load_train_data", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.load_eval_data", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.save", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.eval_model", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.save_state", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.save", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider_dg.train._optimizer_to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.Inferer.load_model", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.load_optimizer", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.load_saver", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], [")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"save_checkpoints_secs\"", ",", "None", ",", "\n", "\"\"\"Save checkpoints every this many seconds.\n                        Can not be specified with save_checkpoints_steps.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"save_checkpoints_steps\"", ",", "None", ",", "\n", "\"\"\"Save checkpoints every this many steps.\n                        Can not be specified with save_checkpoints_secs.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"keep_checkpoint_max\"", ",", "5", ",", "\n", "\"\"\"Maximum number of recent checkpoint files to keep.\n                        As new files are created, older files are deleted.\n                        If None or 0, all checkpoint files are kept.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"keep_checkpoint_every_n_hours\"", ",", "4", ",", "\n", "\"\"\"In addition to keeping the most recent checkpoint\n                        files, keep one checkpoint file for every N hours of\n                        training.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_float", "(", "\"gpu_memory_fraction\"", ",", "1.0", ",", "\n", "\"\"\"Fraction of GPU memory used by the process on\n                      each GPU uniformly on the same machine.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_boolean", "(", "\"gpu_allow_growth\"", ",", "False", ",", "\n", "\"\"\"Allow GPU memory allocation to grow\n                        dynamically.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_boolean", "(", "\"log_device_placement\"", ",", "False", ",", "\n", "\"\"\"Log the op placement to devices\"\"\"", ")", "\n", "\n", "\n", "FLAGS", "=", "tf", ".", "flags", ".", "FLAGS", "\n", "\n", "def", "create_experiment", "(", "output_dir", ")", ":", "\n", "  ", "\"\"\"\n  Creates a new Experiment instance.\n\n  Args:\n    output_dir: Output directory for model checkpoints and summaries.\n  \"\"\"", "\n", "\n", "config", "=", "run_config", ".", "RunConfig", "(", "\n", "tf_random_seed", "=", "FLAGS", ".", "tf_random_seed", ",", "\n", "save_checkpoints_secs", "=", "FLAGS", ".", "save_checkpoints_secs", ",", "\n", "save_checkpoints_steps", "=", "FLAGS", ".", "save_checkpoints_steps", ",", "\n", "keep_checkpoint_max", "=", "FLAGS", ".", "keep_checkpoint_max", ",", "\n", "keep_checkpoint_every_n_hours", "=", "FLAGS", ".", "keep_checkpoint_every_n_hours", ",", "\n", "gpu_memory_fraction", "=", "FLAGS", ".", "gpu_memory_fraction", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider_dg.train._optimizer_to": [[136, 152], ["optimizer.state.values", "isinstance", "param.data.to", "isinstance", "param._grad.data.to", "param.values", "isinstance", "subparam.data.to", "subparam._grad.data.to"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.values", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.values", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["config", ".", "tf_config", ".", "gpu_options", ".", "allow_growth", "=", "FLAGS", ".", "gpu_allow_growth", "\n", "config", ".", "tf_config", ".", "log_device_placement", "=", "FLAGS", ".", "log_device_placement", "\n", "\n", "train_options", "=", "training_utils", ".", "TrainOptions", "(", "\n", "model_class", "=", "FLAGS", ".", "model", ",", "\n", "model_params", "=", "FLAGS", ".", "model_params", ")", "\n", "# On the main worker, save training options", "\n", "if", "config", ".", "is_chief", ":", "\n", "    ", "gfile", ".", "MakeDirs", "(", "output_dir", ")", "\n", "train_options", ".", "dump", "(", "output_dir", ")", "\n", "\n", "", "bucket_boundaries", "=", "None", "\n", "if", "FLAGS", ".", "buckets", ":", "\n", "    ", "bucket_boundaries", "=", "list", "(", "map", "(", "int", ",", "FLAGS", ".", "buckets", ".", "split", "(", "\",\"", ")", ")", ")", "\n", "\n", "# Training data input pipeline", "\n", "", "train_input_pipeline", "=", "input_pipeline", ".", "make_input_pipeline_from_def", "(", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider_dg.train.main": [[153, 160], ["tensor2struct.commands.train.setup", "train.Trainer", "Trainer.train"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.setup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.train"], ["def_dict", "=", "FLAGS", ".", "input_pipeline_train", ",", "\n", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "\n", "# Create training input function", "\n", "train_input_fn", "=", "training_utils", ".", "create_input_fn", "(", "\n", "pipeline", "=", "train_input_pipeline", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "\n", "bucket_boundaries", "=", "bucket_boundaries", ",", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider_dg.run.main": [[30, 67], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "json.loads", "os.environ.get", "_jsonnet.evaluate_file", "json.dumps", "print", "os.path.join", "exp_config[].split", "wandb.init", "run.TrainConfig", "experiments.spider_dg.train.main", "run.MetaTrainConfig", "experiments.spider_dg.meta_train.main", "os.getcwd"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.parse_args", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.main", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.main"], ["model_config_file", "=", "exp_config", "[", "\"model_config\"", "]", "\n", "if", "\"model_config_args\"", "in", "exp_config", ":", "\n", "        ", "model_config_args", "=", "json", ".", "dumps", "(", "exp_config", "[", "\"model_config_args\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "model_config_args", "=", "None", "\n", "\n", "# cluster base dir", "\n", "", "log_base_dir", "=", "os", ".", "environ", ".", "get", "(", "\"LOG_BASE_DIR\"", ",", "None", ")", "\n", "if", "log_base_dir", "is", "None", ":", "\n", "        ", "print", "(", "f\"Using default log base dir {os.getcwd()}\"", ")", "\n", "logdir", "=", "exp_config", "[", "\"logdir\"", "]", "\n", "", "else", ":", "\n", "        ", "logdir", "=", "os", ".", "path", ".", "join", "(", "log_base_dir", ",", "exp_config", "[", "\"logdir\"", "]", ")", "\n", "\n", "# wandb init", "\n", "", "expname", "=", "exp_config", "[", "\"logdir\"", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "project", "=", "exp_config", "[", "\"project\"", "]", "\n", "\n", "# dist train need to start a wandb session in each process, not a global one", "\n", "if", "args", ".", "mode", "in", "[", "\"train\"", ",", "\"eval_tagging\"", ",", "\"eval_ctc\"", ",", "\"eval_ssnt\"", ",", "\"eval_swan\"", "]", ":", "\n", "        ", "wandb", ".", "init", "(", "project", "=", "project", ",", "group", "=", "expname", ",", "job_type", "=", "args", ".", "mode", ")", "\n", "\n", "", "if", "args", ".", "mode", "==", "\"train\"", ":", "\n", "        ", "train_config", "=", "TrainConfig", "(", "model_config_file", ",", "model_config_args", ",", "logdir", ")", "\n", "train", ".", "main", "(", "train_config", ")", "\n", "", "elif", "args", ".", "mode", "in", "[", "\"eval_tagging\"", "]", ":", "\n", "        ", "run", ".", "eval_and_report", "(", "args", ",", "exp_config", ",", "model_config_args", ",", "logdir", ",", "infer_mod", "=", "infer_tagging", ")", "\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_bert_context.SpiderBertContext.__init__": [[30, 41], ["spider_bert_context.SpiderBertContext.preprocess_schema"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext.preprocess_schema"], ["    ", "def", "__init__", "(", "self", ",", "schema", ",", "tokenizer", ",", "db_paths", ")", "->", "None", ":", "\n", "        ", "self", ".", "tokenizer", "=", "tokenizer", "\n", "\n", "self", ".", "schema", "=", "schema", "\n", "preproc_schema", "=", "self", ".", "preprocess_schema", "(", "self", ".", "schema", ")", "\n", "self", ".", "preproc_schema", "=", "preproc_schema", "\n", "\n", "self", ".", "columns", "=", "preproc_schema", ".", "normalized_column_names", "\n", "self", ".", "tables", "=", "preproc_schema", ".", "normalized_table_names", "\n", "\n", "self", ".", "db_dirs", "=", "db_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_bert_context.SpiderBertContext._normalize": [[42, 47], ["spider_bert_context.SpiderBertContext.tokenizer.tokenize_and_lemmatize", "spider_bert_context.SpiderBertContext.tokenizer.tokenize_and_spacy"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer.tokenize_and_lemmatize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer.tokenize_and_spacy"], ["", "def", "_normalize", "(", "self", ",", "sent_text", ",", "ret_meta", "=", "False", ")", ":", "\n", "        ", "if", "not", "ret_meta", ":", "\n", "            ", "return", "self", ".", "tokenizer", ".", "tokenize_and_lemmatize", "(", "sent_text", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "tokenizer", ".", "tokenize_and_spacy", "(", "sent_text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_bert_context.SpiderBertContext.preprocess_schema": [[48, 91], ["spider_bert_context.PreprocessedSchema", "enumerate", "PreprocessedSchema.table_bounds.append", "enumerate", "tensor2struct.utils.serialization.to_dict_with_sorted_values", "PreprocessedSchema.column_names.append", "PreprocessedSchema.normalized_column_names.append", "len", "len", "PreprocessedSchema.table_names.append", "PreprocessedSchema.normalized_table_names.append", "spider_bert_context.SpiderBertContext._normalize", "PreprocessedSchema.table_to_columns.setdefault", "PreprocessedSchema.table_to_columns.setdefault.append", "PreprocessedSchema.table_bounds.append", "PreprocessedSchema.foreign_keys_tables[].add", "len", "spider_bert_context.SpiderBertContext._normalize", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.serialization.to_dict_with_sorted_values", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_bert_context.SpiderBertContext._normalize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.setdefault", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_bert_context.SpiderBertContext._normalize"], ["", "", "def", "preprocess_schema", "(", "self", ",", "schema", ")", ":", "\n", "        ", "r", "=", "PreprocessedSchema", "(", ")", "\n", "last_table_id", "=", "None", "\n", "for", "i", ",", "column", "in", "enumerate", "(", "schema", ".", "columns", ")", ":", "\n", "\n", "# assert column.type in [\"text\", \"number\", \"time\", \"boolean\", \"others\"]", "\n", "# type_tok = \"<type: {}>\".format(column.type)", "\n", "# for bert, we take the representation of the first word", "\n", "\n", "            ", "column_text", "=", "\" \"", ".", "join", "(", "column", ".", "name", ")", "\n", "r", ".", "column_names", ".", "append", "(", "column_text", ")", "\n", "r", ".", "normalized_column_names", ".", "append", "(", "self", ".", "_normalize", "(", "column_text", ")", ")", "\n", "\n", "table_id", "=", "None", "if", "column", ".", "table", "is", "None", "else", "column", ".", "table", ".", "id", "\n", "r", ".", "column_to_table", "[", "str", "(", "i", ")", "]", "=", "table_id", "\n", "if", "table_id", "is", "not", "None", ":", "\n", "                ", "columns", "=", "r", ".", "table_to_columns", ".", "setdefault", "(", "str", "(", "table_id", ")", ",", "[", "]", ")", "\n", "columns", ".", "append", "(", "i", ")", "\n", "", "if", "last_table_id", "!=", "table_id", ":", "\n", "                ", "r", ".", "table_bounds", ".", "append", "(", "i", ")", "\n", "last_table_id", "=", "table_id", "\n", "\n", "", "if", "column", ".", "foreign_key_for", "is", "not", "None", ":", "\n", "                ", "r", ".", "foreign_keys", "[", "str", "(", "column", ".", "id", ")", "]", "=", "column", ".", "foreign_key_for", ".", "id", "\n", "r", ".", "foreign_keys_tables", "[", "str", "(", "column", ".", "table", ".", "id", ")", "]", ".", "add", "(", "\n", "column", ".", "foreign_key_for", ".", "table", ".", "id", "\n", ")", "\n", "\n", "", "", "r", ".", "table_bounds", ".", "append", "(", "len", "(", "schema", ".", "columns", ")", ")", "\n", "assert", "len", "(", "r", ".", "table_bounds", ")", "==", "len", "(", "schema", ".", "tables", ")", "+", "1", "\n", "\n", "for", "i", ",", "table", "in", "enumerate", "(", "schema", ".", "tables", ")", ":", "\n", "            ", "table_text", "=", "\" \"", ".", "join", "(", "table", ".", "name", ")", "\n", "r", ".", "table_names", ".", "append", "(", "table_text", ")", "\n", "r", ".", "normalized_table_names", ".", "append", "(", "self", ".", "_normalize", "(", "table_text", ")", ")", "\n", "\n", "", "r", ".", "foreign_keys_tables", "=", "serialization", ".", "to_dict_with_sorted_values", "(", "\n", "r", ".", "foreign_keys_tables", "\n", ")", "\n", "r", ".", "primary_keys", "=", "[", "\n", "column", ".", "id", "for", "table", "in", "schema", ".", "tables", "for", "column", "in", "table", ".", "primary_keys", "\n", "]", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_bert_context.SpiderBertContext.compute_schema_linking": [[92, 140], ["spider_bert_context.SpiderBertContext._normalize", "collections.defaultdict", "dict", "enumerate", "dict", "enumerate", "spider_bert_context.SpiderBertContext.remove_duplicates", "range", "len", "spider_bert_context.SpiderBertContext.exact_match", "spider_bert_context.SpiderBertContext.exact_match", "spider_bert_context.SpiderBertContext.partial_match", "spider_bert_context.SpiderBertContext.partial_match", "len", "n_gram.strip", "range", "range", "range", "range", "relations[].append", "relations[].append", "relations[].append", "relations[].append", "relations[].append", "relations[].append", "relations[].append", "relations[].append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_bert_context.SpiderBertContext._normalize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext.remove_duplicates", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.exact_match", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.exact_match", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.partial_match", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.partial_match", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "compute_schema_linking", "(", "self", ",", "q_text", ")", ":", "\n", "        ", "question", "=", "self", ".", "_normalize", "(", "q_text", ")", "\n", "column", ",", "table", "=", "self", ".", "columns", ",", "self", ".", "tables", "\n", "relations", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "\n", "col_id2list", "=", "dict", "(", ")", "\n", "for", "col_id", ",", "col_item", "in", "enumerate", "(", "column", ")", ":", "\n", "            ", "if", "col_id", "==", "0", ":", "\n", "                ", "continue", "\n", "", "col_id2list", "[", "col_id", "]", "=", "col_item", "\n", "\n", "", "tab_id2list", "=", "dict", "(", ")", "\n", "for", "tab_id", ",", "tab_item", "in", "enumerate", "(", "table", ")", ":", "\n", "            ", "tab_id2list", "[", "tab_id", "]", "=", "tab_item", "\n", "\n", "# 5-gram", "\n", "", "n", "=", "5", "\n", "while", "n", ">", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "question", ")", "-", "n", "+", "1", ")", ":", "\n", "                ", "n_gram_list", "=", "question", "[", "i", ":", "i", "+", "n", "]", "\n", "n_gram", "=", "\" \"", ".", "join", "(", "n_gram_list", ")", "\n", "if", "len", "(", "n_gram", ".", "strip", "(", ")", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "# exact match case", "\n", "", "for", "col_id", "in", "col_id2list", ":", "\n", "                    ", "if", "self", ".", "exact_match", "(", "n_gram_list", ",", "col_id2list", "[", "col_id", "]", ")", ":", "\n", "                        ", "for", "q_id", "in", "range", "(", "i", ",", "i", "+", "n", ")", ":", "\n", "                            ", "relations", "[", "\"q-col:CEM\"", "]", ".", "append", "(", "(", "q_id", ",", "col_id", ")", ")", "\n", "relations", "[", "\"col-q:CEM\"", "]", ".", "append", "(", "(", "col_id", ",", "q_id", ")", ")", "\n", "", "", "", "for", "tab_id", "in", "tab_id2list", ":", "\n", "                    ", "if", "self", ".", "exact_match", "(", "n_gram_list", ",", "tab_id2list", "[", "tab_id", "]", ")", ":", "\n", "                        ", "for", "q_id", "in", "range", "(", "i", ",", "i", "+", "n", ")", ":", "\n", "                            ", "relations", "[", "\"q-tab:TEM\"", "]", ".", "append", "(", "(", "q_id", ",", "tab_id", ")", ")", "\n", "relations", "[", "\"tab-q:TEM\"", "]", ".", "append", "(", "(", "tab_id", ",", "q_id", ")", ")", "\n", "\n", "# partial match case", "\n", "", "", "", "for", "col_id", "in", "col_id2list", ":", "\n", "                    ", "if", "self", ".", "partial_match", "(", "n_gram_list", ",", "col_id2list", "[", "col_id", "]", ")", ":", "\n", "                        ", "for", "q_id", "in", "range", "(", "i", ",", "i", "+", "n", ")", ":", "\n", "                            ", "relations", "[", "f\"q-col:CPM\"", "]", ".", "append", "(", "(", "q_id", ",", "col_id", ")", ")", "\n", "relations", "[", "f\"col-q:CPM\"", "]", ".", "append", "(", "(", "col_id", ",", "q_id", ")", ")", "\n", "", "", "", "for", "tab_id", "in", "tab_id2list", ":", "\n", "                    ", "if", "self", ".", "partial_match", "(", "n_gram_list", ",", "tab_id2list", "[", "tab_id", "]", ")", ":", "\n", "                        ", "for", "q_id", "in", "range", "(", "i", ",", "i", "+", "n", ")", ":", "\n", "                            ", "relations", "[", "\"q-tab:TPM\"", "]", ".", "append", "(", "(", "q_id", ",", "tab_id", ")", ")", "\n", "relations", "[", "\"tab-q:TPM\"", "]", ".", "append", "(", "(", "tab_id", ",", "q_id", ")", ")", "\n", "", "", "", "", "n", "-=", "1", "\n", "", "return", "self", ".", "remove_duplicates", "(", "relations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_bert_context.SpiderBertContext.compute_cell_value_linking": [[141, 189], ["spider_bert_context.SpiderBertContext._normalize", "collections.defaultdict", "enumerate", "spider_bert_context.SpiderBertContext.remove_duplicates", "os.path.join", "os.path.exists", "enumerate", "relations[].append", "relations[].append", "spider_bert_context.SpiderBertContext.db_word_match", "relations[].append", "relations[].append", "column.type.upper", "column.type.upper"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_bert_context.SpiderBertContext._normalize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext.remove_duplicates", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.exists", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.db_word_match", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "compute_cell_value_linking", "(", "self", ",", "q_text", ")", ":", "\n", "        ", "\"\"\"\n        Utilize spacy for 1) stop words 2) number\n        \"\"\"", "\n", "sp_tokens", "=", "self", ".", "_normalize", "(", "q_text", ",", "ret_meta", "=", "True", ")", "\n", "\n", "schema", "=", "self", ".", "schema", "\n", "db_dirs", "=", "self", ".", "db_dirs", "\n", "\n", "db_name", "=", "schema", ".", "db_id", "\n", "# find the db path", "\n", "for", "db_dir", "in", "db_dirs", ":", "\n", "            ", "db_path", "=", "os", ".", "path", ".", "join", "(", "db_dir", ",", "db_name", ",", "db_name", "+", "\".sqlite\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "db_path", ")", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "continue", "\n", "\n", "", "", "relations", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "q_id", ",", "sp_token", "in", "enumerate", "(", "sp_tokens", ")", ":", "\n", "            ", "if", "sp_token", ".", "is_stop", "or", "sp_token", ".", "is_space", ":", "\n", "                ", "continue", "\n", "\n", "", "for", "col_id", ",", "column", "in", "enumerate", "(", "schema", ".", "columns", ")", ":", "\n", "                ", "if", "col_id", "==", "0", ":", "\n", "                    ", "assert", "column", ".", "orig_name", "==", "\"*\"", "\n", "continue", "\n", "\n", "", "if", "sp_token", ".", "like_num", ":", "\n", "                    ", "if", "column", ".", "type", "in", "[", "\"number\"", ",", "\"time\"", "]", ":", "# TODO fine-grained date", "\n", "                        ", "relations", "[", "f\"q-col:{column.type.upper()}\"", "]", ".", "append", "(", "(", "q_id", ",", "col_id", ")", ")", "\n", "relations", "[", "f\"col-q:{column.type.upper()}\"", "]", ".", "append", "(", "(", "col_id", ",", "q_id", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "word", "=", "sp_token", ".", "text", "# use verbatim for value matching", "\n", "# word = sp_token.lemma_", "\n", "\n", "try", ":", "\n", "                        ", "ret", "=", "self", ".", "db_word_match", "(", "\n", "word", ",", "column", ".", "orig_name", ",", "column", ".", "table", ".", "orig_name", ",", "db_path", "\n", ")", "\n", "", "except", "timeout_decorator", ".", "TimeoutError", "as", "e", ":", "\n", "                        ", "ret", "=", "False", "\n", "\n", "", "if", "ret", ":", "\n", "                        ", "relations", "[", "\"q-col:CELLMATCH\"", "]", ".", "append", "(", "(", "q_id", ",", "col_id", ")", ")", "\n", "relations", "[", "\"col-q:CELLMATCH\"", "]", ".", "append", "(", "(", "col_id", ",", "q_id", ")", ")", "\n", "\n", "", "", "", "", "return", "self", ".", "remove_duplicates", "(", "relations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.knowledge_graph.KnowledgeGraph.__init__": [[14, 37], ["sum", "numpy.full", "isinstance", "range", "isinstance", "isinstance", "knowledge_graph.Section", "new_sections.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["    ", "def", "__init__", "(", "self", ",", "sections", ":", "List", "[", "Section", "]", ",", "relations2id", ":", "Dict", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "sections", "[", "0", "]", ",", "Section", ")", ":", "# list", "\n", "            ", "assert", "isinstance", "(", "sections", "[", "0", "]", ",", "list", ")", "or", "isinstance", "(", "sections", "[", "0", "]", ",", "tuple", ")", "\n", "new_sections", "=", "[", "]", "\n", "for", "section", "in", "sections", ":", "\n", "                ", "new_section", "=", "Section", "(", "name", "=", "section", "[", "0", "]", ",", "num_items", "=", "section", "[", "1", "]", ")", "\n", "new_sections", ".", "append", "(", "new_section", ")", "\n", "", "", "sections", "=", "new_sections", "\n", "self", ".", "sections", "=", "sections", "\n", "\n", "self", ".", "relations2id", "=", "relations2id", "\n", "self", ".", "item_num", "=", "sum", "(", "section", ".", "num_items", "for", "section", "in", "sections", ")", "\n", "\n", "self", ".", "section_ind2graph_ind", "=", "{", "}", "\n", "self", ".", "graph_ind2section_ind", "=", "{", "}", "\n", "base", "=", "0", "\n", "for", "section", "in", "sections", ":", "\n", "            ", "for", "i", "in", "range", "(", "section", ".", "num_items", ")", ":", "\n", "                ", "self", ".", "section_ind2graph_ind", "[", "(", "section", ".", "name", ",", "i", ")", "]", "=", "base", "\n", "self", ".", "graph_ind2section_ind", "[", "base", "]", "=", "(", "section", ".", "name", ",", "i", ")", "\n", "base", "+=", "1", "\n", "\n", "", "", "self", ".", "graph", "=", "np", ".", "full", "(", "(", "self", ".", "item_num", ",", "self", ".", "item_num", ")", ",", "-", "1", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.knowledge_graph.KnowledgeGraph.add_relations_to_graph": [[38, 55], ["re.match", "re.match.groups", "Exception"], "methods", ["None"], ["", "def", "add_relations_to_graph", "(", "self", ",", "link_dic", ":", "Dict", ")", ":", "\n", "        ", "\"\"\"\n        Relation name should follow the template: \n        section1-section2:relation_name, like question-column:ColumnExactMatch\n        \"\"\"", "\n", "for", "link_name", "in", "link_dic", ":", "\n", "            ", "_match", "=", "re", ".", "match", "(", "r\"(.*)-(.*):(.*)\"", ",", "link_name", ")", "\n", "if", "_match", "is", "None", ":", "\n", "                ", "raise", "Exception", "(", "f\"Relation name {link_name} format is wrong\"", ")", "\n", "", "section1", ",", "section2", ",", "relation_name", "=", "_match", ".", "groups", "(", ")", "\n", "assert", "link_name", "in", "self", ".", "relations2id", "\n", "\n", "for", "item_pair", "in", "link_dic", "[", "link_name", "]", ":", "\n", "                ", "item1_ind", ",", "item2_ind", "=", "item_pair", "\n", "graph_ind1", "=", "self", ".", "section_ind2graph_ind", "[", "(", "section1", ",", "item1_ind", ")", "]", "\n", "graph_ind2", "=", "self", ".", "section_ind2graph_ind", "[", "(", "section2", ",", "item2_ind", ")", "]", "\n", "self", ".", "graph", "[", "graph_ind1", ",", "graph_ind2", "]", "=", "self", ".", "relations2id", "[", "link_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.knowledge_graph.KnowledgeGraph._fill_graph_with_defaults": [[56, 65], ["range", "range"], "methods", ["None"], ["", "", "", "def", "_fill_graph_with_defaults", "(", "self", ")", ":", "\n", "        ", "row_num", ",", "col_num", "=", "self", ".", "graph", ".", "shape", "\n", "for", "i", "in", "range", "(", "row_num", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "col_num", ")", ":", "\n", "                ", "if", "self", ".", "graph", "[", "i", ",", "j", "]", "==", "-", "1", ":", "\n", "                    ", "s1_name", ",", "_", "=", "self", ".", "graph_ind2section_ind", "[", "i", "]", "\n", "s2_name", ",", "_", "=", "self", ".", "graph_ind2section_ind", "[", "j", "]", "\n", "default_r", "=", "f\"{s1_name}:{s2_name}-default\"", "\n", "self", ".", "graph", "[", "i", ",", "j", "]", "=", "self", ".", "relations2id", "[", "default_r", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.knowledge_graph.KnowledgeGraph.get_relation_graph": [[66, 69], ["knowledge_graph.KnowledgeGraph._fill_graph_with_defaults"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.knowledge_graph.KnowledgeGraph._fill_graph_with_defaults"], ["", "", "", "", "def", "get_relation_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "_fill_graph_with_defaults", "(", ")", "\n", "return", "self", ".", "graph", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.overnight_context.OvernightContext.__init__": [[11, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "schema", ")", "->", "None", ":", "\n", "        ", "self", ".", "schema", "=", "schema", "\n", "self", ".", "_schema_relations", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.overnight_context.OvernightContext.compute_schema_linking": [[15, 45], ["collections.defaultdict", "dict", "enumerate", "overnight_context.OvernightContext.remove_duplicates", "range", "len", "overnight_context.OvernightContext.exact_match", "overnight_context.OvernightContext.partial_match", "len", "n_gram.strip", "range", "range", "relations[].append", "relations[].append", "relations[].append", "relations[].append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext.remove_duplicates", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.exact_match", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.partial_match", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "compute_schema_linking", "(", "self", ",", "question", ")", ":", "\n", "        ", "relations", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "\n", "col_id2list", "=", "dict", "(", ")", "\n", "for", "col_id", ",", "col_item", "in", "enumerate", "(", "self", ".", "schema", "[", "\"columns\"", "]", ")", ":", "\n", "            ", "col_id2list", "[", "col_id", "]", "=", "col_item", "\n", "\n", "# 5-gram", "\n", "", "n", "=", "5", "\n", "while", "n", ">", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "question", ")", "-", "n", "+", "1", ")", ":", "\n", "                ", "n_gram_list", "=", "question", "[", "i", ":", "i", "+", "n", "]", "\n", "n_gram", "=", "\" \"", ".", "join", "(", "n_gram_list", ")", "\n", "if", "len", "(", "n_gram", ".", "strip", "(", ")", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "# exact match case", "\n", "", "for", "col_id", "in", "col_id2list", ":", "\n", "                    ", "if", "self", ".", "exact_match", "(", "n_gram_list", ",", "col_id2list", "[", "col_id", "]", ")", ":", "\n", "                        ", "for", "q_id", "in", "range", "(", "i", ",", "i", "+", "n", ")", ":", "\n", "                            ", "relations", "[", "\"q-col:EM\"", "]", ".", "append", "(", "(", "q_id", ",", "col_id", ")", ")", "\n", "relations", "[", "\"col-q:EM\"", "]", ".", "append", "(", "(", "col_id", ",", "q_id", ")", ")", "\n", "\n", "# partial match case", "\n", "", "", "", "for", "col_id", "in", "col_id2list", ":", "\n", "                    ", "if", "self", ".", "partial_match", "(", "n_gram_list", ",", "col_id2list", "[", "col_id", "]", ")", ":", "\n", "                        ", "for", "q_id", "in", "range", "(", "i", ",", "i", "+", "n", ")", ":", "\n", "                            ", "relations", "[", "f\"q-col:PM\"", "]", ".", "append", "(", "(", "q_id", ",", "col_id", ")", ")", "\n", "relations", "[", "f\"col-q:PM\"", "]", ".", "append", "(", "(", "col_id", ",", "q_id", ")", ")", "\n", "", "", "", "", "n", "-=", "1", "\n", "", "return", "self", ".", "remove_duplicates", "(", "relations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.overnight_context.OvernightContext.compute_cell_value_linking": [[46, 76], ["collections.defaultdict", "dict", "enumerate", "overnight_context.OvernightContext.remove_duplicates", "range", "len", "overnight_context.OvernightContext.exact_match", "overnight_context.OvernightContext.partial_match", "len", "n_gram.strip", "range", "range", "relations[].append", "relations[].append", "relations[].append", "relations[].append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext.remove_duplicates", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.exact_match", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.partial_match", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "compute_cell_value_linking", "(", "self", ",", "question", ")", ":", "\n", "        ", "relations", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "\n", "col_id2list", "=", "dict", "(", ")", "\n", "for", "col_id", ",", "col_item", "in", "enumerate", "(", "self", ".", "schema", "[", "\"values\"", "]", ")", ":", "\n", "            ", "col_id2list", "[", "col_id", "]", "=", "col_item", "\n", "\n", "# 5-gram", "\n", "", "n", "=", "5", "\n", "while", "n", ">", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "question", ")", "-", "n", "+", "1", ")", ":", "\n", "                ", "n_gram_list", "=", "question", "[", "i", ":", "i", "+", "n", "]", "\n", "n_gram", "=", "\" \"", ".", "join", "(", "n_gram_list", ")", "\n", "if", "len", "(", "n_gram", ".", "strip", "(", ")", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "# exact match case", "\n", "", "for", "col_id", "in", "col_id2list", ":", "\n", "                    ", "if", "self", ".", "exact_match", "(", "n_gram_list", ",", "col_id2list", "[", "col_id", "]", ")", ":", "\n", "                        ", "for", "q_id", "in", "range", "(", "i", ",", "i", "+", "n", ")", ":", "\n", "                            ", "relations", "[", "\"q-val:EM\"", "]", ".", "append", "(", "(", "q_id", ",", "col_id", ")", ")", "\n", "relations", "[", "\"val-q:EM\"", "]", ".", "append", "(", "(", "col_id", ",", "q_id", ")", ")", "\n", "\n", "# partial match case", "\n", "", "", "", "for", "col_id", "in", "col_id2list", ":", "\n", "                    ", "if", "self", ".", "partial_match", "(", "n_gram_list", ",", "col_id2list", "[", "col_id", "]", ")", ":", "\n", "                        ", "for", "q_id", "in", "range", "(", "i", ",", "i", "+", "n", ")", ":", "\n", "                            ", "relations", "[", "f\"q-val:PM\"", "]", ".", "append", "(", "(", "q_id", ",", "col_id", ")", ")", "\n", "relations", "[", "f\"val-q:PM\"", "]", ".", "append", "(", "(", "col_id", ",", "q_id", ")", ")", "\n", "", "", "", "", "n", "-=", "1", "\n", "", "return", "self", ".", "remove_duplicates", "(", "relations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.overnight_context.OvernightContext.compute_schema_relations": [[77, 93], ["collections.defaultdict", "relations[].append", "relations[].append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "compute_schema_relations", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_schema_relations", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_schema_relations", "\n", "", "relations", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "schema_relation", "=", "self", ".", "schema", "[", "\"schema_relations\"", "]", "\n", "for", "relation", "in", "schema_relation", ":", "\n", "            ", "ent_1_type", ",", "ent_1_id", ",", "r_name", ",", "ent_2_type", ",", "ent_2_id", "=", "relation", "\n", "trans_dic", "=", "{", "\"val\"", ":", "\"val\"", ",", "\"prop\"", ":", "\"col\"", "}", "\n", "relations", "[", "\n", "f\"{trans_dic[ent_1_type]}-{trans_dic[ent_2_type]}:{r_name}\"", "\n", "]", ".", "append", "(", "(", "ent_1_id", ",", "ent_2_id", ")", ")", "\n", "relations", "[", "\n", "f\"{trans_dic[ent_2_type]}-{trans_dic[ent_1_type]}:!{r_name}\"", "\n", "]", ".", "append", "(", "(", "ent_2_id", ",", "ent_1_id", ")", ")", "\n", "", "self", ".", "_schema_relations", "=", "relations", "\n", "return", "relations", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.overnight_context.OvernightContext.remove_duplicates": [[94, 100], ["list", "set"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set"], ["", "@", "staticmethod", "\n", "def", "remove_duplicates", "(", "relations", ")", ":", "\n", "        ", "new_relations", "=", "{", "}", "\n", "for", "relation", "in", "relations", ":", "\n", "            ", "new_relations", "[", "relation", "]", "=", "list", "(", "set", "(", "relations", "[", "relation", "]", ")", ")", "\n", "", "return", "new_relations", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.overnight_context.OvernightContext.get_default_relations": [[101, 108], ["set", "set.add", "itertools.product", "set.add"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add"], ["", "@", "staticmethod", "\n", "def", "get_default_relations", "(", ")", ":", "\n", "        ", "default_rs", "=", "set", "(", ")", "\n", "default_rs", ".", "add", "(", "\"x-x:default\"", ")", "\n", "for", "s1", ",", "s2", "in", "itertools", ".", "product", "(", "(", "\"q\"", ",", "\"val\"", ",", "\"col\"", ")", ",", "repeat", "=", "2", ")", ":", "\n", "            ", "default_rs", ".", "add", "(", "\"{}:{}-default\"", ".", "format", "(", "s1", ",", "s2", ")", ")", "\n", "", "return", "default_rs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext.__init__": [[23, 33], ["spider_context.SpiderContext.preprocess_schema", "[].startswith"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext.preprocess_schema"], ["    ", "def", "__init__", "(", "self", ",", "schema", ",", "word_emb", ",", "db_path", ")", "->", "None", ":", "\n", "        ", "self", ".", "schema", "=", "schema", "\n", "self", ".", "word_emb", "=", "word_emb", "\n", "preproc_schema", "=", "self", ".", "preprocess_schema", "(", "self", ".", "schema", ")", "\n", "self", ".", "preproc_schema", "=", "preproc_schema", "\n", "assert", "preproc_schema", ".", "column_names", "[", "0", "]", "[", "0", "]", ".", "startswith", "(", "\"<type:\"", ")", "\n", "self", ".", "columns", "=", "[", "col", "[", "1", ":", "]", "for", "col", "in", "preproc_schema", ".", "column_names", "]", "\n", "self", ".", "tables", "=", "preproc_schema", ".", "table_names", "\n", "\n", "self", ".", "db_dir", "=", "db_path", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext._tokenize": [[34, 38], ["spider_context.SpiderContext.word_emb.tokenize"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEncPreproc.tokenize"], ["", "def", "_tokenize", "(", "self", ",", "presplit", ",", "unsplit", ")", ":", "\n", "        ", "if", "self", ".", "word_emb", ":", "\n", "            ", "return", "self", ".", "word_emb", ".", "tokenize", "(", "unsplit", ")", "\n", "", "return", "presplit", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext.preprocess_schema": [[39, 80], ["spider_context.PreprocessedSchema", "enumerate", "PreprocessedSchema.table_bounds.append", "enumerate", "tensor2struct.utils.serialization.to_dict_with_sorted_values", "spider_context.SpiderContext._tokenize", "PreprocessedSchema.column_names.append", "len", "len", "spider_context.SpiderContext._tokenize", "PreprocessedSchema.table_names.append", "PreprocessedSchema.table_to_columns.setdefault", "PreprocessedSchema.table_to_columns.setdefault.append", "PreprocessedSchema.table_bounds.append", "PreprocessedSchema.foreign_keys_tables[].add", "len", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.serialization.to_dict_with_sorted_values", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext._tokenize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext._tokenize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.setdefault", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add"], ["", "def", "preprocess_schema", "(", "self", ",", "schema", ")", ":", "\n", "        ", "r", "=", "PreprocessedSchema", "(", ")", "\n", "last_table_id", "=", "None", "\n", "for", "i", ",", "column", "in", "enumerate", "(", "schema", ".", "columns", ")", ":", "\n", "            ", "col_toks", "=", "self", ".", "_tokenize", "(", "column", ".", "name", ",", "column", ".", "unsplit_name", ")", "\n", "\n", "# assert column.type in [\"text\", \"number\", \"time\", \"boolean\", \"others\"]", "\n", "type_tok", "=", "\"<type: {}>\"", ".", "format", "(", "column", ".", "type", ")", "\n", "column_name", "=", "[", "type_tok", "]", "+", "col_toks", "\n", "r", ".", "column_names", ".", "append", "(", "column_name", ")", "\n", "\n", "table_id", "=", "None", "if", "column", ".", "table", "is", "None", "else", "column", ".", "table", ".", "id", "\n", "r", ".", "column_to_table", "[", "str", "(", "i", ")", "]", "=", "table_id", "\n", "if", "table_id", "is", "not", "None", ":", "\n", "                ", "columns", "=", "r", ".", "table_to_columns", ".", "setdefault", "(", "str", "(", "table_id", ")", ",", "[", "]", ")", "\n", "columns", ".", "append", "(", "i", ")", "\n", "", "if", "last_table_id", "!=", "table_id", ":", "\n", "                ", "r", ".", "table_bounds", ".", "append", "(", "i", ")", "\n", "last_table_id", "=", "table_id", "\n", "\n", "", "if", "column", ".", "foreign_key_for", "is", "not", "None", ":", "\n", "                ", "r", ".", "foreign_keys", "[", "str", "(", "column", ".", "id", ")", "]", "=", "column", ".", "foreign_key_for", ".", "id", "\n", "r", ".", "foreign_keys_tables", "[", "str", "(", "column", ".", "table", ".", "id", ")", "]", ".", "add", "(", "\n", "column", ".", "foreign_key_for", ".", "table", ".", "id", "\n", ")", "\n", "\n", "", "", "r", ".", "table_bounds", ".", "append", "(", "len", "(", "schema", ".", "columns", ")", ")", "\n", "assert", "len", "(", "r", ".", "table_bounds", ")", "==", "len", "(", "schema", ".", "tables", ")", "+", "1", "\n", "\n", "for", "i", ",", "table", "in", "enumerate", "(", "schema", ".", "tables", ")", ":", "\n", "            ", "table_toks", "=", "self", ".", "_tokenize", "(", "table", ".", "name", ",", "table", ".", "unsplit_name", ")", "\n", "r", ".", "table_names", ".", "append", "(", "table_toks", ")", "\n", "\n", "", "r", ".", "foreign_keys_tables", "=", "serialization", ".", "to_dict_with_sorted_values", "(", "\n", "r", ".", "foreign_keys_tables", "\n", ")", "\n", "r", ".", "primary_keys", "=", "[", "\n", "column", ".", "id", "for", "table", "in", "schema", ".", "tables", "for", "column", "in", "table", ".", "primary_keys", "\n", "]", "\n", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext.compute_schema_linking": [[81, 128], ["collections.defaultdict", "dict", "enumerate", "dict", "enumerate", "spider_context.SpiderContext.remove_duplicates", "range", "len", "spider_context.SpiderContext.exact_match", "spider_context.SpiderContext.exact_match", "spider_context.SpiderContext.partial_match", "spider_context.SpiderContext.partial_match", "len", "n_gram.strip", "range", "range", "range", "range", "relations[].append", "relations[].append", "relations[].append", "relations[].append", "relations[].append", "relations[].append", "relations[].append", "relations[].append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext.remove_duplicates", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.exact_match", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.exact_match", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.partial_match", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.partial_match", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "compute_schema_linking", "(", "self", ",", "question", ")", ":", "\n", "        ", "column", ",", "table", "=", "self", ".", "columns", ",", "self", ".", "tables", "\n", "relations", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "\n", "col_id2list", "=", "dict", "(", ")", "\n", "for", "col_id", ",", "col_item", "in", "enumerate", "(", "column", ")", ":", "\n", "            ", "if", "col_id", "==", "0", ":", "\n", "                ", "continue", "\n", "", "col_id2list", "[", "col_id", "]", "=", "col_item", "\n", "\n", "", "tab_id2list", "=", "dict", "(", ")", "\n", "for", "tab_id", ",", "tab_item", "in", "enumerate", "(", "table", ")", ":", "\n", "            ", "tab_id2list", "[", "tab_id", "]", "=", "tab_item", "\n", "\n", "# 5-gram", "\n", "", "n", "=", "5", "\n", "while", "n", ">", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "question", ")", "-", "n", "+", "1", ")", ":", "\n", "                ", "n_gram_list", "=", "question", "[", "i", ":", "i", "+", "n", "]", "\n", "n_gram", "=", "\" \"", ".", "join", "(", "n_gram_list", ")", "\n", "if", "len", "(", "n_gram", ".", "strip", "(", ")", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "# exact match case", "\n", "", "for", "col_id", "in", "col_id2list", ":", "\n", "                    ", "if", "self", ".", "exact_match", "(", "n_gram_list", ",", "col_id2list", "[", "col_id", "]", ")", ":", "\n", "                        ", "for", "q_id", "in", "range", "(", "i", ",", "i", "+", "n", ")", ":", "\n", "                            ", "relations", "[", "\"q-col:CEM\"", "]", ".", "append", "(", "(", "q_id", ",", "col_id", ")", ")", "\n", "relations", "[", "\"col-q:CEM\"", "]", ".", "append", "(", "(", "col_id", ",", "q_id", ")", ")", "\n", "", "", "", "for", "tab_id", "in", "tab_id2list", ":", "\n", "                    ", "if", "self", ".", "exact_match", "(", "n_gram_list", ",", "tab_id2list", "[", "tab_id", "]", ")", ":", "\n", "                        ", "for", "q_id", "in", "range", "(", "i", ",", "i", "+", "n", ")", ":", "\n", "                            ", "relations", "[", "\"q-tab:TEM\"", "]", ".", "append", "(", "(", "q_id", ",", "tab_id", ")", ")", "\n", "relations", "[", "\"tab-q:TEM\"", "]", ".", "append", "(", "(", "tab_id", ",", "q_id", ")", ")", "\n", "\n", "# partial match case", "\n", "", "", "", "for", "col_id", "in", "col_id2list", ":", "\n", "                    ", "if", "self", ".", "partial_match", "(", "n_gram_list", ",", "col_id2list", "[", "col_id", "]", ")", ":", "\n", "                        ", "for", "q_id", "in", "range", "(", "i", ",", "i", "+", "n", ")", ":", "\n", "                            ", "relations", "[", "f\"q-col:CPM\"", "]", ".", "append", "(", "(", "q_id", ",", "col_id", ")", ")", "\n", "relations", "[", "f\"col-q:CPM\"", "]", ".", "append", "(", "(", "col_id", ",", "q_id", ")", ")", "\n", "", "", "", "for", "tab_id", "in", "tab_id2list", ":", "\n", "                    ", "if", "self", ".", "partial_match", "(", "n_gram_list", ",", "tab_id2list", "[", "tab_id", "]", ")", ":", "\n", "                        ", "for", "q_id", "in", "range", "(", "i", ",", "i", "+", "n", ")", ":", "\n", "                            ", "relations", "[", "\"q-tab:TPM\"", "]", ".", "append", "(", "(", "q_id", ",", "tab_id", ")", ")", "\n", "relations", "[", "\"tab-q:TPM\"", "]", ".", "append", "(", "(", "tab_id", ",", "q_id", ")", ")", "\n", "", "", "", "", "n", "-=", "1", "\n", "", "return", "self", ".", "remove_duplicates", "(", "relations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext.compute_cell_value_linking": [[129, 164], ["os.path.join", "collections.defaultdict", "enumerate", "spider_context.SpiderContext.remove_duplicates", "spider_context.SpiderContext.isstopword", "spider_context.SpiderContext.isnumber", "enumerate", "len", "word.strip", "spider_context.SpiderContext.db_word_match", "relations[].append", "relations[].append", "relations[].append", "relations[].append", "column.type.upper", "column.type.upper"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext.remove_duplicates", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.isstopword", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.isnumber", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.db_word_match", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "compute_cell_value_linking", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "schema", "=", "self", ".", "schema", "\n", "db_dir", "=", "self", ".", "db_dir", "\n", "\n", "db_name", "=", "schema", ".", "db_id", "\n", "db_path", "=", "os", ".", "path", ".", "join", "(", "db_dir", ",", "db_name", ",", "db_name", "+", "\".sqlite\"", ")", "\n", "\n", "relations", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "q_id", ",", "word", "in", "enumerate", "(", "tokens", ")", ":", "\n", "            ", "if", "len", "(", "word", ".", "strip", "(", ")", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "self", ".", "isstopword", "(", "word", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "num_flag", ",", "_", "=", "self", ".", "isnumber", "(", "word", ")", "\n", "\n", "for", "col_id", ",", "column", "in", "enumerate", "(", "schema", ".", "columns", ")", ":", "\n", "                ", "if", "col_id", "==", "0", ":", "\n", "                    ", "assert", "column", ".", "orig_name", "==", "\"*\"", "\n", "continue", "\n", "\n", "# word is number", "\n", "", "if", "num_flag", ":", "\n", "                    ", "if", "column", ".", "type", "in", "[", "\"number\"", ",", "\"time\"", "]", ":", "# TODO fine-grained date", "\n", "                        ", "relations", "[", "f\"q-col:{column.type.upper()}\"", "]", ".", "append", "(", "(", "q_id", ",", "col_id", ")", ")", "\n", "relations", "[", "f\"col-q:{column.type.upper()}\"", "]", ".", "append", "(", "(", "col_id", ",", "q_id", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "ret", "=", "self", ".", "db_word_match", "(", "\n", "word", ",", "column", ".", "orig_name", ",", "column", ".", "table", ".", "orig_name", ",", "db_path", "\n", ")", "\n", "if", "ret", ":", "\n", "                        ", "relations", "[", "\"q-col:CELLMATCH\"", "]", ".", "append", "(", "(", "q_id", ",", "col_id", ")", ")", "\n", "relations", "[", "\"col-q:CELLMATCH\"", "]", ".", "append", "(", "(", "col_id", ",", "q_id", ")", ")", "\n", "\n", "", "", "", "", "return", "self", ".", "remove_duplicates", "(", "relations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext.compute_schema_relations": [[165, 224], ["collections.defaultdict", "itertools.product", "itertools.product", "itertools.product", "spider_context.SpiderContext.remove_duplicates", "range", "spider_context.SpiderContext.preproc_schema.foreign_keys.get", "range", "range", "spider_context.SpiderContext.compute_schema_relations.match_foreign_key"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext.remove_duplicates", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get"], ["", "def", "compute_schema_relations", "(", "self", ")", ":", "\n", "        ", "relations", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "\n", "for", "col1", ",", "col2", "in", "itertools", ".", "product", "(", "range", "(", "len", "(", "self", ".", "columns", ")", ")", ",", "repeat", "=", "2", ")", ":", "\n", "            ", "if", "col1", "==", "col2", ":", "\n", "                ", "relations", "[", "\"col-col:dist0\"", "]", ".", "append", "(", "(", "col1", ",", "col2", ")", ")", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "preproc_schema", ".", "foreign_keys", ".", "get", "(", "str", "(", "col1", ")", ")", "==", "col2", ":", "\n", "                    ", "relations", "[", "\"col-col:fkey_forward\"", "]", ".", "append", "(", "(", "col1", ",", "col2", ")", ")", "\n", "relations", "[", "\"col-col:fkey_backward\"", "]", ".", "append", "(", "(", "col2", ",", "col1", ")", ")", "\n", "", "elif", "(", "\n", "self", ".", "preproc_schema", ".", "column_to_table", "[", "str", "(", "col1", ")", "]", "\n", "==", "self", ".", "preproc_schema", ".", "column_to_table", "[", "str", "(", "col2", ")", "]", "\n", ")", ":", "\n", "                    ", "relations", "[", "\"col-col:table_match\"", "]", ".", "append", "(", "(", "col1", ",", "col2", ")", ")", "\n", "relations", "[", "\"col-col:table_match\"", "]", ".", "append", "(", "(", "col2", ",", "col1", ")", ")", "\n", "\n", "", "", "", "def", "match_foreign_key", "(", "col", ",", "table", ")", ":", "\n", "            ", "foreign_key_for", "=", "self", ".", "preproc_schema", ".", "foreign_keys", ".", "get", "(", "str", "(", "col", ")", ")", "\n", "if", "foreign_key_for", "is", "None", ":", "\n", "                ", "return", "False", "\n", "", "foreign_table", "=", "self", ".", "preproc_schema", ".", "column_to_table", "[", "str", "(", "foreign_key_for", ")", "]", "\n", "return", "self", ".", "preproc_schema", ".", "column_to_table", "[", "str", "(", "col", ")", "]", "==", "foreign_table", "\n", "\n", "", "for", "col", ",", "tab", "in", "itertools", ".", "product", "(", "\n", "range", "(", "len", "(", "self", ".", "columns", ")", ")", ",", "range", "(", "len", "(", "self", ".", "tables", ")", ")", "\n", ")", ":", "\n", "            ", "if", "match_foreign_key", "(", "col", ",", "tab", ")", ":", "\n", "                ", "relations", "[", "\"col-tab:fkey\"", "]", ".", "append", "(", "(", "col", ",", "tab", ")", ")", "\n", "relations", "[", "\"tab-col:fkey\"", "]", ".", "append", "(", "(", "tab", ",", "col", ")", ")", "\n", "", "_tab", "=", "self", ".", "preproc_schema", ".", "column_to_table", "[", "str", "(", "col", ")", "]", "\n", "if", "_tab", "==", "tab", ":", "\n", "                ", "if", "col", "in", "self", ".", "preproc_schema", ".", "primary_keys", ":", "\n", "                    ", "relations", "[", "\"col-tab:pr_key\"", "]", ".", "append", "(", "(", "col", ",", "tab", ")", ")", "\n", "relations", "[", "\"tab-col:pr_key\"", "]", ".", "append", "(", "(", "tab", ",", "col", ")", ")", "\n", "", "else", ":", "\n", "                    ", "relations", "[", "\"col-tab:table_match\"", "]", ".", "append", "(", "(", "col", ",", "tab", ")", ")", "\n", "relations", "[", "\"tab-col:table_match\"", "]", ".", "append", "(", "(", "tab", ",", "col", ")", ")", "\n", "", "", "if", "_tab", "is", "None", ":", "\n", "                ", "relations", "[", "\"col-tab:any_table\"", "]", ".", "append", "(", "(", "col", ",", "tab", ")", ")", "\n", "relations", "[", "\"tab-col:any_table\"", "]", ".", "append", "(", "(", "tab", ",", "col", ")", ")", "\n", "\n", "", "", "for", "tab1", ",", "tab2", "in", "itertools", ".", "product", "(", "range", "(", "len", "(", "self", ".", "tables", ")", ")", ",", "repeat", "=", "2", ")", ":", "\n", "            ", "if", "tab1", "==", "tab2", ":", "\n", "                ", "relations", "[", "\"tab-tab:dist0\"", "]", ".", "append", "(", "(", "tab1", ",", "tab2", ")", ")", "\n", "", "else", ":", "\n", "                ", "forward", "=", "tab2", "in", "self", ".", "preproc_schema", ".", "foreign_keys_tables", ".", "get", "(", "\n", "str", "(", "tab1", ")", ",", "(", ")", "\n", ")", "\n", "backward", "=", "tab1", "in", "self", ".", "preproc_schema", ".", "foreign_keys_tables", ".", "get", "(", "\n", "str", "(", "tab2", ")", ",", "(", ")", "\n", ")", "\n", "if", "forward", "and", "backward", ":", "\n", "                    ", "relations", "[", "\"tab-tab:fkey_both\"", "]", ".", "append", "(", "(", "tab1", ",", "tab2", ")", ")", "\n", "", "elif", "forward", ":", "\n", "                    ", "relations", "[", "\"tab-tab:fkey_forward\"", "]", ".", "append", "(", "(", "tab1", ",", "tab2", ")", ")", "\n", "", "elif", "backward", ":", "\n", "                    ", "relations", "[", "\"tab-tab:fkey_backward\"", "]", ".", "append", "(", "(", "tab1", ",", "tab2", ")", ")", "\n", "", "", "", "return", "self", ".", "remove_duplicates", "(", "relations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext.remove_duplicates": [[225, 231], ["list", "set"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set"], ["", "@", "staticmethod", "\n", "def", "remove_duplicates", "(", "relations", ")", ":", "\n", "        ", "new_relations", "=", "{", "}", "\n", "for", "relation", "in", "relations", ":", "\n", "            ", "new_relations", "[", "relation", "]", "=", "list", "(", "set", "(", "relations", "[", "relation", "]", ")", ")", "\n", "", "return", "new_relations", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext.get_default_relations": [[232, 239], ["set", "set.add", "itertools.product", "set.add"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add"], ["", "@", "staticmethod", "\n", "def", "get_default_relations", "(", ")", ":", "\n", "        ", "default_rs", "=", "set", "(", ")", "\n", "default_rs", ".", "add", "(", "\"x-x:default\"", ")", "\n", "for", "s1", ",", "s2", "in", "itertools", ".", "product", "(", "(", "\"q\"", ",", "\"col\"", ",", "\"tab\"", ")", ",", "repeat", "=", "2", ")", ":", "\n", "            ", "default_rs", ".", "add", "(", "\"{}:{}-default\"", ".", "format", "(", "s1", ",", "s2", ")", ")", "\n", "", "return", "default_rs", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext.get_column_value_map": [[240, 242], ["None"], "methods", ["None"], ["", "def", "get_column_value_map", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext.get_all_entities": [[243, 245], ["None"], "methods", ["None"], ["", "def", "get_all_entities", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.compute_schema_relations": [[50, 53], ["None"], "methods", ["None"], ["@", "abc", ".", "abstractmethod", "\n", "def", "compute_schema_relations", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.compute_schema_linking": [[54, 57], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "compute_schema_linking", "(", "self", ",", "tokens", ":", "List", ")", "->", "Dict", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.compute_cell_value_linking": [[58, 61], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "compute_cell_value_linking", "(", "self", ",", "tokens", ":", "List", ")", "->", "Dict", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.partial_match": [[62, 76], ["len", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "partial_match", "(", "x_list", ",", "y_list", ")", ":", "\n", "        ", "if", "len", "(", "x_list", ")", "==", "1", "and", "x_list", "[", "0", "]", "in", "STOP_WORDS", ":", "\n", "            ", "return", "False", "\n", "", "if", "len", "(", "x_list", ")", "==", "1", "and", "len", "(", "y_list", ")", "==", "1", ":", "\n", "            ", "return", "False", "\n", "# x_str = \"_\".join([string_utils.normalize_string(x) for x in x_list])", "\n", "# y_str = \"_\".join([string_utils.normalize_string(x) for x in y_list])", "\n", "", "x_str", "=", "\" \"", "+", "\" \"", ".", "join", "(", "x_list", ")", "+", "\" \"", "\n", "y_str", "=", "\" \"", "+", "\" \"", ".", "join", "(", "y_list", ")", "+", "\" \"", "\n", "if", "x_str", "in", "y_str", "and", "x_str", "!=", "y_str", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.exact_match": [[77, 85], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "exact_match", "(", "x_list", ",", "y_list", ")", ":", "\n", "        ", "x_str", "=", "\" \"", ".", "join", "(", "x_list", ")", "\n", "y_str", "=", "\" \"", ".", "join", "(", "y_list", ")", "\n", "if", "x_str", "==", "y_str", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.db_word_match": [[86, 105], ["timeout_decorator.timeout", "sqlite3.connect", "sqlite3.connect.cursor", "sqlite3.connect.cursor.execute", "sqlite3.connect.cursor.fetchall", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.execute"], ["", "", "@", "staticmethod", "\n", "@", "timeout_decorator", ".", "timeout", "(", "15", ")", "\n", "def", "db_word_match", "(", "word", ",", "column", ",", "table", ",", "db_path", ")", ":", "\n", "        ", "\"\"\"\n        The order of decoder matters as staticmethod returns description not functions\n        \"\"\"", "\n", "conn", "=", "sqlite3", ".", "connect", "(", "db_path", ")", "\n", "cursor", "=", "conn", ".", "cursor", "(", ")", "\n", "\n", "p_str", "=", "f\"select {column} from {table} where {column} like '{word} %' or {column} like '% {word}' or {column} like '% {word} %'  or {column} like '{word}'\"", "\n", "try", ":", "\n", "            ", "cursor", ".", "execute", "(", "p_str", ")", "\n", "p_res", "=", "cursor", ".", "fetchall", "(", ")", "\n", "if", "len", "(", "p_res", ")", "==", "0", ":", "\n", "                ", "return", "False", "\n", "", "else", ":", "\n", "                ", "return", "p_res", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.isnumber": [[106, 114], ["word.replace().lower", "float", "word.replace"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "isnumber", "(", "word", ")", ":", "\n", "        ", "text", "=", "word", ".", "replace", "(", "\",\"", ",", "\"\"", ")", ".", "lower", "(", ")", "\n", "try", ":", "\n", "            ", "number", "=", "float", "(", "text", ")", "\n", "return", "True", ",", "number", "\n", "", "except", "ValueError", ":", "\n", "            ", "return", "False", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.isstopword": [[115, 118], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "isstopword", "(", "word", ")", ":", "\n", "        ", "return", "word", "in", "STOP_WORDS", "or", "word", "in", "PUNKS", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.overnight.Stat.__str__": [[17, 32], ["str_builder.append", "str_builder.append", "str_builder.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["def", "__str__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_examples", ">", "0", ":", "\n", "            ", "str_builder", "=", "[", "]", "\n", "str_builder", ".", "append", "(", "\n", "f\"sketch eval: {self.sketch_cor_num/self.num_examples}, {self.sketch_cor_num}/{self.num_examples}\"", "\n", ")", "\n", "str_builder", ".", "append", "(", "\n", "f\"lf eval: {self.lf_cor_num/self.num_examples}, {self.lf_cor_num}/{self.num_examples}\"", "\n", ")", "\n", "str_builder", ".", "append", "(", "\n", "f\"denotation eval: {self.denotation_cor_num/self.num_examples}, {self.denotation_cor_num}/{self.num_examples}\"", "\n", ")", "\n", "return", "\"\\n\"", ".", "join", "(", "str_builder", ")", "\n", "", "else", ":", "\n", "            ", "return", "\"Empty stat\"", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.overnight.Stat.to_dict": [[33, 45], ["None"], "methods", ["None"], ["", "", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_examples", ">", "0", ":", "\n", "            ", "rep", "=", "{", "}", "\n", "rep", "[", "\"sketch_eval\"", "]", "=", "self", ".", "sketch_cor_num", "/", "self", ".", "num_examples", "\n", "rep", "[", "\"sketch_eval_detail\"", "]", "=", "f\"{self.sketch_cor_num}/{self.num_examples}\"", "\n", "rep", "[", "\"lf_accuracy\"", "]", "=", "self", ".", "lf_cor_num", "/", "self", ".", "num_examples", "\n", "rep", "[", "\"lf_eval_detail\"", "]", "=", "f\"{self.lf_cor_num}/{self.num_examples}\"", "\n", "rep", "[", "\"exe_accuracy\"", "]", "=", "self", ".", "denotation_cor_num", "/", "self", ".", "num_examples", "\n", "rep", "[", "\"exe_eval_detail\"", "]", "=", "f\"{self.denotation_cor_num}/{self.num_examples}\"", "\n", "return", "rep", "\n", "", "else", ":", "\n", "            ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.overnight.OvernightDataset.__init__": [[104, 123], ["os.path.basename", "os.path.basename.split", "open", "line.strip().split", "overnight.OvernightDataset.preprocess_lf", "overnight.OvernightItem", "overnight.OvernightDataset.examples.append", "len", "line.strip().split", "line.strip().split", "line.strip", "line.strip", "line.strip"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.overnight.OvernightDataset.preprocess_lf", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["    ", "def", "__init__", "(", "self", ",", "paths", ")", ":", "\n", "        ", "self", ".", "paths", "=", "paths", "\n", "self", ".", "examples", "=", "[", "]", "\n", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "basename", "(", "path", ")", "\n", "domain", "=", "filename", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "assert", "domain", "in", "DOMAINS", "\n", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "for", "line", "in", "f", ":", "\n", "                    ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "len", "(", "items", ")", "==", "3", ":", "\n", "                        ", "question", ",", "lf", ",", "_domain", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "assert", "_domain", "==", "f\"overnight-{domain}\"", "\n", "", "else", ":", "\n", "                        ", "question", ",", "lf", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "", "p_lf", "=", "self", ".", "preprocess_lf", "(", "lf", ")", "\n", "item", "=", "OvernightItem", "(", "question", ",", "p_lf", ",", "domain", ")", "\n", "self", ".", "examples", ".", "append", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.overnight.OvernightDataset.preprocess_lf": [[124, 129], ["lf.replace.replace.replace"], "methods", ["None"], ["", "", "", "", "@", "staticmethod", "\n", "def", "preprocess_lf", "(", "lf", ")", ":", "\n", "# jonathan split it up", "\n", "        ", "lf", "=", "lf", ".", "replace", "(", "\"! \"", ",", "\"!\"", ")", "\n", "return", "lf", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.overnight.OvernightDataset.__len__": [[130, 132], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.overnight.OvernightDataset.__getitem__": [[133, 135], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "examples", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.overnight.execute": [[66, 100], ["os.getcwd", "os.chdir", "tempfile.NamedTemporaryFile", "open", "subprocess.check_output", "tempfile.NamedTemporaryFile.close", "msg.decode.decode", "os.chdir", "overnight.execute.post_process"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode"], ["def", "execute", "(", "lfs", ",", "domain", ",", "eval_path", "=", "\"third_party/overnight\"", ")", ":", "\n", "    ", "def", "post_process", "(", "lf", ")", ":", "\n", "        ", "if", "lf", "is", "None", ":", "\n", "            ", "lf", "=", "\"None\"", "\n", "", "replacements", "=", "[", "(", "\"SW\"", ",", "\"edu.stanford.nlp.sempre.overnight.SimpleWorld\"", ")", "]", "\n", "for", "a", ",", "b", "in", "replacements", ":", "\n", "            ", "lf", "=", "lf", ".", "replace", "(", "a", ",", "b", ")", "\n", "", "return", "lf", "\n", "\n", "", "def", "is_error", "(", "d", ")", ":", "\n", "        ", "return", "\"FAILED\"", "in", "d", "or", "\"Exception\"", "in", "d", "\n", "\n", "", "cur_dir", "=", "os", ".", "getcwd", "(", ")", "\n", "os", ".", "chdir", "(", "eval_path", ")", "\n", "eval_script", "=", "\"./evaluator/overnight\"", "\n", "\n", "tf", "=", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "\".examples\"", ")", "\n", "for", "lf", "in", "lfs", ":", "\n", "        ", "p_lf", "=", "post_process", "(", "lf", ")", "\n", "tf", ".", "write", "(", "str", ".", "encode", "(", "p_lf", "+", "\"\\n\"", ")", ")", "\n", "tf", ".", "flush", "(", ")", "\n", "", "FNULL", "=", "open", "(", "os", ".", "devnull", ",", "\"w\"", ")", "\n", "msg", "=", "subprocess", ".", "check_output", "(", "[", "eval_script", ",", "domain", ",", "tf", ".", "name", "]", ",", "stderr", "=", "FNULL", ")", "\n", "tf", ".", "close", "(", ")", "\n", "msg", "=", "msg", ".", "decode", "(", "\"utf-8\"", ")", "\n", "\n", "denotations", "=", "[", "\n", "line", ".", "split", "(", "\"\\t\"", ")", "[", "1", "]", "\n", "for", "line", "in", "msg", ".", "split", "(", "\"\\n\"", ")", "\n", "if", "line", ".", "startswith", "(", "\"targetValue\\t\"", ")", "\n", "]", "\n", "denotations", "=", "[", "None", "if", "is_error", "(", "d", ")", "else", "d", "for", "d", "in", "denotations", "]", "\n", "os", ".", "chdir", "(", "cur_dir", ")", "\n", "return", "denotations", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.arithmetic.ArithmeticDataset.__init__": [[15, 28], ["open", "line.strip().split", "arithmetic.ArithmeticDataset.examples.append", "list", "list", "list", "arithmetic.ArithmeticItem", "line.strip", "arithmetic.ArithmeticItem"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "mode", ")", ":", "\n", "        ", "self", ".", "examples", "=", "[", "]", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "infix", ",", "postfix", ",", "prefix", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "infix_chars", ",", "prefix_chars", ",", "postfix_chars", "=", "list", "(", "infix", ")", ",", "list", "(", "postfix", ")", ",", "list", "(", "prefix", ")", "\n", "if", "mode", "==", "\"infix2postfix\"", ":", "\n", "                    ", "item", "=", "ArithmeticItem", "(", "infix_chars", ",", "postfix_chars", ")", "\n", "", "elif", "mode", "==", "\"infix2prefix\"", ":", "\n", "                    ", "item", "=", "ArithmeticItem", "(", "infix_chars", ",", "prefix_chars", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "self", ".", "examples", ".", "append", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.arithmetic.ArithmeticDataset.__len__": [[29, 31], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.arithmetic.ArithmeticDataset.__getitem__": [[32, 34], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "examples", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.cogs.Stat.__str__": [[16, 31], ["str_builder.append", "str_builder.append", "str_builder.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["def", "__str__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_examples", ">", "0", ":", "\n", "            ", "str_builder", "=", "[", "]", "\n", "str_builder", ".", "append", "(", "\n", "f\"sketch eval: {self.sketch_cor_num/self.num_examples}, {self.sketch_cor_num}/{self.num_examples}\"", "\n", ")", "\n", "str_builder", ".", "append", "(", "\n", "f\"lf eval: {self.lf_cor_num/self.num_examples}, {self.lf_cor_num}/{self.num_examples}\"", "\n", ")", "\n", "str_builder", ".", "append", "(", "\n", "f\"denotation eval: {self.denotation_cor_num/self.num_examples}, {self.denotation_cor_num}/{self.num_examples}\"", "\n", ")", "\n", "return", "\"\\n\"", ".", "join", "(", "str_builder", ")", "\n", "", "else", ":", "\n", "            ", "return", "\"Empty stat\"", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.cogs.Stat.to_dict": [[32, 44], ["None"], "methods", ["None"], ["", "", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_examples", ">", "0", ":", "\n", "            ", "rep", "=", "{", "}", "\n", "rep", "[", "\"sketch_eval\"", "]", "=", "self", ".", "sketch_cor_num", "/", "self", ".", "num_examples", "\n", "rep", "[", "\"sketch_eval_detail\"", "]", "=", "f\"{self.sketch_cor_num}/{self.num_examples}\"", "\n", "rep", "[", "\"lf_accuracy\"", "]", "=", "self", ".", "lf_cor_num", "/", "self", ".", "num_examples", "\n", "rep", "[", "\"lf_eval_detail\"", "]", "=", "f\"{self.lf_cor_num}/{self.num_examples}\"", "\n", "rep", "[", "\"exe_accuracy\"", "]", "=", "self", ".", "denotation_cor_num", "/", "self", ".", "num_examples", "\n", "rep", "[", "\"exe_eval_detail\"", "]", "=", "f\"{self.denotation_cor_num}/{self.num_examples}\"", "\n", "return", "rep", "\n", "", "else", ":", "\n", "            ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.cogs.CogsDataset.__init__": [[55, 64], ["open", "line.strip().split", "cogs.CogsItem", "cogs.CogsDataset.examples.append", "line.strip"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "self", ".", "examples", "=", "[", "]", "\n", "\n", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "question", ",", "lf", ",", "category", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "item", "=", "CogsItem", "(", "question", ",", "lf", ",", "category", ")", "\n", "self", ".", "examples", ".", "append", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.cogs.CogsDataset.__len__": [[65, 67], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.cogs.CogsDataset.__getitem__": [[68, 70], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "examples", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.cogs.CogsDatasetGrammar.__init__": [[111, 113], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "pass", "", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.scan.ScanDataset.__init__": [[25, 33], ["tensor2struct.languages.dsl.scan.ScanDataset.load_from_txt", "tensor2struct.languages.dsl.scan.ScanDataset.load_from_json"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.scan.ScanDataset.load_from_txt", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.scan.ScanDataset.load_from_json"], ["    ", "def", "__init__", "(", "self", ",", "paths", ")", ":", "\n", "        ", "self", ".", "examples", "=", "[", "]", "\n", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "if", "path", "[", "-", "4", ":", "]", "==", "\".txt\"", ":", "\n", "                ", "self", ".", "examples", "+=", "self", ".", "load_from_txt", "(", "path", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "examples", "+=", "self", ".", "load_from_json", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.scan.ScanDataset.load_from_json": [[34, 45], ["open", "json.load", "tensor2struct.languages.dsl.scan.ScanDataset.normalize", "tensor2struct.languages.dsl.scan.ScanDataset.normalize", "examples.append", "tensor2struct.languages.dsl.scan.ScanItem"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.cogs_pcfg.normalize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.cogs_pcfg.normalize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "", "", "def", "load_from_json", "(", "self", ",", "path", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "f_json", "=", "json", ".", "load", "(", "f", ")", "\n", "for", "item", "in", "f_json", ":", "\n", "                ", "text", "=", "\" \"", ".", "join", "(", "item", "[", "'inp'", "]", ")", "\n", "code", "=", "\" \"", ".", "join", "(", "item", "[", "'out'", "]", ")", "\n", "norm_text", "=", "self", ".", "normalize", "(", "text", ")", "\n", "norm_code", "=", "self", ".", "normalize", "(", "code", ")", "\n", "examples", ".", "append", "(", "ScanItem", "(", "norm_text", ",", "norm_code", ")", ")", "\n", "", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.scan.ScanDataset.load_from_txt": [[46, 55], ["open", "[].split", "tensor2struct.languages.dsl.scan.ScanDataset.normalize", "tensor2struct.languages.dsl.scan.ScanDataset.normalize", "examples.append", "tensor2struct.languages.dsl.scan.ScanItem", "line.strip().split", "line.strip"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.cogs_pcfg.normalize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.cogs_pcfg.normalize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "load_from_txt", "(", "self", ",", "path", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "text", ",", "code", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"IN: \"", ")", "[", "-", "1", "]", ".", "split", "(", "\" OUT: \"", ")", "\n", "norm_code", "=", "self", ".", "normalize", "(", "code", ")", "\n", "norm_text", "=", "self", ".", "normalize", "(", "text", ")", "\n", "examples", ".", "append", "(", "ScanItem", "(", "norm_text", ",", "norm_code", ",", "line", ")", ")", "\n", "", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.scan.ScanDataset.normalize": [[56, 62], ["re.sub", "re.sub"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "normalize", "(", "s", ")", ":", "\n", "# s += '.'", "\n", "        ", "s", "=", "re", ".", "sub", "(", "r\"I_\"", ",", "r\"\"", ",", "s", ")", "\n", "s", "=", "re", ".", "sub", "(", "r\"([.!?])\"", ",", "r\" \\1\"", ",", "s", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.scan.ScanDataset.__len__": [[63, 65], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.scan.ScanDataset.__getitem__": [[66, 68], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "examples", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.scan.ScanGrammarDataset.__init__": [[99, 103], ["tensor2struct.languages.dsl.scan.ScanDataset.__init__", "tensor2struct.languages.dsl.scan.ScanGrammar", "tensor2struct.languages.dsl.scan.ScanGrammarDataset.parse_all_example"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.scan.ScanGrammarDataset.parse_all_example"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "[", "path", "]", ")", "\n", "self", ".", "parser", "=", "scan", ".", "ScanGrammar", "(", ")", "\n", "self", ".", "parse_all_example", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.scan.ScanGrammarDataset.parse_all_example": [[104, 111], ["tqdm.tqdm", "tensor2struct.languages.dsl.scan.ScanGrammarDataset.parser.parse"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse"], ["", "def", "parse_all_example", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Use logical form tokens rather than action sequences\n        \"\"\"", "\n", "for", "example", "in", "tqdm", ".", "tqdm", "(", "self", ".", "examples", ",", "desc", "=", "\"parsing\"", ")", ":", "\n", "            ", "lf", "=", "self", ".", "parser", ".", "parse", "(", "example", ".", "text", ",", "example", ".", "code", ")", "\n", "example", ".", "code", "=", "lf", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.scan.ScanAugDataset.__init__": [[114, 127], ["tensor2struct.languages.dsl.scan.ScanDataset.__init__", "tensor2struct.languages.dsl.scan.ScanAugDataset.generate_aug_example"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.scan.ScanAugDataset.generate_aug_example"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "num_aug", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "[", "path", "]", ")", "\n", "self", ".", "num_aug", "=", "num_aug", "\n", "self", ".", "tag_orig_data", "=", "\"<ORIG>\"", "\n", "self", ".", "tag_aug_data", "=", "\"<AUG>\"", "\n", "self", ".", "tag_aug_token", "=", "\"@\"", "\n", "\n", "# for original data, we tag it so that a model is aware of this", "\n", "for", "example", "in", "self", ".", "examples", ":", "\n", "            ", "example", ".", "text", "=", "f\"{self.tag_orig_data} {example.text}\"", "\n", "\n", "", "if", "num_aug", ":", "\n", "            ", "self", ".", "generate_aug_example", "(", "num_aug", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.scan.ScanAugDataset.generate_aug_example": [[128, 138], ["tensor2struct.languages.dsl.scan.ScanGrammar", "tensor2struct.languages.dsl.scan.ScanGrammar.sample", "tensor2struct.languages.dsl.scan.ScanItem", "tensor2struct.languages.dsl.scan.ScanAugDataset.examples.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.sample", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "", "def", "generate_aug_example", "(", "self", ",", "num_aug", ")", ":", "\n", "        ", "parser", "=", "scan", ".", "ScanGrammar", "(", ")", "\n", "sampled_examples", "=", "parser", ".", "sample", "(", "num_aug", ")", "\n", "\n", "for", "sample_program", ",", "sample_action_seqs", "in", "sampled_examples", ":", "\n", "            ", "aug_tokens", "=", "[", "f\"{self.tag_aug_token}{t}\"", "for", "t", "in", "sample_program", "]", "\n", "program_text", "=", "\" \"", ".", "join", "(", "[", "self", ".", "tag_aug_data", "]", "+", "aug_tokens", ")", "\n", "action_text", "=", "\" \"", ".", "join", "(", "sample_action_seqs", ")", "\n", "aug_example", "=", "ScanItem", "(", "text", "=", "program_text", ",", "code", "=", "action_text", ")", "\n", "self", ".", "examples", ".", "append", "(", "aug_example", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.ssp.SSPDataset.__init__": [[17, 48], ["tensor2struct.datasets.spider.load_tables", "third_party.ssp.schema.get_schemas_from_json", "ssp.SSPDataset.load_examples_by_question_split", "ssp.SSPDataset.load_examples_by_query_split"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.spider.load_tables", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.preprocess.schema.get_schemas_from_json", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.ssp.SSPDataset.load_examples_by_question_split", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.ssp.SSPDataset.load_examples_by_query_split"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "domain", ",", "split", ",", "tables_path", ",", "db_path", ",", "data_split", "=", "\"question\"", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "domain", "=", "domain", "\n", "self", ".", "db_path", "=", "db_path", "\n", "self", ".", "data_split", "=", "data_split", "\n", "\n", "assert", "self", ".", "data_split", "in", "(", "\"question\"", ",", "\"query\"", ",", ")", "\n", "\n", "# 1. whether check execution", "\n", "if", "domain", "in", "[", "\"atis\"", ",", "\"advising\"", "]", ":", "\n", "# execution is very inefficient", "\n", "            ", "self", ".", "check_execution", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "check_execution", "=", "True", "\n", "\n", "# 2. load schema in json format", "\n", "", "self", ".", "schemas", ",", "self", ".", "eval_foreign_key_maps", "=", "spider", ".", "load_tables", "(", "[", "tables_path", "]", ")", "\n", "\n", "# 3. load orig schema", "\n", "(", "self", ".", "orig_schemas", ",", "_", ",", "self", ".", "orig_tables", ",", ")", "=", "schema", ".", "get_schemas_from_json", "(", "\n", "tables_path", "\n", ")", "\n", "\n", "# 4. load examples", "\n", "self", ".", "examples", "=", "[", "]", "\n", "if", "self", ".", "data_split", "==", "\"question\"", ":", "\n", "            ", "self", ".", "load_examples_by_question_split", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "data_split", "==", "\"query\"", "\n", "self", ".", "load_examples_by_query_split", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.ssp.SSPDataset.is_valid_sql": [[49, 60], ["sqlite3.connect", "sqlite3.connect.cursor", "sqlite3.connect.cursor.execute"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.execute"], ["", "", "def", "is_valid_sql", "(", "self", ",", "sql_str", ",", "db_name", ")", ":", "\n", "        ", "import", "sqlite3", "\n", "\n", "db", "=", "self", ".", "db_path", "+", "f\"{db_name}/{db_name}.sqlite\"", "\n", "conn", "=", "sqlite3", ".", "connect", "(", "db", ")", "\n", "cursor", "=", "conn", ".", "cursor", "(", ")", "\n", "try", ":", "\n", "            ", "cursor", ".", "execute", "(", "sql_str", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.ssp.SSPDataset.sql_str_to_json": [[61, 67], ["third_party.ssp.process_sql.get_sql", "third_party.ssp.schema.Schema"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.process_sql.get_sql"], ["", "def", "sql_str_to_json", "(", "self", ",", "sql_str", ",", "db_name", ")", ":", "\n", "        ", "sql_json", "=", "process_sql", ".", "get_sql", "(", "\n", "schema", ".", "Schema", "(", "self", ".", "orig_schemas", "[", "db_name", "]", ",", "self", ".", "orig_tables", "[", "db_name", "]", ",", ")", ",", "\n", "sql_str", ",", "\n", ")", "\n", "return", "sql_json", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.ssp.SSPDataset.load_examples_by_question_split": [[68, 150], ["open", "json.load", "print", "sorted", "ssp.SSPItem", "ssp.SSPDataset.examples.append", "example[].items", "nl.replace.replace.replace", "sql.replace.replace.replace", "ssp.SSPDataset.sql_str_to_json", "ssp.SSPDataset.is_valid_sql", "print", "nl.replace.replace.split", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.ssp.SSPDataset.sql_str_to_json", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.ssp.SSPDataset.is_valid_sql"], ["", "def", "load_examples_by_question_split", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "orig_examples", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "counter_invalid_ex", "=", "0", "\n", "for", "orig_example", "in", "orig_examples", ":", "\n", "            ", "anonymized_sql", "=", "orig_example", "[", "\"sql\"", "]", "[", "0", "]", "\n", "\n", "sql_constants", "=", "{", "}", "\n", "for", "var_dic", "in", "orig_example", "[", "\"variables\"", "]", ":", "\n", "# if var_dic[\"location\"] == \"sql-only\":", "\n", "# \"sql-only\" is not enough", "\n", "                ", "sql_constants", "[", "var_dic", "[", "\"name\"", "]", "]", "=", "var_dic", "[", "\"example\"", "]", "\n", "\n", "", "for", "example", "in", "orig_example", "[", "\"sentences\"", "]", ":", "\n", "                ", "if", "example", "[", "\"question-split\"", "]", "!=", "self", ".", "split", ":", "\n", "                    ", "continue", "\n", "\n", "", "nl", "=", "example", "[", "\"text\"", "]", "\n", "sql", "=", "anonymized_sql", "\n", "\n", "## adapted from https://github.com/alsuhr-c/language/blob/master/language/xsp/data_preprocessing/michigan_preprocessing.py", "\n", "## However, alane's extraction is probably problematic as it does not handle values that not in NL", "\n", "for", "variable_name", ",", "value", "in", "sorted", "(", "\n", "example", "[", "\"variables\"", "]", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "0", "]", ")", ",", "reverse", "=", "True", ",", "\n", ")", ":", "\n", "                    ", "if", "not", "value", ":", "\n", "                        ", "if", "variable_name", "not", "in", "sql_constants", ":", "\n", "# TODO: variable name is empty, not sure why", "\n", "                            ", "continue", "\n", "", "else", ":", "\n", "                            ", "value", "=", "sql_constants", "[", "variable_name", "]", "\n", "\n", "", "", "nl", "=", "nl", ".", "replace", "(", "variable_name", ",", "value", ")", "\n", "sql", "=", "sql", ".", "replace", "(", "variable_name", ",", "value", ")", "\n", "## end adaption", "\n", "\n", "# remove invalid sql", "\n", "", "if", "self", ".", "check_execution", "and", "not", "self", ".", "is_valid_sql", "(", "sql", ",", "self", ".", "domain", ")", ":", "\n", "                    ", "if", "self", ".", "split", "!=", "\"train\"", ":", "\n", "                        ", "print", "(", "f\"Found non-executable programs in {self.split}\"", ")", "\n", "", "else", ":", "\n", "                        ", "counter_invalid_ex", "+=", "1", "\n", "continue", "\n", "\n", "", "", "sql_str", "=", "sql", "\n", "try", ":", "\n", "                    ", "sql_json", "=", "self", ".", "sql_str_to_json", "(", "sql_str", ",", "self", ".", "domain", ")", "\n", "is_sql_json_valid", "=", "True", "\n", "", "except", "Exception", "as", "e", ":", "\n", "# TODO: fix process_sql", "\n", "                    ", "if", "self", ".", "split", "==", "\"train\"", ":", "\n", "                        ", "counter_invalid_ex", "+=", "1", "\n", "continue", "\n", "", "else", ":", "\n", "                        ", "sql_json", "=", "{", "\n", "\"except\"", ":", "None", ",", "\n", "\"from\"", ":", "{", "\"conds\"", ":", "[", "]", ",", "\"table_units\"", ":", "[", "]", "}", ",", "\n", "\"groupBy\"", ":", "[", "]", ",", "\n", "\"having\"", ":", "[", "]", ",", "\n", "\"intersect\"", ":", "None", ",", "\n", "\"limit\"", ":", "None", ",", "\n", "\"orderBy\"", ":", "[", "]", ",", "\n", "\"select\"", ":", "[", "False", ",", "[", "]", "]", ",", "\n", "\"union\"", ":", "None", ",", "\n", "\"where\"", ":", "[", "]", ",", "\n", "}", "\n", "is_sql_json_valid", "=", "False", "\n", "\n", "", "", "item", "=", "SSPItem", "(", "\n", "text", "=", "nl", ".", "split", "(", "\" \"", ")", ",", "\n", "code", "=", "sql_json", ",", "\n", "schema", "=", "self", ".", "schemas", "[", "self", ".", "domain", "]", ",", "\n", "orig", "=", "{", "\"query\"", ":", "sql_str", ",", "\"question\"", ":", "nl", "}", ",", "\n", "orig_schema", "=", "self", ".", "schemas", "[", "self", ".", "domain", "]", ".", "orig", ",", "\n", "is_sql_json_valid", "=", "is_sql_json_valid", ",", "\n", ")", "\n", "self", ".", "examples", ".", "append", "(", "item", ")", "\n", "\n", "", "", "if", "counter_invalid_ex", ">", "0", ":", "\n", "            ", "print", "(", "\n", "f\"WARNING: {counter_invalid_ex} out of {counter_invalid_ex + len(self.examples)} invalid examples cannot be parsed in {self.split}\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.ssp.SSPDataset.load_examples_by_query_split": [[152, 234], ["open", "json.load", "print", "sorted", "ssp.SSPItem", "ssp.SSPDataset.examples.append", "example[].items", "nl.replace.replace.replace", "sql.replace.replace.replace", "ssp.SSPDataset.sql_str_to_json", "ssp.SSPDataset.is_valid_sql", "print", "nl.replace.replace.split", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.ssp.SSPDataset.sql_str_to_json", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.ssp.SSPDataset.is_valid_sql"], ["", "", "def", "load_examples_by_query_split", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "orig_examples", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "counter_invalid_ex", "=", "0", "\n", "for", "orig_example", "in", "orig_examples", ":", "\n", "            ", "if", "orig_example", "[", "\"query-split\"", "]", "!=", "self", ".", "split", ":", "\n", "                ", "continue", "\n", "\n", "", "anonymized_sql", "=", "orig_example", "[", "\"sql\"", "]", "[", "0", "]", "\n", "\n", "sql_constants", "=", "{", "}", "\n", "for", "var_dic", "in", "orig_example", "[", "\"variables\"", "]", ":", "\n", "# if var_dic[\"location\"] == \"sql-only\":", "\n", "# \"sql-only\" is not enough", "\n", "                ", "sql_constants", "[", "var_dic", "[", "\"name\"", "]", "]", "=", "var_dic", "[", "\"example\"", "]", "\n", "\n", "", "for", "example", "in", "orig_example", "[", "\"sentences\"", "]", ":", "\n", "                ", "nl", "=", "example", "[", "\"text\"", "]", "\n", "sql", "=", "anonymized_sql", "\n", "\n", "## adapted from https://github.com/alsuhr-c/language/blob/master/language/xsp/data_preprocessing/michigan_preprocessing.py", "\n", "## However, alane's extraction is probably problematic as it does not handle values that not in NL", "\n", "for", "variable_name", ",", "value", "in", "sorted", "(", "\n", "example", "[", "\"variables\"", "]", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "0", "]", ")", ",", "reverse", "=", "True", ",", "\n", ")", ":", "\n", "                    ", "if", "not", "value", ":", "\n", "                        ", "if", "variable_name", "not", "in", "sql_constants", ":", "\n", "# TODO: variable name is empty, not sure why", "\n", "                            ", "continue", "\n", "", "else", ":", "\n", "                            ", "value", "=", "sql_constants", "[", "variable_name", "]", "\n", "\n", "", "", "nl", "=", "nl", ".", "replace", "(", "variable_name", ",", "value", ")", "\n", "sql", "=", "sql", ".", "replace", "(", "variable_name", ",", "value", ")", "\n", "## end adaption", "\n", "\n", "# remove invalid sql", "\n", "", "if", "self", ".", "check_execution", "and", "not", "self", ".", "is_valid_sql", "(", "sql", ",", "self", ".", "domain", ")", ":", "\n", "                    ", "if", "self", ".", "split", "!=", "\"train\"", ":", "\n", "                        ", "print", "(", "f\"Found non-executable programs in {self.split}\"", ")", "\n", "", "else", ":", "\n", "                        ", "counter_invalid_ex", "+=", "1", "\n", "continue", "\n", "\n", "", "", "sql_str", "=", "sql", "\n", "try", ":", "\n", "                    ", "sql_json", "=", "self", ".", "sql_str_to_json", "(", "sql_str", ",", "self", ".", "domain", ")", "\n", "is_sql_json_valid", "=", "True", "\n", "", "except", "Exception", "as", "e", ":", "\n", "# TODO: fix process_sql", "\n", "                    ", "if", "self", ".", "split", "==", "\"train\"", ":", "\n", "                        ", "counter_invalid_ex", "+=", "1", "\n", "continue", "\n", "", "else", ":", "\n", "                        ", "sql_json", "=", "{", "\n", "\"except\"", ":", "None", ",", "\n", "\"from\"", ":", "{", "\"conds\"", ":", "[", "]", ",", "\"table_units\"", ":", "[", "]", "}", ",", "\n", "\"groupBy\"", ":", "[", "]", ",", "\n", "\"having\"", ":", "[", "]", ",", "\n", "\"intersect\"", ":", "None", ",", "\n", "\"limit\"", ":", "None", ",", "\n", "\"orderBy\"", ":", "[", "]", ",", "\n", "\"select\"", ":", "[", "False", ",", "[", "]", "]", ",", "\n", "\"union\"", ":", "None", ",", "\n", "\"where\"", ":", "[", "]", ",", "\n", "}", "\n", "is_sql_json_valid", "=", "False", "\n", "\n", "", "", "item", "=", "SSPItem", "(", "\n", "text", "=", "nl", ".", "split", "(", "\" \"", ")", ",", "\n", "code", "=", "sql_json", ",", "\n", "schema", "=", "self", ".", "schemas", "[", "self", ".", "domain", "]", ",", "\n", "orig", "=", "{", "\"query\"", ":", "sql_str", ",", "\"question\"", ":", "nl", "}", ",", "\n", "orig_schema", "=", "self", ".", "schemas", "[", "self", ".", "domain", "]", ".", "orig", ",", "\n", "is_sql_json_valid", "=", "is_sql_json_valid", ",", "\n", ")", "\n", "self", ".", "examples", ".", "append", "(", "item", ")", "\n", "\n", "", "", "if", "counter_invalid_ex", ">", "0", ":", "\n", "            ", "print", "(", "\n", "f\"WARNING: {counter_invalid_ex} out of {counter_invalid_ex + len(self.examples)} invalid examples cannot be parsed in {self.split}\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.ssp.SSPDataset.__len__": [[236, 238], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.ssp.SSPDataset.__getitem__": [[239, 241], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "examples", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.spider.SpiderDataset.__init__": [[124, 142], ["spider.load_tables", "json.load", "open", "spider.SpiderItem", "spider.SpiderDataset.examples.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.spider.load_tables", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["    ", "def", "__init__", "(", "self", ",", "paths", ",", "tables_paths", ",", "db_path", ",", "limit", "=", "None", ")", ":", "\n", "        ", "self", ".", "paths", "=", "paths", "\n", "self", ".", "db_path", "=", "db_path", "\n", "self", ".", "examples", "=", "[", "]", "\n", "\n", "self", ".", "schemas", ",", "self", ".", "eval_foreign_key_maps", "=", "load_tables", "(", "tables_paths", ")", "\n", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "raw_data", "=", "json", ".", "load", "(", "open", "(", "path", ")", ")", "\n", "for", "entry", "in", "raw_data", ":", "\n", "                ", "item", "=", "SpiderItem", "(", "\n", "text", "=", "entry", "[", "\"question_toks\"", "]", ",", "\n", "code", "=", "entry", "[", "\"sql\"", "]", ",", "\n", "schema", "=", "self", ".", "schemas", "[", "entry", "[", "\"db_id\"", "]", "]", ",", "\n", "orig", "=", "entry", ",", "\n", "orig_schema", "=", "self", ".", "schemas", "[", "entry", "[", "\"db_id\"", "]", "]", ".", "orig", ",", "\n", ")", "\n", "self", ".", "examples", ".", "append", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.spider.SpiderDataset.__len__": [[143, 145], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.spider.SpiderDataset.__getitem__": [[146, 148], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "examples", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.datasets.spider.load_tables": [[50, 120], ["json.load", "open", "tuple", "tuple", "networkx.DiGraph", "spider.Schema", "third_party.spider.evaluation.build_foreign_key_map", "column.table.primary_keys.append", "nx.DiGraph.add_edge", "nx.DiGraph.add_edge", "spider.Table", "spider.Column", "column.table.columns.append", "enumerate", "enumerate", "name.split", "zip", "col_name.split", "zip"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.spider_eval.build_foreign_key_map", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "load_tables", "(", "paths", ")", ":", "\n", "    ", "schemas", "=", "{", "}", "\n", "eval_foreign_key_maps", "=", "{", "}", "\n", "\n", "for", "path", "in", "paths", ":", "\n", "        ", "schema_dicts", "=", "json", ".", "load", "(", "open", "(", "path", ")", ")", "\n", "for", "schema_dict", "in", "schema_dicts", ":", "\n", "            ", "tables", "=", "tuple", "(", "\n", "Table", "(", "id", "=", "i", ",", "name", "=", "name", ".", "split", "(", ")", ",", "unsplit_name", "=", "name", ",", "orig_name", "=", "orig_name", ",", ")", "\n", "for", "i", ",", "(", "name", ",", "orig_name", ")", "in", "enumerate", "(", "\n", "zip", "(", "schema_dict", "[", "\"table_names\"", "]", ",", "schema_dict", "[", "\"table_names_original\"", "]", ")", "\n", ")", "\n", ")", "\n", "columns", "=", "tuple", "(", "\n", "Column", "(", "\n", "id", "=", "i", ",", "\n", "table", "=", "tables", "[", "table_id", "]", "if", "table_id", ">=", "0", "else", "None", ",", "\n", "name", "=", "col_name", ".", "split", "(", ")", ",", "\n", "unsplit_name", "=", "col_name", ",", "\n", "orig_name", "=", "orig_col_name", ",", "\n", "type", "=", "col_type", ",", "\n", ")", "\n", "for", "i", ",", "(", "\n", "(", "table_id", ",", "col_name", ")", ",", "\n", "(", "_", ",", "orig_col_name", ")", ",", "\n", "col_type", ",", "\n", ")", "in", "enumerate", "(", "\n", "zip", "(", "\n", "schema_dict", "[", "\"column_names\"", "]", ",", "\n", "schema_dict", "[", "\"column_names_original\"", "]", ",", "\n", "schema_dict", "[", "\"column_types\"", "]", ",", "\n", ")", "\n", ")", "\n", ")", "\n", "\n", "# Link columns to tables", "\n", "for", "column", "in", "columns", ":", "\n", "                ", "if", "column", ".", "table", ":", "\n", "                    ", "column", ".", "table", ".", "columns", ".", "append", "(", "column", ")", "\n", "\n", "", "", "for", "column_id", "in", "schema_dict", "[", "\"primary_keys\"", "]", ":", "\n", "# Register primary keys", "\n", "                ", "column", "=", "columns", "[", "column_id", "]", "\n", "column", ".", "table", ".", "primary_keys", ".", "append", "(", "column", ")", "\n", "\n", "", "foreign_key_graph", "=", "nx", ".", "DiGraph", "(", ")", "\n", "for", "source_column_id", ",", "dest_column_id", "in", "schema_dict", "[", "\"foreign_keys\"", "]", ":", "\n", "# Register foreign keys", "\n", "                ", "source_column", "=", "columns", "[", "source_column_id", "]", "\n", "dest_column", "=", "columns", "[", "dest_column_id", "]", "\n", "source_column", ".", "foreign_key_for", "=", "dest_column", "\n", "foreign_key_graph", ".", "add_edge", "(", "\n", "source_column", ".", "table", ".", "id", ",", "\n", "dest_column", ".", "table", ".", "id", ",", "\n", "columns", "=", "(", "source_column_id", ",", "dest_column_id", ")", ",", "\n", ")", "\n", "foreign_key_graph", ".", "add_edge", "(", "\n", "dest_column", ".", "table", ".", "id", ",", "\n", "source_column", ".", "table", ".", "id", ",", "\n", "columns", "=", "(", "dest_column_id", ",", "source_column_id", ")", ",", "\n", ")", "\n", "\n", "", "db_id", "=", "schema_dict", "[", "\"db_id\"", "]", "\n", "assert", "db_id", "not", "in", "schemas", "\n", "schemas", "[", "db_id", "]", "=", "Schema", "(", "\n", "db_id", ",", "tables", ",", "columns", ",", "foreign_key_graph", ",", "schema_dict", "\n", ")", "\n", "eval_foreign_key_maps", "[", "db_id", "]", "=", "evaluation", ".", "build_foreign_key_map", "(", "schema_dict", ")", "\n", "\n", "", "", "return", "schemas", ",", "eval_foreign_key_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.__init__": [[134, 204], ["sorted", "sorted", "overnight_language.LambdaDCS.get_schema_relations", "overnight_language.LambdaDCS.get_schema_lexicons", "tensor2struct.languages.dsl.domain_language.PredicateType.get_type", "overnight_language.LambdaDCS.add_constant", "sorted.append", "overnight_language.LambdaDCS.add_constant", "overnight_language.LambdaDCS.add_constant", "sorted.append", "overnight_language.LambdaDCS.add_constant", "sorted.append", "overnight_language.LambdaDCS.add_constant", "_g_cache.append", "overnight_language.LambdaDCS.add_constant", "_g_cache.append", "overnight_language.LambdaDCS.add_constant", "_g_cache.append", "v.split", "overnight_language.LambdaDCS.norm_value", "overnight_language.LambdaDCS.add_constant", "overnight_language.LambdaDCS.add_constant", "overnight_language.LambdaDCS.add_constant", "sorted.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.get_schema_relations", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.get_schema_lexicons", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.PredicateType.get_type", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.add_constant", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.add_constant", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.add_constant", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.add_constant", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.add_constant", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.add_constant", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.add_constant", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.norm_value", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.add_constant", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.add_constant", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.add_constant", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["def", "__init__", "(", "self", ",", "domain", ")", ":", "\n", "        ", "self", ".", "domain", "=", "domain", "\n", "self", ".", "_general_function_types", "=", "_general_function_types", "\n", "\n", "self", ".", "_functions", "=", "_general_functions", "\n", "self", ".", "_function_types", "=", "_general_function_types", "\n", "self", ".", "_start_types", "=", "{", "PredicateType", ".", "get_type", "(", "List", "[", "Value", "]", ")", "}", "\n", "self", ".", "_nonterminal_productions", "=", "None", "\n", "\n", "# function values of the terminal function will be used for denormalization", "\n", "_value_cache", "=", "[", "]", "\n", "value_dict", "=", "self", ".", "overnight_rules", "[", "\"domain_terminals\"", "]", "[", "domain", "]", "[", "\"value\"", "]", "\n", "for", "v", "in", "value_dict", "[", "\"singleton\"", "]", ":", "\n", "            ", "self", ".", "add_constant", "(", "v", ",", "v", ",", "type_", "=", "SingletonValue", ")", "\n", "_value_cache", ".", "append", "(", "(", "v", ",", "v", ")", ")", "\n", "", "for", "v", "in", "value_dict", "[", "\"entity\"", "]", ":", "\n", "            ", "self", ".", "add_constant", "(", "v", ",", "v", ",", "type_", "=", "EntityValue", ")", "\n", "self", ".", "add_constant", "(", "v", ",", "v", ",", "type_", "=", "Value", ")", "\n", "_value_cache", ".", "append", "(", "(", "v", ",", "v", ")", ")", "\n", "", "self", ".", "t_classes", "=", "{", "\"number\"", ":", "NumberValue", ",", "\"time\"", ":", "TimeValue", ",", "\"date\"", ":", "DateValue", "}", "\n", "for", "t_type", "in", "self", ".", "t_classes", ":", "\n", "            ", "if", "t_type", "in", "value_dict", ":", "\n", "                ", "for", "v", "in", "value_dict", "[", "t_type", "]", ":", "\n", "                    ", "items", "=", "v", ".", "split", "(", ")", "\n", "assert", "items", "[", "0", "]", "==", "t_type", "\n", "orig_v", "=", "f\"( {v} )\"", "\n", "real_v", "=", "\" \"", ".", "join", "(", "items", "[", "1", ":", "]", ")", "\n", "norm_v", "=", "self", ".", "norm_value", "(", "real_v", ")", "\n", "self", ".", "add_constant", "(", "norm_v", ",", "orig_v", ",", "type_", "=", "self", ".", "t_classes", "[", "t_type", "]", ")", "\n", "self", ".", "add_constant", "(", "norm_v", ",", "orig_v", ",", "type_", "=", "NumericalValue", ")", "\n", "self", ".", "add_constant", "(", "norm_v", ",", "orig_v", ",", "type_", "=", "Value", ")", "\n", "_value_cache", ".", "append", "(", "(", "v", ",", "norm_v", ")", ")", "\n", "\n", "", "", "", "_property_cache", "=", "[", "]", "\n", "for", "p", "in", "self", ".", "overnight_rules", "[", "\"domain_terminals\"", "]", "[", "domain", "]", "[", "\"property\"", "]", ":", "\n", "            ", "p_func", "=", "f\"( string {p} )\"", "\n", "self", ".", "add_constant", "(", "p", ",", "p_func", ",", "type_", "=", "Property", ")", "\n", "_property_cache", ".", "append", "(", "(", "p", ",", "p", ")", ")", "\n", "\n", "", "_g_cache", "=", "[", "]", "\n", "for", "agg", "in", "self", ".", "overnight_rules", "[", "\"general_terminals\"", "]", "[", "\"agg\"", "]", ":", "\n", "            ", "orig_agg", "=", "f\"( string {agg} )\"", "\n", "self", ".", "add_constant", "(", "agg", ",", "orig_agg", ",", "type_", "=", "Aggregate", ")", "\n", "_g_cache", ".", "append", "(", "agg", ")", "\n", "\n", "", "for", "op", "in", "self", ".", "overnight_rules", "[", "\"general_terminals\"", "]", "[", "\"op\"", "]", ":", "\n", "            ", "orig_op", "=", "f\"( string {op} )\"", "\n", "self", ".", "add_constant", "(", "op", ",", "orig_op", ",", "type_", "=", "Operator", ")", "\n", "_g_cache", ".", "append", "(", "op", ")", "\n", "\n", "# general types are not counting inpoiters", "\n", "", "for", "p", "in", "self", ".", "overnight_rules", "[", "\"general_types\"", "]", ":", "\n", "            ", "p_func", "=", "f\"( string {p} )\"", "\n", "self", ".", "add_constant", "(", "p", ",", "p_func", ",", "type_", "=", "Property", ")", "\n", "_g_cache", ".", "append", "(", "p", ")", "\n", "\n", "# the order matters for schema relation", "\n", "", "_value_cache", "=", "sorted", "(", "_value_cache", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "self", ".", "_values", "=", "[", "x", "[", "0", "]", "for", "x", "in", "_value_cache", "]", "\n", "self", ".", "_ref_values", "=", "[", "x", "[", "1", "]", "for", "x", "in", "_value_cache", "]", "\n", "_property_cache", "=", "sorted", "(", "_property_cache", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "self", ".", "_properties", "=", "[", "x", "[", "0", "]", "for", "x", "in", "_property_cache", "]", "\n", "self", ".", "_ref_properties", "=", "[", "x", "[", "1", "]", "for", "x", "in", "_property_cache", "]", "\n", "\n", "self", ".", "_start_type", "=", "\"List[Value]\"", "\n", "self", ".", "_nonterminal_productions", "=", "None", "\n", "self", ".", "_general_terminals", "=", "_g_cache", "\n", "\n", "self", ".", "_schema_relations", "=", "self", ".", "get_schema_relations", "(", ")", "\n", "self", ".", "_lex_values", ",", "self", ".", "_lex_properties", "=", "self", ".", "get_schema_lexicons", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.add_constant": [[205, 213], ["tensor2struct.languages.dsl.domain_language.PredicateType.get_type", "overnight_language.LambdaDCS._function_types[].append", "type"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.PredicateType.get_type", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "add_constant", "(", "self", ",", "name", ":", "str", ",", "value", ":", "Any", ",", "type_", ":", "Type", "=", "None", ")", ":", "\n", "        ", "value_type", "=", "type_", "if", "type_", "else", "type", "(", "value", ")", "\n", "constant_type", "=", "PredicateType", ".", "get_type", "(", "value_type", ")", "\n", "# avoid duplicates", "\n", "if", "name", "in", "self", ".", "_function_types", "and", "constant_type", "in", "self", ".", "_function_types", "[", "name", "]", ":", "\n", "            ", "return", "\n", "", "self", ".", "_functions", "[", "name", "]", "=", "lambda", ":", "value", "\n", "self", ".", "_function_types", "[", "name", "]", ".", "append", "(", "constant_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.get_non_terminal_productions": [[214, 233], ["collections.defaultdict", "actions[].add", "overnight_language.LambdaDCS._function_types.items", "sorted", "isinstance", "collections.defaultdict.items", "actions[].add", "actions[].add", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add"], ["", "def", "get_non_terminal_productions", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        the original get_nonterminal_productions returns all the productions\n        \"\"\"", "\n", "if", "not", "self", ".", "_nonterminal_productions", ":", "\n", "            ", "actions", "=", "collections", ".", "defaultdict", "(", "set", ")", "\n", "actions", "[", "START_SYMBOL", "]", ".", "add", "(", "f\"{START_SYMBOL} -> {self._start_type}\"", ")", "\n", "for", "name", ",", "function_type_list", "in", "self", ".", "_function_types", ".", "items", "(", ")", ":", "\n", "                ", "for", "function_type", "in", "function_type_list", ":", "\n", "                    ", "if", "isinstance", "(", "function_type", ",", "FunctionType", ")", ":", "\n", "                        ", "actions", "[", "str", "(", "function_type", ")", "]", ".", "add", "(", "f\"{function_type} -> {name}\"", ")", "\n", "return_type", "=", "function_type", ".", "return_type", "\n", "arg_types", "=", "function_type", ".", "argument_types", "\n", "right_side", "=", "f\"[{function_type}, {', '.join(str(arg_type) for arg_type in arg_types)}]\"", "\n", "actions", "[", "str", "(", "return_type", ")", "]", ".", "add", "(", "f\"{return_type} -> {right_side}\"", ")", "\n", "", "", "", "self", ".", "_nonterminal_productions", "=", "{", "\n", "key", ":", "sorted", "(", "value", ")", "for", "key", ",", "value", "in", "actions", ".", "items", "(", ")", "\n", "}", "\n", "", "return", "self", ".", "_nonterminal_productions", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.get_general_terminal_productions": [[234, 243], ["collections.defaultdict", "g_prods[].add", "str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add"], ["", "def", "get_general_terminal_productions", "(", "self", ")", ":", "\n", "        ", "g_prods", "=", "collections", ".", "defaultdict", "(", "set", ")", "\n", "for", "func", "in", "self", ".", "_function_types", ":", "\n", "            ", "if", "func", "in", "self", ".", "_general_terminals", ":", "\n", "                ", "func_types", "=", "self", ".", "_function_types", "[", "func", "]", "\n", "for", "func_type", "in", "func_types", ":", "\n", "                    ", "prod", "=", "f\"{func_type} -> {func}\"", "\n", "g_prods", "[", "str", "(", "func_type", ")", "]", ".", "add", "(", "prod", ")", "\n", "", "", "", "return", "g_prods", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.get_domain_terminal_productions": [[244, 253], ["collections.defaultdict", "d_prods[].add", "str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add"], ["", "def", "get_domain_terminal_productions", "(", "self", ")", ":", "\n", "        ", "d_prods", "=", "collections", ".", "defaultdict", "(", "set", ")", "\n", "for", "func", "in", "self", ".", "_function_types", ":", "\n", "            ", "if", "func", "in", "self", ".", "_ref_values", "or", "func", "in", "self", ".", "_ref_properties", ":", "\n", "                ", "func_types", "=", "self", ".", "_function_types", "[", "func", "]", "\n", "for", "func_type", "in", "func_types", ":", "\n", "                    ", "prod", "=", "f\"{func_type} -> {func}\"", "\n", "d_prods", "[", "str", "(", "func_type", ")", "]", ".", "add", "(", "prod", ")", "\n", "", "", "", "return", "d_prods", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.norm_value": [[254, 258], ["vp.split"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "norm_value", "(", "vp", ":", "str", ")", ":", "\n", "# use '#' to pack and unpack terminals", "\n", "        ", "return", "\"#\"", ".", "join", "(", "vp", ".", "split", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.denorm_value": [[259, 262], ["vp.split"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "denorm_value", "(", "vp", ":", "str", ")", ":", "\n", "        ", "return", "\" \"", ".", "join", "(", "vp", ".", "split", "(", "\"#\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.get_values": [[263, 265], ["None"], "methods", ["None"], ["", "def", "get_values", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_lex_values", ",", "self", ".", "_ref_values", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.get_properties": [[266, 268], ["None"], "methods", ["None"], ["", "def", "get_properties", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_lex_properties", ",", "self", ".", "_ref_properties", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.get_schema_lexicons": [[269, 344], ["logger.info", "os.path.join", "os.path.dirname", "open", "os.path.abspath", "isinstance", "line.strip.strip.strip", "nltk.tree.Tree.fromstring", "overnight_language.LambdaDCS.get_schema_lexicons.node2str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["", "def", "get_schema_lexicons", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "domain", "in", "self", ".", "schema_lexicon_cache", ":", "\n", "            ", "return", "self", ".", "schema_lexicon_cache", "[", "self", ".", "domain", "]", "\n", "", "logger", ".", "info", "(", "\"Extracting schema lexicons\"", ")", "\n", "lexicon_path", "=", "os", ".", "path", ".", "join", "(", "\n", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\n", "f\"grammar/yushi_overnight_grammar/{self.domain}.grammar\"", ",", "\n", ")", "\n", "\n", "def", "node2str", "(", "node", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "node", ",", "tree", ".", "Tree", ")", ":", "\n", "                ", "return", "node", "# presumbly string", "\n", "", "else", ":", "\n", "                ", "token_list", "=", "[", "node", ".", "label", "(", ")", "]", "\n", "for", "child", "in", "node", ":", "\n", "                    ", "if", "child", "not", "in", "[", "\"\\\"\"", "]", ":", "\n", "                        ", "token_list", ".", "append", "(", "node2str", "(", "child", ")", ")", "\n", "", "", "", "return", "\" \"", ".", "join", "(", "token_list", ")", "\n", "\n", "", "lexicons", "=", "{", "}", "\n", "with", "open", "(", "lexicon_path", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "not", "line", ".", "startswith", "(", "\"(rule\"", ")", ":", "\n", "                    ", "continue", "\n", "", "g_tree", "=", "tree", ".", "Tree", ".", "fromstring", "(", "line", ")", "\n", "assert", "g_tree", ".", "label", "(", ")", "==", "\"rule\"", "\n", "nl_node", ",", "lf_node", "=", "g_tree", "[", "1", "]", ",", "g_tree", "[", "2", "]", "\n", "nl", "=", "node2str", "(", "nl_node", ")", "\n", "if", "isinstance", "(", "lf_node", "[", "0", "]", ",", "tree", ".", "Tree", ")", ":", "\n", "                    ", "r_lf_node", "=", "lf_node", "[", "0", "]", "\n", "if", "r_lf_node", ".", "label", "(", ")", "==", "\"string\"", ":", "\n", "# omit string", "\n", "                        ", "lf", "=", "\" \"", ".", "join", "(", "r_lf_node", ")", "\n", "", "else", ":", "\n", "                        ", "lf", "=", "node2str", "(", "r_lf_node", ")", "\n", "", "", "else", ":", "\n", "                    ", "lf", "=", "lf_node", "[", "0", "]", "\n", "", "lexicons", "[", "lf", "]", "=", "nl", "\n", "\n", "# TODO: make a number mapping", "\n", "", "", "lexicons", "[", "\"number 2\"", "]", "=", "\"two\"", "\n", "\n", "lex_values", "=", "[", "]", "\n", "for", "val", "in", "self", ".", "_values", ":", "\n", "            ", "if", "val", "in", "lexicons", ":", "\n", "                ", "lex", "=", "lexicons", "[", "val", "]", "\n", "lex_values", ".", "append", "(", "lex", ")", "\n", "", "else", ":", "\n", "                ", "if", "val", ".", "startswith", "(", "\"en.\"", ")", ":", "# remove en.", "\n", "                    ", "val_", "=", "val", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", "\n", "if", "val_", "in", "lexicons", ":", "\n", "                        ", "lex_val_", "=", "lexicons", "[", "val_", "]", "\n", "", "else", ":", "\n", "                        ", "lex_val_", "=", "val_", "\n", "", "", "else", ":", "\n", "                    ", "lex_val_", "=", "val", "\n", "", "lex_values", ".", "append", "(", "lex_val_", ")", "\n", "logger", ".", "warn", "(", "\n", "f\"Value '{val}' has no lexicons in {self.domain}, map with '{lex_val_}'\"", "\n", ")", "\n", "\n", "", "", "lex_props", "=", "[", "]", "\n", "for", "prop", "in", "self", ".", "_properties", ":", "\n", "            ", "if", "prop", "in", "lexicons", ":", "\n", "                ", "lex", "=", "lexicons", "[", "prop", "]", "\n", "lex_props", ".", "append", "(", "lex", ")", "\n", "", "else", ":", "\n", "                ", "lex_prop_", "=", "\" \"", ".", "join", "(", "prop", ".", "split", "(", "\"_\"", ")", ")", "\n", "lex_props", ".", "append", "(", "lex_prop_", ")", "\n", "logger", ".", "warn", "(", "\n", "f\"Property '{prop}' has no lexicons in {self.domain}, map with '{lex_prop_}'\"", "\n", ")", "\n", "", "", "self", ".", "schema_lexicon_cache", "[", "self", ".", "domain", "]", "=", "(", "lex_values", ",", "lex_props", ")", "\n", "return", "(", "lex_values", ",", "lex_props", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.get_schema_relations": [[345, 393], ["set", "overnight_language.LambdaDCS.execute", "zip", "len", "len", "d.startswith", "enumerate", "enumerate", "set.add", "debugs.append", "set.add", "template.format", "query_list.append", "debugs.append", "triples.append", "v.split"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.execute", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "get_schema_relations", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "domain", "in", "self", ".", "schema_relation_cache", ":", "\n", "            ", "return", "self", ".", "schema_relation_cache", "[", "self", ".", "domain", "]", "\n", "# print(\"Extracting schema relations!\")", "\n", "\n", "", "value2id", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "enumerate", "(", "self", ".", "_values", ")", "}", "\n", "pro2id", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "enumerate", "(", "self", ".", "_properties", ")", "}", "\n", "\n", "debugs", "=", "[", "]", "\n", "\n", "schema_relations", "=", "set", "(", ")", "\n", "value_dict", "=", "self", ".", "overnight_rules", "[", "\"domain_terminals\"", "]", "[", "self", ".", "domain", "]", "[", "\"value\"", "]", "\n", "for", "s_v", "in", "value_dict", "[", "\"singleton\"", "]", ":", "\n", "            ", "for", "v", "in", "value_dict", "[", "\"entity\"", "]", ":", "\n", "                ", "if", "s_v", "in", "v", ":", "\n", "                    ", "rel", "=", "(", "\"val\"", ",", "value2id", "[", "s_v", "]", ",", "\"subtype\"", ",", "\"val\"", ",", "value2id", "[", "v", "]", ")", "\n", "debugs", ".", "append", "(", "(", "s_v", ",", "\"subtype\"", ",", "v", ")", ")", "\n", "schema_relations", ".", "add", "(", "rel", ")", "\n", "\n", "", "", "", "template", "=", "\"(call SW.listValue ( call SW.getProperty (call SW.singleton {0} ) ( string {1} ) ) )\"", "\n", "triples", "=", "[", "]", "\n", "query_list", "=", "[", "]", "\n", "for", "val_type", "in", "value_dict", ":", "\n", "            ", "for", "v", "in", "value_dict", "[", "val_type", "]", ":", "\n", "                ", "for", "p", "in", "self", ".", "_properties", ":", "\n", "                    ", "if", "v", ".", "split", "(", ")", "[", "0", "]", "in", "self", ".", "t_classes", ":", "\n", "                        ", "real_v", "=", "f\"( {v} )\"", "\n", "", "else", ":", "\n", "                        ", "real_v", "=", "v", "\n", "", "query", "=", "template", ".", "format", "(", "real_v", ",", "p", ")", "\n", "query_list", ".", "append", "(", "query", ")", "\n", "triple", "=", "(", "\n", "\"val\"", ",", "\n", "value2id", "[", "v", "]", ",", "\n", "f\"{val_type}_has_p\"", ",", "\n", "\"prop\"", ",", "\n", "pro2id", "[", "p", "]", ",", "\n", ")", "\n", "debugs", ".", "append", "(", "(", "v", ",", "f\"{val_type}_has_p\"", ",", "p", ")", ")", "\n", "triples", ".", "append", "(", "triple", ")", "\n", "\n", "", "", "", "denotations", "=", "self", ".", "execute", "(", "query_list", ",", "self", ".", "domain", ")", "\n", "assert", "len", "(", "denotations", ")", "==", "len", "(", "triples", ")", "\n", "for", "d", ",", "t", "in", "zip", "(", "denotations", ",", "triples", ")", ":", "\n", "            ", "if", "d", ".", "startswith", "(", "\"(list\"", ")", ":", "\n", "                ", "schema_relations", ".", "add", "(", "t", ")", "\n", "", "", "self", ".", "schema_relation_cache", "[", "self", ".", "domain", "]", "=", "schema_relations", "\n", "return", "schema_relations", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.listValue": [[398, 401], ["None"], "methods", ["None"], ["", "@", "predicate", "\n", "def", "listValue", "(", "self", ",", "value", ":", "Value", ")", "->", "List", "[", "Value", "]", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.domain": [[402, 405], ["None"], "methods", ["None"], ["", "@", "predicate", "\n", "def", "domain", "(", "self", ",", "p", ":", "Property", ")", "->", "List", "[", "Value", "]", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.singleton": [[406, 409], ["None"], "methods", ["None"], ["", "@", "predicate", "\n", "def", "singleton", "(", "self", ",", "value", ":", "SingletonValue", ")", "->", "List", "[", "Value", "]", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.reverse": [[410, 413], ["None"], "methods", ["None"], ["", "@", "predicate", "\n", "def", "reverse", "(", "self", ",", "p", ":", "Property", ")", "->", "Property", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.concat": [[433, 436], ["None"], "methods", ["None"], ["", "def", "concat", "(", "self", ",", "l1", ":", "List", "[", "Value", "]", ",", "l2", ":", "List", "[", "Value", "]", ")", "->", "List", "[", "Value", "]", ":", "\n", "# pylint: disable=function-redefined", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.ensureNumericProperty": [[437, 440], ["None"], "methods", ["None"], ["", "@", "predicate", "\n", "def", "ensureNumericProperty", "(", "self", ",", "p", ":", "Property", ")", "->", "Property", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.ensureNumericEntity": [[445, 449], ["None"], "methods", ["None"], ["", "@", "predicate", "\n", "def", "ensureNumericEntity", "(", "self", ",", "values", ":", "List", "[", "Value", "]", ")", "->", "List", "[", "Value", "]", ":", "\n", "# pylint: disable=function-redefined", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.filter": [[470, 475], ["None"], "methods", ["None"], ["", "@", "predicate", "\n", "def", "filter", "(", "\n", "self", ",", "entities", ":", "List", "[", "Value", "]", ",", "p", ":", "Property", ",", "compare", ":", "Operator", ",", "refValue", ":", "Value", "\n", ")", "->", "List", "[", "Value", "]", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.superlative": [[482, 491], ["None"], "methods", ["None"], ["", "@", "predicate", "\n", "def", "superlative", "(", "\n", "self", ",", "\n", "entities", ":", "List", "[", "Value", "]", ",", "\n", "mode", ":", "Aggregate", ",", "\n", "p", ":", "Property", ",", "\n", "restrictors", ":", "List", "[", "Value", "]", ",", "\n", ")", "->", "List", "[", "Value", "]", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.countSuperlative": [[498, 507], ["None"], "methods", ["None"], ["", "@", "predicate", "\n", "def", "countSuperlative", "(", "\n", "self", ",", "\n", "entities", ":", "List", "[", "Value", "]", ",", "\n", "mode", ":", "Aggregate", ",", "\n", "p", ":", "Property", ",", "\n", "restrictors", ":", "List", "[", "Value", "]", ",", "\n", ")", "->", "List", "[", "Value", "]", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.countComparative": [[514, 524], ["None"], "methods", ["None"], ["", "@", "predicate", "\n", "def", "countComparative", "(", "\n", "self", ",", "\n", "entities", ":", "List", "[", "Value", "]", ",", "\n", "p", ":", "Property", ",", "\n", "op", ":", "Operator", ",", "\n", "threshhold", ":", "NumberValue", ",", "\n", "restrictors", ":", "List", "[", "Value", "]", ",", "\n", ")", "->", "List", "[", "Value", "]", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.getProperty": [[529, 532], ["None"], "methods", ["None"], ["", "@", "predicate", "\n", "def", "getProperty", "(", "self", ",", "object", ":", "Value", ",", "p", ":", "Property", ")", "->", "List", "[", "Value", "]", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS._size": [[533, 536], ["None"], "methods", ["None"], ["", "@", "predicate", "\n", "def", "_size", "(", "self", ",", "values", ":", "List", "[", "Value", "]", ")", "->", "Value", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.aggregate": [[537, 540], ["None"], "methods", ["None"], ["", "@", "predicate", "\n", "def", "aggregate", "(", "self", ",", "mode", ":", "Aggregate", ",", "values", ":", "List", "[", "Value", "]", ")", "->", "List", "[", "Value", "]", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.action_seq_to_raw_lf": [[541, 545], ["overnight_language.LambdaDCS.action_sequence_to_logical_form", "overnight_language.LambdaDCS.denormalize_lf"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.action_sequence_to_logical_form", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.denormalize_lf"], ["", "def", "action_seq_to_raw_lf", "(", "self", ",", "actions", ")", ":", "\n", "        ", "_lf", "=", "self", ".", "action_sequence_to_logical_form", "(", "actions", ")", "\n", "lf", "=", "self", ".", "denormalize_lf", "(", "_lf", ")", "\n", "return", "lf", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS._get_transitions": [[546, 612], ["isinstance", "overnight_language.LambdaDCS._get_function_transitions", "isinstance", "tensor2struct.languages.dsl.common.ParsingError", "tensor2struct.languages.dsl.common.ParsingError", "zip", "tensor2struct.languages.dsl.common.ParsingError", "len", "len", "len", "tensor2struct.languages.dsl.common.ParsingError", "argument_transitions.extend", "logging.debug", "tensor2struct.languages.dsl.common.ParsingError", "tensor2struct.languages.dsl.common.ParsingError", "tensor2struct.languages.dsl.common.ParsingError", "overnight_language.LambdaDCS._get_transitions"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage._get_function_transitions", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage._get_transitions"], ["", "def", "_get_transitions", "(", "\n", "self", ",", "expression", ":", "Any", ",", "expected_type", ":", "PredicateType", "\n", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "PredicateType", "]", ":", "\n", "        ", "\"\"\"\n        Adapt to support multiple function types\n        \"\"\"", "\n", "if", "isinstance", "(", "expression", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "ret_transition", ",", "ret_type", "=", "None", ",", "None", "\n", "for", "(", "\n", "function_transitions", ",", "\n", "return_type", ",", "\n", "argument_types", ",", "\n", ")", "in", "self", ".", "_get_function_transitions", "(", "expression", "[", "0", "]", ",", "expected_type", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "if", "len", "(", "argument_types", ")", "!=", "len", "(", "expression", "[", "1", ":", "]", ")", ":", "\n", "                        ", "raise", "ParsingError", "(", "\n", "f\"Wrong number of arguments for function in {expression}\"", "\n", ")", "\n", "", "argument_transitions", "=", "[", "]", "\n", "for", "argument_type", ",", "subexpression", "in", "zip", "(", "\n", "argument_types", ",", "expression", "[", "1", ":", "]", "\n", ")", ":", "\n", "                        ", "argument_transitions", ".", "extend", "(", "\n", "self", ".", "_get_transitions", "(", "subexpression", ",", "argument_type", ")", "[", "0", "]", "\n", ")", "\n", "", "ret_transition", ",", "ret_type", "=", "(", "\n", "function_transitions", "+", "argument_transitions", ",", "\n", "return_type", ",", "\n", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "logging", ".", "debug", "(", "e", ")", "\n", "continue", "\n", "", "", "if", "ret_transition", "is", "None", ":", "\n", "                ", "raise", "ParsingError", "(", "\"Function parsing error\"", ")", "\n", "", "else", ":", "\n", "                ", "return", "ret_transition", ",", "ret_type", "\n", "\n", "", "", "elif", "isinstance", "(", "expression", ",", "str", ")", ":", "\n", "            ", "if", "expression", "not", "in", "self", ".", "_functions", ":", "\n", "                ", "raise", "ParsingError", "(", "f\"Unrecognized constant: {expression}\"", ")", "\n", "", "constant_types", "=", "self", ".", "_function_types", "[", "expression", "]", "\n", "if", "len", "(", "constant_types", ")", "==", "1", ":", "\n", "                ", "constant_type", "=", "constant_types", "[", "0", "]", "\n", "# This constant had only one type; that's the easy case.", "\n", "if", "expected_type", "and", "expected_type", "!=", "constant_type", ":", "\n", "                    ", "raise", "ParsingError", "(", "\n", "f\"{expression} did not have expected type {expected_type} \"", "\n", "f\"(found {constant_type})\"", "\n", ")", "\n", "", "return", "[", "f\"{constant_type} -> {expression}\"", "]", ",", "constant_type", "\n", "", "else", ":", "\n", "                ", "if", "not", "expected_type", ":", "\n", "                    ", "raise", "ParsingError", "(", "\n", "\"With no expected type and multiple types to pick from \"", "\n", "f\"I don't know what type to use (constant was {expression})\"", "\n", ")", "\n", "", "if", "expected_type", "not", "in", "constant_types", ":", "\n", "                    ", "raise", "ParsingError", "(", "\n", "f\"{expression} did not have expected type {expected_type} \"", "\n", "f\"(found these options: {constant_types}; none matched)\"", "\n", ")", "\n", "", "return", "[", "f\"{expected_type} -> {expression}\"", "]", ",", "expected_type", "\n", "\n", "", "", "else", ":", "\n", "            ", "raise", "ParsingError", "(", "\n", "\"Not sure how you got here. Please open an issue on github with details.\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS._get_function_transitions": [[614, 641], ["isinstance", "isinstance", "tensor2struct.languages.dsl.common.ParsingError", "transitions.insert", "tensor2struct.languages.dsl.common.ParsingError", "tensor2struct.languages.dsl.common.ParsingError", "tensor2struct.languages.dsl.common.ParsingError", "str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.insert"], ["", "", "def", "_get_function_transitions", "(", "\n", "self", ",", "expression", ":", "Union", "[", "str", ",", "List", "]", ",", "expected_type", ":", "PredicateType", "\n", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "PredicateType", ",", "List", "[", "PredicateType", "]", "]", ":", "\n", "        ", "if", "expression", "in", "self", ".", "_functions", ":", "\n", "            ", "name", "=", "expression", "\n", "function_types", "=", "self", ".", "_function_types", "[", "expression", "]", "\n", "for", "function_type", "in", "function_types", ":", "\n", "                ", "transitions", "=", "[", "f\"{function_type} -> {name}\"", "]", "\n", "argument_types", "=", "function_type", ".", "argument_types", "\n", "return_type", "=", "function_type", ".", "return_type", "\n", "right_side", "=", "f'[{function_type}, {\", \".join(str(arg) for arg in argument_types)}]'", "\n", "first_transition", "=", "f\"{return_type} -> {right_side}\"", "\n", "transitions", ".", "insert", "(", "0", ",", "first_transition", ")", "\n", "if", "expected_type", "and", "expected_type", "!=", "return_type", ":", "\n", "                    ", "raise", "ParsingError", "(", "\n", "f\"{expression} did not have expected type {expected_type} \"", "\n", "f\"(found {return_type})\"", "\n", ")", "\n", "", "yield", "transitions", ",", "return_type", ",", "argument_types", "\n", "", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "expression", ",", "str", ")", ":", "\n", "                ", "raise", "ParsingError", "(", "f\"Unrecognized function: {expression[0]}\"", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ParsingError", "(", "f\"Unsupported expression type: {expression}\"", ")", "\n", "", "", "if", "not", "isinstance", "(", "function_type", ",", "FunctionType", ")", ":", "\n", "            ", "raise", "ParsingError", "(", "\n", "f\"Zero-arg function or constant called with arguments: {name}\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.normalize_lf": [[643, 687], ["nltk.tree.Tree.fromstring", "overnight_language.LambdaDCS.normalize_lf.normalize"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.cogs_pcfg.normalize"], ["", "", "def", "normalize_lf", "(", "self", ",", "raw_lf", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        1. predicates and entities are realized by string in simpleword.java, we use property, value, string to differentiate them\n        2. remove the terminal functions like string, number\n        \"\"\"", "\n", "lf_tree", "=", "tree", ".", "Tree", ".", "fromstring", "(", "raw_lf", ")", "\n", "\n", "def", "normalize", "(", "node", ")", ":", "\n", "            ", "if", "isinstance", "(", "node", ",", "tree", ".", "Tree", ")", "and", "node", ".", "label", "(", ")", "==", "\"call\"", ":", "\n", "# map the SW functions to our defined ones", "\n", "                ", "if", "node", "[", "0", "]", ".", "startswith", "(", "\"SW.\"", ")", ":", "\n", "                    ", "node", ".", "set_label", "(", "node", "[", "0", "]", "[", "3", ":", "]", ")", "\n", "", "elif", "node", "[", "0", "]", ".", "startswith", "(", "\".\"", ")", ":", "# .size", "\n", "                    ", "node", ".", "set_label", "(", "\"_\"", "+", "node", "[", "0", "]", "[", "1", ":", "]", ")", "# _size", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "node", ".", "remove", "(", "node", "[", "0", "]", ")", "# remove call", "\n", "\n", "for", "index", ",", "child", "in", "enumerate", "(", "node", ")", ":", "\n", "                    ", "if", "(", "\n", "isinstance", "(", "child", ",", "tree", ".", "Tree", ")", "\n", "and", "child", ".", "label", "(", ")", "in", "self", ".", "overnight_rules", "[", "\"terminal_types\"", "]", "\n", ")", ":", "\n", "# particularly handle the terminals of properties", "\n", "                        ", "raw_child_str", "=", "\" \"", ".", "join", "(", "child", ")", "\n", "norm_child_str", "=", "self", ".", "norm_value", "(", "raw_child_str", ")", "\n", "node", "[", "index", "]", "=", "norm_child_str", "\n", "", "elif", "isinstance", "(", "child", ",", "tree", ".", "Tree", ")", "and", "child", ".", "label", "(", ")", "==", "\"\"", ":", "\n", "                        ", "assert", "len", "(", "child", ")", "==", "2", "\n", "\n", "# replace the lambda with its first child", "\n", "child", "[", "0", "]", "=", "child", "[", "0", "]", "[", "1", "]", "\n", "assert", "child", "[", "0", "]", "[", "1", "]", ".", "leaves", "(", ")", "==", "[", "\"s\"", "]", "\n", "# replace the variable", "\n", "child", "[", "0", "]", "[", "1", "]", "=", "child", "[", "1", "]", "\n", "# replace the lambda node with new grounded node", "\n", "node", "[", "index", "]", "=", "child", "[", "0", "]", "\n", "normalize", "(", "node", "[", "index", "]", ")", "\n", "", "else", ":", "\n", "                        ", "normalize", "(", "child", ")", "\n", "\n", "", "", "", "", "normalize", "(", "lf_tree", ")", "\n", "normalized_lf", "=", "to_lisp_like_string", "(", "lf_tree", ")", "\n", "return", "normalized_lf", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.denormalize_lf": [[688, 724], ["nltk.tree.Tree.fromstring", "overnight_language.LambdaDCS.denormalize_lf.denormalize"], "methods", ["None"], ["", "def", "denormalize_lf", "(", "self", ",", "raw_lf", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Opposite of normalize_lf\n        \"\"\"", "\n", "lf_tree", "=", "tree", ".", "Tree", ".", "fromstring", "(", "raw_lf", ")", "\n", "\n", "def", "denormalize", "(", "node", ")", ":", "\n", "            ", "if", "(", "\n", "isinstance", "(", "node", ",", "tree", ".", "Tree", ")", "\n", "and", "node", ".", "label", "(", ")", "in", "self", ".", "_general_function_types", "\n", ")", ":", "\n", "# change the way of calling functions", "\n", "                ", "if", "node", ".", "label", "(", ")", ".", "startswith", "(", "\"_\"", ")", ":", "# _size", "\n", "                    ", "real_label", "=", "\".\"", "+", "node", ".", "label", "(", ")", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "                    ", "real_label", "=", "\"SW.\"", "+", "node", ".", "label", "(", ")", "\n", "", "node", ".", "set_label", "(", "\"call\"", ")", "\n", "node", ".", "insert", "(", "0", ",", "real_label", ")", "\n", "\n", "for", "index", ",", "child", "in", "enumerate", "(", "node", ")", ":", "\n", "                    ", "if", "index", "==", "0", ":", "\n", "                        ", "continue", "# func name", "\n", "", "if", "not", "isinstance", "(", "child", ",", "tree", ".", "Tree", ")", ":", "\n", "                        ", "node", "[", "index", "]", "=", "self", ".", "_functions", "[", "child", "]", "(", ")", "\n", "", "else", ":", "\n", "                        ", "denormalize", "(", "child", ")", "\n", "\n", "", "", "", "", "def", "to_lisp_like_string", "(", "node", ")", ":", "\n", "            ", "if", "isinstance", "(", "node", ",", "tree", ".", "Tree", ")", ":", "\n", "                ", "return", "f\"( {node.label()} {' '.join([to_lisp_like_string(child) for child in node])} )\"", "\n", "", "else", ":", "\n", "                ", "return", "node", "\n", "\n", "", "", "denormalize", "(", "lf_tree", ")", "\n", "denormalized_lf", "=", "to_lisp_like_string", "(", "lf_tree", ")", "\n", "return", "denormalized_lf", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.tostring": [[725, 728], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "tostring", "(", "tree", ":", "tree", ".", "Tree", ")", "->", "str", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.execute": [[729, 759], ["os.getcwd", "os.chdir", "tempfile.NamedTemporaryFile", "open", "subprocess.check_output", "tempfile.NamedTemporaryFile.close", "msg.decode.decode.decode", "os.chdir", "overnight_language.LambdaDCS.execute.post_process"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode"], ["", "@", "staticmethod", "\n", "def", "execute", "(", "lfs", ",", "domain", ")", ":", "\n", "        ", "def", "post_process", "(", "lf", ")", ":", "\n", "            ", "replacements", "=", "[", "(", "\"SW\"", ",", "\"edu.stanford.nlp.sempre.overnight.SimpleWorld\"", ")", "]", "\n", "for", "a", ",", "b", "in", "replacements", ":", "\n", "                ", "lf", "=", "lf", ".", "replace", "(", "a", ",", "b", ")", "\n", "", "return", "lf", "\n", "\n", "", "eval_path", "=", "\"third_party/overnight\"", "# TODO: change this", "\n", "cur_dir", "=", "os", ".", "getcwd", "(", ")", "\n", "os", ".", "chdir", "(", "eval_path", ")", "\n", "eval_script", "=", "\"./evaluator/overnight\"", "\n", "\n", "tf", "=", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "\".examples\"", ")", "\n", "for", "lf", "in", "lfs", ":", "\n", "            ", "p_lf", "=", "post_process", "(", "lf", ")", "\n", "tf", ".", "write", "(", "str", ".", "encode", "(", "p_lf", "+", "\"\\n\"", ")", ")", "\n", "tf", ".", "flush", "(", ")", "\n", "", "FNULL", "=", "open", "(", "os", ".", "devnull", ",", "\"w\"", ")", "\n", "msg", "=", "subprocess", ".", "check_output", "(", "[", "eval_script", ",", "domain", ",", "tf", ".", "name", "]", ",", "stderr", "=", "FNULL", ")", "\n", "tf", ".", "close", "(", ")", "\n", "msg", "=", "msg", ".", "decode", "(", "\"utf-8\"", ")", "\n", "\n", "denotations", "=", "[", "\n", "line", ".", "split", "(", "\"\\t\"", ")", "[", "1", "]", "\n", "for", "line", "in", "msg", ".", "split", "(", "\"\\n\"", ")", "\n", "if", "line", ".", "startswith", "(", "\"targetValue\\t\"", ")", "\n", "]", "\n", "os", ".", "chdir", "(", "cur_dir", ")", "\n", "return", "denotations", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.to_lisp_like_string": [[33, 38], ["isinstance", "node.label", "overnight_language.to_lisp_like_string"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.to_lisp_like_string"], ["def", "to_lisp_like_string", "(", "node", ")", ":", "\n", "    ", "if", "isinstance", "(", "node", ",", "tree", ".", "Tree", ")", ":", "\n", "        ", "return", "f\"({node.label()} {' '.join([to_lisp_like_string(child) for child in node])})\"", "\n", "", "else", ":", "\n", "        ", "return", "node", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.predicate": [[84, 108], ["inspect.signature", "tensor2struct.languages.dsl.domain_language.PredicateType.get_type", "tensor2struct.languages.dsl.domain_language.PredicateType.get_function_type", "_general_function_types[].append", "functools.wraps", "tensor2struct.languages.dsl.domain_language.PredicateType.get_type", "tensor2struct.languages.dsl.common.ParsingError", "func", "inspect.signature.parameters.items"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.PredicateType.get_type", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.PredicateType.get_function_type", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.PredicateType.get_type", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], ["def", "predicate", "(", "func", ":", "Callable", ")", "->", "Callable", ":", "\n", "    ", "signature", "=", "inspect", ".", "signature", "(", "func", ")", "\n", "argument_types", "=", "[", "param", ".", "annotation", "for", "name", ",", "param", "in", "signature", ".", "parameters", ".", "items", "(", ")", "]", "\n", "argument_types", "=", "argument_types", "[", "1", ":", "]", "# remove the type of self", "\n", "return_type", "=", "signature", ".", "return_annotation", "\n", "argument_nltk_types", ":", "List", "[", "PredicateType", "]", "=", "[", "\n", "PredicateType", ".", "get_type", "(", "arg_type", ")", "for", "arg_type", "in", "argument_types", "\n", "]", "\n", "return_nltk_type", "=", "PredicateType", ".", "get_type", "(", "return_type", ")", "\n", "function_nltk_type", "=", "PredicateType", ".", "get_function_type", "(", "\n", "argument_nltk_types", ",", "return_nltk_type", "\n", ")", "\n", "name", "=", "func", ".", "__name__", "\n", "_general_functions", "[", "name", "]", "=", "func", "\n", "if", "function_nltk_type", "in", "_general_function_types", "[", "name", "]", ":", "\n", "        ", "raise", "ParsingError", "(", "f\"duplicate definition of function {name}\"", ")", "\n", "\n", "", "_general_function_types", "[", "name", "]", ".", "append", "(", "function_nltk_type", ")", "\n", "\n", "@", "functools", ".", "wraps", "(", "func", ")", "\n", "def", "wrap", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "func", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "wrap", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker.__init__": [[32, 37], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "_language", "=", "language", "\n", "\n", "self", ".", "_row_selection_threshold", "=", "32", "\n", "self", ".", "_program_threshold", "=", "1e4", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker._walk": [[38, 79], ["nonterminal_buffer.pop", "len", "str", "next_actions.extend", "reversed", "next_paths.append", "_completed_paths.append", "action_walker.ActionSpaceWalker._get_right_side_parts", "len", "incomplete_paths.append", "new_nonterminal_buffer.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker._get_right_side_parts", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "_walk", "(", "self", ",", "start_types", ":", "List", ",", "actions", ":", "Dict", ",", "max_len", ":", "int", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Walk over action space to collect completed paths of at most ``_max_path_length`` steps.\n        \"\"\"", "\n", "# non_terminal_buffer, history", "\n", "incomplete_paths", "=", "[", "\n", "(", "[", "str", "(", "type_", ")", "]", ",", "[", "f\"{START_SYMBOL} -> {type_}\"", "]", ")", "for", "type_", "in", "start_types", "\n", "]", "\n", "_completed_paths", "=", "[", "]", "\n", "\n", "while", "incomplete_paths", ":", "\n", "            ", "next_paths", "=", "[", "]", "\n", "# expand on terminal at a time", "\n", "for", "nonterminal_buffer", ",", "history", "in", "incomplete_paths", ":", "\n", "                ", "nonterminal", "=", "nonterminal_buffer", ".", "pop", "(", ")", "\n", "next_actions", "=", "[", "]", "\n", "if", "nonterminal", "not", "in", "actions", ":", "\n", "# e.g. str is not in non_terminals", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "next_actions", ".", "extend", "(", "actions", "[", "nonterminal", "]", ")", "\n", "", "for", "action", "in", "next_actions", ":", "\n", "                    ", "new_history", "=", "history", "+", "[", "action", "]", "\n", "new_nonterminal_buffer", "=", "nonterminal_buffer", "[", ":", "]", "\n", "# expand the arguments first", "\n", "for", "right_side_part", "in", "reversed", "(", "self", ".", "_get_right_side_parts", "(", "action", ")", ")", ":", "\n", "                        ", "if", "right_side_part", "in", "actions", ":", "\n", "                            ", "new_nonterminal_buffer", ".", "append", "(", "right_side_part", ")", "\n", "", "", "next_paths", ".", "append", "(", "(", "new_nonterminal_buffer", ",", "new_history", ")", ")", "\n", "", "", "incomplete_paths", "=", "[", "]", "\n", "\n", "for", "nonterminal_buffer", ",", "path", "in", "next_paths", ":", "\n", "                ", "if", "not", "nonterminal_buffer", ":", "\n", "                    ", "_completed_paths", ".", "append", "(", "path", ")", "\n", "", "elif", "len", "(", "path", ")", "<=", "max_len", ":", "\n", "                    ", "incomplete_paths", ".", "append", "(", "(", "nonterminal_buffer", ",", "path", ")", ")", "\n", "\n", "# avoid expensive search", "\n", "", "", "if", "len", "(", "_completed_paths", ")", ">", "self", ".", "_program_threshold", ":", "\n", "                ", "break", "\n", "", "", "return", "_completed_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker._get_right_side_parts": [[80, 88], ["action.split", "right_side[].split"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_right_side_parts", "(", "action", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "_", ",", "right_side", "=", "action", ".", "split", "(", "\" -> \"", ")", "\n", "if", "\"[\"", "==", "right_side", "[", "0", "]", ":", "\n", "            ", "right_side_parts", "=", "right_side", "[", "1", ":", "-", "1", "]", ".", "split", "(", "\", \"", ")", "\n", "", "else", ":", "\n", "            ", "right_side_parts", "=", "[", "right_side", "]", "\n", "", "return", "right_side_parts", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker.prune_sketches": [[89, 102], ["action_walker.ActionSpaceWalker._language.action_sequence_to_logical_form", "ret_sketches.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.action_sequence_to_logical_form", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "prune_sketches", "(", "self", ",", "sketches", ":", "List", ")", "->", "List", ":", "\n", "        ", "\"\"\"\n        Remove the dummy sketch\n        \"\"\"", "\n", "ret_sketches", "=", "[", "]", "\n", "for", "sketch", "in", "sketches", ":", "\n", "            ", "sketch_lf", "=", "self", ".", "_language", ".", "action_sequence_to_logical_form", "(", "sketch", ")", "\n", "if", "sketch_lf", "==", "\"#PH#\"", ":", "\n", "                ", "continue", "\n", "\n", "", "ret_sketches", ".", "append", "(", "sketch", ")", "\n", "\n", "", "return", "ret_sketches", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker.prune_single_row_selection": [[103, 110], ["action_walker.ActionSpaceWalker._language.action_sequence_to_logical_form", "action_walker.ActionSpaceWalker.startswith", "candidates.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.action_sequence_to_logical_form", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "prune_single_row_selection", "(", "self", ",", "row_selection_cache", ":", "List", ")", ":", "\n", "        ", "candidates", "=", "[", "]", "\n", "for", "sin_ac", "in", "row_selection_cache", ":", "\n", "            ", "sin_ac_lf", "=", "self", ".", "_language", ".", "action_sequence_to_logical_form", "(", "sin_ac", ")", "\n", "if", "sin_ac_lf", ".", "startswith", "(", "\"(filter\"", ")", ":", "# allow all filter functions", "\n", "                ", "candidates", ".", "append", "(", "sin_ac", ")", "\n", "", "", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker.prune_row_selections_by_kg": [[111, 159], ["action_walker.ActionSpaceWalker._language.action_sequence_to_logical_form", "nltk.tree.Tree.fromstring", "cond_cache.append", "cond_cache.append", "queue.pop", "len", "len", "queue.pop.label", "filter_in_conds.append", "filter_conds.append", "set", "queue.pop.label", "queue.append", "queue.append", "queue.pop.label().startswith", "filter_conds.append", "queue.pop.label"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.action_sequence_to_logical_form", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "prune_row_selections_by_kg", "(", "self", ",", "row_selection_cache", ":", "List", ")", ":", "\n", "        ", "\"\"\"\n        1) Filter in should comply with table\n        2) And takes two different expressions\n        \"\"\"", "\n", "kg", "=", "self", ".", "_language", ".", "real_cv_map", "\n", "\n", "cond_cache", "=", "[", "]", "\n", "for", "cond_candidate", "in", "row_selection_cache", ":", "\n", "            ", "r_lf", "=", "self", ".", "_language", ".", "action_sequence_to_logical_form", "(", "cond_candidate", ")", "\n", "\n", "if", "r_lf", "==", "\"all_rows\"", ":", "\n", "                ", "cond_cache", ".", "append", "(", "r_lf", ")", "\n", "continue", "\n", "", "r_lf_tree", "=", "Tree", ".", "fromstring", "(", "r_lf", ")", "\n", "\n", "filter_in_conds", "=", "[", "]", "\n", "filter_conds", "=", "[", "]", "\n", "queue", "=", "[", "r_lf_tree", "]", "\n", "while", "queue", ":", "\n", "                ", "item", "=", "queue", ".", "pop", "(", ")", "\n", "if", "item", ".", "label", "(", ")", "==", "\"filter_in\"", ":", "\n", "                    ", "filter_in_conds", ".", "append", "(", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ")", ")", "\n", "filter_conds", ".", "append", "(", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ")", ")", "\n", "", "elif", "item", ".", "label", "(", ")", "==", "\"conjunction\"", ":", "\n", "                    ", "queue", ".", "append", "(", "item", "[", "0", "]", ")", "\n", "queue", ".", "append", "(", "item", "[", "1", "]", ")", "\n", "", "elif", "item", ".", "label", "(", ")", ".", "startswith", "(", "\"filter\"", ")", ":", "\n", "                    ", "filter_conds", ".", "append", "(", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "\n", "# duplicate conditions", "\n", "", "", "if", "len", "(", "set", "(", "filter_conds", ")", ")", "!=", "len", "(", "filter_conds", ")", ":", "\n", "                ", "continue", "\n", "\n", "# filter conds not right", "\n", "", "flag", "=", "True", "\n", "for", "filter_in_cond", "in", "filter_in_conds", ":", "\n", "                ", "col", ",", "val", "=", "filter_in_cond", "\n", "if", "val", "not", "in", "kg", "[", "col", "]", ":", "\n", "                    ", "flag", "=", "False", "\n", "break", "\n", "", "", "if", "not", "flag", ":", "\n", "                ", "continue", "\n", "\n", "", "cond_cache", ".", "append", "(", "cond_candidate", ")", "\n", "", "return", "cond_cache", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker.get_sketches": [[160, 167], ["action_walker.ActionSpaceWalker._walk", "action_walker.ActionSpaceWalker.prune_sketches"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker._walk", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker.prune_sketches"], ["", "def", "get_sketches", "(", "self", ",", "sketch_actions", ":", "Dict", ",", "max_sketch_len", ":", "int", ")", "->", "List", ":", "\n", "        ", "sketches", "=", "self", ".", "_walk", "(", "\n", "self", ".", "_language", ".", "_start_types", ",", "sketch_actions", ",", "max_sketch_len", "\n", ")", "\n", "sketches", "=", "self", ".", "prune_sketches", "(", "sketches", ")", "\n", "# print(f\"{len(sketches)} sketches in total\")", "\n", "return", "sketches", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker.get_junctions": [[168, 187], ["range", "len", "range", "len", "ret_ac.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "get_junctions", "(", "self", ",", "single_selections", ":", "List", ")", "->", "List", ":", "\n", "        ", "prefix_2", "=", "[", "\n", "\"List[Row] -> [<List[Row],List<Row>:List[Row]>, List[Row], List[Row]]\"", ",", "\n", "\"<List[Row],List<Row>:List[Row]> -> conjunction\"", ",", "\n", "]", "\n", "\n", "candidates", "=", "single_selections", "\n", "\n", "ret_ac", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "candidates", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "candidates", ")", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "continue", "\n", "", "a1", "=", "candidates", "[", "i", "]", "\n", "a2", "=", "candidates", "[", "j", "]", "\n", "# conjunction", "\n", "ac", "=", "[", "a1", "[", "0", "]", "]", "+", "prefix_2", "+", "a1", "[", "1", ":", "]", "+", "a2", "[", "1", ":", "]", "\n", "ret_ac", ".", "append", "(", "ac", ")", "\n", "", "", "return", "ret_ac", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker.get_row_selection_cache": [[188, 210], ["action_walker.ActionSpaceWalker._walk", "action_walker.ActionSpaceWalker.prune_single_row_selection", "action_walker.ActionSpaceWalker.get_junctions", "action_walker.ActionSpaceWalker.prune_row_selections_by_kg", "logger.info", "len", "logger.warn", "action_walker.ActionSpaceWalker._walk", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker._walk", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker.prune_single_row_selection", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker.get_junctions", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker.prune_row_selections_by_kg", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker._walk"], ["", "def", "get_row_selection_cache", "(", "self", ",", "slot_actions", ":", "Dict", ")", "->", "List", ":", "\n", "        ", "single_row_selection_cache", "=", "self", ".", "_walk", "(", "[", "\"List[Row]\"", "]", ",", "slot_actions", ",", "5", ")", "\n", "pruned_single_row_selections", "=", "self", ".", "prune_single_row_selection", "(", "\n", "single_row_selection_cache", "\n", ")", "\n", "\n", "threshold", "=", "self", ".", "_row_selection_threshold", "\n", "if", "len", "(", "pruned_single_row_selections", ")", ">", "threshold", ":", "\n", "            ", "logger", ".", "warn", "(", "f\"Found row selctions of size greater than {threshold}\"", ")", "\n", "pruned_single_row_selections", "=", "pruned_single_row_selections", "[", "\n", ":", "threshold", "\n", "]", "# pruning", "\n", "\n", "", "junctions", "=", "self", ".", "get_junctions", "(", "pruned_single_row_selections", ")", "\n", "pruned_row_selections", "=", "self", ".", "prune_row_selections_by_kg", "(", "\n", "pruned_single_row_selections", "+", "junctions", "\n", ")", "\n", "\n", "all_rows", "=", "self", ".", "_walk", "(", "[", "\"List[Row]\"", "]", ",", "slot_actions", ",", "1", ")", "[", "0", "]", "\n", "final_row_selection", "=", "pruned_row_selections", "+", "[", "all_rows", "]", "\n", "logger", ".", "info", "(", "f\"{len(final_row_selection)} kinds of instantiations\"", ")", "\n", "return", "[", "ac", "[", "1", ":", "]", "for", "ac", "in", "final_row_selection", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker.get_action_seqs_from_sketch": [[211, 260], ["dict", "enumerate", "action.split", "len", "action_walker.ActionSpaceWalker.get_action_seqs_from_sketch.recur_find"], "methods", ["None"], ["", "def", "get_action_seqs_from_sketch", "(", "\n", "self", ",", "slot_actions", ":", "Dict", ",", "sketch", ":", "List", "[", "str", "]", ",", "row_selection_cache", ":", "List", "\n", ")", "->", "List", ":", "\n", "        ", "\"\"\"\n        check all the placeholders and then fill them\n        \"\"\"", "\n", "filler_dict", "=", "dict", "(", ")", "\n", "for", "action_ind", ",", "action", "in", "enumerate", "(", "sketch", ")", ":", "\n", "            ", "lhs", ",", "rhs", "=", "action", ".", "split", "(", "\" -> \"", ")", "\n", "if", "(", "\n", "lhs", "in", "[", "\"Column\"", ",", "\"StringColumn\"", ",", "\"NumberColumn\"", ",", "\"str\"", ",", "\"Number\"", "]", "\n", "and", "rhs", "==", "\"#PH#\"", "\n", ")", ":", "\n", "                ", "slot_candidates", "=", "slot_actions", "[", "lhs", "]", "\n", "if", "len", "(", "slot_candidates", ")", "==", "0", ":", "\n", "# if there is not candidates, the this sketch is not valid", "\n", "                    ", "return", "[", "]", "\n", "", "filler_dict", "[", "action_ind", "]", "=", "slot_candidates", "\n", "", "elif", "lhs", "==", "\"List[Row]\"", "and", "rhs", "==", "\"#PH#\"", ":", "\n", "                ", "if", "len", "(", "row_selection_cache", ")", "==", "0", ":", "\n", "# if there is not candidates, the this sketch is not valid", "\n", "                    ", "return", "[", "]", "\n", "", "filler_dict", "[", "action_ind", "]", "=", "row_selection_cache", "\n", "\n", "# recursively fill all slots", "\n", "", "", "possible_paths", "=", "[", "]", "\n", "\n", "def", "recur_find", "(", "prefix", ",", "i", ")", ":", "\n", "            ", "if", "i", "==", "len", "(", "sketch", ")", ":", "\n", "# check if action seq is valid", "\n", "                ", "possible_paths", ".", "append", "(", "prefix", ")", "\n", "return", "\n", "", "if", "i", "in", "filler_dict", ":", "\n", "                ", "for", "candidate", "in", "filler_dict", "[", "i", "]", ":", "\n", "                    ", "new_prefix", "=", "prefix", "[", ":", "]", "\n", "if", "isinstance", "(", "candidate", ",", "list", ")", ":", "\n", "                        ", "new_prefix", "+=", "candidate", "\n", "", "else", ":", "\n", "                        ", "new_prefix", ".", "append", "(", "candidate", ")", "\n", "", "recur_find", "(", "new_prefix", ",", "i", "+", "1", ")", "\n", "", "", "else", ":", "\n", "                ", "new_prefix", "=", "prefix", "[", ":", "]", "\n", "new_prefix", ".", "append", "(", "sketch", "[", "i", "]", ")", "\n", "recur_find", "(", "new_prefix", ",", "i", "+", "1", ")", "\n", "\n", "", "", "if", "len", "(", "filler_dict", ")", ">", "0", ":", "\n", "            ", "recur_find", "(", "[", "]", ",", "0", ")", "\n", "\n", "", "return", "possible_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker.get_all_logical_forms": [[261, 283], ["action_walker.ActionSpaceWalker._language.get_nonterminal_productions", "action_walker.ActionSpaceWalker._walk", "sorted", "action_walker.ActionSpaceWalker._language.action_sequence_to_logical_form", "logical_forms.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.get_nonterminal_productions", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker._walk", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.action_sequence_to_logical_form", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "get_all_logical_forms", "(", "\n", "self", ",", "max_path_length", ":", "int", ",", "max_num_logical_forms", ":", "int", "=", "None", "\n", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "actions", "=", "self", ".", "_language", ".", "get_nonterminal_productions", "(", ")", "\n", "\n", "_completed_paths", "=", "self", ".", "_walk", "(", "\n", "self", ".", "_language", ".", "_start_types", ",", "actions", ",", "max_path_length", "\n", ")", "\n", "\n", "ret_paths", "=", "_completed_paths", "\n", "if", "max_num_logical_forms", "is", "not", "None", ":", "\n", "            ", "_length_sorted_paths", "=", "sorted", "(", "ret_paths", ",", "key", "=", "len", ")", "\n", "ret_paths", "=", "_length_sorted_paths", "[", ":", "max_num_logical_forms", "]", "\n", "\n", "", "logical_forms", "=", "[", "]", "\n", "for", "path", "in", "ret_paths", ":", "\n", "            ", "try", ":", "\n", "                ", "lf", "=", "self", ".", "_language", ".", "action_sequence_to_logical_form", "(", "path", ")", "\n", "logical_forms", ".", "append", "(", "lf", ")", "\n", "", "except", "ExecutionError", ":", "\n", "                ", "pass", "\n", "", "", "return", "logical_forms", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker.get_action_seqs_by_sketches": [[284, 316], ["action_walker.ActionSpaceWalker._language.get_nonterminal_productions", "action_walker.ActionSpaceWalker._language._get_sketch_productions", "action_walker.ActionSpaceWalker._language._get_slot_productions", "action_walker.ActionSpaceWalker.get_row_selection_cache", "action_walker.ActionSpaceWalker.get_sketches", "sorted", "action_walker.ActionSpaceWalker.get_action_seqs_from_sketch", "ret_action_seqs.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.get_nonterminal_productions", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker.get_row_selection_cache", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker.get_sketches", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker.get_action_seqs_from_sketch", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "get_action_seqs_by_sketches", "(", "\n", "self", ",", "max_path_length", ":", "int", ",", "max_num_sketches", ":", "int", "=", "None", ",", "sketches", ":", "List", "=", "None", "\n", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        Collect action sequences by sketch\n        if sketch is specified, only its instantiated programs are produced\n        otherwise, use all possible sketches\n        \"\"\"", "\n", "actions", "=", "self", ".", "_language", ".", "get_nonterminal_productions", "(", ")", "\n", "sketch_actions", "=", "self", ".", "_language", ".", "_get_sketch_productions", "(", "actions", ")", "\n", "slot_actions", "=", "self", ".", "_language", ".", "_get_slot_productions", "(", "actions", ")", "\n", "row_selection_cache", "=", "self", ".", "get_row_selection_cache", "(", "slot_actions", ")", "\n", "\n", "if", "not", "sketches", ":", "\n", "            ", "assert", "max_path_length", ">", "0", "# otherwise it should be valid", "\n", "sketches", "=", "self", ".", "get_sketches", "(", "sketch_actions", ",", "max_path_length", ")", "\n", "", "sketches2prod", "=", "sketches", "\n", "if", "max_num_sketches", "is", "not", "None", "and", "max_num_sketches", ">", "0", ":", "\n", "            ", "length_sorted_sketches", "=", "sorted", "(", "sketches2prod", ",", "key", "=", "len", ")", "\n", "sketches2prod", "=", "length_sorted_sketches", "[", ":", "max_num_sketches", "]", "\n", "\n", "", "ret_action_seqs", "=", "[", "]", "\n", "for", "sketch", "in", "sketches2prod", ":", "\n", "            ", "action_seqs", "=", "self", ".", "get_action_seqs_from_sketch", "(", "\n", "slot_actions", ",", "sketch", ",", "row_selection_cache", "\n", ")", "\n", "for", "_seq", "in", "action_seqs", ":", "\n", "# make sure all palceholders arer resolved", "\n", "                ", "assert", "\"#PH#\"", "not", "in", "\" \"", ".", "join", "(", "_seq", ")", "\n", "ret_action_seqs", ".", "append", "(", "(", "sketch", ",", "_seq", ")", ")", "\n", "\n", "", "", "return", "ret_action_seqs", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker.get_logical_forms_by_sketches": [[317, 331], ["action_walker.ActionSpaceWalker.get_action_seqs_by_sketches", "action_walker.ActionSpaceWalker._language.action_sequence_to_logical_form", "logical_forms.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.action_walker.ActionSpaceWalker.get_action_seqs_by_sketches", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.action_sequence_to_logical_form", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "get_logical_forms_by_sketches", "(", "\n", "self", ",", "max_path_length", ":", "int", ",", "max_num_sketches", ":", "int", "=", "None", ",", "sketches", ":", "List", "=", "None", "\n", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "action_seqs", "=", "self", ".", "get_action_seqs_by_sketches", "(", "\n", "max_path_length", ",", "max_num_sketches", ",", "sketches", "\n", ")", "\n", "logical_forms", "=", "[", "]", "\n", "for", "_sketch", ",", "_seq", "in", "action_seqs", ":", "\n", "            ", "try", ":", "\n", "                ", "lf", "=", "self", ".", "_language", ".", "action_sequence_to_logical_form", "(", "_seq", ")", "\n", "logical_forms", ".", "append", "(", "(", "_sketch", ",", "lf", ")", ")", "\n", "", "except", "ParsingError", ":", "\n", "                ", "pass", "\n", "", "", "return", "logical_forms", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.PredicateType.get_type": [[67, 91], ["domain_language.is_callable", "domain_language.BasicType", "domain_language.PredicateType.get_type", "domain_language.FunctionType", "domain_language.is_generic", "domain_language.PredicateType.get_type", "domain_language.get_generic_name"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.is_callable", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.PredicateType.get_type", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.is_generic", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.PredicateType.get_type", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.get_generic_name"], ["@", "staticmethod", "\n", "def", "get_type", "(", "type_", ":", "Type", ")", "->", "\"PredicateType\"", ":", "\n", "        ", "\"\"\"\n        Converts a python ``Type`` (as you might get from a type annotation) into a\n        ``PredicateType``.  If the ``Type`` is callable, this will return a ``FunctionType``;\n        otherwise, it will return a ``BasicType``.\n\n        ``BasicTypes`` have a single ``name`` parameter - we typically get this from\n        ``type_.__name__``.  This doesn't work for generic types (like ``List[str]``), so we handle\n        those specially, so that the ``name`` for the ``BasicType`` remains ``List[str]``, as you\n        would expect.\n        \"\"\"", "\n", "if", "is_callable", "(", "type_", ")", ":", "\n", "            ", "callable_args", "=", "type_", ".", "__args__", "\n", "argument_types", "=", "[", "PredicateType", ".", "get_type", "(", "t", ")", "for", "t", "in", "callable_args", "[", ":", "-", "1", "]", "]", "\n", "return_type", "=", "PredicateType", ".", "get_type", "(", "callable_args", "[", "-", "1", "]", ")", "\n", "return", "FunctionType", "(", "argument_types", ",", "return_type", ")", "\n", "", "elif", "is_generic", "(", "type_", ")", ":", "\n", "# This is something like List[int].  type_.__name__ doesn't do the right thing (and", "\n", "# crashes in python 3.7), so we need to do some magic here.", "\n", "            ", "name", "=", "get_generic_name", "(", "type_", ")", "\n", "", "else", ":", "\n", "            ", "name", "=", "type_", ".", "__name__", "\n", "", "return", "BasicType", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.PredicateType.get_function_type": [[92, 107], ["domain_language.FunctionType"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_function_type", "(", "\n", "arg_types", ":", "List", "[", "\"PredicateType\"", "]", ",", "return_type", ":", "\"PredicateType\"", "\n", ")", "->", "\"PredicateType\"", ":", "\n", "        ", "\"\"\"\n        Constructs an NLTK ``ComplexType`` representing a function with the given argument and\n        return types.\n        \"\"\"", "\n", "# TODO(mattg): We might need to generalize this to just `get_type`, so we can handle", "\n", "# functions as arguments correctly in the logic below.", "\n", "if", "not", "arg_types", ":", "\n", "# Functions with no arguments are basically constants whose type match their return", "\n", "# type.", "\n", "            ", "return", "return_type", "\n", "", "return", "FunctionType", "(", "arg_types", ",", "return_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.BasicType.__init__": [[115, 117], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ":", "str", ")", "->", "None", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.BasicType.__repr__": [[118, 120], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.BasicType.__hash__": [[121, 123], ["hash"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.BasicType.__eq__": [[124, 128], ["isinstance"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ",", "other", ".", "__class__", ")", ":", "\n", "            ", "return", "self", ".", "name", "==", "other", ".", "name", "\n", "", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.FunctionType.__init__": [[138, 144], ["str"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "argument_types", ":", "List", "[", "PredicateType", "]", ",", "return_type", ":", "PredicateType", "\n", ")", "->", "None", ":", "\n", "        ", "self", ".", "argument_types", "=", "argument_types", "\n", "self", ".", "return_type", "=", "return_type", "\n", "self", ".", "name", "=", "f'<{\",\".join(str(arg) for arg in argument_types)}:{return_type}>'", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.FunctionType.__repr__": [[145, 147], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.FunctionType.__hash__": [[148, 150], ["hash"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.FunctionType.__eq__": [[151, 155], ["isinstance"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ",", "other", ".", "__class__", ")", ":", "\n", "            ", "return", "self", ".", "name", "==", "other", ".", "name", "\n", "", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.__init__": [[278, 297], ["collections.defaultdict", "dir", "domain_language.PredicateType.get_type", "isinstance", "allowed_constants.items", "getattr", "getattr", "getattr", "domain_language.DomainLanguage.add_constant", "getattr", "domain_language.DomainLanguage.add_predicate"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.PredicateType.get_type", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.add_constant", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.add_predicate"], ["def", "__init__", "(", "\n", "self", ",", "allowed_constants", ":", "Dict", "[", "str", ",", "Any", "]", "=", "None", ",", "start_types", ":", "Set", "[", "Type", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "self", ".", "_functions", ":", "Dict", "[", "str", ",", "Callable", "]", "=", "{", "}", "\n", "self", ".", "_function_types", ":", "Dict", "[", "str", ",", "List", "[", "PredicateType", "]", "]", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "_start_types", ":", "Set", "[", "PredicateType", "]", "=", "{", "\n", "PredicateType", ".", "get_type", "(", "type_", ")", "for", "type_", "in", "start_types", "\n", "}", "\n", "for", "name", "in", "dir", "(", "self", ")", ":", "\n", "            ", "if", "isinstance", "(", "getattr", "(", "self", ",", "name", ")", ",", "types", ".", "MethodType", ")", ":", "\n", "                ", "function", "=", "getattr", "(", "self", ",", "name", ")", "\n", "if", "getattr", "(", "function", ",", "\"_is_predicate\"", ",", "False", ")", ":", "\n", "                    ", "side_arguments", "=", "getattr", "(", "function", ",", "\"_side_arguments\"", ",", "None", ")", "\n", "self", ".", "add_predicate", "(", "name", ",", "function", ",", "side_arguments", ")", "\n", "", "", "", "if", "allowed_constants", ":", "\n", "            ", "for", "name", ",", "value", "in", "allowed_constants", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "add_constant", "(", "name", ",", "value", ")", "\n", "# Caching this to avoid recomputing it every time `get_nonterminal_productions` is called.", "\n", "", "", "self", ".", "_nonterminal_productions", ":", "Dict", "[", "str", ",", "List", "[", "str", "]", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.execute": [[298, 307], ["logical_form.replace.replace.replace", "tensor2struct.languages.dsl.common.util.lisp_to_nested_expression", "domain_language.DomainLanguage._execute_expression", "hasattr", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.common.util.lisp_to_nested_expression", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage._execute_expression"], ["", "def", "execute", "(", "self", ",", "logical_form", ":", "str", ")", ":", "\n", "        ", "\"\"\"Executes a logical form, using whatever predicates you have defined.\"\"\"", "\n", "if", "not", "hasattr", "(", "self", ",", "\"_functions\"", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"You must call super().__init__() in your Language constructor\"", "\n", ")", "\n", "", "logical_form", "=", "logical_form", ".", "replace", "(", "\",\"", ",", "\" \"", ")", "\n", "expression", "=", "util", ".", "lisp_to_nested_expression", "(", "logical_form", ")", "\n", "return", "self", ".", "_execute_expression", "(", "expression", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.execute_action_sequence": [[308, 330], ["first_action.split", "tensor2struct.languages.dsl.common.ExecutionError", "domain_language.DomainLanguage._execute_sequence"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage._execute_sequence"], ["", "def", "execute_action_sequence", "(", "\n", "self", ",", "action_sequence", ":", "List", "[", "str", "]", ",", "side_arguments", ":", "List", "[", "Dict", "]", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Executes the program defined by an action sequence directly, without needing the overhead\n        of translating to a logical form first.  For any given program, :func:`execute` and this\n        function are equivalent, they just take different representations of the program, so you\n        can use whichever is more efficient.\n\n        Also, if you have state or side arguments associated with particular production rules\n        (e.g., the decoder's attention on an input utterance when a predicate was predicted), you\n        `must` use this function to execute the logical form, instead of :func:`execute`, so that\n        we can match the side arguments with the right functions.\n        \"\"\"", "\n", "# We'll strip off the first action, because it doesn't matter for execution.", "\n", "first_action", "=", "action_sequence", "[", "0", "]", "\n", "left_side", "=", "first_action", ".", "split", "(", "\" -> \"", ")", "[", "0", "]", "\n", "if", "left_side", "!=", "\"@start@\"", ":", "\n", "            ", "raise", "ExecutionError", "(", "\"invalid action sequence\"", ")", "\n", "", "remaining_actions", "=", "action_sequence", "[", "1", ":", "]", "\n", "remaining_side_args", "=", "side_arguments", "[", "1", ":", "]", "if", "side_arguments", "else", "None", "\n", "return", "self", ".", "_execute_sequence", "(", "remaining_actions", ",", "remaining_side_args", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.get_nonterminal_productions": [[331, 366], ["collections.defaultdict", "domain_language.DomainLanguage._function_types.items", "set", "domain_language.DomainLanguage._function_types.values", "actions[].add", "sorted", "set.update", "actions[].add", "isinstance", "actions.items", "actions[].add", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.values", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add"], ["", "def", "get_nonterminal_productions", "(", "self", ")", "->", "Dict", "[", "str", ",", "List", "[", "str", "]", "]", ":", "\n", "        ", "\"\"\"\n        Induces a grammar from the defined collection of predicates in this language and returns\n        all productions in that grammar, keyed by the non-terminal they are expanding.\n\n        This includes terminal productions implied by each predicate as well as productions for the\n        `return type` of each defined predicate.  For example, defining a \"multiply\" predicate adds\n        a \"<int,int:int> -> multiply\" terminal production to the grammar, and `also` a \"int ->\n        [<int,int:int>, int, int]\" non-terminal production, because I can use the \"multiply\"\n        predicate to produce an int.\n        \"\"\"", "\n", "if", "not", "self", ".", "_nonterminal_productions", ":", "\n", "            ", "actions", ":", "Dict", "[", "str", ",", "Set", "[", "str", "]", "]", "=", "defaultdict", "(", "set", ")", "\n", "# If you didn't give us a set of valid start types, we'll assume all types we know", "\n", "# about (including functional types) are valid start types.", "\n", "if", "self", ".", "_start_types", ":", "\n", "                ", "start_types", "=", "self", ".", "_start_types", "\n", "", "else", ":", "\n", "                ", "start_types", "=", "set", "(", ")", "\n", "for", "type_list", "in", "self", ".", "_function_types", ".", "values", "(", ")", ":", "\n", "                    ", "start_types", ".", "update", "(", "type_list", ")", "\n", "", "", "for", "start_type", "in", "start_types", ":", "\n", "                ", "actions", "[", "START_SYMBOL", "]", ".", "add", "(", "f\"{START_SYMBOL} -> {start_type}\"", ")", "\n", "", "for", "name", ",", "function_type_list", "in", "self", ".", "_function_types", ".", "items", "(", ")", ":", "\n", "                ", "for", "function_type", "in", "function_type_list", ":", "\n", "                    ", "actions", "[", "str", "(", "function_type", ")", "]", ".", "add", "(", "f\"{function_type} -> {name}\"", ")", "\n", "if", "isinstance", "(", "function_type", ",", "FunctionType", ")", ":", "\n", "                        ", "return_type", "=", "function_type", ".", "return_type", "\n", "arg_types", "=", "function_type", ".", "argument_types", "\n", "right_side", "=", "f\"[{function_type}, {', '.join(str(arg_type) for arg_type in arg_types)}]\"", "\n", "actions", "[", "str", "(", "return_type", ")", "]", ".", "add", "(", "f\"{return_type} -> {right_side}\"", ")", "\n", "", "", "", "self", ".", "_nonterminal_productions", "=", "{", "\n", "key", ":", "sorted", "(", "value", ")", "for", "key", ",", "value", "in", "actions", ".", "items", "(", ")", "\n", "}", "\n", "", "return", "self", ".", "_nonterminal_productions", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.all_possible_productions": [[367, 376], ["set", "domain_language.DomainLanguage.get_nonterminal_productions().values", "sorted", "set.update", "domain_language.DomainLanguage.get_nonterminal_productions"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.values", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.get_nonterminal_productions"], ["", "def", "all_possible_productions", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        Returns a sorted list of all production rules in the grammar induced by\n        :func:`get_nonterminal_productions`.\n        \"\"\"", "\n", "all_actions", "=", "set", "(", ")", "\n", "for", "action_set", "in", "self", ".", "get_nonterminal_productions", "(", ")", ".", "values", "(", ")", ":", "\n", "            ", "all_actions", ".", "update", "(", "action_set", ")", "\n", "", "return", "sorted", "(", "all_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.logical_form_to_action_sequence": [[377, 412], ["tensor2struct.languages.dsl.common.util.lisp_to_nested_expression", "transitions.insert", "domain_language.DomainLanguage._get_transitions", "tensor2struct.languages.dsl.common.ParsingError", "logger.error"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.common.util.lisp_to_nested_expression", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.insert", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage._get_transitions"], ["", "def", "logical_form_to_action_sequence", "(", "self", ",", "logical_form", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        Converts a logical form into a linearization of the production rules from its abstract\n        syntax tree.  The linearization is top-down, depth-first.\n\n        Each production rule is formatted as \"LHS -> RHS\", where \"LHS\" is a single non-terminal\n        type, and RHS is either a terminal or a list of non-terminals (other possible values for\n        RHS in a more general context-free grammar are not produced by our grammar induction\n        logic).\n\n        Non-terminals are `types` in the grammar, either basic types (like ``int``, ``str``, or\n        some class that you define), or functional types, represented with angle brackets with a\n        colon separating arguments from the return type.  Multi-argument functions have commas\n        separating their argument types.  For example, ``<int:int>`` is a function that takes an\n        integer and returns an integer, and ``<int,int:int>`` is a function that takes two integer\n        arguments and returns an integer.\n\n        As an example translation from logical form to complete action sequence, the logical form\n        ``(add 2 3)`` would be translated to ``['@start@ -> int', 'int -> [<int,int:int>, int, int]',\n        '<int,int:int> -> add', 'int -> 2', 'int -> 3']``.\n        \"\"\"", "\n", "expression", "=", "util", ".", "lisp_to_nested_expression", "(", "logical_form", ")", "\n", "try", ":", "\n", "            ", "transitions", ",", "start_type", "=", "self", ".", "_get_transitions", "(", "\n", "expression", ",", "expected_type", "=", "None", "\n", ")", "\n", "if", "self", ".", "_start_types", "and", "start_type", "not", "in", "self", ".", "_start_types", ":", "\n", "                ", "raise", "ParsingError", "(", "\n", "f\"Expression had unallowed start type of {start_type}: {expression}\"", "\n", ")", "\n", "", "", "except", "ParsingError", "as", "error", ":", "\n", "            ", "logger", ".", "error", "(", "f\"Error parsing logical form: {logical_form}: {error}\"", ")", "\n", "raise", "\n", "", "transitions", ".", "insert", "(", "0", ",", "f\"@start@ -> {start_type}\"", ")", "\n", "return", "transitions", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.action_sequence_to_logical_form": [[413, 441], ["nltk.Tree", "domain_language.nltk_tree_to_logical_form", "action.split", "domain_language.DomainLanguage._construct_node_from_actions", "logger.error", "logger.error", "tensor2struct.languages.dsl.common.ParsingError", "logger.error"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.nltk_tree_to_logical_form", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage._construct_node_from_actions"], ["", "def", "action_sequence_to_logical_form", "(", "self", ",", "action_sequence", ":", "List", "[", "str", "]", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Takes an action sequence as produced by :func:`logical_form_to_action_sequence`, which is a\n        linearization of an abstract syntax tree, and reconstructs the logical form defined by that\n        abstract syntax tree.\n        \"\"\"", "\n", "# Basic outline: we assume that the bracketing that we get in the RHS of each action is the", "\n", "# correct bracketing for reconstructing the logical form.  This is true when there is no", "\n", "# currying in the action sequence.  Given this assumption, we just need to construct a tree", "\n", "# from the action sequence, then output all of the leaves in the tree, with brackets around", "\n", "# the children of all non-terminal nodes.", "\n", "\n", "remaining_actions", "=", "[", "action", ".", "split", "(", "\" -> \"", ")", "for", "action", "in", "action_sequence", "]", "\n", "tree", "=", "Tree", "(", "remaining_actions", "[", "0", "]", "[", "1", "]", ",", "[", "]", ")", "\n", "\n", "try", ":", "\n", "            ", "remaining_actions", "=", "self", ".", "_construct_node_from_actions", "(", "\n", "tree", ",", "remaining_actions", "[", "1", ":", "]", "\n", ")", "\n", "", "except", "ParsingError", ":", "\n", "            ", "logger", ".", "error", "(", "\"Error parsing action sequence: %s\"", ",", "action_sequence", ")", "\n", "raise", "\n", "\n", "", "if", "remaining_actions", ":", "\n", "            ", "logger", ".", "error", "(", "\"Error parsing action sequence: %s\"", ",", "action_sequence", ")", "\n", "logger", ".", "error", "(", "\"Remaining actions were: %s\"", ",", "remaining_actions", ")", "\n", "raise", "ParsingError", "(", "\"Extra actions in action sequence\"", ")", "\n", "", "return", "nltk_tree_to_logical_form", "(", "tree", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.add_predicate": [[442, 483], ["inspect.signature", "domain_language.PredicateType.get_type", "domain_language.PredicateType.get_function_type", "domain_language.DomainLanguage._function_types[].append", "domain_language.PredicateType.get_type", "inspect.signature.parameters.items"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.PredicateType.get_type", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.PredicateType.get_function_type", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.PredicateType.get_type", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], ["", "def", "add_predicate", "(", "\n", "self", ",", "name", ":", "str", ",", "function", ":", "Callable", ",", "side_arguments", ":", "List", "[", "str", "]", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Adds a predicate to this domain language.  Typically you do this with the ``@predicate``\n        decorator on the methods in your class.  But, if you need to for whatever reason, you can\n        also call this function yourself with a (type-annotated) function to add it to your\n        language.\n\n        Parameters\n        ----------\n        name : ``str``\n            The name that we will use in the induced language for this function.\n        function : ``Callable``\n            The function that gets called when executing a predicate with the given name.\n        side_arguments : ``List[str]``, optional\n            If given, we will ignore these arguments for the purposes of grammar induction.  This\n            is to allow passing extra arguments from the decoder state that are not explicitly part\n            of the language the decoder produces, such as the decoder's attention over the question\n            when a terminal was predicted.  If you use this functionality, you also `must` use\n            ``language.execute_action_sequence()`` instead of ``language.execute()``, and you must\n            pass the additional side arguments needed to that function.  See\n            :func:`execute_action_sequence` for more information.\n        \"\"\"", "\n", "side_arguments", "=", "side_arguments", "or", "[", "]", "\n", "signature", "=", "inspect", ".", "signature", "(", "function", ")", "\n", "argument_types", "=", "[", "\n", "param", ".", "annotation", "\n", "for", "name", ",", "param", "in", "signature", ".", "parameters", ".", "items", "(", ")", "\n", "if", "name", "not", "in", "side_arguments", "\n", "]", "\n", "return_type", "=", "signature", ".", "return_annotation", "\n", "argument_nltk_types", ":", "List", "[", "PredicateType", "]", "=", "[", "\n", "PredicateType", ".", "get_type", "(", "arg_type", ")", "for", "arg_type", "in", "argument_types", "\n", "]", "\n", "return_nltk_type", "=", "PredicateType", ".", "get_type", "(", "return_type", ")", "\n", "function_nltk_type", "=", "PredicateType", ".", "get_function_type", "(", "\n", "argument_nltk_types", ",", "return_nltk_type", "\n", ")", "\n", "self", ".", "_functions", "[", "name", "]", "=", "function", "\n", "self", ".", "_function_types", "[", "name", "]", ".", "append", "(", "function_nltk_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.add_constant": [[484, 499], ["domain_language.PredicateType.get_type", "domain_language.DomainLanguage._function_types[].append", "type"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.PredicateType.get_type", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "add_constant", "(", "self", ",", "name", ":", "str", ",", "value", ":", "Any", ",", "type_", ":", "Type", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Adds a constant to this domain language.  You would typically just pass in a list of\n        constants to the ``super().__init__()`` call in your constructor, but you can also call\n        this method to add constants if it is more convenient.\n\n        Because we construct a grammar over this language for you, in order for the grammar to be\n        finite we cannot allow arbitrary constants.  Having a finite grammar is important when\n        you're doing semantic parsing - we need to be able to search over this space, and compute\n        normalized probability distributions.\n        \"\"\"", "\n", "value_type", "=", "type_", "if", "type_", "else", "type", "(", "value", ")", "\n", "constant_type", "=", "PredicateType", ".", "get_type", "(", "value_type", ")", "\n", "self", ".", "_functions", "[", "name", "]", "=", "lambda", ":", "value", "\n", "self", ".", "_function_types", "[", "name", "]", ".", "append", "(", "constant_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.is_nonterminal": [[500, 506], ["domain_language.DomainLanguage.get_nonterminal_productions"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.get_nonterminal_productions"], ["", "def", "is_nonterminal", "(", "self", ",", "symbol", ":", "str", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Determines whether an input symbol is a valid non-terminal in the grammar.\n        \"\"\"", "\n", "nonterminal_productions", "=", "self", ".", "get_nonterminal_productions", "(", ")", "\n", "return", "symbol", "in", "nonterminal_productions", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage._execute_expression": [[507, 553], ["isinstance", "isinstance", "isinstance", "domain_language.DomainLanguage._execute_expression", "domain_language.DomainLanguage._execute_expression", "domain_language.DomainLanguage.", "isinstance", "tensor2struct.languages.dsl.common.ExecutionError", "isinstance", "traceback.print_exc", "tensor2struct.languages.dsl.common.ExecutionError", "tensor2struct.languages.dsl.common.ExecutionError", "tensor2struct.languages.dsl.common.ExecutionError", "tensor2struct.languages.dsl.common.ExecutionError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage._execute_expression", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage._execute_expression"], ["", "def", "_execute_expression", "(", "self", ",", "expression", ":", "Any", ")", ":", "\n", "        ", "\"\"\"\n        This does the bulk of the work of executing a logical form, recursively executing a single\n        expression.  Basically, if the expression is a function we know about, we evaluate its\n        arguments then call the function.  If it's a list, we evaluate all elements of the list.\n        If it's a constant (or a zero-argument function), we evaluate the constant.\n        \"\"\"", "\n", "if", "isinstance", "(", "expression", ",", "list", ")", ":", "\n", "            ", "if", "isinstance", "(", "expression", "[", "0", "]", ",", "list", ")", ":", "\n", "                ", "function", "=", "self", ".", "_execute_expression", "(", "expression", "[", "0", "]", ")", "\n", "", "elif", "expression", "[", "0", "]", "in", "self", ".", "_functions", ":", "\n", "                ", "function", "=", "self", ".", "_functions", "[", "expression", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "                ", "if", "isinstance", "(", "expression", "[", "0", "]", ",", "str", ")", ":", "\n", "                    ", "raise", "ExecutionError", "(", "f\"Unrecognized function: {expression[0]}\"", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ExecutionError", "(", "f\"Unsupported expression type: {expression}\"", ")", "\n", "", "", "arguments", "=", "[", "self", ".", "_execute_expression", "(", "arg", ")", "for", "arg", "in", "expression", "[", "1", ":", "]", "]", "\n", "try", ":", "\n", "                ", "return", "function", "(", "*", "arguments", ")", "\n", "", "except", "(", "TypeError", ",", "ValueError", ")", ":", "\n", "                ", "traceback", ".", "print_exc", "(", ")", "\n", "raise", "ExecutionError", "(", "\n", "f\"Error executing expression {expression} (see stderr for stack trace)\"", "\n", ")", "\n", "", "", "elif", "isinstance", "(", "expression", ",", "str", ")", ":", "\n", "            ", "if", "expression", "not", "in", "self", ".", "_functions", ":", "\n", "                ", "raise", "ExecutionError", "(", "f\"Unrecognized constant: {expression}\"", ")", "\n", "# This is a bit of a quirk in how we represent constants and zero-argument functions.", "\n", "# For consistency, constants are wrapped in a zero-argument lambda.  So both constants", "\n", "# and zero-argument functions are callable in `self._functions`, and are `BasicTypes`", "\n", "# in `self._function_types`.  For these, we want to return", "\n", "# `self._functions[expression]()` _calling_ the zero-argument function.  If we get a", "\n", "# `FunctionType` in here, that means we're referring to the function as a first-class", "\n", "# object, instead of calling it (maybe as an argument to a higher-order function).  In", "\n", "# that case, we return the function _without_ calling it.", "\n", "# Also, we just check the first function type here, because we assume you haven't", "\n", "# registered the same function with both a constant type and a `FunctionType`.", "\n", "", "if", "isinstance", "(", "self", ".", "_function_types", "[", "expression", "]", "[", "0", "]", ",", "FunctionType", ")", ":", "\n", "                ", "return", "self", ".", "_functions", "[", "expression", "]", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "_functions", "[", "expression", "]", "(", ")", "\n", "", "return", "self", ".", "_functions", "[", "expression", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ExecutionError", "(", "\n", "\"Not sure how you got here. Please open a github issue with details.\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage._execute_sequence": [[555, 629], ["tensor2struct.languages.dsl.common.ExecutionError", "first_action.split", "isinstance", "right_side.split", "domain_language.DomainLanguage._execute_sequence", "domain_language.DomainLanguage._execute_sequence", "arguments.append", "function", "inspect.signature", "function", "non_kwargs.append", "function", "function"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage._execute_sequence", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage._execute_sequence", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "", "def", "_execute_sequence", "(", "\n", "self", ",", "action_sequence", ":", "List", "[", "str", "]", ",", "side_arguments", ":", "List", "[", "Dict", "]", "\n", ")", "->", "Tuple", "[", "Any", ",", "List", "[", "str", "]", ",", "List", "[", "Dict", "]", "]", ":", "\n", "        ", "\"\"\"\n        This does the bulk of the work of :func:`execute_action_sequence`, recursively executing\n        the functions it finds and trimming actions off of the action sequence.  The return value\n        is a tuple of (execution, remaining_actions), where the second value is necessary to handle\n        the recursion.\n        \"\"\"", "\n", "if", "not", "action_sequence", ":", "\n", "            ", "raise", "ExecutionError", "(", "\"invalid action sequence\"", ")", "\n", "", "first_action", "=", "action_sequence", "[", "0", "]", "\n", "remaining_actions", "=", "action_sequence", "[", "1", ":", "]", "\n", "remaining_side_args", "=", "side_arguments", "[", "1", ":", "]", "if", "side_arguments", "else", "None", "\n", "right_side", "=", "first_action", ".", "split", "(", "\" -> \"", ")", "[", "1", "]", "\n", "if", "right_side", "in", "self", ".", "_functions", ":", "\n", "            ", "function", "=", "self", ".", "_functions", "[", "right_side", "]", "\n", "# mypy doesn't like this check, saying that Callable isn't a reasonable thing to pass", "\n", "# here.  But it works just fine; I'm not sure why mypy complains about it.", "\n", "if", "isinstance", "(", "function", ",", "Callable", ")", ":", "# type: ignore", "\n", "                ", "function_arguments", "=", "inspect", ".", "signature", "(", "function", ")", ".", "parameters", "\n", "if", "not", "function_arguments", ":", "\n", "# This was a zero-argument function / constant that was registered as a lambda", "\n", "# function, for consistency of execution in `execute()`.", "\n", "                    ", "execution_value", "=", "function", "(", ")", "\n", "", "elif", "side_arguments", ":", "\n", "                    ", "kwargs", "=", "{", "}", "\n", "non_kwargs", "=", "[", "]", "\n", "for", "argument_name", "in", "function_arguments", ":", "\n", "                        ", "if", "argument_name", "in", "side_arguments", "[", "0", "]", ":", "\n", "                            ", "kwargs", "[", "argument_name", "]", "=", "side_arguments", "[", "0", "]", "[", "argument_name", "]", "\n", "", "else", ":", "\n", "                            ", "non_kwargs", ".", "append", "(", "argument_name", ")", "\n", "", "", "if", "kwargs", "and", "non_kwargs", ":", "\n", "# This is a function that has both side arguments and logical form", "\n", "# arguments - we curry the function so only the logical form arguments are", "\n", "# left.", "\n", "                        ", "def", "curried_function", "(", "*", "args", ")", ":", "\n", "                            ", "return", "function", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "execution_value", "=", "curried_function", "\n", "", "elif", "kwargs", ":", "\n", "# This is a function that _only_ has side arguments - we just call the", "\n", "# function and return a value.", "\n", "                        ", "execution_value", "=", "function", "(", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "# This is a function that has logical form arguments, but no side arguments", "\n", "# that match what we were given - just return the function itself.", "\n", "                        ", "execution_value", "=", "function", "\n", "", "", "else", ":", "\n", "                    ", "execution_value", "=", "function", "\n", "", "", "return", "execution_value", ",", "remaining_actions", ",", "remaining_side_args", "\n", "", "else", ":", "\n", "# This is a non-terminal expansion, like 'int -> [<int:int>, int, int]'.  We need to", "\n", "# get the function and its arguments, then call the function with its arguments.", "\n", "# Because we linearize the abstract syntax tree depth first, left-to-right, we can just", "\n", "# recursively call `_execute_sequence` for the function and all of its arguments, and", "\n", "# things will just work.", "\n", "            ", "right_side_parts", "=", "right_side", ".", "split", "(", "\", \"", ")", "\n", "\n", "# We don't really need to know what the types are, just how many of them there are, so", "\n", "# we recurse the right number of times.", "\n", "function", ",", "remaining_actions", ",", "remaining_side_args", "=", "self", ".", "_execute_sequence", "(", "\n", "remaining_actions", ",", "remaining_side_args", "\n", ")", "\n", "arguments", "=", "[", "]", "\n", "for", "_", "in", "right_side_parts", "[", "1", ":", "]", ":", "\n", "                ", "(", "\n", "argument", ",", "\n", "remaining_actions", ",", "\n", "remaining_side_args", ",", "\n", ")", "=", "self", ".", "_execute_sequence", "(", "remaining_actions", ",", "remaining_side_args", ")", "\n", "arguments", ".", "append", "(", "argument", ")", "\n", "", "return", "function", "(", "*", "arguments", ")", ",", "remaining_actions", ",", "remaining_side_args", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage._get_transitions": [[630, 683], ["isinstance", "domain_language.DomainLanguage._get_function_transitions", "zip", "isinstance", "len", "len", "tensor2struct.languages.dsl.common.ParsingError", "argument_transitions.extend", "tensor2struct.languages.dsl.common.ParsingError", "tensor2struct.languages.dsl.common.ParsingError", "len", "domain_language.DomainLanguage._get_transitions", "tensor2struct.languages.dsl.common.ParsingError", "tensor2struct.languages.dsl.common.ParsingError", "tensor2struct.languages.dsl.common.ParsingError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage._get_function_transitions", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage._get_transitions"], ["", "", "def", "_get_transitions", "(", "\n", "self", ",", "expression", ":", "Any", ",", "expected_type", ":", "PredicateType", "\n", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "PredicateType", "]", ":", "\n", "        ", "\"\"\"\n        This is used when converting a logical form into an action sequence.  This piece\n        recursively translates a lisp expression into an action sequence, making sure we match the\n        expected type (or using the expected type to get the right type for constant expressions).\n        \"\"\"", "\n", "if", "isinstance", "(", "expression", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "(", "\n", "function_transitions", ",", "\n", "return_type", ",", "\n", "argument_types", ",", "\n", ")", "=", "self", ".", "_get_function_transitions", "(", "expression", "[", "0", "]", ",", "expected_type", ")", "\n", "if", "len", "(", "argument_types", ")", "!=", "len", "(", "expression", "[", "1", ":", "]", ")", ":", "\n", "                ", "raise", "ParsingError", "(", "\n", "f\"Wrong number of arguments for function in {expression}\"", "\n", ")", "\n", "", "argument_transitions", "=", "[", "]", "\n", "for", "argument_type", ",", "subexpression", "in", "zip", "(", "argument_types", ",", "expression", "[", "1", ":", "]", ")", ":", "\n", "                ", "argument_transitions", ".", "extend", "(", "\n", "self", ".", "_get_transitions", "(", "subexpression", ",", "argument_type", ")", "[", "0", "]", "\n", ")", "\n", "", "return", "function_transitions", "+", "argument_transitions", ",", "return_type", "\n", "", "elif", "isinstance", "(", "expression", ",", "str", ")", ":", "\n", "            ", "if", "expression", "not", "in", "self", ".", "_functions", ":", "\n", "                ", "raise", "ParsingError", "(", "f\"Unrecognized constant: {expression}\"", ")", "\n", "", "constant_types", "=", "self", ".", "_function_types", "[", "expression", "]", "\n", "if", "len", "(", "constant_types", ")", "==", "1", ":", "\n", "                ", "constant_type", "=", "constant_types", "[", "0", "]", "\n", "# This constant had only one type; that's the easy case.", "\n", "if", "expected_type", "and", "expected_type", "!=", "constant_type", ":", "\n", "                    ", "raise", "ParsingError", "(", "\n", "f\"{expression} did not have expected type {expected_type} \"", "\n", "f\"(found {constant_type})\"", "\n", ")", "\n", "", "return", "[", "f\"{constant_type} -> {expression}\"", "]", ",", "constant_type", "\n", "", "else", ":", "\n", "                ", "if", "not", "expected_type", ":", "\n", "                    ", "raise", "ParsingError", "(", "\n", "\"With no expected type and multiple types to pick from \"", "\n", "f\"I don't know what type to use (constant was {expression})\"", "\n", ")", "\n", "", "if", "expected_type", "not", "in", "constant_types", ":", "\n", "                    ", "raise", "ParsingError", "(", "\n", "f\"{expression} did not have expected type {expected_type} \"", "\n", "f\"(found these options: {constant_types}; none matched)\"", "\n", ")", "\n", "", "return", "[", "f\"{expected_type} -> {expression}\"", "]", ",", "expected_type", "\n", "\n", "", "", "else", ":", "\n", "            ", "raise", "ParsingError", "(", "\n", "\"Not sure how you got here. Please open an issue on github with details.\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage._get_function_transitions": [[685, 736], ["isinstance", "transitions.insert", "domain_language.DomainLanguage._get_transitions", "isinstance", "tensor2struct.languages.dsl.common.ParsingError", "tensor2struct.languages.dsl.common.ParsingError", "isinstance", "len", "tensor2struct.languages.dsl.common.ParsingError", "tensor2struct.languages.dsl.common.ParsingError", "tensor2struct.languages.dsl.common.ParsingError", "str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.insert", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage._get_transitions"], ["", "", "def", "_get_function_transitions", "(", "\n", "self", ",", "expression", ":", "Union", "[", "str", ",", "List", "]", ",", "expected_type", ":", "PredicateType", "\n", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "PredicateType", ",", "List", "[", "PredicateType", "]", "]", ":", "\n", "        ", "\"\"\"\n        A helper method for ``_get_transitions``.  This gets the transitions for the predicate\n        itself in a function call.  If we only had simple functions (e.g., \"(add 2 3)\"), this would\n        be pretty straightforward and we wouldn't need a separate method to handle it.  We split it\n        out into its own method because handling higher-order functions is complicated (e.g.,\n        something like \"((negate add) 2 3)\").\n        \"\"\"", "\n", "# This first block handles getting the transitions and function type (and some error", "\n", "# checking) _just for the function itself_.  If this is a simple function, this is easy; if", "\n", "# it's a higher-order function, it involves some recursion.", "\n", "if", "isinstance", "(", "expression", ",", "list", ")", ":", "\n", "# This is a higher-order function.  TODO(mattg): we'll just ignore type checking on", "\n", "# higher-order functions, for now.", "\n", "            ", "transitions", ",", "function_type", "=", "self", ".", "_get_transitions", "(", "expression", ",", "None", ")", "\n", "", "elif", "expression", "in", "self", ".", "_functions", ":", "\n", "            ", "name", "=", "expression", "\n", "function_types", "=", "self", ".", "_function_types", "[", "expression", "]", "\n", "if", "len", "(", "function_types", ")", "!=", "1", ":", "\n", "                ", "raise", "ParsingError", "(", "\n", "f\"{expression} had multiple types; this is not yet supported for functions\"", "\n", ")", "\n", "", "function_type", "=", "function_types", "[", "0", "]", "\n", "transitions", "=", "[", "f\"{function_type} -> {name}\"", "]", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "expression", ",", "str", ")", ":", "\n", "                ", "raise", "ParsingError", "(", "f\"Unrecognized function: {expression[0]}\"", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ParsingError", "(", "f\"Unsupported expression type: {expression}\"", ")", "\n", "", "", "if", "not", "isinstance", "(", "function_type", ",", "FunctionType", ")", ":", "\n", "            ", "raise", "ParsingError", "(", "\n", "f\"Zero-arg function or constant called with arguments: {name}\"", "\n", ")", "\n", "\n", "# Now that we have the transitions for the function itself, and the function's type, we can", "\n", "# get argument types and do the rest of the transitions.", "\n", "", "argument_types", "=", "function_type", ".", "argument_types", "\n", "return_type", "=", "function_type", ".", "return_type", "\n", "right_side", "=", "(", "\n", "f'[{function_type}, {\", \".join(str(arg) for arg in argument_types)}]'", "\n", ")", "\n", "first_transition", "=", "f\"{return_type} -> {right_side}\"", "\n", "transitions", ".", "insert", "(", "0", ",", "first_transition", ")", "\n", "if", "expected_type", "and", "expected_type", "!=", "return_type", ":", "\n", "            ", "raise", "ParsingError", "(", "\n", "f\"{expression} did not have expected type {expected_type} \"", "\n", "f\"(found {return_type})\"", "\n", ")", "\n", "", "return", "transitions", ",", "return_type", ",", "argument_types", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage._construct_node_from_actions": [[737, 784], ["domain_language.DomainLanguage.pop", "logger.error", "tensor2struct.languages.dsl.common.ParsingError", "current_node.label", "logger.error", "logger.error", "logger.error", "tensor2struct.languages.dsl.common.ParsingError", "right_side[].split", "current_node.append", "nltk.Tree", "current_node.append", "domain_language.DomainLanguage._construct_node_from_actions", "nltk.Tree"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage._construct_node_from_actions"], ["", "def", "_construct_node_from_actions", "(", "\n", "self", ",", "current_node", ":", "Tree", ",", "remaining_actions", ":", "List", "[", "List", "[", "str", "]", "]", "\n", ")", "->", "List", "[", "List", "[", "str", "]", "]", ":", "\n", "        ", "\"\"\"\n        Given a current node in the logical form tree, and a list of actions in an action sequence,\n        this method fills in the children of the current node from the action sequence, then\n        returns whatever actions are left.\n\n        For example, we could get a node with type ``c``, and an action sequence that begins with\n        ``c -> [<r,c>, r]``.  This method will add two children to the input node, consuming\n        actions from the action sequence for nodes of type ``<r,c>`` (and all of its children,\n        recursively) and ``r`` (and all of its children, recursively).  This method assumes that\n        action sequences are produced `depth-first`, so all actions for the subtree under ``<r,c>``\n        appear before actions for the subtree under ``r``.  If there are any actions in the action\n        sequence after the ``<r,c>`` and ``r`` subtrees have terminated in leaf nodes, they will be\n        returned.\n        \"\"\"", "\n", "if", "not", "remaining_actions", ":", "\n", "            ", "logger", ".", "error", "(", "\"No actions left to construct current node: %s\"", ",", "current_node", ")", "\n", "raise", "ParsingError", "(", "\"Incomplete action sequence\"", ")", "\n", "", "left_side", ",", "right_side", "=", "remaining_actions", ".", "pop", "(", "0", ")", "\n", "if", "left_side", "!=", "current_node", ".", "label", "(", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Current node: %s\"", ",", "current_node", ")", "\n", "logger", ".", "error", "(", "\"Next action: %s -> %s\"", ",", "left_side", ",", "right_side", ")", "\n", "logger", ".", "error", "(", "\"Remaining actions were: %s\"", ",", "remaining_actions", ")", "\n", "raise", "ParsingError", "(", "\"Current node does not match next action\"", ")", "\n", "", "if", "right_side", "[", "0", "]", "==", "\"[\"", ":", "\n", "# This is a non-terminal expansion, with more than one child node.", "\n", "            ", "for", "child_type", "in", "right_side", "[", "1", ":", "-", "1", "]", ".", "split", "(", "\", \"", ")", ":", "\n", "                ", "child_node", "=", "Tree", "(", "child_type", ",", "[", "]", ")", "\n", "current_node", ".", "append", "(", "\n", "child_node", "\n", ")", "# you add a child to an nltk.Tree with `append`", "\n", "# For now, we assume that all children in a list like this are non-terminals, so we", "\n", "# recurse on them.  I'm pretty sure that will always be true for the way our", "\n", "# grammar induction works.  We can revisit this later if we need to.", "\n", "remaining_actions", "=", "self", ".", "_construct_node_from_actions", "(", "\n", "child_node", ",", "remaining_actions", "\n", ")", "\n", "", "", "else", ":", "\n", "# The current node is a pre-terminal; we'll add a single terminal child.  By", "\n", "# construction, the right-hand side of our production rules are only ever terminal", "\n", "# productions or lists of non-terminals.", "\n", "            ", "current_node", ".", "append", "(", "\n", "Tree", "(", "right_side", ",", "[", "]", ")", "\n", ")", "# you add a child to an nltk.Tree with `append`", "\n", "", "return", "remaining_actions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.is_callable": [[28, 35], ["isinstance", "getattr"], "function", ["None"], ["def", "is_callable", "(", "type_", ":", "Type", ")", "->", "bool", ":", "\n", "    ", "if", "sys", ".", "version_info", "<", "(", "3", ",", "7", ")", ":", "\n", "        ", "from", "typing", "import", "CallableMeta", "# type: ignore", "\n", "\n", "return", "isinstance", "(", "type_", ",", "CallableMeta", ")", "# type: ignore", "\n", "", "else", ":", "\n", "        ", "return", "getattr", "(", "type_", ",", "\"_name\"", ",", "None", ")", "==", "\"Callable\"", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.is_generic": [[37, 46], ["isinstance", "isinstance"], "function", ["None"], ["", "", "def", "is_generic", "(", "type_", ":", "Type", ")", "->", "bool", ":", "\n", "    ", "if", "sys", ".", "version_info", "<", "(", "3", ",", "7", ")", ":", "\n", "        ", "from", "typing", "import", "GenericMeta", "# type: ignore", "\n", "\n", "return", "isinstance", "(", "type_", ",", "GenericMeta", ")", "# type: ignore", "\n", "", "else", ":", "\n", "        ", "from", "typing", "import", "_GenericAlias", "# type: ignore", "\n", "\n", "return", "isinstance", "(", "type_", ",", "_GenericAlias", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.get_generic_name": [[48, 57], ["None"], "function", ["None"], ["", "", "def", "get_generic_name", "(", "type_", ":", "Type", ")", "->", "str", ":", "\n", "    ", "if", "sys", ".", "version_info", "<", "(", "3", ",", "7", ")", ":", "\n", "        ", "origin", "=", "type_", ".", "__origin__", ".", "__name__", "\n", "", "else", ":", "\n", "# In python 3.7, type_.__origin__ switched to the built-in class, instead of the typing", "\n", "# class.", "\n", "        ", "origin", "=", "type_", ".", "_name", "\n", "", "args", "=", "type_", ".", "__args__", "\n", "return", "f'{origin}[{\",\".join(arg.__name__ for arg in args)}]'", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.predicate": [[157, 166], ["setattr"], "function", ["None"], ["", "", "def", "predicate", "(", "function", ":", "Callable", ")", "->", "Callable", ":", "\n", "    ", "\"\"\"\n    This is intended to be used as a decorator when you are implementing your ``DomainLanguage``.\n    This marks a function on a ``DomainLanguage`` subclass as a predicate that can be used in the\n    language.  See the :class:`DomainLanguage` docstring for an example usage, and for what using\n    this does.\n    \"\"\"", "\n", "setattr", "(", "function", ",", "\"_is_predicate\"", ",", "True", ")", "\n", "return", "function", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.predicate_with_side_args": [[168, 187], ["setattr", "domain_language.predicate"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.predicate"], ["", "def", "predicate_with_side_args", "(", "side_arguments", ":", "List", "[", "str", "]", ")", "->", "Callable", ":", "\n", "    ", "\"\"\"\n    Like :func:`predicate`, but used when some of the arguments to the function are meant to be\n    provided by the decoder or other state, instead of from the language.  For example, you might\n    want to have a function use the decoder's attention over some input text when a terminal was\n    predicted.  That attention won't show up in the language productions.  Use this decorator, and\n    pass in the required state to :func:`DomainLanguage.execute_action_sequence`, if you need to\n    ignore some arguments when doing grammar induction.\n\n    In order for this to work out, the side arguments `must` be after any non-side arguments.  This\n    is because we use ``*args`` to pass the non-side arguments, and ``**kwargs`` to pass the side\n    arguments, and python requires that ``*args`` be before ``**kwargs``.\n    \"\"\"", "\n", "\n", "def", "decorator", "(", "function", ":", "Callable", ")", "->", "Callable", ":", "\n", "        ", "setattr", "(", "function", ",", "\"_side_arguments\"", ",", "side_arguments", ")", "\n", "return", "predicate", "(", "function", ")", "\n", "\n", "", "return", "decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.nltk_tree_to_logical_form": [[189, 207], ["len", "tree.label", "len", "tree[].label", "domain_language.nltk_tree_to_logical_form"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.nltk_tree_to_logical_form"], ["", "def", "nltk_tree_to_logical_form", "(", "tree", ":", "Tree", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Given an ``nltk.Tree`` representing the syntax tree that generates a logical form, this method\n    produces the actual (lisp-like) logical form, with all of the non-terminal symbols converted\n    into the correct number of parentheses.\n\n    This is used in the logic that converts action sequences back into logical forms.  It's very\n    unlikely that you will need this anywhere else.\n    \"\"\"", "\n", "# nltk.Tree actually inherits from `list`, so you use `len()` to get the number of children.", "\n", "# We're going to be explicit about checking length, instead of using `if tree:`, just to avoid", "\n", "# any funny business nltk might have done (e.g., it's really odd if `if tree:` evaluates to", "\n", "# `False` if there's a single leaf node with no children).", "\n", "if", "len", "(", "tree", ")", "==", "0", ":", "\n", "        ", "return", "tree", ".", "label", "(", ")", "\n", "", "if", "len", "(", "tree", ")", "==", "1", ":", "\n", "        ", "return", "tree", "[", "0", "]", ".", "label", "(", ")", "\n", "", "return", "\"(\"", "+", "\" \"", ".", "join", "(", "nltk_tree_to_logical_form", "(", "child", ")", "for", "child", "in", "tree", ")", "+", "\")\"", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.cogs.Node.__str__": [[19, 22], ["None"], "methods", ["None"], ["str_builder", ".", "append", "(", "\n", "f\"sketch eval: {self.sketch_cor_num/self.num_examples}, {self.sketch_cor_num}/{self.num_examples}\"", "\n", ")", "\n", "str_builder", ".", "append", "(", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.cogs.CogsGrammar.__init__": [[26, 44], ["nltk.parse.pchart.InsideChartParser", "nltk.parse.pchart.InsideChartParser", "map", "tensor2struct.utils.tree_kernels.KernelSST", "tensor2struct.utils.tree_kernels.KernelST", "tensor2struct.utils.tree_kernels.KernelPT"], "methods", ["None"], ["f\"denotation eval: {self.denotation_cor_num/self.num_examples}, {self.denotation_cor_num}/{self.num_examples}\"", "\n", ")", "\n", "return", "\"\\n\"", ".", "join", "(", "str_builder", ")", "\n", "", "else", ":", "\n", "            ", "return", "\"Empty stat\"", "\n", "\n", "", "", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_examples", ">", "0", ":", "\n", "            ", "rep", "=", "{", "}", "\n", "rep", "[", "\"sketch_eval\"", "]", "=", "self", ".", "sketch_cor_num", "/", "self", ".", "num_examples", "\n", "rep", "[", "\"sketch_eval_detail\"", "]", "=", "f\"{self.sketch_cor_num}/{self.num_examples}\"", "\n", "rep", "[", "\"lf_accuracy\"", "]", "=", "self", ".", "lf_cor_num", "/", "self", ".", "num_examples", "\n", "rep", "[", "\"lf_eval_detail\"", "]", "=", "f\"{self.lf_cor_num}/{self.num_examples}\"", "\n", "rep", "[", "\"exe_accuracy\"", "]", "=", "self", ".", "denotation_cor_num", "/", "self", ".", "num_examples", "\n", "rep", "[", "\"exe_eval_detail\"", "]", "=", "f\"{self.denotation_cor_num}/{self.num_examples}\"", "\n", "return", "rep", "\n", "", "else", ":", "\n", "            ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.cogs.CogsGrammar.parse_nl": [[45, 80], ["nl.split", "list", "tokens[].lower", "len", "len", "nltk.tree.Tree.fromstring", "cogs.CogsGrammar.nl_parser.parse", "ValueError", "len", "c_parser.parse"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse"], ["\n", "", "", "", "@", "attr", ".", "s", "\n", "class", "CogsItem", ":", "\n", "    ", "text", "=", "attr", ".", "ib", "(", ")", "\n", "code", "=", "attr", ".", "ib", "(", ")", "\n", "category", "=", "attr", ".", "ib", "(", ")", "\n", "\n", "\n", "", "@", "registry", ".", "register", "(", "\"dataset\"", ",", "\"cogs\"", ")", "\n", "class", "CogsDataset", "(", "dataset", ".", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "self", ".", "examples", "=", "[", "]", "\n", "\n", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "question", ",", "lf", ",", "category", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "item", "=", "CogsItem", "(", "question", ",", "lf", ",", "category", ")", "\n", "self", ".", "examples", ".", "append", "(", "item", ")", "\n", "\n", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "examples", "[", "idx", "]", "\n", "\n", "", "class", "Metrics", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "dataset", ",", "etype", "=", "None", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "stat", "=", "Stat", "(", "num_examples", "=", "len", "(", "dataset", ")", ")", "\n", "self", ".", "categorized_stat", "=", "collections", ".", "defaultdict", "(", "Stat", ")", "\n", "self", ".", "results", "=", "[", "]", "\n", "\n", "", "def", "add_one", "(", "self", ",", "item", ",", "inferred_code", ")", ":", "\n", "            ", "ret_dict", "=", "self", ".", "eval_one", "(", "item", ".", "code", ",", "inferred_code", ",", "item", ".", "category", ")", "\n", "ret_dict", "[", "\"question\"", "]", "=", "item", ".", "text", "# for debug", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.cogs.CogsGrammar.parse": [[81, 138], ["nl.lower().split", "re.split", "cogs.CogsGrammar.convert_nodes_to_depgraph", "len", "nltk.tree.Tree.fromstring", "cogs.Node", "arg[].isdigit", "chunk.strip().split.strip().split.strip().split", "chunk.strip().split.strip().split.index", "chunk.strip().split.strip().split.index", "nl.lower", "int", "nl.lower().split.index", "arg[].lower", "chunk[].index", "chunk[].index", "cogs.CogsGrammar.parse.resolve_arg"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.cogs.CogsGrammar.convert_nodes_to_depgraph", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], ["self", ".", "results", ".", "append", "(", "ret_dict", ")", "\n", "\n", "", "def", "add_beams", "(", "self", ",", "item", ",", "inferred_codes", ")", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "def", "eval_one", "(", "self", ",", "gold_code", ",", "inferred_code", ",", "category", ")", ":", "\n", "            ", "ret_dic", "=", "{", "}", "\n", "ret_dic", "[", "\"gold_code\"", "]", "=", "gold_code", "\n", "ret_dic", "[", "\"inferred_code\"", "]", "=", "inferred_code", "\n", "ret_dic", "[", "\"lf_eval\"", "]", "=", "gold_code", "==", "inferred_code", "\n", "ret_dic", "[", "\"denotation_eval\"", "]", "=", "None", "\n", "\n", "self", ".", "categorized_stat", "[", "category", "]", ".", "num_examples", "+=", "1", "\n", "\n", "if", "ret_dic", "[", "\"lf_eval\"", "]", ":", "\n", "                ", "self", ".", "stat", ".", "lf_cor_num", "+=", "1", "\n", "self", ".", "categorized_stat", "[", "category", "]", ".", "lf_cor_num", "+=", "1", "\n", "", "if", "ret_dic", "[", "\"denotation_eval\"", "]", ":", "\n", "                ", "self", ".", "stat", ".", "denotation_cor_num", "+=", "1", "\n", "self", ".", "categorized_stat", "[", "category", "]", ".", "denotation_cor_num", "+=", "1", "\n", "", "return", "ret_dic", "\n", "\n", "", "def", "finalize", "(", "self", ")", ":", "\n", "            ", "ret_stats", "=", "{", "\"per_item\"", ":", "self", ".", "results", ",", "\"total_scores\"", ":", "self", ".", "stat", ".", "to_dict", "(", ")", "}", "\n", "for", "category", "in", "self", ".", "categorized_stat", ":", "\n", "                ", "ret_stats", "[", "category", "]", "=", "self", ".", "categorized_stat", "[", "category", "]", ".", "to_dict", "(", ")", "\n", "", "return", "ret_stats", "\n", "\n", "", "", "", "@", "registry", ".", "register", "(", "\"dataset\"", ",", "\"cogs_grammar\"", ")", "\n", "class", "CogsDatasetGrammar", "(", "CogsDataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "pass", "", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.cogs.CogsGrammar.convert_nodes_to_depgraph": [[139, 148], ["nltk.parse.DependencyGraph", "nltk.parse.DependencyGraph.tree", "conll_str.append", "str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.cogs.CogsGrammar.printree": [[149, 160], ["isinstance", "cogs.CogsGrammar.printree", "nltk_tree.label"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.cogs.CogsGrammar.printree"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.cogs.CogsGrammar.kernel": [[161, 170], ["cogs.CogsGrammar.printree", "cogs.CogsGrammar.printree", "cogs.CogsGrammar.kernel_string"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.cogs.CogsGrammar.printree", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.cogs.CogsGrammar.printree", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.cogs.CogsGrammar.kernel_string"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.cogs.CogsGrammar.kernel_string": [[171, 186], ["tensor2struct.utils.tree.Tree.fromPrologString", "tensor2struct.utils.tree.Tree.fromPrologString", "cogs.CogsGrammar._kernel.kernel", "cogs.CogsGrammar._kernel.kernel", "cogs.CogsGrammar._kernel.kernel"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.fromPrologString", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.Tree.fromPrologString", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.kernel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.kernel", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.kernel"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.cogs_pcfg.normalize": [[308, 312], ["sum", "len"], "function", ["None"], ["def", "normalize", "(", "probs", ")", ":", "\n", "    ", "leftover_prob", "=", "1", "-", "sum", "(", "probs", ")", "\n", "probs", "=", "probs", "+", "leftover_prob", "/", "len", "(", "probs", ")", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.twice": [[46, 49], ["None"], "methods", ["None"], ["", "def", "load_from_txt", "(", "self", ",", "path", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.thrice": [[50, 53], ["None"], "methods", ["None"], ["                ", "text", ",", "code", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"IN: \"", ")", "[", "-", "1", "]", ".", "split", "(", "\" OUT: \"", ")", "\n", "norm_code", "=", "self", ".", "normalize", "(", "code", ")", "\n", "norm_text", "=", "self", ".", "normalize", "(", "text", ")", "\n", "examples", ".", "append", "(", "ScanItem", "(", "norm_text", ",", "norm_code", ",", "line", ")", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang._and": [[54, 57], ["None"], "methods", ["None"], ["", "", "return", "examples", "\n", "\n", "", "@", "staticmethod", "\n", "def", "normalize", "(", "s", ")", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.after": [[58, 61], ["None"], "methods", ["None"], ["# s += '.'", "\n", "        ", "s", "=", "re", ".", "sub", "(", "r\"I_\"", ",", "r\"\"", ",", "s", ")", "\n", "s", "=", "re", ".", "sub", "(", "r\"([.!?])\"", ",", "r\" \\1\"", ",", "s", ")", "\n", "return", "s", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.walk_pd": [[62, 77], ["None"], "methods", ["None"], ["\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "examples", "[", "idx", "]", "\n", "\n", "", "class", "Metrics", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "dataset", ",", "etype", "=", "None", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_examples", "=", "len", "(", "dataset", ")", "\n", "self", ".", "counter", "=", "0", "\n", "self", ".", "predictions", "=", "[", "]", "\n", "\n", "", "def", "add_one", "(", "self", ",", "item", ",", "prediction", ",", "orig_question", "=", "None", ")", ":", "\n", "            ", "if", "item", ".", "code", "==", "prediction", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.walk_d": [[78, 85], ["None"], "methods", ["None"], ["                ", "self", ".", "counter", "+=", "1", "\n", "", "summary", "=", "{", "\n", "\"text\"", ":", "item", ".", "text", ",", "\n", "\"gold_code\"", ":", "item", ".", "code", ",", "\n", "\"predicted_code\"", ":", "prediction", ",", "\n", "}", "\n", "self", ".", "predictions", ".", "append", "(", "summary", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.walk": [[86, 89], ["None"], "methods", ["None"], ["", "def", "finalize", "(", "self", ")", ":", "\n", "            ", "results", "=", "{", "\n", "\"predictions\"", ":", "self", ".", "predictions", ",", "\n", "\"total_scores\"", ":", "{", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run_pd": [[90, 105], ["None"], "methods", ["None"], ["\"lf_accuracy\"", ":", "self", ".", "counter", "/", "self", ".", "num_examples", ",", "\n", "\"exe_accuracy\"", ":", "self", ".", "counter", "/", "self", ".", "num_examples", ",", "\n", "}", ",", "\n", "}", "\n", "return", "results", "\n", "\n", "\n", "", "", "", "@", "registry", ".", "register", "(", "\"dataset\"", ",", "\"scan_lf\"", ")", "\n", "class", "ScanGrammarDataset", "(", "ScanDataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "[", "path", "]", ")", "\n", "self", ".", "parser", "=", "scan", ".", "ScanGrammar", "(", ")", "\n", "self", ".", "parse_all_example", "(", ")", "\n", "\n", "", "def", "parse_all_example", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run_d": [[106, 113], ["None"], "methods", ["None"], ["\n", "for", "example", "in", "tqdm", ".", "tqdm", "(", "self", ".", "examples", ",", "desc", "=", "\"parsing\"", ")", ":", "\n", "            ", "lf", "=", "self", ".", "parser", ".", "parse", "(", "example", ".", "text", ",", "example", ".", "code", ")", "\n", "example", ".", "code", "=", "lf", "\n", "\n", "", "", "", "@", "registry", ".", "register", "(", "\"dataset\"", ",", "\"scan_aug\"", ")", "\n", "class", "ScanAugDataset", "(", "ScanDataset", ")", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.run": [[114, 117], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "num_aug", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "[", "path", "]", ")", "\n", "self", ".", "num_aug", "=", "num_aug", "\n", "self", ".", "tag_orig_data", "=", "\"<ORIG>\"", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.look_pd": [[118, 133], ["None"], "methods", ["None"], ["self", ".", "tag_aug_data", "=", "\"<AUG>\"", "\n", "self", ".", "tag_aug_token", "=", "\"@\"", "\n", "\n", "# for original data, we tag it so that a model is aware of this", "\n", "for", "example", "in", "self", ".", "examples", ":", "\n", "            ", "example", ".", "text", "=", "f\"{self.tag_orig_data} {example.text}\"", "\n", "\n", "", "if", "num_aug", ":", "\n", "            ", "self", ".", "generate_aug_example", "(", "num_aug", ")", "\n", "\n", "", "", "def", "generate_aug_example", "(", "self", ",", "num_aug", ")", ":", "\n", "        ", "parser", "=", "scan", ".", "ScanGrammar", "(", ")", "\n", "sampled_examples", "=", "parser", ".", "sample", "(", "num_aug", ")", "\n", "\n", "for", "sample_program", ",", "sample_action_seqs", "in", "sampled_examples", ":", "\n", "            ", "aug_tokens", "=", "[", "f\"{self.tag_aug_token}{t}\"", "for", "t", "in", "sample_program", "]", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.look_d": [[134, 141], ["None"], "methods", ["None"], ["program_text", "=", "\" \"", ".", "join", "(", "[", "self", ".", "tag_aug_data", "]", "+", "aug_tokens", ")", "\n", "action_text", "=", "\" \"", ".", "join", "(", "sample_action_seqs", ")", "\n", "aug_example", "=", "ScanItem", "(", "text", "=", "program_text", ",", "code", "=", "action_text", ")", "\n", "self", ".", "examples", ".", "append", "(", "aug_example", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.look": [[142, 145], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.jump_pd": [[146, 161], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.jump_d": [[162, 169], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.jump": [[170, 173], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.turn_pd": [[174, 189], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.turn_d": [[190, 197], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.execute": [[198, 204], ["logical_form.replace.replace.replace", "logical_form.replace.replace.replace", "tensor2struct.languages.dsl.common.util.lisp_to_nested_expression", "scan.ActionLang.manual_dispatch", "scan.ActionLang._execute_expression"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.common.util.lisp_to_nested_expression", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.manual_dispatch", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage._execute_expression"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.manual_dispatch": [[205, 215], ["isinstance", "len", "scan.ActionLang.manual_dispatch", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.manual_dispatch"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.is_nonterminal": [[216, 231], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.__init__": [[244, 277], ["nltk.CFG.fromstring", "nltk.parse.ChartParser", "scan.ActionLang", "CONSTANTS.items", "nltk.CFG.fromstring", "nltk.parse.RecursiveDescentParser", "scan.ScanGrammar.action_lang.add_constant", "set"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.add_constant", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.parse": [[278, 291], ["scan.ScanGrammar.parse_command", "scan.ScanGrammar.translate_command_to_programs", "scan.ScanGrammar.remove_bracketing", "scan.ScanGrammar.action_lang.execute", "code.split", "scan.ScanGrammar.add_bracketing", "len", "len", "scan.ScanGrammar.split", "command.split"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.parse_command", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.translate_command_to_programs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.remove_bracketing", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.execute", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.add_bracketing"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.sample": [[292, 311], ["nltk.parse.generate.generate", "list", "random.shuffle", "len", "scan.ScanGrammar.add_bracketing", "ret_examples.append", "scan.ScanGrammar.action_lang.execute", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.add_bracketing", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.execute"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.remove_bracketing": [[312, 318], ["lf.replace().replace", "lf.replace"], "methods", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.add_bracketing": [[319, 357], ["scan.ScanGrammar.action_parser.parse", "scan.ScanGrammar.add_bracketing.parse_s"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.parse_command": [[358, 366], ["command.split", "list", "scan.ScanGrammar.command_parser.parse", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.kernel": [[367, 404], ["scan.ScanGrammar.kernel.printree"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.cogs.CogsGrammar.printree"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ScanGrammar.translate_command_to_programs": [[405, 437], ["scan.ScanGrammar.add_bracketing.parse_s"], "methods", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.common.errors.ParsingError.__init__": [[9, 12], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "message", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "message", "=", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.common.errors.ParsingError.__str__": [[13, 15], ["repr"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "repr", "(", "self", ".", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.common.errors.ExecutionError.__init__": [[24, 27], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "message", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "message", "=", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.common.errors.ExecutionError.__str__": [[28, 30], ["repr"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "repr", "(", "self", ".", "message", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.common.util.lisp_to_nested_expression": [[59, 79], ["lisp_string.split", "stack.pop.append", "stack.pop.append", "stack.append", "token.replace", "stack.pop"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.common.util.get_left_side_part": [[81, 84], ["action.split"], "function", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.common.util.get_right_side_parts": [[86, 93], ["action.split", "right_side[].split"], "function", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapperVisitor.__init__": [[22, 29], ["asdl.VisitorBase.__init__"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "# type: () -> None", "\n", "        ", "super", "(", "ASTWrapperVisitor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "constructors", "=", "{", "}", "# type: Dict[str, asdl.Constructor]", "\n", "self", ".", "sum_types", "=", "{", "}", "# type: Dict[str, asdl.Sum]", "\n", "self", ".", "product_types", "=", "{", "}", "# type: Dict[str, asdl.Product]", "\n", "self", ".", "fieldless_constructors", "=", "{", "}", "# type: Dict[str, asdl.Constructor]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapperVisitor.visitModule": [[30, 34], ["ast_util.ASTWrapperVisitor.visit"], "methods", ["None"], ["", "def", "visitModule", "(", "self", ",", "mod", ")", ":", "\n", "# type: (asdl.Module) -> None", "\n", "        ", "for", "dfn", "in", "mod", ".", "dfns", ":", "\n", "            ", "self", ".", "visit", "(", "dfn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapperVisitor.visitType": [[35, 38], ["ast_util.ASTWrapperVisitor.visit", "str"], "methods", ["None"], ["", "", "def", "visitType", "(", "self", ",", "type_", ")", ":", "\n", "# type: (asdl.Type) -> None", "\n", "        ", "self", ".", "visit", "(", "type_", ".", "value", ",", "str", "(", "type_", ".", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapperVisitor.visitSum": [[39, 44], ["ast_util.ASTWrapperVisitor.visit"], "methods", ["None"], ["", "def", "visitSum", "(", "self", ",", "sum_", ",", "name", ")", ":", "\n", "# type: (asdl.Sum, str) -> None", "\n", "        ", "self", ".", "sum_types", "[", "name", "]", "=", "sum_", "\n", "for", "t", "in", "sum_", ".", "types", ":", "\n", "            ", "self", ".", "visit", "(", "t", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapperVisitor.visitConstructor": [[45, 53], ["ast_util.ASTWrapperVisitor.visit"], "methods", ["None"], ["", "", "def", "visitConstructor", "(", "self", ",", "cons", ",", "_name", ")", ":", "\n", "# type: (asdl.Constructor, str) -> None", "\n", "        ", "assert", "cons", ".", "name", "not", "in", "self", ".", "constructors", "\n", "self", ".", "constructors", "[", "cons", ".", "name", "]", "=", "cons", "\n", "if", "not", "cons", ".", "fields", ":", "\n", "            ", "self", ".", "fieldless_constructors", "[", "cons", ".", "name", "]", "=", "cons", "\n", "", "for", "f", "in", "cons", ".", "fields", ":", "\n", "            ", "self", ".", "visit", "(", "f", ",", "cons", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapperVisitor.visitField": [[54, 60], ["ValueError"], "methods", ["None"], ["", "", "def", "visitField", "(", "self", ",", "field", ",", "name", ")", ":", "\n", "# type: (asdl.Field, str) -> None", "\n", "# pylint: disable=no-self-use", "\n", "        ", "if", "field", ".", "name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Field of type {} in {} lacks name\"", ".", "format", "(", "field", ".", "type", ",", "name", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapperVisitor.visitProduct": [[62, 67], ["ast_util.ASTWrapperVisitor.visit"], "methods", ["None"], ["", "", "def", "visitProduct", "(", "self", ",", "prod", ",", "name", ")", ":", "\n", "# type: (asdl.Product, str) -> None", "\n", "        ", "self", ".", "product_types", "[", "name", "]", "=", "prod", "\n", "for", "f", "in", "prod", ".", "fields", ":", "\n", "            ", "self", ".", "visit", "(", "f", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper.__init__": [[86, 126], ["ast_util.ASTWrapperVisitor", "ASTWrapperVisitor.visit", "set", "set", "ast_util.ASTWrapper.singular_types.update", "ast_util.ASTWrapper.singular_types.update", "sorted", "custom_primitive_type_checkers.keys", "ast_util.ASTWrapper.primitive_type_checkers.keys", "sorted", "ASTWrapperVisitor.fieldless_constructors.keys", "ast_util.ASTWrapper.sum_types.items", "ast_util.ASTWrapper.sum_types.items", "ast_util.ASTWrapper.sum_types.items"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], ["def", "__init__", "(", "self", ",", "ast_def", ",", "custom_primitive_type_checkers", "=", "{", "}", ")", ":", "\n", "# type: (asdl.Module, str) -> None", "\n", "        ", "self", ".", "ast_def", "=", "ast_def", "\n", "\n", "visitor", "=", "ASTWrapperVisitor", "(", ")", "\n", "visitor", ".", "visit", "(", "ast_def", ")", "\n", "\n", "self", ".", "constructors", "=", "visitor", ".", "constructors", "\n", "self", ".", "sum_types", "=", "visitor", ".", "sum_types", "\n", "self", ".", "product_types", "=", "visitor", ".", "product_types", "\n", "self", ".", "seq_fragment_constructors", "=", "{", "}", "\n", "self", ".", "primitive_type_checkers", "=", "{", "\n", "**", "self", ".", "default_primitive_type_checkers", ",", "\n", "**", "custom_primitive_type_checkers", ",", "\n", "}", "\n", "self", ".", "custom_primitive_types", "=", "set", "(", "custom_primitive_type_checkers", ".", "keys", "(", ")", ")", "\n", "self", ".", "primitive_types", "=", "set", "(", "self", ".", "primitive_type_checkers", ".", "keys", "(", ")", ")", "\n", "\n", "# Product types and constructors:", "\n", "# no need to decide upon a further type for these.", "\n", "self", ".", "singular_types", "=", "{", "}", "# type: Dict[str, SingularType]", "\n", "self", ".", "singular_types", ".", "update", "(", "self", ".", "constructors", ")", "\n", "self", ".", "singular_types", ".", "update", "(", "self", ".", "product_types", ")", "\n", "\n", "# IndexedSets for each sum type", "\n", "self", ".", "sum_type_vocabs", "=", "{", "\n", "name", ":", "sorted", "(", "t", ".", "name", "for", "t", "in", "sum_type", ".", "types", ")", "\n", "for", "name", ",", "sum_type", "in", "self", ".", "sum_types", ".", "items", "(", ")", "\n", "}", "\n", "self", ".", "constructor_to_sum_type", "=", "{", "\n", "constructor", ".", "name", ":", "name", "\n", "for", "name", ",", "sum_type", "in", "self", ".", "sum_types", ".", "items", "(", ")", "\n", "for", "constructor", "in", "sum_type", ".", "types", "\n", "}", "\n", "self", ".", "seq_fragment_constructor_to_sum_type", "=", "{", "\n", "constructor", ".", "name", ":", "name", "\n", "for", "name", ",", "sum_type", "in", "self", ".", "sum_types", ".", "items", "(", ")", "\n", "for", "constructor", "in", "sum_type", ".", "types", "\n", "}", "\n", "self", ".", "fieldless_constructors", "=", "sorted", "(", "visitor", ".", "fieldless_constructors", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper.types": [[127, 131], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "types", "(", "self", ")", ":", "\n", "# type: () -> Dict[str, Union[asdl.Sum, asdl.Product]]", "\n", "        ", "return", "self", ".", "ast_def", ".", "types", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper.root_type": [[132, 136], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "root_type", "(", "self", ")", ":", "\n", "# type: () -> str", "\n", "        ", "return", "self", ".", "_root_type", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper.add_sum_type": [[137, 144], ["ast_util.ASTWrapper._add_constructor"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper._add_constructor"], ["", "def", "add_sum_type", "(", "self", ",", "name", ",", "sum_type", ")", ":", "\n", "        ", "assert", "name", "not", "in", "self", ".", "sum_types", "\n", "self", ".", "sum_types", "[", "name", "]", "=", "sum_type", "\n", "self", ".", "types", "[", "name", "]", "=", "sum_type", "\n", "\n", "for", "type_", "in", "sum_type", ".", "types", ":", "\n", "            ", "self", ".", "_add_constructor", "(", "name", ",", "type_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper.add_constructors_to_sum_type": [[145, 149], ["ast_util.ASTWrapper._add_constructor"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper._add_constructor"], ["", "", "def", "add_constructors_to_sum_type", "(", "self", ",", "sum_type_name", ",", "constructors", ")", ":", "\n", "        ", "for", "constructor", "in", "constructors", ":", "\n", "            ", "self", ".", "_add_constructor", "(", "sum_type_name", ",", "constructor", ")", "\n", "", "self", ".", "sum_types", "[", "sum_type_name", "]", ".", "types", "+=", "constructors", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper.remove_product_type": [[150, 154], ["ast_util.ASTWrapper.singular_types.pop", "ast_util.ASTWrapper.product_types.pop", "ast_util.ASTWrapper.types.pop"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop"], ["", "def", "remove_product_type", "(", "self", ",", "product_type_name", ")", ":", "\n", "        ", "self", ".", "singular_types", ".", "pop", "(", "product_type_name", ")", "\n", "self", ".", "product_types", ".", "pop", "(", "product_type_name", ")", "\n", "self", ".", "types", ".", "pop", "(", "product_type_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper.add_seq_fragment_type": [[155, 164], ["ast_util.ASTWrapper._add_constructor", "hasattr"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper._add_constructor"], ["", "def", "add_seq_fragment_type", "(", "self", ",", "sum_type_name", ",", "constructors", ")", ":", "\n", "        ", "for", "constructor", "in", "constructors", ":", "\n", "# TODO: Record that this constructor is a sequence fragment?", "\n", "            ", "self", ".", "_add_constructor", "(", "sum_type_name", ",", "constructor", ")", "\n", "\n", "", "sum_type", "=", "self", ".", "sum_types", "[", "sum_type_name", "]", "\n", "if", "not", "hasattr", "(", "sum_type", ",", "\"seq_fragment_types\"", ")", ":", "\n", "            ", "sum_type", ".", "seq_fragment_types", "=", "[", "]", "\n", "", "sum_type", ".", "seq_fragment_types", "+=", "constructors", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper._add_constructor": [[165, 176], ["ast_util.ASTWrapper.fieldless_constructors.append", "ast_util.ASTWrapper.fieldless_constructors.sort"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort"], ["", "def", "_add_constructor", "(", "self", ",", "sum_type_name", ",", "constructor", ")", ":", "\n", "        ", "assert", "constructor", ".", "name", "not", "in", "self", ".", "constructors", "\n", "self", ".", "constructors", "[", "constructor", ".", "name", "]", "=", "constructor", "\n", "assert", "constructor", ".", "name", "not", "in", "self", ".", "singular_types", "\n", "self", ".", "singular_types", "[", "constructor", ".", "name", "]", "=", "constructor", "\n", "assert", "constructor", ".", "name", "not", "in", "self", ".", "constructor_to_sum_type", "\n", "self", ".", "constructor_to_sum_type", "[", "constructor", ".", "name", "]", "=", "sum_type_name", "\n", "\n", "if", "not", "constructor", ".", "fields", ":", "\n", "            ", "self", ".", "fieldless_constructors", ".", "append", "(", "constructor", ".", "name", ")", "\n", "self", ".", "fieldless_constructors", ".", "sort", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper.verify_ast": [[177, 270], ["ValueError", "isinstance", "ValueError", "isinstance", "isinstance", "isinstance", "ValueError", "ValueError", "ValueError", "ValueError", "node.get", "check", "type", "ValueError", "ValueError", "isinstance", "node.get", "ast_util.ASTWrapper.verify_ast", "ValueError", "getattr"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper.verify_ast"], ["", "", "def", "verify_ast", "(", "self", ",", "node", ",", "expected_type", "=", "None", ",", "field_path", "=", "(", ")", ",", "is_seq", "=", "False", ")", ":", "\n", "# type: (ASTWrapper, Node, Optional[str], Tuple[str, ...]) -> None", "\n", "# pylint: disable=too-many-branches", "\n", "        ", "\"\"\"Checks that `node` conforms to the current ASDL.\"\"\"", "\n", "if", "node", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"node is None. path: {}\"", ".", "format", "(", "field_path", ")", ")", "\n", "", "if", "not", "isinstance", "(", "node", ",", "dict", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"node is type {}. path: {}\"", ".", "format", "(", "type", "(", "node", ")", ",", "field_path", ")", ")", "\n", "\n", "", "node_type", "=", "node", "[", "\"_type\"", "]", "# type: str", "\n", "if", "expected_type", "is", "not", "None", ":", "\n", "            ", "sum_product", "=", "self", ".", "types", "[", "expected_type", "]", "\n", "if", "isinstance", "(", "sum_product", ",", "asdl", ".", "Product", ")", ":", "\n", "                ", "if", "node_type", "!=", "expected_type", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"Expected type {}, but instead saw {}. path: {}\"", ".", "format", "(", "\n", "expected_type", ",", "node_type", ",", "field_path", "\n", ")", "\n", ")", "\n", "", "", "elif", "isinstance", "(", "sum_product", ",", "asdl", ".", "Sum", ")", ":", "\n", "                ", "possible_names", "=", "[", "t", ".", "name", "for", "t", "in", "sum_product", ".", "types", "]", "# type: List[str]", "\n", "if", "is_seq", ":", "\n", "                    ", "possible_names", "+=", "[", "\n", "t", ".", "name", "for", "t", "in", "getattr", "(", "sum_product", ",", "\"seq_fragment_types\"", ",", "[", "]", ")", "\n", "]", "\n", "", "if", "node_type", "not", "in", "possible_names", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"Expected one of {}, but instead saw {}. path: {}\"", ".", "format", "(", "\n", "\", \"", ".", "join", "(", "possible_names", ")", ",", "node_type", ",", "field_path", "\n", ")", "\n", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Unexpected type in ASDL: {}\"", ".", "format", "(", "sum_product", ")", ")", "\n", "\n", "", "", "if", "node_type", "in", "self", ".", "types", ":", "\n", "# Either a product or a sum type; we want it to be a product type", "\n", "            ", "sum_product", "=", "self", ".", "types", "[", "node_type", "]", "\n", "if", "isinstance", "(", "sum_product", ",", "asdl", ".", "Sum", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"sum type {} not allowed as node type. path: {}\"", ".", "format", "(", "\n", "node_type", ",", "field_path", "\n", ")", "\n", ")", "\n", "", "fields_to_check", "=", "sum_product", ".", "fields", "\n", "", "elif", "node_type", "in", "self", ".", "constructors", ":", "\n", "            ", "fields_to_check", "=", "self", ".", "constructors", "[", "node_type", "]", ".", "fields", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Unknown node_type {}. path: {}\"", ".", "format", "(", "node_type", ",", "field_path", ")", "\n", ")", "\n", "\n", "", "for", "field", "in", "fields_to_check", ":", "\n", "# field.opt:", "\n", "# - missing is okay", "\n", "# field.seq", "\n", "# - missing is okay", "\n", "# - otherwise, must be list", "\n", "            ", "if", "field", ".", "name", "not", "in", "node", ":", "\n", "                ", "if", "field", ".", "opt", "or", "field", ".", "seq", ":", "\n", "                    ", "continue", "\n", "", "raise", "ValueError", "(", "\n", "\"required field {} is missing. path: {}\"", ".", "format", "(", "\n", "field", ".", "name", ",", "field_path", "\n", ")", "\n", ")", "\n", "\n", "", "if", "(", "\n", "field", ".", "seq", "\n", "and", "field", ".", "name", "in", "node", "\n", "and", "not", "isinstance", "(", "node", "[", "field", ".", "name", "]", ",", "(", "list", ",", "tuple", ")", ")", "\n", ")", ":", "# noqa: E125", "\n", "                ", "raise", "ValueError", "(", "\n", "\"sequential field {} is not sequence. path: {}\"", ".", "format", "(", "\n", "field", ".", "name", ",", "field_path", "\n", ")", "\n", ")", "\n", "\n", "# Check that each item in this field has the expected type.", "\n", "", "items", "=", "node", ".", "get", "(", "field", ".", "name", ",", "(", ")", ")", "if", "field", ".", "seq", "else", "(", "node", ".", "get", "(", "field", ".", "name", ")", ",", ")", "\n", "\n", "# pylint: disable=cell-var-from-loop", "\n", "if", "field", ".", "type", "in", "self", ".", "primitive_type_checkers", ":", "\n", "                ", "check", "=", "self", ".", "primitive_type_checkers", "[", "field", ".", "type", "]", "\n", "", "else", ":", "\n", "# pylint: disable=line-too-long", "\n", "                ", "check", "=", "lambda", "n", ":", "self", ".", "verify_ast", "(", "\n", "n", ",", "field", ".", "type", ",", "field_path", "+", "(", "field", ".", "name", ",", ")", ",", "is_seq", "=", "field", ".", "seq", "\n", ")", "# noqa: E731,E501", "\n", "\n", "", "for", "item", "in", "items", ":", "\n", "                ", "assert", "check", "(", "item", ")", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper.find_all_descendants_of_type": [[271, 293], ["queue.pop", "isinstance", "descend_pred", "queue.pop.get", "queue.extend"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get"], ["", "def", "find_all_descendants_of_type", "(", "self", ",", "tree", ",", "type", ",", "descend_pred", "=", "lambda", "field", ":", "True", ")", ":", "\n", "        ", "queue", "=", "[", "tree", "]", "\n", "while", "queue", ":", "\n", "            ", "node", "=", "queue", ".", "pop", "(", ")", "\n", "if", "not", "isinstance", "(", "node", ",", "dict", ")", ":", "\n", "                ", "continue", "\n", "", "for", "field_info", "in", "self", ".", "singular_types", "[", "node", "[", "\"_type\"", "]", "]", ".", "fields", ":", "\n", "                ", "if", "field_info", ".", "opt", "and", "field_info", ".", "name", "not", "in", "node", ":", "\n", "                    ", "continue", "\n", "", "if", "not", "descend_pred", "(", "field_info", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "field_info", ".", "seq", ":", "\n", "                    ", "values", "=", "node", ".", "get", "(", "field_info", ".", "name", ",", "[", "]", ")", "\n", "", "else", ":", "\n", "                    ", "values", "=", "[", "node", "[", "field_info", ".", "name", "]", "]", "\n", "\n", "", "if", "field_info", ".", "type", "==", "type", ":", "\n", "                    ", "for", "value", "in", "values", ":", "\n", "                        ", "yield", "value", "\n", "", "", "else", ":", "\n", "                    ", "queue", ".", "extend", "(", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider_unparser.SpiderUnparser2.unparse_col_unit": [[48, 65], ["result.append", "result.append", "result.append", "spider_unparser.SpiderUnparser2.SQLToken", "spider_unparser.SpiderUnparser2.SQLToken", "spider_unparser.SpiderUnparser2.SQLToken"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "unparse_col_unit", "(", "self", ",", "col_unit", ")", ":", "\n", "        ", "assert", "\"col_id\"", "in", "col_unit", "\n", "col_id", "=", "col_unit", "[", "\"col_id\"", "]", "\n", "column", "=", "self", ".", "schema", ".", "columns", "[", "col_unit", "[", "\"col_id\"", "]", "]", "\n", "column_name", "=", "column", ".", "unsplit_name", "\n", "\n", "result", "=", "[", "]", "\n", "\n", "if", "col_unit", "[", "\"is_distinct\"", "]", ":", "\n", "            ", "result", ".", "append", "(", "self", ".", "SQLToken", "(", "token", "=", "\"DISTINCT\"", ")", ")", "\n", "\n", "", "agg_type", "=", "col_unit", "[", "\"agg_id\"", "]", "[", "\"_type\"", "]", "\n", "if", "agg_type", "!=", "\"NoneAggOp\"", ":", "\n", "            ", "result", ".", "append", "(", "self", ".", "SQLToken", "(", "token", "=", "agg_type", ")", ")", "\n", "\n", "", "result", ".", "append", "(", "self", ".", "SQLToken", "(", "token", "=", "column_name", ",", "col_id", "=", "col_id", ")", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider_unparser.SpiderUnparser2.unparse_val": [[66, 80], ["spider_unparser.SpiderUnparser2.unparse_col_unit", "spider_unparser.SpiderUnparser2.SQLToken", "spider_unparser.SpiderUnparser2.SQLToken", "spider_unparser.SpiderUnparser2.SQLToken", "spider_unparser.SpiderUnparser2.SQLToken", "spider_unparser.SpiderUnparser2.SQLToken", "spider_unparser.SpiderUnparser2.unparse_sql", "str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_col_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_sql"], ["", "def", "unparse_val", "(", "self", ",", "val", ")", ":", "\n", "        ", "if", "val", "[", "\"_type\"", "]", "==", "\"Terminal\"", ":", "\n", "            ", "return", "[", "self", ".", "SQLToken", "(", "token", "=", "self", ".", "terminal_placeholder", ")", "]", "\n", "", "if", "val", "[", "\"_type\"", "]", "==", "\"String\"", ":", "\n", "            ", "return", "[", "self", ".", "SQLToken", "(", "token", "=", "val", "[", "\"s\"", "]", ")", "]", "\n", "", "if", "val", "[", "\"_type\"", "]", "==", "\"ColUnit\"", ":", "\n", "            ", "return", "self", ".", "unparse_col_unit", "(", "val", "[", "\"c\"", "]", ")", "\n", "", "if", "val", "[", "\"_type\"", "]", "==", "\"Number\"", ":", "\n", "            ", "return", "[", "self", ".", "SQLToken", "(", "token", "=", "str", "(", "val", "[", "\"f\"", "]", ")", ")", "]", "\n", "", "if", "val", "[", "\"_type\"", "]", "==", "\"ValSql\"", ":", "\n", "            ", "return", "[", "\n", "self", ".", "SQLToken", "(", "token", "=", "\"(\"", ")", ",", "\n", "*", "self", ".", "unparse_sql", "(", "val", "[", "\"s\"", "]", ")", ",", "\n", "self", ".", "SQLToken", "(", "token", "=", "\")\"", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider_unparser.SpiderUnparser2.unparse_val_unit": [[82, 88], ["spider_unparser.SpiderUnparser2.unparse_col_unit", "spider_unparser.SpiderUnparser2.unparse_col_unit", "spider_unparser.SpiderUnparser2.unparse_col_unit", "spider_unparser.SpiderUnparser2.SQLToken"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_col_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_col_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_col_unit"], ["", "", "def", "unparse_val_unit", "(", "self", ",", "val_unit", ")", ":", "\n", "        ", "if", "val_unit", "[", "\"_type\"", "]", "==", "\"Column\"", ":", "\n", "            ", "return", "self", ".", "unparse_col_unit", "(", "val_unit", "[", "\"col_unit1\"", "]", ")", "\n", "", "col1", "=", "self", ".", "unparse_col_unit", "(", "val_unit", "[", "\"col_unit1\"", "]", ")", "\n", "col2", "=", "self", ".", "unparse_col_unit", "(", "val_unit", "[", "\"col_unit2\"", "]", ")", "\n", "return", "[", "*", "col1", ",", "self", ".", "SQLToken", "(", "token", "=", "self", ".", "UNIT_TYPES_B", "[", "val_unit", "[", "\"_type\"", "]", "]", ")", ",", "*", "col2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider_unparser.SpiderUnparser2.unparse_cond": [[89, 125], ["tokens.append", "spider_unparser.SpiderUnparser2.SQLToken", "spider_unparser.SpiderUnparser2.SQLToken", "spider_unparser.SpiderUnparser2.unparse_val_unit", "spider_unparser.SpiderUnparser2.SQLToken", "spider_unparser.SpiderUnparser2.unparse_val", "spider_unparser.SpiderUnparser2.unparse_cond", "spider_unparser.SpiderUnparser2.unparse_cond", "spider_unparser.SpiderUnparser2.SQLToken", "spider_unparser.SpiderUnparser2.unparse_cond", "spider_unparser.SpiderUnparser2.unparse_cond", "spider_unparser.SpiderUnparser2.unparse_cond", "tokens.append", "spider_unparser.SpiderUnparser2.SQLToken", "spider_unparser.SpiderUnparser2.SQLToken", "spider_unparser.SpiderUnparser2.unparse_val_unit", "spider_unparser.SpiderUnparser2.SQLToken", "spider_unparser.SpiderUnparser2.unparse_val", "spider_unparser.SpiderUnparser2.unparse_val"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_val_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_cond", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_cond", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_cond", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_cond", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_cond", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_val_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_val"], ["", "def", "unparse_cond", "(", "self", ",", "cond", ",", "negated", "=", "False", ")", ":", "\n", "        ", "if", "cond", "[", "\"_type\"", "]", "==", "\"And\"", ":", "\n", "            ", "assert", "not", "negated", "\n", "return", "[", "\n", "*", "self", ".", "unparse_cond", "(", "cond", "[", "\"left\"", "]", ")", ",", "\n", "self", ".", "SQLToken", "(", "token", "=", "\"AND\"", ")", ",", "\n", "*", "self", ".", "unparse_cond", "(", "cond", "[", "\"right\"", "]", ")", ",", "\n", "]", "\n", "", "elif", "cond", "[", "\"_type\"", "]", "==", "\"Or\"", ":", "\n", "            ", "assert", "not", "negated", "\n", "return", "[", "\n", "*", "self", ".", "unparse_cond", "(", "cond", "[", "\"left\"", "]", ")", ",", "\n", "self", ".", "SQLToken", "(", "token", "=", "\"OR\"", ")", ",", "\n", "*", "self", ".", "unparse_cond", "(", "cond", "[", "\"right\"", "]", ")", ",", "\n", "]", "\n", "", "elif", "cond", "[", "\"_type\"", "]", "==", "\"Not\"", ":", "\n", "            ", "return", "self", ".", "unparse_cond", "(", "cond", "[", "\"c\"", "]", ",", "negated", "=", "True", ")", "\n", "", "elif", "cond", "[", "\"_type\"", "]", "==", "\"Between\"", ":", "\n", "            ", "tokens", "=", "[", "*", "self", ".", "unparse_val_unit", "(", "cond", "[", "\"val_unit\"", "]", ")", "]", "\n", "if", "negated", ":", "\n", "                ", "tokens", ".", "append", "(", "self", ".", "SQLToken", "(", "token", "=", "\"NOT\"", ")", ")", "\n", "", "tokens", "+=", "[", "\n", "self", ".", "SQLToken", "(", "token", "=", "\"BETWEEN\"", ")", ",", "\n", "*", "self", ".", "unparse_val", "(", "cond", "[", "\"val1\"", "]", ")", ",", "\n", "self", ".", "SQLToken", "(", "token", "=", "\"AND\"", ")", ",", "\n", "*", "self", ".", "unparse_val", "(", "cond", "[", "\"val2\"", "]", ")", ",", "\n", "]", "\n", "return", "tokens", "\n", "", "tokens", "=", "[", "*", "self", ".", "unparse_val_unit", "(", "cond", "[", "\"val_unit\"", "]", ")", "]", "\n", "if", "negated", ":", "\n", "            ", "tokens", ".", "append", "(", "self", ".", "SQLToken", "(", "token", "=", "\"NOT\"", ")", ")", "\n", "", "tokens", "+=", "[", "\n", "self", ".", "SQLToken", "(", "token", "=", "self", ".", "COND_TYPES_B", "[", "cond", "[", "\"_type\"", "]", "]", ")", ",", "\n", "*", "self", ".", "unparse_val", "(", "cond", "[", "\"val1\"", "]", ")", ",", "\n", "]", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider_unparser.SpiderUnparser2.unparse_select": [[126, 133], ["select.get", "spider_unparser.SpiderUnparser2.SQLToken", "tokens.append", "spider_unparser.SpiderUnparser2.unparse_agg", "spider_unparser.SpiderUnparser2.SQLToken"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_agg"], ["", "def", "unparse_select", "(", "self", ",", "select", ")", ":", "\n", "        ", "tokens", "=", "[", "self", ".", "SQLToken", "(", "token", "=", "\"SELECT\"", ")", "]", "\n", "if", "select", "[", "\"is_distinct\"", "]", ":", "\n", "            ", "tokens", ".", "append", "(", "self", ".", "SQLToken", "(", "token", "=", "\"DISTINCT\"", ")", ")", "\n", "", "for", "agg", "in", "select", ".", "get", "(", "\"aggs\"", ",", "[", "]", ")", ":", "\n", "            ", "tokens", "+=", "self", ".", "unparse_agg", "(", "agg", ")", "\n", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider_unparser.SpiderUnparser2.unparse_agg": [[134, 145], ["spider_unparser.SpiderUnparser2.unparse_val_unit", "spider_unparser.SpiderUnparser2.SQLToken", "spider_unparser.SpiderUnparser2.SQLToken", "spider_unparser.SpiderUnparser2.SQLToken"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_val_unit"], ["", "def", "unparse_agg", "(", "self", ",", "agg", ")", ":", "\n", "        ", "unparsed_val_unit", "=", "self", ".", "unparse_val_unit", "(", "agg", "[", "\"val_unit\"", "]", ")", "\n", "agg_type", "=", "agg", "[", "\"agg_id\"", "]", "[", "\"_type\"", "]", "\n", "if", "agg_type", "==", "\"NoneAggOp\"", ":", "\n", "            ", "return", "unparsed_val_unit", "\n", "", "else", ":", "\n", "            ", "return", "[", "\n", "self", ".", "SQLToken", "(", "token", "=", "agg_type", ")", ",", "\n", "self", ".", "SQLToken", "(", "token", "=", "\"(\"", ")", ",", "\n", "*", "unparsed_val_unit", ",", "\n", "self", ".", "SQLToken", "(", "token", "=", "\")\"", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider_unparser.SpiderUnparser2.unparse_from": [[147, 209], ["all", "collections.defaultdict", "collections.defaultdict", "enumerate", "set", "set", "enumerate", "spider_unparser.SpiderUnparser2.linearize_cond", "spider_unparser.SpiderUnparser2.ast_wrapper.find_all_descendants_of_type", "spider_unparser.SpiderUnparser2.SQLToken", "from_.get", "cond_indices_by_table[].add", "tables_involved_by_cond_idx[].add", "spider_unparser.SpiderUnparser2.SQLToken", "spider_unparser.SpiderUnparser2.SQLToken", "spider_unparser.SpiderUnparser2.SQLToken", "set.add", "sorted", "spider_unparser.SpiderUnparser2.unparse_sql", "spider_unparser.SpiderUnparser2.SQLToken", "list", "conds_to_output.append", "set.add", "spider_unparser.SpiderUnparser2.SQLToken", "spider_unparser.intersperse", "spider_unparser.SpiderUnparser2.SQLToken", "t.isinstance", "t.is_distinct", "tokens.append", "spider_unparser.SpiderUnparser2.unparse_cond"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.linearize_cond", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper.find_all_descendants_of_type", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_sql", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.intersperse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_cond"], ["", "", "def", "unparse_from", "(", "self", ",", "from_", ")", ":", "\n", "        ", "if", "\"conds\"", "in", "from_", ":", "\n", "            ", "all_conds", ",", "keywords", "=", "self", ".", "linearize_cond", "(", "from_", "[", "\"conds\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "all_conds", ",", "keywords", "=", "[", "]", ",", "[", "]", "\n", "", "assert", "all", "(", "keyword", "==", "\"And\"", "for", "keyword", "in", "keywords", ")", "\n", "\n", "cond_indices_by_table", "=", "collections", ".", "defaultdict", "(", "set", ")", "\n", "tables_involved_by_cond_idx", "=", "collections", ".", "defaultdict", "(", "set", ")", "\n", "for", "i", ",", "cond", "in", "enumerate", "(", "all_conds", ")", ":", "\n", "            ", "for", "column", "in", "self", ".", "ast_wrapper", ".", "find_all_descendants_of_type", "(", "cond", ",", "\"column\"", ")", ":", "\n", "                ", "table", "=", "self", ".", "schema", ".", "columns", "[", "column", "]", ".", "table", "\n", "if", "table", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "cond_indices_by_table", "[", "table", ".", "id", "]", ".", "add", "(", "i", ")", "\n", "tables_involved_by_cond_idx", "[", "i", "]", ".", "add", "(", "table", ".", "id", ")", "\n", "\n", "", "", "output_table_ids", "=", "set", "(", ")", "\n", "output_cond_indices", "=", "set", "(", ")", "\n", "tokens", "=", "[", "self", ".", "SQLToken", "(", "token", "=", "\"FROM\"", ")", "]", "\n", "for", "i", ",", "table_unit", "in", "enumerate", "(", "from_", ".", "get", "(", "\"table_units\"", ",", "[", "]", ")", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "tokens", "+=", "[", "self", ".", "SQLToken", "(", "token", "=", "\"JOIN\"", ")", "]", "\n", "\n", "", "if", "table_unit", "[", "\"_type\"", "]", "==", "\"TableUnitSql\"", ":", "\n", "                ", "tokens", "+=", "[", "\n", "self", ".", "SQLToken", "(", "token", "=", "\"(\"", ")", ",", "\n", "*", "self", ".", "unparse_sql", "(", "table_unit", "[", "\"s\"", "]", ")", ",", "\n", "self", ".", "SQLToken", "(", "token", "=", "\")\"", ")", ",", "\n", "]", "\n", "", "elif", "table_unit", "[", "\"_type\"", "]", "==", "\"Table\"", ":", "\n", "                ", "table_id", "=", "table_unit", "[", "\"table_id\"", "]", "\n", "tokens", "+=", "[", "\n", "self", ".", "SQLToken", "(", "\n", "token", "=", "self", ".", "schema", ".", "tables", "[", "table_id", "]", ".", "unsplit_name", ",", "tab_id", "=", "table_id", "\n", ")", "\n", "]", "\n", "output_table_ids", ".", "add", "(", "table_id", ")", "\n", "\n", "# Output \"ON <cond>\" if all tables involved in the condition have been output", "\n", "conds_to_output", "=", "[", "]", "\n", "for", "cond_idx", "in", "sorted", "(", "cond_indices_by_table", "[", "table_id", "]", ")", ":", "\n", "                    ", "if", "cond_idx", "in", "output_cond_indices", ":", "\n", "                        ", "continue", "\n", "", "if", "tables_involved_by_cond_idx", "[", "cond_idx", "]", "<=", "output_table_ids", ":", "\n", "                        ", "conds_to_output", ".", "append", "(", "all_conds", "[", "cond_idx", "]", ")", "\n", "output_cond_indices", ".", "add", "(", "cond_idx", ")", "\n", "", "", "if", "conds_to_output", ":", "\n", "                    ", "tokens", "+=", "[", "self", ".", "SQLToken", "(", "token", "=", "\"ON\"", ")", "]", "\n", "\n", "_tokens", "=", "list", "(", "\n", "intersperse", "(", "\n", "self", ".", "SQLToken", "(", "token", "=", "\"AND\"", ")", ",", "\n", "(", "self", ".", "unparse_cond", "(", "cond", ")", "for", "cond", "in", "conds_to_output", ")", ",", "\n", ")", "\n", ")", "\n", "for", "t", "in", "_tokens", ":", "\n", "                        ", "if", "t", ".", "isinstance", "(", "list", ")", "or", "t", ".", "is_distinct", "(", "tuple", ")", ":", "\n", "                            ", "tokens", "+=", "t", "\n", "", "else", ":", "\n", "                            ", "tokens", ".", "append", "(", "t", ")", "\n", "", "", "", "", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider_unparser.SpiderUnparser2.unparse_order_by": [[210, 216], ["tokens.append", "spider_unparser.SpiderUnparser2.SQLToken", "spider_unparser.SpiderUnparser2.unparse_val_unit", "spider_unparser.SpiderUnparser2.SQLToken"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_val_unit"], ["", "def", "unparse_order_by", "(", "self", ",", "order_by", ")", ":", "\n", "        ", "tokens", "=", "[", "self", ".", "SQLToken", "(", "token", "=", "\"ORDER BY\"", ")", "]", "\n", "for", "v", "in", "order_by", "[", "\"val_units\"", "]", ":", "\n", "            ", "tokens", "+=", "self", ".", "unparse_val_unit", "(", "v", ")", "\n", "", "tokens", ".", "append", "(", "self", ".", "SQLToken", "(", "token", "=", "order_by", "[", "\"order\"", "]", "[", "\"_type\"", "]", ")", ")", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider_unparser.SpiderUnparser2.unparse_sql": [[217, 277], ["spider_unparser.SpiderUnparser2.unparse_select", "spider_unparser.SpiderUnparser2.unparse_from", "spider_unparser.SpiderUnparser2.unparse_sql.find_subtree"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_select", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_from"], ["", "def", "unparse_sql", "(", "self", ",", "tree", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "result", "+=", "self", ".", "unparse_select", "(", "tree", "[", "\"select\"", "]", ")", "\n", "result", "+=", "self", ".", "unparse_from", "(", "tree", "[", "\"from\"", "]", ")", "\n", "\n", "def", "find_subtree", "(", "_tree", ",", "name", ")", ":", "\n", "            ", "return", "_tree", ",", "_tree", "[", "name", "]", "\n", "\n", "", "tree", ",", "target_tree", "=", "find_subtree", "(", "tree", ",", "\"sql_where\"", ")", "\n", "# cond? where,", "\n", "if", "\"where\"", "in", "target_tree", ":", "\n", "            ", "result", "+=", "[", "\n", "self", ".", "SQLToken", "(", "token", "=", "\"WHERE\"", ")", ",", "\n", "*", "self", ".", "unparse_cond", "(", "target_tree", "[", "\"where\"", "]", ")", ",", "\n", "]", "\n", "\n", "", "tree", ",", "target_tree", "=", "find_subtree", "(", "tree", ",", "\"sql_groupby\"", ")", "\n", "# col_unit* group_by,", "\n", "if", "\"group_by\"", "in", "target_tree", ":", "\n", "            ", "result", "+=", "[", "self", ".", "SQLToken", "(", "token", "=", "\"GROUP BY\"", ")", "]", "\n", "for", "c", "in", "target_tree", "[", "\"group_by\"", "]", ":", "\n", "                ", "result", "+=", "self", ".", "unparse_col_unit", "(", "c", ")", "\n", "\n", "", "", "tree", ",", "target_tree", "=", "find_subtree", "(", "tree", ",", "\"sql_orderby\"", ")", "\n", "if", "\"order_by\"", "in", "target_tree", ":", "\n", "            ", "result", "+=", "self", ".", "unparse_order_by", "(", "target_tree", "[", "\"order_by\"", "]", ")", "\n", "\n", "", "tree", ",", "target_tree", "=", "find_subtree", "(", "tree", ",", "\"sql_groupby\"", ")", "\n", "if", "\"having\"", "in", "target_tree", ":", "\n", "            ", "result", "+=", "[", "\n", "self", ".", "SQLToken", "(", "token", "=", "\"HAVING\"", ")", ",", "\n", "*", "self", ".", "unparse_cond", "(", "target_tree", "[", "\"having\"", "]", ")", ",", "\n", "]", "\n", "\n", "", "tree", ",", "target_tree", "=", "find_subtree", "(", "tree", ",", "\"sql_orderby\"", ")", "\n", "if", "\"limit\"", "in", "target_tree", ":", "\n", "            ", "if", "isinstance", "(", "target_tree", "[", "\"limit\"", "]", ",", "bool", ")", ":", "\n", "                ", "if", "target_tree", "[", "\"limit\"", "]", ":", "\n", "                    ", "result", "+=", "[", "self", ".", "SQLToken", "(", "token", "=", "\"LIMIT\"", ")", ",", "self", ".", "SQLToken", "(", "token", "=", "\"1\"", ")", "]", "\n", "", "", "else", ":", "\n", "                ", "result", "+=", "[", "\n", "self", ".", "SQLToken", "(", "token", "=", "\"LIMIT\"", ")", ",", "\n", "self", ".", "SQLToken", "(", "token", "=", "str", "(", "target_tree", "[", "\"limit\"", "]", ")", ")", ",", "\n", "]", "\n", "\n", "", "", "tree", ",", "target_tree", "=", "find_subtree", "(", "tree", ",", "\"sql_ieu\"", ")", "\n", "if", "\"intersect\"", "in", "target_tree", ":", "\n", "            ", "result", "+=", "[", "\n", "self", ".", "SQLToken", "(", "token", "=", "\"INTERSECT\"", ")", ",", "\n", "*", "self", ".", "unparse_sql", "(", "target_tree", "[", "\"intersect\"", "]", ")", ",", "\n", "]", "\n", "", "if", "\"except\"", "in", "target_tree", ":", "\n", "            ", "result", "+=", "[", "\n", "self", ".", "SQLToken", "(", "token", "=", "\"EXCEPT\"", ")", ",", "\n", "*", "self", ".", "unparse_sql", "(", "target_tree", "[", "\"except\"", "]", ")", ",", "\n", "]", "\n", "", "if", "\"union\"", "in", "target_tree", ":", "\n", "            ", "result", "+=", "[", "self", ".", "SQLToken", "(", "\"UNION\"", ")", ",", "*", "self", ".", "unparse_sql", "(", "target_tree", "[", "\"union\"", "]", ")", "]", "\n", "\n", "", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider_unparser.bimap": [[15, 17], ["zip", "zip"], "function", ["None"], ["def", "bimap", "(", "first", ",", "second", ")", ":", "\n", "    ", "return", "{", "f", ":", "s", "for", "f", ",", "s", "in", "zip", "(", "first", ",", "second", ")", "}", ",", "{", "s", ":", "f", "for", "f", ",", "s", "in", "zip", "(", "first", ",", "second", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider_unparser.filter_nones": [[19, 21], ["d.items"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], ["", "def", "filter_nones", "(", "d", ")", ":", "\n", "    ", "return", "{", "k", ":", "v", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "if", "v", "is", "not", "None", "and", "v", "!=", "[", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider_unparser.join": [[23, 29], ["iter", "next"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.iter"], ["", "def", "join", "(", "iterable", ",", "delimiter", ")", ":", "\n", "    ", "it", "=", "iter", "(", "iterable", ")", "\n", "yield", "next", "(", "it", ")", "\n", "for", "x", "in", "it", ":", "\n", "        ", "yield", "delimiter", "\n", "yield", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider_unparser.intersperse": [[31, 34], ["itertools.islice", "itertools.chain.from_iterable", "zip", "itertools.repeat"], "function", ["None"], ["", "", "def", "intersperse", "(", "delimiter", ",", "seq", ")", ":", "\n", "    ", "return", "itertools", ".", "islice", "(", "\n", "itertools", ".", "chain", ".", "from_iterable", "(", "zip", "(", "itertools", ".", "repeat", "(", "delimiter", ")", ",", "seq", ")", ")", ",", "1", ",", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.__init__": [[51, 86], ["set", "tensor2struct.languages.ast.ast_util.ASTWrapper", "isinstance", "isinstance", "asdl.parse", "sql_fields.append", "os.path.join", "os.path.dirname", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["    ", "schemas", "=", "{", "}", "\n", "eval_foreign_key_maps", "=", "{", "}", "\n", "\n", "for", "path", "in", "paths", ":", "\n", "        ", "schema_dicts", "=", "json", ".", "load", "(", "open", "(", "path", ")", ")", "\n", "for", "schema_dict", "in", "schema_dicts", ":", "\n", "            ", "tables", "=", "tuple", "(", "\n", "Table", "(", "id", "=", "i", ",", "name", "=", "name", ".", "split", "(", ")", ",", "unsplit_name", "=", "name", ",", "orig_name", "=", "orig_name", ",", ")", "\n", "for", "i", ",", "(", "name", ",", "orig_name", ")", "in", "enumerate", "(", "\n", "zip", "(", "schema_dict", "[", "\"table_names\"", "]", ",", "schema_dict", "[", "\"table_names_original\"", "]", ")", "\n", ")", "\n", ")", "\n", "columns", "=", "tuple", "(", "\n", "Column", "(", "\n", "id", "=", "i", ",", "\n", "table", "=", "tables", "[", "table_id", "]", "if", "table_id", ">=", "0", "else", "None", ",", "\n", "name", "=", "col_name", ".", "split", "(", ")", ",", "\n", "unsplit_name", "=", "col_name", ",", "\n", "orig_name", "=", "orig_col_name", ",", "\n", "type", "=", "col_type", ",", "\n", ")", "\n", "for", "i", ",", "(", "\n", "(", "table_id", ",", "col_name", ")", ",", "\n", "(", "_", ",", "orig_col_name", ")", ",", "\n", "col_type", ",", "\n", ")", "in", "enumerate", "(", "\n", "zip", "(", "\n", "schema_dict", "[", "\"column_names\"", "]", ",", "\n", "schema_dict", "[", "\"column_names_original\"", "]", ",", "\n", "schema_dict", "[", "\"column_types\"", "]", ",", "\n", ")", "\n", ")", "\n", ")", "\n", "\n", "# Link columns to tables", "\n", "for", "column", "in", "columns", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse": [[87, 89], ["spider.SpiderLanguage.parse_sql"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_sql"], ["                ", "if", "column", ".", "table", ":", "\n", "                    ", "column", ".", "table", ".", "columns", ".", "append", "(", "column", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.unparse": [[90, 94], ["copy.deepcopy", "spider.SpiderUnparser", "spider.SpiderUnparser.unparse_sql"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_sql"], ["", "", "for", "column_id", "in", "schema_dict", "[", "\"primary_keys\"", "]", ":", "\n", "# Register primary keys", "\n", "                ", "column", "=", "columns", "[", "column_id", "]", "\n", "column", ".", "table", ".", "primary_keys", ".", "append", "(", "column", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.tokenize_field_value": [[95, 110], ["isinstance", "spider.split_string_whitespace", "field_value.encode", "isinstance", "str", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.split_string_whitespace", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.encode"], ["", "foreign_key_graph", "=", "nx", ".", "DiGraph", "(", ")", "\n", "for", "source_column_id", ",", "dest_column_id", "in", "schema_dict", "[", "\"foreign_keys\"", "]", ":", "\n", "# Register foreign keys", "\n", "                ", "source_column", "=", "columns", "[", "source_column_id", "]", "\n", "dest_column", "=", "columns", "[", "dest_column_id", "]", "\n", "source_column", ".", "foreign_key_for", "=", "dest_column", "\n", "foreign_key_graph", ".", "add_edge", "(", "\n", "source_column", ".", "table", ".", "id", ",", "\n", "dest_column", ".", "table", ".", "id", ",", "\n", "columns", "=", "(", "source_column_id", ",", "dest_column_id", ")", ",", "\n", ")", "\n", "foreign_key_graph", ".", "add_edge", "(", "\n", "dest_column", ".", "table", ".", "id", ",", "\n", "source_column", ".", "table", ".", "id", ",", "\n", "columns", "=", "(", "dest_column_id", ",", "source_column_id", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_val": [[111, 126], ["isinstance", "isinstance", "isinstance", "isinstance", "spider.SpiderLanguage.parse_col_unit", "isinstance", "ValueError", "spider.SpiderLanguage.parse_sql"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_col_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_sql"], ["\n", "", "db_id", "=", "schema_dict", "[", "\"db_id\"", "]", "\n", "assert", "db_id", "not", "in", "schemas", "\n", "schemas", "[", "db_id", "]", "=", "Schema", "(", "\n", "db_id", ",", "tables", ",", "columns", ",", "foreign_key_graph", ",", "schema_dict", "\n", ")", "\n", "eval_foreign_key_maps", "[", "db_id", "]", "=", "evaluation", ".", "build_foreign_key_map", "(", "schema_dict", ")", "\n", "\n", "", "", "return", "schemas", ",", "eval_foreign_key_maps", "\n", "\n", "\n", "", "@", "registry", ".", "register", "(", "\"dataset\"", ",", "\"spider\"", ")", "\n", "class", "SpiderDataset", "(", "dataset", ".", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "paths", ",", "tables_paths", ",", "db_path", ",", "limit", "=", "None", ")", ":", "\n", "        ", "self", ".", "paths", "=", "paths", "\n", "self", ".", "db_path", "=", "db_path", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_col_unit": [[127, 136], ["None"], "methods", ["None"], ["self", ".", "examples", "=", "[", "]", "\n", "\n", "self", ".", "schemas", ",", "self", ".", "eval_foreign_key_maps", "=", "load_tables", "(", "tables_paths", ")", "\n", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "raw_data", "=", "json", ".", "load", "(", "open", "(", "path", ")", ")", "\n", "for", "entry", "in", "raw_data", ":", "\n", "                ", "item", "=", "SpiderItem", "(", "\n", "text", "=", "entry", "[", "\"question_toks\"", "]", ",", "\n", "code", "=", "entry", "[", "\"sql\"", "]", ",", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_val_unit": [[137, 146], ["spider.SpiderLanguage.parse_col_unit", "spider.SpiderLanguage.parse_col_unit"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_col_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_col_unit"], ["schema", "=", "self", ".", "schemas", "[", "entry", "[", "\"db_id\"", "]", "]", ",", "\n", "orig", "=", "entry", ",", "\n", "orig_schema", "=", "self", ".", "schemas", "[", "entry", "[", "\"db_id\"", "]", "]", ".", "orig", ",", "\n", ")", "\n", "self", ".", "examples", ".", "append", "(", "item", ")", "\n", "\n", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_table_unit": [[147, 155], ["spider.SpiderLanguage.parse_sql", "ValueError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_sql"], ["        ", "return", "self", ".", "examples", "[", "idx", "]", "\n", "\n", "", "class", "Metrics", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "dataset", ",", "etype", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "etype", "=", "etype", "\n", "self", ".", "foreign_key_maps", "=", "{", "\n", "db_id", ":", "evaluation", ".", "build_foreign_key_map", "(", "schema", ".", "orig", ")", "\n", "for", "db_id", ",", "schema", "in", "self", ".", "dataset", ".", "schemas", ".", "items", "(", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_cond": [[156, 189], ["len", "spider.SpiderLanguage.parse_val_unit", "spider.SpiderLanguage.parse_val", "spider.SpiderLanguage.parse_val", "spider.SpiderLanguage.parse_cond", "spider.SpiderLanguage.parse_cond", "len", "isinstance", "spider.SpiderLanguage.parse_cond", "pdb.set_trace", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_val_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_cond", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_cond", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_cond"], ["}", "\n", "self", ".", "evaluator", "=", "evaluation", ".", "Evaluator", "(", "\n", "self", ".", "dataset", ".", "db_path", ",", "self", ".", "foreign_key_maps", ",", "etype", ",", "\n", ")", "\n", "self", ".", "results", "=", "[", "]", "\n", "\n", "", "def", "add_one", "(", "self", ",", "item", ",", "inferred_code", ",", "orig_question", "=", "None", ")", ":", "\n", "            ", "ret_dict", "=", "self", ".", "evaluator", ".", "evaluate_one", "(", "\n", "item", ".", "schema", ".", "db_id", ",", "item", ".", "orig", "[", "\"query\"", "]", ",", "inferred_code", "\n", ")", "\n", "\n", "if", "orig_question", ":", "\n", "                ", "ret_dict", "[", "\"orig_question\"", "]", "=", "orig_question", "\n", "\n", "", "self", ".", "results", ".", "append", "(", "ret_dict", ")", "\n", "\n", "", "def", "add_beams", "(", "self", ",", "item", ",", "inferred_codes", ",", "orig_question", "=", "None", ")", ":", "\n", "            ", "ret_dict", "=", "None", "\n", "for", "i", ",", "code", "in", "enumerate", "(", "inferred_codes", ")", ":", "\n", "                ", "if", "self", ".", "evaluator", ".", "isValidSQL", "(", "code", ",", "item", ".", "schema", ".", "db_id", ")", ":", "\n", "                    ", "ret_dict", "=", "self", ".", "evaluator", ".", "evaluate_one", "(", "\n", "item", ".", "schema", ".", "db_id", ",", "item", ".", "orig", "[", "\"query\"", "]", ",", "code", "\n", ")", "\n", "break", "\n", "\n", "# if all failed", "\n", "", "", "if", "ret_dict", "is", "None", ":", "\n", "                ", "ret_dict", "=", "self", ".", "evaluator", ".", "evaluate_one", "(", "\n", "item", ".", "schema", ".", "db_id", ",", "item", ".", "orig", "[", "\"query\"", "]", ",", "inferred_codes", "[", "0", "]", "\n", ")", "\n", "\n", "", "if", "orig_question", ":", "\n", "                ", "ret_dict", "[", "\"orig_question\"", "]", "=", "orig_question", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_sql": [[190, 226], ["spider.filter_nones", "spider.SpiderLanguage.parse_select", "spider.SpiderLanguage.parse_from", "spider.filter_nones", "spider.filter_nones", "spider.filter_nones", "spider.filter_nones", "spider.SpiderLanguage.parse_cond", "spider.SpiderLanguage.parse_cond", "spider.SpiderLanguage.parse_order_by", "spider.SpiderLanguage.parse_sql", "spider.SpiderLanguage.parse_sql", "spider.SpiderLanguage.parse_sql", "spider.SpiderLanguage.parse_col_unit"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.filter_nones", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_select", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_from", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.filter_nones", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.filter_nones", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.filter_nones", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.filter_nones", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_cond", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_cond", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_order_by", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_sql", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_sql", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_sql", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_col_unit"], ["", "self", ".", "results", ".", "append", "(", "ret_dict", ")", "\n", "\n", "", "def", "finalize", "(", "self", ")", ":", "\n", "            ", "self", ".", "evaluator", ".", "finalize", "(", ")", "\n", "results", "=", "{", "\"per_item\"", ":", "self", ".", "results", ",", "\"total_scores\"", ":", "self", ".", "evaluator", ".", "scores", "}", "\n", "return", "results", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_select": [[231, 237], ["spider.SpiderLanguage.parse_agg"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_agg"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_agg": [[239, 245], ["spider.SpiderLanguage.parse_val_unit"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_val_unit"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_from": [[247, 255], ["spider.filter_nones", "spider.SpiderLanguage.parse_table_unit", "spider.SpiderLanguage.parse_cond"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.filter_nones", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_table_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_cond"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_order_by": [[258, 267], ["spider.SpiderLanguage.parse_val_unit"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse_val_unit"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.conjoin_conds": [[311, 318], ["len", "cls.conjoin_conds"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.conjoin_conds"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.linearize_cond": [[319, 326], ["cls.linearize_cond"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.linearize_cond"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_str": [[327, 354], ["raw_str.split", "len", "len", "enumerate", "str_builder.replace().replace().replace.replace().replace().replace.replace().replace().replace", "t.startswith", "str_builder.replace().replace().replace.replace().replace().replace.replace().replace", "str_builder.replace().replace().replace.replace().replace().replace.replace"], "methods", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_num": [[355, 363], ["int", "str", "str", "int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_val": [[364, 375], ["spider.SpiderUnparser.unparse_str", "spider.SpiderUnparser.unparse_col_unit", "spider.SpiderUnparser.unparse_num", "spider.SpiderUnparser.unparse_sql"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_str", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_col_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_num", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_sql"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_col_unit": [[376, 393], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_val_unit": [[394, 400], ["spider.SpiderUnparser.unparse_col_unit", "spider.SpiderUnparser.unparse_col_unit", "spider.SpiderUnparser.unparse_col_unit"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_col_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_col_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_col_unit"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_cond": [[401, 430], ["spider.SpiderUnparser.unparse_val_unit", "tokens.append", "spider.SpiderUnparser.unparse_val", "spider.SpiderUnparser.unparse_cond", "spider.SpiderUnparser.unparse_cond", "spider.SpiderUnparser.unparse_cond", "spider.SpiderUnparser.unparse_cond", "spider.SpiderUnparser.unparse_cond", "spider.SpiderUnparser.unparse_val_unit", "tokens.append", "spider.SpiderUnparser.unparse_val", "spider.SpiderUnparser.unparse_val"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_val_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_cond", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_cond", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_cond", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_cond", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_cond", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_val_unit", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_val", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_val"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.refine_from": [[431, 527], ["set", "set", "set", "set.union", "set", "sorted", "spider.SpiderUnparser.conjoin_conds", "spider.SpiderUnparser.ast_wrapper.find_all_descendants_of_type", "zip", "spider.SpiderUnparser.refine_from", "networkx.shortest_path", "set.union.add", "conds.append", "sorted", "set.add", "table_unit_set.append", "set.add"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.conjoin_conds", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper.find_all_descendants_of_type", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.refine_from", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_sql": [[528, 579], ["spider.SpiderUnparser.refine_from", "spider.SpiderUnparser.unparse_sql.find_subtree"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.refine_from"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_select": [[580, 588], ["tokens.append", "tokens.append", "spider.SpiderUnparser.unparse_agg", "select.get"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_agg", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_agg": [[589, 596], ["spider.SpiderUnparser.unparse_val_unit"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_val_unit"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_from": [[597, 645], ["all", "collections.defaultdict", "collections.defaultdict", "enumerate", "set", "set", "enumerate", "spider.SpiderUnparser.linearize_cond", "spider.SpiderUnparser.ast_wrapper.find_all_descendants_of_type", "from_.get", "cond_indices_by_table[].add", "tables_involved_by_cond_idx[].add", "tokens.append", "set.add", "sorted", "spider.SpiderUnparser.unparse_sql", "list", "conds_to_output.append", "set.add", "spider.intersperse", "spider.SpiderUnparser.unparse_cond"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.linearize_cond", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper.find_all_descendants_of_type", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_sql", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.intersperse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_cond"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_order_by": [[646, 650], ["spider.SpiderUnparser.unparse_val_unit"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderUnparser.unparse_val_unit"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.bimap": [[14, 16], ["zip", "zip"], "function", ["None"], ["code", "=", "attr", ".", "ib", "(", ")", "\n", "schema", "=", "attr", ".", "ib", "(", ")", "\n", "orig", "=", "attr", ".", "ib", "(", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.filter_nones": [[18, 20], ["d.items"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], ["\n", "\n", "", "@", "attr", ".", "s", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join": [[22, 28], ["iter", "next"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.iter"], ["    ", "id", "=", "attr", ".", "ib", "(", ")", "\n", "table", "=", "attr", ".", "ib", "(", ")", "\n", "name", "=", "attr", ".", "ib", "(", ")", "\n", "unsplit_name", "=", "attr", ".", "ib", "(", ")", "\n", "orig_name", "=", "attr", ".", "ib", "(", ")", "\n", "type", "=", "attr", ".", "ib", "(", ")", "\n", "foreign_key_for", "=", "attr", ".", "ib", "(", "default", "=", "None", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.split_string_whitespace": [[30, 38], ["s.split", "result.append", "result.append"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["\n", "", "@", "attr", ".", "s", "\n", "class", "Table", ":", "\n", "    ", "id", "=", "attr", ".", "ib", "(", ")", "\n", "name", "=", "attr", ".", "ib", "(", ")", "\n", "unsplit_name", "=", "attr", ".", "ib", "(", ")", "\n", "orig_name", "=", "attr", ".", "ib", "(", ")", "\n", "columns", "=", "attr", ".", "ib", "(", "factory", "=", "list", ")", "\n", "primary_keys", "=", "attr", ".", "ib", "(", "factory", "=", "list", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.intersperse": [[40, 43], ["itertools.islice", "itertools.chain.from_iterable", "zip", "itertools.repeat"], "function", ["None"], ["\n", "", "@", "attr", ".", "s", "\n", "class", "Schema", ":", "\n", "    ", "db_id", "=", "attr", ".", "ib", "(", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEncPreproc.__init__": [[24, 50], ["os.path.join", "collections.defaultdict", "tensor2struct.utils.registry.construct", "tensor2struct.utils.vocab.VocabBuilder", "os.path.join", "os.path.join", "set"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "save_path", ",", "\n", "grammar", ",", "\n", "context", ",", "\n", "word_emb", ",", "\n", "min_freq", "=", "3", ",", "\n", "max_count", "=", "5000", ",", "\n", "sc_link", "=", "True", ",", "\n", "cv_link", "=", "True", ",", "\n", ")", ":", "\n", "        ", "self", ".", "data_dir", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"enc\"", ")", "\n", "self", ".", "compute_sc_link", "=", "sc_link", "\n", "self", ".", "compute_cv_link", "=", "cv_link", "\n", "self", ".", "grammar_config", "=", "grammar", "\n", "self", ".", "context_config", "=", "context", "\n", "self", ".", "texts", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "self", ".", "word_emb", "=", "registry", ".", "construct", "(", "\"word_emb\"", ",", "word_emb", ")", "\n", "\n", "# vocab", "\n", "self", ".", "vocab_builder", "=", "vocab", ".", "VocabBuilder", "(", "min_freq", ",", "max_count", ")", "\n", "self", ".", "vocab_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"vocab.json\"", ")", "\n", "self", ".", "vocab_word_freq_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"word_freq.json\"", ")", "\n", "\n", "self", ".", "relations", "=", "set", "(", ")", "\n", "self", ".", "schema_cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEncPreproc.validate_item": [[51, 53], ["None"], "methods", ["None"], ["", "def", "validate_item", "(", "self", ",", "item", ",", "section", ")", ":", "\n", "        ", "return", "True", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEncPreproc.add_item": [[54, 67], ["overnight_enc.OvernightEncPreproc.preprocess_item", "overnight_enc.OvernightEncPreproc.texts[].append", "overnight_enc.OvernightEncPreproc.vocab_builder.add_word", "overnight_enc.OvernightEncPreproc.vocab_builder.add_word", "overnight_enc.OvernightEncPreproc.vocab_builder.add_word"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.DecoderPreproc.preprocess_item", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.add_word", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.add_word", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.add_word"], ["", "def", "add_item", "(", "self", ",", "item", ",", "section", ",", "validation_info", ")", ":", "\n", "        ", "preprocessed", "=", "self", ".", "preprocess_item", "(", "item", ",", "validation_info", ")", "\n", "self", ".", "texts", "[", "section", "]", ".", "append", "(", "preprocessed", ")", "\n", "\n", "if", "section", "in", "[", "\"train\"", ",", "\"_train\"", "]", ":", "# _train to build vocab", "\n", "            ", "for", "token", "in", "preprocessed", "[", "\"question\"", "]", ":", "\n", "                ", "self", ".", "vocab_builder", ".", "add_word", "(", "token", ")", "\n", "", "for", "value", "in", "preprocessed", "[", "\"columns\"", "]", ":", "\n", "                ", "for", "token", "in", "value", ":", "\n", "                    ", "self", ".", "vocab_builder", ".", "add_word", "(", "token", ")", "\n", "", "", "for", "p", "in", "preprocessed", "[", "\"values\"", "]", ":", "\n", "                ", "for", "token", "in", "p", ":", "\n", "                    ", "self", ".", "vocab_builder", ".", "add_word", "(", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEncPreproc.clear_items": [[68, 70], ["collections.defaultdict"], "methods", ["None"], ["", "", "", "", "def", "clear_items", "(", "self", ")", ":", "\n", "        ", "self", ".", "texts", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEncPreproc.preprocess_item": [[71, 121], ["overnight_enc.OvernightEncPreproc.tokenize", "tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.construct.get_properties", "tensor2struct.utils.registry.construct.get_values", "tensor2struct.utils.registry.construct.get_schema_relations", "itertools.chain", "tensor2struct.utils.registry.construct.compute_schema_relations", "tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.construct.compute_schema_relations", "tensor2struct.utils.registry.construct.compute_schema_linking", "tensor2struct.utils.registry.construct.compute_cell_value_linking", "registry.construct.compute_schema_relations.keys", "sc_relations.keys", "cv_relations.keys", "overnight_enc.OvernightEncPreproc.relations.add", "overnight_enc.OvernightEncPreproc.tokenize", "overnight_enc.OvernightEncPreproc.tokenize"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEncPreproc.tokenize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.get_properties", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.get_values", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.get_schema_relations", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.compute_schema_relations", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.compute_schema_relations", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.compute_schema_linking", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.abstract_context.AbstractContext.compute_cell_value_linking", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEncPreproc.tokenize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEncPreproc.tokenize"], ["", "def", "preprocess_item", "(", "self", ",", "item", ",", "validation_info", ")", ":", "\n", "        ", "tokens", "=", "self", ".", "tokenize", "(", "item", ".", "question", ")", "\n", "grammar", "=", "registry", ".", "construct", "(", "\"grammar\"", ",", "self", ".", "grammar_config", ",", "domain", "=", "item", ".", "domain", ")", "\n", "raw_properties", ",", "ref_properties", "=", "grammar", ".", "get_properties", "(", ")", "\n", "raw_values", ",", "ref_values", "=", "grammar", ".", "get_values", "(", ")", "\n", "schema_raw_relations", "=", "grammar", ".", "get_schema_relations", "(", ")", "\n", "\n", "if", "item", ".", "domain", "in", "self", ".", "schema_cache", ":", "\n", "            ", "context", "=", "self", ".", "schema_cache", "[", "item", ".", "domain", "]", "\n", "processed_properties", "=", "context", ".", "schema", "[", "\"columns\"", "]", "\n", "processed_values", "=", "context", ".", "schema", "[", "\"values\"", "]", "\n", "schema_relations", "=", "context", ".", "compute_schema_relations", "(", ")", "\n", "", "else", ":", "\n", "            ", "processed_properties", "=", "[", "self", ".", "tokenize", "(", "p", ")", "for", "p", "in", "raw_properties", "]", "\n", "processed_values", "=", "[", "self", ".", "tokenize", "(", "v", ")", "for", "v", "in", "raw_values", "]", "\n", "\n", "context", "=", "registry", ".", "construct", "(", "\n", "\"context\"", ",", "\n", "self", ".", "context_config", ",", "\n", "schema", "=", "{", "\n", "\"columns\"", ":", "processed_properties", ",", "\n", "\"values\"", ":", "processed_values", ",", "\n", "\"schema_relations\"", ":", "schema_raw_relations", ",", "\n", "}", ",", "\n", ")", "\n", "self", ".", "schema_cache", "[", "item", ".", "domain", "]", "=", "context", "\n", "schema_relations", "=", "context", ".", "compute_schema_relations", "(", ")", "\n", "\n", "", "sc_relations", "=", "(", "\n", "context", ".", "compute_schema_linking", "(", "tokens", ")", "if", "self", ".", "compute_sc_link", "else", "{", "}", "\n", ")", "\n", "cv_relations", "=", "(", "\n", "context", ".", "compute_cell_value_linking", "(", "tokens", ")", "if", "self", ".", "compute_cv_link", "else", "{", "}", "\n", ")", "\n", "for", "relation_name", "in", "itertools", ".", "chain", "(", "\n", "schema_relations", ".", "keys", "(", ")", ",", "sc_relations", ".", "keys", "(", ")", ",", "cv_relations", ".", "keys", "(", ")", "\n", ")", ":", "\n", "            ", "self", ".", "relations", ".", "add", "(", "relation_name", ")", "\n", "\n", "", "return", "{", "\n", "\"db_id\"", ":", "item", ".", "domain", ",", "# comply with data_scheduler", "\n", "\"question\"", ":", "tokens", ",", "\n", "\"raw_question\"", ":", "item", ".", "question", ",", "\n", "\"columns\"", ":", "processed_properties", ",", "\n", "\"values\"", ":", "processed_values", ",", "\n", "\"ref_columns\"", ":", "ref_properties", ",", "\n", "\"ref_values\"", ":", "ref_values", ",", "\n", "\"schema_relations\"", ":", "schema_relations", ",", "\n", "\"sc_relations\"", ":", "sc_relations", ",", "\n", "\"cv_relations\"", ":", "cv_relations", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEncPreproc.save": [[123, 142], ["os.makedirs", "overnight_enc.OvernightEncPreproc.vocab_builder.finish", "print", "overnight_enc.OvernightEncPreproc.vocab.save", "overnight_enc.OvernightEncPreproc.vocab_builder.save", "tensor2struct.utils.registry.lookup().get_default_relations", "sorted", "print", "overnight_enc.OvernightEncPreproc.texts.items", "overnight_enc.OvernightEncPreproc.relations.union", "open", "json.dump", "tensor2struct.utils.registry.lookup", "os.path.join", "open", "len", "len", "os.path.join", "f.write", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.finish", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.save", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.save", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.spider_context.SpiderContext.get_default_relations", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.dump", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "self", ".", "data_dir", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "vocab", "=", "self", ".", "vocab_builder", ".", "finish", "(", ")", "\n", "print", "(", "f\"{len(self.vocab)} words in vocab\"", ")", "\n", "self", ".", "vocab", ".", "save", "(", "self", ".", "vocab_path", ")", "\n", "self", ".", "vocab_builder", ".", "save", "(", "self", ".", "vocab_word_freq_path", ")", "\n", "\n", "default_relations", "=", "registry", ".", "lookup", "(", "\n", "\"context\"", ",", "self", ".", "context_config", "[", "\"name\"", "]", "\n", ")", ".", "get_default_relations", "(", ")", "\n", "self", ".", "relations", "=", "sorted", "(", "self", ".", "relations", ".", "union", "(", "default_relations", ")", ")", "\n", "print", "(", "f\"{len(self.relations)} relations extracted\"", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"relation.json\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "relations", ",", "f", ")", "\n", "\n", "", "for", "section", ",", "texts", "in", "self", ".", "texts", ".", "items", "(", ")", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "section", "+", "\".jsonl\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "for", "text", "in", "texts", ":", "\n", "                    ", "f", ".", "write", "(", "json", ".", "dumps", "(", "text", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEncPreproc.load": [[143, 150], ["tensor2struct.utils.vocab.Vocab.load", "overnight_enc.OvernightEncPreproc.vocab_builder.load", "open", "json.load", "sorted", "os.path.join", "enumerate", "list"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["", "", "", "", "def", "load", "(", "self", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "vocab", ".", "Vocab", ".", "load", "(", "self", ".", "vocab_path", ")", "\n", "self", ".", "vocab_builder", ".", "load", "(", "self", ".", "vocab_word_freq_path", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"relation.json\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "relations", "=", "json", ".", "load", "(", "f", ")", "\n", "self", ".", "relations", "=", "sorted", "(", "relations", ")", "\n", "", "self", ".", "relations2id", "=", "{", "r", ":", "ind", "for", "ind", ",", "r", "in", "enumerate", "(", "list", "(", "self", ".", "relations", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEncPreproc.dataset": [[151, 155], ["json.loads", "open", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["", "def", "dataset", "(", "self", ",", "section", ")", ":", "\n", "        ", "return", "[", "\n", "json", ".", "loads", "(", "line", ")", "\n", "for", "line", "in", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "section", "+", "\".jsonl\"", ")", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEncPreproc.tokenize": [[157, 160], ["overnight_enc.OvernightEncPreproc.word_emb.tokenize"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEncPreproc.tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ":", "str", ")", ":", "\n", "        ", "assert", "self", ".", "word_emb", "is", "not", "None", "\n", "return", "self", ".", "word_emb", ".", "tokenize", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEnc.__init__": [[176, 242], ["torch.nn.Module.__init__", "set", "set", "overnight_enc.OvernightEnc._build_modules", "overnight_enc.OvernightEnc._build_modules", "overnight_enc.OvernightEnc._build_modules", "tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.instantiate", "tensor2struct.modules.embedders.LookupEmbeddings", "word_freq.most_common"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEnc._build_modules", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEnc._build_modules", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEnc._build_modules", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.instantiate"], ["def", "__init__", "(", "\n", "self", ",", "\n", "device", ",", "\n", "preproc", ",", "\n", "word_emb_size", "=", "128", ",", "\n", "recurrent_size", "=", "256", ",", "\n", "dropout", "=", "0.0", ",", "\n", "question_encoder", "=", "(", "\"emb\"", ",", "\"bilstm\"", ")", ",", "\n", "column_encoder", "=", "(", "\"emb\"", ",", "\"bilstm\"", ")", ",", "\n", "value_encoder", "=", "(", "\"emb\"", ",", "\"bilstm\"", ")", ",", "\n", "linking_config", "=", "{", "}", ",", "\n", "rat_config", "=", "{", "}", ",", "\n", "top_k_learnable", "=", "0", ",", "\n", "include_in_memory", "=", "(", "\"question\"", ",", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "preproc", "=", "preproc", "\n", "\n", "self", ".", "vocab", "=", "preproc", ".", "vocab", "\n", "self", ".", "word_emb_size", "=", "word_emb_size", "\n", "self", ".", "recurrent_size", "=", "recurrent_size", "\n", "assert", "self", ".", "recurrent_size", "%", "2", "==", "0", "\n", "word_freq", "=", "self", ".", "preproc", ".", "vocab_builder", ".", "word_freq", "\n", "top_k_words", "=", "set", "(", "[", "_a", "[", "0", "]", "for", "_a", "in", "word_freq", ".", "most_common", "(", "top_k_learnable", ")", "]", ")", "\n", "self", ".", "learnable_words", "=", "top_k_words", "\n", "self", ".", "include_in_memory", "=", "set", "(", "include_in_memory", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "shared_modules", "=", "{", "\n", "\"shared-en-emb\"", ":", "embedders", ".", "LookupEmbeddings", "(", "\n", "self", ".", "_device", ",", "\n", "self", ".", "vocab", ",", "\n", "self", ".", "preproc", ".", "word_emb", ",", "\n", "self", ".", "word_emb_size", ",", "\n", "self", ".", "learnable_words", ",", "\n", ")", "\n", "}", "\n", "\n", "self", ".", "question_encoder", "=", "self", ".", "_build_modules", "(", "\n", "question_encoder", ",", "\"question\"", ",", "shared_modules", "=", "shared_modules", "\n", ")", "\n", "self", ".", "column_encoder", "=", "self", ".", "_build_modules", "(", "\n", "column_encoder", ",", "\"column\"", ",", "shared_modules", "=", "shared_modules", "\n", ")", "\n", "self", ".", "value_encoder", "=", "self", ".", "_build_modules", "(", "\n", "value_encoder", ",", "\"value\"", ",", "shared_modules", "=", "shared_modules", "\n", ")", "\n", "\n", "update_modules", "=", "{", "\"rat\"", ":", "rat", ".", "RAT", ",", "\"none\"", ":", "rat", ".", "NoOpUpdate", "}", "\n", "\n", "self", ".", "schema_linking", "=", "registry", ".", "construct", "(", "\n", "\"schema_linking\"", ",", "\n", "linking_config", ",", "\n", "device", "=", "device", ",", "\n", "word_emb_size", "=", "word_emb_size", ",", "\n", "preproc", "=", "preproc", ",", "\n", ")", "\n", "\n", "self", ".", "rat_update", "=", "registry", ".", "instantiate", "(", "\n", "update_modules", "[", "rat_config", "[", "\"name\"", "]", "]", ",", "\n", "rat_config", ",", "\n", "unused_keys", "=", "{", "\"name\"", "}", ",", "\n", "device", "=", "self", ".", "_device", ",", "\n", "relations2id", "=", "self", ".", "preproc", ".", "relations2id", ",", "\n", "hidden_size", "=", "recurrent_size", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEnc._build_modules": [[244, 288], ["torch.nn.Sequential", "tensor2struct.modules.embedders.LookupEmbeddings", "tensor2struct.modules.lstm.BiLSTM", "tensor2struct.modules.lstm.BiLSTM", "tensor2struct.modules.lstm.BiLSTM", "tensor2struct.modules.lstm.BiLSTM", "modules.append", "modules.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "_build_modules", "(", "self", ",", "module_types", ",", "prefix", ",", "shared_modules", "=", "None", ")", ":", "\n", "        ", "module_builder", "=", "{", "\n", "\"emb\"", ":", "lambda", ":", "embedders", ".", "LookupEmbeddings", "(", "\n", "self", ".", "_device", ",", "\n", "self", ".", "vocab", ",", "\n", "self", ".", "preproc", ".", "word_emb", ",", "\n", "self", ".", "word_emb_size", ",", "\n", "self", ".", "learnable_words", ",", "\n", ")", ",", "\n", "\"bilstm\"", ":", "lambda", ":", "lstm", ".", "BiLSTM", "(", "\n", "input_size", "=", "self", ".", "word_emb_size", ",", "\n", "output_size", "=", "self", ".", "recurrent_size", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "summarize", "=", "False", ",", "\n", ")", ",", "\n", "\"bilstm-native\"", ":", "lambda", ":", "lstm", ".", "BiLSTM", "(", "\n", "input_size", "=", "self", ".", "word_emb_size", ",", "\n", "output_size", "=", "self", ".", "recurrent_size", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "summarize", "=", "False", ",", "\n", "use_native", "=", "True", ",", "\n", ")", ",", "\n", "\"bilstm-summarize\"", ":", "lambda", ":", "lstm", ".", "BiLSTM", "(", "\n", "input_size", "=", "self", ".", "word_emb_size", ",", "\n", "output_size", "=", "self", ".", "recurrent_size", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "summarize", "=", "True", ",", "\n", ")", ",", "\n", "\"bilstm-native-summarize\"", ":", "lambda", ":", "lstm", ".", "BiLSTM", "(", "\n", "input_size", "=", "self", ".", "word_emb_size", ",", "\n", "output_size", "=", "self", ".", "recurrent_size", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "summarize", "=", "True", ",", "\n", "use_native", "=", "True", ",", "\n", ")", ",", "\n", "}", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "module_type", "in", "module_types", ":", "\n", "            ", "if", "module_type", "in", "shared_modules", ":", "\n", "                ", "modules", ".", "append", "(", "shared_modules", "[", "module_type", "]", ")", "\n", "", "else", ":", "\n", "                ", "modules", ".", "append", "(", "module_builder", "[", "module_type", "]", "(", ")", ")", "\n", "", "", "return", "torch", ".", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEnc.filter_values_with_matching": [[289, 314], ["set", "sorted", "filtered_values.append", "filtered_ref_values.append", "r_t.startswith", "set.add", "r_t.split"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add"], ["", "@", "staticmethod", "\n", "def", "filter_values_with_matching", "(", "desc", ",", "kind", ")", ":", "\n", "        ", "orig_values", "=", "desc", "[", "\"values\"", "]", "\n", "ref_values", "=", "desc", "[", "\"ref_values\"", "]", "\n", "\n", "filterd_ids", "=", "set", "(", ")", "\n", "for", "r_t", "in", "desc", "[", "\"cv_relations\"", "]", ":", "\n", "            ", "for", "r", "in", "desc", "[", "\"cv_relations\"", "]", "[", "r_t", "]", ":", "\n", "                ", "_kind", "=", "r_t", ".", "split", "(", "\":\"", ")", "[", "1", "]", "\n", "if", "_kind", "!=", "kind", ":", "\n", "                    ", "continue", "\n", "", "if", "r_t", ".", "startswith", "(", "\"q\"", ")", ":", "\n", "                    ", "q_id", ",", "val_id", "=", "r", "\n", "", "else", ":", "\n", "                    ", "val_id", ",", "q_id", "=", "r", "\n", "", "filterd_ids", ".", "add", "(", "val_id", ")", "\n", "\n", "", "", "filtered_ids", "=", "sorted", "(", "filterd_ids", ")", "\n", "\n", "filtered_values", "=", "[", "]", "\n", "filtered_ref_values", "=", "[", "]", "\n", "for", "ind", "in", "filtered_ids", ":", "\n", "            ", "filtered_values", ".", "append", "(", "orig_values", "[", "ind", "]", ")", "\n", "filtered_ref_values", ".", "append", "(", "ref_values", "[", "ind", "]", ")", "\n", "", "return", "filtered_values", ",", "filtered_ref_values", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEnc.filter_properties_with_matching": [[315, 340], ["set", "sorted", "filtered_properties.append", "filtered_ref_properties.append", "r_t.startswith", "sorted.add", "r_t.split"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add"], ["", "@", "staticmethod", "\n", "def", "filter_properties_with_matching", "(", "desc", ",", "kind", ")", ":", "\n", "        ", "orig_properties", "=", "desc", "[", "\"columns\"", "]", "\n", "ref_properties", "=", "desc", "[", "\"ref_columns\"", "]", "\n", "filtered_ids", "=", "set", "(", ")", "\n", "for", "r_t", "in", "desc", "[", "\"sc_relations\"", "]", ":", "\n", "            ", "for", "r", "in", "desc", "[", "\"sc_relations\"", "]", "[", "r_t", "]", ":", "\n", "                ", "_kind", "=", "r_t", ".", "split", "(", "\":\"", ")", "[", "1", "]", "\n", "if", "_kind", "!=", "kind", ":", "\n", "                    ", "continue", "\n", "", "if", "r_t", ".", "startswith", "(", "\"q\"", ")", ":", "\n", "                    ", "q_id", ",", "col_id", "=", "r", "\n", "", "else", ":", "\n", "                    ", "col_id", ",", "q_id", "=", "r", "\n", "", "filtered_ids", ".", "add", "(", "col_id", ")", "\n", "\n", "", "", "filtered_ids", "=", "sorted", "(", "filtered_ids", ")", "\n", "\n", "filtered_properties", "=", "[", "]", "\n", "filtered_ref_properties", "=", "[", "]", "\n", "for", "ind", "in", "filtered_ids", ":", "\n", "            ", "filtered_properties", ".", "append", "(", "orig_properties", "[", "ind", "]", ")", "\n", "filtered_ref_properties", ".", "append", "(", "ref_properties", "[", "ind", "]", ")", "\n", "\n", "", "return", "filtered_properties", ",", "filtered_ref_properties", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEnc.forward": [[341, 405], ["overnight_enc.OvernightEnc.question_encoder", "overnight_enc.OvernightEnc.column_encoder", "overnight_enc.OvernightEnc.value_encoder", "enumerate", "overnight_enc.OvernightEnc.schema_linking", "overnight_enc.OvernightEnc.rat_update", "overnight_enc.OvernightEnc.filter_values_with_matching", "overnight_enc.OvernightEnc.filter_values_with_matching", "overnight_enc.OvernightEnc.filter_properties_with_matching", "overnight_enc.OvernightEnc.filter_properties_with_matching", "result.append", "q_enc.select().unsqueeze", "col_enc.select().unsqueeze", "val_enc.select().unsqueeze", "torch.cat.append", "torch.cat.append", "torch.cat.append", "len", "torch.cat", "overnight_enc.OvernightEncoderState", "q_enc.select", "col_enc.select", "val_enc.select"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEnc.filter_values_with_matching", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEnc.filter_values_with_matching", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEnc.filter_properties_with_matching", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_enc.OvernightEnc.filter_properties_with_matching", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.select", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.select", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.select"], ["", "def", "forward", "(", "self", ",", "descs", ")", ":", "\n", "        ", "qs", "=", "[", "[", "desc", "[", "\"question\"", "]", "]", "for", "desc", "in", "descs", "]", "\n", "q_enc", ",", "_", "=", "self", ".", "question_encoder", "(", "qs", ")", "\n", "col_enc", ",", "_", "=", "self", ".", "column_encoder", "(", "[", "desc", "[", "\"columns\"", "]", "for", "desc", "in", "descs", "]", ")", "\n", "val_enc", ",", "_", "=", "self", ".", "value_encoder", "(", "[", "desc", "[", "\"values\"", "]", "for", "desc", "in", "descs", "]", ")", "\n", "\n", "result", "=", "[", "]", "\n", "for", "batch_idx", ",", "desc", "in", "enumerate", "(", "descs", ")", ":", "\n", "            ", "relation", "=", "self", ".", "schema_linking", "(", "descs", "[", "batch_idx", "]", ")", "\n", "q_enc_new_item", ",", "col_enc_new_item", ",", "val_enc_new_item", "=", "self", ".", "rat_update", "(", "\n", "desc", ",", "\n", "q_enc", ".", "select", "(", "batch_idx", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "col_enc", ".", "select", "(", "batch_idx", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "val_enc", ".", "select", "(", "batch_idx", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "relation", ",", "\n", ")", "\n", "\n", "memory", "=", "[", "]", "\n", "if", "\"question\"", "in", "self", ".", "include_in_memory", ":", "\n", "                ", "memory", ".", "append", "(", "q_enc_new_item", ")", "\n", "", "if", "\"column\"", "in", "self", ".", "include_in_memory", ":", "\n", "                ", "memory", ".", "append", "(", "col_enc_new_item", ")", "\n", "", "if", "\"value\"", "in", "self", ".", "include_in_memory", ":", "\n", "                ", "memory", ".", "append", "(", "val_enc_new_item", ")", "\n", "\n", "", "if", "len", "(", "memory", ")", ">", "1", ":", "\n", "                ", "memory", "=", "torch", ".", "cat", "(", "memory", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "memory", "=", "memory", "[", "0", "]", "\n", "\n", "", "_", ",", "ex_mentioned_values", "=", "self", ".", "filter_values_with_matching", "(", "desc", ",", "\"EM\"", ")", "\n", "_", ",", "pa_mentioned_values", "=", "self", ".", "filter_values_with_matching", "(", "desc", ",", "\"PM\"", ")", "\n", "_", ",", "ex_mentioned_properties", "=", "self", ".", "filter_properties_with_matching", "(", "\n", "desc", ",", "\"EM\"", "\n", ")", "\n", "_", ",", "pa_mentioned_properties", "=", "self", ".", "filter_properties_with_matching", "(", "\n", "desc", ",", "\"PM\"", "\n", ")", "\n", "\n", "result", ".", "append", "(", "\n", "OvernightEncoderState", "(", "\n", "memory", "=", "memory", ",", "\n", "pointer_memories", "=", "{", "\n", "\"property\"", ":", "col_enc_new_item", ",", "\n", "\"value\"", ":", "val_enc_new_item", ",", "\n", "}", ",", "\n", "pointer_refs", "=", "{", "\n", "\"property\"", ":", "desc", "[", "\"ref_columns\"", "]", ",", "\n", "\"value\"", ":", "desc", "[", "\"ref_values\"", "]", ",", "\n", "}", ",", "\n", "pointer_align_mat", "=", "{", "\"property\"", ":", "None", ",", "\"value\"", ":", "None", "}", ",", "\n", "mentioned", "=", "{", "\n", "\"exact\"", ":", "{", "\n", "\"property\"", ":", "ex_mentioned_properties", ",", "\n", "\"value\"", ":", "ex_mentioned_values", ",", "\n", "}", ",", "\n", "\"partial\"", ":", "{", "\n", "\"property\"", ":", "pa_mentioned_properties", ",", "\n", "\"value\"", ":", "pa_mentioned_values", ",", "\n", "}", ",", "\n", "}", ",", "\n", ")", "\n", ")", "\n", "", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.DecoderPreproc.__init__": [[28, 46], ["os.path.join", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "os.path.join", "os.path.join", "os.path.join", "collections.defaultdict"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["    ", "def", "__init__", "(", "self", ",", "grammar", ",", "save_path", ",", "min_freq", "=", "3", ",", "max_count", "=", "5000", ")", ":", "\n", "        ", "self", ".", "grammar_config", "=", "grammar", "\n", "self", ".", "data_dir", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"dec\"", ")", "\n", "self", ".", "items", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "\n", "self", ".", "prod_dict", "=", "collections", ".", "defaultdict", "(", "set", ")", "\n", "self", ".", "domain_prod_dict", "=", "collections", ".", "defaultdict", "(", "\n", "lambda", ":", "collections", ".", "defaultdict", "(", "set", ")", "\n", ")", "\n", "# self.vocab_builder = vocab.VocabBuilder(min_freq, max_count)", "\n", "# self.vocab_path = os.path.join(save_path, 'dec_vocab.json')", "\n", "self", ".", "observed_productions_path", "=", "os", ".", "path", ".", "join", "(", "\n", "save_path", ",", "\"observed_productions.json\"", "\n", ")", "\n", "self", ".", "domain_productions_path", "=", "os", ".", "path", ".", "join", "(", "\n", "save_path", ",", "\"domain_productions.json\"", "\n", ")", "\n", "self", ".", "data_dir", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"dec\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.DecoderPreproc.validate_item": [[47, 49], ["None"], "methods", ["None"], ["", "def", "validate_item", "(", "self", ",", "item", ",", "section", ")", ":", "\n", "        ", "return", "True", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.DecoderPreproc.add_item": [[50, 53], ["overnight_dec.DecoderPreproc.preprocess_item", "overnight_dec.DecoderPreproc.items[].append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.DecoderPreproc.preprocess_item", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "add_item", "(", "self", ",", "item", ",", "section", ",", "validation_info", ")", ":", "\n", "        ", "preprocessed", "=", "self", ".", "preprocess_item", "(", "item", ",", "section", ",", "validation_info", ")", "\n", "self", ".", "items", "[", "section", "]", ".", "append", "(", "preprocessed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.DecoderPreproc.preprocess_item": [[54, 75], ["tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.construct.normalize_lf", "tensor2struct.utils.registry.construct.logical_form_to_action_sequence", "tensor2struct.utils.registry.construct.get_domain_terminal_productions", "tensor2struct.utils.registry.construct.get_non_terminal_productions", "tensor2struct.utils.registry.construct.get_general_terminal_productions", "[].union", "overnight_dec.DecoderPreproc.prod_dict[].union", "overnight_dec.DecoderPreproc.prod_dict[].union"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.normalize_lf", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.domain_language.DomainLanguage.logical_form_to_action_sequence", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.get_domain_terminal_productions", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.get_non_terminal_productions", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.get_general_terminal_productions"], ["", "def", "preprocess_item", "(", "self", ",", "item", ",", "section", ",", "validation_info", ")", ":", "\n", "        ", "grammar", "=", "registry", ".", "construct", "(", "\"grammar\"", ",", "self", ".", "grammar_config", ",", "domain", "=", "item", ".", "domain", ")", "\n", "norm_lf", "=", "grammar", ".", "normalize_lf", "(", "item", ".", "lf", ")", "\n", "actions", "=", "grammar", ".", "logical_form_to_action_sequence", "(", "norm_lf", ")", "\n", "\n", "# for convenice, should be adapted so that it doesn't depend on data", "\n", "d_t_rules_dict", "=", "grammar", ".", "get_domain_terminal_productions", "(", ")", "\n", "for", "pt", "in", "d_t_rules_dict", ":", "\n", "            ", "self", ".", "domain_prod_dict", "[", "item", ".", "domain", "]", "[", "pt", "]", "=", "self", ".", "domain_prod_dict", "[", "item", ".", "domain", "]", "[", "\n", "pt", "\n", "]", ".", "union", "(", "d_t_rules_dict", "[", "pt", "]", ")", "\n", "\n", "# those are the pre-defined rules, does not need to induce from train data", "\n", "", "p_rules_dict", "=", "grammar", ".", "get_non_terminal_productions", "(", ")", "\n", "t_rules_dict", "=", "grammar", ".", "get_general_terminal_productions", "(", ")", "# treat as labels", "\n", "for", "pt", "in", "p_rules_dict", ":", "\n", "            ", "self", ".", "prod_dict", "[", "pt", "]", "=", "self", ".", "prod_dict", "[", "pt", "]", ".", "union", "(", "p_rules_dict", "[", "pt", "]", ")", "\n", "", "for", "pt", "in", "t_rules_dict", ":", "\n", "            ", "self", ".", "prod_dict", "[", "pt", "]", "=", "self", ".", "prod_dict", "[", "pt", "]", ".", "union", "(", "t_rules_dict", "[", "pt", "]", ")", "\n", "\n", "", "return", "{", "\"domain\"", ":", "item", ".", "domain", ",", "\"productions\"", ":", "actions", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.DecoderPreproc.clear_items": [[76, 78], ["collections.defaultdict"], "methods", ["None"], ["", "def", "clear_items", "(", "self", ")", ":", "\n", "        ", "self", ".", "items", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.DecoderPreproc.save": [[79, 98], ["os.makedirs", "overnight_dec.DecoderPreproc.items.items", "open", "json.dump", "open", "json.dump", "sorted", "open", "overnight_dec.DecoderPreproc.prod_dict.items", "sorted", "os.path.join", "f.write", "overnight_dec.DecoderPreproc.domain_prod_dict[].items", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.dump", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.dump", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "self", ".", "data_dir", ",", "exist_ok", "=", "True", ")", "\n", "# self.vocab = self.vocab_builder.finish()", "\n", "# self.vocab.save(self.vocab_path)", "\n", "\n", "with", "open", "(", "self", ".", "observed_productions_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "self", ".", "prod_dict", "=", "{", "k", ":", "sorted", "(", "v", ")", "for", "k", ",", "v", "in", "self", ".", "prod_dict", ".", "items", "(", ")", "}", "\n", "json", ".", "dump", "(", "self", ".", "prod_dict", ",", "f", ")", "\n", "", "with", "open", "(", "self", ".", "domain_productions_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "for", "d", "in", "self", ".", "domain_prod_dict", ":", "\n", "                ", "self", ".", "domain_prod_dict", "[", "d", "]", "=", "{", "\n", "k", ":", "sorted", "(", "v", ")", "for", "k", ",", "v", "in", "self", ".", "domain_prod_dict", "[", "d", "]", ".", "items", "(", ")", "\n", "}", "\n", "", "json", ".", "dump", "(", "self", ".", "domain_prod_dict", ",", "f", ")", "\n", "\n", "", "for", "section", ",", "items", "in", "self", ".", "items", ".", "items", "(", ")", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "section", "+", "\".jsonl\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "for", "item", "in", "items", ":", "\n", "                    ", "f", ".", "write", "(", "json", ".", "dumps", "(", "item", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.DecoderPreproc.load": [[99, 106], ["sorted", "open", "json.load", "open", "json.load", "set", "itertools.chain", "overnight_dec.DecoderPreproc.prod_dict.values"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.values"], ["", "", "", "", "def", "load", "(", "self", ")", ":", "\n", "# self.vocab = vocab.Vocab.load(self.vocab_path)", "\n", "        ", "with", "open", "(", "self", ".", "observed_productions_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "self", ".", "prod_dict", "=", "json", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "self", ".", "domain_productions_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "self", ".", "domain_prod_dict", "=", "json", ".", "load", "(", "f", ")", "\n", "", "self", ".", "prod_list", "=", "sorted", "(", "set", "(", "itertools", ".", "chain", "(", "*", "self", ".", "prod_dict", ".", "values", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.DecoderPreproc.dataset": [[107, 115], ["len", "json.loads", "open", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["", "def", "dataset", "(", "self", ",", "section", ")", ":", "\n", "# for codalab eval", "\n", "        ", "if", "len", "(", "self", ".", "items", "[", "section", "]", ")", ">", "0", ":", "\n", "            ", "return", "self", ".", "items", "[", "section", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "\n", "json", ".", "loads", "(", "line", ")", "\n", "for", "line", "in", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "section", "+", "\".jsonl\"", ")", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.ConstantModule.__init__": [[127, 131], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "param", "=", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "normal_", "(", "torch", ".", "empty", "(", "1", ",", "size", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.ConstantModule.forward": [[132, 135], ["input_m.size", "overnight_dec.ConstantModule.param.expand"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.expand"], ["", "def", "forward", "(", "self", ",", "input_m", ")", ":", "\n", "        ", "batch_size", ",", "_", "=", "input_m", ".", "size", "(", ")", "\n", "return", "self", ".", "param", ".", "expand", "(", "batch_size", ",", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.__init__": [[138, 151], ["overnight_dec.InferLF.model.get_prod_pointers", "pyrsistent.pvector", "pyrsistent.pvector"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.Decoder.get_prod_pointers"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "enc_state", ",", "example", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "example", "=", "example", "\n", "self", ".", "enc_state", "=", "enc_state", "\n", "\n", "self", ".", "domain", "=", "self", ".", "example", ".", "domain", "\n", "self", ".", "general_prod_dict", "=", "self", ".", "model", ".", "prod_dict", "\n", "self", ".", "pointer_prod_dict", "=", "self", ".", "model", ".", "domain_dict", "[", "self", ".", "domain", "]", "\n", "self", ".", "pointers", "=", "self", ".", "model", ".", "get_prod_pointers", "(", "example", ".", "domain", ",", "enc_state", ")", "\n", "\n", "self", ".", "cur_state", "=", "None", "\n", "self", ".", "queue", "=", "pyrsistent", ".", "pvector", "(", "[", "lf_util", ".", "START_SYMBOL", "]", ")", "\n", "self", ".", "history", "=", "pyrsistent", ".", "pvector", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.clone": [[152, 158], ["overnight_dec.InferLF.__class__"], "methods", ["None"], ["", "def", "clone", "(", "self", ")", ":", "\n", "        ", "other", "=", "self", ".", "__class__", "(", "self", ".", "model", ",", "self", ".", "enc_state", ",", "self", ".", "example", ")", "\n", "other", ".", "queue", "=", "self", ".", "queue", "\n", "other", ".", "cur_state", "=", "self", ".", "cur_state", "\n", "other", ".", "history", "=", "self", ".", "history", "# note it's pyrisistent", "\n", "return", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.pop": [[159, 165], ["overnight_dec.InferLF.queue.delete"], "methods", ["None"], ["", "def", "pop", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "queue", ":", "\n", "            ", "item", "=", "self", ".", "queue", "[", "-", "1", "]", "\n", "self", ".", "queue", "=", "self", ".", "queue", ".", "delete", "(", "-", "1", ")", "\n", "return", "item", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.peek": [[166, 170], ["None"], "methods", ["None"], ["", "def", "peek", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "queue", ":", "\n", "            ", "return", "self", ".", "queue", "[", "-", "1", "]", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update": [[171, 205], ["overnight_dec.InferLF.history.append", "tensor2struct.get_right_side_parts", "tensor2struct.get_right_side_parts", "tensor2struct.get_left_side_part", "tensor2struct.get_left_side_part", "overnight_dec.InferLF.pop", "reversed", "overnight_dec.InferLF.model.update_state", "overnight_dec.InferLF.pointer_prod_dict[].index", "[].unsqueeze", "overnight_dec.InferLF.model.rule_embedding.weight[].unsqueeze", "overnight_dec.InferLF.queue.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.common.util.get_right_side_parts", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.common.util.get_right_side_parts", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.common.util.get_left_side_part", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.common.util.get_left_side_part", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.Decoder.update_state", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "update", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "history", "=", "self", ".", "history", ".", "append", "(", "action", ")", "\n", "right_items", "=", "lf_util", ".", "get_right_side_parts", "(", "action", ")", "\n", "non_terminal", "=", "lf_util", ".", "get_left_side_part", "(", "action", ")", "\n", "\n", "# pop previous non-terminal", "\n", "queue_item", "=", "self", ".", "pop", "(", ")", "\n", "assert", "queue_item", "==", "non_terminal", "\n", "\n", "# update current non-terminals", "\n", "for", "p", "in", "reversed", "(", "right_items", ")", ":", "\n", "            ", "if", "p", "in", "self", ".", "general_prod_dict", "or", "p", "in", "self", ".", "pointer_prod_dict", ":", "\n", "                ", "self", ".", "queue", "=", "self", ".", "queue", ".", "append", "(", "p", ")", "\n", "\n", "# update action embedding", "\n", "", "", "if", "(", "\n", "non_terminal", "in", "self", ".", "pointer_prod_dict", "\n", "and", "action", "in", "self", ".", "pointer_prod_dict", "[", "non_terminal", "]", "\n", ")", ":", "\n", "            ", "pointer_type", "=", "non_terminal", "\n", "target_id", "=", "self", ".", "pointer_prod_dict", "[", "pointer_type", "]", ".", "index", "(", "action", ")", "\n", "pointer_v", "=", "self", ".", "pointers", "[", "pointer_type", "]", "[", "target_id", "]", ".", "unsqueeze", "(", "0", ")", "\n", "action_embed", "=", "self", ".", "model", ".", "pointer_action_emb_proj", "[", "pointer_type", "]", "(", "pointer_v", ")", "\n", "", "else", ":", "\n", "            ", "assert", "(", "\n", "non_terminal", "in", "self", ".", "general_prod_dict", "\n", "and", "action", "in", "self", ".", "general_prod_dict", "[", "non_terminal", "]", "\n", ")", "\n", "action_embed", "=", "self", ".", "model", ".", "rule_embedding", ".", "weight", "[", "\n", "self", ".", "model", ".", "prod2id", "[", "action", "]", "\n", "]", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "self", ".", "cur_state", ".", "action_embed", "=", "action_embed", "\n", "self", ".", "cur_state", ",", "_", "=", "self", ".", "model", ".", "update_state", "(", "self", ".", "cur_state", ",", "self", ".", "enc_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.pointer_rules": [[206, 224], ["overnight_dec.InferLF.model.compute_pointer", "pointer_logits.squeeze.squeeze.squeeze", "zip", "candidates.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_pointer", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "pointer_rules", "(", "self", ",", "non_terminal", ")", ":", "\n", "        ", "candidates", "=", "[", "]", "\n", "if", "non_terminal", "in", "self", ".", "pointer_prod_dict", ":", "\n", "            ", "pointer_type", "=", "non_terminal", "\n", "if", "pointer_type", "not", "in", "self", ".", "pointers", ":", "\n", "                ", "return", "[", "]", "\n", "", "pointer_logits", "=", "self", ".", "model", ".", "compute_pointer", "(", "\n", "self", ".", "cur_state", ",", "\n", "self", ".", "enc_state", ",", "\n", "pointer_type", ",", "\n", "self", ".", "pointers", "[", "pointer_type", "]", ",", "\n", ")", "\n", "pointer_logits", "=", "pointer_logits", ".", "squeeze", "(", "0", ")", "\n", "for", "cand_action", ",", "pointer_logit", "in", "zip", "(", "\n", "self", ".", "pointer_prod_dict", "[", "pointer_type", "]", ",", "pointer_logits", "\n", ")", ":", "\n", "                ", "candidates", ".", "append", "(", "(", "cand_action", ",", "pointer_logit", ")", ")", "\n", "", "", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.general_rules": [[225, 237], ["torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "overnight_dec.InferLF.model.rule_logits().squeeze", "zip", "candidates.append", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "overnight_dec.InferLF.model.rule_logits"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "general_rules", "(", "self", ",", "non_terminal", ")", ":", "\n", "        ", "candidates", "=", "[", "]", "\n", "if", "non_terminal", "in", "self", ".", "general_prod_dict", ":", "\n", "            ", "valid_prod_strs", "=", "self", ".", "general_prod_dict", "[", "non_terminal", "]", "\n", "valid_prod_ids", "=", "[", "self", ".", "model", ".", "prod2id", "[", "p", "]", "for", "p", "in", "valid_prod_strs", "]", "\n", "valid_prod_id_t", "=", "torch", ".", "LongTensor", "(", "valid_prod_ids", ")", ".", "to", "(", "self", ".", "model", ".", "_device", ")", "\n", "_prod_scores", "=", "self", ".", "model", ".", "rule_logits", "(", "self", ".", "cur_state", ".", "state_hat", ")", ".", "squeeze", "(", "0", ")", "\n", "prod_logits", "=", "_prod_scores", "[", "valid_prod_id_t", "]", "\n", "\n", "for", "prod_str", ",", "prod_logit", "in", "zip", "(", "valid_prod_strs", ",", "prod_logits", ")", ":", "\n", "                ", "candidates", ".", "append", "(", "(", "prod_str", ",", "prod_logit", ")", ")", "\n", "", "", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.step": [[238, 272], ["overnight_dec.InferLF.general_rules", "overnight_dec.InferLF.pointer_rules", "range", "print", "print", "print", "overnight_dec.InferLF.model.update_state", "overnight_dec.InferLF.update", "overnight_dec.InferLF.peek", "len", "len", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax().unsqueeze", "torch.log_softmax().unsqueeze", "torch.log_softmax().unsqueeze", "torch.log_softmax().unsqueeze", "len", "normalized_candidates.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.general_rules", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.pointer_rules", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.Decoder.update_state", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.peek", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "step", "(", "self", ",", "action", ",", "debug", "=", "False", ")", ":", "\n", "        ", "if", "debug", ":", "\n", "            ", "print", "(", "action", ")", "\n", "print", "(", "self", ".", "queue", ")", "\n", "print", "(", "self", ".", "history", ")", "\n", "\n", "", "if", "action", "is", "None", ":", "\n", "            ", "self", ".", "cur_state", "=", "self", ".", "model", ".", "inital_state", "\n", "self", ".", "cur_state", ",", "_", "=", "self", ".", "model", ".", "update_state", "(", "self", ".", "cur_state", ",", "self", ".", "enc_state", ")", "\n", "cur_non_terminal", "=", "lf_util", ".", "START_SYMBOL", "\n", "", "else", ":", "\n", "            ", "self", ".", "update", "(", "action", ")", "\n", "cur_non_terminal", "=", "self", ".", "peek", "(", ")", "\n", "\n", "# output next choices", "\n", "", "if", "cur_non_terminal", "is", "None", ":", "\n", "            ", "return", "None", "\n", "# (prod, score/logit)", "\n", "", "g_candidates", "=", "self", ".", "general_rules", "(", "cur_non_terminal", ")", "\n", "t_candidates", "=", "self", ".", "pointer_rules", "(", "cur_non_terminal", ")", "\n", "candidates", "=", "g_candidates", "+", "t_candidates", "\n", "\n", "if", "len", "(", "candidates", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "# renormalize the score", "\n", "", "normalized_candidates", "=", "[", "]", "\n", "if", "len", "(", "candidates", ")", ">", "1", ":", "\n", "            ", "_logits", "=", "torch", ".", "log_softmax", "(", "torch", ".", "stack", "(", "[", "a", "[", "1", "]", "for", "a", "in", "candidates", "]", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "_logits", "=", "torch", ".", "log_softmax", "(", "candidates", "[", "0", "]", "[", "1", "]", ",", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "candidates", ")", ")", ":", "\n", "            ", "normalized_candidates", ".", "append", "(", "(", "candidates", "[", "i", "]", "[", "0", "]", ",", "_logits", "[", "i", "]", ")", ")", "\n", "", "return", "normalized_candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.finalize": [[273, 281], ["tensor2struct.utils.registry.lookup", "tensor2struct.utils.registry.lookup", "tensor2struct.utils.registry.lookup.", "registry.lookup.action_seq_to_raw_lf", "list"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.overnight_language.LambdaDCS.action_seq_to_raw_lf"], ["", "def", "finalize", "(", "self", ")", ":", "\n", "        ", "grammar_class", "=", "registry", ".", "lookup", "(", "\"grammar\"", ",", "\"overnight\"", ")", "\n", "grammar", "=", "grammar_class", "(", "self", ".", "domain", ")", "\n", "try", ":", "\n", "            ", "lf", "=", "grammar", ".", "action_seq_to_raw_lf", "(", "self", ".", "history", ")", "\n", "", "except", "lf_errors", ".", "ParsingError", ":", "\n", "            ", "lf", "=", "None", "\n", "", "return", "list", "(", "self", ".", "history", ")", ",", "lf", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.Decoder.__init__": [[295, 352], ["super().__init__", "tensor2struct.modules.lstm.VarLSTMCell", "tensor2struct.modules.lstm.VarLSTMCell", "tensor2struct.modules.attention.MultiHeadedAttention", "tensor2struct.modules.attention.MultiHeadedAttention", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "set", "sorted", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "overnight_dec.Decoder._get_initial_state", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "pointer_types.union.union.union", "tensor2struct.modules.attention.ScaledDotProductPointer", "tensor2struct.modules.attention.ScaledDotProductPointer", "overnight_dec.ConstantModule", "enumerate", "len", "len", "set", "overnight_dec.Decoder.domain_dict[].keys"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.Decoder._get_initial_state", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys"], ["def", "__init__", "(", "\n", "self", ",", "\n", "preproc", ",", "\n", "device", ",", "\n", "enc_recurrent_size", "=", "256", ",", "\n", "rule_emb_size", "=", "64", ",", "\n", "recurrent_size", "=", "256", ",", "\n", "dropout", "=", "0.1", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "preproc", "=", "preproc", "\n", "self", ".", "_device", "=", "device", "\n", "\n", "self", ".", "enc_recurrent_size", "=", "enc_recurrent_size", "\n", "self", ".", "rule_emb_size", "=", "rule_emb_size", "\n", "self", ".", "recurrent_size", "=", "recurrent_size", "\n", "self", ".", "prod2id", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "enumerate", "(", "self", ".", "preproc", ".", "prod_list", ")", "}", "\n", "self", ".", "prod_dict", "=", "preproc", ".", "prod_dict", "\n", "self", ".", "domain_dict", "=", "preproc", ".", "domain_prod_dict", "\n", "\n", "self", ".", "state_update", "=", "lstm", ".", "VarLSTMCell", "(", "\n", "input_size", "=", "self", ".", "rule_emb_size", "+", "self", ".", "recurrent_size", "*", "2", ",", "\n", "hidden_size", "=", "self", ".", "recurrent_size", ",", "\n", "dropout", "=", "dropout", ",", "\n", ")", "\n", "\n", "self", ".", "desc_attn", "=", "attention", ".", "MultiHeadedAttention", "(", "\n", "h", "=", "8", ",", "query_size", "=", "self", ".", "recurrent_size", ",", "value_size", "=", "self", ".", "enc_recurrent_size", "\n", ")", "\n", "\n", "self", ".", "rule_logits", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "recurrent_size", "*", "2", ",", "self", ".", "rule_emb_size", ")", ",", "\n", "torch", ".", "nn", ".", "Tanh", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "rule_emb_size", ",", "len", "(", "self", ".", "prod2id", ")", ")", ",", "\n", ")", "\n", "self", ".", "rule_embedding", "=", "torch", ".", "nn", ".", "Embedding", "(", "\n", "num_embeddings", "=", "len", "(", "self", ".", "prod2id", ")", ",", "embedding_dim", "=", "self", ".", "rule_emb_size", "\n", ")", "\n", "\n", "pointer_types", "=", "set", "(", ")", "\n", "for", "d", "in", "self", ".", "domain_dict", ":", "\n", "            ", "pointer_types", "=", "pointer_types", ".", "union", "(", "set", "(", "self", ".", "domain_dict", "[", "d", "]", ".", "keys", "(", ")", ")", ")", "\n", "", "self", ".", "pointer_types", "=", "sorted", "(", "pointer_types", ")", "\n", "self", ".", "pointers", "=", "torch", ".", "nn", ".", "ModuleDict", "(", ")", "\n", "self", ".", "pointer_action_emb_proj", "=", "torch", ".", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "pointer_type", "in", "self", ".", "pointer_types", ":", "\n", "            ", "self", ".", "pointers", "[", "pointer_type", "]", "=", "attention", ".", "ScaledDotProductPointer", "(", "\n", "query_size", "=", "self", ".", "recurrent_size", ",", "key_size", "=", "self", ".", "enc_recurrent_size", "\n", ")", "\n", "# self.pointer_action_emb_proj[pointer_type] = torch.nn.Linear(", "\n", "#    self.enc_recurrent_size, self.rule_emb_size", "\n", "# )", "\n", "self", ".", "pointer_action_emb_proj", "[", "pointer_type", "]", "=", "ConstantModule", "(", "\n", "self", ".", "rule_emb_size", "\n", ")", "\n", "\n", "", "self", ".", "inital_state", "=", "self", ".", "_get_initial_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.Decoder._get_initial_state": [[353, 376], ["torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "overnight_dec.RnnStatelet", "torch.nn.init.normal_().to", "torch.nn.init.normal_().to", "torch.nn.init.normal_().to", "torch.nn.init.normal_().to", "torch.nn.init.normal_().to", "torch.nn.init.normal_().to", "torch.nn.init.normal_().to", "torch.nn.init.normal_().to", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["", "def", "_get_initial_state", "(", "self", ")", "->", "RnnStatelet", ":", "\n", "        ", "\"\"\"\n        Initial states are trainable parameters\n        \"\"\"", "\n", "self", ".", "initial_state", "=", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "normal_", "(", "torch", ".", "empty", "(", "1", ",", "self", ".", "recurrent_size", ")", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", ")", "\n", "self", ".", "initial_memory", "=", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "normal_", "(", "torch", ".", "empty", "(", "1", ",", "self", ".", "recurrent_size", ")", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", ")", "\n", "self", ".", "initial_action_embed", "=", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "normal_", "(", "torch", ".", "empty", "(", "1", ",", "self", ".", "rule_emb_size", ")", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", ")", "\n", "self", ".", "inital_state_hat", "=", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "normal_", "(", "torch", ".", "empty", "(", "1", ",", "self", ".", "recurrent_size", "*", "2", ")", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", ")", "\n", "initial_rnn_state", "=", "RnnStatelet", "(", "\n", "self", ".", "initial_state", ",", "\n", "self", ".", "initial_memory", ",", "\n", "self", ".", "initial_action_embed", ",", "\n", "self", ".", "inital_state_hat", ",", "\n", ")", "\n", "return", "initial_rnn_state", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.Decoder.update_state": [[377, 385], ["overnight_dec.Decoder.compute_attention", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "overnight_dec.Decoder.state_update", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "overnight_dec.RnnStatelet"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.Decoder.compute_attention"], ["", "def", "update_state", "(", "self", ",", "rnn_state", ",", "desc_enc", ")", ":", "\n", "        ", "context_v", ",", "att_logits", "=", "self", ".", "compute_attention", "(", "rnn_state", ",", "desc_enc", ")", "\n", "cur_hidden", ",", "cur_memory", "=", "rnn_state", ".", "state", ",", "rnn_state", ".", "memory", "\n", "new_input", "=", "torch", ".", "cat", "(", "[", "rnn_state", ".", "action_embed", ",", "rnn_state", ".", "state_hat", "]", ",", "dim", "=", "-", "1", ")", "\n", "next_state", ",", "next_memory", "=", "self", ".", "state_update", "(", "new_input", ",", "(", "cur_hidden", ",", "cur_memory", ")", ")", "\n", "next_state_hat", "=", "torch", ".", "cat", "(", "[", "next_state", ",", "context_v", "]", ",", "dim", "=", "-", "1", ")", "\n", "new_decoder_state", "=", "RnnStatelet", "(", "next_state", ",", "next_memory", ",", "None", ",", "next_state_hat", ")", "\n", "return", "new_decoder_state", ",", "att_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.Decoder.compute_attention": [[386, 390], ["overnight_dec.Decoder.desc_attn"], "methods", ["None"], ["", "def", "compute_attention", "(", "self", ",", "rnn_state", ",", "enc_state", ")", ":", "\n", "        ", "query", "=", "rnn_state", ".", "state", "\n", "context_v", ",", "att_logits", "=", "self", ".", "desc_attn", "(", "query", ",", "enc_state", ".", "memory", ")", "\n", "return", "context_v", ",", "att_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.Decoder.compute_pointer_with_align": [[391, 405], ["torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "pointer_probs.clamp.clamp.clamp", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.clamp"], ["", "def", "compute_pointer_with_align", "(", "\n", "self", ",", "rnn_state", ",", "enc_state", ",", "pointer_type", ",", "pointer_v_dic", "\n", ")", ":", "\n", "        ", "\"TODO: this function needs to be changed\"", "\n", "memory_pointer_logits", "=", "self", ".", "pointers", "[", "pointer_type", "]", "(", "\n", "rnn_state", ".", "state", ",", "enc_state", ".", "memory", "\n", ")", "\n", "memory_pointer_probs", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "memory_pointer_logits", ",", "dim", "=", "1", ")", "\n", "pointer_probs", "=", "torch", ".", "mm", "(", "\n", "memory_pointer_probs", ",", "enc_state", ".", "pointer_align_mat", "[", "pointer_type", "]", "\n", ")", "\n", "pointer_probs", "=", "pointer_probs", ".", "clamp", "(", "min", "=", "1e-9", ")", "\n", "pointer_logits", "=", "torch", ".", "log", "(", "pointer_probs", ")", "\n", "return", "pointer_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.Decoder.compute_pointer": [[406, 412], ["pointer_memory.unsqueeze.unsqueeze.unsqueeze"], "methods", ["None"], ["", "def", "compute_pointer", "(", "self", ",", "rnn_state", ",", "enc_state", ",", "pointer_type", ",", "pointer_memory", ")", ":", "\n", "        ", "pointer_memory", "=", "pointer_memory", ".", "unsqueeze", "(", "0", ")", "# 1 * mem_len * dim", "\n", "memory_pointer_logits", "=", "self", ".", "pointers", "[", "pointer_type", "]", "(", "\n", "rnn_state", ".", "state", ",", "pointer_memory", "\n", ")", "\n", "return", "memory_pointer_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.Decoder.forward": [[413, 423], ["overnight_dec.Decoder.compute_loss", "overnight_dec.Decoder.begin_inference"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_loss", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.begin_inference"], ["", "def", "forward", "(", "self", ",", "example", ",", "enc_state", ",", "compute_loss", "=", "True", ",", "infer", "=", "False", ")", ":", "\n", "        ", "ret_dict", "=", "{", "}", "\n", "ret_dict", "[", "\"mentioned\"", "]", "=", "enc_state", ".", "mentioned", "\n", "if", "compute_loss", ":", "\n", "            ", "ret_dict", "[", "\"loss\"", "]", "=", "self", ".", "compute_loss", "(", "example", ",", "enc_state", ")", "\n", "", "if", "infer", ":", "\n", "            ", "initial_state", ",", "initial_choices", "=", "self", ".", "begin_inference", "(", "example", ",", "enc_state", ")", "\n", "ret_dict", "[", "\"initial_state\"", "]", "=", "initial_state", "\n", "ret_dict", "[", "\"initial_choices\"", "]", "=", "initial_choices", "\n", "", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.Decoder.get_prod_pointers": [[424, 442], ["collections.defaultdict", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tensor2struct.get_right_side_parts", "tensor2struct.get_right_side_parts", "enc_state.pointer_refs[].index", "v_pointers[].append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.common.util.get_right_side_parts", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.common.util.get_right_side_parts", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "get_prod_pointers", "(", "self", ",", "domain", ",", "enc_state", ")", ":", "\n", "        ", "v_pointers", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "tp", "in", "self", ".", "domain_dict", "[", "domain", "]", ":", "\n", "            ", "if", "tp", "==", "\"Property\"", ":", "\n", "                ", "p", "=", "\"property\"", "\n", "", "else", ":", "\n", "                ", "assert", "\"Value\"", "in", "tp", "\n", "p", "=", "\"value\"", "\n", "", "for", "prod", "in", "self", ".", "domain_dict", "[", "domain", "]", "[", "tp", "]", ":", "\n", "                ", "ref", "=", "lf_util", ".", "get_right_side_parts", "(", "prod", ")", "[", "0", "]", "\n", "if", "ref", "in", "enc_state", ".", "pointer_refs", "[", "p", "]", ":", "\n", "                    ", "ind", "=", "enc_state", ".", "pointer_refs", "[", "p", "]", ".", "index", "(", "ref", ")", "\n", "v_pointers", "[", "tp", "]", ".", "append", "(", "enc_state", ".", "pointer_memories", "[", "p", "]", "[", ":", ",", "ind", "]", ")", "\n", "\n", "", "", "", "for", "tp", "in", "v_pointers", ":", "\n", "            ", "if", "len", "(", "v_pointers", "[", "tp", "]", ")", ">", "0", ":", "\n", "                ", "v_pointers", "[", "tp", "]", "=", "torch", ".", "cat", "(", "v_pointers", "[", "tp", "]", ",", "0", ")", "\n", "", "", "return", "v_pointers", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.Decoder.compute_loss": [[443, 502], ["overnight_dec.Decoder.state_update.set_dropout_masks", "overnight_dec.Decoder.get_prod_pointers", "enumerate", "sum", "action.split", "overnight_dec.Decoder.update_state", "cand_prod_strs.index", "losses.append", "overnight_dec.Decoder.compute_pointer().squeeze", "enumerate", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "overnight_dec.Decoder.rule_logits().squeeze", "enumerate", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "candidates[].logit.unsqueeze", "[].unsqueeze", "overnight_dec.TrainCandidate", "candidates.append", "overnight_dec.Decoder.rule_embedding.weight[].unsqueeze", "overnight_dec.TrainCandidate", "candidates.append", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "overnight_dec.Decoder.compute_pointer", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "overnight_dec.Decoder.rule_logits"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.RecurrentDropoutLSTMCell.set_dropout_masks", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.Decoder.get_prod_pointers", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.Decoder.update_state", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_pointer"], ["", "def", "compute_loss", "(", "self", ",", "dec_output", ",", "enc_state", ")", ":", "\n", "        ", "self", ".", "state_update", ".", "set_dropout_masks", "(", "batch_size", "=", "1", ")", "\n", "domain", "=", "dec_output", "[", "\"domain\"", "]", "\n", "actions", "=", "dec_output", "[", "\"productions\"", "]", "\n", "domain_prod_dict", "=", "self", ".", "domain_dict", "[", "domain", "]", "\n", "pointer_v_dic", "=", "self", ".", "get_prod_pointers", "(", "domain", ",", "enc_state", ")", "\n", "\n", "losses", "=", "[", "]", "\n", "rnn_state", "=", "self", ".", "inital_state", "\n", "for", "i", ",", "action", "in", "enumerate", "(", "actions", ")", ":", "\n", "            ", "left_side", ",", "right_side", "=", "action", ".", "split", "(", "\" -> \"", ")", "\n", "new_rnn_state", ",", "att_logits", "=", "self", ".", "update_state", "(", "rnn_state", ",", "enc_state", ")", "\n", "\n", "# aggreate candidates", "\n", "candidates", "=", "[", "]", "# (prod, logit, rep (1*dim), type)", "\n", "if", "left_side", "in", "domain_prod_dict", ":", "\n", "                ", "pointer_type", "=", "left_side", "\n", "pointer_logits", "=", "self", ".", "compute_pointer", "(", "\n", "new_rnn_state", ",", "enc_state", ",", "pointer_type", ",", "pointer_v_dic", "[", "pointer_type", "]", "\n", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "for", "i", ",", "prod", "in", "enumerate", "(", "domain_prod_dict", "[", "pointer_type", "]", ")", ":", "\n", "                    ", "logit", "=", "pointer_logits", "[", "i", "]", "\n", "rep", "=", "pointer_v_dic", "[", "pointer_type", "]", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "\n", "candidate", "=", "TrainCandidate", "(", "prod", ",", "logit", ",", "rep", ",", "\"pointer\"", ")", "\n", "candidates", ".", "append", "(", "candidate", ")", "\n", "\n", "", "", "if", "left_side", "in", "self", ".", "prod_dict", ":", "\n", "                ", "valid_prod_strs", "=", "self", ".", "prod_dict", "[", "left_side", "]", "\n", "valid_prod_ids", "=", "[", "self", ".", "prod2id", "[", "p", "]", "for", "p", "in", "valid_prod_strs", "]", "\n", "valid_prod_id_t", "=", "torch", ".", "LongTensor", "(", "valid_prod_ids", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "_target_logits", "=", "self", ".", "rule_logits", "(", "new_rnn_state", ".", "state_hat", ")", ".", "squeeze", "(", "0", ")", "\n", "target_logits", "=", "_target_logits", "[", "valid_prod_id_t", "]", "\n", "\n", "for", "i", ",", "prod", "in", "enumerate", "(", "self", ".", "prod_dict", "[", "left_side", "]", ")", ":", "\n", "                    ", "logit", "=", "target_logits", "[", "i", "]", "\n", "rep", "=", "self", ".", "rule_embedding", ".", "weight", "[", "self", ".", "prod2id", "[", "prod", "]", "]", ".", "unsqueeze", "(", "0", ")", "\n", "candidate", "=", "TrainCandidate", "(", "prod", ",", "logit", ",", "rep", ",", "\"non-pointer\"", ")", "\n", "candidates", ".", "append", "(", "candidate", ")", "\n", "\n", "# choose candidates", "\n", "", "", "cand_prod_strs", "=", "[", "c", ".", "prod_str", "for", "c", "in", "candidates", "]", "\n", "if", "len", "(", "cand_prod_strs", ")", ">", "1", ":", "\n", "                ", "cand_logits", "=", "torch", ".", "stack", "(", "[", "c", ".", "logit", "for", "c", "in", "candidates", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "cand_logits", "=", "candidates", "[", "0", "]", ".", "logit", ".", "unsqueeze", "(", "0", ")", "\n", "", "target_id", "=", "cand_prod_strs", ".", "index", "(", "action", ")", "\n", "if", "candidates", "[", "target_id", "]", ".", "prod_type", "==", "\"pointer\"", ":", "\n", "                ", "new_action_embed", "=", "self", ".", "pointer_action_emb_proj", "[", "left_side", "]", "(", "\n", "candidates", "[", "target_id", "]", ".", "prod_v", "\n", ")", "\n", "", "else", ":", "\n", "                ", "new_action_embed", "=", "candidates", "[", "target_id", "]", ".", "prod_v", "\n", "\n", "", "loss", "=", "-", "1", "*", "torch", ".", "log_softmax", "(", "cand_logits", ",", "dim", "=", "-", "1", ")", "[", "target_id", "]", "\n", "losses", ".", "append", "(", "loss", ")", "\n", "new_rnn_state", ".", "action_embed", "=", "new_action_embed", "\n", "rnn_state", "=", "new_rnn_state", "\n", "", "return", "sum", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.Decoder.begin_inference": [[503, 509], ["overnight_dec.Decoder.state_update.set_dropout_masks", "overnight_dec.InferLF", "overnight_dec.InferLF.step"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.RecurrentDropoutLSTMCell.set_dropout_masks", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step"], ["", "def", "begin_inference", "(", "self", ",", "example", ",", "enc_state", ")", ":", "\n", "        ", "self", ".", "state_update", ".", "set_dropout_masks", "(", "batch_size", "=", "1", ")", "\n", "# assert not self.training", "\n", "infer_lf", "=", "InferLF", "(", "self", ",", "enc_state", ",", "example", ")", "\n", "choices", "=", "infer_lf", ".", "step", "(", "None", ")", "\n", "return", "infer_lf", ",", "choices", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_linking.StringLinking.__init__": [[57, 60], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "preproc", ")", ":", "\n", "        ", "self", ".", "_device", "=", "device", "\n", "self", ".", "relations2id", "=", "preproc", ".", "relations2id", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_linking.StringLinking.__call__": [[61, 63], ["overnight_linking.StringLinking.link_one_example"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_linking.StringLinking.link_one_example"], ["", "def", "__call__", "(", "self", ",", "desc", ")", ":", "\n", "        ", "return", "self", ".", "link_one_example", "(", "desc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_linking.StringLinking.link_one_example": [[64, 74], ["overnight_linking.get_graph_from_relations", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "overnight_linking.RelationMap", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_linking.get_graph_from_relations", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], ["", "def", "link_one_example", "(", "self", ",", "desc", ")", ":", "\n", "        ", "relation_np", "=", "get_graph_from_relations", "(", "desc", ",", "self", ".", "relations2id", ")", "\n", "relations_t", "=", "torch", ".", "LongTensor", "(", "relation_np", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "relation_obj", "=", "RelationMap", "(", "\n", "q_len", "=", "len", "(", "desc", "[", "\"question\"", "]", ")", ",", "\n", "c_len", "=", "len", "(", "desc", "[", "\"columns\"", "]", ")", ",", "\n", "v_len", "=", "len", "(", "desc", "[", "\"values\"", "]", ")", ",", "\n", "predefined_relation", "=", "relations_t", ",", "\n", ")", "\n", "return", "relation_obj", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_linking.get_graph_from_relations": [[14, 31], ["tensor2struct.contexts.knowledge_graph.KnowledgeGraph", "knowledge_graph.KnowledgeGraph.get_relation_graph", "sections.append", "sections.append", "knowledge_graph.KnowledgeGraph.add_relations_to_graph", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.knowledge_graph.KnowledgeGraph.get_relation_graph", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.knowledge_graph.KnowledgeGraph.add_relations_to_graph"], ["def", "get_graph_from_relations", "(", "desc", ",", "relations2id", ")", ":", "\n", "    ", "\"\"\"\n    Protocol: the graph is contructed based on four keys of desc:\n    question, columns, tables, values\n    **MIND THE ORDER OF SECTIONS**\n    \"\"\"", "\n", "sections", "=", "[", "(", "\"q\"", ",", "len", "(", "desc", "[", "\"question\"", "]", ")", ")", "]", "\n", "if", "\"columns\"", "in", "desc", ":", "\n", "        ", "sections", ".", "append", "(", "(", "\"col\"", ",", "len", "(", "desc", "[", "\"columns\"", "]", ")", ")", ")", "\n", "", "if", "\"values\"", "in", "desc", ":", "\n", "        ", "sections", ".", "append", "(", "(", "\"val\"", ",", "len", "(", "desc", "[", "\"values\"", "]", ")", ")", ")", "\n", "\n", "", "relations", "=", "[", "desc", "[", "\"schema_relations\"", "]", ",", "desc", "[", "\"sc_relations\"", "]", ",", "desc", "[", "\"cv_relations\"", "]", "]", "\n", "relation_graph", "=", "knowledge_graph", ".", "KnowledgeGraph", "(", "sections", ",", "relations2id", ")", "\n", "for", "relation", "in", "relations", ":", "\n", "        ", "relation_graph", ".", "add_relations_to_graph", "(", "relation", ")", "\n", "", "return", "relation_graph", ".", "get_relation_graph", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_linking.get_schema_graph_from_relations": [[33, 44], ["tensor2struct.contexts.knowledge_graph.KnowledgeGraph", "knowledge_graph.KnowledgeGraph.get_relation_graph", "sections.append", "sections.append", "knowledge_graph.KnowledgeGraph.add_relations_to_graph", "len", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.knowledge_graph.KnowledgeGraph.get_relation_graph", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.contexts.knowledge_graph.KnowledgeGraph.add_relations_to_graph"], ["", "def", "get_schema_graph_from_relations", "(", "desc", ",", "relations2id", ")", ":", "\n", "    ", "sections", "=", "[", "]", "\n", "if", "\"columns\"", "in", "desc", ":", "\n", "        ", "sections", ".", "append", "(", "(", "\"col\"", ",", "len", "(", "desc", "[", "\"columns\"", "]", ")", ")", ")", "\n", "", "if", "\"values\"", "in", "desc", ":", "\n", "        ", "sections", ".", "append", "(", "(", "\"val\"", ",", "len", "(", "desc", "[", "\"values\"", "]", ")", ")", ")", "\n", "", "relations", "=", "[", "desc", "[", "\"schema_relations\"", "]", "]", "\n", "relation_graph", "=", "knowledge_graph", ".", "KnowledgeGraph", "(", "sections", ",", "relations2id", ")", "\n", "for", "relation", "in", "relations", ":", "\n", "        ", "relation_graph", ".", "add_relations_to_graph", "(", "relation", ")", "\n", "", "return", "relation_graph", ".", "get_relation_graph", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_beam_search.overnight_beam_search": [[32, 97], ["tensor2struct.utils.registry.register", "model", "range", "tensor2struct.datasets.overnight.execute", "zip", "executables.sort", "overnight_beam_search.Hypothesis", "candidates.sort", "hyp.inference_state.finalize", "lfs.append", "len", "candidate.hyp.inference_state.clone", "candidate.hyp.inference_state.clone.step", "overnight_beam_search.Hypothesis", "executables.append", "operator.attrgetter", "overnight_beam_search.Candidate", "operator.attrgetter", "finished.append", "beam.append", "choice_score.item", "len", "choice_score.item"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.register", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.dsl.scan.ActionLang.execute", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.infer_tree_traversal.InferenceTreeTraversal.finalize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.clone", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "@", "registry", ".", "register", "(", "\"infer_method\"", ",", "\"overnight_beam_search\"", ")", "\n", "def", "overnight_beam_search", "(", "model", ",", "orig_item", ",", "preproc_item", ",", "beam_size", ",", "max_steps", ")", ":", "\n", "    ", "\"\"\"\n    Beam search and finally filtered with execution \n    \"\"\"", "\n", "orig_beam_size", "=", "beam_size", "\n", "beam_size", "=", "beam_size", "*", "2", "\n", "\n", "ret_state", "=", "model", "(", "orig_item", ",", "preproc_item", ",", "compute_loss", "=", "False", ",", "infer", "=", "True", ")", "\n", "inference_state", ",", "next_choices", "=", "(", "\n", "ret_state", "[", "\"initial_state\"", "]", ",", "\n", "ret_state", "[", "\"initial_choices\"", "]", ",", "\n", ")", "\n", "beam", "=", "[", "Hypothesis", "(", "inference_state", ",", "next_choices", ")", "]", "\n", "finished", "=", "[", "]", "\n", "\n", "for", "step", "in", "range", "(", "max_steps", ")", ":", "\n", "        ", "if", "len", "(", "finished", ")", "==", "beam_size", ":", "\n", "            ", "break", "\n", "\n", "", "candidates", "=", "[", "]", "\n", "for", "hyp", "in", "beam", ":", "\n", "            ", "candidates", "+=", "[", "\n", "Candidate", "(", "\n", "hyp", ",", "choice", ",", "choice_score", ".", "item", "(", ")", ",", "hyp", ".", "score", "+", "choice_score", ".", "item", "(", ")", "\n", ")", "\n", "for", "choice", ",", "choice_score", "in", "hyp", ".", "next_choices", "\n", "]", "\n", "\n", "# Keep the top K expansions", "\n", "", "candidates", ".", "sort", "(", "key", "=", "operator", ".", "attrgetter", "(", "\"cum_score\"", ")", ",", "reverse", "=", "True", ")", "\n", "candidates", "=", "candidates", "[", ":", "beam_size", "-", "len", "(", "finished", ")", "]", "\n", "\n", "# Create the new hypotheses from the expansions", "\n", "beam", "=", "[", "]", "\n", "for", "candidate", "in", "candidates", ":", "\n", "            ", "inference_state", "=", "candidate", ".", "hyp", ".", "inference_state", ".", "clone", "(", ")", "\n", "next_choices", "=", "inference_state", ".", "step", "(", "candidate", ".", "choice", ")", "\n", "new_hyp", "=", "Hypothesis", "(", "\n", "inference_state", ",", "\n", "next_choices", ",", "\n", "candidate", ".", "cum_score", ",", "\n", "candidate", ".", "hyp", ".", "choice_history", "+", "[", "candidate", ".", "choice", "]", ",", "\n", "candidate", ".", "hyp", ".", "score_history", "+", "[", "candidate", ".", "choice_score", "]", ",", "\n", ")", "\n", "if", "next_choices", "is", "None", ":", "\n", "                ", "finished", ".", "append", "(", "new_hyp", ")", "\n", "", "else", ":", "\n", "                ", "beam", ".", "append", "(", "new_hyp", ")", "\n", "\n", "# filter by execution", "\n", "", "", "", "lfs", "=", "[", "]", "\n", "for", "hyp", "in", "finished", ":", "\n", "        ", "_", ",", "lf", "=", "hyp", ".", "inference_state", ".", "finalize", "(", ")", "\n", "lfs", ".", "append", "(", "lf", ")", "\n", "", "denotations", "=", "overnight", ".", "execute", "(", "lfs", ",", "orig_item", ".", "domain", ")", "\n", "\n", "executables", "=", "[", "]", "\n", "for", "beam", ",", "d", "in", "zip", "(", "finished", ",", "denotations", ")", ":", "\n", "        ", "if", "d", "is", "not", "None", ":", "\n", "            ", "executables", ".", "append", "(", "beam", ")", "\n", "\n", "", "", "executables", ".", "sort", "(", "key", "=", "operator", ".", "attrgetter", "(", "\"score\"", ")", ",", "reverse", "=", "True", ")", "\n", "executables", "=", "executables", "[", ":", "orig_beam_size", "]", "\n", "return", "executables", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_beam_search.have_mentioned_vp": [[99, 136], ["len", "all", "len", "all", "len", "all", "len", "all", "any", "any", "any", "any"], "function", ["None"], ["", "def", "have_mentioned_vp", "(", "prods", ",", "mentions", ")", ":", "\n", "    ", "\"\"\"\n    Heursitics to make sure that mentioned entities and propertied are predicted \n    \"\"\"", "\n", "if", "len", "(", "mentions", "[", "\"exact\"", "]", "[", "\"property\"", "]", ")", ">", "0", "and", "not", "all", "(", "\n", "any", "(", "v", "in", "prod", "for", "prod", "in", "prods", ")", "for", "v", "in", "mentions", "[", "\"exact\"", "]", "[", "\"property\"", "]", "\n", ")", ":", "\n", "        ", "em_p_flag", "=", "False", "\n", "", "else", ":", "\n", "        ", "em_p_flag", "=", "True", "\n", "\n", "", "if", "len", "(", "mentions", "[", "\"exact\"", "]", "[", "\"value\"", "]", ")", ">", "0", "and", "not", "all", "(", "\n", "any", "(", "v", "in", "prod", "for", "prod", "in", "prods", ")", "for", "v", "in", "mentions", "[", "\"exact\"", "]", "[", "\"value\"", "]", "\n", ")", ":", "\n", "        ", "em_v_flag", "=", "False", "\n", "", "else", ":", "\n", "        ", "em_v_flag", "=", "True", "\n", "\n", "", "if", "len", "(", "mentions", "[", "\"partial\"", "]", "[", "\"property\"", "]", ")", ">", "0", "and", "not", "all", "(", "\n", "any", "(", "v", "in", "prod", "for", "prod", "in", "prods", ")", "for", "v", "in", "mentions", "[", "\"partial\"", "]", "[", "\"property\"", "]", "\n", ")", ":", "\n", "        ", "pa_p_flag", "=", "False", "\n", "", "else", ":", "\n", "        ", "pa_p_flag", "=", "True", "\n", "\n", "", "if", "len", "(", "mentions", "[", "\"partial\"", "]", "[", "\"value\"", "]", ")", ">", "0", "and", "not", "all", "(", "\n", "any", "(", "v", "in", "prod", "for", "prod", "in", "prods", ")", "for", "v", "in", "mentions", "[", "\"partial\"", "]", "[", "\"value\"", "]", "\n", ")", ":", "\n", "        ", "pa_v_flag", "=", "False", "\n", "", "else", ":", "\n", "        ", "pa_v_flag", "=", "True", "\n", "\n", "# if all([em_v_flag, em_p_flag, pa_p_flag, pa_v_flag]):", "\n", "", "if", "em_p_flag", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.infer_tree_traversal.InferenceTreeTraversal.__init__": [[61, 65], ["tensor2struct.models.ast_decoder.tree_traversal.TreeTraversal.__init__", "pyrsistent.pvector"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "desc_enc", ",", "example", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "desc_enc", ")", "\n", "self", ".", "example", "=", "example", "\n", "self", ".", "actions", "=", "pyrsistent", ".", "pvector", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.infer_tree_traversal.InferenceTreeTraversal.clone": [[66, 71], ["super().clone"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.clone"], ["", "def", "clone", "(", "self", ")", ":", "\n", "        ", "super_clone", "=", "super", "(", ")", ".", "clone", "(", ")", "\n", "super_clone", ".", "actions", "=", "self", ".", "actions", "\n", "super_clone", ".", "example", "=", "self", ".", "example", "\n", "return", "super_clone", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.infer_tree_traversal.InferenceTreeTraversal.rule_choice": [[72, 74], ["infer_tree_traversal.InferenceTreeTraversal.model.rule_infer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.rule_infer"], ["", "def", "rule_choice", "(", "self", ",", "node_type", ",", "rule_logits", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "rule_infer", "(", "node_type", ",", "rule_logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.infer_tree_traversal.InferenceTreeTraversal.token_choice": [[75, 77], ["infer_tree_traversal.InferenceTreeTraversal.model.token_infer"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.token_infer"], ["", "def", "token_choice", "(", "self", ",", "output", ",", "gen_logodds", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "token_infer", "(", "output", ",", "gen_logodds", ",", "self", ".", "desc_enc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.infer_tree_traversal.InferenceTreeTraversal.pointer_choice": [[78, 97], ["infer_tree_traversal.InferenceTreeTraversal.model.pointer_infer", "infer_tree_traversal.InferenceTreeTraversal.desc_enc.pointer_maps.get", "dict", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "infer_tree_traversal.InferenceTreeTraversal.items", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "tuple"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.pointer_infer", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], ["", "def", "pointer_choice", "(", "self", ",", "node_type", ",", "logits", ",", "attention_logits", ")", ":", "\n", "# Group them based on pointer map", "\n", "        ", "pointer_logprobs", "=", "self", ".", "model", ".", "pointer_infer", "(", "node_type", ",", "logits", ")", "\n", "pointer_map", "=", "self", ".", "desc_enc", ".", "pointer_maps", ".", "get", "(", "node_type", ")", "\n", "if", "not", "pointer_map", ":", "\n", "            ", "return", "pointer_logprobs", "\n", "\n", "", "pointer_logprobs", "=", "dict", "(", "pointer_logprobs", ")", "\n", "return", "[", "\n", "(", "\n", "orig_index", ",", "\n", "torch", ".", "logsumexp", "(", "\n", "torch", ".", "stack", "(", "\n", "tuple", "(", "pointer_logprobs", "[", "i", "]", "for", "i", "in", "mapped_indices", ")", ",", "dim", "=", "0", "\n", ")", ",", "\n", "dim", "=", "0", ",", "\n", ")", ",", "\n", ")", "\n", "for", "orig_index", ",", "mapped_indices", "in", "pointer_map", ".", "items", "(", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.infer_tree_traversal.InferenceTreeTraversal.update_using_last_choice": [[99, 151], ["super().update_using_last_choice", "infer_tree_traversal.InferenceTreeTraversal.actions.append", "infer_tree_traversal.InferenceTreeTraversal.SetParentField", "infer_tree_traversal.InferenceTreeTraversal.actions.append", "infer_tree_traversal.InferenceTreeTraversal.actions.append", "infer_tree_traversal.InferenceTreeTraversal.NodeFinished", "infer_tree_traversal.InferenceTreeTraversal.CreateParentFieldList", "infer_tree_traversal.InferenceTreeTraversal.actions.append", "infer_tree_traversal.InferenceTreeTraversal.actions.append", "infer_tree_traversal.InferenceTreeTraversal.FinalizeTerminal", "infer_tree_traversal.InferenceTreeTraversal.actions.append", "infer_tree_traversal.InferenceTreeTraversal.SetParentField", "infer_tree_traversal.InferenceTreeTraversal.actions.append", "infer_tree_traversal.InferenceTreeTraversal.AppendTerminalToken", "infer_tree_traversal.InferenceTreeTraversal.NodeFinished"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.update_using_last_choice", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "def", "update_using_last_choice", "(", "\n", "self", ",", "last_choice", ",", "extra_choice_info", ",", "attention_offset", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "update_using_last_choice", "(", "\n", "last_choice", ",", "extra_choice_info", ",", "attention_offset", "\n", ")", "\n", "\n", "# Record actions", "\n", "# CHILDREN_INQUIRE", "\n", "if", "self", ".", "cur_item", ".", "state", "==", "TreeTraversal", ".", "State", ".", "CHILDREN_INQUIRE", ":", "\n", "            ", "self", ".", "actions", "=", "self", ".", "actions", ".", "append", "(", "\n", "self", ".", "SetParentField", "(", "\n", "self", ".", "cur_item", ".", "parent_field_name", ",", "self", ".", "cur_item", ".", "node_type", "\n", ")", "\n", ")", "\n", "type_info", "=", "self", ".", "model", ".", "ast_wrapper", ".", "singular_types", "[", "self", ".", "cur_item", ".", "node_type", "]", "\n", "if", "not", "type_info", ".", "fields", ":", "\n", "                ", "self", ".", "actions", "=", "self", ".", "actions", ".", "append", "(", "self", ".", "NodeFinished", "(", ")", ")", "\n", "\n", "# LIST_LENGTH_APPLY", "\n", "", "", "elif", "self", ".", "cur_item", ".", "state", "==", "TreeTraversal", ".", "State", ".", "LIST_LENGTH_APPLY", ":", "\n", "            ", "self", ".", "actions", "=", "self", ".", "actions", ".", "append", "(", "\n", "self", ".", "CreateParentFieldList", "(", "self", ".", "cur_item", ".", "parent_field_name", ")", "\n", ")", "\n", "\n", "# GEN_TOKEN", "\n", "", "elif", "self", ".", "cur_item", ".", "state", "==", "TreeTraversal", ".", "State", ".", "GEN_TOKEN", ":", "\n", "            ", "if", "last_choice", "==", "vocab", ".", "EOS", ":", "\n", "                ", "self", ".", "actions", "=", "self", ".", "actions", ".", "append", "(", "\n", "self", ".", "FinalizeTerminal", "(", "\n", "self", ".", "cur_item", ".", "parent_field_name", ",", "self", ".", "cur_item", ".", "node_type", "\n", ")", "\n", ")", "\n", "", "elif", "last_choice", "is", "not", "None", ":", "\n", "                ", "self", ".", "actions", "=", "self", ".", "actions", ".", "append", "(", "\n", "self", ".", "AppendTerminalToken", "(", "\n", "self", ".", "cur_item", ".", "parent_field_name", ",", "last_choice", "\n", ")", "\n", ")", "\n", "\n", "", "", "elif", "self", ".", "cur_item", ".", "state", "==", "TreeTraversal", ".", "State", ".", "POINTER_APPLY", ":", "\n", "            ", "self", ".", "actions", "=", "self", ".", "actions", ".", "append", "(", "\n", "self", ".", "SetParentField", "(", "\n", "self", ".", "cur_item", ".", "parent_field_name", ",", "\n", "node_type", "=", "None", ",", "\n", "node_value", "=", "last_choice", ",", "\n", ")", "\n", ")", "\n", "\n", "# NODE_FINISHED", "\n", "", "elif", "self", ".", "cur_item", ".", "state", "==", "TreeTraversal", ".", "State", ".", "NODE_FINISHED", ":", "\n", "            ", "self", ".", "actions", "=", "self", ".", "actions", ".", "append", "(", "self", ".", "NodeFinished", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.infer_tree_traversal.InferenceTreeTraversal.finalize": [[152, 217], ["enumerate", "isinstance", "infer_tree_traversal.InferenceTreeTraversal.model.preproc.grammar.unparse", "stack.pop.get", "isinstance", "stack.append", "isinstance", "current[].append", "stack.append", "isinstance", "stack.pop.get", "stack.pop.get.append", "isinstance", "stack.pop.get", "infer_tree_traversal.InferenceTreeTraversal.SIMPLE_TERMINAL_TYPES.get", "isinstance", "stack.pop", "ValueError", "infer_tree_traversal.InferenceTreeTraversal.", "terminal.decode", "ValueError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.unparse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.sql2nl.bpe_encoder.MultiprocessingEncoder.decode"], ["", "", "def", "finalize", "(", "self", ")", ":", "\n", "        ", "root", "=", "current", "=", "None", "\n", "stack", "=", "[", "]", "\n", "for", "i", ",", "action", "in", "enumerate", "(", "self", ".", "actions", ")", ":", "\n", "            ", "if", "isinstance", "(", "action", ",", "self", ".", "SetParentField", ")", ":", "\n", "                ", "if", "action", ".", "node_value", "is", "None", ":", "\n", "                    ", "new_node", "=", "{", "\"_type\"", ":", "action", ".", "node_type", "}", "\n", "", "else", ":", "\n", "                    ", "new_node", "=", "action", ".", "node_value", "\n", "\n", "", "if", "action", ".", "parent_field_name", "is", "None", ":", "\n", "# Initial node in tree.", "\n", "                    ", "assert", "root", "is", "None", "\n", "root", "=", "current", "=", "new_node", "\n", "stack", ".", "append", "(", "root", ")", "\n", "continue", "\n", "\n", "", "existing_list", "=", "current", ".", "get", "(", "action", ".", "parent_field_name", ")", "\n", "if", "existing_list", "is", "None", ":", "\n", "                    ", "current", "[", "action", ".", "parent_field_name", "]", "=", "new_node", "\n", "", "else", ":", "\n", "                    ", "assert", "isinstance", "(", "existing_list", ",", "list", ")", "\n", "current", "[", "action", ".", "parent_field_name", "]", ".", "append", "(", "new_node", ")", "\n", "\n", "", "if", "action", ".", "node_value", "is", "None", ":", "\n", "                    ", "stack", ".", "append", "(", "current", ")", "\n", "current", "=", "new_node", "\n", "\n", "", "", "elif", "isinstance", "(", "action", ",", "self", ".", "CreateParentFieldList", ")", ":", "\n", "                ", "current", "[", "action", ".", "parent_field_name", "]", "=", "[", "]", "\n", "\n", "", "elif", "isinstance", "(", "action", ",", "self", ".", "AppendTerminalToken", ")", ":", "\n", "                ", "tokens", "=", "current", ".", "get", "(", "action", ".", "parent_field_name", ")", "\n", "if", "tokens", "is", "None", ":", "\n", "                    ", "tokens", "=", "current", "[", "action", ".", "parent_field_name", "]", "=", "[", "]", "\n", "", "tokens", ".", "append", "(", "action", ".", "value", ")", "\n", "\n", "", "elif", "isinstance", "(", "action", ",", "self", ".", "FinalizeTerminal", ")", ":", "\n", "                ", "tokens", "=", "current", ".", "get", "(", "action", ".", "parent_field_name", ",", "[", "]", ")", "\n", "terminal", "=", "\"\"", ".", "join", "(", "tokens", ")", "# by default, space should be predicted if needed", "\n", "\n", "constructor", "=", "self", ".", "SIMPLE_TERMINAL_TYPES", ".", "get", "(", "action", ".", "terminal_type", ")", "\n", "if", "constructor", ":", "\n", "                    ", "try", ":", "\n", "                        ", "value", "=", "constructor", "(", "terminal", ")", "\n", "", "except", "ValueError", ":", "\n", "                        ", "value", "=", "self", ".", "SIMPLE_TERMINAL_TYPES_DEFAULT", "[", "action", ".", "terminal_type", "]", "\n", "", "", "elif", "action", ".", "terminal_type", "==", "\"bytes\"", ":", "\n", "                    ", "value", "=", "terminal", ".", "decode", "(", "\"latin1\"", ")", "\n", "", "elif", "action", ".", "terminal_type", "==", "\"NoneType\"", ":", "\n", "                    ", "value", "=", "None", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"Unknown terminal type: {}\"", ".", "format", "(", "action", ".", "terminal_type", ")", "\n", ")", "\n", "", "current", "[", "action", ".", "parent_field_name", "]", "=", "value", "\n", "\n", "", "elif", "isinstance", "(", "action", ",", "self", ".", "NodeFinished", ")", ":", "\n", "                ", "current", "=", "stack", ".", "pop", "(", ")", "\n", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "action", ")", "\n", "\n", "", "", "assert", "not", "stack", "\n", "return", "root", ",", "self", ".", "model", ".", "preproc", ".", "grammar", ".", "unparse", "(", "root", ",", "self", ".", "example", ".", "schema", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.__init__": [[49, 83], ["tensor2struct.utils.registry.construct", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "tensor2struct.utils.vocab.VocabBuilder", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "set"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set"], ["\n", "def", "_transpose_batch_time", "(", "x", ")", ":", "\n", "  ", "\"\"\"Transpose the batch and time dimensions of a Tensor.\n\n  Retains as much of the static shape information as possible.\n\n  Args:\n    x: A tensor of rank 2 or higher.\n\n  Returns:\n    x transposed along the first two dimensions.\n\n  Raises:\n    ValueError: if `x` is rank 1 or lower.\n  \"\"\"", "\n", "x_static_shape", "=", "x", ".", "get_shape", "(", ")", "\n", "if", "x_static_shape", ".", "ndims", "is", "not", "None", "and", "x_static_shape", ".", "ndims", "<", "2", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"Expected input tensor %s to have rank at least 2, but saw shape: %s\"", "%", "\n", "(", "x", ",", "x_static_shape", ")", ")", "\n", "", "x_rank", "=", "array_ops", ".", "rank", "(", "x", ")", "\n", "x_t", "=", "array_ops", ".", "transpose", "(", "\n", "x", ",", "array_ops", ".", "concat", "(", "\n", "(", "[", "1", ",", "0", "]", ",", "math_ops", ".", "range", "(", "2", ",", "x_rank", ")", ")", ",", "axis", "=", "0", ")", ")", "\n", "x_t", ".", "set_shape", "(", "\n", "tensor_shape", ".", "TensorShape", "(", "[", "\n", "x_static_shape", "[", "1", "]", ".", "value", ",", "x_static_shape", "[", "0", "]", ".", "value", "\n", "]", ")", ".", "concatenate", "(", "x_static_shape", "[", "2", ":", "]", ")", ")", "\n", "return", "x_t", "\n", "\n", "\n", "", "@", "six", ".", "add_metaclass", "(", "abc", ".", "ABCMeta", ")", "\n", "class", "Decoder", "(", "object", ")", ":", "\n", "  ", "\"\"\"An RNN Decoder abstract interface object.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.value_tokenizer": [[84, 94], ["hasattr", "tensor2struct.modules.bert_tokenizer.BERTokenizer"], "methods", ["None"], ["@", "property", "\n", "def", "batch_size", "(", "self", ")", ":", "\n", "    ", "\"\"\"The batch size of the inputs returned by `sample`.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n", "", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "    ", "\"\"\"A (possibly nested tuple of...) integer[s] or `TensorShape` object[s].\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.tokenize_field_value": [[95, 118], ["decoder.NL2CodeDecoderPreproc.grammar.tokenize_field_value", "tok_vals.append", "decoder.NL2CodeDecoderPreproc.value_tokenizer.tokenize_with_orig"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.tokenize_field_value", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.bert_tokenizer.BERTokenizer.tokenize_with_orig"], ["def", "output_dtype", "(", "self", ")", ":", "\n", "    ", "\"\"\"A (possibly nested tuple of...) dtype[s].\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n", "", "@", "abc", ".", "abstractmethod", "\n", "def", "initialize", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Called before any decoding iterations.\n\n    Args:\n      name: Name scope for any created operations.\n\n    Returns:\n      `(finished, first_inputs, initial_state)`.\n    \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n", "", "@", "abc", ".", "abstractmethod", "\n", "def", "step", "(", "self", ",", "time", ",", "inputs", ",", "state", ",", "name", "=", "None", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.validate_item": [[119, 133], ["decoder.NL2CodeDecoderPreproc.grammar.parse", "decoder.NL2CodeDecoderPreproc.ast_wrapper.verify_ast", "logger.warn"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.SpiderLanguage.parse", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper.verify_ast"], ["\n", "raise", "NotImplementedError", "\n", "\n", "\n", "", "", "def", "_create_zero_outputs", "(", "size", ",", "dtype", ",", "batch_size", ")", ":", "\n", "  ", "\"\"\"Create a zero outputs Tensor structure.\"\"\"", "\n", "def", "_t", "(", "s", ")", ":", "\n", "    ", "return", "(", "s", "if", "isinstance", "(", "s", ",", "ops", ".", "Tensor", ")", "else", "constant_op", ".", "constant", "(", "\n", "tensor_shape", ".", "TensorShape", "(", "s", ")", ".", "as_list", "(", ")", ",", "\n", "dtype", "=", "dtypes", ".", "int32", ",", "\n", "name", "=", "\"zero_suffix_shape\"", ")", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.add_item": [[134, 143], ["decoder.NL2CodeDecoderPreproc.items[].append", "decoder.NL2CodeDecoderPreproc._all_tokens", "decoder.NL2CodeDecoderPreproc._record_productions", "decoder.NL2CodeDecoderPreprocItem", "decoder.NL2CodeDecoderPreproc.vocab_builder.add_word"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc._all_tokens", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc._record_productions", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.add_word"], ["\n", "", "def", "_create", "(", "s", ",", "d", ")", ":", "\n", "    ", "return", "array_ops", ".", "zeros", "(", "\n", "array_ops", ".", "concat", "(", "\n", "(", "[", "batch_size", "]", ",", "_t", "(", "s", ")", ")", ",", "axis", "=", "0", ")", ",", "dtype", "=", "d", ")", "\n", "\n", "", "return", "nest", ".", "map_structure", "(", "_create", ",", "size", ",", "dtype", ")", "\n", "\n", "\n", "", "def", "dynamic_decode", "(", "decoder", ",", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.clear_items": [[145, 147], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict"], "methods", ["None"], ["impute_finished", "=", "False", ",", "\n", "maximum_iterations", "=", "None", ",", "\n", "parallel_iterations", "=", "32", ",", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.save": [[148, 188], ["os.makedirs", "decoder.NL2CodeDecoderPreproc.vocab_builder.finish", "decoder.NL2CodeDecoderPreproc.vocab.save", "decoder.NL2CodeDecoderPreproc.items.items", "tensor2struct.utils.serialization.to_dict_with_sorted_values", "tensor2struct.utils.serialization.to_dict_with_sorted_values", "tensor2struct.utils.serialization.to_dict_with_sorted_values", "sorted", "decoder.NL2CodeDecoderPreproc._calculate_rules", "open", "json.dump", "open", "json.dump", "open", "os.path.join", "f.write", "json.dumps", "attr.asdict"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.finish", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.save", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.serialization.to_dict_with_sorted_values", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.serialization.to_dict_with_sorted_values", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.serialization.to_dict_with_sorted_values", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc._calculate_rules", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.dump", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.dump", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["swap_memory", "=", "False", ",", "\n", "scope", "=", "None", ")", ":", "\n", "  ", "\"\"\"Perform dynamic decoding with `decoder`.\n\n  Args:\n    decoder: A `Decoder` instance.\n    output_time_major: Python boolean.  Default: `False` (batch major).  If\n      `True`, outputs are returned as time major tensors (this mode is faster).\n      Otherwise, outputs are returned as batch major tensors (this adds extra\n      time to the computation).\n    impute_finished: Python boolean.  If `True`, then states for batch\n      entries which are marked as finished get copied through and the\n      corresponding outputs get zeroed out.  This causes some slowdown at\n      each time step, but ensures that the final state and outputs have\n      the correct values and that backprop ignores time steps that were\n      marked as finished.\n    maximum_iterations: `int32` scalar, maximum allowed number of decoding\n       steps.  Default is `None` (decode until the decoder is fully done).\n    parallel_iterations: Argument passed to `tf.while_loop`.\n    swap_memory: Argument passed to `tf.while_loop`.\n    scope: Optional variable scope to use.\n\n  Returns:\n    `(final_outputs, final_state)`.\n\n  Raises:\n    TypeError: if `decoder` is not an instance of `Decoder`.\n    ValueError: if maximum_iterations is provided but is not a scalar.\n  \"\"\"", "\n", "if", "not", "isinstance", "(", "decoder", ",", "Decoder", ")", ":", "\n", "    ", "raise", "TypeError", "(", "\"Expected decoder to be type Decoder, but saw: %s\"", "%", "\n", "type", "(", "decoder", ")", ")", "\n", "\n", "", "with", "variable_scope", ".", "variable_scope", "(", "scope", "or", "\"decoder\"", ")", "as", "varscope", ":", "\n", "# Properly cache variable values inside the while_loop", "\n", "    ", "if", "varscope", ".", "caching_device", "is", "None", ":", "\n", "      ", "varscope", ".", "set_caching_device", "(", "lambda", "op", ":", "op", ".", "device", ")", "\n", "\n", "", "if", "maximum_iterations", "is", "not", "None", ":", "\n", "      ", "maximum_iterations", "=", "ops", ".", "convert_to_tensor", "(", "\n", "maximum_iterations", ",", "dtype", "=", "dtypes", ".", "int32", ",", "name", "=", "\"maximum_iterations\"", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load": [[190, 203], ["tensor2struct.utils.vocab.Vocab.load", "json.load", "json.load", "tensor2struct.utils.serialization.tuplify", "open", "open"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.serialization.tuplify"], ["        ", "raise", "ValueError", "(", "\"maximum_iterations must be a scalar\"", ")", "\n", "\n", "", "", "initial_finished", ",", "initial_inputs", ",", "initial_state", "=", "decoder", ".", "initialize", "(", ")", "\n", "\n", "zero_outputs", "=", "_create_zero_outputs", "(", "decoder", ".", "output_size", ",", "\n", "decoder", ".", "output_dtype", ",", "\n", "decoder", ".", "batch_size", ")", "\n", "\n", "if", "maximum_iterations", "is", "not", "None", ":", "\n", "      ", "initial_finished", "=", "math_ops", ".", "logical_or", "(", "\n", "initial_finished", ",", "0", ">=", "maximum_iterations", ")", "\n", "", "initial_time", "=", "constant_op", ".", "constant", "(", "0", ",", "dtype", "=", "dtypes", ".", "int32", ")", "\n", "\n", "def", "_shape", "(", "batch_size", ",", "from_shape", ")", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.dataset": [[204, 211], ["len", "decoder.NL2CodeDecoderPreprocItem", "open", "json.loads", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["      ", "if", "not", "isinstance", "(", "from_shape", ",", "tensor_shape", ".", "TensorShape", ")", ":", "\n", "        ", "return", "tensor_shape", ".", "TensorShape", "(", "None", ")", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "tensor_util", ".", "constant_value", "(", "\n", "ops", ".", "convert_to_tensor", "(", "\n", "batch_size", ",", "name", "=", "\"batch_size\"", ")", ")", "\n", "return", "tensor_shape", ".", "TensorShape", "(", "[", "batch_size", "]", ")", ".", "concatenate", "(", "from_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc._record_productions": [[213, 266], ["queue.pop", "tensor2struct.models.ast_decoder.utils.get_field_presence_info", "decoder.NL2CodeDecoderPreproc.field_presence_infos[].add", "node.get", "node.get", "decoder.NL2CodeDecoderPreproc.seq_lengths[].add", "decoder.NL2CodeDecoderPreproc.sum_type_constructors[].add", "decoder.NL2CodeDecoderPreproc.sum_type_constructors[].add", "len", "isinstance", "queue.append", "decoder.NL2CodeDecoderPreproc.primitive_types.add", "type"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.utils.get_field_presence_info", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.add"], ["      ", "return", "tensor_array_ops", ".", "TensorArray", "(", "\n", "dtype", "=", "d", ",", "\n", "size", "=", "0", ",", "\n", "dynamic_size", "=", "True", ",", "\n", "element_shape", "=", "_shape", "(", "decoder", ".", "batch_size", ",", "s", ")", ")", "\n", "\n", "", "initial_outputs_ta", "=", "nest", ".", "map_structure", "(", "_create_ta", ",", "decoder", ".", "output_size", ",", "\n", "decoder", ".", "output_dtype", ")", "\n", "\n", "def", "condition", "(", "unused_time", ",", "unused_outputs_ta", ",", "unused_state", ",", "unused_inputs", ",", "\n", "finished", ")", ":", "\n", "      ", "return", "math_ops", ".", "logical_not", "(", "math_ops", ".", "reduce_all", "(", "finished", ")", ")", "\n", "\n", "", "def", "body", "(", "time", ",", "outputs_ta", ",", "state", ",", "inputs", ",", "finished", ")", ":", "\n", "      ", "\"\"\"Internal while_loop body.\n\n      Args:\n        time: scalar int32 tensor.\n        outputs_ta: structure of TensorArray.\n        state: (structure of) state tensors and TensorArrays.\n        inputs: (structure of) input tensors.\n        finished: 1-D bool tensor.\n\n      Returns:\n        `(time + 1, outputs_ta, next_state, next_inputs, next_finished)`.\n      \"\"\"", "\n", "(", "next_outputs", ",", "decoder_state", ",", "next_inputs", ",", "\n", "decoder_finished", ")", "=", "decoder", ".", "step", "(", "time", ",", "inputs", ",", "state", ")", "\n", "next_finished", "=", "math_ops", ".", "logical_or", "(", "decoder_finished", ",", "finished", ")", "\n", "if", "maximum_iterations", "is", "not", "None", ":", "\n", "        ", "next_finished", "=", "math_ops", ".", "logical_or", "(", "\n", "next_finished", ",", "time", "+", "1", ">=", "maximum_iterations", ")", "\n", "\n", "", "nest", ".", "assert_same_structure", "(", "state", ",", "decoder_state", ")", "\n", "nest", ".", "assert_same_structure", "(", "outputs_ta", ",", "next_outputs", ")", "\n", "nest", ".", "assert_same_structure", "(", "inputs", ",", "next_inputs", ")", "\n", "\n", "# Zero out output values past finish", "\n", "if", "impute_finished", ":", "\n", "        ", "emit", "=", "nest", ".", "map_structure", "(", "\n", "lambda", "out", ",", "zero", ":", "array_ops", ".", "where", "(", "finished", ",", "zero", ",", "out", ")", ",", "\n", "next_outputs", ",", "\n", "zero_outputs", ")", "\n", "", "else", ":", "\n", "        ", "emit", "=", "next_outputs", "\n", "\n", "# Copy through states past finish", "\n", "", "def", "_maybe_copy_state", "(", "new", ",", "cur", ")", ":", "\n", "# TensorArrays and scalar states get passed through.", "\n", "        ", "if", "isinstance", "(", "cur", ",", "tensor_array_ops", ".", "TensorArray", ")", ":", "\n", "          ", "pass_through", "=", "True", "\n", "", "else", ":", "\n", "          ", "new", ".", "set_shape", "(", "cur", ".", "shape", ")", "\n", "pass_through", "=", "(", "new", ".", "shape", ".", "ndims", "==", "0", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc._calculate_rules": [[267, 307], ["sorted", "sorted", "sorted", "decoder.NL2CodeDecoderPreproc.sum_type_constructors.items", "len", "decoder.NL2CodeDecoderPreproc.field_presence_infos.items", "len", "decoder.NL2CodeDecoderPreproc.seq_lengths.items", "len", "tuple", "isinstance", "isinstance", "isinstance", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], ["", "return", "new", "if", "pass_through", "else", "array_ops", ".", "where", "(", "finished", ",", "cur", ",", "new", ")", "\n", "\n", "", "if", "impute_finished", ":", "\n", "        ", "next_state", "=", "nest", ".", "map_structure", "(", "\n", "_maybe_copy_state", ",", "decoder_state", ",", "state", ")", "\n", "", "else", ":", "\n", "        ", "next_state", "=", "decoder_state", "\n", "\n", "", "outputs_ta", "=", "nest", ".", "map_structure", "(", "lambda", "ta", ",", "out", ":", "ta", ".", "write", "(", "time", ",", "out", ")", ",", "\n", "outputs_ta", ",", "emit", ")", "\n", "return", "(", "time", "+", "1", ",", "outputs_ta", ",", "next_state", ",", "next_inputs", ",", "next_finished", ")", "\n", "\n", "", "res", "=", "control_flow_ops", ".", "while_loop", "(", "\n", "condition", ",", "\n", "body", ",", "\n", "loop_vars", "=", "[", "\n", "initial_time", ",", "initial_outputs_ta", ",", "initial_state", ",", "initial_inputs", ",", "\n", "initial_finished", "\n", "]", ",", "\n", "parallel_iterations", "=", "parallel_iterations", ",", "\n", "swap_memory", "=", "swap_memory", ")", "\n", "\n", "final_outputs_ta", "=", "res", "[", "1", "]", "\n", "final_state", "=", "res", "[", "2", "]", "\n", "\n", "final_outputs", "=", "nest", ".", "map_structure", "(", "lambda", "ta", ":", "ta", ".", "stack", "(", ")", ",", "final_outputs_ta", ")", "\n", "if", "not", "output_time_major", ":", "\n", "      ", "final_outputs", "=", "nest", ".", "map_structure", "(", "_transpose_batch_time", ",", "final_outputs", ")", "\n", "\n", "", "", "return", "final_outputs", ",", "final_state", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc._all_tokens": [[308, 325], ["queue.pop", "reversed", "queue.pop.get", "decoder.NL2CodeDecoderPreproc.tokenize_field_value", "isinstance", "queue.extend", "queue.append"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.tokenize_field_value", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.__init__": [[332, 494], ["super().__init__", "tensor2struct.modules.lstm.VarLSTMCell", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "tensor2struct.modules.attention.BahdanauAttention", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "tensor2struct.modules.attention.BahdanauPointer", "tensor2struct.modules.attention.ScaledDotProductPointer", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "tensor2struct.utils.vocab.Vocab", "tensor2struct.utils.vocab.Vocab", "tensor2struct.modules.attention.MultiHeadedAttention", "enumerate", "len", "len", "len", "len", "len", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "tensor2struct.modules.attention.MultiHeadedAttention", "sorted", "sorted", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "tensor2struct.modules.attention.MultiHeadedAttention", "tensor2struct.modules.attention.MultiHeadedAttention", "sorted", "decoder.NL2CodeDecoderV2.preproc.seq_lengths.keys", "sorted", "decoder.NL2CodeDecoderV2.preproc.seq_lengths.keys", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "sorted", "decoder.NL2CodeDecoderV2.preproc.field_presence_infos.keys", "sorted", "decoder.NL2CodeDecoderV2.ast_wrapper.singular_types.keys", "sorted", "sorted", "decoder.NL2CodeDecoderV2.preproc.sum_type_constructors.keys", "sorted", "sorted", "decoder.NL2CodeDecoderV2.ast_wrapper.sum_types.keys"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.label_smooth_loss": [[495, 517], ["torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "X.size", "isinstance", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "avg_value.unsqueeze().expand", "torch.full().to.scatter", "torch.full().to.scatter", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to.scatter_", "torch.full().to.scatter_", "target.unsqueeze", "target.unsqueeze", "torch.full", "torch.full", "torch.full", "torch.full", "avg_value.unsqueeze", "torch.full", "torch.full", "torch.full", "torch.full", "X.size", "X.size"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.sigmoid", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.sigmoid", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.sigmoid", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.sigmoid", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.batched_sequence.PackedSequencePlus.expand", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.forward": [[518, 536], ["decoder.NL2CodeDecoderV2.begin_inference", "decoder.NL2CodeDecoderV2.compute_loss", "logger.info", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "str"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.begin_inference", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_loss", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_loss": [[537, 557], ["decoder.NL2CodeDecoderV2.compute_mle_loss", "decoder.NL2CodeDecoderV2.compute_loss_from_all_ordering", "decoder.NL2CodeDecoderV2.compute_align_loss_from_latent_relation", "decoder.NL2CodeDecoderV2.compute_align_loss_from_alignment_mat"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_mle_loss", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_loss_from_all_ordering", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_align_loss_from_latent_relation", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_align_loss_from_alignment_mat"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_loss_from_all_ordering": [[558, 604], ["decoder.NL2CodeDecoderV2.compute_loss_from_all_ordering.get_permutations"], "methods", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_mle_loss": [[605, 707], ["tensor2struct.models.ast_decoder.train_tree_traversal.TrainTreeTraversal", "tensor2struct.models.ast_decoder.train_tree_traversal.TrainTreeTraversal.step", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "tensor2struct.models.ast_decoder.tree_traversal.TreeState", "queue.pop", "isinstance", "reversed", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "tensor2struct.models.ast_decoder.train_tree_traversal.TrainTreeTraversal.step", "reversed", "isinstance", "desc_enc.pointer_maps.get", "tensor2struct.models.ast_decoder.train_tree_traversal.TrainTreeTraversal.step", "tensor2struct.models.ast_decoder.utils.get_field_presence_info", "tensor2struct.models.ast_decoder.train_tree_traversal.TrainTreeTraversal.step", "queue.append", "tuple", "len", "list", "queue.append", "tensor2struct.models.ast_decoder.train_tree_traversal.TrainTreeTraversal.step", "tensor2struct.models.ast_decoder.train_tree_traversal.TrainTreeTraversal.step", "type", "decoder.NL2CodeDecoderV2.preproc.tokenize_field_value", "tensor2struct.models.ast_decoder.train_tree_traversal.TrainTreeTraversal.step", "tuple", "tensor2struct.models.ast_decoder.tree_traversal.TreeState", "enumerate", "tensor2struct.models.ast_decoder.tree_traversal.TreeState", "node.get"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.utils.get_field_presence_info", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.tokenize_field_value", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.begin_inference": [[708, 712], ["tensor2struct.models.ast_decoder.infer_tree_traversal.InferenceTreeTraversal", "tensor2struct.models.ast_decoder.infer_tree_traversal.InferenceTreeTraversal.step"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2._desc_attention": [[713, 728], ["decoder.NL2CodeDecoderV2.desc_attn", "decoder.NL2CodeDecoderV2.question_attn", "decoder.NL2CodeDecoderV2.schema_attn"], "methods", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2._tensor": [[729, 731], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2._index": [[732, 734], ["decoder.NL2CodeDecoderV2._tensor", "tensor2struct.utils.vocab.index"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2._tensor", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.Vocab.index"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2._update_state": [[735, 768], ["decoder.NL2CodeDecoderV2._desc_attention", "decoder.NL2CodeDecoderV2.node_type_embedding", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder.NL2CodeDecoderV2.state_update", "decoder.NL2CodeDecoderV2._index"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2._desc_attention", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2._index"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.apply_rule": [[769, 792], ["decoder.NL2CodeDecoderV2._update_state", "decoder.NL2CodeDecoderV2.rule_logits"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2._update_state"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.rule_infer": [[793, 800], ["torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "list", "zip", "range"], "methods", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.gen_token": [[802, 826], ["decoder.NL2CodeDecoderV2._update_state", "decoder.NL2CodeDecoderV2.gen_logodds().squeeze", "decoder.NL2CodeDecoderV2.gen_logodds"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2._update_state"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.gen_token_loss": [[827, 884], ["decoder.NL2CodeDecoderV2._index", "decoder.NL2CodeDecoderV2.terminal_embedding", "desc_enc.find_word_occurrences", "decoder.NL2CodeDecoderV2.copy_pointer", "decoder.NL2CodeDecoderV2.terminal_logits", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.nn.functional.logsigmoid", "torch.nn.functional.logsigmoid", "torch.nn.functional.logsigmoid", "torch.nn.functional.logsigmoid", "decoder.NL2CodeDecoderV2.xent_loss", "torch.nn.functional.logsigmoid", "torch.nn.functional.logsigmoid", "torch.nn.functional.logsigmoid", "torch.nn.functional.logsigmoid", "decoder.NL2CodeDecoderV2.xent_loss", "tensor2struct.models.ast_decoder.utils.maybe_stack", "decoder.NL2CodeDecoderV2._tensor"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2._index", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.spider.spider_enc.SpiderEncoderState.find_word_occurrences", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.utils.maybe_stack", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2._tensor"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.token_infer": [[885, 926], ["torch.nn.functional.logsigmoid", "torch.nn.functional.logsigmoid", "torch.nn.functional.logsigmoid", "torch.nn.functional.logsigmoid", "decoder.NL2CodeDecoderV2.copy_pointer", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "tensor2struct.models.ast_decoder.utils.accumulate_logprobs", "torch.nn.functional.logsigmoid", "torch.nn.functional.logsigmoid", "torch.nn.functional.logsigmoid", "torch.nn.functional.logsigmoid", "decoder.NL2CodeDecoderV2.terminal_logits", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "tensor2struct.models.ast_decoder.utils.accumulate_logprobs", "list", "zip", "log_prob_by_word.items", "torch.nn.functional.log_softmax.squeeze", "torch.nn.functional.log_softmax.squeeze", "range"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.utils.accumulate_logprobs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.utils.accumulate_logprobs", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_pointer": [[927, 952], ["decoder.NL2CodeDecoderV2._update_state"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2._update_state"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_pointer_with_align": [[953, 983], ["decoder.NL2CodeDecoderV2._update_state", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.mm.clamp", "torch.mm.clamp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2._update_state", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.activations.softmax", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.clamp", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.rat.clamp"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.pointer_infer": [[984, 991], ["torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "list", "zip", "range"], "methods", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_align_loss_from_alignment_mat": [[994, 1063], ["list", "list", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "desc_enc.m2c_align_mat.index_select", "desc_enc.m2c_align_mat.index_select.max", "mc_max_rel_att.clamp_", "desc_enc.m2t_align_mat.index_select", "desc_enc.m2t_align_mat.index_select.max", "mt_max_rel_att.clamp_", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "desc_enc.m2c_align_mat.index_select", "desc_enc.m2c_align_mat.index_select.max", "mc_max_ir_rel_att.clamp_", "reversed", "reversed", "desc_enc.m2c_align_mat.size", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "desc_enc.m2t_align_mat.size", "len", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "desc_enc.m2t_align_mat.index_select", "desc_enc.m2t_align_mat.index_select.max", "mt_max_ir_rel_att.clamp_", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "set", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "sorted", "sorted", "sorted", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.log", "torch.log", "torch.log", "torch.log", "decoder.NL2CodeDecoderV2.ast_wrapper.find_all_descendants_of_type", "decoder.NL2CodeDecoderV2.ast_wrapper.find_all_descendants_of_type", "list", "list", "list", "sorted", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "set", "set", "list", "set", "set", "range", "set", "set", "range"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper.find_all_descendants_of_type", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper.find_all_descendants_of_type", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_align_loss_from_latent_relation": [[1064, 1123], ["list", "list", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "[].mean", "[].mean", "logger.info", "reversed", "reversed", "cq_relation.size", "tq_relation.size", "torch.log", "torch.log", "torch.log", "torch.log", "len", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "logger.warn", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "align_tab_loss.item", "align_col_loss.item", "sorted", "sorted", "sorted", "cq_relation[].max", "tq_relation[].max", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.log", "torch.log", "torch.log", "torch.log", "align_col_loss.item", "align_tab_loss.item", "decoder.NL2CodeDecoderV2.ast_wrapper.find_all_descendants_of_type", "decoder.NL2CodeDecoderV2.ast_wrapper.find_all_descendants_of_type", "list", "list", "list", "cq_relation[].max", "sorted", "set", "set", "list", "tq_relation[].max", "set", "set", "range", "set", "set", "range"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.infix_conversion.Stack.size", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper.find_all_descendants_of_type", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.ast_util.ASTWrapper.find_all_descendants_of_type", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.config_factory.config.set"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.__init__": [[71, 104], ["model.state_update.set_dropout_masks", "tensor2struct.models.ast_decoder.utils.lstm_init", "pyrsistent.pvector", "TreeTraversal.QueueItem"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.variational_lstm.RecurrentDropoutLSTMCell.set_dropout_masks", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.utils.lstm_init"], ["", "def", "__init__", "(", "self", ",", "model", ",", "desc_enc", ")", ":", "\n", "        ", "if", "model", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "model", "=", "model", "\n", "self", ".", "desc_enc", "=", "desc_enc", "\n", "\n", "# decoder init", "\n", "model", ".", "state_update", ".", "set_dropout_masks", "(", "batch_size", "=", "1", ")", "\n", "self", ".", "recurrent_state", "=", "lstm_init", "(", "\n", "model", ".", "_device", ",", "None", ",", "self", ".", "model", ".", "recurrent_size", ",", "1", "\n", ")", "\n", "self", ".", "prev_action_emb", "=", "model", ".", "zero_rule_emb", "\n", "\n", "# inital traversal state", "\n", "root_type", "=", "model", ".", "preproc", ".", "grammar", ".", "root_type", "\n", "if", "root_type", "in", "model", ".", "preproc", ".", "ast_wrapper", ".", "sum_types", ":", "\n", "            ", "initial_state", "=", "TreeTraversal", ".", "State", ".", "SUM_TYPE_INQUIRE", "\n", "", "else", ":", "\n", "            ", "initial_state", "=", "TreeTraversal", ".", "State", ".", "CHILDREN_INQUIRE", "\n", "\n", "", "self", ".", "queue", "=", "pyrsistent", ".", "pvector", "(", ")", "\n", "self", ".", "cur_item", "=", "TreeTraversal", ".", "QueueItem", "(", "\n", "item_id", "=", "0", ",", "\n", "state", "=", "initial_state", ",", "\n", "node_type", "=", "root_type", ",", "\n", "parent_action_emb", "=", "self", ".", "model", ".", "zero_rule_emb", ",", "\n", "parent_h", "=", "self", ".", "model", ".", "zero_recurrent_emb", ",", "\n", "parent_field_name", "=", "None", ",", "\n", ")", "\n", "self", ".", "next_item_id", "=", "1", "\n", "\n", "self", ".", "update_prev_action_emb", "=", "TreeTraversal", ".", "_update_prev_action_emb_apply_rule", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.clone": [[105, 117], ["tree_traversal.TreeTraversal.__class__"], "methods", ["None"], ["", "def", "clone", "(", "self", ")", ":", "\n", "        ", "other", "=", "self", ".", "__class__", "(", "None", ",", "None", ")", "\n", "other", ".", "model", "=", "self", ".", "model", "\n", "other", ".", "desc_enc", "=", "self", ".", "desc_enc", "\n", "other", ".", "recurrent_state", "=", "self", ".", "recurrent_state", "\n", "other", ".", "prev_action_emb", "=", "self", ".", "prev_action_emb", "\n", "other", ".", "queue", "=", "self", ".", "queue", "\n", "other", ".", "cur_item", "=", "self", ".", "cur_item", "\n", "other", ".", "next_item_id", "=", "self", ".", "next_item_id", "\n", "other", ".", "actions", "=", "self", ".", "actions", "\n", "other", ".", "update_prev_action_emb", "=", "self", ".", "update_prev_action_emb", "\n", "return", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.step": [[118, 132], ["tree_traversal.TreeTraversal.update_using_last_choice", "getattr", "getattr."], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.update_using_last_choice"], ["", "def", "step", "(", "self", ",", "last_choice", ",", "extra_choice_info", "=", "None", ",", "attention_offset", "=", "None", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "self", ".", "update_using_last_choice", "(", "\n", "last_choice", ",", "extra_choice_info", ",", "attention_offset", "\n", ")", "\n", "\n", "handler_name", "=", "TreeTraversal", ".", "Handler", ".", "handlers", "[", "self", ".", "cur_item", ".", "state", "]", "\n", "handler", "=", "getattr", "(", "self", ",", "handler_name", ")", "\n", "choices", ",", "continued", "=", "handler", "(", "last_choice", ")", "\n", "if", "continued", ":", "\n", "                ", "last_choice", "=", "choices", "\n", "continue", "\n", "", "else", ":", "\n", "                ", "return", "choices", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.update_using_last_choice": [[133, 139], ["tree_traversal.TreeTraversal.update_prev_action_emb"], "methods", ["None"], ["", "", "", "def", "update_using_last_choice", "(", "\n", "self", ",", "last_choice", ",", "extra_choice_info", ",", "attention_offset", "\n", ")", ":", "\n", "        ", "if", "last_choice", "is", "None", ":", "\n", "            ", "return", "\n", "", "self", ".", "update_prev_action_emb", "(", "self", ",", "last_choice", ",", "extra_choice_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal._update_prev_action_emb_apply_rule": [[140, 144], ["tree_traversal.TreeTraversal.model._tensor", "tree_traversal.TreeTraversal.model.rule_embedding"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2._tensor"], ["", "@", "classmethod", "\n", "def", "_update_prev_action_emb_apply_rule", "(", "cls", ",", "self", ",", "last_choice", ",", "extra_choice_info", ")", ":", "\n", "        ", "rule_idx", "=", "self", ".", "model", ".", "_tensor", "(", "[", "last_choice", "]", ")", "\n", "self", ".", "prev_action_emb", "=", "self", ".", "model", ".", "rule_embedding", "(", "rule_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal._update_prev_action_emb_gen_token": [[145, 151], ["tree_traversal.TreeTraversal.model._index", "tree_traversal.TreeTraversal.model.terminal_embedding"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2._index"], ["", "@", "classmethod", "\n", "def", "_update_prev_action_emb_gen_token", "(", "cls", ",", "self", ",", "last_choice", ",", "extra_choice_info", ")", ":", "\n", "# token_idx shape: batch (=1), LongTensor", "\n", "        ", "token_idx", "=", "self", ".", "model", ".", "_index", "(", "self", ".", "model", ".", "terminal_vocab", ",", "last_choice", ")", "\n", "# action_emb shape: batch (=1) x emb_size", "\n", "self", ".", "prev_action_emb", "=", "self", ".", "model", ".", "terminal_embedding", "(", "token_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal._update_prev_action_emb_pointer": [[152, 158], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_update_prev_action_emb_pointer", "(", "cls", ",", "self", ",", "last_choice", ",", "extra_choice_info", ")", ":", "\n", "# TODO batching", "\n", "        ", "self", ".", "prev_action_emb", "=", "self", ".", "model", ".", "pointer_action_emb_proj", "[", "\n", "self", ".", "cur_item", ".", "node_type", "\n", "]", "(", "self", ".", "desc_enc", ".", "pointer_memories", "[", "self", ".", "cur_item", ".", "node_type", "]", "[", ":", ",", "last_choice", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop": [[159, 165], ["tree_traversal.TreeTraversal.queue.delete"], "methods", ["None"], ["", "def", "pop", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "queue", ":", "\n", "            ", "self", ".", "cur_item", "=", "self", ".", "queue", "[", "-", "1", "]", "\n", "self", ".", "queue", "=", "self", ".", "queue", ".", "delete", "(", "-", "1", ")", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.process_sum_inquire": [[166, 185], ["Handler.register_handler", "tree_traversal.TreeTraversal.model.apply_rule", "attr.evolve", "tree_traversal.TreeTraversal.rule_choice"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.apply_rule", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.rule_choice"], ["", "@", "Handler", ".", "register_handler", "(", "State", ".", "SUM_TYPE_INQUIRE", ")", "\n", "def", "process_sum_inquire", "(", "self", ",", "last_choice", ")", ":", "\n", "# 1. ApplyRule, like expr -> Call", "\n", "# a. Ask which one to choose", "\n", "        ", "output", ",", "self", ".", "recurrent_state", ",", "rule_logits", "=", "self", ".", "model", ".", "apply_rule", "(", "\n", "self", ".", "cur_item", ".", "node_type", ",", "\n", "self", ".", "recurrent_state", ",", "\n", "self", ".", "prev_action_emb", ",", "\n", "self", ".", "cur_item", ".", "parent_h", ",", "\n", "self", ".", "cur_item", ".", "parent_action_emb", ",", "\n", "self", ".", "desc_enc", ",", "\n", ")", "\n", "self", ".", "cur_item", "=", "attr", ".", "evolve", "(", "\n", "self", ".", "cur_item", ",", "state", "=", "TreeTraversal", ".", "State", ".", "SUM_TYPE_APPLY", ",", "parent_h", "=", "output", "\n", ")", "\n", "\n", "self", ".", "update_prev_action_emb", "=", "TreeTraversal", ".", "_update_prev_action_emb_apply_rule", "\n", "choices", "=", "self", ".", "rule_choice", "(", "self", ".", "cur_item", ".", "node_type", ",", "rule_logits", ")", "\n", "return", "choices", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.process_sum_apply": [[186, 199], ["Handler.register_handler", "attr.evolve"], "methods", ["None"], ["", "@", "Handler", ".", "register_handler", "(", "State", ".", "SUM_TYPE_APPLY", ")", "\n", "def", "process_sum_apply", "(", "self", ",", "last_choice", ")", ":", "\n", "# b. Add action, prepare for #2", "\n", "        ", "sum_type", ",", "singular_type", "=", "self", ".", "model", ".", "preproc", ".", "all_rules", "[", "last_choice", "]", "\n", "assert", "sum_type", "==", "self", ".", "cur_item", ".", "node_type", "\n", "\n", "self", ".", "cur_item", "=", "attr", ".", "evolve", "(", "\n", "self", ".", "cur_item", ",", "\n", "node_type", "=", "singular_type", ",", "\n", "parent_action_emb", "=", "self", ".", "prev_action_emb", ",", "\n", "state", "=", "TreeTraversal", ".", "State", ".", "CHILDREN_INQUIRE", ",", "\n", ")", "\n", "return", "None", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.process_children_inquire": [[200, 228], ["Handler.register_handler", "tree_traversal.TreeTraversal.model.apply_rule", "attr.evolve", "tree_traversal.TreeTraversal.rule_choice", "tree_traversal.TreeTraversal.pop"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.apply_rule", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.rule_choice", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop"], ["", "@", "Handler", ".", "register_handler", "(", "State", ".", "CHILDREN_INQUIRE", ")", "\n", "def", "process_children_inquire", "(", "self", ",", "last_choice", ")", ":", "\n", "# 2. ApplyRule, like Call -> expr[func] expr*[args] keyword*[keywords]", "\n", "# Check if we have no children", "\n", "        ", "type_info", "=", "self", ".", "model", ".", "ast_wrapper", ".", "singular_types", "[", "self", ".", "cur_item", ".", "node_type", "]", "\n", "if", "not", "type_info", ".", "fields", ":", "\n", "            ", "if", "self", ".", "pop", "(", ")", ":", "\n", "                ", "last_choice", "=", "None", "\n", "return", "last_choice", ",", "True", "\n", "", "else", ":", "\n", "                ", "return", "None", ",", "False", "\n", "\n", "# a. Ask about presence", "\n", "", "", "output", ",", "self", ".", "recurrent_state", ",", "rule_logits", "=", "self", ".", "model", ".", "apply_rule", "(", "\n", "self", ".", "cur_item", ".", "node_type", ",", "\n", "self", ".", "recurrent_state", ",", "\n", "self", ".", "prev_action_emb", ",", "\n", "self", ".", "cur_item", ".", "parent_h", ",", "\n", "self", ".", "cur_item", ".", "parent_action_emb", ",", "\n", "self", ".", "desc_enc", ",", "\n", ")", "\n", "self", ".", "cur_item", "=", "attr", ".", "evolve", "(", "\n", "self", ".", "cur_item", ",", "state", "=", "TreeTraversal", ".", "State", ".", "CHILDREN_APPLY", ",", "parent_h", "=", "output", "\n", ")", "\n", "\n", "self", ".", "update_prev_action_emb", "=", "TreeTraversal", ".", "_update_prev_action_emb_apply_rule", "\n", "choices", "=", "self", ".", "rule_choice", "(", "self", ".", "cur_item", ".", "node_type", ",", "rule_logits", ")", "\n", "return", "choices", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.process_children_apply": [[229, 295], ["Handler.register_handler", "tree_traversal.TreeTraversal.queue.append", "reversed", "tree_traversal.TreeTraversal.pop", "TreeTraversal.QueueItem", "list", "tree_traversal.TreeTraversal.queue.append", "zip", "TreeTraversal.QueueItem", "ValueError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "@", "Handler", ".", "register_handler", "(", "State", ".", "CHILDREN_APPLY", ")", "\n", "def", "process_children_apply", "(", "self", ",", "last_choice", ")", ":", "\n", "# b. Create the children", "\n", "        ", "node_type", ",", "children_presence", "=", "self", ".", "model", ".", "preproc", ".", "all_rules", "[", "last_choice", "]", "\n", "assert", "node_type", "==", "self", ".", "cur_item", ".", "node_type", "\n", "\n", "self", ".", "queue", "=", "self", ".", "queue", ".", "append", "(", "\n", "TreeTraversal", ".", "QueueItem", "(", "\n", "item_id", "=", "self", ".", "cur_item", ".", "item_id", ",", "\n", "state", "=", "TreeTraversal", ".", "State", ".", "NODE_FINISHED", ",", "\n", "node_type", "=", "None", ",", "\n", "parent_action_emb", "=", "None", ",", "\n", "parent_h", "=", "None", ",", "\n", "parent_field_name", "=", "None", ",", "\n", ")", "\n", ")", "\n", "for", "field_info", ",", "present", "in", "reversed", "(", "\n", "list", "(", "\n", "zip", "(", "\n", "self", ".", "model", ".", "ast_wrapper", ".", "singular_types", "[", "node_type", "]", ".", "fields", ",", "\n", "children_presence", ",", "\n", ")", "\n", ")", "\n", ")", ":", "\n", "            ", "if", "not", "present", ":", "\n", "                ", "continue", "\n", "\n", "# seq field: LIST_LENGTH_INQUIRE x", "\n", "# sum type: SUM_TYPE_INQUIRE x", "\n", "# product type:", "\n", "#   no children: not possible", "\n", "#   children: CHILDREN_INQUIRE", "\n", "# constructor type: not possible x", "\n", "# builtin type: GEN_TOKEN x", "\n", "", "child_type", "=", "field_type", "=", "field_info", ".", "type", "\n", "if", "field_info", ".", "seq", ":", "\n", "                ", "child_state", "=", "TreeTraversal", ".", "State", ".", "LIST_LENGTH_INQUIRE", "\n", "", "elif", "field_type", "in", "self", ".", "model", ".", "ast_wrapper", ".", "sum_types", ":", "\n", "                ", "child_state", "=", "TreeTraversal", ".", "State", ".", "SUM_TYPE_INQUIRE", "\n", "", "elif", "field_type", "in", "self", ".", "model", ".", "ast_wrapper", ".", "product_types", ":", "\n", "                ", "assert", "self", ".", "model", ".", "ast_wrapper", ".", "product_types", "[", "field_type", "]", ".", "fields", "\n", "child_state", "=", "TreeTraversal", ".", "State", ".", "CHILDREN_INQUIRE", "\n", "", "elif", "field_type", "in", "self", ".", "model", ".", "preproc", ".", "grammar", ".", "pointers", ":", "\n", "                ", "child_state", "=", "TreeTraversal", ".", "State", ".", "POINTER_INQUIRE", "\n", "", "elif", "field_type", "in", "self", ".", "model", ".", "ast_wrapper", ".", "primitive_types", ":", "\n", "                ", "child_state", "=", "TreeTraversal", ".", "State", ".", "GEN_TOKEN", "\n", "child_type", "=", "present", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Unable to handle field type {}\"", ".", "format", "(", "field_type", ")", ")", "\n", "\n", "", "self", ".", "queue", "=", "self", ".", "queue", ".", "append", "(", "\n", "TreeTraversal", ".", "QueueItem", "(", "\n", "item_id", "=", "self", ".", "next_item_id", ",", "\n", "state", "=", "child_state", ",", "\n", "node_type", "=", "child_type", ",", "\n", "parent_action_emb", "=", "self", ".", "prev_action_emb", ",", "\n", "parent_h", "=", "self", ".", "cur_item", ".", "parent_h", ",", "\n", "parent_field_name", "=", "field_info", ".", "name", ",", "\n", ")", "\n", ")", "\n", "self", ".", "next_item_id", "+=", "1", "\n", "\n", "", "advanced", "=", "self", ".", "pop", "(", ")", "\n", "assert", "advanced", "\n", "last_choice", "=", "None", "\n", "return", "last_choice", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.process_list_length_inquire": [[296, 314], ["Handler.register_handler", "tree_traversal.TreeTraversal.model.apply_rule", "attr.evolve", "tree_traversal.TreeTraversal.rule_choice"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.apply_rule", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.rule_choice"], ["", "@", "Handler", ".", "register_handler", "(", "State", ".", "LIST_LENGTH_INQUIRE", ")", "\n", "def", "process_list_length_inquire", "(", "self", ",", "last_choice", ")", ":", "\n", "        ", "list_type", "=", "self", ".", "cur_item", ".", "node_type", "+", "\"*\"", "\n", "output", ",", "self", ".", "recurrent_state", ",", "rule_logits", "=", "self", ".", "model", ".", "apply_rule", "(", "\n", "list_type", ",", "\n", "self", ".", "recurrent_state", ",", "\n", "self", ".", "prev_action_emb", ",", "\n", "self", ".", "cur_item", ".", "parent_h", ",", "\n", "self", ".", "cur_item", ".", "parent_action_emb", ",", "\n", "self", ".", "desc_enc", ",", "\n", ")", "\n", "self", ".", "cur_item", "=", "attr", ".", "evolve", "(", "\n", "self", ".", "cur_item", ",", "state", "=", "TreeTraversal", ".", "State", ".", "LIST_LENGTH_APPLY", ",", "parent_h", "=", "output", "\n", ")", "\n", "\n", "self", ".", "update_prev_action_emb", "=", "TreeTraversal", ".", "_update_prev_action_emb_apply_rule", "\n", "choices", "=", "self", ".", "rule_choice", "(", "list_type", ",", "rule_logits", ")", "\n", "return", "choices", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.process_list_length_apply": [[315, 354], ["Handler.register_handler", "range", "tree_traversal.TreeTraversal.pop", "tree_traversal.TreeTraversal.queue.append", "TreeTraversal.QueueItem", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "@", "Handler", ".", "register_handler", "(", "State", ".", "LIST_LENGTH_APPLY", ")", "\n", "def", "process_list_length_apply", "(", "self", ",", "last_choice", ")", ":", "\n", "        ", "list_type", ",", "num_children", "=", "self", ".", "model", ".", "preproc", ".", "all_rules", "[", "last_choice", "]", "\n", "elem_type", "=", "self", ".", "cur_item", ".", "node_type", "\n", "assert", "list_type", "==", "elem_type", "+", "\"*\"", "\n", "\n", "child_node_type", "=", "elem_type", "\n", "if", "elem_type", "in", "self", ".", "model", ".", "ast_wrapper", ".", "sum_types", ":", "\n", "            ", "child_state", "=", "TreeTraversal", ".", "State", ".", "SUM_TYPE_INQUIRE", "\n", "if", "self", ".", "model", ".", "preproc", ".", "use_seq_elem_rules", ":", "\n", "                ", "child_node_type", "=", "elem_type", "+", "\"_seq_elem\"", "\n", "", "", "elif", "elem_type", "in", "self", ".", "model", ".", "ast_wrapper", ".", "product_types", ":", "\n", "            ", "child_state", "=", "TreeTraversal", ".", "State", ".", "CHILDREN_INQUIRE", "\n", "", "elif", "elem_type", "==", "\"identifier\"", ":", "\n", "            ", "child_state", "=", "TreeTraversal", ".", "State", ".", "GEN_TOKEN", "\n", "child_node_type", "=", "\"str\"", "\n", "", "elif", "elem_type", "in", "self", ".", "model", ".", "ast_wrapper", ".", "primitive_types", ":", "\n", "# TODO: Fix this", "\n", "            ", "raise", "ValueError", "(", "\"sequential builtin types not supported\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unable to handle seq field type {}\"", ".", "format", "(", "elem_type", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_children", ")", ":", "\n", "            ", "self", ".", "queue", "=", "self", ".", "queue", ".", "append", "(", "\n", "TreeTraversal", ".", "QueueItem", "(", "\n", "item_id", "=", "self", ".", "next_item_id", ",", "\n", "state", "=", "child_state", ",", "\n", "node_type", "=", "child_node_type", ",", "\n", "parent_action_emb", "=", "self", ".", "prev_action_emb", ",", "\n", "parent_h", "=", "self", ".", "cur_item", ".", "parent_h", ",", "\n", "parent_field_name", "=", "self", ".", "cur_item", ".", "parent_field_name", ",", "\n", ")", "\n", ")", "\n", "self", ".", "next_item_id", "+=", "1", "\n", "\n", "", "advanced", "=", "self", ".", "pop", "(", ")", "\n", "assert", "advanced", "\n", "last_choice", "=", "None", "\n", "return", "last_choice", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.process_gen_token": [[355, 375], ["Handler.register_handler", "tree_traversal.TreeTraversal.model.gen_token", "tree_traversal.TreeTraversal.token_choice", "tree_traversal.TreeTraversal.pop"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.gen_token", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.token_choice", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop"], ["", "@", "Handler", ".", "register_handler", "(", "State", ".", "GEN_TOKEN", ")", "\n", "def", "process_gen_token", "(", "self", ",", "last_choice", ")", ":", "\n", "        ", "if", "last_choice", "==", "vocab", ".", "EOS", ":", "\n", "            ", "if", "self", ".", "pop", "(", ")", ":", "\n", "                ", "last_choice", "=", "None", "\n", "return", "last_choice", ",", "True", "\n", "", "else", ":", "\n", "                ", "return", "None", ",", "False", "\n", "\n", "", "", "self", ".", "recurrent_state", ",", "output", ",", "gen_logodds", "=", "self", ".", "model", ".", "gen_token", "(", "\n", "self", ".", "cur_item", ".", "node_type", ",", "\n", "self", ".", "recurrent_state", ",", "\n", "self", ".", "prev_action_emb", ",", "\n", "self", ".", "cur_item", ".", "parent_h", ",", "\n", "self", ".", "cur_item", ".", "parent_action_emb", ",", "\n", "self", ".", "desc_enc", ",", "\n", ")", "\n", "self", ".", "update_prev_action_emb", "=", "TreeTraversal", ".", "_update_prev_action_emb_gen_token", "\n", "choices", "=", "self", ".", "token_choice", "(", "output", ",", "gen_logodds", ")", "\n", "return", "choices", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.process_pointer_inquire": [[376, 400], ["Handler.register_handler", "tree_traversal.TreeTraversal.model.compute_pointer_with_align", "attr.evolve", "tree_traversal.TreeTraversal.pointer_choice"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_pointer_with_align", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.pointer_choice"], ["", "@", "Handler", ".", "register_handler", "(", "State", ".", "POINTER_INQUIRE", ")", "\n", "def", "process_pointer_inquire", "(", "self", ",", "last_choice", ")", ":", "\n", "# a. Ask which one to choose", "\n", "# TODO: use use_align_mat to see if use it. ", "\n", "        ", "(", "\n", "output", ",", "\n", "self", ".", "recurrent_state", ",", "\n", "logits", ",", "\n", "attention_logits", ",", "\n", ")", "=", "self", ".", "model", ".", "compute_pointer_with_align", "(", "\n", "self", ".", "cur_item", ".", "node_type", ",", "\n", "self", ".", "recurrent_state", ",", "\n", "self", ".", "prev_action_emb", ",", "\n", "self", ".", "cur_item", ".", "parent_h", ",", "\n", "self", ".", "cur_item", ".", "parent_action_emb", ",", "\n", "self", ".", "desc_enc", ",", "\n", ")", "\n", "self", ".", "cur_item", "=", "attr", ".", "evolve", "(", "\n", "self", ".", "cur_item", ",", "state", "=", "TreeTraversal", ".", "State", ".", "POINTER_APPLY", ",", "parent_h", "=", "output", "\n", ")", "\n", "\n", "self", ".", "update_prev_action_emb", "=", "TreeTraversal", ".", "_update_prev_action_emb_pointer", "\n", "choices", "=", "self", ".", "pointer_choice", "(", "self", ".", "cur_item", ".", "node_type", ",", "logits", ",", "attention_logits", ")", "\n", "return", "choices", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.process_pointer_apply": [[401, 408], ["Handler.register_handler", "tree_traversal.TreeTraversal.pop"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop"], ["", "@", "Handler", ".", "register_handler", "(", "State", ".", "POINTER_APPLY", ")", "\n", "def", "process_pointer_apply", "(", "self", ",", "last_choice", ")", ":", "\n", "        ", "if", "self", ".", "pop", "(", ")", ":", "\n", "            ", "last_choice", "=", "None", "\n", "return", "last_choice", ",", "True", "\n", "", "else", ":", "\n", "            ", "return", "None", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.process_node_finished": [[409, 416], ["Handler.register_handler", "tree_traversal.TreeTraversal.pop"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pop"], ["", "", "@", "Handler", ".", "register_handler", "(", "State", ".", "NODE_FINISHED", ")", "\n", "def", "process_node_finished", "(", "self", ",", "last_choice", ")", ":", "\n", "        ", "if", "self", ".", "pop", "(", ")", ":", "\n", "            ", "last_choice", "=", "None", "\n", "return", "last_choice", ",", "True", "\n", "", "else", ":", "\n", "            ", "return", "None", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.rule_choice": [[417, 419], ["None"], "methods", ["None"], ["", "", "def", "rule_choice", "(", "self", ",", "node_type", ",", "rule_logits", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.token_choice": [[420, 422], ["None"], "methods", ["None"], ["", "def", "token_choice", "(", "self", ",", "output", ",", "gen_logodds", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.tree_traversal.TreeTraversal.pointer_choice": [[423, 425], ["None"], "methods", ["None"], ["", "def", "pointer_choice", "(", "self", ",", "node_type", ",", "logits", ",", "attention_logits", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.__init__": [[69, 83], ["tensor2struct.models.ast_decoder.tree_traversal.TreeTraversal.__init__", "pyrsistent.pvector", "pyrsistent.pvector"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__"], ["", "", "def", "__init__", "(", "self", ",", "model", ",", "desc_enc", ",", "record_logits", "=", "False", ",", "lambda_mixture", "=", "0.5", ",", "kd_logits", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Support record logits and load logits for knowledge distillation\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "model", ",", "desc_enc", ")", "\n", "self", ".", "choice_point", "=", "None", "\n", "self", ".", "loss", "=", "pyrsistent", ".", "pvector", "(", ")", "\n", "\n", "# self knowledge distillation", "\n", "self", ".", "record_logits", "=", "record_logits", "\n", "if", "record_logits", ":", "\n", "            ", "self", ".", "logits", "=", "pyrsistent", ".", "pvector", "(", ")", "\n", "", "self", ".", "lambda_mixture", "=", "lambda_mixture", "\n", "self", ".", "kd_logits", "=", "kd_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.clone": [[84, 89], ["super().clone"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.clone"], ["", "def", "clone", "(", "self", ")", ":", "\n", "        ", "super_clone", "=", "super", "(", ")", ".", "clone", "(", ")", "\n", "super_clone", ".", "choice_point", "=", "self", ".", "choice_point", "\n", "super_clone", ".", "loss", "=", "self", ".", "loss", "\n", "return", "super_clone", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.rule_choice": [[90, 92], ["train_tree_traversal.TrainTreeTraversal.XentChoicePoint"], "methods", ["None"], ["", "def", "rule_choice", "(", "self", ",", "node_type", ",", "rule_logits", ")", ":", "\n", "        ", "self", ".", "choice_point", "=", "self", ".", "XentChoicePoint", "(", "rule_logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.token_choice": [[93, 95], ["train_tree_traversal.TrainTreeTraversal.TokenChoicePoint"], "methods", ["None"], ["", "def", "token_choice", "(", "self", ",", "output", ",", "gen_logodds", ")", ":", "\n", "        ", "self", ".", "choice_point", "=", "self", ".", "TokenChoicePoint", "(", "output", ",", "gen_logodds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.pointer_choice": [[96, 99], ["train_tree_traversal.TrainTreeTraversal.XentChoicePoint", "train_tree_traversal.TrainTreeTraversal.XentChoicePoint"], "methods", ["None"], ["", "def", "pointer_choice", "(", "self", ",", "node_type", ",", "logits", ",", "attention_logits", ")", ":", "\n", "        ", "self", ".", "choice_point", "=", "self", ".", "XentChoicePoint", "(", "logits", ")", "\n", "self", ".", "attention_choice", "=", "self", ".", "XentChoicePoint", "(", "attention_logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.update_using_last_choice": [[100, 141], ["super().update_using_last_choice", "train_tree_traversal.TrainTreeTraversal.choice_point.compute_loss", "isinstance", "train_tree_traversal.TrainTreeTraversal.choice_point.compute_kd_loss", "train_tree_traversal.TrainTreeTraversal.loss.append", "train_tree_traversal.TrainTreeTraversal.loss.append", "isinstance", "train_tree_traversal.LogitHistoryEntry", "train_tree_traversal.TrainTreeTraversal.logits.append", "train_tree_traversal.TrainTreeTraversal.loss.append", "train_tree_traversal.TrainTreeTraversal.choice_point.logits.detach().cpu().numpy", "train_tree_traversal.TrainTreeTraversal.attention_choice.compute_loss", "train_tree_traversal.TrainTreeTraversal.choice_point.logits.detach().cpu", "train_tree_traversal.TrainTreeTraversal.detach().cpu().numpy", "train_tree_traversal.TrainTreeTraversal.choice_point.logits.detach", "train_tree_traversal.TrainTreeTraversal.detach().cpu", "train_tree_traversal.TrainTreeTraversal.detach"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.update_using_last_choice", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_loss", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderV2.compute_loss"], ["", "def", "update_using_last_choice", "(", "\n", "self", ",", "last_choice", ",", "extra_choice_info", ",", "attention_offset", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "update_using_last_choice", "(", "\n", "last_choice", ",", "extra_choice_info", ",", "attention_offset", "\n", ")", "\n", "if", "last_choice", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "# compute loss", "\n", "", "nll_loss", "=", "self", ".", "choice_point", ".", "compute_loss", "(", "self", ",", "last_choice", ",", "extra_choice_info", ")", "\n", "if", "self", ".", "kd_logits", "is", "not", "None", "and", "isinstance", "(", "self", ".", "choice_point", ",", "self", ".", "XentChoicePoint", ")", ":", "\n", "# pop one item", "\n", "            ", "cur_label", "=", "self", ".", "kd_logits", "[", "0", "]", "\n", "self", ".", "kd_logits", "=", "self", ".", "kd_logits", "[", "1", ":", "]", "\n", "# print(f\"Current {len(self.kd_logits)} items in kd logits \")", "\n", "\n", "kd_loss", "=", "self", ".", "choice_point", ".", "compute_kd_loss", "(", "self", ",", "cur_label", ")", "\n", "mixture_loss", "=", "self", ".", "lambda_mixture", "*", "nll_loss", "+", "(", "1", "-", "self", ".", "lambda_mixture", ")", "*", "kd_loss", "\n", "self", ".", "loss", "=", "self", ".", "loss", ".", "append", "(", "mixture_loss", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "self", ".", "loss", ".", "append", "(", "nll_loss", ")", "\n", "\n", "", "if", "self", ".", "record_logits", "and", "isinstance", "(", "self", ".", "choice_point", ",", "self", ".", "XentChoicePoint", ")", ":", "\n", "            ", "logit_entry", "=", "LogitHistoryEntry", "(", "\n", "self", ".", "choice_point", ".", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "-", "nll_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ",", "\n", ")", "\n", "self", ".", "logits", "=", "self", ".", "logits", ".", "append", "(", "logit_entry", ")", "\n", "\n", "# check if attention choice was used", "\n", "", "if", "attention_offset", "is", "not", "None", "and", "self", ".", "attention_choice", "is", "not", "None", ":", "\n", "            ", "self", ".", "loss", "=", "self", ".", "loss", ".", "append", "(", "\n", "self", ".", "attention_choice", ".", "compute_loss", "(", "\n", "self", ",", "attention_offset", ",", "extra_indices", "=", "None", "\n", ")", "\n", ")", "\n", "\n", "# empty the choice point", "\n", "", "self", ".", "choice_point", "=", "None", "\n", "self", ".", "attention_choice", "=", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.utils.get_field_presence_info": [[4, 24], ["tuple", "node.get", "present.append", "present.append", "present.append", "type", "present.append", "type"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["# you may not use this file except in compliance with the License.", "\n", "# You may obtain a copy of the License at", "\n", "#", "\n", "#      http://www.apache.org/licenses/LICENSE-2.0", "\n", "#", "\n", "# Unless required by applicable law or agreed to in writing, software", "\n", "# distributed under the License is distributed on an \"AS IS\" BASIS,", "\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "\n", "# See the License for the specific language governing permissions and", "\n", "# limitations under the License.", "\n", "\"\"\"Various testing utilities\n\"\"\"", "\n", "\n", "from", "__future__", "import", "absolute_import", "\n", "from", "__future__", "import", "division", "\n", "from", "__future__", "import", "print_function", "\n", "from", "__future__", "import", "unicode_literals", "\n", "\n", "import", "tempfile", "\n", "import", "tensorflow", "as", "tf", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.utils.lstm_init": [[26, 32], ["torch.zeros"], "function", ["None"], ["def", "create_temp_parallel_data", "(", "sources", ",", "targets", ")", ":", "\n", "  "]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.utils.maybe_stack": [[34, 42], ["len", "to_stack[].unsqueeze", "torch.stack"], "function", ["None"], ["\n", "file_source", "=", "tempfile", ".", "NamedTemporaryFile", "(", ")", "\n", "file_target", "=", "tempfile", ".", "NamedTemporaryFile", "(", ")", "\n", "file_source", ".", "write", "(", "\"\\n\"", ".", "join", "(", "sources", ")", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "file_source", ".", "flush", "(", ")", "\n", "file_target", ".", "write", "(", "\"\\n\"", ".", "join", "(", "targets", ")", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "file_target", ".", "flush", "(", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.utils.accumulate_logprobs": [[44, 51], ["d.get", "torch.logsumexp", "torch.stack"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get"], ["\n", "\n", "", "def", "create_temp_tfrecords", "(", "sources", ",", "targets", ")", ":", "\n", "  "]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.arithmetic.arithmetic_dec.ArithmeticDecoderPreproc.add_item": [[23, 31], ["arithmetic_dec.ArithmeticDecoderPreproc.items[].append", "arithmetic_dec.ArithmeticDecoderPreproc.vocab_builder.add_word"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.add_word"], ["    ", "def", "add_item", "(", "self", ",", "item", ",", "section", ",", "validation_info", ")", ":", "\n", "        ", "actions", "=", "item", ".", "tgt", "\n", "\n", "if", "section", "==", "\"train\"", ":", "\n", "            ", "for", "action", "in", "actions", ":", "\n", "                ", "self", ".", "vocab_builder", ".", "add_word", "(", "action", ")", "\n", "\n", "", "", "self", ".", "items", "[", "section", "]", ".", "append", "(", "{", "\"actions\"", ":", "actions", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.arithmetic.length_beam_search.beam_search": [[20, 86], ["tensor2struct.utils.registry.register", "model", "len", "range", "finished.sort", "length_beam_search.Hypothesis", "candidates.sort", "len", "hyp.inference_state.clone", "hyp.inference_state.clone.step", "operator.attrgetter", "operator.itemgetter", "finished.append", "beam.append", "candidates.append", "len", "length_beam_search.Hypothesis", "length_beam_search.Hypothesis", "choice_score.item", "choice_score.item"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.register", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree.SubtreeIDSubtreeSizeRouteList.sort", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.train_tree_traversal.TrainTreeTraversal.clone", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["", "@", "registry", ".", "register", "(", "\"infer_method\"", ",", "\"length_beam_search\"", ")", "\n", "def", "beam_search", "(", "model", ",", "orig_item", ",", "preproc_item", ",", "beam_size", ",", "max_steps", ")", ":", "\n", "    ", "\"\"\"\n    Enfore that the number of decoded items is equal to the number of encoded items\n    \"\"\"", "\n", "ret_state", "=", "model", "(", "orig_item", ",", "preproc_item", ",", "compute_loss", "=", "False", ",", "infer", "=", "True", ")", "\n", "inference_state", ",", "next_choices", "=", "(", "\n", "ret_state", "[", "\"initial_state\"", "]", ",", "\n", "ret_state", "[", "\"initial_choices\"", "]", ",", "\n", ")", "\n", "num_tokens", "=", "len", "(", "preproc_item", "[", "0", "]", "[", "\"tokens\"", "]", ")", "\n", "beam", "=", "[", "Hypothesis", "(", "inference_state", ",", "next_choices", ")", "]", "\n", "finished", "=", "[", "]", "\n", "\n", "for", "step", "in", "range", "(", "max_steps", ")", ":", "\n", "# Check if all beams are finished", "\n", "        ", "if", "len", "(", "finished", ")", "==", "beam_size", ":", "\n", "            ", "break", "\n", "\n", "", "candidates", "=", "[", "]", "\n", "for", "hyp", "in", "beam", ":", "\n", "            ", "for", "choice", ",", "choice_score", "in", "hyp", ".", "next_choices", ":", "\n", "                ", "if", "(", "step", "<", "num_tokens", "and", "choice", "!=", "vocab", ".", "EOS", ")", "or", "(", "\n", "step", "==", "num_tokens", "and", "choice", "==", "vocab", ".", "EOS", "\n", ")", ":", "\n", "                    ", "candidates", ".", "append", "(", "\n", "(", "\n", "hyp", ",", "\n", "choice", ",", "\n", "choice_score", ".", "item", "(", ")", ",", "\n", "hyp", ".", "score", "+", "choice_score", ".", "item", "(", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "# Keep the top K expansions", "\n", "", "", "", "candidates", ".", "sort", "(", "key", "=", "operator", ".", "itemgetter", "(", "3", ")", ",", "reverse", "=", "True", ")", "\n", "candidates", "=", "candidates", "[", ":", "beam_size", "-", "len", "(", "finished", ")", "]", "\n", "\n", "# Create the new hypotheses from the expansions", "\n", "beam", "=", "[", "]", "\n", "for", "hyp", ",", "choice", ",", "choice_score", ",", "cum_score", "in", "candidates", ":", "\n", "            ", "inference_state", "=", "hyp", ".", "inference_state", ".", "clone", "(", ")", "\n", "next_choices", "=", "inference_state", ".", "step", "(", "choice", ")", "\n", "if", "next_choices", "is", "None", ":", "\n", "                ", "finished", ".", "append", "(", "\n", "Hypothesis", "(", "\n", "inference_state", ",", "\n", "None", ",", "\n", "cum_score", ",", "\n", "hyp", ".", "choice_history", "+", "[", "choice", "]", ",", "\n", "hyp", ".", "score_history", "+", "[", "choice_score", "]", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "beam", ".", "append", "(", "\n", "Hypothesis", "(", "\n", "inference_state", ",", "\n", "next_choices", ",", "\n", "cum_score", ",", "\n", "hyp", ".", "choice_history", "+", "[", "choice", "]", ",", "\n", "hyp", ".", "score_history", "+", "[", "choice_score", "]", ",", "\n", ")", "\n", ")", "\n", "\n", "", "", "", "finished", ".", "sort", "(", "key", "=", "operator", ".", "attrgetter", "(", "\"score\"", ")", ",", "reverse", "=", "True", ")", "\n", "return", "finished", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.cogs.cogs_enc.CogsPreproc.add_item": [[6, 13], ["item.text.split", "cogs_enc.CogsPreproc.texts[].append", "cogs_enc.CogsPreproc.vocab_builder.add_word"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.add_word"], ["    ", "def", "add_item", "(", "self", ",", "item", ",", "section", ",", "validation_info", ")", ":", "\n", "        ", "tokens", "=", "item", ".", "text", ".", "split", "(", ")", "\n", "self", ".", "texts", "[", "section", "]", ".", "append", "(", "{", "\"tokens\"", ":", "tokens", "}", ")", "\n", "\n", "if", "section", "==", "\"train\"", ":", "\n", "            ", "for", "token", "in", "tokens", ":", "\n", "                ", "self", ".", "vocab_builder", ".", "add_word", "(", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.cogs.cogs_enc.CogsLatPerPreproc.add_item": [[21, 33], ["item.text.split", "cogs_enc.CogsLatPerPreproc.texts[].append", "cogs_enc.CogsLatPerPreproc.vocab_builder.add_word"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.add_word"], ["    ", "def", "add_item", "(", "self", ",", "item", ",", "section", ",", "validation_info", ")", ":", "\n", "        ", "tokens", "=", "item", ".", "text", ".", "split", "(", ")", "\n", "\n", "# remove the period mark", "\n", "if", "tokens", "[", "-", "1", "]", "==", "\".\"", ":", "\n", "            ", "tokens", "=", "tokens", "[", ":", "-", "1", "]", "\n", "\n", "", "self", ".", "texts", "[", "section", "]", ".", "append", "(", "{", "\"tokens\"", ":", "tokens", "}", ")", "\n", "\n", "if", "section", "==", "\"train\"", ":", "\n", "            ", "for", "token", "in", "tokens", ":", "\n", "                ", "self", ".", "vocab_builder", ".", "add_word", "(", "token", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.cogs.cogs_dec.CogsPreproc.add_item": [[6, 14], ["item.code.split", "cogs_dec.CogsPreproc.items[].append", "cogs_dec.CogsPreproc.vocab_builder.add_word"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.add_word"], ["    ", "def", "add_item", "(", "self", ",", "item", ",", "section", ",", "validation_info", ")", ":", "\n", "        ", "actions", "=", "item", ".", "code", ".", "split", "(", ")", "\n", "\n", "if", "section", "==", "\"train\"", ":", "\n", "            ", "for", "action", "in", "actions", ":", "\n", "                ", "self", ".", "vocab_builder", ".", "add_word", "(", "action", ")", "\n", "\n", "", "", "self", ".", "items", "[", "section", "]", ".", "append", "(", "{", "\"actions\"", ":", "[", "vocab", ".", "BOS", "]", "+", "actions", "+", "[", "vocab", ".", "EOS", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.scan.edit_utils.compute_hamming_distance": [[7, 18], ["enumerate", "len", "len", "zip", "ops.append", "ops.append"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["def", "compute_hamming_distance", "(", "l1", ",", "l2", ")", ":", "\n", "    ", "assert", "len", "(", "l1", ")", "==", "len", "(", "l2", ")", "\n", "dist", "=", "0", "\n", "ops", "=", "[", "]", "\n", "for", "i", ",", "(", "i1", ",", "i2", ")", "in", "enumerate", "(", "zip", "(", "l1", ",", "l2", ")", ")", ":", "\n", "        ", "if", "i1", "!=", "i2", ":", "\n", "            ", "dist", "+=", "1", "\n", "ops", ".", "append", "(", "(", "\"replace\"", ",", "i", ",", "i", "+", "1", ",", "i", ",", "i", "+", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "ops", ".", "append", "(", "(", "\"equal\"", ",", "i", ",", "i", "+", "1", ",", "i", ",", "i", "+", "1", ")", ")", "\n", "", "", "return", "dist", ",", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.scan.edit_utils.compute_levenshtein_distance": [[20, 23], ["edit_distance.SequenceMatcher", "edit_distance.SequenceMatcher.distance", "edit_distance.SequenceMatcher.get_opcodes"], "function", ["None"], ["", "def", "compute_levenshtein_distance", "(", "l1", ",", "l2", ")", ":", "\n", "    ", "sm", "=", "edit_distance", ".", "SequenceMatcher", "(", "a", "=", "l1", ",", "b", "=", "l2", ")", "\n", "return", "sm", ".", "distance", "(", ")", ",", "sm", ".", "get_opcodes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.scan.edit_utils.ComputeHammingCDF": [[25, 44], ["numpy.zeros", "range", "numpy.exp", "numpy.sum", "numpy.cumsum", "scipy.comb", "numpy.max", "numpy.log", "numpy.log", "numpy.log", "float", "float", "len", "len"], "function", ["None"], ["", "def", "ComputeHammingCDF", "(", "len_target", ",", "temprature", ",", "vocab", ")", ":", "\n", "    ", "max_edits", "=", "len_target", "+", "1", "# we allow between 0 and len_target subs", "\n", "a", "=", "np", ".", "zeros", "(", "max_edits", ")", "\n", "for", "n_subs", "in", "range", "(", "max_edits", ")", ":", "\n", "        ", "count_n_subs", "=", "[", "]", "\n", "tot_edits", "=", "misc", ".", "comb", "(", "len_target", ",", "n_subs", ")", "\n", "a", "[", "n_subs", "]", "=", "np", ".", "log", "(", "tot_edits", ")", "+", "n_subs", "*", "np", ".", "log", "(", "\n", "len", "(", "vocab", ")", "-", "1", "\n", ")", "# number of sequences: tot_edits * (N-1) ^ n_subs", "\n", "a", "[", "n_subs", "]", "+=", "-", "n_subs", "/", "float", "(", "temprature", ")", "*", "np", ".", "log", "(", "\n", "len", "(", "vocab", ")", "-", "1", "\n", ")", "-", "n_subs", "/", "float", "(", "\n", "temprature", "\n", ")", "# tot_edits * (N-1) ^ n_subs * ((N-1)e) ^ (-n_subs / T)", "\n", "", "p_subs", "=", "a", "-", "np", ".", "max", "(", "a", ")", "\n", "p_subs", "=", "np", ".", "exp", "(", "p_subs", ")", "\n", "p_subs", "/=", "np", ".", "sum", "(", "p_subs", ")", "\n", "p_hamming_cdf", "=", "np", ".", "cumsum", "(", "p_subs", ")", "\n", "return", "p_hamming_cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.scan.edit_utils.SubstitutionSampling": [[46, 76], ["numpy.sum", "copy.copy", "numpy.random.permutation", "len", "numpy.random.rand", "numpy.random.randint", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.PrefixSet.copy"], ["", "def", "SubstitutionSampling", "(", "s", ",", "temprature", ",", "hamming_cdf", ",", "vocab", ")", ":", "\n", "    ", "\"\"\"\n    Sample one sequence from the vicinity of a given target sequence s.\n        A string t is sampled proportionally to exp{-hamming_distance(t, s) / temprature}\n\n    Args:\n        s: numpy array of a sequence which is output of a seq2seq/crf model e.g. POS tag sequence\n        temprature: temprature of sampling\n        hamming_cdf: precomputed edit CDF\n        vocab: the vocabulary elements that are allowed for substitution\n\n        Returns:\n        numpy array of a sampled sequence t\n    \"\"\"", "\n", "# assert min(vocab) >= 0", "\n", "len_target", "=", "len", "(", "s", ")", "-", "1", "\n", "p_hamming_cdf", "=", "hamming_cdf", "[", "len_target", "]", "\n", "# sample", "\n", "rand_n_subs", "=", "np", ".", "sum", "(", "np", ".", "random", ".", "rand", "(", ")", ">=", "p_hamming_cdf", ")", "\n", "# apply changes", "\n", "t", "=", "copy", ".", "copy", "(", "s", ")", "\n", "perm", "=", "np", ".", "random", ".", "permutation", "(", "len_target", ")", "\n", "subs", "=", "perm", "[", ":", "rand_n_subs", "]", "\n", "for", "i", "in", "subs", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "rand_char", "=", "vocab", "[", "np", ".", "random", ".", "randint", "(", "len", "(", "vocab", ")", ")", "]", "\n", "if", "not", "t", "[", "i", "]", "==", "rand_char", ":", "\n", "                ", "break", "\n", "", "", "t", "[", "i", "]", "=", "rand_char", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.scan.scan_dec.ScanDecoderPreproc.add_item": [[28, 36], ["item.code.split", "scan_dec.ScanDecoderPreproc.items[].append", "scan_dec.ScanDecoderPreproc.vocab_builder.add_word"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.add_word"], ["    ", "def", "add_item", "(", "self", ",", "item", ",", "section", ",", "validation_info", ")", ":", "\n", "        ", "actions", "=", "item", ".", "code", ".", "split", "(", ")", "\n", "\n", "if", "section", "==", "\"train\"", ":", "\n", "            ", "for", "action", "in", "actions", ":", "\n", "                ", "self", ".", "vocab_builder", ".", "add_word", "(", "action", ")", "\n", "\n", "", "", "self", ".", "items", "[", "section", "]", ".", "append", "(", "{", "\"actions\"", ":", "[", "vocab", ".", "BOS", "]", "+", "actions", "+", "[", "vocab", ".", "EOS", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.scan.scan_dec.ScanDecoderPreprocV3.add_item": [[46, 54], ["item.code.split", "scan_dec.ScanDecoderPreprocV3.items[].append", "scan_dec.ScanDecoderPreprocV3.vocab_builder.add_word"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.add_word"], ["def", "add_item", "(", "self", ",", "item", ",", "section", ",", "validation_info", ")", ":", "\n", "        ", "actions", "=", "item", ".", "code", ".", "split", "(", ")", "\n", "\n", "if", "section", "==", "\"train\"", ":", "\n", "            ", "for", "action", "in", "actions", ":", "\n", "                ", "self", ".", "vocab_builder", ".", "add_word", "(", "action", ")", "\n", "\n", "", "", "self", ".", "items", "[", "section", "]", ".", "append", "(", "{", "\"actions\"", ":", "actions", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.scan.scan_enc.ScanEncPreproc.add_item": [[24, 31], ["item.text.split", "scan_enc.ScanEncPreproc.texts[].append", "scan_enc.ScanEncPreproc.vocab_builder.add_word"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.vocab.VocabBuilder.add_word"], ["    ", "def", "add_item", "(", "self", ",", "item", ",", "section", ",", "validation_info", ")", ":", "\n", "        ", "tokens", "=", "item", ".", "text", ".", "split", "(", ")", "\n", "self", ".", "texts", "[", "section", "]", ".", "append", "(", "{", "\"tokens\"", ":", "tokens", "}", ")", "\n", "\n", "if", "section", "==", "\"train\"", ":", "\n", "            ", "for", "token", "in", "tokens", ":", "\n", "                ", "self", ".", "vocab_builder", ".", "add_word", "(", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.eval.add_parser": [[10, 21], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.parse_args"], ["def", "add_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--config\"", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--config-args\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--section\"", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--inferred\"", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--etype\"", ",", "default", "=", "\"match\"", ",", "help", "=", "\"match, exec, all\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--output\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--logdir\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.eval.compute_metrics": [[23, 64], ["wandb.config.update", "open", "tensor2struct.utils.registry.construct", "registry.construct.Metrics", "list", "enumerate", "json.loads", "json.loads", "os.path.join", "inferred_path.replace.replace", "len", "len", "Exception", "json.loads", "data.Metrics.finalize", "_jsonnet.evaluate_file", "_jsonnet.evaluate_file", "data.Metrics.add_beams", "data.Metrics.add_one", "len", "len"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.infer_tree_traversal.InferenceTreeTraversal.finalize"], ["", "def", "compute_metrics", "(", "config_path", ",", "config_args", ",", "section", ",", "inferred_path", ",", "etype", ",", "logdir", "=", "None", ")", ":", "\n", "    ", "if", "config_args", ":", "\n", "        ", "config", "=", "json", ".", "loads", "(", "\n", "_jsonnet", ".", "evaluate_file", "(", "config_path", ",", "tla_codes", "=", "{", "\"args\"", ":", "config_args", "}", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "config", "=", "json", ".", "loads", "(", "_jsonnet", ".", "evaluate_file", "(", "config_path", ")", ")", "\n", "\n", "# update config to wandb", "\n", "", "wandb", ".", "config", ".", "update", "(", "config", ")", "\n", "\n", "if", "\"model_name\"", "in", "config", "and", "logdir", ":", "\n", "        ", "logdir", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "config", "[", "\"model_name\"", "]", ")", "\n", "", "if", "logdir", ":", "\n", "        ", "inferred_path", "=", "inferred_path", ".", "replace", "(", "\"__LOGDIR__\"", ",", "logdir", ")", "\n", "\n", "", "inferred", "=", "open", "(", "inferred_path", ")", "\n", "data", "=", "registry", ".", "construct", "(", "\"dataset\"", ",", "config", "[", "\"data\"", "]", "[", "section", "]", ")", "\n", "metrics", "=", "data", ".", "Metrics", "(", "data", ",", "etype", ")", "\n", "\n", "inferred_lines", "=", "list", "(", "inferred", ")", "\n", "if", "len", "(", "inferred_lines", ")", "<", "len", "(", "data", ")", ":", "\n", "        ", "raise", "Exception", "(", "\n", "\"Not enough inferred: {} vs {}\"", ".", "format", "(", "len", "(", "inferred_lines", ")", ",", "len", "(", "data", ")", ")", "\n", ")", "\n", "\n", "", "for", "i", ",", "line", "in", "enumerate", "(", "inferred_lines", ")", ":", "\n", "        ", "infer_results", "=", "json", ".", "loads", "(", "line", ")", "\n", "if", "infer_results", "[", "\"beams\"", "]", ":", "\n", "            ", "inferred_codes", "=", "[", "beam", "[", "\"inferred_code\"", "]", "for", "beam", "in", "infer_results", "[", "\"beams\"", "]", "]", "\n", "", "else", ":", "\n", "            ", "inferred_codes", "=", "[", "None", "]", "\n", "", "assert", "\"index\"", "in", "infer_results", "\n", "\n", "if", "etype", "in", "[", "\"execution\"", ",", "\"all\"", "]", ":", "\n", "# if eval by execution, then we choose the first executable one from the beams", "\n", "            ", "metrics", ".", "add_beams", "(", "data", "[", "infer_results", "[", "\"index\"", "]", "]", ",", "inferred_codes", ",", "data", "[", "i", "]", ".", "orig", "[", "\"question\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "etype", "in", "[", "\"match\"", ",", "\"sacreBLEU\"", ",", "\"tokenizedBLEU\"", "]", "\n", "metrics", ".", "add_one", "(", "data", "[", "infer_results", "[", "\"index\"", "]", "]", ",", "inferred_codes", "[", "0", "]", ")", "\n", "", "", "return", "logdir", ",", "metrics", ".", "finalize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.eval.main": [[66, 82], ["eval.compute_metrics", "print", "print", "args.output.replace", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.eval.compute_metrics", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.dump"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "real_logdir", ",", "metrics", "=", "compute_metrics", "(", "\n", "args", ".", "config", ",", "args", ".", "config_args", ",", "args", ".", "section", ",", "args", ".", "inferred", ",", "args", ".", "etype", ",", "args", ".", "logdir", "\n", ")", "\n", "\n", "if", "args", ".", "output", ":", "\n", "        ", "if", "real_logdir", ":", "\n", "            ", "output_path", "=", "args", ".", "output", ".", "replace", "(", "\"__LOGDIR__\"", ",", "real_logdir", ")", "\n", "", "else", ":", "\n", "            ", "output_path", "=", "args", ".", "output", "\n", "", "with", "open", "(", "output_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "metrics", ",", "f", ")", "\n", "", "print", "(", "\"Wrote eval results to {}\"", ".", "format", "(", "output_path", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "metrics", ")", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.meta_train.MetaTrainer.load_train_config": [[30, 38], ["tensor2struct.utils.registry.instantiate", "meta_train.MetaTrainer.logger.warn"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.instantiate"], [")", "\n", "\n", "if", "self", ".", "train_config", ".", "num_batch_accumulated", ">", "1", ":", "\n", "            ", "self", ".", "logger", ".", "warn", "(", "\"Batch accumulation is used only at MAML-step level\"", ")", "\n", "\n", "", "if", "self", ".", "train_config", ".", "use_bert_training", ":", "\n", "            ", "if", "self", ".", "train_config", ".", "clip_grad", "is", "None", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"Gradient clipping is recommended for BERT training\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.meta_train.MetaTrainer.load_optimizer": [[39, 74], ["meta_train.MetaTrainer.model.get_trainable_parameters", "tensor2struct.utils.registry.construct", "tensor2struct.training.maml.MAML", "tensor2struct.training.maml.MAML.to", "tensor2struct.training.maml.MAML.get_inner_opt_params", "meta_train.MetaTrainer.logger.info", "tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.construct", "config.get", "itertools.chain", "len", "meta_train.MetaTrainer.model.get_trainable_parameters"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.get_trainable_parameters", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.maml.ModelAgnosticMetaLearning.get_inner_opt_params", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.get_trainable_parameters"], ["", "", "", "def", "load_optimizer", "(", "self", ",", "config", ")", ":", "\n", "        ", "with", "self", ".", "init_random", ":", "\n", "# 0. create inner_optimizer", "\n", "# inner_parameters = list(self.model.get_trainable_parameters())", "\n", "            ", "inner_parameters", "=", "list", "(", "self", ".", "model", ".", "get_non_bert_parameters", "(", ")", ")", "\n", "inner_optimizer", "=", "registry", ".", "construct", "(", "\n", "\"optimizer\"", ",", "self", ".", "train_config", ".", "inner_opt", ",", "params", "=", "inner_parameters", "\n", ")", "\n", "self", ".", "logger", ".", "info", "(", "f\"{len(inner_parameters)} parameters for inner update\"", ")", "\n", "\n", "# 1. MAML trainer, might add new parameters to the optimizer, e.g., step size", "\n", "maml_trainer", "=", "maml", ".", "MAML", "(", "\n", "model", "=", "self", ".", "model", ",", "inner_opt", "=", "inner_optimizer", ",", "device", "=", "self", ".", "device", ",", "\n", ")", "\n", "maml_trainer", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "opt_params", "=", "maml_trainer", ".", "get_inner_opt_params", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "f\"{len(opt_params)} opt meta parameters\"", ")", "\n", "\n", "# 2. Outer optimizer", "\n", "# if config[\"optimizer\"].get(\"name\", None) in [\"bertAdamw\", \"torchAdamw\"]:", "\n", "if", "self", ".", "train_config", ".", "use_bert_training", ":", "\n", "                ", "bert_params", "=", "self", ".", "model", ".", "get_bert_parameters", "(", ")", "\n", "non_bert_params", "=", "self", ".", "model", ".", "get_non_bert_parameters", "(", ")", "\n", "assert", "len", "(", "non_bert_params", ")", "+", "len", "(", "bert_params", ")", "==", "len", "(", "\n", "list", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", ")", "\n", "assert", "len", "(", "bert_params", ")", ">", "0", "\n", "self", ".", "logger", ".", "info", "(", "\n", "f\"{len(bert_params)} BERT parameters and {len(non_bert_params)} non-BERT parameters\"", "\n", ")", "\n", "\n", "optimizer", "=", "registry", ".", "construct", "(", "\n", "\"optimizer\"", ",", "\n", "config", "[", "\"optimizer\"", "]", ",", "\n", "non_bert_params", "=", "non_bert_params", ",", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.meta_train.MetaTrainer.load_train_data": [[75, 85], ["meta_train.MetaTrainer.model_preproc.dataset", "tensor2struct.utils.registry.construct"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.dataset", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct"], ["bert_params", "=", "bert_params", ",", "\n", ")", "\n", "lr_scheduler", "=", "registry", ".", "construct", "(", "\n", "\"lr_scheduler\"", ",", "\n", "config", ".", "get", "(", "\"lr_scheduler\"", ",", "{", "\"name\"", ":", "\"noop\"", "}", ")", ",", "\n", "param_groups", "=", "[", "\n", "optimizer", ".", "non_bert_param_group", ",", "\n", "optimizer", ".", "bert_param_group", ",", "\n", "]", ",", "\n", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.meta_train.MetaTrainer.step": [[86, 122], ["train_data_scheduler.get_batch", "maml_trainer.meta_train", "optimizer.step", "optimizer.zero_grad", "lr_scheduler.update_lr", "meta_train.MetaTrainer.logger.info", "meta_train.MetaTrainer.logger.info", "wandb.log", "enumerate", "enumerate", "meta_train.MetaTrainer.logger.warn", "wandb.log", "wandb.log"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.comp_maml.data_scheduler.CogsRandScheduler.get_batch", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.maml.ModelAgnosticMetaLearning.meta_train", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.optimizers.BertWarmupPolynomialLRSchedulerGroupV2.update_lr"], ["                ", "optimizer", "=", "registry", ".", "construct", "(", "\n", "\"optimizer\"", ",", "\n", "config", "[", "\"optimizer\"", "]", ",", "\n", "params", "=", "self", ".", "model", ".", "get_trainable_parameters", "(", ")", ",", "\n", ")", "\n", "lr_scheduler", "=", "registry", ".", "construct", "(", "\n", "\"lr_scheduler\"", ",", "\n", "config", ".", "get", "(", "\"lr_scheduler\"", ",", "{", "\"name\"", ":", "\"noop\"", "}", ")", ",", "\n", "param_groups", "=", "optimizer", ".", "param_groups", ",", "\n", ")", "\n", "\n", "", "lr_scheduler", "=", "registry", ".", "construct", "(", "\n", "\"lr_scheduler\"", ",", "\n", "config", ".", "get", "(", "\"lr_scheduler\"", ",", "{", "\"name\"", ":", "\"noop\"", "}", ")", ",", "\n", "param_groups", "=", "optimizer", ".", "param_groups", ",", "\n", ")", "\n", "return", "inner_optimizer", ",", "maml_trainer", ",", "optimizer", ",", "lr_scheduler", "\n", "\n", "", "", "def", "step", "(", "\n", "self", ",", "\n", "config", ",", "\n", "train_data_scheduler", ",", "\n", "maml_trainer", ",", "\n", "optimizer", ",", "\n", "lr_scheduler", ",", "\n", "last_step", ",", "\n", ")", ":", "\n", "        ", "with", "self", ".", "model_random", ":", "\n", "            ", "for", "_i", "in", "range", "(", "self", ".", "train_config", ".", "num_batch_accumulated", ")", ":", "\n", "                ", "task", "=", "train_data_scheduler", ".", "get_batch", "(", "last_step", ")", "\n", "inner_batch", ",", "outer_batches", "=", "task", "\n", "ret_dic", "=", "maml_trainer", ".", "meta_train", "(", "\n", "self", ".", "model", ",", "inner_batch", ",", "outer_batches", "\n", ")", "\n", "loss", "=", "ret_dic", "[", "\"loss\"", "]", "\n", "\n", "# clip bert grad", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.meta_train.MetaTrainer.train": [[123, 160], ["meta_train.MetaTrainer.load_optimizer", "meta_train.MetaTrainer.load_saver", "meta_train.MetaTrainer.load_train_data", "meta_train.MetaTrainer.load_eval_data", "tensor2struct.utils.saver.save", "meta_train.MetaTrainer.eval_model", "meta_train.MetaTrainer.step", "meta_train.MetaTrainer.save_state", "str", "meta_train.MetaTrainer.logger.warn"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.load_optimizer", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.load_saver", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.load_train_data", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.load_eval_data", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.save", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.eval_model", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.save_state"], ["", "if", "self", ".", "train_config", ".", "clip_grad", "and", "self", ".", "train_config", ".", "use_bert_training", ":", "\n", "                ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "\n", "param_group", "[", "\"params\"", "]", ",", "self", ".", "train_config", ".", "clip_grad", ",", "\n", ")", "\n", "\n", "\n", "", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# log lr for each step", "\n", "outer_lr", "=", "lr_scheduler", ".", "update_lr", "(", "last_step", ")", "\n", "if", "outer_lr", "is", "None", ":", "\n", "                ", "outer_lr", "=", "[", "param", "[", "\"lr\"", "]", "for", "param", "in", "optimizer", ".", "param_groups", "]", "\n", "", "inner_lr", "=", "[", "param", "[", "\"lr\"", "]", "for", "param", "in", "maml_trainer", ".", "inner_opt", ".", "param_groups", "]", "\n", "\n", "# Report metrics and lr", "\n", "", "if", "last_step", "%", "self", ".", "train_config", ".", "report_every_n", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Step {}: loss={:.4f}\"", ".", "format", "(", "last_step", ",", "loss", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "f\"Step {last_step}, lr={inner_lr, outer_lr}\"", ")", "\n", "wandb", ".", "log", "(", "{", "\"train_loss\"", ":", "loss", "}", ",", "step", "=", "last_step", ")", "\n", "for", "idx", ",", "lr", "in", "enumerate", "(", "inner_lr", ")", ":", "\n", "                ", "wandb", ".", "log", "(", "{", "f\"inner_lr_{idx}\"", ":", "lr", "}", ",", "step", "=", "last_step", ")", "\n", "", "for", "idx", ",", "lr", "in", "enumerate", "(", "outer_lr", ")", ":", "\n", "                ", "wandb", ".", "log", "(", "{", "f\"outer_lr_{idx}\"", ":", "lr", "}", ",", "step", "=", "last_step", ")", "\n", "\n", "\n", "", "", "", "", "def", "main", "(", "args", ")", ":", "\n", "# setup logger etc", "\n", "    ", "config", ",", "logger", "=", "train", ".", "setup", "(", "args", ")", "\n", "\n", "# Construct trainer and do training", "\n", "trainer", "=", "MetaTrainer", "(", "logger", ",", "config", ")", "\n", "trainer", ".", "train", "(", "config", ",", "modeldir", "=", "args", ".", "logdir", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "args", "=", "train", ".", "add_parser", "(", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.meta_train.main": [[162, 169], ["tensor2struct.commands.train.setup", "meta_train.MetaTrainer", "meta_train.MetaTrainer.train"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.setup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.train"], ["", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.__init__": [[42, 53], ["train.Trainer.load_train_config", "torch.device", "tensor2struct.utils.random_state.RandomContext", "tensor2struct.utils.random_state.RandomContext", "tensor2struct.utils.random_state.RandomContext", "train.Trainer.load_model"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.load_train_config", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.Inferer.load_model"], ["\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"config_paths\"", ",", "\"\"", ",", "\n", "\"\"\"Path to a YAML configuration files defining FLAG\n                       values. Multiple files can be separated by commas.\n                       Files are merged recursively. Setting a key in these\n                       files is equivalent to setting the FLAG value with\n                       the same name.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"hooks\"", ",", "\"[]\"", ",", "\n", "\"\"\"YAML configuration string for the\n                       training hooks to use.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"metrics\"", ",", "\"[]\"", ",", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.load_train_config": [[54, 56], ["tensor2struct.utils.registry.instantiate"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.instantiate"], [")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"model\"", ",", "\"\"", ",", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.load_model": [[57, 76], ["tensor2struct.utils.registry.instantiate", "train.Trainer.model_preproc.load", "tensor2struct.utils.registry.construct", "train.Trainer.model.to", "tensor2struct.utils.registry.lookup"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.instantiate", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup"], [")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"model_params\"", ",", "\"{}\"", ",", "\n", "\"\"\"YAML configuration string for the model\n                       parameters.\"\"\"", ")", "\n", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"input_pipeline_train\"", ",", "\"{}\"", ",", "\n", "\"\"\"YAML configuration string for the training\n                       data input pipeline.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"input_pipeline_dev\"", ",", "\"{}\"", ",", "\n", "\"\"\"YAML configuration string for the development\n                       data input pipeline.\"\"\"", ")", "\n", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"buckets\"", ",", "None", ",", "\n", "\"\"\"Buckets input sequences according to these length.\n                       A comma-separated list of sequence length buckets, e.g.\n                       \"10,20,30\" would result in 4 buckets:\n                       <10, 10-20, 20-30, >30. None disabled bucketing. \"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"batch_size\"", ",", "16", ",", "\n", "\"\"\"Batch size used for training and evaluation.\"\"\"", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.load_optimizer": [[77, 90], ["tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.construct", "config.get", "train.Trainer.model.get_trainable_parameters"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.models.enc_dec.SemiBatchedEncDecModel.get_trainable_parameters"], ["tf", ".", "flags", ".", "DEFINE_string", "(", "\"output_dir\"", ",", "None", ",", "\n", "\"\"\"The directory to write model checkpoints and summaries\n                       to. If None, a local temporary directory is created.\"\"\"", ")", "\n", "\n", "# Training parameters", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"schedule\"", ",", "\"continuous_train_and_eval\"", ",", "\n", "\"\"\"Estimator function to call, defaults to\n                       continuous_train_and_eval for local run\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"train_steps\"", ",", "None", ",", "\n", "\"\"\"Maximum number of training steps to run.\n                         If None, train forever.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"eval_every_n_steps\"", ",", "1000", ",", "\n", "\"Run evaluation on validation data every N steps.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.load_saver": [[91, 116], ["tensor2struct.utils.saver.Saver", "tensor2struct.utils.saver.Saver.restore", "tensor2struct.utils.saver.Saver.restore", "list", "kwargs.keys"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.Saver.restore", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.Saver.restore", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.keys"], ["# RunConfig Flags", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"tf_random_seed\"", ",", "None", ",", "\n", "\"\"\"Random seed for TensorFlow initializers. Setting\n                        this value allows consistency between reruns.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"save_checkpoints_secs\"", ",", "None", ",", "\n", "\"\"\"Save checkpoints every this many seconds.\n                        Can not be specified with save_checkpoints_steps.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"save_checkpoints_steps\"", ",", "None", ",", "\n", "\"\"\"Save checkpoints every this many steps.\n                        Can not be specified with save_checkpoints_secs.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"keep_checkpoint_max\"", ",", "5", ",", "\n", "\"\"\"Maximum number of recent checkpoint files to keep.\n                        As new files are created, older files are deleted.\n                        If None or 0, all checkpoint files are kept.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"keep_checkpoint_every_n_hours\"", ",", "4", ",", "\n", "\"\"\"In addition to keeping the most recent checkpoint\n                        files, keep one checkpoint file for every N hours of\n                        training.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_float", "(", "\"gpu_memory_fraction\"", ",", "1.0", ",", "\n", "\"\"\"Fraction of GPU memory used by the process on\n                      each GPU uniformly on the same machine.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_boolean", "(", "\"gpu_allow_growth\"", ",", "False", ",", "\n", "\"\"\"Allow GPU memory allocation to grow\n                        dynamically.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_boolean", "(", "\"log_device_placement\"", ",", "False", ",", "\n", "\"\"\"Log the op placement to devices\"\"\"", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.load_train_data": [[117, 130], ["train.Trainer.model_preproc.dataset", "train.Trainer._yield_batches_from_epochs", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.dataset", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer._yield_batches_from_epochs"], ["\n", "\n", "FLAGS", "=", "tf", ".", "flags", ".", "FLAGS", "\n", "\n", "def", "create_experiment", "(", "output_dir", ")", ":", "\n", "  ", "\"\"\"\n  Creates a new Experiment instance.\n\n  Args:\n    output_dir: Output directory for model checkpoints and summaries.\n  \"\"\"", "\n", "\n", "config", "=", "run_config", ".", "RunConfig", "(", "\n", "tf_random_seed", "=", "FLAGS", ".", "tf_random_seed", ",", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.load_eval_data": [[131, 147], ["train.Trainer.model_preproc.dataset", "torch.utils.data.DataLoader", "train.Trainer.model_preproc.dataset", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.dataset", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.dataset"], ["save_checkpoints_secs", "=", "FLAGS", ".", "save_checkpoints_secs", ",", "\n", "save_checkpoints_steps", "=", "FLAGS", ".", "save_checkpoints_steps", ",", "\n", "keep_checkpoint_max", "=", "FLAGS", ".", "keep_checkpoint_max", ",", "\n", "keep_checkpoint_every_n_hours", "=", "FLAGS", ".", "keep_checkpoint_every_n_hours", ",", "\n", "gpu_memory_fraction", "=", "FLAGS", ".", "gpu_memory_fraction", ")", "\n", "config", ".", "tf_config", ".", "gpu_options", ".", "allow_growth", "=", "FLAGS", ".", "gpu_allow_growth", "\n", "config", ".", "tf_config", ".", "log_device_placement", "=", "FLAGS", ".", "log_device_placement", "\n", "\n", "train_options", "=", "training_utils", ".", "TrainOptions", "(", "\n", "model_class", "=", "FLAGS", ".", "model", ",", "\n", "model_params", "=", "FLAGS", ".", "model_params", ")", "\n", "# On the main worker, save training options", "\n", "if", "config", ".", "is_chief", ":", "\n", "    ", "gfile", ".", "MakeDirs", "(", "output_dir", ")", "\n", "train_options", ".", "dump", "(", "output_dir", ")", "\n", "\n", "", "bucket_boundaries", "=", "None", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step": [[148, 173], ["range", "optimizer.step", "lr_scheduler.update_lr", "optimizer.zero_grad", "next", "train.Trainer.model", "norm_loss.backward", "train.Trainer.logger.warn", "train.Trainer.logger.info", "train.Trainer.logger.info", "wandb.log", "range", "len", "wandb.log", "loss.item", "loss.item"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.optimizers.BertWarmupPolynomialLRSchedulerGroupV2.update_lr"], ["if", "FLAGS", ".", "buckets", ":", "\n", "    ", "bucket_boundaries", "=", "list", "(", "map", "(", "int", ",", "FLAGS", ".", "buckets", ".", "split", "(", "\",\"", ")", ")", ")", "\n", "\n", "# Training data input pipeline", "\n", "", "train_input_pipeline", "=", "input_pipeline", ".", "make_input_pipeline_from_def", "(", "\n", "def_dict", "=", "FLAGS", ".", "input_pipeline_train", ",", "\n", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "\n", "# Create training input function", "\n", "train_input_fn", "=", "training_utils", ".", "create_input_fn", "(", "\n", "pipeline", "=", "train_input_pipeline", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "\n", "bucket_boundaries", "=", "bucket_boundaries", ",", "\n", "scope", "=", "\"train_input_fn\"", ")", "\n", "\n", "# Development data input pipeline", "\n", "dev_input_pipeline", "=", "input_pipeline", ".", "make_input_pipeline_from_def", "(", "\n", "def_dict", "=", "FLAGS", ".", "input_pipeline_dev", ",", "\n", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "EVAL", ",", "\n", "shuffle", "=", "False", ",", "num_epochs", "=", "1", ")", "\n", "\n", "# Create eval input function", "\n", "eval_input_fn", "=", "training_utils", ".", "create_input_fn", "(", "\n", "pipeline", "=", "dev_input_pipeline", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "\n", "allow_smaller_final_batch", "=", "True", ",", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.save_state": [[174, 180], ["tensor2struct.utils.saver.save"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.save"], ["scope", "=", "\"dev_input_fn\"", ")", "\n", "\n", "\n", "def", "model_fn", "(", "features", ",", "labels", ",", "params", ",", "mode", ")", ":", "\n", "    ", "\"\"\"Builds the model graph\"\"\"", "\n", "model", "=", "_create_from_dict", "(", "{", "\n", "\"class\"", ":", "train_options", ".", "model_class", ",", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.train": [[181, 196], ["train.Trainer.load_optimizer", "train.Trainer.load_saver", "train.Trainer.load_train_data", "train.Trainer.load_eval_data", "tensor2struct.utils.saver.save", "train.Trainer.eval_model", "train.Trainer.step", "train.Trainer.save_state"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.load_optimizer", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.load_saver", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.load_train_data", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.load_eval_data", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.save", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.eval_model", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.step", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.save_state"], ["\"params\"", ":", "train_options", ".", "model_params", "\n", "}", ",", "models", ",", "mode", "=", "mode", ")", "\n", "return", "model", "(", "features", ",", "labels", ",", "params", ")", "\n", "\n", "", "estimator", "=", "tf", ".", "contrib", ".", "learn", ".", "Estimator", "(", "\n", "model_fn", "=", "model_fn", ",", "\n", "model_dir", "=", "output_dir", ",", "\n", "config", "=", "config", ",", "\n", "params", "=", "FLAGS", ".", "model_params", ")", "\n", "\n", "# Create hooks", "\n", "train_hooks", "=", "[", "]", "\n", "for", "dict_", "in", "FLAGS", ".", "hooks", ":", "\n", "    ", "hook", "=", "_create_from_dict", "(", "\n", "dict_", ",", "hooks", ",", "\n", "model_dir", "=", "estimator", ".", "model_dir", ",", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer._yield_batches_from_epochs": [[197, 202], ["None"], "methods", ["None"], ["run_config", "=", "config", ")", "\n", "train_hooks", ".", "append", "(", "hook", ")", "\n", "\n", "# Create metrics", "\n", "", "eval_metrics", "=", "{", "}", "\n", "for", "dict_", "in", "FLAGS", ".", "metrics", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.eval_model": [[203, 222], ["train.Trainer._eval_model", "train.Trainer._eval_model"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer._eval_model", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer._eval_model"], ["    ", "metric", "=", "_create_from_dict", "(", "dict_", ",", "metric_specs", ")", "\n", "eval_metrics", "[", "metric", ".", "name", "]", "=", "metric", "\n", "\n", "## what is PatchedExperiment", "\n", "", "experiment", "=", "PatchedExperiment", "(", "\n", "\n", "estimator", "=", "estimator", ",", "\n", "train_input_fn", "=", "train_input_fn", ",", "\n", "eval_input_fn", "=", "eval_input_fn", ",", "\n", "min_eval_frequency", "=", "FLAGS", ".", "eval_every_n_steps", ",", "\n", "train_steps", "=", "FLAGS", ".", "train_steps", ",", "\n", "eval_steps", "=", "None", ",", "\n", "eval_metrics", "=", "eval_metrics", ",", "\n", "train_monitors", "=", "train_hooks", ")", "\n", "\n", "return", "experiment", "\n", "\n", "\n", "", "def", "main", "(", "_argv", ")", ":", "\n", "  ", "\"\"\"The entrypoint for the script\"\"\"", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer._eval_model": [[224, 255], ["collections.defaultdict", "model.eval", "model.train", "logger.info", "wandb.log", "torch.no_grad", "model", "len", "ret_dic[].item", "len", "collections.defaultdict.items", "collections.defaultdict.items"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.train", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.gtrie.Trie.items"], ["# Parse YAML FLAGS", "\n", "FLAGS", ".", "hooks", "=", "_maybe_load_yaml", "(", "FLAGS", ".", "hooks", ")", "\n", "FLAGS", ".", "metrics", "=", "_maybe_load_yaml", "(", "FLAGS", ".", "metrics", ")", "\n", "FLAGS", ".", "model_params", "=", "_maybe_load_yaml", "(", "FLAGS", ".", "model_params", ")", "\n", "FLAGS", ".", "input_pipeline_train", "=", "_maybe_load_yaml", "(", "FLAGS", ".", "input_pipeline_train", ")", "\n", "FLAGS", ".", "input_pipeline_dev", "=", "_maybe_load_yaml", "(", "FLAGS", ".", "input_pipeline_dev", ")", "\n", "\n", "# Load flags from config file", "\n", "final_config", "=", "{", "}", "\n", "if", "FLAGS", ".", "config_paths", ":", "\n", "    ", "for", "config_path", "in", "FLAGS", ".", "config_paths", ".", "split", "(", "\",\"", ")", ":", "\n", "      ", "config_path", "=", "config_path", ".", "strip", "(", ")", "\n", "if", "not", "config_path", ":", "\n", "        ", "continue", "\n", "", "config_path", "=", "os", ".", "path", ".", "abspath", "(", "config_path", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Loading config from %s\"", ",", "config_path", ")", "\n", "with", "gfile", ".", "GFile", "(", "config_path", ".", "strip", "(", ")", ")", "as", "config_file", ":", "\n", "        ", "config_flags", "=", "yaml", ".", "load", "(", "config_file", ")", "\n", "final_config", "=", "_deep_merge_dict", "(", "final_config", ",", "config_flags", ")", "\n", "\n", "", "", "", "tf", ".", "logging", ".", "info", "(", "\"Final Config:\\n%s\"", ",", "yaml", ".", "dump", "(", "final_config", ")", ")", "\n", "\n", "# Merge flags with config values", "\n", "for", "flag_key", ",", "flag_value", "in", "final_config", ".", "items", "(", ")", ":", "\n", "    ", "if", "hasattr", "(", "FLAGS", ",", "flag_key", ")", "and", "isinstance", "(", "getattr", "(", "FLAGS", ",", "flag_key", ")", ",", "dict", ")", ":", "\n", "      ", "merged_value", "=", "_deep_merge_dict", "(", "flag_value", ",", "getattr", "(", "FLAGS", ",", "flag_key", ")", ")", "\n", "setattr", "(", "FLAGS", ",", "flag_key", ",", "merged_value", ")", "\n", "", "elif", "hasattr", "(", "FLAGS", ",", "flag_key", ")", ":", "\n", "      ", "setattr", "(", "FLAGS", ",", "flag_key", ",", "flag_value", ")", "\n", "", "else", ":", "\n", "      ", "tf", ".", "logging", ".", "warning", "(", "\"Ignoring config flag: %s\"", ",", "flag_key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.add_parser": [[258, 265], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.parse_args"], ["    ", "FLAGS", ".", "save_checkpoints_secs", "=", "600", "\n", "tf", ".", "logging", ".", "info", "(", "\"Setting save_checkpoints_secs to %d\"", ",", "\n", "FLAGS", ".", "save_checkpoints_secs", ")", "\n", "\n", "", "if", "not", "FLAGS", ".", "output_dir", ":", "\n", "    ", "FLAGS", ".", "output_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "", "if", "not", "FLAGS", ".", "input_pipeline_train", ":", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.setup": [[267, 307], ["os.path.join", "os.makedirs", "logging.getLogger", "logging.getLogger.setLevel", "logging.FileHandler", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.info", "wandb.config.update", "json.loads", "json.loads", "os.path.join", "os.path.dirname", "open", "json.dump", "_jsonnet.evaluate_file", "_jsonnet.evaluate_file", "os.path.join", "datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.training.utils.TrainOptions.dump", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join"], ["\n", "", "if", "not", "FLAGS", ".", "input_pipeline_dev", ":", "\n", "    ", "raise", "ValueError", "(", "\"You must specify input_pipeline_dev\"", ")", "\n", "\n", "", "learn_runner", ".", "run", "(", "\n", "experiment_fn", "=", "create_experiment", ",", "\n", "output_dir", "=", "FLAGS", ".", "output_dir", ",", "\n", "schedule", "=", "FLAGS", ".", "schedule", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "  ", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "tf", ".", "app", ".", "run", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.main": [[309, 316], ["train.setup", "train.Trainer", "Trainer.train"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.setup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.train.Trainer.train"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.batched_infer.BatchedInferer.infer": [[27, 50], ["open", "args.method.startswith", "tensor2struct.utils.registry.lookup", "torch.no_grad", "tensor2struct.utils.registry.construct", "batched_infer.BatchedInferer.model_preproc.dataset", "batched_infer.chunks", "batched_infer.chunks", "tqdm.tqdm", "batched_infer.BatchedInferer._inner_infer", "tqdm.tqdm.close", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.dataset", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.batched_infer.chunks", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.batched_infer.chunks", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.Inferer._inner_infer", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.close"], ["    ", "def", "infer", "(", "self", ",", "model", ",", "output_path", ",", "args", ")", ":", "\n", "        ", "output", "=", "open", "(", "output_path", ",", "\"w\"", ")", "\n", "chunk_size", "=", "128", "# this is manually set, TODO add it to config", "\n", "\n", "assert", "args", ".", "method", ".", "startswith", "(", "\"batched\"", ")", "\n", "infer_func", "=", "registry", ".", "lookup", "(", "\"infer_method\"", ",", "args", ".", "method", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "orig_data", "=", "registry", ".", "construct", "(", "\"dataset\"", ",", "self", ".", "config", "[", "\"data\"", "]", "[", "args", ".", "section", "]", ")", "\n", "preproc_data", "=", "self", ".", "model_preproc", ".", "dataset", "(", "args", ".", "section", ")", "\n", "assert", "len", "(", "orig_data", ")", "==", "len", "(", "preproc_data", ")", "\n", "chunked_orig_data", "=", "chunks", "(", "orig_data", ",", "chunk_size", ")", "\n", "chunked_preproc_data", "=", "chunks", "(", "preproc_data", ",", "chunk_size", ")", "\n", "pbar", "=", "tqdm", ".", "tqdm", "(", "total", "=", "len", "(", "preproc_data", ")", ")", "\n", "self", ".", "_inner_infer", "(", "\n", "model", ",", "\n", "infer_func", ",", "\n", "args", ".", "beam_size", ",", "\n", "chunked_orig_data", ",", "\n", "chunked_preproc_data", ",", "\n", "output", ",", "\n", "pbar", ",", "\n", ")", "\n", "pbar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.batched_infer.BatchedInferer._inner_infer": [[51, 81], ["zip", "infer_func", "decoded.append", "output.write", "output.flush", "pbar.update", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update"], ["", "", "def", "_inner_infer", "(", "\n", "self", ",", "\n", "model", ",", "\n", "infer_func", ",", "\n", "beam_size", ",", "\n", "chunked_orig_data", ",", "\n", "chunked_preproc_data", ",", "\n", "output", ",", "\n", "pbar", ",", "\n", ")", ":", "\n", "        ", "i", "=", "0", "\n", "for", "orig_data", ",", "preproc_data", "in", "zip", "(", "chunked_orig_data", ",", "chunked_preproc_data", ")", ":", "\n", "            ", "code_list", "=", "infer_func", "(", "\n", "model", ",", "orig_data", ",", "preproc_data", ",", "beam_size", "=", "beam_size", ",", "max_steps", "=", "256", "\n", ")", "\n", "\n", "for", "inferred_code", "in", "code_list", ":", "\n", "                ", "decoded", "=", "[", "]", "\n", "decoded", ".", "append", "(", "\n", "{", "\n", "# \"model_output\": model_output,", "\n", "\"inferred_code\"", ":", "inferred_code", ",", "\n", "# \"score\": score,", "\n", "}", "\n", ")", "\n", "\n", "output", ".", "write", "(", "json", ".", "dumps", "(", "{", "\"index\"", ":", "i", ",", "\"beams\"", ":", "decoded", "}", ")", "+", "\"\\n\"", ")", "\n", "output", ".", "flush", "(", ")", "\n", "i", "+=", "1", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.batched_infer.chunks": [[20, 24], ["range", "len"], "function", ["None"], ["def", "chunks", "(", "lst", ",", "n", ")", ":", "\n", "    ", "\"\"\"Yield successive n-sized chunks from lst.\"\"\"", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "lst", ")", ",", "n", ")", ":", "\n", "        ", "yield", "lst", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.batched_infer.main": [[83, 88], ["tensor2struct.commands.infer.setup", "batched_infer.BatchedInferer", "BatchedInferer.load_model", "batched_infer.BatchedInferer.infer"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.setup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.Inferer.load_model", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.Inferer.infer"], ["", "", "", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "config", ",", "output_path", "=", "infer", ".", "setup", "(", "args", ")", "\n", "inferer", "=", "BatchedInferer", "(", "config", ")", "\n", "model", "=", "inferer", ".", "load_model", "(", "args", ".", "logdir", ",", "args", ".", "step", ")", "\n", "inferer", ".", "infer", "(", "model", ",", "output_path", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.Inferer.__init__": [[23, 38], ["torch.cuda.is_available", "tensor2struct.utils.registry.instantiate", "infer.Inferer.model_preproc.load", "torch.device", "torch.device", "torch.set_num_threads", "tensor2struct.utils.registry.lookup"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.instantiate", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.load", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup"], ["\n", "from", "pydoc", "import", "locate", "\n", "\n", "import", "yaml", "\n", "from", "six", "import", "string_types", "\n", "\n", "import", "tensorflow", "as", "tf", "\n", "from", "tensorflow", "import", "gfile", "\n", "\n", "from", "seq2seq", "import", "tasks", ",", "models", "\n", "from", "seq2seq", ".", "configurable", "import", "_maybe_load_yaml", ",", "_deep_merge_dict", "\n", "from", "seq2seq", ".", "data", "import", "input_pipeline", "\n", "from", "seq2seq", ".", "inference", "import", "create_inference_graph", "\n", "from", "seq2seq", ".", "training", "import", "utils", "as", "training_utils", "\n", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"tasks\"", ",", "\"{}\"", ",", "\"List of inference tasks to run.\"", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.Inferer.load_model": [[39, 62], ["tensor2struct.utils.registry.construct", "tensor2struct.utils.registry.construct.to", "tensor2struct.utils.registry.construct.eval", "tensor2struct.utils.saver.Saver", "tensor2struct.utils.saver.Saver.restore", "infer.CheckpointNotFoundError"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.modules.embedders.BaiduEmbedder.to", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.saver.Saver.restore"], ["tf", ".", "flags", ".", "DEFINE_string", "(", "\"model_params\"", ",", "\"{}\"", ",", "\"\"\"Optionally overwrite model\n                        parameters for inference\"\"\"", ")", "\n", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"config_path\"", ",", "None", ",", "\n", "\"\"\"Path to a YAML configuration file defining FLAG\n                       values and hyperparameters. Refer to the documentation\n                       for more details.\"\"\"", ")", "\n", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"input_pipeline\"", ",", "None", ",", "\n", "\"\"\"Defines how input data should be loaded.\n                       A YAML string.\"\"\"", ")", "\n", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"model_dir\"", ",", "None", ",", "\"directory to load model from\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_string", "(", "\"checkpoint_path\"", ",", "None", ",", "\n", "\"\"\"Full path to the checkpoint to be loaded. If None,\n                       the latest checkpoint in the model dir is used.\"\"\"", ")", "\n", "tf", ".", "flags", ".", "DEFINE_integer", "(", "\"batch_size\"", ",", "32", ",", "\"the train/dev batch size\"", ")", "\n", "\n", "FLAGS", "=", "tf", ".", "flags", ".", "FLAGS", "\n", "\n", "def", "main", "(", "_argv", ")", ":", "\n", "  ", "\"\"\"Program entry point.\n  \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.Inferer.infer": [[63, 88], ["open", "tensor2struct.utils.registry.lookup", "torch.no_grad", "tensor2struct.utils.registry.construct", "infer.Inferer.model_preproc.dataset", "infer.Inferer._inner_infer", "itertools.islice", "itertools.islice", "len", "len"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.dataset", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.Inferer._inner_infer"], ["# Load flags from config file", "\n", "if", "FLAGS", ".", "config_path", ":", "\n", "    ", "with", "gfile", ".", "GFile", "(", "FLAGS", ".", "config_path", ")", "as", "config_file", ":", "\n", "      ", "config_flags", "=", "yaml", ".", "load", "(", "config_file", ")", "\n", "for", "flag_key", ",", "flag_value", "in", "config_flags", ".", "items", "(", ")", ":", "\n", "        ", "setattr", "(", "FLAGS", ",", "flag_key", ",", "flag_value", ")", "\n", "\n", "", "", "", "if", "isinstance", "(", "FLAGS", ".", "tasks", ",", "string_types", ")", ":", "\n", "    ", "FLAGS", ".", "tasks", "=", "_maybe_load_yaml", "(", "FLAGS", ".", "tasks", ")", "\n", "\n", "", "if", "isinstance", "(", "FLAGS", ".", "input_pipeline", ",", "string_types", ")", ":", "\n", "    ", "FLAGS", ".", "input_pipeline", "=", "_maybe_load_yaml", "(", "FLAGS", ".", "input_pipeline", ")", "\n", "\n", "", "input_pipeline_infer", "=", "input_pipeline", ".", "make_input_pipeline_from_def", "(", "\n", "FLAGS", ".", "input_pipeline", ",", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "INFER", ",", "\n", "shuffle", "=", "False", ",", "num_epochs", "=", "1", ")", "\n", "\n", "# Load saved training options", "\n", "train_options", "=", "training_utils", ".", "TrainOptions", ".", "load", "(", "FLAGS", ".", "model_dir", ")", "\n", "\n", "# Create the model", "\n", "model_cls", "=", "locate", "(", "train_options", ".", "model_class", ")", "or", "getattr", "(", "models", ",", "train_options", ".", "model_class", ")", "\n", "model_params", "=", "train_options", ".", "model_params", "\n", "model_params", "=", "_deep_merge_dict", "(", "\n", "model_params", ",", "_maybe_load_yaml", "(", "FLAGS", ".", "model_params", ")", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.Inferer._inner_infer": [[90, 147], ["enumerate", "tqdm.tqdm", "infer_func", "output.flush", "zip", "beam.inference_state.finalize", "decoded.append", "output.write", "output.write", "len", "json.dumps", "json.dumps", "attr.asdict"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.infer_tree_traversal.InferenceTreeTraversal.finalize", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.indexed_file.IndexedFileWriter.append"], ["params", "=", "model_params", ",", "\n", "mode", "=", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "INFER", ")", "\n", "\n", "# Load inference tasks", "\n", "hooks", "=", "[", "]", "\n", "for", "tdict", "in", "FLAGS", ".", "tasks", ":", "\n", "    ", "if", "not", "\"params\"", "in", "tdict", ":", "\n", "      ", "tdict", "[", "\"params\"", "]", "=", "{", "}", "\n", "", "task_cls", "=", "locate", "(", "tdict", "[", "\"class\"", "]", ")", "or", "getattr", "(", "tasks", ",", "tdict", "[", "\"class\"", "]", ")", "\n", "task", "=", "task_cls", "(", "tdict", "[", "\"params\"", "]", ")", "\n", "hooks", ".", "append", "(", "task", ")", "\n", "\n", "# Create the graph used for inference", "\n", "", "predictions", ",", "_", ",", "_", "=", "create_inference_graph", "(", "\n", "model", "=", "model", ",", "\n", "input_pipeline", "=", "input_pipeline_infer", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ")", "\n", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "checkpoint_path", "=", "FLAGS", ".", "checkpoint_path", "\n", "if", "not", "checkpoint_path", ":", "\n", "    ", "checkpoint_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "FLAGS", ".", "model_dir", ")", "\n", "\n", "", "def", "session_init_op", "(", "_scaffold", ",", "sess", ")", ":", "\n", "    ", "saver", ".", "restore", "(", "sess", ",", "checkpoint_path", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Restored model from %s\"", ",", "checkpoint_path", ")", "\n", "\n", "", "scaffold", "=", "tf", ".", "train", ".", "Scaffold", "(", "init_fn", "=", "session_init_op", ")", "\n", "session_creator", "=", "tf", ".", "train", ".", "ChiefSessionCreator", "(", "scaffold", "=", "scaffold", ")", "\n", "with", "tf", ".", "train", ".", "MonitoredSession", "(", "\n", "session_creator", "=", "session_creator", ",", "\n", "hooks", "=", "hooks", ")", "as", "sess", ":", "\n", "\n", "# Run until the inputs are exhausted", "\n", "    ", "while", "not", "sess", ".", "should_stop", "(", ")", ":", "\n", "      ", "sess", ".", "run", "(", "[", "]", ")", "\n", "\n", "", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "  ", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "tf", ".", "app", ".", "run", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.add_parser": [[149, 166], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.parse_args"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.setup": [[168, 187], ["args.output.replace", "os.path.dirname", "os.path.exists", "json.loads", "json.loads", "os.path.join", "os.path.exists", "os.mkdir", "print", "_jsonnet.evaluate_file", "_jsonnet.evaluate_file"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.exists", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.tree_kernels.Cache.exists"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.main": [[189, 194], ["infer.setup", "infer.Inferer", "infer.Inferer.load_model", "Inferer.infer"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.setup", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.Inferer.load_model", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.infer.Inferer.infer"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.__init__": [[12, 16], ["tensor2struct.utils.registry.instantiate", "tensor2struct.utils.registry.lookup"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.instantiate", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.lookup"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "model_preproc", "=", "registry", ".", "instantiate", "(", "\n", "registry", ".", "lookup", "(", "\"model\"", ",", "config", "[", "\"model\"", "]", ")", ".", "Preproc", ",", "config", "[", "\"model\"", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.preprocess": [[18, 29], ["preprocess.Preprocessor.model_preproc.clear_items", "preprocess.Preprocessor.model_preproc.save", "tensor2struct.utils.registry.construct", "tqdm.tqdm", "preprocess.Preprocessor.model_preproc.validate_item", "preprocess.Preprocessor.model_preproc.add_item"], "methods", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.clear_items", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.save", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.utils.registry.construct", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast_decoder.decoder.NL2CodeDecoderPreproc.validate_item", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.scan.scan_enc.ScanEncPreproc.add_item"], ["", "def", "preprocess", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_preproc", ".", "clear_items", "(", ")", "\n", "for", "section", "in", "self", ".", "config", "[", "\"data\"", "]", ":", "\n", "            ", "data", "=", "registry", ".", "construct", "(", "\"dataset\"", ",", "self", ".", "config", "[", "\"data\"", "]", "[", "section", "]", ")", "\n", "for", "item", "in", "tqdm", ".", "tqdm", "(", "data", ",", "desc", "=", "section", ",", "dynamic_ncols", "=", "True", ")", ":", "\n", "                ", "to_add", ",", "validation_info", "=", "self", ".", "model_preproc", ".", "validate_item", "(", "\n", "item", ",", "section", "\n", ")", "\n", "if", "to_add", ":", "\n", "                    ", "self", ".", "model_preproc", ".", "add_item", "(", "item", ",", "section", ",", "validation_info", ")", "\n", "", "", "", "self", ".", "model_preproc", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.add_parser": [[31, 37], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.parse_args"], ["", "", "def", "add_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--config\"", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--config-args\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.main": [[39, 49], ["preprocess.Preprocessor", "Preprocessor.preprocess", "json.loads", "json.loads", "_jsonnet.evaluate_file", "_jsonnet.evaluate_file"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.preprocess.Preprocessor.preprocess"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "config_args", ":", "\n", "        ", "config", "=", "json", ".", "loads", "(", "\n", "_jsonnet", ".", "evaluate_file", "(", "args", ".", "config", ",", "tla_codes", "=", "{", "\"args\"", ":", "args", ".", "config_args", "}", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "config", "=", "json", ".", "loads", "(", "_jsonnet", ".", "evaluate_file", "(", "args", ".", "config", ")", ")", "\n", "\n", "", "preprocessor", "=", "Preprocessor", "(", "config", ")", "\n", "preprocessor", ".", "preprocess", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.parse_args": [[70, 81], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.parse_args"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.load_args": [[83, 100], ["json.dumps", "json.loads", "json.loads", "_jsonnet.evaluate_file", "_jsonnet.evaluate_file"], "function", ["None"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.eval_and_report": [[102, 215], ["collections.defaultdict", "print", "run.EvalConfig", "wandb.config.update", "str", "run.InferConfig", "tensor2struct.commands.eval.main", "wandb.config.update", "print", "wandb.log", "wandb.log", "wandb.log", "print", "infer_mod.main", "print", "print", "str", "str"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.main", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.overnight.overnight_dec.InferLF.update", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.main"], []], "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.main": [[217, 254], ["run.parse_args", "run.load_args", "os.environ.get", "print", "os.path.join", "wandb.init", "run.PreprocessConfig", "tensor2struct.commands.preprocess.main", "exp_config[].split", "run.TrainConfig", "tensor2struct.commands.train.main", "run.MetaTrainConfig", "tensor2struct.commands.meta_train.main", "os.getcwd", "run.eval_and_report", "run.eval_and_report"], "function", ["home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.parse_args", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.load_args", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.nn.optimizers.get", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.ast.spider.join", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.main", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.main", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.main", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.eval_and_report", "home.repos.pwc.inspect_result.berlino_tensor2struct-public.commands.run.eval_and_report"], []]}