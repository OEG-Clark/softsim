{"home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.models.Embedding.__init__": [[7, 14], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.utils.DataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_ent", ",", "parameter", ")", ":", "\n", "        ", "super", "(", "Embedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "parameter", "[", "'device'", "]", "\n", "self", ".", "es", "=", "parameter", "[", "'embed_dim'", "]", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "num_ent", "+", "1", ",", "self", ".", "es", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "embedding", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.models.Embedding.forward": [[16, 20], ["torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "models.Embedding.embedding", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "triples", ")", ":", "\n", "        ", "idx", "=", "[", "[", "[", "t", "[", "0", "]", ",", "t", "[", "2", "]", "]", "for", "t", "in", "batch", "]", "for", "batch", "in", "triples", "]", "\n", "idx", "=", "torch", ".", "LongTensor", "(", "idx", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "self", ".", "embedding", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.models.MetaLearner.__init__": [[22, 46], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.utils.DataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "K", ",", "embed_size", "=", "100", ",", "num_hidden1", "=", "500", ",", "num_hidden2", "=", "200", ",", "out_size", "=", "100", ",", "dropout_p", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "MetaLearner", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_size", "=", "embed_size", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "out_size", "=", "out_size", "\n", "self", ".", "rel_fc1", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'fc'", ",", "nn", ".", "Linear", "(", "2", "*", "embed_size", ",", "num_hidden1", ")", ")", ",", "\n", "(", "'bn'", ",", "nn", ".", "BatchNorm1d", "(", "K", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "LeakyReLU", "(", ")", ")", ",", "\n", "(", "'drop'", ",", "nn", ".", "Dropout", "(", "p", "=", "dropout_p", ")", ")", ",", "\n", "]", ")", ")", "\n", "self", ".", "rel_fc2", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'fc'", ",", "nn", ".", "Linear", "(", "num_hidden1", ",", "num_hidden2", ")", ")", ",", "\n", "(", "'bn'", ",", "nn", ".", "BatchNorm1d", "(", "K", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "LeakyReLU", "(", ")", ")", ",", "\n", "(", "'drop'", ",", "nn", ".", "Dropout", "(", "p", "=", "dropout_p", ")", ")", ",", "\n", "]", ")", ")", "\n", "self", ".", "rel_fc3", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'fc'", ",", "nn", ".", "Linear", "(", "num_hidden2", ",", "out_size", ")", ")", ",", "\n", "(", "'bn'", ",", "nn", ".", "BatchNorm1d", "(", "K", ")", ")", ",", "\n", "]", ")", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "rel_fc1", ".", "fc", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "rel_fc2", ".", "fc", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "rel_fc3", ".", "fc", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.models.MetaLearner.forward": [[47, 56], ["inputs.contiguous().view", "models.MetaLearner.rel_fc1", "models.MetaLearner.rel_fc2", "models.MetaLearner.rel_fc3", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean.view", "torch.mean.view", "inputs.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "size", "=", "inputs", ".", "shape", "\n", "x", "=", "inputs", ".", "contiguous", "(", ")", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "rel_fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "rel_fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "rel_fc3", "(", "x", ")", "\n", "x", "=", "torch", ".", "mean", "(", "x", ",", "1", ")", "\n", "\n", "return", "x", ".", "view", "(", "size", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "out_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.models.EmbeddingLearner.__init__": [[59, 61], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.utils.DataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "EmbeddingLearner", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.models.EmbeddingLearner.forward": [[62, 67], ["torch.norm().squeeze", "torch.norm().squeeze", "torch.norm().squeeze", "torch.norm().squeeze", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ",", "t", ",", "r", ",", "pos_num", ")", ":", "\n", "        ", "score", "=", "-", "torch", ".", "norm", "(", "h", "+", "r", "-", "t", ",", "2", ",", "-", "1", ")", ".", "squeeze", "(", "2", ")", "\n", "p_score", "=", "score", "[", ":", ",", ":", "pos_num", "]", "\n", "n_score", "=", "score", "[", ":", ",", "pos_num", ":", "]", "\n", "return", "p_score", ",", "n_score", "\n", "\n"]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.models.MetaTL.__init__": [[70, 85], ["torch.Module.__init__", "models.Embedding", "models.MetaLearner", "models.EmbeddingLearner", "torch.MarginRankingLoss", "torch.MarginRankingLoss", "dict"], "methods", ["home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.utils.DataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "itemnum", ",", "parameter", ")", ":", "\n", "        ", "super", "(", "MetaTL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "parameter", "[", "'device'", "]", "\n", "self", ".", "beta", "=", "parameter", "[", "'beta'", "]", "\n", "self", ".", "dropout_p", "=", "parameter", "[", "'dropout_p'", "]", "\n", "self", ".", "embed_dim", "=", "parameter", "[", "'embed_dim'", "]", "\n", "self", ".", "margin", "=", "parameter", "[", "'margin'", "]", "\n", "self", ".", "embedding", "=", "Embedding", "(", "itemnum", ",", "parameter", ")", "\n", "\n", "self", ".", "relation_learner", "=", "MetaLearner", "(", "parameter", "[", "'K'", "]", "-", "1", ",", "embed_size", "=", "100", ",", "num_hidden1", "=", "500", ",", "\n", "num_hidden2", "=", "200", ",", "out_size", "=", "100", ",", "dropout_p", "=", "self", ".", "dropout_p", ")", "\n", "\n", "self", ".", "embedding_learner", "=", "EmbeddingLearner", "(", ")", "\n", "self", ".", "loss_func", "=", "nn", ".", "MarginRankingLoss", "(", "self", ".", "margin", ")", "\n", "self", ".", "rel_q_sharing", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.models.MetaTL.split_concat": [[86, 92], ["torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "split_concat", "(", "self", ",", "positive", ",", "negative", ")", ":", "\n", "        ", "pos_neg_e1", "=", "torch", ".", "cat", "(", "[", "positive", "[", ":", ",", ":", ",", "0", ",", ":", "]", ",", "\n", "negative", "[", ":", ",", ":", ",", "0", ",", ":", "]", "]", ",", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "pos_neg_e2", "=", "torch", ".", "cat", "(", "[", "positive", "[", ":", ",", ":", ",", "1", ",", ":", "]", ",", "\n", "negative", "[", ":", ",", ":", ",", "1", ",", ":", "]", "]", ",", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "return", "pos_neg_e1", ",", "pos_neg_e2", "\n", "\n"]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.models.MetaTL.forward": [[93, 131], ["models.MetaTL.relation_learner", "models.MetaTL.retain_grad", "models.MetaTL.expand", "rel_q.expand.expand.expand", "models.MetaTL.split_concat", "models.MetaTL.embedding_learner", "models.MetaTL.embedding", "models.MetaTL.split_concat", "models.MetaTL.embedding_learner", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "models.MetaTL.zero_grad", "models.MetaTL.loss_func", "models.MetaTL.backward", "models.MetaTL.rel_q_sharing.keys", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.models.MetaTL.split_concat", "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.models.MetaTL.split_concat"], ["", "def", "forward", "(", "self", ",", "task", ",", "iseval", "=", "False", ",", "curr_rel", "=", "''", ")", ":", "\n", "# transfer task string into embedding", "\n", "        ", "support", ",", "support_negative", ",", "query", ",", "negative", "=", "[", "self", ".", "embedding", "(", "t", ")", "for", "t", "in", "task", "]", "\n", "\n", "K", "=", "support", ".", "shape", "[", "1", "]", "# num of K", "\n", "num_sn", "=", "support_negative", ".", "shape", "[", "1", "]", "# num of support negative", "\n", "num_q", "=", "query", ".", "shape", "[", "1", "]", "# num of query", "\n", "num_n", "=", "negative", ".", "shape", "[", "1", "]", "# num of query negative", "\n", "\n", "rel", "=", "self", ".", "relation_learner", "(", "support", ")", "\n", "rel", ".", "retain_grad", "(", ")", "\n", "\n", "rel_s", "=", "rel", ".", "expand", "(", "-", "1", ",", "K", "+", "num_sn", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "if", "iseval", "and", "curr_rel", "!=", "''", "and", "curr_rel", "in", "self", ".", "rel_q_sharing", ".", "keys", "(", ")", ":", "\n", "            ", "rel_q", "=", "self", ".", "rel_q_sharing", "[", "curr_rel", "]", "\n", "", "else", ":", "\n", "            ", "sup_neg_e1", ",", "sup_neg_e2", "=", "self", ".", "split_concat", "(", "support", ",", "support_negative", ")", "\n", "\n", "p_score", ",", "n_score", "=", "self", ".", "embedding_learner", "(", "sup_neg_e1", ",", "sup_neg_e2", ",", "rel_s", ",", "K", ")", "\n", "\n", "y", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "zero_grad", "(", ")", "\n", "loss", "=", "self", ".", "loss_func", "(", "p_score", ",", "n_score", ",", "y", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "\n", "grad_meta", "=", "rel", ".", "grad", "\n", "rel_q", "=", "rel", "-", "self", ".", "beta", "*", "grad_meta", "\n", "\n", "\n", "self", ".", "rel_q_sharing", "[", "curr_rel", "]", "=", "rel_q", "\n", "\n", "", "rel_q", "=", "rel_q", ".", "expand", "(", "-", "1", ",", "num_q", "+", "num_n", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "que_neg_e1", ",", "que_neg_e2", "=", "self", ".", "split_concat", "(", "query", ",", "negative", ")", "\n", "p_score", ",", "n_score", "=", "self", ".", "embedding_learner", "(", "que_neg_e1", ",", "que_neg_e2", ",", "rel_q", ",", "num_q", ")", "\n", "\n", "return", "p_score", ",", "n_score", "", "", "", ""]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.main.get_params": [[9, 38], ["argparse.ArgumentParser", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.parse_args", "vars().items", "torch.device", "vars", "str"], "function", ["None"], ["def", "get_params", "(", ")", ":", "\n", "    ", "args", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "args", ".", "add_argument", "(", "\"-data\"", ",", "\"--dataset\"", ",", "default", "=", "\"electronics\"", ",", "type", "=", "str", ")", "\n", "args", ".", "add_argument", "(", "\"-seed\"", ",", "\"--seed\"", ",", "default", "=", "None", ",", "type", "=", "int", ")", "\n", "args", ".", "add_argument", "(", "\"-K\"", ",", "\"--K\"", ",", "default", "=", "3", ",", "type", "=", "int", ")", "#NUMBER OF SHOT", "\n", "\n", "args", ".", "add_argument", "(", "\"-dim\"", ",", "\"--embed_dim\"", ",", "default", "=", "100", ",", "type", "=", "int", ")", "\n", "args", ".", "add_argument", "(", "\"-bs\"", ",", "\"--batch_size\"", ",", "default", "=", "1024", ",", "type", "=", "int", ")", "\n", "args", ".", "add_argument", "(", "\"-lr\"", ",", "\"--learning_rate\"", ",", "default", "=", "0.001", ",", "type", "=", "float", ")", "\n", "\n", "args", ".", "add_argument", "(", "\"-epo\"", ",", "\"--epoch\"", ",", "default", "=", "100000", ",", "type", "=", "int", ")", "\n", "args", ".", "add_argument", "(", "\"-prt_epo\"", ",", "\"--print_epoch\"", ",", "default", "=", "100", ",", "type", "=", "int", ")", "\n", "args", ".", "add_argument", "(", "\"-eval_epo\"", ",", "\"--eval_epoch\"", ",", "default", "=", "1000", ",", "type", "=", "int", ")", "\n", "\n", "args", ".", "add_argument", "(", "\"-b\"", ",", "\"--beta\"", ",", "default", "=", "5", ",", "type", "=", "float", ")", "\n", "args", ".", "add_argument", "(", "\"-m\"", ",", "\"--margin\"", ",", "default", "=", "1", ",", "type", "=", "float", ")", "\n", "args", ".", "add_argument", "(", "\"-p\"", ",", "\"--dropout_p\"", ",", "default", "=", "0.5", ",", "type", "=", "float", ")", "\n", "\n", "args", ".", "add_argument", "(", "\"-gpu\"", ",", "\"--device\"", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "\n", "\n", "args", "=", "args", ".", "parse_args", "(", ")", "\n", "params", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "        ", "params", "[", "k", "]", "=", "v", "\n", "\n", "", "params", "[", "'device'", "]", "=", "torch", ".", "device", "(", "'cuda:'", "+", "str", "(", "args", ".", "device", ")", ")", "\n", "\n", "return", "params", ",", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.trainer.Trainer.__init__": [[11, 29], ["models.MetaTL", "trainer.Trainer.MetaTL.to", "torch.optim.Adam", "trainer.Trainer.MetaTL.parameters"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_loaders", ",", "itemnum", ",", "parameter", ")", ":", "\n", "        ", "self", ".", "parameter", "=", "parameter", "\n", "# data loader", "\n", "self", ".", "train_data_loader", "=", "data_loaders", "[", "0", "]", "\n", "self", ".", "dev_data_loader", "=", "data_loaders", "[", "1", "]", "\n", "self", ".", "test_data_loader", "=", "data_loaders", "[", "2", "]", "\n", "# parameters", "\n", "self", ".", "batch_size", "=", "parameter", "[", "'batch_size'", "]", "\n", "self", ".", "learning_rate", "=", "parameter", "[", "'learning_rate'", "]", "\n", "self", ".", "epoch", "=", "parameter", "[", "'epoch'", "]", "\n", "self", ".", "print_epoch", "=", "parameter", "[", "'print_epoch'", "]", "\n", "self", ".", "eval_epoch", "=", "parameter", "[", "'eval_epoch'", "]", "\n", "self", ".", "device", "=", "parameter", "[", "'device'", "]", "\n", "\n", "self", ".", "MetaTL", "=", "MetaTL", "(", "itemnum", ",", "parameter", ")", "\n", "self", ".", "MetaTL", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "MetaTL", ".", "parameters", "(", ")", ",", "self", ".", "learning_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.trainer.Trainer.rank_predict": [[31, 49], ["torch.sort", "ranks.append", "list().index", "numpy.log2", "numpy.log2", "numpy.log2", "list", "idx.cpu().numpy", "idx.cpu"], "methods", ["None"], ["", "def", "rank_predict", "(", "self", ",", "data", ",", "x", ",", "ranks", ")", ":", "\n", "# query_idx is the idx of positive score", "\n", "        ", "query_idx", "=", "x", ".", "shape", "[", "0", "]", "-", "1", "\n", "# sort all scores with descending, because more plausible triple has higher score", "\n", "_", ",", "idx", "=", "torch", ".", "sort", "(", "x", ",", "descending", "=", "True", ")", "\n", "rank", "=", "list", "(", "idx", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ".", "index", "(", "query_idx", ")", "+", "1", "\n", "ranks", ".", "append", "(", "rank", ")", "\n", "# update data", "\n", "if", "rank", "<=", "10", ":", "\n", "            ", "data", "[", "'Hits@10'", "]", "+=", "1", "\n", "data", "[", "'NDCG@10'", "]", "+=", "1", "/", "np", ".", "log2", "(", "rank", "+", "1", ")", "\n", "", "if", "rank", "<=", "5", ":", "\n", "            ", "data", "[", "'Hits@5'", "]", "+=", "1", "\n", "data", "[", "'NDCG@5'", "]", "+=", "1", "/", "np", ".", "log2", "(", "rank", "+", "1", ")", "\n", "", "if", "rank", "==", "1", ":", "\n", "            ", "data", "[", "'Hits@1'", "]", "+=", "1", "\n", "data", "[", "'NDCG@1'", "]", "+=", "1", "/", "np", ".", "log2", "(", "rank", "+", "1", ")", "\n", "", "data", "[", "'MRR'", "]", "+=", "1.0", "/", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.trainer.Trainer.do_one_step": [[50, 64], ["trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.MetaTL", "torch.Tensor().to", "trainer.Trainer.MetaTL.loss_func", "trainer.Trainer.backward", "trainer.Trainer.optimizer.step", "trainer.Trainer.MetaTL", "torch.Tensor().to", "trainer.Trainer.MetaTL.loss_func", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "do_one_step", "(", "self", ",", "task", ",", "iseval", "=", "False", ",", "curr_rel", "=", "''", ")", ":", "\n", "        ", "loss", ",", "p_score", ",", "n_score", "=", "0", ",", "0", ",", "0", "\n", "if", "not", "iseval", ":", "\n", "            ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "p_score", ",", "n_score", "=", "self", ".", "MetaTL", "(", "task", ",", "iseval", ",", "curr_rel", ")", "\n", "y", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "loss", "=", "self", ".", "MetaTL", ".", "loss_func", "(", "p_score", ",", "n_score", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "elif", "curr_rel", "!=", "''", ":", "\n", "            ", "p_score", ",", "n_score", "=", "self", ".", "MetaTL", "(", "task", ",", "iseval", ",", "curr_rel", ")", "\n", "y", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "loss", "=", "self", ".", "MetaTL", ".", "loss_func", "(", "p_score", ",", "n_score", ",", "y", ")", "\n", "", "return", "loss", ",", "p_score", ",", "n_score", "\n", "\n"]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.trainer.Trainer.train": [[65, 89], ["range", "print", "trainer.Trainer.train_data_loader.next_batch", "trainer.Trainer.do_one_step", "loss.item", "print", "print", "trainer.Trainer.eval", "print", "trainer.Trainer.eval"], "methods", ["home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.sampler.WarpSampler.next_batch", "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.trainer.Trainer.do_one_step", "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.trainer.Trainer.eval", "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.trainer.Trainer.eval"], ["", "def", "train", "(", "self", ")", ":", "\n", "# initialization", "\n", "        ", "best_epoch", "=", "0", "\n", "best_value", "=", "0", "\n", "bad_counts", "=", "0", "\n", "\n", "# training by epoch", "\n", "for", "e", "in", "range", "(", "self", ".", "epoch", ")", ":", "\n", "# sample one batch from data_loader", "\n", "            ", "train_task", ",", "curr_rel", "=", "self", ".", "train_data_loader", ".", "next_batch", "(", ")", "\n", "loss", ",", "_", ",", "_", "=", "self", ".", "do_one_step", "(", "train_task", ",", "iseval", "=", "False", ",", "curr_rel", "=", "curr_rel", ")", "\n", "# print the loss on specific epoch", "\n", "if", "e", "%", "self", ".", "print_epoch", "==", "0", ":", "\n", "                ", "loss_num", "=", "loss", ".", "item", "(", ")", "\n", "print", "(", "\"Epoch: {}\\tLoss: {:.4f}\"", ".", "format", "(", "e", ",", "loss_num", ")", ")", "\n", "# do evaluation on specific epoch", "\n", "", "if", "e", "%", "self", ".", "eval_epoch", "==", "0", "and", "e", "!=", "0", ":", "\n", "                ", "print", "(", "'Epoch  {} Validating...'", ".", "format", "(", "e", ")", ")", "\n", "valid_data", "=", "self", ".", "eval", "(", "istest", "=", "False", ",", "epoch", "=", "e", ")", "\n", "\n", "print", "(", "'Epoch  {} Testing...'", ".", "format", "(", "e", ")", ")", "\n", "test_data", "=", "self", ".", "eval", "(", "istest", "=", "True", ",", "epoch", "=", "e", ")", "\n", "\n", "", "", "print", "(", "'Finish'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.trainer.Trainer.eval": [[90, 141], ["trainer.Trainer.MetaTL.eval", "dict", "dict", "data.keys", "data_loader.next_one_on_eval", "trainer.Trainer.do_one_step", "torch.cat().squeeze", "trainer.Trainer.rank_predict", "data.keys", "sys.stdout.write", "sys.stdout.flush", "round", "print", "print", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.trainer.Trainer.eval", "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.utils.DataLoader.next_one_on_eval", "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.trainer.Trainer.do_one_step", "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.trainer.Trainer.rank_predict"], ["", "def", "eval", "(", "self", ",", "istest", "=", "False", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "self", ".", "MetaTL", ".", "eval", "(", ")", "\n", "\n", "self", ".", "MetaTL", ".", "rel_q_sharing", "=", "dict", "(", ")", "\n", "\n", "if", "istest", ":", "\n", "            ", "data_loader", "=", "self", ".", "test_data_loader", "\n", "", "else", ":", "\n", "            ", "data_loader", "=", "self", ".", "dev_data_loader", "\n", "", "data_loader", ".", "curr_tri_idx", "=", "0", "\n", "\n", "# initial return data of validation", "\n", "data", "=", "{", "'MRR'", ":", "0", ",", "'Hits@1'", ":", "0", ",", "'Hits@5'", ":", "0", ",", "'Hits@10'", ":", "0", ",", "'NDCG@1'", ":", "0", ",", "'NDCG@5'", ":", "0", ",", "'NDCG@10'", ":", "0", "}", "\n", "ranks", "=", "[", "]", "\n", "\n", "t", "=", "0", "\n", "temp", "=", "dict", "(", ")", "\n", "while", "True", ":", "\n", "# sample all the eval tasks", "\n", "            ", "eval_task", ",", "curr_rel", "=", "data_loader", ".", "next_one_on_eval", "(", ")", "\n", "# at the end of sample tasks, a symbol 'EOT' will return", "\n", "if", "eval_task", "==", "'EOT'", ":", "\n", "                ", "break", "\n", "", "t", "+=", "1", "\n", "\n", "_", ",", "p_score", ",", "n_score", "=", "self", ".", "do_one_step", "(", "eval_task", ",", "iseval", "=", "True", ",", "curr_rel", "=", "curr_rel", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "n_score", ",", "p_score", "]", ",", "1", ")", ".", "squeeze", "(", ")", "\n", "\n", "self", ".", "rank_predict", "(", "data", ",", "x", ",", "ranks", ")", "\n", "\n", "# print current temp data dynamically", "\n", "for", "k", "in", "data", ".", "keys", "(", ")", ":", "\n", "                ", "temp", "[", "k", "]", "=", "data", "[", "k", "]", "/", "t", "\n", "", "sys", ".", "stdout", ".", "write", "(", "\"{}\\tMRR: {:.3f}\\tNDCG@10: {:.3f}\\tNDCG@5: {:.3f}\\tNDCG@1: {:.3f}\\tHits@10: {:.3f}\\tHits@5: {:.3f}\\tHits@1: {:.3f}\\r\"", ".", "format", "(", "\n", "t", ",", "temp", "[", "'MRR'", "]", ",", "temp", "[", "'NDCG@10'", "]", ",", "temp", "[", "'NDCG@5'", "]", ",", "temp", "[", "'NDCG@1'", "]", ",", "temp", "[", "'Hits@10'", "]", ",", "temp", "[", "'Hits@5'", "]", ",", "temp", "[", "'Hits@1'", "]", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# print overall evaluation result and return it", "\n", "", "for", "k", "in", "data", ".", "keys", "(", ")", ":", "\n", "            ", "data", "[", "k", "]", "=", "round", "(", "data", "[", "k", "]", "/", "t", ",", "3", ")", "\n", "\n", "\n", "", "if", "istest", ":", "\n", "            ", "print", "(", "\"TEST: \\tMRR: {:.3f}\\tNDCG@10: {:.3f}\\tNDCG@5: {:.3f}\\tNDCG@1: {:.3f}\\tHits@10: {:.3f}\\tHits@5: {:.3f}\\tHits@1: {:.3f}\\r\"", ".", "format", "(", "\n", "temp", "[", "'MRR'", "]", ",", "temp", "[", "'NDCG@10'", "]", ",", "temp", "[", "'NDCG@5'", "]", ",", "temp", "[", "'NDCG@1'", "]", ",", "temp", "[", "'Hits@10'", "]", ",", "temp", "[", "'Hits@5'", "]", ",", "temp", "[", "'Hits@1'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"VALID: \\tMRR: {:.3f}\\tNDCG@10: {:.3f}\\tNDCG@5: {:.3f}\\tNDCG@1: {:.3f}\\tHits@10: {:.3f}\\tHits@5: {:.3f}\\tHits@1: {:.3f}\\r\"", ".", "format", "(", "\n", "temp", "[", "'MRR'", "]", ",", "temp", "[", "'NDCG@10'", "]", ",", "temp", "[", "'NDCG@5'", "]", ",", "temp", "[", "'NDCG@1'", "]", ",", "temp", "[", "'Hits@10'", "]", ",", "temp", "[", "'Hits@5'", "]", ",", "temp", "[", "'Hits@1'", "]", ")", ")", "\n", "\n", "", "return", "data", "", "", "", ""]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.sampler.WarpSampler.__init__": [[100, 115], ["multiprocessing.Queue", "range", "sampler.WarpSampler.processors.append", "sampler.WarpSampler.processors[].start", "multiprocessing.Process", "numpy.random.randint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "User", ",", "usernum", ",", "itemnum", ",", "batch_size", "=", "64", ",", "maxlen", "=", "10", ",", "n_workers", "=", "1", ")", ":", "\n", "        ", "self", ".", "result_queue", "=", "Queue", "(", "maxsize", "=", "n_workers", "*", "10", ")", "\n", "self", ".", "processors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_workers", ")", ":", "\n", "            ", "self", ".", "processors", ".", "append", "(", "\n", "Process", "(", "target", "=", "sample_function_mixed", ",", "args", "=", "(", "User", ",", "\n", "usernum", ",", "\n", "itemnum", ",", "\n", "batch_size", ",", "\n", "maxlen", ",", "\n", "self", ".", "result_queue", ",", "\n", "np", ".", "random", ".", "randint", "(", "2e9", ")", "\n", ")", ")", ")", "\n", "self", ".", "processors", "[", "-", "1", "]", ".", "daemon", "=", "True", "\n", "self", ".", "processors", "[", "-", "1", "]", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.sampler.WarpSampler.next_batch": [[116, 118], ["sampler.WarpSampler.result_queue.get"], "methods", ["None"], ["", "", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "result_queue", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.sampler.WarpSampler.close": [[119, 123], ["p.terminate", "p.join"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "processors", ":", "\n", "            ", "p", ".", "terminate", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.sampler.random_neq": [[10, 15], ["numpy.random.randint", "numpy.random.randint"], "function", ["None"], ["def", "random_neq", "(", "l", ",", "r", ",", "s", ")", ":", "\n", "    ", "t", "=", "np", ".", "random", ".", "randint", "(", "l", ",", "r", ")", "\n", "while", "t", "in", "s", ":", "\n", "        ", "t", "=", "np", ".", "random", ".", "randint", "(", "l", ",", "r", ")", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.sampler.sample_function_mixed": [[16, 98], ["numpy.random.seed", "range", "zip", "result_queue.put", "random.random", "numpy.random.randint", "numpy.zeros", "numpy.zeros", "numpy.zeros", "set", "reversed", "range", "query_triples.append", "negative_triples.append", "numpy.random.randint", "numpy.zeros", "numpy.zeros", "numpy.zeros", "random.sample", "set", "reversed", "range", "query_triples.append", "negative_triples.append", "one_batch.append", "len", "numpy.random.randint", "len", "numpy.random.randint", "support_triples.append", "support_negative_triples.append", "len", "numpy.random.randint", "support_triples.append", "support_negative_triples.append", "sampler.sample_function_mixed.sample"], "function", ["None"], ["", "def", "sample_function_mixed", "(", "user_train", ",", "usernum", ",", "itemnum", ",", "batch_size", ",", "maxlen", ",", "result_queue", ",", "SEED", ")", ":", "\n", "    ", "def", "sample", "(", ")", ":", "\n", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "user", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "usernum", "+", "1", ")", "\n", "while", "len", "(", "user_train", "[", "user", "]", ")", "<=", "1", ":", "user", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "usernum", "+", "1", ")", "\n", "\n", "\n", "seq", "=", "np", ".", "zeros", "(", "[", "maxlen", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "pos", "=", "np", ".", "zeros", "(", "[", "maxlen", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "neg", "=", "np", ".", "zeros", "(", "[", "maxlen", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "if", "len", "(", "user_train", "[", "user", "]", ")", "<", "maxlen", ":", "\n", "                ", "nxt_idx", "=", "len", "(", "user_train", "[", "user", "]", ")", "-", "1", "\n", "", "else", ":", "\n", "                ", "nxt_idx", "=", "np", ".", "random", ".", "randint", "(", "maxlen", ",", "len", "(", "user_train", "[", "user", "]", ")", ")", "\n", "\n", "", "nxt", "=", "user_train", "[", "user", "]", "[", "nxt_idx", "]", "\n", "idx", "=", "maxlen", "-", "1", "\n", "\n", "ts", "=", "set", "(", "user_train", "[", "user", "]", ")", "\n", "for", "i", "in", "reversed", "(", "user_train", "[", "user", "]", "[", "min", "(", "0", ",", "nxt_idx", "-", "1", "-", "maxlen", ")", ":", "nxt_idx", "-", "1", "]", ")", ":", "\n", "                ", "seq", "[", "idx", "]", "=", "i", "\n", "pos", "[", "idx", "]", "=", "nxt", "\n", "if", "nxt", "!=", "0", ":", "neg", "[", "idx", "]", "=", "random_neq", "(", "1", ",", "itemnum", "+", "1", ",", "ts", ")", "\n", "nxt", "=", "i", "\n", "idx", "-=", "1", "\n", "if", "idx", "==", "-", "1", ":", "break", "\n", "\n", "", "curr_rel", "=", "user", "\n", "support_triples", ",", "support_negative_triples", ",", "query_triples", ",", "negative_triples", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "idx", "in", "range", "(", "maxlen", "-", "1", ")", ":", "\n", "                ", "support_triples", ".", "append", "(", "[", "seq", "[", "idx", "]", ",", "curr_rel", ",", "pos", "[", "idx", "]", "]", ")", "\n", "support_negative_triples", ".", "append", "(", "[", "seq", "[", "idx", "]", ",", "curr_rel", ",", "neg", "[", "idx", "]", "]", ")", "\n", "", "query_triples", ".", "append", "(", "[", "seq", "[", "-", "1", "]", ",", "curr_rel", ",", "pos", "[", "-", "1", "]", "]", ")", "\n", "negative_triples", ".", "append", "(", "[", "seq", "[", "-", "1", "]", ",", "curr_rel", ",", "neg", "[", "-", "1", "]", "]", ")", "\n", "\n", "return", "support_triples", ",", "support_negative_triples", ",", "query_triples", ",", "negative_triples", ",", "curr_rel", "\n", "\n", "", "else", ":", "\n", "            ", "user", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "usernum", "+", "1", ")", "\n", "while", "len", "(", "user_train", "[", "user", "]", ")", "<=", "1", ":", "user", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "usernum", "+", "1", ")", "\n", "\n", "seq", "=", "np", ".", "zeros", "(", "[", "maxlen", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "pos", "=", "np", ".", "zeros", "(", "[", "maxlen", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "neg", "=", "np", ".", "zeros", "(", "[", "maxlen", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "list_idx", "=", "random", ".", "sample", "(", "[", "i", "for", "i", "in", "range", "(", "len", "(", "user_train", "[", "user", "]", ")", ")", "]", ",", "maxlen", "+", "1", ")", "\n", "list_item", "=", "[", "user_train", "[", "user", "]", "[", "i", "]", "for", "i", "in", "sorted", "(", "list_idx", ")", "]", "\n", "\n", "nxt", "=", "list_item", "[", "-", "1", "]", "\n", "idx", "=", "maxlen", "-", "1", "\n", "\n", "ts", "=", "set", "(", "user_train", "[", "user", "]", ")", "\n", "for", "i", "in", "reversed", "(", "list_item", "[", ":", "-", "1", "]", ")", ":", "\n", "                ", "seq", "[", "idx", "]", "=", "i", "\n", "pos", "[", "idx", "]", "=", "nxt", "\n", "if", "nxt", "!=", "0", ":", "neg", "[", "idx", "]", "=", "random_neq", "(", "1", ",", "itemnum", "+", "1", ",", "ts", ")", "\n", "nxt", "=", "i", "\n", "idx", "-=", "1", "\n", "if", "idx", "==", "-", "1", ":", "break", "\n", "\n", "", "curr_rel", "=", "user", "\n", "support_triples", ",", "support_negative_triples", ",", "query_triples", ",", "negative_triples", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "idx", "in", "range", "(", "maxlen", "-", "1", ")", ":", "\n", "                ", "support_triples", ".", "append", "(", "[", "seq", "[", "idx", "]", ",", "curr_rel", ",", "pos", "[", "idx", "]", "]", ")", "\n", "support_negative_triples", ".", "append", "(", "[", "seq", "[", "idx", "]", ",", "curr_rel", ",", "neg", "[", "idx", "]", "]", ")", "\n", "", "query_triples", ".", "append", "(", "[", "seq", "[", "-", "1", "]", ",", "curr_rel", ",", "pos", "[", "-", "1", "]", "]", ")", "\n", "negative_triples", ".", "append", "(", "[", "seq", "[", "-", "1", "]", ",", "curr_rel", ",", "neg", "[", "-", "1", "]", "]", ")", "\n", "\n", "return", "support_triples", ",", "support_negative_triples", ",", "query_triples", ",", "negative_triples", ",", "curr_rel", "\n", "\n", "", "", "np", ".", "random", ".", "seed", "(", "SEED", ")", "\n", "\n", "while", "True", ":", "\n", "        ", "one_batch", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "one_batch", ".", "append", "(", "sample", "(", ")", ")", "\n", "\n", "", "support", ",", "support_negative", ",", "query", ",", "negative", ",", "curr_rel", "=", "zip", "(", "*", "one_batch", ")", "\n", "\n", "result_queue", ".", "put", "(", "(", "[", "support", ",", "support_negative", ",", "query", ",", "negative", "]", ",", "curr_rel", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.utils.DataLoader.__init__": [[82, 99], ["len", "utils.DataLoader.valid_user.append", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "user_train", ",", "user_test", ",", "itemnum", ",", "parameter", ")", ":", "\n", "        ", "self", ".", "curr_rel_idx", "=", "0", "\n", "\n", "self", ".", "bs", "=", "parameter", "[", "'batch_size'", "]", "\n", "self", ".", "maxlen", "=", "parameter", "[", "'K'", "]", "\n", "\n", "self", ".", "valid_user", "=", "[", "]", "\n", "for", "u", "in", "user_train", ":", "\n", "            ", "if", "len", "(", "user_train", "[", "u", "]", ")", "<", "self", ".", "maxlen", "or", "len", "(", "user_test", "[", "u", "]", ")", "<", "1", ":", "continue", "\n", "self", ".", "valid_user", ".", "append", "(", "u", ")", "\n", "\n", "", "self", ".", "num_tris", "=", "len", "(", "self", ".", "valid_user", ")", "\n", "\n", "self", ".", "train", "=", "user_train", "\n", "self", ".", "test", "=", "user_test", "\n", "\n", "self", ".", "itemnum", "=", "itemnum", "\n", "\n"]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.utils.DataLoader.next_one_on_eval": [[100, 143], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "set", "reversed", "range", "rated.add", "query_triples.append", "range", "support_triples.append", "support_negative_triples.append", "numpy.random.randint", "negative_triples.append", "numpy.random.randint", "utils.random_neq"], "methods", ["home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.utils.random_neq"], ["", "def", "next_one_on_eval", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "curr_tri_idx", "==", "self", ".", "num_tris", ":", "\n", "            ", "return", "\"EOT\"", ",", "\"EOT\"", "\n", "\n", "", "u", "=", "self", ".", "valid_user", "[", "self", ".", "curr_tri_idx", "]", "\n", "\n", "self", ".", "curr_tri_idx", "+=", "1", "\n", "\n", "seq", "=", "np", ".", "zeros", "(", "[", "self", ".", "maxlen", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "pos", "=", "np", ".", "zeros", "(", "[", "self", ".", "maxlen", "-", "1", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "neg", "=", "np", ".", "zeros", "(", "[", "self", ".", "maxlen", "-", "1", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "idx", "=", "self", ".", "maxlen", "-", "1", "\n", "\n", "ts", "=", "set", "(", "self", ".", "train", "[", "u", "]", ")", "\n", "for", "i", "in", "reversed", "(", "self", ".", "train", "[", "u", "]", ")", ":", "\n", "            ", "seq", "[", "idx", "]", "=", "i", "\n", "if", "idx", ">", "0", ":", "\n", "                ", "pos", "[", "idx", "-", "1", "]", "=", "i", "\n", "if", "i", "!=", "0", ":", "neg", "[", "idx", "-", "1", "]", "=", "random_neq", "(", "1", ",", "self", ".", "itemnum", "+", "1", ",", "ts", ")", "\n", "", "idx", "-=", "1", "\n", "if", "idx", "==", "-", "1", ":", "break", "\n", "\n", "", "curr_rel", "=", "u", "\n", "support_triples", ",", "support_negative_triples", ",", "query_triples", ",", "negative_triples", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "idx", "in", "range", "(", "self", ".", "maxlen", "-", "1", ")", ":", "\n", "            ", "support_triples", ".", "append", "(", "[", "seq", "[", "idx", "]", ",", "curr_rel", ",", "pos", "[", "idx", "]", "]", ")", "\n", "support_negative_triples", ".", "append", "(", "[", "seq", "[", "idx", "]", ",", "curr_rel", ",", "neg", "[", "idx", "]", "]", ")", "\n", "\n", "", "rated", "=", "ts", "\n", "rated", ".", "add", "(", "0", ")", "\n", "query_triples", ".", "append", "(", "[", "seq", "[", "-", "1", "]", ",", "curr_rel", ",", "self", ".", "test", "[", "u", "]", "[", "0", "]", "]", ")", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "            ", "t", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "self", ".", "itemnum", "+", "1", ")", "\n", "while", "t", "in", "rated", ":", "t", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "self", ".", "itemnum", "+", "1", ")", "\n", "negative_triples", ".", "append", "(", "[", "seq", "[", "-", "1", "]", ",", "curr_rel", ",", "t", "]", ")", "\n", "\n", "", "support_triples", "=", "[", "support_triples", "]", "\n", "support_negative_triples", "=", "[", "support_negative_triples", "]", "\n", "query_triples", "=", "[", "query_triples", "]", "\n", "negative_triples", "=", "[", "negative_triples", "]", "\n", "\n", "return", "[", "support_triples", ",", "support_negative_triples", ",", "query_triples", ",", "negative_triples", "]", ",", "curr_rel", "", "", "", ""]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.utils.random_neq": [[9, 14], ["numpy.random.randint", "numpy.random.randint"], "function", ["None"], ["def", "random_neq", "(", "l", ",", "r", ",", "s", ")", ":", "\n", "    ", "t", "=", "np", ".", "random", ".", "randint", "(", "l", ",", "r", ")", "\n", "while", "t", "in", "s", ":", "\n", "        ", "t", "=", "np", ".", "random", ".", "randint", "(", "l", ",", "r", ")", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.utils.trans_to_cuda": [[15, 20], ["torch.cuda.is_available", "variable.cuda"], "function", ["None"], ["", "def", "trans_to_cuda", "(", "variable", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "variable", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "variable", "\n", "\n"]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.utils.trans_to_cpu": [[22, 27], ["torch.cuda.is_available", "variable.cpu"], "function", ["None"], ["", "", "def", "trans_to_cpu", "(", "variable", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "variable", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "variable", "\n", "\n"]], "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.utils.data_load": [[29, 74], ["collections.defaultdict", "open", "open.close", "collections.defaultdict", "open", "open.close", "line.rstrip().split", "int", "int", "max", "max", "user_train[].append", "line.rstrip().split", "int", "int", "User_test_new[].append", "len", "line.rstrip", "line.rstrip", "random.random", "user_valid[].append", "user_test[].append"], "function", ["home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.sampler.WarpSampler.close", "home.repos.pwc.inspect_result.wangjlgz_MetaTL.None.sampler.WarpSampler.close"], ["", "", "def", "data_load", "(", "fname", ",", "num_sample", ")", ":", "\n", "    ", "usernum", "=", "0", "\n", "itemnum", "=", "0", "\n", "user_train", "=", "defaultdict", "(", "list", ")", "\n", "\n", "# assume user/item index starting from 1", "\n", "f", "=", "open", "(", "'data/%s/%s_train.csv'", "%", "(", "fname", ",", "fname", ")", ",", "'r'", ")", "\n", "for", "line", "in", "f", ":", "\n", "        ", "u", ",", "i", ",", "t", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "u", "=", "int", "(", "u", ")", "\n", "i", "=", "int", "(", "i", ")", "\n", "usernum", "=", "max", "(", "u", ",", "usernum", ")", "\n", "itemnum", "=", "max", "(", "i", ",", "itemnum", ")", "\n", "user_train", "[", "u", "]", ".", "append", "(", "i", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "# read in new users for testing", "\n", "user_input_test", "=", "{", "}", "\n", "user_input_valid", "=", "{", "}", "\n", "user_valid", "=", "{", "}", "\n", "user_test", "=", "{", "}", "\n", "\n", "\n", "User_test_new", "=", "defaultdict", "(", "list", ")", "\n", "f", "=", "open", "(", "'data/%s/%s_test_new_user.csv'", "%", "(", "fname", ",", "fname", ")", ",", "'r'", ")", "\n", "for", "line", "in", "f", ":", "\n", "        ", "u", ",", "i", ",", "t", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "u", "=", "int", "(", "u", ")", "\n", "i", "=", "int", "(", "i", ")", "\n", "User_test_new", "[", "u", "]", ".", "append", "(", "i", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "for", "user", "in", "User_test_new", ":", "\n", "        ", "if", "len", "(", "User_test_new", "[", "user", "]", ")", ">", "num_sample", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "                ", "user_input_valid", "[", "user", "]", "=", "User_test_new", "[", "user", "]", "[", ":", "num_sample", "]", "\n", "user_valid", "[", "user", "]", "=", "[", "]", "\n", "user_valid", "[", "user", "]", ".", "append", "(", "User_test_new", "[", "user", "]", "[", "num_sample", "]", ")", "\n", "", "else", ":", "\n", "                ", "user_input_test", "[", "user", "]", "=", "User_test_new", "[", "user", "]", "[", ":", "num_sample", "]", "\n", "user_test", "[", "user", "]", "=", "[", "]", "\n", "user_test", "[", "user", "]", ".", "append", "(", "User_test_new", "[", "user", "]", "[", "num_sample", "]", ")", "\n", "\n", "\n", "", "", "", "return", "[", "user_train", ",", "usernum", ",", "itemnum", ",", "user_input_test", ",", "user_test", ",", "user_input_valid", ",", "user_valid", "]", "\n", "\n"]]}