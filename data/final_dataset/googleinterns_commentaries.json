{"home.repos.pwc.inspect_result.googleinterns_commentaries.None.dataloaders.get_data": [[24, 120], ["train_transform.extend", "test_transform.extend", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "train_transform.append", "train_transform.append", "torch.utils.data.random_split", "torch.utils.data.random_split", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "train_transform.extend", "test_transform.extend", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.MNIST", "torch.utils.data.random_split", "torch.utils.data.random_split", "torch.utils.data.random_split", "torchvision.datasets.MNIST", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "train_transform.append", "train_transform.append", "torch.utils.data.random_split", "torch.utils.data.random_split", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["def", "get_data", "(", "dataset", ",", "augment", "=", "False", ",", "evaluate", "=", "False", ")", ":", "\n", "\n", "# Smaller BS at training of teacher network because of memory limitations. ", "\n", "# Use larger BS at testing time.", "\n", "    ", "BS", "=", "8", "\n", "if", "evaluate", ":", "\n", "        ", "BS", "=", "64", "\n", "\n", "", "if", "dataset", "==", "'cifar10'", ":", "\n", "        ", "train_transform", "=", "[", "]", "\n", "test_transform", "=", "[", "]", "\n", "if", "augment", ":", "\n", "            ", "train_transform", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ")", "\n", "train_transform", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "", "train_transform", ".", "extend", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", ",", "\n", "std", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", ")", "]", ")", "\n", "test_transform", ".", "extend", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", ",", "\n", "std", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", ")", "]", ")", "\n", "\n", "trainset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "train_transform", ")", ")", "\n", "\n", "if", "not", "evaluate", ":", "\n", "            ", "trainset", ",", "valset", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "trainset", ",", "[", "40000", ",", "10000", "]", ")", "\n", "\n", "", "testset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "test_transform", ")", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "BS", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "0", ")", "\n", "if", "not", "evaluate", ":", "\n", "            ", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valset", ",", "batch_size", "=", "BS", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "val_loader", "=", "None", "\n", "", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "BS", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "\n", "\n", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "        ", "train_transform", "=", "[", "]", "\n", "test_transform", "=", "[", "]", "\n", "if", "augment", ":", "\n", "            ", "train_transform", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ")", "\n", "train_transform", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "", "train_transform", ".", "extend", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", ",", "\n", "std", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", ")", "]", ")", "\n", "test_transform", ".", "extend", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", ",", "\n", "std", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", ")", "]", ")", "\n", "\n", "trainset", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "train_transform", ")", ")", "\n", "\n", "if", "not", "evaluate", ":", "\n", "            ", "trainset", ",", "valset", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "trainset", ",", "[", "40000", ",", "10000", "]", ")", "\n", "\n", "", "testset", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "test_transform", ")", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "BS", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "0", ")", "\n", "if", "not", "evaluate", ":", "\n", "            ", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valset", ",", "batch_size", "=", "BS", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "val_loader", "=", "None", "\n", "", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "BS", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "\n", "\n", "\n", "", "else", ":", "\n", "        ", "trainset", "=", "datasets", ".", "MNIST", "(", "'./data'", ",", "download", "=", "True", ",", "train", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "# normalize inputs", "\n", "]", ")", ")", "\n", "\n", "trainset", ",", "valset", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "trainset", ",", "[", "50000", ",", "10000", "]", ")", "\n", "\n", "testset", "=", "datasets", ".", "MNIST", "(", "'./data'", ",", "download", "=", "True", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "# normalize inputs", "\n", "]", ")", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "\n", "batch_size", "=", "BS", ",", "\n", "shuffle", "=", "True", ")", "\n", "if", "not", "evaluate", ":", "\n", "            ", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valset", ",", "batch_size", "=", "BS", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "val_loader", "=", "None", "\n", "\n", "", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "\n", "batch_size", "=", "BS", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n", "", "return", "train_loader", ",", "val_loader", ",", "test_loader", "", "", ""]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.models.ConvNetTeacher.__init__": [[24, 40], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "inner_steps", ")", ":", "\n", "        ", "super", "(", "ConvNetTeacher", ",", "self", ")", ".", "__init__", "(", ")", "\n", "inpl", "=", "2", "if", "dataset", "==", "'mnist'", "else", "4", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inpl", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ")", "\n", "matsize", "=", "64", "if", "dataset", "==", "'mnist'", "else", "256", "\n", "self", ".", "fc_lambda", "=", "nn", ".", "Linear", "(", "matsize", ",", "1", ")", "\n", "self", ".", "inner_steps", "=", "inner_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.models.ConvNetTeacher.forward": [[41, 54], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.ConvNetTeacher.layer1", "models.ConvNetTeacher.layer2", "out.reshape.reshape.reshape", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "out.reshape.reshape.size", "models.ConvNetTeacher.fc_lambda", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "itr", ")", ":", "\n", "#  normalisation of itr. ", "\n", "        ", "itr", "=", "itr", "/", "self", ".", "inner_steps", "\n", "\n", "# place itr as extra channel in input image", "\n", "itrchannel", "=", "(", "torch", ".", "ones", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "*", "itr", ")", ".", "to", "(", "device", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "itrchannel", "]", ",", "dim", "=", "1", ")", "\n", "\n", "out", "=", "self", ".", "layer1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "out", ".", "reshape", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out_lambda", "=", "torch", ".", "sigmoid", "(", "self", ".", "fc_lambda", "(", "out", ")", ")", "\n", "return", "out_lambda", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.models.ConvNetTeacher2.__init__": [[58, 73], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "inner_steps", ")", ":", "\n", "        ", "super", "(", "ConvNetTeacher2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "inpl", "=", "1", "if", "args", ".", "dataset", "==", "'mnist'", "else", "3", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inpl", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ")", "\n", "matsize", "=", "64", "if", "args", ".", "dataset", "==", "'mnist'", "else", "256", "\n", "self", ".", "fc_lambda", "=", "nn", ".", "Linear", "(", "matsize", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.models.ConvNetTeacher2.forward": [[74, 80], ["models.ConvNetTeacher2.layer1", "models.ConvNetTeacher2.layer2", "out.reshape.reshape.reshape", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "out.reshape.reshape.size", "models.ConvNetTeacher2.fc_lambda"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "itr", ")", ":", "\n", "        ", "out", "=", "self", ".", "layer1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "out", ".", "reshape", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out_lambda", "=", "torch", ".", "sigmoid", "(", "self", ".", "fc_lambda", "(", "out", ")", ")", "\n", "return", "out_lambda", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.models.ConvNetStudent.__init__": [[83, 98], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "super", "(", "ConvNetStudent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "inpl", "=", "1", "if", "dataset", "==", "'mnist'", "else", "3", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inpl", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ")", "\n", "matsize", "=", "64", "if", "dataset", "==", "'mnist'", "else", "256", "\n", "self", ".", "fc_pi", "=", "nn", ".", "Linear", "(", "matsize", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.models.ConvNetStudent.forward": [[99, 105], ["models.ConvNetStudent.layer1", "models.ConvNetStudent.layer2", "out.reshape.reshape.reshape", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "out.reshape.reshape.size", "models.ConvNetStudent.fc_pi"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "layer1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "out", ".", "reshape", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out_pi", "=", "F", ".", "log_softmax", "(", "self", ".", "fc_pi", "(", "out", ")", ")", "\n", "return", "out_pi", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.models.BasicBlock.__init__": [[115, 127], ["torch.Module.__init__", "models.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "models.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.__init__", "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.conv3x3", "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.models.BasicBlock.forward": [[129, 135], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.BasicBlock.bn2", "models.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.BasicBlock.bn1", "models.BasicBlock.conv2", "models.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.models.Bottleneck.__init__": [[140, 154], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.models.Bottleneck.forward": [[156, 163], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.Bottleneck.bn3", "models.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.Bottleneck.bn1", "models.Bottleneck.bn2", "models.Bottleneck.conv3", "models.Bottleneck.conv1", "models.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.models.ResNet.__init__": [[166, 179], ["torch.Module.__init__", "models.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "models.ResNet._make_layer", "models.ResNet._make_layer", "models.ResNet._make_layer", "models.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.__init__", "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.conv3x3", "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ",", "num_channels", "=", "3", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "num_channels", ",", "64", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "self", ".", "weight_decay", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.models.ResNet._make_layer": [[180, 187], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.models.ResNet.forward": [[188, 202], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.ResNet.layer1", "models.ResNet.layer2", "models.ResNet.layer3", "models.ResNet.layer4", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.log_softmax.view", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "models.ResNet.bn1", "torch.log_softmax.size", "models.ResNet.linear", "models.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_features", "=", "False", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "1", ")", "\n", "features", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "F", ".", "log_softmax", "(", "self", ".", "linear", "(", "features", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "return_features", ":", "\n", "            ", "return", "out", ",", "features", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.models.conv3x3": [[108, 110], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.models.ResNet18": [[204, 209], ["models.ResNet"], "function", ["None"], ["", "", "", "def", "ResNet18", "(", "num_classes", "=", "10", ",", "dataset", "=", "'cifar10'", ")", ":", "\n", "    ", "num_channels", "=", "3", "\n", "if", "dataset", "==", "'mnist'", ":", "\n", "        ", "num_channels", "=", "1", "\n", "", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", ",", "num_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.models.ResNet34": [[210, 215], ["models.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "num_classes", "=", "10", ",", "dataset", "=", "'cifar10'", ")", ":", "\n", "    ", "num_channels", "=", "3", "\n", "if", "dataset", "==", "'mnist'", ":", "\n", "        ", "num_channels", "=", "1", "\n", "", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", ",", "num_channels", "=", "num_channels", ")", "", "", ""]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.student_train_weighting.get_loss": [[49, 61], ["teacher.forward", "student.forward", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "torch.nll_loss", "teacher.forward.squeeze", "torch.nll_loss().squeeze", "torch.nll_loss", "student.forward.argmax"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.forward", "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.forward"], ["def", "get_loss", "(", "student", ",", "teacher", ",", "x", ",", "y", ",", "itr", ",", "val", "=", "False", ")", ":", "\n", "    ", "comm", "=", "teacher", ".", "forward", "(", "x", ",", "itr", ")", "\n", "pi_stud", "=", "student", ".", "forward", "(", "x", ")", "\n", "\n", "if", "val", ":", "\n", "        ", "y_loss_stud", "=", "torch", ".", "sum", "(", "F", ".", "nll_loss", "(", "pi_stud", ",", "y", ",", "reduction", "=", "'none'", ")", ")", "\n", "", "else", ":", "\n", "# weight the loss if during training.", "\n", "        ", "y_loss_stud", "=", "torch", ".", "sum", "(", "comm", ".", "squeeze", "(", ")", "*", "F", ".", "nll_loss", "(", "pi_stud", ",", "y", ",", "reduction", "=", "'none'", ")", ".", "squeeze", "(", ")", ")", "\n", "\n", "", "acc_stud", "=", "(", "pi_stud", ".", "argmax", "(", "dim", "=", "1", ")", "==", "y", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "len", "(", "y", ")", "\n", "return", "y_loss_stud", ",", "acc_stud", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.student_train_weighting.update_lossdict": [[64, 79], ["update.keys", "lossdict[].append"], "function", ["None"], ["", "def", "update_lossdict", "(", "lossdict", ",", "update", ",", "action", "=", "'append'", ")", ":", "\n", "    ", "for", "k", "in", "update", ".", "keys", "(", ")", ":", "\n", "        ", "if", "action", "==", "'append'", ":", "\n", "            ", "if", "k", "in", "lossdict", ":", "\n", "                ", "lossdict", "[", "k", "]", ".", "append", "(", "update", "[", "k", "]", ")", "\n", "", "else", ":", "\n", "                ", "lossdict", "[", "k", "]", "=", "[", "update", "[", "k", "]", "]", "\n", "", "", "elif", "action", "==", "'sum'", ":", "\n", "            ", "if", "k", "in", "lossdict", ":", "\n", "                ", "lossdict", "[", "k", "]", "+=", "update", "[", "k", "]", "\n", "", "else", ":", "\n", "                ", "lossdict", "[", "k", "]", "=", "update", "[", "k", "]", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "return", "lossdict", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.student_train_weighting.baseline": [[83, 171], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "ConvNetTeacher2().to.train", "ResNet34().to.train", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "range", "models.ConvNetTeacher().to", "ConvNetTeacher2().to.load_state_dict", "models.ConvNetStudent().to", "ResNet34().to.parameters", "enumerate", "print", "student_train_weighting.eval_student", "student_train_weighting.update_lossdict", "student_train_weighting.eval_student", "student_train_weighting.update_lossdict", "models.ConvNetTeacher2().to", "models.ResNet18().to", "ResNet34().to.load_state_dict", "ResNet34().to.train", "x.to.to", "y.to.to", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "ld[].append", "ld[].append", "models.ConvNetTeacher", "models.ConvNetStudent", "models.ResNet34().to", "print", "student_train_weighting.get_loss", "student_train_weighting.get_loss", "loss.item", "int", "int", "int", "print", "student_train_weighting.eval_student", "student_train_weighting.update_lossdict", "student_train_weighting.eval_student", "student_train_weighting.update_lossdict", "models.ConvNetTeacher2", "models.ResNet18", "len", "models.ResNet34", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.train", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.train", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.eval_student", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.update_lossdict", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.eval_student", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.update_lossdict", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.train", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.get_loss", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.get_loss", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.eval_student", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.update_lossdict", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.eval_student", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.update_lossdict", "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.ResNet18", "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.ResNet34"], ["", "def", "baseline", "(", "train_dl", ",", "test_dl", ",", "stud_state_dict", "=", "None", ",", "teach_state_dict", "=", "None", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "stud_train_ld", "=", "{", "}", "\n", "stud_val_ld", "=", "{", "}", "\n", "\n", "if", "args", ".", "arch", "==", "'curr'", ":", "\n", "        ", "teacher", "=", "ConvNetTeacher", "(", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "arch", "==", "'curr2'", ":", "\n", "        ", "teacher", "=", "ConvNetTeacher2", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "teach_state_dict", "is", "not", "None", ":", "\n", "        ", "teacher", ".", "load_state_dict", "(", "teach_state_dict", ")", "\n", "\n", "# we have batch stats available so use train mode", "\n", "", "teacher", ".", "train", "(", ")", "\n", "\n", "inpl", "=", "1", "if", "args", ".", "dataset", "==", "'mnist'", "else", "3", "\n", "num_classes", "=", "100", "if", "args", ".", "dataset", "==", "'cifar100'", "else", "10", "\n", "\n", "if", "args", ".", "studentarch", "==", "'cbr'", ":", "\n", "        ", "student", "=", "ConvNetStudent", "(", "args", ".", "dataset", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "studentarch", "==", "'resnet18'", ":", "\n", "        ", "student", "=", "ResNet18", "(", "args", ".", "dataset", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "studentarch", "==", "'resnet34'", ":", "\n", "        ", "student", "=", "ResNet34", "(", "args", ".", "dataset", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "stud_state_dict", "is", "not", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "student", ".", "load_state_dict", "(", "stud_state_dict", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "'Could not load state dict. Starting from fresh model.'", ")", "\n", "", "", "student", ".", "train", "(", ")", "\n", "\n", "stud_optim", "=", "torch", ".", "optim", ".", "Adam", "(", "student", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "inner_lr", ")", "\n", "\n", "numep", "=", "5", "\n", "\n", "for", "ep", "in", "range", "(", "numep", ")", ":", "\n", "        ", "ld", "=", "{", "\n", "'stud_loss'", ":", "[", "]", ",", "\n", "'stud_acc'", ":", "[", "]", "\n", "}", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "train_dl", ")", ":", "\n", "            ", "student", ".", "train", "(", ")", "\n", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "device", ")", "\n", "comm_steps", "=", "ep", "*", "len", "(", "train_dl", ")", "+", "i", "\n", "\n", "# Calling val=True means we don't apply any weighting.", "\n", "if", "args", ".", "baseline", ":", "\n", "                ", "y_loss", ",", "acc", "=", "get_loss", "(", "student", ",", "teacher", ",", "x", ",", "y", ",", "comm_steps", ",", "val", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "y_loss", ",", "acc", "=", "get_loss", "(", "student", ",", "teacher", ",", "x", ",", "y", ",", "comm_steps", ",", "val", "=", "False", ")", "\n", "\n", "", "loss", "=", "y_loss", "\n", "stud_optim", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "stud_optim", ".", "step", "(", ")", "\n", "\n", "# logging", "\n", "ld", "[", "'stud_loss'", "]", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "ld", "[", "'stud_acc'", "]", ".", "append", "(", "acc", ")", "\n", "\n", "do_eval", "=", "False", "\n", "if", "ep", "==", "0", "and", "i", "==", "0", ":", "\n", "                ", "do_eval", "=", "True", "\n", "", "eval_pts", "=", "[", "int", "(", "1", "/", "4", "*", "len", "(", "train_dl", ")", ")", ",", "int", "(", "1", "/", "2", "*", "len", "(", "train_dl", ")", ")", ",", "int", "(", "3", "/", "4", "*", "len", "(", "train_dl", ")", ")", "]", "\n", "if", "i", "in", "eval_pts", ":", "\n", "                ", "do_eval", "=", "True", "\n", "", "if", "do_eval", ":", "\n", "                ", "print", "(", "'Train student: Epoch %d, Step %d'", "%", "(", "ep", ",", "i", ")", ")", "\n", "tld", "=", "eval_student", "(", "student", ",", "test_dl", ")", "\n", "stud_val_ld", "=", "update_lossdict", "(", "stud_val_ld", ",", "tld", ")", "\n", "\n", "train_ep", "=", "eval_student", "(", "student", ",", "train_dl", ")", "\n", "stud_train_ld", "=", "update_lossdict", "(", "stud_train_ld", ",", "train_ep", ")", "\n", "\n", "", "", "print", "(", "'Train student: Epoch %d, Step %d'", "%", "(", "ep", ",", "i", ")", ")", "\n", "tld", "=", "eval_student", "(", "student", ",", "test_dl", ")", "\n", "stud_val_ld", "=", "update_lossdict", "(", "stud_val_ld", ",", "tld", ")", "\n", "\n", "train_ep", "=", "eval_student", "(", "student", ",", "train_dl", ")", "\n", "stud_train_ld", "=", "update_lossdict", "(", "stud_train_ld", ",", "train_ep", ")", "\n", "\n", "", "return", "stud_train_ld", ",", "stud_val_ld", ",", "student", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.student_train_weighting.eval_student": [[174, 194], ["student.eval", "len", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "student", "torch.nll_loss().item", "student.argmax", "output.argmax.eq().sum().item", "len", "data.to", "target.to", "len", "torch.nll_loss", "output.argmax.eq().sum", "output.argmax.eq", "target.view_as"], "function", ["None"], ["", "def", "eval_student", "(", "student", ",", "dl", ")", ":", "\n", "    ", "student", ".", "eval", "(", ")", "\n", "net_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "dl", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "student", "(", "data", ")", "\n", "net_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "net_loss", "/=", "len", "(", "dl", ".", "dataset", ")", "\n", "\n", "acc", "=", "100.", "*", "correct", "/", "len", "(", "dl", ".", "dataset", ")", "\n", "\n", "print", "(", "'\\n Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "\n", "net_loss", ",", "correct", ",", "len", "(", "dl", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "dl", ".", "dataset", ")", ")", ")", "\n", "return", "{", "'epoch_loss'", ":", "net_loss", ",", "'epoch_acc'", ":", "acc", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.get_loss": [[54, 66], ["teacher.forward", "student.forward", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "torch.nll_loss", "teacher.forward.squeeze", "torch.nll_loss().squeeze", "torch.nll_loss", "student.forward.argmax"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.forward", "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.forward"], ["def", "get_loss", "(", "student", ",", "teacher", ",", "x", ",", "y", ",", "itr", ",", "val", "=", "False", ")", ":", "\n", "    ", "comm", "=", "teacher", ".", "forward", "(", "x", ",", "itr", ")", "\n", "pi_stud", "=", "student", ".", "forward", "(", "x", ")", "\n", "\n", "if", "val", ":", "\n", "        ", "y_loss_stud", "=", "torch", ".", "sum", "(", "F", ".", "nll_loss", "(", "pi_stud", ",", "y", ",", "reduction", "=", "'none'", ")", ")", "\n", "", "else", ":", "\n", "# weight the loss if during training.", "\n", "        ", "y_loss_stud", "=", "torch", ".", "sum", "(", "comm", ".", "squeeze", "(", ")", "*", "F", ".", "nll_loss", "(", "pi_stud", ",", "y", ",", "reduction", "=", "'none'", ")", ".", "squeeze", "(", ")", ")", "\n", "\n", "", "acc_stud", "=", "(", "pi_stud", ".", "argmax", "(", "dim", "=", "1", ")", "==", "y", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "len", "(", "y", ")", "\n", "return", "y_loss_stud", ",", "acc_stud", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.do_train_student": [[69, 97], ["student.train", "teacher.train", "enumerate", "x.to.to", "y.to.to", "comms-weighting.get_loss", "optimizer.step", "lossdict[].append", "lossdict[].append", "lossdict[].append", "y_loss.item", "loss.item", "print"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.train", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.train", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.get_loss"], ["", "def", "do_train_student", "(", "student", ",", "optimizer", ",", "teacher", ",", "train_dl", ",", "inner_steps", "=", "args", ".", "inner_steps", ")", ":", "\n", "    ", "lossdict", "=", "{", "\n", "'stud_y_loss'", ":", "[", "]", ",", "\n", "'stud_loss'", ":", "[", "]", ",", "\n", "'stud_acc'", ":", "[", "]", "\n", "}", "\n", "student", ".", "train", "(", ")", "\n", "teacher", ".", "train", "(", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "train_dl", ")", ":", "\n", "        ", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "device", ")", "\n", "y_loss", ",", "acc", "=", "get_loss", "(", "student", ",", "teacher", ",", "x", ",", "y", ",", "i", ")", "\n", "\n", "loss", "=", "y_loss", "\n", "\n", "# higher library exposes this interface for zero_grad on optimizer, loss.backward(), and optim.step()", "\n", "optimizer", ".", "step", "(", "loss", ")", "\n", "\n", "# logging", "\n", "lossdict", "[", "'stud_y_loss'", "]", ".", "append", "(", "y_loss", ".", "item", "(", ")", ")", "\n", "lossdict", "[", "'stud_loss'", "]", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "lossdict", "[", "'stud_acc'", "]", ".", "append", "(", "acc", ")", "\n", "\n", "if", "i", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "'Train student: Step '", ",", "i", ")", "\n", "", "if", "i", "==", "inner_steps", "-", "1", ":", "\n", "            ", "break", "\n", "", "", "return", "lossdict", ",", "student", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.do_train_teacher": [[100, 131], ["student.train", "teacher.train", "enumerate", "netloss.backward", "x.to.to", "y.to.to", "comms-weighting.get_loss", "lossdict[].append", "len", "y_loss_stud.item", "print"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.train", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.train", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.get_loss"], ["", "def", "do_train_teacher", "(", "teacher", ",", "optimizer", ",", "student", ",", "train_dl", ")", ":", "\n", "    ", "lossdict", "=", "{", "\n", "'teach_loss'", ":", "[", "]", ",", "\n", "}", "\n", "\n", "student", ".", "train", "(", ")", "\n", "teacher", ".", "train", "(", ")", "\n", "netloss", "=", "None", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "train_dl", ")", ":", "\n", "        ", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "device", ")", "\n", "# Set val=True to get unweighted loss", "\n", "y_loss_stud", ",", "acc_stud", "=", "get_loss", "(", "student", ",", "teacher", ",", "x", ",", "y", ",", "i", ",", "val", "=", "True", ")", "\n", "\n", "# Teacher is trained to minimise the student's classification error loss after training", "\n", "if", "netloss", "is", "None", ":", "\n", "            ", "netloss", "=", "y_loss_stud", "\n", "", "else", ":", "\n", "            ", "netloss", "+=", "y_loss_stud", "\n", "\n", "# Logging", "\n", "", "lossdict", "[", "'teach_loss'", "]", ".", "append", "(", "y_loss_stud", ".", "item", "(", ")", ")", "\n", "\n", "if", "i", "%", "500", "==", "0", ":", "\n", "            ", "print", "(", "'Train teacher: Step '", ",", "i", ")", "\n", "\n", "# Accumulate losses and do the step after we process outer_steps number of batches.", "\n", "", "", "netloss", "=", "netloss", "/", "len", "(", "train_dl", ")", "\n", "netloss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "\n", "return", "lossdict", ",", "teacher", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.update_lossdict": [[133, 148], ["update.keys", "lossdict[].append"], "function", ["None"], ["", "def", "update_lossdict", "(", "lossdict", ",", "update", ",", "action", "=", "'append'", ")", ":", "\n", "    ", "for", "k", "in", "update", ".", "keys", "(", ")", ":", "\n", "        ", "if", "action", "==", "'append'", ":", "\n", "            ", "if", "k", "in", "lossdict", ":", "\n", "                ", "lossdict", "[", "k", "]", ".", "append", "(", "update", "[", "k", "]", ")", "\n", "", "else", ":", "\n", "                ", "lossdict", "[", "k", "]", "=", "[", "update", "[", "k", "]", "]", "\n", "", "", "elif", "action", "==", "'sum'", ":", "\n", "            ", "if", "k", "in", "lossdict", ":", "\n", "                ", "lossdict", "[", "k", "]", "+=", "update", "[", "k", "]", "\n", "", "else", ":", "\n", "                ", "lossdict", "[", "k", "]", "=", "update", "[", "k", "]", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "return", "lossdict", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.eval_student": [[151, 171], ["student.eval", "len", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "student", "torch.nll_loss().item", "student.argmax", "output.argmax.eq().sum().item", "len", "data.to", "target.to", "len", "torch.nll_loss", "output.argmax.eq().sum", "output.argmax.eq", "target.view_as"], "function", ["None"], ["", "def", "eval_student", "(", "student", ",", "dl", ")", ":", "\n", "    ", "student", ".", "eval", "(", ")", "\n", "net_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "dl", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "student", "(", "data", ")", "\n", "net_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "net_loss", "/=", "len", "(", "dl", ".", "dataset", ")", "\n", "\n", "acc", "=", "100.", "*", "correct", "/", "len", "(", "dl", ".", "dataset", ")", "\n", "\n", "print", "(", "'\\n Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "\n", "net_loss", ",", "correct", ",", "len", "(", "dl", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "dl", ".", "dataset", ")", ")", ")", "\n", "return", "{", "'epoch_loss'", ":", "net_loss", ",", "'epoch_acc'", ":", "acc", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.train": [[174, 240], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "range", "ConvNetTeacher2().to.parameters", "copy.deepcopy", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam.zero_grad", "torch.optim.Adam.step", "comms-weighting.update_lossdict", "comms-weighting.update_lossdict", "print", "comms-weighting.eval_student", "comms-weighting.update_lossdict", "comms-weighting.eval_student", "comms-weighting.update_lossdict", "comms-weighting.eval_student", "comms-weighting.update_lossdict", "models.ConvNetTeacher().to", "models.ConvNetStudent().to", "copy.deepcopy", "ConvNetStudent().to.load_state_dict", "ConvNetStudent().to.parameters", "higher.innerloop_ctx", "comms-weighting.do_train_student", "comms-weighting.do_train_teacher", "ConvNetStudent().to.load_state_dict", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "models.ConvNetTeacher2().to", "ConvNetStudent().to.state_dict", "fnet.state_dict", "ConvNetTeacher2().to.state_dict", "models.ConvNetTeacher", "models.ConvNetStudent", "models.ConvNetTeacher2"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.update_lossdict", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.update_lossdict", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.eval_student", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.update_lossdict", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.eval_student", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.update_lossdict", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.eval_student", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.update_lossdict", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.do_train_student", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.do_train_teacher"], ["", "def", "train", "(", "train_dl", ",", "val_dl", ",", "test_dl", ",", "num_steps", "=", "args", ".", "train_steps", ",", "tsd", "=", "None", ",", "ssd", "=", "None", ")", ":", "\n", "\n", "    ", "if", "tsd", "is", "None", ":", "\n", "        ", "if", "args", ".", "arch", "==", "'curr'", ":", "\n", "            ", "teacher", "=", "ConvNetTeacher", "(", "args", ".", "dataset", ",", "args", ".", "inner_steps", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "arch", "==", "'nocurr'", ":", "\n", "            ", "teacher", "=", "ConvNetTeacher2", "(", "args", ".", "dataset", ",", "args", ".", "inner_steps", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "teacher_optim", "=", "torch", ".", "optim", ".", "Adam", "(", "teacher", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "outer_lr", ")", "\n", "\n", "stud_state_dict", "=", "None", "if", "ssd", "is", "None", "else", "copy", ".", "deepcopy", "(", "ssd", ")", "\n", "stud_train_ld", "=", "{", "}", "\n", "stud_val_ld", "=", "{", "}", "\n", "stud_test_ld", "=", "{", "}", "\n", "\n", "teacher_train_ld", "=", "{", "}", "\n", "\n", "for", "ep", "in", "range", "(", "num_steps", ")", ":", "\n", "        ", "if", "args", ".", "studentarch", "==", "'cbr'", ":", "\n", "            ", "student", "=", "ConvNetStudent", "(", "args", ".", "dataset", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "# only support small convnet for student during commentary learning (memory constraints)", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# This helps keep the init params fixed for each student", "\n", "", "if", "stud_state_dict", "is", "None", ":", "\n", "            ", "stud_state_dict", "=", "copy", ".", "deepcopy", "(", "student", ".", "state_dict", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "student", ".", "load_state_dict", "(", "stud_state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "", "stud_optim", "=", "torch", ".", "optim", ".", "Adam", "(", "student", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "inner_lr", ")", "\n", "\n", "teacher_optim", ".", "zero_grad", "(", ")", "\n", "\n", "# The outer loop optimiser (teacher optimiser) does not change the student params, so copy_initial_weights can be True or False", "\n", "with", "higher", ".", "innerloop_ctx", "(", "student", ",", "stud_optim", ",", "copy_initial_weights", "=", "False", ")", "as", "(", "fnet", ",", "diffopt", ")", ":", "\n", "            ", "student_ld", ",", "fnet", "=", "do_train_student", "(", "fnet", ",", "diffopt", ",", "teacher", ",", "train_dl", ")", "\n", "# Note: do_train_student does not edit the .grad field of teacher parameters", "\n", "# Therefore, no need to clear teacher grads before do_train_teacher.", "\n", "teacher_ld", ",", "teacher", "=", "do_train_teacher", "(", "teacher", ",", "teacher_optim", ",", "fnet", ",", "val_dl", ")", "\n", "student", ".", "load_state_dict", "(", "fnet", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "teacher_optim", ".", "step", "(", ")", "\n", "\n", "stud_train_ld", "=", "update_lossdict", "(", "stud_train_ld", ",", "student_ld", ")", "\n", "teacher_train_ld", "=", "update_lossdict", "(", "teacher_train_ld", ",", "teacher_ld", ")", "\n", "\n", "print", "(", "\"Teacher training step: \"", ",", "ep", ")", "\n", "\n", "tld", "=", "eval_student", "(", "student", ",", "test_dl", ")", "\n", "stud_test_ld", "=", "update_lossdict", "(", "stud_test_ld", ",", "tld", ")", "\n", "vld", "=", "eval_student", "(", "student", ",", "val_dl", ")", "\n", "stud_val_ld", "=", "update_lossdict", "(", "stud_val_ld", ",", "vld", ")", "\n", "\n", "train_ep", "=", "eval_student", "(", "student", ",", "train_dl", ")", "\n", "stud_train_ld", "=", "update_lossdict", "(", "stud_train_ld", ",", "train_ep", ")", "\n", "\n", "if", "ep", "%", "10", "==", "0", ":", "\n", "            ", "teach_path", "=", "os", ".", "path", ".", "join", "(", "savefol", ",", "'teacher-{arch}-step{sp}.ckpt'", ".", "format", "(", "arch", "=", "args", ".", "arch", ",", "sp", "=", "ep", ")", ")", "\n", "torch", ".", "save", "(", "teacher", ".", "state_dict", "(", ")", ",", "teach_path", ")", "\n", "\n", "", "", "return", "teacher", ",", "stud_train_ld", ",", "teacher_train_ld", ",", "stud_val_ld", ",", "stud_test_ld", ",", "stud_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.train_mixup.saver": [[34, 53], ["torch.save", "torch.save", "torch.save", "elementary_model.state_dict", "elementary_optimizer.state_dict", "mixup.detach().cpu().numpy", "hyper_optimizer.state_dict", "mixup.detach().cpu", "mixup.detach"], "function", ["None"], ["def", "saver", "(", "epoch", ",", "elementary_model", ",", "elementary_optimizer", ",", "mixup", ",", "hyper_optimizer", ",", "path", ")", ":", "\n", "    ", "\"\"\"\n\n    :param epoch:\n    :param elementary_model:\n    :param elementary_optimizer:\n    :param maskingnet:\n    :param reweighting_net:\n    :param hyper_optimizer:\n    :param path:\n    :return:\n    \"\"\"", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'elementary_model_state_dict'", ":", "elementary_model", ".", "state_dict", "(", ")", ",", "\n", "'elementary_optimizer_state_dict'", ":", "elementary_optimizer", ".", "state_dict", "(", ")", ",", "\n", "'mixup_grid'", ":", "mixup", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'hyper_optimizer_state_dict'", ":", "hyper_optimizer", ".", "state_dict", "(", ")", "\n", "}", ",", "path", "+", "'/checkpoint.pt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.train_mixup.load_mod_dl": [[55, 96], ["models.simple_models.CBRStudent.cuda", "cnn.cuda.train", "data_loaders.load_cifar10", "models.resnet.ResNet18", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.load", "torch.load", "torch.load", "models.simple_models.CBRStudent.load_state_dict", "data_loaders.load_cifar100", "models.simple_models.CBRStudent", "data_loaders.load_mnist", "torch.ones", "torch.ones", "torch.ones"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.train", "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.data_loaders.load_cifar10", "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.ResNet18", "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.data_loaders.load_cifar100", "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.data_loaders.load_mnist"], ["", "def", "load_mod_dl", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    :param args:\n    :return:\n    \"\"\"", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "imsize", ",", "in_channel", ",", "num_classes", "=", "32", ",", "3", ",", "10", "\n", "train_loader", ",", "val_loader", ",", "test_loader", "=", "data_loaders", ".", "load_cifar10", "(", "args", ".", "batch_size", ",", "val_split", "=", "True", ",", "\n", "augmentation", "=", "args", ".", "data_augmentation", ",", "\n", "subset", "=", "[", "args", ".", "train_size", ",", "args", ".", "val_size", ",", "\n", "args", ".", "test_size", "]", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "imsize", ",", "in_channel", ",", "num_classes", "=", "32", ",", "3", ",", "100", "\n", "train_loader", ",", "val_loader", ",", "test_loader", "=", "data_loaders", ".", "load_cifar100", "(", "args", ".", "batch_size", ",", "val_split", "=", "True", ",", "\n", "augmentation", "=", "args", ".", "data_augmentation", ",", "\n", "subset", "=", "[", "args", ".", "train_size", ",", "args", ".", "val_size", ",", "\n", "args", ".", "test_size", "]", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "imsize", ",", "in_channel", ",", "num_classes", "=", "28", ",", "1", ",", "10", "\n", "num_train", "=", "50000", "\n", "train_loader", ",", "val_loader", ",", "test_loader", "=", "data_loaders", ".", "load_mnist", "(", "args", ".", "batch_size", ",", "\n", "subset", "=", "[", "args", ".", "train_size", ",", "args", ".", "val_size", ",", "args", ".", "test_size", "]", ",", "\n", "num_train", "=", "num_train", ",", "only_split_train", "=", "False", ")", "\n", "\n", "\n", "", "if", "args", ".", "model", "==", "'resnet18'", ":", "\n", "        ", "cnn", "=", "ResNet18", "(", "num_classes", "=", "num_classes", ",", "num_channels", "=", "in_channel", ")", "\n", "", "elif", "args", ".", "model", "==", "'cbr'", ":", "\n", "        ", "cnn", "=", "CBRStudent", "(", "in_channel", ",", "num_classes", ")", "\n", "\n", "", "mixup_mat", "=", "-", "1", "*", "torch", ".", "ones", "(", "[", "num_classes", ",", "num_classes", "]", ")", ".", "cuda", "(", ")", "\n", "mixup_mat", ".", "requires_grad", "=", "True", "\n", "\n", "checkpoint", "=", "None", "\n", "if", "args", ".", "load_baseline_checkpoint", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "load_baseline_checkpoint", ")", "\n", "cnn", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", "\n", "\n", "", "model", "=", "cnn", ".", "cuda", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "return", "model", ",", "mixup_mat", ",", "train_loader", ",", "val_loader", ",", "test_loader", ",", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.train_mixup.zero_hypergrad": [[99, 111], ["train_mixup.experiment.get_hyper_train", "numpy.prod"], "function", ["None"], ["", "def", "zero_hypergrad", "(", "get_hyper_train", ")", ":", "\n", "    ", "\"\"\"\n\n    :param get_hyper_train:\n    :return:\n    \"\"\"", "\n", "current_index", "=", "0", "\n", "for", "p", "in", "get_hyper_train", "(", ")", ":", "\n", "        ", "p_num_params", "=", "np", ".", "prod", "(", "p", ".", "shape", ")", "\n", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "            ", "p", ".", "grad", "=", "p", ".", "grad", "*", "0", "\n", "", "current_index", "+=", "p_num_params", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.train_mixup.store_hypergrad": [[113, 125], ["train_mixup.experiment.get_hyper_train", "numpy.prod", "total_d_val_loss_d_lambda[].view"], "function", ["None"], ["", "", "def", "store_hypergrad", "(", "get_hyper_train", ",", "total_d_val_loss_d_lambda", ")", ":", "\n", "    ", "\"\"\"\n\n    :param get_hyper_train:\n    :param total_d_val_loss_d_lambda:\n    :return:\n    \"\"\"", "\n", "current_index", "=", "0", "\n", "for", "p", "in", "get_hyper_train", "(", ")", ":", "\n", "        ", "p_num_params", "=", "np", ".", "prod", "(", "p", ".", "shape", ")", "\n", "p", ".", "grad", "=", "total_d_val_loss_d_lambda", "[", "current_index", ":", "current_index", "+", "p_num_params", "]", ".", "view", "(", "p", ".", "shape", ")", "\n", "current_index", "+=", "p_num_params", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.train_mixup.neumann_hyperstep_preconditioner": [[127, 144], ["d_val_loss_d_theta.detach", "utils.util.gather_flat_grad", "torch.autograd.grad", "model.parameters", "counter.view"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.gather_flat_grad"], ["", "", "def", "neumann_hyperstep_preconditioner", "(", "d_val_loss_d_theta", ",", "d_train_loss_d_w", ",", "elementary_lr", ",", "num_neumann_terms", ",", "model", ")", ":", "\n", "    ", "preconditioner", "=", "d_val_loss_d_theta", ".", "detach", "(", ")", "\n", "counter", "=", "preconditioner", "\n", "\n", "# Do the fixed point iteration to approximate the vector-inverseHessian product", "\n", "i", "=", "0", "\n", "while", "i", "<", "num_neumann_terms", ":", "# for i in range(num_neumann_terms):", "\n", "        ", "old_counter", "=", "counter", "\n", "\n", "# This increments counter to counter * (I - hessian) = counter - counter * hessian", "\n", "hessian_term", "=", "gather_flat_grad", "(", "\n", "grad", "(", "d_train_loss_d_w", ",", "model", ".", "parameters", "(", ")", ",", "grad_outputs", "=", "counter", ".", "view", "(", "-", "1", ")", ",", "retain_graph", "=", "True", ")", ")", "\n", "counter", "=", "old_counter", "-", "elementary_lr", "*", "hessian_term", "\n", "\n", "preconditioner", "=", "preconditioner", "+", "counter", "\n", "i", "+=", "1", "\n", "", "return", "elementary_lr", "*", "preconditioner", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.train_mixup.get_models": [[146, 149], ["train_mixup.load_mod_dl"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.test_mixup.load_mod_dl"], ["", "def", "get_models", "(", "args", ")", ":", "\n", "    ", "student", ",", "mixmat", ",", "train_loader", ",", "val_loader", ",", "test_loader", ",", "checkpoint", "=", "load_mod_dl", "(", "args", ")", "\n", "return", "student", ",", "mixmat", ",", "train_loader", ",", "val_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.train_mixup.mixup_data": [[151, 162], ["torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "x.size", "torch.randperm", "torch.randperm", "torch.randperm", "range", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "function", ["None"], ["", "def", "mixup_data", "(", "x", ",", "y", ",", "lam_rel", ")", ":", "\n", "    ", "'''Returns mixed inputs, pairs of targets, and lambda'''", "\n", "batch_size", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "index", "=", "torch", ".", "randperm", "(", "batch_size", ")", ".", "cuda", "(", ")", "\n", "\n", "t_idx", "=", "torch", ".", "stack", "(", "[", "y", ",", "y", "[", "index", "]", "]", ",", "dim", "=", "1", ")", "\n", "lam", "=", "torch", ".", "stack", "(", "[", "lam_rel", "[", "t_idx", "[", "i", ",", "0", "]", ",", "t_idx", "[", "i", ",", "1", "]", "]", "for", "i", "in", "range", "(", "batch_size", ")", "]", ")", "\n", "lam", "=", "(", "1", "-", "0.5", "*", "torch", ".", "sigmoid", "(", "lam", ")", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "mixed_x", "=", "lam", "*", "x", "+", "(", "1", "-", "lam", ")", "*", "x", "[", "index", ",", ":", "]", "\n", "y_a", ",", "y_b", "=", "y", ",", "y", "[", "index", "]", "\n", "return", "mixed_x", ",", "y_a", ",", "y_b", ",", "lam", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.train_mixup.mixup_criterion": [[164, 166], ["torch.mean", "torch.mean", "torch.mean", "lam.squeeze", "torch.cross_entropy", "torch.cross_entropy"], "function", ["None"], ["", "def", "mixup_criterion", "(", "pred", ",", "y_a", ",", "y_b", ",", "lam", ")", ":", "\n", "    ", "return", "torch", ".", "mean", "(", "lam", ".", "squeeze", "(", ")", "*", "F", ".", "cross_entropy", "(", "pred", ",", "y_a", ",", "reduction", "=", "'none'", ")", "+", "(", "1", "-", "lam", ")", ".", "squeeze", "(", ")", "*", "F", ".", "cross_entropy", "(", "pred", ",", "y_b", ",", "reduction", "=", "'none'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.train_mixup.experiment": [[168, 387], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "train_mixup.get_models", "aug_args_loading_utils.load_logger", "os.path.join", "os.makedirs", "torch.Adam", "torch.Adam", "time.time", "train_mixup.experiment.test"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.test_mixup.get_models", "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.aug_args_loading_utils.load_logger"], ["", "def", "experiment", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "do_print", ":", "\n", "        ", "print", "(", "args", ")", "\n", "", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "model", ",", "mixup_mat", ",", "train_loader", ",", "val_loader", ",", "test_loader", "=", "get_models", "(", "args", ")", "\n", "\n", "csv_logger", ",", "_", "=", "load_logger", "(", "args", ")", "\n", "\n", "# specify location for model saving", "\n", "args", ".", "save_loc", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "get_id", "(", "args", ")", ",", "'train_aug_checkpoints'", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "save_loc", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Hyperparameter access functions", "\n", "def", "get_hyper_train", "(", ")", ":", "\n", "        ", "return", "[", "mixup_mat", "]", "\n", "\n", "", "def", "get_hyper_train_flat", "(", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "p", ".", "view", "(", "-", "1", ")", "for", "p", "in", "mixup_mat", "]", ")", "\n", "\n", "# Setup the optimizers", "\n", "", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "hyper_optimizer", "=", "optim", ".", "Adam", "(", "get_hyper_train", "(", ")", ",", "lr", "=", "args", ".", "hyperlr", ")", "\n", "\n", "def", "train_loss_func", "(", "x", ",", "y", ")", ":", "\n", "        ", "x", ",", "y", "=", "x", ".", "cuda", "(", ")", ",", "y", ".", "cuda", "(", ")", "\n", "reg", "=", "0.", "\n", "if", "args", ".", "num_neumann_terms", ">=", "0", ":", "\n", "            ", "mixed_x", ",", "y_a", ",", "y_b", ",", "lam", "=", "mixup_data", "(", "x", ",", "y", ",", "mixup_mat", ")", "\n", "pred", "=", "model", "(", "mixed_x", ")", "\n", "xentropy_loss", "=", "mixup_criterion", "(", "pred", ",", "y_a", ",", "y_b", ",", "lam", ")", "\n", "", "else", ":", "\n", "            ", "pred", "=", "model", "(", "x", ")", "\n", "xentropy_loss", "=", "F", ".", "cross_entropy", "(", "pred", ",", "y", ",", "reduction", "=", "'none'", ")", "\n", "\n", "", "final_loss", "=", "xentropy_loss", ".", "mean", "(", ")", "\n", "return", "final_loss", ",", "pred", "\n", "\n", "", "def", "val_loss_func", "(", "x", ",", "y", ")", ":", "\n", "        ", "x", ",", "y", "=", "x", ".", "cuda", "(", ")", ",", "y", ".", "cuda", "(", ")", "\n", "pred", "=", "model", "(", "x", ")", "\n", "xentropy_loss", "=", "F", ".", "cross_entropy", "(", "pred", ",", "y", ")", "\n", "return", "xentropy_loss", "\n", "\n", "", "def", "test", "(", "loader", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "# Change model to 'eval' mode (BN uses moving mean/var).", "\n", "correct", ",", "total", "=", "0.", ",", "0.", "\n", "losses", "=", "[", "]", "\n", "true", ",", "probpreds", "=", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "images", ",", "labels", "=", "images", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "pred", "=", "model", "(", "images", ")", "\n", "xentropy_loss", "=", "F", ".", "cross_entropy", "(", "pred", ",", "labels", ")", "\n", "losses", ".", "append", "(", "xentropy_loss", ".", "item", "(", ")", ")", "\n", "\n", "", "predcls", "=", "torch", ".", "max", "(", "pred", ".", "data", ",", "1", ")", "[", "1", "]", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "correct", "+=", "(", "predcls", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "avg_loss", "=", "float", "(", "np", ".", "mean", "(", "losses", ")", ")", "\n", "acc", "=", "correct", "/", "total", "\n", "model", ".", "train", "(", ")", "\n", "return", "avg_loss", ",", "acc", "\n", "\n", "", "def", "hyper_step", "(", "elementary_lr", ",", "do_true_inverse", "=", "False", ")", ":", "\n", "        ", "\"\"\"Estimate the hypergradient, and take an update with it.\n        \"\"\"", "\n", "zero_hypergrad", "(", "get_hyper_train", ")", "\n", "num_weights", ",", "num_hypers", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", ",", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "get_hyper_train", "(", ")", ")", "\n", "d_train_loss_d_w", "=", "torch", ".", "zeros", "(", "num_weights", ")", ".", "cuda", "(", ")", "\n", "model", ".", "train", "(", ")", ",", "model", ".", "zero_grad", "(", ")", "\n", "\n", "# First compute train loss on a batch", "\n", "for", "batch_idx", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "train_loss", ",", "_", "=", "train_loss_func", "(", "x", ",", "y", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "d_train_loss_d_w", "+=", "gather_flat_grad", "(", "grad", "(", "train_loss", ",", "model", ".", "parameters", "(", ")", ",", "create_graph", "=", "True", ")", ")", "\n", "break", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# Compute gradients of the validation loss w.r.t. the weights", "\n", "d_val_loss_d_theta", ",", "direct_grad", "=", "torch", ".", "zeros", "(", "num_weights", ")", ".", "cuda", "(", ")", ",", "torch", ".", "zeros", "(", "num_hypers", ")", ".", "cuda", "(", ")", "\n", "model", ".", "train", "(", ")", ",", "model", ".", "zero_grad", "(", ")", "\n", "for", "batch_idx", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "val_loss", "=", "val_loss_func", "(", "x", ",", "y", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "d_val_loss_d_theta", "+=", "gather_flat_grad", "(", "grad", "(", "val_loss", ",", "model", ".", "parameters", "(", ")", ",", "retain_graph", "=", "False", ")", ")", "\n", "break", "\n", "\n", "# Initialize the preconditioner and counter", "\n", "", "preconditioner", "=", "d_val_loss_d_theta", "\n", "# Neumann series to do hessian inversion", "\n", "preconditioner", "=", "neumann_hyperstep_preconditioner", "(", "d_val_loss_d_theta", ",", "d_train_loss_d_w", ",", "elementary_lr", ",", "\n", "args", ".", "num_neumann_terms", ",", "model", ")", "\n", "\n", "# compute d / d lambda (partial Lv / partial w * partial Lt / partial w)", "\n", "# = (partial Lv / partial w * partial^2 Lt / (partial w partial lambda))", "\n", "indirect_grad", "=", "gather_flat_grad", "(", "\n", "grad", "(", "d_train_loss_d_w", ",", "get_hyper_train", "(", ")", ",", "grad_outputs", "=", "preconditioner", ".", "view", "(", "-", "1", ")", ")", ")", "\n", "\n", "# Direct grad is zero here due to no data augmentation for val data.", "\n", "hypergrad", "=", "direct_grad", "+", "indirect_grad", "\n", "\n", "zero_hypergrad", "(", "get_hyper_train", ")", "\n", "store_hypergrad", "(", "get_hyper_train", ",", "-", "hypergrad", ")", "\n", "return", "val_loss", ",", "hypergrad", ".", "norm", "(", ")", "\n", "\n", "", "init_time", "=", "time", ".", "time", "(", ")", "\n", "val_loss", ",", "val_acc", "=", "test", "(", "val_loader", ")", "\n", "test_loss", ",", "test_acc", "=", "test", "(", "test_loader", ")", "\n", "if", "args", ".", "do_print", ":", "\n", "        ", "print", "(", "f\"Initial Val Loss: {val_loss, val_acc}\"", ")", "\n", "print", "(", "f\"Initial Test Loss: {test_loss, test_acc}\"", ")", "\n", "", "iteration", "=", "0", "\n", "\n", "# Main training loop.", "\n", "for", "epoch", "in", "range", "(", "0", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "reg_anneal_epoch", "=", "epoch", "\n", "xentropy_loss_avg", "=", "0.", "\n", "total_val_loss", ",", "val_loss", "=", "0.", ",", "0.", "\n", "correct", "=", "0.", "\n", "total", "=", "0.", "\n", "weight_norm", ",", "grad_norm", "=", ".0", ",", ".0", "\n", "\n", "if", "args", ".", "do_print", ":", "\n", "            ", "progress_bar", "=", "tqdm", "(", "train_loader", ")", "\n", "", "else", ":", "\n", "            ", "progress_bar", "=", "train_loader", "\n", "\n", "# Frequency of hypersteps", "\n", "", "num_tune_hyper", "=", "1", "\n", "hyper_num", "=", "0", "\n", "\n", "for", "i", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "progress_bar", ")", ":", "\n", "            ", "if", "args", ".", "do_print", ":", "\n", "                ", "progress_bar", ".", "set_description", "(", "'Epoch '", "+", "str", "(", "epoch", ")", ")", "\n", "\n", "", "images", ",", "labels", "=", "images", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# standard base model steps", "\n", "xentropy_loss", ",", "pred", "=", "train_loss_func", "(", "images", ",", "labels", ")", "\n", "xentropy_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "xentropy_loss_avg", "+=", "xentropy_loss", ".", "item", "(", ")", "\n", "\n", "# only do hyper steps if we have finished warmup epochs and we have nonneg steps in Neumann series", "\n", "if", "epoch", ">", "args", ".", "warmup_epochs", "and", "args", ".", "num_neumann_terms", ">=", "0", ":", "\n", "# check if we are due to tune hypers", "\n", "                ", "if", "i", "%", "num_tune_hyper", "==", "0", ":", "\n", "\n", "# Grab LR -- need it for hyper step", "\n", "                    ", "cur_lr", "=", "1.0", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                        ", "cur_lr", "=", "param_group", "[", "'lr'", "]", "\n", "break", "\n", "\n", "# get hypergrad and store it in .grad fields", "\n", "", "val_loss", ",", "grad_norm", "=", "hyper_step", "(", "cur_lr", ")", "\n", "# update hypers using this. ", "\n", "hyper_optimizer", ".", "step", "(", ")", "\n", "\n", "weight_norm", "=", "get_hyper_train_flat", "(", ")", ".", "norm", "(", ")", "\n", "total_val_loss", "+=", "val_loss", ".", "item", "(", ")", "\n", "hyper_num", "+=", "1", "\n", "\n", "", "", "iteration", "+=", "1", "\n", "\n", "# Calculate running average of accuracy", "\n", "pred", "=", "torch", ".", "max", "(", "pred", ".", "data", ",", "1", ")", "[", "1", "]", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "correct", "+=", "(", "pred", "==", "labels", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "accuracy", "=", "correct", "/", "total", "\n", "\n", "if", "args", ".", "do_print", ":", "\n", "                ", "progress_bar", ".", "set_postfix", "(", "\n", "train", "=", "'%.4f'", "%", "(", "xentropy_loss_avg", "/", "(", "i", "+", "1", ")", ")", ",", "\n", "val", "=", "'%.4f'", "%", "(", "total_val_loss", "/", "max", "(", "hyper_num", ",", "1", ")", ")", ",", "\n", "acc", "=", "'%.4f'", "%", "accuracy", ",", "\n", "weight", "=", "'%.4f'", "%", "weight_norm", ",", "\n", "update", "=", "'%.4f'", "%", "grad_norm", "\n", ")", "\n", "", "if", "i", "%", "(", "num_tune_hyper", "*", "100", ")", "==", "0", ":", "\n", "                ", "save_mixup", "(", "mixup_mat", ",", "epoch", ",", "iteration", ",", "args", ")", "\n", "val_loss", ",", "val_acc", "=", "test", "(", "val_loader", ")", "\n", "csv_logger", ".", "writerow", "(", "{", "'epoch'", ":", "str", "(", "epoch", ")", ",", "\n", "'train_loss'", ":", "str", "(", "xentropy_loss_avg", "/", "(", "i", "+", "1", ")", ")", ",", "'train_acc'", ":", "str", "(", "accuracy", ")", ",", "\n", "'val_loss'", ":", "str", "(", "val_loss", ")", ",", "'val_acc'", ":", "str", "(", "val_acc", ")", ",", "\n", "'test_loss'", ":", "str", "(", "test_loss", ")", ",", "'test_acc'", ":", "str", "(", "test_acc", ")", ",", "\n", "'run_time'", ":", "time", ".", "time", "(", ")", "-", "init_time", ",", "\n", "'iteration'", ":", "iteration", "}", ")", "\n", "", "", "train_loss", "=", "xentropy_loss_avg", "/", "(", "i", "+", "1", ")", "\n", "saver", "(", "iteration", ",", "model", ",", "optimizer", ",", "mixup_mat", ",", "hyper_optimizer", ",", "args", ".", "save_loc", ")", "\n", "only_print_final_vals", "=", "not", "args", ".", "do_print", "\n", "if", "not", "only_print_final_vals", ":", "\n", "            ", "val_loss", ",", "val_acc", "=", "test", "(", "val_loader", ")", "\n", "test_loss", ",", "test_acc", "=", "test", "(", "test_loader", ")", "\n", "tqdm", ".", "write", "(", "'val loss: {:6.4f} | val acc: {:6.4f} | test loss: {:6.4f} | test_acc: {:6.4f}'", ".", "format", "(", "\n", "val_loss", ",", "val_acc", ",", "test_loss", ",", "test_acc", ")", ")", "\n", "\n", "csv_logger", ".", "writerow", "(", "{", "'epoch'", ":", "str", "(", "epoch", ")", ",", "\n", "'train_loss'", ":", "str", "(", "train_loss", ")", ",", "'train_acc'", ":", "str", "(", "accuracy", ")", ",", "\n", "'val_loss'", ":", "str", "(", "val_loss", ")", ",", "'val_acc'", ":", "str", "(", "val_acc", ")", ",", "\n", "'test_loss'", ":", "str", "(", "test_loss", ")", ",", "'test_acc'", ":", "str", "(", "test_acc", ")", ",", "\n", "'run_time'", ":", "time", ".", "time", "(", ")", "-", "init_time", ",", "'iteration'", ":", "iteration", "}", ")", "\n", "", "else", ":", "\n", "            ", "if", "args", ".", "do_print", ":", "\n", "                ", "val_loss", ",", "val_acc", "=", "test", "(", "val_loader", ",", "do_test_augment", "=", "False", ")", "\n", "tqdm", ".", "write", "(", "'val loss: {:6.4f} | val acc: {:6.4f}'", ".", "format", "(", "val_loss", ",", "val_acc", ")", ")", "\n", "", "", "", "val_loss", ",", "val_acc", "=", "test", "(", "val_loader", ")", "\n", "test_loss", ",", "test_acc", "=", "test", "(", "test_loader", ")", "\n", "saver", "(", "iteration", ",", "model", ",", "optimizer", ",", "mixup_mat", ",", "hyper_optimizer", ",", "args", ".", "save_loc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.data_loaders.getSubset": [[20, 22], ["torch.utils.data.Subset", "numpy.random.randint", "len"], "function", ["None"], ["def", "getSubset", "(", "data", ",", "size", ")", ":", "\n", "    ", "return", "Subset", "(", "data", ",", "np", ".", "random", ".", "randint", "(", "0", ",", "high", "=", "len", "(", "data", ")", "-", "1", ",", "size", "=", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.data_loaders.load_mnist": [[24, 62], ["transformations.append", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.datasets.MNIST", "torch.utils.data.random_split", "torchvision.datasets.MNIST", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "data_loaders.getSubset", "data_loaders.getSubset", "len"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.data_loaders.getSubset", "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.data_loaders.getSubset"], ["", "def", "load_mnist", "(", "batch_size", ",", "val_split", "=", "True", ",", "subset", "=", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", ",", "num_train", "=", "50000", ",", "only_split_train", "=", "False", ")", ":", "\n", "    ", "transformations", "=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "transformations", ".", "append", "(", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transformations", ")", "\n", "\n", "if", "val_split", ":", "\n", "# num_train = 50000  # Will split training set into 50,000 training and 10,000 validation images", "\n", "# Train set", "\n", "        ", "original_trainset", "=", "datasets", ".", "MNIST", "(", "root", "=", "'./data/mnist'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "trainset", "=", "original_trainset", "\n", "\n", "trainset", ",", "valset", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "trainset", ",", "[", "num_train", ",", "len", "(", "trainset", ")", "-", "num_train", "]", ")", "\n", "\n", "# Test set", "\n", "testset", "=", "datasets", ".", "MNIST", "(", "root", "=", "'./data/mnist'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "\n", "train_dataloader", "=", "DataLoader", "(", "trainset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "0", ")", "# 50,000 images", "\n", "val_dataloader", "=", "DataLoader", "(", "valset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "0", ")", "# 10,000 images", "\n", "test_dataloader", "=", "DataLoader", "(", "testset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "False", ",", "\n", "num_workers", "=", "0", ")", "# 10,000 images", "\n", "\n", "return", "train_dataloader", ",", "val_dataloader", ",", "test_dataloader", "\n", "", "else", ":", "\n", "        ", "trainset", "=", "datasets", ".", "MNIST", "(", "root", "=", "'./data/mnist'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "testset", "=", "datasets", ".", "MNIST", "(", "root", "=", "'./data/mnist'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "\n", "if", "subset", "[", "0", "]", "!=", "-", "1", ":", "\n", "            ", "trainset", "=", "getSubset", "(", "trainset", ",", "subset", "[", "0", "]", ")", "\n", "", "if", "subset", "[", "2", "]", "!=", "-", "1", ":", "\n", "            ", "testset", "=", "getSubset", "(", "testset", ",", "subset", "[", "2", "]", ")", "\n", "\n", "", "train_dataloader", "=", "DataLoader", "(", "trainset", ",", "batch_size", "=", "batch_size", ",", "pin_memory", "=", "True", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "0", ")", "# 50,000 images", "\n", "test_dataloader", "=", "DataLoader", "(", "testset", ",", "batch_size", "=", "batch_size", ",", "pin_memory", "=", "True", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "0", ")", "# 10,000 images", "\n", "return", "train_dataloader", ",", "None", ",", "test_dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.data_loaders.load_cifar10": [[66, 135], ["train_transforms.append", "test_transforms.append", "torchvision.transforms.Normalize", "train_transforms.append", "test_transforms.append", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "train_transforms.append", "train_transforms.append", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.datasets.CIFAR10", "torch.utils.data.random_split", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "numpy.random.randint", "data_loaders.getSubset", "data_loaders.getSubset", "torch.utils.data.Subset", "data_loaders.getSubset", "torch.utils.data.Subset", "data_loaders.getSubset", "data_loaders.getSubset", "data_loaders.getSubset", "len", "len"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.data_loaders.getSubset", "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.data_loaders.getSubset", "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.data_loaders.getSubset", "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.data_loaders.getSubset", "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.data_loaders.getSubset", "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.data_loaders.getSubset"], ["", "", "def", "load_cifar10", "(", "batch_size", ",", "num_train", "=", "45000", ",", "val_split", "=", "True", ",", "augmentation", "=", "False", ",", "subset", "=", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", ",", "\n", "only_split_train", "=", "False", ")", ":", "\n", "    ", "train_transforms", "=", "[", "]", "\n", "test_transforms", "=", "[", "]", "\n", "\n", "if", "augmentation", ":", "\n", "        ", "train_transforms", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ")", "\n", "train_transforms", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "\n", "", "train_transforms", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "test_transforms", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", ",", "\n", "std", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", ")", "\n", "train_transforms", ".", "append", "(", "normalize", ")", "\n", "test_transforms", ".", "append", "(", "normalize", ")", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "train_transforms", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "test_transforms", ")", "\n", "\n", "if", "val_split", ":", "\n", "# num_train = 45000  # Will split training set into 45,000 training and 5,000 validation images", "\n", "# Train set", "\n", "        ", "original_trainset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data/cifar10'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "transform", "=", "train_transform", ")", "\n", "trainset", "=", "original_trainset", "\n", "trainset", ",", "valset", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "trainset", ",", "[", "num_train", ",", "len", "(", "trainset", ")", "-", "num_train", "]", ")", "\n", "# Test set", "\n", "testset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data/cifar10'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "test_transform", ")", "\n", "\n", "if", "only_split_train", ":", "\n", "            ", "rand_ind", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "high", "=", "len", "(", "original_trainset", ")", "-", "1", ",", "size", "=", "subset", "[", "0", "]", "+", "subset", "[", "1", "]", ")", "\n", "if", "subset", "[", "0", "]", "!=", "-", "1", ":", "\n", "                ", "trainset", "=", "Subset", "(", "original_trainset", ",", "rand_ind", "[", ":", "subset", "[", "0", "]", "]", ")", "\n", "", "if", "subset", "[", "2", "]", "!=", "-", "1", ":", "\n", "                ", "testset", "=", "getSubset", "(", "testset", ",", "subset", "[", "2", "]", ")", "\n", "", "if", "subset", "[", "1", "]", "!=", "-", "1", ":", "\n", "                ", "valset", "=", "Subset", "(", "original_trainset", ",", "rand_ind", "[", "subset", "[", "0", "]", ":", "subset", "[", "0", "]", "+", "subset", "[", "1", "]", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "subset", "[", "0", "]", "!=", "-", "1", ":", "\n", "                ", "trainset", "=", "getSubset", "(", "trainset", ",", "subset", "[", "0", "]", ")", "\n", "", "if", "subset", "[", "2", "]", "!=", "-", "1", ":", "\n", "                ", "testset", "=", "getSubset", "(", "testset", ",", "subset", "[", "2", "]", ")", "\n", "", "if", "subset", "[", "1", "]", "!=", "-", "1", ":", "\n", "                ", "valset", "=", "getSubset", "(", "valset", ",", "subset", "[", "1", "]", ")", "\n", "\n", "", "", "train_dataloader", "=", "DataLoader", "(", "trainset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "0", ")", "# 45,000 images", "\n", "val_dataloader", "=", "DataLoader", "(", "valset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "0", ")", "# 5,000 images", "\n", "test_dataloader", "=", "DataLoader", "(", "testset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "0", ")", "# 10,000 images", "\n", "\n", "return", "train_dataloader", ",", "val_dataloader", ",", "test_dataloader", "\n", "", "else", ":", "\n", "        ", "trainset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data/cifar10'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "testset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data/cifar10'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "test_transform", ")", "\n", "\n", "if", "subset", "[", "0", "]", "!=", "-", "1", ":", "\n", "            ", "trainset", "=", "getSubset", "(", "trainset", ",", "subset", "[", "0", "]", ")", "\n", "", "if", "subset", "[", "2", "]", "!=", "-", "1", ":", "\n", "            ", "testset", "=", "getSubset", "(", "testset", ",", "subset", "[", "2", "]", ")", "\n", "\n", "", "train_dataloader", "=", "DataLoader", "(", "trainset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "2", ")", "# 50,000 images", "\n", "test_dataloader", "=", "DataLoader", "(", "testset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "2", ")", "# 10,000 images", "\n", "\n", "return", "train_dataloader", ",", "None", ",", "test_dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.data_loaders.load_cifar100": [[138, 190], ["train_transforms.append", "test_transforms.append", "torchvision.transforms.Normalize", "train_transforms.append", "test_transforms.append", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "train_transforms.append", "train_transforms.append", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.datasets.CIFAR100", "torch.utils.data.random_split", "torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "data_loaders.getSubset", "data_loaders.getSubset", "data_loaders.getSubset", "data_loaders.getSubset", "data_loaders.getSubset", "len"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.data_loaders.getSubset", "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.data_loaders.getSubset", "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.data_loaders.getSubset", "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.data_loaders.getSubset", "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.data_loaders.getSubset"], ["", "", "def", "load_cifar100", "(", "batch_size", ",", "num_train", "=", "45000", ",", "val_split", "=", "True", ",", "augmentation", "=", "False", ",", "subset", "=", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ":", "\n", "    ", "train_transforms", "=", "[", "]", "\n", "test_transforms", "=", "[", "]", "\n", "\n", "if", "augmentation", ":", "\n", "        ", "train_transforms", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ")", "\n", "train_transforms", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "\n", "", "train_transforms", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "test_transforms", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", ",", "\n", "std", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", ")", "\n", "train_transforms", ".", "append", "(", "normalize", ")", "\n", "test_transforms", ".", "append", "(", "normalize", ")", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "train_transforms", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "test_transforms", ")", "\n", "\n", "if", "val_split", ":", "\n", "# Train set", "\n", "        ", "trainset", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "'./data/cifar100'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "\n", "trainset", ",", "valset", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "trainset", ",", "[", "num_train", ",", "len", "(", "trainset", ")", "-", "num_train", "]", ")", "\n", "# Test set", "\n", "testset", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "'./data/cifar100'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "test_transform", ")", "\n", "\n", "if", "subset", "[", "0", "]", "!=", "-", "1", ":", "\n", "            ", "trainset", "=", "getSubset", "(", "trainset", ",", "subset", "[", "0", "]", ")", "\n", "", "if", "subset", "[", "2", "]", "!=", "-", "1", ":", "\n", "            ", "testset", "=", "getSubset", "(", "testset", ",", "subset", "[", "2", "]", ")", "\n", "", "if", "subset", "[", "1", "]", "!=", "-", "1", ":", "\n", "            ", "valset", "=", "getSubset", "(", "valset", ",", "subset", "[", "1", "]", ")", "\n", "\n", "", "train_dataloader", "=", "DataLoader", "(", "trainset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "0", ")", "# 45,000 images", "\n", "val_dataloader", "=", "DataLoader", "(", "valset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "0", ")", "# 5,000 images", "\n", "test_dataloader", "=", "DataLoader", "(", "testset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "# 10,000 images", "\n", "\n", "return", "train_dataloader", ",", "val_dataloader", ",", "test_dataloader", "\n", "", "else", ":", "\n", "        ", "trainset", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "'./data/cifar100'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "testset", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "'./data/cifar100'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "test_transform", ")", "\n", "\n", "if", "subset", "[", "0", "]", "!=", "-", "1", ":", "\n", "            ", "trainset", "=", "getSubset", "(", "trainset", ",", "subset", "[", "0", "]", ")", "\n", "", "if", "subset", "[", "2", "]", "!=", "-", "1", ":", "\n", "            ", "testset", "=", "getSubset", "(", "testset", ",", "subset", "[", "2", "]", ")", "\n", "\n", "", "train_dataloader", "=", "DataLoader", "(", "trainset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "0", ")", "# 50,000 images", "\n", "test_dataloader", "=", "DataLoader", "(", "testset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "# 10,000 images", "\n", "\n", "return", "train_dataloader", ",", "None", ",", "test_dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.test_mixup.saver": [[33, 47], ["torch.save", "torch.save", "torch.save", "elementary_model.state_dict", "elementary_optimizer.state_dict"], "function", ["None"], ["def", "saver", "(", "epoch", ",", "elementary_model", ",", "elementary_optimizer", ",", "path", ")", ":", "\n", "    ", "\"\"\"\n\n    :param epoch:\n    :param elementary_model:\n    :param elementary_optimizer:\n    :param path:\n    :return:\n    \"\"\"", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'elementary_model_state_dict'", ":", "elementary_model", ".", "state_dict", "(", ")", ",", "\n", "'elementary_optimizer_state_dict'", ":", "elementary_optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "path", "+", "'/checkpoint.pt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.test_mixup.load_mod_dl": [[49, 99], ["models.simple_models.CBRStudent.cuda", "cnn.cuda.train", "data_loaders.load_cifar10", "models.resnet.ResNet18", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.load", "torch.load", "torch.load", "print", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "data_loaders.load_cifar100", "models.simple_models.CBRStudent", "numpy.random.RandomState", "np.random.RandomState.uniform().astype", "print", "data_loaders.load_mnist", "torch.ones", "torch.ones", "torch.ones", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "np.random.RandomState.uniform", "rng.uniform().astype.reshape"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.train", "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.data_loaders.load_cifar10", "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.ResNet18", "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.data_loaders.load_cifar100", "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.data_loaders.load_mnist"], ["", "def", "load_mod_dl", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n\n    :param args:\n    :return:\n    \"\"\"", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "imsize", ",", "in_channel", ",", "num_classes", "=", "32", ",", "3", ",", "10", "\n", "train_loader", ",", "val_loader", ",", "test_loader", "=", "data_loaders", ".", "load_cifar10", "(", "args", ".", "batch_size", ",", "val_split", "=", "True", ",", "\n", "augmentation", "=", "args", ".", "data_augmentation", ",", "\n", "subset", "=", "[", "args", ".", "train_size", ",", "args", ".", "val_size", ",", "\n", "args", ".", "test_size", "]", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "imsize", ",", "in_channel", ",", "num_classes", "=", "32", ",", "3", ",", "100", "\n", "train_loader", ",", "val_loader", ",", "test_loader", "=", "data_loaders", ".", "load_cifar100", "(", "args", ".", "batch_size", ",", "val_split", "=", "True", ",", "\n", "augmentation", "=", "args", ".", "data_augmentation", ",", "\n", "subset", "=", "[", "args", ".", "train_size", ",", "args", ".", "val_size", ",", "\n", "args", ".", "test_size", "]", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "imsize", ",", "in_channel", ",", "num_classes", "=", "28", ",", "1", ",", "10", "\n", "num_train", "=", "50000", "\n", "train_loader", ",", "val_loader", ",", "test_loader", "=", "data_loaders", ".", "load_mnist", "(", "args", ".", "batch_size", ",", "\n", "subset", "=", "[", "args", ".", "train_size", ",", "args", ".", "val_size", ",", "args", ".", "test_size", "]", ",", "\n", "num_train", "=", "num_train", ",", "only_split_train", "=", "False", ")", "\n", "\n", "", "if", "args", ".", "model", "==", "'resnet18'", ":", "\n", "        ", "cnn", "=", "ResNet18", "(", "num_classes", "=", "num_classes", ")", "\n", "", "elif", "args", ".", "model", "==", "'cbr'", ":", "\n", "        ", "cnn", "=", "CBRStudent", "(", "in_channel", ",", "num_classes", ")", "\n", "\n", "# This essentially does no mixup.", "\n", "", "mixup_mat", "=", "-", "100", "*", "torch", ".", "ones", "(", "[", "num_classes", ",", "num_classes", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "checkpoint", "=", "None", "\n", "if", "args", ".", "load_checkpoint", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "load_checkpoint", ")", "\n", "mixup_mat", "=", "checkpoint", "[", "'mixup_grid'", "]", "\n", "print", "(", "f\"loaded mixupmat from {args.load_checkpoint}\"", ")", "\n", "\n", "if", "args", ".", "rand_mixup", ":", "\n", "# Randomise mixup grid", "\n", "            ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "args", ".", "seed", ")", "\n", "mixup_mat", "=", "rng", ".", "uniform", "(", "0.5", ",", "1.0", ",", "(", "num_classes", ",", "num_classes", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "print", "(", "\"Randomised the mixup mat\"", ")", "\n", "", "mixup_mat", "=", "torch", ".", "from_numpy", "(", "mixup_mat", ".", "reshape", "(", "num_classes", ",", "num_classes", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "", "model", "=", "cnn", ".", "cuda", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "return", "model", ",", "mixup_mat", ",", "train_loader", ",", "val_loader", ",", "test_loader", ",", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.test_mixup.get_models": [[101, 104], ["test_mixup.load_mod_dl"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.test_mixup.load_mod_dl"], ["", "def", "get_models", "(", "args", ")", ":", "\n", "    ", "student", ",", "mixup_mat", ",", "train_loader", ",", "val_loader", ",", "test_loader", ",", "checkpoint", "=", "load_mod_dl", "(", "args", ")", "\n", "return", "student", ",", "mixup_mat", ",", "train_loader", ",", "val_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.test_mixup.mixup_data": [[105, 116], ["torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "x.size", "torch.randperm", "torch.randperm", "torch.randperm", "range", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "function", ["None"], ["", "def", "mixup_data", "(", "x", ",", "y", ",", "lam_rel", ")", ":", "\n", "    ", "'''Returns mixed inputs, pairs of targets, and lambda'''", "\n", "batch_size", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "index", "=", "torch", ".", "randperm", "(", "batch_size", ")", ".", "cuda", "(", ")", "\n", "\n", "t_idx", "=", "torch", ".", "stack", "(", "[", "y", ",", "y", "[", "index", "]", "]", ",", "dim", "=", "1", ")", "\n", "lam", "=", "torch", ".", "stack", "(", "[", "lam_rel", "[", "t_idx", "[", "i", ",", "0", "]", ",", "t_idx", "[", "i", ",", "1", "]", "]", "for", "i", "in", "range", "(", "batch_size", ")", "]", ")", "\n", "lam", "=", "(", "1", "-", "0.5", "*", "torch", ".", "sigmoid", "(", "lam", ")", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "mixed_x", "=", "lam", "*", "x", "+", "(", "1", "-", "lam", ")", "*", "x", "[", "index", ",", ":", "]", "\n", "y_a", ",", "y_b", "=", "y", ",", "y", "[", "index", "]", "\n", "return", "mixed_x", ",", "y_a", ",", "y_b", ",", "lam", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.test_mixup.mixup_criterion": [[118, 120], ["torch.mean", "torch.mean", "torch.mean", "lam.squeeze", "torch.cross_entropy", "torch.cross_entropy"], "function", ["None"], ["", "def", "mixup_criterion", "(", "pred", ",", "y_a", ",", "y_b", ",", "lam", ")", ":", "\n", "    ", "return", "torch", ".", "mean", "(", "lam", ".", "squeeze", "(", ")", "*", "F", ".", "cross_entropy", "(", "pred", ",", "y_a", ",", "reduction", "=", "'none'", ")", "+", "(", "1", "-", "lam", ")", ".", "squeeze", "(", ")", "*", "F", ".", "cross_entropy", "(", "pred", ",", "y_b", ",", "reduction", "=", "'none'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.test_mixup.experiment": [[121, 272], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "test_mixup.get_models", "aug_args_loading_utils.load_logger", "os.makedirs", "torch.SGD", "torch.optim.lr_scheduler.MultiStepLR", "time.time", "test_mixup.experiment.test"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.test_mixup.get_models", "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.aug_args_loading_utils.load_logger"], ["", "def", "experiment", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "do_print", ":", "\n", "        ", "print", "(", "args", ")", "\n", "# Setup the random seeds", "\n", "", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "model", ",", "mixup_mat", ",", "train_loader", ",", "val_loader", ",", "test_loader", "=", "get_models", "(", "args", ")", "\n", "\n", "# Set up the logger and the save directories", "\n", "\n", "# If we load a mixup grid, then save in a different location. Otherwise, it's a baseline run", "\n", "if", "args", ".", "load_checkpoint", ":", "\n", "        ", "args", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'test_aug/'", ")", "\n", "\n", "# args.save_loc is for model ckpts", "\n", "args", ".", "save_loc", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "get_id", "(", "args", ")", ",", "'test_aug_checkpoints/'", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'test_no_aug/'", ")", "\n", "# args.save_loc is for model ckpts", "\n", "args", ".", "save_loc", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "get_id", "(", "args", ")", ",", "'test_no_aug_checkpoints/'", ")", "\n", "\n", "", "csv_logger", ",", "_", "=", "load_logger", "(", "args", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "save_loc", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Standard LR/schedule settings for CIFAR", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.1", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ",", "weight_decay", "=", "5e-4", ")", "\n", "scheduler", "=", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "[", "30", ",", "60", ",", "80", "]", ",", "gamma", "=", "0.1", ")", "# [60, 120, 160]", "\n", "\n", "def", "train_loss_func", "(", "x", ",", "y", ")", ":", "\n", "        ", "x", ",", "y", "=", "x", ".", "cuda", "(", ")", ",", "y", ".", "cuda", "(", ")", "\n", "if", "args", ".", "load_checkpoint", ":", "\n", "            ", "mixed_x", ",", "y_a", ",", "y_b", ",", "lam", "=", "mixup_data", "(", "x", ",", "y", ",", "mixup_mat", ")", "\n", "pred", "=", "model", "(", "mixed_x", ")", "\n", "xentropy_loss", "=", "mixup_criterion", "(", "pred", ",", "y_a", ",", "y_b", ",", "lam", ")", "\n", "", "else", ":", "\n", "            ", "pred", "=", "model", "(", "x", ")", "\n", "xentropy_loss", "=", "F", ".", "cross_entropy", "(", "pred", ",", "y", ",", "reduction", "=", "'none'", ")", "\n", "\n", "", "final_loss", "=", "xentropy_loss", ".", "mean", "(", ")", "\n", "return", "final_loss", ",", "pred", "\n", "\n", "", "def", "test", "(", "loader", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "# Change model to 'eval' mode (BN uses moving mean/var).", "\n", "correct", ",", "total", "=", "0.", ",", "0.", "\n", "losses", "=", "[", "]", "\n", "for", "images", ",", "labels", "in", "loader", ":", "\n", "            ", "images", ",", "labels", "=", "images", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "pred", "=", "model", "(", "images", ")", "\n", "xentropy_loss", "=", "F", ".", "cross_entropy", "(", "pred", ",", "labels", ")", "\n", "losses", ".", "append", "(", "xentropy_loss", ".", "item", "(", ")", ")", "\n", "xentropy_loss", "=", "F", ".", "cross_entropy", "(", "pred", ",", "labels", ")", "\n", "losses", ".", "append", "(", "xentropy_loss", ".", "item", "(", ")", ")", "\n", "\n", "", "pred", "=", "torch", ".", "max", "(", "pred", ".", "data", ",", "1", ")", "[", "1", "]", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "correct", "+=", "(", "pred", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "avg_loss", "=", "float", "(", "np", ".", "mean", "(", "losses", ")", ")", "\n", "acc", "=", "correct", "/", "total", "\n", "model", ".", "train", "(", ")", "\n", "return", "avg_loss", ",", "acc", "\n", "\n", "", "init_time", "=", "time", ".", "time", "(", ")", "\n", "val_loss", ",", "val_acc", "=", "test", "(", "val_loader", ")", "\n", "test_loss", ",", "test_acc", "=", "test", "(", "test_loader", ")", "\n", "if", "args", ".", "do_print", ":", "\n", "        ", "print", "(", "f\"Initial Val Loss: {val_loss, val_acc}\"", ")", "\n", "print", "(", "f\"Initial Test Loss: {test_loss, test_acc}\"", ")", "\n", "", "iteration", "=", "0", "\n", "for", "epoch", "in", "range", "(", "0", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "reg_anneal_epoch", "=", "epoch", "\n", "xentropy_loss_avg", "=", "0.", "\n", "total_val_loss", ",", "val_loss", "=", "0.", ",", "0.", "\n", "correct", "=", "0.", "\n", "total", "=", "0.", "\n", "weight_norm", ",", "grad_norm", "=", ".0", ",", ".0", "\n", "\n", "if", "args", ".", "do_print", ":", "\n", "            ", "progress_bar", "=", "tqdm", "(", "train_loader", ")", "\n", "", "else", ":", "\n", "            ", "progress_bar", "=", "train_loader", "\n", "", "for", "i", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "progress_bar", ")", ":", "\n", "            ", "if", "args", ".", "do_print", ":", "\n", "                ", "progress_bar", ".", "set_description", "(", "'Epoch '", "+", "str", "(", "epoch", ")", ")", "\n", "\n", "", "images", ",", "labels", "=", "images", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "xentropy_loss", ",", "pred", "=", "train_loss_func", "(", "images", ",", "labels", ")", "\n", "xentropy_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "xentropy_loss_avg", "+=", "xentropy_loss", ".", "item", "(", ")", "\n", "\n", "iteration", "+=", "1", "\n", "\n", "# Calculate running average of accuracy", "\n", "if", "args", ".", "do_classification", ":", "\n", "                ", "pred", "=", "torch", ".", "max", "(", "pred", ".", "data", ",", "1", ")", "[", "1", "]", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "correct", "+=", "(", "pred", "==", "labels", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "accuracy", "=", "correct", "/", "total", "\n", "", "else", ":", "\n", "                ", "total", "=", "1", "\n", "accuracy", "=", "0", "\n", "\n", "", "if", "args", ".", "do_print", ":", "\n", "                ", "progress_bar", ".", "set_postfix", "(", "\n", "train", "=", "'%.4f'", "%", "(", "xentropy_loss_avg", "/", "(", "i", "+", "1", ")", ")", ",", "\n", "val", "=", "'%.4f'", "%", "(", "total_val_loss", "/", "(", "i", "+", "1", ")", ")", ",", "\n", "acc", "=", "'%.4f'", "%", "accuracy", ",", "\n", "weight", "=", "'%.10f'", "%", "weight_norm", ",", "\n", "update", "=", "'%.10f'", "%", "grad_norm", "\n", ")", "\n", "", "if", "i", "%", "100", "==", "0", ":", "\n", "                ", "val_loss", ",", "val_acc", "=", "test", "(", "val_loader", ")", "\n", "test_loss", ",", "test_acc", "=", "test", "(", "test_loader", ")", "\n", "csv_logger", ".", "writerow", "(", "{", "'epoch'", ":", "str", "(", "epoch", ")", ",", "\n", "'train_loss'", ":", "str", "(", "xentropy_loss_avg", "/", "(", "i", "+", "1", ")", ")", ",", "'train_acc'", ":", "str", "(", "accuracy", ")", ",", "\n", "'val_loss'", ":", "str", "(", "val_loss", ")", ",", "'val_acc'", ":", "str", "(", "val_acc", ")", ",", "\n", "'test_loss'", ":", "str", "(", "test_loss", ")", ",", "'test_acc'", ":", "str", "(", "test_acc", ")", ",", "\n", "'run_time'", ":", "time", ".", "time", "(", ")", "-", "init_time", ",", "\n", "'iteration'", ":", "iteration", "}", ")", "\n", "", "", "scheduler", ".", "step", "(", "epoch", ")", "\n", "train_loss", "=", "xentropy_loss_avg", "/", "(", "i", "+", "1", ")", "\n", "\n", "only_print_final_vals", "=", "not", "args", ".", "do_print", "\n", "if", "not", "only_print_final_vals", ":", "\n", "            ", "val_loss", ",", "val_acc", "=", "test", "(", "val_loader", ")", "\n", "# if val_acc >= 0.99 and accuracy >= 0.99 and epoch >= 50: break", "\n", "test_loss", ",", "test_acc", "=", "test", "(", "test_loader", ")", "\n", "tqdm", ".", "write", "(", "'val loss: {:6.4f} | val acc: {:6.4f} | test loss: {:6.4f} | test_acc: {:6.4f}'", ".", "format", "(", "\n", "val_loss", ",", "val_acc", ",", "test_loss", ",", "test_acc", ")", ")", "\n", "\n", "csv_logger", ".", "writerow", "(", "{", "'epoch'", ":", "str", "(", "epoch", ")", ",", "\n", "'train_loss'", ":", "str", "(", "train_loss", ")", ",", "'train_acc'", ":", "str", "(", "accuracy", ")", ",", "\n", "'val_loss'", ":", "str", "(", "val_loss", ")", ",", "'val_acc'", ":", "str", "(", "val_acc", ")", ",", "\n", "'test_loss'", ":", "str", "(", "test_loss", ")", ",", "'test_acc'", ":", "str", "(", "test_acc", ")", ",", "\n", "'run_time'", ":", "time", ".", "time", "(", ")", "-", "init_time", ",", "'iteration'", ":", "iteration", "}", ")", "\n", "", "else", ":", "\n", "            ", "if", "args", ".", "do_print", ":", "\n", "                ", "val_loss", ",", "val_acc", "=", "test", "(", "val_loader", ",", "do_test_augment", "=", "False", ")", "\n", "tqdm", ".", "write", "(", "'val loss: {:6.4f} | val acc: {:6.4f}'", ".", "format", "(", "val_loss", ",", "val_acc", ")", ")", "\n", "", "", "", "val_loss", ",", "val_acc", "=", "test", "(", "val_loader", ")", "\n", "test_loss", ",", "test_acc", "=", "test", "(", "test_loader", ")", "\n", "saver", "(", "args", ".", "num_finetune_epochs", ",", "model", ",", "optimizer", ",", "args", ".", "save_loc", ")", "\n", "return", "train_loss", ",", "accuracy", ",", "val_loss", ",", "val_acc", ",", "test_loss", ",", "test_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.aug_args_loading_utils.make_parser": [[14, 44], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "make_parser", "(", ")", ":", "\n", "    ", "\"\"\"\n\n    :return:\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Learning Data Augmentation Commentary Parameters with IFT'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'cifar10'", ",", "choices", "=", "[", "'mnist'", ",", "'cifar10'", ",", "'cifar100'", ",", "]", ",", "help", "=", "'Choose a dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'resnet18'", ",", "choices", "=", "[", "'cbr'", ",", "'resnet18'", "]", ",", "help", "=", "'Choose a model'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'Number of epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_epochs'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'Num warmup epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_checkpoint'", ",", "type", "=", "str", ",", "help", "=", "'Path to pre-trained checkpoint to load and finetune'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_dir'", ",", "type", "=", "str", ",", "default", "=", "'learn_blending/'", ",", "\n", "help", "=", "'Save directory for the fine-tuned checkpoint'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--train_size'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'The training size'", ")", "\n", "parser", ".", "add_argument", "(", "'--val_size'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'The training size'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_size'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'The training size'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--data_augmentation'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Whether to use standard data augmentation (flips, crops)'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_neumann_terms'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'The maximum number of neumann terms to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'The random seed to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "help", "=", "'The batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "help", "=", "'Learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--hyperlr'", ",", "type", "=", "float", ",", "default", "=", "1e-2", ",", "help", "=", "'Hyper lr'", ")", "\n", "parser", ".", "add_argument", "(", "'--do_print'", ",", "action", "=", "'store_true'", ",", "default", "=", "True", ",", "\n", "help", "=", "'If we should do diagnostic functions'", ")", "\n", "parser", ".", "add_argument", "(", "'--rand_mixup'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Rand the mixup grid'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.aug_args_loading_utils.get_id": [[46, 61], ["int", "int", "float", "float", "int", "int"], "function", ["None"], ["", "def", "get_id", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    :param args:\n    :return:\n    \"\"\"", "\n", "id", "=", "''", "\n", "id", "+=", "f'data:{args.dataset}'", "\n", "id", "+=", "f'_model:{args.model}'", "\n", "id", "+=", "f'_presetAug:{int(args.data_augmentation)}'", "\n", "id", "+=", "f'_neumann:{int(args.num_neumann_terms)}'", "\n", "id", "+=", "f'elemlr:{float(args.lr)}'", "\n", "id", "+=", "f'_hyperlr:{float(args.hyperlr)}'", "\n", "id", "+=", "f'_seed:{int(args.seed)}'", "\n", "id", "+=", "f'_randmixup:{int(args.rand_mixup)}'", "\n", "return", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.aug_args_loading_utils.load_logger": [[63, 86], ["aug_args_loading_utils.get_id", "os.path.join", "utils.csv_logger.CSVLogger", "os.path.exists", "os.makedirs", "aug_args_loading_utils.get_id", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.aug_args_loading_utils.get_id", "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.aug_args_loading_utils.get_id"], ["", "def", "load_logger", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n\n    :param args:\n    :return:\n    \"\"\"", "\n", "# Setup saving information", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save_dir", ")", "\n", "", "sub_dir", "=", "args", ".", "save_dir", "+", "'/'", "+", "get_id", "(", "args", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "sub_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "sub_dir", ")", "\n", "\n", "", "test_id", "=", "get_id", "(", "args", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "sub_dir", ",", "'log.csv'", ")", "\n", "csv_logger", "=", "CSVLogger", "(", "\n", "fieldnames", "=", "[", "'epoch'", ",", "'run_time'", ",", "'iteration'", ",", "\n", "'train_loss'", ",", "'train_acc'", ",", "\n", "'val_loss'", ",", "'val_acc'", ",", "\n", "'test_loss'", ",", "'test_acc'", ",", "\n", "'hypergradient_cos_diff'", ",", "'hypergradient_l2_diff'", "]", ",", "\n", "filename", "=", "filename", ")", "\n", "return", "csv_logger", ",", "test_id", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.implicit_hyper_opt.aug_args_loading_utils.save_mixup": [[88, 103], ["matplotlib.figure", "matplotlib.imshow", "matplotlib.gca().set_aspect", "matplotlib.draw", "matplotlib.colorbar", "plt.figure.savefig", "matplotlib.close", "torch.sigmoid().cpu().numpy", "matplotlib.gca", "torch.sigmoid().cpu", "torch.sigmoid", "mixmat.detach"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.utils.csv_logger.CSVLogger.close"], ["", "def", "save_mixup", "(", "mixmat", ",", "epoch", ",", "iteration", ",", "args", ")", ":", "\n", "\n", "    ", "mixmat", "=", "1", "-", "0.5", "*", "torch", ".", "sigmoid", "(", "mixmat", ".", "detach", "(", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "col_size", "=", "10", "\n", "row_size", "=", "10", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "col_size", ",", "row_size", ")", ")", "\n", "\n", "plt", ".", "imshow", "(", "mixmat", ",", "cmap", "=", "'Reds'", ",", "vmin", "=", "0.5", ",", "vmax", "=", "1.0", ")", "\n", "\n", "plt", ".", "gca", "(", ")", ".", "set_aspect", "(", "'auto'", ")", "\n", "\n", "plt", ".", "draw", "(", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "fig", ".", "savefig", "(", "f'{args.save_loc}/mixup-ep{epoch}-itr{iteration}.pdf'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "close", "(", "fig", ")", "", "", ""]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.init_ax": [[17, 30], ["matplotlib.rc", "matplotlib.figure", "plt.figure.add_subplot"], "function", ["None"], ["def", "init_ax", "(", "fontsize", "=", "24", ")", ":", "# Since halving images use 25", "\n", "# Set some parameters.", "\n", "    ", "font", "=", "{", "'family'", ":", "'Times New Roman'", "}", "\n", "mpl", ".", "rc", "(", "'font'", ",", "**", "font", ")", "\n", "mpl", ".", "rcParams", "[", "'legend.fontsize'", "]", "=", "fontsize", "\n", "mpl", ".", "rcParams", "[", "'axes.labelsize'", "]", "=", "fontsize", "\n", "mpl", ".", "rcParams", "[", "'xtick.labelsize'", "]", "=", "fontsize", "\n", "mpl", ".", "rcParams", "[", "'ytick.labelsize'", "]", "=", "fontsize", "\n", "mpl", ".", "rcParams", "[", "'axes.grid'", "]", "=", "True", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "6.4", ",", "4.8", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "return", "fig", ",", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.setup_ax": [[32, 42], ["ax.tick_params", "ax.tick_params", "ax.grid", "ax.spines[].set_visible", "ax.spines[].set_visible", "matplotlib.tight_layout", "ax.legend"], "function", ["None"], ["", "def", "setup_ax", "(", "ax", ",", "do_legend", "=", "True", ",", "alpha", "=", "0.0", ")", ":", "\n", "    ", "if", "do_legend", ":", "\n", "        ", "ax", ".", "legend", "(", "fancybox", "=", "True", ",", "borderaxespad", "=", "0.0", ",", "framealpha", "=", "alpha", ")", "\n", "", "ax", ".", "tick_params", "(", "axis", "=", "'x'", ",", "which", "=", "'both'", ",", "bottom", "=", "False", ",", "top", "=", "False", ")", "\n", "ax", ".", "tick_params", "(", "axis", "=", "'y'", ",", "which", "=", "'both'", ",", "left", "=", "False", ",", "right", "=", "False", ")", "\n", "ax", ".", "grid", "(", "False", ")", "\n", "ax", ".", "spines", "[", "'right'", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "'top'", "]", ".", "set_visible", "(", "False", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.load_from_csv": [[44, 59], ["open", "csv.DictReader", "int", "float", "float", "float", "float", "float", "float", "d[].append"], "function", ["None"], ["", "def", "load_from_csv", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", "+", "'/epoch_h_log.csv'", ")", "as", "csvfile", ":", "\n", "        ", "reader", "=", "csv", ".", "DictReader", "(", "csvfile", ",", "skipinitialspace", "=", "True", ")", "\n", "d", "=", "{", "name", ":", "[", "]", "for", "name", "in", "reader", ".", "fieldnames", "}", "\n", "for", "row", "in", "reader", ":", "\n", "            ", "for", "name", "in", "reader", ".", "fieldnames", ":", "\n", "                ", "d", "[", "name", "]", ".", "append", "(", "row", "[", "name", "]", ")", "\n", "", "", "", "d", "[", "'epoch_h'", "]", "=", "[", "int", "(", "i", ")", "for", "i", "in", "d", "[", "'epoch_h'", "]", "]", "\n", "d", "[", "'train_acc'", "]", "=", "[", "float", "(", "i", ")", "for", "i", "in", "d", "[", "'train_acc'", "]", "]", "\n", "d", "[", "'test_acc'", "]", "=", "[", "float", "(", "i", ")", "for", "i", "in", "d", "[", "'test_acc'", "]", "]", "\n", "d", "[", "'val_acc'", "]", "=", "[", "float", "(", "i", ")", "for", "i", "in", "d", "[", "'val_acc'", "]", "]", "\n", "d", "[", "'train_loss'", "]", "=", "[", "float", "(", "i", ")", "for", "i", "in", "d", "[", "'train_loss'", "]", "]", "\n", "d", "[", "'test_loss'", "]", "=", "[", "float", "(", "i", ")", "for", "i", "in", "d", "[", "'test_loss'", "]", "]", "\n", "d", "[", "'val_loss'", "]", "=", "[", "float", "(", "i", ")", "for", "i", "in", "d", "[", "'val_loss'", "]", "]", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.plot_accuracy_from_csv": [[61, 74], ["plot_utils.init_ax", "plot_utils.load_from_csv", "setup_ax.plot", "setup_ax.plot", "setup_ax.plot", "plot_utils.setup_ax", "fig.savefig", "matplotlib.close", "matplotlib.title"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.init_ax", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.load_from_csv", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.setup_ax", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.csv_logger.CSVLogger.close"], ["", "def", "plot_accuracy_from_csv", "(", "path", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "init_ax", "(", ")", "\n", "d", "=", "load_from_csv", "(", "path", ")", "\n", "ax", ".", "plot", "(", "d", "[", "'epoch_h'", "]", ",", "d", "[", "'train_acc'", "]", ",", "c", "=", "'r'", ",", "label", "=", "'Train Accuracy'", ")", "\n", "ax", ".", "plot", "(", "d", "[", "'epoch_h'", "]", ",", "d", "[", "'val_acc'", "]", ",", "c", "=", "'g'", ",", "label", "=", "'Validation Accuracy'", ")", "\n", "ax", ".", "plot", "(", "d", "[", "'epoch_h'", "]", ",", "d", "[", "'test_acc'", "]", ",", "c", "=", "'b'", ",", "label", "=", "'Test Accuracy'", ")", "\n", "\n", "ax", "=", "setup_ax", "(", "ax", ")", "\n", "\n", "if", "do_axis_labels", ":", "\n", "        ", "plt", ".", "title", "(", "\"Accuracies During Optimization\"", ")", "\n", "", "fig", ".", "savefig", "(", "f\"images/accuracy_{path}.pdf\"", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.plot_loss_from_csv": [[76, 90], ["plot_utils.init_ax", "plot_utils.load_from_csv", "setup_ax.plot", "setup_ax.plot", "setup_ax.plot", "plot_utils.setup_ax", "fig.savefig", "matplotlib.close", "matplotlib.title"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.init_ax", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.load_from_csv", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.setup_ax", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.csv_logger.CSVLogger.close"], ["", "def", "plot_loss_from_csv", "(", "path", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "init_ax", "(", ")", "\n", "d", "=", "load_from_csv", "(", "path", ")", "\n", "\n", "ax", ".", "plot", "(", "d", "[", "'epoch_h'", "]", ",", "d", "[", "'train_loss'", "]", ",", "c", "=", "'r'", ",", "label", "=", "'Train Loss'", ")", "\n", "ax", ".", "plot", "(", "d", "[", "'epoch_h'", "]", ",", "d", "[", "'val_loss'", "]", ",", "c", "=", "'g'", ",", "label", "=", "'Validation Loss'", ")", "\n", "ax", ".", "plot", "(", "d", "[", "'epoch_h'", "]", ",", "d", "[", "'test_loss'", "]", ",", "c", "=", "'b'", ",", "label", "=", "'Test Loss'", ")", "\n", "\n", "ax", "=", "setup_ax", "(", "ax", ")", "\n", "\n", "if", "do_axis_labels", ":", "\n", "        ", "plt", ".", "title", "(", "\"Losses During Optimization\"", ")", "\n", "", "fig", ".", "savefig", "(", "f\"images/loss_{path}.pdf\"", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.smooth_data": [[91, 98], ["numpy.array", "numpy.mean", "range", "len", "max", "min", "len", "int", "int"], "function", ["None"], ["", "def", "smooth_data", "(", "data", ",", "num_smooth", ")", ":", "\n", "# smoothed_data = np.zeros(data.shape)", "\n", "    ", "left_fraction", "=", "0.0", "\n", "right_fraction", "=", "1.0", "-", "left_fraction", "\n", "smoothed_data", "=", "[", "np", ".", "mean", "(", "data", "[", "max", "(", "ind", "-", "int", "(", "num_smooth", "*", "left_fraction", ")", ",", "0", ")", ":", "min", "(", "ind", "+", "int", "(", "num_smooth", "*", "right_fraction", ")", ",", "len", "(", "data", ")", ")", "]", ")", "\n", "for", "ind", "in", "range", "(", "len", "(", "data", ")", ")", "]", "\n", "return", "np", ".", "array", "(", "smoothed_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.plot_inversion_comparison_from_csv": [[99, 136], ["plot_utils.init_ax", "plot_utils.load_from_csv", "plot_utils.load_from_csv", "plot_utils.load_from_csv", "plot_utils.setup_ax", "fig.savefig", "matplotlib.close", "plot_utils.smooth_data", "plot_utils.smooth_data", "plot_utils.smooth_data", "plot_utils.load_from_csv", "print", "plot_utils.plot_inversion_comparison_from_csv.get_plot_type"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.init_ax", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.load_from_csv", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.load_from_csv", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.load_from_csv", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.setup_ax", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.csv_logger.CSVLogger.close", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.smooth_data", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.smooth_data", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.smooth_data", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.load_from_csv"], ["", "def", "plot_inversion_comparison_from_csv", "(", "path_KFAC", ",", "path_identity", ",", "path_zero", ",", "path_direct", "=", "None", ",", "alpha", "=", "1.0", ",", "\n", "do_smoothed", "=", "False", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "init_ax", "(", ")", "\n", "d_KFAC", "=", "load_from_csv", "(", "path_KFAC", ")", "\n", "d_identity", "=", "load_from_csv", "(", "path_identity", ")", "\n", "d_zero", "=", "load_from_csv", "(", "path_zero", ")", "\n", "\n", "x_arg", ",", "y_arg", "=", "'epoch_h'", ",", "'val_loss'", "\n", "def", "get_plot_type", "(", "ax", ")", ":", "\n", "        ", "return", "ax", ".", "loglog", "\n", "\n", "", "if", "do_smoothed", ":", "\n", "        ", "num_smooth", "=", "55", "\n", "d_KFAC", "[", "y_arg", "]", "=", "smooth_data", "(", "d_KFAC", "[", "y_arg", "]", ",", "num_smooth", ")", "\n", "d_identity", "[", "y_arg", "]", "=", "smooth_data", "(", "d_identity", "[", "y_arg", "]", ",", "num_smooth", ")", "\n", "d_zero", "[", "y_arg", "]", "=", "smooth_data", "(", "d_zero", "[", "y_arg", "]", ",", "num_smooth", ")", "\n", "", "if", "y_arg", "[", "-", "3", ":", "]", "==", "'acc'", ":", "# Plot error isntead", "\n", "        ", "d_KFAC", "[", "y_arg", "]", "=", "1.0", "-", "d_KFAC", "[", "y_arg", "]", "\n", "d_identity", "[", "y_arg", "]", "=", "1.0", "-", "d_identity", "[", "y_arg", "]", "\n", "d_zero", "[", "y_arg", "]", "=", "1.0", "-", "d_zero", "[", "y_arg", "]", "\n", "", "if", "path_direct", "is", "not", "None", ":", "\n", "        ", "d_direct", "=", "load_from_csv", "(", "path_direct", ")", "\n", "print", "(", "d_direct", ")", "\n", "get_plot_type", "(", "ax", ")", "(", "d_direct", "[", "x_arg", "]", ",", "d_direct", "[", "y_arg", "]", ",", "c", "=", "'k'", ",", "label", "=", "'Direct'", ",", "zorder", "=", "10", ",", "alpha", "=", "alpha", ")", "\n", "", "get_plot_type", "(", "ax", ")", "(", "d_KFAC", "[", "x_arg", "]", ",", "d_KFAC", "[", "y_arg", "]", ",", "c", "=", "'r'", ",", "label", "=", "'KFAC'", ",", "zorder", "=", "5", ",", "alpha", "=", "alpha", ")", "\n", "get_plot_type", "(", "ax", ")", "(", "d_identity", "[", "x_arg", "]", ",", "d_identity", "[", "y_arg", "]", ",", "c", "=", "'g'", ",", "label", "=", "'Identity'", ",", "zorder", "=", "1", ",", "alpha", "=", "alpha", ")", "\n", "get_plot_type", "(", "ax", ")", "(", "d_zero", "[", "x_arg", "]", ",", "d_zero", "[", "y_arg", "]", ",", "c", "=", "'b'", ",", "label", "=", "'Zero'", ",", "zorder", "=", "0", ",", "alpha", "=", "alpha", ")", "\n", "\n", "#print(d_identity[y_arg][-10:-1])", "\n", "#ax.set_ylim([0.8, 1.0])", "\n", "\n", "ax", "=", "setup_ax", "(", "ax", ")", "\n", "\n", "if", "do_axis_labels", ":", "\n", "        ", "plt", ".", "title", "(", "\"Inversion Method Comparison\"", ")", "\n", "", "fig", ".", "savefig", "(", "f\"images/inversion_comparison_{path_identity}.pdf\"", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.plot_overfit_comparison_from_csv": [[138, 241], ["plot_utils.init_ax", "plot_utils.setup_ax", "matplotlib.close", "max", "setup_ax.plot", "setup_ax.plot", "setup_ax.plot", "setup_ax.plot", "setup_ax.plot", "setup_ax.plot", "setup_ax.plot", "setup_ax.plot", "setup_ax.plot", "setup_ax.plot", "setup_ax.set_ylim", "setup_ax.set_yticks", "matplotlib.title", "fig.savefig", "fig.savefig", "int", "setup_ax.plot", "setup_ax.plot", "plot_utils.load_from_csv", "plot_utils.smooth_data", "plot_utils.plot_inversion_comparison_from_csv.get_plot_type"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.init_ax", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.setup_ax", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.csv_logger.CSVLogger.close", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.load_from_csv", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.smooth_data"], ["def", "plot_overfit_comparison_from_csv", "(", "paths", ",", "alpha", ",", "name", "=", "''", ",", "num_smooth", "=", "100", ",", "do_legend", "=", "True", ",", "do_yticks", "=", "True", ",", "\n", "do_simple", "=", "True", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "init_ax", "(", ")", "\n", "datas", "=", "[", "]", "\n", "for", "path", "in", "paths", ":", "\n", "        ", "datas", "+=", "[", "(", "load_from_csv", "(", "path", ")", ",", "path", ")", "]", "\n", "\n", "", "y_arg", "=", "'_acc'", "\n", "do_smoothed", "=", "True", "\n", "if", "do_smoothed", ":", "\n", "        ", "for", "data", ",", "path", "in", "datas", ":", "\n", "\n", "            ", "for", "arg", "in", "[", "'train'", "+", "y_arg", ",", "'val'", "+", "y_arg", ",", "'test'", "+", "y_arg", "]", ":", "\n", "                ", "if", "not", "do_simple", ":", "\n", "                    ", "num_smooth", "=", "100", "\n", "", "data", "[", "arg", "]", "=", "smooth_data", "(", "data", "[", "arg", "]", ",", "num_smooth", ")", "\n", "if", "y_arg", "==", "'_acc'", ":", "\n", "                    ", "data", "[", "arg", "]", "=", "1.0", "-", "data", "[", "arg", "]", "\n", "\n", "\n", "", "", "", "", "def", "get_plot_type", "(", "ax", ")", ":", "\n", "        ", "if", "y_arg", "==", "'_loss'", ":", "\n", "            ", "return", "ax", ".", "loglog", "\n", "", "elif", "y_arg", "==", "'_acc'", ":", "\n", "            ", "return", "ax", ".", "semilogx", "\n", "\n", "", "", "x_arg", "=", "'epoch_h'", "\n", "for", "d", ",", "path", "in", "datas", ":", "\n", "        ", "color", "=", "'k'", "\n", "linestyle", "=", "'-'", "\n", "#if 'CIFAR' in path:", "\n", "#    linestyle = '--'", "\n", "#elif 'MNIST' in path:", "\n", "#    linestyle = ':'", "\n", "\n", "if", "'mlp'", "in", "path", "and", "'layers=0'", "in", "path", ":", "\n", "            ", "if", "do_simple", ":", "\n", "                ", "color", "=", "'r'", "\n", "", "else", ":", "\n", "                ", "color", "=", "'m'", "\n", "", "", "elif", "'mlp'", "in", "path", "and", "'layers=1'", "in", "path", ":", "\n", "            ", "color", "=", "'r'", "\n", "", "elif", "'cnn'", "in", "path", ":", "\n", "            ", "color", "=", "'g'", "\n", "", "elif", "'alexnet'", "in", "path", ":", "\n", "            ", "if", "do_simple", ":", "\n", "                ", "color", "=", "'g'", "#'y'", "\n", "", "else", ":", "\n", "                ", "color", "=", "'y'", "\n", "", "", "elif", "'resnet'", "in", "path", ":", "\n", "            ", "color", "=", "'b'", "\n", "", "markevery", "=", "max", "(", "int", "(", "float", "(", "len", "(", "d", "[", "x_arg", "]", ")", ")", "/", "100", ")", ",", "1", ")", "\n", "if", "do_simple", ":", "\n", "            ", "get_plot_type", "(", "ax", ")", "(", "d", "[", "x_arg", "]", ",", "d", "[", "'val'", "+", "y_arg", "]", ",", "color", "=", "color", ",", "linestyle", "=", "linestyle", ",", "\n", "alpha", "=", "1.0", ",", "markevery", "=", "markevery", ",", "linewidth", "=", "linewidth", ")", "\n", "", "else", ":", "\n", "            ", "get_plot_type", "(", "ax", ")", "(", "d", "[", "x_arg", "]", ",", "d", "[", "'train'", "+", "y_arg", "]", ",", "color", "=", "color", ",", "linestyle", "=", "linestyle", ",", "\n", "alpha", "=", "alpha", ",", "markevery", "=", "markevery", ",", "linewidth", "=", "linewidth", ")", "\n", "get_plot_type", "(", "ax", ")", "(", "d", "[", "x_arg", "]", ",", "d", "[", "'val'", "+", "y_arg", "]", ",", "color", "=", "color", ",", "linestyle", "=", "linestyle", ",", "\n", "alpha", "=", "alpha", ",", "markevery", "=", "markevery", ",", "marker", "=", "'x'", ",", "linewidth", "=", "linewidth", ")", "\n", "get_plot_type", "(", "ax", ")", "(", "d", "[", "x_arg", "]", ",", "d", "[", "'test'", "+", "y_arg", "]", ",", "marker", "=", "'o'", ",", "color", "=", "color", ",", "linestyle", "=", "linestyle", ",", "\n", "alpha", "=", "alpha", ",", "markevery", "=", "markevery", ",", "linewidth", "=", "linewidth", ")", "\n", "", "", "if", "do_simple", ":", "\n", "        ", "ax", ".", "plot", "(", "[", "]", ",", "[", "]", ",", "label", "=", "'Linear'", ",", "color", "=", "'r'", ",", "linestyle", "=", "'-'", ",", "marker", "=", "','", ",", "linewidth", "=", "linewidth", ")", "\n", "ax", ".", "plot", "(", "[", "]", ",", "[", "]", ",", "label", "=", "'AlexNet'", ",", "color", "=", "'g'", ",", "linestyle", "=", "'-'", ",", "marker", "=", "','", ",", "linewidth", "=", "linewidth", ")", "\n", "ax", ".", "plot", "(", "[", "]", ",", "[", "]", ",", "label", "=", "'ResNet44'", ",", "color", "=", "'b'", ",", "linestyle", "=", "'-'", ",", "marker", "=", "','", ",", "linewidth", "=", "linewidth", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "plot", "(", "[", "]", ",", "[", "]", ",", "label", "=", "'Training'", ",", "color", "=", "'k'", ",", "linestyle", "=", "'-'", ",", "marker", "=", "','", ",", "linewidth", "=", "linewidth", ")", "\n", "if", "do_simple", ":", "\n", "            ", "ax", ".", "plot", "(", "[", "]", ",", "[", "]", ",", "label", "=", "'Validation'", ",", "color", "=", "'k'", ",", "linestyle", "=", "'-'", ",", "linewidth", "=", "linewidth", ")", "#, marker='x')", "\n", "", "else", ":", "\n", "            ", "ax", ".", "plot", "(", "[", "]", ",", "[", "]", ",", "label", "=", "'Validation'", ",", "color", "=", "'k'", ",", "linestyle", "=", "'-'", ",", "marker", "=", "'x'", ",", "linewidth", "=", "linewidth", ")", "\n", "", "ax", ".", "plot", "(", "[", "]", ",", "[", "]", ",", "label", "=", "'Test'", ",", "color", "=", "'k'", ",", "linestyle", "=", "'-'", ",", "marker", "=", "'o'", ",", "linewidth", "=", "linewidth", ")", "\n", "#ax.plot([], [], label='MNIST', color='k', linestyle=':', marker=',')", "\n", "#ax.plot([], [], label='CIFAR', color='k', linestyle='--', marker=',')", "\n", "linear_color", "=", "'r'", "\n", "if", "not", "do_simple", ":", "\n", "            ", "linear_color", "=", "'m'", "\n", "", "ax", ".", "plot", "(", "[", "]", ",", "[", "]", ",", "label", "=", "'Linear'", ",", "color", "=", "linear_color", ",", "linestyle", "=", "'-'", ",", "marker", "=", "','", ",", "linewidth", "=", "linewidth", ")", "\n", "ax", ".", "plot", "(", "[", "]", ",", "[", "]", ",", "label", "=", "'1-Layer'", ",", "color", "=", "'r'", ",", "linestyle", "=", "'-'", ",", "marker", "=", "','", ",", "linewidth", "=", "linewidth", ")", "\n", "ax", ".", "plot", "(", "[", "]", ",", "[", "]", ",", "label", "=", "'LeNet'", ",", "color", "=", "'g'", ",", "linestyle", "=", "'-'", ",", "marker", "=", "','", ",", "linewidth", "=", "linewidth", ")", "\n", "alexnet_color", "=", "'g'", "\n", "if", "not", "do_simple", ":", "\n", "            ", "alexnet_color", "=", "'y'", "\n", "", "ax", ".", "plot", "(", "[", "]", ",", "[", "]", ",", "label", "=", "'AlexNet'", ",", "color", "=", "alexnet_color", ",", "linestyle", "=", "'-'", ",", "marker", "=", "','", ",", "linewidth", "=", "linewidth", ")", "\n", "ax", ".", "plot", "(", "[", "]", ",", "[", "]", ",", "label", "=", "'ResNet44'", ",", "color", "=", "'b'", ",", "linestyle", "=", "'-'", ",", "marker", "=", "','", ",", "linewidth", "=", "linewidth", ")", "\n", "\n", "# print(d_identity[y_arg][-10:-1])", "\n", "# ax.set_ylim([0.8, 1.0])", "\n", "", "if", "y_arg", "==", "'_acc'", ":", "\n", "        ", "ax", ".", "set_ylim", "(", "[", "0", ",", "1.0", "]", ")", "\n", "", "if", "not", "do_yticks", ":", "\n", "        ", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "\n", "", "ax", "=", "setup_ax", "(", "ax", ",", "do_legend", ",", "alpha", "=", "0.75", ")", "\n", "\n", "if", "do_axis_labels", ":", "\n", "        ", "plt", ".", "title", "(", "\"Overfit Comparison\"", ")", "\n", "", "if", "do_simple", ":", "\n", "        ", "fig", ".", "savefig", "(", "f\"../images/overfit_comparison_{name}_simple.pdf\"", ",", "bbox_inches", "=", "'tight'", ")", "\n", "", "else", ":", "\n", "        ", "fig", ".", "savefig", "(", "f\"../images/overfit_comparison_{name}.pdf\"", ",", "bbox_inches", "=", "'tight'", ")", "\n", "", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.plot_baseline_comparison_from_csv": [[243, 260], ["plot_utils.init_ax", "plot_utils.load_from_csv", "setup_ax.plot", "plot_utils.setup_ax", "fig.savefig", "matplotlib.close", "matplotlib.title"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.init_ax", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.load_from_csv", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.setup_ax", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.csv_logger.CSVLogger.close"], ["", "def", "plot_baseline_comparison_from_csv", "(", "path_ift", ",", "baseline_path", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "init_ax", "(", ")", "\n", "\n", "d_ift", "=", "load_from_csv", "(", "path_ift", ")", "\n", "# TODO: Load data from baselines", "\n", "d_baseline_1", "=", "None", "# load_from_csv(baseline_path)", "\n", "\n", "ax", ".", "plot", "(", "d_ift", "[", "'epoch_h'", "]", ",", "d_ift", "[", "'val_loss'", "]", ",", "c", "=", "'r'", ",", "label", "=", "'IFT'", ")", "\n", "# TODO: Plot baselines", "\n", "# ax.plot(d_baseline_1['epoch_h'], d_baseline_1['val_loss'], c='g', label='Baseline 1')", "\n", "\n", "ax", "=", "setup_ax", "(", "ax", ")", "\n", "\n", "if", "do_axis_labels", ":", "\n", "        ", "plt", ".", "title", "(", "\"Baseline Comparison\"", ")", "\n", "", "fig", ".", "savefig", "(", "\"images/baseline_comparison.pdf\"", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.plotResult": [[279, 322], ["os.listdir", "iteration.sort", "matplotlib.figure", "matplotlib.plot", "matplotlib.title", "plt.figure.savefig", "matplotlib.show", "matplotlib.figure", "matplotlib.plot", "matplotlib.title", "plt.figure.savefig", "matplotlib.show", "matplotlib.figure", "matplotlib.plot", "matplotlib.title", "plt.figure.savefig", "matplotlib.show", "matplotlib.figure", "matplotlib.plot", "matplotlib.title", "plt.figure.savefig", "matplotlib.show", "matplotlib.figure", "matplotlib.plot", "matplotlib.title", "plt.figure.savefig", "matplotlib.show", "file.endswith", "str().split", "print", "iteration.append", "str", "int", "float", "float", "float", "float", "float", "float"], "function", ["None"], ["def", "plotResult", "(", "path", ")", ":", "\n", "    ", "iteration", "=", "[", "]", "\n", "global_step", "=", "0", "\n", "for", "file", "in", "os", ".", "listdir", "(", "path", ")", ":", "\n", "        ", "if", "file", ".", "endswith", "(", "\".pkl\"", ")", ":", "\n", "            ", "param", "=", "str", "(", "file", ")", ".", "split", "(", "'_'", ")", "\n", "print", "(", "param", ")", "\n", "iteration", ".", "append", "(", "\n", "[", "int", "(", "param", "[", "1", "]", ")", ",", "float", "(", "param", "[", "2", "]", ")", ",", "float", "(", "param", "[", "3", "]", ")", ",", "float", "(", "param", "[", "4", "]", ")", ",", "float", "(", "param", "[", "5", "]", ")", ",", "float", "(", "param", "[", "6", "]", ")", ",", "\n", "float", "(", "param", "[", "7", "]", ")", "]", ")", "\n", "", "", "iteration", ".", "sort", "(", ")", "\n", "i_range", "=", "[", "i", "[", "0", "]", "for", "i", "in", "iteration", "]", "\n", "test_loss", "=", "[", "i", "[", "1", "]", "for", "i", "in", "iteration", "]", "\n", "train_loss", "=", "[", "i", "[", "2", "]", "for", "i", "in", "iteration", "]", "\n", "test_correct", "=", "[", "i", "[", "3", "]", "for", "i", "in", "iteration", "]", "\n", "train_correct", "=", "[", "i", "[", "4", "]", "for", "i", "in", "iteration", "]", "\n", "dropout", "=", "[", "i", "[", "5", "]", "for", "i", "in", "iteration", "]", "\n", "f", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "i_range", ",", "test_loss", ")", "\n", "plt", ".", "title", "(", "\"test loss vs iteration\"", ")", "\n", "f", ".", "savefig", "(", "\"{}/test_loss.png\"", ".", "format", "(", "path", ")", ",", "dpi", "=", "800", ")", "\n", "plt", ".", "show", "(", ")", "\n", "f", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "i_range", ",", "test_correct", ")", "\n", "plt", ".", "title", "(", "\"test correct vs iteration\"", ")", "\n", "f", ".", "savefig", "(", "\"{}/test_correct.png\"", ".", "format", "(", "path", ")", ",", "dpi", "=", "800", ")", "\n", "plt", ".", "show", "(", ")", "\n", "f", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "i_range", ",", "train_loss", ")", "\n", "plt", ".", "title", "(", "\"train loss vs iteration\"", ")", "\n", "f", ".", "savefig", "(", "\"{}/train_loss.png\"", ".", "format", "(", "path", ")", ",", "dpi", "=", "800", ")", "\n", "plt", ".", "show", "(", ")", "\n", "f", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "i_range", ",", "train_correct", ")", "\n", "plt", ".", "title", "(", "\"train correct vs iteration\"", ")", "\n", "f", ".", "savefig", "(", "\"{}/train_correct.png\"", ".", "format", "(", "path", ")", ",", "dpi", "=", "800", ")", "\n", "plt", ".", "show", "(", ")", "\n", "f", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "i_range", ",", "dropout", ")", "\n", "plt", ".", "title", "(", "\"weight vs iteration\"", ")", "\n", "f", ".", "savefig", "(", "\"{}/weight.png\"", ".", "format", "(", "path", ")", ",", "dpi", "=", "800", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "i_range", ",", "test_loss", ",", "train_loss", ",", "test_correct", ",", "train_correct", ",", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.plot_all": [[324, 370], ["os.listdir", "len", "matplotlib.figure", "iter", "matplotlib.title", "matplotlib.legend", "plt.figure.savefig", "matplotlib.show", "matplotlib.figure", "matplotlib.title", "matplotlib.legend", "plt.figure.savefig", "matplotlib.show", "matplotlib.figure", "matplotlib.title", "matplotlib.legend", "plt.figure.savefig", "matplotlib.show", "matplotlib.figure", "matplotlib.title", "matplotlib.legend", "plt.figure.savefig", "matplotlib.show", "matplotlib.figure", "matplotlib.title", "matplotlib.legend", "plt.figure.savefig", "matplotlib.show", "list", "list.append", "output.append", "matplotlib.pyplot.cm.rainbow", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "plot_utils.plotResult", "file.split", "numpy.linspace", "file.split", "next", "next", "next", "next", "next"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.plotResult"], ["", "def", "plot_all", "(", "path", ")", ":", "\n", "    ", "output", "=", "[", "]", "\n", "for", "file", "in", "os", ".", "listdir", "(", "path", ")", ":", "\n", "        ", "out", "=", "list", "(", "plotResult", "(", "\"{}/{}\"", ".", "format", "(", "path", ",", "file", ")", ")", ")", "\n", "method", "=", "file", ".", "split", "(", "'_'", ")", "[", "1", "]", "\n", "if", "method", "==", "\"KFAC\"", ":", "\n", "            ", "method", "=", "file", ".", "split", "(", "'_'", ")", "[", "2", "]", "\n", "", "out", ".", "append", "(", "[", "method", "]", ")", "\n", "output", ".", "append", "(", "out", ")", "\n", "", "n", "=", "len", "(", "out", ")", "\n", "f", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "cycol", "=", "iter", "(", "cm", ".", "rainbow", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "n", ")", ")", ")", "\n", "for", "out", "in", "output", ":", "\n", "        ", "plt", ".", "plot", "(", "out", "[", "0", "]", ",", "out", "[", "5", "]", ",", "c", "=", "next", "(", "cycol", ")", ",", "label", "=", "out", "[", "-", "1", "]", "[", "0", "]", ")", "\n", "", "plt", ".", "title", "(", "\"weight vs iteration for different jacobian and hessian estimations\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "f", ".", "savefig", "(", "\"{}/all_weight.png\"", ".", "format", "(", "path", ")", ",", "dpi", "=", "800", ")", "\n", "plt", ".", "show", "(", ")", "\n", "f", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "for", "out", "in", "output", ":", "\n", "        ", "plt", ".", "plot", "(", "out", "[", "0", "]", ",", "out", "[", "1", "]", ",", "c", "=", "next", "(", "cycol", ")", ",", "label", "=", "out", "[", "-", "1", "]", "[", "0", "]", ")", "\n", "", "plt", ".", "title", "(", "\"test loss vs iteration for different jacobian and hessian estimations\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "f", ".", "savefig", "(", "\"{}/all_test_loss.png\"", ".", "format", "(", "path", ")", ",", "dpi", "=", "800", ")", "\n", "plt", ".", "show", "(", ")", "\n", "f", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "for", "out", "in", "output", ":", "\n", "        ", "plt", ".", "plot", "(", "out", "[", "0", "]", ",", "out", "[", "2", "]", ",", "c", "=", "next", "(", "cycol", ")", ",", "label", "=", "out", "[", "-", "1", "]", "[", "0", "]", ")", "\n", "", "plt", ".", "title", "(", "\"train loss vs iteration for different jacobian and hessian estimations\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "f", ".", "savefig", "(", "\"{}/all_train_loss.png\"", ".", "format", "(", "path", ")", ",", "dpi", "=", "800", ")", "\n", "plt", ".", "show", "(", ")", "\n", "f", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "for", "out", "in", "output", ":", "\n", "        ", "plt", ".", "plot", "(", "out", "[", "0", "]", ",", "out", "[", "3", "]", ",", "c", "=", "next", "(", "cycol", ")", ",", "label", "=", "out", "[", "-", "1", "]", "[", "0", "]", ")", "\n", "", "plt", ".", "title", "(", "\"test correct vs iteration for different jacobian and hessian estimations\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "f", ".", "savefig", "(", "\"{}/all_test_correct.png\"", ".", "format", "(", "path", ")", ",", "dpi", "=", "800", ")", "\n", "plt", ".", "show", "(", ")", "\n", "f", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "for", "out", "in", "output", ":", "\n", "        ", "plt", ".", "plot", "(", "out", "[", "0", "]", ",", "out", "[", "4", "]", ",", "c", "=", "next", "(", "cycol", ")", ",", "label", "=", "out", "[", "-", "1", "]", "[", "0", "]", ")", "\n", "", "plt", ".", "title", "(", "\"train correct vs iteration for different jacobian and hessian estimations\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "f", ".", "savefig", "(", "\"{}/all_train_correct.png\"", ".", "format", "(", "path", ")", ",", "dpi", "=", "800", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.showAllL2": [[372, 383], ["torch.load", "range", "torch.load.weight_decay[].data.cpu().numpy().reshape", "matplotlib.figure", "matplotlib.matshow", "matplotlib.title", "matplotlib.colorbar", "matplotlib.savefig", "matplotlib.close", "torch.load.weight_decay[].data.cpu().numpy", "torch.load.weight_decay[].data.cpu"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.utils.csv_logger.CSVLogger.close"], ["", "def", "showAllL2", "(", "path", ",", "j", ")", ":", "\n", "    ", "model", "=", "torch", ".", "load", "(", "path", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "L2", "=", "model", ".", "weight_decay", "[", "784", "*", "i", ":", "784", "*", "(", "i", "+", "1", ")", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "28", ",", "-", "1", ")", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "matshow", "(", "L2", ")", "\n", "plt", ".", "title", "(", "\"l2 weight for {}th output\"", ".", "format", "(", "i", ")", ")", "\n", "# plt.clim(-0.3, 0.3)", "\n", "plt", ".", "colorbar", "(", ")", "\n", "plt", ".", "savefig", "(", "\"{}_l2_weight_{}.png\"", ".", "format", "(", "i", ",", "j", ")", ",", "dpi", "=", "800", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.showAllL2Change": [[385, 391], ["os.listdir", "file.endswith", "plot_utils.showAllL2"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.showAllL2"], ["", "", "def", "showAllL2Change", "(", "path", ")", ":", "\n", "    ", "j", "=", "0", "\n", "for", "file", "in", "os", ".", "listdir", "(", "path", ")", ":", "\n", "        ", "if", "file", ".", "endswith", "(", "\".pkl\"", ")", ":", "\n", "            ", "showAllL2", "(", "\"{}/{}\"", ".", "format", "(", "path", ",", "file", ")", ",", "j", ")", "\n", "j", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.plot_utils.make_path": [[393, 403], ["None"], "function", ["None"], ["", "", "", "def", "make_path", "(", "model", "=", "'mlp'", ",", "hessian", "=", "'identity'", ",", "layers", "=", "0", ",", "size", "=", "50", ",", "valsize", "=", "50", ",", "dataset", "=", "'MNIST'", ",", "\n", "hyper_train", "=", "'all_weight'", ",", "hyper_value", "=", "-", "4", ")", ":", "\n", "    ", "assert", "model", "in", "[", "'mlp'", ",", "'cnn'", ",", "'alexnet'", ",", "'resnet'", "]", ",", "f'Model is {model}?'", "\n", "assert", "hessian", "in", "[", "'direct'", ",", "'identity'", ",", "'KFAC'", ",", "'zero'", "]", ",", "f'Hessian is {hessian}?'", "\n", "assert", "size", ">", "0", "or", "size", "==", "-", "1", ",", "f'Size is {size}?'", "\n", "assert", "valsize", ">", "0", "or", "valsize", "==", "-", "1", ",", "f'Valsize is {valsize}?'", "\n", "assert", "dataset", "in", "[", "'MNIST'", ",", "'CIFAR10'", "]", ",", "f'Dataset is {dataset}?'", "\n", "assert", "hyper_train", "in", "[", "'weight'", ",", "'all_weight'", ",", "'opt_data'", "]", ",", "f'hyper_train is {hyper_train}'", "\n", "# TODO (constraint on hyper_value?)", "\n", "return", "f\"model={model}_lrh=0.1_jacob=direct_hessian={hessian}_size={size}_valsize={valsize}_dataset={dataset}_hyper_train={hyper_train}_layers={layers}_restart=False_hyper_value={hyper_value}_\"", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.discrete_utils.split_cols": [[14, 22], ["numpy.cumsum", "zip", "sum", "mat.size"], "function", ["None"], ["def", "split_cols", "(", "mat", ",", "lengths", ")", ":", "\n", "    ", "\"\"\"Split a 2D matrix to variable length columns.\"\"\"", "\n", "assert", "mat", ".", "size", "(", ")", "[", "1", "]", "==", "sum", "(", "lengths", ")", ",", "\"Lengths must be summed to num columns\"", "\n", "l", "=", "np", ".", "cumsum", "(", "[", "0", "]", "+", "lengths", ")", "\n", "results", "=", "[", "]", "\n", "for", "s", ",", "e", "in", "zip", "(", "l", "[", ":", "-", "1", "]", ",", "l", "[", "1", ":", "]", ")", ":", "\n", "        ", "results", "+=", "[", "mat", "[", ":", ",", "s", ":", "e", "]", "]", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.discrete_utils.gumbel_binary": [[24, 38], ["torch.autograd.Variable", "torch.sigmoid", "torch.rand", "torch.rand", "torch.log", "torch.log", "torch.round", "torch.round", "theta.size"], "function", ["None"], ["", "def", "gumbel_binary", "(", "theta", ",", "temperature", "=", "0.5", ",", "hard", "=", "False", ")", ":", "\n", "    ", "\"\"\"theta is a vector of unnormalized probabilities\n    Returns:\n        A vector that becomes binary as the temperature --> 0\n    \"\"\"", "\n", "u", "=", "Variable", "(", "torch", ".", "rand", "(", "theta", ".", "size", "(", ")", ")", ")", "\n", "z", "=", "theta", "+", "torch", ".", "log", "(", "u", "/", "(", "1", "-", "u", ")", ")", "\n", "a", "=", "F", ".", "sigmoid", "(", "z", "/", "temperature", ")", "\n", "\n", "if", "hard", ":", "\n", "        ", "a_hard", "=", "torch", ".", "round", "(", "a", ")", "\n", "return", "(", "a_hard", "-", "a", ")", ".", "detach", "(", ")", "+", "a", "\n", "", "else", ":", "\n", "        ", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.discrete_utils.sample_gumbel": [[40, 43], ["torch.rand", "torch.rand", "torch.autograd.Variable", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["", "", "def", "sample_gumbel", "(", "shape", ",", "eps", "=", "1e-20", ")", ":", "\n", "    ", "U", "=", "torch", ".", "rand", "(", "shape", ")", "\n", "return", "-", "Variable", "(", "torch", ".", "log", "(", "-", "torch", ".", "log", "(", "U", "+", "eps", ")", "+", "eps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.discrete_utils.gumbel_softmax_sample": [[45, 48], ["torch.softmax", "discrete_utils.sample_gumbel", "logits.size"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.utils.discrete_utils.sample_gumbel"], ["", "def", "gumbel_softmax_sample", "(", "logits", ",", "temperature", ",", "dim", "=", "-", "1", ")", ":", "\n", "    ", "y", "=", "logits", "+", "sample_gumbel", "(", "logits", ".", "size", "(", ")", ")", "\n", "return", "F", ".", "softmax", "(", "y", "/", "temperature", ",", "dim", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.discrete_utils.gumbel_softmax": [[50, 66], ["torch.distributions.utils.probs_to_logits", "discrete_utils.gumbel_softmax_sample", "gumbel_softmax_sample.size", "gumbel_softmax_sample.max", "torch.zeros_like().view", "torch.zeros_like().view", "y_hard.view.scatter_", "y_hard.view.view", "ind.view", "torch.zeros_like", "torch.zeros_like"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.utils.discrete_utils.gumbel_softmax_sample"], ["", "def", "gumbel_softmax", "(", "probs", ",", "temperature", ",", "hard", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    input: [*, n_class]\n    return: [*, n_class] an one-hot vector\n    \"\"\"", "\n", "logits", "=", "probs_to_logits", "(", "probs", ")", "\n", "y", "=", "gumbel_softmax_sample", "(", "logits", ",", "temperature", ")", "\n", "shape", "=", "y", ".", "size", "(", ")", "\n", "if", "hard", ":", "\n", "        ", "_", ",", "ind", "=", "y", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "y_hard", "=", "torch", ".", "zeros_like", "(", "y", ")", ".", "view", "(", "-", "1", ",", "shape", "[", "-", "1", "]", ")", "\n", "y_hard", ".", "scatter_", "(", "1", ",", "ind", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "y_hard", "=", "y_hard", ".", "view", "(", "*", "shape", ")", "\n", "return", "(", "y_hard", "-", "y", ")", ".", "detach", "(", ")", "+", "y", "\n", "", "else", ":", "\n", "        ", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.discrete_utils.sample_conditional_concrete": [[68, 84], ["torch.autograd.Variable", "cond_concrete_sample.scatter.scatter", "torch.softmax", "probs.data.new().uniform_", "torch.log", "torch.log", "torch.log", "torch.log", "choice.unsqueeze", "probs.data.new", "torch.log", "torch.log", "torch.log", "torch.log", "probs.size", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.log", "torch.log", "choice.unsqueeze", "choice.unsqueeze"], "function", ["None"], ["", "", "def", "sample_conditional_concrete", "(", "probs", ",", "choice", ",", "temperature", ")", ":", "\n", "    ", "\"\"\"\n    Arguments:\n        probs: (K,)   --> probs: (batch_size, K)\n        choice: (batch_size,)\n\n    Returns:\n        cond_soft_sample: (batch_size, K)\n    \"\"\"", "\n", "# uniforms = Variable(probs.data.new(choice.size(0), probs.size(0)).uniform_())", "\n", "uniforms", "=", "Variable", "(", "probs", ".", "data", ".", "new", "(", "probs", ".", "size", "(", ")", ")", ".", "uniform_", "(", ")", ")", "\n", "cond_concrete_sample", "=", "-", "torch", ".", "log", "(", "-", "torch", ".", "log", "(", "uniforms", ")", "/", "probs", "-", "torch", ".", "log", "(", "torch", ".", "gather", "(", "uniforms", ",", "dim", "=", "1", ",", "index", "=", "choice", ".", "unsqueeze", "(", "1", ")", ")", ")", ")", "\n", "gumbels", "=", "-", "torch", ".", "log", "(", "-", "torch", ".", "log", "(", "torch", ".", "gather", "(", "uniforms", ",", "dim", "=", "1", ",", "index", "=", "choice", ".", "unsqueeze", "(", "1", ")", ")", ")", ")", "\n", "cond_concrete_sample", "=", "cond_concrete_sample", ".", "scatter", "(", "1", ",", "choice", ".", "unsqueeze", "(", "1", ")", ",", "gumbels", ")", "\n", "cond_soft_sample", "=", "F", ".", "softmax", "(", "cond_concrete_sample", "/", "temperature", ",", "dim", "=", "1", ")", "\n", "return", "cond_soft_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.discrete_utils.st": [[86, 93], ["x.size", "x.max", "torch.zeros_like().view", "torch.zeros_like().view", "x_hard.view.scatter_", "x_hard.view.view", "ind.view", "torch.zeros_like", "torch.zeros_like"], "function", ["None"], ["", "def", "st", "(", "x", ")", ":", "\n", "    ", "shape", "=", "x", ".", "size", "(", ")", "\n", "_", ",", "ind", "=", "x", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "x_hard", "=", "torch", ".", "zeros_like", "(", "x", ")", ".", "view", "(", "-", "1", ",", "shape", "[", "-", "1", "]", ")", "\n", "x_hard", ".", "scatter_", "(", "1", ",", "ind", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "x_hard", "=", "x_hard", ".", "view", "(", "*", "shape", ")", "\n", "return", "(", "x_hard", "-", "x", ")", ".", "detach", "(", ")", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.discrete_utils.sample_one_hot": [[95, 104], ["dist.size", "torch.multinomial", "torch.multinomial", "torch.zeros_like().view", "torch.zeros_like().view", "one_hot.view.scatter_", "one_hot.view.view", "torch.multinomial.view", "torch.zeros_like", "torch.zeros_like"], "function", ["None"], ["", "def", "sample_one_hot", "(", "dist", ")", ":", "\n", "    ", "\"\"\"Samples a one-hot vector from a multinomial distribution parameterized by dist.\n    \"\"\"", "\n", "shape", "=", "dist", ".", "size", "(", ")", "\n", "sample", "=", "torch", ".", "multinomial", "(", "dist", ")", "\n", "one_hot", "=", "torch", ".", "zeros_like", "(", "dist", ")", ".", "view", "(", "-", "1", ",", "shape", "[", "-", "1", "]", ")", "\n", "one_hot", ".", "scatter_", "(", "1", ",", "sample", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "one_hot", "=", "one_hot", ".", "view", "(", "*", "shape", ")", "\n", "return", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.discrete_utils.tanh_hard": [[106, 121], ["torch.tanh", "F.tanh.clone().detach", "a.clone().detach.data.apply_", "F.tanh.clone"], "function", ["None"], ["", "def", "tanh_hard", "(", "theta", ",", "hard", "=", "True", ")", ":", "\n", "    ", "\"\"\"theta is a vector of unnormalized probabilities\n    Returns:\n        A vector that becomes binary as the temperature --> 0\n    \"\"\"", "\n", "a", "=", "F", ".", "tanh", "(", "theta", ")", "\n", "\n", "if", "hard", ":", "\n", "        ", "a_hard", "=", "a", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "# a_hard = Variable(a.data)", "\n", "# a_hard.apply_(lambda x: -1 if x < 0 else 1)", "\n", "a_hard", ".", "data", ".", "apply_", "(", "lambda", "x", ":", "-", "1", "if", "x", "<", "0", "else", "1", ")", "\n", "return", "(", "a_hard", "-", "a", ")", ".", "detach", "(", ")", "+", "a", "\n", "", "else", ":", "\n", "        ", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.discrete_utils.sigmoid_hard": [[123, 136], ["torch.sigmoid", "torch.round", "torch.round"], "function", ["None"], ["", "", "def", "sigmoid_hard", "(", "theta", ",", "hard", "=", "True", ")", ":", "\n", "    ", "\"\"\"theta is a vector of unnormalized probabilities\n    Returns:\n        A binary vector (each element in {0, 1}), where the gradients\n        are computed using the sigmoid continuous relaxation (in (0,1)).\n    \"\"\"", "\n", "a", "=", "F", ".", "sigmoid", "(", "theta", ")", "\n", "\n", "if", "hard", ":", "\n", "        ", "a_hard", "=", "torch", ".", "round", "(", "a", ")", "\n", "return", "(", "a_hard", "-", "a", ")", ".", "detach", "(", ")", "+", "a", "\n", "", "else", ":", "\n", "        ", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.discrete_utils.st_softmax": [[138, 153], ["torch.softmax", "F.softmax.size", "F.softmax.max", "torch.zeros_like().view", "torch.zeros_like().view", "y_hard.view.scatter_", "y_hard.view.view", "ind.view", "torch.zeros_like", "torch.zeros_like"], "function", ["None"], ["", "", "def", "st_softmax", "(", "logits", ",", "temperature", "=", "1", ",", "hard", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    input: [*, n_class]\n    return: [*, n_class] an one-hot vector\n    \"\"\"", "\n", "y", "=", "F", ".", "softmax", "(", "logits", "/", "temperature", ",", "dim", "=", "-", "1", ")", "\n", "shape", "=", "y", ".", "size", "(", ")", "\n", "if", "hard", ":", "\n", "        ", "_", ",", "ind", "=", "y", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "y_hard", "=", "torch", ".", "zeros_like", "(", "y", ")", ".", "view", "(", "-", "1", ",", "shape", "[", "-", "1", "]", ")", "\n", "y_hard", ".", "scatter_", "(", "1", ",", "ind", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "y_hard", "=", "y_hard", ".", "view", "(", "*", "shape", ")", "\n", "return", "(", "y_hard", "-", "y", ")", ".", "detach", "(", ")", "+", "y", "\n", "", "else", ":", "\n", "        ", "return", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.logger.Logger.__init__": [[13, 47], ["logger.Logger.create_save_str", "datetime.datetime.datetime.utcnow().strftime", "vars", "sorted", "datetime.datetime.datetime.utcnow().strftime", "os.path.exists", "os.makedirs", "list", "open", "file.write", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "open.flush", "datetime.datetime.datetime.utcnow", "vars.keys", "file.write", "datetime.datetime.datetime.utcnow", "str", "str"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.utils.logger.Logger.create_save_str", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.logger.Logger.write", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.logger.Logger.write"], ["    ", "def", "__init__", "(", "self", ",", "argv", ",", "args", ",", "label_dict", ")", ":", "\n", "\n", "        ", "self", ".", "save", "=", "args", ".", "save", "\n", "if", "not", "args", ".", "save", ":", "\n", "            ", "return", "\n", "\n", "# Construct log directory name and create log directory if it doesn't exist.", "\n", "", "save_str", "=", "self", ".", "create_save_str", "(", "argv", ")", "\n", "if", "args", ".", "subdir", "==", "''", ":", "\n", "            ", "date", "=", "datetime", ".", "utcnow", "(", ")", ".", "strftime", "(", "\"%Y%m%d\"", ")", "\n", "args", ".", "subdir", "=", "date", "\n", "", "time", "=", "datetime", ".", "utcnow", "(", ")", ".", "strftime", "(", "\"%H:%M:%S\"", ")", "\n", "self", ".", "logdir", "=", "'../../'", "+", "args", ".", "logdir", "+", "'/'", "+", "args", ".", "dir", "+", "'/'", "+", "args", ".", "subdir", "+", "'/'", "+", "save_str", "+", "'_'", "+", "time", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "logdir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "logdir", ")", "\n", "\n", "", "args_dict", "=", "vars", "(", "args", ")", "\n", "args_list", "=", "sorted", "(", "list", "(", "args_dict", ".", "keys", "(", ")", ")", ")", "\n", "with", "open", "(", "self", ".", "logdir", "+", "'/experiment_params.txt'", ",", "'w'", ")", "as", "file", ":", "\n", "# file.write(sha + '\\n')", "\n", "            ", "file", ".", "write", "(", "'Logdir: '", "+", "str", "(", "self", ".", "logdir", ")", "+", "'\\n'", ")", "\n", "for", "arg", "in", "args_list", ":", "\n", "                ", "file", ".", "write", "(", "arg", "+", "': '", "+", "str", "(", "args_dict", "[", "arg", "]", ")", "+", "'\\n'", ")", "\n", "\n", "# Write labels at the start of the csv file.", "\n", "", "", "self", ".", "csv_files_and_writers", "=", "{", "}", "\n", "for", "name", "in", "label_dict", ":", "\n", "            ", "filename", "=", "self", ".", "logdir", "+", "'/'", "+", "name", "+", "'.csv'", "\n", "csv_file", "=", "open", "(", "filename", ",", "'w'", ")", "\n", "writer", "=", "csv", ".", "DictWriter", "(", "csv_file", ",", "fieldnames", "=", "label_dict", "[", "name", "]", ")", "\n", "\n", "self", ".", "csv_files_and_writers", "[", "name", "]", "=", "(", "csv_file", ",", "writer", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "csv_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.logger.Logger.create_save_str": [[48, 61], ["sorted", "arg.lstrip", "sorted.append", "enumerate", "arg.count", "len", "argv[].count"], "methods", ["None"], ["", "", "def", "create_save_str", "(", "self", ",", "argv", ")", ":", "\n", "        ", "argvals_to_write", "=", "[", "]", "\n", "for", "i", ",", "arg", "in", "[", "(", "i", ",", "arg", ")", "for", "(", "i", ",", "arg", ")", "in", "enumerate", "(", "argv", ")", "if", "arg", ".", "count", "(", "'-'", ")", "==", "1", "]", ":", "\n", "            ", "argval", "=", "arg", ".", "lstrip", "(", "'-'", ")", "\n", "if", "i", "+", "1", "<", "len", "(", "argv", ")", "and", "argv", "[", "i", "+", "1", "]", ".", "count", "(", "'-'", ")", "==", "0", ":", "\n", "                ", "argval", "+=", "argv", "[", "i", "+", "1", "]", "\n", "", "argvals_to_write", ".", "append", "(", "argval", ")", "\n", "\n", "", "argvals_to_write", "=", "sorted", "(", "argvals_to_write", ")", "\n", "save_str", "=", "'_'", ".", "join", "(", "argvals_to_write", ")", "\n", "if", "save_str", "==", "''", ":", "\n", "            ", "save_str", "=", "'no_args'", "\n", "", "return", "save_str", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.logger.Logger.write": [[62, 70], ["writer.writerow", "file.flush"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.utils.csv_logger.CSVLogger.writerow"], ["", "def", "write", "(", "self", ",", "name", ",", "stats", ")", ":", "\n", "        ", "\"\"\"\n        Write given stats into the csv file.\n        \"\"\"", "\n", "if", "self", ".", "save", ":", "\n", "            ", "file", ",", "writer", "=", "self", ".", "csv_files_and_writers", "[", "name", "]", "\n", "writer", ".", "writerow", "(", "stats", ")", "\n", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.logger.Logger.close": [[71, 74], ["[].close"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.utils.csv_logger.CSVLogger.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "csv_files_and_writers", ":", "\n", "            ", "self", ".", "csv_files_and_writers", "[", "name", "]", "[", "0", "]", ".", "close", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.csv_logger.CSVLogger.__init__": [[9, 18], ["open", "csv.DictWriter", "csv_logger.CSVLogger.writer.writeheader", "csv_logger.CSVLogger.csv_file.flush"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fieldnames", ",", "filename", "=", "'log.csv'", ")", ":", "\n", "\n", "        ", "self", ".", "filename", "=", "filename", "\n", "self", ".", "csv_file", "=", "open", "(", "filename", ",", "'w'", ")", "\n", "\n", "self", ".", "writer", "=", "csv", ".", "DictWriter", "(", "self", ".", "csv_file", ",", "fieldnames", "=", "fieldnames", ")", "\n", "self", ".", "writer", ".", "writeheader", "(", ")", "\n", "\n", "self", ".", "csv_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.csv_logger.CSVLogger.writerow": [[19, 22], ["csv_logger.CSVLogger.writer.writerow", "csv_logger.CSVLogger.csv_file.flush"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.utils.csv_logger.CSVLogger.writerow"], ["", "def", "writerow", "(", "self", ",", "row", ")", ":", "\n", "        ", "self", ".", "writer", ".", "writerow", "(", "row", ")", "\n", "self", ".", "csv_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.csv_logger.CSVLogger.close": [[23, 25], ["csv_logger.CSVLogger.csv_file.close"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.utils.csv_logger.CSVLogger.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "csv_file", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.hessian_vector_product": [[13, 21], ["torch.autograd.Variable", "torch.autograd.grad", "util.gather_flat_grad", "A_x.view.view", "model.parameters", "A_x.view.size"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.gather_flat_grad"], ["def", "hessian_vector_product", "(", "x_grad", ",", "vector", ",", "model", ",", "k", ")", ":", "\n", "    ", "v", "=", "Variable", "(", "vector", ")", "\n", "z", "=", "x_grad", "@", "v", "\n", "result", "=", "grad", "(", "z", ",", "model", ".", "parameters", "(", ")", ",", "retain_graph", "=", "True", ")", "\n", "A_x", "=", "gather_flat_grad", "(", "result", ")", "\n", "A_x", "=", "A_x", ".", "view", "(", "A_x", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "A_x", "=", "A_x", "+", "k", "*", "v", "\n", "return", "A_x", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.conjugate_gradiant": [[23, 85], ["torch.DoubleTensor", "max", "r_i.clone", "print", "best_x.clone.clone", "print", "print", "x.clone.cpu", "b.norm", "torch.DoubleTensor", "best_x.clone.cuda", "util.hessian_vector_product", "r.norm", "numpy.zeros", "I.cuda.cuda", "util.hessian_vector_product", "r_i.norm", "r_i.permute", "util.hessian_vector_product", "r_i.permute", "rr_i_new.sqrt", "print", "numpy.identity", "util.hessian_vector_product", "r_i.clone.permute", "util.hessian_vector_product", "r.norm", "r.norm", "best_x.clone.clone", "x.clone.clone", "r_i.clone", "b.size", "b.size", "hessian.data.size", "rr_i_new.sqrt", "util.hessian_vector_product"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.hessian_vector_product", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.hessian_vector_product", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.hessian_vector_product", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.hessian_vector_product", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.hessian_vector_product", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.hessian_vector_product"], ["", "def", "conjugate_gradiant", "(", "A_grad", ",", "b", ",", "model", ",", "is_cuda", ",", "hessian", "=", "None", ")", ":", "\n", "    ", "x", "=", "torch", ".", "DoubleTensor", "(", "np", ".", "zeros", "(", "(", "b", ".", "size", "(", "0", ")", ",", "b", ".", "size", "(", "1", ")", ")", ")", "+", "1", ")", "\n", "b_norm", "=", "max", "(", "b", ".", "norm", "(", ")", ",", "1e-20", ")", "\n", "k", "=", "0", "\n", "if", "hessian", "is", "not", "None", ":", "\n", "        ", "I", "=", "torch", ".", "DoubleTensor", "(", "np", ".", "identity", "(", "hessian", ".", "data", ".", "size", "(", "0", ")", ")", "*", "1e-4", ")", "\n", "if", "is_cuda", ":", "\n", "            ", "I", "=", "I", ".", "cuda", "(", ")", "\n", "", "hessian", "+=", "I", "\n", "", "if", "is_cuda", ":", "\n", "        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "", "if", "hessian", "is", "not", "None", ":", "\n", "        ", "r_i", "=", "b", "-", "hessian", "@", "x", "\n", "", "else", ":", "\n", "        ", "r_i", "=", "b", "-", "hessian_vector_product", "(", "A_grad", ",", "x", ",", "model", ",", "k", ")", "\n", "", "d_i", "=", "r_i", ".", "clone", "(", ")", "\n", "tolerance", "=", "1e-3", "\n", "i", "=", "0", "\n", "no_update_i", "=", "0", "\n", "max_iter", "=", "5000", "\n", "print", "(", "'i:{}, r norm:{}'", ".", "format", "(", "i", ",", "r_i", ".", "norm", "(", ")", ")", ")", "\n", "min_r", "=", "(", "b", "-", "hessian_vector_product", "(", "A_grad", ",", "x", ",", "model", ",", "0", ")", ")", ".", "norm", "(", ")", "\n", "best_x", "=", "x", ".", "clone", "(", ")", "\n", "while", "min_r", "/", "b_norm", ">", "tolerance", ":", "\n", "        ", "rr_i", "=", "r_i", ".", "permute", "(", "1", ",", "0", ")", "@", "r_i", "\n", "if", "hessian", "is", "not", "None", ":", "\n", "            ", "A_d", "=", "hessian", "@", "d_i", "\n", "", "else", ":", "\n", "            ", "A_d", "=", "hessian_vector_product", "(", "A_grad", ",", "d_i", ",", "model", ",", "k", ")", "\n", "", "alpha", "=", "rr_i", "/", "(", "d_i", ".", "permute", "(", "1", ",", "0", ")", "@", "A_d", ")", "\n", "x", "+=", "alpha", "*", "d_i", "\n", "r_i", "-=", "alpha", "*", "A_d", "\n", "rr_i_new", "=", "r_i", ".", "permute", "(", "1", ",", "0", ")", "@", "r_i", "\n", "d_i", "=", "r_i", "+", "(", "rr_i_new", "/", "rr_i", ")", "*", "d_i", "\n", "i", "+=", "1", "\n", "no_update_i", "+=", "1", "\n", "if", "rr_i_new", ".", "sqrt", "(", ")", "<", "min_r", ":", "\n", "            ", "r", "=", "b", "-", "hessian_vector_product", "(", "A_grad", ",", "x", ",", "model", ",", "0", ")", "\n", "if", "r", ".", "norm", "(", ")", "<", "min_r", ":", "\n", "                ", "min_r", "=", "r", ".", "norm", "(", ")", "\n", "best_x", "=", "x", ".", "clone", "(", ")", "\n", "no_update_i", "=", "0", "\n", "", "", "if", "i", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "'i:{}, r norm:{}, min r norm:{}, releative: {} same best: {}'", ".", "format", "(", "i", ",", "rr_i_new", ".", "sqrt", "(", ")", ",", "min_r", ",", "\n", "min_r", "/", "b_norm", ",", "no_update_i", ")", ")", "\n", "", "if", "i", "==", "max_iter", "or", "no_update_i", "==", "max_iter", "/", "10", ":", "\n", "            ", "if", "min_r", "/", "b_norm", ">", "1", ":", "\n", "                ", "if", "max_iter", ">", "10000", ":", "\n", "                    ", "break", "\n", "", "max_iter", "+=", "1000", "\n", "k", "=", "b_norm", "*", "4", "*", "1e-3", "\n", "x", "=", "best_x", ".", "clone", "(", ")", "\n", "r_i", "=", "b", "-", "hessian_vector_product", "(", "A_grad", ",", "x", ",", "model", ",", "k", ")", "\n", "d_i", "=", "r_i", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "r", "=", "b", "-", "hessian_vector_product", "(", "A_grad", ",", "best_x", ",", "model", ",", "0", ")", "\n", "print", "(", "r", ".", "norm", "(", ")", ")", "\n", "print", "(", "b_norm", ")", "\n", "best_x", "=", "best_x", ".", "cpu", "(", ")", "\n", "return", "best_x", ",", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.preconditioned_conjugate_gradiant": [[87, 137], ["torch.DoubleTensor", "scipy.sparse.linalg.spilu", "torch.DoubleTensor", "z_i.clone", "max", "r_i.norm", "torch.DoubleTensor.clone", "b.norm", "print", "print", "numpy.random.normal", "torch.DoubleTensor", "r_i.norm", "I.cuda.cuda", "torch.DoubleTensor.cuda", "torch.DoubleTensor.cuda", "util.hessian_vector_product", "b.norm", "r_i.norm", "util.hessian_vector_product", "r_i.permute", "r_i.norm", "r_i.norm", "torch.DoubleTensor.clone", "print", "numpy.identity", "z_i.clone.permute", "b.size", "b.size", "hessian.data.size", "r_i.norm", "z_i.permute", "torch.DoubleTensor.norm", "torch.DoubleTensor.norm"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.hessian_vector_product", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.hessian_vector_product"], ["", "def", "preconditioned_conjugate_gradiant", "(", "A_grad", ",", "b", ",", "model", ",", "is_cuda", ",", "hessian", "=", "None", ")", ":", "\n", "    ", "x", "=", "torch", ".", "DoubleTensor", "(", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "b", ".", "size", "(", "0", ")", ",", "b", ".", "size", "(", "1", ")", ")", ")", ")", "\n", "if", "hessian", "is", "not", "None", ":", "\n", "        ", "I", "=", "torch", ".", "DoubleTensor", "(", "np", ".", "identity", "(", "hessian", ".", "data", ".", "size", "(", "0", ")", ")", "*", "1e-4", ")", "\n", "if", "is_cuda", ":", "\n", "            ", "I", "=", "I", ".", "cuda", "(", ")", "\n", "", "hessian", "+=", "I", "\n", "", "M", "=", "scipy", ".", "sparse", ".", "linalg", ".", "spilu", "(", "hessian", ")", "\n", "M", "=", "torch", ".", "DoubleTensor", "(", "M", ")", "\n", "if", "is_cuda", ":", "\n", "        ", "x", ",", "M", "=", "x", ".", "cuda", "(", ")", ",", "M", ".", "cuda", "(", ")", "\n", "", "if", "hessian", "is", "not", "None", ":", "\n", "        ", "r_i", "=", "b", "-", "hessian", "@", "x", "\n", "", "else", ":", "\n", "        ", "r_i", "=", "b", "-", "hessian_vector_product", "(", "A_grad", ",", "x", ",", "model", ")", "\n", "", "z_i", "=", "M", "@", "r_i", "\n", "d_i", "=", "z_i", ".", "clone", "(", ")", "\n", "tolerance", "=", "max", "(", "1e-4", "*", "b", ".", "norm", "(", ")", ",", "1e-4", ")", "\n", "i", "=", "0", "\n", "min_r", "=", "r_i", ".", "norm", "(", ")", "\n", "best_x", "=", "x", ".", "clone", "(", ")", "\n", "b_norm", "=", "b", ".", "norm", "(", ")", "\n", "no_update_i", "=", "0", "\n", "max_iter", "=", "10000", "\n", "print", "(", "'i:{}, r norm:{}'", ".", "format", "(", "i", ",", "r_i", ".", "norm", "(", ")", ")", ")", "\n", "while", "r_i", ".", "norm", "(", ")", ">", "tolerance", ":", "\n", "        ", "if", "hessian", "is", "not", "None", ":", "\n", "            ", "A_d", "=", "hessian", "@", "d_i", "\n", "", "else", ":", "\n", "            ", "A_d", "=", "hessian_vector_product", "(", "A_grad", ",", "d_i", ",", "model", ")", "\n", "", "rz_i", "=", "r_i", ".", "permute", "(", "1", ",", "0", ")", "@", "z_i", "\n", "alpha", "=", "rz_i", "/", "(", "d_i", ".", "permute", "(", "1", ",", "0", ")", "@", "A_d", ")", "\n", "x", "+=", "alpha", "*", "d_i", "\n", "r_i", "-=", "alpha", "*", "A_d", "\n", "z_i", "=", "M", "@", "r_i", "\n", "d_i", "=", "z_i", "+", "(", "(", "z_i", ".", "permute", "(", "1", ",", "0", ")", "@", "r_i", ")", "/", "rz_i", ")", "*", "d_i", "\n", "i", "+=", "1", "\n", "no_update_i", "+=", "1", "\n", "if", "r_i", ".", "norm", "(", ")", "<", "min_r", ":", "\n", "            ", "min_r", "=", "r_i", ".", "norm", "(", ")", "\n", "best_x", "=", "x", ".", "clone", "(", ")", "\n", "no_update_i", "=", "0", "\n", "", "if", "i", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'i:{}, r norm:{}, min r norm:{}, releative: {} same best: {}'", ".", "format", "(", "i", ",", "r_i", ".", "norm", "(", ")", ",", "min_r", "/", "M", ".", "norm", "(", ")", ",", "\n", "min_r", "/", "M", ".", "norm", "(", ")", "/", "b_norm", ",", "\n", "no_update_i", ")", ")", "\n", "", "if", "i", "==", "max_iter", ":", "\n", "            ", "break", "\n", "", "", "print", "(", "'iteration: {}; result r_i : {}'", ".", "format", "(", "i", ",", "min_r", ")", ")", "\n", "return", "best_x", ",", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.test_cg": [[139, 150], ["numpy.random.randn", "torch.DoubleTensor", "torch.DoubleTensor", "util.preconditioned_conjugate_gradiant", "numpy.linalg.solve", "print", "print", "print", "numpy.dot", "numpy.random.randn", "numpy.dot", "numpy.linalg.norm", "x_p.numpy"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.preconditioned_conjugate_gradiant"], ["", "def", "test_cg", "(", "size", ")", ":", "\n", "    ", "A", "=", "np", ".", "random", ".", "randn", "(", "size", ",", "size", ")", "\n", "A_i", "=", "torch", ".", "DoubleTensor", "(", "np", ".", "dot", "(", "A", ",", "A", ".", "T", ")", ")", "\n", "b", "=", "torch", ".", "DoubleTensor", "(", "np", ".", "random", ".", "randn", "(", "size", ",", "1", ")", ")", "\n", "# x, i = conjugate_gradiant(None, b, None, False, A_i)", "\n", "x_p", ",", "i", "=", "preconditioned_conjugate_gradiant", "(", "None", ",", "b", ",", "None", ",", "False", ",", "A_i", ")", "\n", "x_refer", "=", "np", ".", "linalg", ".", "solve", "(", "np", ".", "dot", "(", "A", ",", "A", ".", "T", ")", ",", "b", ")", "\n", "print", "(", "\"difference between own CG and actual solution\"", ")", "\n", "# print(np.linalg.norm(x.numpy() - x_refer))", "\n", "print", "(", "\"difference between own CG and actual solution\"", ")", "\n", "print", "(", "np", ".", "linalg", ".", "norm", "(", "x_p", ".", "numpy", "(", ")", "-", "x_refer", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.gather_flat_grad": [[152, 158], ["torch.cat", "p.reshape"], "function", ["None"], ["", "def", "gather_flat_grad", "(", "loss_grad", ")", ":", "\n", "#cnt = 0", "\n", "#for g in loss_grad:", "\n", "#    g_vector = g.contiguous().view(-1) if cnt == 0 else torch.cat([g_vector, g.contiguous().view(-1)])", "\n", "#    cnt = 1", "\n", "    ", "return", "torch", ".", "cat", "(", "[", "p", ".", "reshape", "(", "-", "1", ")", "for", "p", "in", "loss_grad", "]", ")", "#g_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.eval_hessian": [[160, 174], ["g_vector.size", "torch.zeros", "range", "hessian.cuda.cuda", "torch.autograd.grad", "model.parameters", "g.contiguous().view", "torch.cat", "g.contiguous", "g.contiguous().view", "g.contiguous"], "function", ["None"], ["", "def", "eval_hessian", "(", "g_vector", ",", "model", ",", "is_cuda", ")", ":", "\n", "    ", "l", "=", "g_vector", ".", "size", "(", "0", ")", "\n", "hessian", "=", "torch", ".", "zeros", "(", "l", ",", "l", ")", "\n", "if", "is_cuda", ":", "\n", "        ", "hessian", "=", "hessian", ".", "cuda", "(", ")", "\n", "", "for", "idx", "in", "range", "(", "l", ")", ":", "\n", "        ", "grad2rd", "=", "grad", "(", "g_vector", "[", "idx", "]", ",", "model", ".", "parameters", "(", ")", ",", "retain_graph", "=", "True", ",", "allow_unused", "=", "True", ")", "\n", "cnt", "=", "0", "\n", "for", "g", "in", "grad2rd", ":", "\n", "            ", "g2", "=", "g", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "if", "cnt", "==", "0", "else", "torch", ".", "cat", "(", "[", "g2", ",", "g", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "]", ")", "\n", "cnt", "=", "1", "\n", "", "hessian", "[", "idx", "]", "=", "g2", "\n", "\n", "", "return", "hessian", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.test_hessian": [[176, 184], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.grad", "torch.autograd.Variable", "util.gather_flat_grad", "print", "torch.ones", "torch.FloatTensor", "torch.ones", "torch.autograd.Variable.view", "torch.autograd.Variable.t"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.gather_flat_grad"], ["", "def", "test_hessian", "(", ")", ":", "\n", "    ", "x", "=", "Variable", "(", "torch", ".", "ones", "(", "2", ",", "1", ")", ",", "requires_grad", "=", "True", ")", "\n", "A", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "[", "[", "1", ",", "2", "]", ",", "[", "3", ",", "4", "]", "]", ")", ",", "requires_grad", "=", "False", ")", "\n", "f", "=", "x", ".", "view", "(", "-", "1", ")", "@", "A", "@", "x", "\n", "fg", "=", "grad", "(", "f", ",", "x", ",", "create_graph", "=", "True", ")", "\n", "v", "=", "Variable", "(", "torch", ".", "ones", "(", "2", ",", "1", ")", ",", "requires_grad", "=", "True", ")", "\n", "f_fg", "=", "gather_flat_grad", "(", "fg", ")", "\n", "print", "(", "A", "+", "A", ".", "t", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.eval_jacobian": [[186, 201], ["lambd_vector.size", "sum", "torch.zeros", "range", "jacobian.cuda.permute", "jacobian.cuda.cuda", "torch.autograd.grad", "p.numel", "print", "model.parameters", "model.parameters", "g.contiguous().view", "torch.cat", "g.contiguous", "g.contiguous().view", "g.contiguous"], "function", ["None"], ["", "def", "eval_jacobian", "(", "lambd_vector", ",", "model", ",", "is_cuda", ")", ":", "\n", "    ", "row_size", "=", "lambd_vector", ".", "size", "(", "0", ")", "\n", "col_size", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "jacobian", "=", "torch", ".", "zeros", "(", "row_size", ",", "col_size", ")", "\n", "if", "is_cuda", ":", "jacobian", "=", "jacobian", ".", "cuda", "(", ")", "\n", "for", "idx", "in", "range", "(", "row_size", ")", ":", "\n", "        ", "if", "idx", "%", "1000", "==", "0", ":", "print", "(", "f\"jac id {idx} / {row_size}\"", ")", "\n", "grad2rd", "=", "grad", "(", "lambd_vector", "[", "idx", "]", ",", "model", ".", "parameters", "(", ")", ",", "retain_graph", "=", "True", ",", "allow_unused", "=", "True", ")", "\n", "cnt", "=", "0", "\n", "for", "g", "in", "grad2rd", ":", "\n", "            ", "g2", "=", "g", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "if", "cnt", "==", "0", "else", "torch", ".", "cat", "(", "[", "g2", ",", "g", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "]", ")", "\n", "cnt", "=", "1", "\n", "", "jacobian", "[", "idx", "]", "=", "g2", "\n", "", "jacobian", "=", "jacobian", ".", "permute", "(", "1", ",", "0", ")", "\n", "return", "jacobian", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.eval_jacobian_matrix": [[203, 219], ["lambd_vector.size", "range", "print", "model.modules", "torch.autograd.grad", "torch.cat", "[].view", "torch.autograd.grad"], "function", ["None"], ["", "def", "eval_jacobian_matrix", "(", "lambd_vector", ",", "model", ",", "is_cuda", ")", ":", "\n", "    ", "size", "=", "lambd_vector", ".", "size", "(", "0", ")", "\n", "jacobian", "=", "{", "}", "\n", "for", "idx", "in", "range", "(", "size", ")", ":", "\n", "        ", "print", "(", "idx", ")", "\n", "jacobian", "[", "idx", "]", "=", "{", "}", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "m", ".", "__class__", ".", "__name__", "in", "[", "'Linear'", ",", "'Conv2d'", "]", ":", "\n", "                ", "grad2d", "=", "grad", "(", "lambd_vector", "[", "idx", "]", ",", "m", ".", "weight", ",", "retain_graph", "=", "True", ",", "allow_unused", "=", "True", ")", "[", "0", "]", "\n", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "grad2d", "=", "torch", ".", "cat", "(", "\n", "[", "grad2d", ",", "grad", "(", "lambd_vector", "[", "idx", "]", ",", "m", ".", "bias", ",", "retain_graph", "=", "True", ",", "allow_unused", "=", "True", ")", "[", "0", "]", ".", "view", "(", "-", "1", ",", "1", ")", "]", ",", "\n", "1", ")", "\n", "", "jacobian", "[", "idx", "]", "[", "m", "]", "=", "grad2d", "\n", "", "", "", "return", "jacobian", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.test_jacobian": [[221, 229], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.grad", "print", "print", "torch.ones", "torch.FloatTensor", "torch.FloatTensor", "util.eval_jacobian", "torch.autograd.Variable.view", "util.gather_flat_grad"], "function", ["home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.eval_jacobian", "home.repos.pwc.inspect_result.googleinterns_commentaries.utils.util.gather_flat_grad"], ["", "def", "test_jacobian", "(", ")", ":", "\n", "    ", "x", "=", "Variable", "(", "torch", ".", "ones", "(", "2", ",", "1", ")", ",", "requires_grad", "=", "True", ")", "\n", "y", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "[", "[", "10", "]", ",", "[", "4", "]", "]", ")", ",", "requires_grad", "=", "True", ")", "\n", "A", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "[", "[", "1", ",", "2", "]", ",", "[", "3", ",", "4", "]", "]", ")", ",", "requires_grad", "=", "False", ")", "\n", "f", "=", "y", ".", "view", "(", "-", "1", ")", "@", "A", "@", "x", "\n", "fg", "=", "grad", "(", "f", ",", "x", ",", "create_graph", "=", "True", ")", "\n", "print", "(", "eval_jacobian", "(", "gather_flat_grad", "(", "fg", ")", ",", "y", ")", ")", "\n", "print", "(", "A", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.unet.UNet.__init__": [[15, 77], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch.nn.ModuleList", "torch.nn.ModuleList", "reversed", "torch.nn.Conv2d", "torch.nn.Conv2d", "unet.UNet.down_path.append", "range", "unet.UNet.up_path.append", "unet.UNetConvBlock", "unet.UNetUpBlock"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", "=", "1", ",", "\n", "n_classes", "=", "2", ",", "\n", "depth", "=", "5", ",", "\n", "wf", "=", "6", ",", "\n", "padding", "=", "False", ",", "\n", "batch_norm", "=", "False", ",", "\n", "do_noise_channel", "=", "False", ",", "\n", "use_identity_residual", "=", "False", ",", "\n", "up_mode", "=", "'upconv'", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Implementation of\n        U-Net: Convolutional Networks for Biomedical Image Segmentation\n        (Ronneberger et al., 2015)\n        https://arxiv.org/abs/1505.04597\n\n        Using the default arguments will yield the exact version used\n        in the original paper\n\n        Args:\n            in_channels (int): number of input channels\n            n_classes (int): number of output channels\n            depth (int): depth of the network\n            wf (int): number of filters in the first layer is 2**wf\n            padding (bool): if True, apply padding such that the input shape\n                            is the same as the output.\n                            This may introduce artifacts\n            batch_norm (bool): Use BatchNorm after layers with an\n                               activation function\n            up_mode (str): one of 'upconv' or 'upsample'.\n                           'upconv' will use transposed convolutions for\n                           learned upsampling.\n                           'upsample' will use bilinear upsampling.\n        \"\"\"", "\n", "super", "(", "UNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "do_noise_channel", "=", "do_noise_channel", "\n", "self", ".", "use_identity_residual", "=", "use_identity_residual", "\n", "\n", "if", "self", ".", "do_noise_channel", ":", "\n", "            ", "in_channels", "+=", "1", "\n", "\n", "", "prev_channels", "=", "in_channels", "\n", "self", ".", "down_path", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "self", ".", "down_path", ".", "append", "(", "\n", "UNetConvBlock", "(", "prev_channels", ",", "2", "**", "(", "wf", "+", "i", ")", ",", "padding", ",", "batch_norm", ")", "\n", ")", "\n", "prev_channels", "=", "2", "**", "(", "wf", "+", "i", ")", "\n", "\n", "", "self", ".", "up_path", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "reversed", "(", "range", "(", "depth", "-", "1", ")", ")", ":", "\n", "            ", "self", ".", "up_path", ".", "append", "(", "\n", "UNetUpBlock", "(", "prev_channels", ",", "2", "**", "(", "wf", "+", "i", ")", ",", "up_mode", ",", "padding", ",", "batch_norm", ")", "\n", ")", "\n", "prev_channels", "=", "2", "**", "(", "wf", "+", "i", ")", "\n", "\n", "", "self", ".", "last", "=", "nn", ".", "Conv2d", "(", "prev_channels", ",", "n_classes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.unet.UNet.forward": [[78, 115], ["enumerate", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "down", "up", "unet.UNet.last", "unet.UNet.last", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "blocks.append", "torch.max_pool2d", "torch.max_pool2d", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "class_label.float().reshape", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "len", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "class_label.float", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "use_zero_noise", "=", "False", ",", "class_label", "=", "None", ")", ":", "\n", "        ", "blocks", "=", "[", "]", "\n", "\n", "do_class_generation", "=", "False", "\n", "if", "self", ".", "do_noise_channel", ":", "\n", "            ", "if", "do_class_generation", ":", "\n", "                ", "x", "=", "x", "*", "0", "+", "class_label", ".", "float", "(", ")", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "noise_channel", "=", "torch", ".", "randn", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", ")", ".", "cuda", "(", ")", "*", "0", "+", "torch", ".", "randn", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", ")", ".", "cuda", "(", ")", "\n", "if", "use_zero_noise", ":", "\n", "                ", "noise_channel", "=", "noise_channel", "*", "0", "\n", "\n", "", "out", "=", "torch", ".", "cat", "(", "[", "x", ",", "noise_channel", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "x", "\n", "\n", "", "for", "i", ",", "down", "in", "enumerate", "(", "self", ".", "down_path", ")", ":", "\n", "            ", "out", "=", "down", "(", "out", ")", "\n", "if", "i", "!=", "len", "(", "self", ".", "down_path", ")", "-", "1", ":", "\n", "                ", "blocks", ".", "append", "(", "out", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "\n", "", "", "for", "i", ",", "up", "in", "enumerate", "(", "self", ".", "up_path", ")", ":", "\n", "            ", "out", "=", "up", "(", "out", ",", "blocks", "[", "-", "i", "-", "1", "]", ")", "\n", "\n", "", "if", "self", ".", "use_identity_residual", ":", "\n", "            ", "res", "=", "self", ".", "last", "(", "out", ")", "\n", "# normer = 2.0  # (x.norm(dim=(2, 3)) / res.norm(dim=(2, 3))).reshape(x.shape[0], x.shape[1], 1, 1)", "\n", "# res = res * normer", "\n", "# mixer = 0.75  # torch.rand((x.shape[0], 1, 1, 1)).cuda()  # 0.5", "\n", "if", "not", "do_class_generation", ":", "\n", "                ", "res", "=", "torch", ".", "tanh", "(", "res", ")", "\n", "return", "x", "+", "res", "# mixer * x + (1.0 - mixer) * res", "\n", "", "else", ":", "\n", "                ", "return", "res", "\n", "", "", "else", ":", "\n", "            ", "return", "self", ".", "last", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.unet.UNetConvBlock.__init__": [[118, 133], ["torch.nn.Module.__init__", "block.append", "block.append", "block.append", "block.append", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "block.append", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "block.append", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "padding", ",", "batch_norm", ")", ":", "\n", "        ", "super", "(", "UNetConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block", "=", "[", "]", "\n", "\n", "block", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_size", ",", "out_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "int", "(", "padding", ")", ")", ")", "\n", "block", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "if", "batch_norm", ":", "\n", "            ", "block", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_size", ")", ")", "\n", "\n", "", "block", ".", "append", "(", "nn", ".", "Conv2d", "(", "out_size", ",", "out_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "int", "(", "padding", ")", ")", ")", "\n", "block", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "if", "batch_norm", ":", "\n", "            ", "block", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_size", ")", ")", "\n", "\n", "", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "*", "block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.unet.UNetConvBlock.forward": [[134, 137], ["unet.UNetConvBlock.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.unet.UNetUpBlock.__init__": [[140, 151], ["torch.nn.Module.__init__", "unet.UNetConvBlock", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "up_mode", ",", "padding", ",", "batch_norm", ")", ":", "\n", "        ", "super", "(", "UNetUpBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "up_mode", "==", "'upconv'", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "in_size", ",", "out_size", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "", "elif", "up_mode", "==", "'upsample'", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "mode", "=", "'bilinear'", ",", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_size", ",", "out_size", ",", "kernel_size", "=", "1", ")", ",", "\n", ")", "\n", "\n", "", "self", ".", "conv_block", "=", "UNetConvBlock", "(", "in_size", ",", "out_size", ",", "padding", ",", "batch_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.unet.UNetUpBlock.center_crop": [[152, 158], ["layer.size"], "methods", ["None"], ["", "def", "center_crop", "(", "self", ",", "layer", ",", "target_size", ")", ":", "\n", "        ", "_", ",", "_", ",", "layer_height", ",", "layer_width", "=", "layer", ".", "size", "(", ")", "\n", "diff_y", "=", "(", "layer_height", "-", "target_size", "[", "0", "]", ")", "//", "2", "\n", "diff_x", "=", "(", "layer_width", "-", "target_size", "[", "1", "]", ")", "//", "2", "\n", "return", "layer", "[", "\n", ":", ",", ":", ",", "diff_y", ":", "(", "diff_y", "+", "target_size", "[", "0", "]", ")", ",", "diff_x", ":", "(", "diff_x", "+", "target_size", "[", "1", "]", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.unet.UNetUpBlock.forward": [[160, 167], ["unet.UNetUpBlock.up", "unet.UNetUpBlock.center_crop", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet.UNetUpBlock.conv_block"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.unet.UNetUpBlock.center_crop"], ["", "def", "forward", "(", "self", ",", "x", ",", "bridge", ")", ":", "\n", "        ", "up", "=", "self", ".", "up", "(", "x", ")", "\n", "crop1", "=", "self", ".", "center_crop", "(", "bridge", ",", "up", ".", "shape", "[", "2", ":", "]", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "up", ",", "crop1", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "conv_block", "(", "out", ")", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.BasicBlock.__init__": [[18, 30], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.__init__", "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.conv3x3", "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.BasicBlock.forward": [[32, 38], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.Bottleneck.__init__": [[43, 57], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.Bottleneck.forward": [[59, 66], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.ResNet.__init__": [[69, 82], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.__init__", "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.conv3x3", "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ",", "num_channels", "=", "3", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "num_channels", ",", "64", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "self", ".", "weight_decay", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.ResNet._make_layer": [[83, 90], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.ResNet.forward": [[91, 105], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_features", "=", "False", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "1", ")", "\n", "features", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "features", ")", "\n", "\n", "if", "return_features", ":", "\n", "            ", "return", "out", ",", "features", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.ResNet.all_L2_loss": [[106, 114], ["resnet.ResNet.parameters", "p.numel", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "p.numel"], "methods", ["None"], ["", "", "def", "all_L2_loss", "(", "self", ")", ":", "\n", "        ", "loss", "=", ".0", "\n", "count", "=", "0", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "loss", "=", "loss", "+", "torch", ".", "sum", "(", "\n", "torch", ".", "mul", "(", "torch", ".", "exp", "(", "self", ".", "weight_decay", "[", "count", ":", "count", "+", "p", ".", "numel", "(", ")", "]", ")", ",", "torch", ".", "flatten", "(", "torch", ".", "mul", "(", "p", ",", "p", ")", ")", ")", ")", "\n", "count", "+=", "p", ".", "numel", "(", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.conv3x3": [[11, 13], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.ResNet18": [[116, 118], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", "num_classes", "=", "10", ",", "num_channels", "=", "3", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", ",", "num_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.ResNet34": [[119, 121], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.ResNet50": [[122, 124], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.ResNet101": [[125, 127], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.resnet.ResNet152": [[128, 130], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.CBRStudent.__init__": [[17, 31], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_channels", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "CBRStudent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_channels", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ")", "\n", "fcsize", "=", "64", "if", "num_channels", "==", "1", "else", "256", "\n", "self", ".", "fc_pi", "=", "nn", ".", "Linear", "(", "fcsize", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.CBRStudent.forward": [[32, 38], ["simple_models.CBRStudent.layer1", "simple_models.CBRStudent.layer2", "out.reshape.reshape.reshape", "simple_models.CBRStudent.fc_pi", "out.reshape.reshape.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "layer1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "out", ".", "reshape", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out_pi", "=", "self", ".", "fc_pi", "(", "out", ")", "\n", "return", "out_pi", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.UNetTeacher.__init__": [[41, 50], ["torch.Module.__init__", "unet.UNet"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_channels", ",", "args", ")", ":", "\n", "        ", "super", "(", "UNetTeacher", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "unet", "=", "UNet", "(", "in_channels", "=", "num_channels", ",", "n_classes", "=", "1", ",", "depth", "=", "2", ",", "wf", "=", "3", ",", "padding", "=", "True", ",", "\n", "batch_norm", "=", "True", ",", "do_noise_channel", "=", "False", ",", "up_mode", "=", "'upsample'", ",", "use_identity_residual", "=", "False", ")", "\n", "self", ".", "bg_weight", "=", "args", ".", "bg", "\n", "self", ".", "min_std", "=", "args", ".", "min_std", "\n", "self", ".", "max_std", "=", "args", ".", "max_std", "\n", "self", ".", "use_exp", "=", "args", ".", "use_exp", "\n", "self", ".", "dataset", "=", "args", ".", "dataset", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.UNetTeacher.forward": [[50, 65], ["simple_models.UNetTeacher.unet().squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "out.repeat.repeat.reshape().unsqueeze", "out.repeat.repeat.repeat", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.stack().unsqueeze().cuda", "torch.stack().unsqueeze().cuda", "torch.stack().unsqueeze().cuda", "torch.stack().unsqueeze().cuda", "torch.stack().unsqueeze().cuda", "torch.stack().unsqueeze().cuda", "torch.stack().unsqueeze().cuda", "torch.stack().unsqueeze().cuda", "torch.stack().unsqueeze().cuda", "mesh.repeat.repeat.repeat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mask.unsqueeze", "out.repeat.repeat.reshape", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "simple_models.UNetTeacher.unet", "x.size", "out.repeat.repeat.reshape", "x.size", "x.size", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "x.size", "x.size", "x.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sum.view", "torch.sum.view", "torch.sum.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "unet", "(", "x", ")", ".", "squeeze", "(", ")", "# should be of shape N x H x W", "\n", "#         print(out.shape)", "\n", "out", "=", "F", ".", "softmax", "(", "out", ".", "reshape", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "out", "=", "out", ".", "reshape", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "out", "=", "out", ".", "repeat", "(", "1", ",", "2", ",", "1", ",", "1", ")", "# shape N x 2 x H x W", "\n", "meshgrid_x", ",", "meshgrid_y", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "x", ".", "size", "(", "2", ")", ")", ",", "torch", ".", "arange", "(", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "mesh", "=", "torch", ".", "stack", "(", "[", "meshgrid_x", ",", "meshgrid_y", "]", ",", "dim", "=", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "mesh", "=", "mesh", ".", "repeat", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", "# shape N x 2 x H x W", "\n", "\n", "mean", "=", "torch", ".", "sum", "(", "out", "*", "mesh", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "# shape N x 2", "\n", "\n", "std", "=", "self", ".", "min_std", "\n", "mask", "=", "self", ".", "bg_weight", "+", "torch", ".", "exp", "(", "torch", ".", "sum", "(", "-", "1", "*", "(", "mean", ".", "view", "(", "-", "1", ",", "2", ",", "1", ",", "1", ")", "-", "mesh", ")", "**", "2", "/", "(", "2", "*", "std", "**", "2", ")", ",", "dim", "=", "1", ")", ")", "\n", "return", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.CBRTeacher.__init__": [[67, 82], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_channels", ")", ":", "\n", "        ", "super", "(", "CBRTeacher", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_channels", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ")", "\n", "fcsize", "=", "64", "if", "num_channels", "==", "1", "else", "256", "\n", "self", ".", "fc_cent", "=", "nn", ".", "Linear", "(", "fcsize", ",", "2", ")", "\n", "self", ".", "fc_std", "=", "nn", ".", "Linear", "(", "fcsize", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.CBRTeacher.forward": [[83, 96], ["simple_models.CBRTeacher.layer1", "simple_models.CBRTeacher.layer2", "out.reshape.reshape.reshape", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.stack().unsqueeze().cuda", "torch.stack().unsqueeze().cuda", "torch.stack().unsqueeze().cuda", "torch.stack().unsqueeze().cuda", "torch.stack().unsqueeze().cuda", "torch.stack().unsqueeze().cuda", "torch.stack().unsqueeze().cuda", "torch.stack().unsqueeze().cuda", "torch.stack().unsqueeze().cuda", "mesh.repeat.repeat.repeat", "print", "mask.unsqueeze().repeat", "out.reshape.reshape.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "mean.mean", "mean.std", "std.mean", "std.std", "x.size", "x.size", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "x.size", "x.size", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mask.unsqueeze", "x.size", "simple_models.CBRTeacher.fc_cent", "simple_models.CBRTeacher.fc_std", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "mean.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "layer1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "out", ".", "reshape", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "mean", "=", "x", ".", "size", "(", "2", ")", "//", "2", "+", "x", ".", "size", "(", "2", ")", "//", "2", "*", "torch", ".", "tanh", "(", "self", ".", "fc_cent", "(", "out", ")", ")", "\n", "std", "=", "2", "+", "10", "*", "torch", ".", "sigmoid", "(", "self", ".", "fc_std", "(", "out", ")", ")", "\n", "#         print(mean.mean(dim=0), std.mean(dim=0))", "\n", "meshgrid_x", ",", "meshgrid_y", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "x", ".", "size", "(", "2", ")", ")", ",", "torch", ".", "arange", "(", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "mesh", "=", "torch", ".", "stack", "(", "[", "meshgrid_x", ",", "meshgrid_y", "]", ",", "dim", "=", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "mesh", "=", "mesh", ".", "repeat", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", "\n", "mask", "=", "0.5", "+", "torch", ".", "exp", "(", "torch", ".", "sum", "(", "-", "1", "*", "(", "mean", ".", "view", "(", "-", "1", ",", "2", ",", "1", ",", "1", ")", "-", "mesh", ")", "**", "2", "/", "(", "2", "*", "std", "**", "2", ")", ".", "view", "(", "-", "1", ",", "2", ",", "1", ",", "1", ")", ",", "dim", "=", "1", ")", ")", "\n", "print", "(", "mean", ".", "mean", "(", ")", ",", "mean", ".", "std", "(", ")", ",", "std", ".", "mean", "(", ")", ",", "std", ".", "std", "(", ")", ")", "\n", "return", "mask", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "x", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.GaussianDropout.__init__": [[100, 104], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "GaussianDropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.GaussianDropout.forward": [[105, 126], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "x.size", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Sample noise   e ~ N(1, alpha)\n        Multiply noise h = h_ * e\n        \"\"\"", "\n", "# N(1, alpha)", "\n", "if", "self", ".", "training", ":", "\n", "            ", "dropout", "=", "F", ".", "sigmoid", "(", "self", ".", "dropout", ")", "\n", "if", "x", ".", "is_cuda", ":", "\n", "                ", "epsilon", "=", "torch", ".", "randn", "(", "x", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", "*", "(", "dropout", "/", "(", "1", "-", "dropout", ")", ")", "+", "1", "\n", "", "else", ":", "\n", "                ", "epsilon", "=", "torch", ".", "randn", "(", "x", ".", "size", "(", ")", ")", "*", "(", "dropout", "/", "(", "1", "-", "dropout", ")", ")", "+", "1", "\n", "", "return", "x", "*", "epsilon", "\n", "", "else", ":", "\n", "            ", "'''\n            epsilon = torch.randn(x.size()).double() * (model.dropout / (1 - model.dropout)) + 1\n            if x.is_cuda:\n                epsilon = epsilon.cuda()\n            return x * epsilon\n            '''", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.BernoulliDropout.__init__": [[129, 133], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "BernoulliDropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.BernoulliDropout.forward": [[134, 150], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "u.cuda.cuda.cuda", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Sample noise   e ~ N(1, alpha)\n        Multiply noise h = h_ * e\n        \"\"\"", "\n", "temperature", "=", "0.5", "\n", "# N(1, alpha)", "\n", "if", "self", ".", "training", ":", "\n", "            ", "u", "=", "Variable", "(", "torch", ".", "rand", "(", "x", ".", "size", "(", ")", ")", ")", "\n", "if", "x", ".", "is_cuda", ":", "\n", "                ", "u", "=", "u", ".", "cuda", "(", ")", "\n", "", "z", "=", "F", ".", "sigmoid", "(", "self", ".", "dropout", ")", "+", "torch", ".", "log", "(", "u", "/", "(", "1", "-", "u", ")", ")", "\n", "a", "=", "F", ".", "sigmoid", "(", "z", "/", "temperature", ")", "\n", "return", "x", "*", "a", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.reshape.__init__": [[153, 156], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "super", "(", "reshape", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.reshape.forward": [[157, 159], ["x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "-", "1", ",", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.SimpleConvNet.__init__": [[162, 203], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "simple_models.GaussianDropout", "simple_models.GaussianDropout", "simple_models.GaussianDropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch_norm", "=", "True", ",", "dropType", "=", "'bernoulli'", ",", "conv_drop1", "=", "0.0", ",", "conv_drop2", "=", "0.0", ",", "fc_drop", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "SimpleConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "\n", "self", ".", "dropType", "=", "dropType", "\n", "if", "dropType", "==", "'bernoulli'", ":", "\n", "            ", "self", ".", "conv1_dropout", "=", "nn", ".", "Dropout", "(", "conv_drop1", ")", "\n", "self", ".", "conv2_dropout", "=", "nn", ".", "Dropout", "(", "conv_drop2", ")", "\n", "self", ".", "fc_dropout", "=", "nn", ".", "Dropout", "(", "fc_drop", ")", "\n", "", "elif", "dropType", "==", "'gaussian'", ":", "\n", "            ", "self", ".", "conv1_dropout", "=", "GaussianDropout", "(", "conv_drop1", ")", "\n", "self", ".", "conv2_dropout", "=", "GaussianDropout", "(", "conv_drop2", ")", "\n", "self", ".", "fc_dropout", "=", "GaussianDropout", "(", "fc_drop", ")", "\n", "\n", "", "if", "batch_norm", ":", "\n", "            ", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "16", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "self", ".", "conv1_dropout", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "self", ".", "conv2_dropout", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "16", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "self", ".", "conv1_dropout", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "self", ".", "conv2_dropout", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ")", "\n", "\n", "", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "7", "*", "7", "*", "32", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.SimpleConvNet.forward": [[204, 210], ["simple_models.SimpleConvNet.layer1", "simple_models.SimpleConvNet.layer2", "simple_models.SimpleConvNet.view", "simple_models.SimpleConvNet.fc_dropout", "simple_models.SimpleConvNet.size", "simple_models.SimpleConvNet.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "layer1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc_dropout", "(", "self", ".", "fc", "(", "out", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.CNN.__init__": [[213, 268], ["torch.Module.__init__", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "dropout", ",", "size", ",", "weight_decay", ",", "in_channel", ",", "imsize", ",", "do_alexnet", "=", "False", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "CNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "[", "dropout", "]", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "weight_decay", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "[", "weight_decay", "]", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "do_alexnet", "=", "do_alexnet", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "in_channel", "=", "in_channel", "\n", "self", ".", "imsize", "=", "imsize", "\n", "if", "self", ".", "do_alexnet", ":", "\n", "            ", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "in_channel", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "192", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "384", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ")", ",", "\n", ")", "\n", "if", "imsize", "==", "32", ":", "\n", "                ", "self", ".", "view_size", "=", "256", "*", "2", "*", "2", "\n", "", "elif", "imsize", "==", "28", ":", "\n", "                ", "self", ".", "view_size", "=", "256", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "view_size", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "self", ".", "num_classes", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "in_channel", ",", "20", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ")", ",", "\n", ")", "\n", "if", "imsize", "==", "32", ":", "\n", "                ", "self", ".", "view_size", "=", "20", "*", "8", "*", "8", "\n", "", "elif", "imsize", "==", "28", ":", "\n", "                ", "self", ".", "view_size", "=", "980", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "view_size", ",", "250", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "#nn.Dropout(),", "\n", "#nn.Linear(250, 250),", "\n", "#nn.ReLU(inplace=True),", "\n", "nn", ".", "Linear", "(", "250", ",", "self", ".", "num_classes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.CNN.do_train": [[270, 273], ["simple_models.CNN.features.train", "simple_models.CNN.classifier.train"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.train", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.train"], ["", "", "def", "do_train", "(", "self", ")", ":", "\n", "        ", "self", ".", "features", ".", "train", "(", ")", "\n", "self", ".", "classifier", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.CNN.do_eval": [[274, 277], ["simple_models.CNN.features.train", "simple_models.CNN.classifier.train"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.train", "home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.train"], ["", "def", "do_eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "features", ".", "train", "(", ")", "\n", "self", ".", "classifier", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.CNN.forward": [[278, 283], ["simple_models.CNN.features", "simple_models.CNN.view", "simple_models.CNN.classifier", "simple_models.CNN.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.CNN.L2_loss": [[284, 289], ["simple_models.CNN.parameters", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["None"], ["", "def", "L2_loss", "(", "self", ")", ":", "\n", "        ", "loss", "=", "0", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "loss", "+=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "p", ",", "p", ")", ")", "\n", "", "return", "loss", "*", "(", "10", "**", "self", ".", "weight_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.CNN.all_L2_loss": [[290, 300], ["simple_models.CNN.parameters", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "p.numel", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "p.numel"], "methods", ["None"], ["", "def", "all_L2_loss", "(", "self", ")", ":", "\n", "        ", "loss", "=", "0", "\n", "count", "=", "0", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "#val = torch.flatten(p) - self.weight_decay[count: count + p.numel()]", "\n", "            ", "loss", "+=", "torch", ".", "sum", "(", "\n", "torch", ".", "mul", "(", "torch", ".", "exp", "(", "self", ".", "weight_decay", "[", "count", ":", "count", "+", "p", ".", "numel", "(", ")", "]", ")", ",", "torch", ".", "flatten", "(", "torch", ".", "mul", "(", "p", ",", "p", ")", ")", ")", ")", "\n", "#loss += 1e-3 * torch.sum(torch.mul(val, val))", "\n", "count", "+=", "p", ".", "numel", "(", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.__init__": [[303, 322], ["torch.Module.__init__", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "network.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "network.append", "network.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "dropout", ",", "size", ",", "channel", ",", "weight_decay", ",", "num_classes", "=", "10", ",", "do_res", "=", "False", ",", "\n", "do_classification", "=", "True", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "[", "dropout", "]", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "weight_decay", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "[", "weight_decay", "]", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "imsize", "=", "size", "*", "size", "*", "channel", "\n", "if", "not", "do_classification", ":", "self", ".", "imsize", "=", "size", "*", "channel", "\n", "self", ".", "do_res", "=", "do_res", "\n", "l_sizes", "=", "[", "self", ".", "imsize", ",", "self", ".", "imsize", "]", "+", "[", "50", "]", "*", "20", "\n", "network", "=", "[", "]", "\n", "# self.Gaussian = BernoulliDropout(self.dropout)", "\n", "# network.append(nn.Dropout())", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "network", ".", "append", "(", "nn", ".", "Linear", "(", "l_sizes", "[", "i", "]", ",", "l_sizes", "[", "i", "+", "1", "]", ")", ")", "\n", "# network.append(self.Gaussian)", "\n", "network", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "#network.append(nn.Dropout())", "\n", "", "network", ".", "append", "(", "nn", ".", "Linear", "(", "l_sizes", "[", "num_layers", "]", ",", "num_classes", ")", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "network", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.forward": [[323, 330], ["simple_models.Net.net", "simple_models.Net.net().reshape", "x.view", "simple_models.Net.net", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "cur_shape", "=", "x", ".", "shape", "\n", "if", "not", "self", ".", "do_res", ":", "\n", "            ", "return", "self", ".", "net", "(", "x", ".", "view", "(", "-", "1", ",", "self", ".", "imsize", ")", ")", "# .reshape(cur_shape)", "\n", "", "else", ":", "\n", "            ", "res", "=", "self", ".", "net", "(", "x", ".", "view", "(", "-", "1", ",", "self", ".", "imsize", ")", ")", ".", "reshape", "(", "cur_shape", ")", "\n", "return", "x", "+", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.do_train": [[331, 333], ["simple_models.Net.net.train"], "methods", ["home.repos.pwc.inspect_result.googleinterns_commentaries.None.comms-weighting.train"], ["", "", "def", "do_train", "(", "self", ")", ":", "\n", "        ", "self", ".", "net", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.do_eval": [[334, 336], ["simple_models.Net.net.eval"], "methods", ["None"], ["", "def", "do_eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "net", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.L2_loss": [[337, 342], ["simple_models.Net.parameters", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["None"], ["", "def", "L2_loss", "(", "self", ")", ":", "\n", "        ", "loss", "=", ".0", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "loss", "=", "loss", "+", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "p", ",", "p", ")", ")", "*", "torch", ".", "exp", "(", "self", ".", "weight_decay", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.googleinterns_commentaries.models.simple_models.Net.all_L2_loss": [[343, 351], ["simple_models.Net.parameters", "p.numel", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "p.numel"], "methods", ["None"], ["", "def", "all_L2_loss", "(", "self", ")", ":", "\n", "        ", "loss", "=", ".0", "\n", "count", "=", "0", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "loss", "=", "loss", "+", "torch", ".", "sum", "(", "\n", "torch", ".", "mul", "(", "torch", ".", "exp", "(", "self", ".", "weight_decay", "[", "count", ":", "count", "+", "p", ".", "numel", "(", ")", "]", ")", ",", "torch", ".", "flatten", "(", "torch", ".", "mul", "(", "p", ",", "p", ")", ")", ")", ")", "\n", "count", "+=", "p", ".", "numel", "(", ")", "\n", "", "return", "loss", "\n", "", "", ""]]}