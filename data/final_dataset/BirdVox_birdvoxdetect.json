{"home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.map_tfr": [[45, 47], ["numpy.log1p"], "function", ["None"], ["def", "map_tfr", "(", "x_tfr", ")", ":", "\n", "    ", "return", "np", ".", "log1p", "(", "0.5", "*", "x_tfr", ")", "-", "0.8", "\n", "\n"]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.process_file": [[49, 1176], ["time.time", "logging.getLogger", "logging.getLogger.setLevel", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "core.get_model_path", "joblib.load", "logging.getLogger.info", "logging.getLogger.info", "birdvoxclassify.get_model_path", "birdvoxclassify.get_taxonomy_path", "birdvoxclassify.load_taxonomy", "min", "int", "len", "max", "core.get_pcen_settings", "core.get_output_path", "pandas.DataFrame", "logging.getLogger.info", "logging.getLogger.info", "collections.deque", "range", "range", "logging.getLogger.info", "core.get_output_path", "logging.basicConfig", "logging.getLogger.info", "os.path.exists", "birdvoxdetect.birdvoxdetect_exceptions.BirdVoxDetectError", "soundfile.SoundFile", "os.path.exists", "birdvoxdetect.birdvoxdetect_exceptions.BirdVoxDetectError", "core.get_model_path", "os.path.exists", "birdvoxdetect.birdvoxdetect_exceptions.BirdVoxDetectError", "traceback.format_exc", "exc_str.format", "birdvoxdetect.birdvoxdetect_exceptions.BirdVoxDetectError", "int", "core.get_output_path", "pandas.DataFrame", "df.append.to_csv", "faultlist_df.append.to_csv", "core.get_output_path", "hashlib.md5", "core.get_output_path", "int", "min", "sf.SoundFile.seek", "sf.SoundFile.read", "core.compute_pcen", "collections.deque.append", "numpy.concatenate", "numpy.percentile", "scipy.signal.medfilt", "scipy.signal.medfilt", "context_median_medfilt[].reshape", "faultlist_df.append.append", "min", "logging.getLogger.info", "core.map_confidence", "scipy.signal.find_peaks", "scipy.signal.find_peaks", "enumerate", "len", "pandas.DataFrame", "logging.getLogger.info", "list", "df.append.append", "df.append.to_csv", "logging.getLogger.info", "sf.SoundFile.seek", "sf.SoundFile.read", "collections.deque.popleft", "core.compute_pcen", "collections.deque.append", "numpy.concatenate", "numpy.percentile", "scipy.signal.medfilt", "scipy.signal.medfilt", "context_median_medfilt[].reshape", "faultlist_df.append.append", "core.map_confidence", "scipy.signal.find_peaks", "scipy.signal.find_peaks", "enumerate", "len", "pandas.DataFrame", "logging.getLogger.info", "list", "df.append.append", "df.append.to_csv", "faultlist_df.append.append", "logging.getLogger.info", "str", "str", "logging.getLogger.info", "logging.getLogger.info", "sf.SoundFile.seek", "sf.SoundFile.read", "core.compute_pcen", "int", "numpy.full", "core.map_confidence", "core.get_output_path", "chunk_confidences.append", "sum", "enumerate", "core.get_output_path", "numpy.stack", "pandas.read_csv", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "os.path.exists", "os.makedirs", "len", "birdvoxdetect.birdvoxdetect_exceptions.BirdVoxDetectError", "os.path.exists", "birdvoxdetect.birdvoxdetect_exceptions.BirdVoxDetectError", "traceback.format_exc", "exc_str.format", "birdvoxdetect.birdvoxdetect_exceptions.BirdVoxDetectError", "[].split", "int", "open", "iter", "os.path.basename", "os.path.abspath", "librosa.get_duration", "hashlib.md5.hexdigest", "socket.gethostname", "datetime.datetime.now().astimezone().isoformat", "platform.machine", "platform.processor", "platform.release", "platform.system", "platform.version", "open", "json.dump", "os.path.exists", "os.makedirs", "contexts.append", "logging.getLogger.info", "min", "str", "logging.getLogger.info", "faultlist_df.append.to_csv", "core.predict_with_context", "core.predict", "chunk_confidences.append", "core.classify_species", "rows.append", "collections.Counter", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "map", "zip", "contexts.append", "faultlist_df.append.to_csv", "logging.getLogger.info", "str", "str", "logging.getLogger.info", "core.predict_with_context", "core.predict", "chunk_confidences.append", "core.classify_species", "rows.append", "collections.Counter", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "map", "zip", "faultlist_df.append.to_csv", "datetime.timedelta", "datetime.timedelta", "numpy.percentile", "logging.warning", "contexts.append", "core.predict_with_context", "core.predict", "scipy.signal.find_peaks", "scipy.signal.find_peaks", "enumerate", "len", "pandas.DataFrame", "logging.getLogger.info", "list", "df.append.append", "df.append.to_csv", "map", "h5py.File", "f.create_dataset", "f.create_dataset", "len", "numpy.linspace", "h5py.File", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "timestamp_str.format", "event_str.format", "context_str.format", "faultlist_str.format", "proba_str.format", "warnings.catch_warnings", "warnings.simplefilter", "keras.models.load_model", "numpy.ceil", "hashlib.md5.update", "joblib.load.predict_proba", "datetime.timedelta", "numpy.full", "chunk_confidences.append", "core.seconds_to_hhmmss", "core.seconds_to_hhmmss", "int", "str().zfill", "none_peak_ids.append", "float", "core.seconds_to_hhmmss", "float", "json_dicts.append", "range", "range", "open", "json.dump", "len", "list", "list", "max", "min", "sf.SoundFile.seek", "sf.SoundFile.read", "clip_hhmmss.replace().replace", "core.get_output_path", "soundfile.write", "str().zfill", "joblib.load.predict_proba", "core.seconds_to_hhmmss", "core.seconds_to_hhmmss", "int", "datetime.timedelta", "datetime.timedelta", "int", "chunk_confidences.append", "none_peak_ids.append", "float", "core.seconds_to_hhmmss", "float", "json_dicts.append", "range", "range", "open", "json.dump", "len", "list", "list", "max", "min", "sf.SoundFile.seek", "sf.SoundFile.read", "clip_hhmmss.replace().replace", "core.get_output_path", "soundfile.write", "core.seconds_to_hhmmss", "core.seconds_to_hhmmss", "int", "collections.deque.popleft", "collections.deque.append", "numpy.concatenate", "numpy.percentile", "core.classify_species", "rows.append", "collections.Counter", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "map", "zip", "h5py.File", "len", "module.__name__.ljust", "warnings.catch_warnings", "warnings.simplefilter", "keras.models.load_model", "fhandle.read", "datetime.datetime.now().astimezone", "int", "len", "len", "len", "int", "len", "int", "len", "numpy.full", "len", "len", "int", "len", "int", "none_peak_ids.append", "float", "core.seconds_to_hhmmss", "float", "json_dicts.append", "range", "range", "open", "faultlist_df.append.to_json", "json.dump", "len", "list", "list", "max", "min", "sf.SoundFile.seek", "sf.SoundFile.read", "clip_hhmmss.replace().replace", "core.get_output_path", "soundfile.write", "str().rjust", "detector_name.split", "str", "str", "str", "numpy.round", "numpy.round", "clip_hhmmss.replace", "str", "str", "numpy.round", "numpy.round", "clip_hhmmss.replace", "len", "len", "time.time", "int", "len", "int", "datetime.datetime.now", "str", "str", "json.loads", "numpy.round", "numpy.round", "clip_hhmmss.replace", "str().rjust", "collections.Counter().most_common", "str", "int", "int", "str", "len", "collections.Counter.most_common", "collections.Counter.most_common", "str", "int", "str", "collections.Counter", "str", "str", "datetime.timedelta", "collections.Counter.most_common", "str", "str", "datetime.timedelta"], "function", ["home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_model_path", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_model_path", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_pcen_settings", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_output_path", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_output_path", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_model_path", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_output_path", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_output_path", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_output_path", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.compute_pcen", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.map_confidence", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.compute_pcen", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.map_confidence", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.compute_pcen", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.map_confidence", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_output_path", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_output_path", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.predict_with_context", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.predict", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.classify_species", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.predict_with_context", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.predict", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.classify_species", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.predict_with_context", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.predict", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.seconds_to_hhmmss", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.seconds_to_hhmmss", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.seconds_to_hhmmss", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_output_path", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.seconds_to_hhmmss", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.seconds_to_hhmmss", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.seconds_to_hhmmss", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_output_path", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.seconds_to_hhmmss", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.seconds_to_hhmmss", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.classify_species", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.seconds_to_hhmmss", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_output_path"], ["", "def", "process_file", "(", "\n", "filepath", ",", "\n", "output_dir", "=", "None", ",", "\n", "export_clips", "=", "False", ",", "\n", "export_confidence", "=", "False", ",", "\n", "export_context", "=", "False", ",", "\n", "export_faults", "=", "False", ",", "\n", "export_logger", "=", "False", ",", "\n", "predict_proba", "=", "False", ",", "\n", "threshold", "=", "50.0", ",", "\n", "suffix", "=", "\"\"", ",", "\n", "clip_duration", "=", "1.0", ",", "\n", "logger_level", "=", "logging", ".", "INFO", ",", "\n", "detector_name", "=", "\"birdvoxdetect-v03_trial-12_network_epoch-068\"", ",", "\n", "classifier_name", "=", "\"_\"", ".", "join", "(", "\n", "[", "\n", "\"birdvoxclassify-flat-multitask-convnet-v2\"", ",", "\n", "\"tv1hierarchical-3c6d869456b2705ea5805b6b7d08f870\"", ",", "\n", "]", "\n", ")", ",", "\n", "custom_objects", "=", "None", ",", "\n", "bva_threshold", "=", "0.5", ",", "\n", ")", ":", "\n", "# Record local time. This will eventually serve to measure elapsed time.", "\n", "    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Create output_dir if necessary.", "\n", "if", "output_dir", "is", "not", "None", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "\n", "# Append underscore to suffix if it is not empty.", "\n", "", "", "if", "len", "(", "suffix", ")", ">", "0", "and", "not", "suffix", "[", "-", "1", "]", "==", "\"_\"", ":", "\n", "        ", "suffix", "=", "suffix", "+", "\"_\"", "\n", "\n", "# Set logger level.", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", "\"BirdVoxDetect\"", ")", "\n", "logger", ".", "setLevel", "(", "logger_level", ")", "\n", "if", "export_logger", ":", "\n", "        ", "logger_path", "=", "get_output_path", "(", "\n", "filepath", ",", "suffix", "+", "\"logger.txt\"", ",", "output_dir", "=", "output_dir", "\n", ")", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "logger_path", ",", "filemode", "=", "\"w\"", ",", "level", "=", "logger_level", ")", "\n", "\n", "# Print new line and file name.", "\n", "", "logger", ".", "info", "(", "\"-\"", "*", "80", ")", "\n", "modules", "=", "[", "\n", "birdvoxdetect", ",", "\n", "birdvoxclassify", ",", "\n", "h5py", ",", "\n", "joblib", ",", "\n", "json", ",", "\n", "librosa", ",", "\n", "logging", ",", "\n", "np", ",", "\n", "pd", ",", "\n", "tf", ",", "\n", "scipy", ",", "\n", "sf", ",", "\n", "sklearn", ",", "\n", "]", "\n", "for", "module", "in", "modules", ":", "\n", "        ", "logger", ".", "info", "(", "module", ".", "__name__", ".", "ljust", "(", "15", ")", "+", "\" v\"", "+", "module", ".", "__version__", ")", "\n", "", "logger", ".", "info", "(", "\"\"", ")", "\n", "logger", ".", "info", "(", "\"Loading file: {}\"", ".", "format", "(", "filepath", ")", ")", "\n", "\n", "# Check for existence of the input file.", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "        ", "raise", "BirdVoxDetectError", "(", "'File \"{}\" could not be found.'", ".", "format", "(", "filepath", ")", ")", "\n", "\n", "# Load the file.", "\n", "", "try", ":", "\n", "        ", "sound_file", "=", "sf", ".", "SoundFile", "(", "filepath", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "raise", "BirdVoxDetectError", "(", "\"Could not open file: {}\"", ".", "format", "(", "filepath", ")", ")", "\n", "\n", "# Load the detector of sensor faults.", "\n", "", "sensorfault_detector_name", "=", "\"birdvoxactivate.pkl\"", "\n", "logger", ".", "info", "(", "\"Sensor fault detector: {}\"", ".", "format", "(", "sensorfault_detector_name", ")", ")", "\n", "sensorfault_model_path", "=", "get_model_path", "(", "sensorfault_detector_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "sensorfault_model_path", ")", ":", "\n", "        ", "raise", "BirdVoxDetectError", "(", "\n", "'Model \"{}\" could not be found.'", ".", "format", "(", "sensorfault_detector_name", ")", "\n", ")", "\n", "", "sensorfault_model", "=", "joblib", ".", "load", "(", "sensorfault_model_path", ")", "\n", "\n", "# Load the detector of flight calls.", "\n", "logger", ".", "info", "(", "\"Flight call detector: {}\"", ".", "format", "(", "detector_name", ")", ")", "\n", "if", "detector_name", "==", "\"pcen_snr\"", ":", "\n", "        ", "detector", "=", "\"pcen_snr\"", "\n", "", "else", ":", "\n", "        ", "detector_model_path", "=", "get_model_path", "(", "detector_name", "+", "\".h5\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "detector_model_path", ")", ":", "\n", "            ", "raise", "BirdVoxDetectError", "(", "\n", "'Model \"{}\" could not be found.'", ".", "format", "(", "detector_name", ")", "\n", ")", "\n", "", "MAX_LOAD_ATTEMPTS", "=", "10", "\n", "load_attempt_id", "=", "0", "\n", "is_load_successful", "=", "False", "\n", "while", "not", "is_load_successful", "and", "(", "load_attempt_id", "<", "MAX_LOAD_ATTEMPTS", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                    ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ")", "\n", "detector", "=", "keras", ".", "models", ".", "load_model", "(", "\n", "detector_model_path", ",", "custom_objects", "=", "custom_objects", "\n", ")", "\n", "", "is_load_successful", "=", "True", "\n", "", "except", "Exception", ":", "\n", "                ", "load_attempt_id", "+=", "1", "\n", "", "", "if", "not", "is_load_successful", ":", "\n", "            ", "exc_str", "=", "'Could not open detector model \"{}\":\\n{}'", "\n", "formatted_trace", "=", "traceback", ".", "format_exc", "(", ")", "\n", "exc_formatted_str", "=", "exc_str", ".", "format", "(", "detector_model_path", ",", "formatted_trace", ")", "\n", "raise", "BirdVoxDetectError", "(", "exc_formatted_str", ")", "\n", "\n", "# Load the species classifier.", "\n", "", "", "logger", ".", "info", "(", "\"Species classifier: {}\"", ".", "format", "(", "classifier_name", ")", ")", "\n", "classifier_model_path", "=", "birdvoxclassify", ".", "get_model_path", "(", "classifier_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "classifier_model_path", ")", ":", "\n", "        ", "raise", "BirdVoxDetectError", "(", "\n", "'Model \"{}\" could not be found.'", ".", "format", "(", "classifier_name", ")", "\n", ")", "\n", "", "load_attempt_id", "=", "0", "\n", "is_load_successful", "=", "False", "\n", "while", "not", "is_load_successful", "and", "(", "load_attempt_id", "<", "MAX_LOAD_ATTEMPTS", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ")", "\n", "classifier", "=", "keras", ".", "models", ".", "load_model", "(", "\n", "classifier_model_path", ",", "compile", "=", "False", ",", "custom_objects", "=", "custom_objects", "\n", ")", "\n", "", "is_load_successful", "=", "True", "\n", "", "except", "Exception", ":", "\n", "            ", "load_attempt_id", "+=", "1", "\n", "", "", "if", "not", "is_load_successful", ":", "\n", "        ", "exc_str", "=", "'Could not open classifier model \"{}\":\\n{}'", "\n", "formatted_trace", "=", "traceback", ".", "format_exc", "(", ")", "\n", "exc_formatted_str", "=", "exc_str", ".", "format", "(", "classifier_model_path", ",", "formatted_trace", ")", "\n", "raise", "BirdVoxDetectError", "(", "exc_formatted_str", ")", "\n", "\n", "# Load the taxonomy.", "\n", "", "taxonomy_path", "=", "birdvoxclassify", ".", "get_taxonomy_path", "(", "classifier_name", ")", "\n", "taxonomy", "=", "birdvoxclassify", ".", "load_taxonomy", "(", "taxonomy_path", ")", "\n", "\n", "# Define percentiles.", "\n", "percentiles", "=", "[", "0.1", ",", "1", ",", "10", ",", "25", ",", "50", ",", "75", ",", "90", ",", "99", ",", "99.9", "]", "\n", "\n", "# Define chunk size.", "\n", "has_context", "=", "\"T-\"", "in", "detector_name", "\n", "if", "has_context", ":", "\n", "        ", "queue_length", "=", "4", "\n", "T_str", "=", "detector_name", ".", "split", "(", "\"T-\"", ")", "[", "1", "]", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "chunk_duration", "=", "int", "(", "T_str", ")", "/", "queue_length", "\n", "", "else", ":", "\n", "        ", "chunk_duration", "=", "450", "\n", "queue_length", "=", "1", "\n", "\n", "# Define minimum peak height for BirdVoxDetect function.", "\n", "", "min_peak_height", "=", "min", "(", "10", ",", "threshold", ")", "\n", "\n", "# Define number of chunks.", "\n", "sr", "=", "sound_file", ".", "samplerate", "\n", "chunk_length", "=", "int", "(", "chunk_duration", "*", "sr", ")", "\n", "full_length", "=", "len", "(", "sound_file", ")", "\n", "n_chunks", "=", "max", "(", "1", ",", "int", "(", "np", ".", "ceil", "(", "full_length", ")", "/", "chunk_length", ")", ")", "\n", "\n", "# Define frame rate.", "\n", "pcen_settings", "=", "get_pcen_settings", "(", ")", "\n", "frame_rate", "=", "pcen_settings", "[", "\"sr\"", "]", "/", "(", "\n", "pcen_settings", "[", "\"hop_length\"", "]", "*", "pcen_settings", "[", "\"stride_length\"", "]", "\n", ")", "\n", "\n", "# Initialize checklist as a Pandas DataFrame.", "\n", "if", "threshold", "is", "not", "None", ":", "\n", "        ", "checklist_path", "=", "get_output_path", "(", "\n", "filepath", ",", "suffix", "+", "\"checklist.csv\"", ",", "output_dir", "=", "output_dir", "\n", ")", "\n", "event_hhmmss", "=", "[", "]", "\n", "event_4lettercodes", "=", "[", "]", "\n", "event_confidences", "=", "[", "]", "\n", "df_columns", "=", "[", "\n", "\"Time (hh:mm:ss)\"", ",", "\n", "\"Detection confidence (%)\"", ",", "\n", "\"Order\"", ",", "\n", "\"Order confidence (%)\"", ",", "\n", "\"Family\"", ",", "\n", "\"Family confidence (%)\"", ",", "\n", "\"Species (English name)\"", ",", "\n", "\"Species (scientific name)\"", ",", "\n", "\"Species (4-letter code)\"", ",", "\n", "\"Species confidence (%)\"", ",", "\n", "]", "\n", "df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "df_columns", ")", "\n", "df", ".", "to_csv", "(", "checklist_path", ",", "index", "=", "False", ")", "\n", "\n", "# Initialize fault log as a Pandas DataFrame.", "\n", "", "faultlist_path", "=", "get_output_path", "(", "\n", "filepath", ",", "suffix", "+", "\"faults.csv\"", ",", "output_dir", "=", "output_dir", "\n", ")", "\n", "faultlist_df_columns", "=", "[", "\n", "\"Start (hh:mm:ss)\"", ",", "\n", "\"Stop (hh:mm:ss)\"", ",", "\n", "\"Fault confidence (%)\"", ",", "\n", "]", "\n", "faultlist_df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "faultlist_df_columns", ")", "\n", "if", "export_faults", ":", "\n", "        ", "faultlist_df", ".", "to_csv", "(", "\n", "faultlist_path", ",", "\n", "columns", "=", "faultlist_df_columns", ",", "index", "=", "False", ",", "float_format", "=", "\"%.2f%%\"", "\n", ")", "\n", "\n", "# Initialize JSON output.", "\n", "", "if", "predict_proba", ":", "\n", "        ", "json_path", "=", "get_output_path", "(", "filepath", ",", "suffix", "+", "\"proba.json\"", ",", "output_dir", ")", "\n", "# Get MD5 hash.", "\n", "hash_md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "with", "open", "(", "filepath", ",", "\"rb\"", ")", "as", "fhandle", ":", "\n", "            ", "for", "chunk", "in", "iter", "(", "lambda", ":", "fhandle", ".", "read", "(", "4096", ")", ",", "b\"\"", ")", ":", "\n", "                ", "hash_md5", ".", "update", "(", "chunk", ")", "\n", "", "", "json_metadata", "=", "{", "\n", "\"file_name\"", ":", "os", ".", "path", ".", "basename", "(", "filepath", ")", ",", "\n", "\"file_path\"", ":", "os", ".", "path", ".", "abspath", "(", "filepath", ")", ",", "\n", "\"audio_duration\"", ":", "librosa", ".", "get_duration", "(", "filename", "=", "filepath", ")", ",", "\n", "\"audio_md5_checksum\"", ":", "hash_md5", ".", "hexdigest", "(", ")", ",", "\n", "\"birdvoxdetect_threshold\"", ":", "threshold", ",", "\n", "\"birdvoxactivate_threshold\"", ":", "bva_threshold", ",", "\n", "\"classifier_name\"", ":", "classifier_name", ",", "\n", "\"detector_name\"", ":", "detector_name", ",", "\n", "\"hostname\"", ":", "socket", ".", "gethostname", "(", ")", ",", "\n", "\"machine_time\"", ":", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "astimezone", "(", ")", ".", "isoformat", "(", ")", ",", "\n", "\"package_versions\"", ":", "{", "\n", "module", ".", "__name__", ":", "module", ".", "__version__", "for", "module", "in", "modules", "\n", "}", ",", "\n", "\"platform_machine\"", ":", "platform", ".", "machine", "(", ")", ",", "\n", "\"platform_processor\"", ":", "platform", ".", "processor", "(", ")", ",", "\n", "\"platform_release\"", ":", "platform", ".", "release", "(", ")", ",", "\n", "\"platform_system\"", ":", "platform", ".", "system", "(", ")", ",", "\n", "\"platform_version\"", ":", "platform", ".", "version", "(", ")", ",", "\n", "\"sys_version\"", ":", "sys", ".", "version", ",", "\n", "}", "\n", "with", "open", "(", "json_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "{", "\"metadata\"", ":", "json_metadata", ",", "\"taxonomy\"", ":", "taxonomy", "}", ",", "f", ")", "\n", "", "json_dicts", "=", "[", "]", "\n", "\n", "# Create directory of output clips.", "\n", "", "if", "export_clips", ":", "\n", "        ", "clips_dir", "=", "get_output_path", "(", "filepath", ",", "suffix", "+", "\"clips\"", ",", "output_dir", "=", "output_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "clips_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "clips_dir", ")", "\n", "\n", "# Initialize list of per-chunk confidences.", "\n", "", "", "if", "export_confidence", ":", "\n", "        ", "chunk_confidences", "=", "[", "]", "\n", "\n", "# Initialize list of context arrays.", "\n", "", "if", "export_context", ":", "\n", "        ", "contexts", "=", "[", "]", "\n", "\n", "# Print chunk duration.", "\n", "", "logger", ".", "info", "(", "\"Chunk duration: {} seconds\"", ".", "format", "(", "chunk_duration", ")", ")", "\n", "logger", ".", "info", "(", "\"\"", ")", "\n", "\n", "# Define padding. Set to one second, i.e. 750 hops @ 24 kHz.", "\n", "# Any value above clip duration (150 ms) would work.", "\n", "chunk_padding", "=", "pcen_settings", "[", "\"hop_length\"", "]", "*", "int", "(", "\n", "pcen_settings", "[", "\"sr\"", "]", "/", "pcen_settings", "[", "\"hop_length\"", "]", "\n", ")", "\n", "\n", "# Pre-load double-ended queue.", "\n", "deque", "=", "collections", ".", "deque", "(", ")", "\n", "for", "chunk_id", "in", "range", "(", "min", "(", "n_chunks", "-", "1", ",", "queue_length", ")", ")", ":", "\n", "# Read audio chunk.", "\n", "        ", "chunk_start", "=", "chunk_id", "*", "chunk_length", "\n", "sound_file", ".", "seek", "(", "chunk_start", ")", "\n", "chunk_audio", "=", "sound_file", ".", "read", "(", "chunk_length", "+", "chunk_padding", ")", "\n", "\n", "# Compute PCEN.", "\n", "chunk_pcen", "=", "compute_pcen", "(", "chunk_audio", ",", "sr", ")", "\n", "deque", ".", "append", "(", "chunk_pcen", ")", "\n", "\n", "# Compute context.", "\n", "", "if", "n_chunks", ">", "1", ":", "\n", "        ", "concat_deque", "=", "np", ".", "concatenate", "(", "deque", ",", "axis", "=", "1", ")", "\n", "deque_context", "=", "np", ".", "percentile", "(", "\n", "concat_deque", ",", "percentiles", ",", "axis", "=", "1", ",", "overwrite_input", "=", "True", "\n", ")", "\n", "\n", "# Append context.", "\n", "if", "export_context", ":", "\n", "            ", "contexts", ".", "append", "(", "deque_context", ")", "\n", "\n", "# Compute sensor fault features.", "\n", "# Median is 4th order statistic. Restrict to lowest 120 mel-freq bins", "\n", "", "context_median", "=", "deque_context", "[", "4", ",", ":", "120", "]", "\n", "context_median_medfilt", "=", "scipy", ".", "signal", ".", "medfilt", "(", "context_median", ",", "kernel_size", "=", "(", "13", ",", ")", ")", "\n", "sensorfault_features", "=", "context_median_medfilt", "[", ":", ":", "12", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "\n", "# Compute probability of sensor fault.", "\n", "sensor_fault_probability", "=", "sensorfault_model", ".", "predict_proba", "(", "\n", "sensorfault_features", "\n", ")", "[", "0", "]", "[", "1", "]", "\n", "\n", "# If probability of sensor fault is above 50%,", "\n", "# exclude start of recording", "\n", "if", "sensor_fault_probability", ">", "bva_threshold", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "\"Probability of sensor fault: {:5.2f}%\"", ".", "format", "(", "\n", "100", "*", "sensor_fault_probability", "\n", ")", "\n", ")", "\n", "chunk_id_start", "=", "min", "(", "n_chunks", "-", "1", ",", "queue_length", ")", "\n", "context_duration", "=", "chunk_duration", "\n", "context_duration_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "context_duration", ")", ")", "\n", "logger", ".", "info", "(", "\n", "\"Ignoring segment between 00:00:00 and \"", "\n", "+", "context_duration_str", "\n", "+", "\" (\"", "\n", "+", "str", "(", "chunk_id_start", ")", "\n", "+", "\" chunks)\"", "\n", ")", "\n", "has_sensor_fault", "=", "True", "\n", "# If continuous confidence is required, store it in memory.", "\n", "if", "export_confidence", ":", "\n", "                ", "chunk_confidence", "=", "np", ".", "full", "(", "\n", "int", "(", "chunk_id_start", "*", "chunk_duration", "*", "frame_rate", ")", ",", "np", ".", "nan", "\n", ")", "\n", "chunk_confidences", ".", "append", "(", "chunk_confidence", ")", "\n", "", "", "else", ":", "\n", "            ", "chunk_id_start", "=", "0", "\n", "has_sensor_fault", "=", "False", "\n", "\n", "# Add first row to sensor fault log.", "\n", "", "faultlist_df", "=", "faultlist_df", ".", "append", "(", "\n", "{", "\n", "\"Start (hh:mm:ss)\"", ":", "seconds_to_hhmmss", "(", "0.0", ")", ",", "\n", "\"Stop (hh:mm:ss)\"", ":", "seconds_to_hhmmss", "(", "queue_length", "*", "chunk_duration", ")", ",", "\n", "\"Fault confidence (%)\"", ":", "int", "(", "sensor_fault_probability", "*", "100", ")", ",", "\n", "}", ",", "\n", "ignore_index", "=", "True", ",", "\n", ")", "\n", "if", "export_faults", ":", "\n", "            ", "faultlist_df", ".", "to_csv", "(", "\n", "faultlist_path", ",", "columns", "=", "faultlist_df_columns", ",", "\n", "index", "=", "False", ",", "float_format", "=", "\"%.2f%%\"", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "chunk_id_start", "=", "0", "\n", "has_sensor_fault", "=", "False", "\n", "\n", "# Compute confidence on queue chunks.", "\n", "# NB: the following loop is skipped if there is a single chunk.", "\n", "", "for", "chunk_id", "in", "range", "(", "chunk_id_start", ",", "min", "(", "queue_length", ",", "n_chunks", "-", "1", ")", ")", ":", "\n", "# Print chunk ID and number of chunks.", "\n", "        ", "logger", ".", "info", "(", "\n", "\"Chunk ID: {}/{}\"", ".", "format", "(", "\n", "str", "(", "1", "+", "chunk_id", ")", ".", "zfill", "(", "len", "(", "str", "(", "n_chunks", ")", ")", ")", ",", "n_chunks", "\n", ")", "\n", ")", "\n", "\n", "# Predict.", "\n", "chunk_pcen", "=", "deque", "[", "chunk_id", "]", "\n", "if", "has_context", ":", "\n", "            ", "chunk_confidence", "=", "predict_with_context", "(", "\n", "chunk_pcen", ",", "deque_context", ",", "detector", ",", "logger_level", ",", "padding", "=", "chunk_padding", "\n", ")", "\n", "", "else", ":", "\n", "            ", "chunk_confidence", "=", "predict", "(", "\n", "chunk_pcen", ",", "detector", ",", "logger_level", ",", "padding", "=", "chunk_padding", "\n", ")", "\n", "\n", "# Map confidence to 0-100 range.", "\n", "", "chunk_confidence", "=", "map_confidence", "(", "chunk_confidence", ",", "detector_name", ")", "\n", "\n", "# If continuous confidence is required, store it in memory.", "\n", "if", "export_confidence", ":", "\n", "            ", "chunk_confidences", ".", "append", "(", "chunk_confidence", ")", "\n", "\n", "# If thresholding is not required, jump to next chunk.", "\n", "", "if", "threshold", "is", "None", ":", "\n", "            ", "continue", "\n", "\n", "# Find peaks.", "\n", "", "peak_locs", ",", "_", "=", "scipy", ".", "signal", ".", "find_peaks", "(", "chunk_confidence", ",", "height", "=", "min_peak_height", ")", "\n", "peak_vals", "=", "chunk_confidence", "[", "peak_locs", "]", "\n", "\n", "# Threshold peaks.", "\n", "th_peak_locs", "=", "peak_locs", "[", "peak_vals", ">", "threshold", "]", "\n", "th_peak_confidences", "=", "chunk_confidence", "[", "th_peak_locs", "]", "\n", "chunk_offset", "=", "chunk_duration", "*", "chunk_id", "\n", "chunk_timestamps", "=", "chunk_offset", "+", "th_peak_locs", "/", "frame_rate", "\n", "\n", "# Classify species.", "\n", "rows", "=", "[", "]", "\n", "none_peak_ids", "=", "[", "]", "\n", "for", "peak_id", ",", "th_peak_loc", "in", "enumerate", "(", "th_peak_locs", ")", ":", "\n", "            ", "consistent_pred_dict", ",", "json_dict", "=", "classify_species", "(", "\n", "classifier", ",", "chunk_pcen", ",", "th_peak_loc", ",", "taxonomy", "\n", ")", "\n", "if", "consistent_pred_dict", "is", "None", ":", "\n", "                ", "none_peak_ids", ".", "append", "(", "peak_id", ")", "\n", "continue", "\n", "", "rows", ".", "append", "(", "\n", "{", "\n", "\"Order\"", ":", "consistent_pred_dict", "[", "\"coarse\"", "]", "[", "\"scientific_name\"", "]", ",", "\n", "\"Order confidence (%)\"", ":", "consistent_pred_dict", "[", "\"coarse\"", "]", "[", "\"probability\"", "]", ",", "\n", "\"Family\"", ":", "consistent_pred_dict", "[", "\"medium\"", "]", "[", "\"scientific_name\"", "]", ",", "\n", "\"Family confidence (%)\"", ":", "consistent_pred_dict", "[", "\"medium\"", "]", "[", "\"probability\"", "]", ",", "\n", "\"Species (English name)\"", ":", "consistent_pred_dict", "[", "\"fine\"", "]", "[", "\"common_name\"", "]", ",", "\n", "\"Species (scientific name)\"", ":", "consistent_pred_dict", "[", "\"fine\"", "]", "[", "\"scientific_name\"", "]", ",", "\n", "\"Species (4-letter code)\"", ":", "consistent_pred_dict", "[", "\"fine\"", "]", "[", "\"taxonomy_level_aliases\"", "]", "[", "\"species_4letter_code\"", "]", ",", "\n", "\"Species confidence (%)\"", ":", "consistent_pred_dict", "[", "\"fine\"", "]", "[", "\"probability\"", "]", ",", "\n", "}", "\n", ")", "\n", "if", "predict_proba", ":", "\n", "                ", "chunk_timestamp", "=", "chunk_timestamps", "[", "peak_id", "]", "\n", "json_dict", "[", "\"Time (s)\"", "]", "=", "float", "(", "chunk_timestamp", ")", "\n", "json_dict", "[", "\"Time (hh:mm:ss)\"", "]", "=", "seconds_to_hhmmss", "(", "chunk_timestamp", ")", "\n", "json_dict", "[", "\"Detection confidence (%)\"", "]", "=", "float", "(", "\n", "th_peak_confidences", "[", "peak_id", "]", "\n", ")", "\n", "json_dicts", ".", "append", "(", "json_dict", ")", "\n", "", "", "th_peak_confidences", "=", "[", "\n", "th_peak_confidences", "[", "peak_id", "]", "\n", "for", "peak_id", "in", "range", "(", "len", "(", "th_peak_locs", ")", ")", "\n", "if", "peak_id", "not", "in", "none_peak_ids", "\n", "]", "\n", "chunk_timestamps", "=", "[", "\n", "chunk_timestamps", "[", "peak_id", "]", "\n", "for", "peak_id", "in", "range", "(", "len", "(", "th_peak_locs", ")", ")", "\n", "if", "peak_id", "not", "in", "none_peak_ids", "\n", "]", "\n", "n_peaks", "=", "len", "(", "chunk_timestamps", ")", "\n", "chunk_df", "=", "pd", ".", "DataFrame", "(", "rows", ",", "columns", "=", "df_columns", ")", "\n", "\n", "# Count flight calls.", "\n", "if", "n_peaks", ">", "0", ":", "\n", "            ", "chunk_counter", "=", "collections", ".", "Counter", "(", "chunk_df", "[", "\"Species (English name)\"", "]", ")", "\n", "logger", ".", "info", "(", "\"Number of flight calls in current chunk: {}\"", ".", "format", "(", "n_peaks", ")", ")", "\n", "logger", ".", "info", "(", "\n", "\"(\"", "\n", "+", "\", \"", ".", "join", "(", "\n", "(", "str", "(", "v", ")", "+", "\" \"", "+", "k", ")", "for", "(", "k", ",", "v", ")", "in", "chunk_counter", ".", "most_common", "(", ")", "\n", ")", "\n", "+", "\")\"", "\n", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"Number of flight calls in current chunk: 0\"", ")", "\n", "", "logger", ".", "info", "(", "\"\"", ")", "\n", "\n", "# Export checklist.", "\n", "chunk_hhmmss", "=", "list", "(", "map", "(", "seconds_to_hhmmss", ",", "chunk_timestamps", ")", ")", "\n", "chunk_df", "[", "\"Time (hh:mm:ss)\"", "]", "=", "event_hhmmss", "+", "chunk_hhmmss", "\n", "chunk_df", "[", "\"Detection confidence (%)\"", "]", "=", "th_peak_confidences", "\n", "df_columns", "=", "[", "\n", "column", "\n", "for", "column", "in", "[", "\n", "\"Time (hh:mm:ss)\"", ",", "\n", "\"Detection confidence (%)\"", ",", "\n", "\"Order\"", ",", "\n", "\"Order confidence (%)\"", ",", "\n", "\"Family\"", ",", "\n", "\"Family confidence (%)\"", ",", "\n", "\"Species (English name)\"", ",", "\n", "\"Species (scientific name)\"", ",", "\n", "\"Species (4-letter code)\"", ",", "\n", "\"Species confidence (%)\"", ",", "\n", "]", "\n", "if", "column", "in", "chunk_df", "\n", "]", "\n", "df", "=", "df", ".", "append", "(", "chunk_df", ")", "\n", "df", ".", "to_csv", "(", "\n", "checklist_path", ",", "columns", "=", "df_columns", ",", "\n", "index", "=", "False", ",", "float_format", "=", "\"%.2f%%\"", "\n", ")", "\n", "\n", "# Export probabilities as JSON file.", "\n", "if", "predict_proba", ":", "\n", "            ", "with", "open", "(", "json_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "\n", "{", "\n", "\"events\"", ":", "json_dicts", ",", "\n", "\"metadata\"", ":", "json_metadata", ",", "\n", "\"taxonomy\"", ":", "taxonomy", ",", "\n", "}", ",", "\n", "f", ",", "\n", ")", "\n", "\n", "# Export clips.", "\n", "", "", "if", "export_clips", "and", "len", "(", "df", ")", ">", "0", ":", "\n", "            ", "chunk_zip", "=", "zip", "(", "\n", "chunk_timestamps", ",", "\n", "chunk_hhmmss", ",", "\n", "list", "(", "th_peak_confidences", ")", ",", "\n", "list", "(", "df", "[", "\"Species (4-letter code)\"", "]", ")", ",", "\n", ")", "\n", "for", "(", "\n", "clip_timestamp", ",", "\n", "clip_hhmmss", ",", "\n", "clip_confidence", ",", "\n", "clip_4lettercode", ",", "\n", ")", "in", "chunk_zip", ":", "\n", "                ", "clip_start", "=", "max", "(", "\n", "0", ",", "int", "(", "np", ".", "round", "(", "sr", "*", "(", "clip_timestamp", "-", "0.5", "*", "clip_duration", ")", ")", ")", "\n", ")", "\n", "clip_stop", "=", "min", "(", "\n", "len", "(", "sound_file", ")", ",", "\n", "int", "(", "np", ".", "round", "(", "sr", "*", "(", "clip_timestamp", "+", "0.5", "*", "clip_duration", ")", ")", ")", ",", "\n", ")", "\n", "sound_file", ".", "seek", "(", "clip_start", ")", "\n", "audio_clip", "=", "sound_file", ".", "read", "(", "clip_stop", "-", "clip_start", ")", "\n", "clip_hhmmss_escaped", "=", "clip_hhmmss", ".", "replace", "(", "\":\"", ",", "\"_\"", ")", ".", "replace", "(", "\".\"", ",", "\"-\"", ")", "\n", "clip_name", "=", "suffix", "+", "\"_\"", ".", "join", "(", "\n", "[", "clip_hhmmss_escaped", ",", "str", "(", "int", "(", "clip_confidence", ")", ")", ",", "clip_4lettercode", "]", "\n", ")", "\n", "clip_path", "=", "get_output_path", "(", "\n", "filepath", ",", "clip_name", "+", "\".wav\"", ",", "output_dir", "=", "clips_dir", "\n", ")", "\n", "sf", ".", "write", "(", "clip_path", ",", "audio_clip", ",", "sr", ")", "\n", "\n", "# Loop over chunks.", "\n", "", "", "", "chunk_id", "=", "queue_length", "\n", "while", "chunk_id", "<", "(", "n_chunks", "-", "1", ")", ":", "\n", "# Print chunk ID and number of chunks.", "\n", "        ", "logger", ".", "info", "(", "\n", "\"Chunk ID: {}/{}\"", ".", "format", "(", "\n", "str", "(", "1", "+", "chunk_id", ")", ".", "zfill", "(", "len", "(", "str", "(", "n_chunks", ")", ")", ")", ",", "n_chunks", "\n", ")", "\n", ")", "\n", "\n", "# Read chunk.", "\n", "chunk_start", "=", "chunk_id", "*", "chunk_length", "\n", "sound_file", ".", "seek", "(", "chunk_start", ")", "\n", "chunk_audio", "=", "sound_file", ".", "read", "(", "chunk_length", "+", "chunk_padding", ")", "\n", "\n", "# Compute PCEN.", "\n", "deque", ".", "popleft", "(", ")", "\n", "chunk_pcen", "=", "compute_pcen", "(", "chunk_audio", ",", "sr", ")", "\n", "deque", ".", "append", "(", "chunk_pcen", ")", "\n", "\n", "# Compute percentiles", "\n", "concat_deque", "=", "np", ".", "concatenate", "(", "deque", ",", "axis", "=", "1", ",", "out", "=", "concat_deque", ")", "\n", "deque_context", "=", "np", ".", "percentile", "(", "\n", "concat_deque", ",", "percentiles", ",", "axis", "=", "1", ",", "out", "=", "deque_context", ",", "overwrite_input", "=", "True", "\n", ")", "\n", "\n", "# Append context.", "\n", "if", "export_context", ":", "\n", "            ", "contexts", ".", "append", "(", "deque_context", ")", "\n", "\n", "# Compute sensor fault features.", "\n", "# Median is 4th order statistic. Restrict to lowest 120 mel-freq bins", "\n", "", "context_median", "=", "deque_context", "[", "4", ",", ":", "120", "]", "\n", "context_median_medfilt", "=", "scipy", ".", "signal", ".", "medfilt", "(", "context_median", ",", "kernel_size", "=", "(", "13", ",", ")", ")", "\n", "sensorfault_features", "=", "context_median_medfilt", "[", ":", ":", "12", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "\n", "# Compute probability of sensor fault.", "\n", "sensor_fault_probability", "=", "sensorfault_model", ".", "predict_proba", "(", "\n", "sensorfault_features", "\n", ")", "[", "0", "]", "[", "1", "]", "\n", "\n", "# Add row to sensor fault log.", "\n", "faultlist_df", "=", "faultlist_df", ".", "append", "(", "\n", "{", "\n", "\"Start (hh:mm:ss)\"", ":", "seconds_to_hhmmss", "(", "chunk_id", "*", "chunk_duration", ")", ",", "\n", "\"Stop (hh:mm:ss)\"", ":", "seconds_to_hhmmss", "(", "(", "chunk_id", "+", "1", ")", "*", "chunk_duration", ")", ",", "\n", "\"Fault confidence (%)\"", ":", "int", "(", "sensor_fault_probability", "*", "100", ")", ",", "\n", "}", ",", "\n", "ignore_index", "=", "True", ",", "\n", ")", "\n", "if", "export_faults", ":", "\n", "            ", "faultlist_df", ".", "to_csv", "(", "\n", "faultlist_path", ",", "columns", "=", "faultlist_df_columns", ",", "\n", "index", "=", "False", ",", "float_format", "=", "\"%.2f%%\"", "\n", ")", "\n", "\n", "# If probability of sensor fault is above threshold, exclude chunk.", "\n", "", "has_sensor_fault", "=", "sensor_fault_probability", ">", "bva_threshold", "\n", "if", "has_sensor_fault", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "\"Probability of sensor fault: {:5.2f}%\"", ".", "format", "(", "\n", "100", "*", "sensor_fault_probability", "\n", ")", "\n", ")", "\n", "context_duration", "=", "queue_length", "*", "chunk_duration", "\n", "ignored_start_str", "=", "str", "(", "\n", "datetime", ".", "timedelta", "(", "seconds", "=", "chunk_id", "*", "chunk_duration", ")", "\n", ")", "\n", "ignored_stop_str", "=", "str", "(", "\n", "datetime", ".", "timedelta", "(", "seconds", "=", "(", "chunk_id", "+", "1", ")", "*", "chunk_duration", ")", "\n", ")", "\n", "logger", ".", "info", "(", "\n", "\"Ignoring segment between \"", "\n", "+", "ignored_start_str", "\n", "+", "\" and \"", "\n", "+", "ignored_stop_str", "\n", "+", "\" (1 chunk)\"", "\n", ")", "\n", "if", "export_confidence", ":", "\n", "                ", "chunk_confidence_length", "=", "int", "(", "\n", "queue_length", "*", "chunk_duration", "*", "frame_rate", "\n", ")", "\n", "chunk_confidences", ".", "append", "(", "np", ".", "full", "(", "chunk_confidence_length", ",", "np", ".", "nan", ")", ")", "\n", "", "chunk_id", "=", "chunk_id", "+", "1", "\n", "continue", "\n", "\n", "# Otherwise, detect flight calls.", "\n", "", "if", "has_context", ":", "\n", "            ", "chunk_confidence", "=", "predict_with_context", "(", "\n", "chunk_pcen", ",", "deque_context", ",", "detector", ",", "logger_level", ",", "padding", "=", "chunk_padding", "\n", ")", "\n", "", "else", ":", "\n", "            ", "chunk_confidence", "=", "predict", "(", "\n", "chunk_pcen", ",", "detector", ",", "logger_level", ",", "padding", "=", "chunk_padding", "\n", ")", "\n", "\n", "# Map confidence to 0-100 range.", "\n", "", "chunk_confidence", "=", "map_confidence", "(", "chunk_confidence", ",", "detector_name", ")", "\n", "\n", "# If continuous confidence is required, store it in memory.", "\n", "if", "export_confidence", ":", "\n", "            ", "chunk_confidences", ".", "append", "(", "chunk_confidence", ")", "\n", "\n", "# If thresholding is not required, jump to next chunk.", "\n", "", "if", "threshold", "is", "None", ":", "\n", "            ", "continue", "\n", "\n", "# Find peaks.", "\n", "", "peak_locs", ",", "_", "=", "scipy", ".", "signal", ".", "find_peaks", "(", "chunk_confidence", ",", "height", "=", "min_peak_height", ")", "\n", "peak_vals", "=", "chunk_confidence", "[", "peak_locs", "]", "\n", "\n", "# Threshold peaks.", "\n", "th_peak_locs", "=", "peak_locs", "[", "peak_vals", ">", "threshold", "]", "\n", "th_peak_confidences", "=", "chunk_confidence", "[", "th_peak_locs", "]", "\n", "chunk_offset", "=", "chunk_duration", "*", "chunk_id", "\n", "chunk_timestamps", "=", "chunk_offset", "+", "th_peak_locs", "/", "frame_rate", "\n", "\n", "# Classify species.", "\n", "rows", "=", "[", "]", "\n", "none_peak_ids", "=", "[", "]", "\n", "for", "peak_id", ",", "th_peak_loc", "in", "enumerate", "(", "th_peak_locs", ")", ":", "\n", "            ", "consistent_pred_dict", ",", "json_dict", "=", "classify_species", "(", "\n", "classifier", ",", "chunk_pcen", ",", "th_peak_loc", ",", "taxonomy", "\n", ")", "\n", "if", "consistent_pred_dict", "is", "None", ":", "\n", "                ", "none_peak_ids", ".", "append", "(", "peak_id", ")", "\n", "continue", "\n", "", "rows", ".", "append", "(", "\n", "{", "\n", "\"Order\"", ":", "consistent_pred_dict", "[", "\"coarse\"", "]", "[", "\"scientific_name\"", "]", ",", "\n", "\"Order confidence (%)\"", ":", "consistent_pred_dict", "[", "\"coarse\"", "]", "[", "\"probability\"", "]", ",", "\n", "\"Family\"", ":", "consistent_pred_dict", "[", "\"medium\"", "]", "[", "\"scientific_name\"", "]", ",", "\n", "\"Family confidence (%)\"", ":", "consistent_pred_dict", "[", "\"medium\"", "]", "[", "\"probability\"", "]", ",", "\n", "\"Species (English name)\"", ":", "consistent_pred_dict", "[", "\"fine\"", "]", "[", "\"common_name\"", "]", ",", "\n", "\"Species (scientific name)\"", ":", "consistent_pred_dict", "[", "\"fine\"", "]", "[", "\"scientific_name\"", "]", ",", "\n", "\"Species (4-letter code)\"", ":", "consistent_pred_dict", "[", "\"fine\"", "]", "[", "\"taxonomy_level_aliases\"", "]", "[", "\"species_4letter_code\"", "]", ",", "\n", "\"Species confidence (%)\"", ":", "consistent_pred_dict", "[", "\"fine\"", "]", "[", "\"probability\"", "]", ",", "\n", "}", "\n", ")", "\n", "if", "predict_proba", ":", "\n", "                ", "chunk_timestamp", "=", "chunk_timestamps", "[", "peak_id", "]", "\n", "json_dict", "[", "\"Time (s)\"", "]", "=", "float", "(", "chunk_timestamp", ")", "\n", "json_dict", "[", "\"Time (hh:mm:ss)\"", "]", "=", "seconds_to_hhmmss", "(", "chunk_timestamp", ")", "\n", "json_dict", "[", "\"Detection confidence (%)\"", "]", "=", "float", "(", "\n", "th_peak_confidences", "[", "peak_id", "]", "\n", ")", "\n", "json_dicts", ".", "append", "(", "json_dict", ")", "\n", "", "", "th_peak_confidences", "=", "[", "\n", "th_peak_confidences", "[", "peak_id", "]", "\n", "for", "peak_id", "in", "range", "(", "len", "(", "th_peak_locs", ")", ")", "\n", "if", "peak_id", "not", "in", "none_peak_ids", "\n", "]", "\n", "chunk_timestamps", "=", "[", "\n", "chunk_timestamps", "[", "peak_id", "]", "\n", "for", "peak_id", "in", "range", "(", "len", "(", "th_peak_locs", ")", ")", "\n", "if", "peak_id", "not", "in", "none_peak_ids", "\n", "]", "\n", "n_peaks", "=", "len", "(", "chunk_timestamps", ")", "\n", "chunk_df", "=", "pd", ".", "DataFrame", "(", "rows", ",", "columns", "=", "df_columns", ")", "\n", "\n", "# Count flight calls.", "\n", "if", "n_peaks", ">", "0", ":", "\n", "            ", "chunk_counter", "=", "collections", ".", "Counter", "(", "chunk_df", "[", "\"Species (English name)\"", "]", ")", "\n", "logger", ".", "info", "(", "\"Number of flight calls in current chunk: {}\"", ".", "format", "(", "n_peaks", ")", ")", "\n", "logger", ".", "info", "(", "\n", "\"(\"", "\n", "+", "\", \"", ".", "join", "(", "\n", "(", "str", "(", "v", ")", "+", "\" \"", "+", "k", ")", "for", "(", "k", ",", "v", ")", "in", "chunk_counter", ".", "most_common", "(", ")", "\n", ")", "\n", "+", "\")\"", "\n", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"Number of flight calls in current chunk: 0\"", ")", "\n", "", "logger", ".", "info", "(", "\"\"", ")", "\n", "\n", "# Export checklist.", "\n", "chunk_hhmmss", "=", "list", "(", "map", "(", "seconds_to_hhmmss", ",", "chunk_timestamps", ")", ")", "\n", "chunk_df", "[", "\"Time (hh:mm:ss)\"", "]", "=", "event_hhmmss", "+", "chunk_hhmmss", "\n", "chunk_df", "[", "\"Detection confidence (%)\"", "]", "=", "th_peak_confidences", "\n", "df_columns", "=", "[", "\n", "column", "\n", "for", "column", "in", "[", "\n", "\"Time (hh:mm:ss)\"", ",", "\n", "\"Detection confidence (%)\"", ",", "\n", "\"Order\"", ",", "\n", "\"Order confidence (%)\"", ",", "\n", "\"Family\"", ",", "\n", "\"Family confidence (%)\"", ",", "\n", "\"Species (English name)\"", ",", "\n", "\"Species (scientific name)\"", ",", "\n", "\"Species (4-letter code)\"", ",", "\n", "\"Species confidence (%)\"", ",", "\n", "]", "\n", "if", "column", "in", "chunk_df", "\n", "]", "\n", "df", "=", "df", ".", "append", "(", "chunk_df", ")", "\n", "df", ".", "to_csv", "(", "\n", "checklist_path", ",", "columns", "=", "df_columns", ",", "\n", "index", "=", "False", ",", "float_format", "=", "\"%.2f%%\"", "\n", ")", "\n", "\n", "# Export probabilities as JSON file.", "\n", "if", "predict_proba", ":", "\n", "            ", "with", "open", "(", "json_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "\n", "{", "\n", "\"events\"", ":", "json_dicts", ",", "\n", "\"metadata\"", ":", "json_metadata", ",", "\n", "\"taxonomy\"", ":", "taxonomy", ",", "\n", "}", ",", "\n", "f", ",", "\n", ")", "\n", "\n", "# Export clips.", "\n", "", "", "if", "export_clips", "and", "len", "(", "df", ")", ">", "0", ":", "\n", "            ", "chunk_zip", "=", "zip", "(", "\n", "chunk_timestamps", ",", "\n", "chunk_hhmmss", ",", "\n", "list", "(", "th_peak_confidences", ")", ",", "\n", "list", "(", "df", "[", "\"Species (4-letter code)\"", "]", ")", ",", "\n", ")", "\n", "for", "(", "\n", "clip_timestamp", ",", "\n", "clip_hhmmss", ",", "\n", "clip_confidence", ",", "\n", "clip_4lettercode", ",", "\n", ")", "in", "chunk_zip", ":", "\n", "                ", "clip_start", "=", "max", "(", "\n", "0", ",", "int", "(", "np", ".", "round", "(", "sr", "*", "(", "clip_timestamp", "-", "0.5", "*", "clip_duration", ")", ")", ")", "\n", ")", "\n", "clip_stop", "=", "min", "(", "\n", "len", "(", "sound_file", ")", ",", "\n", "int", "(", "np", ".", "round", "(", "sr", "*", "(", "clip_timestamp", "+", "0.5", "*", "clip_duration", ")", ")", ")", ",", "\n", ")", "\n", "sound_file", ".", "seek", "(", "clip_start", ")", "\n", "audio_clip", "=", "sound_file", ".", "read", "(", "clip_stop", "-", "clip_start", ")", "\n", "clip_hhmmss_escaped", "=", "clip_hhmmss", ".", "replace", "(", "\":\"", ",", "\"_\"", ")", ".", "replace", "(", "\".\"", ",", "\"-\"", ")", "\n", "clip_name", "=", "suffix", "+", "\"_\"", ".", "join", "(", "\n", "[", "clip_hhmmss_escaped", ",", "str", "(", "int", "(", "clip_confidence", ")", ")", ",", "clip_4lettercode", "]", "\n", ")", "\n", "clip_path", "=", "get_output_path", "(", "\n", "filepath", ",", "clip_name", "+", "\".wav\"", ",", "output_dir", "=", "clips_dir", "\n", ")", "\n", "sf", ".", "write", "(", "clip_path", ",", "audio_clip", ",", "sr", ")", "\n", "\n", "# Go to next chunk.", "\n", "", "", "chunk_id", "=", "chunk_id", "+", "1", "\n", "\n", "# Last chunk. For n_chunks>1, we reuse the context from the penultimate", "\n", "# chunk because this last chunk is typically shorter than chunk_length.", "\n", "# But if the queue is empty (n_chunks==1), we compute context on the fly", "\n", "# even if this chunk is shorter. This can potentially be numerically", "\n", "# unstable with files shorter than 30 minutes, which is why we issue a", "\n", "# warning. Also, we do not try to detect sensor faults in files shorter than", "\n", "# 30 minutes.", "\n", "", "if", "n_chunks", ">", "1", ":", "\n", "        ", "faultlist_df", "=", "faultlist_df", ".", "append", "(", "\n", "{", "\n", "\"Start (hh:mm:ss)\"", ":", "seconds_to_hhmmss", "(", "chunk_id", "*", "chunk_duration", ")", ",", "\n", "\"Stop (hh:mm:ss)\"", ":", "seconds_to_hhmmss", "(", "full_length", "/", "sr", ")", ",", "\n", "\"Fault confidence (%)\"", ":", "int", "(", "sensor_fault_probability", "*", "100", ")", ",", "\n", "}", ",", "\n", "ignore_index", "=", "True", ",", "\n", ")", "\n", "if", "export_faults", ":", "\n", "            ", "faultlist_df", ".", "to_csv", "(", "\n", "faultlist_path", ",", "columns", "=", "faultlist_df_columns", ",", "\n", "index", "=", "False", ",", "float_format", "=", "\"%.2f%%\"", "\n", ")", "\n", "\n", "", "", "if", "(", "n_chunks", ">", "1", ")", "and", "has_sensor_fault", ":", "\n", "        ", "logger", ".", "info", "(", "\n", "\"Probability of sensor fault: {:5.2f}%\"", ".", "format", "(", "\n", "100", "*", "sensor_fault_probability", "\n", ")", "\n", ")", "\n", "ignored_start_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "chunk_id", "*", "chunk_duration", ")", ")", "\n", "ignored_stop_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "full_length", "/", "sr", ")", ")", "\n", "logger", ".", "info", "(", "\n", "\"Ignoring segment between \"", "\n", "+", "ignored_start_str", "\n", "+", "\" and \"", "\n", "+", "ignored_stop_str", "\n", "+", "\" (i.e., up to end of file)\"", "\n", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"Chunk ID: {}/{}\"", ".", "format", "(", "n_chunks", ",", "n_chunks", ")", ")", "\n", "chunk_start", "=", "(", "n_chunks", "-", "1", ")", "*", "chunk_length", "\n", "sound_file", ".", "seek", "(", "chunk_start", ")", "\n", "context_duration", "=", "queue_length", "*", "chunk_duration", "\n", "chunk_audio", "=", "sound_file", ".", "read", "(", "full_length", "-", "chunk_start", ")", "\n", "chunk_pcen", "=", "compute_pcen", "(", "chunk_audio", ",", "sr", ")", "\n", "chunk_confidence_length", "=", "int", "(", "frame_rate", "*", "full_length", "/", "sr", ")", "\n", "chunk_confidence", "=", "np", ".", "full", "(", "chunk_confidence_length", ",", "np", ".", "nan", ")", "\n", "\n", "if", "(", "export_context", "or", "has_context", ")", "and", "(", "n_chunks", "==", "1", ")", ":", "\n", "            ", "deque_context", "=", "np", ".", "percentile", "(", "\n", "chunk_pcen", ",", "percentiles", ",", "axis", "=", "1", ",", "overwrite_input", "=", "True", "\n", ")", "\n", "logging", ".", "warning", "(", "\n", "\"\\nFile duration (\"", "\n", "+", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "full_length", "/", "sr", ")", ")", "\n", "+", "\") shorter than 25% of context duration (\"", "\n", "+", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "context_duration", ")", ")", "\n", "+", "\").\\n\"", "\n", "\"This may cause numerical instabilities in threshold adaptation.\\n\"", "\n", "+", "\"We recommend disabling the context-adaptive threshold\\n\"", "\n", "+", "\"(i.e., setting 'detector_name'='birdvoxdetect-v03_trial-12_network_epoch-06') when\\n\"", "\n", "+", "\"running birdvoxdetect on short audio files.\"", "\n", ")", "\n", "has_sensor_fault", "=", "False", "\n", "", "elif", "has_context", ":", "\n", "# Compute percentiles", "\n", "            ", "deque", ".", "popleft", "(", ")", "\n", "deque", ".", "append", "(", "chunk_pcen", ")", "\n", "concat_deque", "=", "np", ".", "concatenate", "(", "deque", ",", "axis", "=", "1", ")", "\n", "deque_context", "=", "np", ".", "percentile", "(", "\n", "concat_deque", ",", "\n", "percentiles", ",", "\n", "axis", "=", "1", ",", "\n", "out", "=", "deque_context", ",", "\n", "overwrite_input", "=", "True", ",", "\n", ")", "\n", "\n", "# Append context.", "\n", "", "if", "export_context", ":", "\n", "            ", "contexts", ".", "append", "(", "deque_context", ")", "\n", "\n", "", "", "if", "not", "has_sensor_fault", ":", "\n", "# Define trimming length for last chunk.", "\n", "# This one is not equal to one second but to the duration", "\n", "# of a BVD/BVC clip, i.e. about 150 milliseconds.", "\n", "# Note that this trimming is not compensated by the presence of", "\n", "# the next chunk because we are already at the last chunk.", "\n", "# In other words, if a flight call happens at the last 150 milliseconds", "\n", "# of an audio recording, it is ignored.", "\n", "        ", "lastchunk_trimming", "=", "BVD_CLIP_LENGTH", "*", "pcen_settings", "[", "\"hop_length\"", "]", "\n", "if", "has_context", ":", "\n", "# Predict.", "\n", "            ", "chunk_confidence", "=", "predict_with_context", "(", "\n", "chunk_pcen", ",", "\n", "deque_context", ",", "\n", "detector", ",", "\n", "logger_level", ",", "\n", "padding", "=", "lastchunk_trimming", ",", "\n", ")", "\n", "", "else", ":", "\n", "# Predict.", "\n", "            ", "chunk_confidence", "=", "predict", "(", "\n", "chunk_pcen", ",", "detector", ",", "logger_level", ",", "padding", "=", "lastchunk_trimming", "\n", ")", "\n", "\n", "# Map confidence to 0-100 range.", "\n", "", "chunk_confidence", "=", "map_confidence", "(", "chunk_confidence", ",", "detector_name", ")", "\n", "\n", "# Threshold last chunk if required.", "\n", "if", "threshold", "is", "not", "None", ":", "\n", "\n", "# Find peaks.", "\n", "            ", "peak_locs", ",", "_", "=", "scipy", ".", "signal", ".", "find_peaks", "(", "\n", "chunk_confidence", ",", "height", "=", "min_peak_height", "\n", ")", "\n", "peak_vals", "=", "chunk_confidence", "[", "peak_locs", "]", "\n", "\n", "# Threshold peaks.", "\n", "th_peak_locs", "=", "peak_locs", "[", "peak_vals", ">", "threshold", "]", "\n", "th_peak_confidences", "=", "chunk_confidence", "[", "th_peak_locs", "]", "\n", "chunk_offset", "=", "chunk_duration", "*", "(", "n_chunks", "-", "1", ")", "\n", "chunk_timestamps", "=", "chunk_offset", "+", "th_peak_locs", "/", "frame_rate", "\n", "\n", "# Classify species.", "\n", "rows", "=", "[", "]", "\n", "none_peak_ids", "=", "[", "]", "\n", "for", "peak_id", ",", "th_peak_loc", "in", "enumerate", "(", "th_peak_locs", ")", ":", "\n", "                ", "consistent_pred_dict", ",", "json_dict", "=", "classify_species", "(", "\n", "classifier", ",", "chunk_pcen", ",", "th_peak_loc", ",", "taxonomy", "\n", ")", "\n", "if", "consistent_pred_dict", "is", "None", ":", "\n", "                    ", "none_peak_ids", ".", "append", "(", "peak_id", ")", "\n", "continue", "\n", "", "rows", ".", "append", "(", "\n", "{", "\n", "\"Order\"", ":", "consistent_pred_dict", "[", "\"coarse\"", "]", "[", "\"scientific_name\"", "]", ",", "\n", "\"Order confidence (%)\"", ":", "consistent_pred_dict", "[", "\"coarse\"", "]", "[", "\"probability\"", "]", ",", "\n", "\"Family\"", ":", "consistent_pred_dict", "[", "\"medium\"", "]", "[", "\"scientific_name\"", "]", ",", "\n", "\"Family confidence (%)\"", ":", "consistent_pred_dict", "[", "\"medium\"", "]", "[", "\"probability\"", "]", ",", "\n", "\"Species (English name)\"", ":", "consistent_pred_dict", "[", "\"fine\"", "]", "[", "\"common_name\"", "]", ",", "\n", "\"Species (scientific name)\"", ":", "consistent_pred_dict", "[", "\"fine\"", "]", "[", "\"scientific_name\"", "]", ",", "\n", "\"Species (4-letter code)\"", ":", "consistent_pred_dict", "[", "\"fine\"", "]", "[", "\"taxonomy_level_aliases\"", "]", "[", "\"species_4letter_code\"", "]", ",", "\n", "\"Species confidence (%)\"", ":", "consistent_pred_dict", "[", "\"fine\"", "]", "[", "\"probability\"", "]", ",", "\n", "}", "\n", ")", "\n", "if", "predict_proba", ":", "\n", "                    ", "chunk_timestamp", "=", "chunk_timestamps", "[", "peak_id", "]", "\n", "json_dict", "[", "\"Time (s)\"", "]", "=", "float", "(", "chunk_timestamp", ")", "\n", "json_dict", "[", "\"Time (hh:mm:ss)\"", "]", "=", "seconds_to_hhmmss", "(", "chunk_timestamp", ")", "\n", "json_dict", "[", "\"Detection confidence (%)\"", "]", "=", "float", "(", "\n", "th_peak_confidences", "[", "peak_id", "]", "\n", ")", "\n", "json_dicts", ".", "append", "(", "json_dict", ")", "\n", "", "", "th_peak_confidences", "=", "[", "\n", "th_peak_confidences", "[", "peak_id", "]", "\n", "for", "peak_id", "in", "range", "(", "len", "(", "th_peak_locs", ")", ")", "\n", "if", "peak_id", "not", "in", "none_peak_ids", "\n", "]", "\n", "chunk_timestamps", "=", "[", "\n", "chunk_timestamps", "[", "peak_id", "]", "\n", "for", "peak_id", "in", "range", "(", "len", "(", "th_peak_locs", ")", ")", "\n", "if", "peak_id", "not", "in", "none_peak_ids", "\n", "]", "\n", "n_peaks", "=", "len", "(", "chunk_timestamps", ")", "\n", "chunk_df", "=", "pd", ".", "DataFrame", "(", "rows", ",", "columns", "=", "df_columns", ")", "\n", "\n", "# Count flight calls.", "\n", "if", "n_peaks", ">", "0", ":", "\n", "                ", "chunk_counter", "=", "collections", ".", "Counter", "(", "chunk_df", "[", "\"Species (English name)\"", "]", ")", "\n", "logger", ".", "info", "(", "\n", "\"Number of flight calls in current chunk: {}\"", ".", "format", "(", "n_peaks", ")", "\n", ")", "\n", "logger", ".", "info", "(", "\n", "\"(\"", "\n", "+", "\", \"", ".", "join", "(", "\n", "(", "str", "(", "v", ")", "+", "\" \"", "+", "k", ")", "for", "(", "k", ",", "v", ")", "in", "chunk_counter", ".", "most_common", "(", ")", "\n", ")", "\n", "+", "\")\"", "\n", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "\"Number of flight calls in current chunk: 0\"", ")", "\n", "", "logger", ".", "info", "(", "\"\"", ")", "\n", "\n", "# Export checklist.", "\n", "chunk_hhmmss", "=", "list", "(", "map", "(", "seconds_to_hhmmss", ",", "chunk_timestamps", ")", ")", "\n", "chunk_df", "[", "\"Time (hh:mm:ss)\"", "]", "=", "event_hhmmss", "+", "chunk_hhmmss", "\n", "chunk_df", "[", "\"Detection confidence (%)\"", "]", "=", "th_peak_confidences", "\n", "df_columns", "=", "[", "\n", "column", "\n", "for", "column", "in", "[", "\n", "\"Time (hh:mm:ss)\"", ",", "\n", "\"Detection confidence (%)\"", ",", "\n", "\"Order\"", ",", "\n", "\"Order confidence (%)\"", ",", "\n", "\"Family\"", ",", "\n", "\"Family confidence (%)\"", ",", "\n", "\"Species (English name)\"", ",", "\n", "\"Species (scientific name)\"", ",", "\n", "\"Species (4-letter code)\"", ",", "\n", "\"Species confidence (%)\"", ",", "\n", "]", "\n", "if", "column", "in", "chunk_df", "\n", "]", "\n", "df", "=", "df", ".", "append", "(", "chunk_df", ")", "\n", "df", ".", "to_csv", "(", "\n", "checklist_path", ",", "columns", "=", "df_columns", ",", "\n", "index", "=", "False", ",", "float_format", "=", "'%.2f%%'", "\n", ")", "\n", "\n", "# Export probabilities as JSON file.", "\n", "if", "predict_proba", ":", "\n", "                ", "with", "open", "(", "json_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "                    ", "json_faultlist", "=", "faultlist_df", ".", "to_json", "(", "orient", "=", "\"index\"", ")", "\n", "json_metadata", "[", "\"elapsed_time\"", "]", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "json", ".", "dump", "(", "\n", "{", "\n", "\"events\"", ":", "json_dicts", ",", "\n", "\"metadata\"", ":", "json_metadata", ",", "\n", "\"sensor_faults\"", ":", "json", ".", "loads", "(", "json_faultlist", ")", ",", "\n", "\"taxonomy\"", ":", "taxonomy", ",", "\n", "}", ",", "\n", "f", ",", "\n", ")", "\n", "\n", "# Export clips.", "\n", "", "", "if", "export_clips", "and", "len", "(", "df", ")", ">", "0", ":", "\n", "                ", "chunk_zip", "=", "zip", "(", "\n", "chunk_timestamps", ",", "\n", "chunk_hhmmss", ",", "\n", "list", "(", "th_peak_confidences", ")", ",", "\n", "list", "(", "df", "[", "\"Species (4-letter code)\"", "]", ")", ",", "\n", ")", "\n", "for", "(", "\n", "clip_timestamp", ",", "\n", "clip_hhmmss", ",", "\n", "clip_confidence", ",", "\n", "clip_4lettercode", ",", "\n", ")", "in", "chunk_zip", ":", "\n", "                    ", "clip_start", "=", "max", "(", "\n", "0", ",", "int", "(", "np", ".", "round", "(", "sr", "*", "(", "clip_timestamp", "-", "0.5", "*", "clip_duration", ")", ")", ")", "\n", ")", "\n", "clip_stop", "=", "min", "(", "\n", "len", "(", "sound_file", ")", ",", "\n", "int", "(", "np", ".", "round", "(", "sr", "*", "(", "clip_timestamp", "+", "0.5", "*", "clip_duration", ")", ")", ")", ",", "\n", ")", "\n", "sound_file", ".", "seek", "(", "clip_start", ")", "\n", "audio_clip", "=", "sound_file", ".", "read", "(", "clip_stop", "-", "clip_start", ")", "\n", "clip_hhmmss_escaped", "=", "clip_hhmmss", ".", "replace", "(", "\":\"", ",", "\"_\"", ")", ".", "replace", "(", "\n", "\".\"", ",", "\"-\"", "\n", ")", "\n", "clip_name", "=", "suffix", "+", "\"_\"", ".", "join", "(", "\n", "[", "\n", "clip_hhmmss_escaped", ",", "\n", "str", "(", "int", "(", "clip_confidence", ")", ")", ",", "\n", "clip_4lettercode", ",", "\n", "]", "\n", ")", "\n", "clip_path", "=", "get_output_path", "(", "\n", "filepath", ",", "clip_name", "+", "\".wav\"", ",", "output_dir", "=", "clips_dir", "\n", ")", "\n", "sf", ".", "write", "(", "clip_path", ",", "audio_clip", ",", "sr", ")", "\n", "\n", "# Export confidence curve.", "\n", "", "", "", "", "if", "export_confidence", ":", "\n", "\n", "# Define output path for confidence.", "\n", "        ", "confidence_path", "=", "get_output_path", "(", "\n", "filepath", ",", "suffix", "+", "\"confidence.hdf5\"", ",", "output_dir", "=", "output_dir", "\n", ")", "\n", "\n", "# Export confidence curve, chunk by chunk.", "\n", "# NB: looping over chunks, rather than concatenating them into a single", "\n", "# NumPy array, guarantees that this export has a O(1) memory footprint", "\n", "# with respect to the duration of the input file. As a result,", "\n", "# BirdVoxDetect is guaranteed to run with 3-4 gigabytes of RAM", "\n", "# for a context duration of 30 minutes, whatever be the duration", "\n", "# of the input.", "\n", "chunk_confidences", ".", "append", "(", "chunk_confidence", ")", "\n", "total_length", "=", "sum", "(", "map", "(", "len", ",", "chunk_confidences", ")", ")", "\n", "with", "h5py", ".", "File", "(", "confidence_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "create_dataset", "(", "\"confidence\"", ",", "(", "total_length", ",", ")", ",", "dtype", "=", "\"float32\"", ")", "\n", "f", ".", "create_dataset", "(", "\"time\"", ",", "(", "total_length", ",", ")", ",", "dtype", "=", "\"float32\"", ")", "\n", "f", "[", "\"chunk_duration\"", "]", "=", "chunk_duration", "\n", "f", "[", "\"frame_rate\"", "]", "=", "frame_rate", "\n", "\n", "", "chunk_pointer", "=", "0", "\n", "\n", "# Loop over chunks.", "\n", "for", "chunk_id", ",", "chunk_confidence", "in", "enumerate", "(", "chunk_confidences", ")", ":", "\n", "\n", "# Define offset.", "\n", "            ", "chunk_length", "=", "len", "(", "chunk_confidence", ")", "\n", "next_chunk_pointer", "=", "chunk_pointer", "+", "chunk_length", "\n", "chunk_start", "=", "chunk_duration", "*", "chunk_id", "\n", "chunk_stop", "=", "chunk_start", "+", "chunk_length", "/", "frame_rate", "\n", "chunk_time", "=", "np", ".", "linspace", "(", "\n", "chunk_start", ",", "\n", "chunk_stop", ",", "\n", "num", "=", "chunk_length", ",", "\n", "endpoint", "=", "False", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "\n", "# Export chunk as HDF5", "\n", "with", "h5py", ".", "File", "(", "confidence_path", ",", "\"a\"", ")", "as", "f", ":", "\n", "                ", "f", "[", "\"confidence\"", "]", "[", "chunk_pointer", ":", "next_chunk_pointer", "]", "=", "chunk_confidence", "\n", "f", "[", "\"time\"", "]", "[", "chunk_pointer", ":", "next_chunk_pointer", "]", "=", "chunk_time", "\n", "\n", "# Increment pointer.", "\n", "", "chunk_pointer", "=", "next_chunk_pointer", "\n", "\n", "# Export context.", "\n", "", "", "if", "export_context", ":", "\n", "# Define output path for context.", "\n", "        ", "context_path", "=", "get_output_path", "(", "\n", "filepath", ",", "suffix", "+", "\"context.hdf5\"", ",", "output_dir", "=", "output_dir", "\n", ")", "\n", "\n", "# Stack context over time.", "\n", "context_array", "=", "np", ".", "stack", "(", "contexts", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# Export context.", "\n", "with", "h5py", ".", "File", "(", "context_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", "[", "\"context\"", "]", "=", "context_array", "\n", "f", "[", "\"chunk_duration\"", "]", "=", "chunk_duration", "\n", "f", "[", "\"frame_rate\"", "]", "=", "frame_rate", "\n", "\n", "# Print final messages.", "\n", "", "", "if", "threshold", "is", "not", "None", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "checklist_path", ")", "\n", "if", "(", "len", "(", "df", ")", ">", "0", ")", "and", "(", "\"Species (English name)\"", "in", "df", ".", "columns", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "\"\\n\u001c\"", ".", "join", "(", "\n", "[", "\n", "(", "k", "+", "\" \u001c\"", "+", "str", "(", "v", ")", ".", "rjust", "(", "6", ")", ")", "\n", "for", "(", "k", ",", "v", ")", "in", "collections", ".", "Counter", "(", "df", "[", "\"Species (English name)\"", "]", ")", ".", "most_common", "(", ")", "\n", "]", "\n", ")", "\n", ")", "\n", "logger", ".", "info", "(", "\"TOTAL: {}\u001c.\"", ".", "format", "(", "str", "(", "len", "(", "df", ")", ")", ".", "rjust", "(", "4", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"TOTAL: 0\u001c. No flight calls were detected.\"", ")", "\n", "", "timestamp_str", "=", "\"Checklist is available at: {}\"", "\n", "logger", ".", "info", "(", "timestamp_str", ".", "format", "(", "checklist_path", ")", ")", "\n", "", "if", "export_clips", ":", "\n", "        ", "logger", ".", "info", "(", "\"Clips are available at: {}\"", ".", "format", "(", "clips_dir", ")", ")", "\n", "", "if", "export_confidence", ":", "\n", "        ", "event_str", "=", "\"The event detection curve is available at: {}\"", "\n", "logger", ".", "info", "(", "event_str", ".", "format", "(", "confidence_path", ")", ")", "\n", "", "if", "export_context", ":", "\n", "        ", "context_str", "=", "\"The context array is available at: {}\"", "\n", "logger", ".", "info", "(", "context_str", ".", "format", "(", "context_path", ")", ")", "\n", "", "if", "export_faults", ":", "\n", "        ", "faultlist_str", "=", "\"The list of sensor faults is available at: {}\"", "\n", "logger", ".", "info", "(", "faultlist_str", ".", "format", "(", "faultlist_path", ")", ")", "\n", "", "if", "predict_proba", ":", "\n", "        ", "proba_str", "=", "\"The list of probabilistic outputs is available at: {}\"", "\n", "logger", ".", "info", "(", "proba_str", ".", "format", "(", "json_path", ")", ")", "\n", "", "logger", ".", "info", "(", "\"Done with file: {}.\"", ".", "format", "(", "filepath", ")", ")", "\n", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.classify_species": [[1178, 1227], ["core.get_pcen_settings", "birdvoxclassify.predict", "birdvoxclassify.format_pred", "birdvoxclassify.get_best_candidates", "birdvoxclassify.get_best_candidates.keys"], "function", ["home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_pcen_settings", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.predict"], ["", "def", "classify_species", "(", "classifier", ",", "chunk_pcen", ",", "th_peak_loc", ",", "taxonomy", ")", ":", "\n", "# Load settings", "\n", "    ", "pcen_settings", "=", "get_pcen_settings", "(", ")", "\n", "clip_length", "=", "BVD_CLIP_LENGTH", "\n", "\n", "# Convert birdvoxdetect hops to PCEN hops", "\n", "th_peak_hop", "=", "th_peak_loc", "*", "pcen_settings", "[", "\"stride_length\"", "]", "\n", "\n", "# Extract clip in PCEN domain", "\n", "pcen_clip_start", "=", "th_peak_hop", "-", "clip_length", "//", "2", "\n", "pcen_clip_stop", "=", "th_peak_hop", "+", "clip_length", "//", "2", "\n", "pcen_clip", "=", "chunk_pcen", "[", ":", "120", ",", "pcen_clip_start", ":", "pcen_clip_stop", ",", "np", ".", "newaxis", "]", "\n", "\n", "# If PCEN clip is empty, return None", "\n", "if", "pcen_clip", ".", "shape", "[", "1", "]", "==", "0", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n", "# Run BirdVoxClassify.", "\n", "", "bvc_prediction", "=", "birdvoxclassify", ".", "predict", "(", "pcen_clip", ",", "classifier", "=", "classifier", ")", "\n", "\n", "# Format prediction", "\n", "formatted_pred_dict", "=", "birdvoxclassify", ".", "format_pred", "(", "bvc_prediction", ",", "taxonomy", "=", "taxonomy", ")", "\n", "\n", "# Apply hierarchical consistency", "\n", "consistent_pred_dict", "=", "birdvoxclassify", ".", "get_best_candidates", "(", "\n", "formatted_pred_dict", "=", "formatted_pred_dict", ",", "\n", "taxonomy", "=", "taxonomy", ",", "\n", "hierarchical_consistency", "=", "True", ",", "\n", ")", "\n", "\n", "for", "level", "in", "consistent_pred_dict", ".", "keys", "(", ")", ":", "\n", "        ", "consistent_pred_dict", "[", "level", "]", "[", "\"probability\"", "]", "*=", "100", "\n", "\n", "", "if", "consistent_pred_dict", "[", "\"coarse\"", "]", "[", "\"common_name\"", "]", "==", "\"other\"", ":", "\n", "        ", "consistent_pred_dict", "[", "\"coarse\"", "]", "[", "\"common_name\"", "]", "=", "\"\"", "\n", "consistent_pred_dict", "[", "\"coarse\"", "]", "[", "\"scientific_name\"", "]", "=", "\"\"", "\n", "\n", "", "if", "consistent_pred_dict", "[", "\"medium\"", "]", "[", "\"common_name\"", "]", "==", "\"other\"", ":", "\n", "        ", "consistent_pred_dict", "[", "\"medium\"", "]", "[", "\"common_name\"", "]", "=", "\"\"", "\n", "consistent_pred_dict", "[", "\"medium\"", "]", "[", "\"scientific_name\"", "]", "=", "\"\"", "\n", "\n", "", "if", "consistent_pred_dict", "[", "\"fine\"", "]", "[", "\"common_name\"", "]", "==", "\"other\"", ":", "\n", "        ", "consistent_pred_dict", "[", "\"fine\"", "]", "[", "\"scientific_name\"", "]", "=", "\"\"", "\n", "consistent_pred_dict", "[", "\"fine\"", "]", "[", "\"taxonomy_level_aliases\"", "]", "=", "{", "\n", "\"species_4letter_code\"", ":", "\"\"", ",", "\n", "\"species_6letter_code\"", ":", "\"\"", ",", "\n", "}", "\n", "\n", "", "return", "consistent_pred_dict", ",", "formatted_pred_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.compute_pcen": [[1229, 1291], ["core.get_pcen_settings", "librosa.util.valid_audio", "librosa.stft", "librosa.feature.melspectrogram", "librosa.pcen", "pcen.astype.astype", "librosa.resample"], "function", ["home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_pcen_settings"], ["", "def", "compute_pcen", "(", "audio", ",", "sr", ")", ":", "\n", "# Load settings.", "\n", "    ", "pcen_settings", "=", "get_pcen_settings", "(", ")", "\n", "\n", "# Validate audio", "\n", "librosa", ".", "util", ".", "valid_audio", "(", "audio", ",", "mono", "=", "True", ")", "\n", "\n", "# Map to the range [-2**31, 2**31[", "\n", "audio", "=", "(", "audio", "*", "(", "2", "**", "31", ")", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "\n", "# Resample to 22,050 Hz", "\n", "if", "not", "sr", "==", "pcen_settings", "[", "\"sr\"", "]", ":", "\n", "        ", "audio", "=", "librosa", ".", "resample", "(", "audio", ",", "sr", ",", "pcen_settings", "[", "\"sr\"", "]", ")", "\n", "sr", "=", "pcen_settings", "[", "\"sr\"", "]", "\n", "\n", "# Compute Short-Term Fourier Transform (STFT).", "\n", "", "stft", "=", "librosa", ".", "stft", "(", "\n", "audio", ",", "\n", "n_fft", "=", "pcen_settings", "[", "\"n_fft\"", "]", ",", "\n", "win_length", "=", "pcen_settings", "[", "\"win_length\"", "]", ",", "\n", "hop_length", "=", "pcen_settings", "[", "\"hop_length\"", "]", ",", "\n", "window", "=", "pcen_settings", "[", "\"window\"", "]", ",", "\n", ")", "\n", "\n", "# Compute squared magnitude coefficients.", "\n", "abs2_stft", "=", "(", "stft", ".", "real", "*", "stft", ".", "real", ")", "+", "(", "stft", ".", "imag", "*", "stft", ".", "imag", ")", "\n", "\n", "# Gather frequency bins according to the Mel scale.", "\n", "# NB: as of librosa v0.6.2, melspectrogram is type-instable and thus", "\n", "# returns 64-bit output even with a 32-bit input. Therefore, we need", "\n", "# to convert PCEN to single precision eventually. This might not be", "\n", "# necessary in the future, if the whole PCEN pipeline is kept type-stable.", "\n", "melspec", "=", "librosa", ".", "feature", ".", "melspectrogram", "(", "\n", "y", "=", "None", ",", "\n", "S", "=", "abs2_stft", ",", "\n", "sr", "=", "pcen_settings", "[", "\"sr\"", "]", ",", "\n", "n_fft", "=", "pcen_settings", "[", "\"n_fft\"", "]", ",", "\n", "n_mels", "=", "pcen_settings", "[", "\"n_mels\"", "]", ",", "\n", "htk", "=", "True", ",", "\n", "fmin", "=", "pcen_settings", "[", "\"fmin\"", "]", ",", "\n", "fmax", "=", "pcen_settings", "[", "\"fmax\"", "]", ",", "\n", ")", "\n", "\n", "# Compute PCEN.", "\n", "pcen", "=", "librosa", ".", "pcen", "(", "\n", "melspec", ",", "\n", "sr", "=", "pcen_settings", "[", "\"sr\"", "]", ",", "\n", "hop_length", "=", "pcen_settings", "[", "\"hop_length\"", "]", ",", "\n", "gain", "=", "pcen_settings", "[", "\"pcen_norm_exponent\"", "]", ",", "\n", "bias", "=", "pcen_settings", "[", "\"pcen_delta\"", "]", ",", "\n", "power", "=", "pcen_settings", "[", "\"pcen_power\"", "]", ",", "\n", "time_constant", "=", "pcen_settings", "[", "\"pcen_time_constant\"", "]", ",", "\n", ")", "\n", "\n", "# Convert to single floating-point precision.", "\n", "pcen", "=", "pcen", ".", "astype", "(", "\"float32\"", ")", "\n", "\n", "# Truncate spectrum to range 2-10 kHz.", "\n", "pcen", "=", "pcen", "[", ":", "pcen_settings", "[", "\"top_freq_id\"", "]", ",", ":", "]", "\n", "\n", "# Return.", "\n", "return", "pcen", "\n", "\n"]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.predict": [[1293, 1341], ["core.get_pcen_settings", "numpy.squeeze", "scipy.signal.medfilt", "scipy.signal.medfilt", "[].astype", "core.get_pcen_settings", "numpy.lib.stride_tricks.as_strided", "detector.predict", "numpy.max", "numpy.min", "numpy.clip", "int", "int", "int", "numpy.ravel", "numpy.transpose", "numpy.arange", "core.map_tfr"], "function", ["home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_pcen_settings", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_pcen_settings", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.predict", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.map_tfr"], ["", "def", "predict", "(", "pcen", ",", "detector", ",", "logger_level", ",", "padding", "=", "0", ")", ":", "\n", "# Truncate frequency spectrum (from 128 to 120 bins)", "\n", "    ", "pcen", "=", "pcen", "[", ":", "120", ",", ":", "]", "\n", "pcen_settings", "=", "get_pcen_settings", "(", ")", "\n", "\n", "# PCEN-SNR", "\n", "if", "detector", "==", "\"pcen_snr\"", ":", "\n", "        ", "frame_rate", "=", "20.0", "\n", "pcen_snr", "=", "np", ".", "max", "(", "pcen", ",", "axis", "=", "0", ")", "-", "np", ".", "min", "(", "pcen", ",", "axis", "=", "0", ")", "\n", "pcen_confidence", "=", "pcen_snr", "/", "(", "0.001", "+", "pcen_snr", ")", "\n", "median_confidence", "=", "scipy", ".", "signal", ".", "medfilt", "(", "pcen_confidence", ",", "kernel_size", "=", "127", ")", "\n", "sr", "=", "pcen_settings", "[", "\"sr\"", "]", "\n", "hop_length", "=", "pcen_settings", "[", "\"hop_length\"", "]", "\n", "audio_duration", "=", "pcen", ".", "shape", "[", "1", "]", "*", "hop_length", "/", "sr", "\n", "confidence_x", "=", "np", ".", "arange", "(", "\n", "0.0", ",", "audio_duration", "*", "sr", "/", "hop_length", ",", "sr", "/", "(", "hop_length", "*", "frame_rate", ")", "\n", ")", "[", ":", "-", "1", "]", ".", "astype", "(", "\"int\"", ")", "\n", "y", "=", "100", "*", "np", ".", "clip", "(", "median_confidence", "[", "confidence_x", "]", ",", "0.0", ",", "1.0", ")", "\n", "\n", "# PCEN-CNN. (no context adaptation)", "\n", "", "else", ":", "\n", "# Compute number of hops.", "\n", "        ", "clip_length", "=", "BVD_CLIP_LENGTH", "\n", "pcen_settings", "=", "get_pcen_settings", "(", ")", "\n", "stride_length", "=", "pcen_settings", "[", "\"stride_length\"", "]", "\n", "n_freqs", ",", "n_padded_hops", "=", "pcen", ".", "shape", "\n", "if", "padding", ">", "0", ":", "\n", "            ", "padding_hops", "=", "int", "(", "padding", "/", "pcen_settings", "[", "\"hop_length\"", "]", ")", "\n", "n_hops", "=", "n_padded_hops", "-", "padding_hops", "+", "1", "\n", "n_strides", "=", "int", "(", "n_hops", "/", "stride_length", ")", "\n", "", "else", ":", "\n", "            ", "n_hops", "=", "n_padded_hops", "\n", "n_strides", "=", "int", "(", "(", "n_hops", "-", "clip_length", ")", "/", "stride_length", ")", "\n", "", "itemsize", "=", "pcen", ".", "itemsize", "\n", "\n", "# Stride and tile.", "\n", "X_shape", "=", "(", "n_strides", ",", "clip_length", ",", "n_freqs", ")", "\n", "X_stride", "=", "(", "itemsize", "*", "n_freqs", "*", "stride_length", ",", "itemsize", "*", "n_freqs", ",", "itemsize", ")", "\n", "X_pcen", "=", "np", ".", "lib", ".", "stride_tricks", ".", "as_strided", "(", "\n", "np", ".", "ravel", "(", "map_tfr", "(", "pcen", ")", ".", "T", ")", ",", "shape", "=", "X_shape", ",", "strides", "=", "X_stride", ",", "writeable", "=", "False", "\n", ")", "\n", "X_pcen", "=", "np", ".", "transpose", "(", "X_pcen", ",", "(", "0", ",", "2", ",", "1", ")", ")", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "# Predict.", "\n", "verbose", "=", "logger_level", "<", "15", "\n", "y", "=", "detector", ".", "predict", "(", "X_pcen", ",", "verbose", "=", "verbose", ")", "\n", "\n", "", "return", "np", ".", "squeeze", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.predict_with_context": [[1343, 1379], ["core.get_pcen_settings", "numpy.lib.stride_tricks.as_strided", "numpy.broadcast_to", "detector.predict", "detector.predict.squeeze", "int", "int", "int", "numpy.ravel", "numpy.transpose", "core.map_tfr"], "function", ["home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_pcen_settings", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.predict", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.map_tfr"], ["", "def", "predict_with_context", "(", "pcen", ",", "context", ",", "detector", ",", "logger_level", ",", "padding", "=", "0", ")", ":", "\n", "# Truncate frequency spectrum (from 128 to 120 bins)", "\n", "    ", "pcen", "=", "pcen", "[", ":", "120", ",", ":", "]", "\n", "context", "=", "context", "[", ":", ",", ":", "120", "]", "\n", "\n", "# Compute number of hops.", "\n", "clip_length", "=", "BVD_CLIP_LENGTH", "\n", "pcen_settings", "=", "get_pcen_settings", "(", ")", "\n", "stride_length", "=", "pcen_settings", "[", "\"stride_length\"", "]", "\n", "n_freqs", ",", "n_padded_hops", "=", "pcen", ".", "shape", "\n", "if", "padding", ">", "0", ":", "\n", "        ", "padding_hops", "=", "int", "(", "padding", "/", "pcen_settings", "[", "\"hop_length\"", "]", ")", "\n", "n_hops", "=", "n_padded_hops", "-", "padding_hops", "+", "1", "\n", "n_strides", "=", "int", "(", "n_hops", "/", "stride_length", ")", "\n", "", "else", ":", "\n", "        ", "n_hops", "=", "n_padded_hops", "\n", "n_strides", "=", "int", "(", "(", "n_hops", "-", "clip_length", ")", "/", "stride_length", ")", "\n", "", "itemsize", "=", "pcen", ".", "itemsize", "\n", "\n", "# Stride and tile.", "\n", "X_shape", "=", "(", "n_strides", ",", "clip_length", ",", "n_freqs", ")", "\n", "X_stride", "=", "(", "itemsize", "*", "n_freqs", "*", "stride_length", ",", "itemsize", "*", "n_freqs", ",", "itemsize", ")", "\n", "X_pcen", "=", "np", ".", "lib", ".", "stride_tricks", ".", "as_strided", "(", "\n", "np", ".", "ravel", "(", "map_tfr", "(", "pcen", ")", ".", "T", ")", ",", "shape", "=", "X_shape", ",", "strides", "=", "X_stride", ",", "writeable", "=", "False", "\n", ")", "\n", "X_pcen", "=", "np", ".", "transpose", "(", "X_pcen", ",", "(", "0", ",", "2", ",", "1", ")", ")", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "X_bg", "=", "np", ".", "broadcast_to", "(", "\n", "context", ".", "T", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "(", "n_strides", ",", "context", ".", "shape", "[", "1", "]", ",", "context", ".", "shape", "[", "0", "]", ")", "\n", ")", "\n", "\n", "# Predict.", "\n", "verbose", "=", "logger_level", "<", "15", "\n", "y", "=", "detector", ".", "predict", "(", "{", "\"spec_input\"", ":", "X_pcen", ",", "\"bg_input\"", ":", "X_bg", "}", ",", "verbose", "=", "verbose", ")", "\n", "\n", "# Return confidence.", "\n", "return", "y", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_output_path": [[1381, 1407], ["os.path.join", "os.path.splitext", "os.path.dirname", "os.path.basename"], "function", ["None"], ["", "def", "get_output_path", "(", "filepath", ",", "suffix", ",", "output_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Parameters\n    ----------\n    filepath : str\n        Path to audio file to be processed\n    suffix : str\n        String to append to filename (including extension)\n    output_dir : str or None\n        Path to directory where file will be saved.\n        If None, will use directory of given filepath.\n    Returns\n    -------\n    output_path : str\n        Path to output file\n    \"\"\"", "\n", "base_filename", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "filepath", ")", ")", "[", "0", "]", "\n", "if", "not", "output_dir", ":", "\n", "        ", "output_dir", "=", "os", ".", "path", ".", "dirname", "(", "filepath", ")", "\n", "\n", "", "if", "suffix", "[", "0", "]", "!=", "\".\"", ":", "\n", "        ", "output_filename", "=", "\"{}_{}\"", ".", "format", "(", "base_filename", ",", "suffix", ")", "\n", "", "else", ":", "\n", "        ", "output_filename", "=", "base_filename", "+", "suffix", "\n", "\n", "", "return", "os", ".", "path", ".", "join", "(", "output_dir", ",", "output_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_pcen_settings": [[1409, 1427], ["None"], "function", ["None"], ["", "def", "get_pcen_settings", "(", ")", ":", "\n", "    ", "pcen_settings", "=", "{", "\n", "\"fmin\"", ":", "2000.0", ",", "\n", "\"fmax\"", ":", "11025.0", ",", "\n", "\"hop_length\"", ":", "32", ",", "\n", "\"n_fft\"", ":", "1024", ",", "\n", "\"n_mels\"", ":", "128", ",", "\n", "\"pcen_delta\"", ":", "10.0", ",", "\n", "\"pcen_time_constant\"", ":", "0.06", ",", "\n", "\"pcen_norm_exponent\"", ":", "0.8", ",", "\n", "\"pcen_power\"", ":", "0.25", ",", "\n", "\"sr\"", ":", "22050.0", ",", "\n", "\"stride_length\"", ":", "34", ",", "\n", "\"top_freq_id\"", ":", "128", ",", "\n", "\"win_length\"", ":", "256", ",", "\n", "\"window\"", ":", "\"flattop\"", ",", "\n", "}", "\n", "return", "pcen_settings", "\n", "\n"]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_model_path": [[1429, 1431], ["os.path.join", "os.path.dirname"], "function", ["None"], ["", "def", "get_model_path", "(", "model_name", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"models\"", ",", "model_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.map_confidence": [[1433, 1459], ["numpy.log1p", "numpy.log", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.log", "numpy.finfo", "numpy.finfo", "numpy.maximum", "numpy.finfo", "numpy.maximum"], "function", ["None"], ["", "def", "map_confidence", "(", "y", ",", "model_name", ")", ":", "\n", "    ", "log1my", "=", "np", ".", "log1p", "(", "np", ".", "clip", "(", "-", "y", ",", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", "-", "1", ",", "None", ")", ")", "\n", "logy", "=", "np", ".", "log", "(", "np", ".", "clip", "(", "y", ",", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "tiny", ",", "None", ")", ")", "\n", "y_inverse_sigmoid", "=", "log1my", "-", "logy", "-", "np", ".", "log", "(", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", ")", "\n", "if", "model_name", "==", "\"birdvoxdetect-v03_trial-12_network_epoch-068\"", ":", "\n", "# See birdvox-full-season/detector-v03/notebooks/07_measure-precision-300h.ipynb", "\n", "        ", "y_in", "=", "np", ".", "maximum", "(", "0", ",", "y_inverse_sigmoid", "-", "18", ")", "**", "2", "/", "100", "\n", "y_out", "=", "(", "\n", "14.76561354", "*", "(", "y_in", "**", "3", ")", "\n", "-", "68.54604756", "*", "(", "y_in", "**", "2", ")", "\n", "+", "111.89379155", "*", "(", "y_in", ")", "\n", "-", "0.13061346", "\n", ")", "\n", "", "elif", "model_name", "==", "\"birdvoxdetect-v03_T-1800_trial-37_network_epoch-023\"", ":", "\n", "# See birdvox-full-season/detector-v03/notebooks/10_measure-precision-300h-ca.ipynb", "\n", "        ", "y_in", "=", "np", ".", "maximum", "(", "0", ",", "y_inverse_sigmoid", "-", "18", ")", "**", "2", "/", "100", "\n", "y_out", "=", "(", "\n", "4.28734484", "*", "(", "y_in", "**", "3", ")", "\n", "-", "25.97219728", "*", "(", "y_in", "**", "2", ")", "\n", "+", "62.66749547", "*", "(", "y_in", ")", "\n", "+", "4.8942351", "\n", ")", "\n", "", "else", ":", "\n", "        ", "y_in", "=", "y_inverse_sigmoid", "**", "2", "\n", "y_out", "=", "0.09", "*", "y_in", "\n", "", "return", "np", ".", "clip", "(", "y_out", ",", "0.0", ",", "99.99", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.seconds_to_hhmmss": [[1461, 1465], ["divmod", "divmod", "int", "int"], "function", ["None"], ["", "def", "seconds_to_hhmmss", "(", "total_seconds", ")", ":", "\n", "    ", "hours", ",", "tmp_seconds", "=", "divmod", "(", "total_seconds", ",", "3600", ")", "\n", "minutes", ",", "seconds", "=", "divmod", "(", "tmp_seconds", ",", "60", ")", "\n", "return", "\"{:02d}:{:02d}:{:05.2f}\"", ".", "format", "(", "int", "(", "hours", ")", ",", "int", "(", "minutes", ")", ",", "seconds", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.cli.get_file_list": [[17, 34], ["isinstance", "argparse.ArgumentTypeError", "os.path.isfile", "isinstance", "file_list.append", "os.path.isdir", "os.path.abspath", "os.listdir", "birdvoxdetect.birdvoxdetect_exceptions.BirdVoxDetectError", "os.path.join", "os.path.isfile", "file_list.append"], "function", ["None"], ["def", "get_file_list", "(", "input_list", ")", ":", "\n", "    ", "\"\"\"Parse list of input paths.\"\"\"", "\n", "if", "not", "isinstance", "(", "input_list", ",", "Iterable", ")", "or", "isinstance", "(", "input_list", ",", "string_types", ")", ":", "\n", "        ", "raise", "ArgumentTypeError", "(", "\"input_list must be a non-string iterable\"", ")", "\n", "", "file_list", "=", "[", "]", "\n", "for", "item", "in", "input_list", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "item", ")", ":", "\n", "            ", "file_list", ".", "append", "(", "os", ".", "path", ".", "abspath", "(", "item", ")", ")", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "item", ")", ":", "\n", "            ", "for", "fname", "in", "os", ".", "listdir", "(", "item", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "item", ",", "fname", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "                    ", "file_list", ".", "append", "(", "path", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "BirdVoxDetectError", "(", "\"Could not find input at path {}\"", ".", "format", "(", "item", ")", ")", "\n", "\n", "", "", "return", "file_list", "\n", "\n"]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.cli.run": [[36, 100], ["isinstance", "isinstance", "len", "print", "sys.exit", "birdvoxdetect.process_file", "print", "cli.get_file_list", "birdvoxdetect.birdvoxdetect_exceptions.BirdVoxDetectError", "print", "print", "print", "print", "print", "str", "str"], "function", ["home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.process_file", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.cli.get_file_list"], ["", "def", "run", "(", "\n", "inputs", ",", "\n", "output_dir", "=", "None", ",", "\n", "export_clips", "=", "False", ",", "\n", "export_confidence", "=", "False", ",", "\n", "export_faults", "=", "False", ",", "\n", "export_logger", "=", "False", ",", "\n", "predict_proba", "=", "False", ",", "\n", "threshold", "=", "50.0", ",", "\n", "suffix", "=", "\"\"", ",", "\n", "clip_duration", "=", "1.0", ",", "\n", "logger_level", "=", "logging", ".", "INFO", ",", "\n", ")", ":", "\n", "    ", "verbose", "=", "True", "\n", "if", "isinstance", "(", "inputs", ",", "string_types", ")", ":", "\n", "        ", "file_list", "=", "[", "inputs", "]", "\n", "", "elif", "isinstance", "(", "inputs", ",", "Iterable", ")", ":", "\n", "        ", "file_list", "=", "get_file_list", "(", "inputs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BirdVoxDetectError", "(", "\"Invalid input: {}\"", ".", "format", "(", "str", "(", "inputs", ")", ")", ")", "\n", "\n", "", "if", "len", "(", "file_list", ")", "==", "0", ":", "\n", "        ", "print", "(", "\"birdvoxdetect: No WAV files found in {}. Aborting.\"", ".", "format", "(", "str", "(", "inputs", ")", ")", ")", "\n", "sys", ".", "exit", "(", "-", "1", ")", "\n", "\n", "# Print header", "\n", "", "if", "verbose", ":", "\n", "        ", "if", "threshold", ":", "\n", "            ", "print", "(", "\"birdvoxdetect: Threshold = {:4.1f}\"", ".", "format", "(", "threshold", ")", ")", "\n", "\n", "", "if", "output_dir", ":", "\n", "            ", "print", "(", "\"birdvoxdetect: Output directory = \"", "+", "output_dir", ")", "\n", "\n", "", "if", "not", "suffix", "==", "\"\"", ":", "\n", "            ", "print", "(", "\"birdvoxdetect: Suffix string = \"", "+", "suffix", ")", "\n", "\n", "", "if", "export_clips", ":", "\n", "            ", "export_clips_str", "=", "\"\"", ".", "join", "(", "\n", "[", "\n", "\"Duration of exported clips = \"", ",", "\n", "\"{:.2f} seconds.\"", ".", "format", "(", "clip_duration", ")", ",", "\n", "]", "\n", ")", "\n", "print", "(", "\"birdvoxdetect: \"", "+", "export_clips_str", ")", "\n", "\n", "# Process all files in the arguments", "\n", "", "", "for", "filepath", "in", "file_list", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\"birdvoxdetect: Processing: {}\"", ".", "format", "(", "filepath", ")", ")", "\n", "", "birdvoxdetect", ".", "process_file", "(", "\n", "filepath", ",", "\n", "clip_duration", "=", "clip_duration", ",", "\n", "export_clips", "=", "export_clips", ",", "\n", "export_confidence", "=", "export_confidence", ",", "\n", "export_faults", "=", "export_faults", ",", "\n", "export_logger", "=", "export_logger", ",", "\n", "logger_level", "=", "logger_level", ",", "\n", "output_dir", "=", "output_dir", ",", "\n", "predict_proba", "=", "predict_proba", ",", "\n", "suffix", "=", "suffix", ",", "\n", "threshold", "=", "threshold", ",", "\n", ")", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "\"birdvoxdetect: Done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.cli.parse_args": [[102, 226], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser.print_help", "birdvoxdetect.birdvoxdetect_exceptions.BirdVoxDetectError", "birdvoxdetect.birdvoxdetect_exceptions.BirdVoxDetectError"], "function", ["home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.cli.parse_args"], ["", "", "def", "parse_args", "(", "args", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "\n", "sys", ".", "argv", "[", "0", "]", ",", "\n", "description", "=", "main", ".", "__doc__", ",", "\n", "formatter_class", "=", "RawDescriptionHelpFormatter", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"inputs\"", ",", "\n", "nargs", "=", "\"*\"", ",", "\n", "help", "=", "\"Path or paths to files to process, or path to \"", "\n", "\"a directory of files to process.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output-dir\"", ",", "\n", "\"-o\"", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Directory to save the output file(s); \"", "\n", "\"The default value is the same directory as the input \"", "\n", "\"file(s).\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--export-clips\"", ",", "\n", "\"-c\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Export detected events as audio clips in WAV format.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--export-confidence\"", ",", "\n", "\"-C\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Export the time series of model confidence values of events\"", "\n", "\"in HDF5 format.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--export-faults\"", ",", "\n", "\"-f\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Export list of sensor faults in CSV format.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--export-logger\"", ",", "\n", "\"-l\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Export output of Python logger in TXT format.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--threshold\"", ",", "\n", "\"-t\"", ",", "\n", "type", "=", "valid_threshold", ",", "\n", "default", "=", "50", ",", "\n", "help", "=", "\"Detection threshold, between 10 and 90. \"", "\n", "\"The default value is 50. \"", "\n", "\"Greater values lead to higher precision at the expense \"", "\n", "\"of a lower recall.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--suffix\"", ",", "\n", "\"-s\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "help", "=", "\"String to append to the output filenames.\"", "\n", "\"The default value is the empty string.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--clip-duration\"", ",", "\n", "\"-d\"", ",", "\n", "type", "=", "positive_float", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Duration of the exported clips, expressed in seconds (fps). \"", "\n", "\"The default value is 1.0, that is, one second. \"", "\n", "\"We recommend values of 0.5 or above.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--predict-proba\"", ",", "\n", "\"-p\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Export output probabilities as a JSON container.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--quiet\"", ",", "\"-q\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Print less messages on screen.\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--verbose\"", ",", "\n", "\"-v\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Print timestamps of detected events.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--version\"", ",", "\"-V\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Print version number.\"", "\n", ")", "\n", "\n", "if", "args", "==", "[", "]", ":", "\n", "        ", "parser", ".", "print_help", "(", "sys", ".", "stdout", ")", "\n", "return", "\"\"", "\n", "\n", "", "args", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n", "if", "args", ".", "quiet", "and", "args", ".", "verbose", ":", "\n", "        ", "raise", "BirdVoxDetectError", "(", "\n", "\"Command-line flags --quiet (-q) and --verbose (-v) \"", "\n", "\"are mutually exclusive.\"", "\n", ")", "\n", "\n", "", "if", "args", ".", "clip_duration", "is", "None", ":", "\n", "        ", "args", ".", "clip_duration", "=", "1.0", "\n", "", "elif", "not", "args", ".", "export_clips", ":", "\n", "        ", "raise", "BirdVoxDetectError", "(", "\n", "\"The --export-clips (-c) flag should be present \"", "\n", "\"if the --clip-duration (-d) flag is present.\"", "\n", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.cli.main": [[228, 261], ["cli.parse_args", "cli.run", "print"], "function", ["home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.cli.parse_args", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.cli.run"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"\n    Extracts nocturnal flight calls from audio by means of the BirdVoxDetect\n    deep learning model (Lostanlen et al. 2019).\n    \"\"\"", "\n", "args", "=", "parse_args", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", "\n", "\n", "if", "args", "==", "\"\"", ":", "\n", "        ", "return", "\n", "\n", "", "if", "args", ".", "version", ":", "\n", "        ", "print", "(", "birdvoxdetect", ".", "version", ".", "version", ")", "\n", "return", "\n", "\n", "", "if", "args", ".", "quiet", ":", "\n", "        ", "logger_level", "=", "30", "\n", "", "elif", "args", ".", "verbose", ":", "\n", "        ", "logger_level", "=", "10", "\n", "", "else", ":", "\n", "        ", "logger_level", "=", "25", "\n", "\n", "", "run", "(", "\n", "args", ".", "inputs", ",", "\n", "output_dir", "=", "args", ".", "output_dir", ",", "\n", "export_clips", "=", "args", ".", "export_clips", ",", "\n", "export_confidence", "=", "args", ".", "export_confidence", ",", "\n", "export_faults", "=", "args", ".", "export_faults", ",", "\n", "export_logger", "=", "args", ".", "export_logger", ",", "\n", "predict_proba", "=", "args", ".", "predict_proba", ",", "\n", "threshold", "=", "args", ".", "threshold", ",", "\n", "suffix", "=", "args", ".", "suffix", ",", "\n", "clip_duration", "=", "args", ".", "clip_duration", ",", "\n", "logger_level", "=", "logger_level", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.cli.positive_float": [[264, 275], ["float", "numpy.isnan", "argparse.ArgumentTypeError", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "positive_float", "(", "value", ")", ":", "\n", "    ", "\"\"\"An argparse-like method for accepting only positive number\"\"\"", "\n", "try", ":", "\n", "        ", "fvalue", "=", "float", "(", "value", ")", "\n", "", "except", "(", "ValueError", ",", "TypeError", ")", "as", "e", ":", "\n", "        ", "raise", "ArgumentTypeError", "(", "\n", "\"Expected a positive float, error message: {}\"", ".", "format", "(", "e", ")", "\n", ")", "\n", "", "if", "np", ".", "isnan", "(", "fvalue", ")", "or", "fvalue", "<=", "0", ":", "\n", "        ", "raise", "ArgumentTypeError", "(", "\"Expected a positive number\"", ")", "\n", "", "return", "fvalue", "\n", "\n"]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.cli.valid_threshold": [[277, 288], ["float", "numpy.isnan", "argparse.ArgumentTypeError", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "valid_threshold", "(", "value", ")", ":", "\n", "    ", "\"\"\"An argparse-like method for accepting only floats between 0 and 100\"\"\"", "\n", "try", ":", "\n", "        ", "fvalue", "=", "float", "(", "value", ")", "\n", "", "except", "(", "ValueError", ",", "TypeError", ")", "as", "e", ":", "\n", "        ", "raise", "ArgumentTypeError", "(", "\n", "\"Expected a positive float, error message: {}\"", ".", "format", "(", "e", ")", "\n", ")", "\n", "", "if", "np", ".", "isnan", "(", "fvalue", ")", "or", "fvalue", "<", "0", "or", "fvalue", ">", "100", ":", "\n", "        ", "raise", "ArgumentTypeError", "(", "\"Expected a number between 0 and 100\"", ")", "\n", "", "return", "fvalue", "\n", "", ""]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.tests.test_core.test_get_output_path": [[23, 40], ["birdvoxdetect.core.get_output_path", "birdvoxdetect.core.get_output_path", "birdvoxdetect.core.get_output_path"], "function", ["home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_output_path", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_output_path", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.get_output_path"], ["def", "test_get_output_path", "(", ")", ":", "\n", "    ", "test_filepath", "=", "\"/path/to/the/test/file/audio.wav\"", "\n", "suffix", "=", "\"checklist.csv\"", "\n", "test_output_dir", "=", "\"/tmp/test/output/dir\"", "\n", "exp_output_path", "=", "\"/tmp/test/output/dir/audio_checklist.csv\"", "\n", "output_path", "=", "get_output_path", "(", "test_filepath", ",", "suffix", ",", "test_output_dir", ")", "\n", "assert", "output_path", "==", "exp_output_path", "\n", "\n", "# No output directory", "\n", "exp_output_path", "=", "\"/path/to/the/test/file/audio_checklist.csv\"", "\n", "output_path", "=", "get_output_path", "(", "test_filepath", ",", "suffix", ")", "\n", "assert", "output_path", "==", "exp_output_path", "\n", "\n", "# No suffix", "\n", "exp_output_path", "=", "\"/path/to/the/test/file/audio.csv\"", "\n", "output_path", "=", "get_output_path", "(", "test_filepath", ",", "\".csv\"", ")", "\n", "assert", "output_path", "==", "exp_output_path", "\n", "\n"]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.tests.test_core.test_process_file": [[42, 200], ["pytest.raises", "pytest.raises", "pytest.raises", "pytest.raises", "tempfile.mkdtemp", "birdvoxdetect.core.process_file", "os.path.join", "os.path.exists", "pandas.read_csv", "datetime.datetime.strptime", "numpy.allclose", "shutil.rmtree", "tempfile.mkdtemp", "birdvoxdetect.core.process_file", "os.path.join", "pandas.read_csv", "tempfile.mkdtemp", "birdvoxdetect.core.process_file", "os.path.join", "os.path.exists", "sorted", "clips_list[].startswith", "clips_list[].endswith", "numpy.all", "shutil.rmtree", "tempfile.mkdtemp", "birdvoxdetect.core.process_file", "os.path.join", "shutil.rmtree", "tempfile.mkdtemp", "birdvoxdetect.core.process_file", "os.path.join", "os.path.exists", "shutil.rmtree", "tempfile.mkdtemp", "birdvoxdetect.core.process_file", "os.path.join", "os.path.exists", "pandas.read_csv", "numpy.all", "shutil.rmtree", "tempfile.mkdtemp", "birdvoxdetect.core.process_file", "os.path.join", "os.path.exists", "shutil.rmtree", "tempfile.mkdtemp", "birdvoxdetect.core.process_file", "os.path.join", "os.path.exists", "shutil.rmtree", "os.path.join", "os.path.join", "os.path.join", "len", "len", "datetime.datetime.strptime", "numpy.array", "numpy.array", "os.path.join", "len", "os.path.join", "os.listdir", "len", "os.path.join", "h5py.File", "os.path.join", "h5py.File", "os.path.join", "os.path.join", "open", "json.load", "json.load.keys", "json.load.keys", "json.load.keys", "os.path.join", "os.path.join", "list", "list", "list", "list", "list", "os.path.join", "c.endswith", "numpy.array", "df_timedelta.total_seconds"], "function", ["home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.process_file", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.process_file", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.process_file", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.process_file", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.process_file", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.process_file", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.process_file", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.core.process_file"], ["", "def", "test_process_file", "(", ")", ":", "\n", "# non-existing path", "\n", "    ", "invalid_filepath", "=", "\"path/to/a/nonexisting/file.wav\"", "\n", "pytest", ".", "raises", "(", "BirdVoxDetectError", ",", "process_file", ",", "invalid_filepath", ")", "\n", "\n", "# non-audio path", "\n", "nonaudio_existing_filepath", "=", "\"/Users/vl238\"", "\n", "pytest", ".", "raises", "(", "BirdVoxDetectError", ",", "process_file", ",", "nonaudio_existing_filepath", ")", "\n", "\n", "# non-existing model", "\n", "pytest", ".", "raises", "(", "\n", "BirdVoxDetectError", ",", "\n", "process_file", ",", "\n", "os", ".", "path", ".", "join", "(", "TEST_AUDIO_DIR", ",", "POSITIVE_MD5", "+", "\".wav\"", ")", ",", "\n", "detector_name", "=", "\"a_birdvoxdetect_model_that_does_not_exist\"", ",", "\n", ")", "\n", "\n", "# non-existing model", "\n", "pytest", ".", "raises", "(", "\n", "BirdVoxDetectError", ",", "\n", "process_file", ",", "\n", "os", ".", "path", ".", "join", "(", "TEST_AUDIO_DIR", ",", "POSITIVE_MD5", "+", "\".wav\"", ")", ",", "\n", "detector_name", "=", "\"birdvoxdetect_empty\"", ",", "\n", ")", "\n", "\n", "# standard call", "\n", "# this example has one flight call (SWTH) at 8.79 seconds", "\n", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "process_file", "(", "\n", "os", ".", "path", ".", "join", "(", "TEST_AUDIO_DIR", ",", "POSITIVE_MD5", "+", "\".wav\"", ")", ",", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "\"subfolder\"", ")", ",", "\n", ")", "\n", "csv_path", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "\"subfolder\"", ",", "POSITIVE_MD5", "+", "\"_checklist.csv\"", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "csv_path", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "csv_path", ")", "\n", "assert", "len", "(", "df", ")", "==", "1", "\n", "assert", "len", "(", "df", ".", "columns", ")", "==", "10", "\n", "assert", "df", ".", "columns", "[", "0", "]", "==", "\"Time (hh:mm:ss)\"", "\n", "assert", "df", ".", "columns", "[", "1", "]", "==", "\"Detection confidence (%)\"", "\n", "assert", "df", ".", "columns", "[", "2", "]", "==", "\"Order\"", "\n", "assert", "df", ".", "columns", "[", "3", "]", "==", "\"Order confidence (%)\"", "\n", "assert", "df", ".", "columns", "[", "4", "]", "==", "\"Family\"", "\n", "assert", "df", ".", "columns", "[", "5", "]", "==", "\"Family confidence (%)\"", "\n", "assert", "df", ".", "columns", "[", "6", "]", "==", "\"Species (English name)\"", "\n", "assert", "df", ".", "columns", "[", "7", "]", "==", "\"Species (scientific name)\"", "\n", "assert", "df", ".", "columns", "[", "8", "]", "==", "\"Species (4-letter code)\"", "\n", "assert", "df", ".", "columns", "[", "9", "]", "==", "\"Species confidence (%)\"", "\n", "\n", "df_strptime", "=", "datetime", ".", "datetime", ".", "strptime", "(", "\n", "list", "(", "df", "[", "\"Time (hh:mm:ss)\"", "]", ")", "[", "0", "]", ",", "\"%H:%M:%S.%f\"", "\n", ")", "\n", "df_timedelta", "=", "df_strptime", "-", "datetime", ".", "datetime", ".", "strptime", "(", "\n", "\"00:00:00.00\"", ",", "\"%H:%M:%S.%f\"", "\n", ")", "\n", "assert", "np", ".", "allclose", "(", "\n", "np", ".", "array", "(", "[", "df_timedelta", ".", "total_seconds", "(", ")", "]", ")", ",", "np", ".", "array", "(", "[", "8.79", "]", ")", ",", "atol", "=", "0.1", "\n", ")", "\n", "assert", "list", "(", "df", "[", "\"Order\"", "]", ")", "[", "0", "]", "==", "\"Passeriformes\"", "\n", "assert", "list", "(", "df", "[", "\"Family\"", "]", ")", "[", "0", "]", "==", "\"Turdidae\"", "\n", "assert", "list", "(", "df", "[", "\"Species (English name)\"", "]", ")", "[", "0", "]", "==", "\"Swainson's thrush\"", "\n", "assert", "list", "(", "df", "[", "\"Species (4-letter code)\"", "]", ")", "[", "0", "]", "==", "\"SWTH\"", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "\n", "# standard call on clip without any flight call", "\n", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "process_file", "(", "\n", "os", ".", "path", ".", "join", "(", "TEST_AUDIO_DIR", ",", "NEGATIVE_MD5", "+", "\".wav\"", ")", ",", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "\"subfolder\"", ")", ",", "\n", ")", "\n", "csv_path", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "\"subfolder\"", ",", "NEGATIVE_MD5", "+", "\"_checklist.csv\"", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "csv_path", ")", "\n", "assert", "len", "(", "df", ")", "==", "0", "\n", "\n", "# export clips", "\n", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "process_file", "(", "\n", "os", ".", "path", ".", "join", "(", "TEST_AUDIO_DIR", ",", "POSITIVE_MD5", "+", "\".wav\"", ")", ",", "\n", "output_dir", "=", "tmpdir", ",", "\n", "export_clips", "=", "True", ",", "\n", ")", "\n", "clips_dir", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "POSITIVE_MD5", "+", "\"_clips\"", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "clips_dir", ")", "\n", "clips_list", "=", "sorted", "(", "os", ".", "listdir", "(", "clips_dir", ")", ")", "\n", "assert", "len", "(", "clips_list", ")", "==", "1", "\n", "assert", "clips_list", "[", "0", "]", ".", "startswith", "(", "POSITIVE_MD5", "+", "\"_00_00_08-78\"", ")", "\n", "assert", "clips_list", "[", "0", "]", ".", "endswith", "(", "\"SWTH.wav\"", ")", "\n", "assert", "np", ".", "all", "(", "[", "c", ".", "endswith", "(", "\".wav\"", ")", "for", "c", "in", "clips_list", "]", ")", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "\n", "# export confidence", "\n", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "process_file", "(", "\n", "os", ".", "path", ".", "join", "(", "TEST_AUDIO_DIR", ",", "POSITIVE_MD5", "+", "\".wav\"", ")", ",", "\n", "output_dir", "=", "tmpdir", ",", "\n", "export_confidence", "=", "True", ",", "\n", ")", "\n", "confidence_path", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "POSITIVE_MD5", "+", "\"_confidence.hdf5\"", ")", "\n", "with", "h5py", ".", "File", "(", "confidence_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "confidence", "=", "f", "[", "\"confidence\"", "]", "[", "(", ")", "]", "\n", "", "assert", "confidence", ".", "shape", "==", "(", "199", ",", ")", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "\n", "# export context", "\n", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "process_file", "(", "\n", "os", ".", "path", ".", "join", "(", "TEST_AUDIO_DIR", ",", "POSITIVE_MD5", "+", "\".wav\"", ")", ",", "\n", "output_dir", "=", "tmpdir", ",", "\n", "export_context", "=", "True", ",", "\n", ")", "\n", "context_path", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "POSITIVE_MD5", "+", "\"_context.hdf5\"", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "context_path", ")", "\n", "with", "h5py", ".", "File", "(", "context_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "confidence", "=", "f", "[", "\"context\"", "]", "[", "(", ")", "]", "\n", "", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "\n", "# export list of sensor faults", "\n", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "process_file", "(", "\n", "os", ".", "path", ".", "join", "(", "TEST_AUDIO_DIR", ",", "POSITIVE_MD5", "+", "\".wav\"", ")", ",", "\n", "output_dir", "=", "tmpdir", ",", "\n", "export_faults", "=", "True", ",", "\n", ")", "\n", "faultlist_path", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "POSITIVE_MD5", "+", "\"_faults.csv\"", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "faultlist_path", ")", "\n", "faultlist_df", "=", "pd", ".", "read_csv", "(", "faultlist_path", ")", "\n", "columns", "=", "faultlist_df", ".", "columns", "\n", "assert", "np", ".", "all", "(", "\n", "columns", "\n", "==", "np", ".", "array", "(", "[", "\"Start (hh:mm:ss)\"", ",", "\"Stop (hh:mm:ss)\"", ",", "\"Fault confidence (%)\"", "]", ")", "\n", ")", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "\n", "# export probabilities as JSON file", "\n", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "process_file", "(", "\n", "os", ".", "path", ".", "join", "(", "TEST_AUDIO_DIR", ",", "POSITIVE_MD5", "+", "\".wav\"", ")", ",", "\n", "output_dir", "=", "tmpdir", ",", "\n", "predict_proba", "=", "True", ",", "\n", ")", "\n", "json_path", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "POSITIVE_MD5", "+", "\"_proba.json\"", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "json_path", ")", "\n", "with", "open", "(", "json_path", ",", "\"r\"", ")", "as", "json_file", ":", "\n", "        ", "json_dict", "=", "json", ".", "load", "(", "json_file", ")", "\n", "", "assert", "\"events\"", "in", "json_dict", ".", "keys", "(", ")", "\n", "assert", "\"metadata\"", "in", "json_dict", ".", "keys", "(", ")", "\n", "assert", "\"taxonomy\"", "in", "json_dict", ".", "keys", "(", ")", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "\n", "# suffix", "\n", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "process_file", "(", "\n", "os", ".", "path", ".", "join", "(", "TEST_AUDIO_DIR", ",", "POSITIVE_MD5", "+", "\".wav\"", ")", ",", "\n", "output_dir", "=", "tmpdir", ",", "\n", "suffix", "=", "\"mysuffix\"", ",", "\n", ")", "\n", "csv_path", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "POSITIVE_MD5", "+", "\"_mysuffix_checklist.csv\"", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "csv_path", ")", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.tests.test_cli.test_get_file_list": [[28, 52], ["pytest.raises", "birdvoxdetect.cli.get_file_list", "birdvoxdetect.cli.get_file_list", "sorted", "birdvoxdetect.cli.get_file_list", "pytest.raises", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.cli.get_file_list", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.cli.get_file_list", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.cli.get_file_list"], ["def", "test_get_file_list", "(", ")", ":", "\n", "\n", "# test for invalid input (must be iterable, e.g. list)", "\n", "    ", "pytest", ".", "raises", "(", "ArgumentTypeError", ",", "get_file_list", ",", "POSITIVE_PATH", ")", "\n", "\n", "# test for valid list of file paths", "\n", "flist", "=", "get_file_list", "(", "[", "NEGATIVE_PATH", ",", "POSITIVE_PATH", "]", ")", "\n", "assert", "len", "(", "flist", ")", "==", "2", "\n", "assert", "flist", "[", "0", "]", "==", "NEGATIVE_PATH", "\n", "assert", "flist", "[", "1", "]", "==", "POSITIVE_PATH", "\n", "\n", "# test for valid folder", "\n", "flist", "=", "get_file_list", "(", "[", "TEST_AUDIO_DIR", "]", ")", "\n", "assert", "len", "(", "flist", ")", "==", "2", "\n", "flist", "=", "sorted", "(", "flist", ")", "\n", "assert", "flist", "[", "0", "]", "==", "POSITIVE_PATH", "\n", "assert", "flist", "[", "1", "]", "==", "NEGATIVE_PATH", "\n", "\n", "# combine list of files and folders", "\n", "flist", "=", "get_file_list", "(", "[", "TEST_AUDIO_DIR", ",", "POSITIVE_PATH", "]", ")", "\n", "assert", "len", "(", "flist", ")", "==", "3", "\n", "\n", "# nonexistent path", "\n", "pytest", ".", "raises", "(", "BirdVoxDetectError", ",", "get_file_list", ",", "[", "\"/fake/path/to/file\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.tests.test_cli.test_parse_args": [[54, 109], ["birdvoxdetect.cli.parse_args", "birdvoxdetect.cli.parse_args", "pytest.raises", "pytest.raises"], "function", ["home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.cli.parse_args", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.cli.parse_args"], ["", "def", "test_parse_args", "(", ")", ":", "\n", "\n", "# test default values", "\n", "    ", "args", "=", "[", "POSITIVE_PATH", "]", "\n", "args", "=", "parse_args", "(", "args", ")", "\n", "assert", "args", ".", "clip_duration", "==", "1.0", "\n", "assert", "args", ".", "export_clips", "==", "False", "\n", "assert", "args", ".", "export_confidence", "==", "False", "\n", "assert", "args", ".", "export_faults", "==", "False", "\n", "assert", "args", ".", "export_logger", "==", "False", "\n", "assert", "args", ".", "output_dir", "is", "None", "\n", "assert", "args", ".", "predict_proba", "==", "False", "\n", "assert", "args", ".", "quiet", "is", "False", "\n", "assert", "args", ".", "suffix", "==", "\"\"", "\n", "assert", "args", ".", "threshold", "==", "50.0", "\n", "assert", "args", ".", "verbose", "is", "False", "\n", "\n", "# test custom values", "\n", "args", "=", "[", "\n", "POSITIVE_PATH", ",", "\n", "\"-o\"", ",", "\n", "\"/output/dir\"", ",", "\n", "\"-c\"", ",", "\n", "\"-C\"", ",", "\n", "\"-f\"", ",", "\n", "\"-l\"", ",", "\n", "\"-t\"", ",", "\n", "\"60\"", ",", "\n", "\"-s\"", ",", "\n", "\"mysuffix\"", ",", "\n", "\"-d\"", ",", "\n", "\"0.5\"", ",", "\n", "\"-p\"", ",", "\n", "\"-q\"", ",", "\n", "]", "\n", "args", "=", "parse_args", "(", "args", ")", "\n", "assert", "args", ".", "clip_duration", "==", "0.5", "\n", "assert", "args", ".", "export_clips", "==", "True", "\n", "assert", "args", ".", "export_confidence", "==", "True", "\n", "assert", "args", ".", "export_faults", "==", "True", "\n", "assert", "args", ".", "export_logger", "==", "True", "\n", "assert", "args", ".", "output_dir", "==", "\"/output/dir\"", "\n", "assert", "args", ".", "predict_proba", "==", "True", "\n", "assert", "args", ".", "quiet", "is", "True", "\n", "assert", "args", ".", "suffix", "==", "\"mysuffix\"", "\n", "assert", "args", ".", "threshold", "==", "60.0", "\n", "\n", "# test clash between quiet and verbose", "\n", "args", "=", "[", "POSITIVE_PATH", ",", "\"-v\"", ",", "\"-q\"", "]", "\n", "pytest", ".", "raises", "(", "BirdVoxDetectError", ",", "parse_args", ",", "args", ")", "\n", "\n", "# test clash between absence of export_clips", "\n", "# and presence of clip duration", "\n", "args", "=", "[", "POSITIVE_PATH", ",", "\"-d\"", ",", "\"0.5\"", "]", "\n", "pytest", ".", "raises", "(", "BirdVoxDetectError", ",", "parse_args", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.tests.test_cli.test_positive_float": [[111, 127], ["birdvoxdetect.cli.positive_float", "birdvoxdetect.cli.positive_float", "type", "type", "pytest.raises"], "function", ["home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.cli.positive_float", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.cli.positive_float"], ["", "def", "test_positive_float", "(", ")", ":", "\n", "\n", "# test that returned value is float", "\n", "    ", "f", "=", "positive_float", "(", "5", ")", "\n", "assert", "f", "==", "5.0", "\n", "assert", "type", "(", "f", ")", "is", "float", "\n", "\n", "# test it works for valid strings", "\n", "f", "=", "positive_float", "(", "\"1.3\"", ")", "\n", "assert", "f", "==", "1.3", "\n", "assert", "type", "(", "f", ")", "is", "float", "\n", "\n", "# make sure error raised for all invalid values:", "\n", "invalid", "=", "[", "-", "5", ",", "-", "1.0", ",", "None", ",", "\"nan\"", "]", "\n", "for", "i", "in", "invalid", ":", "\n", "        ", "pytest", ".", "raises", "(", "ArgumentTypeError", ",", "positive_float", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.tests.test_cli.test_valid_threshold": [[129, 145], ["birdvoxdetect.cli.valid_threshold", "birdvoxdetect.cli.valid_threshold", "type", "type", "pytest.raises"], "function", ["home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.cli.valid_threshold", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.cli.valid_threshold"], ["", "", "def", "test_valid_threshold", "(", ")", ":", "\n", "\n", "# test that returned value is float", "\n", "    ", "f", "=", "valid_threshold", "(", "60", ")", "\n", "assert", "f", "==", "60.0", "\n", "assert", "type", "(", "f", ")", "is", "float", "\n", "\n", "# test it works for valid strings", "\n", "f", "=", "valid_threshold", "(", "\"70.3\"", ")", "\n", "assert", "f", "==", "70.3", "\n", "assert", "type", "(", "f", ")", "is", "float", "\n", "\n", "# make sure error raised for all invalid values:", "\n", "invalid", "=", "[", "-", "5", ",", "-", "1.0", ",", "-", "0.01", ",", "None", ",", "100.01", ",", "\"nan\"", "]", "\n", "for", "i", "in", "invalid", ":", "\n", "        ", "pytest", ".", "raises", "(", "ArgumentTypeError", ",", "valid_threshold", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.tests.test_cli.test_run": [[147, 179], ["shutil.rmtree", "capsys.readouterr", "tempfile.mkdtemp", "birdvoxdetect.cli.run", "os.path.join", "os.path.exists", "shutil.rmtree", "pytest.raises", "pytest.raises", "tempfile.mkdtemp", "birdvoxdetect.cli.run", "str"], "function", ["home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.cli.run", "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.cli.run"], ["", "", "def", "test_run", "(", "capsys", ")", ":", "\n", "# test invalid input", "\n", "    ", "invalid_inputs", "=", "[", "None", ",", "5", ",", "1.0", "]", "\n", "for", "i", "in", "invalid_inputs", ":", "\n", "        ", "pytest", ".", "raises", "(", "BirdVoxDetectError", ",", "run", ",", "i", ")", "\n", "\n", "# test empty input folder", "\n", "", "with", "pytest", ".", "raises", "(", "SystemExit", ")", "as", "pytest_wrapped_e", ":", "\n", "        ", "tempdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "run", "(", "[", "tempdir", "]", ")", "\n", "", "shutil", ".", "rmtree", "(", "tempdir", ")", "\n", "\n", "# make sure it exited", "\n", "assert", "pytest_wrapped_e", ".", "type", "==", "SystemExit", "\n", "assert", "pytest_wrapped_e", ".", "value", ".", "code", "==", "-", "1", "\n", "\n", "# make sure it printed a message", "\n", "captured", "=", "capsys", ".", "readouterr", "(", ")", "\n", "expected_message", "=", "\"birdvoxdetect: No WAV files found in {}. Aborting.\\n\"", ".", "format", "(", "\n", "str", "(", "[", "tempdir", "]", ")", "\n", ")", "\n", "assert", "captured", ".", "out", "==", "expected_message", "\n", "\n", "# test string input", "\n", "string_input", "=", "POSITIVE_PATH", "\n", "tempdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "run", "(", "string_input", ",", "output_dir", "=", "tempdir", ")", "\n", "csv_path", "=", "os", ".", "path", ".", "join", "(", "\n", "tempdir", ",", "\"fd79e55d-d3a3-4083-aba1-4f00b545c3d6_checklist.csv\"", "\n", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "csv_path", ")", "\n", "shutil", ".", "rmtree", "(", "tempdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.tests.test_cli.test_main": [[181, 184], ["birdvoxdetect.cli.main"], "function", ["home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.birdvoxdetect.cli.main"], ["", "def", "test_main", "(", ")", ":", "\n", "# No arguments", "\n", "    ", "assert", "main", "(", ")", "==", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.BirdVox_birdvoxdetect.tests.test_cli.test_script_main": [[186, 208], ["tempfile.mkdtemp", "os.path.join", "os.path.isfile", "shutil.rmtree", "patch", "patch"], "function", ["None"], ["", "def", "test_script_main", "(", "capsys", ")", ":", "\n", "# Duplicate regression test from test_run just to hit coverage", "\n", "    ", "tempdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "with", "patch", "(", "\n", "\"sys.argv\"", ",", "\n", "[", "\n", "\"birdvoxdetect\"", ",", "POSITIVE_PATH", ",", "\n", "\"--output-dir\"", ",", "tempdir", ",", "\n", "\"--suffix\"", ",", "\"cli\"", ",", "\n", "\"--export-clips\"", "]", ")", ":", "\n", "        ", "import", "birdvoxdetect", ".", "__main__", "\n", "\n", "# Check output file created", "\n", "", "outfile", "=", "os", ".", "path", ".", "join", "(", "\n", "tempdir", ",", "\"fd79e55d-d3a3-4083-aba1-4f00b545c3d6_cli_checklist.csv\"", "\n", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "outfile", ")", "\n", "shutil", ".", "rmtree", "(", "tempdir", ")", "\n", "\n", "# Print version number", "\n", "with", "patch", "(", "\"sys.argv\"", ",", "[", "\"birdvoxdetect\"", ",", "\"--version\"", "]", ")", ":", "\n", "        ", "import", "birdvoxdetect", ".", "__main__", "\n", "", "", ""]]}