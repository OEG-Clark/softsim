{"home.repos.pwc.inspect_result.rl-vig_libfewshot.core.trainer.Trainer.__init__": [[38, 64], ["trainer.Trainer._init_device", "trainer.Trainer._init_files", "core.utils.TensorboardWriter", "trainer.Trainer._init_meter", "logging.getLogger", "trainer.Trainer.logger.info", "trainer.Trainer._init_model", "trainer.Trainer._init_dataloader", "trainer.Trainer._init_optim"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.core.test.Test._init_device", "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.test.Test._init_files", "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.test.Test._init_meter", "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.test.Test._init_model", "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.test.Test._init_dataloader", "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.trainer.Trainer._init_optim"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "device", ",", "self", ".", "list_ids", "=", "self", ".", "_init_device", "(", "config", ")", "\n", "(", "\n", "self", ".", "result_path", ",", "\n", "self", ".", "log_path", ",", "\n", "self", ".", "checkpoints_path", ",", "\n", "self", ".", "viz_path", ",", "\n", ")", "=", "self", ".", "_init_files", "(", "config", ")", "\n", "self", ".", "writer", "=", "TensorboardWriter", "(", "self", ".", "viz_path", ")", "\n", "self", ".", "train_meter", ",", "self", ".", "val_meter", ",", "self", ".", "test_meter", "=", "self", ".", "_init_meter", "(", ")", "\n", "self", ".", "logger", "=", "getLogger", "(", "__name__", ")", "\n", "self", ".", "logger", ".", "info", "(", "config", ")", "\n", "self", ".", "model", ",", "self", ".", "model_type", "=", "self", ".", "_init_model", "(", "config", ")", "\n", "(", "\n", "self", ".", "train_loader", ",", "\n", "self", ".", "val_loader", ",", "\n", "self", ".", "test_loader", ",", "\n", ")", "=", "self", ".", "_init_dataloader", "(", "config", ")", "\n", "(", "\n", "self", ".", "optimizer", ",", "\n", "self", ".", "scheduler", ",", "\n", "self", ".", "from_epoch", ",", "\n", "self", ".", "best_val_acc", ",", "\n", "self", ".", "best_test_acc", ",", "\n", ")", "=", "self", ".", "_init_optim", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.trainer.Trainer.train_loop": [[65, 100], ["time.time.time", "range", "trainer.Trainer.logger.info", "trainer.Trainer.logger.info", "trainer.Trainer.logger.info", "trainer.Trainer._train", "trainer.Trainer.logger.info", "trainer.Trainer.logger.info", "trainer.Trainer._validate", "trainer.Trainer.logger.info", "trainer.Trainer.logger.info", "trainer.Trainer._validate", "trainer.Trainer.logger.info", "trainer.Trainer._cal_time_scheduler", "trainer.Trainer.logger.info", "trainer.Trainer._save_model", "trainer.Trainer.scheduler.step", "trainer.Trainer._save_model", "trainer.Trainer._save_model", "str", "datetime.timedelta", "int", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.core.trainer.Trainer._train", "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.test.Test._validate", "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.test.Test._validate", "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.trainer.Trainer._cal_time_scheduler", "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.trainer.Trainer._save_model", "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.trainer.Trainer._save_model", "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.trainer.Trainer._save_model"], ["", "def", "train_loop", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        The normal train loop: train-val-test and save model when val-acc increases.\n        \"\"\"", "\n", "experiment_begin", "=", "time", "(", ")", "\n", "for", "epoch_idx", "in", "range", "(", "self", ".", "from_epoch", "+", "1", ",", "self", ".", "config", "[", "\"epoch\"", "]", ")", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"============ Train on the train set ============\"", ")", "\n", "train_acc", "=", "self", ".", "_train", "(", "epoch_idx", ")", "\n", "self", ".", "logger", ".", "info", "(", "\" * Acc@1 {:.3f} \"", ".", "format", "(", "train_acc", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"============ Validation on the val set ============\"", ")", "\n", "val_acc", "=", "self", ".", "_validate", "(", "epoch_idx", ",", "is_test", "=", "False", ")", "\n", "self", ".", "logger", ".", "info", "(", "\" * Acc@1 {:.3f} Best acc {:.3f}\"", ".", "format", "(", "val_acc", ",", "self", ".", "best_val_acc", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"============ Testing on the test set ============\"", ")", "\n", "test_acc", "=", "self", ".", "_validate", "(", "epoch_idx", ",", "is_test", "=", "True", ")", "\n", "self", ".", "logger", ".", "info", "(", "\" * Acc@1 {:.3f} Best acc {:.3f}\"", ".", "format", "(", "test_acc", ",", "self", ".", "best_test_acc", ")", ")", "\n", "time_scheduler", "=", "self", ".", "_cal_time_scheduler", "(", "experiment_begin", ",", "epoch_idx", ")", "\n", "self", ".", "logger", ".", "info", "(", "\" * Time: {}\"", ".", "format", "(", "time_scheduler", ")", ")", "\n", "\n", "if", "val_acc", ">", "self", ".", "best_val_acc", ":", "\n", "                ", "self", ".", "best_val_acc", "=", "val_acc", "\n", "self", ".", "best_test_acc", "=", "test_acc", "\n", "self", ".", "_save_model", "(", "epoch_idx", ",", "SaveType", ".", "BEST", ")", "\n", "\n", "", "if", "epoch_idx", "!=", "0", "and", "epoch_idx", "%", "self", ".", "config", "[", "\"save_interval\"", "]", "==", "0", ":", "\n", "                ", "self", ".", "_save_model", "(", "epoch_idx", ",", "SaveType", ".", "NORMAL", ")", "\n", "\n", "", "self", ".", "_save_model", "(", "epoch_idx", ",", "SaveType", ".", "LAST", ")", "\n", "\n", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "\n", "\"End of experiment, took {}\"", ".", "format", "(", "\n", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "time", "(", ")", "-", "experiment_begin", ")", ")", ")", "\n", ")", "\n", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Result DIR: {}\"", ".", "format", "(", "self", ".", "result_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.trainer.Trainer._train": [[101, 184], ["trainer.Trainer.model.train", "meter.reset", "time.time.time", "core.utils.data_prefetcher", "core.utils.data_prefetcher.next", "meter.avg", "trainer.Trainer.writer.set_step", "meter.update", "time.time.time", "trainer.Trainer.model.set_forward_loss", "trainer.Trainer.optimizer.zero_grad", "loss.backward", "trainer.Trainer.optimizer.step", "meter.update", "meter.update", "meter.update", "meter.update", "time.time.time", "core.utils.data_prefetcher.next", "enumerate", "loss.item", "trainer.Trainer.logger.info", "trainer.Trainer.model.named_parameters", "time.time.time", "time.time.time", "time.time.time", "len", "len", "meter.last", "meter.avg", "meter.last", "meter.avg", "meter.last", "meter.avg", "meter.last", "meter.avg", "meter.last", "meter.avg", "len", "name.replace", "trainer.Trainer.writer.add_histogram"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.train", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.data_prefetcher.next", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.avg", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.visualizer.TensorboardWriter.set_step", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline.Baseline.set_forward_loss", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.data_prefetcher.next", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.last", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.avg", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.last", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.avg", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.last", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.avg", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.last", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.avg", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.last", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.avg"], ["", "def", "_train", "(", "self", ",", "epoch_idx", ")", ":", "\n", "        ", "\"\"\"\n        The train stage.\n\n        Args:\n            epoch_idx (int): Epoch index.\n\n        Returns:\n            float: Acc.\n        \"\"\"", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "meter", "=", "self", ".", "train_meter", "\n", "meter", ".", "reset", "(", ")", "\n", "episode_size", "=", "1", "if", "self", ".", "model_type", "==", "ModelType", ".", "FINETUNING", "else", "self", ".", "config", "[", "\"episode_size\"", "]", "\n", "\n", "end", "=", "time", "(", ")", "\n", "\n", "prefetcher", "=", "data_prefetcher", "(", "self", ".", "train_loader", ")", "\n", "batch", "=", "prefetcher", ".", "next", "(", ")", "\n", "batch_idx", "=", "-", "1", "\n", "while", "batch", "is", "not", "None", ":", "\n", "            ", "batch_idx", "+=", "1", "\n", "self", ".", "writer", ".", "set_step", "(", "epoch_idx", "*", "len", "(", "self", ".", "train_loader", ")", "+", "batch_idx", "*", "episode_size", ")", "\n", "\n", "# visualize the weight", "\n", "if", "self", ".", "config", "[", "\"log_paramerter\"", "]", ":", "\n", "                ", "for", "i", ",", "(", "name", ",", "param", ")", "in", "enumerate", "(", "self", ".", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "                    ", "if", "\"bn\"", "not", "in", "name", ":", "\n", "                        ", "save_name", "=", "name", ".", "replace", "(", "\".\"", ",", "\"/\"", ")", "\n", "self", ".", "writer", ".", "add_histogram", "(", "save_name", ",", "param", ")", "\n", "\n", "", "", "", "meter", ".", "update", "(", "\"data_time\"", ",", "time", "(", ")", "-", "end", ")", "\n", "\n", "# calculate the output", "\n", "calc_begin", "=", "time", "(", ")", "\n", "output", ",", "acc", ",", "loss", "=", "self", ".", "model", ".", "set_forward_loss", "(", "batch", ")", "\n", "\n", "# compute gradients", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "meter", ".", "update", "(", "\"calc_time\"", ",", "time", "(", ")", "-", "calc_begin", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "meter", ".", "update", "(", "\"loss\"", ",", "loss", ".", "item", "(", ")", ")", "\n", "meter", ".", "update", "(", "\"acc1\"", ",", "acc", ")", "\n", "\n", "# measure elapsed time", "\n", "meter", ".", "update", "(", "\"batch_time\"", ",", "time", "(", ")", "-", "end", ")", "\n", "\n", "# print the intermediate results", "\n", "if", "(", "batch_idx", "!=", "0", "and", "(", "batch_idx", "+", "1", ")", "%", "self", ".", "config", "[", "\"log_interval\"", "]", "==", "0", ")", "or", "(", "\n", "batch_idx", "+", "1", "\n", ")", "*", "episode_size", ">=", "len", "(", "self", ".", "train_loader", ")", ":", "\n", "                ", "info_str", "=", "(", "\n", "\"Epoch-({}): [{}/{}]\\t\"", "\n", "\"Time {:.3f} ({:.3f})\\t\"", "\n", "\"Calc {:.3f} ({:.3f})\\t\"", "\n", "\"Data {:.3f} ({:.3f})\\t\"", "\n", "\"Loss {:.3f} ({:.3f})\\t\"", "\n", "\"Acc@1 {:.3f} ({:.3f})\"", ".", "format", "(", "\n", "epoch_idx", ",", "\n", "(", "batch_idx", "+", "1", ")", "*", "episode_size", ",", "\n", "len", "(", "self", ".", "train_loader", ")", ",", "\n", "meter", ".", "last", "(", "\"batch_time\"", ")", ",", "\n", "meter", ".", "avg", "(", "\"batch_time\"", ")", ",", "\n", "meter", ".", "last", "(", "\"calc_time\"", ")", ",", "\n", "meter", ".", "avg", "(", "\"calc_time\"", ")", ",", "\n", "meter", ".", "last", "(", "\"data_time\"", ")", ",", "\n", "meter", ".", "avg", "(", "\"data_time\"", ")", ",", "\n", "meter", ".", "last", "(", "\"loss\"", ")", ",", "\n", "meter", ".", "avg", "(", "\"loss\"", ")", ",", "\n", "meter", ".", "last", "(", "\"acc1\"", ")", ",", "\n", "meter", ".", "avg", "(", "\"acc1\"", ")", ",", "\n", ")", "\n", ")", "\n", "self", ".", "logger", ".", "info", "(", "info_str", ")", "\n", "", "end", "=", "time", "(", ")", "\n", "\n", "batch", "=", "prefetcher", ".", "next", "(", ")", "\n", "\n", "", "return", "meter", ".", "avg", "(", "\"acc1\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.trainer.Trainer._validate": [[185, 259], ["trainer.Trainer.model.eval", "trainer.Trainer.model.reverse_setting_info", "meter.reset", "time.time.time", "trainer.Trainer.model.reverse_setting_info", "meter.avg", "torch.set_grad_enabled", "core.utils.data_prefetcher", "core.utils.data_prefetcher.next", "trainer.Trainer.writer.set_step", "meter.update", "time.time.time", "trainer.Trainer.model.set_forward", "meter.update", "meter.update", "meter.update", "time.time.time", "core.utils.data_prefetcher.next", "int", "trainer.Trainer.logger.info", "time.time.time", "time.time.time", "time.time.time", "len", "len", "meter.last", "meter.avg", "meter.last", "meter.avg", "meter.last", "meter.avg", "meter.last", "meter.avg", "len"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.eval", "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.reverse_setting_info", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.reverse_setting_info", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.avg", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.data_prefetcher.next", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.visualizer.TensorboardWriter.set_step", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline.Baseline.set_forward", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.data_prefetcher.next", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.last", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.avg", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.last", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.avg", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.last", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.avg", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.last", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.avg"], ["", "def", "_validate", "(", "self", ",", "epoch_idx", ",", "is_test", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        The val/test stage.\n\n        Args:\n            epoch_idx (int): Epoch index.\n\n        Returns:\n            float: Acc.\n        \"\"\"", "\n", "# switch to evaluate mode", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "model", ".", "reverse_setting_info", "(", ")", "\n", "meter", "=", "self", ".", "test_meter", "if", "is_test", "else", "self", ".", "val_meter", "\n", "meter", ".", "reset", "(", ")", "\n", "episode_size", "=", "self", ".", "config", "[", "\"episode_size\"", "]", "\n", "\n", "end", "=", "time", "(", ")", "\n", "enable_grad", "=", "self", ".", "model_type", "!=", "ModelType", ".", "METRIC", "\n", "with", "torch", ".", "set_grad_enabled", "(", "enable_grad", ")", ":", "\n", "            ", "loader", "=", "self", ".", "test_loader", "if", "is_test", "else", "self", ".", "val_loader", "\n", "prefetcher", "=", "data_prefetcher", "(", "loader", ")", "\n", "batch", "=", "prefetcher", ".", "next", "(", ")", "\n", "batch_idx", "=", "-", "1", "\n", "while", "batch", "is", "not", "None", ":", "\n", "                ", "batch_idx", "+=", "1", "\n", "self", ".", "writer", ".", "set_step", "(", "\n", "int", "(", "\n", "(", "epoch_idx", "*", "len", "(", "loader", ")", "+", "batch_idx", "*", "episode_size", ")", "\n", "*", "self", ".", "config", "[", "\"tb_scale\"", "]", "\n", ")", "\n", ")", "\n", "\n", "meter", ".", "update", "(", "\"data_time\"", ",", "time", "(", ")", "-", "end", ")", "\n", "\n", "# calculate the output", "\n", "calc_begin", "=", "time", "(", ")", "\n", "output", ",", "acc", "=", "self", ".", "model", ".", "set_forward", "(", "batch", ")", "\n", "meter", ".", "update", "(", "\"calc_time\"", ",", "time", "(", ")", "-", "calc_begin", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "meter", ".", "update", "(", "\"acc1\"", ",", "acc", ")", "\n", "\n", "# measure elapsed time", "\n", "meter", ".", "update", "(", "\"batch_time\"", ",", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "(", "batch_idx", "!=", "0", "and", "(", "batch_idx", "+", "1", ")", "%", "self", ".", "config", "[", "\"log_interval\"", "]", "==", "0", ")", "or", "(", "\n", "batch_idx", "+", "1", "\n", ")", "*", "episode_size", ">=", "len", "(", "loader", ")", ":", "\n", "                    ", "info_str", "=", "(", "\n", "\"Epoch-({}): [{}/{}]\\t\"", "\n", "\"Time {:.3f} ({:.3f})\\t\"", "\n", "\"Calc {:.3f} ({:.3f})\\t\"", "\n", "\"Data {:.3f} ({:.3f})\\t\"", "\n", "\"Acc@1 {:.3f} ({:.3f})\"", ".", "format", "(", "\n", "epoch_idx", ",", "\n", "(", "batch_idx", "+", "1", ")", "*", "episode_size", ",", "\n", "len", "(", "loader", ")", ",", "\n", "meter", ".", "last", "(", "\"batch_time\"", ")", ",", "\n", "meter", ".", "avg", "(", "\"batch_time\"", ")", ",", "\n", "meter", ".", "last", "(", "\"calc_time\"", ")", ",", "\n", "meter", ".", "avg", "(", "\"calc_time\"", ")", ",", "\n", "meter", ".", "last", "(", "\"data_time\"", ")", ",", "\n", "meter", ".", "avg", "(", "\"data_time\"", ")", ",", "\n", "meter", ".", "last", "(", "\"acc1\"", ")", ",", "\n", "meter", ".", "avg", "(", "\"acc1\"", ")", ",", "\n", ")", "\n", ")", "\n", "self", ".", "logger", ".", "info", "(", "info_str", ")", "\n", "", "end", "=", "time", "(", ")", "\n", "\n", "batch", "=", "prefetcher", ".", "next", "(", ")", "\n", "", "", "self", ".", "model", ".", "reverse_setting_info", "(", ")", "\n", "return", "meter", ".", "avg", "(", "\"acc1\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.trainer.Trainer._init_files": [[260, 304], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "core.utils.create_dirs", "core.utils.init_logger", "open", "fout.write", "config[].split", "os.path.join", "yaml.dump", "core.utils.get_local_time"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.create_dirs", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.logger.init_logger", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.get_local_time"], ["", "def", "_init_files", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        Init result_path(checkpoints_path, log_path, viz_path) from the config dict.\n\n        Args:\n            config (dict): Parsed config file.\n\n        Returns:\n            tuple: A tuple of (result_path, log_path, checkpoints_path, viz_path).\n        \"\"\"", "\n", "# you should ensure that data_root name contains its true name", "\n", "base_dir", "=", "\"{}-{}-{}-{}-{}\"", ".", "format", "(", "\n", "config", "[", "\"classifier\"", "]", "[", "\"name\"", "]", ",", "\n", "config", "[", "\"data_root\"", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ",", "\n", "config", "[", "\"backbone\"", "]", "[", "\"name\"", "]", ",", "\n", "config", "[", "\"way_num\"", "]", ",", "\n", "config", "[", "\"shot_num\"", "]", ",", "\n", ")", "\n", "result_dir", "=", "(", "\n", "base_dir", "\n", "+", "\"{}-{}\"", ".", "format", "(", "\n", "(", "\"-\"", "+", "config", "[", "\"tag\"", "]", ")", "if", "config", "[", "\"tag\"", "]", "is", "not", "None", "else", "\"\"", ",", "get_local_time", "(", ")", "\n", ")", "\n", "if", "config", "[", "\"log_name\"", "]", "is", "None", "\n", "else", "config", "[", "\"log_name\"", "]", "\n", ")", "\n", "result_path", "=", "os", ".", "path", ".", "join", "(", "config", "[", "\"result_root\"", "]", ",", "result_dir", ")", "\n", "# self.logger.log(\"Result DIR: \" + result_path)", "\n", "checkpoints_path", "=", "os", ".", "path", ".", "join", "(", "result_path", ",", "\"checkpoints\"", ")", "\n", "log_path", "=", "os", ".", "path", ".", "join", "(", "result_path", ",", "\"log_files\"", ")", "\n", "viz_path", "=", "os", ".", "path", ".", "join", "(", "log_path", ",", "\"tfboard_files\"", ")", "\n", "create_dirs", "(", "[", "result_path", ",", "log_path", ",", "checkpoints_path", ",", "viz_path", "]", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "result_path", ",", "\"config.yaml\"", ")", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fout", ":", "\n", "            ", "fout", ".", "write", "(", "yaml", ".", "dump", "(", "config", ")", ")", "\n", "\n", "", "init_logger", "(", "\n", "config", "[", "\"log_level\"", "]", ",", "\n", "log_path", ",", "\n", "config", "[", "\"classifier\"", "]", "[", "\"name\"", "]", ",", "\n", "config", "[", "\"backbone\"", "]", "[", "\"name\"", "]", ",", "\n", ")", "\n", "\n", "return", "result_path", ",", "log_path", ",", "checkpoints_path", ",", "viz_path", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.trainer.Trainer._init_dataloader": [[305, 320], ["core.data.get_dataloader", "core.data.get_dataloader", "core.data.get_dataloader"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.data.dataloader.get_dataloader", "home.repos.pwc.inspect_result.rl-vig_libfewshot.data.dataloader.get_dataloader", "home.repos.pwc.inspect_result.rl-vig_libfewshot.data.dataloader.get_dataloader"], ["", "def", "_init_dataloader", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        Init dataloaders.(train_loader, val_loader and test_loader)\n\n        Args:\n            config (dict): Parsed config file.\n\n        Returns:\n            tuple: A tuple of (train_loader, val_loader and test_loader).\n        \"\"\"", "\n", "train_loader", "=", "get_dataloader", "(", "config", ",", "\"train\"", ",", "self", ".", "model_type", ")", "\n", "val_loader", "=", "get_dataloader", "(", "config", ",", "\"val\"", ",", "self", ".", "model_type", ")", "\n", "test_loader", "=", "get_dataloader", "(", "config", ",", "\"test\"", ",", "self", ".", "model_type", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.trainer.Trainer._init_model": [[321, 388], ["core.utils.get_instance", "core.utils.get_instance", "trainer.Trainer.logger.info", "trainer.Trainer.logger.info", "model.to.to.to", "trainer.Trainer.logger.info", "torch.load", "model.to.to.emb_func.load_state_dict", "os.path.join", "trainer.Trainer.logger.info", "model.to.to.load_state_dict", "len", "core.utils.count_parameters", "len", "trainer.Trainer.logger.warning", "len", "trainer.Trainer.logger.warning", "torch.load", "len", "trainer.Trainer.logger.warning", "len", "trainer.Trainer.logger.warning", "hasattr", "setattr", "torch.nn.DataParallel", "getattr"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.get_instance", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.get_instance", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.count_parameters"], ["", "def", "_init_model", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        Init model(backbone+classifier) from the config dict and load the pretrained params or resume from a\n        checkpoint, then parallel if necessary .\n\n        Args:\n            config (dict): Parsed config file.\n\n        Returns:\n            tuple: A tuple of the model and model's type.\n        \"\"\"", "\n", "emb_func", "=", "get_instance", "(", "arch", ",", "\"backbone\"", ",", "config", ")", "\n", "model_kwargs", "=", "{", "\n", "\"way_num\"", ":", "config", "[", "\"way_num\"", "]", ",", "\n", "\"shot_num\"", ":", "config", "[", "\"shot_num\"", "]", "*", "config", "[", "\"augment_times\"", "]", ",", "\n", "\"query_num\"", ":", "config", "[", "\"query_num\"", "]", ",", "\n", "\"test_way\"", ":", "config", "[", "\"test_way\"", "]", ",", "\n", "\"test_shot\"", ":", "config", "[", "\"test_shot\"", "]", "*", "config", "[", "\"augment_times\"", "]", ",", "\n", "\"test_query\"", ":", "config", "[", "\"test_query\"", "]", ",", "\n", "\"emb_func\"", ":", "emb_func", ",", "\n", "\"device\"", ":", "self", ".", "device", ",", "\n", "}", "\n", "model", "=", "get_instance", "(", "arch", ",", "\"classifier\"", ",", "config", ",", "**", "model_kwargs", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "model", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Trainable params in the model: {}\"", ".", "format", "(", "count_parameters", "(", "model", ")", ")", ")", "\n", "# FIXME: May be inaccurate", "\n", "\n", "if", "self", ".", "config", "[", "\"pretrain_path\"", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\n", "\"load pretraining emb_func from {}\"", ".", "format", "(", "self", ".", "config", "[", "\"pretrain_path\"", "]", ")", "\n", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "self", ".", "config", "[", "\"pretrain_path\"", "]", ",", "map_location", "=", "\"cpu\"", ")", "\n", "msg", "=", "model", ".", "emb_func", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "if", "len", "(", "msg", ".", "missing_keys", ")", "!=", "0", ":", "\n", "                ", "self", ".", "logger", ".", "warning", "(", "\"Missing keys:{}\"", ".", "format", "(", "msg", ".", "missing_keys", ")", ")", "\n", "", "if", "len", "(", "msg", ".", "unexpected_keys", ")", "!=", "0", ":", "\n", "                ", "self", ".", "logger", ".", "warning", "(", "\"Unexpected keys:{}\"", ".", "format", "(", "msg", ".", "unexpected_keys", ")", ")", "\n", "\n", "", "", "if", "self", ".", "config", "[", "\"resume\"", "]", ":", "\n", "            ", "resume_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", "[", "\"resume_path\"", "]", ",", "\"checkpoints\"", ",", "\"model_last.pth\"", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"load the resume model checkpoints dict from {}.\"", ".", "format", "(", "resume_path", ")", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "resume_path", ",", "map_location", "=", "\"cpu\"", ")", "[", "\"model\"", "]", "\n", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "if", "len", "(", "msg", ".", "missing_keys", ")", "!=", "0", ":", "\n", "                ", "self", ".", "logger", ".", "warning", "(", "\"missing keys:{}\"", ".", "format", "(", "msg", ".", "missing_keys", ")", ")", "\n", "", "if", "len", "(", "msg", ".", "unexpected_keys", ")", "!=", "0", ":", "\n", "                ", "self", ".", "logger", ".", "warning", "(", "\"unexpected keys:{}\"", ".", "format", "(", "msg", ".", "unexpected_keys", ")", ")", "\n", "\n", "", "", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "len", "(", "self", ".", "list_ids", ")", ">", "1", ":", "\n", "            ", "parallel_list", "=", "self", ".", "config", "[", "\"parallel_part\"", "]", "\n", "if", "parallel_list", "is", "not", "None", ":", "\n", "                ", "for", "parallel_part", "in", "parallel_list", ":", "\n", "                    ", "if", "hasattr", "(", "model", ",", "parallel_part", ")", ":", "\n", "                        ", "setattr", "(", "\n", "model", ",", "\n", "parallel_part", ",", "\n", "nn", ".", "DataParallel", "(", "\n", "getattr", "(", "model", ",", "parallel_part", ")", ",", "\n", "device_ids", "=", "self", ".", "list_ids", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "", "", "", "", "return", "model", ",", "model", ".", "model_type", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.trainer.Trainer._init_optim": [[389, 447], ["params_dict_list.append", "core.utils.get_instance", "core.utils.get_instance", "trainer.Trainer.logger.info", "float", "float", "[].items", "os.path.join", "trainer.Trainer.logger.info", "torch.load", "core.utils.get_instance.load_state_dict", "core.utils.get_instance.load_state_dict", "trainer.Trainer.logger.info", "getattr", "params_idx.extend", "filter", "list", "getattr.parameters", "isinstance", "params_dict_list.append", "trainer.Trainer.model.parameters", "map", "getattr.parameters", "param_dict.update", "isinstance", "getattr.parameters", "param_dict.update", "Exception", "id"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.get_instance", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.get_instance", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLBaseLearner.parameters", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLBaseLearner.parameters", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLBaseLearner.parameters", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLBaseLearner.parameters", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update"], ["", "def", "_init_optim", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        Init the optimizers and scheduler from config, if necessary, load the state dict from a checkpoint.\n\n        Args:\n            config (dict): Parsed config file.\n\n        Returns:\n            tuple: A tuple of optimizer, scheduler and epoch_index.\n        \"\"\"", "\n", "params_idx", "=", "[", "]", "\n", "params_dict_list", "=", "[", "]", "\n", "if", "config", "[", "\"optimizer\"", "]", "[", "\"other\"", "]", "is", "not", "None", ":", "\n", "            ", "for", "key", ",", "value", "in", "config", "[", "\"optimizer\"", "]", "[", "\"other\"", "]", ".", "items", "(", ")", ":", "\n", "                ", "sub_model", "=", "getattr", "(", "self", ".", "model", ",", "key", ")", "\n", "params_idx", ".", "extend", "(", "list", "(", "map", "(", "id", ",", "sub_model", ".", "parameters", "(", ")", ")", ")", ")", "\n", "if", "value", "is", "None", ":", "\n", "                    ", "for", "p", "in", "sub_model", ".", "parameters", "(", ")", ":", "\n", "                        ", "p", ".", "requires_grad", "=", "False", "\n", "", "", "else", ":", "\n", "                    ", "param_dict", "=", "{", "\"params\"", ":", "sub_model", ".", "parameters", "(", ")", "}", "\n", "if", "isinstance", "(", "value", ",", "float", ")", ":", "\n", "                        ", "param_dict", ".", "update", "(", "{", "\"lr\"", ":", "value", "}", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                        ", "param_dict", ".", "update", "(", "value", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "Exception", "(", "\"Wrong config in optimizer.other\"", ")", "\n", "", "params_dict_list", ".", "append", "(", "param_dict", ")", "\n", "\n", "", "", "", "params_dict_list", ".", "append", "(", "\n", "{", "\"params\"", ":", "filter", "(", "lambda", "p", ":", "id", "(", "p", ")", "not", "in", "params_idx", ",", "self", ".", "model", ".", "parameters", "(", ")", ")", "}", "\n", ")", "\n", "optimizer", "=", "get_instance", "(", "torch", ".", "optim", ",", "\"optimizer\"", ",", "config", ",", "params", "=", "params_dict_list", ")", "\n", "scheduler", "=", "get_instance", "(", "\n", "torch", ".", "optim", ".", "lr_scheduler", ",", "\"lr_scheduler\"", ",", "config", ",", "optimizer", "=", "optimizer", "\n", ")", "\n", "self", ".", "logger", ".", "info", "(", "optimizer", ")", "\n", "from_epoch", "=", "-", "1", "\n", "best_val_acc", "=", "float", "(", "\"-inf\"", ")", "\n", "best_test_acc", "=", "float", "(", "\"-inf\"", ")", "\n", "if", "self", ".", "config", "[", "\"resume\"", "]", ":", "\n", "            ", "resume_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", "[", "\"resume_path\"", "]", ",", "\"checkpoints\"", ",", "\"model_last.pth\"", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "\"load the optimizer, lr_scheduler, epoch, best_val_acc and best_test_acc checkpoints dict from {}.\"", ".", "format", "(", "\n", "resume_path", "\n", ")", "\n", ")", "\n", "all_state_dict", "=", "torch", ".", "load", "(", "resume_path", ",", "map_location", "=", "\"cpu\"", ")", "\n", "state_dict", "=", "all_state_dict", "[", "\"optimizer\"", "]", "\n", "optimizer", ".", "load_state_dict", "(", "state_dict", ")", "\n", "state_dict", "=", "all_state_dict", "[", "\"lr_scheduler\"", "]", "\n", "scheduler", ".", "load_state_dict", "(", "state_dict", ")", "\n", "from_epoch", "=", "all_state_dict", "[", "\"epoch\"", "]", "\n", "best_val_acc", "=", "all_state_dict", "[", "\"best_val_acc\"", "]", "\n", "best_test_acc", "=", "all_state_dict", "[", "\"best_val_acc\"", "]", "\n", "self", ".", "logger", ".", "info", "(", "\"model resume from the epoch {}\"", ".", "format", "(", "from_epoch", ")", ")", "\n", "\n", "", "return", "optimizer", ",", "scheduler", ",", "from_epoch", ",", "best_val_acc", ",", "best_test_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.trainer.Trainer._init_device": [[448, 461], ["core.utils.init_seed", "core.utils.prepare_device"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.init_seed", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.prepare_device"], ["", "def", "_init_device", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        Init the devices from the config file.\n\n        Args:\n            config (dict): Parsed config file.\n\n        Returns:\n            tuple: A tuple of deviceand list_ids.\n        \"\"\"", "\n", "init_seed", "(", "config", "[", "\"seed\"", "]", ",", "config", "[", "\"deterministic\"", "]", ")", "\n", "device", ",", "list_ids", "=", "prepare_device", "(", "config", "[", "\"device_ids\"", "]", ",", "config", "[", "\"n_gpu\"", "]", ")", "\n", "return", "device", ",", "list_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.trainer.Trainer._save_model": [[462, 506], ["core.utils.save_model", "len", "hasattr", "core.utils.save_model", "trainer.Trainer.logger.warning", "getattr", "len"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.save_model", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.save_model"], ["", "def", "_save_model", "(", "self", ",", "epoch", ",", "save_type", "=", "SaveType", ".", "NORMAL", ")", ":", "\n", "        ", "\"\"\"\n        Save the model, optimizer, scheduler and epoch.\n\n        TODO\n\n        Args:\n            epoch (int): the current epoch index.\n            save_type (SaveType, optional): type of (last, best). Defaults to SaveType.NORMAL.\n        \"\"\"", "\n", "save_model", "(", "\n", "self", ".", "model", ",", "\n", "self", ".", "optimizer", ",", "\n", "self", ".", "scheduler", ",", "\n", "self", ".", "checkpoints_path", ",", "\n", "\"model\"", ",", "\n", "epoch", ",", "\n", "save_type", ",", "\n", "self", ".", "best_val_acc", ",", "\n", "self", ".", "best_test_acc", ",", "\n", "len", "(", "self", ".", "list_ids", ")", ">", "1", ",", "\n", ")", "\n", "\n", "if", "save_type", "!=", "SaveType", ".", "LAST", ":", "\n", "            ", "save_list", "=", "self", ".", "config", "[", "\"save_part\"", "]", "\n", "if", "save_list", "is", "not", "None", ":", "\n", "                ", "for", "save_part", "in", "save_list", ":", "\n", "                    ", "if", "hasattr", "(", "self", ".", "model", ",", "save_part", ")", ":", "\n", "                        ", "save_model", "(", "\n", "getattr", "(", "self", ".", "model", ",", "save_part", ")", ",", "\n", "self", ".", "optimizer", ",", "\n", "self", ".", "scheduler", ",", "\n", "self", ".", "checkpoints_path", ",", "\n", "save_part", ",", "\n", "epoch", ",", "\n", "save_type", ",", "\n", "self", ".", "best_val_acc", ",", "\n", "self", ".", "best_test_acc", ",", "\n", "len", "(", "self", ".", "list_ids", ")", ">", "1", ",", "\n", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "logger", ".", "warning", "(", "\n", "\"{} is not included in {}\"", ".", "format", "(", "\n", "save_part", ",", "self", ".", "config", "[", "\"classifier\"", "]", "[", "\"name\"", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.trainer.Trainer._init_meter": [[509, 533], ["core.utils.AverageMeter", "core.utils.AverageMeter", "core.utils.AverageMeter"], "methods", ["None"], ["", "", "", "", "", "def", "_init_meter", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Init the AverageMeter of train/val/test stage to cal avg... of batch_time, data_time,calc_time ,loss and acc1.\n\n        Returns:\n            tuple: A tuple of train_meter, val_meter, test_meter.\n        \"\"\"", "\n", "train_meter", "=", "AverageMeter", "(", "\n", "\"train\"", ",", "\n", "[", "\"batch_time\"", ",", "\"data_time\"", ",", "\"calc_time\"", ",", "\"loss\"", ",", "\"acc1\"", "]", ",", "\n", "self", ".", "writer", ",", "\n", ")", "\n", "val_meter", "=", "AverageMeter", "(", "\n", "\"val\"", ",", "\n", "[", "\"batch_time\"", ",", "\"data_time\"", ",", "\"calc_time\"", ",", "\"acc1\"", "]", ",", "\n", "self", ".", "writer", ",", "\n", ")", "\n", "test_meter", "=", "AverageMeter", "(", "\n", "\"test\"", ",", "\n", "[", "\"batch_time\"", ",", "\"data_time\"", ",", "\"calc_time\"", ",", "\"acc1\"", "]", ",", "\n", "self", ".", "writer", ",", "\n", ")", "\n", "\n", "return", "train_meter", ",", "val_meter", ",", "test_meter", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.trainer.Trainer._cal_time_scheduler": [[534, 551], ["datetime.timedelta", "datetime.datetime.now", "datetime.datetime.fromtimestamp", "str", "str"], "methods", ["None"], ["", "def", "_cal_time_scheduler", "(", "self", ",", "start_time", ",", "epoch_idx", ")", ":", "\n", "        ", "\"\"\"\n        Calculate the remaining time and consuming time of the training process.\n\n        Returns:\n            str: A string similar to \"00:00:00/0 days, 00:00:00\". First: comsuming time; Second: total time.\n        \"\"\"", "\n", "total_epoch", "=", "self", ".", "config", "[", "\"epoch\"", "]", "-", "self", ".", "from_epoch", "-", "1", "\n", "now_epoch", "=", "epoch_idx", "-", "self", ".", "from_epoch", "\n", "\n", "time_consum", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "-", "datetime", ".", "datetime", ".", "fromtimestamp", "(", "start_time", ")", "\n", "time_consum", "-=", "datetime", ".", "timedelta", "(", "microseconds", "=", "time_consum", ".", "microseconds", ")", "\n", "time_remain", "=", "(", "time_consum", "*", "(", "total_epoch", "-", "now_epoch", ")", ")", "/", "(", "now_epoch", ")", "\n", "\n", "res_str", "=", "str", "(", "time_consum", ")", "+", "\"/\"", "+", "str", "(", "time_remain", "+", "time_consum", ")", "\n", "\n", "return", "res_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.test.Test.__init__": [[33, 44], ["test.Test._init_device", "test.Test._init_files", "core.utils.TensorboardWriter", "test.Test._init_meter", "logging.getLogger", "test.Test.logger.info", "test.Test._init_model", "test.Test._init_dataloader"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.core.test.Test._init_device", "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.test.Test._init_files", "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.test.Test._init_meter", "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.test.Test._init_model", "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.test.Test._init_dataloader"], ["def", "__init__", "(", "self", ",", "config", ",", "result_path", "=", "None", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "result_path", "=", "result_path", "\n", "self", ".", "device", ",", "self", ".", "list_ids", "=", "self", ".", "_init_device", "(", "config", ")", "\n", "self", ".", "viz_path", ",", "self", ".", "state_dict_path", "=", "self", ".", "_init_files", "(", "config", ")", "\n", "self", ".", "writer", "=", "TensorboardWriter", "(", "self", ".", "viz_path", ")", "\n", "self", ".", "test_meter", "=", "self", ".", "_init_meter", "(", ")", "\n", "self", ".", "logger", "=", "getLogger", "(", "__name__", ")", "\n", "self", ".", "logger", ".", "info", "(", "config", ")", "\n", "self", ".", "model", ",", "self", ".", "model_type", "=", "self", ".", "_init_model", "(", "config", ")", "\n", "self", ".", "test_loader", "=", "self", ".", "_init_dataloader", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.test.Test.test_loop": [[45, 65], ["numpy.zeros", "range", "core.utils.mean_confidence_interval", "test.Test.logger.info", "test.Test.logger.info", "test.Test.logger.info", "test.Test._validate", "core.utils.mean_confidence_interval", "test.Test.logger.info", "total_accuracy_vector.extend"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.mean_confidence_interval", "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.test.Test._validate", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.mean_confidence_interval"], ["", "def", "test_loop", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        The normal test loop: test and cal the 0.95 mean_confidence_interval.\n        \"\"\"", "\n", "total_accuracy", "=", "0.0", "\n", "total_h", "=", "np", ".", "zeros", "(", "self", ".", "config", "[", "\"test_epoch\"", "]", ")", "\n", "total_accuracy_vector", "=", "[", "]", "\n", "\n", "for", "epoch_idx", "in", "range", "(", "self", ".", "config", "[", "\"test_epoch\"", "]", ")", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"============ Testing on the test set ============\"", ")", "\n", "_", ",", "accuracies", "=", "self", ".", "_validate", "(", "epoch_idx", ")", "\n", "test_accuracy", ",", "h", "=", "mean_confidence_interval", "(", "accuracies", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Test Accuracy: {:.3f}\\t h: {:.3f}\"", ".", "format", "(", "test_accuracy", ",", "h", ")", ")", "\n", "total_accuracy", "+=", "test_accuracy", "\n", "total_accuracy_vector", ".", "extend", "(", "accuracies", ")", "\n", "total_h", "[", "epoch_idx", "]", "=", "h", "\n", "\n", "", "aver_accuracy", ",", "h", "=", "mean_confidence_interval", "(", "total_accuracy_vector", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Aver Accuracy: {:.3f}\\t Aver h: {:.3f}\"", ".", "format", "(", "aver_accuracy", ",", "h", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"............Testing is end............\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.test.Test._validate": [[66, 128], ["test.Test.model.eval", "test.Test.model.reverse_setting_info", "meter.reset", "time.time.time", "test.Test.model.reverse_setting_info", "torch.set_grad_enabled", "enumerate", "meter.avg", "test.Test.writer.set_step", "meter.update", "test.Test.model.set_forward", "accuracies.append", "meter.update", "meter.update", "time.time.time", "test.Test.logger.info", "time.time.time", "time.time.time", "len", "len", "meter.last", "meter.avg", "meter.last", "meter.avg", "meter.last", "meter.avg", "len"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.eval", "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.reverse_setting_info", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.reverse_setting_info", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.avg", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.visualizer.TensorboardWriter.set_step", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline.Baseline.set_forward", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.last", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.avg", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.last", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.avg", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.last", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.avg"], ["", "def", "_validate", "(", "self", ",", "epoch_idx", ")", ":", "\n", "        ", "\"\"\"\n        The test stage.\n\n        Args:\n            epoch_idx (int): Epoch index.\n\n        Returns:\n            float: Acc.\n        \"\"\"", "\n", "# switch to evaluate mode", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "model", ".", "reverse_setting_info", "(", ")", "\n", "meter", "=", "self", ".", "test_meter", "\n", "meter", ".", "reset", "(", ")", "\n", "episode_size", "=", "self", ".", "config", "[", "\"episode_size\"", "]", "\n", "accuracies", "=", "[", "]", "\n", "\n", "end", "=", "time", "(", ")", "\n", "if", "self", ".", "model_type", "==", "ModelType", ".", "METRIC", ":", "\n", "            ", "enable_grad", "=", "False", "\n", "", "else", ":", "\n", "            ", "enable_grad", "=", "True", "\n", "\n", "", "with", "torch", ".", "set_grad_enabled", "(", "enable_grad", ")", ":", "\n", "            ", "for", "episode_idx", ",", "batch", "in", "enumerate", "(", "self", ".", "test_loader", ")", ":", "\n", "                ", "self", ".", "writer", ".", "set_step", "(", "epoch_idx", "*", "len", "(", "self", ".", "test_loader", ")", "+", "episode_idx", "*", "episode_size", ")", "\n", "\n", "meter", ".", "update", "(", "\"data_time\"", ",", "time", "(", ")", "-", "end", ")", "\n", "\n", "# calculate the output", "\n", "output", ",", "acc", "=", "self", ".", "model", ".", "set_forward", "(", "batch", ")", "\n", "accuracies", ".", "append", "(", "acc", ")", "\n", "# measure accuracy and record loss", "\n", "meter", ".", "update", "(", "\"acc\"", ",", "acc", ")", "\n", "\n", "# measure elapsed time", "\n", "meter", ".", "update", "(", "\"batch_time\"", ",", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", "(", ")", "\n", "\n", "if", "(", "\n", "episode_idx", "!=", "0", "and", "(", "episode_idx", "+", "1", ")", "%", "self", ".", "config", "[", "\"log_interval\"", "]", "==", "0", "\n", ")", "or", "episode_idx", "*", "episode_size", "+", "1", ">=", "len", "(", "self", ".", "test_loader", ")", ":", "\n", "                    ", "info_str", "=", "(", "\n", "\"Epoch-({}): [{}/{}]\\t\"", "\n", "\"Time {:.3f} ({:.3f})\\t\"", "\n", "\"Data {:.3f} ({:.3f})\\t\"", "\n", "\"Acc@1 {:.3f} ({:.3f})\"", ".", "format", "(", "\n", "epoch_idx", ",", "\n", "(", "episode_idx", "+", "1", ")", "*", "episode_size", ",", "\n", "len", "(", "self", ".", "test_loader", ")", ",", "\n", "meter", ".", "last", "(", "\"batch_time\"", ")", ",", "\n", "meter", ".", "avg", "(", "\"batch_time\"", ")", ",", "\n", "meter", ".", "last", "(", "\"data_time\"", ")", ",", "\n", "meter", ".", "avg", "(", "\"data_time\"", ")", ",", "\n", "meter", ".", "last", "(", "\"acc\"", ")", ",", "\n", "meter", ".", "avg", "(", "\"acc\"", ")", ",", "\n", ")", "\n", ")", "\n", "self", ".", "logger", ".", "info", "(", "info_str", ")", "\n", "", "", "", "self", ".", "model", ".", "reverse_setting_info", "(", ")", "\n", "return", "meter", ".", "avg", "(", "\"acc\"", ")", ",", "accuracies", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.test.Test._init_files": [[129, 166], ["os.path.join", "os.path.join", "core.utils.init_logger", "os.path.join", "os.path.join", "config[].split"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.logger.init_logger"], ["", "def", "_init_files", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        Init result_path(log_path, viz_path) from the config dict.\n\n        Args:\n            config (dict): Parsed config file.\n\n        Returns:\n            tuple: A tuple of (result_path, log_path, checkpoints_path, viz_path).\n        \"\"\"", "\n", "if", "self", ".", "result_path", "is", "not", "None", ":", "\n", "            ", "result_path", "=", "self", ".", "result_path", "\n", "", "else", ":", "\n", "            ", "result_dir", "=", "\"{}-{}-{}-{}-{}\"", ".", "format", "(", "\n", "config", "[", "\"classifier\"", "]", "[", "\"name\"", "]", ",", "\n", "# you should ensure that data_root name contains its true name", "\n", "config", "[", "\"data_root\"", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ",", "\n", "config", "[", "\"backbone\"", "]", "[", "\"name\"", "]", ",", "\n", "config", "[", "\"way_num\"", "]", ",", "\n", "config", "[", "\"shot_num\"", "]", ",", "\n", ")", "\n", "result_path", "=", "os", ".", "path", ".", "join", "(", "config", "[", "\"result_root\"", "]", ",", "result_dir", ")", "\n", "# self.logger.log(\"Result DIR: \" + result_path)", "\n", "", "log_path", "=", "os", ".", "path", ".", "join", "(", "result_path", ",", "\"log_files\"", ")", "\n", "viz_path", "=", "os", ".", "path", ".", "join", "(", "log_path", ",", "\"tfboard_files\"", ")", "\n", "\n", "init_logger", "(", "\n", "config", "[", "\"log_level\"", "]", ",", "\n", "log_path", ",", "\n", "config", "[", "\"classifier\"", "]", "[", "\"name\"", "]", ",", "\n", "config", "[", "\"backbone\"", "]", "[", "\"name\"", "]", ",", "\n", "is_train", "=", "False", ",", "\n", ")", "\n", "\n", "state_dict_path", "=", "os", ".", "path", ".", "join", "(", "result_path", ",", "\"checkpoints\"", ",", "\"model_best.pth\"", ")", "\n", "\n", "return", "viz_path", ",", "state_dict_path", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.test.Test._init_dataloader": [[167, 180], ["core.data.get_dataloader"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.data.dataloader.get_dataloader"], ["", "def", "_init_dataloader", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        Init dataloaders.(train_loader, val_loader and test_loader)\n\n        Args:\n            config (dict): Parsed config file.\n\n        Returns:\n            tuple: A tuple of (train_loader, val_loader and test_loader).\n        \"\"\"", "\n", "test_loader", "=", "get_dataloader", "(", "config", ",", "\"test\"", ",", "self", ".", "model_type", ")", "\n", "\n", "return", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.test.Test._init_model": [[181, 227], ["core.utils.get_instance", "core.utils.get_instance", "test.Test.logger.info", "test.Test.logger.info", "test.Test.logger.info", "torch.load", "model.to.to.load_state_dict", "model.to.to.to", "len", "core.utils.count_parameters", "hasattr", "setattr", "torch.nn.DataParallel", "getattr"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.get_instance", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.get_instance", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.count_parameters"], ["", "def", "_init_model", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        Init model(backbone+classifier) from the config dict and load the best checkpoint, then parallel if necessary .\n\n        Args:\n            config (dict): Parsed config file.\n\n        Returns:\n            tuple: A tuple of the model and model's type.\n        \"\"\"", "\n", "emb_func", "=", "get_instance", "(", "arch", ",", "\"backbone\"", ",", "config", ")", "\n", "model_kwargs", "=", "{", "\n", "\"way_num\"", ":", "config", "[", "\"way_num\"", "]", ",", "\n", "\"shot_num\"", ":", "config", "[", "\"shot_num\"", "]", "*", "config", "[", "\"augment_times\"", "]", ",", "\n", "\"query_num\"", ":", "config", "[", "\"query_num\"", "]", ",", "\n", "\"test_way\"", ":", "config", "[", "\"test_way\"", "]", ",", "\n", "\"test_shot\"", ":", "config", "[", "\"test_shot\"", "]", "*", "config", "[", "\"augment_times\"", "]", ",", "\n", "\"test_query\"", ":", "config", "[", "\"test_query\"", "]", ",", "\n", "\"emb_func\"", ":", "emb_func", ",", "\n", "\"device\"", ":", "self", ".", "device", ",", "\n", "}", "\n", "model", "=", "get_instance", "(", "arch", ",", "\"classifier\"", ",", "config", ",", "**", "model_kwargs", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "model", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Trainable params in the model: {}\"", ".", "format", "(", "count_parameters", "(", "model", ")", ")", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "\"load the state dict from {}.\"", ".", "format", "(", "self", ".", "state_dict_path", ")", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "self", ".", "state_dict_path", ",", "map_location", "=", "\"cpu\"", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "len", "(", "self", ".", "list_ids", ")", ">", "1", ":", "\n", "            ", "parallel_list", "=", "self", ".", "config", "[", "\"parallel_part\"", "]", "\n", "if", "parallel_list", "is", "not", "None", ":", "\n", "                ", "for", "parallel_part", "in", "parallel_list", ":", "\n", "                    ", "if", "hasattr", "(", "model", ",", "parallel_part", ")", ":", "\n", "                        ", "setattr", "(", "\n", "model", ",", "\n", "parallel_part", ",", "\n", "nn", ".", "DataParallel", "(", "\n", "getattr", "(", "model", ",", "parallel_part", ")", ",", "\n", "device_ids", "=", "self", ".", "list_ids", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "", "", "", "", "return", "model", ",", "model", ".", "model_type", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.test.Test._init_device": [[228, 241], ["core.utils.init_seed", "core.utils.prepare_device"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.init_seed", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.prepare_device"], ["", "def", "_init_device", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        Init the devices from the config file.\n\n        Args:\n            config (dict): Parsed config file.\n\n        Returns:\n            tuple: A tuple of deviceand list_ids.\n        \"\"\"", "\n", "init_seed", "(", "config", "[", "\"seed\"", "]", ",", "config", "[", "\"deterministic\"", "]", ")", "\n", "device", ",", "list_ids", "=", "prepare_device", "(", "config", "[", "\"device_ids\"", "]", ",", "config", "[", "\"n_gpu\"", "]", ")", "\n", "return", "device", ",", "list_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.core.test.Test._init_meter": [[242, 252], ["core.utils.AverageMeter"], "methods", ["None"], ["", "def", "_init_meter", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Init the AverageMeter of test stage to cal avg... of batch_time, data_time,calc_time ,loss and acc1.\n\n        Returns:\n            tuple: A tuple of train_meter, val_meter, test_meter.\n        \"\"\"", "\n", "test_meter", "=", "AverageMeter", "(", "\"test\"", ",", "[", "\"batch_time\"", ",", "\"data_time\"", ",", "\"acc\"", "]", ",", "self", ".", "writer", ")", "\n", "\n", "return", "test_meter", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.visualizer.TensorboardWriter.__init__": [[10, 25], ["torch.utils.tensorboard.SummaryWriter"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "log_dir", ")", ":", "\n", "        ", "self", ".", "step", "=", "0", "\n", "\n", "self", ".", "writer", "=", "tensorboard", ".", "SummaryWriter", "(", "log_dir", ")", "\n", "\n", "self", ".", "tb_writer_funcs", "=", "{", "\n", "\"add_scalar\"", ",", "\n", "\"add_scalars\"", ",", "\n", "\"add_image\"", ",", "\n", "\"add_images\"", ",", "\n", "\"add_audio\"", ",", "\n", "\"add_text\"", ",", "\n", "\"add_histogram\"", ",", "\n", "\"add_pr_curve\"", ",", "\n", "\"add_embedding\"", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.visualizer.TensorboardWriter.set_step": [[27, 29], ["None"], "methods", ["None"], ["", "def", "set_step", "(", "self", ",", "step", ")", ":", "\n", "        ", "self", ".", "step", "=", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.visualizer.TensorboardWriter.__getattr__": [[30, 46], ["getattr", "getattr."], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"\n\n        :param name:\n        :return:\n        \"\"\"", "\n", "if", "name", "in", "self", ".", "tb_writer_funcs", ":", "\n", "            ", "add_data", "=", "getattr", "(", "self", ".", "writer", ",", "name", ",", "None", ")", "\n", "\n", "def", "wrapper", "(", "tag", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "                ", "if", "add_data", "is", "not", "None", ":", "\n", "                    ", "add_data", "(", "tag", ",", "data", ",", "self", ".", "step", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "return", "wrapper", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.logger.init_logger": [[23, 76], ["os.path.join", "logging.config.dictConfig", "core.utils.utils.get_local_time", "logging_config[].update"], "function", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.get_local_time", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update"], ["def", "init_logger", "(", "log_level", ",", "result_root", ",", "classifier", ",", "backbone", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "if", "log_level", "not", "in", "str_level_dict", ":", "\n", "        ", "raise", "KeyError", "\n", "\n", "", "level", "=", "str_level_dict", "[", "log_level", "]", "\n", "file_name", "=", "\"{}-{}-{}-{}.log\"", ".", "format", "(", "\n", "classifier", ",", "backbone", ",", "\"train\"", "if", "is_train", "else", "\"test\"", ",", "get_local_time", "(", ")", "\n", ")", "\n", "log_path", "=", "os", ".", "path", ".", "join", "(", "result_root", ",", "file_name", ")", "\n", "\n", "logging_config", "=", "{", "\n", "\"version\"", ":", "1", ",", "\n", "\"disable_existing_loggers\"", ":", "True", ",", "\n", "\"formatters\"", ":", "{", "\"simple\"", ":", "{", "\"format\"", ":", "\"%(asctime)s [%(levelname)s] %(name)s: %(message)s\"", "}", "}", ",", "\n", "\"handlers\"", ":", "{", "\n", "\"console\"", ":", "{", "\n", "\"level\"", ":", "level", ",", "\n", "\"class\"", ":", "\"logging.StreamHandler\"", ",", "\n", "\"formatter\"", ":", "\"simple\"", ",", "\n", "\"stream\"", ":", "\"ext://sys.stdout\"", ",", "\n", "}", ",", "\n", "\"file\"", ":", "{", "\n", "\"level\"", ":", "level", ",", "\n", "\"class\"", ":", "\"logging.handlers.RotatingFileHandler\"", ",", "\n", "\"formatter\"", ":", "\"simple\"", ",", "\n", "\"filename\"", ":", "log_path", ",", "\n", "\"maxBytes\"", ":", "100", "*", "1024", "*", "1024", ",", "\n", "\"backupCount\"", ":", "3", ",", "\n", "}", ",", "\n", "}", ",", "\n", "\"loggers\"", ":", "{", "\n", "\"\"", ":", "{", "\n", "\"handlers\"", ":", "[", "\n", "(", "\"rich-console\"", "if", "USE_RICH_CONSOLE", "else", "\"console\"", ")", ",", "\n", "\"file\"", ",", "\n", "]", ",", "\n", "\"level\"", ":", "level", ",", "\n", "\"propagate\"", ":", "True", ",", "\n", "}", "\n", "}", ",", "\n", "}", "\n", "\n", "if", "USE_RICH_CONSOLE", ":", "\n", "        ", "logging_config", "[", "\"handlers\"", "]", ".", "update", "(", "\n", "{", "\n", "\"rich-console\"", ":", "{", "\n", "\"level\"", ":", "level", ",", "\n", "\"class\"", ":", "\"rich.logging.RichHandler\"", ",", "\n", "}", "\n", "}", "\n", ")", "\n", "\n", "", "logging", ".", "config", ".", "dictConfig", "(", "logging_config", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.__init__": [[42, 47], ["pandas.DataFrame", "utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "keys", ",", "writer", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "_data", "=", "pd", ".", "DataFrame", "(", "index", "=", "keys", ",", "columns", "=", "[", "\"last_value\"", ",", "\"total\"", ",", "\"counts\"", ",", "\"average\"", "]", ")", "\n", "self", ".", "writer", "=", "writer", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.reset": [[48, 51], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "col", "in", "self", ".", "_data", ".", "columns", ":", "\n", "            ", "self", ".", "_data", "[", "col", "]", ".", "values", "[", ":", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update": [[52, 60], ["utils.AverageMeter.writer.add_scalar"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "key", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "writer", "is", "not", "None", ":", "\n", "            ", "tag", "=", "\"{}/{}\"", ".", "format", "(", "self", ".", "name", ",", "key", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "tag", ",", "value", ")", "\n", "", "self", ".", "_data", ".", "last_value", "[", "key", "]", "=", "value", "\n", "self", ".", "_data", ".", "total", "[", "key", "]", "+=", "value", "*", "n", "\n", "self", ".", "_data", ".", "counts", "[", "key", "]", "+=", "n", "\n", "self", ".", "_data", ".", "average", "[", "key", "]", "=", "self", ".", "_data", ".", "total", "[", "key", "]", "/", "self", ".", "_data", ".", "counts", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.avg": [[61, 63], ["None"], "methods", ["None"], ["", "def", "avg", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_data", ".", "average", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.result": [[64, 66], ["dict"], "methods", ["None"], ["", "def", "result", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "self", ".", "_data", ".", "average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.last": [[67, 69], ["None"], "methods", ["None"], ["", "def", "last", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_data", ".", "last_value", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.data_prefetcher.__init__": [[281, 289], ["iter", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "utils.data_prefetcher.preload"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.data_prefetcher.preload"], ["def", "__init__", "(", "self", ",", "loader", ")", ":", "\n", "        ", "\"\"\"\n        loader: train_loader, val_loader or test_loader\n        \"\"\"", "\n", "self", ".", "loader", "=", "iter", "(", "loader", ")", "\n", "self", ".", "stream", "=", "torch", ".", "cuda", ".", "Stream", "(", ")", "\n", "\n", "self", ".", "preload", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.data_prefetcher.preload": [[290, 299], ["utils.data_prefetcher.next"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.data_prefetcher.next"], ["", "def", "preload", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "next_data", "=", "next", "(", "self", ".", "loader", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "next_data", "=", "None", "\n", "return", "\n", "\n", "", "with", "torch", ".", "cuda", ".", "stream", "(", "self", ".", "stream", ")", ":", "\n", "            ", "self", ".", "next_data", "=", "[", "data", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "data", "in", "self", ".", "next_data", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.data_prefetcher.next": [[300, 312], ["torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "utils.data_prefetcher.preload", "input.record_stream", "target.record_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.data_prefetcher.preload"], ["", "", "def", "next", "(", "self", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "wait_stream", "(", "self", ".", "stream", ")", "\n", "if", "self", ".", "next_data", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "input", "=", "self", ".", "next_data", "[", "0", "]", "\n", "target", "=", "self", ".", "next_data", "[", "1", "]", "\n", "if", "input", "is", "not", "None", ":", "\n", "            ", "input", ".", "record_stream", "(", "torch", ".", "cuda", ".", "current_stream", "(", ")", ")", "\n", "", "if", "target", "is", "not", "None", ":", "\n", "            ", "target", ".", "record_stream", "(", "torch", ".", "cuda", ".", "current_stream", "(", ")", ")", "\n", "", "self", ".", "preload", "(", ")", "\n", "return", "[", "input", ",", "target", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.get_instance": [[19, 35], ["kwargs.update", "getattr"], "function", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update"], ["def", "get_instance", "(", "module", ",", "name", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    A reflection function to get backbone/classifier/.\n\n    Args:\n        module ([type]): Package Name.\n        name (str): Top level value in config dict. (backbone, classifier, etc.)\n        config (dict): The parsed config dict.\n\n    Returns:\n         Corresponding instance.\n    \"\"\"", "\n", "if", "config", "[", "name", "]", "[", "\"kwargs\"", "]", "is", "not", "None", ":", "\n", "        ", "kwargs", ".", "update", "(", "config", "[", "name", "]", "[", "\"kwargs\"", "]", ")", "\n", "\n", "", "return", "getattr", "(", "module", ",", "config", "[", "name", "]", "[", "\"name\"", "]", ")", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.get_local_time": [[71, 75], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", "", "def", "get_local_time", "(", ")", ":", "\n", "    ", "cur_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%b-%d-%Y-%H-%M-%S\"", ")", "\n", "\n", "return", "cur_time", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.count_parameters": [[77, 79], ["sum", "p.numel", "model.parameters"], "function", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLBaseLearner.parameters"], ["", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy": [[81, 112], ["torch.no_grad", "torch.no_grad", "target.size", "pred.t.t", "pred.t.eq", "correct[].view().float().sum", "correct[].view().float().sum.mul_().item", "target.view().expand_as", "correct[].view().float", "correct[].view().float().sum.mul_", "target.view", "correct[].view", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy", "utils.topk_"], "function", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.topk_"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Calc the acc of tpok.\n\n    output and target have the same dtype and the same shape.\n\n    Args:\n        output (torch.Tensor or np.ndarray): The output.\n        target (torch.Tensor or np.ndarray): The target.\n        topk (int or list or tuple): topk . Defaults to 1.\n\n    Returns:\n        float: acc.\n    \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "{", "\n", "\"Tensor\"", ":", "torch", ".", "topk", ",", "\n", "\"ndarray\"", ":", "lambda", "output", ",", "maxk", ",", "axis", ":", "(", "\n", "None", ",", "\n", "torch", ".", "from_numpy", "(", "topk_", "(", "output", ",", "maxk", ",", "axis", ")", "[", "1", "]", ")", ".", "to", "(", "target", ".", "device", ")", ",", "\n", ")", ",", "\n", "}", "[", "output", ".", "__class__", ".", "__name__", "]", "(", "output", ",", "topk", ",", "1", ")", "\n", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "correct_k", "=", "correct", "[", ":", "topk", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", "=", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ".", "item", "(", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.topk_": [[114, 136], ["numpy.arange", "numpy.argsort", "numpy.argsort", "numpy.argpartition", "numpy.arange", "numpy.argpartition"], "function", ["None"], ["", "", "def", "topk_", "(", "matrix", ",", "K", ",", "axis", ")", ":", "\n", "    ", "\"\"\"\n    the function to calc topk acc of ndarrary.\n\n    TODO\n\n    \"\"\"", "\n", "if", "axis", "==", "0", ":", "\n", "        ", "row_index", "=", "np", ".", "arange", "(", "matrix", ".", "shape", "[", "1", "-", "axis", "]", ")", "\n", "topk_index", "=", "np", ".", "argpartition", "(", "-", "matrix", ",", "K", ",", "axis", "=", "axis", ")", "[", "0", ":", "K", ",", ":", "]", "\n", "topk_data", "=", "matrix", "[", "topk_index", ",", "row_index", "]", "\n", "topk_index_sort", "=", "np", ".", "argsort", "(", "-", "topk_data", ",", "axis", "=", "axis", ")", "\n", "topk_data_sort", "=", "topk_data", "[", "topk_index_sort", ",", "row_index", "]", "\n", "topk_index_sort", "=", "topk_index", "[", "0", ":", "K", ",", ":", "]", "[", "topk_index_sort", ",", "row_index", "]", "\n", "", "else", ":", "\n", "        ", "column_index", "=", "np", ".", "arange", "(", "matrix", ".", "shape", "[", "1", "-", "axis", "]", ")", "[", ":", ",", "None", "]", "\n", "topk_index", "=", "np", ".", "argpartition", "(", "-", "matrix", ",", "K", ",", "axis", "=", "axis", ")", "[", ":", ",", "0", ":", "K", "]", "\n", "topk_data", "=", "matrix", "[", "column_index", ",", "topk_index", "]", "\n", "topk_index_sort", "=", "np", ".", "argsort", "(", "-", "topk_data", ",", "axis", "=", "axis", ")", "\n", "topk_data_sort", "=", "topk_data", "[", "column_index", ",", "topk_index_sort", "]", "\n", "topk_index_sort", "=", "topk_index", "[", ":", ",", "0", ":", "K", "]", "[", "column_index", ",", "topk_index_sort", "]", "\n", "", "return", "topk_data_sort", ",", "topk_index_sort", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.mean_confidence_interval": [[138, 150], ["len", "numpy.mean", "scipy.stats.sem", "scipy.stats.sem", "scipy.stats.t._ppf", "numpy.array", "range", "len"], "function", ["None"], ["", "def", "mean_confidence_interval", "(", "data", ",", "confidence", "=", "0.95", ")", ":", "\n", "    ", "\"\"\"\n\n    :param data:\n    :param confidence:\n    :return:\n    \"\"\"", "\n", "a", "=", "[", "1.0", "*", "np", ".", "array", "(", "data", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", "]", "\n", "n", "=", "len", "(", "a", ")", "\n", "m", ",", "se", "=", "np", ".", "mean", "(", "a", ")", ",", "scipy", ".", "stats", ".", "sem", "(", "a", ")", "\n", "h", "=", "se", "*", "sp", ".", "stats", ".", "t", ".", "_ppf", "(", "(", "1", "+", "confidence", ")", "/", "2.0", ",", "n", "-", "1", ")", "\n", "return", "m", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.create_dirs": [[152, 163], ["isinstance", "os.path.exists", "os.mkdir"], "function", ["None"], ["", "def", "create_dirs", "(", "dir_paths", ")", ":", "\n", "    ", "\"\"\"\n\n    :param dir_paths:\n    :return:\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "dir_paths", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "dir_paths", "=", "[", "dir_paths", "]", "\n", "", "for", "dir_path", "in", "dir_paths", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "dir_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.prepare_device": [[165, 190], ["logging.getLogger", "str", "torch.cuda.device_count", "torch.cuda.device_count", "torch.device", "torch.device", "list", "logging.getLogger.warning", "logging.getLogger.warning", "range"], "function", ["None"], ["", "", "", "def", "prepare_device", "(", "device_ids", ",", "n_gpu_use", ")", ":", "\n", "    ", "\"\"\"\n\n    :param n_gpu_use:\n    :return:\n    \"\"\"", "\n", "logger", "=", "getLogger", "(", "__name__", ")", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "str", "(", "device_ids", ")", "\n", "\n", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "n_gpu_use", ">", "0", "and", "n_gpu", "==", "0", ":", "\n", "        ", "logger", ".", "warning", "(", "\"the model will be performed on CPU.\"", ")", "\n", "n_gpu_use", "=", "0", "\n", "\n", "", "if", "n_gpu_use", ">", "n_gpu", ":", "\n", "        ", "logger", ".", "warning", "(", "\n", "\"only {} are available on this machine, \"", "\n", "\"but the number of the GPU in config is {}.\"", ".", "format", "(", "n_gpu", ",", "n_gpu_use", ")", "\n", ")", "\n", "n_gpu_use", "=", "n_gpu", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "n_gpu_use", ">", "0", "else", "\"cpu\"", ")", "\n", "list_ids", "=", "list", "(", "range", "(", "n_gpu_use", ")", ")", "\n", "\n", "return", "device", ",", "list_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.save_model": [[192, 251], ["os.path.join", "collections.OrderedDict", "model.state_dict().items", "model.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "os.path.join", "model.state_dict", "optimizer.state_dict", "lr_Scheduler.state_dict", "k.split"], "function", ["None"], ["", "def", "save_model", "(", "\n", "model", ",", "\n", "optimizer", ",", "\n", "lr_Scheduler", ",", "\n", "save_path", ",", "\n", "name", ",", "\n", "epoch", ",", "\n", "save_type", "=", "SaveType", ".", "LAST", ",", "\n", "best_val_acc", "=", "0", ",", "\n", "best_test_acc", "=", "0", ",", "\n", "is_parallel", "=", "False", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n\n    :param model:\n    :param optimizer:\n    :param lr_Scheduler\n    :param save_path:\n    :param name:\n    :param epoch:\n    :param save_type:\n    :param is_parallel:\n    :return:\n    \"\"\"", "\n", "\n", "if", "save_type", "==", "SaveType", ".", "NORMAL", ":", "\n", "        ", "save_name", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"{}_{:0>5d}.pth\"", ".", "format", "(", "name", ",", "epoch", ")", ")", "\n", "", "elif", "save_type", "==", "SaveType", ".", "BEST", ":", "\n", "        ", "save_name", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"{}_best.pth\"", ".", "format", "(", "name", ")", ")", "\n", "", "elif", "save_type", "==", "SaveType", ".", "LAST", ":", "\n", "        ", "save_name", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"{}_last.pth\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "\n", "\n", "", "if", "is_parallel", ":", "\n", "        ", "model_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "\".\"", ".", "join", "(", "[", "name", "for", "name", "in", "k", ".", "split", "(", "\".\"", ")", "if", "name", "!=", "\"module\"", "]", ")", "\n", "model_state_dict", "[", "name", "]", "=", "v", "\n", "", "", "else", ":", "\n", "        ", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "", "if", "save_type", "==", "SaveType", ".", "NORMAL", "or", "save_type", "==", "SaveType", ".", "BEST", ":", "\n", "        ", "torch", ".", "save", "(", "model_state_dict", ",", "save_name", ")", "\n", "", "else", ":", "\n", "        ", "torch", ".", "save", "(", "\n", "{", "\n", "\"epoch\"", ":", "epoch", ",", "\n", "\"model\"", ":", "model_state_dict", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"lr_scheduler\"", ":", "lr_Scheduler", ".", "state_dict", "(", ")", ",", "\n", "\"best_val_acc\"", ":", "best_val_acc", ",", "\n", "\"best_test_acc\"", ":", "best_test_acc", ",", "\n", "}", ",", "\n", "save_name", ",", "\n", ")", "\n", "\n", "", "return", "save_name", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.init_seed": [[253, 273], ["str", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "init_seed", "(", "seed", "=", "0", ",", "deterministic", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n\n    :param seed:\n    :param deterministic:\n    :return:\n    \"\"\"", "\n", "os", ".", "environ", "[", "\"PYTHONHASHSEED\"", "]", "=", "str", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n", "if", "deterministic", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "", "else", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.mtl_module._ConvNdMtl.__init__": [[13, 68], ["torch.Module.__init__", "mtl_module._ConvNdMtl.reset_parameters", "ValueError", "ValueError", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "mtl_module._ConvNdMtl.register_parameter", "mtl_module._ConvNdMtl.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12_mtl_offcial._ConvNdMtl.reset_parameters"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", ",", "\n", "transposed", ",", "\n", "output_padding", ",", "\n", "groups", ",", "\n", "bias", ",", "\n", "MTL", ",", "\n", ")", ":", "\n", "        ", "super", "(", "_ConvNdMtl", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"in_channels must be divisible by groups\"", ")", "\n", "", "if", "out_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"out_channels must be divisible by groups\"", ")", "\n", "", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "transposed", "=", "transposed", "\n", "self", ".", "output_padding", "=", "output_padding", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "MTL", "=", "MTL", "\n", "if", "transposed", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "in_channels", ",", "out_channels", "//", "groups", ",", "*", "kernel_size", ")", "\n", ")", "\n", "self", ".", "mtl_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "in_channels", ",", "out_channels", "//", "groups", ",", "1", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "out_channels", ",", "in_channels", "//", "groups", ",", "*", "kernel_size", ")", "\n", ")", "\n", "self", ".", "mtl_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "out_channels", ",", "in_channels", "//", "groups", ",", "1", ",", "1", ")", ")", "\n", "", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "self", ".", "mtl_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "\"bias\"", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "\"mtl_bias\"", ",", "None", ")", "\n", "", "if", "MTL", ":", "\n", "            ", "self", ".", "weight", ".", "requires_grad", "=", "False", "\n", "if", "bias", ":", "\n", "                ", "self", ".", "bias", ".", "requires_grad", "=", "False", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "mtl_weight", ".", "requires_grad", "=", "False", "\n", "if", "bias", ":", "\n", "                ", "self", ".", "mtl_bias", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.mtl_module._ConvNdMtl.reset_parameters": [[69, 79], ["mtl_module._ConvNdMtl.weight.data.uniform_", "mtl_module._ConvNdMtl.mtl_weight.data.uniform_", "math.sqrt", "mtl_module._ConvNdMtl.bias.data.uniform_", "mtl_module._ConvNdMtl.mtl_bias.data.uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "for", "k", "in", "self", ".", "kernel_size", ":", "\n", "            ", "n", "*=", "k", "\n", "", "stdv", "=", "1.0", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "mtl_weight", ".", "data", ".", "uniform_", "(", "1", ",", "1", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "mtl_bias", ".", "data", ".", "uniform_", "(", "0", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.mtl_module._ConvNdMtl.extra_repr": [[80, 95], ["s.format", "len", "len", "len"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "\"{in_channels}, {out_channels}, kernel_size={kernel_size}\"", "\", stride={stride}\"", "\n", "if", "self", ".", "padding", "!=", "(", "0", ",", ")", "*", "len", "(", "self", ".", "padding", ")", ":", "\n", "            ", "s", "+=", "\", padding={padding}\"", "\n", "", "if", "self", ".", "dilation", "!=", "(", "1", ",", ")", "*", "len", "(", "self", ".", "dilation", ")", ":", "\n", "            ", "s", "+=", "\", dilation={dilation}\"", "\n", "", "if", "self", ".", "output_padding", "!=", "(", "0", ",", ")", "*", "len", "(", "self", ".", "output_padding", ")", ":", "\n", "            ", "s", "+=", "\", output_padding={output_padding}\"", "\n", "", "if", "self", ".", "groups", "!=", "1", ":", "\n", "            ", "s", "+=", "\", groups={groups}\"", "\n", "", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "s", "+=", "\", bias=False\"", "\n", "", "if", "self", ".", "MTL", "is", "not", "None", ":", "\n", "            ", "s", "+=", "\", MTL={MTL}\"", "\n", "", "return", "s", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.mtl_module.Conv2dMtl.__init__": [[100, 129], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "mtl_module._ConvNdMtl.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "MTL", "=", "False", ",", "\n", ")", ":", "\n", "        ", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "self", ".", "MTL", "=", "MTL", "\n", "super", "(", "Conv2dMtl", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", ",", "\n", "False", ",", "\n", "_pair", "(", "0", ")", ",", "\n", "groups", ",", "\n", "bias", ",", "\n", "MTL", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.mtl_module.Conv2dMtl.forward": [[131, 150], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "mtl_module.Conv2dMtl.mtl_weight.expand", "mtl_module.Conv2dMtl.weight.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "# override conv2d forward", "\n", "        ", "if", "self", ".", "MTL", ":", "\n", "            ", "new_mtl_weight", "=", "self", ".", "mtl_weight", ".", "expand", "(", "self", ".", "weight", ".", "shape", ")", "\n", "new_weight", "=", "self", ".", "weight", ".", "mul", "(", "new_mtl_weight", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "                ", "new_bias", "=", "self", ".", "bias", "+", "self", ".", "mtl_bias", "\n", "", "else", ":", "\n", "                ", "new_bias", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "new_weight", "=", "self", ".", "weight", "\n", "new_bias", "=", "self", ".", "bias", "\n", "", "return", "F", ".", "conv2d", "(", "\n", "inp", ",", "\n", "new_weight", ",", "\n", "new_bias", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "groups", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.mtl_module.convert_mtl_module": [[153, 182], ["isinstance", "module.named_children", "mtl_module.Conv2dMtl", "Conv2dMtl.add_module", "mtl_module.convert_mtl_module"], "function", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.mtl_module.convert_mtl_module"], ["", "", "def", "convert_mtl_module", "(", "module", ",", "MTL", "=", "False", ")", ":", "\n", "    ", "\"\"\"Convert a normal model to MTL model.\n\n    Replace nn.Conv2d with Conv2dMtl.\n\n    Args:\n        module: The module (model component) to be converted.\n\n    Returns: A MTL model.\n\n    \"\"\"", "\n", "module_output", "=", "module", "\n", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "modules", ".", "Conv2d", ")", ":", "\n", "        ", "module_output", "=", "Conv2dMtl", "(", "\n", "module", ".", "in_channels", ",", "\n", "module", ".", "out_channels", ",", "\n", "module", ".", "kernel_size", ",", "\n", "module", ".", "stride", ",", "\n", "module", ".", "padding", ",", "\n", "module", ".", "dilation", ",", "\n", "module", ".", "groups", ",", "\n", "False", "if", "module", ".", "bias", "is", "None", "else", "True", ",", "\n", "MTL", ",", "\n", ")", "\n", "\n", "", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "module_output", ".", "add_module", "(", "name", ",", "convert_mtl_module", "(", "child", ",", "MTL", ")", ")", "\n", "", "del", "module", "\n", "return", "module_output", "\n", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.maml_module.Linear_fw.__init__": [[11, 16], ["torch.Linear.__init__"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "Linear_fw", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "# Lazy hack to add fast weight link", "\n", "self", ".", "bias", ".", "fast", "=", "None", "\n", "self", ".", "has_bias", "=", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.maml_module.Linear_fw.forward": [[17, 25], ["torch.linear", "torch.linear", "torch.linear", "super().forward"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.wrn.WideResNet.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "            ", "out", "=", "F", ".", "linear", "(", "\n", "x", ",", "self", ".", "weight", ".", "fast", ",", "self", ".", "bias", ".", "fast", "if", "self", ".", "has_bias", "else", "None", "\n", ")", "# weight.fast (fast weight) is the temporaily adapted weight", "\n", "", "else", ":", "\n", "            ", "out", "=", "super", "(", "Linear_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.maml_module.Conv2d_fw.__init__": [[29, 49], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.maml_module.Conv2d_fw.forward": [[50, 75], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "super().forward", "torch.conv2d", "torch.conv2d", "torch.conv2d", "super().forward"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.wrn.WideResNet.forward", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.wrn.WideResNet.forward"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", ":", "\n", "                ", "out", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "\n", "self", ".", "weight", ".", "fast", ",", "\n", "None", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "                ", "out", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "\n", "self", ".", "weight", ".", "fast", ",", "\n", "self", ".", "bias", ".", "fast", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.maml_module.BatchNorm2d_fw.__init__": [[79, 83], ["torch.BatchNorm2d.__init__"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ")", ":", "\n", "        ", "super", "(", "BatchNorm2d_fw", ",", "self", ")", ".", "__init__", "(", "num_features", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "\n", "self", ".", "bias", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.maml_module.BatchNorm2d_fw.forward": [[84, 109], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "x.data.size", "x.data.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "running_mean", "=", "torch", ".", "zeros", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "cuda", "(", ")", "\n", "running_var", "=", "torch", ".", "ones", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "cuda", "(", ")", "\n", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "            ", "out", "=", "F", ".", "batch_norm", "(", "\n", "x", ",", "\n", "running_mean", ",", "\n", "running_var", ",", "\n", "self", ".", "weight", ".", "fast", ",", "\n", "self", ".", "bias", ".", "fast", ",", "\n", "training", "=", "True", ",", "\n", "momentum", "=", "1", ",", "\n", ")", "\n", "# batch_norm momentum hack: follow hack of Kate Rakelly in pytorch-maml/src/layers.py", "\n", "", "else", ":", "\n", "            ", "out", "=", "F", ".", "batch_norm", "(", "\n", "x", ",", "\n", "running_mean", ",", "\n", "running_var", ",", "\n", "self", ".", "weight", ",", "\n", "self", ".", "bias", ",", "\n", "training", "=", "True", ",", "\n", "momentum", "=", "1", ",", "\n", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.maml_module.convert_maml_module": [[111, 147], ["isinstance", "module.named_children", "maml_module.Linear_fw", "isinstance", "BatchNorm2d_fw.add_module", "maml_module.Conv2d_fw", "isinstance", "maml_module.convert_maml_module", "maml_module.BatchNorm2d_fw"], "function", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.maml_module.convert_maml_module"], ["", "", "def", "convert_maml_module", "(", "module", ")", ":", "\n", "    ", "\"\"\"Convert a normal model to MAML model.\n\n    Replace nn.Linear with Linear_fw, nn.Conv2d with Conv2d_fw.\n\n    Args:\n        module: The module (model component) to be converted.\n\n    Returns: A MAML model.\n\n    \"\"\"", "\n", "module_output", "=", "module", "\n", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "modules", ".", "Linear", ")", ":", "\n", "        ", "module_output", "=", "Linear_fw", "(", "\n", "module", ".", "in_features", ",", "\n", "module", ".", "out_features", ",", "\n", "False", "if", "module", ".", "bias", "is", "None", "else", "True", ",", "\n", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "modules", ".", "Conv2d", ")", ":", "\n", "        ", "module_output", "=", "Conv2d_fw", "(", "\n", "module", ".", "in_channels", ",", "\n", "module", ".", "out_channels", ",", "\n", "module", ".", "kernel_size", ",", "\n", "module", ".", "stride", ",", "\n", "module", ".", "padding", ",", "\n", "False", "if", "module", ".", "bias", "is", "None", "else", "True", ",", "\n", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm2d", ")", ":", "\n", "        ", "module_output", "=", "BatchNorm2d_fw", "(", "\n", "module", ".", "num_features", ",", "\n", ")", "\n", "\n", "", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "module_output", ".", "add_module", "(", "name", ",", "convert_maml_module", "(", "child", ")", ")", "\n", "", "del", "module", "\n", "return", "module_output", "\n", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.dropblock.DropBlock.__init__": [[9, 13], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block_size", ")", ":", "\n", "        ", "super", "(", "DropBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block_size", "=", "block_size", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.dropblock.DropBlock.forward": [[14, 40], ["torch.distributions.Bernoulli", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli.sample", "torch.distributions.Bernoulli.sample", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "dropblock.DropBlock._compute_block_mask", "dropblock.DropBlock.sum", "mask.cuda.cuda.cuda", "dropblock.DropBlock.size", "dropblock.DropBlock.size", "dropblock.DropBlock.size", "dropblock.DropBlock.size"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.sample", "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.sample", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.dropblock.DropBlock._compute_block_mask"], ["", "def", "forward", "(", "self", ",", "x", ",", "gamma", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "x", ".", "shape", "\n", "bernoulli", "=", "Bernoulli", "(", "gamma", ")", "\n", "mask", "=", "bernoulli", ".", "sample", "(", "\n", "(", "\n", "batch_size", ",", "\n", "channels", ",", "\n", "height", "-", "(", "self", ".", "block_size", "-", "1", ")", ",", "\n", "width", "-", "(", "self", ".", "block_size", "-", "1", ")", ",", "\n", ")", "\n", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "mask", "=", "mask", ".", "cuda", "(", ")", "\n", "", "block_mask", "=", "self", ".", "_compute_block_mask", "(", "mask", ")", "\n", "countM", "=", "(", "\n", "block_mask", ".", "size", "(", ")", "[", "0", "]", "\n", "*", "block_mask", ".", "size", "(", ")", "[", "1", "]", "\n", "*", "block_mask", ".", "size", "(", ")", "[", "2", "]", "\n", "*", "block_mask", ".", "size", "(", ")", "[", "3", "]", "\n", ")", "\n", "count_ones", "=", "block_mask", ".", "sum", "(", ")", "\n", "\n", "return", "block_mask", "*", "x", "*", "(", "countM", "/", "count_ones", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.dropblock.DropBlock._compute_block_mask": [[41, 86], ["int", "int", "mask.nonzero", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "offsets.long.long.cuda", "non_zero_idxs.repeat.repeat.repeat", "offsets.long.long.repeat().view", "offsets.long.long.long", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "offsets.long.long.long", "offsets.long.long.repeat", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "", "def", "_compute_block_mask", "(", "self", ",", "mask", ")", ":", "\n", "        ", "left_padding", "=", "int", "(", "(", "self", ".", "block_size", "-", "1", ")", "/", "2", ")", "\n", "right_padding", "=", "int", "(", "self", ".", "block_size", "/", "2", ")", "\n", "\n", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "mask", ".", "shape", "\n", "non_zero_idxs", "=", "mask", ".", "nonzero", "(", ")", "\n", "nr_blocks", "=", "non_zero_idxs", ".", "shape", "[", "0", "]", "\n", "\n", "offsets", "=", "torch", ".", "stack", "(", "\n", "[", "\n", "torch", ".", "arange", "(", "self", ".", "block_size", ")", "\n", ".", "view", "(", "-", "1", ",", "1", ")", "\n", ".", "expand", "(", "self", ".", "block_size", ",", "self", ".", "block_size", ")", "\n", ".", "reshape", "(", "-", "1", ")", ",", "# - left_padding,", "\n", "torch", ".", "arange", "(", "self", ".", "block_size", ")", ".", "repeat", "(", "self", ".", "block_size", ")", ",", "# - left_padding", "\n", "]", "\n", ")", ".", "t", "(", ")", "\n", "offsets", "=", "torch", ".", "cat", "(", "(", "torch", ".", "zeros", "(", "self", ".", "block_size", "**", "2", ",", "2", ")", ".", "long", "(", ")", ",", "offsets", ".", "long", "(", ")", ")", ",", "1", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "offsets", "=", "offsets", ".", "cuda", "(", ")", "\n", "\n", "", "if", "nr_blocks", ">", "0", ":", "\n", "            ", "non_zero_idxs", "=", "non_zero_idxs", ".", "repeat", "(", "self", ".", "block_size", "**", "2", ",", "1", ")", "\n", "offsets", "=", "offsets", ".", "repeat", "(", "nr_blocks", ",", "1", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "offsets", "=", "offsets", ".", "long", "(", ")", "\n", "\n", "block_idxs", "=", "non_zero_idxs", "+", "offsets", "\n", "padded_mask", "=", "F", ".", "pad", "(", "\n", "mask", ",", "\n", "(", "left_padding", ",", "right_padding", ",", "left_padding", ",", "right_padding", ")", ",", "\n", ")", "\n", "padded_mask", "[", "\n", "block_idxs", "[", ":", ",", "0", "]", ",", "\n", "block_idxs", "[", ":", ",", "1", "]", ",", "\n", "block_idxs", "[", ":", ",", "2", "]", ",", "\n", "block_idxs", "[", ":", ",", "3", "]", ",", "\n", "]", "=", "1.0", "\n", "", "else", ":", "\n", "            ", "padded_mask", "=", "F", ".", "pad", "(", "\n", "mask", ",", "\n", "(", "left_padding", ",", "right_padding", ",", "left_padding", ",", "right_padding", ")", ",", "\n", ")", "\n", "\n", "", "block_mask", "=", "1", "-", "padded_mask", "\n", "return", "block_mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.init.weights_init_normal": [[5, 15], ["classname.find", "torch.nn.init.normal_", "classname.find", "torch.nn.init.normal_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["def", "weights_init_normal", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# print(classname)", "\n", "if", "classname", ".", "find", "(", "\"Conv2d\"", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "\"Linear\"", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "\"BatchNorm2d\"", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.init.weights_init_xavier": [[17, 27], ["classname.find", "torch.nn.init.xavier_normal_", "classname.find", "torch.nn.init.xavier_normal_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "weights_init_xavier", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# print(classname)", "\n", "if", "classname", ".", "find", "(", "\"Conv2d\"", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "\"Linear\"", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "\"BatchNorm2d\"", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.init.weights_init_kaiming": [[29, 39], ["classname.find", "torch.nn.init.kaiming_normal_", "classname.find", "torch.nn.init.kaiming_normal_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "weights_init_kaiming", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# print(classname)", "\n", "if", "classname", ".", "find", "(", "\"Conv2d\"", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "\"fan_in\"", ")", "\n", "", "elif", "classname", ".", "find", "(", "\"Linear\"", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "\"fan_in\"", ")", "\n", "", "elif", "classname", ".", "find", "(", "\"BatchNorm2d\"", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.init.weights_init_orthogonal": [[41, 51], ["classname.find", "torch.nn.init.orthogonal_", "classname.find", "torch.nn.init.orthogonal_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "weights_init_orthogonal", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# print(classname)", "\n", "if", "classname", ".", "find", "(", "\"Conv2d\"", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "\"Linear\"", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "\"BatchNorm2d\"", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.init.init_weights": [[53, 65], ["net.apply", "net.apply", "net.apply", "net.apply"], "function", ["None"], ["", "", "def", "init_weights", "(", "net", ",", "init_type", "=", "\"normal\"", ")", ":", "\n", "# print(\"initialization method [%s]\" % init_type)", "\n", "    ", "if", "init_type", "==", "\"normal\"", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_normal", ")", "\n", "", "elif", "init_type", "==", "\"xavier\"", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_xavier", ")", "\n", "", "elif", "init_type", "==", "\"kaiming\"", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "", "elif", "init_type", "==", "\"orthogonal\"", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_orthogonal", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.loss.L2DistLoss.__init__": [[8, 10], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "L2DistLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.loss.L2DistLoss.forward": [[11, 16], ["torch.mean", "torch.isnan().any", "torch.sqrt", "torch.sum", "torch.isnan"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feat1", ",", "feat2", ")", ":", "\n", "        ", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "(", "feat1", "-", "feat2", ")", "**", "2", ",", "dim", "=", "1", ")", ")", ")", "\n", "if", "torch", ".", "isnan", "(", "loss", ")", ".", "any", "(", ")", ":", "\n", "            ", "loss", "=", "0.0", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.loss.LabelSmoothCELoss.__init__": [[19, 23], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "smoothing", ")", ":", "\n", "        ", "super", "(", "LabelSmoothCELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.loss.LabelSmoothCELoss.forward": [[24, 31], ["torch.nn.functional.log_softmax", "nll_loss.squeeze.squeeze.squeeze", "loss.mean", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.mean", "target.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "log_prob", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "-", "1", ")", "\n", "nll_loss", "=", "-", "log_prob", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "target", ".", "unsqueeze", "(", "1", ")", ")", "\n", "nll_loss", "=", "nll_loss", ".", "squeeze", "(", "1", ")", "\n", "smooth_loss", "=", "-", "log_prob", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "loss", "=", "(", "1.0", "-", "self", ".", "smoothing", ")", "*", "nll_loss", "+", "self", ".", "smoothing", "*", "smooth_loss", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.loss.DistillKLLoss.__init__": [[34, 37], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "T", ")", ":", "\n", "        ", "super", "(", "DistillKLLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "T", "=", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.loss.DistillKLLoss.forward": [[38, 46], ["torch.nn.functional.log_softmax", "torch.nn.functional.softmax", "y_s.size", "torch.nn.functional.kl_div"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "y_s", ",", "y_t", ")", ":", "\n", "        ", "if", "y_t", "is", "None", ":", "\n", "            ", "return", "0.0", "\n", "\n", "", "p_s", "=", "F", ".", "log_softmax", "(", "y_s", "/", "self", ".", "T", ",", "dim", "=", "1", ")", "\n", "p_t", "=", "F", ".", "softmax", "(", "y_t", "/", "self", ".", "T", ",", "dim", "=", "1", ")", "\n", "loss", "=", "F", ".", "kl_div", "(", "p_s", ",", "p_t", ",", "size_average", "=", "False", ")", "*", "(", "self", ".", "T", "**", "2", ")", "/", "y_s", ".", "size", "(", "0", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.__init__": [[12, 19], ["torch.nn.Module.__init__", "kwargs.items", "setattr"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "init_type", ",", "model_type", "=", "ModelType", ".", "ABSTRACT", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AbstractModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "init_type", "=", "init_type", "\n", "self", ".", "model_type", "=", "model_type", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.set_forward": [[20, 23], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "set_forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.set_forward_loss": [[24, 27], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_forward_loss", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.forward": [[28, 31], ["abstract_model.AbstractModel.emb_func"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "emb_func", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.train": [[32, 37], ["super().train", "hasattr", "abstract_model.AbstractModel.distill_layer.train"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.train", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "AbstractModel", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "# for methods with distiller", "\n", "if", "hasattr", "(", "self", ",", "\"distill_layer\"", ")", ":", "\n", "            ", "self", ".", "distill_layer", ".", "train", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.eval": [[38, 40], ["super().eval"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.eval"], ["", "", "def", "eval", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "AbstractModel", ",", "self", ")", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel._init_network": [[41, 43], ["init.init_weights"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.init.init_weights"], ["", "def", "_init_network", "(", "self", ")", ":", "\n", "        ", "init_weights", "(", "self", ",", "self", ".", "init_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel._generate_local_targets": [[44, 52], ["torch.arange().view().repeat().view", "torch.arange().view().repeat", "torch.arange().view", "torch.arange"], "methods", ["None"], ["", "def", "_generate_local_targets", "(", "self", ",", "episode_size", ")", ":", "\n", "        ", "local_targets", "=", "(", "\n", "torch", ".", "arange", "(", "self", ".", "way_num", ",", "dtype", "=", "torch", ".", "long", ")", "\n", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", "\n", ".", "repeat", "(", "episode_size", ",", "1", ",", "self", ".", "shot_num", "+", "self", ".", "query_num", ")", "\n", ".", "view", "(", "-", "1", ")", "\n", ")", "\n", "return", "local_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode": [[53, 153], ["abstract_model.AbstractModel._generate_local_targets().to().contiguous().view", "features.view.view.size", "features.view.view.contiguous().view", "features[].contiguous().view", "features[].contiguous().view", "local_labels[].reshape", "local_labels[].reshape", "abstract_model.AbstractModel._generate_local_targets().to().contiguous", "features.view.view.contiguous().view", "features[].contiguous().view", "features[].contiguous().view", "local_labels[].reshape", "local_labels[].reshape", "features.view.view.contiguous", "features[].contiguous", "features[].contiguous", "features.view.view.contiguous().view", "features[].contiguous().view", "features[].contiguous().view", "local_labels[].reshape", "local_labels[].reshape", "abstract_model.AbstractModel._generate_local_targets().to", "features.view.view.contiguous", "features[].contiguous", "features[].contiguous", "features.view.view.view", "features[].contiguous().view", "features[].contiguous().view", "local_labels[].reshape", "local_labels[].reshape", "Exception", "features.view.view.contiguous", "features[].contiguous", "features[].contiguous", "abstract_model.AbstractModel._generate_local_targets", "features[].contiguous", "features[].contiguous"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel._generate_local_targets"], ["", "def", "split_by_episode", "(", "self", ",", "features", ",", "mode", ")", ":", "\n", "        ", "\"\"\"\n        split features by episode and\n        generate local targets + split labels by episode\n        \"\"\"", "\n", "episode_size", "=", "features", ".", "size", "(", "0", ")", "//", "(", "self", ".", "way_num", "*", "(", "self", ".", "shot_num", "+", "self", ".", "query_num", ")", ")", "\n", "local_labels", "=", "(", "\n", "self", ".", "_generate_local_targets", "(", "episode_size", ")", "\n", ".", "to", "(", "self", ".", "device", ")", "\n", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "episode_size", ",", "self", ".", "way_num", ",", "self", ".", "shot_num", "+", "self", ".", "query_num", ")", "\n", ")", "\n", "\n", "if", "mode", "==", "1", ":", "# input 2D, return 3D(with episode) E.g.ANIL & R2D2", "\n", "            ", "features", "=", "features", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "episode_size", ",", "self", ".", "way_num", ",", "self", ".", "shot_num", "+", "self", ".", "query_num", ",", "-", "1", "\n", ")", "\n", "support_features", "=", "(", "\n", "features", "[", ":", ",", ":", ",", ":", "self", ".", "shot_num", ",", ":", "]", "\n", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "episode_size", ",", "self", ".", "way_num", "*", "self", ".", "shot_num", ",", "-", "1", ")", "\n", ")", "\n", "query_features", "=", "(", "\n", "features", "[", ":", ",", ":", ",", "self", ".", "shot_num", ":", ",", ":", "]", "\n", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "episode_size", ",", "self", ".", "way_num", "*", "self", ".", "query_num", ",", "-", "1", ")", "\n", ")", "\n", "support_target", "=", "local_labels", "[", ":", ",", ":", ",", ":", "self", ".", "shot_num", "]", ".", "reshape", "(", "\n", "episode_size", ",", "self", ".", "way_num", "*", "self", ".", "shot_num", "\n", ")", "\n", "query_target", "=", "local_labels", "[", ":", ",", ":", ",", "self", ".", "shot_num", ":", "]", ".", "reshape", "(", "\n", "episode_size", ",", "self", ".", "way_num", "*", "self", ".", "query_num", "\n", ")", "\n", "", "elif", "mode", "==", "2", ":", "# input 4D, return 5D(with episode) E.g.DN4", "\n", "            ", "b", ",", "c", ",", "h", ",", "w", "=", "features", ".", "shape", "\n", "features", "=", "features", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "episode_size", ",", "\n", "self", ".", "way_num", ",", "\n", "self", ".", "shot_num", "+", "self", ".", "query_num", ",", "\n", "c", ",", "\n", "h", ",", "\n", "w", ",", "\n", ")", "\n", "support_features", "=", "(", "\n", "features", "[", ":", ",", ":", ",", ":", "self", ".", "shot_num", ",", ":", ",", "...", "]", "\n", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "episode_size", ",", "self", ".", "way_num", "*", "self", ".", "shot_num", ",", "c", ",", "h", ",", "w", ")", "\n", ")", "\n", "query_features", "=", "(", "\n", "features", "[", ":", ",", ":", ",", "self", ".", "shot_num", ":", ",", ":", ",", "...", "]", "\n", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "episode_size", ",", "self", ".", "way_num", "*", "self", ".", "query_num", ",", "c", ",", "h", ",", "w", ")", "\n", ")", "\n", "support_target", "=", "local_labels", "[", ":", ",", ":", ",", ":", "self", ".", "shot_num", "]", ".", "reshape", "(", "\n", "episode_size", ",", "self", ".", "way_num", "*", "self", ".", "shot_num", "\n", ")", "\n", "query_target", "=", "local_labels", "[", ":", ",", ":", ",", "self", ".", "shot_num", ":", "]", ".", "reshape", "(", "\n", "episode_size", ",", "self", ".", "way_num", "*", "self", ".", "query_num", "\n", ")", "\n", "", "elif", "mode", "==", "3", ":", "# input 4D, return 4D(w/o episode) E.g.realationnet", "\n", "            ", "b", ",", "c", ",", "h", ",", "w", "=", "features", ".", "shape", "\n", "features", "=", "features", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "self", ".", "way_num", ",", "self", ".", "shot_num", "+", "self", ".", "query_num", ",", "c", ",", "h", ",", "w", "\n", ")", "\n", "support_features", "=", "(", "\n", "features", "[", ":", ",", ":", "self", ".", "shot_num", ",", ":", ",", "...", "]", "\n", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "self", ".", "way_num", "*", "self", ".", "shot_num", ",", "c", ",", "h", ",", "w", ")", "\n", ")", "\n", "query_features", "=", "(", "\n", "features", "[", ":", ",", "self", ".", "shot_num", ":", ",", ":", ",", "...", "]", "\n", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "self", ".", "way_num", "*", "self", ".", "query_num", ",", "c", ",", "h", ",", "w", ")", "\n", ")", "\n", "support_target", "=", "local_labels", "[", ":", ",", ":", ",", ":", "self", ".", "shot_num", "]", ".", "reshape", "(", "\n", "episode_size", ",", "self", ".", "way_num", "*", "self", ".", "shot_num", "\n", ")", "\n", "query_target", "=", "local_labels", "[", ":", ",", ":", ",", "self", ".", "shot_num", ":", "]", ".", "reshape", "(", "\n", "episode_size", ",", "self", ".", "way_num", "*", "self", ".", "query_num", "\n", ")", "\n", "", "elif", "(", "\n", "mode", "==", "4", "\n", ")", ":", "# finetuning baseline input 2D, return 2D(w/o episode) E.g.baseline set_forward", "\n", "            ", "features", "=", "features", ".", "view", "(", "self", ".", "way_num", ",", "self", ".", "shot_num", "+", "self", ".", "query_num", ",", "-", "1", ")", "\n", "support_features", "=", "(", "\n", "features", "[", ":", ",", ":", "self", ".", "shot_num", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "way_num", "*", "self", ".", "shot_num", ",", "-", "1", ")", "\n", ")", "\n", "query_features", "=", "(", "\n", "features", "[", ":", ",", "self", ".", "shot_num", ":", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "way_num", "*", "self", ".", "query_num", ",", "-", "1", ")", "\n", ")", "\n", "support_target", "=", "local_labels", "[", ":", ",", ":", ",", ":", "self", ".", "shot_num", "]", ".", "reshape", "(", "\n", "self", ".", "way_num", "*", "self", ".", "shot_num", "\n", ")", "\n", "query_target", "=", "local_labels", "[", ":", ",", ":", ",", "self", ".", "shot_num", ":", "]", ".", "reshape", "(", "\n", "self", ".", "way_num", "*", "self", ".", "query_num", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"mode should in [1,2,3,4], not {}\"", ".", "format", "(", "mode", ")", ")", "\n", "\n", "", "return", "support_features", ",", "query_features", ",", "support_target", ",", "query_target", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.reverse_setting_info": [[154, 169], ["None"], "methods", ["None"], ["", "def", "reverse_setting_info", "(", "self", ")", ":", "\n", "        ", "(", "\n", "self", ".", "way_num", ",", "\n", "self", ".", "shot_num", ",", "\n", "self", ".", "query_num", ",", "\n", "self", ".", "test_way", ",", "\n", "self", ".", "test_shot", ",", "\n", "self", ".", "test_query", ",", "\n", ")", "=", "(", "\n", "self", ".", "test_way", ",", "\n", "self", ".", "test_shot", ",", "\n", "self", ".", "test_query", ",", "\n", "self", ".", "way_num", ",", "\n", "self", ".", "shot_num", ",", "\n", "self", ".", "query_num", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.Encoder.__init__": [[64, 80], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "way_num", ",", "shot_num", ",", "feat_dim", ",", "hid_dim", ",", "drop_prob", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "way_num", "=", "way_num", "\n", "self", ".", "shot_num", "=", "shot_num", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "hid_dim", "=", "hid_dim", "\n", "self", ".", "encoder_func", "=", "nn", ".", "Linear", "(", "feat_dim", ",", "hid_dim", ")", "\n", "self", ".", "relation_net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2", "*", "hid_dim", ",", "2", "*", "hid_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "2", "*", "hid_dim", ",", "2", "*", "hid_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "2", "*", "hid_dim", ",", "2", "*", "hid_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "drop_out", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.Encoder.forward": [[81, 107], ["leo.Encoder.drop_out", "leo.Encoder.encoder_func", "out.contiguous().reshape.contiguous().reshape.size", "out.contiguous().reshape.contiguous().reshape.contiguous().reshape", "torch.repeat_interleave", "torch.repeat_interleave", "out.contiguous().reshape.contiguous().reshape.repeat", "torch.cat", "leo.Encoder.relation_net", "torch.mean.reshape", "torch.mean", "leo.sample", "leo.cal_kl_div", "out.contiguous().reshape.contiguous().reshape.contiguous"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.sample", "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.cal_kl_div"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "drop_out", "(", "x", ")", "\n", "out", "=", "self", ".", "encoder_func", "(", "x", ")", "\n", "episode_size", "=", "out", ".", "size", "(", "0", ")", "\n", "out", "=", "out", ".", "contiguous", "(", ")", ".", "reshape", "(", "episode_size", ",", "self", ".", "way_num", ",", "self", ".", "shot_num", ",", "-", "1", ")", "\n", "\n", "# for relation net", "\n", "t1", "=", "torch", ".", "repeat_interleave", "(", "out", ",", "self", ".", "shot_num", ",", "dim", "=", "2", ")", "\n", "t1", "=", "torch", ".", "repeat_interleave", "(", "t1", ",", "self", ".", "way_num", ",", "dim", "=", "1", ")", "\n", "t2", "=", "out", ".", "repeat", "(", "(", "1", ",", "self", ".", "way_num", ",", "self", ".", "shot_num", ",", "1", ")", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "t1", ",", "t2", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "x", "=", "self", ".", "relation_net", "(", "x", ")", "\n", "x", "=", "x", ".", "reshape", "(", "\n", "episode_size", ",", "\n", "self", ".", "way_num", ",", "\n", "self", ".", "way_num", "*", "self", ".", "shot_num", "*", "self", ".", "shot_num", ",", "\n", "-", "1", ",", "\n", ")", "\n", "x", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "2", ")", "\n", "\n", "latent", "=", "sample", "(", "x", ",", "self", ".", "hid_dim", ")", "\n", "mean", ",", "var", "=", "x", "[", ":", ",", ":", ",", ":", "self", ".", "hid_dim", "]", ",", "x", "[", ":", ",", ":", ",", "self", ".", "hid_dim", ":", "]", "\n", "kl_div", "=", "cal_kl_div", "(", "latent", ",", "mean", ",", "var", ")", "\n", "\n", "return", "latent", ",", "kl_div", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.Decoder.__init__": [[110, 113], ["torch.nn.Module.__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feat_dim", ",", "hid_dim", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "decoder_func", "=", "nn", ".", "Linear", "(", "hid_dim", ",", "2", "*", "feat_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.Decoder.forward": [[114, 116], ["leo.Decoder.decoder_func"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "decoder_func", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.LEO.__init__": [[119, 140], ["meta_model.MetaModel.__init__", "leo.Encoder", "leo.Decoder", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "inner_para", ",", "\n", "feat_dim", ",", "\n", "hid_dim", ",", "\n", "kl_weight", ",", "\n", "encoder_penalty_weight", ",", "\n", "orthogonality_penalty_weight", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "LEO", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "hid_dim", "=", "hid_dim", "\n", "self", ".", "encoder", "=", "Encoder", "(", "self", ".", "way_num", ",", "self", ".", "shot_num", ",", "feat_dim", ",", "hid_dim", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "feat_dim", ",", "hid_dim", ")", "\n", "self", ".", "inner_para", "=", "inner_para", "\n", "self", ".", "kl_weight", "=", "kl_weight", "\n", "self", ".", "encoder_penalty_weight", "=", "encoder_penalty_weight", "\n", "self", ".", "orthogonality_penalty_weight", "=", "orthogonality_penalty_weight", "\n", "\n", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.LEO.set_forward": [[141, 165], ["image.to.to.to", "leo.LEO.split_by_episode", "support_feat.size", "leo.LEO.set_forward_adaptation", "leo.LEO.decoder", "leo.sample", "leo.LEO.permute", "leo.LEO.finetune", "torch.bmm", "output.contiguous().reshape.contiguous().reshape.contiguous().reshape", "core.utils.accuracy", "torch.no_grad", "leo.LEO.emb_func", "query_target.contiguous().reshape", "output.contiguous().reshape.contiguous().reshape.contiguous", "query_target.contiguous"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline.Baseline.set_forward_adaptation", "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.sample", "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.LEO.finetune", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "1", ")", "\n", "episode_size", "=", "support_feat", ".", "size", "(", "0", ")", "\n", "\n", "latents", ",", "kl_div", ",", "encoder_penalty", "=", "self", ".", "set_forward_adaptation", "(", "\n", "support_feat", ",", "support_target", ",", "episode_size", "\n", ")", "\n", "\n", "leo_weight", "=", "self", ".", "decoder", "(", "latents", ")", "\n", "leo_weight", "=", "sample", "(", "leo_weight", ",", "self", ".", "feat_dim", ")", "\n", "leo_weight", "=", "leo_weight", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "leo_weight", "=", "self", ".", "finetune", "(", "leo_weight", ",", "support_feat", ",", "support_target", ")", "\n", "\n", "output", "=", "torch", ".", "bmm", "(", "query_feat", ",", "leo_weight", ")", "\n", "output", "=", "output", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "way_num", ")", "\n", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ")", ")", "\n", "return", "output", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.LEO.set_forward_loss": [[166, 199], ["image.to.to.to", "leo.LEO.split_by_episode", "support_feat.size", "leo.LEO.set_forward_adaptation", "leo.LEO.decoder", "leo.sample", "leo.LEO.permute", "leo.LEO.finetune", "torch.bmm", "output.contiguous().reshape.contiguous().reshape.contiguous().reshape", "leo.LEO.loss_func", "leo.orthogonality", "core.utils.accuracy", "torch.no_grad", "leo.LEO.emb_func", "query_target.contiguous().reshape", "query_target.contiguous().reshape", "output.contiguous().reshape.contiguous().reshape.contiguous", "list", "query_target.contiguous", "leo.LEO.decoder.parameters", "query_target.contiguous"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline.Baseline.set_forward_adaptation", "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.sample", "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.LEO.finetune", "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.orthogonality", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLBaseLearner.parameters"], ["", "def", "set_forward_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "1", ")", "\n", "episode_size", "=", "support_feat", ".", "size", "(", "0", ")", "\n", "\n", "latent", ",", "kl_div", ",", "encoder_penalty", "=", "self", ".", "set_forward_adaptation", "(", "\n", "support_feat", ",", "support_target", ",", "episode_size", "\n", ")", "\n", "\n", "classifier_weight", "=", "self", ".", "decoder", "(", "latent", ")", "\n", "classifier_weight", "=", "sample", "(", "classifier_weight", ",", "self", ".", "feat_dim", ")", "\n", "classifier_weight", "=", "classifier_weight", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "classifier_weight", "=", "self", ".", "finetune", "(", "classifier_weight", ",", "support_feat", ",", "support_target", ")", "\n", "\n", "output", "=", "torch", ".", "bmm", "(", "query_feat", ",", "classifier_weight", ")", "\n", "output", "=", "output", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "way_num", ")", "\n", "pred_loss", "=", "self", ".", "loss_func", "(", "output", ",", "query_target", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n", "orthogonality_penalty", "=", "orthogonality", "(", "list", "(", "self", ".", "decoder", ".", "parameters", "(", ")", ")", "[", "0", "]", ")", "\n", "\n", "total_loss", "=", "(", "\n", "pred_loss", "\n", "+", "self", ".", "kl_weight", "*", "kl_div", "\n", "+", "self", ".", "encoder_penalty_weight", "*", "encoder_penalty", "\n", "+", "self", ".", "orthogonality_penalty_weight", "*", "orthogonality_penalty", "\n", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ")", ")", "\n", "return", "output", ",", "acc", ",", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.LEO.set_forward_adaptation": [[200, 219], ["leo.LEO.encoder", "range", "torch.mean", "latent.retain_grad", "leo.LEO.decoder", "leo.sample", "classifier_weight.permute.permute.permute", "torch.bmm", "output.contiguous().reshape.contiguous().reshape.contiguous().reshape", "support_target.contiguous().reshape", "leo.LEO.loss_func", "leo.LEO.backward", "output.contiguous().reshape.contiguous().reshape.contiguous", "support_target.contiguous"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.sample"], ["", "def", "set_forward_adaptation", "(", "self", ",", "emb_support", ",", "support_target", ",", "episode_size", ")", ":", "\n", "        ", "latent", ",", "kl_div", "=", "self", ".", "encoder", "(", "emb_support", ")", "\n", "latent_init", "=", "latent", "\n", "for", "i", "in", "range", "(", "self", ".", "inner_para", "[", "\"iter\"", "]", ")", ":", "\n", "            ", "latent", ".", "retain_grad", "(", ")", "\n", "classifier_weight", "=", "self", ".", "decoder", "(", "latent", ")", "\n", "classifier_weight", "=", "sample", "(", "classifier_weight", ",", "self", ".", "feat_dim", ")", "\n", "classifier_weight", "=", "classifier_weight", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "output", "=", "torch", ".", "bmm", "(", "emb_support", ",", "classifier_weight", ")", "\n", "output", "=", "output", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "way_num", ")", "\n", "targets", "=", "support_target", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "loss", "=", "self", ".", "loss_func", "(", "output", ",", "targets", ")", "\n", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "\n", "latent", "=", "latent", "-", "self", ".", "inner_para", "[", "\"lr\"", "]", "*", "latent", ".", "grad", "\n", "\n", "", "encoder_penalty", "=", "torch", ".", "mean", "(", "(", "latent_init", "-", "latent", ")", "**", "2", ")", "\n", "return", "latent", ",", "kl_div", ",", "encoder_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.LEO.finetune": [[220, 240], ["classifier_weight.retain_grad", "torch.bmm", "output.contiguous().reshape.contiguous().reshape.contiguous().reshape", "support_target.contiguous().reshape", "leo.LEO.loss_func", "range", "leo.LEO.backward", "classifier_weight.retain_grad", "torch.bmm", "output.contiguous().reshape.contiguous().reshape.contiguous().reshape", "support_target.contiguous().reshape", "leo.LEO.loss_func", "output.contiguous().reshape.contiguous().reshape.contiguous", "support_target.contiguous", "output.contiguous().reshape.contiguous().reshape.contiguous", "support_target.contiguous"], "methods", ["None"], ["", "def", "finetune", "(", "self", ",", "classifier_weight", ",", "emb_support", ",", "support_target", ")", ":", "\n", "        ", "classifier_weight", ".", "retain_grad", "(", ")", "\n", "output", "=", "torch", ".", "bmm", "(", "emb_support", ",", "classifier_weight", ")", "\n", "output", "=", "output", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "way_num", ")", "\n", "target", "=", "support_target", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "pred_loss", "=", "self", ".", "loss_func", "(", "output", ",", "target", ")", "\n", "\n", "for", "j", "in", "range", "(", "self", ".", "inner_para", "[", "\"finetune_iter\"", "]", ")", ":", "\n", "            ", "pred_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "classifier_weight", "=", "(", "\n", "classifier_weight", "-", "self", ".", "inner_para", "[", "\"finetune_lr\"", "]", "*", "classifier_weight", ".", "grad", "\n", ")", "\n", "classifier_weight", ".", "retain_grad", "(", ")", "\n", "\n", "output", "=", "torch", ".", "bmm", "(", "emb_support", ",", "classifier_weight", ")", "\n", "output", "=", "output", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "way_num", ")", "\n", "targets", "=", "support_target", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "pred_loss", "=", "self", ".", "loss_func", "(", "output", ",", "targets", ")", "\n", "\n", "", "return", "classifier_weight", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.sample": [[29, 33], ["torch.normal().to", "torch.normal", "mean.size"], "function", ["None"], ["def", "sample", "(", "weight", ",", "size", ")", ":", "\n", "    ", "mean", ",", "var", "=", "weight", "[", ":", ",", ":", ",", ":", "size", "]", ",", "weight", "[", ":", ",", ":", ",", "size", ":", "]", "\n", "z", "=", "torch", ".", "normal", "(", "0.0", ",", "1.0", ",", "mean", ".", "size", "(", ")", ")", ".", "to", "(", "weight", ".", "device", ")", "\n", "return", "mean", "+", "var", "*", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.cal_log_prob": [[35, 41], ["torch.log", "torch.log", "torch.tensor"], "function", ["None"], ["", "def", "cal_log_prob", "(", "x", ",", "mean", ",", "var", ")", ":", "\n", "    ", "eps", "=", "1e-20", "\n", "log_unnormalized", "=", "-", "0.5", "*", "(", "(", "x", "-", "mean", ")", "/", "(", "var", "+", "eps", ")", ")", "**", "2", "\n", "# log_normalization = torch.log(var + eps) + 0.5 * math.log(2 * math.pi)", "\n", "log_normalization", "=", "torch", ".", "log", "(", "var", "+", "eps", ")", "+", "0.5", "*", "torch", ".", "log", "(", "2", "*", "torch", ".", "tensor", "(", "math", ".", "pi", ")", ")", "\n", "return", "log_unnormalized", "-", "log_normalization", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.cal_kl_div": [[43, 50], ["torch.mean", "leo.cal_log_prob", "leo.cal_log_prob", "torch.zeros().to", "torch.ones().to", "torch.zeros", "torch.ones", "mean.size", "var.size"], "function", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.cal_log_prob", "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.cal_log_prob"], ["", "def", "cal_kl_div", "(", "latent", ",", "mean", ",", "var", ")", ":", "\n", "    ", "return", "torch", ".", "mean", "(", "\n", "cal_log_prob", "(", "latent", ",", "mean", ",", "var", ")", "\n", "-", "cal_log_prob", "(", "\n", "latent", ",", "\n", "torch", ".", "zeros", "(", "mean", ".", "size", "(", ")", ")", ".", "to", "(", "latent", ".", "device", ")", ",", "\n", "torch", ".", "ones", "(", "var", ".", "size", "(", ")", ")", ".", "to", "(", "latent", ".", "device", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.leo.orthogonality": [[54, 61], ["torch.mm", "torch.eye().to", "torch.mean", "weight.transpose", "torch.norm", "torch.mm", "correlation_matrix.size", "correlation_matrix.size", "wn.transpose", "torch.eye", "correlation_matrix.size"], "function", ["None"], ["", "def", "orthogonality", "(", "weight", ")", ":", "\n", "    ", "w2", "=", "torch", ".", "mm", "(", "weight", ",", "weight", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "wn", "=", "torch", ".", "norm", "(", "weight", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-20", "\n", "correlation_matrix", "=", "w2", "/", "torch", ".", "mm", "(", "wn", ",", "wn", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "assert", "correlation_matrix", ".", "size", "(", "0", ")", "==", "correlation_matrix", ".", "size", "(", "1", ")", "\n", "identity_matrix", "=", "torch", ".", "eye", "(", "correlation_matrix", ".", "size", "(", "0", ")", ")", ".", "to", "(", "weight", ".", "device", ")", "\n", "return", "torch", ".", "mean", "(", "(", "correlation_matrix", "-", "identity_matrix", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.versa.Predictor.__init__": [[27, 35], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ELU", "torch.ELU", "torch.Linear", "torch.Linear", "torch.ELU", "torch.ELU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feat_dim", ",", "hid_dim", ",", "out_dim", ")", ":", "\n", "        ", "super", "(", "Predictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "hid_dim", ")", ",", "\n", "nn", ".", "ELU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hid_dim", ",", "hid_dim", ")", ",", "\n", "nn", ".", "ELU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hid_dim", ",", "out_dim", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.versa.Predictor.forward": [[37, 40], ["versa.Predictor.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "layers", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.versa.VERSALayer.__init__": [[43, 47], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sample_num", ")", ":", "\n", "        ", "super", "(", "VERSALayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sample_num", "=", "sample_num", "\n", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"none\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.versa.VERSALayer.forward": [[48, 89], ["query_target.contiguous().reshape.contiguous().reshape.contiguous().reshape", "query_feat.size", "torch.log", "torch.log", "torch.log", "torch.log", "versa.VERSALayer.sample_normal().contiguous().reshape", "query_target.contiguous().reshape.contiguous().reshape.repeat", "loss.contiguous().reshape().permute().contiguous().reshape.contiguous().reshape().permute().contiguous().reshape.contiguous().reshape().permute().contiguous().reshape", "logits_sample_query.contiguous().reshape.contiguous().reshape.contiguous().reshape", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "versa.VERSALayer.loss_func", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.log", "torch.log", "torch.log", "torch.log", "query_target.contiguous().reshape.contiguous().reshape.contiguous", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "versa.VERSALayer.sample_normal().contiguous", "loss.contiguous().reshape().permute().contiguous().reshape.contiguous().reshape().permute().contiguous().reshape.contiguous().reshape().permute().contiguous", "torch.as_tensor().to", "torch.as_tensor().to", "torch.as_tensor().to", "torch.as_tensor().to", "logits_sample_query.contiguous().reshape.contiguous().reshape.contiguous", "torch.as_tensor().to", "torch.as_tensor().to", "torch.as_tensor().to", "torch.as_tensor().to", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "versa.VERSALayer.sample_normal", "loss.contiguous().reshape().permute().contiguous().reshape.contiguous().reshape().permute().contiguous().reshape.contiguous().reshape().permute", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "loss.contiguous().reshape().permute().contiguous().reshape.contiguous().reshape().permute().contiguous().reshape.contiguous().reshape", "loss.contiguous().reshape().permute().contiguous().reshape.contiguous().reshape().permute().contiguous().reshape.contiguous"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.versa.VERSALayer.sample_normal"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "way_num", ",", "\n", "query_feat", ",", "\n", "query_target", ",", "\n", "weight_mean", ",", "\n", "weight_logvar", ",", "\n", "bias_mean", ",", "\n", "bias_logvar", ",", "\n", ")", ":", "\n", "        ", "query_target", "=", "query_target", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "episode_size", "=", "query_feat", ".", "size", "(", "0", ")", "\n", "logits_mean_query", "=", "torch", ".", "matmul", "(", "query_feat", ",", "weight_mean", ")", "+", "bias_mean", "\n", "logits_log_var_query", "=", "torch", ".", "log", "(", "\n", "torch", ".", "matmul", "(", "query_feat", "**", "2", ",", "torch", ".", "exp", "(", "weight_logvar", ")", ")", "+", "torch", ".", "exp", "(", "bias_logvar", ")", "\n", ")", "\n", "logits_sample_query", "=", "(", "\n", "self", ".", "sample_normal", "(", "logits_mean_query", ",", "logits_log_var_query", ",", "self", ".", "sample_num", ")", "\n", ".", "contiguous", "(", ")", "\n", ".", "reshape", "(", "-", "1", ",", "way_num", ")", "\n", ")", "\n", "\n", "query_label_tiled", "=", "query_target", ".", "repeat", "(", "self", ".", "sample_num", ")", "\n", "loss", "=", "-", "self", ".", "loss_func", "(", "logits_sample_query", ",", "query_label_tiled", ")", "\n", "# FIXME nan", "\n", "loss", "=", "(", "\n", "loss", ".", "contiguous", "(", ")", "\n", ".", "reshape", "(", "episode_size", ",", "self", ".", "sample_num", ",", "-", "1", ")", "\n", ".", "permute", "(", "[", "1", ",", "0", ",", "2", "]", ")", "\n", ".", "contiguous", "(", ")", "\n", ".", "reshape", "(", "self", ".", "sample_num", ",", "-", "1", ")", "\n", ")", "\n", "task_score", "=", "torch", ".", "logsumexp", "(", "loss", ",", "dim", "=", "0", ")", "-", "torch", ".", "log", "(", "\n", "torch", ".", "as_tensor", "(", "self", ".", "sample_num", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "query_feat", ".", "device", ")", "\n", ")", "\n", "# loss = -torch.mean(task_score, dim=0)", "\n", "logits_sample_query", "=", "logits_sample_query", ".", "contiguous", "(", ")", ".", "reshape", "(", "self", ".", "sample_num", ",", "-", "1", ",", "way_num", ")", "\n", "averaged_prediction", "=", "torch", ".", "logsumexp", "(", "logits_sample_query", ",", "dim", "=", "0", ")", "-", "torch", ".", "log", "(", "\n", "torch", ".", "as_tensor", "(", "self", ".", "sample_num", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "query_feat", ".", "device", ")", "\n", ")", "\n", "return", "averaged_prediction", ",", "task_score", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.versa.VERSALayer.sample_normal": [[90, 94], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "mu.size", "torch.cat.cpu().numpy().tolist", "torch.cat.cpu().numpy().tolist", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat.cpu().numpy", "torch.cat.cpu().numpy", "torch.cat.cpu", "torch.cat.cpu"], "methods", ["None"], ["", "def", "sample_normal", "(", "self", ",", "mu", ",", "log_variance", ",", "num_samples", ")", ":", "\n", "        ", "shape", "=", "torch", ".", "cat", "(", "[", "torch", ".", "as_tensor", "(", "[", "num_samples", "]", ")", ",", "torch", ".", "as_tensor", "(", "mu", ".", "size", "(", ")", ")", "]", ")", "\n", "eps", "=", "torch", ".", "randn", "(", "shape", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", ".", "to", "(", "log_variance", ".", "device", ")", "\n", "return", "mu", "+", "eps", "*", "torch", ".", "sqrt", "(", "torch", ".", "exp", "(", "log_variance", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.versa.VERSA.__init__": [[97, 109], ["meta_model.MetaModel.__init__", "torch.Sequential", "torch.Sequential", "versa.Predictor", "versa.Predictor", "versa.Predictor", "versa.Predictor", "versa.VERSALayer", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feat_dim", ",", "sample_num", ",", "d_theta", "=", "256", ",", "drop_rate", "=", "0.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VERSA", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "sample_num", "=", "sample_num", "\n", "self", ".", "h", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "d_theta", ")", ",", "nn", ".", "BatchNorm1d", "(", "d_theta", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "drop_rate", ")", "\n", ")", "\n", "self", ".", "weight_mean", "=", "Predictor", "(", "d_theta", ",", "d_theta", ",", "d_theta", ")", "\n", "self", ".", "weight_logvar", "=", "Predictor", "(", "d_theta", ",", "d_theta", ",", "d_theta", ")", "\n", "self", ".", "bias_mean", "=", "Predictor", "(", "d_theta", ",", "d_theta", ",", "1", ")", "\n", "self", ".", "bias_logvar", "=", "Predictor", "(", "d_theta", ",", "d_theta", ",", "1", ")", "\n", "self", ".", "head", "=", "VERSALayer", "(", "sample_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.versa.VERSA.set_forward": [[110, 142], ["image.to.to.to", "versa.VERSA.emb_func", "versa.VERSA.h", "versa.VERSA.split_by_episode", "support_feat.size", "query_target.contiguous().reshape.contiguous().reshape.contiguous().reshape", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "versa.VERSA.weight_mean().permute", "versa.VERSA.weight_logvar().permute", "versa.VERSA.bias_mean().permute", "versa.VERSA.bias_logvar().permute", "versa.VERSA.head", "core.utils.accuracy", "support_feat.contiguous().reshape", "query_target.contiguous().reshape.contiguous().reshape.reshape", "query_target.contiguous().reshape.contiguous().reshape.contiguous", "versa.VERSA.weight_mean", "versa.VERSA.weight_logvar", "versa.VERSA.bias_mean", "versa.VERSA.bias_logvar", "support_feat.contiguous"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "feat", "=", "self", ".", "h", "(", "feat", ")", "\n", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "1", ")", "\n", "episode_size", "=", "support_feat", ".", "size", "(", "0", ")", "\n", "query_target", "=", "query_target", ".", "contiguous", "(", ")", ".", "reshape", "(", "episode_size", ",", "-", "1", ")", "\n", "\n", "class_feat", "=", "torch", ".", "mean", "(", "\n", "support_feat", ".", "contiguous", "(", ")", ".", "reshape", "(", "episode_size", ",", "self", ".", "way_num", ",", "self", ".", "shot_num", ",", "-", "1", ")", ",", "\n", "dim", "=", "2", ",", "\n", "keepdim", "=", "False", ",", "\n", ")", "\n", "\n", "weight_mean", "=", "self", ".", "weight_mean", "(", "class_feat", ")", ".", "permute", "(", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "weight_logvar", "=", "self", ".", "weight_logvar", "(", "class_feat", ")", ".", "permute", "(", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "bias_mean", "=", "self", ".", "bias_mean", "(", "class_feat", ")", ".", "permute", "(", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "bias_logvar", "=", "self", ".", "bias_logvar", "(", "class_feat", ")", ".", "permute", "(", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "\n", "output", ",", "_", "=", "self", ".", "head", "(", "\n", "self", ".", "way_num", ",", "\n", "query_feat", ",", "\n", "query_target", ",", "\n", "weight_mean", ",", "\n", "weight_logvar", ",", "\n", "bias_mean", ",", "\n", "bias_logvar", ",", "\n", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "return", "output", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.versa.VERSA.set_forward_loss": [[143, 176], ["image.to.to.to", "versa.VERSA.emb_func", "versa.VERSA.h", "versa.VERSA.split_by_episode", "support_feat.size", "query_target.contiguous().reshape.contiguous().reshape.contiguous().reshape", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "versa.VERSA.weight_mean().permute", "versa.VERSA.weight_logvar().permute", "versa.VERSA.bias_mean().permute", "versa.VERSA.bias_logvar().permute", "versa.VERSA.head", "core.utils.accuracy", "support_feat.contiguous().reshape", "query_target.contiguous().reshape.contiguous().reshape.reshape", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "query_target.contiguous().reshape.contiguous().reshape.contiguous", "versa.VERSA.weight_mean", "versa.VERSA.weight_logvar", "versa.VERSA.bias_mean", "versa.VERSA.bias_logvar", "support_feat.contiguous"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "feat", "=", "self", ".", "h", "(", "feat", ")", "\n", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "1", ")", "\n", "episode_size", "=", "support_feat", ".", "size", "(", "0", ")", "\n", "query_target", "=", "query_target", ".", "contiguous", "(", ")", ".", "reshape", "(", "episode_size", ",", "-", "1", ")", "\n", "\n", "class_feat", "=", "torch", ".", "mean", "(", "\n", "support_feat", ".", "contiguous", "(", ")", ".", "reshape", "(", "episode_size", ",", "self", ".", "way_num", ",", "self", ".", "shot_num", ",", "-", "1", ")", ",", "\n", "dim", "=", "2", ",", "\n", "keepdim", "=", "False", ",", "\n", ")", "\n", "\n", "weight_mean", "=", "self", ".", "weight_mean", "(", "class_feat", ")", ".", "permute", "(", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "weight_logvar", "=", "self", ".", "weight_logvar", "(", "class_feat", ")", ".", "permute", "(", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "bias_mean", "=", "self", ".", "bias_mean", "(", "class_feat", ")", ".", "permute", "(", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "bias_logvar", "=", "self", ".", "bias_logvar", "(", "class_feat", ")", ".", "permute", "(", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "\n", "output", ",", "task_score", "=", "self", ".", "head", "(", "\n", "self", ".", "way_num", ",", "\n", "query_feat", ",", "\n", "query_target", ",", "\n", "weight_mean", ",", "\n", "weight_logvar", ",", "\n", "bias_mean", ",", "\n", "bias_logvar", ",", "\n", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "task_score", ",", "dim", "=", "0", ")", "\n", "return", "output", ",", "acc", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.versa.VERSA.set_forward_adaptation": [[177, 179], ["None"], "methods", ["None"], ["", "def", "set_forward_adaptation", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.r2d2.R2D2Layer.__init__": [[79, 84], ["torch.nn.Module.__init__", "r2d2.R2D2Layer.register_parameter", "r2d2.R2D2Layer.register_parameter", "r2d2.R2D2Layer.register_parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "R2D2Layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_parameter", "(", "\"alpha\"", ",", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "1.0", "]", ")", ")", ")", "\n", "self", ".", "register_parameter", "(", "\"beta\"", ",", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "0.0", "]", ")", ")", ")", "\n", "self", ".", "register_parameter", "(", "\"gamma\"", ",", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "50.0", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.r2d2.R2D2Layer.forward": [[85, 114], ["query.size", "support.size", "support_target.squeeze.squeeze.squeeze", "r2d2.one_hot", "support_labels_one_hot.view.view.view", "torch.eye().expand().to", "r2d2.binv", "torch.bmm", "torch.bmm", "torch.bmm", "query.dim", "support.dim", "support_target.squeeze.squeeze.view", "r2d2.computeGramMatrix", "support.transpose", "query.size", "support.size", "query.size", "support.size", "torch.eye().expand", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.one_hot", "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.r2d2.binv", "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.r2d2.computeGramMatrix"], ["", "def", "forward", "(", "self", ",", "way_num", ",", "shot_num", ",", "query", ",", "support", ",", "support_target", ")", ":", "\n", "        ", "tasks_per_batch", "=", "query", ".", "size", "(", "0", ")", "\n", "n_support", "=", "support", ".", "size", "(", "1", ")", "\n", "support_target", "=", "support_target", ".", "squeeze", "(", ")", "\n", "\n", "assert", "query", ".", "dim", "(", ")", "==", "3", "\n", "assert", "support", ".", "dim", "(", ")", "==", "3", "\n", "assert", "query", ".", "size", "(", "0", ")", "==", "support", ".", "size", "(", "0", ")", "and", "query", ".", "size", "(", "2", ")", "==", "support", ".", "size", "(", "2", ")", "\n", "assert", "n_support", "==", "way_num", "*", "shot_num", "# n_support must equal to n_way * n_shot", "\n", "\n", "support_labels_one_hot", "=", "one_hot", "(", "support_target", ".", "view", "(", "tasks_per_batch", "*", "n_support", ")", ",", "way_num", ")", "\n", "support_labels_one_hot", "=", "support_labels_one_hot", ".", "view", "(", "tasks_per_batch", ",", "n_support", ",", "way_num", ")", "\n", "\n", "id_matrix", "=", "(", "\n", "torch", ".", "eye", "(", "n_support", ")", ".", "expand", "(", "tasks_per_batch", ",", "n_support", ",", "n_support", ")", ".", "to", "(", "query", ".", "device", ")", "\n", ")", "\n", "\n", "# Compute the dual form solution of the ridge regression.", "\n", "# W = X^T(X X^T - lambda * I)^(-1) Y", "\n", "ridge_sol", "=", "computeGramMatrix", "(", "support", ",", "support", ")", "+", "self", ".", "gamma", "*", "id_matrix", "\n", "ridge_sol", "=", "binv", "(", "ridge_sol", ")", "\n", "ridge_sol", "=", "torch", ".", "bmm", "(", "support", ".", "transpose", "(", "1", ",", "2", ")", ",", "ridge_sol", ")", "\n", "ridge_sol", "=", "torch", ".", "bmm", "(", "ridge_sol", ",", "support_labels_one_hot", ")", "\n", "\n", "# Compute the classification score.", "\n", "# score = W X", "\n", "logit", "=", "torch", ".", "bmm", "(", "query", ",", "ridge_sol", ")", "\n", "logit", "=", "self", ".", "alpha", "*", "logit", "+", "self", ".", "beta", "\n", "return", "logit", ",", "ridge_sol", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.r2d2.R2D2.__init__": [[117, 122], ["meta_model.MetaModel.__init__", "torch.nn.CrossEntropyLoss", "r2d2.R2D2Layer", "r2d2.R2D2._init_network"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__", "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel._init_network"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "R2D2", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "classifier", "=", "R2D2Layer", "(", ")", "\n", "self", ".", "_init_network", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.r2d2.R2D2.set_forward": [[123, 136], ["image.to.to.to", "r2d2.R2D2.emb_func", "r2d2.R2D2.split_by_episode", "r2d2.R2D2.classifier", "output.contiguous().reshape.contiguous().reshape.contiguous().reshape", "core.utils.accuracy", "output.contiguous().reshape.contiguous().reshape.squeeze", "query_target.contiguous().reshape", "output.contiguous().reshape.contiguous().reshape.contiguous", "query_target.contiguous"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "1", ")", "\n", "output", ",", "weight", "=", "self", ".", "classifier", "(", "\n", "self", ".", "way_num", ",", "self", ".", "shot_num", ",", "query_feat", ",", "support_feat", ",", "support_target", "\n", ")", "\n", "\n", "output", "=", "output", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "way_num", ")", "\n", "acc", "=", "accuracy", "(", "output", ".", "squeeze", "(", ")", ",", "query_target", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ")", ")", "\n", "return", "output", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.r2d2.R2D2.set_forward_loss": [[137, 151], ["image.to.to.to", "r2d2.R2D2.emb_func", "r2d2.R2D2.split_by_episode", "r2d2.R2D2.classifier", "output.contiguous().reshape.contiguous().reshape.contiguous().reshape", "r2d2.R2D2.loss_func", "core.utils.accuracy", "query_target.contiguous().reshape", "output.contiguous().reshape.contiguous().reshape.squeeze", "query_target.contiguous().reshape", "output.contiguous().reshape.contiguous().reshape.contiguous", "query_target.contiguous", "query_target.contiguous"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "1", ")", "\n", "output", ",", "weight", "=", "self", ".", "classifier", "(", "\n", "self", ".", "way_num", ",", "self", ".", "shot_num", ",", "query_feat", ",", "support_feat", ",", "support_target", "\n", ")", "\n", "\n", "output", "=", "output", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "way_num", ")", "\n", "loss", "=", "self", ".", "loss_func", "(", "output", ",", "query_target", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ")", ")", "\n", "acc", "=", "accuracy", "(", "output", ".", "squeeze", "(", ")", ",", "query_target", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ")", ")", "\n", "return", "output", ",", "acc", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.r2d2.R2D2.set_forward_adaptation": [[152, 154], ["None"], "methods", ["None"], ["", "def", "set_forward_adaptation", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.r2d2.computeGramMatrix": [[25, 41], ["torch.bmm", "A.dim", "B.dim", "B.transpose", "A.size", "B.size", "A.size", "B.size"], "function", ["None"], ["def", "computeGramMatrix", "(", "A", ",", "B", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a linear kernel matrix between A and B.\n    We assume that each row in A and B represents a d-dimensional feature vector.\n\n    Parameters:\n      A:  a (n_batch, n, d) Tensor.\n      B:  a (n_batch, m, d) Tensor.\n    Returns: a (n_batch, n, m) Tensor.\n    \"\"\"", "\n", "\n", "assert", "A", ".", "dim", "(", ")", "==", "3", "\n", "assert", "B", ".", "dim", "(", ")", "==", "3", "\n", "assert", "A", ".", "size", "(", "0", ")", "==", "B", ".", "size", "(", "0", ")", "and", "A", ".", "size", "(", "2", ")", "==", "B", ".", "size", "(", "2", ")", "\n", "\n", "return", "torch", ".", "bmm", "(", "A", ",", "B", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.r2d2.binv": [[43, 58], ["b_mat.new_ones().diag().expand_as().to", "torch.solve", "b_mat.new_ones().diag().expand_as", "b_mat.new_ones().diag", "b_mat.new_ones", "b_mat.size"], "function", ["None"], ["", "def", "binv", "(", "b_mat", ")", ":", "\n", "    ", "\"\"\"\n    Computes an inverse of each matrix in the batch.\n    Pytorch 0.4.1 does not support batched matrix inverse.\n    Hence, we are solving AX=I.\n\n    Parameters:\n      b_mat:  a (n_batch, n, n) Tensor.\n    Returns: a (n_batch, n, n) Tensor.\n    \"\"\"", "\n", "\n", "id_matrix", "=", "b_mat", ".", "new_ones", "(", "b_mat", ".", "size", "(", "-", "1", ")", ")", ".", "diag", "(", ")", ".", "expand_as", "(", "b_mat", ")", ".", "to", "(", "b_mat", ".", "device", ")", "\n", "b_inv", ",", "_", "=", "torch", ".", "solve", "(", "id_matrix", ",", "b_mat", ")", "\n", "\n", "return", "b_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.r2d2.one_hot": [[60, 76], ["torch.zeros().to", "indices.view", "encoded_indicie.scatter_.scatter_", "torch.zeros", "indices.size", "torch.Size", "indices.size", "torch.Size"], "function", ["None"], ["", "def", "one_hot", "(", "indices", ",", "depth", ")", ":", "\n", "    ", "\"\"\"\n    Returns a one-hot tensor.\n    This is a PyTorch equivalent of Tensorflow's tf.one_hot.\n\n    Parameters:\n      indices:  a (n_batch, m) Tensor or (m) Tensor.\n      depth: a scalar. Represents the depth of the one hot dimension.\n    Returns: a (n_batch, m, depth) Tensor or (m, depth) Tensor.\n    \"\"\"", "\n", "\n", "encoded_indicie", "=", "torch", ".", "zeros", "(", "indices", ".", "size", "(", ")", "+", "torch", ".", "Size", "(", "[", "depth", "]", ")", ")", ".", "to", "(", "indices", ".", "device", ")", "\n", "index", "=", "indices", ".", "view", "(", "indices", ".", "size", "(", ")", "+", "torch", ".", "Size", "(", "[", "1", "]", ")", ")", "\n", "encoded_indicie", "=", "encoded_indicie", ".", "scatter_", "(", "1", ",", "index", ",", "1", ")", "\n", "\n", "return", "encoded_indicie", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.mtl.MTLBaseLearner.__init__": [[34, 44], ["torch.nn.Module.__init__", "torch.nn.ParameterList", "torch.nn.ParameterList", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "mtl.MTLBaseLearner.vars.append", "torch.nn.Parameter", "torch.nn.Parameter", "mtl.MTLBaseLearner.vars.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["def", "__init__", "(", "self", ",", "ways", ",", "z_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ways", "=", "ways", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "vars", "=", "nn", ".", "ParameterList", "(", ")", "\n", "self", ".", "fc1_w", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "[", "self", ".", "ways", ",", "self", ".", "z_dim", "]", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "fc1_w", ")", "\n", "self", ".", "vars", ".", "append", "(", "self", ".", "fc1_w", ")", "\n", "self", ".", "fc1_b", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "ways", ")", ")", "\n", "self", ".", "vars", ".", "append", "(", "self", ".", "fc1_b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.mtl.MTLBaseLearner.forward": [[45, 52], ["torch.linear", "torch.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_x", ",", "the_vars", "=", "None", ")", ":", "\n", "        ", "if", "the_vars", "is", "None", ":", "\n", "            ", "the_vars", "=", "self", ".", "vars", "\n", "", "fc1_w", "=", "the_vars", "[", "0", "]", "\n", "fc1_b", "=", "the_vars", "[", "1", "]", "\n", "net", "=", "F", ".", "linear", "(", "input_x", ",", "fc1_w", ",", "fc1_b", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.mtl.MTLBaseLearner.parameters": [[53, 55], ["None"], "methods", ["None"], ["", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vars", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.mtl.MTL.__init__": [[58, 69], ["meta_model.MetaModel.__init__", "MTLBaseLearner().to", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "backbone.utils.convert_mtl_module", "mtl.MTLBaseLearner"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.mtl_module.convert_mtl_module"], ["    ", "def", "__init__", "(", "self", ",", "feat_dim", ",", "num_classes", ",", "inner_param", ",", "use_MTL", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MTL", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "base_learner", "=", "MTLBaseLearner", "(", "self", ".", "way_num", ",", "z_dim", "=", "self", ".", "feat_dim", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "inner_param", "=", "inner_param", "\n", "\n", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "convert_mtl_module", "(", "self", ",", "use_MTL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.mtl.MTL.set_forward": [[70, 89], ["image.to.to.to", "global_target.to.to.to", "mtl.MTL.emb_func", "mtl.MTL.split_by_episode", "mtl.MTL.set_forward_adaptation", "classifier", "core.utils.accuracy", "query_target.contiguous().reshape", "query_target.contiguous"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline.Baseline.set_forward_adaptation", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n        meta-validation\n        \"\"\"", "\n", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "global_target", "=", "global_target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "\n", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "4", ")", "\n", "\n", "classifier", ",", "base_learner_weight", "=", "self", ".", "set_forward_adaptation", "(", "support_feat", ",", "support_target", ")", "\n", "\n", "output", "=", "classifier", "(", "query_feat", ",", "base_learner_weight", ")", "\n", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n", "return", "output", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.mtl.MTL.set_forward_loss": [[90, 109], ["image.to.to.to", "global_target.to.to.to", "mtl.MTL.emb_func", "mtl.MTL.split_by_episode", "mtl.MTL.set_forward_adaptation", "classifier", "mtl.MTL.loss_func", "core.utils.accuracy", "query_target.contiguous().reshape", "query_target.contiguous"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline.Baseline.set_forward_adaptation", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n        meta-train\n        \"\"\"", "\n", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "global_target", "=", "global_target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "\n", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "4", ")", "\n", "\n", "classifier", ",", "base_learner_weight", "=", "self", ".", "set_forward_adaptation", "(", "support_feat", ",", "support_target", ")", "\n", "\n", "output", "=", "classifier", "(", "query_feat", ",", "base_learner_weight", ")", "\n", "loss", "=", "self", ".", "loss_func", "(", "output", ",", "query_target", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ")", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ")", "\n", "\n", "return", "output", ",", "acc", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.mtl.MTL.set_forward_adaptation": [[110, 129], ["mtl.MTL.base_learner", "mtl.MTL.loss_func", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "list", "range", "mtl.MTL.base_learner.parameters", "map", "mtl.MTL.base_learner", "torch.cross_entropy", "torch.cross_entropy", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "list", "zip", "map", "mtl.MTL.base_learner.parameters", "zip"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLBaseLearner.parameters", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLBaseLearner.parameters"], ["", "def", "set_forward_adaptation", "(", "self", ",", "support_feat", ",", "support_target", ")", ":", "\n", "        ", "classifier", "=", "self", ".", "base_learner", "\n", "logit", "=", "self", ".", "base_learner", "(", "support_feat", ")", "\n", "loss", "=", "self", ".", "loss_func", "(", "logit", ",", "support_target", ")", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "base_learner", ".", "parameters", "(", ")", ")", "\n", "fast_parameters", "=", "list", "(", "\n", "map", "(", "\n", "lambda", "p", ":", "p", "[", "1", "]", "-", "0.01", "*", "p", "[", "0", "]", ",", "\n", "zip", "(", "grad", ",", "self", ".", "base_learner", ".", "parameters", "(", ")", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "for", "_", "in", "range", "(", "1", ",", "self", ".", "inner_param", "[", "\"iter\"", "]", ")", ":", "\n", "            ", "logit", "=", "self", ".", "base_learner", "(", "support_feat", ",", "fast_parameters", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logit", ",", "support_target", ")", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "fast_parameters", ")", "\n", "fast_parameters", "=", "list", "(", "map", "(", "lambda", "p", ":", "p", "[", "1", "]", "-", "0.01", "*", "p", "[", "0", "]", ",", "zip", "(", "grad", ",", "fast_parameters", ")", ")", ")", "\n", "\n", "", "return", "classifier", ",", "fast_parameters", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.maml.MAMLLayer.__init__": [[30, 33], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feat_dim", "=", "64", ",", "way_num", "=", "5", ")", "->", "None", ":", "\n", "        ", "super", "(", "MAMLLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "feat_dim", ",", "way_num", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.maml.MAMLLayer.forward": [[34, 36], ["maml.MAMLLayer.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layers", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.maml.MAML.__init__": [[39, 47], ["meta_model.MetaModel.__init__", "torch.nn.CrossEntropyLoss", "maml.MAMLLayer", "backbone.utils.convert_maml_module"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.maml_module.convert_maml_module"], ["    ", "def", "__init__", "(", "self", ",", "inner_param", ",", "feat_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MAML", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "classifier", "=", "MAMLLayer", "(", "feat_dim", ",", "way_num", "=", "self", ".", "way_num", ")", "\n", "self", ".", "inner_param", "=", "inner_param", "\n", "\n", "convert_maml_module", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.maml.MAML.forward_output": [[48, 52], ["maml.MAML.emb_func", "maml.MAML.classifier"], "methods", ["None"], ["", "def", "forward_output", "(", "self", ",", "x", ")", ":", "\n", "        ", "out1", "=", "self", ".", "emb_func", "(", "x", ")", "\n", "out2", "=", "self", ".", "classifier", "(", "out1", ")", "\n", "return", "out2", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.maml.MAML.set_forward": [[53, 76], ["image.to.to.to", "maml.MAML.split_by_episode", "support_image.size", "range", "torch.cat", "core.utils.accuracy", "support_image[].contiguous().reshape", "query_image[].contiguous().reshape", "support_target[].reshape", "maml.MAML.set_forward_adaptation", "maml.MAML.forward_output", "output_list.append", "query_target.contiguous().view", "support_image[].contiguous", "query_image[].contiguous", "query_target.contiguous"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline.Baseline.set_forward_adaptation", "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.maml.MAML.forward_output"], ["", "def", "set_forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "image", ",", "global_target", "=", "batch", "# unused global_target", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "support_image", ",", "query_image", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "\n", "image", ",", "mode", "=", "2", "\n", ")", "\n", "episode_size", ",", "_", ",", "c", ",", "h", ",", "w", "=", "support_image", ".", "size", "(", ")", "\n", "\n", "output_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "episode_size", ")", ":", "\n", "            ", "episode_support_image", "=", "support_image", "[", "i", "]", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ",", "c", ",", "h", ",", "w", ")", "\n", "episode_query_image", "=", "query_image", "[", "i", "]", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ",", "c", ",", "h", ",", "w", ")", "\n", "episode_support_target", "=", "support_target", "[", "i", "]", ".", "reshape", "(", "-", "1", ")", "\n", "# episode_query_target = query_target[i].reshape(-1)", "\n", "self", ".", "set_forward_adaptation", "(", "episode_support_image", ",", "episode_support_target", ")", "\n", "\n", "output", "=", "self", ".", "forward_output", "(", "episode_query_image", ")", "\n", "\n", "output_list", ".", "append", "(", "output", ")", "\n", "\n", "", "output", "=", "torch", ".", "cat", "(", "output_list", ",", "dim", "=", "0", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "return", "output", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.maml.MAML.set_forward_loss": [[77, 101], ["image.to.to.to", "maml.MAML.split_by_episode", "support_image.size", "range", "torch.cat", "maml.MAML.loss_func", "core.utils.accuracy", "support_image[].contiguous().reshape", "query_image[].contiguous().reshape", "support_target[].reshape", "maml.MAML.set_forward_adaptation", "maml.MAML.forward_output", "output_list.append", "query_target.contiguous().view", "query_target.contiguous().view", "support_image[].contiguous", "query_image[].contiguous", "query_target.contiguous", "query_target.contiguous"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline.Baseline.set_forward_adaptation", "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.maml.MAML.forward_output"], ["", "def", "set_forward_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "image", ",", "global_target", "=", "batch", "# unused global_target", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "support_image", ",", "query_image", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "\n", "image", ",", "mode", "=", "2", "\n", ")", "\n", "episode_size", ",", "_", ",", "c", ",", "h", ",", "w", "=", "support_image", ".", "size", "(", ")", "\n", "\n", "output_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "episode_size", ")", ":", "\n", "            ", "episode_support_image", "=", "support_image", "[", "i", "]", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ",", "c", ",", "h", ",", "w", ")", "\n", "episode_query_image", "=", "query_image", "[", "i", "]", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ",", "c", ",", "h", ",", "w", ")", "\n", "episode_support_target", "=", "support_target", "[", "i", "]", ".", "reshape", "(", "-", "1", ")", "\n", "# episode_query_targets = query_targets[i].reshape(-1)", "\n", "self", ".", "set_forward_adaptation", "(", "episode_support_image", ",", "episode_support_target", ")", "\n", "\n", "output", "=", "self", ".", "forward_output", "(", "episode_query_image", ")", "\n", "\n", "output_list", ".", "append", "(", "output", ")", "\n", "\n", "", "output", "=", "torch", ".", "cat", "(", "output_list", ",", "dim", "=", "0", ")", "\n", "loss", "=", "self", ".", "loss_func", "(", "output", ",", "query_target", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "return", "output", ",", "acc", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.maml.MAML.set_forward_adaptation": [[102, 122], ["list", "maml.MAML.parameters", "maml.MAML.emb_func.train", "maml.MAML.classifier.train", "range", "maml.MAML.parameters", "maml.MAML.forward_output", "maml.MAML.loss_func", "torch.autograd.grad", "enumerate", "maml.MAML.parameters", "list.append"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLBaseLearner.parameters", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.train", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.train", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLBaseLearner.parameters", "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.maml.MAML.forward_output", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLBaseLearner.parameters"], ["", "def", "set_forward_adaptation", "(", "self", ",", "support_set", ",", "support_target", ")", ":", "\n", "        ", "lr", "=", "self", ".", "inner_param", "[", "\"lr\"", "]", "\n", "fast_parameters", "=", "list", "(", "self", ".", "parameters", "(", ")", ")", "\n", "for", "parameter", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "parameter", ".", "fast", "=", "None", "\n", "\n", "", "self", ".", "emb_func", ".", "train", "(", ")", "\n", "self", ".", "classifier", ".", "train", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "inner_param", "[", "\"iter\"", "]", ")", ":", "\n", "            ", "output", "=", "self", ".", "forward_output", "(", "support_set", ")", "\n", "loss", "=", "self", ".", "loss_func", "(", "output", ",", "support_target", ")", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "fast_parameters", ",", "create_graph", "=", "True", ")", "\n", "fast_parameters", "=", "[", "]", "\n", "\n", "for", "k", ",", "weight", "in", "enumerate", "(", "self", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "if", "weight", ".", "fast", "is", "None", ":", "\n", "                    ", "weight", ".", "fast", "=", "weight", "-", "lr", "*", "grad", "[", "k", "]", "\n", "", "else", ":", "\n", "                    ", "weight", ".", "fast", "=", "weight", ".", "fast", "-", "lr", "*", "grad", "[", "k", "]", "\n", "", "fast_parameters", ".", "append", "(", "weight", ".", "fast", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.meta_model.MetaModel.__init__": [[11, 13], ["core.model.abstract_model.AbstractModel.__init__"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "init_type", "=", "\"normal\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MetaModel", ",", "self", ")", ".", "__init__", "(", "init_type", ",", "ModelType", ".", "META", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.meta_model.MetaModel.set_forward": [[14, 17], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.meta_model.MetaModel.set_forward_loss": [[18, 21], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_forward_loss", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.meta_model.MetaModel.forward": [[22, 25], ["meta_model.MetaModel.emb_func"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "emb_func", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.meta_model.MetaModel.set_forward_adaptation": [[26, 29], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_forward_adaptation", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.meta_model.MetaModel.sub_optimizer": [[30, 36], ["dict", "dict.update", "getattr"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update"], ["", "def", "sub_optimizer", "(", "self", ",", "parameters", ",", "config", ")", ":", "\n", "        ", "kwargs", "=", "dict", "(", ")", "\n", "\n", "if", "config", "[", "\"kwargs\"", "]", "is", "not", "None", ":", "\n", "            ", "kwargs", ".", "update", "(", "config", "[", "\"kwargs\"", "]", ")", "\n", "", "return", "getattr", "(", "torch", ".", "optim", ",", "config", "[", "\"name\"", "]", ")", "(", "parameters", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.anil.ANILLayer.__init__": [[26, 31], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feat_dim", ",", "hid_dim", ",", "way_num", ")", ":", "\n", "        ", "super", "(", "ANILLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "# nn.Linear(feat_dim, hid_dim),", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "way_num", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.anil.ANILLayer.forward": [[33, 35], ["anil.ANILLayer.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layers", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.anil.ANIL.__init__": [[38, 46], ["meta_model.MetaModel.__init__", "torch.nn.CrossEntropyLoss", "anil.ANILLayer", "backbone.utils.convert_maml_module"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.maml_module.convert_maml_module"], ["    ", "def", "__init__", "(", "self", ",", "inner_param", ",", "feat_dim", ",", "hid_dim", "=", "640", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ANIL", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "classifier", "=", "ANILLayer", "(", "feat_dim", "=", "feat_dim", ",", "hid_dim", "=", "hid_dim", ",", "way_num", "=", "self", ".", "way_num", ")", "\n", "self", ".", "inner_param", "=", "inner_param", "\n", "\n", "convert_maml_module", "(", "self", ".", "classifier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.anil.ANIL.set_forward": [[47, 64], ["image.to.to.to", "anil.ANIL.emb_func", "anil.ANIL.split_by_episode", "support_feat.size", "range", "torch.cat", "core.utils.accuracy", "anil.ANIL.set_forward_adaptation", "anil.ANIL.classifier", "output_list.append", "anil.ANIL.squeeze", "query_target.reshape"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline.Baseline.set_forward_adaptation"], ["", "def", "set_forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "1", ")", "\n", "episode_size", "=", "support_feat", ".", "size", "(", "0", ")", "\n", "\n", "output_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "episode_size", ")", ":", "\n", "            ", "self", ".", "set_forward_adaptation", "(", "support_feat", "[", "i", "]", ",", "support_target", "[", "i", "]", ")", "\n", "output", "=", "self", ".", "classifier", "(", "query_feat", "[", "i", "]", ")", "\n", "output_list", ".", "append", "(", "output", ")", "\n", "\n", "", "output", "=", "torch", ".", "cat", "(", "output_list", ",", "dim", "=", "0", ")", "\n", "acc", "=", "accuracy", "(", "output", ".", "squeeze", "(", ")", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "return", "output", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.anil.ANIL.set_forward_loss": [[65, 83], ["image.to.to.to", "anil.ANIL.emb_func", "anil.ANIL.split_by_episode", "support_feat.size", "range", "torch.cat", "anil.ANIL.loss_func", "core.utils.accuracy", "anil.ANIL.set_forward_adaptation", "anil.ANIL.classifier", "output_list.append", "query_target.reshape", "anil.ANIL.squeeze", "query_target.reshape"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline.Baseline.set_forward_adaptation"], ["", "def", "set_forward_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "1", ")", "\n", "episode_size", "=", "support_feat", ".", "size", "(", "0", ")", "\n", "\n", "output_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "episode_size", ")", ":", "\n", "            ", "self", ".", "set_forward_adaptation", "(", "support_feat", "[", "i", "]", ",", "support_target", "[", "i", "]", ")", "\n", "output", "=", "self", ".", "classifier", "(", "query_feat", "[", "i", "]", ")", "\n", "output_list", ".", "append", "(", "output", ")", "\n", "\n", "", "output", "=", "torch", ".", "cat", "(", "output_list", ",", "dim", "=", "0", ")", "\n", "loss", "=", "self", ".", "loss_func", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "acc", "=", "accuracy", "(", "output", ".", "squeeze", "(", ")", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "return", "output", ",", "acc", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.meta.anil.ANIL.set_forward_adaptation": [[84, 105], ["list", "anil.ANIL.classifier.parameters", "anil.ANIL.emb_func.train", "anil.ANIL.classifier.train", "range", "anil.ANIL.classifier.parameters", "anil.ANIL.classifier", "anil.ANIL.loss_func", "torch.autograd.grad", "enumerate", "anil.ANIL.classifier.parameters", "list.append"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLBaseLearner.parameters", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.train", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.train", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLBaseLearner.parameters", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLBaseLearner.parameters"], ["", "def", "set_forward_adaptation", "(", "self", ",", "support_feat", ",", "support_target", ")", ":", "\n", "        ", "lr", "=", "self", ".", "inner_param", "[", "\"lr\"", "]", "\n", "fast_parameters", "=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "for", "parameter", "in", "self", ".", "classifier", ".", "parameters", "(", ")", ":", "\n", "            ", "parameter", ".", "fast", "=", "None", "\n", "\n", "", "self", ".", "emb_func", ".", "train", "(", ")", "\n", "self", ".", "classifier", ".", "train", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "inner_param", "[", "\"iter\"", "]", ")", ":", "\n", "            ", "output", "=", "self", ".", "classifier", "(", "support_feat", ")", "\n", "loss", "=", "self", ".", "loss_func", "(", "output", ",", "support_target", ")", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "fast_parameters", ",", "create_graph", "=", "True", ")", "\n", "fast_parameters", "=", "[", "]", "\n", "\n", "for", "k", ",", "weight", "in", "enumerate", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "if", "weight", ".", "fast", "is", "None", ":", "\n", "                    ", "weight", ".", "fast", "=", "weight", "-", "lr", "*", "grad", "[", "k", "]", "\n", "", "else", ":", "\n", "                    ", "weight", ".", "fast", "=", "weight", ".", "fast", "-", "lr", "*", "grad", "[", "k", "]", "\n", "", "fast_parameters", ".", "append", "(", "weight", ".", "fast", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.CrossEntropyLoss.__init__": [[35, 38], ["torch.nn.Module.__init__", "torch.nn.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.CrossEntropyLoss.forward": [[39, 50], ["inputs.view.view.view", "can.CrossEntropyLoss.logsoftmax", "torch.zeros().scatter_", "targets.cuda.cuda.unsqueeze", "targets.cuda.cuda.cuda", "inputs.view.view.size", "inputs.view.view.size", "targets.cuda.cuda.unsqueeze().data.cpu", "inputs.view.view.size", "torch.zeros", "inputs.view.view.size", "inputs.view.view.size", "targets.cuda.cuda.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "inputs", "=", "inputs", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", ",", "inputs", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "\n", "log_probs", "=", "self", ".", "logsoftmax", "(", "inputs", ")", "\n", "targets", "=", "torch", ".", "zeros", "(", "inputs", ".", "size", "(", "0", ")", ",", "inputs", ".", "size", "(", "1", ")", ")", ".", "scatter_", "(", "\n", "1", ",", "targets", ".", "unsqueeze", "(", "1", ")", ".", "data", ".", "cpu", "(", ")", ",", "1", "\n", ")", "\n", "targets", "=", "targets", ".", "unsqueeze", "(", "-", "1", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "loss", "=", "(", "-", "targets", "*", "log_probs", ")", ".", "mean", "(", "0", ")", ".", "sum", "(", ")", "\n", "return", "loss", "/", "inputs", ".", "size", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.ConvBlock.__init__": [[86, 90], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["def", "__init__", "(", "self", ",", "in_c", ",", "out_c", ",", "k", ",", "s", "=", "1", ",", "p", "=", "0", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_c", ",", "out_c", ",", "k", ",", "stride", "=", "s", ",", "padding", "=", "p", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.ConvBlock.forward": [[91, 93], ["can.ConvBlock.bn", "can.ConvBlock.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "bn", "(", "self", ".", "conv", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.CAM.__init__": [[100, 109], ["torch.nn.Module.__init__", "can.ConvBlock", "torch.nn.Conv2d", "can.CAM.modules", "isinstance", "m.weight.data.normal_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["def", "__init__", "(", "self", ",", "mid_channels", ")", ":", "\n", "        ", "super", "(", "CAM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "ConvBlock", "(", "mid_channels", "*", "mid_channels", ",", "mid_channels", ",", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "mid_channels", ",", "mid_channels", "*", "mid_channels", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.CAM.get_attention": [[110, 122], ["torch.mean.mean", "torch.mean.transpose", "torch.nn.functional.relu", "can.CAM.conv2", "torch.mean.transpose", "torch.mean.unsqueeze", "torch.mean", "can.CAM.conv1", "torch.nn.functional.softmax"], "methods", ["None"], ["", "", "", "def", "get_attention", "(", "self", ",", "a", ")", ":", "\n", "        ", "input_a", "=", "a", "\n", "a", "=", "a", ".", "mean", "(", "3", ")", "# GAP", "\n", "a", "=", "a", ".", "transpose", "(", "1", ",", "3", ")", "\n", "a", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "a", ")", ")", "\n", "a", "=", "self", ".", "conv2", "(", "a", ")", "\n", "a", "=", "a", ".", "transpose", "(", "1", ",", "3", ")", "\n", "a", "=", "a", ".", "unsqueeze", "(", "3", ")", "\n", "\n", "a", "=", "torch", ".", "mean", "(", "input_a", "*", "a", ",", "-", "1", ")", "\n", "a", "=", "F", ".", "softmax", "(", "a", "/", "0.025", ",", "dim", "=", "-", "1", ")", "+", "1", "\n", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.CAM.forward": [[123, 146], ["f1.reshape.reshape.size", "f2.reshape.reshape.size", "f1.reshape.reshape.reshape", "f2.reshape.reshape.reshape", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "f1_norm.transpose().unsqueeze.transpose().unsqueeze.transpose().unsqueeze", "f2_norm.unsqueeze.unsqueeze.unsqueeze", "torch.matmul", "can.CAM.transpose", "can.CAM.get_attention", "can.CAM.get_attention", "f1.reshape.reshape.reshape", "f2.reshape.reshape.reshape", "f1.reshape.reshape.unsqueeze", "can.CAM.unsqueeze", "f2.reshape.reshape.unsqueeze", "can.CAM.unsqueeze", "f1.reshape.reshape.transpose", "f2.reshape.reshape.transpose", "f1_norm.transpose().unsqueeze.transpose().unsqueeze.transpose"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.CAM.get_attention", "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.CAM.get_attention"], ["", "def", "forward", "(", "self", ",", "f1", ",", "f2", ")", ":", "\n", "        ", "b", ",", "n1", ",", "c", ",", "h", ",", "w", "=", "f1", ".", "size", "(", ")", "\n", "n2", "=", "f2", ".", "size", "(", "1", ")", "\n", "\n", "# Flatten", "\n", "f1", "=", "f1", ".", "reshape", "(", "b", ",", "n1", ",", "c", ",", "-", "1", ")", "\n", "f2", "=", "f2", ".", "reshape", "(", "b", ",", "n2", ",", "c", ",", "-", "1", ")", "\n", "\n", "f1_norm", "=", "F", ".", "normalize", "(", "f1", ",", "p", "=", "2", ",", "dim", "=", "2", ",", "eps", "=", "1e-12", ")", "# [1, 5, 512, 36]", "\n", "f2_norm", "=", "F", ".", "normalize", "(", "f2", ",", "p", "=", "2", ",", "dim", "=", "2", ",", "eps", "=", "1e-12", ")", "# [1, 75, 512, 36]", "\n", "f1_norm", "=", "f1_norm", ".", "transpose", "(", "2", ",", "3", ")", ".", "unsqueeze", "(", "2", ")", "\n", "f2_norm", "=", "f2_norm", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "a1", "=", "torch", ".", "matmul", "(", "f1_norm", ",", "f2_norm", ")", "# [1, 5, 75, 36, 36]", "\n", "a2", "=", "a1", ".", "transpose", "(", "3", ",", "4", ")", "# [1, 5, 75, 36, 36]", "\n", "a1", "=", "self", ".", "get_attention", "(", "a1", ")", "# [1, 5, 75, 36]", "\n", "a2", "=", "self", ".", "get_attention", "(", "a2", ")", "# [1, 5, 75, 36]", "\n", "\n", "f1", "=", "f1", ".", "unsqueeze", "(", "2", ")", "*", "a1", ".", "unsqueeze", "(", "3", ")", "\n", "f1", "=", "f1", ".", "reshape", "(", "b", ",", "n1", ",", "n2", ",", "c", ",", "h", ",", "w", ")", "\n", "f2", "=", "f2", ".", "unsqueeze", "(", "1", ")", "*", "a2", ".", "unsqueeze", "(", "3", ")", "\n", "f2", "=", "f2", ".", "reshape", "(", "b", ",", "n1", ",", "n2", ",", "c", ",", "h", ",", "w", ")", "\n", "return", "f1", ".", "transpose", "(", "1", ",", "2", ")", ",", "f2", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.CAMLayer.__init__": [[149, 156], ["torch.nn.Module.__init__", "can.CAM", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale_cls", ",", "iter_num_prob", "=", "35.0", "/", "75", ",", "num_classes", "=", "64", ",", "nFeat", "=", "512", ",", "HW", "=", "5", ")", ":", "\n", "        ", "super", "(", "CAMLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale_cls", "=", "scale_cls", "\n", "self", ".", "cam", "=", "CAM", "(", "HW", ")", "\n", "self", ".", "iter_num_prob", "=", "iter_num_prob", "\n", "self", ".", "nFeat", "=", "nFeat", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "self", ".", "nFeat", ",", "num_classes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.CAMLayer.val": [[157, 168], ["torch.nn.functional.normalize.mean", "torch.nn.functional.normalize.mean", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.sum", "torch.nn.functional.normalize.dim", "torch.nn.functional.normalize.dim"], "methods", ["None"], ["", "def", "val", "(", "self", ",", "support_feat", ",", "query_feat", ")", ":", "\n", "        ", "query_feat", "=", "query_feat", ".", "mean", "(", "4", ")", "\n", "query_feat", "=", "query_feat", ".", "mean", "(", "4", ")", "\n", "support_feat", "=", "F", ".", "normalize", "(", "\n", "support_feat", ",", "p", "=", "2", ",", "dim", "=", "support_feat", ".", "dim", "(", ")", "-", "1", ",", "eps", "=", "1e-12", "\n", ")", "# [1, 75, 5, 512]", "\n", "query_feat", "=", "F", ".", "normalize", "(", "\n", "query_feat", ",", "p", "=", "2", ",", "dim", "=", "query_feat", ".", "dim", "(", ")", "-", "1", ",", "eps", "=", "1e-12", "\n", ")", "# [1, 75, 5, 512]", "\n", "scores", "=", "self", ".", "scale_cls", "*", "torch", ".", "sum", "(", "query_feat", "*", "support_feat", ",", "dim", "=", "-", "1", ")", "# [1, 75, 5]", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.CAMLayer.forward": [[169, 221], ["support_feat.reshape.reshape.size", "support_feat.reshape.reshape.size", "support_feat.reshape.reshape.size", "query_feat.reshape.reshape.size", "support_targets.size", "support_feat.reshape.reshape.reshape", "support_targets.transpose", "torch.bmm", "prototypes.mean.mean.div", "prototypes.mean.mean.reshape", "can.CAMLayer.cam", "prototypes.mean.mean.mean", "prototypes.mean.mean.mean", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "proto_norm.unsqueeze.unsqueeze.unsqueeze", "proto_norm.unsqueeze.unsqueeze.unsqueeze", "cls_scores.reshape.reshape.reshape", "query_feat.reshape.reshape.reshape", "query_feat.reshape.reshape.transpose", "can.CAMLayer.unsqueeze", "torch.matmul", "query_feat.reshape.reshape.reshape", "can.CAMLayer.classifier", "support_targets.transpose.sum().expand_as", "can.CAMLayer.val", "torch.sum", "support_targets.transpose.sum", "cls_scores.reshape.reshape.size"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.CAMLayer.val"], ["", "def", "forward", "(", "self", ",", "support_feat", ",", "query_feat", ",", "support_targets", ",", "query_targets", ")", ":", "\n", "        ", "\"\"\"\n        support_feat: [4, 5, 512, 6, 6]\n        query_feat: [4, 75, 512, 6, 6]\n        support_targets: [4, 5, 5] one-hot\n        query_targets: [4, 75, 5] one-hot\n        \"\"\"", "\n", "original_feat_shape", "=", "support_feat", ".", "size", "(", ")", "\n", "batch_size", "=", "support_feat", ".", "size", "(", "0", ")", "\n", "n_support", "=", "support_feat", ".", "size", "(", "1", ")", "\n", "n_query", "=", "query_feat", ".", "size", "(", "1", ")", "\n", "way_num", "=", "support_targets", ".", "size", "(", "-", "1", ")", "\n", "\n", "# flatten feature", "\n", "support_feat", "=", "support_feat", ".", "reshape", "(", "batch_size", ",", "n_support", ",", "-", "1", ")", "\n", "\n", "labels_train_transposed", "=", "support_targets", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# [1, 5, 5]", "\n", "\n", "# calc the prototypes of support set", "\n", "prototypes", "=", "torch", ".", "bmm", "(", "labels_train_transposed", ",", "support_feat", ")", "\n", "# [1, 5, 5]x[1, 5, 640]", "\n", "prototypes", "=", "prototypes", ".", "div", "(", "\n", "labels_train_transposed", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "prototypes", ")", "\n", ")", "\n", "# [1, 5, 640]", "\n", "prototypes", "=", "prototypes", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "*", "original_feat_shape", "[", "2", ":", "]", ")", "\n", "# [1, 5, 512, 6, 6]", "\n", "prototypes", ",", "query_feat", "=", "self", ".", "cam", "(", "prototypes", ",", "query_feat", ")", "\n", "# [1, 75, 5, 512, 6, 6]  # [2, 75, 640, 1, 1]", "\n", "prototypes", "=", "prototypes", ".", "mean", "(", "4", ")", "\n", "prototypes", "=", "prototypes", ".", "mean", "(", "4", ")", "\n", "# [1, 75, 5, 512]", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "val", "(", "prototypes", ",", "query_feat", ")", "\n", "\n", "", "proto_norm", "=", "F", ".", "normalize", "(", "prototypes", ",", "p", "=", "2", ",", "dim", "=", "3", ",", "eps", "=", "1e-12", ")", "\n", "query_norm", "=", "F", ".", "normalize", "(", "query_feat", ",", "p", "=", "2", ",", "dim", "=", "3", ",", "eps", "=", "1e-12", ")", "\n", "proto_norm", "=", "proto_norm", ".", "unsqueeze", "(", "4", ")", "\n", "proto_norm", "=", "proto_norm", ".", "unsqueeze", "(", "5", ")", "\n", "cls_scores", "=", "self", ".", "scale_cls", "*", "torch", ".", "sum", "(", "query_norm", "*", "proto_norm", ",", "dim", "=", "3", ")", "\n", "cls_scores", "=", "cls_scores", ".", "reshape", "(", "batch_size", "*", "n_query", ",", "*", "cls_scores", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "query_feat", "=", "query_feat", ".", "reshape", "(", "batch_size", ",", "n_query", ",", "way_num", ",", "-", "1", ")", "\n", "query_feat", "=", "query_feat", ".", "transpose", "(", "2", ",", "3", ")", "\n", "query_targets", "=", "query_targets", ".", "unsqueeze", "(", "3", ")", "\n", "query_feat", "=", "torch", ".", "matmul", "(", "query_feat", ",", "query_targets", ")", "\n", "query_feat", "=", "query_feat", ".", "reshape", "(", "batch_size", "*", "n_query", ",", "-", "1", ",", "*", "original_feat_shape", "[", "-", "2", ":", "]", ")", "\n", "query_targets", "=", "self", ".", "classifier", "(", "query_feat", ")", "\n", "\n", "return", "query_targets", ",", "cls_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.CAMLayer.helper": [[222, 243], ["torch.nn.functional.normalize.size", "support_targets.transpose", "torch.bmm", "torch.nn.functional.normalize.div", "torch.nn.functional.normalize.reshape", "can.CAMLayer.cam", "torch.nn.functional.normalize.mean().mean", "torch.nn.functional.normalize.mean().mean", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize.reshape", "support_targets.transpose.sum().expand_as", "torch.sum", "torch.nn.functional.normalize.mean", "torch.nn.functional.normalize.mean", "support_targets.transpose.sum", "torch.nn.functional.normalize.dim", "torch.nn.functional.normalize.dim"], "methods", ["None"], ["", "def", "helper", "(", "self", ",", "support_feat", ",", "query_feat", ",", "support_targets", ")", ":", "\n", "        ", "\"\"\"\n        support_targets_transposed: one-hot\n        \"\"\"", "\n", "b", ",", "n", ",", "c", ",", "h", ",", "w", "=", "support_feat", ".", "size", "(", ")", "\n", "\n", "support_targets_transposed", "=", "support_targets", ".", "transpose", "(", "1", ",", "2", ")", "\n", "support_feat", "=", "torch", ".", "bmm", "(", "support_targets_transposed", ",", "support_feat", ".", "reshape", "(", "b", ",", "n", ",", "-", "1", ")", ")", "\n", "support_feat", "=", "support_feat", ".", "div", "(", "\n", "support_targets_transposed", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "support_feat", ")", "\n", ")", "\n", "support_feat", "=", "support_feat", ".", "reshape", "(", "b", ",", "-", "1", ",", "c", ",", "h", ",", "w", ")", "\n", "\n", "support_feat", ",", "query_feat", "=", "self", ".", "cam", "(", "support_feat", ",", "query_feat", ")", "\n", "support_feat", "=", "support_feat", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "\n", "query_feat", "=", "query_feat", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "\n", "\n", "query_feat", "=", "F", ".", "normalize", "(", "query_feat", ",", "p", "=", "2", ",", "dim", "=", "query_feat", ".", "dim", "(", ")", "-", "1", ",", "eps", "=", "1e-12", ")", "\n", "support_feat", "=", "F", ".", "normalize", "(", "support_feat", ",", "p", "=", "2", ",", "dim", "=", "support_feat", ".", "dim", "(", ")", "-", "1", ",", "eps", "=", "1e-12", ")", "\n", "scores", "=", "self", ".", "scale_cls", "*", "torch", ".", "sum", "(", "query_feat", "*", "support_feat", ",", "dim", "=", "-", "1", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.CAN.__init__": [[246, 253], ["core.model.metric.metric_model.MetricModel.__init__", "can.CAMLayer", "can.CrossEntropyLoss", "can.CAN._init_network"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__", "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel._init_network"], ["    ", "def", "__init__", "(", "\n", "self", ",", "scale_cls", ",", "iter_num_prob", "=", "35.0", "/", "75", ",", "num_classes", "=", "64", ",", "nFeat", "=", "512", ",", "HW", "=", "5", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "CAN", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "cam_layer", "=", "CAMLayer", "(", "scale_cls", ",", "iter_num_prob", ",", "num_classes", ",", "nFeat", ",", "HW", ")", "\n", "self", ".", "loss_func", "=", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "_init_network", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.CAN.set_forward": [[254, 291], ["images.to.to.to", "global_targets.to.to.to", "can.CAN.emb_func", "can.CAN.split_by_episode", "can.one_hot", "support_targets_one_hot.reshape.reshape.reshape", "can.one_hot", "query_targets_one_hot.reshape.reshape.reshape", "can.CAN.cam_layer", "cls_scores.reshape.reshape.reshape", "core.utils.accuracy", "images.to.to.size", "support_targets.reshape", "query_targets.reshape", "query_targets.reshape"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.one_hot", "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.one_hot", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward", "(", "\n", "self", ",", "\n", "batch", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param batch:\n        :return:\n        \"\"\"", "\n", "images", ",", "global_targets", "=", "batch", "\n", "images", "=", "images", ".", "to", "(", "self", ".", "device", ")", "\n", "global_targets", "=", "global_targets", ".", "to", "(", "self", ".", "device", ")", "\n", "episode_size", "=", "images", ".", "size", "(", "0", ")", "//", "(", "self", ".", "way_num", "*", "(", "self", ".", "shot_num", "+", "self", ".", "query_num", ")", ")", "\n", "emb", "=", "self", ".", "emb_func", "(", "images", ")", "\n", "support_feat", ",", "query_feat", ",", "support_targets", ",", "query_targets", "=", "self", ".", "split_by_episode", "(", "\n", "emb", ",", "mode", "=", "2", "\n", ")", "\n", "\n", "# convert to one-hot", "\n", "support_targets_one_hot", "=", "one_hot", "(", "\n", "support_targets", ".", "reshape", "(", "episode_size", "*", "self", ".", "way_num", "*", "self", ".", "shot_num", ")", ",", "self", ".", "way_num", "\n", ")", "\n", "support_targets_one_hot", "=", "support_targets_one_hot", ".", "reshape", "(", "\n", "episode_size", ",", "self", ".", "way_num", "*", "self", ".", "shot_num", ",", "self", ".", "way_num", "\n", ")", "\n", "query_targets_one_hot", "=", "one_hot", "(", "\n", "query_targets", ".", "reshape", "(", "episode_size", "*", "self", ".", "way_num", "*", "self", ".", "query_num", ")", ",", "self", ".", "way_num", "\n", ")", "\n", "query_targets_one_hot", "=", "query_targets_one_hot", ".", "reshape", "(", "\n", "episode_size", ",", "self", ".", "way_num", "*", "self", ".", "query_num", ",", "self", ".", "way_num", "\n", ")", "\n", "cls_scores", "=", "self", ".", "cam_layer", "(", "\n", "support_feat", ",", "query_feat", ",", "support_targets_one_hot", ",", "query_targets_one_hot", "\n", ")", "\n", "\n", "cls_scores", "=", "cls_scores", ".", "reshape", "(", "episode_size", "*", "self", ".", "way_num", "*", "self", ".", "query_num", ",", "-", "1", ")", "\n", "acc", "=", "accuracy", "(", "cls_scores", ",", "query_targets", ".", "reshape", "(", "-", "1", ")", ",", "topk", "=", "1", ")", "\n", "return", "cls_scores", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.CAN.set_forward_loss": [[292, 344], ["images.to.to.to", "global_targets.to.to.to", "can.CAN.emb_func", "can.CAN.split_by_episode", "support_targets.reshape().contiguous.reshape().contiguous.reshape().contiguous", "can.shuffle", "can.shuffle", "can.one_hot", "support_targets_one_hot.reshape.reshape.reshape", "can.one_hot", "query_targets_one_hot.reshape.reshape.reshape", "can.CAN.cam_layer", "can.CAN.loss_func", "can.CAN.loss_func", "torch.sum", "core.utils.accuracy", "images.to.to.size", "support_global_targets.reshape", "query_targets.reshape", "query_global_targets.reshape", "support_targets.reshape().contiguous.reshape().contiguous.reshape", "query_targets.reshape", "query_global_targets.contiguous().reshape", "query_targets.reshape", "torch.sum.reshape", "query_targets.reshape", "support_targets.reshape().contiguous.reshape().contiguous.reshape", "support_targets.reshape().contiguous.reshape().contiguous.size", "query_global_targets.contiguous", "query_feat.size", "query_feat.size", "torch.sum.size"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.shuffle", "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.shuffle", "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.one_hot", "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.one_hot", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n        :param batch:\n        :return:\n        \"\"\"", "\n", "images", ",", "global_targets", "=", "batch", "\n", "images", "=", "images", ".", "to", "(", "self", ".", "device", ")", "\n", "global_targets", "=", "global_targets", ".", "to", "(", "self", ".", "device", ")", "\n", "episode_size", "=", "images", ".", "size", "(", "0", ")", "//", "(", "self", ".", "way_num", "*", "(", "self", ".", "shot_num", "+", "self", ".", "query_num", ")", ")", "\n", "emb", "=", "self", ".", "emb_func", "(", "images", ")", "# [80, 640]", "\n", "support_feat", ",", "query_feat", ",", "support_targets", ",", "query_targets", "=", "self", ".", "split_by_episode", "(", "\n", "emb", ",", "mode", "=", "2", "\n", ")", "\n", "# [4,5,512,6,6] [4,75, 512,6,6] [4, 5] [300]", "\n", "support_targets", "=", "support_targets", ".", "reshape", "(", "episode_size", ",", "self", ".", "way_num", ")", ".", "contiguous", "(", ")", "\n", "support_global_targets", ",", "query_global_targets", "=", "(", "\n", "global_targets", "[", ":", ",", ":", ",", ":", "self", ".", "shot_num", "]", ",", "\n", "global_targets", "[", ":", ",", ":", ",", "self", ".", "shot_num", ":", "]", ",", "\n", ")", "\n", "\n", "support_feat", ",", "support_targets", ",", "support_global_targets", "=", "shuffle", "(", "\n", "support_feat", ",", "support_targets", ",", "support_global_targets", ".", "reshape", "(", "*", "support_targets", ".", "size", "(", ")", ")", "\n", ")", "\n", "query_feat", ",", "query_targets", ",", "query_global_targets", "=", "shuffle", "(", "\n", "query_feat", ",", "\n", "query_targets", ".", "reshape", "(", "*", "query_feat", ".", "size", "(", ")", "[", ":", "2", "]", ")", ",", "\n", "query_global_targets", ".", "reshape", "(", "*", "query_feat", ".", "size", "(", ")", "[", ":", "2", "]", ")", ",", "\n", ")", "\n", "\n", "# convert to one-hot", "\n", "support_targets_one_hot", "=", "one_hot", "(", "\n", "support_targets", ".", "reshape", "(", "episode_size", "*", "self", ".", "way_num", "*", "self", ".", "shot_num", ")", ",", "self", ".", "way_num", "\n", ")", "\n", "support_targets_one_hot", "=", "support_targets_one_hot", ".", "reshape", "(", "\n", "episode_size", ",", "self", ".", "way_num", "*", "self", ".", "shot_num", ",", "self", ".", "way_num", "\n", ")", "\n", "query_targets_one_hot", "=", "one_hot", "(", "\n", "query_targets", ".", "reshape", "(", "episode_size", "*", "self", ".", "way_num", "*", "self", ".", "query_num", ")", ",", "self", ".", "way_num", "\n", ")", "\n", "query_targets_one_hot", "=", "query_targets_one_hot", ".", "reshape", "(", "\n", "episode_size", ",", "self", ".", "way_num", "*", "self", ".", "query_num", ",", "self", ".", "way_num", "\n", ")", "\n", "\n", "output", ",", "cls_scores", "=", "self", ".", "cam_layer", "(", "\n", "support_feat", ",", "query_feat", ",", "support_targets_one_hot", ",", "query_targets_one_hot", "\n", ")", "\n", "loss1", "=", "self", ".", "loss_func", "(", "output", ",", "query_global_targets", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ")", ")", "\n", "loss2", "=", "self", ".", "loss_func", "(", "cls_scores", ",", "query_targets", ".", "reshape", "(", "-", "1", ")", ")", "\n", "loss", "=", "loss1", "+", "0.5", "*", "loss2", "\n", "cls_scores", "=", "torch", ".", "sum", "(", "cls_scores", ".", "reshape", "(", "*", "cls_scores", ".", "size", "(", ")", "[", ":", "2", "]", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "acc", "=", "accuracy", "(", "cls_scores", ",", "query_targets", ".", "reshape", "(", "-", "1", ")", ",", "topk", "=", "1", ")", "\n", "return", "output", ",", "acc", ",", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.one_hot": [[52, 60], ["indices.view", "torch.zeros.scatter_", "torch.zeros().cuda", "torch.zeros", "indices.size", "torch.Size", "torch.zeros", "indices.size", "torch.Size", "indices.size", "torch.Size"], "function", ["None"], ["", "", "def", "one_hot", "(", "indices", ",", "depth", ",", "use_cuda", "=", "True", ")", ":", "\n", "    ", "if", "use_cuda", ":", "\n", "        ", "encoded_indicies", "=", "torch", ".", "zeros", "(", "indices", ".", "size", "(", ")", "+", "torch", ".", "Size", "(", "[", "depth", "]", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "encoded_indicies", "=", "torch", ".", "zeros", "(", "indices", ".", "size", "(", ")", "+", "torch", ".", "Size", "(", "[", "depth", "]", ")", ")", "\n", "", "index", "=", "indices", ".", "view", "(", "indices", ".", "size", "(", ")", "+", "torch", ".", "Size", "(", "[", "1", "]", ")", ")", "\n", "encoded_indicies", "=", "encoded_indicies", ".", "scatter_", "(", "1", ",", "index", ",", "1", ")", "\n", "return", "encoded_indicies", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.shuffle": [[62, 73], ["range", "torch.randperm().to", "images.index_select.index_select", "targets.index_select.index_select", "global_targets.index_select.index_select", "torch.randperm"], "function", ["None"], ["", "def", "shuffle", "(", "images", ",", "targets", ",", "global_targets", ")", ":", "\n", "    ", "\"\"\"\n    A trick for CAN training\n    \"\"\"", "\n", "sample_num", "=", "images", ".", "shape", "[", "1", "]", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "indices", "=", "torch", ".", "randperm", "(", "sample_num", ")", ".", "to", "(", "images", ".", "device", ")", "\n", "images", "=", "images", ".", "index_select", "(", "1", ",", "indices", ")", "\n", "targets", "=", "targets", ".", "index_select", "(", "1", ",", "indices", ")", "\n", "global_targets", "=", "global_targets", ".", "index_select", "(", "1", ",", "indices", ")", "\n", "", "return", "images", ",", "targets", ",", "global_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.dn4.DN4Layer.__init__": [[33, 36], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_k", ")", ":", "\n", "        ", "super", "(", "DN4Layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_k", "=", "n_k", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.dn4.DN4Layer.forward": [[37, 67], ["torch.nn.functional.normalize().unsqueeze.size", "torch.nn.functional.normalize().unsqueeze.size", "torch.nn.functional.normalize().unsqueeze.view().permute", "torch.nn.functional.normalize().unsqueeze", "torch.nn.functional.normalize().unsqueeze.view().permute().contiguous().view", "torch.nn.functional.normalize().unsqueeze", "torch.matmul", "torch.topk", "torch.sum", "torch.nn.functional.normalize().unsqueeze.view", "torch.nn.functional.normalize", "torch.nn.functional.normalize().unsqueeze.view().permute().contiguous", "torch.nn.functional.normalize", "torch.nn.functional.normalize().unsqueeze.view().permute", "torch.nn.functional.normalize().unsqueeze.view"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "query_feat", ",", "\n", "support_feat", ",", "\n", "way_num", ",", "\n", "shot_num", ",", "\n", "query_num", ",", "\n", ")", ":", "\n", "        ", "t", ",", "wq", ",", "c", ",", "h", ",", "w", "=", "query_feat", ".", "size", "(", ")", "\n", "_", ",", "ws", ",", "_", ",", "_", ",", "_", "=", "support_feat", ".", "size", "(", ")", "\n", "\n", "# t, wq, c, hw -> t, wq, hw, c -> t, wq, 1, hw, c", "\n", "query_feat", "=", "query_feat", ".", "view", "(", "t", ",", "way_num", "*", "query_num", ",", "c", ",", "h", "*", "w", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", "query_feat", "=", "F", ".", "normalize", "(", "query_feat", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# t, ws, c, h, w -> t, w, s, c, hw -> t, 1, w, c, shw", "\n", "support_feat", "=", "(", "\n", "support_feat", ".", "view", "(", "t", ",", "way_num", ",", "shot_num", ",", "c", ",", "h", "*", "w", ")", "\n", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ")", "\n", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "t", ",", "way_num", ",", "c", ",", "shot_num", "*", "h", "*", "w", ")", "\n", ")", "\n", "support_feat", "=", "F", ".", "normalize", "(", "support_feat", ",", "p", "=", "2", ",", "dim", "=", "2", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# t, wq, w, hw, shw -> t, wq, w, hw, n_k -> t, wq, w", "\n", "relation", "=", "torch", ".", "matmul", "(", "query_feat", ",", "support_feat", ")", "\n", "topk_value", ",", "_", "=", "torch", ".", "topk", "(", "relation", ",", "self", ".", "n_k", ",", "dim", "=", "-", "1", ")", "\n", "score", "=", "torch", ".", "sum", "(", "topk_value", ",", "dim", "=", "[", "3", ",", "4", "]", ")", "\n", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.dn4.DN4.__init__": [[70, 74], ["metric_model.MetricModel.__init__", "dn4.DN4Layer", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_k", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DN4", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "dn4_layer", "=", "DN4Layer", "(", "n_k", ")", "\n", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.dn4.DN4.set_forward": [[75, 93], ["image.to.to.to", "dn4.DN4.emb_func", "dn4.DN4.split_by_episode", "dn4.DN4.dn4_layer().view", "core.utils.accuracy", "image.to.to.size", "query_target.reshape", "dn4.DN4.dn4_layer"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "episode_size", "=", "image", ".", "size", "(", "0", ")", "//", "(", "self", ".", "way_num", "*", "(", "self", ".", "shot_num", "+", "self", ".", "query_num", ")", ")", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "2", ")", "\n", "\n", "output", "=", "self", ".", "dn4_layer", "(", "\n", "query_feat", ",", "support_feat", ",", "self", ".", "way_num", ",", "self", ".", "shot_num", ",", "self", ".", "query_num", "\n", ")", ".", "view", "(", "episode_size", "*", "self", ".", "way_num", "*", "self", ".", "query_num", ",", "self", ".", "way_num", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n", "return", "output", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.dn4.DN4.set_forward_loss": [[94, 118], ["image.to.to.to", "dn4.DN4.emb_func", "dn4.DN4.split_by_episode", "dn4.DN4.dn4_layer().view", "dn4.DN4.loss_func", "core.utils.accuracy", "image.to.to.size", "query_target.reshape", "query_target.reshape", "dn4.DN4.dn4_layer"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "episode_size", "=", "image", ".", "size", "(", "0", ")", "//", "(", "self", ".", "way_num", "*", "(", "self", ".", "shot_num", "+", "self", ".", "query_num", ")", ")", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "\n", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "2", ")", "\n", "\n", "output", "=", "self", ".", "dn4_layer", "(", "\n", "query_feat", ",", "\n", "support_feat", ",", "\n", "self", ".", "way_num", ",", "\n", "self", ".", "shot_num", ",", "\n", "self", ".", "query_num", ",", "\n", ")", ".", "view", "(", "episode_size", "*", "self", ".", "way_num", "*", "self", ".", "query_num", ",", "self", ".", "way_num", ")", "\n", "loss", "=", "self", ".", "loss_func", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n", "return", "output", ",", "acc", ",", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.feat.ProtoLayer.__init__": [[31, 36], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["def", "__init__", "(", "self", ",", "way_num", ",", "shot_num", ",", "query_num", ")", ":", "\n", "        ", "super", "(", "ProtoLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "way_num", "=", "way_num", "\n", "self", ".", "shot_num", "=", "shot_num", "\n", "self", ".", "query_num", "=", "query_num", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.feat.ProtoLayer.forward": [[37, 53], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.normalize", "torch.normalize", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.normalize", "torch.normalize", "x.unsqueeze", "y.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "query", ",", "proto", ",", "mode", "=", "\"euclidean\"", ",", "temperature", "=", "1.0", ")", ":", "\n", "        ", "return", "{", "\n", "# t, wq, 1, c - t, 1, w, c -> t, wq, w", "\n", "\"euclidean\"", ":", "lambda", "x", ",", "y", ":", "-", "torch", ".", "sum", "(", "\n", "torch", ".", "pow", "(", "x", ".", "unsqueeze", "(", "2", ")", "-", "y", ".", "unsqueeze", "(", "1", ")", ",", "2", ")", ",", "\n", "dim", "=", "3", ",", "\n", ")", "\n", "/", "temperature", ",", "\n", "# t, wq, c - t, c, w -> t, wq, w", "\n", "\"cos_sim\"", ":", "lambda", "x", ",", "y", ":", "torch", ".", "mm", "(", "\n", "F", ".", "normalize", "(", "x", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "transpose", "(", "F", ".", "normalize", "(", "y", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", ",", "-", "1", ",", "-", "2", ")", "\n", "# FEAT did not normalize the query_feat", "\n", ")", "\n", "/", "temperature", ",", "\n", "}", "[", "mode", "]", "(", "query", ",", "proto", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.feat.ScaledDotProductAttention.__init__": [[58, 63], ["torch.nn.Module.__init__", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Softmax", "torch.nn.Softmax"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["def", "__init__", "(", "self", ",", "temperature", ",", "attn_dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "attn_dropout", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.feat.ScaledDotProductAttention.forward": [[64, 72], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.log_softmax", "torch.log_softmax", "feat.ScaledDotProductAttention.softmax", "feat.ScaledDotProductAttention.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "k.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ")", ":", "\n", "        ", "attn", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "attn", "=", "attn", "/", "self", ".", "temperature", "\n", "log_attn", "=", "F", ".", "log_softmax", "(", "attn", ",", "2", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "attn", "=", "self", ".", "dropout", "(", "attn", ")", "\n", "output", "=", "torch", ".", "bmm", "(", "attn", ",", "v", ")", "\n", "return", "output", ",", "attn", ",", "log_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.feat.MultiHeadAttention.__init__": [[77, 96], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "feat.ScaledDotProductAttention", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.Dropout", "torch.nn.Dropout", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_v", "=", "d_v", "\n", "\n", "self", ".", "w_qs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_ks", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_vs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_v", ",", "bias", "=", "False", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_qs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_ks", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_vs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_v", ")", ")", ")", "\n", "\n", "self", ".", "attention", "=", "ScaledDotProductAttention", "(", "temperature", "=", "np", ".", "power", "(", "d_k", ",", "0.5", ")", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_v", ",", "d_model", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.feat.MultiHeadAttention.forward": [[97, 121], ["q.permute().contiguous().reshape.permute().contiguous().reshape.size", "k.permute().contiguous().reshape.permute().contiguous().reshape.size", "v.permute().contiguous().reshape.permute().contiguous().reshape.size", "feat.MultiHeadAttention.w_qs().reshape", "feat.MultiHeadAttention.w_ks().reshape", "feat.MultiHeadAttention.w_vs().reshape", "q.permute().contiguous().reshape.permute().contiguous().reshape.permute().contiguous().reshape", "k.permute().contiguous().reshape.permute().contiguous().reshape.permute().contiguous().reshape", "v.permute().contiguous().reshape.permute().contiguous().reshape.permute().contiguous().reshape", "feat.MultiHeadAttention.attention", "feat.MultiHeadAttention.reshape", "feat.MultiHeadAttention.permute().contiguous().reshape", "feat.MultiHeadAttention.dropout", "feat.MultiHeadAttention.layer_norm", "feat.MultiHeadAttention.fc", "feat.MultiHeadAttention.w_qs", "feat.MultiHeadAttention.w_ks", "feat.MultiHeadAttention.w_vs", "q.permute().contiguous().reshape.permute().contiguous().reshape.permute().contiguous", "k.permute().contiguous().reshape.permute().contiguous().reshape.permute().contiguous", "v.permute().contiguous().reshape.permute().contiguous().reshape.permute().contiguous", "feat.MultiHeadAttention.permute().contiguous", "q.permute().contiguous().reshape.permute().contiguous().reshape.permute", "k.permute().contiguous().reshape.permute().contiguous().reshape.permute", "v.permute().contiguous().reshape.permute().contiguous().reshape.permute", "feat.MultiHeadAttention.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ")", ":", "\n", "        ", "d_k", ",", "d_v", ",", "n_head", "=", "self", ".", "d_k", ",", "self", ".", "d_v", ",", "self", ".", "n_head", "\n", "sz_b", ",", "len_q", ",", "_", "=", "q", ".", "size", "(", ")", "\n", "sz_b", ",", "len_k", ",", "_", "=", "k", ".", "size", "(", ")", "\n", "sz_b", ",", "len_v", ",", "_", "=", "v", ".", "size", "(", ")", "\n", "\n", "residual", "=", "q", "\n", "q", "=", "self", ".", "w_qs", "(", "q", ")", ".", "reshape", "(", "sz_b", ",", "len_q", ",", "n_head", ",", "d_k", ")", "\n", "k", "=", "self", ".", "w_ks", "(", "k", ")", ".", "reshape", "(", "sz_b", ",", "len_k", ",", "n_head", ",", "d_k", ")", "\n", "v", "=", "self", ".", "w_vs", "(", "v", ")", ".", "reshape", "(", "sz_b", ",", "len_v", ",", "n_head", ",", "d_v", ")", "\n", "\n", "q", "=", "q", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ",", "len_q", ",", "d_k", ")", "# (n*b) x lq x dk", "\n", "k", "=", "k", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ",", "len_k", ",", "d_k", ")", "# (n*b) x lk x dk", "\n", "v", "=", "v", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ",", "len_v", ",", "d_v", ")", "# (n*b) x lv x dv", "\n", "\n", "output", ",", "attn", ",", "log_attn", "=", "self", ".", "attention", "(", "q", ",", "k", ",", "v", ")", "\n", "\n", "output", "=", "output", ".", "reshape", "(", "n_head", ",", "sz_b", ",", "len_q", ",", "d_v", ")", "\n", "output", "=", "output", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", ".", "contiguous", "(", ")", ".", "reshape", "(", "sz_b", ",", "len_q", ",", "-", "1", ")", "# b x lq x (n*dv)", "\n", "\n", "output", "=", "self", ".", "dropout", "(", "self", ".", "fc", "(", "output", ")", ")", "\n", "output", "=", "self", ".", "layer_norm", "(", "output", "+", "residual", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.feat.FEAT.__init__": [[124, 134], ["metric_model.MetricModel.__init__", "feat.MultiHeadAttention", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "feat.ProtoLayer"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hdim", ",", "temperature", ",", "temperature2", ",", "balance", ",", "mode", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "FEAT", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "balance", "=", "balance", "\n", "self", ".", "hdim", "=", "hdim", "\n", "self", ".", "slf_attn", "=", "MultiHeadAttention", "(", "1", ",", "hdim", ",", "hdim", ",", "hdim", ",", "dropout", "=", "0.5", ")", "\n", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "temperature2", "=", "temperature2", "\n", "self", ".", "proto_layer", "=", "ProtoLayer", "(", "self", ".", "way_num", ",", "self", ".", "shot_num", ",", "self", ".", "query_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.feat.FEAT.set_forward": [[135, 153], ["images.to.to.to", "feat.FEAT.emb_func", "feat.FEAT.split_by_episode", "feat.FEAT._calc_logits().reshape", "core.utils.accuracy", "images.to.to.size", "query_target.reshape", "feat.FEAT._calc_logits"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy", "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.feat.FEAT._calc_logits"], ["", "def", "set_forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n\n        :param batch:\n        :return:\n        \"\"\"", "\n", "images", ",", "global_targets", "=", "batch", "\n", "images", "=", "images", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "episode_size", "=", "images", ".", "size", "(", "0", ")", "//", "(", "self", ".", "way_num", "*", "(", "self", ".", "shot_num", "+", "self", ".", "query_num", ")", ")", "\n", "self", ".", "feat", "=", "self", ".", "emb_func", "(", "images", ")", "# [e*(q+s) x hdim]", "\n", "self", ".", "support_feat", ",", "self", ".", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "\n", "self", ".", "feat", ",", "mode", "=", "1", "\n", ")", "\n", "\n", "logits", "=", "self", ".", "_calc_logits", "(", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "way_num", ")", "\n", "\n", "acc", "=", "accuracy", "(", "logits", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "return", "logits", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.feat.FEAT.set_forward_loss": [[154, 182], ["images.to.to.to", "feat.FEAT.emb_func", "feat.FEAT.split_by_episode", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "feat.FEAT._calc_logits().reshape", "feat.FEAT._calc_reg_logits().reshape", "feat.FEAT.loss_func", "feat.FEAT.loss_func", "core.utils.accuracy", "images.to.to.size", "query_target.reshape", "query_target.reshape", "support_target.reshape().contiguous", "query_target.reshape().contiguous", "feat.FEAT._calc_logits", "feat.FEAT._calc_reg_logits", "support_target.reshape", "query_target.reshape"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy", "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.feat.FEAT._calc_logits", "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.feat.FEAT._calc_reg_logits"], ["", "def", "set_forward_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n\n        :param batch:\n        :return:\n        \"\"\"", "\n", "images", ",", "global_targets", "=", "batch", "\n", "images", "=", "images", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "episode_size", "=", "images", ".", "size", "(", "0", ")", "//", "(", "self", ".", "way_num", "*", "(", "self", ".", "shot_num", "+", "self", ".", "query_num", ")", ")", "\n", "self", ".", "feat", "=", "self", ".", "emb_func", "(", "images", ")", "# [e*(q+s) x hdim]", "\n", "self", ".", "support_feat", ",", "self", ".", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "\n", "self", ".", "feat", ",", "mode", "=", "1", "\n", ")", "\n", "\n", "target_aux", "=", "torch", ".", "cat", "(", "\n", "[", "support_target", ".", "reshape", "(", "-", "1", ")", ".", "contiguous", "(", ")", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ".", "contiguous", "(", ")", "]", "\n", ")", "\n", "\n", "logits", "=", "self", ".", "_calc_logits", "(", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "way_num", ")", "\n", "reg_logits", "=", "self", ".", "_calc_reg_logits", "(", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "way_num", ")", "\n", "\n", "loss1", "=", "self", ".", "loss_func", "(", "logits", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n", "loss_reg", "=", "self", ".", "loss_func", "(", "reg_logits", ",", "target_aux", ")", "\n", "\n", "acc", "=", "accuracy", "(", "logits", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "loss", "=", "loss1", "*", "self", ".", "balance", "+", "loss_reg", "\n", "return", "logits", ",", "acc", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.feat.FEAT._calc_logits": [[183, 200], ["feat.FEAT.support_feat.reshape().mean", "feat.FEAT.slf_attn", "feat.FEAT.proto_layer", "feat.FEAT.support_feat.reshape"], "methods", ["None"], ["", "def", "_calc_logits", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        support -> proto\n        query and proto\n        \"\"\"", "\n", "support_feat", "=", "self", ".", "support_feat", ".", "reshape", "(", "\n", "self", ".", "episode_size", ",", "self", ".", "way_num", ",", "self", ".", "shot_num", ",", "-", "1", "\n", ")", ".", "mean", "(", "dim", "=", "2", ")", "\n", "proto", "=", "self", ".", "slf_attn", "(", "support_feat", ",", "support_feat", ",", "support_feat", ")", "\n", "# proto e w dim", "\n", "# query e wq hdim", "\n", "# num_batch = e", "\n", "# num_proto = way", "\n", "# num_query = way * hdim ?", "\n", "logits", "=", "self", ".", "proto_layer", "(", "self", ".", "query_feat", ",", "proto", ",", "self", ".", "mode", ",", "self", ".", "temperature", ")", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.feat.FEAT._calc_reg_logits": [[201, 236], ["feat.FEAT.feat.reshape", "numpy.prod", "aux_task.reshape().contiguous().unsqueeze.reshape().contiguous().unsqueeze.reshape", "feat.FEAT.slf_attn().reshape", "feat.FEAT.mean", "aux_task.reshape().contiguous().unsqueeze.reshape().contiguous().unsqueeze.reshape().contiguous().unsqueeze", "aux_center.expand.expand.expand", "feat.FEAT.proto_layer", "feat.FEAT.slf_attn", "aux_task.reshape().contiguous().unsqueeze.reshape().contiguous().unsqueeze.reshape().contiguous", "aux_task.reshape().contiguous().unsqueeze.reshape().contiguous().unsqueeze.reshape"], "methods", ["None"], ["", "def", "_calc_reg_logits", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        aux_task -> query\n        aux_center = proto\n        \"\"\"", "\n", "aux_task", "=", "self", ".", "feat", ".", "reshape", "(", "\n", "self", ".", "episode_size", ",", "self", ".", "way_num", ",", "self", ".", "shot_num", "+", "self", ".", "query_num", ",", "-", "1", "\n", ")", "\n", "# e w sq d", "\n", "num_query", "=", "np", ".", "prod", "(", "aux_task", ".", "shape", "[", "1", ":", "3", "]", ")", "# wsq*d", "\n", "aux_task", "=", "aux_task", ".", "reshape", "(", "\n", "self", ".", "episode_size", "*", "self", ".", "way_num", ",", "self", ".", "shot_num", "+", "self", ".", "query_num", ",", "self", ".", "hdim", "\n", ")", "\n", "\n", "# apply the transformation over the Aug Task", "\n", "aux_emb", "=", "self", ".", "slf_attn", "(", "aux_task", ",", "aux_task", ",", "aux_task", ")", ".", "reshape", "(", "\n", "self", ".", "episode_size", ",", "self", ".", "way_num", ",", "self", ".", "shot_num", "+", "self", ".", "query_num", ",", "self", ".", "hdim", "\n", ")", "# e w qs d", "\n", "# compute class mean", "\n", "aux_center", "=", "aux_emb", ".", "mean", "(", "2", ")", "# e w d # same as proto", "\n", "aux_task", "=", "(", "\n", "aux_task", ".", "reshape", "(", "\n", "self", ".", "episode_size", "*", "self", ".", "way_num", "*", "(", "self", ".", "shot_num", "+", "self", ".", "query_num", ")", ",", "\n", "self", ".", "hdim", ",", "\n", ")", "\n", ".", "contiguous", "(", ")", "\n", ".", "unsqueeze", "(", "1", ")", "\n", ")", "\n", "aux_center", "=", "aux_center", ".", "expand", "(", "self", ".", "episode_size", "*", "num_query", ",", "self", ".", "way_num", ",", "self", ".", "hdim", ")", "\n", "\n", "# proto ewsq w d", "\n", "# query ewsq 1 d", "\n", "logits_reg", "=", "self", ".", "proto_layer", "(", "aux_task", ",", "aux_center", ",", "self", ".", "mode", ",", "self", ".", "temperature2", ")", "\n", "\n", "return", "logits_reg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.metric_model.MetricModel.__init__": [[9, 11], ["core.model.abstract_model.AbstractModel.__init__"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "init_type", "=", "\"normal\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MetricModel", ",", "self", ")", ".", "__init__", "(", "init_type", ",", "ModelType", ".", "METRIC", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.metric_model.MetricModel.set_forward": [[12, 15], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.metric_model.MetricModel.set_forward_loss": [[16, 19], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_forward_loss", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.metric_model.MetricModel.forward": [[20, 23], ["metric_model.MetricModel.emb_func"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "emb_func", "(", "x", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.convm_net.ConvMLayer.__init__": [[34, 48], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Conv1d"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "way_num", ",", "shot_num", ",", "query_num", ",", "n_local", ")", ":", "\n", "        ", "super", "(", "ConvMLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "way_num", "=", "way_num", "\n", "self", ".", "shot_num", "=", "shot_num", "\n", "self", ".", "query_num", "=", "query_num", "\n", "# twq, 1, whw", "\n", "self", ".", "conv1dLayer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "\n", "in_channels", "=", "1", ",", "\n", "out_channels", "=", "1", ",", "\n", "kernel_size", "=", "n_local", ",", "\n", "stride", "=", "n_local", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.convm_net.ConvMLayer._calc_support_cov": [[51, 64], ["support_feat.view.view.size", "support_feat.view.view.view().permute().contiguous", "support_feat.view.view.view", "torch.matmul", "torch.div", "torch.mean", "support_feat.view.view.permute", "support_feat.view.view.view().permute", "support_feat.view.view.view"], "methods", ["None"], ["", "def", "_calc_support_cov", "(", "self", ",", "support_feat", ")", ":", "\n", "        ", "t", ",", "ws", ",", "c", ",", "h", ",", "w", "=", "support_feat", ".", "size", "(", ")", "\n", "\n", "# t, ws, c, h, w -> t, ws, hw, c -> t, w, shw, c", "\n", "support_feat", "=", "support_feat", ".", "view", "(", "t", ",", "ws", ",", "c", ",", "h", "*", "w", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "support_feat", "=", "support_feat", ".", "view", "(", "t", ",", "self", ".", "way_num", ",", "self", ".", "shot_num", "*", "h", "*", "w", ",", "c", ")", "\n", "support_feat", "=", "support_feat", "-", "torch", ".", "mean", "(", "support_feat", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "\n", "# t, w, c, c", "\n", "cov_mat", "=", "torch", ".", "matmul", "(", "support_feat", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ",", "support_feat", ")", "\n", "cov_mat", "=", "torch", ".", "div", "(", "cov_mat", ",", "h", "*", "w", "-", "1", ")", "\n", "\n", "return", "cov_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.convm_net.ConvMLayer._calc_similarity": [[65, 87], ["query_feat.unsqueeze.unsqueeze.size", "query_feat.unsqueeze.unsqueeze.view().permute().contiguous", "query_feat.unsqueeze.unsqueeze.unsqueeze", "support_cov_mat.unsqueeze.unsqueeze.unsqueeze", "torch.matmul", "torch.matmul().contiguous().view", "torch.diagonal().contiguous", "cov_sim.view.view.view", "torch.mean", "query_feat.unsqueeze.unsqueeze.view().permute", "torch.matmul().contiguous", "torch.diagonal", "query_feat.unsqueeze.unsqueeze.view", "torch.matmul", "torch.transpose"], "methods", ["None"], ["", "def", "_calc_similarity", "(", "self", ",", "query_feat", ",", "support_cov_mat", ")", ":", "\n", "        ", "t", ",", "wq", ",", "c", ",", "h", ",", "w", "=", "query_feat", ".", "size", "(", ")", "\n", "\n", "# t, wq, c, hw -> t, wq, hw, c -> t, wq, 1, hw, c", "\n", "query_feat", "=", "query_feat", ".", "view", "(", "t", ",", "wq", ",", "c", ",", "h", "*", "w", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "query_feat", "=", "query_feat", "-", "torch", ".", "mean", "(", "query_feat", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "query_feat", "=", "query_feat", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# t, wq, 1, hw, c matmul t, 1, w, c, c -> t, wq, w, hw, c", "\n", "# t, wq, w, hw, c matmul t, wq, 1, c, hw -> t, wq, w, hw, hw -> twqw, hw, hw", "\n", "support_cov_mat", "=", "support_cov_mat", ".", "unsqueeze", "(", "1", ")", "\n", "prod_mat", "=", "torch", ".", "matmul", "(", "query_feat", ",", "support_cov_mat", ")", "\n", "prod_mat", "=", "(", "\n", "torch", ".", "matmul", "(", "prod_mat", ",", "torch", ".", "transpose", "(", "query_feat", ",", "3", ",", "4", ")", ")", "\n", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "t", "*", "self", ".", "way_num", "*", "wq", ",", "h", "*", "w", ",", "h", "*", "w", ")", "\n", ")", "\n", "\n", "# twq, 1, whw", "\n", "cov_sim", "=", "torch", ".", "diagonal", "(", "prod_mat", ",", "dim1", "=", "1", ",", "dim2", "=", "2", ")", ".", "contiguous", "(", ")", "\n", "cov_sim", "=", "cov_sim", ".", "view", "(", "t", "*", "wq", ",", "1", ",", "self", ".", "way_num", "*", "h", "*", "w", ")", "\n", "return", "cov_sim", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.convm_net.ConvMLayer.forward": [[88, 95], ["query_feat.size", "convm_net.ConvMLayer._calc_support_cov", "convm_net.ConvMLayer._calc_similarity", "convm_net.ConvMLayer.conv1dLayer().view", "convm_net.ConvMLayer.conv1dLayer"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.convm_net.ConvMLayer._calc_support_cov", "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.convm_net.ConvMLayer._calc_similarity"], ["", "def", "forward", "(", "self", ",", "query_feat", ",", "support_feat", ")", ":", "\n", "        ", "t", ",", "wq", ",", "c", ",", "h", ",", "w", "=", "query_feat", ".", "size", "(", ")", "\n", "support_cov_mat", "=", "self", ".", "_calc_support_cov", "(", "support_feat", ")", "\n", "cov_sim", "=", "self", ".", "_calc_similarity", "(", "query_feat", ",", "support_cov_mat", ")", "\n", "score", "=", "self", ".", "conv1dLayer", "(", "cov_sim", ")", ".", "view", "(", "t", ",", "wq", ",", "self", ".", "way_num", ")", "\n", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.convm_net.ConvMNet.__init__": [[98, 102], ["metric_model.MetricModel.__init__", "convm_net.ConvMLayer", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_local", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ConvMNet", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "convm_layer", "=", "ConvMLayer", "(", "self", ".", "way_num", ",", "self", ".", "shot_num", ",", "self", ".", "query_num", ",", "n_local", ")", "\n", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.convm_net.ConvMNet.set_forward": [[103, 126], ["image.to.to.to", "convm_net.ConvMNet.emb_func", "convm_net.ConvMNet.split_by_episode", "convm_net.ConvMNet.convm_layer().reshape", "core.utils.accuracy", "image.to.to.size", "query_target.reshape", "convm_net.ConvMNet.convm_layer"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "episode_size", "=", "image", ".", "size", "(", "0", ")", "//", "(", "self", ".", "way_num", "*", "(", "self", ".", "shot_num", "+", "self", ".", "query_num", ")", ")", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "(", "\n", "support_feat", ",", "\n", "query_feat", ",", "\n", "support_target", ",", "\n", "query_target", ",", "\n", ")", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "2", ")", "\n", "\n", "output", "=", "self", ".", "convm_layer", "(", "query_feat", ",", "support_feat", ")", ".", "reshape", "(", "\n", "episode_size", "*", "self", ".", "way_num", "*", "self", ".", "query_num", ",", "self", ".", "way_num", "\n", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n", "return", "output", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.convm_net.ConvMNet.set_forward_loss": [[127, 151], ["image.to.to.to", "convm_net.ConvMNet.emb_func", "convm_net.ConvMNet.split_by_episode", "convm_net.ConvMNet.convm_layer().reshape", "convm_net.ConvMNet.loss_func", "core.utils.accuracy", "image.to.to.size", "query_target.reshape", "query_target.reshape", "convm_net.ConvMNet.convm_layer"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "episode_size", "=", "image", ".", "size", "(", "0", ")", "//", "(", "self", ".", "way_num", "*", "(", "self", ".", "shot_num", "+", "self", ".", "query_num", ")", ")", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "(", "\n", "support_feat", ",", "\n", "query_feat", ",", "\n", "support_target", ",", "\n", "query_target", ",", "\n", ")", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "2", ")", "\n", "\n", "output", "=", "self", ".", "convm_layer", "(", "query_feat", ",", "support_feat", ")", ".", "reshape", "(", "\n", "episode_size", "*", "self", ".", "way_num", "*", "self", ".", "query_num", ",", "self", ".", "way_num", "\n", ")", "\n", "loss", "=", "self", ".", "loss_func", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n", "return", "output", ",", "acc", ",", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.relation_net.RelationLayer.__init__": [[30, 47], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feat_dim", "=", "64", ",", "feat_height", "=", "3", ",", "feat_width", "=", "3", ")", ":", "\n", "        ", "super", "(", "RelationLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "feat_dim", "*", "2", ",", "feat_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "feat_dim", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "feat_dim", ",", "feat_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "feat_dim", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "feat_dim", "*", "feat_height", "*", "feat_width", ",", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "8", ",", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.relation_net.RelationLayer.forward": [[49, 55], ["relation_net.RelationLayer.layers", "relation_net.RelationLayer.reshape", "relation_net.RelationLayer.fc", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# print(x.shape)", "\n", "        ", "out", "=", "self", ".", "layers", "(", "x", ")", "\n", "out", "=", "out", ".", "reshape", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.relation_net.RelationNet.__init__": [[58, 65], ["metric_model.MetricModel.__init__", "relation_net.RelationLayer", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feat_dim", "=", "64", ",", "feat_height", "=", "3", ",", "feat_width", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RelationNet", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "feat_height", "=", "feat_height", "\n", "self", ".", "feat_width", "=", "feat_width", "\n", "self", ".", "relation_layer", "=", "RelationLayer", "(", "self", ".", "feat_dim", ",", "self", ".", "feat_height", ",", "self", ".", "feat_width", ")", "\n", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.relation_net.RelationNet.set_forward": [[66, 83], ["image.to.to.to", "relation_net.RelationNet.emb_func", "relation_net.RelationNet.split_by_episode", "relation_net.RelationNet._calc_pairs", "relation_net.RelationNet.relation_layer().reshape", "core.utils.accuracy", "query_target.reshape", "relation_net.RelationNet.relation_layer"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.relation_net.RelationNet._calc_pairs", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "2", ")", "\n", "\n", "relation_pair", "=", "self", ".", "_calc_pairs", "(", "query_feat", ",", "support_feat", ")", "\n", "output", "=", "self", ".", "relation_layer", "(", "relation_pair", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "way_num", ")", "\n", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "return", "output", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.relation_net.RelationNet.set_forward_loss": [[84, 102], ["image.to.to.to", "relation_net.RelationNet.emb_func", "relation_net.RelationNet.split_by_episode", "relation_net.RelationNet._calc_pairs", "relation_net.RelationNet.relation_layer().reshape", "relation_net.RelationNet.loss_func", "core.utils.accuracy", "query_target.reshape", "query_target.reshape", "relation_net.RelationNet.relation_layer"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.relation_net.RelationNet._calc_pairs", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "2", ")", "\n", "\n", "relation_pair", "=", "self", ".", "_calc_pairs", "(", "query_feat", ",", "support_feat", ")", "\n", "output", "=", "self", ".", "relation_layer", "(", "relation_pair", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "way_num", ")", "\n", "\n", "loss", "=", "self", ".", "loss_func", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "return", "output", ",", "acc", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.relation_net.RelationNet._calc_pairs": [[103, 126], ["torch.transpose.size", "torch.transpose.unsqueeze().repeat", "torch.transpose", "torch.sum().unsqueeze().repeat.reshape", "torch.sum().unsqueeze().repeat", "torch.cat().reshape", "torch.transpose.unsqueeze", "torch.sum().unsqueeze", "torch.cat", "torch.sum"], "methods", ["None"], ["", "def", "_calc_pairs", "(", "self", ",", "query_feat", ",", "support_feat", ")", ":", "\n", "        ", "\"\"\"\n\n        :param query_feat: (task_num, query_num * way_num, feat_dim, feat_width, feat_height)\n        :param support_feat: (task_num, support_num * way_num, feat_dim, feat_width, feat_height)\n        :return: query_num * way_num * way_num, feat_dim, feat_width, feat_height\n        \"\"\"", "\n", "t", ",", "_", ",", "c", ",", "h", ",", "w", "=", "query_feat", ".", "size", "(", ")", "\n", "# t, w, wq, c, h, w -> t, wq, w, c, h, w", "\n", "query_feat", "=", "query_feat", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "way_num", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "query_feat", "=", "torch", ".", "transpose", "(", "query_feat", ",", "1", ",", "2", ")", "\n", "\n", "# t, w, s, c, h, w -> t, 1, w, c, h, w -> t, wq, w, c, h, w", "\n", "support_feat", "=", "support_feat", ".", "reshape", "(", "t", ",", "self", ".", "way_num", ",", "self", ".", "shot_num", ",", "c", ",", "h", ",", "w", ")", "\n", "support_feat", "=", "(", "\n", "torch", ".", "sum", "(", "support_feat", ",", "dim", "=", "(", "2", ",", ")", ")", "\n", ".", "unsqueeze", "(", "1", ")", "\n", ".", "repeat", "(", "1", ",", "self", ".", "way_num", "*", "self", ".", "query_num", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", ")", "\n", "\n", "# t, wq, w, 2c, h, w -> twqw, 2c, h, w", "\n", "relation_pair", "=", "torch", ".", "cat", "(", "(", "query_feat", ",", "support_feat", ")", ",", "dim", "=", "3", ")", ".", "reshape", "(", "-", "1", ",", "c", "*", "2", ",", "h", ",", "w", ")", "\n", "return", "relation_pair", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.proto_net.ProtoLayer.__init__": [[28, 30], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ProtoLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.proto_net.ProtoLayer.forward": [[31, 62], ["query_feat.reshape.reshape.size", "support_feat.reshape.reshape.size", "query_feat.reshape.reshape.reshape", "support_feat.reshape.reshape.reshape", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.normalize", "torch.normalize", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.normalize", "torch.normalize", "x.unsqueeze", "y.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "query_feat", ",", "\n", "support_feat", ",", "\n", "way_num", ",", "\n", "shot_num", ",", "\n", "query_num", ",", "\n", "mode", "=", "\"euclidean\"", ",", "\n", ")", ":", "\n", "        ", "t", ",", "wq", ",", "c", "=", "query_feat", ".", "size", "(", ")", "\n", "_", ",", "ws", ",", "_", "=", "support_feat", ".", "size", "(", ")", "\n", "\n", "# t, wq, c", "\n", "query_feat", "=", "query_feat", ".", "reshape", "(", "t", ",", "way_num", "*", "query_num", ",", "c", ")", "\n", "# t, w, c", "\n", "support_feat", "=", "support_feat", ".", "reshape", "(", "t", ",", "way_num", ",", "shot_num", ",", "c", ")", "\n", "proto_feat", "=", "torch", ".", "mean", "(", "support_feat", ",", "dim", "=", "2", ")", "\n", "\n", "return", "{", "\n", "# t, wq, 1, c - t, 1, w, c -> t, wq, w", "\n", "\"euclidean\"", ":", "lambda", "x", ",", "y", ":", "-", "torch", ".", "sum", "(", "\n", "torch", ".", "pow", "(", "x", ".", "unsqueeze", "(", "2", ")", "-", "y", ".", "unsqueeze", "(", "1", ")", ",", "2", ")", ",", "\n", "dim", "=", "3", ",", "\n", ")", ",", "\n", "# t, wq, c - t, c, w -> t, wq, w", "\n", "\"cos_sim\"", ":", "lambda", "x", ",", "y", ":", "torch", ".", "matmul", "(", "\n", "F", ".", "normalize", "(", "x", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "transpose", "(", "F", ".", "normalize", "(", "y", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", ",", "-", "1", ",", "-", "2", ")", "\n", "# FEAT did not normalize the query_feat", "\n", ")", ",", "\n", "}", "[", "mode", "]", "(", "query_feat", ",", "proto_feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.proto_net.ProtoNet.__init__": [[65, 69], ["metric_model.MetricModel.__init__", "proto_net.ProtoLayer", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ProtoNet", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "proto_layer", "=", "ProtoLayer", "(", ")", "\n", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.proto_net.ProtoNet.set_forward": [[70, 88], ["image.to.to.to", "proto_net.ProtoNet.emb_func", "proto_net.ProtoNet.split_by_episode", "proto_net.ProtoNet.proto_layer().reshape", "core.utils.accuracy", "image.to.to.size", "query_target.reshape", "proto_net.ProtoNet.proto_layer"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "episode_size", "=", "image", ".", "size", "(", "0", ")", "//", "(", "self", ".", "way_num", "*", "(", "self", ".", "shot_num", "+", "self", ".", "query_num", ")", ")", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "1", ")", "\n", "\n", "output", "=", "self", ".", "proto_layer", "(", "\n", "query_feat", ",", "support_feat", ",", "self", ".", "way_num", ",", "self", ".", "shot_num", ",", "self", ".", "query_num", "\n", ")", ".", "reshape", "(", "episode_size", "*", "self", ".", "way_num", "*", "self", ".", "query_num", ",", "self", ".", "way_num", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n", "return", "output", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.proto_net.ProtoNet.set_forward_loss": [[89, 108], ["images.to.to.to", "proto_net.ProtoNet.emb_func", "proto_net.ProtoNet.split_by_episode", "proto_net.ProtoNet.proto_layer().reshape", "proto_net.ProtoNet.loss_func", "core.utils.accuracy", "images.to.to.size", "query_target.reshape", "query_target.reshape", "proto_net.ProtoNet.proto_layer"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n\n        :param batch:\n        :return:\n        \"\"\"", "\n", "images", ",", "global_targets", "=", "batch", "\n", "images", "=", "images", ".", "to", "(", "self", ".", "device", ")", "\n", "episode_size", "=", "images", ".", "size", "(", "0", ")", "//", "(", "self", ".", "way_num", "*", "(", "self", ".", "shot_num", "+", "self", ".", "query_num", ")", ")", "\n", "emb", "=", "self", ".", "emb_func", "(", "images", ")", "\n", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "emb", ",", "mode", "=", "1", ")", "\n", "\n", "output", "=", "self", ".", "proto_layer", "(", "\n", "query_feat", ",", "support_feat", ",", "self", ".", "way_num", ",", "self", ".", "shot_num", ",", "self", ".", "query_num", "\n", ")", ".", "reshape", "(", "episode_size", "*", "self", ".", "way_num", "*", "self", ".", "query_num", ",", "self", ".", "way_num", ")", "\n", "loss", "=", "self", ".", "loss_func", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n", "return", "output", ",", "acc", ",", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm_kl.KLLayer.__init__": [[30, 38], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "way_num", ",", "shot_num", ",", "query_num", ",", "n_k", ",", "device", ",", "CMS", "=", "False", ")", ":", "\n", "        ", "super", "(", "KLLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "way_num", "=", "way_num", "\n", "self", ".", "shot_num", "=", "shot_num", "\n", "self", ".", "query_num", "=", "query_num", "\n", "self", ".", "n_k", "=", "n_k", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "CMS", "=", "CMS", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm_kl.KLLayer._cal_cov_matrix_batch": [[39, 51], ["feat.size", "torch.mean", "torch.matmul", "torch.div", "feat.permute", "torch.eye().to", "torch.eye"], "methods", ["None"], ["", "def", "_cal_cov_matrix_batch", "(", "self", ",", "feat", ")", ":", "\n", "# feature: e *  Batch * descriptor_num * 64", "\n", "        ", "e", ",", "_", ",", "n_local", ",", "c", "=", "feat", ".", "size", "(", ")", "\n", "feature_mean", "=", "torch", ".", "mean", "(", "feat", ",", "2", ",", "True", ")", "\n", "# e * Batch * 1 * 64", "\n", "feat", "=", "feat", "-", "feature_mean", "\n", "cov_matrix", "=", "torch", ".", "matmul", "(", "feat", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ",", "feat", ")", "\n", "# ebc1 * eb1c = ebcc", "\n", "cov_matrix", "=", "torch", ".", "div", "(", "cov_matrix", ",", "n_local", "-", "1", ")", "\n", "cov_matrix", "=", "cov_matrix", "+", "0.01", "*", "torch", ".", "eye", "(", "c", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "return", "feature_mean", ",", "cov_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm_kl.KLLayer._cal_cov_batch": [[52, 64], ["feat.reshape().permute.reshape().permute.size", "feat.reshape().permute.reshape().permute.reshape().permute", "torch.mean", "torch.matmul", "torch.div", "feat.reshape().permute.reshape().permute.permute", "feat.reshape().permute.reshape().permute.reshape", "torch.eye().to", "torch.eye"], "methods", ["None"], ["", "def", "_cal_cov_batch", "(", "self", ",", "feat", ")", ":", "\n", "# feature: e * 25 * 64 * 21 * 21", "\n", "        ", "e", ",", "b", ",", "c", ",", "h", ",", "w", "=", "feat", ".", "size", "(", ")", "\n", "feat", "=", "feat", ".", "reshape", "(", "e", ",", "b", ",", "c", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", "feat_mean", "=", "torch", ".", "mean", "(", "feat", ",", "2", ",", "True", ")", "\n", "# e * Batch * 1 * 64", "\n", "feat", "=", "feat", "-", "feat_mean", "\n", "cov_matrix", "=", "torch", ".", "matmul", "(", "feat", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ",", "feat", ")", "\n", "cov_matrix", "=", "torch", ".", "div", "(", "cov_matrix", ",", "h", "*", "w", "-", "1", ")", "\n", "cov_matrix", "=", "cov_matrix", "+", "0.01", "*", "torch", ".", "eye", "(", "c", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "return", "feat_mean", ",", "cov_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm_kl.KLLayer._calc_kl_dist_batch": [[65, 104], ["torch.inverse", "torch.matmul", "torch.diagonal", "torch.sum", "torch.matmul", "torch.matmul", "maha_prod.squeeze.squeeze.squeeze", "maha_prod.squeeze.squeeze.squeeze", "cov1.unsqueeze", "torch.inverse.unsqueeze", "mean_diff.unsqueeze", "torch.inverse.unsqueeze", "mean_diff.unsqueeze", "torch.logdet().unsqueeze", "torch.logdet().unsqueeze", "mean1.size", "mean2.squeeze().unsqueeze", "torch.logdet", "torch.logdet", "mean2.squeeze"], "methods", ["None"], ["", "def", "_calc_kl_dist_batch", "(", "self", ",", "mean1", ",", "cov1", ",", "mean2", ",", "cov2", ")", ":", "\n", "        ", "\"\"\"\n\n        :param mean1: e * 75 * 1 * 64\n        :param cov1: e * 75 * 64 * 64\n        :param mean2: e * 5 * 1 * 64\n        :param cov2: e * 5 * 64 * 64\n        :return:\n        \"\"\"", "\n", "\n", "cov2_inverse", "=", "torch", ".", "inverse", "(", "cov2", ")", "\n", "# e * 5 * 64 * 64", "\n", "mean_diff", "=", "-", "(", "mean1", "-", "mean2", ".", "squeeze", "(", "2", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "# e * 75 * 5 * 64", "\n", "\n", "# Calculate the trace", "\n", "matrix_prod", "=", "torch", ".", "matmul", "(", "cov1", ".", "unsqueeze", "(", "2", ")", ",", "cov2_inverse", ".", "unsqueeze", "(", "1", ")", ")", "\n", "# e * 75 * 5 * 64 * 64", "\n", "\n", "trace_dist", "=", "torch", ".", "diagonal", "(", "matrix_prod", ",", "offset", "=", "0", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", "\n", "# e * 75 * 5 * 64", "\n", "trace_dist", "=", "torch", ".", "sum", "(", "trace_dist", ",", "dim", "=", "-", "1", ")", "\n", "# e * 75 * 5", "\n", "\n", "# Calcualte the Mahalanobis Distance", "\n", "maha_prod", "=", "torch", ".", "matmul", "(", "\n", "mean_diff", ".", "unsqueeze", "(", "3", ")", ",", "cov2_inverse", ".", "unsqueeze", "(", "1", ")", "\n", ")", "# e * 75 * 5 * 1 * 64", "\n", "maha_prod", "=", "torch", ".", "matmul", "(", "maha_prod", ",", "mean_diff", ".", "unsqueeze", "(", "4", ")", ")", "\n", "# e * 75 * 5 * 1 * 1", "\n", "maha_prod", "=", "maha_prod", ".", "squeeze", "(", "4", ")", "\n", "maha_prod", "=", "maha_prod", ".", "squeeze", "(", "3", ")", "\n", "# e * 75 * 5", "\n", "\n", "matrix_det", "=", "torch", ".", "logdet", "(", "cov2", ")", ".", "unsqueeze", "(", "1", ")", "-", "torch", ".", "logdet", "(", "cov1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "kl_dist", "=", "trace_dist", "+", "maha_prod", "+", "matrix_det", "-", "mean1", ".", "size", "(", "3", ")", "\n", "\n", "return", "kl_dist", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm_kl.KLLayer._cal_support_remaining": [[105, 115], ["torch.tensor().to", "torch.index_select", "S_new.reshape.reshape.reshape", "torch.tensor", "range", "range", "S.size", "S.size"], "methods", ["None"], ["", "def", "_cal_support_remaining", "(", "self", ",", "S", ")", ":", "\n", "# S: e * 5 * 441 * 64", "\n", "        ", "e", ",", "w", ",", "d", ",", "c", "=", "S", ".", "shape", "\n", "episode_indices", "=", "torch", ".", "tensor", "(", "\n", "[", "j", "for", "i", "in", "range", "(", "S", ".", "size", "(", "1", ")", ")", "for", "j", "in", "range", "(", "S", ".", "size", "(", "1", ")", ")", "if", "i", "!=", "j", "]", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "S_new", "=", "torch", ".", "index_select", "(", "S", ",", "1", ",", "episode_indices", ")", "\n", "S_new", "=", "S_new", ".", "reshape", "(", "[", "e", ",", "w", ",", "-", "1", ",", "c", "]", ")", "\n", "\n", "return", "S_new", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm_kl.KLLayer._cal_adm_sim": [[117, 153], ["query_feat.reshape().permute().contiguous.reshape().permute().contiguous.size", "support_feat.reshape().permute().contiguous.reshape().permute().contiguous.size", "adm_kl.KLLayer._cal_cov_batch", "query_feat.reshape().permute().contiguous.reshape().permute().contiguous.reshape().permute().contiguous", "support_feat.reshape().permute().contiguous.reshape().permute().contiguous.reshape().permute().contiguous", "support_feat.reshape().permute().contiguous.reshape().permute().contiguous.reshape", "adm_kl.KLLayer._cal_cov_matrix_batch", "adm_kl.KLLayer._calc_kl_dist_batch", "adm_kl.KLLayer._cal_support_remaining", "adm_kl.KLLayer._cal_cov_matrix_batch", "adm_kl.KLLayer._calc_kl_dist_batch", "query_feat.reshape().permute().contiguous.reshape().permute().contiguous.reshape().permute", "support_feat.reshape().permute().contiguous.reshape().permute().contiguous.reshape().permute", "query_feat.reshape().permute().contiguous.reshape().permute().contiguous.reshape", "support_feat.reshape().permute().contiguous.reshape().permute().contiguous.reshape"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm.ADMLayer._cal_cov_batch", "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm.ADMLayer._cal_cov_matrix_batch", "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm.ADMLayer._calc_kl_dist_batch", "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm_kl.KLLayer._cal_support_remaining", "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm.ADMLayer._cal_cov_matrix_batch", "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm.ADMLayer._calc_kl_dist_batch"], ["", "def", "_cal_adm_sim", "(", "self", ",", "query_feat", ",", "support_feat", ")", ":", "\n", "        ", "\"\"\"\n\n        :param query_feat: e * 75 * 64 * 21 * 21\n        :param support_feat: e * 25 * 64 * 21 * 21\n        :return:\n        \"\"\"", "\n", "# query_mean: e * 75 * 1 * 64  query_cov: e * 75 * 64 * 64", "\n", "e", ",", "b", ",", "c", ",", "h", ",", "w", "=", "query_feat", ".", "size", "(", ")", "\n", "e", ",", "s", ",", "_", ",", "_", ",", "_", "=", "support_feat", ".", "size", "(", ")", "\n", "query_mean", ",", "query_cov", "=", "self", ".", "_cal_cov_batch", "(", "query_feat", ")", "\n", "\n", "query_feat", "=", "query_feat", ".", "reshape", "(", "e", ",", "b", ",", "c", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "# Calculate the mean and covariance of the support set", "\n", "support_feat", "=", "support_feat", ".", "reshape", "(", "e", ",", "s", ",", "c", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "support_set", "=", "support_feat", ".", "reshape", "(", "e", ",", "self", ".", "way_num", ",", "self", ".", "shot_num", "*", "h", "*", "w", ",", "c", ")", "\n", "\n", "# s_mean: e * 5 * 1 * 64  s_cov: e * 5 * 64 * 64", "\n", "s_mean", ",", "s_cov", "=", "self", ".", "_cal_cov_matrix_batch", "(", "support_set", ")", "\n", "\n", "# Calculate the Wasserstein Distance", "\n", "kl_dis", "=", "-", "self", ".", "_calc_kl_dist_batch", "(", "query_mean", ",", "query_cov", ",", "s_mean", ",", "s_cov", ")", "# e * 75 * 5", "\n", "\n", "if", "self", ".", "CMS", ":", "# ADM_KL_CMS", "\n", "# Find the remaining support set", "\n", "            ", "support_set_remain", "=", "self", ".", "_cal_support_remaining", "(", "support_set", ")", "\n", "s_remain_mean", ",", "s_remain_cov", "=", "self", ".", "_cal_cov_matrix_batch", "(", "\n", "support_set_remain", "\n", ")", "# s_remain_mean: e * 5 * 1 * 64  s_remain_cov: e * 5 * 64 * 64", "\n", "kl_dis2", "=", "self", ".", "_calc_kl_dist_batch", "(", "\n", "query_mean", ",", "query_cov", ",", "s_remain_mean", ",", "s_remain_cov", "\n", ")", "# e * 75 * 5", "\n", "kl_dis", "=", "kl_dis", "+", "kl_dis2", "\n", "\n", "", "return", "kl_dis", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm_kl.KLLayer.forward": [[154, 156], ["adm_kl.KLLayer._cal_adm_sim"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm.ADMLayer._cal_adm_sim"], ["", "def", "forward", "(", "self", ",", "query_feat", ",", "support_feat", ")", ":", "\n", "        ", "return", "self", ".", "_cal_adm_sim", "(", "query_feat", ",", "support_feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm_kl.ADM_KL.__init__": [[159, 164], ["metric_model.MetricModel.__init__", "adm_kl.KLLayer", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_k", "=", "3", ",", "CMS", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ADM_KL", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "n_k", "=", "n_k", "\n", "self", ".", "klLayer", "=", "KLLayer", "(", "self", ".", "way_num", ",", "self", ".", "shot_num", ",", "self", ".", "query_num", ",", "n_k", ",", "self", ".", "device", ",", "CMS", ")", "\n", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm_kl.ADM_KL.set_forward": [[165, 187], ["image.to.to.to", "adm_kl.ADM_KL.emb_func", "adm_kl.ADM_KL.split_by_episode", "adm_kl.ADM_KL.klLayer().reshape", "core.utils.accuracy", "image.to.to.size", "query_target.reshape", "adm_kl.ADM_KL.klLayer"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "episode_size", "=", "image", ".", "size", "(", "0", ")", "//", "(", "self", ".", "way_num", "*", "(", "self", ".", "shot_num", "+", "self", ".", "query_num", ")", ")", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "(", "\n", "support_feat", ",", "\n", "query_feat", ",", "\n", "support_target", ",", "\n", "query_target", ",", "\n", ")", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "2", ")", "\n", "\n", "output", "=", "self", ".", "klLayer", "(", "query_feat", ",", "support_feat", ")", ".", "reshape", "(", "\n", "episode_size", "*", "self", ".", "way_num", "*", "self", ".", "query_num", ",", "-", "1", "\n", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "return", "output", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm_kl.ADM_KL.set_forward_loss": [[188, 211], ["image.to.to.to", "adm_kl.ADM_KL.emb_func", "adm_kl.ADM_KL.split_by_episode", "adm_kl.ADM_KL.klLayer().reshape", "adm_kl.ADM_KL.loss_func", "core.utils.accuracy", "image.to.to.size", "query_target.reshape", "query_target.reshape", "adm_kl.ADM_KL.klLayer"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "episode_size", "=", "image", ".", "size", "(", "0", ")", "//", "(", "self", ".", "way_num", "*", "(", "self", ".", "shot_num", "+", "self", ".", "query_num", ")", ")", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "(", "\n", "support_feat", ",", "\n", "query_feat", ",", "\n", "support_target", ",", "\n", "query_target", ",", "\n", ")", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "2", ")", "\n", "# assume here we will get n_dim=5", "\n", "output", "=", "self", ".", "klLayer", "(", "query_feat", ",", "support_feat", ")", ".", "reshape", "(", "\n", "episode_size", "*", "self", ".", "way_num", "*", "self", ".", "query_num", ",", "-", "1", "\n", ")", "\n", "loss", "=", "self", ".", "loss_func", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "return", "output", ",", "acc", ",", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm.ADMLayer.__init__": [[31, 40], ["torch.nn.Module.__init__", "torch.nn.BatchNorm1d", "torch.nn.Conv1d"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "way_num", ",", "shot_num", ",", "query_num", ",", "n_k", ",", "device", ")", ":", "\n", "        ", "super", "(", "ADMLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "way_num", "=", "way_num", "\n", "self", ".", "shot_num", "=", "shot_num", "\n", "self", ".", "query_num", "=", "query_num", "\n", "self", ".", "n_k", "=", "n_k", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "normLayer", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "way_num", "*", "2", ",", "affine", "=", "True", ")", "\n", "self", ".", "fcLayer", "=", "nn", ".", "Conv1d", "(", "1", ",", "1", ",", "kernel_size", "=", "2", ",", "stride", "=", "1", ",", "dilation", "=", "5", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm.ADMLayer._cal_cov_matrix_batch": [[41, 53], ["feat.size", "torch.mean", "torch.matmul", "torch.div", "feat.permute", "torch.eye().to", "torch.eye"], "methods", ["None"], ["", "def", "_cal_cov_matrix_batch", "(", "self", ",", "feat", ")", ":", "\n", "# feature: e *  Batch * descriptor_num * 64", "\n", "        ", "e", ",", "_", ",", "n_local", ",", "c", "=", "feat", ".", "size", "(", ")", "\n", "feature_mean", "=", "torch", ".", "mean", "(", "feat", ",", "2", ",", "True", ")", "\n", "# e * Batch * 1 * 64", "\n", "feat", "=", "feat", "-", "feature_mean", "\n", "cov_matrix", "=", "torch", ".", "matmul", "(", "feat", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ",", "feat", ")", "\n", "# ebc1 * eb1c = ebcc", "\n", "cov_matrix", "=", "torch", ".", "div", "(", "cov_matrix", ",", "n_local", "-", "1", ")", "\n", "cov_matrix", "=", "cov_matrix", "+", "0.01", "*", "torch", ".", "eye", "(", "c", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "return", "feature_mean", ",", "cov_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm.ADMLayer._cal_cov_batch": [[54, 66], ["feat.reshape().permute.reshape().permute.size", "feat.reshape().permute.reshape().permute.reshape().permute", "torch.mean", "torch.matmul", "torch.div", "feat.reshape().permute.reshape().permute.permute", "feat.reshape().permute.reshape().permute.reshape", "torch.eye().to", "torch.eye"], "methods", ["None"], ["", "def", "_cal_cov_batch", "(", "self", ",", "feat", ")", ":", "\n", "# feature: e * 25 * 64 * 21 * 21", "\n", "        ", "e", ",", "b", ",", "c", ",", "h", ",", "w", "=", "feat", ".", "size", "(", ")", "\n", "feat", "=", "feat", ".", "reshape", "(", "e", ",", "b", ",", "c", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", "feat_mean", "=", "torch", ".", "mean", "(", "feat", ",", "2", ",", "True", ")", "\n", "# e * Batch * 1 * 64", "\n", "feat", "=", "feat", "-", "feat_mean", "\n", "cov_matrix", "=", "torch", ".", "matmul", "(", "feat", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ",", "feat", ")", "\n", "cov_matrix", "=", "torch", ".", "div", "(", "cov_matrix", ",", "h", "*", "w", "-", "1", ")", "\n", "cov_matrix", "=", "cov_matrix", "+", "0.01", "*", "torch", ".", "eye", "(", "c", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "return", "feat_mean", ",", "cov_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm.ADMLayer._calc_kl_dist_batch": [[67, 117], ["torch.inverse", "torch.matmul", "torch.diagonal", "torch.sum", "torch.matmul", "torch.matmul", "maha_prod.squeeze.squeeze.squeeze", "maha_prod.squeeze.squeeze.squeeze", "cov1.unsqueeze", "torch.inverse.unsqueeze", "mean_diff.unsqueeze", "torch.inverse.unsqueeze", "mean_diff.unsqueeze", "torch.slogdet().logabsdet.unsqueeze", "torch.slogdet().logabsdet.unsqueeze", "mean1.size", "mean2.squeeze().unsqueeze", "mean2.squeeze", "torch.slogdet", "torch.slogdet"], "methods", ["None"], ["", "def", "_calc_kl_dist_batch", "(", "self", ",", "mean1", ",", "cov1", ",", "mean2", ",", "cov2", ")", ":", "\n", "        ", "\"\"\"\n\n        :param mean1: e * 75 * 1 * 64\n        :param cov1: e * 75 * 64 * 64\n        :param mean2: e * 5 * 1 * 64\n        :param cov2: e * 5 * 64 * 64\n        :return:\n        \"\"\"", "\n", "\n", "cov2_inverse", "=", "torch", ".", "inverse", "(", "cov2", ")", "\n", "# e * 5 * 64 * 64", "\n", "mean_diff", "=", "-", "(", "mean1", "-", "mean2", ".", "squeeze", "(", "2", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "# e * 75 * 5 * 64", "\n", "\n", "# Calculate the trace", "\n", "matrix_prod", "=", "torch", ".", "matmul", "(", "cov1", ".", "unsqueeze", "(", "2", ")", ",", "cov2_inverse", ".", "unsqueeze", "(", "1", ")", ")", "\n", "# e * 75 * 5 * 64 * 64", "\n", "\n", "# origin implementation:", "\n", "# trace_dist = [[torch.trace(matrix_prod[e][j][i]).unsqueeze(0) # modified for multi-task, stack for 64*64", "\n", "# tensors", "\n", "#                for j in range(matrix_prod.size(1))", "\n", "#                for i in range(matrix_prod.size(2))]", "\n", "#               for e in range(matrix_prod.size(0))] # list of trace_dist", "\n", "# trace_dist = torch.stack([torch.cat(trace_dist_list, 0) for trace_dist_list in trace_dist])", "\n", "# trace_dist = trace_dist.view(matrix_prod.size(0),matrix_prod.size(1), matrix_prod.size(2))  # e * 75 * 5", "\n", "\n", "# alternative implementation: (faster)", "\n", "trace_dist", "=", "torch", ".", "diagonal", "(", "matrix_prod", ",", "offset", "=", "0", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", "\n", "# e * 75 * 5 * 64", "\n", "trace_dist", "=", "torch", ".", "sum", "(", "trace_dist", ",", "dim", "=", "-", "1", ")", "\n", "# e * 75 * 5", "\n", "\n", "# Calcualte the Mahalanobis Distance", "\n", "maha_prod", "=", "torch", ".", "matmul", "(", "mean_diff", ".", "unsqueeze", "(", "3", ")", ",", "cov2_inverse", ".", "unsqueeze", "(", "1", ")", ")", "\n", "# e * 75 * 5 * 1 * 64", "\n", "maha_prod", "=", "torch", ".", "matmul", "(", "maha_prod", ",", "mean_diff", ".", "unsqueeze", "(", "4", ")", ")", "\n", "# e * 75 * 5 * 1 * 1", "\n", "maha_prod", "=", "maha_prod", ".", "squeeze", "(", "4", ")", "\n", "maha_prod", "=", "maha_prod", ".", "squeeze", "(", "3", ")", "\n", "# e * 75 * 5", "\n", "\n", "matrix_det", "=", "torch", ".", "slogdet", "(", "cov2", ")", ".", "logabsdet", ".", "unsqueeze", "(", "1", ")", "-", "torch", ".", "slogdet", "(", "\n", "cov1", "\n", ")", ".", "logabsdet", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "kl_dist", "=", "trace_dist", "+", "maha_prod", "+", "matrix_det", "-", "mean1", ".", "size", "(", "3", ")", "\n", "\n", "return", "kl_dist", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm.ADMLayer._cal_adm_sim": [[119, 172], ["query_feat.reshape().permute().contiguous.reshape().permute().contiguous.size", "support_feat.reshape().permute().contiguous.reshape().permute().contiguous.size", "adm.ADMLayer._cal_cov_batch", "query_feat.reshape().permute().contiguous.reshape().permute().contiguous.reshape().permute().contiguous", "support_feat.reshape().permute().contiguous.reshape().permute().contiguous.reshape().permute().contiguous", "support_feat.reshape().permute().contiguous.reshape().permute().contiguous.reshape", "adm.ADMLayer._cal_cov_matrix_batch", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "support_norm.reshape.reshape.reshape", "torch.matmul", "torch.topk", "torch.sum", "torch.cat", "torch.cat", "adm.ADMLayer.fcLayer().squeeze().reshape", "adm.ADMLayer._calc_kl_dist_batch", "torch.nn.functional.normalize.unsqueeze", "support_norm.reshape.reshape.permute().unsqueeze", "torch.sum", "query_feat.reshape().permute().contiguous.reshape().permute().contiguous.reshape().permute", "support_feat.reshape().permute().contiguous.reshape().permute().contiguous.reshape().permute", "adm.ADMLayer.normLayer().unsqueeze", "adm.ADMLayer.fcLayer().squeeze", "support_norm.reshape.reshape.permute", "query_feat.reshape().permute().contiguous.reshape().permute().contiguous.reshape", "support_feat.reshape().permute().contiguous.reshape().permute().contiguous.reshape", "adm.ADMLayer.normLayer", "adm.ADMLayer.fcLayer"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm.ADMLayer._cal_cov_batch", "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm.ADMLayer._cal_cov_matrix_batch", "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm.ADMLayer._calc_kl_dist_batch"], ["", "def", "_cal_adm_sim", "(", "self", ",", "query_feat", ",", "support_feat", ")", ":", "\n", "        ", "\"\"\"\n\n        :param query_feat: e * 75 * 64 * 21 * 21\n        :param support_feat: e * 25 * 64 * 21 * 21\n        :return:\n        \"\"\"", "\n", "# query_mean: e * 75 * 1 * 64  query_cov: e * 75 * 64 * 64", "\n", "e", ",", "b", ",", "c", ",", "h", ",", "w", "=", "query_feat", ".", "size", "(", ")", "\n", "e", ",", "s", ",", "_", ",", "_", ",", "_", "=", "support_feat", ".", "size", "(", ")", "\n", "\n", "query_mean", ",", "query_cov", "=", "self", ".", "_cal_cov_batch", "(", "query_feat", ")", "\n", "\n", "query_feat", "=", "query_feat", ".", "reshape", "(", "e", ",", "b", ",", "c", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "# Calculate the mean and covariance of the support set", "\n", "support_feat", "=", "support_feat", ".", "reshape", "(", "e", ",", "s", ",", "c", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "support_set", "=", "support_feat", ".", "reshape", "(", "e", ",", "self", ".", "way_num", ",", "self", ".", "shot_num", "*", "h", "*", "w", ",", "c", ")", "\n", "\n", "# s_mean: e * 5 * 1 * 64  s_cov: e * 5 * 64 * 64", "\n", "s_mean", ",", "s_cov", "=", "self", ".", "_cal_cov_matrix_batch", "(", "support_set", ")", "\n", "\n", "# Calculate the Wasserstein Distance", "\n", "kl_dis", "=", "-", "self", ".", "_calc_kl_dist_batch", "(", "query_mean", ",", "query_cov", ",", "s_mean", ",", "s_cov", ")", "# e * 75 * 5", "\n", "\n", "# Calculate the Image-to-Class Similarity", "\n", "query_norm", "=", "F", ".", "normalize", "(", "query_feat", ",", "p", "=", "2", ",", "dim", "=", "3", ")", "\n", "support_norm", "=", "F", ".", "normalize", "(", "support_feat", ",", "p", "=", "2", ",", "dim", "=", "3", ")", "\n", "support_norm", "=", "support_norm", ".", "reshape", "(", "e", ",", "self", ".", "way_num", ",", "self", ".", "shot_num", "*", "h", "*", "w", ",", "c", ")", "\n", "\n", "# cosine similarity between a query set and a support set", "\n", "# e * 75 * 5 * 441 * 2205", "\n", "inner_prod_matrix", "=", "torch", ".", "matmul", "(", "\n", "query_norm", ".", "unsqueeze", "(", "2", ")", ",", "\n", "support_norm", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", ")", "\n", "\n", "# choose the top-k nearest neighbors", "\n", "# e * 75 * 5 * 441 * 1", "\n", "topk_value", ",", "topk_index", "=", "torch", ".", "topk", "(", "inner_prod_matrix", ",", "self", ".", "n_k", ",", "4", ")", "\n", "inner_sim", "=", "torch", ".", "sum", "(", "torch", ".", "sum", "(", "topk_value", ",", "4", ")", ",", "3", ")", "# e * 75 * 5", "\n", "\n", "# Using FC layer to combine two parts ---- The original", "\n", "adm_sim_soft", "=", "torch", ".", "cat", "(", "(", "kl_dis", ",", "inner_sim", ")", ",", "2", ")", "\n", "\n", "adm_sim_soft", "=", "torch", ".", "cat", "(", "\n", "[", "self", ".", "normLayer", "(", "each_task", ")", ".", "unsqueeze", "(", "1", ")", "for", "each_task", "in", "adm_sim_soft", "]", "\n", ")", "\n", "# e * 75 * 1 * 10", "\n", "\n", "adm_sim_soft", "=", "self", ".", "fcLayer", "(", "adm_sim_soft", ")", ".", "squeeze", "(", "1", ")", ".", "reshape", "(", "[", "e", ",", "b", ",", "-", "1", "]", ")", "\n", "\n", "return", "adm_sim_soft", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm.ADMLayer.forward": [[173, 175], ["adm.ADMLayer._cal_adm_sim"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm.ADMLayer._cal_adm_sim"], ["", "def", "forward", "(", "self", ",", "query_feat", ",", "support_feat", ")", ":", "\n", "        ", "return", "self", ".", "_cal_adm_sim", "(", "query_feat", ",", "support_feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm.ADM.__init__": [[178, 183], ["metric_model.MetricModel.__init__", "adm.ADMLayer", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_k", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ADM", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "n_k", "=", "n_k", "\n", "self", ".", "adm_layer", "=", "ADMLayer", "(", "self", ".", "way_num", ",", "self", ".", "shot_num", ",", "self", ".", "query_num", ",", "n_k", ",", "self", ".", "device", ")", "\n", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm.ADM.set_forward": [[184, 201], ["image.to.to.to", "adm.ADM.emb_func", "adm.ADM.split_by_episode", "adm.ADM.adm_layer().reshape", "core.utils.accuracy", "image.to.to.size", "query_target.reshape", "adm.ADM.adm_layer"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "episode_size", "=", "image", ".", "size", "(", "0", ")", "//", "(", "self", ".", "way_num", "*", "(", "self", ".", "shot_num", "+", "self", ".", "query_num", ")", ")", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "2", ")", "\n", "\n", "output", "=", "self", ".", "adm_layer", "(", "query_feat", ",", "support_feat", ")", ".", "reshape", "(", "\n", "episode_size", "*", "self", ".", "way_num", "*", "self", ".", "query_num", ",", "-", "1", "\n", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "return", "output", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.adm.ADM.set_forward_loss": [[202, 220], ["image.to.to.to", "adm.ADM.emb_func", "adm.ADM.split_by_episode", "adm.ADM.adm_layer().reshape", "adm.ADM.loss_func", "core.utils.accuracy", "image.to.to.size", "query_target.reshape", "query_target.reshape", "adm.ADM.adm_layer"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "episode_size", "=", "image", ".", "size", "(", "0", ")", "//", "(", "self", ".", "way_num", "*", "(", "self", ".", "shot_num", "+", "self", ".", "query_num", ")", ")", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "2", ")", "\n", "# assume here we will get n_dim=5", "\n", "output", "=", "self", ".", "adm_layer", "(", "query_feat", ",", "support_feat", ")", ".", "reshape", "(", "\n", "episode_size", "*", "self", ".", "way_num", "*", "self", ".", "query_num", ",", "-", "1", "\n", ")", "\n", "loss", "=", "self", ".", "loss_func", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "return", "output", ",", "acc", ",", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.atl_net.AEAModule.__init__": [[32, 45], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feat_dim", ",", "scale_value", ",", "from_value", ",", "value_interval", ")", ":", "\n", "        ", "super", "(", "AEAModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "scale_value", "=", "scale_value", "\n", "self", ".", "from_value", "=", "from_value", "\n", "self", ".", "value_interval", "=", "value_interval", "\n", "\n", "self", ".", "f_psi", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "feat_dim", ",", "self", ".", "feat_dim", "//", "16", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "feat_dim", "//", "16", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.atl_net.AEAModule.forward": [[47, 58], ["x.size", "clamp_value.reshape.reshape.reshape", "torch.sigmoid", "torch.nn.functional.normalize", "atl_net.AEAModule.f_psi", "x.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "f_x", ")", ":", "\n", "# f_x -> t, wq, hw, wshw", "\n", "        ", "t", ",", "wq", ",", "hw", ",", "c", "=", "x", ".", "size", "(", ")", "\n", "\n", "# t, wq, hw, c -> t, wq, hw, 1", "\n", "clamp_value", "=", "self", ".", "f_psi", "(", "x", ".", "reshape", "(", "t", "*", "wq", "*", "hw", ",", "c", ")", ")", "*", "self", ".", "value_interval", "+", "self", ".", "from_value", "\n", "clamp_value", "=", "clamp_value", ".", "reshape", "(", "t", ",", "wq", ",", "hw", ",", "1", ")", "\n", "clamp_fx", "=", "torch", ".", "sigmoid", "(", "self", ".", "scale_value", "*", "(", "f_x", "-", "clamp_value", ")", ")", "\n", "attention_mask", "=", "F", ".", "normalize", "(", "clamp_fx", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "attention_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.atl_net.ATL_Layer.__init__": [[61, 93], ["torch.nn.Module.__init__", "torch.nn.Sequential", "atl_net.AEAModule", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "feat_dim", ",", "\n", "scale_value", ",", "\n", "atten_scale_value", ",", "\n", "from_value", ",", "\n", "value_interval", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ATL_Layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "scale_value", "=", "scale_value", "\n", "self", ".", "atten_scale_value", "=", "atten_scale_value", "\n", "self", ".", "from_value", "=", "from_value", "\n", "self", ".", "value_interval", "=", "value_interval", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "feat_dim", ",", "\n", "self", ".", "feat_dim", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "feat_dim", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "attenLayer", "=", "AEAModule", "(", "\n", "self", ".", "feat_dim", ",", "\n", "self", ".", "atten_scale_value", ",", "\n", "self", ".", "from_value", ",", "\n", "self", ".", "value_interval", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.atl_net.ATL_Layer.forward": [[95, 148], ["torch.nn.functional.normalize.size", "torch.nn.functional.normalize.size", "atl_net.ATL_Layer.W().reshape().permute().contiguous", "atl_net.ATL_Layer.W().reshape().permute().contiguous().reshape", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.matmul", "atl_net.ATL_Layer.attenLayer", "torch.nn.functional.normalize.reshape().permute().contiguous", "torch.nn.functional.normalize.reshape().permute().contiguous().reshape", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.matmul", "torch.mul().reshape().permute", "torch.sum", "torch.mean", "atl_net.ATL_Layer.W().reshape().permute", "atl_net.ATL_Layer.W().reshape().permute().contiguous", "torch.nn.functional.normalize.reshape().permute", "torch.nn.functional.normalize.reshape().permute().contiguous", "torch.mul().reshape", "atl_net.ATL_Layer.W().reshape", "atl_net.ATL_Layer.W().reshape().permute", "torch.nn.functional.normalize.reshape", "torch.nn.functional.normalize.reshape().permute", "torch.mul", "atl_net.ATL_Layer.W", "atl_net.ATL_Layer.W().reshape", "torch.nn.functional.normalize.reshape", "torch.nn.functional.normalize.reshape", "atl_net.ATL_Layer.W", "torch.nn.functional.normalize.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "way_num", ",", "shot_num", ",", "query_feat", ",", "support_feat", ")", ":", "\n", "        ", "t", ",", "wq", ",", "c", ",", "h", ",", "w", "=", "query_feat", ".", "size", "(", ")", "\n", "_", ",", "ws", ",", "_", ",", "_", ",", "_", "=", "support_feat", ".", "size", "(", ")", "\n", "\n", "# t, wq, c, hw -> t, wq, hw, c", "\n", "# t, ws, c, hw -> t, c, ws, hw -> t, 1, c, wshw", "\n", "w_query", "=", "(", "\n", "self", ".", "W", "(", "query_feat", ".", "reshape", "(", "t", "*", "wq", ",", "c", ",", "h", ",", "w", ")", ")", "\n", ".", "reshape", "(", "t", ",", "wq", ",", "c", ",", "h", "*", "w", ")", "\n", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", ".", "contiguous", "(", ")", "\n", ")", "\n", "w_support", "=", "(", "\n", "self", ".", "W", "(", "support_feat", ".", "reshape", "(", "t", "*", "ws", ",", "c", ",", "h", ",", "w", ")", ")", "\n", ".", "reshape", "(", "t", ",", "ws", ",", "c", ",", "h", "*", "w", ")", "\n", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", ".", "contiguous", "(", ")", "\n", ".", "reshape", "(", "t", ",", "1", ",", "c", ",", "ws", "*", "h", "*", "w", ")", "\n", ")", "\n", "\n", "w_query", "=", "F", ".", "normalize", "(", "w_query", ",", "dim", "=", "3", ")", "\n", "w_support", "=", "F", ".", "normalize", "(", "w_support", ",", "dim", "=", "2", ")", "\n", "\n", "# t, wq, hw, c matmul t, 1, c, wshw -> t, wq, hw, wshw", "\n", "f_x", "=", "torch", ".", "matmul", "(", "w_query", ",", "w_support", ")", "\n", "atten_score", "=", "self", ".", "attenLayer", "(", "w_query", ",", "f_x", ")", "\n", "\n", "# t, wq, c, hw -> t, wq, hw, c", "\n", "# t, ws, c, hw -> t, c, ws, hw -> t, 1, c, wshw", "\n", "query_feat", "=", "query_feat", ".", "reshape", "(", "t", ",", "wq", ",", "c", ",", "h", "*", "w", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "support_feat", "=", "(", "\n", "support_feat", ".", "reshape", "(", "t", ",", "ws", ",", "c", ",", "h", "*", "w", ")", "\n", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", ".", "contiguous", "(", ")", "\n", ".", "reshape", "(", "t", ",", "1", ",", "c", ",", "ws", "*", "h", "*", "w", ")", "\n", ")", "\n", "\n", "query_feat", "=", "F", ".", "normalize", "(", "query_feat", ",", "dim", "=", "3", ")", "\n", "support_feat", "=", "F", ".", "normalize", "(", "support_feat", ",", "dim", "=", "2", ")", "\n", "\n", "# t, wq, hw, c matmul t, 1, c, wshw -> t, wq, hw, wshw", "\n", "# t, wq, hw, wshw -> t, wq, hw, w, s, hw -> t, wq, w, s, hw, hw -> t, wq, w", "\n", "match_score", "=", "torch", ".", "matmul", "(", "query_feat", ",", "support_feat", ")", "\n", "\n", "atten_match_score", "=", "(", "\n", "torch", ".", "mul", "(", "atten_score", ",", "match_score", ")", "\n", ".", "reshape", "(", "t", ",", "wq", ",", "h", "*", "w", ",", "way_num", ",", "shot_num", ",", "h", "*", "w", ")", "\n", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ",", "5", ")", "\n", ")", "\n", "score", "=", "torch", ".", "sum", "(", "atten_match_score", ",", "dim", "=", "5", ")", "\n", "score", "=", "torch", ".", "mean", "(", "score", ",", "dim", "=", "[", "3", ",", "4", "]", ")", "*", "self", ".", "scale_value", "\n", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.atl_net.ATLNet.__init__": [[152, 170], ["metric_model.MetricModel.__init__", "atl_net.ATL_Layer", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "feat_dim", ",", "\n", "scale_value", "=", "30", ",", "\n", "atten_scale_value", "=", "50", ",", "\n", "from_value", "=", "0.5", ",", "\n", "value_interval", "=", "0.3", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "ATLNet", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "atlLayer", "=", "ATL_Layer", "(", "\n", "feat_dim", ",", "\n", "scale_value", ",", "\n", "atten_scale_value", ",", "\n", "from_value", ",", "\n", "value_interval", ",", "\n", ")", "\n", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.atl_net.ATLNet.set_forward": [[171, 194], ["image.to.to.to", "atl_net.ATLNet.emb_func", "atl_net.ATLNet.split_by_episode", "atl_net.ATLNet.atlLayer().reshape", "core.utils.accuracy", "image.to.to.size", "query_target.reshape", "atl_net.ATLNet.atlLayer"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "episode_size", "=", "image", ".", "size", "(", "0", ")", "//", "(", "self", ".", "way_num", "*", "(", "self", ".", "shot_num", "+", "self", ".", "query_num", ")", ")", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "(", "\n", "support_feat", ",", "\n", "query_feat", ",", "\n", "support_target", ",", "\n", "query_target", ",", "\n", ")", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "2", ")", "\n", "\n", "output", "=", "self", ".", "atlLayer", "(", "self", ".", "way_num", ",", "self", ".", "shot_num", ",", "query_feat", ",", "support_feat", ")", ".", "reshape", "(", "\n", "episode_size", "*", "self", ".", "way_num", "*", "self", ".", "query_num", ",", "self", ".", "way_num", "\n", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n", "return", "output", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.atl_net.ATLNet.set_forward_loss": [[195, 219], ["image.to.to.to", "atl_net.ATLNet.emb_func", "atl_net.ATLNet.split_by_episode", "atl_net.ATLNet.atlLayer().reshape", "atl_net.ATLNet.loss_func", "core.utils.accuracy", "image.to.to.size", "query_target.reshape", "query_target.reshape", "atl_net.ATLNet.atlLayer"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "episode_size", "=", "image", ".", "size", "(", "0", ")", "//", "(", "self", ".", "way_num", "*", "(", "self", ".", "shot_num", "+", "self", ".", "query_num", ")", ")", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "(", "\n", "support_feat", ",", "\n", "query_feat", ",", "\n", "support_target", ",", "\n", "query_target", ",", "\n", ")", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "2", ")", "\n", "\n", "output", "=", "self", ".", "atlLayer", "(", "self", ".", "way_num", ",", "self", ".", "shot_num", ",", "query_feat", ",", "support_feat", ")", ".", "reshape", "(", "\n", "episode_size", "*", "self", ".", "way_num", "*", "self", ".", "query_num", ",", "self", ".", "way_num", "\n", ")", "\n", "loss", "=", "self", ".", "loss_func", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n", "return", "output", ",", "acc", ",", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLBaseLearner.__init__": [[33, 43], ["torch.nn.Module.__init__", "torch.nn.ParameterList", "torch.nn.ParameterList", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "mtl_pretrain.MTLBaseLearner.var.append", "torch.nn.Parameter", "torch.nn.Parameter", "mtl_pretrain.MTLBaseLearner.var.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["def", "__init__", "(", "self", ",", "way_num", ",", "z_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "way_num", "=", "way_num", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "var", "=", "nn", ".", "ParameterList", "(", ")", "\n", "self", ".", "fc1_w", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "[", "self", ".", "way_num", ",", "self", ".", "z_dim", "]", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "fc1_w", ")", "\n", "self", ".", "var", ".", "append", "(", "self", ".", "fc1_w", ")", "\n", "self", ".", "fc1_b", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "way_num", ")", ")", "\n", "self", ".", "var", ".", "append", "(", "self", ".", "fc1_b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLBaseLearner.forward": [[44, 51], ["torch.linear", "torch.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_x", ",", "the_var", "=", "None", ")", ":", "\n", "        ", "if", "the_var", "is", "None", ":", "\n", "            ", "the_var", "=", "self", ".", "var", "\n", "", "fc1_w", "=", "the_var", "[", "0", "]", "\n", "fc1_b", "=", "the_var", "[", "1", "]", "\n", "net", "=", "F", ".", "linear", "(", "input_x", ",", "fc1_w", ",", "fc1_b", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLBaseLearner.parameters": [[52, 54], ["None"], "methods", ["None"], ["", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLPretrain.__init__": [[57, 71], ["finetuning_model.FinetuningModel.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "mtl_pretrain.MTLBaseLearner", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feat_dim", ",", "num_classes", ",", "inner_param", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MTLPretrain", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "pre_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "feat_dim", ",", "1000", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1000", ",", "self", ".", "num_classes", ")", ",", "\n", ")", "\n", "self", ".", "base_learner", "=", "MTLBaseLearner", "(", "self", ".", "way_num", ",", "z_dim", "=", "self", ".", "feat_dim", ")", "\n", "self", ".", "inner_param", "=", "inner_param", "\n", "\n", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLPretrain.set_forward": [[72, 92], ["image.to.to.to", "mtl_pretrain.MTLPretrain.split_by_episode", "mtl_pretrain.MTLPretrain.set_forward_adaptation", "classifier", "core.utils.accuracy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "mtl_pretrain.MTLPretrain.emb_func", "query_target.contiguous().reshape", "query_target.contiguous"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline.Baseline.set_forward_adaptation", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n        meta-validation\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "_", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "\n", "", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "4", ")", "\n", "\n", "classifier", ",", "fast_weight", "=", "self", ".", "set_forward_adaptation", "(", "support_feat", ",", "support_target", ")", "\n", "\n", "output", "=", "classifier", "(", "query_feat", ",", "fast_weight", ")", "\n", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "contiguous", "(", ")", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n", "return", "output", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLPretrain.set_forward_loss": [[93, 110], ["image.to.to.to", "global_target.to().contiguous.to().contiguous.to().contiguous", "mtl_pretrain.MTLPretrain.emb_func", "mtl_pretrain.MTLPretrain.pre_fc().contiguous", "mtl_pretrain.MTLPretrain.loss_func", "core.utils.accuracy", "global_target.to().contiguous.to().contiguous.to", "mtl_pretrain.MTLPretrain.pre_fc"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n        finetuning\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "global_target", "=", "global_target", ".", "to", "(", "self", ".", "device", ")", ".", "contiguous", "(", ")", "\n", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "\n", "output", "=", "self", ".", "pre_fc", "(", "feat", ")", ".", "contiguous", "(", ")", "\n", "\n", "loss", "=", "self", ".", "loss_func", "(", "output", ",", "global_target", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "global_target", ")", "\n", "return", "output", ",", "acc", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLPretrain.set_forward_adaptation": [[111, 131], ["mtl_pretrain.MTLPretrain.base_learner.to", "mtl_pretrain.MTLPretrain.base_learner", "mtl_pretrain.MTLPretrain.loss_func", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "list", "range", "mtl_pretrain.MTLPretrain.base_learner.parameters", "map", "mtl_pretrain.MTLPretrain.base_learner", "torch.cross_entropy", "torch.cross_entropy", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "list", "zip", "map", "mtl_pretrain.MTLPretrain.base_learner.parameters", "zip"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLBaseLearner.parameters", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLBaseLearner.parameters"], ["", "def", "set_forward_adaptation", "(", "self", ",", "support_feat", ",", "support_target", ")", ":", "\n", "        ", "classifier", "=", "self", ".", "base_learner", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "logit", "=", "self", ".", "base_learner", "(", "support_feat", ")", "\n", "loss", "=", "self", ".", "loss_func", "(", "logit", ",", "support_target", ")", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "base_learner", ".", "parameters", "(", ")", ")", "\n", "fast_parameters", "=", "list", "(", "\n", "map", "(", "\n", "lambda", "p", ":", "p", "[", "1", "]", "-", "0.01", "*", "p", "[", "0", "]", ",", "\n", "zip", "(", "grad", ",", "self", ".", "base_learner", ".", "parameters", "(", ")", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "for", "_", "in", "range", "(", "1", ",", "self", ".", "inner_param", "[", "\"iter\"", "]", ")", ":", "\n", "            ", "logit", "=", "self", ".", "base_learner", "(", "support_feat", ",", "fast_parameters", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logit", ",", "support_target", ")", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "fast_parameters", ")", "\n", "fast_parameters", "=", "list", "(", "map", "(", "lambda", "p", ":", "p", "[", "1", "]", "-", "0.01", "*", "p", "[", "0", "]", ",", "zip", "(", "grad", ",", "fast_parameters", ")", ")", ")", "\n", "\n", "", "return", "classifier", ",", "fast_parameters", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.rfs_model.DistillLayer.__init__": [[47, 58], ["torch.nn.Module.__init__", "rfs_model.DistillLayer._load_state_dict", "rfs_model.DistillLayer._load_state_dict"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.DistillLayer._load_state_dict", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.DistillLayer._load_state_dict"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "emb_func", ",", "\n", "classifier", ",", "\n", "is_distill", ",", "\n", "emb_func_path", "=", "None", ",", "\n", "classifier_path", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "DistillLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb_func", "=", "self", ".", "_load_state_dict", "(", "emb_func", ",", "emb_func_path", ",", "is_distill", ")", "\n", "self", ".", "classifier", "=", "self", ".", "_load_state_dict", "(", "classifier", ",", "classifier_path", ",", "is_distill", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.rfs_model.DistillLayer._load_state_dict": [[59, 66], ["copy.deepcopy", "torch.load", "copy.deepcopy.load_state_dict"], "methods", ["None"], ["", "def", "_load_state_dict", "(", "self", ",", "model", ",", "state_dict_path", ",", "is_distill", ")", ":", "\n", "        ", "new_model", "=", "None", "\n", "if", "is_distill", "and", "state_dict_path", "is", "not", "None", ":", "\n", "            ", "new_model", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "model_state_dict", "=", "torch", ".", "load", "(", "state_dict_path", ",", "map_location", "=", "\"cpu\"", ")", "\n", "new_model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "", "return", "new_model", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.rfs_model.DistillLayer.forward": [[67, 74], ["torch.no_grad", "rfs_model.DistillLayer.emb_func", "rfs_model.DistillLayer.classifier"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "None", "\n", "if", "self", ".", "emb_func", "is", "not", "None", "and", "self", ".", "classifier", "is", "not", "None", ":", "\n", "            ", "output", "=", "self", ".", "emb_func", "(", "x", ")", "\n", "output", "=", "self", ".", "classifier", "(", "output", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.rfs_model.RFSModel.__init__": [[77, 110], ["finetuning_model.FinetuningModel.__init__", "torch.nn.Linear", "torch.nn.CrossEntropyLoss", "DistillKLLoss", "rfs_model.RFSModel._init_network", "rfs_model.DistillLayer"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__", "home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel._init_network"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "feat_dim", ",", "\n", "num_class", ",", "\n", "gamma", "=", "1", ",", "\n", "alpha", "=", "0", ",", "\n", "is_distill", "=", "False", ",", "\n", "kd_T", "=", "4", ",", "\n", "emb_func_path", "=", "None", ",", "\n", "classifier_path", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "RFSModel", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "num_class", "=", "num_class", "\n", "\n", "self", ".", "is_distill", "=", "is_distill", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "feat_dim", ",", "self", ".", "num_class", ")", "\n", "self", ".", "ce_loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "kl_loss_func", "=", "DistillKLLoss", "(", "T", "=", "kd_T", ")", "\n", "\n", "self", ".", "_init_network", "(", ")", "\n", "\n", "self", ".", "distill_layer", "=", "DistillLayer", "(", "\n", "self", ".", "emb_func", ",", "\n", "self", ".", "classifier", ",", "\n", "self", ".", "is_distill", ",", "\n", "emb_func_path", ",", "\n", "classifier_path", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.rfs_model.RFSModel.set_forward": [[112, 147], ["image.to.to.to", "rfs_model.RFSModel.split_by_episode", "support_feat.size", "range", "numpy.stack", "torch.no_grad", "rfs_model.RFSModel.emb_func", "rfs_model.RFSModel.set_forward_adaptation", "torch.nn.functional.normalize().detach().cpu().numpy", "QT.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "rfs_model.RFSModel.predict", "output_list.append", "acc_list.append", "sum", "metrics.accuracy_score", "torch.nn.functional.normalize().detach().cpu", "QT.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "torch.nn.functional.normalize().detach", "QT.detach().cpu().numpy.detach().cpu().numpy.detach", "torch.nn.functional.normalize"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline.Baseline.set_forward_adaptation"], ["", "def", "set_forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "1", ")", "\n", "episode_size", "=", "support_feat", ".", "size", "(", "0", ")", "\n", "\n", "output_list", "=", "[", "]", "\n", "acc_list", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "episode_size", ")", ":", "\n", "            ", "SF", "=", "support_feat", "[", "idx", "]", "\n", "QF", "=", "query_feat", "[", "idx", "]", "\n", "ST", "=", "support_target", "[", "idx", "]", "\n", "QT", "=", "query_target", "[", "idx", "]", "\n", "\n", "classifier", "=", "self", ".", "set_forward_adaptation", "(", "SF", ",", "ST", ")", "\n", "\n", "QF", "=", "F", ".", "normalize", "(", "QF", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "QT", "=", "QT", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "classifier", ".", "predict", "(", "QF", ")", "\n", "acc", "=", "metrics", ".", "accuracy_score", "(", "QT", ",", "output", ")", "*", "100", "\n", "\n", "output_list", ".", "append", "(", "output", ")", "\n", "acc_list", ".", "append", "(", "acc", ")", "\n", "\n", "", "output", "=", "np", ".", "stack", "(", "output_list", ",", "axis", "=", "0", ")", "\n", "acc", "=", "sum", "(", "acc_list", ")", "/", "episode_size", "\n", "return", "output", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.rfs_model.RFSModel.set_forward_loss": [[148, 169], ["image.to.to.to", "global_target.to.to.to", "rfs_model.RFSModel.emb_func", "rfs_model.RFSModel.classifier", "rfs_model.RFSModel.distill_layer", "rfs_model.RFSModel.ce_loss_func", "rfs_model.RFSModel.kl_loss_func", "core.utils.accuracy"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "global_target", "=", "global_target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "output", "=", "self", ".", "classifier", "(", "feat", ")", "\n", "distill_output", "=", "self", ".", "distill_layer", "(", "image", ")", "\n", "\n", "gamma_loss", "=", "self", ".", "ce_loss_func", "(", "output", ",", "global_target", ")", "\n", "alpha_loss", "=", "self", ".", "kl_loss_func", "(", "output", ",", "distill_output", ")", "\n", "loss", "=", "gamma_loss", "*", "self", ".", "gamma", "+", "alpha_loss", "*", "self", ".", "alpha", "\n", "\n", "acc", "=", "accuracy", "(", "output", ",", "global_target", ")", "\n", "\n", "return", "output", ",", "acc", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.rfs_model.RFSModel.set_forward_adaptation": [[170, 186], ["LogisticRegression", "torch.nn.functional.normalize().detach().cpu().numpy", "support_target.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "LogisticRegression.fit", "torch.nn.functional.normalize().detach().cpu", "support_target.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "torch.nn.functional.normalize().detach", "support_target.detach().cpu().numpy.detach().cpu().numpy.detach", "torch.nn.functional.normalize"], "methods", ["None"], ["", "def", "set_forward_adaptation", "(", "self", ",", "support_feat", ",", "support_target", ")", ":", "\n", "        ", "classifier", "=", "LogisticRegression", "(", "\n", "penalty", "=", "\"l2\"", ",", "\n", "random_state", "=", "0", ",", "\n", "C", "=", "1.0", ",", "\n", "solver", "=", "\"lbfgs\"", ",", "\n", "max_iter", "=", "1000", ",", "\n", "multi_class", "=", "\"multinomial\"", ",", "\n", ")", "\n", "\n", "support_feat", "=", "F", ".", "normalize", "(", "support_feat", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "support_target", "=", "support_target", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "classifier", ".", "fit", "(", "support_feat", ",", "support_target", ")", "\n", "\n", "return", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.rfs_model.RFSModel.train": [[187, 191], ["rfs_model.RFSModel.emb_func.train", "rfs_model.RFSModel.classifier.train", "rfs_model.RFSModel.distill_layer.train"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.train", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.train", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "self", ".", "emb_func", ".", "train", "(", "mode", ")", "\n", "self", ".", "classifier", ".", "train", "(", "mode", ")", "\n", "self", ".", "distill_layer", ".", "train", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.rfs_model.RFSModel.eval": [[192, 194], ["super().eval"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.eval"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "super", "(", "RFSModel", ",", "self", ")", ".", "eval", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.finetuning_model.FinetuningModel.__init__": [[11, 13], ["core.model.abstract_model.AbstractModel.__init__"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "init_type", "=", "\"normal\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "FinetuningModel", ",", "self", ")", ".", "__init__", "(", "init_type", ",", "ModelType", ".", "FINETUNING", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.finetuning_model.FinetuningModel.set_forward": [[14, 17], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.finetuning_model.FinetuningModel.set_forward_loss": [[18, 21], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_forward_loss", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.finetuning_model.FinetuningModel.forward": [[22, 25], ["finetuning_model.FinetuningModel.emb_func"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "emb_func", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.finetuning_model.FinetuningModel.set_forward_adaptation": [[26, 29], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_forward_adaptation", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.finetuning_model.FinetuningModel.sub_optimizer": [[30, 36], ["dict", "dict.update", "getattr", "model.parameters"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.mtl_pretrain.MTLBaseLearner.parameters"], ["", "def", "sub_optimizer", "(", "self", ",", "model", ",", "config", ")", ":", "\n", "        ", "kwargs", "=", "dict", "(", ")", "\n", "\n", "if", "config", "[", "\"kwargs\"", "]", "is", "not", "None", ":", "\n", "            ", "kwargs", ".", "update", "(", "config", "[", "\"kwargs\"", "]", ")", "\n", "", "return", "getattr", "(", "torch", ".", "optim", ",", "config", "[", "\"name\"", "]", ")", "(", "model", ".", "parameters", "(", ")", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.feat_pretrain.FEAT_Pretrain.__init__": [[27, 37], ["finetuning_model.FinetuningModel.__init__", "torch.nn.Linear", "metric.proto_net.ProtoLayer", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feat_dim", ",", "train_num_class", ",", "val_num_class", ",", "mode", "=", "\"euclidean\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "FEAT_Pretrain", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "train_num_class", "=", "train_num_class", "\n", "self", ".", "val_num_class", "=", "val_num_class", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "\n", "self", ".", "train_classifier", "=", "nn", ".", "Linear", "(", "self", ".", "feat_dim", ",", "self", ".", "train_num_class", ")", "\n", "self", ".", "val_classifier", "=", "ProtoLayer", "(", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.feat_pretrain.FEAT_Pretrain.set_forward": [[38, 58], ["image.to.to.to", "feat_pretrain.FEAT_Pretrain.split_by_episode", "feat_pretrain.FEAT_Pretrain.val_classifier().reshape", "core.utils.accuracy", "torch.no_grad", "feat_pretrain.FEAT_Pretrain.emb_func", "query_target.reshape", "feat_pretrain.FEAT_Pretrain.val_classifier"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward", "(", "self", ",", "batch", ")", ":", "\n", "# FIXME:  do not do validation in first 500 epoches # # test on 16-way 1-shot", "\n", "        ", "\"\"\"\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "\n", "", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "1", ")", "\n", "\n", "output", "=", "self", ".", "val_classifier", "(", "\n", "query_feat", ",", "support_feat", ",", "self", ".", "way_num", ",", "self", ".", "shot_num", ",", "self", ".", "query_num", ",", "mode", "=", "self", ".", "mode", "\n", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "way_num", ")", "\n", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n", "return", "output", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.feat_pretrain.FEAT_Pretrain.set_forward_loss": [[59, 74], ["image.to.to.to", "target.to.to.to", "feat_pretrain.FEAT_Pretrain.emb_func", "feat_pretrain.FEAT_Pretrain.train_classifier", "feat_pretrain.FEAT_Pretrain.loss_func", "core.utils.accuracy"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "output", "=", "self", ".", "train_classifier", "(", "feat", ")", "\n", "\n", "loss", "=", "self", ".", "loss_func", "(", "output", ",", "target", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "target", ")", "\n", "return", "output", ",", "acc", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.feat_pretrain.FEAT_Pretrain.set_forward_adaptation": [[75, 77], ["None"], "methods", ["None"], ["", "def", "set_forward_adaptation", "(", "self", ",", "support_feat", ",", "support_target", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.DistillLayer.__init__": [[46, 57], ["torch.nn.Module.__init__", "skd_model.DistillLayer._load_state_dict", "skd_model.DistillLayer._load_state_dict"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.DistillLayer._load_state_dict", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.DistillLayer._load_state_dict"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "emb_func", ",", "\n", "cls_classifier", ",", "\n", "is_distill", ",", "\n", "emb_func_path", "=", "None", ",", "\n", "cls_classifier_path", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "DistillLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb_func", "=", "self", ".", "_load_state_dict", "(", "emb_func", ",", "emb_func_path", ",", "is_distill", ")", "\n", "self", ".", "cls_classifier", "=", "self", ".", "_load_state_dict", "(", "cls_classifier", ",", "cls_classifier_path", ",", "is_distill", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.DistillLayer._load_state_dict": [[58, 65], ["torch.load", "model.load_state_dict", "copy.deepcopy"], "methods", ["None"], ["", "def", "_load_state_dict", "(", "self", ",", "model", ",", "state_dict_path", ",", "is_distill", ")", ":", "\n", "        ", "new_model", "=", "None", "\n", "if", "is_distill", "and", "state_dict_path", "is", "not", "None", ":", "\n", "            ", "model_state_dict", "=", "torch", ".", "load", "(", "state_dict_path", ",", "map_location", "=", "\"cpu\"", ")", "\n", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "new_model", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "", "return", "new_model", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.DistillLayer.forward": [[66, 74], ["torch.no_grad", "skd_model.DistillLayer.emb_func", "skd_model.DistillLayer.cls_classifier"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "None", "\n", "if", "self", ".", "emb_func", "is", "not", "None", "and", "self", ".", "cls_classifier", "is", "not", "None", ":", "\n", "            ", "output", "=", "self", ".", "emb_func", "(", "x", ")", "\n", "output", "=", "self", ".", "cls_classifier", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.__init__": [[77, 111], ["finetuning_model.FinetuningModel.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.CrossEntropyLoss", "core.model.loss.L2DistLoss", "DistillKLLoss", "skd_model.DistillLayer"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "feat_dim", ",", "\n", "num_class", ",", "\n", "gamma", "=", "1", ",", "\n", "alpha", "=", "1", ",", "\n", "is_distill", "=", "False", ",", "\n", "kd_T", "=", "4", ",", "\n", "emb_func_path", "=", "None", ",", "\n", "cls_classifier_path", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "SKDModel", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "num_class", "=", "num_class", "\n", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n", "self", ".", "is_distill", "=", "is_distill", "\n", "\n", "self", ".", "cls_classifier", "=", "nn", ".", "Linear", "(", "self", ".", "feat_dim", ",", "self", ".", "num_class", ")", "\n", "self", ".", "rot_classifier", "=", "nn", ".", "Linear", "(", "self", ".", "num_class", ",", "4", ")", "\n", "self", ".", "ce_loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "l2_loss_func", "=", "L2DistLoss", "(", ")", "\n", "self", ".", "kl_loss_func", "=", "DistillKLLoss", "(", "T", "=", "kd_T", ")", "\n", "\n", "self", ".", "distill_layer", "=", "DistillLayer", "(", "\n", "self", ".", "emb_func", ",", "\n", "self", ".", "cls_classifier", ",", "\n", "self", ".", "is_distill", ",", "\n", "emb_func_path", ",", "\n", "cls_classifier_path", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.set_forward": [[113, 149], ["image.to.to.to", "skd_model.SKDModel.split_by_episode", "support_feat.size", "range", "numpy.stack", "torch.no_grad", "skd_model.SKDModel.emb_func", "support_target[].reshape", "query_target[].reshape", "skd_model.SKDModel.set_forward_adaptation", "torch.nn.functional.normalize().detach().cpu().numpy", "QT.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "skd_model.SKDModel.predict", "output_list.append", "acc_list.append", "sum", "metrics.accuracy_score", "torch.nn.functional.normalize().detach().cpu", "QT.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "torch.nn.functional.normalize().detach", "QT.detach().cpu().numpy.detach().cpu().numpy.detach", "torch.nn.functional.normalize"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline.Baseline.set_forward_adaptation"], ["", "def", "set_forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "\n", "", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "1", ")", "\n", "episode_size", "=", "support_feat", ".", "size", "(", "0", ")", "\n", "\n", "output_list", "=", "[", "]", "\n", "acc_list", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "episode_size", ")", ":", "\n", "            ", "SF", "=", "support_feat", "[", "idx", "]", "\n", "QF", "=", "query_feat", "[", "idx", "]", "\n", "ST", "=", "support_target", "[", "idx", "]", ".", "reshape", "(", "-", "1", ")", "\n", "QT", "=", "query_target", "[", "idx", "]", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "classifier", "=", "self", ".", "set_forward_adaptation", "(", "SF", ",", "ST", ")", "\n", "\n", "QF", "=", "F", ".", "normalize", "(", "QF", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "QT", "=", "QT", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "classifier", ".", "predict", "(", "QF", ")", "\n", "acc", "=", "metrics", ".", "accuracy_score", "(", "QT", ",", "output", ")", "*", "100", "\n", "\n", "output_list", ".", "append", "(", "output", ")", "\n", "acc_list", ".", "append", "(", "acc", ")", "\n", "\n", "", "output", "=", "np", ".", "stack", "(", "output_list", ",", "axis", "=", "0", ")", "\n", "acc", "=", "sum", "(", "acc_list", ")", "/", "episode_size", "\n", "return", "output", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.set_forward_loss": [[150, 181], ["image.to.to.to", "target.to.to.to", "image.to.to.size", "skd_model.SKDModel.rot_image_generation", "skd_model.SKDModel.emb_func", "skd_model.SKDModel.cls_classifier", "skd_model.SKDModel.distill_layer", "core.utils.accuracy", "skd_model.SKDModel.kl_loss_func", "skd_model.SKDModel.rot_classifier", "skd_model.SKDModel.ce_loss_func", "torch.sum", "skd_model.SKDModel.l2_loss_func", "torch.nn.functional.binary_cross_entropy_with_logits"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.rot_image_generation", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "batch_size", "=", "image", ".", "size", "(", "0", ")", "\n", "\n", "generated_image", ",", "generated_target", ",", "rot_target", "=", "self", ".", "rot_image_generation", "(", "image", ",", "target", ")", "\n", "\n", "feat", "=", "self", ".", "emb_func", "(", "generated_image", ")", "\n", "output", "=", "self", ".", "cls_classifier", "(", "feat", ")", "\n", "distill_output", "=", "self", ".", "distill_layer", "(", "image", ")", "\n", "\n", "if", "self", ".", "is_distill", ":", "\n", "            ", "gamma_loss", "=", "self", ".", "kl_loss_func", "(", "output", "[", ":", "batch_size", "]", ",", "distill_output", ")", "\n", "alpha_loss", "=", "self", ".", "l2_loss_func", "(", "output", "[", "batch_size", ":", "]", ",", "output", "[", ":", "batch_size", "]", ")", "/", "3", "\n", "", "else", ":", "\n", "            ", "rot_output", "=", "self", ".", "rot_classifier", "(", "output", ")", "\n", "gamma_loss", "=", "self", ".", "ce_loss_func", "(", "output", ",", "generated_target", ")", "\n", "alpha_loss", "=", "torch", ".", "sum", "(", "F", ".", "binary_cross_entropy_with_logits", "(", "rot_output", ",", "rot_target", ")", ")", "\n", "\n", "", "loss", "=", "gamma_loss", "*", "self", ".", "gamma", "+", "alpha_loss", "*", "self", ".", "alpha", "\n", "\n", "acc", "=", "accuracy", "(", "output", ",", "generated_target", ")", "\n", "\n", "return", "output", ",", "acc", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.set_forward_adaptation": [[182, 197], ["LogisticRegression", "torch.nn.functional.normalize().detach().cpu().numpy", "support_target.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "LogisticRegression.fit", "torch.nn.functional.normalize().detach().cpu", "support_target.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "torch.nn.functional.normalize().detach", "support_target.detach().cpu().numpy.detach().cpu().numpy.detach", "torch.nn.functional.normalize"], "methods", ["None"], ["", "def", "set_forward_adaptation", "(", "self", ",", "support_feat", ",", "support_target", ")", ":", "\n", "        ", "classifier", "=", "LogisticRegression", "(", "\n", "random_state", "=", "0", ",", "\n", "solver", "=", "\"lbfgs\"", ",", "\n", "max_iter", "=", "1000", ",", "\n", "penalty", "=", "\"l2\"", ",", "\n", "multi_class", "=", "\"multinomial\"", ",", "\n", ")", "\n", "\n", "support_feat", "=", "F", ".", "normalize", "(", "support_feat", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "support_target", "=", "support_target", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "classifier", ".", "fit", "(", "support_feat", ",", "support_target", ")", "\n", "\n", "return", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.rot_image_generation": [[198, 222], ["image.size", "image.transpose().flip", "image.flip().flip", "image.flip().transpose", "torch.cat", "target.repeat", "torch.zeros", "torch.nn.functional.one_hot().float().to.long().to", "torch.cat", "target.repeat", "torch.zeros", "torch.nn.functional.one_hot().float().to", "image.transpose", "image.flip", "image.flip", "torch.nn.functional.one_hot().float().to.long", "torch.nn.functional.one_hot().float", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot().float().to.to"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.metric.can.one_hot"], ["", "def", "rot_image_generation", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "batch_size", "=", "image", ".", "size", "(", "0", ")", "\n", "images_90", "=", "image", ".", "transpose", "(", "2", ",", "3", ")", ".", "flip", "(", "2", ")", "\n", "images_180", "=", "image", ".", "flip", "(", "2", ")", ".", "flip", "(", "3", ")", "\n", "images_270", "=", "image", ".", "flip", "(", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", "\n", "\n", "if", "self", ".", "is_distill", ":", "\n", "            ", "generated_image", "=", "torch", ".", "cat", "(", "(", "image", ",", "images_180", ")", ",", "dim", "=", "0", ")", "\n", "generated_target", "=", "target", ".", "repeat", "(", "2", ")", "\n", "\n", "rot_target", "=", "torch", ".", "zeros", "(", "batch_size", "*", "4", ")", "\n", "rot_target", "[", "batch_size", ":", "]", "+=", "1", "\n", "rot_target", "=", "rot_target", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "generated_image", "=", "torch", ".", "cat", "(", "[", "image", ",", "images_90", ",", "images_180", ",", "images_270", "]", ",", "dim", "=", "0", ")", "\n", "generated_target", "=", "target", ".", "repeat", "(", "4", ")", "\n", "\n", "rot_target", "=", "torch", ".", "zeros", "(", "batch_size", "*", "4", ")", "\n", "rot_target", "[", "batch_size", ":", "]", "+=", "1", "\n", "rot_target", "[", "batch_size", "*", "2", ":", "]", "+=", "1", "\n", "rot_target", "[", "batch_size", "*", "3", ":", "]", "+=", "1", "\n", "rot_target", "=", "F", ".", "one_hot", "(", "rot_target", ".", "to", "(", "torch", ".", "int64", ")", ",", "4", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "return", "generated_image", ",", "generated_target", ",", "rot_target", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.train": [[223, 228], ["skd_model.SKDModel.emb_func.train", "skd_model.SKDModel.rot_classifier.train", "skd_model.SKDModel.cls_classifier.train", "skd_model.SKDModel.distill_layer.train"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.train", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.train", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.train", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "self", ".", "emb_func", ".", "train", "(", "mode", ")", "\n", "self", ".", "rot_classifier", ".", "train", "(", "mode", ")", "\n", "self", ".", "cls_classifier", ".", "train", "(", "mode", ")", "\n", "self", ".", "distill_layer", ".", "train", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.eval": [[229, 231], ["super().eval"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.eval"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "super", "(", "SKDModel", ",", "self", ")", ".", "eval", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline_plus.DistLinear.__init__": [[33, 50], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.utils.weight_norm"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ")", ":", "\n", "        ", "super", "(", "DistLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_channel", ",", "out_channel", ",", "bias", "=", "False", ")", "\n", "# See the issue#4&8 in the official repo", "\n", "self", ".", "class_wise_learnable_norm", "=", "True", "\n", "# split the weight update component to direction and norm", "\n", "if", "self", ".", "class_wise_learnable_norm", ":", "\n", "            ", "weight_norm", "(", "self", ".", "fc", ",", "\"weight\"", ",", "dim", "=", "0", ")", "\n", "\n", "", "if", "out_channel", "<=", "200", ":", "\n", "# a fixed scale factor to scale the output of cos value", "\n", "# into a reasonably large input for softmax", "\n", "            ", "self", ".", "scale_factor", "=", "2", "\n", "", "else", ":", "\n", "# in omniglot, a larger scale factor is", "\n", "# required to handle >1000 output classes.", "\n", "            ", "self", ".", "scale_factor", "=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline_plus.DistLinear.forward": [[51, 67], ["torch.norm().unsqueeze().expand_as", "x.div", "baseline_plus.DistLinear.fc", "torch.norm().unsqueeze().expand_as", "baseline_plus.DistLinear.fc.weight.data.div", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm", "torch.norm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_norm", "=", "torch", ".", "norm", "(", "x", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "x", ")", "\n", "x_normalized", "=", "x", ".", "div", "(", "x_norm", "+", "0.00001", ")", "\n", "if", "not", "self", ".", "class_wise_learnable_norm", ":", "\n", "            ", "fc_norm", "=", "(", "\n", "torch", ".", "norm", "(", "self", ".", "fc", ".", "weight", ".", "data", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", ".", "unsqueeze", "(", "1", ")", "\n", ".", "expand_as", "(", "self", ".", "fc", ".", "weight", ".", "data", ")", "\n", ")", "\n", "self", ".", "fc", ".", "weight", ".", "data", "=", "self", ".", "fc", ".", "weight", ".", "data", ".", "div", "(", "fc_norm", "+", "0.00001", ")", "\n", "# matrix product by forward function, but when using WeightNorm,", "\n", "# this also multiply the cosine distance by a class-wise learnable norm", "\n", "", "cos_dist", "=", "self", ".", "fc", "(", "x_normalized", ")", "\n", "score", "=", "self", ".", "scale_factor", "*", "cos_dist", "\n", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline_plus.BaselinePlus.__init__": [[70, 79], ["finetuning_model.FinetuningModel.__init__", "torch.nn.CrossEntropyLoss", "baseline_plus.DistLinear"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feat_dim", ",", "num_class", ",", "inner_param", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BaselinePlus", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "inner_param", "=", "inner_param", "\n", "\n", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "classifier", "=", "DistLinear", "(", "self", ".", "feat_dim", ",", "self", ".", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline_plus.BaselinePlus.set_forward": [[80, 103], ["image.to.to.to", "baseline_plus.BaselinePlus.split_by_episode", "support_feat.size", "range", "torch.cat", "core.utils.accuracy", "torch.no_grad", "baseline_plus.BaselinePlus.emb_func", "baseline_plus.BaselinePlus.set_forward_adaptation", "output_list.append", "query_target.reshape"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline.Baseline.set_forward_adaptation"], ["", "def", "set_forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "\n", "", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "1", ")", "\n", "episode_size", "=", "support_feat", ".", "size", "(", "0", ")", "\n", "\n", "output_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "episode_size", ")", ":", "\n", "            ", "output", "=", "self", ".", "set_forward_adaptation", "(", "support_feat", "[", "i", "]", ",", "support_target", "[", "i", "]", ",", "query_feat", "[", "i", "]", ")", "\n", "output_list", ".", "append", "(", "output", ")", "\n", "\n", "", "output", "=", "torch", ".", "cat", "(", "output_list", ",", "dim", "=", "0", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n", "return", "output", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline_plus.BaselinePlus.set_forward_loss": [[104, 119], ["image.to.to.to", "target.to.to.to", "baseline_plus.BaselinePlus.emb_func", "baseline_plus.BaselinePlus.classifier", "baseline_plus.BaselinePlus.loss_func", "core.utils.accuracy", "target.to.to.reshape", "target.to.to.reshape"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "output", "=", "self", ".", "classifier", "(", "feat", ")", "\n", "loss", "=", "self", ".", "loss_func", "(", "output", ",", "target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "return", "output", ",", "acc", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline_plus.BaselinePlus.set_forward_adaptation": [[120, 145], ["baseline_plus.DistLinear", "baseline_plus.BaselinePlus.sub_optimizer", "classifier.to.to.to", "classifier.to.to.train", "support_feat.size", "range", "classifier.to.to.", "torch.randperm", "range", "classifier.to.to.", "baseline_plus.BaselinePlus.loss_func", "baseline_plus.BaselinePlus.zero_grad", "baseline_plus.BaselinePlus.backward", "baseline_plus.BaselinePlus.step", "min"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.finetuning_model.FinetuningModel.sub_optimizer", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.train"], ["", "def", "set_forward_adaptation", "(", "self", ",", "support_feat", ",", "support_target", ",", "query_feat", ")", ":", "\n", "        ", "classifier", "=", "DistLinear", "(", "self", ".", "feat_dim", ",", "self", ".", "way_num", ")", "\n", "optimizer", "=", "self", ".", "sub_optimizer", "(", "classifier", ",", "self", ".", "inner_param", "[", "\"inner_optim\"", "]", ")", "\n", "\n", "classifier", "=", "classifier", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "classifier", ".", "train", "(", ")", "\n", "support_size", "=", "support_feat", ".", "size", "(", "0", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "inner_param", "[", "\"inner_train_iter\"", "]", ")", ":", "\n", "            ", "rand_id", "=", "torch", ".", "randperm", "(", "support_size", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "support_size", ",", "self", ".", "inner_param", "[", "\"inner_batch_size\"", "]", ")", ":", "\n", "                ", "select_id", "=", "rand_id", "[", "i", ":", "min", "(", "i", "+", "self", ".", "inner_param", "[", "\"inner_batch_size\"", "]", ",", "support_size", ")", "]", "\n", "batch", "=", "support_feat", "[", "select_id", "]", "\n", "target", "=", "support_target", "[", "select_id", "]", "\n", "\n", "output", "=", "classifier", "(", "batch", ")", "\n", "\n", "loss", "=", "self", ".", "loss_func", "(", "output", ",", "target", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "output", "=", "classifier", "(", "query_feat", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline.Baseline.__init__": [[28, 36], ["finetuning_model.FinetuningModel.__init__", "torch.nn.Linear", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feat_dim", ",", "num_class", ",", "inner_param", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Baseline", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "inner_param", "=", "inner_param", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "feat_dim", ",", "self", ".", "num_class", ")", "\n", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline.Baseline.set_forward": [[37, 59], ["image.to.to.to", "baseline.Baseline.split_by_episode", "support_feat.size", "range", "torch.cat", "core.utils.accuracy", "torch.no_grad", "baseline.Baseline.emb_func", "baseline.Baseline.set_forward_adaptation", "output_list.append", "query_target.reshape"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.model.abstract_model.AbstractModel.split_by_episode", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline.Baseline.set_forward_adaptation"], ["", "def", "set_forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "global_target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "\n", "", "support_feat", ",", "query_feat", ",", "support_target", ",", "query_target", "=", "self", ".", "split_by_episode", "(", "feat", ",", "mode", "=", "1", ")", "\n", "episode_size", "=", "support_feat", ".", "size", "(", "0", ")", "\n", "\n", "output_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "episode_size", ")", ":", "\n", "            ", "output", "=", "self", ".", "set_forward_adaptation", "(", "support_feat", "[", "i", "]", ",", "support_target", "[", "i", "]", ",", "query_feat", "[", "i", "]", ")", "\n", "output_list", ".", "append", "(", "output", ")", "\n", "\n", "", "output", "=", "torch", ".", "cat", "(", "output_list", ",", "dim", "=", "0", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "query_target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n", "return", "output", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline.Baseline.set_forward_loss": [[60, 74], ["image.to.to.to", "target.to.to.to", "baseline.Baseline.emb_func", "baseline.Baseline.classifier", "baseline.Baseline.loss_func", "core.utils.accuracy"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.accuracy"], ["", "def", "set_forward_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n        :param batch:\n        :return:\n        \"\"\"", "\n", "image", ",", "target", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "feat", "=", "self", ".", "emb_func", "(", "image", ")", "\n", "output", "=", "self", ".", "classifier", "(", "feat", ")", "\n", "loss", "=", "self", ".", "loss_func", "(", "output", ",", "target", ")", "\n", "acc", "=", "accuracy", "(", "output", ",", "target", ")", "\n", "return", "output", ",", "acc", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.baseline.Baseline.set_forward_adaptation": [[75, 100], ["torch.nn.Linear", "baseline.Baseline.sub_optimizer", "classifier.to.to.to", "classifier.to.to.train", "support_feat.size", "range", "classifier.to.to.", "torch.randperm", "range", "classifier.to.to.", "baseline.Baseline.loss_func", "baseline.Baseline.zero_grad", "baseline.Baseline.backward", "baseline.Baseline.step", "min"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.finetuning_model.FinetuningModel.sub_optimizer", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.train"], ["", "def", "set_forward_adaptation", "(", "self", ",", "support_feat", ",", "support_target", ",", "query_feat", ")", ":", "\n", "        ", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "feat_dim", ",", "self", ".", "way_num", ")", "\n", "optimizer", "=", "self", ".", "sub_optimizer", "(", "classifier", ",", "self", ".", "inner_param", "[", "\"inner_optim\"", "]", ")", "\n", "\n", "classifier", "=", "classifier", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "classifier", ".", "train", "(", ")", "\n", "support_size", "=", "support_feat", ".", "size", "(", "0", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "inner_param", "[", "\"inner_train_iter\"", "]", ")", ":", "\n", "            ", "rand_id", "=", "torch", ".", "randperm", "(", "support_size", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "support_size", ",", "self", ".", "inner_param", "[", "\"inner_batch_size\"", "]", ")", ":", "\n", "                ", "select_id", "=", "rand_id", "[", "i", ":", "min", "(", "i", "+", "self", ".", "inner_param", "[", "\"inner_batch_size\"", "]", ",", "support_size", ")", "]", "\n", "batch", "=", "support_feat", "[", "select_id", "]", "\n", "target", "=", "support_target", "[", "select_id", "]", "\n", "\n", "output", "=", "classifier", "(", "batch", ")", "\n", "\n", "loss", "=", "self", ".", "loss_func", "(", "output", ",", "target", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "output", "=", "classifier", "(", "query_feat", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_18.BasicBlock.__init__": [[25, 34], ["torch.Module.__init__", "resnet_18.conv3x3", "torch.BatchNorm2d", "torch.ReLU", "resnet_18.conv3x3", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12.conv3x3", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_18.BasicBlock.forward": [[35, 52], ["resnet_18.BasicBlock.conv1", "resnet_18.BasicBlock.bn1", "resnet_18.BasicBlock.relu", "resnet_18.BasicBlock.conv2", "resnet_18.BasicBlock.bn2", "resnet_18.BasicBlock.relu", "resnet_18.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_18.Bottleneck.__init__": [[57, 68], ["torch.Module.__init__", "resnet_18.conv1x1", "torch.BatchNorm2d", "resnet_18.conv3x3", "torch.BatchNorm2d", "resnet_18.conv1x1", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_18.conv1x1", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12.conv3x3", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_18.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_18.Bottleneck.forward": [[69, 90], ["resnet_18.Bottleneck.conv1", "resnet_18.Bottleneck.bn1", "resnet_18.Bottleneck.relu", "resnet_18.Bottleneck.conv2", "resnet_18.Bottleneck.bn2", "resnet_18.Bottleneck.relu", "resnet_18.Bottleneck.conv3", "resnet_18.Bottleneck.bn3", "resnet_18.Bottleneck.relu", "resnet_18.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_18.ResNet.__init__": [[93, 133], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "resnet_18.ResNet._make_layer", "resnet_18.ResNet._make_layer", "resnet_18.ResNet._make_layer", "resnet_18.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "resnet_18.ResNet.modules", "isinstance", "resnet_18.ResNet.modules", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.wrn.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", "=", "BasicBlock", ",", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "zero_init_residual", "=", "False", ",", "\n", "is_feature", "=", "False", ",", "\n", "avg_pool", "=", "True", ",", "\n", "is_flatten", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "is_feature", "=", "is_feature", "\n", "self", ".", "avg_pool", "=", "avg_pool", "\n", "self", ".", "is_flatten", "=", "is_flatten", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_18.ResNet._make_layer": [[134, 149], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet_18.conv1x1", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_18.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_18.ResNet.forward": [[150, 170], ["resnet_18.ResNet.conv1", "resnet_18.ResNet.bn1", "resnet_18.ResNet.relu", "resnet_18.ResNet.layer1", "resnet_18.ResNet.layer2", "resnet_18.ResNet.layer3", "resnet_18.ResNet.layer4", "resnet_18.ResNet.avgpool", "out4.view.view.view", "out4.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "out1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "out2", "=", "self", ".", "layer2", "(", "out1", ")", "\n", "out3", "=", "self", ".", "layer3", "(", "out2", ")", "\n", "out4", "=", "self", ".", "layer4", "(", "out3", ")", "\n", "\n", "if", "self", ".", "avg_pool", ":", "\n", "            ", "out4", "=", "self", ".", "avgpool", "(", "out4", ")", "\n", "\n", "", "if", "self", ".", "is_flatten", ":", "\n", "            ", "out4", "=", "out4", ".", "view", "(", "out4", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "is_feature", ":", "\n", "            ", "return", "out1", ",", "out2", ",", "out3", ",", "out4", "\n", "\n", "", "return", "out4", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_18.conv3x3": [[5, 14], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_18.conv1x1": [[17, 20], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_18.resnet18": [[172, 176], ["resnet_18.ResNet"], "function", ["None"], ["", "", "def", "resnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.vit.PreNorm.__init__": [[11, 15], ["torch.nn.Module.__init__", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "fn", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "self", ".", "fn", "=", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.vit.PreNorm.forward": [[16, 18], ["vit.PreNorm.fn", "vit.PreNorm.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "fn", "(", "self", ".", "norm", "(", "x", ")", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.vit.FeedForward.__init__": [[21, 29], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.GELU", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "hidden_dim", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim", ",", "hidden_dim", ")", ",", "\n", "nn", ".", "GELU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "dim", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.vit.FeedForward.forward": [[31, 33], ["vit.FeedForward.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.vit.Attention.__init__": [[36, 51], ["torch.nn.Module.__init__", "torch.nn.Softmax", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Identity", "torch.nn.Linear", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__", "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Identity"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "heads", "=", "8", ",", "dim_head", "=", "64", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "inner_dim", "=", "dim_head", "*", "heads", "\n", "project_out", "=", "not", "(", "heads", "==", "1", "and", "dim_head", "==", "dim", ")", "\n", "\n", "self", ".", "heads", "=", "heads", "\n", "self", ".", "scale", "=", "dim_head", "**", "-", "0.5", "\n", "\n", "self", ".", "attend", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "to_qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "inner_dim", "*", "3", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "to_out", "=", "(", "\n", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "inner_dim", ",", "dim", ")", ",", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "if", "project_out", "\n", "else", "nn", ".", "Identity", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.vit.Attention.forward": [[53, 74], ["vit.Attention.to_qkv().chunk", "map", "vit.Attention.attend", "torch.einsum", "einops.rearrange", "vit.Attention.to_out", "torch.einsum", "vit.Attention.to_qkv", "einops.rearrange"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "heads", "\n", "qkv", "=", "self", ".", "to_qkv", "(", "x", ")", ".", "chunk", "(", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# def rearrange(t):", "\n", "#     B, N, _ = t.shape", "\n", "#     return t.reshape(B, N, h, -1).permute(0, 2, 1, 3)", "\n", "#", "\n", "# q, k, v = map(rearrange, qkv)", "\n", "\n", "q", ",", "k", ",", "v", "=", "map", "(", "lambda", "t", ":", "rearrange", "(", "t", ",", "\"b n (h d) -> b h n d\"", ",", "h", "=", "h", ")", ",", "qkv", ")", "\n", "\n", "dots", "=", "einsum", "(", "\"b h i d, b h j d -> b h i j\"", ",", "q", ",", "k", ")", "*", "self", ".", "scale", "\n", "\n", "attn", "=", "self", ".", "attend", "(", "dots", ")", "\n", "\n", "out", "=", "einsum", "(", "\"b h i j, b h j d -> b h i d\"", ",", "attn", ",", "v", ")", "\n", "# B, H, N, D = out.shape", "\n", "# out = out.permute(0, 2, 1, 3).reshape(B, N, H * D)", "\n", "out", "=", "rearrange", "(", "out", ",", "\"b h n d -> b n (h d)\"", ")", "\n", "return", "self", ".", "to_out", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.vit.Transformer.__init__": [[77, 93], ["torch.nn.Module.__init__", "vit.PreNorm", "vit.PreNorm", "vit.Attention", "vit.FeedForward"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "depth", ",", "heads", ",", "dim_head", ",", "mlp_dim", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "[", "\n", "[", "\n", "PreNorm", "(", "\n", "dim", ",", "\n", "Attention", "(", "\n", "dim", ",", "\n", "heads", "=", "heads", ",", "\n", "dim_head", "=", "dim_head", ",", "\n", "dropout", "=", "dropout", ",", "\n", ")", ",", "\n", ")", ",", "\n", "PreNorm", "(", "dim", ",", "FeedForward", "(", "dim", ",", "mlp_dim", ",", "dropout", "=", "dropout", ")", ")", ",", "\n", "]", "\n", "]", "*", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.vit.Transformer.forward": [[94, 99], ["attn", "ff"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "attn", ",", "ff", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "attn", "(", "x", ")", "+", "x", "\n", "x", "=", "ff", "(", "x", ")", "+", "x", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.vit.ViT.__init__": [[102, 149], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Dropout", "vit.Transformer", "torch.nn.Identity", "torch.nn.Sequential", "einops.layers.torch.Rearrange", "torch.nn.Linear", "torch.randn", "torch.randn", "torch.nn.LayerNorm", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__", "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Identity"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "image_size", ",", "\n", "patch_size", ",", "\n", "dim", ",", "\n", "depth", ",", "\n", "heads", ",", "\n", "mlp_dim", ",", "\n", "channels", "=", "3", ",", "\n", "dim_head", "=", "64", ",", "\n", "pool", "=", "\"mean\"", ",", "\n", "dropout", "=", "0.0", ",", "\n", "emb_dropout", "=", "0.0", ",", "\n", "num_classes", "=", "64", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ViT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "image_height", ",", "image_width", "=", "image_size", ",", "image_size", "\n", "patch_height", ",", "patch_width", "=", "patch_size", ",", "patch_size", "\n", "\n", "assert", "(", "\n", "image_height", "%", "patch_height", "==", "0", "and", "image_width", "%", "patch_width", "==", "0", "\n", ")", ",", "\"Image dimensions must be divisible by the patch size.\"", "\n", "\n", "num_patches", "=", "(", "image_height", "//", "patch_height", ")", "*", "(", "image_width", "//", "patch_width", ")", "\n", "patch_dim", "=", "channels", "*", "patch_height", "*", "patch_width", "\n", "\n", "self", ".", "to_patch_embedding", "=", "nn", ".", "Sequential", "(", "\n", "# Rearrange(patch_height, patch_width),", "\n", "Rearrange", "(", "\n", "\"b c (h p1) (w p2) -> b (h w) (p1 p2 c)\"", ",", "\n", "p1", "=", "patch_height", ",", "\n", "p2", "=", "patch_width", ",", "\n", ")", ",", "\n", "nn", ".", "Linear", "(", "patch_dim", ",", "dim", ")", ",", "\n", ")", "\n", "\n", "self", ".", "pos_embedding", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "num_patches", "+", "1", ",", "dim", ")", ")", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "1", ",", "dim", ")", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "emb_dropout", ")", "\n", "\n", "self", ".", "transformer", "=", "Transformer", "(", "dim", ",", "depth", ",", "heads", ",", "dim_head", ",", "mlp_dim", ",", "dropout", ")", "\n", "\n", "self", ".", "pool", "=", "pool", "\n", "self", ".", "to_latent", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "self", ".", "mlp_head", "=", "nn", ".", "Sequential", "(", "nn", ".", "LayerNorm", "(", "dim", ")", ",", "nn", ".", "Linear", "(", "dim", ",", "num_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.vit.ViT.forward": [[150, 167], ["vit.ViT.to_patch_embedding", "einops.repeat", "torch.cat", "vit.ViT.dropout", "vit.ViT.transformer", "vit.ViT.to_latent", "vit.ViT.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "x", "=", "self", ".", "to_patch_embedding", "(", "img", ")", "\n", "b", ",", "n", ",", "_", "=", "x", ".", "shape", "\n", "\n", "# cls_tokens = self.cls_token.repeat([b, 1, 1])", "\n", "cls_tokens", "=", "repeat", "(", "self", ".", "cls_token", ",", "\"() n d -> b n d\"", ",", "b", "=", "b", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "x", "+=", "self", ".", "pos_embedding", "[", ":", ",", ":", "(", "n", "+", "1", ")", "]", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "transformer", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "mean", "(", "dim", "=", "1", ")", "if", "self", ".", "pool", "==", "\"mean\"", "else", "x", "[", ":", ",", "0", "]", "\n", "\n", "x", "=", "self", ".", "to_latent", "(", "x", ")", "\n", "# x = self.mlp_head(x)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12_mtl_offcial._ConvNdMtl.__init__": [[20, 71], ["torch.nn.modules.module.Module.__init__", "resnet_12_mtl_offcial._ConvNdMtl.reset_parameters", "ValueError", "ValueError", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "resnet_12_mtl_offcial._ConvNdMtl.register_parameter", "resnet_12_mtl_offcial._ConvNdMtl.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12_mtl_offcial._ConvNdMtl.reset_parameters"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", ",", "\n", "transposed", ",", "\n", "output_padding", ",", "\n", "groups", ",", "\n", "bias", ",", "\n", "MTL", ",", "\n", ")", ":", "\n", "        ", "super", "(", "_ConvNdMtl", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"in_channels must be divisible by groups\"", ")", "\n", "", "if", "out_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"out_channels must be divisible by groups\"", ")", "\n", "", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "transposed", "=", "transposed", "\n", "self", ".", "output_padding", "=", "output_padding", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "MTL", "=", "MTL", "\n", "if", "transposed", ":", "\n", "            ", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_channels", ",", "out_channels", "//", "groups", ",", "*", "kernel_size", ")", ")", "\n", "self", ".", "mtl_weight", "=", "Parameter", "(", "torch", ".", "ones", "(", "in_channels", ",", "out_channels", "//", "groups", ",", "1", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ",", "in_channels", "//", "groups", ",", "*", "kernel_size", ")", ")", "\n", "self", ".", "mtl_weight", "=", "Parameter", "(", "torch", ".", "ones", "(", "out_channels", ",", "in_channels", "//", "groups", ",", "1", ",", "1", ")", ")", "\n", "", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "self", ".", "mtl_bias", "=", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "\"bias\"", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "\"mtl_bias\"", ",", "None", ")", "\n", "", "if", "MTL", ":", "\n", "            ", "self", ".", "weight", ".", "requires_grad", "=", "False", "\n", "if", "bias", ":", "\n", "                ", "self", ".", "bias", ".", "requires_grad", "=", "False", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "mtl_weight", ".", "requires_grad", "=", "False", "\n", "if", "bias", ":", "\n", "                ", "self", ".", "mtl_bias", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12_mtl_offcial._ConvNdMtl.reset_parameters": [[72, 82], ["resnet_12_mtl_offcial._ConvNdMtl.weight.data.uniform_", "resnet_12_mtl_offcial._ConvNdMtl.mtl_weight.data.uniform_", "math.sqrt", "resnet_12_mtl_offcial._ConvNdMtl.bias.data.uniform_", "resnet_12_mtl_offcial._ConvNdMtl.mtl_bias.data.uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "for", "k", "in", "self", ".", "kernel_size", ":", "\n", "            ", "n", "*=", "k", "\n", "", "stdv", "=", "1.0", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "mtl_weight", ".", "data", ".", "uniform_", "(", "1", ",", "1", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "mtl_bias", ".", "data", ".", "uniform_", "(", "0", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12_mtl_offcial._ConvNdMtl.extra_repr": [[83, 98], ["s.format", "len", "len", "len"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "\"{in_channels}, {out_channels}, kernel_size={kernel_size}\"", "\", stride={stride}\"", "\n", "if", "self", ".", "padding", "!=", "(", "0", ",", ")", "*", "len", "(", "self", ".", "padding", ")", ":", "\n", "            ", "s", "+=", "\", padding={padding}\"", "\n", "", "if", "self", ".", "dilation", "!=", "(", "1", ",", ")", "*", "len", "(", "self", ".", "dilation", ")", ":", "\n", "            ", "s", "+=", "\", dilation={dilation}\"", "\n", "", "if", "self", ".", "output_padding", "!=", "(", "0", ",", ")", "*", "len", "(", "self", ".", "output_padding", ")", ":", "\n", "            ", "s", "+=", "\", output_padding={output_padding}\"", "\n", "", "if", "self", ".", "groups", "!=", "1", ":", "\n", "            ", "s", "+=", "\", groups={groups}\"", "\n", "", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "s", "+=", "\", bias=False\"", "\n", "", "if", "self", ".", "MTL", "is", "not", "None", ":", "\n", "            ", "s", "+=", "\", MTL={MTL}\"", "\n", "", "return", "s", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12_mtl_offcial.Conv2dMtl.__init__": [[103, 132], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "resnet_12_mtl_offcial._ConvNdMtl.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "MTL", "=", "False", ",", "\n", ")", ":", "\n", "        ", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "self", ".", "MTL", "=", "MTL", "\n", "super", "(", "Conv2dMtl", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", ",", "\n", "False", ",", "\n", "_pair", "(", "0", ")", ",", "\n", "groups", ",", "\n", "bias", ",", "\n", "MTL", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12_mtl_offcial.Conv2dMtl.forward": [[134, 153], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "resnet_12_mtl_offcial.Conv2dMtl.mtl_weight.expand", "resnet_12_mtl_offcial.Conv2dMtl.weight.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "# override conv2d forward", "\n", "        ", "if", "self", ".", "MTL", ":", "\n", "            ", "new_mtl_weight", "=", "self", ".", "mtl_weight", ".", "expand", "(", "self", ".", "weight", ".", "shape", ")", "\n", "new_weight", "=", "self", ".", "weight", ".", "mul", "(", "new_mtl_weight", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "                ", "new_bias", "=", "self", ".", "bias", "+", "self", ".", "mtl_bias", "\n", "", "else", ":", "\n", "                ", "new_bias", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "new_weight", "=", "self", ".", "weight", "\n", "new_bias", "=", "self", ".", "bias", "\n", "", "return", "F", ".", "conv2d", "(", "\n", "inp", ",", "\n", "new_weight", ",", "\n", "new_bias", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "groups", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12_mtl_offcial.BasicBlockMTL.__init__": [[172, 181], ["torch.Module.__init__", "resnet_12_mtl_offcial.conv3x3MTL", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_12_mtl_offcial.conv3x3MTL", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12_mtl_offcial.conv3x3MTL", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12_mtl_offcial.conv3x3MTL"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "MTL", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicBlockMTL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3MTL", "(", "inplanes", ",", "planes", ",", "stride", ",", "MTL", "=", "MTL", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3MTL", "(", "planes", ",", "planes", ",", "MTL", "=", "MTL", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12_mtl_offcial.BasicBlockMTL.forward": [[182, 199], ["resnet_12_mtl_offcial.BasicBlockMTL.conv1", "resnet_12_mtl_offcial.BasicBlockMTL.bn1", "resnet_12_mtl_offcial.BasicBlockMTL.relu", "resnet_12_mtl_offcial.BasicBlockMTL.conv2", "resnet_12_mtl_offcial.BasicBlockMTL.bn2", "resnet_12_mtl_offcial.BasicBlockMTL.relu", "resnet_12_mtl_offcial.BasicBlockMTL.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12_mtl_offcial.ResNetMTLOfficial.__init__": [[202, 221], ["torch.Module.__init__", "resnet_12_mtl_offcial.ResNetMTLOfficial.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_12_mtl_offcial.ResNetMTLOfficial._make_layer", "resnet_12_mtl_offcial.ResNetMTLOfficial._make_layer", "resnet_12_mtl_offcial.ResNetMTLOfficial._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "resnet_12_mtl_offcial.ResNetMTLOfficial.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.wrn.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "MTL", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNetMTLOfficial", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "Conv2d", "=", "Conv2dMtl", "\n", "block", "=", "BasicBlockMTL", "\n", "self", ".", "inplanes", "=", "iChannels", "=", "80", "\n", "self", ".", "conv1", "=", "self", ".", "Conv2d", "(", "3", ",", "iChannels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "MTL", "=", "MTL", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "iChannels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "160", ",", "4", ",", "stride", "=", "2", ",", "MTL", "=", "MTL", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "320", ",", "4", ",", "stride", "=", "2", ",", "MTL", "=", "MTL", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "640", ",", "4", ",", "stride", "=", "2", ",", "MTL", "=", "MTL", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "10", ",", "stride", "=", "1", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "self", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12_mtl_offcial.ResNetMTLOfficial._make_layer": [[222, 243], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet_12_mtl_offcial.ResNetMTLOfficial.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "MTL", "=", "False", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "Conv2d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", "MTL", "=", "MTL", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "MTL", "=", "MTL", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "MTL", "=", "MTL", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12_mtl_offcial.ResNetMTLOfficial.forward": [[244, 257], ["resnet_12_mtl_offcial.ResNetMTLOfficial.conv1", "resnet_12_mtl_offcial.ResNetMTLOfficial.bn1", "resnet_12_mtl_offcial.ResNetMTLOfficial.relu", "resnet_12_mtl_offcial.ResNetMTLOfficial.layer1", "resnet_12_mtl_offcial.ResNetMTLOfficial.layer2", "resnet_12_mtl_offcial.ResNetMTLOfficial.layer3", "resnet_12_mtl_offcial.ResNetMTLOfficial.avgpool", "x.view.view.view", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12_mtl_offcial.conv3x3MTL": [[156, 166], ["resnet_12_mtl_offcial.Conv2dMtl"], "function", ["None"], ["", "", "def", "conv3x3MTL", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "MTL", "=", "False", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "Conv2dMtl", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "MTL", "=", "MTL", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12_mtl_offcial.resnet12MTLofficial": [[259, 263], ["resnet_12_mtl_offcial.ResNetMTLOfficial"], "function", ["None"], ["", "", "def", "resnet12MTLofficial", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-12 model.\"\"\"", "\n", "model", "=", "ResNetMTLOfficial", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12.BasicBlock.__init__": [[29, 57], ["torch.Module.__init__", "resnet_12.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "resnet_12.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_12.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "core.model.backbone.utils.dropblock.DropBlock"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12.conv3x3", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12.conv3x3", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "drop_rate", "=", "0.0", ",", "\n", "drop_block", "=", "False", ",", "\n", "block_size", "=", "1", ",", "\n", "use_pool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "stride", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "num_batches_tracked", "=", "0", "\n", "self", ".", "drop_block", "=", "drop_block", "\n", "self", ".", "block_size", "=", "block_size", "\n", "self", ".", "DropBlock", "=", "DropBlock", "(", "block_size", "=", "self", ".", "block_size", ")", "\n", "self", ".", "use_pool", "=", "use_pool", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12.BasicBlock.forward": [[58, 99], ["resnet_12.BasicBlock.conv1", "resnet_12.BasicBlock.bn1", "resnet_12.BasicBlock.relu", "resnet_12.BasicBlock.conv2", "resnet_12.BasicBlock.bn2", "resnet_12.BasicBlock.relu", "resnet_12.BasicBlock.conv3", "resnet_12.BasicBlock.bn3", "resnet_12.BasicBlock.relu", "resnet_12.BasicBlock.downsample", "resnet_12.BasicBlock.maxpool", "max", "resnet_12.BasicBlock.DropBlock", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "num_batches_tracked", "+=", "1", "\n", "\n", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "if", "self", ".", "use_pool", ":", "\n", "            ", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "if", "self", ".", "drop_block", ":", "\n", "                ", "feat_size", "=", "out", ".", "size", "(", ")", "[", "2", "]", "\n", "keep_rate", "=", "max", "(", "\n", "1.0", "-", "self", ".", "drop_rate", "/", "(", "20", "*", "2000", ")", "*", "(", "self", ".", "num_batches_tracked", ")", ",", "\n", "1.0", "-", "self", ".", "drop_rate", ",", "\n", ")", "\n", "gamma", "=", "(", "\n", "(", "1", "-", "keep_rate", ")", "\n", "/", "self", ".", "block_size", "**", "2", "\n", "*", "feat_size", "**", "2", "\n", "/", "(", "feat_size", "-", "self", ".", "block_size", "+", "1", ")", "**", "2", "\n", ")", "\n", "out", "=", "self", ".", "DropBlock", "(", "out", ",", "gamma", "=", "gamma", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ",", "inplace", "=", "True", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12.ResNet.__init__": [[102, 148], ["torch.Module.__init__", "resnet_12.ResNet._make_layer", "resnet_12.ResNet._make_layer", "resnet_12.ResNet._make_layer", "resnet_12.ResNet._make_layer", "torch.Dropout", "torch.Dropout", "torch.Dropout", "resnet_12.ResNet.modules", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.wrn.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", "=", "BasicBlock", ",", "\n", "keep_prob", "=", "1.0", ",", "\n", "avg_pool", "=", "True", ",", "\n", "drop_rate", "=", "0.1", ",", "\n", "dropblock_size", "=", "5", ",", "\n", "is_flatten", "=", "True", ",", "\n", "maxpool_last2", "=", "True", ",", "\n", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "3", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "160", ",", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "320", ",", "\n", "stride", "=", "2", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "drop_block", "=", "True", ",", "\n", "block_size", "=", "dropblock_size", ",", "\n", "use_pool", "=", "maxpool_last2", ",", "\n", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "640", ",", "\n", "stride", "=", "2", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "drop_block", "=", "True", ",", "\n", "block_size", "=", "dropblock_size", ",", "\n", "use_pool", "=", "maxpool_last2", ",", "\n", ")", "\n", "if", "avg_pool", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "1", ")", "\n", "", "self", ".", "keep_prob", "=", "keep_prob", "\n", "self", ".", "keep_avg_pool", "=", "avg_pool", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "1", "-", "self", ".", "keep_prob", ",", "inplace", "=", "False", ")", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "is_flatten", "=", "is_flatten", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"leaky_relu\"", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12.ResNet._make_layer": [[149, 188], ["layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "\n", "self", ",", "\n", "block", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "drop_rate", "=", "0.0", ",", "\n", "drop_block", "=", "False", ",", "\n", "block_size", "=", "1", ",", "\n", "use_pool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "stride", ",", "\n", "downsample", ",", "\n", "drop_rate", ",", "\n", "drop_block", ",", "\n", "block_size", ",", "\n", "use_pool", "=", "use_pool", ",", "\n", ")", "\n", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12.ResNet.forward": [[189, 199], ["resnet_12.ResNet.layer1", "resnet_12.ResNet.layer2", "resnet_12.ResNet.layer3", "resnet_12.ResNet.layer4", "resnet_12.ResNet.avgpool", "x.view.view.view", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "if", "self", ".", "keep_avg_pool", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "", "if", "self", ".", "is_flatten", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12.conv3x3": [[14, 23], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.resnet_12.resnet12": [[201, 212], ["resnet_12.ResNet"], "function", ["None"], ["", "", "def", "resnet12", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "True", ",", "is_flatten", "=", "True", ",", "maxpool_last2", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-12 model.\"\"\"", "\n", "model", "=", "ResNet", "(", "\n", "BasicBlock", ",", "\n", "keep_prob", "=", "keep_prob", ",", "\n", "avg_pool", "=", "avg_pool", ",", "\n", "is_flatten", "=", "is_flatten", ",", "\n", "maxpool_last2", "=", "maxpool_last2", ",", "\n", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.__init__.get_backbone": [[12, 29], ["dict", "dict.update", "eval"], "function", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.rl-vig_libfewshot.finetuning.skd_model.SKDModel.eval"], []], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.conv_four.Conv64F.__init__": [[21, 67], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "is_flatten", "=", "False", ",", "\n", "is_feature", "=", "False", ",", "\n", "leaky_relu", "=", "False", ",", "\n", "negative_slope", "=", "0.2", ",", "\n", "last_pool", "=", "True", ",", "\n", "maxpool_last2", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Conv64F", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "is_flatten", "=", "is_flatten", "\n", "self", ".", "is_feature", "=", "is_feature", "\n", "self", ".", "last_pool", "=", "last_pool", "\n", "self", ".", "maxpool_last2", "=", "maxpool_last2", "\n", "\n", "if", "leaky_relu", ":", "\n", "            ", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "negative_slope", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "activation", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "activation", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "self", ".", "layer3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "activation", ",", "\n", ")", "\n", "self", ".", "layer3_maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "layer4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "activation", ",", "\n", ")", "\n", "self", ".", "layer4_pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.conv_four.Conv64F.forward": [[68, 88], ["conv_four.Conv64F.layer1", "conv_four.Conv64F.layer2", "conv_four.Conv64F.layer3", "conv_four.Conv64F.layer4", "conv_four.Conv64F.layer3_maxpool", "conv_four.Conv64F.layer4_pool", "out4.view.view.view", "out4.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "out2", "=", "self", ".", "layer2", "(", "out1", ")", "\n", "out3", "=", "self", ".", "layer3", "(", "out2", ")", "\n", "\n", "if", "self", ".", "maxpool_last2", ":", "\n", "            ", "out3", "=", "self", ".", "layer3_maxpool", "(", "out3", ")", "\n", "# for some methods (relation net etc.)", "\n", "\n", "", "out4", "=", "self", ".", "layer4", "(", "out3", ")", "\n", "if", "self", ".", "last_pool", ":", "\n", "            ", "out4", "=", "self", ".", "layer4_pool", "(", "out4", ")", "\n", "\n", "", "if", "self", ".", "is_flatten", ":", "\n", "            ", "out4", "=", "out4", ".", "view", "(", "out4", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "is_feature", ":", "\n", "            ", "return", "out1", ",", "out2", ",", "out3", ",", "out4", "\n", "\n", "", "return", "out4", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.conv_four.Conv32F.__init__": [[97, 140], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "is_flatten", "=", "False", ",", "\n", "is_feature", "=", "False", ",", "\n", "leaky_relu", "=", "False", ",", "\n", "negative_slope", "=", "0.2", ",", "\n", "last_pool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Conv32F", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "is_flatten", "=", "is_flatten", "\n", "self", ".", "is_feature", "=", "is_feature", "\n", "self", ".", "last_pool", "=", "last_pool", "\n", "\n", "if", "leaky_relu", ":", "\n", "            ", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "negative_slope", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "activation", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "activation", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "self", ".", "layer3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "activation", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "self", ".", "layer4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "activation", ",", "\n", ")", "\n", "self", ".", "layer4_pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.conv_four.Conv32F.forward": [[141, 156], ["conv_four.Conv32F.layer1", "conv_four.Conv32F.layer2", "conv_four.Conv32F.layer3", "conv_four.Conv32F.layer4", "conv_four.Conv32F.layer4_pool", "out4.view.view.view", "out4.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "out2", "=", "self", ".", "layer2", "(", "out1", ")", "\n", "out3", "=", "self", ".", "layer3", "(", "out2", ")", "\n", "out4", "=", "self", ".", "layer4", "(", "out3", ")", "\n", "if", "self", ".", "last_pool", ":", "\n", "            ", "out4", "=", "self", ".", "layer4_pool", "(", "out4", ")", "\n", "\n", "", "if", "self", ".", "is_flatten", ":", "\n", "            ", "out4", "=", "out4", ".", "view", "(", "out4", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "is_feature", ":", "\n", "            ", "return", "out1", ",", "out2", ",", "out3", ",", "out4", "\n", "\n", "", "return", "out4", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.conv_four.R2D2Embedding.__init__": [[184, 209], ["torch.Module.__init__", "conv_four.R2D2_conv_block", "conv_four.R2D2_conv_block", "conv_four.R2D2_conv_block", "conv_four.R2D2_conv_block"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.conv_four.R2D2_conv_block", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.conv_four.R2D2_conv_block", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.conv_four.R2D2_conv_block", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.conv_four.R2D2_conv_block"], ["def", "__init__", "(", "\n", "self", ",", "\n", "x_dim", "=", "3", ",", "\n", "h1_dim", "=", "96", ",", "\n", "h2_dim", "=", "192", ",", "\n", "h3_dim", "=", "384", ",", "\n", "z_dim", "=", "512", ",", "\n", "retain_last_activation", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "R2D2Embedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block1", "=", "R2D2_conv_block", "(", "x_dim", ",", "h1_dim", ")", "\n", "self", ".", "block2", "=", "R2D2_conv_block", "(", "h1_dim", ",", "h2_dim", ")", "\n", "self", ".", "block3", "=", "R2D2_conv_block", "(", "h2_dim", ",", "h3_dim", ",", "keep_prob", "=", "0.9", ")", "\n", "# In the last conv block, we disable activation function to boost the classification accuracy.", "\n", "# This trick was proposed by Gidaris et al. (CVPR 2018).", "\n", "# With this trick, the accuracy goes up from 50% to 51%.", "\n", "# Although the authors of R2D2 did not mention this trick in the paper,", "\n", "# we were unable to reproduce the result of Bertinetto et al. without resorting to this trick.", "\n", "self", ".", "block4", "=", "R2D2_conv_block", "(", "\n", "h3_dim", ",", "\n", "z_dim", ",", "\n", "retain_activation", "=", "retain_last_activation", ",", "\n", "keep_prob", "=", "0.9", ",", "\n", "pool_stride", "=", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.conv_four.R2D2Embedding.forward": [[211, 218], ["conv_four.R2D2Embedding.block1", "conv_four.R2D2Embedding.block2", "conv_four.R2D2Embedding.block3", "conv_four.R2D2Embedding.block4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv_four.R2D2Embedding.view", "conv_four.R2D2Embedding.view", "conv_four.R2D2Embedding.size", "conv_four.R2D2Embedding.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b1", "=", "self", ".", "block1", "(", "x", ")", "\n", "b2", "=", "self", ".", "block2", "(", "b1", ")", "\n", "b3", "=", "self", ".", "block3", "(", "b2", ")", "\n", "b4", "=", "self", ".", "block4", "(", "b3", ")", "\n", "# Flatten and concatenate the output of the 3rd and 4th conv blocks as proposed in R2D2 paper.", "\n", "return", "torch", ".", "cat", "(", "(", "b3", ".", "view", "(", "b3", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "b4", ".", "view", "(", "b4", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", ",", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.conv_four.R2D2_conv_block": [[158, 177], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.MaxPool2d", "nn.Sequential.add_module", "nn.Sequential.add_module", "torch.LeakyReLU", "torch.Dropout"], "function", ["None"], ["", "", "def", "R2D2_conv_block", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "retain_activation", "=", "True", ",", "\n", "keep_prob", "=", "1.0", ",", "\n", "pool_stride", "=", "2", ",", "\n", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "pool_stride", ")", ",", "\n", ")", "\n", "if", "retain_activation", ":", "\n", "        ", "block", ".", "add_module", "(", "\"LeakyReLU\"", ",", "nn", ".", "LeakyReLU", "(", "0.1", ")", ")", "\n", "\n", "", "if", "keep_prob", "<", "1.0", ":", "\n", "        ", "block", ".", "add_module", "(", "\"Dropout\"", ",", "nn", ".", "Dropout", "(", "p", "=", "1", "-", "keep_prob", ",", "inplace", "=", "False", ")", ")", "\n", "\n", "", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.wrn.BasicBlock.__init__": [[12, 47], ["torch.nn.Module.__init__", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "out_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "in_planes", "==", "out_planes", "\n", "self", ".", "convShortcut", "=", "(", "\n", "(", "not", "self", ".", "equalInOut", ")", "\n", "and", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "or", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.wrn.BasicBlock.forward": [[49, 59], ["wrn.BasicBlock.relu2", "wrn.BasicBlock.conv2", "torch.add", "torch.add", "torch.add", "torch.add", "wrn.BasicBlock.relu1", "wrn.BasicBlock.relu1", "wrn.BasicBlock.bn2", "torch.dropout", "torch.dropout", "wrn.BasicBlock.bn1", "wrn.BasicBlock.bn1", "wrn.BasicBlock.conv1", "wrn.BasicBlock.convShortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", "if", "self", ".", "equalInOut", "else", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "torch", ".", "add", "(", "x", "if", "self", ".", "equalInOut", "else", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.wrn.NetworkBlock.__init__": [[62, 65], ["torch.nn.Module.__init__", "wrn.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__", "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.wrn.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.wrn.NetworkBlock._make_layer": [[66, 78], ["range", "torch.nn.Sequential", "torch.nn.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nb_layers", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "\n", "out_planes", ",", "\n", "i", "==", "0", "and", "stride", "or", "1", ",", "\n", "dropRate", ",", "\n", ")", "\n", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.wrn.NetworkBlock.forward": [[79, 81], ["wrn.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.wrn.WideResNet.__init__": [[84, 120], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "wrn.NetworkBlock", "wrn.NetworkBlock", "wrn.NetworkBlock", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "wrn.WideResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", "=", "1", ",", "dropRate", "=", "0.0", ",", "is_flatten", "=", "True", ",", "avg_pool", "=", "True", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_flatten", "=", "is_flatten", "\n", "self", ".", "avg_pool", "=", "avg_pool", "\n", "nChannels", "=", "[", "\n", "16", ",", "\n", "16", "*", "widen_factor", ",", "\n", "32", "*", "widen_factor", ",", "\n", "64", "*", "widen_factor", ",", "\n", "]", "\n", "assert", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ",", "\"depth should be 6n+4\"", "\n", "n", "=", "(", "depth", "-", "4", ")", "//", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# self.fc = nn.Linear(nChannels[3], num_classes)", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.wrn.WideResNet.forward": [[121, 134], ["wrn.WideResNet.conv1", "wrn.WideResNet.block1", "wrn.WideResNet.block2", "wrn.WideResNet.block3", "wrn.WideResNet.relu", "wrn.WideResNet.bn1", "torch.adaptive_max_pool2d", "torch.adaptive_max_pool2d", "out.reshape.reshape.reshape", "out.reshape.reshape.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "if", "self", ".", "avg_pool", ":", "\n", "            ", "out", "=", "F", ".", "adaptive_max_pool2d", "(", "out", ",", "1", ")", "\n", "", "if", "self", ".", "is_flatten", ":", "\n", "            ", "out", "=", "out", ".", "reshape", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "# out = out.view(-1, self.nChannels)", "\n", "# return self.fc(out)", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.backbone.wrn.WRN": [[136, 142], ["wrn.WideResNet"], "function", ["None"], ["", "", "def", "WRN", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a Wide Residual Networks.\n    \"\"\"", "\n", "model", "=", "WideResNet", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.config.config.Config.__init__": [[30, 45], ["config.Config._load_console_dict", "config.Config._load_config_files", "config.Config._load_config_files", "config.Config._load_variable_dict", "config.Config._merge_config_dict"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.config.config.Config._load_console_dict", "home.repos.pwc.inspect_result.rl-vig_libfewshot.config.config.Config._load_config_files", "home.repos.pwc.inspect_result.rl-vig_libfewshot.config.config.Config._load_config_files", "home.repos.pwc.inspect_result.rl-vig_libfewshot.config.config.Config._load_variable_dict", "home.repos.pwc.inspect_result.rl-vig_libfewshot.config.config.Config._merge_config_dict"], ["def", "__init__", "(", "self", ",", "config_file", "=", "None", ",", "variable_dict", "=", "None", ",", "is_resume", "=", "False", ")", ":", "\n", "        ", "\"\"\"Initializing the parameter dictionary, actually completes the merging of all parameter definitions.\n\n        Args:\n            config_file: Configuration file name. (/LibFewShot/config/name.yaml)\n            variable_dict: The Variable_dict.\n            is_resume: Specifies whether to resume, the default is False.\n        \"\"\"", "\n", "self", ".", "is_resume", "=", "is_resume", "\n", "self", ".", "config_file", "=", "config_file", "\n", "self", ".", "console_dict", "=", "self", ".", "_load_console_dict", "(", ")", "\n", "self", ".", "default_dict", "=", "self", ".", "_load_config_files", "(", "DEFAULT_FILE", ")", "\n", "self", ".", "file_dict", "=", "self", ".", "_load_config_files", "(", "config_file", ")", "\n", "self", ".", "variable_dict", "=", "self", ".", "_load_variable_dict", "(", "variable_dict", ")", "\n", "self", ".", "config_dict", "=", "self", ".", "_merge_config_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.config.config.Config.get_config_dict": [[46, 53], ["None"], "methods", ["None"], ["", "def", "get_config_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the merged dict.\n\n        Returns:\n            dict: A dict of LibFewShot setting.\n        \"\"\"", "\n", "return", "self", ".", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.config.config.Config._load_config_files": [[54, 92], ["dict", "loader.add_implicit_resolver", "dict.copy", "dict.get", "dict.update", "re.compile", "list", "dict.get", "dict.pop", "open", "dict.update", "open", "dict.update", "yaml.load", "os.path.join", "yaml.load", "fin.read", "fin.read"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update"], ["", "@", "staticmethod", "\n", "def", "_load_config_files", "(", "config_file", ")", ":", "\n", "        ", "\"\"\"Parse a YAML file.\n\n        Args:\n            config_file (str): Path to yaml file.\n\n        Returns:\n            dict: A dict of LibFewShot setting.\n        \"\"\"", "\n", "config_dict", "=", "dict", "(", ")", "\n", "loader", "=", "yaml", ".", "SafeLoader", "\n", "loader", ".", "add_implicit_resolver", "(", "\n", "u\"tag:yaml.org,2002:float\"", ",", "\n", "re", ".", "compile", "(", "\n", "u\"\"\"^(?:\n                     [-+]?[0-9][0-9_]*\\\\.[0-9_]*(?:[eE][-+]?[0-9]+)?\n                    |[-+]?[0-9][0-9_]*[eE][-+]?[0-9]+\n                    |\\\\.[0-9_]+(?:[eE][-+][0-9]+)?\n                    |[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\\\.[0-9_]*\n                    |[-+]?\\\\.(?:inf|Inf|INF)\n                    |\\\\.(?:nan|NaN|NAN))$\"\"\"", ",", "\n", "re", ".", "X", ",", "\n", ")", ",", "\n", "list", "(", "u\"-+0123456789.\"", ")", ",", "\n", ")", "\n", "\n", "if", "config_file", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "config_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fin", ":", "\n", "                ", "config_dict", ".", "update", "(", "yaml", ".", "load", "(", "fin", ".", "read", "(", ")", ",", "Loader", "=", "loader", ")", ")", "\n", "", "", "config_file_dict", "=", "config_dict", ".", "copy", "(", ")", "\n", "for", "include", "in", "config_dict", ".", "get", "(", "\"includes\"", ",", "[", "]", ")", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "\"./config/\"", ",", "include", ")", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fin", ":", "\n", "                ", "config_dict", ".", "update", "(", "yaml", ".", "load", "(", "fin", ".", "read", "(", ")", ",", "Loader", "=", "loader", ")", ")", "\n", "", "", "if", "config_dict", ".", "get", "(", "\"includes\"", ")", "is", "not", "None", ":", "\n", "            ", "config_dict", ".", "pop", "(", "\"includes\"", ")", "\n", "", "config_dict", ".", "update", "(", "config_file_dict", ")", "\n", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.config.config.Config._load_variable_dict": [[93, 106], ["dict", "dict.update"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.utils.utils.AverageMeter.update"], ["", "@", "staticmethod", "\n", "def", "_load_variable_dict", "(", "variable_dict", ")", ":", "\n", "        ", "\"\"\"Load variable dict from run_*.py.\n\n        Args:\n            variable_dict (dict): Configuration dict.\n\n        Returns:\n            dict: A dict of LibFewShot setting.\n        \"\"\"", "\n", "config_dict", "=", "dict", "(", ")", "\n", "config_dict", ".", "update", "(", "variable_dict", "if", "variable_dict", "is", "not", "None", "else", "{", "}", ")", "\n", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.config.config.Config._load_console_dict": [[107, 160], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "vars().items", "vars"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_load_console_dict", "(", ")", ":", "\n", "        ", "\"\"\"Parsing command line parameters\n\n        Returns:\n            dict: A dict of LibFewShot console setting.\n        \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"-w\"", ",", "\"--way_num\"", ",", "type", "=", "int", ",", "help", "=", "\"way num\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-s\"", ",", "\"--shot_num\"", ",", "type", "=", "int", ",", "help", "=", "\"shot num\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-q\"", ",", "\"--query_num\"", ",", "type", "=", "int", ",", "help", "=", "\"query num\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-bs\"", ",", "\"--batch_size\"", ",", "type", "=", "int", ",", "help", "=", "\"batch_size\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-es\"", ",", "\"--episode_size\"", ",", "type", "=", "int", ",", "help", "=", "\"episode_size\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"-data\"", ",", "\"--data_root\"", ",", "help", "=", "\"dataset path\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-log_name\"", ",", "\n", "\"--log_name\"", ",", "\n", "help", "=", "\"specific log dir name if necessary\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"-image_size\"", ",", "type", "=", "int", ",", "help", "=", "\"image size\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-aug\"", ",", "\"--augment\"", ",", "type", "=", "bool", ",", "help", "=", "\"use augment or not\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-aug_times\"", ",", "\n", "\"--augment_times\"", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"augment times (for support in few-shot)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-aug_times_query\"", ",", "\n", "\"--augment_times_query\"", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"augment times for query in few-shot\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"-train_episode\"", ",", "type", "=", "int", ",", "help", "=", "\"train episode num\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-test_episode\"", ",", "type", "=", "int", ",", "help", "=", "\"test episode num\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-epochs\"", ",", "type", "=", "int", ",", "help", "=", "\"epoch num\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-result\"", ",", "\"--result_root\"", ",", "help", "=", "\"result path\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-save_interval\"", ",", "type", "=", "int", ",", "help", "=", "\"checkpoint save interval\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-log_level\"", ",", "\n", "help", "=", "\"log level in: debug, info, warning, error, critical\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"-log_interval\"", ",", "type", "=", "int", ",", "help", "=", "\"log interval\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-gpus\"", ",", "\"--device_ids\"", ",", "help", "=", "\"device ids\"", ")", "\n", "# TODO: n_gpu should be len(gpus)?", "\n", "parser", ".", "add_argument", "(", "\"-n_gpu\"", ",", "type", "=", "int", ",", "help", "=", "\"gpu num\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-seed\"", ",", "type", "=", "int", ",", "help", "=", "\"seed\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-deterministic\"", ",", "type", "=", "bool", ",", "help", "=", "\"deterministic or not\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-tag\"", ",", "\"--tag\"", ",", "type", "=", "str", ",", "help", "=", "\"experiment tag\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "# Remove key-None pairs", "\n", "return", "{", "k", ":", "v", "for", "k", ",", "v", "in", "vars", "(", "args", ")", ".", "items", "(", ")", "if", "v", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.config.config.Config._recur_update": [[161, 181], ["dic2.keys", "dict", "isinstance", "config.Config._recur_update", "dict.keys"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.config.config.Config._recur_update"], ["", "def", "_recur_update", "(", "self", ",", "dic1", ",", "dic2", ")", ":", "\n", "        ", "\"\"\"Merge dictionaries Recursively.\n\n        Used to recursively merge two dictionaries (profiles), `dic2` will overwrite the value of the same key in `dic1`.\n\n        Args:\n            dic1 (dict): The dict to be overwritten. (low priority)\n            dic2 (dict): The dict to overwrite. (high priority)\n\n        Returns:\n            dict: Merged dict.\n        \"\"\"", "\n", "if", "dic1", "is", "None", ":", "\n", "            ", "dic1", "=", "dict", "(", ")", "\n", "", "for", "k", "in", "dic2", ".", "keys", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "dic2", "[", "k", "]", ",", "dict", ")", ":", "\n", "                ", "dic1", "[", "k", "]", "=", "self", ".", "_recur_update", "(", "dic1", "[", "k", "]", "if", "k", "in", "dic1", ".", "keys", "(", ")", "else", "None", ",", "dic2", "[", "k", "]", ")", "\n", "", "else", ":", "\n", "                ", "dic1", "[", "k", "]", "=", "dic2", "[", "k", "]", "\n", "", "", "return", "dic1", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.config.config.Config._update": [[182, 199], ["dic2.keys", "dict"], "methods", ["None"], ["", "def", "_update", "(", "self", ",", "dic1", ",", "dic2", ")", ":", "\n", "        ", "\"\"\"Merge dictionaries.\n\n        Used to merge two dictionaries (profiles), `dic2` will overwrite the value of the same key in `dic1`.\n\n        Args:\n            dic1 (dict): The dict to be overwritten. (low priority)\n            dic2 (dict): The dict to overwrite. (high priority)\n\n        Returns:\n            dict: Merged dict.\n        \"\"\"", "\n", "if", "dic1", "is", "None", ":", "\n", "            ", "dic1", "=", "dict", "(", ")", "\n", "", "for", "k", "in", "dic2", ".", "keys", "(", ")", ":", "\n", "            ", "dic1", "[", "k", "]", "=", "dic2", "[", "k", "]", "\n", "", "return", "dic1", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.config.config.Config._merge_config_dict": [[200, 230], ["dict", "config.Config._update", "config.Config._update", "config.Config._update", "config.Config._update", "float", "len"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.config.config.Config._update", "home.repos.pwc.inspect_result.rl-vig_libfewshot.config.config.Config._update", "home.repos.pwc.inspect_result.rl-vig_libfewshot.config.config.Config._update", "home.repos.pwc.inspect_result.rl-vig_libfewshot.config.config.Config._update"], ["", "def", "_merge_config_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Merge all dictionaries.\n\n        1. The merging is recursive, if a key is not be specified, the existing value will be used.\n        2. The merge priority is console_params > run_*.py dict > user defined yaml (/LibFewShot/config/*.yaml) > default.yaml (/LibFewShot/core/config/default.yaml)\n\n        Returns:\n            dict: A LibFewShot setting dict.\n        \"\"\"", "\n", "config_dict", "=", "dict", "(", ")", "\n", "config_dict", "=", "self", ".", "_update", "(", "config_dict", ",", "self", ".", "default_dict", ")", "\n", "config_dict", "=", "self", ".", "_update", "(", "config_dict", ",", "self", ".", "file_dict", ")", "\n", "config_dict", "=", "self", ".", "_update", "(", "config_dict", ",", "self", ".", "variable_dict", ")", "\n", "config_dict", "=", "self", ".", "_update", "(", "config_dict", ",", "self", ".", "console_dict", ")", "\n", "\n", "# If test_* is not defined, replace with *_num.", "\n", "if", "config_dict", "[", "\"test_way\"", "]", "is", "None", ":", "\n", "            ", "config_dict", "[", "\"test_way\"", "]", "=", "config_dict", "[", "\"way_num\"", "]", "\n", "", "if", "config_dict", "[", "\"test_shot\"", "]", "is", "None", ":", "\n", "            ", "config_dict", "[", "\"test_shot\"", "]", "=", "config_dict", "[", "\"shot_num\"", "]", "\n", "", "if", "config_dict", "[", "\"test_query\"", "]", "is", "None", ":", "\n", "            ", "config_dict", "[", "\"test_query\"", "]", "=", "config_dict", "[", "\"query_num\"", "]", "\n", "\n", "# Modify or add some configs", "\n", "", "config_dict", "[", "\"resume\"", "]", "=", "self", ".", "is_resume", "\n", "if", "self", ".", "is_resume", ":", "\n", "            ", "config_dict", "[", "\"resume_path\"", "]", "=", "self", ".", "config_file", "[", ":", "-", "1", "*", "len", "(", "\"/config.yaml\"", ")", "]", "\n", "", "config_dict", "[", "\"tb_scale\"", "]", "=", "float", "(", "config_dict", "[", "\"train_episode\"", "]", ")", "/", "config_dict", "[", "\"test_episode\"", "]", "\n", "\n", "return", "config_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.config.config.get_cur_path": [[9, 16], ["os.path.dirname"], "function", ["None"], ["def", "get_cur_path", "(", ")", ":", "\n", "    ", "\"\"\"Get the absolute path of current file.\n\n    Returns: The absolute path of this file (Config.py).\n\n    \"\"\"", "\n", "return", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.data.samplers.CategoriesSampler.__init__": [[14, 46], ["torch.utils.data.Sampler.__init__", "numpy.array", "range", "numpy.argwhere().reshape", "torch.from_numpy", "samplers.CategoriesSampler.idx_list.append", "numpy.argwhere"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "label_list", ",", "\n", "label_num", ",", "\n", "episode_size", ",", "\n", "episode_num", ",", "\n", "way_num", ",", "\n", "image_num", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Init a CategoriesSampler and generate a label-index list.\n\n        Args:\n            label_list (list): The label list from label list.\n            label_num (int): The number of unique labels.\n            episode_size (int): FSL setting.\n            episode_num (int): FSL setting.\n            way_num (int): FSL setting.\n            image_num (int): FSL setting.\n        \"\"\"", "\n", "super", "(", "CategoriesSampler", ",", "self", ")", ".", "__init__", "(", "label_list", ")", "\n", "\n", "self", ".", "episode_size", "=", "episode_size", "\n", "self", ".", "episode_num", "=", "episode_num", "\n", "self", ".", "way_num", "=", "way_num", "\n", "self", ".", "image_num", "=", "image_num", "\n", "\n", "label_list", "=", "np", ".", "array", "(", "label_list", ")", "\n", "self", ".", "idx_list", "=", "[", "]", "\n", "for", "label_idx", "in", "range", "(", "label_num", ")", ":", "\n", "            ", "ind", "=", "np", ".", "argwhere", "(", "label_list", "==", "label_idx", ")", ".", "reshape", "(", "-", "1", ")", "\n", "ind", "=", "torch", ".", "from_numpy", "(", "ind", ")", "\n", "self", ".", "idx_list", ".", "append", "(", "ind", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.data.samplers.CategoriesSampler.__len__": [[47, 49], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "episode_num", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.data.samplers.CategoriesSampler.__iter__": [[50, 67], ["range", "torch.randperm", "torch.stack().reshape.append", "len", "torch.stack().reshape", "len", "torch.randperm", "c.item", "idxes.size", "torch.stack"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Random sample a FSL task batch(multi-task).\n\n        Yields:\n            torch.Tensor: The stacked tensor of a FSL task batch(multi-task).\n        \"\"\"", "\n", "batch", "=", "[", "]", "\n", "for", "i_batch", "in", "range", "(", "self", ".", "episode_num", ")", ":", "\n", "            ", "classes", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "idx_list", ")", ")", "[", ":", "self", ".", "way_num", "]", "\n", "for", "c", "in", "classes", ":", "\n", "                ", "idxes", "=", "self", ".", "idx_list", "[", "c", ".", "item", "(", ")", "]", "\n", "pos", "=", "torch", ".", "randperm", "(", "idxes", ".", "size", "(", "0", ")", ")", "[", ":", "self", ".", "image_num", "]", "\n", "batch", ".", "append", "(", "idxes", "[", "pos", "]", ")", "\n", "", "if", "len", "(", "batch", ")", "==", "self", ".", "episode_size", "*", "self", ".", "way_num", ":", "\n", "                ", "batch", "=", "torch", ".", "stack", "(", "batch", ")", ".", "reshape", "(", "-", "1", ")", "\n", "yield", "batch", "\n", "batch", "=", "[", "]", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.data.dataset.GeneralDataset.__init__": [[49, 94], ["torch.utils.data.Dataset.__init__", "logging.getLogger", "len", "len", "dataset.GeneralDataset.logger.info", "os.path.join", "dataset.GeneralDataset._load_cache", "dataset.GeneralDataset._generate_data_list"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__", "home.repos.pwc.inspect_result.rl-vig_libfewshot.data.dataset.GeneralDataset._load_cache", "home.repos.pwc.inspect_result.rl-vig_libfewshot.data.dataset.GeneralDataset._generate_data_list"], ["def", "__init__", "(", "\n", "self", ",", "\n", "data_root", "=", "\"\"", ",", "\n", "mode", "=", "\"train\"", ",", "\n", "loader", "=", "default_loader", ",", "\n", "use_memory", "=", "True", ",", "\n", "trfms", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Initializing `GeneralDataset`.\n\n        Args:\n            data_root (str, optional): A CSV file with (file_name, label) records. Defaults to \"\".\n            mode (str, optional): model mode in train/test/val. Defaults to \"train\".\n            loader (fn, optional): specific which loader to use(see line 10-40 in this file). Defaults to default_loader.\n            use_memory (bool, optional): option to use memory cache to accelerate reading. Defaults to True.\n            trfms (list, optional): A transform list (in LFS, its useless). Defaults to None.\n        \"\"\"", "\n", "super", "(", "GeneralDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "mode", "in", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", "\n", "\n", "self", ".", "data_root", "=", "data_root", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "use_memory", "=", "use_memory", "\n", "self", ".", "trfms", "=", "trfms", "\n", "self", ".", "logger", "=", "getLogger", "(", "__name__", ")", "\n", "\n", "if", "use_memory", ":", "\n", "            ", "cache_path", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"{}.pth\"", ".", "format", "(", "mode", ")", ")", "\n", "(", "\n", "self", ".", "data_list", ",", "\n", "self", ".", "label_list", ",", "\n", "self", ".", "class_label_dict", ",", "\n", ")", "=", "self", ".", "_load_cache", "(", "cache_path", ")", "\n", "", "else", ":", "\n", "            ", "(", "\n", "self", ".", "data_list", ",", "\n", "self", ".", "label_list", ",", "\n", "self", ".", "class_label_dict", ",", "\n", ")", "=", "self", ".", "_generate_data_list", "(", ")", "\n", "\n", "", "self", ".", "label_num", "=", "len", "(", "self", ".", "class_label_dict", ")", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "data_list", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "\"load {} image with {} label.\"", ".", "format", "(", "self", ".", "length", ",", "self", ".", "label_num", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.data.dataset.GeneralDataset._generate_data_list": [[95, 119], ["os.path.join", "dict", "open", "csv.reader", "data_list.append", "label_list.append", "len"], "methods", ["None"], ["", "def", "_generate_data_list", "(", "self", ")", ":", "\n", "        ", "\"\"\"Parse a CSV file to a data list(image_name), a label list(corresponding to the data list) and a class-label dict.\n\n        Returns:\n            tuple: A tuple of (data list, label list, class-label dict)\n        \"\"\"", "\n", "meta_csv", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "\"{}.csv\"", ".", "format", "(", "self", ".", "mode", ")", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "label_list", "=", "[", "]", "\n", "class_label_dict", "=", "dict", "(", ")", "\n", "with", "open", "(", "meta_csv", ")", "as", "f_csv", ":", "\n", "            ", "f_train", "=", "csv", ".", "reader", "(", "f_csv", ",", "delimiter", "=", "\",\"", ")", "\n", "for", "row", "in", "f_train", ":", "\n", "                ", "if", "f_train", ".", "line_num", "==", "1", ":", "\n", "                    ", "continue", "\n", "", "image_name", ",", "image_class", "=", "row", "\n", "if", "image_class", "not", "in", "class_label_dict", ":", "\n", "                    ", "class_label_dict", "[", "image_class", "]", "=", "len", "(", "class_label_dict", ")", "\n", "", "image_label", "=", "class_label_dict", "[", "image_class", "]", "\n", "data_list", ".", "append", "(", "image_name", ")", "\n", "label_list", ".", "append", "(", "image_label", ")", "\n", "\n", "", "", "return", "data_list", ",", "label_list", ",", "class_label_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.data.dataset.GeneralDataset._load_cache": [[120, 138], ["os.path.exists", "dataset.GeneralDataset.logger.info", "dataset.GeneralDataset.logger.info", "dataset.GeneralDataset._save_cache", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.data.dataset.GeneralDataset._save_cache"], ["", "def", "_load_cache", "(", "self", ",", "cache_path", ")", ":", "\n", "        ", "\"\"\"Load a pickle cache from saved file.(when use_memory option is True)\n\n        Args:\n            cache_path (str): The path to the pickle file.\n\n        Returns:\n            tuple: A tuple of (data list, label list, class-label dict)\n        \"\"\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_path", ")", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"load cache from {}...\"", ".", "format", "(", "cache_path", ")", ")", "\n", "with", "open", "(", "cache_path", ",", "\"rb\"", ")", "as", "fin", ":", "\n", "                ", "data_list", ",", "label_list", ",", "class_label_dict", "=", "pickle", ".", "load", "(", "fin", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"dump the cache to {}, please wait...\"", ".", "format", "(", "cache_path", ")", ")", "\n", "data_list", ",", "label_list", ",", "class_label_dict", "=", "self", ".", "_save_cache", "(", "cache_path", ")", "\n", "\n", "", "return", "data_list", ",", "label_list", ",", "class_label_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.data.dataset.GeneralDataset._save_cache": [[139, 156], ["dataset.GeneralDataset._generate_data_list", "dataset.GeneralDataset.loader", "open", "pickle.dump", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.data.dataset.GeneralDataset._generate_data_list"], ["", "def", "_save_cache", "(", "self", ",", "cache_path", ")", ":", "\n", "        ", "\"\"\"Save a pickle cache to the disk.\n\n        Args:\n            cache_path (str): The path to the pickle file.\n\n        Returns:\n            tuple: A tuple of (data list, label list, class-label dict)\n        \"\"\"", "\n", "data_list", ",", "label_list", ",", "class_label_dict", "=", "self", ".", "_generate_data_list", "(", ")", "\n", "data_list", "=", "[", "\n", "self", ".", "loader", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "\"images\"", ",", "path", ")", ")", "for", "path", "in", "data_list", "\n", "]", "\n", "\n", "with", "open", "(", "cache_path", ",", "\"wb\"", ")", "as", "fout", ":", "\n", "            ", "pickle", ".", "dump", "(", "(", "data_list", ",", "label_list", ",", "class_label_dict", ")", ",", "fout", ")", "\n", "", "return", "data_list", ",", "label_list", ",", "class_label_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.data.dataset.GeneralDataset.__len__": [[157, 159], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.data.dataset.GeneralDataset.__getitem__": [[160, 181], ["os.path.join", "dataset.GeneralDataset.loader", "dataset.GeneralDataset.trfms"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Return a PyTorch like dataset item of (data, label) tuple.\n\n        Args:\n            idx (int): The __getitem__ id.\n\n        Returns:\n            tuple: A tuple of (image, label)\n        \"\"\"", "\n", "if", "self", ".", "use_memory", ":", "\n", "            ", "data", "=", "self", ".", "data_list", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "image_name", "=", "self", ".", "data_list", "[", "idx", "]", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "\"images\"", ",", "image_name", ")", "\n", "data", "=", "self", ".", "loader", "(", "image_path", ")", "\n", "\n", "", "if", "self", ".", "trfms", "is", "not", "None", ":", "\n", "            ", "data", "=", "self", ".", "trfms", "(", "data", ")", "\n", "", "label", "=", "self", ".", "label_list", "[", "idx", "]", "\n", "\n", "return", "data", ",", "label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.data.dataset.pil_loader": [[11, 17], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning", "\n", "# (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.data.dataset.accimage_loader": [[19, 27], ["accimage.Image", "dataset.pil_loader"], "function", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.data.dataset.pil_loader"], ["", "", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "import", "accimage", "\n", "\n", "try", ":", "\n", "        ", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.data.dataset.gray_loader": [[29, 33], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["", "", "def", "gray_loader", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "\"P\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.data.dataset.default_loader": [[35, 42], ["get_image_backend", "dataset.accimage_loader", "dataset.pil_loader"], "function", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.data.dataset.accimage_loader", "home.repos.pwc.inspect_result.rl-vig_libfewshot.data.dataset.pil_loader"], ["", "", "", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "\n", "if", "get_image_backend", "(", ")", "==", "\"accimage\"", ":", "\n", "        ", "return", "accimage_loader", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.data.dataloader.get_dataloader": [[14, 115], ["trfms_list.append", "trfms_list.append", "torchvision.transforms.Compose", "core.data.dataset.GeneralDataset", "collates.get_collate_function", "collates.get_augment_method", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torch.utils.data.DataLoader", "samplers.CategoriesSampler", "torch.utils.data.DataLoader", "trfms_list.append", "trfms_list.append", "trfms_list.append", "trfms_list.append", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "trfms_list.append", "trfms_list.append", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "trfms_list.append", "trfms_list.append", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "trfms_list.append", "trfms_list.append", "trfms_list.append", "trfms_list.append", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "trfms_list.append", "trfms_list.append", "torchvision.transforms.Resize", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.CenterCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop"], "function", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.collates.__init__.get_collate_function", "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.__init__.get_augment_method"], ["def", "get_dataloader", "(", "config", ",", "mode", ",", "model_type", ")", ":", "\n", "    ", "\"\"\"Get the dataloader corresponding to the model type and training phase.\n\n    According to the config dict, the training phase and model category, select the appropriate transforms, set the corresponding sampler and collate_fn, and return the corresponding dataloader.\n\n    Args:\n        config (dict): A LibFewShot setting dict\n        mode (str): mode in train/test/val\n        model_type (ModelType): model type in meta/metric//finetuning\n\n    Returns:\n        Dataloader: The corresponding dataloader.\n    \"\"\"", "\n", "assert", "model_type", "!=", "ModelType", ".", "ABSTRACT", "\n", "\n", "trfms_list", "=", "[", "]", "\n", "\n", "# Add user's trfms here (or in get_augment_method())", "\n", "if", "mode", "==", "\"train\"", "and", "config", "[", "\"augment\"", "]", ":", "\n", "        ", "if", "config", "[", "\"image_size\"", "]", "==", "224", ":", "\n", "            ", "trfms_list", ".", "append", "(", "transforms", ".", "Resize", "(", "(", "256", ",", "256", ")", ")", ")", "\n", "trfms_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "(", "224", ",", "224", ")", ")", ")", "\n", "", "elif", "config", "[", "\"image_size\"", "]", "==", "84", ":", "\n", "            ", "trfms_list", ".", "append", "(", "transforms", ".", "Resize", "(", "(", "96", ",", "96", ")", ")", ")", "\n", "trfms_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "(", "84", ",", "84", ")", ")", ")", "\n", "# for MTL -> alternative solution: use avgpool(ks=11)", "\n", "", "elif", "config", "[", "\"image_size\"", "]", "==", "80", ":", "\n", "# MTL use another MEAN and STD", "\n", "            ", "trfms_list", ".", "append", "(", "transforms", ".", "Resize", "(", "(", "92", ",", "92", ")", ")", ")", "\n", "trfms_list", ".", "append", "(", "transforms", ".", "RandomResizedCrop", "(", "88", ")", ")", "\n", "trfms_list", ".", "append", "(", "transforms", ".", "CenterCrop", "(", "(", "80", ",", "80", ")", ")", ")", "\n", "trfms_list", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "\n", "\n", "", "aug_method", "=", "get_augment_method", "(", "config", ")", "\n", "trfms_list", "+=", "aug_method", "\n", "", "else", ":", "\n", "        ", "if", "config", "[", "\"image_size\"", "]", "==", "224", ":", "\n", "            ", "trfms_list", ".", "append", "(", "transforms", ".", "Resize", "(", "(", "256", ",", "256", ")", ")", ")", "\n", "trfms_list", ".", "append", "(", "transforms", ".", "CenterCrop", "(", "(", "224", ",", "224", ")", ")", ")", "\n", "", "elif", "config", "[", "\"image_size\"", "]", "==", "84", ":", "\n", "            ", "trfms_list", ".", "append", "(", "transforms", ".", "Resize", "(", "(", "96", ",", "96", ")", ")", ")", "\n", "trfms_list", ".", "append", "(", "transforms", ".", "CenterCrop", "(", "(", "84", ",", "84", ")", ")", ")", "\n", "# for MTL -> alternative solution: use avgpool(ks=11)", "\n", "", "elif", "config", "[", "\"image_size\"", "]", "==", "80", ":", "\n", "            ", "trfms_list", ".", "append", "(", "transforms", ".", "Resize", "(", "(", "92", ",", "92", ")", ")", ")", "\n", "trfms_list", ".", "append", "(", "transforms", ".", "CenterCrop", "(", "(", "80", ",", "80", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "\n", "\n", "", "", "trfms_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "trfms_list", ".", "append", "(", "transforms", ".", "Normalize", "(", "mean", "=", "MEAN", ",", "std", "=", "STD", ")", ")", "\n", "trfms", "=", "transforms", ".", "Compose", "(", "trfms_list", ")", "\n", "\n", "dataset", "=", "GeneralDataset", "(", "\n", "data_root", "=", "config", "[", "\"data_root\"", "]", ",", "\n", "mode", "=", "mode", ",", "\n", "use_memory", "=", "config", "[", "\"use_memory\"", "]", ",", "\n", ")", "\n", "assert", "dataset", ".", "label_num", ">=", "(", "\n", "config", "[", "\"way_num\"", "]", "if", "mode", "==", "\"train\"", "else", "config", "[", "\"test_way\"", "]", "\n", ")", ",", "\"classes({}) in {} split should be larger than {}({})\"", ".", "format", "(", "\n", "dataset", ".", "label_num", ",", "\n", "mode", ",", "\n", "\"way_num\"", "if", "mode", "==", "\"train\"", "else", "\"test_way\"", ",", "\n", "(", "config", "[", "\"way_num\"", "]", "if", "mode", "==", "\"train\"", "else", "config", "[", "\"test_way\"", "]", ")", ",", "\n", ")", "\n", "\n", "collate_function", "=", "get_collate_function", "(", "config", ",", "trfms", ",", "mode", ",", "model_type", ")", "\n", "\n", "if", "mode", "==", "\"train\"", "and", "model_type", "==", "ModelType", ".", "FINETUNING", ":", "\n", "        ", "dataloader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "config", "[", "\"batch_size\"", "]", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "config", "[", "\"n_gpu\"", "]", "*", "4", ",", "\n", "drop_last", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", "collate_fn", "=", "collate_function", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "CategoriesSampler", "(", "\n", "label_list", "=", "dataset", ".", "label_list", ",", "\n", "label_num", "=", "dataset", ".", "label_num", ",", "\n", "episode_size", "=", "config", "[", "\"episode_size\"", "]", ",", "\n", "episode_num", "=", "config", "[", "\"train_episode\"", "]", "if", "mode", "==", "\"train\"", "else", "config", "[", "\"test_episode\"", "]", ",", "\n", "way_num", "=", "config", "[", "\"way_num\"", "]", "if", "mode", "==", "\"train\"", "else", "config", "[", "\"test_way\"", "]", ",", "\n", "image_num", "=", "config", "[", "\"shot_num\"", "]", "+", "config", "[", "\"query_num\"", "]", "\n", "if", "mode", "==", "\"train\"", "\n", "else", "config", "[", "\"test_shot\"", "]", "+", "config", "[", "\"test_query\"", "]", ",", "\n", ")", "\n", "dataloader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_sampler", "=", "sampler", ",", "\n", "num_workers", "=", "config", "[", "\"n_gpu\"", "]", "*", "4", ",", "\n", "pin_memory", "=", "True", ",", "\n", "collate_fn", "=", "collate_function", ",", "\n", ")", "\n", "\n", "", "return", "dataloader", "\n", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.collates.collate_functions.GeneralCollateFunction.__init__": [[14, 24], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["def", "__init__", "(", "self", ",", "trfms", ",", "times", ")", ":", "\n", "        ", "\"\"\"Initialize a `GeneralCollateFunction`.\n\n        Args:\n            trfms (list): A list of torchvision transforms.\n            times (int): Specify the augment times. (0 or 1 for not to augment)\n        \"\"\"", "\n", "super", "(", "GeneralCollateFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "trfms", "=", "trfms", "\n", "self", ".", "times", "=", "times", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.collates.collate_functions.GeneralCollateFunction.method": [[25, 58], ["zip", "list", "list", "torch.cat", "torch.tensor", "itertools.chain.from_iterable", "collate_functions.GeneralCollateFunction.trfms().unsqueeze", "itertools.chain.from_iterable", "torch.tensor", "len", "len", "TypeError", "collate_functions.GeneralCollateFunction.trfms"], "methods", ["None"], ["", "def", "method", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Apply transforms and augmentations on a batch.\n\n        The images and targets in a batch are augmented by the number of `self.times` and the targets are augmented\n        to match the shape of images.\n\n        Args:\n            batch (list of tuple): A batch returned by dataset.\n\n        Returns:\n            tuple: A tuple of (images, targets), here len(images)=len(targets).\n        \"\"\"", "\n", "try", ":", "\n", "            ", "images", ",", "targets", "=", "zip", "(", "*", "batch", ")", "\n", "\n", "images", "=", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "[", "[", "image", "]", "*", "self", ".", "times", "for", "image", "in", "images", "]", ")", ")", "\n", "images", "=", "[", "self", ".", "trfms", "(", "image", ")", ".", "unsqueeze", "(", "0", ")", "for", "image", "in", "images", "]", "\n", "\n", "targets", "=", "list", "(", "\n", "itertools", ".", "chain", ".", "from_iterable", "(", "[", "[", "target", "]", "*", "self", ".", "times", "for", "target", "in", "targets", "]", ")", "\n", ")", "\n", "targets", "=", "[", "torch", ".", "tensor", "(", "[", "target", "]", ")", "for", "target", "in", "targets", "]", "\n", "\n", "assert", "len", "(", "images", ")", "==", "len", "(", "targets", ")", ",", "\"Inconsistent number of images and labels!\"", "\n", "\n", "images", "=", "torch", ".", "cat", "(", "images", ")", "\n", "\n", "targets", "=", "torch", ".", "tensor", "(", "targets", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "return", "images", ",", "targets", "\n", "", "except", "TypeError", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"Error, probably because the transforms are passed to the dataset, the transforms should be \"", "\n", "\"passed to the collate_fn\"", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.collates.collate_functions.GeneralCollateFunction.__call__": [[61, 63], ["collate_functions.GeneralCollateFunction.method"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.collates.collate_functions.FewShotAugCollateFunction.method"], ["", "", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "self", ".", "method", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.collates.collate_functions.FewShotAugCollateFunction.__init__": [[71, 101], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__"], ["def", "__init__", "(", "self", ",", "trfms", ",", "times", ",", "times_q", ",", "way_num", ",", "shot_num", ",", "query_num", ",", "episode_size", ")", ":", "\n", "        ", "\"\"\"Initialize a `FewShotAugCollateFunction`.\n\n\n        Args:\n            trfms (list or tuple of list): A torchvision transfrom list of a tuple of 2 torchvision transform list.\n            if  `list`, both support and query images will be applied the same transforms, otherwise the 1st one will\n            apply to support images and the 2nd one will apply to query images.\n            times (int): Augment times of support iamges\n            times_q (int ): Augment times of query images\n            way_num (int): Few-shot way setting\n            shot_num (int): Few-shot shot setting\n            query_num (int): Few-shot query setting\n            episode_size (int): Few-shot episode size setting\n        \"\"\"", "\n", "super", "(", "FewShotAugCollateFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "try", ":", "\n", "            ", "self", ".", "trfms_support", ",", "self", ".", "trfms_query", "=", "trfms", "\n", "", "except", "Exception", ":", "\n", "            ", "self", ".", "trfms_support", "=", "self", ".", "trfms_query", "=", "trfms", "\n", "# Allow different trfms: when single T, apply to S and Q equally;", "\n", "# When trfms=(T,T), apply to S and Q separately;", "\n", "", "self", ".", "times", "=", "1", "if", "times", "==", "0", "else", "times", "\n", "self", ".", "times_q", "=", "1", "if", "times_q", "==", "0", "else", "times_q", "\n", "self", ".", "way_num", "=", "way_num", "\n", "self", ".", "shot_num", "=", "shot_num", "\n", "self", ".", "query_num", "=", "query_num", "\n", "self", ".", "shot_aug", "=", "self", ".", "shot_num", "*", "self", ".", "times", "\n", "self", ".", "query_aug", "=", "self", ".", "query_num", "*", "self", ".", "times_q", "\n", "self", ".", "episode_size", "=", "episode_size", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.collates.collate_functions.FewShotAugCollateFunction.method": [[102, 165], ["zip", "flat", "torch.stack", "torch.tensor().reshape", "global_labels[].unsqueeze().repeat", "TypeError", "range", "isinstance", "collate_functions.FewShotAugCollateFunction.trfms_support", "collate_functions.FewShotAugCollateFunction.trfms_query", "enumerate", "torch.tensor", "global_labels[].unsqueeze", "len", "flat"], "methods", ["None"], ["", "def", "method", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Apply transforms and augmentations on a **few-shot** batch.\n\n        The samples of query and support are augmented separately.\n        For example: if aug_times=5, then 01234 -> 0000011111222223333344444.\n\n        Args:\n            batch (list of tuple): A batch returned by a few-shot dataset.\n\n        Returns:\n            tuple: a tuple of (images, gt_labels).\n        \"\"\"", "\n", "try", ":", "\n", "            ", "images", ",", "labels", "=", "zip", "(", "\n", "*", "batch", "\n", ")", "# images = [img_label_tuple[0] for img_label_tuple in batch]  # 111111222222 (5s1q for example)", "\n", "images_split_by_label", "=", "[", "\n", "images", "[", "index", ":", "index", "+", "self", ".", "shot_num", "+", "self", ".", "query_num", "]", "\n", "for", "index", "in", "range", "(", "0", ",", "len", "(", "images", ")", ",", "self", ".", "shot_num", "+", "self", ".", "query_num", ")", "\n", "]", "# 111111; 222222 ;", "\n", "images_split_by_label_type", "=", "[", "\n", "[", "spt_qry", "[", ":", "self", ".", "shot_num", "]", ",", "spt_qry", "[", "self", ".", "shot_num", ":", "]", "]", "\n", "for", "spt_qry", "in", "images_split_by_label", "\n", "]", "# 11111,1;22222,2;  == [shot, query]", "\n", "# aug support", "\n", "# fixme: should have a elegant method", "\n", "# 1111111111,1;2222222222,2 (aug_time = 2 for example)", "\n", "for", "cls", "in", "images_split_by_label_type", ":", "\n", "                ", "cls", "[", "0", "]", "=", "cls", "[", "0", "]", "*", "self", ".", "times", "# aug support", "\n", "cls", "[", "1", "]", "=", "cls", "[", "1", "]", "*", "self", ".", "times_q", "# aug query", "\n", "# flatten and apply trfms", "\n", "", "flat", "=", "lambda", "t", ":", "[", "x", "for", "sub", "in", "t", "for", "x", "in", "flat", "(", "sub", ")", "]", "if", "isinstance", "(", "t", ",", "Iterable", ")", "else", "[", "t", "]", "\n", "images", "=", "flat", "(", "images_split_by_label_type", ")", "\n", "# 1111111111122222222222", "\n", "# images = [self.trfms(image) for image in images]  # list of tensors([c, h, w])", "\n", "images", "=", "[", "\n", "self", ".", "trfms_support", "(", "image", ")", "\n", "if", "index", "%", "(", "self", ".", "shot_aug", "+", "self", ".", "query_aug", ")", "<", "self", ".", "shot_aug", "\n", "else", "self", ".", "trfms_query", "(", "image", ")", "\n", "for", "index", ",", "image", "in", "enumerate", "(", "images", ")", "\n", "]", "# list of tensors([c, h, w])", "\n", "images", "=", "torch", ".", "stack", "(", "images", ")", "# [b', c, h, w] <- b' = b after aug", "\n", "# labels", "\n", "# global_labels = torch.tensor(labels,dtype=torch.int64)", "\n", "# global_labels = torch.tensor(labels,dtype=torch.int64).reshape(self.episode_size,self.way_num,", "\n", "# self.shot_num*self.times+self.query_num)", "\n", "global_labels", "=", "torch", ".", "tensor", "(", "labels", ",", "dtype", "=", "torch", ".", "int64", ")", ".", "reshape", "(", "\n", "self", ".", "episode_size", ",", "self", ".", "way_num", ",", "self", ".", "shot_num", "+", "self", ".", "query_num", "\n", ")", "\n", "global_labels", "=", "(", "\n", "global_labels", "[", "...", ",", "0", "]", "\n", ".", "unsqueeze", "(", "-", "1", ")", "\n", ".", "repeat", "(", "\n", "1", ",", "\n", "1", ",", "\n", "self", ".", "shot_num", "*", "self", ".", "times", "+", "self", ".", "query_num", "*", "self", ".", "times_q", ",", "\n", ")", "\n", ")", "\n", "return", "images", ",", "global_labels", "\n", "# images.shape = [e*w*(q+s) x c x h x w],  global_labels.shape = [e x w x (q+s)]", "\n", "", "except", "TypeError", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"Error, probably because the transforms are passed to the dataset, the transforms should be \"", "\n", "\"passed to the collate_fn\"", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.collates.collate_functions.FewShotAugCollateFunction.__call__": [[168, 170], ["collate_functions.FewShotAugCollateFunction.method"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.collates.collate_functions.FewShotAugCollateFunction.method"], ["", "", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "self", ".", "method", "(", "batch", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.collates.__init__.get_collate_function": [[7, 37], ["collate_functions.GeneralCollateFunction", "collate_functions.FewShotAugCollateFunction"], "function", ["None"], []], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Lighting.__init__": [[216, 220], ["torch.Tensor", "torch.Tensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alphastd", ",", "eigval", ",", "eigvec", ")", ":", "\n", "        ", "self", ".", "alphastd", "=", "alphastd", "\n", "self", ".", "eigval", "=", "torch", ".", "Tensor", "(", "eigval", ")", "\n", "self", ".", "eigvec", "=", "torch", ".", "Tensor", "(", "eigvec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Lighting.__call__": [[221, 236], ["img.new().resize_().normal_", "randaugment.Lighting.eigvec.type_as().clone().mul().mul().sum().squeeze", "img.add", "randaugment.Lighting.view().expand_as", "img.new().resize_", "randaugment.Lighting.eigvec.type_as().clone().mul().mul().sum", "randaugment.Lighting.view", "img.new", "randaugment.Lighting.eigvec.type_as().clone().mul().mul", "randaugment.Lighting.eigval.view().expand", "randaugment.Lighting.eigvec.type_as().clone().mul", "img.new().resize_().normal_.view().expand", "randaugment.Lighting.eigval.view", "randaugment.Lighting.eigvec.type_as().clone", "img.new().resize_().normal_.view", "randaugment.Lighting.eigvec.type_as"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "alphastd", "==", "0", ":", "\n", "            ", "return", "img", "\n", "\n", "", "alpha", "=", "img", ".", "new", "(", ")", ".", "resize_", "(", "3", ")", ".", "normal_", "(", "0", ",", "self", ".", "alphastd", ")", "\n", "rgb", "=", "(", "\n", "self", ".", "eigvec", ".", "type_as", "(", "img", ")", "\n", ".", "clone", "(", ")", "\n", ".", "mul", "(", "alpha", ".", "view", "(", "1", ",", "3", ")", ".", "expand", "(", "3", ",", "3", ")", ")", "\n", ".", "mul", "(", "self", ".", "eigval", ".", "view", "(", "1", ",", "3", ")", ".", "expand", "(", "3", ",", "3", ")", ")", "\n", ".", "sum", "(", "1", ")", "\n", ".", "squeeze", "(", ")", "\n", ")", "\n", "\n", "return", "img", ".", "add", "(", "rgb", ".", "view", "(", "3", ",", "1", ",", "1", ")", ".", "expand_as", "(", "img", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.CutoutDefault.__init__": [[243, 245], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.CutoutDefault.__call__": [[246, 262], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.0", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.RandAugment.__init__": [[265, 269], ["randaugment.augment_list"], "methods", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.augment_list"], ["    ", "def", "__init__", "(", "self", ",", "n", "=", "1", ",", "m", "=", "1", ")", ":", "\n", "        ", "self", ".", "n", "=", "n", "\n", "self", ".", "m", "=", "m", "# [0, 30]", "\n", "self", ".", "augment_list", "=", "augment_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.RandAugment.__call__": [[270, 277], ["random.choices", "op", "float", "float"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "ops", "=", "random", ".", "choices", "(", "self", ".", "augment_list", ",", "k", "=", "self", ".", "n", ")", "\n", "for", "op", ",", "minval", ",", "maxval", "in", "ops", ":", "\n", "            ", "val", "=", "(", "float", "(", "self", ".", "m", ")", "/", "30", ")", "*", "float", "(", "maxval", "-", "minval", ")", "+", "minval", "\n", "img", "=", "op", "(", "img", ",", "val", ")", "\n", "\n", "", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.ShearX": [[18, 23], ["img.transform", "random.random"], "function", ["None"], ["def", "ShearX", "(", "img", ",", "v", ")", ":", "# [-0.3, 0.3]", "\n", "    ", "assert", "-", "0.3", "<=", "v", "<=", "0.3", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "v", ",", "0", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.ShearY": [[25, 30], ["img.transform", "random.random"], "function", ["None"], ["", "def", "ShearY", "(", "img", ",", "v", ")", ":", "# [-0.3, 0.3]", "\n", "    ", "assert", "-", "0.3", "<=", "v", "<=", "0.3", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "v", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.TranslateX": [[32, 38], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateX", "(", "img", ",", "v", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "    ", "assert", "-", "0.45", "<=", "v", "<=", "0.45", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "v", "=", "v", "*", "img", ".", "size", "[", "0", "]", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "v", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.TranslateXabs": [[40, 45], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateXabs", "(", "img", ",", "v", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "    ", "assert", "0", "<=", "v", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "v", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.TranslateY": [[47, 53], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateY", "(", "img", ",", "v", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "    ", "assert", "-", "0.45", "<=", "v", "<=", "0.45", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "v", "=", "v", "*", "img", ".", "size", "[", "1", "]", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.TranslateYabs": [[55, 60], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateYabs", "(", "img", ",", "v", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "    ", "assert", "0", "<=", "v", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Rotate": [[62, 67], ["img.rotate", "random.random"], "function", ["None"], ["", "def", "Rotate", "(", "img", ",", "v", ")", ":", "# [-30, 30]", "\n", "    ", "assert", "-", "30", "<=", "v", "<=", "30", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "rotate", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.AutoContrast": [[69, 71], ["PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast"], "function", ["None"], ["", "def", "AutoContrast", "(", "img", ",", "_", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "autocontrast", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Invert": [[73, 75], ["PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert"], "function", ["None"], ["", "def", "Invert", "(", "img", ",", "_", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "invert", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Equalize": [[77, 79], ["PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize"], "function", ["None"], ["", "def", "Equalize", "(", "img", ",", "_", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "equalize", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Flip": [[81, 83], ["PIL.ImageOps.mirror", "PIL.ImageOps.mirror", "PIL.ImageOps.mirror", "PIL.ImageOps.mirror"], "function", ["None"], ["", "def", "Flip", "(", "img", ",", "_", ")", ":", "# not from the paper", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "mirror", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Solarize": [[85, 88], ["PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize"], "function", ["None"], ["", "def", "Solarize", "(", "img", ",", "v", ")", ":", "# [0, 256]", "\n", "    ", "assert", "0", "<=", "v", "<=", "256", "\n", "return", "PIL", ".", "ImageOps", ".", "solarize", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.SolarizeAdd": [[90, 97], ["numpy.array().astype", "numpy.clip", "img_np.astype.astype", "PIL.Image.fromarray", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "numpy.array"], "function", ["None"], ["", "def", "SolarizeAdd", "(", "img", ",", "addition", "=", "0", ",", "threshold", "=", "128", ")", ":", "\n", "    ", "img_np", "=", "np", ".", "array", "(", "img", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "img_np", "=", "img_np", "+", "addition", "\n", "img_np", "=", "np", ".", "clip", "(", "img_np", ",", "0", ",", "255", ")", "\n", "img_np", "=", "img_np", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img_np", ")", "\n", "return", "PIL", ".", "ImageOps", ".", "solarize", "(", "img", ",", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Posterize": [[99, 103], ["int", "max", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize"], "function", ["None"], ["", "def", "Posterize", "(", "img", ",", "v", ")", ":", "# [4, 8]", "\n", "    ", "v", "=", "int", "(", "v", ")", "\n", "v", "=", "max", "(", "1", ",", "v", ")", "\n", "return", "PIL", ".", "ImageOps", ".", "posterize", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Contrast": [[105, 108], ["PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast"], "function", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Contrast", "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Contrast", "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Contrast", "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Contrast"], ["", "def", "Contrast", "(", "img", ",", "v", ")", ":", "# [0.1,1.9]", "\n", "    ", "assert", "0.1", "<=", "v", "<=", "1.9", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Color": [[110, 113], ["PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color"], "function", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Color", "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Color", "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Color", "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Color"], ["", "def", "Color", "(", "img", ",", "v", ")", ":", "# [0.1,1.9]", "\n", "    ", "assert", "0.1", "<=", "v", "<=", "1.9", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Brightness": [[115, 118], ["PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness"], "function", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Brightness", "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Brightness", "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Brightness", "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Brightness"], ["", "def", "Brightness", "(", "img", ",", "v", ")", ":", "# [0.1,1.9]", "\n", "    ", "assert", "0.1", "<=", "v", "<=", "1.9", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Sharpness": [[120, 123], ["PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness"], "function", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Sharpness", "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Sharpness", "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Sharpness", "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Sharpness"], ["", "def", "Sharpness", "(", "img", ",", "v", ")", ":", "# [0.1,1.9]", "\n", "    ", "assert", "0.1", "<=", "v", "<=", "1.9", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Cutout": [[125, 132], ["randaugment.CutoutAbs"], "function", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.CutoutAbs"], ["", "def", "Cutout", "(", "img", ",", "v", ")", ":", "# [0, 60] => percentage: [0, 0.2]", "\n", "    ", "assert", "0.0", "<=", "v", "<=", "0.2", "\n", "if", "v", "<=", "0.0", ":", "\n", "        ", "return", "img", "\n", "\n", "", "v", "=", "v", "*", "img", ".", "size", "[", "0", "]", "\n", "return", "CutoutAbs", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.CutoutAbs": [[134, 153], ["numpy.random.uniform", "numpy.random.uniform", "int", "int", "min", "min", "img.copy.copy", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "max", "max", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw"], "function", ["None"], ["", "def", "CutoutAbs", "(", "img", ",", "v", ")", ":", "# [0, 60] => percentage: [0, 0.2]", "\n", "# assert 0 <= v <= 20", "\n", "    ", "if", "v", "<", "0", ":", "\n", "        ", "return", "img", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "x0", "=", "np", ".", "random", ".", "uniform", "(", "w", ")", "\n", "y0", "=", "np", ".", "random", ".", "uniform", "(", "h", ")", "\n", "\n", "x0", "=", "int", "(", "max", "(", "0", ",", "x0", "-", "v", "/", "2.0", ")", ")", "\n", "y0", "=", "int", "(", "max", "(", "0", ",", "y0", "-", "v", "/", "2.0", ")", ")", "\n", "x1", "=", "min", "(", "w", ",", "x0", "+", "v", ")", "\n", "y1", "=", "min", "(", "h", ",", "y0", "+", "v", ")", "\n", "\n", "xy", "=", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", "\n", "color", "=", "(", "125", ",", "123", ",", "114", ")", "\n", "# color = (0, 0, 0)", "\n", "img", "=", "img", ".", "copy", "(", ")", "\n", "PIL", ".", "ImageDraw", ".", "Draw", "(", "img", ")", ".", "rectangle", "(", "xy", ",", "color", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.SamplePairing": [[155, 162], ["numpy.random.choice", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.blend", "PIL.Image.blend", "PIL.Image.blend", "PIL.Image.blend", "len"], "function", ["None"], ["", "def", "SamplePairing", "(", "imgs", ")", ":", "# [0, 0.4]", "\n", "    ", "def", "f", "(", "img1", ",", "v", ")", ":", "\n", "        ", "i", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "imgs", ")", ")", "\n", "img2", "=", "PIL", ".", "Image", ".", "fromarray", "(", "imgs", "[", "i", "]", ")", "\n", "return", "PIL", ".", "Image", ".", "blend", "(", "img1", ",", "img2", ",", "v", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Identity": [[164, 166], ["None"], "function", ["None"], ["", "def", "Identity", "(", "img", ",", "v", ")", ":", "\n", "    ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.augment_list": [[168, 211], ["None"], "function", ["None"], ["", "def", "augment_list", "(", ")", ":", "# 16 oeprations and their ranges", "\n", "# https://github.com/google-research/uda/blob/master/image/randaugment/policies.py#L57", "\n", "# l = [", "\n", "#     (Identity, 0., 1.0),", "\n", "#     (ShearX, 0., 0.3),  # 0", "\n", "#     (ShearY, 0., 0.3),  # 1", "\n", "#     (TranslateX, 0., 0.33),  # 2", "\n", "#     (TranslateY, 0., 0.33),  # 3", "\n", "#     (Rotate, 0, 30),  # 4", "\n", "#     (AutoContrast, 0, 1),  # 5", "\n", "#     (Invert, 0, 1),  # 6", "\n", "#     (Equalize, 0, 1),  # 7", "\n", "#     (Solarize, 0, 110),  # 8", "\n", "#     (Posterize, 4, 8),  # 9", "\n", "#     # (Contrast, 0.1, 1.9),  # 10", "\n", "#     (Color, 0.1, 1.9),  # 11", "\n", "#     (Brightness, 0.1, 1.9),  # 12", "\n", "#     (Sharpness, 0.1, 1.9),  # 13", "\n", "#     # (Cutout, 0, 0.2),  # 14", "\n", "#     # (SamplePairing(imgs), 0, 0.4),  # 15", "\n", "# ]", "\n", "\n", "# https://github.com/tensorflow/tpu/blob/8462d083dd89489a79e3200bcc8d4063bf362186/models/official/efficientnet/autoaugment.py#L505", "\n", "    ", "list", "=", "[", "\n", "(", "AutoContrast", ",", "0", ",", "1", ")", ",", "\n", "(", "Equalize", ",", "0", ",", "1", ")", ",", "\n", "(", "Invert", ",", "0", ",", "1", ")", ",", "\n", "(", "Rotate", ",", "0", ",", "30", ")", ",", "\n", "(", "Posterize", ",", "0", ",", "4", ")", ",", "\n", "(", "Solarize", ",", "0", ",", "256", ")", ",", "\n", "(", "SolarizeAdd", ",", "0", ",", "110", ")", ",", "\n", "(", "Color", ",", "0.1", ",", "1.9", ")", ",", "\n", "(", "Contrast", ",", "0.1", ",", "1.9", ")", ",", "\n", "(", "Brightness", ",", "0.1", ",", "1.9", ")", ",", "\n", "(", "Sharpness", ",", "0.1", ",", "1.9", ")", ",", "\n", "(", "ShearX", ",", "0.0", ",", "0.3", ")", ",", "\n", "(", "ShearY", ",", "0.0", ",", "0.3", ")", ",", "\n", "(", "CutoutAbs", ",", "0", ",", "40", ")", ",", "\n", "(", "TranslateXabs", ",", "0.0", ",", "100", ")", ",", "\n", "(", "TranslateYabs", ",", "0.0", ",", "100", ")", ",", "\n", "]", "\n", "\n", "return", "list", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.cutout.Cutout.__init__": [[19, 22], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n_holes", "=", "1", ",", "length", "=", "1", ")", ":", "\n", "        ", "self", ".", "n_holes", "=", "n_holes", "\n", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.cutout.Cutout.__call__": [[23, 53], ["numpy.asarray", "numpy.ones", "range", "numpy.expand_dims().repeat", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.expand_dims"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (Tensor): Tensor image of size (C, H, W).\n        Returns:\n            Tensor: Image with n_holes of dimension length x length cut out of it.\n        \"\"\"", "\n", "img", "=", "np", ".", "asarray", "(", "img", ")", "\n", "\n", "h", "=", "img", ".", "shape", "[", "0", "]", "\n", "w", "=", "img", ".", "shape", "[", "1", "]", "\n", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "\n", "for", "n", "in", "range", "(", "self", ".", "n_holes", ")", ":", "\n", "            ", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.0", "\n", "\n", "", "mask", "=", "np", ".", "expand_dims", "(", "mask", ",", "2", ")", ".", "repeat", "(", "3", ",", "axis", "=", "2", ")", "\n", "\n", "img", "=", "img", "*", "mask", "\n", "\n", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.ImageNetPolicy.__init__": [[22, 49], ["autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.4", ",", "\"posterize\"", ",", "8", ",", "0.6", ",", "\"rotate\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "5", ",", "0.6", ",", "\"autocontrast\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"equalize\"", ",", "8", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"posterize\"", ",", "7", ",", "0.6", ",", "\"posterize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "7", ",", "0.2", ",", "\"solarize\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "4", ",", "0.8", ",", "\"rotate\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "3", ",", "0.6", ",", "\"equalize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"posterize\"", ",", "5", ",", "1.0", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.2", ",", "\"rotate\"", ",", "3", ",", "0.6", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "8", ",", "0.4", ",", "\"posterize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"rotate\"", ",", "8", ",", "0.4", ",", "\"color\"", ",", "0", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"rotate\"", ",", "9", ",", "0.6", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.0", ",", "\"equalize\"", ",", "7", ",", "0.8", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "1.0", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"color\"", ",", "4", ",", "1.0", ",", "\"contrast\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"rotate\"", ",", "8", ",", "1.0", ",", "\"color\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"color\"", ",", "8", ",", "0.8", ",", "\"solarize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"sharpness\"", ",", "7", ",", "0.6", ",", "\"invert\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"shearX\"", ",", "5", ",", "1.0", ",", "\"equalize\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"color\"", ",", "0", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "7", ",", "0.2", ",", "\"solarize\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "5", ",", "0.6", ",", "\"autocontrast\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "1.0", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"color\"", ",", "4", ",", "1.0", ",", "\"contrast\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"equalize\"", ",", "8", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.ImageNetPolicy.__call__": [[51, 54], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.ImageNetPolicy.__repr__": [[55, 57], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment ImageNet Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.CIFAR10Policy.__init__": [[71, 98], ["autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.1", ",", "\"invert\"", ",", "7", ",", "0.2", ",", "\"contrast\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"rotate\"", ",", "2", ",", "0.3", ",", "\"translateX\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"sharpness\"", ",", "1", ",", "0.9", ",", "\"sharpness\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"translateY\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"autocontrast\"", ",", "8", ",", "0.9", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.2", ",", "\"shearY\"", ",", "7", ",", "0.3", ",", "\"posterize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"color\"", ",", "3", ",", "0.6", ",", "\"brightness\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"sharpness\"", ",", "9", ",", "0.7", ",", "\"brightness\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "5", ",", "0.5", ",", "\"equalize\"", ",", "1", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"contrast\"", ",", "7", ",", "0.6", ",", "\"sharpness\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"color\"", ",", "7", ",", "0.5", ",", "\"translateX\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"equalize\"", ",", "7", ",", "0.4", ",", "\"autocontrast\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"translateY\"", ",", "3", ",", "0.2", ",", "\"sharpness\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"brightness\"", ",", "6", ",", "0.2", ",", "\"color\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"solarize\"", ",", "2", ",", "0.0", ",", "\"invert\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.2", ",", "\"equalize\"", ",", "0", ",", "0.6", ",", "\"autocontrast\"", ",", "0", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.2", ",", "\"equalize\"", ",", "8", ",", "0.6", ",", "\"equalize\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"color\"", ",", "9", ",", "0.6", ",", "\"equalize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"autocontrast\"", ",", "4", ",", "0.2", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.1", ",", "\"brightness\"", ",", "3", ",", "0.7", ",", "\"color\"", ",", "0", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"solarize\"", ",", "5", ",", "0.9", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"translateY\"", ",", "9", ",", "0.7", ",", "\"translateY\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"autocontrast\"", ",", "2", ",", "0.8", ",", "\"solarize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"equalize\"", ",", "8", ",", "0.1", ",", "\"invert\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"translateY\"", ",", "9", ",", "0.9", ",", "\"autocontrast\"", ",", "1", ",", "fillcolor", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.CIFAR10Policy.__call__": [[100, 103], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.CIFAR10Policy.__repr__": [[104, 106], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment CIFAR10 Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SVHNPolicy.__init__": [[120, 147], ["autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.2", ",", "\"invert\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "5", ",", "0.6", ",", "\"solarize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "3", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "1", ",", "0.9", ",", "\"rotate\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.8", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "8", ",", "0.4", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "5", ",", "0.2", ",", "\"solarize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "6", ",", "0.8", ",", "\"autocontrast\"", ",", "1", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "3", ",", "0.9", ",", "\"rotate\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.3", ",", "\"solarize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"invert\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"equalize\"", ",", "5", ",", "0.6", ",", "\"translateY\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "4", ",", "0.6", ",", "\"equalize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"contrast\"", ",", "3", ",", "0.8", ",", "\"rotate\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"invert\"", ",", "5", ",", "0.0", ",", "\"translateY\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearY\"", ",", "6", ",", "0.4", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "0.8", ",", "\"rotate\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"shearY\"", ",", "7", ",", "0.9", ",", "\"translateX\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.1", ",", "\"shearX\"", ",", "6", ",", "0.6", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"solarize\"", ",", "2", ",", "0.6", ",", "\"translateY\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "4", ",", "0.8", ",", "\"invert\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearX\"", ",", "9", ",", "0.8", ",", "\"translateY\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "5", ",", "0.7", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearX\"", ",", "2", ",", "0.1", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SVHNPolicy.__call__": [[149, 152], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SVHNPolicy.__repr__": [[153, 155], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment SVHN Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__init__": [[158, 259], ["numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.round().astype", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "img.convert().rotate", "PIL.Image.composite().convert", "img.transform", "img.transform", "img.transform", "img.transform", "autoaugment.SubPolicy.__init__.rotate_with_fill"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "p1", ",", "\n", "operation1", ",", "\n", "magnitude_idx1", ",", "\n", "p2", ",", "\n", "operation2", ",", "\n", "magnitude_idx2", ",", "\n", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ",", "\n", ")", ":", "\n", "        ", "ranges", "=", "{", "\n", "\"shearX\"", ":", "np", ".", "linspace", "(", "0", ",", "0.3", ",", "10", ")", ",", "\n", "\"shearY\"", ":", "np", ".", "linspace", "(", "0", ",", "0.3", ",", "10", ")", ",", "\n", "\"translateX\"", ":", "np", ".", "linspace", "(", "0", ",", "150", "/", "331", ",", "10", ")", ",", "\n", "\"translateY\"", ":", "np", ".", "linspace", "(", "0", ",", "150", "/", "331", ",", "10", ")", ",", "\n", "\"rotate\"", ":", "np", ".", "linspace", "(", "0", ",", "30", ",", "10", ")", ",", "\n", "\"color\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"posterize\"", ":", "np", ".", "round", "(", "np", ".", "linspace", "(", "8", ",", "4", ",", "10", ")", ",", "0", ")", ".", "astype", "(", "np", ".", "int", ")", ",", "\n", "\"solarize\"", ":", "np", ".", "linspace", "(", "256", ",", "0", ",", "10", ")", ",", "\n", "\"contrast\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"sharpness\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"brightness\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"autocontrast\"", ":", "[", "0", "]", "*", "10", ",", "\n", "\"equalize\"", ":", "[", "0", "]", "*", "10", ",", "\n", "\"invert\"", ":", "[", "0", "]", "*", "10", ",", "\n", "}", "\n", "\n", "# from https://stackoverflow.com/questions/5252170/specify-image-filling-color-when-rotating-in-python-with-pil-and-setting-expand", "\n", "def", "rotate_with_fill", "(", "img", ",", "magnitude", ")", ":", "\n", "            ", "rot", "=", "img", ".", "convert", "(", "\"RGBA\"", ")", ".", "rotate", "(", "magnitude", ")", "\n", "return", "Image", ".", "composite", "(", "rot", ",", "Image", ".", "new", "(", "\"RGBA\"", ",", "rot", ".", "size", ",", "(", "128", ",", ")", "*", "4", ")", ",", "rot", ")", ".", "convert", "(", "\n", "img", ".", "mode", "\n", ")", "\n", "\n", "", "func", "=", "{", "\n", "\"shearX\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "\n", "Image", ".", "AFFINE", ",", "\n", "(", "1", ",", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "0", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "Image", ".", "BICUBIC", ",", "\n", "fillcolor", "=", "fillcolor", ",", "\n", ")", ",", "\n", "\"shearY\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "\n", "Image", ".", "AFFINE", ",", "\n", "(", "1", ",", "0", ",", "0", ",", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "1", ",", "0", ")", ",", "\n", "Image", ".", "BICUBIC", ",", "\n", "fillcolor", "=", "fillcolor", ",", "\n", ")", ",", "\n", "\"translateX\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "\n", "Image", ".", "AFFINE", ",", "\n", "(", "\n", "1", ",", "\n", "0", ",", "\n", "magnitude", "*", "img", ".", "size", "[", "0", "]", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "\n", "0", ",", "\n", "1", ",", "\n", "0", ",", "\n", ")", ",", "\n", "fillcolor", "=", "fillcolor", ",", "\n", ")", ",", "\n", "\"translateY\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "\n", "Image", ".", "AFFINE", ",", "\n", "(", "\n", "1", ",", "\n", "0", ",", "\n", "0", ",", "\n", "0", ",", "\n", "1", ",", "\n", "magnitude", "*", "img", ".", "size", "[", "1", "]", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "\n", ")", ",", "\n", "fillcolor", "=", "fillcolor", ",", "\n", ")", ",", "\n", "\"rotate\"", ":", "lambda", "img", ",", "magnitude", ":", "rotate_with_fill", "(", "img", ",", "magnitude", ")", ",", "\n", "\"color\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", "\n", ")", ",", "\n", "\"posterize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "posterize", "(", "img", ",", "magnitude", ")", ",", "\n", "\"solarize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "solarize", "(", "img", ",", "magnitude", ")", ",", "\n", "\"contrast\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", "\n", ")", ",", "\n", "\"sharpness\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", "\n", ")", ",", "\n", "\"brightness\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", "\n", ")", ",", "\n", "\"autocontrast\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "autocontrast", "(", "img", ")", ",", "\n", "\"equalize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "equalize", "(", "img", ")", ",", "\n", "\"invert\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "invert", "(", "img", ")", ",", "\n", "}", "\n", "\n", "self", ".", "p1", "=", "p1", "\n", "self", ".", "operation1", "=", "func", "[", "operation1", "]", "\n", "self", ".", "magnitude1", "=", "ranges", "[", "operation1", "]", "[", "magnitude_idx1", "]", "\n", "self", ".", "p2", "=", "p2", "\n", "self", ".", "operation2", "=", "func", "[", "operation2", "]", "\n", "self", ".", "magnitude2", "=", "ranges", "[", "operation2", "]", "[", "magnitude_idx2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.autoaugment.SubPolicy.__call__": [[260, 266], ["random.random", "autoaugment.SubPolicy.operation1", "random.random", "autoaugment.SubPolicy.operation2"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p1", ":", "\n", "            ", "img", "=", "self", ".", "operation1", "(", "img", ",", "self", ".", "magnitude1", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p2", ":", "\n", "            ", "img", "=", "self", ".", "operation2", "(", "img", ",", "self", ".", "magnitude2", ")", "\n", "", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.__init__.get_augment_method": [[10, 45], ["torchvision.transforms.ColorJitter", "torchvision.transforms.RandomHorizontalFlip", "autoaugment.ImageNetPolicy", "cutout.Cutout", "randaugment.RandAugment", "torchvision.transforms.CenterCrop", "torchvision.transforms.RandomHorizontalFlip"], "function", ["home.repos.pwc.inspect_result.rl-vig_libfewshot.contrib.randaugment.Cutout"], []]}